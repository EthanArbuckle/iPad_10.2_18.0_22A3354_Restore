llvm::APFloatBase *sub_1C57BAB1C(uint64_t a1, unsigned __int8 *a2, int *a3, uint64_t *a4, llvm::Value ***a5, llvm::Value ***a6)
{
  const llvm::APInt *v9;
  llvm::APFloatBase *v10;
  int8x8_t **v12;
  unsigned int v13;

  v13 = 1;
  v12 = 0;
  v10 = llvm::decomposeBitTestICmp(a1, a2, a3, a4, &v12, 1);
  if ((_DWORD)v10)
  {
    *a5 = llvm::ConstantInt::get(*(llvm::ConstantInt ***)*a4, (llvm::Type *)&v12, v9);
    *a6 = llvm::ConstantInt::get(*(llvm::ConstantInt **)*a4, 0, 0);
  }
  if (v13 >= 0x41 && v12)
    MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
  return v10;
}

uint64_t sub_1C57BABC8(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, int a4)
{
  _QWORD **v8;
  uint64_t v9;
  _BOOL4 v10;
  int v11;
  unint64_t v12;
  int8x8_t *v13;
  int8x8_t v14;
  uint8x8_t v15;
  _QWORD **v16;
  uint64_t v17;
  _BOOL4 v18;
  int v19;
  unint64_t v20;
  int8x8_t *v21;
  int8x8_t v22;
  uint8x8_t v23;
  llvm::APInt *v24;
  unsigned int v25;
  uint64_t result;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  llvm::APInt **v52;
  uint64_t v53;
  llvm::APInt *v54;
  uint64_t v55;
  uint64_t v56;

  v55 = 0;
  v56 = 0;
  v53 = 0;
  v54 = 0;
  v52 = (llvm::APInt **)&v56;
  sub_1C4D89F84((uint64_t)&v52, a1);
  v52 = (llvm::APInt **)&v55;
  v53 = 0;
  sub_1C4D89F84((uint64_t)&v52, a2);
  v52 = &v54;
  v53 = 0;
  sub_1C4D89F84((uint64_t)&v52, a3);
  v8 = (_QWORD **)v56;
  if (v56)
  {
    v9 = *(unsigned int *)(v56 + 8);
    if (v9 > 0x40)
    {
      v11 = 0;
      v12 = (unint64_t)(v9 + 63) >> 6;
      v13 = *(int8x8_t **)v56;
      do
      {
        v14 = *v13++;
        v15 = (uint8x8_t)vcnt_s8(v14);
        v15.i16[0] = vaddlv_u8(v15);
        v11 += v15.i32[0];
        --v12;
      }
      while (v12);
      v10 = v11 == 1;
    }
    else if (*(_QWORD *)v56)
    {
      v10 = (*(_QWORD *)v56 & (*(_QWORD *)v56 - 1)) == 0;
    }
    else
    {
      v10 = 0;
    }
  }
  else
  {
    v10 = 0;
  }
  v16 = (_QWORD **)v55;
  if (v55)
  {
    v17 = *(unsigned int *)(v55 + 8);
    if (v17 > 0x40)
    {
      v19 = 0;
      v20 = (unint64_t)(v17 + 63) >> 6;
      v21 = *(int8x8_t **)v55;
      do
      {
        v22 = *v21++;
        v23 = (uint8x8_t)vcnt_s8(v22);
        v23.i16[0] = vaddlv_u8(v23);
        v19 += v23.i32[0];
        --v20;
      }
      while (v20);
      v18 = v19 == 1;
    }
    else if (*(_QWORD *)v55)
    {
      v18 = (*(_QWORD *)v55 & (*(_QWORD *)v55 - 1)) == 0;
    }
    else
    {
      v18 = 0;
    }
  }
  else
  {
    v18 = 0;
  }
  v24 = v54;
  if (v54)
  {
    v25 = *((_DWORD *)v54 + 2);
    if (v25 <= 0x40)
    {
      if (*(_QWORD *)v54)
        goto LABEL_22;
LABEL_32:
      if (a4 == 32)
        v28 = 336;
      else
        v28 = 672;
      if (a4 == 32)
        v29 = 466;
      else
        v29 = 737;
      if (a4 == 32)
        v30 = 520;
      else
        v30 = 260;
      if (v10)
        v28 = v29;
      if (v18)
        v31 = v30;
      else
        v31 = 0;
      return v31 | v28;
    }
    if (llvm::APInt::countLeadingZerosSlowCase(v54) == v25)
      goto LABEL_32;
  }
LABEL_22:
  if (a1 == a3)
  {
    if (a4 == 32)
      v32 = 65;
    else
      v32 = 130;
    if (a4 == 32)
      v33 = 225;
    else
      v33 = 210;
    if (v10)
      result = v33;
    else
      result = v32;
  }
  else
  {
    result = 0;
    if (v8 && v24)
    {
      v27 = *((unsigned int *)v24 + 2);
      if (v27 >= 0x41)
      {
        v40 = (unint64_t)(v27 + 63) >> 6;
        v41 = *(uint64_t **)v24;
        v42 = *v8;
        while (1)
        {
          v44 = *v41++;
          v43 = v44;
          v45 = *v42++;
          if ((v43 & ~v45) != 0)
            goto LABEL_30;
          if (!--v40)
          {
            if (a4 == 32)
              result = 64;
            else
              result = 128;
            goto LABEL_56;
          }
        }
      }
      if (a4 == 32)
        result = 64;
      else
        result = 128;
      if ((*(_QWORD *)v24 & ~(unint64_t)*v8) != 0)
LABEL_30:
        result = 0;
    }
  }
LABEL_56:
  if (a2 == a3)
  {
    if (a4 == 32)
      v36 = 260;
    else
      v36 = 520;
    v37 = result | v36;
    if (a4 == 32)
      v38 = 544;
    else
      v38 = 272;
    v39 = v37 | v38;
    if (v18)
      return v39;
    else
      return v37;
  }
  else if (v16 && v24)
  {
    v34 = *((unsigned int *)v24 + 2);
    if (v34 > 0x40)
    {
      v46 = (unint64_t)(v34 + 63) >> 6;
      v47 = *(uint64_t **)v24;
      v48 = *v16;
      while (1)
      {
        v50 = *v47++;
        v49 = v50;
        v51 = *v48++;
        if ((v49 & ~v51) != 0)
          break;
        if (!--v46)
          goto LABEL_61;
      }
    }
    else if ((*(_QWORD *)v24 & ~(unint64_t)*v16) == 0)
    {
LABEL_61:
      if (a4 == 32)
        v35 = 256;
      else
        v35 = 512;
      return result | v35;
    }
  }
  return result;
}

llvm::Value **sub_1C57BAEE8(llvm::ConstantInt **a1, uint64_t a2, llvm::Constant *a3, llvm::Constant *a4, uint64_t a5, uint64_t a6, llvm::ConstantExpr *this, llvm::Constant *a8, int a9, uint64_t a10)
{
  uint64_t v10;
  llvm::Constant *Xor;
  int v15;
  int v18;
  const void **v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  int v29;
  BOOL v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  unsigned int v47;
  _BOOL4 v48;
  uint64_t v49;
  unint64_t v50;
  size_t v51;
  char *v52;
  const void **v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint8x8_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  llvm::APInt *v66;
  uint64_t v67;
  size_t v68;
  char *v69;
  const void **v70;
  const void *v71;
  uint64_t v72;
  char *v73;
  int v74;
  uint64_t v75;
  void *v76;
  unint64_t v77;
  uint64_t *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  size_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  int v88;
  unsigned int v89;
  llvm::APInt *v90;
  uint64_t v91;
  uint64_t v92;
  size_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  int v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  unint64_t v101;
  _QWORD *v102;
  unint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  _QWORD *v109;
  uint64_t v110;
  llvm::Value **v111;
  const llvm::APInt *v112;
  llvm::Value **v113;
  uint64_t v114;
  size_t v115;
  char *v116;
  const void *v117;
  uint64_t v118;
  char *v119;
  int v120;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  int64_t v125;
  int v126;
  unint64_t v127;
  int v128;
  uint64_t v129;
  const void *v130;
  unint64_t v131;
  int v132;
  char *v133;
  llvm::APInt *v134;
  __int16 v135;
  uint64_t *v136;
  _BYTE v137[32];
  __int16 v138;
  void *v139;
  unsigned int v140;
  unint64_t v141;
  unsigned int v142;

  v10 = 0;
  if (!a5)
    return (llvm::Value **)v10;
  if (*(_BYTE *)(a5 + 16) != 16)
    return (llvm::Value **)v10;
  v10 = 0;
  if (!a6)
    return (llvm::Value **)v10;
  if (*(_BYTE *)(a6 + 16) != 16)
    return (llvm::Value **)v10;
  v10 = 0;
  if (!this)
    return (llvm::Value **)v10;
  if (*((_BYTE *)this + 16) != 16)
    return (llvm::Value **)v10;
  Xor = a8;
  v10 = 0;
  if (!a8 || *((_BYTE *)a8 + 16) != 16)
    return (llvm::Value **)v10;
  v15 = (int)a3;
  if ((_DWORD)a3)
    v18 = 32;
  else
    v18 = 33;
  v135 = v18;
  if (v18 != a9)
    Xor = (llvm::Constant *)llvm::ConstantExpr::getXor(this, a8, a3, a4);
  v19 = (const void **)(a5 + 24);
  v20 = *(unsigned int *)(a5 + 32);
  v21 = (_QWORD *)(a5 + 24);
  if (v20 >= 0x41)
  {
    if (v20 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(a5 + 24)) > 0x40)
      goto LABEL_18;
    v21 = *v19;
  }
  if (!*v21)
    return 0;
LABEL_18:
  v22 = *((_DWORD *)this + 8);
  v23 = (_QWORD *)((char *)this + 24);
  v136 = (uint64_t *)((char *)this + 24);
  if (v22 < 0x41)
    goto LABEL_21;
  if (v22 - llvm::APInt::countLeadingZerosSlowCase((llvm::ConstantExpr *)((char *)this + 24)) <= 0x40)
  {
    v23 = (_QWORD *)*v136;
LABEL_21:
    if (!*v23)
      return 0;
  }
  if (v20 >= 0x41)
  {
    v25 = (_QWORD *)operator new[]();
    memcpy(v25, *v19, ((unint64_t)(v20 + 63) >> 3) & 0x3FFFFFF8);
    v26 = 0;
    v24 = v136;
    v27 = *v136;
    v28 = (unint64_t)(v20 + 63) >> 6;
    do
    {
      v25[v26] &= *(_QWORD *)(v27 + v26 * 8);
      ++v26;
    }
    while (v28 != v26);
    v29 = 0;
    v19 = (const void **)(a5 + 24);
    do
    {
      v30 = v28-- < 1;
      if (v30)
        break;
      v31 = v25[v28];
      v29 += __clz(v31);
    }
    while (!v31);
    v32 = v20 | 0xFFFFFFC0;
    if ((v20 & 0x3F) == 0)
      v32 = 0;
    if ((v20 - v29 - v32) >= 0x41)
    {
      MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
    }
    else
    {
      v10 = *v25;
      MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
      if (!v10)
        return (llvm::Value **)v10;
    }
  }
  else
  {
    v24 = (uint64_t *)((char *)this + 24);
    if ((*v136 & (unint64_t)*v19) == 0)
      return 0;
  }
  v33 = *(unsigned int *)(a5 + 32);
  if (v33 >= 0x41)
  {
    v132 = *(_DWORD *)(a5 + 32);
    v38 = v33 + 63;
    v36 = (_QWORD *)operator new[]();
    v130 = *v19;
    v39 = v136;
    memcpy(v36, *v19, (v38 >> 3) & 0x3FFFFFF8);
    v40 = 0;
    v35 = *v136;
    v41 = v38 >> 6;
    v42 = 8 * (v38 >> 6);
    do
    {
      v36[v40 / 8] &= *(_QWORD *)(v35 + v40);
      v40 += 8;
    }
    while (v42 != v40);
    v43 = 0;
    v44 = *((_QWORD *)Xor + 3);
    v134 = (llvm::Constant *)((char *)Xor + 24);
    do
    {
      v36[v43 / 8] &= *(_QWORD *)(v44 + v43);
      v43 += 8;
    }
    while (v42 != v43);
    v45 = 0;
    v19 = (const void **)(a5 + 24);
    LODWORD(v33) = v132;
    do
    {
      v30 = v41-- < 1;
      if (v30)
        break;
      v46 = v36[v41];
      v45 += __clz(v46);
    }
    while (!v46);
    v47 = v132 | 0xFFFFFFC0;
    if ((v132 & 0x3F) == 0)
      v47 = 0;
    if (v132 - v45 - v47 >= 0x41)
    {
      MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
      goto LABEL_69;
    }
    v37 = (_QWORD *)*v36;
    v34 = (unint64_t)v130;
  }
  else
  {
    v34 = (unint64_t)*v19;
    v35 = *v24;
    v134 = (llvm::Constant *)((char *)Xor + 24);
    v36 = (_QWORD *)((unint64_t)*v19 & *((_QWORD *)Xor + 3) & *v24);
    v37 = v36;
  }
  if (v37)
    goto LABEL_50;
  v49 = *(unsigned int *)(a5 + 32);
  if (v49 >= 0x41)
  {
    v131 = v49 + 63;
    v51 = ((unint64_t)(v49 + 63) >> 3) & 0x3FFFFFF8;
    v52 = (char *)operator new[]();
    v53 = v19;
    v54 = v52;
    v133 = (char *)*v53;
    memcpy(v52, *v53, v51);
    v55 = 0;
    v56 = *v136;
    v57 = 8 * (v131 >> 6);
    do
    {
      *(_QWORD *)&v54[v55] ^= *(_QWORD *)(v56 + v55);
      v55 += 8;
    }
    while (v57 != v55);
    v58 = 0;
    do
    {
      *(_QWORD *)&v54[v58] &= *(_QWORD *)&v133[v58];
      v58 += 8;
    }
    while (v57 != v58);
    v59 = 0;
    v60 = 0;
    do
    {
      v61 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v54[v59]);
      v61.i16[0] = vaddlv_u8(v61);
      v60 += v61.i32[0];
      v59 += 8;
    }
    while (v57 != v59);
    v48 = v60 == 1;
    MEMORY[0x1CAA32F9C](v54, 0x1000C8000313F17);
    v19 = (const void **)(a5 + 24);
    goto LABEL_62;
  }
  v50 = v34 & ~v35;
  if (!v50)
LABEL_50:
    v48 = 0;
  else
    v48 = (v50 & (v50 - 1)) == 0;
LABEL_62:
  if (v33 >= 0x41 && v36)
  {
    MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
    if (v48)
      goto LABEL_65;
  }
  else if (v48)
  {
LABEL_65:
    v62 = *(unsigned int *)(a5 + 32);
    if (v62 > 0x40)
    {
      v76 = (void *)operator new[]();
      v63 = (unint64_t)*v19;
      memcpy(v76, *v19, ((unint64_t)(v62 + 63) >> 3) & 0x3FFFFFF8);
      v64 = *v136;
      v77 = (unint64_t)(v62 + 63) >> 6;
      v78 = (uint64_t *)*v136;
      v79 = v76;
      v66 = v134;
      do
      {
        v80 = *v78++;
        *v79++ |= v80;
        --v77;
      }
      while (v77);
      v81 = *(unsigned int *)(a5 + 32);
      v142 = v62;
      v141 = (unint64_t)v76;
      if (v81 >= 0x41)
      {
        v82 = (void *)operator new[]();
        v99 = (uint64_t *)*v19;
        memcpy(v82, *v19, ((unint64_t)(v81 + 63) >> 3) & 0x3FFFFFF8);
        v100 = (uint64_t *)*v136;
        v101 = (unint64_t)(v81 + 63) >> 6;
        v102 = v82;
        v103 = v101;
        do
        {
          v104 = *v100++;
          *v102++ ^= v104;
          --v103;
        }
        while (v103);
        v105 = v82;
        v106 = (unint64_t)(v81 + 63) >> 6;
        v83 = a10;
        do
        {
          v107 = *v99++;
          *v105++ &= v107;
          --v106;
        }
        while (v106);
        v108 = *(uint64_t **)v134;
        v109 = v82;
        do
        {
          v110 = *v108++;
          *v109++ |= v110;
          --v101;
        }
        while (v101);
        v140 = v81;
        goto LABEL_108;
      }
      LODWORD(v62) = v81;
    }
    else
    {
      v63 = (unint64_t)*v19;
      v64 = *v136;
      v65 = *v136 | (unint64_t)*v19;
      v142 = *(_DWORD *)(a5 + 32);
      v141 = v65;
      v66 = v134;
    }
    v82 = (void *)(*(_QWORD *)v66 | v63 & ~v64);
    v140 = v62;
    v83 = a10;
LABEL_108:
    v139 = v82;
    v111 = llvm::ConstantInt::get(*(llvm::ConstantInt ***)a5, (llvm::Type *)&v141, a3);
    v113 = llvm::ConstantInt::get(*(llvm::ConstantInt ***)a5, (llvm::Type *)&v139, v112);
    v138 = 257;
    v114 = sub_1C4D89BCC(v83, a4, (uint64_t)v111, (uint64_t)v137);
    v138 = 257;
    v10 = sub_1C4774B48(v83, v135, v114, (uint64_t)v113, (uint64_t)v137);
    if (v140 >= 0x41 && v139)
      MEMORY[0x1CAA32F9C](v139, 0x1000C8000313F17);
    if (v142 >= 0x41)
    {
      if (v141)
        MEMORY[0x1CAA32F9C](v141, 0x1000C8000313F17);
    }
    return (llvm::Value **)v10;
  }
  v39 = v136;
LABEL_69:
  v67 = *(unsigned int *)(a5 + 32);
  if (v67 >= 0x41)
  {
    v68 = ((unint64_t)(v67 + 63) >> 3) & 0x3FFFFFF8;
    v69 = (char *)operator new[]();
    v70 = v19;
    v71 = *v19;
    memcpy(v69, v71, v68);
    v72 = 0;
    v73 = (char *)*v39;
    do
    {
      *(_QWORD *)&v69[v72] &= *(_QWORD *)&v73[v72];
      v72 += 8;
    }
    while (v68 != v72);
    v74 = memcmp(v69, v71, v68);
    MEMORY[0x1CAA32F9C](v69, 0x1000C8000313F17);
    v19 = v70;
    if (!v74)
      goto LABEL_86;
    v75 = *(unsigned int *)(a5 + 32);
    if (v75 >= 0x41)
    {
      v84 = ((unint64_t)(v75 + 63) >> 3) & 0x3FFFFFF8;
      v85 = (char *)operator new[]();
      memcpy(v85, *v70, v84);
      v86 = 0;
      v87 = (char *)*v39;
      do
      {
        *(_QWORD *)&v85[v86] &= *(_QWORD *)&v87[v86];
        v86 += 8;
      }
      while (v84 != v86);
      v88 = memcmp(v85, v87, v84);
      MEMORY[0x1CAA32F9C](v85, 0x1000C8000313F17);
      if (v88)
        return 0;
      goto LABEL_86;
    }
  }
  else if (((unint64_t)*v19 & ~*v39) == 0)
  {
    goto LABEL_86;
  }
  if ((*v39 & ~(unint64_t)*v19) != 0)
    return 0;
LABEL_86:
  v89 = *((_DWORD *)Xor + 8);
  if (v89 > 0x40)
  {
    v90 = v134;
    if (llvm::APInt::countLeadingZerosSlowCase(v134) != v89)
      goto LABEL_88;
    goto LABEL_92;
  }
  v90 = v134;
  if (!*(_QWORD *)v134)
  {
LABEL_92:
    v92 = *(unsigned int *)(a5 + 32);
    if (v92 >= 0x41)
    {
      v115 = ((unint64_t)(v92 + 63) >> 3) & 0x3FFFFFF8;
      v116 = (char *)operator new[]();
      v117 = *v19;
      memcpy(v116, *v19, v115);
      v118 = 0;
      v119 = (char *)*v39;
      do
      {
        *(_QWORD *)&v116[v118] &= *(_QWORD *)&v119[v118];
        v118 += 8;
      }
      while (v115 != v118);
      v120 = memcmp(v116, v117, v115);
      MEMORY[0x1CAA32F9C](v116, 0x1000C8000313F17);
      if (v120)
        return 0;
      return llvm::ConstantInt::get(*a1, v15 ^ 1u, 0);
    }
    if (((unint64_t)*v19 & ~*v39) == 0)
      return llvm::ConstantInt::get(*a1, v15 ^ 1u, 0);
    return 0;
  }
LABEL_88:
  v91 = *(unsigned int *)(a5 + 32);
  if (v91 < 0x41)
  {
    if ((*v39 & ~(unint64_t)*v19) == 0)
      return (llvm::Value **)a2;
    goto LABEL_99;
  }
  v93 = ((unint64_t)(v91 + 63) >> 3) & 0x3FFFFFF8;
  v94 = (char *)operator new[]();
  memcpy(v94, *v19, v93);
  v95 = 0;
  v96 = (char *)*v39;
  do
  {
    *(_QWORD *)&v94[v95] &= *(_QWORD *)&v96[v95];
    v95 += 8;
  }
  while (v93 != v95);
  v97 = memcmp(v94, v96, v93);
  MEMORY[0x1CAA32F9C](v94, 0x1000C8000313F17);
  if (!v97)
    return (llvm::Value **)a2;
  v98 = *(unsigned int *)(a5 + 32);
  if (v98 < 0x41)
  {
LABEL_99:
    v10 = a2;
    if ((*(_QWORD *)v90 & (unint64_t)*v19) != 0)
      return (llvm::Value **)v10;
    return llvm::ConstantInt::get(*a1, v15 ^ 1u, 0);
  }
  v122 = (uint64_t *)operator new[]();
  memcpy(v122, *v19, ((unint64_t)(v98 + 63) >> 3) & 0x3FFFFFF8);
  v123 = 0;
  v124 = *(_QWORD *)v90;
  v125 = (unint64_t)(v98 + 63) >> 6;
  do
  {
    v122[v123] &= *(_QWORD *)(v124 + v123 * 8);
    ++v123;
  }
  while (v125 != v123);
  v126 = 0;
  do
  {
    v30 = v125-- < 1;
    if (v30)
      break;
    v127 = v122[v125];
    v126 += __clz(v127);
  }
  while (!v127);
  v128 = v98 | 0xFFFFFFC0;
  if ((v98 & 0x3F) == 0)
    v128 = 0;
  if ((v98 - v126 - v128) >= 0x41)
  {
    MEMORY[0x1CAA32F9C](v122, 0x1000C8000313F17);
    return (llvm::Value **)a2;
  }
  v129 = *v122;
  MEMORY[0x1CAA32F9C](v122, 0x1000C8000313F17);
  v10 = a2;
  if (v129)
    return (llvm::Value **)v10;
  return llvm::ConstantInt::get(*a1, v15 ^ 1u, 0);
}

uint64_t sub_1C57BB9D8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  const void **v10;
  uint64_t v11;
  void *v12;
  BOOL v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *__s1;
  unsigned int v24;
  int *v25;
  _QWORD *v26;
  int8x8_t **v27;
  int8x8_t **v28;
  uint64_t v29;
  uint64_t v30;
  int v31;

  v25 = &v31;
  v26 = a2;
  v27 = (int8x8_t **)&v30;
  v28 = (int8x8_t **)&v29;
  if (!a1)
    return 0;
  v31 = 0;
  v30 = 0;
  v29 = 0;
  v5 = *(_QWORD *)(a1 - 64);
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 5)
  {
    if (*(_WORD *)(v5 + 18) != 13)
      return 0;
    v8 = *(_QWORD *)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF));
    if (!v8)
      return 0;
    *a2 = v8;
    if (!sub_1C57BBD9C(&v27, *(llvm::Constant **)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) + 32)))
      return 0;
  }
  else
  {
    if (v6 != 41)
      return 0;
    v7 = *(_QWORD *)(v5 - 64);
    if (!v7)
      return 0;
    *a2 = v7;
    if ((sub_1C57BBC6C(&v27, *(llvm::Constant **)(v5 - 32)) & 1) == 0)
      return 0;
  }
  if (!sub_1C57BBC6C(&v28, *(llvm::Constant **)(a1 - 32)))
    return 0;
  *v25 = *(_WORD *)(a1 + 18) & 0x3F;
  if (v31 != 36)
    return 0;
  v10 = (const void **)v30;
  v11 = *(unsigned int *)(v29 + 8);
  if (v11 > 0x40)
  {
    v12 = *(void **)v30;
    v20 = ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8;
    while (v20)
    {
      v21 = *(_QWORD *)(*(_QWORD *)v29 - 8 + v20);
      v22 = *(_QWORD *)(*(_QWORD *)v30 - 8 + v20);
      v20 -= 8;
      v13 = v21 > v22;
      if (v21 != v22)
        goto LABEL_16;
    }
    return 0;
  }
  v12 = *(void **)v30;
  v13 = *(_QWORD *)v29 > *(_QWORD *)v30;
LABEL_16:
  if (!v13)
    return 0;
  v14 = *(unsigned int *)(v30 + 8);
  v24 = v14;
  if (v14 > 0x40)
  {
    v15 = ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8;
    __s1 = (void *)operator new[]();
    memcpy(__s1, *v10, v15);
  }
  else
  {
    __s1 = v12;
  }
  sub_1C4888094((uint64_t)&__s1, 1u);
  if (v24 >= 0x41)
  {
    v16 = __s1;
    v17 = memcmp(__s1, *(const void **)v29, (((unint64_t)v24 + 63) >> 3) & 0x3FFFFFF8);
    if (v16)
      MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
    if (v17)
      return 0;
  }
  else if (__s1 != *(void **)v29)
  {
    return 0;
  }
  v18 = v30;
  if (*(_DWORD *)(a3 + 8) > 0x40u || *(_DWORD *)(v30 + 8) > 0x40u)
  {
    if (v30 != a3)
    {
      llvm::APInt::reallocate(a3, *(_DWORD *)(v30 + 8));
      v19 = *(unsigned int *)(a3 + 8);
      if (v19 <= 0x40)
        *(_QWORD *)a3 = *(_QWORD *)v18;
      else
        memcpy(*(void **)a3, *(const void **)v18, ((unint64_t)(v19 + 63) >> 3) & 0x3FFFFFF8);
    }
  }
  else
  {
    *(_QWORD *)a3 = *(_QWORD *)v30;
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(v18 + 8);
  }
  return 1;
}

int8x8_t *sub_1C57BBC6C(int8x8_t ***a1, llvm::Constant *this)
{
  unsigned int v3;
  int8x8_t *v4;
  uint64_t v5;
  uint8x8_t v6;
  int v7;
  unint64_t v8;
  int8x8_t *v9;
  int8x8_t v10;
  uint8x8_t v11;
  int8x8_t *result;
  uint64_t v14;
  uint8x8_t v15;
  int v16;
  unint64_t v17;
  int8x8_t *v18;
  int8x8_t v19;
  uint8x8_t v20;

  v3 = *((unsigned __int8 *)this + 16);
  if (this && v3 == 16)
  {
    v4 = (int8x8_t *)((char *)this + 24);
    v5 = *((unsigned int *)this + 8);
    if (v5 > 0x40)
    {
      v7 = 0;
      v8 = (unint64_t)(v5 + 63) >> 6;
      v9 = (int8x8_t *)*v4;
      do
      {
        v10 = *v9++;
        v11 = (uint8x8_t)vcnt_s8(v10);
        v11.i16[0] = vaddlv_u8(v11);
        v7 += v11.i32[0];
        --v8;
      }
      while (v8);
      if (v7 == 1)
        goto LABEL_22;
    }
    else
    {
      v6 = (uint8x8_t)vcnt_s8(*v4);
      v6.i16[0] = vaddlv_u8(v6);
      if (v6.u32[0] == 1)
        goto LABEL_22;
    }
  }
  if (v3 > 0x14 || (*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) != 18)
    return 0;
  result = (int8x8_t *)llvm::Constant::getSplatValue(this, 0);
  if (!result)
    return result;
  if (result[2].i8[0] != 16)
    return 0;
  v4 = result + 3;
  v14 = result[4].u32[0];
  if (v14 > 0x40)
  {
    v16 = 0;
    v17 = (unint64_t)(v14 + 63) >> 6;
    v18 = (int8x8_t *)*v4;
    do
    {
      v19 = *v18++;
      v20 = (uint8x8_t)vcnt_s8(v19);
      v20.i16[0] = vaddlv_u8(v20);
      v16 += v20.i32[0];
      --v17;
    }
    while (v17);
    if (v16 == 1)
      goto LABEL_22;
    return 0;
  }
  v15 = (uint8x8_t)vcnt_s8(*v4);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] != 1)
    return 0;
LABEL_22:
  **a1 = v4;
  return (int8x8_t *)1;
}

int8x8_t *sub_1C57BBD9C(int8x8_t ***a1, llvm::Constant *this)
{
  int8x8_t *v3;
  uint64_t v4;
  uint8x8_t v5;
  int v6;
  unint64_t v7;
  int8x8_t *v8;
  int8x8_t v9;
  uint8x8_t v10;
  int8x8_t *result;
  uint64_t v12;
  uint8x8_t v13;
  int v14;
  unint64_t v15;
  int8x8_t *v16;
  int8x8_t v17;
  uint8x8_t v18;

  if (this && *((_BYTE *)this + 16) == 16)
  {
    v3 = (int8x8_t *)((char *)this + 24);
    v4 = *((unsigned int *)this + 8);
    if (v4 > 0x40)
    {
      v6 = 0;
      v7 = (unint64_t)(v4 + 63) >> 6;
      v8 = (int8x8_t *)*v3;
      do
      {
        v9 = *v8++;
        v10 = (uint8x8_t)vcnt_s8(v9);
        v10.i16[0] = vaddlv_u8(v10);
        v6 += v10.i32[0];
        --v7;
      }
      while (v7);
      if (v6 == 1)
        goto LABEL_18;
    }
    else
    {
      v5 = (uint8x8_t)vcnt_s8(*v3);
      v5.i16[0] = vaddlv_u8(v5);
      if (v5.u32[0] == 1)
        goto LABEL_18;
    }
  }
  if ((*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) != 0x12)
    return 0;
  result = (int8x8_t *)llvm::Constant::getSplatValue(this, 0);
  if (!result)
    return result;
  if (result[2].i8[0] != 16)
    return 0;
  v3 = result + 3;
  v12 = result[4].u32[0];
  if (v12 > 0x40)
  {
    v14 = 0;
    v15 = (unint64_t)(v12 + 63) >> 6;
    v16 = (int8x8_t *)*v3;
    do
    {
      v17 = *v16++;
      v18 = (uint8x8_t)vcnt_s8(v17);
      v18.i16[0] = vaddlv_u8(v18);
      v14 += v18.i32[0];
      --v15;
    }
    while (v15);
    if (v14 == 1)
      goto LABEL_18;
    return 0;
  }
  v13 = (uint8x8_t)vcnt_s8(*v3);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] != 1)
    return 0;
LABEL_18:
  **a1 = v3;
  return (int8x8_t *)1;
}

BOOL sub_1C57BBEC8(int **a1, uint64_t a2)
{
  _BOOL8 result;

  if (!a2)
    return 0;
  result = sub_1C4E7AEB4((uint64_t)(a1 + 1), *(_QWORD *)(a2 - 64));
  if (result)
  {
    result = sub_1C4D8A7F0((llvm::APInt *)(a1 + 4), *(unsigned __int8 **)(a2 - 32));
    if (result)
    {
      **a1 = *(_WORD *)(a2 + 18) & 0x3F;
      return 1;
    }
  }
  return result;
}

uint64_t sub_1C57BBF2C(uint64_t **a1, uint64_t a2)
{
  int v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;

  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 != 5)
  {
    if (v4 != 57)
      return 0;
    v5 = (_QWORD *)(a2 - 64);
    v6 = *(_QWORD *)(a2 - 64);
    v7 = *(unsigned __int8 *)(v6 + 16);
    if (v7 != 5)
    {
      if (v7 != 58)
        goto LABEL_27;
      v8 = **a1;
      if (v8 != *(_QWORD *)(v6 - 64))
      {
LABEL_8:
        if (v8 != *(_QWORD *)(v6 - 32) || (sub_1C4D9ED34((uint64_t)(a1 + 1), *(llvm::Constant **)(v6 - 64)) & 1) == 0)
          goto LABEL_27;
        goto LABEL_26;
      }
      if ((sub_1C4D9ED34((uint64_t)(a1 + 1), *(llvm::Constant **)(v6 - 32)) & 1) == 0)
      {
        v8 = **a1;
        goto LABEL_8;
      }
LABEL_26:
      if (*a1[2] != *(_QWORD *)(a2 - 32))
        goto LABEL_27;
      return 1;
    }
    if (*(_WORD *)(v6 + 18) != 30)
      goto LABEL_27;
    v12 = *(_DWORD *)(v6 + 20) & 0x7FFFFFF;
    v13 = v6 - 32 * v12;
    v14 = **a1;
    if (v14 == *(_QWORD *)v13)
    {
      if ((sub_1C4D9EED4((uint64_t)(a1 + 1), *(llvm::Constant **)(v13 + 32)) & 1) != 0)
        goto LABEL_26;
      v14 = **a1;
      v12 = *(_DWORD *)(v6 + 20) & 0x7FFFFFF;
    }
    v15 = v6 - 32 * v12;
    if (v14 != *(_QWORD *)(v15 + 32) || !sub_1C4D9EED4((uint64_t)(a1 + 1), *(llvm::Constant **)v15))
    {
LABEL_27:
      v16 = *(_QWORD *)(a2 - 32);
      v17 = *(unsigned __int8 *)(v16 + 16);
      if (v17 == 5)
      {
        if (*(_WORD *)(v16 + 18) == 30)
        {
          v19 = *(_DWORD *)(v16 + 20) & 0x7FFFFFF;
          v20 = v16 - 32 * v19;
          v21 = **a1;
          if (v21 == *(_QWORD *)v20)
          {
            if ((sub_1C4D9EED4((uint64_t)(a1 + 1), *(llvm::Constant **)(v20 + 32)) & 1) != 0)
              return *a1[2] == *v5;
            v21 = **a1;
            v19 = *(_DWORD *)(v16 + 20) & 0x7FFFFFF;
          }
          v22 = v16 - 32 * v19;
          if (v21 == *(_QWORD *)(v22 + 32) && (sub_1C4D9EED4((uint64_t)(a1 + 1), *(llvm::Constant **)v22) & 1) != 0)
            return *a1[2] == *v5;
        }
      }
      else if (v17 == 58)
      {
        v18 = **a1;
        if (v18 != *(_QWORD *)(v16 - 64))
        {
LABEL_32:
          if (v18 == *(_QWORD *)(v16 - 32)
            && (sub_1C4D9ED34((uint64_t)(a1 + 1), *(llvm::Constant **)(v16 - 64)) & 1) != 0)
          {
            return *a1[2] == *v5;
          }
          return 0;
        }
        if ((sub_1C4D9ED34((uint64_t)(a1 + 1), *(llvm::Constant **)(v16 - 32)) & 1) == 0)
        {
          v18 = **a1;
          goto LABEL_32;
        }
        return *a1[2] == *v5;
      }
      return 0;
    }
    goto LABEL_26;
  }
  if (*(_WORD *)(a2 + 18) != 29)
    return 0;
  v9 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v10 = *(unsigned __int8 *)(v9 + 16);
  if (v10 == 5)
  {
    if (*(_WORD *)(v9 + 18) != 30)
      goto LABEL_49;
    v23 = *(_DWORD *)(v9 + 20) & 0x7FFFFFF;
    v24 = v9 - 32 * v23;
    v25 = **a1;
    if (v25 == *(_QWORD *)v24)
    {
      if ((sub_1C4D9EED4((uint64_t)(a1 + 1), *(llvm::Constant **)(v24 + 32)) & 1) != 0)
        goto LABEL_48;
      v25 = **a1;
      v23 = *(_DWORD *)(v9 + 20) & 0x7FFFFFF;
    }
    v26 = v9 - 32 * v23;
    if (v25 != *(_QWORD *)(v26 + 32) || !sub_1C4D9EED4((uint64_t)(a1 + 1), *(llvm::Constant **)v26))
      goto LABEL_49;
    goto LABEL_48;
  }
  if (v10 != 58)
    goto LABEL_49;
  v11 = **a1;
  if (v11 != *(_QWORD *)(v9 - 64))
  {
LABEL_17:
    if (v11 != *(_QWORD *)(v9 - 32) || (sub_1C4D9ED34((uint64_t)(a1 + 1), *(llvm::Constant **)(v9 - 64)) & 1) == 0)
      goto LABEL_49;
    goto LABEL_48;
  }
  if ((sub_1C4D9ED34((uint64_t)(a1 + 1), *(llvm::Constant **)(v9 - 32)) & 1) == 0)
  {
    v11 = **a1;
    goto LABEL_17;
  }
LABEL_48:
  if (*a1[2] == *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32))
    return 1;
LABEL_49:
  v27 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
  v28 = *(unsigned __int8 *)(v27 + 16);
  if (v28 != 5)
  {
    if (v28 != 58)
      return 0;
    v29 = **a1;
    if (v29 == *(_QWORD *)(v27 - 64))
    {
      if ((sub_1C4D9ED34((uint64_t)(a1 + 1), *(llvm::Constant **)(v27 - 32)) & 1) != 0)
        goto LABEL_66;
      v29 = **a1;
    }
    if (v29 != *(_QWORD *)(v27 - 32) || (sub_1C4D9ED34((uint64_t)(a1 + 1), *(llvm::Constant **)(v27 - 64)) & 1) == 0)
      return 0;
LABEL_66:
    v5 = (_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    return *a1[2] == *v5;
  }
  if (*(_WORD *)(v27 + 18) != 30)
    return 0;
  v30 = *(_DWORD *)(v27 + 20) & 0x7FFFFFF;
  v31 = v27 - 32 * v30;
  v32 = **a1;
  if (v32 == *(_QWORD *)v31)
  {
    if ((sub_1C4D9EED4((uint64_t)(a1 + 1), *(llvm::Constant **)(v31 + 32)) & 1) != 0)
      goto LABEL_66;
    v32 = **a1;
    v30 = *(_DWORD *)(v27 + 20) & 0x7FFFFFF;
  }
  v33 = v27 - 32 * v30;
  if (v32 != *(_QWORD *)(v33 + 32))
    return 0;
  result = sub_1C4D9EED4((uint64_t)(a1 + 1), *(llvm::Constant **)v33);
  if ((_DWORD)result)
    goto LABEL_66;
  return result;
}

uint64_t sub_1C57BC348(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;

  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 30)
      return 0;
    v10 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v11 = *(_DWORD *)(a1 + 16);
    v12 = *(unsigned __int8 *)(v10 + 16);
    if (v11 + 28 == v12)
    {
      v13 = *(_QWORD *)(v10 - 64);
      if (v13)
      {
        **(_QWORD **)a1 = v13;
        v14 = *(_QWORD *)(v10 - 32);
        if (!v14)
          goto LABEL_54;
      }
      else
      {
        v18 = *(_QWORD *)(v10 - 32);
        if (!v18)
          goto LABEL_54;
        **(_QWORD **)a1 = v18;
        v14 = *(_QWORD *)(v10 - 64);
        if (!v14)
          goto LABEL_54;
      }
LABEL_50:
      **(_QWORD **)(a1 + 8) = v14;
      if ((sub_1C4D9EED4(a1 + 24, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32)) & 1) != 0)
        return 1;
      v11 = *(_DWORD *)(a1 + 16);
      v12 = v11 + 28;
LABEL_54:
      v29 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
      v30 = *(unsigned __int8 *)(v29 + 16);
      if (v12 == v30)
      {
        v31 = *(_QWORD *)(v29 - 64);
        if (v31)
        {
          **(_QWORD **)a1 = v31;
          v32 = *(_QWORD *)(v29 - 32);
          if (!v32)
            return 0;
        }
        else
        {
          v34 = *(_QWORD *)(v29 - 32);
          if (!v34)
            return 0;
          **(_QWORD **)a1 = v34;
          v32 = *(_QWORD *)(v29 - 64);
          if (!v32)
            return 0;
        }
      }
      else
      {
        if (v30 != 5 || v11 != *(unsigned __int16 *)(v29 + 18))
          return 0;
        v33 = (_QWORD *)(v29 - 32 * (*(_DWORD *)(v29 + 20) & 0x7FFFFFF));
        if (*v33)
        {
          **(_QWORD **)a1 = *v33;
          v32 = *(_QWORD *)(v29 - 32 * (*(_DWORD *)(v29 + 20) & 0x7FFFFFF) + 32);
          if (!v32)
            return 0;
        }
        else
        {
          v35 = v33[4];
          if (!v35)
            return 0;
          **(_QWORD **)a1 = v35;
          v32 = *(_QWORD *)(v29 - 32 * (*(_DWORD *)(v29 + 20) & 0x7FFFFFF));
          if (!v32)
            return 0;
        }
      }
      **(_QWORD **)(a1 + 8) = v32;
      return sub_1C4D9EED4(a1 + 24, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
    }
    if (v12 == 5 && v11 == *(unsigned __int16 *)(v10 + 18))
    {
      v16 = (_QWORD *)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF));
      if (*v16)
      {
        **(_QWORD **)a1 = *v16;
        v14 = *(_QWORD *)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) + 32);
        goto LABEL_49;
      }
      v28 = v16[4];
      if (v28)
      {
        **(_QWORD **)a1 = v28;
        v14 = *(_QWORD *)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF));
LABEL_49:
        v12 = v11 + 28;
        if (!v14)
          goto LABEL_54;
        goto LABEL_50;
      }
    }
    v12 = v11 + 28;
    goto LABEL_54;
  }
  if (v4 == 58)
  {
    v5 = *(_QWORD *)(a2 - 64);
    v6 = *(_DWORD *)(a1 + 16);
    v7 = *(unsigned __int8 *)(v5 + 16);
    if (v6 + 28 == v7)
    {
      v8 = *(_QWORD *)(v5 - 64);
      if (v8)
      {
        **(_QWORD **)a1 = v8;
        v9 = *(_QWORD *)(v5 - 32);
        if (!v9)
          goto LABEL_32;
      }
      else
      {
        v17 = *(_QWORD *)(v5 - 32);
        if (!v17 || (**(_QWORD **)a1 = v17, (v9 = *(_QWORD *)(v5 - 64)) == 0))
        {
LABEL_32:
          v20 = *(_QWORD *)(a2 - 32);
          v21 = *(unsigned __int8 *)(v20 + 16);
          if (v7 == v21)
          {
            v22 = *(_QWORD *)(v20 - 64);
            if (v22)
            {
              **(_QWORD **)a1 = v22;
              v23 = *(_QWORD *)(v20 - 32);
              if (!v23)
                return 0;
            }
            else
            {
              v25 = *(_QWORD *)(v20 - 32);
              if (!v25)
                return 0;
              **(_QWORD **)a1 = v25;
              v23 = *(_QWORD *)(v20 - 64);
              if (!v23)
                return 0;
            }
          }
          else
          {
            if (v21 != 5 || v6 != *(unsigned __int16 *)(v20 + 18))
              return 0;
            v24 = (_QWORD *)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF));
            if (*v24)
            {
              **(_QWORD **)a1 = *v24;
              v23 = *(_QWORD *)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF) + 32);
              if (!v23)
                return 0;
            }
            else
            {
              v27 = v24[4];
              if (!v27)
                return 0;
              **(_QWORD **)a1 = v27;
              v23 = *(_QWORD *)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF));
              if (!v23)
                return 0;
            }
          }
          **(_QWORD **)(a1 + 8) = v23;
          return sub_1C4D9ED34(a1 + 24, *(llvm::Constant **)(a2 - 64));
        }
      }
      goto LABEL_29;
    }
    if (v7 == 5 && v6 == *(unsigned __int16 *)(v5 + 18))
    {
      v15 = (_QWORD *)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF));
      if (*v15)
      {
        **(_QWORD **)a1 = *v15;
        v9 = *(_QWORD *)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) + 32);
        goto LABEL_28;
      }
      v19 = v15[4];
      if (v19)
      {
        **(_QWORD **)a1 = v19;
        v9 = *(_QWORD *)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF));
LABEL_28:
        v7 = v6 + 28;
        if (!v9)
          goto LABEL_32;
LABEL_29:
        **(_QWORD **)(a1 + 8) = v9;
        if ((sub_1C4D9ED34(a1 + 24, *(llvm::Constant **)(a2 - 32)) & 1) == 0)
        {
          v6 = *(_DWORD *)(a1 + 16);
          v7 = v6 + 28;
          goto LABEL_32;
        }
        return 1;
      }
    }
    v7 = v6 + 28;
    goto LABEL_32;
  }
  return 0;
}

uint64_t sub_1C57BC72C(uint64_t a1, int a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t result;
  uint64_t v14;

  v5 = *(unsigned __int8 *)(a3 + 16);
  if (a2 + 28 == v5)
  {
    v7 = (_QWORD *)(a3 - 64);
    v6 = *(_QWORD *)(a3 - 64);
    if (!v6
      || (**(_QWORD **)a1 = v6, !sub_1C57BC860((uint64_t *)(a1 + 8), v6))
      || *(_QWORD *)(a1 + 40) != *(_QWORD *)(a3 - 32))
    {
      v8 = *(_QWORD *)(a3 - 32);
      if (!v8)
        return 0;
      **(_QWORD **)a1 = v8;
      if ((sub_1C57BC860((uint64_t *)(a1 + 8), v8) & 1) == 0)
        return 0;
      return *(_QWORD *)(a1 + 40) == *v7;
    }
    return 1;
  }
  if (v5 != 5 || *(unsigned __int16 *)(a3 + 18) != a2)
    return 0;
  v9 = *(_DWORD *)(a3 + 20) & 0x7FFFFFF;
  v10 = *(_QWORD *)(a3 - 32 * v9);
  if (v10)
  {
    **(_QWORD **)a1 = v10;
    v11 = sub_1C57BC860((uint64_t *)(a1 + 8), v10);
    v12 = *(_DWORD *)(a3 + 20);
    if ((v11 & 1) != 0)
    {
      v9 = v12 & 0x7FFFFFF;
      if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(a3 - 32 * v9 + 32))
        return 1;
    }
    else
    {
      v9 = v12 & 0x7FFFFFF;
    }
  }
  v14 = *(_QWORD *)(a3 - 32 * v9 + 32);
  if (v14)
  {
    **(_QWORD **)a1 = v14;
    result = sub_1C57BC860((uint64_t *)(a1 + 8), v14);
    if (!(_DWORD)result)
      return result;
    v7 = (_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
    return *(_QWORD *)(a1 + 40) == *v7;
  }
  return 0;
}

uint64_t sub_1C57BC860(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Constant **v13;
  llvm::Constant *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;

  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 != 5)
  {
    if (v4 != 58)
      return 0;
    v5 = *(_QWORD *)(a2 - 64);
    v6 = *((_DWORD *)a1 + 4);
    v7 = *(unsigned __int8 *)(v5 + 16);
    v8 = v6 + 28;
    if (v6 + 28 == v7)
    {
      v9 = *(_QWORD *)(v5 - 64);
      if (*a1 != v9)
      {
        v10 = *(_QWORD *)(v5 - 32);
        goto LABEL_19;
      }
      v10 = *(_QWORD *)(v5 - 32);
      if (a1[1] != v10)
      {
LABEL_19:
        if (*a1 != v10)
        {
          v8 = v7;
LABEL_29:
          v24 = *(_QWORD *)(a2 - 32);
          v25 = *(unsigned __int8 *)(v24 + 16);
          if (v8 == v25)
          {
            v26 = *(_QWORD *)(v24 - 64);
            v27 = *a1;
            if (*a1 != v26)
            {
              v28 = *(_QWORD *)(v24 - 32);
LABEL_39:
              if (v27 == v28 && a1[1] == v26)
                return sub_1C4D9ED34((uint64_t)(a1 + 3), *(llvm::Constant **)(a2 - 64));
              return 0;
            }
            v28 = *(_QWORD *)(v24 - 32);
            goto LABEL_38;
          }
          if (v25 == 5 && v6 == *(unsigned __int16 *)(v24 + 18))
          {
            v29 = (uint64_t *)(v24 - 32 * (*(_DWORD *)(v24 + 20) & 0x7FFFFFF));
            v26 = *v29;
            v27 = *a1;
            if (*a1 != *v29)
            {
              v28 = v29[4];
              goto LABEL_39;
            }
            v28 = v29[4];
LABEL_38:
            if (a1[1] == v28)
              return sub_1C4D9ED34((uint64_t)(a1 + 3), *(llvm::Constant **)(a2 - 64));
            goto LABEL_39;
          }
          return 0;
        }
        goto LABEL_26;
      }
LABEL_27:
      if ((sub_1C4D9ED34((uint64_t)(a1 + 3), *(llvm::Constant **)(a2 - 32)) & 1) == 0)
      {
        v6 = *((_DWORD *)a1 + 4);
        v8 = v6 + 28;
        goto LABEL_29;
      }
      return 1;
    }
    if (v7 != 5 || v6 != *(unsigned __int16 *)(v5 + 18))
      goto LABEL_29;
    v20 = (uint64_t *)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF));
    v9 = *v20;
    if (*a1 == *v20)
    {
      v21 = v20[4];
      if (a1[1] == v21)
        goto LABEL_27;
    }
    else
    {
      v21 = v20[4];
    }
    if (*a1 != v21)
      goto LABEL_29;
LABEL_26:
    if (a1[1] != v9)
      goto LABEL_29;
    goto LABEL_27;
  }
  if (*(_WORD *)(a2 + 18) != 30)
    return 0;
  v11 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  v12 = -v11;
  v13 = (llvm::Constant **)(a2 - 32 * v11);
  v14 = *v13;
  v15 = *((_DWORD *)a1 + 4);
  v16 = *((unsigned __int8 *)*v13 + 16);
  v17 = v15 + 28;
  if (v15 + 28 != v16)
  {
    if (v16 != 5 || v15 != *((unsigned __int16 *)v14 + 9))
      goto LABEL_48;
    v22 = (uint64_t *)((char *)v14 - 32 * (*((_DWORD *)v14 + 5) & 0x7FFFFFF));
    v18 = *v22;
    if (*a1 == *v22)
    {
      v23 = v22[4];
      if (a1[1] == v23)
        goto LABEL_45;
    }
    else
    {
      v23 = v22[4];
    }
    if (*a1 != v23)
      goto LABEL_48;
LABEL_44:
    if (a1[1] != v18)
      goto LABEL_48;
    goto LABEL_45;
  }
  v18 = *((_QWORD *)v14 - 8);
  if (*a1 != v18)
  {
    v19 = *((_QWORD *)v14 - 4);
    goto LABEL_22;
  }
  v19 = *((_QWORD *)v14 - 4);
  if (a1[1] != v19)
  {
LABEL_22:
    if (*a1 != v19)
    {
      v17 = *((unsigned __int8 *)*v13 + 16);
      goto LABEL_48;
    }
    goto LABEL_44;
  }
LABEL_45:
  if ((sub_1C4D9EED4((uint64_t)(a1 + 3), v13[4]) & 1) != 0)
    return 1;
  v15 = *((_DWORD *)a1 + 4);
  v12 = -(uint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  v17 = v15 + 28;
LABEL_48:
  v31 = a2 + 32 * v12;
  v32 = *(_QWORD *)(v31 + 32);
  v33 = *(unsigned __int8 *)(v32 + 16);
  if (v17 != v33)
  {
    if (v33 != 5 || v15 != *(unsigned __int16 *)(v32 + 18))
      return 0;
    v37 = (uint64_t *)(v32 - 32 * (*(_DWORD *)(v32 + 20) & 0x7FFFFFF));
    v34 = *v37;
    v35 = *a1;
    if (*a1 != *v37)
    {
      v36 = v37[4];
      goto LABEL_57;
    }
    v36 = v37[4];
LABEL_56:
    if (a1[1] == v36)
      return sub_1C4D9EED4((uint64_t)(a1 + 3), *(llvm::Constant **)v31);
    goto LABEL_57;
  }
  v34 = *(_QWORD *)(v32 - 64);
  v35 = *a1;
  if (*a1 == v34)
  {
    v36 = *(_QWORD *)(v32 - 32);
    goto LABEL_56;
  }
  v36 = *(_QWORD *)(v32 - 32);
LABEL_57:
  if (v35 != v36 || a1[1] != v34)
    return 0;
  return sub_1C4D9EED4((uint64_t)(a1 + 3), *(llvm::Constant **)v31);
}

uint64_t sub_1C57BCB94(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::Constant **v15;
  llvm::Constant *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;

  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 != 5)
  {
    if (v4 != 58)
      return 0;
    v5 = *(_QWORD *)(a2 - 64);
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6 || *(_QWORD *)(v6 + 8))
    {
LABEL_5:
      v7 = *(_QWORD *)(a2 - 32);
      v8 = *(_QWORD *)(v7 + 8);
      if (!v8 || *(_QWORD *)(v8 + 8))
        return 0;
      v9 = *(_DWORD *)(a1 + 16);
      v10 = *(unsigned __int8 *)(v7 + 16);
      if (v9 + 28 == v10)
      {
        v11 = *(_QWORD *)(v7 - 64);
        if (*(_QWORD *)a1 != v11)
        {
          v12 = *(_QWORD *)(v7 - 32);
          goto LABEL_46;
        }
        v12 = *(_QWORD *)(v7 - 32);
        if (*(_QWORD *)(a1 + 8) != v12)
        {
LABEL_46:
          if (*(_QWORD *)a1 == v12)
          {
LABEL_61:
            if (*(_QWORD *)(a1 + 8) == v11)
              return sub_1C4D9ED34(a1 + 24, *(llvm::Constant **)(a2 - 64));
          }
          return 0;
        }
        return sub_1C4D9ED34(a1 + 24, *(llvm::Constant **)(a2 - 64));
      }
      if (v10 != 5 || v9 != *(unsigned __int16 *)(v7 + 18))
        return 0;
      v35 = (uint64_t *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF));
      v11 = *v35;
      if (*(_QWORD *)a1 == *v35)
      {
        v36 = v35[4];
        if (*(_QWORD *)(a1 + 8) == v36)
          return sub_1C4D9ED34(a1 + 24, *(llvm::Constant **)(a2 - 64));
      }
      else
      {
        v36 = v35[4];
      }
      if (*(_QWORD *)a1 == v36)
        goto LABEL_61;
      return 0;
    }
    v25 = *(_DWORD *)(a1 + 16);
    v26 = *(unsigned __int8 *)(v5 + 16);
    if (v25 + 28 == v26)
    {
      v27 = *(_QWORD *)(v5 - 64);
      if (*(_QWORD *)a1 != v27)
      {
        v28 = *(_QWORD *)(v5 - 32);
        goto LABEL_41;
      }
      v28 = *(_QWORD *)(v5 - 32);
      if (*(_QWORD *)(a1 + 8) != v28)
      {
LABEL_41:
        if (*(_QWORD *)a1 != v28)
          goto LABEL_5;
        goto LABEL_42;
      }
LABEL_43:
      if ((sub_1C4D9ED34(a1 + 24, *(llvm::Constant **)(a2 - 32)) & 1) == 0)
        goto LABEL_5;
      return 1;
    }
    if (v26 != 5 || v25 != *(unsigned __int16 *)(v5 + 18))
      goto LABEL_5;
    v33 = (uint64_t *)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF));
    v27 = *v33;
    if (*(_QWORD *)a1 == *v33)
    {
      v34 = v33[4];
      if (*(_QWORD *)(a1 + 8) == v34)
        goto LABEL_43;
    }
    else
    {
      v34 = v33[4];
    }
    if (*(_QWORD *)a1 != v34)
      goto LABEL_5;
LABEL_42:
    if (*(_QWORD *)(a1 + 8) != v27)
      goto LABEL_5;
    goto LABEL_43;
  }
  if (*(_WORD *)(a2 + 18) != 30)
    return 0;
  v13 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  v14 = -v13;
  v15 = (llvm::Constant **)(a2 - 32 * v13);
  v16 = *v15;
  v17 = *((_QWORD *)*v15 + 1);
  if (v17 && !*(_QWORD *)(v17 + 8))
  {
    v29 = *(_DWORD *)(a1 + 16);
    v30 = *((unsigned __int8 *)v16 + 16);
    if (v29 + 28 == v30)
    {
      v31 = *((_QWORD *)v16 - 8);
      if (*(_QWORD *)a1 != v31)
      {
        v32 = *((_QWORD *)v16 - 4);
        goto LABEL_49;
      }
      v32 = *((_QWORD *)v16 - 4);
      if (*(_QWORD *)(a1 + 8) != v32)
      {
LABEL_49:
        if (*(_QWORD *)a1 != v32)
          goto LABEL_13;
        goto LABEL_50;
      }
LABEL_66:
      if ((sub_1C4D9EED4(a1 + 24, v15[4]) & 1) != 0)
        return 1;
      v14 = -(uint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
      goto LABEL_13;
    }
    if (v30 != 5 || v29 != *((unsigned __int16 *)v16 + 9))
      goto LABEL_13;
    v37 = (uint64_t *)((char *)v16 - 32 * (*((_DWORD *)v16 + 5) & 0x7FFFFFF));
    v31 = *v37;
    if (*(_QWORD *)a1 == *v37)
    {
      v38 = v37[4];
      if (*(_QWORD *)(a1 + 8) == v38)
        goto LABEL_66;
    }
    else
    {
      v38 = v37[4];
    }
    if (*(_QWORD *)a1 != v38)
      goto LABEL_13;
LABEL_50:
    if (*(_QWORD *)(a1 + 8) != v31)
      goto LABEL_13;
    goto LABEL_66;
  }
LABEL_13:
  v18 = a2 + 32 * v14;
  v19 = *(_QWORD *)(v18 + 32);
  v20 = *(_QWORD *)(v19 + 8);
  if (!v20 || *(_QWORD *)(v20 + 8))
    return 0;
  v21 = *(_DWORD *)(a1 + 16);
  v22 = *(unsigned __int8 *)(v19 + 16);
  if (v21 + 28 == v22)
  {
    v23 = *(_QWORD *)(v19 - 64);
    if (*(_QWORD *)a1 == v23)
    {
      v24 = *(_QWORD *)(v19 - 32);
      if (*(_QWORD *)(a1 + 8) == v24)
        return sub_1C4D9EED4(a1 + 24, *(llvm::Constant **)v18);
    }
    else
    {
      v24 = *(_QWORD *)(v19 - 32);
    }
    if (*(_QWORD *)a1 != v24)
      return 0;
  }
  else
  {
    if (v22 != 5 || v21 != *(unsigned __int16 *)(v19 + 18))
      return 0;
    v39 = (uint64_t *)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF));
    v23 = *v39;
    if (*(_QWORD *)a1 == *v39)
    {
      v40 = v39[4];
      if (*(_QWORD *)(a1 + 8) == v40)
        return sub_1C4D9EED4(a1 + 24, *(llvm::Constant **)v18);
    }
    else
    {
      v40 = v39[4];
    }
    if (*(_QWORD *)a1 != v40)
      return 0;
  }
  if (*(_QWORD *)(a1 + 8) != v23)
    return 0;
  return sub_1C4D9EED4(a1 + 24, *(llvm::Constant **)v18);
}

BOOL sub_1C57BCF34(uint64_t *a1, int a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *(unsigned __int8 *)(a3 + 16);
  if (a2 + 28 != v3)
  {
    if (v3 != 5 || *(unsigned __int16 *)(a3 + 18) != a2)
      return 0;
    v7 = (uint64_t *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
    v4 = *v7;
    v5 = *a1;
    if (*a1 != *v7)
    {
      v6 = v7[4];
      goto LABEL_22;
    }
    v6 = v7[4];
LABEL_9:
    v8 = *(unsigned __int8 *)(v6 + 16);
    if (v8 == 5)
    {
      if (*(_WORD *)(v6 + 18) != 30)
        goto LABEL_22;
      v12 = (uint64_t *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF));
      v9 = *v12;
      v10 = a1[1];
      if (v10 != *v12)
      {
        v11 = v12[4];
        goto LABEL_20;
      }
      v11 = v12[4];
    }
    else
    {
      if (v8 != 58)
        goto LABEL_22;
      v9 = *(_QWORD *)(v6 - 64);
      v10 = a1[1];
      if (v10 != v9)
      {
        v11 = *(_QWORD *)(v6 - 32);
LABEL_20:
        if (v10 == v11 && a1[2] == v9)
          return 1;
        goto LABEL_22;
      }
      v11 = *(_QWORD *)(v6 - 32);
    }
    if (a1[2] == v11)
      return 1;
    goto LABEL_20;
  }
  v4 = *(_QWORD *)(a3 - 64);
  v5 = *a1;
  if (*a1 == v4)
  {
    v6 = *(_QWORD *)(a3 - 32);
    goto LABEL_9;
  }
  v6 = *(_QWORD *)(a3 - 32);
LABEL_22:
  if (v5 != v6)
    return 0;
  v14 = *(unsigned __int8 *)(v4 + 16);
  if (v14 == 5)
  {
    if (*(_WORD *)(v4 + 18) != 30)
      return 0;
    v18 = (uint64_t *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF));
    v15 = *v18;
    v19 = a1[1];
    if (v19 == *v18)
    {
      v20 = v18[4];
      if (a1[2] == v20)
        return 1;
    }
    else
    {
      v20 = v18[4];
    }
    if (v19 != v20)
      return 0;
    return a1[2] == v15;
  }
  if (v14 != 58)
    return 0;
  v15 = *(_QWORD *)(v4 - 64);
  v16 = a1[1];
  if (v16 != v15)
  {
    v17 = *(_QWORD *)(v4 - 32);
    goto LABEL_32;
  }
  v17 = *(_QWORD *)(v4 - 32);
  if (a1[2] != v17)
  {
LABEL_32:
    if (v16 != v17)
      return 0;
    return a1[2] == v15;
  }
  return 1;
}

BOOL sub_1C57BD0E0(_QWORD **a1, int a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(unsigned __int8 *)(a3 + 16);
  LOBYTE(v6) = a2 + 28;
  if (a2 + 28 != v5)
  {
    if (v5 == 5)
    {
      if (*(unsigned __int16 *)(a3 + 18) != a2)
        goto LABEL_20;
      v12 = *(_DWORD *)(a3 + 20) & 0x7FFFFFF;
      v13 = *(_QWORD *)(a3 - 32 * v12);
      if (v13)
      {
        **a1 = v13;
        v12 = *(_DWORD *)(a3 + 20) & 0x7FFFFFF;
        v14 = *(_QWORD *)(a3 - 32 * v12 + 32);
        if (v14)
        {
          *a1[1] = v14;
          if ((sub_1C4D9EC28(a1 + 2, 30, v14) & 1) != 0)
          {
LABEL_18:
            LOBYTE(v6) = 1;
            return (v5 == 5) & v6;
          }
          v12 = *(_DWORD *)(a3 + 20) & 0x7FFFFFF;
        }
      }
      v6 = *(_QWORD *)(a3 - 32 * v12 + 32);
      if (v6)
      {
        **a1 = v6;
        v15 = *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
        if (v15)
        {
          *a1[1] = v15;
          if ((sub_1C4D9EC28(a1 + 2, 30, v15) & 1) != 0)
            goto LABEL_18;
        }
LABEL_20:
        LOBYTE(v6) = 0;
      }
    }
    return (v5 == 5) & v6;
  }
  v7 = *(_QWORD *)(a3 - 64);
  result = 1;
  if (!v7 || (**a1 = v7, (v8 = *(_QWORD *)(a3 - 32)) == 0) || (*a1[1] = v8, (sub_1C4D9EC28(a1 + 2, 30, v8) & 1) == 0))
  {
    v9 = *(_QWORD *)(a3 - 32);
    if (!v9)
      return 0;
    **a1 = v9;
    v10 = *(_QWORD *)(a3 - 64);
    if (!v10)
      return 0;
    *a1[1] = v10;
    if ((sub_1C4D9EC28(a1 + 2, 30, v10) & 1) == 0)
      return 0;
  }
  return result;
}

uint64_t sub_1C57BD248(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 != 5)
  {
    if (v4 == 58)
    {
      v5 = *(_DWORD *)(a1 + 32);
      if (!sub_1C57BD380((uint64_t *)a1, v5, *(_QWORD *)(a2 - 64)))
        goto LABEL_6;
      if ((sub_1C4D9ED34(a1 + 40, *(llvm::Constant **)(a2 - 32)) & 1) == 0)
      {
        v5 = *(_DWORD *)(a1 + 32);
LABEL_6:
        result = sub_1C57BD380((uint64_t *)a1, v5, *(_QWORD *)(a2 - 32));
        if ((_DWORD)result)
          return sub_1C4D9ED34(a1 + 40, *(llvm::Constant **)(a2 - 64));
        return result;
      }
      return 1;
    }
    return 0;
  }
  if (*(_WORD *)(a2 + 18) != 30)
    return 0;
  v7 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  v8 = a2 - 32 * v7;
  v9 = *(_DWORD *)(a1 + 32);
  if (sub_1C57BD380((uint64_t *)a1, v9, *(_QWORD *)v8))
  {
    if ((sub_1C4D9EED4(a1 + 40, *(llvm::Constant **)(v8 + 32)) & 1) != 0)
      return 1;
    v9 = *(_DWORD *)(a1 + 32);
    v10 = -(uint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  }
  else
  {
    v10 = -v7;
  }
  v11 = a2 + 32 * v10;
  result = sub_1C57BD380((uint64_t *)a1, v9, *(_QWORD *)(v11 + 32));
  if ((_DWORD)result)
    return sub_1C4D9EED4(a1 + 40, *(llvm::Constant **)v11);
  return result;
}

uint64_t sub_1C57BD380(uint64_t *a1, int a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v25;
  int v26;
  uint64_t v27;

  v3 = *(unsigned __int8 *)(a3 + 16);
  if (a2 + 28 == v3)
  {
    v4 = *(_QWORD *)(a3 - 64);
    v5 = *((_DWORD *)a1 + 4);
    v6 = *(unsigned __int8 *)(v4 + 16);
    if (v5 + 28 == v6)
    {
      v7 = *(_QWORD *)(v4 - 64);
      v8 = *a1;
      if (*a1 != v7)
      {
        v9 = *(_QWORD *)(v4 - 32);
LABEL_16:
        if (v8 != v9 || a1[1] != v7)
          goto LABEL_19;
LABEL_18:
        if (a1[3] != *(_QWORD *)(a3 - 32))
        {
LABEL_19:
          v17 = *(_QWORD *)(a3 - 32);
          v18 = *(unsigned __int8 *)(v17 + 16);
          if (v5 + 28 == v18)
          {
            v19 = *(_QWORD *)(v17 - 64);
            v20 = *a1;
            if (*a1 != v19)
            {
              v21 = *(_QWORD *)(v17 - 32);
              goto LABEL_34;
            }
            v21 = *(_QWORD *)(v17 - 32);
            goto LABEL_33;
          }
          if (v18 != 5 || v5 != *(unsigned __int16 *)(v17 + 18))
            return 0;
          v22 = (uint64_t *)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF));
LABEL_25:
          v19 = *v22;
          v20 = *a1;
          if (*a1 != *v22)
          {
            v21 = v22[4];
            goto LABEL_34;
          }
          v21 = v22[4];
LABEL_33:
          if (a1[1] == v21)
            return a1[3] == v4;
LABEL_34:
          if (v20 == v21)
            goto LABEL_35;
          return 0;
        }
        return 1;
      }
      v9 = *(_QWORD *)(v4 - 32);
    }
    else
    {
      if (v6 != 5 || v5 != *(unsigned __int16 *)(v4 + 18))
        goto LABEL_19;
      v16 = (uint64_t *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF));
      v7 = *v16;
      v8 = *a1;
      if (*a1 != *v16)
      {
        v9 = v16[4];
        goto LABEL_16;
      }
      v9 = v16[4];
    }
    if (a1[1] == v9)
      goto LABEL_18;
    goto LABEL_16;
  }
  if (v3 != 5 || *(unsigned __int16 *)(a3 + 18) != a2)
    return 0;
  v10 = (_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
  v4 = *v10;
  v11 = *((_DWORD *)a1 + 4);
  v12 = *(unsigned __int8 *)(*v10 + 16);
  if (v11 + 28 == v12)
  {
    v13 = *(_QWORD *)(v4 - 64);
    v14 = *a1;
    if (*a1 != v13)
    {
      v15 = *(_QWORD *)(v4 - 32);
LABEL_41:
      if (v14 != v15 || a1[1] != v13)
        goto LABEL_44;
      goto LABEL_43;
    }
    v15 = *(_QWORD *)(v4 - 32);
  }
  else
  {
    if (v12 != 5 || v11 != *(unsigned __int16 *)(v4 + 18))
      goto LABEL_44;
    v23 = (uint64_t *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF));
    v13 = *v23;
    v14 = *a1;
    if (*a1 != *v23)
    {
      v15 = v23[4];
      goto LABEL_41;
    }
    v15 = v23[4];
  }
  if (a1[1] != v15)
    goto LABEL_41;
LABEL_43:
  if (a1[3] == v10[4])
    return 1;
LABEL_44:
  v25 = v10[4];
  v26 = *(unsigned __int8 *)(v25 + 16);
  if (v11 + 28 != v26)
  {
    if (v26 != 5 || v11 != *(unsigned __int16 *)(v25 + 18))
      return 0;
    v22 = (uint64_t *)(v25 - 32 * (*(_DWORD *)(v25 + 20) & 0x7FFFFFF));
    goto LABEL_25;
  }
  v19 = *(_QWORD *)(v25 - 64);
  if (*a1 == v19)
  {
    v27 = *(_QWORD *)(v25 - 32);
    if (a1[1] == v27)
      return a1[3] == v4;
  }
  else
  {
    v27 = *(_QWORD *)(v25 - 32);
  }
  if (*a1 == v27)
  {
LABEL_35:
    if (a1[1] == v19)
      return a1[3] == v4;
  }
  return 0;
}

BOOL sub_1C57BD608(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;

  result = 0;
  if (a2 && *(_BYTE *)(a2 + 16) == 82)
  {
    v5 = *(_QWORD *)(a2 - 64);
    if (v5)
    {
      **(_QWORD **)(a1 + 8) = v5;
      result = sub_1C4E5C310(a1 + 16, *(llvm::Constant **)(a2 - 32));
      if (result)
      {
        **(_DWORD **)a1 = *(_WORD *)(a2 + 18) & 0x3F;
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

llvm::Value **sub_1C57BD678(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  int8x8_t v8;
  const llvm::APInt *v9;
  llvm::APInt *v10;
  uint64_t v11;
  llvm::APInt *v12;
  llvm::APInt *v13;
  unsigned int v14;
  llvm::APInt *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BOOL4 v24;
  _BOOL4 v25;
  int v26;
  BOOL v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  llvm::Constant *v34;
  int v35;
  unint64_t v36;
  int v37;
  llvm::Constant *Add;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint8x8_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  char v55;
  char v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  size_t v63;
  int v64;
  int64_t v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  _QWORD *v69;
  unsigned int v70;
  void *__src;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  llvm::APInt *v79;
  llvm::APInt *v80;
  uint64_t v81;
  uint64_t p_src;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;

  v6 = (uint64_t)a2;
  v79 = 0;
  v80 = 0;
  v81 = (uint64_t)&v80;
  p_src = 1;
  if (!sub_1C4D89F84((uint64_t)&v81, a2))
    goto LABEL_31;
  __src = &v79;
  v72 = 1;
  if (!sub_1C4D89F84((uint64_t)&__src, (unsigned __int8 *)a3))
    goto LABEL_31;
  v10 = v80;
  v11 = *((unsigned int *)v80 + 2);
  v12 = v80;
  if (v11 >= 0x41)
  {
    if (v11 - llvm::APInt::countLeadingZerosSlowCase(v80) > 0x40)
      goto LABEL_31;
    v12 = *(llvm::APInt **)v10;
  }
  if (*(_QWORD *)v12 >= (unint64_t)a4)
    goto LABEL_31;
  v13 = v79;
  v14 = *((_DWORD *)v79 + 2);
  v15 = v79;
  if (v14 >= 0x41)
  {
    if (v14 - llvm::APInt::countLeadingZerosSlowCase(v79) > 0x40)
      goto LABEL_31;
    v15 = *(llvm::APInt **)v13;
  }
  if (*(_QWORD *)v15 >= (unint64_t)a4)
    goto LABEL_31;
  if (v11 < 0x41)
  {
    v16 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
    if (!(_DWORD)v11)
      v16 = 0;
    if ((v16 & (*(_QWORD *)v13 + *(_QWORD *)v10)) != a4)
      goto LABEL_31;
    return llvm::ConstantInt::get(*(llvm::ConstantInt ***)v6, v10, v9);
  }
  v17 = (uint64_t *)operator new[]();
  memcpy(v17, *(const void **)v10, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
  v18 = 0;
  v19 = 0;
  v20 = *(_QWORD *)v79;
  v21 = (unint64_t)(v11 + 63) >> 6;
  do
  {
    v22 = v17[v18];
    v23 = *(_QWORD *)(v20 + v18 * 8) + v22;
    v24 = v23 < v22;
    v25 = v23 + 1 <= v22;
    if (v19)
    {
      ++v23;
      v19 = v25;
    }
    else
    {
      v19 = v24;
    }
    v17[v18++] = v23;
  }
  while (v21 != v18);
  v26 = 0;
  v17[(v21 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
  do
  {
    v27 = v21-- < 1;
    if (v27)
      break;
    v28 = v17[v21];
    v26 += __clz(v28);
  }
  while (!v28);
  v29 = v11 | 0xFFFFFFC0;
  if ((v11 & 0x3F) == 0)
    v29 = 0;
  if ((v11 - v26 - v29) >= 0x41)
  {
    MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
    goto LABEL_31;
  }
  v30 = *v17;
  MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
  if (v30 == a4)
  {
    v10 = v80;
    return llvm::ConstantInt::get(*(llvm::ConstantInt ***)v6, v10, v9);
  }
LABEL_31:
  if (v6 && *(unsigned __int8 *)(v6 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    v32 = a4;
    LODWORD(v72) = a4;
    if (a4 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&__src, a4, 0);
    }
    else
    {
      if (a4)
        v33 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a4;
      else
        LODWORD(v33) = 0;
      __src = (void *)(v33 & a4);
    }
    v81 = 36;
    p_src = (uint64_t)&__src;
    sub_1C57BEAF0((uint64_t)&v81, (llvm::Constant *)v6);
    if (v35)
    {
      v78 = a4;
      if (a4 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v77, a4, 0);
      }
      else
      {
        if (a4)
          v36 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a4;
        else
          LODWORD(v36) = 0;
        v77 = v36 & a4;
      }
      v68 = 36;
      v69 = &v77;
      sub_1C57BEAF0((uint64_t)&v68, (llvm::Constant *)a3);
      if (v37)
      {
        Add = llvm::ConstantExpr::getAdd((llvm::ConstantExpr *)v6, (llvm::Constant *)a3, 0, 0);
        v76 = 64;
        v75 = a4;
        v39 = sub_1C57BE190((llvm::APInt *)&v75, Add);
        if (v76 >= 0x41 && v75)
          MEMORY[0x1CAA32F9C](v75, 0x1000C8000313F17);
      }
      else
      {
        v39 = 0;
      }
      if (v78 >= 0x41 && v77)
        MEMORY[0x1CAA32F9C](v77, 0x1000C8000313F17);
    }
    else
    {
      v39 = 0;
    }
    if (v72 >= 0x41 && __src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
    if (v39)
      return (llvm::Value **)llvm::Constant::mergeUndefsWith((llvm::Constant *)v6, (llvm::Constant *)a3, v34);
  }
  else
  {
    v32 = a4;
  }
  LODWORD(p_src) = 64;
  v81 = v32;
  v83 = v6;
  v40 = *(_QWORD *)(a3 + 8);
  if (!v40 || (v41 = *(_QWORD *)(v40 + 8)) != 0)
  {
LABEL_51:
    v42 = 0;
    goto LABEL_52;
  }
  v52 = *(unsigned __int8 *)(a3 + 16);
  if (v52 == 43)
  {
    if (sub_1C4D8A7F0((llvm::APInt *)&v81, *(unsigned __int8 **)(a3 - 64)) && v83 == *(_QWORD *)(a3 - 32))
    {
      v42 = 1;
      goto LABEL_52;
    }
    goto LABEL_51;
  }
  if (v52 == 5)
    LOBYTE(v41) = *(_WORD *)(a3 + 18) == 15
               && sub_1C4D8A86C((llvm::APInt *)&v81, *(llvm::Constant **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)))&& v83 == *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32);
  v42 = (v52 == 5) & v41;
LABEL_52:
  if (p_src >= 0x41 && v81)
    MEMORY[0x1CAA32F9C](v81, 0x1000C8000313F17);
  if (!v42)
  {
    v48 = 0;
    if (!a4)
      return (llvm::Value **)v48;
    if (**(_QWORD **)(a1 + 16) != **(_QWORD **)(a1 + 24))
      return (llvm::Value **)v48;
    v8.i32[0] = a4;
    v49 = (uint8x8_t)vcnt_s8(v8);
    v49.i16[0] = vaddlv_u8(v49);
    if (v49.i32[0] > 1u)
      return (llvm::Value **)v48;
    v75 = 0;
    v50 = a4 - 1;
    LODWORD(v73) = 64;
    __src = &v75;
    v72 = v50;
    v51 = *(unsigned __int8 *)(v6 + 16);
    if (v51 == 5)
    {
      if (*(_WORD *)(v6 + 18) != 28
        || (v53 = v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF), !*(_QWORD *)v53)
        || (v75 = *(_QWORD *)v53, !sub_1C4D8A86C((llvm::APInt *)&v72, *(llvm::Constant **)(v53 + 32))))
      {
LABEL_95:
        v54 = 0;
        goto LABEL_96;
      }
    }
    else
    {
      if (v51 != 56)
        goto LABEL_99;
      if (!*(_QWORD *)(v6 - 64))
        goto LABEL_95;
      v75 = *(_QWORD *)(v6 - 64);
      if (!sub_1C4D8A7F0((llvm::APInt *)&v72, *(unsigned __int8 **)(v6 - 32)))
        goto LABEL_95;
    }
    LODWORD(v84) = 64;
    p_src = v75;
    v83 = a4 - 1;
    v54 = sub_1C57BE208((uint64_t)&v81, 28, a3);
    if (v84 >= 0x41 && v83)
      MEMORY[0x1CAA32F9C](v83, 0x1000C8000313F17);
LABEL_96:
    if (v73 >= 0x41 && v72)
    {
      MEMORY[0x1CAA32F9C](v72, 0x1000C8000313F17);
      if ((v54 & 1) == 0)
        goto LABEL_99;
    }
    else if (!v54)
    {
LABEL_99:
      v70 = 64;
      v68 = (uint64_t)&v75;
      v69 = (_QWORD *)v50;
      if (!sub_1C57BE39C((_QWORD **)&v68, v6))
      {
        v55 = 0;
        goto LABEL_101;
      }
      v74 = 64;
      v72 = v75;
      v73 = v50;
      v78 = 64;
      v77 = v50;
      sub_1C62A7E20((uint64_t)&v81, (uint64_t)&__src, (llvm::APInt *)&v77);
      v58 = *(unsigned __int8 *)(a3 + 16);
      if (v58 == 56)
      {
        v59 = *(_QWORD *)(a3 - 64);
        v60 = *(unsigned __int8 *)(v59 + 16);
        if (v60 == 5)
        {
          if (*(_WORD *)(v59 + 18) != 15
            || !sub_1C4E71060((uint64_t)&v81, *(llvm::Constant **)(v59 - 32 * (*(_DWORD *)(v59 + 20) & 0x7FFFFFF)))|| !sub_1C57BE49C(&p_src, *(_QWORD *)(v59 - 32 * (*(_DWORD *)(v59 + 20) & 0x7FFFFFF) + 32)))
          {
            goto LABEL_152;
          }
        }
        else if (v60 != 43
               || !sub_1C4D8AC3C((uint64_t)&v81, *(llvm::Constant **)(v59 - 64))
               || (sub_1C57BE49C(&p_src, *(_QWORD *)(v59 - 32)) & 1) == 0)
        {
          goto LABEL_152;
        }
        if (sub_1C4D8A7F0((llvm::APInt *)&v85, *(unsigned __int8 **)(a3 - 32)))
        {
          v55 = 1;
LABEL_160:
          sub_1C62A7EA0((uint64_t)&v81);
LABEL_101:
          if (v70 >= 0x41 && v69)
            MEMORY[0x1CAA32F9C](v69, 0x1000C8000313F17);
          if ((v55 & 1) == 0)
          {
            LODWORD(v73) = 64;
            __src = &v75;
            v72 = v50;
            if (sub_1C57BE39C((_QWORD **)&__src, v6))
            {
              LODWORD(v84) = 64;
              p_src = v75;
              v83 = v50;
              if (!sub_1C57BE598((uint64_t)&v81, a3, v75))
                v6 = 0;
              if (v84 >= 0x41 && v83)
                MEMORY[0x1CAA32F9C](v83, 0x1000C8000313F17);
            }
            else
            {
              v6 = 0;
            }
            if (v73 >= 0x41 && v72)
              MEMORY[0x1CAA32F9C](v72, 0x1000C8000313F17);
          }
          return (llvm::Value **)v6;
        }
LABEL_152:
        v55 = 0;
        goto LABEL_160;
      }
      if (v58 == 5)
      {
        if (*(_WORD *)(a3 + 18) != 28)
          goto LABEL_158;
        v61 = *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
        v62 = *(unsigned __int8 *)(v61 + 16);
        if (v62 == 5)
        {
          if (*(_WORD *)(v61 + 18) != 15
            || !sub_1C4E71060((uint64_t)&v81, *(llvm::Constant **)(v61 - 32 * (*(_DWORD *)(v61 + 20) & 0x7FFFFFF)))|| !sub_1C57BE49C(&p_src, *(_QWORD *)(v61 - 32 * (*(_DWORD *)(v61 + 20) & 0x7FFFFFF) + 32)))
          {
            goto LABEL_158;
          }
        }
        else if (v62 != 43
               || !sub_1C4D8AC3C((uint64_t)&v81, *(llvm::Constant **)(v61 - 64))
               || (sub_1C57BE49C(&p_src, *(_QWORD *)(v61 - 32)) & 1) == 0)
        {
          goto LABEL_158;
        }
        if (!sub_1C4D8A86C((llvm::APInt *)&v85, *(llvm::Constant **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32)))
        {
LABEL_158:
          v57 = 0;
          goto LABEL_159;
        }
        v57 = 1;
      }
LABEL_159:
      v55 = (v58 == 5) & v57;
      goto LABEL_160;
    }
    return (llvm::Value **)v75;
  }
  v43 = *(_QWORD *)(a1 + 8);
  v44 = *(_QWORD *)(*(_QWORD *)a1 + 56);
  v45 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  if (!v43 || !*(_QWORD *)(v43 + 40))
  {
    if (!v6 || *(unsigned __int8 *)(v6 + 16) < 0x1Cu || (v43 = v6, !*(_QWORD *)(v6 + 40)))
      v43 = 0;
  }
  v81 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  p_src = v44;
  v83 = v43;
  v84 = v45;
  v85 = 0;
  v86 = 1;
  sub_1C4F83784(v6, 0, &v81, &__src);
  LODWORD(p_src) = v72;
  if (v72 > 0x40)
  {
    v63 = (((unint64_t)v72 + 63) >> 3) & 0x3FFFFFF8;
    v81 = operator new[]();
    memcpy((void *)v81, __src, v63);
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v81);
    v47 = v81;
    if (p_src >= 0x41)
    {
      v64 = 0;
      v65 = ((unint64_t)p_src + 63) >> 6;
      do
      {
        v27 = v65-- < 1;
        if (v27)
          break;
        v66 = *(_QWORD *)(v81 + 8 * v65);
        v64 += __clz(v66);
      }
      while (!v66);
      v67 = p_src | 0xFFFFFFC0;
      if ((p_src & 0x3F) == 0)
        v67 = 0;
      if ((p_src - v64 - v67) >= 0x41)
      {
        v48 = 0;
      }
      else if (*(_QWORD *)v81 >= v32)
      {
        v48 = 0;
      }
      else
      {
        v48 = v6;
      }
      if (v81)
        MEMORY[0x1CAA32F9C](v81, 0x1000C8000313F17);
      goto LABEL_66;
    }
  }
  else
  {
    if ((_DWORD)v72)
      v46 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v72;
    else
      v46 = 0;
    v47 = v46 & ~(unint64_t)__src;
  }
  if (v47 >= v32)
    v48 = 0;
  else
    v48 = v6;
LABEL_66:
  if (v74 >= 0x41 && v73)
    MEMORY[0x1CAA32F9C](v73, 0x1000C8000313F17);
  if (v72 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  return (llvm::Value **)v48;
}

uint64_t sub_1C57BE11C(_QWORD **a1, uint64_t a2)
{
  int v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  if (!a2 || *(unsigned __int8 *)(a2 + 16) - 53 > 1)
    return 0;
  v2 = *(_DWORD *)(a2 + 20);
  v3 = (v2 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v2 & 0x7FFFFFF));
  v4 = *v3;
  if (!v4)
    return 0;
  **a1 = v4;
  v5 = *(_DWORD *)(a2 + 20);
  v6 = (v5 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v5 & 0x7FFFFFF);
  v7 = *(_QWORD *)(v6 + 32);
  if (!v7)
    return 0;
  *a1[1] = v7;
  return 1;
}

BOOL sub_1C57BE190(llvm::APInt *this, llvm::Constant *a2)
{
  llvm::APFloatBase *SplatValue;

  if (a2 && *((_BYTE *)a2 + 16) == 16)
    return sub_1C4D8A8E4((uint64_t)a2 + 24, this);
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12
    && (SplatValue = llvm::Constant::getSplatValue(a2, (llvm::Type *)1)) != 0
    && (a2 = SplatValue, *((_BYTE *)SplatValue + 16) == 16))
  {
    return sub_1C4D8A8E4((uint64_t)a2 + 24, this);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1C57BE208(uint64_t a1, int a2, uint64_t a3)
{
  int v5;
  char v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v5 = *(unsigned __int8 *)(a3 + 16);
  v6 = a2 + 28;
  if (a2 + 28 == v5)
  {
    v7 = *(_QWORD *)(a3 - 64);
    v8 = *(unsigned __int8 *)(v7 + 16);
    if (v8 == 5)
    {
      if (*(_WORD *)(v7 + 18) == 15
        && sub_1C4E71060(a1, *(llvm::Constant **)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF))))
      {
        v9 = *(_QWORD *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) + 32);
        goto LABEL_15;
      }
    }
    else if (v8 == 43 && sub_1C4D8AC3C(a1, *(llvm::Constant **)(v7 - 64)))
    {
      v9 = *(_QWORD *)(v7 - 32);
LABEL_15:
      if (*(_QWORD *)(a1 + 8) == v9 && sub_1C4D8A7F0((llvm::APInt *)(a1 + 16), *(unsigned __int8 **)(a3 - 32)))
        return 1;
    }
    return 0;
  }
  if (v5 == 5)
  {
    if (*(unsigned __int16 *)(a3 + 18) == a2)
    {
      v10 = *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
      v11 = *(unsigned __int8 *)(v10 + 16);
      if (v11 == 5)
      {
        if (*(_WORD *)(v10 + 18) != 15
          || !sub_1C4E71060(a1, *(llvm::Constant **)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF))))
        {
          goto LABEL_25;
        }
        v12 = *(_QWORD *)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) + 32);
      }
      else
      {
        if (v11 != 43 || !sub_1C4D8AC3C(a1, *(llvm::Constant **)(v10 - 64)))
          goto LABEL_25;
        v12 = *(_QWORD *)(v10 - 32);
      }
      if (*(_QWORD *)(a1 + 8) == v12
        && sub_1C4D8A86C((llvm::APInt *)(a1 + 16), *(llvm::Constant **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32)))
      {
        v6 = 1;
        return (v5 == 5) & v6;
      }
    }
LABEL_25:
    v6 = 0;
  }
  return (v5 == 5) & v6;
}

uint64_t sub_1C57BE39C(_QWORD **a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(unsigned __int8 *)(a2 + 16);
  v4 = v3 - 28;
  v6 = v3 < 0x1C && v3 != 5 || a2 == 0;
  v7 = v6;
  if (!v6)
  {
    if (v3 <= 0x1B)
      v4 = *(unsigned __int16 *)(a2 + 18);
    if (v4 != 39)
      goto LABEL_21;
    v8 = *(_DWORD *)(a2 + 20);
    if ((v8 & 0x40000000) != 0)
      v9 = *(uint64_t **)(a2 - 8);
    else
      v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF));
    v10 = *v9;
    v11 = *(unsigned __int8 *)(v10 + 16);
    if (v11 == 56)
    {
      v12 = *(_QWORD *)(v10 - 64);
      if (v12)
      {
        **a1 = v12;
        if (sub_1C4D8A7F0((llvm::APInt *)(a1 + 1), *(unsigned __int8 **)(v10 - 32)))
        {
          v2 = 1;
          return v2 & (v7 ^ 1u);
        }
      }
LABEL_21:
      v2 = 0;
      return v2 & (v7 ^ 1u);
    }
    if (v11 == 5)
      LOBYTE(v2) = *(_WORD *)(v10 + 18) == 28
                && (v13 = *(_QWORD *)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF))) != 0
                && (**a1 = v13,
                    sub_1C4D8A86C((llvm::APInt *)(a1 + 1), *(llvm::Constant **)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) + 32)));
    v2 = (v11 == 5) & v2;
  }
  return v2 & (v7 ^ 1u);
}

uint64_t sub_1C57BE49C(_QWORD *a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v3 = *(unsigned __int8 *)(a2 + 16);
  v4 = v3 - 28;
  v6 = v3 < 0x1C && v3 != 5 || a2 == 0;
  v7 = v6;
  if (!v6)
  {
    if (v3 <= 0x1B)
      v4 = *(unsigned __int16 *)(a2 + 18);
    if (v4 != 39)
      goto LABEL_21;
    v8 = *(_DWORD *)(a2 + 20);
    if ((v8 & 0x40000000) != 0)
      v9 = *(uint64_t **)(a2 - 8);
    else
      v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF));
    v10 = *v9;
    v11 = *(unsigned __int8 *)(v10 + 16);
    if (v11 == 56)
    {
      if (*a1 == *(_QWORD *)(v10 - 64) && sub_1C4D8A7F0((llvm::APInt *)(a1 + 1), *(unsigned __int8 **)(v10 - 32)))
      {
        v2 = 1;
        return v2 & (v7 ^ 1u);
      }
LABEL_21:
      v2 = 0;
      return v2 & (v7 ^ 1u);
    }
    if (v11 == 5)
      LOBYTE(v2) = *(_WORD *)(v10 + 18) == 28
                && (v12 = v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF), *a1 == *(_QWORD *)v12)
                && sub_1C4D8A86C((llvm::APInt *)(a1 + 1), *(llvm::Constant **)(v12 + 32));
    v2 = (v11 == 5) & v2;
  }
  return v2 & (v7 ^ 1u);
}

uint64_t sub_1C57BE598@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W8>)
{
  unsigned int v3;
  unsigned int v4;
  BOOL v6;
  int v7;
  int v8;
  uint64_t *v9;

  v3 = *(unsigned __int8 *)(a2 + 16);
  v4 = v3 - 28;
  v6 = v3 < 0x1C && v3 != 5 || a2 == 0;
  v7 = v6;
  if (!v6)
  {
    if (v3 <= 0x1B)
      v4 = *(unsigned __int16 *)(a2 + 18);
    if (v4 == 39)
    {
      v8 = *(_DWORD *)(a2 + 20);
      if ((v8 & 0x40000000) != 0)
        v9 = *(uint64_t **)(a2 - 8);
      else
        v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF));
      a3 = sub_1C57BE208(a1, 28, *v9);
    }
    else
    {
      a3 = 0;
    }
  }
  return (v7 ^ 1) & a3;
}

uint64_t sub_1C57BE614(uint64_t a1, int a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  uint64_t *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::Value **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t Declaration;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t v22;
  _BYTE v23[32];
  __int16 v24;

  v7 = *(uint64_t **)a1;
  v8 = **(_QWORD **)(a1 + 8);
  v24 = 257;
  v9 = sub_1C4773E38(v7, 39, a3, v8, (uint64_t)v23);
  v10 = *(uint64_t **)a1;
  v11 = **(_QWORD **)(a1 + 8);
  v24 = 257;
  v12 = sub_1C4773E38(v10, 39, a4, v11, (uint64_t)v23);
  v13 = *(_QWORD *)a1;
  v14 = **(unsigned int **)(a1 + 16);
  v24 = 257;
  v15 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v12, v14, 0);
  v16 = sub_1C506E874(v13, (uint64_t)v12, (uint64_t)v15, (uint64_t)v23, 0, 0);
  v17 = *(_QWORD *)a1;
  v24 = 257;
  v22 = sub_1C4773594(v17, v9, v16, (uint64_t)v23);
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 56) + 40), a2, *(uint64_t **)(a1 + 8), 1);
  v19 = *(uint64_t **)a1;
  if (Declaration)
    v20 = *(uint64_t ***)(Declaration + 24);
  else
    v20 = 0;
  v24 = 257;
  return sub_1C4774778(v19, v20, Declaration, &v22, 1, (uint64_t)v23, 0);
}

BOOL sub_1C57BE738(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  unsigned __int8 *v4;
  _BOOL8 result;

  if (!a2)
    return 0;
  v2 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  if ((v2 & 0xFE) == 0x12)
    v2 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
  result = 0;
  if (v2 == 269)
  {
    v3 = a2[16];
    if (v3 == 56)
      return 1;
    if (v3 == 85)
    {
      v4 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
      if (v4)
      {
        if (v4[16] <= 0x14u && (llvm::Constant::isNullValue((llvm::Constant *)v4) & 1) != 0)
          return 1;
      }
    }
  }
  return result;
}

BOOL sub_1C57BE7B8(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  unsigned __int8 *v4;
  _BOOL8 result;

  if (!a2)
    return 0;
  v2 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  if ((v2 & 0xFE) == 0x12)
    v2 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
  result = 0;
  if (v2 == 269)
  {
    v3 = a2[16];
    if (v3 == 57)
      return 1;
    if (v3 == 85)
    {
      v4 = (unsigned __int8 *)*((_QWORD *)a2 - 8);
      if (v4)
      {
        if (v4[16] <= 0x14u && llvm::Constant::isOneValue((llvm::Constant *)v4))
          return 1;
      }
    }
  }
  return result;
}

uint64_t sub_1C57BE838(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  BOOL v25;
  uint64_t *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  BOOL v36;

  v3 = *(unsigned __int8 *)(a2 + 16);
  if (v3 == 56)
  {
    v4 = *(_QWORD *)(a2 - 64);
    v5 = *(unsigned __int8 *)(v4 + 16);
    if (v5 == 5)
    {
      if (*(_WORD *)(v4 + 18) != 30)
        goto LABEL_20;
      v16 = (uint64_t *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF));
      v6 = *v16;
      v7 = **a1;
      v8 = v16[4];
    }
    else
    {
      if (v5 != 58)
        goto LABEL_20;
      v6 = *(_QWORD *)(v4 - 64);
      v7 = **a1;
      v8 = *(_QWORD *)(v4 - 32);
    }
    if (v7 == v6 && v8 || (v6 ? (v17 = v7 == v8) : (v17 = 0), v8 = v6, v17))
    {
      *a1[1] = v8;
      *a1[2] = v4;
      v18 = *(_QWORD *)(a2 - 32);
      if (v18)
        goto LABEL_34;
    }
LABEL_20:
    v19 = *(_QWORD *)(a2 - 32);
    v20 = *(unsigned __int8 *)(v19 + 16);
    if (v20 == 5)
    {
      if (*(_WORD *)(v19 + 18) == 30)
      {
        v24 = (uint64_t *)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF));
        v21 = *v24;
        v22 = **a1;
        v23 = v24[4];
        goto LABEL_25;
      }
    }
    else if (v20 == 58)
    {
      v21 = *(_QWORD *)(v19 - 64);
      v22 = **a1;
      v23 = *(_QWORD *)(v19 - 32);
LABEL_25:
      if (v22 == v21 && v23 || (v21 ? (v25 = v22 == v23) : (v25 = 0), v23 = v21, v25))
      {
        *a1[1] = v23;
        *a1[2] = v19;
        v18 = *(_QWORD *)(a2 - 64);
        if (v18)
        {
LABEL_34:
          *a1[3] = v18;
          return 1;
        }
      }
    }
    return 0;
  }
  if (v3 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 28)
      goto LABEL_57;
    v9 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
    v10 = -v9;
    v11 = *(_QWORD *)(a2 - 32 * v9);
    v12 = *(unsigned __int8 *)(v11 + 16);
    if (v12 == 5)
    {
      if (*(_WORD *)(v11 + 18) != 30)
        goto LABEL_47;
      v27 = (uint64_t *)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF));
      v13 = *v27;
      v14 = **a1;
      v15 = v27[4];
    }
    else
    {
      if (v12 != 58)
        goto LABEL_47;
      v13 = *(_QWORD *)(v11 - 64);
      v14 = **a1;
      v15 = *(_QWORD *)(v11 - 32);
    }
    if (v14 == v13 && v15 || (v13 ? (v28 = v14 == v15) : (v28 = 0), v15 = v13, v28))
    {
      *a1[1] = v15;
      *a1[2] = v11;
      v29 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
      v2 = *(_QWORD *)(a2 - 32 * v29 + 32);
      if (v2)
        goto LABEL_61;
      v10 = -v29;
    }
LABEL_47:
    v30 = *(_QWORD *)(a2 + 32 * v10 + 32);
    v31 = *(unsigned __int8 *)(v30 + 16);
    if (v31 == 5)
    {
      if (*(_WORD *)(v30 + 18) == 30)
      {
        v35 = (uint64_t *)(v30 - 32 * (*(_DWORD *)(v30 + 20) & 0x7FFFFFF));
        v32 = *v35;
        v33 = **a1;
        v34 = v35[4];
        goto LABEL_52;
      }
    }
    else if (v31 == 58)
    {
      v32 = *(_QWORD *)(v30 - 64);
      v33 = **a1;
      v34 = *(_QWORD *)(v30 - 32);
LABEL_52:
      if (v33 != v32 || !v34)
      {
        v36 = v32 && v33 == v34;
        v34 = v32;
        if (!v36)
          goto LABEL_57;
      }
      *a1[1] = v34;
      *a1[2] = v30;
      v2 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      if (!v2)
        return (v3 == 5) & v2;
LABEL_61:
      *a1[3] = v2;
      LOBYTE(v2) = 1;
      return (v3 == 5) & v2;
    }
LABEL_57:
    LOBYTE(v2) = 0;
  }
  return (v3 == 5) & v2;
}

void sub_1C57BEAF0(uint64_t a1, llvm::Constant *this)
{
  unsigned int v4;
  llvm::APFloatBase *SplatValue;
  uint64_t v6;
  int v9;
  llvm::Type *v10;
  llvm::UndefValue *AggregateElement;
  int v12;
  int v13;

  v4 = *((unsigned __int8 *)this + 16);
  if (this && v4 == 16)
  {
    SplatValue = this;
LABEL_4:
    llvm::ICmpInst::compare((uint64_t)SplatValue + 24, *(_QWORD *)(a1 + 8), *(_DWORD *)a1);
    return;
  }
  v6 = *(_QWORD *)this;
  if (v4 <= 0x14 && v6 != 0 && (*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 18)
  {
    SplatValue = llvm::Constant::getSplatValue(this, 0);
    if (SplatValue && *((_BYTE *)SplatValue + 16) == 16)
      goto LABEL_4;
    if (*(_BYTE *)(v6 + 8) == 18)
    {
      v9 = *(_DWORD *)(v6 + 32);
      if (v9)
      {
        v10 = 0;
        do
        {
          AggregateElement = llvm::Constant::getAggregateElement(this, v10);
          if (!AggregateElement)
            break;
          v12 = *((unsigned __int8 *)AggregateElement + 16);
          if ((v12 - 11) >= 2)
          {
            if (v12 != 16)
              break;
            llvm::ICmpInst::compare((uint64_t)AggregateElement + 24, *(_QWORD *)(a1 + 8), *(_DWORD *)a1);
            if (!v13)
              break;
          }
          v10 = (llvm::Type *)((_DWORD)v10 + 1);
        }
        while (v9 != (_DWORD)v10);
      }
    }
  }
}

uint64_t sub_1C57BEC00(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t *v27;
  BOOL v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  BOOL v35;

  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 30)
      return 0;
    v10 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
    v11 = -v10;
    v12 = *(_QWORD *)(a2 - 32 * v10);
    v13 = *(unsigned __int8 *)(v12 + 16);
    if (v13 == 5)
    {
      if (*(_WORD *)(v12 + 18) != 30)
        goto LABEL_48;
      v27 = (uint64_t *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF));
      v14 = *v27;
      v15 = *a1;
      v16 = v27[4];
    }
    else
    {
      if (v13 != 58)
        goto LABEL_48;
      v14 = *(_QWORD *)(v12 - 64);
      v15 = *a1;
      v16 = *(_QWORD *)(v12 - 32);
    }
    if (v15 == v14 && v16 || (v14 ? (v28 = v15 == v16) : (v28 = 0), v16 = v14, v28))
    {
      *(_QWORD *)a1[1] = v16;
      if ((sub_1C4D9EED4((uint64_t)(a1 + 2), *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32)) & 1) != 0)
        return 1;
      v11 = -(uint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
    }
LABEL_48:
    v29 = *(_QWORD *)(a2 + 32 * v11 + 32);
    v30 = *(unsigned __int8 *)(v29 + 16);
    if (v30 == 5)
    {
      if (*(_WORD *)(v29 + 18) != 30)
        return 0;
      v34 = (uint64_t *)(v29 - 32 * (*(_DWORD *)(v29 + 20) & 0x7FFFFFF));
      v31 = *v34;
      v32 = *a1;
      v33 = v34[4];
    }
    else
    {
      if (v30 != 58)
        return 0;
      v31 = *(_QWORD *)(v29 - 64);
      v32 = *a1;
      v33 = *(_QWORD *)(v29 - 32);
    }
    if (v32 == v31 && v33 || (v31 ? (v35 = v32 == v33) : (v35 = 0), v33 = v31, v35))
    {
      *(_QWORD *)a1[1] = v33;
      return sub_1C4D9EED4((uint64_t)(a1 + 2), *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
    }
    return 0;
  }
  if (v4 != 58)
    return 0;
  v5 = *(_QWORD *)(a2 - 64);
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 5)
  {
    if (*(_WORD *)(v5 + 18) != 30)
      goto LABEL_20;
    v17 = (uint64_t *)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF));
    v7 = *v17;
    v8 = *a1;
    v9 = v17[4];
  }
  else
  {
    if (v6 != 58)
      goto LABEL_20;
    v7 = *(_QWORD *)(v5 - 64);
    v8 = *a1;
    v9 = *(_QWORD *)(v5 - 32);
  }
  if (v8 == v7 && v9 || (v7 ? (v18 = v8 == v9) : (v18 = 0), v9 = v7, v18))
  {
    *(_QWORD *)a1[1] = v9;
    if ((sub_1C4D9ED34((uint64_t)(a1 + 2), *(llvm::Constant **)(a2 - 32)) & 1) != 0)
      return 1;
  }
LABEL_20:
  v19 = *(_QWORD *)(a2 - 32);
  v20 = *(unsigned __int8 *)(v19 + 16);
  if (v20 == 5)
  {
    if (*(_WORD *)(v19 + 18) == 30)
    {
      v24 = (uint64_t *)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF));
      v25 = *v24;
      v22 = v24[4];
      if (*a1 == v25)
      {
        if (v22)
          goto LABEL_63;
      }
      v26 = v25 && *a1 == v22;
      v22 = v25;
      if (v26)
        goto LABEL_63;
    }
    return 0;
  }
  if (v20 != 58)
    return 0;
  v21 = *(_QWORD *)(v19 - 64);
  v22 = *(_QWORD *)(v19 - 32);
  if (*a1 == v21 && v22 || (result = 0, v21) && (v18 = *a1 == v22, v22 = v21, v18))
  {
LABEL_63:
    *(_QWORD *)a1[1] = v22;
    return sub_1C4D9ED34((uint64_t)(a1 + 2), *(llvm::Constant **)(a2 - 64));
  }
  return result;
}

BOOL sub_1C57BEEBC(uint64_t a1, uint64_t a2)
{
  char v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v12;

  v3 = *(unsigned __int8 *)(a2 + 16);
  if (v3 != 58)
  {
    if (v3 != 5)
      return (v3 == 5) & v2;
    if (*(_WORD *)(a2 + 18) == 30)
    {
      v7 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      v8 = *(unsigned __int8 *)(v7 + 16);
      if (v8 == 5)
      {
        if (*(_WORD *)(v7 + 18) != 30)
          goto LABEL_23;
        v12 = (_QWORD *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF));
        if (*(_QWORD *)a1 != *v12)
          goto LABEL_23;
        v9 = v12[4];
        if (!v9)
          goto LABEL_23;
      }
      else
      {
        if (v8 != 58)
          goto LABEL_23;
        if (*(_QWORD *)a1 != *(_QWORD *)(v7 - 64))
          goto LABEL_23;
        v9 = *(_QWORD *)(v7 - 32);
        if (!v9)
          goto LABEL_23;
      }
      **(_QWORD **)(a1 + 8) = v9;
      if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32))
      {
        v2 = 1;
        return (v3 == 5) & v2;
      }
    }
LABEL_23:
    v2 = 0;
    return (v3 == 5) & v2;
  }
  v4 = *(_QWORD *)(a2 - 64);
  v5 = *(unsigned __int8 *)(v4 + 16);
  if (v5 == 5)
  {
    if (*(_WORD *)(v4 + 18) != 30)
      return 0;
    v10 = (_QWORD *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF));
    if (*(_QWORD *)a1 != *v10)
      return 0;
    v6 = v10[4];
    if (!v6)
      return 0;
  }
  else
  {
    if (v5 != 58)
      return 0;
    if (*(_QWORD *)a1 != *(_QWORD *)(v4 - 64))
      return 0;
    v6 = *(_QWORD *)(v4 - 32);
    if (!v6)
      return 0;
  }
  **(_QWORD **)(a1 + 8) = v6;
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 - 32);
}

uint64_t sub_1C57BF018(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = *(unsigned __int8 *)(a2 + 16);
  if (v3 == 58)
  {
    v4 = *(_QWORD *)(a2 - 64);
    v5 = *(unsigned __int8 *)(v4 + 16);
    if (v5 == 5)
    {
      if (*(_WORD *)(v4 + 18) != 30)
        return 0;
      v11 = *(_QWORD *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF));
      if (!v11)
        return 0;
      **a1 = v11;
      v7 = *(_QWORD *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF) + 32);
      if (!v7)
        return 0;
    }
    else
    {
      if (v5 != 58)
        return 0;
      v6 = *(_QWORD *)(v4 - 64);
      if (!v6)
        return 0;
      **a1 = v6;
      v7 = *(_QWORD *)(v4 - 32);
      if (!v7)
        return 0;
    }
    *a1[1] = v7;
    v12 = *(_QWORD *)(a2 - 32);
    if (v12)
    {
      *a1[2] = v12;
      return 1;
    }
    return 0;
  }
  if (v3 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 30)
      goto LABEL_25;
    v8 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v9 = *(unsigned __int8 *)(v8 + 16);
    if (v9 != 5)
    {
      if (v9 == 58)
      {
        v10 = *(_QWORD *)(v8 - 64);
        if (v10)
        {
          **a1 = v10;
          v2 = *(_QWORD *)(v8 - 32);
          if (!v2)
            return (v3 == 5) & v2;
LABEL_23:
          *a1[1] = v2;
          v2 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
          if (v2)
          {
            *a1[2] = v2;
            LOBYTE(v2) = 1;
          }
          return (v3 == 5) & v2;
        }
      }
      goto LABEL_25;
    }
    if (*(_WORD *)(v8 + 18) != 30 || (v14 = *(_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF))) == 0)
    {
LABEL_25:
      LOBYTE(v2) = 0;
      return (v3 == 5) & v2;
    }
    **a1 = v14;
    v2 = *(_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32);
    if (v2)
      goto LABEL_23;
  }
  return (v3 == 5) & v2;
}

uint64_t sub_1C57BF18C(_QWORD **a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 30)
      return 0;
    v8 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v9 = *(unsigned __int8 *)(v8 + 16);
    if (v9 == 5)
    {
      if (*(_WORD *)(v8 + 18) != 27)
        goto LABEL_32;
      v17 = *(_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
      if (!v17)
        goto LABEL_32;
      **a1 = v17;
      if (!sub_1C4D8A86C((llvm::APInt *)(a1 + 1), *(llvm::Constant **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32)))goto LABEL_32;
    }
    else
    {
      if (v9 != 55)
        goto LABEL_32;
      v10 = *(_QWORD *)(v8 - 64);
      if (!v10)
        goto LABEL_32;
      **a1 = v10;
      if (!sub_1C4D8A7F0((llvm::APInt *)(a1 + 1), *(unsigned __int8 **)(v8 - 32)))
        goto LABEL_32;
    }
    if ((sub_1C4D9EED4((uint64_t)(a1 + 3), *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32)) & 1) != 0)
      return 1;
LABEL_32:
    v18 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
    v19 = *(unsigned __int8 *)(v18 + 16);
    if (v19 == 5)
    {
      if (*(_WORD *)(v18 + 18) != 27)
        return 0;
      v21 = *(_QWORD *)(v18 - 32 * (*(_DWORD *)(v18 + 20) & 0x7FFFFFF));
      if (!v21)
        return 0;
      **a1 = v21;
      result = sub_1C4D8A86C((llvm::APInt *)(a1 + 1), *(llvm::Constant **)(v18 - 32 * (*(_DWORD *)(v18 + 20) & 0x7FFFFFF) + 32));
      if (!(_DWORD)result)
        return result;
    }
    else
    {
      if (v19 != 55)
        return 0;
      v20 = *(_QWORD *)(v18 - 64);
      if (!v20)
        return 0;
      **a1 = v20;
      if (!sub_1C4D8A7F0((llvm::APInt *)(a1 + 1), *(unsigned __int8 **)(v18 - 32)))
        return 0;
    }
    return sub_1C4D9EED4((uint64_t)(a1 + 3), *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
  }
  if (v4 == 58)
  {
    v5 = *(_QWORD *)(a2 - 64);
    v6 = *(unsigned __int8 *)(v5 + 16);
    if (v6 == 5)
    {
      if (*(_WORD *)(v5 + 18) != 27
        || (v11 = *(_QWORD *)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF))) == 0
        || (**a1 = v11,
            !sub_1C4D8A86C((llvm::APInt *)(a1 + 1), *(llvm::Constant **)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) + 32))))
      {
LABEL_18:
        v12 = *(_QWORD *)(a2 - 32);
        v13 = *(unsigned __int8 *)(v12 + 16);
        if (v13 == 5)
        {
          if (*(_WORD *)(v12 + 18) != 27)
            return 0;
          v15 = *(_QWORD *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF));
          if (!v15)
            return 0;
          **a1 = v15;
          result = sub_1C4D8A86C((llvm::APInt *)(a1 + 1), *(llvm::Constant **)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) + 32));
          if (!(_DWORD)result)
            return result;
        }
        else
        {
          if (v13 != 55)
            return 0;
          v14 = *(_QWORD *)(v12 - 64);
          if (!v14)
            return 0;
          **a1 = v14;
          if (!sub_1C4D8A7F0((llvm::APInt *)(a1 + 1), *(unsigned __int8 **)(v12 - 32)))
            return 0;
        }
        return sub_1C4D9ED34((uint64_t)(a1 + 3), *(llvm::Constant **)(a2 - 64));
      }
    }
    else
    {
      if (v6 != 55)
        goto LABEL_18;
      v7 = *(_QWORD *)(v5 - 64);
      if (!v7)
        goto LABEL_18;
      **a1 = v7;
      if (!sub_1C4D8A7F0((llvm::APInt *)(a1 + 1), *(unsigned __int8 **)(v5 - 32)))
        goto LABEL_18;
    }
    if ((sub_1C4D9ED34((uint64_t)(a1 + 3), *(llvm::Constant **)(a2 - 32)) & 1) == 0)
      goto LABEL_18;
    return 1;
  }
  return 0;
}

uint64_t sub_1C57BF450(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  BOOL v5;
  int v6;
  unsigned int v8;
  unint64_t v9;
  int v10;
  int v12;
  int v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;

  LODWORD(v2) = *(unsigned __int8 *)(a2 + 16);
  if (v2 < 0x1C)
  {
    if ((_DWORD)v2 == 5)
    {
      LODWORD(v2) = *(unsigned __int16 *)(a2 + 18);
      HIDWORD(v9) = v2 - 13;
      LODWORD(v9) = v2 - 13;
      v8 = v9 >> 1;
      v5 = v8 > 6;
      v10 = (1 << v8) & 0x47;
      if (!v5 && v10 != 0)
        goto LABEL_12;
    }
LABEL_16:
    v12 = 0;
    return v12 & v2;
  }
  HIDWORD(v4) = v2 - 41;
  LODWORD(v4) = v2 - 41;
  v3 = v4 >> 1;
  v5 = v3 > 6;
  v6 = (1 << v3) & 0x47;
  if (v5 || v6 == 0)
    goto LABEL_16;
  LODWORD(v2) = v2 - 28;
LABEL_12:
  if ((_DWORD)v2 == 15 && (*(_BYTE *)(a2 + 17) & 4) != 0)
  {
    v14 = *(_DWORD *)(a2 + 20);
    if ((v14 & 0x40000000) != 0)
      v15 = *(uint64_t **)(a2 - 8);
    else
      v15 = (uint64_t *)(a2 - 32 * (v14 & 0x7FFFFFF));
    v2 = *v15;
    if (v2)
    {
      **a1 = v2;
      v16 = *(_DWORD *)(a2 + 20);
      v17 = (v16 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v16 & 0x7FFFFFF);
      v2 = *(_QWORD *)(v17 + 32);
      if (v2)
      {
        *a1[1] = v2;
        v12 = 1;
        LODWORD(v2) = 1;
        return v12 & v2;
      }
    }
  }
  else
  {
    LODWORD(v2) = 0;
  }
  v12 = 1;
  return v12 & v2;
}

uint64_t sub_1C57BF53C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = 0;
  if (a2)
  {
    if (*(_BYTE *)(a2 + 16) == 81)
    {
      result = 0;
      v5 = *(_QWORD *)(a2 - 64);
      if (v5)
      {
        if (*(_BYTE *)(v5 + 16) == 92)
        {
          if (*(_DWORD *)(v5 + 72) == 1 && !**(_DWORD **)(v5 + 64) && **(_QWORD **)(a1 + 8) == *(_QWORD *)(v5 - 32))
          {
            **(_QWORD **)(a1 + 16) = v5;
            result = sub_1C4D8AC3C(a1 + 24, *(llvm::Constant **)(a2 - 32));
            if ((_DWORD)result)
            {
              **(_DWORD **)a1 = *(_WORD *)(a2 + 18) & 0x3F;
              return 1;
            }
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_1C57BF5E8(uint64_t a1, int a2, uint64_t a3)
{
  int v5;
  char v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v5 = *(unsigned __int8 *)(a3 + 16);
  v6 = a2 + 28;
  if (a2 + 28 == v5)
  {
    v7 = *(_QWORD *)(a3 - 64);
    v8 = *(unsigned __int8 *)(v7 + 16);
    if (v8 == 5)
    {
      if (*(_WORD *)(v7 + 18) != 25)
        return 0;
      if (!sub_1C4D89E3C(a1, *(llvm::Constant **)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF))))
        return 0;
      v9 = *(_QWORD *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) + 32);
      if (!v9)
        return 0;
    }
    else
    {
      if (v8 != 53)
        return 0;
      if (!sub_1C4D89CC8(a1, *(llvm::Constant **)(v7 - 64)))
        return 0;
      v9 = *(_QWORD *)(v7 - 32);
      if (!v9)
        return 0;
    }
    **(_QWORD **)(a1 + 8) = v9;
    return (sub_1C4D9ED34(a1 + 16, *(llvm::Constant **)(a3 - 32)) & 1) != 0;
  }
  if (v5 == 5)
  {
    if (*(unsigned __int16 *)(a3 + 18) != a2)
      goto LABEL_25;
    v10 = *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
    v11 = *(unsigned __int8 *)(v10 + 16);
    if (v11 == 5)
    {
      if (*(_WORD *)(v10 + 18) != 25)
        goto LABEL_25;
      if (!sub_1C4D89E3C(a1, *(llvm::Constant **)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF))))
        goto LABEL_25;
      v12 = *(_QWORD *)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) + 32);
      if (!v12)
        goto LABEL_25;
    }
    else
    {
      if (v11 != 53)
        goto LABEL_25;
      if (!sub_1C4D89CC8(a1, *(llvm::Constant **)(v10 - 64)))
        goto LABEL_25;
      v12 = *(_QWORD *)(v10 - 32);
      if (!v12)
        goto LABEL_25;
    }
    **(_QWORD **)(a1 + 8) = v12;
    if ((sub_1C4D9EED4(a1 + 16, *(llvm::Constant **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32)) & 1) == 0)
    {
LABEL_25:
      v6 = 0;
      return (v5 == 5) & v6;
    }
    v6 = 1;
  }
  return (v5 == 5) & v6;
}

BOOL sub_1C57BF784(_QWORD *a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24) != *a1;
}

uint64_t sub_1C57BF798(_QWORD **a1, uint64_t a2)
{
  char v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  BOOL v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;

  v3 = *(unsigned __int8 *)(a2 + 16);
  if (v3 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 30)
      return 0;
    v11 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v12 = *(_QWORD *)(v11 + 8);
    if (!v12 || *(_QWORD *)(v12 + 8))
    {
LABEL_15:
      v13 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
      v14 = *(_QWORD *)(v13 + 8);
      if (!v14 || *(_QWORD *)(v14 + 8))
        return 0;
      v22 = *(unsigned __int8 *)(v13 + 16);
      if (v22 == 5)
      {
        if (*(_WORD *)(v13 + 18) != 30)
          return 0;
        v43 = *(_QWORD *)(v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF));
        if (!v43)
          return 0;
        v24 = *a1;
        **a1 = v43;
        v10 = *(_QWORD *)(v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF) + 32);
        if (!v10)
          return v10;
      }
      else
      {
        if (v22 != 58)
          return 0;
        v23 = *(_QWORD *)(v13 - 64);
        if (!v23)
          return 0;
        v24 = *a1;
        **a1 = v23;
        v10 = *(_QWORD *)(v13 - 32);
        if (!v10)
          return v10;
      }
      *a1[1] = v10;
      v44 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      v10 = *(_QWORD *)(v44 + 8);
      if (!v10)
        return v10;
      if (*(_QWORD *)(v10 + 8))
        return 0;
      v45 = *(unsigned __int8 *)(v44 + 16);
      if (v45 != 57)
      {
        if (v45 == 5)
        {
          if (*(_WORD *)(v44 + 18) == 29
            && ((v56 = (_QWORD *)(v44 - 32 * (*(_DWORD *)(v44 + 20) & 0x7FFFFFF)),
                 v57 = (_QWORD *)*v56,
                 v58 = (_QWORD *)*a1[2],
                 v24 = (_QWORD *)v56[4],
                 v58 == v57)
             && v24
             || (v57 ? (v59 = v58 == v24) : (v59 = 0), v24 = v57, v59)))
          {
            *a1[3] = v24;
            LOBYTE(v24) = 1;
          }
          else
          {
            LOBYTE(v24) = 0;
          }
        }
        return (v45 == 5) & v24;
      }
      v31 = *(_QWORD *)(v44 - 64);
      v46 = *a1[2];
      v29 = *(_QWORD *)(v44 - 32);
      if (v46 == v31 && v29)
      {
LABEL_130:
        *a1[3] = v29;
        return 1;
      }
      if (!v31 || v46 != v29)
        return 0;
      goto LABEL_121;
    }
    v19 = *(unsigned __int8 *)(v11 + 16);
    if (v19 == 5)
    {
      if (*(_WORD *)(v11 + 18) != 30)
        goto LABEL_15;
      v37 = *(_QWORD *)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF));
      if (!v37)
        goto LABEL_15;
      **a1 = v37;
      v21 = *(_QWORD *)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF) + 32);
      if (!v21)
        goto LABEL_15;
    }
    else
    {
      if (v19 != 58)
        goto LABEL_15;
      v20 = *(_QWORD *)(v11 - 64);
      if (!v20)
        goto LABEL_15;
      **a1 = v20;
      v21 = *(_QWORD *)(v11 - 32);
      if (!v21)
        goto LABEL_15;
    }
    *a1[1] = v21;
    v38 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
    v39 = *(_QWORD *)(v38 + 8);
    if (v39 && !*(_QWORD *)(v39 + 8))
    {
      v40 = *(unsigned __int8 *)(v38 + 16);
      if (v40 == 5)
      {
        if (*(_WORD *)(v38 + 18) == 29)
        {
          v60 = (uint64_t *)(v38 - 32 * (*(_DWORD *)(v38 + 20) & 0x7FFFFFF));
          v61 = *v60;
          v62 = *a1[2];
          v29 = v60[4];
          if (v62 == v61)
          {
            if (v29)
              goto LABEL_130;
          }
          v63 = v61 && v62 == v29;
          v29 = v61;
          if (v63)
            goto LABEL_130;
        }
      }
      else if (v40 == 57)
      {
        v29 = *(_QWORD *)(v38 - 64);
        v41 = *a1[2];
        v31 = *(_QWORD *)(v38 - 32);
        if (v41 == v29 && v31)
          goto LABEL_121;
        if (v29)
          v42 = v41 == v31;
        else
          v42 = 0;
        if (v42)
          goto LABEL_130;
      }
    }
    goto LABEL_15;
  }
  if (v3 != 58)
    return 0;
  v4 = *(_QWORD *)(a2 - 64);
  v5 = *(_QWORD *)(v4 + 8);
  if (v5 && !*(_QWORD *)(v5 + 8))
  {
    v16 = *(unsigned __int8 *)(v4 + 16);
    if (v16 == 5)
    {
      if (*(_WORD *)(v4 + 18) != 30)
        goto LABEL_5;
      v25 = *(_QWORD *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF));
      if (!v25)
        goto LABEL_5;
      **a1 = v25;
      v18 = *(_QWORD *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF) + 32);
      if (!v18)
        goto LABEL_5;
    }
    else
    {
      if (v16 != 58)
        goto LABEL_5;
      v17 = *(_QWORD *)(v4 - 64);
      if (!v17)
        goto LABEL_5;
      **a1 = v17;
      v18 = *(_QWORD *)(v4 - 32);
      if (!v18)
        goto LABEL_5;
    }
    *a1[1] = v18;
    v26 = *(_QWORD *)(a2 - 32);
    v27 = *(_QWORD *)(v26 + 8);
    if (!v27 || *(_QWORD *)(v27 + 8))
      goto LABEL_5;
    v28 = *(unsigned __int8 *)(v26 + 16);
    if (v28 == 5)
    {
      if (*(_WORD *)(v26 + 18) == 29)
      {
        v52 = (uint64_t *)(v26 - 32 * (*(_DWORD *)(v26 + 20) & 0x7FFFFFF));
        v53 = *v52;
        v54 = *a1[2];
        v29 = v52[4];
        if (v54 == v53)
        {
          if (v29)
            goto LABEL_130;
        }
        v55 = v53 && v54 == v29;
        v29 = v53;
        if (v55)
          goto LABEL_130;
      }
      goto LABEL_5;
    }
    if (v28 != 57)
      goto LABEL_5;
    v29 = *(_QWORD *)(v26 - 64);
    v30 = *a1[2];
    v31 = *(_QWORD *)(v26 - 32);
    if (v30 != v29 || !v31)
    {
      if (v29 && v30 == v31)
        goto LABEL_130;
      goto LABEL_5;
    }
LABEL_121:
    *a1[3] = v31;
    return 1;
  }
LABEL_5:
  v6 = *(_QWORD *)(a2 - 32);
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_QWORD *)(v7 + 8))
    return 0;
  v8 = *(unsigned __int8 *)(v6 + 16);
  if (v8 != 5)
  {
    if (v8 == 58)
    {
      v9 = *(_QWORD *)(v6 - 64);
      if (v9)
      {
        **a1 = v9;
        v10 = *(_QWORD *)(v6 - 32);
        if (!v10)
          return v10;
        goto LABEL_48;
      }
    }
    return 0;
  }
  if (*(_WORD *)(v6 + 18) != 30)
    return 0;
  v32 = *(_QWORD *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF));
  if (!v32)
    return 0;
  **a1 = v32;
  v10 = *(_QWORD *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) + 32);
  if (!v10)
    return v10;
LABEL_48:
  *a1[1] = v10;
  v33 = *(_QWORD *)(a2 - 64);
  v10 = *(_QWORD *)(v33 + 8);
  if (!v10)
    return v10;
  if (*(_QWORD *)(v10 + 8))
    return 0;
  v34 = *(unsigned __int8 *)(v33 + 16);
  if (v34 != 57)
  {
    if (v34 == 5)
    {
      if (*(_WORD *)(v33 + 18) == 29)
      {
        v48 = (uint64_t *)(v33 - 32 * (*(_DWORD *)(v33 + 20) & 0x7FFFFFF));
        v49 = *v48;
        v50 = *a1[2];
        v51 = v48[4];
        if (v50 == v49 && v51 || (v2 = 0, v49) && (v42 = v50 == v51, v51 = v49, v42))
        {
          *a1[3] = v51;
          v2 = 1;
        }
      }
      else
      {
        v2 = 0;
      }
    }
    return (v34 == 5) & v2;
  }
  v35 = *(_QWORD *)(v33 - 64);
  v36 = *a1[2];
  v29 = *(_QWORD *)(v33 - 32);
  if (v36 == v35 && v29)
    goto LABEL_130;
  v10 = 0;
  if (v35 && v36 == v29)
  {
    *a1[3] = v35;
    return 1;
  }
  return v10;
}

uint64_t sub_1C57BFD04@<X0>(_QWORD **a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 56)
  {
    v6 = sub_1C4D9EC28(a1, 30, *(_QWORD *)(a2 - 64));
    v7 = *(_QWORD *)(a2 - 32);
    if (v6 && v7)
    {
      *a1[2] = v7;
      return 1;
    }
    result = sub_1C4D9EC28(a1, 30, v7);
    if ((_DWORD)result)
    {
      v11 = *(_QWORD *)(a2 - 64);
      if (v11)
      {
        *a1[2] = v11;
        return 1;
      }
      return 0;
    }
  }
  else
  {
    if (v5 == 5)
    {
      if (*(_WORD *)(a2 + 18) == 28
        && ((v8 = sub_1C4D9EC28(a1, 30, *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF))),
             v9 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32),
             v8)
         && v9
         || sub_1C4D9EC28(a1, 30, v9)
         && (v9 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF))) != 0))
      {
        *a1[2] = v9;
        a3 = 1;
      }
      else
      {
        a3 = 0;
      }
    }
    return (v5 == 5) & a3;
  }
  return result;
}

uint64_t sub_1C57BFE1C(uint64_t *a1, int a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v5 = *(unsigned __int8 *)(a3 + 16);
  LOBYTE(v6) = a2 + 28;
  if (a2 + 28 == v5)
  {
    v7 = *(_QWORD *)(a3 - 64);
    v8 = *(unsigned __int8 *)(v7 + 16);
    if (v8 != 5)
    {
      if (v8 != 58)
        goto LABEL_27;
      v9 = *a1;
      if (*a1 != *(_QWORD *)(v7 - 64))
      {
LABEL_7:
        if (v9 != *(_QWORD *)(v7 - 32) || (sub_1C4D9ED34((uint64_t)(a1 + 1), *(llvm::Constant **)(v7 - 64)) & 1) == 0)
          goto LABEL_27;
        goto LABEL_26;
      }
      if ((sub_1C4D9ED34((uint64_t)(a1 + 1), *(llvm::Constant **)(v7 - 32)) & 1) == 0)
      {
        v9 = *a1;
        goto LABEL_7;
      }
LABEL_26:
      v17 = *(_QWORD *)(a3 - 32);
      if (v17)
      {
LABEL_42:
        *(_QWORD *)a1[2] = v17;
        return 1;
      }
LABEL_27:
      v18 = *(_QWORD *)(a3 - 32);
      v19 = *(unsigned __int8 *)(v18 + 16);
      if (v19 != 5)
      {
        if (v19 != 58)
          return 0;
        v20 = *a1;
        if (*a1 == *(_QWORD *)(v18 - 64))
        {
          if ((sub_1C4D9ED34((uint64_t)(a1 + 1), *(llvm::Constant **)(v18 - 32)) & 1) != 0)
            goto LABEL_41;
          v20 = *a1;
        }
        if (v20 != *(_QWORD *)(v18 - 32) || (sub_1C4D9ED34((uint64_t)(a1 + 1), *(llvm::Constant **)(v18 - 64)) & 1) == 0)
          return 0;
LABEL_41:
        v17 = *(_QWORD *)(a3 - 64);
        if (v17)
          goto LABEL_42;
        return 0;
      }
      if (*(_WORD *)(v18 + 18) != 30)
        return 0;
      v21 = *(_DWORD *)(v18 + 20) & 0x7FFFFFF;
      v22 = v18 - 32 * v21;
      v23 = *a1;
      if (*a1 == *(_QWORD *)v22)
      {
        if ((sub_1C4D9EED4((uint64_t)(a1 + 1), *(llvm::Constant **)(v22 + 32)) & 1) != 0)
          goto LABEL_41;
        v23 = *a1;
        v21 = *(_DWORD *)(v18 + 20) & 0x7FFFFFF;
      }
      v24 = v18 - 32 * v21;
      if (v23 != *(_QWORD *)(v24 + 32))
        return 0;
      result = sub_1C4D9EED4((uint64_t)(a1 + 1), *(llvm::Constant **)v24);
      if (!(_DWORD)result)
        return result;
      goto LABEL_41;
    }
    if (*(_WORD *)(v7 + 18) != 30)
      goto LABEL_27;
    v13 = *(_DWORD *)(v7 + 20) & 0x7FFFFFF;
    v14 = v7 - 32 * v13;
    v15 = *a1;
    if (*a1 == *(_QWORD *)v14)
    {
      if ((sub_1C4D9EED4((uint64_t)(a1 + 1), *(llvm::Constant **)(v14 + 32)) & 1) != 0)
        goto LABEL_26;
      v15 = *a1;
      v13 = *(_DWORD *)(v7 + 20) & 0x7FFFFFF;
    }
    v16 = v7 - 32 * v13;
    if (v15 != *(_QWORD *)(v16 + 32) || !sub_1C4D9EED4((uint64_t)(a1 + 1), *(llvm::Constant **)v16))
      goto LABEL_27;
    goto LABEL_26;
  }
  if (v5 != 5)
    return (v5 == 5) & v6;
  if (*(unsigned __int16 *)(a3 + 18) != a2)
    goto LABEL_67;
  v10 = *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
  v11 = *(unsigned __int8 *)(v10 + 16);
  if (v11 == 5)
  {
    if (*(_WORD *)(v10 + 18) != 30)
      goto LABEL_51;
    v26 = *(_DWORD *)(v10 + 20) & 0x7FFFFFF;
    v27 = v10 - 32 * v26;
    v28 = *a1;
    if (*a1 == *(_QWORD *)v27)
    {
      if ((sub_1C4D9EED4((uint64_t)(a1 + 1), *(llvm::Constant **)(v27 + 32)) & 1) != 0)
        goto LABEL_50;
      v28 = *a1;
      v26 = *(_DWORD *)(v10 + 20) & 0x7FFFFFF;
    }
    v29 = v10 - 32 * v26;
    if (v28 != *(_QWORD *)(v29 + 32) || !sub_1C4D9EED4((uint64_t)(a1 + 1), *(llvm::Constant **)v29))
      goto LABEL_51;
    goto LABEL_50;
  }
  if (v11 != 58)
    goto LABEL_51;
  v12 = *a1;
  if (*a1 != *(_QWORD *)(v10 - 64))
  {
LABEL_17:
    if (v12 != *(_QWORD *)(v10 - 32) || (sub_1C4D9ED34((uint64_t)(a1 + 1), *(llvm::Constant **)(v10 - 64)) & 1) == 0)
      goto LABEL_51;
    goto LABEL_50;
  }
  if ((sub_1C4D9ED34((uint64_t)(a1 + 1), *(llvm::Constant **)(v10 - 32)) & 1) == 0)
  {
    v12 = *a1;
    goto LABEL_17;
  }
LABEL_50:
  v6 = *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32);
  if (v6)
  {
LABEL_66:
    *(_QWORD *)a1[2] = v6;
    LOBYTE(v6) = 1;
    return (v5 == 5) & v6;
  }
LABEL_51:
  v30 = *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32);
  v31 = *(unsigned __int8 *)(v30 + 16);
  if (v31 != 5)
  {
    if (v31 == 58)
    {
      v32 = *a1;
      if (*a1 == *(_QWORD *)(v30 - 64))
      {
        if ((sub_1C4D9ED34((uint64_t)(a1 + 1), *(llvm::Constant **)(v30 - 32)) & 1) != 0)
          goto LABEL_65;
        v32 = *a1;
      }
      if (v32 != *(_QWORD *)(v30 - 32) || (sub_1C4D9ED34((uint64_t)(a1 + 1), *(llvm::Constant **)(v30 - 64)) & 1) == 0)
        goto LABEL_67;
      goto LABEL_65;
    }
LABEL_67:
    LOBYTE(v6) = 0;
    return (v5 == 5) & v6;
  }
  if (*(_WORD *)(v30 + 18) != 30)
    goto LABEL_67;
  v33 = *(_DWORD *)(v30 + 20) & 0x7FFFFFF;
  v34 = v30 - 32 * v33;
  v35 = *a1;
  if (*a1 == *(_QWORD *)v34)
  {
    if ((sub_1C4D9EED4((uint64_t)(a1 + 1), *(llvm::Constant **)(v34 + 32)) & 1) != 0)
      goto LABEL_65;
    v35 = *a1;
    v33 = *(_DWORD *)(v30 + 20) & 0x7FFFFFF;
  }
  v36 = v30 - 32 * v33;
  if (v35 != *(_QWORD *)(v36 + 32) || !sub_1C4D9EED4((uint64_t)(a1 + 1), *(llvm::Constant **)v36))
    goto LABEL_67;
LABEL_65:
  v6 = *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
  if (v6)
    goto LABEL_66;
  return (v5 == 5) & v6;
}

uint64_t sub_1C57C0200(uint64_t a1)
{
  uint64_t v2;
  llvm::APInt *v3;
  unsigned int v4;
  BOOL v5;
  int v6;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 32) + 36) - 194) > 5
    || ((1 << (*(_BYTE *)(*(_QWORD *)(a1 - 32) + 36) + 62)) & 0x2D) == 0)
  {
    return 0;
  }
  v2 = *(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 96);
  v3 = (llvm::APInt *)(v2 + 24);
  v4 = *(_DWORD *)(v2 + 32);
  if (v4 > 0x40)
    v5 = llvm::APInt::countLeadingZerosSlowCase(v3) == v4;
  else
    v5 = *(_QWORD *)v3 == 0;
  v6 = v5;
  return v6 ^ 1u;
}

uint64_t sub_1C57C0284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  int v25;
  llvm *v26;

  v3 = (_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 40) + 40;
  if (a1 + 24 != v4)
  {
    v8 = a1 - 32;
    v9 = a1 - 8;
    do
    {
      v10 = v3 ? (uint64_t)(v3 - 3) : 0;
      if (*(_BYTE *)(v10 + 16) != 84)
        break;
      v11 = *(_QWORD *)(v10 - 32);
      if (!v11
        || *(_BYTE *)(v11 + 16)
        || *(_QWORD *)(v11 + 24) != *(_QWORD *)(v10 + 72)
        || (*(_BYTE *)(v11 + 33) & 0x20) == 0)
      {
        break;
      }
      if (!sub_1C4D99D08((uint64_t)(v3 - 3))
        && !sub_1C509DDB0((uint64_t)(v3 - 3))
        && *(_DWORD *)(*(v3 - 7) + 36) != *(_DWORD *)(*(_QWORD *)v8 + 36))
      {
        v12 = *(_QWORD *)(a3 + 24);
        if (!v12)
        {
          sub_1C485C2F0();
          return sub_1C57C0468(v25, v26);
        }
        result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 48))(v12, v3 - 3);
        if (!(_DWORD)result)
          return result;
        v14 = *(unsigned __int8 *)(a1 + 16);
        if (v14 == 84)
        {
          v15 = 0;
        }
        else if (v14 == 39)
        {
          v15 = (*(_DWORD *)(a1 + 80) + 1);
        }
        else
        {
          v15 = 2;
        }
        v16 = *(_DWORD *)(a1 + 20);
        if (v16 < 0 && (v24 = v16 & 0x7FFFFFF, (*(_QWORD *)(v9 - 32 * v24) & 0xFFFFFFFF0) != 0))
        {
          v18 = -v24;
          v17 = (*(_DWORD *)(a1 - 32 * v24 - 12)
                             - *(_DWORD *)(a1 - 32 * v24 - *(_QWORD *)(a1 - 32 * v24 - 8)));
        }
        else
        {
          v17 = 0;
          v18 = -(uint64_t)(v16 & 0x7FFFFFF);
        }
        v19 = v8 - 32 * v15 - 32 * v17;
        v20 = (_QWORD *)(a1 + 32 * v18);
        if (((v19 - (_QWORD)v20) & 0x1FFFFFFFE0) == 0)
        {
LABEL_35:
          sub_1C57813F4(a2, (uint64_t)(v3 - 3));
          sub_1C57813F4(a2, a1);
          return 1;
        }
        v21 = &v3[-4 * (*((_DWORD *)v3 - 1) & 0x7FFFFFF) - 3];
        v22 = -(uint64_t)((unint64_t)(v19 - (_QWORD)v20) >> 5);
        while (*v20 == *v21)
        {
          v21 += 4;
          v20 += 4;
          if (__CFADD__(v22++, 1))
            goto LABEL_35;
        }
      }
      v3 = (_QWORD *)*v3;
    }
    while (v3 != (_QWORD *)v4);
  }
  return 0;
}

#error "1C57C0468: too big function (funcsize=0)"

char *sub_1C57D2E78(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  int v5;
  _BOOL4 ObjectSize;
  void *v7;
  BOOL v8;
  char v9;
  int v11;
  char v12;
  unint64_t v13;
  llvm::Function *v14;
  uint64_t v15;
  unint64_t **v16;
  unsigned int v17;
  unint64_t v18;
  uint8x8_t v19;
  unsigned int v20;
  unsigned __int8 v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD **v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  _DWORD *v40;
  unint64_t v41;
  uint64_t v42;
  llvm::CastInst **v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  llvm::Value *v61;
  llvm::Value *v63;
  llvm::Value *v64;
  uint64_t v65;
  llvm::Value *v66;
  llvm::Value *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  BOOL v74;
  void **v75;
  char *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  BOOL v88;
  int v89;
  llvm::Type *v91;
  llvm::Value *v92;
  uint64_t v93;
  llvm::UndefValue **v94;
  uint64_t v95;
  _QWORD *v96;
  llvm::Value **NullValue;
  uint64_t v98;
  llvm::CastInst ***v99;
  llvm::Value *v100;
  llvm::Value *v101;
  llvm::CastInst *v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  _QWORD *v108;
  int v109;
  uint64_t v110;
  _QWORD *v111;
  unsigned __int8 *v112;
  uint64_t *v113;
  uint64_t v114;
  unsigned __int8 *v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t *v119;
  void *v120;
  _QWORD *v121;
  int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t *v126;
  int v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unsigned __int8 *v133;
  unsigned int v134;
  BOOL v135;
  uint64_t v137;
  uint64_t v138;
  llvm::CastInst *v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  unsigned int v145;
  int v146;
  int v147;
  BOOL v148;
  uint64_t v149;
  unint64_t v150;
  int v151;
  int isSizedDerivedType;
  _QWORD *v154;
  char v155;
  llvm::CastInst *v156;
  uint64_t v157;
  uint64_t v158;
  llvm::Value *v159;
  llvm::CastInst *v160;
  int v161;
  int v162;
  llvm::CastInst *v163;
  llvm::GCRelocateInst **v164;
  uint64_t *v165;
  BOOL v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int *v170;
  unsigned int v171;
  _DWORD *v172;
  uint64_t v173;
  _QWORD *v174;
  llvm::Value **v175;
  uint64_t v176;
  llvm::Value ***v177;
  uint64_t v178;
  llvm::Value ****v179;
  llvm::Value *v180;
  llvm::Value *v181;
  llvm::Value *v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  int v190;
  uint64_t v191;
  int v192;
  unsigned int v193;
  _QWORD *v194;
  uint64_t v195;
  _QWORD *v196;
  int v197;
  BOOL v198;
  unsigned int v199;
  _QWORD *v200;
  _QWORD *v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t DerivedPtr;
  uint64_t BasePtr;
  llvm::PointerType *v206;
  int v207;
  uint64_t v208;
  llvm::UndefValue *v209;
  int v210;
  int v211;
  char *v212;
  char *v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t *v216;
  llvm::GCRelocateInst *v217;
  uint64_t v218;
  llvm::ConstantInt *v219;
  int v220;
  unsigned int v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t *v224;
  int v225;
  BOOL v226;
  unsigned int v227;
  uint64_t *v228;
  llvm::Value **v229;
  _DWORD *v230;
  llvm::Value ***v231;
  uint64_t v232;
  llvm::Value ****v233;
  llvm::Value *v234;
  llvm::Value *v235;
  uint64_t v236;
  llvm::ConstantInt *v237;
  int v238;
  unsigned int v239;
  uint64_t *v240;
  uint64_t v241;
  uint64_t *v242;
  int v243;
  BOOL v244;
  unsigned int v245;
  uint64_t *v246;
  llvm::Value **v247;
  _DWORD *v248;
  llvm::Value ***v249;
  uint64_t v250;
  llvm::Value ****v251;
  llvm::Value *v252;
  llvm::Value *v253;
  uint64_t v254;
  char *v255;
  uint64_t *v256;
  unsigned int v257;
  uint64_t v258;
  int v259;
  unsigned int v260;
  _QWORD *v261;
  uint64_t *v262;
  unsigned int v263;
  uint64_t *v264;
  uint64_t *v265;
  uint64_t *v266;
  int v267;
  BOOL v268;
  unsigned int v269;
  uint64_t *v270;
  uint64_t v271;
  unsigned int v272;
  uint64_t *v273;
  uint64_t *v274;
  uint64_t *v275;
  int v276;
  BOOL v277;
  unsigned int v278;
  uint64_t v279;
  unint64_t v280;
  unint64_t v281;
  char *v282;
  uint64_t *v283;
  char *v284;
  char *v285;
  uint64_t v286;
  int64_t v287;
  uint64_t v288;
  void *v289;
  unsigned __int8 **v290;
  uint64_t v291;
  uint64_t v292;
  unsigned __int8 ***v293;
  uint64_t v294;
  uint64_t *v295;
  uint64_t v296;
  _QWORD *v297;
  unsigned __int8 *v298;
  uint64_t **v299;
  uint64_t *v300;
  unsigned __int8 *v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  uint64_t v305;
  unsigned int *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  int v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t *v318;
  uint64_t *v319;
  char v320;
  char v321;
  void *v322[2];
  _BYTE v323[7];
  char v324;
  void *__p;
  void *v326;
  uint64_t v327;
  _DWORD v328[2];
  uint64_t v329;
  uint64_t v330;
  uint64_t *v331;
  uint64_t *v332;
  uint64_t *v333;
  uint64_t *v334;
  int v335;
  void *v336;
  uint64_t v337;
  uint64_t v338;
  void *v339;
  __int128 v340;
  uint64_t v341;
  char v342;
  llvm::UndefValue **(*v343)(uint64_t *, llvm::ValueAsMetadata *, llvm::Value *);
  __int128 *v344;
  uint64_t (*v345)(uint64_t *, uint64_t);
  uint64_t **v346;
  _DWORD *v347;
  uint64_t v348;
  _BYTE v349[16];
  __int128 v350;
  uint64_t *v351;
  uint64_t v352;
  uint64_t v353;
  char v354;
  uint64_t v355;

  v355 = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)(a1 + 64);
  if (byte_1ED82E438)
    v5 = 59;
  else
    v5 = 63;
  sub_1C4EBF808((uint64_t)a2, v5, v4, &v336);
  if (!(_BYTE)v339
    || ((v336 = 0,
         ObjectSize = llvm::getObjectSize((llvm::Value *)a2, &v336, *(llvm::DataLayout **)(a1 + 80), (llvm::DataLayout *)v4, 0, 0), v7 = v336, ObjectSize)? (v8 = v336 == 0): (v8 = 1), v8))
  {
    v9 = 0;
  }
  else
  {
    if (sub_1C4D91DD8((uint64_t)a2, 39))
      v11 = 76;
    else
      v11 = 77;
    v12 = sub_1C4D91DD8((uint64_t)a2, v11);
    v13 = llvm::Attribute::get(*(uint64_t **)*a2, v11, (uint64_t)v7);
    v9 = v12 ^ 1;
    a2[8] = llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(a2 + 8), *(llvm::LLVMContext **)*a2, 0, v13);
  }
  sub_1C4EBF808((uint64_t)a2, 63, v4, &v336);
  if (!(_BYTE)v339 || (v338 & 0x80000000) != 0)
  {
    LODWORD(v347) = 0;
    if (!llvm::AttributeList::hasAttrSomewhere(a2 + 8, 1, (int *)&v347))
    {
      v15 = *(a2 - 4);
      if (!v15)
        goto LABEL_34;
      if (*(_BYTE *)(v15 + 16))
        goto LABEL_34;
      if (*(_QWORD *)(v15 + 24) != a2[9])
        goto LABEL_34;
      *(_QWORD *)&v350 = *(_QWORD *)(v15 + 112);
      if (!llvm::AttributeList::hasAttrSomewhere((uint64_t *)&v350, 1, (int *)&v347))
        goto LABEL_34;
    }
    v295 = &a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
    v296 = 4 * ((_DWORD)v347 - 1);
  }
  else
  {
    v295 = &a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
    v296 = 4 * v338;
  }
  v297 = (_QWORD *)v295[v296];
  if (v297 && *((_BYTE *)v297 + 16) == 16)
  {
    v16 = (unint64_t **)(v297 + 3);
    v17 = *((_DWORD *)v297 + 8);
    if (v17 >= 0x41)
    {
      if (v17 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v297 + 3)) >= 0x41)
        goto LABEL_34;
      v18 = **v16;
    }
    else
    {
      v18 = (unint64_t)*v16;
    }
    if (!HIDWORD(v18))
    {
      v19 = (uint8x8_t)vcnt_s8((int8x8_t)v18);
      v19.i16[0] = vaddlv_u8(v19);
      if (v19.u32[0] == 1)
      {
        v20 = (unsigned __int16)sub_1C543FD8C((uint64_t)a2);
        v21 = v20 <= 0x100 ? 0 : v20;
        v22 = 63 - __clz(v18);
        if (v22 > v21)
        {
          v9 = 1;
          v23 = llvm::Attribute::get(*(uint64_t **)*a2, 74, 1 << v22);
          a2[8] = llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(a2 + 8), *(llvm::LLVMContext **)*a2, 0, v23);
        }
      }
    }
  }
LABEL_34:
  v347 = v349;
  v348 = 0x400000000;
  v24 = *((_DWORD *)a2 + 5);
  v25 = v24 & 0x7FFFFFF;
  v26 = *((unsigned __int8 *)a2 + 16);
  if (v26 == 84)
  {
    v27 = 0;
  }
  else if (v26 == 39)
  {
    v27 = (*((_DWORD *)a2 + 20) + 1);
  }
  else
  {
    v27 = 2;
  }
  v28 = &a2[-4 * v25];
  if (v24 < 0 && (v302 = *(v28 - 1), (v302 & 0xFFFFFFFF0) != 0))
    v29 = (*((_DWORD *)v28 - 3) - *(_DWORD *)((char *)v28 - v302));
  else
    v29 = 0;
  if (v28 != &a2[-4 * v27 - 4 + -4 * v29])
  {
    v30 = 0;
    v31 = (32 * v27 + 32 * v29) ^ 0xFFFFFFFFFFFFFFE0;
    v32 = -32 * v25;
    do
    {
      v33 = a2[(unint64_t)v32 / 8];
      if (*(_BYTE *)(*(_QWORD *)v33 + 8) == 15 && (llvm::CallBase::paramHasAttr((uint64_t)a2, v30, 39) & 1) == 0)
      {
        v34 = (_QWORD **)a2;
        if (!a2[5])
        {
          if (*(unsigned __int8 *)(v33 + 16) < 0x1Cu || (v34 = (_QWORD **)v33, !*(_QWORD *)(v33 + 40)))
            v34 = 0;
        }
        v35 = *(_QWORD *)(a1 + 56);
        v36 = *(void **)(a1 + 72);
        v336 = *(void **)(a1 + 80);
        v337 = v35;
        v338 = (uint64_t)v34;
        v339 = v36;
        *(_QWORD *)&v340 = 0;
        BYTE8(v340) = 1;
        if (sub_1C4F84D74(v33, 0, (uint64_t)&v336))
        {
          v37 = v348;
          if (v348 >= (unint64_t)HIDWORD(v348))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v347, (uint64_t)v349, v348 + 1, 4);
            v37 = v348;
          }
          v347[v37] = v30;
          LODWORD(v348) = v348 + 1;
        }
      }
      ++v30;
      v32 += 32;
    }
    while (v31 != v32);
    v38 = v348;
    if ((_DWORD)v348)
    {
      v336 = (void *)a2[8];
      v39 = *(uint64_t **)*a2;
      v40 = v347;
      v41 = llvm::Attribute::get(v39, 39, 0);
      a2[8] = llvm::AttributeList::addParamAttribute(&v336, v39, v40, v38, v41);
      v9 = 1;
    }
  }
  v43 = (llvm::CastInst **)(a2 - 4);
  v42 = *(a2 - 4);
  if (!v42 || *(_BYTE *)(v42 + 16))
  {
    if ((sub_1C57D5374(a1, (llvm::CastInst **)a2) & 1) == 0)
      goto LABEL_84;
LABEL_91:
    v46 = 0;
    goto LABEL_92;
  }
  if (*(_QWORD *)(v42 + 24) != a2[9] && (sub_1C57D5374(a1, (llvm::CastInst **)a2) & 1) != 0)
    goto LABEL_91;
  v44 = (_QWORD *)a2[8];
  if (v44 && (*((_BYTE *)v44 + 12) & 0x40) != 0
    || llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 6))
  {
    v45 = *(_QWORD *)(v42 + 112);
    if ((!v45 || (*(_BYTE *)(v45 + 12) & 0x40) == 0) && (*(_BYTE *)(v42 + 33) & 0x20) == 0)
    {
      a2[8] = llvm::AttributeList::removeAttributeAtIndex(a2 + 8, *(uint64_t **)*a2, -1, 6);
      v46 = (char *)a2;
      goto LABEL_92;
    }
  }
  v47 = (*(unsigned __int16 *)(v42 + 18) >> 4) & 0x3FF;
  v48 = *((unsigned __int16 *)a2 + 9);
  v49 = (v48 >> 2) & 0x3FF;
  if (v47 == v49)
    goto LABEL_84;
  if (!v47)
  {
    v50 = *(_QWORD *)(*(_QWORD *)(a2[5] + 56) + 40);
    v53 = *(_QWORD *)(v50 + 216);
    v51 = v50 + 216;
    v52 = v53;
    v54 = *(_BYTE *)(v51 + 23);
    if (v54 >= 0)
      v55 = v51;
    else
      v55 = v52;
    v56 = *(_QWORD *)(v51 + 8);
    if (v54 >= 0)
      v57 = v54 & 0x7F;
    else
      v57 = v56;
    if (sub_1C4F77630(v49, v55, v57, a2[9]))
      goto LABEL_84;
    LOWORD(v48) = *((_WORD *)a2 + 9);
  }
  if ((v48 & 0xFFC) != 0
    || !llvm::TargetLibraryInfoImpl::isCallingConvCCompatible((llvm::TargetLibraryInfoImpl *)v42, v14))
  {
    if (*(_BYTE *)(v42 + 16))
    {
      if (*(_BYTE *)(v42 + 16) == 3 && (*(_DWORD *)(v42 + 20) & 0x7FFFFFF) == 0)
        goto LABEL_84;
    }
    else if (*(_QWORD *)(v42 + 72) == v42 + 72 && (*(_BYTE *)(v42 + 34) & 0x80) == 0)
    {
      goto LABEL_84;
    }
    sub_1C62A7364(a1, (llvm::Instruction *)a2);
    if (*(_BYTE *)(*a2 + 8) != 7)
    {
      v92 = (llvm::Value *)llvm::PoisonValue::get((llvm::PoisonValue *)*a2, v91);
      sub_1C577F888(a1, (llvm::ValueAsMetadata *)a2, v92);
    }
    if (*((_BYTE *)a2 + 16) == 84)
    {
LABEL_157:
      v93 = a1;
      v94 = (llvm::UndefValue **)a2;
LABEL_158:
      v95 = sub_1C57813F4(v93, (uint64_t)v94);
LABEL_299:
      v46 = (char *)v95;
      goto LABEL_92;
    }
    v96 = *(_QWORD **)(v42 + 24);
    NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)v42, v91);
    a2[9] = (uint64_t)v96;
    if (*(a2 - 4))
    {
      *(_QWORD *)*(a2 - 2) = *(a2 - 3);
      v98 = *(a2 - 3);
      if (v98)
        *(_QWORD *)(v98 + 16) = *(a2 - 2);
    }
    *v43 = (llvm::CastInst *)NullValue;
    if (NullValue)
    {
      v101 = NullValue[1];
      v99 = (llvm::CastInst ***)(NullValue + 1);
      v100 = v101;
      *(a2 - 3) = (uint64_t)v101;
      if (v101)
        *((_QWORD *)v100 + 2) = a2 - 3;
      v46 = 0;
      *(a2 - 2) = (uint64_t)v99;
      *v99 = v43;
      goto LABEL_92;
    }
    goto LABEL_91;
  }
LABEL_84:
  v58 = *(unsigned __int8 *)(v42 + 16);
  if (v58 == 19)
  {
    v59 = *(_QWORD *)(a2[5] + 56);
    if (!v59)
      goto LABEL_88;
    v60 = *(_QWORD *)(v59 + 112);
    if (!v60 || (*(_BYTE *)(v60 + 17) & 1) == 0)
      goto LABEL_88;
  }
  else if ((v58 - 11) <= 1)
  {
LABEL_88:
    if (*(_BYTE *)(*a2 + 8) != 7)
    {
      v61 = (llvm::Value *)llvm::PoisonValue::get((llvm::PoisonValue *)*a2, v14);
      sub_1C577F888(a1, (llvm::ValueAsMetadata *)a2, v61);
    }
    if (*((unsigned __int8 *)a2 + 16) - 29 < 0xB)
      goto LABEL_91;
    sub_1C62A7364(a1, (llvm::Instruction *)a2);
    goto LABEL_157;
  }
  v63 = llvm::Value::stripPointerCasts((llvm::Value *)v42);
  v320 = v9;
  if (*((_BYTE *)v63 + 16) != 84)
    goto LABEL_168;
  v64 = v63;
  v65 = *((_QWORD *)v63 - 4);
  if (!v65
    || *(_BYTE *)(v65 + 16)
    || *(_QWORD *)(v65 + 24) != *((_QWORD *)v63 + 9)
    || (*(_BYTE *)(v65 + 33) & 0x20) == 0
    || *(_DWORD *)(v65 + 36) != 3)
  {
    goto LABEL_168;
  }
  v66 = (llvm::Value *)*((_QWORD *)v63 - 4 * (*((_DWORD *)v63 + 5) & 0x7FFFFFF));
  v67 = llvm::Value::stripPointerCasts(v66);
  if ((v67 == v66 || (v68 = *((_QWORD *)v67 + 1)) != 0 && !*(_QWORD *)(v68 + 8) && *(llvm::Value **)(v68 + 24) == v66)
    && *((_BYTE *)v67 + 16) == 59)
  {
    v69 = *((_QWORD *)v66 + 1);
    if (v69)
    {
      v70 = 0;
      do
      {
        v71 = *(_QWORD *)(v69 + 24);
        if (*(_BYTE *)(v71 + 16) != 84)
          goto LABEL_123;
        v72 = *(_QWORD *)(v71 - 32);
        if (!v72
          || *(_BYTE *)(v72 + 16)
          || *(_QWORD *)(v72 + 24) != *(_QWORD *)(v71 + 72)
          || (*(_BYTE *)(v72 + 33) & 0x20) == 0)
        {
          goto LABEL_123;
        }
        v73 = *(_DWORD *)(v72 + 36);
        if (v73 != 3)
        {
          v74 = v73 == 158 && v70 == 0;
          v70 = *(_QWORD *)(v69 + 24);
          if (!v74)
            goto LABEL_123;
        }
        v69 = *(_QWORD *)(v69 + 8);
      }
      while (v69);
      if (v70 && *(llvm::Value **)(v70 - 32 * (*(_DWORD *)(v70 + 20) & 0x7FFFFFF)) == v66)
      {
        v95 = (uint64_t)sub_1C57D689C(a1, (uint64_t)a2, v70);
        goto LABEL_299;
      }
    }
  }
LABEL_123:
  v75 = (void **)((char *)v64 + 24);
  v336 = (char *)v64 + 24;
  v76 = *(char **)(*((_QWORD *)v64 + 5) + 48);
  if ((char *)v64 + 24 == v76)
    goto LABEL_168;
  while (1)
  {
    v77 = *v75;
    v336 = v77;
    if (v77)
      v78 = (uint64_t)v77 - 24;
    else
      v78 = 0;
    if (sub_1C56168B0(&v336)
      && v336
      && *(_DWORD *)(*((_QWORD *)v336 - 7) + 36) == 158
      && *((llvm::Value **)v336 - 4 * (*((_DWORD *)v336 - 1) & 0x7FFFFFF) - 3) == v66)
    {
      v46 = sub_1C57D689C(a1, (uint64_t)a2, (uint64_t)v336 - 24);
      goto LABEL_92;
    }
    v79 = *(unsigned __int8 *)(v78 + 16) - 33;
    if (v79 > 0x37)
      goto LABEL_135;
    if (((1 << (*(_BYTE *)(v78 + 16) - 33)) & 0x8000000000041) == 0)
    {
      if (v79 == 27)
      {
        if ((*(_WORD *)(v78 + 18) & 0x301) != 0)
          goto LABEL_168;
      }
      else if (((1 << (*(_BYTE *)(v78 + 16) - 33)) & 0x808001D0000010) != 0)
      {
        goto LABEL_168;
      }
      goto LABEL_135;
    }
    v80 = *(_QWORD *)(v78 + 64);
    if (v80 && (*(_BYTE *)(v80 + 17) & 0x30) != 0)
      goto LABEL_135;
    v81 = *(_DWORD *)(v78 + 20);
    if (v81 < 0)
    {
      v82 = v78 - 32 * (v81 & 0x7FFFFFF);
      v85 = *(_QWORD *)(v82 - 8);
      v83 = v82 - 8;
      v84 = v85;
      if (v85)
        break;
    }
LABEL_140:
    if ((llvm::CallBase::hasFnAttrOnCalledFunction(v78, 45) & 1) == 0
      && (llvm::CallBase::hasFnAttrOnCalledFunction(v78, 44) & 1) == 0)
    {
      goto LABEL_168;
    }
LABEL_135:
    v75 = (void **)v336;
    if (v336 == v76)
      goto LABEL_168;
  }
  v86 = -v84;
  while (1)
  {
    v87 = *(_DWORD *)(*(_QWORD *)(v83 + v86) + 8);
    v88 = v87 > 7;
    v89 = (1 << v87) & 0x83;
    if (v88 || v89 == 0)
      break;
    v86 += 16;
    if (!v86)
      goto LABEL_140;
  }
LABEL_168:
  v102 = *v43;
  if (!*v43)
    goto LABEL_207;
  if (*((_BYTE *)v102 + 16) != 76)
    goto LABEL_207;
  llvm::CastInst::isNoopCast(*v43, *(const llvm::DataLayout **)(a1 + 80));
  if (!v103)
    goto LABEL_207;
  v104 = *((_QWORD *)v102 - 4);
  if (*(_BYTE *)(v104 + 16) != 84)
    goto LABEL_207;
  v105 = *(_QWORD *)(v104 - 32);
  if (!v105
    || *(_BYTE *)(v105 + 16)
    || *(_QWORD *)(v105 + 24) != *(_QWORD *)(v104 + 72)
    || (*(_BYTE *)(v105 + 33) & 0x20) == 0)
  {
    goto LABEL_207;
  }
  v336 = &v338;
  v337 = 0x200000000;
  v106 = *((_DWORD *)a2 + 5);
  if (v106 < 0 && (v304 = a2[-4 * (v106 & 0x7FFFFFF) - 1], (v304 & 0xFFFFFFFF0) != 0))
  {
    v108 = 0;
    v107 = 0;
    v317 = (v304 >> 4);
    v319 = a2;
    do
    {
      v305 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
      v306 = (unsigned int *)((char *)v319 - a2[-4 * v305 - 1] + -32 * v305);
      v307 = *v306;
      v308 = (uint64_t)&a2[4 * v307 + -4 * v305];
      v309 = v306[1] - v307;
      v310 = *((_QWORD *)v306 - 1);
      *(_QWORD *)&v350 = v308;
      *((_QWORD *)&v350 + 1) = v309;
      v351 = (uint64_t *)v310;
      if (*(_DWORD *)(v310 + 8) == 7)
      {
        v107 = 1;
        v108 = (_QWORD *)v308;
      }
      else
      {
        sub_1C623D924((uint64_t)&v336, (uint64_t)&v350);
      }
      v8 = v317-- == 1;
      v319 += 2;
    }
    while (!v8);
    v105 = *(_QWORD *)(v104 - 32);
  }
  else
  {
    v107 = 0;
    v108 = 0;
  }
  v109 = *(_DWORD *)(v105 + 36);
  switch(v109)
  {
    case 246:
      if (v107)
        break;
      v111 = (_QWORD *)(v104 - 32 * (*(_DWORD *)(v104 + 20) & 0x7FFFFFF));
LABEL_191:
      *(_QWORD *)&v350 = v111[4];
      *((_QWORD *)&v350 + 1) = v111[8];
      sub_1C57D5248((uint64_t)&v336, &v350);
      v110 = v104 - 32 * (*(_DWORD *)(v104 + 20) & 0x7FFFFFF);
      goto LABEL_192;
    case 248:
      if (!v107)
        break;
      v111 = (_QWORD *)(v104 - 32 * (*(_DWORD *)(v104 + 20) & 0x7FFFFFF));
      if (v111[12] != *v108 || v111[16] != v108[4])
        break;
      goto LABEL_191;
    case 249:
      if (v107)
      {
        v110 = v104 - 32 * (*(_DWORD *)(v104 + 20) & 0x7FFFFFF);
        if (*(_QWORD *)(v110 + 32) == *v108 && *(_QWORD *)(v110 + 64) == v108[4])
        {
LABEL_192:
          v112 = *(unsigned __int8 **)v110;
          if (*(_QWORD *)v110)
          {
            v113 = *(uint64_t **)(a1 + 24);
            v114 = *(_QWORD *)v102;
            LOWORD(v353) = 257;
            v115 = sub_1C506D6A8(v113, v112, v114, (uint64_t)&v350);
            if (*((_BYTE *)a2 + 16) == 84)
              v116 = llvm::CallInst::Create((uint64_t ***)a2, (uint64_t)v336, v337, 0);
            else
              v116 = (uint64_t)llvm::InvokeInst::Create((uint64_t ***)a2, (uint64_t)v336, v337, 0);
            v46 = (char *)v116;
            v290 = (unsigned __int8 **)(v116 - 32);
            if (*(_QWORD *)(v116 - 32))
            {
              **(_QWORD **)(v116 - 16) = *(_QWORD *)(v116 - 24);
              v291 = *(_QWORD *)(v116 - 24);
              if (v291)
                *(_QWORD *)(v291 + 16) = *(_QWORD *)(v116 - 16);
            }
            *v290 = v115;
            if (v115)
            {
              v294 = *((_QWORD *)v115 + 1);
              v293 = (unsigned __int8 ***)(v115 + 8);
              v292 = v294;
              *(_QWORD *)(v116 - 24) = v294;
              if (v294)
                *(_QWORD *)(v292 + 16) = v116 - 24;
              *(_QWORD *)(v116 - 16) = v293;
              *v293 = v290;
            }
            goto LABEL_196;
          }
        }
      }
      break;
  }
  v46 = 0;
LABEL_196:
  v117 = (uint64_t *)v336;
  if ((_DWORD)v337)
  {
    v118 = 6 * v337;
    do
    {
      v119 = &v117[v118];
      v120 = (void *)v117[v118 - 3];
      if (v120)
      {
        *(v119 - 2) = (uint64_t)v120;
        operator delete(v120);
      }
      if (*((char *)v119 - 25) < 0)
        operator delete((void *)*(v119 - 6));
      v118 -= 6;
    }
    while (v118 * 8);
    v117 = (uint64_t *)v336;
  }
  if (v117 != &v338)
    free(v117);
  if (v46)
    goto LABEL_92;
LABEL_207:
  v121 = (_QWORD *)a2[9];
  if (*((_DWORD *)v121 + 2) >= 0x100u)
  {
    v122 = *((_DWORD *)v121 + 3);
    v123 = (v122 - 1);
    v124 = *((_DWORD *)a2 + 5);
    v125 = v124 & 0x7FFFFFF;
    v126 = &a2[-4 * v125];
    v127 = *((unsigned __int8 *)a2 + 16);
    if (v127 == 84)
      v128 = 0;
    else
      v128 = v127 == 39 ? (*((_DWORD *)a2 + 20) + 1) : 2;
    v129 = &v126[4 * v123];
    if (v124 < 0 && (v303 = *(v126 - 1), (v303 & 0xFFFFFFFF0) != 0))
      v130 = (*((_DWORD *)v126 - 3) - *(_DWORD *)((char *)v126 - v303));
    else
      v130 = 0;
    if (v129 != &a2[-4 * v128 - 4 + -4 * v130])
    {
      v318 = a2 + 8;
      v131 = (32 * v128 + 32 * v130) ^ 0xFFFFFFFFFFFFFFE0;
      v132 = 32 * v123 - 32 * v125;
      while (1)
      {
        v133 = *(unsigned __int8 **)((char *)a2 + v132);
        v134 = v133[16];
        v135 = v133 && v134 >= 0x1C;
        if (v135 && v134 - 79 >= 0xFFFFFFF3 && v134 == 77)
        {
          v137 = *(_QWORD *)(a1 + 80);
          v138 = **((_QWORD **)v133 - 4);
          if (v138 == *(_QWORD *)v133 || *(_BYTE *)(v138 + 8) == 15 && *(_BYTE *)(*(_QWORD *)v133 + 8) == 15)
          {
            v139 = *v43;
            if ((!*v43 || *((_BYTE *)v139 + 16) || *((_QWORD *)v139 + 3) != a2[9] || *((_DWORD *)v139 + 9) != 124)
              && !sub_1C4E9AE24((uint64_t)a2)
              && !sub_1C5458950((uint64_t)a2))
            {
              v316 = v137;
              v140 = v122 - 1;
              v313 = **((_QWORD **)v133 - 4);
              if (!*(_QWORD *)(v313 + 24)
                || (llvm::CallBase::paramHasAttr((uint64_t)a2, v122 - 1, 69) & 1) == 0
                && (llvm::CallBase::paramHasAttr((uint64_t)a2, v122 - 1, 71) & 1) == 0
                && !llvm::CallBase::paramHasAttr((uint64_t)a2, v122 - 1, 72))
              {
                goto LABEL_246;
              }
              if (llvm::CallBase::paramHasAttr((uint64_t)a2, v122 - 1, 69))
                break;
            }
          }
        }
LABEL_250:
        ++v122;
        v132 += 32;
        if (v131 == v132)
          goto LABEL_267;
      }
      v314 = **(_QWORD **)(v313 + 16);
      v141 = sub_1C6199478((uint64_t)a2, v122 - 1);
      v142 = v314;
      v143 = *(unsigned __int8 *)(v314 + 8);
      v312 = v141;
      if (v143 > 0x11)
        goto LABEL_258;
      v144 = v141;
      if (((1 << v143) & 0xAC7F) != 0)
      {
LABEL_239:
        v145 = *(unsigned __int8 *)(v144 + 8);
        if (v145 > 0x11)
          goto LABEL_265;
        if (((1 << v145) & 0xAC7F) != 0)
        {
LABEL_241:
          v315 = sub_1C4E3D148(v316, v142);
          v311 = v146;
          v148 = v315 == sub_1C4E3D148(v316, v312) && v311 == v147;
          v140 = v122 - 1;
          if (v148)
          {
LABEL_246:
            sub_1C5788CC4((_QWORD *)a1, (uint64_t *)((char *)a2 + v132), *((_QWORD *)v133 - 4));
            v149 = **((_QWORD **)v133 - 4);
            if (*(_QWORD *)(v149 + 24) && llvm::CallBase::paramHasAttr((uint64_t)a2, v140, 69))
            {
              a2[8] = llvm::AttributeList::removeAttributeAtIndex(v318, *(uint64_t **)*a2, v122, 69);
              v150 = llvm::Attribute::get(*(uint64_t **)*a2, 69, **(_QWORD **)(v149 + 16));
              LODWORD(v336) = v140;
              a2[8] = llvm::AttributeList::addParamAttribute(v318, *(uint64_t **)*a2, &v336, 1, v150);
            }
            v320 = 1;
            goto LABEL_250;
          }
          goto LABEL_250;
        }
        v144 = v312;
        if (((1 << v145) & 0x30000) == 0)
        {
LABEL_265:
          if ((v145 & 0xFE) != 0x12 && v145 != 21)
            goto LABEL_250;
        }
        isSizedDerivedType = llvm::Type::isSizedDerivedType(v144, 0);
        v142 = v314;
        if (!isSizedDerivedType)
          goto LABEL_250;
        goto LABEL_241;
      }
      if (((1 << v143) & 0x30000) == 0)
      {
LABEL_258:
        if ((v143 & 0xFE) != 0x12 && v143 != 21)
          goto LABEL_250;
      }
      v151 = llvm::Type::isSizedDerivedType(v314, 0);
      v144 = v312;
      v142 = v314;
      if (!v151)
        goto LABEL_250;
      goto LABEL_239;
    }
  }
LABEL_267:
  if (*(_BYTE *)(v42 + 16) == 24)
  {
    v154 = (_QWORD *)a2[8];
    v155 = v320;
    if ((!v154 || (v154[2] & 0x20) == 0)
      && (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 37) & 1) == 0
      && !*(_BYTE *)(v42 + 88))
    {
      a2[8] = llvm::AttributeList::addAttributeAtIndex(a2 + 8, *(uint64_t **)*a2, -1, 37);
      v155 = 1;
    }
  }
  else
  {
    v155 = v320;
  }
  if (*((_BYTE *)a2 + 16) == 84)
  {
    v156 = *v43;
    if (*v43)
    {
      if (!*((_BYTE *)v156 + 16) && *((_QWORD *)v156 + 3) == a2[9] && (*((_WORD *)a2 + 9) & 2) == 0)
      {
        *(_QWORD *)&v350 = a1;
        v333 = (uint64_t *)a1;
        v157 = *(_QWORD *)(a1 + 80);
        v158 = *(_QWORD *)(a1 + 152);
        v336 = *(void **)(a1 + 64);
        LOBYTE(v337) = 0;
        v338 = v157;
        v339 = v336;
        v340 = *(_OWORD *)(a1 + 136);
        v341 = v158;
        v342 = 0;
        v343 = sub_1C57DCC04;
        v344 = &v350;
        v345 = sub_1C57DCC0C;
        v346 = &v333;
        v159 = (llvm::Value *)llvm::LibCallSimplifier::optimizeCall((llvm::LibCallSimplifier *)&v336, (llvm::CallInst *)a2, *(llvm::IRBuilderBase **)(a1 + 24));
        if (v159)
        {
          if (a2[1])
          {
            v94 = sub_1C577F888(a1, (llvm::ValueAsMetadata *)a2, v159);
            if (!v94)
              goto LABEL_282;
          }
          else
          {
            v94 = (llvm::UndefValue **)a2;
          }
          v93 = a1;
          goto LABEL_158;
        }
      }
    }
  }
LABEL_282:
  if (a2[1] && (*((_BYTE *)a2 + 16) != 84 || (*((_WORD *)a2 + 9) & 3) != 2))
  {
    LODWORD(v350) = 0;
    if (llvm::AttributeList::hasAttrSomewhere(a2 + 8, 46, (int *)&v350)
      || (v160 = *v43) != 0
      && !*((_BYTE *)v160 + 16)
      && *((_QWORD *)v160 + 3) == a2[9]
      && (v336 = (void *)*((_QWORD *)v160 + 14),
          llvm::AttributeList::hasAttrSomewhere((uint64_t *)&v336, 46, (int *)&v350)))
    {
      v298 = (unsigned __int8 *)a2[4 * (v350 - 1) + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
      if (v298)
      {
        v299 = (uint64_t **)*a2;
        if (llvm::Type::canLosslesslyBitCastTo(*(llvm::Type **)v298, (llvm::Type *)*a2))
        {
          v300 = *(uint64_t **)(a1 + 24);
          LOWORD(v340) = 257;
          v301 = sub_1C506D6A8(v300, v298, (uint64_t)v299, (uint64_t)&v336);
          v95 = (uint64_t)sub_1C577F888(a1, (llvm::ValueAsMetadata *)a2, (llvm::Value *)v301);
          goto LABEL_299;
        }
      }
    }
  }
  if (byte_1ED82E438)
    v161 = 59;
  else
    v161 = 63;
  sub_1C4EBF808((uint64_t)a2, v161, *(uint64_t **)(a1 + 64), &v336);
  if ((_BYTE)v339)
  {
    v162 = byte_1ED82E438 ? 43 : 47;
    sub_1C4EBF808((uint64_t)a2, v162, *(uint64_t **)(a1 + 64), &v336);
    if ((_BYTE)v339)
    {
      v95 = sub_1C57871C4((llvm::DataLayout **)a1, (uint64_t)a2);
      goto LABEL_299;
    }
  }
  v163 = *v43;
  if (!*v43 || *((_BYTE *)v163 + 16) || *((_QWORD *)v163 + 3) != a2[9] || *((_DWORD *)v163 + 9) != 124)
    goto LABEL_371;
  v336 = &v340;
  v337 = (uint64_t)&v340;
  v338 = 32;
  LODWORD(v339) = 0;
  sub_1C57D75E8((uint64_t)a2, &v333);
  v164 = (llvm::GCRelocateInst **)v333;
  v165 = v334;
  v321 = v155;
  if (v333 != v334)
  {
    while (1)
    {
      v203 = (uint64_t)*v164;
      if (!*((_QWORD *)*v164 + 1))
        goto LABEL_360;
      DerivedPtr = llvm::GCRelocateInst::getDerivedPtr(*v164);
      BasePtr = llvm::GCRelocateInst::getBasePtr((llvm::GCRelocateInst *)v203);
      v207 = *(unsigned __int8 *)(DerivedPtr + 16);
      if ((v207 - 11) < 2)
        break;
      v208 = BasePtr;
      if (*(unsigned __int8 *)(BasePtr + 16) - 11 <= 1)
        break;
      if (*(_QWORD *)v203)
        v166 = *(_BYTE *)(*(_QWORD *)v203 + 8) == 15;
      else
        v166 = 0;
      if (!v166)
        goto LABEL_310;
      if (v207 != 19)
      {
        if ((sub_1C4D91DD8(v203, 39) & 1) != 0)
          goto LABEL_310;
        v183 = a2;
        if (!a2[5])
        {
          if (*(unsigned __int8 *)(DerivedPtr + 16) < 0x1Cu
            || (v183 = (uint64_t *)DerivedPtr, !*(_QWORD *)(DerivedPtr + 40)))
          {
            v183 = 0;
          }
        }
        v184 = *(_QWORD *)(a1 + 56);
        v185 = *(_QWORD *)(a1 + 72);
        *(_QWORD *)&v350 = *(_QWORD *)(a1 + 80);
        *((_QWORD *)&v350 + 1) = v184;
        v351 = v183;
        v352 = v185;
        v353 = 0;
        v354 = 1;
        if (!sub_1C4F84D74(DerivedPtr, 0, (uint64_t)&v350)
          || (*(_QWORD *)(v203 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v203 + 64), **(uint64_t ***)v203, 0, 39), (v186 = *(_QWORD *)(v203 + 8)) == 0))
        {
LABEL_310:
          v167 = llvm::GCRelocateInst::getBasePtr((llvm::GCRelocateInst *)v203);
          if (v167 == llvm::GCRelocateInst::getDerivedPtr((llvm::GCRelocateInst *)v203))
          {
            v168 = v203 - 32 * (*(_DWORD *)(v203 + 20) & 0x7FFFFFF);
            v169 = *(_QWORD *)(v168 + 32);
            v170 = (unsigned int *)(v169 + 24);
            v171 = *(_DWORD *)(v169 + 32);
            v172 = v170;
            if (v171 >= 0x41)
              v172 = *(_DWORD **)v170;
            v173 = *(_QWORD *)(v168 + 64);
            v174 = (_QWORD *)(v173 + 24);
            if (*(_DWORD *)(v173 + 32) >= 0x41u)
              v174 = (_QWORD *)*v174;
            if (*v172 != *(_DWORD *)v174)
            {
              if (v171 >= 0x41)
                v170 = *(unsigned int **)v170;
              v175 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v173, *v170, 0);
              v176 = v203 - 32 * (*(_DWORD *)(v203 + 20) & 0x7FFFFFF);
              v177 = (llvm::Value ***)(v176 + 64);
              if (*(_QWORD *)(v176 + 64))
              {
                **(_QWORD **)(v176 + 80) = *(_QWORD *)(v176 + 72);
                v178 = *(_QWORD *)(v176 + 72);
                if (v178)
                  *(_QWORD *)(v178 + 16) = *(_QWORD *)(v176 + 80);
              }
              *v177 = v175;
              if (v175)
              {
                v181 = v175[1];
                v179 = (llvm::Value ****)(v175 + 1);
                v180 = v181;
                *(_QWORD *)(v176 + 72) = v181;
                if (v181)
                  *((_QWORD *)v180 + 2) = v176 + 72;
                *(_QWORD *)(v176 + 80) = v179;
                *v179 = v177;
              }
            }
          }
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v336, v208);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v336, DerivedPtr);
          goto LABEL_361;
        }
        v187 = *(_QWORD *)(a1 + 32);
        while (2)
        {
          v188 = *(_QWORD *)(v186 + 24);
          v189 = *(_DWORD *)(v187 + 8);
          *(_QWORD *)&v350 = v188;
          DWORD2(v350) = v189;
          v190 = *(_DWORD *)(v187 + 2080);
          if (v190)
          {
            v191 = *(_QWORD *)(v187 + 2064);
            v192 = v190 - 1;
            v193 = v192 & ((v188 >> 4) ^ (v188 >> 9));
            v194 = (_QWORD *)(v191 + 16 * v193);
            v195 = *v194;
            if (*v194 != v188)
            {
              v196 = 0;
              v197 = 1;
              while (v195 != -4096)
              {
                if (v196)
                  v198 = 0;
                else
                  v198 = v195 == -8192;
                if (v198)
                  v196 = v194;
                v199 = v193 + v197++;
                v193 = v199 & v192;
                v194 = (_QWORD *)(v191 + 16 * v193);
                v195 = *v194;
                if (*v194 == v188)
                  goto LABEL_350;
              }
              if (v196)
                v200 = v196;
              else
                v200 = v194;
LABEL_347:
              v201 = sub_1C4D8D8F4((_DWORD *)(v187 + 2064), (uint64_t)&v350, (uint64_t *)&v350, v200);
              *v201 = v350;
              *((_DWORD *)v201 + 2) = DWORD2(v350);
              v202 = *(unsigned int *)(v187 + 8);
              if (v202 >= *(unsigned int *)(v187 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v187, v187 + 16, v202 + 1, 8);
                v202 = *(unsigned int *)(v187 + 8);
              }
              *(_QWORD *)(*(_QWORD *)v187 + 8 * v202) = v188;
              ++*(_DWORD *)(v187 + 8);
            }
LABEL_350:
            v186 = *(_QWORD *)(v186 + 8);
            v155 = v321;
            if (!v186)
              goto LABEL_310;
            continue;
          }
          break;
        }
        v200 = 0;
        goto LABEL_347;
      }
      v182 = (llvm::Value *)llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)v203, v206);
      sub_1C577F888(a1, (llvm::ValueAsMetadata *)v203, v182);
      sub_1C57813F4(a1, v203);
LABEL_361:
      if (++v164 == (llvm::GCRelocateInst **)v165)
      {
        v164 = (llvm::GCRelocateInst **)v333;
        goto LABEL_363;
      }
    }
    v209 = llvm::UndefValue::get(*(llvm::UndefValue **)v203, v206);
    sub_1C577F888(a1, (llvm::ValueAsMetadata *)v203, v209);
LABEL_360:
    sub_1C57813F4(a1, v203);
    goto LABEL_361;
  }
LABEL_363:
  if (v164)
  {
    v334 = (uint64_t *)v164;
    operator delete(v164);
  }
  sub_1C5062CEC((uint64_t)a2, 5, (uint64_t)&v350);
  if (!(_BYTE)v352 || (v210 = HIDWORD(v338) - (_DWORD)v339, *((_QWORD *)&v350 + 1) == HIDWORD(v338) - (_DWORD)v339))
  {
    v46 = 0;
    v211 = 1;
    goto LABEL_368;
  }
  v212 = 0;
  v213 = 0;
  v333 = 0;
  v334 = 0;
  v335 = 0;
  v214 = DWORD2(v350);
  if (DWORD2(v350))
  {
    v254 = 0;
    v255 = 0;
    v213 = 0;
    v212 = 0;
    do
    {
      v331 = 0;
      v256 = *(uint64_t **)(v350 + 32 * v254);
      v331 = v256;
      if (v335)
      {
        v257 = ((v256 >> 4) ^ (v256 >> 9)) & (v335 - 1);
        v258 = v333[2 * v257];
        if (v256 == (uint64_t *)v258)
          goto LABEL_428;
        v259 = 1;
        while (v258 != -4096)
        {
          v260 = v257 + v259++;
          v257 = v260 & (v335 - 1);
          v258 = v333[2 * v257];
          if (v256 == (uint64_t *)v258)
            goto LABEL_428;
        }
      }
      v261 = sub_1C477672C((uint64_t)&v336, (uint64_t)v256);
      if ((void *)v337 == v336)
        v262 = (uint64_t *)((char *)&v338 + 4);
      else
        v262 = &v338;
      if (v261 == (_QWORD *)(v337 + 8 * *(unsigned int *)v262))
      {
        if (v335)
        {
          v272 = ((v331 >> 4) ^ (v331 >> 9)) & (v335 - 1);
          v273 = &v333[2 * v272];
          v274 = (uint64_t *)*v273;
          if (v331 != (uint64_t *)*v273)
          {
            v275 = 0;
            v276 = 1;
            while (v274 != (uint64_t *)-4096)
            {
              if (v275)
                v277 = 0;
              else
                v277 = v274 == (uint64_t *)-8192;
              if (v277)
                v275 = v273;
              v278 = v272 + v276++;
              v272 = v278 & (v335 - 1);
              v273 = &v333[2 * v272];
              v274 = (uint64_t *)*v273;
              if (v331 == (uint64_t *)*v273)
                goto LABEL_479;
            }
            if (v275)
              v283 = v275;
            else
              v283 = v273;
LABEL_478:
            v273 = sub_1C4E38190((uint64_t)&v333, (uint64_t)&v331, (uint64_t *)&v331, v283);
            *v273 = (uint64_t)v331;
            *((_DWORD *)v273 + 2) = 0;
          }
LABEL_479:
          *((_DWORD *)v273 + 2) = v210;
          goto LABEL_428;
        }
        v283 = 0;
        goto LABEL_478;
      }
      if (v335)
      {
        v263 = ((v331 >> 4) ^ (v331 >> 9)) & (v335 - 1);
        v264 = &v333[2 * v263];
        v265 = (uint64_t *)*v264;
        if (v331 == (uint64_t *)*v264)
          goto LABEL_453;
        v266 = 0;
        v267 = 1;
        while (v265 != (uint64_t *)-4096)
        {
          if (v266)
            v268 = 0;
          else
            v268 = v265 == (uint64_t *)-8192;
          if (v268)
            v266 = v264;
          v269 = v263 + v267++;
          v263 = v269 & (v335 - 1);
          v264 = &v333[2 * v263];
          v265 = (uint64_t *)*v264;
          if (v331 == (uint64_t *)*v264)
            goto LABEL_453;
        }
        if (v266)
          v270 = v266;
        else
          v270 = v264;
      }
      else
      {
        v270 = 0;
      }
      v264 = sub_1C4E38190((uint64_t)&v333, (uint64_t)&v331, (uint64_t *)&v331, v270);
      *v264 = (uint64_t)v331;
      *((_DWORD *)v264 + 2) = 0;
LABEL_453:
      v271 = v213 - v212;
      *((_DWORD *)v264 + 2) = (unint64_t)(v213 - v212) >> 3;
      if (v213 >= v255)
      {
        v279 = v271 >> 3;
        v280 = (v271 >> 3) + 1;
        if (v280 >> 61)
          goto LABEL_519;
        if ((v255 - v212) >> 2 > v280)
          v280 = (v255 - v212) >> 2;
        if ((unint64_t)(v255 - v212) >= 0x7FFFFFFFFFFFFFF8)
          v281 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v281 = v280;
        if (v281)
        {
          if (v281 >> 61)
            sub_1C4764EE4();
          v282 = (char *)operator new(8 * v281);
        }
        else
        {
          v282 = 0;
        }
        v284 = &v282[8 * v279];
        *(_QWORD *)v284 = v331;
        v285 = v284 + 8;
        if (v213 != v212)
        {
          do
          {
            v286 = *((_QWORD *)v213 - 1);
            v213 -= 8;
            *((_QWORD *)v284 - 1) = v286;
            v284 -= 8;
          }
          while (v213 != v212);
          v213 = v212;
        }
        v212 = v284;
        v255 = &v282[8 * v281];
        if (v213)
          operator delete(v213);
        v213 = v285;
        v155 = v321;
      }
      else
      {
        *(_QWORD *)v213 = v331;
        v213 += 8;
      }
LABEL_428:
      ++v254;
    }
    while (v254 != v214);
  }
  sub_1C57D75E8((uint64_t)a2, &v331);
  v215 = v331;
  v216 = v332;
  if (v331 == v332)
    goto LABEL_489;
  do
  {
    v217 = (llvm::GCRelocateInst *)*v215;
    v330 = 0;
    v218 = llvm::GCRelocateInst::getBasePtr(v217);
    v330 = v218;
    v219 = (llvm::ConstantInt *)*((_QWORD **)v217 - 4 * (*((_DWORD *)v217 + 5) & 0x7FFFFFF))[4];
    if (!v335)
    {
      v228 = 0;
LABEL_390:
      v222 = sub_1C4E38190((uint64_t)&v333, (uint64_t)&v330, &v330, v228);
      *v222 = v330;
      *((_DWORD *)v222 + 2) = 0;
      goto LABEL_391;
    }
    v220 = v335 - 1;
    v221 = (v335 - 1) & ((v218 >> 4) ^ (v218 >> 9));
    v222 = &v333[2 * v221];
    v223 = *v222;
    if (v218 != *v222)
    {
      v224 = 0;
      v225 = 1;
      while (v223 != -4096)
      {
        if (v224)
          v226 = 0;
        else
          v226 = v223 == -8192;
        if (v226)
          v224 = v222;
        v227 = v221 + v225++;
        v221 = v227 & v220;
        v222 = &v333[2 * (v227 & v220)];
        v223 = *v222;
        if (v218 == *v222)
          goto LABEL_391;
      }
      if (v224)
        v228 = v224;
      else
        v228 = v222;
      goto LABEL_390;
    }
LABEL_391:
    v229 = llvm::ConstantInt::get(v219, *((unsigned int *)v222 + 2), 0);
    v230 = (_DWORD *)((char *)v217 - 32 * (*((_DWORD *)v217 + 5) & 0x7FFFFFF));
    v231 = (llvm::Value ***)(v230 + 8);
    if (*((_QWORD *)v230 + 4))
    {
      **((_QWORD **)v230 + 6) = *((_QWORD *)v230 + 5);
      v232 = *((_QWORD *)v230 + 5);
      if (v232)
        *(_QWORD *)(v232 + 16) = *((_QWORD *)v230 + 6);
    }
    *v231 = v229;
    if (v229)
    {
      v235 = v229[1];
      v233 = (llvm::Value ****)(v229 + 1);
      v234 = v235;
      *((_QWORD *)v230 + 5) = v235;
      if (v235)
        *((_QWORD *)v234 + 2) = v230 + 10;
      *((_QWORD *)v230 + 6) = v233;
      *v233 = v231;
    }
    v329 = 0;
    v236 = llvm::GCRelocateInst::getDerivedPtr(v217);
    v329 = v236;
    v237 = (llvm::ConstantInt *)*((_QWORD **)v217 - 4 * (*((_DWORD *)v217 + 5) & 0x7FFFFFF))[8];
    if (!v335)
    {
      v246 = 0;
LABEL_412:
      v240 = sub_1C4E38190((uint64_t)&v333, (uint64_t)&v329, &v329, v246);
      *v240 = v329;
      *((_DWORD *)v240 + 2) = 0;
      goto LABEL_413;
    }
    v238 = v335 - 1;
    v239 = (v335 - 1) & ((v236 >> 4) ^ (v236 >> 9));
    v240 = &v333[2 * v239];
    v241 = *v240;
    if (v236 != *v240)
    {
      v242 = 0;
      v243 = 1;
      while (v241 != -4096)
      {
        if (v242)
          v244 = 0;
        else
          v244 = v241 == -8192;
        if (v244)
          v242 = v240;
        v245 = v239 + v243++;
        v239 = v245 & v238;
        v240 = &v333[2 * (v245 & v238)];
        v241 = *v240;
        if (v236 == *v240)
          goto LABEL_413;
      }
      if (v242)
        v246 = v242;
      else
        v246 = v240;
      goto LABEL_412;
    }
LABEL_413:
    v247 = llvm::ConstantInt::get(v237, *((unsigned int *)v240 + 2), 0);
    v248 = (_DWORD *)((char *)v217 - 32 * (*((_DWORD *)v217 + 5) & 0x7FFFFFF));
    v249 = (llvm::Value ***)(v248 + 16);
    if (*((_QWORD *)v248 + 8))
    {
      **((_QWORD **)v248 + 10) = *((_QWORD *)v248 + 9);
      v250 = *((_QWORD *)v248 + 9);
      if (v250)
        *(_QWORD *)(v250 + 16) = *((_QWORD *)v248 + 10);
    }
    *v249 = v247;
    if (v247)
    {
      v253 = v247[1];
      v251 = (llvm::Value ****)(v247 + 1);
      v252 = v253;
      *((_QWORD *)v248 + 9) = v253;
      if (v253)
        *((_QWORD *)v252 + 2) = v248 + 18;
      *((_QWORD *)v248 + 10) = v251;
      *v251 = v249;
    }
    ++v215;
  }
  while (v215 != v216);
  v215 = v331;
  v155 = v321;
LABEL_489:
  if (v215)
  {
    v332 = v215;
    operator delete(v215);
  }
  v287 = v213 - v212;
  if (v213 == v212)
  {
    v288 = 0;
    v289 = 0;
    goto LABEL_495;
  }
  if (v287 < 0)
LABEL_519:
    abort();
  v289 = operator new(v213 - v212);
  v288 = (uint64_t)v289 + 8 * (v287 >> 3);
  memmove(v289, v212, v287);
LABEL_495:
  *(_DWORD *)v323 = v328[0];
  *(_DWORD *)&v323[3] = *(_DWORD *)((char *)v328 + 3);
  v328[0] = 0;
  *(_DWORD *)((char *)v328 + 3) = 0;
  v322[0] = (void *)0x6576696C2D6367;
  v322[1] = 0;
  v324 = 7;
  v326 = 0;
  v327 = 0;
  __p = 0;
  sub_1C4DFE394(&__p, v289, v288, (v288 - (uint64_t)v289) >> 3);
  v46 = llvm::CallBase::Create((uint64_t)a2, v322, 0);
  if (__p)
  {
    v326 = __p;
    operator delete(__p);
  }
  if (v324 < 0)
    operator delete(v322[0]);
  if (v289)
    operator delete(v289);
  if (v212)
    operator delete(v212);
  MEMORY[0x1CAA32FB4](v333, 8);
  v211 = 0;
LABEL_368:
  if ((void *)v337 != v336)
    free((void *)v337);
  if (v211)
  {
LABEL_371:
    if ((v155 & 1) != 0)
      v46 = (char *)a2;
    else
      v46 = 0;
  }
LABEL_92:
  if (v347 != (_DWORD *)v349)
    free(v347);
  return v46;
}

BOOL sub_1C57D4B74(llvm::AssumptionCache *a1, void **a2, llvm::Instruction *a3, const llvm::DataLayout *a4)
{
  int v4;
  int v5;
  llvm::AssumptionCache *v6;
  llvm **v7;

  v4 = *((unsigned __int8 *)a1 + 16);
  if ((v4 - 41) > 0x11)
    return 0;
  v5 = *((_DWORD *)a1 + 5);
  v6 = (v5 & 0x40000000) != 0
     ? (llvm::AssumptionCache *)*((_QWORD *)a1 - 1)
     : (llvm::AssumptionCache *)((char *)a1 - 32 * (v5 & 0x7FFFFFF));
  if (*(_BYTE *)(*((_QWORD *)v6 + 4) + 16) != 16)
    return 0;
  if (v4 == 41)
    return 1;
  if (v4 != 57)
    return 0;
  if ((v5 & 0x40000000) != 0)
    v7 = (llvm **)*((_QWORD *)a1 - 1);
  else
    v7 = (llvm **)((char *)a1 - 32 * (v5 & 0x7FFFFFF));
  return llvm::haveNoCommonBitsSet(*v7, v7[4], a2, a4, a1, a3, (const llvm::DominatorTree *)1);
}

llvm::Value *sub_1C57D4BFC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t *v15;
  uint64_t BinaryIntrinsic;
  _QWORD *v18[4];
  __int16 v19;
  uint64_t *v20;

  v3 = *a1;
  v18[0] = &v20;
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
    return 0;
  if (*(_QWORD *)(v4 + 8))
    return 0;
  v20 = 0;
  if (!sub_1C4D9EC28(v18, 30, a2))
    return 0;
  v7 = v20[1];
  v8 = v7 && *(_QWORD *)(v7 + 8) == 0;
  if ((sub_1C579CB78((uint64_t)v20, v8) & 1) != 0)
    return 0;
  v9 = *(_QWORD *)(a3 + 8);
  v10 = v9 && *(_QWORD *)(v9 + 8) == 0;
  if (!sub_1C579CB78(a3, v10))
    return 0;
  v11 = *(_QWORD *)(v3 + 24);
  v19 = 257;
  v12 = sub_1C506EAA0(v11, a3, (uint64_t)v18);
  v13 = *(_DWORD *)a1[1];
  switch(v13)
  {
    case 306:
      v14 = 305;
      break;
    case 274:
      v14 = 275;
      break;
    case 275:
      v14 = 274;
      break;
    default:
      v14 = 306;
      break;
  }
  v15 = *(uint64_t **)(v3 + 24);
  v19 = 257;
  BinaryIntrinsic = llvm::IRBuilderBase::CreateBinaryIntrinsic(v15, v14, v20, v12, 0, (uint64_t)v18);
  v19 = 257;
  return llvm::BinaryOperator::CreateNot(BinaryIntrinsic, (llvm::Type *)v18, 0);
}

void sub_1C57D4D3C(unsigned int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char v3;
  uint64_t v5;
  unsigned int v6;

  v3 = a2;
  if (a2)
  {
    v6 = a1;
    if (a1 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v5, 0, 0);
    else
      v5 = 0;
  }
  else
  {
    sub_1C4DE965C(a1, (llvm::APInt *)&v5);
  }
  *(_DWORD *)(a3 + 8) = v6;
  *(_QWORD *)a3 = v5;
  *(_BYTE *)(a3 + 12) = v3;
}

void sub_1C57D4DAC(unsigned int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char v3;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;

  v3 = a2;
  if (a2)
  {
    v7 = a1;
    if (a1 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v6, -1, 1);
    }
    else
    {
      v5 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a1;
      if (!a1)
        v5 = 0;
      v6 = v5;
    }
  }
  else
  {
    sub_1C4E3B6CC(a1, (llvm::APInt *)&v6);
  }
  *(_DWORD *)(a3 + 8) = v7;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 12) = v3;
}

BOOL sub_1C57D4E30(uint64_t a1)
{
  void **v2;
  void *v3;
  int v4;
  int v5;
  _BOOL8 v6;
  const llvm::APInt *v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  const llvm::APInt *v15;
  uint64_t v16;
  int v17;
  char v18;
  _BYTE v19[8];
  uint64_t v20;
  const llvm::APInt *v21;
  int v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  LODWORD(v9) = 32;
  v8 = 0;
  llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v14, &v8);
  v20 = v14;
  v21 = v15;
  v22 = v16;
  v23 = BYTE4(v16) & 0xF;
  v13 = 32;
  v12 = 1065353216;
  llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v8, (const llvm::APInt **)&v12);
  v15 = v8;
  v16 = v9;
  v17 = v10;
  v18 = v11 & 0xF;
  v3 = *(void **)(a1 + 32);
  v2 = (void **)(a1 + 32);
  llvm::APFloat::convert((uint64_t)v19, v3, 1, &v8);
  llvm::APFloat::convert((uint64_t)&v14, *v2, 1, &v8);
  if (*v2 == &unk_1C866F1C0)
    v4 = llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)v2, (const llvm::detail::DoubleAPFloat *)&v20);
  else
    llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)v2, (const llvm::detail::IEEEFloat *)&v20);
  if (v4 == 2)
  {
    if (*v2 == &unk_1C866F1C0)
      v5 = llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)v2, (const llvm::detail::DoubleAPFloat *)&v15);
    else
      llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)v2, (const llvm::detail::IEEEFloat *)&v15);
    v6 = v5 != 2;
  }
  else
  {
    v6 = 0;
  }
  if (v15 == (const llvm::APInt *)&unk_1C866F1C0)
  {
    sub_1C4773C74(&v16);
  }
  else if ((*((_DWORD *)v15 + 2) - 64) <= 0xFFFFFF7F && v16)
  {
    MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
  }
  if ((_UNKNOWN *)v20 == &unk_1C866F1C0)
  {
    sub_1C4773C74((uint64_t *)&v21);
  }
  else if ((*(_DWORD *)(v20 + 8) - 64) <= 0xFFFFFF7F && v21)
  {
    MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
  }
  return v6;
}

uint64_t sub_1C57D5028(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v3;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;

  if (a2 > 6)
    return 0;
  LODWORD(v3) = a2;
  while (1)
  {
    v5 = *(unsigned __int8 *)(a1 + 16);
    if (a1)
    {
      if (v5 == 17)
        break;
    }
    if (v5 == 85)
    {
      v3 = (v3 + 1);
      result = sub_1C57D5028(*(_QWORD *)(a1 - 64), v3);
      if (!(_DWORD)result)
        return result;
      v8 = (uint64_t *)(a1 - 32);
    }
    else
    {
      if (v5 != 84)
        return 0;
      v6 = *(_QWORD *)(a1 - 32);
      if (!v6
        || *(_BYTE *)(v6 + 16)
        || *(_QWORD *)(v6 + 24) != *(_QWORD *)(a1 + 72)
        || (*(_BYTE *)(v6 + 33) & 0x20) == 0)
      {
        return 0;
      }
      v7 = *(_DWORD *)(v6 + 36);
      if (v7 != 1847)
        return v7 == 1851;
      v8 = (uint64_t *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32);
      LODWORD(v3) = v3 + 1;
    }
    a1 = *v8;
    if (v3 > 6)
      return 0;
  }
  if (*(_UNKNOWN **)(a1 + 32) == &unk_1C866F1C0)
    v9 = *(_QWORD *)(a1 + 40);
  else
    v9 = a1 + 24;
  return (*(_BYTE *)(v9 + 28) & 7) != 1;
}

uint64_t sub_1C57D5134(uint64_t a1, llvm::Instruction *this)
{
  const llvm::Instruction *NextNonDebugInstruction;
  const llvm::Instruction *v5;
  unsigned int v6;
  BOOL v7;
  _QWORD *PrevNonDebugInstruction;
  unsigned int v9;
  BOOL v10;

  NextNonDebugInstruction = (const llvm::Instruction *)llvm::Instruction::getNextNonDebugInstruction(this, 0);
  if (NextNonDebugInstruction)
  {
    v5 = NextNonDebugInstruction;
    if (*((_BYTE *)NextNonDebugInstruction + 16) == 63)
    {
      if (llvm::Instruction::isIdenticalToWhenDefined(this, NextNonDebugInstruction)
        && (*((unsigned __int8 *)v5 + 17) ^ *((unsigned __int8 *)this + 17)) < 2)
      {
        return sub_1C57813F4(a1, (uint64_t)this);
      }
      v6 = *((unsigned __int8 *)v5 + 60);
      v7 = v6 <= 1 && v6 == *((unsigned __int8 *)this + 60);
      if (v7 && byte_1C646D8E0[8 * (*((_WORD *)v5 + 9) & 7) + (*((_WORD *)this + 9) & 7)])
        return sub_1C57813F4(a1, (uint64_t)this);
    }
  }
  if ((PrevNonDebugInstruction = llvm::Instruction::getPrevNonDebugInstruction(this, 0)) != 0
    && *((_BYTE *)PrevNonDebugInstruction + 16) == 63
    && ((v9 = *((unsigned __int8 *)PrevNonDebugInstruction + 60), v9 <= 1)
      ? (v10 = v9 == *((unsigned __int8 *)this + 60))
      : (v10 = 0),
        v10 && byte_1C646D8E0[8 * (*((_WORD *)PrevNonDebugInstruction + 9) & 7) + (*((_WORD *)this + 9) & 7)]))
  {
    return sub_1C57813F4(a1, (uint64_t)this);
  }
  else
  {
    return 0;
  }
}

void sub_1C57D5248(uint64_t a1, _OWORD *a2)
{
  unsigned int v4;
  uint64_t v5;
  _OWORD *v6;
  int v7;
  char *v8;
  char *v9;
  _OWORD *v10;
  int v11;
  unint64_t v12;

  v4 = *(_DWORD *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v12 = 0;
    v8 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 48, &v12);
    v9 = &v8[48 * *(unsigned int *)(a1 + 8)];
    *(_QWORD *)v9 = 0x68747561727470;
    v9[23] = 7;
    *((_QWORD *)v9 + 4) = 0;
    *((_QWORD *)v9 + 5) = 0;
    v10 = operator new(0x10uLL);
    *((_QWORD *)v9 + 3) = v10;
    *((_QWORD *)v9 + 4) = v10;
    *((_QWORD *)v9 + 5) = v10 + 1;
    *v10 = *a2;
    *((_QWORD *)v9 + 4) = v10 + 1;
    sub_1C4FCE92C((uint64_t *)a1, (uint64_t)v8);
    v11 = v12;
    if (*(_QWORD *)a1 != a1 + 16)
      free(*(void **)a1);
    *(_QWORD *)a1 = v8;
    v7 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 12) = v11;
  }
  else
  {
    v5 = *(_QWORD *)a1 + 48 * v4;
    *(_QWORD *)v5 = 0x68747561727470;
    *(_BYTE *)(v5 + 23) = 7;
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 40) = 0;
    v6 = operator new(0x10uLL);
    *(_QWORD *)(v5 + 24) = v6;
    *(_QWORD *)(v5 + 32) = v6;
    *(_QWORD *)(v5 + 40) = v6 + 1;
    *v6 = *a2;
    *(_QWORD *)(v5 + 32) = v6 + 1;
    v7 = *(_DWORD *)(a1 + 8) + 1;
  }
  *(_DWORD *)(a1 + 8) = v7;
}

uint64_t sub_1C57D5374(uint64_t a1, llvm::CastInst **a2)
{
  llvm::CastInst **v4;
  llvm::Value *v5;
  const llvm::Value *v6;
  char *v7;
  const llvm::DataLayout *v8;
  void *v9;
  uint64_t v10;
  llvm::Value *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned __int8 v21;
  unint64_t v22;
  unsigned int v23;
  int i;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  int v29;
  uint64_t v30;
  llvm::Value *v31;
  llvm::CastInst **v32;
  llvm::CastInst *v33;
  llvm::CastInst *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  llvm::CastInst *v38;
  BOOL v39;
  uint64_t v40;
  llvm::CastInst *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  llvm::CastInst *v54;
  char *v55;
  char *v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  _BOOL4 v75;
  llvm::CastInst *v76;
  _BOOL4 v77;
  unint64_t v78;
  unsigned int v79;
  char *v80;
  char *v81;
  llvm::Type *v82;
  llvm::CastInst **v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 *v86;
  uint64_t *v87;
  uint64_t v88;
  void *v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t Sorted;
  uint64_t v100;
  int v101;
  llvm::Value **NullValue;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  unint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  unsigned int *v117;
  uint64_t v118;
  llvm::CastInst **v119;
  void *v120;
  uint64_t v121;
  __int32 *v122;
  __int32 *v123;
  int v124;
  int v125;
  llvm::Value *v126;
  llvm::CastInst **v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t **v130;
  uint64_t BitOrPointerCast;
  llvm::Type *v132;
  llvm::Value *v133;
  llvm::Instruction *v134;
  void *v135;
  uint64_t v136;
  BOOL v137;
  uint64_t v138;
  uint64_t CastOpcode;
  uint64_t *v140;
  llvm::CastInst *v141;
  unsigned __int8 *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _BOOL4 v148;
  char *v149;
  uint64_t v150;
  char *v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unsigned __int8 *v159;
  unsigned __int8 **v160;
  unsigned __int8 *v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  _QWORD *j;
  _QWORD *v167;
  llvm::CastInst *v168;
  _QWORD *v169;
  unsigned int v170;
  BOOL v171;
  uint64_t v172;
  uint64_t v174;
  llvm::CastInst *v175;
  uint64_t v176;
  void *v177;
  int v178;
  int v179;
  uint64_t v180;
  int v181;
  unsigned int v182;
  _QWORD *v183;
  void *v184;
  _QWORD *v185;
  int v186;
  BOOL v187;
  unsigned int v188;
  _QWORD *v189;
  _QWORD *v190;
  unint64_t v191;
  unint64_t v192;
  llvm::CastInst **v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  llvm::CastInst **v199;
  unsigned int *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int v205[2];
  llvm::CastInst **v206;
  llvm::Value *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  int v212[2];
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  unsigned __int8 *v216;
  char v217[32];
  __int16 v218;
  uint64_t v219;
  __int32 __s[2];
  __int16 v221;
  void *v222;
  void *v223;
  uint64_t v224;
  _QWORD *v225;
  __int16 v226;
  void *v227;
  uint64_t v228;
  _QWORD *v229[6];
  char *v230;
  void *v231;
  uint64_t v232;
  _QWORD *v233[8];
  void *__src;
  size_t __n;
  _BYTE v236[64];
  uint64_t *v237;
  uint64_t v238;
  _QWORD v239[10];

  v239[8] = *MEMORY[0x1E0C80C00];
  v4 = a2 - 4;
  v5 = llvm::Value::stripPointerCasts(*(a2 - 4));
  v7 = llvm::GlobalPtrAuthInfo::analyze((uint64_t ***)v5, v6);
  v230 = v7;
  v231 = v9;
  v10 = v9;
  if ((_BYTE)v9)
  {
    v11 = llvm::Value::stripPointerCasts(*(llvm::Value **)(*((_QWORD *)v7 - 4)
                                                         - 32 * (*(_DWORD *)(*((_QWORD *)v7 - 4) + 20) & 0x7FFFFFF)));
    if (*((_BYTE *)v11 + 16))
      return 0;
    v5 = v11;
    sub_1C5500AF4(a2, "ptrauth", 7uLL, &v222);
    if (!(_BYTE)v225
      || (llvm::GlobalPtrAuthInfo::isCompatibleWith((llvm::GlobalPtrAuthInfo *)&v230, *(const llvm::Value **)v222, *((const llvm::Value **)v222 + 4), *(const llvm::DataLayout **)(a1 + 80), v12, v13, v14) & 1) == 0)
    {
      return 0;
    }
  }
  if (!v5 || *((_BYTE *)v5 + 16) != 0)
    return 0;
  v214 = a1;
  v17 = *((_QWORD *)v5 + 14);
  if (v17)
  {
    if (*(_DWORD *)(v17 + 8))
    {
      v18 = *(_QWORD *)(v17 + 40);
      if (v18)
      {
        v19 = *(_DWORD *)(v18 + 40);
        if (v19)
        {
          v20 = *(_QWORD *)(v18 + 24);
          v21 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
          if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
          {
            v192 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override)
              v192 = 0xFF51AFD7ED558CCDLL;
            qword_1ED7EAC80 = v192;
            __cxa_guard_release(&qword_1ED7EAC88);
          }
          v22 = 0x9DDFEA08EB382D69
              * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0x318C536CDLL)) ^ ((0x9DDFEA08EB382D69
                                                                              * (qword_1ED7EAC80 ^ 0x318C536CDLL)) >> 47) ^ qword_1ED7EAC80 ^ 0x6B6E7568);
          v23 = -348639895 * ((v22 >> 47) ^ v22);
          for (i = 1; ; ++i)
          {
            v25 = v23 & (v19 - 1);
            v26 = (uint64_t *)(v20 + 24 * v25);
            v27 = *v26;
            if (*v26 == -1)
            {
              if ("thunk" == (char *)-1)
                return 0;
            }
            else if (v27 == -2)
            {
              if ("thunk" == (char *)-2)
                return 0;
            }
            else if (v26[1] == 5 && *(_DWORD *)v27 == 1853188212 && *(_BYTE *)(v27 + 4) == 107)
            {
              return 0;
            }
            if (v27 == -1)
              break;
            v23 = i + v25;
          }
        }
      }
    }
  }
  v29 = *((unsigned __int8 *)a2 + 16);
  if (v29 == 84 && (*((_WORD *)a2 + 9) & 3) == 2)
    return 0;
  v215 = (uint64_t)a2[8];
  v219 = v215;
  v30 = *((_QWORD *)v5 + 3);
  v31 = *a2;
  v32 = *(llvm::CastInst ***)(v30 + 16);
  v33 = *v32;
  if (*a2 != *v32)
  {
    if (*((_BYTE *)v33 + 8) == 16)
      return 0;
    if (llvm::CastInst::isBitOrNoopPointerCastable(v33, *a2, *(__int32 ***)(v214 + 80), v8))
    {
      v34 = a2[1];
      v35 = v215;
    }
    else
    {
      v35 = v215;
      if (*((_BYTE *)v5 + 16))
      {
        if (*((_BYTE *)v5 + 16) == 3 && (*((_DWORD *)v5 + 5) & 0x7FFFFFF) == 0)
          return 0;
      }
      else if (*((llvm::Value **)v5 + 9) == (llvm::Value *)((char *)v5 + 72) && (*((_BYTE *)v5 + 34) & 0x80) == 0)
      {
        return 0;
      }
      v34 = a2[1];
      if (!v34)
      {
        v29 = *((unsigned __int8 *)a2 + 16);
        goto LABEL_63;
      }
      if (*((_BYTE *)v33 + 8) != 7)
        return 0;
    }
    if (v35 && v34)
    {
      if (*(_DWORD *)(v35 + 8) > 1u)
      {
        v147 = *(_QWORD *)(v35 + 48);
        v222 = *(void **)v30;
        v223 = &v225;
        v224 = 0x800000000;
        if (v147)
        {
          v36 = (char *)(v147 + 48);
          v37 = (char *)(v147 + 48 + 8 * *(unsigned int *)(v147 + 8));
        }
        else
        {
          v36 = 0;
          v37 = 0;
        }
      }
      else
      {
        v36 = 0;
        v37 = 0;
        v222 = *(void **)v30;
        v223 = &v225;
        v224 = 0x800000000;
      }
      sub_1C53321EC((unsigned int *)&v223, (uint64_t)&v225, v36, v37);
      v38 = v33;
      llvm::AttributeFuncs::typeIncompatible((uint64_t)v33, 3, (uint64_t *)&v230);
      v39 = llvm::AttrBuilder::overlaps((uint64_t)&v222, (uint64_t)&v230);
      sub_1C5010E9C((uint64_t)&v232, v233[0]);
      if (v223 != &v225)
        free(v223);
      if (v39)
        return 0;
      v34 = a2[1];
      v33 = v38;
    }
    v29 = *((unsigned __int8 *)a2 + 16);
    if (v34)
    {
      if (v29 == 39)
        return 0;
      if (v29 == 33)
      {
        while (1)
        {
          v40 = *((_QWORD *)v34 + 3);
          if (v40)
          {
            if (*(_BYTE *)(v40 + 16) == 83)
            {
              v41 = *(llvm::CastInst **)(v40 + 40);
              if (v41 == *(a2 - 12) || v41 == *(a2 - 8))
                return 0;
            }
          }
          v34 = (llvm::CastInst *)*((_QWORD *)v34 + 1);
          if (!v34)
            goto LABEL_61;
        }
      }
    }
  }
LABEL_63:
  if (v29 == 84)
  {
    v42 = 0;
  }
  else if (v29 == 39)
  {
    v42 = (*((_DWORD *)a2 + 20) + 1);
  }
  else
  {
LABEL_61:
    v42 = 2;
  }
  v43 = *((_DWORD *)a2 + 5);
  v210 = v10;
  if (v43 < 0 && (v193 = &a2[-4 * (v43 & 0x7FFFFFF)], v194 = (uint64_t)*(v193 - 1), (v194 & 0xFFFFFFFF0) != 0))
  {
    v45 = -(uint64_t)(v43 & 0x7FFFFFF);
    v44 = (*((_DWORD *)v193 - 3) - *(_DWORD *)((char *)v193 - v194));
  }
  else
  {
    v44 = 0;
    v45 = -(uint64_t)(v43 & 0x7FFFFFF);
  }
  v46 = v215;
  v47 = -32 * v42 - 32 * v44 - 32 * v45 - 32;
  v48 = *(_DWORD *)(v30 + 12) - 1;
  if (v48 >= (v47 >> 5))
    v49 = (v47 >> 5);
  else
    v49 = v48;
  v50 = *((_QWORD *)v5 + 14);
  if (v50 && (*(char *)(v50 + 32) < 0 || (*(_BYTE *)(v50 + 33) & 1) != 0))
    return 0;
  *(_QWORD *)v205 = v47;
  v206 = v4;
  v211 = v47 >> 5;
  v209 = (uint64_t)v33;
  v207 = v31;
  if ((_DWORD)v49)
  {
    v51 = 0;
    v208 = v215 + 40;
    v52 = 4 * v45;
    while (1)
    {
      v53 = *(_QWORD *)(*(_QWORD *)(v30 + 16) + 8 * v51 + 8);
      v54 = *(llvm::CastInst **)a2[v52];
      result = llvm::CastInst::isBitOrNoopPointerCastable(v54, (llvm::Type *)v53, *(__int32 ***)(v214 + 80), v8);
      if (!(_DWORD)result)
        return result;
      if (v215 && (v51 + 2) < *(_DWORD *)(v215 + 8))
      {
        v58 = *(_QWORD *)(v208 + 8 * (v51 + 2));
        v222 = *(void **)v30;
        v223 = &v225;
        v224 = 0x800000000;
        if (v58)
        {
          v55 = (char *)(v58 + 48);
          v56 = (char *)(v58 + 48 + 8 * *(unsigned int *)(v58 + 8));
        }
        else
        {
          v55 = 0;
          v56 = 0;
        }
      }
      else
      {
        v55 = 0;
        v56 = 0;
        v222 = *(void **)v30;
        v223 = &v225;
        v224 = 0x800000000;
      }
      sub_1C53321EC((unsigned int *)&v223, (uint64_t)&v225, v55, v56);
      llvm::AttributeFuncs::typeIncompatible(v53, 2, (uint64_t *)&v230);
      v57 = llvm::AttrBuilder::overlaps((uint64_t)&v222, (uint64_t)&v230);
      sub_1C5010E9C((uint64_t)&v232, v233[0]);
      if (v223 != &v225)
        free(v223);
      if (v57 || (llvm::CallBase::paramHasAttr((uint64_t)a2, v51, 71) & 1) != 0)
        return 0;
      v46 = v215;
      if (v215 && (v51 + 2) < *(_DWORD *)(v215 + 8))
      {
        v59 = *(_QWORD *)(v208 + 8 * (v51 + 2));
        if (v59 && (*(_BYTE *)(v59 + 21) & 1) != 0)
          return 0;
        v60 = (v51 + 2);
        v61 = *(_QWORD *)(v208 + 8 * v60);
        if (v61)
        {
          if (*(char *)(v61 + 19) < 0)
            return 0;
        }
        if ((llvm::CastInst *)v53 != v54)
        {
          v62 = *(_QWORD *)(v208 + 8 * v60);
          if (v62)
          {
            if ((*(_BYTE *)(v62 + 20) & 0x20) != 0)
            {
              result = 0;
              if (!v53 || *(_BYTE *)(v53 + 8) != 15)
                return result;
              if (*(_QWORD *)(v53 + 24))
                break;
            }
          }
        }
      }
LABEL_85:
      ++v51;
      v52 += 4;
      if (v49 == v51)
        goto LABEL_112;
    }
    v63 = **(_QWORD **)(v53 + 16);
    v64 = *(unsigned __int8 *)(v63 + 8);
    if (v64 <= 0x11)
    {
      if (((1 << v64) & 0x30000) != 0)
      {
LABEL_108:
        result = llvm::Type::isSizedDerivedType(**(_QWORD **)(v53 + 16), 0);
        if (!(_DWORD)result)
          return result;
LABEL_109:
        v66 = sub_1C6199478((uint64_t)a2, v51);
        v204 = sub_1C4E3D148(*(_QWORD *)(v214 + 80), v66);
        v68 = v67;
        v70 = sub_1C4E3D148(*(_QWORD *)(v214 + 80), v63);
        result = 0;
        if (v204 != v70)
          return result;
        v46 = v215;
        if (v68 != v69)
          return result;
        goto LABEL_85;
      }
      if (((1 << v64) & 0xAC7F) != 0)
        goto LABEL_109;
    }
    if ((v64 & 0xFE) != 0x12 && v64 != 21)
      return 0;
    goto LABEL_108;
  }
LABEL_112:
  if (*((_BYTE *)v5 + 16))
  {
    v71 = v211;
    if (*((_BYTE *)v5 + 16) == 3)
    {
      v72 = *(_DWORD *)(v30 + 12);
      v73 = v72 - 1;
      if ((*((_DWORD *)v5 + 5) & 0x7FFFFFF) != 0)
        goto LABEL_124;
      goto LABEL_118;
    }
    v72 = *(_DWORD *)(v30 + 12);
LABEL_123:
    v73 = v72 - 1;
    goto LABEL_124;
  }
  v72 = *(_DWORD *)(v30 + 12);
  v71 = v211;
  if (*((llvm::Value **)v5 + 9) != (llvm::Value *)((char *)v5 + 72))
    goto LABEL_123;
  v73 = v72 - 1;
  if ((*((_BYTE *)v5 + 34) & 0x80) != 0)
    goto LABEL_124;
LABEL_118:
  v74 = *(_DWORD *)(v30 + 8);
  v75 = v74 > 0xFF;
  if (v73 >= v71)
  {
    v148 = v74 > 0xFF;
    v76 = a2[9];
    v77 = *((_DWORD *)v76 + 2) > 0xFFu;
    if (((v148 ^ v77) & 1) != 0)
      return 0;
  }
  else
  {
    if (v74 < 0x100)
      return 0;
    v76 = a2[9];
    if (*((_DWORD *)v76 + 2) <= 0xFFu)
      return 0;
    v77 = 1;
    v75 = 1;
  }
  if (v77 && v75)
  {
    v46 = v215;
    if (v72 != *((_DWORD *)v76 + 3))
      return 0;
  }
  else
  {
    v46 = v215;
  }
LABEL_124:
  if (v73 >= v71 || *(_DWORD *)(v30 + 8) < 0x100u || !v46)
    goto LABEL_130;
  LODWORD(v222) = 0;
  if (llvm::AttributeList::hasAttrSomewhere(&v219, 73, (int *)&v222)
    && (int)v222 - 1 >= (*(_DWORD *)(v30 + 12) - 1))
  {
    return 0;
  }
  v46 = v215;
LABEL_130:
  v237 = v239;
  v238 = 0x800000000;
  __src = v236;
  __n = 0x800000000;
  v78 = (*(_QWORD *)v205 >> 5);
  if (v78 < 9)
  {
    v79 = 8;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v237, (uint64_t)v239, (*(_QWORD *)v205 >> 5), 8);
    v46 = v215;
    v79 = HIDWORD(__n);
  }
  if (v78 > v79)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v236, v78, 8);
    v46 = v215;
  }
  if (v46 && *(_DWORD *)(v46 + 8) > 1u)
  {
    v146 = *(_QWORD *)(v46 + 48);
    v230 = *(char **)v30;
    v231 = v233;
    v232 = 0x800000000;
    if (v146)
    {
      v80 = (char *)(v146 + 48);
      v81 = (char *)(v146 + 48 + 8 * *(unsigned int *)(v146 + 8));
    }
    else
    {
      v80 = 0;
      v81 = 0;
    }
  }
  else
  {
    v80 = 0;
    v81 = 0;
    v230 = *(char **)v30;
    v231 = v233;
    v232 = 0x800000000;
  }
  sub_1C53321EC((unsigned int *)&v231, (uint64_t)v233, v80, v81);
  llvm::AttributeFuncs::typeIncompatible(v209, 3, (uint64_t *)&v222);
  llvm::AttrBuilder::remove((uint64_t)&v230, (uint64_t)&v222);
  sub_1C5010E9C((uint64_t)&v224, v225);
  v213 = *(uint64_t **)*a2;
  v83 = &a2[-4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)];
  if ((_DWORD)v49)
  {
    v84 = 0;
    *(_QWORD *)v212 = v215 + 40;
    while (1)
    {
      v85 = *(_QWORD *)(*(_QWORD *)(v30 + 16) + 8 * v84 + 8);
      v86 = (unsigned __int8 *)*v83;
      if (*(_QWORD *)*v83 != v85)
      {
        v87 = *(uint64_t **)(v214 + 24);
        v226 = 257;
        v86 = sub_1C506D6A8(v87, v86, v85, (uint64_t)&v222);
      }
      v88 = v238;
      if (v238 >= (unint64_t)HIDWORD(v238))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v237, (uint64_t)v239, v238 + 1, 8);
        v88 = v238;
      }
      v237[v88] = (uint64_t)v86;
      LODWORD(v238) = v238 + 1;
      llvm::AttributeFuncs::typeIncompatible(v85, 1, (uint64_t *)&v227);
      v89 = (void *)v215;
      if (!v215)
        goto LABEL_149;
      v90 = *(_DWORD *)(v215 + 8);
      if ((int)v84 + 2 >= v90)
        break;
      v93 = *(_QWORD *)(*(_QWORD *)v212 + 8 * (v84 + 2));
      if (!v93 || (*(_BYTE *)(v93 + 20) & 0x20) == 0)
        break;
      v94 = v85 && *(_BYTE *)(v85 + 8) == 15;
      if (v94 && !*(_QWORD *)(v85 + 24))
        break;
      if ((int)v84 + 2 < v90)
        v95 = *(_QWORD *)(*(_QWORD *)v212 + 8 * (v84 + 2));
      else
        v95 = 0;
      *(_QWORD *)__s = v95;
      v96 = llvm::AttributeSet::removeAttributes((uint64_t *)__s, v213, (uint64_t)&v227);
      v222 = v213;
      v223 = &v225;
      v224 = 0x800000000;
      if (v96)
      {
        v97 = (char *)(v96 + 48);
        v98 = (char *)(v96 + 48 + 8 * *(unsigned int *)(v96 + 8));
      }
      else
      {
        v97 = 0;
        v98 = 0;
      }
      sub_1C53321EC((unsigned int *)&v223, (uint64_t)&v225, v97, v98);
      llvm::AttrBuilder::addByValAttr((uint64_t **)&v222, **(llvm::Type ***)(v85 + 16));
      Sorted = llvm::AttributeSetNode::getSorted(v213, (uint64_t *)v223, v224);
      v100 = __n;
      if (__n >= (unint64_t)HIDWORD(__n))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v236, __n + 1, 8);
        v100 = __n;
      }
      *((_QWORD *)__src + v100) = Sorted;
      LODWORD(__n) = __n + 1;
      if (v223 != &v225)
        free(v223);
LABEL_152:
      ++v84;
      sub_1C5010E9C((uint64_t)v229, v229[1]);
      v83 += 4;
      if (v49 == v84)
        goto LABEL_172;
    }
    if ((int)v84 + 2 < v90)
      v89 = *(void **)(*(_QWORD *)v212 + 8 * (v84 + 2));
    else
      v89 = 0;
LABEL_149:
    v222 = v89;
    v91 = llvm::AttributeSet::removeAttributes((uint64_t *)&v222, v213, (uint64_t)&v227);
    v92 = __n;
    if (__n >= (unint64_t)HIDWORD(__n))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v236, __n + 1, 8);
      v92 = __n;
    }
    *((_QWORD *)__src + v92) = v91;
    LODWORD(__n) = __n + 1;
    goto LABEL_152;
  }
LABEL_172:
  if ((_DWORD)v49 != *(_DWORD *)(v30 + 12) - 1)
  {
    v101 = v49 - 1;
    do
    {
      NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(v30 + 16) + 8 * (v101 + 2)), v82);
      v103 = v238;
      if (v238 >= (unint64_t)HIDWORD(v238))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v237, (uint64_t)v239, v238 + 1, 8);
        v103 = v238;
      }
      v237[v103] = (uint64_t)NullValue;
      LODWORD(v238) = v238 + 1;
      v104 = __n;
      if (__n >= (unint64_t)HIDWORD(__n))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v236, __n + 1, 8);
        v104 = __n;
      }
      *((_QWORD *)__src + v104) = 0;
      LODWORD(__n) = __n + 1;
      ++v101;
    }
    while (v101 != *(_DWORD *)(v30 + 12) - 2);
    LODWORD(v49) = v101 + 1;
  }
  v105 = v211;
  v106 = v215;
  if (v49 < v211 && *(_DWORD *)(v30 + 8) >= 0x100u)
  {
    do
    {
      v135 = *v83;
      v136 = *(_QWORD *)*v83;
      if (v136)
        v137 = (*(_DWORD *)(v136 + 8) & 0xFFFFE0FF) == 13;
      else
        v137 = 0;
      if (v137)
      {
        v138 = **(_QWORD **)v136 + 1960;
        if (v138 != v136)
        {
          CastOpcode = llvm::CastInst::getCastOpcode(*v83, 0, **(_QWORD **)v136 + 1960, 0);
          v140 = *(uint64_t **)(v214 + 24);
          v141 = *v83;
          v226 = 257;
          v142 = sub_1C4773E38(v140, CastOpcode, (unsigned __int8 *)v141, v138, (uint64_t)&v222);
          v106 = v215;
          v135 = v142;
          v105 = v211;
        }
      }
      v143 = v238;
      if (v238 >= (unint64_t)HIDWORD(v238))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v237, (uint64_t)v239, v238 + 1, 8);
        v105 = v211;
        v106 = v215;
        v143 = v238;
      }
      v237[v143] = (uint64_t)v135;
      LODWORD(v238) = v238 + 1;
      if (v106 && (v49 + 2) < *(_DWORD *)(v106 + 8))
        v144 = *(_QWORD *)(v215 + 40 + 8 * (v49 + 2));
      else
        v144 = 0;
      v145 = __n;
      if (__n >= (unint64_t)HIDWORD(__n))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v236, __n + 1, 8);
        v105 = v211;
        v106 = v215;
        v145 = __n;
      }
      *((_QWORD *)__src + v145) = v144;
      LODWORD(__n) = __n + 1;
      LODWORD(v49) = v49 + 1;
      v83 += 4;
    }
    while (v105 != (_DWORD)v49);
  }
  if (v106)
  {
    v107 = v209;
    if (*(_DWORD *)(v106 + 8))
      v108 = *(_QWORD *)(v106 + 40);
    else
      v108 = 0;
  }
  else
  {
    v108 = 0;
    v107 = v209;
  }
  if (*(_BYTE *)(v107 + 8) == 7)
  {
    v226 = 257;
    llvm::Value::setName((uint64_t ***)a2, (uint64_t)&v222);
  }
  v109 = llvm::AttributeSetNode::getSorted(v213, (uint64_t *)v231, v232);
  v111 = llvm::AttributeList::get(v213, v108, v109, __src, __n);
  v227 = v229;
  v228 = 0x100000000;
  if (v210)
  {
    __s[0] = 7;
    v112 = *((_DWORD *)a2 + 5);
    if (v112 < 0)
    {
      v113 = (unint64_t)a2[-4 * (v112 & 0x7FFFFFF) - 1];
      if ((v113 & 0xFFFFFFFF0) != 0)
      {
        v114 = (v113 >> 4);
        v115 = (char *)a2;
        do
        {
          v116 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
          v117 = (unsigned int *)(v115 - ((char *)a2[-4 * v116 - 1] + 32 * v116));
          v118 = *v117;
          v119 = &a2[4 * v118] - 4 * v116;
          v120 = (void *)(v117[1] - v118);
          v121 = *((_QWORD *)v117 - 1);
          v222 = v119;
          v223 = v120;
          v224 = v121;
          v122 = wmemchr(__s, *(_DWORD *)(v121 + 8), 1uLL);
          if (v122)
            v123 = v122;
          else
            v123 = &__s[1];
          if ((char *)v123 - (char *)__s == 4)
            sub_1C623D924((uint64_t)&v227, (uint64_t)&v222);
          v115 += 16;
          --v114;
        }
        while (v114);
      }
    }
  }
  else
  {
    v124 = *((_DWORD *)a2 + 5);
    if (v124 < 0)
    {
      v195 = (unint64_t)a2[-4 * (v124 & 0x7FFFFFF) - 1];
      if ((v195 & 0xFFFFFFFF0) != 0)
      {
        v196 = (v195 >> 4);
        v197 = (char *)a2;
        do
        {
          v198 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
          v199 = &a2[-4 * v198];
          v200 = (unsigned int *)(v197 - ((char *)*(v199 - 1) + 32 * v198));
          v201 = *v200;
          v202 = v200[1];
          v203 = *((_QWORD *)v200 - 1);
          v222 = &v199[4 * v201];
          v223 = (void *)(v202 - v201);
          v224 = v203;
          sub_1C623D924((uint64_t)&v227, (uint64_t)&v222);
          v197 += 16;
          --v196;
        }
        while (v196);
      }
    }
  }
  v125 = *((unsigned __int8 *)a2 + 16);
  v127 = v206;
  v126 = v207;
  if (v125 == 39)
  {
    v155 = *(uint64_t **)(v214 + 24);
    v156 = *((_QWORD *)v5 + 3);
    v157 = (uint64_t)v206[-4 * *((unsigned int *)a2 + 20) - 4];
    sub_1C623E1E0((unsigned int *)a2, (uint64_t)&v222);
    v218 = 257;
    v221 = 257;
    BitOrPointerCast = (uint64_t)sub_1C61CC41C(v156, (uint64_t)v5, v157, (uint64_t)v222, (int)v223, v237, v238, v158, 0, 0, (uint64_t)__s, 0);
    sub_1C61D76F0(v155, (unsigned __int8 **)BitOrPointerCast, (uint64_t)v217);
    if (v222 != &v224)
      free(v222);
    v128 = v214;
    v127 = v206;
    v126 = v207;
  }
  else
  {
    v128 = v214;
    v129 = *(uint64_t **)(v214 + 24);
    v130 = (uint64_t **)*((_QWORD *)v5 + 3);
    if (v125 == 33)
    {
      v153 = (uint64_t)*(a2 - 12);
      v154 = (uint64_t)*(a2 - 8);
      v226 = 257;
      BitOrPointerCast = (uint64_t)sub_1C623C480((uint64_t)v129, (uint64_t)v130, (uint64_t)v5, v153, v154, v237, v238, v110, (uint64_t)v227, v228, (uint64_t)&v222);
    }
    else
    {
      v226 = 257;
      BitOrPointerCast = sub_1C5062DD8(v129, v130, (uint64_t)v5, v237, v238, (uint64_t)v227, v228, (uint64_t)&v222, 0);
      *(_WORD *)(BitOrPointerCast + 18) = *(_WORD *)(BitOrPointerCast + 18) & 0xFFFC | *((_WORD *)a2 + 9) & 3;
    }
  }
  llvm::Value::takeName((llvm::Value *)BitOrPointerCast, (llvm::Value *)a2);
  *(_WORD *)(BitOrPointerCast + 18) = *(_WORD *)(BitOrPointerCast + 18) & 0xF003 | *((_WORD *)a2 + 9) & 0xFFC;
  *(_QWORD *)(BitOrPointerCast + 64) = v111;
  LODWORD(v222) = 2;
  llvm::Instruction::copyMetadata(BitOrPointerCast, (uint64_t)a2, (int *)&v222, 1);
  if (v126 == *(llvm::Value **)BitOrPointerCast || !a2[1])
    goto LABEL_207;
  if (*(_BYTE *)(*(_QWORD *)BitOrPointerCast + 8) == 7)
  {
    BitOrPointerCast = (uint64_t)llvm::UndefValue::get(*a2, v132);
    goto LABEL_207;
  }
  v226 = 257;
  BitOrPointerCast = (uint64_t)llvm::CastInst::CreateBitOrPointerCast((llvm::CastInst *)BitOrPointerCast, v126, (llvm::Type *)&v222, 0, v134);
  v159 = (unsigned __int8 *)a2[6];
  v216 = v159;
  if (v159)
    llvm::MetadataTracking::track((uint64_t)&v216, v159, 2);
  v160 = (unsigned __int8 **)(BitOrPointerCast + 48);
  if (&v216 == (unsigned __int8 **)(BitOrPointerCast + 48))
  {
    if (v216)
      llvm::MetadataTracking::untrack((uint64_t)&v216, v216);
  }
  else
  {
    if (*v160)
      llvm::MetadataTracking::untrack(BitOrPointerCast + 48, *v160);
    v161 = v216;
    *v160 = v216;
    if (v161)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v216, v161, BitOrPointerCast + 48);
      v216 = 0;
    }
  }
  v162 = *((unsigned __int8 *)a2 + 16);
  if (v162 == 39)
  {
    v168 = v127[-4 * *((unsigned int *)a2 + 20) - 4];
    v165 = (_QWORD *)((char *)v168 + 40);
    for (j = (_QWORD *)*((_QWORD *)v168 + 6); j != v165; j = (_QWORD *)j[1])
    {
      v169 = j - 3;
      if (!j)
        v169 = 0;
      if (*((_BYTE *)v169 + 16) != 83)
      {
LABEL_284:
        v170 = *((unsigned __int8 *)j - 8) - 38;
        v171 = v170 > 0x38;
        v172 = (1 << v170) & 0x100060000000001;
        if (v171 || v172 == 0)
          v165 = j;
        else
          v165 = (_QWORD *)j[1];
        v128 = v214;
        v126 = v207;
        goto LABEL_290;
      }
    }
    goto LABEL_290;
  }
  v163 = (uint64_t)a2;
  if (v162 == 33)
  {
    v164 = (uint64_t)*(a2 - 12);
    v165 = (_QWORD *)(v164 + 40);
    for (j = *(_QWORD **)(v164 + 48); j != v165; j = (_QWORD *)j[1])
    {
      v167 = j - 3;
      if (!j)
        v167 = 0;
      if (*((_BYTE *)v167 + 16) != 83)
        goto LABEL_284;
    }
LABEL_290:
    if (v165)
      v163 = (uint64_t)(v165 - 3);
    else
      v163 = 0;
  }
  sub_1C57D7818(v128, (llvm::Value *)BitOrPointerCast, v163);
  v174 = v128;
  v175 = a2[1];
  if (v175)
  {
    v176 = *(_QWORD *)(v174 + 32);
    while (1)
    {
      v177 = (void *)*((_QWORD *)v175 + 3);
      v178 = *(_DWORD *)(v176 + 8);
      v222 = v177;
      LODWORD(v223) = v178;
      v179 = *(_DWORD *)(v176 + 2080);
      if (!v179)
        break;
      v180 = *(_QWORD *)(v176 + 2064);
      v181 = v179 - 1;
      v182 = v181 & ((v177 >> 4) ^ (v177 >> 9));
      v183 = (_QWORD *)(v180 + 16 * v182);
      v184 = (void *)*v183;
      if ((void *)*v183 != v177)
      {
        v185 = 0;
        v186 = 1;
        while (v184 != (void *)-4096)
        {
          if (v185)
            v187 = 0;
          else
            v187 = v184 == (void *)-8192;
          if (v187)
            v185 = v183;
          v188 = v182 + v186++;
          v182 = v188 & v181;
          v183 = (_QWORD *)(v180 + 16 * v182);
          v184 = (void *)*v183;
          if ((void *)*v183 == v177)
            goto LABEL_312;
        }
        if (v185)
          v189 = v185;
        else
          v189 = v183;
        goto LABEL_309;
      }
LABEL_312:
      v175 = (llvm::CastInst *)*((_QWORD *)v175 + 1);
      if (!v175)
      {
        v128 = v214;
        v126 = v207;
        goto LABEL_207;
      }
    }
    v189 = 0;
LABEL_309:
    v190 = sub_1C4D8D8F4((_DWORD *)(v176 + 2064), (uint64_t)&v222, (uint64_t *)&v222, v189);
    *v190 = v222;
    *((_DWORD *)v190 + 2) = (_DWORD)v223;
    v191 = *(unsigned int *)(v176 + 8);
    if (v191 >= *(unsigned int *)(v176 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v176, v176 + 16, v191 + 1, 8);
      v191 = *(unsigned int *)(v176 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v176 + 8 * v191) = v177;
    ++*(_DWORD *)(v176 + 8);
    goto LABEL_312;
  }
  v128 = v174;
LABEL_207:
  if (a2[1])
  {
    sub_1C577F888(v128, (llvm::ValueAsMetadata *)a2, (llvm::Value *)BitOrPointerCast);
  }
  else if ((*((_BYTE *)a2 + 17) & 1) != 0)
  {
    if (v126 == *(llvm::Value **)BitOrPointerCast)
      llvm::ValueHandleBase::ValueIsRAUWd((llvm::ValueHandleBase *)a2, (llvm::Value *)BitOrPointerCast, v133);
    else
      llvm::ValueHandleBase::ValueIsDeleted((llvm::ValueHandleBase *)a2, v132);
  }
  sub_1C57813F4(v128, (uint64_t)a2);
  v149 = (char *)v227;
  if ((_DWORD)v228)
  {
    v150 = 48 * v228;
    do
    {
      v151 = &v149[v150];
      v152 = *(void **)&v149[v150 - 24];
      if (v152)
      {
        *((_QWORD *)v151 - 2) = v152;
        operator delete(v152);
      }
      if (*(v151 - 25) < 0)
        operator delete(*((void **)v151 - 6));
      v150 -= 48;
    }
    while (v150);
    v149 = (char *)v227;
  }
  if (v149 != (char *)v229)
    free(v149);
  if (v231 != v233)
    free(v231);
  if (__src != v236)
    free(__src);
  if (v237 != v239)
    free(v237);
  return 1;
}

char *sub_1C57D689C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  llvm::UndefValue **v6;
  llvm::Constant *v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Value *v10;
  llvm::UndefValue *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::UndefValue ***v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t *v46;
  unsigned __int8 *v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  int v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  unsigned __int8 **v58;
  unsigned __int8 *v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  char *v69;
  char *v70;
  int v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  int v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t *v104;
  uint64_t v105;
  llvm::PointerType *v106;
  llvm::UndefValue *v107;
  uint64_t v108;
  llvm::Constant *v109;
  char *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t **v119;
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  int v127;
  uint64_t v128;
  unsigned int v129;
  unsigned __int8 *v130;
  unsigned __int8 **v131;
  unsigned __int8 *v132;
  char *v133;
  uint64_t v134;
  char *v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  _QWORD *v158;
  llvm::UndefValue **v159;
  llvm::UndefValue *v160;
  llvm::UndefValue *v161;
  char *v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t *v176;
  unsigned __int8 *v177;
  char v178[32];
  __int16 v179;
  void *__p;
  char *v181;
  char *v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  __int16 v186;
  _QWORD *v187;
  uint64_t v188;
  _QWORD v189[8];

  v4 = (char *)a2;
  v189[6] = *MEMORY[0x1E0C80C00];
  v6 = (llvm::UndefValue **)(a2 - 32);
  v7 = **(llvm::Constant ***)(a2 - 32);
  v9 = *(_QWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a2 + 72);
  if (v9 && (*(_BYTE *)(v9 + 26) & 4) != 0)
    return 0;
  v10 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32));
  v11 = v10;
  v12 = *((_QWORD *)v10 + 14);
  if (!v12)
    goto LABEL_10;
  v13 = *((_QWORD *)v10 + 3);
  v14 = *(unsigned int *)(v13 + 12);
  if ((_DWORD)v14 == 1)
    goto LABEL_10;
  v15 = 0;
  v16 = *(_QWORD *)(v13 + 16) + 8;
  v17 = *(_DWORD *)(v12 + 8);
  v18 = v12 + 40;
  v19 = 8 * v14 - 8;
  while (1)
  {
    if ((int)v15 + 2 < v17)
    {
      v20 = *(_QWORD *)(v18 + 8 * (v15 + 2));
      if (v20)
      {
        if ((*(_BYTE *)(v20 + 14) & 4) != 0)
          break;
      }
    }
    ++v15;
    v19 -= 8;
    if (!v19)
      goto LABEL_10;
  }
  v26 = *(_QWORD *)(v16 + 8 * v15);
  if (!v26)
  {
LABEL_10:
    if (*(llvm::Constant **)v10 != v7)
      v11 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v10, v7, 0);
    *((_QWORD *)v4 + 9) = v8;
    if (*((_QWORD *)v4 - 4))
    {
      **((_QWORD **)v4 - 2) = *((_QWORD *)v4 - 3);
      v21 = *((_QWORD *)v4 - 3);
      if (v21)
        *(_QWORD *)(v21 + 16) = *((_QWORD *)v4 - 2);
    }
    *v6 = v11;
    if (v11)
    {
      v24 = *((_QWORD *)v11 + 1);
      v22 = (llvm::UndefValue ***)((char *)v11 + 8);
      v23 = v24;
      *((_QWORD *)v4 - 3) = v24;
      if (v24)
        *(_QWORD *)(v23 + 16) = v4 - 24;
      *((_QWORD *)v4 - 2) = v22;
      *v22 = v6;
    }
    return v4;
  }
  v27 = 0;
  __p = 0;
  v181 = 0;
  v182 = 0;
  v28 = v4[16];
  v159 = v6;
  v160 = v10;
  v163 = v8;
  v173 = v9;
  v169 = v26;
  v165 = a1;
  v166 = v20;
  if (v28 != 84)
  {
    if (v28 == 39)
      v27 = (*((_DWORD *)v4 + 20) + 1);
    else
      v27 = 2;
  }
  v29 = *((_DWORD *)v4 + 5);
  if (v29 < 0 && (v141 = &v4[-32 * (v29 & 0x7FFFFFF)], v142 = *((_QWORD *)v141 - 1), (v142 & 0xFFFFFFFF0) != 0))
  {
    v31 = -(uint64_t)(v29 & 0x7FFFFFF);
    v30 = *((_DWORD *)v141 - 3) - *(_DWORD *)&v141[-v142];
  }
  else
  {
    v30 = 0;
    v31 = -(uint64_t)(v29 & 0x7FFFFFF);
  }
  sub_1C4DB1D18((uint64_t)&__p, ((-32 * v27 + 32 * (unint64_t)-v30 - 32 * v31 - 32) >> 5) + 1);
  v32 = v4[16];
  if (v32 == 84)
  {
    v33 = 0;
  }
  else if (v32 == 39)
  {
    v33 = (*((_DWORD *)v4 + 20) + 1);
  }
  else
  {
    v33 = 2;
  }
  v34 = *((_DWORD *)v4 + 5);
  if (v34 < 0 && (v143 = &v4[-32 * (v34 & 0x7FFFFFF)], v144 = *((_QWORD *)v143 - 1), (v144 & 0xFFFFFFFF0) != 0))
  {
    v36 = -(uint64_t)(v34 & 0x7FFFFFF);
    v35 = *((_DWORD *)v143 - 3) - *(_DWORD *)&v143[-v144];
  }
  else
  {
    v35 = 0;
    v36 = -(uint64_t)(v34 & 0x7FFFFFF);
  }
  v37 = (uint64_t)&v4[32 * -v35 + -32 * v33];
  v162 = v4;
  v38 = &v4[32 * v36];
  v39 = v37 - (_QWORD)v38 - 32;
  v40 = (v39 >> 5);
  if ((v39 >> 5))
  {
    v41 = (uint64_t *)operator new(8 * v40);
    v42 = (char *)&v41[v40];
  }
  else
  {
    v41 = 0;
    v42 = 0;
  }
  if (v32 == 84)
  {
    v43 = 0;
  }
  else if (v32 == 39)
  {
    v43 = (*((_DWORD *)v162 + 20) + 1);
  }
  else
  {
    v43 = 2;
  }
  if (v34 < 0)
  {
    v145 = *((_QWORD *)v38 - 1);
    if ((v145 & 0xFFFFFFFF0) != 0)
      v44 = (*((_DWORD *)v38 - 3) - *(_DWORD *)&v38[-v145]);
    else
      v44 = 0;
  }
  else
  {
    v44 = 0;
  }
  v45 = 0;
  v171 = (uint64_t)&v162[-32 * v43 - 32 + -32 * v44];
  v167 = a3 + 64;
  v168 = a3;
  v164 = (uint64_t *)(v173 + 40);
  v46 = v41;
  while (1)
  {
    v175 = v38;
    if ((_DWORD)v15 != v45)
      goto LABEL_59;
    v47 = *(unsigned __int8 **)(v167 - 32 * (*(_DWORD *)(v168 + 20) & 0x7FFFFFF));
    if (*(_QWORD *)v47 != v169)
    {
      v48 = *(uint64_t **)(v165 + 24);
      v183 = "nest";
      v186 = 259;
      v47 = sub_1C4773E38(v48, 49, v47, v169, (uint64_t)&v183);
    }
    v49 = v181;
    if (v181 >= v182)
    {
      v51 = v45;
      v52 = (char *)__p;
      v53 = (v181 - (_BYTE *)__p) >> 3;
      v54 = v53 + 1;
      if ((unint64_t)(v53 + 1) >> 61)
        goto LABEL_212;
      v55 = v182 - (_BYTE *)__p;
      if ((v182 - (_BYTE *)__p) >> 2 > v54)
        v54 = v55 >> 2;
      if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
        v56 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v56 = v54;
      if (v56)
      {
        if (v56 >> 61)
          goto LABEL_213;
        v57 = (char *)operator new(8 * v56);
      }
      else
      {
        v57 = 0;
      }
      v58 = (unsigned __int8 **)&v57[8 * v53];
      *v58 = v47;
      v50 = (char *)(v58 + 1);
      if (v49 != v52)
      {
        do
        {
          v59 = (unsigned __int8 *)*((_QWORD *)v49 - 1);
          v49 -= 8;
          *--v58 = v59;
        }
        while (v49 != v52);
        v49 = (char *)__p;
      }
      __p = v58;
      v181 = v50;
      v182 = &v57[8 * v56];
      v45 = v51;
      if (v49)
        operator delete(v49);
    }
    else
    {
      *(_QWORD *)v181 = v47;
      v50 = v49 + 8;
    }
    v38 = v175;
    v181 = v50;
    if (v46 < (uint64_t *)v42)
    {
      *v46++ = v166;
LABEL_59:
      v60 = v46;
      goto LABEL_76;
    }
    v61 = v46 - v41;
    v62 = v61 + 1;
    if ((unint64_t)(v61 + 1) >> 61)
      goto LABEL_212;
    if ((v42 - (char *)v41) >> 2 > v62)
      v62 = (v42 - (char *)v41) >> 2;
    v63 = (unint64_t)(v42 - (char *)v41) >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v62;
    if (v63)
    {
      if (v63 >> 61)
        goto LABEL_213;
      v64 = (char *)operator new(8 * v63);
    }
    else
    {
      v64 = 0;
    }
    v65 = &v64[8 * v61];
    *(_QWORD *)v65 = v166;
    v60 = (uint64_t *)(v65 + 8);
    while (v46 != v41)
    {
      v66 = *--v46;
      *((_QWORD *)v65 - 1) = v66;
      v65 -= 8;
    }
    v42 = &v64[8 * v63];
    if (v41)
      operator delete(v41);
    v41 = (uint64_t *)v65;
LABEL_76:
    if (v38 == (char *)v171)
      break;
    v67 = v45;
    v68 = *(_QWORD *)v38;
    v69 = v181;
    if (v181 >= v182)
    {
      v72 = (char *)__p;
      v73 = (v181 - (_BYTE *)__p) >> 3;
      v74 = v73 + 1;
      if ((unint64_t)(v73 + 1) >> 61)
        goto LABEL_212;
      v75 = v182 - (_BYTE *)__p;
      if ((v182 - (_BYTE *)__p) >> 2 > v74)
        v74 = v75 >> 2;
      if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
        v76 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v76 = v74;
      if (v76)
      {
        if (v76 >> 61)
          goto LABEL_213;
        v77 = (char *)operator new(8 * v76);
      }
      else
      {
        v77 = 0;
      }
      v78 = &v77[8 * v73];
      *(_QWORD *)v78 = v68;
      v70 = v78 + 8;
      v71 = v67;
      if (v69 != v72)
      {
        do
        {
          v79 = *((_QWORD *)v69 - 1);
          v69 -= 8;
          *((_QWORD *)v78 - 1) = v79;
          v78 -= 8;
        }
        while (v69 != v72);
        v69 = (char *)__p;
      }
      __p = v78;
      v181 = v70;
      v182 = &v77[8 * v76];
      if (v69)
        operator delete(v69);
    }
    else
    {
      *(_QWORD *)v181 = v68;
      v70 = v69 + 8;
      v71 = v67;
    }
    v181 = v70;
    if (v173 && (v71 + 2) < *(_DWORD *)(v173 + 8))
      v80 = v164[v71 + 2];
    else
      v80 = 0;
    if (v60 >= (uint64_t *)v42)
    {
      v81 = v60 - v41;
      v82 = v81 + 1;
      if ((unint64_t)(v81 + 1) >> 61)
LABEL_212:
        abort();
      if ((v42 - (char *)v41) >> 2 > v82)
        v82 = (v42 - (char *)v41) >> 2;
      if ((unint64_t)(v42 - (char *)v41) >= 0x7FFFFFFFFFFFFFF8)
        v83 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v83 = v82;
      if (v83)
      {
        if (v83 >> 61)
LABEL_213:
          sub_1C4764EE4();
        v84 = (char *)operator new(8 * v83);
      }
      else
      {
        v84 = 0;
      }
      v85 = (uint64_t *)&v84[8 * v81];
      *v85 = v80;
      v46 = v85 + 1;
      while (v60 != v41)
      {
        v86 = *--v60;
        *--v85 = v86;
      }
      v42 = &v84[8 * v83];
      if (v41)
        operator delete(v41);
      v41 = v85;
    }
    else
    {
      *v60 = v80;
      v46 = v60 + 1;
    }
    v45 = v71 + 1;
    v38 = v175 + 32;
  }
  v87 = *(unsigned int *)(v163 + 12);
  if ((_DWORD)v87)
  {
    v88 = (uint64_t *)operator new(8 * v87);
    v89 = &v88[v87];
  }
  else
  {
    v87 = 0;
    v88 = 0;
    v89 = 0;
  }
  v90 = 0;
  v91 = *(uint64_t **)(v163 + 16);
  v176 = &v91[v87];
  v92 = v88;
  while (1)
  {
    if ((_DWORD)v15 != v90)
      goto LABEL_124;
    if (v92 < v89)
    {
      *v92++ = v169;
LABEL_124:
      v93 = v92;
      goto LABEL_141;
    }
    v94 = v92 - v88;
    v95 = v94 + 1;
    if ((unint64_t)(v94 + 1) >> 61)
      goto LABEL_212;
    if (((char *)v89 - (char *)v88) >> 2 > v95)
      v95 = ((char *)v89 - (char *)v88) >> 2;
    v96 = (unint64_t)((char *)v89 - (char *)v88) >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v95;
    if (v96)
    {
      if (v96 >> 61)
        goto LABEL_213;
      v97 = (char *)operator new(8 * v96);
    }
    else
    {
      v97 = 0;
    }
    v98 = (uint64_t *)&v97[8 * v94];
    *v98 = v169;
    v93 = v98 + 1;
    while (v92 != v88)
    {
      v99 = *--v92;
      *--v98 = v99;
    }
    v89 = (uint64_t *)&v97[8 * v96];
    if (v88)
      operator delete(v88);
    v88 = v98;
LABEL_141:
    if (++v91 == v176)
      break;
    if (v93 >= v89)
    {
      v100 = v93 - v88;
      v101 = v100 + 1;
      if ((unint64_t)(v100 + 1) >> 61)
        goto LABEL_212;
      if (((char *)v89 - (char *)v88) >> 2 > v101)
        v101 = ((char *)v89 - (char *)v88) >> 2;
      if ((unint64_t)((char *)v89 - (char *)v88) >= 0x7FFFFFFFFFFFFFF8)
        v102 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v102 = v101;
      if (v102)
      {
        if (v102 >> 61)
          goto LABEL_213;
        v103 = (char *)operator new(8 * v102);
      }
      else
      {
        v103 = 0;
      }
      v104 = (uint64_t *)&v103[8 * v100];
      *v104 = *v91;
      v92 = v104 + 1;
      while (v93 != v88)
      {
        v105 = *--v93;
        *--v104 = v105;
      }
      v89 = (uint64_t *)&v103[8 * v102];
      if (v88)
        operator delete(v88);
      v88 = v104;
    }
    else
    {
      *v93 = *v91;
      v92 = v93 + 1;
    }
    ++v90;
  }
  v106 = (llvm::PointerType *)llvm::FunctionType::get(**(uint64_t ****)(v163 + 16), v88, v93 - v88, *(_DWORD *)(v163 + 8) > 0xFFu);
  v107 = v160;
  v108 = *(_QWORD *)v160;
  if (v108 == llvm::PointerType::get(v106, 0))
  {
    v110 = v162;
  }
  else
  {
    v109 = (llvm::Constant *)llvm::PointerType::get(v106, 0);
    v110 = v162;
    if (*(llvm::Constant **)v160 != v109)
      v107 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v160, v109, 0);
  }
  if (!v173 || (v111 = *(_DWORD *)(v173 + 8)) == 0)
  {
    v112 = 0;
    goto LABEL_170;
  }
  v112 = *v164;
  if (v111 == 1)
  {
LABEL_170:
    v113 = 0;
    goto LABEL_171;
  }
  v113 = *(_QWORD *)(v173 + 48);
LABEL_171:
  v114 = llvm::AttributeList::get(*(uint64_t **)v163, v112, v113, v41, v60 - v41);
  v187 = v189;
  v188 = 0x100000000;
  v115 = *((_DWORD *)v110 + 5);
  if (v115 < 0)
  {
    v146 = *(_QWORD *)&v110[-32 * (v115 & 0x7FFFFFF) - 8];
    if ((v146 & 0xFFFFFFFF0) != 0)
    {
      v147 = (v146 >> 4);
      v148 = v110;
      do
      {
        v149 = *((_DWORD *)v110 + 5) & 0x7FFFFFF;
        v150 = &v110[-32 * v149];
        v151 = &v148[-*((_QWORD *)v150 - 1) + -32 * v149];
        v152 = *(unsigned int *)v151;
        v153 = *((unsigned int *)v151 + 1);
        v154 = *((_QWORD *)v151 - 1);
        v183 = &v150[32 * v152];
        v184 = v153 - v152;
        v185 = v154;
        sub_1C623D924((uint64_t)&v187, (uint64_t)&v183);
        v148 += 16;
        --v147;
      }
      while (v147);
    }
  }
  v116 = v110[16];
  if (v116 == 39)
  {
    v139 = (uint64_t)v159[-4 * *((unsigned int *)v110 + 20) - 4];
    sub_1C623E1E0((unsigned int *)v110, (uint64_t)&v183);
    v179 = 257;
    v4 = sub_1C61CC41C((uint64_t)v106, (uint64_t)v107, v139, (uint64_t)v183, v184, (uint64_t *)__p, (v181 - (_BYTE *)__p) >> 3, v140, (uint64_t)v187, v188, (uint64_t)v178, 0);
    if (v183 != &v185)
      free(v183);
    *((_WORD *)v4 + 9) = *((_WORD *)v4 + 9) & 0xF003 | *((_WORD *)v110 + 9) & 0xFFC;
    *((_QWORD *)v4 + 8) = v114;
  }
  else if (v116 == 33)
  {
    v137 = *((_QWORD *)v110 - 12);
    v138 = *((_QWORD *)v110 - 8);
    v186 = 257;
    v4 = sub_1C61CC1B8((uint64_t)v106, (uint64_t)v107, v137, v138, (uint64_t *)__p, (v181 - (_BYTE *)__p) >> 3, (uint64_t)v187, v188, (uint64_t)&v183, 0);
    *((_WORD *)v4 + 9) = *((_WORD *)v4 + 9) & 0xF003 | *((_WORD *)v110 + 9) & 0xFFC;
    *((_QWORD *)v4 + 8) = v114;
  }
  else
  {
    v174 = v114;
    v117 = v181 - (_BYTE *)__p;
    v118 = v188;
    v186 = 257;
    v161 = v107;
    v170 = (uint64_t)v187;
    v172 = (uint64_t *)__p;
    v119 = (uint64_t **)v106;
    v120 = 0;
    if ((_DWORD)v188)
    {
      v155 = 48 * v188;
      v156 = v187 + 4;
      do
      {
        v120 += (*v156 - *(v156 - 1)) >> 3;
        v156 += 6;
        v155 -= 48;
      }
      while (v155);
    }
    v121 = ((unint64_t)v117 >> 3) + 1;
    v122 = (v120 + v121);
    v123 = (16 * v188);
    if ((_DWORD)v123)
      v124 = (16 * (_DWORD)v188) | 8u;
    else
      v124 = 0;
    v125 = (char *)operator new(v124 + 32 * v122 + 80);
    v126 = &v125[v124];
    v4 = &v125[32 * v122 + v124];
    *((_DWORD *)v4 + 5) = v122 & 0x7FFFFFF | (((_DWORD)v123 != 0) << 31) | *((_DWORD *)v4 + 5) & 0x38000000;
    if ((_DWORD)v122)
    {
      do
      {
        *(_QWORD *)v126 = 0;
        *((_QWORD *)v126 + 1) = 0;
        *((_QWORD *)v126 + 2) = 0;
        *((_QWORD *)v126 + 3) = v4;
        v126 += 32;
      }
      while (v126 != v4);
    }
    v110 = v162;
    if ((_DWORD)v123)
      *(_QWORD *)&v125[v123] = v123;
    v127 = 0;
    if ((_DWORD)v118)
    {
      v157 = 48 * v118;
      v158 = (_QWORD *)(v170 + 32);
      v128 = (uint64_t)v161;
      do
      {
        v127 += (*v158 - *(v158 - 1)) >> 3;
        v158 += 6;
        v157 -= 48;
      }
      while (v157);
    }
    else
    {
      v128 = (uint64_t)v161;
    }
    *(_QWORD *)v4 = *v119[2];
    *((_QWORD *)v4 + 1) = 0;
    v129 = *((_DWORD *)v4 + 5) & 0xC0000000 | (v127 + v121) & 0x7FFFFFF;
    *((_DWORD *)v4 + 4) = 84;
    *((_DWORD *)v4 + 5) = v129;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    *((_DWORD *)v4 + 14) = 0;
    *((_QWORD *)v4 + 8) = 0;
    llvm::CallInst::init((uint64_t ***)v4, v119, v128, v172, v117 >> 3, v170, v118, (uint64_t)&v183);
    *((_WORD *)v4 + 9) = *((_WORD *)v4 + 9) & 0xF000 | *((_WORD *)v162 + 9) & 0xFFF;
    *((_QWORD *)v4 + 8) = v174;
  }
  v130 = (unsigned __int8 *)*((_QWORD *)v110 + 6);
  v177 = v130;
  if (v130)
    llvm::MetadataTracking::track((uint64_t)&v177, v130, 2);
  v131 = (unsigned __int8 **)(v4 + 48);
  if (&v177 == (unsigned __int8 **)(v4 + 48))
  {
    if (v177)
      llvm::MetadataTracking::untrack((uint64_t)&v177, v177);
  }
  else
  {
    if (*v131)
      llvm::MetadataTracking::untrack((uint64_t)(v4 + 48), *v131);
    v132 = v177;
    *v131 = v177;
    if (v132)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v177, v132, (uint64_t)(v4 + 48));
      v177 = 0;
    }
  }
  v133 = (char *)v187;
  if ((_DWORD)v188)
  {
    v134 = 48 * v188;
    do
    {
      v135 = &v133[v134];
      v136 = *(void **)&v133[v134 - 24];
      if (v136)
      {
        *((_QWORD *)v135 - 2) = v136;
        operator delete(v136);
      }
      if (*(v135 - 25) < 0)
        operator delete(*((void **)v135 - 6));
      v134 -= 48;
    }
    while (v134);
    v133 = (char *)v187;
  }
  if (v133 != (char *)v189)
    free(v133);
  if (v88)
    operator delete(v88);
  if (v41)
    operator delete(v41);
  if (__p)
  {
    v181 = (char *)__p;
    operator delete(__p);
  }
  return v4;
}

void sub_1C57D75E8(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _BOOL4 v7;
  BOOL v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  _BOOL4 v21;
  BOOL v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
  {
    v5 = 0;
    if (!a1)
      return;
    goto LABEL_29;
  }
  v5 = 0;
  do
  {
    v6 = *(_QWORD *)(v4 + 24);
    v7 = sub_1C4E9AE24(v6);
    if (v6)
      v8 = !v7;
    else
      v8 = 1;
    if (!v8)
    {
      v9 = (unint64_t)a2[2];
      if ((unint64_t)v5 >= v9)
      {
        v11 = *a2;
        v12 = v5 - *a2;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61)
LABEL_55:
          abort();
        v14 = v9 - (_QWORD)v11;
        if (v14 >> 2 > v13)
          v13 = v14 >> 2;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          if (v15 >> 61)
LABEL_56:
            sub_1C4764EE4();
          v16 = (char *)operator new(8 * v15);
        }
        else
        {
          v16 = 0;
        }
        v17 = (uint64_t *)&v16[8 * v12];
        *v17 = v6;
        v10 = v17 + 1;
        if (v5 != v11)
        {
          do
          {
            v18 = *--v5;
            *--v17 = v18;
          }
          while (v5 != v11);
          v5 = *a2;
        }
        *a2 = v17;
        a2[1] = v10;
        a2[2] = (uint64_t *)&v16[8 * v15];
        if (v5)
          operator delete(v5);
      }
      else
      {
        *v5 = v6;
        v10 = v5 + 1;
      }
      a2[1] = v10;
      v5 = v10;
    }
    v4 = *(_QWORD *)(v4 + 8);
  }
  while (v4);
  if (a1)
  {
LABEL_29:
    if (*(_BYTE *)(a1 + 16) == 33)
    {
      for (i = *(_QWORD *)(llvm::BasicBlock::getFirstNonPHI(*(llvm::BasicBlock **)(a1 - 64)) + 8);
            i;
            i = *(_QWORD *)(i + 8))
      {
        v20 = *(_QWORD *)(i + 24);
        v21 = sub_1C4E9AE24(v20);
        if (v20)
          v22 = !v21;
        else
          v22 = 1;
        if (!v22)
        {
          v23 = (unint64_t)a2[2];
          if ((unint64_t)v5 >= v23)
          {
            v25 = *a2;
            v26 = v5 - *a2;
            v27 = v26 + 1;
            if ((unint64_t)(v26 + 1) >> 61)
              goto LABEL_55;
            v28 = v23 - (_QWORD)v25;
            if (v28 >> 2 > v27)
              v27 = v28 >> 2;
            if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
              v29 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v29 = v27;
            if (v29)
            {
              if (v29 >> 61)
                goto LABEL_56;
              v30 = (char *)operator new(8 * v29);
            }
            else
            {
              v30 = 0;
            }
            v31 = (uint64_t *)&v30[8 * v26];
            *v31 = v20;
            v24 = v31 + 1;
            if (v5 != v25)
            {
              do
              {
                v32 = *--v5;
                *--v31 = v32;
              }
              while (v5 != v25);
              v5 = *a2;
            }
            *a2 = v31;
            a2[1] = v24;
            a2[2] = (uint64_t *)&v30[8 * v29];
            if (v5)
              operator delete(v5);
          }
          else
          {
            *v5 = v20;
            v24 = v5 + 1;
          }
          a2[1] = v24;
          v5 = v24;
        }
      }
    }
  }
}

llvm::Value *sub_1C57D7818(uint64_t a1, llvm::Value *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  llvm::Value **v13;
  llvm::Value *v14;
  llvm::Value **v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  llvm::Value **v19;
  _QWORD *v20;
  llvm::Value *v21;
  uint64_t v22;
  uint64_t v24;
  llvm::ValueSymbolTable *v25;
  llvm::Value *v26;

  v5 = *(_QWORD *)(a3 + 40);
  v6 = (uint64_t *)(a3 + 24);
  *((_QWORD *)a2 + 5) = v5;
  *(_WORD *)(v5 + 18) &= ~0x8000u;
  if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
  {
    v24 = *(_QWORD *)(v5 + 56);
    if (v24)
    {
      v25 = *(llvm::ValueSymbolTable **)(v24 + 104);
      if (v25)
        llvm::ValueSymbolTable::reinsertValue(v25, a2);
    }
  }
  v7 = *v6;
  *((_QWORD *)a2 + 3) = *v6;
  *((_QWORD *)a2 + 4) = v6;
  *(_QWORD *)(v7 + 8) = (char *)a2 + 24;
  *v6 = (uint64_t)a2 + 24;
  v8 = *(_QWORD *)(a1 + 32);
  v26 = a2;
  if ((*(_BYTE *)(v8 + 2088) & 1) != 0)
  {
    v10 = v8 + 2096;
    v9 = 16;
  }
  else
  {
    v9 = *(_DWORD *)(v8 + 2104);
    if (!v9)
    {
      v19 = 0;
      goto LABEL_18;
    }
    v10 = *(_QWORD *)(v8 + 2096);
  }
  v11 = v9 - 1;
  v12 = v11 & ((a2 >> 4) ^ (a2 >> 9));
  v13 = (llvm::Value **)(v10 + 8 * v12);
  v14 = *v13;
  if (*v13 == a2)
    return a2;
  v15 = 0;
  v16 = 1;
  while (v14 != (llvm::Value *)-4096)
  {
    if (v15)
      v17 = 0;
    else
      v17 = v14 == (llvm::Value *)-8192;
    if (v17)
      v15 = v13;
    v18 = v12 + v16++;
    v12 = v18 & v11;
    v13 = (llvm::Value **)(v10 + 8 * v12);
    v14 = *v13;
    if (*v13 == a2)
      return a2;
  }
  if (v15)
    v19 = v15;
  else
    v19 = v13;
LABEL_18:
  v20 = sub_1C4E08FFC(v8 + 2088, (uint64_t)&v26, &v26, v19);
  *v20 = v26;
  v21 = v26;
  v22 = *(unsigned int *)(v8 + 2232);
  if (v22 >= *(_DWORD *)(v8 + 2236))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v8 + 2224, v8 + 2240, v22 + 1, 8);
    LODWORD(v22) = *(_DWORD *)(v8 + 2232);
  }
  *(_QWORD *)(*(_QWORD *)(v8 + 2224) + 8 * v22) = v21;
  ++*(_DWORD *)(v8 + 2232);
  return a2;
}

uint64_t sub_1C57D7994(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _BYTE v6[92];
  int v7;

  if (!sub_1C57D7F90(a1, 0, 1))
    return 0;
  llvm::SampleInfo::SampleInfo((uint64_t)v6, *(_DWORD *)(*(_QWORD *)(a1 - 32) + 36), 1);
  if (v7 != -1)
    return 0;
  v4 = sub_1C57D81A4((uint64_t)v6, a1, a2);
  sub_1C57D8464(a1, v4, a2);
  return v4;
}

uint64_t sub_1C57D7A24(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _BYTE v6[92];
  int v7;

  if (!sub_1C57D7F90(a1, 1, 1))
    return 0;
  llvm::SampleInfo::SampleInfo((uint64_t)v6, *(_DWORD *)(*(_QWORD *)(a1 - 32) + 36), 1);
  if (v7 != -1)
    return 0;
  v4 = sub_1C57D81A4((uint64_t)v6, a1, a2);
  sub_1C57D88DC(a1, v4, a2);
  return v4;
}

void sub_1C57D7AB4(uint64_t a1)
{
  const llvm::APInt *v2;
  uint64_t v3;
  unsigned int *v4;
  int8x8_t v5;
  int8x8_t v6;
  __int32 v7;
  uint8x8_t v8;
  BOOL v9;
  int8x8_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  _QWORD *v23;
  unsigned int v24;
  BOOL v25;
  int v26;
  uint64_t i;
  llvm::Type *v28;
  int PrimitiveSizeInBits;
  uint64_t v30;
  uint64_t j;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _BOOL4 v35;
  uint64_t v36;
  int v37;
  int *v38;
  uint64_t v39;
  int v40;
  int v41;
  char v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  _QWORD *v46;
  uint8x8_t v47;
  uint64_t v49;
  uint64_t v50;
  llvm::ConstantInt *v51;
  unint64_t v52;
  int v53;
  llvm::ValueHandleBase *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  char v64;
  void *v65;
  uint64_t v66;
  _QWORD v67[9];

  v67[8] = *MEMORY[0x1E0C80C00];
  llvm::SampleInfo::SampleInfo((uint64_t)&v62, *(_DWORD *)(*(_QWORD *)(a1 - 32) + 36), 1);
  v3 = *(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * v63);
  v4 = (unsigned int *)(v3 + 24);
  if (*(_DWORD *)(v3 + 32) >= 0x41u)
    v4 = *(unsigned int **)v4;
  v5 = (int8x8_t)*v4;
  v6 = vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8((uint8x8_t)v6);
  v7 = v6.i32[0];
  v9 = v6.i32[0] == 1;
  v6.i32[0] = v5.i32[0] + 1;
  v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = !v9 && v8.i32[0] == 1;
  if (v9)
  {
    v65 = v67;
    v10.i32[1] = 4;
    v66 = 0x400000000;
    v11 = *(_QWORD *)(a1 + 8);
    if (v11)
    {
      v12 = 0;
      do
      {
        v13 = *(_QWORD *)(v11 + 24);
        if (v12 >= HIDWORD(v66))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, (uint64_t)v67, v12 + 1, 16);
          v12 = v66;
        }
        v14 = (char *)v65 + 16 * v12;
        *v14 = a1;
        v14[1] = v13;
        v12 = v66 + 1;
        LODWORD(v66) = v66 + 1;
        v11 = *(_QWORD *)(v11 + 8);
      }
      while (v11);
      if (v12)
      {
        v15 = 0;
        do
        {
          v16 = v65;
          v17 = (char *)v65 + 16 * v12;
          v18 = *((_QWORD *)v17 - 2);
          v19 = *((_QWORD *)v17 - 1);
          LODWORD(v66) = --v12;
          v20 = *(unsigned __int8 *)(v19 + 16);
          if (v19 && v20 == 89)
          {
            v21 = *(_QWORD *)(v19 - 32);
            if (v21)
              v22 = *(_BYTE *)(v21 + 16) == 16;
            else
              v22 = 0;
            if (!v22)
              goto LABEL_88;
            v23 = (_QWORD *)(v21 + 24);
            if (*(_DWORD *)(v21 + 32) >= 0x41u)
              v23 = (_QWORD *)*v23;
            v24 = *(_DWORD *)v23;
            v25 = v24 >= 4;
            if (v24 >= 4)
              v26 = 0;
            else
              v26 = 1 << v24;
            if (v25)
            {
              v15 = -1;
              goto LABEL_67;
            }
            v15 |= v26;
          }
          else if (v19 && v20 == 92)
          {
            if (!**(_DWORD **)(v19 + 64))
            {
              for (i = *(_QWORD *)(v19 + 8); i; i = *(_QWORD *)(i + 8))
              {
                v45 = *(_QWORD *)(i + 24);
                if (v12 >= HIDWORD(v66))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, (uint64_t)v67, v12 + 1, 16);
                  v12 = v66;
                }
                v46 = (char *)v65 + 16 * v12;
                *v46 = v19;
                v46[1] = v45;
                v12 = v66 + 1;
                LODWORD(v66) = v66 + 1;
              }
            }
          }
          else if (v19 && v20 == 77)
          {
            v28 = *(llvm::Type **)v19;
            if ((*(_DWORD *)(*(_QWORD *)v19 + 8) & 0xFE) == 0x12)
              v28 = (llvm::Type *)**((_QWORD **)v28 + 2);
            PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v28);
            v30 = **(_QWORD **)(v19 - 32);
            if ((*(_DWORD *)(v30 + 8) & 0xFE) == 0x12)
              v30 = **(_QWORD **)(v30 + 16);
            if (PrimitiveSizeInBits != llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v30))
            {
LABEL_88:
              v15 = 0;
              goto LABEL_67;
            }
            for (j = *(_QWORD *)(v19 + 8); j; j = *(_QWORD *)(j + 8))
            {
              v32 = *(_QWORD *)(j + 24);
              if (v12 >= HIDWORD(v66))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, (uint64_t)v67, v12 + 1, 16);
                v12 = v66;
              }
              v33 = (char *)v65 + 16 * v12;
              *v33 = v19;
              v33[1] = v32;
              v12 = v66 + 1;
              LODWORD(v66) = v66 + 1;
            }
          }
          else
          {
            if (!v19)
              goto LABEL_88;
            if (v20 != 91)
              goto LABEL_88;
            if (*(_DWORD *)(*(_QWORD *)v19 + 32) != 4)
              goto LABEL_88;
            v34 = *(_QWORD *)(v19 - 32);
            if (*(_QWORD *)(v19 - 64) == v34)
              goto LABEL_88;
            v35 = v34 == v18;
            v36 = *(unsigned int *)(v19 + 72);
            if ((_DWORD)v36)
            {
              v37 = 4 * v35;
              v38 = *(int **)(v19 + 64);
              v39 = 4 * v36;
              do
              {
                v41 = *v38++;
                v40 = v41;
                v42 = v41 - v37;
                v43 = v41 >= v37 + 4 || v40 < v37;
                v44 = 1 << v42;
                if (v43)
                  v44 = 0;
                v15 |= v44;
                v39 -= 4;
              }
              while (v39);
            }
          }
        }
        while (v12);
        if (v15)
          goto LABEL_66;
      }
    }
    v15 = -1;
LABEL_66:
    v16 = v65;
LABEL_67:
    if (v16 != v67)
      free(v16);
    if (v15 + 1 >= 2)
    {
      v10.i32[0] = v15;
      v47 = (uint8x8_t)vcnt_s8(v10);
      v47.i16[0] = vaddlv_u8(v47);
      if (v47.i32[0] != v7 && v64 == 0)
      {
        v49 = v63;
        v50 = **(_QWORD **)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * v63);
        v51 = *(llvm::ConstantInt **)v50;
        v52 = *(unsigned int *)(v50 + 8);
        LODWORD(v66) = v52 >> 8;
        if (v52 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v65, v15, 0);
        }
        else
        {
          if (v52 <= 0xFF)
            v53 = 0;
          else
            v53 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v52);
          v65 = (void *)(v53 & v15);
        }
        v54 = llvm::ConstantInt::get(v51, (llvm::LLVMContext *)&v65, v2);
        if (v66 >= 0x41 && v65)
          MEMORY[0x1CAA32F9C](v65, 0x1000C8000313F17);
        v55 = a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF);
        v56 = v55 + 32 * v49;
        if (*(_QWORD *)v56)
        {
          **(_QWORD **)(v56 + 16) = *(_QWORD *)(v56 + 8);
          v57 = *(_QWORD *)(v56 + 8);
          if (v57)
            *(_QWORD *)(v57 + 16) = *(_QWORD *)(v56 + 16);
        }
        *(_QWORD *)v56 = v54;
        if (v54)
        {
          v60 = *((_QWORD *)v54 + 1);
          v59 = (_QWORD *)((char *)v54 + 8);
          v58 = v60;
          v61 = v55 + 32 * v49;
          *(_QWORD *)(v61 + 8) = v60;
          if (v60)
            *(_QWORD *)(v58 + 16) = v61 + 8;
          *(_QWORD *)(v61 + 16) = v59;
          *v59 = v56;
        }
      }
    }
  }
}

uint64_t sub_1C57D7F90(uint64_t a1, int a2, int a3)
{
  char v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;
  BOOL v19;
  char v21;
  void *v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD v25[9];

  v25[8] = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 8))
  {
    v5 = 0;
    return v5 & 1;
  }
  v5 = 0;
  v22 = v25;
  v24 = 8;
  v25[0] = a1;
  v21 = a3 ^ 1;
  v6 = 1;
  while (1)
  {
    v7 = *((_QWORD *)v22 + --v6);
    v23 = v6;
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      break;
LABEL_38:
    if (!v6)
      goto LABEL_42;
  }
  while (1)
  {
    v9 = *(_QWORD *)(v8 + 24);
    v10 = *(unsigned __int8 *)(v9 + 16);
    if (v9 && v10 == 89)
    {
LABEL_6:
      if (v6 >= v24)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, (uint64_t)v25, v6 + 1, 8);
        v6 = v23;
      }
      *((_QWORD *)v22 + v6) = v9;
      v6 = ++v23;
      goto LABEL_37;
    }
    if (v9 && v10 >= 0x1C)
      break;
LABEL_37:
    v8 = *(_QWORD *)(v8 + 8);
    if (!v8)
      goto LABEL_38;
  }
  if (v10 == 92 && a3 != 0)
  {
    if (!**(_DWORD **)(v9 + 64))
      goto LABEL_6;
    goto LABEL_37;
  }
  v13 = v10 - 28;
  if (!a2)
  {
    if ((sub_1C57D8834(*(_QWORD *)(v8 + 24)) & 1) == 0 && (v13 != 45 || *(_BYTE *)(*(_QWORD *)v9 + 8) == 1))
    {
      v5 = 0;
      goto LABEL_42;
    }
    v5 = 1;
    goto LABEL_37;
  }
  if (v10 != 74)
    goto LABEL_37;
  v14 = *(_QWORD *)(v9 + 8);
  if (!v14)
    goto LABEL_37;
  while (1)
  {
    v15 = *(_QWORD *)(v14 + 24);
    v16 = *(unsigned __int8 *)(v15 + 16) - 42;
    v17 = v16 > 0x1F;
    v18 = (1 << v16) & 0x98000095;
    v19 = v17 || v18 == 0;
    if (v19 && !sub_1C57D8834(v15))
      break;
    v14 = *(_QWORD *)(v14 + 8);
    if (!v14)
      goto LABEL_37;
  }
  if ((sub_1C57D8744(v9) & 1) == 0)
  {
    v5 |= v21;
    goto LABEL_37;
  }
  v5 = a2;
LABEL_42:
  if (v22 != v25)
    free(v22);
  return v5 & 1;
}

uint64_t sub_1C57D81A4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v22;
  uint64_t v23;
  uint64_t Declaration;
  uint64_t **v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  _WORD v30[20];
  void *v31;
  uint64_t v32;
  _BYTE v33[64];
  void *v34;
  uint64_t v35;
  _QWORD v36[9];

  v36[8] = *MEMORY[0x1E0C80C00];
  v34 = v36;
  v35 = 0x800000000;
  v31 = v33;
  v32 = 0x800000000;
  v6 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v6 == -1)
  {
    v7 = 0;
  }
  else
  {
    v36[0] = **(_QWORD **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * v6);
    v7 = 1;
    LODWORD(v35) = 1;
  }
  v8 = v36;
  v9 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v9 != -1)
  {
    v36[v7++] = **(_QWORD **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * v9);
    LODWORD(v35) = v7;
  }
  v10 = *(unsigned int *)(a1 + 76);
  if ((_DWORD)v10 != -1)
  {
    v36[v7++] = **(_QWORD **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * v10);
    LODWORD(v35) = v7;
  }
  v11 = *(unsigned __int8 *)(a2 + 16);
  if (v11 == 84)
  {
    v12 = 0;
  }
  else if (v11 == 39)
  {
    v12 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    v12 = 2;
  }
  v13 = 0;
  v14 = *(_DWORD *)(a2 + 20);
  v15 = -(uint64_t)(v14 & 0x7FFFFFF);
  if (v14 < 0)
  {
    v28 = a2 - 32 * (v14 & 0x7FFFFFF);
    v29 = *(_QWORD *)(v28 - 8);
    if ((v29 & 0xFFFFFFFF0) != 0)
      v13 = (*(_DWORD *)(v28 - 12) - *(_DWORD *)(v28 - v29));
    else
      v13 = 0;
  }
  v16 = -32 * v12 - 32 * v13 - 32 * v15 - 32;
  if ((v16 & 0x1FFFFFFFE0) != 0)
  {
    v17 = 0;
    v18 = -(uint64_t)(v16 >> 5);
    v19 = a2;
    do
    {
      v20 = *(_QWORD *)(v19 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      if (v17 >= HIDWORD(v32))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, (uint64_t)v33, v17 + 1, 8);
        v17 = v32;
      }
      *((_QWORD *)v31 + v17) = v20;
      v17 = v32 + 1;
      LODWORD(v32) = v32 + 1;
      v19 += 32;
    }
    while (!__CFADD__(v18++, 1));
    v7 = v35;
    v8 = (uint64_t *)v34;
  }
  if (v7)
    v22 = v8;
  else
    v22 = 0;
  if (v7)
    v23 = v7;
  else
    v23 = 0;
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40), *(_DWORD *)(a1 + 100), v22, v23);
  if (Declaration)
    v25 = *(uint64_t ***)(Declaration + 24);
  else
    v25 = 0;
  v30[16] = 257;
  v26 = sub_1C4774778(a3, v25, Declaration, (uint64_t *)v31, v32, (uint64_t)v30, 0);
  if (v31 != v33)
    free(v31);
  if (v34 != v36)
    free(v34);
  return v26;
}

void sub_1C57D8464(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v4;
  unsigned int v5;
  char *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unsigned __int8 *v28;
  char v29;
  unsigned __int8 *v30[4];
  __int16 v31;
  void *v32;
  unsigned int v33;
  unsigned int v34;
  _QWORD v35[18];

  v35[16] = *MEMORY[0x1E0C80C00];
  v32 = v35;
  v34 = 8;
  v35[0] = a1;
  v35[1] = a2;
  v4 = a3 + 6;
  v5 = 1;
  do
  {
    v6 = (char *)v32 + 16 * v5;
    v7 = (uint64_t **)*((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v33 = v5 - 1;
    v9 = v7[1];
    if (!v9)
      goto LABEL_39;
    v29 = 0;
    do
    {
      while (1)
      {
        v10 = v9[3];
        v11 = *(unsigned __int8 *)(v10 + 16);
        if (v10)
        {
          if (v11 == 89)
            break;
        }
        if (v10 && v11 == 92)
        {
          v13 = a3[6];
          v12 = a3[7];
          a3[6] = *(_QWORD *)(v10 + 40);
          a3[7] = v10 + 24;
          v18 = *(unsigned __int8 **)(v10 + 48);
          v30[0] = v18;
          if (v18)
          {
            llvm::MetadataTracking::track((uint64_t)v30, v18, 2);
            v19 = v30[0];
          }
          else
          {
            v19 = 0;
          }
          sub_1C4774EF4((uint64_t)a3, 0, (uint64_t)v19);
          if (v30[0])
            llvm::MetadataTracking::untrack((uint64_t)v30, v30[0]);
          v20 = *(unsigned int **)(v10 + 64);
          v21 = *(unsigned int *)(v10 + 72);
          v31 = 257;
          v17 = sub_1C506DBC4((uint64_t)a3, (uint64_t *)v8, v20, v21, (uint64_t)v30);
          goto LABEL_18;
        }
        if (v10 && v11 == 73)
        {
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v9[3], (llvm::Value *)v8, (llvm::Value *)1);
          goto LABEL_26;
        }
        v9 = (uint64_t *)v9[1];
        v29 = 1;
        if (!v9)
          goto LABEL_33;
      }
      v13 = a3[6];
      v12 = a3[7];
      a3[6] = *(_QWORD *)(v10 + 40);
      a3[7] = v10 + 24;
      v14 = *(unsigned __int8 **)(v10 + 48);
      v30[0] = v14;
      if (v14)
      {
        llvm::MetadataTracking::track((uint64_t)v30, v14, 2);
        v15 = v30[0];
      }
      else
      {
        v15 = 0;
      }
      sub_1C4774EF4((uint64_t)a3, 0, (uint64_t)v15);
      if (v30[0])
        llvm::MetadataTracking::untrack((uint64_t)v30, v30[0]);
      v16 = *(_QWORD *)(v10 - 32);
      v31 = 257;
      v17 = (uint64_t)sub_1C4772EE0(a3, v8, v16, (uint64_t)v30);
LABEL_18:
      v22 = v17;
      v23 = v33;
      if (v33 >= (unint64_t)v34)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, (uint64_t)v35, v33 + 1, 16);
        v23 = v33;
      }
      v24 = (uint64_t *)((char *)v32 + 16 * v23);
      *v24 = v10;
      v24[1] = v22;
      ++v33;
      if (v13)
      {
        sub_1C4D8AE2C((uint64_t)a3, v13, v12);
      }
      else
      {
        *v4 = 0;
        v4[1] = 0;
      }
LABEL_26:
      v9 = (uint64_t *)v9[1];
    }
    while (v9);
    if ((v29 & 1) == 0)
      goto LABEL_39;
LABEL_33:
    v26 = a3[6];
    v25 = a3[7];
    if (*(unsigned __int8 *)(v8 + 16) >= 0x1Cu && v8)
      sub_1C4D8AE2C((uint64_t)a3, *(_QWORD *)(v8 + 40), *(_QWORD *)(v8 + 32));
    v27 = *v7;
    v31 = 257;
    v28 = sub_1C47721A0((uint64_t)a3, (uint64_t *)v8, v27, (uint64_t)v30);
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v7, (llvm::Value *)v28, (llvm::Value *)1);
    if (v26)
    {
      sub_1C4D8AE2C((uint64_t)a3, v26, v25);
    }
    else
    {
      *v4 = 0;
      v4[1] = 0;
    }
LABEL_39:
    v5 = v33;
  }
  while (v33);
  if (v32 != v35)
    free(v32);
}

uint64_t sub_1C57D8744(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t result;
  BOOL v8;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  while (1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    v3 = *(unsigned __int8 *)(v2 + 16);
    if (v3 == 77 || v3 == 90)
      break;
    if (v3 == 84)
    {
      v4 = *(_QWORD *)(v2 - 32);
      if (v4)
      {
        if (!*(_BYTE *)(v4 + 16) && *(_QWORD *)(v4 + 24) == *(_QWORD *)(v2 + 72) && (*(_BYTE *)(v4 + 33) & 0x20) != 0)
        {
          v5 = *(_DWORD *)(v4 + 36);
          v6 = sub_1C47860D0(v5);
          result = 1;
          if (v6 || (v5 - 1682) < 0x8C)
            return result;
          v8 = (v5 - 2713) > 0x12 || ((1 << (v5 + 103)) & 0x76055) == 0;
          if (!v8 || (v5 - 2098) < 7 || (v5 - 1996) < 2)
            return result;
        }
      }
    }
LABEL_20:
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      return 0;
  }
  if ((sub_1C57D8744() & 1) == 0)
    goto LABEL_20;
  return 1;
}

uint64_t sub_1C57D8834(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  _QWORD *v5;

  if (*(_BYTE *)(a1 + 16) != 84)
    return 0;
  v1 = *(_QWORD *)(a1 - 32);
  if (v1)
  {
    if (*(_BYTE *)(v1 + 16) || *(_QWORD *)(v1 + 24) != *(_QWORD *)(a1 + 72) || (*(_BYTE *)(v1 + 33) & 0x20) == 0)
      return 0;
    v2 = *(_DWORD *)(v1 + 36);
    v1 = 1;
    if (v2 != 1988 && v2 != 1986)
    {
      if (v2 == 1982)
      {
        v3 = *(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32);
        if (v3 && *(_BYTE *)(v3 + 16) == 16)
        {
          v5 = (_QWORD *)(v3 + 24);
          if (*(_DWORD *)(v3 + 32) >= 0x41u)
            v5 = (_QWORD *)*v5;
          if (*v5 < 4uLL)
            return 1;
        }
      }
      return 0;
    }
  }
  return v1;
}

void sub_1C57D88DC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v4;
  unsigned int v5;
  char *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unsigned __int8 *v28;
  char v29;
  unsigned __int8 *v30[4];
  __int16 v31;
  void *v32;
  unsigned int v33;
  unsigned int v34;
  _QWORD v35[18];

  v35[16] = *MEMORY[0x1E0C80C00];
  v32 = v35;
  v34 = 8;
  v35[0] = a1;
  v35[1] = a2;
  v4 = a3 + 6;
  v5 = 1;
  do
  {
    v6 = (char *)v32 + 16 * v5;
    v7 = (uint64_t **)*((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v33 = v5 - 1;
    v9 = v7[1];
    if (!v9)
      goto LABEL_39;
    v29 = 0;
    do
    {
      while (1)
      {
        v10 = v9[3];
        v11 = *(unsigned __int8 *)(v10 + 16);
        if (v10)
        {
          if (v11 == 89)
            break;
        }
        if (v10 && v11 == 92)
        {
          v13 = a3[6];
          v12 = a3[7];
          a3[6] = *(_QWORD *)(v10 + 40);
          a3[7] = v10 + 24;
          v18 = *(unsigned __int8 **)(v10 + 48);
          v30[0] = v18;
          if (v18)
          {
            llvm::MetadataTracking::track((uint64_t)v30, v18, 2);
            v19 = v30[0];
          }
          else
          {
            v19 = 0;
          }
          sub_1C4774EF4((uint64_t)a3, 0, (uint64_t)v19);
          if (v30[0])
            llvm::MetadataTracking::untrack((uint64_t)v30, v30[0]);
          v20 = *(unsigned int **)(v10 + 64);
          v21 = *(unsigned int *)(v10 + 72);
          v31 = 257;
          v17 = sub_1C506DBC4((uint64_t)a3, (uint64_t *)v8, v20, v21, (uint64_t)v30);
          goto LABEL_18;
        }
        if (v10 && v11 == 74)
        {
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v9[3], (llvm::Value *)v8, (llvm::Value *)1);
          goto LABEL_26;
        }
        v9 = (uint64_t *)v9[1];
        v29 = 1;
        if (!v9)
          goto LABEL_33;
      }
      v13 = a3[6];
      v12 = a3[7];
      a3[6] = *(_QWORD *)(v10 + 40);
      a3[7] = v10 + 24;
      v14 = *(unsigned __int8 **)(v10 + 48);
      v30[0] = v14;
      if (v14)
      {
        llvm::MetadataTracking::track((uint64_t)v30, v14, 2);
        v15 = v30[0];
      }
      else
      {
        v15 = 0;
      }
      sub_1C4774EF4((uint64_t)a3, 0, (uint64_t)v15);
      if (v30[0])
        llvm::MetadataTracking::untrack((uint64_t)v30, v30[0]);
      v16 = *(_QWORD *)(v10 - 32);
      v31 = 257;
      v17 = (uint64_t)sub_1C4772EE0(a3, v8, v16, (uint64_t)v30);
LABEL_18:
      v22 = v17;
      v23 = v33;
      if (v33 >= (unint64_t)v34)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, (uint64_t)v35, v33 + 1, 16);
        v23 = v33;
      }
      v24 = (uint64_t *)((char *)v32 + 16 * v23);
      *v24 = v10;
      v24[1] = v22;
      ++v33;
      if (v13)
      {
        sub_1C4D8AE2C((uint64_t)a3, v13, v12);
      }
      else
      {
        *v4 = 0;
        v4[1] = 0;
      }
LABEL_26:
      v9 = (uint64_t *)v9[1];
    }
    while (v9);
    if ((v29 & 1) == 0)
      goto LABEL_39;
LABEL_33:
    v26 = a3[6];
    v25 = a3[7];
    if (*(unsigned __int8 *)(v8 + 16) >= 0x1Cu && v8)
      sub_1C4D8AE2C((uint64_t)a3, *(_QWORD *)(v8 + 40), *(_QWORD *)(v8 + 32));
    v27 = *v7;
    v31 = 257;
    v28 = sub_1C4773A70((uint64_t)a3, (uint64_t *)v8, v27, (uint64_t)v30);
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v7, (llvm::Value *)v28, (llvm::Value *)1);
    if (v26)
    {
      sub_1C4D8AE2C((uint64_t)a3, v26, v25);
    }
    else
    {
      *v4 = 0;
      v4[1] = 0;
    }
LABEL_39:
    v5 = v33;
  }
  while (v33);
  if (v32 != v35)
    free(v32);
}

uint64_t sub_1C57D8BBC(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v6;

  if (!sub_1C57D7F90(a1, 0, 0))
    return 0;
  v6 = sub_1C57D8CA0(a1, a2, a3);
  sub_1C57D8464(a1, v6, a2);
  return v6;
}

void sub_1C57D8C30(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v6;

  if (sub_1C57D7F90(a1, 1, 0))
  {
    v6 = sub_1C57D8CA0(a1, a2, a3);
    sub_1C57D88DC(a1, v6, a2);
  }
}

uint64_t sub_1C57D8CA0(uint64_t a1, uint64_t *a2, int a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  uint64_t Declaration;
  uint64_t **v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _WORD v24[20];
  void *v25;
  uint64_t v26;
  _QWORD v27[9];

  v27[8] = *MEMORY[0x1E0C80C00];
  v25 = v27;
  v26 = 0x800000000;
  v6 = *(unsigned __int8 *)(a1 + 16);
  if (v6 == 84)
  {
    v7 = 0;
  }
  else if (v6 == 39)
  {
    v7 = (*(_DWORD *)(a1 + 80) + 1);
  }
  else
  {
    v7 = 2;
  }
  v8 = 0;
  v9 = *(_DWORD *)(a1 + 20);
  v10 = -(uint64_t)(v9 & 0x7FFFFFF);
  if (v9 < 0)
  {
    v22 = a1 - 32 * (v9 & 0x7FFFFFF);
    v23 = *(_QWORD *)(v22 - 8);
    if ((v23 & 0xFFFFFFFF0) != 0)
      v8 = (*(_DWORD *)(v22 - 12) - *(_DWORD *)(v22 - v23));
    else
      v8 = 0;
  }
  v11 = -32 * v7 - 32 * v8 - 32 * v10 - 32;
  if ((v11 & 0x1FFFFFFFE0) != 0)
  {
    v12 = 0;
    v13 = -(uint64_t)(v11 >> 5);
    v14 = a1;
    do
    {
      v15 = *(_QWORD *)(v14 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
      if (v12 >= HIDWORD(v26))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, (uint64_t)v27, v12 + 1, 8);
        v12 = v26;
      }
      *((_QWORD *)v25 + v12) = v15;
      v12 = v26 + 1;
      LODWORD(v26) = v26 + 1;
      v14 += 32;
    }
    while (!__CFADD__(v13++, 1));
  }
  llvm::getItrIntrinsic(1, a3);
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56) + 40), v17, 0, 0);
  if (Declaration)
    v19 = *(uint64_t ***)(Declaration + 24);
  else
    v19 = 0;
  v24[16] = 257;
  v20 = sub_1C4774778(a2, v19, Declaration, (uint64_t *)v25, v26, (uint64_t)v24, 0);
  if (v25 != v27)
    free(v25);
  return v20;
}

uint64_t sub_1C57D8EB0(uint64_t a1)
{
  int v1;
  unsigned int v2;
  _BOOL4 v3;

  v1 = *(_DWORD *)(a1 + 36);
  v2 = v1 - 2561;
  v3 = (v1 - 2471) < 4;
  return v2 < 0x10 || v3;
}

BOOL sub_1C57D8ED4(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  BOOL v29;
  unsigned int v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  __int16 v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;

  v2 = *(_QWORD *)(a2 + 8);
  if (!v2)
    return 0;
  if (*(_QWORD *)(v2 + 8))
    return 0;
  v3 = *(unsigned __int8 *)(a2 + 16);
  if (v3 < 0x1C)
    return 0;
  **a1 = a2;
  if (v3 != 85)
  {
    if (v3 == 84)
    {
      v4 = *(_QWORD *)(a2 - 32);
      if (v4)
      {
        if (!*(_BYTE *)(v4 + 16)
          && *(_QWORD *)(v4 + 24) == *(_QWORD *)(a2 + 72)
          && (*(_BYTE *)(v4 + 33) & 0x20) != 0
          && *(_DWORD *)(v4 + 36) == 274)
        {
          v5 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
          v6 = *v5;
          if (*v5)
          {
            v7 = v5[4];
            *a1[1] = v6;
            if (v7)
            {
              v8 = *(unsigned __int8 *)(v7 + 16);
              if (v8 <= 0x14)
              {
                *a1[2] = v7;
                if (v8 != 5)
                  return 1;
              }
            }
          }
        }
        v9 = *(_QWORD *)(a2 - 32);
        if (v9)
        {
          if (!*(_BYTE *)(v9 + 16)
            && *(_QWORD *)(v9 + 24) == *(_QWORD *)(a2 + 72)
            && (*(_BYTE *)(v9 + 33) & 0x20) != 0
            && *(_DWORD *)(v9 + 36) == 275)
          {
            v10 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
            v11 = *v10;
            if (*v10)
            {
              v12 = v10[4];
              *a1[4] = v11;
              if (v12)
              {
                v13 = *(unsigned __int8 *)(v12 + 16);
                if (v13 <= 0x14)
                {
                  *a1[5] = v12;
                  if (v13 != 5)
                    return 1;
                }
              }
            }
          }
          v14 = *(_QWORD *)(a2 - 32);
          if (v14)
          {
            if (!*(_BYTE *)(v14 + 16)
              && *(_QWORD *)(v14 + 24) == *(_QWORD *)(a2 + 72)
              && (*(_BYTE *)(v14 + 33) & 0x20) != 0
              && *(_DWORD *)(v14 + 36) == 305)
            {
              v15 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
              v16 = *v15;
              if (*v15)
              {
                v17 = v15[4];
                *a1[7] = v16;
                if (v17)
                {
                  v18 = *(unsigned __int8 *)(v17 + 16);
                  if (v18 <= 0x14)
                  {
                    *a1[8] = v17;
                    if (v18 != 5)
                      return 1;
                  }
                }
              }
            }
            v19 = *(_QWORD *)(a2 - 32);
            if (v19)
            {
              if (!*(_BYTE *)(v19 + 16)
                && *(_QWORD *)(v19 + 24) == *(_QWORD *)(a2 + 72)
                && (*(_BYTE *)(v19 + 33) & 0x20) != 0
                && *(_DWORD *)(v19 + 36) == 306)
              {
                v20 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
                v21 = *v20;
                if (*v20)
                {
                  v22 = v20[4];
                  goto LABEL_102;
                }
              }
            }
          }
        }
      }
    }
    return 0;
  }
  v23 = *(_QWORD *)(a2 - 96);
  if (v23 && *(_BYTE *)(v23 + 16) == 81)
  {
    v24 = *(_QWORD *)(a2 - 64);
    v25 = *(_QWORD *)(a2 - 32);
    v26 = *(_QWORD *)(v23 - 64);
    v27 = *(_QWORD *)(v23 - 32);
    v28 = v24 == v26 && v25 == v27;
    if (v28 || (v24 == v27 ? (v29 = v25 == v26) : (v29 = 0), v29))
    {
      v30 = *(_WORD *)(v23 + 18) & 0x3F;
      if (v24 != v26)
      {
        if (v30 - 32 < 8 || v30 < 0x10)
          goto LABEL_56;
        if (v30 != 40)
        {
          LOBYTE(v30) = 38;
          if (!v26)
            goto LABEL_56;
          goto LABEL_111;
        }
        LOBYTE(v30) = 39;
      }
      if (!v26)
        goto LABEL_56;
LABEL_111:
      if ((v30 & 0x3E) == 0x26)
      {
        *a1[1] = v26;
        if (v27)
        {
          v56 = *(unsigned __int8 *)(v27 + 16);
          if (v56 <= 0x14)
          {
            *a1[2] = v27;
            if (v56 != 5)
              return 1;
          }
        }
      }
    }
  }
LABEL_56:
  v32 = *(_QWORD *)(a2 - 96);
  if (v32 && *(_BYTE *)(v32 + 16) == 81)
  {
    v33 = *(_QWORD *)(a2 - 64);
    v34 = *(_QWORD *)(a2 - 32);
    v35 = *(_QWORD *)(v32 - 64);
    v36 = *(_QWORD *)(v32 - 32);
    v37 = v33 == v35 && v34 == v36;
    if (v37 || v33 == v36 && v34 == v35)
    {
      v38 = *(_WORD *)(v32 + 18) & 0x3F;
      if (v33 == v35)
      {
        v39 = *(_WORD *)(v32 + 18) & 0x3F;
      }
      else
      {
        if ((v38 - 32) < 6)
          goto LABEL_75;
        LOBYTE(v39) = 41;
        if (((1 << v38) & 0x3000000FFFFLL) != 0)
          goto LABEL_75;
        if (v38 != 38)
          LOBYTE(v39) = 40;
      }
      if (v35)
      {
        if ((v39 & 0x3E) == 0x28)
        {
          *a1[4] = v35;
          if (v36)
          {
            v40 = *(unsigned __int8 *)(v36 + 16);
            if (v40 <= 0x14)
            {
              *a1[5] = v36;
              if (v40 != 5)
                return 1;
            }
          }
        }
      }
    }
  }
LABEL_75:
  v41 = *(_QWORD *)(a2 - 96);
  if (v41 && *(_BYTE *)(v41 + 16) == 81)
  {
    if ((v42 = *(_QWORD *)(a2 - 64),
          v43 = *(_QWORD *)(a2 - 32),
          v44 = *(_QWORD *)(v41 - 64),
          v45 = *(_QWORD *)(v41 - 32),
          v42 == v44)
      && v43 == v45
      || v42 == v45 && v43 == v44)
    {
      v46 = *(_WORD *)(v41 + 18) & 0x3F;
      if (v42 == v44)
      {
        v47 = *(_WORD *)(v41 + 18) & 0x3F;
      }
      else
      {
        LOBYTE(v47) = 35;
        if (((1 << v46) & 0x3CF0000FFFFLL) != 0)
          goto LABEL_83;
        if (v46 != 36)
          LOBYTE(v47) = 34;
      }
      if (v44)
      {
        if ((v47 & 0x3E) == 0x22)
        {
          *a1[7] = v44;
          if (v45)
          {
            v54 = *(unsigned __int8 *)(v45 + 16);
            if (v54 <= 0x14)
            {
              *a1[8] = v45;
              if (v54 != 5)
                return 1;
            }
          }
        }
      }
    }
  }
LABEL_83:
  v48 = *(_QWORD *)(a2 - 96);
  if (!v48 || *(_BYTE *)(v48 + 16) != 81)
    return 0;
  v49 = *(_QWORD *)(a2 - 64);
  v50 = *(_QWORD *)(a2 - 32);
  v21 = *(_QWORD *)(v48 - 64);
  v22 = *(_QWORD *)(v48 - 32);
  if ((v49 != v21 || v50 != v22) && (v49 != v22 || v50 != v21))
    return 0;
  v51 = *(_WORD *)(v48 + 18) & 0x3F;
  if (v49 == v21)
  {
    v52 = *(_WORD *)(v48 + 18) & 0x3F;
  }
  else
  {
    LOBYTE(v52) = 37;
    if (((1 << v51) & 0x3F30000FFFFLL) != 0)
      return 0;
    if (v51 != 34)
      LOBYTE(v52) = 36;
  }
  if (!v21 || (v52 & 0x3E) != 0x24)
    return 0;
LABEL_102:
  *a1[10] = v21;
  if (!v22)
    return 0;
  v55 = *(unsigned __int8 *)(v22 + 16);
  if (v55 > 0x14)
    return 0;
  *a1[11] = v22;
  return v55 != 5;
}

void sub_1C57D93B8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C57D93CC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E817D340;
  return result;
}

void sub_1C57D93F0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E817D340;
}

BOOL sub_1C57D9408(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(_QWORD *)(a2 - 32) + 36) & 0xFFFFFFFD) == 313;
}

uint64_t sub_1C57D9420(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, llvm::FixedVectorType **a7)
{
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int PrimitiveSizeInBits;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const llvm::APInt *v26;
  uint64_t v27;
  uint64_t v28;
  llvm::ConstantInt *v29;
  unint64_t v30;
  unint64_t v31;
  llvm::ValueHandleBase *v32;
  uint64_t v33;
  uint64_t v34;
  llvm::ConstantInt *v35;
  unint64_t v36;
  unint64_t v37;
  llvm::ValueHandleBase *v38;
  uint64_t v39;
  uint64_t v40;
  llvm::ConstantInt *v41;
  unint64_t v42;
  unint64_t v43;
  llvm::ValueHandleBase *v44;
  llvm::FixedVectorType *v45;
  uint64_t v46;
  uint64_t i;
  uint64_t v48;
  llvm::ConstantInt *v49;
  unint64_t v50;
  unint64_t v51;
  llvm::ValueHandleBase *v52;
  unsigned __int8 *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  llvm::ConstantInt *v58;
  unint64_t v59;
  unint64_t v60;
  llvm::ValueHandleBase *v61;
  uint64_t v62;
  uint64_t v63;
  llvm::ConstantInt *v64;
  unint64_t v65;
  unint64_t v66;
  llvm::ValueHandleBase *v67;
  uint64_t v68;
  uint64_t v69;
  llvm::ConstantInt *v70;
  unint64_t v71;
  unint64_t v72;
  llvm::ValueHandleBase *v73;
  llvm::UndefValue *v74;
  llvm::Type *v75;
  const llvm::APInt *v76;
  llvm::UndefValue *v77;
  uint64_t v78;
  llvm::ConstantInt *v79;
  llvm::ValueHandleBase *v80;
  llvm::UndefValue *v81;
  llvm::Type *v82;
  llvm::Type *v83;
  const llvm::APInt *v84;
  unint64_t j;
  llvm::UndefValue *v86;
  uint64_t v87;
  llvm::ConstantInt *v88;
  unint64_t v89;
  unint64_t v90;
  llvm::ValueHandleBase *v91;
  uint64_t Declaration;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t **v97;
  uint64_t v98;
  int v100;
  unsigned int v101;
  unint64_t v102;
  unsigned int v103;
  __int16 v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  unsigned int v109;
  void *v110;
  uint64_t v111;
  _BYTE v112[16];
  __int16 v113;
  void *v114;
  uint64_t v115;
  _QWORD v116[7];

  v116[5] = *MEMORY[0x1E0C80C00];
  v14 = *(_DWORD *)(*(_QWORD *)(a1 - 32) + 36);
  sub_1C4953ECC(v14, (uint64_t)&v105);
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
  {
    v15 = *(_QWORD *)(a2 + 24);
    v16 = **(_QWORD **)(a2 + 16);
    if ((*(_DWORD *)(v15 + 8) & 0xFE) == 0x12)
      v15 = **(_QWORD **)(v15 + 16);
    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v15);
    v18 = *(_DWORD *)(a2 + 32);
    v19 = *(unsigned __int8 *)(v16 + 8);
  }
  else
  {
    v19 = *(_DWORD *)(a2 + 8);
    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)a2);
    v18 = 1;
  }
  v101 = PrimitiveSizeInBits >> 3;
  v114 = v116;
  v115 = 0x500000000;
  v20 = *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
  if (v20 != 1)
  {
    v100 = a5;
    v21 = v19;
    v22 = 0;
    v23 = 0;
    v24 = a1;
    do
    {
      v25 = *(_QWORD *)(v24 - 32 * v20);
      if (v22 >= HIDWORD(v115))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, (uint64_t)v116, v22 + 1, 8);
        v22 = v115;
      }
      *((_QWORD *)v114 + v22) = v25;
      v22 = v115 + 1;
      LODWORD(v115) = v115 + 1;
      ++v23;
      v20 = *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
      v24 += 32;
    }
    while (v23 < v20 - 1);
    v14 = *(_DWORD *)(*(_QWORD *)(a1 - 32) + 36);
    v19 = v21;
    a5 = v100;
  }
  if ((sub_1C5E9D850(v14) & 1) != 0)
  {
    v55 = dword_1C8661020[8 * (v18 - 1) + 4 * (v101 == 4) + 2 * (v19 == 13) + (v108 != -1)];
    if (a4 != -1)
    {
      v56 = **(_QWORD **)(a3 + 64);
      v57 = (unsigned __int16)a4;
      v58 = *(llvm::ConstantInt **)(v56 + 1936);
      v59 = *(unsigned int *)(v56 + 1944);
      LODWORD(v111) = v59 >> 8;
      if (v59 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v110, v57, 0);
      }
      else
      {
        if (v59 <= 0xFF)
          v60 = 0;
        else
          v60 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v59);
        v110 = (void *)(v60 & v57);
      }
      v61 = llvm::ConstantInt::get(v58, (llvm::LLVMContext *)&v110, v26);
      if (v111 >= 0x41 && v110)
        MEMORY[0x1CAA32F9C](v110, 0x1000C8000313F17);
      *((_QWORD *)v114 + v105) = v61;
    }
    if (a5 != -1)
    {
      v62 = **(_QWORD **)(a3 + 64);
      v63 = (unsigned __int16)a5;
      v64 = *(llvm::ConstantInt **)(v62 + 1936);
      v65 = *(unsigned int *)(v62 + 1944);
      LODWORD(v111) = v65 >> 8;
      if (v65 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v110, v63, 0);
      }
      else
      {
        if (v65 <= 0xFF)
          v66 = 0;
        else
          v66 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v65);
        v110 = (void *)(v66 & v63);
      }
      v67 = llvm::ConstantInt::get(v64, (llvm::LLVMContext *)&v110, v26);
      if (v111 >= 0x41 && v110)
        MEMORY[0x1CAA32F9C](v110, 0x1000C8000313F17);
      *((_QWORD *)v114 + v106) = v67;
    }
    if (a6 != -1)
    {
      v68 = **(_QWORD **)(a3 + 64);
      v69 = (unsigned __int16)a6;
      v70 = *(llvm::ConstantInt **)(v68 + 1936);
      v71 = *(unsigned int *)(v68 + 1944);
      LODWORD(v111) = v71 >> 8;
      if (v71 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v110, v69, 0);
      }
      else
      {
        if (v71 <= 0xFF)
          v72 = 0;
        else
          v72 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v71);
        v110 = (void *)(v72 & v69);
      }
      v73 = llvm::ConstantInt::get(v70, (llvm::LLVMContext *)&v110, v26);
      if (v111 >= 0x41 && v110)
        MEMORY[0x1CAA32F9C](v110, 0x1000C8000313F17);
      *((_QWORD *)v114 + v109) = v73;
    }
  }
  else
  {
    if (a4 != -1)
    {
      v27 = **(_QWORD **)(a3 + 64);
      v28 = (unsigned __int16)a4;
      v29 = *(llvm::ConstantInt **)(v27 + 1936);
      v30 = *(unsigned int *)(v27 + 1944);
      LODWORD(v111) = v30 >> 8;
      if (v30 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v110, v28, 0);
      }
      else
      {
        if (v30 <= 0xFF)
          v31 = 0;
        else
          v31 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v30);
        v110 = (void *)(v31 & v28);
      }
      v32 = llvm::ConstantInt::get(v29, (llvm::LLVMContext *)&v110, v26);
      if (v111 >= 0x41 && v110)
        MEMORY[0x1CAA32F9C](v110, 0x1000C8000313F17);
      *((_QWORD *)v114 + v105) = v32;
    }
    if (a5 != -1)
    {
      v33 = **(_QWORD **)(a3 + 64);
      v34 = (unsigned __int16)a5;
      v35 = *(llvm::ConstantInt **)(v33 + 1936);
      v36 = *(unsigned int *)(v33 + 1944);
      LODWORD(v111) = v36 >> 8;
      if (v36 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v110, v34, 0);
      }
      else
      {
        if (v36 <= 0xFF)
          v37 = 0;
        else
          v37 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v36);
        v110 = (void *)(v37 & v34);
      }
      v38 = llvm::ConstantInt::get(v35, (llvm::LLVMContext *)&v110, v26);
      if (v111 >= 0x41 && v110)
        MEMORY[0x1CAA32F9C](v110, 0x1000C8000313F17);
      *((_QWORD *)v114 + v106) = v38;
    }
    if (a6 != -1)
    {
      v39 = **(_QWORD **)(a3 + 64);
      v40 = (unsigned __int16)a6;
      v41 = *(llvm::ConstantInt **)(v39 + 1936);
      v42 = *(unsigned int *)(v39 + 1944);
      LODWORD(v111) = v42 >> 8;
      if (v42 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v110, v40, 0);
      }
      else
      {
        if (v42 <= 0xFF)
          v43 = 0;
        else
          v43 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v42);
        v110 = (void *)(v43 & v40);
      }
      v44 = llvm::ConstantInt::get(v41, (llvm::LLVMContext *)&v110, v26);
      if (v111 >= 0x41 && v110)
        MEMORY[0x1CAA32F9C](v110, 0x1000C8000313F17);
      *((_QWORD *)v114 + v109) = v44;
    }
    if (a7)
    {
      v45 = *a7;
      if ((*((_DWORD *)*a7 + 2) & 0xFE) == 0x12)
      {
        v46 = *((unsigned int *)v45 + 8);
        if (v46 <= 3)
        {
          v110 = v112;
          v111 = 0x400000000;
          if ((_DWORD)v46)
          {
            for (i = 0; i != v46; ++i)
            {
              v48 = **(_QWORD **)(a3 + 64);
              v49 = *(llvm::ConstantInt **)(v48 + 1960);
              v50 = *(unsigned int *)(v48 + 1968);
              v103 = v50 >> 8;
              if (v50 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v102, i, 0);
              }
              else
              {
                if (v50 <= 0xFF)
                  v51 = 0;
                else
                  v51 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v50);
                v102 = v51 & i;
              }
              v52 = llvm::ConstantInt::get(v49, (llvm::LLVMContext *)&v102, v26);
              if (v103 >= 0x41 && v102)
                MEMORY[0x1CAA32F9C](v102, 0x1000C8000313F17);
              v104 = 257;
              v53 = sub_1C4772EE0((uint64_t *)a3, (uint64_t)a7, (uint64_t)v52, (uint64_t)&v102);
              v54 = v111;
              if (v111 >= (unint64_t)HIDWORD(v111))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v110, (uint64_t)v112, v111 + 1, 8);
                v54 = v111;
              }
              *((_QWORD *)v110 + v54) = v53;
              LODWORD(v111) = v111 + 1;
            }
          }
          llvm::FixedVectorType::get(*((llvm::FixedVectorType **)v45 + 3), (llvm::Type *)4);
          a7 = (llvm::FixedVectorType **)llvm::UndefValue::get(v81, v82);
          for (j = 0; j != 4; ++j)
          {
            if (j >= v111)
              v86 = llvm::UndefValue::get(*((llvm::UndefValue **)v45 + 3), v83);
            else
              v86 = (llvm::UndefValue *)*((_QWORD *)v110 + j);
            v87 = **(_QWORD **)(a3 + 64);
            v88 = *(llvm::ConstantInt **)(v87 + 1960);
            v89 = *(unsigned int *)(v87 + 1968);
            v103 = v89 >> 8;
            if (v89 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v102, j, 0);
            }
            else
            {
              if (v89 <= 0xFF)
                v90 = 0;
              else
                v90 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v89);
              v102 = v90 & j;
            }
            v91 = llvm::ConstantInt::get(v88, (llvm::LLVMContext *)&v102, v84);
            if (v103 >= 0x41 && v102)
              MEMORY[0x1CAA32F9C](v102, 0x1000C8000313F17);
            v104 = 257;
            a7 = (llvm::FixedVectorType **)sub_1C4773154((uint64_t *)a3, (uint64_t)a7, (uint64_t)v86, (uint64_t)v91, (uint64_t)&v102);
          }
          if (v110 != v112)
            free(v110);
        }
      }
      else
      {
        llvm::FixedVectorType::get(*a7, (llvm::Type *)4);
        v77 = llvm::UndefValue::get(v74, v75);
        v78 = **(_QWORD **)(a3 + 64);
        v79 = *(llvm::ConstantInt **)(v78 + 1960);
        LODWORD(v111) = *(_DWORD *)(v78 + 1968) >> 8;
        if (v111 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v110, 0, 0);
        else
          v110 = 0;
        v80 = llvm::ConstantInt::get(v79, (llvm::LLVMContext *)&v110, v76);
        if (v111 >= 0x41 && v110)
          MEMORY[0x1CAA32F9C](v110, 0x1000C8000313F17);
        v113 = 257;
        a7 = (llvm::FixedVectorType **)sub_1C4773154((uint64_t *)a3, (uint64_t)v77, (uint64_t)a7, (uint64_t)v80, (uint64_t)&v110);
      }
      *((_QWORD *)v114 + v107) = a7;
    }
    v55 = dword_1C86610A0[4 * (v101 == 4) + 2 * (v19 == 13) + (v108 != -1)];
  }
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56) + 40), v55, 0, 0);
  v93 = 0;
  v95 = *(_QWORD *)(a3 + 48);
  v94 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a3 + 48) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a3 + 56) = a1 + 24;
  v96 = *(void **)(a1 + 48);
  v110 = v96;
  if (v96)
  {
    llvm::MetadataTracking::track((uint64_t)&v110, (unsigned __int8 *)v96, 2);
    v93 = v110;
  }
  sub_1C4774EF4(a3, 0, (uint64_t)v93);
  if (v110)
    llvm::MetadataTracking::untrack((uint64_t)&v110, (unsigned __int8 *)v110);
  v97 = *(uint64_t ***)(Declaration + 24);
  v113 = 257;
  v98 = sub_1C4774778((uint64_t *)a3, v97, Declaration, (uint64_t *)v114, v115, (uint64_t)&v110, 0);
  sub_1C4D8AE2C(a3, v95, v94);
  if (v114 != v116)
    free(v114);
  return v98;
}

double sub_1C57D9E18(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  uint64_t v12;
  uint64_t v13;

  v3 = sub_1C57DA3D0(a1, a2);
  v4 = *(_QWORD *)a1;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_QWORD *)a1 + 112 * v5;
  v7 = (void *)(v6 + 32);
  *(_QWORD *)v6 = v6 + 32;
  v9 = *(_QWORD *)v3;
  v8 = *(_QWORD *)(v3 + 8);
  if (v8 == *(_QWORD *)v3)
  {
    *(_QWORD *)(v6 + 8) = v7;
    v10 = *(unsigned int *)(v3 + 20);
    if ((_DWORD)v10)
      memmove(v7, *(const void **)(v3 + 8), 8 * v10);
  }
  else
  {
    *(_QWORD *)(v6 + 8) = v8;
    *(_QWORD *)(v3 + 8) = v9;
  }
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v3 + 16);
  *(_DWORD *)(v6 + 24) = *(_DWORD *)(v3 + 24);
  *(_QWORD *)&result = 8;
  *(_QWORD *)(v3 + 16) = 8;
  *(_DWORD *)(v3 + 24) = 0;
  v12 = v4 + 112 * v5;
  v13 = *(_QWORD *)(v3 + 96);
  *(_BYTE *)(v12 + 104) = *(_BYTE *)(v3 + 104);
  *(_QWORD *)(v12 + 96) = v13;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

char **sub_1C57D9ED8(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  char *v11;
  int v12;
  char *v13;
  void *v14;
  const void *v15;
  const void *v16;
  int v17;
  unsigned int v18;
  char *v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v23;
  llvm::SmallPtrSetImplBase *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t **v30;
  unint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  int v39;
  char *v40;
  void *v41;
  const void *v42;
  const void *v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v64;
  uint64_t v65;
  _QWORD v66[114];

  v66[112] = *MEMORY[0x1E0C80C00];
  v64 = (char *)v66;
  v65 = 0x800000000;
  v3 = *(_QWORD *)a2;
  v4 = *(unsigned int *)(a2 + 8);
  v5 = *(_QWORD *)a2 + 112 * v4;
  v6 = 126 - 2 * __clz(v4);
  if ((_DWORD)v4)
    v7 = v6;
  else
    v7 = 0;
  sub_1C57DA57C(v3, v5, v7, 1);
  v8 = 0;
  v9 = *(_DWORD *)(a2 + 8);
  if (v9 != 1)
  {
    v8 = 0;
    for (i = 1; v9 != (_DWORD)i; ++i)
    {
      v23 = *(_QWORD *)a2;
      if (!*(_BYTE *)(*(_QWORD *)a2 + 112 * i + 104))
      {
        v24 = (llvm::SmallPtrSetImplBase *)(v23 + 112 * v8);
        v25 = (_QWORD *)*((_QWORD *)v24 + 1);
        if (v25 == *(_QWORD **)v24)
          v26 = 20;
        else
          v26 = 16;
        v27 = *(unsigned int *)((char *)v24 + v26);
        if ((_DWORD)v27)
        {
          v28 = 8 * v27;
          v29 = &v25[v27];
          while (*v25 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v25;
            v28 -= 8;
            if (!v28)
            {
              v25 = v29;
              break;
            }
          }
        }
        v30 = (unint64_t **)(v23 + 112 * i);
        v31 = v30[1];
        if (v31 == *v30)
          v32 = 20;
        else
          v32 = 16;
        v33 = *(unsigned int *)((char *)v30 + v32);
        v34 = &v31[v33];
        v35 = v31;
        if ((_DWORD)v33)
        {
          v36 = 8 * v33;
          v35 = v31;
          while (*v35 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v35;
            v36 -= 8;
            if (!v36)
            {
              v35 = &v31[v33];
              break;
            }
          }
        }
        if (*(_QWORD *)*v25 == *(_QWORD *)*v35 && !*(_BYTE *)(v23 + 112 * v8 + 104))
        {
          v48 = v23 + 112 * v8;
          v49 = *(_DWORD *)(v48 + 96);
          v50 = *(_DWORD *)(v23 + 112 * i + 96);
          v51 = (unsigned int *)(v48 + 100);
          if (v49 == v50)
          {
            v52 = *(_DWORD *)(v23 + 112 * i + 100);
            if (*v51 > v52)
              v52 = *v51;
            *v51 = v52;
            if ((_DWORD)v33)
            {
              v53 = 8 * v33;
              while (*v31 >= 0xFFFFFFFFFFFFFFFELL)
              {
                ++v31;
                v53 -= 8;
                if (!v53)
                  goto LABEL_43;
              }
            }
            if (v31 != v34)
            {
              v55 = *v31;
LABEL_61:
              sub_1C4774094(v24, v55);
              v56 = v31 + 1;
              while (v56 != v34)
              {
                v57 = *v56++;
                v55 = v57;
                if (v57 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  v31 = v56 - 1;
                  goto LABEL_61;
                }
              }
            }
            continue;
          }
          if (*v51 + v49 == v50)
          {
            *v51 += *(_DWORD *)(v23 + 112 * i + 100);
            if ((_DWORD)v33)
            {
              v54 = 8 * v33;
              while (*v31 >= 0xFFFFFFFFFFFFFFFELL)
              {
                ++v31;
                v54 -= 8;
                if (!v54)
                  goto LABEL_43;
              }
            }
            if (v31 != v34)
            {
              v58 = *v31;
LABEL_67:
              sub_1C4774094(v24, v58);
              v59 = v31 + 1;
              while (v59 != v34)
              {
                v60 = *v59++;
                v58 = v60;
                if (v60 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  v31 = v59 - 1;
                  goto LABEL_67;
                }
              }
            }
            continue;
          }
        }
        v37 = sub_1C57DA3D0((uint64_t)&v64, v23 + 112 * v8);
        v38 = v64;
        v39 = v65;
        v40 = &v64[112 * v65];
        v41 = v40 + 32;
        *(_QWORD *)v40 = v40 + 32;
        v42 = *(const void **)(v37 + 8);
        if (v42 == *(const void **)v37)
        {
          *((_QWORD *)v40 + 1) = v41;
        }
        else
        {
          v62 = *(unsigned int *)(v37 + 16);
          v41 = malloc_type_malloc(8 * v62, 0x4065EBACuLL);
          if (!v41)
          {
            if ((_DWORD)v62)
              goto LABEL_80;
            v41 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
            if (!v41)
              goto LABEL_80;
          }
          *((_QWORD *)v40 + 1) = v41;
          v42 = *(const void **)v37;
        }
        *((_DWORD *)v40 + 4) = *(_DWORD *)(v37 + 16);
        v43 = *(const void **)(v37 + 8);
        v44 = *(_DWORD *)(v37 + 20);
        if (v43 == v42)
          v45 = *(_DWORD *)(v37 + 20);
        else
          v45 = *(_DWORD *)(v37 + 16);
        if (v45)
        {
          memmove(v41, v43, 8 * v45);
          v44 = *(_DWORD *)(v37 + 20);
        }
        *((_DWORD *)v40 + 5) = v44;
        *((_DWORD *)v40 + 6) = *(_DWORD *)(v37 + 24);
        v46 = (uint64_t)&v38[112 * v39 + 96];
        v8 = i;
        v47 = *(_QWORD *)(v37 + 96);
        *(_BYTE *)(v46 + 8) = *(_BYTE *)(v37 + 104);
        *(_QWORD *)v46 = v47;
        LODWORD(v65) = v65 + 1;
      }
LABEL_43:
      ;
    }
  }
  v10 = sub_1C57DA3D0((uint64_t)&v64, *(_QWORD *)a2 + 112 * v8);
  v11 = v64;
  v12 = v65;
  v13 = &v64[112 * v65];
  v14 = v13 + 32;
  *(_QWORD *)v13 = v13 + 32;
  v15 = *(const void **)(v10 + 8);
  if (v15 == *(const void **)v10)
  {
    *((_QWORD *)v13 + 1) = v14;
  }
  else
  {
    v61 = *(unsigned int *)(v10 + 16);
    v14 = malloc_type_malloc(8 * v61, 0x4065EBACuLL);
    if (!v14 && ((_DWORD)v61 || (v14 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_80:
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    *((_QWORD *)v13 + 1) = v14;
    v15 = *(const void **)v10;
  }
  *((_DWORD *)v13 + 4) = *(_DWORD *)(v10 + 16);
  v16 = *(const void **)(v10 + 8);
  v17 = *(_DWORD *)(v10 + 20);
  if (v16 == v15)
    v18 = *(_DWORD *)(v10 + 20);
  else
    v18 = *(_DWORD *)(v10 + 16);
  if (v18)
  {
    memmove(v14, v16, 8 * v18);
    v17 = *(_DWORD *)(v10 + 20);
  }
  *((_DWORD *)v13 + 5) = v17;
  *((_DWORD *)v13 + 6) = *(_DWORD *)(v10 + 24);
  v19 = &v11[112 * v12];
  v20 = *(_QWORD *)(v10 + 96);
  v19[104] = *(_BYTE *)(v10 + 104);
  *((_QWORD *)v19 + 12) = v20;
  LODWORD(v19) = v65;
  *a1 = a1 + 2;
  a1[1] = 0x800000000;
  LODWORD(v65) = (_DWORD)v19 + 1;
  if ((_DWORD)v19 != -1)
    sub_1C57DC6B4((uint64_t)a1, (uint64_t *)&v64);
  return sub_1C57DA360(&v64);
}

char **sub_1C57DA360(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 112 * v3;
    do
    {
      v5 = *(void **)&v2[v4 - 104];
      if (v5 != *(void **)&v2[v4 - 112])
        free(v5);
      v4 -= 112;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

unint64_t sub_1C57DA3D0(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 112 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_1C57DA438(a1, v5);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_1C57DA438(a1, v5);
    }
  }
  return a2;
}

void sub_1C57DA438(uint64_t a1, unint64_t a2)
{
  char *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void **v8;
  char *v9;
  char *v10;
  const void *v11;
  const void *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  int v20;
  unint64_t v21;

  v21 = 0;
  v3 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 112, &v21);
  v4 = *(_BYTE **)a1;
  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = 112 * v5;
    do
    {
      v8 = (const void **)&v4[v6];
      v9 = &v3[v6];
      v10 = &v3[v6 + 32];
      *(_QWORD *)&v3[v6] = v10;
      v12 = *(const void **)&v4[v6];
      v11 = *(const void **)&v4[v6 + 8];
      if (v11 == v12)
      {
        *((_QWORD *)v9 + 1) = v10;
        v13 = *((unsigned int *)v8 + 5);
        if ((_DWORD)v13)
          memmove(v10, v8[1], 8 * v13);
      }
      else
      {
        *((_QWORD *)v9 + 1) = v11;
        v8[1] = v12;
      }
      v14 = &v4[v6];
      v15 = &v3[v6];
      *((_QWORD *)v15 + 2) = *(_QWORD *)&v4[v6 + 16];
      *((_DWORD *)v15 + 6) = *(_DWORD *)&v4[v6 + 24];
      *((_QWORD *)v14 + 2) = 8;
      *((_DWORD *)v14 + 6) = 0;
      v16 = *(_QWORD *)&v4[v6 + 96];
      v15[104] = v4[v6 + 104];
      *((_QWORD *)v15 + 12) = v16;
      v6 += 112;
    }
    while (v7 != v6);
    v4 = *(_BYTE **)a1;
    v17 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v17)
    {
      v18 = 112 * v17;
      do
      {
        v19 = *(void **)&v4[v18 - 104];
        if (v19 != *(void **)&v4[v18 - 112])
          free(v19);
        v18 -= 112;
      }
      while (v18);
      v4 = *(_BYTE **)a1;
    }
  }
  v20 = v21;
  if (v4 != (_BYTE *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v20;
}

void sub_1C57DA57C(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  _QWORD *v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  _QWORD *v70;
  uint64_t *v71;
  const void *v72;
  const void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  const void *v78;
  const void *v79;
  uint64_t v80;
  uint64_t *v81;
  const void *v82;
  const void *v83;
  uint64_t v84;
  uint64_t *v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t *v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  int64_t v101;
  int64_t v102;
  int64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  unint64_t v108;
  unint64_t v109;
  unsigned int v110;
  uint64_t v111;
  const void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  double *v122;
  double v123;
  double *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t *v136;
  double *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  double v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v163;
  uint64_t v164;
  unint64_t v165;
  _BYTE *v166;
  _BYTE *v167;
  uint64_t v168;
  int v169;
  _BYTE v170[64];
  uint64_t v171;
  char v172;
  _BYTE *v173;
  _BYTE *v174;
  uint64_t v175;
  int v176;
  _BYTE v177[64];
  uint64_t v178;
  char v179;

void sub_1C57DB870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  const void *v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  int v34;
  int v35;
  int v36;
  _BYTE v37[64];
  uint64_t v38;
  char v39;

  v7 = a2 + 96;
  v6 = *(_DWORD *)(a2 + 96);
  v8 = a1 + 96;
  v10 = a3 + 96;
  v9 = *(_DWORD *)(a3 + 96);
  if (v6 >= *(_DWORD *)(a1 + 96))
  {
    if (v9 < v6)
    {
      v32 = v37;
      v17 = *(double *)a2;
      v16 = *(const void **)(a2 + 8);
      if (v16 == *(const void **)a2)
      {
        v33 = v37;
        v18 = *(unsigned int *)(a2 + 20);
        if ((_DWORD)v18)
          memmove(v37, v16, 8 * v18);
      }
      else
      {
        v33 = *(_BYTE **)(a2 + 8);
        *(double *)(a2 + 8) = v17;
        LODWORD(v18) = *(_DWORD *)(a2 + 20);
      }
      v34 = *(_DWORD *)(a2 + 16);
      v35 = v18;
      v36 = *(_DWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 16) = 8;
      *(_DWORD *)(a2 + 24) = 0;
      v38 = *(_QWORD *)v7;
      v39 = *(_BYTE *)(v7 + 8);
      if (a3 != a2)
        llvm::SmallPtrSetImplBase::MoveFrom(a2, 8, (double *)a3);
      v19 = *(_QWORD *)v10;
      *(_BYTE *)(v7 + 8) = *(_BYTE *)(v10 + 8);
      *(_QWORD *)v7 = v19;
      if (&v32 != (_BYTE **)a3)
        llvm::SmallPtrSetImplBase::MoveFrom(a3, 8, (double *)&v32);
      *(_QWORD *)v10 = v38;
      *(_BYTE *)(v10 + 8) = v39;
      if (v33 != v32)
        free(v33);
      if (*(_DWORD *)v7 < *(_DWORD *)v8)
      {
        v32 = v37;
        v21 = *(_QWORD *)a1;
        v20 = *(const void **)(a1 + 8);
        if (v20 == *(const void **)a1)
        {
          v33 = v37;
          v22 = *(unsigned int *)(a1 + 20);
          if ((_DWORD)v22)
            memmove(v37, v20, 8 * v22);
        }
        else
        {
          v33 = *(_BYTE **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v21;
          LODWORD(v22) = *(_DWORD *)(a1 + 20);
        }
        v34 = *(_DWORD *)(a1 + 16);
        v35 = v22;
        v36 = *(_DWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 16) = 8;
        *(_DWORD *)(a1 + 24) = 0;
        v38 = *(_QWORD *)v8;
        v39 = *(_BYTE *)(v8 + 8);
        if (a2 != a1)
          llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)a2);
        v23 = *(_QWORD *)v7;
        *(_BYTE *)(v8 + 8) = *(_BYTE *)(v7 + 8);
        *(_QWORD *)v8 = v23;
        if (&v32 != (_BYTE **)a2)
          llvm::SmallPtrSetImplBase::MoveFrom(a2, 8, (double *)&v32);
        *(_QWORD *)v7 = v38;
        *(_BYTE *)(v7 + 8) = v39;
        goto LABEL_49;
      }
    }
  }
  else
  {
    if (v9 < v6)
    {
      v32 = v37;
      v12 = *(_QWORD *)a1;
      v11 = *(const void **)(a1 + 8);
      if (v11 == *(const void **)a1)
      {
        v33 = v37;
        v13 = *(unsigned int *)(a1 + 20);
        if ((_DWORD)v13)
          memmove(v37, v11, 8 * v13);
      }
      else
      {
        v33 = *(_BYTE **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v12;
        LODWORD(v13) = *(_DWORD *)(a1 + 20);
      }
      v34 = *(_DWORD *)(a1 + 16);
      v35 = v13;
      v36 = *(_DWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 16) = 8;
      *(_DWORD *)(a1 + 24) = 0;
      v38 = *(_QWORD *)v8;
      v39 = *(_BYTE *)(v8 + 8);
      if (a3 != a1)
        llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)a3);
      v14 = *(_QWORD *)v10;
      *(_BYTE *)(v8 + 8) = *(_BYTE *)(v10 + 8);
      *(_QWORD *)v8 = v14;
      if (&v32 != (_BYTE **)a3)
        llvm::SmallPtrSetImplBase::MoveFrom(a3, 8, (double *)&v32);
      *(_QWORD *)v10 = v38;
      v15 = v39;
LABEL_48:
      *(_BYTE *)(v10 + 8) = v15;
LABEL_49:
      if (v33 != v32)
        free(v33);
      return;
    }
    v32 = v37;
    v25 = *(_QWORD *)a1;
    v24 = *(const void **)(a1 + 8);
    if (v24 == *(const void **)a1)
    {
      v33 = v37;
      v26 = *(unsigned int *)(a1 + 20);
      if ((_DWORD)v26)
        memmove(v37, v24, 8 * v26);
    }
    else
    {
      v33 = *(_BYTE **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v25;
      LODWORD(v26) = *(_DWORD *)(a1 + 20);
    }
    v34 = *(_DWORD *)(a1 + 16);
    v35 = v26;
    v36 = *(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = 8;
    *(_DWORD *)(a1 + 24) = 0;
    v38 = *(_QWORD *)v8;
    v39 = *(_BYTE *)(v8 + 8);
    if (a2 != a1)
      llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)a2);
    v27 = *(_QWORD *)v7;
    *(_BYTE *)(v8 + 8) = *(_BYTE *)(v7 + 8);
    *(_QWORD *)v8 = v27;
    if (&v32 != (_BYTE **)a2)
      llvm::SmallPtrSetImplBase::MoveFrom(a2, 8, (double *)&v32);
    *(_QWORD *)v7 = v38;
    *(_BYTE *)(v7 + 8) = v39;
    if (v33 != v32)
      free(v33);
    if (*(_DWORD *)v10 < *(_DWORD *)v7)
    {
      v32 = v37;
      v29 = *(double *)a2;
      v28 = *(const void **)(a2 + 8);
      if (v28 == *(const void **)a2)
      {
        v33 = v37;
        v30 = *(unsigned int *)(a2 + 20);
        if ((_DWORD)v30)
          memmove(v37, v28, 8 * v30);
      }
      else
      {
        v33 = *(_BYTE **)(a2 + 8);
        *(double *)(a2 + 8) = v29;
        LODWORD(v30) = *(_DWORD *)(a2 + 20);
      }
      v34 = *(_DWORD *)(a2 + 16);
      v35 = v30;
      v36 = *(_DWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 16) = 8;
      *(_DWORD *)(a2 + 24) = 0;
      v38 = *(_QWORD *)v7;
      v39 = *(_BYTE *)(v7 + 8);
      if (a3 != a2)
        llvm::SmallPtrSetImplBase::MoveFrom(a2, 8, (double *)a3);
      v31 = *(_QWORD *)v10;
      *(_BYTE *)(v7 + 8) = *(_BYTE *)(v10 + 8);
      *(_QWORD *)v7 = v31;
      if (&v32 != (_BYTE **)a3)
        llvm::SmallPtrSetImplBase::MoveFrom(a3, 8, (double *)&v32);
      *(_QWORD *)v10 = v38;
      v15 = v39;
      goto LABEL_48;
    }
  }
}

BOOL sub_1C57DBD04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t *v6;
  uint64_t *v7;
  double *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  double *v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t *v27;
  const void *v28;
  const void *v29;
  uint64_t v30;
  double v31;
  uint64_t *v32;
  const void *v33;
  const void *v34;
  uint64_t v35;
  uint64_t *v36;
  const void *v37;
  const void *v38;
  uint64_t v39;
  uint64_t *v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  int v46;
  int v47;
  int v48;
  _BYTE v49[64];
  uint64_t v50;
  char v51;

  v4 = 0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (uint64_t *)(a2 - 16);
      v7 = (uint64_t *)(a1 + 96);
      if (*(_DWORD *)(a2 - 16) < *(_DWORD *)(a1 + 96))
      {
        v8 = (double *)(a2 - 112);
        v44 = v49;
        v10 = *(_QWORD *)a1;
        v9 = *(const void **)(a1 + 8);
        if (v9 == *(const void **)a1)
        {
          v45 = v49;
          v11 = *(unsigned int *)(a1 + 20);
          if ((_DWORD)v11)
            memmove(v49, v9, 8 * v11);
        }
        else
        {
          v45 = *(_BYTE **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v10;
          LODWORD(v11) = *(_DWORD *)(a1 + 20);
        }
        v46 = *(_DWORD *)(a1 + 16);
        v47 = v11;
        v48 = *(_DWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 16) = 8;
        *(_DWORD *)(a1 + 24) = 0;
        v50 = *v7;
        v51 = *(_BYTE *)(a1 + 104);
        if (v8 != (double *)a1)
          llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, v8);
        v12 = *v6;
        *(_BYTE *)(a1 + 104) = *((_BYTE *)v6 + 8);
        *v7 = v12;
        if (&v44 != (_BYTE **)v8)
          llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)v8, 8, (double *)&v44);
        *v6 = v50;
        *((_BYTE *)v6 + 8) = v51;
        goto LABEL_11;
      }
      return result;
    case 3:
      sub_1C57DB870(a1, a1 + 112, a2 - 112);
      return 1;
    case 4:
      sub_1C57DC3B4(a1, a1 + 112, a1 + 224, a2 - 112);
      return 1;
    case 5:
      v23 = (uint64_t *)(a1 + 336);
      sub_1C57DC3B4(a1, a1 + 112, a1 + 224, a1 + 336);
      v25 = *(_DWORD *)(a2 - 16);
      v24 = (double *)(a2 - 16);
      if (v25 < *(_DWORD *)(a1 + 432))
      {
        v26 = (uint64_t *)(v24 - 12);
        v27 = (uint64_t *)(a1 + 432);
        v44 = v49;
        v29 = *(const void **)(a1 + 336);
        v28 = *(const void **)(a1 + 344);
        if (v28 == v29)
        {
          v45 = v49;
          v30 = *(unsigned int *)(a1 + 356);
          if ((_DWORD)v30)
            memmove(v49, v28, 8 * v30);
        }
        else
        {
          v45 = *(_BYTE **)(a1 + 344);
          *(_QWORD *)(a1 + 344) = v29;
          LODWORD(v30) = *(_DWORD *)(a1 + 356);
        }
        v46 = *(_DWORD *)(a1 + 352);
        v47 = v30;
        v48 = *(_DWORD *)(a1 + 360);
        *(_QWORD *)(a1 + 352) = 8;
        *(_DWORD *)(a1 + 360) = 0;
        v50 = *v27;
        v51 = *(_BYTE *)(a1 + 440);
        if (v26 != v23)
          llvm::SmallPtrSetImplBase::MoveFrom(a1 + 336, 8, v24 - 12);
        v31 = *v24;
        *(_BYTE *)(a1 + 440) = *((_BYTE *)v24 + 8);
        *(double *)v27 = v31;
        if (&v44 != (_BYTE **)v26)
          llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(v24 - 12), 8, (double *)&v44);
        *(_QWORD *)v24 = v50;
        *((_BYTE *)v24 + 8) = v51;
        if (v45 != v44)
          free(v45);
        if (*(_DWORD *)(a1 + 432) < *(_DWORD *)(a1 + 320))
        {
          v32 = (uint64_t *)(a1 + 320);
          v44 = v49;
          v34 = *(const void **)(a1 + 224);
          v33 = *(const void **)(a1 + 232);
          if (v33 == v34)
          {
            v45 = v49;
            v35 = *(unsigned int *)(a1 + 244);
            if ((_DWORD)v35)
              memmove(v49, v33, 8 * v35);
          }
          else
          {
            v45 = *(_BYTE **)(a1 + 232);
            *(_QWORD *)(a1 + 232) = v34;
            LODWORD(v35) = *(_DWORD *)(a1 + 244);
          }
          v46 = *(_DWORD *)(a1 + 240);
          v47 = v35;
          v48 = *(_DWORD *)(a1 + 248);
          *(_QWORD *)(a1 + 240) = 8;
          *(_DWORD *)(a1 + 248) = 0;
          v50 = *v32;
          v51 = *(_BYTE *)(a1 + 328);
          llvm::SmallPtrSetImplBase::MoveFrom(a1 + 224, 8, (double *)(a1 + 336));
          *v32 = *v27;
          *(_BYTE *)(a1 + 328) = *(_BYTE *)(a1 + 440);
          if (&v44 != (_BYTE **)v23)
            llvm::SmallPtrSetImplBase::MoveFrom(a1 + 336, 8, (double *)&v44);
          *v27 = v50;
          *(_BYTE *)(a1 + 440) = v51;
          if (v45 != v44)
            free(v45);
          v36 = (uint64_t *)(a1 + 208);
          if (*(_DWORD *)(a1 + 320) < *(_DWORD *)(a1 + 208))
          {
            v44 = v49;
            v38 = *(const void **)(a1 + 112);
            v37 = *(const void **)(a1 + 120);
            if (v37 == v38)
            {
              v45 = v49;
              v39 = *(unsigned int *)(a1 + 132);
              if ((_DWORD)v39)
                memmove(v49, v37, 8 * v39);
            }
            else
            {
              v45 = *(_BYTE **)(a1 + 120);
              *(_QWORD *)(a1 + 120) = v38;
              LODWORD(v39) = *(_DWORD *)(a1 + 132);
            }
            v46 = *(_DWORD *)(a1 + 128);
            v47 = v39;
            v48 = *(_DWORD *)(a1 + 136);
            *(_QWORD *)(a1 + 128) = 8;
            *(_DWORD *)(a1 + 136) = 0;
            v50 = *v36;
            v51 = *(_BYTE *)(a1 + 216);
            llvm::SmallPtrSetImplBase::MoveFrom(a1 + 112, 8, (double *)(a1 + 224));
            *v36 = *v32;
            *(_BYTE *)(a1 + 216) = *(_BYTE *)(a1 + 328);
            if (&v44 != (_BYTE **)(a1 + 224))
              llvm::SmallPtrSetImplBase::MoveFrom(a1 + 224, 8, (double *)&v44);
            *v32 = v50;
            *(_BYTE *)(a1 + 328) = v51;
            if (v45 != v44)
              free(v45);
            v40 = (uint64_t *)(a1 + 96);
            if (*(_DWORD *)(a1 + 208) < *(_DWORD *)(a1 + 96))
            {
              v44 = v49;
              v42 = *(_QWORD *)a1;
              v41 = *(const void **)(a1 + 8);
              if (v41 == *(const void **)a1)
              {
                v45 = v49;
                v43 = *(unsigned int *)(a1 + 20);
                if ((_DWORD)v43)
                  memmove(v49, v41, 8 * v43);
              }
              else
              {
                v45 = *(_BYTE **)(a1 + 8);
                *(_QWORD *)(a1 + 8) = v42;
                LODWORD(v43) = *(_DWORD *)(a1 + 20);
              }
              v46 = *(_DWORD *)(a1 + 16);
              v47 = v43;
              v48 = *(_DWORD *)(a1 + 24);
              *(_QWORD *)(a1 + 16) = 8;
              *(_DWORD *)(a1 + 24) = 0;
              v50 = *v40;
              v51 = *(_BYTE *)(a1 + 104);
              llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)(a1 + 112));
              *v40 = *v36;
              *(_BYTE *)(a1 + 104) = *(_BYTE *)(a1 + 216);
              if (&v44 != (_BYTE **)(a1 + 112))
                llvm::SmallPtrSetImplBase::MoveFrom(a1 + 112, 8, (double *)&v44);
              *v36 = v50;
              *(_BYTE *)(a1 + 216) = v51;
LABEL_11:
              if (v45 != v44)
                free(v45);
            }
          }
        }
      }
      return 1;
    default:
      v13 = a1 + 224;
      sub_1C57DB870(a1, a1 + 112, a1 + 224);
      v14 = a1 + 336;
      if (a1 + 336 == a2)
        return 1;
      v15 = 0;
      v16 = 0;
      break;
  }
  while (1)
  {
    if (*(_DWORD *)(v14 + 96) < *(_DWORD *)(v13 + 96))
    {
      v44 = v49;
      v18 = *(const void **)v14;
      v17 = *(const void **)(v14 + 8);
      if (v17 == *(const void **)v14)
      {
        v45 = v49;
        v19 = *(unsigned int *)(v14 + 20);
        if ((_DWORD)v19)
          memmove(v49, v17, 8 * v19);
      }
      else
      {
        v45 = *(_BYTE **)(v14 + 8);
        *(_QWORD *)(v14 + 8) = v18;
        LODWORD(v19) = *(_DWORD *)(v14 + 20);
      }
      v46 = *(_DWORD *)(v14 + 16);
      v47 = v19;
      v48 = *(_DWORD *)(v14 + 24);
      *(_QWORD *)(v14 + 16) = 8;
      *(_DWORD *)(v14 + 24) = 0;
      v50 = *(_QWORD *)(v14 + 96);
      v20 = v15;
      v51 = *(_BYTE *)(v14 + 104);
      while (1)
      {
        v21 = a1 + v20;
        llvm::SmallPtrSetImplBase::MoveFrom(a1 + v20 + 336, 8, (double *)(a1 + v20 + 224));
        *(_QWORD *)(v21 + 432) = *(_QWORD *)(v21 + 320);
        *(_BYTE *)(v21 + 440) = *(_BYTE *)(v21 + 328);
        if (v20 == -224)
          break;
        v20 -= 112;
        if (v50 >= *(_DWORD *)(v21 + 208))
        {
          v22 = (_QWORD *)(a1 + v20 + 336);
          goto LABEL_24;
        }
      }
      v22 = (_QWORD *)a1;
LABEL_24:
      if (&v44 != v22)
        llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)v22, 8, (double *)&v44);
      *(_QWORD *)(v21 + 320) = v50;
      *(_BYTE *)(v21 + 328) = v51;
      if (v45 != v44)
        free(v45);
      if (++v16 == 8)
        return v14 + 112 == a2;
    }
    v13 = v14;
    v15 += 112;
    v14 += 112;
    if (v14 == a2)
      return 1;
  }
}

void sub_1C57DC3B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t *v9;
  const void *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  const void *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  int v26;
  int v27;
  int v28;
  _BYTE v29[64];
  uint64_t v30;
  char v31;

  sub_1C57DB870(a1, a2, a3);
  v8 = (uint64_t *)(a4 + 96);
  v9 = (uint64_t *)(a3 + 96);
  if (*(_DWORD *)(a4 + 96) < *(_DWORD *)(a3 + 96))
  {
    v24 = v29;
    v11 = *(double *)a3;
    v10 = *(const void **)(a3 + 8);
    if (v10 == *(const void **)a3)
    {
      v25 = v29;
      v12 = *(unsigned int *)(a3 + 20);
      if ((_DWORD)v12)
        memmove(v29, v10, 8 * v12);
    }
    else
    {
      v25 = *(_BYTE **)(a3 + 8);
      *(double *)(a3 + 8) = v11;
      LODWORD(v12) = *(_DWORD *)(a3 + 20);
    }
    v26 = *(_DWORD *)(a3 + 16);
    v27 = v12;
    v28 = *(_DWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 16) = 8;
    *(_DWORD *)(a3 + 24) = 0;
    v30 = *v9;
    v31 = *(_BYTE *)(a3 + 104);
    if (a4 != a3)
      llvm::SmallPtrSetImplBase::MoveFrom(a3, 8, (double *)a4);
    v13 = *v8;
    *(_BYTE *)(a3 + 104) = *(_BYTE *)(a4 + 104);
    *v9 = v13;
    if (&v24 != (_BYTE **)a4)
      llvm::SmallPtrSetImplBase::MoveFrom(a4, 8, (double *)&v24);
    *v8 = v30;
    *(_BYTE *)(a4 + 104) = v31;
    if (v25 != v24)
      free(v25);
    v14 = (uint64_t *)(a2 + 96);
    if (*(_DWORD *)v9 < *(_DWORD *)(a2 + 96))
    {
      v24 = v29;
      v16 = *(double *)a2;
      v15 = *(const void **)(a2 + 8);
      if (v15 == *(const void **)a2)
      {
        v25 = v29;
        v17 = *(unsigned int *)(a2 + 20);
        if ((_DWORD)v17)
          memmove(v29, v15, 8 * v17);
      }
      else
      {
        v25 = *(_BYTE **)(a2 + 8);
        *(double *)(a2 + 8) = v16;
        LODWORD(v17) = *(_DWORD *)(a2 + 20);
      }
      v26 = *(_DWORD *)(a2 + 16);
      v27 = v17;
      v28 = *(_DWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 16) = 8;
      *(_DWORD *)(a2 + 24) = 0;
      v30 = *v14;
      v31 = *(_BYTE *)(a2 + 104);
      if (a3 != a2)
        llvm::SmallPtrSetImplBase::MoveFrom(a2, 8, (double *)a3);
      v18 = *v9;
      *(_BYTE *)(a2 + 104) = *(_BYTE *)(a3 + 104);
      *v14 = v18;
      if (&v24 != (_BYTE **)a3)
        llvm::SmallPtrSetImplBase::MoveFrom(a3, 8, (double *)&v24);
      *v9 = v30;
      *(_BYTE *)(a3 + 104) = v31;
      if (v25 != v24)
        free(v25);
      v19 = (uint64_t *)(a1 + 96);
      if (*(_DWORD *)v14 < *(_DWORD *)(a1 + 96))
      {
        v24 = v29;
        v21 = *(_QWORD *)a1;
        v20 = *(const void **)(a1 + 8);
        if (v20 == *(const void **)a1)
        {
          v25 = v29;
          v22 = *(unsigned int *)(a1 + 20);
          if ((_DWORD)v22)
            memmove(v29, v20, 8 * v22);
        }
        else
        {
          v25 = *(_BYTE **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v21;
          LODWORD(v22) = *(_DWORD *)(a1 + 20);
        }
        v26 = *(_DWORD *)(a1 + 16);
        v27 = v22;
        v28 = *(_DWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 16) = 8;
        *(_DWORD *)(a1 + 24) = 0;
        v30 = *v19;
        v31 = *(_BYTE *)(a1 + 104);
        if (a2 != a1)
          llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)a2);
        v23 = *v14;
        *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
        *v19 = v23;
        if (&v24 != (_BYTE **)a2)
          llvm::SmallPtrSetImplBase::MoveFrom(a2, 8, (double *)&v24);
        *v14 = v30;
        *(_BYTE *)(a2 + 104) = v31;
        if (v25 != v24)
          free(v25);
      }
    }
  }
}

uint64_t sub_1C57DC6B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _DWORD *v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t i;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;

  if ((uint64_t *)a1 != a2)
  {
    v5 = a2 + 2;
    v4 = *a2;
    if ((uint64_t *)*a2 != a2 + 2)
    {
      v6 = *(char **)a1;
      v7 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v7)
      {
        v8 = 112 * v7;
        do
        {
          v9 = *(void **)&v6[v8 - 104];
          if (v9 != *(void **)&v6[v8 - 112])
            free(v9);
          v8 -= 112;
        }
        while (v8);
        v6 = *(char **)a1;
      }
      if (v6 != (char *)(a1 + 16))
        free(v6);
      *(_QWORD *)a1 = *a2;
      v10 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = (uint64_t)v5;
      *((_DWORD *)a2 + 3) = 0;
LABEL_12:
      *v10 = 0;
      return a1;
    }
    v10 = a2 + 1;
    v12 = *((unsigned int *)a2 + 2);
    v13 = *(unsigned int *)(a1 + 8);
    if (v13 >= v12)
    {
      v17 = *(_QWORD *)a1;
      if ((_DWORD)v12)
      {
        v18 = 112 * v12;
        do
        {
          if (v4 != v17)
            llvm::SmallPtrSetImplBase::MoveFrom(v17, 8, (double *)v4);
          v19 = *(_QWORD *)(v4 + 96);
          *(_BYTE *)(v17 + 104) = *(_BYTE *)(v4 + 104);
          *(_QWORD *)(v17 + 96) = v19;
          v4 += 112;
          v17 += 112;
          v18 -= 112;
        }
        while (v18);
        LODWORD(v13) = *(_DWORD *)(a1 + 8);
        v20 = *(_QWORD *)a1;
      }
      else
      {
        v20 = *(_QWORD *)a1;
      }
      for (i = v20 + 112 * v13; i != v17; i -= 112)
      {
        v43 = *(void **)(i - 112);
        v42 = *(void **)(i - 104);
        if (v42 != v43)
          free(v42);
      }
      *(_DWORD *)(a1 + 8) = v12;
      v44 = *((unsigned int *)a2 + 2);
      if ((_DWORD)v44)
      {
        v45 = *a2;
        v46 = 112 * v44;
        do
        {
          v47 = *(void **)(v45 + v46 - 104);
          if (v47 != *(void **)(v45 + v46 - 112))
            free(v47);
          v46 -= 112;
        }
        while (v46);
      }
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) >= v12)
    {
      if ((_DWORD)v13)
      {
        v21 = *(_QWORD *)a1;
        v22 = 112 * v13;
        do
        {
          if (v4 != v21)
            llvm::SmallPtrSetImplBase::MoveFrom(v21, 8, (double *)v4);
          v23 = *(_QWORD *)(v4 + 96);
          *(_BYTE *)(v21 + 104) = *(_BYTE *)(v4 + 104);
          *(_QWORD *)(v21 + 96) = v23;
          v4 += 112;
          v21 += 112;
          v22 -= 112;
        }
        while (v22);
        goto LABEL_35;
      }
    }
    else
    {
      if ((_DWORD)v13)
      {
        v14 = *(_QWORD *)a1;
        v15 = 112 * v13;
        do
        {
          v16 = *(void **)(v14 + v15 - 104);
          if (v16 != *(void **)(v14 + v15 - 112))
            free(v16);
          v15 -= 112;
        }
        while (v15);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_1C57DA438(a1, v12);
    }
    v13 = 0;
LABEL_35:
    v24 = *a2;
    v25 = *((unsigned int *)a2 + 2);
    if (v13 != v25)
    {
      v26 = *(_QWORD *)a1;
      v27 = 112 * v13;
      v28 = 112 * v25;
      do
      {
        v29 = v24 + v27;
        v30 = v26 + v27;
        v31 = (void *)(v26 + v27 + 32);
        *(_QWORD *)(v26 + v27) = v31;
        v33 = *(_QWORD *)(v24 + v27);
        v32 = *(_QWORD *)(v24 + v27 + 8);
        if (v32 == v33)
        {
          *(_QWORD *)(v30 + 8) = v31;
          v34 = *(unsigned int *)(v29 + 20);
          if ((_DWORD)v34)
            memmove(v31, *(const void **)(v29 + 8), 8 * v34);
        }
        else
        {
          *(_QWORD *)(v30 + 8) = v32;
          *(_QWORD *)(v29 + 8) = v33;
        }
        v35 = v24 + v27;
        v36 = v26 + v27;
        *(_QWORD *)(v36 + 16) = *(_QWORD *)(v24 + v27 + 16);
        *(_DWORD *)(v36 + 24) = *(_DWORD *)(v24 + v27 + 24);
        *(_QWORD *)(v35 + 16) = 8;
        *(_DWORD *)(v35 + 24) = 0;
        v37 = *(_QWORD *)(v24 + v27 + 96);
        *(_BYTE *)(v36 + 104) = *(_BYTE *)(v24 + v27 + 104);
        *(_QWORD *)(v36 + 96) = v37;
        v26 += 112;
        v28 -= 112;
        v24 += 112;
      }
      while (v27 != v28);
      v24 = *a2;
    }
    *(_DWORD *)(a1 + 8) = v12;
    v38 = *v10;
    if ((_DWORD)v38)
    {
      v39 = 112 * v38;
      do
      {
        v40 = *(void **)(v24 + v39 - 104);
        if (v40 != *(void **)(v24 + v39 - 112))
          free(v40);
        v39 -= 112;
      }
      while (v39);
    }
    goto LABEL_12;
  }
  return a1;
}

uint64_t sub_1C57DC9C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  BOOL v7;
  int v8;
  unsigned int v10;
  unint64_t v11;
  int v12;
  int v14;
  llvm::Constant **v15;
  int v16;
  int v17;
  uint64_t v18;

  LODWORD(v4) = *(unsigned __int8 *)(a2 + 16);
  if (v4 < 0x1C)
  {
    if ((_DWORD)v4 == 5)
    {
      LODWORD(v4) = *(unsigned __int16 *)(a2 + 18);
      HIDWORD(v11) = v4 - 13;
      LODWORD(v11) = v4 - 13;
      v10 = v11 >> 1;
      v7 = v10 > 6;
      v12 = (1 << v10) & 0x47;
      if (!v7 && v12 != 0)
        goto LABEL_12;
    }
LABEL_16:
    v16 = 0;
    return v16 & v4;
  }
  HIDWORD(v6) = v4 - 41;
  LODWORD(v6) = v4 - 41;
  v5 = v6 >> 1;
  v7 = v5 > 6;
  v8 = (1 << v5) & 0x47;
  if (v7 || v8 == 0)
    goto LABEL_16;
  LODWORD(v4) = v4 - 28;
LABEL_12:
  if ((_DWORD)v4 == 15
    && (*(_BYTE *)(a2 + 17) & 4) != 0
    && ((v14 = *(_DWORD *)(a2 + 20), (v14 & 0x40000000) != 0)
      ? (v15 = *(llvm::Constant ***)(a2 - 8))
      : (v15 = (llvm::Constant **)(a2 - 32 * (v14 & 0x7FFFFFF))),
        sub_1C4D8AC3C(a1, *v15)))
  {
    v17 = *(_DWORD *)(a2 + 20);
    if ((v17 & 0x40000000) != 0)
      v18 = *(_QWORD *)(a2 - 8);
    else
      v18 = a2 - 32 * (v17 & 0x7FFFFFF);
    v4 = *(_QWORD *)(v18 + 32);
    if (v4)
    {
      **(_QWORD **)(a1 + 8) = v4;
      v16 = 1;
      LODWORD(v4) = 1;
      return v16 & v4;
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  v16 = 1;
  return v16 & v4;
}

uint64_t sub_1C57DCAD0(_QWORD **a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;

  v3 = *(unsigned __int8 *)(a2 + 16);
  v4 = v3 - 28;
  v6 = v3 < 0x1C && v3 != 5 || a2 == 0;
  v7 = v6;
  if (!v6)
  {
    if (v3 <= 0x1B)
      v4 = *(unsigned __int16 *)(a2 + 18);
    if (v4 == 46
      && ((v8 = *(_DWORD *)(a2 + 20), (v8 & 0x40000000) != 0)
        ? (v9 = *(uint64_t **)(a2 - 8))
        : (v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF))),
          (v10 = *v9) != 0))
    {
      **a1 = v10;
      v2 = 1;
    }
    else
    {
      v2 = 0;
    }
  }
  return v2 & (v7 ^ 1u);
}

void sub_1C57DCB40()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C57DCB54()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E817D388;
  return result;
}

void sub_1C57DCB78(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E817D388;
}

BOOL sub_1C57DCB90(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(*(_QWORD *)(a2 - 32) + 36) == 168;
}

uint64_t sub_1C57DCBA4(_QWORD **a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  _BOOL4 v7;

  v2 = *(_QWORD *)(a2 + 8);
  if (!v2 || *(_QWORD *)(v2 + 8))
    return 0;
  v4 = *(unsigned __int8 *)(a2 + 16);
  LODWORD(v5) = v4 - 41;
  v7 = v4 > 0x1B && v5 < 0x12;
  if (v7)
  {
    v5 = *(_QWORD *)(a2 - 64);
    if (v5)
    {
      **a1 = v5;
      v5 = *(_QWORD *)(a2 - 32);
      if (v5)
      {
        *a1[1] = v5;
        LODWORD(v5) = 1;
      }
    }
  }
  return v7 & v5;
}

llvm::UndefValue **sub_1C57DCC04(uint64_t *a1, llvm::ValueAsMetadata *a2, llvm::Value *a3)
{
  return sub_1C577F888(*a1, a2, a3);
}

uint64_t sub_1C57DCC0C(uint64_t *a1, uint64_t a2)
{
  return sub_1C57813F4(*a1, a2);
}

uint64_t sub_1C57DCC14()
{
  __int128 v1;
  int v2;
  int *v3;

  v2 = 3;
  v3 = &v2;
  *(_QWORD *)&v1 = "How wide an instruction window to bypass looking for another guard";
  *((_QWORD *)&v1 + 1) = 66;
  sub_1C62A80EC(&v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, qword_1ED810E58, &dword_1C475E000);
}

llvm::Value **sub_1C57DCC74(llvm::Value **result, _DWORD *a2, _QWORD *a3)
{
  unsigned int v5;
  _QWORD *v6;
  BOOL v7;
  unsigned int v8;
  unint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  int v17;

  v5 = *((unsigned __int8 *)result + 16);
  if (result && v5 == 16)
  {
    v6 = result + 3;
    if (*((_DWORD *)result + 8) >= 0x41u)
      v6 = (_QWORD *)*v6;
    *a3 = *v6;
    *a2 = 0;
    return llvm::ConstantInt::get(*result, 0, 0);
  }
  if (!result)
    goto LABEL_24;
  v7 = v5 < 0x1C || v5 - 41 > 0x11;
  if (v7)
    goto LABEL_24;
  HIDWORD(v9) = v5 - 41;
  LODWORD(v9) = v5 - 41;
  v8 = v9 >> 1;
  v7 = v8 > 6;
  v10 = (1 << v8) & 0x47;
  v11 = v7 || v10 == 0;
  if (!v11 && (*((_BYTE *)result + 17) & 6) == 0)
    goto LABEL_24;
  v12 = (uint64_t)*(result - 4);
  if (!v12 || *(_BYTE *)(v12 + 16) != 16)
    goto LABEL_24;
  if (v5 != 41)
  {
    if (v5 == 45)
    {
      v16 = (uint64_t *)(v12 + 24);
      if (*(_DWORD *)(v12 + 32) >= 0x41u)
        v16 = (uint64_t *)*v16;
      v14 = *v16;
      goto LABEL_32;
    }
    if (v5 == 53)
    {
      v13 = (_QWORD *)(v12 + 24);
      if (*(_DWORD *)(v12 + 32) >= 0x41u)
        v13 = (_QWORD *)*v13;
      v14 = 1 << *v13;
LABEL_32:
      *a2 = v14;
      *a3 = 0;
      return (llvm::Value **)*(result - 8);
    }
LABEL_24:
    *a2 = 1;
    *a3 = 0;
    return result;
  }
  v17 = 0;
  result = (llvm::Value **)sub_1C57DCC74(*(result - 8), &v17, a3);
  v15 = (_QWORD *)(v12 + 24);
  if (*(_DWORD *)(v12 + 32) >= 0x41u)
    v15 = (_QWORD *)*v15;
  *a3 += *v15;
  *a2 = v17;
  return result;
}

llvm::UndefValue *sub_1C57DCDFC(uint64_t a1, uint64_t a2, llvm::Type ***a3, llvm::Type *a4)
{
  unsigned int v8;
  uint64_t IntegerCast;
  llvm::UndefValue *result;
  unsigned int v11;
  int v12;
  llvm::UndefValue **v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  llvm::PHINode *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  llvm::Value *v43;
  int v44;
  uint64_t v45;
  uint64_t *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[32];
  __int16 v55;

  v8 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v8 <= 0x14)
  {
    IntegerCast = llvm::ConstantExpr::getIntegerCast((llvm::ConstantExpr *)a2, a3, a4);
    return llvm::ConstantFoldConstant(IntegerCast, *(llvm::Type **)(a1 + 80), *(_QWORD *)(a1 + 64));
  }
  v11 = v8 - 28;
  if (*(unsigned __int8 *)(a2 + 16) < 0x42u)
  {
    v14 = *(_DWORD *)(a2 + 20);
    if ((v14 & 0x40000000) != 0)
      v15 = *(_QWORD **)(a2 - 8);
    else
      v15 = (_QWORD *)(a2 - 32 * (v14 & 0x7FFFFFF));
    v16 = (_QWORD *)sub_1C57DCDFC(a1, *v15, a3, a4);
    v17 = *(_DWORD *)(a2 + 20);
    if ((v17 & 0x40000000) != 0)
      v18 = *(_QWORD *)(a2 - 8);
    else
      v18 = a2 - 32 * (v17 & 0x7FFFFFF);
    v19 = sub_1C57DCDFC(a1, *(_QWORD *)(v18 + 32), a3, a4);
    v55 = 257;
    v20 = (char *)operator new(0x80uLL);
    *(_QWORD *)v20 = 0;
    *((_QWORD *)v20 + 2) = 0;
    *((_QWORD *)v20 + 1) = 0;
    *((_QWORD *)v20 + 5) = 0;
    *((_QWORD *)v20 + 6) = 0;
    *((_QWORD *)v20 + 4) = 0;
    v21 = (uint64_t *)(v20 + 32);
    *((_QWORD *)v20 + 8) = *v16;
    v22 = (llvm::PHINode *)(v20 + 64);
    *((_QWORD *)v20 + 3) = v20 + 64;
    *((_QWORD *)v20 + 7) = v20 + 64;
    *((_QWORD *)v20 + 9) = 0;
    v20[80] = v11 + 28;
    v20[81] = 0;
    *((_WORD *)v20 + 41) = 0;
    *((_DWORD *)v20 + 21) = 2;
    *((_DWORD *)v20 + 30) = 0;
    *(_OWORD *)(v20 + 104) = 0u;
    *(_OWORD *)(v20 + 88) = 0u;
    *(_QWORD *)v20 = v16;
    v25 = v16[1];
    v24 = v16 + 1;
    v23 = v25;
    *((_QWORD *)v20 + 1) = v25;
    if (v25)
      *(_QWORD *)(v23 + 16) = v20 + 8;
    *((_QWORD *)v20 + 2) = v24;
    *v24 = v20;
    if (*((_QWORD *)v20 + 4))
    {
      **((_QWORD **)v20 + 6) = *((_QWORD *)v20 + 5);
      v53 = *((_QWORD *)v20 + 5);
      if (v53)
        *(_QWORD *)(v53 + 16) = *((_QWORD *)v20 + 6);
    }
    *v21 = v19;
    if (v19)
    {
      v28 = *(_QWORD *)(v19 + 8);
      v27 = (uint64_t **)(v19 + 8);
      v26 = v28;
      *((_QWORD *)v20 + 5) = v28;
      if (v28)
        *(_QWORD *)(v26 + 16) = v20 + 40;
      *((_QWORD *)v20 + 6) = v27;
      *v27 = v21;
    }
    llvm::Value::setName((uint64_t ***)v20 + 8, (uint64_t)v54);
    goto LABEL_50;
  }
  if (v8 - 66 >= 3)
  {
    if (v8 == 83)
    {
      v29 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
      v55 = 257;
      v30 = operator new(0x48uLL);
      v30[1] = a3;
      v22 = (llvm::PHINode *)(v30 + 1);
      *v30 = 0;
      v30[2] = 0;
      v30[3] = 0x4000000000000053;
      *((_OWORD *)v30 + 2) = 0u;
      *((_OWORD *)v30 + 3) = 0u;
      *((_DWORD *)v30 + 16) = 0;
      *((_DWORD *)v30 + 17) = v29;
      llvm::Value::setName((uint64_t ***)v30 + 1, (uint64_t)v54);
      v31 = *((unsigned int *)v30 + 17);
      v32 = operator new(40 * v31);
      *v30 = v32;
      if ((_DWORD)v31)
      {
        v33 = &v32[4 * v31];
        do
        {
          *v32 = 0;
          v32[1] = 0;
          v32[2] = 0;
          v32[3] = v22;
          v32 += 4;
        }
        while (v32 != v33);
      }
      v34 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
      if ((_DWORD)v34)
      {
        v35 = 0;
        v36 = 0;
        v37 = 32 * v34;
        do
        {
          v38 = *(_DWORD *)(a2 + 20);
          if ((v38 & 0x40000000) != 0)
            v39 = *(_QWORD *)(a2 - 8);
          else
            v39 = a2 - 32 * (v38 & 0x7FFFFFF);
          v40 = sub_1C57DCDFC(a1, *(_QWORD *)(v39 + v36), a3, a4);
          v41 = *(_DWORD *)(a2 + 20);
          if ((v41 & 0x40000000) != 0)
            v42 = *(_QWORD *)(a2 - 8);
          else
            v42 = a2 - 32 * (v41 & 0x7FFFFFF);
          sub_1C477667C(v22, v40, *(_QWORD *)(v42 + 32 * *(unsigned int *)(a2 + 60) + v35));
          v36 += 32;
          v35 += 8;
        }
        while (v37 != v36);
      }
      goto LABEL_50;
    }
    v44 = *(_DWORD *)(a2 + 20);
    if ((v44 & 0x40000000) != 0)
      v45 = *(_QWORD *)(a2 - 8);
    else
      v45 = a2 - 32 * (v44 & 0x7FFFFFF);
    v46 = (uint64_t *)sub_1C57DCDFC(a1, *(_QWORD *)(v45 + 32), a3, a4);
    v47 = *(_DWORD *)(a2 + 20);
    if ((v47 & 0x40000000) != 0)
      v48 = *(_QWORD *)(a2 - 8);
    else
      v48 = a2 - 32 * (v47 & 0x7FFFFFF);
    v49 = sub_1C57DCDFC(a1, *(_QWORD *)(v48 + 64), a3, a4);
    v50 = *(_DWORD *)(a2 + 20);
    if ((v50 & 0x40000000) != 0)
      v51 = *(uint64_t **)(a2 - 8);
    else
      v51 = (uint64_t *)(a2 - 32 * (v50 & 0x7FFFFFF));
    v52 = *v51;
    v55 = 257;
    v43 = sub_1C4FC8748(v52, v46, v49, (uint64_t)v54, 0, 0);
LABEL_49:
    v22 = v43;
LABEL_50:
    llvm::Value::takeName(v22, (llvm::Value *)a2);
    return sub_1C577E498(a1, v22, a2);
  }
  v12 = *(_DWORD *)(a2 + 20);
  if ((v12 & 0x40000000) != 0)
    v13 = *(llvm::UndefValue ***)(a2 - 8);
  else
    v13 = (llvm::UndefValue **)(a2 - 32 * (v12 & 0x7FFFFFF));
  result = *v13;
  if (*(llvm::Type ****)*v13 != a3)
  {
    v55 = 257;
    llvm::CastInst::CreateIntegerCast((uint64_t *)result, (uint64_t)a3, v11 == 40);
    goto LABEL_49;
  }
  return result;
}

uint64_t sub_1C57DD204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v4 = **(_QWORD **)(a2 - 32);
  v5 = *(_QWORD *)a2;
  if ((*(_DWORD *)(v4 + 8) & 0xFE) == 0x12)
    v6 = *(unsigned __int8 *)(**(_QWORD **)(v4 + 16) + 8);
  else
    v6 = *(_DWORD *)(v4 + 8);
  v7 = *(unsigned __int8 *)(a2 + 16);
  v8 = *(unsigned __int8 *)(a3 + 16);
  v9 = *(_QWORD *)a3;
  if (v6 == 15)
  {
    llvm::DataLayout::getIntPtrType(*(llvm::DataLayout **)(a1 + 80), **(llvm::Type ***)(a2 - 32));
    v11 = v10;
  }
  else
  {
    v11 = 0;
  }
  if ((*(_DWORD *)(v5 + 8) & 0xFE) == 0x12)
    v12 = *(unsigned __int8 *)(**(_QWORD **)(v5 + 16) + 8);
  else
    v12 = *(_DWORD *)(v5 + 8);
  if (v12 == 15)
    llvm::DataLayout::getIntPtrType(*(llvm::DataLayout **)(a1 + 80), (llvm::Type *)v5);
  v13 = v7 - 28;
  v14 = v8 - 28;
  if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12)
    v15 = *(unsigned __int8 *)(**(_QWORD **)(v9 + 16) + 8);
  else
    v15 = *(_DWORD *)(v9 + 8);
  if (v15 == 15)
  {
    llvm::DataLayout::getIntPtrType(*(llvm::DataLayout **)(a1 + 80), (llvm::Type *)v9);
    v17 = v16;
  }
  else
  {
    v17 = 0;
  }
  result = llvm::CastInst::isEliminableCastPair(v13, v14, v4, v5, v9);
  if (v4 == v17 || (_DWORD)result != 48)
  {
    if ((_DWORD)result != 47)
      return result;
    if (v9 == v11)
      return 47;
  }
  return 0;
}

llvm::UndefValue **sub_1C57DD374(uint64_t a1, llvm::Instruction *this)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  int v9;
  llvm::DominatorTree *v10;
  llvm::UndefValue **v11;
  llvm::UndefValue **v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  llvm::Type *v19;
  llvm::Type *v20;
  const char *v21;
  unsigned int PrimitiveSizeInBits;
  const char *v23;
  unsigned int v24;
  llvm::Type *v25;
  llvm::Type *v26;
  const char *v27;
  unsigned int v28;
  const char *v29;
  unsigned int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  llvm::Type *v33;
  BOOL v34;
  unint64_t v35;
  int v36;
  int v37;
  int v38;
  uint64_t *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  char *v44;
  void *v45;
  uint64_t v46;
  llvm::Type *v47;
  _QWORD *v48;
  void *v49;
  uint64_t v50;
  unsigned __int8 *v51;
  _QWORD v52[4];
  __int16 v53;

  v4 = *((_QWORD *)this - 4);
  v5 = *(_QWORD *)this;
  v6 = *(unsigned __int8 *)(v4 + 16);
  if (v4)
    v7 = v6 >= 0x1C;
  else
    v7 = 0;
  if (v7 && v6 - 79 >= 0xFFFFFFF3)
  {
    v9 = sub_1C57DD204(a1, *((_QWORD *)this - 4), (uint64_t)this);
    if (v9)
    {
      v53 = 257;
      llvm::CastInst::Create(v9);
      v12 = v11;
      v13 = *(_QWORD *)(v4 + 8);
      if (v13 && !*(_QWORD *)(v13 + 8))
        goto LABEL_27;
      return v12;
    }
    v6 = *(unsigned __int8 *)(v4 + 16);
  }
  if (v4 && v6 == 85)
  {
    v14 = *(_QWORD *)(v4 - 96);
    v15 = *(unsigned __int8 *)(v14 + 16);
    v16 = v14 && v15 >= 0x1C;
    v17 = v16 && v15 - 83 >= 0xFFFFFFFE;
    if (!v17 || **(_QWORD **)(v14 - 64) != *(_QWORD *)v4)
      goto LABEL_25;
    if (*((_BYTE *)this + 16) == 66)
    {
      v19 = (llvm::Type *)**((_QWORD **)this - 4);
      if (*((_BYTE *)v19 + 8) == 13)
      {
        v20 = *(llvm::Type **)this;
        if (*(_BYTE *)(*(_QWORD *)this + 8) == 13)
        {
          PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v19);
          if ((_DWORD)v21 == 1)
          v24 = llvm::Type::getPrimitiveSizeInBits(v20);
          if ((_DWORD)v23 == 1)
          if (sub_1C577D3C0(a1, PrimitiveSizeInBits, v24))
          {
LABEL_25:
            v18 = sub_1C577FF7C(a1, this, (_QWORD *)v4, 0);
            if (v18)
            {
              v12 = (llvm::UndefValue **)v18;
LABEL_27:
              llvm::replaceAllDbgUsesWith((llvm *)v4, (llvm::Instruction *)v12, this, *(llvm::Instruction **)(a1 + 72), v10);
              return v12;
            }
          }
        }
      }
    }
  }
  if (!v4 || *(_BYTE *)(v4 + 16) != 83)
    goto LABEL_47;
  if (*(_BYTE *)(*(_QWORD *)v4 + 8) == 13)
  {
    v25 = *(llvm::Type **)this;
    if (*(_BYTE *)(*(_QWORD *)this + 8) == 13)
    {
      v26 = (llvm::Type *)**((_QWORD **)this - 4);
      if (*((_BYTE *)v26 + 8) != 13)
        goto LABEL_47;
      v28 = llvm::Type::getPrimitiveSizeInBits(v26);
      if ((_DWORD)v27 == 1)
      v30 = llvm::Type::getPrimitiveSizeInBits(v25);
      if ((_DWORD)v29 == 1)
      if (!sub_1C577D3C0(a1, v28, v30))
        goto LABEL_47;
    }
  }
  v12 = sub_1C57808D4(a1, this, v4);
  if (!v12)
  {
LABEL_47:
    v50 = 0;
    v51 = 0;
    v49 = 0;
    v52[0] = &v51;
    v52[2] = &v49;
    v31 = *(_QWORD *)(v4 + 8);
    if (!v31 || *(_QWORD *)(v31 + 8) || !sub_1C57907A8((uint64_t)v52, v4))
      return 0;
    v12 = 0;
    v32 = v51;
    if (*(_BYTE *)(*(_QWORD *)v51 + 8) == 18)
      v33 = *(llvm::Type **)v51;
    else
      v33 = 0;
    if (*(_BYTE *)(v5 + 8) != 18)
      v5 = 0;
    if (v33)
      v34 = v5 == 0;
    else
      v34 = 1;
    if (!v34)
    {
      if (*((_DWORD *)v33 + 8) == *(_DWORD *)(v5 + 32))
      {
        v35 = llvm::Type::getPrimitiveSizeInBits(v33);
        v37 = v36;
        if (v35 == llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v5) && v37 == v38)
        {
          v41 = *(uint64_t **)(a1 + 24);
          v42 = *((unsigned __int8 *)this + 16) - 28;
          v53 = 257;
          v43 = sub_1C4773E38(v41, v42, v32, v5, (uint64_t)v52);
          v44 = (char *)operator new(0xA8uLL);
          *((_DWORD *)v44 + 21) = *((_DWORD *)v44 + 21) & 0x38000000 | 2;
          v12 = (llvm::UndefValue **)(v44 + 64);
          *(_QWORD *)v44 = 0;
          *((_QWORD *)v44 + 1) = 0;
          *((_QWORD *)v44 + 2) = 0;
          *((_QWORD *)v44 + 3) = v44 + 64;
          *((_QWORD *)v44 + 4) = 0;
          *((_QWORD *)v44 + 5) = 0;
          *((_QWORD *)v44 + 6) = 0;
          *((_QWORD *)v44 + 7) = v44 + 64;
          v45 = v49;
          v46 = v50;
          v53 = 257;
          v48 = llvm::PoisonValue::get(*(llvm::PoisonValue **)v43, v47);
          llvm::ShuffleVectorInst::ShuffleVectorInst((_BYTE **)v12, v43, (uint64_t)v48, v45, v46, (uint64_t)v52, 0);
          return v12;
        }
      }
      return 0;
    }
  }
  return v12;
}

uint64_t sub_1C57DD6EC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  const llvm::DataLayout **v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unsigned int v36;

  v8 = *(const llvm::DataLayout ***)(a1 + 32);
  v9 = 31 - __clz(**(_DWORD **)a1);
  v34 = **(_DWORD **)(a1 + 8);
  if (v34 > 0x40)
  {
    v24 = v9;
    llvm::APInt::initSlowCase((llvm::APInt *)&v33, 0, 0);
    v9 = v24;
  }
  else
  {
    v33 = 0;
  }
  sub_1C4912E54(&v33, 0, v9);
  v10 = v34;
  if (v34 > 0x40)
  {
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v33);
    v10 = v34;
    v12 = v33;
  }
  else
  {
    v11 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v34;
    if (!v34)
      v11 = 0;
    v12 = v11 & ~v33;
    v33 = v12;
  }
  v36 = v10;
  v35 = v12;
  v34 = 0;
  if (**(_QWORD **)(a1 + 16) != **(_QWORD **)(a1 + 24)
    && !llvm::MaskedValueIsZero((llvm *)a2, (const llvm::Value *)&v35, v8[10], 0, v8[7], 0, v8[9], (const llvm::DominatorTree *)1, v23))
  {
LABEL_16:
    if (**(_QWORD **)(a1 + 16) != **(_QWORD **)(a1 + 24))
    {
      a2 = 0;
      goto LABEL_50;
    }
    v32 = 0;
    v16 = a4 - 1;
    v31 = 64;
    v29 = &v32;
    v30 = v16;
    v17 = *(unsigned __int8 *)(a2 + 16);
    if (v17 == 5)
    {
      if (*(_WORD *)(a2 + 18) != 28
        || (v19 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF), !*(_QWORD *)v19)
        || (v32 = *(_QWORD *)v19, !sub_1C4D8A86C((llvm::APInt *)&v30, *(llvm::Constant **)(v19 + 32))))
      {
LABEL_33:
        v20 = 0;
        goto LABEL_34;
      }
    }
    else
    {
      if (v17 != 56)
      {
LABEL_37:
        v31 = 64;
        v29 = &v32;
        v30 = v16;
        if (sub_1C57BE39C(&v29, a2))
        {
          v28 = 64;
          v26 = v32;
          v27 = v16;
          v21 = sub_1C57BE598((uint64_t)&v25, a3, v32);
          if (v28 >= 0x41 && v27)
            MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
        }
        else
        {
          v21 = 0;
        }
        if (v31 >= 0x41 && v30)
          MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
        if (v21)
          a2 = v32;
        else
          a2 = 0;
        goto LABEL_50;
      }
      if (!*(_QWORD *)(a2 - 64))
        goto LABEL_33;
      v32 = *(_QWORD *)(a2 - 64);
      if (!sub_1C4D8A7F0((llvm::APInt *)&v30, *(unsigned __int8 **)(a2 - 32)))
        goto LABEL_33;
    }
    v28 = 64;
    v26 = v32;
    v27 = a4 - 1;
    v20 = sub_1C57BE208((uint64_t)&v25, 28, a3);
    if (v28 >= 0x41 && v27)
      MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
LABEL_34:
    if (v31 >= 0x41 && v30)
    {
      MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
      if ((v20 & 1) == 0)
        goto LABEL_37;
    }
    else if (!v20)
    {
      goto LABEL_37;
    }
    a2 = v32;
    goto LABEL_50;
  }
  LODWORD(v26) = 64;
  v25 = a4;
  v27 = a2;
  v13 = *(_QWORD *)(a3 + 8);
  if (!v13 || (v14 = *(_QWORD *)(v13 + 8)) != 0)
  {
LABEL_11:
    v15 = 0;
    goto LABEL_12;
  }
  v18 = *(unsigned __int8 *)(a3 + 16);
  if (v18 == 43)
  {
    if (sub_1C4D8A7F0((llvm::APInt *)&v25, *(unsigned __int8 **)(a3 - 64)) && v27 == *(_QWORD *)(a3 - 32))
    {
      v15 = 1;
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v18 == 5)
    LOBYTE(v14) = *(_WORD *)(a3 + 18) == 15
               && sub_1C4D8A86C((llvm::APInt *)&v25, *(llvm::Constant **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)))&& v27 == *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32);
  v15 = (v18 == 5) & v14;
LABEL_12:
  if (v26 >= 0x41 && v25)
    MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
  if ((v15 & 1) == 0)
    goto LABEL_16;
LABEL_50:
  if (v36 >= 0x41 && v35)
    MEMORY[0x1CAA32F9C](v35, 0x1000C8000313F17);
  return a2;
}

llvm::UndefValue **sub_1C57DDAEC(uint64_t a1, llvm::Instruction *a2)
{
  uint64_t ***v4;
  uint64_t ***v6;
  uint64_t v7;
  uint64_t **v8;
  int v9;
  llvm::Type *v10;
  unsigned int PrimitiveSizeInBits;
  int v12;
  llvm::Type *v13;
  unsigned int v14;
  BOOL v15;
  const char *v16;
  unsigned int v17;
  const char *v18;
  unsigned int v19;
  llvm::UndefValue *v20;
  uint64_t v21;
  BOOL v22;
  _QWORD *v23;
  llvm::Type *v24;
  int v25;
  llvm::Type *v26;
  const char *v27;
  unsigned int v28;
  const char *v29;
  unsigned int v30;
  llvm::UndefValue *v31;
  char *v32;
  llvm::Type *v33;
  const llvm::APInt *v34;
  llvm::Value **NullValue;
  uint64_t v36;
  llvm::Value **v37;
  uint64_t v38;
  char *v39;
  llvm::Value ***v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  llvm::Value *v46;
  llvm::Value ****v47;
  llvm::Value *v48;
  unsigned __int8 **p_p;
  uint64_t **v50;
  int v51;
  uint64_t **v52;
  llvm::Type *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  llvm::Constant *v59;
  unint64_t v60;
  int v61;
  int v62;
  uint64_t **v63;
  uint64_t **v64;
  uint64_t v65;
  llvm::Type *v66;
  const char *v67;
  unsigned int v68;
  const char *v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  unsigned __int8 *v76;
  uint64_t **v77;
  uint64_t v78;
  uint64_t v79;
  llvm::Type *v80;
  const char *v81;
  unsigned int v82;
  const char *v83;
  const llvm::APInt *v84;
  unsigned int v85;
  _QWORD *v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t **v89;
  unsigned int v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  unsigned __int8 *v93;
  llvm::UndefValue *v94;
  uint64_t *v95;
  unsigned __int8 *v96;
  char v97;
  char *v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  int v106;
  uint64_t *v107;
  const char *v108;
  unsigned int v109;
  const char *v110;
  unsigned int v111;
  int v112;
  unsigned __int8 *v113;
  unsigned __int8 *v114;
  int v115;
  uint64_t **v116;
  unsigned __int8 *v117;
  unsigned __int8 *v118;
  uint64_t *v119;
  _QWORD *v120;
  char v121;
  char *v122;
  _QWORD *v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  int v130;
  uint64_t **v131;
  uint64_t ***v132;
  unint64_t v133;
  llvm::Value **v134;
  llvm::ValueHandleBase *v135;
  uint64_t v136;
  uint64_t **v137;
  _DWORD *v138;
  _DWORD *v139;
  int v140;
  unsigned __int8 **v141;
  unsigned int v142;
  int v143;
  std::string::size_type v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t **v147;
  int v148;
  uint64_t **v149;
  unsigned __int8 *v150;
  uint64_t ***v151;
  int v152;
  uint64_t v153;
  llvm::Constant *v154;
  unint64_t v155;
  int v156;
  int v157;
  unsigned int v158;
  llvm::Constant *IntegerCast;
  llvm::Constant *v160;
  llvm::UndefValue *v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t ****v168;
  uint64_t ***v169;
  int v170;
  int v171;
  uint64_t v172;
  unsigned __int8 *v173;
  char *v174;
  void *v175;
  uint64_t v176;
  llvm::Type *v177;
  _QWORD *v178;
  uint64_t v179;
  unsigned int v180;
  unsigned int v181;
  BOOL v182;
  BOOL v183;
  int v184;
  uint64_t *v185;
  int v186;
  unsigned __int8 *v187;
  uint64_t ***v188;
  uint64_t **v189;
  uint64_t v190;
  llvm::Type *v191;
  unsigned int v192;
  uint64_t v193;
  llvm::Type *v194;
  int8x8_t v195;
  uint8x8_t v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  unsigned int v202;
  uint64_t ***v203;
  int v204;
  uint64_t **v205;
  uint64_t *v206;
  unint64_t v207;
  llvm::Value **v208;
  llvm::ConstantExpr *Shl;
  llvm::Constant *v210;
  llvm::Constant *v211;
  llvm::Type *v212;
  unsigned int v213;
  uint64_t **v214;
  uint64_t v215;
  uint64_t **v216;
  uint64_t v217;
  uint64_t **v218;
  llvm::ConstantInt *v219;
  llvm::Type *v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  __int128 v230;
  uint64_t *v231;
  llvm::Value **v232;
  llvm::Value *VScale;
  uint64_t v234;
  unint64_t v235;
  _QWORD *v236;
  int v237;
  uint64_t v238;
  unsigned int v239;
  unsigned int v240;
  unsigned __int8 *v241;
  BOOL v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t *v246;
  unsigned __int8 *v247;
  uint64_t v248;
  uint64_t v249;
  llvm::ConstantInt *v250;
  unsigned int v251;
  unint64_t v252;
  llvm::ValueHandleBase *v253;
  char *v254;
  llvm::Value **v255;
  llvm::Constant *v256;
  llvm::Constant *UMin;
  llvm::UndefValue *v258;
  llvm::Constant *v259;
  llvm::UndefValue *v260;
  unsigned __int8 *v261;
  char *v262;
  char *v263;
  _QWORD *v264;
  uint64_t v265;
  _QWORD *v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  uint64_t *v271;
  llvm::Value **v272;
  llvm::Constant *v273;
  llvm::Constant *v274;
  llvm::UndefValue *v275;
  uint64_t v276;
  uint64_t *v277;
  uint64_t ***v278;
  uint64_t **v279;
  char *v280;
  uint64_t **v281;
  uint64_t *v282;
  char *v283;
  _QWORD *v284;
  uint64_t v285;
  _QWORD *v286;
  uint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t *v293;
  llvm::Type *v294;
  unsigned int v295;
  unint64_t v296;
  int v297;
  char v298;
  uint64_t *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unsigned __int8 *v305;
  int v306;
  int v307;
  uint64_t *v308;
  uint64_t v309;
  unsigned int v310;
  unsigned int v311;
  uint64_t v312;
  uint64_t v313;
  int v314;
  uint64_t v315;
  uint64_t v316;
  unsigned __int8 *v317;
  uint64_t v318;
  _QWORD *v319;
  char *v320;
  uint64_t v321;
  uint64_t v322;
  unsigned __int8 *v323;
  llvm::UndefValue *v324;
  char *v325;
  llvm::UndefValue **v326;
  uint64_t v327;
  _QWORD *v328;
  uint64_t v329;
  uint64_t v330;
  llvm::UndefValue ***v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unsigned int v335;
  int v336;
  uint64_t v337;
  char v338;
  uint64_t *v339;
  uint64_t *v340;
  uint64_t *v341;
  int v342;
  uint64_t Declaration;
  uint64_t v344;
  uint64_t *v345;
  uint64_t v346;
  llvm::Value **v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t *v351;
  unsigned __int8 *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unsigned __int8 *v356;
  uint64_t v357;
  uint64_t v358;
  unsigned __int8 *v359;
  char *v360;
  _QWORD *v361;
  uint64_t v362;
  _QWORD *v363;
  uint64_t v364;
  uint64_t v365;
  _QWORD *v366;
  uint64_t v367;
  char *v368;
  char *v369;
  uint64_t v370;
  char *v371;
  uint64_t *v372;
  uint64_t v373;
  uint64_t **v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  BOOL v380;
  unsigned __int8 *v381;
  uint64_t v382;
  unsigned __int8 *v383;
  unsigned __int8 *v384;
  uint64_t v385;
  uint64_t v386;
  unsigned __int8 *v387;
  unsigned __int8 *v388;
  unsigned __int8 *v389;
  llvm::Type *v390;
  unsigned __int8 *v391;
  uint64_t v392;
  unsigned __int8 *v393;
  __int128 __p;
  std::string *p_dst;
  uint64_t v396;
  _QWORD *v397;
  llvm::ConstantExpr *v398;
  uint64_t *v399;
  unsigned __int8 *v400;
  uint64_t v401;
  uint64_t v402;
  std::string __dst;
  uint64_t v404;
  uint64_t v405;
  llvm *v406;
  llvm *v407;
  unsigned int v408;
  unsigned int v409;
  uint64_t v410;
  char v411;
  uint64_t v412[3];
  unsigned __int8 *v413;
  uint64_t *v414;
  __int16 v415;
  uint64_t v416;
  unsigned int v417;
  uint64_t v418;

  v418 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t ***)sub_1C57DD374(a1, a2);
  if (v4)
    return (llvm::UndefValue **)v4;
  v6 = (uint64_t ***)*((_QWORD *)a2 - 4);
  v7 = *(_QWORD *)a2;
  v8 = *v6;
  v9 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  v10 = *(llvm::Type **)a2;
  if ((v9 & 0xFE) == 0x12)
    v10 = **(llvm::Type ***)(v7 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v10);
  v12 = *((_DWORD *)v8 + 2);
  v13 = (llvm::Type *)v8;
  if ((v12 & 0xFE) == 0x12)
    v13 = (llvm::Type *)*v8[2];
  v14 = llvm::Type::getPrimitiveSizeInBits(v13);
  if ((v9 & 0xFE) != 0x12)
  {
    v15 = v9 == 13 && v12 == 13;
    if (!v15)
      goto LABEL_20;
    v17 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v8);
    if ((_DWORD)v16 == 1)
    v19 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v7);
    if ((_DWORD)v18 == 1)
    if (!sub_1C577D3C0(a1, v17, v19))
      goto LABEL_20;
  }
  if (!sub_1C57E005C((uint64_t)v6, v7, (const llvm::DataLayout **)a1, a2))
  {
LABEL_20:
    if (*(_BYTE *)(v7 + 8) == 13)
      v21 = v7;
    else
      v21 = 0;
    if (v21)
      v22 = 2 * PrimitiveSizeInBits >= v14;
    else
      v22 = 1;
    if (v22)
    {
LABEL_45:
      v401 = 0;
      v402 = 0;
      if (*((_BYTE *)v6 + 16) == 85)
      {
        v4 = 0;
        if (llvm::matchSelectPattern((uint64_t)v6, (uint64_t)&v402, &v401, 0, 0))
          return (llvm::UndefValue **)v4;
      }
      if (sub_1C584C4C4(a1, a2))
        return (llvm::UndefValue **)a2;
      if (PrimitiveSizeInBits != 1)
        goto LABEL_65;
      NullValue = llvm::Constant::getNullValue((llvm::Constant *)v8, v33);
      if (*(_BYTE *)(v7 + 8) == 13)
      {
        v36 = *(_QWORD *)(a1 + 24);
        v37 = llvm::ConstantInt::get((llvm::ConstantInt *)v8, 1, 0);
        LOWORD(v397) = 257;
        v38 = sub_1C4D89BCC(v36, v6, (uint64_t)v37, (uint64_t)&__p);
        v39 = (char *)operator new(0x80uLL);
        v4 = (uint64_t ***)(v39 + 64);
        *((_DWORD *)v39 + 21) = *((_DWORD *)v39 + 21) & 0x38000000 | 2;
        *(_QWORD *)v39 = 0;
        *((_QWORD *)v39 + 1) = 0;
        *((_QWORD *)v39 + 4) = 0;
        v40 = (llvm::Value ***)(v39 + 32);
        *((_QWORD *)v39 + 2) = 0;
        *((_QWORD *)v39 + 3) = v39 + 64;
        *((_QWORD *)v39 + 5) = 0;
        *((_QWORD *)v39 + 6) = 0;
        *((_QWORD *)v39 + 7) = v39 + 64;
        LOWORD(v397) = 257;
        goto LABEL_52;
      }
      v50 = v6[1];
      if (!v50 || v50[1])
      {
LABEL_65:
        v399 = 0;
        v400 = 0;
        v398 = 0;
        *(_QWORD *)&__p = &v400;
        *((_QWORD *)&__p + 1) = &v398;
        v51 = *((unsigned __int8 *)v6 + 16);
        if (v51 == 5)
        {
          if (*((_WORD *)v6 + 9) != 26)
            goto LABEL_90;
          if (!sub_1C4B037F8((_QWORD **)&__p, (uint64_t)v6[-4 * (*((_DWORD *)v6 + 5) & 0x7FFFFFF)]))
            goto LABEL_90;
          v52 = v6[-4 * (*((_DWORD *)v6 + 5) & 0x7FFFFFF) + 4];
          if (!v52)
            goto LABEL_90;
        }
        else
        {
          if (v51 != 54)
            goto LABEL_90;
          if (!sub_1C4B037F8((_QWORD **)&__p, (uint64_t)*(v6 - 8)))
            goto LABEL_90;
          v52 = *(v6 - 4);
          if (!v52 || *((unsigned __int8 *)v52 + 16) > 0x14u)
            goto LABEL_90;
        }
        **((_QWORD **)&__p + 1) = v52;
        v53 = *(llvm::Type **)v400;
        if ((*(_DWORD *)(*(_QWORD *)v400 + 8) & 0xFE) == 0x12)
          v53 = (llvm::Type *)**((_QWORD **)v53 + 2);
        v54 = llvm::Type::getPrimitiveSizeInBits(v53);
        v55 = v54;
        if (PrimitiveSizeInBits <= v54)
          v56 = v54;
        else
          v56 = PrimitiveSizeInBits;
        v57 = v14 - v56;
        v58 = *((unsigned __int8 *)v6 + 17);
        v59 = v398;
        LODWORD(v414) = v14;
        if (v14 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v413, v57, 0);
        }
        else
        {
          if (v14)
            v60 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v14;
          else
            v60 = 0;
          v413 = (unsigned __int8 *)(v60 & v57);
        }
        *(_QWORD *)&__p = 37;
        *((_QWORD *)&__p + 1) = &v413;
        sub_1C57A1A3C((uint64_t)&__p, v59);
        v62 = v61;
        if (v414 >= 0x41 && v413)
          MEMORY[0x1CAA32F9C](v413, 0x1000C8000313F17);
        if (v62)
        {
          if (*(_QWORD *)v400 == v7)
          {
            v255 = llvm::ConstantInt::get((llvm::ConstantInt *)v8, PrimitiveSizeInBits - 1, 0);
            UMin = llvm::ConstantExpr::getUMin(v398, (llvm::Constant *)v255, v256);
            v258 = sub_1C537D3B8((llvm *)0x26, (uint64_t)UMin, *(llvm::Constant **)v400, 0);
            v260 = llvm::Constant::mergeUndefsWith(v258, v398, v259);
            v261 = v400;
            if ((v58 & 2) != 0)
            {
              LOWORD(v397) = 257;
              v262 = (char *)operator new(0x80uLL);
              v263 = v262;
              *((_QWORD *)v262 + 5) = 0;
              v264 = v262 + 40;
              *((_QWORD *)v262 + 6) = 0;
              *((_QWORD *)v262 + 8) = *(_QWORD *)v261;
              v4 = (uint64_t ***)(v262 + 64);
              *((_QWORD *)v262 + 3) = v262 + 64;
              *((_QWORD *)v262 + 7) = v262 + 64;
              *((_QWORD *)v262 + 9) = 0;
              v262[80] = 55;
              v262[81] = 0;
              *((_WORD *)v262 + 41) = 0;
              *((_DWORD *)v262 + 21) = 2;
              *(_OWORD *)(v262 + 88) = 0u;
              *(_OWORD *)(v262 + 104) = 0u;
              *((_DWORD *)v262 + 30) = 0;
              *(_QWORD *)v262 = v261;
              v267 = *((_QWORD *)v261 + 1);
              v266 = v261 + 8;
              v265 = v267;
              *((_QWORD *)v262 + 1) = v267;
              if (v267)
                *(_QWORD *)(v265 + 16) = v262 + 8;
              *((_QWORD *)v262 + 2) = v266;
              *v266 = v262;
              *((_QWORD *)v262 + 4) = v260;
              if (v260)
              {
                v270 = *((_QWORD *)v260 + 1);
                v269 = (_QWORD *)((char *)v260 + 8);
                v268 = v270;
                *v264 = v270;
                if (v270)
                  *(_QWORD *)(v268 + 16) = v264;
                *((_QWORD *)v262 + 6) = v269;
                *v269 = v262 + 32;
              }
              llvm::Value::setName((uint64_t ***)v262 + 8, (uint64_t)&__p);
              v263[81] |= 2u;
              return (llvm::UndefValue **)v4;
            }
            v415 = 257;
            v283 = (char *)operator new(0x80uLL);
            *((_QWORD *)v283 + 5) = 0;
            v284 = v283 + 40;
            *((_QWORD *)v283 + 6) = 0;
            *((_QWORD *)v283 + 8) = *(_QWORD *)v261;
            v4 = (uint64_t ***)(v283 + 64);
            *((_QWORD *)v283 + 3) = v283 + 64;
            *((_QWORD *)v283 + 7) = v283 + 64;
            *((_QWORD *)v283 + 9) = 0;
            v283[80] = 55;
            v283[81] = 0;
            *((_WORD *)v283 + 41) = 0;
            *((_DWORD *)v283 + 21) = 2;
            *(_OWORD *)(v283 + 88) = 0u;
            *(_OWORD *)(v283 + 104) = 0u;
            *((_DWORD *)v283 + 30) = 0;
            *(_QWORD *)v283 = v261;
            v287 = *((_QWORD *)v261 + 1);
            v286 = v261 + 8;
            v285 = v287;
            *((_QWORD *)v283 + 1) = v287;
            if (v287)
              *(_QWORD *)(v285 + 16) = v283 + 8;
            *((_QWORD *)v283 + 2) = v286;
            *v286 = v283;
            *((_QWORD *)v283 + 4) = v260;
            if (v260)
            {
              v290 = *((_QWORD *)v260 + 1);
              v289 = (_QWORD *)((char *)v260 + 8);
              v288 = v290;
              *v284 = v290;
              if (v290)
                *(_QWORD *)(v288 + 16) = v284;
              *((_QWORD *)v283 + 6) = v289;
              *v289 = v283 + 32;
            }
            p_p = &v413;
            goto LABEL_62;
          }
          v63 = v6[1];
          if (v63)
          {
            if (!v63[1])
            {
              v272 = llvm::ConstantInt::get((llvm::ConstantInt *)v8, v55 - 1, 0);
              v274 = llvm::ConstantExpr::getUMin(v398, (llvm::Constant *)v272, v273);
              v275 = sub_1C537D3B8((llvm *)0x26, (uint64_t)v274, *(llvm::Constant **)v400, 0);
              v276 = *(_QWORD *)(a1 + 24);
              LOWORD(v397) = 257;
              v277 = (uint64_t *)sub_1C534E5D8(v276, (uint64_t)v400, (uint64_t)v275, (uint64_t)&__p, (v58 >> 1) & 1);
              LOWORD(v397) = 257;
              llvm::CastInst::CreateIntegerCast(v277, v7, 1);
              return (llvm::UndefValue **)v234;
            }
          }
        }
LABEL_90:
        *(_QWORD *)&__p = &v400;
        *((_QWORD *)&__p + 1) = &v398;
        v64 = v6[1];
        if (!v64 || v64[1])
          goto LABEL_92;
        v88 = *((unsigned __int8 *)v6 + 16);
        if (v88 >= 0x1C)
        {
          if ((v88 & 0xFE) != 0x36)
            goto LABEL_92;
          v106 = *((_DWORD *)v6 + 5);
          v107 = (v106 & 0x40000000) != 0 ? (uint64_t *)*(v6 - 1) : (uint64_t *)&v6[-4 * (v106 & 0x7FFFFFF)];
          if (!sub_1C4B03864((_QWORD **)&__p, *v107))
            goto LABEL_92;
          v130 = *((_DWORD *)v6 + 5);
          v131 = (v130 & 0x40000000) != 0 ? *(v6 - 1) : (uint64_t **)&v6[-4 * (v130 & 0x7FFFFFF)];
          v89 = (uint64_t **)v131[4];
          if (!v89 || *((unsigned __int8 *)v89 + 16) > 0x14u)
            goto LABEL_92;
        }
        else
        {
          if (v88 != 5)
            goto LABEL_92;
          if ((*((_WORD *)v6 + 9) & 0xFFFE) != 0x1A)
            goto LABEL_92;
          if (!sub_1C4B03864((_QWORD **)&__p, (uint64_t)v6[-4 * (*((_DWORD *)v6 + 5) & 0x7FFFFFF)]))
            goto LABEL_92;
          v89 = v6[-4 * (*((_DWORD *)v6 + 5) & 0x7FFFFFF) + 4];
          if (!v89)
            goto LABEL_92;
        }
        **((_QWORD **)&__p + 1) = v89;
        v153 = v14 - PrimitiveSizeInBits;
        v154 = v398;
        LODWORD(v414) = v14;
        if (v14 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v413, v153, 0);
        }
        else
        {
          if (v14)
            v155 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v14;
          else
            v155 = 0;
          v413 = (unsigned __int8 *)(v155 & v153);
        }
        *(_QWORD *)&__p = 37;
        *((_QWORD *)&__p + 1) = &v413;
        sub_1C57A1A3C((uint64_t)&__p, v154);
        v157 = v156;
        if (v414 >= 0x41 && v413)
          MEMORY[0x1CAA32F9C](v413, 0x1000C8000313F17);
        if (v157)
        {
          v158 = *((unsigned __int8 *)v6 + 17);
          IntegerCast = (llvm::Constant *)llvm::ConstantExpr::getIntegerCast(v398, *(llvm::Type ****)v400, (llvm::Type *)1);
          v161 = llvm::Constant::mergeUndefsWith(IntegerCast, v398, v160);
          v162 = *((unsigned __int8 *)v6 + 16);
          v163 = *(_QWORD *)(a1 + 24);
          if ((*((_BYTE *)v6 + 23) & 0x10) == 0)
          {
            v279 = 0;
            v280 = &byte_1C871356D;
            goto LABEL_386;
          }
          v164 = ***v6;
          v165 = *(_QWORD *)(v164 + 152);
          v166 = *(unsigned int *)(v164 + 168);
          if ((_DWORD)v166)
          {
            LODWORD(v167) = (v166 - 1) & ((v6 >> 4) ^ (v6 >> 9));
            v168 = (uint64_t ****)(v165 + 16 * v167);
            v169 = *v168;
            if (*v168 == v6)
            {
LABEL_385:
              v278 = v168[1];
              v281 = *v278;
              v280 = (char *)(v278 + 2);
              v279 = v281;
LABEL_386:
              LOWORD(v397) = 261;
              *(_QWORD *)&__p = v280;
              *((_QWORD *)&__p + 1) = v279;
              if (v162 == 55)
                v282 = (uint64_t *)sub_1C534E5D8(v163, (uint64_t)v400, (uint64_t)v161, (uint64_t)&__p, (v158 >> 1) & 1);
              else
                v282 = (uint64_t *)sub_1C506ED1C(v163, (uint64_t)v400, (uint64_t)v161, (uint64_t)&__p, (v158 >> 1) & 1);
              LOWORD(v397) = 257;
              return (llvm::UndefValue **)llvm::CastInst::CreateTruncOrBitCast(v282, v7, (uint64_t)&__p, 0);
            }
            v170 = 1;
            while (v169 != (uint64_t ***)-4096)
            {
              v171 = v167 + v170++;
              v167 = v171 & (v166 - 1);
              v169 = *(uint64_t ****)(v165 + 16 * v167);
              if (v169 == v6)
              {
                v168 = (uint64_t ****)(v165 + 16 * v167);
                goto LABEL_385;
              }
            }
          }
          v168 = (uint64_t ****)(v165 + 16 * v166);
          goto LABEL_385;
        }
LABEL_92:
        v65 = *((_QWORD *)a2 - 4);
        v66 = *(llvm::Type **)a2;
        if ((*(_DWORD *)(*(_QWORD *)v65 + 8) & 0xFE) != 0x12)
        {
          if (*(_DWORD *)(*(_QWORD *)v65 + 8) != 13 || *((_BYTE *)v66 + 8) != 13)
            goto LABEL_103;
          v68 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v65);
          if ((_DWORD)v67 == 1)
          v70 = llvm::Type::getPrimitiveSizeInBits(v66);
          if ((_DWORD)v69 == 1)
          if (!sub_1C577D3C0(a1, v68, v70))
            goto LABEL_103;
          v65 = *((_QWORD *)a2 - 4);
        }
        v71 = *(_QWORD *)(v65 + 8);
        if (!v71)
          goto LABEL_103;
        if (*(_QWORD *)(v71 + 8))
          goto LABEL_103;
        v90 = *(unsigned __int8 *)(v65 + 16);
        if (v90 < 0x1C || v90 - 59 < 0xFFFFFFEE)
          goto LABEL_103;
        if (v90 <= 0x3A && ((1 << v90) & 0x7002A0000000000) != 0)
        {
          v91 = *(unsigned __int8 **)(v65 - 64);
          v92 = *(unsigned __int8 **)(v65 - 32);
          if (v91[16] <= 0x14u && v91)
          {
            v93 = *(unsigned __int8 **)(v65 - 32);
            v94 = sub_1C537D3B8((llvm *)0x26, *(_QWORD *)(v65 - 64), v66, 0);
            v95 = *(uint64_t **)(a1 + 24);
            LOWORD(v397) = 257;
            v96 = sub_1C4773E38(v95, 38, v93, (uint64_t)v66, (uint64_t)&__p);
            v97 = *(_BYTE *)(v65 + 16);
LABEL_141:
            LOWORD(v397) = 257;
            v98 = (char *)operator new(0x80uLL);
            *((_QWORD *)v98 + 6) = 0;
            *((_QWORD *)v98 + 5) = 0;
            v99 = v98 + 40;
            *((_QWORD *)v98 + 8) = *(_QWORD *)v94;
            v4 = (uint64_t ***)(v98 + 64);
            *((_QWORD *)v98 + 3) = v98 + 64;
            *((_QWORD *)v98 + 7) = v98 + 64;
            *((_QWORD *)v98 + 9) = 0;
            v98[80] = v97;
            v98[81] = 0;
            *((_WORD *)v98 + 41) = 0;
            *((_DWORD *)v98 + 21) = 2;
            *(_OWORD *)(v98 + 88) = 0u;
            *(_OWORD *)(v98 + 104) = 0u;
            *((_DWORD *)v98 + 30) = 0;
            *(_QWORD *)v98 = v94;
            v102 = *((_QWORD *)v94 + 1);
            v101 = (_QWORD *)((char *)v94 + 8);
            v100 = v102;
            *((_QWORD *)v98 + 1) = v102;
            if (v102)
              *(_QWORD *)(v100 + 16) = v98 + 8;
            *((_QWORD *)v98 + 2) = v101;
            *v101 = v98;
            *((_QWORD *)v98 + 4) = v96;
            if (v96)
            {
              v105 = *((_QWORD *)v96 + 1);
              v104 = v96 + 8;
              v103 = v105;
              *v99 = v105;
              if (v105)
                *(_QWORD *)(v103 + 16) = v99;
              *((_QWORD *)v98 + 6) = v104;
              *v104 = v98 + 32;
            }
            goto LABEL_61;
          }
          if (v92[16] <= 0x14u && v92)
          {
            v118 = (unsigned __int8 *)sub_1C537D3B8((llvm *)0x26, *(_QWORD *)(v65 - 32), v66, 0);
            v119 = *(uint64_t **)(a1 + 24);
            LOWORD(v397) = 257;
            v120 = sub_1C4773E38(v119, 38, v91, (uint64_t)v66, (uint64_t)&__p);
            v121 = *(_BYTE *)(v65 + 16);
LABEL_175:
            LOWORD(v397) = 257;
            v122 = (char *)operator new(0x80uLL);
            *((_QWORD *)v122 + 6) = 0;
            *((_QWORD *)v122 + 5) = 0;
            v123 = v122 + 40;
            *((_QWORD *)v122 + 8) = *v120;
            v4 = (uint64_t ***)(v122 + 64);
            *((_QWORD *)v122 + 3) = v122 + 64;
            *((_QWORD *)v122 + 7) = v122 + 64;
            *((_QWORD *)v122 + 9) = 0;
            v122[80] = v121;
            v122[81] = 0;
            *((_WORD *)v122 + 41) = 0;
            *((_DWORD *)v122 + 21) = 2;
LABEL_176:
            *(_OWORD *)(v122 + 88) = 0u;
            *(_OWORD *)(v122 + 104) = 0u;
            *((_DWORD *)v122 + 30) = 0;
            *(_QWORD *)v122 = v120;
            v126 = v120[1];
            v125 = v120 + 1;
            v124 = v126;
            *((_QWORD *)v122 + 1) = v126;
            if (v126)
              *(_QWORD *)(v124 + 16) = v122 + 8;
            *((_QWORD *)v122 + 2) = v125;
            *v125 = v122;
            *((_QWORD *)v122 + 4) = v118;
            if (v118)
            {
              v129 = *((_QWORD *)v118 + 1);
              v128 = v118 + 8;
              v127 = v129;
              *v123 = v129;
              if (v129)
                *(_QWORD *)(v127 + 16) = v123;
              *((_QWORD *)v122 + 6) = v128;
              *v128 = v122 + 32;
            }
            goto LABEL_61;
          }
          v413 = 0;
          v391 = v92;
          *(_QWORD *)&__p = &v413;
          *((_QWORD *)&__p + 1) = &v413;
          if ((sub_1C4B0378C((_QWORD **)&__p, (uint64_t)v91) & 1) != 0
            || sub_1C4B037F8((_QWORD **)&__p + 1, (uint64_t)v91))
          {
            v145 = (uint64_t)v391;
            if (*(llvm::Type **)v413 == v66)
            {
              v146 = *(uint64_t **)(a1 + 24);
              LOWORD(v397) = 257;
              v96 = sub_1C4773E38(v146, 38, v391, (uint64_t)v66, (uint64_t)&__p);
              v97 = *(_BYTE *)(v65 + 16);
              v94 = (llvm::UndefValue *)v413;
              goto LABEL_141;
            }
          }
          else
          {
            v145 = (uint64_t)v391;
          }
          *(_QWORD *)&__p = &v413;
          *((_QWORD *)&__p + 1) = &v413;
          if (((sub_1C4B0378C((_QWORD **)&__p, v145) & 1) != 0
             || sub_1C4B037F8((_QWORD **)&__p + 1, (uint64_t)v391))
            && *(llvm::Type **)v413 == v66)
          {
            v271 = *(uint64_t **)(a1 + 24);
            LOWORD(v397) = 257;
            v120 = sub_1C4773E38(v271, 38, v91, (uint64_t)v66, (uint64_t)&__p);
            v121 = *(_BYTE *)(v65 + 16);
            v118 = v413;
            goto LABEL_175;
          }
        }
        v190 = *(_QWORD *)a2;
        v410 = v190;
        v191 = (llvm::Type *)v190;
        if ((*(_DWORD *)(v190 + 8) & 0xFE) == 0x12)
          v191 = **(llvm::Type ***)(v190 + 16);
        v192 = llvm::Type::getPrimitiveSizeInBits(v191);
        v409 = v192;
        v193 = *((_QWORD *)a2 - 4);
        v194 = *(llvm::Type **)v193;
        if ((*(_DWORD *)(*(_QWORD *)v193 + 8) & 0xFE) == 0x12)
          v194 = (llvm::Type *)**((_QWORD **)v194 + 2);
        v408 = llvm::Type::getPrimitiveSizeInBits(v194);
        v195.i32[0] = v192;
        v196 = (uint8x8_t)vcnt_s8(v195);
        v196.i16[0] = vaddlv_u8(v196);
        if (v196.i32[0] != 1)
          goto LABEL_103;
        v197 = *(_QWORD *)(v193 + 8);
        if (!v197 || *(_QWORD *)(v197 + 8))
          goto LABEL_103;
        v198 = *(unsigned __int8 *)(v193 + 16);
        if (v198 == 5)
        {
          if (*(_WORD *)(v193 + 18) != 29)
            goto LABEL_103;
          v308 = (uint64_t *)(v193 - 32 * (*(_DWORD *)(v193 + 20) & 0x7FFFFFF));
          v309 = *v308;
          if (!*v308)
            goto LABEL_103;
          v310 = *(unsigned __int8 *)(v309 + 16);
          if (v310 < 0x1C)
            goto LABEL_103;
          if (v310 - 59 < 0xFFFFFFEE)
            goto LABEL_103;
          v201 = v308[4];
          if (!v201)
            goto LABEL_103;
          v311 = *(unsigned __int8 *)(v201 + 16);
          if (v311 < 0x1C || v311 - 59 < 0xFFFFFFEE)
            goto LABEL_103;
          v392 = v309;
        }
        else
        {
          if (v198 != 57)
            goto LABEL_103;
          v199 = *(_QWORD *)(v193 - 64);
          if (!v199)
            goto LABEL_103;
          v200 = *(unsigned __int8 *)(v199 + 16);
          if (v200 < 0x1C)
            goto LABEL_103;
          if (v200 - 59 < 0xFFFFFFEE)
            goto LABEL_103;
          v201 = *(_QWORD *)(v193 - 32);
          if (!v201)
            goto LABEL_103;
          v202 = *(unsigned __int8 *)(v201 + 16);
          if (v202 < 0x1C || v202 - 59 < 0xFFFFFFEE)
            goto LABEL_103;
          v392 = v199;
        }
        v406 = 0;
        v407 = 0;
        v404 = 0;
        v405 = 0;
        *(_QWORD *)&__p = &v407;
        *((_QWORD *)&__p + 1) = &v405;
        v312 = *(_QWORD *)(v392 + 8);
        if (!v312)
          goto LABEL_103;
        if (*(_QWORD *)(v312 + 8))
          goto LABEL_103;
        if (!sub_1C57BE11C((_QWORD **)&__p, v392))
          goto LABEL_103;
        v413 = (unsigned __int8 *)&v406;
        v414 = &v404;
        v313 = *(_QWORD *)(v201 + 8);
        if (!v313)
          goto LABEL_103;
        if (*(_QWORD *)(v313 + 8))
          goto LABEL_103;
        if (!sub_1C57BE11C((_QWORD **)&v413, v201))
          goto LABEL_103;
        v314 = *(unsigned __int8 *)(v392 + 16);
        if (v314 == *(unsigned __int8 *)(v201 + 16))
          goto LABEL_103;
        v315 = v404;
        v316 = v405;
        if (v314 == 54)
        {
          v317 = (unsigned __int8 *)v406;
          v406 = v407;
          v407 = (llvm *)v317;
          v404 = v405;
          v405 = v315;
          v318 = v316;
          v385 = v201;
        }
        else
        {
          v318 = v404;
          v315 = v405;
          v385 = v392;
          v392 = v201;
        }
        *(_QWORD *)&__p = &v409;
        *((_QWORD *)&__p + 1) = &v408;
        p_dst = (std::string *)&v407;
        v396 = (uint64_t)&v406;
        v397 = (_QWORD *)a1;
        v334 = sub_1C57DD6EC((uint64_t)&__p, v315, v318, v192);
        v387 = (unsigned __int8 *)v334;
        if (!v334)
        {
          v387 = (unsigned __int8 *)sub_1C57DD6EC((uint64_t)&__p, v404, v405, v409);
          if (!v387)
          {
LABEL_103:
            v72 = *((_QWORD *)a2 - 4);
            if (v72)
            {
              if (*(_BYTE *)(v72 + 16) == 91)
              {
                v73 = *(_QWORD *)(v72 + 8);
                if (v73)
                {
                  if (!*(_QWORD *)(v73 + 8))
                  {
                    v74 = *(uint64_t **)(a1 + 24);
                    if (sub_1C4E7B480(*(_QWORD *)(v72 - 32)))
                    {
                      v75 = *(unsigned int *)(v72 + 72);
                      if ((_DWORD)v75)
                      {
                        if ((_DWORD)v75 == 1
                          || !memcmp((const void *)(*(_QWORD *)(v72 + 64) + 4), *(const void **)(v72 + 64), 4 * v75 - 4))
                        {
                          v76 = *(unsigned __int8 **)(v72 - 64);
                          if (*(_QWORD *)v72 == *(_QWORD *)v76)
                          {
                            v172 = *(_QWORD *)a2;
                            LOWORD(v397) = 257;
                            v173 = sub_1C4773E38(v74, 38, v76, v172, (uint64_t)&__p);
                            v174 = (char *)operator new(0xA8uLL);
                            *((_DWORD *)v174 + 21) = *((_DWORD *)v174 + 21) & 0x38000000 | 2;
                            v4 = (uint64_t ***)(v174 + 64);
                            *(_QWORD *)v174 = 0;
                            *((_QWORD *)v174 + 1) = 0;
                            *((_QWORD *)v174 + 2) = 0;
                            *((_QWORD *)v174 + 3) = v174 + 64;
                            *((_QWORD *)v174 + 4) = 0;
                            *((_QWORD *)v174 + 5) = 0;
                            *((_QWORD *)v174 + 6) = 0;
                            *((_QWORD *)v174 + 7) = v174 + 64;
                            v175 = *(void **)(v72 + 64);
                            v176 = *(unsigned int *)(v72 + 72);
                            LOWORD(v397) = 257;
                            v178 = llvm::PoisonValue::get(*(llvm::PoisonValue **)v173, v177);
                            llvm::ShuffleVectorInst::ShuffleVectorInst((_BYTE **)v4, v173, (uint64_t)v178, v175, v176, (uint64_t)&__p, 0);
                            return (llvm::UndefValue **)v4;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v4 = (uint64_t ***)sub_1C57E0C24((unsigned __int8 *)a2, *(uint64_t **)(a1 + 24));
            if (v4)
              return (llvm::UndefValue **)v4;
            v77 = v6[1];
            if (!v77 || v77[1])
              goto LABEL_115;
            if (((_DWORD)v8[1] & 0xFE) != 0x12)
            {
              if (*((_DWORD *)v8 + 2) != 13 || *(_BYTE *)(v7 + 8) != 13)
                goto LABEL_115;
              v109 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v8);
              if ((_DWORD)v108 == 1)
              v111 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v7);
              if ((_DWORD)v110 == 1)
              if (!sub_1C577D3C0(a1, v109, v111))
              {
LABEL_115:
                v78 = *((_QWORD *)a2 - 4);
                v79 = *(_QWORD *)(v78 + 8);
                if (!v79)
                  goto LABEL_322;
                if (*(_QWORD *)(v79 + 8))
                  goto LABEL_322;
                v80 = *(llvm::Type **)a2;
                if (*(_BYTE *)(*(_QWORD *)a2 + 8) != 13)
                  goto LABEL_322;
                v413 = 0;
                __dst.__r_.__value_.__r.__words[0] = 0;
                *(_QWORD *)&__p = &v413;
                *((_QWORD *)&__p + 1) = &v413;
                p_dst = &__dst;
                if ((sub_1C57E819C((_QWORD **)&__p, v78) & 1) == 0)
                {
                  v143 = *(unsigned __int8 *)(v78 + 16);
                  if (v143 == 5)
                  {
                    if (*(_WORD *)(v78 + 18) != 26)
                      goto LABEL_322;
                    v179 = *(_QWORD *)(v78 - 32 * (*(_DWORD *)(v78 + 20) & 0x7FFFFFF));
                    v180 = *(unsigned __int8 *)(v179 + 16);
                    v181 = v180 - 28;
                    v182 = v180 >= 0x1C || v180 == 5;
                    v183 = !v182;
                    if (!v179 || v183)
                      goto LABEL_322;
                    if (v180 <= 0x1B)
                      v181 = *(unsigned __int16 *)(v179 + 18);
                    if (v181 != 49)
                      goto LABEL_322;
                    v184 = *(_DWORD *)(v179 + 20);
                    v185 = (v184 & 0x40000000) != 0
                         ? *(uint64_t **)(v179 - 8)
                         : (uint64_t *)(v179 - 32 * (v184 & 0x7FFFFFF));
                    v333 = *v185;
                    if (!v333)
                      goto LABEL_322;
                    **((_QWORD **)&__p + 1) = v333;
                    v144 = *(_QWORD *)(v78 - 32 * (*(_DWORD *)(v78 + 20) & 0x7FFFFFF) + 32);
                    if (!v144)
                      goto LABEL_322;
                  }
                  else
                  {
                    if (v143 != 54)
                      goto LABEL_322;
                    if (!sub_1C57E819C((_QWORD **)&__p + 1, *(_QWORD *)(v78 - 64)))
                      goto LABEL_322;
                    v144 = *(_QWORD *)(v78 - 32);
                    if (!v144)
                      goto LABEL_322;
                  }
                  if (*(_BYTE *)(v144 + 16) != 16)
                  {
LABEL_322:
                    __dst.__r_.__value_.__r.__words[0] = 0;
                    v412[0] = 0;
                    *(_QWORD *)&__p = &__dst;
                    *((_QWORD *)&__p + 1) = v412;
                    v214 = v6[1];
                    if (!v214
                      || v214[1]
                      || !sub_1C57E8E8C((_QWORD **)&__p, (uint64_t)v6)
                      || (v215 = v14 / PrimitiveSizeInBits, v14 % PrimitiveSizeInBits))
                    {
                      LODWORD(__p) = 52;
                      *((_QWORD *)&__p + 1) = 0;
                      p_dst = (std::string *)&v400;
                      v396 = 1;
                      v397 = &v399;
                      v216 = v6[1];
                      if (v216)
                      {
                        if (!v216[1] && *((_BYTE *)v6 + 16) == 84)
                        {
                          v217 = (uint64_t)*(v6 - 4);
                          if (v217)
                          {
                            if (!*(_BYTE *)(v217 + 16)
                              && *(uint64_t ***)(v217 + 24) == v6[9]
                              && *(_DWORD *)(v217 + 36) == 52)
                            {
                              if (sub_1C4B0378C((_QWORD **)&p_dst, (uint64_t)v6[-4 * (*((_DWORD *)v6 + 5) & 0x7FFFFFF)]))
                              {
                                if (*((_BYTE *)v6 + 16) == 84)
                                {
                                  v218 = (&v6[4 * v396])[-4 * (*((_DWORD *)v6 + 5) & 0x7FFFFFF)];
                                  if (v218)
                                  {
                                    *v397 = v218;
                                    v219 = *(llvm::ConstantInt **)v400;
                                    v220 = *(llvm::Type **)v400;
                                    if ((*(_DWORD *)(*(_QWORD *)v400 + 8) & 0xFE) == 0x12)
                                      v220 = (llvm::Type *)**((_QWORD **)v219 + 2);
                                    if (llvm::Type::getPrimitiveSizeInBits(v220) == PrimitiveSizeInBits
                                      && 31 - __clz(v14) < PrimitiveSizeInBits)
                                    {
                                      v118 = (unsigned __int8 *)llvm::ConstantInt::get(v219, v14 - PrimitiveSizeInBits, 0);
                                      v221 = *(uint64_t **)(a1 + 24);
                                      v416 = *(_QWORD *)a2;
                                      v413 = v400;
                                      v414 = v399;
                                      LOWORD(v397) = 257;
                                      v120 = (_QWORD *)llvm::IRBuilderBase::CreateIntrinsic(v221, 52, &v416, 1, (uint64_t *)&v413, 2, 0, (uint64_t)&__p);
                                      LOWORD(v397) = 257;
                                      v122 = (char *)operator new(0x80uLL);
                                      *((_QWORD *)v122 + 6) = 0;
                                      *((_QWORD *)v122 + 5) = 0;
                                      v123 = v122 + 40;
                                      *((_QWORD *)v122 + 8) = *v120;
                                      v4 = (uint64_t ***)(v122 + 64);
                                      *((_QWORD *)v122 + 3) = v122 + 64;
                                      *((_QWORD *)v122 + 7) = v122 + 64;
                                      *((_QWORD *)v122 + 9) = 0;
                                      v122[80] = 41;
                                      v122[81] = 0;
                                      *((_WORD *)v122 + 41) = 0;
                                      *((_DWORD *)v122 + 21) = 2;
                                      goto LABEL_176;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      *(_QWORD *)&__p = *(_QWORD *)(a1 + 80);
                      if (sub_1C53F7E14((uint64_t *)&__p, (uint64_t)v6))
                      {
                        v222 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 56);
                        if (v222)
                        {
                          v225 = *(_QWORD *)(v222 + 112);
                          v223 = (uint64_t *)(v222 + 112);
                          v224 = v225;
                          if (v225)
                          {
                            if ((*(_BYTE *)(v224 + 22) & 1) != 0)
                            {
                              v4 = 0;
                              v228 = *(_QWORD *)(llvm::AttributeList::getAttributeAtIndex(v223, -1, 80) + 16);
                              v15 = v228 == 0;
                              v226 = (_DWORD)v228 != 0;
                              LODWORD(__p) = HIDWORD(v228);
                              v227 = v228 & 0xFFFFFF00;
                              v228 = v228;
                              if (v15)
                                v228 = 0;
                              *(_QWORD *)((char *)&__p + 4) = v228 | v227 | (v226 << 32);
                              *((_QWORD *)&v230 + 1) = v226;
                              *(_QWORD *)&v230 = __p;
                              v229 = v230 >> 32;
                              if (!HIDWORD(v229))
                                return (llvm::UndefValue **)v4;
                              if (31 - __clz(v229) < PrimitiveSizeInBits)
                              {
                                v231 = *(uint64_t **)(a1 + 24);
                                v232 = llvm::ConstantInt::get((llvm::ConstantInt *)v7, 1, 0);
                                LOWORD(v397) = 257;
                                VScale = (llvm::Value *)llvm::IRBuilderBase::CreateVScale(v231, (uint64_t)v232, (uint64_t)&__p);
                                return sub_1C577F888(a1, a2, VScale);
                              }
                            }
                          }
                        }
                      }
                      return 0;
                    }
                    v235 = *(unsigned int *)(*(_QWORD *)__dst.__r_.__value_.__l.__data_ + 32)
                         * (unint64_t)v215;
                    v236 = (_QWORD *)(v412[0] + 24);
                    if (*(_DWORD *)(v412[0] + 32) >= 0x41u)
                      v236 = (_QWORD *)*v236;
                    v237 = *(unsigned __int8 *)(*(_QWORD *)__dst.__r_.__value_.__l.__data_ + 8);
                    v238 = *v236 * v215;
                    v239 = v215 - 1 + v238;
                    if (**(_BYTE **)(a1 + 80))
                      v240 = v239;
                    else
                      v240 = v238;
                    v241 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40) + 216);
                    v415 = 260;
                    v413 = v241;
                    llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)&v413);
                    v243 = (v396 & 0xFFFFFFFE) == 0x30 && v235 > 4;
                    if (SHIBYTE(p_dst) < 0)
                      operator delete((void *)__p);
                    if (v243)
                      return 0;
                    if (v237 == 19)
                      llvm::ScalableVectorType::get((uint64_t **)v7, (llvm::Type *)v235);
                    else
                      llvm::FixedVectorType::get((llvm::FixedVectorType *)v7, (llvm::Type *)v235);
                    v245 = v244;
                    v246 = *(uint64_t **)(a1 + 24);
                    LOWORD(v397) = 257;
                    v247 = sub_1C4773E38(v246, 49, (unsigned __int8 *)__dst.__r_.__value_.__l.__data_, v245, (uint64_t)&__p);
                    v248 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 64);
                    v249 = v240;
LABEL_368:
                    v250 = *(llvm::ConstantInt **)(v248 + 1960);
                    v251 = *(_DWORD *)(v248 + 1968);
                    DWORD2(__p) = v251 >> 8;
                    if (v251 >> 8 > 0x40)
                    {
                      llvm::APInt::initSlowCase((llvm::APInt *)&__p, v249, 0);
                    }
                    else
                    {
                      if (v251 <= 0xFF)
                        v252 = 0;
                      else
                        v252 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v251);
                      *(_QWORD *)&__p = v252 & v249;
                    }
                    v253 = llvm::ConstantInt::get(v250, (llvm::LLVMContext *)&__p, v84);
                    if (DWORD2(__p) >= 0x41 && (_QWORD)__p)
                      MEMORY[0x1CAA32F9C](__p, 0x1000C8000313F17);
                    LOWORD(v397) = 257;
                    v254 = (char *)operator new(0x80uLL);
                    *((_DWORD *)v254 + 21) = *((_DWORD *)v254 + 21) & 0x38000000 | 2;
                    v4 = (uint64_t ***)(v254 + 64);
                    *(_QWORD *)v254 = 0;
                    *((_QWORD *)v254 + 1) = 0;
                    *((_QWORD *)v254 + 2) = 0;
                    *((_QWORD *)v254 + 3) = v254 + 64;
                    *((_QWORD *)v254 + 4) = 0;
                    *((_QWORD *)v254 + 5) = 0;
                    *((_QWORD *)v254 + 6) = 0;
                    *((_QWORD *)v254 + 7) = v254 + 64;
                    llvm::ExtractElementInst::ExtractElementInst((uint64_t)(v254 + 64), v247, (uint64_t)v253, (uint64_t)&__p, 0);
                    return (llvm::UndefValue **)v4;
                  }
                  p_dst->__r_.__value_.__r.__words[0] = v144;
                }
                if ((*(_DWORD *)(*(_QWORD *)v413 + 8) & 0xFE) == 0x12)
                {
                  v390 = *(llvm::Type **)v413;
                  v82 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v413);
                  if ((_DWORD)v81 == 1)
                  v85 = llvm::Type::getPrimitiveSizeInBits(v80);
                  if ((_DWORD)v83 == 1)
                  if (__dst.__r_.__value_.__r.__words[0])
                  {
                    v86 = (_QWORD *)(__dst.__r_.__value_.__r.__words[0] + 24);
                    if (*(_DWORD *)(__dst.__r_.__value_.__r.__words[0] + 32) >= 0x41u)
                      v86 = (_QWORD *)*v86;
                    v87 = *(_DWORD *)v86;
                  }
                  else
                  {
                    v87 = 0;
                  }
                  v212 = (llvm::Type *)(v82 / v85);
                  if (!(v82 % v85))
                  {
                    v213 = v87 / v85;
                    if (!(v87 % v85))
                    {
                      if (*((llvm::Type **)v390 + 3) == v80)
                      {
                        v247 = v413;
                      }
                      else
                      {
                        llvm::FixedVectorType::get(v80, v212);
                        v292 = v291;
                        v293 = *(uint64_t **)(a1 + 24);
                        *(_QWORD *)&__p = "bc";
                        LOWORD(v397) = 259;
                        v247 = sub_1C4773E38(v293, 49, v413, v292, (uint64_t)&__p);
                        v413 = v247;
                      }
                      if (**(_BYTE **)(a1 + 80))
                        v249 = v212 + ~v213;
                      else
                        v249 = v213;
                      v248 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 64);
                      goto LABEL_368;
                    }
                  }
                }
                goto LABEL_322;
              }
            }
            v112 = *((unsigned __int8 *)v6 + 16);
            if (v112 == 5)
            {
              if (*((_WORD *)v6 + 9) != 25)
                goto LABEL_115;
              v141 = (unsigned __int8 **)&v6[-4 * (*((_DWORD *)v6 + 5) & 0x7FFFFFF)];
              v113 = *v141;
              if (!*v141)
                goto LABEL_115;
              v400 = *v141;
              v114 = v141[4];
              if (!v114)
                goto LABEL_115;
            }
            else
            {
              if (v112 != 53)
                goto LABEL_115;
              v113 = (unsigned __int8 *)*(v6 - 8);
              if (!v113)
                goto LABEL_115;
              v400 = (unsigned __int8 *)*(v6 - 8);
              v114 = (unsigned __int8 *)*(v6 - 4);
              if (!v114 || v114[16] > 0x14u)
                goto LABEL_115;
            }
            v398 = (llvm::ConstantExpr *)v114;
            v142 = v113[16];
            if (v142 >= 0x1C)
            {
              if ((v142 & 0xFE) == 0x36)
              {
                v186 = *((_DWORD *)v113 + 5);
                v187 = (v186 & 0x40000000) != 0
                     ? (unsigned __int8 *)*((_QWORD *)v113 - 1)
                     : &v113[-32 * (v186 & 0x7FFFFFF)];
                if (*(unsigned __int8 *)(*((_QWORD *)v187 + 4) + 16) < 0x15u)
                  goto LABEL_115;
              }
            }
            else if (v142 == 5 && (*((_WORD *)v113 + 9) & 0xFFFE) == 0x1A)
            {
              goto LABEL_115;
            }
            v294 = *(llvm::Type **)v114;
            if ((*(_DWORD *)(*(_QWORD *)v114 + 8) & 0xFE) == 0x12)
              v294 = (llvm::Type *)**((_QWORD **)v294 + 2);
            v295 = llvm::Type::getPrimitiveSizeInBits(v294);
            LODWORD(v414) = v295;
            if (v295 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v413, PrimitiveSizeInBits, 0);
              v114 = (unsigned __int8 *)v398;
            }
            else
            {
              if (v295)
                v296 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v295;
              else
                LODWORD(v296) = 0;
              v413 = (unsigned __int8 *)(v296 & PrimitiveSizeInBits);
            }
            *(_QWORD *)&__p = 36;
            *((_QWORD *)&__p + 1) = &v413;
            sub_1C57A1A3C((uint64_t)&__p, (llvm::Constant *)v114);
            v298 = v297;
            if (!v297)
            {
              v4 = 0;
              goto LABEL_444;
            }
            v299 = *(uint64_t **)(a1 + 24);
            if ((v400[23] & 0x10) == 0)
            {
              v321 = 0;
              v320 = &byte_1C871356D;
              goto LABEL_436;
            }
            v300 = ***(_QWORD ***)v400;
            v301 = *(_QWORD *)(v300 + 152);
            v302 = *(unsigned int *)(v300 + 168);
            if ((_DWORD)v302)
            {
              LODWORD(v303) = (v302 - 1) & ((v400 >> 4) ^ (v400 >> 9));
              v304 = v301 + 16 * v303;
              v305 = *(unsigned __int8 **)v304;
              if (*(unsigned __int8 **)v304 == v400)
              {
LABEL_435:
                v319 = *(_QWORD **)(v304 + 8);
                v322 = *v319;
                v320 = (char *)(v319 + 2);
                v321 = v322;
LABEL_436:
                LOWORD(v397) = 773;
                *(_QWORD *)&__p = v320;
                *((_QWORD *)&__p + 1) = v321;
                p_dst = (std::string *)".tr";
                v323 = sub_1C4773E38(v299, 38, v400, v7, (uint64_t)&__p);
                v324 = sub_1C537D3B8((llvm *)0x26, (uint64_t)v398, (llvm::Constant *)v7, 0);
                LOWORD(v397) = 257;
                v325 = (char *)operator new(0x80uLL);
                *(_QWORD *)v325 = 0;
                *((_QWORD *)v325 + 2) = 0;
                *((_QWORD *)v325 + 1) = 0;
                *((_QWORD *)v325 + 5) = 0;
                *((_QWORD *)v325 + 6) = 0;
                *((_QWORD *)v325 + 4) = 0;
                v326 = (llvm::UndefValue **)(v325 + 32);
                *((_QWORD *)v325 + 8) = *(_QWORD *)v323;
                v4 = (uint64_t ***)(v325 + 64);
                *((_QWORD *)v325 + 3) = v325 + 64;
                *((_QWORD *)v325 + 7) = v325 + 64;
                *((_QWORD *)v325 + 9) = 0;
                v325[80] = 53;
                v325[81] = 0;
                *((_WORD *)v325 + 41) = 0;
                *((_DWORD *)v325 + 21) = 2;
                *((_DWORD *)v325 + 30) = 0;
                *(_OWORD *)(v325 + 104) = 0u;
                *(_OWORD *)(v325 + 88) = 0u;
                *(_QWORD *)v325 = v323;
                v329 = *((_QWORD *)v323 + 1);
                v328 = v323 + 8;
                v327 = v329;
                *((_QWORD *)v325 + 1) = v329;
                if (v329)
                  *(_QWORD *)(v327 + 16) = v325 + 8;
                *((_QWORD *)v325 + 2) = v328;
                *v328 = v325;
                if (*((_QWORD *)v325 + 4))
                {
                  **((_QWORD **)v325 + 6) = *((_QWORD *)v325 + 5);
                  v378 = *((_QWORD *)v325 + 5);
                  if (v378)
                    *(_QWORD *)(v378 + 16) = *((_QWORD *)v325 + 6);
                }
                *v326 = v324;
                if (v324)
                {
                  v332 = *((_QWORD *)v324 + 1);
                  v331 = (llvm::UndefValue ***)((char *)v324 + 8);
                  v330 = v332;
                  *((_QWORD *)v325 + 5) = v332;
                  if (v332)
                    *(_QWORD *)(v330 + 16) = v325 + 40;
                  *((_QWORD *)v325 + 6) = v331;
                  *v331 = v326;
                }
                llvm::Value::setName((uint64_t ***)v325 + 8, (uint64_t)&__p);
LABEL_444:
                if (v414 >= 0x41 && v413)
                  MEMORY[0x1CAA32F9C](v413, 0x1000C8000313F17);
                if ((v298 & 1) != 0)
                  return (llvm::UndefValue **)v4;
                goto LABEL_115;
              }
              v306 = 1;
              while (v305 != (unsigned __int8 *)-4096)
              {
                v307 = v303 + v306++;
                v303 = v307 & (v302 - 1);
                v305 = *(unsigned __int8 **)(v301 + 16 * v303);
                if (v305 == v400)
                {
                  v304 = v301 + 16 * v303;
                  goto LABEL_435;
                }
              }
            }
            v304 = v301 + 16 * v302;
            goto LABEL_435;
          }
        }
        v335 = v408;
        v336 = v409 - v408;
        v417 = v408;
        if (v408 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v416, 0, 0);
          v335 = v417;
        }
        else
        {
          v416 = 0;
        }
        sub_1C4912E54(&v416, v336 + v335, v335);
        if (!llvm::MaskedValueIsZero(v406, (const llvm::Value *)&v416, *(const llvm::APInt **)(a1 + 80), 0, *(const llvm::DataLayout **)(a1 + 56), a2, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1, v380))goto LABEL_487;
        v337 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40);
        if (*(char *)(v337 + 239) < 0)
          sub_1C47EBC30(&__dst, *(void **)(v337 + 216), *(_QWORD *)(v337 + 224));
        else
          __dst = *(std::string *)(v337 + 216);
        if (!std::string::compare(&__dst, 0, 4uLL, "agx1"))
        {
          v338 = 27;
        }
        else if (!std::string::compare(&__dst, 0, 4uLL, "agx2"))
        {
          v338 = 28;
        }
        else if (!std::string::compare(&__dst, 0, 4uLL, "agx3"))
        {
          v338 = 29;
        }
        else
        {
          v338 = 0;
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if ((v338 & 0x1E) == 0x1C)
        {
          v383 = (unsigned __int8 *)v407;
          if (v407 != v406)
          {
LABEL_487:
            v4 = 0;
LABEL_516:
            if (v417 >= 0x41 && v416)
              MEMORY[0x1CAA32F9C](v416, 0x1000C8000313F17);
            if (v4)
              return (llvm::UndefValue **)v4;
            goto LABEL_103;
          }
          v345 = *(uint64_t **)(a1 + 24);
          v415 = 257;
          v381 = sub_1C4773E38(v345, 38, v387, v190, (uint64_t)&v413);
          v346 = *(_QWORD *)(a1 + 24);
          v415 = 257;
          v389 = sub_1C5346748(v346, (uint64_t)v381, (uint64_t)&v413, 0, 0);
          v347 = llvm::ConstantInt::get((llvm::ConstantInt *)v190, v409 - 1, 0);
          v348 = *(_QWORD *)(a1 + 24);
          v415 = 257;
          v382 = sub_1C4D89BCC(v348, v381, (uint64_t)v347, (uint64_t)&v413);
          v349 = *(_QWORD *)(a1 + 24);
          v415 = 257;
          v350 = sub_1C4D89BCC(v349, v389, (uint64_t)v347, (uint64_t)&v413);
          v351 = *(uint64_t **)(a1 + 24);
          v415 = 257;
          v352 = sub_1C4773E38(v351, 38, v383, v190, (uint64_t)&v413);
          if (v334)
            v353 = v382;
          else
            v353 = v350;
          if (!v334)
            v350 = v382;
          v354 = *(_QWORD *)(a1 + 24);
          v355 = *(unsigned __int8 *)(v385 + 16) - 28;
          v415 = 257;
          v356 = sub_1C4773860(v354, v355, v352, v353, (uint64_t)&v413, 0);
          v357 = *(_QWORD *)(a1 + 24);
          v358 = *(unsigned __int8 *)(v392 + 16) - 28;
          v415 = 257;
          v359 = sub_1C4773860(v357, v358, v352, v350, (uint64_t)&v413, 0);
          v415 = 257;
          v360 = (char *)operator new(0x80uLL);
          *((_QWORD *)v360 + 5) = 0;
          v361 = v360 + 40;
          *((_QWORD *)v360 + 6) = 0;
          *((_QWORD *)v360 + 8) = *(_QWORD *)v356;
          v4 = (uint64_t ***)(v360 + 64);
          *((_QWORD *)v360 + 3) = v360 + 64;
          *((_QWORD *)v360 + 7) = v360 + 64;
          *((_QWORD *)v360 + 9) = 0;
          v360[80] = 57;
          v360[81] = 0;
          *((_WORD *)v360 + 41) = 0;
          *((_DWORD *)v360 + 21) = 2;
          *(_OWORD *)(v360 + 88) = 0u;
          *(_OWORD *)(v360 + 104) = 0u;
          *((_DWORD *)v360 + 30) = 0;
          *(_QWORD *)v360 = v356;
          v364 = *((_QWORD *)v356 + 1);
          v363 = v356 + 8;
          v362 = v364;
          *((_QWORD *)v360 + 1) = v364;
          if (v364)
            *(_QWORD *)(v362 + 16) = v360 + 8;
          *((_QWORD *)v360 + 2) = v363;
          *v363 = v360;
          *((_QWORD *)v360 + 4) = v359;
          if (v359)
          {
            v367 = *((_QWORD *)v359 + 1);
            v366 = v359 + 8;
            v365 = v367;
            *v361 = v367;
            if (v367)
              *(_QWORD *)(v365 + 16) = v361;
            *((_QWORD *)v360 + 6) = v366;
            *v366 = v360 + 32;
          }
        }
        else
        {
          v339 = *(uint64_t **)(a1 + 24);
          v415 = 257;
          v388 = sub_1C4773E38(v339, 38, v387, v190, (uint64_t)&v413);
          v340 = *(uint64_t **)(a1 + 24);
          v415 = 257;
          v384 = sub_1C4773E38(v340, 38, (unsigned __int8 *)v407, v190, (uint64_t)&v413);
          v393 = v384;
          if (v407 != v406)
          {
            v341 = *(uint64_t **)(a1 + 24);
            v415 = 257;
            v393 = sub_1C4773E38(v341, 38, (unsigned __int8 *)v406, v190, (uint64_t)&v413);
          }
          if (v334)
            v342 = 148;
          else
            v342 = 149;
          Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40), v342, &v410, 1);
          v344 = Declaration;
          if (Declaration)
            v386 = *(_QWORD *)(Declaration + 24);
          else
            v386 = 0;
          v412[0] = (uint64_t)v384;
          v412[1] = (uint64_t)v393;
          v412[2] = (uint64_t)v388;
          v415 = 257;
          v368 = (char *)operator new(0xD0uLL);
          v369 = v368;
          v370 = 0;
          v4 = (uint64_t ***)(v368 + 128);
          *((_DWORD *)v368 + 37) = *((_DWORD *)v368 + 37) & 0x38000000 | 4;
          do
          {
            v371 = &v368[v370];
            *(_QWORD *)v371 = 0;
            *((_QWORD *)v371 + 1) = 0;
            *((_QWORD *)v371 + 2) = 0;
            *((_QWORD *)v371 + 3) = v4;
            v370 += 32;
          }
          while (v370 != 128);
          *((_QWORD *)v368 + 16) = **(_QWORD **)(v386 + 16);
          *((_QWORD *)v368 + 17) = 0;
          v368[144] = 84;
          v368[145] = 0;
          *((_WORD *)v368 + 73) = 0;
          *((_DWORD *)v368 + 37) = *((_DWORD *)v368 + 37) & 0xC0000000 | 4;
          *(_OWORD *)(v368 + 152) = 0u;
          *(_OWORD *)(v368 + 168) = 0u;
          *((_DWORD *)v368 + 46) = 0;
          *((_QWORD *)v368 + 24) = 0;
          *((_QWORD *)v368 + 25) = v386;
          sub_1C5382FD4((uint64_t)&v411, v412, (uint64_t *)&v413, (uint64_t)v368);
          v372 = (uint64_t *)(v369 + 96);
          if (*((_QWORD *)v369 + 12))
          {
            **((_QWORD **)v369 + 14) = *((_QWORD *)v369 + 13);
            v379 = *((_QWORD *)v369 + 13);
            if (v379)
              *(_QWORD *)(v379 + 16) = *((_QWORD *)v369 + 14);
          }
          *v372 = v344;
          if (v344)
          {
            v375 = *(_QWORD *)(v344 + 8);
            v374 = (uint64_t **)(v344 + 8);
            v373 = v375;
            *((_QWORD *)v369 + 13) = v375;
            if (v375)
              *(_QWORD *)(v373 + 16) = v369 + 104;
            *((_QWORD *)v369 + 14) = v374;
            *v374 = v372;
          }
          llvm::CallBase::populateBundleOperandInfos((uint64_t)v4, 0, 0, 3u);
        }
        llvm::Value::setName(v4, (uint64_t)&v413);
        goto LABEL_516;
      }
      v115 = *((unsigned __int8 *)v6 + 16);
      if (v115 == 5)
      {
        if (*((_WORD *)v6 + 9) != 26)
          goto LABEL_227;
        v132 = &v6[-4 * (*((_DWORD *)v6 + 5) & 0x7FFFFFF)];
        v116 = *v132;
        if (!*v132)
          goto LABEL_218;
        v117 = (unsigned __int8 *)v132[4];
        if (!v117)
          goto LABEL_218;
      }
      else
      {
        if (v115 != 54)
          goto LABEL_219;
        v116 = *(v6 - 8);
        if (!v116)
          goto LABEL_65;
        v117 = (unsigned __int8 *)*(v6 - 4);
        if (!v117 || v117[16] > 0x14u)
        {
LABEL_218:
          v115 = *((unsigned __int8 *)v6 + 16);
LABEL_219:
          if (v115 != 5)
          {
            if (v115 != 57)
              goto LABEL_65;
            v147 = *(v6 - 8);
            v148 = *((unsigned __int8 *)v147 + 16);
            if (v148 == 5)
            {
              if (*((_WORD *)v147 + 9) != 26)
                goto LABEL_274;
              v188 = (uint64_t ***)&v147[-4 * (*((_DWORD *)v147 + 5) & 0x7FFFFFF)];
              v149 = *v188;
              if (!*v188)
                goto LABEL_274;
              v150 = (unsigned __int8 *)v188[4];
              if (!v150)
                goto LABEL_274;
            }
            else
            {
              if (v148 != 54)
                goto LABEL_274;
              v149 = (uint64_t **)*(v147 - 8);
              if (!v149)
                goto LABEL_274;
              v150 = (unsigned __int8 *)*(v147 - 4);
              if (!v150 || v150[16] > 0x14u)
                goto LABEL_274;
            }
            if (v149 != *(v6 - 4))
            {
LABEL_274:
              v189 = *(v6 - 4);
LABEL_300:
              v204 = *((unsigned __int8 *)v189 + 16);
              if (v204 == 5)
              {
                if (*((_WORD *)v189 + 9) != 26)
                  goto LABEL_65;
                v206 = (uint64_t *)&v189[-4 * (*((_DWORD *)v189 + 5) & 0x7FFFFFF)];
                v205 = (uint64_t **)*v206;
                if (!*v206)
                  goto LABEL_65;
                v150 = (unsigned __int8 *)v206[4];
                if (!v150)
                  goto LABEL_65;
              }
              else
              {
                if (v204 != 54)
                  goto LABEL_65;
                v205 = (uint64_t **)*(v189 - 8);
                if (!v205)
                  goto LABEL_65;
                v150 = (unsigned __int8 *)*(v189 - 4);
                if (!v150 || v150[16] > 0x14u)
                  goto LABEL_65;
              }
              v149 = v147;
              if (v205 != v147)
                goto LABEL_65;
            }
LABEL_310:
            DWORD2(__p) = v14;
            if (v14 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&__p, 1, 0);
            }
            else
            {
              v207 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v14;
              if (!v14)
                LOBYTE(v207) = 0;
              *(_QWORD *)&__p = v207 & 1;
            }
            v208 = llvm::ConstantInt::get((llvm::ConstantInt **)v8, (llvm::Type *)&__p, v34);
            if (DWORD2(__p) >= 0x41 && (_QWORD)__p)
              MEMORY[0x1CAA32F9C](__p, 0x1000C8000313F17);
            Shl = llvm::ConstantExpr::getShl((llvm::ConstantExpr *)v208, (llvm::Constant *)v150, 0, 0);
            v135 = llvm::ConstantExpr::getOr(Shl, (llvm::Constant *)v208, v210, v211);
            v136 = *(_QWORD *)(a1 + 24);
            LOWORD(v397) = 257;
            v137 = v149;
LABEL_318:
            v38 = sub_1C4D89BCC(v136, v137, (uint64_t)v135, (uint64_t)&__p);
            v39 = (char *)operator new(0x80uLL);
            v4 = (uint64_t ***)(v39 + 64);
            *((_DWORD *)v39 + 21) = *((_DWORD *)v39 + 21) & 0x38000000 | 2;
            *(_QWORD *)v39 = 0;
            *((_QWORD *)v39 + 1) = 0;
            *((_QWORD *)v39 + 4) = 0;
            v40 = (llvm::Value ***)(v39 + 32);
            *((_QWORD *)v39 + 2) = 0;
            *((_QWORD *)v39 + 3) = v39 + 64;
            *((_QWORD *)v39 + 5) = 0;
            *((_QWORD *)v39 + 6) = 0;
            *((_QWORD *)v39 + 7) = v39 + 64;
            LOWORD(v397) = 257;
LABEL_52:
            sub_1C4774CC4(*(_DWORD **)v38);
            *((_QWORD *)v39 + 8) = v41;
            *((_QWORD *)v39 + 9) = 0;
            v42 = *((_DWORD *)v39 + 21) & 0xC0000000 | 2;
            *((_DWORD *)v39 + 20) = 81;
            *((_DWORD *)v39 + 21) = v42;
            *(_OWORD *)(v39 + 88) = 0u;
            *(_OWORD *)(v39 + 104) = 0u;
            *((_DWORD *)v39 + 30) = 0;
            if (*(_QWORD *)v39)
            {
              **((_QWORD **)v39 + 2) = *((_QWORD *)v39 + 1);
              v376 = *((_QWORD *)v39 + 1);
              if (v376)
                *(_QWORD *)(v376 + 16) = *((_QWORD *)v39 + 2);
            }
            *(_QWORD *)v39 = v38;
            v45 = *(_QWORD *)(v38 + 8);
            v44 = (_QWORD *)(v38 + 8);
            v43 = v45;
            *((_QWORD *)v39 + 1) = v45;
            if (v45)
              *(_QWORD *)(v43 + 16) = v39 + 8;
            *((_QWORD *)v39 + 2) = v44;
            *v44 = v39;
            if (*((_QWORD *)v39 + 4))
            {
              **((_QWORD **)v39 + 6) = *((_QWORD *)v39 + 5);
              v377 = *((_QWORD *)v39 + 5);
              if (v377)
                *(_QWORD *)(v377 + 16) = *((_QWORD *)v39 + 6);
            }
            *v40 = NullValue;
            if (NullValue)
            {
              v48 = NullValue[1];
              v47 = (llvm::Value ****)(NullValue + 1);
              v46 = v48;
              *((_QWORD *)v39 + 5) = v48;
              if (v48)
                *((_QWORD *)v46 + 2) = v39 + 40;
              *((_QWORD *)v39 + 6) = v47;
              *v47 = v40;
            }
            *((_WORD *)v39 + 41) = 33;
LABEL_61:
            p_p = (unsigned __int8 **)&__p;
LABEL_62:
            llvm::Value::setName(v4, (uint64_t)p_p);
            return (llvm::UndefValue **)v4;
          }
LABEL_227:
          if (*((_WORD *)v6 + 9) != 29)
            goto LABEL_65;
          v151 = &v6[-4 * (*((_DWORD *)v6 + 5) & 0x7FFFFFF)];
          v147 = *v151;
          v152 = *((unsigned __int8 *)*v151 + 16);
          if (v152 == 5)
          {
            if (*((_WORD *)v147 + 9) != 26)
              goto LABEL_299;
            v203 = (uint64_t ***)&v147[-4 * (*((_DWORD *)v147 + 5) & 0x7FFFFFF)];
            v149 = *v203;
            if (!*v203)
              goto LABEL_299;
            v150 = (unsigned __int8 *)v203[4];
            if (!v150)
              goto LABEL_299;
          }
          else
          {
            if (v152 != 54)
              goto LABEL_299;
            v149 = (uint64_t **)*(v147 - 8);
            if (!v149)
              goto LABEL_299;
            v150 = (unsigned __int8 *)*(v147 - 4);
            if (!v150 || v150[16] > 0x14u)
              goto LABEL_299;
          }
          if (v149 == v151[4])
            goto LABEL_310;
LABEL_299:
          v189 = v151[4];
          goto LABEL_300;
        }
      }
      DWORD2(__p) = v14;
      if (v14 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&__p, 1, 0);
      }
      else
      {
        v133 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v14;
        if (!v14)
          LOBYTE(v133) = 0;
        *(_QWORD *)&__p = v133 & 1;
      }
      v134 = llvm::ConstantInt::get((llvm::ConstantInt **)v8, (llvm::Type *)&__p, v34);
      if (DWORD2(__p) >= 0x41 && (_QWORD)__p)
        MEMORY[0x1CAA32F9C](__p, 0x1000C8000313F17);
      v135 = llvm::ConstantExpr::getShl((llvm::ConstantExpr *)v134, (llvm::Constant *)v117, 0, 0);
      v136 = *(_QWORD *)(a1 + 24);
      LOWORD(v397) = 257;
      v137 = v116;
      goto LABEL_318;
    }
    v23 = *(_QWORD **)v21;
    v24 = (llvm::Type *)v7;
    if ((*(_DWORD *)(v21 + 8) & 0xFE) == 0x12)
      v24 = **(llvm::Type ***)(v21 + 16);
    v25 = 2 * llvm::Type::getPrimitiveSizeInBits(v24);
    LODWORD(__p) = v25;
    if (v25 <= 63)
    {
      switch(v25)
      {
        case 32:
          v26 = (llvm::Type *)(*v23 + 1960);
          goto LABEL_36;
        case 16:
          v26 = (llvm::Type *)(*v23 + 1936);
          goto LABEL_36;
        case 8:
          v26 = (llvm::Type *)(*v23 + 1912);
          goto LABEL_36;
      }
    }
    else
    {
      if (v25 == 64)
      {
        v26 = (llvm::Type *)(*v23 + 1984);
        goto LABEL_36;
      }
      if (v25 == 128)
      {
        v26 = (llvm::Type *)(*v23 + 2008);
        goto LABEL_36;
      }
    }
    v138 = sub_1C5270984(*v23 + 2168, &__p);
    v26 = (llvm::Type *)*((_QWORD *)v138 + 1);
    if (!v26)
    {
      v139 = v138;
      v26 = (llvm::Type *)sub_1C484358C(*v23 + 2040, 24, 3);
      v140 = __p;
      *(_QWORD *)v26 = v23;
      *((_QWORD *)v26 + 2) = 0;
      *((_QWORD *)v26 + 1) = (v140 << 8) | 0xDu;
      *((_QWORD *)v139 + 1) = v26;
    }
LABEL_36:
    if (*((_BYTE *)v8 + 8) == 13 && *((_BYTE *)v26 + 8) == 13)
    {
      v28 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v8);
      if ((_DWORD)v27 == 1)
      v30 = llvm::Type::getPrimitiveSizeInBits(v26);
      if ((_DWORD)v29 == 1)
      if (sub_1C577D3C0(a1, v28, v30)
        && sub_1C57E005C((uint64_t)v6, (uint64_t)v26, (const llvm::DataLayout **)a1, a2))
      {
        v31 = sub_1C57DCDFC(a1, (uint64_t)v6, (llvm::Type ***)v26, 0);
        v32 = (char *)operator new(0x60uLL);
        *((_DWORD *)v32 + 13) = *((_DWORD *)v32 + 13) & 0x38000000 | 1;
        v4 = (uint64_t ***)(v32 + 32);
        *(_QWORD *)v32 = 0;
        *((_QWORD *)v32 + 1) = 0;
        *((_QWORD *)v32 + 2) = 0;
        *((_QWORD *)v32 + 3) = v32 + 32;
        LOWORD(v397) = 257;
        llvm::TruncInst::TruncInst((uint64_t)(v32 + 32), (uint64_t)v31, v7, (uint64_t)&__p, 0);
        return (llvm::UndefValue **)v4;
      }
    }
    goto LABEL_45;
  }
  v20 = sub_1C57DCDFC(a1, (uint64_t)v6, (llvm::Type ***)v7, 0);
  return sub_1C577F888(a1, a2, v20);
}

unint64_t sub_1C57E005C(uint64_t a1, uint64_t a2, const llvm::DataLayout **a3, llvm::AssumptionCache *a4)
{
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  llvm::Type *v17;
  unsigned int PrimitiveSizeInBits;
  int v19;
  llvm **v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  llvm::Type *v24;
  int v25;
  uint64_t v26;
  llvm::Type *v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  llvm::Type *v32;
  int v33;
  uint64_t v34;
  char v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  llvm::AssumptionCache *v39;
  unint64_t v40;
  _QWORD *v41;
  int v42;
  _QWORD *v43;
  uint64_t v44;
  llvm::AssumptionCache *v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  int v51;
  uint64_t *v52;
  uint64_t v53;
  llvm::AssumptionCache *v54;
  unsigned int v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  int v60;
  llvm **v61;
  int v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  BOOL v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  const llvm::DataLayout *v73;
  const llvm::DataLayout *v74;
  llvm::AssumptionCache *v75;
  unsigned int v76;
  int v77;
  _QWORD *v78;
  char v79;
  int v80;
  _QWORD *v81;
  char v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  BOOL v87;
  size_t v89;
  int v90;
  int64_t v91;
  BOOL v92;
  unint64_t v93;
  unsigned int v94;
  unint64_t v95;
  size_t v96;
  size_t v97;
  int v98;
  int64_t v99;
  unint64_t v100;
  unsigned int v101;
  int v102;
  int64_t v103;
  unint64_t v104;
  unsigned int v105;
  BOOL v106[8];
  unsigned int v107;
  void *__src;
  unsigned int v109;
  uint64_t v110;
  unsigned int v111;
  const llvm::DataLayout *v112;
  const llvm::DataLayout *v113;
  llvm::AssumptionCache *v114;
  const llvm::DataLayout *v115;
  uint64_t v116;
  char v117;

  v7 = a1;
  if (sub_1C57E80FC(a1, a2))
    goto LABEL_2;
  LOBYTE(v8) = 1;
  while (2)
  {
    v9 = *(unsigned __int8 *)(v7 + 16);
    if (v9 < 0x1C)
      goto LABEL_172;
    v10 = *(_QWORD *)(v7 + 8);
    if (!v10 || *(_QWORD *)(v10 + 8))
      goto LABEL_172;
    v11 = *(_QWORD *)v7;
    switch(*(_BYTE *)(v7 + 16))
    {
      case ')':
      case '+':
      case '-':
      case '8':
      case '9':
      case ':':
        v12 = *(_DWORD *)(v7 + 20);
        if ((v12 & 0x40000000) != 0)
          v13 = *(_QWORD **)(v7 - 8);
        else
          v13 = (_QWORD *)(v7 - 32 * (v12 & 0x7FFFFFF));
        if (!sub_1C57E005C(*v13, a2, a3, a4))
          goto LABEL_172;
        v14 = *(_DWORD *)(v7 + 20);
        if ((v14 & 0x40000000) != 0)
          v15 = *(_QWORD *)(v7 - 8);
        else
          v15 = v7 - 32 * (v14 & 0x7FFFFFF);
        v16 = (uint64_t *)(v15 + 32);
        goto LABEL_16;
      case '*':
      case ',':
      case '.':
      case '0':
      case '1':
      case '3':
      case '4':
      case ';':
      case '<':
      case '=':
      case '>':
      case '?':
      case '@':
      case 'A':
        goto LABEL_172;
      case '/':
      case '2':
        if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12)
          v11 = **(_QWORD **)(v11 + 16);
        LODWORD(v8) = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v11);
        v17 = (llvm::Type *)a2;
        if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
          v17 = **(llvm::Type ***)(a2 + 16);
        PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v17);
        LODWORD(v113) = v8;
        if (v8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v112, 0, 0);
          LODWORD(v8) = (_DWORD)v113;
        }
        else
        {
          v112 = 0;
        }
        sub_1C4912E54(&v112, PrimitiveSizeInBits, v8);
        v19 = *(_DWORD *)(v7 + 20);
        if ((v19 & 0x40000000) != 0)
          v20 = *(llvm ***)(v7 - 8);
        else
          v20 = (llvm **)(v7 - 32 * (v19 & 0x7FFFFFF));
        v35 = 1;
        if (llvm::MaskedValueIsZero(*v20, (const llvm::Value *)&v112, a3[10], 0, a3[7], a4, a3[9], (const llvm::DominatorTree *)1, v106[0]))
        {
          v36 = *(_DWORD *)(v7 + 20);
          v37 = (v36 & 0x40000000) != 0 ? *(_QWORD *)(v7 - 8) : v7 - 32 * (v36 & 0x7FFFFFF);
          if (llvm::MaskedValueIsZero(*(llvm **)(v37 + 32), (const llvm::Value *)&v112, a3[10], 0, a3[7], a4, a3[9], (const llvm::DominatorTree *)1, v106[0]))
          {
            v62 = *(_DWORD *)(v7 + 20);
            if ((v62 & 0x40000000) != 0)
              v63 = *(_QWORD **)(v7 - 8);
            else
              v63 = (_QWORD *)(v7 - 32 * (v62 & 0x7FFFFFF));
            if (sub_1C57E005C(*v63, a2, a3, a4))
            {
              v68 = *(_DWORD *)(v7 + 20);
              if ((v68 & 0x40000000) != 0)
                v69 = *(_QWORD *)(v7 - 8);
              else
                v69 = v7 - 32 * (v68 & 0x7FFFFFF);
              LOBYTE(v8) = sub_1C57E005C(*(_QWORD *)(v69 + 32), a2, a3, a4);
              v35 = 0;
            }
            else
            {
              v35 = 0;
              LOBYTE(v8) = 0;
            }
          }
        }
        if (v113 >= 0x41 && v112)
          MEMORY[0x1CAA32F9C](v112, 0x1000C8000313F17);
        if ((v35 & 1) != 0)
          goto LABEL_172;
        return v8 & 1;
      case '5':
        v24 = (llvm::Type *)a2;
        if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
          v24 = **(llvm::Type ***)(a2 + 16);
        LODWORD(v8) = llvm::Type::getPrimitiveSizeInBits(v24);
        v25 = *(_DWORD *)(v7 + 20);
        if ((v25 & 0x40000000) != 0)
          v26 = *(_QWORD *)(v7 - 8);
        else
          v26 = v7 - 32 * (v25 & 0x7FFFFFF);
        v38 = *(_QWORD *)(v26 + 32);
        if (!v38
          || *(unsigned __int8 *)(v38 + 16) < 0x1Cu
          || (v39 = *(llvm::AssumptionCache **)(v26 + 32), !*(_QWORD *)(v38 + 40)))
        {
          v39 = 0;
        }
        v112 = a3[10];
        v113 = 0;
        v115 = 0;
        v116 = 0;
        v114 = v39;
        v117 = 1;
        sub_1C4F83784(v38, 0, (uint64_t *)&v112, &__src);
        LODWORD(v113) = v109;
        if (v109 > 0x40)
        {
          v89 = (((unint64_t)v109 + 63) >> 3) & 0x3FFFFFF8;
          v112 = (const llvm::DataLayout *)operator new[]();
          memcpy(v112, __src, v89);
          llvm::APInt::flipAllBitsSlowCase((uint64_t)&v112);
          v41 = v112;
          v8 = v8;
          if (v113 >= 0x41)
          {
            v90 = 0;
            v91 = ((unint64_t)v113 + 63) >> 6;
            do
            {
              v92 = v91-- < 1;
              if (v92)
                break;
              v93 = *((_QWORD *)v112 + v91);
              v90 += __clz(v93);
            }
            while (!v93);
            v94 = v113 | 0xFFFFFFC0;
            if ((v113 & 0x3F) == 0)
              v94 = 0;
            if ((_DWORD)v113 - v90 - v94 >= 0x41)
            {
              if (v112)
                MEMORY[0x1CAA32F9C](v112, 0x1000C8000313F17);
            }
            else
            {
              v95 = *(_QWORD *)v112;
              MEMORY[0x1CAA32F9C]();
              if (v95 < v8)
                goto LABEL_62;
            }
            goto LABEL_211;
          }
        }
        else
        {
          if (v109)
            v40 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v109;
          else
            v40 = 0;
          v41 = (_QWORD *)(v40 & ~(unint64_t)__src);
          v8 = v8;
        }
        if ((unint64_t)v41 < v8)
        {
LABEL_62:
          v42 = *(_DWORD *)(v7 + 20);
          if ((v42 & 0x40000000) != 0)
            v43 = *(_QWORD **)(v7 - 8);
          else
            v43 = (_QWORD *)(v7 - 32 * (v42 & 0x7FFFFFF));
          if (sub_1C57E005C(*v43, a2, a3, a4))
          {
            v70 = *(_DWORD *)(v7 + 20);
            if ((v70 & 0x40000000) != 0)
              v71 = *(_QWORD *)(v7 - 8);
            else
              v71 = v7 - 32 * (v70 & 0x7FFFFFF);
            LOBYTE(v8) = sub_1C57E005C(*(_QWORD *)(v71 + 32), a2, a3, a4);
          }
          else
          {
            LOBYTE(v8) = 0;
          }
          v82 = 1;
LABEL_212:
          if (v111 >= 0x41 && v110)
            MEMORY[0x1CAA32F9C](v110, 0x1000C8000313F17);
          if (v109 >= 0x41 && __src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
          if ((v82 & 1) == 0)
            goto LABEL_172;
          return v8 & 1;
        }
LABEL_211:
        v82 = 0;
        goto LABEL_212;
      case '6':
        if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12)
          v11 = **(_QWORD **)(v11 + 16);
        v31 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v11);
        v32 = (llvm::Type *)a2;
        if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
          v32 = **(llvm::Type ***)(a2 + 16);
        LODWORD(v8) = llvm::Type::getPrimitiveSizeInBits(v32);
        v33 = *(_DWORD *)(v7 + 20);
        if ((v33 & 0x40000000) != 0)
          v34 = *(_QWORD *)(v7 - 8);
        else
          v34 = v7 - 32 * (v33 & 0x7FFFFFF);
        v53 = *(_QWORD *)(v34 + 32);
        if (!v53
          || *(unsigned __int8 *)(v53 + 16) < 0x1Cu
          || (v54 = *(llvm::AssumptionCache **)(v34 + 32), !*(_QWORD *)(v53 + 40)))
        {
          v54 = 0;
        }
        v112 = a3[10];
        v113 = 0;
        v115 = 0;
        v116 = 0;
        v114 = v54;
        v117 = 1;
        sub_1C4F83784(v53, 0, (uint64_t *)&v112, &__src);
        v107 = v31;
        if (v31 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)v106, 0, 0);
          v31 = v107;
        }
        else
        {
          *(_QWORD *)v106 = 0;
        }
        sub_1C4912E54(v106, v8, v31);
        v55 = v109;
        LODWORD(v113) = v109;
        if (v109 > 0x40)
        {
          v97 = (((unint64_t)v109 + 63) >> 3) & 0x3FFFFFF8;
          v112 = (const llvm::DataLayout *)operator new[]();
          memcpy(v112, __src, v97);
          llvm::APInt::flipAllBitsSlowCase((uint64_t)&v112);
          v55 = v113;
          v58 = v112;
          if (v113 >= 0x41)
          {
            v102 = 0;
            v103 = ((unint64_t)v113 + 63) >> 6;
            do
            {
              v92 = v103-- < 1;
              if (v92)
                break;
              v104 = *((_QWORD *)v112 + v103);
              v102 += __clz(v104);
            }
            while (!v104);
            v105 = v113 | 0xFFFFFFC0;
            if ((v113 & 0x3F) == 0)
              v105 = 0;
            if ((_DWORD)v113 - v102 - v105 > 0x40)
              goto LABEL_103;
            v59 = *(_QWORD **)v112;
          }
          else
          {
            v59 = v112;
          }
        }
        else
        {
          v56 = ~(unint64_t)__src;
          if (v109)
            v57 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v109;
          else
            v57 = 0;
          v58 = (_QWORD *)(v57 & v56);
          v59 = (_QWORD *)(v57 & v56);
        }
        if ((unint64_t)v59 >= v8)
        {
          if (v55 < 0x41)
          {
LABEL_141:
            v79 = 1;
            goto LABEL_142;
          }
LABEL_103:
          if (v58)
            MEMORY[0x1CAA32F9C](v58, 0x1000C8000313F17);
          goto LABEL_141;
        }
        v60 = *(_DWORD *)(v7 + 20);
        if ((v60 & 0x40000000) != 0)
          v61 = *(llvm ***)(v7 - 8);
        else
          v61 = (llvm **)(v7 - 32 * (v60 & 0x7FFFFFF));
        LODWORD(v8) = llvm::MaskedValueIsZero(*v61, (const llvm::Value *)v106, a3[10], 0, a3[7], a4, a3[9], (const llvm::DominatorTree *)1, v106[0]);
        if (v55 >= 0x41 && v58)
          MEMORY[0x1CAA32F9C](v58, 0x1000C8000313F17);
        if (!(_DWORD)v8)
          goto LABEL_141;
        v80 = *(_DWORD *)(v7 + 20);
        if ((v80 & 0x40000000) != 0)
          v81 = *(_QWORD **)(v7 - 8);
        else
          v81 = (_QWORD *)(v7 - 32 * (v80 & 0x7FFFFFF));
        if (sub_1C57E005C(*v81, a2, a3, a4))
        {
          v85 = *(_DWORD *)(v7 + 20);
          if ((v85 & 0x40000000) != 0)
            v86 = *(_QWORD *)(v7 - 8);
          else
            v86 = v7 - 32 * (v85 & 0x7FFFFFF);
          LOBYTE(v8) = sub_1C57E005C(*(_QWORD *)(v86 + 32), a2, a3, a4);
          v79 = 0;
        }
        else
        {
          v79 = 0;
          LOBYTE(v8) = 0;
        }
LABEL_142:
        if (v107 >= 0x41 && *(_QWORD *)v106)
          MEMORY[0x1CAA32F9C](*(_QWORD *)v106, 0x1000C8000313F17);
LABEL_169:
        if (v111 >= 0x41 && v110)
          MEMORY[0x1CAA32F9C](v110, 0x1000C8000313F17);
        if (v109 >= 0x41 && __src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        if ((v79 & 1) != 0)
          goto LABEL_172;
        return v8 & 1;
      case '7':
        if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12)
          v11 = **(_QWORD **)(v11 + 16);
        LODWORD(v8) = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v11);
        v27 = (llvm::Type *)a2;
        if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
          v27 = **(llvm::Type ***)(a2 + 16);
        v28 = llvm::Type::getPrimitiveSizeInBits(v27);
        v29 = *(_DWORD *)(v7 + 20);
        if ((v29 & 0x40000000) != 0)
          v30 = *(_QWORD *)(v7 - 8);
        else
          v30 = v7 - 32 * (v29 & 0x7FFFFFF);
        v44 = *(_QWORD *)(v30 + 32);
        if (!v44
          || *(unsigned __int8 *)(v44 + 16) < 0x1Cu
          || (v45 = *(llvm::AssumptionCache **)(v30 + 32), !*(_QWORD *)(v44 + 40)))
        {
          v45 = 0;
        }
        v112 = a3[10];
        v113 = 0;
        v115 = 0;
        v116 = 0;
        v114 = v45;
        v117 = 1;
        sub_1C4F83784(v44, 0, (uint64_t *)&v112, &__src);
        v46 = v109;
        LODWORD(v113) = v109;
        if (v109 > 0x40)
        {
          v96 = (((unint64_t)v109 + 63) >> 3) & 0x3FFFFFF8;
          v112 = (const llvm::DataLayout *)operator new[]();
          memcpy(v112, __src, v96);
          llvm::APInt::flipAllBitsSlowCase((uint64_t)&v112);
          v46 = v113;
          v49 = v112;
          if (v113 >= 0x41)
          {
            v98 = 0;
            v99 = ((unint64_t)v113 + 63) >> 6;
            do
            {
              v92 = v99-- < 1;
              if (v92)
                break;
              v100 = *((_QWORD *)v112 + v99);
              v98 += __clz(v100);
            }
            while (!v100);
            v101 = v113 | 0xFFFFFFC0;
            if ((v113 & 0x3F) == 0)
              v101 = 0;
            if ((_DWORD)v113 - v98 - v101 > 0x40)
              goto LABEL_100;
            v50 = *(_QWORD **)v112;
          }
          else
          {
            v50 = v112;
          }
        }
        else
        {
          v47 = ~(unint64_t)__src;
          if (v109)
            v48 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v109;
          else
            v48 = 0;
          v49 = (_QWORD *)(v48 & v47);
          v50 = (_QWORD *)(v48 & v47);
        }
        if ((unint64_t)v50 < v28)
        {
          v51 = *(_DWORD *)(v7 + 20);
          if ((v51 & 0x40000000) != 0)
            v52 = *(uint64_t **)(v7 - 8);
          else
            v52 = (uint64_t *)(v7 - 32 * (v51 & 0x7FFFFFF));
          v72 = *v52;
          v73 = a3[7];
          v74 = a3[9];
          if (!a4 || (v75 = a4, !*((_QWORD *)a4 + 5)))
          {
            v87 = v72 && *(unsigned __int8 *)(v72 + 16) >= 0x1Cu;
            if (!v87 || (v75 = (llvm::AssumptionCache *)v72, !*(_QWORD *)(v72 + 40)))
              v75 = 0;
          }
          v76 = v8 - v28;
          v112 = a3[10];
          v113 = v73;
          v114 = v75;
          v115 = v74;
          v116 = 0;
          v117 = 1;
          LODWORD(v8) = sub_1C4F85990((llvm::Constant *)v72, 0, (uint64_t)&v112);
          if (v46 >= 0x41 && v49)
            MEMORY[0x1CAA32F9C](v49, 0x1000C8000313F17);
          if (v76 < v8)
          {
            v77 = *(_DWORD *)(v7 + 20);
            if ((v77 & 0x40000000) != 0)
              v78 = *(_QWORD **)(v7 - 8);
            else
              v78 = (_QWORD *)(v7 - 32 * (v77 & 0x7FFFFFF));
            if (sub_1C57E005C(*v78, a2, a3, a4))
            {
              v83 = *(_DWORD *)(v7 + 20);
              if ((v83 & 0x40000000) != 0)
                v84 = *(_QWORD *)(v7 - 8);
              else
                v84 = v7 - 32 * (v83 & 0x7FFFFFF);
              LOBYTE(v8) = sub_1C57E005C(*(_QWORD *)(v84 + 32), a2, a3, a4);
              v79 = 0;
            }
            else
            {
              v79 = 0;
              LOBYTE(v8) = 0;
            }
            goto LABEL_169;
          }
LABEL_133:
          v79 = 1;
          goto LABEL_169;
        }
        if (v46 < 0x41)
          goto LABEL_133;
LABEL_100:
        if (v49)
          MEMORY[0x1CAA32F9C](v49, 0x1000C8000313F17);
        goto LABEL_133;
      case 'B':
      case 'C':
      case 'D':
        return v8 & 1;
      default:
        if (v9 != 85)
        {
          if (v9 == 83)
          {
            v21 = *(_DWORD *)(v7 + 20);
            if ((v21 & 0x40000000) != 0)
            {
              v23 = *(uint64_t **)(v7 - 8);
              v22 = v21 & 0x7FFFFFF;
            }
            else
            {
              v22 = v21 & 0x7FFFFFF;
              v23 = (uint64_t *)(v7 - 32 * v22);
            }
            if (v22)
            {
              v64 = 32 * v22 - 32;
              do
              {
                v65 = *v23;
                v23 += 4;
                v66 = sub_1C57E005C(v65, a2, a3, a4);
                LOBYTE(v8) = v66;
                if (v66)
                  v67 = v64 == 0;
                else
                  v67 = 1;
                v64 -= 32;
              }
              while (!v67);
              return v8 & 1;
            }
LABEL_2:
            LOBYTE(v8) = 1;
            return v8 & 1;
          }
LABEL_172:
          LOBYTE(v8) = 0;
          return v8 & 1;
        }
        if (!sub_1C57E005C(*(_QWORD *)(v7 - 64), a2, a3, a4))
          goto LABEL_172;
        v16 = (uint64_t *)(v7 - 32);
LABEL_16:
        v7 = *v16;
        if (sub_1C57E80FC(*v16, a2))
          goto LABEL_2;
        continue;
    }
  }
}

uint64_t sub_1C57E0C24(unsigned __int8 *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  llvm::UndefValue *v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  llvm::Type *v12;
  llvm::UndefValue *v13;
  unsigned __int8 *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _BYTE v19[32];
  __int16 v20;

  result = 0;
  v4 = *((_QWORD *)a1 - 4);
  if (v4 && *(_BYTE *)(v4 + 16) == 90)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (!v5 || *(_QWORD *)(v5 + 8))
      return 0;
    v7 = *(llvm::UndefValue **)a1;
    v8 = *(_QWORD *)a1;
    if ((*(_DWORD *)(*(_QWORD *)a1 + 8) & 0xFE) == 0x12)
      v8 = **((_QWORD **)v7 + 2);
    v9 = a1[16];
    v10 = *(unsigned __int8 **)(v4 - 64);
    v11 = *(_QWORD *)(v4 - 32);
    if (sub_1C4E7B480(*(_QWORD *)(v4 - 96)))
    {
      v13 = llvm::UndefValue::get(v7, v12);
      v20 = 257;
      v14 = sub_1C4773E38(a2, (v9 - 28), v10, v8, (uint64_t)v19);
      v20 = 257;
      v15 = operator new(0xA0uLL);
      v16 = 0;
      v17 = (uint64_t)(v15 + 24);
      v15[29] = v15[29] & 0x38000000 | 3;
      do
      {
        v18 = &v15[v16];
        *v18 = 0;
        v18[1] = 0;
        v18[2] = 0;
        v18[3] = v17;
        v16 += 8;
      }
      while (v16 != 24);
      return llvm::InsertElementInst::InsertElementInst(v17, v13, (uint64_t)v14, v11, (uint64_t)v19, 0);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

llvm::UndefValue **sub_1C57E0D58(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  llvm::APInt *v3;
  unsigned __int8 *v7;
  __int16 v8;
  unsigned int v9;
  int8x8_t v10;
  uint8x8_t v11;
  int v12;
  _BYTE *v13;
  llvm::ConstantInt *v14;
  llvm::Type *v15;
  int PrimitiveSizeInBits;
  llvm::Value **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _BYTE *v24;
  int v25;
  int v26;
  int v27;
  unint64_t v28;
  int8x8_t *v29;
  int8x8_t v30;
  uint8x8_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  const void *v39;
  uint8x8_t v40;
  int v41;
  char v42;
  _QWORD *v43;
  char *v44;
  uint64_t *v45;
  uint64_t *v46;
  unsigned __int8 *v47;
  llvm::ConstantInt *v48;
  uint64_t *v49;
  llvm::Value **v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 **v56;
  unsigned __int8 *v57;
  int v58;
  int v59;
  int v60;
  unint64_t v61;
  int8x8_t *v62;
  int8x8_t v63;
  uint8x8_t v64;
  int v65;
  const void **v66;
  uint64_t v67;
  BOOL v68;
  llvm::Value *v69;
  int v70;
  unsigned __int8 *v71;
  char *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  llvm::ValueAsMetadata *v76;
  llvm::Value *v77;
  int v78;
  int64_t v79;
  unint64_t v81;
  int v82;
  int v83;
  llvm::Value *v84;
  uint64_t v85;
  llvm::Value **v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  llvm::Value **v91;
  llvm::Value *v92;
  int v93;
  int v94;
  llvm::Value *v95;
  char *v96;
  uint64_t *v97;
  uint64_t *v98;
  BOOL v99;
  int v100;
  llvm::Value **v101;
  uint64_t *v102;
  llvm::ConstantInt *v103;
  uint64_t *v104;
  llvm::Value *v105;
  uint64_t v106;
  llvm::ValueAsMetadata *v107;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  llvm::ConstantInt *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  char *v117;
  uint64_t *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  int8x8_t *v126;
  uint64_t v127;
  size_t v128;
  uint64_t v129;
  char *v130;
  uint8x8_t v131;
  __int32 v132;
  int v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  unint64_t v137;
  int8x8_t v138;
  uint8x8_t v139;
  uint64_t *v140;
  const llvm::APInt *v141;
  _QWORD *v142;
  uint64_t v143;
  llvm::Value **v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  llvm::ConstantInt *v148;
  unsigned int v149;
  int v150;
  llvm::ValueHandleBase *v151;
  const llvm::APInt *v152;
  llvm::Value *v153;
  uint64_t *v154;
  llvm::ConstantInt *v155;
  unsigned int v156;
  char v157;
  llvm::ValueHandleBase *v158;
  char v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  llvm::ConstantInt **v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  llvm::Value **v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  int8x8_t *v179;
  unsigned int v180;
  int8x8_t *v181;
  unsigned int v182;
  void *__s2;
  unsigned int v184;
  void *v185;
  unsigned int v186;
  uint64_t v187;
  llvm::ConstantInt **v188;
  int8x8_t *v189;
  unsigned int v190;
  void *__src;
  unsigned int v192;
  void *__s1;
  unsigned int v194;
  llvm::APInt *v195;
  unint64_t v196;
  uint64_t *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  char v201;

  v7 = *(unsigned __int8 **)(a2 - 32);
  v195 = 0;
  v196 = (unint64_t)&v195;
  v197 = 0;
  if (!sub_1C4D89F84((uint64_t)&v196, v7))
    goto LABEL_111;
  v8 = *(_WORD *)(a2 + 18);
  if ((v8 & 0x3F) != 0x26)
  {
    if ((v8 & 0x3F) == 0x28)
    {
      v3 = v195;
      v9 = *((_DWORD *)v195 + 2);
      if (v9 <= 0x40)
      {
        v10 = *(int8x8_t *)v195;
        if (!*(_QWORD *)v195)
          goto LABEL_19;
LABEL_14:
        v11 = (uint8x8_t)vcnt_s8(v10);
        v11.i16[0] = vaddlv_u8(v11);
        if (v11.u32[0] != 1)
          goto LABEL_111;
        goto LABEL_32;
      }
      v12 = llvm::APInt::countLeadingZerosSlowCase(v195);
      goto LABEL_18;
    }
    v3 = v195;
    v9 = *((_DWORD *)v195 + 2);
    if (v9 > 0x40)
      goto LABEL_28;
    v10 = *(int8x8_t *)v195;
LABEL_13:
    if (!*(_QWORD *)&v10)
      goto LABEL_32;
    goto LABEL_14;
  }
  v3 = v195;
  v9 = *((_DWORD *)v195 + 2);
  if (!v9)
    goto LABEL_19;
  if (v9 <= 0x40)
  {
    v10 = *(int8x8_t *)v195;
    if (*(_QWORD *)v195 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v9)
    {
LABEL_19:
      v13 = *(_BYTE **)(a2 - 64);
      v14 = *(llvm::ConstantInt **)v13;
      v15 = *(llvm::Type **)v13;
      if ((*(_DWORD *)(*(_QWORD *)v13 + 8) & 0xFE) == 0x12)
        v15 = (llvm::Type *)**((_QWORD **)v14 + 2);
      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v15);
      v17 = llvm::ConstantInt::get(v14, (PrimitiveSizeInBits - 1), 0);
      v18 = a1[3];
      if ((v13[23] & 0x10) == 0)
      {
        v45 = 0;
        v44 = &byte_1C871356D;
LABEL_44:
        LOWORD(v200) = 773;
        v196 = (unint64_t)v44;
        v197 = v45;
        v198 = ".lobit";
        v47 = (unsigned __int8 *)sub_1C506ED1C(v18, (uint64_t)v13, (uint64_t)v17, (uint64_t)&v196, 0);
        v48 = *(llvm::ConstantInt **)a3;
        if (*(_QWORD *)v47 != *(_QWORD *)a3)
        {
          v49 = (uint64_t *)a1[3];
          LOWORD(v200) = 257;
          v47 = sub_1C4D8D514(v49, v47, (uint64_t)v48, 0, (uint64_t)&v196);
        }
        if ((*(_WORD *)(a2 + 18) & 0x3F) != 0x26)
          goto LABEL_72;
        v50 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v47, 1, 0);
        v51 = (uint64_t *)a1[3];
        if ((v47[23] & 0x10) == 0)
        {
          v73 = 0;
          v72 = &byte_1C871356D;
          goto LABEL_71;
        }
        v52 = ***(_QWORD ***)v47;
        v53 = *(_QWORD *)(v52 + 152);
        v54 = *(unsigned int *)(v52 + 168);
        if ((_DWORD)v54)
        {
          LODWORD(v55) = (v54 - 1) & ((v47 >> 4) ^ (v47 >> 9));
          v56 = (unsigned __int8 **)(v53 + 16 * v55);
          v57 = *v56;
          if (*v56 == v47)
          {
LABEL_70:
            v71 = v56[1];
            v74 = *(uint64_t **)v71;
            v72 = (char *)(v71 + 16);
            v73 = v74;
LABEL_71:
            LOWORD(v200) = 773;
            v196 = (unint64_t)v72;
            v197 = v73;
            v198 = ".not";
            v47 = sub_1C506EC1C(v51, v47, (uint64_t)v50, (uint64_t)&v196);
LABEL_72:
            v75 = (uint64_t)a1;
            v76 = (llvm::ValueAsMetadata *)a3;
            v77 = (llvm::Value *)v47;
            return sub_1C577F888(v75, v76, v77);
          }
          v58 = 1;
          while (v57 != (unsigned __int8 *)-4096)
          {
            v59 = v55 + v58++;
            v55 = v59 & (v54 - 1);
            v57 = *(unsigned __int8 **)(v53 + 16 * v55);
            if (v57 == v47)
            {
              v56 = (unsigned __int8 **)(v53 + 16 * v55);
              goto LABEL_70;
            }
          }
        }
        v56 = (unsigned __int8 **)(v53 + 16 * v54);
        goto LABEL_70;
      }
      v19 = ***(_QWORD ***)v13;
      v20 = *(_QWORD *)(v19 + 152);
      v21 = *(unsigned int *)(v19 + 168);
      if ((_DWORD)v21)
      {
        LODWORD(v22) = (v21 - 1) & ((v13 >> 4) ^ (v13 >> 9));
        v23 = (_QWORD *)(v20 + 16 * v22);
        v24 = (_BYTE *)*v23;
        if ((_BYTE *)*v23 == v13)
        {
LABEL_43:
          v43 = (_QWORD *)v23[1];
          v46 = (uint64_t *)*v43;
          v44 = (char *)(v43 + 2);
          v45 = v46;
          goto LABEL_44;
        }
        v25 = 1;
        while (v24 != (_BYTE *)-4096)
        {
          v26 = v22 + v25++;
          v22 = v26 & (v21 - 1);
          v24 = *(_BYTE **)(v20 + 16 * v22);
          if (v24 == v13)
          {
            v23 = (_QWORD *)(v20 + 16 * v22);
            goto LABEL_43;
          }
        }
      }
      v23 = (_QWORD *)(v20 + 16 * v21);
      goto LABEL_43;
    }
    goto LABEL_13;
  }
  v12 = llvm::APInt::countTrailingOnesSlowCase(v195);
LABEL_18:
  if (v12 == v9)
    goto LABEL_19;
LABEL_28:
  if (llvm::APInt::countLeadingZerosSlowCase(v3) != v9)
  {
    v27 = 0;
    v28 = ((unint64_t)v9 + 63) >> 6;
    v29 = *(int8x8_t **)v3;
    do
    {
      v30 = *v29++;
      v31 = (uint8x8_t)vcnt_s8(v30);
      v31.i16[0] = vaddlv_u8(v31);
      v27 += v31.i32[0];
      --v28;
    }
    while (v28);
    if (v27 != 1)
      goto LABEL_111;
  }
LABEL_32:
  if ((v8 & 0x3E) != 0x20)
    goto LABEL_111;
  v32 = *(_QWORD *)(a2 - 64);
  v33 = (uint64_t *)a1[7];
  v34 = a1[9];
  v35 = (char *)a3;
  if (!*(_QWORD *)(a3 + 40))
  {
    if (!v32 || *(unsigned __int8 *)(v32 + 16) < 0x1Cu || (v35 = *(char **)(a2 - 64), !*(_QWORD *)(v32 + 40)))
      v35 = 0;
  }
  v196 = a1[10];
  v197 = v33;
  v198 = v35;
  v199 = v34;
  v200 = 0;
  v201 = 1;
  sub_1C4F83784(v32, 0, (uint64_t *)&v196, &__src);
  LODWORD(v36) = v192;
  v190 = v192;
  if (v192 <= 0x40)
  {
    v37 = ~(unint64_t)__src;
    v38 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v192;
    if (!v192)
      v38 = 0;
    v39 = (const void *)(v38 & v37);
    v189 = (int8x8_t *)(v38 & v37);
    v190 = 0;
    goto LABEL_39;
  }
  v3 = (llvm::APInt *)((((unint64_t)v192 + 63) >> 3) & 0x3FFFFFF8);
  v189 = (int8x8_t *)operator new[]();
  memcpy(v189, __src, (size_t)v3);
  llvm::APInt::flipAllBitsSlowCase((uint64_t)&v189);
  v39 = v189;
  v36 = v190;
  v190 = 0;
  if (v36 <= 0x40)
  {
LABEL_39:
    v40 = (uint8x8_t)vcnt_s8((int8x8_t)v39);
    v40.i16[0] = vaddlv_u8(v40);
    if (v40.u32[0] != 1)
    {
      v42 = 0;
      goto LABEL_108;
    }
    v41 = 1;
LABEL_57:
    v65 = *(_WORD *)(a2 + 18) & 0x3F;
    v66 = (const void **)v195;
    v67 = *((unsigned int *)v195 + 2);
    if (v67 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v195) != (_DWORD)v67
        && memcmp(*v66, v39, ((unint64_t)(v67 + 63) >> 3) & 0x3FFFFFF8))
      {
LABEL_66:
        v69 = (llvm::Value *)llvm::ConstantInt::get(*(llvm::ConstantInt **)a3, v65 == 33, 0);
        goto LABEL_102;
      }
    }
    else
    {
      if (*(_QWORD *)v195)
        v68 = *(_QWORD *)v195 == (_QWORD)v39;
      else
        v68 = 1;
      if (!v68)
        goto LABEL_66;
    }
    if (v41)
    {
      v70 = v36 + __clz((unint64_t)v39) - 64;
    }
    else
    {
      v78 = 0;
      v79 = ((unint64_t)v36 + 63) >> 6;
      do
      {
        if (v79-- < 1)
          break;
        v81 = *((_QWORD *)v39 + v79);
        v78 += __clz(v81);
      }
      while (!v81);
      v82 = v36 | 0xFFFFFFC0;
      if ((v36 & 0x3F) == 0)
        v82 = 0;
      v70 = v78 + v82;
    }
    v83 = ~v70;
    v84 = *(llvm::Value **)(a2 - 64);
    if (!((_DWORD)v36 + v83))
    {
LABEL_92:
      if (v67 > 0x40)
        v99 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v66) == (_DWORD)v67;
      else
        v99 = *v66 == 0;
      v100 = v99;
      if ((v65 == 33) != v100)
      {
        v101 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v84, 1, 0);
        v102 = (uint64_t *)a1[3];
        LOWORD(v200) = 257;
        v84 = (llvm::Value *)sub_1C506EC1C(v102, v84, (uint64_t)v101, (uint64_t)&v196);
      }
      v103 = *(llvm::ConstantInt **)a3;
      if (*(_QWORD *)a3 == *(_QWORD *)v84)
      {
        v106 = (uint64_t)a1;
        v107 = (llvm::ValueAsMetadata *)a3;
        v105 = v84;
        goto LABEL_104;
      }
      v104 = (uint64_t *)a1[3];
      LOWORD(v200) = 257;
      v69 = (llvm::Value *)sub_1C4D8D514(v104, (unsigned __int8 *)v84, (uint64_t)v103, 0, (uint64_t)&v196);
LABEL_102:
      v105 = v69;
      v106 = (uint64_t)a1;
      v107 = (llvm::ValueAsMetadata *)a3;
LABEL_104:
      v3 = (llvm::APInt *)sub_1C577F888(v106, v107, v105);
      v42 = 1;
      goto LABEL_105;
    }
    v85 = a1[3];
    v86 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v84, (v36 + v83), 0);
    if ((*((_BYTE *)v84 + 23) & 0x10) == 0)
    {
      v97 = 0;
      v96 = &byte_1C871356D;
      goto LABEL_91;
    }
    v87 = ***(_QWORD ***)v84;
    v88 = *(_QWORD *)(v87 + 152);
    v89 = *(unsigned int *)(v87 + 168);
    if ((_DWORD)v89)
    {
      LODWORD(v90) = (v89 - 1) & ((v84 >> 4) ^ (v84 >> 9));
      v91 = (llvm::Value **)(v88 + 16 * v90);
      v92 = *v91;
      if (*v91 == v84)
      {
LABEL_90:
        v95 = v91[1];
        v98 = *(uint64_t **)v95;
        v96 = (char *)v95 + 16;
        v97 = v98;
LABEL_91:
        LOWORD(v200) = 773;
        v196 = (unint64_t)v96;
        v197 = v97;
        v198 = ".lobit";
        v84 = (llvm::Value *)sub_1C506ED1C(v85, (uint64_t)v84, (uint64_t)v86, (uint64_t)&v196, 0);
        v66 = (const void **)v195;
        LODWORD(v67) = *((_DWORD *)v195 + 2);
        goto LABEL_92;
      }
      v93 = 1;
      while (v92 != (llvm::Value *)-4096)
      {
        v94 = v90 + v93++;
        v90 = v94 & (v89 - 1);
        v92 = *(llvm::Value **)(v88 + 16 * v90);
        if (v92 == v84)
        {
          v91 = (llvm::Value **)(v88 + 16 * v90);
          goto LABEL_90;
        }
      }
    }
    v91 = (llvm::Value **)(v88 + 16 * v89);
    goto LABEL_90;
  }
  v60 = 0;
  v61 = (unint64_t)(v36 + 63) >> 6;
  v62 = v189;
  do
  {
    v63 = *v62++;
    v64 = (uint8x8_t)vcnt_s8(v63);
    v64.i16[0] = vaddlv_u8(v64);
    v60 += v64.i32[0];
    --v61;
  }
  while (v61);
  v41 = 0;
  v42 = 0;
  if (v60 == 1)
    goto LABEL_57;
LABEL_105:
  if (v36 >= 0x41 && v39)
    MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
LABEL_108:
  if (v194 >= 0x41 && __s1)
    MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
  if (v192 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  if ((v42 & 1) != 0)
    return (llvm::UndefValue **)v3;
LABEL_111:
  if ((*(_WORD *)(a2 + 18) & 0x3E) != 0x20 || *(_QWORD *)a3 != **(_QWORD **)(a2 - 64))
    return 0;
  v187 = 0;
  v188 = 0;
  v109 = *(_QWORD *)(a2 + 8);
  if (!v109)
    goto LABEL_120;
  if (*(_QWORD *)(v109 + 8))
    goto LABEL_120;
  if (!sub_1C4D8AC3C((uint64_t)&__src, *(llvm::Constant **)(a2 - 32)))
    goto LABEL_120;
  v110 = *(_QWORD *)(a2 - 64);
  v197 = &v187;
  v198 = (char *)&v188;
  v111 = *(_QWORD *)(v110 + 8);
  if (!v111 || *(_QWORD *)(v111 + 8))
    goto LABEL_120;
  v133 = *(unsigned __int8 *)(v110 + 16);
  if (v133 == 5)
  {
    if (*(_WORD *)(v110 + 18) != 28)
      goto LABEL_120;
    v160 = *(_QWORD *)(v110 - 32 * (*(_DWORD *)(v110 + 20) & 0x7FFFFFF));
    v161 = *(unsigned __int8 *)(v160 + 16);
    if (v161 == 5)
    {
      if (*(_WORD *)(v160 + 18) != 25)
        goto LABEL_226;
      if (!sub_1C4D89E3C((uint64_t)&v196, *(llvm::Constant **)(v160 - 32 * (*(_DWORD *)(v160 + 20) & 0x7FFFFFF))))goto LABEL_226;
      v162 = *(_QWORD *)(v160 - 32 * (*(_DWORD *)(v160 + 20) & 0x7FFFFFF) + 32);
      if (!v162)
        goto LABEL_226;
    }
    else
    {
      if (v161 != 53)
        goto LABEL_226;
      if (!sub_1C4D89CC8((uint64_t)&v196, *(llvm::Constant **)(v160 - 64)))
        goto LABEL_226;
      v162 = *(_QWORD *)(v160 - 32);
      if (!v162)
        goto LABEL_226;
    }
    *v197 = v162;
    v163 = *(_QWORD *)(v110 - 32 * (*(_DWORD *)(v110 + 20) & 0x7FFFFFF) + 32);
    if (v163)
      goto LABEL_235;
LABEL_226:
    v167 = *(_QWORD *)(v110 - 32 * (*(_DWORD *)(v110 + 20) & 0x7FFFFFF) + 32);
    v168 = *(unsigned __int8 *)(v167 + 16);
    if (v168 == 5)
    {
      if (*(_WORD *)(v167 + 18) != 25)
        goto LABEL_120;
      if (!sub_1C4D89E3C((uint64_t)&v196, *(llvm::Constant **)(v167 - 32 * (*(_DWORD *)(v167 + 20) & 0x7FFFFFF))))goto LABEL_120;
      v169 = *(_QWORD *)(v167 - 32 * (*(_DWORD *)(v167 + 20) & 0x7FFFFFF) + 32);
      if (!v169)
        goto LABEL_120;
    }
    else
    {
      if (v168 != 53)
        goto LABEL_120;
      if (!sub_1C4D89CC8((uint64_t)&v196, *(llvm::Constant **)(v167 - 64)))
        goto LABEL_120;
      v169 = *(_QWORD *)(v167 - 32);
      if (!v169)
        goto LABEL_120;
    }
    *v197 = v169;
    v163 = *(_QWORD *)(v110 - 32 * (*(_DWORD *)(v110 + 20) & 0x7FFFFFF));
    if (!v163)
      goto LABEL_120;
LABEL_235:
    *(_QWORD *)v198 = v163;
    v170 = v188;
    if ((*(_WORD *)(a2 + 18) & 0x3F) == 0x20)
    {
      v171 = a1[3];
      LOWORD(v200) = 257;
      v170 = (llvm::ConstantInt **)sub_1C506EAA0(v171, (uint64_t)v188, (uint64_t)&v196);
      v188 = v170;
    }
    v172 = a1[3];
    LOWORD(v200) = 257;
    v173 = (_QWORD *)sub_1C506ED1C(v172, (uint64_t)v170, v187, (uint64_t)&v196, 0);
    v174 = a1[3];
    v175 = llvm::ConstantInt::get(*v188, 1, 0);
    LOWORD(v200) = 257;
    v77 = (llvm::Value *)sub_1C4D89BCC(v174, v173, (uint64_t)v175, (uint64_t)&v196);
    v75 = (uint64_t)a1;
    v76 = (llvm::ValueAsMetadata *)a3;
    return sub_1C577F888(v75, v76, v77);
  }
  if (v133 != 56)
    goto LABEL_120;
  v134 = *(_QWORD *)(v110 - 64);
  v135 = *(unsigned __int8 *)(v134 + 16);
  if (v135 == 5)
  {
    if (*(_WORD *)(v134 + 18) != 25)
      goto LABEL_212;
    if (!sub_1C4D89E3C((uint64_t)&v196, *(llvm::Constant **)(v134 - 32 * (*(_DWORD *)(v134 + 20) & 0x7FFFFFF))))goto LABEL_212;
    v136 = *(_QWORD *)(v134 - 32 * (*(_DWORD *)(v134 + 20) & 0x7FFFFFF) + 32);
    if (!v136)
      goto LABEL_212;
LABEL_211:
    *v197 = v136;
    v163 = *(_QWORD *)(v110 - 32);
    if (v163)
      goto LABEL_235;
    goto LABEL_212;
  }
  if (v135 == 53)
  {
    if (sub_1C4D89CC8((uint64_t)&v196, *(llvm::Constant **)(v134 - 64)))
    {
      v136 = *(_QWORD *)(v134 - 32);
      if (v136)
        goto LABEL_211;
    }
  }
LABEL_212:
  v164 = *(_QWORD *)(v110 - 32);
  v165 = *(unsigned __int8 *)(v164 + 16);
  if (v165 != 5)
  {
    if (v165 != 53)
      goto LABEL_120;
    if (!sub_1C4D89CC8((uint64_t)&v196, *(llvm::Constant **)(v164 - 64)))
      goto LABEL_120;
    v166 = *(_QWORD *)(v164 - 32);
    if (!v166)
      goto LABEL_120;
    goto LABEL_220;
  }
  if (*(_WORD *)(v164 + 18) == 25)
  {
    if (sub_1C4D89E3C((uint64_t)&v196, *(llvm::Constant **)(v164 - 32 * (*(_DWORD *)(v164 + 20) & 0x7FFFFFF))))
    {
      v166 = *(_QWORD *)(v164 - 32 * (*(_DWORD *)(v164 + 20) & 0x7FFFFFF) + 32);
      if (v166)
      {
LABEL_220:
        *v197 = v166;
        v163 = *(_QWORD *)(v110 - 64);
        if (!v163)
          goto LABEL_120;
        goto LABEL_235;
      }
    }
  }
LABEL_120:
  v112 = *(llvm::ConstantInt **)a3;
  if (!*(_QWORD *)a3 || *((_BYTE *)v112 + 8) != 13)
    return 0;
  v113 = *(_QWORD *)(a2 - 64);
  v114 = *(_QWORD *)(a2 - 32);
  v115 = (uint64_t *)a1[7];
  v116 = a1[9];
  v117 = (char *)a3;
  if (!*(_QWORD *)(a3 + 40))
  {
    if (!v113 || *(unsigned __int8 *)(v113 + 16) < 0x1Cu || (v117 = *(char **)(a2 - 64), !*(_QWORD *)(v113 + 40)))
      v117 = 0;
  }
  v196 = a1[10];
  v197 = v115;
  v198 = v117;
  v199 = v116;
  v200 = 0;
  v201 = 1;
  sub_1C4F83784(v113, 0, (uint64_t *)&v196, &__src);
  v118 = (uint64_t *)a1[7];
  v119 = a1[9];
  v120 = (char *)a3;
  if (!*(_QWORD *)(a3 + 40))
  {
    if (!v114 || *(unsigned __int8 *)(v114 + 16) < 0x1Cu || (v120 = (char *)v114, !*(_QWORD *)(v114 + 40)))
      v120 = 0;
  }
  v196 = a1[10];
  v197 = v118;
  v198 = v120;
  v199 = v119;
  v200 = 0;
  v201 = 1;
  sub_1C4F83784(v114, 0, (uint64_t *)&v196, &__s2);
  v121 = v192;
  if (v192 > 0x40)
  {
    v122 = (unint64_t)__src;
    if (memcmp(__src, __s2, (((unint64_t)v192 + 63) >> 3) & 0x3FFFFFF8))
      goto LABEL_181;
  }
  else
  {
    v122 = (unint64_t)__src;
    if (__src != __s2)
      goto LABEL_181;
  }
  if (v194 > 0x40)
  {
    v123 = (unint64_t)__s1;
    if (!memcmp(__s1, v185, (((unint64_t)v194 + 63) >> 3) & 0x3FFFFFF8))
      goto LABEL_132;
LABEL_181:
    v159 = 1;
    goto LABEL_182;
  }
  v123 = (unint64_t)__s1;
  if (__s1 != v185)
    goto LABEL_181;
LABEL_132:
  if (v121 < 0x41)
  {
    v124 = v123 | v122;
    if ((_DWORD)v121)
      v125 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v121;
    else
      v125 = 0;
    v126 = (int8x8_t *)(v125 & ~v124);
    v179 = v126;
    v182 = v121;
    v181 = v126;
    v180 = 0;
    LODWORD(v127) = v121;
    goto LABEL_139;
  }
  v128 = ((unint64_t)(v121 + 63) >> 3) & 0x3FFFFFF8;
  v124 = operator new[]();
  memcpy((void *)v124, __src, v128);
  v129 = 0;
  v130 = (char *)__s1;
  do
  {
    *(_QWORD *)(v124 + v129) |= *(_QWORD *)&v130[v129];
    v129 += 8;
  }
  while (v128 != v129);
  v180 = v121;
  v179 = (int8x8_t *)operator new[]();
  memcpy(v179, (const void *)v124, v128);
  llvm::APInt::flipAllBitsSlowCase((uint64_t)&v179);
  v127 = v180;
  v126 = v179;
  v182 = v127;
  v181 = v179;
  v180 = 0;
  if (v127 <= 0x40)
  {
LABEL_139:
    v131 = (uint8x8_t)vcnt_s8((int8x8_t)v126);
    v131.i16[0] = vaddlv_u8(v131);
    v132 = v131.i32[0];
    goto LABEL_149;
  }
  v132 = 0;
  v137 = (unint64_t)(v127 + 63) >> 6;
  do
  {
    v138 = *v126++;
    v139 = (uint8x8_t)vcnt_s8(v138);
    v139.i16[0] = vaddlv_u8(v139);
    v132 += v139.i32[0];
    --v137;
  }
  while (v137);
LABEL_149:
  if (v132 != 1)
    goto LABEL_173;
  v140 = (uint64_t *)a1[3];
  LOWORD(v200) = 257;
  v142 = sub_1C506EC1C(v140, (_QWORD *)v113, v114, (uint64_t)&v196);
  if (v194 > 0x40)
  {
    v176 = (((unint64_t)v194 + 63) >> 3) & 0x3FFFFFF8;
    while (v176)
    {
      v177 = *(_QWORD *)((char *)__s1 + v176 - 8);
      v178 = *(unint64_t *)((char *)&v181[-1] + v176);
      v176 -= 8;
      if (v177 != v178)
      {
        if (v177 <= v178)
          goto LABEL_153;
        goto LABEL_152;
      }
    }
    goto LABEL_152;
  }
  if (__s1 >= v181)
  {
LABEL_152:
    v143 = a1[3];
    v144 = llvm::ConstantInt::get((llvm::ConstantInt **)v112, (llvm::Type *)&v181, v141);
    LOWORD(v200) = 257;
    v142 = (_QWORD *)sub_1C4D89BCC(v143, v142, (uint64_t)v144, (uint64_t)&v196);
  }
LABEL_153:
  v145 = a1[3];
  if (v182 > 0x40)
  {
    v147 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v181);
  }
  else
  {
    v146 = __clz(__rbit64((unint64_t)v181));
    if (v182 >= v146)
      v147 = v146;
    else
      v147 = v182;
  }
  v148 = *(llvm::ConstantInt **)v112;
  v149 = *((_DWORD *)v112 + 2);
  LODWORD(v197) = v149 >> 8;
  if (v149 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v196, v147, 0);
  }
  else
  {
    if (v149 <= 0xFF)
      v150 = 0;
    else
      v150 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v149);
    v196 = v150 & v147;
  }
  v151 = llvm::ConstantInt::get(v148, (llvm::LLVMContext *)&v196, v141);
  if (v197 >= 0x41 && v196)
    MEMORY[0x1CAA32F9C](v196, 0x1000C8000313F17);
  LOWORD(v200) = 257;
  v153 = (llvm::Value *)sub_1C506ED1C(v145, (uint64_t)v142, (uint64_t)v151, (uint64_t)&v196, 0);
  if ((*(_WORD *)(a2 + 18) & 0x3F) == 0x20)
  {
    v154 = (uint64_t *)a1[3];
    v155 = *(llvm::ConstantInt **)v112;
    v156 = *((_DWORD *)v112 + 2);
    LODWORD(v197) = v156 >> 8;
    if (v156 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v196, 1, 0);
    }
    else
    {
      if (v156 <= 0xFF)
        v157 = 0;
      else
        v157 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v156);
      v196 = v157 & 1;
    }
    v158 = llvm::ConstantInt::get(v155, (llvm::LLVMContext *)&v196, v152);
    if (v197 >= 0x41 && v196)
      MEMORY[0x1CAA32F9C](v196, 0x1000C8000313F17);
    LOWORD(v200) = 257;
    v153 = (llvm::Value *)sub_1C506EC1C(v154, v153, (uint64_t)v158, (uint64_t)&v196);
  }
  llvm::Value::takeName(v153, (llvm::Value *)a2);
  v3 = (llvm::APInt *)sub_1C577F888((uint64_t)a1, (llvm::ValueAsMetadata *)a3, v153);
  LODWORD(v127) = v182;
LABEL_173:
  if (v127 >= 0x41 && v181)
    MEMORY[0x1CAA32F9C](v181, 0x1000C8000313F17);
  if (v121 >= 0x41 && v124)
    MEMORY[0x1CAA32F9C](v124, 0x1000C8000313F17);
  if (v132 != 1)
    goto LABEL_181;
  v159 = 0;
LABEL_182:
  if (v186 >= 0x41 && v185)
    MEMORY[0x1CAA32F9C](v185, 0x1000C8000313F17);
  if (v184 >= 0x41 && __s2)
    MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
  if (v194 >= 0x41 && __s1)
    MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
  if (v192 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  if ((v159 & 1) != 0)
    return 0;
  return (llvm::UndefValue **)v3;
}

llvm::UndefValue **sub_1C57E1E70(uint64_t a1, llvm::Instruction *this)
{
  uint64_t v4;
  uint64_t ***v5;
  llvm *v6;
  llvm::Type *v7;
  uint64_t v8;
  const char *v9;
  unsigned int PrimitiveSizeInBits;
  const char *v11;
  unsigned int v12;
  llvm::DominatorTree *v13;
  llvm::UndefValue *v14;
  _QWORD **v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  _BOOL4 IsZero;
  uint64_t v23;
  llvm::ValueAsMetadata *v24;
  llvm::Value *VScale;
  int v27;
  uint64_t v28;
  llvm::Type *v29;
  unsigned int v30;
  llvm::Type *v31;
  unsigned int v32;
  uint64_t v33;
  llvm::Type *v34;
  unsigned int v35;
  unsigned int v36;
  const llvm::APInt *v37;
  llvm::Value **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  llvm **v44;
  llvm *v45;
  int v46;
  int v47;
  const llvm::APInt *v48;
  llvm::Value **v49;
  char *v50;
  llvm::Value **v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  llvm::Value *v55;
  _QWORD *v56;
  llvm::Value *v57;
  llvm::ConstantInt **v58;
  const llvm::APInt *v59;
  _QWORD *v60;
  char *v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  unsigned __int8 *v71;
  const llvm::APInt *v72;
  llvm::Value **v73;
  char *v74;
  llvm::Value **v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  llvm::Value *v79;
  _QWORD *v80;
  llvm::Value *v81;
  _QWORD **v82;
  _QWORD **v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD **v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  __int128 v98;
  llvm::Type *v99;
  uint64_t *v100;
  llvm::Value **v101;
  llvm *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  llvm::UndefValue *v113;
  uint64_t v114;
  _QWORD *v115;
  char *v116;
  _QWORD *v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  BOOL v124;
  uint64_t v125;
  unsigned int v126;
  __int16 v127;
  llvm::Constant **v128;
  uint64_t v129;
  __int128 v130;
  const char *v131;
  __int16 v132;
  unsigned int v133;

  v4 = *((_QWORD *)this + 1);
  if (v4 && !*(_QWORD *)(v4 + 8) && *(_BYTE *)(*(_QWORD *)(v4 + 24) + 16) == 66)
    return 0;
  v5 = (uint64_t ***)sub_1C57DD374(a1, this);
  if (v5)
    return (llvm::UndefValue **)v5;
  v6 = (llvm *)*((_QWORD *)this - 4);
  v7 = *(llvm::Type **)v6;
  v8 = *(_QWORD *)this;
  v133 = 0;
  if (*((_BYTE *)v7 + 8) == 13 && *(_BYTE *)(v8 + 8) == 13)
  {
    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v7);
    if ((_DWORD)v9 == 1)
    v12 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v8);
    if ((_DWORD)v11 == 1)
    if (sub_1C577D3C0(a1, PrimitiveSizeInBits, v12)
      && sub_1C57E29BC((uint64_t)v6, v8, &v133, (const llvm::DataLayout **)a1, this))
    {
      v14 = sub_1C57DCDFC(a1, (uint64_t)v6, (llvm::Type ***)v8, 0);
      if (*((unsigned __int8 *)v6 + 16) >= 0x1Cu)
      {
        v15 = (_QWORD **)*((_QWORD *)v6 + 1);
        if (v15)
        {
          if (!v15[1])
            llvm::replaceAllDbgUsesWith(v6, v14, this, *(llvm::Instruction **)(a1 + 72), v13);
        }
      }
      if ((*((_DWORD *)v7 + 2) & 0xFE) == 0x12)
        v7 = (llvm::Type *)**((_QWORD **)v7 + 2);
      v16 = llvm::Type::getPrimitiveSizeInBits(v7);
      v17 = v16 - v133;
      if ((*(_DWORD *)(v8 + 8) & 0xFE) == 0x12)
        v8 = **(_QWORD **)(v8 + 16);
      v18 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v8);
      v19 = v18;
      v20 = v17 - v18;
      DWORD2(v130) = v18;
      if (v18 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v130, 0, 0);
        v21 = DWORD2(v130);
      }
      else
      {
        *(_QWORD *)&v130 = 0;
        v21 = v18;
      }
      sub_1C4912E54(&v130, v20 + v21, v21);
      IsZero = llvm::MaskedValueIsZero(v14, (const llvm::Value *)&v130, *(const llvm::APInt **)(a1 + 80), 0, *(const llvm::DataLayout **)(a1 + 56), this, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1, v124);
      if (DWORD2(v130) >= 0x41 && (_QWORD)v130)
        MEMORY[0x1CAA32F9C](v130, 0x1000C8000313F17);
      if (IsZero)
      {
        v23 = a1;
        v24 = this;
        VScale = v14;
        return sub_1C577F888(v23, v24, VScale);
      }
      v58 = *(llvm::ConstantInt ***)v14;
      DWORD2(v130) = v19;
      if (v19 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v130, 0, 0);
      else
        *(_QWORD *)&v130 = 0;
      sub_1C4912E54(&v130, 0, v17);
      v60 = llvm::ConstantInt::get(v58, (llvm::Type *)&v130, v59);
      if (DWORD2(v130) >= 0x41 && (_QWORD)v130)
        MEMORY[0x1CAA32F9C](v130, 0x1000C8000313F17);
      goto LABEL_63;
    }
  }
  v27 = *((unsigned __int8 *)v6 + 16);
  if (v27 == 81)
    return sub_1C57E0D58((_QWORD *)a1, (uint64_t)v6, (uint64_t)this);
  if (v27 == 66)
  {
    v28 = *((_QWORD *)v6 - 4);
    v29 = *(llvm::Type **)v28;
    if ((*(_DWORD *)(*(_QWORD *)v28 + 8) & 0xFE) == 0x12)
      v29 = (llvm::Type *)**((_QWORD **)v29 + 2);
    v30 = llvm::Type::getPrimitiveSizeInBits(v29);
    v31 = *(llvm::Type **)v6;
    if ((*(_DWORD *)(*(_QWORD *)v6 + 8) & 0xFE) == 0x12)
      v31 = (llvm::Type *)**((_QWORD **)v31 + 2);
    v32 = llvm::Type::getPrimitiveSizeInBits(v31);
    v33 = *(_QWORD *)this;
    v34 = *(llvm::Type **)this;
    if ((*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 0x12)
      v34 = **(llvm::Type ***)(v33 + 16);
    v35 = llvm::Type::getPrimitiveSizeInBits(v34);
    v36 = v35;
    if (v30 < v35)
    {
      v126 = v30;
      if (v30 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v125, 0, 0);
      else
        v125 = 0;
      sub_1C4912E54(&v125, 0, v32);
      v38 = llvm::ConstantInt::get(*(llvm::ConstantInt ***)v28, (llvm::Type *)&v125, v37);
      v39 = *(_QWORD *)(a1 + 24);
      if ((*((_BYTE *)v6 + 23) & 0x10) == 0)
      {
        v104 = 0;
        v103 = &byte_1C871356D;
        goto LABEL_112;
      }
      v40 = ***(_QWORD ***)v6;
      v41 = *(_QWORD *)(v40 + 152);
      v42 = *(unsigned int *)(v40 + 168);
      if ((_DWORD)v42)
      {
        LODWORD(v43) = (v42 - 1) & ((v6 >> 4) ^ (v6 >> 9));
        v44 = (llvm **)(v41 + 16 * v43);
        v45 = *v44;
        if (*v44 == v6)
        {
LABEL_111:
          v102 = v44[1];
          v105 = *(_QWORD *)v102;
          v103 = (char *)v102 + 16;
          v104 = v105;
LABEL_112:
          v132 = 773;
          *(_QWORD *)&v130 = v103;
          *((_QWORD *)&v130 + 1) = v104;
          v131 = ".mask";
          v106 = sub_1C4D89BCC(v39, (_QWORD *)v28, (uint64_t)v38, (uint64_t)&v130);
          v107 = (char *)operator new(0x60uLL);
          v5 = (uint64_t ***)(v107 + 32);
          *((_DWORD *)v107 + 13) = *((_DWORD *)v107 + 13) & 0x38000000 | 1;
          *(_QWORD *)v107 = 0;
          *((_QWORD *)v107 + 1) = 0;
          *((_QWORD *)v107 + 2) = 0;
          *((_QWORD *)v107 + 3) = v107 + 32;
          v108 = *(_QWORD *)this;
          v132 = 257;
          llvm::ZExtInst::ZExtInst((uint64_t)(v107 + 32), v106, v108, (uint64_t)&v130, 0);
          goto LABEL_113;
        }
        v46 = 1;
        while (v45 != (llvm *)-4096)
        {
          v47 = v43 + v46++;
          v43 = v47 & (v42 - 1);
          v45 = *(llvm **)(v41 + 16 * v43);
          if (v45 == v6)
          {
            v44 = (llvm **)(v41 + 16 * v43);
            goto LABEL_111;
          }
        }
      }
      v44 = (llvm **)(v41 + 16 * v42);
      goto LABEL_111;
    }
    if (v30 == v35)
    {
      v126 = v30;
      if (v30 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v125, 0, 0);
      else
        v125 = 0;
      sub_1C4912E54(&v125, 0, v32);
      v49 = llvm::ConstantInt::get(*(llvm::ConstantInt ***)v28, (llvm::Type *)&v125, v48);
      v132 = 257;
      v50 = (char *)operator new(0x80uLL);
      *((_QWORD *)v50 + 5) = 0;
      v51 = (llvm::Value **)(v50 + 40);
      *((_QWORD *)v50 + 6) = 0;
      *((_QWORD *)v50 + 8) = *(_QWORD *)v28;
      v5 = (uint64_t ***)(v50 + 64);
      *((_QWORD *)v50 + 3) = v50 + 64;
      *((_QWORD *)v50 + 7) = v50 + 64;
      *((_QWORD *)v50 + 9) = 0;
      v50[80] = 56;
      v50[81] = 0;
      *((_WORD *)v50 + 41) = 0;
      *((_DWORD *)v50 + 21) = 2;
      *(_OWORD *)(v50 + 88) = 0u;
      *(_OWORD *)(v50 + 104) = 0u;
      *((_DWORD *)v50 + 30) = 0;
      *(_QWORD *)v50 = v28;
      v54 = *(_QWORD *)(v28 + 8);
      v53 = (_QWORD *)(v28 + 8);
      v52 = v54;
      *((_QWORD *)v50 + 1) = v54;
      if (v54)
        *(_QWORD *)(v52 + 16) = v50 + 8;
      *((_QWORD *)v50 + 2) = v53;
      *v53 = v50;
      *((_QWORD *)v50 + 4) = v49;
      if (v49)
      {
        v57 = v49[1];
        v56 = v49 + 1;
        v55 = v57;
        *v51 = v57;
        if (v57)
          *((_QWORD *)v55 + 2) = v51;
        *((_QWORD *)v50 + 6) = v56;
        *v56 = v50 + 32;
      }
LABEL_80:
      llvm::Value::setName(v5, (uint64_t)&v130);
LABEL_113:
      if (v126 >= 0x41 && v125)
        MEMORY[0x1CAA32F9C](v125, 0x1000C8000313F17);
      return (llvm::UndefValue **)v5;
    }
    if (v30 > v35)
    {
      v70 = *(uint64_t **)(a1 + 24);
      v132 = 257;
      v71 = sub_1C4773E38(v70, 38, (unsigned __int8 *)v28, v33, (uint64_t)&v130);
      v126 = v36;
      if (v36 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v125, 0, 0);
      else
        v125 = 0;
      sub_1C4912E54(&v125, 0, v32);
      v73 = llvm::ConstantInt::get(*(llvm::ConstantInt ***)v71, (llvm::Type *)&v125, v72);
      v132 = 257;
      v74 = (char *)operator new(0x80uLL);
      *((_QWORD *)v74 + 5) = 0;
      v75 = (llvm::Value **)(v74 + 40);
      *((_QWORD *)v74 + 6) = 0;
      *((_QWORD *)v74 + 8) = *(_QWORD *)v71;
      v5 = (uint64_t ***)(v74 + 64);
      *((_QWORD *)v74 + 3) = v74 + 64;
      *((_QWORD *)v74 + 7) = v74 + 64;
      *((_QWORD *)v74 + 9) = 0;
      v74[80] = 56;
      v74[81] = 0;
      *((_WORD *)v74 + 41) = 0;
      *((_DWORD *)v74 + 21) = 2;
      *(_OWORD *)(v74 + 88) = 0u;
      *(_OWORD *)(v74 + 104) = 0u;
      *((_DWORD *)v74 + 30) = 0;
      *(_QWORD *)v74 = v71;
      v78 = *((_QWORD *)v71 + 1);
      v77 = v71 + 8;
      v76 = v78;
      *((_QWORD *)v74 + 1) = v78;
      if (v78)
        *(_QWORD *)(v76 + 16) = v74 + 8;
      *((_QWORD *)v74 + 2) = v77;
      *v77 = v74;
      *((_QWORD *)v74 + 4) = v73;
      if (v73)
      {
        v81 = v73[1];
        v80 = v73 + 1;
        v79 = v81;
        *v75 = v81;
        if (v81)
          *((_QWORD *)v79 + 2) = v75;
        *((_QWORD *)v74 + 6) = v80;
        *v80 = v74 + 32;
      }
      goto LABEL_80;
    }
  }
  v128 = 0;
  v129 = 0;
  *(_QWORD *)&v130 = &v128;
  *((_QWORD *)&v130 + 1) = &v129;
  v82 = (_QWORD **)*((_QWORD *)v6 + 1);
  if (v82 && !v82[1])
  {
    if (v27 == 5)
    {
      if (*((_WORD *)v6 + 9) != 28)
        goto LABEL_83;
      if (!sub_1C4B03864((_QWORD **)&v130, *((_QWORD *)v6 - 4 * (*((_DWORD *)v6 + 5) & 0x7FFFFFF))))
        goto LABEL_83;
      v89 = (_QWORD **)((_QWORD *)v6 - 4 * (*((_DWORD *)v6 + 5) & 0x7FFFFFF))[4];
      if (!v89)
        goto LABEL_83;
    }
    else
    {
      if (v27 != 56)
        goto LABEL_83;
      if (!sub_1C4B03864((_QWORD **)&v130, *((_QWORD *)v6 - 8)))
        goto LABEL_83;
      v89 = (_QWORD **)*((_QWORD *)v6 - 4);
      if (!v89 || *((unsigned __int8 *)v89 + 16) > 0x14u)
        goto LABEL_83;
    }
    **((_QWORD **)&v130 + 1) = v89;
    v14 = (llvm::UndefValue *)v128;
    if (*v128 == *(llvm::Constant **)this)
    {
      v60 = sub_1C537D3B8((llvm *)0x27, v129, *v128, 0);
LABEL_63:
      v132 = 257;
      v61 = (char *)operator new(0x80uLL);
      *((_QWORD *)v61 + 5) = 0;
      v62 = v61 + 40;
      *((_QWORD *)v61 + 6) = 0;
      *((_QWORD *)v61 + 8) = *(_QWORD *)v14;
      v5 = (uint64_t ***)(v61 + 64);
      *((_QWORD *)v61 + 3) = v61 + 64;
      *((_QWORD *)v61 + 7) = v61 + 64;
      *((_QWORD *)v61 + 9) = 0;
      v61[80] = 56;
      v61[81] = 0;
      *((_WORD *)v61 + 41) = 0;
      *((_DWORD *)v61 + 21) = 2;
      *(_OWORD *)(v61 + 88) = 0u;
      *(_OWORD *)(v61 + 104) = 0u;
      *((_DWORD *)v61 + 30) = 0;
      *(_QWORD *)v61 = v14;
      v65 = *((_QWORD *)v14 + 1);
      v64 = (_QWORD *)((char *)v14 + 8);
      v63 = v65;
      *((_QWORD *)v61 + 1) = v65;
      if (v65)
        *(_QWORD *)(v63 + 16) = v61 + 8;
      *((_QWORD *)v61 + 2) = v64;
      *v64 = v61;
      *((_QWORD *)v61 + 4) = v60;
      if (v60)
      {
        v68 = v60[1];
        v67 = v60 + 1;
        v66 = v68;
        *v62 = v68;
        if (v68)
          *(_QWORD *)(v66 + 16) = v62;
        *((_QWORD *)v61 + 6) = v67;
        *v67 = v61 + 32;
      }
      v69 = (uint64_t *)&v130;
LABEL_70:
      llvm::Value::setName(v5, (uint64_t)v69);
      return (llvm::UndefValue **)v5;
    }
  }
LABEL_83:
  v83 = (_QWORD **)*((_QWORD *)v6 + 1);
  if (v83 && !v83[1])
  {
    v90 = *((unsigned __int8 *)v6 + 16);
    if (v90 == 5)
    {
      if (*((_WORD *)v6 + 9) != 30)
        goto LABEL_85;
      v109 = (uint64_t *)((char *)v6 - 32 * (*((_DWORD *)v6 + 5) & 0x7FFFFFF));
      v91 = *v109;
      if (!*v109)
        goto LABEL_85;
      v92 = v109[4];
      if (!v92)
        goto LABEL_85;
    }
    else
    {
      if (v90 != 58)
        goto LABEL_85;
      v91 = *((_QWORD *)v6 - 8);
      if (!v91)
        goto LABEL_85;
      v92 = *((_QWORD *)v6 - 4);
      if (!v92 || *(unsigned __int8 *)(v92 + 16) > 0x14u)
        goto LABEL_85;
    }
    v129 = v92;
    *(_QWORD *)&v130 = &v128;
    *((_QWORD *)&v130 + 1) = v92;
    v110 = *(_QWORD *)(v91 + 8);
    if (v110 && !*(_QWORD *)(v110 + 8))
    {
      v111 = *(unsigned __int8 *)(v91 + 16);
      if (v111 == 5)
      {
        if (*(_WORD *)(v91 + 18) != 28
          || !sub_1C4B03864((_QWORD **)&v130, *(_QWORD *)(v91 - 32 * (*(_DWORD *)(v91 + 20) & 0x7FFFFFF))))
        {
          goto LABEL_85;
        }
        v112 = *(_QWORD *)(v91 - 32 * (*(_DWORD *)(v91 + 20) & 0x7FFFFFF) + 32);
      }
      else
      {
        if (v111 != 56 || !sub_1C4B03864((_QWORD **)&v130, *(_QWORD *)(v91 - 64)))
          goto LABEL_85;
        v112 = *(_QWORD *)(v91 - 32);
      }
      if (*((_QWORD *)&v130 + 1) == v112 && *v128 == *(llvm::Constant **)this)
      {
        v113 = sub_1C537D3B8((llvm *)0x27, v129, *v128, 0);
        v114 = *(_QWORD *)(a1 + 24);
        v132 = 257;
        v115 = (_QWORD *)sub_1C4D89BCC(v114, v128, (uint64_t)v113, (uint64_t)&v130);
        v127 = 257;
        v116 = (char *)operator new(0x80uLL);
        *((_QWORD *)v116 + 5) = 0;
        v117 = v116 + 40;
        *((_QWORD *)v116 + 6) = 0;
        *((_QWORD *)v116 + 8) = *v115;
        v5 = (uint64_t ***)(v116 + 64);
        *((_QWORD *)v116 + 3) = v116 + 64;
        *((_QWORD *)v116 + 7) = v116 + 64;
        *((_QWORD *)v116 + 9) = 0;
        v116[80] = 58;
        v116[81] = 0;
        *((_WORD *)v116 + 41) = 0;
        *((_DWORD *)v116 + 21) = 2;
        *(_OWORD *)(v116 + 88) = 0u;
        *(_OWORD *)(v116 + 104) = 0u;
        *((_DWORD *)v116 + 30) = 0;
        *(_QWORD *)v116 = v115;
        v120 = v115[1];
        v119 = v115 + 1;
        v118 = v120;
        *((_QWORD *)v116 + 1) = v120;
        if (v120)
          *(_QWORD *)(v118 + 16) = v116 + 8;
        *((_QWORD *)v116 + 2) = v119;
        *v119 = v116;
        *((_QWORD *)v116 + 4) = v113;
        if (v113)
        {
          v123 = *((_QWORD *)v113 + 1);
          v122 = (_QWORD *)((char *)v113 + 8);
          v121 = v123;
          *v117 = v123;
          if (v123)
            *(_QWORD *)(v121 + 16) = v117;
          *((_QWORD *)v116 + 6) = v122;
          *v122 = v116 + 32;
        }
        v69 = &v125;
        goto LABEL_70;
      }
    }
  }
LABEL_85:
  *(_QWORD *)&v130 = *(_QWORD *)(a1 + 80);
  if (!sub_1C53F7E14((uint64_t *)&v130, (uint64_t)v6))
    return 0;
  v84 = *(_QWORD *)(*((_QWORD *)this + 5) + 56);
  if (!v84)
    return 0;
  v87 = *(_QWORD *)(v84 + 112);
  v85 = (uint64_t *)(v84 + 112);
  v86 = v87;
  if (!v87 || (*(_BYTE *)(v86 + 22) & 1) == 0)
    return 0;
  v5 = 0;
  v96 = *(_QWORD *)(llvm::AttributeList::getAttributeAtIndex(v85, -1, 80) + 16);
  v93 = v96 == 0;
  v94 = (_DWORD)v96 != 0;
  LODWORD(v130) = HIDWORD(v96);
  v95 = v96 & 0xFFFFFF00;
  v96 = v96;
  if (v93)
    v96 = 0;
  *(_QWORD *)((char *)&v130 + 4) = v96 | v95 | (v94 << 32);
  *((_QWORD *)&v98 + 1) = v94;
  *(_QWORD *)&v98 = v130;
  v97 = v98 >> 32;
  if (HIDWORD(v97))
  {
    v99 = *(llvm::Type **)v6;
    if ((*(_DWORD *)(*(_QWORD *)v6 + 8) & 0xFE) == 0x12)
      v99 = (llvm::Type *)**((_QWORD **)v99 + 2);
    if (31 - __clz(v97) < llvm::Type::getPrimitiveSizeInBits(v99))
    {
      v100 = *(uint64_t **)(a1 + 24);
      v101 = llvm::ConstantInt::get((llvm::ConstantInt *)v8, 1, 0);
      v132 = 257;
      VScale = (llvm::Value *)llvm::IRBuilderBase::CreateVScale(v100, (uint64_t)v101, (uint64_t)&v130);
      v23 = a1;
      v24 = this;
      return sub_1C577F888(v23, v24, VScale);
    }
    return 0;
  }
  return (llvm::UndefValue **)v5;
}

uint64_t sub_1C57E29BC(uint64_t a1, uint64_t a2, unsigned int *a3, const llvm::DataLayout **a4, llvm::AssumptionCache *a5)
{
  uint64_t result;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  llvm::Type *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned __int8 *v34;
  int v35;
  _QWORD *v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unsigned __int8 *v42;
  int v43;
  _QWORD *v44;
  _DWORD *v45;
  unsigned int v46;
  llvm::Type *v47;
  unsigned int PrimitiveSizeInBits;
  unsigned int v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  llvm *v53;
  _BOOL4 IsZero;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  int v58;

  *a3 = 0;
  if (sub_1C57E80FC(a1, a2))
    return 1;
  v11 = *(unsigned __int8 *)(a1 + 16);
  if (v11 < 0x1C)
    return 0;
  v12 = *(_QWORD *)(a1 + 8);
  if (!v12 || *(_QWORD *)(v12 + 8))
    return 0;
  v58 = 0;
  if (v11 <= 55)
  {
    if (v11 <= 44)
    {
      if (v11 != 41 && v11 != 43)
        return 0;
    }
    else if (v11 != 45)
    {
      if (v11 == 53)
      {
        v55 = 0;
        v30 = *(_DWORD *)(a1 + 20);
        if ((v30 & 0x40000000) != 0)
          v31 = *(_QWORD *)(a1 - 8);
        else
          v31 = a1 - 32 * (v30 & 0x7FFFFFF);
        v42 = *(unsigned __int8 **)(v31 + 32);
        v56 = &v55;
        v57 = 0;
        result = (uint64_t)sub_1C4D89F84((uint64_t)&v56, v42);
        if (!(_DWORD)result)
          return result;
        v43 = *(_DWORD *)(a1 + 20);
        v44 = (v43 & 0x40000000) != 0 ? *(_QWORD **)(a1 - 8) : (_QWORD *)(a1 - 32 * (v43 & 0x7FFFFFF));
        result = sub_1C57E29BC(*v44, a2, a3, a4, a5);
        if (!(_DWORD)result)
          return result;
        v50 = (unint64_t *)v55;
        if (*(_DWORD *)(v55 + 8) >= 0x41u)
          v50 = *(unint64_t **)v55;
        v51 = *v50;
        v52 = *a3;
        if (v51 >= v52)
          v49 = 0;
        else
          v49 = v52 - v51;
      }
      else
      {
        if (v11 != 54)
          return 0;
        v55 = 0;
        v15 = *(_DWORD *)(a1 + 20);
        if ((v15 & 0x40000000) != 0)
          v16 = *(_QWORD *)(a1 - 8);
        else
          v16 = a1 - 32 * (v15 & 0x7FFFFFF);
        v34 = *(unsigned __int8 **)(v16 + 32);
        v56 = &v55;
        v57 = 0;
        result = (uint64_t)sub_1C4D89F84((uint64_t)&v56, v34);
        if (!(_DWORD)result)
          return result;
        v35 = *(_DWORD *)(a1 + 20);
        v36 = (v35 & 0x40000000) != 0 ? *(_QWORD **)(a1 - 8) : (_QWORD *)(a1 - 32 * (v35 & 0x7FFFFFF));
        result = sub_1C57E29BC(*v36, a2, a3, a4, a5);
        if (!(_DWORD)result)
          return result;
        v45 = (_DWORD *)v55;
        if (*(_DWORD *)(v55 + 8) >= 0x41u)
          v45 = *(_DWORD **)v55;
        v46 = *a3 + *v45;
        *a3 = v46;
        v47 = *(llvm::Type **)a1;
        if ((*(_DWORD *)(*(_QWORD *)a1 + 8) & 0xFE) == 0x12)
          v47 = (llvm::Type *)**((_QWORD **)v47 + 2);
        PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v47);
        if (v46 >= PrimitiveSizeInBits)
          v49 = PrimitiveSizeInBits;
        else
          v49 = v46;
      }
      *a3 = v49;
      return 1;
    }
LABEL_25:
    v17 = *(_DWORD *)(a1 + 20);
    if ((v17 & 0x40000000) != 0)
      v18 = *(_QWORD **)(a1 - 8);
    else
      v18 = (_QWORD *)(a1 - 32 * (v17 & 0x7FFFFFF));
    result = sub_1C57E29BC(*v18, a2, a3, a4, a5);
    if (!(_DWORD)result)
      return result;
    v19 = *(_DWORD *)(a1 + 20);
    v20 = (v19 & 0x40000000) != 0 ? *(_QWORD *)(a1 - 8) : a1 - 32 * (v19 & 0x7FFFFFF);
    result = sub_1C57E29BC(*(_QWORD *)(v20 + 32), a2, &v58, a4, a5);
    if (!(_DWORD)result)
      return result;
    v21 = *a3;
    v22 = *a3 | v58;
    result = v22 == 0;
    if (!v22 || v58)
      return result;
    if (*(unsigned __int8 *)(a1 + 16) - 56 <= 2)
    {
      v23 = *(llvm::Type **)a1;
      if ((*(_DWORD *)(*(_QWORD *)a1 + 8) & 0xFE) == 0x12)
        v23 = (llvm::Type *)**((_QWORD **)v23 + 2);
      v24 = llvm::Type::getPrimitiveSizeInBits(v23);
      v25 = v24;
      v26 = *(_DWORD *)(a1 + 20);
      if ((v26 & 0x40000000) != 0)
        v27 = *(_QWORD *)(a1 - 8);
      else
        v27 = a1 - 32 * (v26 & 0x7FFFFFF);
      v53 = *(llvm **)(v27 + 32);
      LODWORD(v57) = v24;
      if (v24 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v56, 0, 0);
        v25 = v57;
      }
      else
      {
        v56 = 0;
      }
      sub_1C4912E54(&v56, v25 - v21, v25);
      IsZero = llvm::MaskedValueIsZero(v53, (const llvm::Value *)&v56, a4[10], 0, a4[7], a5, a4[9], (const llvm::DominatorTree *)1, v55);
      if (v57 >= 0x41 && v56)
        MEMORY[0x1CAA32F9C](v56, 0x1000C8000313F17);
      if (IsZero)
      {
        if (*(_BYTE *)(a1 + 16) == 56)
          *a3 = 0;
        return 1;
      }
    }
    return 0;
  }
  if (v11 <= 65)
  {
    if ((v11 - 56) >= 3)
      return 0;
    goto LABEL_25;
  }
  if ((v11 - 66) < 3)
    return 1;
  if (v11 != 83)
  {
    if (v11 == 85)
    {
      v13 = *(_DWORD *)(a1 + 20);
      if ((v13 & 0x40000000) != 0)
        v14 = *(_QWORD *)(a1 - 8);
      else
        v14 = a1 - 32 * (v13 & 0x7FFFFFF);
      result = sub_1C57E29BC(*(_QWORD *)(v14 + 32), a2, &v58, a4, a5);
      if ((_DWORD)result)
      {
        v32 = *(_DWORD *)(a1 + 20);
        if ((v32 & 0x40000000) != 0)
          v33 = *(_QWORD *)(a1 - 8);
        else
          v33 = a1 - 32 * (v32 & 0x7FFFFFF);
        result = sub_1C57E29BC(*(_QWORD *)(v33 + 64), a2, a3, a4, a5);
        if ((_DWORD)result)
          return v58 == *a3;
      }
      return result;
    }
    return 0;
  }
  v28 = *(_DWORD *)(a1 + 20);
  if ((v28 & 0x40000000) != 0)
    v29 = *(_QWORD **)(a1 - 8);
  else
    v29 = (_QWORD *)(a1 - 32 * (v28 & 0x7FFFFFF));
  result = sub_1C57E29BC(*v29, a2, a3, a4, a5);
  if (!(_DWORD)result)
    return result;
  v37 = *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
  v38 = v37 - 1;
  if (v37 == 1)
    return 1;
  v39 = 32;
  do
  {
    v40 = *(_DWORD *)(a1 + 20);
    if ((v40 & 0x40000000) != 0)
      v41 = *(_QWORD *)(a1 - 8);
    else
      v41 = a1 - 32 * (v40 & 0x7FFFFFF);
    result = sub_1C57E29BC(*(_QWORD *)(v41 + v39), a2, &v58, a4, a5);
    if (!(_DWORD)result)
      break;
    if (v58 != *a3)
      return 0;
    v39 += 32;
    result = 1;
    --v38;
  }
  while (v38);
  return result;
}

llvm::UndefValue **sub_1C57E2E8C(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  const char *v8;
  int v9;
  llvm::ConstantInt *v10;
  llvm::Type *v11;
  int PrimitiveSizeInBits;
  llvm::Value **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char **v19;
  const char *v20;
  int v21;
  int v22;
  uint64_t v23;
  llvm::APInt *v24;
  llvm::UndefValue **v25;
  const char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 **v38;
  unsigned __int8 *v39;
  int v40;
  int v41;
  unsigned __int8 *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  int8x8_t *v48;
  int8x8_t v49;
  uint8x8_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  llvm::Type *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  const void *v58;
  size_t v59;
  uint8x8_t v60;
  int v61;
  char v62;
  uint64_t v63;
  int v64;
  uint8x8_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  llvm::Constant *v74;
  uint64_t *NullValue;
  int v76;
  int64_t v77;
  unint64_t v79;
  int v80;
  uint64_t v81;
  llvm::Value **v82;
  uint64_t v83;
  llvm::Value **v84;
  uint64_t v85;
  uint64_t v86;
  llvm::Value **v87;
  uint64_t v88;
  llvm::ValueHandleBase *AllOnesValue;
  uint64_t *v90;
  char *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  llvm::UndefValue **v101;
  _QWORD v103[4];
  __int16 v104;
  char *v105;
  unsigned int v106;
  unint64_t *v107;
  unsigned int v108;
  void *__src;
  unsigned int v110;
  uint64_t v111;
  unsigned int v112;
  const char *v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  char v118;

  v6 = *(_QWORD *)(a2 - 32);
  if ((*(_DWORD *)(*(_QWORD *)v6 + 8) & 0xFE) == 0x12)
    v7 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)v6 + 16) + 8);
  else
    v7 = *(_DWORD *)(*(_QWORD *)v6 + 8);
  if (v7 != 13)
    return 0;
  v8 = *(const char **)(a2 - 64);
  v9 = *(_WORD *)(a2 + 18) & 0x3F;
  if (v9 == 38)
  {
    if ((sub_1C4D9ED34((uint64_t)v103, (llvm::Constant *)v6) & 1) == 0)
      goto LABEL_19;
LABEL_10:
    v10 = *(llvm::ConstantInt **)v8;
    v11 = *(llvm::Type **)v8;
    if ((*(_DWORD *)(*(_QWORD *)v8 + 8) & 0xFE) == 0x12)
      v11 = (llvm::Type *)**((_QWORD **)v10 + 2);
    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v11);
    v13 = llvm::ConstantInt::get(v10, (PrimitiveSizeInBits - 1), 0);
    v14 = a1[3];
    if ((v8[23] & 0x10) == 0)
    {
      v28 = 0;
      v27 = &byte_1C871356D;
LABEL_28:
      LOWORD(v117) = 773;
      v113 = v27;
      v114 = v28;
      v115 = ".lobit";
      v30 = (unsigned __int8 *)sub_1C534E5D8(v14, (uint64_t)v8, (uint64_t)v13, (uint64_t)&v113, 0);
      v31 = *a3;
      if (*(_QWORD *)v30 != *a3)
      {
        v32 = (uint64_t *)a1[3];
        LOWORD(v117) = 257;
        v30 = sub_1C4D8D514(v32, v30, v31, 1, (uint64_t)&v113);
      }
      if (v9 != 38)
        return sub_1C577F888((uint64_t)a1, (llvm::ValueAsMetadata *)a3, (llvm::Value *)v30);
      v33 = a1[3];
      if ((v30[23] & 0x10) == 0)
      {
        v44 = 0;
        v43 = &byte_1C871356D;
        goto LABEL_40;
      }
      v34 = ***(_QWORD ***)v30;
      v35 = *(_QWORD *)(v34 + 152);
      v36 = *(unsigned int *)(v34 + 168);
      if ((_DWORD)v36)
      {
        LODWORD(v37) = (v36 - 1) & ((v30 >> 4) ^ (v30 >> 9));
        v38 = (unsigned __int8 **)(v35 + 16 * v37);
        v39 = *v38;
        if (*v38 == v30)
        {
LABEL_39:
          v42 = v38[1];
          v45 = *(_QWORD *)v42;
          v43 = (char *)(v42 + 16);
          v44 = v45;
LABEL_40:
          LOWORD(v117) = 773;
          v113 = v43;
          v114 = v44;
          v115 = ".not";
          v30 = (unsigned __int8 *)sub_1C506EAA0(v33, (uint64_t)v30, (uint64_t)&v113);
          return sub_1C577F888((uint64_t)a1, (llvm::ValueAsMetadata *)a3, (llvm::Value *)v30);
        }
        v40 = 1;
        while (v39 != (unsigned __int8 *)-4096)
        {
          v41 = v37 + v40++;
          v37 = v41 & (v36 - 1);
          v39 = *(unsigned __int8 **)(v35 + 16 * v37);
          if (v39 == v30)
          {
            v38 = (unsigned __int8 **)(v35 + 16 * v37);
            goto LABEL_39;
          }
        }
      }
      v38 = (unsigned __int8 **)(v35 + 16 * v36);
      goto LABEL_39;
    }
    v15 = ***(_QWORD ***)v8;
    v16 = *(_QWORD *)(v15 + 152);
    v17 = *(unsigned int *)(v15 + 168);
    if ((_DWORD)v17)
    {
      LODWORD(v18) = (v17 - 1) & ((v8 >> 4) ^ (v8 >> 9));
      v19 = (const char **)(v16 + 16 * v18);
      v20 = *v19;
      if (*v19 == v8)
      {
LABEL_27:
        v26 = v19[1];
        v29 = *(_QWORD *)v26;
        v27 = (char *)(v26 + 16);
        v28 = v29;
        goto LABEL_28;
      }
      v21 = 1;
      while (v20 != (const char *)-4096)
      {
        v22 = v18 + v21++;
        v18 = v22 & (v17 - 1);
        v20 = *(const char **)(v16 + 16 * v18);
        if (v20 == v8)
        {
          v19 = (const char **)(v16 + 16 * v18);
          goto LABEL_27;
        }
      }
    }
    v19 = (const char **)(v16 + 16 * v17);
    goto LABEL_27;
  }
  if (v9 == 40 && (sub_1C4D8AC3C((uint64_t)&v113, *(llvm::Constant **)(a2 - 32)) & 1) != 0)
    goto LABEL_10;
LABEL_19:
  if (*(_BYTE *)(v6 + 16) != 16)
    return 0;
  v23 = *(_QWORD *)(a2 + 8);
  if (!v23 || *(_QWORD *)(v23 + 8) || (*(_WORD *)(a2 + 18) & 0x3E) != 0x20)
    return 0;
  v24 = (llvm::APInt *)(v6 + 24);
  v25 = (llvm::UndefValue **)*(unsigned int *)(v6 + 32);
  if (v25 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v6 + 24)) != (_DWORD)v25)
    {
      v46 = 0;
      v47 = ((unint64_t)v25 + 63) >> 6;
      v48 = *(int8x8_t **)v24;
      do
      {
        v49 = *v48++;
        v50 = (uint8x8_t)vcnt_s8(v49);
        v50.i16[0] = vaddlv_u8(v50);
        v46 += v50.i32[0];
        --v47;
      }
      while (v47);
      if (v46 != 1)
        return 0;
    }
  }
  else if ((*(_QWORD *)v24 & (*(_QWORD *)v24 - 1)) != 0)
  {
    return 0;
  }
  v51 = a1[7];
  v52 = a1[9];
  v53 = (const char *)a3;
  if (!a3[5])
  {
    if (!v8 || *((unsigned __int8 *)v8 + 16) < 0x1Cu || (v53 = v8, !*((_QWORD *)v8 + 5)))
      v53 = 0;
  }
  v113 = (const char *)a1[10];
  v114 = v51;
  v115 = v53;
  v116 = v52;
  v117 = 0;
  v118 = 1;
  sub_1C4F83784((uint64_t)v8, 0, (uint64_t *)&v113, &__src);
  LODWORD(v55) = v110;
  v106 = v110;
  if (v110 <= 0x40)
  {
    v56 = ~(unint64_t)__src;
    v57 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v110;
    if (!v110)
      v57 = 0;
    v58 = (const void *)(v57 & v56);
    v105 = (char *)(v57 & v56);
    v108 = v110;
    v107 = (unint64_t *)(v57 & v56);
    v106 = 0;
    goto LABEL_52;
  }
  v59 = (((unint64_t)v110 + 63) >> 3) & 0x3FFFFFF8;
  v105 = (char *)operator new[]();
  memcpy(v105, __src, v59);
  llvm::APInt::flipAllBitsSlowCase((uint64_t)&v105);
  v58 = v105;
  v55 = v106;
  v108 = v55;
  v107 = (unint64_t *)v105;
  v106 = 0;
  if (v55 <= 0x40)
  {
LABEL_52:
    v60 = (uint8x8_t)vcnt_s8((int8x8_t)v58);
    v60.i16[0] = vaddlv_u8(v60);
    if (v60.u32[0] == 1)
    {
      v61 = 1;
      goto LABEL_59;
    }
    v62 = 0;
    goto LABEL_101;
  }
  v63 = 0;
  v64 = 0;
  do
  {
    v65 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v105[v63]);
    v65.i16[0] = vaddlv_u8(v65);
    v64 += v65.i32[0];
    v63 += 8;
  }
  while ((((unint64_t)(v55 + 63) >> 3) & 0x3FFFFFF8) != v63);
  v61 = 0;
  v62 = 0;
  if (v64 == 1)
  {
LABEL_59:
    v66 = *(_QWORD *)(a2 - 64);
    v67 = *(unsigned int *)(v6 + 32);
    if (v67 > 0x40)
    {
      v69 = v61;
      v70 = llvm::APInt::countLeadingZerosSlowCase(v24);
      v61 = v69;
      if (v70 != (_DWORD)v67)
      {
        v73 = memcmp(*(const void **)v24, v58, ((unint64_t)(v67 + 63) >> 3) & 0x3FFFFFF8);
        v61 = v69;
        if (!v73)
        {
LABEL_62:
          if (v9 != 33)
          {
LABEL_63:
            if (v61)
            {
              v68 = v55 + __clz((unint64_t)v58) - 64;
            }
            else
            {
              v76 = 0;
              v77 = ((unint64_t)v55 + 63) >> 6;
              do
              {
                if (v77-- < 1)
                  break;
                v79 = *((_QWORD *)v58 + v77);
                v76 += __clz(v79);
              }
              while (!v79);
              v80 = v55 | 0xFFFFFFC0;
              if ((v55 & 0x3F) == 0)
                v80 = 0;
              v68 = v76 + v80;
            }
            if (v68)
            {
              v81 = a1[3];
              v82 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v66, v68, 0);
              LOWORD(v117) = 257;
              v66 = sub_1C506E874(v81, v66, (uint64_t)v82, (uint64_t)&v113, 0, 0);
              LODWORD(v55) = v108;
            }
            v83 = a1[3];
            v84 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v66, (v55 - 1), 0);
            v113 = "sext";
            LOWORD(v117) = 259;
            v85 = sub_1C534E5D8(v83, v66, (uint64_t)v84, (uint64_t)&v113, 0);
            goto LABEL_95;
          }
LABEL_67:
          if (v61)
          {
            v71 = __clz(__rbit64((unint64_t)v58));
            if (v55 >= v71)
              v72 = v71;
            else
              v72 = v55;
          }
          else
          {
            v72 = llvm::APInt::countTrailingZerosSlowCase(&v107);
          }
          if (v72)
          {
            v86 = a1[3];
            v87 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v66, v72, 0);
            LOWORD(v117) = 257;
            v66 = sub_1C506ED1C(v86, v66, (uint64_t)v87, (uint64_t)&v113, 0);
          }
          v88 = a1[3];
          AllOnesValue = llvm::Constant::getAllOnesValue(*(llvm::Constant **)v66, v54);
          v103[0] = "sext";
          v104 = 259;
          v90 = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, llvm::ValueHandleBase *, _QWORD, _QWORD))(**(_QWORD **)(v88 + 72) + 16))(*(_QWORD *)(v88 + 72), v66, AllOnesValue, 0, 0);
          if (v90)
          {
LABEL_96:
            v100 = *a3;
            if (*a3 != *v90)
            {
              LOWORD(v117) = 257;
              v62 = 1;
              llvm::CastInst::CreateIntegerCast(v90, v100, 1);
              v25 = v101;
              goto LABEL_101;
            }
LABEL_100:
            v25 = sub_1C577F888((uint64_t)a1, (llvm::ValueAsMetadata *)a3, (llvm::Value *)v90);
            v62 = 1;
            goto LABEL_101;
          }
          LOWORD(v117) = 257;
          v91 = (char *)operator new(0x80uLL);
          *((_QWORD *)v91 + 5) = 0;
          v92 = v91 + 40;
          *((_QWORD *)v91 + 6) = 0;
          *((_QWORD *)v91 + 8) = *(_QWORD *)v66;
          v93 = (uint64_t)(v91 + 64);
          *((_QWORD *)v91 + 3) = v91 + 64;
          *((_QWORD *)v91 + 7) = v91 + 64;
          *((_QWORD *)v91 + 9) = 0;
          v91[80] = 41;
          v91[81] = 0;
          *((_WORD *)v91 + 41) = 0;
          *((_DWORD *)v91 + 21) = 2;
          *(_OWORD *)(v91 + 88) = 0u;
          *(_OWORD *)(v91 + 104) = 0u;
          *((_DWORD *)v91 + 30) = 0;
          *(_QWORD *)v91 = v66;
          v96 = *(_QWORD *)(v66 + 8);
          v95 = (_QWORD *)(v66 + 8);
          v94 = v96;
          *((_QWORD *)v91 + 1) = v96;
          if (v96)
            *(_QWORD *)(v94 + 16) = v91 + 8;
          *((_QWORD *)v91 + 2) = v95;
          *v95 = v91;
          *((_QWORD *)v91 + 4) = AllOnesValue;
          if (AllOnesValue)
          {
            v99 = *((_QWORD *)AllOnesValue + 1);
            v98 = (_QWORD *)((char *)AllOnesValue + 8);
            v97 = v99;
            *v92 = v99;
            if (v99)
              *(_QWORD *)(v97 + 16) = v92;
            *((_QWORD *)v91 + 6) = v98;
            *v98 = v91 + 32;
          }
          llvm::Value::setName((uint64_t ***)v91 + 8, (uint64_t)&v113);
          v85 = sub_1C4773754((uint64_t *)v88, v93, (uint64_t)v103);
LABEL_95:
          v90 = (uint64_t *)v85;
          goto LABEL_96;
        }
LABEL_73:
        v74 = (llvm::Constant *)*a3;
        if (v9 == 33)
          NullValue = (uint64_t *)llvm::Constant::getAllOnesValue(v74, v54);
        else
          NullValue = (uint64_t *)llvm::Constant::getNullValue(v74, v54);
        v90 = NullValue;
        goto LABEL_100;
      }
    }
    else if (*(_QWORD *)v24)
    {
      if (*(const void **)v24 == v58)
        goto LABEL_62;
      goto LABEL_73;
    }
    if (v9 == 33)
      goto LABEL_63;
    goto LABEL_67;
  }
LABEL_101:
  if (v108 >= 0x41 && v107)
    MEMORY[0x1CAA32F9C](v107, 0x1000C8000313F17);
  if (v112 >= 0x41 && v111)
    MEMORY[0x1CAA32F9C](v111, 0x1000C8000313F17);
  if (v110 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  if ((v62 & 1) == 0)
    return 0;
  return v25;
}

uint64_t ***sub_1C57E36E8(_QWORD *a1, llvm::Instruction *this)
{
  uint64_t v4;
  uint64_t ***v5;
  uint64_t v6;
  llvm::Type *v7;
  uint64_t v8;
  llvm::Type *v9;
  int PrimitiveSizeInBits;
  llvm::Type *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  llvm::Instruction *v15;
  uint64_t *v16;
  llvm::UndefValue **v17;
  const char *v19;
  unsigned int v20;
  const char *v21;
  unsigned int v22;
  llvm::UndefValue *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::Instruction *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  llvm::ValueAsMetadata *v31;
  llvm::Value *VScale;
  uint64_t v33;
  llvm::Type *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  llvm::Instruction *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  llvm::Value **v48;
  uint64_t v49;
  _QWORD *v50;
  char *v51;
  llvm::Value **v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  llvm::Value *v56;
  _QWORD *v57;
  llvm::Value *v58;
  uint64_t *v59;
  int v60;
  uint64_t *v61;
  int v62;
  BOOL v63;
  llvm::UndefValue *v64;
  unsigned int v65;
  llvm::Value **v66;
  llvm::Constant *Sub;
  llvm::Type *v68;
  unsigned int v69;
  llvm::Value **v70;
  llvm::Constant *v71;
  llvm::Constant *v72;
  llvm::UndefValue *v73;
  llvm::Constant *v74;
  llvm::UndefValue *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  llvm::Instruction *v82;
  int v83;
  int v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  __int128 v90;
  uint64_t *v91;
  llvm::Value **v92;
  uint64_t v93;
  llvm::Value **v94;
  llvm::Value **v95;
  uint64_t v96;
  _QWORD *v97;
  char *v98;
  llvm::Value **v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  llvm::Value *v103;
  _QWORD *v104;
  llvm::Value *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  llvm::Value **v110;
  _QWORD *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  char *v116;
  _QWORD *v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  llvm::Constant *v124;
  llvm::Constant *v125;
  uint64_t v126;
  uint64_t v127[4];
  __int16 v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  unsigned int v132;
  __int128 v133;
  llvm::Constant **v134;
  uint64_t v135;
  uint64_t v136;
  char v137;

  v4 = *((_QWORD *)this + 1);
  if (v4 && !*(_QWORD *)(v4 + 8) && *(_BYTE *)(*(_QWORD *)(v4 + 24) + 16) == 66)
    return 0;
  v5 = (uint64_t ***)sub_1C57DD374((uint64_t)a1, this);
  if (v5)
    return v5;
  v6 = *((_QWORD *)this - 4);
  v7 = *(llvm::Type **)v6;
  v8 = *(_QWORD *)this;
  v9 = *(llvm::Type **)v6;
  if ((*(_DWORD *)(*(_QWORD *)v6 + 8) & 0xFE) == 0x12)
    v9 = (llvm::Type *)**((_QWORD **)v7 + 2);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v9);
  v11 = (llvm::Type *)v8;
  if ((*(_DWORD *)(v8 + 8) & 0xFE) == 0x12)
    v11 = **(llvm::Type ***)(v8 + 16);
  v12 = llvm::Type::getPrimitiveSizeInBits(v11);
  v13 = a1[7];
  v14 = a1[9];
  v15 = this;
  if (!*((_QWORD *)this + 5))
  {
    if (*(unsigned __int8 *)(v6 + 16) < 0x1Cu || (v15 = (llvm::Instruction *)v6, !*(_QWORD *)(v6 + 40)))
      v15 = 0;
  }
  *(_QWORD *)&v133 = a1[10];
  *((_QWORD *)&v133 + 1) = v13;
  v134 = (llvm::Constant **)v15;
  v135 = v14;
  v136 = 0;
  v137 = 1;
  sub_1C4F83784(v6, 0, (uint64_t *)&v133, &v129);
  if (v130 >= 0x41)
    v16 = (uint64_t *)(v129 + 8 * ((v130 - 1) >> 6));
  else
    v16 = &v129;
  if ((((unint64_t)*v16 >> (v130 - 1)) & 1) != 0)
  {
    LOWORD(v136) = 257;
    llvm::CastInst::Create(39);
LABEL_16:
    v5 = (uint64_t ***)v17;
    goto LABEL_17;
  }
  if (*((_BYTE *)v7 + 8) == 13 && *(_BYTE *)(v8 + 8) == 13)
  {
    v20 = llvm::Type::getPrimitiveSizeInBits(v7);
    if ((_DWORD)v19 == 1)
    v22 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v8);
    if ((_DWORD)v21 == 1)
    if (sub_1C577D3C0((uint64_t)a1, v20, v22) && sub_1C57E4274(v6, v8))
    {
      v23 = sub_1C57DCDFC((uint64_t)a1, v6, (llvm::Type ***)v8, (llvm::Type *)1);
      v24 = (uint64_t)v23;
      v25 = a1[7];
      v26 = a1[9];
      v27 = this;
      if (!*((_QWORD *)this + 5))
      {
        if (!v23 || *((unsigned __int8 *)v23 + 16) < 0x1Cu || (v27 = v23, !*((_QWORD *)v23 + 5)))
          v27 = 0;
      }
      *(_QWORD *)&v133 = a1[10];
      *((_QWORD *)&v133 + 1) = v25;
      v134 = (llvm::Constant **)v27;
      v135 = v26;
      v136 = 0;
      v137 = 1;
      v28 = sub_1C4F85990(v23, 0, (uint64_t)&v133);
      v29 = (v12 - PrimitiveSizeInBits);
      if (v28 > v29)
      {
        v30 = (uint64_t)a1;
        v31 = this;
        VScale = (llvm::Value *)v24;
LABEL_31:
        v17 = sub_1C577F888(v30, v31, VScale);
        goto LABEL_16;
      }
      v48 = llvm::ConstantInt::get((llvm::ConstantInt *)v8, v29, 0);
      v49 = a1[3];
      *(_QWORD *)&v133 = "sext";
      LOWORD(v136) = 259;
      v50 = (_QWORD *)sub_1C506E874(v49, v24, (uint64_t)v48, (uint64_t)&v133, 0, 0);
      v128 = 257;
      goto LABEL_57;
    }
  }
  v126 = 0;
  *(_QWORD *)&v133 = &v126;
  if (sub_1C4B03864((_QWORD **)&v133, v6))
  {
    v33 = v126;
    v34 = *(llvm::Type **)v126;
    if ((*(_DWORD *)(*(_QWORD *)v126 + 8) & 0xFE) == 0x12)
      v34 = (llvm::Type *)**((_QWORD **)v34 + 2);
    v35 = llvm::Type::getPrimitiveSizeInBits(v34);
    v36 = a1[7];
    v37 = a1[9];
    v38 = this;
    if (!*((_QWORD *)this + 5))
    {
      if (*(unsigned __int8 *)(v33 + 16) < 0x1Cu || (v38 = (llvm::Instruction *)v33, !*(_QWORD *)(v33 + 40)))
        v38 = 0;
    }
    *(_QWORD *)&v133 = a1[10];
    *((_QWORD *)&v133 + 1) = v36;
    v134 = (llvm::Constant **)v38;
    v135 = v37;
    v136 = 0;
    v137 = 1;
    v39 = sub_1C4F85990((llvm::Constant *)v33, 0, (uint64_t)&v133);
    v40 = (v35 - PrimitiveSizeInBits);
    if (v39 > v40)
    {
      v41 = (uint64_t *)v126;
      LOWORD(v136) = 257;
LABEL_38:
      llvm::CastInst::CreateIntegerCast(v41, v8, 1);
      goto LABEL_16;
    }
    v42 = *(_QWORD *)(v6 + 8);
    if (v42 && !*(_QWORD *)(v42 + 8))
    {
      if (*(_QWORD *)v126 == v8)
      {
        v48 = llvm::ConstantInt::get((llvm::ConstantInt *)v8, (v12 - PrimitiveSizeInBits), 0);
        v106 = a1[3];
        LOWORD(v136) = 257;
        v50 = (_QWORD *)sub_1C506E874(v106, v126, (uint64_t)v48, (uint64_t)&v133, 0, 0);
        v128 = 257;
LABEL_57:
        v51 = (char *)operator new(0x80uLL);
        *((_QWORD *)v51 + 5) = 0;
        v52 = (llvm::Value **)(v51 + 40);
        *((_QWORD *)v51 + 6) = 0;
        *((_QWORD *)v51 + 8) = *v50;
        v5 = (uint64_t ***)(v51 + 64);
        *((_QWORD *)v51 + 3) = v51 + 64;
        *((_QWORD *)v51 + 7) = v51 + 64;
        *((_QWORD *)v51 + 9) = 0;
        v51[80] = 55;
        v51[81] = 0;
        *((_WORD *)v51 + 41) = 0;
        *((_DWORD *)v51 + 21) = 2;
        *(_OWORD *)(v51 + 88) = 0u;
        *(_OWORD *)(v51 + 104) = 0u;
        *((_DWORD *)v51 + 30) = 0;
        *(_QWORD *)v51 = v50;
        v55 = v50[1];
        v54 = v50 + 1;
        v53 = v55;
        *((_QWORD *)v51 + 1) = v55;
        if (v55)
          *(_QWORD *)(v53 + 16) = v51 + 8;
        *((_QWORD *)v51 + 2) = v54;
        *v54 = v51;
        *((_QWORD *)v51 + 4) = v48;
        if (v48)
        {
          v58 = v48[1];
          v57 = v48 + 1;
          v56 = v58;
          *v52 = v58;
          if (v58)
            *((_QWORD *)v56 + 2) = v52;
          *((_QWORD *)v51 + 6) = v57;
          *v57 = v51 + 32;
        }
        v59 = v127;
        goto LABEL_64;
      }
      v127[0] = 0;
      v61 = v127;
      LODWORD(v134) = 64;
      *(_QWORD *)&v133 = v127;
      *((_QWORD *)&v133 + 1) = (v35 - PrimitiveSizeInBits);
      v62 = *(unsigned __int8 *)(v126 + 16);
      if (v62 == 54)
      {
        v63 = 0;
        if (*(_QWORD *)(v126 - 64))
        {
          v127[0] = *(_QWORD *)(v126 - 64);
          if (sub_1C57E8F04((llvm::APInt *)((char *)&v133 + 8), *(llvm::Constant **)(v126 - 32)))
            v63 = 1;
        }
      }
      else
      {
        if (v62 == 5)
          LOBYTE(v61) = *(_WORD *)(v126 + 18) == 26
                     && (v107 = v126 - 32 * (*(_DWORD *)(v126 + 20) & 0x7FFFFFF), *(_QWORD *)v107)
                     && (v127[0] = *(_QWORD *)v107,
                         sub_1C57BE190((llvm::APInt *)((char *)&v133 + 8), *(llvm::Constant **)(v107 + 32)));
        v63 = (v62 == 5) & v61;
      }
      if (v134 >= 0x41 && *((_QWORD *)&v133 + 1))
        MEMORY[0x1CAA32F9C](*((_QWORD *)&v133 + 1), 0x1000C8000313F17);
      if (v63)
      {
        v108 = a1[3];
        v109 = v127[0];
        LOWORD(v136) = 257;
        v110 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v127[0], v40, 0);
        v41 = (uint64_t *)sub_1C534E5D8(v108, v109, (uint64_t)v110, (uint64_t)&v133, 0);
        LOWORD(v136) = 257;
        goto LABEL_38;
      }
    }
  }
  if (*(_BYTE *)(v6 + 16) == 81)
  {
    v17 = sub_1C57E2E8C(a1, v6, (uint64_t *)this);
    goto LABEL_16;
  }
  v127[0] = 0;
  v124 = 0;
  v125 = 0;
  *(_QWORD *)&v133 = v127;
  *((_QWORD *)&v133 + 1) = &v125;
  v134 = &v124;
  if (sub_1C57E8F80((_QWORD **)&v133, 27, v6)
    && llvm::Constant::isElementWiseEqual(v125, v124)
    && *(_QWORD *)v127[0] == v8)
  {
    v64 = sub_1C537D3B8((llvm *)0x28, (uint64_t)v124, (llvm::Constant *)v8, 0);
    if ((*((_DWORD *)v7 + 2) & 0xFE) == 0x12)
      v7 = (llvm::Type *)**((_QWORD **)v7 + 2);
    v65 = llvm::Type::getPrimitiveSizeInBits(v7);
    v66 = llvm::ConstantInt::get((llvm::ConstantInt *)v8, v65, 0);
    Sub = llvm::ConstantExpr::getSub((llvm::ConstantExpr *)v66, v64, 0, 0);
    v68 = (llvm::Type *)v8;
    if ((*(_DWORD *)(v8 + 8) & 0xFE) == 0x12)
      v68 = **(llvm::Type ***)(v8 + 16);
    v69 = llvm::Type::getPrimitiveSizeInBits(v68);
    v70 = llvm::ConstantInt::get((llvm::ConstantInt *)v8, v69, 0);
    v71 = llvm::ConstantExpr::getSub((llvm::ConstantExpr *)v70, Sub, 0, 0);
    v73 = llvm::Constant::mergeUndefsWith(v71, v125, v72);
    v75 = llvm::Constant::mergeUndefsWith(v73, v124, v74);
    v76 = a1[3];
    if ((*((_BYTE *)this + 23) & 0x10) == 0)
    {
      v113 = 0;
      v112 = &byte_1C871356D;
      goto LABEL_123;
    }
    v77 = ***(_QWORD ***)this;
    v78 = *(_QWORD *)(v77 + 152);
    v79 = *(unsigned int *)(v77 + 168);
    if ((_DWORD)v79)
    {
      LODWORD(v80) = (v79 - 1) & ((this >> 4) ^ (this >> 9));
      v81 = v78 + 16 * v80;
      v82 = *(llvm::Instruction **)v81;
      if (*(llvm::Instruction **)v81 == this)
      {
LABEL_122:
        v111 = *(_QWORD **)(v81 + 8);
        v114 = *v111;
        v112 = (char *)(v111 + 2);
        v113 = v114;
LABEL_123:
        LOWORD(v136) = 261;
        *(_QWORD *)&v133 = v112;
        *((_QWORD *)&v133 + 1) = v113;
        v115 = (_QWORD *)sub_1C506E874(v76, v127[0], (uint64_t)v75, (uint64_t)&v133, 0, 0);
        v127[0] = (uint64_t)v115;
        LOWORD(v136) = 257;
        v116 = (char *)operator new(0x80uLL);
        *((_QWORD *)v116 + 5) = 0;
        v117 = v116 + 40;
        *((_QWORD *)v116 + 6) = 0;
        *((_QWORD *)v116 + 8) = *v115;
        v5 = (uint64_t ***)(v116 + 64);
        *((_QWORD *)v116 + 3) = v116 + 64;
        *((_QWORD *)v116 + 7) = v116 + 64;
        *((_QWORD *)v116 + 9) = 0;
        v116[80] = 55;
        v116[81] = 0;
        *((_WORD *)v116 + 41) = 0;
        *((_DWORD *)v116 + 21) = 2;
        *(_OWORD *)(v116 + 88) = 0u;
        *(_OWORD *)(v116 + 104) = 0u;
        *((_DWORD *)v116 + 30) = 0;
        *(_QWORD *)v116 = v115;
        v120 = v115[1];
        v119 = v115 + 1;
        v118 = v120;
        *((_QWORD *)v116 + 1) = v120;
        if (v120)
          *(_QWORD *)(v118 + 16) = v116 + 8;
        *((_QWORD *)v116 + 2) = v119;
        *v119 = v116;
        *((_QWORD *)v116 + 4) = v75;
        if (v75)
        {
          v123 = *((_QWORD *)v75 + 1);
          v122 = (_QWORD *)((char *)v75 + 8);
          v121 = v123;
          *v117 = v123;
          if (v123)
            *(_QWORD *)(v121 + 16) = v117;
          *((_QWORD *)v116 + 6) = v122;
          *v122 = v116 + 32;
        }
        goto LABEL_129;
      }
      v83 = 1;
      while (v82 != (llvm::Instruction *)-4096)
      {
        v84 = v80 + v83++;
        v80 = v84 & (v79 - 1);
        v82 = *(llvm::Instruction **)(v78 + 16 * v80);
        if (v82 == this)
        {
          v81 = v78 + 16 * v80;
          goto LABEL_122;
        }
      }
    }
    v81 = v78 + 16 * v79;
    goto LABEL_122;
  }
  LODWORD(v134) = 64;
  *(_QWORD *)&v133 = &v126;
  *((_QWORD *)&v133 + 1) = (PrimitiveSizeInBits - 1);
  v43 = *(_QWORD *)(v6 + 8);
  if (!v43)
    goto LABEL_51;
  if (*(_QWORD *)(v43 + 8))
    goto LABEL_48;
  v60 = *(unsigned __int8 *)(v6 + 16);
  if (v60 != 5)
  {
    if (v60 == 55
      && sub_1C4B03864((_QWORD **)&v133, *(_QWORD *)(v6 - 64))
      && sub_1C4D8A7F0((llvm::APInt *)((char *)&v133 + 8), *(unsigned __int8 **)(v6 - 32)))
    {
      goto LABEL_97;
    }
LABEL_48:
    if (v134 >= 0x41 && *((_QWORD *)&v133 + 1))
      MEMORY[0x1CAA32F9C](*((_QWORD *)&v133 + 1), 0x1000C8000313F17);
    goto LABEL_51;
  }
  if (*(_WORD *)(v6 + 18) != 27
    || !sub_1C4B03864((_QWORD **)&v133, *(_QWORD *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF)))
    || !sub_1C4D8A86C((llvm::APInt *)((char *)&v133 + 8), *(llvm::Constant **)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) + 32)))
  {
    goto LABEL_48;
  }
LABEL_97:
  v93 = *(_QWORD *)v126;
  if (v134 >= 0x41 && *((_QWORD *)&v133 + 1))
    MEMORY[0x1CAA32F9C](*((_QWORD *)&v133 + 1), 0x1000C8000313F17);
  if (v93 == v8)
  {
    v94 = llvm::ConstantInt::get((llvm::ConstantInt *)v8, (v12 - PrimitiveSizeInBits), 0);
    v95 = llvm::ConstantInt::get((llvm::ConstantInt *)v8, (v12 - 1), 0);
    v96 = a1[3];
    LOWORD(v136) = 257;
    v97 = (_QWORD *)sub_1C506E874(v96, v126, (uint64_t)v94, (uint64_t)&v133, 0, 0);
    LOWORD(v136) = 257;
    v98 = (char *)operator new(0x80uLL);
    *((_QWORD *)v98 + 5) = 0;
    v99 = (llvm::Value **)(v98 + 40);
    *((_QWORD *)v98 + 6) = 0;
    *((_QWORD *)v98 + 8) = *v97;
    v5 = (uint64_t ***)(v98 + 64);
    *((_QWORD *)v98 + 3) = v98 + 64;
    *((_QWORD *)v98 + 7) = v98 + 64;
    *((_QWORD *)v98 + 9) = 0;
    v98[80] = 55;
    v98[81] = 0;
    *((_WORD *)v98 + 41) = 0;
    *((_DWORD *)v98 + 21) = 2;
    *(_OWORD *)(v98 + 88) = 0u;
    *(_OWORD *)(v98 + 104) = 0u;
    *((_DWORD *)v98 + 30) = 0;
    *(_QWORD *)v98 = v97;
    v102 = v97[1];
    v101 = v97 + 1;
    v100 = v102;
    *((_QWORD *)v98 + 1) = v102;
    if (v102)
      *(_QWORD *)(v100 + 16) = v98 + 8;
    *((_QWORD *)v98 + 2) = v101;
    *v101 = v98;
    *((_QWORD *)v98 + 4) = v95;
    if (v95)
    {
      v105 = v95[1];
      v104 = v95 + 1;
      v103 = v105;
      *v99 = v105;
      if (v105)
        *((_QWORD *)v103 + 2) = v99;
      *((_QWORD *)v98 + 6) = v104;
      *v104 = v98 + 32;
    }
LABEL_129:
    v59 = (uint64_t *)&v133;
LABEL_64:
    llvm::Value::setName(v5, (uint64_t)v59);
    goto LABEL_17;
  }
LABEL_51:
  *(_QWORD *)&v133 = a1[10];
  if (sub_1C53F7E14((uint64_t *)&v133, v6))
  {
    v44 = *(_QWORD *)(*((_QWORD *)this + 5) + 56);
    if (v44)
    {
      v47 = *(_QWORD *)(v44 + 112);
      v45 = (uint64_t *)(v44 + 112);
      v46 = v47;
      if (v47)
      {
        if ((*(_BYTE *)(v46 + 22) & 1) != 0)
        {
          v5 = 0;
          v88 = *(_QWORD *)(llvm::AttributeList::getAttributeAtIndex(v45, -1, 80) + 16);
          v85 = v88 == 0;
          v86 = (_DWORD)v88 != 0;
          LODWORD(v133) = HIDWORD(v88);
          v87 = v88 & 0xFFFFFF00;
          v88 = v88;
          if (v85)
            v88 = 0;
          *(_QWORD *)((char *)&v133 + 4) = v88 | v87 | (v86 << 32);
          *((_QWORD *)&v90 + 1) = v86;
          *(_QWORD *)&v90 = v133;
          v89 = v90 >> 32;
          if (!HIDWORD(v89))
            goto LABEL_17;
          if (31 - __clz(v89) < PrimitiveSizeInBits - 1)
          {
            v91 = (uint64_t *)a1[3];
            v92 = llvm::ConstantInt::get((llvm::ConstantInt *)v8, 1, 0);
            LOWORD(v136) = 257;
            VScale = (llvm::Value *)llvm::IRBuilderBase::CreateVScale(v91, (uint64_t)v92, (uint64_t)&v133);
            v30 = (uint64_t)a1;
            v31 = this;
            goto LABEL_31;
          }
        }
      }
    }
  }
  v5 = 0;
LABEL_17:
  if (v132 >= 0x41 && v131)
    MEMORY[0x1CAA32F9C](v131, 0x1000C8000313F17);
  if (v130 >= 0x41 && v129)
    MEMORY[0x1CAA32F9C](v129, 0x1000C8000313F17);
  return v5;
}

uint64_t sub_1C57E4274(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;

  v2 = a2;
  v3 = a1;
  while (1)
  {
    if (sub_1C57E80FC(a1, a2))
      return 1;
    v4 = *(unsigned __int8 *)(v3 + 16);
    if (v4 < 0x1C)
      return 0;
    v5 = *(_QWORD *)(v3 + 8);
    if (!v5 || *(_QWORD *)(v5 + 8))
      return 0;
    if (*(unsigned __int8 *)(v3 + 16) <= 0x37u)
    {
      if (v4 != 41 && v4 != 43 && v4 != 45)
        return 0;
      goto LABEL_13;
    }
    if (*(unsigned __int8 *)(v3 + 16) <= 0x41u)
    {
      if (v4 - 56 >= 3)
        return 0;
LABEL_13:
      v6 = *(_DWORD *)(v3 + 20);
      if ((v6 & 0x40000000) != 0)
        v7 = *(_QWORD **)(v3 - 8);
      else
        v7 = (_QWORD *)(v3 - 32 * (v6 & 0x7FFFFFF));
      result = sub_1C57E4274(*v7, v2);
      if (!(_DWORD)result)
        return result;
      v9 = *(_DWORD *)(v3 + 20);
      if ((v9 & 0x40000000) != 0)
        v10 = *(_QWORD *)(v3 - 8);
      else
        v10 = v3 - 32 * (v9 & 0x7FFFFFF);
      v11 = (uint64_t *)(v10 + 32);
      goto LABEL_21;
    }
    if (v4 != 85)
      break;
    v12 = *(_DWORD *)(v3 + 20);
    if ((v12 & 0x40000000) != 0)
      v13 = *(_QWORD *)(v3 - 8);
    else
      v13 = v3 - 32 * (v12 & 0x7FFFFFF);
    result = sub_1C57E4274(*(_QWORD *)(v13 + 32), v2);
    if (!(_DWORD)result)
      return result;
    v14 = *(_DWORD *)(v3 + 20);
    if ((v14 & 0x40000000) != 0)
      v15 = *(_QWORD *)(v3 - 8);
    else
      v15 = v3 - 32 * (v14 & 0x7FFFFFF);
    v11 = (uint64_t *)(v15 + 64);
LABEL_21:
    v3 = *v11;
    a1 = *v11;
    a2 = v2;
  }
  if (v4 - 66 < 3)
    return 1;
  if (v4 != 83)
    return 0;
  v16 = *(_DWORD *)(v3 + 20);
  if ((v16 & 0x40000000) != 0)
  {
    v18 = *(uint64_t **)(v3 - 8);
    v17 = v16 & 0x7FFFFFF;
  }
  else
  {
    v17 = v16 & 0x7FFFFFF;
    v18 = (uint64_t *)(v3 - 32 * v17);
  }
  if (!v17)
    return 1;
  v19 = 32 * v17 - 32;
  do
  {
    v20 = *v18;
    v18 += 4;
    result = sub_1C57E4274(v20, v2);
    if ((_DWORD)result)
      v21 = v19 == 0;
    else
      v21 = 1;
    v19 -= 32;
  }
  while (!v21);
  return result;
}

uint64_t sub_1C57E4404(uint64_t a1, llvm::Instruction *a2)
{
  uint64_t v4;
  llvm::Type *v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  _QWORD **v13;
  uint64_t v14;
  char v15;
  int v16;
  llvm::Type *v18;
  llvm::Type *v19;
  llvm::Type *v20;
  llvm::Type *v21;
  unsigned int FPMantissaWidth;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t *v32;
  unsigned __int8 *v33;
  char v34;
  char *v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  int v50;
  uint64_t v51;
  uint64_t *v52;
  char v53;
  uint64_t v55;
  uint64_t *v56;
  unsigned __int8 *v57;
  uint64_t v58;
  uint64_t *v59;
  unsigned __int8 *v60;
  char *v61;
  _QWORD *v62;
  char v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  unsigned __int8 *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  llvm::Value *Select;
  BOOL v87;
  _QWORD **v88;
  unsigned int v89;
  uint64_t v90;
  int v91;
  uint64_t *v92;
  _QWORD *v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  char v98;
  uint64_t v99;
  unsigned __int8 *v100;
  uint64_t Declaration;
  char *Descriptor;
  char *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 **v111;
  unsigned __int8 *v112;
  int v113;
  int v114;
  unsigned __int8 *v115;
  uint64_t v116;
  uint64_t *v117;
  unsigned __int8 *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t **v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  void *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  _QWORD *v149;
  int v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __int16 v158;
  uint64_t *v159;
  uint64_t *v160;
  llvm::Type *v161;
  void *v162;
  uint64_t v163;
  _QWORD v164[2];
  __int16 v165;
  uint64_t *v166;
  uint64_t v167;

  v167 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t)sub_1C57DD374(a1, a2);
  if (v4)
    return v4;
  v5 = *(llvm::Type **)a2;
  v161 = *(llvm::Type **)a2;
  v6 = *((_QWORD *)a2 - 4);
  v7 = *(unsigned __int8 *)(v6 + 16);
  if (v6)
    v8 = v7 >= 0x1C;
  else
    v8 = 0;
  if (v8 && v7 - 59 >= 0xFFFFFFEE)
  {
    v10 = *(_QWORD *)(v6 + 8);
    if (v10)
    {
      if (!*(_QWORD *)(v10 + 8))
      {
        sub_1C57E5024(*(llvm::detail::DoubleAPFloat **)(v6 - 64));
        v19 = v18;
        sub_1C57E5024(*(llvm::detail::DoubleAPFloat **)(v6 - 32));
        v21 = v20;
        FPMantissaWidth = llvm::Type::getFPMantissaWidth(*(llvm::Type **)v6);
        v23 = llvm::Type::getFPMantissaWidth(v19);
        v24 = llvm::Type::getFPMantissaWidth(v21);
        v25 = v24;
        if (v23 <= v24)
          v26 = v24;
        else
          v26 = v23;
        v27 = llvm::Type::getFPMantissaWidth(v5);
        switch(*(_BYTE *)(v6 + 16))
        {
          case '*':
          case ',':
            if (FPMantissaWidth < ((2 * v27) | 1) || v27 < v26)
              break;
            v28 = *(_QWORD *)(a1 + 24);
            v29 = *(uint64_t **)(v6 - 64);
            v165 = 257;
            v30 = sub_1C4773A70(v28, v29, (uint64_t *)v5, (uint64_t)&v162);
            v31 = *(_QWORD *)(a1 + 24);
            v32 = *(uint64_t **)(v6 - 32);
            v165 = 257;
            v33 = sub_1C4773A70(v31, v32, (uint64_t *)v5, (uint64_t)&v162);
            v34 = *(_BYTE *)(v6 + 16);
            v165 = 257;
            v35 = (char *)operator new(0x80uLL);
            v36 = v35;
            *((_QWORD *)v35 + 6) = 0;
            *((_QWORD *)v35 + 5) = 0;
            v37 = v35 + 40;
            *((_QWORD *)v35 + 8) = *(_QWORD *)v30;
            v4 = (uint64_t)(v35 + 64);
            *((_QWORD *)v35 + 3) = v35 + 64;
            *((_QWORD *)v35 + 7) = v35 + 64;
            *((_QWORD *)v35 + 9) = 0;
            v35[80] = v34;
            v35[81] = 0;
            *((_WORD *)v35 + 41) = 0;
            *((_DWORD *)v35 + 21) = 2;
            *(_OWORD *)(v35 + 88) = 0u;
            *(_OWORD *)(v35 + 104) = 0u;
            *((_DWORD *)v35 + 30) = 0;
            *(_QWORD *)v35 = v30;
            v40 = *((_QWORD *)v30 + 1);
            v39 = v30 + 8;
            v38 = v40;
            *((_QWORD *)v35 + 1) = v40;
            if (v40)
              *(_QWORD *)(v38 + 16) = v35 + 8;
            *((_QWORD *)v35 + 2) = v39;
            *v39 = v35;
            *((_QWORD *)v35 + 4) = v33;
            if (v33)
            {
              v43 = *((_QWORD *)v33 + 1);
              v42 = v33 + 8;
              v41 = v43;
              *v37 = v43;
              if (v43)
                *(_QWORD *)(v41 + 16) = v37;
              *((_QWORD *)v35 + 6) = v42;
              *v42 = v35 + 32;
            }
            llvm::Value::setName((uint64_t ***)v35 + 8, (uint64_t)&v162);
            v36[81] = *(_BYTE *)(v6 + 17) & 0xFE | v36[81] & 1;
            return v4;
          case '.':
            if (FPMantissaWidth < v25 + v23 || v27 < v26)
              break;
            v55 = *(_QWORD *)(a1 + 24);
            v56 = *(uint64_t **)(v6 - 64);
            v165 = 257;
            v57 = sub_1C4773A70(v55, v56, (uint64_t *)v5, (uint64_t)&v162);
            v58 = *(_QWORD *)(a1 + 24);
            v59 = *(uint64_t **)(v6 - 32);
            v165 = 257;
            v60 = sub_1C4773A70(v58, v59, (uint64_t *)v5, (uint64_t)&v162);
            v165 = 257;
            v61 = (char *)operator new(0x80uLL);
            *((_QWORD *)v61 + 5) = 0;
            v62 = v61 + 40;
            *((_QWORD *)v61 + 6) = 0;
            *((_QWORD *)v61 + 8) = *(_QWORD *)v57;
            v4 = (uint64_t)(v61 + 64);
            *((_QWORD *)v61 + 3) = v61 + 64;
            *((_QWORD *)v61 + 7) = v61 + 64;
            *((_QWORD *)v61 + 9) = 0;
            v63 = 46;
            goto LABEL_62;
          case '1':
            if (FPMantissaWidth < 2 * v27 || v27 < v26)
              break;
            v64 = *(_QWORD *)(a1 + 24);
            v65 = *(uint64_t **)(v6 - 64);
            v165 = 257;
            v57 = sub_1C4773A70(v64, v65, (uint64_t *)v5, (uint64_t)&v162);
            v66 = *(_QWORD *)(a1 + 24);
            v67 = *(uint64_t **)(v6 - 32);
            v165 = 257;
            v60 = sub_1C4773A70(v66, v67, (uint64_t *)v5, (uint64_t)&v162);
            v165 = 257;
            v61 = (char *)operator new(0x80uLL);
            *((_QWORD *)v61 + 5) = 0;
            v62 = v61 + 40;
            *((_QWORD *)v61 + 6) = 0;
            *((_QWORD *)v61 + 8) = *(_QWORD *)v57;
            v4 = (uint64_t)(v61 + 64);
            *((_QWORD *)v61 + 3) = v61 + 64;
            *((_QWORD *)v61 + 7) = v61 + 64;
            *((_QWORD *)v61 + 9) = 0;
            v63 = 49;
LABEL_62:
            v61[80] = v63;
            v61[81] = 0;
            *((_WORD *)v61 + 41) = 0;
            *((_DWORD *)v61 + 21) = 2;
            *(_OWORD *)(v61 + 88) = 0u;
            *(_OWORD *)(v61 + 104) = 0u;
            *((_DWORD *)v61 + 30) = 0;
            *(_QWORD *)v61 = v57;
            v70 = *((_QWORD *)v57 + 1);
            v69 = v57 + 8;
            v68 = v70;
            *((_QWORD *)v61 + 1) = v70;
            if (v70)
              *(_QWORD *)(v68 + 16) = v61 + 8;
            *((_QWORD *)v61 + 2) = v69;
            *v69 = v61;
            *((_QWORD *)v61 + 4) = v60;
            if (v60)
            {
              v73 = *((_QWORD *)v60 + 1);
              v72 = v60 + 8;
              v71 = v73;
              *v62 = v73;
              if (v73)
                *(_QWORD *)(v71 + 16) = v62;
              *((_QWORD *)v61 + 6) = v72;
              *v72 = v61 + 32;
            }
            llvm::Value::setName((uint64_t ***)v4, (uint64_t)&v162);
            llvm::Instruction::copyIRFlags(v4, v6, 1);
            return v4;
          case '4':
            if (v26 == FPMantissaWidth)
              break;
            v74 = *(_QWORD *)(a1 + 24);
            v75 = *(uint64_t **)(v6 - 64);
            v165 = 257;
            if (v23 >= v25)
            {
              v76 = (uint64_t *)sub_1C4773A70(v74, v75, (uint64_t *)v19, (uint64_t)&v162);
              v77 = *(_QWORD *)(a1 + 24);
              v78 = *(uint64_t **)(v6 - 32);
              v165 = 257;
              v79 = (uint64_t *)v19;
            }
            else
            {
              v76 = (uint64_t *)sub_1C4773A70(v74, v75, (uint64_t *)v21, (uint64_t)&v162);
              v77 = *(_QWORD *)(a1 + 24);
              v78 = *(uint64_t **)(v6 - 32);
              v165 = 257;
              v79 = (uint64_t *)v21;
            }
            v115 = sub_1C4773A70(v77, v78, v79, (uint64_t)&v162);
            v116 = *(_QWORD *)(a1 + 24);
            v165 = 257;
            v117 = (uint64_t *)sub_1C62A81AC(v116, v76, (uint64_t)v115, v6, (uint64_t)&v162);
            v165 = 257;
            llvm::CastInst::CreateFPCast(v117, (uint64_t)v5);
            return v96;
          default:
            break;
        }
      }
    }
  }
  v160 = 0;
  v11 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
  v12 = v11[16];
  if (v11)
  {
    if (v12 >= 0x1C)
    {
      v13 = (_QWORD **)*((_QWORD *)v11 + 1);
      if (v13)
      {
        if (!v13[1])
        {
          v44 = *(_QWORD *)(a1 + 24);
          v45 = *(_DWORD *)(v44 + 96);
          v46 = *(_QWORD *)(v44 + 88);
          v47 = *(_BYTE *)(v44 + 100);
          v48 = *(_BYTE *)(v44 + 101);
          v49 = *(_BYTE *)(v44 + 102);
          if (sub_1C4774A9C(*((_QWORD *)a2 - 4)))
          {
            v50 = v11[17] >> 1;
            if (v50 == 127)
              v50 = -1;
            *(_DWORD *)(*(_QWORD *)(a1 + 24) + 96) = v50;
          }
          v162 = &v160;
          if (sub_1C4E7B6EC((_QWORD **)&v162, (uint64_t)v11))
          {
            v51 = *(_QWORD *)(a1 + 24);
            v165 = 257;
            v52 = (uint64_t *)sub_1C4773A70(v51, v160, (uint64_t *)v5, (uint64_t)&v162);
            v165 = 257;
            v53 = v49;
            v4 = llvm::UnaryOperator::Create(12, v52, (uint64_t)&v162, 0);
            llvm::Instruction::copyIRFlags(v4, (uint64_t)v11, 1);
            *(_DWORD *)(v44 + 96) = v45;
            *(_QWORD *)(v44 + 88) = v46;
            *(_BYTE *)(v44 + 100) = v47;
            *(_BYTE *)(v44 + 101) = v48;
            *(_BYTE *)(v44 + 102) = v53;
            return v4;
          }
          v155 = 0;
          v166 = 0;
          v159 = 0;
          v162 = &v155;
          v163 = (uint64_t)&v166;
          v164[0] = &v159;
          if (sub_1C57E9144((_QWORD **)&v162, (uint64_t)v11) && (llvm::Type *)*v166 == v5)
          {
            v154 = v49;
            v80 = *(_QWORD *)(a1 + 24);
            v165 = 257;
            v81 = sub_1C4773A70(v80, v159, (uint64_t *)v5, (uint64_t)&v162);
            v82 = *(uint64_t **)(a1 + 24);
            v83 = v155;
            v84 = v166;
          }
          else
          {
            v162 = &v155;
            v163 = (uint64_t)&v159;
            v164[0] = &v166;
            if (!sub_1C57E91F4((_QWORD **)&v162, (uint64_t)v11) || (llvm::Type *)*v166 != v5)
            {
              *(_DWORD *)(v44 + 96) = v45;
              *(_QWORD *)(v44 + 88) = v46;
              *(_BYTE *)(v44 + 100) = v47;
              *(_BYTE *)(v44 + 101) = v48;
              *(_BYTE *)(v44 + 102) = v49;
              v11 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
              v12 = v11[16];
              goto LABEL_16;
            }
            v154 = v49;
            v85 = *(_QWORD *)(a1 + 24);
            v165 = 257;
            v84 = (uint64_t *)sub_1C4773A70(v85, v159, (uint64_t *)v5, (uint64_t)&v162);
            v82 = *(uint64_t **)(a1 + 24);
            v83 = v155;
            v81 = (unsigned __int8 *)v166;
          }
          v162 = "narrow.sel";
          v165 = 259;
          Select = llvm::IRBuilderBase::CreateSelect(v82, v83, v84, (uint64_t)v81, (uint64_t)&v162, v11);
          v4 = (uint64_t)sub_1C577F888(a1, a2, Select);
          *(_DWORD *)(v44 + 96) = v45;
          *(_QWORD *)(v44 + 88) = v46;
          *(_BYTE *)(v44 + 100) = v47;
          *(_BYTE *)(v44 + 101) = v48;
          *(_BYTE *)(v44 + 102) = v154;
          return v4;
        }
      }
    }
  }
LABEL_16:
  if (v12 != 84)
    goto LABEL_96;
  v14 = *((_QWORD *)v11 - 4);
  if (!v14
    || *(_BYTE *)(v14 + 16)
    || *(_QWORD *)(v14 + 24) != *((_QWORD *)v11 + 9)
    || (*(_BYTE *)(v14 + 33) & 0x20) == 0)
  {
    goto LABEL_96;
  }
  v15 = 0;
  v16 = *(_DWORD *)(v14 + 36);
  if (v16 <= 257)
  {
    v87 = (v16 - 139) < 2 || v16 == 14;
    if (!v87 && v16 != 203)
      goto LABEL_96;
  }
  else if (v16 > 1829)
  {
    if (v16 != 1830 && v16 != 2131)
    {
      if (v16 != 1851)
        goto LABEL_96;
      v88 = *(_QWORD ***)&v11[-32 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF)];
      if (v88)
      {
        v89 = *((unsigned __int8 *)v88 + 16);
        if (v89 >= 0x1C && v89 != 89)
        {
          if (v89 != 84)
            goto LABEL_96;
          v90 = (uint64_t)*(v88 - 4);
          if (!v90)
            goto LABEL_96;
          if (*(_BYTE *)(v90 + 16))
            goto LABEL_96;
          if (*(_QWORD **)(v90 + 24) != v88[9])
            goto LABEL_96;
          if ((*(_BYTE *)(v90 + 33) & 0x20) == 0)
            goto LABEL_96;
          v91 = *(_DWORD *)(v90 + 36);
          if ((v91 - 1282) >= 0x190 && (v91 - 2824) > 0xB)
            goto LABEL_96;
        }
      }
    }
    v15 = 1;
  }
  else if ((v16 - 258) > 0x26 || ((1 << (v16 - 2)) & 0x4000000007) == 0)
  {
    goto LABEL_96;
  }
  v92 = *(uint64_t **)&v11[-32 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF)];
  v93 = (_QWORD *)v92[1];
  if (v93 && !v93[1])
  {
    v98 = v16 == 139 ? 1 : v15;
    if ((v98 & 1) != 0 || *((_BYTE *)v92 + 16) == 74 && *(llvm::Type **)*(v92 - 4) == v5)
    {
      v99 = *(_QWORD *)(a1 + 24);
      v165 = 257;
      v100 = sub_1C4773A70(v99, v92, (uint64_t *)v5, (uint64_t)&v162);
      Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40), *(_DWORD *)(*((_QWORD *)v11 - 4) + 36), (uint64_t *)&v161, 1);
      v162 = v164;
      v163 = 0x100000000;
      if ((*((_DWORD *)v11 + 5) & 0x80000000) != 0)
      {
        Descriptor = llvm::User::getDescriptor((llvm::User *)v11);
        if ((*((_DWORD *)v11 + 5) & 0x80000000) != 0)
        {
          v138 = llvm::User::getDescriptor((llvm::User *)v11);
          v103 = &v138[v139];
LABEL_110:
          v104 = v103 - Descriptor;
          if ((v104 & 0xFFFFFFFF0) != 0)
          {
            v140 = 0;
            v141 = (v104 >> 4);
            do
            {
              v142 = llvm::User::getDescriptor((llvm::User *)v11);
              v143 = *(unsigned int *)&v142[v140 + 8];
              v144 = (uint64_t)&v11[32 * v143 + -32 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF)];
              v145 = *(_QWORD *)&v142[v140];
              v146 = *(unsigned int *)&v142[v140 + 12] - v143;
              v155 = v144;
              v156 = v146;
              v157 = v145;
              sub_1C623D924((uint64_t)&v162, (uint64_t)&v155);
              v140 += 16;
              --v141;
            }
            while (v141);
          }
          if (Declaration)
            v105 = *(_QWORD *)(Declaration + 24);
          else
            v105 = 0;
          v166 = (uint64_t *)v100;
          v106 = v163;
          if ((v11[23] & 0x10) == 0)
          {
            v120 = 0;
            v119 = &byte_1C871356D;
            goto LABEL_128;
          }
          v107 = ***(_QWORD ***)v11;
          v108 = *(_QWORD *)(v107 + 152);
          v109 = *(unsigned int *)(v107 + 168);
          if ((_DWORD)v109)
          {
            LODWORD(v110) = (v109 - 1) & ((v11 >> 4) ^ (v11 >> 9));
            v111 = (unsigned __int8 **)(v108 + 16 * v110);
            v112 = *v111;
            if (*v111 == v11)
            {
LABEL_127:
              v118 = v111[1];
              v121 = *(_QWORD *)v118;
              v119 = (char *)(v118 + 16);
              v120 = v121;
LABEL_128:
              v122 = (char *)v162;
              v158 = 261;
              v155 = (uint64_t)v119;
              v156 = v120;
              if ((_DWORD)v163)
              {
                v147 = 0;
                v148 = 48 * v163;
                v149 = (char *)v162 + 32;
                do
                {
                  v147 += (*v149 - *(v149 - 1)) >> 3;
                  v149 += 6;
                  v148 -= 48;
                }
                while (v148);
                v123 = v147 + 2;
              }
              else
              {
                v123 = 2;
              }
              v124 = (16 * v163);
              if ((_DWORD)v124)
                v125 = (16 * (_DWORD)v163) | 8u;
              else
                v125 = 0;
              v126 = (char *)operator new(v125 + 32 * v123 + 80);
              v127 = &v126[v125];
              v4 = (uint64_t)&v126[32 * v123 + v125];
              *(_DWORD *)(v4 + 20) = v123 & 0x7FFFFFF | (((_DWORD)v124 != 0) << 31) | *(_DWORD *)(v4 + 20) & 0x38000000;
              if (v123)
              {
                do
                {
                  *(_QWORD *)v127 = 0;
                  *((_QWORD *)v127 + 1) = 0;
                  *((_QWORD *)v127 + 2) = 0;
                  *((_QWORD *)v127 + 3) = v4;
                  v127 += 32;
                }
                while (v127 != (char *)v4);
              }
              if ((_DWORD)v124)
                *(_QWORD *)&v126[v124] = v124;
              if ((_DWORD)v106)
              {
                v150 = 0;
                v151 = 48 * v106;
                v152 = v122 + 32;
                do
                {
                  v150 += (*v152 - *(v152 - 1)) >> 3;
                  v152 += 6;
                  v151 -= 48;
                }
                while (v151);
                v128 = (v150 + 2) & 0x7FFFFFF;
              }
              else
              {
                v128 = 2;
              }
              *(_QWORD *)v4 = **(_QWORD **)(v105 + 16);
              *(_QWORD *)(v4 + 8) = 0;
              v129 = *(_DWORD *)(v4 + 20) & 0xC0000000 | v128;
              *(_DWORD *)(v4 + 16) = 84;
              *(_DWORD *)(v4 + 20) = v129;
              *(_OWORD *)(v4 + 24) = 0u;
              *(_OWORD *)(v4 + 40) = 0u;
              *(_DWORD *)(v4 + 56) = 0;
              *(_QWORD *)(v4 + 64) = 0;
              *(_QWORD *)(v4 + 72) = v105;
              sub_1C5382FD4((uint64_t)&v159, (uint64_t *)&v166, &v167, v4 - 32 * v128);
              v130 = (uint64_t *)(v4 - 32);
              if (*(_QWORD *)(v4 - 32))
              {
                **(_QWORD **)(v4 - 16) = *(_QWORD *)(v4 - 24);
                v153 = *(_QWORD *)(v4 - 24);
                if (v153)
                  *(_QWORD *)(v153 + 16) = *(_QWORD *)(v4 - 16);
              }
              *v130 = Declaration;
              if (Declaration)
              {
                v133 = *(_QWORD *)(Declaration + 8);
                v132 = (uint64_t **)(Declaration + 8);
                v131 = v133;
                *(_QWORD *)(v4 - 24) = v133;
                if (v133)
                  *(_QWORD *)(v131 + 16) = v4 - 24;
                *(_QWORD *)(v4 - 16) = v132;
                *v132 = v130;
              }
              llvm::CallBase::populateBundleOperandInfos(v4, (uint64_t)v122, v106, 1u);
              llvm::Value::setName((uint64_t ***)v4, (uint64_t)&v155);
              *(_BYTE *)(v4 + 17) = v11[17] & 0xFE | *(_BYTE *)(v4 + 17) & 1;
              v134 = (char *)v162;
              if ((_DWORD)v163)
              {
                v135 = 48 * v163;
                do
                {
                  v136 = &v134[v135];
                  v137 = *(void **)&v134[v135 - 24];
                  if (v137)
                  {
                    *((_QWORD *)v136 - 2) = v137;
                    operator delete(v137);
                  }
                  if (*(v136 - 25) < 0)
                    operator delete(*((void **)v136 - 6));
                  v135 -= 48;
                }
                while (v135);
                v134 = (char *)v162;
              }
              if (v134 != (char *)v164)
                free(v134);
              return v4;
            }
            v113 = 1;
            while (v112 != (unsigned __int8 *)-4096)
            {
              v114 = v110 + v113++;
              v110 = v114 & (v109 - 1);
              v112 = *(unsigned __int8 **)(v108 + 16 * v110);
              if (v112 == v11)
              {
                v111 = (unsigned __int8 **)(v108 + 16 * v110);
                goto LABEL_127;
              }
            }
          }
          v111 = (unsigned __int8 **)(v108 + 16 * v109);
          goto LABEL_127;
        }
      }
      else
      {
        Descriptor = 0;
      }
      v103 = 0;
      goto LABEL_110;
    }
  }
LABEL_96:
  v4 = sub_1C57E0C24((unsigned __int8 *)a2, *(uint64_t **)(a1 + 24));
  if (!v4)
  {
    v94 = *((_QWORD *)a2 - 4);
    if (*(unsigned __int8 *)(v94 + 16) - 71 <= 1 && sub_1C57E5164(*((_QWORD *)a2 - 4)))
    {
      v95 = *(unsigned __int8 *)(v94 + 16) - 28;
      v165 = 257;
      llvm::CastInst::Create(v95);
      return v96;
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

double sub_1C57E5024(llvm::detail::DoubleAPFloat *a1)
{
  unsigned int v2;
  double result;
  llvm::Constant *v4;
  uint64_t v5;
  llvm::Type *v7;
  llvm::Type *v8;
  llvm::Type *v9;
  llvm::UndefValue *AggregateElement;
  llvm::Type *v11;
  llvm::Type *v12;
  int FPMantissaWidth;

  v2 = *((unsigned __int8 *)a1 + 16);
  if (!a1 || v2 != 74)
  {
    if (a1 && v2 == 17)
    {
      if (sub_1C57E8208(a1))
        return result;
      v2 = *((unsigned __int8 *)a1 + 16);
    }
    if (!a1 || v2 != 5 || *((_WORD *)a1 + 9) != 46)
    {
      if (v2 >= 0x15)
        v4 = 0;
      else
        v4 = a1;
      v5 = *(_QWORD *)a1;
      if (*(_BYTE *)(*(_QWORD *)a1 + 8) != 18)
        v5 = 0;
      if (v2 <= 0x14 && v5 != 0)
      {
        v7 = (llvm::Type *)*(unsigned int *)(v5 + 32);
        if ((_DWORD)v7)
        {
          v8 = 0;
          v9 = 0;
          while (1)
          {
            AggregateElement = llvm::Constant::getAggregateElement(v4, v8);
            if (!AggregateElement)
              break;
            if (*((_BYTE *)AggregateElement + 16) != 17)
              break;
            v11 = (llvm::Type *)sub_1C57E8208(AggregateElement);
            if (!v11)
              break;
            v12 = v11;
            if (!v9
              || (FPMantissaWidth = llvm::Type::getFPMantissaWidth(v11),
                  FPMantissaWidth > (int)llvm::Type::getFPMantissaWidth(v9)))
            {
              v9 = v12;
            }
            v8 = (llvm::Type *)((_DWORD)v8 + 1);
            if ((_DWORD)v7 == (_DWORD)v8)
              return llvm::FixedVectorType::get(v9, v7);
          }
        }
        else
        {
          v9 = 0;
          return llvm::FixedVectorType::get(v9, v7);
        }
      }
    }
  }
  return result;
}

BOOL sub_1C57E5164(uint64_t a1)
{
  int v2;
  uint64_t v3;
  llvm::Type *v4;
  llvm::Type *v5;
  int v6;
  int FPMantissaWidth;
  int v8;
  int v9;
  _BOOL4 v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  unsigned int v14;
  llvm::Type ***v18;
  llvm::Type ***v19;
  llvm::Type **v20;

  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = *(_QWORD *)(a1 - 32);
  v4 = *(llvm::Type **)v3;
  v5 = *(llvm::Type **)a1;
  if ((*(_DWORD *)(*(_QWORD *)v3 + 8) & 0xFE) == 0x12)
    v4 = (llvm::Type *)**((_QWORD **)v4 + 2);
  v6 = llvm::Type::getPrimitiveSizeInBits(v4) - (v2 == 72);
  FPMantissaWidth = llvm::Type::getFPMantissaWidth(v5);
  if (v6 <= FPMantissaWidth)
    return 1;
  v8 = FPMantissaWidth;
  v19 = &v20;
  v20 = 0;
  if ((sub_1C57E8700(&v19, v3) & 1) == 0)
  {
    v18 = &v20;
    if ((sub_1C57E876C(&v18, v3) & 1) == 0)
      return 0;
  }
  v9 = llvm::Type::getFPMantissaWidth(*v20);
  if (v2 != 72)
  {
    v11 = *(unsigned __int8 *)(v3 + 16);
    v12 = v11 > 0x1B || v11 == 5;
    v13 = v12;
    if (v12)
    {
      if (v11 <= 0x1B)
        v14 = *(unsigned __int16 *)(v3 + 18);
      else
        v14 = v11 - 28;
      v10 = v14 == 42;
    }
    v9 += v13 & v10;
  }
  return v8 > 0 && v9 > 0 && v9 <= v8;
}

llvm::UndefValue **sub_1C57E5278(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  llvm::Value *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  llvm::Type *v11;
  int v12;
  llvm::Type *v14;
  unsigned int PrimitiveSizeInBits;
  unsigned int v16;
  int v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;
  _BYTE v21[32];
  __int16 v22;

  v2 = *((_QWORD *)a2 - 4);
  if (*(unsigned __int8 *)(v2 + 16) - 71 > 1)
    return 0;
  v5 = *(llvm::Value **)(v2 - 32);
  v6 = *(_QWORD *)v5;
  v7 = *(_QWORD *)a2;
  v8 = a2[16];
  v9 = sub_1C57E5164(*((_QWORD *)a2 - 4));
  v10 = *(_DWORD *)(v7 + 8);
  if (!v9)
  {
    v11 = (llvm::Type *)v7;
    if ((*(_DWORD *)(v7 + 8) & 0xFE) == 0x12)
      v11 = **(llvm::Type ***)(v7 + 16);
    v12 = llvm::Type::getPrimitiveSizeInBits(v11) - (v8 == 70);
    if (v12 > (int)llvm::Type::getFPMantissaWidth(*(llvm::Type **)v2))
      return 0;
  }
  v14 = (llvm::Type *)v7;
  if ((v10 & 0xFE) == 0x12)
    v14 = **(llvm::Type ***)(v7 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v14);
  if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
    v6 = **(_QWORD **)(v6 + 16);
  v16 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v6);
  if (PrimitiveSizeInBits <= v16)
  {
    if (PrimitiveSizeInBits >= v16)
    {
      return sub_1C577F888(a1, (llvm::ValueAsMetadata *)a2, v5);
    }
    else
    {
      v20 = operator new(0x60uLL);
      v20[13] = v20[13] & 0x38000000 | 1;
      *(_QWORD *)v20 = 0;
      *((_QWORD *)v20 + 1) = 0;
      *((_QWORD *)v20 + 2) = 0;
      *((_QWORD *)v20 + 3) = v20 + 8;
      v22 = 257;
      return (llvm::UndefValue **)llvm::TruncInst::TruncInst((uint64_t)(v20 + 8), (uint64_t)v5, v7, (uint64_t)v21, 0);
    }
  }
  else
  {
    v17 = *(unsigned __int8 *)(v2 + 16);
    v18 = operator new(0x60uLL);
    v18[13] = v18[13] & 0x38000000 | 1;
    v19 = (uint64_t)(v18 + 8);
    *(_QWORD *)v18 = 0;
    *((_QWORD *)v18 + 1) = 0;
    *((_QWORD *)v18 + 2) = 0;
    *((_QWORD *)v18 + 3) = v18 + 8;
    if (v17 == 72 && v8 == 70)
    {
      v22 = 257;
      return (llvm::UndefValue **)llvm::SExtInst::SExtInst(v19, (uint64_t)v5, v7, (uint64_t)v21, 0);
    }
    else
    {
      v22 = 257;
      return (llvm::UndefValue **)llvm::ZExtInst::ZExtInst(v19, (uint64_t)v5, v7, (uint64_t)v21, 0);
    }
  }
}

llvm::UndefValue **sub_1C57E5478(uint64_t a1, unsigned __int8 *a2)
{
  llvm::UndefValue **result;

  result = sub_1C57E5278(a1, a2);
  if (!result)
    return sub_1C57DD374(a1, (llvm::Instruction *)a2);
  return result;
}

llvm::UndefValue **sub_1C57E54B4(uint64_t a1, llvm::Instruction *a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  llvm::Type *v8;
  int PrimitiveSizeInBits;
  llvm::DataLayout *v10;
  uint64_t **IntPtrType;
  uint64_t v13;
  llvm::Type *v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  _DWORD *v19;
  uint64_t v20;
  _BYTE v21[32];
  __int16 v22;

  v4 = *(_QWORD *)a2;
  v5 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  if ((v5 & 0xFE) == 0x12)
    v5 = *(_DWORD *)(**(_QWORD **)(v4 + 16) + 8);
  v6 = v5 >> 8;
  v7 = **((_QWORD **)a2 - 4);
  v8 = (llvm::Type *)v7;
  if ((*(_DWORD *)(v7 + 8) & 0xFE) == 0x12)
    v8 = **(llvm::Type ***)(v7 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v8);
  v10 = *(llvm::DataLayout **)(a1 + 80);
  if (*(_DWORD *)(llvm::DataLayout::getPointerAlignElem(v10, v6) + 4) == PrimitiveSizeInBits)
    return sub_1C57DD374(a1, a2);
  IntPtrType = (uint64_t **)llvm::DataLayout::getIntPtrType(v10, *(llvm::LLVMContext **)v4, v6);
  v13 = (uint64_t)IntPtrType;
  if ((*(_DWORD *)(v7 + 8) & 0xFE) == 0x12)
  {
    v14 = (llvm::Type *)*(unsigned int *)(v7 + 32);
    if (*(_DWORD *)(v7 + 8) == 19)
      llvm::ScalableVectorType::get(IntPtrType, v14);
    else
      llvm::FixedVectorType::get((llvm::FixedVectorType *)IntPtrType, v14);
    v13 = v15;
  }
  v16 = *(uint64_t **)(a1 + 24);
  v17 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
  v22 = 257;
  v18 = sub_1C4773690(v16, v17, v13, (uint64_t)v21);
  v19 = operator new(0x60uLL);
  v19[13] = v19[13] & 0x38000000 | 1;
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  *((_QWORD *)v19 + 2) = 0;
  *((_QWORD *)v19 + 3) = v19 + 8;
  v20 = *(_QWORD *)a2;
  v22 = 257;
  return (llvm::UndefValue **)llvm::IntToPtrInst::IntToPtrInst((uint64_t)(v19 + 8), (uint64_t)v18, v20, (uint64_t)v21, 0);
}

llvm::UndefValue **sub_1C57E562C(uint64_t a1, llvm::Instruction *this)
{
  uint64_t v4;
  _QWORD *v5;

  v4 = *((_QWORD *)this - 4);
  if (!v4
    || *(_BYTE *)(v4 + 16) != 62
    || !llvm::GetElementPtrInst::hasAllZeroIndices(*((llvm::GetElementPtrInst **)this - 4)))
  {
    return sub_1C57DD374(a1, this);
  }
  if (*((_BYTE *)this + 16) == 78)
  {
    v5 = *(_QWORD **)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF));
    if (*(_QWORD *)v4 != *v5)
      return sub_1C57DD374(a1, this);
  }
  else
  {
    v5 = *(_QWORD **)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF));
  }
  return (llvm::UndefValue **)sub_1C577E2C8(a1, (uint64_t)this, 0, (uint64_t)v5);
}

void sub_1C57E56D4(uint64_t a1, llvm::ValueAsMetadata *a2)
{
  llvm::GEPOperator *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  llvm::Type *v9;
  int PrimitiveSizeInBits;
  llvm::DataLayout *v11;
  uint64_t v12;
  uint64_t **IntPtrType;
  uint64_t v14;
  llvm::Type *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  unsigned __int8 *v20;
  _QWORD *v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unsigned __int8 *v31;
  _QWORD *v32;
  _QWORD *v33[4];
  __int16 v34;

  v4 = (llvm::GEPOperator *)*((_QWORD *)a2 - 4);
  v5 = *(_QWORD *)v4;
  v6 = *(_QWORD *)a2;
  v7 = *(_DWORD *)(*(_QWORD *)v4 + 8);
  if ((v7 & 0xFE) == 0x12)
    v7 = *(_DWORD *)(**(_QWORD **)(v5 + 16) + 8);
  v8 = v7 >> 8;
  v9 = *(llvm::Type **)a2;
  if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
    v9 = **(llvm::Type ***)(v6 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v9);
  v11 = *(llvm::DataLayout **)(a1 + 80);
  if (*(_DWORD *)(llvm::DataLayout::getPointerAlignElem(v11, v8) + 4) == PrimitiveSizeInBits)
  {
    v12 = *((_QWORD *)v4 + 1);
    if (*((_BYTE *)v4 + 16) == 62
      && v12
      && !*(_QWORD *)(v12 + 8)
      && *(_BYTE *)(*((_QWORD *)v4 - 4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF)) + 16) == 19)
    {
      v27 = *(uint64_t **)(a1 + 24);
      v28 = (unsigned __int8 *)sub_1C61A3B04((uint64_t)v27, v11, v4, 0);
      v34 = 257;
      v29 = sub_1C4D8D514(v27, v28, v6, 0, (uint64_t)v33);
      sub_1C577F888(a1, a2, (llvm::Value *)v29);
    }
    else
    {
      v31 = 0;
      v32 = 0;
      v30 = 0;
      v33[0] = &v32;
      v33[1] = &v31;
      v33[2] = &v30;
      if (v12 && !*(_QWORD *)(v12 + 8) && sub_1C57E927C(v33, (uint64_t)v4) && *v32 == v6)
      {
        v19 = *(uint64_t **)(a1 + 24);
        if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
          v6 = **(_QWORD **)(v6 + 16);
        v34 = 257;
        v20 = sub_1C4773E38(v19, 47, v31, v6, (uint64_t)v33);
        v21 = v32;
        v22 = v30;
        v34 = 257;
        v23 = operator new(0xA0uLL);
        v24 = 0;
        v25 = (uint64_t)(v23 + 24);
        v23[29] = v23[29] & 0x38000000 | 3;
        do
        {
          v26 = &v23[v24];
          *v26 = 0;
          v26[1] = 0;
          v26[2] = 0;
          v26[3] = v25;
          v24 += 8;
        }
        while (v24 != 24);
        llvm::InsertElementInst::InsertElementInst(v25, v21, (uint64_t)v20, v22, (uint64_t)v33, 0);
      }
      else
      {
        sub_1C57E562C(a1, a2);
      }
    }
  }
  else
  {
    IntPtrType = (uint64_t **)llvm::DataLayout::getIntPtrType(v11, *(llvm::LLVMContext **)v6, v8);
    v14 = (uint64_t)IntPtrType;
    if ((*(_DWORD *)(v5 + 8) & 0xFE) == 0x12)
    {
      v15 = (llvm::Type *)*(unsigned int *)(v5 + 32);
      if (*(_DWORD *)(v5 + 8) == 19)
        llvm::ScalableVectorType::get(IntPtrType, v15);
      else
        llvm::FixedVectorType::get((llvm::FixedVectorType *)IntPtrType, v15);
      v14 = v16;
    }
    v17 = *(uint64_t **)(a1 + 24);
    v34 = 257;
    v18 = (uint64_t *)sub_1C4773E38(v17, 47, (unsigned __int8 *)v4, v14, (uint64_t)v33);
    v34 = 257;
    llvm::CastInst::CreateIntegerCast(v18, v6, 0);
  }
}

uint64_t sub_1C57E597C(uint64_t a1, uint64_t *a2)
{
  int v4;
  int v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v11;

  v11 = 0;
  v4 = sub_1C57E9398(a1, *a2, &v11);
  if ((v4 & 1) != 0)
    return v4 ^ 1u;
  v5 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v6 = 4;
  else
    v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_13;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 4) <= v6 >> 3)
  {
LABEL_13:
    sub_1C57E9444(a1, v6);
    v11 = 0;
    sub_1C57E9398(a1, *a2, &v11);
  }
  v7 = v11;
  *(_DWORD *)a1 += 2;
  if (*v7 != -4096)
    --*(_DWORD *)(a1 + 4);
  *v7 = *a2;
  v8 = *a2;
  v9 = *(unsigned int *)(a1 + 48);
  if (v9 >= *(_DWORD *)(a1 + 52))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 40, a1 + 56, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a1 + 48);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v9) = v8;
  ++*(_DWORD *)(a1 + 48);
  return v4 ^ 1u;
}

llvm::UndefValue **sub_1C57E5AA4(uint64_t a1, llvm::Instruction *this, const llvm::APInt *a3)
{
  llvm::Instruction *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL4 v40;
  BOOL v42;
  unsigned int *v44;
  void *v45;
  uint64_t v46;
  llvm::DataLayout *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  int v52;
  uint64_t *v53;
  BOOL v54;
  unint64_t v55;
  uint64_t v56;
  llvm::ConstantInt *v57;
  llvm::ValueHandleBase *v58;
  llvm::GetElementPtrInst *TypeAtIndex;
  llvm::Value *v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  _QWORD *v64;
  llvm::Value *v65;
  uint64_t v66;
  int v67;
  llvm::Type **v68;
  uint64_t v69;
  llvm::Type *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t **v73;
  uint64_t ***v74;
  uint64_t v75;
  char *v76;
  void *v77;
  int isSizedDerivedType;
  int v80;
  BOOL v81;
  llvm::Type *v82;
  _DWORD *v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 *v89;
  uint64_t v90;
  llvm::Type *v91;
  llvm::Type *v92;
  unint64_t PrimitiveSizeInBits;
  int v94;
  int v95;
  int v96;
  llvm::Constant *v98;
  unsigned __int8 *v99;
  unint64_t v100;
  int v101;
  llvm::Value *v102;
  const llvm::APInt *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  llvm::ConstantInt *v109;
  unint64_t v110;
  unint64_t v111;
  llvm::ValueHandleBase *v112;
  uint64_t *v113;
  uint64_t v114;
  unsigned __int8 *v115;
  llvm::Type *v116;
  _QWORD *v117;
  llvm::Type *v118;
  llvm::Value **NullValue;
  _DWORD *v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  llvm::Type *v124;
  unsigned int v125;
  uint64_t v126;
  unsigned int v127;
  int v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t *v131;
  llvm::Value **v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  int v139;
  int v140;
  llvm::Type *v141;
  unsigned int v142;
  void *v143;
  char *v144;
  unsigned int v145;
  unint64_t v146;
  BOOL v147;
  uint64_t v148;
  unint64_t v149;
  int *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  llvm::Value **v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  _DWORD *v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  unsigned __int8 *v162;
  uint64_t v163;
  _QWORD *v164;
  llvm::Value **v165;
  uint64_t v166;
  llvm::Value **v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  llvm::Value **v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  llvm::Value *v176;
  _QWORD *v177;
  llvm::Value *v178;
  uint64_t v179;
  llvm::Type *v180;
  unsigned __int8 **v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  unsigned __int8 *v185;
  int v186;
  unsigned __int8 *v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  llvm::Type *v191;
  int v192;
  uint64_t v195;
  unsigned __int8 *v196;
  uint64_t v197;
  llvm::Instruction *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int v202;
  char *v203;
  size_t v204;
  char *v205;
  char *v206;
  llvm::Type *v207;
  int v208;
  uint64_t Declaration;
  uint64_t *v210;
  unsigned __int8 *v211;
  uint64_t v212;
  uint64_t **v213;
  unsigned int v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  unsigned int v221;
  llvm::Instruction *v222;
  uint64_t v223;
  llvm::Instruction *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t **v228;
  llvm::DataLayout *v229;
  BOOL v230;
  uint64_t *v231;
  uint64_t v232;
  int64x2_t *v233;
  int v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  uint64_t v241;
  uint64_t *v242;
  uint64_t v243;
  int v244;
  int v245;
  int64x2_t *v246;
  uint64_t v247;
  uint64_t i;
  llvm::Instruction *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unsigned __int8 *v254;
  unsigned __int8 *v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  unsigned int v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t v263;
  int v264;
  int v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  unsigned int *v271;
  uint64_t **v272;
  unsigned int v273;
  int v274;
  uint64_t v276;
  llvm::Type *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t *v280;
  unsigned __int8 *v281;
  unsigned __int8 *v282;
  uint64_t v283;
  _DWORD *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unsigned __int8 *v289;
  unsigned __int8 *v290;
  unsigned __int8 *v291;
  unsigned __int8 *v292;
  char v293;
  char *v294;
  _QWORD *v295;
  uint64_t v296;
  _QWORD *v297;
  uint64_t v298;
  uint64_t v299;
  _QWORD *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  llvm::Instruction *v305;
  uint64_t v306;
  uint64_t *v307;
  unsigned __int8 *v308;
  unsigned __int8 *v309;
  uint64_t *v310;
  uint64_t v311;
  uint64_t *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  llvm::PHINode *v316;
  uint64_t v317;
  uint64_t v318;
  int v319;
  uint64_t v320;
  llvm::UndefValue *v321;
  unsigned int v322;
  BOOL v323;
  uint64_t v324;
  unsigned __int8 *v325;
  unsigned __int8 *v326;
  llvm::Value *v327;
  llvm::Type *v328;
  llvm::Value *v329;
  unsigned __int8 *v330;
  int v331;
  uint64_t v332;
  uint64_t *v333;
  uint64_t v334;
  uint64_t *v335;
  uint64_t v336;
  unsigned __int8 *v337;
  uint64_t v338;
  int v339;
  uint64_t v340;
  unsigned __int8 *v341;
  unsigned __int8 *v342;
  uint64_t *v343;
  unsigned __int8 *v344;
  unsigned __int8 **v345;
  uint64_t v346;
  unsigned __int8 ***v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  int v351;
  int v352;
  uint64_t v353;
  int v354;
  unsigned int v355;
  _QWORD *v356;
  uint64_t v357;
  _QWORD *v358;
  int v359;
  BOOL v360;
  unsigned int v361;
  llvm::UndefValue **v362;
  _QWORD *v363;
  _QWORD *v364;
  unint64_t v365;
  uint64_t *v366;
  unsigned __int8 *v367;
  uint64_t *v368;
  unsigned __int8 *v369;
  _DWORD *v370;
  void *v371;
  uint64_t v372;
  char *v373;
  uint64_t *v374;
  uint64_t v375;
  uint64_t **v376;
  uint64_t v377;
  unsigned __int8 *v378;
  unsigned __int8 *v379;
  unsigned __int8 *v380;
  char v381;
  unsigned __int8 *v382;
  char *v383;
  _QWORD *v384;
  uint64_t v385;
  _QWORD *v386;
  uint64_t v387;
  uint64_t v388;
  _QWORD *v389;
  uint64_t v390;
  llvm::Type *v391;
  int v392;
  uint64_t v393;
  unsigned int *v394;
  const llvm::APInt *v395;
  llvm::Value **v396;
  _QWORD *v397;
  uint64_t *v398;
  unsigned __int8 *v399;
  char *v400;
  _QWORD *v401;
  uint64_t v402;
  _QWORD *v403;
  uint64_t v404;
  uint64_t v405;
  _QWORD *v406;
  uint64_t v407;
  char *v408;
  _QWORD *v409;
  _QWORD *v410;
  uint64_t v411;
  uint64_t v412;
  unint64_t v413;
  char *v414;
  uint64_t v415;
  uint64_t *v416;
  uint64_t *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  llvm::DataLayout *v422;
  llvm::DataLayout *v423;
  llvm::DataLayout *v424;
  llvm::Constant **v425;
  unsigned __int8 *v426;
  llvm::DataLayout *v427;
  llvm::Type *v428;
  unsigned __int8 *v429;
  int v430;
  __int16 v431;
  uint64_t v432;
  uint64_t v433;
  BOOL v434[8];
  uint64_t v435[3];
  __int16 v436;
  void *v437;
  int64x2_t v438;
  int64x2_t v439;
  void *v440;
  uint64_t v441;
  _BYTE v442[32];
  BOOL v443[8];
  __int128 v444;
  unsigned __int8 *v445[5];

  v3 = this;
  v4 = a1;
  v445[3] = *(unsigned __int8 **)MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)this - 4);
  v6 = *(_QWORD *)v5;
  v7 = *(_QWORD *)this;
  v428 = (llvm::Type *)v7;
  if (v7 == v6)
    return sub_1C577F888(a1, this, (llvm::Value *)v5);
  if (*(_BYTE *)(v6 + 8) != 15 || *(_BYTE *)(v7 + 8) != 15)
    goto LABEL_106;
  v8 = v7;
  v9 = v6;
  v10 = (uint64_t *)v5;
  if (*(_BYTE *)(v5 + 16) == 59)
  {
    v8 = v7;
    v9 = v6;
    v10 = (uint64_t *)v5;
    if (*(_QWORD *)(v7 + 24))
    {
      *(_QWORD *)v443 = *(_QWORD *)(a1 + 24);
      v444 = *(_OWORD *)(*(_QWORD *)v443 + 48);
      llvm::IRBuilderBase::getCurrentDebugLocation(*(unsigned int **)v443, v445);
      v11 = *(_QWORD *)(v4 + 24);
      *(_QWORD *)(v11 + 48) = *(_QWORD *)(v5 + 40);
      *(_QWORD *)(v11 + 56) = v5 + 24;
      v12 = *(void **)(v5 + 48);
      v437 = v12;
      if (v12)
      {
        llvm::MetadataTracking::track((uint64_t)&v437, (unsigned __int8 *)v12, 2);
        v13 = v437;
      }
      else
      {
        v13 = 0;
      }
      v14 = v6;
      sub_1C4774EF4(v11, 0, (uint64_t)v13);
      if (v437)
        llvm::MetadataTracking::untrack((uint64_t)&v437, (unsigned __int8 *)v437);
      v15 = *(_QWORD *)(v5 + 64);
      v16 = **(unsigned __int8 ***)(v7 + 16);
      v17 = *(unsigned __int8 *)(v15 + 8);
      if (v17 > 0x11)
        goto LABEL_30;
      if (((1 << v17) & 0xAC7F) != 0)
      {
LABEL_12:
        v18 = v16[8];
        if (v18 > 0x11)
          goto LABEL_35;
        if (((1 << v18) & 0xAC7F) != 0)
          goto LABEL_14;
        if (((1 << v18) & 0x30000) == 0)
        {
LABEL_35:
          if ((v18 & 0xFE) != 0x12 && v18 != 21)
            goto LABEL_45;
        }
        v32 = 0;
        if (!llvm::Type::isSizedDerivedType((uint64_t)v16, 0))
          goto LABEL_46;
        v18 = v16[8];
LABEL_14:
        if ((v18 == 19) == (*(_BYTE *)(v15 + 8) == 19))
        {
          llvm::DataLayout::getAlignment(*(_QWORD *)(v4 + 80), v15);
          v20 = v19;
          llvm::DataLayout::getAlignment(*(_QWORD *)(v4 + 80), (uint64_t)v16);
          if (v21 >= v20 && ((v22 = *(_QWORD *)(v5 + 8)) != 0 && !*(_QWORD *)(v22 + 8) || v21 != v20))
          {
            v422 = v3;
            v23 = *(_QWORD *)(v4 + 80);
            sub_1C4768AD0(v23, v15);
            v25 = (unint64_t)(v24 + 7) >> 3;
            llvm::DataLayout::getAlignment(v23, v15);
            LOBYTE(v23) = v26;
            v415 = 1 << v26;
            v418 = v4;
            v27 = (1 << v26) + v25 - 1;
            v28 = *(_QWORD *)(v418 + 80);
            sub_1C4768AD0(v28, (uint64_t)v16);
            v30 = v29;
            llvm::DataLayout::getAlignment(v28, (uint64_t)v16);
            v413 = v27;
            if (v27 >> v23)
            {
              v32 = 0;
              v33 = (unint64_t)(v30 + 7) >> 3;
              v34 = 1 << v31;
              v35 = (1 << v31) + v33 - 1;
              v4 = v418;
              if (v35 >> v31)
              {
                sub_1C4768AD0(*(_QWORD *)(v418 + 80), v15);
                v37 = v36;
                sub_1C4768AD0(*(_QWORD *)(v418 + 80), (uint64_t)v16);
                v39 = *(_QWORD *)(v5 + 8);
                if (v39)
                  v40 = *(_QWORD *)(v39 + 8) != 0;
                else
                  v40 = 1;
                if (!v40 || (unint64_t)(v38 + 7) >> 3 >= (unint64_t)(v37 + 7) >> 3)
                {
                  v152 = v35 & -v34;
                  v153 = v413 & -v415;
                  LODWORD(v433) = 0;
                  v429 = 0;
                  v154 = sub_1C57DCC74(*(llvm::Value ***)(v5 - 32), &v433, &v429);
                  v32 = 0;
                  v155 = v153 * v433;
                  if (!(v155 % v152))
                  {
                    v156 = (_QWORD)v429 * v153;
                    if (v156 % v152)
                    {
                      v32 = 0;
                    }
                    else
                    {
                      v164 = v154;
                      if ((v155 / v152) != 1)
                      {
                        v165 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)(v5 - 32), (v155 / v152), 0);
                        v166 = *(_QWORD *)(v418 + 24);
                        v439.i16[4] = 257;
                        v164 = (_QWORD *)sub_1C4EC4040(v166, (uint64_t)v165, (uint64_t)v164, (uint64_t)&v437, 0, 0);
                      }
                      if (v152 <= v156)
                      {
                        v167 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)(v5 - 32), v156 / v152, (const llvm::APInt *)1);
                        v168 = *(_QWORD *)(v418 + 24);
                        v436 = 257;
                        v169 = (*(uint64_t (**)(_QWORD, _QWORD *, llvm::Value **, _QWORD, _QWORD))(**(_QWORD **)(v168 + 72) + 16))(*(_QWORD *)(v168 + 72), v164, v167, 0, 0);
                        if (!v169)
                        {
                          v439.i16[4] = 257;
                          v170 = (char *)operator new(0x80uLL);
                          *((_QWORD *)v170 + 5) = 0;
                          v171 = (llvm::Value **)(v170 + 40);
                          *((_QWORD *)v170 + 6) = 0;
                          *((_QWORD *)v170 + 8) = *v164;
                          v172 = (uint64_t)(v170 + 64);
                          *((_QWORD *)v170 + 3) = v170 + 64;
                          *((_QWORD *)v170 + 7) = v170 + 64;
                          *((_QWORD *)v170 + 9) = 0;
                          v170[80] = 41;
                          v170[81] = 0;
                          *((_WORD *)v170 + 41) = 0;
                          *((_DWORD *)v170 + 21) = 2;
                          *(_OWORD *)(v170 + 88) = 0u;
                          *(_OWORD *)(v170 + 104) = 0u;
                          *((_DWORD *)v170 + 30) = 0;
                          *(_QWORD *)v170 = v164;
                          v175 = v164[1];
                          v174 = v164 + 1;
                          v173 = v175;
                          *((_QWORD *)v170 + 1) = v175;
                          if (v175)
                            *(_QWORD *)(v173 + 16) = v170 + 8;
                          *((_QWORD *)v170 + 2) = v174;
                          *v174 = v170;
                          *((_QWORD *)v170 + 4) = v167;
                          if (v167)
                          {
                            v178 = v167[1];
                            v177 = v167 + 1;
                            v176 = v178;
                            *v171 = v178;
                            if (v178)
                              *((_QWORD *)v176 + 2) = v171;
                            *((_QWORD *)v170 + 6) = v177;
                            *v177 = v170 + 32;
                          }
                          llvm::Value::setName((uint64_t ***)v170 + 8, (uint64_t)&v437);
                          v169 = sub_1C4773754((uint64_t *)v168, v172, (uint64_t)v434);
                        }
                        v164 = (_QWORD *)v169;
                      }
                      v179 = *(_QWORD *)(v418 + 24);
                      v180 = (llvm::Type *)(*(_DWORD *)(*(_QWORD *)v5 + 8) >> 8);
                      v439.i16[4] = 257;
                      v181 = sub_1C627CF40(v179, (llvm::PointerType *)v16, v180, (llvm::ValueHandleBase *)v164, (uint64_t)&v437);
                      *((_WORD *)v181 + 9) = *((_WORD *)v181 + 9) & 0xFFC0 | __clz(1 << *(_WORD *)(v5 + 18)) ^ 0x3F;
                      llvm::Value::takeName((llvm::Value *)v181, (llvm::Value *)v5);
                      *((_WORD *)v181 + 9) = *((_WORD *)v181 + 9) & 0xFFBF | *(_WORD *)(v5 + 18) & 0x40;
                      v182 = *(_QWORD *)(v5 + 8);
                      if (!v182 || *(_QWORD *)(v182 + 8))
                      {
                        v183 = *(uint64_t **)(v418 + 24);
                        v184 = *(_QWORD *)v5;
                        v437 = "tmpcast";
                        v439.i16[4] = 259;
                        v185 = sub_1C4773E38(v183, 49, (unsigned __int8 *)v181, v184, (uint64_t)&v437);
                        sub_1C577F888(v418, (llvm::ValueAsMetadata *)v5, (llvm::Value *)v185);
                        sub_1C57813F4(v418, v5);
                      }
                      v3 = v422;
                      v32 = sub_1C577F888(v418, v422, (llvm::Value *)v181);
                    }
                  }
                  v4 = v418;
                  goto LABEL_46;
                }
                goto LABEL_45;
              }
            }
            else
            {
              v32 = 0;
              v4 = v418;
            }
LABEL_46:
            v44 = *(unsigned int **)v443;
            if ((_QWORD)v444)
            {
              sub_1C4D8AE2C(*(uint64_t *)v443, v444, *((uint64_t *)&v444 + 1));
              v44 = *(unsigned int **)v443;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)v443 + 48) = 0;
              *((_QWORD *)v44 + 7) = 0;
            }
            v437 = v445[0];
            if (v445[0])
            {
              llvm::MetadataTracking::track((uint64_t)&v437, v445[0], 2);
              v45 = v437;
            }
            else
            {
              v45 = 0;
            }
            sub_1C4774EF4((uint64_t)v44, 0, (uint64_t)v45);
            if (v437)
              llvm::MetadataTracking::untrack((uint64_t)&v437, (unsigned __int8 *)v437);
            this = (llvm::Instruction *)v445[0];
            v6 = v14;
            if (v445[0])
              llvm::MetadataTracking::untrack((uint64_t)v445, v445[0]);
            if (v32)
              return (llvm::UndefValue **)v32;
            v10 = (uint64_t *)*((_QWORD *)v3 - 4);
            v9 = *v10;
            v8 = *(_QWORD *)v3;
            goto LABEL_57;
          }
        }
LABEL_45:
        v32 = 0;
        goto LABEL_46;
      }
      if (((1 << v17) & 0x30000) == 0)
      {
LABEL_30:
        v42 = (v17 & 0xFE) == 0x12 || v17 == 21;
        if (!v42)
          goto LABEL_45;
      }
      v32 = 0;
      if (!llvm::Type::isSizedDerivedType(*(_QWORD *)(v5 + 64), 0))
        goto LABEL_46;
      goto LABEL_12;
    }
  }
LABEL_57:
  if (!*(_QWORD *)(v9 + 24) || !*(_QWORD *)(v8 + 24))
    goto LABEL_106;
  v46 = *(_QWORD *)(v4 + 24);
  v47 = *(llvm::DataLayout **)(v4 + 80);
  v48 = **(_QWORD **)(v8 + 16);
  v49 = **(_QWORD **)(v9 + 16);
  v50 = *(unsigned __int8 *)(v49 + 8);
  if (v50 > 0x11)
  {
LABEL_102:
    if ((v50 & 0xFE) != 0x12 && v50 != 21)
      goto LABEL_106;
LABEL_100:
    v424 = *(llvm::DataLayout **)(v4 + 80);
    isSizedDerivedType = llvm::Type::isSizedDerivedType(**(_QWORD **)(v9 + 16), 0);
    v47 = v424;
    if (!isSizedDerivedType)
      goto LABEL_106;
    goto LABEL_61;
  }
  if (((1 << v50) & 0xAC7F) == 0)
  {
    if (((1 << v50) & 0x30000) != 0)
      goto LABEL_100;
    goto LABEL_102;
  }
LABEL_61:
  if (v49 == v48)
  {
    v51 = 0;
    goto LABEL_78;
  }
  v51 = 1;
  while (1)
  {
    v52 = *(_DWORD *)(v49 + 8);
    if (v52 == 17)
      goto LABEL_68;
    if (v52 != 16)
      break;
    if (!*(_DWORD *)(v49 + 12))
      goto LABEL_76;
    v53 = *(uint64_t **)(v49 + 16);
LABEL_69:
    v49 = *v53;
    ++v51;
    if (*v53)
      v54 = v49 == v48;
    else
      v54 = 1;
    if (v54)
    {
      --v51;
      goto LABEL_77;
    }
  }
  if ((v52 & 0xFE) == 0x12)
  {
LABEL_68:
    v53 = (uint64_t *)(v49 + 24);
    goto LABEL_69;
  }
LABEL_76:
  v49 = 0;
LABEL_77:
  if (v49 == v48)
  {
LABEL_78:
    v55 = (v51 + 1);
    v56 = **(_QWORD **)(v46 + 64);
    v57 = *(llvm::ConstantInt **)(v56 + 1960);
    v438.i32[0] = *(_DWORD *)(v56 + 1968) >> 8;
    v423 = v47;
    if (v438.i32[0] > 0x40u)
      llvm::APInt::initSlowCase((llvm::APInt *)&v437, 0, 0);
    else
      v437 = 0;
    v58 = llvm::ConstantInt::get(v57, (llvm::LLVMContext *)&v437, a3);
    if (v438.i32[0] >= 0x41u && v437)
      MEMORY[0x1CAA32F9C](v437, 0x1000C8000313F17);
    v437 = &v438.u64[1];
    v438.i64[0] = 0x800000000;
    sub_1C4848C0C((unsigned int *)&v437, v55, (uint64_t)v58);
    TypeAtIndex = **(llvm::GetElementPtrInst ***)(v9 + 16);
    v60 = (llvm::Value *)v437;
    v61 = v438.u32[0];
    v62 = (v438.i32[0] + 1);
    v63 = v438.i32[0] == -1;
    v436 = 257;
    v64 = operator new(32 * v62 + 80);
    v32 = &v64[4 * v62];
    *((_DWORD *)v32 + 5) = *((_DWORD *)v32 + 5) & 0x38000000 | v62 & 0x7FFFFFF;
    if (!v63)
    {
      do
      {
        *v64 = 0;
        v64[1] = 0;
        v64[2] = 0;
        v64[3] = v32;
        v64 += 4;
      }
      while (v64 != v32);
    }
    sub_1C4774650(TypeAtIndex, v10, v60, v61);
    *v32 = v66;
    v32[1] = 0;
    v67 = *((_DWORD *)v32 + 5) & 0xC0000000 | v62 & 0x7FFFFFF;
    *((_DWORD *)v32 + 4) = 62;
    *((_DWORD *)v32 + 5) = v67;
    *(_OWORD *)(v32 + 3) = 0u;
    *(_OWORD *)(v32 + 5) = 0u;
    *((_DWORD *)v32 + 14) = 0;
    v32[8] = TypeAtIndex;
    if ((_DWORD)v61)
    {
      v68 = (llvm::Type **)((char *)v60 + 8);
      v69 = 8 * v61 - 8;
      do
      {
        if (!v69)
          break;
        v70 = *v68++;
        TypeAtIndex = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(TypeAtIndex, v70, v65);
        v69 -= 8;
      }
      while (TypeAtIndex);
      v71 = *((_DWORD *)v32 + 5) & 0x7FFFFFF;
    }
    else
    {
      v71 = 1;
    }
    v32[9] = TypeAtIndex;
    v72 = -v71;
    v73 = (uint64_t **)&v32[-4 * v71];
    if (*v73)
    {
      v408 = (char *)&v32[4 * v72];
      v410 = (_QWORD *)*((_QWORD *)v408 + 2);
      v409 = v408 + 16;
      *v410 = *(v409 - 1);
      v411 = *(v409 - 1);
      if (v411)
        *(_QWORD *)(v411 + 16) = *v409;
    }
    *v73 = v10;
    if (v10)
    {
      v74 = (uint64_t ***)(v10 + 1);
      v75 = v10[1];
      v76 = (char *)&v32[4 * v72];
      *((_QWORD *)v76 + 1) = v75;
      if (v75)
        *(_QWORD *)(v75 + 16) = v76 + 8;
      *((_QWORD *)v76 + 2) = v74;
      *v74 = v73;
    }
    sub_1C5382FD4((uint64_t)v443, (uint64_t *)v60, (uint64_t *)v60 + v61, (uint64_t)&v32[-4 * (*((_DWORD *)v32 + 5) & 0x7FFFFFF) + 4]);
    llvm::Value::setName((uint64_t ***)v32, (uint64_t)v434);
    v434[0] = 0;
    v443[0] = 0;
    if (llvm::Value::getPointerDereferenceableBytes((uint64_t ***)v10, v423, v434, v443)
      && (*(_DWORD *)(v9 + 8) < 0x100u || !v434[0]))
    {
      *((_BYTE *)v32 + 17) |= 2u;
    }
    v77 = v437;
    if (v437 != &v438.u64[1])
      goto LABEL_98;
    return (llvm::UndefValue **)v32;
  }
LABEL_106:
  v80 = *(unsigned __int8 *)(v6 + 8);
  if (v7)
    v81 = *(_BYTE *)(v7 + 8) == 18;
  else
    v81 = 0;
  if (!v81)
    goto LABEL_110;
  v85 = *(_DWORD *)(v7 + 32);
  if (v85 == 1 && v80 == 10)
  {
    v113 = *(uint64_t **)(v4 + 24);
    v114 = *(_QWORD *)(v7 + 24);
    v439.i16[4] = 257;
    v115 = sub_1C4773E38(v113, 49, (unsigned __int8 *)v5, v114, (uint64_t)&v437);
    v117 = llvm::PoisonValue::get((llvm::PoisonValue *)v7, v116);
    NullValue = llvm::Constant::getNullValue((llvm::Constant *)(***(_QWORD ***)v3 + 1960), v118);
    v439.i16[4] = 257;
    v120 = operator new(0xA0uLL);
    v121 = 0;
    v32 = v120 + 24;
    v120[29] = v120[29] & 0x38000000 | 3;
    do
    {
      v122 = &v120[v121];
      *v122 = 0;
      v122[1] = 0;
      v122[2] = 0;
      v122[3] = v32;
      v121 += 8;
    }
    while (v121 != 24);
    llvm::InsertElementInst::InsertElementInst((uint64_t)(v120 + 24), v117, (uint64_t)v115, (uint64_t)NullValue, (uint64_t)&v437, 0);
    return (llvm::UndefValue **)v32;
  }
  if (v80 != 13)
    goto LABEL_110;
  v420 = v6;
  v425 = (llvm::Constant **)v3;
  v87 = v4;
  if ((*(_BYTE *)(v5 + 16) & 0xFE) != 0x42)
    goto LABEL_130;
  v88 = *(_QWORD *)(v5 - 32);
  if (!v88)
    goto LABEL_130;
  if (*(_BYTE *)(v88 + 16) != 77)
    goto LABEL_130;
  v89 = *(unsigned __int8 **)(v88 - 32);
  v90 = *(_QWORD *)v89;
  if ((*(_DWORD *)(*(_QWORD *)v89 + 8) & 0xFE) != 0x12)
    goto LABEL_130;
  v91 = *(llvm::Type **)(v90 + 24);
  v92 = *(llvm::Type **)(v7 + 24);
  if (v91 != v92)
  {
    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v91);
    v95 = v94;
    if (PrimitiveSizeInBits != llvm::Type::getPrimitiveSizeInBits(v92) || v95 != v96)
    {
LABEL_130:
      v98 = *v425;
      v99 = (unsigned __int8 *)*(v425 - 4);
      v100 = *((unsigned int *)*v425 + 8);
      v437 = &v438.u64[1];
      v438.i64[0] = 0x800000000;
      sub_1C4848C0C((unsigned int *)&v437, v100, 0);
      v101 = sub_1C57E8864(v99, 0, (uint64_t)&v437, *((llvm::Type **)v98 + 3), **(unsigned __int8 **)(v87 + 80));
      v102 = 0;
      if (v101)
      {
        v102 = (llvm::Value *)llvm::Constant::getNullValue(*v425, this);
        v104 = v438.u32[0];
        if (v438.i32[0])
        {
          v105 = 0;
          do
          {
            v106 = *((_QWORD *)v437 + v105);
            if (v106)
            {
              v107 = *(_QWORD *)(v87 + 24);
              v108 = **(_QWORD **)(v107 + 64);
              v109 = *(llvm::ConstantInt **)(v108 + 1960);
              v110 = *(unsigned int *)(v108 + 1968);
              LODWORD(v435[0]) = v110 >> 8;
              if (v110 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)v434, v105, 0);
              }
              else
              {
                if (v110 <= 0xFF)
                  v111 = 0;
                else
                  v111 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v110);
                *(_QWORD *)v434 = v111 & v105;
              }
              v112 = llvm::ConstantInt::get(v109, (llvm::LLVMContext *)v434, v103);
              if (LODWORD(v435[0]) >= 0x41 && *(_QWORD *)v434)
                MEMORY[0x1CAA32F9C](*(_QWORD *)v434, 0x1000C8000313F17);
              v436 = 257;
              v102 = (llvm::Value *)sub_1C4773154((uint64_t *)v107, (uint64_t)v102, v106, (uint64_t)v112, (uint64_t)v434);
            }
            ++v105;
          }
          while (v104 != v105);
        }
      }
      v6 = v420;
      if (v437 != &v438.u64[1])
        free(v437);
      v4 = v87;
      if (v102)
        return sub_1C577F888(v87, (llvm::ValueAsMetadata *)v425, v102);
      v80 = *(unsigned __int8 *)(v420 + 8);
      v3 = (llvm::Instruction *)v425;
LABEL_110:
      if (v80 == 18)
      {
        v82 = v428;
        if (*(_DWORD *)(v6 + 32) == 1)
        {
          if ((*((_DWORD *)v428 + 2) & 0xFE) != 0x12)
          {
            v131 = *(uint64_t **)(v4 + 24);
            v132 = llvm::Constant::getNullValue((llvm::Constant *)(***(_QWORD ***)v3 + 1960), this);
            v439.i16[4] = 257;
            sub_1C4772EE0(v131, v5, (uint64_t)v132, (uint64_t)&v437);
            v439.i16[4] = 257;
            llvm::CastInst::Create(49);
            return (llvm::UndefValue **)v130;
          }
          if (v5 && *(_BYTE *)(v5 + 16) == 90)
          {
            v83 = operator new(0x60uLL);
            v32 = v83 + 8;
            v83[13] = v83[13] & 0x38000000 | 1;
            *(_QWORD *)v83 = 0;
            *((_QWORD *)v83 + 1) = 0;
            *((_QWORD *)v83 + 2) = 0;
            *((_QWORD *)v83 + 3) = v83 + 8;
            v84 = *(_QWORD *)(v5 - 64);
            v439.i16[4] = 257;
            llvm::BitCastInst::BitCastInst((uint64_t)(v83 + 8), v84, (uint64_t)v82, (uint64_t)&v437, 0);
            return (llvm::UndefValue **)v32;
          }
        }
        v123 = v4;
        v124 = v428;
        if ((*((_DWORD *)v428 + 2) & 0xFE) == 0x12)
          v124 = (llvm::Type *)**((_QWORD **)v428 + 2);
        v125 = llvm::Type::getPrimitiveSizeInBits(v124);
        *(_QWORD *)v443 = 0;
        v429 = 0;
        v433 = 0;
        v437 = v443;
        v438.i64[0] = (uint64_t)&v429;
        v438.i64[1] = (uint64_t)&v433;
        v126 = *(_QWORD *)(v5 + 8);
        if (v126 && !*(_QWORD *)(v126 + 8) && *(_BYTE *)(v5 + 16) == 90)
        {
          v127 = v125;
          v128 = *(_DWORD *)(v5 + 20);
          v129 = (v128 & 0x40000000) != 0 ? *(uint64_t **)(v5 - 8) : (uint64_t *)(v5 - 32 * (v128 & 0x7FFFFFF));
          v133 = *v129;
          v134 = *(_QWORD *)(*v129 + 8);
          if (v134)
          {
            if (!*(_QWORD *)(v134 + 8) && sub_1C57E819C((_QWORD **)&v437, v133))
            {
              v135 = *(_DWORD *)(v5 + 20);
              v136 = (v135 & 0x40000000) != 0 ? *(_QWORD *)(v5 - 8) : v5 - 32 * (v135 & 0x7FFFFFF);
              v159 = *(_QWORD *)(v136 + 32);
              if (v159)
              {
                *(_QWORD *)v438.i64[0] = v159;
                v160 = *(_DWORD *)(v5 + 20);
                v161 = (v160 & 0x40000000) != 0 ? *(_QWORD *)(v5 - 8) : v5 - 32 * (v160 & 0x7FFFFFF);
                if (sub_1C4E7B154((_QWORD **)&v438.i64[1], *(_QWORD *)(v161 + 64)))
                {
                  if (*((_BYTE *)v82 + 8) == 13 && **(llvm::Type ***)v443 == v82)
                  {
                    v162 = v429;
                    if (*(_BYTE *)(*(_QWORD *)v429 + 8) == 13 && sub_1C577D338(v123, v127))
                    {
                      if (**(_BYTE **)(v123 + 80))
                      {
                        v163 = (*(_DWORD *)(v6 + 32) - 1) - v433;
                        v433 = v163;
                      }
                      else
                      {
                        v163 = v433;
                      }
                      if (!v163)
                      {
                        v391 = *(llvm::Type **)v162;
                        if ((*(_DWORD *)(*(_QWORD *)v162 + 8) & 0xFE) == 0x12)
                          v391 = (llvm::Type *)**((_QWORD **)v391 + 2);
                        v392 = llvm::Type::getPrimitiveSizeInBits(v391) - v127;
                        LODWORD(v435[0]) = v127;
                        if (v127 > 0x40)
                        {
                          llvm::APInt::initSlowCase((llvm::APInt *)v434, 0, 0);
                          v127 = v435[0];
                        }
                        else
                        {
                          *(_QWORD *)v434 = 0;
                        }
                        sub_1C4912E54(v434, v392 + v127, v127);
                        v393 = *(_QWORD *)(v123 + 24);
                        v394 = *(unsigned int **)v443;
                        v439.i16[4] = 257;
                        v396 = llvm::ConstantInt::get(**(llvm::ConstantInt ****)v443, (llvm::Type *)v434, v395);
                        v397 = (_QWORD *)sub_1C4D89BCC(v393, v394, (uint64_t)v396, (uint64_t)&v437);
                        v398 = *(uint64_t **)(v123 + 24);
                        v439.i16[4] = 257;
                        v399 = sub_1C4773E38(v398, 39, v429, (uint64_t)v82, (uint64_t)&v437);
                        v439.i16[4] = 257;
                        v400 = (char *)operator new(0x80uLL);
                        *((_QWORD *)v400 + 5) = 0;
                        v401 = v400 + 40;
                        *((_QWORD *)v400 + 6) = 0;
                        *((_QWORD *)v400 + 8) = *v397;
                        v32 = v400 + 64;
                        *((_QWORD *)v400 + 3) = v400 + 64;
                        *((_QWORD *)v400 + 7) = v400 + 64;
                        *((_QWORD *)v400 + 9) = 0;
                        v400[80] = 57;
                        v400[81] = 0;
                        *((_WORD *)v400 + 41) = 0;
                        *((_DWORD *)v400 + 21) = 2;
                        *(_OWORD *)(v400 + 88) = 0u;
                        *(_OWORD *)(v400 + 104) = 0u;
                        *((_DWORD *)v400 + 30) = 0;
                        *(_QWORD *)v400 = v397;
                        v404 = v397[1];
                        v403 = v397 + 1;
                        v402 = v404;
                        *((_QWORD *)v400 + 1) = v404;
                        if (v404)
                          *(_QWORD *)(v402 + 16) = v400 + 8;
                        *((_QWORD *)v400 + 2) = v403;
                        *v403 = v400;
                        *((_QWORD *)v400 + 4) = v399;
                        if (v399)
                        {
                          v407 = *((_QWORD *)v399 + 1);
                          v406 = v399 + 8;
                          v405 = v407;
                          *v401 = v407;
                          if (v407)
                            *(_QWORD *)(v405 + 16) = v401;
                          *((_QWORD *)v400 + 6) = v406;
                          *v406 = v400 + 32;
                        }
                        llvm::Value::setName((uint64_t ***)v400 + 8, (uint64_t)&v437);
                        if (LODWORD(v435[0]) >= 0x41 && *(_QWORD *)v434)
                          MEMORY[0x1CAA32F9C](*(_QWORD *)v434, 0x1000C8000313F17);
                        return (llvm::UndefValue **)v32;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v4 = v123;
      }
      v186 = *(unsigned __int8 *)(v5 + 16);
      if (v5 && v186 == 91)
      {
        v187 = *(unsigned __int8 **)(v5 - 64);
        v188 = *(_QWORD *)(v5 + 8);
        v189 = *(_DWORD *)(*(_QWORD *)v5 + 32);
        v190 = *(unsigned int *)(*(_QWORD *)v187 + 32);
        if (v188)
        {
          v191 = v428;
          if (!*(_QWORD *)(v188 + 8) && (*((_DWORD *)v428 + 2) & 0xFE) == 0x12)
          {
            v192 = *(unsigned __int8 *)(*(_QWORD *)v5 + 8);
            if (*((_DWORD *)v428 + 8) == v189
              && (v192 == 19) != (*((_DWORD *)v428 + 2) != 19)
              && v189 == (_DWORD)v190
              && (v192 == 19) != (*(_BYTE *)(*(_QWORD *)v187 + 8) != 19))
            {
              v195 = v6;
              v196 = *(unsigned __int8 **)(v5 - 32);
              if (v187[16] == 77 && **((llvm::Type ***)v187 - 4) == v428
                || v196[16] == 77 && v196 && **((llvm::Type ***)v196 - 4) == v428)
              {
                v366 = *(uint64_t **)(v4 + 24);
                v439.i16[4] = 257;
                v367 = sub_1C4773E38(v366, 49, v187, (uint64_t)v428, (uint64_t)&v437);
                v368 = *(uint64_t **)(v4 + 24);
                v439.i16[4] = 257;
                v369 = sub_1C4773E38(v368, 49, v196, (uint64_t)v428, (uint64_t)&v437);
                v370 = operator new(0xA8uLL);
                v370[21] = v370[21] & 0x38000000 | 2;
                v32 = v370 + 16;
                *(_QWORD *)v370 = 0;
                *((_QWORD *)v370 + 1) = 0;
                *((_QWORD *)v370 + 2) = 0;
                *((_QWORD *)v370 + 3) = v370 + 16;
                *((_QWORD *)v370 + 4) = 0;
                *((_QWORD *)v370 + 5) = 0;
                *((_QWORD *)v370 + 6) = 0;
                *((_QWORD *)v370 + 7) = v370 + 16;
                v371 = *(void **)(v5 + 64);
                v372 = *(unsigned int *)(v5 + 72);
                v439.i16[4] = 257;
                llvm::ShuffleVectorInst::ShuffleVectorInst((_BYTE **)v370 + 8, v367, (uint64_t)v369, v371, v372, (uint64_t)&v437, 0);
                return (llvm::UndefValue **)v32;
              }
              v6 = v195;
            }
          }
        }
        else
        {
          v191 = v428;
        }
        if (*((_BYTE *)v191 + 8) == 13)
        {
          v426 = *(unsigned __int8 **)(v5 - 64);
          v198 = v3;
          v199 = v4;
          v200 = *(_QWORD *)(v4 + 80);
          v201 = v6;
          v202 = llvm::Type::getPrimitiveSizeInBits(v191);
          v203 = *(char **)(v200 + 32);
          v204 = *(_QWORD *)(v200 + 40);
          v205 = &v203[v204];
          if (v202 <= 0xFF)
          {
            v206 = (char *)memchr(v203, (char)v202, v204);
            if (v206)
              v205 = v206;
          }
          v42 = v205 - v203 == v204;
          v4 = v199;
          v3 = v198;
          v6 = v201;
          if (!v42)
          {
            v207 = (llvm::Type *)v201;
            if ((*(_DWORD *)(v201 + 8) & 0xFE) == 0x12)
              v207 = **(llvm::Type ***)(v201 + 16);
            v208 = llvm::Type::getPrimitiveSizeInBits(v207);
            if (v188)
            {
              if (v208 == 8
                && (v189 & 1) == 0
                && !*(_QWORD *)(v188 + 8)
                && (_DWORD)v190 == *(_DWORD *)(v5 + 72)
                && llvm::ShuffleVectorInst::isReverseMask(*(int **)(v5 + 64), v190))
              {
                Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*((_QWORD *)v198 + 5) + 56) + 40), 9, (uint64_t *)&v428, 1);
                v210 = *(uint64_t **)(v4 + 24);
                v439.i16[4] = 257;
                v211 = sub_1C4773E38(v210, 49, v426, (uint64_t)v428, (uint64_t)&v437);
                if (Declaration)
                  v212 = *(_QWORD *)(Declaration + 24);
                else
                  v212 = 0;
                *(_QWORD *)v434 = v211;
                v439.i16[4] = 257;
                v373 = (char *)operator new(0x90uLL);
                v32 = v373 + 64;
                *((_DWORD *)v373 + 21) = *((_DWORD *)v373 + 21) & 0x38000000 | 2;
                *(_QWORD *)v373 = 0;
                *((_QWORD *)v373 + 1) = 0;
                *((_QWORD *)v373 + 2) = 0;
                *((_QWORD *)v373 + 3) = v373 + 64;
                *((_QWORD *)v373 + 4) = 0;
                v374 = (uint64_t *)(v373 + 32);
                *((_QWORD *)v373 + 5) = 0;
                *((_QWORD *)v373 + 6) = 0;
                *((_QWORD *)v373 + 7) = v373 + 64;
                *((_QWORD *)v373 + 8) = **(_QWORD **)(v212 + 16);
                *((_QWORD *)v373 + 9) = 0;
                v373[80] = 84;
                v373[81] = 0;
                *((_WORD *)v373 + 41) = 0;
                *((_DWORD *)v373 + 21) = 2;
                *((_DWORD *)v373 + 30) = 0;
                *(_OWORD *)(v373 + 104) = 0u;
                *(_OWORD *)(v373 + 88) = 0u;
                *((_QWORD *)v373 + 16) = 0;
                *((_QWORD *)v373 + 17) = v212;
                sub_1C5382FD4((uint64_t)v443, (uint64_t *)v434, v435, (uint64_t)v373);
                if (*((_QWORD *)v373 + 4))
                {
                  **((_QWORD **)v373 + 6) = *((_QWORD *)v373 + 5);
                  v412 = *((_QWORD *)v373 + 5);
                  if (v412)
                    *(_QWORD *)(v412 + 16) = *((_QWORD *)v373 + 6);
                }
                *v374 = Declaration;
                if (Declaration)
                {
                  v377 = *(_QWORD *)(Declaration + 8);
                  v376 = (uint64_t **)(Declaration + 8);
                  v375 = v377;
                  *((_QWORD *)v373 + 5) = v377;
                  if (v377)
                    *(_QWORD *)(v375 + 16) = v373 + 40;
                  *((_QWORD *)v373 + 6) = v376;
                  *v376 = v374;
                }
                llvm::CallBase::populateBundleOperandInfos((uint64_t)v32, 0, 0, 1u);
LABEL_513:
                llvm::Value::setName((uint64_t ***)v32, (uint64_t)&v437);
                return (llvm::UndefValue **)v32;
              }
            }
          }
        }
LABEL_354:
        v259 = *((_QWORD *)v3 - 4);
        v260 = *(unsigned __int8 *)(v259 + 16);
        if (v259)
        {
          if (v260 == 89)
          {
            v261 = *(_QWORD *)(v259 + 8);
            if (v261)
            {
              if (!*(_QWORD *)(v261 + 8))
              {
                v272 = *(uint64_t ***)v3;
                v273 = *(unsigned __int8 *)(*(_QWORD *)v3 + 8);
                v323 = v273 > 0x14;
                v274 = (1 << v273) & 0x10A07F;
                if (!v323 && v274 != 0)
                {
                  v276 = **(_QWORD **)(v259 - 64);
                  v277 = (llvm::Type *)*(unsigned int *)(v276 + 32);
                  if (*(_BYTE *)(v276 + 8) == 19)
                    llvm::ScalableVectorType::get(v272, v277);
                  else
                    llvm::FixedVectorType::get((llvm::FixedVectorType *)v272, v277);
                  v279 = v278;
                  v280 = *(uint64_t **)(v4 + 24);
                  v281 = *(unsigned __int8 **)(v259 - 64);
                  v437 = "bc";
                  v439.i16[4] = 259;
                  v282 = sub_1C4773E38(v280, 49, v281, v279, (uint64_t)&v437);
                  v283 = *(_QWORD *)(v259 - 32);
                  v439.i16[4] = 257;
                  v284 = operator new(0x80uLL);
                  v284[21] = v284[21] & 0x38000000 | 2;
                  v32 = v284 + 16;
                  *(_QWORD *)v284 = 0;
                  *((_QWORD *)v284 + 1) = 0;
                  *((_QWORD *)v284 + 2) = 0;
                  *((_QWORD *)v284 + 3) = v284 + 16;
                  *((_QWORD *)v284 + 4) = 0;
                  *((_QWORD *)v284 + 5) = 0;
                  *((_QWORD *)v284 + 6) = 0;
                  *((_QWORD *)v284 + 7) = v284 + 16;
                  llvm::ExtractElementInst::ExtractElementInst((uint64_t)(v284 + 16), v282, v283, (uint64_t)&v437, 0);
                  return (llvm::UndefValue **)v32;
                }
              }
            }
          }
        }
        v262 = *(uint64_t **)(v4 + 24);
        v263 = *(_QWORD *)v3;
        v264 = *(_DWORD *)(*(_QWORD *)v3 + 8) & 0xFE;
        if (v264 == 18)
          v265 = *(unsigned __int8 *)(**(_QWORD **)(v263 + 16) + 8);
        else
          v265 = *(_DWORD *)(*(_QWORD *)v3 + 8);
        if (v265 == 13)
        {
          v266 = *(_QWORD *)(v259 + 8);
          if (v266)
          {
            if (!*(_QWORD *)(v266 + 8)
              && v260 >= 0x1C
              && v260 - 59 > 0xFFFFFFFC
              && v264 == 18
              && (*(_DWORD *)(*(_QWORD *)v259 + 8) & 0xFE) == 0x12)
            {
              *(_QWORD *)v434 = 0;
              v285 = *(_QWORD *)(v259 - 64);
              v437 = v434;
              v286 = *(_QWORD *)(v285 + 8);
              if (v286
                && !*(_QWORD *)(v286 + 8)
                && sub_1C57E819C((_QWORD **)&v437, v285)
                && **(_QWORD **)v434 == v263
                && *(unsigned __int8 *)(*(_QWORD *)v434 + 16) >= 0x15u)
              {
                v378 = *(unsigned __int8 **)(v259 - 32);
                v439.i16[4] = 257;
                v292 = sub_1C4773E38(v262, 49, v378, v263, (uint64_t)&v437);
                v293 = *(_BYTE *)(v259 + 16);
                v291 = *(unsigned __int8 **)v434;
                v439.i16[4] = 257;
                goto LABEL_398;
              }
              v287 = *(_QWORD *)(v259 - 32);
              v437 = v434;
              v288 = *(_QWORD *)(v287 + 8);
              if (v288
                && !*(_QWORD *)(v288 + 8)
                && sub_1C57E819C((_QWORD **)&v437, v287)
                && **(_QWORD **)v434 == v263
                && *(unsigned __int8 *)(*(_QWORD *)v434 + 16) >= 0x15u)
              {
                v379 = *(unsigned __int8 **)(v259 - 64);
                v439.i16[4] = 257;
                v380 = sub_1C4773E38(v262, 49, v379, v263, (uint64_t)&v437);
                v381 = *(_BYTE *)(v259 + 16);
                v382 = *(unsigned __int8 **)v434;
                v439.i16[4] = 257;
                v383 = (char *)operator new(0x80uLL);
                *((_QWORD *)v383 + 6) = 0;
                *((_QWORD *)v383 + 5) = 0;
                v384 = v383 + 40;
                *((_QWORD *)v383 + 8) = *(_QWORD *)v380;
                v32 = v383 + 64;
                *((_QWORD *)v383 + 3) = v383 + 64;
                *((_QWORD *)v383 + 7) = v383 + 64;
                *((_QWORD *)v383 + 9) = 0;
                v383[80] = v381;
                v383[81] = 0;
                *((_WORD *)v383 + 41) = 0;
                *((_DWORD *)v383 + 21) = 2;
                *(_OWORD *)(v383 + 88) = 0u;
                *(_OWORD *)(v383 + 104) = 0u;
                *((_DWORD *)v383 + 30) = 0;
                *(_QWORD *)v383 = v380;
                v387 = *((_QWORD *)v380 + 1);
                v386 = v380 + 8;
                v385 = v387;
                *((_QWORD *)v383 + 1) = v387;
                if (v387)
                  *(_QWORD *)(v385 + 16) = v383 + 8;
                *((_QWORD *)v383 + 2) = v386;
                *v386 = v383;
                *((_QWORD *)v383 + 4) = v382;
                if (v382)
                {
                  v390 = *((_QWORD *)v382 + 1);
                  v389 = v382 + 8;
                  v388 = v390;
                  *v384 = v390;
                  if (v390)
                    *(_QWORD *)(v388 + 16) = v384;
                  *((_QWORD *)v383 + 6) = v389;
                  *v389 = v383 + 32;
                }
                goto LABEL_513;
              }
              v289 = *(unsigned __int8 **)(v259 - 32);
              if (v289 && v289[16] < 0x15u)
              {
                v290 = *(unsigned __int8 **)(v259 - 64);
                v439.i16[4] = 257;
                v291 = sub_1C4773E38(v262, 49, v290, v263, (uint64_t)&v437);
                v439.i16[4] = 257;
                v292 = sub_1C4773E38(v262, 49, v289, v263, (uint64_t)&v437);
                v293 = *(_BYTE *)(v259 + 16);
                v439.i16[4] = 257;
LABEL_398:
                v294 = (char *)operator new(0x80uLL);
                *((_QWORD *)v294 + 6) = 0;
                *((_QWORD *)v294 + 5) = 0;
                v295 = v294 + 40;
                *((_QWORD *)v294 + 8) = *(_QWORD *)v291;
                v32 = v294 + 64;
                *((_QWORD *)v294 + 3) = v294 + 64;
                *((_QWORD *)v294 + 7) = v294 + 64;
                *((_QWORD *)v294 + 9) = 0;
                v294[80] = v293;
                v294[81] = 0;
                *((_WORD *)v294 + 41) = 0;
                *((_DWORD *)v294 + 21) = 2;
                *(_OWORD *)(v294 + 88) = 0u;
                *(_OWORD *)(v294 + 104) = 0u;
                *((_DWORD *)v294 + 30) = 0;
                *(_QWORD *)v294 = v291;
                v298 = *((_QWORD *)v291 + 1);
                v297 = v291 + 8;
                v296 = v298;
                *((_QWORD *)v294 + 1) = v298;
                if (v298)
                  *(_QWORD *)(v296 + 16) = v294 + 8;
                *((_QWORD *)v294 + 2) = v297;
                *v297 = v294;
                *((_QWORD *)v294 + 4) = v292;
                if (v292)
                {
                  v301 = *((_QWORD *)v292 + 1);
                  v300 = v292 + 8;
                  v299 = v301;
                  *v295 = v301;
                  if (v301)
                    *(_QWORD *)(v299 + 16) = v295;
                  *((_QWORD *)v294 + 6) = v300;
                  *v300 = v294 + 32;
                }
                goto LABEL_513;
              }
              v262 = *(uint64_t **)(v4 + 24);
              v259 = *((_QWORD *)v3 - 4);
            }
          }
        }
        v437 = v434;
        v438.i64[0] = (uint64_t)v443;
        v438.i64[1] = (uint64_t)&v429;
        v267 = *(_QWORD *)(v259 + 8);
        if (v267)
        {
          if (!*(_QWORD *)(v267 + 8))
          {
            *(_QWORD *)v434 = 0;
            *(_QWORD *)v443 = 0;
            v429 = 0;
            if (sub_1C4FA9CBC((_QWORD **)&v437, v259))
            {
              v268 = **(_QWORD **)v434;
              v269 = *(_QWORD *)v3;
              v270 = *(_DWORD *)(*(_QWORD *)v3 + 8) & 0xFE;
              if (**(_QWORD **)v434 && (*(_DWORD *)(v268 + 8) & 0xFE) == 0x12)
              {
                if (v270 != 18)
                  goto LABEL_517;
                if ((*(_DWORD *)(v268 + 8) == 19) != (*(_DWORD *)(*(_QWORD *)v3 + 8) == 19))
                  goto LABEL_517;
                if (*(_DWORD *)(v268 + 32) != *(_DWORD *)(v269 + 32))
                  goto LABEL_517;
                v271 = *(unsigned int **)v443;
                if ((*(_DWORD *)(**(_QWORD **)v443 + 8) & 0xFE) != 0x12)
                  goto LABEL_517;
LABEL_405:
                v302 = *((_QWORD *)v3 - 4);
                v433 = 0;
                v437 = &v433;
                v303 = *((_QWORD *)v271 + 1);
                if (v303
                  && !*(_QWORD *)(v303 + 8)
                  && sub_1C57E819C((_QWORD **)&v437, (uint64_t)v271)
                  && *(_QWORD *)v433 == v269
                  && *(unsigned __int8 *)(v433 + 16) >= 0x15u)
                {
                  v305 = v3;
                  v306 = v4;
                  v439.i16[4] = 257;
                  v309 = sub_1C4773E38(v262, 49, v429, v269, (uint64_t)&v437);
                  v307 = (uint64_t *)v433;
                  v308 = *(unsigned __int8 **)v434;
LABEL_516:
                  v439.i16[4] = 257;
                  v32 = sub_1C4FC8748((uint64_t)v308, v307, (uint64_t)v309, (uint64_t)&v437, 0, v302);
                  v4 = v306;
                  v3 = v305;
                  if (v32)
                    return (llvm::UndefValue **)v32;
                  goto LABEL_517;
                }
                v437 = &v433;
                v304 = *((_QWORD *)v429 + 1);
                if (v304
                  && !*(_QWORD *)(v304 + 8)
                  && sub_1C57E819C((_QWORD **)&v437, (uint64_t)v429)
                  && *(_QWORD *)v433 == v269
                  && *(unsigned __int8 *)(v433 + 16) >= 0x15u)
                {
                  v305 = v3;
                  v306 = v4;
                  v439.i16[4] = 257;
                  v307 = (uint64_t *)sub_1C4773E38(v262, 49, *(unsigned __int8 **)v443, v269, (uint64_t)&v437);
                  v309 = (unsigned __int8 *)v433;
                  v308 = *(unsigned __int8 **)v434;
                  goto LABEL_516;
                }
              }
              else
              {
                v271 = *(unsigned int **)v443;
                if ((v270 == 18) == ((*(_DWORD *)(**(_QWORD **)v443 + 8) & 0xFE) == 18))
                  goto LABEL_405;
              }
            }
          }
        }
LABEL_517:
        if (*(_BYTE *)(v6 + 8) == 15)
          return sub_1C57E562C(v4, v3);
        else
          return sub_1C57DD374(v4, v3);
      }
      if (!v5)
        goto LABEL_354;
      if (v186 != 83)
        goto LABEL_354;
      v433 = v5;
      v197 = *((_QWORD *)v3 + 1);
      if (!v197)
        goto LABEL_354;
      while (*(_BYTE *)(*(_QWORD *)(v197 + 24) + 16) == 61)
      {
        v197 = *(_QWORD *)(v197 + 8);
        if (!v197)
          goto LABEL_354;
      }
      v421 = v6;
      v427 = (llvm::DataLayout *)**((_QWORD **)v3 - 4);
      v213 = *(uint64_t ***)v3;
      *(_QWORD *)v443 = (char *)&v444 + 8;
      *(_QWORD *)&v444 = 0x400000001;
      v437 = (void *)1;
      v438 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v439 = v438;
      v440 = v442;
      v441 = 0x400000000;
      *((_QWORD *)&v444 + 1) = v5;
      sub_1C57E597C((uint64_t)&v437, &v433);
      v214 = v444;
      while (v214)
      {
        v215 = *(_QWORD *)(*(_QWORD *)v443 + 8 * v214-- - 8);
        LODWORD(v444) = v214;
        v216 = *(_DWORD *)(v215 + 20);
        if ((v216 & 0x40000000) != 0)
        {
          v218 = *(uint64_t **)(v215 - 8);
          v217 = v216 & 0x7FFFFFF;
        }
        else
        {
          v217 = v216 & 0x7FFFFFF;
          v218 = (uint64_t *)(v215 - 32 * v217);
        }
        if (v217)
        {
          v219 = 32 * v217;
          while (1)
          {
            v220 = *v218;
            v221 = *(unsigned __int8 *)(*v218 + 16);
            if (v221 >= 0x15)
            {
              if (v221 == 60)
              {
                v222 = *(llvm::Instruction **)(v220 - 32);
                if (v222 == v3)
                  goto LABEL_346;
                if (*((_BYTE *)v222 + 16) == 60)
                  goto LABEL_346;
                if (*((_BYTE *)v213 + 8) == 11)
                  goto LABEL_346;
                v223 = *(_QWORD *)(v220 + 8);
                if (!v223 || *(_QWORD *)(v223 + 8) || (*(_WORD *)(v220 + 18) & 0x381) != 0)
                  goto LABEL_346;
              }
              else
              {
                v224 = v3;
                v225 = v4;
                if (v221 == 83)
                  v226 = *v218;
                else
                  v226 = 0;
                *(_QWORD *)v434 = v226;
                if (v226)
                {
                  if (sub_1C57E597C((uint64_t)&v437, (uint64_t *)v434))
                  {
                    v227 = v444;
                    if (v444 >= (unint64_t)DWORD1(v444))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v443, (uint64_t)&v444 + 8, v444 + 1, 8);
                      v227 = v444;
                    }
                    *(_QWORD *)(*(_QWORD *)v443 + 8 * v227) = v226;
                    LODWORD(v444) = v444 + 1;
                  }
                  v4 = v225;
                  v3 = v224;
                }
                else
                {
                  if (v221 != 77)
                  {
                    v32 = 0;
                    v4 = v225;
                    v3 = v224;
                    goto LABEL_347;
                  }
                  v228 = **(uint64_t ****)(v220 - 32);
                  v229 = *(llvm::DataLayout **)v220;
                  v230 = v228 == v213 && v229 == v427;
                  v4 = v225;
                  v3 = v224;
                  if (!v230)
                  {
LABEL_346:
                    v32 = 0;
                    goto LABEL_347;
                  }
                }
              }
            }
            v218 += 4;
            v219 -= 32;
            if (!v219)
            {
              v214 = v444;
              break;
            }
          }
        }
      }
      v231 = (uint64_t *)v440;
      v232 = v441;
      if ((_DWORD)v441)
      {
        v233 = &v438;
        v234 = v438.i32[2] - 1;
        if ((v437 & 1) != 0)
        {
          v235 = 4;
        }
        else
        {
          v233 = (int64x2_t *)v438.i64[0];
          v235 = v438.u32[2];
        }
        if ((v437 & 1) != 0)
          v234 = 3;
        v236 = (char *)v440;
        while (1)
        {
          v237 = *(_QWORD *)(*(_QWORD *)v236 + 8);
          if (v237)
            break;
LABEL_334:
          v236 += 8;
          if (v236 == (char *)v440 + 8 * v441)
            goto LABEL_335;
        }
        while (2)
        {
          v238 = *(_QWORD *)(v237 + 24);
          v239 = *(unsigned __int8 *)(v238 + 16);
          if (v238 && v239 == 61)
          {
            if ((*(_WORD *)(v238 + 18) & 0x381) != 0 || *(_QWORD *)(v238 - 64) != *(_QWORD *)v236)
              goto LABEL_346;
            goto LABEL_331;
          }
          if (v238 && v239 == 77)
          {
            if (*(uint64_t ***)v238 != v213 || **(_QWORD **)(v238 - 32) != (_QWORD)v427)
              goto LABEL_346;
            goto LABEL_331;
          }
          v32 = 0;
          if (!v238 || v239 != 83)
            goto LABEL_347;
          if (v437 & 1 | (v438.i32[2] != 0))
          {
            LODWORD(v241) = ((v238 >> 4) ^ (v238 >> 9)) & v234;
            v242 = &v233->i64[v241];
            v243 = *v242;
            if (*v242 != v238)
            {
              v244 = 1;
              while (v243 != -4096)
              {
                v245 = v241 + v244++;
                v241 = v245 & v234;
                v243 = v233->i64[v241];
                if (v243 == v238)
                {
                  v242 = &v233->i64[v241];
                  goto LABEL_330;
                }
              }
              v246 = v233;
              v247 = v235;
LABEL_329:
              v242 = &v246->i64[v247];
            }
LABEL_330:
            if ((uint64_t *)((char *)v233 + 8 * v235) == v242)
              goto LABEL_346;
LABEL_331:
            v237 = *(_QWORD *)(v237 + 8);
            if (!v237)
              goto LABEL_334;
            continue;
          }
          break;
        }
        v247 = 0;
        v246 = (int64x2_t *)v438.i64[0];
        goto LABEL_329;
      }
LABEL_335:
      v419 = v4;
      *(_QWORD *)v434 = 1;
      for (i = 8; i != 72; i += 16)
        *(_QWORD *)&v434[i] = -4096;
      if (!(_DWORD)v232)
        goto LABEL_500;
      v249 = v3;
      v250 = 8 * v232;
      v251 = v419;
      do
      {
        v252 = *v231;
        v432 = v252;
        v253 = *(_QWORD *)(v251 + 24);
        *(_QWORD *)(v253 + 48) = *(_QWORD *)(v252 + 40);
        *(_QWORD *)(v253 + 56) = v252 + 24;
        v254 = *(unsigned __int8 **)(v252 + 48);
        v429 = v254;
        if (v254)
        {
          llvm::MetadataTracking::track((uint64_t)&v429, v254, 2);
          v255 = v429;
        }
        else
        {
          v255 = 0;
        }
        sub_1C4774EF4(v253, 0, (uint64_t)v255);
        if (v429)
          llvm::MetadataTracking::untrack((uint64_t)&v429, v429);
        v251 = v419;
        v256 = *(_QWORD *)(v419 + 24);
        v257 = *(_DWORD *)(v252 + 20) & 0x7FFFFFF;
        v431 = 257;
        v258 = sub_1C4867E94(v256, (uint64_t)v213, v257, (uint64_t)&v429);
        sub_1C57E9664(v434, &v432)[1] = v258;
        ++v231;
        v250 -= 8;
      }
      while (v250);
      v3 = v249;
      if ((_DWORD)v441)
      {
        v310 = (uint64_t *)v440;
        v414 = (char *)v440 + 8 * v441;
        do
        {
          v416 = v310;
          v432 = *v310;
          v311 = v432;
          v312 = sub_1C57E9664(v434, &v432);
          v313 = *(_DWORD *)(v311 + 20) & 0x7FFFFFF;
          if ((_DWORD)v313)
          {
            v314 = 0;
            v315 = 0;
            v316 = (llvm::PHINode *)v312[1];
            v317 = 32 * v313;
            do
            {
              v318 = v432;
              v319 = *(_DWORD *)(v432 + 20);
              if ((v319 & 0x40000000) != 0)
                v320 = *(_QWORD *)(v432 - 8);
              else
                v320 = v432 - 32 * (v319 & 0x7FFFFFF);
              v321 = *(llvm::UndefValue **)(v320 + v315);
              v322 = *((unsigned __int8 *)v321 + 16);
              if (v321)
                v323 = v322 > 0x14;
              else
                v323 = 1;
              if (v323)
              {
                if (v321 && v322 == 60)
                {
                  v324 = *(_QWORD *)(v419 + 24);
                  *(_QWORD *)(v324 + 48) = *((_QWORD *)v321 + 5);
                  *(_QWORD *)(v324 + 56) = (char *)v321 + 24;
                  v325 = (unsigned __int8 *)*((_QWORD *)v321 + 6);
                  v429 = v325;
                  if (v325)
                  {
                    llvm::MetadataTracking::track((uint64_t)&v429, v325, 2);
                    v326 = v429;
                  }
                  else
                  {
                    v326 = 0;
                  }
                  sub_1C4774EF4(v324, 0, (uint64_t)v326);
                  if (v429)
                    llvm::MetadataTracking::untrack((uint64_t)&v429, v429);
                  v431 = 257;
                  v327 = sub_1C581BC08(v419, v321, (llvm::PointerType *)v213, (uint64_t *)&v429);
                  v329 = (llvm::Value *)llvm::PoisonValue::get(*(llvm::PoisonValue **)v321, v328);
                  sub_1C577F888(v419, v321, v329);
                  sub_1C57813F4(v419, (uint64_t)v321);
                  v321 = v327;
                }
                else if (v321 && v322 == 77)
                {
                  v321 = (llvm::UndefValue *)*((_QWORD *)v321 - 4);
                }
                else
                {
                  if (v322 == 83)
                    v330 = (unsigned __int8 *)v321;
                  else
                    v330 = 0;
                  v429 = v330;
                  if (v330)
                    v321 = (llvm::UndefValue *)sub_1C57E9664(v434, (uint64_t *)&v429)[1];
                  else
                    v321 = 0;
                }
              }
              else if (*(uint64_t ***)v321 != v213)
              {
                v321 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v321, (llvm::Constant *)v213, 0);
              }
              v331 = *(_DWORD *)(v318 + 20);
              if ((v331 & 0x40000000) != 0)
                v332 = *(_QWORD *)(v318 - 8);
              else
                v332 = v318 - 32 * (v331 & 0x7FFFFFF);
              sub_1C477667C(v316, (uint64_t)v321, *(_QWORD *)(v332 + 32 * *(unsigned int *)(v318 + 60) + v314));
              v315 += 32;
              v314 += 8;
            }
            while (v317 != v315);
          }
          v310 = v416 + 1;
        }
        while (v416 + 1 != (uint64_t *)v414);
        v4 = v419;
        v32 = 0;
        if ((_DWORD)v441)
        {
          v333 = (uint64_t *)v440;
          v417 = (uint64_t *)((char *)v440 + 8 * v441);
          while (1)
          {
            v432 = *v333;
            v334 = v432;
            v335 = sub_1C57E9664(v434, &v432);
            v336 = *(_QWORD *)(v334 + 8);
            if (v336)
              break;
            v4 = v419;
LABEL_498:
            if (++v333 == v417)
              goto LABEL_501;
          }
          v337 = (unsigned __int8 *)v335[1];
          v4 = v419;
          while (2)
          {
            v338 = *(_QWORD *)(v336 + 24);
            v336 = *(_QWORD *)(v336 + 8);
            v339 = *(unsigned __int8 *)(v338 + 16);
            if (v338 && v339 == 61)
            {
              v340 = *(_QWORD *)(v419 + 24);
              *(_QWORD *)(v340 + 48) = *(_QWORD *)(v338 + 40);
              *(_QWORD *)(v340 + 56) = v338 + 24;
              v341 = *(unsigned __int8 **)(v338 + 48);
              v429 = v341;
              if (v341)
              {
                llvm::MetadataTracking::track((uint64_t)&v429, v341, 2);
                v342 = v429;
              }
              else
              {
                v342 = 0;
              }
              sub_1C4774EF4(v340, 0, (uint64_t)v342);
              if (v429)
                llvm::MetadataTracking::untrack((uint64_t)&v429, v429);
              v343 = *(uint64_t **)(v419 + 24);
              v431 = 257;
              v344 = sub_1C4773E38(v343, 49, v337, (uint64_t)v427, (uint64_t)&v429);
              v345 = (unsigned __int8 **)(v338 - 64);
              if (*(_QWORD *)(v338 - 64))
              {
                **(_QWORD **)(v338 - 48) = *(_QWORD *)(v338 - 56);
                v346 = *(_QWORD *)(v338 - 56);
                if (v346)
                  *(_QWORD *)(v346 + 16) = *(_QWORD *)(v338 - 48);
              }
              *v345 = v344;
              if (v344)
              {
                v349 = *((_QWORD *)v344 + 1);
                v347 = (unsigned __int8 ***)(v344 + 8);
                v348 = v349;
                *(_QWORD *)(v338 - 56) = v349;
                if (v349)
                  *(_QWORD *)(v348 + 16) = v338 - 56;
                *(_QWORD *)(v338 - 48) = v347;
                *v347 = v345;
              }
              v350 = *(_QWORD *)(v419 + 32);
              v351 = *(_DWORD *)(v350 + 8);
              v429 = (unsigned __int8 *)v338;
              v430 = v351;
              v352 = *(_DWORD *)(v350 + 2080);
              if (!v352)
              {
                v363 = 0;
                goto LABEL_490;
              }
              v353 = *(_QWORD *)(v350 + 2064);
              v354 = v352 - 1;
              v355 = v354 & ((v338 >> 4) ^ (v338 >> 9));
              v356 = (_QWORD *)(v353 + 16 * v355);
              v357 = *v356;
              if (*v356 != v338)
              {
                v358 = 0;
                v359 = 1;
                while (v357 != -4096)
                {
                  if (v358)
                    v360 = 0;
                  else
                    v360 = v357 == -8192;
                  if (v360)
                    v358 = v356;
                  v361 = v355 + v359++;
                  v355 = v361 & v354;
                  v356 = (_QWORD *)(v353 + 16 * v355);
                  v357 = *v356;
                  if (*v356 == v338)
                    goto LABEL_493;
                }
                if (v358)
                  v363 = v358;
                else
                  v363 = v356;
LABEL_490:
                v364 = sub_1C4D8D8F4((_DWORD *)(v350 + 2064), (uint64_t)&v429, (uint64_t *)&v429, v363);
                *v364 = v429;
                *((_DWORD *)v364 + 2) = v430;
                v365 = *(unsigned int *)(v350 + 8);
                if (v365 >= *(unsigned int *)(v350 + 12))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v350, v350 + 16, v365 + 1, 8);
                  v365 = *(unsigned int *)(v350 + 8);
                }
                *(_QWORD *)(*(_QWORD *)v350 + 8 * v365) = v338;
                ++*(_DWORD *)(v350 + 8);
              }
            }
            else if (v338)
            {
              if (v339 == 77)
              {
                v362 = sub_1C577F888(v419, (llvm::ValueAsMetadata *)v338, (llvm::Value *)v337);
                if ((llvm::Instruction *)v338 == v3)
                  v32 = v362;
              }
            }
LABEL_493:
            if (!v336)
              goto LABEL_498;
            continue;
          }
        }
      }
      else
      {
LABEL_500:
        v32 = 0;
        v4 = v419;
      }
LABEL_501:
      if (!v434[0])
        MEMORY[0x1CAA32FB4](v435[0], 8);
LABEL_347:
      if (v440 != v442)
        free(v440);
      v6 = v421;
      if ((v437 & 1) == 0)
        MEMORY[0x1CAA32FB4](v438.i64[0], 8);
      if (*(__int128 **)v443 != (__int128 *)((char *)&v444 + 8))
        free(*(void **)v443);
      if (v32)
        return (llvm::UndefValue **)v32;
      goto LABEL_354;
    }
    llvm::FixedVectorType::get(v92, (llvm::Type *)*(unsigned int *)(v90 + 32));
    v90 = v137;
    v138 = *(uint64_t **)(v4 + 24);
    v439.i16[4] = 257;
    v89 = sub_1C4773E38(v138, 49, v89, v90, (uint64_t)&v437);
    v85 = *(_DWORD *)(v7 + 32);
  }
  v139 = **(unsigned __int8 **)(v4 + 80);
  v140 = *(_DWORD *)(v90 + 32);
  v437 = &v438.u64[1];
  v438.i64[0] = 0x1000000000;
  sub_1C57E87D8((uint64_t)&v437, 0, v140);
  v142 = v85 - v140;
  if (v85 >= v140)
  {
    v143 = llvm::Constant::getNullValue((llvm::Constant *)v90, v141);
    if (v139)
    {
      sub_1C62A829C((unsigned int *)&v437, (uint64_t)v437, v85 - v140, v140);
      v145 = v438.i32[0];
    }
    else
    {
      v148 = v438.u32[0];
      v149 = v438.u32[0] + (unint64_t)v142;
      if (v149 > v438.u32[1])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v437, (uint64_t)&v438.i64[1], v149, 4);
        v148 = v438.u32[0];
      }
      if (v85 != v140)
      {
        v150 = (int *)((char *)v437 + 4 * v148);
        v151 = v85 - v140;
        do
        {
          *v150++ = v140;
          --v151;
        }
        while (v151);
        LODWORD(v148) = v438.i32[0];
      }
      v145 = v148 + v142;
      v438.i32[0] = v145;
    }
    v144 = (char *)v437;
  }
  else
  {
    v143 = llvm::PoisonValue::get((llvm::PoisonValue *)v90, v141);
    v144 = (char *)v437;
    v145 = v438.i32[0];
    if (v139)
    {
      v146 = v438.u32[0] - (unint64_t)v85;
      v147 = v438.i32[0] >= v85;
      if (v438.i32[0] <= v85)
        v146 = 0;
      v144 = (char *)v437 + 4 * v146;
    }
    else
    {
      v147 = v438.i32[0] >= v85;
    }
    if (v147)
      v145 = v85;
  }
  v157 = v145;
  v158 = operator new(0xA8uLL);
  v158[21] = v158[21] & 0x38000000 | 2;
  v32 = v158 + 16;
  *(_QWORD *)v158 = 0;
  *((_QWORD *)v158 + 1) = 0;
  *((_QWORD *)v158 + 2) = 0;
  *((_QWORD *)v158 + 3) = v158 + 16;
  *((_QWORD *)v158 + 4) = 0;
  *((_QWORD *)v158 + 5) = 0;
  *((_QWORD *)v158 + 6) = 0;
  *((_QWORD *)v158 + 7) = v158 + 16;
  v436 = 257;
  llvm::ShuffleVectorInst::ShuffleVectorInst((_BYTE **)v158 + 8, v89, (uint64_t)v143, v144, v157, (uint64_t)v434, 0);
  v77 = v437;
  if (v437 != &v438.u64[1])
LABEL_98:
    free(v77);
  return (llvm::UndefValue **)v32;
}

llvm::UndefValue **sub_1C57E7FA8(uint64_t a1, llvm::Instruction *this)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  llvm::PointerType *v7;
  llvm::Type *v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t v11;
  llvm::Type *v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned __int8 *v15;
  _DWORD *v16;
  uint64_t v17;
  _BYTE v19[32];
  __int16 v20;

  v4 = (unsigned __int8 *)*((_QWORD *)this - 4);
  v5 = *(_QWORD *)v4;
  if ((*(_DWORD *)(*(_QWORD *)v4 + 8) & 0xFE) == 0x12)
    v5 = **(_QWORD **)(v5 + 16);
  v6 = *(_QWORD *)this;
  if ((*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 0x12)
    v6 = **(_QWORD **)(v6 + 16);
  v7 = *(llvm::PointerType **)(v6 + 24);
  if (*(llvm::PointerType **)(v5 + 24) == v7)
    return sub_1C57E562C(a1, this);
  v8 = (llvm::Type *)(*(_DWORD *)(v5 + 8) >> 8);
  if (v7)
    v9 = (uint64_t **)llvm::PointerType::get(v7, v8);
  else
    v9 = (uint64_t **)llvm::PointerType::get(*(llvm::PointerType **)v6, v8);
  v10 = (uint64_t)v9;
  v11 = *(_QWORD *)this;
  if (*(_QWORD *)this && (*(_DWORD *)(v11 + 8) & 0xFE) == 0x12)
  {
    v12 = (llvm::Type *)*(unsigned int *)(v11 + 32);
    if (*(_DWORD *)(v11 + 8) == 19)
      llvm::ScalableVectorType::get(v9, v12);
    else
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v9, v12);
    v10 = v13;
  }
  v14 = *(uint64_t **)(a1 + 24);
  v20 = 257;
  v15 = sub_1C4773E38(v14, 49, v4, v10, (uint64_t)v19);
  v16 = operator new(0x60uLL);
  v16[13] = v16[13] & 0x38000000 | 1;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = 0;
  *((_QWORD *)v16 + 3) = v16 + 8;
  v17 = *(_QWORD *)this;
  v20 = 257;
  return (llvm::UndefValue **)llvm::AddrSpaceCastInst::AddrSpaceCastInst((uint64_t)(v16 + 8), (uint64_t)v15, v17, (uint64_t)v19, 0);
}

BOOL sub_1C57E80FC(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  result = 1;
  if (*(unsigned __int8 *)(a1 + 16) >= 0x15u)
  {
    v6 = &v8;
    v7 = &v8;
    v8 = 0;
    if ((sub_1C4B0378C(&v6, a1) & 1) == 0 && (sub_1C4B037F8(&v7, a1) & 1) == 0)
    {
      v5 = &v8;
      if ((sub_1C4B03864(&v5, a1) & 1) == 0)
        return 0;
    }
    if (*v8 != a2)
      return 0;
  }
  return result;
}

uint64_t sub_1C57E819C(_QWORD **a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;

  v3 = *(unsigned __int8 *)(a2 + 16);
  v4 = v3 - 28;
  v6 = v3 < 0x1C && v3 != 5 || a2 == 0;
  v7 = v6;
  if (!v6)
  {
    if (v3 <= 0x1B)
      v4 = *(unsigned __int16 *)(a2 + 18);
    if (v4 == 49
      && ((v8 = *(_DWORD *)(a2 + 20), (v8 & 0x40000000) != 0)
        ? (v9 = *(uint64_t **)(a2 - 8))
        : (v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF))),
          (v10 = *v9) != 0))
    {
      **a1 = v10;
      v2 = 1;
    }
    else
    {
      v2 = 0;
    }
  }
  return v2 & (v7 ^ 1u);
}

uint64_t sub_1C57E8208(llvm::detail::DoubleAPFloat *a1)
{
  llvm::detail::DoubleAPFloat *v1;
  uint64_t v2;
  const llvm::detail::DoubleAPFloat *v3;
  char v4;
  int v5;
  _BOOL4 v7;
  uint64_t v8;
  llvm::detail::DoubleAPFloat **v9;
  llvm::detail::DoubleAPFloat **v10;
  unint64_t v11;
  llvm::detail::DoubleAPFloat *v12;
  int v13;
  uint64_t v14;
  char v15;
  int v16;
  _BOOL4 v18;
  uint64_t v19;
  llvm::detail::DoubleAPFloat **v20;
  llvm::detail::DoubleAPFloat **v21;
  unint64_t v22;
  llvm::detail::DoubleAPFloat *v23;
  int v24;
  _QWORD **v25;
  uint64_t v26;
  char v27;
  int v28;
  _BOOL4 v30;
  uint64_t v31;
  llvm::detail::DoubleAPFloat **v32;
  llvm::detail::DoubleAPFloat **v33;
  unint64_t v34;
  llvm::detail::DoubleAPFloat *v35;
  int v36;
  uint64_t v38;
  int v39;
  int v40;
  unsigned __int8 v41;
  char v42[8];
  uint64_t v43;
  llvm::detail::DoubleAPFloat *v44;
  int v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a1 == ***(_QWORD ***)a1 + 1816)
    return 0;
  v1 = a1;
  v41 = 0;
  v3 = (llvm::detail::DoubleAPFloat *)((char *)a1 + 32);
  v2 = *((_QWORD *)a1 + 4);
  if ((_UNKNOWN *)v2 == &unk_1C866F1C0)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v43, v3);
  }
  else
  {
    v43 = *((_QWORD *)a1 + 4);
    if ((*(_DWORD *)(v2 + 8) + 64) >= 0x80)
    {
      v38 = v2;
      a1 = (llvm::detail::DoubleAPFloat *)operator new[]();
      v2 = v38;
      v44 = a1;
    }
    v4 = *((_BYTE *)v1 + 52);
    v5 = v4 & 7;
    v46 = v4 & 0xF;
    v45 = *((_DWORD *)v1 + 12);
    v7 = (v4 & 6) != 0 && v5 != 3;
    if (v5 == 1 || v7)
    {
      v8 = *(unsigned int *)(v2 + 8);
      if ((v8 - 64) <= 0xFFFFFF7F)
        v9 = (llvm::detail::DoubleAPFloat **)a1;
      else
        v9 = &v44;
      v10 = (llvm::detail::DoubleAPFloat **)((char *)v1 + 40);
      if ((*(_DWORD *)(*((_QWORD *)v1 + 4) + 8) - 64) < 0xFFFFFF80)
        v10 = (llvm::detail::DoubleAPFloat **)*((_QWORD *)v1 + 5);
      if (v8 <= 0xFFFFFFBF)
      {
        v11 = (unint64_t)(v8 + 64) >> 6;
        do
        {
          v12 = *v10++;
          *v9++ = v12;
          --v11;
        }
        while (v11);
      }
    }
  }
  llvm::APFloat::convert((uint64_t)v42, &unk_1C866F15C, 1, &v41);
  v13 = v41;
  if ((_UNKNOWN *)v43 == &unk_1C866F1C0)
  {
    v39 = v41;
    sub_1C4773C74((uint64_t *)&v44);
LABEL_75:
    v13 = v39;
    goto LABEL_23;
  }
  if ((*(_DWORD *)(v43 + 8) - 64) <= 0xFFFFFF7F && v44)
  {
    v39 = v41;
    MEMORY[0x1CAA32F9C](v44, 0x1000C8000313F17);
    goto LABEL_75;
  }
LABEL_23:
  if (!v13)
    return ***(_QWORD ***)v1 + 1624;
  v41 = 0;
  v14 = *(_QWORD *)v3;
  if (*(_UNKNOWN **)v3 == &unk_1C866F1C0)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v43, v3);
  }
  else
  {
    v43 = *(_QWORD *)v3;
    if ((*(_DWORD *)(v14 + 8) + 64) >= 0x80)
      v44 = (llvm::detail::DoubleAPFloat *)operator new[]();
    v15 = *((_BYTE *)v1 + 52);
    v16 = v15 & 7;
    v46 = v46 & 0xF0 | v15 & 0xF;
    v45 = *((_DWORD *)v1 + 12);
    v18 = (v15 & 6) != 0 && v16 != 3;
    if (v16 == 1 || v18)
    {
      v19 = *(unsigned int *)(v43 + 8);
      if ((v19 - 64) <= 0xFFFFFF7F)
        v20 = (llvm::detail::DoubleAPFloat **)v44;
      else
        v20 = &v44;
      v21 = (llvm::detail::DoubleAPFloat **)((char *)v1 + 40);
      if ((*(_DWORD *)(*((_QWORD *)v1 + 4) + 8) - 64) < 0xFFFFFF80)
        v21 = (llvm::detail::DoubleAPFloat **)*((_QWORD *)v1 + 5);
      if (v19 <= 0xFFFFFFBF)
      {
        v22 = (unint64_t)(v19 + 64) >> 6;
        do
        {
          v23 = *v21++;
          *v20++ = v23;
          --v22;
        }
        while (v22);
      }
    }
  }
  llvm::APFloat::convert((uint64_t)v42, &unk_1C866F184, 1, &v41);
  v24 = v41;
  if ((_UNKNOWN *)v43 == &unk_1C866F1C0)
  {
    v40 = v41;
    sub_1C4773C74((uint64_t *)&v44);
LABEL_80:
    v24 = v40;
    goto LABEL_44;
  }
  if ((*(_DWORD *)(v43 + 8) - 64) <= 0xFFFFFF7F && v44)
  {
    v40 = v41;
    MEMORY[0x1CAA32F9C](v44, 0x1000C8000313F17);
    goto LABEL_80;
  }
LABEL_44:
  v25 = *(_QWORD ***)v1;
  if (!v24)
    return **v25 + 1672;
  if (*((_BYTE *)v25 + 8) == 3)
    return 0;
  v41 = 0;
  v26 = *(_QWORD *)v3;
  if (*(_UNKNOWN **)v3 == &unk_1C866F1C0)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v43, v3);
  }
  else
  {
    v43 = *(_QWORD *)v3;
    if ((*(_DWORD *)(v26 + 8) + 64) >= 0x80)
      v44 = (llvm::detail::DoubleAPFloat *)operator new[]();
    v27 = *((_BYTE *)v1 + 52);
    v28 = v27 & 7;
    v46 = v46 & 0xF0 | v27 & 0xF;
    v45 = *((_DWORD *)v1 + 12);
    v30 = (v27 & 6) != 0 && v28 != 3;
    if (v28 == 1 || v30)
    {
      v31 = *(unsigned int *)(v43 + 8);
      if ((v31 - 64) <= 0xFFFFFF7F)
        v32 = (llvm::detail::DoubleAPFloat **)v44;
      else
        v32 = &v44;
      v33 = (llvm::detail::DoubleAPFloat **)((char *)v1 + 40);
      if ((*(_DWORD *)(*((_QWORD *)v1 + 4) + 8) - 64) < 0xFFFFFF80)
        v33 = (llvm::detail::DoubleAPFloat **)*((_QWORD *)v1 + 5);
      if (v31 <= 0xFFFFFFBF)
      {
        v34 = (unint64_t)(v31 + 64) >> 6;
        do
        {
          v35 = *v33++;
          *v32++ = v35;
          --v34;
        }
        while (v34);
      }
    }
  }
  llvm::APFloat::convert((uint64_t)v42, &unk_1C866F198, 1, &v41);
  v36 = v41;
  if ((_UNKNOWN *)v43 == &unk_1C866F1C0)
  {
    sub_1C4773C74((uint64_t *)&v44);
  }
  else if ((*(_DWORD *)(v43 + 8) - 64) <= 0xFFFFFF7F)
  {
    if (v44)
      MEMORY[0x1CAA32F9C](v44, 0x1000C8000313F17);
  }
  if (v36)
    return 0;
  return ***(_QWORD ***)v1 + 1696;
}

uint64_t sub_1C57E8700(_QWORD **a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;

  v3 = *(unsigned __int8 *)(a2 + 16);
  v4 = v3 - 28;
  v6 = v3 < 0x1C && v3 != 5 || a2 == 0;
  v7 = v6;
  if (!v6)
  {
    if (v3 <= 0x1B)
      v4 = *(unsigned __int16 *)(a2 + 18);
    if (v4 == 42
      && ((v8 = *(_DWORD *)(a2 + 20), (v8 & 0x40000000) != 0)
        ? (v9 = *(uint64_t **)(a2 - 8))
        : (v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF))),
          (v10 = *v9) != 0))
    {
      **a1 = v10;
      v2 = 1;
    }
    else
    {
      v2 = 0;
    }
  }
  return v2 & (v7 ^ 1u);
}

uint64_t sub_1C57E876C(_QWORD **a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;

  v3 = *(unsigned __int8 *)(a2 + 16);
  v4 = v3 - 28;
  v6 = v3 < 0x1C && v3 != 5 || a2 == 0;
  v7 = v6;
  if (!v6)
  {
    if (v3 <= 0x1B)
      v4 = *(unsigned __int16 *)(a2 + 18);
    if (v4 == 41
      && ((v8 = *(_DWORD *)(a2 + 20), (v8 & 0x40000000) != 0)
        ? (v9 = *(uint64_t **)(a2 - 8))
        : (v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF))),
          (v10 = *v9) != 0))
    {
      **a1 = v10;
      v2 = 1;
    }
    else
    {
      v2 = 0;
    }
  }
  return v2 & (v7 ^ 1u);
}

uint64_t sub_1C57E87D8(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v3 = a3 - a2;
  v4 = *(unsigned int *)(result + 8);
  v5 = a3 - a2 + v4;
  if (v5 > *(unsigned int *)(result + 12))
  {
    v9 = a3 - a2;
    v10 = result;
    v7 = a3;
    v8 = a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod(result, result + 16, v5, 4);
    a2 = v8;
    v3 = v9;
    a3 = v7;
    result = v10;
    v4 = *(unsigned int *)(v10 + 8);
  }
  if (a3 != a2)
  {
    v6 = (_DWORD *)(*(_QWORD *)result + 4 * v4);
    do
      *v6++ = a2++;
    while (a3 != a2);
    LODWORD(v4) = *(_DWORD *)(result + 8);
  }
  *(_DWORD *)(result + 8) = v4 + v3;
  return result;
}

uint64_t sub_1C57E8864(unsigned __int8 *a1, unint64_t a2, uint64_t a3, llvm::Type *a4, uint64_t a5)
{
  unsigned int v5;
  uint64_t result;
  llvm::UndefValue *v11;
  uint64_t v12;
  int v13;
  llvm::UndefValue **v14;
  const char *v15;
  unsigned int v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  llvm::Type *v20;
  int v21;
  _QWORD *v22;
  int v23;
  llvm::Type ***v24;
  const char *v25;
  unsigned int v26;
  unint64_t v27;
  const char *v28;
  int v29;
  llvm::UndefValue **v30;
  int v31;
  char *v32;
  int v33;
  llvm::UndefValue *v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  const char *v38;
  unint64_t v39;
  int v40;
  llvm::UndefValue **v41;
  unint64_t v42;
  unint64_t v43;
  const char *v44;
  unint64_t PrimitiveSizeInBits;
  unint64_t v46;
  _QWORD *v47;
  const char *v48;
  int v49;
  llvm::Constant *v50;
  const char *v51;
  int v52;
  _QWORD *v53;
  llvm::Constant *v54;
  unint64_t v55;
  llvm::Value **v56;
  llvm::Constant *v57;
  uint64_t LShr;
  llvm::UndefValue *v59;
  BOOL v61;
  _DWORD *v62;
  _DWORD *v63;
  int v64;
  _DWORD *v65;
  _DWORD *v66;
  int v67;
  int v68;
  int v69;

  v5 = a1[16];
  if (v5 - 11 < 2)
    return 1;
  v11 = (llvm::UndefValue *)a1;
  while (1)
  {
    if (*(llvm::Type **)v11 == a4)
    {
      if (v5 > 0x14 || (llvm::Constant::isNullValue(v11) & 1) == 0)
      {
        PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(a4);
        if ((_DWORD)v44 == 1)
        v46 = a2 / PrimitiveSizeInBits;
        if ((_DWORD)a5)
          v46 = *(_DWORD *)(a3 + 8) + ~(a2 / PrimitiveSizeInBits);
        else
          v46 = v46;
        if (*(_QWORD *)(*(_QWORD *)a3 + 8 * v46))
          return 0;
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v46) = v11;
      }
      return 1;
    }
    if (v5 <= 0x14)
      break;
    v12 = *((_QWORD *)v11 + 1);
    if (!v12)
      return 0;
    result = 0;
    if (v5 < 0x1C || *(_QWORD *)(v12 + 8))
      return result;
    result = 0;
    if ((int)v5 <= 66)
    {
      if (v5 == 57)
      {
        v21 = *((_DWORD *)v11 + 5);
        if ((v21 & 0x40000000) != 0)
          v22 = (_QWORD *)*((_QWORD *)v11 - 1);
        else
          v22 = (_QWORD *)((char *)v11 - 32 * (v21 & 0x7FFFFFF));
        result = sub_1C57E8864(*v22, a2, a3, a4, a5);
        if (!(_DWORD)result)
          return result;
        v31 = *((_DWORD *)v11 + 5);
        if ((v31 & 0x40000000) != 0)
          v32 = (char *)*((_QWORD *)v11 - 1);
        else
          v32 = (char *)v11 - 32 * (v31 & 0x7FFFFFF);
        v11 = (llvm::UndefValue *)*((_QWORD *)v32 + 4);
        goto LABEL_46;
      }
      if (v5 != 53)
        return result;
      v33 = *((_DWORD *)v11 + 5);
      v34 = (v33 & 0x40000000) != 0
          ? (llvm::UndefValue *)*((_QWORD *)v11 - 1)
          : (llvm::UndefValue *)((char *)v11 - 32 * (v33 & 0x7FFFFFF));
      result = 0;
      v35 = *((_QWORD *)v34 + 4);
      if (!v35 || *(_BYTE *)(v35 + 16) != 16)
        return result;
      v36 = (_QWORD *)(v35 + 24);
      if (*(_DWORD *)(v35 + 32) >= 0x41u)
        v36 = (_QWORD *)*v36;
      v37 = *(_DWORD *)v36;
      v39 = llvm::Type::getPrimitiveSizeInBits(a4);
      if ((_DWORD)v38 == 1)
      a2 = (a2 + v37);
      if (a2 % v39)
        return 0;
      v40 = *((_DWORD *)v11 + 5);
      if ((v40 & 0x40000000) != 0)
        v41 = (llvm::UndefValue **)*((_QWORD *)v11 - 1);
      else
        v41 = (llvm::UndefValue **)((char *)v11 - 32 * (v40 & 0x7FFFFFF));
      v11 = *v41;
      v5 = *((unsigned __int8 *)*v41 + 16);
      result = 1;
      if (v5 - 11 <= 1)
        return result;
    }
    else
    {
      if (v5 == 67)
      {
        v23 = *((_DWORD *)v11 + 5);
        if ((v23 & 0x40000000) != 0)
          v24 = (llvm::Type ***)*((_QWORD *)v11 - 1);
        else
          v24 = (llvm::Type ***)((char *)v11 - 32 * (v23 & 0x7FFFFFF));
        v26 = llvm::Type::getPrimitiveSizeInBits(**v24);
        if ((_DWORD)v25 == 1)
        v27 = llvm::Type::getPrimitiveSizeInBits(a4);
        if ((_DWORD)v28 == 1)
        {
          v43 = v27;
          v27 = v43;
        }
        if (v26 % v27)
          return 0;
        v29 = *((_DWORD *)v11 + 5);
        if ((v29 & 0x40000000) != 0)
          v30 = (llvm::UndefValue **)*((_QWORD *)v11 - 1);
        else
          v30 = (llvm::UndefValue **)((char *)v11 - 32 * (v29 & 0x7FFFFFF));
        v11 = *v30;
      }
      else
      {
        if (v5 != 77)
          return result;
        v13 = *((_DWORD *)v11 + 5);
        if ((v13 & 0x40000000) != 0)
          v14 = (llvm::UndefValue **)*((_QWORD *)v11 - 1);
        else
          v14 = (llvm::UndefValue **)((char *)v11 - 32 * (v13 & 0x7FFFFFF));
        v11 = *v14;
        if ((*(_DWORD *)(*(_QWORD *)*v14 + 8) & 0xFE) == 0x12)
          return 0;
      }
LABEL_46:
      v5 = *((unsigned __int8 *)v11 + 16);
      if (v5 - 11 < 2)
        return 1;
    }
  }
  v16 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v11);
  if ((_DWORD)v15 == 1)
  v17 = llvm::Type::getPrimitiveSizeInBits(a4);
  if ((_DWORD)v18 == 1)
  {
    v42 = v17;
    v17 = v42;
  }
  v19 = v16 / v17;
  v20 = *(llvm::Type **)v11;
  if ((_DWORD)v19 == 1)
  {
    if (v20 != a4)
      v11 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v11, a4, 0);
    goto LABEL_46;
  }
  if (*((_BYTE *)v20 + 8) != 13)
  {
    v47 = *(_QWORD **)v20;
    v49 = llvm::Type::getPrimitiveSizeInBits(v20);
    if ((_DWORD)v48 == 1)
    v68 = v49;
    if (v49 <= 63)
    {
      if (v49 <= 31)
      {
        switch(v49)
        {
          case 16:
            v50 = (llvm::Constant *)(*v47 + 1936);
            goto LABEL_85;
          case 8:
            v50 = (llvm::Constant *)(*v47 + 1912);
            goto LABEL_85;
          case 1:
            v50 = (llvm::Constant *)(*v47 + 1888);
            goto LABEL_85;
        }
      }
      else if (v49 == 32)
      {
        v50 = (llvm::Constant *)(*v47 + 1960);
        goto LABEL_85;
      }
    }
    else
    {
      if (v49 == 64)
      {
        v50 = (llvm::Constant *)(*v47 + 1984);
        goto LABEL_85;
      }
      if (v49 == 128)
      {
        v50 = (llvm::Constant *)(*v47 + 2008);
        goto LABEL_85;
      }
    }
    v65 = sub_1C5270984(*v47 + 2168, &v68);
    v50 = (llvm::Constant *)*((_QWORD *)v65 + 1);
    if (!v50)
    {
      v66 = v65;
      v50 = (llvm::Constant *)sub_1C484358C(*v47 + 2040, 24, 3);
      v67 = v68;
      *(_QWORD *)v50 = v47;
      *((_QWORD *)v50 + 2) = 0;
      *((_QWORD *)v50 + 1) = (v67 << 8) | 0xDu;
      *((_QWORD *)v66 + 1) = v50;
    }
LABEL_85:
    if (*(llvm::Constant **)v11 != v50)
      v11 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v11, v50, 0);
  }
  v52 = llvm::Type::getPrimitiveSizeInBits(a4);
  if ((_DWORD)v51 == 1)
  v53 = **(_QWORD ***)v11;
  v69 = v52;
  if (v52 <= 63)
  {
    if (v52 > 31)
    {
      if (v52 == 32)
      {
        v54 = (llvm::Constant *)(*v53 + 1960);
        goto LABEL_97;
      }
      goto LABEL_115;
    }
    switch(v52)
    {
      case 16:
        v54 = (llvm::Constant *)(*v53 + 1936);
        break;
      case 8:
        v54 = (llvm::Constant *)(*v53 + 1912);
        break;
      case 1:
        v54 = (llvm::Constant *)(*v53 + 1888);
        break;
      default:
        goto LABEL_115;
    }
  }
  else
  {
    if (v52 == 64)
    {
      v54 = (llvm::Constant *)(*v53 + 1984);
      goto LABEL_97;
    }
    if (v52 == 128)
    {
      v54 = (llvm::Constant *)(*v53 + 2008);
      goto LABEL_97;
    }
LABEL_115:
    v62 = sub_1C5270984(*v53 + 2168, &v69);
    v54 = (llvm::Constant *)*((_QWORD *)v62 + 1);
    if (!v54)
    {
      v63 = v62;
      v54 = (llvm::Constant *)sub_1C484358C(*v53 + 2040, 24, 3);
      v64 = v69;
      *(_QWORD *)v54 = v53;
      *((_QWORD *)v54 + 2) = 0;
      *((_QWORD *)v54 + 1) = (v64 << 8) | 0xDu;
      *((_QWORD *)v63 + 1) = v54;
    }
  }
LABEL_97:
  if (!(_DWORD)v19)
    return 1;
  v55 = v19 - 1;
  do
  {
    v56 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v11, a2, 0);
    LShr = llvm::ConstantExpr::getLShr(v11, (llvm::Constant *)v56, 0, v57);
    v59 = sub_1C537D3B8((llvm *)0x26, LShr, v54, 0);
    result = sub_1C57E8864(v59, a2, a3, a4, a5);
    v61 = v55-- != 0;
    if (!(_DWORD)result)
      break;
    a2 = (a2 + v52);
  }
  while (v61);
  return result;
}

uint64_t sub_1C57E8E8C(_QWORD **a1, uint64_t a2)
{
  int v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(a2 + 16) != 89)
    return 0;
  v2 = *(_DWORD *)(a2 + 20);
  v3 = (v2 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v2 & 0x7FFFFFF));
  v4 = *v3;
  if (!v4)
    return 0;
  **a1 = v4;
  v5 = *(_DWORD *)(a2 + 20);
  v6 = (v5 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v5 & 0x7FFFFFF);
  v7 = *(_QWORD *)(v6 + 32);
  if (!v7 || *(_BYTE *)(v7 + 16) != 16)
    return 0;
  *a1[1] = v7;
  return 1;
}

BOOL sub_1C57E8F04(llvm::APInt *this, llvm::Constant *a2)
{
  unsigned int v3;
  BOOL v5;
  llvm::APFloatBase *SplatValue;

  v3 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v3 == 16)
    return sub_1C4D8A8E4((uint64_t)a2 + 24, this);
  v5 = v3 <= 0x14 && (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 18;
  if (v5
    && (SplatValue = llvm::Constant::getSplatValue(a2, (llvm::Type *)1)) != 0
    && (a2 = SplatValue, *((_BYTE *)SplatValue + 16) == 16))
  {
    return sub_1C4D8A8E4((uint64_t)a2 + 24, this);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1C57E8F80(_QWORD **a1, int a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v15;

  v5 = *(unsigned __int8 *)(a3 + 16);
  LOBYTE(v6) = a2 + 28;
  if (a2 + 28 != v5)
  {
    if (v5 == 5)
    {
      if (*(unsigned __int16 *)(a3 + 18) != a2)
        goto LABEL_34;
      v12 = *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
      v13 = *(unsigned __int8 *)(v12 + 16);
      if (v13 != 5)
      {
        if (v13 == 53 && sub_1C4B03864(a1, *(_QWORD *)(v12 - 64)))
        {
          v6 = *(_QWORD *)(v12 - 32);
          if (v6 && *(unsigned __int8 *)(v6 + 16) <= 0x14u)
          {
LABEL_32:
            *a1[1] = v6;
            v6 = *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32);
            if (v6)
            {
              *a1[2] = v6;
              LOBYTE(v6) = 1;
            }
            return (v5 == 5) & v6;
          }
        }
        goto LABEL_34;
      }
      if (*(_WORD *)(v12 + 18) != 25
        || !sub_1C4B03864(a1, *(_QWORD *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF))))
      {
LABEL_34:
        LOBYTE(v6) = 0;
        return (v5 == 5) & v6;
      }
      v6 = *(_QWORD *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) + 32);
      if (v6)
        goto LABEL_32;
    }
    return (v5 == 5) & v6;
  }
  v7 = *(_QWORD *)(a3 - 64);
  v8 = *(unsigned __int8 *)(v7 + 16);
  if (v8 == 5)
  {
    if (*(_WORD *)(v7 + 18) == 25)
    {
      result = sub_1C4B03864(a1, *(_QWORD *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF)));
      if (!(_DWORD)result)
        return result;
      v10 = *(_QWORD *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) + 32);
      if (v10)
        goto LABEL_25;
    }
    return 0;
  }
  if (v8 != 53)
    return 0;
  result = sub_1C4B03864(a1, *(_QWORD *)(v7 - 64));
  if (!(_DWORD)result)
    return result;
  v10 = *(_QWORD *)(v7 - 32);
  if (!v10 || *(unsigned __int8 *)(v10 + 16) > 0x14u)
    return 0;
LABEL_25:
  result = 0;
  *a1[1] = v10;
  v15 = *(_QWORD *)(a3 - 32);
  if (v15)
  {
    if (*(unsigned __int8 *)(v15 + 16) <= 0x14u)
    {
      *a1[2] = v15;
      return 1;
    }
  }
  return result;
}

uint64_t sub_1C57E9144(_QWORD **a1, uint64_t a2)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD **v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)(a2 + 16) != 85)
    return 0;
  v4 = *(_DWORD *)(a2 + 20);
  v5 = (v4 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v4 & 0x7FFFFFF));
  v6 = *v5;
  if (!v6)
    return 0;
  v7 = a1 + 1;
  **a1 = v6;
  v8 = *(_DWORD *)(a2 + 20);
  if ((v8 & 0x40000000) != 0)
    v9 = *(_QWORD *)(a2 - 8);
  else
    v9 = a2 - 32 * (v8 & 0x7FFFFFF);
  result = sub_1C57DCAD0(v7, *(_QWORD *)(v9 + 32));
  if ((_DWORD)result)
  {
    v11 = *(_DWORD *)(a2 + 20);
    if ((v11 & 0x40000000) != 0)
      v12 = *(_QWORD *)(a2 - 8);
    else
      v12 = a2 - 32 * (v11 & 0x7FFFFFF);
    v13 = *(_QWORD *)(v12 + 64);
    if (v13)
    {
      *a1[2] = v13;
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1C57E91F4(_QWORD **a1, uint64_t a2)
{
  int v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD **v8;
  int v9;
  uint64_t v10;

  if (*(_BYTE *)(a2 + 16) != 85)
    return 0;
  v2 = *(_DWORD *)(a2 + 20);
  v3 = (v2 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v2 & 0x7FFFFFF));
  v4 = *v3;
  if (!v4)
    return 0;
  **a1 = v4;
  v5 = *(_DWORD *)(a2 + 20);
  v6 = (v5 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v5 & 0x7FFFFFF);
  v7 = *(_QWORD *)(v6 + 32);
  if (!v7)
    return 0;
  *a1[1] = v7;
  v8 = a1 + 2;
  v9 = *(_DWORD *)(a2 + 20);
  if ((v9 & 0x40000000) != 0)
    v10 = *(_QWORD *)(a2 - 8);
  else
    v10 = a2 - 32 * (v9 & 0x7FFFFFF);
  return sub_1C57DCAD0(v8, *(_QWORD *)(v10 + 64));
}

uint64_t sub_1C57E927C(_QWORD **a1, uint64_t a2)
{
  int v4;
  uint64_t *v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  if (*(_BYTE *)(a2 + 16) != 90)
    return 0;
  v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0)
    v5 = *(uint64_t **)(a2 - 8);
  else
    v5 = (uint64_t *)(a2 - 32 * (v4 & 0x7FFFFFF));
  result = sub_1C57E932C(a1, *v5);
  if ((_DWORD)result)
  {
    v7 = *(_DWORD *)(a2 + 20);
    if ((v7 & 0x40000000) != 0)
      v8 = *(_QWORD *)(a2 - 8);
    else
      v8 = a2 - 32 * (v7 & 0x7FFFFFF);
    v9 = *(_QWORD *)(v8 + 32);
    if (v9)
    {
      *a1[1] = v9;
      v10 = *(_DWORD *)(a2 + 20);
      v11 = (v10 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v10 & 0x7FFFFFF);
      v12 = *(_QWORD *)(v11 + 64);
      if (v12)
      {
        *a1[2] = v12;
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_1C57E932C(_QWORD **a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;

  v3 = *(unsigned __int8 *)(a2 + 16);
  v4 = v3 - 28;
  v6 = v3 < 0x1C && v3 != 5 || a2 == 0;
  v7 = v6;
  if (!v6)
  {
    if (v3 <= 0x1B)
      v4 = *(unsigned __int16 *)(a2 + 18);
    if (v4 == 48
      && ((v8 = *(_DWORD *)(a2 + 20), (v8 & 0x40000000) != 0)
        ? (v9 = *(uint64_t **)(a2 - 8))
        : (v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF))),
          (v10 = *v9) != 0))
    {
      **a1 = v10;
      v2 = 1;
    }
    else
    {
      v2 = 0;
    }
  }
  return v2 & (v7 ^ 1u);
}

uint64_t sub_1C57E9398(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_8;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t sub_1C57E9444(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C57E95AC(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 40; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C57E95AC(a1, v14, v8);
}

uint64_t sub_1C57E95AC(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 40);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C57E9398((uint64_t)v5, v10, &v11);
      *v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t *sub_1C57E9664(_DWORD *a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t *v8;

  v8 = 0;
  v4 = sub_1C57E9748((uint64_t)a1, *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 4;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_11;
  }
  if (v7 + ~v6 - a1[1] <= v7 >> 3)
  {
LABEL_11:
    sub_1C57E97F4((uint64_t)a1, v7);
    v8 = 0;
    sub_1C57E9748((uint64_t)a1, *a2, &v8);
    result = v8;
  }
  *a1 += 2;
  if (*result != -4096)
    --a1[1];
  *result = *a2;
  result[1] = 0;
  return result;
}

uint64_t sub_1C57E9748(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_5;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_5;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

uint64_t sub_1C57E97F4(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C57E996C(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C57E996C(a1, v14, v9);
}

uint64_t sub_1C57E996C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C57E9748((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t ***sub_1C57E9A2C(uint64_t a1, uint64_t a2, uint64_t a3, llvm::GlobalValue *this, _WORD *a5, llvm::Constant *a6)
{
  llvm::GlobalValue *Section;
  uint64_t v12;
  llvm::Module *v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::APInt *v22;
  unsigned int v23;
  uint64_t ***v24;
  unsigned int *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  llvm::UndefValue *AggregateElement;
  llvm::Constant *v33;
  llvm::ConstantExpr *Value;
  llvm::Constant *v35;
  llvm::UndefValue *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  int v43;
  unsigned int v44;
  BOOL v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t *v56;
  unint64_t v57;
  int v58;
  uint64_t *v59;
  unsigned int *v60;
  unsigned __int8 *v61;
  llvm::ValueAsMetadata *v62;
  _DWORD **v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t *v67;
  const char *v68;
  const llvm::APInt *v69;
  unsigned int v70;
  llvm::ConstantInt *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unsigned __int8 *v75;
  int v76;
  llvm::ConstantInt **v77;
  uint64_t v78;
  llvm::Value **v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  llvm::Value *v84;
  llvm::ConstantInt *v85;
  llvm::ConstantInt **v86;
  uint64_t v87;
  llvm::Value **v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  llvm::Value **v93;
  char *v94;
  llvm::Value ***v95;
  uint64_t v96;
  unsigned int v97;
  _DWORD *v98;
  _QWORD *v99;
  _DWORD *v100;
  llvm::Value *v101;
  llvm::Value ****v102;
  llvm::Value *v103;
  __int16 v104;
  llvm::ConstantInt **v105;
  uint64_t v106;
  llvm::Value **v107;
  uint64_t v108;
  uint64_t v109;
  llvm::Value **v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  llvm::Value ***v114;
  uint64_t v115;
  _DWORD *v116;
  _QWORD *v117;
  _DWORD *v118;
  llvm::Value *v119;
  llvm::Value ****v120;
  llvm::Value *v121;
  llvm::Value **v122;
  char *v123;
  llvm::Value ***v124;
  uint64_t v125;
  unsigned int v126;
  _DWORD *v127;
  _QWORD *v128;
  _DWORD *v129;
  llvm::Value *v130;
  llvm::Value ****v131;
  llvm::Value *v132;
  __int16 v133;
  llvm::Value **v134;
  llvm::Value ***v135;
  uint64_t v136;
  unsigned int v137;
  _DWORD *v138;
  _QWORD *v139;
  _DWORD *v140;
  llvm::Value *v141;
  llvm::Value ****v142;
  llvm::Value *v143;
  uint64_t v144;
  _QWORD *v145;
  llvm::Value **v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  _QWORD *v150;
  char v151;
  llvm::ConstantInt **v152;
  uint64_t v153;
  llvm::Value **v154;
  uint64_t v155;
  uint64_t v156;
  llvm::Value **v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  llvm::Value ***v161;
  uint64_t v162;
  _DWORD *v163;
  _QWORD *v164;
  _DWORD *v165;
  llvm::Value *v166;
  llvm::Value ****v167;
  llvm::Value *v168;
  llvm::Value **v169;
  llvm::Value ***v170;
  uint64_t v171;
  unsigned int v172;
  _DWORD *v173;
  _QWORD *v174;
  _DWORD *v175;
  llvm::Value *v176;
  llvm::Value ****v177;
  llvm::Value *v178;
  uint64_t v179;
  llvm::Value **v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  llvm::ConstantInt *v188;
  unsigned int v189;
  char v190;
  llvm::ConstantInt **v191;
  uint64_t v192;
  llvm::Value **v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t *v196;
  unsigned __int8 *v197;
  uint64_t v198;
  llvm::Value **v199;
  uint64_t v200;
  uint64_t v201;
  llvm::Value **v202;
  uint64_t v203;
  llvm::Value ***v204;
  llvm::Value **v205;
  uint64_t v206;
  unsigned int v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  llvm::Value *v211;
  llvm::Value ****v212;
  llvm::Value *v213;
  _DWORD *v214;
  _DWORD *v215;
  int v216;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unsigned int *v230;
  unint64_t v231;
  int v232;
  int v233;
  int v234;
  int v235;
  int v236;
  _BYTE v237[32];
  __int16 v238;
  uint64_t v239;
  unsigned int v240;
  __int16 v241;
  unsigned int *v242;
  uint64_t v243;
  _QWORD v244[4];

  v244[2] = *MEMORY[0x1E0C80C00];
  if ((*(_WORD *)(a2 + 18) & 1) != 0
    || *(_QWORD *)a2 != *(_QWORD *)(a3 + 72)
    || *((_QWORD *)this + 3) != *(_QWORD *)(a3 + 64)
    || (*((_BYTE *)this + 80) & 1) == 0)
  {
    return 0;
  }
  if (*((_BYTE *)this + 16))
  {
    if (*((_BYTE *)this + 16) == 3)
    {
      if ((*((_DWORD *)this + 5) & 0x7FFFFFF) == 0)
        return 0;
      Section = llvm::GlobalValue::getSection(this);
      if (v12 == 12
        && *(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
        && *((_DWORD *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
      {
        return 0;
      }
    }
  }
  else if (*((llvm::GlobalValue **)this + 9) == (llvm::GlobalValue *)((char *)this + 72)
         && (*((_BYTE *)this + 34) & 0x80) == 0)
  {
    return 0;
  }
  if ((*((_DWORD *)this + 8) & 0xFu) - 5 < 4 || (v24 = 0, ((1 << (*((_DWORD *)this + 8) & 0xF)) & 0x614) == 0))
  {
    v13 = (llvm::Module *)*((_QWORD *)this + 5);
    if (v13 && llvm::Module::getSemanticInterposition(v13) && (*((_BYTE *)this + 33) & 0x40) == 0)
      return 0;
    if ((*((_BYTE *)this + 80) & 2) != 0)
      return 0;
    v14 = (unsigned __int8 *)*((_QWORD *)this - 4);
    v15 = v14[16];
    if (v15 != 14 && v15 != 8)
      return 0;
    v16 = *(_QWORD *)v14;
    v17 = *(_QWORD *)(*(_QWORD *)v14 + 32);
    if (v17 > *(_QWORD *)(a1 + 16))
      return 0;
    v18 = *(_DWORD *)(a3 + 20);
    v19 = v18 & 0x7FFFFFF;
    if ((v18 & 0x7FFFFFFu) < 3)
      return 0;
    v20 = a3 - 32 * v19;
    v21 = *(_QWORD *)(v20 + 32);
    if (*(_BYTE *)(v21 + 16) != 16)
      return 0;
    v22 = (llvm::APInt *)(v21 + 24);
    v23 = *(_DWORD *)(v21 + 32);
    if (v23 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v22) == v23)
        goto LABEL_27;
    }
    else if (!*(_QWORD *)v22)
    {
LABEL_27:
      if (*(unsigned __int8 *)(*(_QWORD *)(v20 + 64) + 16) < 0x15u)
        return 0;
      v231 = v17;
      v26 = (unsigned int *)v244;
      v242 = (unsigned int *)v244;
      v243 = 0x400000000;
      if ((_DWORD)v19 != 3)
      {
        v51 = 0;
        v52 = **(_QWORD **)(v16 + 16);
        v53 = 3;
        while (1)
        {
          v54 = *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32 * v53);
          if (!v54 || *(_BYTE *)(v54 + 16) != 16)
            break;
          v56 = (unint64_t *)(v54 + 24);
          if (*(_DWORD *)(v54 + 32) >= 0x41u)
            v56 = (unint64_t *)*v56;
          v57 = *v56;
          if (HIDWORD(*v56))
            break;
          v58 = *(unsigned __int8 *)(v52 + 8);
          if (v58 == 16 && v52)
          {
            v59 = (uint64_t *)(*(_QWORD *)(v52 + 16) + 8 * v57);
          }
          else
          {
            v24 = 0;
            if (v58 != 17 || !v52)
              goto LABEL_239;
            if (v57 >= *(_QWORD *)(v52 + 32))
              break;
            v59 = (uint64_t *)(v52 + 24);
          }
          v52 = *v59;
          if (v51 >= HIDWORD(v243))
          {
            v60 = v26;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v242, (uint64_t)v26, v51 + 1, 4);
            v26 = v60;
            v51 = v243;
          }
          v242[v51] = v57;
          v51 = v243 + 1;
          LODWORD(v243) = v243 + 1;
          if ((_DWORD)v19 == ++v53)
            goto LABEL_31;
        }
        v24 = 0;
        goto LABEL_239;
      }
LABEL_31:
      v230 = v26;
      if ((_DWORD)v231)
      {
        v27 = 0;
        v28 = 0;
        v29 = *((_QWORD *)a5 - 4);
        v234 = -2;
        v30 = 4294967294;
        v31 = -2;
        v235 = -2;
        v232 = -2;
        v233 = -2;
        while (1)
        {
          AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)v14, (llvm::Type *)v27);
          if (!AggregateElement)
            goto LABEL_124;
          Value = AggregateElement;
          v35 = (llvm::Constant *)v243;
          if ((_DWORD)v243)
            Value = llvm::ConstantExpr::getExtractValue(AggregateElement, v242, v243, 0);
          if (a6)
            Value = (llvm::ConstantExpr *)llvm::ConstantExpr::getAnd(Value, a6, v35, v33);
          v36 = llvm::ConstantFoldCompareInstOperands(a5[9] & 0x3F, (uint64_t)Value, v29, *(llvm::DataLayout **)(a1 + 80), *(_QWORD *)(a1 + 64));
          v37 = *((unsigned __int8 *)v36 + 16);
          if ((v37 - 11) <= 1)
          {
            if ((_DWORD)v27 - 1 == v31)
              v31 = v27;
            if ((_DWORD)v27 - 1 == (_DWORD)v30)
              v30 = v27;
            else
              v30 = v30;
            goto LABEL_84;
          }
          v236 = v31;
          if (v37 != 16)
            goto LABEL_124;
          v38 = v30;
          v39 = v28;
          v40 = v29;
          v41 = *((_DWORD *)v36 + 8);
          if (v41 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase((llvm::UndefValue *)((char *)v36 + 24)) != v41)
            {
LABEL_47:
              v29 = v40;
              v42 = 0;
              if (v233 == -2)
              {
                v236 = v27;
                v233 = v27;
              }
              else
              {
                if (v234 == -2)
                  v48 = v27;
                else
                  v48 = -3;
                v234 = v48;
                if ((_DWORD)v27 - 1 == v236)
                  v49 = v27;
                else
                  v49 = -3;
                v236 = v49;
              }
              goto LABEL_73;
            }
          }
          else if (*((_QWORD *)v36 + 3))
          {
            goto LABEL_47;
          }
          if (v235 == -2)
            v43 = v27;
          else
            v43 = -3;
          if ((_DWORD)v27 - 1 == (_DWORD)v38)
            v44 = v27;
          else
            v44 = -3;
          v45 = v232 == -2;
          v42 = 1;
          if (v232 == -2)
            v46 = v27;
          else
            v46 = v232;
          v232 = v46;
          if (v45)
            v47 = v235;
          else
            v47 = v43;
          v235 = v47;
          if (v45)
            v38 = v27;
          else
            v38 = v44;
          v29 = v40;
LABEL_73:
          if (v27 > 0x3F)
            v42 = 1;
          if (v42)
            v50 = 0;
          else
            v50 = 1 << v27;
          v28 = v50 | v39;
          v30 = v38;
          if (v27 < 0x40 || (v27 & 8) != 0)
          {
            v31 = v236;
          }
          else
          {
            v31 = v236;
            if (v234 == -3 && v235 == -3 && v236 == -3 && (_DWORD)v30 == -3)
              goto LABEL_124;
          }
LABEL_84:
          if (v231 == ++v27)
            goto LABEL_109;
        }
      }
      v28 = 0;
      v232 = -2;
      v235 = -2;
      v31 = -2;
      LODWORD(v30) = -2;
      v233 = -2;
      v234 = -2;
LABEL_109:
      v61 = v14;
      v62 = (llvm::ValueAsMetadata *)a5;
      v63 = *(_DWORD ***)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 64);
      if ((*(_BYTE *)(a3 + 17) & 2) == 0)
      {
        llvm::DataLayout::getIntPtrType(*(llvm::DataLayout **)(a1 + 80), *(llvm::Type **)a3);
        v65 = v64;
        v66 = *(unsigned int *)(v64 + 8);
        if (llvm::Type::getPrimitiveSizeInBits((llvm::Type *)*v63) > v66 >> 8)
        {
          v67 = *(uint64_t **)(a1 + 24);
          v241 = 257;
          v63 = (_DWORD **)sub_1C4773E38(v67, 38, (unsigned __int8 *)v63, v65, (uint64_t)&v239);
        }
      }
      v70 = sub_1C4E3D148(*(_QWORD *)(a1 + 80), **(_QWORD **)(*(_QWORD *)v61 + 16));
      if ((_DWORD)v68 == 1)
      if (v234 == -3)
      {
        if (v235 == -3)
        {
          if (v31 == -3)
          {
            if ((_DWORD)v30 == -3)
            {
              v71 = (llvm::ConstantInt *)*v63;
              if (v231 <= (unint64_t)(*v63)[2] >> 8)
              {
LABEL_225:
                if (!(*(_BYTE *)(a3 + 17) & 2 | v70 & 1))
                {
                  v191 = llvm::ConstantInt::get((llvm::ConstantInt *)*v63, -1, 0);
                  v192 = *(_QWORD *)(a1 + 24);
                  v241 = 257;
                  v193 = llvm::ConstantInt::get(*v191, __clz(__rbit32(v70)), 0);
                  v194 = sub_1C506ED1C(v192, (uint64_t)v191, (uint64_t)v193, (uint64_t)&v239, 0);
                  v195 = *(_QWORD *)(a1 + 24);
                  v241 = 257;
                  v63 = (_DWORD **)sub_1C4D89BCC(v195, v63, v194, (uint64_t)&v239);
                }
                v196 = *(uint64_t **)(a1 + 24);
                v241 = 257;
                v197 = sub_1C4D8D514(v196, (unsigned __int8 *)v63, (uint64_t)v71, 0, (uint64_t)&v239);
                v198 = *(_QWORD *)(a1 + 24);
                v199 = llvm::ConstantInt::get(v71, v28, 0);
                v241 = 257;
                v200 = sub_1C506ED1C(v198, (uint64_t)v199, (uint64_t)v197, (uint64_t)&v239, 0);
                v201 = *(_QWORD *)(a1 + 24);
                v202 = llvm::ConstantInt::get(v71, 1, 0);
                v241 = 257;
                v203 = sub_1C4D89BCC(v201, v202, v200, (uint64_t)&v239);
                v94 = (char *)operator new(0x80uLL);
                v24 = (uint64_t ***)(v94 + 64);
                *((_DWORD *)v94 + 21) = *((_DWORD *)v94 + 21) & 0x38000000 | 2;
                *(_QWORD *)v94 = 0;
                *((_QWORD *)v94 + 1) = 0;
                *((_QWORD *)v94 + 2) = 0;
                *((_QWORD *)v94 + 3) = v94 + 64;
                *((_QWORD *)v94 + 4) = 0;
                v204 = (llvm::Value ***)(v94 + 32);
                *((_QWORD *)v94 + 5) = 0;
                *((_QWORD *)v94 + 6) = 0;
                *((_QWORD *)v94 + 7) = v94 + 64;
                v205 = llvm::ConstantInt::get(v71, 0, 0);
                v241 = 257;
                sub_1C4774CC4(*(_DWORD **)v203);
                *((_QWORD *)v94 + 8) = v206;
                *((_QWORD *)v94 + 9) = 0;
                v207 = *((_DWORD *)v94 + 21) & 0xC0000000 | 2;
                *((_DWORD *)v94 + 20) = 81;
                *((_DWORD *)v94 + 21) = v207;
                *(_OWORD *)(v94 + 88) = 0u;
                *(_OWORD *)(v94 + 104) = 0u;
                *((_DWORD *)v94 + 30) = 0;
                if (*(_QWORD *)v94)
                {
                  **((_QWORD **)v94 + 2) = *((_QWORD *)v94 + 1);
                  v226 = *((_QWORD *)v94 + 1);
                  if (v226)
                    *(_QWORD *)(v226 + 16) = *((_QWORD *)v94 + 2);
                }
                *(_QWORD *)v94 = v203;
                v210 = *(_QWORD *)(v203 + 8);
                v209 = (_QWORD *)(v203 + 8);
                v208 = v210;
                *((_QWORD *)v94 + 1) = v210;
                if (v210)
                  *(_QWORD *)(v208 + 16) = v94 + 8;
                *((_QWORD *)v94 + 2) = v209;
                *v209 = v94;
                if (*((_QWORD *)v94 + 4))
                {
                  **((_QWORD **)v94 + 6) = *((_QWORD *)v94 + 5);
                  v227 = *((_QWORD *)v94 + 5);
                  if (v227)
                    *(_QWORD *)(v227 + 16) = *((_QWORD *)v94 + 6);
                }
                *v204 = v205;
                if (v205)
                {
                  v213 = v205[1];
                  v212 = (llvm::Value ****)(v205 + 1);
                  v211 = v213;
                  *((_QWORD *)v94 + 5) = v213;
                  if (v213)
                    *((_QWORD *)v211 + 2) = v94 + 40;
                  *((_QWORD *)v94 + 6) = v212;
                  *v212 = v204;
                }
LABEL_235:
                v104 = 33;
LABEL_236:
                *((_WORD *)v94 + 41) = v104;
                goto LABEL_237;
              }
              v72 = *(_QWORD *)(a1 + 80);
              v73 = *(_QWORD *)(v72 + 40);
              if (v73)
              {
                v74 = **(_QWORD ***)v61;
                v75 = *(unsigned __int8 **)(v72 + 32);
                while (1)
                {
                  v76 = *v75;
                  if (v76 >= v231)
                    break;
                  v24 = 0;
                  ++v75;
                  --v73;
                  v26 = v230;
                  if (!v73)
                    goto LABEL_239;
                }
                LODWORD(v239) = *v75;
                if (v76 <= 63)
                {
                  if (v76 <= 31)
                  {
                    switch(v76)
                    {
                      case 16:
                        v71 = (llvm::ConstantInt *)(*v74 + 1936);
                        goto LABEL_225;
                      case 8:
                        v71 = (llvm::ConstantInt *)(*v74 + 1912);
                        goto LABEL_225;
                      case 1:
                        v71 = (llvm::ConstantInt *)(*v74 + 1888);
                        goto LABEL_225;
                    }
                  }
                  else if (v76 == 32)
                  {
                    v71 = (llvm::ConstantInt *)(*v74 + 1960);
                    goto LABEL_225;
                  }
                }
                else
                {
                  if (v76 == 64)
                  {
                    v71 = (llvm::ConstantInt *)(*v74 + 1984);
                    goto LABEL_225;
                  }
                  if (v76 == 128)
                  {
                    v71 = (llvm::ConstantInt *)(*v74 + 2008);
                    goto LABEL_225;
                  }
                }
                v214 = sub_1C5270984(*v74 + 2168, &v239);
                v71 = (llvm::ConstantInt *)*((_QWORD *)v214 + 1);
                if (!v71)
                {
                  v215 = v214;
                  v71 = (llvm::ConstantInt *)sub_1C484358C(*v74 + 2040, 24, 3);
                  v216 = v239;
                  *(_QWORD *)v71 = v74;
                  *((_QWORD *)v71 + 2) = 0;
                  *((_QWORD *)v71 + 1) = (v216 << 8) | 0xDu;
                  *((_QWORD *)v215 + 1) = v71;
                }
                goto LABEL_225;
              }
LABEL_124:
              v24 = 0;
LABEL_238:
              v26 = v230;
LABEL_239:
              if (v242 != v26)
                free(v242);
              return v24;
            }
            if (!(*(_BYTE *)(a3 + 17) & 2 | v70 & 1))
            {
              v152 = llvm::ConstantInt::get((llvm::ConstantInt *)*v63, -1, 0);
              v153 = *(_QWORD *)(a1 + 24);
              v241 = 257;
              v154 = llvm::ConstantInt::get(*v152, __clz(__rbit32(v70)), 0);
              v155 = sub_1C506ED1C(v153, (uint64_t)v152, (uint64_t)v154, (uint64_t)&v239, 0);
              v156 = *(_QWORD *)(a1 + 24);
              v241 = 257;
              v63 = (_DWORD **)sub_1C4D89BCC(v156, v63, v155, (uint64_t)&v239);
            }
            if (v232)
            {
              v157 = llvm::ConstantInt::get((llvm::ConstantInt *)*v63, -v232, 0);
              v158 = *(_QWORD *)(a1 + 24);
              v238 = 257;
              v159 = (*(uint64_t (**)(_QWORD, _DWORD **, llvm::Value **, _QWORD, _QWORD))(**(_QWORD **)(v158 + 72)
                                                                                                  + 16))(*(_QWORD *)(v158 + 72), v63, v157, 0, 0);
              if (!v159)
              {
                v241 = 257;
                v160 = (char *)operator new(0x80uLL);
                *(_QWORD *)v160 = 0;
                *((_QWORD *)v160 + 2) = 0;
                *((_QWORD *)v160 + 1) = 0;
                *((_QWORD *)v160 + 5) = 0;
                *((_QWORD *)v160 + 6) = 0;
                *((_QWORD *)v160 + 4) = 0;
                v161 = (llvm::Value ***)(v160 + 32);
                *((_QWORD *)v160 + 8) = *v63;
                v162 = (uint64_t)(v160 + 64);
                *((_QWORD *)v160 + 3) = v160 + 64;
                *((_QWORD *)v160 + 7) = v160 + 64;
                *((_QWORD *)v160 + 9) = 0;
                v160[80] = 41;
                v160[81] = 0;
                *((_WORD *)v160 + 41) = 0;
                *((_DWORD *)v160 + 21) = 2;
                *((_DWORD *)v160 + 30) = 0;
                *(_OWORD *)(v160 + 104) = 0u;
                *(_OWORD *)(v160 + 88) = 0u;
                *(_QWORD *)v160 = v63;
                v165 = v63[1];
                v164 = v63 + 1;
                v163 = v165;
                *((_QWORD *)v160 + 1) = v165;
                if (v165)
                  *((_QWORD *)v163 + 2) = v160 + 8;
                *((_QWORD *)v160 + 2) = v164;
                *v164 = v160;
                if (*((_QWORD *)v160 + 4))
                {
                  **((_QWORD **)v160 + 6) = *((_QWORD *)v160 + 5);
                  v229 = *((_QWORD *)v160 + 5);
                  if (v229)
                    *(_QWORD *)(v229 + 16) = *((_QWORD *)v160 + 6);
                }
                *v161 = v157;
                if (v157)
                {
                  v168 = v157[1];
                  v167 = (llvm::Value ****)(v157 + 1);
                  v166 = v168;
                  *((_QWORD *)v160 + 5) = v168;
                  if (v168)
                    *((_QWORD *)v166 + 2) = v160 + 40;
                  *((_QWORD *)v160 + 6) = v167;
                  *v167 = v161;
                }
                llvm::Value::setName((uint64_t ***)v160 + 8, (uint64_t)&v239);
                v159 = sub_1C4773754((uint64_t *)v158, v162, (uint64_t)v237);
              }
              v63 = (_DWORD **)v159;
            }
            v169 = llvm::ConstantInt::get((llvm::ConstantInt *)*v63, (int)v30 - v232, 0);
            v123 = (char *)operator new(0x80uLL);
            v24 = (uint64_t ***)(v123 + 64);
            *((_DWORD *)v123 + 21) = *((_DWORD *)v123 + 21) & 0x38000000 | 2;
            *(_QWORD *)v123 = 0;
            *((_QWORD *)v123 + 1) = 0;
            *((_QWORD *)v123 + 2) = 0;
            *((_QWORD *)v123 + 3) = v123 + 64;
            *((_QWORD *)v123 + 4) = 0;
            v170 = (llvm::Value ***)(v123 + 32);
            *((_QWORD *)v123 + 5) = 0;
            *((_QWORD *)v123 + 6) = 0;
            *((_QWORD *)v123 + 7) = v123 + 64;
            v241 = 257;
            sub_1C4774CC4(*v63);
            *((_QWORD *)v123 + 8) = v171;
            *((_QWORD *)v123 + 9) = 0;
            v172 = *((_DWORD *)v123 + 21) & 0xC0000000 | 2;
            *((_DWORD *)v123 + 20) = 81;
            *((_DWORD *)v123 + 21) = v172;
            *(_OWORD *)(v123 + 88) = 0u;
            *(_OWORD *)(v123 + 104) = 0u;
            *((_DWORD *)v123 + 30) = 0;
            if (*(_QWORD *)v123)
            {
              **((_QWORD **)v123 + 2) = *((_QWORD *)v123 + 1);
              v224 = *((_QWORD *)v123 + 1);
              if (v224)
                *(_QWORD *)(v224 + 16) = *((_QWORD *)v123 + 2);
            }
            *(_QWORD *)v123 = v63;
            v175 = v63[1];
            v174 = v63 + 1;
            v173 = v175;
            *((_QWORD *)v123 + 1) = v175;
            if (v175)
              *((_QWORD *)v173 + 2) = v123 + 8;
            *((_QWORD *)v123 + 2) = v174;
            *v174 = v123;
            if (*((_QWORD *)v123 + 4))
            {
              **((_QWORD **)v123 + 6) = *((_QWORD *)v123 + 5);
              v225 = *((_QWORD *)v123 + 5);
              if (v225)
                *(_QWORD *)(v225 + 16) = *((_QWORD *)v123 + 6);
            }
            *v170 = v169;
            if (v169)
            {
              v178 = v169[1];
              v177 = (llvm::Value ****)(v169 + 1);
              v176 = v178;
              *((_QWORD *)v123 + 5) = v178;
              if (v178)
                *((_QWORD *)v176 + 2) = v123 + 40;
              *((_QWORD *)v123 + 6) = v177;
              *v177 = v170;
            }
            v133 = 34;
          }
          else
          {
            if (!(*(_BYTE *)(a3 + 17) & 2 | v70 & 1))
            {
              v105 = llvm::ConstantInt::get((llvm::ConstantInt *)*v63, -1, 0);
              v106 = *(_QWORD *)(a1 + 24);
              v241 = 257;
              v107 = llvm::ConstantInt::get(*v105, __clz(__rbit32(v70)), 0);
              v108 = sub_1C506ED1C(v106, (uint64_t)v105, (uint64_t)v107, (uint64_t)&v239, 0);
              v109 = *(_QWORD *)(a1 + 24);
              v241 = 257;
              v63 = (_DWORD **)sub_1C4D89BCC(v109, v63, v108, (uint64_t)&v239);
            }
            if (v233)
            {
              v110 = llvm::ConstantInt::get((llvm::ConstantInt *)*v63, -v233, 0);
              v111 = *(_QWORD *)(a1 + 24);
              v238 = 257;
              v112 = (*(uint64_t (**)(_QWORD, _DWORD **, llvm::Value **, _QWORD, _QWORD))(**(_QWORD **)(v111 + 72)
                                                                                                  + 16))(*(_QWORD *)(v111 + 72), v63, v110, 0, 0);
              if (!v112)
              {
                v241 = 257;
                v113 = (char *)operator new(0x80uLL);
                *(_QWORD *)v113 = 0;
                *((_QWORD *)v113 + 2) = 0;
                *((_QWORD *)v113 + 1) = 0;
                *((_QWORD *)v113 + 5) = 0;
                *((_QWORD *)v113 + 6) = 0;
                *((_QWORD *)v113 + 4) = 0;
                v114 = (llvm::Value ***)(v113 + 32);
                *((_QWORD *)v113 + 8) = *v63;
                v115 = (uint64_t)(v113 + 64);
                *((_QWORD *)v113 + 3) = v113 + 64;
                *((_QWORD *)v113 + 7) = v113 + 64;
                *((_QWORD *)v113 + 9) = 0;
                v113[80] = 41;
                v113[81] = 0;
                *((_WORD *)v113 + 41) = 0;
                *((_DWORD *)v113 + 21) = 2;
                *((_DWORD *)v113 + 30) = 0;
                *(_OWORD *)(v113 + 104) = 0u;
                *(_OWORD *)(v113 + 88) = 0u;
                *(_QWORD *)v113 = v63;
                v118 = v63[1];
                v117 = v63 + 1;
                v116 = v118;
                *((_QWORD *)v113 + 1) = v118;
                if (v118)
                  *((_QWORD *)v116 + 2) = v113 + 8;
                *((_QWORD *)v113 + 2) = v117;
                *v117 = v113;
                if (*((_QWORD *)v113 + 4))
                {
                  **((_QWORD **)v113 + 6) = *((_QWORD *)v113 + 5);
                  v228 = *((_QWORD *)v113 + 5);
                  if (v228)
                    *(_QWORD *)(v228 + 16) = *((_QWORD *)v113 + 6);
                }
                *v114 = v110;
                if (v110)
                {
                  v121 = v110[1];
                  v120 = (llvm::Value ****)(v110 + 1);
                  v119 = v121;
                  *((_QWORD *)v113 + 5) = v121;
                  if (v121)
                    *((_QWORD *)v119 + 2) = v113 + 40;
                  *((_QWORD *)v113 + 6) = v120;
                  *v120 = v114;
                }
                llvm::Value::setName((uint64_t ***)v113 + 8, (uint64_t)&v239);
                v112 = sub_1C4773754((uint64_t *)v111, v115, (uint64_t)v237);
              }
              v63 = (_DWORD **)v112;
            }
            v122 = llvm::ConstantInt::get((llvm::ConstantInt *)*v63, v31 - v233 + 1, 0);
            v123 = (char *)operator new(0x80uLL);
            v24 = (uint64_t ***)(v123 + 64);
            *((_DWORD *)v123 + 21) = *((_DWORD *)v123 + 21) & 0x38000000 | 2;
            *(_QWORD *)v123 = 0;
            *((_QWORD *)v123 + 1) = 0;
            *((_QWORD *)v123 + 2) = 0;
            *((_QWORD *)v123 + 3) = v123 + 64;
            *((_QWORD *)v123 + 4) = 0;
            v124 = (llvm::Value ***)(v123 + 32);
            *((_QWORD *)v123 + 5) = 0;
            *((_QWORD *)v123 + 6) = 0;
            *((_QWORD *)v123 + 7) = v123 + 64;
            v241 = 257;
            sub_1C4774CC4(*v63);
            *((_QWORD *)v123 + 8) = v125;
            *((_QWORD *)v123 + 9) = 0;
            v126 = *((_DWORD *)v123 + 21) & 0xC0000000 | 2;
            *((_DWORD *)v123 + 20) = 81;
            *((_DWORD *)v123 + 21) = v126;
            *(_OWORD *)(v123 + 88) = 0u;
            *(_OWORD *)(v123 + 104) = 0u;
            *((_DWORD *)v123 + 30) = 0;
            if (*(_QWORD *)v123)
            {
              **((_QWORD **)v123 + 2) = *((_QWORD *)v123 + 1);
              v220 = *((_QWORD *)v123 + 1);
              if (v220)
                *(_QWORD *)(v220 + 16) = *((_QWORD *)v123 + 2);
            }
            *(_QWORD *)v123 = v63;
            v129 = v63[1];
            v128 = v63 + 1;
            v127 = v129;
            *((_QWORD *)v123 + 1) = v129;
            if (v129)
              *((_QWORD *)v127 + 2) = v123 + 8;
            *((_QWORD *)v123 + 2) = v128;
            *v128 = v123;
            if (*((_QWORD *)v123 + 4))
            {
              **((_QWORD **)v123 + 6) = *((_QWORD *)v123 + 5);
              v221 = *((_QWORD *)v123 + 5);
              if (v221)
                *(_QWORD *)(v221 + 16) = *((_QWORD *)v123 + 6);
            }
            *v124 = v122;
            if (v122)
            {
              v132 = v122[1];
              v131 = (llvm::Value ****)(v122 + 1);
              v130 = v132;
              *((_QWORD *)v123 + 5) = v132;
              if (v132)
                *((_QWORD *)v130 + 2) = v123 + 40;
              *((_QWORD *)v123 + 6) = v131;
              *v131 = v124;
            }
            v133 = 36;
          }
          *((_WORD *)v123 + 41) = v133;
LABEL_237:
          llvm::Value::setName(v24, (uint64_t)&v239);
          goto LABEL_238;
        }
        if (!(*(_BYTE *)(a3 + 17) & 2 | v70 & 1))
        {
          v86 = llvm::ConstantInt::get((llvm::ConstantInt *)*v63, -1, 0);
          v87 = *(_QWORD *)(a1 + 24);
          v241 = 257;
          v88 = llvm::ConstantInt::get(*v86, __clz(__rbit32(v70)), 0);
          v89 = sub_1C506ED1C(v87, (uint64_t)v86, (uint64_t)v88, (uint64_t)&v239, 0);
          v90 = *(_QWORD *)(a1 + 24);
          v241 = 257;
          v63 = (_DWORD **)sub_1C4D89BCC(v90, v63, v89, (uint64_t)&v239);
        }
        if (v232 == -2)
        {
          v91 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 64);
          v92 = *v91;
          v84 = *(llvm::Value **)(*v91 + 1560);
          if (!v84)
          {
            v188 = *(llvm::ConstantInt **)(v92 + 1888);
            v189 = *(_DWORD *)(v92 + 1896);
            v240 = v189 >> 8;
            if (v189 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v239, 1, 0);
            }
            else
            {
              if (v189 <= 0xFF)
                v190 = 0;
              else
                v190 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v189);
              v239 = v190 & 1;
            }
            v84 = llvm::ConstantInt::get(v188, (llvm::LLVMContext *)&v239, v69);
            if (v240 >= 0x41 && v239)
              MEMORY[0x1CAA32F9C](v239, 0x1000C8000313F17);
            *(_QWORD *)(v92 + 1560) = v84;
          }
LABEL_137:
          v24 = (uint64_t ***)sub_1C577F888(a1, v62, v84);
          goto LABEL_238;
        }
        v134 = llvm::ConstantInt::get((llvm::ConstantInt *)*v63, v232, 0);
        if (v235 == -2)
        {
          v94 = (char *)operator new(0x80uLL);
          v24 = (uint64_t ***)(v94 + 64);
          *((_DWORD *)v94 + 21) = *((_DWORD *)v94 + 21) & 0x38000000 | 2;
          *(_QWORD *)v94 = 0;
          *((_QWORD *)v94 + 1) = 0;
          *((_QWORD *)v94 + 2) = 0;
          *((_QWORD *)v94 + 3) = v94 + 64;
          *((_QWORD *)v94 + 4) = 0;
          v135 = (llvm::Value ***)(v94 + 32);
          *((_QWORD *)v94 + 5) = 0;
          *((_QWORD *)v94 + 6) = 0;
          *((_QWORD *)v94 + 7) = v94 + 64;
          v241 = 257;
          sub_1C4774CC4(*v63);
          *((_QWORD *)v94 + 8) = v136;
          *((_QWORD *)v94 + 9) = 0;
          v137 = *((_DWORD *)v94 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v94 + 20) = 81;
          *((_DWORD *)v94 + 21) = v137;
          *(_OWORD *)(v94 + 88) = 0u;
          *(_OWORD *)(v94 + 104) = 0u;
          *((_DWORD *)v94 + 30) = 0;
          if (*(_QWORD *)v94)
          {
            **((_QWORD **)v94 + 2) = *((_QWORD *)v94 + 1);
            v222 = *((_QWORD *)v94 + 1);
            if (v222)
              *(_QWORD *)(v222 + 16) = *((_QWORD *)v94 + 2);
          }
          *(_QWORD *)v94 = v63;
          v140 = v63[1];
          v139 = v63 + 1;
          v138 = v140;
          *((_QWORD *)v94 + 1) = v140;
          if (v140)
            *((_QWORD *)v138 + 2) = v94 + 8;
          *((_QWORD *)v94 + 2) = v139;
          *v139 = v94;
          if (*((_QWORD *)v94 + 4))
          {
            **((_QWORD **)v94 + 6) = *((_QWORD *)v94 + 5);
            v223 = *((_QWORD *)v94 + 5);
            if (v223)
              *(_QWORD *)(v223 + 16) = *((_QWORD *)v94 + 6);
          }
          *v135 = v134;
          if (v134)
          {
            v143 = v134[1];
            v142 = (llvm::Value ****)(v134 + 1);
            v141 = v143;
            *((_QWORD *)v94 + 5) = v143;
            if (v143)
              *((_QWORD *)v141 + 2) = v94 + 40;
            *((_QWORD *)v94 + 6) = v142;
            *v142 = v135;
          }
          goto LABEL_235;
        }
        v179 = *(_QWORD *)(a1 + 24);
        v241 = 257;
        v145 = (_QWORD *)sub_1C4774B48(v179, 33, (uint64_t)v63, (uint64_t)v134, (uint64_t)&v239);
        v180 = llvm::ConstantInt::get((llvm::ConstantInt *)*v63, v235, 0);
        v181 = *(_QWORD *)(a1 + 24);
        v241 = 257;
        v148 = sub_1C4774B48(v181, 33, (uint64_t)v63, (uint64_t)v180, (uint64_t)&v239);
        v241 = 257;
        v149 = (char *)operator new(0x80uLL);
        *((_QWORD *)v149 + 5) = 0;
        v150 = v149 + 40;
        *((_QWORD *)v149 + 6) = 0;
        *((_QWORD *)v149 + 8) = *v145;
        v24 = (uint64_t ***)(v149 + 64);
        *((_QWORD *)v149 + 3) = v149 + 64;
        *((_QWORD *)v149 + 7) = v149 + 64;
        *((_QWORD *)v149 + 9) = 0;
        v151 = 56;
      }
      else
      {
        if (!(*(_BYTE *)(a3 + 17) & 2 | v70 & 1))
        {
          v77 = llvm::ConstantInt::get((llvm::ConstantInt *)*v63, -1, 0);
          v78 = *(_QWORD *)(a1 + 24);
          v241 = 257;
          v79 = llvm::ConstantInt::get(*v77, __clz(__rbit32(v70)), 0);
          v80 = sub_1C506ED1C(v78, (uint64_t)v77, (uint64_t)v79, (uint64_t)&v239, 0);
          v81 = *(_QWORD *)(a1 + 24);
          v241 = 257;
          v63 = (_DWORD **)sub_1C4D89BCC(v81, v63, v80, (uint64_t)&v239);
        }
        if (v233 == -2)
        {
          v82 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 64);
          v83 = *v82;
          v84 = *(llvm::Value **)(*v82 + 1568);
          if (!v84)
          {
            v85 = *(llvm::ConstantInt **)(v83 + 1888);
            v240 = *(_DWORD *)(v83 + 1896) >> 8;
            if (v240 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v239, 0, 0);
            else
              v239 = 0;
            v84 = llvm::ConstantInt::get(v85, (llvm::LLVMContext *)&v239, v69);
            if (v240 >= 0x41 && v239)
              MEMORY[0x1CAA32F9C](v239, 0x1000C8000313F17);
            *(_QWORD *)(v83 + 1568) = v84;
          }
          goto LABEL_137;
        }
        v93 = llvm::ConstantInt::get((llvm::ConstantInt *)*v63, v233, 0);
        if (v234 == -2)
        {
          v94 = (char *)operator new(0x80uLL);
          v24 = (uint64_t ***)(v94 + 64);
          *((_DWORD *)v94 + 21) = *((_DWORD *)v94 + 21) & 0x38000000 | 2;
          *(_QWORD *)v94 = 0;
          *((_QWORD *)v94 + 1) = 0;
          *((_QWORD *)v94 + 2) = 0;
          *((_QWORD *)v94 + 3) = v94 + 64;
          *((_QWORD *)v94 + 4) = 0;
          v95 = (llvm::Value ***)(v94 + 32);
          *((_QWORD *)v94 + 5) = 0;
          *((_QWORD *)v94 + 6) = 0;
          *((_QWORD *)v94 + 7) = v94 + 64;
          v241 = 257;
          sub_1C4774CC4(*v63);
          *((_QWORD *)v94 + 8) = v96;
          *((_QWORD *)v94 + 9) = 0;
          v97 = *((_DWORD *)v94 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v94 + 20) = 81;
          *((_DWORD *)v94 + 21) = v97;
          *(_OWORD *)(v94 + 88) = 0u;
          *(_OWORD *)(v94 + 104) = 0u;
          *((_DWORD *)v94 + 30) = 0;
          if (*(_QWORD *)v94)
          {
            **((_QWORD **)v94 + 2) = *((_QWORD *)v94 + 1);
            v218 = *((_QWORD *)v94 + 1);
            if (v218)
              *(_QWORD *)(v218 + 16) = *((_QWORD *)v94 + 2);
          }
          *(_QWORD *)v94 = v63;
          v100 = v63[1];
          v99 = v63 + 1;
          v98 = v100;
          *((_QWORD *)v94 + 1) = v100;
          if (v100)
            *((_QWORD *)v98 + 2) = v94 + 8;
          *((_QWORD *)v94 + 2) = v99;
          *v99 = v94;
          if (*((_QWORD *)v94 + 4))
          {
            **((_QWORD **)v94 + 6) = *((_QWORD *)v94 + 5);
            v219 = *((_QWORD *)v94 + 5);
            if (v219)
              *(_QWORD *)(v219 + 16) = *((_QWORD *)v94 + 6);
          }
          *v95 = v93;
          if (v93)
          {
            v103 = v93[1];
            v102 = (llvm::Value ****)(v93 + 1);
            v101 = v103;
            *((_QWORD *)v94 + 5) = v103;
            if (v103)
              *((_QWORD *)v101 + 2) = v94 + 40;
            *((_QWORD *)v94 + 6) = v102;
            *v102 = v95;
          }
          v104 = 32;
          goto LABEL_236;
        }
        v144 = *(_QWORD *)(a1 + 24);
        v241 = 257;
        v145 = (_QWORD *)sub_1C4774B48(v144, 32, (uint64_t)v63, (uint64_t)v93, (uint64_t)&v239);
        v146 = llvm::ConstantInt::get((llvm::ConstantInt *)*v63, v234, 0);
        v147 = *(_QWORD *)(a1 + 24);
        v241 = 257;
        v148 = sub_1C4774B48(v147, 32, (uint64_t)v63, (uint64_t)v146, (uint64_t)&v239);
        v241 = 257;
        v149 = (char *)operator new(0x80uLL);
        *((_QWORD *)v149 + 5) = 0;
        v150 = v149 + 40;
        *((_QWORD *)v149 + 6) = 0;
        *((_QWORD *)v149 + 8) = *v145;
        v24 = (uint64_t ***)(v149 + 64);
        *((_QWORD *)v149 + 3) = v149 + 64;
        *((_QWORD *)v149 + 7) = v149 + 64;
        *((_QWORD *)v149 + 9) = 0;
        v151 = 57;
      }
      v149[80] = v151;
      v149[81] = 0;
      *((_WORD *)v149 + 41) = 0;
      *((_DWORD *)v149 + 21) = 2;
      *(_OWORD *)(v149 + 88) = 0u;
      *(_OWORD *)(v149 + 104) = 0u;
      *((_DWORD *)v149 + 30) = 0;
      *(_QWORD *)v149 = v145;
      v184 = v145[1];
      v183 = v145 + 1;
      v182 = v184;
      *((_QWORD *)v149 + 1) = v184;
      if (v184)
        *(_QWORD *)(v182 + 16) = v149 + 8;
      *((_QWORD *)v149 + 2) = v183;
      *v183 = v149;
      *((_QWORD *)v149 + 4) = v148;
      if (v148)
      {
        v187 = *(_QWORD *)(v148 + 8);
        v186 = (_QWORD *)(v148 + 8);
        v185 = v187;
        *v150 = v187;
        if (v187)
          *(_QWORD *)(v185 + 16) = v150;
        *((_QWORD *)v149 + 6) = v186;
        *v186 = v149 + 32;
      }
      goto LABEL_237;
    }
    return 0;
  }
  return v24;
}

uint64_t ***sub_1C57EAF84(uint64_t a1, uint64_t a2, llvm::Constant *this, int a4, llvm::ValueAsMetadata *a5)
{
  uint64_t ***v5;
  int v7;
  llvm::Value *i;
  int v11;
  llvm::Value **v12;
  llvm::Value *v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  llvm::Value **v20;
  int v21;
  llvm::Value **v22;
  int v23;
  llvm::Constant **v24;
  int v25;
  int v26;
  _DWORD ***v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _DWORD ***v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  llvm::Value **v40;
  llvm::Value **v41;
  char *v42;
  llvm::Value ***v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  llvm::Value *v47;
  _QWORD *v48;
  llvm::Value *v49;
  llvm::Value *v50;
  llvm::Value ****v51;
  llvm::Value *v52;
  _DWORD **VectorSplat;
  int v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  llvm::UndefValue **v58;
  llvm::Type *v59;
  llvm::UndefValue *PointerBitCastOrAddrSpaceCast;
  uint64_t v61;
  unsigned int v62;
  _DWORD *v63;
  _QWORD *v64;
  _DWORD *v65;
  uint64_t v66;
  llvm::UndefValue ***v67;
  uint64_t v68;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  llvm::Value **v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  char *v81;
  _QWORD *v82;
  int v83;
  uint64_t *v84;
  unsigned int v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  llvm::Type *v96;
  llvm::Type *v97;
  unint64_t v98;
  int v99;
  int v100;
  int v101;
  BOOL v102;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  char *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  unsigned int **v116;
  uint64_t *v118;
  unsigned int v119;
  unint64_t v120;
  llvm::StructLayout *StructLayout;
  unint64_t v122;
  llvm::UndefValue *AggregateElement;
  unsigned int *v124;
  unsigned int *v125;
  unsigned int *v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  BOOL v130;
  const char *v131;
  char v132;
  char v133;
  unsigned int v134;
  uint64_t v135;
  unint64_t v136;
  llvm::UndefValue *v137;
  BOOL v138;
  unsigned int *v139;
  unsigned int *v140;
  unsigned int *v141;
  uint64_t v142;
  int v143;
  BOOL v144;
  const char *v145;
  char v146;
  int v147;
  int v148;
  llvm::Type ***v149;
  uint64_t v150;
  int v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  unsigned int j;
  int v163;
  uint64_t v164;
  uint64_t v165;
  BOOL v166;
  uint64_t *v167;
  unsigned int v168;
  unint64_t v169;
  llvm::StructLayout *v170;
  unint64_t v171;
  llvm::UndefValue *v172;
  unsigned int *v173;
  unsigned int *v174;
  unsigned int *v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  BOOL v179;
  const char *v180;
  char v181;
  char v182;
  unsigned int v183;
  uint64_t v184;
  unsigned int *v185;
  llvm::ConstantInt *v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t *v193;
  int v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  llvm::Value *v199;
  int v200;
  llvm::Value **v201;
  uint64_t v202;
  llvm::Type **v203;
  unsigned __int8 *v204;
  llvm::Type *v205;
  llvm::Type *v206;
  unint64_t PrimitiveSizeInBits;
  unint64_t v208;
  uint64_t *v209;
  llvm::Value **v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  llvm::Value ***v214;
  uint64_t v215;
  unsigned int *v216;
  _QWORD *v217;
  unsigned int *v218;
  llvm::Value *v219;
  llvm::Value ****v220;
  llvm::Value *v221;
  char *v222;
  llvm::Value ***v223;
  int v224;
  llvm::Type *v225;
  llvm::Value **NullValue;
  uint64_t v227;
  unsigned int v228;
  unsigned int *v229;
  _QWORD *v230;
  unsigned int *v231;
  llvm::Value *v232;
  llvm::Value ****v233;
  llvm::Value *v234;
  int v235;
  uint64_t v236;
  char *v237;
  uint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  unsigned int v243;
  uint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  llvm::Value *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  char v266;
  uint64_t v267;
  uint64_t v268;
  llvm::ConstantInt **v269;
  int v270;
  uint64_t v271;
  int v272[2];
  unsigned int v273;
  int v274;
  int v275;
  llvm::DataLayout *v276;
  const char *v277;
  __int16 v278;
  llvm::UndefValue **v279;
  uint64_t v280;
  _BYTE v281[32];
  __int16 v282;

  if ((a4 - 38) < 4)
    return 0;
  v7 = a4;
LABEL_4:
  for (i = this; ; i = *v22)
  {
    if (*((_BYTE *)i + 16) != 62)
      i = llvm::Value::stripPointerCasts(i);
    v11 = *(_DWORD *)(a2 + 20);
    v12 = (v11 & 0x40000000) != 0 ? *(llvm::Value ***)(a2 - 8) : (llvm::Value **)(a2 - 32 * (v11 & 0x7FFFFFF));
    v13 = *v12;
    v14 = *(_BYTE *)(a2 + 17) & 2;
    if (v13 == i)
      break;
LABEL_14:
    if ((v7 & 0xFFFFFFFE) == 0x20
      && v14
      && *((unsigned __int8 *)i + 16) <= 0x14u
      && llvm::Constant::isNullValue(i))
    {
      v15 = *(_DWORD *)(*(_QWORD *)i + 8);
      if ((v15 & 0xFE) == 0x12)
        v15 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)i + 16) + 8);
      v16 = *(_QWORD *)(*((_QWORD *)a5 + 5) + 56);
      if ((!v16 || (v17 = *(_QWORD *)(v16 + 112)) == 0 || (*(_BYTE *)(v17 + 17) & 1) == 0) && v15 <= 0xFF)
      {
        v26 = *(_DWORD *)(a2 + 20);
        if ((v26 & 0x40000000) != 0)
          v27 = *(_DWORD ****)(a2 - 8);
        else
          v27 = (_DWORD ***)(a2 - 32 * (v26 & 0x7FFFFFF));
        VectorSplat = *v27;
        v54 = *(_DWORD *)(*(_QWORD *)a2 + 8);
        if ((v54 & 0xFE) == 0x12 && *((_BYTE *)*VectorSplat + 8) == 15)
        {
          v55 = *(unsigned int *)(*(_QWORD *)a2 + 32);
          v56 = *(_QWORD *)(a1 + 24);
          v282 = 257;
          VectorSplat = (_DWORD **)llvm::IRBuilderBase::CreateVectorSplat(v56, (llvm::Type *)(v55 | ((unint64_t)(v54 == 19) << 32)), (uint64_t ***)VectorSplat, (uint64_t)v281);
        }
        v57 = (char *)operator new(0x80uLL);
        v5 = (uint64_t ***)(v57 + 64);
        *((_DWORD *)v57 + 21) = *((_DWORD *)v57 + 21) & 0x38000000 | 2;
        *(_QWORD *)v57 = 0;
        *((_QWORD *)v57 + 1) = 0;
        *((_QWORD *)v57 + 2) = 0;
        *((_QWORD *)v57 + 3) = v57 + 64;
        *((_QWORD *)v57 + 4) = 0;
        v58 = (llvm::UndefValue **)(v57 + 32);
        *((_QWORD *)v57 + 5) = 0;
        *((_QWORD *)v57 + 6) = 0;
        *((_QWORD *)v57 + 7) = v57 + 64;
        PointerBitCastOrAddrSpaceCast = llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast(i, (llvm::Constant *)*VectorSplat, v59);
        v282 = 257;
        sub_1C4774CC4(*VectorSplat);
        *((_QWORD *)v57 + 8) = v61;
        *((_QWORD *)v57 + 9) = 0;
        v62 = *((_DWORD *)v57 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v57 + 20) = 81;
        *((_DWORD *)v57 + 21) = v62;
        *(_OWORD *)(v57 + 88) = 0u;
        *(_OWORD *)(v57 + 104) = 0u;
        *((_DWORD *)v57 + 30) = 0;
        if (*(_QWORD *)v57)
        {
          **((_QWORD **)v57 + 2) = *((_QWORD *)v57 + 1);
          v253 = *((_QWORD *)v57 + 1);
          if (v253)
            *(_QWORD *)(v253 + 16) = *((_QWORD *)v57 + 2);
        }
        *(_QWORD *)v57 = VectorSplat;
        v65 = VectorSplat[1];
        v64 = VectorSplat + 1;
        v63 = v65;
        *((_QWORD *)v57 + 1) = v65;
        if (v65)
          *((_QWORD *)v63 + 2) = v57 + 8;
        *((_QWORD *)v57 + 2) = v64;
        *v64 = v57;
        if (*((_QWORD *)v57 + 4))
        {
          **((_QWORD **)v57 + 6) = *((_QWORD *)v57 + 5);
          v254 = *((_QWORD *)v57 + 5);
          if (v254)
            *(_QWORD *)(v254 + 16) = *((_QWORD *)v57 + 6);
        }
        *v58 = PointerBitCastOrAddrSpaceCast;
        if (PointerBitCastOrAddrSpaceCast)
        {
          v68 = *((_QWORD *)PointerBitCastOrAddrSpaceCast + 1);
          v67 = (llvm::UndefValue ***)((char *)PointerBitCastOrAddrSpaceCast + 8);
          v66 = v68;
          *((_QWORD *)v57 + 5) = v68;
          if (v68)
            *(_QWORD *)(v66 + 16) = v57 + 40;
          *((_QWORD *)v57 + 6) = v67;
          *v67 = v58;
        }
        *((_WORD *)v57 + 41) = v7;
        goto LABEL_95;
      }
    }
LABEL_24:
    v18 = *((unsigned __int8 *)i + 16);
    if (v18 != 62 && (v18 != 5 || *((_WORD *)i + 9) != 34))
      return sub_1C57EC3F0(a2, (uint64_t *)i, v7, *(const llvm::DataLayout **)(a1 + 80));
    v19 = *((_DWORD *)i + 5);
    if ((v19 & 0x40000000) != 0)
      v20 = (llvm::Value **)*((_QWORD *)i - 1);
    else
      v20 = (llvm::Value **)((char *)i - 32 * (v19 & 0x7FFFFFF));
    if (v13 != *v20)
    {
      v28 = *(_DWORD *)(a2 + 20);
      if (((v28 ^ v19) & 0x7FFFFFF) == 0
        && *(_QWORD *)a2 == *(_QWORD *)i
        && (*(_BYTE *)(a2 + 16) != 62 ? (v29 = 24) : (v29 = 64),
            (v30 = *(_QWORD *)(a2 + v29), v18 != 62) ? (v31 = 24) : (v31 = 64),
            v30 == *(_QWORD *)((char *)i + v31)))
      {
        v202 = v28 & 0x7FFFFFF;
        if ((v28 & 0x7FFFFFF) == 1)
        {
          v32 = 1;
        }
        else
        {
          v235 = 2;
          do
          {
            v236 = a2 - 32 * v202;
            if ((v28 & 0x40000000) != 0)
              v236 = *(_QWORD *)(a2 - 8);
            v237 = (char *)i - 32 * (v19 & 0x7FFFFFF);
            if ((v19 & 0x40000000) != 0)
              v237 = (char *)*((_QWORD *)i - 1);
            v102 = *(_QWORD *)(v236 + 32 * (v235 - 1)) == *(_QWORD *)&v237[32 * (v235 - 1)];
            v32 = v102;
          }
          while (v102 && (_DWORD)v202 != v235++);
        }
      }
      else
      {
        v32 = 0;
      }
      if ((v28 & 0x40000000) == 0)
      {
        v33 = (_DWORD ***)(a2 - 32 * (v28 & 0x7FFFFFF));
        if (!v32)
          goto LABEL_99;
LABEL_98:
        sub_1C4774CC4(**v33);
        if (v70 == *(_QWORD *)a5)
        {
          v81 = (char *)operator new(0x80uLL);
          v5 = (uint64_t ***)(v81 + 64);
          *((_DWORD *)v81 + 21) = *((_DWORD *)v81 + 21) & 0x38000000 | 2;
          *(_QWORD *)v81 = 0;
          *((_QWORD *)v81 + 1) = 0;
          *((_QWORD *)v81 + 2) = 0;
          *((_QWORD *)v81 + 3) = v81 + 64;
          *((_QWORD *)v81 + 4) = 0;
          v82 = v81 + 32;
          *((_QWORD *)v81 + 5) = 0;
          *((_QWORD *)v81 + 6) = 0;
          *((_QWORD *)v81 + 7) = v81 + 64;
          v83 = *(_DWORD *)(a2 + 20);
          if ((v83 & 0x40000000) != 0)
            v84 = *(uint64_t **)(a2 - 8);
          else
            v84 = (uint64_t *)(a2 - 32 * (v83 & 0x7FFFFFF));
          v150 = *v84;
          v151 = *((_DWORD *)i + 5);
          if ((v151 & 0x40000000) != 0)
            v152 = (uint64_t *)*((_QWORD *)i - 1);
          else
            v152 = (uint64_t *)((char *)i - 32 * (v151 & 0x7FFFFFF));
          v153 = *v152;
          v282 = 257;
          sub_1C4774CC4(*(_DWORD **)v150);
          *((_QWORD *)v81 + 8) = v154;
          *((_QWORD *)v81 + 9) = 0;
          v155 = *((_DWORD *)v81 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v81 + 20) = 81;
          *((_DWORD *)v81 + 21) = v155;
          *(_OWORD *)(v81 + 88) = 0u;
          *(_OWORD *)(v81 + 104) = 0u;
          *((_DWORD *)v81 + 30) = 0;
          if (*(_QWORD *)v81)
          {
            **((_QWORD **)v81 + 2) = *((_QWORD *)v81 + 1);
            v257 = *((_QWORD *)v81 + 1);
            if (v257)
              *(_QWORD *)(v257 + 16) = *((_QWORD *)v81 + 2);
          }
          *(_QWORD *)v81 = v150;
          v158 = *(_QWORD *)(v150 + 8);
          v157 = (_QWORD *)(v150 + 8);
          v156 = v158;
          *((_QWORD *)v81 + 1) = v158;
          if (v158)
            *(_QWORD *)(v156 + 16) = v81 + 8;
          *((_QWORD *)v81 + 2) = v157;
          *v157 = v81;
          if (*((_QWORD *)v81 + 4))
          {
            **((_QWORD **)v81 + 6) = *((_QWORD *)v81 + 5);
            v258 = *((_QWORD *)v81 + 5);
            if (v258)
              *(_QWORD *)(v258 + 16) = *((_QWORD *)v81 + 6);
          }
          *v82 = v153;
          if (v153)
          {
            v161 = *(_QWORD *)(v153 + 8);
            v160 = (_QWORD *)(v153 + 8);
            v159 = v161;
            *((_QWORD *)v81 + 5) = v161;
            if (v161)
              *(_QWORD *)(v159 + 16) = v81 + 40;
            *((_QWORD *)v81 + 6) = v160;
            *v160 = v82;
          }
          *((_WORD *)v81 + 41) = v7;
          goto LABEL_95;
        }
        goto LABEL_99;
      }
      v33 = *(_DWORD ****)(a2 - 8);
      if (v32)
        goto LABEL_98;
LABEL_99:
      if ((*(_BYTE *)(a2 + 17) & 2) != 0 && (*((_BYTE *)i + 17) & 2) != 0)
      {
        v71 = *(_DWORD *)(a2 + 20);
        if ((v71 & 0x40000000) != 0)
        {
          v73 = *(_QWORD *)(a2 - 8);
          v72 = v71 & 0x7FFFFFF;
        }
        else
        {
          v72 = v71 & 0x7FFFFFF;
          v73 = a2 - 32 * v72;
        }
        v104 = (uint64_t *)(v73 + 32);
        v105 = 32 * v72 - 32;
        while (v105)
        {
          v106 = *v104;
          v104 += 4;
          v105 -= 32;
          if (*(_BYTE *)(v106 + 16) != 16)
          {
            v107 = *(_QWORD *)(a2 + 8);
            if (!v107 || *(_QWORD *)(v107 + 8))
              return sub_1C57EC3F0(a2, (uint64_t *)i, v7, *(const llvm::DataLayout **)(a1 + 80));
            break;
          }
        }
        v108 = *((_DWORD *)i + 5);
        if ((v108 & 0x40000000) != 0)
        {
          v110 = (char *)*((_QWORD *)i - 1);
          v109 = v108 & 0x7FFFFFF;
        }
        else
        {
          v109 = v108 & 0x7FFFFFF;
          v110 = (char *)i - 32 * v109;
        }
        v195 = (uint64_t *)(v110 + 32);
        v196 = 32 * v109 - 32;
        while (v196)
        {
          v197 = *v195;
          v195 += 4;
          v196 -= 32;
          if (*(_BYTE *)(v197 + 16) != 16)
          {
            v198 = *((_QWORD *)i + 1);
            if (!v198 || *(_QWORD *)(v198 + 8))
              return sub_1C57EC3F0(a2, (uint64_t *)i, v7, *(const llvm::DataLayout **)(a1 + 80));
            break;
          }
        }
        v199 = llvm::Value::stripPointerCasts(v13);
        v200 = *((_DWORD *)i + 5);
        v201 = (v200 & 0x40000000) != 0
             ? (llvm::Value **)*((_QWORD *)i - 1)
             : (llvm::Value **)((char *)i - 32 * (v200 & 0x7FFFFFF));
        if (v199 == llvm::Value::stripPointerCasts(*v201) && (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) != 0x12)
        {
          v203 = sub_1C61A3B04(*(_QWORD *)(a1 + 24), *(llvm::DataLayout **)(a1 + 80), (llvm::GEPOperator *)a2, 0);
          v204 = (unsigned __int8 *)sub_1C61A3B04(*(_QWORD *)(a1 + 24), *(llvm::DataLayout **)(a1 + 80), i, 0);
          v205 = *v203;
          v206 = *(llvm::Type **)v204;
          if (*v203 != *(llvm::Type **)v204)
          {
            PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*v203);
            v208 = llvm::Type::getPrimitiveSizeInBits(v206);
            v209 = *(uint64_t **)(a1 + 24);
            v282 = 257;
            if (PrimitiveSizeInBits >= v208)
              v203 = (llvm::Type **)sub_1C4773E38(v209, 38, (unsigned __int8 *)v203, (uint64_t)v206, (uint64_t)v281);
            else
              v204 = sub_1C4773E38(v209, 38, v204, (uint64_t)v205, (uint64_t)v281);
          }
          v250 = *(_QWORD *)(a1 + 24);
          v251 = dword_1C8661718[v7 - 32];
          v282 = 257;
          v252 = (llvm::Value *)sub_1C4774B48(v250, v251, (uint64_t)v203, (uint64_t)v204, (uint64_t)v281);
          return (uint64_t ***)sub_1C577F888(a1, a5, v252);
        }
      }
      return sub_1C57EC3F0(a2, (uint64_t *)i, v7, *(const llvm::DataLayout **)(a1 + 80));
    }
    if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) != 0x12 && sub_1C535A110(a2))
    {
      v23 = *(_DWORD *)(a2 + 20);
      if ((v23 & 0x40000000) != 0)
        v24 = *(llvm::Constant ***)(a2 - 8);
      else
        v24 = (llvm::Constant **)(a2 - 32 * (v23 & 0x7FFFFFF));
      this = *v24;
      v7 = dword_1C8661680[v7];
      a2 = (uint64_t)i;
      goto LABEL_4;
    }
    if ((*(_DWORD *)(*(_QWORD *)i + 8) & 0xFE) == 0x12 || !sub_1C535A110((uint64_t)i))
    {
      v269 = (llvm::ConstantInt **)a5;
      v271 = a1;
      v273 = v7;
      if ((*(_BYTE *)(a2 + 17) & 2) != 0)
        v25 = (*((unsigned __int8 *)i + 17) >> 1) & 1;
      else
        v25 = 0;
      v34 = *(_DWORD *)(a2 + 20);
      v35 = *((unsigned int *)i + 5);
      if (((v35 ^ v34) & 0x7FFFFFF) != 0)
        goto LABEL_68;
      v36 = 24;
      if (*(_BYTE *)(a2 + 16) == 62)
        v37 = 64;
      else
        v37 = 24;
      v38 = *(_QWORD *)(a2 + v37);
      if (*((_BYTE *)i + 16) == 62)
        v36 = 64;
      if (v38 == *(_QWORD *)((char *)i + v36))
      {
        v267 = v35 & 0x7FFFFFF;
        if ((v35 & 0x7FFFFFF) == 1)
          goto LABEL_107;
        v85 = 0;
        v86 = 0;
        v87 = a2 - 32 * (v34 & 0x7FFFFFF);
        v88 = 1;
        v89 = 32;
        v90 = (char *)i - 32 * v267;
        v265 = *(_DWORD *)(a2 + 20);
        v264 = v87;
        do
        {
          v91 = v87;
          if ((v34 & 0x40000000) != 0)
            v91 = *(_QWORD *)(a2 - 8);
          v92 = v90;
          if ((v35 & 0x40000000) != 0)
            v92 = (char *)*((_QWORD *)i - 1);
          if (*(_QWORD *)(v91 + v89) != *(_QWORD *)&v92[v89])
          {
            v93 = v87;
            if ((v34 & 0x40000000) != 0)
              v93 = *(_QWORD *)(a2 - 8);
            v275 = v86;
            v94 = v90;
            v95 = v35;
            if ((v35 & 0x40000000) != 0)
              v94 = (char *)*((_QWORD *)i - 1);
            v96 = **(llvm::Type ***)(v93 + v89);
            v97 = **(llvm::Type ***)&v94[v89];
            v98 = llvm::Type::getPrimitiveSizeInBits(v96);
            v100 = v99;
            v102 = v98 == llvm::Type::getPrimitiveSizeInBits(v97) && v100 == v101;
            v34 = v265;
            if (!v102)
              goto LABEL_68;
            v35 = v95;
            if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
            {
              if ((*((_DWORD *)v96 + 2) & 0xFE) != 0x12)
                goto LABEL_68;
              if ((*((_DWORD *)v97 + 2) & 0xFE) != 0x12 || v275 != 0)
                goto LABEL_68;
            }
            else if (v275)
            {
              goto LABEL_68;
            }
            v86 = 1;
            v85 = v88;
            v87 = v264;
            v90 = (char *)i - 32 * v267;
          }
          ++v88;
          v89 += 32;
        }
        while ((_DWORD)v267 != v88);
        if (v86 != 1)
        {
LABEL_107:
          v75 = v273 <= 0x29 && ((1 << v273) & 0x2A90000AA00) != 0;
          v76 = llvm::ConstantInt::get(*v269, v75, 0);
          return (uint64_t ***)sub_1C577F888(v271, (llvm::ValueAsMetadata *)v269, (llvm::Value *)v76);
        }
        v7 = v273;
        a1 = v271;
        if (v25)
        {
          if ((v34 & 0x40000000) != 0)
            v87 = *(_QWORD *)(a2 - 8);
          v239 = *(_QWORD *)(v87 + 32 * v85);
          if ((v35 & 0x40000000) != 0)
            v90 = (char *)*((_QWORD *)i - 1);
          v240 = *(_QWORD *)&v90[32 * v85];
          v222 = (char *)operator new(0x80uLL);
          v5 = (uint64_t ***)(v222 + 64);
          *((_DWORD *)v222 + 21) = *((_DWORD *)v222 + 21) & 0x38000000 | 2;
          *(_QWORD *)v222 = 0;
          *((_QWORD *)v222 + 1) = 0;
          *((_QWORD *)v222 + 2) = 0;
          *((_QWORD *)v222 + 3) = v222 + 64;
          *((_QWORD *)v222 + 4) = 0;
          v241 = v222 + 32;
          *((_QWORD *)v222 + 5) = 0;
          *((_QWORD *)v222 + 6) = 0;
          *((_QWORD *)v222 + 7) = v222 + 64;
          v224 = dword_1C8661718[v273 - 32];
          v282 = 257;
          sub_1C4774CC4(*(_DWORD **)v239);
          *((_QWORD *)v222 + 8) = v242;
          *((_QWORD *)v222 + 9) = 0;
          v243 = *((_DWORD *)v222 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v222 + 20) = 81;
          *((_DWORD *)v222 + 21) = v243;
          *(_OWORD *)(v222 + 88) = 0u;
          *(_OWORD *)(v222 + 104) = 0u;
          *((_DWORD *)v222 + 30) = 0;
          if (*(_QWORD *)v222)
          {
            **((_QWORD **)v222 + 2) = *((_QWORD *)v222 + 1);
            v262 = *((_QWORD *)v222 + 1);
            if (v262)
              *(_QWORD *)(v262 + 16) = *((_QWORD *)v222 + 2);
          }
          *(_QWORD *)v222 = v239;
          v246 = *(_QWORD *)(v239 + 8);
          v245 = (_QWORD *)(v239 + 8);
          v244 = v246;
          *((_QWORD *)v222 + 1) = v246;
          if (v246)
            *(_QWORD *)(v244 + 16) = v222 + 8;
          *((_QWORD *)v222 + 2) = v245;
          *v245 = v222;
          if (*((_QWORD *)v222 + 4))
          {
            **((_QWORD **)v222 + 6) = *((_QWORD *)v222 + 5);
            v263 = *((_QWORD *)v222 + 5);
            if (v263)
              *(_QWORD *)(v263 + 16) = *((_QWORD *)v222 + 6);
          }
          *v241 = v240;
          if (v240)
          {
            v249 = *(_QWORD *)(v240 + 8);
            v248 = (_QWORD *)(v240 + 8);
            v247 = v249;
            *((_QWORD *)v222 + 5) = v249;
            if (v249)
              *(_QWORD *)(v247 + 16) = v222 + 40;
            *((_QWORD *)v222 + 6) = v248;
            *v248 = v241;
          }
          goto LABEL_298;
        }
      }
      else
      {
LABEL_68:
        v7 = v273;
        a1 = v271;
        if (v25)
        {
          if ((*(_BYTE *)(a2 + 16) == 5 || (v74 = *(_QWORD *)(a2 + 8)) != 0 && !*(_QWORD *)(v74 + 8))
            && (*((_BYTE *)i + 16) == 5 || (v39 = *((_QWORD *)i + 1)) != 0 && !*(_QWORD *)(v39 + 8)))
          {
            v40 = sub_1C61A3B04(*(_QWORD *)(v271 + 24), *(llvm::DataLayout **)(v271 + 80), (llvm::GEPOperator *)a2, 0);
            v41 = sub_1C61A3B04(*(_QWORD *)(v271 + 24), *(llvm::DataLayout **)(v271 + 80), i, 0);
            v42 = (char *)operator new(0x80uLL);
            v5 = (uint64_t ***)(v42 + 64);
            *((_DWORD *)v42 + 21) = *((_DWORD *)v42 + 21) & 0x38000000 | 2;
            *(_QWORD *)v42 = 0;
            *((_QWORD *)v42 + 1) = 0;
            *((_QWORD *)v42 + 2) = 0;
            *((_QWORD *)v42 + 3) = v42 + 64;
            *((_QWORD *)v42 + 4) = 0;
            v43 = (llvm::Value ***)(v42 + 32);
            *((_QWORD *)v42 + 5) = 0;
            *((_QWORD *)v42 + 6) = 0;
            *((_QWORD *)v42 + 7) = v42 + 64;
            v44 = dword_1C8661718[v273 - 32];
            v282 = 257;
            sub_1C4774CC4(*v40);
            *((_QWORD *)v42 + 8) = v45;
            *((_QWORD *)v42 + 9) = 0;
            v46 = *((_DWORD *)v42 + 21) & 0xC0000000 | 2;
            *((_DWORD *)v42 + 20) = 81;
            *((_DWORD *)v42 + 21) = v46;
            *(_OWORD *)(v42 + 88) = 0u;
            *(_OWORD *)(v42 + 104) = 0u;
            *((_DWORD *)v42 + 30) = 0;
            if (*(_QWORD *)v42)
            {
              **((_QWORD **)v42 + 2) = *((_QWORD *)v42 + 1);
              v259 = *((_QWORD *)v42 + 1);
              if (v259)
                *(_QWORD *)(v259 + 16) = *((_QWORD *)v42 + 2);
            }
            *(_QWORD *)v42 = v40;
            v49 = v40[1];
            v48 = v40 + 1;
            v47 = v49;
            *((_QWORD *)v42 + 1) = v49;
            if (v49)
              *((_QWORD *)v47 + 2) = v42 + 8;
            *((_QWORD *)v42 + 2) = v48;
            *v48 = v42;
            if (*((_QWORD *)v42 + 4))
            {
              **((_QWORD **)v42 + 6) = *((_QWORD *)v42 + 5);
              v260 = *((_QWORD *)v42 + 5);
              if (v260)
                *(_QWORD *)(v260 + 16) = *((_QWORD *)v42 + 6);
            }
            *v43 = v41;
            if (v41)
            {
              v52 = v41[1];
              v51 = (llvm::Value ****)(v41 + 1);
              v50 = v52;
              *((_QWORD *)v42 + 5) = v52;
              if (v52)
                *((_QWORD *)v50 + 2) = v42 + 40;
              *((_QWORD *)v42 + 6) = v51;
              *v51 = v43;
            }
            *((_WORD *)v42 + 41) = v44;
            goto LABEL_95;
          }
        }
      }
      return sub_1C57EC3F0(a2, (uint64_t *)i, v7, *(const llvm::DataLayout **)(a1 + 80));
    }
    v21 = *((_DWORD *)i + 5);
    if ((v21 & 0x40000000) != 0)
      v22 = (llvm::Value **)*((_QWORD *)i - 1);
    else
      v22 = (llvm::Value **)((char *)i - 32 * (v21 & 0x7FFFFFF));
  }
  if ((*(_BYTE *)(a2 + 17) & 2) == 0)
    goto LABEL_24;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
  {
    v14 = 1;
    goto LABEL_14;
  }
  v77 = 24;
  if (*(_BYTE *)(a2 + 16) == 62)
    v77 = 64;
  v78 = *(_QWORD *)(a2 + v77);
  v274 = v7;
  if ((v11 & 0x40000000) != 0)
  {
    v80 = *(_QWORD *)(a2 - 8);
    v79 = v11 & 0x7FFFFFF;
  }
  else
  {
    v79 = v11 & 0x7FFFFFF;
    v80 = a2 - 32 * (v11 & 0x7FFFFFF);
  }
  *(_QWORD *)v272 = a1;
  v276 = *(llvm::DataLayout **)(a1 + 80);
  v279 = (llvm::UndefValue **)(v80 + 32);
  v280 = v78 | 4;
  if (v79 == 1)
  {
LABEL_287:
    v194 = v274;
    v191 = *(_QWORD *)v272;
    goto LABEL_288;
  }
  v111 = 0;
  v112 = 0;
  v113 = 32;
  v270 = v79;
  while (1)
  {
    v114 = *(_DWORD *)(a2 + 20);
    v115 = (v114 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v114 & 0x7FFFFFF);
    v116 = *(unsigned int ***)(v115 + v113);
    if (!v116 || *((_BYTE *)v116 + 16) != 16)
      break;
    v118 = (uint64_t *)(v116 + 3);
    v119 = *((_DWORD *)v116 + 8);
    if (v119 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v116 + 3)) != v119)
      {
LABEL_167:
        v120 = v280 & 0xFFFFFFFFFFFFFFF8;
        if ((v280 & 4) != 0 || !v120)
        {
          if ((v280 & 4) == 0 || !v120)
          {
            AggregateElement = *v279;
            if (!*v279 || *((_BYTE *)AggregateElement + 16) != 16)
              AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, 0);
            v126 = (unsigned int *)*((_QWORD *)AggregateElement + 3);
            v124 = (unsigned int *)((char *)AggregateElement + 24);
            v125 = v126;
            if (v124[2] < 0x41)
              v125 = v124;
            v120 = *(_QWORD *)(*(_QWORD *)(v120 + 16) + 8 * *v125);
          }
          sub_1C4768AD0((uint64_t)v276, v120);
          v128 = v127;
          v130 = v129 == 1;
          llvm::DataLayout::getAlignment((uint64_t)v276, v120);
          v133 = v132;
          if (v130)
          v134 = *((_DWORD *)v116 + 8);
          v79 = v270;
          if (v134 > 0x40)
            v135 = *(_QWORD *)*v118;
          else
            v135 = *v118 << -(char)v134 >> -(char)v134;
          v122 = v135 * (((1 << v133) + ((unint64_t)(v128 + 7) >> 3) - 1) & -(1 << v133));
        }
        else
        {
          StructLayout = llvm::DataLayout::getStructLayout(v276, (llvm::StructType *)(v280 & 0xFFFFFFFFFFFFFFF8));
          if (*((_DWORD *)v116 + 8) >= 0x41u)
            v118 = (uint64_t *)*v118;
          v122 = *((_QWORD *)StructLayout + *(unsigned int *)v118 + 2);
        }
        v112 += v122;
      }
    }
    else if (*v118)
    {
      goto LABEL_167;
    }
    sub_1C4774E38((uint64_t)&v279);
    --v111;
    v113 += 32;
    if (v79 + v111 == 1)
      goto LABEL_287;
  }
  v136 = v280 & 0xFFFFFFFFFFFFFFF8;
  if ((v280 & 4) == 0 || !v136)
  {
    v137 = *v279;
    if (*v279)
      v138 = *((_BYTE *)*v279 + 16) == 16;
    else
      v138 = 0;
    if (!v138)
      v137 = llvm::Constant::getAggregateElement(v137, 0);
    v141 = (unsigned int *)*((_QWORD *)v137 + 3);
    v139 = (unsigned int *)((char *)v137 + 24);
    v140 = v141;
    if (v139[2] < 0x41)
      v140 = v139;
    v136 = *(_QWORD *)(*(_QWORD *)(v136 + 16) + 8 * *v140);
  }
  sub_1C4768AD0((uint64_t)v276, v136);
  v268 = v142;
  v144 = v143 == 1;
  llvm::DataLayout::getAlignment((uint64_t)v276, v136);
  v266 = v146;
  if (v144)
  sub_1C4774E38((uint64_t)&v279);
  v147 = v270;
  if (v270 + v111 != 2)
  {
    for (j = 2 - v111; v147 != j; ++j)
    {
      v163 = *(_DWORD *)(a2 + 20);
      if ((v163 & 0x40000000) != 0)
        v164 = *(_QWORD *)(a2 - 8);
      else
        v164 = a2 - 32 * (v163 & 0x7FFFFFF);
      v165 = *(_QWORD *)(v164 + 32 * j);
      if (v165)
        v166 = *(_BYTE *)(v165 + 16) == 16;
      else
        v166 = 0;
      if (!v166)
        goto LABEL_287;
      v167 = (uint64_t *)(v165 + 24);
      v168 = *(_DWORD *)(v165 + 32);
      if (v168 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v165 + 24)) != v168)
        {
LABEL_230:
          v169 = v280 & 0xFFFFFFFFFFFFFFF8;
          if ((v280 & 4) != 0 || !v169)
          {
            if ((v280 & 4) == 0 || !v169)
            {
              v172 = *v279;
              if (!*v279 || *((_BYTE *)v172 + 16) != 16)
                v172 = llvm::Constant::getAggregateElement(v172, 0);
              v175 = (unsigned int *)*((_QWORD *)v172 + 3);
              v173 = (unsigned int *)((char *)v172 + 24);
              v174 = v175;
              if (v173[2] < 0x41)
                v174 = v173;
              v169 = *(_QWORD *)(*(_QWORD *)(v169 + 16) + 8 * *v174);
            }
            sub_1C4768AD0((uint64_t)v276, v169);
            v177 = v176;
            v179 = v178 == 1;
            llvm::DataLayout::getAlignment((uint64_t)v276, v169);
            v182 = v181;
            if (v179)
            v183 = *(_DWORD *)(v165 + 32);
            v147 = v270;
            if (v183 > 0x40)
              v184 = *(_QWORD *)*v167;
            else
              v184 = *v167 << -(char)v183 >> -(char)v183;
            v171 = v184 * (((1 << v182) + ((unint64_t)(v177 + 7) >> 3) - 1) & -(1 << v182));
          }
          else
          {
            v170 = llvm::DataLayout::getStructLayout(v276, (llvm::StructType *)(v280 & 0xFFFFFFFFFFFFFFF8));
            if (*(_DWORD *)(v165 + 32) >= 0x41u)
              v167 = (uint64_t *)*v167;
            v171 = *((_QWORD *)v170 + *(unsigned int *)v167 + 2);
          }
          v112 += v171;
        }
      }
      else if (*v167)
      {
        goto LABEL_230;
      }
      sub_1C4774E38((uint64_t)&v279);
    }
  }
  v148 = *(_DWORD *)(a2 + 20);
  if ((v148 & 0x40000000) != 0)
    v149 = *(llvm::Type ****)(a2 - 8);
  else
    v149 = (llvm::Type ***)(a2 - 32 * (v148 & 0x7FFFFFF));
  llvm::DataLayout::getIntPtrType(v276, **v149);
  v186 = (llvm::ConstantInt *)v185;
  v187 = (unint64_t)v185[2] >> 8;
  if (!v112)
  {
    if (llvm::Type::getPrimitiveSizeInBits((llvm::Type *)*v116) > v187)
    {
      v191 = *(_QWORD *)v272;
      v193 = *(uint64_t **)(*(_QWORD *)v272 + 24);
      v282 = 257;
      v116 = (unsigned int **)sub_1C4773E38(v193, 38, (unsigned __int8 *)v116, (uint64_t)v186, (uint64_t)v281);
      v194 = v274;
      goto LABEL_285;
    }
    v194 = v274;
    goto LABEL_290;
  }
  v188 = v112 << -(char)v187 >> -(char)v187;
  v189 = (uint64_t)((((1 << v266) + ((unint64_t)(v268 + 7) >> 3) - 1) & -(1 << v266)) << -(char)v187) >> -(char)v187;
  v190 = v188 / v189;
  if (v188 != v188 / v189 * v189)
    goto LABEL_287;
  v191 = *(_QWORD *)v272;
  if (*v116 != v185)
  {
    v192 = *(uint64_t **)(*(_QWORD *)v272 + 24);
    v282 = 257;
    v116 = (unsigned int **)sub_1C4D8D514(v192, (unsigned __int8 *)v116, (uint64_t)v186, 1, (uint64_t)v281);
  }
  v210 = llvm::ConstantInt::get(v186, v190, 0);
  v211 = *(_QWORD *)(*(_QWORD *)v272 + 24);
  v277 = "offset";
  v278 = 259;
  v212 = (*(uint64_t (**)(_QWORD, unsigned int **, llvm::Value **, _QWORD, _QWORD))(**(_QWORD **)(v211 + 72)
                                                                                            + 16))(*(_QWORD *)(v211 + 72), v116, v210, 0, 0);
  v194 = v274;
  if (!v212)
  {
    v282 = 257;
    v213 = (char *)operator new(0x80uLL);
    *(_QWORD *)v213 = 0;
    *((_QWORD *)v213 + 2) = 0;
    *((_QWORD *)v213 + 1) = 0;
    *((_QWORD *)v213 + 5) = 0;
    *((_QWORD *)v213 + 6) = 0;
    *((_QWORD *)v213 + 4) = 0;
    v214 = (llvm::Value ***)(v213 + 32);
    *((_QWORD *)v213 + 8) = *v116;
    v215 = (uint64_t)(v213 + 64);
    *((_QWORD *)v213 + 3) = v213 + 64;
    *((_QWORD *)v213 + 7) = v213 + 64;
    *((_QWORD *)v213 + 9) = 0;
    v213[80] = 41;
    v213[81] = 0;
    *((_WORD *)v213 + 41) = 0;
    *((_DWORD *)v213 + 21) = 2;
    *((_DWORD *)v213 + 30) = 0;
    *(_OWORD *)(v213 + 104) = 0u;
    *(_OWORD *)(v213 + 88) = 0u;
    *(_QWORD *)v213 = v116;
    v218 = v116[1];
    v217 = v116 + 1;
    v216 = v218;
    *((_QWORD *)v213 + 1) = v218;
    if (v218)
      *((_QWORD *)v216 + 2) = v213 + 8;
    *((_QWORD *)v213 + 2) = v217;
    *v217 = v213;
    if (*((_QWORD *)v213 + 4))
    {
      **((_QWORD **)v213 + 6) = *((_QWORD *)v213 + 5);
      v261 = *((_QWORD *)v213 + 5);
      if (v261)
        *(_QWORD *)(v261 + 16) = *((_QWORD *)v213 + 6);
    }
    *v214 = v210;
    if (v210)
    {
      v221 = v210[1];
      v220 = (llvm::Value ****)(v210 + 1);
      v219 = v221;
      *((_QWORD *)v213 + 5) = v221;
      if (v221)
        *((_QWORD *)v219 + 2) = v213 + 40;
      *((_QWORD *)v213 + 6) = v220;
      *v220 = v214;
    }
    llvm::Value::setName((uint64_t ***)v213 + 8, (uint64_t)v281);
    v212 = sub_1C4773754((uint64_t *)v211, v215, (uint64_t)&v277);
  }
  v116 = (unsigned int **)v212;
LABEL_285:
  if (!v116)
LABEL_288:
    v116 = (unsigned int **)sub_1C61A3B04(*(_QWORD *)(v191 + 24), *(llvm::DataLayout **)(v191 + 80), (llvm::GEPOperator *)a2, 0);
LABEL_290:
  v222 = (char *)operator new(0x80uLL);
  v5 = (uint64_t ***)(v222 + 64);
  *((_DWORD *)v222 + 21) = *((_DWORD *)v222 + 21) & 0x38000000 | 2;
  *(_QWORD *)v222 = 0;
  *((_QWORD *)v222 + 1) = 0;
  *((_QWORD *)v222 + 2) = 0;
  *((_QWORD *)v222 + 3) = v222 + 64;
  *((_QWORD *)v222 + 4) = 0;
  v223 = (llvm::Value ***)(v222 + 32);
  *((_QWORD *)v222 + 5) = 0;
  *((_QWORD *)v222 + 6) = 0;
  *((_QWORD *)v222 + 7) = v222 + 64;
  v224 = dword_1C8661718[v194 - 32];
  NullValue = llvm::Constant::getNullValue((llvm::Constant *)*v116, v225);
  v282 = 257;
  sub_1C4774CC4(*v116);
  *((_QWORD *)v222 + 8) = v227;
  *((_QWORD *)v222 + 9) = 0;
  v228 = *((_DWORD *)v222 + 21) & 0xC0000000 | 2;
  *((_DWORD *)v222 + 20) = 81;
  *((_DWORD *)v222 + 21) = v228;
  *(_OWORD *)(v222 + 88) = 0u;
  *(_OWORD *)(v222 + 104) = 0u;
  *((_DWORD *)v222 + 30) = 0;
  if (*(_QWORD *)v222)
  {
    **((_QWORD **)v222 + 2) = *((_QWORD *)v222 + 1);
    v255 = *((_QWORD *)v222 + 1);
    if (v255)
      *(_QWORD *)(v255 + 16) = *((_QWORD *)v222 + 2);
  }
  *(_QWORD *)v222 = v116;
  v231 = v116[1];
  v230 = v116 + 1;
  v229 = v231;
  *((_QWORD *)v222 + 1) = v231;
  if (v231)
    *((_QWORD *)v229 + 2) = v222 + 8;
  *((_QWORD *)v222 + 2) = v230;
  *v230 = v222;
  if (*((_QWORD *)v222 + 4))
  {
    **((_QWORD **)v222 + 6) = *((_QWORD *)v222 + 5);
    v256 = *((_QWORD *)v222 + 5);
    if (v256)
      *(_QWORD *)(v256 + 16) = *((_QWORD *)v222 + 6);
  }
  *v223 = NullValue;
  if (NullValue)
  {
    v234 = NullValue[1];
    v233 = (llvm::Value ****)(NullValue + 1);
    v232 = v234;
    *((_QWORD *)v222 + 5) = v234;
    if (v234)
      *((_QWORD *)v232 + 2) = v222 + 40;
    *((_QWORD *)v222 + 6) = v233;
    *v233 = v223;
  }
LABEL_298:
  *((_WORD *)v222 + 41) = v224;
LABEL_95:
  llvm::Value::setName(v5, (uint64_t)v281);
  return v5;
}

uint64_t ***sub_1C57EC3F0(uint64_t a1, uint64_t *a2, int a3, const llvm::DataLayout *a4)
{
  _QWORD *v4;
  llvm::CastInst *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t ***v14;
  uint64_t v15;
  _QWORD *v16;
  int IndexTypeSizeInBits;
  llvm::Type *v18;
  llvm::Constant *v19;
  llvm::Type *v20;
  llvm::ConstantExpr *j;
  unsigned int v22;
  char v23;
  int v24;
  int v25;
  uint64_t v26;
  _QWORD **v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  llvm::CastInst **v33;
  llvm::Constant *SExtOrBitCast;
  unsigned int v35;
  unsigned __int8 *v36;
  unsigned int v37;
  unsigned __int8 *v38;
  int v39;
  int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  llvm::ValueAsMetadata **v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  llvm::ValueAsMetadata **v66;
  llvm::ValueAsMetadata *v67;
  int v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  int v74;
  llvm::ValueAsMetadata **v75;
  llvm::ValueAsMetadata **v76;
  unsigned int v77;
  llvm::ValueAsMetadata *v78;
  int v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  unsigned __int8 **v88;
  int v89;
  unsigned __int8 *v90;
  _QWORD *v91;
  uint64_t v92;
  BOOL v93;
  BOOL v94;
  unsigned int v96;
  uint64_t v97;
  int v98;
  unsigned int v99;
  int v100;
  _QWORD *v101;
  int v102;
  llvm::Type *v103;
  llvm::Constant *v104;
  llvm::Value **NullValue;
  unsigned __int8 **v106;
  unsigned __int8 **v107;
  unsigned __int8 *v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned __int8 **v114;
  unsigned __int8 *v115;
  int v116;
  int v117;
  unsigned __int8 *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  _QWORD *v122;
  llvm::Value *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  llvm::ValueSymbolTable *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  unsigned int v137;
  int v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  unsigned __int8 **v147;
  unsigned __int8 *v148;
  llvm::Type *v149;
  int PrimitiveSizeInBits;
  int v151;
  unsigned __int8 **v152;
  uint64_t v153;
  int v154;
  llvm::ValueAsMetadata **v155;
  _QWORD *v156;
  int v157;
  uint64_t ****v158;
  uint64_t v159;
  uint64_t ***v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t ****v165;
  uint64_t ***v166;
  int v167;
  int v168;
  uint64_t ***v169;
  uint64_t **v170;
  char *v171;
  uint64_t **v172;
  int v173;
  unsigned __int8 **v174;
  uint64_t v175;
  llvm::APInt *v176;
  unsigned int v177;
  int v178;
  uint64_t ****v179;
  uint64_t ***v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t ****v185;
  uint64_t ***v186;
  int v187;
  int v188;
  llvm::ValueAsMetadata **v189;
  uint64_t ***v190;
  uint64_t **v191;
  char *v192;
  uint64_t **v193;
  int v194;
  unsigned int v195;
  unsigned __int8 **v196;
  unsigned __int8 **v197;
  unsigned __int8 *v198;
  _QWORD *v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  llvm::PHINode *v203;
  int v204;
  unsigned __int8 *v205;
  uint64_t v206;
  unsigned int v207;
  uint64_t v208;
  unsigned __int8 *v209;
  int v210;
  unsigned int v211;
  uint64_t *v212;
  unsigned int v213;
  uint64_t v214;
  llvm::ValueAsMetadata **v215;
  llvm::ValueAsMetadata **v216;
  uint64_t v217;
  llvm::ValueAsMetadata *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t **v223;
  uint64_t *v224;
  int v225;
  int v226;
  uint64_t *v227;
  uint64_t **v228;
  char *v229;
  uint64_t **v230;
  uint64_t *v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  llvm::ValueAsMetadata *v238;
  int v239;
  int v240;
  _QWORD *v241;
  uint64_t **v242;
  char *v243;
  uint64_t **v244;
  unsigned __int8 *v245;
  uint64_t **v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  llvm::ValueAsMetadata *v252;
  int v253;
  int v254;
  _QWORD *v255;
  uint64_t **v256;
  char *v257;
  uint64_t **v258;
  unsigned __int8 *v259;
  uint64_t v260;
  char *v261;
  _QWORD *v262;
  int v263;
  uint64_t v264;
  unsigned int v265;
  uint64_t v266;
  _QWORD *v267;
  uint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  _DWORD *v272;
  _DWORD *v273;
  int v274;
  _DWORD *v275;
  _DWORD *v276;
  int v277;
  uint64_t v278;
  uint64_t v279;
  llvm::ConstantExpr *v280;
  int v281;
  llvm::PointerType *v283;
  _QWORD v284[2];
  int v285;
  void *v286;
  unsigned __int8 **v287;
  uint64_t v288;
  unsigned __int8 *v289;
  uint64_t **v290;
  const char *v291;
  void *__p;
  llvm::ValueAsMetadata **v293;
  llvm::ValueAsMetadata **v294;
  llvm::ValueAsMetadata *v295;
  unsigned __int8 *v296;
  uint64_t *v297;
  uint64_t v298[2];
  int v299;
  void *v300;
  uint64_t v301;
  _QWORD v302[2];
  __int16 v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  void **v307;
  _QWORD *v308;
  uint64_t v309;
  int v310;
  __int16 v311;
  char v312;
  uint64_t v313;
  uint64_t v314;
  void *v315;
  _QWORD v316[4];

  v316[2] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)a1;
  if ((*(_DWORD *)(*(_QWORD *)a1 + 8) & 0xFE) == 0x12)
    return 0;
  v7 = (llvm::CastInst *)a1;
  v8 = *(_DWORD *)(a1 + 20);
  if ((v8 & 0x40000000) != 0)
  {
    v10 = *(_QWORD *)(a1 - 8);
    v9 = v8 & 0x7FFFFFF;
  }
  else
  {
    v9 = v8 & 0x7FFFFFF;
    v10 = a1 - 32 * v9;
  }
  v11 = (uint64_t *)(v10 + 32);
  for (i = 32 * v9 - 32; i; i -= 32)
  {
    v13 = *v11;
    v11 += 4;
    if (*(_BYTE *)(v13 + 16) != 16)
      return 0;
  }
  v15 = 24;
  if (*(_BYTE *)(a1 + 16) == 62)
    v15 = 64;
  v283 = *(llvm::PointerType **)(a1 + v15);
  v16 = (_QWORD *)*v4;
  IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)a4, (uint64_t)v4);
  LODWORD(v300) = IndexTypeSizeInBits;
  v281 = a3;
  if (IndexTypeSizeInBits <= 63)
  {
    if (IndexTypeSizeInBits <= 31)
    {
      switch(IndexTypeSizeInBits)
      {
        case 16:
          v19 = (llvm::Constant *)(*v16 + 1936);
          goto LABEL_19;
        case 8:
          v19 = (llvm::Constant *)(*v16 + 1912);
          goto LABEL_19;
        case 1:
          v19 = (llvm::Constant *)(*v16 + 1888);
          goto LABEL_19;
      }
    }
    else if (IndexTypeSizeInBits == 32)
    {
      v19 = (llvm::Constant *)(*v16 + 1960);
      goto LABEL_19;
    }
  }
  else
  {
    if (IndexTypeSizeInBits == 64)
    {
      v19 = (llvm::Constant *)(*v16 + 1984);
      goto LABEL_19;
    }
    if (IndexTypeSizeInBits == 128)
    {
      v19 = (llvm::Constant *)(*v16 + 2008);
      goto LABEL_19;
    }
  }
  v272 = sub_1C5270984(*v16 + 2168, &v300);
  v19 = (llvm::Constant *)*((_QWORD *)v272 + 1);
  if (!v19)
  {
    v273 = v272;
    v19 = (llvm::Constant *)sub_1C484358C(*v16 + 2040, 24, 3);
    v274 = (int)v300;
    *(_QWORD *)v19 = v16;
    *((_QWORD *)v19 + 2) = 0;
    *((_QWORD *)v19 + 1) = (v274 << 8) | 0xDu;
    *((_QWORD *)v273 + 1) = v19;
  }
LABEL_19:
  for (j = (llvm::ConstantExpr *)llvm::Constant::getNullValue(v19, v18);
        ;
        j = llvm::ConstantExpr::getAdd(j, SExtOrBitCast, 0, 0))
  {
    while (1)
    {
      v22 = *((unsigned __int8 *)v7 + 16);
      if (v22 <= 0x4B)
        break;
      if (v22 != 76)
        goto LABEL_51;
      llvm::CastInst::isNoopCast(v7, a4);
      if (!v24)
        goto LABEL_51;
LABEL_26:
      v7 = (llvm::CastInst *)*((_QWORD *)v7 - 4);
    }
    switch(v22)
    {
      case 0x4Bu:
        llvm::CastInst::isNoopCast(v7, a4);
        if ((v23 & 1) == 0)
          goto LABEL_51;
        goto LABEL_26;
      case 5u:
        if (*((_WORD *)v7 + 9) != 34)
          goto LABEL_51;
        break;
      case 0x3Eu:
        break;
      default:
        goto LABEL_51;
    }
    if ((*((_BYTE *)v7 + 17) & 2) == 0)
      break;
    v25 = *((_DWORD *)v7 + 5);
    if ((v25 & 0x40000000) != 0)
    {
      v27 = (_QWORD **)*((_QWORD *)v7 - 1);
      v26 = v25 & 0x7FFFFFF;
    }
    else
    {
      v26 = v25 & 0x7FFFFFF;
      v27 = (_QWORD **)((char *)v7 - 32 * v26);
    }
    v28 = (uint64_t *)(v27 + 4);
    v29 = 32 * v26 - 32;
    while (v29)
    {
      v30 = *v28;
      v28 += 4;
      v29 -= 32;
      if (*(_BYTE *)(v30 + 16) != 16)
        goto LABEL_51;
    }
    if ((_DWORD)v26 != 2)
      break;
    v31 = v22 != 62 || v7 == 0;
    v32 = v31 ? 24 : 64;
    if (*(llvm::PointerType **)((char *)v7 + v32) != v283)
      break;
    if ((v25 & 0x40000000) != 0)
      v33 = (llvm::CastInst **)*((_QWORD *)v7 - 1);
    else
      v33 = (llvm::CastInst **)((char *)v7 - 32 * (v25 & 0x7FFFFFF));
    v7 = *v33;
    SExtOrBitCast = llvm::ConstantExpr::getSExtOrBitCast((llvm::Type **)v33[4], (llvm::Type ***)v19, v20);
  }
LABEL_51:
  v280 = j;
  v284[0] = 0;
  v284[1] = 0;
  v285 = 0;
  v287 = 0;
  v288 = 0;
  v286 = 0;
  v297 = (uint64_t *)v7;
  v300 = v302;
  v301 = 0x1000000000;
  sub_1C4848C0C((unsigned int *)&v300, 1uLL, (uint64_t)a2);
  sub_1C4D954B8(v284, &v297);
  while (1)
  {
    v35 = v301;
    if (!(_DWORD)v301)
      break;
    v289 = 0;
    v290 = 0;
    LODWORD(v291) = 0;
    v293 = 0;
    v294 = 0;
    __p = 0;
    do
    {
      while (1)
      {
        if ((unint64_t)((char *)v287 - (_BYTE *)v286) > 0x318)
        {
LABEL_138:
          v74 = 1;
          goto LABEL_139;
        }
        v296 = 0;
        v36 = (unsigned __int8 *)*((_QWORD *)v300 + v35 - 1);
        v296 = v36;
        if (!v285)
          break;
        v37 = ((v36 >> 4) ^ (v36 >> 9)) & (v285 - 1);
        v38 = *(unsigned __int8 **)(v284[0] + 8 * v37);
        if (v36 != v38)
        {
          v68 = 1;
          while (v38 != (unsigned __int8 *)-4096)
          {
            v69 = v37 + v68++;
            v37 = v69 & (v285 - 1);
            v38 = *(unsigned __int8 **)(v284[0] + 8 * v37);
            if (v36 == v38)
              goto LABEL_57;
          }
          break;
        }
LABEL_57:
        if (v37 == v285)
          break;
        LODWORD(v301) = --v35;
        if (!v35)
          goto LABEL_142;
      }
      v39 = v36[16];
      if ((v39 - 62) > 0x15 || ((1 << (v39 - 62)) & 0x206001) == 0)
        goto LABEL_138;
      if ((v39 - 75) <= 1)
      {
        llvm::CastInst::isNoopCast((llvm::CastInst *)v36, a4);
        if (!v41)
          goto LABEL_138;
        v42 = *((_QWORD *)v36 - 4);
        if (v285)
        {
          v43 = ((v42 >> 4) ^ (v42 >> 9)) & (v285 - 1);
          v44 = *(_QWORD *)(v284[0] + 8 * v43);
          if (v42 == v44)
          {
LABEL_66:
            if (v43 == v285)
              goto LABEL_67;
LABEL_70:
            v36 = v296;
            v39 = v296[16];
            goto LABEL_71;
          }
          v70 = 1;
          while (v44 != -4096)
          {
            v71 = v43 + v70++;
            v43 = v71 & (v285 - 1);
            v44 = *(_QWORD *)(v284[0] + 8 * v43);
            if (v42 == v44)
              goto LABEL_66;
          }
        }
LABEL_67:
        v45 = v301;
        if (v301 >= (unint64_t)HIDWORD(v301))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v300, (uint64_t)v302, v301 + 1, 8);
          v45 = v301;
        }
        *((_QWORD *)v300 + v45) = v42;
        LODWORD(v301) = v301 + 1;
        goto LABEL_70;
      }
LABEL_71:
      if (v39 == 62 || v39 == 5 && *((_WORD *)v36 + 9) == 34)
      {
        v46 = *((_DWORD *)v36 + 5);
        if ((v46 & 0x7FFFFFF) != 2 || (v36[17] & 2) == 0)
          goto LABEL_138;
        v31 = v39 == 62;
        v47 = 64;
        if (!v31)
          v47 = 24;
        if (*(llvm::PointerType **)&v36[v47] != v283)
          goto LABEL_138;
        if ((v46 & 0x40000000) != 0)
          v48 = (unsigned __int8 *)*((_QWORD *)v36 - 1);
        else
          v48 = v36 - 64;
        if (v285)
        {
          v49 = *(_QWORD *)v48;
          v50 = ((v49 >> 4) ^ (v49 >> 9)) & (v285 - 1);
          v51 = *(_QWORD *)(v284[0] + 8 * v50);
          if (v49 == v51)
          {
LABEL_86:
            if (v50 != v285)
              goto LABEL_93;
          }
          else
          {
            v72 = 1;
            while (v51 != -4096)
            {
              v73 = v50 + v72++;
              v50 = v73 & (v285 - 1);
              v51 = *(_QWORD *)(v284[0] + 8 * v50);
              if (v49 == v51)
                goto LABEL_86;
            }
          }
        }
        if ((v46 & 0x40000000) != 0)
          v52 = (unsigned __int8 *)*((_QWORD *)v36 - 1);
        else
          v52 = v36 - 64;
        v53 = *(_QWORD *)v52;
        v54 = v301;
        if (v301 >= (unint64_t)HIDWORD(v301))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v300, (uint64_t)v302, v301 + 1, 8);
          v54 = v301;
        }
        *((_QWORD *)v300 + v54) = v53;
        LODWORD(v301) = v301 + 1;
        v36 = v296;
      }
LABEL_93:
      if (*((unsigned __int8 **)v300 + v301 - 1) == v36)
      {
        LODWORD(v301) = v301 - 1;
        sub_1C4D954B8(v284, &v296);
        v36 = v296;
      }
      if (v36[16] == 83)
        v55 = v36;
      else
        v55 = 0;
      v295 = (llvm::ValueAsMetadata *)v55;
      if (v55)
      {
        v56 = *(_QWORD *)(*((_QWORD *)v55 + 5) + 40);
        if (v56)
          v57 = v56 - 24;
        else
          v57 = 0;
        if (*(unsigned __int8 *)(v57 + 16) - 29 >= 0xB)
          v57 = 0;
        if (*(_BYTE *)(v57 + 16) == 38)
          goto LABEL_138;
        v298[0] = (uint64_t)v55;
        sub_1C4D954B8(v284, v298);
        sub_1C5818A48((uint64_t)&v289, &v295, (uint64_t)v298);
        if ((_BYTE)v299)
        {
          v58 = (char *)v293;
          if (v293 >= v294)
          {
            v60 = (char *)__p;
            v61 = ((char *)v293 - (_BYTE *)__p) >> 3;
            v62 = v61 + 1;
            if ((unint64_t)(v61 + 1) >> 61)
              abort();
            v63 = (char *)v294 - (_BYTE *)__p;
            if (((char *)v294 - (_BYTE *)__p) >> 2 > v62)
              v62 = v63 >> 2;
            if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
              v64 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v64 = v62;
            if (v64)
            {
              if (v64 >> 61)
                sub_1C4764EE4();
              v65 = (char *)operator new(8 * v64);
            }
            else
            {
              v65 = 0;
            }
            v66 = (llvm::ValueAsMetadata **)&v65[8 * v61];
            *v66 = v295;
            v59 = v66 + 1;
            if (v58 != v60)
            {
              do
              {
                v67 = (llvm::ValueAsMetadata *)*((_QWORD *)v58 - 1);
                v58 -= 8;
                *--v66 = v67;
              }
              while (v58 != v60);
              v58 = (char *)__p;
            }
            __p = v66;
            v293 = v59;
            v294 = (llvm::ValueAsMetadata **)&v65[8 * v64];
            if (v58)
              operator delete(v58);
          }
          else
          {
            *v293 = v295;
            v59 = (llvm::ValueAsMetadata **)(v58 + 8);
          }
          v293 = v59;
        }
      }
      v35 = v301;
    }
    while ((_DWORD)v301);
LABEL_142:
    v75 = (llvm::ValueAsMetadata **)__p;
    v76 = v293;
    if (__p != v293)
    {
      v77 = 0;
      do
      {
        v78 = *v75;
        v79 = *((_DWORD *)*v75 + 5);
        if ((v79 & 0x40000000) != 0)
        {
          v81 = (uint64_t *)*((_QWORD *)v78 - 1);
          v80 = v79 & 0x7FFFFFF;
        }
        else
        {
          v80 = v79 & 0x7FFFFFF;
          v81 = (uint64_t *)((char *)v78 - 32 * v80);
        }
        v82 = &v81[4 * v80];
        if (v80)
        {
          while (1)
          {
            v83 = *v81;
            if (!v285)
              goto LABEL_151;
            v84 = ((v83 >> 4) ^ (v83 >> 9)) & (v285 - 1);
            v85 = *(_QWORD *)(v284[0] + 8 * v84);
            if (v83 != v85)
              break;
LABEL_150:
            if (v84 == v285)
              goto LABEL_151;
LABEL_154:
            v81 += 4;
            if (v81 == v82)
              goto LABEL_160;
          }
          v86 = 1;
          while (v85 != -4096)
          {
            v87 = v84 + v86++;
            v84 = v87 & (v285 - 1);
            v85 = *(_QWORD *)(v284[0] + 8 * v84);
            if (v83 == v85)
              goto LABEL_150;
          }
LABEL_151:
          if (v77 >= HIDWORD(v301))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v300, (uint64_t)v302, v77 + 1, 8);
            v77 = v301;
          }
          *((_QWORD *)v300 + v77) = v83;
          v77 = v301 + 1;
          LODWORD(v301) = v301 + 1;
          goto LABEL_154;
        }
LABEL_160:
        ++v75;
      }
      while (v75 != v76);
      v74 = 0;
LABEL_139:
      v75 = (llvm::ValueAsMetadata **)__p;
      if (!__p)
        goto LABEL_140;
      goto LABEL_163;
    }
    v74 = 0;
    if (!__p)
      goto LABEL_140;
LABEL_163:
    v293 = v75;
    operator delete(v75);
LABEL_140:
    MEMORY[0x1CAA32FB4](v289, 8);
    if (v74)
    {
LABEL_193:
      v100 = 0;
      goto LABEL_194;
    }
  }
  v88 = (unsigned __int8 **)v286;
  if (v286 != v287)
  {
    v89 = v285 - 1;
    do
    {
      v90 = *v88;
      v91 = (_QWORD *)*((_QWORD *)*v88 + 1);
      if (v91)
      {
        if (v90[16] <= 0x1Bu)
          v90 = 0;
        do
        {
          v92 = *v91;
          if (*(_BYTE *)(*v91 + 16) != 83)
            v92 = 0;
          if (v90 != (unsigned __int8 *)v297)
          {
            v93 = !v92 || v90 == 0;
            v94 = v93 || v90 == (unsigned __int8 *)v92;
            if (!v94 && v285 != 0)
            {
              v96 = ((v92 >> 4) ^ (v92 >> 9)) & v89;
              v97 = *(_QWORD *)(v284[0] + 8 * v96);
              if (v92 == v97)
              {
LABEL_183:
                if (v96 != v285 && *(_QWORD *)(v92 + 40) == *((_QWORD *)v90 + 5))
                  goto LABEL_193;
              }
              else
              {
                v98 = 1;
                while (v97 != -4096)
                {
                  v99 = v96 + v98++;
                  v96 = v99 & v89;
                  v97 = *(_QWORD *)(v284[0] + 8 * v96);
                  if (v92 == v97)
                    goto LABEL_183;
                }
              }
            }
          }
          v91 = (_QWORD *)v91[1];
        }
        while (v91);
      }
      ++v88;
    }
    while (v88 != v287);
  }
  v100 = 1;
LABEL_194:
  if (v300 != v302)
    free(v300);
  if (v100)
  {
    v296 = (unsigned __int8 *)v7;
    v297 = a2;
    v101 = **(_QWORD ***)v7;
    v102 = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)a4, *a2);
    LODWORD(v300) = v102;
    if (v102 <= 63)
    {
      if (v102 <= 31)
      {
        switch(v102)
        {
          case 16:
            v104 = (llvm::Constant *)(*v101 + 1936);
            goto LABEL_206;
          case 8:
            v104 = (llvm::Constant *)(*v101 + 1912);
            goto LABEL_206;
          case 1:
            v104 = (llvm::Constant *)(*v101 + 1888);
            goto LABEL_206;
        }
      }
      else if (v102 == 32)
      {
        v104 = (llvm::Constant *)(*v101 + 1960);
        goto LABEL_206;
      }
    }
    else
    {
      if (v102 == 64)
      {
        v104 = (llvm::Constant *)(*v101 + 1984);
LABEL_206:
        v298[0] = 0;
        v298[1] = 0;
        v299 = 0;
        NullValue = llvm::Constant::getNullValue(v104, v103);
        sub_1C509B72C(v298, &v296)[1] = NullValue;
        v107 = (unsigned __int8 **)v286;
        v106 = v287;
        if (v286 == v287)
        {
          v132 = (uint64_t *)v286;
          goto LABEL_231;
        }
        while (2)
        {
          v108 = *v107;
          if (*v107 != v296 && v108 && v108[16] == 83)
          {
            v109 = *((_DWORD *)v108 + 5);
            if ((v109 & 0x10000000) != 0)
            {
              v110 = ***(_QWORD ***)v108;
              v111 = *(_QWORD *)(v110 + 152);
              v112 = *(unsigned int *)(v110 + 168);
              if (!(_DWORD)v112)
                goto LABEL_217;
              LODWORD(v113) = (v112 - 1) & ((v108 >> 4) ^ (v108 >> 9));
              v114 = (unsigned __int8 **)(v111 + 16 * v113);
              v115 = *v114;
              if (*v114 != v108)
              {
                v116 = 1;
                while (v115 != (unsigned __int8 *)-4096)
                {
                  v117 = v113 + v116++;
                  v113 = v117 & (v112 - 1);
                  v115 = *(unsigned __int8 **)(v111 + 16 * v113);
                  if (v115 == v108)
                  {
                    v114 = (unsigned __int8 **)(v111 + 16 * v113);
                    goto LABEL_218;
                  }
                }
LABEL_217:
                v114 = (unsigned __int8 **)(v111 + 16 * v112);
              }
LABEL_218:
              v118 = v114[1];
              v121 = *(_QWORD *)v118;
              v120 = (char *)(v118 + 16);
              v119 = v121;
            }
            else
            {
              v119 = 0;
              v120 = &byte_1C871356D;
            }
            v303 = 773;
            v300 = v120;
            v301 = v119;
            v302[0] = ".idx";
            v122 = operator new(0x48uLL);
            v122[1] = v104;
            v123 = (llvm::Value *)(v122 + 1);
            *v122 = 0;
            v122[2] = 0;
            v122[3] = 0x4000000000000053;
            *((_OWORD *)v122 + 2) = 0u;
            v124 = (char *)(v122 + 4);
            *((_OWORD *)v122 + 3) = 0u;
            *((_DWORD *)v122 + 16) = 0;
            v125 = *((_QWORD *)v108 + 5);
            v122[6] = v125;
            *(_WORD *)(v125 + 18) &= ~0x8000u;
            if ((*((_BYTE *)v122 + 31) & 0x10) != 0)
            {
              v130 = *(_QWORD *)(v125 + 56);
              if (v130)
              {
                v131 = *(llvm::ValueSymbolTable **)(v130 + 104);
                if (v131)
                  llvm::ValueSymbolTable::reinsertValue(v131, v123);
              }
            }
            v126 = *((_QWORD *)v108 + 3);
            v122[4] = v126;
            v122[5] = v108 + 24;
            *(_QWORD *)(v126 + 8) = v124;
            *((_QWORD *)v108 + 3) = v124;
            *((_DWORD *)v122 + 17) = v109 & 0x7FFFFFF;
            llvm::Value::setName((uint64_t ***)v123, (uint64_t)&v300);
            v127 = *((unsigned int *)v122 + 17);
            v128 = operator new(40 * v127);
            *v122 = v128;
            if ((_DWORD)v127)
            {
              v129 = &v128[4 * v127];
              do
              {
                *v128 = 0;
                v128[1] = 0;
                v128[2] = 0;
                v128[3] = v123;
                v128 += 4;
              }
              while (v128 != v129);
            }
            v289 = v108;
            sub_1C4EAD954(v298, &v289)[1] = v123;
          }
          if (++v107 != v106)
            continue;
          break;
        }
        v132 = (uint64_t *)v286;
        v107 = v287;
LABEL_231:
        v133 = **(_QWORD **)v296;
        v300 = v302;
        v301 = 0x200000000;
        v306 = v133;
        v307 = &v315;
        v308 = v316;
        v309 = 0;
        v310 = 0;
        v311 = 512;
        v312 = 7;
        v304 = 0;
        v305 = 0;
        v313 = 0;
        v314 = 0;
        v315 = &unk_1E8167888;
        v316[0] = &unk_1E8167A08;
        if (v132 == (uint64_t *)v107)
          goto LABEL_335;
        while (2)
        {
          v134 = *v132;
          if (v299)
          {
            v135 = ((v134 >> 4) ^ (v134 >> 9)) & (v299 - 1);
            v136 = *(_QWORD *)(v298[0] + 16 * v135);
            if (v134 == v136)
            {
LABEL_234:
              if (v135 == v299)
                goto LABEL_235;
              goto LABEL_304;
            }
            v194 = 1;
            while (v136 != -4096)
            {
              v195 = v135 + v194++;
              v135 = v195 & (v299 - 1);
              v136 = *(_QWORD *)(v298[0] + 16 * v135);
              if (v134 == v136)
                goto LABEL_234;
            }
          }
LABEL_235:
          v137 = *(unsigned __int8 *)(v134 + 16);
          if (v137 >= 0x1C && v137 - 79 >= 0xFFFFFFF3 && v134 != 0)
          {
            v289 = *(unsigned __int8 **)(v134 - 32);
            v142 = sub_1C4EAD954(v298, &v289)[1];
            v289 = (unsigned __int8 *)v134;
            sub_1C4EAD954(v298, &v289)[1] = v142;
            goto LABEL_304;
          }
          if (v137 == 62 || v137 == 5 && *(_WORD *)(v134 + 18) == 34)
          {
            v140 = *(_DWORD *)(v134 + 20);
            if ((v140 & 0x40000000) != 0)
              v141 = *(_QWORD *)(v134 - 8);
            else
              v141 = v134 - 32 * (v140 & 0x7FFFFFF);
            v289 = *(unsigned __int8 **)(v141 + 32);
            v143 = sub_1C4EAD954(v298, &v289);
            v144 = *(_DWORD *)(v134 + 20);
            if (v143[1])
            {
              if ((v144 & 0x40000000) != 0)
                v145 = *(_QWORD *)(v134 - 8);
              else
                v145 = v134 - 32 * (v144 & 0x7FFFFFF);
              v295 = *(llvm::ValueAsMetadata **)(v145 + 32);
              v147 = (unsigned __int8 **)(sub_1C4EAD954(v298, &v295) + 1);
            }
            else
            {
              if ((v144 & 0x40000000) != 0)
                v146 = *(_QWORD *)(v134 - 8);
              else
                v146 = v134 - 32 * (v144 & 0x7FFFFFF);
              v147 = (unsigned __int8 **)(v146 + 32);
            }
            v148 = *v147;
            sub_1C5818ACC((uint64_t)&v300, v134, 1);
            v149 = *(llvm::Type **)v148;
            if ((*(_DWORD *)(*(_QWORD *)v148 + 8) & 0xFE) == 0x12)
              v149 = (llvm::Type *)**((_QWORD **)v149 + 2);
            PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v149);
            v151 = *(_DWORD *)(v134 + 20);
            if ((v151 & 0x40000000) != 0)
              v152 = *(unsigned __int8 ***)(v134 - 8);
            else
              v152 = (unsigned __int8 **)(v134 - 32 * (v151 & 0x7FFFFFF));
            v289 = *v152;
            v153 = *(_QWORD *)sub_1C4EAD954(v298, &v289)[1];
            if ((*(_DWORD *)(v153 + 8) & 0xFE) == 0x12)
              v153 = **(_QWORD **)(v153 + 16);
            if (PrimitiveSizeInBits != llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v153))
            {
              v154 = *(_DWORD *)(v134 + 20);
              if ((v154 & 0x40000000) != 0)
                v155 = *(llvm::ValueAsMetadata ***)(v134 - 8);
              else
                v155 = (llvm::ValueAsMetadata **)(v134 - 32 * (v154 & 0x7FFFFFF));
              v295 = *v155;
              v156 = sub_1C4EAD954(v298, &v295);
              v157 = *(_DWORD *)(v134 + 20);
              if ((v157 & 0x40000000) != 0)
                v158 = *(uint64_t *****)(v134 - 8);
              else
                v158 = (uint64_t ****)(v134 - 32 * (v157 & 0x7FFFFFF));
              v159 = *(_QWORD *)v156[1];
              v160 = *v158;
              if ((*((_BYTE *)v160 + 23) & 0x10) != 0)
              {
                v161 = ***v160;
                v162 = *(_QWORD *)(v161 + 152);
                v163 = *(unsigned int *)(v161 + 168);
                if (!(_DWORD)v163)
                  goto LABEL_279;
                LODWORD(v164) = (v163 - 1) & ((v160 >> 4) ^ (v160 >> 9));
                v165 = (uint64_t ****)(v162 + 16 * v164);
                v166 = *v165;
                if (*v165 != v160)
                {
                  v167 = 1;
                  while (v166 != (uint64_t ***)-4096)
                  {
                    v168 = v164 + v167++;
                    v164 = v168 & (v163 - 1);
                    v166 = *(uint64_t ****)(v162 + 16 * v164);
                    if (v166 == v160)
                    {
                      v165 = (uint64_t ****)(v162 + 16 * v164);
                      goto LABEL_280;
                    }
                  }
LABEL_279:
                  v165 = (uint64_t ****)(v162 + 16 * v163);
                }
LABEL_280:
                v169 = v165[1];
                v172 = *v169;
                v171 = (char *)(v169 + 2);
                v170 = v172;
              }
              else
              {
                v170 = 0;
                v171 = &byte_1C871356D;
              }
              LOWORD(v293) = 773;
              v289 = (unsigned __int8 *)v171;
              v290 = v170;
              v291 = ".sext";
              v148 = sub_1C4773B94((uint64_t *)&v300, v148, v159, (uint64_t)&v289);
            }
            v173 = *(_DWORD *)(v134 + 20);
            if ((v173 & 0x40000000) != 0)
              v174 = *(unsigned __int8 ***)(v134 - 8);
            else
              v174 = (unsigned __int8 **)(v134 - 32 * (v173 & 0x7FFFFFF));
            v289 = *v174;
            v175 = sub_1C4EAD954(v298, &v289)[1];
            if (*(_BYTE *)(v175 + 16) == 16)
            {
              v176 = (llvm::APInt *)(v175 + 24);
              v177 = *(_DWORD *)(v175 + 32);
              if (v177 <= 0x40)
              {
                if (*(_QWORD *)v176)
                  goto LABEL_288;
LABEL_299:
                v289 = (unsigned __int8 *)v134;
                v189 = (llvm::ValueAsMetadata **)&v289;
LABEL_303:
                sub_1C4EAD954(v298, v189)[1] = v148;
                goto LABEL_304;
              }
              if (llvm::APInt::countLeadingZerosSlowCase(v176) == v177)
                goto LABEL_299;
            }
LABEL_288:
            v178 = *(_DWORD *)(v134 + 20);
            if ((v178 & 0x40000000) != 0)
              v179 = *(uint64_t *****)(v134 - 8);
            else
              v179 = (uint64_t ****)(v134 - 32 * (v178 & 0x7FFFFFF));
            v180 = *v179;
            if ((*((_BYTE *)v180 + 23) & 0x10) != 0)
            {
              v181 = ***v180;
              v182 = *(_QWORD *)(v181 + 152);
              v183 = *(unsigned int *)(v181 + 168);
              if (!(_DWORD)v183)
                goto LABEL_300;
              LODWORD(v184) = (v183 - 1) & ((v180 >> 4) ^ (v180 >> 9));
              v185 = (uint64_t ****)(v182 + 16 * v184);
              v186 = *v185;
              if (*v185 != v180)
              {
                v187 = 1;
                while (v186 != (uint64_t ***)-4096)
                {
                  v188 = v184 + v187++;
                  v184 = v188 & (v183 - 1);
                  v186 = *(uint64_t ****)(v182 + 16 * v184);
                  if (v186 == v180)
                  {
                    v185 = (uint64_t ****)(v182 + 16 * v184);
                    goto LABEL_301;
                  }
                }
LABEL_300:
                v185 = (uint64_t ****)(v182 + 16 * v183);
              }
LABEL_301:
              v190 = v185[1];
              v193 = *v190;
              v192 = (char *)(v190 + 2);
              v191 = v193;
            }
            else
            {
              v191 = 0;
              v192 = &byte_1C871356D;
            }
            LOWORD(v293) = 773;
            v289 = (unsigned __int8 *)v192;
            v290 = v191;
            v291 = ".add";
            v148 = (unsigned __int8 *)sub_1C538E314((uint64_t)&v300, (_QWORD *)v175, (uint64_t)v148, (uint64_t)&v289);
            v295 = (llvm::ValueAsMetadata *)v134;
            v189 = &v295;
            goto LABEL_303;
          }
LABEL_304:
          if (++v132 != (uint64_t *)v107)
            continue;
          break;
        }
        v196 = (unsigned __int8 **)v286;
        v197 = v287;
        while (v196 != v197)
        {
          v198 = *v196;
          if (*v196 != v296)
          {
            if (v198)
            {
              if (v198[16] == 83)
              {
                v289 = *v196;
                v199 = sub_1C4EAD954(v298, &v289);
                v200 = *((_DWORD *)v198 + 5);
                v201 = v200 & 0x7FFFFFF;
                if ((v200 & 0x7FFFFFF) != 0)
                {
                  v202 = 0;
                  v203 = (llvm::PHINode *)v199[1];
                  do
                  {
                    v289 = 0;
                    v204 = *((_DWORD *)v198 + 5);
                    if ((v204 & 0x40000000) != 0)
                      v205 = (unsigned __int8 *)*((_QWORD *)v198 - 1);
                    else
                      v205 = &v198[-32 * (v204 & 0x7FFFFFF)];
                    v206 = *(_QWORD *)&v205[32 * v202];
                    v289 = (unsigned __int8 *)v206;
                    if (v299)
                    {
                      v207 = ((v206 >> 4) ^ (v206 >> 9)) & (v299 - 1);
                      v208 = *(_QWORD *)(v298[0] + 16 * v207);
                      if (v206 == v208)
                      {
LABEL_323:
                        if (v207 != v299)
                        {
                          v206 = sub_1C509B72C(v298, &v289)[1];
                          v289 = (unsigned __int8 *)v206;
                          v204 = *((_DWORD *)v198 + 5);
                        }
                      }
                      else
                      {
                        v210 = 1;
                        while (v208 != -4096)
                        {
                          v211 = v207 + v210++;
                          v207 = v211 & (v299 - 1);
                          v208 = *(_QWORD *)(v298[0] + 16 * v207);
                          if (v206 == v208)
                            goto LABEL_323;
                        }
                      }
                    }
                    if ((v204 & 0x40000000) != 0)
                      v209 = (unsigned __int8 *)*((_QWORD *)v198 - 1);
                    else
                      v209 = &v198[-32 * (v204 & 0x7FFFFFF)];
                    sub_1C477667C(v203, v206, *(_QWORD *)&v209[32 * *((unsigned int *)v198 + 15) + 8 * v202++]);
                  }
                  while (v202 != v201);
                }
              }
            }
          }
          ++v196;
        }
LABEL_335:
        v212 = a2;
        v213 = *(_DWORD *)(*a2 + 8);
        if ((v213 & 0xFE) == 0x12)
          v213 = *(_DWORD *)(**(_QWORD **)(*a2 + 16) + 8);
        v214 = llvm::PointerType::get(v283, (llvm::Type *)(v213 >> 8));
        v215 = (llvm::ValueAsMetadata **)v286;
        v216 = (llvm::ValueAsMetadata **)v287;
        if (v286 != v287)
        {
          v217 = v214;
          while (1)
          {
            v218 = *v215;
            v295 = v218;
            if (v218 != (llvm::ValueAsMetadata *)v296)
              break;
LABEL_368:
            if (++v215 == v216)
              goto LABEL_373;
          }
          sub_1C5818ACC((uint64_t)&v300, (uint64_t)v218, 0);
          if ((*((_BYTE *)v212 + 23) & 0x10) == 0)
          {
            v228 = 0;
            v229 = &byte_1C871356D;
LABEL_349:
            LOWORD(v293) = 773;
            v289 = (unsigned __int8 *)v229;
            v290 = v228;
            v291 = "to.ptr";
            v231 = (uint64_t *)sub_1C506D6A8((uint64_t *)&v300, v296, v217, (uint64_t)&v289);
            v232 = sub_1C509B72C(v298, &v295);
            if ((*((_BYTE *)v295 + 23) & 0x10) == 0)
            {
              v242 = 0;
              v243 = &byte_1C871356D;
LABEL_358:
              LOWORD(v293) = 773;
              v289 = (unsigned __int8 *)v243;
              v290 = v242;
              v291 = ".ptr";
              v245 = (unsigned __int8 *)sub_1C53901A0((uint64_t *)&v300, v283, v231, (llvm::Value *)(v232 + 1), 1, (uint64_t)&v289);
              v246 = *(uint64_t ***)v295;
              if ((*((_BYTE *)v295 + 23) & 0x10) == 0)
              {
                v256 = 0;
                v257 = &byte_1C871356D;
                v212 = a2;
                goto LABEL_367;
              }
              v247 = **v246;
              v248 = *(_QWORD *)(v247 + 152);
              v249 = *(unsigned int *)(v247 + 168);
              v212 = a2;
              if ((_DWORD)v249)
              {
                LODWORD(v250) = (v249 - 1) & ((v295 >> 4) ^ (v295 >> 9));
                v251 = v248 + 16 * v250;
                v252 = *(llvm::ValueAsMetadata **)v251;
                if (*(llvm::ValueAsMetadata **)v251 == v295)
                {
LABEL_366:
                  v255 = *(_QWORD **)(v251 + 8);
                  v258 = (uint64_t **)*v255;
                  v257 = (char *)(v255 + 2);
                  v256 = v258;
LABEL_367:
                  LOWORD(v293) = 773;
                  v289 = (unsigned __int8 *)v257;
                  v290 = v256;
                  v291 = ".conv";
                  v259 = sub_1C506D6A8((uint64_t *)&v300, v245, (uint64_t)v246, (uint64_t)&v289);
                  llvm::Value::doRAUW(v295, (llvm::Value *)v259, (llvm::Value *)1);
                  goto LABEL_368;
                }
                v253 = 1;
                while (v252 != (llvm::ValueAsMetadata *)-4096)
                {
                  v254 = v250 + v253++;
                  v250 = v254 & (v249 - 1);
                  v252 = *(llvm::ValueAsMetadata **)(v248 + 16 * v250);
                  if (v252 == v295)
                  {
                    v251 = v248 + 16 * v250;
                    goto LABEL_366;
                  }
                }
              }
              v251 = v248 + 16 * v249;
              goto LABEL_366;
            }
            v233 = ***(_QWORD ***)v295;
            v234 = *(_QWORD *)(v233 + 152);
            v235 = *(unsigned int *)(v233 + 168);
            if ((_DWORD)v235)
            {
              LODWORD(v236) = (v235 - 1) & ((v295 >> 4) ^ (v295 >> 9));
              v237 = v234 + 16 * v236;
              v238 = *(llvm::ValueAsMetadata **)v237;
              if (*(llvm::ValueAsMetadata **)v237 == v295)
              {
LABEL_357:
                v241 = *(_QWORD **)(v237 + 8);
                v244 = (uint64_t **)*v241;
                v243 = (char *)(v241 + 2);
                v242 = v244;
                goto LABEL_358;
              }
              v239 = 1;
              while (v238 != (llvm::ValueAsMetadata *)-4096)
              {
                v240 = v236 + v239++;
                v236 = v240 & (v235 - 1);
                v238 = *(llvm::ValueAsMetadata **)(v234 + 16 * v236);
                if (v238 == v295)
                {
                  v237 = v234 + 16 * v236;
                  goto LABEL_357;
                }
              }
            }
            v237 = v234 + 16 * v235;
            goto LABEL_357;
          }
          v219 = **(_QWORD **)*v212;
          v220 = *(_QWORD *)(v219 + 152);
          v221 = *(unsigned int *)(v219 + 168);
          if ((_DWORD)v221)
          {
            LODWORD(v222) = (v221 - 1) & ((a2 >> 4) ^ (a2 >> 9));
            v223 = (uint64_t **)(v220 + 16 * v222);
            v224 = *v223;
            if (*v223 == v212)
            {
LABEL_348:
              v227 = v223[1];
              v230 = (uint64_t **)*v227;
              v229 = (char *)(v227 + 2);
              v228 = v230;
              goto LABEL_349;
            }
            v225 = 1;
            while (v224 != (uint64_t *)-4096)
            {
              v226 = v222 + v225++;
              v222 = v226 & (v221 - 1);
              v224 = *(uint64_t **)(v220 + 16 * v222);
              if (v224 == v212)
              {
                v223 = (uint64_t **)(v220 + 16 * v222);
                goto LABEL_348;
              }
            }
          }
          v223 = (uint64_t **)(v220 + 16 * v221);
          goto LABEL_348;
        }
LABEL_373:
        v260 = sub_1C509B72C(v298, &v297)[1];
        if (v300 != v302)
          free(v300);
        MEMORY[0x1CAA32FB4](v298[0], 8);
        v261 = (char *)operator new(0x80uLL);
        v14 = (uint64_t ***)(v261 + 64);
        *((_DWORD *)v261 + 21) = *((_DWORD *)v261 + 21) & 0x38000000 | 2;
        *(_QWORD *)v261 = 0;
        *((_QWORD *)v261 + 1) = 0;
        *((_QWORD *)v261 + 2) = 0;
        *((_QWORD *)v261 + 3) = v261 + 64;
        *((_QWORD *)v261 + 4) = 0;
        v262 = v261 + 32;
        *((_QWORD *)v261 + 5) = 0;
        *((_QWORD *)v261 + 6) = 0;
        *((_QWORD *)v261 + 7) = v261 + 64;
        v263 = *((_DWORD *)&dword_1C8661718 + v281 - 32);
        v303 = 257;
        sub_1C4774CC4(*(_DWORD **)v280);
        *((_QWORD *)v261 + 8) = v264;
        *((_QWORD *)v261 + 9) = 0;
        v265 = *((_DWORD *)v261 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v261 + 20) = 81;
        *((_DWORD *)v261 + 21) = v265;
        *(_OWORD *)(v261 + 88) = 0u;
        *(_OWORD *)(v261 + 104) = 0u;
        *((_DWORD *)v261 + 30) = 0;
        if (*(_QWORD *)v261)
        {
          **((_QWORD **)v261 + 2) = *((_QWORD *)v261 + 1);
          v278 = *((_QWORD *)v261 + 1);
          if (v278)
            *(_QWORD *)(v278 + 16) = *((_QWORD *)v261 + 2);
        }
        *(_QWORD *)v261 = v280;
        v267 = (_QWORD *)((char *)v280 + 8);
        v266 = *((_QWORD *)v280 + 1);
        *((_QWORD *)v261 + 1) = v266;
        if (v266)
          *(_QWORD *)(v266 + 16) = v261 + 8;
        *((_QWORD *)v261 + 2) = v267;
        *v267 = v261;
        if (*((_QWORD *)v261 + 4))
        {
          **((_QWORD **)v261 + 6) = *((_QWORD *)v261 + 5);
          v279 = *((_QWORD *)v261 + 5);
          if (v279)
            *(_QWORD *)(v279 + 16) = *((_QWORD *)v261 + 6);
        }
        *v262 = v260;
        if (v260)
        {
          v270 = *(_QWORD *)(v260 + 8);
          v269 = (_QWORD *)(v260 + 8);
          v268 = v270;
          *((_QWORD *)v261 + 5) = v270;
          if (v270)
            *(_QWORD *)(v268 + 16) = v261 + 40;
          *((_QWORD *)v261 + 6) = v269;
          *v269 = v262;
        }
        *((_WORD *)v261 + 41) = v263;
        llvm::Value::setName(v14, (uint64_t)&v300);
        goto LABEL_384;
      }
      if (v102 == 128)
      {
        v104 = (llvm::Constant *)(*v101 + 2008);
        goto LABEL_206;
      }
    }
    v275 = sub_1C5270984(*v101 + 2168, &v300);
    v104 = (llvm::Constant *)*((_QWORD *)v275 + 1);
    if (!v104)
    {
      v276 = v275;
      v104 = (llvm::Constant *)sub_1C484358C(*v101 + 2040, 24, 3);
      v277 = (int)v300;
      *(_QWORD *)v104 = v101;
      *((_QWORD *)v104 + 2) = 0;
      *((_QWORD *)v104 + 1) = (v277 << 8) | 0xDu;
      *((_QWORD *)v276 + 1) = v104;
    }
    goto LABEL_206;
  }
  v14 = 0;
LABEL_384:
  if (v286)
  {
    v287 = (unsigned __int8 **)v286;
    operator delete(v286);
  }
  MEMORY[0x1CAA32FB4](v284[0], 8);
  return v14;
}

llvm::UndefValue **sub_1C57EDAA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  llvm::UndefValue **v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v20;
  llvm::Value **v21;
  void *v23;
  uint64_t v24;
  _QWORD v25[33];

  v25[32] = *MEMORY[0x1E0C80C00];
  v23 = v25;
  v24 = 0x2000000000;
  if (!a3)
    goto LABEL_34;
  v5 = a3;
  LODWORD(v6) = 0;
  do
  {
    if (v6 > 0x1F)
      goto LABEL_41;
    v6 = v6;
    if (v6 >= HIDWORD(v24))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, (uint64_t)v25, v6 + 1, 8);
      v6 = v24;
    }
    *((_QWORD *)v23 + v6) = v5;
    LODWORD(v6) = v24 + 1;
    LODWORD(v24) = v24 + 1;
    v5 = *(_QWORD *)(v5 + 8);
  }
  while (v5);
  if (!(_DWORD)v6)
  {
LABEL_34:
    v16 = *(_WORD *)(a2 + 18) & 0x3F;
    v17 = v16 > 0x29;
    v18 = (1 << v16) & 0x2A90000AA00;
    v20 = v17 || v18 == 0;
    v21 = llvm::ConstantInt::get(*(llvm::ConstantInt **)a2, v20, 0);
    v9 = sub_1C577F888(a1, (llvm::ValueAsMetadata *)a2, (llvm::Value *)v21);
    goto LABEL_42;
  }
  v7 = 0;
  v8 = 32;
  while (1)
  {
    v9 = 0;
    v10 = (_QWORD *)*((_QWORD *)v23 + v6 - 1);
    LODWORD(v6) = v6 - 1;
    LODWORD(v24) = v6;
    v11 = v10[3];
    --v8;
    v12 = *(unsigned __int8 *)(v11 + 16);
    if (v12 > 0x4C)
    {
      switch(*(_BYTE *)(v11 + 16))
      {
        case 'M':
        case 'S':
        case 'U':
          goto LABEL_16;
        case 'Q':
          if (v7)
            goto LABEL_41;
          v7 = 1;
          goto LABEL_33;
        case 'T':
          v14 = *(_QWORD *)(v11 - 32);
          if (v14
            && !*(_BYTE *)(v14 + 16)
            && *(_QWORD *)(v14 + 24) == *(_QWORD *)(v11 + 72)
            && (*(_BYTE *)(v14 + 33) & 0x20) != 0
            && (*(_DWORD *)(v14 + 36) - 167) <= 0x20
            && ((1 << (*(_BYTE *)(v14 + 36) + 89)) & 0x148000003) != 0)
          {
            goto LABEL_33;
          }
          goto LABEL_41;
        default:
          goto LABEL_42;
      }
    }
    if (v12 != 60)
    {
      if (v12 == 61)
      {
        if (*(_QWORD *)(v11 - 64) == *v10)
          goto LABEL_41;
        goto LABEL_33;
      }
      if (v12 != 62)
        goto LABEL_42;
LABEL_16:
      v13 = *(_QWORD *)(v11 + 8);
      if (v13)
        break;
    }
LABEL_33:
    if (!(_DWORD)v6)
      goto LABEL_34;
  }
  while (v6 < v8)
  {
    v6 = v6;
    if (v6 >= HIDWORD(v24))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, (uint64_t)v25, v6 + 1, 8);
      v6 = v24;
    }
    *((_QWORD *)v23 + v6) = v13;
    LODWORD(v6) = v24 + 1;
    LODWORD(v24) = v24 + 1;
    v13 = *(_QWORD *)(v13 + 8);
    if (!v13)
      goto LABEL_33;
  }
LABEL_41:
  v9 = 0;
LABEL_42:
  if (v23 != v25)
    free(v23);
  return v9;
}

BOOL sub_1C57EDD40(llvm::APInt *this)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  v2 = *((_DWORD *)this + 2);
  v3 = v2 - 1;
  if (v2 > 0x40)
  {
    if (((*(_QWORD *)(*(_QWORD *)this + 8 * (v3 >> 6)) >> v3) & 1) != 0)
    {
      v6 = llvm::APInt::countLeadingOnesSlowCase(this);
      v8 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)this);
      return v8 + v6 == v2;
    }
  }
  else
  {
    v4 = *(_QWORD *)this;
    if (((*(_QWORD *)this >> v3) & 1) != 0)
    {
      v5 = __clz(~(v4 << -(char)v2));
      if (v2)
        v6 = v5;
      else
        v6 = 0;
      v7 = __clz(__rbit64(v4));
      if (v2 >= v7)
        v8 = v7;
      else
        v8 = *((_DWORD *)this + 2);
      return v8 + v6 == v2;
    }
  }
  return 0;
}

BOOL sub_1C57EDDE8(int *a1, llvm::APInt *this)
{
  int v2;
  unsigned int v5;
  uint64_t v6;
  _BOOL4 v7;
  int v8;
  _BOOL8 result;
  int v10;

  v2 = *a1;
  if ((*a1 - 38) > 3)
    return 0;
  v5 = *((_DWORD *)this + 2);
  if (v5 > 0x40)
  {
    v8 = llvm::APInt::countLeadingZerosSlowCase(this);
    if (v8 != v5)
    {
      if (v8 != v5 - 1)
      {
        v7 = llvm::APInt::countTrailingOnesSlowCase(this) == v5;
        goto LABEL_15;
      }
      goto LABEL_11;
    }
    return (v2 & 0xFFFFFFFE) != 32;
  }
  v6 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return (v2 & 0xFFFFFFFE) != 32;
  if (v6 == 1)
  {
LABEL_11:
    if (v2 == 40)
    {
      v10 = 41;
LABEL_18:
      *a1 = v10;
      return 1;
    }
    return 0;
  }
  v7 = v6 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
  if (!v5)
    v7 = 1;
LABEL_15:
  result = 0;
  if (v2 == 38 && v7)
  {
    v10 = 39;
    goto LABEL_18;
  }
  return result;
}

llvm::UndefValue **sub_1C57EDED0(uint64_t a1, uint64_t a2, llvm::ConstantInt **a3, int8x8_t *a4)
{
  unsigned __int8 *v8;
  llvm::Type *v9;
  _DWORD **v10;
  unint64_t **v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned __int8 *v15;
  unint64_t v16;
  uint64_t ***v17;
  unsigned int v18;
  uint64_t **v19;
  int v20;
  _QWORD *v21;
  llvm::ConstantInt **v22;
  int v23;
  llvm::ConstantInt *v24;
  int v25;
  llvm::ConstantInt *v26;
  llvm::ConstantInt *v27;
  uint64_t v28;
  unint64_t v29;
  BOOL v30;
  uint64_t ***v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  unsigned int v35;
  __int32 v36;
  llvm::Value **v37;
  __int16 v38;
  char *v39;
  llvm::Value ***v40;
  uint64_t v41;
  unsigned int v42;
  _DWORD *v43;
  _QWORD *v44;
  _DWORD *v45;
  llvm::Value *v46;
  llvm::Value ****v47;
  llvm::Value *v48;
  BOOL v49;
  __int16 v50;
  uint64_t v51;
  llvm::Value **v52;
  void *v53;
  llvm::Value **v54;
  __int16 v55;
  llvm::Value ***v56;
  uint64_t v57;
  unsigned int v58;
  _DWORD *v59;
  _QWORD *v60;
  _DWORD *v61;
  llvm::Value *v62;
  llvm::Value ****v63;
  llvm::Value *v64;
  int v65;
  unint64_t v66;
  int8x8_t *v67;
  int8x8_t v68;
  uint8x8_t v69;
  int v70;
  __int16 v71;
  int v72;
  const llvm::APInt *v73;
  uint64_t ***v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  llvm::Value **v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  llvm::ConstantInt ***v84;
  llvm::ConstantInt **v85;
  int v86;
  int v87;
  char *v88;
  llvm::Value ***v89;
  const llvm::APInt *v90;
  llvm::Value **v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  llvm::Value *v97;
  llvm::Value ****v98;
  llvm::Value *v99;
  __int16 v100;
  uint64_t v101;
  int v102;
  llvm::Value **v103;
  uint64_t ***v104;
  unsigned int v105;
  void *v106;
  unint64_t v107;
  unsigned int v108;
  _BOOL4 v109;
  uint64_t v110;
  uint64_t ***v111;
  uint64_t v112;
  char *v113;
  llvm::Value ***v114;
  __int16 v115;
  llvm::Type *v116;
  llvm::Value **NullValue;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  llvm::Value *v123;
  llvm::Value ****v124;
  llvm::Value *v125;
  __int16 v126;
  uint64_t ***v127;
  unint64_t v128;
  int8x8_t v129;
  unsigned int v130;
  uint64_t ***v131;
  unint64_t v132;
  int8x8_t v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t ***v136;
  unint64_t v137;
  void *v138;
  unsigned int v139;
  llvm::Value ***v140;
  const llvm::APInt *v141;
  llvm::Value **v142;
  uint64_t v143;
  unsigned int v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  llvm::Value *v148;
  llvm::Value ****v149;
  llvm::Value *v150;
  llvm::ConstantInt **v151;
  int v152;
  uint64_t v153;
  uint64_t ***v154;
  unsigned int v155;
  const llvm::APInt *v156;
  llvm::Value **v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  llvm::ConstantInt ***v163;
  llvm::ConstantInt **v164;
  int v165;
  int v166;
  llvm::Value **v167;
  unsigned int v168;
  int v169;
  char *v170;
  llvm::Value ***v171;
  _DWORD **v172;
  unsigned int v173;
  int v174;
  llvm::ConstantInt *v175;
  uint64_t v176;
  llvm::Value **v177;
  uint64_t v178;
  unsigned int v179;
  _DWORD *v180;
  _QWORD *v181;
  _DWORD *v182;
  llvm::Value *v183;
  llvm::Value ****v184;
  llvm::Value *v185;
  void **p_src;
  void *v188;
  unsigned int v189;
  const void *v190;
  unsigned int v191;
  _BOOL4 v192;
  uint64_t v193;
  uint64_t ***v194;
  unint64_t v195;
  int8x8_t v196;
  unsigned int v197;
  llvm::Value ***v198;
  _QWORD *v199;
  uint64_t v200;
  unsigned int v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  llvm::Value *v205;
  llvm::Value ****v206;
  llvm::Value *v207;
  uint64_t v208;
  const void *v209;
  uint64_t ***v210;
  unint64_t v211;
  size_t v212;
  char *v213;
  llvm::Value ***v214;
  const llvm::APInt *v215;
  llvm::Value **v216;
  uint64_t v217;
  unsigned int v218;
  _DWORD *v219;
  _QWORD *v220;
  llvm::Value *v221;
  llvm::Value ****v222;
  llvm::Value *v223;
  llvm::Value ***v224;
  const llvm::APInt *v225;
  llvm::Value **v226;
  uint64_t v227;
  unsigned int v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  llvm::Value *v232;
  llvm::Value ****v233;
  llvm::Value *v234;
  llvm::ConstantInt *v235;
  llvm::ConstantInt **v236;
  uint64_t ***v237;
  unint64_t v238;
  unsigned int v239;
  uint64_t **v240;
  llvm::ConstantInt *v241;
  unsigned int v243;
  unsigned int v244;
  unsigned int v245;
  uint64_t v246;
  signed int v247;
  uint64_t v248;
  char *v249;
  char *v250;
  char *v251;
  _QWORD *v252;
  llvm::ConstantInt **v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t ***v257;
  unsigned int v258;
  void *v259;
  unsigned int v260;
  char *v261;
  llvm::Value ***v262;
  const llvm::APInt *v263;
  llvm::Value **v264;
  uint64_t v265;
  unsigned int v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  llvm::Value *v270;
  llvm::Value ****v271;
  llvm::Value *v272;
  void *v273;
  unsigned int v274;
  llvm::Value ***v275;
  const llvm::APInt *v276;
  llvm::Value **v277;
  uint64_t v278;
  unsigned int v279;
  uint64_t v280;
  _QWORD *v281;
  uint64_t v282;
  llvm::Value *v283;
  llvm::Value ****v284;
  llvm::Value *v285;
  llvm::Value ***v286;
  _QWORD *v287;
  uint64_t v288;
  unsigned int v289;
  uint64_t v290;
  _QWORD *v291;
  uint64_t v292;
  llvm::Value *v293;
  llvm::Value ****v294;
  llvm::Value *v295;
  const llvm::APInt *v296;
  uint64_t v297;
  uint8x8_t v298;
  int v299;
  uint64_t v300;
  int v301;
  unint64_t v302;
  uint8x8_t v303;
  uint64_t v304;
  llvm::ConstantInt **v305;
  unint64_t v306;
  unint64_t v307;
  llvm::ConstantInt **v308;
  char *v309;
  void **v310;
  void **v311;
  llvm::ConstantInt **v312;
  uint64_t v313;
  uint64_t ***v314;
  unint64_t v315;
  int8x8_t v316;
  unsigned int v317;
  const llvm::APInt *v318;
  void *v319;
  unsigned int v320;
  llvm::Value **v321;
  char *v322;
  llvm::Value ***v323;
  __int16 v324;
  uint64_t v325;
  unsigned int v326;
  uint64_t v327;
  _QWORD *v328;
  uint64_t v329;
  llvm::Value *v330;
  llvm::Value ****v331;
  llvm::Value *v332;
  uint64_t v333;
  uint64_t v334;
  uint8x8_t v335;
  int v336;
  uint64_t v337;
  int v338;
  unint64_t v339;
  int8x8_t *v340;
  int8x8_t v341;
  uint8x8_t v342;
  const llvm::APInt *v343;
  unsigned int v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t ***v347;
  uint64_t **v348;
  llvm::Value **v349;
  uint64_t v350;
  char *v351;
  llvm::Value ***v352;
  llvm::Type *v353;
  llvm::Value **v354;
  uint64_t v355;
  unsigned int v356;
  uint64_t v357;
  _QWORD *v358;
  uint64_t v359;
  llvm::Value *v360;
  llvm::Value ****v361;
  llvm::Value *v362;
  __int16 v363;
  llvm::ConstantInt **v364;
  char *v365;
  void **v366;
  void **v367;
  uint64_t v368;
  char *v369;
  llvm::Value ***v370;
  int v371;
  llvm::Type *v372;
  llvm::Value **v373;
  uint64_t v374;
  unsigned int v375;
  uint64_t v376;
  _QWORD *v377;
  uint64_t v378;
  llvm::Value *v379;
  llvm::Value ****v380;
  llvm::Value *v381;
  BOOL v382;
  unint64_t v383;
  size_t v384;
  size_t v385;
  uint64_t ***v386;
  uint64_t **v387;
  llvm::Value **v388;
  uint64_t v389;
  llvm::Value ***v390;
  llvm::Type *v391;
  llvm::Value **v392;
  uint64_t v393;
  unsigned int v394;
  uint64_t v395;
  _QWORD *v396;
  uint64_t v397;
  llvm::Value *v398;
  llvm::Value ****v399;
  llvm::Value *v400;
  __int16 v401;
  llvm::Type *v402;
  unint64_t v403;
  uint64_t ***v404;
  uint64_t v405;
  size_t v406;
  const llvm::APInt *v407;
  llvm::Value **v408;
  char *v409;
  llvm::Value ***v410;
  __int16 v411;
  uint64_t *v412;
  unsigned __int8 *v413;
  uint64_t v414;
  unsigned int v415;
  uint64_t v416;
  _QWORD *v417;
  uint64_t v418;
  llvm::Value *v419;
  llvm::Value ****v420;
  llvm::Value *v421;
  _DWORD *v422;
  _DWORD *v423;
  int v424;
  unint64_t v425;
  void *v426;
  unint64_t v427;
  void *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  __int16 v463;
  uint64_t v464;
  _DWORD **v465;
  _QWORD *v466;
  llvm::ConstantInt **v467;
  llvm::ConstantInt **v468;
  void *__src;
  unsigned int v470;
  __int16 v471;
  uint64_t v472;
  unsigned int v473;
  uint64_t v474;
  unsigned int v475;
  void *v476;
  int v477;
  int8x8_t v478;
  unsigned int v479;
  unsigned __int8 v480;
  void *v481;
  unsigned int v482;
  unint64_t v483;
  unsigned int v484;
  void *v485;
  unsigned int v486;
  void *v487;
  unsigned int v488;
  int v489;
  uint64_t ***v490;
  unint64_t **v491;
  uint64_t v492;
  void **v493;
  const char *v494;
  __int16 v495;

  v491 = 0;
  if ((*(_WORD *)(a2 + 18) & 0x3E) != 0x20
    || (v8 = (unsigned __int8 *)*(a3 - 8),
        v492 = (uint64_t)&v491,
        v493 = 0,
        !sub_1C4D89F84((uint64_t)&v492, v8)))
  {
    v490 = 0;
    v15 = (unsigned __int8 *)*(a3 - 4);
    v492 = (uint64_t)&v490;
    v493 = 0;
    if ((sub_1C4D89F84((uint64_t)&v492, v15) & 1) != 0)
    {
      v16 = a4[1].u32[0];
      v17 = v490;
      v18 = *((_DWORD *)v490 + 2);
      v19 = (uint64_t **)v490;
      if (v18 >= 0x41)
      {
        if (v18 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v490) > 0x40)
          return 0;
        v19 = *v17;
      }
      if ((unint64_t)*v19 >= v16)
        return 0;
      v20 = *(_WORD *)(a2 + 18) & 0x3F;
      v489 = v20;
      v21 = *(a3 - 8);
      v22 = (llvm::ConstantInt **)*a3;
      if ((*((_BYTE *)a3 + 17) & 4) != 0)
      {
        if (v20 == 38)
        {
          v470 = v16;
          if (v16 > 0x40)
          {
            __src = (void *)operator new[]();
            memcpy(__src, *(const void **)a4, ((v16 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            __src = (void *)*a4;
          }
          llvm::APInt::ashrInPlace((llvm::APInt *)&__src, v17);
          v88 = (char *)operator new(0x80uLL);
          v31 = (uint64_t ***)(v88 + 64);
          *((_DWORD *)v88 + 21) = *((_DWORD *)v88 + 21) & 0x38000000 | 2;
          *(_QWORD *)v88 = 0;
          *((_QWORD *)v88 + 1) = 0;
          *((_QWORD *)v88 + 2) = 0;
          *((_QWORD *)v88 + 3) = v88 + 64;
          *((_QWORD *)v88 + 4) = 0;
          v89 = (llvm::Value ***)(v88 + 32);
          *((_QWORD *)v88 + 5) = 0;
          *((_QWORD *)v88 + 6) = 0;
          *((_QWORD *)v88 + 7) = v88 + 64;
          v91 = llvm::ConstantInt::get(v22, (llvm::Type *)&__src, v90);
          v495 = 257;
          sub_1C4774CC4((_DWORD *)*v21);
          *((_QWORD *)v88 + 8) = v92;
          *((_QWORD *)v88 + 9) = 0;
          v93 = *((_DWORD *)v88 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v88 + 20) = 81;
          *((_DWORD *)v88 + 21) = v93;
          *(_OWORD *)(v88 + 88) = 0u;
          *(_OWORD *)(v88 + 104) = 0u;
          *((_DWORD *)v88 + 30) = 0;
          if (*(_QWORD *)v88)
          {
            **((_QWORD **)v88 + 2) = *((_QWORD *)v88 + 1);
            v435 = *((_QWORD *)v88 + 1);
            if (v435)
              *(_QWORD *)(v435 + 16) = *((_QWORD *)v88 + 2);
          }
          *(_QWORD *)v88 = v21;
          v96 = v21[1];
          v95 = v21 + 1;
          v94 = v96;
          *((_QWORD *)v88 + 1) = v96;
          if (v96)
            *(_QWORD *)(v94 + 16) = v88 + 8;
          *((_QWORD *)v88 + 2) = v95;
          *v95 = v88;
          if (*((_QWORD *)v88 + 4))
          {
            **((_QWORD **)v88 + 6) = *((_QWORD *)v88 + 5);
            v436 = *((_QWORD *)v88 + 5);
            if (v436)
              *(_QWORD *)(v436 + 16) = *((_QWORD *)v88 + 6);
          }
          *v89 = v91;
          if (v91)
          {
            v99 = v91[1];
            v98 = (llvm::Value ****)(v91 + 1);
            v97 = v99;
            *((_QWORD *)v88 + 5) = v99;
            if (v99)
              *((_QWORD *)v97 + 2) = v88 + 40;
            *((_QWORD *)v88 + 6) = v98;
            *v98 = v89;
          }
          v100 = 38;
          goto LABEL_339;
        }
        if ((v20 & 0x3E) == 0x20)
        {
          v465 = (_DWORD **)*(a3 - 8);
          v467 = (llvm::ConstantInt **)*a3;
          v470 = v16;
          if (v16 > 0x40)
          {
            v53 = (void *)operator new[]();
            memcpy(v53, *(const void **)a4, ((v16 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v53 = (void *)*a4;
          }
          __src = v53;
          llvm::APInt::ashrInPlace((llvm::APInt *)&__src, v17);
          v104 = v490;
          v105 = v470;
          LODWORD(v493) = v470;
          if (v470 > 0x40)
          {
            v492 = operator new[]();
            v106 = __src;
            v107 = v493;
            memcpy((void *)v492, __src, (((unint64_t)v493 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v106 = __src;
            v492 = (uint64_t)__src;
            v107 = v470;
          }
          v108 = sub_1C47EE5B8(v104, v107);
          sub_1C4888094((uint64_t)&v492, v108);
          if (v493 > 0x40)
          {
            v110 = v492;
            v109 = memcmp((const void *)v492, *(const void **)a4, (((unint64_t)v493 + 63) >> 3) & 0x3FFFFFF8) == 0;
            if (v110)
              MEMORY[0x1CAA32F9C](v110, 0x1000C8000313F17);
          }
          else
          {
            v109 = v492 == *a4;
          }
          v22 = v467;
          if (v105 >= 0x41 && v106)
            MEMORY[0x1CAA32F9C](v106, 0x1000C8000313F17);
          v21 = v465;
          if (v109)
          {
            v111 = v490;
            v112 = a4[1].u32[0];
            v470 = v112;
            if (v112 > 0x40)
            {
              v211 = ((unint64_t)(v112 + 63) >> 3) & 0x3FFFFFF8;
              __src = (void *)operator new[]();
              v212 = v211;
              v22 = v467;
              memcpy(__src, *(const void **)a4, v212);
            }
            else
            {
              __src = (void *)*a4;
            }
            llvm::APInt::ashrInPlace((llvm::APInt *)&__src, v111);
            v213 = (char *)operator new(0x80uLL);
            v31 = (uint64_t ***)(v213 + 64);
            *((_DWORD *)v213 + 21) = *((_DWORD *)v213 + 21) & 0x38000000 | 2;
            *(_QWORD *)v213 = 0;
            *((_QWORD *)v213 + 1) = 0;
            *((_QWORD *)v213 + 2) = 0;
            *((_QWORD *)v213 + 3) = v213 + 64;
            *((_QWORD *)v213 + 4) = 0;
            v214 = (llvm::Value ***)(v213 + 32);
            *((_QWORD *)v213 + 5) = 0;
            *((_QWORD *)v213 + 6) = 0;
            *((_QWORD *)v213 + 7) = v213 + 64;
            v216 = llvm::ConstantInt::get(v22, (llvm::Type *)&__src, v215);
            v495 = 257;
            sub_1C4774CC4(*v465);
            *((_QWORD *)v213 + 8) = v217;
            *((_QWORD *)v213 + 9) = 0;
            v218 = *((_DWORD *)v213 + 21) & 0xC0000000 | 2;
            *((_DWORD *)v213 + 20) = 81;
            *((_DWORD *)v213 + 21) = v218;
            *(_OWORD *)(v213 + 88) = 0u;
            *(_OWORD *)(v213 + 104) = 0u;
            *((_DWORD *)v213 + 30) = 0;
            if (*(_QWORD *)v213)
            {
              **((_QWORD **)v213 + 2) = *((_QWORD *)v213 + 1);
              v441 = *((_QWORD *)v213 + 1);
              if (v441)
                *(_QWORD *)(v441 + 16) = *((_QWORD *)v213 + 2);
            }
            *(_QWORD *)v213 = v465;
            v220 = v465 + 1;
            v219 = v465[1];
            *((_QWORD *)v213 + 1) = v219;
            if (v219)
              *((_QWORD *)v219 + 2) = v213 + 8;
            *((_QWORD *)v213 + 2) = v220;
            *v220 = v213;
            if (*((_QWORD *)v213 + 4))
            {
              **((_QWORD **)v213 + 6) = *((_QWORD *)v213 + 5);
              v442 = *((_QWORD *)v213 + 5);
              if (v442)
                *(_QWORD *)(v442 + 16) = *((_QWORD *)v213 + 6);
            }
            *v214 = v216;
            if (v216)
            {
              v223 = v216[1];
              v222 = (llvm::Value ****)(v216 + 1);
              v221 = v223;
              *((_QWORD *)v213 + 5) = v223;
              if (v223)
                *((_QWORD *)v221 + 2) = v213 + 40;
              *((_QWORD *)v213 + 6) = v222;
              *v222 = v214;
            }
            *((_WORD *)v213 + 41) = v20;
            goto LABEL_340;
          }
        }
        else if (v20 == 40)
        {
          v486 = v16;
          if (v16 > 0x40)
          {
            v485 = (void *)operator new[]();
            memcpy(v485, *(const void **)a4, ((v16 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v485 = (void *)*a4;
          }
          llvm::APInt::operator-=((uint64_t)&v485, 1uLL);
          v208 = v486;
          v209 = v485;
          v486 = 0;
          v210 = v490;
          v488 = v208;
          if (v208 > 0x40)
          {
            v487 = (void *)operator new[]();
            memcpy(v487, v209, ((unint64_t)(v208 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v487 = v485;
          }
          llvm::APInt::ashrInPlace((llvm::APInt *)&v487, v210);
          llvm::APInt::operator+=((uint64_t)&v487, 1uLL);
          v470 = v488;
          __src = v487;
          v488 = 0;
          if (v208 >= 0x41 && v209)
            MEMORY[0x1CAA32F9C](v209, 0x1000C8000313F17);
          if (v486 >= 0x41 && v485)
            MEMORY[0x1CAA32F9C](v485, 0x1000C8000313F17);
          v88 = (char *)operator new(0x80uLL);
          v31 = (uint64_t ***)(v88 + 64);
          *((_DWORD *)v88 + 21) = *((_DWORD *)v88 + 21) & 0x38000000 | 2;
          *(_QWORD *)v88 = 0;
          *((_QWORD *)v88 + 1) = 0;
          *((_QWORD *)v88 + 2) = 0;
          *((_QWORD *)v88 + 3) = v88 + 64;
          *((_QWORD *)v88 + 4) = 0;
          v224 = (llvm::Value ***)(v88 + 32);
          *((_QWORD *)v88 + 5) = 0;
          *((_QWORD *)v88 + 6) = 0;
          *((_QWORD *)v88 + 7) = v88 + 64;
          v226 = llvm::ConstantInt::get(v22, (llvm::Type *)&__src, v225);
          v495 = 257;
          sub_1C4774CC4((_DWORD *)*v21);
          *((_QWORD *)v88 + 8) = v227;
          *((_QWORD *)v88 + 9) = 0;
          v228 = *((_DWORD *)v88 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v88 + 20) = 81;
          *((_DWORD *)v88 + 21) = v228;
          *(_OWORD *)(v88 + 88) = 0u;
          *(_OWORD *)(v88 + 104) = 0u;
          *((_DWORD *)v88 + 30) = 0;
          if (*(_QWORD *)v88)
          {
            **((_QWORD **)v88 + 2) = *((_QWORD *)v88 + 1);
            v443 = *((_QWORD *)v88 + 1);
            if (v443)
              *(_QWORD *)(v443 + 16) = *((_QWORD *)v88 + 2);
          }
          *(_QWORD *)v88 = v21;
          v231 = v21[1];
          v230 = v21 + 1;
          v229 = v231;
          *((_QWORD *)v88 + 1) = v231;
          if (v231)
            *(_QWORD *)(v229 + 16) = v88 + 8;
          *((_QWORD *)v88 + 2) = v230;
          *v230 = v88;
          if (*((_QWORD *)v88 + 4))
          {
            **((_QWORD **)v88 + 6) = *((_QWORD *)v88 + 5);
            v444 = *((_QWORD *)v88 + 5);
            if (v444)
              *(_QWORD *)(v444 + 16) = *((_QWORD *)v88 + 6);
          }
          *v224 = v226;
          if (v226)
          {
            v234 = v226[1];
            v233 = (llvm::Value ****)(v226 + 1);
            v232 = v234;
            *((_QWORD *)v88 + 5) = v234;
            if (v234)
              *((_QWORD *)v232 + 2) = v88 + 40;
            *((_QWORD *)v88 + 6) = v233;
            *v233 = v224;
          }
          v100 = 40;
          goto LABEL_339;
        }
        if (sub_1C57EDDE8(&v489, (llvm::APInt *)a4))
        {
          v113 = (char *)operator new(0x80uLL);
          v31 = (uint64_t ***)(v113 + 64);
          *((_DWORD *)v113 + 21) = *((_DWORD *)v113 + 21) & 0x38000000 | 2;
          *(_QWORD *)v113 = 0;
          *((_QWORD *)v113 + 1) = 0;
          *((_QWORD *)v113 + 2) = 0;
          *((_QWORD *)v113 + 3) = v113 + 64;
          *((_QWORD *)v113 + 4) = 0;
          v114 = (llvm::Value ***)(v113 + 32);
          *((_QWORD *)v113 + 5) = 0;
          *((_QWORD *)v113 + 6) = 0;
          *((_QWORD *)v113 + 7) = v113 + 64;
          v115 = v489;
          NullValue = llvm::Constant::getNullValue((llvm::Constant *)v22, v116);
          v495 = 257;
          sub_1C4774CC4((_DWORD *)*v21);
          *((_QWORD *)v113 + 8) = v118;
          *((_QWORD *)v113 + 9) = 0;
          v119 = *((_DWORD *)v113 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v113 + 20) = 81;
          *((_DWORD *)v113 + 21) = v119;
          *(_OWORD *)(v113 + 88) = 0u;
          *(_OWORD *)(v113 + 104) = 0u;
          *((_DWORD *)v113 + 30) = 0;
          if (*(_QWORD *)v113)
          {
            **((_QWORD **)v113 + 2) = *((_QWORD *)v113 + 1);
            v439 = *((_QWORD *)v113 + 1);
            if (v439)
              *(_QWORD *)(v439 + 16) = *((_QWORD *)v113 + 2);
          }
          *(_QWORD *)v113 = v21;
          v122 = v21[1];
          v121 = v21 + 1;
          v120 = v122;
          *((_QWORD *)v113 + 1) = v122;
          if (v122)
            *(_QWORD *)(v120 + 16) = v113 + 8;
          *((_QWORD *)v113 + 2) = v121;
          *v121 = v113;
          if (*((_QWORD *)v113 + 4))
          {
            **((_QWORD **)v113 + 6) = *((_QWORD *)v113 + 5);
            v440 = *((_QWORD *)v113 + 5);
            if (v440)
              *(_QWORD *)(v440 + 16) = *((_QWORD *)v113 + 6);
          }
          *v114 = NullValue;
          if (NullValue)
          {
            v125 = NullValue[1];
            v124 = (llvm::Value ****)(NullValue + 1);
            v123 = v125;
            *((_QWORD *)v113 + 5) = v125;
            if (v125)
              *((_QWORD *)v123 + 2) = v113 + 40;
            *((_QWORD *)v113 + 6) = v124;
            *v124 = v114;
          }
          *((_WORD *)v113 + 41) = v115;
          goto LABEL_221;
        }
        if ((*((_BYTE *)a3 + 17) & 2) == 0)
          goto LABEL_15;
      }
      else if ((*((_BYTE *)a3 + 17) & 2) == 0)
      {
        goto LABEL_15;
      }
      v126 = v489;
      if (v489 == 34)
      {
        v127 = v490;
        v128 = a4[1].u32[0];
        v470 = v128;
        if (v128 > 0x40)
        {
          v138 = (void *)operator new[]();
          __src = v138;
          memcpy(v138, *(const void **)a4, ((v128 + 63) >> 3) & 0x3FFFFFF8);
          v139 = sub_1C47EE5B8(v127, v128);
          llvm::APInt::tcShiftRight((llvm::APInt *)v138, (unint64_t *)((v128 + 63) >> 6), v139);
        }
        else
        {
          v129 = *a4;
          v130 = sub_1C47EE5B8(v490, v128);
          if ((_DWORD)v128 == v130)
            __src = 0;
          else
            __src = (void *)(*(_QWORD *)&v129 >> v130);
        }
        v88 = (char *)operator new(0x80uLL);
        v31 = (uint64_t ***)(v88 + 64);
        *((_DWORD *)v88 + 21) = *((_DWORD *)v88 + 21) & 0x38000000 | 2;
        *(_QWORD *)v88 = 0;
        *((_QWORD *)v88 + 1) = 0;
        *((_QWORD *)v88 + 2) = 0;
        *((_QWORD *)v88 + 3) = v88 + 64;
        *((_QWORD *)v88 + 4) = 0;
        v140 = (llvm::Value ***)(v88 + 32);
        *((_QWORD *)v88 + 5) = 0;
        *((_QWORD *)v88 + 6) = 0;
        *((_QWORD *)v88 + 7) = v88 + 64;
        v142 = llvm::ConstantInt::get(v22, (llvm::Type *)&__src, v141);
        v495 = 257;
        sub_1C4774CC4((_DWORD *)*v21);
        *((_QWORD *)v88 + 8) = v143;
        *((_QWORD *)v88 + 9) = 0;
        v144 = *((_DWORD *)v88 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v88 + 20) = 81;
        *((_DWORD *)v88 + 21) = v144;
        *(_OWORD *)(v88 + 88) = 0u;
        *(_OWORD *)(v88 + 104) = 0u;
        *((_DWORD *)v88 + 30) = 0;
        if (*(_QWORD *)v88)
        {
          **((_QWORD **)v88 + 2) = *((_QWORD *)v88 + 1);
          v437 = *((_QWORD *)v88 + 1);
          if (v437)
            *(_QWORD *)(v437 + 16) = *((_QWORD *)v88 + 2);
        }
        *(_QWORD *)v88 = v21;
        v147 = v21[1];
        v146 = v21 + 1;
        v145 = v147;
        *((_QWORD *)v88 + 1) = v147;
        if (v147)
          *(_QWORD *)(v145 + 16) = v88 + 8;
        *((_QWORD *)v88 + 2) = v146;
        *v146 = v88;
        if (*((_QWORD *)v88 + 4))
        {
          **((_QWORD **)v88 + 6) = *((_QWORD *)v88 + 5);
          v438 = *((_QWORD *)v88 + 5);
          if (v438)
            *(_QWORD *)(v438 + 16) = *((_QWORD *)v88 + 6);
        }
        *v140 = v142;
        if (v142)
        {
          v150 = v142[1];
          v149 = (llvm::Value ****)(v142 + 1);
          v148 = v150;
          *((_QWORD *)v88 + 5) = v150;
          if (v150)
            *((_QWORD *)v148 + 2) = v88 + 40;
          *((_QWORD *)v88 + 6) = v149;
          *v149 = v140;
        }
        v100 = 34;
LABEL_339:
        *((_WORD *)v88 + 41) = v100;
LABEL_340:
        llvm::Value::setName(v31, (uint64_t)&v492);
        if (v470 >= 0x41 && __src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        return (llvm::UndefValue **)v31;
      }
      if ((v489 & 0xFFFFFFFE) == 0x20)
      {
        v466 = v21;
        v468 = v22;
        v131 = v490;
        v132 = a4[1].u32[0];
        if (v132 > 0x40)
        {
          v463 = v489;
          v188 = (void *)operator new[]();
          memcpy(v188, *(const void **)a4, ((v132 + 63) >> 3) & 0x3FFFFFF8);
          v189 = sub_1C47EE5B8(v131, v132);
          llvm::APInt::tcShiftRight((llvm::APInt *)v188, (unint64_t *)((v132 + 63) >> 6), v189);
          v136 = v490;
          LODWORD(v493) = v132;
          v135 = operator new[]();
          v137 = v493;
          v464 = (uint64_t)v188;
          v190 = v188;
          v126 = v463;
          memcpy((void *)v135, v190, (((unint64_t)v493 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v133 = *a4;
          v134 = sub_1C47EE5B8(v490, a4[1].u32[0]);
          if ((_DWORD)v132 == v134)
            v135 = 0;
          else
            v135 = *(_QWORD *)&v133 >> v134;
          v136 = v490;
          LODWORD(v493) = v132;
          v137 = v132;
          v464 = v135;
        }
        v492 = v135;
        v191 = sub_1C47EE5B8(v136, v137);
        sub_1C4888094((uint64_t)&v492, v191);
        if (v493 > 0x40)
        {
          v193 = v492;
          v192 = memcmp((const void *)v492, *(const void **)a4, (((unint64_t)v493 + 63) >> 3) & 0x3FFFFFF8) == 0;
          v21 = v466;
          if (v193)
            MEMORY[0x1CAA32F9C](v193, 0x1000C8000313F17);
        }
        else
        {
          v192 = v492 == *a4;
          v21 = v466;
        }
        if (v132 >= 0x41 && v464)
          MEMORY[0x1CAA32F9C](v464, 0x1000C8000313F17);
        v22 = v468;
        if (v192)
        {
          v194 = v490;
          v195 = a4[1].u32[0];
          v470 = v195;
          if (v195 > 0x40)
          {
            v259 = (void *)operator new[]();
            __src = v259;
            v22 = v468;
            memcpy(v259, *(const void **)a4, ((v195 + 63) >> 3) & 0x3FFFFFF8);
            v260 = sub_1C47EE5B8(v194, v195);
            llvm::APInt::tcShiftRight((llvm::APInt *)v259, (unint64_t *)((v195 + 63) >> 6), v260);
          }
          else
          {
            v196 = *a4;
            v197 = sub_1C47EE5B8(v490, v195);
            if ((_DWORD)v195 == v197)
              __src = 0;
            else
              __src = (void *)(*(_QWORD *)&v196 >> v197);
          }
          v261 = (char *)operator new(0x80uLL);
          v31 = (uint64_t ***)(v261 + 64);
          *((_DWORD *)v261 + 21) = *((_DWORD *)v261 + 21) & 0x38000000 | 2;
          *(_QWORD *)v261 = 0;
          *((_QWORD *)v261 + 1) = 0;
          *((_QWORD *)v261 + 2) = 0;
          *((_QWORD *)v261 + 3) = v261 + 64;
          *((_QWORD *)v261 + 4) = 0;
          v262 = (llvm::Value ***)(v261 + 32);
          *((_QWORD *)v261 + 5) = 0;
          *((_QWORD *)v261 + 6) = 0;
          *((_QWORD *)v261 + 7) = v261 + 64;
          v264 = llvm::ConstantInt::get(v22, (llvm::Type *)&__src, v263);
          v495 = 257;
          sub_1C4774CC4((_DWORD *)*v21);
          *((_QWORD *)v261 + 8) = v265;
          *((_QWORD *)v261 + 9) = 0;
          v266 = *((_DWORD *)v261 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v261 + 20) = 81;
          *((_DWORD *)v261 + 21) = v266;
          *(_OWORD *)(v261 + 88) = 0u;
          *(_OWORD *)(v261 + 104) = 0u;
          *((_DWORD *)v261 + 30) = 0;
          if (*(_QWORD *)v261)
          {
            **((_QWORD **)v261 + 2) = *((_QWORD *)v261 + 1);
            v447 = *((_QWORD *)v261 + 1);
            if (v447)
              *(_QWORD *)(v447 + 16) = *((_QWORD *)v261 + 2);
          }
          *(_QWORD *)v261 = v21;
          v269 = v21[1];
          v268 = v21 + 1;
          v267 = v269;
          *((_QWORD *)v261 + 1) = v269;
          if (v269)
            *(_QWORD *)(v267 + 16) = v261 + 8;
          *((_QWORD *)v261 + 2) = v268;
          *v268 = v261;
          if (*((_QWORD *)v261 + 4))
          {
            **((_QWORD **)v261 + 6) = *((_QWORD *)v261 + 5);
            v448 = *((_QWORD *)v261 + 5);
            if (v448)
              *(_QWORD *)(v448 + 16) = *((_QWORD *)v261 + 6);
          }
          *v262 = v264;
          if (v264)
          {
            v272 = v264[1];
            v271 = (llvm::Value ****)(v264 + 1);
            v270 = v272;
            *((_QWORD *)v261 + 5) = v272;
            if (v272)
              *((_QWORD *)v270 + 2) = v261 + 40;
            *((_QWORD *)v261 + 6) = v271;
            *v271 = v262;
          }
          *((_WORD *)v261 + 41) = v126;
          goto LABEL_340;
        }
      }
      else if (v489 == 36)
      {
        v482 = a4[1].u32[0];
        v151 = v22;
        if (v482 > 0x40)
        {
          v481 = (void *)operator new[]();
          memcpy(v481, *(const void **)a4, (((unint64_t)v482 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v481 = (void *)*a4;
        }
        llvm::APInt::operator-=((uint64_t)&v481, 1uLL);
        v255 = v482;
        v256 = (unint64_t)v481;
        v482 = 0;
        v257 = v490;
        v484 = v255;
        if (v255 > 0x40)
        {
          v273 = (void *)operator new[]();
          v483 = (unint64_t)v273;
          memcpy(v273, (const void *)v256, ((v255 + 63) >> 3) & 0x3FFFFFF8);
          v274 = sub_1C47EE5B8(v257, v255);
          llvm::APInt::tcShiftRight((llvm::APInt *)v273, (unint64_t *)((v255 + 63) >> 6), v274);
        }
        else
        {
          v258 = sub_1C47EE5B8(v490, v255);
          if ((_DWORD)v255 == v258)
            v483 = 0;
          else
            v483 = v256 >> v258;
        }
        llvm::APInt::operator+=((uint64_t)&v483, 1uLL);
        v470 = v484;
        __src = (void *)v483;
        v484 = 0;
        if (v255 >= 0x41 && v256)
          MEMORY[0x1CAA32F9C](v256, 0x1000C8000313F17);
        if (v482 >= 0x41 && v481)
          MEMORY[0x1CAA32F9C](v481, 0x1000C8000313F17);
        v88 = (char *)operator new(0x80uLL);
        v31 = (uint64_t ***)(v88 + 64);
        *((_DWORD *)v88 + 21) = *((_DWORD *)v88 + 21) & 0x38000000 | 2;
        *(_QWORD *)v88 = 0;
        *((_QWORD *)v88 + 1) = 0;
        *((_QWORD *)v88 + 2) = 0;
        *((_QWORD *)v88 + 3) = v88 + 64;
        *((_QWORD *)v88 + 4) = 0;
        v275 = (llvm::Value ***)(v88 + 32);
        *((_QWORD *)v88 + 5) = 0;
        *((_QWORD *)v88 + 6) = 0;
        *((_QWORD *)v88 + 7) = v88 + 64;
        v277 = llvm::ConstantInt::get(v151, (llvm::Type *)&__src, v276);
        v495 = 257;
        sub_1C4774CC4((_DWORD *)*v21);
        *((_QWORD *)v88 + 8) = v278;
        *((_QWORD *)v88 + 9) = 0;
        v279 = *((_DWORD *)v88 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v88 + 20) = 81;
        *((_DWORD *)v88 + 21) = v279;
        *(_OWORD *)(v88 + 88) = 0u;
        *(_OWORD *)(v88 + 104) = 0u;
        *((_DWORD *)v88 + 30) = 0;
        if (*(_QWORD *)v88)
        {
          **((_QWORD **)v88 + 2) = *((_QWORD *)v88 + 1);
          v449 = *((_QWORD *)v88 + 1);
          if (v449)
            *(_QWORD *)(v449 + 16) = *((_QWORD *)v88 + 2);
        }
        *(_QWORD *)v88 = v21;
        v282 = v21[1];
        v281 = v21 + 1;
        v280 = v282;
        *((_QWORD *)v88 + 1) = v282;
        if (v282)
          *(_QWORD *)(v280 + 16) = v88 + 8;
        *((_QWORD *)v88 + 2) = v281;
        *v281 = v88;
        if (*((_QWORD *)v88 + 4))
        {
          **((_QWORD **)v88 + 6) = *((_QWORD *)v88 + 5);
          v450 = *((_QWORD *)v88 + 5);
          if (v450)
            *(_QWORD *)(v450 + 16) = *((_QWORD *)v88 + 6);
        }
        *v275 = v277;
        if (v277)
        {
          v285 = v277[1];
          v284 = (llvm::Value ****)(v277 + 1);
          v283 = v285;
          *((_QWORD *)v88 + 5) = v285;
          if (v285)
            *((_QWORD *)v283 + 2) = v88 + 40;
          *((_QWORD *)v88 + 6) = v284;
          *v284 = v275;
        }
        v100 = 36;
        goto LABEL_339;
      }
LABEL_15:
      v23 = *(_WORD *)(a2 + 18) & 0x3E;
      v24 = a3[1];
      if (v23 == 32)
      {
        if (!v24 || *((_QWORD *)v24 + 1))
        {
          v480 = 0;
          goto LABEL_283;
        }
        v154 = v490;
        if (*((_DWORD *)v490 + 2) >= 0x41u)
          v154 = (uint64_t ***)*v490;
        v155 = v16 - *(_DWORD *)v154;
        LODWORD(v493) = v16;
        if (v16 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v492, 0, 0);
        else
          v492 = 0;
        sub_1C4912E54(&v492, 0, v155);
        v157 = llvm::ConstantInt::get(v22, (llvm::Type *)&v492, v156);
        if (v493 >= 0x41 && v492)
          MEMORY[0x1CAA32F9C](v492, 0x1000C8000313F17);
        v158 = *(_QWORD *)(a1 + 24);
        if ((*((_BYTE *)a3 + 23) & 0x10) == 0)
        {
          v310 = 0;
          v309 = &byte_1C871356D;
          goto LABEL_375;
        }
        v159 = **(_QWORD **)*a3;
        v160 = *(_QWORD *)(v159 + 152);
        v161 = *(unsigned int *)(v159 + 168);
        if ((_DWORD)v161)
        {
          LODWORD(v162) = (v161 - 1) & ((a3 >> 4) ^ (a3 >> 9));
          v163 = (llvm::ConstantInt ***)(v160 + 16 * v162);
          v164 = *v163;
          if (*v163 == a3)
          {
LABEL_374:
            v308 = v163[1];
            v311 = (void **)*v308;
            v309 = (char *)(v308 + 2);
            v310 = v311;
LABEL_375:
            v312 = v22;
            v495 = 773;
            v492 = (uint64_t)v309;
            v493 = v310;
            v494 = ".mask";
            v313 = sub_1C4D89BCC(v158, v21, (uint64_t)v157, (uint64_t)&v492);
            v314 = v490;
            v315 = a4[1].u32[0];
            LODWORD(v493) = v315;
            if (v315 > 0x40)
            {
              v319 = (void *)operator new[]();
              v492 = (uint64_t)v319;
              memcpy(v319, *(const void **)a4, ((v315 + 63) >> 3) & 0x3FFFFFF8);
              v320 = sub_1C47EE5B8(v314, v315);
              llvm::APInt::tcShiftRight((llvm::APInt *)v319, (unint64_t *)((v315 + 63) >> 6), v320);
            }
            else
            {
              v316 = *a4;
              v317 = sub_1C47EE5B8(v490, v315);
              if ((_DWORD)v315 == v317)
                v492 = 0;
              else
                v492 = *(_QWORD *)&v316 >> v317;
            }
            v321 = llvm::ConstantInt::get(v312, (llvm::Type *)&v492, v318);
            if (v493 >= 0x41 && v492)
              MEMORY[0x1CAA32F9C](v492, 0x1000C8000313F17);
            v322 = (char *)operator new(0x80uLL);
            v31 = (uint64_t ***)(v322 + 64);
            *((_DWORD *)v322 + 21) = *((_DWORD *)v322 + 21) & 0x38000000 | 2;
            *(_QWORD *)v322 = 0;
            *((_QWORD *)v322 + 1) = 0;
            *((_QWORD *)v322 + 2) = 0;
            *((_QWORD *)v322 + 3) = v322 + 64;
            *((_QWORD *)v322 + 4) = 0;
            v323 = (llvm::Value ***)(v322 + 32);
            *((_QWORD *)v322 + 5) = 0;
            *((_QWORD *)v322 + 6) = 0;
            *((_QWORD *)v322 + 7) = v322 + 64;
            v324 = v489;
            v495 = 257;
            sub_1C4774CC4(*(_DWORD **)v313);
            *((_QWORD *)v322 + 8) = v325;
            *((_QWORD *)v322 + 9) = 0;
            v326 = *((_DWORD *)v322 + 21) & 0xC0000000 | 2;
            *((_DWORD *)v322 + 20) = 81;
            *((_DWORD *)v322 + 21) = v326;
            *(_OWORD *)(v322 + 88) = 0u;
            *(_OWORD *)(v322 + 104) = 0u;
            *((_DWORD *)v322 + 30) = 0;
            if (*(_QWORD *)v322)
            {
              **((_QWORD **)v322 + 2) = *((_QWORD *)v322 + 1);
              v445 = *((_QWORD *)v322 + 1);
              if (v445)
                *(_QWORD *)(v445 + 16) = *((_QWORD *)v322 + 2);
            }
            *(_QWORD *)v322 = v313;
            v329 = *(_QWORD *)(v313 + 8);
            v328 = (_QWORD *)(v313 + 8);
            v327 = v329;
            *((_QWORD *)v322 + 1) = v329;
            if (v329)
              *(_QWORD *)(v327 + 16) = v322 + 8;
            *((_QWORD *)v322 + 2) = v328;
            *v328 = v322;
            if (*((_QWORD *)v322 + 4))
            {
              **((_QWORD **)v322 + 6) = *((_QWORD *)v322 + 5);
              v446 = *((_QWORD *)v322 + 5);
              if (v446)
                *(_QWORD *)(v446 + 16) = *((_QWORD *)v322 + 6);
            }
            *v323 = v321;
            if (v321)
            {
              v332 = v321[1];
              v331 = (llvm::Value ****)(v321 + 1);
              v330 = v332;
              *((_QWORD *)v322 + 5) = v332;
              if (v332)
                *((_QWORD *)v330 + 2) = v322 + 40;
              *((_QWORD *)v322 + 6) = v331;
              *v331 = v323;
            }
            *((_WORD *)v322 + 41) = v324;
            goto LABEL_221;
          }
          v165 = 1;
          while (v164 != (llvm::ConstantInt **)-4096)
          {
            v166 = v162 + v165++;
            v162 = v166 & (v161 - 1);
            v164 = *(llvm::ConstantInt ***)(v160 + 16 * v162);
            if (v164 == a3)
            {
              v163 = (llvm::ConstantInt ***)(v160 + 16 * v162);
              goto LABEL_374;
            }
          }
        }
        v163 = (llvm::ConstantInt ***)(v160 + 16 * v161);
        goto LABEL_374;
      }
      v480 = 0;
      if (v24 && !*((_QWORD *)v24 + 1))
      {
        if (sub_1C57921EC(v489, (llvm::APInt *)a4, &v480))
        {
          v74 = v490;
          if (*((_DWORD *)v490 + 2) >= 0x41u)
            v74 = (uint64_t ***)*v490;
          v75 = v16 + ~*(_DWORD *)v74;
          LODWORD(v493) = v16;
          if (v16 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v492, 0, 0);
            v77 = 1 << v75;
            if (v493 > 0x40)
            {
              *(_QWORD *)(v492 + 8 * (v75 >> 6)) |= v77;
              goto LABEL_95;
            }
            v76 = v492;
          }
          else
          {
            v76 = 0;
            v77 = 1 << v75;
          }
          v492 = v76 | v77;
LABEL_95:
          v78 = llvm::ConstantInt::get(v22, (llvm::Type *)&v492, v73);
          if (v493 >= 0x41 && v492)
            MEMORY[0x1CAA32F9C](v492, 0x1000C8000313F17);
          v79 = *(_QWORD *)(a1 + 24);
          if ((*((_BYTE *)a3 + 23) & 0x10) == 0)
          {
            v366 = 0;
            v365 = &byte_1C871356D;
LABEL_439:
            v495 = 773;
            v492 = (uint64_t)v365;
            v493 = v366;
            v494 = ".mask";
            v368 = sub_1C4D89BCC(v79, v21, (uint64_t)v78, (uint64_t)&v492);
            v369 = (char *)operator new(0x80uLL);
            v31 = (uint64_t ***)(v369 + 64);
            *((_DWORD *)v369 + 21) = *((_DWORD *)v369 + 21) & 0x38000000 | 2;
            *(_QWORD *)v369 = 0;
            *((_QWORD *)v369 + 1) = 0;
            *((_QWORD *)v369 + 2) = 0;
            *((_QWORD *)v369 + 3) = v369 + 64;
            *((_QWORD *)v369 + 4) = 0;
            v370 = (llvm::Value ***)(v369 + 32);
            *((_QWORD *)v369 + 5) = 0;
            *((_QWORD *)v369 + 6) = 0;
            *((_QWORD *)v369 + 7) = v369 + 64;
            v371 = v480;
            v373 = llvm::Constant::getNullValue((llvm::Constant *)v22, v372);
            v495 = 257;
            sub_1C4774CC4(*(_DWORD **)v368);
            *((_QWORD *)v369 + 8) = v374;
            *((_QWORD *)v369 + 9) = 0;
            v375 = *((_DWORD *)v369 + 21) & 0xC0000000 | 2;
            *((_DWORD *)v369 + 20) = 81;
            *((_DWORD *)v369 + 21) = v375;
            *(_OWORD *)(v369 + 88) = 0u;
            *(_OWORD *)(v369 + 104) = 0u;
            *((_DWORD *)v369 + 30) = 0;
            if (*(_QWORD *)v369)
            {
              **((_QWORD **)v369 + 2) = *((_QWORD *)v369 + 1);
              v457 = *((_QWORD *)v369 + 1);
              if (v457)
                *(_QWORD *)(v457 + 16) = *((_QWORD *)v369 + 2);
            }
            *(_QWORD *)v369 = v368;
            v378 = *(_QWORD *)(v368 + 8);
            v377 = (_QWORD *)(v368 + 8);
            v376 = v378;
            *((_QWORD *)v369 + 1) = v378;
            if (v378)
              *(_QWORD *)(v376 + 16) = v369 + 8;
            *((_QWORD *)v369 + 2) = v377;
            *v377 = v369;
            if (*((_QWORD *)v369 + 4))
            {
              **((_QWORD **)v369 + 6) = *((_QWORD *)v369 + 5);
              v458 = *((_QWORD *)v369 + 5);
              if (v458)
                *(_QWORD *)(v458 + 16) = *((_QWORD *)v369 + 6);
            }
            *v370 = v373;
            if (v373)
            {
              v381 = v373[1];
              v380 = (llvm::Value ****)(v373 + 1);
              v379 = v381;
              *((_QWORD *)v369 + 5) = v381;
              if (v381)
                *((_QWORD *)v379 + 2) = v369 + 40;
              *((_QWORD *)v369 + 6) = v380;
              *v380 = v370;
            }
            v382 = v371 == 0;
LABEL_469:
            if (v382)
              v401 = 32;
            else
              v401 = 33;
            *((_WORD *)v369 + 41) = v401;
            goto LABEL_221;
          }
          v80 = **(_QWORD **)*a3;
          v81 = *(_QWORD *)(v80 + 152);
          v82 = *(unsigned int *)(v80 + 168);
          if ((_DWORD)v82)
          {
            LODWORD(v83) = (v82 - 1) & ((a3 >> 4) ^ (a3 >> 9));
            v84 = (llvm::ConstantInt ***)(v81 + 16 * v83);
            v85 = *v84;
            if (*v84 == a3)
            {
LABEL_438:
              v364 = v84[1];
              v367 = (void **)*v364;
              v365 = (char *)(v364 + 2);
              v366 = v367;
              goto LABEL_439;
            }
            v86 = 1;
            while (v85 != (llvm::ConstantInt **)-4096)
            {
              v87 = v83 + v86++;
              v83 = v87 & (v82 - 1);
              v85 = *(llvm::ConstantInt ***)(v81 + 16 * v83);
              if (v85 == a3)
              {
                v84 = (llvm::ConstantInt ***)(v81 + 16 * v83);
                goto LABEL_438;
              }
            }
          }
          v84 = (llvm::ConstantInt ***)(v81 + 16 * v82);
          goto LABEL_438;
        }
        v23 = *(_WORD *)(a2 + 18) & 0x3E;
      }
      if ((v23 - 34) > 3 || (v235 = a3[1]) == 0 || *((_QWORD *)v235 + 1))
      {
LABEL_283:
        v236 = v22;
        v237 = v490;
        v238 = (v16 - 1);
        v239 = *((_DWORD *)v490 + 2);
        if (v239 >= 0x41)
        {
          if (v239 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v490) > 0x40)
            goto LABEL_289;
          v240 = (uint64_t **)**v237;
        }
        else
        {
          v240 = *v490;
        }
        if ((unint64_t)v240 <= v238)
          LODWORD(v238) = (_DWORD)v240;
LABEL_289:
        v241 = a3[1];
        if (!v241)
          return 0;
        if (*((_QWORD *)v241 + 1) || (_DWORD)v238 == 0)
          return 0;
        v243 = a4[1].u32[0];
        if (v243 > 0x40)
        {
          v245 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)a4);
        }
        else
        {
          v244 = __clz(__rbit64((unint64_t)*a4));
          v245 = v243 >= v244 ? v244 : a4[1].i32[0];
        }
        if (v245 < v238)
          return 0;
        v246 = *(_QWORD *)(a1 + 80);
        v247 = v16 - v238;
        v248 = *(_QWORD *)(v246 + 32);
        v249 = *(char **)(v246 + 40);
        v250 = &v249[v248];
        if (v247 <= 0xFF)
        {
          v251 = (char *)memchr(*(void **)(v246 + 32), (char)v247, *(_QWORD *)(v246 + 40));
          if (v251)
            v250 = v251;
        }
        if (&v250[-v248] == v249)
          return 0;
        v252 = **(_QWORD ***)a2;
        LODWORD(v492) = v247;
        if (v247 <= 63)
        {
          v253 = v236;
          if (v247 <= 31)
          {
            if (v247 == 16)
            {
              v254 = *v252 + 1936;
              goto LABEL_475;
            }
            if (v247 == 8)
            {
              v254 = *v252 + 1912;
              v253 = v236;
            }
            else
            {
              v253 = v236;
              if (v247 != 1)
                goto LABEL_507;
              v254 = *v252 + 1888;
            }
LABEL_475:
            if (((_DWORD)v253[1] & 0xFE) == 0x12 && v253)
            {
              v402 = (llvm::Type *)*((unsigned int *)v253 + 8);
              if (*((_DWORD *)v253 + 2) == 19)
                llvm::ScalableVectorType::get((uint64_t **)v254, v402);
              else
                llvm::FixedVectorType::get((llvm::FixedVectorType *)v254, v402);
              v254 = v403;
            }
            v404 = v490;
            v405 = a4[1].u32[0];
            v470 = v405;
            if (v405 > 0x40)
            {
              v406 = ((unint64_t)(v405 + 63) >> 3) & 0x3FFFFFF8;
              __src = (void *)operator new[]();
              memcpy(__src, *(const void **)a4, v406);
            }
            else
            {
              __src = (void *)*a4;
            }
            llvm::APInt::ashrInPlace((llvm::APInt *)&__src, v404);
            llvm::APInt::trunc((llvm::APInt *)&__src, v247, (llvm::APInt *)&v492);
            v408 = llvm::ConstantInt::get((llvm::ConstantInt **)v254, (llvm::Type *)&v492, v407);
            if (v493 >= 0x41 && v492)
              MEMORY[0x1CAA32F9C](v492, 0x1000C8000313F17);
            if (v470 >= 0x41 && __src)
              MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
            v409 = (char *)operator new(0x80uLL);
            *((_DWORD *)v409 + 21) = *((_DWORD *)v409 + 21) & 0x38000000 | 2;
            v31 = (uint64_t ***)(v409 + 64);
            *(_QWORD *)v409 = 0;
            *((_QWORD *)v409 + 1) = 0;
            *((_QWORD *)v409 + 2) = 0;
            *((_QWORD *)v409 + 3) = v409 + 64;
            *((_QWORD *)v409 + 4) = 0;
            v410 = (llvm::Value ***)(v409 + 32);
            *((_QWORD *)v409 + 5) = 0;
            *((_QWORD *)v409 + 6) = 0;
            *((_QWORD *)v409 + 7) = v409 + 64;
            v411 = v489;
            v412 = *(uint64_t **)(a1 + 24);
            v495 = 257;
            v413 = sub_1C4773E38(v412, 38, (unsigned __int8 *)v21, v254, (uint64_t)&v492);
            v471 = 257;
            sub_1C4774CC4(*(_DWORD **)v413);
            *((_QWORD *)v409 + 8) = v414;
            *((_QWORD *)v409 + 9) = 0;
            v415 = *((_DWORD *)v409 + 21) & 0xC0000000 | 2;
            *((_DWORD *)v409 + 20) = 81;
            *((_DWORD *)v409 + 21) = v415;
            *(_OWORD *)(v409 + 88) = 0u;
            *(_OWORD *)(v409 + 104) = 0u;
            *((_DWORD *)v409 + 30) = 0;
            if (*(_QWORD *)v409)
            {
              **((_QWORD **)v409 + 2) = *((_QWORD *)v409 + 1);
              v455 = *((_QWORD *)v409 + 1);
              if (v455)
                *(_QWORD *)(v455 + 16) = *((_QWORD *)v409 + 2);
            }
            *(_QWORD *)v409 = v413;
            v418 = *((_QWORD *)v413 + 1);
            v417 = v413 + 8;
            v416 = v418;
            *((_QWORD *)v409 + 1) = v418;
            if (v418)
              *(_QWORD *)(v416 + 16) = v409 + 8;
            *((_QWORD *)v409 + 2) = v417;
            *v417 = v409;
            if (*((_QWORD *)v409 + 4))
            {
              **((_QWORD **)v409 + 6) = *((_QWORD *)v409 + 5);
              v456 = *((_QWORD *)v409 + 5);
              if (v456)
                *(_QWORD *)(v456 + 16) = *((_QWORD *)v409 + 6);
            }
            *v410 = v408;
            if (v408)
            {
              v421 = v408[1];
              v420 = (llvm::Value ****)(v408 + 1);
              v419 = v421;
              *((_QWORD *)v409 + 5) = v421;
              if (v421)
                *((_QWORD *)v419 + 2) = v409 + 40;
              *((_QWORD *)v409 + 6) = v420;
              *v420 = v410;
            }
            *((_WORD *)v409 + 41) = v411;
            p_src = &__src;
            goto LABEL_222;
          }
          if (v247 == 32)
          {
            v254 = *v252 + 1960;
            goto LABEL_475;
          }
        }
        else
        {
          v253 = v236;
          if (v247 == 64)
          {
            v254 = *v252 + 1984;
            goto LABEL_475;
          }
          if (v247 == 128)
          {
            v254 = *v252 + 2008;
            goto LABEL_475;
          }
        }
LABEL_507:
        v422 = sub_1C5270984(*v252 + 2168, &v492);
        v254 = *((_QWORD *)v422 + 1);
        if (!v254)
        {
          v423 = v422;
          v254 = sub_1C484358C(*v252 + 2040, 24, 3);
          v424 = v492;
          *(_QWORD *)v254 = v252;
          *(_QWORD *)(v254 + 16) = 0;
          *(_QWORD *)(v254 + 8) = (v424 << 8) | 0xDu;
          *((_QWORD *)v423 + 1) = v254;
        }
        goto LABEL_475;
      }
      v479 = a4[1].u32[0];
      if (v479 > 0x40)
      {
        v478 = (int8x8_t)operator new[]();
        memcpy(*(void **)&v478, *(const void **)a4, (((unint64_t)v479 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v478 = *a4;
      }
      llvm::APInt::operator+=((uint64_t)&v478, 1uLL);
      v297 = v479;
      v479 = 0;
      if (v297 > 0x40)
      {
        v300 = 0;
        v301 = 0;
        v302 = ((unint64_t)(v297 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          v303 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(*(_QWORD *)&v478 + v300));
          v303.i16[0] = vaddlv_u8(v303);
          v301 += v303.i32[0];
          v300 += 8;
        }
        while (v302 != v300);
        if (v301 != 1)
        {
          if (v478)
          {
            MEMORY[0x1CAA32F9C](*(_QWORD *)&v478, 0x1000C8000313F17);
            if (v479 >= 0x41)
            {
              if (v478)
                MEMORY[0x1CAA32F9C](*(_QWORD *)&v478, 0x1000C8000313F17);
            }
          }
          goto LABEL_398;
        }
        v299 = v489;
        if (v478)
        {
          MEMORY[0x1CAA32F9C](*(_QWORD *)&v478, 0x1000C8000313F17);
          if (v479 >= 0x41)
          {
            if (v478)
              MEMORY[0x1CAA32F9C](*(_QWORD *)&v478, 0x1000C8000313F17);
          }
        }
      }
      else
      {
        v298 = (uint8x8_t)vcnt_s8(v478);
        v298.i16[0] = vaddlv_u8(v298);
        if (v298.u32[0] != 1)
          goto LABEL_398;
        v299 = v489;
      }
      if (v299 == 37 || v299 == 34)
      {
        v304 = *(_QWORD *)(a1 + 24);
        v305 = (llvm::ConstantInt **)a4[1].u32[0];
        v477 = (int)v305;
        if (v305 > 0x40)
        {
          v383 = ((unint64_t)v305 + 63) >> 3;
          v305 = v22;
          v384 = v383 & 0x3FFFFFF8;
          v476 = (void *)operator new[]();
          v385 = v384;
          v22 = v305;
          memcpy(v476, *(const void **)a4, v385);
          llvm::APInt::flipAllBitsSlowCase((uint64_t)&v476);
          LODWORD(v305) = v477;
          v307 = (unint64_t)v476;
        }
        else
        {
          v306 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v305;
          if (!(_DWORD)v305)
            v306 = 0;
          v307 = v306 & ~*(_QWORD *)a4;
        }
        v386 = v490;
        if (*((_DWORD *)v490 + 2) >= 0x41u)
          v386 = (uint64_t ***)*v490;
        v387 = *v386;
        v470 = v305;
        if (v305 > 0x40)
        {
          v425 = v305 + 63;
          v426 = (void *)operator new[]();
          __src = v426;
          memcpy(v426, (const void *)v307, (v425 >> 3) & 0x3FFFFFF8);
          llvm::APInt::tcShiftRight((llvm::APInt *)v426, (unint64_t *)(v425 >> 6), v387);
        }
        else if ((_DWORD)v305 == (_DWORD)v387)
        {
          __src = 0;
        }
        else
        {
          __src = (void *)(v307 >> (char)v387);
        }
        v495 = 257;
        v388 = llvm::ConstantInt::get((llvm::ConstantInt **)*v21, (llvm::Type *)&__src, v296);
        v389 = sub_1C4D89BCC(v304, v21, (uint64_t)v388, (uint64_t)&v492);
        if (v470 >= 0x41 && __src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        if (v305 >= 0x41 && v307)
          MEMORY[0x1CAA32F9C](v307, 0x1000C8000313F17);
        v369 = (char *)operator new(0x80uLL);
        v31 = (uint64_t ***)(v369 + 64);
        *((_DWORD *)v369 + 21) = *((_DWORD *)v369 + 21) & 0x38000000 | 2;
        *(_QWORD *)v369 = 0;
        *((_QWORD *)v369 + 1) = 0;
        *((_QWORD *)v369 + 2) = 0;
        *((_QWORD *)v369 + 3) = v369 + 64;
        *((_QWORD *)v369 + 4) = 0;
        v390 = (llvm::Value ***)(v369 + 32);
        *((_QWORD *)v369 + 5) = 0;
        *((_QWORD *)v369 + 6) = 0;
        *((_QWORD *)v369 + 7) = v369 + 64;
        v392 = llvm::Constant::getNullValue((llvm::Constant *)v22, v391);
        v495 = 257;
        sub_1C4774CC4(*(_DWORD **)v389);
        *((_QWORD *)v369 + 8) = v393;
        *((_QWORD *)v369 + 9) = 0;
        v394 = *((_DWORD *)v369 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v369 + 20) = 81;
        *((_DWORD *)v369 + 21) = v394;
        *(_OWORD *)(v369 + 88) = 0u;
        *(_OWORD *)(v369 + 104) = 0u;
        *((_DWORD *)v369 + 30) = 0;
        if (*(_QWORD *)v369)
        {
          **((_QWORD **)v369 + 2) = *((_QWORD *)v369 + 1);
          v459 = *((_QWORD *)v369 + 1);
          if (v459)
            *(_QWORD *)(v459 + 16) = *((_QWORD *)v369 + 2);
        }
        *(_QWORD *)v369 = v389;
        v397 = *(_QWORD *)(v389 + 8);
        v396 = (_QWORD *)(v389 + 8);
        v395 = v397;
        *((_QWORD *)v369 + 1) = v397;
        if (v397)
          *(_QWORD *)(v395 + 16) = v369 + 8;
        *((_QWORD *)v369 + 2) = v396;
        *v396 = v369;
        if (*((_QWORD *)v369 + 4))
        {
          **((_QWORD **)v369 + 6) = *((_QWORD *)v369 + 5);
          v460 = *((_QWORD *)v369 + 5);
          if (v460)
            *(_QWORD *)(v460 + 16) = *((_QWORD *)v369 + 6);
        }
        *v390 = v392;
        if (v392)
        {
          v400 = v392[1];
          v399 = (llvm::Value ****)(v392 + 1);
          v398 = v400;
          *((_QWORD *)v369 + 5) = v400;
          if (v400)
            *((_QWORD *)v398 + 2) = v369 + 40;
          *((_QWORD *)v369 + 6) = v399;
          *v399 = v390;
        }
        v382 = v299 == 37;
        goto LABEL_469;
      }
LABEL_398:
      v333 = a4[1].u32[0];
      if (v333 > 0x40)
      {
        v338 = 0;
        v339 = (unint64_t)(v333 + 63) >> 6;
        v340 = (int8x8_t *)*a4;
        do
        {
          v341 = *v340++;
          v342 = (uint8x8_t)vcnt_s8(v341);
          v342.i16[0] = vaddlv_u8(v342);
          v338 += v342.i32[0];
          --v339;
        }
        while (v339);
        if (v338 != 1)
          goto LABEL_283;
        v336 = v489;
        if ((v489 - 35) > 1)
          goto LABEL_283;
        v337 = *(_QWORD *)(a1 + 24);
        v473 = a4[1].u32[0];
        v472 = operator new[]();
        memcpy((void *)v472, *(const void **)a4, (((unint64_t)v473 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v334 = (uint64_t)*a4;
        v335 = (uint8x8_t)vcnt_s8(*a4);
        v335.i16[0] = vaddlv_u8(v335);
        if (v335.u32[0] != 1)
          goto LABEL_283;
        v336 = v489;
        if ((v489 - 35) >= 2)
          goto LABEL_283;
        v337 = *(_QWORD *)(a1 + 24);
        v473 = a4[1].u32[0];
        v472 = v334;
      }
      llvm::APInt::operator-=((uint64_t)&v472, 1uLL);
      v344 = v473;
      v475 = v473;
      v474 = v472;
      v473 = 0;
      if (v475 > 0x40)
      {
        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v474);
        v344 = v475;
        v346 = v474;
      }
      else
      {
        if (v344)
          v345 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v344;
        else
          v345 = 0;
        v346 = v345 & ~v472;
      }
      v347 = v490;
      if (*((_DWORD *)v490 + 2) >= 0x41u)
        v347 = (uint64_t ***)*v490;
      v348 = *v347;
      v470 = v344;
      if (v344 > 0x40)
      {
        v427 = v344 + 63;
        v428 = (void *)operator new[]();
        __src = v428;
        memcpy(v428, (const void *)v346, (v427 >> 3) & 0x3FFFFFF8);
        llvm::APInt::tcShiftRight((llvm::APInt *)v428, (unint64_t *)(v427 >> 6), v348);
      }
      else if (v344 == (_DWORD)v348)
      {
        __src = 0;
      }
      else
      {
        __src = (void *)(v346 >> (char)v348);
      }
      v495 = 257;
      v349 = llvm::ConstantInt::get((llvm::ConstantInt **)*v21, (llvm::Type *)&__src, v343);
      v350 = sub_1C4D89BCC(v337, v21, (uint64_t)v349, (uint64_t)&v492);
      if (v470 >= 0x41 && __src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      if (v344 >= 0x41 && v346)
        MEMORY[0x1CAA32F9C](v346, 0x1000C8000313F17);
      if (v473 >= 0x41 && v472)
        MEMORY[0x1CAA32F9C](v472, 0x1000C8000313F17);
      v351 = (char *)operator new(0x80uLL);
      v31 = (uint64_t ***)(v351 + 64);
      *((_DWORD *)v351 + 21) = *((_DWORD *)v351 + 21) & 0x38000000 | 2;
      *(_QWORD *)v351 = 0;
      *((_QWORD *)v351 + 1) = 0;
      *((_QWORD *)v351 + 2) = 0;
      *((_QWORD *)v351 + 3) = v351 + 64;
      *((_QWORD *)v351 + 4) = 0;
      v352 = (llvm::Value ***)(v351 + 32);
      *((_QWORD *)v351 + 5) = 0;
      *((_QWORD *)v351 + 6) = 0;
      *((_QWORD *)v351 + 7) = v351 + 64;
      v354 = llvm::Constant::getNullValue((llvm::Constant *)v22, v353);
      v495 = 257;
      sub_1C4774CC4(*(_DWORD **)v350);
      *((_QWORD *)v351 + 8) = v355;
      *((_QWORD *)v351 + 9) = 0;
      v356 = *((_DWORD *)v351 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v351 + 20) = 81;
      *((_DWORD *)v351 + 21) = v356;
      *(_OWORD *)(v351 + 88) = 0u;
      *(_OWORD *)(v351 + 104) = 0u;
      *((_DWORD *)v351 + 30) = 0;
      if (*(_QWORD *)v351)
      {
        **((_QWORD **)v351 + 2) = *((_QWORD *)v351 + 1);
        v461 = *((_QWORD *)v351 + 1);
        if (v461)
          *(_QWORD *)(v461 + 16) = *((_QWORD *)v351 + 2);
      }
      *(_QWORD *)v351 = v350;
      v359 = *(_QWORD *)(v350 + 8);
      v358 = (_QWORD *)(v350 + 8);
      v357 = v359;
      *((_QWORD *)v351 + 1) = v359;
      if (v359)
        *(_QWORD *)(v357 + 16) = v351 + 8;
      *((_QWORD *)v351 + 2) = v358;
      *v358 = v351;
      if (*((_QWORD *)v351 + 4))
      {
        **((_QWORD **)v351 + 6) = *((_QWORD *)v351 + 5);
        v462 = *((_QWORD *)v351 + 5);
        if (v462)
          *(_QWORD *)(v462 + 16) = *((_QWORD *)v351 + 6);
      }
      *v352 = v354;
      if (v354)
      {
        v362 = v354[1];
        v361 = (llvm::Value ****)(v354 + 1);
        v360 = v362;
        *((_QWORD *)v351 + 5) = v362;
        if (v362)
          *((_QWORD *)v360 + 2) = v351 + 40;
        *((_QWORD *)v351 + 6) = v361;
        *v361 = v352;
      }
      if (v336 == 36)
        v363 = 32;
      else
        v363 = 33;
      *((_WORD *)v351 + 41) = v363;
      goto LABEL_221;
    }
    __src = 0;
    v493 = &__src;
    v25 = *((unsigned __int8 *)a3 + 16);
    if (v25 == 5)
    {
      if (*((_WORD *)a3 + 9) != 25)
        return 0;
      if (!sub_1C4D89E3C((uint64_t)&v492, a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF)]))
        return 0;
      v26 = a3[-4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF) + 4];
      if (!v26)
        return 0;
    }
    else
    {
      if (v25 != 53)
        return 0;
      if (!sub_1C4D89CC8((uint64_t)&v492, *(a3 - 8)))
        return 0;
      v26 = *(a3 - 4);
      if (!v26)
        return 0;
    }
    *v493 = v26;
    v27 = *a3;
    v28 = a4[1].u32[0];
    if (v28 > 0x40)
    {
      v65 = 0;
      v66 = (unint64_t)(v28 + 63) >> 6;
      v29 = (unint64_t)*a4;
      v67 = (int8x8_t *)*a4;
      do
      {
        v68 = *v67++;
        v69 = (uint8x8_t)vcnt_s8(v68);
        v69.i16[0] = vaddlv_u8(v69);
        v65 += v69.i32[0];
        --v66;
      }
      while (v66);
      v30 = v65 == 1;
    }
    else
    {
      v29 = (unint64_t)*a4;
      if (!*(_QWORD *)a4)
      {
        v71 = *(_WORD *)(a2 + 18);
        v72 = v71 & 0x3F;
        if ((v72 - 34) < 4)
        {
          v29 = 0;
          goto LABEL_124;
        }
        v70 = 0;
LABEL_197:
        if ((v72 - 38) > 3)
        {
          if ((v71 & 0x3E) == 0x20)
            v169 = v70;
          else
            v169 = 0;
          if (v169 != 1)
            return 0;
          v170 = (char *)operator new(0x80uLL);
          *((_DWORD *)v170 + 21) = *((_DWORD *)v170 + 21) & 0x38000000 | 2;
          v31 = (uint64_t ***)(v170 + 64);
          *(_QWORD *)v170 = 0;
          *((_QWORD *)v170 + 1) = 0;
          *((_QWORD *)v170 + 2) = 0;
          *((_QWORD *)v170 + 3) = v170 + 64;
          *((_QWORD *)v170 + 4) = 0;
          v171 = (llvm::Value ***)(v170 + 32);
          *((_QWORD *)v170 + 5) = 0;
          *((_QWORD *)v170 + 6) = 0;
          *((_QWORD *)v170 + 7) = v170 + 64;
          v172 = (_DWORD **)__src;
          v173 = a4[1].u32[0];
          if (v173 > 0x40)
            v174 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a4);
          else
            v174 = v173 + __clz((unint64_t)*a4) - 64;
          v176 = v173 + ~v174;
          v175 = v27;
LABEL_212:
          v177 = llvm::ConstantInt::get(v175, v176, 0);
          v495 = 257;
          sub_1C4774CC4(*v172);
          *((_QWORD *)v170 + 8) = v178;
          *((_QWORD *)v170 + 9) = 0;
          v179 = *((_DWORD *)v170 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v170 + 20) = 81;
          *((_DWORD *)v170 + 21) = v179;
          *(_OWORD *)(v170 + 88) = 0u;
          *(_OWORD *)(v170 + 104) = 0u;
          *((_DWORD *)v170 + 30) = 0;
          if (*(_QWORD *)v170)
          {
            **((_QWORD **)v170 + 2) = *((_QWORD *)v170 + 1);
            v433 = *((_QWORD *)v170 + 1);
            if (v433)
              *(_QWORD *)(v433 + 16) = *((_QWORD *)v170 + 2);
          }
          *(_QWORD *)v170 = v172;
          v182 = v172[1];
          v181 = v172 + 1;
          v180 = v182;
          *((_QWORD *)v170 + 1) = v182;
          if (v182)
            *((_QWORD *)v180 + 2) = v170 + 8;
          *((_QWORD *)v170 + 2) = v181;
          *v181 = v170;
          if (*((_QWORD *)v170 + 4))
          {
            **((_QWORD **)v170 + 6) = *((_QWORD *)v170 + 5);
            v434 = *((_QWORD *)v170 + 5);
            if (v434)
              *(_QWORD *)(v434 + 16) = *((_QWORD *)v170 + 6);
          }
          *v171 = v177;
          if (v177)
          {
            v185 = v177[1];
            v184 = (llvm::Value ****)(v177 + 1);
            v183 = v185;
            *((_QWORD *)v170 + 5) = v185;
            if (v185)
              *((_QWORD *)v183 + 2) = v170 + 40;
            *((_QWORD *)v170 + 6) = v184;
            *v184 = v171;
          }
          *((_WORD *)v170 + 41) = v72;
          goto LABEL_221;
        }
        v167 = llvm::ConstantInt::get(*a3, (v28 - 1), 0);
        v168 = a4[1].u32[0];
        if (v168)
        {
          if (v168 > 0x40)
          {
            if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)a4) != v168)
            {
              if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a4) != v168)
                return 0;
              goto LABEL_344;
            }
          }
          else if (*a4 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v168)
          {
            if (*a4)
              return 0;
LABEL_344:
            if ((v72 & 0x3E) != 0x26)
            {
              if ((v72 & 0x3E) != 0x28)
                return 0;
              goto LABEL_239;
            }
            goto LABEL_347;
          }
        }
        if (v72 != 38)
        {
          if (v72 != 41)
            return 0;
LABEL_239:
          v39 = (char *)operator new(0x80uLL);
          v31 = (uint64_t ***)(v39 + 64);
          *((_DWORD *)v39 + 21) = *((_DWORD *)v39 + 21) & 0x38000000 | 2;
          *(_QWORD *)v39 = 0;
          *((_QWORD *)v39 + 1) = 0;
          *((_QWORD *)v39 + 2) = 0;
          *((_QWORD *)v39 + 3) = v39 + 64;
          *((_QWORD *)v39 + 4) = 0;
          v198 = (llvm::Value ***)(v39 + 32);
          *((_QWORD *)v39 + 5) = 0;
          *((_QWORD *)v39 + 6) = 0;
          *((_QWORD *)v39 + 7) = v39 + 64;
          v199 = __src;
          v495 = 257;
          sub_1C4774CC4(*(_DWORD **)__src);
          *((_QWORD *)v39 + 8) = v200;
          *((_QWORD *)v39 + 9) = 0;
          v201 = *((_DWORD *)v39 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v39 + 20) = 81;
          *((_DWORD *)v39 + 21) = v201;
          *(_OWORD *)(v39 + 88) = 0u;
          *(_OWORD *)(v39 + 104) = 0u;
          *((_DWORD *)v39 + 30) = 0;
          if (*(_QWORD *)v39)
          {
            **((_QWORD **)v39 + 2) = *((_QWORD *)v39 + 1);
            v451 = *((_QWORD *)v39 + 1);
            if (v451)
              *(_QWORD *)(v451 + 16) = *((_QWORD *)v39 + 2);
          }
          *(_QWORD *)v39 = v199;
          v204 = v199[1];
          v203 = v199 + 1;
          v202 = v204;
          *((_QWORD *)v39 + 1) = v204;
          if (v204)
            *(_QWORD *)(v202 + 16) = v39 + 8;
          *((_QWORD *)v39 + 2) = v203;
          *v203 = v39;
          if (*((_QWORD *)v39 + 4))
          {
            **((_QWORD **)v39 + 6) = *((_QWORD *)v39 + 5);
            v452 = *((_QWORD *)v39 + 5);
            if (v452)
              *(_QWORD *)(v452 + 16) = *((_QWORD *)v39 + 6);
          }
          *v198 = v167;
          if (v167)
          {
            v207 = v167[1];
            v206 = (llvm::Value ****)(v167 + 1);
            v205 = v207;
            *((_QWORD *)v39 + 5) = v207;
            if (v207)
              *((_QWORD *)v205 + 2) = v39 + 40;
            *((_QWORD *)v39 + 6) = v206;
            *v206 = v198;
          }
          v50 = 32;
          goto LABEL_77;
        }
LABEL_347:
        v39 = (char *)operator new(0x80uLL);
        v31 = (uint64_t ***)(v39 + 64);
        *((_DWORD *)v39 + 21) = *((_DWORD *)v39 + 21) & 0x38000000 | 2;
        *(_QWORD *)v39 = 0;
        *((_QWORD *)v39 + 1) = 0;
        *((_QWORD *)v39 + 2) = 0;
        *((_QWORD *)v39 + 3) = v39 + 64;
        *((_QWORD *)v39 + 4) = 0;
        v286 = (llvm::Value ***)(v39 + 32);
        *((_QWORD *)v39 + 5) = 0;
        *((_QWORD *)v39 + 6) = 0;
        *((_QWORD *)v39 + 7) = v39 + 64;
        v287 = __src;
        v495 = 257;
        sub_1C4774CC4(*(_DWORD **)__src);
        *((_QWORD *)v39 + 8) = v288;
        *((_QWORD *)v39 + 9) = 0;
        v289 = *((_DWORD *)v39 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v39 + 20) = 81;
        *((_DWORD *)v39 + 21) = v289;
        *(_OWORD *)(v39 + 88) = 0u;
        *(_OWORD *)(v39 + 104) = 0u;
        *((_DWORD *)v39 + 30) = 0;
        if (*(_QWORD *)v39)
        {
          **((_QWORD **)v39 + 2) = *((_QWORD *)v39 + 1);
          v453 = *((_QWORD *)v39 + 1);
          if (v453)
            *(_QWORD *)(v453 + 16) = *((_QWORD *)v39 + 2);
        }
        *(_QWORD *)v39 = v287;
        v292 = v287[1];
        v291 = v287 + 1;
        v290 = v292;
        *((_QWORD *)v39 + 1) = v292;
        if (v292)
          *(_QWORD *)(v290 + 16) = v39 + 8;
        *((_QWORD *)v39 + 2) = v291;
        *v291 = v39;
        if (*((_QWORD *)v39 + 4))
        {
          **((_QWORD **)v39 + 6) = *((_QWORD *)v39 + 5);
          v454 = *((_QWORD *)v39 + 5);
          if (v454)
            *(_QWORD *)(v454 + 16) = *((_QWORD *)v39 + 6);
        }
        *v286 = v167;
        if (v167)
        {
          v295 = v167[1];
          v294 = (llvm::Value ****)(v167 + 1);
          v293 = v295;
          *((_QWORD *)v39 + 5) = v295;
          if (v295)
            *((_QWORD *)v293 + 2) = v39 + 40;
          *((_QWORD *)v39 + 6) = v294;
          *v294 = v286;
        }
        v50 = 33;
        goto LABEL_77;
      }
      v30 = (v29 & (v29 - 1)) == 0;
    }
    v70 = v30;
    v71 = *(_WORD *)(a2 + 18);
    v72 = v71 & 0x3F;
    if ((v72 - 34) < 4)
    {
      if ((v70 & 1) != 0)
      {
LABEL_176:
        if (v28 > 0x40)
          v152 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a4);
        else
          v152 = v28 + __clz(v29) - 64;
        v153 = (v28 + ~v152);
        if (!v152)
        {
          if (v72 == 35)
          {
            LOWORD(v72) = 32;
          }
          else if (v72 == 36)
          {
            LOWORD(v72) = 33;
          }
        }
        v170 = (char *)operator new(0x80uLL);
        v31 = (uint64_t ***)(v170 + 64);
        *((_DWORD *)v170 + 21) = *((_DWORD *)v170 + 21) & 0x38000000 | 2;
        *(_QWORD *)v170 = 0;
        *((_QWORD *)v170 + 1) = 0;
        *((_QWORD *)v170 + 2) = 0;
        *((_QWORD *)v170 + 3) = v170 + 64;
        *((_QWORD *)v170 + 4) = 0;
        v171 = (llvm::Value ***)(v170 + 32);
        *((_QWORD *)v170 + 5) = 0;
        *((_QWORD *)v170 + 6) = 0;
        *((_QWORD *)v170 + 7) = v170 + 64;
        v172 = (_DWORD **)__src;
        v175 = v27;
        v176 = v153;
        goto LABEL_212;
      }
LABEL_124:
      if (v72 == 36)
      {
        v72 = 37;
      }
      else if (v72 == 35)
      {
        v72 = 34;
      }
      goto LABEL_176;
    }
    goto LABEL_197;
  }
  v10 = (_DWORD **)*(a3 - 4);
  v11 = v491;
  v12 = *((unsigned int *)v491 + 2);
  if (v12 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v491) != (_DWORD)v12)
    {
      v14 = llvm::APInt::countTrailingZerosSlowCase(v11);
      goto LABEL_36;
    }
    return 0;
  }
  if (!*v491)
    return 0;
  v13 = __clz(__rbit64((unint64_t)*v491));
  if (v12 >= v13)
    v14 = v13;
  else
    v14 = *((_DWORD *)v491 + 2);
LABEL_36:
  v32 = a4[1].u32[0];
  if (v32 <= 0x40)
  {
    v33 = (unint64_t)*a4;
    if (*(_QWORD *)a4 || !v14)
    {
      v34 = *v11;
      if ((unint64_t *)v33 != *v11)
      {
        v35 = __clz(__rbit64(v33));
        if (v32 >= v35)
          v36 = v35;
        else
          v36 = a4[1].i32[0];
        goto LABEL_56;
      }
LABEL_65:
      v52 = llvm::Constant::getNullValue((llvm::Constant *)*v10, v9);
LABEL_66:
      v54 = v52;
      v55 = *(_WORD *)(a2 + 18);
      v39 = (char *)operator new(0x80uLL);
      v31 = (uint64_t ***)(v39 + 64);
      *((_DWORD *)v39 + 21) = *((_DWORD *)v39 + 21) & 0x38000000 | 2;
      *(_QWORD *)v39 = 0;
      *((_QWORD *)v39 + 1) = 0;
      *((_QWORD *)v39 + 2) = 0;
      *((_QWORD *)v39 + 3) = v39 + 64;
      *((_QWORD *)v39 + 4) = 0;
      v56 = (llvm::Value ***)(v39 + 32);
      *((_QWORD *)v39 + 5) = 0;
      *((_QWORD *)v39 + 6) = 0;
      *((_QWORD *)v39 + 7) = v39 + 64;
      v495 = 257;
      sub_1C4774CC4(*v10);
      *((_QWORD *)v39 + 8) = v57;
      *((_QWORD *)v39 + 9) = 0;
      v58 = *((_DWORD *)v39 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v39 + 20) = 81;
      *((_DWORD *)v39 + 21) = v58;
      *(_OWORD *)(v39 + 88) = 0u;
      *(_OWORD *)(v39 + 104) = 0u;
      *((_DWORD *)v39 + 30) = 0;
      if (*(_QWORD *)v39)
      {
        **((_QWORD **)v39 + 2) = *((_QWORD *)v39 + 1);
        v431 = *((_QWORD *)v39 + 1);
        if (v431)
          *(_QWORD *)(v431 + 16) = *((_QWORD *)v39 + 2);
      }
      *(_QWORD *)v39 = v10;
      v61 = v10[1];
      v60 = v10 + 1;
      v59 = v61;
      *((_QWORD *)v39 + 1) = v61;
      if (v61)
        *((_QWORD *)v59 + 2) = v39 + 8;
      *((_QWORD *)v39 + 2) = v60;
      *v60 = v39;
      if (*((_QWORD *)v39 + 4))
      {
        **((_QWORD **)v39 + 6) = *((_QWORD *)v39 + 5);
        v432 = *((_QWORD *)v39 + 5);
        if (v432)
          *(_QWORD *)(v432 + 16) = *((_QWORD *)v39 + 6);
      }
      *v56 = v54;
      if (v54)
      {
        v64 = v54[1];
        v63 = (llvm::Value ****)(v54 + 1);
        v62 = v64;
        *((_QWORD *)v39 + 5) = v64;
        if (v64)
          *((_QWORD *)v62 + 2) = v39 + 40;
        *((_QWORD *)v39 + 6) = v63;
        *v63 = v56;
      }
      v49 = (v55 & 0x3F) == 33;
      v50 = 32;
LABEL_75:
      if (v49)
        ++v50;
LABEL_77:
      *((_WORD *)v39 + 41) = v50;
LABEL_221:
      p_src = (void **)&v492;
LABEL_222:
      llvm::Value::setName(v31, (uint64_t)p_src);
      return (llvm::UndefValue **)v31;
    }
LABEL_45:
    v37 = llvm::ConstantInt::get((llvm::ConstantInt *)*v10, (v12 - v14), 0);
    v38 = *(_WORD *)(a2 + 18);
    v39 = (char *)operator new(0x80uLL);
    v31 = (uint64_t ***)(v39 + 64);
    *((_DWORD *)v39 + 21) = *((_DWORD *)v39 + 21) & 0x38000000 | 2;
    *(_QWORD *)v39 = 0;
    *((_QWORD *)v39 + 1) = 0;
    *((_QWORD *)v39 + 2) = 0;
    *((_QWORD *)v39 + 3) = v39 + 64;
    *((_QWORD *)v39 + 4) = 0;
    v40 = (llvm::Value ***)(v39 + 32);
    *((_QWORD *)v39 + 5) = 0;
    *((_QWORD *)v39 + 6) = 0;
    *((_QWORD *)v39 + 7) = v39 + 64;
    v495 = 257;
    sub_1C4774CC4(*v10);
    *((_QWORD *)v39 + 8) = v41;
    *((_QWORD *)v39 + 9) = 0;
    v42 = *((_DWORD *)v39 + 21) & 0xC0000000 | 2;
    *((_DWORD *)v39 + 20) = 81;
    *((_DWORD *)v39 + 21) = v42;
    *(_OWORD *)(v39 + 88) = 0u;
    *(_OWORD *)(v39 + 104) = 0u;
    *((_DWORD *)v39 + 30) = 0;
    if (*(_QWORD *)v39)
    {
      **((_QWORD **)v39 + 2) = *((_QWORD *)v39 + 1);
      v429 = *((_QWORD *)v39 + 1);
      if (v429)
        *(_QWORD *)(v429 + 16) = *((_QWORD *)v39 + 2);
    }
    *(_QWORD *)v39 = v10;
    v45 = v10[1];
    v44 = v10 + 1;
    v43 = v45;
    *((_QWORD *)v39 + 1) = v45;
    if (v45)
      *((_QWORD *)v43 + 2) = v39 + 8;
    *((_QWORD *)v39 + 2) = v44;
    *v44 = v39;
    if (*((_QWORD *)v39 + 4))
    {
      **((_QWORD **)v39 + 6) = *((_QWORD *)v39 + 5);
      v430 = *((_QWORD *)v39 + 5);
      if (v430)
        *(_QWORD *)(v430 + 16) = *((_QWORD *)v39 + 6);
    }
    *v40 = v37;
    if (v37)
    {
      v48 = v37[1];
      v47 = (llvm::Value ****)(v37 + 1);
      v46 = v48;
      *((_QWORD *)v39 + 5) = v48;
      if (v48)
        *((_QWORD *)v46 + 2) = v39 + 40;
      *((_QWORD *)v39 + 6) = v47;
      *v47 = v40;
    }
    v49 = (v38 & 0x3F) == 33;
    v50 = 35;
    goto LABEL_75;
  }
  if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a4) == (_DWORD)v32 && v14)
    goto LABEL_45;
  v34 = *v11;
  if (!memcmp(*(const void **)a4, *v11, ((unint64_t)(v32 + 63) >> 3) & 0x3FFFFFF8))
    goto LABEL_65;
  v36 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)a4);
LABEL_56:
  v51 = (v36 - v14);
  if ((int)v51 >= 1)
  {
    LODWORD(v493) = v12;
    if (v12 >= 0x41)
    {
      v34 = (void *)operator new[]();
      memcpy(v34, *v11, ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8);
    }
    v492 = (uint64_t)v34;
    sub_1C4888094((uint64_t)&v492, v51);
    if (v493 > 0x40)
    {
      v101 = v492;
      v102 = memcmp((const void *)v492, *(const void **)a4, (((unint64_t)v493 + 63) >> 3) & 0x3FFFFFF8);
      if (v101)
        MEMORY[0x1CAA32F9C](v101, 0x1000C8000313F17);
      if (!v102)
        goto LABEL_61;
    }
    else if (v492 == *a4)
    {
LABEL_61:
      v52 = llvm::ConstantInt::get((llvm::ConstantInt *)*v10, v51, 0);
      goto LABEL_66;
    }
  }
  v103 = llvm::ConstantInt::get(*(llvm::ConstantInt **)a2, (*(_WORD *)(a2 + 18) & 0x3F) == 33, 0);
  return sub_1C577F888(a1, (llvm::ValueAsMetadata *)a2, (llvm::Value *)v103);
}

llvm::UndefValue **sub_1C57F0AE4(uint64_t a1, uint64_t a2, uint64_t ***a3, llvm::APInt *this)
{
  _DWORD **v8;
  int v9;
  unsigned int v10;
  llvm::Type *v11;
  _DWORD **v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  _DWORD *v27;
  _QWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  llvm::Value **NullValue;
  unsigned int v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  char *v46;
  llvm::Value ***v47;
  const llvm::APInt *v48;
  llvm::Value **v49;
  uint64_t v50;
  unsigned int v51;
  _QWORD *v52;
  _DWORD *v53;
  llvm::Value *v54;
  llvm::Value ****v55;
  llvm::Value *v56;
  char v57;
  llvm::ConstantInt *v58;
  int v59;
  unint64_t v60;
  char *v61;
  llvm::Value ***v62;
  const llvm::APInt *v63;
  llvm::Value **v64;
  uint64_t v65;
  unsigned int v66;
  _QWORD *v67;
  _DWORD *v68;
  llvm::Value *v69;
  llvm::Value ****v70;
  llvm::Value *v71;
  char v72;
  unsigned int v73;
  unsigned int *v74;
  uint64_t v75;
  _BOOL4 v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  llvm::APInt *v80;
  uint64_t v81;
  llvm::APInt *v82;
  int v83;
  llvm::Value **v84;
  __int16 v85;
  char *v86;
  llvm::Value ***v87;
  uint64_t v88;
  unsigned int v89;
  _DWORD *v90;
  _QWORD *v91;
  _DWORD *v92;
  llvm::Value *v93;
  llvm::Value ****v94;
  llvm::Value *v95;
  __int16 v96;
  int v97;
  int v98;
  signed int v99;
  int v100;
  char v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t *v104;
  BOOL v105;
  unint64_t v106;
  char v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  int v112;
  llvm::Value **v113;
  __int16 v114;
  llvm::Value ***v115;
  uint64_t v116;
  unsigned int v117;
  _DWORD *v118;
  _QWORD *v119;
  _DWORD *v120;
  llvm::Value *v121;
  llvm::Value ****v122;
  llvm::Value *v123;
  BOOL v124;
  llvm::Value **v125;
  uint64_t v126;
  uint8x8_t v127;
  int v128;
  unint64_t v129;
  int8x8_t *v130;
  int8x8_t v131;
  uint8x8_t v132;
  llvm::Value **v133;
  __int16 v134;
  llvm::Value ***v135;
  uint64_t v136;
  unsigned int v137;
  _DWORD *v138;
  _QWORD *v139;
  _DWORD *v140;
  llvm::Value *v141;
  llvm::Value ****v142;
  llvm::Value *v143;
  unint64_t v144;
  size_t v145;
  void *v146;
  unsigned int v147;
  const void *v148;
  uint64_t v149;
  unsigned int v150;
  void *v151;
  BOOL v152;
  int v153;
  BOOL v154;
  char *v155;
  llvm::Value ***v156;
  const llvm::APInt *v157;
  llvm::Value **v158;
  uint64_t v159;
  unsigned int v160;
  _QWORD *v161;
  _DWORD *v162;
  llvm::Value *v163;
  llvm::Value ****v164;
  llvm::Value *v165;
  void *v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  int v174;
  unsigned int v175;
  const void *v176;
  unsigned int v177;
  void *v178;
  char v179;
  unsigned int v180;
  const void *v181;
  unsigned int v182;
  uint64_t v183;
  unsigned int v184;
  char v185;
  uint64_t v186;
  unint64_t v187;
  unsigned int v188;
  void *v189;
  BOOL v190;
  int v191;
  char v192;
  char *v193;
  llvm::Value ***v194;
  const llvm::APInt *v195;
  llvm::Value **v196;
  uint64_t v197;
  unsigned int v198;
  _QWORD *v199;
  _DWORD *v200;
  llvm::Value *v201;
  llvm::Value ****v202;
  llvm::Value *v203;
  int v204;
  unsigned int v205;
  const void *v206;
  int v207;
  int v208;
  unint64_t *v209;
  unsigned int v210;
  uint64_t v211;
  unsigned int v212;
  char v213;
  uint64_t v214;
  unint64_t v215;
  unsigned int v216;
  void *v217;
  BOOL v218;
  char *v219;
  llvm::Value ***v220;
  const llvm::APInt *v221;
  llvm::Value **v222;
  uint64_t v223;
  unsigned int v224;
  _QWORD *v225;
  _DWORD *v226;
  llvm::Value *v227;
  llvm::Value ****v228;
  llvm::Value *v229;
  unsigned int v230;
  uint64_t **v231;
  char *v233;
  llvm::Value ***v234;
  uint64_t v235;
  char *v236;
  int v237;
  llvm::Value ***v238;
  uint64_t v239;
  size_t v240;
  const llvm::APInt *v241;
  llvm::Value **v242;
  uint64_t v243;
  unsigned int v244;
  _DWORD *v245;
  _QWORD *v246;
  _DWORD *v247;
  llvm::Value *v248;
  llvm::Value ****v249;
  llvm::Value *v250;
  unint64_t v251;
  char *v252;
  llvm::Value ***v253;
  llvm::Type *v254;
  llvm::Value **v255;
  uint64_t v256;
  unsigned int v257;
  _DWORD *v258;
  _QWORD *v259;
  _DWORD *v260;
  llvm::Value *v261;
  llvm::Value ****v262;
  llvm::Value *v263;
  __int16 v264;
  llvm::ValueHandleBase **v265;
  llvm::Type *v266;
  llvm::ValueHandleBase *AllOnesValue;
  uint64_t v268;
  unsigned int v269;
  _DWORD *v270;
  _QWORD *v271;
  _DWORD *v272;
  uint64_t v273;
  llvm::ValueHandleBase ***v274;
  uint64_t v275;
  uint64_t v276;
  const llvm::APInt *v277;
  llvm::Value **v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t ****v284;
  uint64_t ***v285;
  int v286;
  int v287;
  size_t v288;
  uint64_t v289;
  const void *v290;
  size_t v291;
  uint64_t v292;
  const void *v293;
  const llvm::APInt *v294;
  llvm::Value **v295;
  uint64_t v296;
  unsigned int v297;
  _DWORD *v298;
  _QWORD *v299;
  _DWORD *v300;
  llvm::Value *v301;
  llvm::Value ****v302;
  llvm::Value *v303;
  const llvm::APInt *v304;
  llvm::Value **v305;
  uint64_t v306;
  unsigned int v307;
  _DWORD *v308;
  _QWORD *v309;
  _DWORD *v310;
  llvm::Value *v311;
  llvm::Value ****v312;
  llvm::Value *v313;
  uint64_t ***v314;
  unint64_t *v315;
  uint64_t **v316;
  uint64_t **v317;
  uint64_t v318;
  char *v319;
  llvm::Value ***v320;
  uint64_t v321;
  size_t v322;
  const llvm::APInt *v323;
  llvm::Value **v324;
  uint64_t v325;
  unsigned int v326;
  uint64_t v327;
  _QWORD *v328;
  uint64_t v329;
  llvm::Value *v330;
  llvm::Value ****v331;
  llvm::Value *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  unsigned int v363;
  void *__src;
  void *__srca;
  unint64_t __s1;
  int __s1a;
  unsigned int __s1b;
  int v369;
  void *v370;
  void *v371;
  int v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  llvm::ConstantInt **v378;
  int v379;
  void *v380;
  unsigned int v381;
  void *v382;
  unsigned int v383;
  void *v384;
  unsigned int v385;
  void *__s2;
  unsigned int v387;
  unint64_t v388;
  unsigned int v389;
  void *v390;
  unsigned int v391;
  void *v392;
  unsigned int v393;
  void *v394;
  unsigned int v395;
  void *v396;
  unsigned int v397;
  void *v398;
  unsigned int v399;
  void *v400;
  unsigned int v401;
  void *v402;
  unsigned int v403;
  void *v404;
  unsigned int v405;
  void *v406;
  unsigned int v407;
  void *v408;
  unsigned int v409;
  void *v410;
  unsigned int v411;
  void *v412;
  unsigned int v413;
  unint64_t v414;
  unsigned int v415;
  llvm::APInt *v416;
  llvm::APInt *v417;
  llvm::APInt **v418;
  uint64_t **v419;
  const char *v420;
  __int16 v421;

  v8 = (_DWORD **)*(a3 - 8);
  v9 = *(_WORD *)(a2 + 18) & 0x3F;
  if ((*(_WORD *)(a2 + 18) & 0x3E) != 0x20)
  {
    v417 = 0;
    goto LABEL_10;
  }
  if ((*((_BYTE *)a3 + 17) & 2) != 0)
  {
    v10 = *((_DWORD *)this + 2);
    if (v10 <= 0x40)
    {
      if (*(_QWORD *)this)
        goto LABEL_5;
LABEL_28:
      v22 = (char *)operator new(0x80uLL);
      v16 = (uint64_t)(v22 + 64);
      *((_DWORD *)v22 + 21) = *((_DWORD *)v22 + 21) & 0x38000000 | 2;
      *(_QWORD *)v22 = 0;
      *((_QWORD *)v22 + 1) = 0;
      *((_QWORD *)v22 + 2) = 0;
      *((_QWORD *)v22 + 3) = v22 + 64;
      *((_QWORD *)v22 + 4) = 0;
      v23 = v22 + 32;
      *((_QWORD *)v22 + 5) = 0;
      *((_QWORD *)v22 + 6) = 0;
      *((_QWORD *)v22 + 7) = v22 + 64;
      v24 = *(_QWORD *)(a2 - 32);
      v421 = 257;
      sub_1C4774CC4(*v8);
      *((_QWORD *)v22 + 8) = v25;
      *((_QWORD *)v22 + 9) = 0;
      v26 = *((_DWORD *)v22 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v22 + 20) = 81;
      *((_DWORD *)v22 + 21) = v26;
      *(_OWORD *)(v22 + 88) = 0u;
      *(_OWORD *)(v22 + 104) = 0u;
      *((_DWORD *)v22 + 30) = 0;
      if (*(_QWORD *)v22)
      {
        **((_QWORD **)v22 + 2) = *((_QWORD *)v22 + 1);
        v333 = *((_QWORD *)v22 + 1);
        if (v333)
          *(_QWORD *)(v333 + 16) = *((_QWORD *)v22 + 2);
      }
      *(_QWORD *)v22 = v8;
      v29 = v8[1];
      v28 = v8 + 1;
      v27 = v29;
      *((_QWORD *)v22 + 1) = v29;
      if (v29)
        *((_QWORD *)v27 + 2) = v22 + 8;
      *((_QWORD *)v22 + 2) = v28;
      *v28 = v22;
      if (*((_QWORD *)v22 + 4))
      {
        **((_QWORD **)v22 + 6) = *((_QWORD *)v22 + 5);
        v334 = *((_QWORD *)v22 + 5);
        if (v334)
          *(_QWORD *)(v334 + 16) = *((_QWORD *)v22 + 6);
      }
      *v23 = v24;
      if (v24)
      {
        v32 = *(_QWORD *)(v24 + 8);
        v31 = (_QWORD *)(v24 + 8);
        v30 = v32;
        *((_QWORD *)v22 + 5) = v32;
        if (v32)
          *(_QWORD *)(v30 + 16) = v22 + 40;
        *((_QWORD *)v22 + 6) = v31;
        *v31 = v23;
      }
      *((_WORD *)v22 + 41) = v9;
      goto LABEL_188;
    }
    if (llvm::APInt::countLeadingZerosSlowCase(this) == v10)
      goto LABEL_28;
  }
LABEL_5:
  v417 = 0;
  v418 = &v417;
  v419 = 0;
  if (sub_1C4D89F84((uint64_t)&v418, (unsigned __int8 *)v8))
  {
    v12 = (_DWORD **)*(a3 - 4);
    v13 = (unsigned int *)v417;
    v14 = *((unsigned int *)v417 + 2);
    if (v14 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v417) == (_DWORD)v14)
        return 0;
    }
    else if (!*(_QWORD *)v417)
    {
      return 0;
    }
    v33 = *(_QWORD *)(a2 - 64);
    v34 = *(unsigned __int8 *)(v33 + 16);
    if (v34 != 55 && (v34 != 5 || *(_WORD *)(v33 + 18) != 27))
    {
      v36 = 0;
      goto LABEL_51;
    }
    if ((_DWORD)v14)
    {
      if (v14 > 0x40)
      {
        if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v13) == (_DWORD)v14)
          return 0;
        v35 = *(_QWORD *)v13;
      }
      else
      {
        v16 = 0;
        v35 = *(_QWORD *)v13;
        if (*(_QWORD *)v13 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v14)
          return (llvm::UndefValue **)v16;
      }
      v73 = v14 - 1;
      if (v14 >= 0x41)
        v74 = (unsigned int *)(v35 + 8 * (v73 >> 6));
      else
        v74 = v13;
      v75 = 1 << v73;
      v76 = (*(_QWORD *)v74 & (1 << v73)) != 0;
      v77 = *((_DWORD *)this + 2);
      v78 = v77 - 1;
      v79 = *(_QWORD *)this;
      if (v77 >= 0x41)
        v80 = (llvm::APInt *)(*(_QWORD *)this + 8 * (v78 >> 6));
      else
        v80 = this;
      v81 = (1 << v78) & *(_QWORD *)v80;
      if (((v76 ^ (v81 != 0)) & 1) != 0)
        return 0;
      if (v14 > 0x40)
      {
        v167 = *(_QWORD *)(v35 + 8 * ((v14 - 1) >> 6)) & v75;
        if ((v81 != 0) == (v167 != 0))
        {
          v169 = v79 - 8;
          v170 = ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8;
          v171 = v35 - 8;
          while (v170)
          {
            v172 = *(_QWORD *)(v171 + v170);
            v173 = *(_QWORD *)(v169 + v170);
            v170 -= 8;
            if (v172 != v173)
            {
              if (v172 <= v173)
                goto LABEL_103;
              return 0;
            }
          }
          goto LABEL_103;
        }
        if (v167)
        {
LABEL_103:
          v36 = 1;
LABEL_51:
          v37 = *((unsigned int *)this + 2);
          if (v37 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase(this) != (_DWORD)v37)
            {
              v38 = *(_QWORD *)this;
              v39 = *(_QWORD *)v13;
              if (!memcmp(*(const void **)this, *(const void **)v13, ((unint64_t)(v37 + 63) >> 3) & 0x3FFFFFF8))
                goto LABEL_54;
              goto LABEL_105;
            }
          }
          else
          {
            v38 = *(_QWORD *)this;
            if (*(_QWORD *)this)
            {
              v39 = *(_QWORD *)v13;
              if (v38 == *(_QWORD *)v13)
              {
LABEL_54:
                NullValue = llvm::Constant::getNullValue((llvm::Constant *)*v12, v11);
                goto LABEL_176;
              }
              if (!v36)
                goto LABEL_124;
LABEL_105:
              v82 = (llvm::APInt *)(v38 + 8 * ((v37 - 1) >> 6));
              if (v37 < 0x41)
                v82 = this;
              if (((*(_QWORD *)v82 >> (v37 - 1)) & 1) != 0)
              {
                if (v37 > 0x40)
                {
                  v83 = llvm::APInt::countLeadingOnesSlowCase(this);
                }
                else if ((_DWORD)v37)
                {
                  v83 = __clz(~(v38 << -(char)v37));
                }
                else
                {
                  v83 = 0;
                }
                if (v14 > 0x40)
                {
                  v100 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)v13);
                }
                else if ((_DWORD)v14)
                {
                  v100 = __clz(~(v39 << -(char)v14));
                }
                else
                {
                  v100 = 0;
                }
                v99 = v83 - v100;
                if (v99 <= 0)
                  goto LABEL_189;
              }
              else
              {
LABEL_124:
                if (v37 > 0x40)
                  v97 = llvm::APInt::countLeadingZerosSlowCase(this);
                else
                  v97 = v37 + __clz(v38) - 64;
                if (v14 > 0x40)
                  v98 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v13);
                else
                  v98 = v14 + __clz(v39) - 64;
                v99 = v97 - v98;
                if (v99 <= 0)
                  goto LABEL_189;
                if (!v36)
                  goto LABEL_162;
              }
              LODWORD(v419) = v14;
              if (v14 > 0x40)
              {
                v418 = (llvm::APInt **)operator new[]();
                memcpy(v418, *(const void **)v13, ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8);
                llvm::APInt::ashrSlowCase((unsigned int *)&v418, v99);
                LODWORD(v37) = *((_DWORD *)this + 2);
              }
              else
              {
                if ((_DWORD)v14 == v99)
                  v101 = 63;
                else
                  v101 = v99;
                v102 = (uint64_t)(v39 << -(char)v14) >> -(char)v14 >> v101;
                if ((_DWORD)v14)
                  v103 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v14;
                else
                  v103 = 0;
                v418 = (llvm::APInt **)(v103 & v102);
              }
              if (v37 > 0x40)
              {
                v106 = v37 + 63;
                v104 = (unint64_t *)v418;
                v105 = memcmp(*(const void **)this, v418, (v106 >> 3) & 0x3FFFFFF8) == 0;
              }
              else
              {
                v104 = (unint64_t *)v418;
                v105 = *(_QWORD *)this == (_QWORD)v418;
              }
              v107 = v105;
              if (v419 >= 0x41 && v104)
                MEMORY[0x1CAA32F9C](v104, 0x1000C8000313F17);
              if ((v107 & 1) != 0)
              {
                v108 = *((_DWORD *)this + 2);
                if (v108)
                {
                  if (v108 > 0x40)
                  {
                    if (llvm::APInt::countTrailingOnesSlowCase(this) != v108)
                      goto LABEL_175;
                  }
                  else if (*(_QWORD *)this != 0xFFFFFFFFFFFFFFFFLL >> -(char)v108)
                  {
                    goto LABEL_175;
                  }
                }
                v126 = v13[2];
                if (v126 > 0x40)
                {
                  v128 = 0;
                  v129 = (unint64_t)(v126 + 63) >> 6;
                  v130 = *(int8x8_t **)v13;
                  do
                  {
                    v131 = *v130++;
                    v132 = (uint8x8_t)vcnt_s8(v131);
                    v132.i16[0] = vaddlv_u8(v132);
                    v128 += v132.i32[0];
                    --v129;
                  }
                  while (v129);
                  if (v128 != 1)
                    goto LABEL_197;
                }
                else
                {
                  v127 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v13);
                  v127.i16[0] = vaddlv_u8(v127);
                  if (v127.u32[0] != 1)
                  {
LABEL_197:
                    v133 = llvm::ConstantInt::get((llvm::ConstantInt *)*v12, v99, 0);
                    v134 = *(_WORD *)(a2 + 18);
                    v86 = (char *)operator new(0x80uLL);
                    v16 = (uint64_t)(v86 + 64);
                    *((_DWORD *)v86 + 21) = *((_DWORD *)v86 + 21) & 0x38000000 | 2;
                    *(_QWORD *)v86 = 0;
                    *((_QWORD *)v86 + 1) = 0;
                    *((_QWORD *)v86 + 2) = 0;
                    *((_QWORD *)v86 + 3) = v86 + 64;
                    *((_QWORD *)v86 + 4) = 0;
                    v135 = (llvm::Value ***)(v86 + 32);
                    *((_QWORD *)v86 + 5) = 0;
                    *((_QWORD *)v86 + 6) = 0;
                    *((_QWORD *)v86 + 7) = v86 + 64;
                    v421 = 257;
                    sub_1C4774CC4(*v12);
                    *((_QWORD *)v86 + 8) = v136;
                    *((_QWORD *)v86 + 9) = 0;
                    v137 = *((_DWORD *)v86 + 21) & 0xC0000000 | 2;
                    *((_DWORD *)v86 + 20) = 81;
                    *((_DWORD *)v86 + 21) = v137;
                    *(_OWORD *)(v86 + 88) = 0u;
                    *(_OWORD *)(v86 + 104) = 0u;
                    *((_DWORD *)v86 + 30) = 0;
                    if (*(_QWORD *)v86)
                    {
                      **((_QWORD **)v86 + 2) = *((_QWORD *)v86 + 1);
                      v361 = *((_QWORD *)v86 + 1);
                      if (v361)
                        *(_QWORD *)(v361 + 16) = *((_QWORD *)v86 + 2);
                    }
                    *(_QWORD *)v86 = v12;
                    v140 = v12[1];
                    v139 = v12 + 1;
                    v138 = v140;
                    *((_QWORD *)v86 + 1) = v140;
                    if (v140)
                      *((_QWORD *)v138 + 2) = v86 + 8;
                    *((_QWORD *)v86 + 2) = v139;
                    *v139 = v86;
                    if (*((_QWORD *)v86 + 4))
                    {
                      **((_QWORD **)v86 + 6) = *((_QWORD *)v86 + 5);
                      v362 = *((_QWORD *)v86 + 5);
                      if (v362)
                        *(_QWORD *)(v362 + 16) = *((_QWORD *)v86 + 6);
                    }
                    *v135 = v133;
                    if (v133)
                    {
                      v143 = v133[1];
                      v142 = (llvm::Value ****)(v133 + 1);
                      v141 = v143;
                      *((_QWORD *)v86 + 5) = v143;
                      if (v143)
                        *((_QWORD *)v141 + 2) = v86 + 40;
                      *((_QWORD *)v86 + 6) = v142;
                      *v142 = v135;
                    }
                    v124 = (v134 & 0x3F) == 33;
                    v96 = 35;
                    goto LABEL_185;
                  }
                }
LABEL_175:
                NullValue = llvm::ConstantInt::get((llvm::ConstantInt *)*v12, v99, 0);
LABEL_176:
                v113 = NullValue;
                v114 = *(_WORD *)(a2 + 18);
                v86 = (char *)operator new(0x80uLL);
                v16 = (uint64_t)(v86 + 64);
                *((_DWORD *)v86 + 21) = *((_DWORD *)v86 + 21) & 0x38000000 | 2;
                *(_QWORD *)v86 = 0;
                *((_QWORD *)v86 + 1) = 0;
                *((_QWORD *)v86 + 2) = 0;
                *((_QWORD *)v86 + 3) = v86 + 64;
                *((_QWORD *)v86 + 4) = 0;
                v115 = (llvm::Value ***)(v86 + 32);
                *((_QWORD *)v86 + 5) = 0;
                *((_QWORD *)v86 + 6) = 0;
                *((_QWORD *)v86 + 7) = v86 + 64;
                v421 = 257;
                sub_1C4774CC4(*v12);
                *((_QWORD *)v86 + 8) = v116;
                *((_QWORD *)v86 + 9) = 0;
                v117 = *((_DWORD *)v86 + 21) & 0xC0000000 | 2;
                *((_DWORD *)v86 + 20) = 81;
                *((_DWORD *)v86 + 21) = v117;
                *(_OWORD *)(v86 + 88) = 0u;
                *(_OWORD *)(v86 + 104) = 0u;
                *((_DWORD *)v86 + 30) = 0;
                if (*(_QWORD *)v86)
                {
                  **((_QWORD **)v86 + 2) = *((_QWORD *)v86 + 1);
                  v339 = *((_QWORD *)v86 + 1);
                  if (v339)
                    *(_QWORD *)(v339 + 16) = *((_QWORD *)v86 + 2);
                }
                *(_QWORD *)v86 = v12;
                v120 = v12[1];
                v119 = v12 + 1;
                v118 = v120;
                *((_QWORD *)v86 + 1) = v120;
                if (v120)
                  *((_QWORD *)v118 + 2) = v86 + 8;
                *((_QWORD *)v86 + 2) = v119;
                *v119 = v86;
                if (*((_QWORD *)v86 + 4))
                {
                  **((_QWORD **)v86 + 6) = *((_QWORD *)v86 + 5);
                  v340 = *((_QWORD *)v86 + 5);
                  if (v340)
                    *(_QWORD *)(v340 + 16) = *((_QWORD *)v86 + 6);
                }
                *v115 = v113;
                if (v113)
                {
                  v123 = v113[1];
                  v122 = (llvm::Value ****)(v113 + 1);
                  v121 = v123;
                  *((_QWORD *)v86 + 5) = v123;
                  if (v123)
                    *((_QWORD *)v121 + 2) = v86 + 40;
                  *((_QWORD *)v86 + 6) = v122;
                  *v122 = v115;
                }
                v124 = (v114 & 0x3F) == 33;
                v96 = 32;
LABEL_185:
                if (v124)
                  ++v96;
LABEL_187:
                *((_WORD *)v86 + 41) = v96;
LABEL_188:
                llvm::Value::setName((uint64_t ***)v16, (uint64_t)&v418);
                return (llvm::UndefValue **)v16;
              }
              LODWORD(v14) = v13[2];
LABEL_162:
              if (v14 > 0x40)
              {
                v168 = v14 + 63;
                v109 = operator new[]();
                memcpy((void *)v109, *(const void **)v13, (v168 >> 3) & 0x3FFFFFF8);
                llvm::APInt::tcShiftRight((llvm::APInt *)v109, (unint64_t *)(v168 >> 6), v99);
              }
              else if ((_DWORD)v14 == v99)
              {
                v109 = 0;
              }
              else
              {
                v109 = *(_QWORD *)v13 >> v99;
              }
              v110 = *((unsigned int *)this + 2);
              if (v110 > 0x40)
                v111 = memcmp(*(const void **)this, (const void *)v109, ((unint64_t)(v110 + 63) >> 3) & 0x3FFFFFF8) == 0;
              else
                v111 = *(_QWORD *)this == v109;
              v112 = v111;
              if (v14 >= 0x41 && v109)
                MEMORY[0x1CAA32F9C](v109, 0x1000C8000313F17);
              if (v112)
                goto LABEL_175;
LABEL_189:
              v125 = llvm::ConstantInt::get(*(llvm::ConstantInt **)a2, (*(_WORD *)(a2 + 18) & 0x3F) == 33, 0);
              return sub_1C577F888(a1, (llvm::ValueAsMetadata *)a2, (llvm::Value *)v125);
            }
          }
          v58 = (llvm::ConstantInt *)*v12;
          if (v14 > 0x40)
            v59 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v13);
          else
            v59 = v14 + __clz(*(_QWORD *)v13) - 64;
          v84 = llvm::ConstantInt::get(v58, (v14 + ~v59), 0);
          v85 = *(_WORD *)(a2 + 18);
          v86 = (char *)operator new(0x80uLL);
          v16 = (uint64_t)(v86 + 64);
          *((_DWORD *)v86 + 21) = *((_DWORD *)v86 + 21) & 0x38000000 | 2;
          *(_QWORD *)v86 = 0;
          *((_QWORD *)v86 + 1) = 0;
          *((_QWORD *)v86 + 2) = 0;
          *((_QWORD *)v86 + 3) = v86 + 64;
          *((_QWORD *)v86 + 4) = 0;
          v87 = (llvm::Value ***)(v86 + 32);
          *((_QWORD *)v86 + 5) = 0;
          *((_QWORD *)v86 + 6) = 0;
          *((_QWORD *)v86 + 7) = v86 + 64;
          v421 = 257;
          sub_1C4774CC4(*v12);
          *((_QWORD *)v86 + 8) = v88;
          *((_QWORD *)v86 + 9) = 0;
          v89 = *((_DWORD *)v86 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v86 + 20) = 81;
          *((_DWORD *)v86 + 21) = v89;
          *(_OWORD *)(v86 + 88) = 0u;
          *(_OWORD *)(v86 + 104) = 0u;
          *((_DWORD *)v86 + 30) = 0;
          if (*(_QWORD *)v86)
          {
            **((_QWORD **)v86 + 2) = *((_QWORD *)v86 + 1);
            v337 = *((_QWORD *)v86 + 1);
            if (v337)
              *(_QWORD *)(v337 + 16) = *((_QWORD *)v86 + 2);
          }
          *(_QWORD *)v86 = v12;
          v92 = v12[1];
          v91 = v12 + 1;
          v90 = v92;
          *((_QWORD *)v86 + 1) = v92;
          if (v92)
            *((_QWORD *)v90 + 2) = v86 + 8;
          *((_QWORD *)v86 + 2) = v91;
          *v91 = v86;
          if (*((_QWORD *)v86 + 4))
          {
            **((_QWORD **)v86 + 6) = *((_QWORD *)v86 + 5);
            v338 = *((_QWORD *)v86 + 5);
            if (v338)
              *(_QWORD *)(v338 + 16) = *((_QWORD *)v86 + 6);
          }
          *v87 = v84;
          if (v84)
          {
            v95 = v84[1];
            v94 = (llvm::Value ****)(v84 + 1);
            v93 = v95;
            *((_QWORD *)v86 + 5) = v95;
            if (v95)
              *((_QWORD *)v93 + 2) = v86 + 40;
            *((_QWORD *)v86 + 6) = v94;
            *v94 = v87;
          }
          if ((v85 & 0x3F) == 0x21)
            v96 = 37;
          else
            v96 = 34;
          goto LABEL_187;
        }
      }
      else if ((uint64_t)(v35 << -(char)v14) >> -(char)v14 <= v79 << -(char)v14 >> -(char)v14)
      {
        goto LABEL_103;
      }
    }
    return 0;
  }
LABEL_10:
  v416 = 0;
  v15 = (unsigned __int8 *)*(a3 - 4);
  v418 = &v416;
  v419 = 0;
  v16 = 0;
  if (!sub_1C4D89F84((uint64_t)&v418, v15))
    return (llvm::UndefValue **)v16;
  v17 = *((unsigned int *)this + 2);
  v16 = (uint64_t)v416;
  v18 = *((_DWORD *)v416 + 2);
  if (v18 >= 0x41)
  {
    v20 = *((_DWORD *)this + 2);
    if (v18 - llvm::APInt::countLeadingZerosSlowCase(v416) > 0x40)
      goto LABEL_17;
    v19 = **(_QWORD **)v16;
  }
  else
  {
    v19 = *(_QWORD *)v416;
  }
  v20 = v17;
  if (v19 <= v17)
    v20 = v19;
LABEL_17:
  if (v20 >= v17 || v20 == 0)
    return 0;
  v372 = v20 - v17;
  v378 = (llvm::ConstantInt **)*a3;
  v379 = v9;
  if (*((_BYTE *)a3 + 16) != 55)
  {
    if (v9 != 36 && (v9 != 34 || (*((_BYTE *)a3 + 17) & 2) == 0))
    {
LABEL_212:
      if (v9 == 34)
      {
        v391 = *((_DWORD *)this + 2);
        if (v391 > 0x40)
        {
          v390 = (void *)operator new[]();
          memcpy(v390, *(const void **)this, (((unint64_t)v391 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v390 = *(void **)this;
        }
        llvm::APInt::operator+=((uint64_t)&v390, 1uLL);
        v147 = v391;
        v148 = v390;
        v391 = 0;
        v393 = v147;
        if (v147 > 0x40)
        {
          v392 = (void *)operator new[]();
          memcpy(v392, v148, (((unint64_t)v393 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v392 = v390;
        }
        sub_1C4888094((uint64_t)&v392, v20);
        llvm::APInt::operator-=((uint64_t)&v392, 1uLL);
        v415 = v393;
        v414 = (unint64_t)v392;
        v393 = 0;
        if (v147 >= 0x41 && v148)
          MEMORY[0x1CAA32F9C](v148, 0x1000C8000313F17);
        if (v391 >= 0x41 && v390)
          MEMORY[0x1CAA32F9C](v390, 0x1000C8000313F17);
        v389 = v415;
        v375 = a1;
        if (v415 > 0x40)
        {
          v388 = operator new[]();
          memcpy((void *)v388, (const void *)v414, (((unint64_t)v389 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v388 = v414;
        }
        llvm::APInt::operator+=((uint64_t)&v388, 1uLL);
        v149 = v389;
        v389 = 0;
        __src = (void *)v388;
        if (v149 > 0x40)
        {
          v166 = (void *)operator new[]();
          memcpy(v166, __src, ((unint64_t)(v149 + 63) >> 3) & 0x3FFFFFF8);
          __s1 = (unint64_t)v166;
          llvm::APInt::tcShiftRight((llvm::APInt *)v166, (unint64_t *)((unint64_t)(v149 + 63) >> 6), v20);
        }
        else if ((_DWORD)v149 == v20)
        {
          __s1 = 0;
        }
        else
        {
          __s1 = v388 >> v20;
        }
        v387 = *((_DWORD *)this + 2);
        if (v387 > 0x40)
        {
          __s2 = (void *)operator new[]();
          memcpy(__s2, *(const void **)this, (((unint64_t)v387 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          __s2 = *(void **)this;
        }
        llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
        v150 = v387;
        v151 = __s2;
        v387 = 0;
        if (v149 > 0x40)
          v152 = memcmp((const void *)__s1, __s2, ((unint64_t)(v149 + 63) >> 3) & 0x3FFFFFF8) == 0;
        else
          v152 = __s1 == (_QWORD)__s2;
        v153 = v152;
        v369 = v153;
        if (v150 >= 0x41)
        {
          if (v151)
          {
            MEMORY[0x1CAA32F9C](v151, 0x1000C8000313F17);
            if (v387 >= 0x41)
            {
              if (__s2)
                MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
            }
          }
        }
        v154 = v149 >= 0x41;
        a1 = v375;
        v9 = v379;
        if (v154)
        {
          if (__s1)
            MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
          if (__src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        }
        if (v389 >= 0x41 && v388)
          MEMORY[0x1CAA32F9C](v388, 0x1000C8000313F17);
        if (v369)
        {
          v155 = (char *)operator new(0x80uLL);
          v16 = (uint64_t)(v155 + 64);
          *((_DWORD *)v155 + 21) = *((_DWORD *)v155 + 21) & 0x38000000 | 2;
          *(_QWORD *)v155 = 0;
          *((_QWORD *)v155 + 1) = 0;
          *((_QWORD *)v155 + 2) = 0;
          *((_QWORD *)v155 + 3) = v155 + 64;
          *((_QWORD *)v155 + 4) = 0;
          v156 = (llvm::Value ***)(v155 + 32);
          *((_QWORD *)v155 + 5) = 0;
          *((_QWORD *)v155 + 6) = 0;
          *((_QWORD *)v155 + 7) = v155 + 64;
          v158 = llvm::ConstantInt::get(v378, (llvm::Type *)&v414, v157);
          v421 = 257;
          sub_1C4774CC4(*v8);
          *((_QWORD *)v155 + 8) = v159;
          *((_QWORD *)v155 + 9) = 0;
          v160 = *((_DWORD *)v155 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v155 + 20) = 81;
          *((_DWORD *)v155 + 21) = v160;
          *(_OWORD *)(v155 + 88) = 0u;
          *(_OWORD *)(v155 + 104) = 0u;
          *((_DWORD *)v155 + 30) = 0;
          if (*(_QWORD *)v155)
          {
            **((_QWORD **)v155 + 2) = *((_QWORD *)v155 + 1);
            v345 = *((_QWORD *)v155 + 1);
            if (v345)
              *(_QWORD *)(v345 + 16) = *((_QWORD *)v155 + 2);
          }
          *(_QWORD *)v155 = v8;
          v161 = v8 + 1;
          v162 = v8[1];
          *((_QWORD *)v155 + 1) = v162;
          if (v162)
            *((_QWORD *)v162 + 2) = v155 + 8;
          *((_QWORD *)v155 + 2) = v161;
          *v161 = v155;
          if (*((_QWORD *)v155 + 4))
          {
            **((_QWORD **)v155 + 6) = *((_QWORD *)v155 + 5);
            v346 = *((_QWORD *)v155 + 5);
            if (v346)
              *(_QWORD *)(v346 + 16) = *((_QWORD *)v155 + 6);
          }
          *v156 = v158;
          if (v158)
          {
            v165 = v158[1];
            v164 = (llvm::Value ****)(v158 + 1);
            v163 = v165;
            *((_QWORD *)v155 + 5) = v165;
            if (v165)
              *((_QWORD *)v163 + 2) = v155 + 40;
            *((_QWORD *)v155 + 6) = v164;
            *v164 = v156;
          }
          *((_WORD *)v155 + 41) = 34;
          llvm::Value::setName((uint64_t ***)v16, (uint64_t)&v418);
          a1 = v375;
          v9 = v379;
        }
        if (v415 >= 0x41 && v414)
          MEMORY[0x1CAA32F9C](v414, 0x1000C8000313F17);
        if ((v369 & 1) != 0)
          return (llvm::UndefValue **)v16;
      }
      goto LABEL_439;
    }
    v415 = v17;
    if (v17 > 0x40)
    {
      v414 = operator new[]();
      memcpy((void *)v414, *(const void **)this, (((unint64_t)v415 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v414 = *(_QWORD *)this;
    }
    sub_1C4888094((uint64_t)&v414, v20);
    if (v415 > 0x40)
    {
      v144 = v415 + 63;
      v145 = (v144 >> 3) & 0x3FFFFFF8;
      v146 = (void *)operator new[]();
      memcpy(v146, (const void *)v414, v145);
      llvm::APInt::tcShiftRight((llvm::APInt *)v146, (unint64_t *)(v144 >> 6), v20);
      v16 = memcmp(v146, *(const void **)this, v145);
      MEMORY[0x1CAA32F9C](v146, 0x1000C8000313F17);
      if (!(_DWORD)v16)
      {
LABEL_83:
        v374 = a1;
        v61 = (char *)operator new(0x80uLL);
        v16 = (uint64_t)(v61 + 64);
        *((_DWORD *)v61 + 21) = *((_DWORD *)v61 + 21) & 0x38000000 | 2;
        *(_QWORD *)v61 = 0;
        *((_QWORD *)v61 + 1) = 0;
        *((_QWORD *)v61 + 2) = 0;
        *((_QWORD *)v61 + 3) = v61 + 64;
        *((_QWORD *)v61 + 4) = 0;
        v62 = (llvm::Value ***)(v61 + 32);
        *((_QWORD *)v61 + 5) = 0;
        *((_QWORD *)v61 + 6) = 0;
        *((_QWORD *)v61 + 7) = v61 + 64;
        v64 = llvm::ConstantInt::get(v378, (llvm::Type *)&v414, v63);
        v421 = 257;
        sub_1C4774CC4(*v8);
        *((_QWORD *)v61 + 8) = v65;
        *((_QWORD *)v61 + 9) = 0;
        v66 = *((_DWORD *)v61 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v61 + 20) = 81;
        *((_DWORD *)v61 + 21) = v66;
        *(_OWORD *)(v61 + 88) = 0u;
        *(_OWORD *)(v61 + 104) = 0u;
        *((_DWORD *)v61 + 30) = 0;
        if (*(_QWORD *)v61)
        {
          **((_QWORD **)v61 + 2) = *((_QWORD *)v61 + 1);
          v341 = *((_QWORD *)v61 + 1);
          if (v341)
            *(_QWORD *)(v341 + 16) = *((_QWORD *)v61 + 2);
        }
        *(_QWORD *)v61 = v8;
        v67 = v8 + 1;
        v68 = v8[1];
        *((_QWORD *)v61 + 1) = v68;
        if (v68)
          *((_QWORD *)v68 + 2) = v61 + 8;
        *((_QWORD *)v61 + 2) = v67;
        *v67 = v61;
        if (*((_QWORD *)v61 + 4))
        {
          **((_QWORD **)v61 + 6) = *((_QWORD *)v61 + 5);
          v342 = *((_QWORD *)v61 + 5);
          if (v342)
            *(_QWORD *)(v342 + 16) = *((_QWORD *)v61 + 6);
        }
        *v62 = v64;
        if (v64)
        {
          v71 = v64[1];
          v70 = (llvm::Value ****)(v64 + 1);
          v69 = v71;
          *((_QWORD *)v61 + 5) = v71;
          if (v71)
            *((_QWORD *)v69 + 2) = v61 + 40;
          *((_QWORD *)v61 + 6) = v70;
          *v70 = v62;
        }
        *((_WORD *)v61 + 41) = v379;
        v9 = v379;
        llvm::Value::setName((uint64_t ***)v16, (uint64_t)&v418);
        v72 = 1;
        a1 = v374;
LABEL_208:
        if (v415 >= 0x41 && v414)
          MEMORY[0x1CAA32F9C](v414, 0x1000C8000313F17);
        if ((v72 & 1) != 0)
          return (llvm::UndefValue **)v16;
        goto LABEL_212;
      }
    }
    else
    {
      if (v415 == v20)
        v60 = 0;
      else
        v60 = v414 >> v20;
      if (v60 == *(_QWORD *)this)
        goto LABEL_83;
    }
    v72 = 0;
    v9 = v379;
    goto LABEL_208;
  }
  if ((*((_BYTE *)a3 + 17) & 2) == 0 && v9 != 40 && v9 != 36)
    goto LABEL_293;
  v415 = v17;
  if (v17 > 0x40)
  {
    v414 = operator new[]();
    memcpy((void *)v414, *(const void **)this, (((unint64_t)v415 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v414 = *(_QWORD *)this;
  }
  sub_1C4888094((uint64_t)&v414, v20);
  v41 = v415;
  LODWORD(v419) = v415;
  if (v415 <= 0x40)
  {
    v16 = v414;
LABEL_59:
    v42 = v20;
    if (v41 == v20)
      v42 = 63;
    v43 = v16 << -(char)v41 >> -(char)v41 >> v42;
    v44 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v41;
    if (!v41)
      v44 = 0;
    v45 = (unint64_t *)(v44 & v43);
    goto LABEL_64;
  }
  v16 = operator new[]();
  v418 = (llvm::APInt **)v16;
  v41 = v419;
  memcpy((void *)v16, (const void *)v414, (((unint64_t)v419 + 63) >> 3) & 0x3FFFFFF8);
  if (v41 <= 0x40)
    goto LABEL_59;
  llvm::APInt::ashrSlowCase((unsigned int *)&v418, v20);
  if (v419 > 0x40)
  {
    v16 = (uint64_t)v418;
    v174 = memcmp(v418, *(const void **)this, (((unint64_t)v419 + 63) >> 3) & 0x3FFFFFF8);
    if (v16)
      MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
    if (!v174)
      goto LABEL_65;
LABEL_288:
    v57 = 0;
    goto LABEL_289;
  }
  v45 = (unint64_t *)v418;
LABEL_64:
  if (v45 != *(unint64_t **)this)
    goto LABEL_288;
LABEL_65:
  v373 = a1;
  v46 = (char *)operator new(0x80uLL);
  v16 = (uint64_t)(v46 + 64);
  *((_DWORD *)v46 + 21) = *((_DWORD *)v46 + 21) & 0x38000000 | 2;
  *(_QWORD *)v46 = 0;
  *((_QWORD *)v46 + 1) = 0;
  *((_QWORD *)v46 + 2) = 0;
  *((_QWORD *)v46 + 3) = v46 + 64;
  *((_QWORD *)v46 + 4) = 0;
  v47 = (llvm::Value ***)(v46 + 32);
  *((_QWORD *)v46 + 5) = 0;
  *((_QWORD *)v46 + 6) = 0;
  *((_QWORD *)v46 + 7) = v46 + 64;
  v49 = llvm::ConstantInt::get(v378, (llvm::Type *)&v414, v48);
  v421 = 257;
  sub_1C4774CC4(*v8);
  *((_QWORD *)v46 + 8) = v50;
  *((_QWORD *)v46 + 9) = 0;
  v51 = *((_DWORD *)v46 + 21) & 0xC0000000 | 2;
  *((_DWORD *)v46 + 20) = 81;
  *((_DWORD *)v46 + 21) = v51;
  *(_OWORD *)(v46 + 88) = 0u;
  *(_OWORD *)(v46 + 104) = 0u;
  *((_DWORD *)v46 + 30) = 0;
  if (*(_QWORD *)v46)
  {
    **((_QWORD **)v46 + 2) = *((_QWORD *)v46 + 1);
    v335 = *((_QWORD *)v46 + 1);
    if (v335)
      *(_QWORD *)(v335 + 16) = *((_QWORD *)v46 + 2);
  }
  *(_QWORD *)v46 = v8;
  v52 = v8 + 1;
  v53 = v8[1];
  *((_QWORD *)v46 + 1) = v53;
  if (v53)
    *((_QWORD *)v53 + 2) = v46 + 8;
  *((_QWORD *)v46 + 2) = v52;
  *v52 = v46;
  if (*((_QWORD *)v46 + 4))
  {
    **((_QWORD **)v46 + 6) = *((_QWORD *)v46 + 5);
    v336 = *((_QWORD *)v46 + 5);
    if (v336)
      *(_QWORD *)(v336 + 16) = *((_QWORD *)v46 + 6);
  }
  *v47 = v49;
  if (v49)
  {
    v56 = v49[1];
    v55 = (llvm::Value ****)(v49 + 1);
    v54 = v56;
    *((_QWORD *)v46 + 5) = v56;
    if (v56)
      *((_QWORD *)v54 + 2) = v46 + 40;
    *((_QWORD *)v46 + 6) = v55;
    *v55 = v47;
  }
  *((_WORD *)v46 + 41) = v379;
  v9 = v379;
  llvm::Value::setName((uint64_t ***)v16, (uint64_t)&v418);
  v57 = 1;
  a1 = v373;
LABEL_289:
  if (v415 >= 0x41 && v414)
    MEMORY[0x1CAA32F9C](v414, 0x1000C8000313F17);
  if ((v57 & 1) != 0)
    return (llvm::UndefValue **)v16;
LABEL_293:
  if (v9 != 34)
  {
    if (v9 != 38)
    {
LABEL_436:
      v204 = 0;
      goto LABEL_437;
    }
    v411 = *((_DWORD *)this + 2);
    if (v411 > 0x40)
    {
      v410 = (void *)operator new[]();
      memcpy(v410, *(const void **)this, (((unint64_t)v411 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v410 = *(void **)this;
    }
    llvm::APInt::operator+=((uint64_t)&v410, 1uLL);
    v175 = v411;
    v176 = v410;
    v411 = 0;
    v413 = v175;
    if (v175 > 0x40)
    {
      v412 = (void *)operator new[]();
      memcpy(v412, v176, (((unint64_t)v413 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v412 = v410;
    }
    sub_1C4888094((uint64_t)&v412, v20);
    llvm::APInt::operator-=((uint64_t)&v412, 1uLL);
    v415 = v413;
    v414 = (unint64_t)v412;
    v413 = 0;
    if (v175 >= 0x41 && v176)
      MEMORY[0x1CAA32F9C](v176, 0x1000C8000313F17);
    if (v411 >= 0x41 && v410)
      MEMORY[0x1CAA32F9C](v410, 0x1000C8000313F17);
    v177 = *((_DWORD *)this + 2);
    v9 = v379;
    if (v177 > 0x40)
    {
      if (((*(_QWORD *)(*(_QWORD *)this + 8 * ((v177 - 1) >> 6)) >> (v177 - 1)) & 1) == 0
        && llvm::APInt::countTrailingOnesSlowCase(this) == v177 - 1)
      {
        v179 = 0;
LABEL_430:
        v9 = v379;
        goto LABEL_432;
      }
      v409 = v177;
      v408 = (void *)operator new[]();
      memcpy(v408, *(const void **)this, (((unint64_t)v177 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v178 = *(void **)this;
      if (*(_QWORD *)this == ~(-1 << (v177 - 1)))
      {
        v179 = 0;
LABEL_432:
        if (v415 >= 0x41 && v414)
          MEMORY[0x1CAA32F9C](v414, 0x1000C8000313F17);
        if ((v179 & 1) != 0)
          return (llvm::UndefValue **)v16;
        goto LABEL_436;
      }
      v409 = *((_DWORD *)this + 2);
      v408 = v178;
    }
    llvm::APInt::operator+=((uint64_t)&v408, 1uLL);
    v205 = v409;
    v206 = v408;
    v409 = 0;
    LODWORD(v419) = v205;
    __s1b = v205;
    if (v205 > 0x40)
    {
      v418 = (llvm::APInt **)operator new[]();
      memcpy(v418, v206, (((unint64_t)v419 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v418 = (llvm::APInt **)v408;
    }
    sub_1C4888094((uint64_t)&v418, v20);
    v377 = a1;
    v371 = (void *)v206;
    if (v419 > 0x40)
    {
      v209 = (unint64_t *)v418;
      if ((((unint64_t)v418[(v419 - 1) >> 6] >> (v419 - 1)) & 1) != 0)
      {
        v208 = v419 - 1;
        if (llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v418) == v208)
        {
          v207 = 0;
          v9 = v379;
LABEL_413:
          MEMORY[0x1CAA32F9C](v209, 0x1000C8000313F17);
LABEL_414:
          if (__s1b >= 0x41 && v371)
            MEMORY[0x1CAA32F9C](v371, 0x1000C8000313F17);
          if (v409 >= 0x41 && v408)
            MEMORY[0x1CAA32F9C](v408, 0x1000C8000313F17);
          if (!v207)
          {
            v179 = 0;
            a1 = v377;
            goto LABEL_432;
          }
          v219 = (char *)operator new(0x80uLL);
          v16 = (uint64_t)(v219 + 64);
          *((_DWORD *)v219 + 21) = *((_DWORD *)v219 + 21) & 0x38000000 | 2;
          *(_QWORD *)v219 = 0;
          *((_QWORD *)v219 + 1) = 0;
          *((_QWORD *)v219 + 2) = 0;
          *((_QWORD *)v219 + 3) = v219 + 64;
          *((_QWORD *)v219 + 4) = 0;
          v220 = (llvm::Value ***)(v219 + 32);
          *((_QWORD *)v219 + 5) = 0;
          *((_QWORD *)v219 + 6) = 0;
          *((_QWORD *)v219 + 7) = v219 + 64;
          v222 = llvm::ConstantInt::get(v378, (llvm::Type *)&v414, v221);
          v421 = 257;
          sub_1C4774CC4(*v8);
          *((_QWORD *)v219 + 8) = v223;
          *((_QWORD *)v219 + 9) = 0;
          v224 = *((_DWORD *)v219 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v219 + 20) = 81;
          *((_DWORD *)v219 + 21) = v224;
          *(_OWORD *)(v219 + 88) = 0u;
          *(_OWORD *)(v219 + 104) = 0u;
          *((_DWORD *)v219 + 30) = 0;
          if (*(_QWORD *)v219)
          {
            **((_QWORD **)v219 + 2) = *((_QWORD *)v219 + 1);
            v349 = *((_QWORD *)v219 + 1);
            if (v349)
              *(_QWORD *)(v349 + 16) = *((_QWORD *)v219 + 2);
          }
          *(_QWORD *)v219 = v8;
          v225 = v8 + 1;
          v226 = v8[1];
          *((_QWORD *)v219 + 1) = v226;
          if (v226)
            *((_QWORD *)v226 + 2) = v219 + 8;
          *((_QWORD *)v219 + 2) = v225;
          *v225 = v219;
          if (*((_QWORD *)v219 + 4))
          {
            **((_QWORD **)v219 + 6) = *((_QWORD *)v219 + 5);
            v350 = *((_QWORD *)v219 + 5);
            if (v350)
              *(_QWORD *)(v350 + 16) = *((_QWORD *)v219 + 6);
          }
          *v220 = v222;
          if (v222)
          {
            v229 = v222[1];
            v228 = (llvm::Value ****)(v222 + 1);
            v227 = v229;
            *((_QWORD *)v219 + 5) = v229;
            if (v229)
              *((_QWORD *)v227 + 2) = v219 + 40;
            *((_QWORD *)v219 + 6) = v228;
            *v228 = v220;
          }
          *((_WORD *)v219 + 41) = 38;
          llvm::Value::setName((uint64_t ***)v16, (uint64_t)&v418);
          v179 = 1;
          a1 = v377;
          goto LABEL_430;
        }
      }
    }
    else if (v418 == (llvm::APInt **)(1 << (v419 - 1)))
    {
      v207 = 0;
      v9 = v379;
      goto LABEL_414;
    }
    v405 = v415;
    if (v415 > 0x40)
    {
      v404 = (void *)operator new[]();
      memcpy(v404, (const void *)v414, (((unint64_t)v405 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v404 = (void *)v414;
    }
    llvm::APInt::operator+=((uint64_t)&v404, 1uLL);
    v210 = v405;
    v211 = (uint64_t)v404;
    v405 = 0;
    v407 = v210;
    v363 = v210;
    __srca = v404;
    v212 = v210;
    if (v210 >= 0x41
      && (v211 = operator new[](),
          v406 = (void *)v211,
          v212 = v407,
          memcpy((void *)v211, __srca, (((unint64_t)v407 + 63) >> 3) & 0x3FFFFFF8),
          v212 > 0x40))
    {
      llvm::APInt::ashrSlowCase((unsigned int *)&v406, v20);
    }
    else
    {
      v213 = v20;
      if (v212 == v20)
        v213 = 63;
      v214 = v211 << -(char)v212 >> -(char)v212 >> v213;
      if (v212)
        v215 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v212;
      else
        v215 = 0;
      v406 = (void *)(v215 & v214);
    }
    v403 = *((_DWORD *)this + 2);
    if (v403 > 0x40)
    {
      v402 = (void *)operator new[]();
      memcpy(v402, *(const void **)this, (((unint64_t)v403 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v402 = *(void **)this;
    }
    llvm::APInt::operator+=((uint64_t)&v402, 1uLL);
    v216 = v403;
    v217 = v402;
    v403 = 0;
    if (v407 > 0x40)
      v218 = memcmp(v406, v402, (((unint64_t)v407 + 63) >> 3) & 0x3FFFFFF8) == 0;
    else
      v218 = v406 == v402;
    v207 = v218;
    if (v216 >= 0x41)
    {
      if (v217)
      {
        MEMORY[0x1CAA32F9C](v217, 0x1000C8000313F17);
        if (v403 >= 0x41)
        {
          if (v402)
            MEMORY[0x1CAA32F9C](v402, 0x1000C8000313F17);
        }
      }
    }
    if (v407 >= 0x41 && v406)
      MEMORY[0x1CAA32F9C](v406, 0x1000C8000313F17);
    v9 = v379;
    if (v363 >= 0x41 && __srca)
      MEMORY[0x1CAA32F9C](__srca, 0x1000C8000313F17);
    if (v405 >= 0x41 && v404)
      MEMORY[0x1CAA32F9C](v404, 0x1000C8000313F17);
    if (v419 < 0x41)
      goto LABEL_414;
    v209 = (unint64_t *)v418;
    if (!v418)
      goto LABEL_414;
    goto LABEL_413;
  }
  v399 = *((_DWORD *)this + 2);
  if (v399 > 0x40)
  {
    v398 = (void *)operator new[]();
    memcpy(v398, *(const void **)this, (((unint64_t)v399 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v398 = *(void **)this;
  }
  llvm::APInt::operator+=((uint64_t)&v398, 1uLL);
  v180 = v399;
  v181 = v398;
  v399 = 0;
  v401 = v180;
  if (v180 > 0x40)
  {
    v400 = (void *)operator new[]();
    memcpy(v400, v181, (((unint64_t)v401 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v400 = v398;
  }
  sub_1C4888094((uint64_t)&v400, v20);
  llvm::APInt::operator-=((uint64_t)&v400, 1uLL);
  v415 = v401;
  v414 = (unint64_t)v400;
  v401 = 0;
  if (v180 >= 0x41 && v181)
    MEMORY[0x1CAA32F9C](v181, 0x1000C8000313F17);
  if (v399 >= 0x41 && v398)
    MEMORY[0x1CAA32F9C](v398, 0x1000C8000313F17);
  v397 = v415;
  v376 = a1;
  if (v415 > 0x40)
  {
    v396 = (void *)operator new[]();
    memcpy(v396, (const void *)v414, (((unint64_t)v397 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v396 = (void *)v414;
  }
  llvm::APInt::operator+=((uint64_t)&v396, 1uLL);
  v182 = v397;
  v183 = (uint64_t)v396;
  v397 = 0;
  LODWORD(v419) = v182;
  v370 = v396;
  v184 = v182;
  if (v182 >= 0x41
    && (v183 = operator new[](),
        v418 = (llvm::APInt **)v183,
        v184 = v419,
        memcpy((void *)v183, v370, (((unint64_t)v419 + 63) >> 3) & 0x3FFFFFF8),
        v184 > 0x40))
  {
    llvm::APInt::ashrSlowCase((unsigned int *)&v418, v20);
  }
  else
  {
    v185 = v20;
    if (v184 == v20)
      v185 = 63;
    v186 = v183 << -(char)v184 >> -(char)v184 >> v185;
    if (v184)
      v187 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v184;
    else
      v187 = 0;
    v418 = (llvm::APInt **)(v187 & v186);
  }
  v395 = *((_DWORD *)this + 2);
  if (v395 > 0x40)
  {
    v394 = (void *)operator new[]();
    memcpy(v394, *(const void **)this, (((unint64_t)v395 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v394 = *(void **)this;
  }
  llvm::APInt::operator+=((uint64_t)&v394, 1uLL);
  v188 = v395;
  v189 = v394;
  v395 = 0;
  if (v419 > 0x40)
    v190 = memcmp(v418, v394, (((unint64_t)v419 + 63) >> 3) & 0x3FFFFFF8) == 0;
  else
    v190 = v418 == v394;
  v191 = v190;
  __s1a = v191;
  if (v188 >= 0x41)
  {
    if (v189)
    {
      MEMORY[0x1CAA32F9C](v189, 0x1000C8000313F17);
      if (v395 >= 0x41)
      {
        if (v394)
          MEMORY[0x1CAA32F9C](v394, 0x1000C8000313F17);
      }
    }
  }
  v192 = __s1a;
  if (v419 >= 0x41 && v418)
    MEMORY[0x1CAA32F9C](v418, 0x1000C8000313F17);
  v9 = v379;
  if (v182 >= 0x41 && v370)
    MEMORY[0x1CAA32F9C](v370, 0x1000C8000313F17);
  a1 = v376;
  if (v397 >= 0x41 && v396)
    MEMORY[0x1CAA32F9C](v396, 0x1000C8000313F17);
  if (__s1a)
  {
    v193 = (char *)operator new(0x80uLL);
    v16 = (uint64_t)(v193 + 64);
    *((_DWORD *)v193 + 21) = *((_DWORD *)v193 + 21) & 0x38000000 | 2;
    *(_QWORD *)v193 = 0;
    *((_QWORD *)v193 + 1) = 0;
    *((_QWORD *)v193 + 2) = 0;
    *((_QWORD *)v193 + 3) = v193 + 64;
    *((_QWORD *)v193 + 4) = 0;
    v194 = (llvm::Value ***)(v193 + 32);
    *((_QWORD *)v193 + 5) = 0;
    *((_QWORD *)v193 + 6) = 0;
    *((_QWORD *)v193 + 7) = v193 + 64;
    v196 = llvm::ConstantInt::get(v378, (llvm::Type *)&v414, v195);
    v421 = 257;
    sub_1C4774CC4(*v8);
    *((_QWORD *)v193 + 8) = v197;
    *((_QWORD *)v193 + 9) = 0;
    v198 = *((_DWORD *)v193 + 21) & 0xC0000000 | 2;
    *((_DWORD *)v193 + 20) = 81;
    *((_DWORD *)v193 + 21) = v198;
    *(_OWORD *)(v193 + 88) = 0u;
    *(_OWORD *)(v193 + 104) = 0u;
    *((_DWORD *)v193 + 30) = 0;
    if (*(_QWORD *)v193)
    {
      **((_QWORD **)v193 + 2) = *((_QWORD *)v193 + 1);
      v347 = *((_QWORD *)v193 + 1);
      if (v347)
        *(_QWORD *)(v347 + 16) = *((_QWORD *)v193 + 2);
    }
    *(_QWORD *)v193 = v8;
    v199 = v8 + 1;
    v200 = v8[1];
    *((_QWORD *)v193 + 1) = v200;
    if (v200)
      *((_QWORD *)v200 + 2) = v193 + 8;
    *((_QWORD *)v193 + 2) = v199;
    *v199 = v193;
    if (*((_QWORD *)v193 + 4))
    {
      **((_QWORD **)v193 + 6) = *((_QWORD *)v193 + 5);
      v348 = *((_QWORD *)v193 + 5);
      if (v348)
        *(_QWORD *)(v348 + 16) = *((_QWORD *)v193 + 6);
    }
    *v194 = v196;
    if (v196)
    {
      v203 = v196[1];
      v202 = (llvm::Value ****)(v196 + 1);
      v201 = v203;
      *((_QWORD *)v193 + 5) = v203;
      if (v203)
        *((_QWORD *)v201 + 2) = v193 + 40;
      *((_QWORD *)v193 + 6) = v202;
      *v202 = v194;
    }
    *((_WORD *)v193 + 41) = 34;
    llvm::Value::setName((uint64_t ***)v16, (uint64_t)&v418);
    a1 = v376;
    v9 = v379;
    v192 = __s1a;
  }
  if (v415 >= 0x41 && v414)
    MEMORY[0x1CAA32F9C](v414, 0x1000C8000313F17);
  if ((v192 & 1) != 0)
    return (llvm::UndefValue **)v16;
  v204 = 1;
LABEL_437:
  if (*((_DWORD *)this + 2) >= 3u && sub_1C4959174(this) <= v20)
  {
    if (v204)
    {
      v252 = (char *)operator new(0x80uLL);
      v16 = (uint64_t)(v252 + 64);
      *((_DWORD *)v252 + 21) = *((_DWORD *)v252 + 21) & 0x38000000 | 2;
      *(_QWORD *)v252 = 0;
      *((_QWORD *)v252 + 1) = 0;
      *((_QWORD *)v252 + 2) = 0;
      *((_QWORD *)v252 + 3) = v252 + 64;
      *((_QWORD *)v252 + 4) = 0;
      v253 = (llvm::Value ***)(v252 + 32);
      *((_QWORD *)v252 + 5) = 0;
      *((_QWORD *)v252 + 6) = 0;
      *((_QWORD *)v252 + 7) = v252 + 64;
      v255 = llvm::Constant::getNullValue((llvm::Constant *)v378, v254);
      v421 = 257;
      sub_1C4774CC4(*v8);
      *((_QWORD *)v252 + 8) = v256;
      *((_QWORD *)v252 + 9) = 0;
      v257 = *((_DWORD *)v252 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v252 + 20) = 81;
      *((_DWORD *)v252 + 21) = v257;
      *(_OWORD *)(v252 + 88) = 0u;
      *(_OWORD *)(v252 + 104) = 0u;
      *((_DWORD *)v252 + 30) = 0;
      if (*(_QWORD *)v252)
      {
        **((_QWORD **)v252 + 2) = *((_QWORD *)v252 + 1);
        v351 = *((_QWORD *)v252 + 1);
        if (v351)
          *(_QWORD *)(v351 + 16) = *((_QWORD *)v252 + 2);
      }
      *(_QWORD *)v252 = v8;
      v260 = v8[1];
      v259 = v8 + 1;
      v258 = v260;
      *((_QWORD *)v252 + 1) = v260;
      if (v260)
        *((_QWORD *)v258 + 2) = v252 + 8;
      *((_QWORD *)v252 + 2) = v259;
      *v259 = v252;
      if (*((_QWORD *)v252 + 4))
      {
        **((_QWORD **)v252 + 6) = *((_QWORD *)v252 + 5);
        v352 = *((_QWORD *)v252 + 5);
        if (v352)
          *(_QWORD *)(v352 + 16) = *((_QWORD *)v252 + 6);
      }
      *v253 = v255;
      if (v255)
      {
        v263 = v255[1];
        v262 = (llvm::Value ****)(v255 + 1);
        v261 = v263;
        *((_QWORD *)v252 + 5) = v263;
        if (v263)
          *((_QWORD *)v261 + 2) = v252 + 40;
        *((_QWORD *)v252 + 6) = v262;
        *v262 = v253;
      }
      v264 = 40;
    }
    else
    {
      if (v9 != 36)
        goto LABEL_439;
      v252 = (char *)operator new(0x80uLL);
      v16 = (uint64_t)(v252 + 64);
      *((_DWORD *)v252 + 21) = *((_DWORD *)v252 + 21) & 0x38000000 | 2;
      *(_QWORD *)v252 = 0;
      *((_QWORD *)v252 + 1) = 0;
      *((_QWORD *)v252 + 2) = 0;
      *((_QWORD *)v252 + 3) = v252 + 64;
      *((_QWORD *)v252 + 4) = 0;
      v265 = (llvm::ValueHandleBase **)(v252 + 32);
      *((_QWORD *)v252 + 5) = 0;
      *((_QWORD *)v252 + 6) = 0;
      *((_QWORD *)v252 + 7) = v252 + 64;
      AllOnesValue = llvm::Constant::getAllOnesValue((llvm::Constant *)v378, v266);
      v421 = 257;
      sub_1C4774CC4(*v8);
      *((_QWORD *)v252 + 8) = v268;
      *((_QWORD *)v252 + 9) = 0;
      v269 = *((_DWORD *)v252 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v252 + 20) = 81;
      *((_DWORD *)v252 + 21) = v269;
      *(_OWORD *)(v252 + 88) = 0u;
      *(_OWORD *)(v252 + 104) = 0u;
      *((_DWORD *)v252 + 30) = 0;
      if (*(_QWORD *)v252)
      {
        **((_QWORD **)v252 + 2) = *((_QWORD *)v252 + 1);
        v359 = *((_QWORD *)v252 + 1);
        if (v359)
          *(_QWORD *)(v359 + 16) = *((_QWORD *)v252 + 2);
      }
      *(_QWORD *)v252 = v8;
      v272 = v8[1];
      v271 = v8 + 1;
      v270 = v272;
      *((_QWORD *)v252 + 1) = v272;
      if (v272)
        *((_QWORD *)v270 + 2) = v252 + 8;
      *((_QWORD *)v252 + 2) = v271;
      *v271 = v252;
      if (*((_QWORD *)v252 + 4))
      {
        **((_QWORD **)v252 + 6) = *((_QWORD *)v252 + 5);
        v360 = *((_QWORD *)v252 + 5);
        if (v360)
          *(_QWORD *)(v360 + 16) = *((_QWORD *)v252 + 6);
      }
      *v265 = AllOnesValue;
      if (AllOnesValue)
      {
        v275 = *((_QWORD *)AllOnesValue + 1);
        v274 = (llvm::ValueHandleBase ***)((char *)AllOnesValue + 8);
        v273 = v275;
        *((_QWORD *)v252 + 5) = v275;
        if (v275)
          *(_QWORD *)(v273 + 16) = v252 + 40;
        *((_QWORD *)v252 + 6) = v274;
        *v274 = v265;
      }
      v264 = 38;
    }
    *((_WORD *)v252 + 41) = v264;
    goto LABEL_188;
  }
LABEL_439:
  if ((*(_WORD *)(a2 + 18) & 0x3E) != 0x20)
    return 0;
  if ((*((_BYTE *)a3 + 17) & 2) == 0)
  {
    v230 = *((_DWORD *)this + 2);
    if (v230 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(this) != v230)
        goto LABEL_443;
    }
    else if (*(_QWORD *)this)
    {
LABEL_443:
      v231 = a3[1];
      if (!v231 || v231[1])
        return 0;
      v415 = v17;
      if (v17 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v414, 0, 0);
        LODWORD(v17) = v415;
      }
      else
      {
        v414 = 0;
      }
      sub_1C4912E54(&v414, v372 + v17, v17);
      v278 = llvm::ConstantInt::get(v378, (llvm::Type *)&v414, v277);
      v279 = *(_QWORD *)(a1 + 24);
      if ((*((_BYTE *)a3 + 23) & 0x10) == 0)
      {
        v316 = 0;
        v315 = (unint64_t *)&byte_1C871356D;
        goto LABEL_545;
      }
      v280 = ***a3;
      v281 = *(_QWORD *)(v280 + 152);
      v282 = *(unsigned int *)(v280 + 168);
      if ((_DWORD)v282)
      {
        LODWORD(v283) = (v282 - 1) & ((a3 >> 4) ^ (a3 >> 9));
        v284 = (uint64_t ****)(v281 + 16 * v283);
        v285 = *v284;
        if (*v284 == a3)
        {
LABEL_544:
          v314 = v284[1];
          v317 = *v314;
          v315 = (unint64_t *)(v314 + 2);
          v316 = v317;
LABEL_545:
          v421 = 773;
          v418 = (llvm::APInt **)v315;
          v419 = (uint64_t)v316;
          v420 = ".mask";
          v318 = sub_1C4D89BCC(v279, v8, (uint64_t)v278, (uint64_t)&v418);
          v319 = (char *)operator new(0x80uLL);
          *((_DWORD *)v319 + 21) = *((_DWORD *)v319 + 21) & 0x38000000 | 2;
          v16 = (uint64_t)(v319 + 64);
          *(_QWORD *)v319 = 0;
          *((_QWORD *)v319 + 1) = 0;
          *((_QWORD *)v319 + 2) = 0;
          *((_QWORD *)v319 + 3) = v319 + 64;
          *((_QWORD *)v319 + 4) = 0;
          v320 = (llvm::Value ***)(v319 + 32);
          *((_QWORD *)v319 + 5) = 0;
          *((_QWORD *)v319 + 6) = 0;
          *((_QWORD *)v319 + 7) = v319 + 64;
          v321 = *((unsigned int *)this + 2);
          v407 = v321;
          if (v321 > 0x40)
          {
            v322 = ((unint64_t)(v321 + 63) >> 3) & 0x3FFFFFF8;
            v406 = (void *)operator new[]();
            memcpy(v406, *(const void **)this, v322);
          }
          else
          {
            v406 = *(void **)this;
          }
          sub_1C4888094((uint64_t)&v406, v20);
          v324 = llvm::ConstantInt::get(v378, (llvm::Type *)&v406, v323);
          v421 = 257;
          sub_1C4774CC4(*(_DWORD **)v318);
          *((_QWORD *)v319 + 8) = v325;
          *((_QWORD *)v319 + 9) = 0;
          v326 = *((_DWORD *)v319 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v319 + 20) = 81;
          *((_DWORD *)v319 + 21) = v326;
          *(_OWORD *)(v319 + 88) = 0u;
          *(_OWORD *)(v319 + 104) = 0u;
          *((_DWORD *)v319 + 30) = 0;
          if (*(_QWORD *)v319)
          {
            **((_QWORD **)v319 + 2) = *((_QWORD *)v319 + 1);
            v357 = *((_QWORD *)v319 + 1);
            if (v357)
              *(_QWORD *)(v357 + 16) = *((_QWORD *)v319 + 2);
          }
          *(_QWORD *)v319 = v318;
          v329 = *(_QWORD *)(v318 + 8);
          v328 = (_QWORD *)(v318 + 8);
          v327 = v329;
          *((_QWORD *)v319 + 1) = v329;
          if (v329)
            *(_QWORD *)(v327 + 16) = v319 + 8;
          *((_QWORD *)v319 + 2) = v328;
          *v328 = v319;
          if (*((_QWORD *)v319 + 4))
          {
            **((_QWORD **)v319 + 6) = *((_QWORD *)v319 + 5);
            v358 = *((_QWORD *)v319 + 5);
            if (v358)
              *(_QWORD *)(v358 + 16) = *((_QWORD *)v319 + 6);
          }
          *v320 = v324;
          if (v324)
          {
            v332 = v324[1];
            v331 = (llvm::Value ****)(v324 + 1);
            v330 = v332;
            *((_QWORD *)v319 + 5) = v332;
            if (v332)
              *((_QWORD *)v330 + 2) = v319 + 40;
            *((_QWORD *)v319 + 6) = v331;
            *v331 = v320;
          }
          *((_WORD *)v319 + 41) = v379;
          llvm::Value::setName((uint64_t ***)v16, (uint64_t)&v418);
          if (v407 >= 0x41 && v406)
            MEMORY[0x1CAA32F9C](v406, 0x1000C8000313F17);
          goto LABEL_463;
        }
        v286 = 1;
        while (v285 != (uint64_t ***)-4096)
        {
          v287 = v283 + v286++;
          v283 = v287 & (v282 - 1);
          v285 = *(uint64_t ****)(v281 + 16 * v283);
          if (v285 == a3)
          {
            v284 = (uint64_t ****)(v281 + 16 * v283);
            goto LABEL_544;
          }
        }
      }
      v284 = (uint64_t ****)(v281 + 16 * v282);
      goto LABEL_544;
    }
    v236 = (char *)operator new(0x80uLL);
    v16 = (uint64_t)(v236 + 64);
    *((_DWORD *)v236 + 21) = *((_DWORD *)v236 + 21) & 0x38000000 | 2;
    *(_QWORD *)v236 = 0;
    *((_QWORD *)v236 + 1) = 0;
    *((_QWORD *)v236 + 2) = 0;
    *((_QWORD *)v236 + 3) = v236 + 64;
    v237 = v9;
    *((_QWORD *)v236 + 4) = 0;
    v238 = (llvm::Value ***)(v236 + 32);
    *((_QWORD *)v236 + 5) = 0;
    *((_QWORD *)v236 + 6) = 0;
    *((_QWORD *)v236 + 7) = v236 + 64;
    if (v237 == 32)
    {
      v239 = *((unsigned int *)this + 2);
      v385 = v239;
      if (v239 > 0x40)
      {
        v288 = ((unint64_t)(v239 + 63) >> 3) & 0x3FFFFFF8;
        v384 = (void *)operator new[]();
        memcpy(v384, *(const void **)this, v288);
      }
      else
      {
        v384 = *(void **)this;
      }
      llvm::APInt::operator+=((uint64_t)&v384, 1uLL);
      v289 = v385;
      v290 = v384;
      v385 = 0;
      v415 = v289;
      if (v289 > 0x40)
      {
        v414 = operator new[]();
        memcpy((void *)v414, v290, ((unint64_t)(v289 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v414 = (unint64_t)v384;
      }
      sub_1C4888094((uint64_t)&v414, v20);
      v295 = llvm::ConstantInt::get(v378, (llvm::Type *)&v414, v294);
      v421 = 257;
      sub_1C4774CC4(*v8);
      *((_QWORD *)v236 + 8) = v296;
      *((_QWORD *)v236 + 9) = 0;
      v297 = *((_DWORD *)v236 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v236 + 20) = 81;
      *((_DWORD *)v236 + 21) = v297;
      *(_OWORD *)(v236 + 88) = 0u;
      *(_OWORD *)(v236 + 104) = 0u;
      *((_DWORD *)v236 + 30) = 0;
      if (*(_QWORD *)v236)
      {
        **((_QWORD **)v236 + 2) = *((_QWORD *)v236 + 1);
        v353 = *((_QWORD *)v236 + 1);
        if (v353)
          *(_QWORD *)(v353 + 16) = *((_QWORD *)v236 + 2);
      }
      *(_QWORD *)v236 = v8;
      v300 = v8[1];
      v299 = v8 + 1;
      v298 = v300;
      *((_QWORD *)v236 + 1) = v300;
      if (v300)
        *((_QWORD *)v298 + 2) = v236 + 8;
      *((_QWORD *)v236 + 2) = v299;
      *v299 = v236;
      if (*((_QWORD *)v236 + 4))
      {
        **((_QWORD **)v236 + 6) = *((_QWORD *)v236 + 5);
        v354 = *((_QWORD *)v236 + 5);
        if (v354)
          *(_QWORD *)(v354 + 16) = *((_QWORD *)v236 + 6);
      }
      *v238 = v295;
      if (v295)
      {
        v303 = v295[1];
        v302 = (llvm::Value ****)(v295 + 1);
        v301 = v303;
        *((_QWORD *)v236 + 5) = v303;
        if (v303)
          *((_QWORD *)v301 + 2) = v236 + 40;
        *((_QWORD *)v236 + 6) = v302;
        *v302 = v238;
      }
      *((_WORD *)v236 + 41) = 36;
      llvm::Value::setName((uint64_t ***)v16, (uint64_t)&v418);
      if (v415 >= 0x41 && v414)
        MEMORY[0x1CAA32F9C](v414, 0x1000C8000313F17);
      if (v289 >= 0x41 && v290)
        MEMORY[0x1CAA32F9C](v290, 0x1000C8000313F17);
      if (v385 >= 0x41)
      {
        v251 = (unint64_t)v384;
        if (v384)
          goto LABEL_465;
      }
    }
    else
    {
      v276 = *((unsigned int *)this + 2);
      v381 = v276;
      if (v276 > 0x40)
      {
        v291 = ((unint64_t)(v276 + 63) >> 3) & 0x3FFFFFF8;
        v380 = (void *)operator new[]();
        memcpy(v380, *(const void **)this, v291);
      }
      else
      {
        v380 = *(void **)this;
      }
      llvm::APInt::operator+=((uint64_t)&v380, 1uLL);
      v292 = v381;
      v293 = v380;
      v381 = 0;
      v383 = v292;
      if (v292 > 0x40)
      {
        v382 = (void *)operator new[]();
        memcpy(v382, v293, ((unint64_t)(v292 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v382 = v380;
      }
      sub_1C4888094((uint64_t)&v382, v20);
      llvm::APInt::operator-=((uint64_t)&v382, 1uLL);
      v415 = v383;
      v414 = (unint64_t)v382;
      v383 = 0;
      v305 = llvm::ConstantInt::get(v378, (llvm::Type *)&v414, v304);
      v421 = 257;
      sub_1C4774CC4(*v8);
      *((_QWORD *)v236 + 8) = v306;
      *((_QWORD *)v236 + 9) = 0;
      v307 = *((_DWORD *)v236 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v236 + 20) = 81;
      *((_DWORD *)v236 + 21) = v307;
      *(_OWORD *)(v236 + 88) = 0u;
      *(_OWORD *)(v236 + 104) = 0u;
      *((_DWORD *)v236 + 30) = 0;
      if (*(_QWORD *)v236)
      {
        **((_QWORD **)v236 + 2) = *((_QWORD *)v236 + 1);
        v355 = *((_QWORD *)v236 + 1);
        if (v355)
          *(_QWORD *)(v355 + 16) = *((_QWORD *)v236 + 2);
      }
      *(_QWORD *)v236 = v8;
      v310 = v8[1];
      v309 = v8 + 1;
      v308 = v310;
      *((_QWORD *)v236 + 1) = v310;
      if (v310)
        *((_QWORD *)v308 + 2) = v236 + 8;
      *((_QWORD *)v236 + 2) = v309;
      *v309 = v236;
      if (*((_QWORD *)v236 + 4))
      {
        **((_QWORD **)v236 + 6) = *((_QWORD *)v236 + 5);
        v356 = *((_QWORD *)v236 + 5);
        if (v356)
          *(_QWORD *)(v356 + 16) = *((_QWORD *)v236 + 6);
      }
      *v238 = v305;
      if (v305)
      {
        v313 = v305[1];
        v312 = (llvm::Value ****)(v305 + 1);
        v311 = v313;
        *((_QWORD *)v236 + 5) = v313;
        if (v313)
          *((_QWORD *)v311 + 2) = v236 + 40;
        *((_QWORD *)v236 + 6) = v312;
        *v312 = v238;
      }
      *((_WORD *)v236 + 41) = 34;
      llvm::Value::setName((uint64_t ***)v16, (uint64_t)&v418);
      if (v415 >= 0x41 && v414)
        MEMORY[0x1CAA32F9C](v414, 0x1000C8000313F17);
      if (v383 >= 0x41 && v382)
        MEMORY[0x1CAA32F9C](v382, 0x1000C8000313F17);
      if (v292 >= 0x41 && v293)
        MEMORY[0x1CAA32F9C](v293, 0x1000C8000313F17);
      if (v381 >= 0x41)
      {
        v251 = (unint64_t)v380;
        if (v380)
          goto LABEL_465;
      }
    }
    return (llvm::UndefValue **)v16;
  }
  v233 = (char *)operator new(0x80uLL);
  *((_DWORD *)v233 + 21) = *((_DWORD *)v233 + 21) & 0x38000000 | 2;
  v16 = (uint64_t)(v233 + 64);
  *(_QWORD *)v233 = 0;
  *((_QWORD *)v233 + 1) = 0;
  *((_QWORD *)v233 + 2) = 0;
  *((_QWORD *)v233 + 3) = v233 + 64;
  *((_QWORD *)v233 + 4) = 0;
  v234 = (llvm::Value ***)(v233 + 32);
  *((_QWORD *)v233 + 5) = 0;
  *((_QWORD *)v233 + 6) = 0;
  *((_QWORD *)v233 + 7) = v233 + 64;
  v235 = *((unsigned int *)this + 2);
  v415 = v235;
  if (v235 > 0x40)
  {
    v240 = ((unint64_t)(v235 + 63) >> 3) & 0x3FFFFFF8;
    v414 = operator new[]();
    memcpy((void *)v414, *(const void **)this, v240);
  }
  else
  {
    v414 = *(_QWORD *)this;
  }
  sub_1C4888094((uint64_t)&v414, v20);
  v242 = llvm::ConstantInt::get(v378, (llvm::Type *)&v414, v241);
  v421 = 257;
  sub_1C4774CC4(*v8);
  *((_QWORD *)v233 + 8) = v243;
  *((_QWORD *)v233 + 9) = 0;
  v244 = *((_DWORD *)v233 + 21) & 0xC0000000 | 2;
  *((_DWORD *)v233 + 20) = 81;
  *((_DWORD *)v233 + 21) = v244;
  *(_OWORD *)(v233 + 88) = 0u;
  *(_OWORD *)(v233 + 104) = 0u;
  *((_DWORD *)v233 + 30) = 0;
  if (*(_QWORD *)v233)
  {
    **((_QWORD **)v233 + 2) = *((_QWORD *)v233 + 1);
    v343 = *((_QWORD *)v233 + 1);
    if (v343)
      *(_QWORD *)(v343 + 16) = *((_QWORD *)v233 + 2);
  }
  *(_QWORD *)v233 = v8;
  v247 = v8[1];
  v246 = v8 + 1;
  v245 = v247;
  *((_QWORD *)v233 + 1) = v247;
  if (v247)
    *((_QWORD *)v245 + 2) = v233 + 8;
  *((_QWORD *)v233 + 2) = v246;
  *v246 = v233;
  if (*((_QWORD *)v233 + 4))
  {
    **((_QWORD **)v233 + 6) = *((_QWORD *)v233 + 5);
    v344 = *((_QWORD *)v233 + 5);
    if (v344)
      *(_QWORD *)(v344 + 16) = *((_QWORD *)v233 + 6);
  }
  *v234 = v242;
  if (v242)
  {
    v250 = v242[1];
    v249 = (llvm::Value ****)(v242 + 1);
    v248 = v250;
    *((_QWORD *)v233 + 5) = v250;
    if (v250)
      *((_QWORD *)v248 + 2) = v233 + 40;
    *((_QWORD *)v233 + 6) = v249;
    *v249 = v234;
  }
  *((_WORD *)v233 + 41) = v379;
  llvm::Value::setName((uint64_t ***)v16, (uint64_t)&v418);
LABEL_463:
  if (v415 >= 0x41)
  {
    v251 = v414;
    if (v414)
LABEL_465:
      MEMORY[0x1CAA32F9C](v251, 0x1000C8000313F17);
  }
  return (llvm::UndefValue **)v16;
}

BOOL sub_1C57F38D0(uint64_t a1, const void **this, llvm::APInt *a3, int a4)
{
  uint64_t v6;
  int v7;
  BOOL v8;

  v8 = 0;
  if (a4)
    llvm::APInt::sadd_ov(this, a3, &v8, (uint64_t)&v6);
  else
    llvm::APInt::uadd_ov(this, (uint64_t **)a3, &v8, (uint64_t)&v6);
  if (*(_DWORD *)(a1 + 8) >= 0x41u && *(_QWORD *)a1)
    MEMORY[0x1CAA32F9C](*(_QWORD *)a1, 0x1000C8000313F17);
  *(_QWORD *)a1 = v6;
  *(_DWORD *)(a1 + 8) = v7;
  return v8;
}

BOOL sub_1C57F3958(uint64_t a1, const void **this, llvm::APInt *a3, int a4)
{
  uint64_t v6;
  int v7;
  BOOL v8;

  v8 = 0;
  if (a4)
    llvm::APInt::ssub_ov(this, a3, &v8, (uint64_t)&v6);
  else
    llvm::APInt::usub_ov(this, (unint64_t **)a3, &v8, (uint64_t)&v6);
  if (*(_DWORD *)(a1 + 8) >= 0x41u && *(_QWORD *)a1)
    MEMORY[0x1CAA32F9C](*(_QWORD *)a1, 0x1000C8000313F17);
  *(_QWORD *)a1 = v6;
  *(_DWORD *)(a1 + 8) = v7;
  return v8;
}

uint64_t sub_1C57F39E0@<X0>(llvm::Constant *this@<X1>, uint64_t result@<X0>, uint64_t a3@<X8>)
{
  llvm::Constant *v3;
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  int v13;
  char v15;
  int v16;
  llvm::Type *v17;
  llvm::Constant *v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  llvm::Constant *v25;
  unsigned int FlippedStrictnessPredicate;
  uint64_t v27;
  llvm::Value **v28;
  int v29;
  llvm::ConstantInt *v30;
  char v31;

  v3 = this;
  v4 = result;
  v6 = *(_QWORD *)this;
  v7 = result - 38;
  v8 = (int)result - 32;
  v9 = dword_1C8661740[v8];
  v10 = (_DWORD)result == 37 || (_DWORD)v8 == 9;
  v11 = v8 & 0xFFFFFFFB;
  v13 = !v10 && v11 != 2;
  if (*((_BYTE *)this + 16) == 16)
  {
    if (v9 == 37 || v9 == 34)
    {
      result = sub_1C4F19BB4((uint64_t)this, v7 < 4);
      if ((result & 1) == 0)
      {
LABEL_14:
        v29 = v13;
        v30 = (llvm::ConstantInt *)v6;
        goto LABEL_55;
      }
LABEL_20:
      v15 = 0;
      *(_BYTE *)a3 = 0;
      goto LABEL_62;
    }
    result = (uint64_t)this + 24;
    v23 = *((_DWORD *)this + 8);
    if (v7 > 3)
    {
      if (v23 > 0x40)
      {
        result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)result);
        if ((_DWORD)result != v23)
          goto LABEL_14;
      }
      else if (*(_QWORD *)result)
      {
        goto LABEL_14;
      }
      goto LABEL_20;
    }
    if (v23 <= 0x40)
    {
      if (*(_QWORD *)result != 1 << (v23 - 1))
        goto LABEL_14;
      goto LABEL_20;
    }
    v29 = v13;
    v30 = *(llvm::ConstantInt **)this;
    v24 = v23 - 1;
    if (((*(_QWORD *)(*(_QWORD *)result + 8 * (v24 >> 6)) >> v24) & 1) != 0)
    {
      result = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)result);
      if ((_DWORD)result == v24)
        goto LABEL_20;
    }
  }
  else
  {
    if (*(_BYTE *)(v6 + 8) != 18 || v6 == 0)
      goto LABEL_20;
    v29 = v13;
    v30 = *(llvm::ConstantInt **)this;
    v16 = *(_DWORD *)(v6 + 32);
    if (v16)
    {
      v17 = 0;
      v18 = 0;
      while (1)
      {
        result = (uint64_t)llvm::Constant::getAggregateElement(v3, v17);
        if (!result)
          goto LABEL_20;
        v19 = result;
        v20 = *(unsigned __int8 *)(result + 16);
        if ((v20 - 11) >= 2)
        {
          if (v20 != 16)
            goto LABEL_20;
          if (v9 == 37 || v9 == 34)
          {
            result = sub_1C4F19BB4(result, v7 < 4);
            if ((result & 1) != 0)
              goto LABEL_20;
          }
          else
          {
            result += 24;
            v21 = *(_DWORD *)(v19 + 32);
            if (v7 > 3)
            {
              if (v21 > 0x40)
              {
                result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)result);
                if ((_DWORD)result == v21)
                  goto LABEL_20;
              }
              else if (!*(_QWORD *)result)
              {
                goto LABEL_20;
              }
            }
            else if (v21 > 0x40)
            {
              v22 = v21 - 1;
              if (((*(_QWORD *)(*(_QWORD *)result + 8 * (v22 >> 6)) >> v22) & 1) != 0)
              {
                result = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)result);
                if ((_DWORD)result == v22)
                  goto LABEL_20;
              }
            }
            else if (*(_QWORD *)result == 1 << (v21 - 1))
            {
              goto LABEL_20;
            }
          }
          if (!v18)
            v18 = (llvm::Constant *)v19;
        }
        v17 = (llvm::Type *)((_DWORD)v17 + 1);
        if (v16 == (_DWORD)v17)
          goto LABEL_56;
      }
    }
  }
LABEL_55:
  v18 = 0;
LABEL_56:
  if (sub_1C5375B0C(v3, (uint64_t (*)(uint64_t, llvm::UndefValue *))sub_1C5381FE4, (uint64_t)&v31))v3 = llvm::Constant::replaceUndefsWith(v3, v18, v25);
  FlippedStrictnessPredicate = llvm::CmpInst::getFlippedStrictnessPredicate(v4);
  if (v29)
    v27 = -1;
  else
    v27 = 1;
  v15 = 1;
  v28 = llvm::ConstantInt::get(v30, v27, (const llvm::APInt *)1);
  result = (uint64_t)llvm::ConstantExpr::getAdd(v3, (llvm::Constant *)v28, 0, 0);
  *(_QWORD *)a3 = FlippedStrictnessPredicate;
  *(_QWORD *)(a3 + 8) = result;
LABEL_62:
  *(_BYTE *)(a3 + 16) = v15;
  return result;
}

unint64_t sub_1C57F3CBC(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t ***v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v12;
  llvm::APInt *v13;
  int v14;
  unsigned int v15;
  unsigned int *v16;
  _DWORD **v17;
  uint64_t v18;
  int v19;
  llvm::APInt *v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  llvm::Type *v24;
  char *v25;
  _QWORD *v26;
  llvm::Constant *v27;
  _OWORD *v28;
  llvm::ValueHandleBase *v29;
  uint64_t v30;
  unsigned int v31;
  _DWORD *v32;
  _QWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  __int16 v38;
  llvm::APInt *v39;
  unsigned __int8 *v40;
  __int16 v41;
  const void **v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t **v45;
  llvm::APInt *v46;
  llvm::Constant *v47;
  unsigned int v48;
  llvm::Constant *v49;
  llvm::Type *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unint64_t *v54;
  const void **v55;
  uint64_t v56;
  const llvm::APInt *v57;
  uint64_t v58;
  _QWORD *v59;
  llvm::Value **v60;
  uint64_t v61;
  _QWORD *v62;
  _DWORD **v63;
  char *v64;
  llvm::Type *v65;
  const llvm::APInt *v66;
  char *v67;
  llvm::Value ***v68;
  llvm::Value **v69;
  uint64_t v70;
  unsigned int v71;
  _DWORD *v72;
  _QWORD *v73;
  _DWORD *v74;
  llvm::Value *v75;
  llvm::Value ****v76;
  llvm::Value *v77;
  const void **v78;
  llvm::Constant *v79;
  uint64_t v80;
  llvm::Type *v81;
  unsigned __int8 *v82;
  uint64_t v83;
  uint64_t v84;
  llvm::ConstantInt **v85;
  unsigned int v86;
  BOOL v87;
  BOOL v88;
  llvm::APInt *v89;
  int v90;
  unsigned int v91;
  llvm::APInt *v92;
  unsigned __int8 *v93;
  llvm::APInt *v94;
  unsigned __int8 *v95;
  int v96;
  int v97;
  llvm::APInt *v98;
  unsigned int v99;
  llvm::Constant *v100;
  int v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  const llvm::APInt *v105;
  uint64_t v106;
  llvm::Constant *v107;
  int v108;
  uint64_t **v109;
  __int16 v110;
  llvm::APInt *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  char *v116;
  llvm::ValueHandleBase **v117;
  const llvm::APInt *v118;
  llvm::Value **v119;
  llvm::ValueHandleBase *Sub;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  llvm::ValueHandleBase ***v127;
  uint64_t v128;
  _QWORD *v129;
  unsigned int v130;
  unsigned int v131;
  int v132;
  char *v133;
  llvm::Value ***v134;
  uint64_t v135;
  llvm::Type *v136;
  llvm::Value **v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  llvm::Value *v143;
  llvm::Value ****v144;
  llvm::Value *v145;
  _DWORD *v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  llvm::Type *v150;
  llvm::Type **v151;
  uint64_t **v152;
  int v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  int v159;
  int v160;
  int v161;
  llvm::Value **v162;
  uint64_t v163;
  unsigned int v164;
  _DWORD *v165;
  _QWORD *v166;
  _DWORD *v167;
  llvm::Value *v168;
  _QWORD *v169;
  llvm::Value *v170;
  _BOOL4 v171;
  unint64_t v172;
  __int16 v173;
  const void **v174;
  void *v175;
  unsigned int v176;
  unint64_t v177;
  int v178;
  unsigned int v179;
  llvm::APInt *v180;
  unsigned int v181;
  unsigned int v182;
  unint64_t v183;
  unsigned int v184;
  const void **v185;
  int v186;
  uint64_t v187;
  uint8x8_t v188;
  uint64_t **v189;
  int v190;
  uint64_t v191;
  int v192;
  uint64_t **v193;
  int v194;
  uint64_t v195;
  int v196;
  unint64_t v197;
  uint8x8_t v198;
  _QWORD *v199;
  uint64_t v200;
  unsigned int v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  BOOL v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  char v213;
  uint64_t v214;
  uint64_t ***v215;
  uint64_t v216;
  const void **v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  unsigned int v222;
  int v223;
  uint64_t v224;
  int v225;
  uint64_t v226;
  unsigned int v227;
  char v228;
  __int16 FlippedSignednessPredicate;
  const llvm::APInt *v230;
  char *v231;
  llvm::Value ***v232;
  llvm::ConstantInt **v233;
  uint64_t v234;
  void *v235;
  int v236;
  int64_t v237;
  unint64_t v238;
  unsigned int v239;
  int v240;
  llvm::Constant *v241;
  const llvm::APInt *v242;
  unint64_t *v243;
  uint64_t **v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  llvm::Type *v250;
  unsigned int PrimitiveSizeInBits;
  unsigned int v252;
  unint64_t v253;
  void **p_dst;
  llvm::Type *v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  void **p_s2;
  const void **v260;
  uint64_t v261;
  int8x8_t *v262;
  unint64_t v263;
  void *v264;
  uint64_t v265;
  BOOL v266;
  int v267;
  int v268;
  const void **v269;
  unsigned int v270;
  void *v271;
  uint64_t v272;
  BOOL v273;
  int v274;
  uint64_t *v275;
  unsigned int v276;
  uint64_t **v277;
  int v278;
  int v279;
  llvm::Value **v280;
  char *v281;
  llvm::Value ***v282;
  unint64_t v283;
  uint64_t v284;
  unsigned int v285;
  uint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  llvm::Value *v289;
  llvm::Value ****v290;
  llvm::Value *v291;
  __int16 v292;
  size_t v293;
  llvm::Value **v294;
  const llvm::APInt *v295;
  uint64_t v296;
  llvm::Constant *v297;
  uint64_t v298;
  void *v299;
  llvm::Constant *v300;
  unint64_t v301;
  _QWORD *v302;
  uint64_t v303;
  llvm::Value **v304;
  char *v305;
  llvm::Value ***v306;
  uint64_t v307;
  unsigned int v308;
  uint64_t v309;
  _QWORD *v310;
  uint64_t v311;
  llvm::Value *v312;
  llvm::Value ****v313;
  llvm::Value *v314;
  int v315;
  int64_t v316;
  unint64_t v317;
  unsigned int v318;
  int v319;
  llvm::Value **v320;
  char *v321;
  llvm::Value ***v322;
  __int16 v323;
  uint64_t v324;
  uint64_t v325;
  unsigned int v326;
  uint64_t v327;
  _QWORD *v328;
  uint64_t v329;
  llvm::Value *v330;
  llvm::Value ****v331;
  llvm::Value *v332;
  uint64_t v333;
  _BOOL4 v334;
  _QWORD *v335;
  uint64_t v336;
  unsigned int v337;
  _DWORD *v338;
  _QWORD *v339;
  _DWORD *v340;
  uint64_t v341;
  _QWORD *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t *v345;
  uint64_t v346;
  int v347;
  unint64_t v348;
  uint8x8_t v349;
  uint64_t v350;
  void *v351;
  llvm::Value **v352;
  _QWORD *v353;
  uint64_t v354;
  llvm::APInt *v355;
  llvm::Type *v356;
  llvm::Value **v357;
  uint64_t v358;
  char *v359;
  _QWORD *v360;
  char v361;
  uint64_t v362;
  _QWORD *v363;
  uint64_t v364;
  uint64_t v365;
  _QWORD *v366;
  uint64_t v367;
  uint64_t v368;
  int v369;
  uint64_t v370;
  int v371;
  const llvm::APInt *v372;
  char *v373;
  llvm::Value ***v374;
  llvm::ConstantInt **v375;
  uint64_t v376;
  void *v377;
  unsigned int v378;
  unint64_t v379;
  unsigned int v380;
  _QWORD *v381;
  _DWORD **v382;
  int v383;
  char *v384;
  llvm::Value ***v385;
  llvm::ConstantInt **v386;
  llvm::APInt *v387;
  uint64_t v388;
  const void **v389;
  uint64_t v390;
  unint64_t v391;
  void *v392;
  uint64_t v393;
  BOOL v394;
  int v395;
  uint64_t **v396;
  int v397;
  uint64_t v398;
  const void **v399;
  uint64_t v400;
  llvm::Value **v401;
  char *v402;
  llvm::Value ***v403;
  llvm::Type *v404;
  uint64_t v405;
  unsigned int v406;
  uint64_t v407;
  _QWORD *v408;
  uint64_t v409;
  llvm::Value *v410;
  llvm::Value ****v411;
  llvm::Value *v412;
  __int16 v413;
  unsigned int v414;
  llvm::Type *v415;
  unsigned int v416;
  uint64_t v417;
  unsigned int v418;
  llvm::APInt *v419;
  unsigned int v420;
  uint64_t v421;
  unint64_t v422;
  unsigned int v423;
  llvm::APInt *v424;
  void *v425;
  uint64_t v426;
  uint8x8_t v427;
  llvm::APInt *v428;
  unsigned int v429;
  uint64_t v430;
  unint64_t v431;
  unsigned int v432;
  void *v433;
  uint64_t v434;
  uint64_t v435;
  BOOL v436;
  int v437;
  unint64_t v438;
  int8x8_t *v439;
  int8x8_t v440;
  uint8x8_t v441;
  int v442;
  const llvm::APInt *v443;
  char *v444;
  llvm::Value ***v445;
  llvm::ConstantInt **v446;
  uint64_t v447;
  size_t v448;
  unint64_t v449;
  uint64_t v450;
  uint64_t v451;
  unsigned int v452;
  unsigned int v453;
  unint64_t v454;
  uint64_t v455;
  uint8x8_t v456;
  uint64_t v457;
  int v458;
  unint64_t v459;
  uint8x8_t v460;
  unint64_t v461;
  uint64_t v462;
  int v463;
  unint64_t v464;
  uint8x8_t v465;
  _QWORD *v466;
  uint64_t v467;
  unsigned int v468;
  _DWORD *v469;
  _QWORD *v470;
  _DWORD *v471;
  uint64_t v472;
  _QWORD *v473;
  uint64_t v474;
  size_t v475;
  llvm::Value **v476;
  uint64_t v477;
  unsigned int v478;
  _DWORD *v479;
  _QWORD *v480;
  _DWORD *v481;
  llvm::Value *v482;
  llvm::Value ****v483;
  llvm::Value *v484;
  uint64_t *v485;
  unint64_t v486;
  _QWORD *v487;
  uint64_t v488;
  llvm::Value **v489;
  uint64_t v490;
  unsigned int v491;
  _DWORD *v492;
  _QWORD *v493;
  _DWORD *v494;
  llvm::Value *v495;
  llvm::Value ****v496;
  llvm::Value *v497;
  uint64_t v498;
  uint64_t **v499;
  uint64_t v500;
  llvm::APInt *v501;
  uint8x8_t v502;
  unint64_t **v503;
  uint64_t v504;
  llvm::APInt *v505;
  unsigned int v506;
  llvm::APInt *v507;
  _OWORD *v508;
  llvm::Value **v509;
  uint64_t v510;
  unsigned int v511;
  _DWORD *v512;
  _QWORD *v513;
  _DWORD *v514;
  llvm::Value *v515;
  llvm::Value ****v516;
  llvm::Value *v517;
  int v518;
  char *v519;
  llvm::Value ***v520;
  llvm::Constant *v521;
  const llvm::APInt *v522;
  llvm::Value **v523;
  uint64_t v524;
  unsigned int v525;
  _DWORD *v526;
  _QWORD *v527;
  llvm::Value *v528;
  llvm::Value ****v529;
  llvm::Value *v530;
  uint64_t v531;
  int v532;
  llvm::Value ***v533;
  _DWORD **v534;
  llvm::Type *v535;
  llvm::Value **v536;
  uint64_t v537;
  unsigned int v538;
  _DWORD *v539;
  _QWORD *v540;
  _DWORD *v541;
  llvm::Value *v542;
  llvm::Value ****v543;
  llvm::Value *v544;
  uint64_t v545;
  uint64_t v546;
  llvm::GlobalValue *v547;
  BOOL v548;
  llvm::ValueHandleBase **v549;
  llvm::ConstantInt **v550;
  llvm::Value **v551;
  llvm::ValueHandleBase *v552;
  uint64_t v553;
  unsigned int v554;
  uint64_t v555;
  _QWORD *v556;
  uint64_t v557;
  uint64_t v558;
  llvm::ValueHandleBase ***v559;
  uint64_t v560;
  __int16 v561;
  unint64_t v562;
  uint64_t v563;
  unint64_t v564;
  _QWORD *v565;
  llvm::Type *v566;
  uint64_t v567;
  _BOOL4 v568;
  uint64_t *v569;
  unint64_t v570;
  _QWORD *v571;
  uint64_t v572;
  llvm::Value **v573;
  uint64_t v574;
  unsigned int v575;
  _DWORD *v576;
  _QWORD *v577;
  _DWORD *v578;
  llvm::Value *v579;
  llvm::Value ****v580;
  llvm::Value *v581;
  uint64_t v582;
  uint64_t *v583;
  uint64_t v584;
  int v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  int v589;
  unint64_t v590;
  uint8x8_t v591;
  uint64_t *v592;
  uint64_t ***v593;
  _DWORD **v594;
  uint64_t v595;
  unsigned int v596;
  _DWORD *v597;
  _QWORD *v598;
  _DWORD *v599;
  __int16 v600;
  int8x8_t *v601;
  int v602;
  llvm::Constant **v603;
  _DWORD **v604;
  uint64_t v605;
  unsigned int v606;
  unsigned int v608;
  uint64_t **v609;
  char *v610;
  uint64_t *v611;
  llvm::Constant *v612;
  llvm::Constant *v613;
  uint64_t Xor;
  uint64_t v615;
  uint8x8_t v616;
  unsigned int v617;
  uint64_t **v618;
  uint64_t Not;
  uint64_t v620;
  uint64_t v621;
  uint64_t *v622;
  uint64_t v623;
  unsigned int v624;
  uint64_t v625;
  _QWORD *v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t **v629;
  uint64_t v630;
  _QWORD *v631;
  uint64_t v632;
  unsigned int v633;
  uint64_t v634;
  _QWORD *v635;
  uint64_t v636;
  _DWORD *v637;
  _QWORD *v638;
  _DWORD *v639;
  uint64_t **v640;
  uint64_t v641;
  uint64_t **v642;
  uint64_t v643;
  uint64_t v644;
  unsigned int v645;
  _DWORD *v646;
  _QWORD *v647;
  _DWORD *v648;
  uint64_t v649;
  uint64_t **v650;
  uint64_t v651;
  int8x8_t *v652;
  unint64_t v653;
  int v654;
  unint64_t v655;
  int8x8_t v656;
  uint8x8_t v657;
  llvm::Value ***v658;
  llvm::Type *v659;
  llvm::Value **v660;
  uint64_t v661;
  unsigned int v662;
  uint64_t **v663;
  _QWORD *v664;
  uint64_t **v665;
  llvm::Value *v666;
  llvm::Value ****v667;
  llvm::Value *v668;
  llvm::UndefValue *v669;
  llvm::UndefValue *v670;
  uint64_t v671;
  unsigned int v672;
  _DWORD *v673;
  _QWORD *v674;
  _DWORD *v675;
  uint64_t v676;
  _QWORD *v677;
  uint64_t v678;
  unsigned int v679;
  llvm::UndefValue *v680;
  llvm::UndefValue *v681;
  char *v682;
  uint64_t v683;
  unsigned int v684;
  uint64_t v685;
  _QWORD *v686;
  uint64_t v687;
  uint64_t v688;
  unsigned int v689;
  _DWORD *v690;
  _QWORD *v691;
  _DWORD *v692;
  uint64_t v693;
  _QWORD *v694;
  uint64_t v695;
  uint64_t **v696;
  uint64_t v697;
  unsigned __int8 *v698;
  char *v699;
  unsigned __int8 **v700;
  uint64_t v701;
  unsigned int v702;
  _DWORD *v703;
  _QWORD *v704;
  _DWORD *v705;
  uint64_t v706;
  unsigned __int8 ***v707;
  uint64_t v708;
  int v709;
  unint64_t v710;
  int8x8_t *v711;
  int8x8_t v712;
  uint8x8_t v713;
  uint64_t *v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t ****v719;
  uint64_t ***v720;
  int v721;
  int v722;
  llvm::Constant *v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  __int16 v728;
  int v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t **v732;
  int v734;
  uint64_t *v735;
  uint64_t v736;
  unsigned __int8 *v737;
  __int16 v738;
  uint64_t v739;
  uint64_t v740;
  BOOL v741;
  uint64_t v742;
  BOOL v743;
  uint64_t v744;
  llvm::APInt *v746;
  llvm::ConstantInt ***v747;
  unsigned int v748;
  BOOL v749;
  int v750;
  int v751;
  BOOL v752;
  llvm::Type *v753;
  int v754;
  llvm::Constant *v755;
  int v756;
  llvm::Type *v757;
  unsigned int v758;
  uint64_t **v759;
  unint64_t *v760;
  unint64_t v761;
  _DWORD **v762;
  int v763;
  unsigned int v764;
  int v765;
  int v766;
  size_t v767;
  char *v768;
  uint64_t v769;
  unint64_t v770;
  unsigned int v771;
  unsigned int v772;
  unint64_t v773;
  int v774;
  uint64_t v775;
  int v776;
  uint64_t v777;
  _QWORD *v778;
  uint64_t *v779;
  unint64_t v780;
  uint64_t v781;
  _QWORD *v782;
  unint64_t v783;
  uint64_t *v784;
  uint64_t v785;
  char *v786;
  llvm::Value ***v787;
  const llvm::APInt *v788;
  llvm::Value **v789;
  uint64_t v790;
  unsigned int v791;
  _QWORD *v792;
  llvm::ConstantInt **v793;
  llvm::Value *v794;
  llvm::Value ****v795;
  llvm::Value *v796;
  llvm::Constant *v797;
  int v798;
  llvm::Type *v799;
  char *v800;
  _QWORD *v801;
  _DWORD **v802;
  llvm::ConstantInt **v803;
  _OWORD *v804;
  llvm::Value **v805;
  uint64_t v806;
  unsigned int v807;
  _DWORD *v808;
  _QWORD *v809;
  _DWORD *v810;
  llvm::Value *v811;
  _QWORD *v812;
  llvm::Value *v813;
  char *v814;
  __int16 v815;
  uint64_t v816;
  llvm::ValueHandleBase *v818;
  uint64_t v819;
  unsigned int v820;
  _DWORD *v821;
  _QWORD *v822;
  _DWORD *v823;
  llvm::Value *v824;
  unint64_t **v825;
  __int16 v826;
  llvm::Constant *v827;
  unint64_t v828;
  int v829;
  unint64_t v830;
  int v831;
  uint64_t v832;
  unint64_t v833;
  llvm::ConstantInt **v834;
  int v835;
  uint64_t v836;
  uint64_t **v837;
  unint64_t v838;
  unint64_t v839;
  unint64_t v840;
  uint64_t v841;
  uint64_t v842;
  llvm::Value **v843;
  __int16 v844;
  llvm::Value ***v845;
  uint64_t **v846;
  const llvm::APInt *v847;
  llvm::Value **v848;
  uint64_t v849;
  unsigned int v850;
  uint64_t *v851;
  _QWORD *v852;
  uint64_t *v853;
  llvm::Value *v854;
  llvm::Value ****v855;
  llvm::Value *v856;
  _QWORD *v857;
  uint64_t v858;
  uint64_t ***v859;
  llvm::ValueHandleBase *v860;
  __int16 v861;
  llvm::ConstantInt *v862;
  llvm::ConstantInt ***v863;
  _DWORD **v864;
  uint64_t v865;
  unsigned int v866;
  _DWORD *v867;
  _QWORD *v868;
  _DWORD *v869;
  llvm::Type *v870;
  char *v871;
  llvm::Value ***v872;
  uint64_t **v873;
  llvm::Constant *v874;
  unint64_t v875;
  uint64_t **v876;
  unint64_t v877;
  _QWORD *v878;
  uint64_t *v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  unsigned int v883;
  uint64_t v884;
  _QWORD *v885;
  uint64_t v886;
  uint64_t v887;
  _QWORD *v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t ***v891;
  uint64_t **v892;
  uint64_t v893;
  uint64_t v894;
  llvm::Value ***v895;
  llvm::Type *v896;
  llvm::Value **v897;
  uint64_t v898;
  unsigned int v899;
  uint64_t v900;
  _QWORD *v901;
  uint64_t v902;
  llvm::Value *v903;
  llvm::Value ****v904;
  llvm::Value *v905;
  uint64_t **v906;
  const llvm::APInt *v907;
  llvm::Value **v908;
  uint64_t v909;
  unsigned int v910;
  uint64_t *v911;
  _QWORD *v912;
  uint64_t *v913;
  int v914;
  int v915;
  unint64_t v916;
  unsigned int v917;
  unint64_t v918;
  const llvm::APInt *v919;
  unint64_t v920;
  _QWORD *v921;
  uint64_t **v922;
  uint64_t v923;
  uint64_t v924;
  unsigned int v925;
  uint64_t *v926;
  _QWORD *v927;
  uint64_t *v928;
  uint64_t v929;
  _QWORD *v930;
  uint64_t v931;
  llvm::Value **AllOnesValue;
  uint64_t v933;
  unsigned int v934;
  uint64_t *v935;
  _QWORD *v936;
  uint64_t *v937;
  llvm::Value *v938;
  llvm::Value ****v939;
  llvm::Value *v940;
  unsigned __int8 *v941;
  char *v942;
  llvm::Value ***v943;
  uint64_t **v944;
  int v945;
  void **v946;
  const llvm::APInt *v947;
  uint64_t ***v948;
  char *v949;
  unint64_t *v950;
  unint64_t *v951;
  llvm::Type *v952;
  uint64_t v953;
  llvm::ConstantInt ***v954;
  const llvm::APInt *v955;
  llvm::Value **v956;
  uint64_t v957;
  llvm::Type *v958;
  llvm::Value **v959;
  __int16 v960;
  unint64_t v961;
  uint64_t v962;
  llvm::ConstantInt ***v963;
  const llvm::APInt *v964;
  llvm::Value **v965;
  llvm::Type *v966;
  llvm::Constant *v968;
  llvm::ConstantFP *v969;
  unsigned int v970;
  llvm::Constant *v971;
  llvm::Constant *v972;
  llvm::Constant *v973;
  uint64_t v974;
  uint64_t *v975;
  llvm::Type *v976;
  uint64_t v977;
  unsigned int v978;
  uint64_t v979;
  _QWORD *v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t **v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  llvm::Type *v987;
  llvm::Type *v988;
  unsigned int v989;
  const llvm::APInt *v990;
  llvm::Value **v991;
  const llvm::APInt *v992;
  llvm::Value **v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t ****v999;
  uint64_t ***v1000;
  int v1001;
  int v1002;
  unsigned int v1003;
  char v1004;
  llvm::APInt *v1005;
  llvm::APInt *v1006;
  unsigned int v1007;
  unsigned int v1008;
  uint64_t v1009;
  unsigned int v1010;
  unsigned int v1011;
  BOOL v1012;
  unsigned __int8 *v1014;
  unsigned int v1015;
  char v1016;
  llvm::APInt *v1017;
  unsigned int v1018;
  llvm::APInt *v1019;
  uint64_t ***v1020;
  unint64_t v1021;
  uint64_t ***v1022;
  unint64_t v1023;
  unsigned int v1024;
  uint64_t v1025;
  uint64_t ***v1026;
  unint64_t v1027;
  unsigned int v1028;
  uint64_t ***v1029;
  unint64_t v1030;
  unint64_t v1031;
  unsigned int v1032;
  uint64_t v1033;
  unsigned int v1034;
  unint64_t v1035;
  unsigned int v1036;
  llvm::Type *v1037;
  const llvm::APInt *v1038;
  int v1039;
  int v1040;
  llvm::Value **True;
  unsigned int v1042;
  uint64_t ***v1043;
  unint64_t v1044;
  unsigned int v1045;
  uint64_t ***v1046;
  unint64_t v1047;
  unsigned int v1048;
  uint64_t ***v1049;
  unint64_t v1050;
  unsigned int v1051;
  unint64_t v1052;
  BOOL v1053;
  unsigned int v1054;
  uint64_t ***v1055;
  void *v1056;
  size_t v1057;
  void *v1058;
  unsigned int v1059;
  unint64_t *v1060;
  unsigned int v1061;
  void **v1062;
  size_t v1063;
  unint64_t v1064;
  void *v1065;
  size_t v1066;
  uint64_t v1067;
  _QWORD *v1068;
  llvm::Value **v1069;
  uint64_t v1070;
  char *v1071;
  llvm::Value ***v1072;
  __int16 v1073;
  const llvm::APInt *v1074;
  llvm::Value **v1075;
  uint64_t v1076;
  unsigned int v1077;
  uint64_t v1078;
  _QWORD *v1079;
  uint64_t v1080;
  llvm::Value *v1081;
  llvm::Value ****v1082;
  llvm::Value *v1083;
  int v1084;
  int v1085;
  uint64_t v1086;
  unsigned int v1087;
  unsigned int v1088;
  int v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  llvm::APInt *v1095;
  uint8x8_t v1096;
  char *v1097;
  llvm::Value ***v1098;
  const void **v1099;
  uint64_t v1100;
  unint64_t v1101;
  void *v1102;
  const llvm::APInt *v1103;
  llvm::Value **v1104;
  uint64_t v1105;
  const llvm::APInt *v1106;
  char *v1107;
  llvm::Value ***v1108;
  uint64_t v1109;
  _DWORD *v1110;
  _QWORD *v1111;
  llvm::Value *v1112;
  llvm::Value ****v1113;
  llvm::Value *v1114;
  uint64_t v1115;
  uint64_t v1116;
  unint64_t v1117;
  llvm::APInt *v1118;
  llvm::Value **v1119;
  uint64_t v1120;
  unsigned int v1121;
  uint64_t v1122;
  _QWORD *v1123;
  uint64_t v1124;
  llvm::Value *v1125;
  llvm::Value ****v1126;
  llvm::Value *v1127;
  llvm::APInt *v1128;
  int v1129;
  unsigned int v1130;
  uint64_t v1131;
  char *v1132;
  llvm::Value ***v1133;
  uint64_t v1134;
  llvm::ConstantInt ***v1135;
  const llvm::APInt *v1136;
  llvm::Value **v1137;
  uint64_t v1138;
  const llvm::APInt *v1139;
  llvm::Value **v1140;
  uint64_t v1141;
  unsigned int v1142;
  uint64_t v1143;
  _QWORD *v1144;
  uint64_t v1145;
  llvm::Value *v1146;
  llvm::Value ****v1147;
  llvm::Value *v1148;
  uint64_t ***v1149;
  char *v1150;
  unint64_t *v1151;
  unint64_t *v1152;
  uint64_t v1153;
  llvm::Value ***v1154;
  __int16 v1155;
  uint64_t v1156;
  unsigned int v1157;
  uint64_t v1158;
  _QWORD *v1159;
  uint64_t v1160;
  llvm::Value *v1161;
  llvm::Value ****v1162;
  llvm::Value *v1163;
  uint64_t *v1164;
  uint64_t v1165;
  uint64_t v1166;
  llvm::Value **v1167;
  uint64_t v1168;
  unsigned int v1169;
  uint64_t *v1170;
  _QWORD *v1171;
  uint64_t *v1172;
  llvm::Value *v1173;
  llvm::Value ****v1174;
  llvm::Value *v1175;
  uint64_t v1176;
  uint64_t v1177;
  _QWORD *v1178;
  uint64_t v1179;
  unsigned int v1180;
  uint64_t *v1181;
  llvm::Constant *v1182;
  uint64_t ***v1183;
  int v1184;
  uint64_t ***v1185;
  uint64_t **v1186;
  uint64_t ***v1187;
  int v1188;
  unsigned __int8 *v1189;
  uint64_t ***v1190;
  uint64_t **v1191;
  uint64_t **v1192;
  int v1193;
  uint64_t **v1194;
  unsigned int v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t ****v1201;
  uint64_t ***v1202;
  int v1203;
  int v1204;
  llvm::ConstantExpr *Shl;
  llvm::Constant *v1206;
  llvm::Constant *v1207;
  uint64_t v1208;
  unsigned int v1209;
  uint64_t ***v1210;
  char *v1211;
  unint64_t *v1212;
  unint64_t *v1213;
  _QWORD *v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t ****v1219;
  uint64_t ***v1220;
  int v1221;
  int v1222;
  uint64_t ***v1223;
  char *v1224;
  uint64_t **v1225;
  uint64_t **v1226;
  uint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t ****v1233;
  uint64_t ***v1234;
  int v1235;
  int v1236;
  uint64_t ***v1237;
  char *v1238;
  unint64_t *v1239;
  unint64_t *v1240;
  uint64_t v1241;
  unsigned int v1242;
  char *v1243;
  llvm::Value ***v1244;
  const llvm::APInt *v1245;
  llvm::Value **v1246;
  uint64_t v1247;
  unsigned int v1248;
  _DWORD *v1249;
  _QWORD *v1250;
  llvm::Value *v1251;
  llvm::Value ****v1252;
  llvm::Value *v1253;
  __int16 v1254;
  unsigned int v1255;
  char *v1256;
  llvm::Value ***v1257;
  const llvm::APInt *v1258;
  llvm::Value **v1259;
  uint64_t v1260;
  unsigned int v1261;
  _DWORD *v1262;
  _QWORD *v1263;
  llvm::Value *v1264;
  llvm::Value ****v1265;
  llvm::Value *v1266;
  __int16 v1267;
  _QWORD **v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  int v1297;
  int64_t v1298;
  unint64_t v1299;
  unsigned int v1300;
  llvm::Value ***v1301;
  const llvm::APInt *v1302;
  llvm::Value **v1303;
  uint64_t v1304;
  unsigned int v1305;
  _DWORD *v1306;
  _QWORD *v1307;
  llvm::Value *v1308;
  llvm::Value ****v1309;
  llvm::Value *v1310;
  int v1311;
  int64_t v1312;
  unint64_t v1313;
  unsigned int v1314;
  llvm::Value ***v1315;
  const llvm::APInt *v1316;
  llvm::Value **v1317;
  uint64_t v1318;
  unsigned int v1319;
  _DWORD *v1320;
  _QWORD *v1321;
  llvm::Value *v1322;
  llvm::Value ****v1323;
  llvm::Value *v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  llvm::ConstantInt **v1331;
  const llvm::APInt *v1332;
  char *v1333;
  llvm::Value ***v1334;
  const void **v1335;
  uint64_t v1336;
  unint64_t v1337;
  llvm::Type *v1338;
  uint64_t v1339;
  uint64_t *v1340;
  unint64_t v1341;
  unint64_t *v1342;
  unint64_t v1343;
  uint64_t v1344;
  unint64_t v1345;
  _BOOL4 v1346;
  uint64_t v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  int v1352;
  unint64_t v1353;
  int8x8_t *v1354;
  int8x8_t v1355;
  uint8x8_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  uint64_t v1360;
  uint64_t v1361;
  uint64_t v1362;
  size_t v1363;
  llvm::Value **v1364;
  uint64_t v1365;
  unsigned int v1366;
  _DWORD *v1367;
  _QWORD *v1368;
  llvm::Value *v1369;
  llvm::Value ****v1370;
  llvm::Value *v1371;
  __int16 v1372;
  const llvm::APInt *v1373;
  char *v1374;
  llvm::Value ***v1375;
  unint64_t v1376;
  void *v1377;
  uint64_t v1378;
  uint64_t v1379;
  uint64_t v1380;
  uint64_t v1381;
  unint64_t *v1382;
  int64_t v1383;
  int v1384;
  unint64_t v1385;
  int v1386;
  _BOOL4 v1387;
  llvm::Value ***v1388;
  llvm::ConstantInt **v1389;
  const llvm::APInt *v1390;
  llvm::Value **v1391;
  uint64_t v1392;
  unsigned int v1393;
  _DWORD *v1394;
  _QWORD *v1395;
  _DWORD *v1396;
  llvm::Value *v1397;
  llvm::Value ****v1398;
  llvm::Value *v1399;
  llvm::ConstantInt **v1400;
  char *v1401;
  llvm::Value ***v1402;
  const void **v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t *v1407;
  unint64_t v1408;
  unint64_t *v1409;
  unint64_t v1410;
  uint64_t v1411;
  unint64_t v1412;
  _BOOL4 v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  uint64_t v1417;
  size_t v1418;
  uint64_t *v1419;
  unint64_t v1420;
  _QWORD *v1421;
  uint64_t v1422;
  unint64_t v1423;
  uint64_t v1424;
  unint64_t *v1425;
  unint64_t *v1426;
  unint64_t v1427;
  unint64_t v1428;
  unint64_t v1429;
  _BOOL4 v1430;
  unint64_t v1431;
  llvm::Value **v1432;
  uint64_t v1433;
  unsigned int v1434;
  _DWORD *v1435;
  _QWORD *v1436;
  llvm::Value *v1437;
  llvm::Value ****v1438;
  llvm::Value *v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  size_t v1447;
  const llvm::APInt *v1448;
  llvm::Value **v1449;
  uint64_t v1450;
  unsigned int v1451;
  _DWORD *v1452;
  _QWORD *v1453;
  _DWORD *v1454;
  llvm::Value *v1455;
  llvm::Value ****v1456;
  llvm::Value *v1457;
  size_t v1458;
  unint64_t v1459;
  const llvm::APInt *v1460;
  llvm::Value **v1461;
  uint64_t v1462;
  unsigned int v1463;
  _DWORD *v1464;
  _QWORD *v1465;
  llvm::Value *v1466;
  llvm::Value ****v1467;
  llvm::Value *v1468;
  char *v1469;
  int8x8_t *v1470;
  char *v1471;
  uint64_t *v1472;
  uint64_t v1473;
  uint64_t v1474;
  uint64_t v1475;
  unint64_t v1476;
  const llvm::APInt *v1477;
  llvm::Value **v1478;
  llvm::Type *v1479;
  uint64_t v1480;
  llvm::ConstantFP *v1481;
  unsigned int v1482;
  llvm::Constant *Zero;
  llvm::Constant *v1484;
  llvm::Constant *v1485;
  uint64_t v1486;
  uint64_t v1487;
  unsigned int v1488;
  uint64_t v1489;
  _QWORD *v1490;
  uint64_t v1491;
  uint64_t v1492;
  uint64_t **v1493;
  uint64_t v1494;
  _QWORD **v1495;
  uint64_t v1496;
  const llvm::APInt *v1497;
  uint64_t v1498;
  void *v1499;
  uint64_t v1500;
  uint64_t v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  llvm::Value **v1506;
  uint64_t v1507;
  unsigned int v1508;
  _DWORD *v1509;
  _QWORD *v1510;
  _DWORD *v1511;
  llvm::Value *v1512;
  llvm::Value ****v1513;
  llvm::Value *v1514;
  uint64_t v1515;
  uint64_t v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t *v1522;
  unint64_t v1523;
  _QWORD *v1524;
  uint64_t v1525;
  llvm::Value **v1526;
  uint64_t v1527;
  unsigned int v1528;
  _DWORD *v1529;
  _QWORD *v1530;
  llvm::Value *v1531;
  llvm::Constant **v1532;
  llvm::Value *v1533;
  uint64_t v1534;
  uint64_t v1535;
  llvm::ConstantExpr *v1536;
  llvm::Constant *FCmp;
  _BOOL4 isAllOnesValue;
  llvm::ConstantExpr *v1539;
  llvm::Constant *ICmp;
  _BOOL4 v1541;
  llvm::ConstantExpr *v1542;
  llvm::Constant *v1543;
  const llvm::APInt *v1544;
  _BOOL4 v1545;
  uint64_t *v1546;
  uint64_t v1547;
  llvm::Value *v1548;
  uint64_t v1549;
  uint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  uint64_t v1558;
  uint64_t v1559;
  int v1560;
  unint64_t v1561;
  llvm::APInt *v1562;
  int8x8_t v1563;
  uint8x8_t v1564;
  _BOOL4 v1565;
  const void **v1566;
  uint64_t v1567;
  uint64_t v1568;
  unint64_t *v1569;
  unint64_t v1570;
  unint64_t *v1571;
  unint64_t v1572;
  unint64_t v1573;
  unint64_t v1574;
  _BOOL4 v1575;
  unint64_t v1576;
  uint64_t v1577;
  size_t v1578;
  uint64_t v1579;
  uint64_t v1580;
  size_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  uint64_t v1584;
  uint64_t v1585;
  _QWORD *v1586;
  uint64_t v1587;
  char *v1588;
  int64_t v1589;
  int v1590;
  unint64_t v1591;
  int v1592;
  const llvm::APInt *v1593;
  char *v1594;
  uint64_t *v1595;
  uint64_t v1596;
  uint64_t v1597;
  unint64_t v1598;
  void *v1599;
  size_t v1600;
  llvm::Value **v1601;
  llvm::Type *v1602;
  uint64_t v1603;
  llvm::ConstantFP *v1604;
  unsigned int v1605;
  llvm::Constant *NullValue;
  llvm::Constant *v1607;
  llvm::Constant *v1608;
  uint64_t v1609;
  uint64_t v1610;
  unsigned int v1611;
  uint64_t v1612;
  _QWORD *v1613;
  uint64_t v1614;
  uint64_t v1615;
  uint64_t **v1616;
  uint64_t v1617;
  llvm::ConstantInt *v1618;
  uint64_t v1619;
  uint64_t v1620;
  uint64_t v1621;
  uint64_t v1622;
  uint64_t v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  uint64_t v1627;
  uint64_t v1628;
  uint64_t v1629;
  uint64_t v1630;
  uint64_t v1631;
  uint64_t v1632;
  uint64_t v1633;
  uint64_t v1634;
  uint64_t v1635;
  uint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  uint64_t v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  _QWORD **v1643;
  uint64_t v1644;
  uint64_t v1645;
  uint64_t v1646;
  unsigned int v1647;
  llvm::Constant *v1648;
  llvm::Constant *v1649;
  llvm::Constant *v1650;
  _DWORD **__s1;
  unsigned int __s1a;
  int8x8_t *v1653;
  llvm::APInt *v1654;
  int v1655[2];
  int v1656[2];
  uint64_t v1657;
  llvm::APInt *v1658;
  void *v1659;
  int v1660;
  llvm::APInt *v1661;
  unsigned int v1662;
  void *v1663;
  int v1664;
  llvm::APInt *v1665;
  unsigned int v1666;
  llvm::APInt *v1667;
  unsigned int v1668;
  llvm::APInt *v1669;
  unsigned int v1670;
  llvm::APInt *v1671;
  unsigned int v1672;
  void *v1673;
  unsigned int v1674;
  llvm::Type *v1675;
  unsigned int v1676;
  llvm::APInt *v1677;
  unsigned int v1678;
  void *__s2;
  unsigned int v1680;
  void *__dst;
  unsigned int v1682;
  void *__src;
  unsigned int v1684[2];
  unint64_t *v1685;
  unsigned int v1686;
  unint64_t **v1687;
  unint64_t v1688;
  unint64_t *p_src;
  uint64_t v1690;
  __int128 v1691;
  __int128 v1692;
  uint64_t v1693;
  unint64_t v1694;
  void *v1695;
  unint64_t v1696;
  unsigned int v1697;
  __int16 v1698;
  unint64_t v1699;
  llvm::Constant *v1700;
  uint64_t v1701;

  v1701 = *MEMORY[0x1E0C80C00];
  v1658 = 0;
  v4 = *(unsigned __int8 **)(a2 - 32);
  v1688 = (unint64_t)&v1658;
  p_src = 0;
  v7 = 0;
  if (!sub_1C4D89F84((uint64_t)&v1688, v4))
    return v7;
  v8 = *(uint64_t ****)(a2 - 64);
  v9 = *((unsigned __int8 *)v8 + 16);
  if (v8)
    v10 = v9 >= 0x1C;
  else
    v10 = 0;
  if (!v10 || v9 - 59 < 0xFFFFFFEE)
    goto LABEL_1021;
  switch(*((_BYTE *)v8 + 16))
  {
    case ')':
      if ((*(_WORD *)(a2 + 18) & 0x3E) == 0x20)
        goto LABEL_881;
      v78 = (const void **)v1658;
      v7 = (unint64_t)*(v8 - 4);
      v1687 = 0;
      v1688 = (unint64_t)&v1687;
      p_src = 0;
      if ((sub_1C4D89F84((uint64_t)&v1688, (unsigned __int8 *)v7) & 1) == 0)
        goto LABEL_881;
      v1653 = (int8x8_t *)v78;
      *(_QWORD *)v1655 = a1;
      v1648 = (llvm::Constant *)v7;
      __s1 = (_DWORD **)*(v8 - 8);
      v79 = (llvm::Constant *)*v8;
      v80 = *(_WORD *)(a2 + 18) & 0x3F;
      if ((*((_BYTE *)v8 + 17) & 4) != 0 && ((_DWORD)v80 == 38 || (_DWORD)v80 == 40))
      {
        LOBYTE(__src) = 0;
        llvm::APInt::ssub_ov(v78, (const llvm::APInt *)v1687, (BOOL *)&__src, (uint64_t)&v1694);
      }
      else
      {
        if ((*((_BYTE *)v8 + 17) & 2) == 0 || (_DWORD)v80 != 36 && (_DWORD)v80 != 34)
          goto LABEL_74;
        LOBYTE(__src) = 0;
        llvm::APInt::usub_ov(v78, v1687, (BOOL *)&__src, (uint64_t)&v1694);
      }
      v1647 = v80;
      v518 = __src;
      if ((_BYTE)__src)
      {
        v80 = v80;
      }
      else
      {
        v519 = (char *)operator new(0x80uLL);
        v7 = (unint64_t)(v519 + 64);
        *((_DWORD *)v519 + 21) = *((_DWORD *)v519 + 21) & 0x38000000 | 2;
        *(_QWORD *)v519 = 0;
        *((_QWORD *)v519 + 1) = 0;
        *((_QWORD *)v519 + 2) = 0;
        *((_QWORD *)v519 + 3) = v519 + 64;
        *((_QWORD *)v519 + 4) = 0;
        v520 = (llvm::Value ***)(v519 + 32);
        *((_QWORD *)v519 + 5) = 0;
        *((_QWORD *)v519 + 6) = 0;
        *((_QWORD *)v519 + 7) = v519 + 64;
        v521 = v79;
        v523 = llvm::ConstantInt::get((llvm::ConstantInt **)v79, (llvm::Type *)&v1694, v522);
        WORD4(v1691) = 257;
        sub_1C4774CC4(*__s1);
        *((_QWORD *)v519 + 8) = v524;
        *((_QWORD *)v519 + 9) = 0;
        v525 = *((_DWORD *)v519 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v519 + 20) = 81;
        *((_DWORD *)v519 + 21) = v525;
        *(_OWORD *)(v519 + 88) = 0u;
        *(_OWORD *)(v519 + 104) = 0u;
        *((_DWORD *)v519 + 30) = 0;
        if (*(_QWORD *)v519)
        {
          **((_QWORD **)v519 + 2) = *((_QWORD *)v519 + 1);
          v1361 = *((_QWORD *)v519 + 1);
          if (v1361)
            *(_QWORD *)(v1361 + 16) = *((_QWORD *)v519 + 2);
        }
        *(_QWORD *)v519 = __s1;
        v527 = __s1 + 1;
        v526 = __s1[1];
        *((_QWORD *)v519 + 1) = v526;
        if (v526)
          *((_QWORD *)v526 + 2) = v519 + 8;
        *((_QWORD *)v519 + 2) = v527;
        *v527 = v519;
        v79 = v521;
        if (*((_QWORD *)v519 + 4))
        {
          **((_QWORD **)v519 + 6) = *((_QWORD *)v519 + 5);
          v1362 = *((_QWORD *)v519 + 5);
          if (v1362)
            *(_QWORD *)(v1362 + 16) = *((_QWORD *)v519 + 6);
        }
        *v520 = v523;
        v80 = v1647;
        if (v523)
        {
          v530 = v523[1];
          v529 = (llvm::Value ****)(v523 + 1);
          v528 = v530;
          *((_QWORD *)v519 + 5) = v530;
          if (v530)
            *((_QWORD *)v528 + 2) = v519 + 40;
          *((_QWORD *)v519 + 6) = v529;
          *v529 = v520;
        }
        *((_WORD *)v519 + 41) = v1647;
        llvm::Value::setName((uint64_t ***)v7, (uint64_t)&v1688);
      }
      v78 = (const void **)v1653;
      if (v1695 >= 0x41 && v1694)
        MEMORY[0x1CAA32F9C](v1694, 0x1000C8000313F17);
      if (v518)
      {
LABEL_74:
        llvm::ConstantRange::makeExactICmpRegion(&v1688, v80, v78);
        llvm::ConstantRange::subtract((char *)&v1688, v1687, (llvm::APInt *)&__src);
        if (v1691 >= 0x41 && v1690)
          MEMORY[0x1CAA32F9C](v1690, 0x1000C8000313F17);
        if (p_src >= 0x41 && v1688)
          MEMORY[0x1CAA32F9C](v1688, 0x1000C8000313F17);
        if ((*(_WORD *)(a2 + 18) & 0x3Eu) - 38 > 3)
        {
          if (v1684[0] > 0x40)
          {
            v1297 = 0;
            v1298 = ((unint64_t)v1684[0] + 63) >> 6;
            do
            {
              v88 = v1298-- < 1;
              if (v88)
                break;
              v1299 = *((_QWORD *)__src + v1298);
              v1297 += __clz(v1299);
            }
            while (!v1299);
            v1300 = v1684[0] | 0xFFFFFFC0;
            if ((v1684[0] & 0x3F) == 0)
              v1300 = 0;
            if (v1297 + v1300 != v1684[0])
            {
LABEL_79:
              if (v1686 > 0x40)
              {
                v1311 = 0;
                v1312 = ((unint64_t)v1686 + 63) >> 6;
                do
                {
                  v88 = v1312-- < 1;
                  if (v88)
                    break;
                  v1313 = v1685[v1312];
                  v1311 += __clz(v1313);
                }
                while (!v1313);
                v1314 = v1686 | 0xFFFFFFC0;
                if ((v1686 & 0x3F) == 0)
                  v1314 = 0;
                if (v1311 + v1314 == v1686)
                  goto LABEL_1868;
              }
              else if (!v1685)
              {
LABEL_1868:
                v1256 = (char *)operator new(0x80uLL);
                v7 = (unint64_t)(v1256 + 64);
                *((_DWORD *)v1256 + 21) = *((_DWORD *)v1256 + 21) & 0x38000000 | 2;
                *(_QWORD *)v1256 = 0;
                *((_QWORD *)v1256 + 1) = 0;
                *((_QWORD *)v1256 + 2) = 0;
                *((_QWORD *)v1256 + 3) = v1256 + 64;
                *((_QWORD *)v1256 + 4) = 0;
                v1315 = (llvm::Value ***)(v1256 + 32);
                *((_QWORD *)v1256 + 5) = 0;
                *((_QWORD *)v1256 + 6) = 0;
                *((_QWORD *)v1256 + 7) = v1256 + 64;
                v1317 = llvm::ConstantInt::get((llvm::ConstantInt **)v79, (llvm::Type *)&__src, v1316);
                WORD4(v1691) = 257;
                sub_1C4774CC4(*__s1);
                *((_QWORD *)v1256 + 8) = v1318;
                *((_QWORD *)v1256 + 9) = 0;
                v1319 = *((_DWORD *)v1256 + 21) & 0xC0000000 | 2;
                *((_DWORD *)v1256 + 20) = 81;
                *((_DWORD *)v1256 + 21) = v1319;
                *(_OWORD *)(v1256 + 88) = 0u;
                *(_OWORD *)(v1256 + 104) = 0u;
                *((_DWORD *)v1256 + 30) = 0;
                if (*(_QWORD *)v1256)
                {
                  **((_QWORD **)v1256 + 2) = *((_QWORD *)v1256 + 1);
                  v1627 = *((_QWORD *)v1256 + 1);
                  if (v1627)
                    *(_QWORD *)(v1627 + 16) = *((_QWORD *)v1256 + 2);
                }
                *(_QWORD *)v1256 = __s1;
                v1321 = __s1 + 1;
                v1320 = __s1[1];
                *((_QWORD *)v1256 + 1) = v1320;
                if (v1320)
                  *((_QWORD *)v1320 + 2) = v1256 + 8;
                *((_QWORD *)v1256 + 2) = v1321;
                *v1321 = v1256;
                if (*((_QWORD *)v1256 + 4))
                {
                  **((_QWORD **)v1256 + 6) = *((_QWORD *)v1256 + 5);
                  v1628 = *((_QWORD *)v1256 + 5);
                  if (v1628)
                    *(_QWORD *)(v1628 + 16) = *((_QWORD *)v1256 + 6);
                }
                *v1315 = v1317;
                if (v1317)
                {
                  v1324 = v1317[1];
                  v1323 = (llvm::Value ****)(v1317 + 1);
                  v1322 = v1324;
                  *((_QWORD *)v1256 + 5) = v1324;
                  if (v1324)
                    *((_QWORD *)v1322 + 2) = v1256 + 40;
                  *((_QWORD *)v1256 + 6) = v1323;
                  *v1323 = v1315;
                }
                v1267 = 35;
LABEL_1877:
                *((_WORD *)v1256 + 41) = v1267;
                goto LABEL_1861;
              }
LABEL_355:
              v250 = v79;
              if ((*((_DWORD *)v79 + 2) & 0xFE) == 0x12)
                v250 = (llvm::Type *)**((_QWORD **)v79 + 2);
              PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v250);
              v252 = PrimitiveSizeInBits;
              v1682 = PrimitiveSizeInBits;
              if (PrimitiveSizeInBits > 0x40)
              {
                p_dst = &__dst;
                llvm::APInt::initSlowCase((llvm::APInt *)&__dst, -1, 1);
                LODWORD(v253) = v252 - 1;
                if (v1682 >= 0x41)
                  p_dst = (void **)((char *)__dst + 8 * (v253 >> 6));
                v252 = v1682;
              }
              else
              {
                if (PrimitiveSizeInBits)
                  v253 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
                else
                  v253 = 0;
                __dst = (void *)v253;
                LOBYTE(v253) = PrimitiveSizeInBits - 1;
                p_dst = &__dst;
              }
              *p_dst = (void *)((unint64_t)*p_dst & ~(1 << v253));
              v255 = v79;
              if ((*((_DWORD *)v79 + 2) & 0xFE) == 0x12)
                v255 = (llvm::Type *)**((_QWORD **)v79 + 2);
              v256 = llvm::Type::getPrimitiveSizeInBits(v255);
              v257 = v256;
              v1680 = v256;
              if (v256 > 0x40)
              {
                p_s2 = &__s2;
                llvm::APInt::initSlowCase((llvm::APInt *)&__s2, 0, 0);
                v258 = v257 - 1;
                if (v1680 >= 0x41)
                  p_s2 = (void **)((char *)__s2 + 8 * (v258 >> 6));
                v257 = v1680;
              }
              else
              {
                __s2 = 0;
                LOBYTE(v258) = v256 - 1;
                p_s2 = &__s2;
              }
              *p_s2 = (void *)((1 << v258) | (unint64_t)*p_s2);
              if ((_DWORD)v80 != 34)
              {
                if ((_DWORD)v80 == 36)
                {
                  v260 = (const void **)v1687;
                  v261 = *((unsigned int *)v1687 + 2);
                  if (v261 >= 0x41)
                  {
                    v264 = (void *)operator new[]();
                    memcpy(v264, *v260, ((unint64_t)(v261 + 63) >> 3) & 0x3FFFFFF8);
                    v1339 = 0;
                    v1340 = (uint64_t *)__s2;
                    v1341 = (unint64_t)(v261 + 63) >> 6;
                    v1342 = (unint64_t *)v264;
                    v1343 = v1341;
                    do
                    {
                      v1344 = *v1340++;
                      v1345 = v1344 + *v1342;
                      v1346 = v1345 + 1 <= *v1342;
                      if (v1339)
                      {
                        ++v1345;
                        v1339 = v1346;
                      }
                      else
                      {
                        v1339 = v1345 < *v1342;
                      }
                      *v1342++ = v1345;
                      --v1343;
                    }
                    while (v1343);
                    *((_QWORD *)v264 + (v1341 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v261;
                    v262 = v1653;
                  }
                  else
                  {
                    v262 = v1653;
                    if ((_DWORD)v261)
                      v263 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v261;
                    else
                      v263 = 0;
                    v264 = (void *)(v263 & ((unint64_t)*v1687 + (_QWORD)__s2));
                  }
                  v265 = v262[1].u32[0];
                  if (v265 > 0x40)
                    v266 = memcmp(*(const void **)v262, v264, ((unint64_t)(v265 + 63) >> 3) & 0x3FFFFFF8) == 0;
                  else
                    v266 = *v262 == (_QWORD)v264;
                  v267 = v266;
                  if (v261 >= 0x41 && v264)
                    MEMORY[0x1CAA32F9C](v264, 0x1000C8000313F17);
                  if (!v267)
                  {
                    v268 = 1;
LABEL_719:
                    v499 = v8[1];
                    if (!v499 || v499[1])
                      goto LABEL_728;
                    if (!v268)
                      goto LABEL_727;
                    v500 = v262[1].u32[0];
                    if (v500 > 0x40)
                    {
                      v1352 = 0;
                      v1353 = (unint64_t)(v500 + 63) >> 6;
                      v1354 = (int8x8_t *)*v262;
                      do
                      {
                        v1355 = *v1354++;
                        v1356 = (uint8x8_t)vcnt_s8(v1355);
                        v1356.i16[0] = vaddlv_u8(v1356);
                        v1352 += v1356.i32[0];
                        --v1353;
                      }
                      while (v1353);
                      v262 = v1653;
                      if (v1352 != 1)
                        goto LABEL_727;
                      v503 = v1687;
                      v1672 = v500;
                      v1671 = (llvm::APInt *)operator new[]();
                      memcpy(v1671, *(const void **)v1653, (((unint64_t)v1672 + 63) >> 3) & 0x3FFFFFF8);
                    }
                    else
                    {
                      v501 = (llvm::APInt *)*v262;
                      v502 = (uint8x8_t)vcnt_s8(*v262);
                      v502.i16[0] = vaddlv_u8(v502);
                      if (v502.u32[0] != 1)
                        goto LABEL_727;
                      v503 = v1687;
                      v1672 = v262[1].u32[0];
                      v1671 = v501;
                    }
                    llvm::APInt::operator-=((uint64_t)&v1671, 1uLL);
                    v504 = v1672;
                    v505 = v1671;
                    v1672 = 0;
                    if (v504 < 0x41)
                    {
                      if (((unint64_t)*v503 & (unint64_t)v1671) != 0)
                        goto LABEL_727;
LABEL_2086:
                      v1469 = (char *)operator new(0x80uLL);
                      v1470 = v262;
                      v1471 = v1469;
                      v7 = (unint64_t)(v1469 + 64);
                      *((_DWORD *)v1469 + 21) = *((_DWORD *)v1469 + 21) & 0x38000000 | 2;
                      *(_QWORD *)v1469 = 0;
                      *((_QWORD *)v1469 + 1) = 0;
                      *((_QWORD *)v1469 + 2) = 0;
                      *((_QWORD *)v1469 + 3) = v1469 + 64;
                      *((_QWORD *)v1469 + 4) = 0;
                      v1472 = (uint64_t *)(v1469 + 32);
                      *((_QWORD *)v1469 + 5) = 0;
                      *((_QWORD *)v1469 + 6) = 0;
                      *((_QWORD *)v1469 + 7) = v1469 + 64;
                      v1473 = *(_QWORD *)(*(_QWORD *)v1655 + 24);
                      v1474 = v1470[1].u32[0];
                      v1668 = v1474;
                      if (v1474 > 0x40)
                      {
                        v1581 = ((unint64_t)(v1474 + 63) >> 3) & 0x3FFFFFF8;
                        v1475 = operator new[]();
                        v1667 = (llvm::APInt *)v1475;
                        memcpy((void *)v1475, *(const void **)v1653, v1581);
                        LODWORD(v1474) = v1668;
                        if (v1668 > 0x40)
                        {
                          llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1667);
                          goto LABEL_2091;
                        }
                      }
                      else
                      {
                        v1475 = (uint64_t)*v1653;
                      }
                      if ((_DWORD)v1474)
                        v1476 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1474;
                      else
                        v1476 = 0;
                      v1667 = (llvm::APInt *)(v1476 & ~v1475);
LABEL_2091:
                      llvm::APInt::operator++((uint64_t)&v1667);
                      v1670 = v1668;
                      v1669 = v1667;
                      v1668 = 0;
                      v1698 = 257;
                      v1478 = llvm::ConstantInt::get((llvm::ConstantInt **)*__s1, (llvm::Type *)&v1669, v1477);
                      v1480 = sub_1C4D89BCC(v1473, __s1, (uint64_t)v1478, (uint64_t)&v1694);
                      v1481 = *(llvm::ConstantFP **)v1648;
                      if ((*(_DWORD *)(*(_QWORD *)v1648 + 8) & 0xFE) == 0x12)
                        v1482 = *(unsigned __int8 *)(**((_QWORD **)v1481 + 2) + 8);
                      else
                        v1482 = *(_DWORD *)(*(_QWORD *)v1648 + 8);
                      if (v1482 <= 6)
                        Zero = llvm::ConstantFP::getZero(v1481, (llvm::Type *)1);
                      else
                        Zero = (llvm::Constant *)llvm::Constant::getNullValue(v1481, v1479);
                      v1485 = Zero;
                      v1486 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)0xF, Zero, v1648, v1484);
                      if (!v1486)
                      {
                        v1495 = *(_QWORD ***)v1485;
                        if (*(_QWORD *)v1485)
                        {
                          v1699 = (unint64_t)v1485;
                          v1700 = v1648;
                          v1496 = **v1495 + 1512;
                          LODWORD(v1688) = 15;
                          p_src = &v1699;
                          v1690 = 2;
                          v1691 = 0u;
                          v1692 = 0u;
                          v1693 = 0;
                          v1486 = sub_1C537D4FC(v1496, (uint64_t)v1495, (unsigned __int8 *)&v1688);
                        }
                        else
                        {
                          v1486 = 0;
                        }
                      }
                      WORD4(v1691) = 257;
                      sub_1C4774CC4(*(_DWORD **)v1480);
                      *((_QWORD *)v1471 + 8) = v1487;
                      *((_QWORD *)v1471 + 9) = 0;
                      v1488 = *((_DWORD *)v1471 + 21) & 0xC0000000 | 2;
                      *((_DWORD *)v1471 + 20) = 81;
                      *((_DWORD *)v1471 + 21) = v1488;
                      *(_OWORD *)(v1471 + 88) = 0u;
                      *(_OWORD *)(v1471 + 104) = 0u;
                      *((_DWORD *)v1471 + 30) = 0;
                      if (*(_QWORD *)v1471)
                      {
                        **((_QWORD **)v1471 + 2) = *((_QWORD *)v1471 + 1);
                        v1582 = *((_QWORD *)v1471 + 1);
                        if (v1582)
                          *(_QWORD *)(v1582 + 16) = *((_QWORD *)v1471 + 2);
                      }
                      *(_QWORD *)v1471 = v1480;
                      v1491 = *(_QWORD *)(v1480 + 8);
                      v1490 = (_QWORD *)(v1480 + 8);
                      v1489 = v1491;
                      *((_QWORD *)v1471 + 1) = v1491;
                      if (v1491)
                        *(_QWORD *)(v1489 + 16) = v1471 + 8;
                      *((_QWORD *)v1471 + 2) = v1490;
                      *v1490 = v1471;
                      if (*((_QWORD *)v1471 + 4))
                      {
                        **((_QWORD **)v1471 + 6) = *((_QWORD *)v1471 + 5);
                        v1583 = *((_QWORD *)v1471 + 5);
                        if (v1583)
                          *(_QWORD *)(v1583 + 16) = *((_QWORD *)v1471 + 6);
                      }
                      *v1472 = v1486;
                      if (v1486)
                      {
                        v1494 = *(_QWORD *)(v1486 + 8);
                        v1493 = (uint64_t **)(v1486 + 8);
                        v1492 = v1494;
                        *((_QWORD *)v1471 + 5) = v1494;
                        if (v1494)
                          *(_QWORD *)(v1492 + 16) = v1471 + 40;
                        *((_QWORD *)v1471 + 6) = v1493;
                        *v1493 = v1472;
                      }
                      *((_WORD *)v1471 + 41) = 32;
                      llvm::Value::setName((uint64_t ***)v7, (uint64_t)&v1688);
                      if (v1670 >= 0x41 && v1669)
                        MEMORY[0x1CAA32F9C](v1669, 0x1000C8000313F17);
                      if (v1668 < 0x41)
                        goto LABEL_729;
                      v1128 = v1667;
                      if (!v1667)
                        goto LABEL_729;
                      goto LABEL_2028;
                    }
                    v1381 = 0;
                    v1382 = *v503;
                    v1383 = (unint64_t)(v504 + 63) >> 6;
                    do
                    {
                      *(_QWORD *)((char *)v505 + v1381 * 8) &= v1382[v1381];
                      ++v1381;
                    }
                    while (v1383 != v1381);
                    v1384 = 0;
                    do
                    {
                      v88 = v1383-- < 1;
                      if (v88)
                        break;
                      v1385 = *((_QWORD *)v505 + v1383);
                      v1384 += __clz(v1385);
                    }
                    while (!v1385);
                    v1386 = v504 | 0xFFFFFFC0;
                    if ((v504 & 0x3F) == 0)
                      v1386 = 0;
                    if ((v504 - v1384 - v1386) >= 0x41)
                    {
                      v262 = v1653;
                      if (!v505)
                        goto LABEL_727;
                      v1387 = 0;
                    }
                    else
                    {
                      v1387 = *(_QWORD *)v505 == 0;
                      if (!v505)
                      {
                        v262 = v1653;
                        if (!MEMORY[0])
                          goto LABEL_2086;
LABEL_727:
                        if ((_DWORD)v80 != 34)
                        {
LABEL_728:
                          v7 = 0;
                          goto LABEL_729;
                        }
                        v1666 = v262[1].u32[0];
                        if (v1666 > 0x40)
                        {
                          v1665 = (llvm::APInt *)operator new[]();
                          memcpy(v1665, *(const void **)v1653, (((unint64_t)v1666 + 63) >> 3) & 0x3FFFFFF8);
                        }
                        else
                        {
                          v1665 = (llvm::APInt *)*v1653;
                        }
                        llvm::APInt::operator+=((uint64_t)&v1665, 1uLL);
                        v1094 = v1666;
                        v1095 = v1665;
                        v1666 = 0;
                        if (v1094 > 0x40)
                        {
                          v1560 = 0;
                          v1561 = (unint64_t)(v1094 + 63) >> 6;
                          v1562 = v1665;
                          do
                          {
                            v1563 = *(int8x8_t *)v1562;
                            v1562 = (llvm::APInt *)((char *)v1562 + 8);
                            v1564 = (uint8x8_t)vcnt_s8(v1563);
                            v1564.i16[0] = vaddlv_u8(v1564);
                            v1560 += v1564.i32[0];
                            --v1561;
                          }
                          while (v1561);
                          if (v1560 != 1)
                          {
                            v1565 = 0;
                            goto LABEL_2199;
                          }
                        }
                        else
                        {
                          v1096 = (uint8x8_t)vcnt_s8((int8x8_t)v1665);
                          v1096.i16[0] = vaddlv_u8(v1096);
                          if (v1096.u32[0] != 1)
                            goto LABEL_1568;
                        }
                        v1566 = (const void **)v1687;
                        v1567 = *((unsigned int *)v1687 + 2);
                        if (v1567 >= 0x41)
                        {
                          v1586 = (_QWORD *)operator new[]();
                          memcpy(v1586, *v1566, ((unint64_t)(v1567 + 63) >> 3) & 0x3FFFFFF8);
                          v1587 = 0;
                          v1588 = (char *)*v1653;
                          v1589 = (unint64_t)(v1567 + 63) >> 6;
                          do
                          {
                            v1586[v1587] &= *(_QWORD *)&v1588[v1587 * 8];
                            ++v1587;
                          }
                          while (v1589 != v1587);
                          v1590 = 0;
                          do
                          {
                            v88 = v1589-- < 1;
                            if (v88)
                              break;
                            v1591 = v1586[v1589];
                            v1590 += __clz(v1591);
                          }
                          while (!v1591);
                          v1592 = v1567 | 0xFFFFFFC0;
                          if ((v1567 & 0x3F) == 0)
                            v1592 = 0;
                          v1565 = (v1567 - v1590 - v1592) < 0x41 && *v1586 == 0;
                          MEMORY[0x1CAA32F9C](v1586, 0x1000C8000313F17);
                        }
                        else
                        {
                          v1565 = (*(_QWORD *)v1653 & (unint64_t)*v1687) == 0;
                        }
                        if (v1094 < 0x41)
                        {
LABEL_2204:
                          if (v1666 >= 0x41 && v1665)
                          {
                            MEMORY[0x1CAA32F9C](v1665, 0x1000C8000313F17);
                            if (v1565)
                              goto LABEL_2253;
                          }
                          else if (v1565)
                          {
LABEL_2253:
                            v1594 = (char *)operator new(0x80uLL);
                            v7 = (unint64_t)(v1594 + 64);
                            *((_DWORD *)v1594 + 21) = *((_DWORD *)v1594 + 21) & 0x38000000 | 2;
                            *(_QWORD *)v1594 = 0;
                            *((_QWORD *)v1594 + 1) = 0;
                            *((_QWORD *)v1594 + 2) = 0;
                            *((_QWORD *)v1594 + 3) = v1594 + 64;
                            *((_QWORD *)v1594 + 4) = 0;
                            v1595 = (uint64_t *)(v1594 + 32);
                            *((_QWORD *)v1594 + 5) = 0;
                            *((_QWORD *)v1594 + 6) = 0;
                            *((_QWORD *)v1594 + 7) = v1594 + 64;
                            v1596 = *(_QWORD *)(*(_QWORD *)v1655 + 24);
                            v1597 = v1653[1].u32[0];
                            v1664 = v1597;
                            if (v1597 > 0x40)
                            {
                              v1600 = ((unint64_t)(v1597 + 63) >> 3) & 0x3FFFFFF8;
                              v1663 = (void *)operator new[]();
                              memcpy(v1663, *(const void **)v1653, v1600);
                              llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1663);
                              LODWORD(v1597) = v1664;
                              v1599 = v1663;
                            }
                            else
                            {
                              if ((_DWORD)v1597)
                                v1598 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1597;
                              else
                                v1598 = 0;
                              v1599 = (void *)(v1598 & ~*(_QWORD *)v1653);
                              v1663 = v1599;
                            }
                            v1670 = v1597;
                            v1669 = (llvm::APInt *)v1599;
                            v1664 = 0;
                            v1698 = 257;
                            v1601 = llvm::ConstantInt::get((llvm::ConstantInt **)*__s1, (llvm::Type *)&v1669, v1593);
                            v1603 = sub_1C4D89BCC(v1596, __s1, (uint64_t)v1601, (uint64_t)&v1694);
                            v1604 = *(llvm::ConstantFP **)v1648;
                            if ((*(_DWORD *)(*(_QWORD *)v1648 + 8) & 0xFE) == 0x12)
                              v1605 = *(unsigned __int8 *)(**((_QWORD **)v1604 + 2) + 8);
                            else
                              v1605 = *(_DWORD *)(*(_QWORD *)v1648 + 8);
                            if (v1605 <= 6)
                              NullValue = llvm::ConstantFP::getZero(v1604, (llvm::Type *)1);
                            else
                              NullValue = (llvm::Constant *)llvm::Constant::getNullValue(v1604, v1602);
                            v1608 = NullValue;
                            v1609 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)0xF, NullValue, v1648, v1607);
                            if (!v1609)
                            {
                              v1643 = *(_QWORD ***)v1608;
                              if (*(_QWORD *)v1608)
                              {
                                v1699 = (unint64_t)v1608;
                                v1700 = v1648;
                                v1644 = **v1643 + 1512;
                                LODWORD(v1688) = 15;
                                p_src = &v1699;
                                v1690 = 2;
                                v1691 = 0u;
                                v1692 = 0u;
                                v1693 = 0;
                                v1609 = sub_1C537D4FC(v1644, (uint64_t)v1643, (unsigned __int8 *)&v1688);
                              }
                              else
                              {
                                v1609 = 0;
                              }
                            }
                            WORD4(v1691) = 257;
                            sub_1C4774CC4(*(_DWORD **)v1603);
                            *((_QWORD *)v1594 + 8) = v1610;
                            *((_QWORD *)v1594 + 9) = 0;
                            v1611 = *((_DWORD *)v1594 + 21) & 0xC0000000 | 2;
                            *((_DWORD *)v1594 + 20) = 81;
                            *((_DWORD *)v1594 + 21) = v1611;
                            *(_OWORD *)(v1594 + 88) = 0u;
                            *(_OWORD *)(v1594 + 104) = 0u;
                            *((_DWORD *)v1594 + 30) = 0;
                            if (*(_QWORD *)v1594)
                            {
                              **((_QWORD **)v1594 + 2) = *((_QWORD *)v1594 + 1);
                              v1645 = *((_QWORD *)v1594 + 1);
                              if (v1645)
                                *(_QWORD *)(v1645 + 16) = *((_QWORD *)v1594 + 2);
                            }
                            *(_QWORD *)v1594 = v1603;
                            v1614 = *(_QWORD *)(v1603 + 8);
                            v1613 = (_QWORD *)(v1603 + 8);
                            v1612 = v1614;
                            *((_QWORD *)v1594 + 1) = v1614;
                            if (v1614)
                              *(_QWORD *)(v1612 + 16) = v1594 + 8;
                            *((_QWORD *)v1594 + 2) = v1613;
                            *v1613 = v1594;
                            if (*((_QWORD *)v1594 + 4))
                            {
                              **((_QWORD **)v1594 + 6) = *((_QWORD *)v1594 + 5);
                              v1646 = *((_QWORD *)v1594 + 5);
                              if (v1646)
                                *(_QWORD *)(v1646 + 16) = *((_QWORD *)v1594 + 6);
                            }
                            *v1595 = v1609;
                            if (v1609)
                            {
                              v1617 = *(_QWORD *)(v1609 + 8);
                              v1616 = (uint64_t **)(v1609 + 8);
                              v1615 = v1617;
                              *((_QWORD *)v1594 + 5) = v1617;
                              if (v1617)
                                *(_QWORD *)(v1615 + 16) = v1594 + 40;
                              *((_QWORD *)v1594 + 6) = v1616;
                              *v1616 = v1595;
                            }
                            *((_WORD *)v1594 + 41) = 33;
                            llvm::Value::setName((uint64_t ***)v7, (uint64_t)&v1688);
                            if (v1670 < 0x41)
                              goto LABEL_729;
                            v1128 = v1669;
                            if (!v1669)
                              goto LABEL_729;
                            goto LABEL_2028;
                          }
LABEL_1568:
                          v1097 = (char *)operator new(0x80uLL);
                          v7 = (unint64_t)(v1097 + 64);
                          *((_DWORD *)v1097 + 21) = *((_DWORD *)v1097 + 21) & 0x38000000 | 2;
                          *(_QWORD *)v1097 = 0;
                          *((_QWORD *)v1097 + 1) = 0;
                          *((_QWORD *)v1097 + 2) = 0;
                          *((_QWORD *)v1097 + 3) = v1097 + 64;
                          *((_QWORD *)v1097 + 4) = 0;
                          v1098 = (llvm::Value ***)(v1097 + 32);
                          *((_QWORD *)v1097 + 5) = 0;
                          *((_QWORD *)v1097 + 6) = 0;
                          *((_QWORD *)v1097 + 7) = v1097 + 64;
                          v1649 = *(llvm::Constant **)(*(_QWORD *)v1655 + 24);
                          v1099 = (const void **)v1687;
                          v1100 = *((unsigned int *)v1687 + 2);
                          if (v1100 >= 0x41)
                          {
                            v1102 = (void *)operator new[]();
                            memcpy(v1102, *v1099, ((unint64_t)(v1100 + 63) >> 3) & 0x3FFFFFF8);
                            v1568 = 0;
                            v1569 = (unint64_t *)*v1653;
                            v1570 = (unint64_t)(v1100 + 63) >> 6;
                            v1571 = (unint64_t *)v1102;
                            v1572 = v1570;
                            do
                            {
                              v1573 = *v1569++;
                              v1574 = *v1571 - v1573;
                              v1575 = *v1571 < v1573;
                              v1576 = *v1571 + ~v1573;
                              if (v1568)
                              {
                                v1568 = v1576 >= *v1571;
                              }
                              else
                              {
                                v1576 = v1574;
                                v1568 = v1575;
                              }
                              *v1571++ = v1576;
                              --v1572;
                            }
                            while (v1572);
                            *((_QWORD *)v1102 + (v1570 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v1100;
                          }
                          else
                          {
                            v1101 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1100;
                            if (!(_DWORD)v1100)
                              v1101 = 0;
                            v1102 = (void *)(v1101 & ((unint64_t)*v1687 - *(_QWORD *)v1653));
                          }
                          v1662 = v1100;
                          v1661 = (llvm::APInt *)v1102;
                          llvm::APInt::operator-=((uint64_t)&v1661, 1uLL);
                          LODWORD(v1700) = v1662;
                          v1699 = (unint64_t)v1661;
                          v1662 = 0;
                          v1104 = llvm::ConstantInt::get((llvm::ConstantInt **)v79, (llvm::Type *)&v1699, v1103);
                          v1698 = 257;
                          v1105 = (*(uint64_t (**)(_QWORD, _DWORD **, llvm::Value **, _QWORD, _QWORD))(**((_QWORD **)v1649 + 9) + 16))(*((_QWORD *)v1649 + 9), __s1, v1104, 0, 0);
                          if (!v1105)
                          {
                            WORD4(v1691) = 257;
                            v1107 = (char *)operator new(0x80uLL);
                            *(_QWORD *)v1107 = 0;
                            *((_QWORD *)v1107 + 2) = 0;
                            *((_QWORD *)v1107 + 1) = 0;
                            *((_QWORD *)v1107 + 5) = 0;
                            *((_QWORD *)v1107 + 6) = 0;
                            *((_QWORD *)v1107 + 4) = 0;
                            v1108 = (llvm::Value ***)(v1107 + 32);
                            *((_QWORD *)v1107 + 8) = *__s1;
                            v1109 = (uint64_t)(v1107 + 64);
                            *((_QWORD *)v1107 + 3) = v1107 + 64;
                            *((_QWORD *)v1107 + 7) = v1107 + 64;
                            *((_QWORD *)v1107 + 9) = 0;
                            v1107[80] = 41;
                            v1107[81] = 0;
                            *((_WORD *)v1107 + 41) = 0;
                            *((_DWORD *)v1107 + 21) = 2;
                            *((_DWORD *)v1107 + 30) = 0;
                            *(_OWORD *)(v1107 + 104) = 0u;
                            *(_OWORD *)(v1107 + 88) = 0u;
                            *(_QWORD *)v1107 = __s1;
                            v1111 = __s1 + 1;
                            v1110 = __s1[1];
                            *((_QWORD *)v1107 + 1) = v1110;
                            if (v1110)
                              *((_QWORD *)v1110 + 2) = v1107 + 8;
                            *((_QWORD *)v1107 + 2) = v1111;
                            *v1111 = v1107;
                            if (*((_QWORD *)v1107 + 4))
                            {
                              **((_QWORD **)v1107 + 6) = *((_QWORD *)v1107 + 5);
                              v1577 = *((_QWORD *)v1107 + 5);
                              if (v1577)
                                *(_QWORD *)(v1577 + 16) = *((_QWORD *)v1107 + 6);
                            }
                            *v1108 = v1104;
                            if (v1104)
                            {
                              v1114 = v1104[1];
                              v1113 = (llvm::Value ****)(v1104 + 1);
                              v1112 = v1114;
                              *((_QWORD *)v1107 + 5) = v1114;
                              if (v1114)
                                *((_QWORD *)v1112 + 2) = v1107 + 40;
                              *((_QWORD *)v1107 + 6) = v1113;
                              *v1113 = v1108;
                            }
                            llvm::Value::setName((uint64_t ***)v1107 + 8, (uint64_t)&v1688);
                            v1105 = sub_1C4773754((uint64_t *)v1649, v1109, (uint64_t)&v1694);
                          }
                          v1115 = v1105;
                          v1116 = v1653[1].u32[0];
                          v1660 = v1116;
                          if (v1116 > 0x40)
                          {
                            v1578 = ((unint64_t)(v1116 + 63) >> 3) & 0x3FFFFFF8;
                            v1659 = (void *)operator new[]();
                            memcpy(v1659, *(const void **)v1653, v1578);
                            llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1659);
                            LODWORD(v1116) = v1660;
                            v1118 = (llvm::APInt *)v1659;
                          }
                          else
                          {
                            v1117 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1116;
                            if (!(_DWORD)v1116)
                              v1117 = 0;
                            v1118 = (llvm::APInt *)(v1117 & ~*(_QWORD *)v1653);
                          }
                          v1670 = v1116;
                          v1669 = v1118;
                          v1119 = llvm::ConstantInt::get((llvm::ConstantInt **)v79, (llvm::Type *)&v1669, v1106);
                          WORD4(v1691) = 257;
                          sub_1C4774CC4(*(_DWORD **)v1115);
                          *((_QWORD *)v1097 + 8) = v1120;
                          *((_QWORD *)v1097 + 9) = 0;
                          v1121 = *((_DWORD *)v1097 + 21) & 0xC0000000 | 2;
                          *((_DWORD *)v1097 + 20) = 81;
                          *((_DWORD *)v1097 + 21) = v1121;
                          *(_OWORD *)(v1097 + 88) = 0u;
                          *(_OWORD *)(v1097 + 104) = 0u;
                          *((_DWORD *)v1097 + 30) = 0;
                          if (*(_QWORD *)v1097)
                          {
                            **((_QWORD **)v1097 + 2) = *((_QWORD *)v1097 + 1);
                            v1579 = *((_QWORD *)v1097 + 1);
                            if (v1579)
                              *(_QWORD *)(v1579 + 16) = *((_QWORD *)v1097 + 2);
                          }
                          *(_QWORD *)v1097 = v1115;
                          v1124 = *(_QWORD *)(v1115 + 8);
                          v1123 = (_QWORD *)(v1115 + 8);
                          v1122 = v1124;
                          *((_QWORD *)v1097 + 1) = v1124;
                          if (v1124)
                            *(_QWORD *)(v1122 + 16) = v1097 + 8;
                          *((_QWORD *)v1097 + 2) = v1123;
                          *v1123 = v1097;
                          if (*((_QWORD *)v1097 + 4))
                          {
                            **((_QWORD **)v1097 + 6) = *((_QWORD *)v1097 + 5);
                            v1580 = *((_QWORD *)v1097 + 5);
                            if (v1580)
                              *(_QWORD *)(v1580 + 16) = *((_QWORD *)v1097 + 6);
                          }
                          *v1098 = v1119;
                          if (v1119)
                          {
                            v1127 = v1119[1];
                            v1126 = (llvm::Value ****)(v1119 + 1);
                            v1125 = v1127;
                            *((_QWORD *)v1097 + 5) = v1127;
                            if (v1127)
                              *((_QWORD *)v1125 + 2) = v1097 + 40;
                            *((_QWORD *)v1097 + 6) = v1126;
                            *v1126 = v1098;
                          }
                          *((_WORD *)v1097 + 41) = 36;
                          llvm::Value::setName((uint64_t ***)v7, (uint64_t)&v1688);
                          if (v1670 >= 0x41 && v1669)
                            MEMORY[0x1CAA32F9C](v1669, 0x1000C8000313F17);
                          if (v1700 >= 0x41 && v1699)
                            MEMORY[0x1CAA32F9C](v1699, 0x1000C8000313F17);
                          if (v1662 < 0x41)
                            goto LABEL_729;
                          v1128 = v1661;
                          if (!v1661)
                            goto LABEL_729;
                          goto LABEL_2028;
                        }
LABEL_2199:
                        if (v1095)
                          MEMORY[0x1CAA32F9C](v1095, 0x1000C8000313F17);
                        goto LABEL_2204;
                      }
                    }
                    MEMORY[0x1CAA32F9C]();
                    if (v1672 >= 0x41 && v1671)
                    {
                      MEMORY[0x1CAA32F9C](v1671, 0x1000C8000313F17);
                      v262 = v1653;
                      if (v1387)
                        goto LABEL_2086;
                    }
                    else
                    {
                      v262 = v1653;
                      if (v1387)
                        goto LABEL_2086;
                    }
                    goto LABEL_727;
                  }
                  v1331 = (llvm::ConstantInt **)v79;
                  v1333 = (char *)operator new(0x80uLL);
                  v7 = (unint64_t)(v1333 + 64);
                  *((_DWORD *)v1333 + 21) = *((_DWORD *)v1333 + 21) & 0x38000000 | 2;
                  *(_QWORD *)v1333 = 0;
                  *((_QWORD *)v1333 + 1) = 0;
                  *((_QWORD *)v1333 + 2) = 0;
                  *((_QWORD *)v1333 + 3) = v1333 + 64;
                  *((_QWORD *)v1333 + 4) = 0;
                  v1334 = (llvm::Value ***)(v1333 + 32);
                  *((_QWORD *)v1333 + 5) = 0;
                  *((_QWORD *)v1333 + 6) = 0;
                  *((_QWORD *)v1333 + 7) = v1333 + 64;
                  v1335 = (const void **)v1687;
                  v1336 = *((unsigned int *)v1687 + 2);
                  v1676 = v1336;
                  if (v1336 > 0x40)
                  {
                    v1363 = ((unint64_t)(v1336 + 63) >> 3) & 0x3FFFFFF8;
                    v1675 = (llvm::Type *)operator new[]();
                    memcpy(v1675, *v1335, v1363);
                    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1675);
                    LODWORD(v1336) = v1676;
                    v1338 = v1675;
                  }
                  else
                  {
                    if ((_DWORD)v1336)
                      v1337 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1336;
                    else
                      v1337 = 0;
                    v1338 = (llvm::Type *)(v1337 & ~(unint64_t)*v1687);
                    v1675 = v1338;
                  }
                  LODWORD(v1695) = v1336;
                  v1694 = (unint64_t)v1338;
                  v1676 = 0;
                  v1364 = llvm::ConstantInt::get(v1331, (llvm::Type *)&v1694, v1332);
                  WORD4(v1691) = 257;
                  sub_1C4774CC4(*__s1);
                  *((_QWORD *)v1333 + 8) = v1365;
                  *((_QWORD *)v1333 + 9) = 0;
                  v1366 = *((_DWORD *)v1333 + 21) & 0xC0000000 | 2;
                  *((_DWORD *)v1333 + 20) = 81;
                  *((_DWORD *)v1333 + 21) = v1366;
                  *(_OWORD *)(v1333 + 88) = 0u;
                  *(_OWORD *)(v1333 + 104) = 0u;
                  *((_DWORD *)v1333 + 30) = 0;
                  if (*(_QWORD *)v1333)
                  {
                    **((_QWORD **)v1333 + 2) = *((_QWORD *)v1333 + 1);
                    v1629 = *((_QWORD *)v1333 + 1);
                    if (v1629)
                      *(_QWORD *)(v1629 + 16) = *((_QWORD *)v1333 + 2);
                  }
                  *(_QWORD *)v1333 = __s1;
                  v1368 = __s1 + 1;
                  v1367 = __s1[1];
                  *((_QWORD *)v1333 + 1) = v1367;
                  if (v1367)
                    *((_QWORD *)v1367 + 2) = v1333 + 8;
                  *((_QWORD *)v1333 + 2) = v1368;
                  *v1368 = v1333;
                  if (*((_QWORD *)v1333 + 4))
                  {
                    **((_QWORD **)v1333 + 6) = *((_QWORD *)v1333 + 5);
                    v1630 = *((_QWORD *)v1333 + 5);
                    if (v1630)
                      *(_QWORD *)(v1630 + 16) = *((_QWORD *)v1333 + 6);
                  }
                  *v1334 = v1364;
                  if (v1364)
                  {
                    v1371 = v1364[1];
                    v1370 = (llvm::Value ****)(v1364 + 1);
                    v1369 = v1371;
                    *((_QWORD *)v1333 + 5) = v1371;
                    if (v1371)
                      *((_QWORD *)v1369 + 2) = v1333 + 40;
                    *((_QWORD *)v1333 + 6) = v1370;
                    *v1370 = v1334;
                  }
                  v1372 = 38;
                  goto LABEL_1945;
                }
                if ((_DWORD)v80 == 38)
                {
                  v269 = (const void **)v1687;
                  v1674 = *((_DWORD *)v1687 + 2);
                  if (v1674 > 0x40)
                  {
                    v1673 = (void *)operator new[]();
                    memcpy(v1673, *v269, (((unint64_t)v1674 + 63) >> 3) & 0x3FFFFFF8);
                  }
                  else
                  {
                    v1673 = *v1687;
                  }
                  llvm::APInt::operator-=((uint64_t)&v1673, 1uLL);
                  v270 = v1674;
                  v271 = v1673;
                  v1674 = 0;
                  v272 = v1653[1].u32[0];
                  if (v272 > 0x40)
                    v273 = memcmp(*(const void **)v1653, v1673, ((unint64_t)(v272 + 63) >> 3) & 0x3FFFFFF8) == 0;
                  else
                    v273 = *v1653 == (_QWORD)v1673;
                  v274 = v273;
                  if (v270 >= 0x41)
                  {
                    if (v271)
                    {
                      MEMORY[0x1CAA32F9C](v271, 0x1000C8000313F17);
                      if (v1674 >= 0x41)
                      {
                        if (v1673)
                          MEMORY[0x1CAA32F9C](v1673, 0x1000C8000313F17);
                      }
                    }
                  }
                  if (!v274)
                  {
                    v268 = 0;
                    v262 = v1653;
                    goto LABEL_719;
                  }
                  v1374 = (char *)operator new(0x80uLL);
                  v7 = (unint64_t)(v1374 + 64);
                  *((_DWORD *)v1374 + 21) = *((_DWORD *)v1374 + 21) & 0x38000000 | 2;
                  *(_QWORD *)v1374 = 0;
                  *((_QWORD *)v1374 + 1) = 0;
                  *((_QWORD *)v1374 + 2) = 0;
                  *((_QWORD *)v1374 + 3) = v1374 + 64;
                  *((_QWORD *)v1374 + 4) = 0;
                  v1375 = (llvm::Value ***)(v1374 + 32);
                  *((_QWORD *)v1374 + 5) = 0;
                  *((_QWORD *)v1374 + 6) = 0;
                  *((_QWORD *)v1374 + 7) = v1374 + 64;
                  if (v252 >= 0x41)
                  {
                    v1423 = v252 + 63;
                    v1377 = (void *)operator new[]();
                    memcpy(v1377, __dst, (v1423 >> 3) & 0x3FFFFFF8);
                    v1424 = 0;
                    v1425 = (unint64_t *)*v1653;
                    v1426 = (unint64_t *)v1377;
                    v1427 = v1423 >> 6;
                    do
                    {
                      v1428 = *v1425++;
                      v1429 = *v1426 - v1428;
                      v1430 = *v1426 < v1428;
                      v1431 = *v1426 + ~v1428;
                      if (v1424)
                      {
                        v1424 = v1431 >= *v1426;
                      }
                      else
                      {
                        v1431 = v1429;
                        v1424 = v1430;
                      }
                      *v1426++ = v1431;
                      --v1427;
                    }
                    while (v1427);
                    *((_QWORD *)v1377 + (v1423 >> 6) - 1) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v252;
                  }
                  else
                  {
                    if (v252)
                      v1376 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v252;
                    else
                      v1376 = 0;
                    v1377 = (void *)(v1376 & ((unint64_t)__dst - *(_QWORD *)v1653));
                  }
                  LODWORD(v1695) = v252;
                  v1694 = (unint64_t)v1377;
                  v1432 = llvm::ConstantInt::get((llvm::ConstantInt **)v79, (llvm::Type *)&v1694, v1373);
                  WORD4(v1691) = 257;
                  sub_1C4774CC4(*__s1);
                  *((_QWORD *)v1374 + 8) = v1433;
                  *((_QWORD *)v1374 + 9) = 0;
                  v1434 = *((_DWORD *)v1374 + 21) & 0xC0000000 | 2;
                  *((_DWORD *)v1374 + 20) = 81;
                  *((_DWORD *)v1374 + 21) = v1434;
                  *(_OWORD *)(v1374 + 88) = 0u;
                  *(_OWORD *)(v1374 + 104) = 0u;
                  *((_DWORD *)v1374 + 30) = 0;
                  if (*(_QWORD *)v1374)
                  {
                    **((_QWORD **)v1374 + 2) = *((_QWORD *)v1374 + 1);
                    v1633 = *((_QWORD *)v1374 + 1);
                    if (v1633)
                      *(_QWORD *)(v1633 + 16) = *((_QWORD *)v1374 + 2);
                  }
                  *(_QWORD *)v1374 = __s1;
                  v1436 = __s1 + 1;
                  v1435 = __s1[1];
                  *((_QWORD *)v1374 + 1) = v1435;
                  if (v1435)
                    *((_QWORD *)v1435 + 2) = v1374 + 8;
                  *((_QWORD *)v1374 + 2) = v1436;
                  *v1436 = v1374;
                  if (*((_QWORD *)v1374 + 4))
                  {
                    **((_QWORD **)v1374 + 6) = *((_QWORD *)v1374 + 5);
                    v1634 = *((_QWORD *)v1374 + 5);
                    if (v1634)
                      *(_QWORD *)(v1634 + 16) = *((_QWORD *)v1374 + 6);
                  }
                  *v1375 = v1432;
                  if (v1432)
                  {
                    v1439 = v1432[1];
                    v1438 = (llvm::Value ****)(v1432 + 1);
                    v1437 = v1439;
                    *((_QWORD *)v1374 + 5) = v1439;
                    if (v1439)
                      *((_QWORD *)v1437 + 2) = v1374 + 40;
                    *((_QWORD *)v1374 + 6) = v1438;
                    *v1438 = v1375;
                  }
                  *((_WORD *)v1374 + 41) = 36;
LABEL_2026:
                  llvm::Value::setName((uint64_t ***)v7, (uint64_t)&v1688);
                  if (v1695 < 0x41)
                    goto LABEL_729;
                  v1128 = (llvm::APInt *)v1694;
                  if (!v1694)
                    goto LABEL_729;
                  goto LABEL_2028;
                }
                if ((_DWORD)v80 != 40)
                {
                  v268 = 0;
                  v262 = v1653;
                  goto LABEL_719;
                }
                v262 = v1653;
                v498 = v1653[1].u32[0];
                if (v498 > 0x40)
                {
                  if (memcmp(*(const void **)v1653, *v1687, ((unint64_t)(v498 + 63) >> 3) & 0x3FFFFFF8))
                    goto LABEL_718;
                }
                else if ((unint64_t *)*v1653 != *v1687)
                {
LABEL_718:
                  v268 = 0;
                  goto LABEL_719;
                }
                v1333 = (char *)operator new(0x80uLL);
                v7 = (unint64_t)(v1333 + 64);
                *((_DWORD *)v1333 + 21) = *((_DWORD *)v1333 + 21) & 0x38000000 | 2;
                *(_QWORD *)v1333 = 0;
                *((_QWORD *)v1333 + 1) = 0;
                *((_QWORD *)v1333 + 4) = 0;
                v1650 = (llvm::Constant *)(v1333 + 32);
                *((_QWORD *)v1333 + 2) = 0;
                *((_QWORD *)v1333 + 3) = v1333 + 64;
                *((_QWORD *)v1333 + 5) = 0;
                *((_QWORD *)v1333 + 6) = 0;
                *((_QWORD *)v1333 + 7) = v1333 + 64;
                v1498 = v1653[1].u32[0];
                if (v1498 > 0x40)
                {
                  v1499 = (void *)operator new[]();
                  memcpy(v1499, *(const void **)v1653, ((unint64_t)(v1498 + 63) >> 3) & 0x3FFFFFF8);
                  v1522 = (uint64_t *)__dst;
                  v1523 = (unint64_t)(v1498 + 63) >> 6;
                  v1524 = v1499;
                  do
                  {
                    v1525 = *v1522++;
                    *v1524++ ^= v1525;
                    --v1523;
                  }
                  while (v1523);
                }
                else
                {
                  v1499 = (void *)((unint64_t)__dst ^ *(_QWORD *)v1653);
                }
                LODWORD(v1695) = v1498;
                v1694 = (unint64_t)v1499;
                v1526 = llvm::ConstantInt::get((llvm::ConstantInt **)v79, (llvm::Type *)&v1694, v1497);
                WORD4(v1691) = 257;
                sub_1C4774CC4(*__s1);
                *((_QWORD *)v1333 + 8) = v1527;
                *((_QWORD *)v1333 + 9) = 0;
                v1528 = *((_DWORD *)v1333 + 21) & 0xC0000000 | 2;
                *((_DWORD *)v1333 + 20) = 81;
                *((_DWORD *)v1333 + 21) = v1528;
                *(_OWORD *)(v1333 + 88) = 0u;
                *(_OWORD *)(v1333 + 104) = 0u;
                *((_DWORD *)v1333 + 30) = 0;
                if (*(_QWORD *)v1333)
                {
                  **((_QWORD **)v1333 + 2) = *((_QWORD *)v1333 + 1);
                  v1641 = *((_QWORD *)v1333 + 1);
                  if (v1641)
                    *(_QWORD *)(v1641 + 16) = *((_QWORD *)v1333 + 2);
                }
                *(_QWORD *)v1333 = __s1;
                v1530 = __s1 + 1;
                v1529 = __s1[1];
                *((_QWORD *)v1333 + 1) = v1529;
                if (v1529)
                  *((_QWORD *)v1529 + 2) = v1333 + 8;
                *((_QWORD *)v1333 + 2) = v1530;
                *v1530 = v1333;
                if (*((_QWORD *)v1333 + 4))
                {
                  **((_QWORD **)v1333 + 6) = *((_QWORD *)v1333 + 5);
                  v1642 = *((_QWORD *)v1333 + 5);
                  if (v1642)
                    *(_QWORD *)(v1642 + 16) = *((_QWORD *)v1333 + 6);
                }
                *(_QWORD *)v1650 = v1526;
                if (v1526)
                {
                  v1533 = v1526[1];
                  v1532 = v1526 + 1;
                  v1531 = v1533;
                  *((_QWORD *)v1333 + 5) = v1533;
                  if (v1533)
                    *((_QWORD *)v1531 + 2) = v1333 + 40;
                  *((_QWORD *)v1333 + 6) = v1532;
                  *v1532 = v1650;
                }
                v1372 = 34;
LABEL_1945:
                *((_WORD *)v1333 + 41) = v1372;
                goto LABEL_2026;
              }
              v389 = (const void **)v1687;
              v390 = *((unsigned int *)v1687 + 2);
              if (v390 >= 0x41)
              {
                v392 = (void *)operator new[]();
                memcpy(v392, *v389, ((unint64_t)(v390 + 63) >> 3) & 0x3FFFFFF8);
                v1406 = 0;
                v1407 = (uint64_t *)__dst;
                v1408 = (unint64_t)(v390 + 63) >> 6;
                v1409 = (unint64_t *)v392;
                v1410 = v1408;
                do
                {
                  v1411 = *v1407++;
                  v1412 = v1411 + *v1409;
                  v1413 = v1412 + 1 <= *v1409;
                  if (v1406)
                  {
                    ++v1412;
                    v1406 = v1413;
                  }
                  else
                  {
                    v1406 = v1412 < *v1409;
                  }
                  *v1409++ = v1412;
                  --v1410;
                }
                while (v1410);
                *((_QWORD *)v392 + (v1408 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v390;
                v262 = v1653;
              }
              else
              {
                v262 = v1653;
                if ((_DWORD)v390)
                  v391 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v390;
                else
                  v391 = 0;
                v392 = (void *)(v391 & ((unint64_t)*v1687 + (_QWORD)__dst));
              }
              v393 = v262[1].u32[0];
              if (v393 > 0x40)
                v394 = memcmp(*(const void **)v262, v392, ((unint64_t)(v393 + 63) >> 3) & 0x3FFFFFF8) == 0;
              else
                v394 = *v262 == (_QWORD)v392;
              v395 = v394;
              if (v390 >= 0x41 && v392)
                MEMORY[0x1CAA32F9C](v392, 0x1000C8000313F17);
              if (!v395)
              {
                v268 = 0;
                goto LABEL_719;
              }
              v1400 = (llvm::ConstantInt **)v79;
              v1401 = (char *)operator new(0x80uLL);
              v7 = (unint64_t)(v1401 + 64);
              *((_DWORD *)v1401 + 21) = *((_DWORD *)v1401 + 21) & 0x38000000 | 2;
              *(_QWORD *)v1401 = 0;
              *((_QWORD *)v1401 + 1) = 0;
              *((_QWORD *)v1401 + 2) = 0;
              *((_QWORD *)v1401 + 3) = v1401 + 64;
              *((_QWORD *)v1401 + 4) = 0;
              v1402 = (llvm::Value ***)(v1401 + 32);
              *((_QWORD *)v1401 + 5) = 0;
              *((_QWORD *)v1401 + 6) = 0;
              *((_QWORD *)v1401 + 7) = v1401 + 64;
              v1403 = (const void **)v1687;
              v1404 = *((unsigned int *)v1687 + 2);
              v1678 = v1404;
              if (v1404 > 0x40)
              {
                v1458 = ((unint64_t)(v1404 + 63) >> 3) & 0x3FFFFFF8;
                v1405 = operator new[]();
                v1677 = (llvm::APInt *)v1405;
                memcpy((void *)v1405, *v1403, v1458);
                LODWORD(v1404) = v1678;
                if (v1678 > 0x40)
                {
                  llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1677);
                  goto LABEL_2068;
                }
              }
              else
              {
                v1405 = (uint64_t)*v1687;
              }
              if ((_DWORD)v1404)
                v1459 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1404;
              else
                v1459 = 0;
              v1677 = (llvm::APInt *)(v1459 & ~v1405);
LABEL_2068:
              llvm::APInt::operator++((uint64_t)&v1677);
              LODWORD(v1695) = v1678;
              v1694 = (unint64_t)v1677;
              v1678 = 0;
              v1461 = llvm::ConstantInt::get(v1400, (llvm::Type *)&v1694, v1460);
              WORD4(v1691) = 257;
              sub_1C4774CC4(*__s1);
              *((_QWORD *)v1401 + 8) = v1462;
              *((_QWORD *)v1401 + 9) = 0;
              v1463 = *((_DWORD *)v1401 + 21) & 0xC0000000 | 2;
              *((_DWORD *)v1401 + 20) = 81;
              *((_DWORD *)v1401 + 21) = v1463;
              *(_OWORD *)(v1401 + 88) = 0u;
              *(_OWORD *)(v1401 + 104) = 0u;
              *((_DWORD *)v1401 + 30) = 0;
              if (*(_QWORD *)v1401)
              {
                **((_QWORD **)v1401 + 2) = *((_QWORD *)v1401 + 1);
                v1637 = *((_QWORD *)v1401 + 1);
                if (v1637)
                  *(_QWORD *)(v1637 + 16) = *((_QWORD *)v1401 + 2);
              }
              *(_QWORD *)v1401 = __s1;
              v1465 = __s1 + 1;
              v1464 = __s1[1];
              *((_QWORD *)v1401 + 1) = v1464;
              if (v1464)
                *((_QWORD *)v1464 + 2) = v1401 + 8;
              *((_QWORD *)v1401 + 2) = v1465;
              *v1465 = v1401;
              if (*((_QWORD *)v1401 + 4))
              {
                **((_QWORD **)v1401 + 6) = *((_QWORD *)v1401 + 5);
                v1638 = *((_QWORD *)v1401 + 5);
                if (v1638)
                  *(_QWORD *)(v1638 + 16) = *((_QWORD *)v1401 + 6);
              }
              *v1402 = v1461;
              if (v1461)
              {
                v1468 = v1461[1];
                v1467 = (llvm::Value ****)(v1461 + 1);
                v1466 = v1468;
                *((_QWORD *)v1401 + 5) = v1468;
                if (v1468)
                  *((_QWORD *)v1466 + 2) = v1401 + 40;
                *((_QWORD *)v1401 + 6) = v1467;
                *v1467 = v1402;
              }
              *((_WORD *)v1401 + 41) = 40;
              llvm::Value::setName((uint64_t ***)v7, (uint64_t)&v1688);
              if (v1695 >= 0x41 && v1694)
                MEMORY[0x1CAA32F9C](v1694, 0x1000C8000313F17);
              if (v1678 < 0x41)
                goto LABEL_729;
              v1128 = v1677;
              if (!v1677)
                goto LABEL_729;
LABEL_2028:
              MEMORY[0x1CAA32F9C](v1128, 0x1000C8000313F17);
LABEL_729:
              if (v257 >= 0x41 && __s2)
                MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
              if (v1682 >= 0x41 && __dst)
                MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
              goto LABEL_731;
            }
          }
          else if (__src)
          {
            goto LABEL_79;
          }
          v1243 = (char *)operator new(0x80uLL);
          v7 = (unint64_t)(v1243 + 64);
          *((_DWORD *)v1243 + 21) = *((_DWORD *)v1243 + 21) & 0x38000000 | 2;
          *(_QWORD *)v1243 = 0;
          *((_QWORD *)v1243 + 1) = 0;
          *((_QWORD *)v1243 + 2) = 0;
          *((_QWORD *)v1243 + 3) = v1243 + 64;
          *((_QWORD *)v1243 + 4) = 0;
          v1301 = (llvm::Value ***)(v1243 + 32);
          *((_QWORD *)v1243 + 5) = 0;
          *((_QWORD *)v1243 + 6) = 0;
          *((_QWORD *)v1243 + 7) = v1243 + 64;
          v1303 = llvm::ConstantInt::get((llvm::ConstantInt **)v79, (llvm::Type *)&v1685, v1302);
          WORD4(v1691) = 257;
          sub_1C4774CC4(*__s1);
          *((_QWORD *)v1243 + 8) = v1304;
          *((_QWORD *)v1243 + 9) = 0;
          v1305 = *((_DWORD *)v1243 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v1243 + 20) = 81;
          *((_DWORD *)v1243 + 21) = v1305;
          *(_OWORD *)(v1243 + 88) = 0u;
          *(_OWORD *)(v1243 + 104) = 0u;
          *((_DWORD *)v1243 + 30) = 0;
          if (*(_QWORD *)v1243)
          {
            **((_QWORD **)v1243 + 2) = *((_QWORD *)v1243 + 1);
            v1621 = *((_QWORD *)v1243 + 1);
            if (v1621)
              *(_QWORD *)(v1621 + 16) = *((_QWORD *)v1243 + 2);
          }
          *(_QWORD *)v1243 = __s1;
          v1307 = __s1 + 1;
          v1306 = __s1[1];
          *((_QWORD *)v1243 + 1) = v1306;
          if (v1306)
            *((_QWORD *)v1306 + 2) = v1243 + 8;
          *((_QWORD *)v1243 + 2) = v1307;
          *v1307 = v1243;
          if (*((_QWORD *)v1243 + 4))
          {
            **((_QWORD **)v1243 + 6) = *((_QWORD *)v1243 + 5);
            v1622 = *((_QWORD *)v1243 + 5);
            if (v1622)
              *(_QWORD *)(v1622 + 16) = *((_QWORD *)v1243 + 6);
          }
          *v1301 = v1303;
          if (v1303)
          {
            v1310 = v1303[1];
            v1309 = (llvm::Value ****)(v1303 + 1);
            v1308 = v1310;
            *((_QWORD *)v1243 + 5) = v1310;
            if (v1310)
              *((_QWORD *)v1308 + 2) = v1243 + 40;
            *((_QWORD *)v1243 + 6) = v1309;
            *v1309 = v1301;
          }
          v1254 = 36;
LABEL_1860:
          *((_WORD *)v1243 + 41) = v1254;
LABEL_1861:
          llvm::Value::setName((uint64_t ***)v7, (uint64_t)&v1688);
LABEL_731:
          if (v1686 >= 0x41 && v1685)
            MEMORY[0x1CAA32F9C](v1685, 0x1000C8000313F17);
          if (v1684[0] >= 0x41 && __src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
          goto LABEL_880;
        }
        if (v1684[0] > 0x40)
        {
          if (((*((_QWORD *)__src + ((v1684[0] - 1) >> 6)) >> (LOBYTE(v1684[0]) - 1)) & 1) == 0
            || (v1242 = v1684[0] - 1,
                llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&__src) != v1242))
          {
LABEL_353:
            if (v1686 > 0x40)
            {
              if (((v1685[(v1686 - 1) >> 6] >> (v1686 - 1)) & 1) == 0)
                goto LABEL_355;
              v1255 = v1686 - 1;
              if (llvm::APInt::countTrailingZerosSlowCase(&v1685) != v1255)
                goto LABEL_355;
            }
            else if (v1685 != (unint64_t *)(1 << (v1686 - 1)))
            {
              goto LABEL_355;
            }
            v1256 = (char *)operator new(0x80uLL);
            v7 = (unint64_t)(v1256 + 64);
            *((_DWORD *)v1256 + 21) = *((_DWORD *)v1256 + 21) & 0x38000000 | 2;
            *(_QWORD *)v1256 = 0;
            *((_QWORD *)v1256 + 1) = 0;
            *((_QWORD *)v1256 + 2) = 0;
            *((_QWORD *)v1256 + 3) = v1256 + 64;
            *((_QWORD *)v1256 + 4) = 0;
            v1257 = (llvm::Value ***)(v1256 + 32);
            *((_QWORD *)v1256 + 5) = 0;
            *((_QWORD *)v1256 + 6) = 0;
            *((_QWORD *)v1256 + 7) = v1256 + 64;
            v1259 = llvm::ConstantInt::get((llvm::ConstantInt **)v79, (llvm::Type *)&__src, v1258);
            WORD4(v1691) = 257;
            sub_1C4774CC4(*__s1);
            *((_QWORD *)v1256 + 8) = v1260;
            *((_QWORD *)v1256 + 9) = 0;
            v1261 = *((_DWORD *)v1256 + 21) & 0xC0000000 | 2;
            *((_DWORD *)v1256 + 20) = 81;
            *((_DWORD *)v1256 + 21) = v1261;
            *(_OWORD *)(v1256 + 88) = 0u;
            *(_OWORD *)(v1256 + 104) = 0u;
            *((_DWORD *)v1256 + 30) = 0;
            if (*(_QWORD *)v1256)
            {
              **((_QWORD **)v1256 + 2) = *((_QWORD *)v1256 + 1);
              v1625 = *((_QWORD *)v1256 + 1);
              if (v1625)
                *(_QWORD *)(v1625 + 16) = *((_QWORD *)v1256 + 2);
            }
            *(_QWORD *)v1256 = __s1;
            v1263 = __s1 + 1;
            v1262 = __s1[1];
            *((_QWORD *)v1256 + 1) = v1262;
            if (v1262)
              *((_QWORD *)v1262 + 2) = v1256 + 8;
            *((_QWORD *)v1256 + 2) = v1263;
            *v1263 = v1256;
            if (*((_QWORD *)v1256 + 4))
            {
              **((_QWORD **)v1256 + 6) = *((_QWORD *)v1256 + 5);
              v1626 = *((_QWORD *)v1256 + 5);
              if (v1626)
                *(_QWORD *)(v1626 + 16) = *((_QWORD *)v1256 + 6);
            }
            *v1257 = v1259;
            if (v1259)
            {
              v1266 = v1259[1];
              v1265 = (llvm::Value ****)(v1259 + 1);
              v1264 = v1266;
              *((_QWORD *)v1256 + 5) = v1266;
              if (v1266)
                *((_QWORD *)v1264 + 2) = v1256 + 40;
              *((_QWORD *)v1256 + 6) = v1265;
              *v1265 = v1257;
            }
            v1267 = 39;
            goto LABEL_1877;
          }
        }
        else if (__src != (void *)(1 << (LOBYTE(v1684[0]) - 1)))
        {
          goto LABEL_353;
        }
        v1243 = (char *)operator new(0x80uLL);
        v7 = (unint64_t)(v1243 + 64);
        *((_DWORD *)v1243 + 21) = *((_DWORD *)v1243 + 21) & 0x38000000 | 2;
        *(_QWORD *)v1243 = 0;
        *((_QWORD *)v1243 + 1) = 0;
        *((_QWORD *)v1243 + 2) = 0;
        *((_QWORD *)v1243 + 3) = v1243 + 64;
        *((_QWORD *)v1243 + 4) = 0;
        v1244 = (llvm::Value ***)(v1243 + 32);
        *((_QWORD *)v1243 + 5) = 0;
        *((_QWORD *)v1243 + 6) = 0;
        *((_QWORD *)v1243 + 7) = v1243 + 64;
        v1246 = llvm::ConstantInt::get((llvm::ConstantInt **)v79, (llvm::Type *)&v1685, v1245);
        WORD4(v1691) = 257;
        sub_1C4774CC4(*__s1);
        *((_QWORD *)v1243 + 8) = v1247;
        *((_QWORD *)v1243 + 9) = 0;
        v1248 = *((_DWORD *)v1243 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v1243 + 20) = 81;
        *((_DWORD *)v1243 + 21) = v1248;
        *(_OWORD *)(v1243 + 88) = 0u;
        *(_OWORD *)(v1243 + 104) = 0u;
        *((_DWORD *)v1243 + 30) = 0;
        if (*(_QWORD *)v1243)
        {
          **((_QWORD **)v1243 + 2) = *((_QWORD *)v1243 + 1);
          v1623 = *((_QWORD *)v1243 + 1);
          if (v1623)
            *(_QWORD *)(v1623 + 16) = *((_QWORD *)v1243 + 2);
        }
        *(_QWORD *)v1243 = __s1;
        v1250 = __s1 + 1;
        v1249 = __s1[1];
        *((_QWORD *)v1243 + 1) = v1249;
        if (v1249)
          *((_QWORD *)v1249 + 2) = v1243 + 8;
        *((_QWORD *)v1243 + 2) = v1250;
        *v1250 = v1243;
        if (*((_QWORD *)v1243 + 4))
        {
          **((_QWORD **)v1243 + 6) = *((_QWORD *)v1243 + 5);
          v1624 = *((_QWORD *)v1243 + 5);
          if (v1624)
            *(_QWORD *)(v1624 + 16) = *((_QWORD *)v1243 + 6);
        }
        *v1244 = v1246;
        if (v1246)
        {
          v1253 = v1246[1];
          v1252 = (llvm::Value ****)(v1246 + 1);
          v1251 = v1253;
          *((_QWORD *)v1243 + 5) = v1253;
          if (v1253)
            *((_QWORD *)v1251 + 2) = v1243 + 40;
          *((_QWORD *)v1243 + 6) = v1252;
          *v1252 = v1244;
        }
        v1254 = 40;
        goto LABEL_1860;
      }
LABEL_880:
      a1 = *(_QWORD **)v1655;
      if (v7)
        return v7;
      goto LABEL_881;
    case '+':
      v81 = v1658;
      v82 = (unsigned __int8 *)*(v8 - 8);
      v83 = (uint64_t)*(v8 - 4);
      v84 = *(_WORD *)(a2 + 18) & 0x3F;
      v85 = (llvm::ConstantInt **)*v8;
      if ((*(_WORD *)(a2 + 18) & 0x3E) != 0x20
        || ((v86 = v82[16], v86 != 5) ? (v87 = v82 == 0) : (v87 = 1), !v87 ? (v88 = v86 > 0x14) : (v88 = 1), v88))
      {
        v1669 = 0;
        v1684[0] = 1;
        __src = 0;
        __asm { BR              X9 }
      }
      v116 = (char *)operator new(0x80uLL);
      v7 = (unint64_t)(v116 + 64);
      *((_DWORD *)v116 + 21) = *((_DWORD *)v116 + 21) & 0x38000000 | 2;
      *(_QWORD *)v116 = 0;
      *((_QWORD *)v116 + 1) = 0;
      *((_QWORD *)v116 + 2) = 0;
      *((_QWORD *)v116 + 3) = v116 + 64;
      *((_QWORD *)v116 + 4) = 0;
      v117 = (llvm::ValueHandleBase **)(v116 + 32);
      *((_QWORD *)v116 + 5) = 0;
      *((_QWORD *)v116 + 6) = 0;
      *((_QWORD *)v116 + 7) = v116 + 64;
      v119 = llvm::ConstantInt::get(v85, v81, v118);
      Sub = llvm::ConstantExpr::getSub((llvm::ConstantExpr *)v82, (llvm::Constant *)v119, 0, 0);
      WORD4(v1691) = 257;
      sub_1C4774CC4(*(_DWORD **)v83);
      *((_QWORD *)v116 + 8) = v121;
      *((_QWORD *)v116 + 9) = 0;
      v122 = *((_DWORD *)v116 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v116 + 20) = 81;
      *((_DWORD *)v116 + 21) = v122;
      *(_OWORD *)(v116 + 88) = 0u;
      *(_OWORD *)(v116 + 104) = 0u;
      *((_DWORD *)v116 + 30) = 0;
      if (*(_QWORD *)v116)
      {
        **((_QWORD **)v116 + 2) = *((_QWORD *)v116 + 1);
        v1278 = *((_QWORD *)v116 + 1);
        if (v1278)
          *(_QWORD *)(v1278 + 16) = *((_QWORD *)v116 + 2);
      }
      *(_QWORD *)v116 = v83;
      v125 = *(_QWORD *)(v83 + 8);
      v124 = (_QWORD *)(v83 + 8);
      v123 = v125;
      *((_QWORD *)v116 + 1) = v125;
      if (v125)
        *(_QWORD *)(v123 + 16) = v116 + 8;
      *((_QWORD *)v116 + 2) = v124;
      *v124 = v116;
      if (*((_QWORD *)v116 + 4))
      {
        **((_QWORD **)v116 + 6) = *((_QWORD *)v116 + 5);
        v1279 = *((_QWORD *)v116 + 5);
        if (v1279)
          *(_QWORD *)(v1279 + 16) = *((_QWORD *)v116 + 6);
      }
      *v117 = Sub;
      if (Sub)
      {
        v128 = *((_QWORD *)Sub + 1);
        v127 = (llvm::ValueHandleBase ***)((char *)Sub + 8);
        v126 = v128;
        *((_QWORD *)v116 + 5) = v128;
        if (v128)
          *(_QWORD *)(v126 + 16) = v116 + 40;
        *((_QWORD *)v116 + 6) = v127;
        *v127 = v117;
      }
      *((_WORD *)v116 + 41) = v84;
      goto LABEL_998;
    case '-':
      v39 = v1658;
      v1694 = 0;
      v40 = (unsigned __int8 *)*(v8 - 4);
      v1688 = (unint64_t)&v1694;
      p_src = 0;
      if ((sub_1C4D89F84((uint64_t)&v1688, v40) & 1) == 0)
        goto LABEL_881;
      v41 = *(_WORD *)(a2 + 18);
      LODWORD(__src) = v41 & 0x3F;
      if (sub_1C57EDDE8((int *)&__src, v39) && (*((_BYTE *)v8 + 17) & 4) != 0)
      {
        v129 = (_QWORD *)v1694;
        v130 = *(_DWORD *)(v1694 + 8);
        v131 = v130 - 1;
        if (v130 >= 0x41)
          v129 = (_QWORD *)(*(_QWORD *)v1694 + 8 * (v131 >> 6));
        LOWORD(v132) = (_WORD)__src;
        if (((*v129 >> v131) & 1) != 0)
          v132 = dword_1C86618B4[(int)__src];
        v133 = (char *)operator new(0x80uLL);
        v7 = (unint64_t)(v133 + 64);
        *((_DWORD *)v133 + 21) = *((_DWORD *)v133 + 21) & 0x38000000 | 2;
        *(_QWORD *)v133 = 0;
        *((_QWORD *)v133 + 1) = 0;
        *((_QWORD *)v133 + 4) = 0;
        v134 = (llvm::Value ***)(v133 + 32);
        *((_QWORD *)v133 + 2) = 0;
        *((_QWORD *)v133 + 3) = v133 + 64;
        *((_QWORD *)v133 + 5) = 0;
        *((_QWORD *)v133 + 6) = 0;
        *((_QWORD *)v133 + 7) = v133 + 64;
        v135 = (uint64_t)*(v8 - 8);
        v137 = llvm::Constant::getNullValue((llvm::Constant *)*v8, v136);
        WORD4(v1691) = 257;
        sub_1C4774CC4(*(_DWORD **)v135);
        *((_QWORD *)v133 + 8) = v138;
        *((_QWORD *)v133 + 9) = 0;
        v139 = *((_DWORD *)v133 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v133 + 20) = 81;
        *((_DWORD *)v133 + 21) = v139;
        *(_OWORD *)(v133 + 88) = 0u;
        *(_OWORD *)(v133 + 104) = 0u;
        *((_DWORD *)v133 + 30) = 0;
        if (*(_QWORD *)v133)
        {
          **((_QWORD **)v133 + 2) = *((_QWORD *)v133 + 1);
          v1282 = *((_QWORD *)v133 + 1);
          if (v1282)
            *(_QWORD *)(v1282 + 16) = *((_QWORD *)v133 + 2);
        }
        *(_QWORD *)v133 = v135;
        v142 = *(_QWORD *)(v135 + 8);
        v141 = (_QWORD *)(v135 + 8);
        v140 = v142;
        *((_QWORD *)v133 + 1) = v142;
        if (v142)
          *(_QWORD *)(v140 + 16) = v133 + 8;
        *((_QWORD *)v133 + 2) = v141;
        *v141 = v133;
        if (*((_QWORD *)v133 + 4))
        {
          **((_QWORD **)v133 + 6) = *((_QWORD *)v133 + 5);
          v1283 = *((_QWORD *)v133 + 5);
          if (v1283)
            *(_QWORD *)(v1283 + 16) = *((_QWORD *)v133 + 6);
        }
        *v134 = v137;
        if (v137)
        {
          v145 = v137[1];
          v144 = (llvm::Value ****)(v137 + 1);
          v143 = v145;
          *((_QWORD *)v133 + 5) = v145;
          if (v145)
            *((_QWORD *)v143 + 2) = v133 + 40;
          *((_QWORD *)v133 + 6) = v144;
          *v144 = v134;
        }
        *((_WORD *)v133 + 41) = v132;
        goto LABEL_998;
      }
      if ((v41 & 0x3E) != 0x20)
        goto LABEL_881;
      v42 = (const void **)v1694;
      v43 = *(_DWORD *)(v1694 + 8);
      if (v43 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v1694) == v43)
          goto LABEL_881;
      }
      else if (!*(_QWORD *)v1694)
      {
        goto LABEL_881;
      }
      if ((*((_BYTE *)v8 + 17) & 4) == 0)
        goto LABEL_194;
      llvm::APInt::srem(v39, v42, (llvm::APInt *)&v1688);
      v160 = (int)p_src;
      if (p_src > 0x40)
      {
        v236 = 0;
        v237 = ((unint64_t)p_src + 63) >> 6;
        do
        {
          v88 = v237-- < 1;
          if (v88)
            break;
          v238 = *(_QWORD *)(v1688 + 8 * v237);
          v236 += __clz(v238);
        }
        while (!v238);
        v239 = p_src | 0xFFFFFFC0;
        if ((p_src & 0x3F) == 0)
          v239 = 0;
        v240 = v236 + v239;
        if (v1688)
          MEMORY[0x1CAA32F9C](v1688, 0x1000C8000313F17);
        if (v240 != v160)
          goto LABEL_194;
      }
      else if (v1688)
      {
LABEL_194:
        if ((*((_BYTE *)v8 + 17) & 2) == 0)
          goto LABEL_881;
        llvm::APInt::urem(v39, (const llvm::APInt *)v1694, (llvm::APInt *)&v1688);
        v161 = (int)p_src;
        if (p_src <= 0x40)
        {
          if (v1688)
            goto LABEL_881;
          goto LABEL_447;
        }
        v315 = 0;
        v316 = ((unint64_t)p_src + 63) >> 6;
        do
        {
          v88 = v316-- < 1;
          if (v88)
            break;
          v317 = *(_QWORD *)(v1688 + 8 * v316);
          v315 += __clz(v317);
        }
        while (!v317);
        v318 = p_src | 0xFFFFFFC0;
        if ((p_src & 0x3F) == 0)
          v318 = 0;
        v319 = v315 + v318;
        if (v1688)
          MEMORY[0x1CAA32F9C](v1688, 0x1000C8000313F17);
        if (v319 == v161)
        {
LABEL_447:
          v241 = (llvm::Constant *)*v8;
          llvm::APInt::udiv(v39, (const llvm::APInt *)v1694, (llvm::APInt *)&v1688);
LABEL_448:
          v320 = llvm::ConstantInt::get((llvm::ConstantInt **)v241, (llvm::Type *)&v1688, v242);
          if (p_src >= 0x41 && v1688)
            MEMORY[0x1CAA32F9C](v1688, 0x1000C8000313F17);
          v321 = (char *)operator new(0x80uLL);
          v7 = (unint64_t)(v321 + 64);
          *((_DWORD *)v321 + 21) = *((_DWORD *)v321 + 21) & 0x38000000 | 2;
          *(_QWORD *)v321 = 0;
          *((_QWORD *)v321 + 1) = 0;
          *((_QWORD *)v321 + 2) = 0;
          *((_QWORD *)v321 + 3) = v321 + 64;
          *((_QWORD *)v321 + 4) = 0;
          v322 = (llvm::Value ***)(v321 + 32);
          *((_QWORD *)v321 + 5) = 0;
          *((_QWORD *)v321 + 6) = 0;
          *((_QWORD *)v321 + 7) = v321 + 64;
          v323 = (__int16)__src;
          v324 = (uint64_t)*(v8 - 8);
          WORD4(v1691) = 257;
          sub_1C4774CC4(*(_DWORD **)v324);
          *((_QWORD *)v321 + 8) = v325;
          *((_QWORD *)v321 + 9) = 0;
          v326 = *((_DWORD *)v321 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v321 + 20) = 81;
          *((_DWORD *)v321 + 21) = v326;
          *(_OWORD *)(v321 + 88) = 0u;
          *(_OWORD *)(v321 + 104) = 0u;
          *((_DWORD *)v321 + 30) = 0;
          if (*(_QWORD *)v321)
          {
            **((_QWORD **)v321 + 2) = *((_QWORD *)v321 + 1);
            v1329 = *((_QWORD *)v321 + 1);
            if (v1329)
              *(_QWORD *)(v1329 + 16) = *((_QWORD *)v321 + 2);
          }
          *(_QWORD *)v321 = v324;
          v329 = *(_QWORD *)(v324 + 8);
          v328 = (_QWORD *)(v324 + 8);
          v327 = v329;
          *((_QWORD *)v321 + 1) = v329;
          if (v329)
            *(_QWORD *)(v327 + 16) = v321 + 8;
          *((_QWORD *)v321 + 2) = v328;
          *v328 = v321;
          if (*((_QWORD *)v321 + 4))
          {
            **((_QWORD **)v321 + 6) = *((_QWORD *)v321 + 5);
            v1330 = *((_QWORD *)v321 + 5);
            if (v1330)
              *(_QWORD *)(v1330 + 16) = *((_QWORD *)v321 + 6);
          }
          *v322 = v320;
          if (v320)
          {
            v332 = v320[1];
            v331 = (llvm::Value ****)(v320 + 1);
            v330 = v332;
            *((_QWORD *)v321 + 5) = v332;
            if (v332)
              *((_QWORD *)v330 + 2) = v321 + 40;
            *((_QWORD *)v321 + 6) = v331;
            *v331 = v322;
          }
          *((_WORD *)v321 + 41) = v323;
          goto LABEL_998;
        }
LABEL_881:
        v600 = *(_WORD *)(a2 + 18);
        if ((v600 & 0x3E) == 0x20)
        {
          v601 = (int8x8_t *)v1658;
          v602 = v600 & 0x3F;
          v603 = *(llvm::Constant ***)(a2 - 32);
          v604 = (_DWORD **)*(v8 - 8);
          v605 = (uint64_t)*(v8 - 4);
          switch(*((_BYTE *)v8 + 16))
          {
            case '/':
              v606 = *((_DWORD *)v1658 + 2);
              if (v606 > 0x40)
              {
                if (llvm::APInt::countLeadingZerosSlowCase(v1658) != v606)
                  goto LABEL_1020;
              }
              else if (*(_QWORD *)v1658)
              {
                goto LABEL_1020;
              }
              v25 = (char *)operator new(0x80uLL);
              v7 = (unint64_t)(v25 + 64);
              *((_DWORD *)v25 + 21) = *((_DWORD *)v25 + 21) & 0x38000000 | 2;
              *(_QWORD *)v25 = 0;
              *((_QWORD *)v25 + 1) = 0;
              *((_QWORD *)v25 + 2) = 0;
              *((_QWORD *)v25 + 3) = v25 + 64;
              *((_QWORD *)v25 + 4) = 0;
              v631 = v25 + 32;
              *((_QWORD *)v25 + 5) = 0;
              *((_QWORD *)v25 + 6) = 0;
              *((_QWORD *)v25 + 7) = v25 + 64;
              WORD4(v1691) = 257;
              sub_1C4774CC4(*(_DWORD **)v605);
              *((_QWORD *)v25 + 8) = v632;
              *((_QWORD *)v25 + 9) = 0;
              v633 = *((_DWORD *)v25 + 21) & 0xC0000000 | 2;
              *((_DWORD *)v25 + 20) = 81;
              *((_DWORD *)v25 + 21) = v633;
              *(_OWORD *)(v25 + 88) = 0u;
              *(_OWORD *)(v25 + 104) = 0u;
              *((_DWORD *)v25 + 30) = 0;
              if (*(_QWORD *)v25)
              {
                **((_QWORD **)v25 + 2) = *((_QWORD *)v25 + 1);
                v1276 = *((_QWORD *)v25 + 1);
                if (v1276)
                  *(_QWORD *)(v1276 + 16) = *((_QWORD *)v25 + 2);
              }
              *(_QWORD *)v25 = v605;
              v636 = *(_QWORD *)(v605 + 8);
              v635 = (_QWORD *)(v605 + 8);
              v634 = v636;
              *((_QWORD *)v25 + 1) = v636;
              if (v636)
                *(_QWORD *)(v634 + 16) = v25 + 8;
              *((_QWORD *)v25 + 2) = v635;
              *v635 = v25;
              if (*((_QWORD *)v25 + 4))
              {
                **((_QWORD **)v25 + 6) = *((_QWORD *)v25 + 5);
                v1277 = *((_QWORD *)v25 + 5);
                if (v1277)
                  *(_QWORD *)(v1277 + 16) = *((_QWORD *)v25 + 6);
              }
              *v631 = v604;
              if (v604)
              {
                v639 = v604[1];
                v638 = v604 + 1;
                v637 = v639;
                *((_QWORD *)v25 + 5) = v639;
                if (v639)
                  *((_QWORD *)v637 + 2) = v25 + 40;
                *((_QWORD *)v25 + 6) = v638;
                *v638 = v631;
              }
              v208 = v602 == 33;
              goto LABEL_931;
            case '0':
            case '1':
            case '2':
            case '4':
            case '5':
            case '6':
            case '7':
              goto LABEL_1020;
            case '3':
              v617 = *((_DWORD *)v1658 + 2);
              if (v617 > 0x40)
              {
                if (llvm::APInt::countLeadingZerosSlowCase(v1658) != v617)
                  goto LABEL_1020;
              }
              else if (*(_QWORD *)v1658)
              {
                goto LABEL_1020;
              }
              v640 = v8[1];
              if (!v640)
                goto LABEL_1020;
              if (v640[1])
                goto LABEL_1020;
              v1694 = 0;
              v1688 = (unint64_t)&v1694;
              p_src = 0;
              if (!sub_1C4D89F84((uint64_t)&v1688, (unsigned __int8 *)v605)
                || !sub_1C4DA92C4((llvm::APInt *)v1694, 1))
              {
                goto LABEL_1020;
              }
              v641 = *(unsigned int *)(v1694 + 8);
              if (v641 > 0x40)
              {
                v709 = 0;
                v710 = (unint64_t)(v641 + 63) >> 6;
                v711 = *(int8x8_t **)v1694;
                do
                {
                  v712 = *v711++;
                  v713 = (uint8x8_t)vcnt_s8(v712);
                  v713.i16[0] = vaddlv_u8(v713);
                  v709 += v713.i32[0];
                  --v710;
                }
                while (v710);
                if (v709 != 1)
                  goto LABEL_1020;
              }
              else if (!*(_QWORD *)v1694 || (*(_QWORD *)v1694 & (*(_QWORD *)v1694 - 1)) != 0)
              {
                goto LABEL_1020;
              }
              v714 = (uint64_t *)a1[3];
              if ((*((_BYTE *)v8 + 23) & 0x10) != 0)
              {
                v715 = ***v8;
                v716 = *(_QWORD *)(v715 + 152);
                v717 = *(unsigned int *)(v715 + 168);
                if ((_DWORD)v717)
                {
                  LODWORD(v718) = (v717 - 1) & ((v8 >> 4) ^ (v8 >> 9));
                  v719 = (uint64_t ****)(v716 + 16 * v718);
                  v720 = *v719;
                  if (*v719 != v8)
                  {
                    v721 = 1;
                    do
                    {
                      if (v720 == (uint64_t ***)-4096)
                        goto LABEL_1358;
                      v722 = v718 + v721++;
                      v718 = v722 & (v717 - 1);
                      v720 = *(uint64_t ****)(v716 + 16 * v718);
                    }
                    while (v720 != v8);
                    v719 = (uint64_t ****)(v716 + 16 * v718);
                  }
                }
                else
                {
LABEL_1358:
                  v719 = (uint64_t ****)(v716 + 16 * v717);
                }
                v948 = v719[1];
                v951 = (unint64_t *)*v948;
                v949 = (char *)(v948 + 2);
                v950 = v951;
                goto LABEL_1360;
              }
              v950 = 0;
              v949 = &byte_1C871356D;
LABEL_1360:
              WORD4(v1691) = 261;
              v1688 = (unint64_t)v949;
              p_src = v950;
              v621 = (uint64_t)sub_1C538EDCC(v714, v604, v605, (uint64_t)&v1688);
              v610 = (char *)operator new(0x80uLL);
              v7 = (unint64_t)(v610 + 64);
              *((_DWORD *)v610 + 21) = *((_DWORD *)v610 + 21) & 0x38000000 | 2;
              *(_QWORD *)v610 = 0;
              *((_QWORD *)v610 + 1) = 0;
              *((_QWORD *)v610 + 2) = 0;
              *((_QWORD *)v610 + 3) = v610 + 64;
              *((_QWORD *)v610 + 4) = 0;
              v622 = (uint64_t *)(v610 + 32);
              *((_QWORD *)v610 + 5) = 0;
              *((_QWORD *)v610 + 6) = 0;
              *((_QWORD *)v610 + 7) = v610 + 64;
              Not = (uint64_t)llvm::Constant::getNullValue((llvm::Constant *)*v8, v952);
              WORD4(v1691) = 257;
LABEL_913:
              sub_1C4774CC4(*(_DWORD **)v621);
              *((_QWORD *)v610 + 8) = v623;
              *((_QWORD *)v610 + 9) = 0;
              v624 = *((_DWORD *)v610 + 21) & 0xC0000000 | 2;
              *((_DWORD *)v610 + 20) = 81;
              *((_DWORD *)v610 + 21) = v624;
              *(_OWORD *)(v610 + 88) = 0u;
              *(_OWORD *)(v610 + 104) = 0u;
              *((_DWORD *)v610 + 30) = 0;
              if (*(_QWORD *)v610)
              {
                **((_QWORD **)v610 + 2) = *((_QWORD *)v610 + 1);
                v1325 = *((_QWORD *)v610 + 1);
                if (v1325)
                  *(_QWORD *)(v1325 + 16) = *((_QWORD *)v610 + 2);
              }
              *(_QWORD *)v610 = v621;
              v627 = *(_QWORD *)(v621 + 8);
              v626 = (_QWORD *)(v621 + 8);
              v625 = v627;
              *((_QWORD *)v610 + 1) = v627;
              if (v627)
                *(_QWORD *)(v625 + 16) = v610 + 8;
              *((_QWORD *)v610 + 2) = v626;
              *v626 = v610;
              if (*((_QWORD *)v610 + 4))
              {
                **((_QWORD **)v610 + 6) = *((_QWORD *)v610 + 5);
                v1326 = *((_QWORD *)v610 + 5);
                if (v1326)
                  *(_QWORD *)(v1326 + 16) = *((_QWORD *)v610 + 6);
              }
              *v622 = Not;
              if (Not)
              {
                v630 = *(_QWORD *)(Not + 8);
                v629 = (uint64_t **)(Not + 8);
                v628 = v630;
                *((_QWORD *)v610 + 5) = v630;
                if (v630)
                  *(_QWORD *)(v628 + 16) = v610 + 40;
                *((_QWORD *)v610 + 6) = v629;
                *v629 = v622;
              }
LABEL_997:
              *((_WORD *)v610 + 41) = v602;
              break;
            case '8':
              v1694 = 0;
              v1688 = (unint64_t)&v1694;
              p_src = 0;
              if (!sub_1C4D89F84((uint64_t)&v1688, (unsigned __int8 *)v605))
                goto LABEL_1020;
              v615 = v601[1].u32[0];
              if (v615 > 0x40)
              {
                v652 = (int8x8_t *)*v601;
                v653 = v615 + 63;
                if (memcmp(v652, *(const void **)v1694, ((unint64_t)(v615 + 63) >> 3) & 0x3FFFFFF8))
                  goto LABEL_1020;
                v654 = 0;
                v655 = v653 >> 6;
                do
                {
                  v656 = *v652++;
                  v657 = (uint8x8_t)vcnt_s8(v656);
                  v657.i16[0] = vaddlv_u8(v657);
                  v654 += v657.i32[0];
                  --v655;
                }
                while (v655);
                if (v654 != 1)
                  goto LABEL_1020;
              }
              else
              {
                if (*v601 != *(_QWORD *)v1694)
                  goto LABEL_1020;
                v616 = (uint8x8_t)vcnt_s8(*v601);
                v616.i16[0] = vaddlv_u8(v616);
                if (v616.u32[0] != 1)
                  goto LABEL_1020;
              }
              v25 = (char *)operator new(0x80uLL);
              v7 = (unint64_t)(v25 + 64);
              *((_DWORD *)v25 + 21) = *((_DWORD *)v25 + 21) & 0x38000000 | 2;
              *(_QWORD *)v25 = 0;
              *((_QWORD *)v25 + 1) = 0;
              *((_QWORD *)v25 + 2) = 0;
              *((_QWORD *)v25 + 3) = v25 + 64;
              *((_QWORD *)v25 + 4) = 0;
              v658 = (llvm::Value ***)(v25 + 32);
              *((_QWORD *)v25 + 5) = 0;
              *((_QWORD *)v25 + 6) = 0;
              *((_QWORD *)v25 + 7) = v25 + 64;
              v660 = llvm::Constant::getNullValue(*v603, v659);
              WORD4(v1691) = 257;
              sub_1C4774CC4(*v8);
              *((_QWORD *)v25 + 8) = v661;
              *((_QWORD *)v25 + 9) = 0;
              v662 = *((_DWORD *)v25 + 21) & 0xC0000000 | 2;
              *((_DWORD *)v25 + 20) = 81;
              *((_DWORD *)v25 + 21) = v662;
              *(_OWORD *)(v25 + 88) = 0u;
              *(_OWORD *)(v25 + 104) = 0u;
              *((_DWORD *)v25 + 30) = 0;
              if (*(_QWORD *)v25)
              {
                **((_QWORD **)v25 + 2) = *((_QWORD *)v25 + 1);
                v1284 = *((_QWORD *)v25 + 1);
                if (v1284)
                  *(_QWORD *)(v1284 + 16) = *((_QWORD *)v25 + 2);
              }
              *(_QWORD *)v25 = v8;
              v665 = v8[1];
              v664 = v8 + 1;
              v663 = v665;
              *((_QWORD *)v25 + 1) = v665;
              if (v665)
                v663[2] = (uint64_t *)(v25 + 8);
              *((_QWORD *)v25 + 2) = v664;
              *v664 = v25;
              if (*((_QWORD *)v25 + 4))
              {
                **((_QWORD **)v25 + 6) = *((_QWORD *)v25 + 5);
                v1285 = *((_QWORD *)v25 + 5);
                if (v1285)
                  *(_QWORD *)(v1285 + 16) = *((_QWORD *)v25 + 6);
              }
              *v658 = v660;
              if (v660)
              {
                v668 = v660[1];
                v667 = (llvm::Value ****)(v660 + 1);
                v666 = v668;
                *((_QWORD *)v25 + 5) = v668;
                if (v668)
                  *((_QWORD *)v666 + 2) = v25 + 40;
                *((_QWORD *)v25 + 6) = v667;
                *v667 = v658;
              }
              if (v602 == 33)
                v38 = 32;
              else
                v38 = 33;
              goto LABEL_970;
            case '9':
              v1694 = 0;
              v1688 = (unint64_t)&v1694;
              p_src = 0;
              if (!sub_1C4D89F84((uint64_t)&v1688, (unsigned __int8 *)v605))
                goto LABEL_1020;
              v618 = v8[1];
              if (!v618 || v618[1] || !llvm::Constant::isAllOnesValue((llvm::Constant *)v603))
                goto LABEL_1020;
              Not = llvm::ConstantExpr::getNot((llvm::Constant **)v605, (llvm::Constant *)v5);
              v620 = a1[3];
              WORD4(v1691) = 257;
              v621 = sub_1C4D89BCC(v620, v604, Not, (uint64_t)&v1688);
              v610 = (char *)operator new(0x80uLL);
              v7 = (unint64_t)(v610 + 64);
              *((_DWORD *)v610 + 21) = *((_DWORD *)v610 + 21) & 0x38000000 | 2;
              *(_QWORD *)v610 = 0;
              *((_QWORD *)v610 + 1) = 0;
              *((_QWORD *)v610 + 4) = 0;
              v622 = (uint64_t *)(v610 + 32);
              *((_QWORD *)v610 + 2) = 0;
              *((_QWORD *)v610 + 3) = v610 + 64;
              *((_QWORD *)v610 + 5) = 0;
              *((_QWORD *)v610 + 6) = 0;
              *((_QWORD *)v610 + 7) = v610 + 64;
              WORD4(v1691) = 257;
              goto LABEL_913;
            case ':':
              v609 = v8[1];
              if (!v609 || v609[1])
                goto LABEL_1020;
              if (*(unsigned __int8 *)(v605 + 16) <= 0x14u && v605)
              {
                v610 = (char *)operator new(0x80uLL);
                v7 = (unint64_t)(v610 + 64);
                *((_DWORD *)v610 + 21) = *((_DWORD *)v610 + 21) & 0x38000000 | 2;
                *(_QWORD *)v610 = 0;
                *((_QWORD *)v610 + 1) = 0;
                *((_QWORD *)v610 + 2) = 0;
                *((_QWORD *)v610 + 3) = v610 + 64;
                *((_QWORD *)v610 + 4) = 0;
                v611 = (uint64_t *)(v610 + 32);
                *((_QWORD *)v610 + 5) = 0;
                *((_QWORD *)v610 + 6) = 0;
                *((_QWORD *)v610 + 7) = v610 + 64;
                Xor = llvm::ConstantExpr::getXor((llvm::ConstantExpr *)v603, (llvm::Constant *)v605, v612, v613);
                goto LABEL_947;
              }
              v679 = *((_DWORD *)v1658 + 2);
              if (v679 > 0x40)
              {
                if (llvm::APInt::countLeadingZerosSlowCase(v1658) != v679)
                  goto LABEL_1020;
              }
              else if (*(_QWORD *)v1658)
              {
                goto LABEL_1020;
              }
              v610 = (char *)operator new(0x80uLL);
              v7 = (unint64_t)(v610 + 64);
              *((_DWORD *)v610 + 21) = *((_DWORD *)v610 + 21) & 0x38000000 | 2;
              *(_QWORD *)v610 = 0;
              *((_QWORD *)v610 + 1) = 0;
              *((_QWORD *)v610 + 2) = 0;
              *((_QWORD *)v610 + 3) = v610 + 64;
              *((_QWORD *)v610 + 4) = 0;
              v682 = v610 + 32;
              *((_QWORD *)v610 + 5) = 0;
              *((_QWORD *)v610 + 6) = 0;
              *((_QWORD *)v610 + 7) = v610 + 64;
              WORD4(v1691) = 257;
              sub_1C4774CC4(*v604);
              *((_QWORD *)v610 + 8) = v688;
              *((_QWORD *)v610 + 9) = 0;
              v689 = *((_DWORD *)v610 + 21) & 0xC0000000 | 2;
              *((_DWORD *)v610 + 20) = 81;
              *((_DWORD *)v610 + 21) = v689;
              *(_OWORD *)(v610 + 88) = 0u;
              *(_OWORD *)(v610 + 104) = 0u;
              *((_DWORD *)v610 + 30) = 0;
              if (*(_QWORD *)v610)
              {
                **((_QWORD **)v610 + 2) = *((_QWORD *)v610 + 1);
                v1351 = *((_QWORD *)v610 + 1);
                if (v1351)
                  *(_QWORD *)(v1351 + 16) = *((_QWORD *)v610 + 2);
              }
              *(_QWORD *)v610 = v604;
              v692 = v604[1];
              v691 = v604 + 1;
              v690 = v692;
              *((_QWORD *)v610 + 1) = v692;
              if (v692)
                *((_QWORD *)v690 + 2) = v610 + 8;
              *((_QWORD *)v610 + 2) = v691;
              *v691 = v610;
              goto LABEL_993;
            default:
              if (*((_BYTE *)v8 + 16) != 41)
                goto LABEL_1020;
              if (*(unsigned __int8 *)(v605 + 16) <= 0x14u && v605 != 0)
              {
                v642 = v8[1];
                if (!v642 || v642[1])
                  goto LABEL_1020;
                v610 = (char *)operator new(0x80uLL);
                v7 = (unint64_t)(v610 + 64);
                *((_DWORD *)v610 + 21) = *((_DWORD *)v610 + 21) & 0x38000000 | 2;
                *(_QWORD *)v610 = 0;
                *((_QWORD *)v610 + 1) = 0;
                *((_QWORD *)v610 + 2) = 0;
                *((_QWORD *)v610 + 3) = v610 + 64;
                *((_QWORD *)v610 + 4) = 0;
                v611 = (uint64_t *)(v610 + 32);
                *((_QWORD *)v610 + 5) = 0;
                *((_QWORD *)v610 + 6) = 0;
                *((_QWORD *)v610 + 7) = v610 + 64;
                Xor = (uint64_t)llvm::ConstantExpr::getSub((llvm::ConstantExpr *)v603, (llvm::Constant *)v605, 0, 0);
LABEL_947:
                v643 = Xor;
                WORD4(v1691) = 257;
                sub_1C4774CC4(*v604);
                *((_QWORD *)v610 + 8) = v644;
                *((_QWORD *)v610 + 9) = 0;
                v645 = *((_DWORD *)v610 + 21) & 0xC0000000 | 2;
                *((_DWORD *)v610 + 20) = 81;
                *((_DWORD *)v610 + 21) = v645;
                *(_OWORD *)(v610 + 88) = 0u;
                *(_OWORD *)(v610 + 104) = 0u;
                *((_DWORD *)v610 + 30) = 0;
                if (*(_QWORD *)v610)
                {
                  **((_QWORD **)v610 + 2) = *((_QWORD *)v610 + 1);
                  v1280 = *((_QWORD *)v610 + 1);
                  if (v1280)
                    *(_QWORD *)(v1280 + 16) = *((_QWORD *)v610 + 2);
                }
                *(_QWORD *)v610 = v604;
                v648 = v604[1];
                v647 = v604 + 1;
                v646 = v648;
                *((_QWORD *)v610 + 1) = v648;
                if (v648)
                  *((_QWORD *)v646 + 2) = v610 + 8;
                *((_QWORD *)v610 + 2) = v647;
                *v647 = v610;
                if (*((_QWORD *)v610 + 4))
                {
                  **((_QWORD **)v610 + 6) = *((_QWORD *)v610 + 5);
                  v1281 = *((_QWORD *)v610 + 5);
                  if (v1281)
                    *(_QWORD *)(v1281 + 16) = *((_QWORD *)v610 + 6);
                }
                *v611 = v643;
                if (v643)
                {
                  v651 = *(_QWORD *)(v643 + 8);
                  v650 = (uint64_t **)(v643 + 8);
                  v649 = v651;
                  *((_QWORD *)v610 + 5) = v651;
                  if (v651)
                    *(_QWORD *)(v649 + 16) = v610 + 40;
                  *((_QWORD *)v610 + 6) = v650;
                  *v650 = v611;
                }
                goto LABEL_997;
              }
              v608 = *((_DWORD *)v1658 + 2);
              if (v608 > 0x40)
              {
                if (llvm::APInt::countLeadingZerosSlowCase(v1658) != v608)
                  goto LABEL_1020;
              }
              else if (*(_QWORD *)v1658)
              {
                goto LABEL_1020;
              }
              v669 = sub_1C577FA08((int)a1, (llvm::Constant **)v605);
              if (v669)
              {
                v670 = v669;
                v610 = (char *)operator new(0x80uLL);
                v7 = (unint64_t)(v610 + 64);
                *((_DWORD *)v610 + 21) = *((_DWORD *)v610 + 21) & 0x38000000 | 2;
                *(_QWORD *)v610 = 0;
                *((_QWORD *)v610 + 1) = 0;
                *((_QWORD *)v610 + 2) = 0;
                *((_QWORD *)v610 + 3) = v610 + 64;
                *((_QWORD *)v610 + 4) = 0;
                *((_QWORD *)v610 + 5) = 0;
                *((_QWORD *)v610 + 6) = 0;
                *((_QWORD *)v610 + 7) = v610 + 64;
                WORD4(v1691) = 257;
                sub_1C4774CC4(*v604);
                *((_QWORD *)v610 + 8) = v671;
                *((_QWORD *)v610 + 9) = 0;
                v672 = *((_DWORD *)v610 + 21) & 0xC0000000 | 2;
                *((_DWORD *)v610 + 20) = 81;
                *((_DWORD *)v610 + 21) = v672;
                *(_OWORD *)(v610 + 88) = 0u;
                *(_OWORD *)(v610 + 104) = 0u;
                *((_DWORD *)v610 + 30) = 0;
                if (*(_QWORD *)v610)
                {
                  **((_QWORD **)v610 + 2) = *((_QWORD *)v610 + 1);
                  v1290 = *((_QWORD *)v610 + 1);
                  if (v1290)
                    *(_QWORD *)(v1290 + 16) = *((_QWORD *)v610 + 2);
                }
                *(_QWORD *)v610 = v604;
                v675 = v604[1];
                v674 = v604 + 1;
                v673 = v675;
                *((_QWORD *)v610 + 1) = v675;
                if (v675)
                  *((_QWORD *)v673 + 2) = v610 + 8;
                *((_QWORD *)v610 + 2) = v674;
                *v674 = v610;
                if (*((_QWORD *)v610 + 4))
                {
                  **((_QWORD **)v610 + 6) = *((_QWORD *)v610 + 5);
                  v1291 = *((_QWORD *)v610 + 5);
                  if (v1291)
                    *(_QWORD *)(v1291 + 16) = *((_QWORD *)v610 + 6);
                }
                *((_QWORD *)v610 + 4) = v670;
                v678 = *((_QWORD *)v670 + 1);
                v677 = (_QWORD *)((char *)v670 + 8);
                v676 = v678;
                *((_QWORD *)v610 + 5) = v678;
                if (v678)
                  *(_QWORD *)(v676 + 16) = v610 + 40;
                *((_QWORD *)v610 + 6) = v677;
                *v677 = v610 + 32;
                goto LABEL_997;
              }
              v680 = sub_1C577FA08((int)a1, (llvm::Constant **)v604);
              if (v680)
              {
                v681 = v680;
                v610 = (char *)operator new(0x80uLL);
                v7 = (unint64_t)(v610 + 64);
                *((_DWORD *)v610 + 21) = *((_DWORD *)v610 + 21) & 0x38000000 | 2;
                *(_QWORD *)v610 = 0;
                *((_QWORD *)v610 + 1) = 0;
                *((_QWORD *)v610 + 2) = 0;
                *((_QWORD *)v610 + 3) = v610 + 64;
                *((_QWORD *)v610 + 4) = 0;
                v682 = v610 + 32;
                *((_QWORD *)v610 + 5) = 0;
                *((_QWORD *)v610 + 6) = 0;
                *((_QWORD *)v610 + 7) = v610 + 64;
                WORD4(v1691) = 257;
                sub_1C4774CC4(*(_DWORD **)v681);
                *((_QWORD *)v610 + 8) = v683;
                *((_QWORD *)v610 + 9) = 0;
                v684 = *((_DWORD *)v610 + 21) & 0xC0000000 | 2;
                *((_DWORD *)v610 + 20) = 81;
                *((_DWORD *)v610 + 21) = v684;
                *(_OWORD *)(v610 + 88) = 0u;
                *(_OWORD *)(v610 + 104) = 0u;
                *((_DWORD *)v610 + 30) = 0;
                if (*(_QWORD *)v610)
                {
                  **((_QWORD **)v610 + 2) = *((_QWORD *)v610 + 1);
                  v1357 = *((_QWORD *)v610 + 1);
                  if (v1357)
                    *(_QWORD *)(v1357 + 16) = *((_QWORD *)v610 + 2);
                }
                *(_QWORD *)v610 = v681;
                v687 = *((_QWORD *)v681 + 1);
                v686 = (_QWORD *)((char *)v681 + 8);
                v685 = v687;
                *((_QWORD *)v610 + 1) = v687;
                if (v687)
                  *(_QWORD *)(v685 + 16) = v610 + 8;
                *((_QWORD *)v610 + 2) = v686;
                *v686 = v610;
LABEL_993:
                if (*((_QWORD *)v610 + 4))
                {
                  **((_QWORD **)v610 + 6) = *((_QWORD *)v610 + 5);
                  v1293 = *((_QWORD *)v610 + 5);
                  if (v1293)
                    *(_QWORD *)(v1293 + 16) = *((_QWORD *)v610 + 6);
                }
                *((_QWORD *)v610 + 4) = v605;
                v695 = *(_QWORD *)(v605 + 8);
                v694 = (_QWORD *)(v605 + 8);
                v693 = v695;
                *((_QWORD *)v610 + 5) = v695;
                if (v695)
                  *(_QWORD *)(v693 + 16) = v610 + 40;
                *((_QWORD *)v610 + 6) = v694;
                *v694 = v682;
                goto LABEL_997;
              }
              v696 = v8[1];
              if (!v696 || v696[1])
                goto LABEL_1020;
              v697 = a1[3];
              WORD4(v1691) = 257;
              v698 = sub_1C5346748(v697, v605, (uint64_t)&v1688, 0, 0);
              llvm::Value::takeName((llvm::Value *)v698, (llvm::Value *)v8);
              v699 = (char *)operator new(0x80uLL);
              v7 = (unint64_t)(v699 + 64);
              *((_DWORD *)v699 + 21) = *((_DWORD *)v699 + 21) & 0x38000000 | 2;
              *(_QWORD *)v699 = 0;
              *((_QWORD *)v699 + 1) = 0;
              *((_QWORD *)v699 + 4) = 0;
              v700 = (unsigned __int8 **)(v699 + 32);
              *((_QWORD *)v699 + 2) = 0;
              *((_QWORD *)v699 + 3) = v699 + 64;
              *((_QWORD *)v699 + 5) = 0;
              *((_QWORD *)v699 + 6) = 0;
              *((_QWORD *)v699 + 7) = v699 + 64;
              WORD4(v1691) = 257;
              sub_1C4774CC4(*v604);
              *((_QWORD *)v699 + 8) = v701;
              *((_QWORD *)v699 + 9) = 0;
              v702 = *((_DWORD *)v699 + 21) & 0xC0000000 | 2;
              *((_DWORD *)v699 + 20) = 81;
              *((_DWORD *)v699 + 21) = v702;
              *(_OWORD *)(v699 + 88) = 0u;
              *(_OWORD *)(v699 + 104) = 0u;
              *((_DWORD *)v699 + 30) = 0;
              if (*(_QWORD *)v699)
              {
                **((_QWORD **)v699 + 2) = *((_QWORD *)v699 + 1);
                v1520 = *((_QWORD *)v699 + 1);
                if (v1520)
                  *(_QWORD *)(v1520 + 16) = *((_QWORD *)v699 + 2);
              }
              *(_QWORD *)v699 = v604;
              v705 = v604[1];
              v704 = v604 + 1;
              v703 = v705;
              *((_QWORD *)v699 + 1) = v705;
              if (v705)
                *((_QWORD *)v703 + 2) = v699 + 8;
              *((_QWORD *)v699 + 2) = v704;
              *v704 = v699;
              if (*((_QWORD *)v699 + 4))
              {
                **((_QWORD **)v699 + 6) = *((_QWORD *)v699 + 5);
                v1521 = *((_QWORD *)v699 + 5);
                if (v1521)
                  *(_QWORD *)(v1521 + 16) = *((_QWORD *)v699 + 6);
              }
              *v700 = v698;
              if (v698)
              {
                v708 = *((_QWORD *)v698 + 1);
                v707 = (unsigned __int8 ***)(v698 + 8);
                v706 = v708;
                *((_QWORD *)v699 + 5) = v708;
                if (v708)
                  *(_QWORD *)(v706 + 16) = v699 + 40;
                *((_QWORD *)v699 + 6) = v707;
                *v707 = v700;
              }
              *((_WORD *)v699 + 41) = v602;
              goto LABEL_998;
          }
          goto LABEL_998;
        }
LABEL_1020:
        v8 = *(uint64_t ****)(a2 - 64);
        v9 = *((unsigned __int8 *)v8 + 16);
LABEL_1021:
        if (v9 != 85)
          goto LABEL_1074;
        v723 = *(llvm::Constant **)(a2 - 32);
        if (!v723 || *((_BYTE *)v723 + 16) != 16)
          return 0;
        v724 = *(_QWORD *)(a2 + 8);
        if (!v724)
          goto LABEL_1073;
        if (*(_QWORD *)(v724 + 8))
          goto LABEL_1073;
        v725 = (uint64_t)*(v8 - 12);
        if (!v725)
          goto LABEL_1073;
        if (*(_BYTE *)(v725 + 16) != 81)
          goto LABEL_1073;
        v726 = *(_QWORD *)(v725 - 64);
        if (!v726)
          goto LABEL_1073;
        v727 = *(_QWORD *)(v725 - 32);
        if (!v727)
          goto LABEL_1073;
        v728 = *(_WORD *)(v725 + 18);
        if ((v728 & 0x3E) != 0x20)
          goto LABEL_1073;
        v729 = v728 & 0x3F;
        v730 = (uint64_t)*(v8 - 8);
        v731 = (uint64_t)*(v8 - 4);
        v732 = v729 == 33 ? *(v8 - 4) : *(v8 - 8);
        if (*((_BYTE *)v732 + 16) != 16 || v732 == 0)
          goto LABEL_1073;
        if (v729 != 33)
          v730 = v731;
        if (*(_BYTE *)(v730 + 16) != 85)
          goto LABEL_1073;
        v734 = *(_DWORD *)(v730 + 20);
        v735 = (v734 & 0x40000000) != 0 ? *(uint64_t **)(v730 - 8) : (uint64_t *)(v730 - 32 * (v734 & 0x7FFFFFF));
        v736 = *v735;
        if (!*v735)
          goto LABEL_1073;
        if (*(_BYTE *)(v736 + 16) != 81)
          goto LABEL_1073;
        v737 = *(unsigned __int8 **)(v736 - 64);
        if (!v737)
          goto LABEL_1073;
        v5 = *(unsigned __int8 **)(v736 - 32);
        if (!v5)
          goto LABEL_1073;
        v738 = *(_WORD *)(v736 + 18);
        v739 = (v734 & 0x40000000) != 0 ? *(_QWORD *)(v730 - 8) : v730 - 32 * (v734 & 0x7FFFFFF);
        v740 = *(_QWORD *)(v739 + 32);
        v741 = v740 && *(_BYTE *)(v740 + 16) == 16;
        if (!v741 || ((v742 = *(_QWORD *)(v739 + 64)) != 0 ? (v743 = *(_BYTE *)(v742 + 16) == 16) : (v743 = 0), !v743))
        {
LABEL_1073:
          v8 = *(uint64_t ****)(a2 - 64);
          v9 = *((unsigned __int8 *)v8 + 16);
LABEL_1074:
          if (v9 != 66)
            goto LABEL_1161;
          v746 = v1658;
          v7 = *(unsigned __int16 *)(a2 + 18);
          v747 = (llvm::ConstantInt ***)*(v8 - 4);
          v748 = *((_DWORD *)v1658 + 2);
          if (v748 > 0x40)
            v749 = llvm::APInt::countLeadingZerosSlowCase(v1658) == v748 - 1;
          else
            v749 = *(_QWORD *)v1658 == 1;
          v750 = v749;
          v751 = v7 & 0x3F;
          v752 = v748 < 2 || v750 == 0;
          if (v752 || v751 != 40)
            goto LABEL_1089;
          v753 = (llvm::Type *)*v747;
          if (((_DWORD)(*v747)[1] & 0xFE) == 0x12)
            v753 = (llvm::Type *)**((_QWORD **)v753 + 2);
          v754 = llvm::Type::getPrimitiveSizeInBits(v753);
          if (!v754)
          {
LABEL_1089:
            v755 = (llvm::Constant *)*v8;
            if (((_DWORD)(*v8)[1] & 0xFE) == 0x12)
              v755 = (llvm::Constant *)**((_QWORD **)v755 + 2);
            v756 = llvm::Type::getPrimitiveSizeInBits(v755);
            v757 = (llvm::Type *)*v747;
            if (((_DWORD)(*v747)[1] & 0xFE) == 0x12)
              v757 = (llvm::Type *)**((_QWORD **)v757 + 2);
            v758 = llvm::Type::getPrimitiveSizeInBits(v757);
            if ((v7 & 0x3E) != 0x20)
              goto LABEL_1143;
            v759 = v8[1];
            if (!v759 || v759[1])
              goto LABEL_1143;
            v760 = (unint64_t *)a1[7];
            v761 = a1[9];
            v762 = (_DWORD **)a2;
            if (!*(_QWORD *)(a2 + 40))
            {
              if (*((unsigned __int8 *)v747 + 16) < 0x1Cu || (v762 = (_DWORD **)v747, !v747[5]))
                v762 = 0;
            }
            v1688 = a1[10];
            p_src = v760;
            v1690 = (uint64_t)v762;
            v1691 = v761;
            LOBYTE(v1692) = 1;
            sub_1C4F83784((uint64_t)v747, 0, (uint64_t *)&v1688, &v1694);
            v763 = (int)v1695;
            if (v1695 >= 0x41)
            {
              v767 = (((unint64_t)v1695 + 63) >> 3) & 0x3FFFFFF8;
              v768 = (char *)operator new[]();
              memcpy(v768, (const void *)v1694, v767);
              v769 = 0;
              v770 = v1696;
              do
              {
                *(_QWORD *)&v768[v769] |= *(_QWORD *)(v770 + v769);
                v769 += 8;
              }
              while (v767 != v769);
              LODWORD(p_src) = v763;
              v1688 = (unint64_t)v768;
              v7 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v1688);
              v765 = v758 - v756;
              MEMORY[0x1CAA32F9C](v768, 0x1000C8000313F17);
              if (v7 < v758 - v756)
              {
LABEL_1101:
                v766 = 1;
                goto LABEL_1140;
              }
            }
            else
            {
              v764 = __clz(~((v1696 | v1694) << -(char)v1695));
              if (!(_DWORD)v1695)
                v764 = 0;
              v765 = v758 - v756;
              if (v764 < v758 - v756)
                goto LABEL_1101;
            }
            llvm::APInt::zext(v746, v758, (uint64_t)&__src);
            LODWORD(p_src) = v758;
            if (v758 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v1688, 0, 0);
              v771 = p_src;
            }
            else
            {
              v1688 = 0;
              v771 = v758;
            }
            sub_1C4912E54(&v1688, v771 - v765, v771);
            v772 = p_src;
            if (p_src > 0x40)
            {
              v778 = (_QWORD *)v1688;
              v779 = (uint64_t *)v1696;
              v780 = ((unint64_t)p_src + 63) >> 6;
              do
              {
                v781 = *v779++;
                *v778++ &= v781;
                --v780;
              }
              while (v780);
              v773 = v1688;
            }
            else
            {
              v773 = v1688 & v1696;
              v1688 &= v1696;
            }
            LODWORD(p_src) = 0;
            if (v1684[0] > 0x40)
            {
              v782 = __src;
              v783 = ((unint64_t)v1684[0] + 63) >> 6;
              v784 = (uint64_t *)v773;
              do
              {
                v785 = *v784++;
                *v782++ |= v785;
                --v783;
              }
              while (v783);
            }
            else
            {
              __src = (void *)((unint64_t)__src | v773);
            }
            *(_QWORD *)v1656 = a1;
            if (v772 >= 0x41)
            {
              if (v773)
              {
                MEMORY[0x1CAA32F9C](v773, 0x1000C8000313F17);
                if (p_src >= 0x41)
                {
                  if (v1688)
                    MEMORY[0x1CAA32F9C](v1688, 0x1000C8000313F17);
                }
              }
            }
            v786 = (char *)operator new(0x80uLL);
            v7 = (unint64_t)(v786 + 64);
            *((_DWORD *)v786 + 21) = *((_DWORD *)v786 + 21) & 0x38000000 | 2;
            *(_QWORD *)v786 = 0;
            *((_QWORD *)v786 + 1) = 0;
            *((_QWORD *)v786 + 2) = 0;
            *((_QWORD *)v786 + 3) = v786 + 64;
            *((_QWORD *)v786 + 4) = 0;
            v787 = (llvm::Value ***)(v786 + 32);
            *((_QWORD *)v786 + 5) = 0;
            *((_QWORD *)v786 + 6) = 0;
            *((_QWORD *)v786 + 7) = v786 + 64;
            v789 = llvm::ConstantInt::get(*v747, (llvm::Type *)&__src, v788);
            WORD4(v1691) = 257;
            sub_1C4774CC4(*v747);
            *((_QWORD *)v786 + 8) = v790;
            *((_QWORD *)v786 + 9) = 0;
            v791 = *((_DWORD *)v786 + 21) & 0xC0000000 | 2;
            *((_DWORD *)v786 + 20) = 81;
            *((_DWORD *)v786 + 21) = v791;
            *(_OWORD *)(v786 + 88) = 0u;
            *(_OWORD *)(v786 + 104) = 0u;
            *((_DWORD *)v786 + 30) = 0;
            if (*(_QWORD *)v786)
            {
              **((_QWORD **)v786 + 2) = *((_QWORD *)v786 + 1);
              v1272 = *((_QWORD *)v786 + 1);
              if (v1272)
                *(_QWORD *)(v1272 + 16) = *((_QWORD *)v786 + 2);
            }
            *(_QWORD *)v786 = v747;
            v792 = v747 + 1;
            v793 = v747[1];
            *((_QWORD *)v786 + 1) = v793;
            if (v793)
              v793[2] = (llvm::ConstantInt *)(v786 + 8);
            *((_QWORD *)v786 + 2) = v792;
            *v792 = v786;
            if (*((_QWORD *)v786 + 4))
            {
              **((_QWORD **)v786 + 6) = *((_QWORD *)v786 + 5);
              v1273 = *((_QWORD *)v786 + 5);
              if (v1273)
                *(_QWORD *)(v1273 + 16) = *((_QWORD *)v786 + 6);
            }
            *v787 = v789;
            if (v789)
            {
              v796 = v789[1];
              v795 = (llvm::Value ****)(v789 + 1);
              v794 = v796;
              *((_QWORD *)v786 + 5) = v796;
              if (v796)
                *((_QWORD *)v794 + 2) = v786 + 40;
              *((_QWORD *)v786 + 6) = v795;
              *v795 = v787;
            }
            *((_WORD *)v786 + 41) = v751;
            llvm::Value::setName((uint64_t ***)v7, (uint64_t)&v1688);
            if (v1684[0] >= 0x41 && __src)
              MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
            v766 = 0;
            a1 = *(_QWORD **)v1656;
LABEL_1140:
            if (v1697 >= 0x41 && v1696)
              MEMORY[0x1CAA32F9C](v1696, 0x1000C8000313F17);
            if (v1695 >= 0x41 && v1694)
              MEMORY[0x1CAA32F9C](v1694, 0x1000C8000313F17);
            if (!v766)
              goto LABEL_1159;
LABEL_1143:
            v1694 = 0;
            __src = 0;
            LOBYTE(v1699) = 0;
            if (!sub_1C57921EC(v751, v746, &v1699))
              goto LABEL_1158;
            v1688 = (unint64_t)&v1694;
            p_src = (unint64_t *)&__src;
            v1690 = 0;
            if (!sub_1C5819D30((_QWORD **)&v1688, (uint64_t)v747))
              goto LABEL_1158;
            v797 = (llvm::Constant *)__src;
            if (*((_DWORD *)__src + 2) >= 0x41u)
              v797 = *(llvm::Constant **)__src;
            if (v758 - *(_QWORD *)v797 != v756)
            {
LABEL_1158:
              v7 = 0;
              goto LABEL_1159;
            }
            v798 = v1699;
            v800 = (char *)operator new(0x80uLL);
            v7 = (unint64_t)(v800 + 64);
            *((_DWORD *)v800 + 21) = *((_DWORD *)v800 + 21) & 0x38000000 | 2;
            *(_QWORD *)v800 = 0;
            *((_QWORD *)v800 + 1) = 0;
            *((_QWORD *)v800 + 2) = 0;
            *((_QWORD *)v800 + 3) = v800 + 64;
            *((_QWORD *)v800 + 4) = 0;
            v801 = v800 + 32;
            *((_QWORD *)v800 + 5) = 0;
            *((_QWORD *)v800 + 6) = 0;
            *((_QWORD *)v800 + 7) = v800 + 64;
            v802 = (_DWORD **)v1694;
            v803 = *v747;
            v804 = v800 + 88;
            if (v798)
            {
              v805 = llvm::Constant::getNullValue((llvm::Constant *)v803, v799);
              WORD4(v1691) = 257;
              sub_1C4774CC4(*v802);
              *((_QWORD *)v800 + 8) = v806;
              *((_QWORD *)v800 + 9) = 0;
              v807 = *((_DWORD *)v800 + 21) & 0xC0000000 | 2;
              *((_DWORD *)v800 + 20) = 81;
              *((_DWORD *)v800 + 21) = v807;
              *v804 = 0u;
              *(_OWORD *)(v800 + 104) = 0u;
              *((_DWORD *)v800 + 30) = 0;
              if (*(_QWORD *)v800)
              {
                **((_QWORD **)v800 + 2) = *((_QWORD *)v800 + 1);
                v1270 = *((_QWORD *)v800 + 1);
                if (v1270)
                  *(_QWORD *)(v1270 + 16) = *((_QWORD *)v800 + 2);
              }
              *(_QWORD *)v800 = v802;
              v810 = v802[1];
              v809 = v802 + 1;
              v808 = v810;
              *((_QWORD *)v800 + 1) = v810;
              if (v810)
                *((_QWORD *)v808 + 2) = v800 + 8;
              *((_QWORD *)v800 + 2) = v809;
              *v809 = v800;
              if (*((_QWORD *)v800 + 4))
              {
                **((_QWORD **)v800 + 6) = *((_QWORD *)v800 + 5);
                v1271 = *((_QWORD *)v800 + 5);
                if (v1271)
                  *(_QWORD *)(v1271 + 16) = *((_QWORD *)v800 + 6);
              }
              *v801 = v805;
              if (!v805)
              {
                v815 = 40;
                goto LABEL_1157;
              }
              v813 = v805[1];
              v812 = v805 + 1;
              v811 = v813;
              *((_QWORD *)v800 + 5) = v813;
              v814 = v800 + 40;
              v815 = 40;
              if (!v813)
              {
LABEL_1156:
                *((_QWORD *)v800 + 6) = v812;
                *v812 = v801;
LABEL_1157:
                *((_WORD *)v800 + 41) = v815;
                llvm::Value::setName((uint64_t ***)v7, (uint64_t)&v1688);
LABEL_1159:
                if (v7)
                  return v7;
                v8 = *(uint64_t ****)(a2 - 64);
                v9 = *((unsigned __int8 *)v8 + 16);
LABEL_1161:
                if (v9 != 84)
                  return 0;
                v816 = (uint64_t)*(v8 - 4);
                if (!v816
                  || *(_BYTE *)(v816 + 16)
                  || *(uint64_t ***)(v816 + 24) != v8[9]
                  || (*(_BYTE *)(v816 + 33) & 0x20) == 0)
                {
                  return 0;
                }
                v825 = (unint64_t **)v1658;
                v826 = *(_WORD *)(a2 + 18);
                v827 = (llvm::Constant *)*v8;
                v828 = *((unsigned int *)v1658 + 2);
                v371 = v826 & 0x3F;
                if ((v826 & 0x3E) == 0x20)
                {
                  v829 = *(_DWORD *)(v816 + 36);
                  if (v829 <= 147)
                  {
                    if (v829 > 51)
                    {
                      if (v829 == 52)
                      {
LABEL_1181:
                        if (v828 >= 0x41)
                        {
                          if (v828 - llvm::APInt::countLeadingZerosSlowCase(v1658) >= 0x41)
                            return 0;
                          v830 = **v825;
                        }
                        else
                        {
                          v830 = *(_QWORD *)v1658;
                        }
                        if (v830 == v828)
                        {
                          v871 = (char *)operator new(0x80uLL);
                          v7 = (unint64_t)(v871 + 64);
                          *((_DWORD *)v871 + 21) = *((_DWORD *)v871 + 21) & 0x38000000 | 2;
                          *(_QWORD *)v871 = 0;
                          *((_QWORD *)v871 + 1) = 0;
                          *((_QWORD *)v871 + 2) = 0;
                          *((_QWORD *)v871 + 3) = v871 + 64;
                          *((_QWORD *)v871 + 4) = 0;
                          v872 = (llvm::Value ***)(v871 + 32);
                          *((_QWORD *)v871 + 5) = 0;
                          *((_QWORD *)v871 + 6) = 0;
                          *((_QWORD *)v871 + 7) = v871 + 64;
                          v873 = v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
                          v874 = v827;
                          goto LABEL_1343;
                        }
                        if (v830 <= v828 && (_DWORD)v828 != (_DWORD)v830)
                        {
                          v876 = v8[1];
                          if (v876)
                          {
                            if (!v876[1])
                            {
                              v1684[0] = v828;
                              if (v829 == 54)
                              {
                                if (v828 <= 0x40)
                                {
                                  __src = 0;
                                  sub_1C4912E54(&__src, 0, v830 + 1);
                                  v877 = 0;
                                  LODWORD(v1700) = v828;
LABEL_1603:
                                  v1131 = 1 << v830;
LABEL_1604:
                                  v1699 = v1131 | v877;
                                  goto LABEL_1605;
                                }
                                llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
                                sub_1C4912E54(&__src, 0, v830 + 1);
                                LODWORD(v1700) = v828;
                                llvm::APInt::initSlowCase((llvm::APInt *)&v1699, 0, 0);
                                v1131 = 1 << v830;
                                if (v1700 > 0x40)
                                {
                                  *(_QWORD *)(v1699 + 8 * (v830 >> 6)) |= v1131;
                                  goto LABEL_1605;
                                }
                              }
                              else
                              {
                                v1129 = ~(_DWORD)v830;
                                if (v828 > 0x40)
                                {
                                  llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
                                  v1130 = v1684[0];
                                }
                                else
                                {
                                  __src = 0;
                                  v1130 = v828;
                                }
                                sub_1C4912E54(&__src, v1130 + v1129, v1130);
                                LODWORD(v830) = v828 + v1129;
                                LODWORD(v1700) = v828;
                                if (v828 <= 0x40)
                                {
                                  v877 = 0;
                                  goto LABEL_1603;
                                }
                                llvm::APInt::initSlowCase((llvm::APInt *)&v1699, 0, 0);
                                v1131 = 1 << v830;
                                if (v1700 > 0x40)
                                {
                                  *(_QWORD *)(v1699 + 8 * (v830 >> 6)) |= v1131;
LABEL_1605:
                                  v1132 = (char *)operator new(0x80uLL);
                                  v7 = (unint64_t)(v1132 + 64);
                                  *((_DWORD *)v1132 + 21) = *((_DWORD *)v1132 + 21) & 0x38000000 | 2;
                                  *(_QWORD *)v1132 = 0;
                                  *((_QWORD *)v1132 + 1) = 0;
                                  *((_QWORD *)v1132 + 4) = 0;
                                  v1133 = (llvm::Value ***)(v1132 + 32);
                                  *((_QWORD *)v1132 + 2) = 0;
                                  *((_QWORD *)v1132 + 3) = v1132 + 64;
                                  *((_QWORD *)v1132 + 5) = 0;
                                  *((_QWORD *)v1132 + 6) = 0;
                                  *((_QWORD *)v1132 + 7) = v1132 + 64;
                                  v1134 = a1[3];
                                  v1135 = (llvm::ConstantInt ***)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
                                  WORD4(v1691) = 257;
                                  v1137 = llvm::ConstantInt::get(*v1135, (llvm::Type *)&__src, v1136);
                                  v1138 = sub_1C4D89BCC(v1134, v1135, (uint64_t)v1137, (uint64_t)&v1688);
                                  v1140 = llvm::ConstantInt::get((llvm::ConstantInt **)v827, (llvm::Type *)&v1699, v1139);
                                  v1698 = 257;
                                  sub_1C4774CC4(*(_DWORD **)v1138);
                                  *((_QWORD *)v1132 + 8) = v1141;
                                  *((_QWORD *)v1132 + 9) = 0;
                                  v1142 = *((_DWORD *)v1132 + 21) & 0xC0000000 | 2;
                                  *((_DWORD *)v1132 + 20) = 81;
                                  *((_DWORD *)v1132 + 21) = v1142;
                                  *(_OWORD *)(v1132 + 88) = 0u;
                                  *(_OWORD *)(v1132 + 104) = 0u;
                                  *((_DWORD *)v1132 + 30) = 0;
                                  if (*(_QWORD *)v1132)
                                  {
                                    **((_QWORD **)v1132 + 2) = *((_QWORD *)v1132 + 1);
                                    v1557 = *((_QWORD *)v1132 + 1);
                                    if (v1557)
                                      *(_QWORD *)(v1557 + 16) = *((_QWORD *)v1132 + 2);
                                  }
                                  *(_QWORD *)v1132 = v1138;
                                  v1145 = *(_QWORD *)(v1138 + 8);
                                  v1144 = (_QWORD *)(v1138 + 8);
                                  v1143 = v1145;
                                  *((_QWORD *)v1132 + 1) = v1145;
                                  if (v1145)
                                    *(_QWORD *)(v1143 + 16) = v1132 + 8;
                                  *((_QWORD *)v1132 + 2) = v1144;
                                  *v1144 = v1132;
                                  if (*((_QWORD *)v1132 + 4))
                                  {
                                    **((_QWORD **)v1132 + 6) = *((_QWORD *)v1132 + 5);
                                    v1558 = *((_QWORD *)v1132 + 5);
                                    if (v1558)
                                      *(_QWORD *)(v1558 + 16) = *((_QWORD *)v1132 + 6);
                                  }
                                  *v1133 = v1140;
                                  if (v1140)
                                  {
                                    v1148 = v1140[1];
                                    v1147 = (llvm::Value ****)(v1140 + 1);
                                    v1146 = v1148;
                                    *((_QWORD *)v1132 + 5) = v1148;
                                    if (v1148)
                                      *((_QWORD *)v1146 + 2) = v1132 + 40;
                                    *((_QWORD *)v1132 + 6) = v1147;
                                    *v1147 = v1133;
                                  }
                                  *((_WORD *)v1132 + 41) = v371;
                                  llvm::Value::setName((uint64_t ***)v7, (uint64_t)&v1694);
                                  if (v1700 >= 0x41 && v1699)
                                    MEMORY[0x1CAA32F9C](v1699, 0x1000C8000313F17);
                                  goto LABEL_1650;
                                }
                              }
                              v877 = v1699;
                              goto LABEL_1604;
                            }
                          }
                        }
                        return 0;
                      }
                      if (v829 != 53)
                      {
                        if (v829 != 54)
                          return 0;
                        goto LABEL_1181;
                      }
                      if (v828 > 0x40)
                      {
                        v914 = llvm::APInt::countLeadingZerosSlowCase(v1658);
                        if ((_DWORD)v828 == v914)
                        {
LABEL_1309:
                          v915 = 1;
                          goto LABEL_1342;
                        }
                        if ((v828 - v914) > 0x40)
                          return 0;
                        v875 = **v825;
                      }
                      else
                      {
                        v875 = *(_QWORD *)v1658;
                        if (!*(_QWORD *)v1658)
                          goto LABEL_1309;
                      }
                      if (v875 != v828)
                        return 0;
                      v915 = 0;
LABEL_1342:
                      v871 = (char *)operator new(0x80uLL);
                      v7 = (unint64_t)(v871 + 64);
                      *((_DWORD *)v871 + 21) = *((_DWORD *)v871 + 21) & 0x38000000 | 2;
                      *(_QWORD *)v871 = 0;
                      *((_QWORD *)v871 + 1) = 0;
                      *((_QWORD *)v871 + 2) = 0;
                      *((_QWORD *)v871 + 3) = v871 + 64;
                      *((_QWORD *)v871 + 4) = 0;
                      v872 = (llvm::Value ***)(v871 + 32);
                      *((_QWORD *)v871 + 5) = 0;
                      *((_QWORD *)v871 + 6) = 0;
                      *((_QWORD *)v871 + 7) = v871 + 64;
                      v873 = v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
                      v874 = v827;
                      if (!v915)
                      {
                        AllOnesValue = (llvm::Value **)llvm::Constant::getAllOnesValue(v827, v870);
LABEL_1345:
                        v908 = AllOnesValue;
                        WORD4(v1691) = 257;
                        sub_1C4774CC4(*v873);
                        *((_QWORD *)v871 + 8) = v933;
                        *((_QWORD *)v871 + 9) = 0;
                        v934 = *((_DWORD *)v871 + 21) & 0xC0000000 | 2;
                        *((_DWORD *)v871 + 20) = 81;
                        *((_DWORD *)v871 + 21) = v934;
                        *(_OWORD *)(v871 + 88) = 0u;
                        *(_OWORD *)(v871 + 104) = 0u;
                        *((_DWORD *)v871 + 30) = 0;
                        if (*(_QWORD *)v871)
                        {
                          **((_QWORD **)v871 + 2) = *((_QWORD *)v871 + 1);
                          v1378 = *((_QWORD *)v871 + 1);
                          if (v1378)
                            *(_QWORD *)(v1378 + 16) = *((_QWORD *)v871 + 2);
                        }
                        *(_QWORD *)v871 = v873;
                        v937 = v873[1];
                        v936 = v873 + 1;
                        v935 = v937;
                        *((_QWORD *)v871 + 1) = v937;
                        if (v937)
                          v935[2] = (uint64_t)(v871 + 8);
                        *((_QWORD *)v871 + 2) = v936;
                        *v936 = v871;
LABEL_1349:
                        if (*((_QWORD *)v871 + 4))
                        {
                          **((_QWORD **)v871 + 6) = *((_QWORD *)v871 + 5);
                          v1360 = *((_QWORD *)v871 + 5);
                          if (v1360)
                            *(_QWORD *)(v1360 + 16) = *((_QWORD *)v871 + 6);
                        }
                        *v872 = v908;
                        if (v908)
                        {
                          v940 = v908[1];
                          v939 = (llvm::Value ****)(v908 + 1);
                          v938 = v940;
                          *((_QWORD *)v871 + 5) = v940;
                          if (v940)
                            *((_QWORD *)v938 + 2) = v871 + 40;
                          *((_QWORD *)v871 + 6) = v939;
                          *v939 = v872;
                        }
LABEL_1354:
                        *((_WORD *)v871 + 41) = v371;
                        goto LABEL_998;
                      }
LABEL_1343:
                      AllOnesValue = llvm::Constant::getNullValue(v874, v870);
                      goto LABEL_1345;
                    }
                    if (v829 == 1)
                    {
                      if (v828 > 0x40)
                      {
                        if (llvm::APInt::countLeadingZerosSlowCase(v1658) != (_DWORD)v828
                          && ((((*v825)[(v828 - 1) >> 6] >> (v828 - 1)) & 1) == 0
                           || llvm::APInt::countTrailingZerosSlowCase(v825) != (_DWORD)v828 - 1))
                        {
                          return 0;
                        }
                      }
                      else if (*(_QWORD *)v1658 && *(_QWORD *)v1658 != 1 << (v828 - 1))
                      {
                        return 0;
                      }
                      v871 = (char *)operator new(0x80uLL);
                      v7 = (unint64_t)(v871 + 64);
                      *((_DWORD *)v871 + 21) = *((_DWORD *)v871 + 21) & 0x38000000 | 2;
                      *(_QWORD *)v871 = 0;
                      *((_QWORD *)v871 + 1) = 0;
                      *((_QWORD *)v871 + 2) = 0;
                      *((_QWORD *)v871 + 3) = v871 + 64;
                      *((_QWORD *)v871 + 4) = 0;
                      v872 = (llvm::Value ***)(v871 + 32);
                      *((_QWORD *)v871 + 5) = 0;
                      *((_QWORD *)v871 + 6) = 0;
                      *((_QWORD *)v871 + 7) = v871 + 64;
                      v906 = v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
                      v908 = llvm::ConstantInt::get((llvm::ConstantInt **)v827, (llvm::Type *)v825, v907);
                      WORD4(v1691) = 257;
                      sub_1C4774CC4(*v906);
                      *((_QWORD *)v871 + 8) = v909;
                      *((_QWORD *)v871 + 9) = 0;
                      v910 = *((_DWORD *)v871 + 21) & 0xC0000000 | 2;
                      *((_DWORD *)v871 + 20) = 81;
                      *((_DWORD *)v871 + 21) = v910;
                      *(_OWORD *)(v871 + 88) = 0u;
                      *(_OWORD *)(v871 + 104) = 0u;
                      *((_DWORD *)v871 + 30) = 0;
                      if (*(_QWORD *)v871)
                      {
                        **((_QWORD **)v871 + 2) = *((_QWORD *)v871 + 1);
                        v1444 = *((_QWORD *)v871 + 1);
                        if (v1444)
                          *(_QWORD *)(v1444 + 16) = *((_QWORD *)v871 + 2);
                      }
                      *(_QWORD *)v871 = v906;
                      v913 = v906[1];
                      v912 = v906 + 1;
                      v911 = v913;
                      *((_QWORD *)v871 + 1) = v913;
                      if (v913)
                        v911[2] = (uint64_t)(v871 + 8);
                      *((_QWORD *)v871 + 2) = v912;
                      *v912 = v871;
                      goto LABEL_1349;
                    }
                    if (v829 != 9)
                      return 0;
                    v373 = (char *)operator new(0x80uLL);
                    v7 = (unint64_t)(v373 + 64);
                    *((_DWORD *)v373 + 21) = *((_DWORD *)v373 + 21) & 0x38000000 | 2;
                    *(_QWORD *)v373 = 0;
                    *((_QWORD *)v373 + 1) = 0;
                    *((_QWORD *)v373 + 2) = 0;
                    *((_QWORD *)v373 + 3) = v373 + 64;
                    *((_QWORD *)v373 + 4) = 0;
                    v845 = (llvm::Value ***)(v373 + 32);
                    *((_QWORD *)v373 + 5) = 0;
                    *((_QWORD *)v373 + 6) = 0;
                    *((_QWORD *)v373 + 7) = v373 + 64;
                    v846 = v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
                    llvm::APInt::byteSwap((llvm::APInt *)v825, (llvm::APInt *)&v1694);
                    v848 = llvm::ConstantInt::get((llvm::ConstantInt **)v827, (llvm::Type *)&v1694, v847);
                    WORD4(v1691) = 257;
                    sub_1C4774CC4(*v846);
                    *((_QWORD *)v373 + 8) = v849;
                    *((_QWORD *)v373 + 9) = 0;
                    v850 = *((_DWORD *)v373 + 21) & 0xC0000000 | 2;
                    *((_DWORD *)v373 + 20) = 81;
                    *((_DWORD *)v373 + 21) = v850;
                    *(_OWORD *)(v373 + 88) = 0u;
                    *(_OWORD *)(v373 + 104) = 0u;
                    *((_DWORD *)v373 + 30) = 0;
                    if (*(_QWORD *)v373)
                    {
                      **((_QWORD **)v373 + 2) = *((_QWORD *)v373 + 1);
                      v1416 = *((_QWORD *)v373 + 1);
                      if (v1416)
                        *(_QWORD *)(v1416 + 16) = *((_QWORD *)v373 + 2);
                    }
                    *(_QWORD *)v373 = v846;
                    v853 = v846[1];
                    v852 = v846 + 1;
                    v851 = v853;
                    *((_QWORD *)v373 + 1) = v853;
                    if (v853)
                      v851[2] = (uint64_t)(v373 + 8);
                    *((_QWORD *)v373 + 2) = v852;
                    *v852 = v373;
                    if (*((_QWORD *)v373 + 4))
                    {
                      **((_QWORD **)v373 + 6) = *((_QWORD *)v373 + 5);
                      v1417 = *((_QWORD *)v373 + 5);
                      if (v1417)
                        *(_QWORD *)(v1417 + 16) = *((_QWORD *)v373 + 6);
                    }
                    *v845 = v848;
                    if (v848)
                    {
                      v856 = v848[1];
                      v855 = (llvm::Value ****)(v848 + 1);
                      v854 = v856;
                      *((_QWORD *)v373 + 5) = v856;
                      if (v856)
                        *((_QWORD *)v854 + 2) = v373 + 40;
                      *((_QWORD *)v373 + 6) = v855;
                      *v855 = v845;
                    }
                    goto LABEL_1224;
                  }
                  if ((v829 - 148) >= 2)
                  {
                    if (v829 == 300)
                    {
                      if (v828 > 0x40)
                      {
                        if (llvm::APInt::countLeadingZerosSlowCase(v1658) != (_DWORD)v828)
                          return 0;
                      }
                      else if (*(_QWORD *)v1658)
                      {
                        return 0;
                      }
                      v890 = a1[3];
                      v891 = &v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
                      v892 = *v891;
                      v893 = (uint64_t)v891[4];
                      WORD4(v1691) = 257;
                      v894 = sub_1C4773594(v890, v892, v893, (uint64_t)&v1688);
                      v871 = (char *)operator new(0x80uLL);
                      v7 = (unint64_t)(v871 + 64);
                      *((_DWORD *)v871 + 21) = *((_DWORD *)v871 + 21) & 0x38000000 | 2;
                      *(_QWORD *)v871 = 0;
                      *((_QWORD *)v871 + 1) = 0;
                      *((_QWORD *)v871 + 2) = 0;
                      *((_QWORD *)v871 + 3) = v871 + 64;
                      *((_QWORD *)v871 + 4) = 0;
                      v895 = (llvm::Value ***)(v871 + 32);
                      *((_QWORD *)v871 + 5) = 0;
                      *((_QWORD *)v871 + 6) = 0;
                      *((_QWORD *)v871 + 7) = v871 + 64;
                      v897 = llvm::Constant::getNullValue(v827, v896);
                      WORD4(v1691) = 257;
                      sub_1C4774CC4(*(_DWORD **)v894);
                      *((_QWORD *)v871 + 8) = v898;
                      *((_QWORD *)v871 + 9) = 0;
                      v899 = *((_DWORD *)v871 + 21) & 0xC0000000 | 2;
                      *((_DWORD *)v871 + 20) = 81;
                      *((_DWORD *)v871 + 21) = v899;
                      *(_OWORD *)(v871 + 88) = 0u;
                      *(_OWORD *)(v871 + 104) = 0u;
                      *((_DWORD *)v871 + 30) = 0;
                      if (*(_QWORD *)v871)
                      {
                        **((_QWORD **)v871 + 2) = *((_QWORD *)v871 + 1);
                        v1502 = *((_QWORD *)v871 + 1);
                        if (v1502)
                          *(_QWORD *)(v1502 + 16) = *((_QWORD *)v871 + 2);
                      }
                      *(_QWORD *)v871 = v894;
                      v902 = *(_QWORD *)(v894 + 8);
                      v901 = (_QWORD *)(v894 + 8);
                      v900 = v902;
                      *((_QWORD *)v871 + 1) = v902;
                      if (v902)
                        *(_QWORD *)(v900 + 16) = v871 + 8;
                      *((_QWORD *)v871 + 2) = v901;
                      *v901 = v871;
                      if (*((_QWORD *)v871 + 4))
                      {
                        **((_QWORD **)v871 + 6) = *((_QWORD *)v871 + 5);
                        v1503 = *((_QWORD *)v871 + 5);
                        if (v1503)
                          *(_QWORD *)(v1503 + 16) = *((_QWORD *)v871 + 6);
                      }
                      *v895 = v897;
                      if (v897)
                      {
                        v905 = v897[1];
                        v904 = (llvm::Value ****)(v897 + 1);
                        v903 = v905;
                        *((_QWORD *)v871 + 5) = v905;
                        if (v905)
                          *((_QWORD *)v903 + 2) = v871 + 40;
                        *((_QWORD *)v871 + 6) = v904;
                        *v904 = v895;
                      }
                      goto LABEL_1354;
                    }
                    if (v829 != 311)
                      return 0;
                    if (v828 > 0x40)
                    {
                      if (llvm::APInt::countLeadingZerosSlowCase(v1658) != (_DWORD)v828)
                        return 0;
                    }
                    else if (*(_QWORD *)v1658)
                    {
                      return 0;
                    }
                    v25 = (char *)operator new(0x80uLL);
                    v7 = (unint64_t)(v25 + 64);
                    *((_DWORD *)v25 + 21) = *((_DWORD *)v25 + 21) & 0x38000000 | 2;
                    *(_QWORD *)v25 = 0;
                    *((_QWORD *)v25 + 1) = 0;
                    *((_QWORD *)v25 + 4) = 0;
                    v878 = v25 + 32;
                    *((_QWORD *)v25 + 2) = 0;
                    *((_QWORD *)v25 + 3) = v25 + 64;
                    *((_QWORD *)v25 + 5) = 0;
                    *((_QWORD *)v25 + 6) = 0;
                    *((_QWORD *)v25 + 7) = v25 + 64;
                    v879 = (uint64_t *)&v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
                    v880 = *v879;
                    v881 = v879[4];
                    WORD4(v1691) = 257;
                    sub_1C4774CC4(*(_DWORD **)v880);
                    *((_QWORD *)v25 + 8) = v882;
                    *((_QWORD *)v25 + 9) = 0;
                    v883 = *((_DWORD *)v25 + 21) & 0xC0000000 | 2;
                    *((_DWORD *)v25 + 20) = 81;
                    *((_DWORD *)v25 + 21) = v883;
                    *(_OWORD *)(v25 + 88) = 0u;
                    *(_OWORD *)(v25 + 104) = 0u;
                    *((_DWORD *)v25 + 30) = 0;
                    if (*(_QWORD *)v25)
                    {
                      **((_QWORD **)v25 + 2) = *((_QWORD *)v25 + 1);
                      v1500 = *((_QWORD *)v25 + 1);
                      if (v1500)
                        *(_QWORD *)(v1500 + 16) = *((_QWORD *)v25 + 2);
                    }
                    *(_QWORD *)v25 = v880;
                    v886 = *(_QWORD *)(v880 + 8);
                    v885 = (_QWORD *)(v880 + 8);
                    v884 = v886;
                    *((_QWORD *)v25 + 1) = v886;
                    if (v886)
                      *(_QWORD *)(v884 + 16) = v25 + 8;
                    *((_QWORD *)v25 + 2) = v885;
                    *v885 = v25;
                    if (*((_QWORD *)v25 + 4))
                    {
                      **((_QWORD **)v25 + 6) = *((_QWORD *)v25 + 5);
                      v1501 = *((_QWORD *)v25 + 5);
                      if (v1501)
                        *(_QWORD *)(v1501 + 16) = *((_QWORD *)v25 + 6);
                    }
                    *v878 = v881;
                    if (v881)
                    {
                      v889 = *(_QWORD *)(v881 + 8);
                      v888 = (_QWORD *)(v881 + 8);
                      v887 = v889;
                      *((_QWORD *)v25 + 5) = v889;
                      if (v889)
                        *(_QWORD *)(v887 + 16) = v25 + 40;
                      *((_QWORD *)v25 + 6) = v888;
                      *v888 = v878;
                    }
                    v208 = v371 == 32;
                    goto LABEL_931;
                  }
                  v859 = &v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
                  if (*v859 != v859[4])
                    return 0;
                  if (v828 > 0x40)
                  {
                    if (llvm::APInt::countLeadingZerosSlowCase(v1658) != (_DWORD)v828
                      && llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v825) != (_DWORD)v828)
                    {
                      goto LABEL_1355;
                    }
                  }
                  else if ((_DWORD)v828 && *(_QWORD *)v1658 && *(_QWORD *)v1658 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v828)
                  {
LABEL_1355:
                    v1699 = 0;
                    v941 = (unsigned __int8 *)v859[8];
                    v1688 = (unint64_t)&v1699;
                    p_src = 0;
                    if (!sub_1C4D89F84((uint64_t)&v1688, v941))
                      return 0;
                    v942 = (char *)operator new(0x80uLL);
                    v7 = (unint64_t)(v942 + 64);
                    *((_DWORD *)v942 + 21) = *((_DWORD *)v942 + 21) & 0x38000000 | 2;
                    *(_QWORD *)v942 = 0;
                    *((_QWORD *)v942 + 1) = 0;
                    *((_QWORD *)v942 + 2) = 0;
                    *((_QWORD *)v942 + 3) = v942 + 64;
                    *((_QWORD *)v942 + 4) = 0;
                    v943 = (llvm::Value ***)(v942 + 32);
                    *((_QWORD *)v942 + 5) = 0;
                    *((_QWORD *)v942 + 6) = 0;
                    *((_QWORD *)v942 + 7) = v942 + 64;
                    v944 = v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
                    v945 = *((_DWORD *)*(v8 - 4) + 9);
                    if (v945 == 148)
                    {
                      v946 = (void **)&v1694;
                      llvm::APInt::rotr((llvm::APInt *)v825, (const void **)v1699, (uint64_t)&v1694);
                    }
                    else
                    {
                      v946 = &__src;
                      llvm::APInt::rotl((llvm::APInt *)v825, (const void **)v1699, (uint64_t)&__src);
                    }
                    v1167 = llvm::ConstantInt::get((llvm::ConstantInt **)v827, (llvm::Type *)v946, v947);
                    WORD4(v1691) = 257;
                    sub_1C4774CC4(*v944);
                    *((_QWORD *)v942 + 8) = v1168;
                    *((_QWORD *)v942 + 9) = 0;
                    v1169 = *((_DWORD *)v942 + 21) & 0xC0000000 | 2;
                    *((_DWORD *)v942 + 20) = 81;
                    *((_DWORD *)v942 + 21) = v1169;
                    *(_OWORD *)(v942 + 88) = 0u;
                    *(_OWORD *)(v942 + 104) = 0u;
                    *((_DWORD *)v942 + 30) = 0;
                    if (*(_QWORD *)v942)
                    {
                      **((_QWORD **)v942 + 2) = *((_QWORD *)v942 + 1);
                      v1584 = *((_QWORD *)v942 + 1);
                      if (v1584)
                        *(_QWORD *)(v1584 + 16) = *((_QWORD *)v942 + 2);
                    }
                    *(_QWORD *)v942 = v944;
                    v1172 = v944[1];
                    v1171 = v944 + 1;
                    v1170 = v1172;
                    *((_QWORD *)v942 + 1) = v1172;
                    if (v1172)
                      v1170[2] = (uint64_t)(v942 + 8);
                    *((_QWORD *)v942 + 2) = v1171;
                    *v1171 = v942;
                    if (*((_QWORD *)v942 + 4))
                    {
                      **((_QWORD **)v942 + 6) = *((_QWORD *)v942 + 5);
                      v1585 = *((_QWORD *)v942 + 5);
                      if (v1585)
                        *(_QWORD *)(v1585 + 16) = *((_QWORD *)v942 + 6);
                    }
                    *v943 = v1167;
                    if (v1167)
                    {
                      v1175 = v1167[1];
                      v1174 = (llvm::Value ****)(v1167 + 1);
                      v1173 = v1175;
                      *((_QWORD *)v942 + 5) = v1175;
                      if (v1175)
                        *((_QWORD *)v1173 + 2) = v942 + 40;
                      *((_QWORD *)v942 + 6) = v1174;
                      *v1174 = v943;
                    }
                    *((_WORD *)v942 + 41) = v371;
                    llvm::Value::setName((uint64_t ***)v7, (uint64_t)&v1688);
                    if (v945 != 148)
                    {
LABEL_1650:
                      if (v1684[0] < 0x41)
                        return v7;
                      v857 = __src;
                      if (!__src)
                        return v7;
LABEL_1228:
                      MEMORY[0x1CAA32F9C](v857, 0x1000C8000313F17);
                      return v7;
                    }
                    goto LABEL_1226;
                  }
                  v871 = (char *)operator new(0x80uLL);
                  v7 = (unint64_t)(v871 + 64);
                  *((_DWORD *)v871 + 21) = *((_DWORD *)v871 + 21) & 0x38000000 | 2;
                  *(_QWORD *)v871 = 0;
                  *((_QWORD *)v871 + 1) = 0;
                  *((_QWORD *)v871 + 4) = 0;
                  v921 = v871 + 32;
                  *((_QWORD *)v871 + 2) = 0;
                  *((_QWORD *)v871 + 3) = v871 + 64;
                  *((_QWORD *)v871 + 5) = 0;
                  *((_QWORD *)v871 + 6) = 0;
                  *((_QWORD *)v871 + 7) = v871 + 64;
                  v922 = v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
                  v923 = *(_QWORD *)(a2 - 32);
                  WORD4(v1691) = 257;
                  sub_1C4774CC4(*v922);
                  *((_QWORD *)v871 + 8) = v924;
                  *((_QWORD *)v871 + 9) = 0;
                  v925 = *((_DWORD *)v871 + 21) & 0xC0000000 | 2;
                  *((_DWORD *)v871 + 20) = 81;
                  *((_DWORD *)v871 + 21) = v925;
                  *(_OWORD *)(v871 + 88) = 0u;
                  *(_OWORD *)(v871 + 104) = 0u;
                  *((_DWORD *)v871 + 30) = 0;
                  if (*(_QWORD *)v871)
                  {
                    **((_QWORD **)v871 + 2) = *((_QWORD *)v871 + 1);
                    v1445 = *((_QWORD *)v871 + 1);
                    if (v1445)
                      *(_QWORD *)(v1445 + 16) = *((_QWORD *)v871 + 2);
                  }
                  *(_QWORD *)v871 = v922;
                  v928 = v922[1];
                  v927 = v922 + 1;
                  v926 = v928;
                  *((_QWORD *)v871 + 1) = v928;
                  if (v928)
                    v926[2] = (uint64_t)(v871 + 8);
                  *((_QWORD *)v871 + 2) = v927;
                  *v927 = v871;
                  if (*((_QWORD *)v871 + 4))
                  {
                    **((_QWORD **)v871 + 6) = *((_QWORD *)v871 + 5);
                    v1446 = *((_QWORD *)v871 + 5);
                    if (v1446)
                      *(_QWORD *)(v1446 + 16) = *((_QWORD *)v871 + 6);
                  }
                  *v921 = v923;
                  if (v923)
                  {
                    v931 = *(_QWORD *)(v923 + 8);
                    v930 = (_QWORD *)(v923 + 8);
                    v929 = v931;
                    *((_QWORD *)v871 + 5) = v931;
                    if (v931)
                      *(_QWORD *)(v929 + 16) = v871 + 40;
                    *((_QWORD *)v871 + 6) = v930;
                    *v930 = v921;
                  }
                  goto LABEL_1354;
                }
                v831 = *(_DWORD *)(v816 + 36);
                if (v831 != 52)
                {
                  if (v831 != 54)
                  {
                    if (v831 != 53)
                      return 0;
                    v832 = (uint64_t)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
                    if (v828 >= 0x41)
                    {
                      if (v828 - llvm::APInt::countLeadingZerosSlowCase(v1658) >= 0x41)
                        return 0;
                      v833 = **v825;
                    }
                    else
                    {
                      v833 = *(_QWORD *)v1658;
                    }
                    if (v371 == 34 && v833 == (_DWORD)v828 - 1)
                    {
                      v860 = llvm::Constant::getAllOnesValue(v827, (llvm::Type *)v5);
                      WORD4(v1691) = 257;
                      v861 = 32;
                    }
                    else
                    {
                      if (v371 != 36 || v833 != v828)
                        return 0;
                      v860 = llvm::Constant::getAllOnesValue(v827, (llvm::Type *)v5);
                      WORD4(v1691) = 257;
                      v861 = 33;
                    }
                    v7 = (unint64_t)llvm::CmpInst::Create(53, v861, v832, (uint64_t)v860, (uint64_t)&v1688, 0);
LABEL_1375:
                    if (v7)
                      return v7;
                    return 0;
                  }
                  v837 = v8[1];
                  if (!v837 || v837[1])
                    return 0;
                  if (v371 == 36)
                  {
                    if (v828 >= 0x41)
                    {
                      if (v828 - llvm::APInt::countLeadingZerosSlowCase(v1658) >= 0x41)
                        return 0;
                      v961 = **v825;
                      if (v961 - 1 >= v828)
                        return 0;
                      v1684[0] = v828;
                      llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
                    }
                    else
                    {
                      v961 = *(_QWORD *)v1658;
                      if (*(_QWORD *)v1658 - 1 >= (unint64_t)v828)
                        return 0;
                      v1684[0] = *((_DWORD *)v1658 + 2);
                      __src = 0;
                    }
                    sub_1C4912E54(&__src, 0, v961);
                    v962 = a1[3];
                    v963 = (llvm::ConstantInt ***)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
                    WORD4(v1691) = 257;
                    v965 = llvm::ConstantInt::get(*v963, (llvm::Type *)&__src, v964);
                    v957 = sub_1C4D89BCC(v962, v963, (uint64_t)v965, (uint64_t)&v1688);
                    v959 = llvm::Constant::getNullValue(v827, v966);
                    v1698 = 257;
                    v960 = 33;
                  }
                  else
                  {
                    if (v371 != 34)
                      return 0;
                    if (v828 >= 0x41)
                    {
                      if (v828 - llvm::APInt::countLeadingZerosSlowCase(v1658) >= 0x41)
                        return 0;
                      v838 = **v825;
                      if (v838 >= v828)
                        return 0;
                      v1684[0] = v828;
                      llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
                    }
                    else
                    {
                      v838 = *(_QWORD *)v1658;
                      if (*(_QWORD *)v1658 >= v828)
                        return 0;
                      v1684[0] = *((_DWORD *)v1658 + 2);
                      __src = 0;
                    }
                    sub_1C4912E54(&__src, 0, v838 + 1);
                    v953 = a1[3];
                    v954 = (llvm::ConstantInt ***)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
                    WORD4(v1691) = 257;
                    v956 = llvm::ConstantInt::get(*v954, (llvm::Type *)&__src, v955);
                    v957 = sub_1C4D89BCC(v953, v954, (uint64_t)v956, (uint64_t)&v1688);
                    v959 = llvm::Constant::getNullValue(v827, v958);
                    v1698 = 257;
                    v960 = 32;
                  }
                  v7 = (unint64_t)llvm::CmpInst::Create(53, v960, v957, (uint64_t)v959, (uint64_t)&v1694, 0);
                  if (v1684[0] < 0x41)
                    goto LABEL_1375;
                  v920 = (unint64_t)__src;
                  if (!__src)
                    goto LABEL_1375;
LABEL_1324:
                  MEMORY[0x1CAA32F9C](v920, 0x1000C8000313F17);
                  goto LABEL_1375;
                }
                if (v371 == 36)
                {
                  if (v828 >= 0x41)
                  {
                    if (v828 - llvm::APInt::countLeadingZerosSlowCase(v1658) >= 0x41)
                      return 0;
                    v918 = **v825;
                    if (v918 - 1 >= v828)
                      return 0;
                    LODWORD(v1695) = v828;
                    llvm::APInt::initSlowCase((llvm::APInt *)&v1694, 0, 0);
                  }
                  else
                  {
                    v918 = *(_QWORD *)v1658;
                    if (*(_QWORD *)v1658 - 1 >= (unint64_t)v828)
                      return 0;
                    LODWORD(v1695) = *((_DWORD *)v1658 + 2);
                    v1694 = 0;
                  }
                  sub_1C4912E54(&v1694, 0, v828 - v918);
                  v842 = (uint64_t)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
                  v843 = llvm::ConstantInt::get((llvm::ConstantInt **)v827, (llvm::Type *)&v1694, v919);
                  WORD4(v1691) = 257;
                  v844 = 34;
LABEL_1322:
                  v7 = (unint64_t)llvm::CmpInst::Create(53, v844, v842, (uint64_t)v843, (uint64_t)&v1688, 0);
                  if (v1695 < 0x41)
                    goto LABEL_1375;
                  v920 = v1694;
                  if (!v1694)
                    goto LABEL_1375;
                  goto LABEL_1324;
                }
                if (v371 != 34)
                  return 0;
                if (v828 >= 0x41)
                {
                  if (v828 - llvm::APInt::countLeadingZerosSlowCase(v1658) >= 0x41)
                    return 0;
                  v916 = **v825;
                  if (v916 >= v828)
                    return 0;
                  v917 = v828 + ~(_DWORD)v916;
                  LODWORD(v1695) = v828;
                  llvm::APInt::initSlowCase((llvm::APInt *)&v1694, 0, 0);
                  v841 = 1 << v917;
                  if (v1695 > 0x40)
                  {
                    *(_QWORD *)(v1694 + 8 * (v917 >> 6)) |= v841;
                    goto LABEL_1213;
                  }
                  v840 = v1694;
                }
                else
                {
                  v839 = *(_QWORD *)v1658;
                  if (*(_QWORD *)v1658 >= v828)
                    return 0;
                  v840 = 0;
                  LODWORD(v1695) = *((_DWORD *)v1658 + 2);
                  v841 = 1 << (v828 + ~(_BYTE)v839);
                }
                v1694 = v841 | v840;
LABEL_1213:
                v842 = (uint64_t)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
                v843 = llvm::ConstantInt::get((llvm::ConstantInt **)v827, (llvm::Type *)&v1694, (const llvm::APInt *)v6);
                WORD4(v1691) = 257;
                v844 = 36;
                goto LABEL_1322;
              }
            }
            else
            {
              v818 = llvm::Constant::getAllOnesValue((llvm::Constant *)v803, v799);
              WORD4(v1691) = 257;
              sub_1C4774CC4(*v802);
              *((_QWORD *)v800 + 8) = v819;
              *((_QWORD *)v800 + 9) = 0;
              v820 = *((_DWORD *)v800 + 21) & 0xC0000000 | 2;
              *((_DWORD *)v800 + 20) = 81;
              *((_DWORD *)v800 + 21) = v820;
              *v804 = 0u;
              *(_OWORD *)(v800 + 104) = 0u;
              *((_DWORD *)v800 + 30) = 0;
              if (*(_QWORD *)v800)
              {
                **((_QWORD **)v800 + 2) = *((_QWORD *)v800 + 1);
                v1274 = *((_QWORD *)v800 + 1);
                if (v1274)
                  *(_QWORD *)(v1274 + 16) = *((_QWORD *)v800 + 2);
              }
              *(_QWORD *)v800 = v802;
              v823 = v802[1];
              v822 = v802 + 1;
              v821 = v823;
              *((_QWORD *)v800 + 1) = v823;
              if (v823)
                *((_QWORD *)v821 + 2) = v800 + 8;
              *((_QWORD *)v800 + 2) = v822;
              *v822 = v800;
              if (*((_QWORD *)v800 + 4))
              {
                **((_QWORD **)v800 + 6) = *((_QWORD *)v800 + 5);
                v1275 = *((_QWORD *)v800 + 5);
                if (v1275)
                  *(_QWORD *)(v1275 + 16) = *((_QWORD *)v800 + 6);
              }
              *v801 = v818;
              if (!v818)
              {
                v815 = 38;
                goto LABEL_1157;
              }
              v824 = (llvm::Value *)*((_QWORD *)v818 + 1);
              v812 = (_QWORD *)((char *)v818 + 8);
              v811 = v824;
              *((_QWORD *)v800 + 5) = v824;
              v814 = v800 + 40;
              v815 = 38;
              if (!v824)
                goto LABEL_1156;
            }
            *((_QWORD *)v811 + 2) = v814;
            goto LABEL_1156;
          }
          v1699 = 0;
          __dst = 0;
          LODWORD(v1685) = 64;
          __src = &v1699;
          *(_QWORD *)v1684 = (v754 - 1);
          v1697 = 64;
          v1695 = &__dst;
          v1696 = *(_QWORD *)v1684;
          sub_1C62A892C((uint64_t)&v1688, &__src, (uint64_t)&v1694);
          v774 = *((unsigned __int8 *)v747 + 16);
          if (v774 == 5)
          {
            if (*((_WORD *)v747 + 9) == 29)
            {
              v834 = v747[-4 * (*((_DWORD *)v747 + 5) & 0x7FFFFFF)];
              v835 = *((unsigned __int8 *)v834 + 16);
              if (v835 == 5)
              {
                if (*((_WORD *)v834 + 9) != 27)
                  goto LABEL_1258;
                v862 = v834[-4 * (*((_DWORD *)v834 + 5) & 0x7FFFFFF)];
                if (!v862)
                  goto LABEL_1258;
                *(_QWORD *)v1688 = v862;
                if (!sub_1C4D8A86C((llvm::APInt *)&p_src, v834[-4 * (*((_DWORD *)v834 + 5) & 0x7FFFFFF) + 4]))
                  goto LABEL_1258;
              }
              else
              {
                if (v835 != 55)
                  goto LABEL_1258;
                v836 = (uint64_t)*(v834 - 8);
                if (!v836)
                  goto LABEL_1258;
                *(_QWORD *)v1688 = v836;
                if (!sub_1C4D8A7F0((llvm::APInt *)&p_src, (unsigned __int8 *)*(v834 - 4)))
                  goto LABEL_1258;
              }
              v863 = &v747[-4 * (*((_DWORD *)v747 + 5) & 0x7FFFFFF)];
              if (sub_1C5819B98((uint64_t)&v1691, (uint64_t)v863[4], (char)v863))
              {
LABEL_1252:
                v864 = (_DWORD **)v1699;
                if (v1699 && (void *)v1699 == __dst)
                {
                  sub_1C62A89BC((uint64_t)&v1688);
                  v25 = (char *)operator new(0x80uLL);
                  v7 = (unint64_t)(v25 + 64);
                  *((_DWORD *)v25 + 21) = *((_DWORD *)v25 + 21) & 0x38000000 | 2;
                  *(_QWORD *)v25 = 0;
                  *((_QWORD *)v25 + 1) = 0;
                  *((_QWORD *)v25 + 2) = 0;
                  *((_QWORD *)v25 + 3) = v25 + 64;
                  *((_QWORD *)v25 + 4) = 0;
                  v26 = v25 + 32;
                  *((_QWORD *)v25 + 5) = 0;
                  *((_QWORD *)v25 + 6) = 0;
                  *((_QWORD *)v25 + 7) = v25 + 64;
                  v162 = llvm::ConstantInt::get((llvm::ConstantInt *)*v864, 1, 0);
                  WORD4(v1691) = 257;
                  sub_1C4774CC4(*v864);
                  *((_QWORD *)v25 + 8) = v865;
                  *((_QWORD *)v25 + 9) = 0;
                  v866 = *((_DWORD *)v25 + 21) & 0xC0000000 | 2;
                  *((_DWORD *)v25 + 20) = 81;
                  *((_DWORD *)v25 + 21) = v866;
                  *(_OWORD *)(v25 + 88) = 0u;
                  *(_OWORD *)(v25 + 104) = 0u;
                  *((_DWORD *)v25 + 30) = 0;
                  if (*(_QWORD *)v25)
                  {
                    **((_QWORD **)v25 + 2) = *((_QWORD *)v25 + 1);
                    v1519 = *((_QWORD *)v25 + 1);
                    if (v1519)
                      *(_QWORD *)(v1519 + 16) = *((_QWORD *)v25 + 2);
                  }
                  *(_QWORD *)v25 = v864;
                  v869 = v864[1];
                  v868 = v864 + 1;
                  v867 = v869;
                  *((_QWORD *)v25 + 1) = v869;
                  if (v869)
                    *((_QWORD *)v867 + 2) = v25 + 8;
                  *((_QWORD *)v25 + 2) = v868;
                  *v868 = v25;
LABEL_202:
                  if (*((_QWORD *)v25 + 4))
                  {
                    **((_QWORD **)v25 + 6) = *((_QWORD *)v25 + 5);
                    v1292 = *((_QWORD *)v25 + 5);
                    if (v1292)
                      *(_QWORD *)(v1292 + 16) = *((_QWORD *)v25 + 6);
                  }
                  *v26 = v162;
                  if (v162)
                  {
                    v170 = v162[1];
                    v169 = v162 + 1;
                    v168 = v170;
                    *((_QWORD *)v25 + 5) = v170;
                    if (v170)
                      *((_QWORD *)v168 + 2) = v25 + 40;
                    *((_QWORD *)v25 + 6) = v169;
                    *v169 = v26;
                  }
                  v38 = 40;
                  goto LABEL_970;
                }
              }
            }
          }
          else if (v774 == 57)
          {
            v775 = (uint64_t)*(v747 - 8);
            v776 = *(unsigned __int8 *)(v775 + 16);
            if (v776 == 5)
            {
              if (*(_WORD *)(v775 + 18) != 27)
                goto LABEL_1258;
              v858 = *(_QWORD *)(v775 - 32 * (*(_DWORD *)(v775 + 20) & 0x7FFFFFF));
              if (!v858)
                goto LABEL_1258;
              *(_QWORD *)v1688 = v858;
              if (!sub_1C4D8A86C((llvm::APInt *)&p_src, *(llvm::Constant **)(v775 - 32 * (*(_DWORD *)(v775 + 20) & 0x7FFFFFF) + 32)))goto LABEL_1258;
            }
            else
            {
              if (v776 != 55)
                goto LABEL_1258;
              v777 = *(_QWORD *)(v775 - 64);
              if (!v777)
                goto LABEL_1258;
              *(_QWORD *)v1688 = v777;
              if (!sub_1C4D8A7F0((llvm::APInt *)&p_src, *(unsigned __int8 **)(v775 - 32)))
                goto LABEL_1258;
            }
            if (sub_1C5819B98((uint64_t)&v1691, (uint64_t)*(v747 - 4), (char)&v1688))
              goto LABEL_1252;
          }
LABEL_1258:
          sub_1C62A89BC((uint64_t)&v1688);
          v7 = *(unsigned __int16 *)(a2 + 18);
          goto LABEL_1089;
        }
        v744 = v738 & 0x3F;
        if (v737 != (unsigned __int8 *)v726)
        {
          if (v5 != (unsigned __int8 *)v726)
            goto LABEL_1073;
          LODWORD(v744) = dword_1C86618B4[v744];
          v5 = v737;
        }
        if ((_DWORD)v744 == 38)
        {
          if (v5[16] > 0x14u)
            goto LABEL_1073;
          sub_1C57F39E0((llvm::Constant *)v5, 38, (uint64_t)&v1688);
          if (!(_BYTE)v1690)
            goto LABEL_1073;
          v5 = (unsigned __int8 *)p_src;
          LODWORD(v744) = 40;
          v6 = v742;
        }
        else
        {
          v6 = v740;
          v740 = v742;
        }
        if ((_DWORD)v744 != 40 || v727 != (_QWORD)v5)
          goto LABEL_1073;
        v1536 = (llvm::ConstantExpr *)(*(_WORD *)(a2 + 18) & 0x3F);
        if (v1536 <= 0xF)
          FCmp = (llvm::Constant *)llvm::ConstantExpr::getFCmp(v1536, (uint64_t ***)v6, v723, 0);
        else
          FCmp = llvm::ConstantExpr::getICmp(v1536, (unsigned __int8 *)v6, v723, 0);
        isAllOnesValue = llvm::Constant::isAllOnesValue(FCmp);
        v1539 = (llvm::ConstantExpr *)(*(_WORD *)(a2 + 18) & 0x3F);
        if (v1539 <= 0xF)
          ICmp = (llvm::Constant *)llvm::ConstantExpr::getFCmp(v1539, (uint64_t ***)v732, v723, 0);
        else
          ICmp = llvm::ConstantExpr::getICmp(v1539, (unsigned __int8 *)v732, v723, 0);
        v1541 = llvm::Constant::isAllOnesValue(ICmp);
        v1542 = (llvm::ConstantExpr *)(*(_WORD *)(a2 + 18) & 0x3F);
        if (v1542 <= 0xF)
          v1543 = (llvm::Constant *)llvm::ConstantExpr::getFCmp(v1542, (uint64_t ***)v740, v723, 0);
        else
          v1543 = llvm::ConstantExpr::getICmp(v1542, (unsigned __int8 *)v740, v723, 0);
        v1545 = llvm::Constant::isAllOnesValue(v1543);
        v1546 = *(uint64_t **)(a1[3] + 64);
        v1547 = *v1546;
        v1548 = *(llvm::Value **)(*v1546 + 1568);
        if (v1548)
        {
          if (isAllOnesValue)
            goto LABEL_2175;
        }
        else
        {
          v1618 = *(llvm::ConstantInt **)(v1547 + 1888);
          LODWORD(p_src) = *(_DWORD *)(v1547 + 1896) >> 8;
          if (p_src > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v1688, 0, 0);
          else
            v1688 = 0;
          v1548 = llvm::ConstantInt::get(v1618, (llvm::LLVMContext *)&v1688, v1544);
          if (p_src >= 0x41 && v1688)
            MEMORY[0x1CAA32F9C](v1688, 0x1000C8000313F17);
          *(_QWORD *)(v1547 + 1568) = v1548;
          if (isAllOnesValue)
          {
LABEL_2175:
            v1549 = a1[3];
            WORD4(v1691) = 257;
            v1550 = sub_1C4774B48(v1549, 40, v726, v727, (uint64_t)&v1688);
            v1698 = 257;
            v1548 = (llvm::Value *)sub_1C4773594(v1549, v1548, v1550, (uint64_t)&v1694);
            if (!v1541)
              goto LABEL_2176;
            goto LABEL_2279;
          }
        }
        if (!v1541)
        {
LABEL_2176:
          if (!v1545)
            goto LABEL_2178;
          goto LABEL_2177;
        }
LABEL_2279:
        v1619 = a1[3];
        WORD4(v1691) = 257;
        v1620 = sub_1C4774B48(v1619, 32, v726, v727, (uint64_t)&v1688);
        v1698 = 257;
        v1548 = (llvm::Value *)sub_1C4773594(v1619, v1548, v1620, (uint64_t)&v1694);
        if (!v1545)
        {
LABEL_2178:
          v7 = (unint64_t)sub_1C577F888((uint64_t)a1, (llvm::ValueAsMetadata *)a2, v1548);
          if (v7)
            return v7;
          goto LABEL_1073;
        }
LABEL_2177:
        v1551 = a1[3];
        WORD4(v1691) = 257;
        v1552 = sub_1C4774B48(v1551, 38, v726, v727, (uint64_t)&v1688);
        v1698 = 257;
        v1548 = (llvm::Value *)sub_1C4773594(v1551, v1548, v1552, (uint64_t)&v1694);
        goto LABEL_2178;
      }
      v241 = (llvm::Constant *)*v8;
      llvm::APInt::sdiv(v39, (const void **)v1694, (llvm::APInt *)&v1688);
      goto LABEL_448;
    case '/':
      v92 = v1658;
      __dst = 0;
      v93 = (unsigned __int8 *)*(v8 - 8);
      v1688 = (unint64_t)&__dst;
      p_src = 0;
      if (!sub_1C4D89F84((uint64_t)&v1688, v93))
        goto LABEL_101;
      v382 = (_DWORD **)*(v8 - 4);
      v383 = *(_WORD *)(a2 + 18) & 0x3F;
      if (v383 != 36)
      {
        if (v383 == 34)
        {
          v384 = (char *)operator new(0x80uLL);
          v7 = (unint64_t)(v384 + 64);
          *((_DWORD *)v384 + 21) = *((_DWORD *)v384 + 21) & 0x38000000 | 2;
          *(_QWORD *)v384 = 0;
          *((_QWORD *)v384 + 1) = 0;
          *((_QWORD *)v384 + 2) = 0;
          *((_QWORD *)v384 + 3) = v384 + 64;
          *((_QWORD *)v384 + 4) = 0;
          v385 = (llvm::Value ***)(v384 + 32);
          *((_QWORD *)v384 + 5) = 0;
          *((_QWORD *)v384 + 6) = 0;
          *((_QWORD *)v384 + 7) = v384 + 64;
          v386 = (llvm::ConstantInt **)*v382;
          v387 = (llvm::APInt *)__dst;
          v388 = *((unsigned int *)v92 + 2);
          LODWORD(v1700) = v388;
          if (v388 > 0x40)
          {
            v1447 = ((unint64_t)(v388 + 63) >> 3) & 0x3FFFFFF8;
            v1699 = operator new[]();
            memcpy((void *)v1699, *(const void **)v92, v1447);
          }
          else
          {
            v1699 = *(_QWORD *)v92;
          }
          llvm::APInt::operator+=((uint64_t)&v1699, 1uLL);
          v1684[0] = v1700;
          __src = (void *)v1699;
          LODWORD(v1700) = 0;
          llvm::APInt::udiv(v387, (const llvm::APInt *)&__src, (llvm::APInt *)&v1694);
          v1449 = llvm::ConstantInt::get(v386, (llvm::Type *)&v1694, v1448);
          WORD4(v1691) = 257;
          sub_1C4774CC4(*v382);
          *((_QWORD *)v384 + 8) = v1450;
          *((_QWORD *)v384 + 9) = 0;
          v1451 = *((_DWORD *)v384 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v384 + 20) = 81;
          *((_DWORD *)v384 + 21) = v1451;
          *(_OWORD *)(v384 + 88) = 0u;
          *(_OWORD *)(v384 + 104) = 0u;
          *((_DWORD *)v384 + 30) = 0;
          if (*(_QWORD *)v384)
          {
            **((_QWORD **)v384 + 2) = *((_QWORD *)v384 + 1);
            v1635 = *((_QWORD *)v384 + 1);
            if (v1635)
              *(_QWORD *)(v1635 + 16) = *((_QWORD *)v384 + 2);
          }
          *(_QWORD *)v384 = v382;
          v1454 = v382[1];
          v1453 = v382 + 1;
          v1452 = v1454;
          *((_QWORD *)v384 + 1) = v1454;
          if (v1454)
            *((_QWORD *)v1452 + 2) = v384 + 8;
          *((_QWORD *)v384 + 2) = v1453;
          *v1453 = v384;
          if (*((_QWORD *)v384 + 4))
          {
            **((_QWORD **)v384 + 6) = *((_QWORD *)v384 + 5);
            v1636 = *((_QWORD *)v384 + 5);
            if (v1636)
              *(_QWORD *)(v1636 + 16) = *((_QWORD *)v384 + 6);
          }
          *v385 = v1449;
          if (v1449)
          {
            v1457 = v1449[1];
            v1456 = (llvm::Value ****)(v1449 + 1);
            v1455 = v1457;
            *((_QWORD *)v384 + 5) = v1457;
            if (v1457)
              *((_QWORD *)v1455 + 2) = v384 + 40;
            *((_QWORD *)v384 + 6) = v1456;
            *v1456 = v385;
          }
          *((_WORD *)v384 + 41) = 37;
          llvm::Value::setName((uint64_t ***)v7, (uint64_t)&v1688);
          if (v1695 >= 0x41 && v1694)
            MEMORY[0x1CAA32F9C](v1694, 0x1000C8000313F17);
          if (v1684[0] >= 0x41 && __src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
          if (v1700 >= 0x41)
          {
            v857 = (_QWORD *)v1699;
            if (v1699)
              goto LABEL_1228;
          }
          return v7;
        }
LABEL_101:
        v94 = v1658;
        v1665 = 0;
        v95 = (unsigned __int8 *)*(v8 - 4);
        v1688 = (unint64_t)&v1665;
        p_src = 0;
        if (!sub_1C4D89F84((uint64_t)&v1688, v95))
          goto LABEL_881;
        v96 = *((unsigned __int8 *)v8 + 16);
        v97 = *(_WORD *)(a2 + 18) & 0x3E;
        if (v97 != 32 && (v96 == 48) != (v97 - 38) < 4)
          goto LABEL_881;
        v98 = v1665;
        v99 = *((_DWORD *)v1665 + 2);
        if (v99 > 0x40)
        {
          v108 = llvm::APInt::countLeadingZerosSlowCase(v1665);
          if (v108 == v99 || v108 == v99 - 1)
            goto LABEL_881;
        }
        else if (*(_QWORD *)v1665 < 2uLL)
        {
          goto LABEL_881;
        }
        if (v96 == 48)
        {
          if (!v99)
            goto LABEL_881;
          if (v99 > 0x40)
          {
            if (llvm::APInt::countTrailingOnesSlowCase(v98) == v99)
              goto LABEL_881;
          }
          else if (*(_QWORD *)v98 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v99)
          {
            goto LABEL_881;
          }
          llvm::APInt::operator*((uint64_t)v94, v98, (uint64_t)&v1694);
          llvm::APInt::sdiv((llvm::APInt *)&v1694, (const void **)v1665, (llvm::APInt *)&v1688);
        }
        else
        {
          llvm::APInt::operator*((uint64_t)v94, v98, (uint64_t)&v1694);
          llvm::APInt::udiv((llvm::APInt *)&v1694, v1665, (llvm::APInt *)&v1688);
        }
        if (p_src > 0x40)
        {
          v172 = v1688;
          v171 = memcmp((const void *)v1688, *(const void **)v94, (((unint64_t)p_src + 63) >> 3) & 0x3FFFFFF8) == 0;
          if (v172)
            MEMORY[0x1CAA32F9C](v172, 0x1000C8000313F17);
        }
        else
        {
          v171 = v1688 == *(_QWORD *)v94;
        }
        v173 = *(_WORD *)(a2 + 18);
        v174 = (const void **)v1665;
        if ((*((_BYTE *)v8 + 17) & 2) != 0)
        {
          v176 = *((_DWORD *)v1665 + 2);
          v1684[0] = v176;
          if (v176 <= 0x40)
          {
            if (v176)
              v177 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v176;
            else
              LOBYTE(v177) = 0;
            v175 = (void *)(v177 & 1);
            goto LABEL_221;
          }
          llvm::APInt::initSlowCase((llvm::APInt *)&__src, 1, 0);
        }
        else
        {
          v1684[0] = *((_DWORD *)v1665 + 2);
          if (v1684[0] <= 0x40)
          {
            v175 = *(void **)v1665;
LABEL_221:
            __src = v175;
            goto LABEL_223;
          }
          __src = (void *)operator new[]();
          memcpy(__src, *v174, (((unint64_t)v1684[0] + 63) >> 3) & 0x3FFFFFF8);
        }
LABEL_223:
        LODWORD(v1700) = 1;
        v178 = v173 & 0x3F;
        v1699 = 0;
        v1682 = 1;
        __dst = 0;
        if (v96 != 48)
        {
          if (v1695 > 0x40)
          {
            llvm::APInt::reallocate((uint64_t)&v1699, v1695);
            if (v1700 <= 0x40)
            {
              v1699 = v1694;
              if (!v171)
                goto LABEL_874;
            }
            else
            {
              memcpy((void *)v1699, (const void *)v1694, (((unint64_t)v1700 + 63) >> 3) & 0x3FFFFFF8);
              if (!v171)
                goto LABEL_874;
            }
          }
          else
          {
            v1699 = v1694;
            LODWORD(v1700) = (_DWORD)v1695;
            if (!v171)
              goto LABEL_874;
          }
          v185 = (const void **)&v1699;
          v186 = 0;
LABEL_252:
          sub_1C57F38D0((uint64_t)&__dst, v185, (llvm::APInt *)&__src, v186);
          goto LABEL_874;
        }
        if (sub_1C49591DC(v1665))
        {
          v179 = *((_DWORD *)v94 + 2);
          if (v179 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase(v94) != v179)
            {
LABEL_227:
              if (sub_1C49591DC(v94))
              {
                if (v1700 <= 0x40 && v1695 <= 0x40)
                {
                  v1699 = v1694;
                  LODWORD(v1700) = (_DWORD)v1695;
                  if (!v171)
                    goto LABEL_874;
                  goto LABEL_582;
                }
                llvm::APInt::reallocate((uint64_t)&v1699, v1695);
                if (v1700 > 0x40)
                {
                  memcpy((void *)v1699, (const void *)v1694, (((unint64_t)v1700 + 63) >> 3) & 0x3FFFFFF8);
                  if (!v171)
                    goto LABEL_874;
                  goto LABEL_582;
                }
                v1699 = v1694;
                if (v171)
                {
LABEL_582:
                  v185 = (const void **)&v1694;
                  v186 = 1;
                  goto LABEL_252;
                }
LABEL_874:
                __asm { BR              X10 }
              }
              v1676 = v1695;
              if (v1695 > 0x40)
              {
                v1675 = (llvm::Type *)operator new[]();
                memcpy(v1675, (const void *)v1694, (((unint64_t)v1676 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v1675 = (llvm::Type *)v1694;
              }
              llvm::APInt::operator+=((uint64_t)&v1675, 1uLL);
              v414 = v1676;
              v415 = v1675;
              v1676 = 0;
              if (v1682 > 0x40 && __dst)
              {
                MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
                __dst = v415;
                v1682 = v414;
                if (v1676 >= 0x41 && v1675)
                  MEMORY[0x1CAA32F9C](v1675, 0x1000C8000313F17);
              }
              else
              {
                __dst = v1675;
                v1682 = v414;
              }
              if (!v171)
                goto LABEL_874;
              v416 = v1684[0];
              v1674 = v1684[0];
              if (v1684[0] > 0x40)
              {
                v417 = operator new[]();
                v1673 = (void *)v417;
                v416 = v1674;
                memcpy((void *)v417, __src, (((unint64_t)v1674 + 63) >> 3) & 0x3FFFFFF8);
                if (v416 > 0x40)
                {
                  llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1673);
                  goto LABEL_817;
                }
              }
              else
              {
                v417 = (uint64_t)__src;
              }
              if (v416)
                v562 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v416;
              else
                v562 = 0;
              v1673 = (void *)(v562 & ~v417);
LABEL_817:
              llvm::APInt::operator++((uint64_t)&v1673);
              LODWORD(p_src) = v1674;
              v1688 = (unint64_t)v1673;
              v1674 = 0;
              sub_1C57F38D0((uint64_t)&v1699, (const void **)&__dst, (llvm::APInt *)&v1688, 1);
              if (p_src >= 0x41 && v1688)
                MEMORY[0x1CAA32F9C](v1688, 0x1000C8000313F17);
              goto LABEL_874;
            }
          }
          else if (*(_QWORD *)v94)
          {
            goto LABEL_227;
          }
          v1678 = v1684[0];
          if (v1684[0] > 0x40)
          {
            v1677 = (llvm::APInt *)operator new[]();
            memcpy(v1677, __src, (((unint64_t)v1678 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v1677 = (llvm::APInt *)__src;
          }
          llvm::APInt::operator-=((uint64_t)&v1677, 1uLL);
          v378 = v1678;
          v1680 = v1678;
          __s2 = v1677;
          v1678 = 0;
          if (v1680 > 0x40)
          {
            llvm::APInt::flipAllBitsSlowCase((uint64_t)&__s2);
          }
          else
          {
            if (v378)
              v379 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v378;
            else
              v379 = 0;
            __s2 = (void *)(v379 & ~(unint64_t)v1677);
          }
          llvm::APInt::operator++((uint64_t)&__s2);
          v380 = v1680;
          v381 = __s2;
          v1680 = 0;
          if (v1700 > 0x40 && v1699)
          {
            MEMORY[0x1CAA32F9C](v1699, 0x1000C8000313F17);
            v1699 = (unint64_t)v381;
            LODWORD(v1700) = v380;
            if (v1680 >= 0x41 && __s2)
              MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
          }
          else
          {
            v1699 = (unint64_t)__s2;
            LODWORD(v1700) = v380;
          }
          if (v1678 >= 0x41 && v1677)
            MEMORY[0x1CAA32F9C](v1677, 0x1000C8000313F17);
          if (v1682 > 0x40 || v1684[0] > 0x40)
          {
            llvm::APInt::reallocate((uint64_t)&__dst, v1684[0]);
            if (v1682 <= 0x40)
              __dst = __src;
            else
              memcpy(__dst, __src, (((unint64_t)v1682 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            __dst = __src;
            v1682 = v1684[0];
          }
          goto LABEL_874;
        }
        v180 = v1665;
        v181 = *((_DWORD *)v1665 + 2);
        v182 = v181 - 1;
        if (v181 >= 0x41)
          v180 = (llvm::APInt *)(*(_QWORD *)v1665 + 8 * (v182 >> 6));
        if (((*(_QWORD *)v180 >> v182) & 1) == 0)
          goto LABEL_874;
        if ((*((_BYTE *)v8 + 17) & 2) != 0)
        {
          if (v1684[0] > 0x40)
          {
            llvm::APInt::flipAllBitsSlowCase((uint64_t)&__src);
          }
          else
          {
            if (v1684[0])
              v183 = 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(v1684[0]);
            else
              v183 = 0;
            __src = (void *)(v183 & ~(unint64_t)__src);
          }
          llvm::APInt::operator++((uint64_t)&__src);
        }
        v184 = *((_DWORD *)v94 + 2);
        if (v184 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase(v94) != v184)
          {
LABEL_246:
            if (sub_1C49591DC(v94))
            {
              v1668 = v1695;
              if (v1695 > 0x40)
              {
                v1667 = (llvm::APInt *)operator new[]();
                memcpy(v1667, (const void *)v1694, (((unint64_t)v1668 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v1667 = (llvm::APInt *)v1694;
              }
              llvm::APInt::operator+=((uint64_t)&v1667, 1uLL);
              v506 = v1668;
              v507 = v1667;
              v1668 = 0;
              if (v1682 > 0x40 && __dst)
              {
                MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
                __dst = v507;
                v1682 = v506;
                if (v1668 >= 0x41 && v1667)
                  MEMORY[0x1CAA32F9C](v1667, 0x1000C8000313F17);
              }
              else
              {
                __dst = v1667;
                v1682 = v506;
              }
              if (v171)
                sub_1C57F38D0((uint64_t)&v1699, (const void **)&__dst, (llvm::APInt *)&__src, 1);
              goto LABEL_844;
            }
            if (v1700 > 0x40 || v1695 > 0x40)
            {
              llvm::APInt::reallocate((uint64_t)&v1699, v1695);
              if (v1700 <= 0x40)
              {
                v1699 = v1694;
                if (v171)
                  goto LABEL_559;
              }
              else
              {
                memcpy((void *)v1699, (const void *)v1694, (((unint64_t)v1700 + 63) >> 3) & 0x3FFFFFF8);
                if (v171)
                  goto LABEL_559;
              }
            }
            else
            {
              v1699 = v1694;
              LODWORD(v1700) = (_DWORD)v1695;
              if (v171)
LABEL_559:
                sub_1C57F3958((uint64_t)&__dst, (const void **)&v1694, (llvm::APInt *)&__src, 1);
            }
LABEL_844:
            if (v178 > 31)
              __asm { BR              X12 }
            goto LABEL_874;
          }
        }
        else if (*(_QWORD *)v94)
        {
          goto LABEL_246;
        }
        v1672 = v1684[0];
        if (v1684[0] > 0x40)
        {
          v1671 = (llvm::APInt *)operator new[]();
          memcpy(v1671, __src, (((unint64_t)v1672 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v1671 = (llvm::APInt *)__src;
        }
        llvm::APInt::operator+=((uint64_t)&v1671, 1uLL);
        v418 = v1672;
        v419 = v1671;
        v1672 = 0;
        if (v1700 > 0x40 && v1699)
        {
          MEMORY[0x1CAA32F9C](v1699, 0x1000C8000313F17);
          v1699 = (unint64_t)v419;
          LODWORD(v1700) = v418;
          if (v1672 >= 0x41 && v1671)
            MEMORY[0x1CAA32F9C](v1671, 0x1000C8000313F17);
        }
        else
        {
          v1699 = (unint64_t)v1671;
          LODWORD(v1700) = v418;
        }
        v420 = v1684[0];
        v1670 = v1684[0];
        if (v1684[0] > 0x40)
        {
          v421 = operator new[]();
          v1669 = (llvm::APInt *)v421;
          v420 = v1670;
          memcpy((void *)v421, __src, (((unint64_t)v1670 + 63) >> 3) & 0x3FFFFFF8);
          if (v420 > 0x40)
          {
            llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1669);
            goto LABEL_607;
          }
        }
        else
        {
          v421 = (uint64_t)__src;
        }
        if (v420)
          v422 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v420;
        else
          v422 = 0;
        v1669 = (llvm::APInt *)(v422 & ~v421);
LABEL_607:
        llvm::APInt::operator++((uint64_t)&v1669);
        v423 = v1670;
        v424 = v1669;
        v1670 = 0;
        if (v1682 > 0x40 && __dst)
        {
          MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
          __dst = v424;
          v1682 = v423;
          if (v1670 >= 0x41 && v1669)
          {
            MEMORY[0x1CAA32F9C](v1669, 0x1000C8000313F17);
            v423 = v1682;
          }
        }
        else
        {
          __dst = v1669;
          v1682 = v423;
        }
        if (v423 > 0x40)
        {
          v425 = __dst;
          if (memcmp(__dst, *(const void **)v1665, (((unint64_t)v423 + 63) >> 3) & 0x3FFFFFF8))
            goto LABEL_844;
          if (v425)
            MEMORY[0x1CAA32F9C](v425, 0x1000C8000313F17);
        }
        else if (__dst != *(void **)v1665)
        {
          goto LABEL_844;
        }
        __dst = 0;
        v1682 = 1;
        goto LABEL_844;
      }
      v444 = (char *)operator new(0x80uLL);
      v7 = (unint64_t)(v444 + 64);
      *((_DWORD *)v444 + 21) = *((_DWORD *)v444 + 21) & 0x38000000 | 2;
      *(_QWORD *)v444 = 0;
      *((_QWORD *)v444 + 1) = 0;
      *((_QWORD *)v444 + 4) = 0;
      v1388 = (llvm::Value ***)(v444 + 32);
      *((_QWORD *)v444 + 2) = 0;
      *((_QWORD *)v444 + 3) = v444 + 64;
      *((_QWORD *)v444 + 5) = 0;
      *((_QWORD *)v444 + 6) = 0;
      *((_QWORD *)v444 + 7) = v444 + 64;
      v1389 = (llvm::ConstantInt **)*v382;
      llvm::APInt::udiv((llvm::APInt *)__dst, v92, (llvm::APInt *)&v1694);
      v1391 = llvm::ConstantInt::get(v1389, (llvm::Type *)&v1694, v1390);
      WORD4(v1691) = 257;
      sub_1C4774CC4(*v382);
      *((_QWORD *)v444 + 8) = v1392;
      *((_QWORD *)v444 + 9) = 0;
      v1393 = *((_DWORD *)v444 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v444 + 20) = 81;
      *((_DWORD *)v444 + 21) = v1393;
      *(_OWORD *)(v444 + 88) = 0u;
      *(_OWORD *)(v444 + 104) = 0u;
      *((_DWORD *)v444 + 30) = 0;
      if (*(_QWORD *)v444)
      {
        **((_QWORD **)v444 + 2) = *((_QWORD *)v444 + 1);
        v1631 = *((_QWORD *)v444 + 1);
        if (v1631)
          *(_QWORD *)(v1631 + 16) = *((_QWORD *)v444 + 2);
      }
      *(_QWORD *)v444 = v382;
      v1396 = v382[1];
      v1395 = v382 + 1;
      v1394 = v1396;
      *((_QWORD *)v444 + 1) = v1396;
      if (v1396)
        *((_QWORD *)v1394 + 2) = v444 + 8;
      *((_QWORD *)v444 + 2) = v1395;
      *v1395 = v444;
      if (*((_QWORD *)v444 + 4))
      {
        **((_QWORD **)v444 + 6) = *((_QWORD *)v444 + 5);
        v1632 = *((_QWORD *)v444 + 5);
        if (v1632)
          *(_QWORD *)(v1632 + 16) = *((_QWORD *)v444 + 6);
      }
      *v1388 = v1391;
      if (v1391)
      {
        v1399 = v1391[1];
        v1398 = (llvm::Value ****)(v1391 + 1);
        v1397 = v1399;
        *((_QWORD *)v444 + 5) = v1399;
        if (v1399)
          *((_QWORD *)v1397 + 2) = v444 + 40;
        *((_QWORD *)v444 + 6) = v1398;
        *v1398 = v1388;
      }
      goto LABEL_702;
    case '0':
      goto LABEL_101;
    case '3':
      v44 = *(_WORD *)(a2 + 18) & 0x3F;
      if (v44 > 0x28)
        goto LABEL_881;
      if (((1 << v44) & 0x14300000000) == 0)
        goto LABEL_881;
      v45 = v8[1];
      if (!v45)
        goto LABEL_881;
      if (v45[1])
        goto LABEL_881;
      v46 = v1658;
      v1699 = 0;
      v47 = (llvm::Constant *)*(v8 - 4);
      v1688 = (unint64_t)&v1699;
      if (!sub_1C57BBC6C((int8x8_t ***)&v1688, v47))
        goto LABEL_881;
      if (v44 != 38 && v44 != 40)
        goto LABEL_46;
      v48 = *((_DWORD *)v46 + 2);
      if (v48 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v46) != v48)
          goto LABEL_881;
      }
      else if (*(_QWORD *)v46)
      {
        goto LABEL_881;
      }
LABEL_46:
      if ((v44 & 0x3E) == 0x20 && !sub_1C49591DC(v46))
        goto LABEL_881;
      v49 = (llvm::Constant *)*v8;
      v50 = (llvm::Type *)*v8;
      if (((_DWORD)(*v8)[1] & 0xFE) == 0x12)
        v50 = (llvm::Type *)**((_QWORD **)v49 + 2);
      v51 = llvm::Type::getPrimitiveSizeInBits(v50);
      v52 = v51;
      LODWORD(v1695) = v51;
      if (v51 > 0x40)
      {
        v54 = &v1694;
        llvm::APInt::initSlowCase((llvm::APInt *)&v1694, 0, 0);
        v53 = v52 - 1;
        if (v1695 >= 0x41)
          v54 = (unint64_t *)(v1694 + 8 * (v53 >> 6));
        v52 = v1695;
      }
      else
      {
        v1694 = 0;
        LOBYTE(v53) = v51 - 1;
        v54 = &v1694;
      }
      *v54 |= 1 << v53;
      v55 = (const void **)v1699;
      v56 = *(unsigned int *)(v1699 + 8);
      v1684[0] = v56;
      if (v56 > 0x40)
      {
        v1418 = ((unint64_t)(v56 + 63) >> 3) & 0x3FFFFFF8;
        __src = (void *)operator new[]();
        memcpy(__src, *v55, v1418);
      }
      else
      {
        __src = *(void **)v1699;
      }
      llvm::APInt::operator-=((uint64_t)&__src, 1uLL);
      v58 = v1684[0];
      v59 = __src;
      v1684[0] = 0;
      if (v58 > 0x40)
      {
        v1419 = (uint64_t *)v1694;
        v1420 = (unint64_t)(v58 + 63) >> 6;
        v1421 = __src;
        do
        {
          v1422 = *v1419++;
          *v1421++ |= v1422;
          --v1420;
        }
        while (v1420);
      }
      else
      {
        v59 = (_QWORD *)(v1694 | (unint64_t)__src);
      }
      LODWORD(p_src) = v58;
      v1688 = (unint64_t)v59;
      v60 = llvm::ConstantInt::get((llvm::ConstantInt **)v49, (llvm::Type *)&v1688, v57);
      if (p_src >= 0x41 && v1688)
        MEMORY[0x1CAA32F9C](v1688, 0x1000C8000313F17);
      if (v1684[0] >= 0x41 && __src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      v61 = a1[3];
      v62 = *(v8 - 8);
      WORD4(v1691) = 257;
      v63 = (_DWORD **)sub_1C4D89BCC(v61, v62, (uint64_t)v60, (uint64_t)&v1688);
      v64 = (char *)operator new(0x80uLL);
      v67 = v64;
      v7 = (unint64_t)(v64 + 64);
      *((_DWORD *)v64 + 21) = *((_DWORD *)v64 + 21) & 0x38000000 | 2;
      *(_QWORD *)v64 = 0;
      *((_QWORD *)v64 + 1) = 0;
      *((_QWORD *)v64 + 2) = 0;
      *((_QWORD *)v64 + 3) = v64 + 64;
      *((_QWORD *)v64 + 4) = 0;
      v68 = (llvm::Value ***)(v64 + 32);
      *((_QWORD *)v64 + 5) = 0;
      *((_QWORD *)v64 + 6) = 0;
      *((_QWORD *)v64 + 7) = v64 + 64;
      if ((v44 & 0x3E) == 0x20)
      {
        v69 = llvm::ConstantInt::get((llvm::ConstantInt **)v49, v46, v66);
        WORD4(v1691) = 257;
        sub_1C4774CC4(*v63);
        *((_QWORD *)v67 + 8) = v70;
        *((_QWORD *)v67 + 9) = 0;
        v71 = *((_DWORD *)v67 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v67 + 20) = 81;
        *((_DWORD *)v67 + 21) = v71;
        *(_OWORD *)(v67 + 88) = 0u;
        *(_OWORD *)(v67 + 104) = 0u;
        *((_DWORD *)v67 + 30) = 0;
        if (*(_QWORD *)v67)
        {
          **((_QWORD **)v67 + 2) = *((_QWORD *)v67 + 1);
          v1504 = *((_QWORD *)v67 + 1);
          if (v1504)
            *(_QWORD *)(v1504 + 16) = *((_QWORD *)v67 + 2);
        }
        *(_QWORD *)v67 = v63;
        v74 = v63[1];
        v73 = v63 + 1;
        v72 = v74;
        *((_QWORD *)v67 + 1) = v74;
        if (v74)
          *((_QWORD *)v72 + 2) = v67 + 8;
        *((_QWORD *)v67 + 2) = v73;
        *v73 = v67;
        if (*((_QWORD *)v67 + 4))
        {
          **((_QWORD **)v67 + 6) = *((_QWORD *)v67 + 5);
          v1505 = *((_QWORD *)v67 + 5);
          if (v1505)
            *(_QWORD *)(v1505 + 16) = *((_QWORD *)v67 + 6);
        }
        *v68 = v69;
        if (v69)
        {
          v77 = v69[1];
          v76 = (llvm::Value ****)(v69 + 1);
          v75 = v77;
          *((_QWORD *)v67 + 5) = v77;
          if (v77)
            *((_QWORD *)v75 + 2) = v67 + 40;
          *((_QWORD *)v67 + 6) = v76;
          *v76 = v68;
        }
        *((_WORD *)v67 + 41) = v44;
      }
      else
      {
        v508 = v64 + 88;
        if (v44 != 38)
        {
          v1506 = llvm::ConstantInt::get((llvm::ConstantInt **)v49, (llvm::Type *)&v1694, v66);
          WORD4(v1691) = 257;
          sub_1C4774CC4(*v63);
          *((_QWORD *)v67 + 8) = v1507;
          *((_QWORD *)v67 + 9) = 0;
          v1508 = *((_DWORD *)v67 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v67 + 20) = 81;
          *((_DWORD *)v67 + 21) = v1508;
          *v508 = 0u;
          *(_OWORD *)(v67 + 104) = 0u;
          *((_DWORD *)v67 + 30) = 0;
          if (*(_QWORD *)v67)
          {
            **((_QWORD **)v67 + 2) = *((_QWORD *)v67 + 1);
            v1639 = *((_QWORD *)v67 + 1);
            if (v1639)
              *(_QWORD *)(v1639 + 16) = *((_QWORD *)v67 + 2);
          }
          *(_QWORD *)v67 = v63;
          v1511 = v63[1];
          v1510 = v63 + 1;
          v1509 = v1511;
          *((_QWORD *)v67 + 1) = v1511;
          if (v1511)
            *((_QWORD *)v1509 + 2) = v67 + 8;
          *((_QWORD *)v67 + 2) = v1510;
          *v1510 = v67;
          if (*((_QWORD *)v67 + 4))
          {
            **((_QWORD **)v67 + 6) = *((_QWORD *)v67 + 5);
            v1640 = *((_QWORD *)v67 + 5);
            if (v1640)
              *(_QWORD *)(v1640 + 16) = *((_QWORD *)v67 + 6);
          }
          *v68 = v1506;
          if (v1506)
          {
            v1514 = v1506[1];
            v1513 = (llvm::Value ****)(v1506 + 1);
            v1512 = v1514;
            *((_QWORD *)v67 + 5) = v1514;
            if (v1514)
              *((_QWORD *)v1512 + 2) = v67 + 40;
            *((_QWORD *)v67 + 6) = v1513;
            *v1513 = v68;
          }
          *((_WORD *)v67 + 41) = 34;
          llvm::Value::setName((uint64_t ***)v7, (uint64_t)&v1688);
          v52 = v1695;
LABEL_758:
          if (v52 < 0x41)
            return v7;
LABEL_1227:
          v857 = (_QWORD *)v1694;
          if (!v1694)
            return v7;
          goto LABEL_1228;
        }
        v509 = llvm::Constant::getNullValue(v49, v65);
        WORD4(v1691) = 257;
        sub_1C4774CC4(*v63);
        *((_QWORD *)v67 + 8) = v510;
        *((_QWORD *)v67 + 9) = 0;
        v511 = *((_DWORD *)v67 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v67 + 20) = 81;
        *((_DWORD *)v67 + 21) = v511;
        *v508 = 0u;
        *(_OWORD *)(v67 + 104) = 0u;
        *((_DWORD *)v67 + 30) = 0;
        if (*(_QWORD *)v67)
        {
          **((_QWORD **)v67 + 2) = *((_QWORD *)v67 + 1);
          v1515 = *((_QWORD *)v67 + 1);
          if (v1515)
            *(_QWORD *)(v1515 + 16) = *((_QWORD *)v67 + 2);
        }
        *(_QWORD *)v67 = v63;
        v514 = v63[1];
        v513 = v63 + 1;
        v512 = v514;
        *((_QWORD *)v67 + 1) = v514;
        if (v514)
          *((_QWORD *)v512 + 2) = v67 + 8;
        *((_QWORD *)v67 + 2) = v513;
        *v513 = v67;
        if (*((_QWORD *)v67 + 4))
        {
          **((_QWORD **)v67 + 6) = *((_QWORD *)v67 + 5);
          v1516 = *((_QWORD *)v67 + 5);
          if (v1516)
            *(_QWORD *)(v1516 + 16) = *((_QWORD *)v67 + 6);
        }
        *v68 = v509;
        if (v509)
        {
          v517 = v509[1];
          v516 = (llvm::Value ****)(v509 + 1);
          v515 = v517;
          *((_QWORD *)v67 + 5) = v517;
          if (v517)
            *((_QWORD *)v515 + 2) = v67 + 40;
          *((_QWORD *)v67 + 6) = v516;
          *v516 = v68;
        }
        *((_WORD *)v67 + 41) = 38;
      }
      llvm::Value::setName((uint64_t ***)v7, (uint64_t)&v1688);
      goto LABEL_758;
    case '5':
      v12 = (uint64_t)sub_1C57EDED0((uint64_t)a1, a2, *(llvm::ConstantInt ***)(a2 - 64), (int8x8_t *)v1658);
      goto LABEL_93;
    case '6':
    case '7':
      v12 = (uint64_t)sub_1C57F0AE4((uint64_t)a1, a2, *(uint64_t ****)(a2 - 64), v1658);
      goto LABEL_93;
    case '8':
      v89 = v1658;
      v90 = *(_WORD *)(a2 + 18) & 0x3F;
      if (v90 != 33 || (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) != 0x12)
        goto LABEL_159;
      v91 = *((_DWORD *)v1658 + 2);
      if (v91 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v1658) != v91)
          goto LABEL_159;
      }
      else if (*(_QWORD *)v1658)
      {
        goto LABEL_159;
      }
      if (sub_1C4D89CC8((uint64_t)&v1688, (llvm::Constant *)*(v8 - 4)))
      {
        v146 = operator new(0x60uLL);
        v7 = (unint64_t)(v146 + 8);
        v146[13] = v146[13] & 0x38000000 | 1;
        *(_QWORD *)v146 = 0;
        *((_QWORD *)v146 + 1) = 0;
        *((_QWORD *)v146 + 2) = 0;
        *((_QWORD *)v146 + 3) = v146 + 8;
        v147 = (uint64_t)*(v8 - 8);
        v148 = *(_QWORD *)a2;
        WORD4(v1691) = 257;
        llvm::TruncInst::TruncInst((uint64_t)(v146 + 8), v147, v148, (uint64_t)&v1688, 0);
        return v7;
      }
LABEL_159:
      v1677 = 0;
      v1688 = (unint64_t)&v1675;
      p_src = (unint64_t *)&v1677;
      v1690 = 0;
      v149 = *((unsigned __int8 *)v8 + 16);
      if (v149 == 5)
      {
        if (*((_WORD *)v8 + 9) != 28)
          goto LABEL_169;
        v151 = (llvm::Type **)&v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
        if (!*v151)
          goto LABEL_169;
        v1675 = *v151;
        if ((sub_1C4D8A004((uint64_t)&p_src, v151[4]) & 1) == 0)
          goto LABEL_169;
      }
      else
      {
        if (v149 != 56)
          goto LABEL_169;
        if (!*(v8 - 8))
          goto LABEL_169;
        v1675 = (llvm::Type *)*(v8 - 8);
        if (!sub_1C4D89F84((uint64_t)&p_src, (unsigned __int8 *)*(v8 - 4)))
          goto LABEL_169;
      }
      v152 = v8[1];
      if (!v152 || v152[1])
        goto LABEL_169;
      if ((*(_WORD *)(a2 + 18) & 0x3E) != 0x20)
        goto LABEL_1401;
      v222 = *((_DWORD *)v89 + 2);
      if (v222 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v89) != v222)
          goto LABEL_1401;
      }
      else if (*(_QWORD *)v89)
      {
        goto LABEL_1401;
      }
      v399 = (const void **)v1677;
      v400 = *((unsigned int *)v1677 + 2);
      if (v400 > 0x40)
      {
        if (((*(_QWORD *)(*(_QWORD *)v1677 + 8 * ((v400 - 1) >> 6)) >> (v400 - 1)) & 1) != 0
          && llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v1677) == (_DWORD)v400 - 1)
        {
          goto LABEL_569;
        }
        v1682 = v400;
        __dst = (void *)operator new[]();
        memcpy(__dst, *v399, ((unint64_t)(v400 + 63) >> 3) & 0x3FFFFFF8);
        llvm::APInt::flipAllBitsSlowCase((uint64_t)&__dst);
        LODWORD(v400) = v1682;
        v565 = __dst;
      }
      else
      {
        if (*(_QWORD *)v1677 == 1 << (v400 - 1))
        {
LABEL_569:
          v401 = llvm::Constant::getNullValue(*(llvm::Constant **)v1675, v150);
          v402 = (char *)operator new(0x80uLL);
          v7 = (unint64_t)(v402 + 64);
          *((_DWORD *)v402 + 21) = *((_DWORD *)v402 + 21) & 0x38000000 | 2;
          *(_QWORD *)v402 = 0;
          *((_QWORD *)v402 + 1) = 0;
          *((_QWORD *)v402 + 2) = 0;
          *((_QWORD *)v402 + 3) = v402 + 64;
          *((_QWORD *)v402 + 4) = 0;
          v403 = (llvm::Value ***)(v402 + 32);
          *((_QWORD *)v402 + 5) = 0;
          *((_QWORD *)v402 + 6) = 0;
          *((_QWORD *)v402 + 7) = v402 + 64;
          v404 = v1675;
          WORD4(v1691) = 257;
          sub_1C4774CC4(*(_DWORD **)v1675);
          *((_QWORD *)v402 + 8) = v405;
          *((_QWORD *)v402 + 9) = 0;
          v406 = *((_DWORD *)v402 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v402 + 20) = 81;
          *((_DWORD *)v402 + 21) = v406;
          *(_OWORD *)(v402 + 88) = 0u;
          *(_OWORD *)(v402 + 104) = 0u;
          *((_DWORD *)v402 + 30) = 0;
          if (*(_QWORD *)v402)
          {
            **((_QWORD **)v402 + 2) = *((_QWORD *)v402 + 1);
            v1517 = *((_QWORD *)v402 + 1);
            if (v1517)
              *(_QWORD *)(v1517 + 16) = *((_QWORD *)v402 + 2);
          }
          *(_QWORD *)v402 = v404;
          v409 = *((_QWORD *)v404 + 1);
          v408 = (_QWORD *)((char *)v404 + 8);
          v407 = v409;
          *((_QWORD *)v402 + 1) = v409;
          if (v409)
            *(_QWORD *)(v407 + 16) = v402 + 8;
          *((_QWORD *)v402 + 2) = v408;
          *v408 = v402;
          if (*((_QWORD *)v402 + 4))
          {
            **((_QWORD **)v402 + 6) = *((_QWORD *)v402 + 5);
            v1518 = *((_QWORD *)v402 + 5);
            if (v1518)
              *(_QWORD *)(v1518 + 16) = *((_QWORD *)v402 + 6);
          }
          *v403 = v401;
          if (v401)
          {
            v412 = v401[1];
            v411 = (llvm::Value ****)(v401 + 1);
            v410 = v412;
            *((_QWORD *)v402 + 5) = v412;
            if (v412)
              *((_QWORD *)v410 + 2) = v402 + 40;
            *((_QWORD *)v402 + 6) = v411;
            *v411 = v403;
          }
          if (v90 == 33)
            v413 = 40;
          else
            v413 = 39;
LABEL_1400:
          *((_WORD *)v402 + 41) = v413;
          goto LABEL_998;
        }
        v563 = ~*(_QWORD *)v1677;
        if ((_DWORD)v400)
          v564 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v400;
        else
          v564 = 0;
        v565 = (_QWORD *)(v564 & v563);
        __dst = (void *)(v564 & v563);
      }
      LODWORD(v1700) = v400;
      v1699 = (unint64_t)v565;
      v1682 = 0;
      llvm::APInt::operator+=((uint64_t)&v1699, 1uLL);
      v567 = v1700;
      LODWORD(v1700) = 0;
      if (v567 > 0x40)
      {
        v588 = 0;
        v589 = 0;
        v590 = ((unint64_t)(v567 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          v591 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(v1699 + v588));
          v591.i16[0] = vaddlv_u8(v591);
          v589 += v591.i32[0];
          v588 += 8;
        }
        while (v590 != v588);
        v568 = v589 == 1;
        if (v1699)
        {
          MEMORY[0x1CAA32F9C](v1699, 0x1000C8000313F17);
          if (v1700 >= 0x41)
          {
            if (v1699)
              MEMORY[0x1CAA32F9C](v1699, 0x1000C8000313F17);
          }
        }
      }
      else if (v1699)
      {
        v568 = (v1699 & (v1699 - 1)) == 0;
      }
      else
      {
        v568 = 0;
      }
      if (v1682 >= 0x41 && v565 != 0)
        MEMORY[0x1CAA32F9C](v565, 0x1000C8000313F17);
      if (v568)
      {
        v968 = (llvm::Constant *)*(v8 - 4);
        v969 = *(llvm::ConstantFP **)v968;
        if ((*(_DWORD *)(*(_QWORD *)v968 + 8) & 0xFE) == 0x12)
          v970 = *(unsigned __int8 *)(**((_QWORD **)v969 + 2) + 8);
        else
          v970 = *(_DWORD *)(*(_QWORD *)v968 + 8);
        if (v970 <= 6)
          v971 = llvm::ConstantFP::getZero(v969, (llvm::Type *)1);
        else
          v971 = (llvm::Constant *)llvm::Constant::getNullValue(v969, v566);
        v973 = v971;
        v974 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)0xF, v971, v968, v972);
        if (!v974)
        {
          v1268 = *(_QWORD ***)v973;
          if (*(_QWORD *)v973)
          {
            v1694 = (unint64_t)v973;
            v1695 = v968;
            v1269 = **v1268 + 1512;
            LODWORD(v1688) = 15;
            p_src = &v1694;
            v1690 = 2;
            v1691 = 0u;
            v1692 = 0u;
            v1693 = 0;
            v974 = sub_1C537D4FC(v1269, (uint64_t)v1268, (unsigned __int8 *)&v1688);
          }
          else
          {
            v974 = 0;
          }
        }
        v402 = (char *)operator new(0x80uLL);
        v7 = (unint64_t)(v402 + 64);
        *((_DWORD *)v402 + 21) = *((_DWORD *)v402 + 21) & 0x38000000 | 2;
        *(_QWORD *)v402 = 0;
        *((_QWORD *)v402 + 1) = 0;
        *((_QWORD *)v402 + 2) = 0;
        *((_QWORD *)v402 + 3) = v402 + 64;
        *((_QWORD *)v402 + 4) = 0;
        v975 = (uint64_t *)(v402 + 32);
        *((_QWORD *)v402 + 5) = 0;
        *((_QWORD *)v402 + 6) = 0;
        *((_QWORD *)v402 + 7) = v402 + 64;
        v976 = v1675;
        WORD4(v1691) = 257;
        sub_1C4774CC4(*(_DWORD **)v1675);
        *((_QWORD *)v402 + 8) = v977;
        *((_QWORD *)v402 + 9) = 0;
        v978 = *((_DWORD *)v402 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v402 + 20) = 81;
        *((_DWORD *)v402 + 21) = v978;
        *(_OWORD *)(v402 + 88) = 0u;
        *(_OWORD *)(v402 + 104) = 0u;
        *((_DWORD *)v402 + 30) = 0;
        if (*(_QWORD *)v402)
        {
          **((_QWORD **)v402 + 2) = *((_QWORD *)v402 + 1);
          v1534 = *((_QWORD *)v402 + 1);
          if (v1534)
            *(_QWORD *)(v1534 + 16) = *((_QWORD *)v402 + 2);
        }
        *(_QWORD *)v402 = v976;
        v981 = *((_QWORD *)v976 + 1);
        v980 = (_QWORD *)((char *)v976 + 8);
        v979 = v981;
        *((_QWORD *)v402 + 1) = v981;
        if (v981)
          *(_QWORD *)(v979 + 16) = v402 + 8;
        *((_QWORD *)v402 + 2) = v980;
        *v980 = v402;
        if (*((_QWORD *)v402 + 4))
        {
          **((_QWORD **)v402 + 6) = *((_QWORD *)v402 + 5);
          v1535 = *((_QWORD *)v402 + 5);
          if (v1535)
            *(_QWORD *)(v1535 + 16) = *((_QWORD *)v402 + 6);
        }
        *v975 = v974;
        if (v974)
        {
          v984 = *(_QWORD *)(v974 + 8);
          v983 = (uint64_t **)(v974 + 8);
          v982 = v984;
          *((_QWORD *)v402 + 5) = v984;
          if (v984)
            *(_QWORD *)(v982 + 16) = v402 + 40;
          *((_QWORD *)v402 + 6) = v983;
          *v983 = v975;
        }
        if (v90 == 33)
          v413 = 35;
        else
          v413 = 36;
        goto LABEL_1400;
      }
LABEL_1401:
      v1673 = 0;
      v985 = (uint64_t)*(v8 - 8);
      v1688 = (unint64_t)&v1673;
      v986 = *(_QWORD *)(v985 + 8);
      if (v986 && !*(_QWORD *)(v986 + 8) && sub_1C4B03864((_QWORD **)&v1688, v985))
      {
        if ((*(_WORD *)(a2 + 18) & 0x3E) == 0x20)
          goto LABEL_1405;
        v1003 = *((_DWORD *)v89 + 2);
        v1004 = v1003 - 1;
        v1005 = v1003 >= 0x41 ? (llvm::APInt *)(*(_QWORD *)v89 + 8 * ((v1003 - 1) >> 6)) : v89;
        if (((*(_QWORD *)v1005 >> v1004) & 1) == 0)
        {
          v1006 = v1677;
          v1007 = *((_DWORD *)v1677 + 2);
          v1008 = v1007 - 1;
          if (v1007 >= 0x41)
            v1006 = (llvm::APInt *)(*(_QWORD *)v1677 + 8 * (v1008 >> 6));
          if (((*(_QWORD *)v1006 >> v1008) & 1) == 0)
          {
LABEL_1405:
            if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) != 0x12)
            {
              v987 = *(llvm::Type **)v1673;
              v988 = *(llvm::Type **)v1673;
              if ((*(_DWORD *)(*(_QWORD *)v1673 + 8) & 0xFE) == 0x12)
                v988 = (llvm::Type *)**((_QWORD **)v987 + 2);
              v989 = llvm::Type::getPrimitiveSizeInBits(v988);
              llvm::APInt::zext(v89, v989, (uint64_t)&v1688);
              v991 = llvm::ConstantInt::get((llvm::ConstantInt **)v987, (llvm::Type *)&v1688, v990);
              if (p_src >= 0x41 && v1688)
                MEMORY[0x1CAA32F9C](v1688, 0x1000C8000313F17);
              llvm::APInt::zext(v1677, v989, (uint64_t)&v1688);
              v993 = llvm::ConstantInt::get((llvm::ConstantInt **)v987, (llvm::Type *)&v1688, v992);
              if (p_src >= 0x41 && v1688)
                MEMORY[0x1CAA32F9C](v1688, 0x1000C8000313F17);
              v994 = a1[3];
              if ((*((_BYTE *)v8 + 23) & 0x10) == 0)
              {
                v1151 = 0;
                v1150 = &byte_1C871356D;
LABEL_1621:
                WORD4(v1691) = 261;
                v1688 = (unint64_t)v1150;
                p_src = v1151;
                v1153 = sub_1C4D89BCC(v994, v1673, (uint64_t)v993, (uint64_t)&v1688);
                v25 = (char *)operator new(0x80uLL);
                v7 = (unint64_t)(v25 + 64);
                *((_DWORD *)v25 + 21) = *((_DWORD *)v25 + 21) & 0x38000000 | 2;
                *(_QWORD *)v25 = 0;
                *((_QWORD *)v25 + 1) = 0;
                *((_QWORD *)v25 + 2) = 0;
                *((_QWORD *)v25 + 3) = v25 + 64;
                *((_QWORD *)v25 + 4) = 0;
                v1154 = (llvm::Value ***)(v25 + 32);
                *((_QWORD *)v25 + 5) = 0;
                *((_QWORD *)v25 + 6) = 0;
                *((_QWORD *)v25 + 7) = v25 + 64;
                v1155 = *(_WORD *)(a2 + 18);
                WORD4(v1691) = 257;
                sub_1C4774CC4(*(_DWORD **)v1153);
                *((_QWORD *)v25 + 8) = v1156;
                *((_QWORD *)v25 + 9) = 0;
                v1157 = *((_DWORD *)v25 + 21) & 0xC0000000 | 2;
                *((_DWORD *)v25 + 20) = 81;
                *((_DWORD *)v25 + 21) = v1157;
                *(_OWORD *)(v25 + 88) = 0u;
                *(_OWORD *)(v25 + 104) = 0u;
                *((_DWORD *)v25 + 30) = 0;
                if (*(_QWORD *)v25)
                {
                  **((_QWORD **)v25 + 2) = *((_QWORD *)v25 + 1);
                  v1555 = *((_QWORD *)v25 + 1);
                  if (v1555)
                    *(_QWORD *)(v1555 + 16) = *((_QWORD *)v25 + 2);
                }
                *(_QWORD *)v25 = v1153;
                v1160 = *(_QWORD *)(v1153 + 8);
                v1159 = (_QWORD *)(v1153 + 8);
                v1158 = v1160;
                *((_QWORD *)v25 + 1) = v1160;
                if (v1160)
                  *(_QWORD *)(v1158 + 16) = v25 + 8;
                v38 = v1155 & 0x3F;
                *((_QWORD *)v25 + 2) = v1159;
                *v1159 = v25;
                if (*((_QWORD *)v25 + 4))
                {
                  **((_QWORD **)v25 + 6) = *((_QWORD *)v25 + 5);
                  v1556 = *((_QWORD *)v25 + 5);
                  if (v1556)
                    *(_QWORD *)(v1556 + 16) = *((_QWORD *)v25 + 6);
                }
                *v1154 = v991;
                if (v991)
                {
                  v1163 = v991[1];
                  v1162 = (llvm::Value ****)(v991 + 1);
                  v1161 = v1163;
                  *((_QWORD *)v25 + 5) = v1163;
                  if (v1163)
                    *((_QWORD *)v1161 + 2) = v25 + 40;
                  *((_QWORD *)v25 + 6) = v1162;
                  *v1162 = v1154;
                }
                goto LABEL_970;
              }
              v995 = ***v8;
              v996 = *(_QWORD *)(v995 + 152);
              v997 = *(unsigned int *)(v995 + 168);
              if ((_DWORD)v997)
              {
                LODWORD(v998) = (v997 - 1) & ((v8 >> 4) ^ (v8 >> 9));
                v999 = (uint64_t ****)(v996 + 16 * v998);
                v1000 = *v999;
                if (*v999 == v8)
                {
LABEL_1620:
                  v1149 = v999[1];
                  v1152 = (unint64_t *)*v1149;
                  v1150 = (char *)(v1149 + 2);
                  v1151 = v1152;
                  goto LABEL_1621;
                }
                v1001 = 1;
                while (v1000 != (uint64_t ***)-4096)
                {
                  v1002 = v998 + v1001++;
                  v998 = v1002 & (v997 - 1);
                  v1000 = *(uint64_t ****)(v996 + 16 * v998);
                  if (v1000 == v8)
                  {
                    v999 = (uint64_t ****)(v996 + 16 * v998);
                    goto LABEL_1620;
                  }
                }
              }
              v999 = (uint64_t ****)(v996 + 16 * v997);
              goto LABEL_1620;
            }
          }
        }
      }
      v1009 = (uint64_t)*(v8 - 8);
      if (!v1009)
        goto LABEL_1656;
      v1010 = *(unsigned __int8 *)(v1009 + 16);
      v1011 = v1010 - 28;
      v1012 = v1010 >= 0x1C && v1010 - 59 >= 0xFFFFFFEE;
      if (!v1012 || v1010 - 56 < 0xFFFFFFFD)
        goto LABEL_1656;
      v1654 = v1677;
      __s2 = 0;
      v1014 = *(unsigned __int8 **)(v1009 - 32);
      v1688 = (unint64_t)&__s2;
      p_src = 0;
      if (!sub_1C4D89F84((uint64_t)&v1688, v1014))
        goto LABEL_1547;
      LODWORD(v1695) = 1;
      v1694 = 0;
      v1684[0] = 1;
      __src = 0;
      v1657 = (uint64_t)a1;
      __s1a = v1011;
      if (v1011 != 25)
      {
        if (v1011 == 26)
        {
          v1020 = (uint64_t ***)__s2;
          v1021 = *((unsigned int *)v89 + 2);
          LODWORD(p_src) = v1021;
          if (v1021 > 0x40)
          {
            v1688 = operator new[]();
            v1021 = p_src;
            memcpy((void *)v1688, *(const void **)v89, (((unint64_t)p_src + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v1688 = *(_QWORD *)v89;
          }
          v1042 = sub_1C47EE5B8(v1020, v1021);
          sub_1C4888094((uint64_t)&v1688, v1042);
          if (v1684[0] >= 0x41 && __src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
          __src = (void *)v1688;
          v1684[0] = p_src;
          v1043 = (uint64_t ***)__s2;
          v1044 = *((unsigned int *)v1654 + 2);
          LODWORD(p_src) = v1044;
          if (v1044 > 0x40)
          {
            v1688 = operator new[]();
            v1044 = p_src;
            memcpy((void *)v1688, *(const void **)v1654, (((unint64_t)p_src + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v1688 = *(_QWORD *)v1654;
          }
          v1048 = sub_1C47EE5B8(v1043, v1044);
          sub_1C4888094((uint64_t)&v1688, v1048);
          if (v1695 >= 0x41 && v1694)
            MEMORY[0x1CAA32F9C](v1694, 0x1000C8000313F17);
          v1694 = v1688;
          LODWORD(v1695) = (_DWORD)p_src;
          v1049 = (uint64_t ***)__s2;
          v7 = v1684[0];
          if (v1684[0] > 0x40)
          {
            v1057 = (((unint64_t)v1684[0] + 63) >> 3) & 0x3FFFFFF8;
            v1058 = (void *)operator new[]();
            memcpy(v1058, __src, v1057);
            v1059 = sub_1C47EE5B8(v1049, v7);
            llvm::APInt::tcShiftRight((llvm::APInt *)v1058, (unint64_t *)((v7 + 63) >> 6), v1059);
            v1053 = memcmp(v1058, *(const void **)v89, v1057) == 0;
            MEMORY[0x1CAA32F9C](v1058, 0x1000C8000313F17);
          }
          else
          {
            v1050 = (unint64_t)__src;
            v1051 = sub_1C47EE5B8((uint64_t ***)__s2, v1684[0]);
            v1052 = v1050 >> v1051;
            if ((_DWORD)v7 == v1051)
              v1052 = 0;
            v1053 = v1052 == *(_QWORD *)v89;
          }
          if ((*(_WORD *)(a2 + 18) & 0x3Eu) - 38 <= 3)
          {
            v1060 = &v1694;
            if (v1695 >= 0x41)
              v1060 = (unint64_t *)(v1694 + 8 * (((_DWORD)v1695 - 1) >> 6));
            if (((*v1060 >> (v1695 - 1)) & 1) != 0)
              goto LABEL_1538;
            v1061 = v1684[0] - 1;
            v1062 = &__src;
            if (v1684[0] >= 0x41)
              v1062 = (void **)((char *)__src + 8 * (v1061 >> 6));
            if ((((unint64_t)*v1062 >> v1061) & 1) != 0)
              goto LABEL_1538;
          }
        }
        else
        {
          v1026 = (uint64_t ***)__s2;
          v1027 = *((unsigned int *)v89 + 2);
          LODWORD(p_src) = v1027;
          if (v1027 > 0x40)
          {
            v1688 = operator new[]();
            v1027 = p_src;
            memcpy((void *)v1688, *(const void **)v89, (((unint64_t)p_src + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v1688 = *(_QWORD *)v89;
          }
          v1045 = sub_1C47EE5B8(v1026, v1027);
          sub_1C4888094((uint64_t)&v1688, v1045);
          if (v1684[0] >= 0x41 && __src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
          __src = (void *)v1688;
          v1684[0] = p_src;
          v1046 = (uint64_t ***)__s2;
          v1047 = *((unsigned int *)v1654 + 2);
          LODWORD(p_src) = v1047;
          if (v1047 > 0x40)
          {
            v1688 = operator new[]();
            v1047 = p_src;
            memcpy((void *)v1688, *(const void **)v1654, (((unint64_t)p_src + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v1688 = *(_QWORD *)v1654;
          }
          v1054 = sub_1C47EE5B8(v1046, v1047);
          sub_1C4888094((uint64_t)&v1688, v1054);
          if (v1695 >= 0x41 && v1694)
            MEMORY[0x1CAA32F9C](v1694, 0x1000C8000313F17);
          v1694 = v1688;
          LODWORD(v1695) = (_DWORD)p_src;
          v1055 = (uint64_t ***)__s2;
          LODWORD(p_src) = v1684[0];
          if (v1684[0] > 0x40)
          {
            v1063 = (((unint64_t)v1684[0] + 63) >> 3) & 0x3FFFFFF8;
            v1056 = (void *)operator new[]();
            memcpy(v1056, __src, v1063);
          }
          else
          {
            v1056 = __src;
          }
          v1688 = (unint64_t)v1056;
          llvm::APInt::ashrInPlace((llvm::APInt *)&v1688, v1055);
          if (p_src > 0x40)
          {
            v1064 = v1688;
            v1053 = memcmp((const void *)v1688, *(const void **)v89, (((unint64_t)p_src + 63) >> 3) & 0x3FFFFFF8) == 0;
            if (v1064)
              MEMORY[0x1CAA32F9C](v1064, 0x1000C8000313F17);
          }
          else
          {
            v1053 = v1688 == *(_QWORD *)v89;
          }
          v7 = (unint64_t)__s2;
          LODWORD(p_src) = (_DWORD)v1695;
          if (v1695 > 0x40)
          {
            v1066 = (((unint64_t)v1695 + 63) >> 3) & 0x3FFFFFF8;
            v1065 = (void *)operator new[]();
            memcpy(v1065, (const void *)v1694, v1066);
          }
          else
          {
            v1065 = (void *)v1694;
          }
          v1688 = (unint64_t)v1065;
          llvm::APInt::ashrInPlace((llvm::APInt *)&v1688, (uint64_t ***)v7);
          if (p_src > 0x40)
          {
            v7 = v1688;
            v1085 = memcmp((const void *)v1688, *(const void **)v1654, (((unint64_t)p_src + 63) >> 3) & 0x3FFFFFF8);
            if (v7)
              MEMORY[0x1CAA32F9C](v7, 0x1000C8000313F17);
            if (v1085)
              goto LABEL_1538;
          }
          else if (v1688 != *(_QWORD *)v1654)
          {
            goto LABEL_1538;
          }
        }
        if (v1053)
          goto LABEL_1526;
        goto LABEL_1477;
      }
      if ((*(_WORD *)(a2 + 18) & 0x3Eu) - 38 >= 4)
      {
        v1018 = *((_DWORD *)v89 + 2);
        goto LABEL_1452;
      }
      v1015 = *((_DWORD *)v1654 + 2);
      v1016 = v1015 - 1;
      if (v1015 >= 0x41)
        v1017 = (llvm::APInt *)(*(_QWORD *)v1654 + 8 * ((v1015 - 1) >> 6));
      else
        v1017 = v1654;
      if (((*(_QWORD *)v1017 >> v1016) & 1) != 0)
        goto LABEL_1538;
      v1018 = *((_DWORD *)v89 + 2);
      v1019 = (llvm::APInt *)(*(_QWORD *)v89 + 8 * ((v1018 - 1) >> 6));
      if (v1018 < 0x41)
        v1019 = v89;
      if (((*(_QWORD *)v1019 >> (v1018 - 1)) & 1) != 0)
      {
LABEL_1538:
        v1084 = 0;
        v7 = 0;
LABEL_1539:
        a1 = (_QWORD *)v1657;
        goto LABEL_1540;
      }
LABEL_1452:
      v1022 = (uint64_t ***)__s2;
      if (v1018 > 0x40)
      {
        v1025 = operator new[]();
        memcpy((void *)v1025, *(const void **)v89, (((unint64_t)v1018 + 63) >> 3) & 0x3FFFFFF8);
        v1028 = sub_1C47EE5B8(v1022, v1018);
        llvm::APInt::tcShiftRight((llvm::APInt *)v1025, (unint64_t *)(((unint64_t)v1018 + 63) >> 6), v1028);
      }
      else
      {
        v1023 = *(_QWORD *)v89;
        v1024 = sub_1C47EE5B8((uint64_t ***)__s2, v1018);
        if (v1018 == v1024)
          v1025 = 0;
        else
          v1025 = v1023 >> v1024;
      }
      if (v1684[0] >= 0x41 && __src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      __src = (void *)v1025;
      v1684[0] = v1018;
      v1029 = (uint64_t ***)__s2;
      v1030 = *((unsigned int *)v1654 + 2);
      if (v1030 > 0x40)
      {
        v1033 = operator new[]();
        memcpy((void *)v1033, *(const void **)v1654, ((v1030 + 63) >> 3) & 0x3FFFFFF8);
        v1034 = sub_1C47EE5B8(v1029, v1030);
        llvm::APInt::tcShiftRight((llvm::APInt *)v1033, (unint64_t *)((v1030 + 63) >> 6), v1034);
      }
      else
      {
        v1031 = *(_QWORD *)v1654;
        v1032 = sub_1C47EE5B8((uint64_t ***)__s2, *((unsigned int *)v1654 + 2));
        if ((_DWORD)v1030 == v1032)
          v1033 = 0;
        else
          v1033 = v1031 >> v1032;
      }
      if (v1695 >= 0x41 && v1694)
        MEMORY[0x1CAA32F9C](v1694, 0x1000C8000313F17);
      v1694 = v1033;
      LODWORD(v1695) = v1030;
      v7 = (unint64_t)__s2;
      v1035 = v1684[0];
      LODWORD(p_src) = v1684[0];
      if (v1684[0] > 0x40)
      {
        v1688 = operator new[]();
        v1035 = p_src;
        memcpy((void *)v1688, __src, (((unint64_t)p_src + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v1688 = (unint64_t)__src;
      }
      v1036 = sub_1C47EE5B8((uint64_t ***)v7, v1035);
      sub_1C4888094((uint64_t)&v1688, v1036);
      if (p_src > 0x40)
      {
        v7 = v1688;
        v1039 = memcmp((const void *)v1688, *(const void **)v89, (((unint64_t)p_src + 63) >> 3) & 0x3FFFFFF8);
        if (v7)
          MEMORY[0x1CAA32F9C](v7, 0x1000C8000313F17);
        if (!v1039)
          goto LABEL_1526;
      }
      else if (v1688 == *(_QWORD *)v89)
      {
LABEL_1526:
        v1067 = *(_QWORD *)(v1657 + 24);
        v1068 = *(_QWORD **)(v1009 - 64);
        v1069 = llvm::ConstantInt::get((llvm::ConstantInt **)*v8, (llvm::Type *)&v1694, v1038);
        WORD4(v1691) = 257;
        v1070 = sub_1C4D89BCC(v1067, v1068, (uint64_t)v1069, (uint64_t)&v1688);
        v1071 = (char *)operator new(0x80uLL);
        v7 = (unint64_t)(v1071 + 64);
        *((_DWORD *)v1071 + 21) = *((_DWORD *)v1071 + 21) & 0x38000000 | 2;
        *(_QWORD *)v1071 = 0;
        *((_QWORD *)v1071 + 1) = 0;
        *((_QWORD *)v1071 + 4) = 0;
        v1072 = (llvm::Value ***)(v1071 + 32);
        *((_QWORD *)v1071 + 2) = 0;
        *((_QWORD *)v1071 + 3) = v1071 + 64;
        *((_QWORD *)v1071 + 5) = 0;
        *((_QWORD *)v1071 + 6) = 0;
        *((_QWORD *)v1071 + 7) = v1071 + 64;
        v1073 = *(_WORD *)(a2 + 18);
        v1075 = llvm::ConstantInt::get((llvm::ConstantInt **)*v8, (llvm::Type *)&__src, v1074);
        WORD4(v1691) = 257;
        sub_1C4774CC4(*(_DWORD **)v1070);
        *((_QWORD *)v1071 + 8) = v1076;
        *((_QWORD *)v1071 + 9) = 0;
        v1077 = *((_DWORD *)v1071 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v1071 + 20) = 81;
        *((_DWORD *)v1071 + 21) = v1077;
        *(_OWORD *)(v1071 + 88) = 0u;
        *(_OWORD *)(v1071 + 104) = 0u;
        *((_DWORD *)v1071 + 30) = 0;
        if (*(_QWORD *)v1071)
        {
          **((_QWORD **)v1071 + 2) = *((_QWORD *)v1071 + 1);
          v1553 = *((_QWORD *)v1071 + 1);
          if (v1553)
            *(_QWORD *)(v1553 + 16) = *((_QWORD *)v1071 + 2);
        }
        *(_QWORD *)v1071 = v1070;
        v1080 = *(_QWORD *)(v1070 + 8);
        v1079 = (_QWORD *)(v1070 + 8);
        v1078 = v1080;
        *((_QWORD *)v1071 + 1) = v1080;
        if (v1080)
          *(_QWORD *)(v1078 + 16) = v1071 + 8;
        *((_QWORD *)v1071 + 2) = v1079;
        *v1079 = v1071;
        if (*((_QWORD *)v1071 + 4))
        {
          **((_QWORD **)v1071 + 6) = *((_QWORD *)v1071 + 5);
          v1554 = *((_QWORD *)v1071 + 5);
          if (v1554)
            *(_QWORD *)(v1554 + 16) = *((_QWORD *)v1071 + 6);
        }
        *v1072 = v1075;
        if (v1075)
        {
          v1083 = v1075[1];
          v1082 = (llvm::Value ****)(v1075 + 1);
          v1081 = v1083;
          *((_QWORD *)v1071 + 5) = v1083;
          if (v1083)
            *((_QWORD *)v1081 + 2) = v1071 + 40;
          *((_QWORD *)v1071 + 6) = v1082;
          *v1082 = v1072;
        }
        *((_WORD *)v1071 + 41) = v1073 & 0x3F;
        llvm::Value::setName((uint64_t ***)v7, (uint64_t)&v1688);
        v1084 = 0;
        goto LABEL_1539;
      }
LABEL_1477:
      v1040 = *(_WORD *)(a2 + 18) & 0x3F;
      if (v1040 == 33)
      {
        True = llvm::ConstantInt::getTrue(*(uint64_t ***)a2, v1037, v1038);
        goto LABEL_1559;
      }
      if (v1040 != 32)
      {
        v1084 = 1;
        goto LABEL_1539;
      }
      True = llvm::ConstantInt::getFalse(*(uint64_t ***)a2, v1037, v1038);
LABEL_1559:
      a1 = (_QWORD *)v1657;
      v7 = (unint64_t)sub_1C577F888(v1657, (llvm::ValueAsMetadata *)a2, (llvm::Value *)True);
      v1084 = 0;
LABEL_1540:
      v1011 = __s1a;
      if (v1684[0] >= 0x41 && __src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      if (v1695 >= 0x41 && v1694)
        MEMORY[0x1CAA32F9C](v1694, 0x1000C8000313F17);
      if (!v1084)
        goto LABEL_1655;
LABEL_1547:
      v1086 = *(_QWORD *)(v1009 + 8);
      if (v1086 && !*(_QWORD *)(v1086 + 8))
      {
        v1087 = *((_DWORD *)v89 + 2);
        if (v1087 > 0x40)
        {
          v1089 = llvm::APInt::countLeadingZerosSlowCase(v89);
          v1088 = v1011;
          if (v1089 != v1087)
            goto LABEL_1656;
        }
        else
        {
          v1088 = v1011;
          if (*(_QWORD *)v89)
            goto LABEL_1656;
        }
        if ((*(_WORD *)(a2 + 18) & 0x3E) == 0x20
          && *(_BYTE *)(v1009 + 16) != 55
          && *(unsigned __int8 *)(*(_QWORD *)(v1009 - 64) + 16) >= 0x15u)
        {
          v1090 = a1[3];
          v1091 = (uint64_t)*(v8 - 4);
          v1092 = *(_QWORD *)(v1009 - 32);
          WORD4(v1691) = 257;
          if (v1088 == 25)
            v1093 = sub_1C506ED1C(v1090, v1091, v1092, (uint64_t)&v1688, 0);
          else
            v1093 = sub_1C506E874(v1090, v1091, v1092, (uint64_t)&v1688, 0, 0);
          v1176 = v1093;
          v1177 = a1[3];
          v1178 = *(_QWORD **)(v1009 - 64);
          WORD4(v1691) = 257;
          v1179 = sub_1C4D89BCC(v1177, v1178, v1176, (uint64_t)&v1688);
          v7 = sub_1C577E2C8((uint64_t)a1, a2, 0, v1179);
LABEL_1655:
          if (v7)
            return v7;
        }
      }
LABEL_1656:
      if ((*(_WORD *)(a2 + 18) & 0x3Eu) - 38 < 4)
        goto LABEL_169;
      v1180 = *((_DWORD *)v89 + 2);
      if (v1180 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v89) != v1180)
          goto LABEL_169;
      }
      else if (*(_QWORD *)v89)
      {
        goto LABEL_169;
      }
      v1181 = (*(v8 - 8))[1];
      if (v1181 && !v1181[1] && sub_1C4D89CC8((uint64_t)&v1688, (llvm::Constant *)*(v8 - 4)))
      {
        v1182 = (llvm::Constant *)*(v8 - 4);
        v1183 = (uint64_t ***)*(v8 - 8);
        v1184 = *((unsigned __int8 *)v1183 + 16);
        if (v1184 == 5)
        {
          if (*((_WORD *)v1183 + 9) != 29)
            goto LABEL_169;
          v1187 = &v1183[-4 * (*((_DWORD *)v1183 + 5) & 0x7FFFFFF)];
          v1185 = (uint64_t ***)*v1187;
          if (!*v1187)
            goto LABEL_169;
          v1186 = v1187[4];
          if (!v1186)
            goto LABEL_169;
        }
        else
        {
          if (v1184 != 57)
            goto LABEL_169;
          v1185 = (uint64_t ***)*(v1183 - 8);
          if (!v1185)
            goto LABEL_169;
          v1186 = *(v1183 - 4);
          if (!v1186)
            goto LABEL_169;
        }
        v1188 = *((unsigned __int8 *)v1185 + 16);
        if (v1188 == 5)
        {
          if (*((_WORD *)v1185 + 9) != 26)
            goto LABEL_169;
          v1190 = &v1185[-4 * (*((_DWORD *)v1185 + 5) & 0x7FFFFFF)];
          if (v1186 != *v1190)
            goto LABEL_169;
          v1189 = (unsigned __int8 *)v1190[4];
          if (!v1189)
            goto LABEL_169;
        }
        else
        {
          if (v1188 != 54)
            goto LABEL_169;
          if (v1186 != *(v1185 - 8))
            goto LABEL_169;
          v1189 = (unsigned __int8 *)*(v1185 - 4);
          if (!v1189)
            goto LABEL_169;
        }
        v1191 = v8[1];
        if (v1191)
          LODWORD(v1191) = v1191[1] == 0;
        v1192 = v1183[1];
        if (v1192)
          LODWORD(v1192) = v1192[1] == 0;
        v1193 = (_DWORD)v1192 + (_DWORD)v1191;
        v1194 = v1185[1];
        if (v1194)
          LODWORD(v1194) = v1194[1] == 0;
        v1195 = v1193 + (_DWORD)v1194;
        if (v1189[16] <= 0x14u)
        {
          if (!v1195)
            goto LABEL_169;
          Shl = llvm::ConstantExpr::getShl((llvm::ConstantExpr *)*(v8 - 4), (llvm::Constant *)v1189, (llvm::Constant *)1, 0);
          v1208 = (uint64_t)llvm::ConstantExpr::getOr(Shl, v1182, v1206, v1207);
LABEL_1734:
          v1227 = v1208;
          if (!v1208)
            goto LABEL_169;
          v1228 = a1[3];
          if ((*((_BYTE *)v8 + 23) & 0x10) == 0)
          {
            v1239 = 0;
            v1238 = &byte_1C871356D;
LABEL_1744:
            WORD4(v1691) = 261;
            v1688 = (unint64_t)v1238;
            p_src = v1239;
            v1241 = sub_1C4D89BCC(v1228, v1186, v1227, (uint64_t)&v1688);
            v7 = sub_1C577E2C8((uint64_t)a1, a2, 0, v1241);
            if (v7)
              return v7;
            goto LABEL_169;
          }
          v1229 = ***v8;
          v1230 = *(_QWORD *)(v1229 + 152);
          v1231 = *(unsigned int *)(v1229 + 168);
          if ((_DWORD)v1231)
          {
            LODWORD(v1232) = (v1231 - 1) & ((v8 >> 4) ^ (v8 >> 9));
            v1233 = (uint64_t ****)(v1230 + 16 * v1232);
            v1234 = *v1233;
            if (*v1233 == v8)
            {
LABEL_1743:
              v1237 = v1233[1];
              v1240 = (unint64_t *)*v1237;
              v1238 = (char *)(v1237 + 2);
              v1239 = v1240;
              goto LABEL_1744;
            }
            v1235 = 1;
            while (v1234 != (uint64_t ***)-4096)
            {
              v1236 = v1232 + v1235++;
              v1232 = v1236 & (v1231 - 1);
              v1234 = *(uint64_t ****)(v1230 + 16 * v1232);
              if (v1234 == v8)
              {
                v1233 = (uint64_t ****)(v1230 + 16 * v1232);
                goto LABEL_1743;
              }
            }
          }
          v1233 = (uint64_t ****)(v1230 + 16 * v1231);
          goto LABEL_1743;
        }
        if (v1195 < 3)
          goto LABEL_169;
        v1196 = a1[3];
        if ((*((_BYTE *)v1185 + 23) & 0x10) == 0)
        {
          v1212 = 0;
          v1211 = &byte_1C871356D;
LABEL_1724:
          WORD4(v1691) = 261;
          v1688 = (unint64_t)v1211;
          p_src = v1212;
          v1214 = (_QWORD *)sub_1C506E874(v1196, (uint64_t)v1182, (uint64_t)v1189, (uint64_t)&v1688, 1, 0);
          if ((*((_BYTE *)v1183 + 23) & 0x10) == 0)
          {
            v1225 = 0;
            v1224 = &byte_1C871356D;
            goto LABEL_1733;
          }
          v1215 = ***v1183;
          v1216 = *(_QWORD *)(v1215 + 152);
          v1217 = *(unsigned int *)(v1215 + 168);
          if ((_DWORD)v1217)
          {
            LODWORD(v1218) = (v1217 - 1) & ((v1183 >> 4) ^ (v1183 >> 9));
            v1219 = (uint64_t ****)(v1216 + 16 * v1218);
            v1220 = *v1219;
            if (*v1219 == v1183)
            {
LABEL_1732:
              v1223 = v1219[1];
              v1226 = *v1223;
              v1224 = (char *)(v1223 + 2);
              v1225 = v1226;
LABEL_1733:
              v1698 = 261;
              v1694 = (unint64_t)v1224;
              v1695 = v1225;
              v1208 = sub_1C4773594(v1196, v1214, (uint64_t)v1182, (uint64_t)&v1694);
              goto LABEL_1734;
            }
            v1221 = 1;
            while (v1220 != (uint64_t ***)-4096)
            {
              v1222 = v1218 + v1221++;
              v1218 = v1222 & (v1217 - 1);
              v1220 = *(uint64_t ****)(v1216 + 16 * v1218);
              if (v1220 == v1183)
              {
                v1219 = (uint64_t ****)(v1216 + 16 * v1218);
                goto LABEL_1732;
              }
            }
          }
          v1219 = (uint64_t ****)(v1216 + 16 * v1217);
          goto LABEL_1732;
        }
        v1197 = ***v1185;
        v1198 = *(_QWORD *)(v1197 + 152);
        v1199 = *(unsigned int *)(v1197 + 168);
        if ((_DWORD)v1199)
        {
          LODWORD(v1200) = (v1199 - 1) & ((v1185 >> 4) ^ (v1185 >> 9));
          v1201 = (uint64_t ****)(v1198 + 16 * v1200);
          v1202 = *v1201;
          if (*v1201 == v1185)
          {
LABEL_1723:
            v1210 = v1201[1];
            v1213 = (unint64_t *)*v1210;
            v1211 = (char *)(v1210 + 2);
            v1212 = v1213;
            goto LABEL_1724;
          }
          v1203 = 1;
          while (v1202 != (uint64_t ***)-4096)
          {
            v1204 = v1200 + v1203++;
            v1200 = v1204 & (v1199 - 1);
            v1202 = *(uint64_t ****)(v1198 + 16 * v1200);
            if (v1202 == v1185)
            {
              v1201 = (uint64_t ****)(v1198 + 16 * v1200);
              goto LABEL_1723;
            }
          }
        }
        v1201 = (uint64_t ****)(v1198 + 16 * v1199);
        goto LABEL_1723;
      }
LABEL_169:
      v153 = *(_WORD *)(a2 + 18) & 0x3F;
      LOBYTE(v1699) = 0;
      if (sub_1C57921EC(v153, v89, &v1699))
      {
        __src = 0;
        v154 = (uint64_t)*(v8 - 8);
        v1688 = (unint64_t)&__src;
        v155 = *(unsigned __int8 *)(v154 + 16);
        if (v155 == 5)
        {
          if (*(_WORD *)(v154 + 18) != 13)
            goto LABEL_789;
          v156 = v154 - 32 * (*(_DWORD *)(v154 + 20) & 0x7FFFFFF);
          if (!*(_QWORD *)v156)
            goto LABEL_789;
          __src = *(void **)v156;
          if ((sub_1C4D9EED4((uint64_t)&p_src, *(llvm::Constant **)(v156 + 32)) & 1) == 0)
            goto LABEL_789;
        }
        else
        {
          if (v155 != 41)
            goto LABEL_789;
          if (!*(_QWORD *)(v154 - 64))
            goto LABEL_789;
          __src = *(void **)(v154 - 64);
          if (!sub_1C4D9ED34((uint64_t)&p_src, *(llvm::Constant **)(v154 - 32)))
            goto LABEL_789;
        }
        v157 = (uint64_t)*(v8 - 4);
        v158 = __src;
        v1694 = (unint64_t)__src;
        v159 = *(unsigned __int8 *)(v157 + 16);
        if (v159 == 5)
        {
          if (*(_WORD *)(v157 + 18) == 30)
          {
            v247 = *(_DWORD *)(v157 + 20) & 0x7FFFFFF;
            v248 = v157 - 32 * v247;
            if (__src == *(void **)v248)
            {
              if ((sub_1C4D9EED4((uint64_t)&v1695, *(llvm::Constant **)(v248 + 32)) & 1) != 0)
                goto LABEL_778;
              v158 = (void *)v1694;
              v249 = -(uint64_t)(*(_DWORD *)(v157 + 20) & 0x7FFFFFF);
            }
            else
            {
              v249 = -v247;
            }
            v531 = v157 + 32 * v249;
            if (v158 != *(void **)(v531 + 32) || (sub_1C4D9EED4((uint64_t)&v1695, *(llvm::Constant **)v531) & 1) == 0)
              goto LABEL_789;
LABEL_778:
            v532 = v1699;
            v25 = (char *)operator new(0x80uLL);
            v7 = (unint64_t)(v25 + 64);
            *((_DWORD *)v25 + 21) = *((_DWORD *)v25 + 21) & 0x38000000 | 2;
            *(_QWORD *)v25 = 0;
            *((_QWORD *)v25 + 1) = 0;
            *((_QWORD *)v25 + 4) = 0;
            v533 = (llvm::Value ***)(v25 + 32);
            *((_QWORD *)v25 + 2) = 0;
            *((_QWORD *)v25 + 3) = v25 + 64;
            *((_QWORD *)v25 + 5) = 0;
            *((_QWORD *)v25 + 6) = 0;
            *((_QWORD *)v25 + 7) = v25 + 64;
            v534 = (_DWORD **)__src;
            v536 = llvm::Constant::getNullValue(*(llvm::Constant **)__src, v535);
            WORD4(v1691) = 257;
            sub_1C4774CC4(*v534);
            *((_QWORD *)v25 + 8) = v537;
            *((_QWORD *)v25 + 9) = 0;
            v538 = *((_DWORD *)v25 + 21) & 0xC0000000 | 2;
            *((_DWORD *)v25 + 20) = 81;
            *((_DWORD *)v25 + 21) = v538;
            *(_OWORD *)(v25 + 88) = 0u;
            *(_OWORD *)(v25 + 104) = 0u;
            *((_DWORD *)v25 + 30) = 0;
            if (*(_QWORD *)v25)
            {
              **((_QWORD **)v25 + 2) = *((_QWORD *)v25 + 1);
              v1414 = *((_QWORD *)v25 + 1);
              if (v1414)
                *(_QWORD *)(v1414 + 16) = *((_QWORD *)v25 + 2);
            }
            *(_QWORD *)v25 = v534;
            v541 = v534[1];
            v540 = v534 + 1;
            v539 = v541;
            *((_QWORD *)v25 + 1) = v541;
            if (v541)
              *((_QWORD *)v539 + 2) = v25 + 8;
            *((_QWORD *)v25 + 2) = v540;
            *v540 = v25;
            if (*((_QWORD *)v25 + 4))
            {
              **((_QWORD **)v25 + 6) = *((_QWORD *)v25 + 5);
              v1415 = *((_QWORD *)v25 + 5);
              if (v1415)
                *(_QWORD *)(v1415 + 16) = *((_QWORD *)v25 + 6);
            }
            *v533 = v536;
            if (v536)
            {
              v544 = v536[1];
              v543 = (llvm::Value ****)(v536 + 1);
              v542 = v544;
              *((_QWORD *)v25 + 5) = v544;
              if (v544)
                *((_QWORD *)v542 + 2) = v25 + 40;
              *((_QWORD *)v25 + 6) = v543;
              *v543 = v533;
            }
            if (v532)
              v38 = 32;
            else
              v38 = 33;
            goto LABEL_970;
          }
        }
        else if (v159 == 58)
        {
          if (__src == *(void **)(v157 - 64))
          {
            if ((sub_1C4D9ED34((uint64_t)&v1695, *(llvm::Constant **)(v157 - 32)) & 1) != 0)
              goto LABEL_778;
            v158 = (void *)v1694;
          }
          if (v158 != *(void **)(v157 - 32)
            || (sub_1C4D9ED34((uint64_t)&v1695, *(llvm::Constant **)(v157 - 64)) & 1) == 0)
          {
            goto LABEL_789;
          }
          goto LABEL_778;
        }
      }
LABEL_789:
      v545 = (uint64_t)*(v8 - 8);
      v546 = (uint64_t)*(v8 - 4);
      if (!v546
        || *(_BYTE *)(v546 + 16) != 16
        || *(_BYTE *)(v545 + 16) != 60
        || !v545
        || (v6 = *(_QWORD *)(v545 - 32)) == 0
        || *(_BYTE *)(v6 + 16) != 62
        || ((v547 = *(llvm::GlobalValue **)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF))) != 0
          ? (v548 = *((_BYTE *)v547 + 16) == 3)
          : (v548 = 0),
            !v548
         || (v7 = (unint64_t)sub_1C57E9A2C((uint64_t)a1, (uint64_t)*(v8 - 8), v6, v547, (_WORD *)a2, (llvm::Constant *)*(v8 - 4))) == 0))
      {
        if ((*(_WORD *)(a2 + 18) & 0x3E) == 0x20 && *(_QWORD *)(a2 - 32) == v546 && sub_1C57EDD40(v89))
        {
          v25 = (char *)operator new(0x80uLL);
          v7 = (unint64_t)(v25 + 64);
          *((_DWORD *)v25 + 21) = *((_DWORD *)v25 + 21) & 0x38000000 | 2;
          *(_QWORD *)v25 = 0;
          *((_QWORD *)v25 + 1) = 0;
          *((_QWORD *)v25 + 4) = 0;
          v549 = (llvm::ValueHandleBase **)(v25 + 32);
          *((_QWORD *)v25 + 2) = 0;
          *((_QWORD *)v25 + 3) = v25 + 64;
          *((_QWORD *)v25 + 5) = 0;
          *((_QWORD *)v25 + 6) = 0;
          *((_QWORD *)v25 + 7) = v25 + 64;
          v550 = *(llvm::ConstantInt ***)(a2 - 32);
          v551 = llvm::ConstantInt::get(*v550, 1, 0);
          v552 = llvm::ConstantExpr::getSub((llvm::ConstantExpr *)v550, (llvm::Constant *)v551, 0, 0);
          WORD4(v1691) = 257;
          sub_1C4774CC4(*(_DWORD **)v545);
          *((_QWORD *)v25 + 8) = v553;
          *((_QWORD *)v25 + 9) = 0;
          v554 = *((_DWORD *)v25 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v25 + 20) = 81;
          *((_DWORD *)v25 + 21) = v554;
          *(_OWORD *)(v25 + 88) = 0u;
          *(_OWORD *)(v25 + 104) = 0u;
          *((_DWORD *)v25 + 30) = 0;
          if (*(_QWORD *)v25)
          {
            **((_QWORD **)v25 + 2) = *((_QWORD *)v25 + 1);
            v1288 = *((_QWORD *)v25 + 1);
            if (v1288)
              *(_QWORD *)(v1288 + 16) = *((_QWORD *)v25 + 2);
          }
          *(_QWORD *)v25 = v545;
          v557 = *(_QWORD *)(v545 + 8);
          v556 = (_QWORD *)(v545 + 8);
          v555 = v557;
          *((_QWORD *)v25 + 1) = v557;
          if (v557)
            *(_QWORD *)(v555 + 16) = v25 + 8;
          *((_QWORD *)v25 + 2) = v556;
          *v556 = v25;
          if (*((_QWORD *)v25 + 4))
          {
            **((_QWORD **)v25 + 6) = *((_QWORD *)v25 + 5);
            v1289 = *((_QWORD *)v25 + 5);
            if (v1289)
              *(_QWORD *)(v1289 + 16) = *((_QWORD *)v25 + 6);
          }
          *v549 = v552;
          if (v552)
          {
            v560 = *((_QWORD *)v552 + 1);
            v559 = (llvm::ValueHandleBase ***)((char *)v552 + 8);
            v558 = v560;
            *((_QWORD *)v25 + 5) = v560;
            if (v560)
              *(_QWORD *)(v558 + 16) = v25 + 40;
            *((_QWORD *)v25 + 6) = v559;
            *v559 = v549;
          }
          v208 = v153 == 32;
          v38 = 37;
          v561 = 34;
          goto LABEL_932;
        }
        goto LABEL_881;
      }
      return v7;
    case '9':
      v13 = v1658;
      v14 = *(_WORD *)(a2 + 18) & 0x3F;
      v15 = *((_DWORD *)v1658 + 2);
      if (v15 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v1658) != v15 - 1)
          goto LABEL_112;
      }
      else if (*(_QWORD *)v1658 != 1)
      {
        goto LABEL_112;
      }
      if (v14 != 40)
        goto LABEL_112;
      v100 = (llvm::Constant *)*v8;
      if (((_DWORD)(*v8)[1] & 0xFE) == 0x12)
        v100 = (llvm::Constant *)**((_QWORD **)v100 + 2);
      v101 = llvm::Type::getPrimitiveSizeInBits(v100);
      if (!v101)
      {
LABEL_112:
        v103 = (uint64_t *)(v8 - 8);
        v102 = (uint64_t)*(v8 - 8);
        v104 = (uint64_t)*(v8 - 4);
        __src = 0;
        v1688 = (unint64_t)&__src;
        p_src = 0;
        if (!sub_1C4D89F84((uint64_t)&v1688, (unsigned __int8 *)v104)
          || (*(_WORD *)(a2 + 18) & 0x3E) != 0x20)
        {
          goto LABEL_258;
        }
        v106 = *((unsigned int *)__src + 2);
        if (v106 > 0x40)
        {
          v107 = *(llvm::Constant **)v13;
          if (memcmp(*(const void **)__src, *(const void **)v13, ((unint64_t)(v106 + 63) >> 3) & 0x3FFFFFF8))
            goto LABEL_256;
        }
        else
        {
          v107 = *(llvm::Constant **)__src;
          if (*(_QWORD *)__src != *(_QWORD *)v13)
            goto LABEL_256;
        }
        LODWORD(v1700) = *((_DWORD *)v13 + 2);
        if (v1700 > 0x40)
        {
          v1699 = operator new[]();
          memcpy((void *)v1699, *(const void **)v13, (((unint64_t)v1700 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v1699 = (unint64_t)v107;
        }
        llvm::APInt::operator+=((uint64_t)&v1699, 1uLL);
        v187 = v1700;
        LODWORD(v1700) = 0;
        if (v187 <= 0x40)
        {
          v188 = (uint8x8_t)vcnt_s8((int8x8_t)v1699);
          v188.i16[0] = vaddlv_u8(v188);
          if (v188.u32[0] != 1)
            goto LABEL_256;
LABEL_279:
          v25 = (char *)operator new(0x80uLL);
          v7 = (unint64_t)(v25 + 64);
          *((_DWORD *)v25 + 21) = *((_DWORD *)v25 + 21) & 0x38000000 | 2;
          *(_QWORD *)v25 = 0;
          *((_QWORD *)v25 + 1) = 0;
          *((_QWORD *)v25 + 2) = 0;
          *((_QWORD *)v25 + 3) = v25 + 64;
          *((_QWORD *)v25 + 4) = 0;
          v199 = v25 + 32;
          *((_QWORD *)v25 + 5) = 0;
          *((_QWORD *)v25 + 6) = 0;
          *((_QWORD *)v25 + 7) = v25 + 64;
          WORD4(v1691) = 257;
          sub_1C4774CC4(*(_DWORD **)v102);
          *((_QWORD *)v25 + 8) = v200;
          *((_QWORD *)v25 + 9) = 0;
          v201 = *((_DWORD *)v25 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v25 + 20) = 81;
          *((_DWORD *)v25 + 21) = v201;
          *(_OWORD *)(v25 + 88) = 0u;
          *(_OWORD *)(v25 + 104) = 0u;
          *((_DWORD *)v25 + 30) = 0;
          if (*(_QWORD *)v25)
          {
            **((_QWORD **)v25 + 2) = *((_QWORD *)v25 + 1);
            v1295 = *((_QWORD *)v25 + 1);
            if (v1295)
              *(_QWORD *)(v1295 + 16) = *((_QWORD *)v25 + 2);
          }
          *(_QWORD *)v25 = v102;
          v204 = *(_QWORD *)(v102 + 8);
          v203 = (_QWORD *)(v102 + 8);
          v202 = v204;
          *((_QWORD *)v25 + 1) = v204;
          if (v204)
            *(_QWORD *)(v202 + 16) = v25 + 8;
          *((_QWORD *)v25 + 2) = v203;
          *v203 = v25;
          if (*((_QWORD *)v25 + 4))
          {
            **((_QWORD **)v25 + 6) = *((_QWORD *)v25 + 5);
            v1296 = *((_QWORD *)v25 + 5);
            if (v1296)
              *(_QWORD *)(v1296 + 16) = *((_QWORD *)v25 + 6);
          }
          *v199 = v104;
          if (v104)
          {
            v207 = *(_QWORD *)(v104 + 8);
            v206 = (_QWORD *)(v104 + 8);
            v205 = v207;
            *((_QWORD *)v25 + 5) = v207;
            if (v207)
              *(_QWORD *)(v205 + 16) = v25 + 40;
            *((_QWORD *)v25 + 6) = v206;
            *v206 = v199;
          }
          v208 = v14 == 32;
LABEL_931:
          v38 = 34;
          v561 = 37;
LABEL_932:
          if (v208)
            v38 = v561;
LABEL_970:
          *((_WORD *)v25 + 41) = v38;
LABEL_998:
          llvm::Value::setName((uint64_t ***)v7, (uint64_t)&v1688);
          return v7;
        }
        v195 = 0;
        v196 = 0;
        v197 = ((unint64_t)(v187 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          v198 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(v1699 + v195));
          v198.i16[0] = vaddlv_u8(v198);
          v196 += v198.i32[0];
          v195 += 8;
        }
        while (v197 != v195);
        if (v1699)
        {
          MEMORY[0x1CAA32F9C](v1699, 0x1000C8000313F17);
          if (v1700 >= 0x41)
          {
            if (v1699)
              MEMORY[0x1CAA32F9C](v1699, 0x1000C8000313F17);
          }
        }
        if (v196 == 1)
          goto LABEL_279;
LABEL_256:
        v189 = v8[1];
        if (v189 && !v189[1])
        {
          v216 = a1[3];
          v217 = (const void **)__src;
          v218 = *((unsigned int *)__src + 2);
          v1682 = v218;
          if (v218 > 0x40)
          {
            v293 = ((unint64_t)(v218 + 63) >> 3) & 0x3FFFFFF8;
            __dst = (void *)operator new[]();
            memcpy(__dst, *v217, v293);
            llvm::APInt::flipAllBitsSlowCase((uint64_t)&__dst);
            LODWORD(v218) = v1682;
            v220 = (unint64_t)__dst;
          }
          else
          {
            v219 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v218;
            if (!(_DWORD)v218)
              v219 = 0;
            v220 = v219 & ~*(_QWORD *)__src;
          }
          LODWORD(v1695) = v218;
          v1694 = v220;
          WORD4(v1691) = 257;
          v294 = llvm::ConstantInt::get(*(llvm::ConstantInt ***)v102, (llvm::Type *)&v1694, v105);
          v296 = sub_1C4D89BCC(v216, (_QWORD *)v102, (uint64_t)v294, (uint64_t)&v1688);
          if (v1695 >= 0x41 && v1694)
            MEMORY[0x1CAA32F9C](v1694, 0x1000C8000313F17);
          v297 = (llvm::Constant *)*v8;
          v298 = *((unsigned int *)v13 + 2);
          if (v298 > 0x40)
          {
            v299 = (void *)operator new[]();
            memcpy(v299, *(const void **)v13, ((unint64_t)(v298 + 63) >> 3) & 0x3FFFFFF8);
            v300 = *(llvm::Constant **)__src;
            v301 = (unint64_t)(v298 + 63) >> 6;
            v302 = v299;
            do
            {
              v303 = *(_QWORD *)v300;
              v300 = (llvm::Constant *)((char *)v300 + 8);
              *v302++ ^= v303;
              --v301;
            }
            while (v301);
          }
          else
          {
            v299 = (void *)(*(_QWORD *)__src ^ *(_QWORD *)v13);
          }
          LODWORD(p_src) = v298;
          v1688 = (unint64_t)v299;
          v304 = llvm::ConstantInt::get((llvm::ConstantInt **)v297, (llvm::Type *)&v1688, v295);
          if (p_src >= 0x41 && v1688)
            MEMORY[0x1CAA32F9C](v1688, 0x1000C8000313F17);
          v305 = (char *)operator new(0x80uLL);
          v7 = (unint64_t)(v305 + 64);
          *((_DWORD *)v305 + 21) = *((_DWORD *)v305 + 21) & 0x38000000 | 2;
          *(_QWORD *)v305 = 0;
          *((_QWORD *)v305 + 1) = 0;
          *((_QWORD *)v305 + 2) = 0;
          *((_QWORD *)v305 + 3) = v305 + 64;
          *((_QWORD *)v305 + 4) = 0;
          v306 = (llvm::Value ***)(v305 + 32);
          *((_QWORD *)v305 + 5) = 0;
          *((_QWORD *)v305 + 6) = 0;
          *((_QWORD *)v305 + 7) = v305 + 64;
          WORD4(v1691) = 257;
          sub_1C4774CC4(*(_DWORD **)v296);
          *((_QWORD *)v305 + 8) = v307;
          *((_QWORD *)v305 + 9) = 0;
          v308 = *((_DWORD *)v305 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v305 + 20) = 81;
          *((_DWORD *)v305 + 21) = v308;
          *(_OWORD *)(v305 + 88) = 0u;
          *(_OWORD *)(v305 + 104) = 0u;
          *((_DWORD *)v305 + 30) = 0;
          if (*(_QWORD *)v305)
          {
            **((_QWORD **)v305 + 2) = *((_QWORD *)v305 + 1);
            v1327 = *((_QWORD *)v305 + 1);
            if (v1327)
              *(_QWORD *)(v1327 + 16) = *((_QWORD *)v305 + 2);
          }
          *(_QWORD *)v305 = v296;
          v311 = *(_QWORD *)(v296 + 8);
          v310 = (_QWORD *)(v296 + 8);
          v309 = v311;
          *((_QWORD *)v305 + 1) = v311;
          if (v311)
            *(_QWORD *)(v309 + 16) = v305 + 8;
          *((_QWORD *)v305 + 2) = v310;
          *v310 = v305;
          if (*((_QWORD *)v305 + 4))
          {
            **((_QWORD **)v305 + 6) = *((_QWORD *)v305 + 5);
            v1328 = *((_QWORD *)v305 + 5);
            if (v1328)
              *(_QWORD *)(v1328 + 16) = *((_QWORD *)v305 + 6);
          }
          *v306 = v304;
          if (v304)
          {
            v314 = v304[1];
            v313 = (llvm::Value ****)(v304 + 1);
            v312 = v314;
            *((_QWORD *)v305 + 5) = v314;
            if (v314)
              *((_QWORD *)v312 + 2) = v305 + 40;
            *((_QWORD *)v305 + 6) = v313;
            *v313 = v306;
          }
          *((_WORD *)v305 + 41) = v14;
          goto LABEL_998;
        }
LABEL_258:
        v1694 = 0;
        LOBYTE(v1675) = 0;
        if (!sub_1C57921EC(v14, v13, &v1675))
          goto LABEL_395;
        v1688 = (unint64_t)&v1694;
        v1690 = (uint64_t)&v1694;
        v190 = *((unsigned __int8 *)v8 + 16);
        if (v190 != 5)
        {
          if (v190 != 57)
            goto LABEL_395;
          v191 = *v103;
          v192 = *(unsigned __int8 *)(*v103 + 16);
          if (v192 == 5)
          {
            if (*(_WORD *)(v191 + 18) != 13)
              goto LABEL_292;
            v209 = v191 - 32 * (*(_DWORD *)(v191 + 20) & 0x7FFFFFF);
            if (!*(_QWORD *)v209)
              goto LABEL_292;
            v1694 = *(_QWORD *)v209;
            if (!sub_1C4D9EED4((uint64_t)&p_src, *(llvm::Constant **)(v209 + 32)))
              goto LABEL_292;
          }
          else
          {
            if (v192 != 41)
              goto LABEL_292;
            if (!*(_QWORD *)(v191 - 64))
              goto LABEL_292;
            v1694 = *(_QWORD *)(v191 - 64);
            if ((sub_1C4D9ED34((uint64_t)&p_src, *(llvm::Constant **)(v191 - 32)) & 1) == 0)
              goto LABEL_292;
          }
          if (*(uint64_t ***)v1690 == *(v8 - 4))
            goto LABEL_407;
LABEL_292:
          v210 = (uint64_t)*(v8 - 4);
          v211 = *(unsigned __int8 *)(v210 + 16);
          if (v211 == 5)
          {
            if (*(_WORD *)(v210 + 18) == 13)
            {
              v214 = *(_QWORD *)(v210 - 32 * (*(_DWORD *)(v210 + 20) & 0x7FFFFFF));
              if (v214)
              {
                *(_QWORD *)v1688 = v214;
                v213 = sub_1C4D9EED4((uint64_t)&p_src, *(llvm::Constant **)(v210 - 32 * (*(_DWORD *)(v210 + 20) & 0x7FFFFFF) + 32));
LABEL_299:
                v215 = v8 - 8;
                if ((v213 & 1) == 0)
                  goto LABEL_395;
                goto LABEL_394;
              }
            }
          }
          else if (v211 == 41)
          {
            v212 = *(_QWORD *)(v210 - 64);
            if (v212)
            {
              *(_QWORD *)v1688 = v212;
              v213 = sub_1C4D9ED34((uint64_t)&p_src, *(llvm::Constant **)(v210 - 32));
              goto LABEL_299;
            }
          }
LABEL_395:
          if ((*(_WORD *)(a2 + 18) & 0x3E) != 0x20)
            goto LABEL_881;
          v276 = *((_DWORD *)v13 + 2);
          if (v276 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase(v13) != v276)
              goto LABEL_881;
          }
          else if (*(_QWORD *)v13)
          {
            goto LABEL_881;
          }
          v277 = v8[1];
          if (!v277 || v277[1])
            goto LABEL_881;
          __s2 = 0;
          v1677 = 0;
          v1688 = (unint64_t)&__s2;
          p_src = (unint64_t *)&v1677;
          v278 = *((unsigned __int8 *)v8 + 16);
          if (v278 == 5)
          {
            if (*((_WORD *)v8 + 9) != 29
              || !sub_1C4E714F4((_QWORD **)&v1688, (uint64_t)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)])
              || (sub_1C4E714F4(&p_src, (uint64_t)v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4]) & 1) == 0)
            {
              goto LABEL_510;
            }
          }
          else if (v278 != 57
                 || !sub_1C4E714F4((_QWORD **)&v1688, *v103)
                 || !sub_1C4E714F4(&p_src, (uint64_t)*(v8 - 4)))
          {
LABEL_510:
            v368 = *(_QWORD *)(v102 + 8);
            if (!v368 || *(_QWORD *)(v368 + 8))
              goto LABEL_881;
            v369 = *(unsigned __int8 *)(v102 + 16);
            if (v369 == 5)
            {
              if (*(_WORD *)(v102 + 18) != 30)
                goto LABEL_881;
              v583 = (uint64_t *)(v102 - 32 * (*(_DWORD *)(v102 + 20) & 0x7FFFFFF));
              v6 = *v583;
              if (!*v583)
                goto LABEL_881;
              v370 = v583[4];
              if (!v370)
                goto LABEL_881;
            }
            else
            {
              if (v369 != 58)
                goto LABEL_881;
              v6 = *(_QWORD *)(v102 - 64);
              if (!v6)
                goto LABEL_881;
              v370 = *(_QWORD *)(v102 - 32);
              if (!v370)
                goto LABEL_881;
            }
            v584 = *(_QWORD *)(v104 + 8);
            if (!v584 || *(_QWORD *)(v584 + 8))
              goto LABEL_881;
            v585 = *(unsigned __int8 *)(v104 + 16);
            if (v585 == 5)
            {
              if (*(_WORD *)(v104 + 18) != 30)
                goto LABEL_881;
              v1164 = (uint64_t *)(v104 - 32 * (*(_DWORD *)(v104 + 20) & 0x7FFFFFF));
              v586 = *v1164;
              if (!*v1164)
                goto LABEL_881;
              v587 = v1164[4];
              if (!v587)
                goto LABEL_881;
            }
            else
            {
              if (v585 != 58)
                goto LABEL_881;
              v586 = *(_QWORD *)(v104 - 64);
              if (!v586)
                goto LABEL_881;
              v587 = *(_QWORD *)(v104 - 32);
              if (!v587)
                goto LABEL_881;
            }
            v1165 = a1[3];
            WORD4(v1691) = 257;
            v353 = (_QWORD *)sub_1C4774B48(v1165, v14, v6, v370, (uint64_t)&v1688);
            v1166 = a1[3];
            WORD4(v1691) = 257;
            v358 = sub_1C4774B48(v1166, v14, v586, v587, (uint64_t)&v1688);
            WORD4(v1691) = 257;
            goto LABEL_501;
          }
          v350 = a1[3];
          v351 = __s2;
          v352 = llvm::Constant::getNullValue(*(llvm::Constant **)__s2, (llvm::Type *)v5);
          WORD4(v1691) = 257;
          v353 = (_QWORD *)sub_1C4774B48(v350, v14, (uint64_t)v351, (uint64_t)v352, (uint64_t)&v1688);
          v354 = a1[3];
          v355 = v1677;
          v357 = llvm::Constant::getNullValue(*(llvm::Constant **)v1677, v356);
          WORD4(v1691) = 257;
          v358 = sub_1C4774B48(v354, v14, (uint64_t)v355, (uint64_t)v357, (uint64_t)&v1688);
          WORD4(v1691) = 257;
LABEL_501:
          v359 = (char *)operator new(0x80uLL);
          *((_QWORD *)v359 + 6) = 0;
          *((_QWORD *)v359 + 5) = 0;
          v360 = v359 + 40;
          *((_QWORD *)v359 + 8) = *v353;
          v7 = (unint64_t)(v359 + 64);
          *((_QWORD *)v359 + 3) = v359 + 64;
          *((_QWORD *)v359 + 7) = v359 + 64;
          *((_QWORD *)v359 + 9) = 0;
          if (v14 == 32)
            v361 = 56;
          else
            v361 = 57;
          v359[80] = v361;
          v359[81] = 0;
          *((_WORD *)v359 + 41) = 0;
          *((_DWORD *)v359 + 21) = 2;
          *(_OWORD *)(v359 + 88) = 0u;
          *(_OWORD *)(v359 + 104) = 0u;
          *((_DWORD *)v359 + 30) = 0;
          *(_QWORD *)v359 = v353;
          v364 = v353[1];
          v363 = v353 + 1;
          v362 = v364;
          *((_QWORD *)v359 + 1) = v364;
          if (v364)
            *(_QWORD *)(v362 + 16) = v359 + 8;
          *((_QWORD *)v359 + 2) = v363;
          *v363 = v359;
          *((_QWORD *)v359 + 4) = v358;
          if (v358)
          {
            v367 = *(_QWORD *)(v358 + 8);
            v366 = (_QWORD *)(v358 + 8);
            v365 = v367;
            *v360 = v367;
            if (v367)
              *(_QWORD *)(v365 + 16) = v360;
            *((_QWORD *)v359 + 6) = v366;
            *v366 = v359 + 32;
          }
          goto LABEL_998;
        }
        if (*((_WORD *)v8 + 9) != 29)
          goto LABEL_395;
        v193 = v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
        v194 = *((unsigned __int8 *)v193 + 16);
        if (v194 == 5)
        {
          if (*((_WORD *)v193 + 9) != 13)
            goto LABEL_343;
          v243 = (unint64_t *)&v193[-4 * (*((_DWORD *)v193 + 5) & 0x7FFFFFF)];
          if (!*v243)
            goto LABEL_343;
          v1694 = *v243;
          if (!sub_1C4D9EED4((uint64_t)&p_src, (llvm::Constant *)v243[4]))
            goto LABEL_343;
        }
        else
        {
          if (v194 != 41)
            goto LABEL_343;
          if (!*(v193 - 8))
            goto LABEL_343;
          v1694 = (unint64_t)*(v193 - 8);
          if ((sub_1C4D9ED34((uint64_t)&p_src, (llvm::Constant *)*(v193 - 4)) & 1) == 0)
            goto LABEL_343;
        }
        if (*(uint64_t ***)v1690 == v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4])
          goto LABEL_407;
LABEL_343:
        v244 = v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF) + 4];
        v245 = *((unsigned __int8 *)v244 + 16);
        if (v245 == 5)
        {
          if (*((_WORD *)v244 + 9) != 13)
            goto LABEL_395;
          v275 = v244[-4 * (*((_DWORD *)v244 + 5) & 0x7FFFFFF)];
          if (!v275)
            goto LABEL_395;
          *(_QWORD *)v1688 = v275;
          if (!sub_1C4D9EED4((uint64_t)&p_src, (llvm::Constant *)v244[-4 * (*((_DWORD *)v244 + 5) & 0x7FFFFFF) + 4]))goto LABEL_395;
        }
        else
        {
          if (v245 != 41)
            goto LABEL_395;
          v246 = (uint64_t)*(v244 - 8);
          if (!v246)
            goto LABEL_395;
          *(_QWORD *)v1688 = v246;
          if ((sub_1C4D9ED34((uint64_t)&p_src, (llvm::Constant *)*(v244 - 4)) & 1) == 0)
            goto LABEL_395;
        }
        v215 = &v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
LABEL_394:
        if (*(uint64_t ***)v1690 != *v215)
          goto LABEL_395;
LABEL_407:
        v279 = v1675;
        v280 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v1694, v1675, 0);
        v281 = (char *)operator new(0x80uLL);
        v7 = (unint64_t)(v281 + 64);
        *((_DWORD *)v281 + 21) = *((_DWORD *)v281 + 21) & 0x38000000 | 2;
        *(_QWORD *)v281 = 0;
        *((_QWORD *)v281 + 1) = 0;
        *((_QWORD *)v281 + 2) = 0;
        *((_QWORD *)v281 + 3) = v281 + 64;
        *((_QWORD *)v281 + 4) = 0;
        v282 = (llvm::Value ***)(v281 + 32);
        *((_QWORD *)v281 + 5) = 0;
        *((_QWORD *)v281 + 6) = 0;
        *((_QWORD *)v281 + 7) = v281 + 64;
        v283 = v1694;
        WORD4(v1691) = 257;
        sub_1C4774CC4(*(_DWORD **)v1694);
        *((_QWORD *)v281 + 8) = v284;
        *((_QWORD *)v281 + 9) = 0;
        v285 = *((_DWORD *)v281 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v281 + 20) = 81;
        *((_DWORD *)v281 + 21) = v285;
        *(_OWORD *)(v281 + 88) = 0u;
        *(_OWORD *)(v281 + 104) = 0u;
        *((_DWORD *)v281 + 30) = 0;
        if (*(_QWORD *)v281)
        {
          **((_QWORD **)v281 + 2) = *((_QWORD *)v281 + 1);
          v1358 = *((_QWORD *)v281 + 1);
          if (v1358)
            *(_QWORD *)(v1358 + 16) = *((_QWORD *)v281 + 2);
        }
        *(_QWORD *)v281 = v283;
        v288 = *(_QWORD *)(v283 + 8);
        v287 = (_QWORD *)(v283 + 8);
        v286 = v288;
        *((_QWORD *)v281 + 1) = v288;
        if (v288)
          *(_QWORD *)(v286 + 16) = v281 + 8;
        *((_QWORD *)v281 + 2) = v287;
        *v287 = v281;
        if (*((_QWORD *)v281 + 4))
        {
          **((_QWORD **)v281 + 6) = *((_QWORD *)v281 + 5);
          v1359 = *((_QWORD *)v281 + 5);
          if (v1359)
            *(_QWORD *)(v1359 + 16) = *((_QWORD *)v281 + 6);
        }
        *v282 = v280;
        if (v280)
        {
          v291 = v280[1];
          v290 = (llvm::Value ****)(v280 + 1);
          v289 = v291;
          *((_QWORD *)v281 + 5) = v291;
          if (v291)
            *((_QWORD *)v289 + 2) = v281 + 40;
          *((_QWORD *)v281 + 6) = v290;
          *v290 = v282;
        }
        if (v279)
          v292 = 40;
        else
          v292 = 38;
        *((_WORD *)v281 + 41) = v292;
        goto LABEL_998;
      }
      __s2 = 0;
      v1677 = 0;
      LODWORD(v1685) = 64;
      __src = &__s2;
      *(_QWORD *)v1684 = (v101 - 1);
      v1697 = 64;
      v1695 = &v1677;
      v1696 = *(_QWORD *)v1684;
      sub_1C62A892C((uint64_t)&v1688, &__src, (uint64_t)&v1694);
      v223 = *((unsigned __int8 *)v8 + 16);
      if (v223 == 5)
      {
        if (*((_WORD *)v8 + 9) == 29)
        {
          v396 = v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
          v397 = *((unsigned __int8 *)v396 + 16);
          if (v397 == 5)
          {
            if (*((_WORD *)v396 + 9) != 27)
              goto LABEL_872;
            v592 = v396[-4 * (*((_DWORD *)v396 + 5) & 0x7FFFFFF)];
            if (!v592)
              goto LABEL_872;
            *(_QWORD *)v1688 = v592;
            if (!sub_1C4D8A86C((llvm::APInt *)&p_src, (llvm::Constant *)v396[-4 * (*((_DWORD *)v396 + 5) & 0x7FFFFFF) + 4]))goto LABEL_872;
          }
          else
          {
            if (v397 != 55)
              goto LABEL_872;
            v398 = (uint64_t)*(v396 - 8);
            if (!v398)
              goto LABEL_872;
            *(_QWORD *)v1688 = v398;
            if (!sub_1C4D8A7F0((llvm::APInt *)&p_src, (unsigned __int8 *)*(v396 - 4)))
              goto LABEL_872;
          }
          v593 = &v8[-4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF)];
          if (sub_1C5819B98((uint64_t)&v1691, (uint64_t)v593[4], (char)v593))
          {
LABEL_866:
            v594 = (_DWORD **)__s2;
            if (__s2 && __s2 == v1677)
            {
              sub_1C62A89BC((uint64_t)&v1688);
              v25 = (char *)operator new(0x80uLL);
              v7 = (unint64_t)(v25 + 64);
              *((_DWORD *)v25 + 21) = *((_DWORD *)v25 + 21) & 0x38000000 | 2;
              *(_QWORD *)v25 = 0;
              *((_QWORD *)v25 + 1) = 0;
              *((_QWORD *)v25 + 2) = 0;
              *((_QWORD *)v25 + 3) = v25 + 64;
              *((_QWORD *)v25 + 4) = 0;
              v26 = v25 + 32;
              *((_QWORD *)v25 + 5) = 0;
              *((_QWORD *)v25 + 6) = 0;
              *((_QWORD *)v25 + 7) = v25 + 64;
              v162 = llvm::ConstantInt::get((llvm::ConstantInt *)*v594, 1, 0);
              WORD4(v1691) = 257;
              sub_1C4774CC4(*v594);
              *((_QWORD *)v25 + 8) = v595;
              *((_QWORD *)v25 + 9) = 0;
              v596 = *((_DWORD *)v25 + 21) & 0xC0000000 | 2;
              *((_DWORD *)v25 + 20) = 81;
              *((_DWORD *)v25 + 21) = v596;
              *(_OWORD *)(v25 + 88) = 0u;
              *(_OWORD *)(v25 + 104) = 0u;
              *((_DWORD *)v25 + 30) = 0;
              if (*(_QWORD *)v25)
              {
                **((_QWORD **)v25 + 2) = *((_QWORD *)v25 + 1);
                v1559 = *((_QWORD *)v25 + 1);
                if (v1559)
                  *(_QWORD *)(v1559 + 16) = *((_QWORD *)v25 + 2);
              }
              *(_QWORD *)v25 = v594;
              v599 = v594[1];
              v598 = v594 + 1;
              v597 = v599;
              *((_QWORD *)v25 + 1) = v599;
              if (v599)
                *((_QWORD *)v597 + 2) = v25 + 8;
              *((_QWORD *)v25 + 2) = v598;
              *v598 = v25;
              goto LABEL_202;
            }
          }
        }
      }
      else if (v223 == 57)
      {
        v224 = (uint64_t)*(v8 - 8);
        v225 = *(unsigned __int8 *)(v224 + 16);
        if (v225 == 5)
        {
          if (*(_WORD *)(v224 + 18) != 27)
            goto LABEL_872;
          v582 = *(_QWORD *)(v224 - 32 * (*(_DWORD *)(v224 + 20) & 0x7FFFFFF));
          if (!v582)
            goto LABEL_872;
          *(_QWORD *)v1688 = v582;
          if (!sub_1C4D8A86C((llvm::APInt *)&p_src, *(llvm::Constant **)(v224 - 32 * (*(_DWORD *)(v224 + 20) & 0x7FFFFFF) + 32)))goto LABEL_872;
        }
        else
        {
          if (v225 != 55)
            goto LABEL_872;
          v226 = *(_QWORD *)(v224 - 64);
          if (!v226)
            goto LABEL_872;
          *(_QWORD *)v1688 = v226;
          if (!sub_1C4D8A7F0((llvm::APInt *)&p_src, *(unsigned __int8 **)(v224 - 32)))
            goto LABEL_872;
        }
        if (sub_1C5819B98((uint64_t)&v1691, (uint64_t)*(v8 - 4), (char)&v1688))
          goto LABEL_866;
      }
LABEL_872:
      sub_1C62A89BC((uint64_t)&v1688);
      goto LABEL_112;
    case ':':
      v16 = (unsigned int *)v1658;
      v17 = (_DWORD **)*(v8 - 8);
      v18 = (uint64_t)*(v8 - 4);
      v1671 = 0;
      v1688 = (unint64_t)&v1671;
      p_src = 0;
      if ((sub_1C4D89F84((uint64_t)&v1688, (unsigned __int8 *)v18) & 1) == 0)
        goto LABEL_881;
      v19 = *(_WORD *)(a2 + 18) & 0x3F;
      LOBYTE(v1669) = 0;
      if (sub_1C57921EC(v19, (llvm::APInt *)v16, &v1669))
      {
        v20 = v1671;
        v21 = *((_DWORD *)v1671 + 2);
        v22 = v21 - 1;
        if (v21 >= 0x41)
          v20 = (llvm::APInt *)(*(_QWORD *)v1671 + 8 * (v22 >> 6));
        if (((*(_QWORD *)v20 >> v22) & 1) != 0)
        {
          v23 = v1669;
          v25 = (char *)operator new(0x80uLL);
          v7 = (unint64_t)(v25 + 64);
          *((_DWORD *)v25 + 21) = *((_DWORD *)v25 + 21) & 0x38000000 | 2;
          *(_QWORD *)v25 = 0;
          *((_QWORD *)v25 + 1) = 0;
          *((_QWORD *)v25 + 4) = 0;
          v26 = v25 + 32;
          *((_QWORD *)v25 + 2) = 0;
          *((_QWORD *)v25 + 3) = v25 + 64;
          *((_QWORD *)v25 + 5) = 0;
          *((_QWORD *)v25 + 6) = 0;
          *((_QWORD *)v25 + 7) = v25 + 64;
          v27 = (llvm::Constant *)*v17;
          v28 = v25 + 88;
          if (v23)
          {
            v29 = llvm::Constant::getAllOnesValue(v27, v24);
            WORD4(v1691) = 257;
            sub_1C4774CC4(*v17);
            *((_QWORD *)v25 + 8) = v30;
            *((_QWORD *)v25 + 9) = 0;
            v31 = *((_DWORD *)v25 + 21) & 0xC0000000 | 2;
            *((_DWORD *)v25 + 20) = 81;
            *((_DWORD *)v25 + 21) = v31;
            *v28 = 0u;
            *(_OWORD *)(v25 + 104) = 0u;
            *((_DWORD *)v25 + 30) = 0;
            if (*(_QWORD *)v25)
            {
              **((_QWORD **)v25 + 2) = *((_QWORD *)v25 + 1);
              v1286 = *((_QWORD *)v25 + 1);
              if (v1286)
                *(_QWORD *)(v1286 + 16) = *((_QWORD *)v25 + 2);
            }
            *(_QWORD *)v25 = v17;
            v34 = v17[1];
            v33 = v17 + 1;
            v32 = v34;
            *((_QWORD *)v25 + 1) = v34;
            if (v34)
              *((_QWORD *)v32 + 2) = v25 + 8;
            *((_QWORD *)v25 + 2) = v33;
            *v33 = v25;
            if (*((_QWORD *)v25 + 4))
            {
              **((_QWORD **)v25 + 6) = *((_QWORD *)v25 + 5);
              v1287 = *((_QWORD *)v25 + 5);
              if (v1287)
                *(_QWORD *)(v1287 + 16) = *((_QWORD *)v25 + 6);
            }
            *v26 = v29;
            if (v29)
            {
              v37 = *((_QWORD *)v29 + 1);
              v36 = (_QWORD *)((char *)v29 + 8);
              v35 = v37;
              *((_QWORD *)v25 + 5) = v37;
              if (v37)
                *(_QWORD *)(v35 + 16) = v25 + 40;
              *((_QWORD *)v25 + 6) = v36;
              *v36 = v26;
            }
            v38 = 38;
            goto LABEL_970;
          }
          v162 = llvm::Constant::getNullValue(v27, v24);
          WORD4(v1691) = 257;
          sub_1C4774CC4(*v17);
          *((_QWORD *)v25 + 8) = v163;
          *((_QWORD *)v25 + 9) = 0;
          v164 = *((_DWORD *)v25 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v25 + 20) = 81;
          *((_DWORD *)v25 + 21) = v164;
          *v28 = 0u;
          *(_OWORD *)(v25 + 104) = 0u;
          *((_DWORD *)v25 + 30) = 0;
          if (*(_QWORD *)v25)
          {
            **((_QWORD **)v25 + 2) = *((_QWORD *)v25 + 1);
            v1294 = *((_QWORD *)v25 + 1);
            if (v1294)
              *(_QWORD *)(v1294 + 16) = *((_QWORD *)v25 + 2);
          }
          *(_QWORD *)v25 = v17;
          v167 = v17[1];
          v166 = v17 + 1;
          v165 = v167;
          *((_QWORD *)v25 + 1) = v167;
          if (v167)
            *((_QWORD *)v165 + 2) = v25 + 8;
          *((_QWORD *)v25 + 2) = v166;
          *v166 = v25;
          goto LABEL_202;
        }
        v12 = sub_1C577E2C8((uint64_t)a1, a2, 0, (uint64_t)v17);
LABEL_93:
        v7 = v12;
        if (!v12)
          goto LABEL_881;
        return v7;
      }
      v109 = v8[1];
      if (!v109)
        goto LABEL_127;
      if (v109[1])
        goto LABEL_127;
      v110 = *(_WORD *)(a2 + 18);
      if ((v110 & 0x3E) == 0x20)
        goto LABEL_127;
      v227 = *((_DWORD *)v1671 + 2);
      if (v227 > 0x40)
      {
        v1209 = v227 - 1;
        if (((*(_QWORD *)(*(_QWORD *)v1671 + 8 * ((v227 - 1) >> 6)) >> (v227 - 1)) & 1) != 0)
        {
          if (llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v1671) == v1209)
            goto LABEL_328;
        }
        else if (llvm::APInt::countTrailingOnesSlowCase(v1671) == v1209)
        {
          goto LABEL_518;
        }
      }
      else
      {
        v228 = v227 - 1;
        if (*(_QWORD *)v1671 == 1 << v228)
        {
LABEL_328:
          FlippedSignednessPredicate = llvm::CmpInst::getFlippedSignednessPredicate(v110 & 0x3F);
          v231 = (char *)operator new(0x80uLL);
          v7 = (unint64_t)(v231 + 64);
          *((_DWORD *)v231 + 21) = *((_DWORD *)v231 + 21) & 0x38000000 | 2;
          *(_QWORD *)v231 = 0;
          *((_QWORD *)v231 + 1) = 0;
          *((_QWORD *)v231 + 2) = 0;
          *((_QWORD *)v231 + 3) = v231 + 64;
          *((_QWORD *)v231 + 4) = 0;
          v232 = (llvm::Value ***)(v231 + 32);
          *((_QWORD *)v231 + 5) = 0;
          *((_QWORD *)v231 + 6) = 0;
          *((_QWORD *)v231 + 7) = v231 + 64;
          v233 = (llvm::ConstantInt **)*v17;
          v234 = v16[2];
          if (v234 > 0x40)
          {
            v235 = (void *)operator new[]();
            memcpy(v235, *(const void **)v16, ((unint64_t)(v234 + 63) >> 3) & 0x3FFFFFF8);
            v485 = *(uint64_t **)v1671;
            v486 = (unint64_t)(v234 + 63) >> 6;
            v487 = v235;
            do
            {
              v488 = *v485++;
              *v487++ ^= v488;
              --v486;
            }
            while (v486);
          }
          else
          {
            v235 = (void *)(*(_QWORD *)v1671 ^ *(_QWORD *)v16);
          }
          LODWORD(v1695) = v234;
          v1694 = (unint64_t)v235;
          v489 = llvm::ConstantInt::get(v233, (llvm::Type *)&v1694, v230);
          WORD4(v1691) = 257;
          sub_1C4774CC4(*v17);
          *((_QWORD *)v231 + 8) = v490;
          *((_QWORD *)v231 + 9) = 0;
          v491 = *((_DWORD *)v231 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v231 + 20) = 81;
          *((_DWORD *)v231 + 21) = v491;
          *(_OWORD *)(v231 + 88) = 0u;
          *(_OWORD *)(v231 + 104) = 0u;
          *((_DWORD *)v231 + 30) = 0;
          if (*(_QWORD *)v231)
          {
            **((_QWORD **)v231 + 2) = *((_QWORD *)v231 + 1);
            v1379 = *((_QWORD *)v231 + 1);
            if (v1379)
              *(_QWORD *)(v1379 + 16) = *((_QWORD *)v231 + 2);
          }
          *(_QWORD *)v231 = v17;
          v494 = v17[1];
          v493 = v17 + 1;
          v492 = v494;
          *((_QWORD *)v231 + 1) = v494;
          if (v494)
            *((_QWORD *)v492 + 2) = v231 + 8;
          *((_QWORD *)v231 + 2) = v493;
          *v493 = v231;
          if (*((_QWORD *)v231 + 4))
          {
            **((_QWORD **)v231 + 6) = *((_QWORD *)v231 + 5);
            v1380 = *((_QWORD *)v231 + 5);
            if (v1380)
              *(_QWORD *)(v1380 + 16) = *((_QWORD *)v231 + 6);
          }
          *v232 = v489;
          if (v489)
          {
            v497 = v489[1];
            v496 = (llvm::Value ****)(v489 + 1);
            v495 = v497;
            *((_QWORD *)v231 + 5) = v497;
            if (v497)
              *((_QWORD *)v495 + 2) = v231 + 40;
            *((_QWORD *)v231 + 6) = v496;
            *v496 = v232;
          }
          *((_WORD *)v231 + 41) = FlippedSignednessPredicate;
          goto LABEL_1225;
        }
        if (*(_QWORD *)v1671 == ~(-1 << v228))
        {
LABEL_518:
          v371 = dword_1C86618B4[(int)llvm::CmpInst::getFlippedSignednessPredicate(v110 & 0x3F)];
          v373 = (char *)operator new(0x80uLL);
          v7 = (unint64_t)(v373 + 64);
          *((_DWORD *)v373 + 21) = *((_DWORD *)v373 + 21) & 0x38000000 | 2;
          *(_QWORD *)v373 = 0;
          *((_QWORD *)v373 + 1) = 0;
          *((_QWORD *)v373 + 2) = 0;
          *((_QWORD *)v373 + 3) = v373 + 64;
          *((_QWORD *)v373 + 4) = 0;
          v374 = (llvm::Value ***)(v373 + 32);
          *((_QWORD *)v373 + 5) = 0;
          *((_QWORD *)v373 + 6) = 0;
          *((_QWORD *)v373 + 7) = v373 + 64;
          v375 = (llvm::ConstantInt **)*v17;
          v376 = v16[2];
          if (v376 > 0x40)
          {
            v377 = (void *)operator new[]();
            memcpy(v377, *(const void **)v16, ((unint64_t)(v376 + 63) >> 3) & 0x3FFFFFF8);
            v569 = *(uint64_t **)v1671;
            v570 = (unint64_t)(v376 + 63) >> 6;
            v571 = v377;
            do
            {
              v572 = *v569++;
              *v571++ ^= v572;
              --v570;
            }
            while (v570);
          }
          else
          {
            v377 = (void *)(*(_QWORD *)v1671 ^ *(_QWORD *)v16);
          }
          LODWORD(v1695) = v376;
          v1694 = (unint64_t)v377;
          v573 = llvm::ConstantInt::get(v375, (llvm::Type *)&v1694, v372);
          WORD4(v1691) = 257;
          sub_1C4774CC4(*v17);
          *((_QWORD *)v373 + 8) = v574;
          *((_QWORD *)v373 + 9) = 0;
          v575 = *((_DWORD *)v373 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v373 + 20) = 81;
          *((_DWORD *)v373 + 21) = v575;
          *(_OWORD *)(v373 + 88) = 0u;
          *(_OWORD *)(v373 + 104) = 0u;
          *((_DWORD *)v373 + 30) = 0;
          if (*(_QWORD *)v373)
          {
            **((_QWORD **)v373 + 2) = *((_QWORD *)v373 + 1);
            v1442 = *((_QWORD *)v373 + 1);
            if (v1442)
              *(_QWORD *)(v1442 + 16) = *((_QWORD *)v373 + 2);
          }
          *(_QWORD *)v373 = v17;
          v578 = v17[1];
          v577 = v17 + 1;
          v576 = v578;
          *((_QWORD *)v373 + 1) = v578;
          if (v578)
            *((_QWORD *)v576 + 2) = v373 + 8;
          *((_QWORD *)v373 + 2) = v577;
          *v577 = v373;
          if (*((_QWORD *)v373 + 4))
          {
            **((_QWORD **)v373 + 6) = *((_QWORD *)v373 + 5);
            v1443 = *((_QWORD *)v373 + 5);
            if (v1443)
              *(_QWORD *)(v1443 + 16) = *((_QWORD *)v373 + 6);
          }
          *v374 = v573;
          if (v573)
          {
            v581 = v573[1];
            v580 = (llvm::Value ****)(v573 + 1);
            v579 = v581;
            *((_QWORD *)v373 + 5) = v581;
            if (v581)
              *((_QWORD *)v579 + 2) = v373 + 40;
            *((_QWORD *)v373 + 6) = v580;
            *v580 = v374;
          }
LABEL_1224:
          *((_WORD *)v373 + 41) = v371;
          goto LABEL_1225;
        }
      }
LABEL_127:
      if (v19 != 36)
      {
        if (v19 != 34)
          goto LABEL_881;
        v111 = v1671;
        v112 = v16[2];
        v1684[0] = v112;
        if (v112 > 0x40)
        {
          __src = (void *)operator new[]();
          memcpy(__src, *(const void **)v16, ((unint64_t)(v112 + 63) >> 3) & 0x3FFFFFF8);
          llvm::APInt::flipAllBitsSlowCase((uint64_t)&__src);
          LODWORD(v112) = v1684[0];
          v115 = __src;
        }
        else
        {
          v113 = ~*(_QWORD *)v16;
          if ((_DWORD)v112)
            v114 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v112;
          else
            v114 = 0;
          v115 = (void *)(v114 & v113);
          __src = (void *)(v114 & v113);
        }
        v1684[0] = 0;
        v221 = *((unsigned int *)v111 + 2);
        if (v221 > 0x40)
        {
          if (memcmp(*(const void **)v111, v115, ((unint64_t)(v221 + 63) >> 3) & 0x3FFFFFF8))
            goto LABEL_469;
        }
        else if (*(void **)v111 != v115)
        {
          goto LABEL_469;
        }
        LODWORD(v1700) = v16[2];
        if (v1700 > 0x40)
        {
          v1699 = operator new[]();
          memcpy((void *)v1699, *(const void **)v16, (((unint64_t)v1700 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v1699 = *(_QWORD *)v16;
        }
        llvm::APInt::operator+=((uint64_t)&v1699, 1uLL);
        v333 = v1700;
        LODWORD(v1700) = 0;
        if (v333 > 0x40)
        {
          v346 = 0;
          v347 = 0;
          v348 = ((unint64_t)(v333 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            v349 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(v1699 + v346));
            v349.i16[0] = vaddlv_u8(v349);
            v347 += v349.i32[0];
            v346 += 8;
          }
          while (v348 != v346);
          v334 = v347 == 1;
          if (v1699)
          {
            MEMORY[0x1CAA32F9C](v1699, 0x1000C8000313F17);
            if (v1700 >= 0x41)
            {
              if (v1699)
                MEMORY[0x1CAA32F9C](v1699, 0x1000C8000313F17);
            }
          }
LABEL_470:
          if (v112 >= 0x41 && v115)
            MEMORY[0x1CAA32F9C](v115, 0x1000C8000313F17);
          if (v334)
          {
            v25 = (char *)operator new(0x80uLL);
            v7 = (unint64_t)(v25 + 64);
            *((_DWORD *)v25 + 21) = *((_DWORD *)v25 + 21) & 0x38000000 | 2;
            *(_QWORD *)v25 = 0;
            *((_QWORD *)v25 + 1) = 0;
            *((_QWORD *)v25 + 2) = 0;
            *((_QWORD *)v25 + 3) = v25 + 64;
            *((_QWORD *)v25 + 4) = 0;
            v335 = v25 + 32;
            *((_QWORD *)v25 + 5) = 0;
            *((_QWORD *)v25 + 6) = 0;
            *((_QWORD *)v25 + 7) = v25 + 64;
            WORD4(v1691) = 257;
            sub_1C4774CC4(*v17);
            *((_QWORD *)v25 + 8) = v336;
            *((_QWORD *)v25 + 9) = 0;
            v337 = *((_DWORD *)v25 + 21) & 0xC0000000 | 2;
            *((_DWORD *)v25 + 20) = 81;
            *((_DWORD *)v25 + 21) = v337;
            *(_OWORD *)(v25 + 88) = 0u;
            *(_OWORD *)(v25 + 104) = 0u;
            *((_DWORD *)v25 + 30) = 0;
            if (*(_QWORD *)v25)
            {
              **((_QWORD **)v25 + 2) = *((_QWORD *)v25 + 1);
              v1347 = *((_QWORD *)v25 + 1);
              if (v1347)
                *(_QWORD *)(v1347 + 16) = *((_QWORD *)v25 + 2);
            }
            *(_QWORD *)v25 = v17;
            v340 = v17[1];
            v339 = v17 + 1;
            v338 = v340;
            *((_QWORD *)v25 + 1) = v340;
            if (v340)
              *((_QWORD *)v338 + 2) = v25 + 8;
            *((_QWORD *)v25 + 2) = v339;
            *v339 = v25;
            if (*((_QWORD *)v25 + 4))
            {
              **((_QWORD **)v25 + 6) = *((_QWORD *)v25 + 5);
              v1348 = *((_QWORD *)v25 + 5);
              if (v1348)
                *(_QWORD *)(v1348 + 16) = *((_QWORD *)v25 + 6);
            }
            *v335 = v18;
            if (v18)
            {
              v343 = *(_QWORD *)(v18 + 8);
              v342 = (_QWORD *)(v18 + 8);
              v341 = v343;
              *((_QWORD *)v25 + 5) = v343;
              if (v343)
                *(_QWORD *)(v341 + 16) = v25 + 40;
              *((_QWORD *)v25 + 6) = v342;
              *v342 = v335;
            }
            v38 = 36;
            goto LABEL_970;
          }
          v344 = *((unsigned int *)v1671 + 2);
          if (v344 > 0x40)
          {
            v345 = *(uint64_t **)v16;
            if (memcmp(*(const void **)v1671, *(const void **)v16, ((unint64_t)(v344 + 63) >> 3) & 0x3FFFFFF8))
              goto LABEL_881;
          }
          else
          {
            v345 = *(uint64_t **)v1671;
            if (*(_QWORD *)v1671 != *(_QWORD *)v16)
              goto LABEL_881;
          }
          v1682 = v16[2];
          if (v1682 > 0x40)
          {
            __dst = (void *)operator new[]();
            memcpy(__dst, *(const void **)v16, (((unint64_t)v1682 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            __dst = v345;
          }
          llvm::APInt::operator+=((uint64_t)&__dst, 1uLL);
          v426 = v1682;
          v1682 = 0;
          if (v426 > 0x40)
          {
            v462 = 0;
            v463 = 0;
            v464 = ((unint64_t)(v426 + 63) >> 3) & 0x3FFFFFF8;
            do
            {
              v465 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)__dst + v462));
              v465.i16[0] = vaddlv_u8(v465);
              v463 += v465.i32[0];
              v462 += 8;
            }
            while (v464 != v462);
            if (__dst)
            {
              MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
              if (v1682 >= 0x41)
              {
                if (__dst)
                  MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
              }
            }
            if (v463 != 1)
              goto LABEL_881;
          }
          else
          {
            v427 = (uint8x8_t)vcnt_s8((int8x8_t)__dst);
            v427.i16[0] = vaddlv_u8(v427);
            if (v427.u32[0] != 1)
              goto LABEL_881;
          }
          v25 = (char *)operator new(0x80uLL);
          v7 = (unint64_t)(v25 + 64);
          *((_DWORD *)v25 + 21) = *((_DWORD *)v25 + 21) & 0x38000000 | 2;
          *(_QWORD *)v25 = 0;
          *((_QWORD *)v25 + 1) = 0;
          *((_QWORD *)v25 + 2) = 0;
          *((_QWORD *)v25 + 3) = v25 + 64;
          *((_QWORD *)v25 + 4) = 0;
          v466 = v25 + 32;
          *((_QWORD *)v25 + 5) = 0;
          *((_QWORD *)v25 + 6) = 0;
          *((_QWORD *)v25 + 7) = v25 + 64;
          WORD4(v1691) = 257;
          sub_1C4774CC4(*v17);
          *((_QWORD *)v25 + 8) = v467;
          *((_QWORD *)v25 + 9) = 0;
          v468 = *((_DWORD *)v25 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v25 + 20) = 81;
          *((_DWORD *)v25 + 21) = v468;
          *(_OWORD *)(v25 + 88) = 0u;
          *(_OWORD *)(v25 + 104) = 0u;
          *((_DWORD *)v25 + 30) = 0;
          if (*(_QWORD *)v25)
          {
            **((_QWORD **)v25 + 2) = *((_QWORD *)v25 + 1);
            v1440 = *((_QWORD *)v25 + 1);
            if (v1440)
              *(_QWORD *)(v1440 + 16) = *((_QWORD *)v25 + 2);
          }
          *(_QWORD *)v25 = v17;
          v471 = v17[1];
          v470 = v17 + 1;
          v469 = v471;
          *((_QWORD *)v25 + 1) = v471;
          if (v471)
            *((_QWORD *)v469 + 2) = v25 + 8;
          *((_QWORD *)v25 + 2) = v470;
          *v470 = v25;
          if (*((_QWORD *)v25 + 4))
          {
            **((_QWORD **)v25 + 6) = *((_QWORD *)v25 + 5);
            v1441 = *((_QWORD *)v25 + 5);
            if (v1441)
              *(_QWORD *)(v1441 + 16) = *((_QWORD *)v25 + 6);
          }
          *v466 = v18;
          if (v18)
          {
            v474 = *(_QWORD *)(v18 + 8);
            v473 = (_QWORD *)(v18 + 8);
            v472 = v474;
            *((_QWORD *)v25 + 5) = v474;
            if (v474)
              *(_QWORD *)(v472 + 16) = v25 + 40;
            *((_QWORD *)v25 + 6) = v473;
            *v473 = v466;
          }
          v38 = 34;
          goto LABEL_970;
        }
        if (v1699)
        {
          v334 = (v1699 & (v1699 - 1)) == 0;
          goto LABEL_470;
        }
LABEL_469:
        v334 = 0;
        goto LABEL_470;
      }
      v428 = v1671;
      v429 = v16[2];
      v1680 = v429;
      if (v429 > 0x40)
      {
        v430 = operator new[]();
        __s2 = (void *)v430;
        v429 = v1680;
        memcpy((void *)v430, *(const void **)v16, (((unint64_t)v1680 + 63) >> 3) & 0x3FFFFFF8);
        if (v429 > 0x40)
        {
          llvm::APInt::flipAllBitsSlowCase((uint64_t)&__s2);
          goto LABEL_628;
        }
      }
      else
      {
        v430 = *(_QWORD *)v16;
      }
      v431 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v429;
      if (!v429)
        v431 = 0;
      __s2 = (void *)(v431 & ~v430);
LABEL_628:
      llvm::APInt::operator++((uint64_t)&__s2);
      v432 = v1680;
      v433 = __s2;
      v1680 = 0;
      v434 = *((unsigned int *)v428 + 2);
      if (v434 > 0x40)
      {
        if (!memcmp(*(const void **)v428, __s2, ((unint64_t)(v434 + 63) >> 3) & 0x3FFFFFF8))
        {
LABEL_630:
          v435 = v16[2];
          if (v435 > 0x40)
          {
            v437 = 0;
            v438 = (unint64_t)(v435 + 63) >> 6;
            v439 = *(int8x8_t **)v16;
            do
            {
              v440 = *v439++;
              v441 = (uint8x8_t)vcnt_s8(v440);
              v441.i16[0] = vaddlv_u8(v441);
              v437 += v441.i32[0];
              --v438;
            }
            while (v438);
            v436 = v437 == 1;
          }
          else
          {
            if (!*(_QWORD *)v16)
            {
              v442 = 0;
              goto LABEL_645;
            }
            v436 = (*(_QWORD *)v16 & (*(_QWORD *)v16 - 1)) == 0;
          }
          v442 = v436;
LABEL_645:
          if (v432 >= 0x41)
          {
            if (v433)
            {
              MEMORY[0x1CAA32F9C](v433, 0x1000C8000313F17);
              if (v1680 >= 0x41)
              {
                if (__s2)
                  MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
              }
            }
          }
          if (v442)
          {
            v444 = (char *)operator new(0x80uLL);
            v7 = (unint64_t)(v444 + 64);
            *((_DWORD *)v444 + 21) = *((_DWORD *)v444 + 21) & 0x38000000 | 2;
            *(_QWORD *)v444 = 0;
            *((_QWORD *)v444 + 1) = 0;
            *((_QWORD *)v444 + 2) = 0;
            *((_QWORD *)v444 + 3) = v444 + 64;
            *((_QWORD *)v444 + 4) = 0;
            v445 = (llvm::Value ***)(v444 + 32);
            *((_QWORD *)v444 + 5) = 0;
            *((_QWORD *)v444 + 6) = 0;
            *((_QWORD *)v444 + 7) = v444 + 64;
            v446 = (llvm::ConstantInt **)*v17;
            v447 = v16[2];
            v1678 = v447;
            if (v447 > 0x40)
            {
              v448 = ((unint64_t)(v447 + 63) >> 3) & 0x3FFFFFF8;
              v1677 = (llvm::APInt *)operator new[]();
              memcpy(v1677, *(const void **)v16, v448);
              llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1677);
              LODWORD(v447) = v1678;
              v449 = (unint64_t)v1677;
              goto LABEL_694;
            }
            goto LABEL_674;
          }
LABEL_653:
          v450 = *((unsigned int *)v1671 + 2);
          if (v450 > 0x40)
          {
            v451 = *(_QWORD *)v16;
            if (memcmp(*(const void **)v1671, *(const void **)v16, ((unint64_t)(v450 + 63) >> 3) & 0x3FFFFFF8))
              goto LABEL_881;
          }
          else
          {
            v451 = *(_QWORD *)v1671;
            if (*(_QWORD *)v1671 != *(_QWORD *)v16)
              goto LABEL_881;
          }
          v452 = v16[2];
          v1676 = v452;
          if (v452 >= 0x41
            && (v451 = operator new[](),
                v1675 = (llvm::Type *)v451,
                v453 = v1676,
                memcpy((void *)v451, *(const void **)v16, (((unint64_t)v1676 + 63) >> 3) & 0x3FFFFFF8),
                v452 = v453,
                v453 > 0x40))
          {
            llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1675);
          }
          else
          {
            if (v452)
              v454 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v452;
            else
              v454 = 0;
            v1675 = (llvm::Type *)(v454 & ~v451);
          }
          llvm::APInt::operator++((uint64_t)&v1675);
          v455 = v1676;
          v1676 = 0;
          if (v455 > 0x40)
          {
            v457 = 0;
            v458 = 0;
            v459 = ((unint64_t)(v455 + 63) >> 3) & 0x3FFFFFF8;
            do
            {
              v460 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)v1675 + v457));
              v460.i16[0] = vaddlv_u8(v460);
              v458 += v460.i32[0];
              v457 += 8;
            }
            while (v459 != v457);
            if (v1675)
            {
              MEMORY[0x1CAA32F9C](v1675, 0x1000C8000313F17);
              if (v1676 >= 0x41)
              {
                if (v1675)
                  MEMORY[0x1CAA32F9C](v1675, 0x1000C8000313F17);
              }
            }
            if (v458 != 1)
              goto LABEL_881;
          }
          else
          {
            v456 = (uint8x8_t)vcnt_s8((int8x8_t)v1675);
            v456.i16[0] = vaddlv_u8(v456);
            if (v456.u32[0] != 1)
              goto LABEL_881;
          }
          v444 = (char *)operator new(0x80uLL);
          v7 = (unint64_t)(v444 + 64);
          *((_DWORD *)v444 + 21) = *((_DWORD *)v444 + 21) & 0x38000000 | 2;
          *(_QWORD *)v444 = 0;
          *((_QWORD *)v444 + 1) = 0;
          *((_QWORD *)v444 + 2) = 0;
          *((_QWORD *)v444 + 3) = v444 + 64;
          *((_QWORD *)v444 + 4) = 0;
          v445 = (llvm::Value ***)(v444 + 32);
          *((_QWORD *)v444 + 5) = 0;
          *((_QWORD *)v444 + 6) = 0;
          *((_QWORD *)v444 + 7) = v444 + 64;
          v446 = (llvm::ConstantInt **)*v17;
          v447 = v16[2];
          v1674 = v447;
          if (v447 > 0x40)
          {
            v475 = ((unint64_t)(v447 + 63) >> 3) & 0x3FFFFFF8;
            v1673 = (void *)operator new[]();
            memcpy(v1673, *(const void **)v16, v475);
            llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1673);
            LODWORD(v447) = v1674;
            v449 = (unint64_t)v1673;
LABEL_694:
            LODWORD(v1695) = v447;
            v1694 = v449;
            v476 = llvm::ConstantInt::get(v446, (llvm::Type *)&v1694, v443);
            WORD4(v1691) = 257;
            sub_1C4774CC4(*v17);
            *((_QWORD *)v444 + 8) = v477;
            *((_QWORD *)v444 + 9) = 0;
            v478 = *((_DWORD *)v444 + 21) & 0xC0000000 | 2;
            *((_DWORD *)v444 + 20) = 81;
            *((_DWORD *)v444 + 21) = v478;
            *(_OWORD *)(v444 + 88) = 0u;
            *(_OWORD *)(v444 + 104) = 0u;
            *((_DWORD *)v444 + 30) = 0;
            if (*(_QWORD *)v444)
            {
              **((_QWORD **)v444 + 2) = *((_QWORD *)v444 + 1);
              v1349 = *((_QWORD *)v444 + 1);
              if (v1349)
                *(_QWORD *)(v1349 + 16) = *((_QWORD *)v444 + 2);
            }
            *(_QWORD *)v444 = v17;
            v481 = v17[1];
            v480 = v17 + 1;
            v479 = v481;
            *((_QWORD *)v444 + 1) = v481;
            if (v481)
              *((_QWORD *)v479 + 2) = v444 + 8;
            *((_QWORD *)v444 + 2) = v480;
            *v480 = v444;
            if (*((_QWORD *)v444 + 4))
            {
              **((_QWORD **)v444 + 6) = *((_QWORD *)v444 + 5);
              v1350 = *((_QWORD *)v444 + 5);
              if (v1350)
                *(_QWORD *)(v1350 + 16) = *((_QWORD *)v444 + 6);
            }
            *v445 = v476;
            if (v476)
            {
              v484 = v476[1];
              v483 = (llvm::Value ****)(v476 + 1);
              v482 = v484;
              *((_QWORD *)v444 + 5) = v484;
              if (v484)
                *((_QWORD *)v482 + 2) = v444 + 40;
              *((_QWORD *)v444 + 6) = v483;
              *v483 = v445;
            }
LABEL_702:
            *((_WORD *)v444 + 41) = 34;
LABEL_1225:
            llvm::Value::setName((uint64_t ***)v7, (uint64_t)&v1688);
LABEL_1226:
            if (v1695 < 0x41)
              return v7;
            goto LABEL_1227;
          }
LABEL_674:
          v461 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v447;
          if (!(_DWORD)v447)
            v461 = 0;
          v449 = v461 & ~*(_QWORD *)v16;
          goto LABEL_694;
        }
      }
      else if (*(void **)v428 == __s2)
      {
        goto LABEL_630;
      }
      if (v432 >= 0x41)
      {
        if (v433)
        {
          MEMORY[0x1CAA32F9C](v433, 0x1000C8000313F17);
          if (v1680 >= 0x41)
          {
            if (__s2)
              MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
          }
        }
      }
      goto LABEL_653;
    default:
      goto LABEL_881;
  }
}

llvm::UndefValue **sub_1C5800274(uint64_t a1, llvm::ValueAsMetadata *a2, uint64_t a3)
{
  char *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v11;
  int v15;
  llvm::Type *v16;
  const llvm::APInt *v17;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  int v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  llvm::Constant **v29;
  unsigned int v30;
  BOOL v31;
  void **v33;
  const void **v34;
  uint64_t v35;
  void *v36;
  void **p_src;
  unsigned __int8 **v38;
  BOOL v39;
  unsigned __int8 **v40;
  BOOL v41;
  int v42;
  int v43;
  char *v44;
  int v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _DWORD *v55;
  _QWORD *v56;
  _DWORD *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  _DWORD *v63;
  _QWORD *v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t **v67;
  uint64_t v68;
  void **v69;
  llvm::Value **v70;
  char *v71;
  llvm::Value ***v72;
  uint64_t v73;
  unsigned int v74;
  _DWORD *v75;
  llvm::Value *v76;
  llvm::Value ****v77;
  llvm::Value *v78;
  BOOL v79;
  int v80;
  uint64_t v81;
  unsigned int v82;
  llvm::Constant **v83;
  unsigned int v84;
  void **v86;
  const void **v87;
  uint64_t v88;
  void *v89;
  void **v90;
  int v91;
  int v92;
  char *v93;
  llvm::Value **v94;
  llvm::Value ***v95;
  uint64_t v96;
  unsigned int v97;
  _DWORD *v98;
  llvm::Value *v99;
  llvm::Value ****v100;
  llvm::Value *v101;
  __int16 v102;
  _BOOL4 v103;
  unsigned int v104;
  unint64_t v105;
  char v106;
  _BOOL4 v107;
  unsigned int v108;
  unint64_t v109;
  char v110;
  unsigned __int8 *v111;
  unsigned __int8 *v112;
  unsigned __int8 *v113;
  unsigned __int8 *v114;
  BOOL v115;
  int v116;
  llvm::Type *v117;
  char *v118;
  unsigned __int8 *v119;
  llvm::Value ***v120;
  unsigned __int8 *v121;
  llvm::Value **v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  llvm::Value *v128;
  llvm::Value ****v129;
  llvm::Value *v130;
  BOOL v131;
  int v132;
  unsigned __int8 *v133;
  char *v134;
  unsigned __int8 **v135;
  llvm::Type *v136;
  llvm::Value **v137;
  llvm::Value **v138;
  uint64_t v139;
  unsigned int v140;
  llvm::Value *v141;
  _QWORD *v142;
  llvm::Value *v143;
  uint64_t v144;
  unsigned __int8 ***v145;
  uint64_t v146;
  BOOL v147;
  int v148;
  int v150;
  int v151;
  _BOOL4 v152;
  _BOOL4 v153;
  unsigned __int8 *v154;
  char *v155;
  uint64_t v156;
  unsigned int v157;
  _DWORD *v158;
  _QWORD *v159;
  _DWORD *v160;
  __int16 v161;
  int v162;
  uint64_t v164;
  unsigned int v165;
  _DWORD *v166;
  _QWORD *v167;
  _DWORD *v168;
  _BOOL4 v169;
  _BOOL4 v170;
  _BOOL4 v171;
  _BOOL4 v172;
  int v173;
  uint64_t v174;
  unsigned int v175;
  _DWORD *v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  unsigned int v180;
  _DWORD *v181;
  uint64_t v182;
  _QWORD *v183;
  unsigned __int8 *v184;
  unsigned __int8 *v185;
  unsigned __int8 *v186;
  unsigned __int8 *v187;
  uint64_t ***v188;
  uint64_t **v189;
  uint64_t **v190;
  uint64_t v191;
  unsigned int v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t ****v197;
  uint64_t *v198;
  uint64_t v199;
  unsigned int v200;
  _DWORD *v201;
  uint64_t v202;
  _QWORD *v203;
  unsigned __int8 *v205;
  uint64_t v206;
  unsigned int v207;
  _DWORD *v208;
  _QWORD *v209;
  _DWORD *v210;
  uint64_t v213;
  unsigned int v214;
  _DWORD *v215;
  uint64_t v216;
  _QWORD *v217;
  unsigned __int8 *v219;
  uint64_t v220;
  unsigned int v221;
  _DWORD *v222;
  _QWORD *v223;
  _DWORD *v224;
  uint64_t v226;
  unsigned int v227;
  _DWORD *v228;
  _QWORD *v229;
  _DWORD *v230;
  llvm::ValueAsMetadata *v231;
  uint64_t v232;
  char v233;
  uint64_t v234;
  unsigned int v235;
  unsigned int v236;
  _QWORD *v237;
  uint64_t v238;
  const void **v239;
  unsigned int v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  llvm::ValueHandleBase *Sub;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  _QWORD *v248;
  uint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int v258;
  uint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t **v263;
  uint64_t v264;
  unsigned __int8 *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v269;
  unsigned int v270;
  _DWORD *v271;
  _QWORD *v272;
  _DWORD *v273;
  _BOOL4 v274;
  uint64_t v275;
  unsigned int v276;
  _DWORD *v277;
  uint64_t v278;
  _QWORD *v279;
  _BOOL4 v280;
  uint64_t v281;
  unsigned int v282;
  _DWORD *v283;
  uint64_t v284;
  _QWORD *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t *v289;
  llvm::Type *v290;
  llvm::Value **v291;
  uint64_t v292;
  unsigned int v293;
  llvm::Value *v294;
  _QWORD *v295;
  llvm::Value *v296;
  uint64_t v297;
  uint64_t **v298;
  uint64_t v299;
  char v300;
  uint64_t v301;
  unsigned int v302;
  _DWORD *v303;
  uint64_t v304;
  llvm::Value ***v305;
  llvm::Type *v306;
  llvm::Value **v307;
  uint64_t v308;
  unsigned int v309;
  uint64_t v310;
  _QWORD *v311;
  uint64_t v312;
  llvm::Value *v313;
  llvm::Value ****v314;
  llvm::Value *v315;
  uint64_t v316;
  int v317;
  char *v318;
  uint64_t *v319;
  int v320;
  uint64_t v321;
  unsigned int v322;
  uint64_t v323;
  _QWORD *v324;
  uint64_t v325;
  uint64_t **v326;
  _DWORD *v327;
  uint64_t v328;
  unsigned int v329;
  uint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  _DWORD *v333;
  BOOL v334;
  int v336;
  BOOL v337;
  int v339;
  int v341;
  uint64_t v342;
  _QWORD *v343;
  uint64_t v344;
  unsigned int v345;
  _DWORD *v346;
  _QWORD *v347;
  _DWORD *v348;
  uint64_t v349;
  _QWORD *v350;
  uint64_t v351;
  uint64_t v352;
  int v353;
  uint64_t v354;
  unsigned int v355;
  _DWORD *v356;
  uint64_t v357;
  uint64_t *v358;
  uint64_t v359;
  unsigned int v360;
  uint64_t v361;
  _QWORD *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t **v365;
  uint64_t v366;
  const llvm::APInt *v367;
  const void **v368;
  uint64_t v369;
  unint64_t v370;
  unint64_t v371;
  uint64_t **v372;
  unsigned int v373;
  char *v374;
  uint64_t v375;
  unint64_t *v376;
  unint64_t v377;
  unint64_t *v378;
  unint64_t v379;
  unint64_t v380;
  unint64_t v381;
  _BOOL4 v382;
  unint64_t v383;
  _BOOL8 v384;
  _DWORD *v385;
  int v386;
  unsigned __int8 *v387;
  const void **v388;
  uint64_t v389;
  void *v390;
  unint64_t v391;
  unint64_t v392;
  uint64_t v393;
  llvm::Value **v394;
  uint64_t v395;
  uint64_t v396;
  char *v397;
  uint64_t *v398;
  uint64_t v399;
  unsigned int v400;
  _DWORD *v401;
  _QWORD *v402;
  uint64_t v403;
  uint64_t **v404;
  uint64_t v405;
  int v406;
  uint64_t v407;
  uint64_t v408;
  unsigned __int8 *v409;
  uint64_t v410;
  uint64_t v411;
  unsigned int v412;
  char v413;
  __int16 FlippedSignednessPredicate;
  char *v415;
  _QWORD *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  unsigned int v420;
  uint64_t v421;
  _QWORD *v422;
  uint64_t v423;
  uint64_t v424;
  _QWORD *v425;
  uint64_t v426;
  int v427;
  uint64_t v428;
  unsigned __int8 *v429;
  uint64_t v430;
  int v431;
  llvm::ValueHandleBase **v432;
  uint64_t v433;
  llvm::Type *v434;
  llvm::ValueHandleBase *AllOnesValue;
  uint64_t v436;
  unsigned int v437;
  uint64_t v438;
  _QWORD *v439;
  uint64_t v440;
  uint64_t v441;
  llvm::ValueHandleBase ***v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  _DWORD *v446;
  _BOOL4 v447;
  unsigned int v448;
  unsigned int v449;
  int v450;
  uint64_t v451;
  int v452;
  int v453;
  uint64_t v454;
  llvm::Value **v455;
  llvm::Value ***v456;
  uint64_t v457;
  unsigned int v458;
  _DWORD *v459;
  llvm::Value *v460;
  llvm::Value ****v461;
  llvm::Value *v462;
  __int16 v463;
  int v464;
  uint64_t v465;
  int v466;
  uint64_t v467;
  _BOOL4 v468;
  int v469;
  const void **v470;
  _QWORD *v471;
  uint64_t v472;
  void *v473;
  void *v474;
  int v475;
  uint64_t *v476;
  int v477;
  uint64_t Declaration;
  uint64_t *v479;
  uint64_t **v480;
  uint64_t *v481;
  llvm::ValueAsMetadata *v482;
  uint64_t v483;
  llvm::Value *v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  unsigned int *v488;
  void *v489;
  uint64_t v490;
  llvm::ValueAsMetadata *v491;
  llvm::Value *v492;
  llvm::Value ***v493;
  uint64_t v494;
  llvm::Type *v495;
  llvm::Value **v496;
  uint64_t v497;
  unsigned int v498;
  uint64_t v499;
  _QWORD *v500;
  uint64_t v501;
  llvm::Value *v502;
  llvm::Value ****v503;
  llvm::Value *v504;
  llvm::ValueAsMetadata *v505;
  llvm::Value **False;
  unsigned int *v507;
  llvm::Value **NullValue;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  llvm::ValueAsMetadata **v513;
  llvm::ValueAsMetadata *v514;
  int v515;
  int v516;
  int v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  void *v525;
  unsigned __int8 *v526;
  uint64_t *v527;
  uint64_t v528;
  uint64_t v529;
  int v530;
  int v531;
  uint64_t v532;
  unsigned int v533;
  uint64_t v534;
  uint64_t v535;
  unsigned int v536;
  uint64_t v537;
  unsigned int v538;
  uint64_t v539;
  unsigned int v540;
  const void **v541;
  const void **v542;
  uint64_t v543;
  llvm::Type *v544;
  uint64_t v545;
  int v546;
  const void **v547;
  int v548;
  llvm::ValueAsMetadata *v549;
  char *v550;
  uint64_t v551;
  uint64_t v552;
  unsigned __int8 *v553;
  uint64_t v554;
  unint64_t v555;
  unint64_t v556;
  unint64_t v557;
  const void **v558;
  uint64_t v559;
  unint64_t v560;
  unint64_t v561;
  uint64_t **v562;
  unsigned int v563;
  char *v564;
  uint64_t v565;
  unint64_t *v566;
  unint64_t v567;
  unint64_t *v568;
  unint64_t v569;
  unint64_t v570;
  unint64_t v571;
  _BOOL4 v572;
  unint64_t v573;
  _BOOL8 v574;
  unint64_t v575;
  unint64_t v576;
  uint64_t v577;
  llvm::Value **IntegerValue;
  uint64_t v579;
  uint64_t v580;
  char *v581;
  uint64_t v582;
  unsigned int v583;
  uint64_t v584;
  _QWORD *v585;
  uint64_t v586;
  uint64_t v587;
  _QWORD *v588;
  int v589;
  llvm::Type *v590;
  llvm::Type *v591;
  int v592;
  int v593;
  unsigned int v594;
  uint64_t **v595;
  uint64_t ***v596;
  llvm::ValueHandleBase *v597;
  llvm::Type *v598;
  llvm::UndefValue *ZExtOrBitCast;
  llvm::Type *v600;
  unsigned int v601;
  unsigned int v602;
  unint64_t v603;
  int v604;
  int v605;
  int v606;
  llvm::UndefValue *AggregateElement;
  _QWORD **v608;
  unsigned int v609;
  _QWORD *v610;
  uint64_t v611;
  int v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  unsigned int v617;
  unsigned int v618;
  uint64_t v619;
  uint64_t v620;
  unsigned int v621;
  uint64_t v622;
  _QWORD *v623;
  uint64_t v624;
  uint64_t v625;
  unsigned int v626;
  int v627;
  unsigned int v628;
  _QWORD *v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  _QWORD *v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  unsigned int v637;
  uint64_t v638;
  _QWORD *v639;
  uint64_t v640;
  uint64_t v641;
  _QWORD *v642;
  uint64_t v643;
  int v644;
  unsigned int v645;
  unsigned int v646;
  unsigned int v647;
  llvm::Constant *v648;
  unsigned int v649;
  unsigned int v650;
  unsigned int v651;
  unsigned int v652;
  unsigned int v653;
  const llvm::APInt *v654;
  llvm::Value **v655;
  uint64_t v656;
  _QWORD *v657;
  uint64_t v658;
  _QWORD *v659;
  _QWORD *v660;
  int v661;
  _BYTE *v662;
  uint64_t v663;
  int v664;
  uint64_t *v665;
  uint64_t v666;
  int v667;
  unsigned int v668;
  llvm::UndefValue *v669;
  _QWORD **v670;
  unsigned int v671;
  _QWORD *v672;
  int v673;
  uint64_t *v674;
  uint64_t v675;
  int v676;
  unsigned int v677;
  _QWORD *v678;
  uint64_t v679;
  __int16 v680;
  llvm::Type *v681;
  llvm::Value **v682;
  uint64_t v683;
  unint64_t v684;
  unsigned int v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  unint64_t v691;
  uint64_t v692;
  uint64_t v693;
  int v694;
  int64_t v695;
  unint64_t v696;
  int v697;
  unint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  int v705;
  int64_t v706;
  uint64_t *v707;
  unsigned int v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  unsigned int v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  __int16 v765;
  uint64_t v766;
  void *v767;
  llvm::Type *v768;
  unsigned int PrimitiveSizeInBits;
  char v770;
  unsigned int v771;
  unint64_t v772;
  void **v773;
  unsigned int v774;
  unint64_t v775;
  unint64_t v776;
  void *v777;
  unint64_t v778;
  const void **v779;
  unint64_t v780;
  unsigned int v781;
  const llvm::APInt *v782;
  uint64_t v783;
  unint64_t v784;
  const void **v785;
  llvm::Value **v786;
  const llvm::APInt *v787;
  uint64_t v788;
  char *v789;
  llvm::Value ***v790;
  uint64_t v791;
  _QWORD *v792;
  _QWORD *v793;
  _QWORD *v794;
  llvm::Value *v795;
  llvm::Value ****v796;
  llvm::Value *v797;
  llvm::Value **v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  unint64_t v804;
  uint64_t v805;
  unint64_t *v806;
  unint64_t *v807;
  unint64_t v808;
  unint64_t v809;
  unint64_t v810;
  _BOOL4 v811;
  unint64_t v812;
  int v813;
  unsigned __int8 *v814;
  _BOOL4 v815;
  int v816;
  int v817;
  unsigned __int8 *v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  unsigned int v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  void *v826;
  unint64_t v827;
  llvm::ValueAsMetadata *v828;
  _QWORD *v829;
  _QWORD *v830;
  char v831;
  uint64_t v832;
  llvm::Constant *SplatValue;
  __int128 v834;
  __int128 v835;
  uint64_t ***v836;
  void *__src;
  __int128 v838;
  __int128 v839;
  uint64_t ***v840;
  const void ***v841;
  void ***v842;
  uint64_t *v843;
  uint64_t *v844;
  const void **v845;
  unsigned int v846;
  const void **v847;
  unsigned int v848;
  uint64_t **v849;
  unsigned int v850;
  llvm::Constant *v851;
  unsigned __int8 *v852;
  const void **v853;
  unsigned __int8 *v854;
  const void **v855;
  uint64_t v856;
  __int128 v857;
  unsigned __int8 *v858;
  __int16 v859;
  void **v860;
  const void **v861;
  uint64_t v862;

  v3 = 0;
  v862 = *MEMORY[0x1E0C80C00];
  v4 = (unsigned __int8 *)*((_QWORD *)a2 - 8);
  v5 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
  v6 = v4[16];
  v7 = v6 - 41 < 0x12 && v6 > 0x1B;
  if (v7)
    v8 = *((_QWORD *)a2 - 8);
  else
    v8 = 0;
  v9 = v5[16];
  if (v9 - 41 < 0x12 && v9 > 0x1B)
    v11 = *((_QWORD *)a2 - 4);
  else
    v11 = 0;
  if (!(v8 | v11))
    return (llvm::UndefValue **)v3;
  v826 = *(void **)a3;
  v827 = *(_QWORD *)(a3 + 16);
  v825 = *(_QWORD *)(a3 + 24);
  LODWORD(v860) = 0;
  v856 = 0;
  __src = &v860;
  *((_QWORD *)&v838 + 1) = &v856;
  *(_QWORD *)&v839 = &v856;
  v15 = sub_1C57DC9C8((uint64_t)&v838, (uint64_t)v4);
  v16 = (llvm::Type *)*((_QWORD *)a2 - 4);
  v828 = a2;
  if (v15 && *(llvm::Type **)v839 == v16)
  {
    v45 = *((_WORD *)a2 + 9) & 0x3F;
  }
  else
  {
    if (!sub_1C57DC9C8((uint64_t)&v838, (uint64_t)v16) || *(_QWORD *)v839 != *((_QWORD *)a2 - 8))
      goto LABEL_16;
    v45 = dword_1C86618B4[*((_WORD *)a2 + 9) & 0x3F];
  }
  *(_DWORD *)__src = v45;
  LOWORD(v46) = (_WORD)v860;
  if (((_DWORD)v860 - 38) > 3)
  {
    if (((_DWORD)v860 - 34) > 3)
      goto LABEL_840;
    v46 = (_DWORD)v860 + 4;
  }
  else
  {
    v46 = *((_DWORD *)&dword_1C8661960 + (int)v860 - 38);
  }
  LODWORD(v860) = v46;
LABEL_840:
  v507 = (unsigned int *)v856;
  NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)v856, v16);
  if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
  {
    v509 = ***(_QWORD ***)a2;
    v510 = *(_QWORD *)(v509 + 152);
    v511 = *(unsigned int *)(v509 + 168);
    if ((_DWORD)v511)
    {
      LODWORD(v512) = (v511 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v513 = (llvm::ValueAsMetadata **)(v510 + 16 * v512);
      v514 = *v513;
      if (*v513 == a2)
      {
LABEL_901:
        v549 = v513[1];
        v552 = *(_QWORD *)v549;
        v550 = (char *)v549 + 16;
        v551 = v552;
        goto LABEL_902;
      }
      v515 = 1;
      while (v514 != (llvm::ValueAsMetadata *)-4096)
      {
        v516 = v512 + v515++;
        v512 = v516 & (v511 - 1);
        v514 = *(llvm::ValueAsMetadata **)(v510 + 16 * v512);
        if (v514 == a2)
        {
          v513 = (llvm::ValueAsMetadata **)(v510 + 16 * v512);
          goto LABEL_901;
        }
      }
    }
    v513 = (llvm::ValueAsMetadata **)(v510 + 16 * v511);
    goto LABEL_901;
  }
  v551 = 0;
  v550 = &byte_1C871356D;
LABEL_902:
  WORD4(v839) = 261;
  __src = v550;
  *(_QWORD *)&v838 = v551;
  v3 = llvm::CmpInst::Create(53, v46, (uint64_t)v507, (uint64_t)NullValue, (uint64_t)&__src, 0);
  if (v3)
    return (llvm::UndefValue **)v3;
LABEL_16:
  v832 = *((_WORD *)a2 + 9) & 0x3F;
  v18 = (_DWORD *)*((_QWORD *)v4 + 1);
  if (!v18 || *((_QWORD *)v18 + 1))
    goto LABEL_18;
  v23 = v4[16];
  if (v23 != 5)
  {
    if (v23 != 41)
      goto LABEL_18;
    v24 = (unsigned __int8 *)*((_QWORD *)v4 - 8);
    v25 = (unsigned __int8 *)*((_QWORD *)v4 - 4);
    if (v5 == v24)
    {
      v24 = (unsigned __int8 *)*((_QWORD *)v4 - 4);
      if (!v25)
        goto LABEL_18;
    }
    else if (!v24 || v5 != v25)
    {
      goto LABEL_18;
    }
    if ((v832 - 35) > 1)
      goto LABEL_18;
LABEL_90:
    v47 = (char *)operator new(0x80uLL);
    *((_DWORD *)v47 + 21) = *((_DWORD *)v47 + 21) & 0x38000000 | 2;
    v3 = v47 + 64;
    *(_QWORD *)v47 = 0;
    *((_QWORD *)v47 + 1) = 0;
    *((_QWORD *)v47 + 2) = 0;
    *((_QWORD *)v47 + 3) = v47 + 64;
    *((_QWORD *)v47 + 4) = 0;
    *((_QWORD *)v47 + 5) = 0;
    *((_QWORD *)v47 + 6) = 0;
    *((_QWORD *)v47 + 7) = v47 + 64;
    v48 = *(_QWORD *)(a1 + 24);
    WORD4(v839) = 257;
    v49 = sub_1C506EAA0(v48, (uint64_t)v5, (uint64_t)&__src);
    v859 = 257;
    sub_1C4774CC4(*(_DWORD **)v49);
    *((_QWORD *)v47 + 8) = v50;
    *((_QWORD *)v47 + 9) = 0;
    v51 = *((_DWORD *)v47 + 21) & 0xC0000000 | 2;
    *((_DWORD *)v47 + 20) = 81;
    *((_DWORD *)v47 + 21) = v51;
    *(_OWORD *)(v47 + 88) = 0u;
    *(_OWORD *)(v47 + 104) = 0u;
    *((_DWORD *)v47 + 30) = 0;
    if (*(_QWORD *)v47)
    {
      **((_QWORD **)v47 + 2) = *((_QWORD *)v47 + 1);
      v711 = *((_QWORD *)v47 + 1);
      if (v711)
        *(_QWORD *)(v711 + 16) = *((_QWORD *)v47 + 2);
    }
    *(_QWORD *)v47 = v49;
    v54 = *(_QWORD *)(v49 + 8);
    v53 = (_QWORD *)(v49 + 8);
    v52 = v54;
    *((_QWORD *)v47 + 1) = v54;
    if (v54)
      *(_QWORD *)(v52 + 16) = v47 + 8;
    *((_QWORD *)v47 + 2) = v53;
    *v53 = v47;
    if (*((_QWORD *)v47 + 4))
    {
      **((_QWORD **)v47 + 6) = *((_QWORD *)v47 + 5);
      v712 = *((_QWORD *)v47 + 5);
      if (v712)
        *(_QWORD *)(v712 + 16) = *((_QWORD *)v47 + 6);
    }
    *((_QWORD *)v47 + 4) = v24;
    v57 = (_DWORD *)*((_QWORD *)v24 + 1);
    v56 = v24 + 8;
    v55 = v57;
    *((_QWORD *)v47 + 5) = v57;
    if (v57)
      *((_QWORD *)v55 + 2) = v47 + 40;
    *((_QWORD *)v47 + 6) = v56;
    *v56 = v47 + 32;
    goto LABEL_108;
  }
  if (*((_WORD *)v4 + 9) != 13)
    goto LABEL_18;
  v38 = (unsigned __int8 **)&v4[-32 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF)];
  v24 = v38[4];
  if (v5 == *v38)
  {
    if (!v24)
      goto LABEL_18;
    goto LABEL_89;
  }
  if (*v38)
    v39 = v5 == v24;
  else
    v39 = 0;
  v24 = *v38;
  if (v39)
  {
LABEL_89:
    if ((v832 - 35) >= 2)
      goto LABEL_18;
    goto LABEL_90;
  }
LABEL_18:
  v19 = (_DWORD *)*((_QWORD *)v5 + 1);
  if (!v19 || *((_QWORD *)v19 + 1))
    goto LABEL_20;
  v26 = v5[16];
  if (v26 != 5)
  {
    if (v26 != 41)
      goto LABEL_20;
    v27 = (unsigned __int8 *)*((_QWORD *)v5 - 8);
    v28 = (unsigned __int8 *)*((_QWORD *)v5 - 4);
    if (v4 == v27)
    {
      v27 = (unsigned __int8 *)*((_QWORD *)v5 - 4);
      if (!v28)
        goto LABEL_20;
    }
    else if (!v27 || v4 != v28)
    {
      goto LABEL_20;
    }
    goto LABEL_98;
  }
  if (*((_WORD *)v5 + 9) != 13)
    goto LABEL_20;
  v40 = (unsigned __int8 **)&v5[-32 * (*((_DWORD *)v5 + 5) & 0x7FFFFFF)];
  v27 = v40[4];
  if (v4 == *v40)
  {
    if (!v27)
      goto LABEL_20;
    goto LABEL_98;
  }
  if (*v40)
    v41 = v4 == v27;
  else
    v41 = 0;
  v27 = *v40;
  if (v41)
  {
LABEL_98:
    if ((_DWORD)v832 != 37 && (_DWORD)v832 != 34)
      goto LABEL_20;
    v47 = (char *)operator new(0x80uLL);
    *((_DWORD *)v47 + 21) = *((_DWORD *)v47 + 21) & 0x38000000 | 2;
    v3 = v47 + 64;
    *(_QWORD *)v47 = 0;
    *((_QWORD *)v47 + 1) = 0;
    *((_QWORD *)v47 + 2) = 0;
    *((_QWORD *)v47 + 3) = v47 + 64;
    *((_QWORD *)v47 + 4) = 0;
    v58 = (uint64_t *)(v47 + 32);
    *((_QWORD *)v47 + 5) = 0;
    *((_QWORD *)v47 + 6) = 0;
    *((_QWORD *)v47 + 7) = v47 + 64;
    v59 = *(_QWORD *)(a1 + 24);
    WORD4(v839) = 257;
    v60 = sub_1C506EAA0(v59, (uint64_t)v4, (uint64_t)&__src);
    v859 = 257;
    sub_1C4774CC4(*(_DWORD **)v27);
    *((_QWORD *)v47 + 8) = v61;
    *((_QWORD *)v47 + 9) = 0;
    v62 = *((_DWORD *)v47 + 21) & 0xC0000000 | 2;
    *((_DWORD *)v47 + 20) = 81;
    *((_DWORD *)v47 + 21) = v62;
    *(_OWORD *)(v47 + 88) = 0u;
    *(_OWORD *)(v47 + 104) = 0u;
    *((_DWORD *)v47 + 30) = 0;
    if (*(_QWORD *)v47)
    {
      **((_QWORD **)v47 + 2) = *((_QWORD *)v47 + 1);
      v701 = *((_QWORD *)v47 + 1);
      if (v701)
        *(_QWORD *)(v701 + 16) = *((_QWORD *)v47 + 2);
    }
    *(_QWORD *)v47 = v27;
    v65 = (_DWORD *)*((_QWORD *)v27 + 1);
    v64 = v27 + 8;
    v63 = v65;
    *((_QWORD *)v47 + 1) = v65;
    if (v65)
      *((_QWORD *)v63 + 2) = v47 + 8;
    *((_QWORD *)v47 + 2) = v64;
    *v64 = v47;
    if (*((_QWORD *)v47 + 4))
    {
      **((_QWORD **)v47 + 6) = *((_QWORD *)v47 + 5);
      v702 = *((_QWORD *)v47 + 5);
      if (v702)
        *(_QWORD *)(v702 + 16) = *((_QWORD *)v47 + 6);
    }
    *v58 = v60;
    if (v60)
    {
      v68 = *(_QWORD *)(v60 + 8);
      v67 = (uint64_t **)(v60 + 8);
      v66 = v68;
      *((_QWORD *)v47 + 5) = v68;
      if (v68)
        *(_QWORD *)(v66 + 16) = v47 + 40;
      *((_QWORD *)v47 + 6) = v67;
      *v67 = v58;
    }
LABEL_108:
    *((_WORD *)v47 + 41) = v832;
    v69 = (void **)&v856;
LABEL_360:
    llvm::Value::setName((uint64_t ***)v3, (uint64_t)v69);
    return (llvm::UndefValue **)v3;
  }
LABEL_20:
  v829 = v4 + 8;
  v830 = v5 + 8;
  v849 = 0;
  v822 = v832 - 35;
  if ((v832 - 35) > 1)
    goto LABEL_127;
  v856 = (uint64_t)&v860;
  *(_QWORD *)&v857 = &v849;
  v20 = v4[16];
  if (v20 == 5)
  {
    if (*((_WORD *)v4 + 9) != 28)
      goto LABEL_127;
    v29 = (llvm::Constant **)&v4[-32 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF)];
    v30 = *((unsigned __int8 *)*v29 + 16);
    v31 = *v29 && v30 >= 0x1C;
    if (!v31 || v30 - 59 < 0xFFFFFFEE)
      goto LABEL_127;
    v860 = (void **)*v29;
    if (!sub_1C581A124((_QWORD **)&v857, v29[4]))
      goto LABEL_127;
  }
  else
  {
    if (v20 != 56)
      goto LABEL_127;
    v21 = *((_QWORD *)v4 - 8);
    if (!v21)
      goto LABEL_127;
    v22 = *(unsigned __int8 *)(v21 + 16);
    if (v22 < 0x1C)
      goto LABEL_127;
    if (v22 - 59 < 0xFFFFFFEE)
      goto LABEL_127;
    v860 = (void **)*((_QWORD *)v4 - 8);
    if ((sub_1C581A078((_QWORD **)&v857, *((llvm::Constant **)v4 - 4)) & 1) == 0)
      goto LABEL_127;
  }
  v33 = v860;
  v34 = (const void **)v849;
  v35 = *((unsigned int *)v849 + 2);
  if (v35 > 0x40)
  {
    v36 = (void *)operator new[]();
    memcpy(v36, *v34, ((unint64_t)(v35 + 63) >> 3) & 0x3FFFFFF8);
    __src = v5;
    DWORD2(v838) = v35;
    *(_QWORD *)&v838 = operator new[]();
    memcpy((void *)v838, v36, (((unint64_t)DWORD2(v838) + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v36 = *v849;
    p_src = &__src;
    DWORD2(v838) = *((_DWORD *)v849 + 2);
    __src = v5;
    *(_QWORD *)&v838 = v36;
  }
  v42 = *((unsigned __int8 *)v33 + 16);
  if (v42 == 41)
  {
    v43 = __src == *(v33 - 8) && sub_1C57E8F04((llvm::APInt *)&v838, (llvm::Constant *)*(v33 - 4));
  }
  else
  {
    if (v42 == 5)
      LOBYTE(p_src) = *((_WORD *)v33 + 9) == 13
                   && (v44 = (char *)&v33[-4 * (*((_DWORD *)v33 + 5) & 0x7FFFFFF)], __src == *(void **)v44)
                   && sub_1C57BE190((llvm::APInt *)&v838, *((llvm::Constant **)v44 + 4));
    v43 = (v42 == 5) & p_src;
  }
  if (DWORD2(v838) >= 0x41 && (_QWORD)v838)
    MEMORY[0x1CAA32F9C](v838, 0x1000C8000313F17);
  if (v35 >= 0x41 && v36)
    MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
  if (v43)
  {
    v70 = llvm::Constant::getNullValue(*(llvm::Constant **)v5, v16);
    v71 = (char *)operator new(0x80uLL);
    v3 = v71 + 64;
    *((_DWORD *)v71 + 21) = *((_DWORD *)v71 + 21) & 0x38000000 | 2;
    *(_QWORD *)v71 = 0;
    *((_QWORD *)v71 + 1) = 0;
    *((_QWORD *)v71 + 2) = 0;
    *((_QWORD *)v71 + 3) = v71 + 64;
    *((_QWORD *)v71 + 4) = 0;
    v72 = (llvm::Value ***)(v71 + 32);
    *((_QWORD *)v71 + 5) = 0;
    *((_QWORD *)v71 + 6) = 0;
    *((_QWORD *)v71 + 7) = v71 + 64;
    WORD4(v839) = 257;
    sub_1C4774CC4(*(_DWORD **)v5);
    *((_QWORD *)v71 + 8) = v73;
    *((_QWORD *)v71 + 9) = 0;
    v74 = *((_DWORD *)v71 + 21) & 0xC0000000 | 2;
    *((_DWORD *)v71 + 20) = 81;
    *((_DWORD *)v71 + 21) = v74;
    *(_OWORD *)(v71 + 88) = 0u;
    *(_OWORD *)(v71 + 104) = 0u;
    *((_DWORD *)v71 + 30) = 0;
    if (*(_QWORD *)v71)
    {
      **((_QWORD **)v71 + 2) = *((_QWORD *)v71 + 1);
      v713 = *((_QWORD *)v71 + 1);
      if (v713)
        *(_QWORD *)(v713 + 16) = *((_QWORD *)v71 + 2);
    }
    *(_QWORD *)v71 = v5;
    v75 = (_DWORD *)*((_QWORD *)v5 + 1);
    *((_QWORD *)v71 + 1) = v75;
    if (v75)
      *((_QWORD *)v75 + 2) = v71 + 8;
    *((_QWORD *)v71 + 2) = v830;
    *v830 = v71;
    if (*((_QWORD *)v71 + 4))
    {
      **((_QWORD **)v71 + 6) = *((_QWORD *)v71 + 5);
      v714 = *((_QWORD *)v71 + 5);
      if (v714)
        *(_QWORD *)(v714 + 16) = *((_QWORD *)v71 + 6);
    }
    *v72 = v70;
    if (v70)
    {
      v78 = v70[1];
      v77 = (llvm::Value ****)(v70 + 1);
      v76 = v78;
      *((_QWORD *)v71 + 5) = v78;
      if (v78)
        *((_QWORD *)v76 + 2) = v71 + 40;
      *((_QWORD *)v71 + 6) = v77;
      *v77 = v72;
    }
    v79 = (_DWORD)v832 == 36;
    goto LABEL_175;
  }
LABEL_127:
  if ((_DWORD)v832 != 37 && (_DWORD)v832 != 34)
    goto LABEL_179;
  v856 = (uint64_t)&v860;
  *(_QWORD *)&v857 = &v849;
  v80 = v5[16];
  if (v80 == 5)
  {
    if (*((_WORD *)v5 + 9) != 28)
      goto LABEL_179;
    v83 = (llvm::Constant **)&v5[-32 * (*((_DWORD *)v5 + 5) & 0x7FFFFFF)];
    if (!*v83)
      goto LABEL_179;
    v84 = *((unsigned __int8 *)*v83 + 16);
    if (v84 < 0x1C || v84 - 59 < 0xFFFFFFEE)
      goto LABEL_179;
    v860 = (void **)*v83;
    if (!sub_1C581A124((_QWORD **)&v857, v83[4]))
      goto LABEL_179;
  }
  else
  {
    if (v80 != 56)
      goto LABEL_179;
    v81 = *((_QWORD *)v5 - 8);
    if (!v81)
      goto LABEL_179;
    v82 = *(unsigned __int8 *)(v81 + 16);
    if (v82 < 0x1C)
      goto LABEL_179;
    if (v82 - 59 < 0xFFFFFFEE)
      goto LABEL_179;
    v860 = (void **)*((_QWORD *)v5 - 8);
    if ((sub_1C581A078((_QWORD **)&v857, *((llvm::Constant **)v5 - 4)) & 1) == 0)
      goto LABEL_179;
  }
  v86 = v860;
  v87 = (const void **)v849;
  v88 = *((unsigned int *)v849 + 2);
  if (v88 > 0x40)
  {
    v89 = (void *)operator new[]();
    memcpy(v89, *v87, ((unint64_t)(v88 + 63) >> 3) & 0x3FFFFFF8);
    __src = v4;
    DWORD2(v838) = v88;
    *(_QWORD *)&v838 = operator new[]();
    memcpy((void *)v838, v89, (((unint64_t)DWORD2(v838) + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v89 = *v849;
    v90 = &__src;
    DWORD2(v838) = *((_DWORD *)v849 + 2);
    __src = v4;
    *(_QWORD *)&v838 = v89;
  }
  v91 = *((unsigned __int8 *)v86 + 16);
  if (v91 == 41)
  {
    v92 = __src == *(v86 - 8) && sub_1C57E8F04((llvm::APInt *)&v838, (llvm::Constant *)*(v86 - 4));
  }
  else
  {
    if (v91 == 5)
      LOBYTE(v90) = *((_WORD *)v86 + 9) == 13
                 && (v93 = (char *)&v86[-4 * (*((_DWORD *)v86 + 5) & 0x7FFFFFF)], __src == *(void **)v93)
                 && sub_1C57BE190((llvm::APInt *)&v838, *((llvm::Constant **)v93 + 4));
    v92 = (v91 == 5) & v90;
  }
  if (DWORD2(v838) >= 0x41 && (_QWORD)v838)
    MEMORY[0x1CAA32F9C](v838, 0x1000C8000313F17);
  if (v88 >= 0x41 && v89)
    MEMORY[0x1CAA32F9C](v89, 0x1000C8000313F17);
  if (v92)
  {
    v94 = llvm::Constant::getNullValue(*(llvm::Constant **)v5, v16);
    v71 = (char *)operator new(0x80uLL);
    v3 = v71 + 64;
    *((_DWORD *)v71 + 21) = *((_DWORD *)v71 + 21) & 0x38000000 | 2;
    *(_QWORD *)v71 = 0;
    *((_QWORD *)v71 + 1) = 0;
    *((_QWORD *)v71 + 2) = 0;
    *((_QWORD *)v71 + 3) = v71 + 64;
    *((_QWORD *)v71 + 4) = 0;
    v95 = (llvm::Value ***)(v71 + 32);
    *((_QWORD *)v71 + 5) = 0;
    *((_QWORD *)v71 + 6) = 0;
    *((_QWORD *)v71 + 7) = v71 + 64;
    WORD4(v839) = 257;
    sub_1C4774CC4(*(_DWORD **)v4);
    *((_QWORD *)v71 + 8) = v96;
    *((_QWORD *)v71 + 9) = 0;
    v97 = *((_DWORD *)v71 + 21) & 0xC0000000 | 2;
    *((_DWORD *)v71 + 20) = 81;
    *((_DWORD *)v71 + 21) = v97;
    *(_OWORD *)(v71 + 88) = 0u;
    *(_OWORD *)(v71 + 104) = 0u;
    *((_DWORD *)v71 + 30) = 0;
    if (*(_QWORD *)v71)
    {
      **((_QWORD **)v71 + 2) = *((_QWORD *)v71 + 1);
      v709 = *((_QWORD *)v71 + 1);
      if (v709)
        *(_QWORD *)(v709 + 16) = *((_QWORD *)v71 + 2);
    }
    *(_QWORD *)v71 = v4;
    v98 = (_DWORD *)*((_QWORD *)v4 + 1);
    *((_QWORD *)v71 + 1) = v98;
    if (v98)
      *((_QWORD *)v98 + 2) = v71 + 8;
    *((_QWORD *)v71 + 2) = v829;
    *v829 = v71;
    if (*((_QWORD *)v71 + 4))
    {
      **((_QWORD **)v71 + 6) = *((_QWORD *)v71 + 5);
      v710 = *((_QWORD *)v71 + 5);
      if (v710)
        *(_QWORD *)(v710 + 16) = *((_QWORD *)v71 + 6);
    }
    *v95 = v94;
    if (v94)
    {
      v101 = v94[1];
      v100 = (llvm::Value ****)(v94 + 1);
      v99 = v101;
      *((_QWORD *)v71 + 5) = v101;
      if (v101)
        *((_QWORD *)v99 + 2) = v71 + 40;
      *((_QWORD *)v71 + 6) = v100;
      *v100 = v95;
    }
    v79 = (_DWORD)v832 == 34;
LABEL_175:
    if (v79)
      v102 = 33;
    else
      v102 = 32;
LABEL_178:
    *((_WORD *)v71 + 41) = v102;
LABEL_359:
    v69 = &__src;
    goto LABEL_360;
  }
LABEL_179:
  if (!v8)
  {
LABEL_189:
    v103 = 0;
    goto LABEL_190;
  }
  v103 = 0;
  HIDWORD(v105) = *(unsigned __int8 *)(v8 + 16) - 41;
  LODWORD(v105) = HIDWORD(v105);
  v104 = v105 >> 1;
  if (v104 <= 6 && ((1 << v104) & 0x47) != 0)
  {
    if ((v832 & 0x3E) == 0x20)
    {
      v103 = 1;
      goto LABEL_190;
    }
    if ((v832 - 34) < 4)
    {
      v106 = 2;
LABEL_188:
      v103 = (*(_BYTE *)(v8 + 17) & v106) != 0;
      goto LABEL_190;
    }
    if ((v832 - 38) <= 3)
    {
      v106 = 4;
      goto LABEL_188;
    }
    goto LABEL_189;
  }
LABEL_190:
  v820 = a3;
  if (v11)
  {
    v107 = 0;
    HIDWORD(v109) = *(unsigned __int8 *)(v11 + 16) - 41;
    LODWORD(v109) = HIDWORD(v109);
    v108 = v109 >> 1;
    if (v108 > 6 || ((1 << v108) & 0x47) == 0)
    {
LABEL_201:
      if (!v8)
        goto LABEL_206;
      goto LABEL_204;
    }
    if ((v832 & 0x3E) == 0x20)
    {
      v107 = 1;
      if (!v8)
        goto LABEL_206;
      goto LABEL_204;
    }
    if ((v832 - 34) < 4)
    {
      v110 = 2;
LABEL_200:
      v107 = (*(_BYTE *)(v11 + 17) & v110) != 0;
      goto LABEL_201;
    }
    if ((v832 - 38) <= 3)
    {
      v110 = 4;
      goto LABEL_200;
    }
  }
  v107 = 0;
  if (!v8)
  {
LABEL_206:
    v111 = 0;
    v112 = 0;
    goto LABEL_207;
  }
LABEL_204:
  if (*(_BYTE *)(v8 + 16) != 41)
    goto LABEL_206;
  v111 = *(unsigned __int8 **)(v8 - 64);
  v112 = *(unsigned __int8 **)(v8 - 32);
LABEL_207:
  v821 = v8;
  if (v11 && *(_BYTE *)(v11 + 16) == 41)
  {
    v113 = *(unsigned __int8 **)(v11 - 64);
    v114 = *(unsigned __int8 **)(v11 - 32);
  }
  else
  {
    v113 = 0;
    v114 = 0;
  }
  v115 = v112 == v5 || v111 == v5;
  v116 = !v103;
  if (v115 && (v116 & 1) == 0)
  {
    v118 = (char *)operator new(0x80uLL);
    v3 = v118 + 64;
    *((_DWORD *)v118 + 21) = *((_DWORD *)v118 + 21) & 0x38000000 | 2;
    *(_QWORD *)v118 = 0;
    *((_QWORD *)v118 + 1) = 0;
    *((_QWORD *)v118 + 2) = 0;
    *((_QWORD *)v118 + 3) = v118 + 64;
    v119 = v111;
    *((_QWORD *)v118 + 4) = 0;
    v120 = (llvm::Value ***)(v118 + 32);
    *((_QWORD *)v118 + 5) = 0;
    *((_QWORD *)v118 + 6) = 0;
    *((_QWORD *)v118 + 7) = v118 + 64;
    if (v119 == v5)
      v121 = v112;
    else
      v121 = v119;
    v122 = llvm::Constant::getNullValue(*(llvm::Constant **)v5, v117);
    WORD4(v839) = 257;
    sub_1C4774CC4(*(_DWORD **)v121);
    *((_QWORD *)v118 + 8) = v123;
    *((_QWORD *)v118 + 9) = 0;
    v124 = *((_DWORD *)v118 + 21) & 0xC0000000 | 2;
    *((_DWORD *)v118 + 20) = 81;
    *((_DWORD *)v118 + 21) = v124;
    *(_OWORD *)(v118 + 88) = 0u;
    *(_OWORD *)(v118 + 104) = 0u;
    *((_DWORD *)v118 + 30) = 0;
    if (*(_QWORD *)v118)
    {
      **((_QWORD **)v118 + 2) = *((_QWORD *)v118 + 1);
      v687 = *((_QWORD *)v118 + 1);
      if (v687)
        *(_QWORD *)(v687 + 16) = *((_QWORD *)v118 + 2);
    }
    *(_QWORD *)v118 = v121;
    v127 = *((_QWORD *)v121 + 1);
    v126 = v121 + 8;
    v125 = v127;
    *((_QWORD *)v118 + 1) = v127;
    if (v127)
      *(_QWORD *)(v125 + 16) = v118 + 8;
    *((_QWORD *)v118 + 2) = v126;
    *v126 = v118;
    if (*((_QWORD *)v118 + 4))
    {
      **((_QWORD **)v118 + 6) = *((_QWORD *)v118 + 5);
      v688 = *((_QWORD *)v118 + 5);
      if (v688)
        *(_QWORD *)(v688 + 16) = *((_QWORD *)v118 + 6);
    }
    *v120 = v122;
    if (v122)
    {
      v130 = v122[1];
      v129 = (llvm::Value ****)(v122 + 1);
      v128 = v130;
      *((_QWORD *)v118 + 5) = v130;
      if (v130)
        *((_QWORD *)v128 + 2) = v118 + 40;
      *((_QWORD *)v118 + 6) = v129;
      *v129 = v120;
    }
LABEL_228:
    *((_WORD *)v118 + 41) = v832;
    goto LABEL_359;
  }
  v131 = v114 == v4 || v113 == v4;
  v132 = !v107;
  if (v131 && (v132 & 1) == 0)
  {
    v133 = v113;
    v134 = (char *)operator new(0x80uLL);
    v3 = v134 + 64;
    *((_DWORD *)v134 + 21) = *((_DWORD *)v134 + 21) & 0x38000000 | 2;
    *(_QWORD *)v134 = 0;
    *((_QWORD *)v134 + 1) = 0;
    *((_QWORD *)v134 + 2) = 0;
    *((_QWORD *)v134 + 3) = v134 + 64;
    *((_QWORD *)v134 + 4) = 0;
    v135 = (unsigned __int8 **)(v134 + 32);
    *((_QWORD *)v134 + 5) = 0;
    *((_QWORD *)v134 + 6) = 0;
    *((_QWORD *)v134 + 7) = v134 + 64;
    v137 = llvm::Constant::getNullValue(*(llvm::Constant **)v4, v136);
    v138 = v137;
    if (v133 == v4)
      v133 = v114;
    WORD4(v839) = 257;
    sub_1C4774CC4(*v137);
    *((_QWORD *)v134 + 8) = v139;
    *((_QWORD *)v134 + 9) = 0;
    v140 = *((_DWORD *)v134 + 21) & 0xC0000000 | 2;
    *((_DWORD *)v134 + 20) = 81;
    *((_DWORD *)v134 + 21) = v140;
    *(_OWORD *)(v134 + 88) = 0u;
    *(_OWORD *)(v134 + 104) = 0u;
    *((_DWORD *)v134 + 30) = 0;
    if (*(_QWORD *)v134)
    {
      **((_QWORD **)v134 + 2) = *((_QWORD *)v134 + 1);
      v689 = *((_QWORD *)v134 + 1);
      if (v689)
        *(_QWORD *)(v689 + 16) = *((_QWORD *)v134 + 2);
    }
    *(_QWORD *)v134 = v138;
    v143 = v138[1];
    v142 = v138 + 1;
    v141 = v143;
    *((_QWORD *)v134 + 1) = v143;
    if (v143)
      *((_QWORD *)v141 + 2) = v134 + 8;
    *((_QWORD *)v134 + 2) = v142;
    *v142 = v134;
    if (*((_QWORD *)v134 + 4))
    {
      **((_QWORD **)v134 + 6) = *((_QWORD *)v134 + 5);
      v690 = *((_QWORD *)v134 + 5);
      if (v690)
        *(_QWORD *)(v690 + 16) = *((_QWORD *)v134 + 6);
    }
    *v135 = v133;
    if (v133)
    {
      v146 = *((_QWORD *)v133 + 1);
      v145 = (unsigned __int8 ***)(v133 + 8);
      v144 = v146;
      *((_QWORD *)v134 + 5) = v146;
      if (v146)
        *(_QWORD *)(v144 + 16) = v134 + 40;
      *((_QWORD *)v134 + 6) = v145;
      *v145 = v135;
    }
LABEL_334:
    *((_WORD *)v134 + 41) = v832;
    goto LABEL_359;
  }
  if (v111)
    v147 = v113 == 0;
  else
    v147 = 1;
  v148 = !v147;
  v817 = v148;
  if (!v147)
  {
    v150 = v111 == v113 || v111 == v114;
    v151 = (v112 != v113) & ~v150;
    if (v112 == v114)
      v151 = 0;
    if (((v151 | v116 | v132) & 1) == 0)
    {
      v184 = v111;
      if (v112 == v113)
        v185 = v114;
      else
        v185 = v113;
      if (v150)
        v186 = v112;
      else
        v186 = v184;
      v187 = v113;
      v134 = (char *)operator new(0x80uLL);
      v3 = v134 + 64;
      *((_DWORD *)v134 + 21) = *((_DWORD *)v134 + 21) & 0x38000000 | 2;
      *(_QWORD *)v134 = 0;
      *((_QWORD *)v134 + 1) = 0;
      *((_QWORD *)v134 + 2) = 0;
      *((_QWORD *)v134 + 3) = v134 + 64;
      *((_QWORD *)v134 + 4) = 0;
      v188 = (uint64_t ***)(v134 + 32);
      *((_QWORD *)v134 + 5) = 0;
      *((_QWORD *)v134 + 6) = 0;
      *((_QWORD *)v134 + 7) = v134 + 64;
      if (v184 == v114)
        v189 = (uint64_t **)v187;
      else
        v189 = (uint64_t **)v185;
      if (v184 == v187)
        v190 = (uint64_t **)v114;
      else
        v190 = v189;
      goto LABEL_325;
    }
  }
  v818 = v111;
  v819 = a1;
  if (v111)
    v152 = v103;
  else
    v152 = 0;
  v153 = (_DWORD)v832 == 40 && v152;
  v815 = v152;
  v816 = !v107;
  if (v153)
  {
    v154 = v113;
    if ((sub_1C4D9ED34((uint64_t)&__src, (llvm::Constant *)v112) & 1) != 0)
    {
      v155 = (char *)operator new(0x80uLL);
      v3 = v155 + 64;
      *((_DWORD *)v155 + 21) = *((_DWORD *)v155 + 21) & 0x38000000 | 2;
      *(_QWORD *)v155 = 0;
      *((_QWORD *)v155 + 1) = 0;
      *((_QWORD *)v155 + 2) = 0;
      *((_QWORD *)v155 + 3) = v155 + 64;
      *((_QWORD *)v155 + 4) = 0;
      *((_QWORD *)v155 + 5) = 0;
      *((_QWORD *)v155 + 6) = 0;
      *((_QWORD *)v155 + 7) = v155 + 64;
      WORD4(v839) = 257;
      sub_1C4774CC4(*(_DWORD **)v818);
      *((_QWORD *)v155 + 8) = v156;
      *((_QWORD *)v155 + 9) = 0;
      v157 = *((_DWORD *)v155 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v155 + 20) = 81;
      *((_DWORD *)v155 + 21) = v157;
      *(_OWORD *)(v155 + 88) = 0u;
      *(_OWORD *)(v155 + 104) = 0u;
      *((_DWORD *)v155 + 30) = 0;
      if (*(_QWORD *)v155)
      {
        **((_QWORD **)v155 + 2) = *((_QWORD *)v155 + 1);
        v703 = *((_QWORD *)v155 + 1);
        if (v703)
          *(_QWORD *)(v703 + 16) = *((_QWORD *)v155 + 2);
      }
      *(_QWORD *)v155 = v818;
      v159 = v818 + 8;
      v158 = (_DWORD *)*((_QWORD *)v818 + 1);
      *((_QWORD *)v155 + 1) = v158;
      if (v158)
        *((_QWORD *)v158 + 2) = v155 + 8;
      *((_QWORD *)v155 + 2) = v159;
      *v159 = v155;
      if (*((_QWORD *)v155 + 4))
      {
        **((_QWORD **)v155 + 6) = *((_QWORD *)v155 + 5);
        v704 = *((_QWORD *)v155 + 5);
        if (v704)
          *(_QWORD *)(v704 + 16) = *((_QWORD *)v155 + 6);
      }
      *((_QWORD *)v155 + 4) = v5;
      v160 = (_DWORD *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v155 + 5) = v160;
      if (v160)
        *((_QWORD *)v160 + 2) = v155 + 40;
      *((_QWORD *)v155 + 6) = v830;
      *v830 = v155 + 32;
LABEL_276:
      v161 = 41;
LABEL_358:
      *((_WORD *)v155 + 41) = v161;
      goto LABEL_359;
    }
LABEL_289:
    v169 = 0;
    v170 = 0;
    v162 = !v153;
    v113 = v154;
    goto LABEL_290;
  }
  v162 = v832 == 39;
  if ((_DWORD)v832 == 39 && v152)
  {
    v154 = v113;
    if ((sub_1C4D9ED34((uint64_t)&__src, (llvm::Constant *)v112) & 1) != 0)
    {
      v155 = (char *)operator new(0x80uLL);
      v3 = v155 + 64;
      *((_DWORD *)v155 + 21) = *((_DWORD *)v155 + 21) & 0x38000000 | 2;
      *(_QWORD *)v155 = 0;
      *((_QWORD *)v155 + 1) = 0;
      *((_QWORD *)v155 + 2) = 0;
      *((_QWORD *)v155 + 3) = v155 + 64;
      *((_QWORD *)v155 + 4) = 0;
      *((_QWORD *)v155 + 5) = 0;
      *((_QWORD *)v155 + 6) = 0;
      *((_QWORD *)v155 + 7) = v155 + 64;
      WORD4(v839) = 257;
      sub_1C4774CC4(*(_DWORD **)v818);
      *((_QWORD *)v155 + 8) = v164;
      *((_QWORD *)v155 + 9) = 0;
      v165 = *((_DWORD *)v155 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v155 + 20) = 81;
      *((_DWORD *)v155 + 21) = v165;
      *(_OWORD *)(v155 + 88) = 0u;
      *(_OWORD *)(v155 + 104) = 0u;
      *((_DWORD *)v155 + 30) = 0;
      if (*(_QWORD *)v155)
      {
        **((_QWORD **)v155 + 2) = *((_QWORD *)v155 + 1);
        v717 = *((_QWORD *)v155 + 1);
        if (v717)
          *(_QWORD *)(v717 + 16) = *((_QWORD *)v155 + 2);
      }
      *(_QWORD *)v155 = v818;
      v167 = v818 + 8;
      v166 = (_DWORD *)*((_QWORD *)v818 + 1);
      *((_QWORD *)v155 + 1) = v166;
      if (v166)
        *((_QWORD *)v166 + 2) = v155 + 8;
      *((_QWORD *)v155 + 2) = v167;
      *v167 = v155;
      if (*((_QWORD *)v155 + 4))
      {
        **((_QWORD **)v155 + 6) = *((_QWORD *)v155 + 5);
        v718 = *((_QWORD *)v155 + 5);
        if (v718)
          *(_QWORD *)(v718 + 16) = *((_QWORD *)v155 + 6);
      }
      *((_QWORD *)v155 + 4) = v5;
      v168 = (_DWORD *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v155 + 5) = v168;
      if (v168)
        *((_QWORD *)v168 + 2) = v155 + 40;
      *((_QWORD *)v155 + 6) = v830;
      *v830 = v155 + 32;
      goto LABEL_344;
    }
    goto LABEL_289;
  }
  v170 = v832 == 41;
  if ((_DWORD)v832 == 41 && v152)
  {
    v205 = v113;
    if ((sub_1C4D89CC8((uint64_t)&__src, (llvm::Constant *)v112) & 1) != 0)
    {
      v155 = (char *)operator new(0x80uLL);
      v3 = v155 + 64;
      *((_DWORD *)v155 + 21) = *((_DWORD *)v155 + 21) & 0x38000000 | 2;
      *(_QWORD *)v155 = 0;
      *((_QWORD *)v155 + 1) = 0;
      *((_QWORD *)v155 + 2) = 0;
      *((_QWORD *)v155 + 3) = v155 + 64;
      *((_QWORD *)v155 + 4) = 0;
      *((_QWORD *)v155 + 5) = 0;
      *((_QWORD *)v155 + 6) = 0;
      *((_QWORD *)v155 + 7) = v155 + 64;
      WORD4(v839) = 257;
      sub_1C4774CC4(*(_DWORD **)v818);
      *((_QWORD *)v155 + 8) = v206;
      *((_QWORD *)v155 + 9) = 0;
      v207 = *((_DWORD *)v155 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v155 + 20) = 81;
      *((_DWORD *)v155 + 21) = v207;
      *(_OWORD *)(v155 + 88) = 0u;
      *(_OWORD *)(v155 + 104) = 0u;
      *((_DWORD *)v155 + 30) = 0;
      if (*(_QWORD *)v155)
      {
        **((_QWORD **)v155 + 2) = *((_QWORD *)v155 + 1);
        v723 = *((_QWORD *)v155 + 1);
        if (v723)
          *(_QWORD *)(v723 + 16) = *((_QWORD *)v155 + 2);
      }
      *(_QWORD *)v155 = v818;
      v209 = v818 + 8;
      v208 = (_DWORD *)*((_QWORD *)v818 + 1);
      *((_QWORD *)v155 + 1) = v208;
      if (v208)
        *((_QWORD *)v208 + 2) = v155 + 8;
      *((_QWORD *)v155 + 2) = v209;
      *v209 = v155;
      if (*((_QWORD *)v155 + 4))
      {
        **((_QWORD **)v155 + 6) = *((_QWORD *)v155 + 5);
        v724 = *((_QWORD *)v155 + 5);
        if (v724)
          *(_QWORD *)(v724 + 16) = *((_QWORD *)v155 + 6);
      }
      *((_QWORD *)v155 + 4) = v5;
      v210 = (_DWORD *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v155 + 5) = v210;
      if (v210)
        *((_QWORD *)v210 + 2) = v155 + 40;
      *((_QWORD *)v155 + 6) = v830;
      *v830 = v155 + 32;
      goto LABEL_357;
    }
    v169 = 0;
    v170 = 1;
    v113 = v205;
    v162 = v832 == 39;
  }
  else
  {
    v169 = v832 == 38;
    if ((_DWORD)v832 == 38 && v152)
    {
      v219 = v113;
      if (sub_1C4D89CC8((uint64_t)&__src, (llvm::Constant *)v112))
      {
        v155 = (char *)operator new(0x80uLL);
        v3 = v155 + 64;
        *((_DWORD *)v155 + 21) = *((_DWORD *)v155 + 21) & 0x38000000 | 2;
        *(_QWORD *)v155 = 0;
        *((_QWORD *)v155 + 1) = 0;
        *((_QWORD *)v155 + 2) = 0;
        *((_QWORD *)v155 + 3) = v155 + 64;
        *((_QWORD *)v155 + 4) = 0;
        *((_QWORD *)v155 + 5) = 0;
        *((_QWORD *)v155 + 6) = 0;
        *((_QWORD *)v155 + 7) = v155 + 64;
        WORD4(v839) = 257;
        sub_1C4774CC4(*(_DWORD **)v818);
        *((_QWORD *)v155 + 8) = v220;
        *((_QWORD *)v155 + 9) = 0;
        v221 = *((_DWORD *)v155 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v155 + 20) = 81;
        *((_DWORD *)v155 + 21) = v221;
        *(_OWORD *)(v155 + 88) = 0u;
        *(_OWORD *)(v155 + 104) = 0u;
        *((_DWORD *)v155 + 30) = 0;
        if (*(_QWORD *)v155)
        {
          **((_QWORD **)v155 + 2) = *((_QWORD *)v155 + 1);
          v729 = *((_QWORD *)v155 + 1);
          if (v729)
            *(_QWORD *)(v729 + 16) = *((_QWORD *)v155 + 2);
        }
        *(_QWORD *)v155 = v818;
        v223 = v818 + 8;
        v222 = (_DWORD *)*((_QWORD *)v818 + 1);
        *((_QWORD *)v155 + 1) = v222;
        if (v222)
          *((_QWORD *)v222 + 2) = v155 + 8;
        *((_QWORD *)v155 + 2) = v223;
        *v223 = v155;
        if (*((_QWORD *)v155 + 4))
        {
          **((_QWORD **)v155 + 6) = *((_QWORD *)v155 + 5);
          v730 = *((_QWORD *)v155 + 5);
          if (v730)
            *(_QWORD *)(v730 + 16) = *((_QWORD *)v155 + 6);
        }
        *((_QWORD *)v155 + 4) = v5;
        v224 = (_DWORD *)*((_QWORD *)v5 + 1);
        *((_QWORD *)v155 + 5) = v224;
        if (v224)
          *((_QWORD *)v224 + 2) = v155 + 40;
        *((_QWORD *)v155 + 6) = v830;
        *v830 = v155 + 32;
        goto LABEL_303;
      }
      v169 = 1;
      v113 = v219;
      v162 = v832 == 39;
      v170 = v832 == 41;
    }
  }
LABEL_290:
  v813 = v162;
  v814 = v113;
  if (v113)
    v171 = v107;
  else
    v171 = 0;
  if (v171 && v169)
  {
    v172 = v170;
    v173 = sub_1C4D9ED34((uint64_t)&__src, (llvm::Constant *)v114);
    v170 = v172;
    if (v173)
    {
      v155 = (char *)operator new(0x80uLL);
      v3 = v155 + 64;
      *((_DWORD *)v155 + 21) = *((_DWORD *)v155 + 21) & 0x38000000 | 2;
      *(_QWORD *)v155 = 0;
      *((_QWORD *)v155 + 1) = 0;
      *((_QWORD *)v155 + 2) = 0;
      *((_QWORD *)v155 + 3) = v155 + 64;
      *((_QWORD *)v155 + 4) = 0;
      *((_QWORD *)v155 + 5) = 0;
      *((_QWORD *)v155 + 6) = 0;
      *((_QWORD *)v155 + 7) = v155 + 64;
      WORD4(v839) = 257;
      sub_1C4774CC4(*(_DWORD **)v4);
      *((_QWORD *)v155 + 8) = v174;
      *((_QWORD *)v155 + 9) = 0;
      v175 = *((_DWORD *)v155 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v155 + 20) = 81;
      *((_DWORD *)v155 + 21) = v175;
      *(_OWORD *)(v155 + 88) = 0u;
      *(_OWORD *)(v155 + 104) = 0u;
      *((_DWORD *)v155 + 30) = 0;
      if (*(_QWORD *)v155)
      {
        **((_QWORD **)v155 + 2) = *((_QWORD *)v155 + 1);
        v715 = *((_QWORD *)v155 + 1);
        if (v715)
          *(_QWORD *)(v715 + 16) = *((_QWORD *)v155 + 2);
      }
      *(_QWORD *)v155 = v4;
      v176 = (_DWORD *)*((_QWORD *)v4 + 1);
      *((_QWORD *)v155 + 1) = v176;
      if (v176)
        *((_QWORD *)v176 + 2) = v155 + 8;
      *((_QWORD *)v155 + 2) = v829;
      *v829 = v155;
      if (*((_QWORD *)v155 + 4))
      {
        **((_QWORD **)v155 + 6) = *((_QWORD *)v155 + 5);
        v716 = *((_QWORD *)v155 + 5);
        if (v716)
          *(_QWORD *)(v716 + 16) = *((_QWORD *)v155 + 6);
      }
      *((_QWORD *)v155 + 4) = v814;
      v178 = v814 + 8;
      v177 = *((_QWORD *)v814 + 1);
      *((_QWORD *)v155 + 5) = v177;
      if (v177)
        *(_QWORD *)(v177 + 16) = v155 + 40;
      *((_QWORD *)v155 + 6) = v178;
      *v178 = v155 + 32;
LABEL_303:
      v161 = 39;
      goto LABEL_358;
    }
  }
  if (v171 && v170 && sub_1C4D9ED34((uint64_t)&__src, (llvm::Constant *)v114))
  {
    v155 = (char *)operator new(0x80uLL);
    v3 = v155 + 64;
    *((_DWORD *)v155 + 21) = *((_DWORD *)v155 + 21) & 0x38000000 | 2;
    *(_QWORD *)v155 = 0;
    *((_QWORD *)v155 + 1) = 0;
    *((_QWORD *)v155 + 2) = 0;
    *((_QWORD *)v155 + 3) = v155 + 64;
    *((_QWORD *)v155 + 4) = 0;
    *((_QWORD *)v155 + 5) = 0;
    *((_QWORD *)v155 + 6) = 0;
    *((_QWORD *)v155 + 7) = v155 + 64;
    WORD4(v839) = 257;
    sub_1C4774CC4(*(_DWORD **)v4);
    *((_QWORD *)v155 + 8) = v179;
    *((_QWORD *)v155 + 9) = 0;
    v180 = *((_DWORD *)v155 + 21) & 0xC0000000 | 2;
    *((_DWORD *)v155 + 20) = 81;
    *((_DWORD *)v155 + 21) = v180;
    *(_OWORD *)(v155 + 88) = 0u;
    *(_OWORD *)(v155 + 104) = 0u;
    *((_DWORD *)v155 + 30) = 0;
    if (*(_QWORD *)v155)
    {
      **((_QWORD **)v155 + 2) = *((_QWORD *)v155 + 1);
      v719 = *((_QWORD *)v155 + 1);
      if (v719)
        *(_QWORD *)(v719 + 16) = *((_QWORD *)v155 + 2);
    }
    *(_QWORD *)v155 = v4;
    v181 = (_DWORD *)*((_QWORD *)v4 + 1);
    *((_QWORD *)v155 + 1) = v181;
    if (v181)
      *((_QWORD *)v181 + 2) = v155 + 8;
    *((_QWORD *)v155 + 2) = v829;
    *v829 = v155;
    if (*((_QWORD *)v155 + 4))
    {
      **((_QWORD **)v155 + 6) = *((_QWORD *)v155 + 5);
      v720 = *((_QWORD *)v155 + 5);
      if (v720)
        *(_QWORD *)(v720 + 16) = *((_QWORD *)v155 + 6);
    }
    *((_QWORD *)v155 + 4) = v814;
    v183 = v814 + 8;
    v182 = *((_QWORD *)v814 + 1);
    *((_QWORD *)v155 + 5) = v182;
    if (v182)
      *(_QWORD *)(v182 + 16) = v155 + 40;
    *((_QWORD *)v155 + 6) = v183;
    *v183 = v155 + 32;
LABEL_357:
    v161 = 40;
    goto LABEL_358;
  }
  if ((v171 & v813) == 1 && sub_1C4D89CC8((uint64_t)&__src, (llvm::Constant *)v114))
  {
    v155 = (char *)operator new(0x80uLL);
    v3 = v155 + 64;
    *((_DWORD *)v155 + 21) = *((_DWORD *)v155 + 21) & 0x38000000 | 2;
    *(_QWORD *)v155 = 0;
    *((_QWORD *)v155 + 1) = 0;
    *((_QWORD *)v155 + 2) = 0;
    *((_QWORD *)v155 + 3) = v155 + 64;
    *((_QWORD *)v155 + 4) = 0;
    *((_QWORD *)v155 + 5) = 0;
    *((_QWORD *)v155 + 6) = 0;
    *((_QWORD *)v155 + 7) = v155 + 64;
    WORD4(v839) = 257;
    sub_1C4774CC4(*(_DWORD **)v4);
    *((_QWORD *)v155 + 8) = v199;
    *((_QWORD *)v155 + 9) = 0;
    v200 = *((_DWORD *)v155 + 21) & 0xC0000000 | 2;
    *((_DWORD *)v155 + 20) = 81;
    *((_DWORD *)v155 + 21) = v200;
    *(_OWORD *)(v155 + 88) = 0u;
    *(_OWORD *)(v155 + 104) = 0u;
    *((_DWORD *)v155 + 30) = 0;
    if (*(_QWORD *)v155)
    {
      **((_QWORD **)v155 + 2) = *((_QWORD *)v155 + 1);
      v721 = *((_QWORD *)v155 + 1);
      if (v721)
        *(_QWORD *)(v721 + 16) = *((_QWORD *)v155 + 2);
    }
    *(_QWORD *)v155 = v4;
    v201 = (_DWORD *)*((_QWORD *)v4 + 1);
    *((_QWORD *)v155 + 1) = v201;
    if (v201)
      *((_QWORD *)v201 + 2) = v155 + 8;
    *((_QWORD *)v155 + 2) = v829;
    *v829 = v155;
    if (*((_QWORD *)v155 + 4))
    {
      **((_QWORD **)v155 + 6) = *((_QWORD *)v155 + 5);
      v722 = *((_QWORD *)v155 + 5);
      if (v722)
        *(_QWORD *)(v722 + 16) = *((_QWORD *)v155 + 6);
    }
    *((_QWORD *)v155 + 4) = v814;
    v203 = v814 + 8;
    v202 = *((_QWORD *)v814 + 1);
    *((_QWORD *)v155 + 5) = v202;
    if (v202)
      *(_QWORD *)(v202 + 16) = v155 + 40;
    *((_QWORD *)v155 + 6) = v203;
    *v203 = v155 + 32;
LABEL_344:
    v161 = 38;
    goto LABEL_358;
  }
  if ((_DWORD)v832 == 40 && v171)
  {
    if ((sub_1C4D89CC8((uint64_t)&__src, (llvm::Constant *)v114) & 1) != 0)
    {
      v155 = (char *)operator new(0x80uLL);
      v3 = v155 + 64;
      *((_DWORD *)v155 + 21) = *((_DWORD *)v155 + 21) & 0x38000000 | 2;
      *(_QWORD *)v155 = 0;
      *((_QWORD *)v155 + 1) = 0;
      *((_QWORD *)v155 + 2) = 0;
      *((_QWORD *)v155 + 3) = v155 + 64;
      *((_QWORD *)v155 + 4) = 0;
      *((_QWORD *)v155 + 5) = 0;
      *((_QWORD *)v155 + 6) = 0;
      *((_QWORD *)v155 + 7) = v155 + 64;
      WORD4(v839) = 257;
      sub_1C4774CC4(*(_DWORD **)v4);
      *((_QWORD *)v155 + 8) = v213;
      *((_QWORD *)v155 + 9) = 0;
      v214 = *((_DWORD *)v155 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v155 + 20) = 81;
      *((_DWORD *)v155 + 21) = v214;
      *(_OWORD *)(v155 + 88) = 0u;
      *(_OWORD *)(v155 + 104) = 0u;
      *((_DWORD *)v155 + 30) = 0;
      if (*(_QWORD *)v155)
      {
        **((_QWORD **)v155 + 2) = *((_QWORD *)v155 + 1);
        v727 = *((_QWORD *)v155 + 1);
        if (v727)
          *(_QWORD *)(v727 + 16) = *((_QWORD *)v155 + 2);
      }
      *(_QWORD *)v155 = v4;
      v215 = (_DWORD *)*((_QWORD *)v4 + 1);
      *((_QWORD *)v155 + 1) = v215;
      if (v215)
        *((_QWORD *)v215 + 2) = v155 + 8;
      *((_QWORD *)v155 + 2) = v829;
      *v829 = v155;
      if (*((_QWORD *)v155 + 4))
      {
        **((_QWORD **)v155 + 6) = *((_QWORD *)v155 + 5);
        v728 = *((_QWORD *)v155 + 5);
        if (v728)
          *(_QWORD *)(v728 + 16) = *((_QWORD *)v155 + 6);
      }
      *((_QWORD *)v155 + 4) = v814;
      v217 = v814 + 8;
      v216 = *((_QWORD *)v814 + 1);
      *((_QWORD *)v155 + 5) = v216;
      if (v216)
        *(_QWORD *)(v216 + 16) = v155 + 40;
      *((_QWORD *)v155 + 6) = v217;
      *v217 = v155 + 32;
      goto LABEL_276;
    }
    goto LABEL_398;
  }
  if ((_DWORD)v832 == 37 && v815)
  {
    if ((sub_1C4D89CC8((uint64_t)&__src, (llvm::Constant *)v112) & 1) != 0)
    {
      v155 = (char *)operator new(0x80uLL);
      v3 = v155 + 64;
      *((_DWORD *)v155 + 21) = *((_DWORD *)v155 + 21) & 0x38000000 | 2;
      *(_QWORD *)v155 = 0;
      *((_QWORD *)v155 + 1) = 0;
      *((_QWORD *)v155 + 2) = 0;
      *((_QWORD *)v155 + 3) = v155 + 64;
      *((_QWORD *)v155 + 4) = 0;
      *((_QWORD *)v155 + 5) = 0;
      *((_QWORD *)v155 + 6) = 0;
      *((_QWORD *)v155 + 7) = v155 + 64;
      WORD4(v839) = 257;
      sub_1C4774CC4(*(_DWORD **)v818);
      *((_QWORD *)v155 + 8) = v226;
      *((_QWORD *)v155 + 9) = 0;
      v227 = *((_DWORD *)v155 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v155 + 20) = 81;
      *((_DWORD *)v155 + 21) = v227;
      *(_OWORD *)(v155 + 88) = 0u;
      *(_OWORD *)(v155 + 104) = 0u;
      *((_DWORD *)v155 + 30) = 0;
      if (*(_QWORD *)v155)
      {
        **((_QWORD **)v155 + 2) = *((_QWORD *)v155 + 1);
        v733 = *((_QWORD *)v155 + 1);
        if (v733)
          *(_QWORD *)(v733 + 16) = *((_QWORD *)v155 + 2);
      }
      *(_QWORD *)v155 = v818;
      v229 = v818 + 8;
      v228 = (_DWORD *)*((_QWORD *)v818 + 1);
      *((_QWORD *)v155 + 1) = v228;
      if (v228)
        *((_QWORD *)v228 + 2) = v155 + 8;
      *((_QWORD *)v155 + 2) = v229;
      *v229 = v155;
      if (*((_QWORD *)v155 + 4))
      {
        **((_QWORD **)v155 + 6) = *((_QWORD *)v155 + 5);
        v734 = *((_QWORD *)v155 + 5);
        if (v734)
          *(_QWORD *)(v734 + 16) = *((_QWORD *)v155 + 6);
      }
      *((_QWORD *)v155 + 4) = v5;
      v230 = (_DWORD *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v155 + 5) = v230;
      if (v230)
        *((_QWORD *)v230 + 2) = v155 + 40;
      *((_QWORD *)v155 + 6) = v830;
      *v830 = v155 + 32;
      v161 = 36;
      goto LABEL_358;
    }
LABEL_398:
    v231 = v828;
    goto LABEL_399;
  }
  if ((_DWORD)v832 == 34 && v815)
  {
    v231 = v828;
    if ((sub_1C4D89CC8((uint64_t)&__src, (llvm::Constant *)v112) & 1) != 0)
    {
      v155 = (char *)operator new(0x80uLL);
      v3 = v155 + 64;
      *((_DWORD *)v155 + 21) = *((_DWORD *)v155 + 21) & 0x38000000 | 2;
      *(_QWORD *)v155 = 0;
      *((_QWORD *)v155 + 1) = 0;
      *((_QWORD *)v155 + 2) = 0;
      *((_QWORD *)v155 + 3) = v155 + 64;
      *((_QWORD *)v155 + 4) = 0;
      *((_QWORD *)v155 + 5) = 0;
      *((_QWORD *)v155 + 6) = 0;
      *((_QWORD *)v155 + 7) = v155 + 64;
      WORD4(v839) = 257;
      sub_1C4774CC4(*(_DWORD **)v818);
      *((_QWORD *)v155 + 8) = v269;
      *((_QWORD *)v155 + 9) = 0;
      v270 = *((_DWORD *)v155 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v155 + 20) = 81;
      *((_DWORD *)v155 + 21) = v270;
      *(_OWORD *)(v155 + 88) = 0u;
      *(_OWORD *)(v155 + 104) = 0u;
      *((_DWORD *)v155 + 30) = 0;
      if (*(_QWORD *)v155)
      {
        **((_QWORD **)v155 + 2) = *((_QWORD *)v155 + 1);
        v736 = *((_QWORD *)v155 + 1);
        if (v736)
          *(_QWORD *)(v736 + 16) = *((_QWORD *)v155 + 2);
      }
      *(_QWORD *)v155 = v818;
      v272 = v818 + 8;
      v271 = (_DWORD *)*((_QWORD *)v818 + 1);
      *((_QWORD *)v155 + 1) = v271;
      if (v271)
        *((_QWORD *)v271 + 2) = v155 + 8;
      *((_QWORD *)v155 + 2) = v272;
      *v272 = v155;
      if (*((_QWORD *)v155 + 4))
      {
        **((_QWORD **)v155 + 6) = *((_QWORD *)v155 + 5);
        v737 = *((_QWORD *)v155 + 5);
        if (v737)
          *(_QWORD *)(v737 + 16) = *((_QWORD *)v155 + 6);
      }
      *((_QWORD *)v155 + 4) = v5;
      v273 = (_DWORD *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v155 + 5) = v273;
      if (v273)
        *((_QWORD *)v273 + 2) = v155 + 40;
      *((_QWORD *)v155 + 6) = v830;
      *v830 = v155 + 32;
      v161 = 35;
      goto LABEL_358;
    }
  }
  else
  {
    v274 = (_DWORD)v832 == 35 && v171;
    v231 = v828;
    if (v274)
    {
      if ((sub_1C4D89CC8((uint64_t)&__src, (llvm::Constant *)v114) & 1) != 0)
      {
        v155 = (char *)operator new(0x80uLL);
        v3 = v155 + 64;
        *((_DWORD *)v155 + 21) = *((_DWORD *)v155 + 21) & 0x38000000 | 2;
        *(_QWORD *)v155 = 0;
        *((_QWORD *)v155 + 1) = 0;
        *((_QWORD *)v155 + 2) = 0;
        *((_QWORD *)v155 + 3) = v155 + 64;
        *((_QWORD *)v155 + 4) = 0;
        *((_QWORD *)v155 + 5) = 0;
        *((_QWORD *)v155 + 6) = 0;
        *((_QWORD *)v155 + 7) = v155 + 64;
        WORD4(v839) = 257;
        sub_1C4774CC4(*(_DWORD **)v4);
        *((_QWORD *)v155 + 8) = v275;
        *((_QWORD *)v155 + 9) = 0;
        v276 = *((_DWORD *)v155 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v155 + 20) = 81;
        *((_DWORD *)v155 + 21) = v276;
        *(_OWORD *)(v155 + 88) = 0u;
        *(_OWORD *)(v155 + 104) = 0u;
        *((_DWORD *)v155 + 30) = 0;
        if (*(_QWORD *)v155)
        {
          **((_QWORD **)v155 + 2) = *((_QWORD *)v155 + 1);
          v741 = *((_QWORD *)v155 + 1);
          if (v741)
            *(_QWORD *)(v741 + 16) = *((_QWORD *)v155 + 2);
        }
        *(_QWORD *)v155 = v4;
        v277 = (_DWORD *)*((_QWORD *)v4 + 1);
        *((_QWORD *)v155 + 1) = v277;
        if (v277)
          *((_QWORD *)v277 + 2) = v155 + 8;
        *((_QWORD *)v155 + 2) = v829;
        *v829 = v155;
        if (*((_QWORD *)v155 + 4))
        {
          **((_QWORD **)v155 + 6) = *((_QWORD *)v155 + 5);
          v742 = *((_QWORD *)v155 + 5);
          if (v742)
            *(_QWORD *)(v742 + 16) = *((_QWORD *)v155 + 6);
        }
        *((_QWORD *)v155 + 4) = v814;
        v279 = v814 + 8;
        v278 = *((_QWORD *)v814 + 1);
        *((_QWORD *)v155 + 5) = v278;
        if (v278)
          *(_QWORD *)(v278 + 16) = v155 + 40;
        *((_QWORD *)v155 + 6) = v279;
        *v279 = v155 + 32;
        v161 = 34;
        goto LABEL_358;
      }
    }
    else
    {
      v280 = (_DWORD)v832 == 36 && v171;
      if (v280 && sub_1C4D89CC8((uint64_t)&__src, (llvm::Constant *)v114))
      {
        v155 = (char *)operator new(0x80uLL);
        v3 = v155 + 64;
        *((_DWORD *)v155 + 21) = *((_DWORD *)v155 + 21) & 0x38000000 | 2;
        *(_QWORD *)v155 = 0;
        *((_QWORD *)v155 + 1) = 0;
        *((_QWORD *)v155 + 2) = 0;
        *((_QWORD *)v155 + 3) = v155 + 64;
        *((_QWORD *)v155 + 4) = 0;
        *((_QWORD *)v155 + 5) = 0;
        *((_QWORD *)v155 + 6) = 0;
        *((_QWORD *)v155 + 7) = v155 + 64;
        WORD4(v839) = 257;
        sub_1C4774CC4(*(_DWORD **)v4);
        *((_QWORD *)v155 + 8) = v281;
        *((_QWORD *)v155 + 9) = 0;
        v282 = *((_DWORD *)v155 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v155 + 20) = 81;
        *((_DWORD *)v155 + 21) = v282;
        *(_OWORD *)(v155 + 88) = 0u;
        *(_OWORD *)(v155 + 104) = 0u;
        *((_DWORD *)v155 + 30) = 0;
        if (*(_QWORD *)v155)
        {
          **((_QWORD **)v155 + 2) = *((_QWORD *)v155 + 1);
          v743 = *((_QWORD *)v155 + 1);
          if (v743)
            *(_QWORD *)(v743 + 16) = *((_QWORD *)v155 + 2);
        }
        *(_QWORD *)v155 = v4;
        v283 = (_DWORD *)*((_QWORD *)v4 + 1);
        *((_QWORD *)v155 + 1) = v283;
        if (v283)
          *((_QWORD *)v283 + 2) = v155 + 8;
        *((_QWORD *)v155 + 2) = v829;
        *v829 = v155;
        if (*((_QWORD *)v155 + 4))
        {
          **((_QWORD **)v155 + 6) = *((_QWORD *)v155 + 5);
          v744 = *((_QWORD *)v155 + 5);
          if (v744)
            *(_QWORD *)(v744 + 16) = *((_QWORD *)v155 + 6);
        }
        *((_QWORD *)v155 + 4) = v814;
        v285 = v814 + 8;
        v284 = *((_QWORD *)v814 + 1);
        *((_QWORD *)v155 + 5) = v284;
        if (v284)
          *(_QWORD *)(v284 + 16) = v155 + 40;
        *((_QWORD *)v155 + 6) = v285;
        *v285 = v155 + 32;
        v161 = 37;
        goto LABEL_358;
      }
    }
  }
LABEL_399:
  if ((v817 & v103 & v107) != 1)
  {
    v233 = !v107;
    if (!v821)
    {
      v265 = 0;
      v266 = 0;
      v267 = 0;
      goto LABEL_482;
    }
LABEL_479:
    v267 = v821;
    if (*(_BYTE *)(v821 + 16) == 43)
    {
      v265 = *(unsigned __int8 **)(v821 - 64);
      v266 = *(_QWORD *)(v821 - 32);
    }
    else
    {
      v265 = 0;
      v266 = 0;
    }
LABEL_482:
    if (v11 && *(_BYTE *)(v11 + 16) == 43)
    {
      v286 = *(_QWORD *)(v11 - 64);
      v287 = *(_QWORD *)(v11 - 32);
    }
    else
    {
      v286 = 0;
      v287 = 0;
    }
    if (v265 == v5 && v103)
    {
      v134 = (char *)operator new(0x80uLL);
      v3 = v134 + 64;
      *((_DWORD *)v134 + 21) = *((_DWORD *)v134 + 21) & 0x38000000 | 2;
      *(_QWORD *)v134 = 0;
      *((_QWORD *)v134 + 1) = 0;
      *((_QWORD *)v134 + 2) = 0;
      *((_QWORD *)v134 + 3) = v134 + 64;
      *((_QWORD *)v134 + 4) = 0;
      v289 = (uint64_t *)(v134 + 32);
      *((_QWORD *)v134 + 5) = 0;
      *((_QWORD *)v134 + 6) = 0;
      *((_QWORD *)v134 + 7) = v134 + 64;
      v291 = llvm::Constant::getNullValue(*(llvm::Constant **)v5, v290);
      WORD4(v839) = 257;
      sub_1C4774CC4(*v291);
      *((_QWORD *)v134 + 8) = v292;
      *((_QWORD *)v134 + 9) = 0;
      v293 = *((_DWORD *)v134 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v134 + 20) = 81;
      *((_DWORD *)v134 + 21) = v293;
      *(_OWORD *)(v134 + 88) = 0u;
      *(_OWORD *)(v134 + 104) = 0u;
      *((_DWORD *)v134 + 30) = 0;
      if (*(_QWORD *)v134)
      {
        **((_QWORD **)v134 + 2) = *((_QWORD *)v134 + 1);
        v725 = *((_QWORD *)v134 + 1);
        if (v725)
          *(_QWORD *)(v725 + 16) = *((_QWORD *)v134 + 2);
      }
      *(_QWORD *)v134 = v291;
      v296 = v291[1];
      v295 = v291 + 1;
      v294 = v296;
      *((_QWORD *)v134 + 1) = v296;
      if (v296)
        *((_QWORD *)v294 + 2) = v134 + 8;
      *((_QWORD *)v134 + 2) = v295;
      *v295 = v134;
      if (*((_QWORD *)v134 + 4))
      {
        **((_QWORD **)v134 + 6) = *((_QWORD *)v134 + 5);
        v726 = *((_QWORD *)v134 + 5);
        if (v726)
          *(_QWORD *)(v726 + 16) = *((_QWORD *)v134 + 6);
      }
      *v289 = v266;
      if (v266)
      {
        v299 = *(_QWORD *)(v266 + 8);
        v298 = (uint64_t **)(v266 + 8);
        v297 = v299;
        *((_QWORD *)v134 + 5) = v299;
        if (v299)
          *(_QWORD *)(v297 + 16) = v134 + 40;
        *((_QWORD *)v134 + 6) = v298;
        *v298 = v289;
      }
      goto LABEL_334;
    }
    if ((unsigned __int8 *)v286 == v4)
      v300 = v233;
    else
      v300 = 1;
    if ((v300 & 1) == 0)
    {
      v304 = v287;
      v134 = (char *)operator new(0x80uLL);
      v3 = v134 + 64;
      *((_DWORD *)v134 + 21) = *((_DWORD *)v134 + 21) & 0x38000000 | 2;
      *(_QWORD *)v134 = 0;
      *((_QWORD *)v134 + 1) = 0;
      *((_QWORD *)v134 + 2) = 0;
      *((_QWORD *)v134 + 3) = v134 + 64;
      *((_QWORD *)v134 + 4) = 0;
      v305 = (llvm::Value ***)(v134 + 32);
      *((_QWORD *)v134 + 5) = 0;
      *((_QWORD *)v134 + 6) = 0;
      *((_QWORD *)v134 + 7) = v134 + 64;
      v307 = llvm::Constant::getNullValue(*(llvm::Constant **)v4, v306);
      WORD4(v839) = 257;
      sub_1C4774CC4(*(_DWORD **)v304);
      *((_QWORD *)v134 + 8) = v308;
      *((_QWORD *)v134 + 9) = 0;
      v309 = *((_DWORD *)v134 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v134 + 20) = 81;
      *((_DWORD *)v134 + 21) = v309;
      *(_OWORD *)(v134 + 88) = 0u;
      *(_OWORD *)(v134 + 104) = 0u;
      *((_DWORD *)v134 + 30) = 0;
      if (*(_QWORD *)v134)
      {
        **((_QWORD **)v134 + 2) = *((_QWORD *)v134 + 1);
        v731 = *((_QWORD *)v134 + 1);
        if (v731)
          *(_QWORD *)(v731 + 16) = *((_QWORD *)v134 + 2);
      }
      *(_QWORD *)v134 = v304;
      v312 = *(_QWORD *)(v304 + 8);
      v311 = (_QWORD *)(v304 + 8);
      v310 = v312;
      *((_QWORD *)v134 + 1) = v312;
      if (v312)
        *(_QWORD *)(v310 + 16) = v134 + 8;
      *((_QWORD *)v134 + 2) = v311;
      *v311 = v134;
      if (*((_QWORD *)v134 + 4))
      {
        **((_QWORD **)v134 + 6) = *((_QWORD *)v134 + 5);
        v732 = *((_QWORD *)v134 + 5);
        if (v732)
          *(_QWORD *)(v732 + 16) = *((_QWORD *)v134 + 6);
      }
      *v305 = v307;
      if (v307)
      {
        v315 = v307[1];
        v314 = (llvm::Value ****)(v307 + 1);
        v313 = v315;
        *((_QWORD *)v134 + 5) = v315;
        if (v315)
          *((_QWORD *)v313 + 2) = v134 + 40;
        *((_QWORD *)v134 + 6) = v314;
        *v314 = v305;
      }
      goto LABEL_334;
    }
    if (v265 == v5 && ((_DWORD)v832 == 37 || (_DWORD)v832 == 34))
    {
      v134 = (char *)operator new(0x80uLL);
      v3 = v134 + 64;
      *((_DWORD *)v134 + 21) = *((_DWORD *)v134 + 21) & 0x38000000 | 2;
      *(_QWORD *)v134 = 0;
      *((_QWORD *)v134 + 1) = 0;
      *((_QWORD *)v134 + 2) = 0;
      *((_QWORD *)v134 + 3) = v134 + 64;
      *((_QWORD *)v134 + 4) = 0;
      *((_QWORD *)v134 + 5) = 0;
      *((_QWORD *)v134 + 6) = 0;
      *((_QWORD *)v134 + 7) = v134 + 64;
      WORD4(v839) = 257;
      sub_1C4774CC4(*(_DWORD **)v266);
      *((_QWORD *)v134 + 8) = v328;
      *((_QWORD *)v134 + 9) = 0;
      v329 = *((_DWORD *)v134 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v134 + 20) = 81;
      *((_DWORD *)v134 + 21) = v329;
      *(_OWORD *)(v134 + 88) = 0u;
      *(_OWORD *)(v134 + 104) = 0u;
      *((_DWORD *)v134 + 30) = 0;
      if (*(_QWORD *)v134)
      {
        **((_QWORD **)v134 + 2) = *((_QWORD *)v134 + 1);
        v739 = *((_QWORD *)v134 + 1);
        if (v739)
          *(_QWORD *)(v739 + 16) = *((_QWORD *)v134 + 2);
      }
      *(_QWORD *)v134 = v266;
      v332 = *(_QWORD *)(v266 + 8);
      v331 = (_QWORD *)(v266 + 8);
      v330 = v332;
      *((_QWORD *)v134 + 1) = v332;
      if (v332)
        *(_QWORD *)(v330 + 16) = v134 + 8;
      *((_QWORD *)v134 + 2) = v331;
      *v331 = v134;
      if (*((_QWORD *)v134 + 4))
      {
        **((_QWORD **)v134 + 6) = *((_QWORD *)v134 + 5);
        v740 = *((_QWORD *)v134 + 5);
        if (v740)
          *(_QWORD *)(v740 + 16) = *((_QWORD *)v134 + 6);
      }
      *((_QWORD *)v134 + 4) = v5;
      v333 = (_DWORD *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v134 + 5) = v333;
      if (v333)
        *((_QWORD *)v333 + 2) = v134 + 40;
      *((_QWORD *)v134 + 6) = v830;
      *v830 = v134 + 32;
      goto LABEL_334;
    }
    if ((unsigned __int8 *)v286 == v4 && v822 <= 1)
    {
      v190 = (uint64_t **)v287;
      v134 = (char *)operator new(0x80uLL);
      v3 = v134 + 64;
      *((_DWORD *)v134 + 21) = *((_DWORD *)v134 + 21) & 0x38000000 | 2;
      *(_QWORD *)v134 = 0;
      *((_QWORD *)v134 + 1) = 0;
      *((_QWORD *)v134 + 2) = 0;
      *((_QWORD *)v134 + 3) = v134 + 64;
      *((_QWORD *)v134 + 4) = 0;
      v188 = (uint64_t ***)(v134 + 32);
      *((_QWORD *)v134 + 5) = 0;
      *((_QWORD *)v134 + 6) = 0;
      *((_QWORD *)v134 + 7) = v134 + 64;
      WORD4(v839) = 257;
      sub_1C4774CC4(*(_DWORD **)v4);
      *((_QWORD *)v134 + 8) = v301;
      *((_QWORD *)v134 + 9) = 0;
      v302 = *((_DWORD *)v134 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v134 + 20) = 81;
      *((_DWORD *)v134 + 21) = v302;
      *(_OWORD *)(v134 + 88) = 0u;
      *(_OWORD *)(v134 + 104) = 0u;
      *((_DWORD *)v134 + 30) = 0;
      if (*(_QWORD *)v134)
      {
        **((_QWORD **)v134 + 2) = *((_QWORD *)v134 + 1);
        v738 = *((_QWORD *)v134 + 1);
        if (v738)
          *(_QWORD *)(v738 + 16) = *((_QWORD *)v134 + 2);
      }
      *(_QWORD *)v134 = v4;
      v303 = (_DWORD *)*((_QWORD *)v4 + 1);
      *((_QWORD *)v134 + 1) = v303;
      if (v303)
        *((_QWORD *)v303 + 2) = v134 + 8;
      *((_QWORD *)v134 + 2) = v829;
      *v829 = v134;
LABEL_329:
      if (*((_QWORD *)v134 + 4))
      {
        **((_QWORD **)v134 + 6) = *((_QWORD *)v134 + 5);
        v699 = *((_QWORD *)v134 + 5);
        if (v699)
          *(_QWORD *)(v699 + 16) = *((_QWORD *)v134 + 6);
      }
      *v188 = v190;
      if (v190)
      {
        v198 = v190[1];
        v197 = (uint64_t ****)(v190 + 1);
        v196 = v198;
        *((_QWORD *)v134 + 5) = v198;
        if (v198)
          v196[2] = (uint64_t)(v134 + 40);
        *((_QWORD *)v134 + 6) = v197;
        *v197 = v188;
      }
      goto LABEL_334;
    }
    if (v822 <= 1 && v265 == v5)
    {
      v823 = v287;
      v316 = (uint64_t)v231;
      if (!*((_QWORD *)v231 + 5))
      {
        if (!v266 || *(unsigned __int8 *)(v266 + 16) < 0x1Cu || (v316 = v266, !*(_QWORD *)(v266 + 40)))
          v316 = 0;
      }
      __src = v826;
      *(_QWORD *)&v838 = v825;
      *((_QWORD *)&v838 + 1) = v316;
      v839 = v827;
      LOBYTE(v840) = 1;
      v317 = sub_1C4F84D74(v266, 0, (uint64_t)&__src);
      v287 = v823;
      if (v317)
      {
        v318 = (char *)operator new(0x80uLL);
        v3 = v318 + 64;
        *((_DWORD *)v318 + 21) = *((_DWORD *)v318 + 21) & 0x38000000 | 2;
        *(_QWORD *)v318 = 0;
        *((_QWORD *)v318 + 1) = 0;
        *((_QWORD *)v318 + 2) = 0;
        *((_QWORD *)v318 + 3) = v318 + 64;
        *((_QWORD *)v318 + 4) = 0;
        v319 = (uint64_t *)(v318 + 32);
        *((_QWORD *)v318 + 5) = 0;
        *((_QWORD *)v318 + 6) = 0;
        *((_QWORD *)v318 + 7) = v318 + 64;
        LOWORD(v320) = llvm::CmpInst::getFlippedStrictnessPredicate(v832);
        WORD4(v839) = 257;
        sub_1C4774CC4(*(_DWORD **)v266);
        *((_QWORD *)v318 + 8) = v321;
        *((_QWORD *)v318 + 9) = 0;
        v322 = *((_DWORD *)v318 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v318 + 20) = 81;
        *((_DWORD *)v318 + 21) = v322;
        *(_OWORD *)(v318 + 88) = 0u;
        *(_OWORD *)(v318 + 104) = 0u;
        *((_DWORD *)v318 + 30) = 0;
        if (*(_QWORD *)v318)
        {
          **((_QWORD **)v318 + 2) = *((_QWORD *)v318 + 1);
          v747 = *((_QWORD *)v318 + 1);
          if (v747)
            *(_QWORD *)(v747 + 16) = *((_QWORD *)v318 + 2);
        }
        *(_QWORD *)v318 = v266;
        v325 = *(_QWORD *)(v266 + 8);
        v324 = (_QWORD *)(v266 + 8);
        v323 = v325;
        *((_QWORD *)v318 + 1) = v325;
        v326 = (uint64_t **)(v5 + 8);
        if (v325)
          *(_QWORD *)(v323 + 16) = v318 + 8;
        *((_QWORD *)v318 + 2) = v324;
        *v324 = v318;
        if (*((_QWORD *)v318 + 4))
        {
          **((_QWORD **)v318 + 6) = *((_QWORD *)v318 + 5);
          v748 = *((_QWORD *)v318 + 5);
          if (v748)
            *(_QWORD *)(v748 + 16) = *((_QWORD *)v318 + 6);
        }
        *((_QWORD *)v318 + 4) = v5;
        v327 = (_DWORD *)*((_QWORD *)v5 + 1);
        goto LABEL_583;
      }
    }
    if ((unsigned __int8 *)v286 == v4 && ((_DWORD)v832 == 37 || (_DWORD)v832 == 34))
    {
      v352 = (uint64_t)v231;
      if (!*((_QWORD *)v231 + 5))
      {
        if (!v287 || *(unsigned __int8 *)(v287 + 16) < 0x1Cu || (v352 = v287, !*(_QWORD *)(v287 + 40)))
          v352 = 0;
      }
      __src = v826;
      *(_QWORD *)&v838 = v825;
      *((_QWORD *)&v838 + 1) = v352;
      v839 = v827;
      LOBYTE(v840) = 1;
      v824 = v287;
      v353 = sub_1C4F84D74(v287, 0, (uint64_t)&__src);
      v287 = v824;
      if (v353)
      {
        v318 = (char *)operator new(0x80uLL);
        v3 = v318 + 64;
        *((_DWORD *)v318 + 21) = *((_DWORD *)v318 + 21) & 0x38000000 | 2;
        *(_QWORD *)v318 = 0;
        *((_QWORD *)v318 + 1) = 0;
        *((_QWORD *)v318 + 2) = 0;
        *((_QWORD *)v318 + 3) = v318 + 64;
        *((_QWORD *)v318 + 4) = 0;
        v319 = (uint64_t *)(v318 + 32);
        *((_QWORD *)v318 + 5) = 0;
        *((_QWORD *)v318 + 6) = 0;
        *((_QWORD *)v318 + 7) = v318 + 64;
        LOWORD(v320) = llvm::CmpInst::getFlippedStrictnessPredicate(v832);
        WORD4(v839) = 257;
        sub_1C4774CC4(*(_DWORD **)v4);
        *((_QWORD *)v318 + 8) = v354;
        *((_QWORD *)v318 + 9) = 0;
        v355 = *((_DWORD *)v318 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v318 + 20) = 81;
        *((_DWORD *)v318 + 21) = v355;
        *(_OWORD *)(v318 + 88) = 0u;
        *(_OWORD *)(v318 + 104) = 0u;
        *((_DWORD *)v318 + 30) = 0;
        if (*(_QWORD *)v318)
        {
          **((_QWORD **)v318 + 2) = *((_QWORD *)v318 + 1);
          v753 = *((_QWORD *)v318 + 1);
          if (v753)
            *(_QWORD *)(v753 + 16) = *((_QWORD *)v318 + 2);
        }
        *(_QWORD *)v318 = v4;
        v356 = (_DWORD *)*((_QWORD *)v4 + 1);
        *((_QWORD *)v318 + 1) = v356;
        if (v356)
          *((_QWORD *)v356 + 2) = v318 + 8;
        *((_QWORD *)v318 + 2) = v829;
        *v829 = v318;
        if (*((_QWORD *)v318 + 4))
        {
          **((_QWORD **)v318 + 6) = *((_QWORD *)v318 + 5);
          v754 = *((_QWORD *)v318 + 5);
          if (v754)
            *(_QWORD *)(v754 + 16) = *((_QWORD *)v318 + 6);
        }
        *v319 = v824;
        if (!v824)
          goto LABEL_586;
        v326 = (uint64_t **)(v824 + 8);
        v327 = *(_DWORD **)(v824 + 8);
LABEL_583:
        *((_QWORD *)v318 + 5) = v327;
        if (v327)
          *((_QWORD *)v327 + 2) = v318 + 40;
        *((_QWORD *)v318 + 6) = v326;
        *v326 = v319;
LABEL_586:
        *((_WORD *)v318 + 41) = v320;
        goto LABEL_359;
      }
    }
    if (v266)
      v334 = v287 == 0;
    else
      v334 = 1;
    v336 = v334 || v266 != v287 || !v103;
    if (((v336 | v816) & 1) == 0)
    {
      v134 = (char *)operator new(0x80uLL);
      v3 = v134 + 64;
      *((_DWORD *)v134 + 21) = *((_DWORD *)v134 + 21) & 0x38000000 | 2;
      *(_QWORD *)v134 = 0;
      *((_QWORD *)v134 + 1) = 0;
      *((_QWORD *)v134 + 2) = 0;
      *((_QWORD *)v134 + 3) = v134 + 64;
      *((_QWORD *)v134 + 4) = 0;
      v343 = v134 + 32;
      *((_QWORD *)v134 + 5) = 0;
      *((_QWORD *)v134 + 6) = 0;
      *((_QWORD *)v134 + 7) = v134 + 64;
      WORD4(v839) = 257;
      sub_1C4774CC4(*(_DWORD **)v265);
      *((_QWORD *)v134 + 8) = v344;
      *((_QWORD *)v134 + 9) = 0;
      v345 = *((_DWORD *)v134 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v134 + 20) = 81;
      *((_DWORD *)v134 + 21) = v345;
      *(_OWORD *)(v134 + 88) = 0u;
      *(_OWORD *)(v134 + 104) = 0u;
      *((_DWORD *)v134 + 30) = 0;
      if (*(_QWORD *)v134)
      {
        **((_QWORD **)v134 + 2) = *((_QWORD *)v134 + 1);
        v745 = *((_QWORD *)v134 + 1);
        if (v745)
          *(_QWORD *)(v745 + 16) = *((_QWORD *)v134 + 2);
      }
      *(_QWORD *)v134 = v265;
      v348 = (_DWORD *)*((_QWORD *)v265 + 1);
      v347 = v265 + 8;
      v346 = v348;
      *((_QWORD *)v134 + 1) = v348;
      if (v348)
        *((_QWORD *)v346 + 2) = v134 + 8;
      *((_QWORD *)v134 + 2) = v347;
      *v347 = v134;
      if (*((_QWORD *)v134 + 4))
      {
        **((_QWORD **)v134 + 6) = *((_QWORD *)v134 + 5);
        v746 = *((_QWORD *)v134 + 5);
        if (v746)
          *(_QWORD *)(v746 + 16) = *((_QWORD *)v134 + 6);
      }
      *v343 = v286;
      if (v286)
      {
        v351 = *(_QWORD *)(v286 + 8);
        v350 = (_QWORD *)(v286 + 8);
        v349 = v351;
        *((_QWORD *)v134 + 5) = v351;
        if (v351)
          *(_QWORD *)(v349 + 16) = v134 + 40;
        *((_QWORD *)v134 + 6) = v350;
        *v350 = v343;
      }
      goto LABEL_334;
    }
    if (v265)
      v337 = v286 == 0;
    else
      v337 = 1;
    v339 = v337 || v265 != (unsigned __int8 *)v286 || !v103;
    if (((v339 | v816) & 1) == 0)
    {
      v357 = v287;
      v134 = (char *)operator new(0x80uLL);
      v3 = v134 + 64;
      *((_DWORD *)v134 + 21) = *((_DWORD *)v134 + 21) & 0x38000000 | 2;
      *(_QWORD *)v134 = 0;
      *((_QWORD *)v134 + 1) = 0;
      *((_QWORD *)v134 + 2) = 0;
      *((_QWORD *)v134 + 3) = v134 + 64;
      *((_QWORD *)v134 + 4) = 0;
      v358 = (uint64_t *)(v134 + 32);
      *((_QWORD *)v134 + 5) = 0;
      *((_QWORD *)v134 + 6) = 0;
      *((_QWORD *)v134 + 7) = v134 + 64;
      WORD4(v839) = 257;
      sub_1C4774CC4(*(_DWORD **)v357);
      *((_QWORD *)v134 + 8) = v359;
      *((_QWORD *)v134 + 9) = 0;
      v360 = *((_DWORD *)v134 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v134 + 20) = 81;
      *((_DWORD *)v134 + 21) = v360;
      *(_OWORD *)(v134 + 88) = 0u;
      *(_OWORD *)(v134 + 104) = 0u;
      *((_DWORD *)v134 + 30) = 0;
      if (*(_QWORD *)v134)
      {
        **((_QWORD **)v134 + 2) = *((_QWORD *)v134 + 1);
        v749 = *((_QWORD *)v134 + 1);
        if (v749)
          *(_QWORD *)(v749 + 16) = *((_QWORD *)v134 + 2);
      }
      *(_QWORD *)v134 = v357;
      v363 = *(_QWORD *)(v357 + 8);
      v362 = (_QWORD *)(v357 + 8);
      v361 = v363;
      *((_QWORD *)v134 + 1) = v363;
      if (v363)
        *(_QWORD *)(v361 + 16) = v134 + 8;
      *((_QWORD *)v134 + 2) = v362;
      *v362 = v134;
      if (*((_QWORD *)v134 + 4))
      {
        **((_QWORD **)v134 + 6) = *((_QWORD *)v134 + 5);
        v750 = *((_QWORD *)v134 + 5);
        if (v750)
          *(_QWORD *)(v750 + 16) = *((_QWORD *)v134 + 6);
      }
      *v358 = v266;
      if (v266)
      {
        v366 = *(_QWORD *)(v266 + 8);
        v365 = (uint64_t **)(v266 + 8);
        v364 = v366;
        *((_QWORD *)v134 + 5) = v366;
        if (v366)
          *(_QWORD *)(v364 + 16) = v134 + 40;
        *((_QWORD *)v134 + 6) = v365;
        *v365 = v358;
      }
      goto LABEL_334;
    }
    if ((v832 - 38) < 4 && v103)
    {
      v860 = 0;
      *(_QWORD *)&v838 = &v860;
      v341 = *(unsigned __int8 *)(v267 + 16);
      if (v341 == 5)
      {
        if (*(_WORD *)(v267 + 18) != 15)
          goto LABEL_620;
        if (!sub_1C4E71060((uint64_t)&__src, *(llvm::Constant **)(v267 - 32 * (*(_DWORD *)(v267 + 20) & 0x7FFFFFF))))goto LABEL_620;
        v342 = *(_QWORD *)(v267 - 32 * (*(_DWORD *)(v267 + 20) & 0x7FFFFFF) + 32);
        if (!v342)
          goto LABEL_620;
      }
      else
      {
        if (v341 != 43)
          goto LABEL_620;
        if (!sub_1C4D8AC3C((uint64_t)&__src, *(llvm::Constant **)(v267 - 64)))
          goto LABEL_620;
        v342 = *(_QWORD *)(v267 - 32);
        if (!v342)
          goto LABEL_620;
      }
      *(_QWORD *)v838 = v342;
      if (v5[16] <= 0x14u && (llvm::Constant::isNotMinSignedValue((unint64_t)v5) & 1) != 0)
      {
        v385 = operator new(0x80uLL);
        v385[21] = v385[21] & 0x38000000 | 2;
        *(_QWORD *)v385 = 0;
        *((_QWORD *)v385 + 1) = 0;
        *((_QWORD *)v385 + 4) = 0;
        *((_QWORD *)v385 + 2) = 0;
        *((_QWORD *)v385 + 3) = v385 + 16;
        *((_QWORD *)v385 + 5) = 0;
        *((_QWORD *)v385 + 6) = 0;
        *((_QWORD *)v385 + 7) = v385 + 16;
        __asm { BR              X9 }
      }
    }
LABEL_620:
    v849 = 0;
    v847 = 0;
    __src = &v860;
    v838 = (unint64_t)&v847;
    v386 = v4[16];
    if (v386 == 5)
    {
      if (*((_WORD *)v4 + 9) != 17)
        goto LABEL_657;
      v387 = &v4[-32 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF)];
      if (!*(_QWORD *)v387)
        goto LABEL_657;
      v860 = *(void ***)v387;
      if (!sub_1C4D8A004((uint64_t)&v838, *((llvm::Constant **)v387 + 4)))
        goto LABEL_657;
    }
    else
    {
      if (v386 != 45)
        goto LABEL_657;
      if (!*((_QWORD *)v4 - 8))
        goto LABEL_657;
      v860 = (void **)*((_QWORD *)v4 - 8);
      if ((sub_1C4D89F84((uint64_t)&v838, *((unsigned __int8 **)v4 - 4)) & 1) == 0)
        goto LABEL_657;
    }
    v388 = v847;
    v389 = *((unsigned int *)v847 + 2);
    if (v389 >= 0x41)
    {
      if (v389 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v847) >= 0x41
        || *(_QWORD *)*v388)
      {
        v390 = (void *)operator new[]();
        memcpy(v390, *v388, ((unint64_t)(v389 + 63) >> 3) & 0x3FFFFFF8);
        v856 = (uint64_t)&v849;
        DWORD2(v857) = v389;
        *(_QWORD *)&v857 = operator new[]();
        memcpy((void *)v857, v390, (((unint64_t)DWORD2(v857) + 63) >> 3) & 0x3FFFFFF8);
LABEL_652:
        v406 = v5[16];
        if (v406 == 5)
        {
          if (*((_WORD *)v5 + 9) != 17)
            goto LABEL_726;
          v446 = *(_DWORD **)&v5[-32 * (*((_DWORD *)v5 + 5) & 0x7FFFFFF)];
          if (!v446)
            goto LABEL_726;
          *(_QWORD *)v856 = v446;
          if (!sub_1C4D8A86C((llvm::APInt *)&v857, *(llvm::Constant **)&v5[-32 * (*((_DWORD *)v5 + 5) & 0x7FFFFFF) + 32]))goto LABEL_726;
        }
        else if (v406 != 45
               || (v407 = *((_QWORD *)v5 - 8)) == 0
               || (*(_QWORD *)v856 = v407, !sub_1C4D8A7F0((llvm::APInt *)&v857, *((unsigned __int8 **)v5 - 4))))
        {
LABEL_726:
          v447 = 0;
          goto LABEL_727;
        }
        v447 = (*((_WORD *)v828 + 9) & 0x3E) == 32;
LABEL_727:
        if (DWORD2(v857) >= 0x41 && (_QWORD)v857)
          MEMORY[0x1CAA32F9C](v857, 0x1000C8000313F17);
        if (v389 >= 0x41)
          MEMORY[0x1CAA32F9C](v390, 0x1000C8000313F17);
        v408 = v267;
        if (v447)
        {
          v448 = *((_DWORD *)v847 + 2);
          if (v448 > 0x40)
          {
            v450 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v847);
          }
          else
          {
            v449 = __clz(__rbit64((unint64_t)*v847));
            if (v448 >= v449)
              v450 = v449;
            else
              v450 = *((_DWORD *)v847 + 2);
          }
          if (!v450)
          {
LABEL_832:
            v134 = (char *)operator new(0x80uLL);
            v3 = v134 + 64;
            *((_DWORD *)v134 + 21) = *((_DWORD *)v134 + 21) & 0x38000000 | 2;
            *(_QWORD *)v134 = 0;
            *((_QWORD *)v134 + 1) = 0;
            *((_QWORD *)v134 + 2) = 0;
            *((_QWORD *)v134 + 3) = v134 + 64;
            *((_QWORD *)v134 + 4) = 0;
            v188 = (uint64_t ***)(v134 + 32);
            *((_QWORD *)v134 + 5) = 0;
            *((_QWORD *)v134 + 6) = 0;
            *((_QWORD *)v134 + 7) = v134 + 64;
            v186 = (unsigned __int8 *)v860;
            v190 = v849;
LABEL_325:
            WORD4(v839) = 257;
            sub_1C4774CC4(*(_DWORD **)v186);
            *((_QWORD *)v134 + 8) = v191;
            *((_QWORD *)v134 + 9) = 0;
            v192 = *((_DWORD *)v134 + 21) & 0xC0000000 | 2;
            *((_DWORD *)v134 + 20) = 81;
            *((_DWORD *)v134 + 21) = v192;
            *(_OWORD *)(v134 + 88) = 0u;
            *(_OWORD *)(v134 + 104) = 0u;
            *((_DWORD *)v134 + 30) = 0;
            if (*(_QWORD *)v134)
            {
              **((_QWORD **)v134 + 2) = *((_QWORD *)v134 + 1);
              v700 = *((_QWORD *)v134 + 1);
              if (v700)
                *(_QWORD *)(v700 + 16) = *((_QWORD *)v134 + 2);
            }
            *(_QWORD *)v134 = v186;
            v195 = *((_QWORD *)v186 + 1);
            v194 = v186 + 8;
            v193 = v195;
            *((_QWORD *)v134 + 1) = v195;
            if (v195)
              *(_QWORD *)(v193 + 16) = v134 + 8;
            *((_QWORD *)v134 + 2) = v194;
            *v194 = v134;
            goto LABEL_329;
          }
          if (v267 && v11)
          {
            if (((*(_BYTE *)(v267 + 17) & 4) == 0 || (*(_BYTE *)(v11 + 17) & 4) == 0)
              && ((*(_BYTE *)(v267 + 17) & 2) == 0 || (*(_BYTE *)(v11 + 17) & 2) == 0))
            {
              v408 = v267;
LABEL_659:
              if (*(_BYTE *)(v408 + 16) == 51)
              {
                v409 = *(unsigned __int8 **)(v408 - 32);
                if (!v11 || v5 == v409)
                {
                  if (v5 != v409)
                    goto LABEL_669;
                  goto LABEL_668;
                }
LABEL_665:
                if (*(_BYTE *)(v11 + 16) != 51 || v4 != *(unsigned __int8 **)(v11 - 32))
                {
LABEL_669:
                  if (v408 && v11)
                  {
                    if (*(unsigned __int8 *)(v408 + 16) == *(unsigned __int8 *)(v11 + 16))
                    {
                      v410 = *(_QWORD *)(v408 + 8);
                      if (v410)
                      {
                        if (!*(_QWORD *)(v410 + 8))
                        {
                          v411 = *(_QWORD *)(v11 + 8);
                          if (v411)
                          {
                            if (!*(_QWORD *)(v411 + 8))
                            {
                              v16 = *(llvm::Type **)(v408 - 32);
                              if (v16 == *(llvm::Type **)(v11 - 32))
                              {
                                switch(*(_BYTE *)(v408 + 16))
                                {
                                  case ')':
                                  case '+':
                                  case ':':
                                    if ((*((_WORD *)v828 + 9) & 0x3E) == 0x20)
                                      goto LABEL_1008;
                                    v856 = 0;
                                    __src = &v856;
                                    *(_QWORD *)&v838 = 0;
                                    if (!sub_1C4D89F84((uint64_t)&__src, (unsigned __int8 *)v16))
                                      break;
                                    v412 = *(_DWORD *)(v856 + 8);
                                    if (v412 > 0x40)
                                    {
                                      v735 = v412 - 1;
                                      if (((*(_QWORD *)(*(_QWORD *)v856 + 8 * ((v412 - 1) >> 6)) >> (v412 - 1)) & 1) != 0)
                                      {
                                        if (llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v856) == v735)
                                        {
LABEL_682:
                                          FlippedSignednessPredicate = llvm::CmpInst::getFlippedSignednessPredicate(*((_WORD *)v828 + 9) & 0x3F);
                                          v415 = (char *)operator new(0x80uLL);
                                          v3 = v415 + 64;
                                          *((_DWORD *)v415 + 21) = *((_DWORD *)v415 + 21) & 0x38000000 | 2;
                                          *(_QWORD *)v415 = 0;
                                          *((_QWORD *)v415 + 1) = 0;
                                          *((_QWORD *)v415 + 2) = 0;
                                          *((_QWORD *)v415 + 3) = v415 + 64;
                                          *((_QWORD *)v415 + 4) = 0;
                                          v416 = v415 + 32;
                                          *((_QWORD *)v415 + 5) = 0;
                                          *((_QWORD *)v415 + 6) = 0;
                                          *((_QWORD *)v415 + 7) = v415 + 64;
                                          v417 = *(_QWORD *)(v408 - 64);
                                          v418 = *(_QWORD *)(v11 - 64);
                                          WORD4(v839) = 257;
                                          sub_1C4774CC4(*(_DWORD **)v417);
                                          *((_QWORD *)v415 + 8) = v419;
                                          *((_QWORD *)v415 + 9) = 0;
                                          v420 = *((_DWORD *)v415 + 21) & 0xC0000000 | 2;
                                          *((_DWORD *)v415 + 20) = 81;
                                          *((_DWORD *)v415 + 21) = v420;
                                          *(_OWORD *)(v415 + 88) = 0u;
                                          *(_OWORD *)(v415 + 104) = 0u;
                                          *((_DWORD *)v415 + 30) = 0;
                                          if (*(_QWORD *)v415)
                                          {
                                            **((_QWORD **)v415 + 2) = *((_QWORD *)v415 + 1);
                                            v799 = *((_QWORD *)v415 + 1);
                                            if (v799)
                                              *(_QWORD *)(v799 + 16) = *((_QWORD *)v415 + 2);
                                          }
                                          *(_QWORD *)v415 = v417;
                                          v423 = *(_QWORD *)(v417 + 8);
                                          v422 = (_QWORD *)(v417 + 8);
                                          v421 = v423;
                                          *((_QWORD *)v415 + 1) = v423;
                                          if (v423)
                                            *(_QWORD *)(v421 + 16) = v415 + 8;
                                          *((_QWORD *)v415 + 2) = v422;
                                          *v422 = v415;
                                          if (*((_QWORD *)v415 + 4))
                                          {
                                            **((_QWORD **)v415 + 6) = *((_QWORD *)v415 + 5);
                                            v800 = *((_QWORD *)v415 + 5);
                                            if (v800)
                                              *(_QWORD *)(v800 + 16) = *((_QWORD *)v415 + 6);
                                          }
                                          *v416 = v418;
                                          if (v418)
                                          {
                                            v426 = *(_QWORD *)(v418 + 8);
                                            v425 = (_QWORD *)(v418 + 8);
                                            v424 = v426;
                                            *((_QWORD *)v415 + 5) = v426;
                                            if (v426)
                                              *(_QWORD *)(v424 + 16) = v415 + 40;
                                            *((_QWORD *)v415 + 6) = v425;
                                            *v425 = v416;
                                          }
                                          *((_WORD *)v415 + 41) = FlippedSignednessPredicate;
                                          goto LABEL_359;
                                        }
                                      }
                                      else if (*(_BYTE *)(v408 + 16) == 58
                                             && llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v856) == v735)
                                      {
                                        goto LABEL_1035;
                                      }
                                    }
                                    else
                                    {
                                      v413 = v412 - 1;
                                      if (*(_QWORD *)v856 == 1 << v413)
                                        goto LABEL_682;
                                      if (*(_BYTE *)(v408 + 16) == 58 && *(_QWORD *)v856 == ~(-1 << v413))
                                      {
LABEL_1035:
                                        v320 = dword_1C86618B4[(int)llvm::CmpInst::getFlippedSignednessPredicate(*((_WORD *)v828 + 9) & 0x3F)];
                                        v318 = (char *)operator new(0x80uLL);
                                        v3 = v318 + 64;
                                        *((_DWORD *)v318 + 21) = *((_DWORD *)v318 + 21) & 0x38000000 | 2;
                                        *(_QWORD *)v318 = 0;
                                        *((_QWORD *)v318 + 1) = 0;
                                        *((_QWORD *)v318 + 2) = 0;
                                        *((_QWORD *)v318 + 3) = v318 + 64;
                                        *((_QWORD *)v318 + 4) = 0;
                                        v633 = v318 + 32;
                                        *((_QWORD *)v318 + 5) = 0;
                                        *((_QWORD *)v318 + 6) = 0;
                                        *((_QWORD *)v318 + 7) = v318 + 64;
                                        v634 = *(_QWORD *)(v408 - 64);
                                        v635 = *(_QWORD *)(v11 - 64);
                                        WORD4(v839) = 257;
                                        sub_1C4774CC4(*(_DWORD **)v634);
                                        *((_QWORD *)v318 + 8) = v636;
                                        *((_QWORD *)v318 + 9) = 0;
                                        v637 = *((_DWORD *)v318 + 21) & 0xC0000000 | 2;
                                        *((_DWORD *)v318 + 20) = 81;
                                        *((_DWORD *)v318 + 21) = v637;
                                        *(_OWORD *)(v318 + 88) = 0u;
                                        *(_OWORD *)(v318 + 104) = 0u;
                                        *((_DWORD *)v318 + 30) = 0;
                                        if (*(_QWORD *)v318)
                                        {
                                          **((_QWORD **)v318 + 2) = *((_QWORD *)v318 + 1);
                                          v801 = *((_QWORD *)v318 + 1);
                                          if (v801)
                                            *(_QWORD *)(v801 + 16) = *((_QWORD *)v318 + 2);
                                        }
                                        *(_QWORD *)v318 = v634;
                                        v640 = *(_QWORD *)(v634 + 8);
                                        v639 = (_QWORD *)(v634 + 8);
                                        v638 = v640;
                                        *((_QWORD *)v318 + 1) = v640;
                                        if (v640)
                                          *(_QWORD *)(v638 + 16) = v318 + 8;
                                        *((_QWORD *)v318 + 2) = v639;
                                        *v639 = v318;
                                        if (*((_QWORD *)v318 + 4))
                                        {
                                          **((_QWORD **)v318 + 6) = *((_QWORD *)v318 + 5);
                                          v802 = *((_QWORD *)v318 + 5);
                                          if (v802)
                                            *(_QWORD *)(v802 + 16) = *((_QWORD *)v318 + 6);
                                        }
                                        *v633 = v635;
                                        if (v635)
                                        {
                                          v643 = *(_QWORD *)(v635 + 8);
                                          v642 = (_QWORD *)(v635 + 8);
                                          v641 = v643;
                                          *((_QWORD *)v318 + 5) = v643;
                                          if (v643)
                                            *(_QWORD *)(v641 + 16) = v318 + 40;
                                          *((_QWORD *)v318 + 6) = v642;
                                          *v642 = v633;
                                        }
                                        goto LABEL_586;
                                      }
                                    }
                                    break;
                                  case '-':
                                    if ((*((_WORD *)v828 + 9) & 0x3E) != 0x20)
                                      break;
                                    v856 = 0;
                                    __src = &v856;
                                    *(_QWORD *)&v838 = 0;
                                    if (!sub_1C4D89F84((uint64_t)&__src, (unsigned __int8 *)v16))
                                      break;
                                    v625 = v856;
                                    v626 = *(_DWORD *)(v856 + 8);
                                    if (v626 > 0x40)
                                    {
                                      v644 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v856);
                                      if (v644 == v626 || v644 == v626 - 1)
                                        break;
                                    }
                                    else if (*(_QWORD *)v856 < 2uLL)
                                    {
                                      break;
                                    }
                                    v645 = *(_DWORD *)(v625 + 8);
                                    if (v645 > 0x40)
                                    {
                                      v653 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v625);
                                      if (v653)
                                      {
                                        v647 = v653;
                                        v648 = *(llvm::Constant **)v408;
                                        LODWORD(v838) = v645;
                                        llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
LABEL_1068:
                                        sub_1C4912E54(&__src, 0, v645 - v647);
                                        v655 = llvm::ConstantInt::get((llvm::ConstantInt **)v648, (llvm::Type *)&__src, v654);
                                        if (v838 >= 0x41 && __src)
                                          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
                                        v656 = *(_QWORD *)(v819 + 24);
                                        v657 = *(_QWORD **)(v408 - 64);
                                        WORD4(v839) = 257;
                                        v256 = sub_1C4D89BCC(v656, v657, (uint64_t)v655, (uint64_t)&__src);
                                        v658 = *(_QWORD *)(v819 + 24);
                                        v659 = *(_QWORD **)(v11 - 64);
                                        WORD4(v839) = 257;
                                        v246 = sub_1C4D89BCC(v658, v659, (uint64_t)v655, (uint64_t)&__src);
                                        v118 = (char *)operator new(0x80uLL);
                                        v3 = v118 + 64;
                                        *((_DWORD *)v118 + 21) = *((_DWORD *)v118 + 21) & 0x38000000 | 2;
                                        *(_QWORD *)v118 = 0;
                                        *((_QWORD *)v118 + 1) = 0;
                                        *((_QWORD *)v118 + 4) = 0;
                                        v255 = (uint64_t *)(v118 + 32);
                                        *((_QWORD *)v118 + 2) = 0;
                                        *((_QWORD *)v118 + 3) = v118 + 64;
                                        *((_QWORD *)v118 + 5) = 0;
                                        *((_QWORD *)v118 + 6) = 0;
                                        *((_QWORD *)v118 + 7) = v118 + 64;
                                        WORD4(v839) = 257;
                                        goto LABEL_428;
                                      }
                                    }
                                    else
                                    {
                                      v646 = __clz(__rbit64(*(_QWORD *)v625));
                                      if (v645 >= v646)
                                        v647 = v646;
                                      else
                                        v647 = *(_DWORD *)(v625 + 8);
                                      if (v647)
                                      {
                                        v648 = *(llvm::Constant **)v408;
                                        LODWORD(v838) = v645;
                                        __src = 0;
                                        goto LABEL_1068;
                                      }
                                    }
                                    break;
                                  case '/':
                                  case '6':
                                    if ((*((_WORD *)v828 + 9) & 0x3Eu) - 38 >= 4)
                                      goto LABEL_1006;
                                    break;
                                  case '0':
                                    if ((*((_WORD *)v828 + 9) & 0x3E) == 0x20)
                                      goto LABEL_1006;
                                    break;
                                  case '5':
                                    if ((*(_BYTE *)(v408 + 17) & 2) != 0)
                                    {
                                      v628 = *(unsigned __int8 *)(v11 + 17);
                                      if ((*(_BYTE *)(v408 + 17) & 4) == 0)
                                      {
                                        if ((v628 & 2) == 0)
                                          break;
LABEL_1047:
                                        if ((*((_WORD *)v828 + 9) & 0x3Eu) - 38 < 4)
                                          break;
LABEL_1008:
                                        v134 = (char *)operator new(0x80uLL);
                                        v3 = v134 + 64;
                                        *((_DWORD *)v134 + 21) = *((_DWORD *)v134 + 21) & 0x38000000 | 2;
                                        *(_QWORD *)v134 = 0;
                                        *((_QWORD *)v134 + 1) = 0;
                                        *((_QWORD *)v134 + 2) = 0;
                                        *((_QWORD *)v134 + 3) = v134 + 64;
                                        *((_QWORD *)v134 + 4) = 0;
                                        v188 = (uint64_t ***)(v134 + 32);
                                        *((_QWORD *)v134 + 5) = 0;
                                        *((_QWORD *)v134 + 6) = 0;
                                        *((_QWORD *)v134 + 7) = v134 + 64;
                                        v619 = *(_QWORD *)(v408 - 64);
                                        v190 = *(uint64_t ***)(v11 - 64);
                                        WORD4(v839) = 257;
                                        sub_1C4774CC4(*(_DWORD **)v619);
                                        *((_QWORD *)v134 + 8) = v620;
                                        *((_QWORD *)v134 + 9) = 0;
                                        v621 = *((_DWORD *)v134 + 21) & 0xC0000000 | 2;
                                        *((_DWORD *)v134 + 20) = 81;
                                        *((_DWORD *)v134 + 21) = v621;
                                        *(_OWORD *)(v134 + 88) = 0u;
                                        *(_OWORD *)(v134 + 104) = 0u;
                                        *((_DWORD *)v134 + 30) = 0;
                                        if (*(_QWORD *)v134)
                                        {
                                          **((_QWORD **)v134 + 2) = *((_QWORD *)v134 + 1);
                                          v766 = *((_QWORD *)v134 + 1);
                                          if (v766)
                                            *(_QWORD *)(v766 + 16) = *((_QWORD *)v134 + 2);
                                        }
                                        *(_QWORD *)v134 = v619;
                                        v624 = *(_QWORD *)(v619 + 8);
                                        v623 = (_QWORD *)(v619 + 8);
                                        v622 = v624;
                                        *((_QWORD *)v134 + 1) = v624;
                                        if (v624)
                                          *(_QWORD *)(v622 + 16) = v134 + 8;
                                        *((_QWORD *)v134 + 2) = v623;
                                        *v623 = v134;
                                        goto LABEL_329;
                                      }
                                      v627 = (v628 >> 1) & 1;
                                    }
                                    else
                                    {
                                      if ((*(_BYTE *)(v408 + 17) & 4) == 0)
                                        break;
                                      LOBYTE(v627) = 0;
                                      LOBYTE(v628) = *(_BYTE *)(v11 + 17);
                                    }
                                    if ((v627 & 1) != 0 || (v628 & 4) != 0)
                                    {
                                      if ((v628 & 4) != 0)
                                        goto LABEL_1008;
                                      goto LABEL_1047;
                                    }
                                    break;
                                  case '7':
LABEL_1006:
                                    if ((*(_BYTE *)(v408 + 17) & 2) != 0 && (*(_BYTE *)(v11 + 17) & 2) != 0)
                                      goto LABEL_1008;
                                    break;
                                  default:
                                    break;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
LABEL_692:
                    *(_QWORD *)&v857 = v5;
                    v427 = *(unsigned __int8 *)(v408 + 16);
                    if (v427 == 5)
                    {
                      if (*(_WORD *)(v408 + 18) != 28)
                        goto LABEL_763;
                      v430 = *(_QWORD *)(v408 - 32 * (*(_DWORD *)(v408 + 20) & 0x7FFFFFF) + 32);
                      v431 = *(unsigned __int8 *)(v430 + 16);
                      if (v431 == 5)
                      {
                        if (*(_WORD *)(v430 + 18) == 13)
                        {
                          v451 = v430 - 32 * (*(_DWORD *)(v430 + 20) & 0x7FFFFFF);
                          if (v5 == *(unsigned __int8 **)v451
                            && (sub_1C4D9EED4((uint64_t)&v857 + 8, *(llvm::Constant **)(v451 + 32)) & 1) != 0)
                          {
                            goto LABEL_744;
                          }
                        }
                      }
                      else if (v431 == 41
                             && v5 == *(unsigned __int8 **)(v430 - 64)
                             && (sub_1C4D9ED34((uint64_t)&v857 + 8, *(llvm::Constant **)(v430 - 32)) & 1) != 0)
                      {
                        goto LABEL_744;
                      }
                      LOBYTE(v429) = v408;
                      v445 = *(_QWORD *)(v408 - 32 * (*(_DWORD *)(v408 + 20) & 0x7FFFFFF));
                    }
                    else
                    {
                      if (v427 != 56)
                        goto LABEL_763;
                      v428 = *(_QWORD *)(v408 - 32);
                      LODWORD(v429) = *(unsigned __int8 *)(v428 + 16);
                      if ((_DWORD)v429 == 5)
                      {
                        LODWORD(v429) = *(unsigned __int16 *)(v428 + 18);
                        if ((_DWORD)v429 == 13)
                        {
                          v444 = v428 - 32 * (*(_DWORD *)(v428 + 20) & 0x7FFFFFF);
                          v429 = *(unsigned __int8 **)v444;
                          if (v5 == *(unsigned __int8 **)v444
                            && (sub_1C4D9EED4((uint64_t)&v857 + 8, *(llvm::Constant **)(v444 + 32)) & 1) != 0)
                          {
                            goto LABEL_744;
                          }
                        }
                      }
                      else if ((_DWORD)v429 == 41)
                      {
                        v429 = *(unsigned __int8 **)(v428 - 64);
                        if (v5 == v429 && (sub_1C4D9ED34((uint64_t)&v857 + 8, *(llvm::Constant **)(v428 - 32)) & 1) != 0)
                          goto LABEL_744;
                      }
                      v445 = *(_QWORD *)(v408 - 64);
                    }
                    v452 = *(unsigned __int8 *)(v445 + 16);
                    if (v452 != 41)
                    {
                      if (v452 == 5)
                        LOBYTE(v429) = *(_WORD *)(v445 + 18) == 13
                                    && (v454 = v445 - 32 * (*(_DWORD *)(v445 + 20) & 0x7FFFFFF),
                                        (_QWORD)v857 == *(_QWORD *)v454)
                                    && (sub_1C4D9EED4((uint64_t)&v857 + 8, *(llvm::Constant **)(v454 + 32)) & 1) != 0;
                      v453 = (v452 == 5) & v429;
LABEL_752:
                      if (v453 && (_DWORD)v832 == 36)
                      {
                        v455 = llvm::Constant::getNullValue(*(llvm::Constant **)v408, v16);
                        v71 = (char *)operator new(0x80uLL);
                        v3 = v71 + 64;
                        *((_DWORD *)v71 + 21) = *((_DWORD *)v71 + 21) & 0x38000000 | 2;
                        *(_QWORD *)v71 = 0;
                        *((_QWORD *)v71 + 1) = 0;
                        *((_QWORD *)v71 + 2) = 0;
                        *((_QWORD *)v71 + 3) = v71 + 64;
                        *((_QWORD *)v71 + 4) = 0;
                        v456 = (llvm::Value ***)(v71 + 32);
                        *((_QWORD *)v71 + 5) = 0;
                        *((_QWORD *)v71 + 6) = 0;
                        *((_QWORD *)v71 + 7) = v71 + 64;
                        WORD4(v839) = 257;
                        sub_1C4774CC4(*(_DWORD **)v5);
                        *((_QWORD *)v71 + 8) = v457;
                        *((_QWORD *)v71 + 9) = 0;
                        v458 = *((_DWORD *)v71 + 21) & 0xC0000000 | 2;
                        *((_DWORD *)v71 + 20) = 81;
                        *((_DWORD *)v71 + 21) = v458;
                        *(_OWORD *)(v71 + 88) = 0u;
                        *(_OWORD *)(v71 + 104) = 0u;
                        *((_DWORD *)v71 + 30) = 0;
                        if (*(_QWORD *)v71)
                        {
                          **((_QWORD **)v71 + 2) = *((_QWORD *)v71 + 1);
                          v759 = *((_QWORD *)v71 + 1);
                          if (v759)
                            *(_QWORD *)(v759 + 16) = *((_QWORD *)v71 + 2);
                        }
                        *(_QWORD *)v71 = v5;
                        v459 = (_DWORD *)*((_QWORD *)v5 + 1);
                        *((_QWORD *)v71 + 1) = v459;
                        if (v459)
                          *((_QWORD *)v459 + 2) = v71 + 8;
                        *((_QWORD *)v71 + 2) = v830;
                        *v830 = v71;
                        if (*((_QWORD *)v71 + 4))
                        {
                          **((_QWORD **)v71 + 6) = *((_QWORD *)v71 + 5);
                          v760 = *((_QWORD *)v71 + 5);
                          if (v760)
                            *(_QWORD *)(v760 + 16) = *((_QWORD *)v71 + 6);
                        }
                        *v456 = v455;
                        if (v455)
                        {
                          v462 = v455[1];
                          v461 = (llvm::Value ****)(v455 + 1);
                          v460 = v462;
                          *((_QWORD *)v71 + 5) = v462;
                          if (v462)
                            *((_QWORD *)v460 + 2) = v71 + 40;
                          *((_QWORD *)v71 + 6) = v461;
                          *v461 = v456;
                        }
                        v102 = 33;
                        goto LABEL_178;
                      }
LABEL_763:
                      LODWORD(v854) = 0;
                      v849 = 0;
                      v847 = 0;
                      v845 = 0;
                      v855 = 0;
                      v463 = *((_WORD *)v828 + 9);
                      if ((v463 & 0x3E) != 0x20)
                      {
                        __src = &v854;
                        *((_QWORD *)&v838 + 1) = &v849;
                        *(_QWORD *)&v839 = &v855;
                        *((_QWORD *)&v839 + 1) = &v847;
                        v464 = sub_1C5819DE4((uint64_t)&v838, *((_QWORD *)v828 - 8));
                        v465 = *((_QWORD *)v828 - 4);
                        if (v464 && v465)
                        {
                          **((_QWORD **)&v839 + 1) = v465;
                          v466 = *((_WORD *)v828 + 9) & 0x3F;
                          goto LABEL_770;
                        }
                        if (sub_1C5819DE4((uint64_t)&v838, v465))
                        {
                          v467 = *((_QWORD *)v828 - 8);
                          if (v467)
                          {
                            **((_QWORD **)&v839 + 1) = v467;
                            v466 = dword_1C86618B4[*((_WORD *)v828 + 9) & 0x3F];
LABEL_770:
                            *(_DWORD *)__src = v466;
                            v845 = 0;
                            if ((_DWORD)v854 == 36)
                            {
                              v468 = 0;
                            }
                            else
                            {
                              if ((_DWORD)v854 != 35)
                                goto LABEL_849;
                              v468 = 1;
                            }
                            goto LABEL_783;
                          }
                        }
                        v463 = *((_WORD *)v828 + 9);
                      }
                      if ((v463 & 0x3E) != 0x20)
                        goto LABEL_849;
                      __src = &v854;
                      *(_QWORD *)&v838 = &v847;
                      *((_QWORD *)&v838 + 1) = &v847;
                      *(_QWORD *)&v839 = &v849;
                      *((_QWORD *)&v839 + 1) = &v845;
                      v840 = &v849;
                      v841 = &v855;
                      if (*((_QWORD *)v828 - 8)
                        && (v847 = (const void **)*((_QWORD *)v828 - 8),
                            sub_1C5819EA8((uint64_t **)&v838 + 1, *((_QWORD *)v828 - 4))))
                      {
                        v469 = *((_WORD *)v828 + 9) & 0x3F;
                      }
                      else
                      {
                        if (!*((_QWORD *)v828 - 4))
                          goto LABEL_849;
                        v847 = (const void **)*((_QWORD *)v828 - 4);
                        if (!sub_1C5819EA8((uint64_t **)&v838 + 1, *((_QWORD *)v828 - 8)))
                          goto LABEL_849;
                        v469 = dword_1C86618B4[*((_WORD *)v828 + 9) & 0x3F];
                      }
                      LODWORD(v854) = v469;
                      v468 = v469 == 32;
LABEL_783:
                      v856 = *(_QWORD *)(v819 + 24);
                      v857 = *(_OWORD *)(v856 + 48);
                      llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)v856, &v858);
                      v470 = v845;
                      if (v845 && ((v471 = v845[1]) == 0 || v471[1]))
                      {
                        v472 = *(_QWORD *)(v819 + 24);
                        *(_QWORD *)(v472 + 48) = v845[5];
                        *(_QWORD *)(v472 + 56) = v470 + 3;
                        v473 = (void *)v470[6];
                        __src = v473;
                        if (v473)
                        {
                          llvm::MetadataTracking::track((uint64_t)&__src, (unsigned __int8 *)v473, 2);
                          v474 = __src;
                        }
                        else
                        {
                          v474 = 0;
                        }
                        sub_1C4774EF4(v472, 0, (uint64_t)v474);
                        if (__src)
                          llvm::MetadataTracking::untrack((uint64_t)&__src, (unsigned __int8 *)__src);
                        v475 = 1;
                      }
                      else
                      {
                        v475 = 0;
                      }
                      v476 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)v828 + 5) + 56) + 40);
                      if (*((_BYTE *)v855 + 16) == 47)
                        v477 = 309;
                      else
                        v477 = 278;
                      __src = *v849;
                      Declaration = llvm::Intrinsic::getDeclaration(v476, v477, (uint64_t *)&__src, 1);
                      v479 = *(uint64_t **)(v819 + 24);
                      if (Declaration)
                        v480 = *(uint64_t ***)(Declaration + 24);
                      else
                        v480 = 0;
                      v860 = (void **)v849;
                      v861 = v847;
                      __src = "mul";
                      WORD4(v839) = 259;
                      v481 = (uint64_t *)sub_1C4774778(v479, v480, Declaration, (uint64_t *)&v860, 2, (uint64_t)&__src, 0);
                      if (v475)
                      {
                        v482 = (llvm::ValueAsMetadata *)v845;
                        v483 = *(_QWORD *)(v819 + 24);
                        LODWORD(v860) = 0;
                        __src = "mul.val";
                        WORD4(v839) = 259;
                        v484 = (llvm::Value *)sub_1C506DBC4(v483, v481, (unsigned int *)&v860, 1, (uint64_t)&__src);
                        sub_1C577F888(v819, v482, v484);
                      }
                      v485 = *(_QWORD *)(v819 + 24);
                      LODWORD(v860) = 1;
                      __src = "mul.ov";
                      WORD4(v839) = 259;
                      v486 = sub_1C506DBC4(v485, v481, (unsigned int *)&v860, 1, (uint64_t)&__src);
                      if (v468)
                      {
                        v487 = *(_QWORD *)(v819 + 24);
                        __src = "mul.not.ov";
                        WORD4(v839) = 259;
                        v486 = sub_1C506EAA0(v487, v486, (uint64_t)&__src);
                      }
                      if (v475)
                        sub_1C57813F4(v819, (uint64_t)v845);
                      v488 = (unsigned int *)v856;
                      if ((_QWORD)v857)
                      {
                        sub_1C4D8AE2C(v856, v857, *((uint64_t *)&v857 + 1));
                        v488 = (unsigned int *)v856;
                      }
                      else
                      {
                        *(_QWORD *)(v856 + 48) = 0;
                        *((_QWORD *)v488 + 7) = 0;
                      }
                      __src = v858;
                      if (v858)
                      {
                        llvm::MetadataTracking::track((uint64_t)&__src, v858, 2);
                        v489 = __src;
                      }
                      else
                      {
                        v489 = 0;
                      }
                      sub_1C4774EF4((uint64_t)v488, 0, (uint64_t)v489);
                      if (__src)
                        llvm::MetadataTracking::untrack((uint64_t)&__src, (unsigned __int8 *)__src);
                      if (v858)
                      {
                        llvm::MetadataTracking::untrack((uint64_t)&v858, v858);
                        if (v486)
                          goto LABEL_813;
                      }
                      else if (v486)
                      {
LABEL_813:
                        v490 = v819;
                        v491 = v828;
                        v492 = (llvm::Value *)v486;
                        return sub_1C577F888(v490, v491, v492);
                      }
LABEL_849:
                      LODWORD(v847) = 0;
                      v856 = 0;
                      v860 = 0;
                      v849 = 0;
                      __src = &v847;
                      WORD2(v838) = 0;
                      LODWORD(v838) = 0;
                      *((_QWORD *)&v839 + 1) = &v849;
                      v840 = &v849;
                      v842 = &v860;
                      v843 = &v856;
                      v844 = &v856;
                      v517 = sub_1C5818C58((uint64_t)&v838, *((_QWORD *)v828 - 8), (uint64_t)&v860);
                      v519 = *((_QWORD *)v828 - 4);
                      if (v517)
                      {
                        v518 = *v844;
                        if (*v844 == v519)
                        {
                          v548 = *((_WORD *)v828 + 9) & 0x3F;
LABEL_1291:
                          *(_DWORD *)__src = v548;
                          __asm { BR              X10 }
                        }
                      }
                      if (sub_1C5818C58((uint64_t)&v838, v519, v518) && *v844 == *((_QWORD *)v828 - 8))
                      {
                        v548 = dword_1C86618B4[*((_WORD *)v828 + 9) & 0x3F];
                        goto LABEL_1291;
                      }
                      v520 = *(_QWORD *)(v819 + 24);
                      LODWORD(v852) = 0;
                      v854 = 0;
                      v855 = 0;
                      v853 = 0;
                      __src = &v852;
                      *(_QWORD *)&v838 = &v855;
                      *((_QWORD *)&v838 + 1) = &v854;
                      *(_QWORD *)&v839 = 0;
                      *((_QWORD *)&v839 + 1) = &v853;
                      v840 = 0;
                      v841 = &v855;
                      v521 = *((_QWORD *)v828 - 8);
                      v522 = *(_QWORD *)(v521 + 8);
                      if (v522
                        && !*(_QWORD *)(v522 + 8)
                        && sub_1C57A16F4((_QWORD **)&v838, 27, v521)
                        && *v841 == *((const void ***)v828 - 4))
                      {
                        v530 = *((_WORD *)v828 + 9) & 0x3F;
                      }
                      else
                      {
                        v523 = *((_QWORD *)v828 - 4);
                        v524 = *(_QWORD *)(v523 + 8);
                        if (!v524
                          || *(_QWORD *)(v524 + 8)
                          || !sub_1C57A16F4((_QWORD **)&v838, 27, v523)
                          || *v841 != *((const void ***)v828 - 8))
                        {
                          goto LABEL_857;
                        }
                        v530 = dword_1C86618B4[*((_WORD *)v828 + 9) & 0x3F];
                      }
                      *(_DWORD *)__src = v530;
                      v553 = v854;
                      v554 = *((unsigned int *)v854 + 2);
                      if (v554 > 0x40)
                      {
                        if (memcmp(*(const void **)v854, *v853, ((unint64_t)(v554 + 63) >> 3) & 0x3FFFFFF8))
                          goto LABEL_857;
                      }
                      else if (*(const void **)v854 != *v853)
                      {
                        goto LABEL_857;
                      }
                      if ((_DWORD)v852 == 32)
                      {
                        v765 = 36;
                      }
                      else
                      {
                        if ((_DWORD)v852 != 33)
                          goto LABEL_857;
                        v765 = 35;
                      }
                      v767 = (void *)*v855;
                      v768 = (llvm::Type *)*v855;
                      if ((*((_DWORD *)*v855 + 2) & 0xFE) == 0x12)
                        v768 = (llvm::Type *)**((_QWORD **)v767 + 2);
                      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v768);
                      v770 = PrimitiveSizeInBits;
                      v771 = PrimitiveSizeInBits;
                      LODWORD(v861) = PrimitiveSizeInBits;
                      if (PrimitiveSizeInBits > 0x40)
                      {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v860, PrimitiveSizeInBits, 0);
                        v774 = v861;
                        if (v861 > 0x40)
                        {
                          v804 = v861 + 63;
                          v777 = (void *)operator new[]();
                          memcpy(v777, v860, (v804 >> 3) & 0x3FFFFFF8);
                          v805 = 0;
                          v806 = *(unint64_t **)v553;
                          v807 = (unint64_t *)v777;
                          v808 = v804 >> 6;
                          do
                          {
                            v809 = *v806++;
                            v810 = *v807 - v809;
                            v811 = *v807 < v809;
                            v812 = *v807 + ~v809;
                            if (v805)
                            {
                              v805 = v812 >= *v807;
                            }
                            else
                            {
                              v812 = v810;
                              v805 = v811;
                            }
                            *v807++ = v812;
                            --v808;
                          }
                          while (v808);
                          *((_QWORD *)v777 + (v804 >> 6) - 1) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v774;
                          goto LABEL_1330;
                        }
                        v773 = v860;
                      }
                      else
                      {
                        v772 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
                        if (!PrimitiveSizeInBits)
                          LODWORD(v772) = 0;
                        v773 = (void **)(v772 & PrimitiveSizeInBits);
                        v860 = v773;
                        v774 = PrimitiveSizeInBits;
                      }
                      v775 = (unint64_t)v773 - *(_QWORD *)v553;
                      v776 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v774;
                      if (!v774)
                        v776 = 0;
                      v777 = (void *)(v776 & v775);
LABEL_1330:
                      v850 = v774;
                      v849 = (uint64_t **)v777;
                      LODWORD(v838) = v771;
                      if (v771 > 0x40)
                      {
                        llvm::APInt::initSlowCase((llvm::APInt *)&__src, 1, 0);
                        v771 = v838;
                        v848 = v838;
                        if (v838 > 0x40)
                        {
                          v847 = (const void **)operator new[]();
                          v779 = (const void **)__src;
                          v780 = v848;
                          memcpy(v847, __src, (((unint64_t)v848 + 63) >> 3) & 0x3FFFFFF8);
                          goto LABEL_1335;
                        }
                        v779 = (const void **)__src;
                      }
                      else
                      {
                        if (v771)
                          v778 = 0xFFFFFFFFFFFFFFFFLL >> -v770;
                        else
                          LOBYTE(v778) = 0;
                        v779 = (const void **)(v778 & 1);
                        v848 = v771;
                      }
                      v847 = v779;
                      v780 = v771;
LABEL_1335:
                      v781 = sub_1C47EE5B8(&v849, v780);
                      sub_1C4888094((uint64_t)&v847, v781);
                      if (v771 >= 0x41 && v779)
                        MEMORY[0x1CAA32F9C](v779, 0x1000C8000313F17);
                      LODWORD(v783) = v848;
                      v846 = v848;
                      if (v848 > 0x40)
                      {
                        v784 = operator new[]();
                        v845 = (const void **)v784;
                        v783 = v846;
                        memcpy((void *)v784, v847, (((unint64_t)v846 + 63) >> 3) & 0x3FFFFFF8);
                        if (v783 > 0x40)
                        {
                          llvm::APInt::tcShiftRight((llvm::APInt *)v784, (unint64_t *)((unint64_t)(v783 + 63) >> 6), 1u);
                          goto LABEL_1342;
                        }
                      }
                      else
                      {
                        v784 = (unint64_t)v847;
                      }
                      if ((_DWORD)v783 == 1)
                        v845 = 0;
                      else
                        v845 = (const void **)(v784 >> 1);
LABEL_1342:
                      v785 = v855;
                      v786 = llvm::ConstantInt::get((llvm::ConstantInt **)v767, (llvm::Type *)&v845, v782);
                      v859 = 257;
                      v788 = (*(uint64_t (**)(_QWORD, const void **, llvm::Value **, _QWORD, _QWORD))(**(_QWORD **)(v520 + 72) + 16))(*(_QWORD *)(v520 + 72), v785, v786, 0, 0);
                      if (!v788)
                      {
                        WORD4(v839) = 257;
                        v789 = (char *)operator new(0x80uLL);
                        *(_QWORD *)v789 = 0;
                        *((_QWORD *)v789 + 2) = 0;
                        *((_QWORD *)v789 + 1) = 0;
                        *((_QWORD *)v789 + 5) = 0;
                        *((_QWORD *)v789 + 6) = 0;
                        *((_QWORD *)v789 + 4) = 0;
                        v790 = (llvm::Value ***)(v789 + 32);
                        *((_QWORD *)v789 + 8) = *v785;
                        v791 = (uint64_t)(v789 + 64);
                        *((_QWORD *)v789 + 3) = v789 + 64;
                        *((_QWORD *)v789 + 7) = v789 + 64;
                        *((_QWORD *)v789 + 9) = 0;
                        v789[80] = 41;
                        v789[81] = 0;
                        *((_WORD *)v789 + 41) = 0;
                        *((_DWORD *)v789 + 21) = 2;
                        *((_DWORD *)v789 + 30) = 0;
                        *(_OWORD *)(v789 + 104) = 0u;
                        *(_OWORD *)(v789 + 88) = 0u;
                        *(_QWORD *)v789 = v785;
                        v794 = v785[1];
                        v793 = v785 + 1;
                        v792 = v794;
                        *((_QWORD *)v789 + 1) = v794;
                        if (v794)
                          v792[2] = v789 + 8;
                        *((_QWORD *)v789 + 2) = v793;
                        *v793 = v789;
                        if (*((_QWORD *)v789 + 4))
                        {
                          **((_QWORD **)v789 + 6) = *((_QWORD *)v789 + 5);
                          v803 = *((_QWORD *)v789 + 5);
                          if (v803)
                            *(_QWORD *)(v803 + 16) = *((_QWORD *)v789 + 6);
                        }
                        *v790 = v786;
                        if (v786)
                        {
                          v797 = v786[1];
                          v796 = (llvm::Value ****)(v786 + 1);
                          v795 = v797;
                          *((_QWORD *)v789 + 5) = v797;
                          if (v797)
                            *((_QWORD *)v795 + 2) = v789 + 40;
                          *((_QWORD *)v789 + 6) = v796;
                          *v796 = v790;
                        }
                        llvm::Value::setName((uint64_t ***)v789 + 8, (uint64_t)&__src);
                        v788 = sub_1C4773754((uint64_t *)v520, v791, (uint64_t)&v856);
                      }
                      v798 = llvm::ConstantInt::get((llvm::ConstantInt **)v767, (llvm::Type *)&v847, v787);
                      WORD4(v839) = 257;
                      v683 = sub_1C4774B48(v520, v765, v788, (uint64_t)v798, (uint64_t)&__src);
                      if (v846 >= 0x41 && v845)
                        MEMORY[0x1CAA32F9C](v845, 0x1000C8000313F17);
                      if (v848 >= 0x41 && v847)
                        MEMORY[0x1CAA32F9C](v847, 0x1000C8000313F17);
                      if (v850 >= 0x41 && v849)
                        MEMORY[0x1CAA32F9C](v849, 0x1000C8000313F17);
                      if (v861 >= 0x41 && v860)
                        MEMORY[0x1CAA32F9C](v860, 0x1000C8000313F17);
                      if (v683)
                        goto LABEL_1158;
LABEL_857:
                      v525 = *(void **)v820;
                      v834 = *(_OWORD *)(v820 + 8);
                      v835 = *(_OWORD *)(v820 + 24);
                      v836 = *(uint64_t ****)(v820 + 40);
                      if ((*((_WORD *)v828 + 9) & 0x3E) != 0x20)
                        return 0;
                      v526 = (unsigned __int8 *)*((_QWORD *)v828 - 4);
                      if (!v526)
                        return 0;
                      if (v526[16] > 0x14u)
                        return 0;
                      v527 = *(uint64_t **)(v819 + 24);
                      if ((llvm::Constant::isNullValue(*((llvm::Constant **)v828 - 4)) & 1) == 0
                        && (sub_1C4E71060((uint64_t)&__src, (llvm::Constant *)v526) & 1) == 0)
                      {
                        return 0;
                      }
                      v528 = *((_QWORD *)v828 - 8);
                      v529 = *(_QWORD *)(v528 + 8);
                      if (!v529 || *(_QWORD *)(v529 + 8))
                        return 0;
                      v847 = 0;
                      v845 = 0;
                      v855 = 0;
                      __src = 0;
                      v838 = (unint64_t)&v847;
                      v839 = (unint64_t)&v855;
                      v840 = (uint64_t ***)&v855;
                      v841 = &v845;
                      v531 = *(unsigned __int8 *)(v528 + 16);
                      if (v531 == 5)
                      {
                        if (*(_WORD *)(v528 + 18) != 28)
                          return 0;
                        v537 = *(_QWORD *)(v528 - 32 * (*(_DWORD *)(v528 + 20) & 0x7FFFFFF));
                        if (v537)
                        {
                          v538 = *(unsigned __int8 *)(v537 + 16);
                          if (v538 >= 0x1C && v538 - 53 <= 1)
                          {
                            v847 = *(const void ***)(v528 - 32 * (*(_DWORD *)(v528 + 20) & 0x7FFFFFF));
                            v534 = *(_QWORD *)(v528 - 32 * (*(_DWORD *)(v528 + 20) & 0x7FFFFFF) + 32);
                            if (sub_1C5819650((uint64_t)&v838 + 8, v534))
                            {
                              if (v534 && *(unsigned __int8 *)(v534 + 16) > 0x1Bu)
                                goto LABEL_894;
                            }
                          }
                        }
                        v539 = *(_QWORD *)(v528 - 32 * (*(_DWORD *)(v528 + 20) & 0x7FFFFFF) + 32);
                        if (!v539)
                          return 0;
                        v540 = *(unsigned __int8 *)(v539 + 16);
                        if (v540 < 0x1C)
                          return 0;
                        if (v540 - 53 > 1)
                          return 0;
                        v847 = *(const void ***)(v528 - 32 * (*(_DWORD *)(v528 + 20) & 0x7FFFFFF) + 32);
                        v534 = *(_QWORD *)(v528 - 32 * (*(_DWORD *)(v528 + 20) & 0x7FFFFFF));
                        if (!sub_1C5819650((uint64_t)&v838 + 8, v534))
                          return 0;
                      }
                      else
                      {
                        if (v531 != 56)
                          return 0;
                        v532 = *(_QWORD *)(v528 - 64);
                        if (v532)
                        {
                          v533 = *(unsigned __int8 *)(v532 + 16);
                          if (v533 >= 0x1C && v533 - 53 <= 1)
                          {
                            v847 = *(const void ***)(v528 - 64);
                            v534 = *(_QWORD *)(v528 - 32);
                            if (sub_1C5819650((uint64_t)&v838 + 8, v534))
                            {
                              if (v534 && *(unsigned __int8 *)(v534 + 16) > 0x1Bu)
                                goto LABEL_894;
                            }
                          }
                        }
                        v535 = *(_QWORD *)(v528 - 32);
                        if (!v535)
                          return 0;
                        v536 = *(unsigned __int8 *)(v535 + 16);
                        if (v536 < 0x1C)
                          return 0;
                        if (v536 - 53 > 1)
                          return 0;
                        v847 = *(const void ***)(v528 - 32);
                        v534 = *(_QWORD *)(v528 - 64);
                        if (!sub_1C5819650((uint64_t)&v838 + 8, v534))
                          return 0;
                      }
                      if (!v534 || *(unsigned __int8 *)(v534 + 16) < 0x1Cu)
                        return 0;
LABEL_894:
                      v845 = (const void **)v534;
                      v541 = v855;
                      v542 = v847;
                      v543 = (uint64_t)*v855;
                      v544 = (llvm::Type *)*v847;
                      v545 = **((_QWORD **)v828 - 8);
                      v546 = *((unsigned __int8 *)v855 + 16);
                      if (v546 == 54)
                        goto LABEL_897;
                      v547 = v847;
                      if (v546 != 5)
                        goto LABEL_954;
                      if (*((_WORD *)v855 + 9) == 26)
                      {
LABEL_897:
                        v847 = v855;
                        v855 = v542;
                        v547 = v541;
                        v546 = *((unsigned __int8 *)v542 + 16);
                      }
                      else
                      {
                        v546 = 5;
                        v547 = v847;
                      }
LABEL_954:
                      v589 = *((unsigned __int8 *)v547 + 16);
                      if (v589 == v546)
                        return 0;
                      v853 = 0;
                      v854 = 0;
                      v851 = 0;
                      v852 = 0;
                      __src = &v854;
                      *(_QWORD *)&v838 = &v853;
                      *((_QWORD *)&v838 + 1) = &v853;
                      sub_1C58196E8((uint64_t)&__src, (uint64_t)v547);
                      __src = &v852;
                      *(_QWORD *)&v838 = &v851;
                      *((_QWORD *)&v838 + 1) = &v851;
                      sub_1C58196E8((uint64_t)&__src, (uint64_t)v855);
                      if (v854[16] < 0x15u || v852[16] < 0x15u)
                        goto LABEL_957;
                      v611 = *((_QWORD *)v828 - 8);
                      v612 = *(unsigned __int8 *)(v611 + 16);
                      if (v612 != 5)
                      {
                        if (v612 != 56)
                          return 0;
                        v613 = *(_QWORD *)(v611 - 64);
                        v614 = *(_QWORD *)(v613 + 8);
                        if (!v614 || *(_QWORD *)(v614 + 8))
                        {
LABEL_1000:
                          v615 = *(_QWORD *)(v611 - 32);
                          v616 = *(_QWORD *)(v615 + 8);
                          if (!v616 || *(_QWORD *)(v616 + 8))
                            return 0;
                          v617 = *(unsigned __int8 *)(v615 + 16);
                          if (v617 >= 0x1C)
                          {
                            v618 = v617 - 53;
LABEL_1031:
                            if (v618 >= 2)
                              return 0;
                            goto LABEL_1076;
                          }
LABEL_1029:
                          if (v617 != 5)
                            return 0;
                          v618 = *(unsigned __int16 *)(v615 + 18) - 25;
                          goto LABEL_1031;
                        }
                        v649 = *(unsigned __int8 *)(v613 + 16);
                        if (v649 > 0x1B)
                        {
                          v650 = v649 - 53;
                        }
                        else
                        {
                          if (v649 != 5)
                            goto LABEL_1000;
                          v650 = *(unsigned __int16 *)(v613 + 18) - 25;
                        }
                        if (v650 >= 2)
                          goto LABEL_1000;
LABEL_1076:
                        if (v543 != v545)
                        {
                          v660 = v845[1];
                          if (!v660 || v660[1])
                          {
                            v661 = *((_DWORD *)v542 + 5);
                            v662 = (v661 & 0x40000000) != 0 ? *(v542 - 1) : &v542[-4 * (v661 & 0x7FFFFFF)];
                            v663 = *(_QWORD *)(*((_QWORD *)v662 + 4) + 8);
                            if (!v663 || *(_QWORD *)(v663 + 8))
                              return 0;
                          }
                        }
LABEL_957:
                        v590 = (llvm::Type *)*v853;
                        if (*v853 == *(const void **)v851)
                        {
                          v591 = (llvm::Type *)v543;
                          if ((*(_DWORD *)(v543 + 8) & 0xFE) == 0x12)
                            v591 = **(llvm::Type ***)(v543 + 16);
                          v592 = llvm::Type::getPrimitiveSizeInBits(v591);
                          if ((*((_DWORD *)v544 + 2) & 0xFE) == 0x12)
                            v544 = (llvm::Type *)**((_QWORD **)v544 + 2);
                          v593 = llvm::Type::getPrimitiveSizeInBits(v544);
                          if ((*((_DWORD *)v590 + 2) & 0xFE) == 0x12)
                            v590 = (llvm::Type *)**((_QWORD **)v590 + 2);
                          v594 = llvm::Type::getPrimitiveSizeInBits(v590);
                          v850 = v594;
                          if (v594 > 0x40)
                          {
                            v596 = &v849;
                            llvm::APInt::initSlowCase((llvm::APInt *)&v849, -1, 1);
                            if (v850 >= 0x41)
                            {
                              v705 = 0;
                              v706 = ((unint64_t)v850 + 63) >> 6;
                              v596 = (uint64_t ***)v849;
                              do
                              {
                                v7 = v706-- < 1;
                                if (v7)
                                  break;
                                v707 = v849[v706];
                                v705 += __clz((unint64_t)v707);
                              }
                              while (!v707);
                              v708 = v850 | 0xFFFFFFC0;
                              if ((v850 & 0x3F) == 0)
                                v708 = 0;
                              if (v850 - v705 - v708 > 0x40)
                              {
LABEL_969:
                                __src = v525;
                                *(_QWORD *)&v839 = v835;
                                v838 = v834;
                                *((_QWORD *)&v839 + 1) = v828;
                                v840 = v836;
                                v597 = sub_1C4E62AE0((llvm *)v853, v851, 0, 0, (uint64_t)&__src, (llvm::DSOLocalEquivalent **)3);
                                if (v597 && *((unsigned __int8 *)v597 + 16) < 0x15u)
                                {
                                  ZExtOrBitCast = llvm::ConstantExpr::getZExtOrBitCast((llvm::Type **)v597, (llvm::Type ***)v543, v598);
                                  v600 = (llvm::Type *)v543;
                                  if ((*(_DWORD *)(v543 + 8) & 0xFE) == 0x12)
                                    v600 = **(llvm::Type ***)(v543 + 16);
                                  v601 = llvm::Type::getPrimitiveSizeInBits(v600);
                                  v602 = v601;
                                  LODWORD(v857) = v601;
                                  if (v601 > 0x40)
                                  {
                                    llvm::APInt::initSlowCase((llvm::APInt *)&v856, v601, 0);
                                  }
                                  else
                                  {
                                    v603 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v601;
                                    if (!v601)
                                      LODWORD(v603) = 0;
                                    v856 = v603 & v601;
                                  }
                                  __src = (void *)36;
                                  *(_QWORD *)&v838 = &v856;
                                  sub_1C57A1A3C((uint64_t)&__src, ZExtOrBitCast);
                                  v605 = v604;
                                  if (v857 >= 0x41 && v856)
                                    MEMORY[0x1CAA32F9C](v856, 0x1000C8000313F17);
                                  if (v605)
                                  {
                                    if (v543 == v545
                                      || (v606 = *((unsigned __int8 *)v541 + 16), v606 != 54)
                                      && (v606 != 5 || *((_WORD *)v541 + 9) != 26))
                                    {
LABEL_1118:
                                      WORD4(v839) = 257;
                                      v854 = sub_1C4773E38(v527, 39, v854, v543, (uint64_t)&__src);
                                      WORD4(v839) = 257;
                                      v852 = sub_1C4773E38(v527, 39, v852, v543, (uint64_t)&__src);
                                      WORD4(v839) = 257;
                                      if (v589 == 54)
                                        v678 = (_QWORD *)sub_1C506ED1C((uint64_t)v527, (uint64_t)v854, (uint64_t)ZExtOrBitCast, (uint64_t)&__src, 0);
                                      else
                                        v678 = (_QWORD *)sub_1C506E874((uint64_t)v527, (uint64_t)v854, (uint64_t)ZExtOrBitCast, (uint64_t)&__src, 0, 0);
                                      WORD4(v839) = 257;
                                      v679 = sub_1C4D89BCC((uint64_t)v527, v678, (uint64_t)v852, (uint64_t)&__src);
                                      v680 = *((_WORD *)v828 + 9) & 0x3F;
                                      v682 = llvm::Constant::getNullValue((llvm::Constant *)v543, v681);
                                      WORD4(v839) = 257;
                                      v683 = sub_1C4774B48((uint64_t)v527, v680, v679, (uint64_t)v682, (uint64_t)&__src);
LABEL_1154:
                                      if (v850 >= 0x41 && v849)
                                        MEMORY[0x1CAA32F9C](v849, 0x1000C8000313F17);
                                      if (!v683)
                                        return 0;
LABEL_1158:
                                      v490 = v819;
                                      v491 = v828;
                                      v492 = (llvm::Value *)v683;
                                      return sub_1C577F888(v490, v491, v492);
                                    }
                                    SplatValue = ZExtOrBitCast;
                                    if ((*(_DWORD *)(*(_QWORD *)ZExtOrBitCast + 8) & 0xFE) == 0x12
                                      && (SplatValue = llvm::Constant::getSplatValue(ZExtOrBitCast, 0)) == 0)
                                    {
                                      SplatValue = 0;
                                      v831 = 1;
                                    }
                                    else
                                    {
                                      if ((llvm::Constant::isNullValue(SplatValue) & 1) != 0)
                                        goto LABEL_1118;
                                      AggregateElement = SplatValue;
                                      if (*((_BYTE *)SplatValue + 16) != 16)
                                        AggregateElement = llvm::Constant::getAggregateElement(SplatValue, 0);
                                      v608 = (_QWORD **)((char *)AggregateElement + 24);
                                      v609 = *((_DWORD *)AggregateElement + 8);
                                      if (v609 < 0x41
                                        || v609
                                         - llvm::APInt::countLeadingZerosSlowCase((llvm::UndefValue *)((char *)AggregateElement + 24)) <= 0x40)
                                      {
                                        v610 = *v608;
                                        if (v609 < 0x41)
                                          v610 = v608;
                                        if (*v610 == v602 - 1)
                                          goto LABEL_1118;
                                      }
                                      v831 = 0;
                                    }
                                    v664 = *((_DWORD *)v542 + 5);
                                    if ((v664 & 0x40000000) != 0)
                                      v665 = (uint64_t *)*(v542 - 1);
                                    else
                                      v665 = (uint64_t *)&v542[-4 * (v664 & 0x7FFFFFF)];
                                    v666 = *v665;
                                    if (*v665 && *(unsigned __int8 *)(v666 + 16) <= 0x14u)
                                    {
                                      __src = v525;
                                      v838 = 0u;
                                      v839 = 0u;
                                      LOBYTE(v840) = 1;
                                      sub_1C4F83784(v666, 0, (uint64_t *)&__src, &v856);
                                      v667 = v857;
                                      if (v857 > 0x40)
                                      {
                                        v668 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v856);
                                      }
                                      else if ((_DWORD)v857)
                                      {
                                        v668 = __clz(~(v856 << -(char)v857));
                                      }
                                      else
                                      {
                                        v668 = 0;
                                      }
                                      if (v667 - v668 < 2)
                                        goto LABEL_1116;
                                      if ((v831 & 1) == 0)
                                      {
                                        if (!SplatValue || (v669 = SplatValue, *((_BYTE *)SplatValue + 16) != 16))
                                          v669 = llvm::Constant::getAggregateElement(SplatValue, 0);
                                        v670 = (_QWORD **)((char *)v669 + 24);
                                        v671 = *((_DWORD *)v669 + 8);
                                        if (v671 < 0x41
                                          || v671
                                           - llvm::APInt::countLeadingZerosSlowCase((llvm::UndefValue *)((char *)v669 + 24)) <= 0x40)
                                        {
                                          v672 = *v670;
                                          if (v671 < 0x41)
                                            v672 = v670;
                                          if (*v672 <= (unint64_t)v668)
                                            goto LABEL_1116;
                                        }
                                      }
                                      if (v858 >= 0x41 && *((_QWORD *)&v857 + 1))
                                        MEMORY[0x1CAA32F9C](*((_QWORD *)&v857 + 1), 0x1000C8000313F17);
                                      if (v857 >= 0x41 && v856)
                                        MEMORY[0x1CAA32F9C](v856, 0x1000C8000313F17);
                                    }
                                    v673 = *((_DWORD *)v541 + 5);
                                    v674 = (uint64_t *)((v673 & 0x40000000) != 0
                                                     ? *(v541 - 1)
                                                     : &v541[-4 * (v673 & 0x7FFFFFF)]);
                                    v675 = *v674;
                                    if (*v674)
                                    {
                                      if (*(unsigned __int8 *)(v675 + 16) <= 0x14u)
                                      {
                                        __src = v525;
                                        v838 = 0u;
                                        v839 = 0u;
                                        LOBYTE(v840) = 1;
                                        sub_1C4F83784(v675, 0, (uint64_t *)&__src, &v856);
                                        v676 = v857;
                                        if (v857 > 0x40)
                                        {
                                          v677 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v856);
                                        }
                                        else if ((_DWORD)v857)
                                        {
                                          v677 = __clz(~(v856 << -(char)v857));
                                        }
                                        else
                                        {
                                          v677 = 0;
                                        }
                                        if (v676 - v677 < 2)
                                          goto LABEL_1116;
                                        if ((v831 & 1) != 0)
                                          goto LABEL_1151;
                                        v684 = v602 - 1;
                                        if (!SplatValue || *((_BYTE *)SplatValue + 16) != 16)
                                          SplatValue = llvm::Constant::getAggregateElement(SplatValue, 0);
                                        v685 = *((_DWORD *)SplatValue + 8);
                                        LODWORD(v861) = v685;
                                        if (v685 > 0x40)
                                        {
                                          v686 = operator new[]();
                                          v860 = (void **)v686;
                                          v685 = v861;
                                          memcpy((void *)v686, *((const void **)SplatValue + 3), (((unint64_t)v861 + 63) >> 3) & 0x3FFFFFF8);
                                          if (v685 > 0x40)
                                          {
                                            llvm::APInt::flipAllBitsSlowCase((uint64_t)&v860);
                                            goto LABEL_1139;
                                          }
                                        }
                                        else
                                        {
                                          v686 = *((_QWORD *)SplatValue + 3);
                                        }
                                        if (v685)
                                          v691 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v685;
                                        else
                                          v691 = 0;
                                        v860 = (void **)(v691 & ~v686);
LABEL_1139:
                                        v692 = llvm::APInt::operator++((uint64_t)&v860);
                                        llvm::APInt::operator+=(v692, v684);
                                        v693 = v861;
                                        LODWORD(v861) = 0;
                                        if (v693 >= 0x41)
                                        {
                                          v694 = 0;
                                          v695 = (unint64_t)(v693 + 63) >> 6;
                                          do
                                          {
                                            v7 = v695-- < 1;
                                            if (v7)
                                              break;
                                            v696 = (unint64_t)v860[v695];
                                            v694 += __clz(v696);
                                          }
                                          while (!v696);
                                          v697 = v693 | 0xFFFFFFC0;
                                          if ((v693 & 0x3F) == 0)
                                            v697 = 0;
                                          if ((v693 - v694 - v697) > 0x40)
                                          {
                                            if (v860)
                                              MEMORY[0x1CAA32F9C](v860, 0x1000C8000313F17);
                                            goto LABEL_1151;
                                          }
                                          v698 = (unint64_t)*v860;
                                          MEMORY[0x1CAA32F9C]();
                                          if (v698 > v677)
                                          {
LABEL_1151:
                                            if (v858 >= 0x41 && *((_QWORD *)&v857 + 1))
                                              MEMORY[0x1CAA32F9C](*((_QWORD *)&v857 + 1), 0x1000C8000313F17);
                                            if (v857 >= 0x41 && v856)
                                              MEMORY[0x1CAA32F9C](v856, 0x1000C8000313F17);
                                            goto LABEL_1153;
                                          }
                                        }
                                        else if ((unint64_t)v860 > v677)
                                        {
                                          goto LABEL_1151;
                                        }
LABEL_1116:
                                        if (v858 >= 0x41 && *((_QWORD *)&v857 + 1))
                                          MEMORY[0x1CAA32F9C](*((_QWORD *)&v857 + 1), 0x1000C8000313F17);
                                        if (v857 >= 0x41 && v856)
                                          MEMORY[0x1CAA32F9C](v856, 0x1000C8000313F17);
                                        goto LABEL_1118;
                                      }
                                    }
                                  }
                                }
LABEL_1153:
                                v683 = 0;
                                goto LABEL_1154;
                              }
                            }
                          }
                          else
                          {
                            if (v594)
                              v595 = (uint64_t **)(0xFFFFFFFFFFFFFFFFLL >> -(char)v594);
                            else
                              v595 = 0;
                            v849 = v595;
                            v596 = &v849;
                          }
                          if ((unint64_t)*v596 < (v592 + v593 - 2))
                            goto LABEL_1153;
                          goto LABEL_969;
                        }
                        return 0;
                      }
                      if (*(_WORD *)(v611 + 18) != 28)
                        return 0;
                      v629 = (_QWORD *)(v611 - 32 * (*(_DWORD *)(v611 + 20) & 0x7FFFFFF));
                      v630 = *v629;
                      v631 = *(_QWORD *)(*v629 + 8);
                      if (!v631 || *(_QWORD *)(v631 + 8))
                      {
LABEL_1026:
                        v615 = v629[4];
                        v632 = *(_QWORD *)(v615 + 8);
                        if (!v632 || *(_QWORD *)(v632 + 8))
                          return 0;
                        v617 = *(unsigned __int8 *)(v615 + 16);
                        if (v617 <= 0x1B)
                          goto LABEL_1029;
                        if (v617 - 53 > 1)
                          return 0;
                        goto LABEL_1076;
                      }
                      v651 = *(unsigned __int8 *)(v630 + 16);
                      if (v651 > 0x1B)
                      {
                        v652 = v651 - 53;
                      }
                      else
                      {
                        if (v651 != 5)
                          goto LABEL_1026;
                        v652 = *(unsigned __int16 *)(v630 + 18) - 25;
                      }
                      if (v652 < 2)
                        goto LABEL_1076;
                      goto LABEL_1026;
                    }
                    if ((_QWORD)v857 != *(_QWORD *)(v445 - 64)
                      || (sub_1C4D9ED34((uint64_t)&v857 + 8, *(llvm::Constant **)(v445 - 32)) & 1) == 0)
                    {
                      goto LABEL_763;
                    }
LABEL_744:
                    v453 = 1;
                    goto LABEL_752;
                  }
LABEL_691:
                  if (!v408)
                    goto LABEL_763;
                  goto LABEL_692;
                }
                if (v5 != (unsigned __int8 *)v408)
                {
                  switch((int)v832)
                  {
                    case ' ':
                      v505 = v828;
                      False = llvm::ConstantInt::getFalse(*(uint64_t ***)v828, v16, v17);
                      goto LABEL_835;
                    case '!':
                      v505 = v828;
                      False = llvm::ConstantInt::getTrue(*(uint64_t ***)v828, v16, v17);
LABEL_835:
                      v492 = (llvm::Value *)False;
                      v490 = v819;
                      v491 = v505;
                      return sub_1C577F888(v490, v491, v492);
                    case '&':
                    case '\'':
                      v155 = (char *)operator new(0x80uLL);
                      v3 = v155 + 64;
                      *((_DWORD *)v155 + 21) = *((_DWORD *)v155 + 21) & 0x38000000 | 2;
                      *(_QWORD *)v155 = 0;
                      *((_QWORD *)v155 + 1) = 0;
                      *((_QWORD *)v155 + 4) = 0;
                      v432 = (llvm::ValueHandleBase **)(v155 + 32);
                      *((_QWORD *)v155 + 2) = 0;
                      *((_QWORD *)v155 + 3) = v155 + 64;
                      *((_QWORD *)v155 + 5) = 0;
                      *((_QWORD *)v155 + 6) = 0;
                      *((_QWORD *)v155 + 7) = v155 + 64;
                      v433 = *((_QWORD *)v5 - 4);
                      AllOnesValue = llvm::Constant::getAllOnesValue(*(llvm::Constant **)v5, v434);
                      WORD4(v839) = 257;
                      sub_1C4774CC4(*(_DWORD **)v433);
                      *((_QWORD *)v155 + 8) = v436;
                      *((_QWORD *)v155 + 9) = 0;
                      v437 = *((_DWORD *)v155 + 21) & 0xC0000000 | 2;
                      *((_DWORD *)v155 + 20) = 81;
                      *((_DWORD *)v155 + 21) = v437;
                      *(_OWORD *)(v155 + 88) = 0u;
                      *(_OWORD *)(v155 + 104) = 0u;
                      *((_DWORD *)v155 + 30) = 0;
                      if (*(_QWORD *)v155)
                      {
                        **((_QWORD **)v155 + 2) = *((_QWORD *)v155 + 1);
                        v761 = *((_QWORD *)v155 + 1);
                        if (v761)
                          *(_QWORD *)(v761 + 16) = *((_QWORD *)v155 + 2);
                      }
                      *(_QWORD *)v155 = v433;
                      v440 = *(_QWORD *)(v433 + 8);
                      v439 = (_QWORD *)(v433 + 8);
                      v438 = v440;
                      *((_QWORD *)v155 + 1) = v440;
                      if (v440)
                        *(_QWORD *)(v438 + 16) = v155 + 8;
                      *((_QWORD *)v155 + 2) = v439;
                      *v439 = v155;
                      if (*((_QWORD *)v155 + 4))
                      {
                        **((_QWORD **)v155 + 6) = *((_QWORD *)v155 + 5);
                        v762 = *((_QWORD *)v155 + 5);
                        if (v762)
                          *(_QWORD *)(v762 + 16) = *((_QWORD *)v155 + 6);
                      }
                      *v432 = AllOnesValue;
                      if (AllOnesValue)
                      {
                        v443 = *((_QWORD *)AllOnesValue + 1);
                        v442 = (llvm::ValueHandleBase ***)((char *)AllOnesValue + 8);
                        v441 = v443;
                        *((_QWORD *)v155 + 5) = v443;
                        if (v443)
                          *(_QWORD *)(v441 + 16) = v155 + 40;
                        *((_QWORD *)v155 + 6) = v442;
                        *v442 = v432;
                      }
                      goto LABEL_344;
                    case '(':
                    case ')':
                      v155 = (char *)operator new(0x80uLL);
                      v3 = v155 + 64;
                      *((_DWORD *)v155 + 21) = *((_DWORD *)v155 + 21) & 0x38000000 | 2;
                      *(_QWORD *)v155 = 0;
                      *((_QWORD *)v155 + 1) = 0;
                      *((_QWORD *)v155 + 4) = 0;
                      v493 = (llvm::Value ***)(v155 + 32);
                      *((_QWORD *)v155 + 2) = 0;
                      *((_QWORD *)v155 + 3) = v155 + 64;
                      *((_QWORD *)v155 + 5) = 0;
                      *((_QWORD *)v155 + 6) = 0;
                      *((_QWORD *)v155 + 7) = v155 + 64;
                      v494 = *((_QWORD *)v5 - 4);
                      v496 = llvm::Constant::getNullValue(*(llvm::Constant **)v5, v495);
                      WORD4(v839) = 257;
                      sub_1C4774CC4(*(_DWORD **)v494);
                      *((_QWORD *)v155 + 8) = v497;
                      *((_QWORD *)v155 + 9) = 0;
                      v498 = *((_DWORD *)v155 + 21) & 0xC0000000 | 2;
                      *((_DWORD *)v155 + 20) = 81;
                      *((_DWORD *)v155 + 21) = v498;
                      *(_OWORD *)(v155 + 88) = 0u;
                      *(_OWORD *)(v155 + 104) = 0u;
                      *((_DWORD *)v155 + 30) = 0;
                      if (*(_QWORD *)v155)
                      {
                        **((_QWORD **)v155 + 2) = *((_QWORD *)v155 + 1);
                        v763 = *((_QWORD *)v155 + 1);
                        if (v763)
                          *(_QWORD *)(v763 + 16) = *((_QWORD *)v155 + 2);
                      }
                      *(_QWORD *)v155 = v494;
                      v501 = *(_QWORD *)(v494 + 8);
                      v500 = (_QWORD *)(v494 + 8);
                      v499 = v501;
                      *((_QWORD *)v155 + 1) = v501;
                      if (v501)
                        *(_QWORD *)(v499 + 16) = v155 + 8;
                      *((_QWORD *)v155 + 2) = v500;
                      *v500 = v155;
                      if (*((_QWORD *)v155 + 4))
                      {
                        **((_QWORD **)v155 + 6) = *((_QWORD *)v155 + 5);
                        v764 = *((_QWORD *)v155 + 5);
                        if (v764)
                          *(_QWORD *)(v764 + 16) = *((_QWORD *)v155 + 6);
                      }
                      *v493 = v496;
                      if (v496)
                      {
                        v504 = v496[1];
                        v503 = (llvm::Value ****)(v496 + 1);
                        v502 = v504;
                        *((_QWORD *)v155 + 5) = v504;
                        if (v504)
                          *((_QWORD *)v502 + 2) = v155 + 40;
                        *((_QWORD *)v155 + 6) = v503;
                        *v503 = v493;
                      }
                      goto LABEL_357;
                    default:
                      goto LABEL_669;
                  }
                }
LABEL_668:
                __asm { BR              X9 }
              }
LABEL_664:
              if (!v11)
                goto LABEL_691;
              goto LABEL_665;
            }
            goto LABEL_832;
          }
        }
LABEL_658:
        if (!v408)
          goto LABEL_664;
        goto LABEL_659;
      }
    }
    else
    {
      v390 = (void *)*v847;
      if (*v847)
      {
        DWORD2(v857) = *((_DWORD *)v847 + 2);
        v856 = (uint64_t)&v849;
        *(_QWORD *)&v857 = v390;
        goto LABEL_652;
      }
    }
LABEL_657:
    v408 = v267;
    goto LABEL_658;
  }
  v232 = *(_QWORD *)(v821 + 8);
  v233 = !v107;
  if (!v232 || *(_QWORD *)(v232 + 8))
  {
    v234 = *(_QWORD *)(v11 + 8);
    if (!v234 || *(_QWORD *)(v234 + 8))
      goto LABEL_479;
  }
  if ((*((_WORD *)v231 + 9) & 0x3Eu) - 34 < 4)
    goto LABEL_479;
  v847 = 0;
  v845 = 0;
  __src = &v847;
  *(_QWORD *)&v838 = 1;
  if (!sub_1C4D89F84((uint64_t)&__src, v112))
    goto LABEL_412;
  v856 = (uint64_t)&v845;
  *(_QWORD *)&v857 = 1;
  if (!sub_1C4D89F84((uint64_t)&v856, v114))
    goto LABEL_412;
  v235 = *((_DWORD *)v847 + 2);
  v236 = v235 - 1;
  v237 = v847;
  if (v235 >= 0x41)
    v237 = (char *)*v847 + 8 * (v236 >> 6);
  v238 = *v237 & (1 << v236);
  v239 = v845;
  v240 = *((_DWORD *)v845 + 2);
  v241 = v240 - 1;
  if (v240 >= 0x41)
    v239 = (const void **)((char *)*v845 + 8 * (v241 >> 6));
  if ((((v238 != 0) ^ ((unint64_t)*v239 >> v241)) & 1) != 0)
  {
LABEL_412:
    v242 = v112[16];
    if (v242 != 5)
    {
      if (v112)
      {
        if (v242 <= 0x14)
        {
          if (v114)
          {
            v243 = v114[16];
            if (v243 <= 0x14 && v243 != 5 && (v832 & 0x3E) == 0x20)
            {
              Sub = llvm::ConstantExpr::getSub((llvm::ConstantExpr *)v114, (llvm::Constant *)v112, 0, 0);
              v245 = *(_QWORD *)(v819 + 24);
              v859 = 257;
              v246 = (*(uint64_t (**)(_QWORD, unsigned __int8 *, llvm::ValueHandleBase *, _QWORD, _QWORD))(**(_QWORD **)(v245 + 72) + 16))(*(_QWORD *)(v245 + 72), v814, Sub, 0, 0);
              if (!v246)
              {
                WORD4(v839) = 257;
                v247 = (char *)operator new(0x80uLL);
                *((_QWORD *)v247 + 5) = 0;
                v248 = v247 + 40;
                *((_QWORD *)v247 + 6) = 0;
                *((_QWORD *)v247 + 8) = *(_QWORD *)v814;
                v249 = (uint64_t)(v247 + 64);
                *((_QWORD *)v247 + 3) = v247 + 64;
                *((_QWORD *)v247 + 7) = v247 + 64;
                *((_QWORD *)v247 + 9) = 0;
                v247[80] = 41;
                v247[81] = 0;
                *((_WORD *)v247 + 41) = 0;
                *((_DWORD *)v247 + 21) = 2;
                *(_OWORD *)(v247 + 88) = 0u;
                *(_OWORD *)(v247 + 104) = 0u;
                *((_DWORD *)v247 + 30) = 0;
                *(_QWORD *)v247 = v814;
                v251 = v814 + 8;
                v250 = *((_QWORD *)v814 + 1);
                *((_QWORD *)v247 + 1) = v250;
                if (v250)
                  *(_QWORD *)(v250 + 16) = v247 + 8;
                *((_QWORD *)v247 + 2) = v251;
                *v251 = v247;
                *((_QWORD *)v247 + 4) = Sub;
                if (Sub)
                {
                  v254 = *((_QWORD *)Sub + 1);
                  v253 = (_QWORD *)((char *)Sub + 8);
                  v252 = v254;
                  *v248 = v254;
                  if (v254)
                    *(_QWORD *)(v252 + 16) = v248;
                  *((_QWORD *)v247 + 6) = v253;
                  *v253 = v247 + 32;
                }
                llvm::Value::setName((uint64_t ***)v247 + 8, (uint64_t)&__src);
                v246 = sub_1C4773754((uint64_t *)v245, v249, (uint64_t)&v856);
              }
              v118 = (char *)operator new(0x80uLL);
              v3 = v118 + 64;
              *((_DWORD *)v118 + 21) = *((_DWORD *)v118 + 21) & 0x38000000 | 2;
              *(_QWORD *)v118 = 0;
              *((_QWORD *)v118 + 1) = 0;
              *((_QWORD *)v118 + 4) = 0;
              v255 = (uint64_t *)(v118 + 32);
              *((_QWORD *)v118 + 2) = 0;
              *((_QWORD *)v118 + 3) = v118 + 64;
              *((_QWORD *)v118 + 5) = 0;
              *((_QWORD *)v118 + 6) = 0;
              *((_QWORD *)v118 + 7) = v118 + 64;
              WORD4(v839) = 257;
              v256 = (uint64_t)v818;
LABEL_428:
              sub_1C4774CC4(*(_DWORD **)v256);
              *((_QWORD *)v118 + 8) = v257;
              *((_QWORD *)v118 + 9) = 0;
              v258 = *((_DWORD *)v118 + 21) & 0xC0000000 | 2;
              *((_DWORD *)v118 + 20) = 81;
              *((_DWORD *)v118 + 21) = v258;
              *(_OWORD *)(v118 + 88) = 0u;
              *(_OWORD *)(v118 + 104) = 0u;
              *((_DWORD *)v118 + 30) = 0;
              if (*(_QWORD *)v118)
              {
                **((_QWORD **)v118 + 2) = *((_QWORD *)v118 + 1);
                v751 = *((_QWORD *)v118 + 1);
                if (v751)
                  *(_QWORD *)(v751 + 16) = *((_QWORD *)v118 + 2);
              }
              *(_QWORD *)v118 = v256;
              v261 = *(_QWORD *)(v256 + 8);
              v260 = (_QWORD *)(v256 + 8);
              v259 = v261;
              *((_QWORD *)v118 + 1) = v261;
              if (v261)
                *(_QWORD *)(v259 + 16) = v118 + 8;
              *((_QWORD *)v118 + 2) = v260;
              *v260 = v118;
              if (*((_QWORD *)v118 + 4))
              {
                **((_QWORD **)v118 + 6) = *((_QWORD *)v118 + 5);
                v752 = *((_QWORD *)v118 + 5);
                if (v752)
                  *(_QWORD *)(v752 + 16) = *((_QWORD *)v118 + 6);
              }
              *v255 = v246;
              if (v246)
              {
                v264 = *(_QWORD *)(v246 + 8);
                v263 = (uint64_t **)(v246 + 8);
                v262 = v264;
                *((_QWORD *)v118 + 5) = v264;
                if (v264)
                  *(_QWORD *)(v262 + 16) = v118 + 40;
                *((_QWORD *)v118 + 6) = v263;
                *v263 = v255;
              }
              goto LABEL_228;
            }
          }
        }
      }
    }
    v233 = !v107;
    goto LABEL_479;
  }
  sub_1C4DA6CE8(v847, (uint64_t)&v856);
  sub_1C4DA6CE8(v845, (uint64_t)&v860);
  if (v857 > 0x40)
  {
    v555 = (((unint64_t)v857 + 63) >> 3) & 0x3FFFFFF8;
    while (v555)
    {
      v556 = *(_QWORD *)(v856 - 8 + v555);
      v557 = *(unint64_t *)((char *)v860 + v555 - 8);
      v555 -= 8;
      if (v556 != v557)
      {
        if (v556 <= v557)
          goto LABEL_597;
        break;
      }
    }
LABEL_913:
    v558 = v847;
    v559 = *((unsigned int *)v847 + 2);
    if (v559 >= 0x41)
    {
      v564 = (char *)operator new[]();
      memcpy(v564, *v558, ((unint64_t)(v559 + 63) >> 3) & 0x3FFFFFF8);
      v565 = 0;
      v566 = (unint64_t *)*v845;
      v567 = (unint64_t)(v559 + 63) >> 6;
      v568 = (unint64_t *)v564;
      v569 = v567;
      do
      {
        v570 = *v566++;
        v571 = *v568 - v570;
        v572 = *v568 < v570;
        v573 = *v568 + ~v570;
        if (v565)
        {
          v565 = v573 >= *v568;
        }
        else
        {
          v573 = v571;
          v565 = v572;
        }
        *v568++ = v573;
        --v569;
      }
      while (v569);
      *(_QWORD *)&v564[8 * (v567 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v559;
      v850 = v559;
      v849 = (uint64_t **)v564;
      v563 = *(unsigned __int8 *)(v821 + 17);
      if ((v563 & 2) != 0)
      {
        v560 = 8 * v567;
        while (v560)
        {
          v575 = *(_QWORD *)&v564[v560 - 8];
          v576 = *(_QWORD *)((char *)*v847 + v560 - 8);
          v560 -= 8;
          if (v575 != v576)
          {
            if (v575 > v576)
              LODWORD(v560) = 1;
            else
              LODWORD(v560) = -1;
            goto LABEL_932;
          }
        }
        goto LABEL_932;
      }
    }
    else
    {
      v560 = (unint64_t)*v847;
      if ((_DWORD)v559)
        v561 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v559;
      else
        v561 = 0;
      v562 = (uint64_t **)(v561 & ((_BYTE *)*v847 - (_BYTE *)*v845));
      v850 = *((_DWORD *)v847 + 2);
      v849 = v562;
      v563 = *(unsigned __int8 *)(v821 + 17);
      if ((v563 & 2) != 0)
      {
        v31 = (unint64_t)v562 >= v560;
        LODWORD(v560) = (unint64_t)v562 > v560;
        if (!v31)
          LODWORD(v560) = -1;
LABEL_932:
        v574 = (int)v560 < 1;
        goto LABEL_933;
      }
    }
    v574 = 0;
LABEL_933:
    v577 = (v563 >> 2) & 1;
    IntegerValue = llvm::Constant::getIntegerValue(*(llvm::Constant ****)v821, (llvm::Type *)&v849, v367);
    v579 = *(_QWORD *)(v819 + 24);
    WORD4(v839) = 257;
    v580 = (*(uint64_t (**)(_QWORD, unsigned __int8 *, llvm::Value **, _BOOL8, uint64_t))(**(_QWORD **)(v579 + 72)
                                                                                                 + 16))(*(_QWORD *)(v579 + 72), v818, IntegerValue, v574, v577);
    if (!v580)
      v580 = sub_1C4774D04((uint64_t *)v579, 13, v818, (uint64_t)IntegerValue, (uint64_t)&__src, v574, v577);
    v581 = (char *)operator new(0x80uLL);
    v3 = v581 + 64;
    *((_DWORD *)v581 + 21) = *((_DWORD *)v581 + 21) & 0x38000000 | 2;
    *(_QWORD *)v581 = 0;
    *((_QWORD *)v581 + 1) = 0;
    *((_QWORD *)v581 + 4) = 0;
    *((_QWORD *)v581 + 2) = 0;
    *((_QWORD *)v581 + 3) = v581 + 64;
    *((_QWORD *)v581 + 5) = 0;
    *((_QWORD *)v581 + 6) = 0;
    *((_QWORD *)v581 + 7) = v581 + 64;
    WORD4(v839) = 257;
    sub_1C4774CC4(*(_DWORD **)v580);
    *((_QWORD *)v581 + 8) = v582;
    *((_QWORD *)v581 + 9) = 0;
    v583 = *((_DWORD *)v581 + 21) & 0xC0000000 | 2;
    *((_DWORD *)v581 + 20) = 81;
    *((_DWORD *)v581 + 21) = v583;
    *(_OWORD *)(v581 + 88) = 0u;
    *(_OWORD *)(v581 + 104) = 0u;
    *((_DWORD *)v581 + 30) = 0;
    if (*(_QWORD *)v581)
    {
      **((_QWORD **)v581 + 2) = *((_QWORD *)v581 + 1);
      v757 = *((_QWORD *)v581 + 1);
      if (v757)
        *(_QWORD *)(v757 + 16) = *((_QWORD *)v581 + 2);
    }
    *(_QWORD *)v581 = v580;
    v586 = *(_QWORD *)(v580 + 8);
    v585 = (_QWORD *)(v580 + 8);
    v584 = v586;
    *((_QWORD *)v581 + 1) = v586;
    if (v586)
      *(_QWORD *)(v584 + 16) = v581 + 8;
    *((_QWORD *)v581 + 2) = v585;
    *v585 = v581;
    if (*((_QWORD *)v581 + 4))
    {
      **((_QWORD **)v581 + 6) = *((_QWORD *)v581 + 5);
      v758 = *((_QWORD *)v581 + 5);
      if (v758)
        *(_QWORD *)(v758 + 16) = *((_QWORD *)v581 + 6);
    }
    *((_QWORD *)v581 + 4) = v814;
    v588 = v814 + 8;
    v587 = *((_QWORD *)v814 + 1);
    *((_QWORD *)v581 + 5) = v587;
    if (v587)
      *(_QWORD *)(v587 + 16) = v581 + 40;
    *((_QWORD *)v581 + 6) = v588;
    *v588 = v581 + 32;
    *((_WORD *)v581 + 41) = v832;
    goto LABEL_942;
  }
  if (v856 >= (unint64_t)v860)
    goto LABEL_913;
LABEL_597:
  v368 = v845;
  v369 = *((unsigned int *)v845 + 2);
  if (v369 >= 0x41)
  {
    v374 = (char *)operator new[]();
    memcpy(v374, *v368, ((unint64_t)(v369 + 63) >> 3) & 0x3FFFFFF8);
    v375 = 0;
    v376 = (unint64_t *)*v847;
    v377 = (unint64_t)(v369 + 63) >> 6;
    v378 = (unint64_t *)v374;
    v379 = v377;
    do
    {
      v380 = *v376++;
      v381 = *v378 - v380;
      v382 = *v378 < v380;
      v383 = *v378 + ~v380;
      if (v375)
      {
        v375 = v383 >= *v378;
      }
      else
      {
        v383 = v381;
        v375 = v382;
      }
      *v378++ = v383;
      --v379;
    }
    while (v379);
    *(_QWORD *)&v374[8 * (v377 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v369;
    v850 = v369;
    v849 = (uint64_t **)v374;
    v373 = *(unsigned __int8 *)(v11 + 17);
    if ((v373 & 2) != 0)
    {
      v370 = 8 * v377;
      while (v370)
      {
        v391 = *(_QWORD *)&v374[v370 - 8];
        v392 = *(_QWORD *)((char *)*v845 + v370 - 8);
        v370 -= 8;
        if (v391 != v392)
        {
          if (v391 > v392)
            LODWORD(v370) = 1;
          else
            LODWORD(v370) = -1;
          goto LABEL_637;
        }
      }
      goto LABEL_637;
    }
  }
  else
  {
    v370 = (unint64_t)*v845;
    if ((_DWORD)v369)
      v371 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v369;
    else
      v371 = 0;
    v372 = (uint64_t **)(v371 & ((_BYTE *)*v845 - (_BYTE *)*v847));
    v850 = *((_DWORD *)v845 + 2);
    v849 = v372;
    v373 = *(unsigned __int8 *)(v11 + 17);
    if ((v373 & 2) != 0)
    {
      v31 = (unint64_t)v372 >= v370;
      LODWORD(v370) = (unint64_t)v372 > v370;
      if (!v31)
        LODWORD(v370) = -1;
LABEL_637:
      v384 = (int)v370 < 1;
      goto LABEL_638;
    }
  }
  v384 = 0;
LABEL_638:
  v393 = (v373 >> 2) & 1;
  v394 = llvm::Constant::getIntegerValue(*(llvm::Constant ****)v821, (llvm::Type *)&v849, v367);
  v395 = *(_QWORD *)(v819 + 24);
  WORD4(v839) = 257;
  v396 = (*(uint64_t (**)(_QWORD, unsigned __int8 *, llvm::Value **, _BOOL8, uint64_t))(**(_QWORD **)(v395 + 72)
                                                                                               + 16))(*(_QWORD *)(v395 + 72), v814, v394, v384, v393);
  if (!v396)
    v396 = sub_1C4774D04((uint64_t *)v395, 13, v814, (uint64_t)v394, (uint64_t)&__src, v384, v393);
  v397 = (char *)operator new(0x80uLL);
  v3 = v397 + 64;
  *((_DWORD *)v397 + 21) = *((_DWORD *)v397 + 21) & 0x38000000 | 2;
  *(_QWORD *)v397 = 0;
  *((_QWORD *)v397 + 1) = 0;
  *((_QWORD *)v397 + 4) = 0;
  v398 = (uint64_t *)(v397 + 32);
  *((_QWORD *)v397 + 2) = 0;
  *((_QWORD *)v397 + 3) = v397 + 64;
  *((_QWORD *)v397 + 5) = 0;
  *((_QWORD *)v397 + 6) = 0;
  *((_QWORD *)v397 + 7) = v397 + 64;
  WORD4(v839) = 257;
  sub_1C4774CC4(*(_DWORD **)v818);
  *((_QWORD *)v397 + 8) = v399;
  *((_QWORD *)v397 + 9) = 0;
  v400 = *((_DWORD *)v397 + 21) & 0xC0000000 | 2;
  *((_DWORD *)v397 + 20) = 81;
  *((_DWORD *)v397 + 21) = v400;
  *(_OWORD *)(v397 + 88) = 0u;
  *(_OWORD *)(v397 + 104) = 0u;
  *((_DWORD *)v397 + 30) = 0;
  if (*(_QWORD *)v397)
  {
    **((_QWORD **)v397 + 2) = *((_QWORD *)v397 + 1);
    v755 = *((_QWORD *)v397 + 1);
    if (v755)
      *(_QWORD *)(v755 + 16) = *((_QWORD *)v397 + 2);
  }
  *(_QWORD *)v397 = v818;
  v402 = v818 + 8;
  v401 = (_DWORD *)*((_QWORD *)v818 + 1);
  *((_QWORD *)v397 + 1) = v401;
  if (v401)
    *((_QWORD *)v401 + 2) = v397 + 8;
  *((_QWORD *)v397 + 2) = v402;
  *v402 = v397;
  if (*((_QWORD *)v397 + 4))
  {
    **((_QWORD **)v397 + 6) = *((_QWORD *)v397 + 5);
    v756 = *((_QWORD *)v397 + 5);
    if (v756)
      *(_QWORD *)(v756 + 16) = *((_QWORD *)v397 + 6);
  }
  *v398 = v396;
  if (v396)
  {
    v405 = *(_QWORD *)(v396 + 8);
    v404 = (uint64_t **)(v396 + 8);
    v403 = v405;
    *((_QWORD *)v397 + 5) = v405;
    if (v405)
      *(_QWORD *)(v403 + 16) = v397 + 40;
    *((_QWORD *)v397 + 6) = v404;
    *v404 = v398;
  }
  *((_WORD *)v397 + 41) = v832;
LABEL_942:
  llvm::Value::setName((uint64_t ***)v3, (uint64_t)&__src);
  if (v850 >= 0x41 && v849)
    MEMORY[0x1CAA32F9C](v849, 0x1000C8000313F17);
  if (v861 >= 0x41 && v860)
    MEMORY[0x1CAA32F9C](v860, 0x1000C8000313F17);
  if (v857 >= 0x41 && v856)
    MEMORY[0x1CAA32F9C](v856, 0x1000C8000313F17);
  return (llvm::UndefValue **)v3;
}

char *sub_1C58061CC(uint64_t a1, uint64_t ***a2, const llvm::APInt *a3)
{
  __int16 v3;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  llvm::Constant **v10;
  llvm::Constant **v11;
  llvm::Constant ***v12;
  llvm::Type *v14;
  char *v15;
  char *v16;
  llvm::Value ***v17;
  _DWORD **v18;
  llvm::Value **NullValue;
  uint64_t v20;
  unsigned int v21;
  _DWORD *v22;
  _QWORD *v23;
  _DWORD *v24;
  llvm::Value *v25;
  llvm::Value ****v26;
  llvm::Value *v27;
  int v28;
  llvm::Constant **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  llvm::Constant **v34;
  llvm::Constant **v35;
  llvm::Constant ***v36;
  llvm::Type *v38;
  llvm::Value ***v39;
  llvm::Constant **v40;
  llvm::Value **v41;
  uint64_t v42;
  unsigned int v43;
  llvm::Constant *v44;
  _QWORD *v45;
  llvm::Constant *v46;
  llvm::Value *v47;
  llvm::Value ****v48;
  llvm::Value *v49;
  uint64_t v50;
  llvm::Constant **v51;
  llvm::Constant **v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned __int8 *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  llvm::ConstantInt *v73;
  uint64_t *v74;
  _DWORD **UnaryIntrinsic;
  char *v76;
  llvm::Value ***v77;
  _OWORD *v78;
  llvm::Value **v79;
  uint64_t v80;
  unsigned int v81;
  _DWORD *v82;
  _QWORD *v83;
  _DWORD *v84;
  llvm::Value *v85;
  llvm::Value ****v86;
  llvm::Value *v87;
  char *v88;
  __int16 v89;
  llvm::Value **v90;
  uint64_t v91;
  unsigned int v92;
  _DWORD *v93;
  _QWORD *v94;
  _DWORD *v95;
  llvm::Value *v96;
  llvm::Type *v97;
  const llvm::APInt *v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  llvm::Constant **v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  _QWORD *v107;
  int v108;
  int v109;
  llvm::Constant **v110;
  uint64_t v111;
  unsigned int v112;
  int v113;
  _BOOL4 v114;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  llvm::Constant **v119;
  llvm::Value **v120;
  uint64_t v121;
  char *v122;
  llvm::Value ***v123;
  uint64_t v124;
  llvm::Constant *v125;
  _QWORD *v126;
  llvm::Constant *v127;
  llvm::Value *v128;
  llvm::Value ****v129;
  llvm::Value *v130;
  char *v131;
  llvm::Value ***v132;
  llvm::Constant *v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  size_t v138;
  const llvm::APInt *v139;
  llvm::Value **v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  llvm::Value *v146;
  llvm::Value ****v147;
  llvm::Value *v148;
  __int16 v149;
  _QWORD *v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t **v159;
  int v160;
  __int16 v161;
  char *v162;
  uint64_t **v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t ***v172;
  uint64_t v173;
  int v174;
  uint64_t *v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint8x8_t v185;
  unsigned int v186;
  int v187;
  int v188;
  int64_t v189;
  int8x8_t *v190;
  int64_t v191;
  int8x8_t v192;
  uint8x8_t v193;
  int v194;
  unint64_t v196;
  int v197;
  int v198;
  BOOL v199;
  char *v200;
  llvm::Constant **v201;
  uint64_t *v202;
  llvm::Constant *v203;
  unsigned __int8 *v204;
  uint64_t v205;
  unsigned int v206;
  llvm::Constant *v207;
  _QWORD *v208;
  uint64_t v209;
  unsigned __int8 ***v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  uint64_t *v217;
  char *v218;
  uint64_t v219;
  unsigned int v220;
  llvm::Constant *v221;
  _QWORD *v222;
  llvm::Constant *v223;
  uint64_t v224;
  llvm::Constant **v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  unsigned int v233;
  llvm::Constant *v234;
  _QWORD *v235;
  llvm::Constant *v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  _QWORD *v244;
  uint64_t **v245;
  llvm::Constant **v246;
  uint64_t v247;
  unsigned int v248;
  llvm::Constant *v249;
  _QWORD *v250;
  llvm::Constant *v251;
  uint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  llvm::Constant *v255;
  const char *v256;
  unsigned int PrimitiveSizeInBits;
  const char *v258;
  unsigned int v259;
  uint64_t v260;
  llvm::Constant **v261;
  const llvm::APInt *v262;
  llvm::ValueHandleBase *v263;
  uint64_t v264;
  char *v265;
  llvm::ValueHandleBase **v266;
  const llvm::APInt *v267;
  llvm::ValueHandleBase *v268;
  uint64_t v269;
  unsigned int v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  uint64_t v274;
  llvm::ValueHandleBase ***v275;
  uint64_t v276;
  uint64_t v277;
  llvm::Constant *v278;
  uint64_t *v279;
  uint64_t *v280;
  uint64_t *v281;
  llvm::Constant **v282;
  uint64_t *v283;
  uint64_t *v284;
  unsigned __int8 *v285;
  uint64_t v286;
  llvm::Constant *v287;
  uint64_t Not;
  uint64_t v289;
  unsigned __int8 *v290;
  llvm::Constant **v291;
  uint64_t v292;
  unsigned int v293;
  llvm::Constant *v294;
  _QWORD *v295;
  llvm::Constant *v296;
  llvm::Constant *v297;
  _QWORD *v298;
  llvm::Constant *v299;
  uint64_t *v300;
  _QWORD **v301;
  unint64_t v302;
  _QWORD *v303;
  uint64_t *v304;
  uint64_t *v305;
  _QWORD **v306;
  unint64_t v307;
  _QWORD *v308;
  uint64_t v309;
  uint64_t v310;
  void *v311;
  uint64_t *v312;
  unint64_t v313;
  _QWORD *v314;
  uint64_t v315;
  llvm::ValueHandleBase *v316;
  uint64_t *v317;
  unsigned __int8 *v318;
  char *v319;
  unsigned __int8 **v320;
  llvm::Constant **v321;
  uint64_t v322;
  unsigned int v323;
  llvm::Constant *v324;
  _QWORD *v325;
  llvm::Constant *v326;
  uint64_t v327;
  unsigned __int8 ***v328;
  uint64_t v329;
  unsigned int v330;
  uint64_t *v331;
  llvm::Type *v332;
  int v333;
  unsigned int v334;
  uint64_t *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t ****v340;
  uint64_t ***v341;
  int v342;
  int v343;
  unsigned int v344;
  unsigned int v345;
  uint64_t *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t ****v351;
  uint64_t ***v352;
  int v353;
  int v354;
  uint64_t ***v355;
  char *v356;
  unsigned int *v357;
  unsigned int *v358;
  unsigned __int8 *v359;
  unint64_t v360;
  uint64_t v361;
  char *v362;
  llvm::ValueHandleBase **v363;
  const llvm::APInt *v364;
  llvm::ValueHandleBase *v365;
  uint64_t v366;
  unsigned int v367;
  uint64_t v368;
  _QWORD *v369;
  uint64_t v370;
  uint64_t v371;
  llvm::ValueHandleBase ***v372;
  uint64_t v373;
  __int16 v374;
  uint64_t ***v375;
  char *v376;
  unsigned int *v377;
  unsigned int *v378;
  unsigned __int8 *v379;
  uint64_t v380;
  const llvm::APInt *v381;
  llvm::ValueHandleBase *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t ****v387;
  uint64_t ***v388;
  int v389;
  int v390;
  uint64_t ***v391;
  char *v392;
  unsigned int *v393;
  unsigned int *v394;
  uint64_t v395;
  char *v396;
  llvm::Value ***v397;
  llvm::Type *v398;
  llvm::Value **v399;
  uint64_t v400;
  unsigned int v401;
  uint64_t v402;
  _QWORD *v403;
  uint64_t v404;
  llvm::Value *v405;
  llvm::Value ****v406;
  llvm::Value *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  int v437;
  unsigned __int8 **v438;
  BOOL v439;
  unint64_t v440;
  void *__src;
  unsigned int v442;
  unsigned int v443[2];
  _QWORD *v444;
  uint64_t v445;
  unsigned int v446;
  __int16 v447;
  uint64_t v448;
  unsigned int v449;
  llvm::Constant **v450;
  char *v451;
  unint64_t v452;
  const char *v453;
  __int16 v454;

  v3 = *((_WORD *)a2 + 9);
  if ((v3 & 0x3E) != 0x20)
    return 0;
  v6 = (uint64_t)*(a2 - 8);
  v7 = (uint64_t)*(a2 - 4);
  v8 = v3 & 0x3F;
  v450 = 0;
  v9 = *(unsigned __int8 *)(v6 + 16);
  if (v9 != 5)
  {
    if (v9 != 58)
      goto LABEL_43;
    v10 = *(llvm::Constant ***)(v6 - 64);
    if (!v10)
      goto LABEL_43;
    v450 = *(llvm::Constant ***)(v6 - 64);
    v11 = *(llvm::Constant ***)(v6 - 32);
    if (!v11)
      goto LABEL_43;
LABEL_10:
    if (v10 == (llvm::Constant **)v7 || v11 == (llvm::Constant **)v7)
    {
      v15 = (char *)operator new(0x80uLL);
      v16 = v15 + 64;
      *((_DWORD *)v15 + 21) = *((_DWORD *)v15 + 21) & 0x38000000 | 2;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = 0;
      *((_QWORD *)v15 + 2) = 0;
      *((_QWORD *)v15 + 3) = v15 + 64;
      *((_QWORD *)v15 + 4) = 0;
      v17 = (llvm::Value ***)(v15 + 32);
      *((_QWORD *)v15 + 5) = 0;
      *((_QWORD *)v15 + 6) = 0;
      *((_QWORD *)v15 + 7) = v15 + 64;
      if (v10 == (llvm::Constant **)v7)
        v18 = (_DWORD **)v11;
      else
        v18 = (_DWORD **)v10;
      NullValue = llvm::Constant::getNullValue(*v450, v14);
      v454 = 257;
      goto LABEL_19;
    }
    v28 = *(unsigned __int8 *)(v7 + 16);
    if (v28 == 5)
    {
      if (*(_WORD *)(v7 + 18) != 30)
        goto LABEL_43;
      v31 = v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF);
      v29 = *(llvm::Constant ***)v31;
      if (!*(_QWORD *)v31)
        goto LABEL_43;
      v30 = *(_QWORD *)(v31 + 32);
      if (!v30)
        goto LABEL_43;
    }
    else
    {
      if (v28 != 58)
        goto LABEL_43;
      v29 = *(llvm::Constant ***)(v7 - 64);
      if (!v29)
        goto LABEL_43;
      v30 = *(_QWORD *)(v7 - 32);
      if (!v30)
        goto LABEL_43;
    }
    if (*((_BYTE *)v11 + 16) == 16 && *(_BYTE *)(v30 + 16) == 16)
    {
      v32 = *(_QWORD *)(v7 + 8);
      if (v32)
      {
        if (!*(_QWORD *)(v32 + 8))
        {
          v309 = *(_QWORD *)(a1 + 24);
          v310 = *((unsigned int *)v11 + 8);
          if (v310 > 0x40)
          {
            v311 = (void *)operator new[]();
            memcpy(v311, v11[3], ((unint64_t)(v310 + 63) >> 3) & 0x3FFFFFF8);
            v312 = *(uint64_t **)(v30 + 24);
            v313 = (unint64_t)(v310 + 63) >> 6;
            v314 = v311;
            do
            {
              v315 = *v312++;
              *v314++ ^= v315;
              --v313;
            }
            while (v313);
          }
          else
          {
            v311 = (void *)(*(_QWORD *)(v30 + 24) ^ (unint64_t)v11[3]);
          }
          LODWORD(v452) = v310;
          v451 = (char *)v311;
          v316 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v309 + 64), (llvm::LLVMContext *)&v451, a3);
          if (v452 >= 0x41 && v451)
            MEMORY[0x1CAA32F9C](v451, 0x1000C8000313F17);
          v317 = *(uint64_t **)(a1 + 24);
          v454 = 257;
          v318 = sub_1C506EC1C(v317, v29, (uint64_t)v316, (uint64_t)&v451);
          v319 = (char *)operator new(0x80uLL);
          v16 = v319 + 64;
          *((_DWORD *)v319 + 21) = *((_DWORD *)v319 + 21) & 0x38000000 | 2;
          *(_QWORD *)v319 = 0;
          *((_QWORD *)v319 + 1) = 0;
          *((_QWORD *)v319 + 2) = 0;
          *((_QWORD *)v319 + 3) = v319 + 64;
          *((_QWORD *)v319 + 4) = 0;
          v320 = (unsigned __int8 **)(v319 + 32);
          *((_QWORD *)v319 + 5) = 0;
          *((_QWORD *)v319 + 6) = 0;
          *((_QWORD *)v319 + 7) = v319 + 64;
          v321 = v450;
          v454 = 257;
          sub_1C4774CC4(*v450);
          *((_QWORD *)v319 + 8) = v322;
          *((_QWORD *)v319 + 9) = 0;
          v323 = *((_DWORD *)v319 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v319 + 20) = 81;
          *((_DWORD *)v319 + 21) = v323;
          *(_OWORD *)(v319 + 88) = 0u;
          *(_OWORD *)(v319 + 104) = 0u;
          *((_DWORD *)v319 + 30) = 0;
          if (*(_QWORD *)v319)
          {
            **((_QWORD **)v319 + 2) = *((_QWORD *)v319 + 1);
            v429 = *((_QWORD *)v319 + 1);
            if (v429)
              *(_QWORD *)(v429 + 16) = *((_QWORD *)v319 + 2);
          }
          *(_QWORD *)v319 = v321;
          v326 = v321[1];
          v325 = v321 + 1;
          v324 = v326;
          *((_QWORD *)v319 + 1) = v326;
          if (v326)
            *((_QWORD *)v324 + 2) = v319 + 8;
          *((_QWORD *)v319 + 2) = v325;
          *v325 = v319;
          if (*((_QWORD *)v319 + 4))
          {
            **((_QWORD **)v319 + 6) = *((_QWORD *)v319 + 5);
            v430 = *((_QWORD *)v319 + 5);
            if (v430)
              *(_QWORD *)(v430 + 16) = *((_QWORD *)v319 + 6);
          }
          *v320 = v318;
          if (v318)
          {
            v329 = *((_QWORD *)v318 + 1);
            v328 = (unsigned __int8 ***)(v318 + 8);
            v327 = v329;
            *((_QWORD *)v319 + 5) = v329;
            if (v329)
              *(_QWORD *)(v327 + 16) = v319 + 40;
            *((_QWORD *)v319 + 6) = v328;
            *v328 = v320;
          }
          *((_WORD *)v319 + 41) = v8;
          goto LABEL_137;
        }
      }
    }
    if (v10 == v29)
    {
      v15 = (char *)operator new(0x80uLL);
      v16 = v15 + 64;
      *((_DWORD *)v15 + 21) = *((_DWORD *)v15 + 21) & 0x38000000 | 2;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = 0;
      *((_QWORD *)v15 + 2) = 0;
      *((_QWORD *)v15 + 3) = v15 + 64;
      *((_QWORD *)v15 + 4) = 0;
      v218 = v15 + 32;
      *((_QWORD *)v15 + 5) = 0;
      *((_QWORD *)v15 + 6) = 0;
      *((_QWORD *)v15 + 7) = v15 + 64;
      v454 = 257;
      sub_1C4774CC4(*v11);
      *((_QWORD *)v15 + 8) = v219;
      *((_QWORD *)v15 + 9) = 0;
      v220 = *((_DWORD *)v15 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v15 + 20) = 81;
      *((_DWORD *)v15 + 21) = v220;
      *(_OWORD *)(v15 + 88) = 0u;
      *(_OWORD *)(v15 + 104) = 0u;
      *((_DWORD *)v15 + 30) = 0;
      if (*(_QWORD *)v15)
      {
        **((_QWORD **)v15 + 2) = *((_QWORD *)v15 + 1);
        v420 = *((_QWORD *)v15 + 1);
        if (v420)
          *(_QWORD *)(v420 + 16) = *((_QWORD *)v15 + 2);
      }
      *(_QWORD *)v15 = v11;
      v223 = v11[1];
      v222 = v11 + 1;
      v221 = v223;
      *((_QWORD *)v15 + 1) = v223;
      if (v223)
        *((_QWORD *)v221 + 2) = v15 + 8;
      *((_QWORD *)v15 + 2) = v222;
      *v222 = v15;
    }
    else
    {
      if (v10 == (llvm::Constant **)v30)
      {
        v15 = (char *)operator new(0x80uLL);
        v16 = v15 + 64;
        *((_DWORD *)v15 + 21) = *((_DWORD *)v15 + 21) & 0x38000000 | 2;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
        *((_QWORD *)v15 + 2) = 0;
        *((_QWORD *)v15 + 3) = v15 + 64;
        *((_QWORD *)v15 + 4) = 0;
        v231 = v15 + 32;
        *((_QWORD *)v15 + 5) = 0;
        *((_QWORD *)v15 + 6) = 0;
        *((_QWORD *)v15 + 7) = v15 + 64;
        v454 = 257;
        sub_1C4774CC4(*v11);
        *((_QWORD *)v15 + 8) = v232;
        *((_QWORD *)v15 + 9) = 0;
        v233 = *((_DWORD *)v15 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v15 + 20) = 81;
        *((_DWORD *)v15 + 21) = v233;
        *(_OWORD *)(v15 + 88) = 0u;
        *(_OWORD *)(v15 + 104) = 0u;
        *((_DWORD *)v15 + 30) = 0;
        if (*(_QWORD *)v15)
        {
          **((_QWORD **)v15 + 2) = *((_QWORD *)v15 + 1);
          v422 = *((_QWORD *)v15 + 1);
          if (v422)
            *(_QWORD *)(v422 + 16) = *((_QWORD *)v15 + 2);
        }
        *(_QWORD *)v15 = v11;
        v236 = v11[1];
        v235 = v11 + 1;
        v234 = v236;
        *((_QWORD *)v15 + 1) = v236;
        if (v236)
          *((_QWORD *)v234 + 2) = v15 + 8;
        *((_QWORD *)v15 + 2) = v235;
        *v235 = v15;
        goto LABEL_470;
      }
      if (v11 != v29)
      {
        if (v11 != (llvm::Constant **)v30)
          goto LABEL_43;
        v15 = (char *)operator new(0x80uLL);
        v16 = v15 + 64;
        *((_DWORD *)v15 + 21) = *((_DWORD *)v15 + 21) & 0x38000000 | 2;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
        *((_QWORD *)v15 + 2) = 0;
        *((_QWORD *)v15 + 3) = v15 + 64;
        *((_QWORD *)v15 + 4) = 0;
        v231 = v15 + 32;
        *((_QWORD *)v15 + 5) = 0;
        *((_QWORD *)v15 + 6) = 0;
        *((_QWORD *)v15 + 7) = v15 + 64;
        v291 = v450;
        v454 = 257;
        sub_1C4774CC4(*v450);
        *((_QWORD *)v15 + 8) = v292;
        *((_QWORD *)v15 + 9) = 0;
        v293 = *((_DWORD *)v15 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v15 + 20) = 81;
        *((_DWORD *)v15 + 21) = v293;
        *(_OWORD *)(v15 + 88) = 0u;
        *(_OWORD *)(v15 + 104) = 0u;
        *((_DWORD *)v15 + 30) = 0;
        if (*(_QWORD *)v15)
        {
          **((_QWORD **)v15 + 2) = *((_QWORD *)v15 + 1);
          v428 = *((_QWORD *)v15 + 1);
          if (v428)
            *(_QWORD *)(v428 + 16) = *((_QWORD *)v15 + 2);
        }
        *(_QWORD *)v15 = v291;
        v296 = v291[1];
        v295 = v291 + 1;
        v294 = v296;
        *((_QWORD *)v15 + 1) = v296;
        if (v296)
          *((_QWORD *)v294 + 2) = v15 + 8;
        *((_QWORD *)v15 + 2) = v295;
        *v295 = v15;
LABEL_470:
        if (*((_QWORD *)v15 + 4))
        {
          **((_QWORD **)v15 + 6) = *((_QWORD *)v15 + 5);
          v421 = *((_QWORD *)v15 + 5);
          if (v421)
            *(_QWORD *)(v421 + 16) = *((_QWORD *)v15 + 6);
        }
        *((_QWORD *)v15 + 4) = v29;
        v299 = v29[1];
        v298 = v29 + 1;
        v297 = v299;
        *((_QWORD *)v15 + 5) = v299;
        if (v299)
          *((_QWORD *)v297 + 2) = v15 + 40;
        *((_QWORD *)v15 + 6) = v298;
        *v298 = v231;
        goto LABEL_67;
      }
      v15 = (char *)operator new(0x80uLL);
      v16 = v15 + 64;
      *((_DWORD *)v15 + 21) = *((_DWORD *)v15 + 21) & 0x38000000 | 2;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = 0;
      *((_QWORD *)v15 + 2) = 0;
      *((_QWORD *)v15 + 3) = v15 + 64;
      *((_QWORD *)v15 + 4) = 0;
      v218 = v15 + 32;
      *((_QWORD *)v15 + 5) = 0;
      *((_QWORD *)v15 + 6) = 0;
      *((_QWORD *)v15 + 7) = v15 + 64;
      v246 = v450;
      v454 = 257;
      sub_1C4774CC4(*v450);
      *((_QWORD *)v15 + 8) = v247;
      *((_QWORD *)v15 + 9) = 0;
      v248 = *((_DWORD *)v15 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v15 + 20) = 81;
      *((_DWORD *)v15 + 21) = v248;
      *(_OWORD *)(v15 + 88) = 0u;
      *(_OWORD *)(v15 + 104) = 0u;
      *((_DWORD *)v15 + 30) = 0;
      if (*(_QWORD *)v15)
      {
        **((_QWORD **)v15 + 2) = *((_QWORD *)v15 + 1);
        v427 = *((_QWORD *)v15 + 1);
        if (v427)
          *(_QWORD *)(v427 + 16) = *((_QWORD *)v15 + 2);
      }
      *(_QWORD *)v15 = v246;
      v251 = v246[1];
      v250 = v246 + 1;
      v249 = v251;
      *((_QWORD *)v15 + 1) = v251;
      if (v251)
        *((_QWORD *)v249 + 2) = v15 + 8;
      *((_QWORD *)v15 + 2) = v250;
      *v250 = v15;
    }
    if (*((_QWORD *)v15 + 4))
    {
      **((_QWORD **)v15 + 6) = *((_QWORD *)v15 + 5);
      v419 = *((_QWORD *)v15 + 5);
      if (v419)
        *(_QWORD *)(v419 + 16) = *((_QWORD *)v15 + 6);
    }
    *((_QWORD *)v15 + 4) = v30;
    v254 = *(_QWORD *)(v30 + 8);
    v253 = (_QWORD *)(v30 + 8);
    v252 = v254;
    *((_QWORD *)v15 + 5) = v254;
    if (v254)
      *(_QWORD *)(v252 + 16) = v15 + 40;
    *((_QWORD *)v15 + 6) = v253;
    *v253 = v218;
    goto LABEL_67;
  }
  if (*(_WORD *)(v6 + 18) == 30)
  {
    v12 = (llvm::Constant ***)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF));
    v10 = *v12;
    if (*v12)
    {
      v450 = *v12;
      v11 = v12[4];
      if (v11)
        goto LABEL_10;
    }
  }
LABEL_43:
  v33 = *(unsigned __int8 *)(v7 + 16);
  if (v33 == 5)
  {
    if (*(_WORD *)(v7 + 18) != 30)
      goto LABEL_68;
    v36 = (llvm::Constant ***)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF));
    v34 = *v36;
    if (!*v36)
      goto LABEL_68;
    v450 = *v36;
    v35 = v36[4];
    if (!v35)
      goto LABEL_68;
  }
  else
  {
    if (v33 != 58)
      goto LABEL_68;
    v34 = *(llvm::Constant ***)(v7 - 64);
    if (!v34)
      goto LABEL_68;
    v450 = *(llvm::Constant ***)(v7 - 64);
    v35 = *(llvm::Constant ***)(v7 - 32);
    if (!v35)
      goto LABEL_68;
  }
  if (v34 == (llvm::Constant **)v6 || v35 == (llvm::Constant **)v6)
  {
    v15 = (char *)operator new(0x80uLL);
    v16 = v15 + 64;
    *((_DWORD *)v15 + 21) = *((_DWORD *)v15 + 21) & 0x38000000 | 2;
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    *((_QWORD *)v15 + 2) = 0;
    *((_QWORD *)v15 + 3) = v15 + 64;
    *((_QWORD *)v15 + 4) = 0;
    v39 = (llvm::Value ***)(v15 + 32);
    *((_QWORD *)v15 + 5) = 0;
    *((_QWORD *)v15 + 6) = 0;
    *((_QWORD *)v15 + 7) = v15 + 64;
    if (v34 == (llvm::Constant **)v6)
      v40 = v35;
    else
      v40 = v34;
    v41 = llvm::Constant::getNullValue(*v450, v38);
    v454 = 257;
    sub_1C4774CC4(*v40);
    *((_QWORD *)v15 + 8) = v42;
    *((_QWORD *)v15 + 9) = 0;
    v43 = *((_DWORD *)v15 + 21) & 0xC0000000 | 2;
    *((_DWORD *)v15 + 20) = 81;
    *((_DWORD *)v15 + 21) = v43;
    *(_OWORD *)(v15 + 88) = 0u;
    *(_OWORD *)(v15 + 104) = 0u;
    *((_DWORD *)v15 + 30) = 0;
    if (*(_QWORD *)v15)
    {
      **((_QWORD **)v15 + 2) = *((_QWORD *)v15 + 1);
      v414 = *((_QWORD *)v15 + 1);
      if (v414)
        *(_QWORD *)(v414 + 16) = *((_QWORD *)v15 + 2);
    }
    *(_QWORD *)v15 = v40;
    v46 = v40[1];
    v45 = v40 + 1;
    v44 = v46;
    *((_QWORD *)v15 + 1) = v46;
    if (v46)
      *((_QWORD *)v44 + 2) = v15 + 8;
    *((_QWORD *)v15 + 2) = v45;
    *v45 = v15;
    if (*((_QWORD *)v15 + 4))
    {
      **((_QWORD **)v15 + 6) = *((_QWORD *)v15 + 5);
      v415 = *((_QWORD *)v15 + 5);
      if (v415)
        *(_QWORD *)(v415 + 16) = *((_QWORD *)v15 + 6);
    }
    *v39 = v41;
    if (v41)
    {
      v49 = v41[1];
      v48 = (llvm::Value ****)(v41 + 1);
      v47 = v49;
      *((_QWORD *)v15 + 5) = v49;
      if (v49)
        *((_QWORD *)v47 + 2) = v15 + 40;
      *((_QWORD *)v15 + 6) = v48;
      *v48 = v39;
    }
    goto LABEL_67;
  }
LABEL_68:
  v50 = *(_QWORD *)(v6 + 8);
  if (!v50 || *(_QWORD *)(v50 + 8))
    goto LABEL_101;
  if (v9 == 5)
  {
    if (*(_WORD *)(v6 + 18) != 28)
      goto LABEL_86;
    v55 = v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF);
    v51 = *(llvm::Constant ***)v55;
    if (!*(_QWORD *)v55)
      goto LABEL_86;
    v450 = *(llvm::Constant ***)v55;
    v52 = *(llvm::Constant ***)(v55 + 32);
    if (!v52)
      goto LABEL_86;
LABEL_83:
    v56 = *(_QWORD *)(v7 + 8);
    if (!v56 || *(_QWORD *)(v56 + 8))
    {
LABEL_85:
      if (v9 != 5)
        goto LABEL_91;
LABEL_86:
      if (*(_WORD *)(v6 + 18) != 29)
        goto LABEL_91;
      v57 = v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF);
      v53 = *(_QWORD **)v57;
      if (!*(_QWORD *)v57)
        goto LABEL_91;
      v54 = *(_QWORD *)(v57 + 32);
      if (!v54)
        goto LABEL_91;
      goto LABEL_89;
    }
    if (v33 == 5)
    {
      if (*(_WORD *)(v7 + 18) != 28)
        goto LABEL_85;
      v281 = (uint64_t *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF));
      v224 = *v281;
      if (!*v281)
        goto LABEL_85;
      v225 = (llvm::Constant **)v281[4];
      if (!v225)
        goto LABEL_85;
    }
    else
    {
      if (v33 != 56)
        goto LABEL_85;
      v224 = *(_QWORD *)(v7 - 64);
      if (!v224)
        goto LABEL_85;
      v225 = *(llvm::Constant ***)(v7 - 32);
      if (!v225)
        goto LABEL_85;
    }
    if (v51 == (llvm::Constant **)v224)
    {
      v282 = v51;
      v224 = (uint64_t)v225;
    }
    else
    {
      if (v51 != v225)
      {
        if (v52 == (llvm::Constant **)v224)
        {
          v282 = v52;
          v224 = (uint64_t)v225;
        }
        else
        {
          v282 = v52;
          if (v52 != v225)
            goto LABEL_85;
        }
LABEL_512:
        v331 = *(uint64_t **)(a1 + 24);
        v454 = 257;
        v290 = sub_1C506EC1C(v331, v51, v224, (uint64_t)&v451);
        v289 = *(_QWORD *)(a1 + 24);
        v454 = 257;
        Not = (uint64_t)v282;
LABEL_513:
        v18 = (_DWORD **)sub_1C4D89BCC(v289, v290, Not, (uint64_t)&v451);
        v15 = (char *)operator new(0x80uLL);
        v16 = v15 + 64;
        *((_DWORD *)v15 + 21) = *((_DWORD *)v15 + 21) & 0x38000000 | 2;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
        *((_QWORD *)v15 + 2) = 0;
        *((_QWORD *)v15 + 3) = v15 + 64;
        *((_QWORD *)v15 + 4) = 0;
        v17 = (llvm::Value ***)(v15 + 32);
        *((_QWORD *)v15 + 5) = 0;
        *((_QWORD *)v15 + 6) = 0;
        *((_QWORD *)v15 + 7) = v15 + 64;
        NullValue = llvm::Constant::getNullValue((llvm::Constant *)*v18, v332);
        v454 = 257;
LABEL_19:
        sub_1C4774CC4(*v18);
        *((_QWORD *)v15 + 8) = v20;
        *((_QWORD *)v15 + 9) = 0;
        v21 = *((_DWORD *)v15 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v15 + 20) = 81;
        *((_DWORD *)v15 + 21) = v21;
        *(_OWORD *)(v15 + 88) = 0u;
        *(_OWORD *)(v15 + 104) = 0u;
        *((_DWORD *)v15 + 30) = 0;
        if (*(_QWORD *)v15)
        {
          **((_QWORD **)v15 + 2) = *((_QWORD *)v15 + 1);
          v412 = *((_QWORD *)v15 + 1);
          if (v412)
            *(_QWORD *)(v412 + 16) = *((_QWORD *)v15 + 2);
        }
        *(_QWORD *)v15 = v18;
        v24 = v18[1];
        v23 = v18 + 1;
        v22 = v24;
        *((_QWORD *)v15 + 1) = v24;
        if (v24)
          *((_QWORD *)v22 + 2) = v15 + 8;
        *((_QWORD *)v15 + 2) = v23;
        *v23 = v15;
        if (*((_QWORD *)v15 + 4))
        {
          **((_QWORD **)v15 + 6) = *((_QWORD *)v15 + 5);
          v413 = *((_QWORD *)v15 + 5);
          if (v413)
            *(_QWORD *)(v413 + 16) = *((_QWORD *)v15 + 6);
        }
        *v17 = NullValue;
        if (NullValue)
        {
          v27 = NullValue[1];
          v26 = (llvm::Value ****)(NullValue + 1);
          v25 = v27;
          *((_QWORD *)v15 + 5) = v27;
          if (v27)
            *((_QWORD *)v25 + 2) = v15 + 40;
          *((_QWORD *)v15 + 6) = v26;
          *v26 = v17;
        }
LABEL_67:
        *((_WORD *)v15 + 41) = v8;
LABEL_137:
        llvm::Value::setName((uint64_t ***)v16, (uint64_t)&v451);
        return v16;
      }
      v282 = v51;
    }
    v51 = v52;
    goto LABEL_512;
  }
  if (v9 != 57)
  {
    if (v9 != 56)
      goto LABEL_91;
    v51 = *(llvm::Constant ***)(v6 - 64);
    if (!v51)
      goto LABEL_91;
    v450 = *(llvm::Constant ***)(v6 - 64);
    v52 = *(llvm::Constant ***)(v6 - 32);
    if (!v52)
      goto LABEL_91;
    goto LABEL_83;
  }
  v53 = *(_QWORD **)(v6 - 64);
  if (v53)
  {
    v54 = *(_QWORD *)(v6 - 32);
    if (v54)
    {
      if (*(unsigned __int8 *)(v54 + 16) <= 0x14u)
      {
LABEL_89:
        v58 = *(_QWORD *)(v7 + 8);
        if (!v58 || *(_QWORD *)(v58 + 8))
          goto LABEL_91;
        if (v33 == 5)
        {
          if (*(_WORD *)(v7 + 18) != 29)
            goto LABEL_91;
          v283 = (uint64_t *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF));
          v226 = *v283;
          if (!*v283)
            goto LABEL_91;
          v227 = v283[4];
        }
        else
        {
          if (v33 != 57)
            goto LABEL_91;
          v226 = *(_QWORD *)(v7 - 64);
          if (!v226)
            goto LABEL_91;
          v227 = *(_QWORD *)(v7 - 32);
        }
        if (v54 != v227)
          goto LABEL_91;
        v284 = *(uint64_t **)(a1 + 24);
        v454 = 257;
        v285 = sub_1C506EC1C(v284, v53, v226, (uint64_t)&v451);
        v286 = *(_QWORD *)(a1 + 24);
        Not = llvm::ConstantExpr::getNot((llvm::Constant **)v54, v287);
        v454 = 257;
        v289 = v286;
        v290 = v285;
        goto LABEL_513;
      }
    }
  }
LABEL_91:
  v451 = (char *)&v450;
  if (sub_1C4B0378C((_QWORD **)&v451, v6))
  {
    v59 = *(unsigned __int8 *)(v7 + 16);
    if (v59 == 5)
    {
      if (*(_WORD *)(v7 + 18) != 28)
        goto LABEL_101;
      v61 = v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF);
      v60 = *(unsigned __int8 **)v61;
      if (!*(_QWORD *)v61)
        goto LABEL_101;
      v16 = *(char **)(v61 + 32);
      if (!v16)
        goto LABEL_101;
    }
    else
    {
      if (v59 != 56)
        goto LABEL_101;
      v60 = *(unsigned __int8 **)(v7 - 64);
      if (!v60)
        goto LABEL_101;
      v16 = *(char **)(v7 - 32);
      if (!v16)
        goto LABEL_101;
    }
    if (v16[16] == 16)
      goto LABEL_220;
  }
LABEL_101:
  v62 = *(_QWORD *)(v7 + 8);
  if (!v62 || *(_QWORD *)(v62 + 8))
    goto LABEL_103;
  v109 = *(unsigned __int8 *)(v6 + 16);
  if (v109 == 5)
  {
    if (*(_WORD *)(v6 + 18) != 28)
      goto LABEL_103;
    v136 = v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF);
    v60 = *(unsigned __int8 **)v136;
    if (!*(_QWORD *)v136)
      goto LABEL_103;
    v16 = *(char **)(v136 + 32);
    if (!v16 || v16[16] != 16)
      goto LABEL_103;
  }
  else
  {
    if (v109 != 56)
      goto LABEL_103;
    v60 = *(unsigned __int8 **)(v6 - 64);
    if (!v60)
      goto LABEL_103;
    v16 = *(char **)(v6 - 32);
    if (!v16 || v16[16] != 16)
      goto LABEL_103;
  }
  v444 = &v450;
  if ((sub_1C4B0378C(&v444, v7) & 1) == 0)
    goto LABEL_103;
LABEL_220:
  v449 = *((_DWORD *)v16 + 8);
  if (v449 > 0x40)
  {
    v448 = operator new[]();
    memcpy((void *)v448, *((const void **)v16 + 3), (((unint64_t)v449 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v448 = *((_QWORD *)v16 + 3);
  }
  llvm::APInt::operator+=((uint64_t)&v448, 1uLL);
  v183 = v449;
  v184 = v448;
  v449 = 0;
  if (v183 > 0x40)
  {
    v188 = 0;
    v189 = (unint64_t)(v183 + 63) >> 6;
    v190 = (int8x8_t *)v448;
    v191 = v189;
    do
    {
      v192 = *v190++;
      v193 = (uint8x8_t)vcnt_s8(v192);
      v193.i16[0] = vaddlv_u8(v193);
      v188 += v193.i32[0];
      --v191;
    }
    while (v191);
    if (v188 != 1 || (v186 = *((_DWORD *)*v450 + 2), v186 != 13))
    {
      v199 = 1;
LABEL_344:
      if (v184)
        MEMORY[0x1CAA32F9C](v184, 0x1000C8000313F17);
      goto LABEL_346;
    }
    v194 = 0;
    do
    {
      if (v189-- < 1)
        break;
      v196 = *(_QWORD *)(v448 + 8 * v189);
      v194 += __clz(v196);
    }
    while (!v196);
    v197 = v183 | 0xFFFFFFC0;
    if ((v183 & 0x3F) == 0)
      v197 = 0;
    v187 = v194 + v197;
  }
  else
  {
    v185 = (uint8x8_t)vcnt_s8((int8x8_t)v448);
    v185.i16[0] = vaddlv_u8(v185);
    if (v185.u32[0] != 1)
      goto LABEL_103;
    v186 = *((_DWORD *)*v450 + 2);
    if (v186 != 13)
      goto LABEL_103;
    v187 = v183 + __clz(v448) - 64;
  }
  v198 = v183 + ~v187;
  v199 = v198 != v186 >> 8;
  if (v198 == v186 >> 8)
  {
    v437 = v183;
    v439 = v198 != v186 >> 8;
    v200 = (char *)operator new(0x80uLL);
    v16 = v200 + 64;
    *((_DWORD *)v200 + 21) = *((_DWORD *)v200 + 21) & 0x38000000 | 2;
    *(_QWORD *)v200 = 0;
    *((_QWORD *)v200 + 1) = 0;
    *((_QWORD *)v200 + 2) = 0;
    *((_QWORD *)v200 + 3) = v200 + 64;
    *((_QWORD *)v200 + 4) = 0;
    v438 = (unsigned __int8 **)(v200 + 32);
    *((_QWORD *)v200 + 5) = 0;
    *((_QWORD *)v200 + 6) = 0;
    *((_QWORD *)v200 + 7) = v200 + 64;
    v201 = v450;
    v202 = *(uint64_t **)(a1 + 24);
    v203 = *v450;
    v454 = 257;
    v204 = sub_1C4773E38(v202, 38, v60, (uint64_t)v203, (uint64_t)&v451);
    v447 = 257;
    sub_1C4774CC4(*v201);
    *((_QWORD *)v200 + 8) = v205;
    *((_QWORD *)v200 + 9) = 0;
    v206 = *((_DWORD *)v200 + 21) & 0xC0000000 | 2;
    *((_DWORD *)v200 + 20) = 81;
    *((_DWORD *)v200 + 21) = v206;
    *(_OWORD *)(v200 + 88) = 0u;
    *(_OWORD *)(v200 + 104) = 0u;
    *((_DWORD *)v200 + 30) = 0;
    if (*(_QWORD *)v200)
    {
      **((_QWORD **)v200 + 2) = *((_QWORD *)v200 + 1);
      v425 = *((_QWORD *)v200 + 1);
      if (v425)
        *(_QWORD *)(v425 + 16) = *((_QWORD *)v200 + 2);
    }
    *(_QWORD *)v200 = v201;
    v208 = v201 + 1;
    v207 = v201[1];
    *((_QWORD *)v200 + 1) = v207;
    if (v207)
      *((_QWORD *)v207 + 2) = v200 + 8;
    *((_QWORD *)v200 + 2) = v208;
    *v208 = v200;
    if (*((_QWORD *)v200 + 4))
    {
      **((_QWORD **)v200 + 6) = *((_QWORD *)v200 + 5);
      v426 = *((_QWORD *)v200 + 5);
      if (v426)
        *(_QWORD *)(v426 + 16) = *((_QWORD *)v200 + 6);
    }
    *v438 = v204;
    if (v204)
    {
      v211 = *((_QWORD *)v204 + 1);
      v210 = (unsigned __int8 ***)(v204 + 8);
      v209 = v211;
      *((_QWORD *)v200 + 5) = v211;
      if (v211)
        *(_QWORD *)(v209 + 16) = v200 + 40;
      *((_QWORD *)v200 + 6) = v210;
      *v210 = v438;
    }
    *((_WORD *)v200 + 41) = v8;
    llvm::Value::setName((uint64_t ***)v16, (uint64_t)&v444);
    v199 = v439;
    LODWORD(v183) = v437;
  }
  if (v183 >= 0x41)
    goto LABEL_344;
LABEL_346:
  if (!v199)
    return v16;
LABEL_103:
  v63 = *(_QWORD *)(v6 + 8);
  if (!v63 || *(_QWORD *)(v63 + 8))
  {
    *(_QWORD *)v443 = 0;
    goto LABEL_106;
  }
  v102 = *(unsigned __int8 *)(v6 + 16);
  if (v102 > 0x35)
  {
    if (v102 == 55)
    {
      v110 = *(llvm::Constant ***)(v6 - 64);
      if (!v110)
        goto LABEL_269;
      v450 = *(llvm::Constant ***)(v6 - 64);
      v111 = *(_QWORD *)(v6 - 32);
      if (!v111 || *(_BYTE *)(v111 + 16) != 16)
        goto LABEL_269;
LABEL_256:
      v155 = *(_QWORD *)(v7 + 8);
      if (!v155 || *(_QWORD *)(v155 + 8))
      {
LABEL_258:
        if (v102 != 5)
          goto LABEL_154;
LABEL_259:
        if (*(_WORD *)(v6 + 18) != 25
          || (v156 = v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF), (v103 = *(llvm::Constant ***)v156) == 0)
          || (v450 = *(llvm::Constant ***)v156, (v104 = *(_QWORD *)(v156 + 32)) == 0)
          || *(_BYTE *)(v104 + 16) != 16)
        {
          *(_QWORD *)v443 = 0;
          v451 = (char *)&v450;
          v452 = (unint64_t)v443;
LABEL_291:
          v158 = *(unsigned __int16 *)(v6 + 18);
          goto LABEL_292;
        }
        goto LABEL_263;
      }
      v240 = *(unsigned __int8 *)(v7 + 16);
      if (v240 == 5)
      {
        if (*(_WORD *)(v7 + 18) != 27)
          goto LABEL_258;
        v305 = (uint64_t *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF));
        v238 = *v305;
        if (!*v305)
          goto LABEL_258;
        v241 = v305[4];
      }
      else
      {
        if (v240 != 55)
          goto LABEL_258;
        v238 = *(_QWORD *)(v7 - 64);
        if (!v238)
          goto LABEL_258;
        v241 = *(_QWORD *)(v7 - 32);
      }
      if (v111 != v241)
        goto LABEL_258;
LABEL_489:
      v306 = (_QWORD **)(v111 + 24);
      v307 = *(unsigned int *)(v111 + 32);
      if (v307 >= 0x41)
      {
        if (v307 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v111 + 24)) > 0x40)
        {
          v330 = v307;
          goto LABEL_519;
        }
        v308 = (_QWORD *)**v306;
      }
      else
      {
        v308 = *v306;
      }
      v330 = v307;
      if ((unint64_t)v308 <= v307)
        v330 = v308;
LABEL_519:
      if (v307 <= v330 || !v330)
        goto LABEL_258;
      v335 = *(uint64_t **)(a1 + 24);
      if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
      {
        v357 = 0;
        v356 = &byte_1C871356D;
LABEL_543:
        v454 = 773;
        v451 = v356;
        v452 = (unint64_t)v357;
        v453 = ".unshifted";
        v359 = sub_1C506EC1C(v335, v110, v238, (uint64_t)&v451);
        LODWORD(v445) = v307;
        if (v307 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v444, 0, 0);
          v361 = 1 << v330;
          if (v445 > 0x40)
          {
            v444[v330 >> 6] |= v361;
LABEL_546:
            v362 = (char *)operator new(0x80uLL);
            v16 = v362 + 64;
            *((_DWORD *)v362 + 21) = *((_DWORD *)v362 + 21) & 0x38000000 | 2;
            *(_QWORD *)v362 = 0;
            *((_QWORD *)v362 + 1) = 0;
            *((_QWORD *)v362 + 4) = 0;
            v363 = (llvm::ValueHandleBase **)(v362 + 32);
            *((_QWORD *)v362 + 2) = 0;
            *((_QWORD *)v362 + 3) = v362 + 64;
            *((_QWORD *)v362 + 5) = 0;
            *((_QWORD *)v362 + 6) = 0;
            *((_QWORD *)v362 + 7) = v362 + 64;
            v365 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(_QWORD *)(a1 + 24) + 64), (llvm::LLVMContext *)&v444, v364);
            v454 = 257;
            sub_1C4774CC4(*(_DWORD **)v359);
            *((_QWORD *)v362 + 8) = v366;
            *((_QWORD *)v362 + 9) = 0;
            v367 = *((_DWORD *)v362 + 21) & 0xC0000000 | 2;
            *((_DWORD *)v362 + 20) = 81;
            *((_DWORD *)v362 + 21) = v367;
            *(_OWORD *)(v362 + 88) = 0u;
            *(_OWORD *)(v362 + 104) = 0u;
            *((_DWORD *)v362 + 30) = 0;
            if (*(_QWORD *)v362)
            {
              **((_QWORD **)v362 + 2) = *((_QWORD *)v362 + 1);
              v431 = *((_QWORD *)v362 + 1);
              if (v431)
                *(_QWORD *)(v431 + 16) = *((_QWORD *)v362 + 2);
            }
            *(_QWORD *)v362 = v359;
            v370 = *((_QWORD *)v359 + 1);
            v369 = v359 + 8;
            v368 = v370;
            *((_QWORD *)v362 + 1) = v370;
            if (v370)
              *(_QWORD *)(v368 + 16) = v362 + 8;
            *((_QWORD *)v362 + 2) = v369;
            *v369 = v362;
            if (*((_QWORD *)v362 + 4))
            {
              **((_QWORD **)v362 + 6) = *((_QWORD *)v362 + 5);
              v432 = *((_QWORD *)v362 + 5);
              if (v432)
                *(_QWORD *)(v432 + 16) = *((_QWORD *)v362 + 6);
            }
            *v363 = v365;
            if (v365)
            {
              v373 = *((_QWORD *)v365 + 1);
              v372 = (llvm::ValueHandleBase ***)((char *)v365 + 8);
              v371 = v373;
              *((_QWORD *)v362 + 5) = v373;
              if (v373)
                *(_QWORD *)(v371 + 16) = v362 + 40;
              *((_QWORD *)v362 + 6) = v372;
              *v372 = v363;
            }
            if (v8 == 33)
              v374 = 35;
            else
              v374 = 36;
            *((_WORD *)v362 + 41) = v374;
            goto LABEL_581;
          }
          v360 = (unint64_t)v444;
        }
        else
        {
          v360 = 0;
          v361 = 1 << v330;
        }
        v444 = (_QWORD *)(v360 | v361);
        goto LABEL_546;
      }
      v336 = ***a2;
      v337 = *(_QWORD *)(v336 + 152);
      v338 = *(unsigned int *)(v336 + 168);
      if ((_DWORD)v338)
      {
        LODWORD(v339) = (v338 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        v340 = (uint64_t ****)(v337 + 16 * v339);
        v341 = *v340;
        if (*v340 == a2)
        {
LABEL_542:
          v355 = v340[1];
          v358 = (unsigned int *)*v355;
          v356 = (char *)(v355 + 2);
          v357 = v358;
          goto LABEL_543;
        }
        v342 = 1;
        while (v341 != (uint64_t ***)-4096)
        {
          v343 = v339 + v342++;
          v339 = v343 & (v338 - 1);
          v341 = *(uint64_t ****)(v337 + 16 * v339);
          if (v341 == a2)
          {
            v340 = (uint64_t ****)(v337 + 16 * v339);
            goto LABEL_542;
          }
        }
      }
      v340 = (uint64_t ****)(v337 + 16 * v338);
      goto LABEL_542;
    }
    if (v102 != 54)
      goto LABEL_265;
    v110 = *(llvm::Constant ***)(v6 - 64);
    if (!v110)
      goto LABEL_269;
    v450 = *(llvm::Constant ***)(v6 - 64);
    v111 = *(_QWORD *)(v6 - 32);
    if (!v111 || *(_BYTE *)(v111 + 16) != 16)
      goto LABEL_269;
    goto LABEL_244;
  }
  if (v102 == 5)
  {
    v151 = *(unsigned __int16 *)(v6 + 18);
    if (v151 != 26)
      goto LABEL_248;
    v152 = v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF);
    v110 = *(llvm::Constant ***)v152;
    if (!*(_QWORD *)v152)
      goto LABEL_259;
    v450 = *(llvm::Constant ***)v152;
    v111 = *(_QWORD *)(v152 + 32);
    if (!v111 || *(_BYTE *)(v111 + 16) != 16)
      goto LABEL_259;
LABEL_244:
    v153 = *(_QWORD *)(v7 + 8);
    if (!v153 || *(_QWORD *)(v153 + 8))
      goto LABEL_246;
    v237 = *(unsigned __int8 *)(v7 + 16);
    if (v237 == 5)
    {
      if (*(_WORD *)(v7 + 18) == 26)
      {
        v304 = (uint64_t *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF));
        v238 = *v304;
        if (*v304)
        {
          v239 = v304[4];
LABEL_483:
          if (v111 == v239)
            goto LABEL_489;
        }
      }
    }
    else if (v237 == 54)
    {
      v238 = *(_QWORD *)(v7 - 64);
      if (v238)
      {
        v239 = *(_QWORD *)(v7 - 32);
        goto LABEL_483;
      }
    }
LABEL_246:
    if (v102 != 5)
      goto LABEL_265;
    v151 = *(unsigned __int16 *)(v6 + 18);
LABEL_248:
    if (v151 != 27)
      goto LABEL_259;
    v154 = v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF);
    v110 = *(llvm::Constant ***)v154;
    if (!*(_QWORD *)v154)
      goto LABEL_259;
    v450 = *(llvm::Constant ***)v154;
    v111 = *(_QWORD *)(v154 + 32);
    if (!v111 || *(_BYTE *)(v111 + 16) != 16)
      goto LABEL_259;
    goto LABEL_256;
  }
LABEL_154:
  if (v102 != 53)
    goto LABEL_265;
  v103 = *(llvm::Constant ***)(v6 - 64);
  if (!v103
    || (v450 = *(llvm::Constant ***)(v6 - 64), (v104 = *(_QWORD *)(v6 - 32)) == 0)
    || *(_BYTE *)(v104 + 16) != 16)
  {
LABEL_269:
    *(_QWORD *)v443 = 0;
    v451 = (char *)&v450;
    goto LABEL_106;
  }
LABEL_263:
  v157 = *(_QWORD *)(v7 + 8);
  if (v157 && !*(_QWORD *)(v157 + 8))
  {
    v228 = *(unsigned __int8 *)(v7 + 16);
    if (v228 == 5)
    {
      if (*(_WORD *)(v7 + 18) != 25)
        goto LABEL_265;
      v300 = (uint64_t *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF));
      v229 = *v300;
      if (!*v300)
        goto LABEL_265;
      v230 = v300[4];
    }
    else
    {
      if (v228 != 53)
        goto LABEL_265;
      v229 = *(_QWORD *)(v7 - 64);
      if (!v229)
        goto LABEL_265;
      v230 = *(_QWORD *)(v7 - 32);
    }
    if (v104 != v230)
      goto LABEL_265;
    v301 = (_QWORD **)(v104 + 24);
    v302 = *(unsigned int *)(v104 + 32);
    if (v302 >= 0x41)
    {
      v440 = *(unsigned int *)(v104 + 32);
      v333 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v104 + 24));
      v302 = v440;
      if ((v440 - v333) > 0x40)
      {
        v334 = v440;
        goto LABEL_532;
      }
      v303 = (_QWORD *)**v301;
    }
    else
    {
      v303 = *v301;
    }
    v334 = v302;
    if ((unint64_t)v303 <= v302)
      v334 = v303;
LABEL_532:
    v344 = v302 - v334;
    if (v302 <= v334 || !v334)
      goto LABEL_265;
    v345 = v302;
    v346 = *(uint64_t **)(a1 + 24);
    if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    {
      v377 = 0;
      v376 = &byte_1C871356D;
LABEL_561:
      v454 = 773;
      v451 = v376;
      v452 = (unint64_t)v377;
      v453 = ".unshifted";
      v379 = sub_1C506EC1C(v346, v103, v229, (uint64_t)&v451);
      LODWORD(v445) = v345;
      if (v345 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v444, 0, 0);
      else
        v444 = 0;
      sub_1C4912E54(&v444, 0, v344);
      v380 = *(_QWORD *)(a1 + 24);
      v382 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v380 + 64), (llvm::LLVMContext *)&v444, v381);
      if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
      {
        v393 = 0;
        v392 = &byte_1C871356D;
LABEL_572:
        v454 = 773;
        v451 = v392;
        v452 = (unint64_t)v393;
        v453 = ".mask";
        v395 = sub_1C4D89BCC(v380, v379, (uint64_t)v382, (uint64_t)&v451);
        v396 = (char *)operator new(0x80uLL);
        v16 = v396 + 64;
        *((_DWORD *)v396 + 21) = *((_DWORD *)v396 + 21) & 0x38000000 | 2;
        *(_QWORD *)v396 = 0;
        *((_QWORD *)v396 + 1) = 0;
        *((_QWORD *)v396 + 2) = 0;
        *((_QWORD *)v396 + 3) = v396 + 64;
        *((_QWORD *)v396 + 4) = 0;
        v397 = (llvm::Value ***)(v396 + 32);
        *((_QWORD *)v396 + 5) = 0;
        *((_QWORD *)v396 + 6) = 0;
        *((_QWORD *)v396 + 7) = v396 + 64;
        v399 = llvm::Constant::getNullValue(*(llvm::Constant **)v104, v398);
        v454 = 257;
        sub_1C4774CC4(*(_DWORD **)v395);
        *((_QWORD *)v396 + 8) = v400;
        *((_QWORD *)v396 + 9) = 0;
        v401 = *((_DWORD *)v396 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v396 + 20) = 81;
        *((_DWORD *)v396 + 21) = v401;
        *(_OWORD *)(v396 + 88) = 0u;
        *(_OWORD *)(v396 + 104) = 0u;
        *((_DWORD *)v396 + 30) = 0;
        if (*(_QWORD *)v396)
        {
          **((_QWORD **)v396 + 2) = *((_QWORD *)v396 + 1);
          v433 = *((_QWORD *)v396 + 1);
          if (v433)
            *(_QWORD *)(v433 + 16) = *((_QWORD *)v396 + 2);
        }
        *(_QWORD *)v396 = v395;
        v404 = *(_QWORD *)(v395 + 8);
        v403 = (_QWORD *)(v395 + 8);
        v402 = v404;
        *((_QWORD *)v396 + 1) = v404;
        if (v404)
          *(_QWORD *)(v402 + 16) = v396 + 8;
        *((_QWORD *)v396 + 2) = v403;
        *v403 = v396;
        if (*((_QWORD *)v396 + 4))
        {
          **((_QWORD **)v396 + 6) = *((_QWORD *)v396 + 5);
          v434 = *((_QWORD *)v396 + 5);
          if (v434)
            *(_QWORD *)(v434 + 16) = *((_QWORD *)v396 + 6);
        }
        *v397 = v399;
        if (v399)
        {
          v407 = v399[1];
          v406 = (llvm::Value ****)(v399 + 1);
          v405 = v407;
          *((_QWORD *)v396 + 5) = v407;
          if (v407)
            *((_QWORD *)v405 + 2) = v396 + 40;
          *((_QWORD *)v396 + 6) = v406;
          *v406 = v397;
        }
        *((_WORD *)v396 + 41) = v8;
LABEL_581:
        llvm::Value::setName((uint64_t ***)v16, (uint64_t)&v451);
        goto LABEL_582;
      }
      v383 = ***a2;
      v384 = *(_QWORD *)(v383 + 152);
      v385 = *(unsigned int *)(v383 + 168);
      if ((_DWORD)v385)
      {
        LODWORD(v386) = (v385 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        v387 = (uint64_t ****)(v384 + 16 * v386);
        v388 = *v387;
        if (*v387 == a2)
        {
LABEL_571:
          v391 = v387[1];
          v394 = (unsigned int *)*v391;
          v392 = (char *)(v391 + 2);
          v393 = v394;
          goto LABEL_572;
        }
        v389 = 1;
        while (v388 != (uint64_t ***)-4096)
        {
          v390 = v386 + v389++;
          v386 = v390 & (v385 - 1);
          v388 = *(uint64_t ****)(v384 + 16 * v386);
          if (v388 == a2)
          {
            v387 = (uint64_t ****)(v384 + 16 * v386);
            goto LABEL_571;
          }
        }
      }
      v387 = (uint64_t ****)(v384 + 16 * v385);
      goto LABEL_571;
    }
    v347 = ***a2;
    v348 = *(_QWORD *)(v347 + 152);
    v349 = *(unsigned int *)(v347 + 168);
    if ((_DWORD)v349)
    {
      LODWORD(v350) = (v349 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v351 = (uint64_t ****)(v348 + 16 * v350);
      v352 = *v351;
      if (*v351 == a2)
      {
LABEL_560:
        v375 = v351[1];
        v378 = (unsigned int *)*v375;
        v376 = (char *)(v375 + 2);
        v377 = v378;
        goto LABEL_561;
      }
      v353 = 1;
      while (v352 != (uint64_t ***)-4096)
      {
        v354 = v350 + v353++;
        v350 = v354 & (v349 - 1);
        v352 = *(uint64_t ****)(v348 + 16 * v350);
        if (v352 == a2)
        {
          v351 = (uint64_t ****)(v348 + 16 * v350);
          goto LABEL_560;
        }
      }
    }
    v351 = (uint64_t ****)(v348 + 16 * v349);
    goto LABEL_560;
  }
LABEL_265:
  *(_QWORD *)v443 = 0;
  v451 = (char *)&v450;
  v452 = (unint64_t)v443;
  if (v102 <= 0x1B && v102 != 5)
    goto LABEL_106;
  if (v102 <= 0x1B)
    goto LABEL_291;
  v158 = v102 - 28;
LABEL_292:
  if (v158 != 38)
    goto LABEL_106;
  v174 = *(_DWORD *)(v6 + 20);
  v175 = (v174 & 0x40000000) != 0 ? *(uint64_t **)(v6 - 8) : (uint64_t *)(v6 - 32 * (v174 & 0x7FFFFFF));
  v180 = *v175;
  v181 = *(_QWORD *)(v180 + 8);
  if (!v181 || *(_QWORD *)(v181 + 8))
    goto LABEL_106;
  v182 = *(unsigned __int8 *)(v180 + 16);
  if (v182 == 5)
  {
    if (*(_WORD *)(v180 + 18) != 26)
      goto LABEL_106;
    if (!*(_QWORD *)(v180 - 32 * (*(_DWORD *)(v180 + 20) & 0x7FFFFFF)))
      goto LABEL_106;
    v450 = *(llvm::Constant ***)(v180 - 32 * (*(_DWORD *)(v180 + 20) & 0x7FFFFFF));
    if (!sub_1C4E7B154((_QWORD **)&v452, *(_QWORD *)(v180 - 32 * (*(_DWORD *)(v180 + 20) & 0x7FFFFFF) + 32)))goto LABEL_106;
  }
  else
  {
    if (v182 != 54)
      goto LABEL_106;
    if (!*(_QWORD *)(v180 - 64))
      goto LABEL_106;
    v450 = *(llvm::Constant ***)(v180 - 64);
    if ((sub_1C4E7B154((_QWORD **)&v452, *(_QWORD *)(v180 - 32)) & 1) == 0)
      goto LABEL_106;
  }
  if (*(_BYTE *)(v7 + 16) != 16)
    goto LABEL_106;
  v255 = v450[1];
  if (v255)
  {
    if (!*((_QWORD *)v255 + 1))
      goto LABEL_106;
  }
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*v450);
  if ((_DWORD)v256 == 1)
  if (*(_QWORD *)v443 >= (unint64_t)PrimitiveSizeInBits)
  {
LABEL_106:
    v64 = (uint64_t)*(a2 - 8);
    v65 = (uint64_t)*(a2 - 4);
    if (*(_BYTE *)(v64 + 16) == 84
      && (v66 = *(_QWORD *)(v64 - 32)) != 0
      && !*(_BYTE *)(v66 + 16)
      && *(_QWORD *)(v66 + 24) == *(_QWORD *)(v64 + 72))
    {
      if ((*(_BYTE *)(v66 + 33) & 0x20) != 0)
        v67 = (uint64_t)*(a2 - 8);
      else
        v67 = 0;
    }
    else
    {
      v67 = 0;
    }
    if (*(_BYTE *)(v65 + 16) == 84)
    {
      v68 = *(_QWORD *)(v65 - 32);
      if (v68)
      {
        if (!*(_BYTE *)(v68 + 16) && *(_QWORD *)(v68 + 24) == *(_QWORD *)(v65 + 72))
        {
          v159 = (*(_BYTE *)(v68 + 33) & 0x20) != 0 ? *(a2 - 4) : 0;
          if (v67)
          {
            if (v159)
            {
              v160 = *(_DWORD *)(*(_QWORD *)(v67 - 32) + 36);
              if (v160 == *((_DWORD *)*(v159 - 4) + 9))
              {
                v161 = *((_WORD *)a2 + 9) & 0x3F;
                if ((v160 - 148) < 2)
                {
                  v244 = (_QWORD *)(v67 - 32 * (*(_DWORD *)(v67 + 20) & 0x7FFFFFF));
                  if (*v244 == v244[4])
                  {
                    v245 = &v159[-4 * (*((_DWORD *)v159 + 5) & 0x7FFFFFF)];
                    if (*v245 == v245[4] && (uint64_t *)v244[8] == v245[8])
                      goto LABEL_281;
                  }
                }
                else if ((v160 - 8) <= 1)
                {
LABEL_281:
                  v162 = (char *)operator new(0x80uLL);
                  v16 = v162 + 64;
                  *((_DWORD *)v162 + 21) = *((_DWORD *)v162 + 21) & 0x38000000 | 2;
                  *(_QWORD *)v162 = 0;
                  *((_QWORD *)v162 + 1) = 0;
                  *((_QWORD *)v162 + 2) = 0;
                  *((_QWORD *)v162 + 3) = v162 + 64;
                  *((_QWORD *)v162 + 4) = 0;
                  v163 = (uint64_t **)(v162 + 32);
                  *((_QWORD *)v162 + 5) = 0;
                  *((_QWORD *)v162 + 6) = 0;
                  *((_QWORD *)v162 + 7) = v162 + 64;
                  v164 = *(_QWORD *)(v67 - 32 * (*(_DWORD *)(v67 + 20) & 0x7FFFFFF));
                  v165 = v159[-4 * (*((_DWORD *)v159 + 5) & 0x7FFFFFF)];
                  v454 = 257;
                  sub_1C4774CC4(*(_DWORD **)v164);
                  *((_QWORD *)v162 + 8) = v166;
                  *((_QWORD *)v162 + 9) = 0;
                  v167 = *((_DWORD *)v162 + 21) & 0xC0000000 | 2;
                  *((_DWORD *)v162 + 20) = 81;
                  *((_DWORD *)v162 + 21) = v167;
                  *(_OWORD *)(v162 + 88) = 0u;
                  *(_OWORD *)(v162 + 104) = 0u;
                  *((_DWORD *)v162 + 30) = 0;
                  if (*(_QWORD *)v162)
                  {
                    **((_QWORD **)v162 + 2) = *((_QWORD *)v162 + 1);
                    v423 = *((_QWORD *)v162 + 1);
                    if (v423)
                      *(_QWORD *)(v423 + 16) = *((_QWORD *)v162 + 2);
                  }
                  *(_QWORD *)v162 = v164;
                  v170 = *(_QWORD *)(v164 + 8);
                  v169 = (_QWORD *)(v164 + 8);
                  v168 = v170;
                  *((_QWORD *)v162 + 1) = v170;
                  if (v170)
                    *(_QWORD *)(v168 + 16) = v162 + 8;
                  *((_QWORD *)v162 + 2) = v169;
                  *v169 = v162;
                  if (*((_QWORD *)v162 + 4))
                  {
                    **((_QWORD **)v162 + 6) = *((_QWORD *)v162 + 5);
                    v424 = *((_QWORD *)v162 + 5);
                    if (v424)
                      *(_QWORD *)(v424 + 16) = *((_QWORD *)v162 + 6);
                  }
                  *v163 = v165;
                  if (v165)
                  {
                    v173 = v165[1];
                    v172 = (uint64_t ***)(v165 + 1);
                    v171 = v173;
                    *((_QWORD *)v162 + 5) = v173;
                    if (v173)
                      *(_QWORD *)(v171 + 16) = v162 + 40;
                    *((_QWORD *)v162 + 6) = v172;
                    *v172 = v163;
                  }
                  *((_WORD *)v162 + 41) = v161;
                  goto LABEL_137;
                }
              }
            }
          }
        }
      }
    }
    v451 = (char *)&v450;
    v453 = (const char *)&v450;
    v69 = *(_QWORD *)(v6 + 8);
    if (!v69 || *(_QWORD *)(v69 + 8))
      goto LABEL_117;
    v105 = *(unsigned __int8 *)(v6 + 16);
    if (v105 != 5)
    {
      if (v105 != 56)
        goto LABEL_117;
      v107 = (_QWORD *)(v6 - 64);
      v106 = *(_QWORD *)(v6 - 64);
      v108 = *(unsigned __int8 *)(v106 + 16);
      if (v108 == 5)
      {
        if (*(_WORD *)(v106 + 18) != 13)
          goto LABEL_299;
        if (!*(_QWORD *)(v106 - 32 * (*(_DWORD *)(v106 + 20) & 0x7FFFFFF)))
          goto LABEL_299;
        v450 = *(llvm::Constant ***)(v106 - 32 * (*(_DWORD *)(v106 + 20) & 0x7FFFFFF));
        if (!sub_1C4D9EED4((uint64_t)&v452, *(llvm::Constant **)(v106 - 32 * (*(_DWORD *)(v106 + 20) & 0x7FFFFFF) + 32)))goto LABEL_299;
      }
      else
      {
        if (v108 != 41)
          goto LABEL_299;
        if (!*(_QWORD *)(v106 - 64))
          goto LABEL_299;
        v450 = *(llvm::Constant ***)(v106 - 64);
        if ((sub_1C4D9ED34((uint64_t)&v452, *(llvm::Constant **)(v106 - 32)) & 1) == 0)
          goto LABEL_299;
      }
      if (*(_QWORD *)v453 == *(_QWORD *)(v6 - 32))
        goto LABEL_362;
LABEL_299:
      v176 = *(_QWORD *)(v6 - 32);
      v177 = *(unsigned __int8 *)(v176 + 16);
      if (v177 == 5)
      {
        if (*(_WORD *)(v176 + 18) != 13)
          goto LABEL_117;
        v179 = *(_QWORD *)(v176 - 32 * (*(_DWORD *)(v176 + 20) & 0x7FFFFFF));
        if (!v179)
          goto LABEL_117;
        *(_QWORD *)v451 = v179;
        if ((sub_1C4D9EED4((uint64_t)&v452, *(llvm::Constant **)(v176 - 32 * (*(_DWORD *)(v176 + 20) & 0x7FFFFFF) + 32)) & 1) == 0)goto LABEL_117;
      }
      else
      {
        if (v177 != 41)
          goto LABEL_117;
        v178 = *(_QWORD *)(v176 - 64);
        if (!v178)
          goto LABEL_117;
        *(_QWORD *)v451 = v178;
        if ((sub_1C4D9ED34((uint64_t)&v452, *(llvm::Constant **)(v176 - 32)) & 1) == 0)
          goto LABEL_117;
      }
      goto LABEL_361;
    }
    if (*(_WORD *)(v6 + 18) != 28)
      goto LABEL_117;
    v134 = *(_QWORD *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF));
    v135 = *(unsigned __int8 *)(v134 + 16);
    if (v135 == 5)
    {
      if (*(_WORD *)(v134 + 18) != 13)
        goto LABEL_352;
      if (!*(_QWORD *)(v134 - 32 * (*(_DWORD *)(v134 + 20) & 0x7FFFFFF)))
        goto LABEL_352;
      v450 = *(llvm::Constant ***)(v134 - 32 * (*(_DWORD *)(v134 + 20) & 0x7FFFFFF));
      if (!sub_1C4D9EED4((uint64_t)&v452, *(llvm::Constant **)(v134 - 32 * (*(_DWORD *)(v134 + 20) & 0x7FFFFFF) + 32)))goto LABEL_352;
    }
    else if (v135 != 41
           || !*(_QWORD *)(v134 - 64)
           || (v450 = *(llvm::Constant ***)(v134 - 64),
               (sub_1C4D9ED34((uint64_t)&v452, *(llvm::Constant **)(v134 - 32)) & 1) == 0))
    {
LABEL_352:
      v212 = *(_QWORD *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) + 32);
      v213 = *(unsigned __int8 *)(v212 + 16);
      if (v213 == 5)
      {
        if (*(_WORD *)(v212 + 18) != 13)
          goto LABEL_117;
        v215 = *(_QWORD *)(v212 - 32 * (*(_DWORD *)(v212 + 20) & 0x7FFFFFF));
        if (!v215)
          goto LABEL_117;
        *(_QWORD *)v451 = v215;
        if (!sub_1C4D9EED4((uint64_t)&v452, *(llvm::Constant **)(v212 - 32 * (*(_DWORD *)(v212 + 20) & 0x7FFFFFF) + 32)))goto LABEL_117;
      }
      else
      {
        if (v213 != 41)
          goto LABEL_117;
        v214 = *(_QWORD *)(v212 - 64);
        if (!v214)
          goto LABEL_117;
        *(_QWORD *)v451 = v214;
        if ((sub_1C4D9ED34((uint64_t)&v452, *(llvm::Constant **)(v212 - 32)) & 1) == 0)
          goto LABEL_117;
      }
      v107 = (_QWORD *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF));
LABEL_361:
      if (*(_QWORD *)v453 == *v107)
      {
LABEL_362:
        if ((sub_1C4D8AC3C((uint64_t)&v444, (llvm::Constant *)v7) & 1) != 0)
          goto LABEL_118;
      }
LABEL_117:
      v450 = 0;
LABEL_118:
      v452 = v7;
      v453 = (const char *)v7;
      v70 = *(_QWORD *)(v6 + 8);
      if (v70 && !*(_QWORD *)(v70 + 8) && sub_1C581A1C0((uint64_t)&v451, v6))
      {
        v450 = (llvm::Constant **)v7;
        v71 = (uint64_t *)v7;
        goto LABEL_127;
      }
      v452 = v6;
      v453 = (const char *)v6;
      v72 = *(_QWORD *)(v7 + 8);
      if (v72 && !*(_QWORD *)(v72 + 8) && sub_1C581A1C0((uint64_t)&v451, v7))
      {
        v450 = (llvm::Constant **)v6;
        v71 = (uint64_t *)v6;
        goto LABEL_127;
      }
      v71 = (uint64_t *)v450;
      if (v450)
      {
LABEL_127:
        v73 = (llvm::ConstantInt *)*v71;
        v74 = *(uint64_t **)(a1 + 24);
        v454 = 257;
        UnaryIntrinsic = (_DWORD **)llvm::IRBuilderBase::CreateUnaryIntrinsic(v74, 53, v71, 0, (uint64_t)&v451);
        v76 = (char *)operator new(0x80uLL);
        v16 = v76 + 64;
        *((_DWORD *)v76 + 21) = *((_DWORD *)v76 + 21) & 0x38000000 | 2;
        *(_QWORD *)v76 = 0;
        *((_QWORD *)v76 + 1) = 0;
        *((_QWORD *)v76 + 4) = 0;
        v77 = (llvm::Value ***)(v76 + 32);
        *((_QWORD *)v76 + 2) = 0;
        *((_QWORD *)v76 + 3) = v76 + 64;
        *((_QWORD *)v76 + 5) = 0;
        *((_QWORD *)v76 + 6) = 0;
        *((_QWORD *)v76 + 7) = v76 + 64;
        v78 = v76 + 88;
        if (v8 == 32)
        {
          v79 = llvm::ConstantInt::get(v73, 2, 0);
          v454 = 257;
          sub_1C4774CC4(*UnaryIntrinsic);
          *((_QWORD *)v76 + 8) = v80;
          *((_QWORD *)v76 + 9) = 0;
          v81 = *((_DWORD *)v76 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v76 + 20) = 81;
          *((_DWORD *)v76 + 21) = v81;
          *v78 = 0u;
          *(_OWORD *)(v76 + 104) = 0u;
          *((_DWORD *)v76 + 30) = 0;
          if (*(_QWORD *)v76)
          {
            **((_QWORD **)v76 + 2) = *((_QWORD *)v76 + 1);
            v408 = *((_QWORD *)v76 + 1);
            if (v408)
              *(_QWORD *)(v408 + 16) = *((_QWORD *)v76 + 2);
          }
          *(_QWORD *)v76 = UnaryIntrinsic;
          v84 = UnaryIntrinsic[1];
          v83 = UnaryIntrinsic + 1;
          v82 = v84;
          *((_QWORD *)v76 + 1) = v84;
          if (v84)
            *((_QWORD *)v82 + 2) = v76 + 8;
          *((_QWORD *)v76 + 2) = v83;
          *v83 = v76;
          if (*((_QWORD *)v76 + 4))
          {
            **((_QWORD **)v76 + 6) = *((_QWORD *)v76 + 5);
            v409 = *((_QWORD *)v76 + 5);
            if (v409)
              *(_QWORD *)(v409 + 16) = *((_QWORD *)v76 + 6);
          }
          *v77 = v79;
          if (!v79)
          {
            v89 = 36;
            goto LABEL_136;
          }
          v87 = v79[1];
          v86 = (llvm::Value ****)(v79 + 1);
          v85 = v87;
          *((_QWORD *)v76 + 5) = v87;
          v88 = v76 + 40;
          v89 = 36;
          if (!v87)
          {
LABEL_135:
            *((_QWORD *)v76 + 6) = v86;
            *v86 = v77;
LABEL_136:
            *((_WORD *)v76 + 41) = v89;
            goto LABEL_137;
          }
        }
        else
        {
          v90 = llvm::ConstantInt::get(v73, 1, 0);
          v454 = 257;
          sub_1C4774CC4(*UnaryIntrinsic);
          *((_QWORD *)v76 + 8) = v91;
          *((_QWORD *)v76 + 9) = 0;
          v92 = *((_DWORD *)v76 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v76 + 20) = 81;
          *((_DWORD *)v76 + 21) = v92;
          *v78 = 0u;
          *(_OWORD *)(v76 + 104) = 0u;
          *((_DWORD *)v76 + 30) = 0;
          if (*(_QWORD *)v76)
          {
            **((_QWORD **)v76 + 2) = *((_QWORD *)v76 + 1);
            v410 = *((_QWORD *)v76 + 1);
            if (v410)
              *(_QWORD *)(v410 + 16) = *((_QWORD *)v76 + 2);
          }
          *(_QWORD *)v76 = UnaryIntrinsic;
          v95 = UnaryIntrinsic[1];
          v94 = UnaryIntrinsic + 1;
          v93 = v95;
          *((_QWORD *)v76 + 1) = v95;
          if (v95)
            *((_QWORD *)v93 + 2) = v76 + 8;
          *((_QWORD *)v76 + 2) = v94;
          *v94 = v76;
          if (*((_QWORD *)v76 + 4))
          {
            **((_QWORD **)v76 + 6) = *((_QWORD *)v76 + 5);
            v411 = *((_QWORD *)v76 + 5);
            if (v411)
              *(_QWORD *)(v411 + 16) = *((_QWORD *)v76 + 6);
          }
          *v77 = v90;
          if (!v90)
          {
            v89 = 34;
            goto LABEL_136;
          }
          v96 = v90[1];
          v86 = (llvm::Value ****)(v90 + 1);
          v85 = v96;
          *((_QWORD *)v76 + 5) = v96;
          v88 = v76 + 40;
          v89 = 34;
          if (!v96)
            goto LABEL_135;
        }
        *((_QWORD *)v85 + 2) = v88;
        goto LABEL_135;
      }
      v97 = *(llvm::Type **)v6;
      if ((*(_DWORD *)(*(_QWORD *)v6 + 8) & 0xFE) == 0x12)
        v97 = (llvm::Type *)**((_QWORD **)v97 + 2);
      v99 = llvm::Type::getPrimitiveSizeInBits(v97);
      v100 = v99 - 1;
      LODWORD(v453) = 64;
      v451 = (char *)&v450;
      v452 = v99 - 1;
      v101 = *(unsigned __int8 *)(v6 + 16);
      if (v101 == 5)
      {
        if (*(_WORD *)(v6 + 18) != 27
          || !sub_1C4B03864((_QWORD **)&v451, *(_QWORD *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF)))
          || !sub_1C4D8A86C((llvm::APInt *)&v452, *(llvm::Constant **)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) + 32)))
        {
LABEL_185:
          v114 = 0;
          goto LABEL_186;
        }
      }
      else
      {
        if (v101 != 55)
          return 0;
        if (!sub_1C4B03864((_QWORD **)&v451, *(_QWORD *)(v6 - 64))
          || !sub_1C4D8A7F0((llvm::APInt *)&v452, *(unsigned __int8 **)(v6 - 32)))
        {
          goto LABEL_185;
        }
      }
      v446 = 64;
      v444 = v450;
      v445 = v99;
      v112 = *(unsigned __int8 *)(v7 + 16);
      if (v112 <= 0x1B && v112 != 5)
        goto LABEL_449;
      v113 = v112 <= 0x1B ? *(unsigned __int16 *)(v7 + 18) : v112 - 28;
      if (v113 != 38)
        goto LABEL_449;
      v216 = *(_DWORD *)(v7 + 20);
      if ((v216 & 0x40000000) != 0)
        v217 = *(uint64_t **)(v7 - 8);
      else
        v217 = (uint64_t *)(v7 - 32 * (v216 & 0x7FFFFFF));
      v242 = *v217;
      v243 = *(unsigned __int8 *)(v242 + 16);
      if (v243 == 5)
      {
        if (*(_WORD *)(v242 + 18) != 26)
          goto LABEL_449;
        v277 = v242 - 32 * (*(_DWORD *)(v242 + 20) & 0x7FFFFFF);
        if (v450 != *(llvm::Constant ***)v277 || !sub_1C4D8A86C((llvm::APInt *)&v445, *(llvm::Constant **)(v277 + 32)))
          goto LABEL_449;
      }
      else if (v243 != 54
             || v450 != *(llvm::Constant ***)(v242 - 64)
             || !sub_1C4D8A7F0((llvm::APInt *)&v445, *(unsigned __int8 **)(v242 - 32)))
      {
        goto LABEL_449;
      }
      v278 = *v450;
      if ((*((_DWORD *)*v450 + 2) & 0xFE) == 0x12)
        v278 = (llvm::Constant *)**((_QWORD **)v278 + 2);
      if (llvm::Type::getPrimitiveSizeInBits(v278) == 2 * v99)
      {
        v279 = (*(a2 - 8))[1];
        if (v279 && !v279[1])
        {
          v114 = 1;
          goto LABEL_450;
        }
        v280 = (*(a2 - 4))[1];
        if (v280)
        {
          v114 = v280[1] == 0;
LABEL_450:
          if (v446 >= 0x41 && v445)
            MEMORY[0x1CAA32F9C](v445, 0x1000C8000313F17);
LABEL_186:
          if (v453 >= 0x41 && v452)
          {
            MEMORY[0x1CAA32F9C](v452, 0x1000C8000313F17);
            if (!v114)
              return 0;
          }
          else if (!v114)
          {
            return 0;
          }
          v442 = 2 * v99;
          if (2 * v99 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
            v117 = 1 << v100;
            if (v442 > 0x40)
            {
              *((_QWORD *)__src + (v100 >> 6)) |= v117;
LABEL_195:
              v118 = *(_QWORD *)(a1 + 24);
              v119 = v450;
              v120 = llvm::ConstantInt::get((llvm::ConstantInt **)*v450, (llvm::Type *)&__src, v98);
              v447 = 257;
              v121 = (*(uint64_t (**)(_QWORD, llvm::Constant **, llvm::Value **, _QWORD, _QWORD))(**(_QWORD **)(v118 + 72) + 16))(*(_QWORD *)(v118 + 72), v119, v120, 0, 0);
              if (!v121)
              {
                v454 = 257;
                v122 = (char *)operator new(0x80uLL);
                *(_QWORD *)v122 = 0;
                *((_QWORD *)v122 + 2) = 0;
                *((_QWORD *)v122 + 1) = 0;
                *((_QWORD *)v122 + 5) = 0;
                *((_QWORD *)v122 + 6) = 0;
                *((_QWORD *)v122 + 4) = 0;
                v123 = (llvm::Value ***)(v122 + 32);
                *((_QWORD *)v122 + 8) = *v119;
                v124 = (uint64_t)(v122 + 64);
                *((_QWORD *)v122 + 3) = v122 + 64;
                *((_QWORD *)v122 + 7) = v122 + 64;
                *((_QWORD *)v122 + 9) = 0;
                v122[80] = 41;
                v122[81] = 0;
                *((_WORD *)v122 + 41) = 0;
                *((_DWORD *)v122 + 21) = 2;
                *((_DWORD *)v122 + 30) = 0;
                *(_OWORD *)(v122 + 104) = 0u;
                *(_OWORD *)(v122 + 88) = 0u;
                *(_QWORD *)v122 = v119;
                v127 = v119[1];
                v126 = v119 + 1;
                v125 = v127;
                *((_QWORD *)v122 + 1) = v127;
                if (v127)
                  *((_QWORD *)v125 + 2) = v122 + 8;
                *((_QWORD *)v122 + 2) = v126;
                *v126 = v122;
                if (*((_QWORD *)v122 + 4))
                {
                  **((_QWORD **)v122 + 6) = *((_QWORD *)v122 + 5);
                  v418 = *((_QWORD *)v122 + 5);
                  if (v418)
                    *(_QWORD *)(v418 + 16) = *((_QWORD *)v122 + 6);
                }
                *v123 = v120;
                if (v120)
                {
                  v130 = v120[1];
                  v129 = (llvm::Value ****)(v120 + 1);
                  v128 = v130;
                  *((_QWORD *)v122 + 5) = v130;
                  if (v130)
                    *((_QWORD *)v128 + 2) = v122 + 40;
                  *((_QWORD *)v122 + 6) = v129;
                  *v129 = v123;
                }
                llvm::Value::setName((uint64_t ***)v122 + 8, (uint64_t)&v451);
                v121 = sub_1C4773754((uint64_t *)v118, v124, (uint64_t)&v444);
              }
              v131 = (char *)operator new(0x80uLL);
              v16 = v131 + 64;
              *((_DWORD *)v131 + 21) = *((_DWORD *)v131 + 21) & 0x38000000 | 2;
              *(_QWORD *)v131 = 0;
              *((_QWORD *)v131 + 1) = 0;
              *((_QWORD *)v131 + 2) = 0;
              *((_QWORD *)v131 + 3) = v131 + 64;
              *((_QWORD *)v131 + 4) = 0;
              v132 = (llvm::Value ***)(v131 + 32);
              *((_QWORD *)v131 + 5) = 0;
              *((_QWORD *)v131 + 6) = 0;
              *((_QWORD *)v131 + 7) = v131 + 64;
              v133 = *v450;
              LODWORD(v445) = v442;
              if (v442 > 0x40)
              {
                v138 = (((unint64_t)v442 + 63) >> 3) & 0x3FFFFFF8;
                v444 = (_QWORD *)operator new[]();
                memcpy(v444, __src, v138);
              }
              else
              {
                v444 = __src;
              }
              sub_1C4888094((uint64_t)&v444, 1u);
              v140 = llvm::ConstantInt::get((llvm::ConstantInt **)v133, (llvm::Type *)&v444, v139);
              v454 = 257;
              sub_1C4774CC4(*(_DWORD **)v121);
              *((_QWORD *)v131 + 8) = v141;
              *((_QWORD *)v131 + 9) = 0;
              v142 = *((_DWORD *)v131 + 21) & 0xC0000000 | 2;
              *((_DWORD *)v131 + 20) = 81;
              *((_DWORD *)v131 + 21) = v142;
              *(_OWORD *)(v131 + 88) = 0u;
              *(_OWORD *)(v131 + 104) = 0u;
              *((_DWORD *)v131 + 30) = 0;
              if (*(_QWORD *)v131)
              {
                **((_QWORD **)v131 + 2) = *((_QWORD *)v131 + 1);
                v416 = *((_QWORD *)v131 + 1);
                if (v416)
                  *(_QWORD *)(v416 + 16) = *((_QWORD *)v131 + 2);
              }
              *(_QWORD *)v131 = v121;
              v145 = *(_QWORD *)(v121 + 8);
              v144 = (_QWORD *)(v121 + 8);
              v143 = v145;
              *((_QWORD *)v131 + 1) = v145;
              if (v145)
                *(_QWORD *)(v143 + 16) = v131 + 8;
              *((_QWORD *)v131 + 2) = v144;
              *v144 = v131;
              if (*((_QWORD *)v131 + 4))
              {
                **((_QWORD **)v131 + 6) = *((_QWORD *)v131 + 5);
                v417 = *((_QWORD *)v131 + 5);
                if (v417)
                  *(_QWORD *)(v417 + 16) = *((_QWORD *)v131 + 6);
              }
              *v132 = v140;
              if (v140)
              {
                v148 = v140[1];
                v147 = (llvm::Value ****)(v140 + 1);
                v146 = v148;
                *((_QWORD *)v131 + 5) = v148;
                if (v148)
                  *((_QWORD *)v146 + 2) = v131 + 40;
                *((_QWORD *)v131 + 6) = v147;
                *v147 = v132;
              }
              if (v8 == 32)
                v149 = 36;
              else
                v149 = 35;
              *((_WORD *)v131 + 41) = v149;
              llvm::Value::setName((uint64_t ***)v16, (uint64_t)&v451);
              if (v445 >= 0x41 && v444)
                MEMORY[0x1CAA32F9C](v444, 0x1000C8000313F17);
              if (v442 >= 0x41)
              {
                v150 = __src;
                if (__src)
                  goto LABEL_239;
              }
              return v16;
            }
            v116 = (unint64_t)__src;
          }
          else
          {
            v116 = 0;
            v117 = 1 << v100;
          }
          __src = (void *)(v116 | v117);
          goto LABEL_195;
        }
      }
LABEL_449:
      v114 = 0;
      goto LABEL_450;
    }
    if (*(_QWORD *)v453 == *(_QWORD *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) + 32))
      goto LABEL_362;
    goto LABEL_352;
  }
  v259 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v6);
  if ((_DWORD)v258 == 1)
  LODWORD(v445) = PrimitiveSizeInBits;
  if (PrimitiveSizeInBits > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v444, 0, 0);
  else
    v444 = 0;
  sub_1C4912E54(&v444, 0, v259);
  sub_1C4888094((uint64_t)&v444, v443[0]);
  llvm::APInt::zext((llvm::APInt *)(v7 + 24), PrimitiveSizeInBits, (uint64_t)&__src);
  sub_1C4888094((uint64_t)&__src, v443[0]);
  v260 = *(_QWORD *)(a1 + 24);
  v261 = v450;
  v263 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(v260 + 64), (llvm::LLVMContext *)&v444, v262);
  v454 = 257;
  v264 = sub_1C4D89BCC(v260, v261, (uint64_t)v263, (uint64_t)&v451);
  v265 = (char *)operator new(0x80uLL);
  v16 = v265 + 64;
  *((_DWORD *)v265 + 21) = *((_DWORD *)v265 + 21) & 0x38000000 | 2;
  *(_QWORD *)v265 = 0;
  *((_QWORD *)v265 + 1) = 0;
  *((_QWORD *)v265 + 4) = 0;
  v266 = (llvm::ValueHandleBase **)(v265 + 32);
  *((_QWORD *)v265 + 2) = 0;
  *((_QWORD *)v265 + 3) = v265 + 64;
  *((_QWORD *)v265 + 5) = 0;
  *((_QWORD *)v265 + 6) = 0;
  *((_QWORD *)v265 + 7) = v265 + 64;
  v268 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(_QWORD *)(a1 + 24) + 64), (llvm::LLVMContext *)&__src, v267);
  v454 = 257;
  sub_1C4774CC4(*(_DWORD **)v264);
  *((_QWORD *)v265 + 8) = v269;
  *((_QWORD *)v265 + 9) = 0;
  v270 = *((_DWORD *)v265 + 21) & 0xC0000000 | 2;
  *((_DWORD *)v265 + 20) = 81;
  *((_DWORD *)v265 + 21) = v270;
  *(_OWORD *)(v265 + 88) = 0u;
  *(_OWORD *)(v265 + 104) = 0u;
  *((_DWORD *)v265 + 30) = 0;
  if (*(_QWORD *)v265)
  {
    **((_QWORD **)v265 + 2) = *((_QWORD *)v265 + 1);
    v435 = *((_QWORD *)v265 + 1);
    if (v435)
      *(_QWORD *)(v435 + 16) = *((_QWORD *)v265 + 2);
  }
  *(_QWORD *)v265 = v264;
  v273 = *(_QWORD *)(v264 + 8);
  v272 = (_QWORD *)(v264 + 8);
  v271 = v273;
  *((_QWORD *)v265 + 1) = v273;
  if (v273)
    *(_QWORD *)(v271 + 16) = v265 + 8;
  *((_QWORD *)v265 + 2) = v272;
  *v272 = v265;
  if (*((_QWORD *)v265 + 4))
  {
    **((_QWORD **)v265 + 6) = *((_QWORD *)v265 + 5);
    v436 = *((_QWORD *)v265 + 5);
    if (v436)
      *(_QWORD *)(v436 + 16) = *((_QWORD *)v265 + 6);
  }
  *v266 = v268;
  if (v268)
  {
    v276 = *((_QWORD *)v268 + 1);
    v275 = (llvm::ValueHandleBase ***)((char *)v268 + 8);
    v274 = v276;
    *((_QWORD *)v265 + 5) = v276;
    if (v276)
      *(_QWORD *)(v274 + 16) = v265 + 40;
    *((_QWORD *)v265 + 6) = v275;
    *v275 = v266;
  }
  *((_WORD *)v265 + 41) = v8;
  llvm::Value::setName((uint64_t ***)v16, (uint64_t)&v451);
  if (v442 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
LABEL_582:
  if (v445 >= 0x41)
  {
    v150 = v444;
    if (v444)
LABEL_239:
      MEMORY[0x1CAA32F9C](v150, 0x1000C8000313F17);
  }
  return v16;
}

uint64_t sub_1C5808AA8(_QWORD *a1, int a2, int a3, llvm *this, llvm::Value *a5, llvm::AssumptionCache *a6, const llvm::DominatorTree *a7)
{
  const llvm::DataLayout *v8;
  const llvm::Value *v9;
  const llvm::Instruction *v10;
  const llvm::DataLayout *v12;
  const llvm::Instruction *v13;
  const llvm::Value *v14;
  const llvm::DataLayout *v15;
  const llvm::Instruction *v16;
  const llvm::Value *v17;

  if (a2 == 13)
  {
    v8 = (const llvm::DataLayout *)a1[7];
    v10 = (const llvm::Instruction *)a1[9];
    v9 = (const llvm::Value *)a1[10];
    if (a3)
      return sub_1C4F8C45C((uint64_t)this, (uint64_t)a5, 0, (uint64_t)v9, (uint64_t)v8, (uint64_t)a6, (uint64_t)v10);
    else
      return llvm::computeOverflowForUnsignedAdd(this, a5, v9, v8, a6, v10, (const llvm::DominatorTree *)1);
  }
  else if (a2 == 15)
  {
    v12 = (const llvm::DataLayout *)a1[7];
    v13 = (const llvm::Instruction *)a1[9];
    v14 = (const llvm::Value *)a1[10];
    if (a3)
      return llvm::computeOverflowForSignedSub(this, a5, v14, v12, a6, v13, a7);
    else
      return llvm::computeOverflowForUnsignedSub(this, a5, v14, v12, a6, v13, a7);
  }
  else
  {
    v15 = (const llvm::DataLayout *)a1[7];
    v16 = (const llvm::Instruction *)a1[9];
    v17 = (const llvm::Value *)a1[10];
    if (a3)
      return llvm::computeOverflowForSignedMul(this, a5, v17, v15, a6, v16, (const llvm::DominatorTree *)1);
    else
      return llvm::computeOverflowForUnsignedMul(this, a5, v17, v15, a6, v16, (const llvm::DominatorTree *)1);
  }
}

uint64_t sub_1C5808B64(_QWORD *a1, uint64_t a2, int a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 **this, unsigned __int8 **a7, llvm::Value ***a8)
{
  unsigned int v16;
  BOOL v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  const llvm::DominatorTree *v22;
  uint64_t **v23;
  llvm::Type *v24;
  uint64_t **v25;
  uint64_t **v26;
  llvm::Type *v27;
  const llvm::APInt *v28;
  llvm::Value **False;
  unsigned int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  llvm::Type *v33;
  const llvm::APInt *v34;
  uint64_t result;
  uint64_t v36;
  unsigned __int8 *v37;
  llvm::Type *v38;
  const llvm::APInt *v39;
  unsigned __int8 *v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 *v43[4];
  __int16 v44;

  if (llvm::Instruction::isCommutative((llvm::Instruction *)this) && a4[16] <= 0x14u)
  {
    v16 = a5[16];
    v17 = v16 >= 0x15;
    if (v16 >= 0x15)
      v18 = a5;
    else
      v18 = a4;
    if (v17)
      a5 = a4;
    a4 = v18;
  }
  v19 = a1[3];
  *(_QWORD *)(v19 + 48) = this[5];
  *(_QWORD *)(v19 + 56) = this + 3;
  v20 = this[6];
  v43[0] = v20;
  if (v20)
  {
    llvm::MetadataTracking::track((uint64_t)v43, v20, 2);
    v21 = v43[0];
  }
  else
  {
    v21 = 0;
  }
  sub_1C4774EF4(v19, 0, (uint64_t)v21);
  if (v43[0])
    llvm::MetadataTracking::untrack((uint64_t)v43, v43[0]);
  v23 = (uint64_t **)(***(_QWORD ***)a4 + 1888);
  if ((*(_DWORD *)(*(_QWORD *)a4 + 8) & 0xFE) == 0x12)
  {
    v24 = (llvm::Type *)*(unsigned int *)(*(_QWORD *)a4 + 32);
    v25 = (uint64_t **)(***(_QWORD ***)a4 + 1888);
    if (*(_DWORD *)(*(_QWORD *)a4 + 8) == 19)
      llvm::ScalableVectorType::get(v25, v24);
    else
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v25, v24);
    v23 = v26;
  }
  if ((_DWORD)a2 == 17)
  {
    if ((sub_1C4D89CC8((uint64_t)v43, (llvm::Constant *)a5) & 1) == 0)
      goto LABEL_26;
LABEL_25:
    *a7 = a4;
    False = llvm::ConstantInt::getFalse(v23, v27, v28);
LABEL_28:
    *a8 = False;
    return 1;
  }
  if (a5
    && a5[16] < 0x15u
    && (llvm::Constant::isNullValue((llvm::Constant *)a5)
     || sub_1C4E71060((uint64_t)v43, (llvm::Constant *)a5)))
  {
    goto LABEL_25;
  }
LABEL_26:
  v30 = sub_1C5808AA8(a1, a2, a3, (llvm *)a4, (llvm::Value *)a5, (llvm::AssumptionCache *)this, v22);
  if (v30 < 2)
  {
    v31 = a1[3];
    v44 = 257;
    v32 = sub_1C4773860(v31, a2, a4, (uint64_t)a5, (uint64_t)v43, 0);
    *a7 = v32;
    llvm::Value::takeName((llvm::Value *)v32, (llvm::Value *)this);
    False = llvm::ConstantInt::getTrue(v23, v33, v34);
    goto LABEL_28;
  }
  if (v30 == 2)
    return 0;
  v36 = a1[3];
  v44 = 257;
  v37 = sub_1C4773860(v36, a2, a4, (uint64_t)a5, (uint64_t)v43, 0);
  *a7 = v37;
  llvm::Value::takeName((llvm::Value *)v37, (llvm::Value *)this);
  *a8 = llvm::ConstantInt::getFalse(v23, v38, v39);
  v40 = *a7;
  result = 1;
  if (*a7 && v40[16] >= 0x1Cu)
  {
    v41 = v40[17];
    if (a3)
      v42 = v41 | 4;
    else
      v42 = v41 | 2;
    v40[17] = v42;
  }
  return result;
}

uint64_t ***sub_1C5808DC0(_QWORD *a1, uint64_t a2)
{
  _DWORD **v4;
  uint64_t v5;
  unsigned __int8 *v6;
  __int16 v7;
  unsigned __int8 *v8;
  int v9;
  unsigned int PrimitiveSizeInBits;
  unsigned __int8 *v11;
  unsigned int v12;
  void **p_s2;
  uint64_t ***v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  BOOL v23;
  int v25;
  unint64_t **v26;
  void *v27;
  unsigned int v28;
  uint64_t v29;
  void *v30;
  unsigned int v31;
  _DWORD **v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  void *v38;
  size_t v39;
  unint64_t v40;
  char *v41;
  uint64_t *v42;
  const llvm::APInt *v43;
  llvm::Value **IntegerValue;
  uint64_t v45;
  unsigned int v46;
  llvm::Value *v47;
  _QWORD *v48;
  llvm::Value *v49;
  uint64_t v50;
  uint64_t **v51;
  uint64_t v52;
  char *v53;
  llvm::Value ***v54;
  const llvm::APInt *v55;
  llvm::Value **v56;
  uint64_t v57;
  unsigned int v58;
  _DWORD *v59;
  _QWORD *v60;
  _DWORD *v61;
  llvm::Value *v62;
  llvm::Value ****v63;
  llvm::Value *v64;
  uint64_t v65;
  unsigned int matched;
  size_t v67;
  size_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  llvm::APInt *v73;
  void *__s2;
  uint64_t v75;
  __int16 v76;
  void *v77;
  unsigned int v78;
  void *v79;
  unsigned int v80;
  void *v81;
  unsigned int v82;
  unint64_t **v83;
  unsigned int v84;
  unint64_t v85;
  unsigned int v86;
  const void *v87;
  unsigned int v88;
  unint64_t v89;
  unsigned int v90;
  const void *v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;

  v4 = *(_DWORD ***)(a2 - 64);
  v5 = *(_QWORD *)(a2 - 32);
  v6 = (unsigned __int8 *)*v4;
  v7 = *(_WORD *)(a2 + 18);
  if (((*v4)[2] & 0xFE) == 0x12)
  {
    v8 = (unsigned __int8 *)**((_QWORD **)v6 + 2);
    v9 = v8[8];
  }
  else
  {
    v9 = (*v4)[2];
    v8 = (unsigned __int8 *)*v4;
  }
  if (v9 == 13)
  {
    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v8);
    if (PrimitiveSizeInBits)
      goto LABEL_6;
    return 0;
  }
  PrimitiveSizeInBits = llvm::DataLayout::getPointerTypeSizeInBits(a1[10], (uint64_t)v8);
  if (!PrimitiveSizeInBits)
    return 0;
LABEL_6:
  v90 = PrimitiveSizeInBits;
  if (PrimitiveSizeInBits > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v89, 0, 0);
    v92 = PrimitiveSizeInBits;
    llvm::APInt::initSlowCase((llvm::APInt *)&v91, 0, 0);
    v86 = PrimitiveSizeInBits;
    llvm::APInt::initSlowCase((llvm::APInt *)&v85, 0, 0);
    v88 = PrimitiveSizeInBits;
    llvm::APInt::initSlowCase((llvm::APInt *)&v87, 0, 0);
    v11 = *(unsigned __int8 **)(a2 - 32);
  }
  else
  {
    v92 = PrimitiveSizeInBits;
    v89 = 0;
    v91 = 0;
    v86 = PrimitiveSizeInBits;
    v85 = 0;
    v88 = PrimitiveSizeInBits;
    v11 = (unsigned __int8 *)v5;
    v87 = 0;
  }
  v83 = 0;
  __s2 = &v83;
  v75 = 0;
  if ((sub_1C4D89F84((uint64_t)&__s2, v11) & 1) == 0)
    goto LABEL_19;
  LOBYTE(v81) = 0;
  if (!sub_1C57921EC(*(_WORD *)(a2 + 18) & 0x3F, (llvm::APInt *)v83, &v81))
  {
    v15 = *(_WORD *)(a2 + 18) & 0x3F;
    if (v15 == 36)
    {
      v17 = *((_DWORD *)v83 + 2);
      if (v17 > 0x40)
      {
        v19 = llvm::APInt::countTrailingZerosSlowCase(v83);
      }
      else
      {
        v18 = __clz(__rbit64((unint64_t)*v83));
        if (v17 >= v18)
          v19 = v18;
        else
          v19 = *((_DWORD *)v83 + 2);
      }
      LODWORD(v75) = PrimitiveSizeInBits;
      if (PrimitiveSizeInBits > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&__s2, 0, 0);
        v20 = v75;
      }
      else
      {
        __s2 = 0;
        v20 = PrimitiveSizeInBits;
      }
      v21 = v19;
      goto LABEL_33;
    }
    if (v15 == 34)
    {
      if (*((_DWORD *)v83 + 2) > 0x40u)
        v16 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v83);
      else
        v16 = __clz(__rbit64(~(unint64_t)*v83));
      LODWORD(v75) = PrimitiveSizeInBits;
      if (PrimitiveSizeInBits > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&__s2, 0, 0);
        v20 = v75;
      }
      else
      {
        __s2 = 0;
        v20 = PrimitiveSizeInBits;
      }
      v21 = v16;
LABEL_33:
      sub_1C4912E54(&__s2, v21, v20);
      goto LABEL_34;
    }
LABEL_19:
    LODWORD(v75) = PrimitiveSizeInBits;
    if (PrimitiveSizeInBits > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&__s2, -1, 1);
    else
      __s2 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits);
    goto LABEL_34;
  }
  LODWORD(v75) = PrimitiveSizeInBits;
  if (PrimitiveSizeInBits > 0x40)
  {
    p_s2 = &__s2;
    llvm::APInt::initSlowCase((llvm::APInt *)&__s2, 0, 0);
    v12 = PrimitiveSizeInBits - 1;
    if (v75 >= 0x41)
      p_s2 = (void **)((char *)__s2 + 8 * (v12 >> 6));
  }
  else
  {
    __s2 = 0;
    LOBYTE(v12) = PrimitiveSizeInBits - 1;
    p_s2 = &__s2;
  }
  *p_s2 = (void *)((1 << v12) | (unint64_t)*p_s2);
LABEL_34:
  v22 = sub_1C5854B78(a1, a2, 0, (uint64_t)&__s2);
  if (v75 >= 0x41 && __s2)
    MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
  if (!v22)
  {
    LODWORD(v75) = PrimitiveSizeInBits;
    if (PrimitiveSizeInBits > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&__s2, -1, 1);
    else
      __s2 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits);
    v23 = sub_1C5854B78(a1, a2, 1u, (uint64_t)&__s2);
    if (v75 >= 0x41 && __s2)
      MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
    if (!v23)
    {
      v84 = PrimitiveSizeInBits;
      if (PrimitiveSizeInBits > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v83, 0, 0);
        v82 = PrimitiveSizeInBits;
        llvm::APInt::initSlowCase((llvm::APInt *)&v81, 0, 0);
        v80 = PrimitiveSizeInBits;
        llvm::APInt::initSlowCase((llvm::APInt *)&v79, 0, 0);
        v78 = PrimitiveSizeInBits;
        llvm::APInt::initSlowCase((llvm::APInt *)&v77, 0, 0);
      }
      else
      {
        v83 = 0;
        v82 = PrimitiveSizeInBits;
        v81 = 0;
        v80 = PrimitiveSizeInBits;
        v79 = 0;
        v78 = PrimitiveSizeInBits;
        v77 = 0;
      }
      v25 = v7 & 0x3F;
      if ((*(_WORD *)(a2 + 18) & 0x3Eu) - 38 > 3)
      {
        v29 = v92;
        if (v92 > 0x40)
        {
          v30 = (void *)operator new[]();
          memcpy(v30, v91, ((unint64_t)(v29 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v30 = (void *)v91;
        }
        if (v84 >= 0x41 && v83)
          MEMORY[0x1CAA32F9C](v83, 0x1000C8000313F17);
        v83 = (unint64_t **)v30;
        v84 = v29;
        v31 = v90;
        LODWORD(v75) = v90;
        if (v90 > 0x40)
        {
          v32 = v4;
          v34 = v5;
          v67 = (((unint64_t)v90 + 63) >> 3) & 0x3FFFFFF8;
          __s2 = (void *)operator new[]();
          memcpy(__s2, (const void *)v89, v67);
          llvm::APInt::flipAllBitsSlowCase((uint64_t)&__s2);
          v31 = v75;
          v26 = (unint64_t **)__s2;
        }
        else
        {
          v32 = v4;
          if (v90)
            v33 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v90;
          else
            v33 = 0;
          v34 = v5;
          v26 = (unint64_t **)(v33 & ~v89);
        }
        v35 = v25;
        if (v82 >= 0x41 && v81)
        {
          v36 = v31;
          MEMORY[0x1CAA32F9C](v81, 0x1000C8000313F17);
          v31 = v36;
        }
        v81 = v26;
        v82 = v31;
        v37 = v88;
        if (v88 > 0x40)
        {
          v39 = (((unint64_t)v88 + 63) >> 3) & 0x3FFFFFF8;
          v38 = (void *)operator new[]();
          memcpy(v38, v87, v39);
        }
        else
        {
          v38 = (void *)v87;
        }
        if (v80 >= 0x41 && v79)
          MEMORY[0x1CAA32F9C](v79, 0x1000C8000313F17);
        v79 = v38;
        v80 = v37;
        v28 = v86;
        LODWORD(v75) = v86;
        if (v86 > 0x40)
        {
          v68 = (((unint64_t)v86 + 63) >> 3) & 0x3FFFFFF8;
          __s2 = (void *)operator new[]();
          memcpy(__s2, (const void *)v85, v68);
          llvm::APInt::flipAllBitsSlowCase((uint64_t)&__s2);
          v28 = v75;
          v27 = __s2;
          v25 = v35;
          v5 = v34;
        }
        else
        {
          v25 = v35;
          if (v86)
            v40 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v86;
          else
            v40 = 0;
          v5 = v34;
          v27 = (void *)(v40 & ~v85);
        }
        v4 = v32;
        if (v78 >= 0x41 && v77)
          MEMORY[0x1CAA32F9C](v77, 0x1000C8000313F17);
        v77 = v27;
      }
      else
      {
        sub_1C580C07C(&v89, (uint64_t)&__s2);
        if (v84 >= 0x41 && v83)
          MEMORY[0x1CAA32F9C](v83, 0x1000C8000313F17);
        v83 = (unint64_t **)__s2;
        v84 = v75;
        sub_1C580C14C((uint64_t)&v89, (char *)&__s2);
        if (v82 >= 0x41 && v81)
          MEMORY[0x1CAA32F9C](v81, 0x1000C8000313F17);
        v26 = (unint64_t **)__s2;
        v81 = __s2;
        v82 = v75;
        sub_1C580C07C(&v85, (uint64_t)&__s2);
        if (v80 >= 0x41 && v79)
          MEMORY[0x1CAA32F9C](v79, 0x1000C8000313F17);
        v79 = __s2;
        v80 = v75;
        sub_1C580C14C((uint64_t)&v85, (char *)&__s2);
        if (v78 >= 0x41 && v77)
          MEMORY[0x1CAA32F9C](v77, 0x1000C8000313F17);
        v27 = __s2;
        v77 = __s2;
        v28 = v75;
      }
      v78 = v28;
      if (*((unsigned __int8 *)v4 + 16) >= 0x15u)
      {
        if (v84 > 0x40)
        {
          if (!memcmp(v83, v26, (((unint64_t)v84 + 63) >> 3) & 0x3FFFFFF8))
          {
LABEL_96:
            v41 = (char *)operator new(0x80uLL);
            v14 = (uint64_t ***)(v41 + 64);
            *((_DWORD *)v41 + 21) = *((_DWORD *)v41 + 21) & 0x38000000 | 2;
            *(_QWORD *)v41 = 0;
            *((_QWORD *)v41 + 1) = 0;
            *((_QWORD *)v41 + 2) = 0;
            *((_QWORD *)v41 + 3) = v41 + 64;
            *((_QWORD *)v41 + 4) = 0;
            v42 = (uint64_t *)(v41 + 32);
            *((_QWORD *)v41 + 5) = 0;
            *((_QWORD *)v41 + 6) = 0;
            *((_QWORD *)v41 + 7) = v41 + 64;
            IntegerValue = llvm::Constant::getIntegerValue((llvm::Constant ***)v6, (llvm::Type *)&v83, v43);
            v76 = 257;
            sub_1C4774CC4(*IntegerValue);
            *((_QWORD *)v41 + 8) = v45;
            *((_QWORD *)v41 + 9) = 0;
            v46 = *((_DWORD *)v41 + 21) & 0xC0000000 | 2;
            *((_DWORD *)v41 + 20) = 81;
            *((_DWORD *)v41 + 21) = v46;
            *(_OWORD *)(v41 + 88) = 0u;
            *(_OWORD *)(v41 + 104) = 0u;
            *((_DWORD *)v41 + 30) = 0;
            if (*(_QWORD *)v41)
            {
              **((_QWORD **)v41 + 2) = *((_QWORD *)v41 + 1);
              v69 = *((_QWORD *)v41 + 1);
              if (v69)
                *(_QWORD *)(v69 + 16) = *((_QWORD *)v41 + 2);
            }
            *(_QWORD *)v41 = IntegerValue;
            v49 = IntegerValue[1];
            v48 = IntegerValue + 1;
            v47 = v49;
            *((_QWORD *)v41 + 1) = v49;
            if (v49)
              *((_QWORD *)v47 + 2) = v41 + 8;
            *((_QWORD *)v41 + 2) = v48;
            *v48 = v41;
            if (*((_QWORD *)v41 + 4))
            {
              **((_QWORD **)v41 + 6) = *((_QWORD *)v41 + 5);
              v70 = *((_QWORD *)v41 + 5);
              if (v70)
                *(_QWORD *)(v70 + 16) = *((_QWORD *)v41 + 6);
            }
            *v42 = v5;
            if (v5)
            {
              v52 = *(_QWORD *)(v5 + 8);
              v51 = (uint64_t **)(v5 + 8);
              v50 = v52;
              *((_QWORD *)v41 + 5) = v52;
              if (v52)
                *(_QWORD *)(v50 + 16) = v41 + 40;
              *((_QWORD *)v41 + 6) = v51;
              *v51 = v42;
            }
            *((_WORD *)v41 + 41) = v25;
LABEL_127:
            llvm::Value::setName(v14, (uint64_t)&__s2);
            if (v78 >= 0x41 && v77)
              MEMORY[0x1CAA32F9C](v77, 0x1000C8000313F17);
            if (v80 >= 0x41 && v79)
              MEMORY[0x1CAA32F9C](v79, 0x1000C8000313F17);
            if (v82 >= 0x41 && v81)
              MEMORY[0x1CAA32F9C](v81, 0x1000C8000313F17);
            if (v84 >= 0x41 && v83)
              MEMORY[0x1CAA32F9C](v83, 0x1000C8000313F17);
            goto LABEL_45;
          }
        }
        else if (v83 == v26)
        {
          goto LABEL_96;
        }
      }
      if (*(unsigned __int8 *)(v5 + 16) >= 0x15u)
      {
        if (v80 > 0x40)
        {
          if (!memcmp(v79, v27, (((unint64_t)v80 + 63) >> 3) & 0x3FFFFFF8))
          {
LABEL_109:
            v53 = (char *)operator new(0x80uLL);
            v14 = (uint64_t ***)(v53 + 64);
            *((_DWORD *)v53 + 21) = *((_DWORD *)v53 + 21) & 0x38000000 | 2;
            *(_QWORD *)v53 = 0;
            *((_QWORD *)v53 + 1) = 0;
            *((_QWORD *)v53 + 2) = 0;
            *((_QWORD *)v53 + 3) = v53 + 64;
            *((_QWORD *)v53 + 4) = 0;
            v54 = (llvm::Value ***)(v53 + 32);
            *((_QWORD *)v53 + 5) = 0;
            *((_QWORD *)v53 + 6) = 0;
            *((_QWORD *)v53 + 7) = v53 + 64;
            v56 = llvm::Constant::getIntegerValue((llvm::Constant ***)v6, (llvm::Type *)&v79, v55);
            v76 = 257;
            sub_1C4774CC4(*v4);
            *((_QWORD *)v53 + 8) = v57;
            *((_QWORD *)v53 + 9) = 0;
            v58 = *((_DWORD *)v53 + 21) & 0xC0000000 | 2;
            *((_DWORD *)v53 + 20) = 81;
            *((_DWORD *)v53 + 21) = v58;
            *(_OWORD *)(v53 + 88) = 0u;
            *(_OWORD *)(v53 + 104) = 0u;
            *((_DWORD *)v53 + 30) = 0;
            if (*(_QWORD *)v53)
            {
              **((_QWORD **)v53 + 2) = *((_QWORD *)v53 + 1);
              v71 = *((_QWORD *)v53 + 1);
              if (v71)
                *(_QWORD *)(v71 + 16) = *((_QWORD *)v53 + 2);
            }
            *(_QWORD *)v53 = v4;
            v61 = v4[1];
            v60 = v4 + 1;
            v59 = v61;
            *((_QWORD *)v53 + 1) = v61;
            if (v61)
              *((_QWORD *)v59 + 2) = v53 + 8;
            *((_QWORD *)v53 + 2) = v60;
            *v60 = v53;
            if (*((_QWORD *)v53 + 4))
            {
              **((_QWORD **)v53 + 6) = *((_QWORD *)v53 + 5);
              v72 = *((_QWORD *)v53 + 5);
              if (v72)
                *(_QWORD *)(v72 + 16) = *((_QWORD *)v53 + 6);
            }
            *v54 = v56;
            if (v56)
            {
              v64 = v56[1];
              v63 = (llvm::Value ****)(v56 + 1);
              v62 = v64;
              *((_QWORD *)v53 + 5) = v64;
              if (v64)
                *((_QWORD *)v62 + 2) = v53 + 40;
              *((_QWORD *)v53 + 6) = v63;
              *v63 = v54;
            }
            *((_WORD *)v53 + 41) = v25;
            goto LABEL_127;
          }
        }
        else if (v79 == v27)
        {
          goto LABEL_109;
        }
      }
      v65 = *(_QWORD *)(a2 + 8);
      if (v65)
      {
        if (!*(_QWORD *)(v65 + 8))
        {
          __s2 = 0;
          v73 = 0;
          matched = llvm::matchSelectPattern(*(_QWORD *)(v65 + 24), (uint64_t)&__s2, &v73, 0, 0);
          if (matched > 8 || ((1 << matched) & 0x181) == 0)
          {
            v94 = 0;
            if (sub_1C5819744((uint64_t)&v94, (uint64_t)v4) || (v93 = 0, sub_1C5819744((uint64_t)&v93, v5)))
              __asm { BR              X10 }
          }
        }
      }
      __asm { BR              X10 }
    }
  }
  v14 = (uint64_t ***)a2;
LABEL_45:
  if (v88 >= 0x41 && v87)
    MEMORY[0x1CAA32F9C](v87, 0x1000C8000313F17);
  if (v86 >= 0x41 && v85)
    MEMORY[0x1CAA32F9C](v85, 0x1000C8000313F17);
  if (v92 >= 0x41 && v91)
    MEMORY[0x1CAA32F9C](v91, 0x1000C8000313F17);
  if (v90 >= 0x41 && v89)
    MEMORY[0x1CAA32F9C](v89, 0x1000C8000313F17);
  return v14;
}

_QWORD *sub_1C580C07C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  unsigned int v6;
  unsigned int v7;
  char *v8;

  v2 = (uint64_t)result;
  v4 = *((unsigned int *)result + 6);
  *(_DWORD *)(a2 + 8) = v4;
  if (v4 > 0x40)
  {
    v5 = (char *)operator new[]();
    result = memcpy(v5, *(const void **)(v2 + 16), ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v5 = (char *)result[2];
  }
  *(_QWORD *)a2 = v5;
  v6 = *(_DWORD *)(v2 + 8);
  v7 = v6 - 1;
  if (v6 >= 0x41)
    v2 = *(_QWORD *)v2 + 8 * (v7 >> 6);
  if (((*(_QWORD *)v2 >> v7) & 1) == 0)
  {
    v8 = &v5[8 * ((v4 - 1) >> 6)];
    if (v4 < 0x41)
      v8 = (char *)a2;
    *(_QWORD *)v8 |= 1 << (v4 - 1);
  }
  return result;
}

uint64_t sub_1C580C14C@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  size_t v7;
  _QWORD *v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  int v12;

  v2 = result;
  v4 = *(unsigned int *)(result + 8);
  v12 = v4;
  if (v4 > 0x40)
  {
    v7 = ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8;
    v11 = (void *)operator new[]();
    memcpy(v11, *(const void **)v2, v7);
    result = llvm::APInt::flipAllBitsSlowCase((uint64_t)&v11);
    LODWORD(v4) = v12;
    v6 = (unint64_t)v11;
  }
  else
  {
    v5 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v4;
    if (!(_DWORD)v4)
      v5 = 0;
    v6 = v5 & ~*(_QWORD *)result;
  }
  *((_DWORD *)a2 + 2) = v4;
  *(_QWORD *)a2 = v6;
  v8 = (_QWORD *)(v2 + 16);
  v9 = *(_DWORD *)(v2 + 24);
  v10 = v9 - 1;
  if (v9 >= 0x41)
    v8 = (_QWORD *)(*v8 + 8 * (v10 >> 6));
  if (((*v8 >> v10) & 1) == 0)
  {
    if (v4 >= 0x41)
    {
      a2 = (char *)(v6 + 8 * ((v4 - 1) >> 6));
      v6 = *(_QWORD *)a2;
    }
    *(_QWORD *)a2 = v6 & ~(1 << (v4 - 1));
  }
  return result;
}

llvm::UndefValue **sub_1C580C254(uint64_t a1, uint64_t ***a2)
{
  __int128 v4;
  __int128 v5;
  llvm::APInt **v6;
  uint64_t *v7;
  unsigned __int8 *v8;
  llvm::Constant **v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int8 *v12;
  llvm::APInt *v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 **v19;
  int v20;
  llvm::Value **v21;
  llvm::Value *v22;
  uint64_t ***Not;
  unsigned __int8 *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  llvm::Constant *v30;
  unsigned int v31;
  llvm::Constant *v32;
  uint64_t v33;
  char *v34;
  unsigned __int8 **v35;
  __int16 v36;
  unsigned __int8 *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 ***v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t **v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t ****v53;
  uint64_t ***v54;
  int v55;
  int v56;
  llvm::ConstantExpr *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  llvm::UndefValue *v65;
  __int16 v66;
  uint64_t ***v67;
  char *v68;
  uint64_t **v69;
  uint64_t **v70;
  _QWORD *v71;
  uint64_t v72;
  int v73;
  int8x8_t *v74;
  unsigned __int8 **v75;
  uint64_t v76;
  unsigned __int8 **v77;
  uint64_t v78;
  BOOL v79;
  char v80;
  llvm::BasicBlock *v81;
  uint64_t SinglePredecessor;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  llvm *v87;
  llvm::BasicBlock *v88;
  llvm::BasicBlock *v89;
  unsigned __int16 isImpliedCondition;
  __int16 v92;
  void *v93;
  unsigned __int8 *v94;
  uint64_t v95;
  llvm::Value **v96;
  unint64_t **v97;
  uint64_t v98;
  uint8x8_t v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  unint64_t v103;
  unint64_t *v104;
  int8x8_t v105;
  uint8x8_t v106;
  unsigned int v107;
  const llvm::DominatorTree *v108;
  uint64_t v109;
  BOOL v110;
  const llvm::APInt *v111;
  uint64_t v112;
  uint64_t v113;
  _BOOL4 v114;
  uint64_t **v115;
  _BOOL4 v116;
  uint64_t **v117;
  uint64_t v118;
  unsigned int v119;
  void *v120;
  BOOL v121;
  int v122;
  char *v123;
  llvm::ValueHandleBase **v124;
  const llvm::APInt *v125;
  llvm::ValueHandleBase *v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  llvm::ValueHandleBase ***v132;
  uint64_t v133;
  __int16 v134;
  int v135;
  const llvm::DominatorTree *v136;
  int v137;
  llvm::Type **v138;
  unsigned int v139;
  BOOL v140;
  int v141;
  llvm::ValueHandleBase **v142;
  const llvm::APInt *v143;
  llvm::ValueHandleBase *v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  llvm::ValueHandleBase ***v150;
  uint64_t v151;
  uint64_t i;
  uint64_t v153;
  const char *v154;
  llvm::Constant *v155;
  llvm::Constant **v156;
  uint64_t v157;
  int v158;
  int64_t v159;
  BOOL v160;
  unint64_t v161;
  int v162;
  uint64_t *v163;
  uint64_t v164;
  llvm::Value *v165;
  llvm::ConstantInt *v166;
  _QWORD *v167;
  int v168;
  int64_t v169;
  unint64_t v170;
  int v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t **v174;
  unsigned __int8 *v175;
  __int16 v176;
  int v177;
  uint64_t v178;
  char *v179;
  llvm::Constant **v180;
  llvm::Constant **v181;
  uint64_t v182;
  llvm::Constant *v183;
  uint64_t v184;
  unsigned int v185;
  llvm::Constant *v186;
  _QWORD *v187;
  llvm::Constant *v188;
  uint64_t v189;
  llvm::Constant ***v190;
  uint64_t v191;
  __int16 v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  uint64_t *v198;
  void *v199;
  uint64_t v200;
  _QWORD ***v201;
  void *v202;
  uint64_t v203;
  uint64_t ***v204;
  uint8x8_t v205;
  __int32 v206;
  unsigned int v207;
  int v208;
  uint64_t v209;
  unint64_t v210;
  int8x8_t *v211;
  int8x8_t v212;
  uint8x8_t v213;
  uint8x8_t v214;
  unsigned int v215;
  unint64_t v216;
  int8x8_t *v217;
  int8x8_t v218;
  uint8x8_t v219;
  char *v220;
  llvm::Constant *v221;
  uint64_t v222;
  unsigned int v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  llvm::PHINode **v228;
  uint64_t v229;
  char v230;
  char v231;
  __int16 v232;
  llvm::Type *v233;
  unsigned int v234;
  llvm::ValueHandleBase *v235;
  char *v236;
  llvm::ValueHandleBase **v237;
  uint64_t v238;
  unsigned int v239;
  llvm::APInt *v240;
  _QWORD *v241;
  llvm::APInt *v242;
  uint64_t v243;
  llvm::ValueHandleBase ***v244;
  uint64_t v245;
  __int16 v246;
  unsigned int v247;
  llvm::Value **NullValue;
  llvm::Value ***v249;
  uint64_t v250;
  unsigned int v251;
  llvm::APInt *v252;
  _QWORD *v253;
  llvm::APInt *v254;
  llvm::Value *v255;
  llvm::Value ****v256;
  llvm::Value *v257;
  _QWORD *v258;
  uint64_t v259;
  llvm::Constant *v260;
  __int16 v261;
  llvm::Type *v262;
  uint64_t *v263;
  llvm::ValueHandleBase *AllOnesValue;
  uint64_t v265;
  llvm::ValueHandleBase *v266;
  uint64_t v267;
  char *v268;
  llvm::ValueHandleBase **v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  uint64_t v273;
  llvm::ValueHandleBase ***v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  llvm::ConstantInt *v279;
  unsigned int v280;
  char v281;
  uint64_t Declaration;
  uint64_t *v283;
  void *v284;
  void *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unsigned __int8 **v290;
  unsigned __int8 *v291;
  int v292;
  int v293;
  unsigned __int8 *v294;
  char *v295;
  void *v296;
  void *v297;
  unsigned __int8 *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unsigned __int8 **v303;
  unsigned __int8 *v304;
  int v305;
  int v306;
  unsigned __int8 *v307;
  char *v308;
  void *v309;
  void *v310;
  unsigned __int8 *v311;
  uint64_t **v312;
  uint64_t *v313;
  unsigned __int8 *v314;
  llvm::Constant **v315;
  unsigned __int8 *v316;
  char *v317;
  uint64_t v318;
  int v319;
  uint64_t v320;
  uint64_t *v321;
  _QWORD *v322;
  uint64_t v323;
  char *v324;
  unsigned int v325;
  _DWORD *v326;
  int v327;
  int v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  void *v334;
  void *v335;
  uint64_t v336;
  int v337;
  uint64_t v338;
  llvm::Value *v339;
  uint64_t v340;
  uint64_t v341;
  unsigned int v342;
  BOOL v343;
  uint64_t v345;
  int v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t ***v351;
  uint64_t FCmp;
  uint64_t v353;
  unsigned int v354;
  BOOL v355;
  uint64_t v357;
  uint64_t v358;
  llvm::Constant *v359;
  uint64_t v360;
  unsigned int v361;
  int v362;
  uint64_t v363;
  uint64_t v364;
  llvm::Constant *v365;
  __int16 v366;
  unsigned int v367;
  unsigned int v368;
  uint64_t v369;
  int v370;
  _QWORD **v371;
  uint64_t ***v372;
  int v373;
  uint64_t *v374;
  int v375;
  uint64_t *v376;
  uint64_t v377;
  llvm::GlobalValue *v378;
  unsigned __int8 *v380;
  _BYTE *ICmp;
  _BYTE *v382;
  uint64_t v383;
  unsigned int v384;
  int v385;
  uint64_t *v386;
  uint64_t *v387;
  uint64_t v388;
  unsigned __int8 *v389;
  llvm::Constant *v390;
  llvm::Type *v391;
  unsigned int v392;
  uint64_t v393;
  unint64_t v394;
  llvm::Type *v395;
  char v396;
  char v397;
  __int16 v398;
  llvm::Value **v399;
  llvm::Type *v400;
  llvm::Value ***v401;
  int v402;
  llvm::Constant ***v403;
  int v404;
  uint64_t v405;
  unsigned __int8 *v406;
  _BYTE *v407;
  uint64_t v408;
  char v409;
  uint64_t v410;
  llvm::APInt *v411;
  unsigned int v412;
  __int16 v413;
  llvm::Constant **v414;
  llvm::Value **v415;
  uint64_t v416;
  unsigned int v417;
  llvm::Constant *v418;
  _QWORD *v419;
  llvm::Constant *v420;
  llvm::Value *v421;
  llvm::Value ****v422;
  llvm::Value *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  llvm::BasicBlock *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  __int16 v433;
  int v434;
  uint64_t v435;
  int v436;
  uint64_t *v437;
  __int128 v438;
  llvm::Type ****v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t ****v445;
  uint64_t ***v446;
  int v447;
  int v448;
  uint64_t ***v449;
  char *v450;
  uint64_t **v451;
  uint64_t **v452;
  uint64_t v453;
  __int16 v454;
  int v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t ****v462;
  uint64_t ***v463;
  int v464;
  int v465;
  uint64_t ***v466;
  char *v467;
  uint64_t **v468;
  uint64_t **v469;
  int v470;
  uint64_t *v471;
  uint64_t v472;
  int v473;
  int v474;
  llvm *UnderlyingObject;
  llvm *v476;
  llvm::Type **v477;
  unsigned __int8 *v478;
  uint64_t *v479;
  llvm::Type *v480;
  int v481;
  llvm::Type *v482;
  int v483;
  unsigned int v484;
  int v485;
  int v486;
  int8x8_t *v487;
  int8x8_t v488;
  _QWORD *v489;
  int8x8_t v490;
  llvm::Value **v491;
  uint64_t v492;
  unsigned int v493;
  uint64_t v494;
  _QWORD *v495;
  uint64_t v496;
  llvm::Value *v497;
  _QWORD *v498;
  llvm::Value *v499;
  int8x8_t v500;
  llvm::Type *v501;
  llvm::ValueHandleBase *v502;
  uint64_t v503;
  unsigned int v504;
  uint64_t v505;
  _QWORD *v506;
  uint64_t v507;
  char *v508;
  llvm::Value ***v509;
  int8x8_t v510;
  llvm::Type *v511;
  llvm::Value **v512;
  uint64_t v513;
  unsigned int v514;
  uint64_t v515;
  _QWORD *v516;
  uint64_t v517;
  llvm::Value *v518;
  llvm::Value ****v519;
  llvm::Value *v520;
  llvm::Type *v521;
  int8x8_t v522;
  uint64_t v523;
  int v524;
  uint64_t v525;
  llvm::Type *v526;
  int v527;
  _QWORD *v528;
  unint64_t v529;
  unsigned int v530;
  int v531;
  int v532;
  int8x8_t *v533;
  unsigned int v534;
  llvm::Constant *v535;
  uint64_t v536;
  int v537;
  uint64_t *v538;
  uint64_t v539;
  unsigned __int8 *v540;
  char *v541;
  unsigned __int8 **v542;
  uint64_t v543;
  unsigned int v544;
  _DWORD *v545;
  _QWORD *v546;
  _DWORD *v547;
  uint64_t v548;
  unsigned __int8 ***v549;
  uint64_t v550;
  __int16 v551;
  unsigned int v552;
  llvm::Type *v553;
  _DWORD *v554;
  _BOOL8 v555;
  llvm::Constant *v556;
  uint64_t *v557;
  unsigned __int8 *v558;
  unsigned __int8 *v559;
  llvm::Value ***v560;
  llvm::Type *v561;
  llvm::Value **v562;
  uint64_t v563;
  unsigned int v564;
  uint64_t v565;
  _QWORD *v566;
  uint64_t v567;
  unsigned int v568;
  llvm::Type *v569;
  uint64_t v570;
  const llvm::APInt *v571;
  uint64_t v572;
  uint64_t v573;
  llvm::ConstantInt *v574;
  unint64_t v575;
  unint64_t v576;
  llvm::ValueHandleBase *v577;
  uint64_t *v578;
  unsigned __int8 *v579;
  const llvm::APInt *v580;
  llvm::Value **v581;
  char *v582;
  llvm::Value ***v583;
  uint64_t v584;
  unsigned int v585;
  uint64_t v586;
  _QWORD *v587;
  uint64_t v588;
  llvm::Value *v589;
  llvm::Value ****v590;
  llvm::Value *v591;
  uint64_t v592;
  uint64_t ***v593;
  llvm::Constant *v594;
  llvm::Constant **v595;
  __int16 v596;
  uint64_t v597;
  unsigned int v598;
  uint64_t v599;
  _QWORD *v600;
  uint64_t v601;
  uint64_t v602;
  llvm::Constant ***v603;
  uint64_t v604;
  uint64_t v605;
  unsigned int v606;
  llvm::Constant *v607;
  unsigned int v608;
  uint64_t v609;
  uint64_t v610;
  int v611;
  uint64_t **v612;
  llvm::Constant *v613;
  uint64_t v614;
  unsigned int v615;
  llvm::Constant **v616;
  uint64_t *v617;
  __int16 v618;
  uint64_t v619;
  unsigned int v620;
  _DWORD *v621;
  _QWORD *v622;
  uint64_t v623;
  uint64_t v624;
  unsigned int v625;
  const llvm::APInt *v626;
  llvm::APInt *v627;
  llvm::Value **v628;
  uint64_t v629;
  llvm::Type *v630;
  llvm::Value **v631;
  char *v632;
  llvm::Value ***v633;
  uint64_t v634;
  unsigned int v635;
  uint64_t v636;
  _QWORD *v637;
  uint64_t v638;
  llvm::Value *v639;
  llvm::Value ****v640;
  llvm::Value *v641;
  __int16 v642;
  llvm::Type *v643;
  unsigned int v644;
  int v645;
  llvm::ConstantInt **v646;
  const llvm::APInt *v647;
  llvm::Value **v648;
  uint64_t v649;
  llvm::Value ***v650;
  uint64_t v651;
  unsigned int v652;
  uint64_t v653;
  _QWORD *v654;
  uint64_t v655;
  llvm::Value *v656;
  llvm::Value ****v657;
  llvm::Value *v658;
  llvm::Type *v659;
  uint64_t v660;
  const char *v661;
  int v662;
  _QWORD *v663;
  llvm::Constant *v664;
  const void **v665;
  uint64_t v666;
  uint64_t v667;
  unint64_t v668;
  llvm::Constant **v669;
  size_t v670;
  uint64_t v671;
  uint8x8_t v672;
  const void **v673;
  llvm::ConstantInt **v674;
  unint64_t v675;
  int v676;
  unint64_t v677;
  uint8x8_t v678;
  uint64_t v679;
  uint64_t *v680;
  unsigned int v681;
  unsigned int v682;
  unsigned int v683;
  int v684;
  llvm::Type ***v685;
  llvm::Type **v686;
  int v687;
  llvm::Type ***v688;
  uint64_t v689;
  unsigned int v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  llvm::Type *v694;
  unsigned int v695;
  llvm::Type *v696;
  unsigned int v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  int v701;
  uint64_t v702;
  _QWORD *v703;
  _QWORD *v704;
  _QWORD *v705;
  _QWORD *v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  BOOL v712;
  BOOL v713;
  int v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  int v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  int v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  int v729;
  _DWORD **v730;
  uint64_t v731;
  int8x8_t *v732;
  int8x8_t v733;
  uint64_t v734;
  unsigned int v735;
  _DWORD *v736;
  _QWORD *v737;
  _DWORD *v738;
  uint64_t v739;
  int8x8_t **v740;
  uint64_t v741;
  int8x8_t *v742;
  int8x8_t v743;
  uint64_t v744;
  unsigned int v745;
  _DWORD *v746;
  _QWORD *v747;
  _DWORD *v748;
  uint64_t v749;
  int8x8_t **v750;
  uint64_t v751;
  int8x8_t *v752;
  int8x8_t v753;
  uint64_t v754;
  unsigned int v755;
  _DWORD *v756;
  _QWORD *v757;
  _DWORD *v758;
  uint64_t v759;
  int8x8_t **v760;
  uint64_t v761;
  uint64_t v762;
  unsigned int v763;
  _DWORD *v764;
  _QWORD *v765;
  _DWORD *v766;
  int8x8_t *v767;
  int8x8_t v768;
  uint64_t v769;
  unsigned int v770;
  _DWORD *v771;
  _QWORD *v772;
  _DWORD *v773;
  uint64_t v774;
  int8x8_t **v775;
  uint64_t v776;
  int8x8_t *v777;
  int8x8_t v778;
  uint64_t v779;
  unsigned int v780;
  _DWORD *v781;
  _QWORD *v782;
  _DWORD *v783;
  uint64_t v784;
  int8x8_t **v785;
  uint64_t v786;
  int8x8_t *v787;
  int8x8_t v788;
  uint64_t v789;
  unsigned int v790;
  _DWORD *v791;
  _QWORD *v792;
  _DWORD *v793;
  uint64_t v794;
  int8x8_t **v795;
  uint64_t v796;
  llvm::Constant *v797;
  llvm::UndefValue *v798;
  int v799;
  llvm::UndefValue *v800;
  int v801;
  llvm::Type *v802;
  _OWORD *v803;
  uint64_t v804;
  unsigned int v805;
  llvm::Type *v806;
  _QWORD *v807;
  uint64_t v808;
  _QWORD *v809;
  uint64_t v810;
  int8x8_t *v811;
  int8x8_t v812;
  uint64_t v813;
  unsigned int v814;
  _DWORD *v815;
  _QWORD *v816;
  _DWORD *v817;
  uint64_t v818;
  int8x8_t **v819;
  uint64_t v820;
  int v821;
  llvm::Constant ***v822;
  char *v823;
  __int16 v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  unsigned int v828;
  uint64_t v829;
  _QWORD *v830;
  uint64_t v831;
  uint64_t v832;
  _QWORD *v833;
  const llvm::APInt *v834;
  _DWORD *v835;
  uint64_t v836;
  llvm::Constant *v837;
  int v838;
  int v839;
  unsigned __int8 *v840;
  unsigned __int8 *v841;
  int v842;
  llvm::UndefValue **v843;
  __int16 v844;
  uint64_t v845;
  unsigned int v846;
  llvm::Type *v847;
  _QWORD *v848;
  uint64_t v849;
  llvm::UndefValue ***v850;
  uint64_t v851;
  uint64_t v852;
  llvm::Constant **v853;
  unsigned __int8 *v854;
  uint64_t v855;
  char *v856;
  uint64_t v857;
  int v858;
  unsigned __int8 **v859;
  unsigned int v860;
  int v861;
  char *v862;
  llvm::UndefValue **v863;
  int v864;
  uint64_t v865;
  unsigned int v866;
  llvm::Type *v867;
  _QWORD *v868;
  uint64_t v869;
  llvm::UndefValue ***v870;
  uint64_t v871;
  unsigned __int8 **v872;
  unsigned __int8 **v873;
  __int16 v874;
  uint64_t v875;
  unsigned int v876;
  uint64_t v877;
  _QWORD *v878;
  uint64_t v879;
  unsigned __int8 **v880;
  uint64_t v881;
  unsigned int v882;
  uint64_t v883;
  _QWORD *v884;
  uint64_t v885;
  uint64_t v886;
  unsigned int v887;
  llvm::Type *v888;
  _QWORD *v889;
  uint64_t v890;
  llvm::Constant **v891;
  int v892;
  int v893;
  void **v894;
  int v895;
  unsigned __int8 *v896;
  uint64_t v897;
  const llvm::APInt *v898;
  llvm::Value **v899;
  uint64_t v900;
  llvm::Value ***v901;
  uint64_t v902;
  unsigned int v903;
  uint64_t v904;
  _QWORD *v905;
  uint64_t v906;
  llvm::Value *v907;
  llvm::Value ****v908;
  llvm::Value *v909;
  int v910;
  uint64_t *v911;
  uint64_t v912;
  int v913;
  uint64_t v914;
  uint64_t *v915;
  int v916;
  int v917;
  llvm::APInt ***v918;
  llvm::Constant **v919;
  int v920;
  llvm::ConstantInt ***v921;
  BOOL v922;
  int v923;
  int v924;
  llvm::Constant **v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  llvm::Constant *v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  llvm::Constant *v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  unsigned int v937;
  uint64_t *v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t *v942;
  uint64_t v943;
  unsigned int v944;
  int v945;
  int v946;
  uint64_t v947;
  int v948;
  uint64_t v949;
  int v950;
  llvm::Constant *v951;
  __int16 v952;
  int v953;
  uint64_t *v954;
  int v955;
  __int16 v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  llvm::APInt ***v961;
  llvm::APInt **v962;
  int v963;
  int v964;
  llvm::APInt **v965;
  char *v966;
  llvm::APInt *v967;
  llvm::APInt *v968;
  llvm::Constant **v969;
  llvm::Type *v970;
  llvm::Value **v971;
  int v972;
  uint64_t *v973;
  _QWORD *v974;
  char *v975;
  uint64_t v976;
  int v977;
  uint64_t v978;
  uint64_t *v979;
  _QWORD *v980;
  uint64_t v981;
  char *v982;
  llvm::Type *v983;
  unint64_t v984;
  uint64_t *v985;
  unsigned __int8 *v986;
  int v987;
  llvm::Type *v988;
  _QWORD *v989;
  _OWORD *v990;
  llvm::Value **v991;
  uint64_t v992;
  unsigned int v993;
  uint64_t v994;
  _QWORD *v995;
  uint64_t v996;
  llvm::Value *v997;
  _QWORD *v998;
  llvm::Value *v999;
  llvm::ValueHandleBase *v1000;
  uint64_t v1001;
  unsigned int v1002;
  uint64_t v1003;
  _QWORD *v1004;
  uint64_t v1005;
  uint64_t v1006;
  _QWORD *v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  unsigned __int8 *v1011;
  unsigned __int8 *v1012;
  llvm::Constant *v1013;
  __int16 v1014;
  char *v1015;
  uint64_t **v1016;
  __int16 v1017;
  int v1018;
  char *v1019;
  size_t v1020;
  char *v1021;
  char *v1022;
  uint64_t v1023;
  llvm::Constant *v1024;
  uint64_t *v1025;
  unsigned __int8 *v1026;
  llvm::Type *v1027;
  uint64_t v1028;
  unsigned int v1029;
  uint64_t v1030;
  _QWORD *v1031;
  uint64_t v1032;
  llvm::Value *v1033;
  llvm::Value ****v1034;
  llvm::Value *v1035;
  _DWORD *v1036;
  _DWORD *v1037;
  int v1038;
  _DWORD *v1039;
  _DWORD *v1040;
  int v1041;
  __int16 v1042;
  _QWORD *v1043;
  _QWORD *v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  unsigned __int8 **v1049;
  unsigned __int8 *v1050;
  int v1051;
  int v1052;
  unsigned __int8 *v1053;
  char *v1054;
  void *v1055;
  void *v1056;
  unsigned __int8 *v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  unsigned __int8 **v1062;
  unsigned __int8 *v1063;
  int v1064;
  int v1065;
  unsigned __int8 *v1066;
  char *v1067;
  void *v1068;
  void *v1069;
  unsigned __int8 *v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t ****v1075;
  uint64_t ***v1076;
  int v1077;
  int v1078;
  uint64_t ***v1079;
  char *v1080;
  uint64_t **v1081;
  uint64_t **v1082;
  _DWORD *v1083;
  _DWORD *v1084;
  int v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  uint64_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  llvm::Type *v1155;
  int v1156;
  unsigned int v1157;
  int v1158;
  unint64_t PrimitiveSizeInBits;
  llvm::BasicBlock *Successor;
  int v1161;
  unsigned __int8 *v1162;
  unsigned __int8 ***v1163;
  unsigned __int8 ***v1164;
  void *v1165;
  uint64_t v1166;
  uint64_t *v1167;
  uint64_t *v1168;
  uint64_t *v1169;
  unsigned __int8 *v1170;
  llvm::Type **v1171;
  llvm::PHINode *v1172;
  llvm::PHINode *v1173;
  llvm::PHINode *v1174;
  __int16 v1175;
  llvm::PHINode *v1176;
  int v1177;
  unsigned int v1178;
  llvm::PHINode *v1179;
  __int16 v1180;
  unsigned int v1181;
  llvm *v1182;
  llvm::APInt *v1183;
  _OWORD v1184[2];
  uint64_t ***v1185;
  uint64_t v1186;
  char v1187;
  void *__p[2];
  __int128 v1189;
  __int128 v1190;
  llvm::APInt ***v1191;
  void *__s1;
  unsigned int v1193;
  void *__s2;
  unsigned int v1195;
  uint64_t v1196;
  unsigned int v1197;
  unint64_t v1198;
  unsigned int v1199;
  llvm::Constant **v1200;
  unsigned int v1201;
  int8x8_t *v1202;
  unsigned int v1203;
  llvm::APInt *v1204;
  llvm::APInt *v1205;
  int v1206;
  llvm::APInt **v1207;
  unsigned __int8 *v1208;
  uint64_t v1209;
  unsigned int v1210;
  __int16 v1211;
  uint64_t v1212;

  v1212 = *MEMORY[0x1E0C80C00];
  v4 = *(_OWORD *)(a1 + 120);
  v5 = *(_OWORD *)(a1 + 104);
  v1184[0] = *(_OWORD *)(a1 + 88);
  v1184[1] = v5;
  v1186 = *((_QWORD *)&v4 + 1);
  v1185 = a2;
  v7 = (uint64_t *)(a2 - 8);
  v6 = (llvm::APInt **)*(a2 - 8);
  v9 = (llvm::Constant **)(a2 - 4);
  v8 = (unsigned __int8 *)*(a2 - 4);
  v10 = sub_1C577E1A0((uint64_t)v6);
  v11 = sub_1C577E1A0((uint64_t)v8);
  if (v10 < v11)
    goto LABEL_2;
  if (v10 == v11 && *((_BYTE *)*v6 + 8) != 15)
  {
    v13 = v6[1];
    if (v13)
    {
      v14 = 0;
      while (1)
      {
        v15 = *((_QWORD *)v13 + 3);
        v16 = *(unsigned __int8 *)(v15 + 16);
        if (v16 == 43)
        {
          v17 = *(unsigned __int8 **)(v15 - 64);
          if (v8 == v17)
          {
            v12 = *(unsigned __int8 **)(v15 - 32);
            if (v6 == (llvm::APInt **)v12)
              goto LABEL_24;
          }
          v18 = v6 == (llvm::APInt **)v17 && v8 == *(unsigned __int8 **)(v15 - 32);
        }
        else
        {
          if (v16 == 5)
          {
            if (*(_WORD *)(v15 + 18) != 15)
              goto LABEL_19;
            v19 = (unsigned __int8 **)(v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF));
            v12 = *v19;
            if (v8 == *v19 && v6 == (llvm::APInt **)v19[4])
            {
LABEL_24:
              v20 = 1;
              goto LABEL_22;
            }
            if (v6 == (llvm::APInt **)v12 && v8 == v19[4])
              LOBYTE(v12) = 1;
            else
LABEL_19:
              LOBYTE(v12) = 0;
          }
          v18 = (v16 == 5) & v12;
        }
        v20 = v18 << 31 >> 31;
LABEL_22:
        v14 += v20;
        v13 = (llvm::APInt *)*((_QWORD *)v13 + 1);
        if (!v13)
        {
          if (v14 <= 0)
            break;
LABEL_2:
          __asm { BR              X11 }
        }
      }
    }
  }
  v21 = sub_1C4E66730(*((_WORD *)a2 + 9) & 0x3F, (llvm *)v6, (llvm::UndefValue *)v8, (uint64_t)v1184, 3);
  if (v21)
  {
    v22 = (llvm::Value *)v21;
    return sub_1C577F888(a1, (llvm::ValueAsMetadata *)a2, v22);
  }
  if ((*((_WORD *)a2 + 9) & 0x3F) == 0x21
    && v8
    && v8[16] <= 0x14u
    && ((llvm::Constant::isNullValue((llvm::Constant *)v8) & 1) != 0
     || (sub_1C4E71060((uint64_t)__p, (llvm::Constant *)v8) & 1) != 0))
  {
    v1207 = 0;
    v1200 = 0;
    v1196 = 0;
    __p[0] = &v1207;
    __p[1] = &v1200;
    *(_QWORD *)&v1189 = &v1196;
    if (sub_1C4FA9CBC((_QWORD **)__p, (uint64_t)v6))
    {
      v26 = (unsigned __int8 *)sub_1C577FA08(a1, v1200);
      if (v26)
      {
        v27 = (uint64_t)v26;
        if (v26 != (unsigned __int8 *)v1196)
          goto LABEL_41;
LABEL_99:
        v66 = *((_WORD *)a2 + 9) & 0x3F;
        LOWORD(v1190) = 257;
        return (llvm::UndefValue **)llvm::CmpInst::Create(53, v66, v27, (uint64_t)v8, (uint64_t)__p, 0);
      }
      v65 = sub_1C577FA08(a1, (llvm::Constant **)v1196);
      if (v65)
      {
        v27 = (uint64_t)v65;
        if (v65 == (llvm::UndefValue *)v1200)
          goto LABEL_99;
      }
    }
  }
LABEL_41:
  v1182 = (llvm *)v8;
  v28 = *((_DWORD *)*v6 + 2);
  if ((v28 & 0xFE) == 0x12)
    v28 = *(_DWORD *)(**((_QWORD **)*v6 + 2) + 8);
  if (v28 == 269)
  {
    v29 = *v7;
    v30 = *v9;
    if ((!*v9
       || *((unsigned __int8 *)v30 + 16) > 0x14u
       || (llvm::Constant::isNullValue(*v9) & 1) == 0 && (sub_1C4E71060((uint64_t)__p, v30) & 1) == 0)
      && !sub_1C4D89CC8((uint64_t)__p, v30))
    {
      __asm { BR              X10 }
    }
    LOWORD(v1190) = 257;
    Not = (uint64_t ***)llvm::BinaryOperator::CreateNot(v29, (llvm::Type *)__p, 0);
    if (Not)
      return (llvm::UndefValue **)Not;
  }
  v31 = *((_WORD *)a2 + 9) & 0x3F;
  if ((*((_WORD *)a2 + 9) & 0x3E) != 0x20 && v31 - 32 <= 9 && v31 <= 0x29 && ((1 << v31) & 0x2AA00000000) != 0)
  {
    v32 = *v9;
    if (*v9)
    {
      if (*((unsigned __int8 *)v32 + 16) <= 0x14u)
      {
        v33 = *v7;
        sub_1C57F39E0(v32, *((_WORD *)a2 + 9) & 0x3F, (uint64_t)&v1207);
        if ((_BYTE)v1209)
        {
          v34 = (char *)operator new(0x80uLL);
          *((_DWORD *)v34 + 21) = *((_DWORD *)v34 + 21) & 0x38000000 | 2;
          Not = (uint64_t ***)(v34 + 64);
          *(_QWORD *)v34 = 0;
          *((_QWORD *)v34 + 1) = 0;
          *((_QWORD *)v34 + 2) = 0;
          *((_QWORD *)v34 + 3) = v34 + 64;
          *((_QWORD *)v34 + 4) = 0;
          v35 = (unsigned __int8 **)(v34 + 32);
          *((_QWORD *)v34 + 5) = 0;
          *((_QWORD *)v34 + 6) = 0;
          *((_QWORD *)v34 + 7) = v34 + 64;
          v36 = (__int16)v1207;
          v37 = v1208;
          LOWORD(v1190) = 257;
          sub_1C4774CC4(*(_DWORD **)v33);
          *((_QWORD *)v34 + 8) = v38;
          *((_QWORD *)v34 + 9) = 0;
          v39 = *((_DWORD *)v34 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v34 + 20) = 81;
          *((_DWORD *)v34 + 21) = v39;
          *(_OWORD *)(v34 + 88) = 0u;
          *(_OWORD *)(v34 + 104) = 0u;
          *((_DWORD *)v34 + 30) = 0;
          if (*(_QWORD *)v34)
          {
            **((_QWORD **)v34 + 2) = *((_QWORD *)v34 + 1);
            v357 = *((_QWORD *)v34 + 1);
            if (v357)
              *(_QWORD *)(v357 + 16) = *((_QWORD *)v34 + 2);
          }
          *(_QWORD *)v34 = v33;
          v42 = *(_QWORD *)(v33 + 8);
          v41 = (_QWORD *)(v33 + 8);
          v40 = v42;
          *((_QWORD *)v34 + 1) = v42;
          if (v42)
            *(_QWORD *)(v40 + 16) = v34 + 8;
          *((_QWORD *)v34 + 2) = v41;
          *v41 = v34;
          if (*((_QWORD *)v34 + 4))
          {
            **((_QWORD **)v34 + 6) = *((_QWORD *)v34 + 5);
            v358 = *((_QWORD *)v34 + 5);
            if (v358)
              *(_QWORD *)(v358 + 16) = *((_QWORD *)v34 + 6);
          }
          *v35 = v37;
          if (v37)
          {
            v45 = *((_QWORD *)v37 + 1);
            v44 = (unsigned __int8 ***)(v37 + 8);
            v43 = v45;
            *((_QWORD *)v34 + 5) = v45;
            if (v45)
              *(_QWORD *)(v43 + 16) = v34 + 40;
            *((_QWORD *)v34 + 6) = v44;
            *v44 = v35;
          }
          *((_WORD *)v34 + 41) = v36;
          goto LABEL_386;
        }
        v31 = *((_WORD *)a2 + 9) & 0x3F;
      }
    }
  }
  if (v31 <= 0x29 && ((1 << v31) & 0x2AA00000068) != 0 && sub_1C57B3C88((uint64_t)a2, 0))
  {
    v46 = a2[5][7][5] + 216;
    v1211 = 260;
    v1207 = (llvm::APInt **)v46;
    llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)&v1207);
    if ((DWORD2(v1189) & 0xFFFFFFFE) != 0x30)
    {
      if (SBYTE7(v1189) < 0)
        operator delete(__p[0]);
LABEL_80:
      *((_WORD *)a2 + 9) = *((_WORD *)a2 + 9) & 0xFFC0 | *((_WORD *)&word_1C8661768 + v31 - 3);
      if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
      {
        v69 = 0;
        v68 = &byte_1C871356D;
        goto LABEL_102;
      }
      v49 = ***a2;
      v50 = *(_QWORD *)(v49 + 152);
      v51 = *(unsigned int *)(v49 + 168);
      if ((_DWORD)v51)
      {
        LODWORD(v52) = (v51 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        v53 = (uint64_t ****)(v50 + 16 * v52);
        v54 = *v53;
        if (*v53 == a2)
        {
LABEL_101:
          v67 = v53[1];
          v70 = *v67;
          v68 = (char *)(v67 + 2);
          v69 = v70;
LABEL_102:
          LOWORD(v1190) = 773;
          __p[0] = v68;
          __p[1] = v69;
          *(_QWORD *)&v1189 = ".not";
          llvm::Value::setName(a2, (uint64_t)__p);
          sub_1C577F7AC(a1, (llvm::Value *)a2);
          return (llvm::UndefValue **)a2;
        }
        v55 = 1;
        while (v54 != (uint64_t ***)-4096)
        {
          v56 = v52 + v55++;
          v52 = v56 & (v51 - 1);
          v54 = *(uint64_t ****)(v50 + 16 * v52);
          if (v54 == a2)
          {
            v53 = (uint64_t ****)(v50 + 16 * v52);
            goto LABEL_101;
          }
        }
      }
      v53 = (uint64_t ****)(v50 + 16 * v51);
      goto LABEL_101;
    }
    v47 = a2[1];
    if (v47)
      v48 = v47[1] == 0;
    else
      v48 = 0;
    if (SBYTE7(v1189) < 0)
      operator delete(__p[0]);
    if (v48)
      goto LABEL_80;
  }
  v57 = (llvm::ConstantExpr *)(*((_WORD *)a2 + 9) & 0x3F);
  v58 = (uint64_t)*(a2 - 8);
  v59 = (uint64_t)*(a2 - 4);
  if ((_DWORD)v57 != 34 || *(_BYTE *)(v59 + 16) != 16 || !v59)
    goto LABEL_123;
  v60 = *(unsigned __int8 *)(v58 + 16);
  if (v60 == 5)
  {
    if (*(_WORD *)(v58 + 18) != 13)
      goto LABEL_123;
    v71 = (_QWORD *)(v58 - 32 * (*(_DWORD *)(v58 + 20) & 0x7FFFFFF));
    v72 = *v71;
    v73 = *(unsigned __int8 *)(*v71 + 16);
    if (v73 == 5)
    {
      if (*(_WORD *)(v72 + 18) != 13)
        goto LABEL_123;
      v77 = (unsigned __int8 **)(v72 - 32 * (*(_DWORD *)(v72 + 20) & 0x7FFFFFF));
      v63 = *v77;
      if (!*v77)
        goto LABEL_123;
      v64 = v77[4];
      if (!v64)
        goto LABEL_123;
    }
    else
    {
      if (v73 != 41)
        goto LABEL_123;
      v63 = *(unsigned __int8 **)(v72 - 64);
      if (!v63)
        goto LABEL_123;
      v64 = *(unsigned __int8 **)(v72 - 32);
      if (!v64)
        goto LABEL_123;
    }
    v76 = v71[4];
    if (!v76)
      goto LABEL_123;
  }
  else
  {
    if (v60 != 41)
      goto LABEL_123;
    v61 = *(_QWORD *)(v58 - 64);
    v62 = *(unsigned __int8 *)(v61 + 16);
    if (v62 == 5)
    {
      if (*(_WORD *)(v61 + 18) != 13)
        goto LABEL_123;
      v75 = (unsigned __int8 **)(v61 - 32 * (*(_DWORD *)(v61 + 20) & 0x7FFFFFF));
      v63 = *v75;
      if (!*v75)
        goto LABEL_123;
      v64 = v75[4];
      if (!v64)
        goto LABEL_123;
    }
    else
    {
      if (v62 != 41)
        goto LABEL_123;
      v63 = *(unsigned __int8 **)(v61 - 64);
      if (!v63)
        goto LABEL_123;
      v64 = *(unsigned __int8 **)(v61 - 32);
      if (!v64)
        goto LABEL_123;
    }
    v76 = *(_QWORD *)(v58 - 32);
    if (!v76)
      goto LABEL_123;
  }
  if (*(_BYTE *)(v76 + 16) != 16)
    goto LABEL_123;
  v78 = *(_QWORD *)(v58 + 8);
  if (!v78 || *(_QWORD *)(v78 + 8))
    goto LABEL_123;
  v97 = (unint64_t **)(v76 + 24);
  v98 = *(unsigned int *)(v76 + 32);
  if (v98 > 0x40)
  {
    v102 = 0;
    v103 = (unint64_t)(v98 + 63) >> 6;
    v104 = *v97;
    do
    {
      v105 = (int8x8_t)*v104++;
      v106 = (uint8x8_t)vcnt_s8(v105);
      v106.i16[0] = vaddlv_u8(v106);
      v102 += v106.i32[0];
      --v103;
    }
    while (v103);
    if (v102 != 1)
      goto LABEL_123;
    v101 = llvm::APInt::countTrailingZerosSlowCase(v97);
  }
  else
  {
    v99 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v97);
    v99.i16[0] = vaddlv_u8(v99);
    if (v99.u32[0] != 1)
      goto LABEL_123;
    v100 = __clz(__rbit64((unint64_t)*v97));
    if (v98 >= v100)
      v101 = v100;
    else
      v101 = v98;
  }
  if (v101 <= 0x1F && ((1 << v101) & 0x80008080) != 0)
  {
    v107 = *(_DWORD *)(v59 + 32);
    v1173 = (llvm::PHINode *)(v101 + 1);
    if (v107 != (_DWORD)v1173)
    {
      v1156 = v101;
      LODWORD(__p[1]) = *(_DWORD *)(v59 + 32);
      if (v107 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)__p, 0, 0);
      else
        __p[0] = 0;
      sub_1C4912E54(__p, 0, v1173);
      v109 = *(unsigned int *)(v59 + 32);
      v1165 = __p[0];
      if (v109 > 0x40)
        v110 = memcmp(*(const void **)(v59 + 24), __p[0], ((unint64_t)(v109 + 63) >> 3) & 0x3FFFFFF8) == 0;
      else
        v110 = *(void **)(v59 + 24) == __p[0];
      v135 = v110;
      v1158 = v135;
      if (LODWORD(__p[1]) >= 0x41 && v1165)
        MEMORY[0x1CAA32F9C](v1165, 0x1000C8000313F17);
      if (v1158
        && llvm::ComputeMaxSignificantBits((llvm *)v63, *(const llvm::Value **)(a1 + 80), 0, *(_QWORD *)(a1 + 56), (llvm::AssumptionCache *)a2, *(const llvm::Instruction **)(a1 + 72), v108) <= v1173&& llvm::ComputeMaxSignificantBits((llvm *)v64, *(const llvm::Value **)(a1 + 80), 0, *(_QWORD *)(a1 + 56), (llvm::AssumptionCache *)a2, *(const llvm::Instruction **)(a1 + 72), v136) <= v1173)
      {
        v137 = *(_DWORD *)(v58 + 20);
        if ((v137 & 0x40000000) != 0)
          v138 = *(llvm::Type ***)(v58 - 8);
        else
          v138 = (llvm::Type **)(v58 - 32 * (v137 & 0x7FFFFFF));
        v1155 = *v138;
        for (i = *((_QWORD *)*v138 + 1); i; i = *(_QWORD *)(v1166 + 8))
        {
          v1166 = i;
          v153 = *(_QWORD *)(i + 24);
          if (v153 != v58)
          {
            if (!v153 || *(_BYTE *)(v153 + 16) != 66)
              goto LABEL_123;
            PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v153);
            if ((_DWORD)v154 == 1)
            if (PrimitiveSizeInBits > (unint64_t)v1173)
              goto LABEL_123;
          }
        }
        v155 = **(llvm::Constant ***)v1155;
        LODWORD(__p[0]) = (_DWORD)v1173;
        if (v1156 <= 30)
        {
          if (v1156 == 15)
          {
            v156 = (llvm::Constant **)(*(_QWORD *)v155 + 1936);
          }
          else if (v1156 == 7)
          {
            v156 = (llvm::Constant **)(*(_QWORD *)v155 + 1912);
          }
          else if (v1156)
          {
            v326 = sub_1C5270984(*(_QWORD *)v155 + 2168, __p);
            v156 = (llvm::Constant **)*((_QWORD *)v326 + 1);
            if (!v156)
            {
              v156 = (llvm::Constant **)sub_1C484358C(*(_QWORD *)v155 + 2040, 24, 3);
              v327 = (int)__p[0];
              *v156 = v155;
              v156[2] = 0;
              v156[1] = (llvm::Constant *)((v327 << 8) | 0xDu);
              *((_QWORD *)v326 + 1) = v156;
            }
          }
          else
          {
            v156 = (llvm::Constant **)(*(_QWORD *)v155 + 1888);
          }
        }
        else
        {
          v156 = (llvm::Constant **)(*(_QWORD *)v155 + 1960);
        }
        v1200 = v156;
        Declaration = llvm::Intrinsic::getDeclaration((uint64_t *)a2[5][7][5], 263, (uint64_t *)&v1200, 1);
        v283 = *(uint64_t **)(a1 + 24);
        v283[6] = *((_QWORD *)v1155 + 5);
        v283[7] = (uint64_t)v1155 + 24;
        v284 = (void *)*((_QWORD *)v1155 + 6);
        __p[0] = v284;
        if (v284)
        {
          llvm::MetadataTracking::track((uint64_t)__p, (unsigned __int8 *)v284, 2);
          v285 = __p[0];
        }
        else
        {
          v285 = 0;
        }
        sub_1C4774EF4((uint64_t)v283, 0, (uint64_t)v285);
        if (__p[0])
          llvm::MetadataTracking::untrack((uint64_t)__p, (unsigned __int8 *)__p[0]);
        if ((v63[23] & 0x10) == 0)
        {
          v296 = 0;
          v295 = &byte_1C871356D;
LABEL_435:
          LOWORD(v1190) = 773;
          __p[0] = v295;
          __p[1] = v296;
          *(_QWORD *)&v1189 = ".trunc";
          v298 = sub_1C4773E38(v283, 38, v63, (uint64_t)v1200, (uint64_t)__p);
          if ((v64[23] & 0x10) == 0)
          {
            v309 = 0;
            v308 = &byte_1C871356D;
LABEL_444:
            LOWORD(v1190) = 773;
            __p[0] = v308;
            __p[1] = v309;
            *(_QWORD *)&v1189 = ".trunc";
            v311 = sub_1C4773E38(v283, 38, v64, (uint64_t)v1200, (uint64_t)__p);
            if (Declaration)
              v312 = *(uint64_t ***)(Declaration + 24);
            else
              v312 = 0;
            v1207 = (llvm::APInt **)v298;
            v1208 = v311;
            __p[0] = "sadd";
            LOWORD(v1190) = 259;
            v313 = (uint64_t *)sub_1C4774778(v283, v312, Declaration, (uint64_t *)&v1207, 2, (uint64_t)__p, 0);
            LODWORD(v1207) = 0;
            __p[0] = "sadd.result";
            LOWORD(v1190) = 259;
            v314 = (unsigned __int8 *)sub_1C506DBC4((uint64_t)v283, v313, (unsigned int *)&v1207, 1, (uint64_t)__p);
            v315 = *(llvm::Constant ***)v1155;
            LOWORD(v1190) = 257;
            v316 = sub_1C4773E38(v283, 39, v314, (uint64_t)v315, (uint64_t)__p);
            sub_1C577F888(a1, v1155, (llvm::Value *)v316);
            sub_1C57813F4(a1, (uint64_t)v1155);
            __p[0] = "sadd.overflow";
            LOWORD(v1190) = 259;
            v317 = (char *)operator new(0x80uLL);
            Not = (uint64_t ***)(v317 + 32);
            *((_DWORD *)v317 + 13) = *((_DWORD *)v317 + 13) & 0x38000000 | 1;
            *(_QWORD *)v317 = 0;
            *((_QWORD *)v317 + 1) = 0;
            *((_QWORD *)v317 + 2) = 0;
            *((_QWORD *)v317 + 3) = v317 + 32;
            v318 = *v313;
            v319 = *(unsigned __int8 *)(*v313 + 8);
            if (*v313 && v319 == 17)
            {
              if (*(_QWORD *)(v318 + 32) >= 2uLL)
              {
                v321 = (uint64_t *)(v318 + 24);
                goto LABEL_453;
              }
            }
            else
            {
              v320 = 0;
              if (!v318 || v319 != 16)
                goto LABEL_454;
              if (*(_DWORD *)(v318 + 12) >= 2u)
              {
                v321 = (uint64_t *)(*(_QWORD *)(v318 + 16) + 8);
LABEL_453:
                v320 = *v321;
LABEL_454:
                *((_QWORD *)v317 + 4) = v320;
                *((_QWORD *)v317 + 5) = 0;
                *((_QWORD *)v317 + 6) = 0x10000005CLL;
                *(_OWORD *)(v317 + 56) = 0u;
                *(_OWORD *)(v317 + 72) = 0u;
                *((_DWORD *)v317 + 22) = 0;
                v322 = v313 + 1;
                v323 = v313[1];
                *(_QWORD *)v317 = v313;
LABEL_455:
                *((_QWORD *)v317 + 1) = v323;
                if (v323)
                  *(_QWORD *)(v323 + 16) = v317 + 8;
                *((_QWORD *)v317 + 2) = v322;
                *v322 = v317;
                *((_DWORD *)v317 + 28) = 1;
                v324 = v317 + 112;
                *((_QWORD *)v324 - 2) = v324;
                *((_QWORD *)v324 - 1) = 0x400000001;
                goto LABEL_386;
              }
            }
            v320 = 0;
            goto LABEL_454;
          }
          v299 = ***(_QWORD ***)v64;
          v300 = *(_QWORD *)(v299 + 152);
          v301 = *(unsigned int *)(v299 + 168);
          if ((_DWORD)v301)
          {
            LODWORD(v302) = (v301 - 1) & ((v64 >> 4) ^ (v64 >> 9));
            v303 = (unsigned __int8 **)(v300 + 16 * v302);
            v304 = *v303;
            if (*v303 == v64)
            {
LABEL_443:
              v307 = v303[1];
              v310 = *(void **)v307;
              v308 = (char *)(v307 + 16);
              v309 = v310;
              goto LABEL_444;
            }
            v305 = 1;
            while (v304 != (unsigned __int8 *)-4096)
            {
              v306 = v302 + v305++;
              v302 = v306 & (v301 - 1);
              v304 = *(unsigned __int8 **)(v300 + 16 * v302);
              if (v304 == v64)
              {
                v303 = (unsigned __int8 **)(v300 + 16 * v302);
                goto LABEL_443;
              }
            }
          }
          v303 = (unsigned __int8 **)(v300 + 16 * v301);
          goto LABEL_443;
        }
        v286 = ***(_QWORD ***)v63;
        v287 = *(_QWORD *)(v286 + 152);
        v288 = *(unsigned int *)(v286 + 168);
        if ((_DWORD)v288)
        {
          LODWORD(v289) = (v288 - 1) & ((v63 >> 4) ^ (v63 >> 9));
          v290 = (unsigned __int8 **)(v287 + 16 * v289);
          v291 = *v290;
          if (*v290 == v63)
          {
LABEL_434:
            v294 = v290[1];
            v297 = *(void **)v294;
            v295 = (char *)(v294 + 16);
            v296 = v297;
            goto LABEL_435;
          }
          v292 = 1;
          while (v291 != (unsigned __int8 *)-4096)
          {
            v293 = v289 + v292++;
            v289 = v293 & (v288 - 1);
            v291 = *(unsigned __int8 **)(v287 + 16 * v289);
            if (v291 == v63)
            {
              v290 = (unsigned __int8 **)(v287 + 16 * v289);
              goto LABEL_434;
            }
          }
        }
        v290 = (unsigned __int8 **)(v287 + 16 * v288);
        goto LABEL_434;
      }
    }
  }
LABEL_123:
  v79 = *(unsigned __int8 *)(v59 + 16) > 0x14u || v59 == 0;
  if (v79)
    goto LABEL_129;
  __p[0] = &v1190;
  __p[1] = &v1190;
  *(_QWORD *)&v1189 = 4;
  DWORD2(v1189) = 0;
  v80 = sub_1C53774DC(v59, (llvm::SmallPtrSetImplBase *)__p);
  if (__p[1] == __p[0])
  {
    if ((v80 & 1) != 0)
      goto LABEL_129;
  }
  else
  {
    free(__p[1]);
    if ((v80 & 1) != 0)
      goto LABEL_129;
  }
  if (*(_BYTE *)(v58 + 16) == 83 && v58)
  {
    v328 = *(_DWORD *)(v58 + 20);
    if ((v328 & 0x40000000) != 0)
    {
      v330 = *(_QWORD *)(v58 - 8);
      v329 = v328 & 0x7FFFFFF;
    }
    else
    {
      v329 = v328 & 0x7FFFFFF;
      v330 = v58 - 32 * v329;
    }
    if (v329)
    {
      v331 = 32 * v329;
      while (*(unsigned __int8 *)(*(_QWORD *)v330 + 16) < 0x15u)
      {
        v330 += 32;
        v331 -= 32;
        if (!v331)
          goto LABEL_525;
      }
    }
    else
    {
LABEL_525:
      v332 = (uint64_t)*a2;
      v333 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(v333 + 48) = *(_QWORD *)(v58 + 40);
      *(_QWORD *)(v333 + 56) = v58 + 24;
      v334 = *(void **)(v58 + 48);
      __p[0] = v334;
      if (v334)
      {
        llvm::MetadataTracking::track((uint64_t)__p, (unsigned __int8 *)v334, 2);
        v335 = __p[0];
      }
      else
      {
        v335 = 0;
      }
      sub_1C4774EF4(v333, 0, (uint64_t)v335);
      if (__p[0])
        llvm::MetadataTracking::untrack((uint64_t)__p, (unsigned __int8 *)__p[0]);
      v336 = *(_QWORD *)(a1 + 24);
      v337 = *(_DWORD *)(v58 + 20) & 0x7FFFFFF;
      LOWORD(v1190) = 257;
      v338 = sub_1C4867E94(v336, v332, v337, (uint64_t)__p);
      v339 = (llvm::Value *)v338;
      v340 = *(_QWORD *)(*(_QWORD *)(v58 + 40) + 8);
      if (v340)
      {
        while (1)
        {
          v341 = *(_QWORD *)(v340 + 24);
          v342 = *(unsigned __int8 *)(v341 + 16);
          v343 = v341 && v342 >= 0x1C;
          if (v343 && v342 - 29 < 0xB)
            break;
          v340 = *(_QWORD *)(v340 + 8);
          if (!v340)
            goto LABEL_539;
        }
        v1176 = (llvm::PHINode *)v338;
LABEL_541:
        v345 = *(_QWORD *)(v341 + 40);
        v346 = *(_DWORD *)(v58 + 20);
        v347 = v346 & 0x7FFFFFF;
        if ((v346 & 0x7FFFFFF) != 0)
        {
          v348 = 0;
          while (1)
          {
            v349 = v58 - 32 * v347;
            if ((v346 & 0x40000000) != 0)
              v349 = *(_QWORD *)(v58 - 8);
            if (*(_QWORD *)(v349 + 32 * *(unsigned int *)(v58 + 60) + 8 * v348) == v345)
              break;
            if (v347 == ++v348)
              goto LABEL_547;
          }
        }
        else
        {
LABEL_547:
          LODWORD(v348) = -1;
        }
        if ((v346 & 0x40000000) != 0)
          v350 = *(_QWORD *)(v58 - 8);
        else
          v350 = v58 - 32 * v347;
        v351 = *(uint64_t ****)(v350 + 32 * v348);
        if (v57 <= 0xF)
          FCmp = llvm::ConstantExpr::getFCmp(v57, v351, (llvm::Constant *)v59, 0);
        else
          FCmp = (uint64_t)llvm::ConstantExpr::getICmp(v57, (unsigned __int8 *)v351, (llvm::Constant *)v59, 0);
        v353 = v345;
        v339 = v1176;
        sub_1C477667C(v1176, FCmp, v353);
        while (1)
        {
          v340 = *(_QWORD *)(v340 + 8);
          if (!v340)
            break;
          v341 = *(_QWORD *)(v340 + 24);
          v354 = *(unsigned __int8 *)(v341 + 16);
          if (v341)
            v355 = v354 >= 0x1C;
          else
            v355 = 0;
          if (v355 && v354 - 29 < 0xB)
            goto LABEL_541;
        }
      }
LABEL_539:
      llvm::Value::takeName(v339, (llvm::Value *)a2);
      Not = (uint64_t ***)sub_1C577F888(a1, (llvm::ValueAsMetadata *)a2, v339);
      if (Not)
        return (llvm::UndefValue **)Not;
    }
  }
LABEL_129:
  v81 = (llvm::BasicBlock *)a2[5];
  SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v81);
  if (!SinglePredecessor)
    goto LABEL_283;
  v83 = *(_QWORD *)(SinglePredecessor + 40);
  if (v83 == SinglePredecessor + 40)
    goto LABEL_283;
  v84 = v83 - 24;
  if (!v83)
    v84 = 0;
  v85 = *(unsigned __int8 *)(v84 + 16) - 40;
  if (v85 < 0xFFFFFFF5)
    v84 = 0;
  if (!v83)
    goto LABEL_283;
  if (*(_BYTE *)(v84 + 16) != 30 || v85 < 0xFFFFFFF5)
    goto LABEL_283;
  if ((*(_DWORD *)(v84 + 20) & 0x7FFFFFF) != 3)
    goto LABEL_283;
  v87 = *(llvm **)(v84 - 96);
  if (!v87)
    goto LABEL_283;
  v88 = *(llvm::BasicBlock **)(v84 - 32);
  if (!v88)
    goto LABEL_283;
  v89 = *(llvm::BasicBlock **)(v84 - 64);
  if (!v89 || v88 == v89)
    goto LABEL_283;
  isImpliedCondition = llvm::isImpliedCondition(v87, (const llvm::Value *)a2, *(const llvm::Value **)(a1 + 80), (const llvm::DataLayout *)(v88 == v81), 0);
  if (isImpliedCondition >= 0x100u)
  {
    v96 = llvm::ConstantInt::get((llvm::ConstantInt *)*a2, isImpliedCondition, 0);
    Not = (uint64_t ***)sub_1C577F888(a1, (llvm::ValueAsMetadata *)a2, (llvm::Value *)v96);
    goto LABEL_282;
  }
  v92 = *((_WORD *)a2 + 9);
  v93 = *(a2 - 8);
  v94 = (unsigned __int8 *)*(a2 - 4);
  LODWORD(v1183) = 0;
  v1204 = 0;
  v1205 = 0;
  __p[0] = &v1183;
  __p[1] = v93;
  v1172 = (llvm::PHINode *)v93;
  v1189 = (unint64_t)&v1204;
  if (!sub_1C57A1B48((uint64_t)__p, (uint64_t)v87))
    goto LABEL_281;
  v1207 = &v1205;
  v1208 = 0;
  if (!sub_1C4D89F84((uint64_t)&v1207, v94))
    goto LABEL_281;
  llvm::ConstantRange::makeExactICmpRegion(&v1207, v92 & 0x3F, v1205);
  v95 = (int)v1183;
  if (v88 != v81)
    v95 = *((unsigned int *)&dword_1C86617B8 + (int)v1183);
  llvm::ConstantRange::makeExactICmpRegion(&v1200, v95, v1204);
  llvm::ConstantRange::intersectWith((uint64_t)&v1200, (llvm::ConstantRange *)&v1207, 0, (uint64_t)&v1196);
  llvm::ConstantRange::difference((llvm::ConstantRange *)&v1200, (const llvm::ConstantRange *)&v1207, (uint64_t)&__s1);
  v112 = v1197;
  if (v1197 < 0x41)
  {
    if (v1198 | v1196)
      goto LABEL_172;
LABEL_257:
    v163 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 64);
    v164 = *v163;
    v165 = *(llvm::Value **)(*v163 + 1568);
    if (!v165)
    {
      v166 = *(llvm::ConstantInt **)(v164 + 1888);
      LODWORD(__p[1]) = *(_DWORD *)(v164 + 1896) >> 8;
      if (LODWORD(__p[1]) > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)__p, 0, 0);
      else
        __p[0] = 0;
      v165 = llvm::ConstantInt::get(v166, (llvm::LLVMContext *)__p, v111);
      if (LODWORD(__p[1]) >= 0x41 && __p[0])
        MEMORY[0x1CAA32F9C](__p[0], 0x1000C8000313F17);
      *(_QWORD *)(v164 + 1568) = v165;
    }
    goto LABEL_270;
  }
  v157 = v1196;
  if (!memcmp((const void *)v1196, (const void *)v1198, (((unint64_t)v1197 + 63) >> 3) & 0x3FFFFFF8))
  {
    v158 = 0;
    v159 = (unint64_t)(v112 + 63) >> 6;
    do
    {
      v160 = v159-- < 1;
      if (v160)
        break;
      v161 = *(_QWORD *)(v157 + 8 * v159);
      v158 += __clz(v161);
    }
    while (!v161);
    v162 = v112 | 0xFFFFFFC0;
    if ((v112 & 0x3F) == 0)
      v162 = 0;
    if (v158 + v162 == (_DWORD)v112)
      goto LABEL_257;
  }
LABEL_172:
  v113 = v1193;
  if (v1193 >= 0x41)
  {
    v167 = __s1;
    if (memcmp(__s1, __s2, (((unint64_t)v1193 + 63) >> 3) & 0x3FFFFFF8))
      goto LABEL_174;
    v168 = 0;
    v169 = (unint64_t)(v113 + 63) >> 6;
    do
    {
      v160 = v169-- < 1;
      if (v160)
        break;
      v170 = v167[v169];
      v168 += __clz(v170);
    }
    while (!v170);
    v171 = v113 | 0xFFFFFFC0;
    if ((v113 & 0x3F) == 0)
      v171 = 0;
    if (v168 + v171 != (_DWORD)v113)
      goto LABEL_174;
    goto LABEL_269;
  }
  if (!((unint64_t)__s2 | (unint64_t)__s1))
  {
LABEL_269:
    v172 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 64);
    v173 = *v172;
    v165 = *(llvm::Value **)(*v172 + 1560);
    if (!v165)
    {
      v279 = *(llvm::ConstantInt **)(v173 + 1888);
      v280 = *(_DWORD *)(v173 + 1896);
      LODWORD(__p[1]) = v280 >> 8;
      if (v280 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)__p, 1, 0);
      }
      else
      {
        if (v280 <= 0xFF)
          v281 = 0;
        else
          v281 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v280);
        __p[0] = (void *)(v281 & 1);
      }
      v165 = llvm::ConstantInt::get(v279, (llvm::LLVMContext *)__p, v111);
      if (LODWORD(__p[1]) >= 0x41 && __p[0])
        MEMORY[0x1CAA32F9C](__p[0], 0x1000C8000313F17);
      *(_QWORD *)(v173 + 1560) = v165;
    }
LABEL_270:
    Not = (uint64_t ***)sub_1C577F888(a1, (llvm::ValueAsMetadata *)a2, v165);
    goto LABEL_271;
  }
LABEL_174:
  LOBYTE(v1206) = 0;
  v114 = sub_1C57921EC(v92 & 0x3F, v1205, &v1206);
  if ((*((_WORD *)a2 + 9) & 0x3E) == 0x20)
    goto LABEL_175;
  v115 = a2[1];
  if (v115)
    v116 = v114;
  else
    v116 = 0;
  if (v116)
  {
    v117 = a2[1];
    while (*((_BYTE *)v117[3] + 16) != 30)
    {
      v117 = (uint64_t **)v117[1];
      if (!v117)
        goto LABEL_183;
    }
    goto LABEL_175;
  }
LABEL_183:
  if (v115)
  {
    if (!v115[1])
    {
      v118 = (uint64_t)v115[3];
      __p[0] = 0;
      if (sub_1C4E3D684((uint64_t)__p, v118)
        || sub_1C4E3D740((uint64_t)__p + 2, v118)
        || sub_1C4E3D5C8((uint64_t)__p + 4, v118)
        || sub_1C4E3D50C((uint64_t)__p + 6, v118))
      {
LABEL_175:
        Not = 0;
LABEL_271:
        v141 = 1;
        goto LABEL_272;
      }
    }
  }
  LODWORD(__p[1]) = v1197;
  if (v1197 > 0x40)
  {
    __p[0] = (void *)operator new[]();
    memcpy(__p[0], (const void *)v1196, (((unint64_t)LODWORD(__p[1]) + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    __p[0] = (void *)v1196;
  }
  llvm::APInt::operator+=((uint64_t)__p, 1uLL);
  v119 = __p[1];
  v120 = __p[0];
  LODWORD(__p[1]) = 0;
  if (v1199 > 0x40)
    v121 = memcmp((const void *)v1198, __p[0], (((unint64_t)v1199 + 63) >> 3) & 0x3FFFFFF8) == 0;
  else
    v121 = (void *)v1198 == __p[0];
  v122 = v121;
  if (v119 >= 0x41)
  {
    if (v120)
    {
      MEMORY[0x1CAA32F9C](v120, 0x1000C8000313F17);
      if (LODWORD(__p[1]) >= 0x41)
      {
        if (__p[0])
          MEMORY[0x1CAA32F9C](__p[0], 0x1000C8000313F17);
      }
    }
  }
  if (v122)
  {
    v123 = (char *)operator new(0x80uLL);
    Not = (uint64_t ***)(v123 + 64);
    *((_DWORD *)v123 + 21) = *((_DWORD *)v123 + 21) & 0x38000000 | 2;
    *(_QWORD *)v123 = 0;
    *((_QWORD *)v123 + 1) = 0;
    *((_QWORD *)v123 + 4) = 0;
    v124 = (llvm::ValueHandleBase **)(v123 + 32);
    *((_QWORD *)v123 + 2) = 0;
    *((_QWORD *)v123 + 3) = v123 + 64;
    *((_QWORD *)v123 + 5) = 0;
    *((_QWORD *)v123 + 6) = 0;
    *((_QWORD *)v123 + 7) = v123 + 64;
    v126 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(_QWORD *)(a1 + 24) + 64), (llvm::LLVMContext *)&v1196, v125);
    LOWORD(v1190) = 257;
    sub_1C4774CC4(*(_DWORD **)v1172);
    *((_QWORD *)v123 + 8) = v127;
    *((_QWORD *)v123 + 9) = 0;
    v128 = *((_DWORD *)v123 + 21) & 0xC0000000 | 2;
    *((_DWORD *)v123 + 20) = 81;
    *((_DWORD *)v123 + 21) = v128;
    *(_OWORD *)(v123 + 88) = 0u;
    *(_OWORD *)(v123 + 104) = 0u;
    *((_DWORD *)v123 + 30) = 0;
    if (*(_QWORD *)v123)
    {
      **((_QWORD **)v123 + 2) = *((_QWORD *)v123 + 1);
      v1117 = *((_QWORD *)v123 + 1);
      if (v1117)
        *(_QWORD *)(v1117 + 16) = *((_QWORD *)v123 + 2);
    }
    *(_QWORD *)v123 = v1172;
    v130 = (_QWORD *)((char *)v1172 + 8);
    v129 = *((_QWORD *)v1172 + 1);
    *((_QWORD *)v123 + 1) = v129;
    if (v129)
      *(_QWORD *)(v129 + 16) = v123 + 8;
    *((_QWORD *)v123 + 2) = v130;
    *v130 = v123;
    if (*((_QWORD *)v123 + 4))
    {
      **((_QWORD **)v123 + 6) = *((_QWORD *)v123 + 5);
      v1118 = *((_QWORD *)v123 + 5);
      if (v1118)
        *(_QWORD *)(v1118 + 16) = *((_QWORD *)v123 + 6);
    }
    *v124 = v126;
    if (v126)
    {
      v133 = *((_QWORD *)v126 + 1);
      v132 = (llvm::ValueHandleBase ***)((char *)v126 + 8);
      v131 = v133;
      *((_QWORD *)v123 + 5) = v133;
      if (v133)
        *(_QWORD *)(v131 + 16) = v123 + 40;
      *((_QWORD *)v123 + 6) = v132;
      *v132 = v124;
    }
    v134 = 32;
LABEL_237:
    *((_WORD *)v123 + 41) = v134;
    llvm::Value::setName(Not, (uint64_t)__p);
    goto LABEL_271;
  }
  LODWORD(__p[1]) = v1193;
  if (v1193 > 0x40)
  {
    __p[0] = (void *)operator new[]();
    memcpy(__p[0], __s1, (((unint64_t)LODWORD(__p[1]) + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    __p[0] = __s1;
  }
  llvm::APInt::operator+=((uint64_t)__p, 1uLL);
  v139 = __p[1];
  Not = (uint64_t ***)__p[0];
  LODWORD(__p[1]) = 0;
  if (v1195 > 0x40)
    v140 = memcmp(__s2, __p[0], (((unint64_t)v1195 + 63) >> 3) & 0x3FFFFFF8) == 0;
  else
    v140 = __s2 == __p[0];
  v141 = v140;
  if (v139 >= 0x41)
  {
    if (Not)
    {
      MEMORY[0x1CAA32F9C](Not, 0x1000C8000313F17);
      if (LODWORD(__p[1]) >= 0x41)
      {
        if (__p[0])
          MEMORY[0x1CAA32F9C](__p[0], 0x1000C8000313F17);
      }
    }
  }
  if (v141)
  {
    v123 = (char *)operator new(0x80uLL);
    Not = (uint64_t ***)(v123 + 64);
    *((_DWORD *)v123 + 21) = *((_DWORD *)v123 + 21) & 0x38000000 | 2;
    *(_QWORD *)v123 = 0;
    *((_QWORD *)v123 + 1) = 0;
    *((_QWORD *)v123 + 4) = 0;
    v142 = (llvm::ValueHandleBase **)(v123 + 32);
    *((_QWORD *)v123 + 2) = 0;
    *((_QWORD *)v123 + 3) = v123 + 64;
    *((_QWORD *)v123 + 5) = 0;
    *((_QWORD *)v123 + 6) = 0;
    *((_QWORD *)v123 + 7) = v123 + 64;
    v144 = llvm::ConstantInt::get(*(llvm::ConstantInt **)(*(_QWORD *)(a1 + 24) + 64), (llvm::LLVMContext *)&__s1, v143);
    LOWORD(v1190) = 257;
    sub_1C4774CC4(*(_DWORD **)v1172);
    *((_QWORD *)v123 + 8) = v145;
    *((_QWORD *)v123 + 9) = 0;
    v146 = *((_DWORD *)v123 + 21) & 0xC0000000 | 2;
    *((_DWORD *)v123 + 20) = 81;
    *((_DWORD *)v123 + 21) = v146;
    *(_OWORD *)(v123 + 88) = 0u;
    *(_OWORD *)(v123 + 104) = 0u;
    *((_DWORD *)v123 + 30) = 0;
    if (*(_QWORD *)v123)
    {
      **((_QWORD **)v123 + 2) = *((_QWORD *)v123 + 1);
      v1121 = *((_QWORD *)v123 + 1);
      if (v1121)
        *(_QWORD *)(v1121 + 16) = *((_QWORD *)v123 + 2);
    }
    *(_QWORD *)v123 = v1172;
    v148 = (_QWORD *)((char *)v1172 + 8);
    v147 = *((_QWORD *)v1172 + 1);
    *((_QWORD *)v123 + 1) = v147;
    if (v147)
      *(_QWORD *)(v147 + 16) = v123 + 8;
    *((_QWORD *)v123 + 2) = v148;
    *v148 = v123;
    if (*((_QWORD *)v123 + 4))
    {
      **((_QWORD **)v123 + 6) = *((_QWORD *)v123 + 5);
      v1122 = *((_QWORD *)v123 + 5);
      if (v1122)
        *(_QWORD *)(v1122 + 16) = *((_QWORD *)v123 + 6);
    }
    *v142 = v144;
    if (v144)
    {
      v151 = *((_QWORD *)v144 + 1);
      v150 = (llvm::ValueHandleBase ***)((char *)v144 + 8);
      v149 = v151;
      *((_QWORD *)v123 + 5) = v151;
      if (v151)
        *(_QWORD *)(v149 + 16) = v123 + 40;
      *((_QWORD *)v123 + 6) = v150;
      *v150 = v142;
    }
    v134 = 33;
    goto LABEL_237;
  }
LABEL_272:
  if (v1195 >= 0x41 && __s2)
    MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
  if (v1193 >= 0x41 && __s1)
    MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
  if (v1199 >= 0x41 && v1198)
    MEMORY[0x1CAA32F9C](v1198, 0x1000C8000313F17);
  if (v1197 >= 0x41 && v1196)
    MEMORY[0x1CAA32F9C](v1196, 0x1000C8000313F17);
  if (v1203 >= 0x41 && v1202)
    MEMORY[0x1CAA32F9C](v1202, 0x1000C8000313F17);
  if (v1201 >= 0x41 && v1200)
    MEMORY[0x1CAA32F9C](v1200, 0x1000C8000313F17);
  if (v1210 >= 0x41 && v1209)
    MEMORY[0x1CAA32F9C](v1209, 0x1000C8000313F17);
  if (v1208 >= 0x41 && v1207)
    MEMORY[0x1CAA32F9C](v1207, 0x1000C8000313F17);
  if (!v141)
LABEL_281:
    Not = 0;
LABEL_282:
  if (Not)
    return (llvm::UndefValue **)Not;
LABEL_283:
  Not = sub_1C5808DC0((_QWORD *)a1, (uint64_t)a2);
  if (Not)
    return (llvm::UndefValue **)Not;
  v174 = a2[1];
  if (v174)
  {
    if (!v174[1])
    {
      v182 = (uint64_t)v174[3];
      if (v182)
      {
        if (*(_BYTE *)(v182 + 16) == 85)
        {
          __p[0] = 0;
          v1207 = 0;
          Not = 0;
          if (llvm::matchSelectPattern(v182, (uint64_t)__p, &v1207, 0, 0))
            return (llvm::UndefValue **)Not;
        }
      }
    }
  }
  v175 = (unsigned __int8 *)*(a2 - 4);
  if (!v175)
    goto LABEL_360;
  if (v175[16] > 0x14u)
    goto LABEL_360;
  v176 = *((_WORD *)a2 + 9);
  if ((llvm::Constant::isNullValue((llvm::Constant *)*(a2 - 4)) & 1) == 0
    && (sub_1C4E71060((uint64_t)__p, (llvm::Constant *)v175) & 1) == 0)
  {
    goto LABEL_360;
  }
  v177 = v176 & 0x3F;
  if (v177 == 38)
  {
    v1207 = 0;
    v1200 = 0;
    v178 = *v7;
    __p[0] = &v1207;
    __p[1] = &v1200;
    if (sub_1C4E79EE4((_QWORD **)__p, v178))
    {
      if (llvm::isKnownPositive((llvm *)v1207, *(const llvm::Value **)(a1 + 80), 0, *(_QWORD *)(a1 + 56), (llvm::AssumptionCache *)a2, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1))
      {
        v179 = (char *)operator new(0x80uLL);
        Not = (uint64_t ***)(v179 + 64);
        *((_DWORD *)v179 + 21) = *((_DWORD *)v179 + 21) & 0x38000000 | 2;
        *(_QWORD *)v179 = 0;
        *((_QWORD *)v179 + 1) = 0;
        *((_QWORD *)v179 + 2) = 0;
        *((_QWORD *)v179 + 3) = v179 + 64;
        *((_QWORD *)v179 + 4) = 0;
        v180 = (llvm::Constant **)(v179 + 32);
        *((_QWORD *)v179 + 5) = 0;
        *((_QWORD *)v179 + 6) = 0;
        *((_QWORD *)v179 + 7) = v179 + 64;
        v181 = v1200;
LABEL_300:
        v183 = *v9;
        LOWORD(v1190) = 257;
        sub_1C4774CC4(*v181);
        *((_QWORD *)v179 + 8) = v184;
        *((_QWORD *)v179 + 9) = 0;
        v185 = *((_DWORD *)v179 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v179 + 20) = 81;
        *((_DWORD *)v179 + 21) = v185;
        *(_OWORD *)(v179 + 88) = 0u;
        *(_OWORD *)(v179 + 104) = 0u;
        *((_DWORD *)v179 + 30) = 0;
        if (*(_QWORD *)v179)
        {
          **((_QWORD **)v179 + 2) = *((_QWORD *)v179 + 1);
          v1091 = *((_QWORD *)v179 + 1);
          if (v1091)
            *(_QWORD *)(v1091 + 16) = *((_QWORD *)v179 + 2);
        }
        *(_QWORD *)v179 = v181;
        v188 = v181[1];
        v187 = v181 + 1;
        v186 = v188;
        *((_QWORD *)v179 + 1) = v188;
        if (v188)
          *((_QWORD *)v186 + 2) = v179 + 8;
        *((_QWORD *)v179 + 2) = v187;
        *v187 = v179;
LABEL_304:
        if (*((_QWORD *)v179 + 4))
        {
          **((_QWORD **)v179 + 6) = *((_QWORD *)v179 + 5);
          v1090 = *((_QWORD *)v179 + 5);
          if (v1090)
            *(_QWORD *)(v1090 + 16) = *((_QWORD *)v179 + 6);
        }
        *v180 = v183;
        if (v183)
        {
          v191 = *((_QWORD *)v183 + 1);
          v190 = (llvm::Constant ***)((char *)v183 + 8);
          v189 = v191;
          *((_QWORD *)v179 + 5) = v191;
          if (v191)
            *(_QWORD *)(v189 + 16) = v179 + 40;
          *((_QWORD *)v179 + 6) = v190;
          *v190 = v180;
        }
        goto LABEL_309;
      }
      if (llvm::isKnownPositive((llvm *)v1200, *(const llvm::Value **)(a1 + 80), 0, *(_QWORD *)(a1 + 56), (llvm::AssumptionCache *)a2, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1))
      {
        v179 = (char *)operator new(0x80uLL);
        Not = (uint64_t ***)(v179 + 64);
        *((_DWORD *)v179 + 21) = *((_DWORD *)v179 + 21) & 0x38000000 | 2;
        *(_QWORD *)v179 = 0;
        *((_QWORD *)v179 + 1) = 0;
        *((_QWORD *)v179 + 2) = 0;
        *((_QWORD *)v179 + 3) = v179 + 64;
        *((_QWORD *)v179 + 4) = 0;
        v180 = (llvm::Constant **)(v179 + 32);
        *((_QWORD *)v179 + 5) = 0;
        *((_QWORD *)v179 + 6) = 0;
        *((_QWORD *)v179 + 7) = v179 + 64;
        v181 = v1207;
        goto LABEL_300;
      }
    }
  }
  if ((*((_WORD *)a2 + 9) & 0x3E) == 0x20)
  {
    v193 = *v7;
    v194 = *(_QWORD *)(*v7 + 8);
    if (v194)
    {
      if (!*(_QWORD *)(v194 + 8))
      {
        v207 = *(unsigned __int8 *)(v193 + 16);
        if (v207 >= 0x1C)
        {
          if ((v207 & 0xFE) != 0x32)
            goto LABEL_314;
          v208 = *(_DWORD *)(v193 + 20);
          if ((v208 & 0x40000000) != 0)
          {
            v209 = *(_QWORD *)(v193 - 8);
            goto LABEL_389;
          }
        }
        else
        {
          if (v207 != 5 || (*(_WORD *)(v193 + 18) & 0xFFFE) != 0x16)
            goto LABEL_314;
          v208 = *(_DWORD *)(v193 + 20);
        }
        v209 = v193 - 32 * (v208 & 0x7FFFFFF);
LABEL_389:
        v258 = *(_QWORD **)v209;
        if (*(_QWORD *)v209)
        {
          v259 = *(_QWORD *)(v209 + 32);
          if (v259)
          {
            v260 = *v9;
            if (*v9)
            {
              if (*((unsigned __int8 *)v260 + 16) <= 0x14u
                && ((llvm::Constant::isNullValue(*v9) & 1) != 0 || (sub_1C4E71060((uint64_t)__p, v260) & 1) != 0))
              {
                v261 = *((_WORD *)a2 + 9);
                if (llvm::isKnownToBeAPowerOfTwo((llvm *)v259, *(const llvm::Value **)(a1 + 80), (const llvm::DataLayout *)1, 0, *(_QWORD *)(a1 + 56), (llvm::AssumptionCache *)a2, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1, (BOOL)v1155))
                {
                  v1175 = v261 & 0x3F;
                  v263 = *(uint64_t **)(a1 + 24);
                  AllOnesValue = llvm::Constant::getAllOnesValue(*(llvm::Constant **)v259, v262);
                  v1211 = 257;
                  v1167 = v263;
                  v265 = v263[9];
                  v266 = AllOnesValue;
                  v267 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v265 + 16))(v265, v259);
                  if (!v267)
                  {
                    LOWORD(v1190) = 257;
                    v268 = (char *)operator new(0x80uLL);
                    *(_QWORD *)v268 = 0;
                    *((_QWORD *)v268 + 2) = 0;
                    *((_QWORD *)v268 + 1) = 0;
                    *((_QWORD *)v268 + 5) = 0;
                    *((_QWORD *)v268 + 6) = 0;
                    *((_QWORD *)v268 + 4) = 0;
                    v269 = (llvm::ValueHandleBase **)(v268 + 32);
                    *((_QWORD *)v268 + 8) = *(_QWORD *)v259;
                    *((_QWORD *)v268 + 3) = v268 + 64;
                    *((_QWORD *)v268 + 7) = v268 + 64;
                    *((_QWORD *)v268 + 9) = 0;
                    v268[80] = 41;
                    v268[81] = 0;
                    *((_WORD *)v268 + 41) = 0;
                    *((_DWORD *)v268 + 21) = 2;
                    *((_DWORD *)v268 + 30) = 0;
                    *(_OWORD *)(v268 + 104) = 0u;
                    *(_OWORD *)(v268 + 88) = 0u;
                    *(_QWORD *)v268 = v259;
                    v272 = *(_QWORD *)(v259 + 8);
                    v271 = (_QWORD *)(v259 + 8);
                    v270 = v272;
                    *((_QWORD *)v268 + 1) = v272;
                    if (v272)
                      *(_QWORD *)(v270 + 16) = v268 + 8;
                    *((_QWORD *)v268 + 2) = v271;
                    *v271 = v268;
                    if (*((_QWORD *)v268 + 4))
                    {
                      **((_QWORD **)v268 + 6) = *((_QWORD *)v268 + 5);
                      v1154 = *((_QWORD *)v268 + 5);
                      if (v1154)
                        *(_QWORD *)(v1154 + 16) = *((_QWORD *)v268 + 6);
                    }
                    *v269 = v266;
                    if (v266)
                    {
                      v275 = *((_QWORD *)v266 + 1);
                      v274 = (llvm::ValueHandleBase ***)((char *)v266 + 8);
                      v273 = v275;
                      *((_QWORD *)v268 + 5) = v275;
                      if (v275)
                        *(_QWORD *)(v273 + 16) = v268 + 40;
                      *((_QWORD *)v268 + 6) = v274;
                      *v274 = v269;
                    }
                    v276 = (uint64_t)(v268 + 64);
                    llvm::Value::setName((uint64_t ***)v268 + 8, (uint64_t)__p);
                    v267 = sub_1C4773754(v1167, v276, (uint64_t)&v1207);
                  }
                  v277 = *(_QWORD *)(a1 + 24);
                  LOWORD(v1190) = 257;
                  v278 = sub_1C4D89BCC(v277, v258, v267, (uint64_t)__p);
                  LOWORD(v1190) = 257;
                  Not = (uint64_t ***)llvm::CmpInst::Create(53, v1175, v278, (uint64_t)v260, (uint64_t)__p, 0);
                  if (Not)
                    return (llvm::UndefValue **)Not;
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_314:
  v195 = *v7;
  v196 = *(unsigned __int8 *)(*v7 + 16);
  if (v196 == 5)
  {
    if (*(_WORD *)(v195 + 18) != 22)
      goto LABEL_360;
    v198 = (uint64_t *)(v195 - 32 * (*(_DWORD *)(v195 + 20) & 0x7FFFFFF));
    v197 = *v198;
    if (!*v198)
      goto LABEL_360;
    Not = (uint64_t ***)v198[4];
    if (!Not)
      goto LABEL_360;
  }
  else
  {
    if (v196 != 50)
      goto LABEL_360;
    v197 = *(_QWORD *)(v195 - 64);
    if (!v197)
      goto LABEL_360;
    Not = *(uint64_t ****)(v195 - 32);
    if (!Not)
      goto LABEL_360;
  }
  if ((v177 & 0x3E) == 0x20)
  {
    v199 = *(void **)(a1 + 56);
    v200 = *(_QWORD *)(a1 + 72);
    v201 = a2;
    if (!a2[5])
    {
      if (*(unsigned __int8 *)(v197 + 16) < 0x1Cu || (v201 = (_QWORD ***)v197, !*(_QWORD *)(v197 + 40)))
        v201 = 0;
    }
    __p[0] = *(void **)(a1 + 80);
    __p[1] = v199;
    *(_QWORD *)&v1189 = v201;
    *((_QWORD *)&v1189 + 1) = v200;
    *(_QWORD *)&v1190 = 0;
    BYTE8(v1190) = 1;
    sub_1C4F83784(v197, 0, (uint64_t *)__p, &v1207);
    v202 = *(void **)(a1 + 56);
    v203 = *(_QWORD *)(a1 + 72);
    v204 = a2;
    if (!a2[5])
    {
      if (*((unsigned __int8 *)Not + 16) < 0x1Cu || (v204 = Not, !Not[5]))
        v204 = 0;
    }
    __p[0] = *(void **)(a1 + 80);
    __p[1] = v202;
    *(_QWORD *)&v1189 = v204;
    *((_QWORD *)&v1189 + 1) = v203;
    *(_QWORD *)&v1190 = 0;
    BYTE8(v1190) = 1;
    sub_1C4F83784((uint64_t)Not, 0, (uint64_t *)__p, &v1200);
    if (v1208 > 0x40)
    {
      v206 = 0;
      v210 = ((unint64_t)v1208 + 63) >> 6;
      v211 = (int8x8_t *)v1207;
      do
      {
        v212 = *v211++;
        v213 = (uint8x8_t)vcnt_s8(v212);
        v213.i16[0] = vaddlv_u8(v213);
        v206 += v213.i32[0];
        --v210;
      }
      while (v210);
    }
    else
    {
      v205 = (uint8x8_t)vcnt_s8((int8x8_t)v1207);
      v205.i16[0] = vaddlv_u8(v205);
      v206 = v205.i32[0];
    }
    if ((_DWORD)v1208 - v206 != 1)
      goto LABEL_351;
    if (v1203 > 0x40)
    {
      v215 = 0;
      v216 = ((unint64_t)v1203 + 63) >> 6;
      v217 = v1202;
      do
      {
        v218 = *v217++;
        v219 = (uint8x8_t)vcnt_s8(v218);
        v219.i16[0] = vaddlv_u8(v219);
        v215 += v219.i32[0];
        --v216;
      }
      while (v216);
    }
    else
    {
      v214 = (uint8x8_t)vcnt_s8((int8x8_t)v1202);
      v214.i16[0] = vaddlv_u8(v214);
      v215 = v214.i32[0];
    }
    if (v215 >= 2)
    {
      v220 = (char *)operator new(0x80uLL);
      Not = (uint64_t ***)(v220 + 64);
      *((_DWORD *)v220 + 21) = *((_DWORD *)v220 + 21) & 0x38000000 | 2;
      *(_QWORD *)v220 = 0;
      *((_QWORD *)v220 + 1) = 0;
      *((_QWORD *)v220 + 2) = 0;
      *((_QWORD *)v220 + 3) = v220 + 64;
      *((_QWORD *)v220 + 4) = 0;
      v1174 = (llvm::PHINode *)(v220 + 32);
      *((_QWORD *)v220 + 5) = 0;
      *((_QWORD *)v220 + 6) = 0;
      *((_QWORD *)v220 + 7) = v220 + 64;
      v221 = *v9;
      LOWORD(v1190) = 257;
      sub_1C4774CC4(*(_DWORD **)v197);
      *((_QWORD *)v220 + 8) = v222;
      *((_QWORD *)v220 + 9) = 0;
      v223 = *((_DWORD *)v220 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v220 + 20) = 81;
      *((_DWORD *)v220 + 21) = v223;
      *(_OWORD *)(v220 + 88) = 0u;
      *(_OWORD *)(v220 + 104) = 0u;
      *((_DWORD *)v220 + 30) = 0;
      if (*(_QWORD *)v220)
      {
        **((_QWORD **)v220 + 2) = *((_QWORD *)v220 + 1);
        v1094 = *((_QWORD *)v220 + 1);
        if (v1094)
          *(_QWORD *)(v1094 + 16) = *((_QWORD *)v220 + 2);
      }
      *(_QWORD *)v220 = v197;
      v226 = *(_QWORD *)(v197 + 8);
      v225 = (_QWORD *)(v197 + 8);
      v224 = v226;
      *((_QWORD *)v220 + 1) = v226;
      if (v226)
        *(_QWORD *)(v224 + 16) = v220 + 8;
      *((_QWORD *)v220 + 2) = v225;
      *v225 = v220;
      if (*((_QWORD *)v220 + 4))
      {
        **((_QWORD **)v220 + 6) = *((_QWORD *)v220 + 5);
        v1095 = *((_QWORD *)v220 + 5);
        if (v1095)
          *(_QWORD *)(v1095 + 16) = *((_QWORD *)v220 + 6);
      }
      *(_QWORD *)v1174 = v221;
      if (v221)
      {
        v229 = *((_QWORD *)v221 + 1);
        v228 = (llvm::PHINode **)((char *)v221 + 8);
        v227 = v229;
        *((_QWORD *)v220 + 5) = v229;
        if (v229)
          *(_QWORD *)(v227 + 16) = v220 + 40;
        *((_QWORD *)v220 + 6) = v228;
        *v228 = v1174;
      }
      *((_WORD *)v220 + 41) = v177;
      llvm::Value::setName(Not, (uint64_t)__p);
      v230 = 0;
    }
    else
    {
LABEL_351:
      v230 = 1;
    }
    if (v1203 >= 0x41 && v1202)
      MEMORY[0x1CAA32F9C](v1202, 0x1000C8000313F17);
    if (v1201 >= 0x41 && v1200)
      MEMORY[0x1CAA32F9C](v1200, 0x1000C8000313F17);
    if (v1210 >= 0x41 && v1209)
      MEMORY[0x1CAA32F9C](v1209, 0x1000C8000313F17);
    if (v1208 >= 0x41 && v1207)
      MEMORY[0x1CAA32F9C](v1207, 0x1000C8000313F17);
    v231 = Not ? v230 : 1;
    if ((v231 & 1) == 0)
      return (llvm::UndefValue **)Not;
  }
LABEL_360:
  v232 = *((_WORD *)a2 + 9);
  v1183 = 0;
  __p[0] = &v1183;
  __p[1] = 0;
  if (!sub_1C4D89F84((uint64_t)__p, (unsigned __int8 *)v1182))
    goto LABEL_571;
  if ((v232 & 0x3F) == 0x22)
  {
    v247 = *((_DWORD *)v1183 + 2);
    if (v247 > 0x40)
    {
      if (((*(_QWORD *)(*(_QWORD *)v1183 + 8 * ((v247 - 1) >> 6)) >> (v247 - 1)) & 1) != 0
        || llvm::APInt::countTrailingOnesSlowCase(v1183) != v247 - 1)
      {
        goto LABEL_571;
      }
    }
    else if (*(_QWORD *)v1183 != ~(-1 << (v247 - 1)))
    {
      goto LABEL_571;
    }
    NullValue = llvm::Constant::getNullValue(*v6, v233);
    v236 = (char *)operator new(0x80uLL);
    Not = (uint64_t ***)(v236 + 64);
    *((_DWORD *)v236 + 21) = *((_DWORD *)v236 + 21) & 0x38000000 | 2;
    *(_QWORD *)v236 = 0;
    *((_QWORD *)v236 + 1) = 0;
    *((_QWORD *)v236 + 2) = 0;
    *((_QWORD *)v236 + 3) = v236 + 64;
    *((_QWORD *)v236 + 4) = 0;
    v249 = (llvm::Value ***)(v236 + 32);
    *((_QWORD *)v236 + 5) = 0;
    *((_QWORD *)v236 + 6) = 0;
    *((_QWORD *)v236 + 7) = v236 + 64;
    LOWORD(v1190) = 257;
    sub_1C4774CC4(*v6);
    *((_QWORD *)v236 + 8) = v250;
    *((_QWORD *)v236 + 9) = 0;
    v251 = *((_DWORD *)v236 + 21) & 0xC0000000 | 2;
    *((_DWORD *)v236 + 20) = 81;
    *((_DWORD *)v236 + 21) = v251;
    *(_OWORD *)(v236 + 88) = 0u;
    *(_OWORD *)(v236 + 104) = 0u;
    *((_DWORD *)v236 + 30) = 0;
    if (*(_QWORD *)v236)
    {
      **((_QWORD **)v236 + 2) = *((_QWORD *)v236 + 1);
      v1088 = *((_QWORD *)v236 + 1);
      if (v1088)
        *(_QWORD *)(v1088 + 16) = *((_QWORD *)v236 + 2);
    }
    *(_QWORD *)v236 = v6;
    v254 = v6[1];
    v253 = v6 + 1;
    v252 = v254;
    *((_QWORD *)v236 + 1) = v254;
    if (v254)
      *((_QWORD *)v252 + 2) = v236 + 8;
    *((_QWORD *)v236 + 2) = v253;
    *v253 = v236;
    if (*((_QWORD *)v236 + 4))
    {
      **((_QWORD **)v236 + 6) = *((_QWORD *)v236 + 5);
      v1089 = *((_QWORD *)v236 + 5);
      if (v1089)
        *(_QWORD *)(v1089 + 16) = *((_QWORD *)v236 + 6);
    }
    *v249 = NullValue;
    if (NullValue)
    {
      v257 = NullValue[1];
      v256 = (llvm::Value ****)(NullValue + 1);
      v255 = v257;
      *((_QWORD *)v236 + 5) = v257;
      if (v257)
        *((_QWORD *)v255 + 2) = v236 + 40;
      *((_QWORD *)v236 + 6) = v256;
      *v256 = v249;
    }
    v246 = 40;
    goto LABEL_385;
  }
  if ((v232 & 0x3F) == 0x24)
  {
    v234 = *((_DWORD *)v1183 + 2);
    if (v234 > 0x40)
    {
      v325 = v234 - 1;
      if (((*(_QWORD *)(*(_QWORD *)v1183 + 8 * (v325 >> 6)) >> v325) & 1) != 0
        && llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v1183) == v325)
      {
        goto LABEL_365;
      }
    }
    else if (*(_QWORD *)v1183 == 1 << (v234 - 1))
    {
LABEL_365:
      v235 = llvm::Constant::getAllOnesValue(*v6, v233);
      v236 = (char *)operator new(0x80uLL);
      Not = (uint64_t ***)(v236 + 64);
      *((_DWORD *)v236 + 21) = *((_DWORD *)v236 + 21) & 0x38000000 | 2;
      *(_QWORD *)v236 = 0;
      *((_QWORD *)v236 + 1) = 0;
      *((_QWORD *)v236 + 2) = 0;
      *((_QWORD *)v236 + 3) = v236 + 64;
      *((_QWORD *)v236 + 4) = 0;
      v237 = (llvm::ValueHandleBase **)(v236 + 32);
      *((_QWORD *)v236 + 5) = 0;
      *((_QWORD *)v236 + 6) = 0;
      *((_QWORD *)v236 + 7) = v236 + 64;
      LOWORD(v1190) = 257;
      sub_1C4774CC4(*v6);
      *((_QWORD *)v236 + 8) = v238;
      *((_QWORD *)v236 + 9) = 0;
      v239 = *((_DWORD *)v236 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v236 + 20) = 81;
      *((_DWORD *)v236 + 21) = v239;
      *(_OWORD *)(v236 + 88) = 0u;
      *(_OWORD *)(v236 + 104) = 0u;
      *((_DWORD *)v236 + 30) = 0;
      if (*(_QWORD *)v236)
      {
        **((_QWORD **)v236 + 2) = *((_QWORD *)v236 + 1);
        v1086 = *((_QWORD *)v236 + 1);
        if (v1086)
          *(_QWORD *)(v1086 + 16) = *((_QWORD *)v236 + 2);
      }
      *(_QWORD *)v236 = v6;
      v242 = v6[1];
      v241 = v6 + 1;
      v240 = v242;
      *((_QWORD *)v236 + 1) = v242;
      if (v242)
        *((_QWORD *)v240 + 2) = v236 + 8;
      *((_QWORD *)v236 + 2) = v241;
      *v241 = v236;
      if (*((_QWORD *)v236 + 4))
      {
        **((_QWORD **)v236 + 6) = *((_QWORD *)v236 + 5);
        v1087 = *((_QWORD *)v236 + 5);
        if (v1087)
          *(_QWORD *)(v1087 + 16) = *((_QWORD *)v236 + 6);
      }
      *v237 = v235;
      if (v235)
      {
        v245 = *((_QWORD *)v235 + 1);
        v244 = (llvm::ValueHandleBase ***)((char *)v235 + 8);
        v243 = v245;
        *((_QWORD *)v236 + 5) = v245;
        if (v245)
          *(_QWORD *)(v243 + 16) = v236 + 40;
        *((_QWORD *)v236 + 6) = v244;
        *v244 = v237;
      }
      v246 = 38;
LABEL_385:
      *((_WORD *)v236 + 41) = v246;
      goto LABEL_386;
    }
  }
LABEL_571:
  Not = (uint64_t ***)sub_1C5800274(a1, (llvm::ValueAsMetadata *)a2, (uint64_t)v1184);
  if (Not)
    return (llvm::UndefValue **)Not;
  Not = (uint64_t ***)sub_1C57F3CBC((_QWORD *)a1, (uint64_t)a2);
  if (Not)
    return (llvm::UndefValue **)Not;
  if ((*((_WORD *)a2 + 9) & 0x3E) != 0x20)
    goto LABEL_574;
  v364 = *v7;
  if (!*v7)
    goto LABEL_574;
  if (*(unsigned __int8 *)(v364 + 16) < 0x1Cu)
    goto LABEL_574;
  v365 = *v9;
  if (!*v9
    || *((unsigned __int8 *)v365 + 16) > 0x14u
    || (llvm::Constant::isNullValue(*v9) & 1) == 0 && (sub_1C4E71060((uint64_t)__p, v365) & 1) == 0)
  {
    goto LABEL_574;
  }
  v366 = *((_WORD *)a2 + 9);
  v367 = *(unsigned __int8 *)(v364 + 16);
  if (v367 > 0x1B)
    v368 = v367 - 28;
  else
    v368 = *(unsigned __int16 *)(v364 + 18);
  if (v368 == 38)
  {
    v375 = *(_DWORD *)(v364 + 20);
    if ((v375 & 0x40000000) != 0)
      v376 = *(uint64_t **)(v364 - 8);
    else
      v376 = (uint64_t *)(v364 - 32 * (v375 & 0x7FFFFFF));
    v383 = *v376;
    v384 = *(unsigned __int8 *)(v383 + 16);
    if (v383 && v384 >= 0x1C)
    {
      if ((v384 & 0xFE) == 0x36)
      {
        v385 = *(_DWORD *)(v383 + 20);
        v386 = (v385 & 0x40000000) != 0 ? *(uint64_t **)(v383 - 8) : (uint64_t *)(v383 - 32 * (v385 & 0x7FFFFFF));
        v388 = *v386;
        if (*v386)
        {
          v389 = (unsigned __int8 *)v386[4];
          if (v389)
          {
            if (v389[16] <= 0x14u)
            {
LABEL_643:
              v390 = *(llvm::Constant **)v388;
              v391 = *(llvm::Type **)v388;
              if ((*(_DWORD *)(*(_QWORD *)v388 + 8) & 0xFE) == 0x12)
                v391 = (llvm::Type *)**((_QWORD **)v390 + 2);
              v392 = llvm::Type::getPrimitiveSizeInBits(v391);
              v393 = v392 - 1;
              LODWORD(v1208) = v392;
              if (v392 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v1207, v393, 0);
              }
              else
              {
                if (v392)
                  v394 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v392;
                else
                  v394 = 0;
                v1207 = (llvm::APInt **)(v394 & v393);
              }
              __p[0] = (void *)32;
              __p[1] = &v1207;
              sub_1C57A1A3C((uint64_t)__p, (llvm::Constant *)v389);
              v397 = v396;
              if (v1208 >= 0x41 && v1207)
                MEMORY[0x1CAA32F9C](v1207, 0x1000C8000313F17);
              if ((v397 & 1) == 0)
                goto LABEL_574;
              goto LABEL_651;
            }
          }
        }
      }
    }
    else if (v384 == 5 && (*(_WORD *)(v383 + 18) & 0xFFFE) == 0x1A)
    {
      v387 = (uint64_t *)(v383 - 32 * (*(_DWORD *)(v383 + 20) & 0x7FFFFFF));
      v388 = *v387;
      if (*v387)
      {
        v389 = (unsigned __int8 *)v387[4];
        if (v389)
          goto LABEL_643;
      }
    }
  }
  if ((v367 & 0xFE) == 0x36)
  {
    v436 = *(_DWORD *)(v364 + 20);
    v437 = (v436 & 0x40000000) != 0 ? *(uint64_t **)(v364 - 8) : (uint64_t *)(v364 - 32 * (v436 & 0x7FFFFFF));
    v388 = *v437;
    if (*v437)
    {
      v389 = (unsigned __int8 *)v437[4];
      if (v389)
      {
        if (v389[16] <= 0x14u)
          goto LABEL_643;
      }
    }
  }
  if (v367 - 41 > 0x11)
    goto LABEL_574;
  v438 = *(_OWORD *)(a1 + 120);
  v1189 = *(_OWORD *)(a1 + 104);
  v1190 = v438;
  *(_OWORD *)__p = *(_OWORD *)(a1 + 88);
  *(_QWORD *)&v1190 = v364;
  v439 = sub_1C5843EE8(a1, (_BYTE *)v364, (__int128 *)__p, 1);
  if (!v439)
    goto LABEL_574;
  v388 = (uint64_t)v439;
  v390 = (llvm::Constant *)*v439;
LABEL_651:
  if ((v366 & 0x3F) == 0x20)
    v398 = 39;
  else
    v398 = 40;
  v399 = llvm::Constant::getNullValue(v390, v395);
  LOWORD(v1190) = 257;
  Not = (uint64_t ***)llvm::CmpInst::Create(53, v398, v388, (uint64_t)v399, (uint64_t)__p, 0);
  if (Not)
    return (llvm::UndefValue **)Not;
LABEL_574:
  if (*((unsigned __int8 *)*v9 + 16) >= 0x15u)
    v359 = 0;
  else
    v359 = *v9;
  if (*(unsigned __int8 *)(*v7 + 16) <= 0x1Bu)
    v360 = 0;
  else
    v360 = *v7;
  if (!v359 || !v360)
    goto LABEL_766;
  v361 = *(unsigned __int8 *)(v360 + 16);
  if (v361 <= 0x4B)
  {
    if (v361 == 60)
    {
      v373 = *(_DWORD *)(v360 + 20);
      if ((v373 & 0x40000000) != 0)
        v374 = *(uint64_t **)(v360 - 8);
      else
        v374 = (uint64_t *)(v360 - 32 * (v373 & 0x7FFFFFF));
      v377 = *v374;
      if (!*v374 || *(_BYTE *)(v377 + 16) != 62)
        goto LABEL_766;
      v378 = *(llvm::GlobalValue **)(v377 - 32 * (*(_DWORD *)(v377 + 20) & 0x7FFFFFF));
      if (!v378 || *((_BYTE *)v378 + 16) != 3)
        goto LABEL_766;
      v372 = sub_1C57E9A2C(a1, v360, v377, v378, a2, 0);
      goto LABEL_765;
    }
    if (v361 != 62
      || !llvm::Constant::isNullValue(v359)
      || !llvm::GetElementPtrInst::hasAllZeroIndices((llvm::GetElementPtrInst *)v360))
    {
      goto LABEL_766;
    }
LABEL_658:
    v236 = (char *)operator new(0x80uLL);
    Not = (uint64_t ***)(v236 + 64);
    *((_DWORD *)v236 + 21) = *((_DWORD *)v236 + 21) & 0x38000000 | 2;
    *(_QWORD *)v236 = 0;
    *((_QWORD *)v236 + 1) = 0;
    *((_QWORD *)v236 + 2) = 0;
    *((_QWORD *)v236 + 3) = v236 + 64;
    *((_QWORD *)v236 + 4) = 0;
    v401 = (llvm::Value ***)(v236 + 32);
    *((_QWORD *)v236 + 5) = 0;
    *((_QWORD *)v236 + 6) = 0;
    *((_QWORD *)v236 + 7) = v236 + 64;
    v402 = *(_DWORD *)(v360 + 20);
    if ((v402 & 0x40000000) != 0)
      v403 = *(llvm::Constant ****)(v360 - 8);
    else
      v403 = (llvm::Constant ***)(v360 - 32 * (v402 & 0x7FFFFFF));
    v413 = *((_WORD *)a2 + 9);
    v414 = *v403;
    v415 = llvm::Constant::getNullValue(**v403, v400);
    goto LABEL_686;
  }
  if (v361 == 76)
  {
    if (!llvm::Constant::isNullValue(v359))
      goto LABEL_766;
    llvm::DataLayout::getIntPtrType(*(llvm::DataLayout **)(a1 + 80), *(llvm::Type **)v359);
    v370 = *(_DWORD *)(v360 + 20);
    v371 = (v370 & 0x40000000) != 0 ? *(_QWORD ***)(v360 - 8) : (_QWORD **)(v360 - 32 * (v370 & 0x7FFFFFF));
    if (v369 != **v371)
      goto LABEL_766;
    goto LABEL_658;
  }
  if (v361 == 83)
  {
    if (*(uint64_t ***)(v360 + 40) != a2[5])
      goto LABEL_766;
    v372 = (uint64_t ***)sub_1C57808D4(a1, (llvm::Instruction *)a2, v360);
    goto LABEL_765;
  }
  if (v361 != 85)
    goto LABEL_766;
  v362 = *(_DWORD *)(v360 + 20);
  if ((v362 & 0x40000000) != 0)
    v363 = *(_QWORD *)(v360 - 8);
  else
    v363 = v360 - 32 * (v362 & 0x7FFFFFF);
  v380 = *(unsigned __int8 **)(v363 + 32);
  if (v380 && v380[16] <= 0x14u)
  {
    ICmp = llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)(*((_WORD *)a2 + 9) & 0x3F), v380, v359, 0);
  }
  else
  {
    if (!llvm::Constant::isNullValue(v359))
    {
      v1177 = 0;
      ICmp = 0;
      goto LABEL_661;
    }
    ICmp = sub_1C4E66730(*((_WORD *)a2 + 9) & 0x3F, (llvm *)v380, v359, a1 + 88, 3);
  }
  if (!ICmp)
  {
    v1177 = 0;
LABEL_661:
    v382 = 0;
    goto LABEL_662;
  }
  if (ICmp[16] == 16)
    v382 = ICmp;
  else
    v382 = 0;
  v1177 = 1;
LABEL_662:
  v404 = *(_DWORD *)(v360 + 20);
  if ((v404 & 0x40000000) != 0)
    v405 = *(_QWORD *)(v360 - 8);
  else
    v405 = v360 - 32 * (v404 & 0x7FFFFFF);
  v1168 = (uint64_t *)ICmp;
  v406 = *(unsigned __int8 **)(v405 + 64);
  if (v406 && v406[16] <= 0x14u)
  {
    v407 = llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)(*((_WORD *)a2 + 9) & 0x3F), v406, v359, 0);
  }
  else
  {
    if (!llvm::Constant::isNullValue(v359))
    {
LABEL_676:
      if (!v1177)
        goto LABEL_766;
      v409 = 0;
      v408 = 0;
      goto LABEL_678;
    }
    v407 = sub_1C4E66730(*((_WORD *)a2 + 9) & 0x3F, (llvm *)v406, v359, a1 + 88, 3);
  }
  v408 = (uint64_t)v407;
  if (!v407)
    goto LABEL_676;
  if (v407[16] == 16)
    v382 = v407;
  else
    v382 = 0;
  if ((v1177 & 1) != 0)
    goto LABEL_761;
  v409 = 1;
LABEL_678:
  v410 = *(_QWORD *)(v360 + 8);
  if (!v410 || *(_QWORD *)(v410 + 8))
  {
    if (!v382)
      goto LABEL_766;
    v411 = (llvm::APInt *)(v382 + 24);
    v412 = *((_DWORD *)v382 + 8);
    if (v412 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v411) == v412)
        goto LABEL_766;
    }
    else if (!*(_QWORD *)v411)
    {
      goto LABEL_766;
    }
    v424 = *(_QWORD *)(v360 + 40);
    if (!v424)
      goto LABEL_766;
    v425 = *(_QWORD *)(v424 + 40);
    if (v425 == v424 + 40)
      goto LABEL_766;
    v426 = v425 ? v425 - 24 : 0;
    if (*(_BYTE *)(v426 + 16) != 30)
      goto LABEL_766;
    if ((*(_DWORD *)(v426 + 20) & 0x7FFFFFF) != 3)
      goto LABEL_766;
    v427 = *(_QWORD *)(v426 - 96);
    if (!v427 || *(_BYTE *)(v427 + 16) != 81 || *(_QWORD *)(v427 - 64) != v360 && *(_QWORD *)(v427 - 32) != v360)
      goto LABEL_766;
    if ((*((_WORD *)a2 + 9) & 0x3F) != 0x20)
      goto LABEL_766;
    Successor = (llvm::BasicBlock *)llvm::Instruction::getSuccessor((llvm::Instruction *)v426, 1u);
    if (!llvm::BasicBlock::getSinglePredecessor(Successor))
      goto LABEL_766;
    v428 = *(llvm::BasicBlock **)(v360 + 40);
    if (!v428 || v428 == Successor || v428 != (llvm::BasicBlock *)a2[5])
      goto LABEL_766;
    v429 = *(_QWORD *)(v360 + 8);
    if (v429)
    {
      do
      {
        v430 = *(_QWORD *)(v429 + 24);
        if ((uint64_t ***)v430 != a2
          && !llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*(_QWORD *)(a1 + 72), (uint64_t)Successor, *(_QWORD *)(v430 + 40)))
        {
          goto LABEL_766;
        }
        v429 = *(_QWORD *)(v429 + 8);
      }
      while (v429);
      v428 = *(llvm::BasicBlock **)(v360 + 40);
    }
    v431 = 32;
    if (v1177)
      v431 = 64;
    llvm::Value::replaceUsesOutsideBlock((llvm::Value *)v360, *(llvm::Value **)(v360 + v431 - 96), v428);
  }
  if ((v1177 & 1) == 0)
  {
    v432 = *(_QWORD *)(a1 + 24);
    v433 = *((_WORD *)a2 + 9) & 0x3F;
    v434 = *(_DWORD *)(v360 + 20);
    if ((v434 & 0x40000000) != 0)
      v435 = *(_QWORD *)(v360 - 8);
    else
      v435 = v360 - 32 * (v434 & 0x7FFFFFF);
    v440 = *(_QWORD *)(v435 + 32);
    if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    {
      v451 = 0;
      v450 = &byte_1C871356D;
      goto LABEL_746;
    }
    v441 = ***a2;
    v442 = *(_QWORD *)(v441 + 152);
    v443 = *(unsigned int *)(v441 + 168);
    if ((_DWORD)v443)
    {
      LODWORD(v444) = (v443 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v445 = (uint64_t ****)(v442 + 16 * v444);
      v446 = *v445;
      if (*v445 == a2)
      {
LABEL_745:
        v449 = v445[1];
        v452 = *v449;
        v450 = (char *)(v449 + 2);
        v451 = v452;
LABEL_746:
        LOWORD(v1190) = 261;
        __p[0] = v450;
        __p[1] = v451;
        v1168 = (uint64_t *)sub_1C4774B48(v432, v433, v440, (uint64_t)v359, (uint64_t)__p);
        goto LABEL_747;
      }
      v447 = 1;
      while (v446 != (uint64_t ***)-4096)
      {
        v448 = v444 + v447++;
        v444 = v448 & (v443 - 1);
        v446 = *(uint64_t ****)(v442 + 16 * v444);
        if (v446 == a2)
        {
          v445 = (uint64_t ****)(v442 + 16 * v444);
          goto LABEL_745;
        }
      }
    }
    v445 = (uint64_t ****)(v442 + 16 * v443);
    goto LABEL_745;
  }
LABEL_747:
  if ((v409 & 1) == 0)
  {
    v453 = *(_QWORD *)(a1 + 24);
    v454 = *((_WORD *)a2 + 9) & 0x3F;
    v455 = *(_DWORD *)(v360 + 20);
    if ((v455 & 0x40000000) != 0)
      v456 = *(_QWORD *)(v360 - 8);
    else
      v456 = v360 - 32 * (v455 & 0x7FFFFFF);
    v457 = *(_QWORD *)(v456 + 64);
    if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    {
      v468 = 0;
      v467 = &byte_1C871356D;
      goto LABEL_760;
    }
    v458 = ***a2;
    v459 = *(_QWORD *)(v458 + 152);
    v460 = *(unsigned int *)(v458 + 168);
    if ((_DWORD)v460)
    {
      LODWORD(v461) = (v460 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v462 = (uint64_t ****)(v459 + 16 * v461);
      v463 = *v462;
      if (*v462 == a2)
      {
LABEL_759:
        v466 = v462[1];
        v469 = *v466;
        v467 = (char *)(v466 + 2);
        v468 = v469;
LABEL_760:
        LOWORD(v1190) = 261;
        __p[0] = v467;
        __p[1] = v468;
        v408 = sub_1C4774B48(v453, v454, v457, (uint64_t)v359, (uint64_t)__p);
        goto LABEL_761;
      }
      v464 = 1;
      while (v463 != (uint64_t ***)-4096)
      {
        v465 = v461 + v464++;
        v461 = v465 & (v460 - 1);
        v463 = *(uint64_t ****)(v459 + 16 * v461);
        if (v463 == a2)
        {
          v462 = (uint64_t ****)(v459 + 16 * v461);
          goto LABEL_759;
        }
      }
    }
    v462 = (uint64_t ****)(v459 + 16 * v460);
    goto LABEL_759;
  }
LABEL_761:
  v470 = *(_DWORD *)(v360 + 20);
  if ((v470 & 0x40000000) != 0)
    v471 = *(uint64_t **)(v360 - 8);
  else
    v471 = (uint64_t *)(v360 - 32 * (v470 & 0x7FFFFFF));
  v472 = *v471;
  LOWORD(v1190) = 257;
  v372 = (uint64_t ***)sub_1C4FC8748(v472, v1168, v408, (uint64_t)__p, 0, 0);
LABEL_765:
  Not = v372;
  if (v372)
    return (llvm::UndefValue **)Not;
LABEL_766:
  v473 = *((unsigned __int8 *)v6 + 16);
  if (v473 == 62 || v473 == 5 && *((_WORD *)v6 + 9) == 34)
  {
    Not = sub_1C57EAF84(a1, (uint64_t)v6, v1182, *((_WORD *)a2 + 9) & 0x3F, (llvm::ValueAsMetadata *)a2);
    if (Not)
      return (llvm::UndefValue **)Not;
  }
  v474 = *((unsigned __int8 *)v1182 + 16);
  if (v474 == 62 || v474 == 5 && *((_WORD *)v1182 + 9) == 34)
  {
    Not = sub_1C57EAF84(a1, (uint64_t)v1182, (llvm::Constant *)v6, dword_1C86618B4[*((_WORD *)a2 + 9) & 0x3F], (llvm::ValueAsMetadata *)a2);
    if (Not)
      return (llvm::UndefValue **)Not;
  }
  if (*((_BYTE *)*v6 + 8) == 15 && (*((_WORD *)a2 + 9) & 0x3E) == 0x20)
  {
    UnderlyingObject = llvm::getUnderlyingObject((llvm *)v6, (const llvm::Value *)6);
    if (UnderlyingObject)
    {
      if (*((_BYTE *)UnderlyingObject + 16) == 59)
      {
        Not = (uint64_t ***)sub_1C57EDAA4(a1, (uint64_t)a2, *((_QWORD *)UnderlyingObject + 1));
        if (Not)
          return (llvm::UndefValue **)Not;
      }
    }
    v476 = llvm::getUnderlyingObject(v1182, (const llvm::Value *)6);
    if (v476)
    {
      if (*((_BYTE *)v476 + 16) == 59)
      {
        Not = (uint64_t ***)sub_1C57EDAA4(a1, (uint64_t)a2, *((_QWORD *)v476 + 1));
        if (Not)
          return (llvm::UndefValue **)Not;
      }
    }
  }
  v477 = (llvm::Type **)*v7;
  if (*v7 && *((_BYTE *)v477 + 16) == 77)
  {
    v478 = (unsigned __int8 *)*(a2 - 4);
    v479 = (uint64_t *)*(v477 - 4);
    v480 = (llvm::Type *)*v479;
    if ((*(_DWORD *)(*v479 + 8) & 0xFE) == 0x12)
      v480 = (llvm::Type *)**((_QWORD **)v480 + 2);
    v1178 = *((_WORD *)a2 + 9) & 0x3F;
    v481 = llvm::Type::getPrimitiveSizeInBits(v480);
    v482 = *v477;
    v483 = *((_DWORD *)*v477 + 2);
    if ((*((_DWORD *)*v477 + 2) & 0xFE) == 0x12)
      v482 = (llvm::Type *)**((_QWORD **)v482 + 2);
    if (v481 != llvm::Type::getPrimitiveSizeInBits(v482))
    {
LABEL_862:
      if (v483 == 15)
      {
        v534 = v478[16];
        if (v534 < 0x15 || v534 == 77)
        {
          if (v534 == 77)
            v478 = (unsigned __int8 *)*((_QWORD *)v478 - 4);
          v538 = *(uint64_t **)(a1 + 24);
          v539 = *v479;
          LOWORD(v1190) = 257;
          v540 = sub_1C4773E38(v538, 49, v478, v539, (uint64_t)__p);
          v541 = (char *)operator new(0x80uLL);
          Not = (uint64_t ***)(v541 + 64);
          *((_DWORD *)v541 + 21) = *((_DWORD *)v541 + 21) & 0x38000000 | 2;
          *(_QWORD *)v541 = 0;
          *((_QWORD *)v541 + 1) = 0;
          *((_QWORD *)v541 + 4) = 0;
          v542 = (unsigned __int8 **)(v541 + 32);
          *((_QWORD *)v541 + 2) = 0;
          *((_QWORD *)v541 + 3) = v541 + 64;
          *((_QWORD *)v541 + 5) = 0;
          *((_QWORD *)v541 + 6) = 0;
          *((_QWORD *)v541 + 7) = v541 + 64;
          LOWORD(v1190) = 257;
          sub_1C4774CC4((_DWORD *)*v479);
          *((_QWORD *)v541 + 8) = v543;
          *((_QWORD *)v541 + 9) = 0;
          v544 = *((_DWORD *)v541 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v541 + 20) = 81;
          *((_DWORD *)v541 + 21) = v544;
          *(_OWORD *)(v541 + 88) = 0u;
          *(_OWORD *)(v541 + 104) = 0u;
          *((_DWORD *)v541 + 30) = 0;
          if (*(_QWORD *)v541)
          {
            **((_QWORD **)v541 + 2) = *((_QWORD *)v541 + 1);
            v1098 = *((_QWORD *)v541 + 1);
            if (v1098)
              *(_QWORD *)(v1098 + 16) = *((_QWORD *)v541 + 2);
          }
          *(_QWORD *)v541 = v479;
          v547 = (_DWORD *)v479[1];
          v546 = v479 + 1;
          v545 = v547;
          *((_QWORD *)v541 + 1) = v547;
          if (v547)
            *((_QWORD *)v545 + 2) = v541 + 8;
          *((_QWORD *)v541 + 2) = v546;
          *v546 = v541;
          if (*((_QWORD *)v541 + 4))
          {
            **((_QWORD **)v541 + 6) = *((_QWORD *)v541 + 5);
            v1099 = *((_QWORD *)v541 + 5);
            if (v1099)
              *(_QWORD *)(v1099 + 16) = *((_QWORD *)v541 + 6);
          }
          *v542 = v540;
          if (v540)
          {
            v550 = *((_QWORD *)v540 + 1);
            v549 = (unsigned __int8 ***)(v540 + 8);
            v548 = v550;
            *((_QWORD *)v541 + 5) = v550;
            if (v550)
              *(_QWORD *)(v548 + 16) = v541 + 40;
            *((_QWORD *)v541 + 6) = v549;
            *v549 = v542;
          }
          *((_WORD *)v541 + 41) = v1178;
          goto LABEL_386;
        }
      }
      v1200 = 0;
      v535 = *v9;
      __p[0] = &v1200;
      __p[1] = 0;
      if (!sub_1C4D89F84((uint64_t)__p, (unsigned __int8 *)v535) || *((_BYTE *)*v477 + 8) != 13)
        goto LABEL_929;
      v536 = *(_QWORD *)*(v477 - 4);
      v537 = (*(_DWORD *)(v536 + 8) & 0xFE) == 0x12
           ? *(unsigned __int8 *)(**(_QWORD **)(v536 + 16) + 8)
           : *(_DWORD *)(v536 + 8);
      if (v537 != 13)
        goto LABEL_929;
      v551 = *((_WORD *)a2 + 9);
      if ((v551 & 0x3E) == 0x20)
      {
        v552 = *((_DWORD *)v1200 + 2);
        if (v552)
        {
          if (v552 > 0x40)
          {
            if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v1200) != v552)
              goto LABEL_899;
          }
          else if (*v1200 != (llvm::Constant *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v552))
          {
            goto LABEL_899;
          }
        }
        v553 = v477[1];
        if (v553 && !*((_QWORD *)v553 + 1))
        {
          v554 = (_DWORD *)v479[1];
          if (v554)
            v555 = *((_QWORD *)v554 + 1) == 0;
          else
            v555 = 0;
          if ((sub_1C579CB78((uint64_t)v479, v555) & 1) != 0)
          {
            v556 = *v477;
            v557 = *(uint64_t **)(a1 + 24);
            LOWORD(v1190) = 257;
            v558 = (unsigned __int8 *)sub_1C506EAA0((uint64_t)v557, (uint64_t)v479, (uint64_t)__p);
            v1211 = 257;
            v559 = sub_1C4773E38(v557, 49, v558, (uint64_t)v556, (uint64_t)&v1207);
            v508 = (char *)operator new(0x80uLL);
            Not = (uint64_t ***)(v508 + 64);
            *((_DWORD *)v508 + 21) = *((_DWORD *)v508 + 21) & 0x38000000 | 2;
            *(_QWORD *)v508 = 0;
            *((_QWORD *)v508 + 1) = 0;
            *((_QWORD *)v508 + 2) = 0;
            *((_QWORD *)v508 + 3) = v508 + 64;
            *((_QWORD *)v508 + 4) = 0;
            v560 = (llvm::Value ***)(v508 + 32);
            *((_QWORD *)v508 + 5) = 0;
            *((_QWORD *)v508 + 6) = 0;
            *((_QWORD *)v508 + 7) = v508 + 64;
            v562 = llvm::Constant::getNullValue(v556, v561);
            LOWORD(v1190) = 257;
            sub_1C4774CC4(*(_DWORD **)v559);
            *((_QWORD *)v508 + 8) = v563;
            *((_QWORD *)v508 + 9) = 0;
            v564 = *((_DWORD *)v508 + 21) & 0xC0000000 | 2;
            *((_DWORD *)v508 + 20) = 81;
            *((_DWORD *)v508 + 21) = v564;
            *(_OWORD *)(v508 + 88) = 0u;
            *(_OWORD *)(v508 + 104) = 0u;
            *((_DWORD *)v508 + 30) = 0;
            if (*(_QWORD *)v508)
            {
              **((_QWORD **)v508 + 2) = *((_QWORD *)v508 + 1);
              v1140 = *((_QWORD *)v508 + 1);
              if (v1140)
                *(_QWORD *)(v1140 + 16) = *((_QWORD *)v508 + 2);
            }
            *(_QWORD *)v508 = v559;
            v567 = *((_QWORD *)v559 + 1);
            v566 = v559 + 8;
            v565 = v567;
            *((_QWORD *)v508 + 1) = v567;
            if (v567)
              *(_QWORD *)(v565 + 16) = v508 + 8;
            *((_QWORD *)v508 + 2) = v566;
            *v566 = v508;
            goto LABEL_1661;
          }
          v551 = *((_WORD *)a2 + 9);
        }
      }
LABEL_899:
      v1196 = 0;
      if ((v551 & 0x3E) == 0x20)
      {
        v568 = *((_DWORD *)v1200 + 2);
        if (v568 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v1200) == v568)
            goto LABEL_904;
        }
        else if (!*v1200)
        {
LABEL_904:
          v569 = v477[1];
          if (v569)
          {
            if (!*((_QWORD *)v569 + 1))
            {
              __p[0] = &v1196;
              __p[1] = &v1196;
              if ((sub_1C4B0378C((_QWORD **)__p, (uint64_t)v479) & 1) != 0
                || (sub_1C4B037F8((_QWORD **)&__p[1], (uint64_t)v479) & 1) != 0)
              {
                v659 = *(llvm::Type **)v1196;
                if (*(_QWORD *)v1196)
                {
                  if (*((_BYTE *)v659 + 8) == 18)
                  {
                    v660 = *(_QWORD *)(a1 + 24);
                    v662 = llvm::Type::getPrimitiveSizeInBits(v659);
                    if ((_DWORD)v661 == 1)
                    v663 = *(_QWORD **)(v660 + 64);
                    LODWORD(__p[0]) = v662;
                    if (v662 <= 63)
                    {
                      if (v662 <= 31)
                      {
                        switch(v662)
                        {
                          case 16:
                            v664 = (llvm::Constant *)(*v663 + 1936);
                            break;
                          case 8:
                            v664 = (llvm::Constant *)(*v663 + 1912);
                            break;
                          case 1:
                            v664 = (llvm::Constant *)(*v663 + 1888);
                            break;
                          default:
                            goto LABEL_1685;
                        }
LABEL_1657:
                        v1025 = *(uint64_t **)(a1 + 24);
                        LOWORD(v1190) = 257;
                        v1026 = sub_1C4773E38(v1025, 49, (unsigned __int8 *)v1196, (uint64_t)v664, (uint64_t)__p);
                        v508 = (char *)operator new(0x80uLL);
                        Not = (uint64_t ***)(v508 + 64);
                        *((_DWORD *)v508 + 21) = *((_DWORD *)v508 + 21) & 0x38000000 | 2;
                        *(_QWORD *)v508 = 0;
                        *((_QWORD *)v508 + 1) = 0;
                        *((_QWORD *)v508 + 2) = 0;
                        *((_QWORD *)v508 + 3) = v508 + 64;
                        *((_QWORD *)v508 + 4) = 0;
                        v560 = (llvm::Value ***)(v508 + 32);
                        *((_QWORD *)v508 + 5) = 0;
                        *((_QWORD *)v508 + 6) = 0;
                        *((_QWORD *)v508 + 7) = v508 + 64;
                        v562 = llvm::Constant::getNullValue(v664, v1027);
                        LOWORD(v1190) = 257;
                        sub_1C4774CC4(*(_DWORD **)v1026);
                        *((_QWORD *)v508 + 8) = v1028;
                        *((_QWORD *)v508 + 9) = 0;
                        v1029 = *((_DWORD *)v508 + 21) & 0xC0000000 | 2;
                        *((_DWORD *)v508 + 20) = 81;
                        *((_DWORD *)v508 + 21) = v1029;
                        *(_OWORD *)(v508 + 88) = 0u;
                        *(_OWORD *)(v508 + 104) = 0u;
                        *((_DWORD *)v508 + 30) = 0;
                        if (*(_QWORD *)v508)
                        {
                          **((_QWORD **)v508 + 2) = *((_QWORD *)v508 + 1);
                          v1149 = *((_QWORD *)v508 + 1);
                          if (v1149)
                            *(_QWORD *)(v1149 + 16) = *((_QWORD *)v508 + 2);
                        }
                        *(_QWORD *)v508 = v1026;
                        v1032 = *((_QWORD *)v1026 + 1);
                        v1031 = v1026 + 8;
                        v1030 = v1032;
                        *((_QWORD *)v508 + 1) = v1032;
                        if (v1032)
                          *(_QWORD *)(v1030 + 16) = v508 + 8;
                        *((_QWORD *)v508 + 2) = v1031;
                        *v1031 = v508;
LABEL_1661:
                        if (*((_QWORD *)v508 + 4))
                        {
                          **((_QWORD **)v508 + 6) = *((_QWORD *)v508 + 5);
                          v1135 = *((_QWORD *)v508 + 5);
                          if (v1135)
                            *(_QWORD *)(v1135 + 16) = *((_QWORD *)v508 + 6);
                        }
                        *v560 = v562;
                        if (v562)
                        {
                          v1035 = v562[1];
                          v1034 = (llvm::Value ****)(v562 + 1);
                          v1033 = v1035;
                          *((_QWORD *)v508 + 5) = v1035;
                          if (v1035)
                            *((_QWORD *)v1033 + 2) = v508 + 40;
                          *((_QWORD *)v508 + 6) = v1034;
                          *v1034 = v560;
                        }
                        goto LABEL_836;
                      }
                      if (v662 == 32)
                      {
                        v664 = (llvm::Constant *)(*v663 + 1960);
                        goto LABEL_1657;
                      }
                    }
                    else
                    {
                      if (v662 == 64)
                      {
                        v664 = (llvm::Constant *)(*v663 + 1984);
                        goto LABEL_1657;
                      }
                      if (v662 == 128)
                      {
                        v664 = (llvm::Constant *)(*v663 + 2008);
                        goto LABEL_1657;
                      }
                    }
LABEL_1685:
                    v1039 = sub_1C5270984(*v663 + 2168, __p);
                    v664 = (llvm::Constant *)*((_QWORD *)v1039 + 1);
                    if (!v664)
                    {
                      v1040 = v1039;
                      v664 = (llvm::Constant *)sub_1C484358C(*v663 + 2040, 24, 3);
                      v1041 = (int)__p[0];
                      *(_QWORD *)v664 = v663;
                      *((_QWORD *)v664 + 2) = 0;
                      *((_QWORD *)v664 + 1) = (v1041 << 8) | 0xDu;
                      *((_QWORD *)v1040 + 1) = v664;
                    }
                    goto LABEL_1657;
                  }
                }
              }
            }
          }
        }
      }
      __s1 = 0;
      v1207 = 0;
      v1208 = 0;
      __p[0] = &__s1;
      *(_QWORD *)&v1189 = &v1207;
      if (sub_1C57907A8((uint64_t)__p, (uint64_t)v479)
        && v1208
        && (v1208 == (unsigned __int8 *)1 || !memcmp((char *)v1207 + 4, v1207, 4 * (_QWORD)v1208 - 4)))
      {
        v570 = *(_QWORD *)(*v479 + 24);
        if (llvm::APInt::isSplat((llvm::APInt *)v1200, *(_DWORD *)(v570 + 8) >> 8))
        {
          v572 = *(unsigned int *)v1207;
          v573 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 64);
          v574 = *(llvm::ConstantInt **)(v573 + 1960);
          v575 = *(unsigned int *)(v573 + 1968);
          LODWORD(__p[1]) = v575 >> 8;
          if (v575 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)__p, v572, 0);
          }
          else
          {
            if (v575 <= 0xFF)
              v576 = 0;
            else
              v576 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v575);
            __p[0] = (void *)(v576 & v572);
          }
          v577 = llvm::ConstantInt::get(v574, (llvm::LLVMContext *)__p, v571);
          if (LODWORD(__p[1]) >= 0x41 && __p[0])
            MEMORY[0x1CAA32F9C](__p[0], 0x1000C8000313F17);
          v578 = *(uint64_t **)(a1 + 24);
          LOWORD(v1190) = 257;
          v579 = sub_1C4772EE0(v578, (uint64_t)__s1, (uint64_t)v577, (uint64_t)__p);
          llvm::APInt::trunc((llvm::APInt *)v1200, *(_DWORD *)(v570 + 8) >> 8, (llvm::APInt *)__p);
          v581 = llvm::ConstantInt::get((llvm::ConstantInt **)v570, (llvm::Type *)__p, v580);
          if (LODWORD(__p[1]) >= 0x41 && __p[0])
            MEMORY[0x1CAA32F9C](__p[0], 0x1000C8000313F17);
          v582 = (char *)operator new(0x80uLL);
          Not = (uint64_t ***)(v582 + 64);
          *((_DWORD *)v582 + 21) = *((_DWORD *)v582 + 21) & 0x38000000 | 2;
          *(_QWORD *)v582 = 0;
          *((_QWORD *)v582 + 1) = 0;
          *((_QWORD *)v582 + 4) = 0;
          v583 = (llvm::Value ***)(v582 + 32);
          *((_QWORD *)v582 + 2) = 0;
          *((_QWORD *)v582 + 3) = v582 + 64;
          *((_QWORD *)v582 + 5) = 0;
          *((_QWORD *)v582 + 6) = 0;
          *((_QWORD *)v582 + 7) = v582 + 64;
          LOWORD(v1190) = 257;
          sub_1C4774CC4(*(_DWORD **)v579);
          *((_QWORD *)v582 + 8) = v584;
          *((_QWORD *)v582 + 9) = 0;
          v585 = *((_DWORD *)v582 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v582 + 20) = 81;
          *((_DWORD *)v582 + 21) = v585;
          *(_OWORD *)(v582 + 88) = 0u;
          *(_OWORD *)(v582 + 104) = 0u;
          *((_DWORD *)v582 + 30) = 0;
          if (*(_QWORD *)v582)
          {
            **((_QWORD **)v582 + 2) = *((_QWORD *)v582 + 1);
            v1123 = *((_QWORD *)v582 + 1);
            if (v1123)
              *(_QWORD *)(v1123 + 16) = *((_QWORD *)v582 + 2);
          }
          *(_QWORD *)v582 = v579;
          v588 = *((_QWORD *)v579 + 1);
          v587 = v579 + 8;
          v586 = v588;
          *((_QWORD *)v582 + 1) = v588;
          if (v588)
            *(_QWORD *)(v586 + 16) = v582 + 8;
          *((_QWORD *)v582 + 2) = v587;
          *v587 = v582;
          if (*((_QWORD *)v582 + 4))
          {
            **((_QWORD **)v582 + 6) = *((_QWORD *)v582 + 5);
            v1124 = *((_QWORD *)v582 + 5);
            if (v1124)
              *(_QWORD *)(v1124 + 16) = *((_QWORD *)v582 + 6);
          }
          *v583 = v581;
          if (v581)
          {
            v591 = v581[1];
            v590 = (llvm::Value ****)(v581 + 1);
            v589 = v591;
            *((_QWORD *)v582 + 5) = v591;
            if (v591)
              *((_QWORD *)v589 + 2) = v582 + 40;
            *((_QWORD *)v582 + 6) = v590;
            *v590 = v583;
          }
          *((_WORD *)v582 + 41) = v1178;
          goto LABEL_386;
        }
      }
      goto LABEL_929;
    }
    v1207 = 0;
    v484 = *((unsigned __int8 *)v479 + 16);
    if (v484 > 0x1B || v484 == 5)
    {
      v485 = v484 <= 0x1B ? *((unsigned __int16 *)v479 + 9) : v484 - 28;
      if (v485 == 44)
      {
        v486 = *((_DWORD *)v479 + 5);
        v487 = (v486 & 0x40000000) != 0 ? (int8x8_t *)*(v479 - 1) : (int8x8_t *)&v479[-4 * (v486 & 0x7FFFFFF)];
        v488 = *v487;
        if (v488)
        {
          v1207 = (llvm::APInt **)v488;
          if (v1178 <= 0x28
            && ((1 << v1178) & 0x14300000000) != 0
            && v478
            && v478[16] <= 0x14u
            && ((llvm::Constant::isNullValue((llvm::Constant *)v478) & 1) != 0
             || (sub_1C4E71060((uint64_t)__p, (llvm::Constant *)v478) & 1) != 0))
          {
            goto LABEL_828;
          }
          if (v1178 == 40)
          {
            if ((sub_1C4D89CC8((uint64_t)__p, (llvm::Constant *)v478) & 1) != 0)
            {
              v179 = (char *)operator new(0x80uLL);
              Not = (uint64_t ***)(v179 + 64);
              *((_DWORD *)v179 + 21) = *((_DWORD *)v179 + 21) & 0x38000000 | 2;
              *(_QWORD *)v179 = 0;
              *((_QWORD *)v179 + 1) = 0;
              *((_QWORD *)v179 + 4) = 0;
              v489 = v179 + 32;
              *((_QWORD *)v179 + 2) = 0;
              *((_QWORD *)v179 + 3) = v179 + 64;
              *((_QWORD *)v179 + 5) = 0;
              *((_QWORD *)v179 + 6) = 0;
              *((_QWORD *)v179 + 7) = v179 + 64;
              v490 = (int8x8_t)v1207;
              v491 = llvm::ConstantInt::get(*v1207, 1, 0);
              LOWORD(v1190) = 257;
              sub_1C4774CC4(**(_DWORD ***)&v490);
              *((_QWORD *)v179 + 8) = v492;
              *((_QWORD *)v179 + 9) = 0;
              v493 = *((_DWORD *)v179 + 21) & 0xC0000000 | 2;
              *((_DWORD *)v179 + 20) = 81;
              *((_DWORD *)v179 + 21) = v493;
              *(_OWORD *)(v179 + 88) = 0u;
              *(_OWORD *)(v179 + 104) = 0u;
              *((_DWORD *)v179 + 30) = 0;
              if (*(_QWORD *)v179)
              {
                **((_QWORD **)v179 + 2) = *((_QWORD *)v179 + 1);
                v1120 = *((_QWORD *)v179 + 1);
                if (v1120)
                  *(_QWORD *)(v1120 + 16) = *((_QWORD *)v179 + 2);
              }
              *(int8x8_t *)v179 = v490;
              v496 = *(_QWORD *)(*(_QWORD *)&v490 + 8);
              v495 = (_QWORD *)(*(_QWORD *)&v490 + 8);
              v494 = v496;
              *((_QWORD *)v179 + 1) = v496;
              if (v496)
                *(_QWORD *)(v494 + 16) = v179 + 8;
              *((_QWORD *)v179 + 2) = v495;
              *v495 = v179;
LABEL_811:
              if (*((_QWORD *)v179 + 4))
              {
                **((_QWORD **)v179 + 6) = *((_QWORD *)v179 + 5);
                v1119 = *((_QWORD *)v179 + 5);
                if (v1119)
                  *(_QWORD *)(v1119 + 16) = *((_QWORD *)v179 + 6);
              }
              *v489 = v491;
              if (v491)
              {
                v499 = v491[1];
                v498 = v491 + 1;
                v497 = v499;
                *((_QWORD *)v179 + 5) = v499;
                if (v499)
                  *((_QWORD *)v497 + 2) = v179 + 40;
                *((_QWORD *)v179 + 6) = v498;
                *v498 = v489;
              }
              goto LABEL_1203;
            }
          }
          else if (v1178 == 38 && sub_1C4D9ED34((uint64_t)__p, (llvm::Constant *)v478))
          {
            v179 = (char *)operator new(0x80uLL);
            Not = (uint64_t ***)(v179 + 64);
            *((_DWORD *)v179 + 21) = *((_DWORD *)v179 + 21) & 0x38000000 | 2;
            *(_QWORD *)v179 = 0;
            *((_QWORD *)v179 + 1) = 0;
            *((_QWORD *)v179 + 4) = 0;
            v489 = v179 + 32;
            *((_QWORD *)v179 + 2) = 0;
            *((_QWORD *)v179 + 3) = v179 + 64;
            *((_QWORD *)v179 + 5) = 0;
            *((_QWORD *)v179 + 6) = 0;
            *((_QWORD *)v179 + 7) = v179 + 64;
            v500 = (int8x8_t)v1207;
            v502 = llvm::Constant::getAllOnesValue(*v1207, v501);
            LOWORD(v1190) = 257;
            sub_1C4774CC4(**(_DWORD ***)&v500);
            *((_QWORD *)v179 + 8) = v503;
            *((_QWORD *)v179 + 9) = 0;
            v504 = *((_DWORD *)v179 + 21) & 0xC0000000 | 2;
            *((_DWORD *)v179 + 20) = 81;
            *((_DWORD *)v179 + 21) = v504;
            *(_OWORD *)(v179 + 88) = 0u;
            *(_OWORD *)(v179 + 104) = 0u;
            *((_DWORD *)v179 + 30) = 0;
            if (*(_QWORD *)v179)
            {
              **((_QWORD **)v179 + 2) = *((_QWORD *)v179 + 1);
              v1130 = *((_QWORD *)v179 + 1);
              if (v1130)
                *(_QWORD *)(v1130 + 16) = *((_QWORD *)v179 + 2);
            }
            *(int8x8_t *)v179 = v500;
            v507 = *(_QWORD *)(*(_QWORD *)&v500 + 8);
            v506 = (_QWORD *)(*(_QWORD *)&v500 + 8);
            v505 = v507;
            *((_QWORD *)v179 + 1) = v507;
            if (v507)
              *(_QWORD *)(v505 + 16) = v179 + 8;
            *((_QWORD *)v179 + 2) = v506;
            *v506 = v179;
            goto LABEL_1223;
          }
        }
      }
    }
    __p[0] = &v1207;
    if (sub_1C4E787F4((_QWORD **)__p, (uint64_t)v479)
      && (*((_WORD *)a2 + 9) & 0x3E) == 0x20
      && v478
      && v478[16] <= 0x14u
      && ((llvm::Constant::isNullValue((llvm::Constant *)v478) & 1) != 0
       || (sub_1C4E71060((uint64_t)__p, (llvm::Constant *)v478) & 1) != 0))
    {
LABEL_828:
      v508 = (char *)operator new(0x80uLL);
      Not = (uint64_t ***)(v508 + 64);
      *((_DWORD *)v508 + 21) = *((_DWORD *)v508 + 21) & 0x38000000 | 2;
      *(_QWORD *)v508 = 0;
      *((_QWORD *)v508 + 1) = 0;
      *((_QWORD *)v508 + 4) = 0;
      v509 = (llvm::Value ***)(v508 + 32);
      *((_QWORD *)v508 + 2) = 0;
      *((_QWORD *)v508 + 3) = v508 + 64;
      *((_QWORD *)v508 + 5) = 0;
      *((_QWORD *)v508 + 6) = 0;
      *((_QWORD *)v508 + 7) = v508 + 64;
      v510 = (int8x8_t)v1207;
      v512 = llvm::Constant::getNullValue(*v1207, v511);
      LOWORD(v1190) = 257;
      sub_1C4774CC4(**(_DWORD ***)&v510);
      *((_QWORD *)v508 + 8) = v513;
      *((_QWORD *)v508 + 9) = 0;
      v514 = *((_DWORD *)v508 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v508 + 20) = 81;
      *((_DWORD *)v508 + 21) = v514;
      *(_OWORD *)(v508 + 88) = 0u;
      *(_OWORD *)(v508 + 104) = 0u;
      *((_DWORD *)v508 + 30) = 0;
      if (*(_QWORD *)v508)
      {
        **((_QWORD **)v508 + 2) = *((_QWORD *)v508 + 1);
        v1107 = *((_QWORD *)v508 + 1);
        if (v1107)
          *(_QWORD *)(v1107 + 16) = *((_QWORD *)v508 + 2);
      }
      *(int8x8_t *)v508 = v510;
      v517 = *(_QWORD *)(*(_QWORD *)&v510 + 8);
      v516 = (_QWORD *)(*(_QWORD *)&v510 + 8);
      v515 = v517;
      *((_QWORD *)v508 + 1) = v517;
      if (v517)
        *(_QWORD *)(v515 + 16) = v508 + 8;
      *((_QWORD *)v508 + 2) = v516;
      *v516 = v508;
      if (*((_QWORD *)v508 + 4))
      {
        **((_QWORD **)v508 + 6) = *((_QWORD *)v508 + 5);
        v1108 = *((_QWORD *)v508 + 5);
        if (v1108)
          *(_QWORD *)(v1108 + 16) = *((_QWORD *)v508 + 6);
      }
      *v509 = v512;
      if (v512)
      {
        v520 = v512[1];
        v519 = (llvm::Value ****)(v512 + 1);
        v518 = v520;
        *((_QWORD *)v508 + 5) = v520;
        if (v520)
          *((_QWORD *)v518 + 2) = v508 + 40;
        *((_QWORD *)v508 + 6) = v519;
        *v519 = v509;
      }
LABEL_836:
      *((_WORD *)v508 + 41) = v1178;
      goto LABEL_386;
    }
    v1200 = 0;
    LOBYTE(v1196) = 0;
    __p[0] = &v1200;
    __p[1] = 0;
    if (sub_1C4D89F84((uint64_t)__p, v478))
    {
      v521 = v477[1];
      if (v521)
      {
        if (!*((_QWORD *)v521 + 1) && sub_1C57921EC(v1178, (llvm::APInt *)v1200, &v1196))
        {
          __p[0] = &v1207;
          if ((sub_1C57DCAD0((_QWORD **)__p, (uint64_t)v479) & 1) != 0)
          {
            v522 = (int8x8_t)v1207;
LABEL_843:
            v523 = **(_QWORD **)&v522;
            v524 = *(unsigned __int8 *)(**(_QWORD **)&v522 + 8);
            if (v524 != 6 && *(_BYTE *)(*v479 + 8) != 6)
            {
              v525 = *(_QWORD *)(a1 + 24);
              v526 = (llvm::Type *)v523;
              if ((v524 & 0xFE) == 0x12)
                v526 = **(llvm::Type ***)(v523 + 16);
              v527 = llvm::Type::getPrimitiveSizeInBits(v526);
              v528 = *(_QWORD **)(v525 + 64);
              LODWORD(__p[0]) = v527;
              if (v527 <= 63)
              {
                if (v527 <= 31)
                {
                  switch(v527)
                  {
                    case 16:
                      v529 = *v528 + 1936;
                      goto LABEL_1608;
                    case 8:
                      v529 = *v528 + 1912;
                      goto LABEL_1608;
                    case 1:
                      v529 = *v528 + 1888;
                      goto LABEL_1608;
                  }
                }
                else if (v527 == 32)
                {
                  v529 = *v528 + 1960;
                  goto LABEL_1608;
                }
              }
              else
              {
                if (v527 == 64)
                {
                  v529 = *v528 + 1984;
LABEL_1608:
                  if ((*(_DWORD *)(v523 + 8) & 0xFE) == 0x12)
                  {
                    v983 = (llvm::Type *)*(unsigned int *)(v523 + 32);
                    if (*(_DWORD *)(v523 + 8) == 19)
                      llvm::ScalableVectorType::get((uint64_t **)v529, v983);
                    else
                      llvm::FixedVectorType::get((llvm::FixedVectorType *)v529, v983);
                    v529 = v984;
                  }
                  v985 = *(uint64_t **)(a1 + 24);
                  LOWORD(v1190) = 257;
                  v986 = sub_1C4773E38(v985, 49, (unsigned __int8 *)v1207, v529, (uint64_t)__p);
                  v987 = v1196;
                  v179 = (char *)operator new(0x80uLL);
                  Not = (uint64_t ***)(v179 + 64);
                  *((_DWORD *)v179 + 21) = *((_DWORD *)v179 + 21) & 0x38000000 | 2;
                  *(_QWORD *)v179 = 0;
                  *((_QWORD *)v179 + 1) = 0;
                  *((_QWORD *)v179 + 2) = 0;
                  *((_QWORD *)v179 + 3) = v179 + 64;
                  *((_QWORD *)v179 + 4) = 0;
                  v989 = v179 + 32;
                  *((_QWORD *)v179 + 5) = 0;
                  *((_QWORD *)v179 + 6) = 0;
                  *((_QWORD *)v179 + 7) = v179 + 64;
                  v990 = v179 + 88;
                  if (!v987)
                  {
                    v1000 = llvm::Constant::getAllOnesValue((llvm::Constant *)v529, v988);
                    LOWORD(v1190) = 257;
                    sub_1C4774CC4(*(_DWORD **)v986);
                    *((_QWORD *)v179 + 8) = v1001;
                    *((_QWORD *)v179 + 9) = 0;
                    v1002 = *((_DWORD *)v179 + 21) & 0xC0000000 | 2;
                    *((_DWORD *)v179 + 20) = 81;
                    *((_DWORD *)v179 + 21) = v1002;
                    *v990 = 0u;
                    *(_OWORD *)(v179 + 104) = 0u;
                    *((_DWORD *)v179 + 30) = 0;
                    if (*(_QWORD *)v179)
                    {
                      **((_QWORD **)v179 + 2) = *((_QWORD *)v179 + 1);
                      v1152 = *((_QWORD *)v179 + 1);
                      if (v1152)
                        *(_QWORD *)(v1152 + 16) = *((_QWORD *)v179 + 2);
                    }
                    *(_QWORD *)v179 = v986;
                    v1005 = *((_QWORD *)v986 + 1);
                    v1004 = v986 + 8;
                    v1003 = v1005;
                    *((_QWORD *)v179 + 1) = v1005;
                    if (v1005)
                      *(_QWORD *)(v1003 + 16) = v179 + 8;
                    *((_QWORD *)v179 + 2) = v1004;
                    *v1004 = v179;
                    if (*((_QWORD *)v179 + 4))
                    {
                      **((_QWORD **)v179 + 6) = *((_QWORD *)v179 + 5);
                      v1153 = *((_QWORD *)v179 + 5);
                      if (v1153)
                        *(_QWORD *)(v1153 + 16) = *((_QWORD *)v179 + 6);
                    }
                    *v989 = v1000;
                    if (v1000)
                    {
                      v1008 = *((_QWORD *)v1000 + 1);
                      v1007 = (_QWORD *)((char *)v1000 + 8);
                      v1006 = v1008;
                      *((_QWORD *)v179 + 5) = v1008;
                      if (v1008)
                        *(_QWORD *)(v1006 + 16) = v179 + 40;
                      *((_QWORD *)v179 + 6) = v1007;
                      *v1007 = v989;
                    }
LABEL_309:
                    v192 = 38;
LABEL_310:
                    *((_WORD *)v179 + 41) = v192;
LABEL_386:
                    v74 = (int8x8_t *)__p;
                    goto LABEL_387;
                  }
                  v991 = llvm::Constant::getNullValue((llvm::Constant *)v529, v988);
                  LOWORD(v1190) = 257;
                  sub_1C4774CC4(*(_DWORD **)v986);
                  *((_QWORD *)v179 + 8) = v992;
                  *((_QWORD *)v179 + 9) = 0;
                  v993 = *((_DWORD *)v179 + 21) & 0xC0000000 | 2;
                  *((_DWORD *)v179 + 20) = 81;
                  *((_DWORD *)v179 + 21) = v993;
                  *v990 = 0u;
                  *(_OWORD *)(v179 + 104) = 0u;
                  *((_DWORD *)v179 + 30) = 0;
                  if (*(_QWORD *)v179)
                  {
                    **((_QWORD **)v179 + 2) = *((_QWORD *)v179 + 1);
                    v1143 = *((_QWORD *)v179 + 1);
                    if (v1143)
                      *(_QWORD *)(v1143 + 16) = *((_QWORD *)v179 + 2);
                  }
                  *(_QWORD *)v179 = v986;
                  v996 = *((_QWORD *)v986 + 1);
                  v995 = v986 + 8;
                  v994 = v996;
                  *((_QWORD *)v179 + 1) = v996;
                  if (v996)
                    *(_QWORD *)(v994 + 16) = v179 + 8;
                  *((_QWORD *)v179 + 2) = v995;
                  *v995 = v179;
                  if (*((_QWORD *)v179 + 4))
                  {
                    **((_QWORD **)v179 + 6) = *((_QWORD *)v179 + 5);
                    v1144 = *((_QWORD *)v179 + 5);
                    if (v1144)
                      *(_QWORD *)(v1144 + 16) = *((_QWORD *)v179 + 6);
                  }
                  *v989 = v991;
                  if (v991)
                  {
                    v999 = v991[1];
                    v998 = v991 + 1;
                    v997 = v999;
                    *((_QWORD *)v179 + 5) = v999;
                    if (v999)
                      *((_QWORD *)v997 + 2) = v179 + 40;
                    *((_QWORD *)v179 + 6) = v998;
                    *v998 = v989;
                  }
LABEL_1203:
                  v192 = 40;
                  goto LABEL_310;
                }
                if (v527 == 128)
                {
                  v529 = *v528 + 2008;
                  goto LABEL_1608;
                }
              }
              v1036 = sub_1C5270984(*v528 + 2168, __p);
              v529 = *((_QWORD *)v1036 + 1);
              if (!v529)
              {
                v1037 = v1036;
                v529 = sub_1C484358C(*v528 + 2040, 24, 3);
                v1038 = (int)__p[0];
                *(_QWORD *)v529 = v528;
                *(_QWORD *)(v529 + 16) = 0;
                *(_QWORD *)(v529 + 8) = (v1038 << 8) | 0xDu;
                *((_QWORD *)v1037 + 1) = v529;
              }
              goto LABEL_1608;
            }
            goto LABEL_861;
          }
          v530 = *((unsigned __int8 *)v479 + 16);
          if (v530 > 0x1B || v530 == 5)
          {
            v531 = v530 <= 0x1B ? *((unsigned __int16 *)v479 + 9) : v530 - 28;
            if (v531 == 45)
            {
              v532 = *((_DWORD *)v479 + 5);
              v533 = (v532 & 0x40000000) != 0 ? (int8x8_t *)*(v479 - 1) : (int8x8_t *)&v479[-4 * (v532 & 0x7FFFFFF)];
              v522 = *v533;
              if (v522)
              {
                v1207 = (llvm::APInt **)v522;
                goto LABEL_843;
              }
            }
          }
        }
      }
    }
LABEL_861:
    v483 = *((unsigned __int8 *)*v477 + 8);
    goto LABEL_862;
  }
LABEL_929:
  v592 = (uint64_t)sub_1C577D4C8(a1, *v7);
  v593 = sub_1C577D4C8(a1, (uint64_t)*v9);
  if (v592 | (unint64_t)v593)
  {
    v594 = (llvm::Constant *)v593;
    v236 = (char *)operator new(0x80uLL);
    Not = (uint64_t ***)(v236 + 64);
    *((_DWORD *)v236 + 21) = *((_DWORD *)v236 + 21) & 0x38000000 | 2;
    *(_QWORD *)v236 = 0;
    *((_QWORD *)v236 + 1) = 0;
    *((_QWORD *)v236 + 2) = 0;
    *((_QWORD *)v236 + 3) = v236 + 64;
    *((_QWORD *)v236 + 4) = 0;
    v595 = (llvm::Constant **)(v236 + 32);
    *((_QWORD *)v236 + 5) = 0;
    *((_QWORD *)v236 + 6) = 0;
    *((_QWORD *)v236 + 7) = v236 + 64;
    if (!v592)
      v592 = *v7;
    if (!v594)
      v594 = *v9;
    v596 = *((_WORD *)a2 + 9);
    LOWORD(v1190) = 257;
    sub_1C4774CC4(*(_DWORD **)v592);
    *((_QWORD *)v236 + 8) = v597;
    *((_QWORD *)v236 + 9) = 0;
    v598 = *((_DWORD *)v236 + 21) & 0xC0000000 | 2;
    *((_DWORD *)v236 + 20) = 81;
    *((_DWORD *)v236 + 21) = v598;
    *(_OWORD *)(v236 + 88) = 0u;
    *(_OWORD *)(v236 + 104) = 0u;
    *((_DWORD *)v236 + 30) = 0;
    if (*(_QWORD *)v236)
    {
      **((_QWORD **)v236 + 2) = *((_QWORD *)v236 + 1);
      v1092 = *((_QWORD *)v236 + 1);
      if (v1092)
        *(_QWORD *)(v1092 + 16) = *((_QWORD *)v236 + 2);
    }
    *(_QWORD *)v236 = v592;
    v601 = *(_QWORD *)(v592 + 8);
    v600 = (_QWORD *)(v592 + 8);
    v599 = v601;
    *((_QWORD *)v236 + 1) = v601;
    if (v601)
      *(_QWORD *)(v599 + 16) = v236 + 8;
    v246 = v596 & 0x3F;
    *((_QWORD *)v236 + 2) = v600;
    *v600 = v236;
    if (*((_QWORD *)v236 + 4))
    {
      **((_QWORD **)v236 + 6) = *((_QWORD *)v236 + 5);
      v1093 = *((_QWORD *)v236 + 5);
      if (v1093)
        *(_QWORD *)(v1093 + 16) = *((_QWORD *)v236 + 6);
    }
    *v595 = v594;
    if (!v594)
      goto LABEL_385;
    goto LABEL_939;
  }
  v605 = *v7;
  if (!*v7)
    goto LABEL_1071;
  v606 = *(unsigned __int8 *)(v605 + 16);
  if (v606 < 0x1C)
    goto LABEL_1071;
  if (v606 - 79 < 0xFFFFFFF3)
    goto LABEL_1071;
  v607 = *v9;
  v608 = *((unsigned __int8 *)*v9 + 16);
  if (v608 >= 0x15 && (v608 < 0x1C || v608 - 66 > 0xC))
    goto LABEL_1071;
  if (v606 == 75)
  {
    v1169 = *(uint64_t **)(v605 - 32);
    v609 = *v1169;
    v610 = *(_QWORD *)v605;
    v1161 = *(_DWORD *)(*v1169 + 8);
    v1179 = (llvm::PHINode *)*v1169;
    if ((v1161 & 0xFE) == 0x12)
    {
      v609 = *(_QWORD *)(v609 + 24);
      v610 = *(_QWORD *)(v610 + 24);
    }
    if (llvm::DataLayout::getPointerTypeSizeInBits(*(_QWORD *)(a1 + 80), v609) == *(_DWORD *)(v610 + 8) >> 8)
    {
      if (v608 != 75)
      {
        if (v608 == 5)
        {
          if (*((_WORD *)v607 + 9) == 47)
            goto LABEL_955;
        }
        else if (v608 > 0x14)
        {
          goto LABEL_977;
        }
        v613 = sub_1C537D3B8((llvm *)0x30, (uint64_t)v607, v1179, 0);
LABEL_970:
        v594 = v613;
        if (v613)
        {
LABEL_971:
          v236 = (char *)operator new(0x80uLL);
          Not = (uint64_t ***)(v236 + 64);
          *((_DWORD *)v236 + 21) = *((_DWORD *)v236 + 21) & 0x38000000 | 2;
          *(_QWORD *)v236 = 0;
          *((_QWORD *)v236 + 1) = 0;
          *((_QWORD *)v236 + 2) = 0;
          *((_QWORD *)v236 + 3) = v236 + 64;
          *((_QWORD *)v236 + 4) = 0;
          v595 = (llvm::Constant **)(v236 + 32);
          *((_QWORD *)v236 + 5) = 0;
          *((_QWORD *)v236 + 6) = 0;
          *((_QWORD *)v236 + 7) = v236 + 64;
          v618 = *((_WORD *)a2 + 9);
          LOWORD(v1190) = 257;
          sub_1C4774CC4((_DWORD *)*v1169);
          *((_QWORD *)v236 + 8) = v619;
          *((_QWORD *)v236 + 9) = 0;
          v620 = *((_DWORD *)v236 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v236 + 20) = 81;
          *((_DWORD *)v236 + 21) = v620;
          *(_OWORD *)(v236 + 88) = 0u;
          *(_OWORD *)(v236 + 104) = 0u;
          *((_DWORD *)v236 + 30) = 0;
          if (*(_QWORD *)v236)
          {
            **((_QWORD **)v236 + 2) = *((_QWORD *)v236 + 1);
            v1115 = *((_QWORD *)v236 + 1);
            if (v1115)
              *(_QWORD *)(v1115 + 16) = *((_QWORD *)v236 + 2);
          }
          *(_QWORD *)v236 = v1169;
          v622 = v1169 + 1;
          v621 = (_DWORD *)v1169[1];
          *((_QWORD *)v236 + 1) = v621;
          if (v621)
            *((_QWORD *)v621 + 2) = v236 + 8;
          v246 = v618 & 0x3F;
          *((_QWORD *)v236 + 2) = v622;
          *v622 = v236;
          if (*((_QWORD *)v236 + 4))
          {
            **((_QWORD **)v236 + 6) = *((_QWORD *)v236 + 5);
            v1116 = *((_QWORD *)v236 + 5);
            if (v1116)
              *(_QWORD *)(v1116 + 16) = *((_QWORD *)v236 + 6);
          }
          *((_QWORD *)v236 + 4) = v594;
LABEL_939:
          v604 = *((_QWORD *)v594 + 1);
          v603 = (llvm::Constant ***)((char *)v594 + 8);
          v602 = v604;
          *((_QWORD *)v236 + 5) = v604;
          if (v604)
            *(_QWORD *)(v602 + 16) = v236 + 40;
          *((_QWORD *)v236 + 6) = v603;
          *v603 = v595;
          goto LABEL_385;
        }
        v607 = *v9;
        v605 = *v7;
        goto LABEL_977;
      }
LABEL_955:
      v611 = *((_DWORD *)v607 + 5);
      if ((v611 & 0x40000000) != 0)
        v612 = (uint64_t **)*((_QWORD *)v607 - 1);
      else
        v612 = (uint64_t **)((char *)v607 - 32 * (v611 & 0x7FFFFFF));
      v614 = **v612;
      v615 = *(_DWORD *)(v614 + 8);
      if ((v615 & 0xFE) == 0x12)
        v615 = *(_DWORD *)(**(_QWORD **)(v614 + 16) + 8);
      if ((v1161 & 0xFE) == 0x12)
        v1161 = *(_DWORD *)(**((_QWORD **)v1179 + 2) + 8);
      if ((v1161 ^ v615) > 0xFF)
        goto LABEL_977;
      if ((v611 & 0x40000000) != 0)
        v616 = (llvm::Constant **)*((_QWORD *)v607 - 1);
      else
        v616 = (llvm::Constant **)((char *)v607 - 32 * (v611 & 0x7FFFFFF));
      v594 = *v616;
      if (v1179 == *(llvm::PHINode **)*v616)
        goto LABEL_971;
      v617 = *(uint64_t **)(a1 + 24);
      LOWORD(v1190) = 257;
      v613 = (llvm::Constant *)sub_1C4773E38(v617, 49, (unsigned __int8 *)v594, (uint64_t)v1179, (uint64_t)__p);
      goto LABEL_970;
    }
  }
LABEL_977:
  v623 = *(_QWORD *)(a1 + 24);
  v1206 = *((_WORD *)a2 + 9) & 0x3F;
  v1204 = 0;
  v1205 = 0;
  v1207 = &v1205;
  v624 = *(_QWORD *)(v605 + 8);
  if (!v624)
    goto LABEL_1040;
  if (*(_QWORD *)(v624 + 8))
    goto LABEL_1040;
  if (!sub_1C4B03864(&v1207, v605))
    goto LABEL_1040;
  __p[0] = &v1204;
  __p[1] = 0;
  if ((sub_1C4D89F84((uint64_t)__p, (unsigned __int8 *)v607) & 1) == 0)
    goto LABEL_1040;
  LODWORD(v1208) = 1;
  v1207 = 0;
  v625 = llvm::decomposeBitTestICmp(v605, (unsigned __int8 *)v607, &v1206, (uint64_t *)&v1205, (int8x8_t ***)&v1207, 1);
  v627 = v1205;
  if (!v625)
  {
    v643 = *(llvm::Type **)v1205;
    if ((*(_DWORD *)(*(_QWORD *)v1205 + 8) & 0xFE) == 0x12)
      v643 = (llvm::Type *)**((_QWORD **)v643 + 2);
    v644 = llvm::Type::getPrimitiveSizeInBits(v643);
    v645 = v1206;
    if (v1206 == 36)
    {
      if (sub_1C57EDD40(v1204))
      {
        v646 = *(llvm::ConstantInt ***)v1205;
        llvm::APInt::zext(v1204, v644, (uint64_t)__p);
        v648 = llvm::ConstantInt::get(v646, (llvm::Type *)__p, v647);
        if (LODWORD(__p[1]) >= 0x41 && __p[0])
          MEMORY[0x1CAA32F9C](__p[0], 0x1000C8000313F17);
        LOWORD(v1190) = 257;
        v649 = sub_1C4D89BCC(v623, v1205, (uint64_t)v648, (uint64_t)__p);
        v632 = (char *)operator new(0x80uLL);
        Not = (uint64_t ***)(v632 + 64);
        *((_DWORD *)v632 + 21) = *((_DWORD *)v632 + 21) & 0x38000000 | 2;
        *(_QWORD *)v632 = 0;
        *((_QWORD *)v632 + 1) = 0;
        *((_QWORD *)v632 + 4) = 0;
        v650 = (llvm::Value ***)(v632 + 32);
        *((_QWORD *)v632 + 2) = 0;
        *((_QWORD *)v632 + 3) = v632 + 64;
        *((_QWORD *)v632 + 5) = 0;
        *((_QWORD *)v632 + 6) = 0;
        *((_QWORD *)v632 + 7) = v632 + 64;
        LOWORD(v1190) = 257;
        sub_1C4774CC4(*(_DWORD **)v649);
        *((_QWORD *)v632 + 8) = v651;
        *((_QWORD *)v632 + 9) = 0;
        v652 = *((_DWORD *)v632 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v632 + 20) = 81;
        *((_DWORD *)v632 + 21) = v652;
        *(_OWORD *)(v632 + 88) = 0u;
        *(_OWORD *)(v632 + 104) = 0u;
        *((_DWORD *)v632 + 30) = 0;
        if (*(_QWORD *)v632)
        {
          **((_QWORD **)v632 + 2) = *((_QWORD *)v632 + 1);
          v1145 = *((_QWORD *)v632 + 1);
          if (v1145)
            *(_QWORD *)(v1145 + 16) = *((_QWORD *)v632 + 2);
        }
        *(_QWORD *)v632 = v649;
        v655 = *(_QWORD *)(v649 + 8);
        v654 = (_QWORD *)(v649 + 8);
        v653 = v655;
        *((_QWORD *)v632 + 1) = v655;
        if (v655)
          *(_QWORD *)(v653 + 16) = v632 + 8;
        *((_QWORD *)v632 + 2) = v654;
        *v654 = v632;
        if (*((_QWORD *)v632 + 4))
        {
          **((_QWORD **)v632 + 6) = *((_QWORD *)v632 + 5);
          v1146 = *((_QWORD *)v632 + 5);
          if (v1146)
            *(_QWORD *)(v1146 + 16) = *((_QWORD *)v632 + 6);
        }
        *v650 = v648;
        if (v648)
        {
          v658 = v648[1];
          v657 = (llvm::Value ****)(v648 + 1);
          v656 = v658;
          *((_QWORD *)v632 + 5) = v658;
          if (v658)
            *((_QWORD *)v656 + 2) = v632 + 40;
          *((_QWORD *)v632 + 6) = v657;
          *v657 = v650;
        }
        v642 = 33;
        goto LABEL_991;
      }
      v645 = v1206;
    }
    if (v645 != 34)
      goto LABEL_1035;
    v665 = (const void **)v1204;
    v666 = *((unsigned int *)v1204 + 2);
    v1201 = v666;
    if (v666 > 0x40)
    {
      v670 = ((unint64_t)(v666 + 63) >> 3) & 0x3FFFFFF8;
      v1200 = (llvm::Constant **)operator new[]();
      memcpy(v1200, *v665, v670);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1200);
      v669 = v1200;
      v671 = v1201;
      v1201 = 0;
      if (v671 > 0x40)
      {
        v675 = 0;
        v676 = 0;
        v677 = ((unint64_t)(v671 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          v678 = (uint8x8_t)vcnt_s8((int8x8_t)v1200[v675 / 8]);
          v678.i16[0] = vaddlv_u8(v678);
          v676 += v678.i32[0];
          v675 += 8;
        }
        while (v677 != v675);
        if (v1200)
          MEMORY[0x1CAA32F9C](v1200, 0x1000C8000313F17);
        if (v676 == 1)
          goto LABEL_1025;
        goto LABEL_1035;
      }
    }
    else
    {
      v667 = ~*(_QWORD *)v1204;
      if ((_DWORD)v666)
        v668 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v666;
      else
        v668 = 0;
      v669 = (llvm::Constant **)(v668 & v667);
      v1200 = (llvm::Constant **)(v668 & v667);
      v1201 = 0;
    }
    v672 = (uint8x8_t)vcnt_s8((int8x8_t)v669);
    v672.i16[0] = vaddlv_u8(v672);
    if (v672.u32[0] == 1)
    {
LABEL_1025:
      v673 = (const void **)v1204;
      v674 = *(llvm::ConstantInt ***)v1205;
      v1193 = *((_DWORD *)v1204 + 2);
      if (v1193 > 0x40)
      {
        __s1 = (void *)operator new[]();
        memcpy(__s1, *v673, (((unint64_t)v1193 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        __s1 = *(void **)v1204;
      }
      llvm::APInt::operator+=((uint64_t)&__s1, 1uLL);
      v1197 = v1193;
      v1196 = (uint64_t)__s1;
      v1193 = 0;
      llvm::APInt::zext((llvm::APInt *)&v1196, v644, (uint64_t)__p);
      v899 = llvm::ConstantInt::get(v674, (llvm::Type *)__p, v898);
      if (LODWORD(__p[1]) >= 0x41 && __p[0])
        MEMORY[0x1CAA32F9C](__p[0], 0x1000C8000313F17);
      if (v1197 >= 0x41 && v1196)
        MEMORY[0x1CAA32F9C](v1196, 0x1000C8000313F17);
      if (v1193 >= 0x41 && __s1)
        MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
      LOWORD(v1190) = 257;
      v900 = sub_1C4D89BCC(v623, v1205, (uint64_t)v899, (uint64_t)__p);
      v632 = (char *)operator new(0x80uLL);
      Not = (uint64_t ***)(v632 + 64);
      *((_DWORD *)v632 + 21) = *((_DWORD *)v632 + 21) & 0x38000000 | 2;
      *(_QWORD *)v632 = 0;
      *((_QWORD *)v632 + 1) = 0;
      *((_QWORD *)v632 + 4) = 0;
      v901 = (llvm::Value ***)(v632 + 32);
      *((_QWORD *)v632 + 2) = 0;
      *((_QWORD *)v632 + 3) = v632 + 64;
      *((_QWORD *)v632 + 5) = 0;
      *((_QWORD *)v632 + 6) = 0;
      *((_QWORD *)v632 + 7) = v632 + 64;
      LOWORD(v1190) = 257;
      sub_1C4774CC4(*(_DWORD **)v900);
      *((_QWORD *)v632 + 8) = v902;
      *((_QWORD *)v632 + 9) = 0;
      v903 = *((_DWORD *)v632 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v632 + 20) = 81;
      *((_DWORD *)v632 + 21) = v903;
      *(_OWORD *)(v632 + 88) = 0u;
      *(_OWORD *)(v632 + 104) = 0u;
      *((_DWORD *)v632 + 30) = 0;
      if (*(_QWORD *)v632)
      {
        **((_QWORD **)v632 + 2) = *((_QWORD *)v632 + 1);
        v1150 = *((_QWORD *)v632 + 1);
        if (v1150)
          *(_QWORD *)(v1150 + 16) = *((_QWORD *)v632 + 2);
      }
      *(_QWORD *)v632 = v900;
      v906 = *(_QWORD *)(v900 + 8);
      v905 = (_QWORD *)(v900 + 8);
      v904 = v906;
      *((_QWORD *)v632 + 1) = v906;
      if (v906)
        *(_QWORD *)(v904 + 16) = v632 + 8;
      *((_QWORD *)v632 + 2) = v905;
      *v905 = v632;
      if (*((_QWORD *)v632 + 4))
      {
        **((_QWORD **)v632 + 6) = *((_QWORD *)v632 + 5);
        v1151 = *((_QWORD *)v632 + 5);
        if (v1151)
          *(_QWORD *)(v1151 + 16) = *((_QWORD *)v632 + 6);
      }
      *v901 = v899;
      if (v899)
      {
        v909 = v899[1];
        v908 = (llvm::Value ****)(v899 + 1);
        v907 = v909;
        *((_QWORD *)v632 + 5) = v909;
        if (v909)
          *((_QWORD *)v907 + 2) = v632 + 40;
        *((_QWORD *)v632 + 6) = v908;
        *v908 = v901;
      }
      v642 = 32;
      goto LABEL_991;
    }
LABEL_1035:
    Not = 0;
    goto LABEL_1036;
  }
  LOWORD(v1190) = 257;
  v628 = llvm::ConstantInt::get(*(llvm::ConstantInt ***)v1205, (llvm::Type *)&v1207, v626);
  v629 = sub_1C4D89BCC(v623, v627, (uint64_t)v628, (uint64_t)__p);
  v631 = llvm::Constant::getNullValue(*(llvm::Constant **)v1205, v630);
  v632 = (char *)operator new(0x80uLL);
  Not = (uint64_t ***)(v632 + 64);
  *((_DWORD *)v632 + 21) = *((_DWORD *)v632 + 21) & 0x38000000 | 2;
  *(_QWORD *)v632 = 0;
  *((_QWORD *)v632 + 1) = 0;
  *((_QWORD *)v632 + 2) = 0;
  *((_QWORD *)v632 + 3) = v632 + 64;
  *((_QWORD *)v632 + 4) = 0;
  v633 = (llvm::Value ***)(v632 + 32);
  *((_QWORD *)v632 + 5) = 0;
  *((_QWORD *)v632 + 6) = 0;
  *((_QWORD *)v632 + 7) = v632 + 64;
  v1180 = v1206;
  LOWORD(v1190) = 257;
  sub_1C4774CC4(*(_DWORD **)v629);
  *((_QWORD *)v632 + 8) = v634;
  *((_QWORD *)v632 + 9) = 0;
  v635 = *((_DWORD *)v632 + 21) & 0xC0000000 | 2;
  *((_DWORD *)v632 + 20) = 81;
  *((_DWORD *)v632 + 21) = v635;
  *(_OWORD *)(v632 + 88) = 0u;
  *(_OWORD *)(v632 + 104) = 0u;
  *((_DWORD *)v632 + 30) = 0;
  if (*(_QWORD *)v632)
  {
    **((_QWORD **)v632 + 2) = *((_QWORD *)v632 + 1);
    v1126 = *((_QWORD *)v632 + 1);
    if (v1126)
      *(_QWORD *)(v1126 + 16) = *((_QWORD *)v632 + 2);
  }
  *(_QWORD *)v632 = v629;
  v638 = *(_QWORD *)(v629 + 8);
  v637 = (_QWORD *)(v629 + 8);
  v636 = v638;
  *((_QWORD *)v632 + 1) = v638;
  if (v638)
    *(_QWORD *)(v636 + 16) = v632 + 8;
  *((_QWORD *)v632 + 2) = v637;
  *v637 = v632;
  if (*((_QWORD *)v632 + 4))
  {
    **((_QWORD **)v632 + 6) = *((_QWORD *)v632 + 5);
    v1127 = *((_QWORD *)v632 + 5);
    if (v1127)
      *(_QWORD *)(v1127 + 16) = *((_QWORD *)v632 + 6);
  }
  *v633 = v631;
  if (v631)
  {
    v641 = v631[1];
    v640 = (llvm::Value ****)(v631 + 1);
    v639 = v641;
    *((_QWORD *)v632 + 5) = v641;
    if (v641)
      *((_QWORD *)v639 + 2) = v632 + 40;
    *((_QWORD *)v632 + 6) = v640;
    *v640 = v633;
  }
  v642 = v1180;
LABEL_991:
  *((_WORD *)v632 + 41) = v642;
  llvm::Value::setName(Not, (uint64_t)__p);
LABEL_1036:
  if (v1208 >= 0x41 && v1207)
    MEMORY[0x1CAA32F9C](v1207, 0x1000C8000313F17);
  if (Not)
    return (llvm::UndefValue **)Not;
LABEL_1040:
  v679 = *v7;
  if (!*v7)
    goto LABEL_1071;
  v680 = *(uint64_t **)(a1 + 24);
  v681 = *(unsigned __int8 *)(v679 + 16);
  v682 = v681 - 28;
  v683 = v681 - 28;
  if (v681 <= 0x1B)
    v683 = *(unsigned __int16 *)(v679 + 18);
  if (v683 != 39
    || ((v684 = *(_DWORD *)(v679 + 20), (v684 & 0x40000000) != 0)
      ? (v685 = *(llvm::Type ****)(v679 - 8))
      : (v685 = (llvm::Type ***)(v679 - 32 * (v684 & 0x7FFFFFF))),
        (v686 = *v685) == 0))
  {
    if (v681 <= 0x1B)
      v682 = *(unsigned __int16 *)(v679 + 18);
    if (v682 != 40)
      goto LABEL_1071;
    v687 = *(_DWORD *)(v679 + 20);
    v688 = (v687 & 0x40000000) != 0 ? *(llvm::Type ****)(v679 - 8) : (llvm::Type ***)(v679 - 32 * (v687 & 0x7FFFFFF));
    v686 = *v688;
    if (!*v688)
      goto LABEL_1071;
  }
  v1181 = (*((_WORD *)a2 + 9) & 0x3E) - 38;
  v689 = (uint64_t)*(a2 - 4);
  v690 = *(unsigned __int8 *)(v689 + 16);
  if (!v689 || (v1157 = v690 - 28, v690 < 0x1C) || v690 - 79 < 0xFFFFFFF3)
  {
    if (v690 > 0x14)
      goto LABEL_1071;
    v1171 = v686;
    v797 = **(llvm::Constant ***)(v679 - 32);
    v798 = sub_1C537D3B8((llvm *)0x26, v689, v797, 0);
    v799 = *(unsigned __int8 *)(v679 + 16) - 28;
    v800 = v798;
    if (llvm::ConstantExpr::getCast(v799) == v689)
    {
      if ((*((_WORD *)a2 + 9) & 0x3E) == 0x20)
      {
        v236 = (char *)operator new(0x80uLL);
        Not = (uint64_t ***)(v236 + 64);
        *((_DWORD *)v236 + 21) = *((_DWORD *)v236 + 21) & 0x38000000 | 2;
        *(_QWORD *)v236 = 0;
        *((_QWORD *)v236 + 1) = 0;
        *((_QWORD *)v236 + 2) = 0;
        *((_QWORD *)v236 + 3) = v236 + 64;
        *((_QWORD *)v236 + 4) = 0;
        v843 = (llvm::UndefValue **)(v236 + 32);
        *((_QWORD *)v236 + 5) = 0;
        *((_QWORD *)v236 + 6) = 0;
        *((_QWORD *)v236 + 7) = v236 + 64;
        v844 = *((_WORD *)a2 + 9);
        LOWORD(v1190) = 257;
        sub_1C4774CC4(*v1171);
        *((_QWORD *)v236 + 8) = v845;
        *((_QWORD *)v236 + 9) = 0;
        v846 = *((_DWORD *)v236 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v236 + 20) = 81;
        *((_DWORD *)v236 + 21) = v846;
        *(_OWORD *)(v236 + 88) = 0u;
        *(_OWORD *)(v236 + 104) = 0u;
        *((_DWORD *)v236 + 30) = 0;
        if (*(_QWORD *)v236)
        {
          **((_QWORD **)v236 + 2) = *((_QWORD *)v236 + 1);
          v1136 = *((_QWORD *)v236 + 1);
          if (v1136)
            *(_QWORD *)(v1136 + 16) = *((_QWORD *)v236 + 2);
        }
        *(_QWORD *)v236 = v1171;
        v848 = v1171 + 1;
        v847 = v1171[1];
        *((_QWORD *)v236 + 1) = v847;
        if (v847)
          *((_QWORD *)v847 + 2) = v236 + 8;
        v246 = v844 & 0x3F;
        *((_QWORD *)v236 + 2) = v848;
        *v848 = v236;
        if (*((_QWORD *)v236 + 4))
        {
          **((_QWORD **)v236 + 6) = *((_QWORD *)v236 + 5);
          v1137 = *((_QWORD *)v236 + 5);
          if (v1137)
            *(_QWORD *)(v1137 + 16) = *((_QWORD *)v236 + 6);
        }
        *v843 = v800;
        if (v800)
        {
          v851 = *((_QWORD *)v800 + 1);
          v850 = (llvm::UndefValue ***)((char *)v800 + 8);
          v849 = v851;
          *((_QWORD *)v236 + 5) = v851;
          if (v851)
            *(_QWORD *)(v849 + 16) = v236 + 40;
          *((_QWORD *)v236 + 6) = v850;
          *v850 = v843;
        }
        goto LABEL_385;
      }
      v862 = (char *)operator new(0x80uLL);
      Not = (uint64_t ***)(v862 + 64);
      *((_DWORD *)v862 + 21) = *((_DWORD *)v862 + 21) & 0x38000000 | 2;
      *(_QWORD *)v862 = 0;
      *((_QWORD *)v862 + 1) = 0;
      *((_QWORD *)v862 + 2) = 0;
      *((_QWORD *)v862 + 3) = v862 + 64;
      *((_QWORD *)v862 + 4) = 0;
      v863 = (llvm::UndefValue **)(v862 + 32);
      *((_QWORD *)v862 + 5) = 0;
      *((_QWORD *)v862 + 6) = 0;
      *((_QWORD *)v862 + 7) = v862 + 64;
      v864 = *((_WORD *)a2 + 9) & 0x3F;
      if ((v681 != 68 || v1181 > 3) && (v864 - 32) >= 6)
        __asm { BR              X10 }
      LOWORD(v1190) = 257;
      sub_1C4774CC4(*v1171);
      *((_QWORD *)v862 + 8) = v865;
      *((_QWORD *)v862 + 9) = 0;
      v866 = *((_DWORD *)v862 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v862 + 20) = 81;
      *((_DWORD *)v862 + 21) = v866;
      *(_OWORD *)(v862 + 88) = 0u;
      *(_OWORD *)(v862 + 104) = 0u;
      *((_DWORD *)v862 + 30) = 0;
      if (*(_QWORD *)v862)
      {
        **((_QWORD **)v862 + 2) = *((_QWORD *)v862 + 1);
        v1138 = *((_QWORD *)v862 + 1);
        if (v1138)
          *(_QWORD *)(v1138 + 16) = *((_QWORD *)v862 + 2);
      }
      *(_QWORD *)v862 = v1171;
      v868 = v1171 + 1;
      v867 = v1171[1];
      *((_QWORD *)v862 + 1) = v867;
      if (v867)
        *((_QWORD *)v867 + 2) = v862 + 8;
      *((_QWORD *)v862 + 2) = v868;
      *v868 = v862;
      if (*((_QWORD *)v862 + 4))
      {
        **((_QWORD **)v862 + 6) = *((_QWORD *)v862 + 5);
        v1139 = *((_QWORD *)v862 + 5);
        if (v1139)
          *(_QWORD *)(v1139 + 16) = *((_QWORD *)v862 + 6);
      }
      *v863 = v800;
      if (v800)
      {
        v871 = *((_QWORD *)v800 + 1);
        v870 = (llvm::UndefValue ***)((char *)v800 + 8);
        v869 = v871;
        *((_QWORD *)v862 + 5) = v871;
        if (v871)
          *(_QWORD *)(v869 + 16) = v862 + 40;
        *((_QWORD *)v862 + 6) = v870;
        *v870 = v863;
      }
      goto LABEL_1379;
    }
    if (v681 != 68 || v1181 < 4 || *(_BYTE *)(v689 + 16) != 16)
      goto LABEL_1071;
    v801 = *((_WORD *)a2 + 9) & 0x3F;
    v179 = (char *)operator new(0x80uLL);
    Not = (uint64_t ***)(v179 + 64);
    *((_DWORD *)v179 + 21) = *((_DWORD *)v179 + 21) & 0x38000000 | 2;
    *(_QWORD *)v179 = 0;
    *((_QWORD *)v179 + 1) = 0;
    *((_QWORD *)v179 + 4) = 0;
    v489 = v179 + 32;
    *((_QWORD *)v179 + 2) = 0;
    *((_QWORD *)v179 + 3) = v179 + 64;
    *((_QWORD *)v179 + 5) = 0;
    *((_QWORD *)v179 + 6) = 0;
    *((_QWORD *)v179 + 7) = v179 + 64;
    v803 = v179 + 88;
    if (v801 != 36)
    {
      v491 = llvm::Constant::getNullValue(v797, v802);
      LOWORD(v1190) = 257;
      sub_1C4774CC4(*v1171);
      *((_QWORD *)v179 + 8) = v886;
      *((_QWORD *)v179 + 9) = 0;
      v887 = *((_DWORD *)v179 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v179 + 20) = 81;
      *((_DWORD *)v179 + 21) = v887;
      *v803 = 0u;
      *(_OWORD *)(v179 + 104) = 0u;
      *((_DWORD *)v179 + 30) = 0;
      if (*(_QWORD *)v179)
      {
        **((_QWORD **)v179 + 2) = *((_QWORD *)v179 + 1);
        v1148 = *((_QWORD *)v179 + 1);
        if (v1148)
          *(_QWORD *)(v1148 + 16) = *((_QWORD *)v179 + 2);
      }
      *(_QWORD *)v179 = v1171;
      v889 = v1171 + 1;
      v888 = v1171[1];
      *((_QWORD *)v179 + 1) = v888;
      if (v888)
        *((_QWORD *)v888 + 2) = v179 + 8;
      *((_QWORD *)v179 + 2) = v889;
      *v889 = v179;
      goto LABEL_811;
    }
    v502 = llvm::Constant::getAllOnesValue(v797, v802);
    LOWORD(v1190) = 257;
    sub_1C4774CC4(*v1171);
    *((_QWORD *)v179 + 8) = v804;
    *((_QWORD *)v179 + 9) = 0;
    v805 = *((_DWORD *)v179 + 21) & 0xC0000000 | 2;
    *((_DWORD *)v179 + 20) = 81;
    *((_DWORD *)v179 + 21) = v805;
    *v803 = 0u;
    *(_OWORD *)(v179 + 104) = 0u;
    *((_DWORD *)v179 + 30) = 0;
    if (*(_QWORD *)v179)
    {
      **((_QWORD **)v179 + 2) = *((_QWORD *)v179 + 1);
      v1147 = *((_QWORD *)v179 + 1);
      if (v1147)
        *(_QWORD *)(v1147 + 16) = *((_QWORD *)v179 + 2);
    }
    *(_QWORD *)v179 = v1171;
    v807 = v1171 + 1;
    v806 = v1171[1];
    *((_QWORD *)v179 + 1) = v806;
    if (v806)
      *((_QWORD *)v806 + 2) = v179 + 8;
    *((_QWORD *)v179 + 2) = v807;
    *v807 = v179;
LABEL_1223:
    if (*((_QWORD *)v179 + 4))
    {
      **((_QWORD **)v179 + 6) = *((_QWORD *)v179 + 5);
      v1125 = *((_QWORD *)v179 + 5);
      if (v1125)
        *(_QWORD *)(v1125 + 16) = *((_QWORD *)v179 + 6);
    }
    *v489 = v502;
    if (v502)
    {
      v810 = *((_QWORD *)v502 + 1);
      v809 = (_QWORD *)((char *)v502 + 8);
      v808 = v810;
      *((_QWORD *)v179 + 5) = v810;
      if (v810)
        *(_QWORD *)(v808 + 16) = v179 + 40;
      *((_QWORD *)v179 + 6) = v809;
      *v809 = v489;
    }
    goto LABEL_309;
  }
  if (v681 == v690)
  {
    v1162 = *(unsigned __int8 **)(v689 - 32);
    v1170 = (unsigned __int8 *)v686;
    v691 = *(_QWORD *)v1162;
    v1155 = *v686;
    if (*v686 == *(llvm::Type **)v1162)
    {
LABEL_1359:
      if ((*((_WORD *)a2 + 9) & 0x3E) == 0x20)
      {
        v236 = (char *)operator new(0x80uLL);
        Not = (uint64_t ***)(v236 + 64);
        *((_DWORD *)v236 + 21) = *((_DWORD *)v236 + 21) & 0x38000000 | 2;
        *(_QWORD *)v236 = 0;
        *((_QWORD *)v236 + 1) = 0;
        *((_QWORD *)v236 + 2) = 0;
        *((_QWORD *)v236 + 3) = v236 + 64;
        *((_QWORD *)v236 + 4) = 0;
        v873 = (unsigned __int8 **)(v236 + 32);
        *((_QWORD *)v236 + 5) = 0;
        *((_QWORD *)v236 + 6) = 0;
        *((_QWORD *)v236 + 7) = v236 + 64;
        v874 = *((_WORD *)a2 + 9);
        LOWORD(v1190) = 257;
        sub_1C4774CC4(*(_DWORD **)v1170);
        *((_QWORD *)v236 + 8) = v875;
        *((_QWORD *)v236 + 9) = 0;
        v876 = *((_DWORD *)v236 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v236 + 20) = 81;
        *((_DWORD *)v236 + 21) = v876;
        *(_OWORD *)(v236 + 88) = 0u;
        *(_OWORD *)(v236 + 104) = 0u;
        *((_DWORD *)v236 + 30) = 0;
        if (*(_QWORD *)v236)
        {
          **((_QWORD **)v236 + 2) = *((_QWORD *)v236 + 1);
          v1131 = *((_QWORD *)v236 + 1);
          if (v1131)
            *(_QWORD *)(v1131 + 16) = *((_QWORD *)v236 + 2);
        }
        *(_QWORD *)v236 = v1170;
        v878 = v1170 + 8;
        v877 = *((_QWORD *)v1170 + 1);
        *((_QWORD *)v236 + 1) = v877;
        if (v877)
          *(_QWORD *)(v877 + 16) = v236 + 8;
        v246 = v874 & 0x3F;
        *((_QWORD *)v236 + 2) = v878;
        *v878 = v236;
        if (*((_QWORD *)v236 + 4))
        {
          **((_QWORD **)v236 + 6) = *((_QWORD *)v236 + 5);
          v1132 = *((_QWORD *)v236 + 5);
          if (v1132)
            *(_QWORD *)(v1132 + 16) = *((_QWORD *)v236 + 6);
        }
        *v873 = v1162;
        if (v1162)
        {
          v879 = *((_QWORD *)v1162 + 1);
          v1163 = (unsigned __int8 ***)(v1162 + 8);
          *((_QWORD *)v236 + 5) = v879;
          if (v879)
            *(_QWORD *)(v879 + 16) = v236 + 40;
          *((_QWORD *)v236 + 6) = v1163;
          *v1163 = v873;
        }
        goto LABEL_385;
      }
      v862 = (char *)operator new(0x80uLL);
      Not = (uint64_t ***)(v862 + 64);
      *((_DWORD *)v862 + 21) = *((_DWORD *)v862 + 21) & 0x38000000 | 2;
      *(_QWORD *)v862 = 0;
      *((_QWORD *)v862 + 1) = 0;
      *((_QWORD *)v862 + 2) = 0;
      *((_QWORD *)v862 + 3) = v862 + 64;
      *((_QWORD *)v862 + 4) = 0;
      v880 = (unsigned __int8 **)(v862 + 32);
      *((_QWORD *)v862 + 5) = 0;
      *((_QWORD *)v862 + 6) = 0;
      *((_QWORD *)v862 + 7) = v862 + 64;
      v864 = *((_WORD *)a2 + 9) & 0x3F;
      if ((v681 != 68 || v1181 > 3) && (v864 - 32) >= 6)
        __asm { BR              X10 }
      LOWORD(v1190) = 257;
      sub_1C4774CC4(*(_DWORD **)v1170);
      *((_QWORD *)v862 + 8) = v881;
      *((_QWORD *)v862 + 9) = 0;
      v882 = *((_DWORD *)v862 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v862 + 20) = 81;
      *((_DWORD *)v862 + 21) = v882;
      *(_OWORD *)(v862 + 88) = 0u;
      *(_OWORD *)(v862 + 104) = 0u;
      *((_DWORD *)v862 + 30) = 0;
      if (*(_QWORD *)v862)
      {
        **((_QWORD **)v862 + 2) = *((_QWORD *)v862 + 1);
        v1133 = *((_QWORD *)v862 + 1);
        if (v1133)
          *(_QWORD *)(v1133 + 16) = *((_QWORD *)v862 + 2);
      }
      *(_QWORD *)v862 = v1170;
      v884 = v1170 + 8;
      v883 = *((_QWORD *)v1170 + 1);
      *((_QWORD *)v862 + 1) = v883;
      if (v883)
        *(_QWORD *)(v883 + 16) = v862 + 8;
      *((_QWORD *)v862 + 2) = v884;
      *v884 = v862;
      if (*((_QWORD *)v862 + 4))
      {
        **((_QWORD **)v862 + 6) = *((_QWORD *)v862 + 5);
        v1134 = *((_QWORD *)v862 + 5);
        if (v1134)
          *(_QWORD *)(v1134 + 16) = *((_QWORD *)v862 + 6);
      }
      *v880 = v1162;
      if (v1162)
      {
        v885 = *((_QWORD *)v1162 + 1);
        v1164 = (unsigned __int8 ***)(v1162 + 8);
        *((_QWORD *)v862 + 5) = v885;
        if (v885)
          *(_QWORD *)(v885 + 16) = v862 + 40;
        *((_QWORD *)v862 + 6) = v1164;
        *v1164 = v880;
      }
LABEL_1379:
      *((_WORD *)v862 + 41) = v864;
      goto LABEL_386;
    }
    v692 = *(_QWORD *)(v679 + 8);
    if (v692 && !*(_QWORD *)(v692 + 8) || (v693 = *(_QWORD *)(v689 + 8)) != 0 && !*(_QWORD *)(v693 + 8))
    {
      v694 = *v686;
      if ((*((_DWORD *)v1155 + 2) & 0xFE) == 0x12)
        v694 = (llvm::Type *)**((_QWORD **)v1155 + 2);
      v695 = llvm::Type::getPrimitiveSizeInBits(v694);
      v696 = (llvm::Type *)v691;
      if ((*(_DWORD *)(v691 + 8) & 0xFE) == 0x12)
        v696 = **(llvm::Type ***)(v691 + 16);
      v697 = llvm::Type::getPrimitiveSizeInBits(v696);
      if (v695 < v697)
      {
        LOWORD(v1190) = 257;
        v1170 = sub_1C4773E38(v680, v1157, v1170, v691, (uint64_t)__p);
        goto LABEL_1359;
      }
      if (v697 < v695)
      {
        LOWORD(v1190) = 257;
        v1162 = sub_1C4773E38(v680, v1157, v1162, (uint64_t)v1155, (uint64_t)__p);
        goto LABEL_1359;
      }
    }
  }
LABEL_1071:
  v698 = *((_WORD *)a2 + 9) & 0x3F;
  v699 = (uint64_t)*(a2 - 8);
  v700 = (uint64_t)*(a2 - 4);
  v701 = *(unsigned __int8 *)(v700 + 16);
  if (v701 != 85)
  {
    if (v701 == 84)
    {
      v702 = *(_QWORD *)(v700 - 32);
      if (v702)
      {
        if (!*(_BYTE *)(v702 + 16)
          && *(_QWORD *)(v702 + 24) == *(_QWORD *)(v700 + 72)
          && (*(_BYTE *)(v702 + 33) & 0x20) != 0
          && *(_DWORD *)(v702 + 36) == 275
          && ((v703 = (_QWORD *)(v700 - 32 * (*(_DWORD *)(v700 + 20) & 0x7FFFFFF)), *v703 == v699) || v703[4] == v699)
          || !*(_BYTE *)(v702 + 16)
          && *(_QWORD *)(v702 + 24) == *(_QWORD *)(v700 + 72)
          && (*(_BYTE *)(v702 + 33) & 0x20) != 0
          && *(_DWORD *)(v702 + 36) == 274
          && ((v704 = (_QWORD *)(v700 - 32 * (*(_DWORD *)(v700 + 20) & 0x7FFFFFF)), *v704 == v699) || v704[4] == v699)
          || !*(_BYTE *)(v702 + 16)
          && *(_QWORD *)(v702 + 24) == *(_QWORD *)(v700 + 72)
          && (*(_BYTE *)(v702 + 33) & 0x20) != 0
          && *(_DWORD *)(v702 + 36) == 306
          && ((v705 = (_QWORD *)(v700 - 32 * (*(_DWORD *)(v700 + 20) & 0x7FFFFFF)), *v705 == v699) || v705[4] == v699)
          || !*(_BYTE *)(v702 + 16)
          && *(_QWORD *)(v702 + 24) == *(_QWORD *)(v700 + 72)
          && (*(_BYTE *)(v702 + 33) & 0x20) != 0
          && *(_DWORD *)(v702 + 36) == 305
          && ((v706 = (_QWORD *)(v700 - 32 * (*(_DWORD *)(v700 + 20) & 0x7FFFFFF)), *v706 == v699) || v706[4] == v699))
        {
LABEL_1204:
          __asm { BR              X10 }
        }
      }
    }
    goto LABEL_1146;
  }
  v707 = *(_QWORD *)(v700 - 96);
  if (!v707 || *(_BYTE *)(v707 + 16) != 81)
    goto LABEL_1146;
  v708 = *(_QWORD *)(v700 - 64);
  v709 = *(_QWORD *)(v700 - 32);
  v710 = *(_QWORD *)(v707 - 64);
  v711 = *(_QWORD *)(v707 - 32);
  v712 = v708 == v710 && v709 == v711;
  if (v712 || (v708 == v711 ? (v713 = v709 == v710) : (v713 = 0), v713))
  {
    v714 = *(_WORD *)(v707 + 18) & 0x3E;
    if (v708 == v710)
    {
      if (v714 != 40)
        goto LABEL_1116;
    }
    else if (v714 != 38)
    {
      goto LABEL_1116;
    }
    if (v710 == v699 || v711 == v699)
      goto LABEL_1204;
  }
LABEL_1116:
  v715 = *(_QWORD *)(v700 - 64);
  v716 = *(_QWORD *)(v700 - 32);
  v717 = *(_QWORD *)(v707 - 64);
  v718 = *(_QWORD *)(v707 - 32);
  if (v715 == v717 && v716 == v718 || v715 == v718 && v716 == v717)
  {
    v719 = *(_WORD *)(v707 + 18) & 0x3E;
    if (v715 == v717)
    {
      if (v719 != 38)
        goto LABEL_1126;
    }
    else if (v719 != 40)
    {
      goto LABEL_1126;
    }
    if (v717 == v699 || v718 == v699)
      goto LABEL_1204;
  }
LABEL_1126:
  v720 = *(_QWORD *)(v700 - 64);
  v721 = *(_QWORD *)(v700 - 32);
  v722 = *(_QWORD *)(v707 - 64);
  v723 = *(_QWORD *)(v707 - 32);
  if (v720 == v722 && v721 == v723 || v720 == v723 && v721 == v722)
  {
    v724 = *(_WORD *)(v707 + 18) & 0x3E;
    if (v720 == v722)
    {
      if (v724 != 36)
        goto LABEL_1136;
    }
    else if (v724 != 34)
    {
      goto LABEL_1136;
    }
    if (v722 == v699 || v723 == v699)
      goto LABEL_1204;
  }
LABEL_1136:
  v725 = *(_QWORD *)(v700 - 64);
  v726 = *(_QWORD *)(v700 - 32);
  v727 = *(_QWORD *)(v707 - 64);
  v728 = *(_QWORD *)(v707 - 32);
  if (v725 == v727 && v726 == v728 || v725 == v728 && v726 == v727)
  {
    v729 = *(_WORD *)(v707 + 18) & 0x3E;
    if (v725 == v727)
    {
      if (v729 != 34)
        goto LABEL_1146;
    }
    else if (v729 != 36)
    {
      goto LABEL_1146;
    }
    if (v727 == v699 || v728 == v699)
      goto LABEL_1204;
  }
LABEL_1146:
  v730 = (_DWORD **)*(a2 - 4);
  v731 = (uint64_t)*(a2 - 8);
  v1207 = 0;
  __p[0] = v730;
  __p[1] = &v1207;
  if (sub_1C57A2D84((uint64_t)__p, v699))
  {
    switch((int)v698)
    {
      case ' ':
      case '\'':
        v179 = (char *)operator new(0x80uLL);
        Not = (uint64_t ***)(v179 + 64);
        *((_DWORD *)v179 + 21) = *((_DWORD *)v179 + 21) & 0x38000000 | 2;
        *(_QWORD *)v179 = 0;
        *((_QWORD *)v179 + 1) = 0;
        *((_QWORD *)v179 + 2) = 0;
        *((_QWORD *)v179 + 3) = v179 + 64;
        *((_QWORD *)v179 + 4) = 0;
        v732 = (int8x8_t *)(v179 + 32);
        *((_QWORD *)v179 + 5) = 0;
        *((_QWORD *)v179 + 6) = 0;
        *((_QWORD *)v179 + 7) = v179 + 64;
        v733 = (int8x8_t)v1207;
        LOWORD(v1190) = 257;
        sub_1C4774CC4(*v730);
        *((_QWORD *)v179 + 8) = v734;
        *((_QWORD *)v179 + 9) = 0;
        v735 = *((_DWORD *)v179 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v179 + 20) = 81;
        *((_DWORD *)v179 + 21) = v735;
        *(_OWORD *)(v179 + 88) = 0u;
        *(_OWORD *)(v179 + 104) = 0u;
        *((_DWORD *)v179 + 30) = 0;
        if (*(_QWORD *)v179)
        {
          **((_QWORD **)v179 + 2) = *((_QWORD *)v179 + 1);
          v1100 = *((_QWORD *)v179 + 1);
          if (v1100)
            *(_QWORD *)(v1100 + 16) = *((_QWORD *)v179 + 2);
        }
        *(_QWORD *)v179 = v730;
        v738 = v730[1];
        v737 = v730 + 1;
        v736 = v738;
        *((_QWORD *)v179 + 1) = v738;
        if (v738)
          *((_QWORD *)v736 + 2) = v179 + 8;
        *((_QWORD *)v179 + 2) = v737;
        *v737 = v179;
        if (*((_QWORD *)v179 + 4))
        {
          **((_QWORD **)v179 + 6) = *((_QWORD *)v179 + 5);
          v1101 = *((_QWORD *)v179 + 5);
          if (v1101)
            *(_QWORD *)(v1101 + 16) = *((_QWORD *)v179 + 6);
        }
        *v732 = v733;
        if (v733)
        {
          v741 = *(_QWORD *)(*(_QWORD *)&v733 + 8);
          v740 = (int8x8_t **)(*(_QWORD *)&v733 + 8);
          v739 = v741;
          *((_QWORD *)v179 + 5) = v741;
          if (v741)
            *(_QWORD *)(v739 + 16) = v179 + 40;
          *((_QWORD *)v179 + 6) = v740;
          *v740 = v732;
        }
        v192 = 41;
        goto LABEL_310;
      case '!':
      case '(':
        v179 = (char *)operator new(0x80uLL);
        Not = (uint64_t ***)(v179 + 64);
        *((_DWORD *)v179 + 21) = *((_DWORD *)v179 + 21) & 0x38000000 | 2;
        *(_QWORD *)v179 = 0;
        *((_QWORD *)v179 + 1) = 0;
        *((_QWORD *)v179 + 2) = 0;
        *((_QWORD *)v179 + 3) = v179 + 64;
        *((_QWORD *)v179 + 4) = 0;
        v180 = (llvm::Constant **)(v179 + 32);
        *((_QWORD *)v179 + 5) = 0;
        *((_QWORD *)v179 + 6) = 0;
        *((_QWORD *)v179 + 7) = v179 + 64;
        v183 = (llvm::Constant *)v1207;
        LOWORD(v1190) = 257;
        sub_1C4774CC4(*v730);
        *((_QWORD *)v179 + 8) = v762;
        *((_QWORD *)v179 + 9) = 0;
        v763 = *((_DWORD *)v179 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v179 + 20) = 81;
        *((_DWORD *)v179 + 21) = v763;
        *(_OWORD *)(v179 + 88) = 0u;
        *(_OWORD *)(v179 + 104) = 0u;
        *((_DWORD *)v179 + 30) = 0;
        if (*(_QWORD *)v179)
        {
          **((_QWORD **)v179 + 2) = *((_QWORD *)v179 + 1);
          v1102 = *((_QWORD *)v179 + 1);
          if (v1102)
            *(_QWORD *)(v1102 + 16) = *((_QWORD *)v179 + 2);
        }
        *(_QWORD *)v179 = v730;
        v766 = v730[1];
        v765 = v730 + 1;
        v764 = v766;
        *((_QWORD *)v179 + 1) = v766;
        if (v766)
          *((_QWORD *)v764 + 2) = v179 + 8;
        *((_QWORD *)v179 + 2) = v765;
        *v765 = v179;
        goto LABEL_304;
      default:
        goto LABEL_1238;
    }
  }
  __p[0] = v730;
  __p[1] = &v1207;
  if (sub_1C57A2C64((uint64_t)__p, v731))
  {
    switch((int)v698)
    {
      case ' ':
      case ')':
        v179 = (char *)operator new(0x80uLL);
        Not = (uint64_t ***)(v179 + 64);
        *((_DWORD *)v179 + 21) = *((_DWORD *)v179 + 21) & 0x38000000 | 2;
        *(_QWORD *)v179 = 0;
        *((_QWORD *)v179 + 1) = 0;
        *((_QWORD *)v179 + 2) = 0;
        *((_QWORD *)v179 + 3) = v179 + 64;
        *((_QWORD *)v179 + 4) = 0;
        v742 = (int8x8_t *)(v179 + 32);
        *((_QWORD *)v179 + 5) = 0;
        *((_QWORD *)v179 + 6) = 0;
        *((_QWORD *)v179 + 7) = v179 + 64;
        v743 = (int8x8_t)v1207;
        LOWORD(v1190) = 257;
        sub_1C4774CC4(*v730);
        *((_QWORD *)v179 + 8) = v744;
        *((_QWORD *)v179 + 9) = 0;
        v745 = *((_DWORD *)v179 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v179 + 20) = 81;
        *((_DWORD *)v179 + 21) = v745;
        *(_OWORD *)(v179 + 88) = 0u;
        *(_OWORD *)(v179 + 104) = 0u;
        *((_DWORD *)v179 + 30) = 0;
        if (*(_QWORD *)v179)
        {
          **((_QWORD **)v179 + 2) = *((_QWORD *)v179 + 1);
          v1103 = *((_QWORD *)v179 + 1);
          if (v1103)
            *(_QWORD *)(v1103 + 16) = *((_QWORD *)v179 + 2);
        }
        *(_QWORD *)v179 = v730;
        v748 = v730[1];
        v747 = v730 + 1;
        v746 = v748;
        *((_QWORD *)v179 + 1) = v748;
        if (v748)
          *((_QWORD *)v746 + 2) = v179 + 8;
        *((_QWORD *)v179 + 2) = v747;
        *v747 = v179;
        if (*((_QWORD *)v179 + 4))
        {
          **((_QWORD **)v179 + 6) = *((_QWORD *)v179 + 5);
          v1104 = *((_QWORD *)v179 + 5);
          if (v1104)
            *(_QWORD *)(v1104 + 16) = *((_QWORD *)v179 + 6);
        }
        *v742 = v743;
        if (v743)
        {
          v751 = *(_QWORD *)(*(_QWORD *)&v743 + 8);
          v750 = (int8x8_t **)(*(_QWORD *)&v743 + 8);
          v749 = v751;
          *((_QWORD *)v179 + 5) = v751;
          if (v751)
            *(_QWORD *)(v749 + 16) = v179 + 40;
          *((_QWORD *)v179 + 6) = v750;
          *v750 = v742;
        }
        v192 = 39;
        goto LABEL_310;
      case '!':
      case '&':
        v179 = (char *)operator new(0x80uLL);
        Not = (uint64_t ***)(v179 + 64);
        *((_DWORD *)v179 + 21) = *((_DWORD *)v179 + 21) & 0x38000000 | 2;
        *(_QWORD *)v179 = 0;
        *((_QWORD *)v179 + 1) = 0;
        *((_QWORD *)v179 + 2) = 0;
        *((_QWORD *)v179 + 3) = v179 + 64;
        *((_QWORD *)v179 + 4) = 0;
        v777 = (int8x8_t *)(v179 + 32);
        *((_QWORD *)v179 + 5) = 0;
        *((_QWORD *)v179 + 6) = 0;
        *((_QWORD *)v179 + 7) = v179 + 64;
        v778 = (int8x8_t)v1207;
        LOWORD(v1190) = 257;
        sub_1C4774CC4(*v730);
        *((_QWORD *)v179 + 8) = v779;
        *((_QWORD *)v179 + 9) = 0;
        v780 = *((_DWORD *)v179 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v179 + 20) = 81;
        *((_DWORD *)v179 + 21) = v780;
        *(_OWORD *)(v179 + 88) = 0u;
        *(_OWORD *)(v179 + 104) = 0u;
        *((_DWORD *)v179 + 30) = 0;
        if (*(_QWORD *)v179)
        {
          **((_QWORD **)v179 + 2) = *((_QWORD *)v179 + 1);
          v1105 = *((_QWORD *)v179 + 1);
          if (v1105)
            *(_QWORD *)(v1105 + 16) = *((_QWORD *)v179 + 2);
        }
        *(_QWORD *)v179 = v730;
        v783 = v730[1];
        v782 = v730 + 1;
        v781 = v783;
        *((_QWORD *)v179 + 1) = v783;
        if (v783)
          *((_QWORD *)v781 + 2) = v179 + 8;
        *((_QWORD *)v179 + 2) = v782;
        *v782 = v179;
        if (*((_QWORD *)v179 + 4))
        {
          **((_QWORD **)v179 + 6) = *((_QWORD *)v179 + 5);
          v1106 = *((_QWORD *)v179 + 5);
          if (v1106)
            *(_QWORD *)(v1106 + 16) = *((_QWORD *)v179 + 6);
        }
        *v777 = v778;
        if (v778)
        {
          v786 = *(_QWORD *)(*(_QWORD *)&v778 + 8);
          v785 = (int8x8_t **)(*(_QWORD *)&v778 + 8);
          v784 = v786;
          *((_QWORD *)v179 + 5) = v786;
          if (v786)
            *(_QWORD *)(v784 + 16) = v179 + 40;
          *((_QWORD *)v179 + 6) = v785;
          *v785 = v777;
        }
        goto LABEL_1203;
      default:
        goto LABEL_1238;
    }
  }
  __p[0] = v730;
  __p[1] = &v1207;
  if (sub_1C57A2FC4((uint64_t)__p, v731))
  {
    switch((int)v698)
    {
      case ' ':
      case '#':
        v179 = (char *)operator new(0x80uLL);
        Not = (uint64_t ***)(v179 + 64);
        *((_DWORD *)v179 + 21) = *((_DWORD *)v179 + 21) & 0x38000000 | 2;
        *(_QWORD *)v179 = 0;
        *((_QWORD *)v179 + 1) = 0;
        *((_QWORD *)v179 + 2) = 0;
        *((_QWORD *)v179 + 3) = v179 + 64;
        *((_QWORD *)v179 + 4) = 0;
        v752 = (int8x8_t *)(v179 + 32);
        *((_QWORD *)v179 + 5) = 0;
        *((_QWORD *)v179 + 6) = 0;
        *((_QWORD *)v179 + 7) = v179 + 64;
        v753 = (int8x8_t)v1207;
        LOWORD(v1190) = 257;
        sub_1C4774CC4(*v730);
        *((_QWORD *)v179 + 8) = v754;
        *((_QWORD *)v179 + 9) = 0;
        v755 = *((_DWORD *)v179 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v179 + 20) = 81;
        *((_DWORD *)v179 + 21) = v755;
        *(_OWORD *)(v179 + 88) = 0u;
        *(_OWORD *)(v179 + 104) = 0u;
        *((_DWORD *)v179 + 30) = 0;
        if (*(_QWORD *)v179)
        {
          **((_QWORD **)v179 + 2) = *((_QWORD *)v179 + 1);
          v1109 = *((_QWORD *)v179 + 1);
          if (v1109)
            *(_QWORD *)(v1109 + 16) = *((_QWORD *)v179 + 2);
        }
        *(_QWORD *)v179 = v730;
        v758 = v730[1];
        v757 = v730 + 1;
        v756 = v758;
        *((_QWORD *)v179 + 1) = v758;
        if (v758)
          *((_QWORD *)v756 + 2) = v179 + 8;
        *((_QWORD *)v179 + 2) = v757;
        *v757 = v179;
        if (*((_QWORD *)v179 + 4))
        {
          **((_QWORD **)v179 + 6) = *((_QWORD *)v179 + 5);
          v1110 = *((_QWORD *)v179 + 5);
          if (v1110)
            *(_QWORD *)(v1110 + 16) = *((_QWORD *)v179 + 6);
        }
        *v752 = v753;
        if (v753)
        {
          v761 = *(_QWORD *)(*(_QWORD *)&v753 + 8);
          v760 = (int8x8_t **)(*(_QWORD *)&v753 + 8);
          v759 = v761;
          *((_QWORD *)v179 + 5) = v761;
          if (v761)
            *(_QWORD *)(v759 + 16) = v179 + 40;
          *((_QWORD *)v179 + 6) = v760;
          *v760 = v752;
        }
        v192 = 37;
        goto LABEL_310;
      case '!':
      case '$':
        v179 = (char *)operator new(0x80uLL);
        Not = (uint64_t ***)(v179 + 64);
        *((_DWORD *)v179 + 21) = *((_DWORD *)v179 + 21) & 0x38000000 | 2;
        *(_QWORD *)v179 = 0;
        *((_QWORD *)v179 + 1) = 0;
        *((_QWORD *)v179 + 2) = 0;
        *((_QWORD *)v179 + 3) = v179 + 64;
        *((_QWORD *)v179 + 4) = 0;
        v787 = (int8x8_t *)(v179 + 32);
        *((_QWORD *)v179 + 5) = 0;
        *((_QWORD *)v179 + 6) = 0;
        *((_QWORD *)v179 + 7) = v179 + 64;
        v788 = (int8x8_t)v1207;
        LOWORD(v1190) = 257;
        sub_1C4774CC4(*v730);
        *((_QWORD *)v179 + 8) = v789;
        *((_QWORD *)v179 + 9) = 0;
        v790 = *((_DWORD *)v179 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v179 + 20) = 81;
        *((_DWORD *)v179 + 21) = v790;
        *(_OWORD *)(v179 + 88) = 0u;
        *(_OWORD *)(v179 + 104) = 0u;
        *((_DWORD *)v179 + 30) = 0;
        if (*(_QWORD *)v179)
        {
          **((_QWORD **)v179 + 2) = *((_QWORD *)v179 + 1);
          v1111 = *((_QWORD *)v179 + 1);
          if (v1111)
            *(_QWORD *)(v1111 + 16) = *((_QWORD *)v179 + 2);
        }
        *(_QWORD *)v179 = v730;
        v793 = v730[1];
        v792 = v730 + 1;
        v791 = v793;
        *((_QWORD *)v179 + 1) = v793;
        if (v793)
          *((_QWORD *)v791 + 2) = v179 + 8;
        *((_QWORD *)v179 + 2) = v792;
        *v792 = v179;
        if (*((_QWORD *)v179 + 4))
        {
          **((_QWORD **)v179 + 6) = *((_QWORD *)v179 + 5);
          v1112 = *((_QWORD *)v179 + 5);
          if (v1112)
            *(_QWORD *)(v1112 + 16) = *((_QWORD *)v179 + 6);
        }
        *v787 = v788;
        if (v788)
        {
          v796 = *(_QWORD *)(*(_QWORD *)&v788 + 8);
          v795 = (int8x8_t **)(*(_QWORD *)&v788 + 8);
          v794 = v796;
          *((_QWORD *)v179 + 5) = v796;
          if (v796)
            *(_QWORD *)(v794 + 16) = v179 + 40;
          *((_QWORD *)v179 + 6) = v795;
          *v795 = v787;
        }
        v192 = 34;
        goto LABEL_310;
      default:
        goto LABEL_1238;
    }
  }
  __p[0] = v730;
  __p[1] = &v1207;
  if (sub_1C57A2EA4((uint64_t)__p, v731))
  {
    if ((_DWORD)v698 == 37 || (_DWORD)v698 == 32)
    {
      v179 = (char *)operator new(0x80uLL);
      Not = (uint64_t ***)(v179 + 64);
      *((_DWORD *)v179 + 21) = *((_DWORD *)v179 + 21) & 0x38000000 | 2;
      *(_QWORD *)v179 = 0;
      *((_QWORD *)v179 + 1) = 0;
      *((_QWORD *)v179 + 2) = 0;
      *((_QWORD *)v179 + 3) = v179 + 64;
      *((_QWORD *)v179 + 4) = 0;
      v767 = (int8x8_t *)(v179 + 32);
      *((_QWORD *)v179 + 5) = 0;
      *((_QWORD *)v179 + 6) = 0;
      *((_QWORD *)v179 + 7) = v179 + 64;
      v768 = (int8x8_t)v1207;
      LOWORD(v1190) = 257;
      sub_1C4774CC4(*v730);
      *((_QWORD *)v179 + 8) = v769;
      *((_QWORD *)v179 + 9) = 0;
      v770 = *((_DWORD *)v179 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v179 + 20) = 81;
      *((_DWORD *)v179 + 21) = v770;
      *(_OWORD *)(v179 + 88) = 0u;
      *(_OWORD *)(v179 + 104) = 0u;
      *((_DWORD *)v179 + 30) = 0;
      if (*(_QWORD *)v179)
      {
        **((_QWORD **)v179 + 2) = *((_QWORD *)v179 + 1);
        v1113 = *((_QWORD *)v179 + 1);
        if (v1113)
          *(_QWORD *)(v1113 + 16) = *((_QWORD *)v179 + 2);
      }
      *(_QWORD *)v179 = v730;
      v773 = v730[1];
      v772 = v730 + 1;
      v771 = v773;
      *((_QWORD *)v179 + 1) = v773;
      if (v773)
        *((_QWORD *)v771 + 2) = v179 + 8;
      *((_QWORD *)v179 + 2) = v772;
      *v772 = v179;
      if (*((_QWORD *)v179 + 4))
      {
        **((_QWORD **)v179 + 6) = *((_QWORD *)v179 + 5);
        v1114 = *((_QWORD *)v179 + 5);
        if (v1114)
          *(_QWORD *)(v1114 + 16) = *((_QWORD *)v179 + 6);
      }
      *v767 = v768;
      if (v768)
      {
        v776 = *(_QWORD *)(*(_QWORD *)&v768 + 8);
        v775 = (int8x8_t **)(*(_QWORD *)&v768 + 8);
        v774 = v776;
        *((_QWORD *)v179 + 5) = v776;
        if (v776)
          *(_QWORD *)(v774 + 16) = v179 + 40;
        *((_QWORD *)v179 + 6) = v775;
        *v775 = v767;
      }
      v192 = 35;
      goto LABEL_310;
    }
    if ((v698 - 33) <= 1)
    {
      v179 = (char *)operator new(0x80uLL);
      Not = (uint64_t ***)(v179 + 64);
      *((_DWORD *)v179 + 21) = *((_DWORD *)v179 + 21) & 0x38000000 | 2;
      *(_QWORD *)v179 = 0;
      *((_QWORD *)v179 + 1) = 0;
      *((_QWORD *)v179 + 2) = 0;
      *((_QWORD *)v179 + 3) = v179 + 64;
      *((_QWORD *)v179 + 4) = 0;
      v811 = (int8x8_t *)(v179 + 32);
      *((_QWORD *)v179 + 5) = 0;
      *((_QWORD *)v179 + 6) = 0;
      *((_QWORD *)v179 + 7) = v179 + 64;
      v812 = (int8x8_t)v1207;
      LOWORD(v1190) = 257;
      sub_1C4774CC4(*v730);
      *((_QWORD *)v179 + 8) = v813;
      *((_QWORD *)v179 + 9) = 0;
      v814 = *((_DWORD *)v179 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v179 + 20) = 81;
      *((_DWORD *)v179 + 21) = v814;
      *(_OWORD *)(v179 + 88) = 0u;
      *(_OWORD *)(v179 + 104) = 0u;
      *((_DWORD *)v179 + 30) = 0;
      if (*(_QWORD *)v179)
      {
        **((_QWORD **)v179 + 2) = *((_QWORD *)v179 + 1);
        v1128 = *((_QWORD *)v179 + 1);
        if (v1128)
          *(_QWORD *)(v1128 + 16) = *((_QWORD *)v179 + 2);
      }
      *(_QWORD *)v179 = v730;
      v817 = v730[1];
      v816 = v730 + 1;
      v815 = v817;
      *((_QWORD *)v179 + 1) = v817;
      if (v817)
        *((_QWORD *)v815 + 2) = v179 + 8;
      *((_QWORD *)v179 + 2) = v816;
      *v816 = v179;
      if (*((_QWORD *)v179 + 4))
      {
        **((_QWORD **)v179 + 6) = *((_QWORD *)v179 + 5);
        v1129 = *((_QWORD *)v179 + 5);
        if (v1129)
          *(_QWORD *)(v1129 + 16) = *((_QWORD *)v179 + 6);
      }
      *v811 = v812;
      if (v812)
      {
        v820 = *(_QWORD *)(*(_QWORD *)&v812 + 8);
        v819 = (int8x8_t **)(*(_QWORD *)&v812 + 8);
        v818 = v820;
        *((_QWORD *)v179 + 5) = v820;
        if (v820)
          *(_QWORD *)(v818 + 16) = v179 + 40;
        *((_QWORD *)v179 + 6) = v819;
        *v819 = v811;
      }
      v192 = 36;
      goto LABEL_310;
    }
  }
LABEL_1238:
  v1200 = 0;
  v1196 = 0;
  __p[0] = &v1200;
  __p[1] = &v1196;
  v821 = *((unsigned __int8 *)v6 + 16);
  if (v821 == 5)
  {
    if (*((_WORD *)v6 + 9) != 28)
      goto LABEL_1258;
    v822 = (llvm::Constant ***)&v6[-4 * (*((_DWORD *)v6 + 5) & 0x7FFFFFF)];
    if (!*v822)
      goto LABEL_1258;
    v1200 = *v822;
    if (!sub_1C4D9EC28((_QWORD **)&__p[1], 30, (uint64_t)v822[4]))
      goto LABEL_1258;
  }
  else
  {
    if (v821 != 56)
      goto LABEL_1258;
    if (!*(v6 - 8))
      goto LABEL_1258;
    v1200 = (llvm::Constant **)*(v6 - 8);
    if ((sub_1C4D9EC28((_QWORD **)&__p[1], 30, (uint64_t)*(v6 - 4)) & 1) == 0)
      goto LABEL_1258;
  }
  if (*((unsigned __int8 *)v1182 + 16) <= 0x14u
    && ((llvm::Constant::isNullValue(v1182) & 1) != 0 || (sub_1C4E71060((uint64_t)&v1207, v1182) & 1) != 0)
    && llvm::isKnownToBeAPowerOfTwo((llvm *)v1200, *(const llvm::Value **)(a1 + 80), 0, 0, *(_QWORD *)(a1 + 56), (llvm::AssumptionCache *)a2, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1, (BOOL)v1155)&& (*((_WORD *)a2 + 9) & 0x3E) == 0x20)
  {
    v823 = (char *)operator new(0x80uLL);
    Not = (uint64_t ***)(v823 + 64);
    *((_DWORD *)v823 + 21) = *((_DWORD *)v823 + 21) & 0x38000000 | 2;
    *(_QWORD *)v823 = 0;
    *((_QWORD *)v823 + 1) = 0;
    *((_QWORD *)v823 + 2) = 0;
    *((_QWORD *)v823 + 3) = v823 + 64;
    *((_QWORD *)v823 + 4) = 0;
    *((_QWORD *)v823 + 5) = 0;
    *((_QWORD *)v823 + 6) = 0;
    v824 = *((_WORD *)&word_1C8661860 + (*((_WORD *)a2 + 9) & 0x3F));
    *((_QWORD *)v823 + 7) = v823 + 64;
    v825 = *(_QWORD *)(a1 + 24);
    LOWORD(v1190) = 257;
    v826 = sub_1C4D89BCC(v825, v1200, v1196, (uint64_t)__p);
    v1211 = 257;
    sub_1C4774CC4(*(_DWORD **)v826);
    *((_QWORD *)v823 + 8) = v827;
    *((_QWORD *)v823 + 9) = 0;
    v828 = *((_DWORD *)v823 + 21) & 0xC0000000 | 2;
    *((_DWORD *)v823 + 20) = 81;
    *((_DWORD *)v823 + 21) = v828;
    *(_OWORD *)(v823 + 88) = 0u;
    *(_OWORD *)(v823 + 104) = 0u;
    *((_DWORD *)v823 + 30) = 0;
    if (*(_QWORD *)v823)
    {
      **((_QWORD **)v823 + 2) = *((_QWORD *)v823 + 1);
      v1141 = *((_QWORD *)v823 + 1);
      if (v1141)
        *(_QWORD *)(v1141 + 16) = *((_QWORD *)v823 + 2);
    }
    *(_QWORD *)v823 = v826;
    v831 = *(_QWORD *)(v826 + 8);
    v830 = (_QWORD *)(v826 + 8);
    v829 = v831;
    *((_QWORD *)v823 + 1) = v831;
    if (v831)
      *(_QWORD *)(v829 + 16) = v823 + 8;
    *((_QWORD *)v823 + 2) = v830;
    *v830 = v823;
    if (*((_QWORD *)v823 + 4))
    {
      **((_QWORD **)v823 + 6) = *((_QWORD *)v823 + 5);
      v1142 = *((_QWORD *)v823 + 5);
      if (v1142)
        *(_QWORD *)(v1142 + 16) = *((_QWORD *)v823 + 6);
    }
    *((_QWORD *)v823 + 4) = v1182;
    v833 = (_QWORD *)((char *)v1182 + 8);
    v832 = *((_QWORD *)v1182 + 1);
    *((_QWORD *)v823 + 5) = v832;
    if (v832)
      *(_QWORD *)(v832 + 16) = v823 + 40;
    *((_QWORD *)v823 + 6) = v833;
    *v833 = v823 + 32;
    *((_WORD *)v823 + 41) = v824;
    goto LABEL_109;
  }
LABEL_1258:
  __p[0] = &v1200;
  if (sub_1C4D9EC28((_QWORD **)__p, 30, (uint64_t)v6))
  {
    __p[0] = &v1196;
    if (sub_1C4D9EC28((_QWORD **)__p, 30, (uint64_t)v1182))
    {
      v236 = (char *)operator new(0x80uLL);
      Not = (uint64_t ***)(v236 + 64);
      *((_DWORD *)v236 + 21) = *((_DWORD *)v236 + 21) & 0x38000000 | 2;
      *(_QWORD *)v236 = 0;
      *((_QWORD *)v236 + 1) = 0;
      *((_QWORD *)v236 + 2) = 0;
      *((_QWORD *)v236 + 3) = v236 + 64;
      *((_QWORD *)v236 + 4) = 0;
      v401 = (llvm::Value ***)(v236 + 32);
      *((_QWORD *)v236 + 5) = 0;
      *((_QWORD *)v236 + 6) = 0;
      *((_QWORD *)v236 + 7) = v236 + 64;
      v413 = *((_WORD *)a2 + 9);
      v414 = (llvm::Constant **)v1196;
      v415 = v1200;
LABEL_686:
      LOWORD(v1190) = 257;
      sub_1C4774CC4(*v414);
      *((_QWORD *)v236 + 8) = v416;
      *((_QWORD *)v236 + 9) = 0;
      v417 = *((_DWORD *)v236 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v236 + 20) = 81;
      *((_DWORD *)v236 + 21) = v417;
      *(_OWORD *)(v236 + 88) = 0u;
      *(_OWORD *)(v236 + 104) = 0u;
      *((_DWORD *)v236 + 30) = 0;
      if (*(_QWORD *)v236)
      {
        **((_QWORD **)v236 + 2) = *((_QWORD *)v236 + 1);
        v1096 = *((_QWORD *)v236 + 1);
        if (v1096)
          *(_QWORD *)(v1096 + 16) = *((_QWORD *)v236 + 2);
      }
      *(_QWORD *)v236 = v414;
      v420 = v414[1];
      v419 = v414 + 1;
      v418 = v420;
      *((_QWORD *)v236 + 1) = v420;
      if (v420)
        *((_QWORD *)v418 + 2) = v236 + 8;
      v246 = v413 & 0x3F;
      *((_QWORD *)v236 + 2) = v419;
      *v419 = v236;
      if (*((_QWORD *)v236 + 4))
      {
        **((_QWORD **)v236 + 6) = *((_QWORD *)v236 + 5);
        v1097 = *((_QWORD *)v236 + 5);
        if (v1097)
          *(_QWORD *)(v1097 + 16) = *((_QWORD *)v236 + 6);
      }
      *v401 = v415;
      if (v415)
      {
        v423 = v415[1];
        v422 = (llvm::Value ****)(v415 + 1);
        v421 = v423;
        *((_QWORD *)v236 + 5) = v423;
        if (v423)
          *((_QWORD *)v421 + 2) = v236 + 40;
        *((_QWORD *)v236 + 6) = v422;
        *v422 = v401;
      }
      goto LABEL_385;
    }
    __s1 = 0;
    __p[0] = &__s1;
    __p[1] = 0;
    if (sub_1C4D89F84((uint64_t)__p, (unsigned __int8 *)v1182))
    {
      v835 = operator new(0x80uLL);
      v835[21] = v835[21] & 0x38000000 | 2;
      *(_QWORD *)v835 = 0;
      *((_QWORD *)v835 + 1) = 0;
      *((_QWORD *)v835 + 4) = 0;
      *((_QWORD *)v835 + 2) = 0;
      *((_QWORD *)v835 + 3) = v835 + 16;
      *((_QWORD *)v835 + 5) = 0;
      *((_QWORD *)v835 + 6) = 0;
      *((_QWORD *)v835 + 7) = v835 + 16;
      __asm { BR              X9 }
    }
  }
  v836 = *v7;
  if (*v7)
  {
    v837 = *v9;
    if (*v9)
    {
      v838 = *((_WORD *)a2 + 9) & 0x3F;
      if (v838 != 34)
      {
        if (v838 != 36)
        {
          v1207 = 0;
          __p[0] = &v1207;
          goto LABEL_1310;
        }
        v839 = *(unsigned __int8 *)(v836 + 16);
        if (v839 != 5)
        {
          if (v839 == 41)
          {
            v840 = *(unsigned __int8 **)(v836 - 64);
            if (v840)
            {
              v841 = *(unsigned __int8 **)(v836 - 32);
              if (v841)
              {
                if (v837 == (llvm::Constant *)v840 || v837 == (llvm::Constant *)v841)
                {
                  v1200 = *(llvm::Constant ***)(v836 - 64);
                  v1196 = (uint64_t)v841;
LABEL_1348:
                  if (*(_BYTE *)(*(_QWORD *)v840 + 8) == 13)
                  {
                    __p[0] = 0;
                    v1207 = 0;
                    if (*(_BYTE *)(v836 + 16) == 41
                      && (sub_1C5808B64((_QWORD *)a1, 13, 0, v840, v841, (unsigned __int8 **)v836, (unsigned __int8 **)__p, &v1207) & 1) != 0)
                    {
                      sub_1C577F888(a1, (llvm::ValueAsMetadata *)v836, (llvm::Value *)__p[0]);
                      sub_1C57813F4(a1, v836);
                      v22 = (llvm::Value *)v1207;
                      return sub_1C577F888(a1, (llvm::ValueAsMetadata *)a2, v22);
                    }
                  }
                  goto LABEL_1395;
                }
              }
            }
          }
LABEL_1296:
          v1207 = 0;
          __p[0] = &v1207;
          v855 = *(_QWORD *)(v836 + 8);
          if (v855 && !*(_QWORD *)(v855 + 8))
          {
            if (v839 == 5)
            {
              if (*(_WORD *)(v836 + 18) == 30)
              {
                v890 = v836 - 32 * (*(_DWORD *)(v836 + 20) & 0x7FFFFFF);
                if (*(_QWORD *)v890)
                {
                  v1207 = *(llvm::APInt ***)v890;
                  if (sub_1C4D9EED4((uint64_t)&__p[1], *(llvm::Constant **)(v890 + 32)))
                    goto LABEL_1387;
                }
              }
            }
            else if (v839 == 58)
            {
              if (*(_QWORD *)(v836 - 64))
              {
                v1207 = *(llvm::APInt ***)(v836 - 64);
                if ((sub_1C4D9ED34((uint64_t)&__p[1], *(llvm::Constant **)(v836 - 32)) & 1) != 0)
                {
LABEL_1387:
                  v840 = (unsigned __int8 *)v1207;
                  if (!v1207)
                    goto LABEL_1395;
                  v1200 = v1207;
                  v1196 = (uint64_t)v837;
                  v860 = *(unsigned __int8 *)(v836 + 16);
                  v841 = (unsigned __int8 *)v837;
                  goto LABEL_1347;
                }
              }
            }
          }
          goto LABEL_1310;
        }
        if (*(_WORD *)(v836 + 18) != 13)
          goto LABEL_1296;
        v852 = v836 - 32 * (*(_DWORD *)(v836 + 20) & 0x7FFFFFF);
        v853 = *(llvm::Constant ***)v852;
        if (!*(_QWORD *)v852)
          goto LABEL_1296;
        v854 = *(unsigned __int8 **)(v852 + 32);
        if (!v854 || v837 != (llvm::Constant *)v853 && v837 != (llvm::Constant *)v854)
          goto LABEL_1296;
LABEL_1394:
        v1200 = v853;
        v1196 = (uint64_t)v854;
        goto LABEL_1395;
      }
      v842 = *((unsigned __int8 *)v837 + 16);
      if (v842 == 5)
      {
        if (*((_WORD *)v837 + 9) == 13)
        {
          v856 = (char *)v837 - 32 * (*((_DWORD *)v837 + 5) & 0x7FFFFFF);
          v853 = *(llvm::Constant ***)v856;
          if (*(_QWORD *)v856)
          {
            v854 = (unsigned __int8 *)*((_QWORD *)v856 + 4);
            if (v854)
            {
              if ((llvm::Constant **)v836 == v853 || (unsigned __int8 *)v836 == v854)
                goto LABEL_1394;
            }
          }
        }
      }
      else if (v842 == 41)
      {
        v840 = (unsigned __int8 *)*((_QWORD *)v837 - 8);
        if (v840)
        {
          v841 = (unsigned __int8 *)*((_QWORD *)v837 - 4);
          if (v841)
          {
            if ((unsigned __int8 *)v836 == v840 || (unsigned __int8 *)v836 == v841)
            {
              v1200 = (llvm::Constant **)*((_QWORD *)v837 - 8);
              v1196 = (uint64_t)v841;
              v836 = (uint64_t)v837;
              goto LABEL_1348;
            }
          }
        }
      }
      v1207 = 0;
      __p[0] = &v1207;
      v857 = *((_QWORD *)v837 + 1);
      if (v857 && !*(_QWORD *)(v857 + 8))
      {
        if (v842 == 5)
        {
          if (*((_WORD *)v837 + 9) != 30)
            goto LABEL_1310;
          v891 = (llvm::Constant **)((char *)v837 - 32 * (*((_DWORD *)v837 + 5) & 0x7FFFFFF));
          if (!*v891)
            goto LABEL_1310;
          v1207 = (llvm::APInt **)*v891;
          if (!sub_1C4D9EED4((uint64_t)&__p[1], v891[4]))
            goto LABEL_1310;
        }
        else
        {
          if (v842 != 58)
            goto LABEL_1310;
          if (!*((_QWORD *)v837 - 8))
            goto LABEL_1310;
          v1207 = (llvm::APInt **)*((_QWORD *)v837 - 8);
          if ((sub_1C4D9ED34((uint64_t)&__p[1], *((llvm::Constant **)v837 - 4)) & 1) == 0)
            goto LABEL_1310;
        }
        v840 = (unsigned __int8 *)v1207;
        if (!v1207)
          goto LABEL_1395;
        v1200 = v1207;
        v1196 = v836;
        v860 = *((unsigned __int8 *)v837 + 16);
        v841 = (unsigned __int8 *)v836;
LABEL_1346:
        v836 = (uint64_t)v837;
LABEL_1347:
        if (v860 < 0x1C)
          goto LABEL_1395;
        goto LABEL_1348;
      }
LABEL_1310:
      if (v838 != 32)
        goto LABEL_1395;
      v858 = *(unsigned __int8 *)(v836 + 16);
      if (v858 == 5)
      {
        if (*(_WORD *)(v836 + 18) != 13)
          goto LABEL_1323;
        v859 = (unsigned __int8 **)(v836 - 32 * (*(_DWORD *)(v836 + 20) & 0x7FFFFFF));
        v840 = *v859;
        if (!*v859)
          goto LABEL_1323;
        v841 = v859[4];
        if (!v841)
          goto LABEL_1323;
      }
      else if (v858 != 41
             || (v840 = *(unsigned __int8 **)(v836 - 64)) == 0
             || (v841 = *(unsigned __int8 **)(v836 - 32)) == 0)
      {
LABEL_1323:
        if (!sub_1C4D8AC3C((uint64_t)&__s1, (llvm::Constant *)v836))
          goto LABEL_1395;
        v861 = *((unsigned __int8 *)v837 + 16);
        if (v861 == 5)
        {
          if (*((_WORD *)v837 + 9) != 13)
            goto LABEL_1395;
          v872 = (unsigned __int8 **)((char *)v837 - 32 * (*((_DWORD *)v837 + 5) & 0x7FFFFFF));
          v840 = *v872;
          if (!*v872)
            goto LABEL_1395;
          v841 = v872[4];
          if (!v841)
            goto LABEL_1395;
        }
        else
        {
          if (v861 != 41)
            goto LABEL_1395;
          v840 = (unsigned __int8 *)*((_QWORD *)v837 - 8);
          if (!v840)
            goto LABEL_1395;
          v841 = (unsigned __int8 *)*((_QWORD *)v837 - 4);
          if (!v841)
            goto LABEL_1395;
        }
        if ((sub_1C4D89CC8((uint64_t)&v1205, (llvm::Constant *)v840) & 1) == 0
          && (sub_1C4D89CC8((uint64_t)&v1204, (llvm::Constant *)v841) & 1) == 0)
        {
          goto LABEL_1395;
        }
        v1200 = (llvm::Constant **)v840;
        v1196 = (uint64_t)v841;
        v860 = *((unsigned __int8 *)v837 + 16);
        goto LABEL_1346;
      }
      if (sub_1C4D8AC3C((uint64_t)&__s1, v837)
        && ((sub_1C4D89CC8((uint64_t)&v1205, (llvm::Constant *)v840) & 1) != 0
         || (sub_1C4D89CC8((uint64_t)&v1204, (llvm::Constant *)v841) & 1) != 0))
      {
        v1200 = (llvm::Constant **)v840;
        v1196 = (uint64_t)v841;
        v860 = *(unsigned __int8 *)(v836 + 16);
        goto LABEL_1347;
      }
      goto LABEL_1323;
    }
  }
LABEL_1395:
  __p[0] = &v1200;
  __p[1] = &v1196;
  v892 = *((unsigned __int8 *)v6 + 16);
  if (v892 == 5)
  {
    if (*((_WORD *)v6 + 9) != 17
      || !sub_1C4B0378C((_QWORD **)__p, (uint64_t)v6[-4 * (*((_DWORD *)v6 + 5) & 0x7FFFFFF)])
      || (sub_1C4B0378C((_QWORD **)&__p[1], (uint64_t)v6[-4 * (*((_DWORD *)v6 + 5) & 0x7FFFFFF) + 4]) & 1) == 0)
    {
      goto LABEL_1404;
    }
  }
  else if (v892 != 45
         || !sub_1C4B0378C((_QWORD **)__p, (uint64_t)*(v6 - 8))
         || !sub_1C4B0378C((_QWORD **)&__p[1], (uint64_t)*(v6 - 4)))
  {
    goto LABEL_1404;
  }
  Not = (uint64_t ***)sub_1C58142C8((uint64_t)a2, v6, (uint64_t)v1182, a1);
  if (Not)
    return (llvm::UndefValue **)Not;
LABEL_1404:
  __p[0] = &v1200;
  __p[1] = &v1196;
  v893 = *((unsigned __int8 *)v1182 + 16);
  if (v893 == 5)
  {
    if (*((_WORD *)v1182 + 9) != 17
      || !sub_1C4B0378C((_QWORD **)__p, *((_QWORD *)v1182 - 4 * (*((_DWORD *)v1182 + 5) & 0x7FFFFFF)))
      || (sub_1C4B0378C((_QWORD **)&__p[1], ((_QWORD *)v1182 - 4 * (*((_DWORD *)v1182 + 5) & 0x7FFFFFF))[4]) & 1) == 0)
    {
      goto LABEL_1413;
    }
  }
  else if (v893 != 45
         || !sub_1C4B0378C((_QWORD **)__p, *((_QWORD *)v1182 - 8))
         || !sub_1C4B0378C((_QWORD **)&__p[1], *((_QWORD *)v1182 - 4)))
  {
    goto LABEL_1413;
  }
  Not = (uint64_t ***)sub_1C58142C8((uint64_t)a2, v1182, (uint64_t)v6, a1);
  if (Not)
    return (llvm::UndefValue **)Not;
LABEL_1413:
  Not = (uint64_t ***)sub_1C58061CC(a1, a2, v834);
  if (Not)
    return (llvm::UndefValue **)Not;
  v895 = *((_WORD *)a2 + 9) & 0x3F;
  v896 = (unsigned __int8 *)*(a2 - 8);
  v897 = (uint64_t)*(a2 - 4);
  v1200 = 0;
  v1196 = 0;
  LODWORD(__p[0]) = 301;
  __p[1] = 0;
  *(_QWORD *)&v1189 = &v1200;
  *((_QWORD *)&v1189 + 1) = 1;
  *(_QWORD *)&v1190 = &v1196;
  if (!v896
    || v896[16] != 92
    || *((_DWORD *)v896 + 18) != 1
    || **((_DWORD **)v896 + 8)
    || !sub_1C57A1C20((uint64_t)__p, *((_QWORD *)v896 - 4)))
  {
    goto LABEL_1456;
  }
  if (v895 == 32)
  {
    if (!sub_1C4D8AC3C((uint64_t)&v1207, (llvm::Constant *)v897)
      || (sub_1C4D89CC8((uint64_t)&__s1, (llvm::Constant *)v1200) & 1) == 0
      && (sub_1C4D89CC8((uint64_t)&v1205, (llvm::Constant *)v1196) & 1) == 0)
    {
      goto LABEL_1456;
    }
LABEL_1596:
    v974 = (_QWORD *)*((_QWORD *)v896 - 4);
    v1211 = 257;
    v975 = (char *)operator new(0x80uLL);
    Not = (uint64_t ***)(v975 + 32);
    *((_DWORD *)v975 + 13) = *((_DWORD *)v975 + 13) & 0x38000000 | 1;
    *(_QWORD *)v975 = 0;
    *((_QWORD *)v975 + 1) = 0;
    *((_QWORD *)v975 + 2) = 0;
    *((_QWORD *)v975 + 3) = v975 + 32;
    v976 = *v974;
    v977 = *(unsigned __int8 *)(*v974 + 8);
    if (*v974 && v977 == 17)
    {
      if (*(_QWORD *)(v976 + 32) >= 2uLL)
      {
        v979 = (uint64_t *)(v976 + 24);
        goto LABEL_1602;
      }
    }
    else
    {
      v978 = 0;
      if (!v976 || v977 != 16)
        goto LABEL_1603;
      if (*(_DWORD *)(v976 + 12) >= 2u)
      {
        v979 = (uint64_t *)(*(_QWORD *)(v976 + 16) + 8);
LABEL_1602:
        v978 = *v979;
LABEL_1603:
        *((_QWORD *)v975 + 4) = v978;
        *((_QWORD *)v975 + 5) = 0;
        *((_QWORD *)v975 + 6) = 0x10000005CLL;
        *(_OWORD *)(v975 + 56) = 0u;
        *(_OWORD *)(v975 + 72) = 0u;
        *((_DWORD *)v975 + 22) = 0;
        v980 = v974 + 1;
        v981 = v974[1];
        *(_QWORD *)v975 = v974;
        *((_QWORD *)v975 + 1) = v981;
        if (v981)
          *(_QWORD *)(v981 + 16) = v975 + 8;
        *((_QWORD *)v975 + 2) = v980;
        *v980 = v975;
        *((_DWORD *)v975 + 28) = 1;
        v982 = v975 + 112;
        *((_QWORD *)v982 - 2) = v982;
        *((_QWORD *)v982 - 1) = 0x400000001;
LABEL_109:
        v74 = (int8x8_t *)&v1207;
LABEL_387:
        llvm::Value::setName(Not, (uint64_t)v74);
        return (llvm::UndefValue **)Not;
      }
    }
    v978 = 0;
    goto LABEL_1603;
  }
  if (v895 == 33)
  {
    if (!sub_1C4D9ED34((uint64_t)&v1204, (llvm::Constant *)v897)
      || (sub_1C4D9ED34((uint64_t)&v1206, (llvm::Constant *)v1200) & 1) == 0
      && (sub_1C4D9ED34((uint64_t)&v1187, (llvm::Constant *)v1196) & 1) == 0)
    {
      goto LABEL_1456;
    }
    goto LABEL_1596;
  }
  if (v895 == 36 && ((llvm::Constant **)v897 == v1200 || v897 == v1196))
    goto LABEL_1596;
LABEL_1456:
  if (v897
    && *(_BYTE *)(v897 + 16) == 92
    && *(_DWORD *)(v897 + 72) == 1
    && !**(_DWORD **)(v897 + 64)
    && sub_1C57A1C20((uint64_t)__p, *(_QWORD *)(v897 - 32))
    && v895 == 34)
  {
    if (v896 == (unsigned __int8 *)v1200)
    {
      v896 = (unsigned __int8 *)v897;
      goto LABEL_1596;
    }
    v79 = v896 == (unsigned __int8 *)v1196;
    v896 = (unsigned __int8 *)v897;
    if (v79)
      goto LABEL_1596;
  }
  v910 = *((unsigned __int8 *)v6 + 16);
  if ((*((_WORD *)a2 + 9) & 0x3F) == 0x20 && v910 == 92)
  {
    v911 = (uint64_t *)*(v6 - 4);
    if (v911
      && *((_BYTE *)v911 + 16) == 64
      && !*(_DWORD *)v6[8]
      && (llvm *)*(v911 - 8) == v1182
      && (*((_WORD *)v911 + 9) & 2) == 0)
    {
      LOWORD(v1190) = 257;
      v317 = (char *)operator new(0x80uLL);
      Not = (uint64_t ***)(v317 + 32);
      *((_DWORD *)v317 + 13) = *((_DWORD *)v317 + 13) & 0x38000000 | 1;
      *(_QWORD *)v317 = 0;
      *((_QWORD *)v317 + 1) = 0;
      *((_QWORD *)v317 + 2) = 0;
      *((_QWORD *)v317 + 3) = v317 + 32;
      v912 = *v911;
      v913 = *(unsigned __int8 *)(*v911 + 8);
      if (*v911 && v913 == 17)
      {
        if (*(_QWORD *)(v912 + 32) >= 2uLL)
        {
          v915 = (uint64_t *)(v912 + 24);
          goto LABEL_1473;
        }
      }
      else
      {
        v914 = 0;
        if (!v912 || v913 != 16)
          goto LABEL_1474;
        if (*(_DWORD *)(v912 + 12) >= 2u)
        {
          v915 = (uint64_t *)(*(_QWORD *)(v912 + 16) + 8);
LABEL_1473:
          v914 = *v915;
LABEL_1474:
          *((_QWORD *)v317 + 4) = v914;
          *((_QWORD *)v317 + 5) = 0;
          *((_QWORD *)v317 + 6) = 0x10000005CLL;
          *(_OWORD *)(v317 + 56) = 0u;
          *(_OWORD *)(v317 + 72) = 0u;
          *((_DWORD *)v317 + 22) = 0;
          v322 = v911 + 1;
          v323 = v911[1];
          *(_QWORD *)v317 = v911;
          goto LABEL_455;
        }
      }
      v914 = 0;
      goto LABEL_1474;
    }
    v917 = 0;
    v1207 = 0;
    v1200 = 0;
    goto LABEL_1486;
  }
  v1207 = 0;
  v1200 = 0;
  v894 = __p;
  __p[0] = &v1207;
  __p[1] = &v1200;
  *(_QWORD *)&v1189 = 0;
  if (v910 == 5)
  {
    if (*((_WORD *)v6 + 9) == 13)
    {
      v918 = (llvm::APInt ***)&v6[-4 * (*((_DWORD *)v6 + 5) & 0x7FFFFFF)];
      if (*v918
        && (v1207 = *v918, (sub_1C4D8A004((uint64_t)&__p[1], (llvm::Constant *)v918[4]) & 1) != 0))
      {
        v917 = 1;
        LODWORD(v894) = 1;
      }
      else
      {
        LODWORD(v894) = 0;
        v917 = 1;
      }
    }
    else
    {
      LODWORD(v894) = 0;
      v917 = 1;
    }
    goto LABEL_1486;
  }
  if (v910 != 41)
  {
    v917 = 0;
LABEL_1486:
    v916 = v917 & v894;
    goto LABEL_1487;
  }
  if (!*(v6 - 8))
    goto LABEL_1490;
  v1207 = (llvm::APInt **)*(v6 - 8);
  if ((sub_1C4D89F84((uint64_t)&__p[1], (unsigned __int8 *)*(v6 - 4)) & 1) == 0)
    goto LABEL_1490;
  v916 = 1;
LABEL_1487:
  if (v916 && v1182 == (llvm *)v1207)
  {
    v919 = v1200;
    v920 = *((_WORD *)a2 + 9) & 0x3F;
    v921 = (llvm::ConstantInt ***)v1182;
    return (llvm::UndefValue **)sub_1C62A83DC(v921, (uint64_t)v919, v920);
  }
LABEL_1490:
  __p[0] = &v1207;
  __p[1] = &v1200;
  *(_QWORD *)&v1189 = 0;
  v922 = (char)v1182;
  v923 = *((unsigned __int8 *)v1182 + 16);
  if (v923 == 41)
  {
    if (!*((_QWORD *)v1182 - 8))
      goto LABEL_1503;
    v1207 = (llvm::APInt **)*((_QWORD *)v1182 - 8);
    if ((sub_1C4D89F84((uint64_t)&__p[1], *((unsigned __int8 **)v1182 - 4)) & 1) == 0)
      goto LABEL_1503;
    v924 = 1;
  }
  else
  {
    if (v923 == 5)
    {
      v922 = 0;
      if (*((_WORD *)v1182 + 9) == 13)
      {
        v925 = (llvm::Constant **)((char *)v1182 - 32 * (*((_DWORD *)v1182 + 5) & 0x7FFFFFF));
        if (*v925)
        {
          v1207 = (llvm::APInt **)*v925;
          if ((sub_1C4D8A004((uint64_t)&__p[1], v925[4]) & 1) != 0)
            v922 = 1;
        }
      }
    }
    v924 = v923 == 5 && v922;
  }
  if (v924 && v6 == v1207)
  {
    v919 = v1200;
    v920 = dword_1C86618B4[*((_WORD *)a2 + 9) & 0x3F];
    v921 = (llvm::ConstantInt ***)v6;
    return (llvm::UndefValue **)sub_1C62A83DC(v921, (uint64_t)v919, v920);
  }
LABEL_1503:
  v926 = *(_QWORD *)(a1 + 24);
  LODWORD(v1196) = 0;
  v1207 = 0;
  v1200 = 0;
  __p[0] = &v1196;
  *(_QWORD *)&v1189 = &v1200;
  *((_QWORD *)&v1189 + 1) = &v1207;
  v927 = *v7;
  v928 = *(_QWORD *)(*v7 + 8);
  if (!v928 || *(_QWORD *)(v928 + 8))
    goto LABEL_1505;
  v946 = *(unsigned __int8 *)(v927 + 16);
  if (v946 == 5)
  {
    if (*(_WORD *)(v927 + 18) != 25)
      goto LABEL_1505;
    if (!sub_1C4D89E3C((uint64_t)&__p[1], *(llvm::Constant **)(v927 - 32 * (*(_DWORD *)(v927 + 20) & 0x7FFFFFF))))goto LABEL_1505;
    v947 = *(_QWORD *)(v927 - 32 * (*(_DWORD *)(v927 + 20) & 0x7FFFFFF) + 32);
    if (!v947)
      goto LABEL_1505;
  }
  else
  {
    if (v946 != 53)
      goto LABEL_1505;
    if (!sub_1C4D89CC8((uint64_t)&__p[1], *(llvm::Constant **)(v927 - 64)))
      goto LABEL_1505;
    v947 = *(_QWORD *)(v927 - 32);
    if (!v947)
      goto LABEL_1505;
  }
  *(_QWORD *)v1189 = v947;
  if (*v9)
  {
    **((_QWORD **)&v1189 + 1) = *v9;
    v955 = *((_WORD *)a2 + 9) & 0x3F;
    goto LABEL_1573;
  }
LABEL_1505:
  v929 = *v9;
  v930 = *((_QWORD *)*v9 + 1);
  if (!v930 || *(_QWORD *)(v930 + 8))
    goto LABEL_1507;
  v948 = *((unsigned __int8 *)v929 + 16);
  if (v948 == 5)
  {
    if (*((_WORD *)v929 + 9) != 25)
      goto LABEL_1507;
    if (!sub_1C4D89E3C((uint64_t)&__p[1], *((llvm::Constant **)v929 - 4 * (*((_DWORD *)v929 + 5) & 0x7FFFFFF))))goto LABEL_1507;
    v949 = ((_QWORD *)v929 - 4 * (*((_DWORD *)v929 + 5) & 0x7FFFFFF))[4];
    if (!v949)
      goto LABEL_1507;
  }
  else
  {
    if (v948 != 53)
      goto LABEL_1507;
    if (!sub_1C4D89CC8((uint64_t)&__p[1], *((llvm::Constant **)v929 - 8)))
      goto LABEL_1507;
    v949 = *((_QWORD *)v929 - 4);
    if (!v949)
      goto LABEL_1507;
  }
  *(_QWORD *)v1189 = v949;
  if (!*v7)
  {
LABEL_1507:
    __p[0] = &v1196;
    *(_QWORD *)&v1189 = &v1200;
    *((_QWORD *)&v1190 + 1) = &v1200;
    v1191 = &v1207;
    v931 = *v7;
    v932 = *(_QWORD *)(*v7 + 8);
    if (v932
      && !*(_QWORD *)(v932 + 8)
      && ((sub_1C58198E4((uint64_t)&__p[1], *v7) & 1) != 0 || sub_1C57BF5E8((uint64_t)&v1190, 13, v931))
      && *v9)
    {
      *v1191 = (llvm::APInt **)*v9;
      v950 = *((_WORD *)a2 + 9) & 0x3F;
    }
    else
    {
      v933 = *v9;
      v934 = *((_QWORD *)*v9 + 1);
      if (!v934
        || *(_QWORD *)(v934 + 8)
        || (sub_1C58198E4((uint64_t)&__p[1], (uint64_t)*v9) & 1) == 0
        && !sub_1C57BF5E8((uint64_t)&v1190, 13, (uint64_t)v933)
        || !*v7)
      {
        goto LABEL_1511;
      }
      *v1191 = (llvm::APInt **)*v7;
      v950 = dword_1C86618B4[*((_WORD *)a2 + 9) & 0x3F];
    }
    *(_DWORD *)__p[0] = v950;
    if ((_DWORD)v1196 != 36)
    {
      if ((_DWORD)v1196 != 35)
        goto LABEL_1511;
      goto LABEL_1575;
    }
    goto LABEL_1577;
  }
  **((_QWORD **)&v1189 + 1) = *v7;
  v955 = dword_1C86618B4[*((_WORD *)a2 + 9) & 0x3F];
LABEL_1573:
  *(_DWORD *)__p[0] = v955;
  if ((_DWORD)v1196 != 37)
  {
    if ((_DWORD)v1196 != 34)
      goto LABEL_1511;
LABEL_1575:
    v956 = 32;
    goto LABEL_1578;
  }
LABEL_1577:
  v956 = 33;
LABEL_1578:
  if ((*((_BYTE *)v1207 + 23) & 0x10) != 0)
  {
    v957 = **(_QWORD **)*v1207;
    v958 = *(_QWORD *)(v957 + 152);
    v959 = *(unsigned int *)(v957 + 168);
    if ((_DWORD)v959)
    {
      LODWORD(v960) = (v959 - 1) & ((v1207 >> 4) ^ (v1207 >> 9));
      v961 = (llvm::APInt ***)(v958 + 16 * v960);
      v962 = *v961;
      if (*v961 == v1207)
      {
LABEL_1588:
        v965 = v961[1];
        v968 = *v965;
        v966 = (char *)(v965 + 2);
        v967 = v968;
        goto LABEL_1589;
      }
      v963 = 1;
      while (v962 != (llvm::APInt **)-4096)
      {
        v964 = v960 + v963++;
        v960 = v964 & (v959 - 1);
        v962 = *(llvm::APInt ***)(v958 + 16 * v960);
        if (v962 == v1207)
        {
          v961 = (llvm::APInt ***)(v958 + 16 * v960);
          goto LABEL_1588;
        }
      }
    }
    v961 = (llvm::APInt ***)(v958 + 16 * v959);
    goto LABEL_1588;
  }
  v967 = 0;
  v966 = &byte_1C871356D;
LABEL_1589:
  LOWORD(v1190) = 773;
  __p[0] = v966;
  __p[1] = v967;
  *(_QWORD *)&v1189 = ".highbits";
  v969 = (llvm::Constant **)sub_1C506ED1C(v926, (uint64_t)v1207, (uint64_t)v1200, (uint64_t)__p, 0);
  v971 = llvm::Constant::getNullValue(*v969, v970);
  LOWORD(v1190) = 257;
  Not = (uint64_t ***)llvm::CmpInst::Create(53, v956, (uint64_t)v969, (uint64_t)v971, (uint64_t)__p, 0);
  if (Not)
    return (llvm::UndefValue **)Not;
LABEL_1511:
  if (((_DWORD)(*a2)[1] & 0xFE) != 0x12 || (Not = (uint64_t ***)sub_1C581500C((uint64_t)a2, *(_QWORD *)(a1 + 24))) == 0)
  {
    v935 = *v7;
    v936 = *(_QWORD *)*v7;
    v937 = *(_DWORD *)(v936 + 8);
    if (v937 != 15)
      goto LABEL_1645;
    v938 = a2[5][7];
    if ((v937 & 0xFE) == 0x12)
      v937 = *(_DWORD *)(**(_QWORD **)(v936 + 16) + 8);
    if (v938)
    {
      v939 = v938[14];
      if (v939)
      {
        if ((*(_BYTE *)(v939 + 17) & 1) != 0)
          goto LABEL_1645;
      }
    }
    if (v937 > 0xFF)
      goto LABEL_1645;
    if (*(unsigned __int8 *)(v935 + 16) < 0x1Cu)
      goto LABEL_1645;
    v951 = *v9;
    if (!*v9
      || *((unsigned __int8 *)v951 + 16) > 0x14u
      || (llvm::Constant::isNullValue(*v9) & 1) == 0 && (sub_1C4E71060((uint64_t)__p, v951) & 1) == 0)
    {
      goto LABEL_1645;
    }
    if (!llvm::Instruction::isLaunderOrStripInvariantGroup((llvm::Instruction *)v935)
      || ((v952 = *((_WORD *)a2 + 9) & 0x3F, v953 = *(_DWORD *)(v935 + 20), (v953 & 0x40000000) != 0)
        ? (v954 = *(uint64_t **)(v935 - 8))
        : (v954 = (uint64_t *)(v935 - 32 * (v953 & 0x7FFFFFF))),
          v1023 = *v954,
          v1024 = *v9,
          LOWORD(v1190) = 257,
          (Not = (uint64_t ***)llvm::CmpInst::Create(53, v952, v1023, (uint64_t)v1024, (uint64_t)__p, 0)) == 0))
    {
LABEL_1645:
      if (((_DWORD)(*a2)[1] & 0xFE) == 0x12)
        goto LABEL_1646;
      v940 = *v7;
      v941 = *(_QWORD *)(*v7 + 8);
      if (!v941)
        goto LABEL_1646;
      if (*(_QWORD *)(v941 + 8))
        goto LABEL_1646;
      v942 = *(uint64_t **)(a1 + 24);
      v943 = *(_QWORD *)(a1 + 80);
      v944 = *(unsigned __int8 *)(v940 + 16);
      if (v944 <= 0x1B && v944 != 5)
        goto LABEL_1646;
      v945 = v944 <= 0x1B ? *(unsigned __int16 *)(v940 + 18) : v944 - 28;
      if (v945 != 49)
        goto LABEL_1646;
      v972 = *(_DWORD *)(v940 + 20);
      v973 = (v972 & 0x40000000) != 0 ? *(uint64_t **)(v940 - 8) : (uint64_t *)(v940 - 32 * (v972 & 0x7FFFFFF));
      v1009 = *v973;
      v1010 = *(_QWORD *)(v1009 + 8);
      if (!v1010)
        goto LABEL_1646;
      if (*(_QWORD *)(v1010 + 8))
        goto LABEL_1646;
      if (*(_BYTE *)(v1009 + 16) != 81)
        goto LABEL_1646;
      v1011 = *(unsigned __int8 **)(v1009 - 64);
      if (!v1011)
        goto LABEL_1646;
      v1012 = *(unsigned __int8 **)(v1009 - 32);
      if (!v1012)
        goto LABEL_1646;
      v1013 = *v9;
      if (!*v9)
        goto LABEL_1646;
      if (*((unsigned __int8 *)v1013 + 16) > 0x14u)
        goto LABEL_1646;
      v1014 = *(_WORD *)(v1009 + 18);
      if ((llvm::Constant::isNullValue(*v9) & 1) == 0 && (sub_1C4E71060((uint64_t)__p, v1013) & 1) == 0)
        goto LABEL_1646;
      v1015 = 0;
      v1016 = *(uint64_t ***)v1011;
      if (!*(_QWORD *)v1011 || *((_BYTE *)v1016 + 8) != 18)
        goto LABEL_1647;
      if (*((_DWORD *)v1016[3] + 2) != 13)
        goto LABEL_1646;
      v1017 = *((_WORD *)a2 + 9);
      v1018 = *((_DWORD *)v1016 + 8) * (*((_DWORD *)v1016[3] + 2) >> 8);
      v1019 = *(char **)(v943 + 32);
      v1020 = *(_QWORD *)(v943 + 40);
      v1021 = &v1019[v1020];
      if (v1018 <= 0xFF)
      {
        v1022 = (char *)memchr(v1019, (char)v1018, v1020);
        if (v1022)
          v1021 = v1022;
      }
      if (v1021 - v1019 == v1020)
      {
LABEL_1646:
        v1015 = 0;
        goto LABEL_1647;
      }
      v1015 = 0;
      v1042 = v1017 & 0x3F;
      if ((v1017 & 0x3E) != 0x20 || (v1014 & 0x3F) != 0x21)
        goto LABEL_1647;
      v1043 = (_QWORD *)v942[8];
      LODWORD(__p[0]) = v1018;
      if (v1018 <= 63)
      {
        if (v1018 <= 31)
        {
          switch(v1018)
          {
            case 16:
              v1044 = (_QWORD *)(*v1043 + 1936);
              goto LABEL_1701;
            case 8:
              v1044 = (_QWORD *)(*v1043 + 1912);
              goto LABEL_1701;
            case 1:
              v1044 = (_QWORD *)(*v1043 + 1888);
              goto LABEL_1701;
          }
        }
        else if (v1018 == 32)
        {
          v1044 = (_QWORD *)(*v1043 + 1960);
          goto LABEL_1701;
        }
      }
      else
      {
        if (v1018 == 64)
        {
          v1044 = (_QWORD *)(*v1043 + 1984);
          goto LABEL_1701;
        }
        if (v1018 == 128)
        {
          v1044 = (_QWORD *)(*v1043 + 2008);
          goto LABEL_1701;
        }
      }
      v1083 = sub_1C5270984(*v1043 + 2168, __p);
      v1044 = (_QWORD *)*((_QWORD *)v1083 + 1);
      if (!v1044)
      {
        v1084 = v1083;
        v1044 = (_QWORD *)sub_1C484358C(*v1043 + 2040, 24, 3);
        v1085 = (int)__p[0];
        *v1044 = v1043;
        v1044[2] = 0;
        v1044[1] = (v1085 << 8) | 0xDu;
        *((_QWORD *)v1084 + 1) = v1044;
      }
LABEL_1701:
      if ((v1011[23] & 0x10) == 0)
      {
        v1055 = 0;
        v1054 = &byte_1C871356D;
LABEL_1710:
        LOWORD(v1190) = 773;
        __p[0] = v1054;
        __p[1] = v1055;
        *(_QWORD *)&v1189 = ".scalar";
        v1057 = sub_1C4773E38(v942, 49, v1011, (uint64_t)v1044, (uint64_t)__p);
        if ((v1012[23] & 0x10) == 0)
        {
          v1068 = 0;
          v1067 = &byte_1C871356D;
LABEL_1719:
          LOWORD(v1190) = 773;
          __p[0] = v1067;
          __p[1] = v1068;
          *(_QWORD *)&v1189 = ".scalar";
          v1070 = sub_1C4773E38(v942, 49, v1012, (uint64_t)v1044, (uint64_t)__p);
          if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
          {
            v1081 = 0;
            v1080 = &byte_1C871356D;
            goto LABEL_1728;
          }
          v1071 = ***a2;
          v1072 = *(_QWORD *)(v1071 + 152);
          v1073 = *(unsigned int *)(v1071 + 168);
          if ((_DWORD)v1073)
          {
            LODWORD(v1074) = (v1073 - 1) & ((a2 >> 4) ^ (a2 >> 9));
            v1075 = (uint64_t ****)(v1072 + 16 * v1074);
            v1076 = *v1075;
            if (*v1075 == a2)
            {
LABEL_1727:
              v1079 = v1075[1];
              v1082 = *v1079;
              v1080 = (char *)(v1079 + 2);
              v1081 = v1082;
LABEL_1728:
              LOWORD(v1190) = 261;
              __p[0] = v1080;
              __p[1] = v1081;
              v1015 = llvm::CmpInst::Create(53, v1042, (uint64_t)v1057, (uint64_t)v1070, (uint64_t)__p, 0);
LABEL_1647:
              if (v1015)
                return (llvm::UndefValue **)v1015;
              else
                return 0;
            }
            v1077 = 1;
            while (v1076 != (uint64_t ***)-4096)
            {
              v1078 = v1074 + v1077++;
              v1074 = v1078 & (v1073 - 1);
              v1076 = *(uint64_t ****)(v1072 + 16 * v1074);
              if (v1076 == a2)
              {
                v1075 = (uint64_t ****)(v1072 + 16 * v1074);
                goto LABEL_1727;
              }
            }
          }
          v1075 = (uint64_t ****)(v1072 + 16 * v1073);
          goto LABEL_1727;
        }
        v1058 = ***(_QWORD ***)v1012;
        v1059 = *(_QWORD *)(v1058 + 152);
        v1060 = *(unsigned int *)(v1058 + 168);
        if ((_DWORD)v1060)
        {
          LODWORD(v1061) = (v1060 - 1) & ((v1012 >> 4) ^ (v1012 >> 9));
          v1062 = (unsigned __int8 **)(v1059 + 16 * v1061);
          v1063 = *v1062;
          if (*v1062 == v1012)
          {
LABEL_1718:
            v1066 = v1062[1];
            v1069 = *(void **)v1066;
            v1067 = (char *)(v1066 + 16);
            v1068 = v1069;
            goto LABEL_1719;
          }
          v1064 = 1;
          while (v1063 != (unsigned __int8 *)-4096)
          {
            v1065 = v1061 + v1064++;
            v1061 = v1065 & (v1060 - 1);
            v1063 = *(unsigned __int8 **)(v1059 + 16 * v1061);
            if (v1063 == v1012)
            {
              v1062 = (unsigned __int8 **)(v1059 + 16 * v1061);
              goto LABEL_1718;
            }
          }
        }
        v1062 = (unsigned __int8 **)(v1059 + 16 * v1060);
        goto LABEL_1718;
      }
      v1045 = ***(_QWORD ***)v1011;
      v1046 = *(_QWORD *)(v1045 + 152);
      v1047 = *(unsigned int *)(v1045 + 168);
      if ((_DWORD)v1047)
      {
        LODWORD(v1048) = (v1047 - 1) & ((v1011 >> 4) ^ (v1011 >> 9));
        v1049 = (unsigned __int8 **)(v1046 + 16 * v1048);
        v1050 = *v1049;
        if (*v1049 == v1011)
        {
LABEL_1709:
          v1053 = v1049[1];
          v1056 = *(void **)v1053;
          v1054 = (char *)(v1053 + 16);
          v1055 = v1056;
          goto LABEL_1710;
        }
        v1051 = 1;
        while (v1050 != (unsigned __int8 *)-4096)
        {
          v1052 = v1048 + v1051++;
          v1048 = v1052 & (v1047 - 1);
          v1050 = *(unsigned __int8 **)(v1046 + 16 * v1048);
          if (v1050 == v1011)
          {
            v1049 = (unsigned __int8 **)(v1046 + 16 * v1048);
            goto LABEL_1709;
          }
        }
      }
      v1049 = (unsigned __int8 **)(v1046 + 16 * v1047);
      goto LABEL_1709;
    }
  }
  return (llvm::UndefValue **)Not;
}

uint64_t sub_1C58142C8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  llvm::Type ***v14;
  llvm::Type **v15;
  int v16;
  llvm::Type ***v17;
  llvm::Type *v18;
  llvm::Type *v19;
  const char *v20;
  unsigned int PrimitiveSizeInBits;
  const char *v22;
  _QWORD *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  const char *v32;
  unsigned int v33;
  uint64_t v34;
  llvm::APInt *v36;
  unsigned int v37;
  int v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  void *v43;
  void *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  uint64_t v50;
  int8x8_t *v51;
  size_t v52;
  uint64_t v53;
  uint8x8_t v54;
  int v55;
  int v56;
  int64_t v57;
  int8x8_t *v58;
  int64_t v59;
  int8x8_t v60;
  uint8x8_t v61;
  int v62;
  unint64_t v63;
  int v64;
  char v65;
  uint64_t *v66;
  void *v67;
  void *v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  uint64_t Declaration;
  uint64_t **v72;
  uint64_t v73;
  unsigned int v74;
  int v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  int v82;
  BOOL v83;
  unsigned int v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  unsigned int v92;
  int v93;
  uint64_t v94;
  int v95;
  unsigned int v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  int v100;
  BOOL v101;
  unsigned int v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v109;
  const char *v110;
  unint64_t v111;
  BOOL v112;
  llvm::ValueAsMetadata *v113;
  const llvm::APInt *v114;
  llvm::Value **v115;
  unsigned __int8 *v116;
  uint64_t v117;
  unsigned __int8 *v118;
  llvm::Value **v119;
  uint64_t v120;
  llvm::Value **v121;
  uint64_t v122;
  unsigned int v123;
  int v124;
  uint64_t v125;
  int v126;
  unsigned int v127;
  _QWORD *v128;
  uint64_t v129;
  _QWORD *v130;
  int v131;
  BOOL v132;
  unsigned int v133;
  _QWORD *v134;
  _QWORD *v135;
  unint64_t v136;
  uint64_t v137;
  void *v138;
  int v139;
  llvm::Value ***v140;
  uint64_t v141;
  unsigned __int8 *v142;
  uint64_t *v143;
  unsigned __int8 *v144;
  llvm::Value *v145;
  void *v146;
  unsigned int v147;
  __int16 v148;
  int8x8_t *v149;
  unsigned int v150;
  uint64_t v151;
  void *__s1;
  unsigned __int8 *v153;
  uint64_t v154;

  v154 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*a2 + 8) != 13 || *((unsigned __int8 *)a2 + 16) < 0x1Cu)
    return 0;
  v9 = *((_DWORD *)a2 + 5);
  if ((v9 & 0x40000000) != 0)
    v10 = (uint64_t *)*(a2 - 1);
  else
    v10 = &a2[-4 * (v9 & 0x7FFFFFF)];
  v11 = *v10;
  v12 = v10[4];
  v13 = *(_DWORD *)(v11 + 20);
  if ((v13 & 0x40000000) != 0)
    v14 = *(llvm::Type ****)(v11 - 8);
  else
    v14 = (llvm::Type ***)(v11 - 32 * (v13 & 0x7FFFFFF));
  v15 = *v14;
  v16 = *(_DWORD *)(v12 + 20);
  if ((v16 & 0x40000000) != 0)
    v17 = *(llvm::Type ****)(v12 - 8);
  else
    v17 = (llvm::Type ***)(v12 - 32 * (v16 & 0x7FFFFFF));
  v18 = *v15;
  v142 = (unsigned __int8 *)*v17;
  v19 = **v17;
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*v15);
  if ((_DWORD)v20 == 1)
  v144 = (unsigned __int8 *)v15;
  v24 = llvm::Type::getPrimitiveSizeInBits(v19);
  if ((_DWORD)v22 == 1)
  if (v24 <= PrimitiveSizeInBits)
    v25 = (uint64_t)v18;
  else
    v25 = (uint64_t)v19;
  if (v24 <= PrimitiveSizeInBits)
    v26 = PrimitiveSizeInBits;
  else
    v26 = v24;
  v151 = v25;
  v27 = a2[1];
  if (v27)
  {
    LODWORD(v23) = -1;
    v28 = a2[1];
    do
    {
      v29 = (int)v23;
      if (!(_DWORD)v23)
        break;
      v28 = *(_QWORD *)(v28 + 8);
      LODWORD(v23) = (_DWORD)v23 + 1;
    }
    while (v28);
    if (!v29)
    {
      do
      {
        v30 = *(_QWORD *)(v27 + 24);
        if (v30 != a1)
        {
          v31 = *(unsigned __int8 *)(v30 + 16);
          if (v30 && v31 == 66)
          {
            v33 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v30);
            if ((_DWORD)v32 == 1)
            if (v26 < v33)
              return 0;
          }
          else
          {
            if (!v30 || v31 != 56)
              return 0;
            v34 = *(_QWORD *)(v30 - 32);
            if (!v34 || *(_BYTE *)(v34 + 16) != 16)
              return 0;
            v36 = (llvm::APInt *)(v34 + 24);
            v37 = *(_DWORD *)(v34 + 32);
            v38 = v37 > 0x40
                ? llvm::APInt::countLeadingZerosSlowCase(v36)
                : v37 + __clz(*(_QWORD *)v36) - 64;
            if (v37 - v38 > v26)
              return 0;
          }
        }
        v27 = *(_QWORD *)(v27 + 8);
      }
      while (v27);
    }
  }
  switch(*(_WORD *)(a1 + 18) & 0x3F)
  {
    case ' ':
    case '!':
      v39 = *(unsigned __int8 *)(a3 + 16);
      if (v39 != 56)
      {
        if (v39 == 5)
        {
          if (*(_WORD *)(a3 + 18) == 28)
          {
            v23 = (_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
            v40 = (_QWORD *)*v23;
            if (*v23)
            {
              v47 = v23[4];
              LOBYTE(v23) = v47 != 0 && *(_BYTE *)(v47 + 16) == 16;
              if ((_BYTE)v23)
                v41 = v47;
              else
                v41 = 0;
              goto LABEL_85;
            }
            v41 = 0;
          }
          else
          {
            v41 = 0;
            v40 = 0;
          }
          LOBYTE(v23) = 0;
        }
        else
        {
          v41 = 0;
          v40 = 0;
        }
LABEL_85:
        v42 = (v39 == 5) & v23;
        goto LABEL_86;
      }
      v40 = *(_QWORD **)(a3 - 64);
      if (!v40)
        return 0;
      v41 = *(_QWORD *)(a3 - 32);
      if (!v41 || *(_BYTE *)(v41 + 16) != 16)
        return 0;
      v42 = 1;
LABEL_86:
      if (v42)
        v49 = v40 == a2;
      else
        v49 = 0;
      if (v49)
      {
        v50 = *(unsigned int *)(v41 + 32);
        v150 = v50;
        if (v50 > 0x40)
        {
          v52 = ((unint64_t)(v50 + 63) >> 3) & 0x3FFFFFF8;
          v51 = (int8x8_t *)operator new[]();
          memcpy(v51, *(const void **)(v41 + 24), v52);
        }
        else
        {
          v51 = *(int8x8_t **)(v41 + 24);
        }
        v149 = v51;
        llvm::APInt::operator+=((uint64_t)&v149, 1uLL);
        v53 = v150;
        v150 = 0;
        if (v53 > 0x40)
        {
          v56 = 0;
          v57 = (unint64_t)(v53 + 63) >> 6;
          v58 = v149;
          v59 = v57;
          do
          {
            v60 = *v58++;
            v61 = (uint8x8_t)vcnt_s8(v60);
            v61.i16[0] = vaddlv_u8(v61);
            v56 += v61.i32[0];
            --v59;
          }
          while (v59);
          if (v56 != 1)
            goto LABEL_108;
          v62 = 0;
          do
          {
            v112 = v57-- < 1;
            if (v112)
              break;
            v63 = (unint64_t)v149[v57];
            v62 += __clz(v63);
          }
          while (!v63);
          v64 = v53 | 0xFFFFFFC0;
          if ((v53 & 0x3F) == 0)
            v64 = 0;
          v55 = v62 + v64;
        }
        else
        {
          v54 = (uint8x8_t)vcnt_s8((int8x8_t)v149);
          v54.i16[0] = vaddlv_u8(v54);
          if (v54.u32[0] != 1)
            goto LABEL_108;
          v55 = v53 + __clz((unint64_t)v149) - 64;
        }
        if ((_DWORD)v53 + ~v55 == (_DWORD)v26)
        {
          v65 = 0;
LABEL_109:
          if (v53 >= 0x41 && v149)
            MEMORY[0x1CAA32F9C](v149, 0x1000C8000313F17);
          if ((v65 & 1) != 0)
            return 0;
LABEL_113:
          v66 = *(uint64_t **)(a4 + 24);
          v66[6] = a2[5];
          v66[7] = (uint64_t)(a2 + 3);
          v67 = (void *)a2[6];
          v146 = v67;
          if (v67)
          {
            llvm::MetadataTracking::track((uint64_t)&v146, (unsigned __int8 *)v67, 2);
            v68 = v146;
          }
          else
          {
            v68 = 0;
          }
          v69 = v144;
          sub_1C4774EF4((uint64_t)v66, 0, (uint64_t)v68);
          if (v146)
            llvm::MetadataTracking::untrack((uint64_t)&v146, (unsigned __int8 *)v146);
          if (v24 > PrimitiveSizeInBits)
          {
            v148 = 257;
            v69 = sub_1C4773E38(v66, 39, v144, v151, (uint64_t)&v146);
          }
          if (v24 >= PrimitiveSizeInBits)
          {
            v70 = v142;
          }
          else
          {
            v148 = 257;
            v70 = sub_1C4773E38(v66, 39, v142, v151, (uint64_t)&v146);
          }
          Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56) + 40), 309, &v151, 1);
          if (Declaration)
            v72 = *(uint64_t ***)(Declaration + 24);
          else
            v72 = 0;
          __s1 = v69;
          v153 = v70;
          v146 = "umul";
          v148 = 259;
          v143 = (uint64_t *)sub_1C4774778(v66, v72, Declaration, (uint64_t *)&__s1, 2, (uint64_t)&v146, 0);
          v73 = *(_QWORD *)(a4 + 32);
          v74 = *(_DWORD *)(v73 + 8);
          v146 = a2;
          v147 = v74;
          v75 = *(_DWORD *)(v73 + 2080);
          if (v75)
          {
            v76 = *(_QWORD *)(v73 + 2064);
            v77 = v75 - 1;
            v78 = v77 & ((a2 >> 4) ^ (a2 >> 9));
            v79 = (_QWORD *)(v76 + 16 * v78);
            v80 = (_QWORD *)*v79;
            if ((_QWORD *)*v79 == a2)
              goto LABEL_142;
            v81 = 0;
            v82 = 1;
            while (v80 != (_QWORD *)-4096)
            {
              if (v81)
                v83 = 0;
              else
                v83 = v80 == (_QWORD *)-8192;
              if (v83)
                v81 = v79;
              v84 = v78 + v82++;
              v78 = v84 & v77;
              v79 = (_QWORD *)(v76 + 16 * v78);
              v80 = (_QWORD *)*v79;
              if ((_QWORD *)*v79 == a2)
                goto LABEL_142;
            }
            if (v81)
              v85 = v81;
            else
              v85 = v79;
          }
          else
          {
            v85 = 0;
          }
          v86 = sub_1C4D8D8F4((_DWORD *)(v73 + 2064), (uint64_t)&v146, (uint64_t *)&v146, v85);
          *v86 = v146;
          *((_DWORD *)v86 + 2) = v147;
          v87 = *(unsigned int *)(v73 + 8);
          if (v87 >= *(_DWORD *)(v73 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v73, v73 + 16, v87 + 1, 8);
            LODWORD(v87) = *(_DWORD *)(v73 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v73 + 8 * v87) = a2;
          ++*(_DWORD *)(v73 + 8);
LABEL_142:
          v88 = a2[1];
          if (v88)
          {
            v89 = -1;
            do
            {
              v90 = v89;
              if (!v89)
                break;
              v88 = *(_QWORD *)(v88 + 8);
              ++v89;
            }
            while (v88);
            if (!v90)
            {
              LODWORD(__s1) = 0;
              v146 = "umul.value";
              v148 = 259;
              v145 = (llvm::Value *)sub_1C506DBC4((uint64_t)v66, v143, (unsigned int *)&__s1, 1, (uint64_t)&v146);
              v106 = a2[1];
              if (v106)
              {
                v140 = (llvm::Value ***)((char *)v145 + 8);
                v141 = v26;
                do
                {
                  v107 = *(_QWORD *)(v106 + 24);
                  v106 = *(_QWORD *)(v106 + 8);
                  if (v107 != a1 && v107 != a3)
                  {
                    v109 = *(unsigned __int8 *)(v107 + 16);
                    if (v107 && v109 == 66)
                    {
                      v111 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v107);
                      if ((_DWORD)v110 == 1)
                      if (v111 == v26)
                      {
                        sub_1C577F888(a4, (llvm::ValueAsMetadata *)v107, v145);
                      }
                      else
                      {
                        v119 = (llvm::Value **)(v107 - 32);
                        if (*(_QWORD *)(v107 - 32))
                        {
                          **(_QWORD **)(v107 - 16) = *(_QWORD *)(v107 - 24);
                          v120 = *(_QWORD *)(v107 - 24);
                          if (v120)
                            *(_QWORD *)(v120 + 16) = *(_QWORD *)(v107 - 16);
                        }
                        *v119 = v145;
                        if (v145)
                        {
                          v121 = *v140;
                          *(_QWORD *)(v107 - 24) = *v140;
                          if (v121)
                            v121[2] = (llvm::Value *)(v107 - 24);
                          *(_QWORD *)(v107 - 16) = v140;
                          *v140 = v119;
                        }
                      }
                    }
                    else
                    {
                      v112 = v109 - 41 < 0x12 && v109 > 0x1B;
                      if (v112)
                        v113 = (llvm::ValueAsMetadata *)v107;
                      else
                        v113 = 0;
                      llvm::APInt::trunc((llvm::APInt *)(*((_QWORD *)v113 - 4) + 24), v26, (llvm::APInt *)&__s1);
                      v148 = 257;
                      v115 = llvm::ConstantInt::get(*(llvm::ConstantInt ***)v145, (llvm::Type *)&__s1, v114);
                      v116 = (unsigned __int8 *)sub_1C4D89BCC((uint64_t)v66, v145, (uint64_t)v115, (uint64_t)&v146);
                      v117 = *(_QWORD *)v113;
                      v148 = 257;
                      v118 = sub_1C4773E38(v66, 39, v116, v117, (uint64_t)&v146);
                      sub_1C577F888(a4, v113, (llvm::Value *)v118);
                      if (v153 >= 0x41 && __s1)
                        MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
                      v26 = v141;
                    }
                    v122 = *(_QWORD *)(a4 + 32);
                    v123 = *(_DWORD *)(v122 + 8);
                    v146 = (void *)v107;
                    v147 = v123;
                    v124 = *(_DWORD *)(v122 + 2080);
                    if (!v124)
                    {
                      v134 = 0;
LABEL_209:
                      v135 = sub_1C4D8D8F4((_DWORD *)(v122 + 2064), (uint64_t)&v146, (uint64_t *)&v146, v134);
                      *v135 = v146;
                      *((_DWORD *)v135 + 2) = v147;
                      v136 = *(unsigned int *)(v122 + 8);
                      if (v136 >= *(unsigned int *)(v122 + 12))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod(v122, v122 + 16, v136 + 1, 8);
                        v136 = *(unsigned int *)(v122 + 8);
                      }
                      *(_QWORD *)(*(_QWORD *)v122 + 8 * v136) = v107;
                      ++*(_DWORD *)(v122 + 8);
                      continue;
                    }
                    v125 = *(_QWORD *)(v122 + 2064);
                    v126 = v124 - 1;
                    v127 = v126 & ((v107 >> 4) ^ (v107 >> 9));
                    v128 = (_QWORD *)(v125 + 16 * v127);
                    v129 = *v128;
                    if (*v128 != v107)
                    {
                      v130 = 0;
                      v131 = 1;
                      while (v129 != -4096)
                      {
                        if (v130)
                          v132 = 0;
                        else
                          v132 = v129 == -8192;
                        if (v132)
                          v130 = v128;
                        v133 = v127 + v131++;
                        v127 = v133 & v126;
                        v128 = (_QWORD *)(v125 + 16 * v127);
                        v129 = *v128;
                        if (*v128 == v107)
                          goto LABEL_212;
                      }
                      if (v130)
                        v134 = v130;
                      else
                        v134 = v128;
                      goto LABEL_209;
                    }
                  }
LABEL_212:
                  ;
                }
                while (v106);
              }
            }
          }
          if (*(unsigned __int8 *)(a3 + 16) >= 0x1Cu)
          {
            v91 = *(_QWORD *)(a4 + 32);
            v92 = *(_DWORD *)(v91 + 8);
            v146 = (void *)a3;
            v147 = v92;
            v93 = *(_DWORD *)(v91 + 2080);
            if (v93)
            {
              v94 = *(_QWORD *)(v91 + 2064);
              v95 = v93 - 1;
              v96 = v95 & ((a3 >> 4) ^ (a3 >> 9));
              v97 = (_QWORD *)(v94 + 16 * v96);
              v98 = *v97;
              if (*v97 == a3)
                goto LABEL_165;
              v99 = 0;
              v100 = 1;
              while (v98 != -4096)
              {
                if (v99)
                  v101 = 0;
                else
                  v101 = v98 == -8192;
                if (v101)
                  v99 = v97;
                v102 = v96 + v100++;
                v96 = v102 & v95;
                v97 = (_QWORD *)(v94 + 16 * v96);
                v98 = *v97;
                if (*v97 == a3)
                  goto LABEL_165;
              }
              if (v99)
                v103 = v99;
              else
                v103 = v97;
            }
            else
            {
              v103 = 0;
            }
            v104 = sub_1C4D8D8F4((_DWORD *)(v91 + 2064), (uint64_t)&v146, (uint64_t *)&v146, v103);
            *v104 = v146;
            *((_DWORD *)v104 + 2) = v147;
            v105 = *(unsigned int *)(v91 + 8);
            if (v105 >= *(_DWORD *)(v91 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v91, v91 + 16, v105 + 1, 8);
              LODWORD(v105) = *(_DWORD *)(v91 + 8);
            }
            *(_QWORD *)(*(_QWORD *)v91 + 8 * v105) = a3;
            ++*(_DWORD *)(v91 + 8);
          }
LABEL_165:
          __asm { BR              X11 }
        }
LABEL_108:
        v65 = 1;
        goto LABEL_109;
      }
      return 0;
    case '"':
    case '%':
      if (!a3 || *(_BYTE *)(a3 + 16) != 16)
        return 0;
      v147 = v26;
      if (v26 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v146, -1, 1);
      }
      else
      {
        if ((_DWORD)v26)
          v43 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v26);
        else
          v43 = 0;
        v146 = v43;
      }
      llvm::APInt::zext((llvm::APInt *)&v146, *(_DWORD *)(a3 + 32), (uint64_t)&__s1);
      if (v147 >= 0x41 && v146)
        MEMORY[0x1CAA32F9C](v146, 0x1000C8000313F17);
      v44 = __s1;
      v146 = __s1;
      v147 = v153;
      if (v153 > 0x40)
      {
        v48 = memcmp(__s1, *(const void **)(a3 + 24), (((unint64_t)v153 + 63) >> 3) & 0x3FFFFFF8);
        if (v44)
          MEMORY[0x1CAA32F9C](v44, 0x1000C8000313F17);
        if (v48)
          return 0;
      }
      else if (__s1 != *(void **)(a3 + 24))
      {
        return 0;
      }
      goto LABEL_113;
    case '#':
    case '$':
      if (!a3 || *(_BYTE *)(a3 + 16) != 16)
        return 0;
      v147 = *(_DWORD *)(a3 + 32);
      if (v147 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v146, 0, 0);
        v137 = v147;
        v46 = 1 << v26;
        if (v147 > 0x40)
        {
          v138 = v146;
          *((_QWORD *)v146 + (v26 >> 6)) |= v46;
          v139 = memcmp(v138, *(const void **)(a3 + 24), ((unint64_t)(v137 + 63) >> 3) & 0x3FFFFFF8);
          MEMORY[0x1CAA32F9C](v138, 0x1000C8000313F17);
          if (v139)
            return 0;
          goto LABEL_113;
        }
        v45 = (unint64_t)v146;
      }
      else
      {
        v45 = 0;
        v46 = 1 << v26;
      }
      if ((v45 | v46) != *(_QWORD *)(a3 + 24))
        return 0;
      goto LABEL_113;
    default:
      return 0;
  }
}

_BYTE **sub_1C581500C(uint64_t a1, uint64_t a2)
{
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::APFloatBase *SplatValue;
  llvm::Constant *v12;
  _DWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int *i;
  int v17;
  uint64_t v20;
  uint64_t FCmpHelper;
  llvm::PoisonValue **v22;
  char *v23;
  void *v24;
  uint64_t v25;
  llvm::Type *v26;
  _QWORD *v27;
  llvm::Value **Splat;
  uint64_t v29;
  llvm::PoisonValue **v30;
  char *v31;
  void *v32;
  uint64_t v33;
  llvm::Type *v34;
  _QWORD *v35;
  _BYTE v36[32];
  __int16 v37;
  void *v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  void *v42;
  uint64_t v43;
  _QWORD v44[2];
  __int16 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v3 = *(_WORD *)(a1 + 18);
  v4 = *(_QWORD *)(a1 - 64);
  v5 = *(_QWORD *)(a1 - 32);
  v40 = 0;
  v41 = 0;
  v38 = 0;
  v39 = 0;
  v42 = &v41;
  v44[0] = &v38;
  v6 = 0;
  if (!sub_1C57907A8((uint64_t)&v42, v4))
    return v6;
  v7 = v3 & 0x3F;
  v8 = *v41;
  v42 = &v40;
  v44[0] = &v38;
  if (sub_1C5790824((uint64_t)&v42, v5) && v8 == *v40)
  {
    v9 = *(_QWORD *)(v4 + 8);
    if (v9 && !*(_QWORD *)(v9 + 8) || (v20 = *(_QWORD *)(v5 + 8)) != 0 && !*(_QWORD *)(v20 + 8))
    {
      v45 = 257;
      if (v7 > 0xF)
        FCmpHelper = sub_1C4774B48(a2, v7, (uint64_t)v41, (uint64_t)v40, (uint64_t)&v42);
      else
        FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper(a2, v7, v41, (uint64_t)v40, (uint64_t)&v42, 0, 0);
      v22 = (llvm::PoisonValue **)FCmpHelper;
      v23 = (char *)operator new(0xA8uLL);
      *((_DWORD *)v23 + 21) = *((_DWORD *)v23 + 21) & 0x38000000 | 2;
      v6 = (_BYTE **)(v23 + 64);
      *(_QWORD *)v23 = 0;
      *((_QWORD *)v23 + 1) = 0;
      *((_QWORD *)v23 + 2) = 0;
      *((_QWORD *)v23 + 3) = v23 + 64;
      *((_QWORD *)v23 + 4) = 0;
      *((_QWORD *)v23 + 5) = 0;
      *((_QWORD *)v23 + 6) = 0;
      *((_QWORD *)v23 + 7) = v23 + 64;
      v24 = v38;
      v25 = v39;
      v45 = 257;
      v27 = llvm::PoisonValue::get(*v22, v26);
      llvm::ShuffleVectorInst::ShuffleVectorInst(v6, v22, (uint64_t)v27, v24, v25, (uint64_t)&v42, 0);
      return v6;
    }
  }
  else
  {
    v9 = *(_QWORD *)(v4 + 8);
  }
  if (v9 && !*(_QWORD *)(v9 + 8) && *(unsigned __int8 *)(v5 + 16) <= 0x14u && v5 != 0)
  {
    SplatValue = llvm::Constant::getSplatValue((llvm::Constant *)v5, (llvm::Type *)1);
    if (SplatValue)
    {
      if (v39)
      {
        v13 = v38;
        v14 = 4 * v39;
        v15 = 4 * v39;
        for (i = (int *)v38; ; ++i)
        {
          v17 = *i;
          if (*i != -1)
            break;
          v6 = 0;
          v15 -= 4;
          if (!v15)
            return v6;
        }
        while (v17 == *v13 || *v13 == -1)
        {
          ++v13;
          v14 -= 4;
          if (!v14)
          {
            Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v8 + 32) | ((unint64_t)(*(_BYTE *)(v8 + 8) == 19) << 32)), (uint64_t)SplatValue, v12);
            v42 = v44;
            v43 = 0x800000000;
            sub_1C4893E04((char *)&v42, v39, v17);
            v37 = 257;
            if (v7 > 0xF)
              v29 = sub_1C4774B48(a2, v7, (uint64_t)v41, (uint64_t)Splat, (uint64_t)v36);
            else
              v29 = llvm::IRBuilderBase::CreateFCmpHelper(a2, v7, v41, (uint64_t)Splat, (uint64_t)v36, 0, 0);
            v30 = (llvm::PoisonValue **)v29;
            v31 = (char *)operator new(0xA8uLL);
            *((_DWORD *)v31 + 21) = *((_DWORD *)v31 + 21) & 0x38000000 | 2;
            v6 = (_BYTE **)(v31 + 64);
            *(_QWORD *)v31 = 0;
            *((_QWORD *)v31 + 1) = 0;
            *((_QWORD *)v31 + 2) = 0;
            *((_QWORD *)v31 + 3) = v31 + 64;
            *((_QWORD *)v31 + 4) = 0;
            *((_QWORD *)v31 + 5) = 0;
            *((_QWORD *)v31 + 6) = 0;
            *((_QWORD *)v31 + 7) = v31 + 64;
            v32 = v42;
            v33 = v43;
            v37 = 257;
            v35 = llvm::PoisonValue::get(*v30, v34);
            llvm::ShuffleVectorInst::ShuffleVectorInst(v6, v30, (uint64_t)v35, v32, v33, (uint64_t)v36, 0);
            if (v42 != v44)
              free(v42);
            return v6;
          }
        }
      }
    }
  }
  return 0;
}

llvm::UndefValue **sub_1C5815328(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  unsigned int v5;
  llvm::Constant **v6;
  unsigned int v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  char v14;
  llvm::Value **v15;
  llvm::Type *v16;
  llvm::Constant *v18;
  llvm::Type *v19;
  llvm::Value **NullValue;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  __int16 v24;
  llvm::Type *v25;
  _DWORD *v26;
  __int16 v27;
  llvm::Constant **v28;
  uint64_t v29;
  uint64_t v30;
  llvm::Constant **v31;
  llvm::Value **v32;
  uint64_t v33;
  llvm::Constant ***v34;
  llvm::Value *v35;
  llvm::Value *v36;
  llvm::Type *v38;
  llvm::Value **v39;
  char *v40;
  uint64_t v41;
  llvm::Value ***v42;
  uint64_t v43;
  unsigned int v44;
  llvm::Constant *v45;
  _QWORD *v46;
  llvm::Constant *v47;
  llvm::Value *v48;
  llvm::Value ****v49;
  llvm::Value *v50;
  uint64_t v52;
  llvm::Type *v53;
  unsigned int v54;
  unsigned int v55;
  void *v56;
  uint64_t v57;
  llvm::Value **v58;
  int v59;
  uint64_t *v60;
  int FPMantissaWidth;
  int v62;
  llvm::Type ***v63;
  int v64;
  int v65;
  unsigned __int8 **v66;
  int v67;
  uint64_t v68;
  BOOL v70;
  uint64_t v71;
  char v72;
  int v73;
  _BOOL4 v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t **v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t **v90;
  uint64_t v91;
  unsigned int v92;
  const llvm::APInt *v93;
  uint64_t v94;
  llvm::GlobalValue *v95;
  __int16 v96;
  uint64_t v97;
  char v98;
  int v99;
  _BOOL4 v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  llvm::detail::DoubleAPFloat *v107;
  int v108;
  const llvm::APInt *v109;
  int v110;
  uint64_t v111;
  llvm::Value *v112;
  llvm::ConstantInt *v113;
  uint64_t *v114;
  uint64_t v115;
  llvm::Value *v116;
  llvm::ConstantInt *v117;
  int v118;
  uint64_t *v119;
  uint64_t v120;
  int v121;
  llvm::Type *v122;
  int v123;
  const llvm::detail::IEEEFloat *v124;
  llvm::detail *v125;
  int v126;
  uint64_t v127;
  int v128;
  const llvm::detail::IEEEFloat *v129;
  llvm::detail *v130;
  int v131;
  unsigned __int8 *v132;
  _QWORD *v133;
  char v134;
  uint64_t v135;
  __int16 v136;
  _QWORD *v137;
  __int16 v138;
  llvm::Type *v139;
  _DWORD *v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  int v145;
  _BOOL4 v147;
  uint64_t v148;
  uint64_t **v149;
  uint64_t **v150;
  uint64_t **v151;
  uint64_t **v152;
  unint64_t v153;
  uint64_t *v154;
  llvm::Type *v155;
  const llvm::APInt *v156;
  int v157;
  char *v158;
  llvm::Value ***v159;
  unsigned __int8 *v160;
  llvm::Type *v161;
  llvm::Value **v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t ***v168;
  llvm::Value *v169;
  llvm::Value ****v170;
  llvm::Value *v171;
  __int16 v172;
  char *v173;
  _QWORD *v174;
  _QWORD *v175;
  unsigned __int8 *v176;
  uint64_t v177;
  unsigned int v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  llvm::Value **True;
  int v186;
  _BOOL4 v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t *v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  _BOOL4 v195;
  llvm::Value ***v196;
  unsigned __int8 *v197;
  llvm::Type *v198;
  llvm::Value **v199;
  uint64_t v200;
  unsigned int v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  llvm::Value *v205;
  llvm::Value ****v206;
  llvm::Value *v207;
  llvm::ConstantInt *v208;
  unsigned int v209;
  char v210;
  llvm::ConstantInt *v211;
  unsigned int v212;
  char v213;
  char *v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unsigned int v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  const llvm::APFloat *v230;
  int v231;
  uint64_t *v232;
  llvm::Value **v233;
  char *v234;
  llvm::Value ***v235;
  unsigned __int8 *v236;
  uint64_t v237;
  unsigned int v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  llvm::Value *v242;
  llvm::Value ****v243;
  llvm::Value *v244;
  uint64_t v245;
  _QWORD *v246;
  int v247;
  uint64_t v248;
  llvm::Type *v249;
  int PrimitiveSizeInBits;
  _QWORD *v251;
  unint64_t v252;
  llvm::Type *v253;
  unint64_t v254;
  uint64_t *v255;
  unsigned __int8 *v256;
  char *v257;
  llvm::Value ***v258;
  llvm::Type *v259;
  llvm::Value **v260;
  uint64_t v261;
  unsigned int v262;
  uint64_t v263;
  _QWORD *v264;
  uint64_t v265;
  llvm::Value *v266;
  llvm::Value ****v267;
  llvm::Value *v268;
  _DWORD *v269;
  _DWORD *v270;
  int v271;
  uint64_t *v272;
  uint64_t *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  uint64_t v284;
  uint64_t v285;
  char v286;
  uint64_t v287;
  int v288;
  uint64_t v289;
  llvm::Type *v290;
  uint64_t ***v291;
  llvm::Constant *v292;
  unsigned __int8 v293;
  _QWORD *v294;
  unsigned __int8 *v295;
  uint64_t v296;
  unsigned int v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t *v300;
  int v301;
  char v302;
  _QWORD *v303;
  uint64_t v304;
  uint64_t *v305;
  int v306;
  char v307;
  __int128 v308;
  _BYTE v309[32];
  uint64_t v310;

  v2 = a2;
  v310 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t *)(a2 - 64);
  v5 = sub_1C577E1A0(*(_QWORD *)(a2 - 64));
  v6 = (llvm::Constant **)(v2 - 32);
  v7 = sub_1C577E1A0(*(_QWORD *)(v2 - 32));
  v8 = *(_WORD *)(v2 + 18);
  if (v5 < v7)
    __asm { BR              X11 }
  v9 = v8 & 0x3F;
  v10 = *(_QWORD *)(v2 - 64);
  v11 = *(_QWORD *)(v2 - 32);
  v12 = (unint64_t)*(unsigned __int8 *)(v2 + 17) >> 1;
  *(_OWORD *)&v309[16] = *(_OWORD *)(a1 + 120);
  v13 = *(_OWORD *)(a1 + 104);
  v308 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)v309 = v13;
  *(_QWORD *)&v309[16] = v2;
  if ((_DWORD)v12 == 127)
    v14 = -1;
  else
    v14 = v12;
  v15 = sub_1C4E69950(v9, (unsigned __int8 *)v10, (unsigned __int8 *)v11, v14, (uint64_t)&v308, 3);
  if (v15)
    return sub_1C577F888(a1, (llvm::ValueAsMetadata *)v2, (llvm::Value *)v15);
  v18 = *(llvm::Constant **)v10;
  if (v10 != v11 || v9 > 0xE)
    goto LABEL_10;
  if (((1 << v9) & 0xAA) == 0)
  {
    if (((1 << v9) & 0x5500) != 0)
    {
      v24 = *(_WORD *)(v2 + 18) & 0xFFC0 | 8;
      goto LABEL_29;
    }
LABEL_10:
    if ((v9 - 7) <= 1)
    {
      if (!sub_1C4E7BA90((uint64_t)&v308, (llvm::Constant *)v10)
        && llvm::isKnownNeverNaN(v10, *(uint64_t **)(a1 + 64), 0))
      {
        NullValue = llvm::Constant::getNullValue(v18, v19);
        v21 = a1;
        v22 = v2;
        v23 = 0;
        return (llvm::UndefValue **)sub_1C577E2C8(v21, v22, v23, (uint64_t)NullValue);
      }
      if (!sub_1C4E7BA90((uint64_t)&v308, (llvm::Constant *)v11)
        && llvm::isKnownNeverNaN(v11, *(uint64_t **)(a1 + 64), 0))
      {
        NullValue = llvm::Constant::getNullValue(v18, v25);
        v21 = a1;
        v22 = v2;
        v23 = 1;
        return (llvm::UndefValue **)sub_1C577E2C8(v21, v22, v23, (uint64_t)NullValue);
      }
    }
    v294 = 0;
    v295 = 0;
    *(_QWORD *)&v308 = &v295;
    if (sub_1C4E7B6EC((_QWORD **)&v308, v10))
    {
      v303 = &v294;
      if (sub_1C4E7B6EC(&v303, v11))
      {
        v26 = operator new(0x80uLL);
        v26[21] = v26[21] & 0x38000000 | 2;
        *(_QWORD *)v26 = 0;
        *((_QWORD *)v26 + 1) = 0;
        *((_QWORD *)v26 + 4) = 0;
        *((_QWORD *)v26 + 2) = 0;
        *((_QWORD *)v26 + 3) = v26 + 16;
        *((_QWORD *)v26 + 5) = 0;
        *((_QWORD *)v26 + 6) = 0;
        *((_QWORD *)v26 + 7) = v26 + 16;
        __asm { BR              X9 }
      }
    }
    v292 = v18;
    v27 = *(_WORD *)(v2 + 18) & 0x3F;
    v28 = *(llvm::Constant ***)(v2 - 64);
    v29 = *(_QWORD *)(v2 - 32);
    if (sub_1C578ED28((uint64_t)&v308, (uint64_t)v28) && !sub_1C578ED28((uint64_t)&v303, v29))
      __asm { BR              X9 }
    v30 = v29;
    v31 = v28;
    *(_QWORD *)&v308 = v28;
    if (sub_1C4E7BD14(&v308, v30))
    {
      v39 = llvm::Constant::getNullValue(*v28, v38);
      v40 = (char *)operator new(0x80uLL);
      v41 = (uint64_t)(v40 + 64);
      *((_DWORD *)v40 + 21) = *((_DWORD *)v40 + 21) & 0x38000000 | 2;
      *(_QWORD *)v40 = 0;
      *((_QWORD *)v40 + 1) = 0;
      *((_QWORD *)v40 + 2) = 0;
      *((_QWORD *)v40 + 3) = v40 + 64;
      *((_QWORD *)v40 + 4) = 0;
      v42 = (llvm::Value ***)(v40 + 32);
      *((_QWORD *)v40 + 5) = 0;
      *((_QWORD *)v40 + 6) = 0;
      *((_QWORD *)v40 + 7) = v40 + 64;
      *(_WORD *)&v309[16] = 257;
      sub_1C4774CC4(*v31);
      *((_QWORD *)v40 + 8) = v43;
      *((_QWORD *)v40 + 9) = 0;
      v44 = *((_DWORD *)v40 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v40 + 20) = 82;
      *((_DWORD *)v40 + 21) = v44;
      *(_OWORD *)(v40 + 88) = 0u;
      *(_OWORD *)(v40 + 104) = 0u;
      *((_DWORD *)v40 + 30) = 0;
      if (*(_QWORD *)v40)
      {
        **((_QWORD **)v40 + 2) = *((_QWORD *)v40 + 1);
        v226 = *((_QWORD *)v40 + 1);
        if (v226)
          *(_QWORD *)(v226 + 16) = *((_QWORD *)v40 + 2);
      }
      *(_QWORD *)v40 = v31;
      v47 = v31[1];
      v46 = v31 + 1;
      v45 = v47;
      *((_QWORD *)v40 + 1) = v47;
      if (v47)
        *((_QWORD *)v45 + 2) = v40 + 8;
      *((_QWORD *)v40 + 2) = v46;
      *v46 = v40;
      if (*((_QWORD *)v40 + 4))
      {
        **((_QWORD **)v40 + 6) = *((_QWORD *)v40 + 5);
        v227 = *((_QWORD *)v40 + 5);
        if (v227)
          *(_QWORD *)(v227 + 16) = *((_QWORD *)v40 + 6);
      }
      *v42 = v39;
      if (v39)
      {
        v50 = v39[1];
        v49 = (llvm::Value ****)(v39 + 1);
        v48 = v50;
        *((_QWORD *)v40 + 5) = v50;
        if (v50)
          *((_QWORD *)v48 + 2) = v40 + 40;
        *((_QWORD *)v40 + 6) = v49;
        *v49 = v42;
      }
      *((_WORD *)v40 + 41) = v27;
LABEL_47:
      llvm::Value::setName((uint64_t ***)v41, (uint64_t)&v308);
      llvm::Instruction::copyIRFlags(v41, v2, 1);
      return (llvm::UndefValue **)v41;
    }
    v52 = *(_QWORD *)(v2 + 8);
    if (v52)
    {
      if (!*(_QWORD *)(v52 + 8))
      {
        v57 = *(_QWORD *)(v52 + 24);
        if (v57)
        {
          if (*(_BYTE *)(v57 + 16) == 85)
          {
            *(_QWORD *)&v308 = 0;
            v303 = 0;
            v41 = 0;
            if (llvm::matchSelectPattern(v57, (uint64_t)&v308, &v303, 0, 0))
              return (llvm::UndefValue **)v41;
          }
        }
      }
    }
    if (sub_1C4E5C310((uint64_t)&v308, (llvm::Constant *)v11) && !sub_1C4E7BA90((uint64_t)&v303, (llvm::Constant *)v11))
    {
      v58 = llvm::Constant::getNullValue(v292, v53);
      return (llvm::UndefValue **)sub_1C577E2C8(a1, v2, 1u, (uint64_t)v58);
    }
    v54 = *(unsigned __int8 *)(v10 + 16);
    if (v54 < 0x1C)
      goto LABEL_243;
    if (!v11)
      goto LABEL_243;
    v55 = *(unsigned __int8 *)(v11 + 16);
    if (v55 > 0x14)
      goto LABEL_243;
    if (*(unsigned __int8 *)(v10 + 16) <= 0x46u)
    {
      if (v54 == 49)
      {
        v64 = *(_WORD *)(v2 + 18) & 0x3F;
        if ((v64 - 6) >= 0xFFFFFFFC
          && sub_1C4E7BBEC((uint64_t)&v308, (llvm::Constant *)v11)
          && (*(_BYTE *)(v10 + 17) & 8) != 0
          && (*(_BYTE *)(v2 + 17) & 8) != 0)
        {
          v303 = 0;
          v65 = *(_DWORD *)(v10 + 20);
          v66 = (v65 & 0x40000000) != 0
              ? *(unsigned __int8 ***)(v10 - 8)
              : (unsigned __int8 **)(v10 - 32 * (v65 & 0x7FFFFFF));
          v132 = *v66;
          *(_QWORD *)&v308 = &v303;
          *((_QWORD *)&v308 + 1) = 0;
          if (sub_1C4E7A604((uint64_t)&v308, v132))
          {
            v133 = v303;
            if ((_UNKNOWN *)v303[1] == &unk_1C866F1C0)
              v133 = (_QWORD *)v303[2];
            v134 = *((_BYTE *)v133 + 28);
            if ((v134 & 7) != 3)
            {
              if ((v134 & 8) != 0)
                __asm { BR              X9 }
              v214 = (char *)operator new(0x80uLL);
              v41 = (uint64_t)(v214 + 64);
              *((_DWORD *)v214 + 21) = *((_DWORD *)v214 + 21) & 0x38000000 | 2;
              *(_QWORD *)v214 = 0;
              *((_QWORD *)v214 + 1) = 0;
              *((_QWORD *)v214 + 2) = 0;
              *((_QWORD *)v214 + 3) = v214 + 64;
              *((_QWORD *)v214 + 4) = 0;
              *((_QWORD *)v214 + 5) = 0;
              *((_QWORD *)v214 + 6) = 0;
              *((_QWORD *)v214 + 7) = v214 + 64;
              v215 = *(_DWORD *)(v10 + 20);
              if ((v215 & 0x40000000) != 0)
                v216 = *(_QWORD *)(v10 - 8);
              else
                v216 = v10 - 32 * (v215 & 0x7FFFFFF);
              v217 = *(_QWORD *)(v216 + 32);
              *(_WORD *)&v309[16] = 257;
              sub_1C4774CC4(*(_DWORD **)v217);
              *((_QWORD *)v214 + 8) = v218;
              *((_QWORD *)v214 + 9) = 0;
              v219 = *((_DWORD *)v214 + 21) & 0xC0000000 | 2;
              *((_DWORD *)v214 + 20) = 82;
              *((_DWORD *)v214 + 21) = v219;
              *(_OWORD *)(v214 + 88) = 0u;
              *(_OWORD *)(v214 + 104) = 0u;
              *((_DWORD *)v214 + 30) = 0;
              if (*(_QWORD *)v214)
              {
                **((_QWORD **)v214 + 2) = *((_QWORD *)v214 + 1);
                v284 = *((_QWORD *)v214 + 1);
                if (v284)
                  *(_QWORD *)(v284 + 16) = *((_QWORD *)v214 + 2);
              }
              *(_QWORD *)v214 = v217;
              v222 = *(_QWORD *)(v217 + 8);
              v221 = (_QWORD *)(v217 + 8);
              v220 = v222;
              *((_QWORD *)v214 + 1) = v222;
              if (v222)
                *(_QWORD *)(v220 + 16) = v214 + 8;
              *((_QWORD *)v214 + 2) = v221;
              *v221 = v214;
              if (*((_QWORD *)v214 + 4))
              {
                **((_QWORD **)v214 + 6) = *((_QWORD *)v214 + 5);
                v285 = *((_QWORD *)v214 + 5);
                if (v285)
                  *(_QWORD *)(v285 + 16) = *((_QWORD *)v214 + 6);
              }
              *((_QWORD *)v214 + 4) = v11;
              v225 = *(_QWORD *)(v11 + 8);
              v224 = (_QWORD *)(v11 + 8);
              v223 = v225;
              *((_QWORD *)v214 + 5) = v225;
              if (v225)
                *(_QWORD *)(v223 + 16) = v214 + 40;
              *((_QWORD *)v214 + 6) = v224;
              *v224 = v214 + 32;
              *((_WORD *)v214 + 41) = v64;
              goto LABEL_47;
            }
          }
        }
        goto LABEL_243;
      }
      if (v54 == 60)
      {
        v59 = *(_DWORD *)(v10 + 20);
        v60 = (v59 & 0x40000000) != 0 ? *(uint64_t **)(v10 - 8) : (uint64_t *)(v10 - 32 * (v59 & 0x7FFFFFF));
        v94 = *v60;
        if (*v60)
        {
          if (*(_BYTE *)(v94 + 16) == 62)
          {
            v95 = *(llvm::GlobalValue **)(v94 - 32 * (*(_DWORD *)(v94 + 20) & 0x7FFFFFF));
            if (v95)
            {
              if (*((_BYTE *)v95 + 16) == 3)
              {
                v56 = sub_1C57E9A2C(a1, v10, v94, v95, (_WORD *)v2, 0);
LABEL_138:
                v41 = (uint64_t)v56;
                if (v56)
                  return (llvm::UndefValue **)v41;
              }
            }
          }
        }
      }
LABEL_243:
      v303 = 0;
      v135 = *v4;
      LODWORD(v308) = 139;
      *((_QWORD *)&v308 + 1) = 0;
      *(_QWORD *)v309 = &v303;
      if (sub_1C4E75A6C((uint64_t)&v308, v135) && sub_1C4E7BA90((uint64_t)&v298, *v6))
      {
        v136 = *(_WORD *)(v2 + 18);
        switch(v136 & 0x3F)
        {
          case 1:
          case 6:
          case 7:
          case 8:
          case 9:
          case 0xE:
            v137 = v303;
            goto LABEL_254;
          case 2:
            v137 = v303;
            v138 = v136 & 0xFFC0 | 6;
            goto LABEL_253;
          case 3:
            v137 = v303;
            v138 = v136 & 0xFFC0 | 7;
            goto LABEL_253;
          case 5:
            v137 = v303;
            v138 = v136 & 0xFFC0 | 1;
            goto LABEL_253;
          case 0xA:
            v137 = v303;
            v138 = v136 & 0xFFC0 | 0xE;
            goto LABEL_253;
          case 0xC:
            v137 = v303;
            v138 = v136 & 0xFFC0 | 8;
            goto LABEL_253;
          case 0xD:
            v137 = v303;
            v138 = v136 & 0xFFC0 | 9;
LABEL_253:
            *(_WORD *)(v2 + 18) = v138;
LABEL_254:
            v41 = sub_1C577E2C8(a1, v2, 0, (uint64_t)v137);
            if (!v41)
              break;
            return (llvm::UndefValue **)v41;
          default:
            break;
        }
      }
      *(_QWORD *)&v308 = &v295;
      if (sub_1C4E7B6EC((_QWORD **)&v308, v10) && v11 && *(unsigned __int8 *)(v11 + 16) <= 0x14u)
      {
        llvm::ConstantExpr::get((llvm::ConstantExpr *)0xC, (unsigned __int8 *)v11, 0, 0, v139);
        v140 = operator new(0x80uLL);
        v140[21] = v140[21] & 0x38000000 | 2;
        *(_QWORD *)v140 = 0;
        *((_QWORD *)v140 + 1) = 0;
        *((_QWORD *)v140 + 4) = 0;
        *((_QWORD *)v140 + 2) = 0;
        *((_QWORD *)v140 + 3) = v140 + 16;
        *((_QWORD *)v140 + 5) = 0;
        *((_QWORD *)v140 + 6) = 0;
        *((_QWORD *)v140 + 7) = v140 + 16;
        __asm { BR              X9 }
      }
      *(_QWORD *)&v308 = &v295;
      if (!sub_1C57DCAD0((_QWORD **)&v308, v10))
        goto LABEL_428;
      *(_QWORD *)&v308 = &v294;
      if (sub_1C57DCAD0((_QWORD **)&v308, v11) && *(_QWORD *)v295 == *v294)
      {
        v173 = (char *)operator new(0x80uLL);
        v41 = (uint64_t)(v173 + 64);
        *((_DWORD *)v173 + 21) = *((_DWORD *)v173 + 21) & 0x38000000 | 2;
        *(_QWORD *)v173 = 0;
        *((_QWORD *)v173 + 1) = 0;
        *((_QWORD *)v173 + 2) = 0;
        *((_QWORD *)v173 + 3) = v173 + 64;
        *((_QWORD *)v173 + 4) = 0;
        v174 = v173 + 32;
        *((_QWORD *)v173 + 5) = 0;
        *((_QWORD *)v173 + 6) = 0;
        *((_QWORD *)v173 + 7) = v173 + 64;
        v175 = v294;
        v176 = v295;
        *(_WORD *)&v309[16] = 257;
        sub_1C4774CC4(*(_DWORD **)v295);
        *((_QWORD *)v173 + 8) = v177;
        *((_QWORD *)v173 + 9) = 0;
        v178 = *((_DWORD *)v173 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v173 + 20) = 82;
        *((_DWORD *)v173 + 21) = v178;
        *(_OWORD *)(v173 + 88) = 0u;
        *(_OWORD *)(v173 + 104) = 0u;
        *((_DWORD *)v173 + 30) = 0;
        if (*(_QWORD *)v173)
        {
          **((_QWORD **)v173 + 2) = *((_QWORD *)v173 + 1);
          v228 = *((_QWORD *)v173 + 1);
          if (v228)
            *(_QWORD *)(v228 + 16) = *((_QWORD *)v173 + 2);
        }
        *(_QWORD *)v173 = v176;
        v181 = *((_QWORD *)v176 + 1);
        v180 = v176 + 8;
        v179 = v181;
        *((_QWORD *)v173 + 1) = v181;
        if (v181)
          *(_QWORD *)(v179 + 16) = v173 + 8;
        *((_QWORD *)v173 + 2) = v180;
        *v180 = v173;
        if (*((_QWORD *)v173 + 4))
        {
          **((_QWORD **)v173 + 6) = *((_QWORD *)v173 + 5);
          v229 = *((_QWORD *)v173 + 5);
          if (v229)
            *(_QWORD *)(v229 + 16) = *((_QWORD *)v173 + 6);
        }
        *v174 = v175;
        if (v175)
        {
          v184 = v175[1];
          v183 = v175 + 1;
          v182 = v184;
          *((_QWORD *)v173 + 5) = v184;
          if (v184)
            *(_QWORD *)(v182 + 16) = v173 + 40;
          *((_QWORD *)v173 + 6) = v183;
          *v183 = v174;
        }
        *((_WORD *)v173 + 41) = v9;
        goto LABEL_47;
      }
      v296 = 0;
      *(_QWORD *)&v308 = &v296;
      *((_QWORD *)&v308 + 1) = 0;
      if (!sub_1C4E7A604((uint64_t)&v308, (unsigned __int8 *)v11))
      {
LABEL_428:
        v303 = 0;
        LODWORD(v308) = 19;
        DWORD2(v308) = 0;
        *(_QWORD *)v309 = &v303;
        *(_OWORD *)&v309[8] = xmmword_1C64632D0;
        *(_QWORD *)&v309[24] = &v295;
        v245 = *(_QWORD *)(v10 + 8);
        if (!v245
          || *(_QWORD *)(v245 + 8)
          || !sub_1C57A2804((uint64_t)&v308, v10)
          || !sub_1C4E5C310((uint64_t)&v298, (llvm::Constant *)v11))
        {
          goto LABEL_461;
        }
        v246 = v303;
        if ((_UNKNOWN *)v303[1] == &unk_1C866F1C0)
          v246 = (_QWORD *)v303[2];
        v247 = *((_BYTE *)v246 + 28) & 7;
        if (v247 == 3 || v247 == 1)
          goto LABEL_461;
        v248 = *(_QWORD *)(a1 + 24);
        v249 = *(llvm::Type **)v295;
        if ((*(_DWORD *)(*(_QWORD *)v295 + 8) & 0xFE) == 0x12)
          v249 = (llvm::Type *)**((_QWORD **)v249 + 2);
        PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v249);
        v251 = *(_QWORD **)(v248 + 64);
        LODWORD(v308) = PrimitiveSizeInBits;
        if (PrimitiveSizeInBits <= 63)
        {
          if (PrimitiveSizeInBits <= 31)
          {
            switch(PrimitiveSizeInBits)
            {
              case 16:
                v252 = *v251 + 1936;
                goto LABEL_446;
              case 8:
                v252 = *v251 + 1912;
                goto LABEL_446;
              case 1:
                v252 = *v251 + 1888;
                goto LABEL_446;
            }
          }
          else if (PrimitiveSizeInBits == 32)
          {
            v252 = *v251 + 1960;
            goto LABEL_446;
          }
        }
        else
        {
          if (PrimitiveSizeInBits == 64)
          {
            v252 = *v251 + 1984;
            goto LABEL_446;
          }
          if (PrimitiveSizeInBits == 128)
          {
            v252 = *v251 + 2008;
            goto LABEL_446;
          }
        }
        v269 = sub_1C5270984(*v251 + 2168, &v308);
        v252 = *((_QWORD *)v269 + 1);
        if (!v252)
        {
          v270 = v269;
          v252 = sub_1C484358C(*v251 + 2040, 24, 3);
          v271 = v308;
          *(_QWORD *)v252 = v251;
          *(_QWORD *)(v252 + 16) = 0;
          *(_QWORD *)(v252 + 8) = (v271 << 8) | 0xDu;
          *((_QWORD *)v270 + 1) = v252;
        }
LABEL_446:
        if ((*((_DWORD *)v292 + 2) & 0xFE) == 0x12 && v292)
        {
          v253 = (llvm::Type *)*((unsigned int *)v292 + 8);
          if (*((_DWORD *)v292 + 2) == 19)
            llvm::ScalableVectorType::get((uint64_t **)v252, v253);
          else
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v252, v253);
          v252 = v254;
        }
        if ((_DWORD)v9 == 4)
        {
          v255 = *(uint64_t **)(a1 + 24);
          *(_WORD *)&v309[16] = 257;
          v256 = sub_1C4773E38(v255, 49, v295, v252, (uint64_t)&v308);
          v257 = (char *)operator new(0x80uLL);
          v41 = (uint64_t)(v257 + 64);
          *((_DWORD *)v257 + 21) = *((_DWORD *)v257 + 21) & 0x38000000 | 2;
          *(_QWORD *)v257 = 0;
          *((_QWORD *)v257 + 1) = 0;
          *((_QWORD *)v257 + 2) = 0;
          *((_QWORD *)v257 + 3) = v257 + 64;
          *((_QWORD *)v257 + 4) = 0;
          v258 = (llvm::Value ***)(v257 + 32);
          *((_QWORD *)v257 + 5) = 0;
          *((_QWORD *)v257 + 6) = 0;
          *((_QWORD *)v257 + 7) = v257 + 64;
          v260 = llvm::Constant::getNullValue((llvm::Constant *)v252, v259);
          *(_WORD *)&v309[16] = 257;
          sub_1C4774CC4(*(_DWORD **)v256);
          *((_QWORD *)v257 + 8) = v261;
          *((_QWORD *)v257 + 9) = 0;
          v262 = *((_DWORD *)v257 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v257 + 20) = 81;
          *((_DWORD *)v257 + 21) = v262;
          *(_OWORD *)(v257 + 88) = 0u;
          *(_OWORD *)(v257 + 104) = 0u;
          *((_DWORD *)v257 + 30) = 0;
          if (*(_QWORD *)v257)
          {
            **((_QWORD **)v257 + 2) = *((_QWORD *)v257 + 1);
            v280 = *((_QWORD *)v257 + 1);
            if (v280)
              *(_QWORD *)(v280 + 16) = *((_QWORD *)v257 + 2);
          }
          *(_QWORD *)v257 = v256;
          v265 = *((_QWORD *)v256 + 1);
          v264 = v256 + 8;
          v263 = v265;
          *((_QWORD *)v257 + 1) = v265;
          if (v265)
            *(_QWORD *)(v263 + 16) = v257 + 8;
          *((_QWORD *)v257 + 2) = v264;
          *v264 = v257;
          if (*((_QWORD *)v257 + 4))
          {
            **((_QWORD **)v257 + 6) = *((_QWORD *)v257 + 5);
            v281 = *((_QWORD *)v257 + 5);
            if (v281)
              *(_QWORD *)(v281 + 16) = *((_QWORD *)v257 + 6);
          }
          *v258 = v260;
          if (v260)
          {
            v268 = v260[1];
            v267 = (llvm::Value ****)(v260 + 1);
            v266 = v268;
            *((_QWORD *)v257 + 5) = v268;
            if (v268)
              *((_QWORD *)v266 + 2) = v257 + 40;
            *((_QWORD *)v257 + 6) = v267;
            *v267 = v258;
          }
          *((_WORD *)v257 + 41) = 40;
          llvm::Value::setName((uint64_t ***)v41, (uint64_t)&v308);
          return (llvm::UndefValue **)v41;
        }
LABEL_461:
        if ((*(_DWORD *)(*(_QWORD *)v2 + 8) & 0xFE) != 0x12)
          return 0;
        v41 = (uint64_t)sub_1C581500C(v2, *(_QWORD *)(a1 + 24));
        if (!v41)
          return 0;
        return (llvm::UndefValue **)v41;
      }
      v141 = *(_DWORD *)(*(_QWORD *)v295 + 8);
      if ((v141 & 0xFE) == 0x12)
        v141 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v295 + 16) + 8);
      if (v141 != 2)
        __asm { BR              X10 }
      v293 = 0;
      v142 = v296;
      v143 = *(_QWORD *)(v296 + 8);
      if ((_UNKNOWN *)v143 == &unk_1C866F1C0)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v304, (const llvm::detail::DoubleAPFloat *)(v296 + 8));
      }
      else
      {
        v304 = *(_QWORD *)(v296 + 8);
        if ((*(_DWORD *)(v143 + 8) + 64) >= 0x80)
          v305 = (uint64_t *)operator new[]();
        v307 = v307 & 0xF7 | *(_BYTE *)(v142 + 28) & 8;
        v144 = *(_BYTE *)(v142 + 28);
        v145 = v144 & 7;
        v307 = v307 & 0xF8 | v144 & 7;
        v306 = *(_DWORD *)(v142 + 24);
        v147 = (v144 & 6) != 0 && v145 != 3;
        if (v145 == 1 || v147)
        {
          v148 = *(unsigned int *)(v304 + 8);
          if ((v148 - 64) <= 0xFFFFFF7F)
            v149 = (uint64_t **)v305;
          else
            v149 = &v305;
          v152 = *(uint64_t ***)(v142 + 16);
          v151 = (uint64_t **)(v142 + 16);
          v150 = v152;
          if ((*((_DWORD *)*(v151 - 1) + 2) - 64) >= 0xFFFFFF80)
            v150 = v151;
          if (v148 <= 0xFFFFFFBF)
          {
            v153 = (unint64_t)(v148 + 64) >> 6;
            do
            {
              v154 = *v150++;
              *v149++ = v154;
              --v153;
            }
            while (v153);
          }
        }
      }
      llvm::APFloat::convert((uint64_t)&v303, &unk_1C866F184, 1, &v293);
      v157 = v293;
      if (!v293)
        goto LABEL_309;
      if ((int)v9 > 8)
      {
        if ((_DWORD)v9 == 9)
        {
          v158 = (char *)operator new(0x80uLL);
          *((_DWORD *)v158 + 21) = *((_DWORD *)v158 + 21) & 0x38000000 | 2;
          *(_QWORD *)v158 = 0;
          *((_QWORD *)v158 + 1) = 0;
          *((_QWORD *)v158 + 4) = 0;
          v196 = (llvm::Value ***)(v158 + 32);
          *((_QWORD *)v158 + 2) = 0;
          *((_QWORD *)v158 + 3) = v158 + 64;
          *((_QWORD *)v158 + 5) = 0;
          *((_QWORD *)v158 + 6) = 0;
          v291 = (uint64_t ***)(v158 + 64);
          *((_QWORD *)v158 + 7) = v158 + 64;
          v197 = v295;
          v199 = llvm::Constant::getNullValue(*(llvm::Constant **)v295, v198);
          *(_WORD *)&v309[16] = 257;
          sub_1C4774CC4(*(_DWORD **)v197);
          *((_QWORD *)v158 + 8) = v200;
          *((_QWORD *)v158 + 9) = 0;
          v201 = *((_DWORD *)v158 + 21) & 0xC0000000 | 2;
          *((_DWORD *)v158 + 20) = 82;
          *((_DWORD *)v158 + 21) = v201;
          *(_OWORD *)(v158 + 88) = 0u;
          *(_OWORD *)(v158 + 104) = 0u;
          *((_DWORD *)v158 + 30) = 0;
          if (*(_QWORD *)v158)
          {
            **((_QWORD **)v158 + 2) = *((_QWORD *)v158 + 1);
            v276 = *((_QWORD *)v158 + 1);
            if (v276)
              *(_QWORD *)(v276 + 16) = *((_QWORD *)v158 + 2);
          }
          *(_QWORD *)v158 = v197;
          v204 = *((_QWORD *)v197 + 1);
          v203 = v197 + 8;
          v202 = v204;
          *((_QWORD *)v158 + 1) = v204;
          if (v204)
            *(_QWORD *)(v202 + 16) = v158 + 8;
          *((_QWORD *)v158 + 2) = v203;
          *v203 = v158;
          v168 = (uint64_t ***)(v158 + 64);
          if (*((_QWORD *)v158 + 4))
          {
            **((_QWORD **)v158 + 6) = *((_QWORD *)v158 + 5);
            v277 = *((_QWORD *)v158 + 5);
            if (v277)
              *(_QWORD *)(v277 + 16) = *((_QWORD *)v158 + 6);
          }
          *v196 = v199;
          if (v199)
          {
            v207 = v199[1];
            v206 = (llvm::Value ****)(v199 + 1);
            v205 = v207;
            *((_QWORD *)v158 + 5) = v207;
            if (v207)
              *((_QWORD *)v205 + 2) = v158 + 40;
            *((_QWORD *)v158 + 6) = v206;
            *v206 = v196;
          }
          v172 = 8;
          goto LABEL_347;
        }
        if ((_DWORD)v9 != 14)
        {
LABEL_309:
          if ((_UNKNOWN *)v304 == &unk_1C866F1C0)
          {
            llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v299, (const llvm::detail::DoubleAPFloat *)&v304);
          }
          else
          {
            v299 = v304;
            if ((*(_DWORD *)(v304 + 8) + 64) >= 0x80)
              v300 = (uint64_t *)operator new[]();
            v186 = v307 & 7;
            v302 = v302 & 0xF0 | v307 & 0xF;
            v301 = v306;
            v188 = (v307 & 6) != 0 && v186 != 3;
            if (v186 == 1 || v188)
            {
              v189 = *(unsigned int *)(v299 + 8);
              v190 = (v189 - 64) <= 0xFFFFFF7F ? v300 : (uint64_t *)&v300;
              v191 = (*(_DWORD *)(v304 + 8) - 64) >= 0xFFFFFF80 ? (uint64_t *)&v305 : v305;
              if (v189 <= 0xFFFFFFBF)
              {
                v192 = (unint64_t)(v189 + 64) >> 6;
                do
                {
                  v193 = *v191++;
                  *v190++ = v193;
                  --v192;
                }
                while (v192);
              }
            }
          }
          if ((_UNKNOWN *)v299 == &unk_1C866F1C0)
            v194 = v300;
          else
            v194 = &v298;
          if ((*((_BYTE *)v194 + 28) & 8) != 0)
          {
            if ((_UNKNOWN *)v299 == &unk_1C866F1C0)
            {
              llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v299);
              if (v157)
                goto LABEL_335;
              goto LABEL_400;
            }
            v302 ^= 8u;
          }
          if (v157)
          {
LABEL_335:
            v195 = 0;
LABEL_422:
            if ((_UNKNOWN *)v299 == &unk_1C866F1C0)
            {
              sub_1C4773C74((uint64_t *)&v300);
            }
            else if ((*(_DWORD *)(v299 + 8) - 64) <= 0xFFFFFF7F && v300)
            {
              MEMORY[0x1CAA32F9C](v300, 0x1000C8000313F17);
            }
LABEL_424:
            if ((_UNKNOWN *)v304 == &unk_1C866F1C0)
            {
              sub_1C4773C74((uint64_t *)&v305);
            }
            else if ((*(_DWORD *)(v304 + 8) - 64) <= 0xFFFFFF7F && v305)
            {
              MEMORY[0x1CAA32F9C](v305, 0x1000C8000313F17);
            }
            if (v195)
              return (llvm::UndefValue **)v291;
            goto LABEL_428;
          }
LABEL_400:
          if (&unk_1C866F184 == &unk_1C866F1C0)
          {
            llvm::detail::DoubleAPFloat::DoubleAPFloat((_QWORD *)&v308 + 1, (uint64_t)&unk_1C866F1C0);
          }
          else
          {
            *((_QWORD *)&v308 + 1) = &unk_1C866F184;
            v309[12] = v309[12] & 0xF0 | 3;
            *(_DWORD *)&v309[8] = -127;
            *(_QWORD *)v309 = 0;
          }
          sub_1C47A8E18((uint64_t)&v308, 0);
          if ((_UNKNOWN *)v299 == &unk_1C866F1C0)
          {
            if (llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)&v299, (const llvm::detail::DoubleAPFloat *)((char *)&v308 + 8)))goto LABEL_404;
          }
          else
          {
            llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)&v299, (const llvm::detail::IEEEFloat *)((char *)&v308 + 8));
            if (v231)
            {
LABEL_404:
              v195 = 1;
LABEL_410:
              if (*((_UNKNOWN **)&v308 + 1) == &unk_1C866F1C0)
              {
                sub_1C4773C74((uint64_t *)v309);
              }
              else if ((*(_DWORD *)(*((_QWORD *)&v308 + 1) + 8) - 64) <= 0xFFFFFF7F && *(_QWORD *)v309)
              {
                MEMORY[0x1CAA32F9C](*(_QWORD *)v309, 0x1000C8000313F17);
              }
              if (v195)
              {
                v233 = llvm::ConstantFP::get(*(llvm::ConstantFP ***)v295, (llvm::Type *)&v303, v230);
                v234 = (char *)operator new(0x80uLL);
                *((_DWORD *)v234 + 21) = *((_DWORD *)v234 + 21) & 0x38000000 | 2;
                *(_QWORD *)v234 = 0;
                *((_QWORD *)v234 + 1) = 0;
                *((_QWORD *)v234 + 2) = 0;
                *((_QWORD *)v234 + 3) = v234 + 64;
                *((_QWORD *)v234 + 4) = 0;
                v235 = (llvm::Value ***)(v234 + 32);
                *((_QWORD *)v234 + 5) = 0;
                *((_QWORD *)v234 + 6) = 0;
                v291 = (uint64_t ***)(v234 + 64);
                *((_QWORD *)v234 + 7) = v234 + 64;
                v236 = v295;
                *(_WORD *)&v309[16] = 257;
                sub_1C4774CC4(*(_DWORD **)v295);
                *((_QWORD *)v234 + 8) = v237;
                *((_QWORD *)v234 + 9) = 0;
                v238 = *((_DWORD *)v234 + 21) & 0xC0000000 | 2;
                *((_DWORD *)v234 + 20) = 82;
                *((_DWORD *)v234 + 21) = v238;
                *(_OWORD *)(v234 + 88) = 0u;
                *(_OWORD *)(v234 + 104) = 0u;
                *((_DWORD *)v234 + 30) = 0;
                if (*(_QWORD *)v234)
                {
                  **((_QWORD **)v234 + 2) = *((_QWORD *)v234 + 1);
                  v278 = *((_QWORD *)v234 + 1);
                  if (v278)
                    *(_QWORD *)(v278 + 16) = *((_QWORD *)v234 + 2);
                }
                *(_QWORD *)v234 = v236;
                v241 = *((_QWORD *)v236 + 1);
                v240 = v236 + 8;
                v239 = v241;
                *((_QWORD *)v234 + 1) = v241;
                if (v241)
                  *(_QWORD *)(v239 + 16) = v234 + 8;
                *((_QWORD *)v234 + 2) = v240;
                *v240 = v234;
                if (*((_QWORD *)v234 + 4))
                {
                  **((_QWORD **)v234 + 6) = *((_QWORD *)v234 + 5);
                  v279 = *((_QWORD *)v234 + 5);
                  if (v279)
                    *(_QWORD *)(v279 + 16) = *((_QWORD *)v234 + 6);
                }
                *v235 = v233;
                if (v233)
                {
                  v244 = v233[1];
                  v243 = (llvm::Value ****)(v233 + 1);
                  v242 = v244;
                  *((_QWORD *)v234 + 5) = v244;
                  if (v244)
                    *((_QWORD *)v242 + 2) = v234 + 40;
                  *((_QWORD *)v234 + 6) = v243;
                  *v243 = v235;
                }
                *((_WORD *)v234 + 41) = v9;
                llvm::Value::setName(v291, (uint64_t)&v308);
                v195 = 1;
                llvm::Instruction::copyIRFlags((uint64_t)v291, v2, 1);
              }
              goto LABEL_422;
            }
          }
          v232 = &v298;
          if ((_UNKNOWN *)v299 == &unk_1C866F1C0)
            v232 = v300;
          v195 = (*((_BYTE *)v232 + 28) & 7) == 3;
          goto LABEL_410;
        }
        True = llvm::ConstantInt::getTrue(*(uint64_t ***)v2, v155, v156);
      }
      else
      {
        if ((_DWORD)v9 != 1)
        {
          if ((_DWORD)v9 == 6)
          {
            v158 = (char *)operator new(0x80uLL);
            *((_DWORD *)v158 + 21) = *((_DWORD *)v158 + 21) & 0x38000000 | 2;
            *(_QWORD *)v158 = 0;
            *((_QWORD *)v158 + 1) = 0;
            *((_QWORD *)v158 + 4) = 0;
            v159 = (llvm::Value ***)(v158 + 32);
            *((_QWORD *)v158 + 2) = 0;
            *((_QWORD *)v158 + 3) = v158 + 64;
            *((_QWORD *)v158 + 5) = 0;
            *((_QWORD *)v158 + 6) = 0;
            v291 = (uint64_t ***)(v158 + 64);
            *((_QWORD *)v158 + 7) = v158 + 64;
            v160 = v295;
            v162 = llvm::Constant::getNullValue(*(llvm::Constant **)v295, v161);
            *(_WORD *)&v309[16] = 257;
            sub_1C4774CC4(*(_DWORD **)v160);
            *((_QWORD *)v158 + 8) = v163;
            *((_QWORD *)v158 + 9) = 0;
            v164 = *((_DWORD *)v158 + 21) & 0xC0000000 | 2;
            *((_DWORD *)v158 + 20) = 82;
            *((_DWORD *)v158 + 21) = v164;
            *(_OWORD *)(v158 + 88) = 0u;
            *(_OWORD *)(v158 + 104) = 0u;
            *((_DWORD *)v158 + 30) = 0;
            if (*(_QWORD *)v158)
            {
              **((_QWORD **)v158 + 2) = *((_QWORD *)v158 + 1);
              v274 = *((_QWORD *)v158 + 1);
              if (v274)
                *(_QWORD *)(v274 + 16) = *((_QWORD *)v158 + 2);
            }
            *(_QWORD *)v158 = v160;
            v167 = *((_QWORD *)v160 + 1);
            v166 = v160 + 8;
            v165 = v167;
            *((_QWORD *)v158 + 1) = v167;
            if (v167)
              *(_QWORD *)(v165 + 16) = v158 + 8;
            *((_QWORD *)v158 + 2) = v166;
            *v166 = v158;
            v168 = (uint64_t ***)(v158 + 64);
            if (*((_QWORD *)v158 + 4))
            {
              **((_QWORD **)v158 + 6) = *((_QWORD *)v158 + 5);
              v275 = *((_QWORD *)v158 + 5);
              if (v275)
                *(_QWORD *)(v275 + 16) = *((_QWORD *)v158 + 6);
            }
            *v159 = v162;
            if (v162)
            {
              v171 = v162[1];
              v170 = (llvm::Value ****)(v162 + 1);
              v169 = v171;
              *((_QWORD *)v158 + 5) = v171;
              if (v171)
                *((_QWORD *)v169 + 2) = v158 + 40;
              *((_QWORD *)v158 + 6) = v170;
              *v170 = v159;
            }
            v172 = 7;
LABEL_347:
            *((_WORD *)v158 + 41) = v172;
            llvm::Value::setName(v168, (uint64_t)&v308);
            goto LABEL_348;
          }
          goto LABEL_309;
        }
        True = llvm::ConstantInt::getFalse(*(uint64_t ***)v2, v155, v156);
      }
      v291 = (uint64_t ***)sub_1C577F888(a1, (llvm::ValueAsMetadata *)v2, (llvm::Value *)True);
LABEL_348:
      v195 = 1;
      goto LABEL_424;
    }
    if (v54 - 71 >= 2)
    {
      if (v54 == 84)
      {
        v67 = llvm::getIntrinsicForCallSite(v10, *(uint64_t **)(a1 + 64));
        if (*(_BYTE *)(v11 + 16) == 17)
          v68 = v11;
        else
          v68 = 0;
        v70 = v67 == 1851 || v67 == 1830 || v67 == 2131;
        if (v70 && v68)
        {
          v71 = *(_QWORD *)(v68 + 32);
          if ((_UNKNOWN *)v71 == &unk_1C866F1C0)
          {
            llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v308 + 8), (const llvm::detail::DoubleAPFloat *)(v68 + 32));
          }
          else
          {
            *((_QWORD *)&v308 + 1) = *(_QWORD *)(v68 + 32);
            if ((*(_DWORD *)(v71 + 8) + 64) >= 0x80)
              *(_QWORD *)v309 = operator new[]();
            v72 = *(_BYTE *)(v68 + 52);
            v73 = v72 & 7;
            v309[12] = v309[12] & 0xF0 | v72 & 0xF;
            *(_DWORD *)&v309[8] = *(_DWORD *)(v68 + 48);
            v75 = (v72 & 6) != 0 && v73 != 3;
            if (v73 == 1 || v75)
            {
              v76 = *(unsigned int *)(*((_QWORD *)&v308 + 1) + 8);
              if ((v76 - 64) <= 0xFFFFFF7F)
                v77 = *(_QWORD **)v309;
              else
                v77 = v309;
              v80 = *(uint64_t **)(v68 + 40);
              v79 = (uint64_t *)(v68 + 40);
              v78 = v80;
              if ((*(_DWORD *)(*(v79 - 1) + 8) - 64) >= 0xFFFFFF80)
                v78 = v79;
              if (v76 <= 0xFFFFFFBF)
              {
                v81 = (unint64_t)(v76 + 64) >> 6;
                do
                {
                  v82 = *v78++;
                  *v77++ = v82;
                  --v81;
                }
                while (v81);
              }
            }
          }
          v83 = *((_QWORD *)&v308 + 1);
          if (*((_UNKNOWN **)&v308 + 1) == &unk_1C866F1C0)
          {
            llvm::detail::DoubleAPFloat::DoubleAPFloat(&v304, (uint64_t)&unk_1C866F1C0, 0);
          }
          else
          {
            v304 = *((_QWORD *)&v308 + 1);
            v84 = *((_QWORD *)&v308 + 1);
            if ((*(_DWORD *)(*((_QWORD *)&v308 + 1) + 8) + 64) >= 0x80)
            {
              v305 = (uint64_t *)operator new[]();
              v84 = v304;
            }
            v307 = v307 & 0xF0 | 2;
            v85 = *(_DWORD *)(v84 + 8);
            if ((v85 - 64) < 0xFFFFFF80)
            {
              v272 = v305;
              *v305 = 0;
              bzero(v272 + 1, 8 * (((v85 + 64) >> 6) - 2) + 8);
              v86 = (uint64_t **)v305;
            }
            else
            {
              v86 = &v305;
              v305 = 0;
            }
            v306 = *(_DWORD *)(v83 + 8) - 1;
            *v86 = 0;
            llvm::detail::IEEEFloat::normalize((llvm::APInt *)&v304, 1, 0);
          }
          v87 = *((_QWORD *)&v308 + 1);
          if (*((_UNKNOWN **)&v308 + 1) == &unk_1C866F1C0)
          {
            llvm::detail::DoubleAPFloat::DoubleAPFloat(&v299, (uint64_t)&unk_1C866F1C0, 1);
          }
          else
          {
            v299 = *((_QWORD *)&v308 + 1);
            v88 = *((_QWORD *)&v308 + 1);
            if ((*(_DWORD *)(*((_QWORD *)&v308 + 1) + 8) + 64) >= 0x80)
            {
              v300 = (uint64_t *)operator new[]();
              v88 = v299;
            }
            v302 = v302 & 0xF0 | 2;
            v89 = *(_DWORD *)(v88 + 8);
            if ((v89 - 64) < 0xFFFFFF80)
            {
              v273 = v300;
              *v300 = 0;
              bzero(v273 + 1, 8 * (((v89 + 64) >> 6) - 2) + 8);
              v90 = (uint64_t **)v300;
            }
            else
            {
              v90 = &v300;
              v300 = 0;
            }
            v301 = *(_DWORD *)(v87 + 8) - 1;
            *v90 = (uint64_t *)1;
            llvm::detail::IEEEFloat::normalize((llvm::APInt *)&v299, 1, 0);
          }
          if (*((_UNKNOWN **)&v308 + 1) == &unk_1C866F1C0)
            v91 = llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)((char *)&v308 + 8), (const llvm::detail::DoubleAPFloat *)&v304);
          else
            llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)((char *)&v308 + 8), (const llvm::detail::IEEEFloat *)&v304);
          v41 = v91;
          if (*((_UNKNOWN **)&v308 + 1) == &unk_1C866F1C0)
            v92 = llvm::detail::DoubleAPFloat::compare((llvm::detail::DoubleAPFloat *)((char *)&v308 + 8), (const llvm::detail::DoubleAPFloat *)&v299);
          else
            llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)((char *)&v308 + 8), (const llvm::detail::IEEEFloat *)&v299);
          switch(*(_WORD *)(v2 + 18) & 0x3F)
          {
            case 1:
              if (v92 <= 1 && (v41 - 3) > 0xFFFFFFFD)
                goto LABEL_191;
              goto LABEL_184;
            case 2:
              if (!(_DWORD)v41)
                goto LABEL_192;
              if (v92)
                goto LABEL_184;
              goto LABEL_191;
            case 3:
              if (v41 <= 1)
                goto LABEL_192;
              if (v92 < 2)
                goto LABEL_191;
LABEL_184:
              v114 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 64);
              v115 = *v114;
              v116 = *(llvm::Value **)(*v114 + 1568);
              if (!v116)
              {
                v117 = *(llvm::ConstantInt **)(v115 + 1888);
                v297 = *(_DWORD *)(v115 + 1896) >> 8;
                if (v297 > 0x40)
                  llvm::APInt::initSlowCase((llvm::APInt *)&v296, 0, 0);
                else
                  v296 = 0;
                v116 = llvm::ConstantInt::get(v117, (llvm::LLVMContext *)&v296, v93);
                if (v297 >= 0x41 && v296)
                  MEMORY[0x1CAA32F9C](v296, 0x1000C8000313F17);
                *(_QWORD *)(v115 + 1568) = v116;
              }
              goto LABEL_193;
            case 4:
              if ((_DWORD)v41 != 2)
                goto LABEL_184;
              if (v92 == 2)
                goto LABEL_192;
              goto LABEL_191;
            case 5:
              if ((v41 - 3) <= 0xFFFFFFFD)
                goto LABEL_184;
              if (v92 - 1 <= 1)
              {
LABEL_192:
                v119 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 64);
                v120 = *v119;
                v116 = *(llvm::Value **)(*v119 + 1560);
                if (!v116)
                {
                  v208 = *(llvm::ConstantInt **)(v120 + 1888);
                  v209 = *(_DWORD *)(v120 + 1896);
                  v297 = v209 >> 8;
                  if (v209 >> 8 > 0x40)
                  {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v296, 1, 0);
                  }
                  else
                  {
                    if (v209 <= 0xFF)
                      v210 = 0;
                    else
                      v210 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v209);
                    v296 = v210 & 1;
                  }
                  v116 = llvm::ConstantInt::get(v208, (llvm::LLVMContext *)&v296, v93);
                  if (v297 >= 0x41 && v296)
                    MEMORY[0x1CAA32F9C](v296, 0x1000C8000313F17);
                  *(_QWORD *)(v120 + 1560) = v116;
                }
LABEL_193:
                v41 = (uint64_t)sub_1C577F888(a1, (llvm::ValueAsMetadata *)v2, v116);
                v118 = 0;
              }
              else
              {
LABEL_191:
                v118 = 1;
              }
              if ((_UNKNOWN *)v299 == &unk_1C866F1C0)
              {
                sub_1C4773C74((uint64_t *)&v300);
              }
              else if ((*(_DWORD *)(v299 + 8) - 64) <= 0xFFFFFF7F && v300)
              {
                MEMORY[0x1CAA32F9C](v300, 0x1000C8000313F17);
              }
              if ((_UNKNOWN *)v304 == &unk_1C866F1C0)
              {
                sub_1C4773C74((uint64_t *)&v305);
              }
              else if ((*(_DWORD *)(v304 + 8) - 64) <= 0xFFFFFF7F && v305)
              {
                MEMORY[0x1CAA32F9C](v305, 0x1000C8000313F17);
              }
              if (*((_UNKNOWN **)&v308 + 1) == &unk_1C866F1C0)
              {
                sub_1C4773C74((uint64_t *)v309);
              }
              else if ((*(_DWORD *)(*((_QWORD *)&v308 + 1) + 8) - 64) <= 0xFFFFFF7F && *(_QWORD *)v309)
              {
                MEMORY[0x1CAA32F9C](*(_QWORD *)v309, 0x1000C8000313F17);
              }
              v291 = (uint64_t ***)v41;
              if (v118)
                goto LABEL_243;
              return (llvm::UndefValue **)v41;
            case 6:
              if (v92 != 2 && (_DWORD)v41)
                goto LABEL_191;
              goto LABEL_192;
            default:
              goto LABEL_191;
          }
        }
      }
      else if (v54 == 83 && *(_QWORD *)(v10 + 40) == *(_QWORD *)(v2 + 40))
      {
        v56 = sub_1C57808D4(a1, (llvm::Instruction *)v2, v10);
        goto LABEL_138;
      }
      goto LABEL_243;
    }
    if (v55 != 17)
      goto LABEL_243;
    FPMantissaWidth = llvm::Type::getFPMantissaWidth(*(llvm::Type **)v10);
    if (FPMantissaWidth == -1)
      goto LABEL_243;
    LODWORD(v291) = FPMantissaWidth;
    v62 = *(_DWORD *)(v10 + 20);
    if ((v62 & 0x40000000) != 0)
      v63 = *(llvm::Type ****)(v10 - 8);
    else
      v63 = (llvm::Type ***)(v10 - 32 * (v62 & 0x7FFFFFF));
    v290 = **v63;
    v96 = *(_WORD *)(v2 + 18);
    if ((v96 & 0x3Fu) <= 0xE && ((1 << (v96 & 0x3F)) & 0x4242) != 0)
    {
      v41 = v54 == 71;
      LOBYTE(v296) = 0;
      LODWORD(v299) = *((_DWORD *)v290 + 2) >> 8;
      if (v299 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v298, 0, 0);
      else
        v298 = 0;
      BYTE4(v299) = v54 == 71;
      llvm::APFloat::convertToInteger(v11 + 24, (uint64_t)&v298, 1, &v296);
      if ((_BYTE)v296)
        goto LABEL_207;
      v286 = v96;
      v41 = (uint64_t)&v308 + 8;
      v97 = *(_QWORD *)(v11 + 32);
      if ((_UNKNOWN *)v97 == &unk_1C866F1C0)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)((char *)&v308 + 8), (const llvm::detail::DoubleAPFloat *)(v11 + 32));
      }
      else
      {
        *((_QWORD *)&v308 + 1) = *(_QWORD *)(v11 + 32);
        if ((*(_DWORD *)(v97 + 8) + 64) >= 0x80)
          *(_QWORD *)v309 = operator new[]();
        v98 = *(_BYTE *)(v11 + 52);
        v99 = v98 & 7;
        v309[12] = v309[12] & 0xF0 | v98 & 0xF;
        *(_DWORD *)&v309[8] = *(_DWORD *)(v11 + 48);
        v101 = (v98 & 6) != 0 && v99 != 3;
        if (v99 == 1 || v101)
        {
          v102 = *(unsigned int *)(*((_QWORD *)&v308 + 1) + 8);
          if ((v102 - 64) <= 0xFFFFFF7F)
            v103 = *(_QWORD **)v309;
          else
            v103 = v309;
          v104 = (uint64_t *)(v11 + 40);
          if ((*(_DWORD *)(*(_QWORD *)(v11 + 32) + 8) - 64) < 0xFFFFFF80)
            v104 = *(uint64_t **)(v11 + 40);
          if (v102 <= 0xFFFFFFBF)
          {
            v105 = (unint64_t)(v102 + 64) >> 6;
            do
            {
              v106 = *v104++;
              *v103++ = v106;
              --v105;
            }
            while (v105);
          }
        }
      }
      sub_1C4DF8890((uint64_t)&v308, 1);
      v107 = (llvm::detail::DoubleAPFloat *)(v11 + 32);
      if (*(_UNKNOWN **)(v11 + 32) == &unk_1C866F1C0)
        v108 = llvm::detail::DoubleAPFloat::compare(v107, (const llvm::detail::DoubleAPFloat *)((char *)&v308 + 8));
      else
        llvm::detail::IEEEFloat::compare(v107, (const llvm::detail::IEEEFloat *)((char *)&v308 + 8));
      v110 = v108;
      if (v108 != 1)
      {
        v111 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 64);
        if ((v286 & 0x37) == 1)
        {
          v112 = *(llvm::Value **)(v111 + 1568);
          if (!v112)
          {
            v113 = *(llvm::ConstantInt **)(v111 + 1888);
            v287 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 64);
            LODWORD(v304) = *(_DWORD *)(v111 + 1896) >> 8;
            if (v304 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v303, 0, 0);
            else
              v303 = 0;
            v112 = llvm::ConstantInt::get(v113, (llvm::LLVMContext *)&v303, v109);
            if (v304 >= 0x41 && v303)
              MEMORY[0x1CAA32F9C](v303, 0x1000C8000313F17);
            *(_QWORD *)(v287 + 1568) = v112;
          }
        }
        else
        {
          v112 = *(llvm::Value **)(v111 + 1560);
          if (!v112)
          {
            v211 = *(llvm::ConstantInt **)(v111 + 1888);
            v289 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 64);
            v212 = *(_DWORD *)(v111 + 1896);
            LODWORD(v304) = v212 >> 8;
            if (v212 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v303, 1, 0);
            }
            else
            {
              if (v212 <= 0xFF)
                v213 = 0;
              else
                v213 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v212);
              v303 = (_QWORD *)(v213 & 1);
            }
            v112 = llvm::ConstantInt::get(v211, (llvm::LLVMContext *)&v303, v109);
            if (v304 >= 0x41 && v303)
              MEMORY[0x1CAA32F9C](v303, 0x1000C8000313F17);
            *(_QWORD *)(v289 + 1560) = v112;
          }
        }
        v41 = (uint64_t)sub_1C577F888(a1, (llvm::ValueAsMetadata *)v2, v112);
      }
      if (*((_UNKNOWN **)&v308 + 1) == &unk_1C866F1C0)
      {
        sub_1C4773C74((uint64_t *)v309);
      }
      else if ((*(_DWORD *)(*((_QWORD *)&v308 + 1) + 8) - 64) <= 0xFFFFFF7F && *(_QWORD *)v309)
      {
        MEMORY[0x1CAA32F9C](*(_QWORD *)v309, 0x1000C8000313F17);
      }
      if (v110 == 1)
LABEL_207:
        v121 = 1;
      else
        v121 = 0;
      if (v299 >= 0x41 && v298)
        MEMORY[0x1CAA32F9C](v298, 0x1000C8000313F17);
      if (!v121)
      {
        if (v41)
          return (llvm::UndefValue **)v41;
        goto LABEL_243;
      }
    }
    v122 = v290;
    if ((*((_DWORD *)v290 + 2) & 0xFE) == 0x12)
      v122 = (llvm::Type *)**((_QWORD **)v290 + 2);
    v123 = llvm::Type::getPrimitiveSizeInBits(v122);
    if ((int)v291 >= v123)
LABEL_234:
      __asm { BR              X10 }
    v288 = v123;
    if (*(_UNKNOWN **)(v11 + 32) == &unk_1C866F1C0)
      v125 = (llvm::detail *)(*(_QWORD *)(v11 + 40) + 8);
    else
      v125 = (llvm::detail *)(v11 + 32);
    v126 = llvm::detail::ilogb(v125, v124);
    if (v126 != 0x7FFFFFFF)
    {
      if ((int)v291 <= v126 && v126 <= v288 - (v54 != 71))
        goto LABEL_243;
      goto LABEL_234;
    }
    v127 = *(_QWORD *)(v11 + 32);
    v291 = (uint64_t ***)&v308 + 1;
    if ((_UNKNOWN *)v127 == &unk_1C866F1C0)
    {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((_QWORD *)&v308 + 1, (uint64_t)&unk_1C866F1C0);
    }
    else
    {
      *((_QWORD *)&v308 + 1) = *(_QWORD *)(v11 + 32);
      if ((*(_DWORD *)(v127 + 8) + 64) >= 0x80)
      {
        *(_QWORD *)v309 = operator new[]();
        v127 = *((_QWORD *)&v308 + 1);
      }
      v309[12] = v309[12] & 0xF0 | 3;
      *(_DWORD *)&v309[8] = *(_DWORD *)(v127 + 4) - 1;
      v128 = *(_DWORD *)(v127 + 8);
      if ((v128 - 64) < 0xFFFFFF80)
      {
        v282 = *(_QWORD *)v309;
        **(_QWORD **)v309 = 0;
        bzero((void *)(v282 + 8), 8 * (((v128 + 64) >> 6) - 2) + 8);
      }
      else
      {
        *(_QWORD *)v309 = 0;
      }
    }
    sub_1C47A8F18((uint64_t)&v308, 0);
    if (*((_UNKNOWN **)&v308 + 1) == &unk_1C866F1C0)
      v130 = (llvm::detail *)(*(_QWORD *)v309 + 8);
    else
      v130 = (llvm::detail *)((char *)&v308 + 8);
    v131 = llvm::detail::ilogb(v130, v129);
    if (*((_UNKNOWN **)&v308 + 1) == &unk_1C866F1C0)
    {
      v283 = v131;
      sub_1C4773C74((uint64_t *)v309);
    }
    else
    {
      if ((*(_DWORD *)(*((_QWORD *)&v308 + 1) + 8) - 64) > 0xFFFFFF7F || !*(_QWORD *)v309)
      {
LABEL_229:
        if (v131 < v288 - (v54 != 71))
          goto LABEL_243;
        goto LABEL_234;
      }
      v283 = v131;
      MEMORY[0x1CAA32F9C](*(_QWORD *)v309, 0x1000C8000313F17);
    }
    v131 = v283;
    goto LABEL_229;
  }
  v24 = *(_WORD *)(v2 + 18) & 0xFFC0 | 7;
LABEL_29:
  *(_WORD *)(v2 + 18) = v24;
  v32 = llvm::Constant::getNullValue(v18, v16);
  if (*(_QWORD *)(v2 - 32))
  {
    **(_QWORD **)(v2 - 16) = *(_QWORD *)(v2 - 24);
    v33 = *(_QWORD *)(v2 - 24);
    if (v33)
      *(_QWORD *)(v33 + 16) = *(_QWORD *)(v2 - 16);
  }
  *v6 = (llvm::Constant *)v32;
  if (v32)
  {
    v36 = v32[1];
    v34 = (llvm::Constant ***)(v32 + 1);
    v35 = v36;
    *(_QWORD *)(v2 - 24) = v36;
    if (v36)
      *((_QWORD *)v35 + 2) = v2 - 24;
    *(_QWORD *)(v2 - 16) = v34;
    *v34 = v6;
  }
  return (llvm::UndefValue **)v2;
}

uint64_t sub_1C5818A48@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C56FB880((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C56FB91C(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C5818ACC(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v19;
  unsigned __int8 *v20;

  v3 = result;
  v4 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v4 == 83)
  {
    v5 = *(_QWORD *)(a2 + 40);
    v6 = v5 + 40;
    for (i = *(_QWORD *)(v5 + 48); i != v6; i = *(_QWORD *)(i + 8))
    {
      v8 = i - 24;
      if (!i)
        v8 = 0;
      if (*(_BYTE *)(v8 + 16) != 83)
        goto LABEL_27;
    }
    goto LABEL_32;
  }
  if (a2 && v4 >= 0x1C)
  {
    if ((a3 & 1) == 0)
    {
      v9 = *(_QWORD *)(a2 + 32);
      if (v9)
        a2 = v9 - 24;
      else
        a2 = 0;
    }
    *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(result + 56) = a2 + 24;
    v10 = *(unsigned __int8 **)(a2 + 48);
    v20 = v10;
    if (!v10)
    {
      v11 = 0;
      goto LABEL_36;
    }
LABEL_39:
    llvm::MetadataTracking::track((uint64_t)&v20, v10, 2);
    v11 = v20;
LABEL_36:
    result = sub_1C4774EF4(v3, 0, (uint64_t)v11);
    if (v20)
      return llvm::MetadataTracking::untrack((uint64_t)&v20, v20);
    return result;
  }
  if (a2 && v4 == 21)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 80);
    v13 = v12 - 24;
    if (!v12)
      v13 = 0;
    v6 = v13 + 40;
    for (i = *(_QWORD *)(v13 + 48); i != v6; i = *(_QWORD *)(i + 8))
    {
      v14 = i - 24;
      if (!i)
        v14 = 0;
      if (*(_BYTE *)(v14 + 16) != 83)
      {
LABEL_27:
        v15 = *(unsigned __int8 *)(i - 8) - 38;
        v16 = v15 > 0x38;
        v17 = (1 << v15) & 0x100060000000001;
        if (v16 || v17 == 0)
          v6 = i;
        else
          v6 = *(_QWORD *)(i + 8);
        break;
      }
    }
LABEL_32:
    v11 = 0;
    if (v6)
      v19 = v6 - 24;
    else
      v19 = 0;
    *(_QWORD *)(result + 48) = *(_QWORD *)(v19 + 40);
    *(_QWORD *)(result + 56) = v19 + 24;
    v10 = *(unsigned __int8 **)(v19 + 48);
    v20 = v10;
    if (!v10)
      goto LABEL_36;
    goto LABEL_39;
  }
  return result;
}

uint64_t sub_1C5818C58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  llvm::Constant *v6;
  llvm::Constant *v7;
  char v8;
  uint64_t v9;
  llvm::Constant *v10;
  char v11;
  uint64_t result;
  char v13;
  llvm::Constant *v14;
  char v15;

  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 != 56)
  {
    if (v5 != 5)
      return (v5 == 5) & a3;
    if (*(_WORD *)(a2 + 18) != 28)
    {
LABEL_26:
      LOBYTE(a3) = 0;
      return (v5 == 5) & a3;
    }
    v7 = *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    if (sub_1C5818E00(a1, (uint64_t)v7))
    {
      if (!v7)
      {
LABEL_24:
        v14 = *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
        if (sub_1C5818E00(a1, (uint64_t)v14))
        {
          if (!v14)
            goto LABEL_26;
        }
        else
        {
          v15 = sub_1C5819400(v14);
          LOBYTE(a3) = 0;
          if (!v14 || (v15 & 1) == 0)
            return (v5 == 5) & a3;
        }
        **(_QWORD **)(a1 + 48) = v14;
        a3 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        if (!a3)
          return (v5 == 5) & a3;
LABEL_30:
        **(_QWORD **)(a1 + 56) = a3;
        LOBYTE(a3) = 1;
        return (v5 == 5) & a3;
      }
    }
    else
    {
      v13 = sub_1C5819400(v7);
      if (!v7 || (v13 & 1) == 0)
        goto LABEL_24;
    }
    **(_QWORD **)(a1 + 48) = v7;
    a3 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
    if (a3)
      goto LABEL_30;
    goto LABEL_24;
  }
  v6 = *(llvm::Constant **)(a2 - 64);
  if (!sub_1C5818E00(a1, (uint64_t)v6))
  {
    v8 = sub_1C581916C(v6);
    if (!v6 || (v8 & 1) == 0)
      goto LABEL_13;
LABEL_12:
    **(_QWORD **)(a1 + 48) = v6;
    v9 = *(_QWORD *)(a2 - 32);
    if (v9)
      goto LABEL_19;
    goto LABEL_13;
  }
  if (v6)
    goto LABEL_12;
LABEL_13:
  v10 = *(llvm::Constant **)(a2 - 32);
  if (sub_1C5818E00(a1, (uint64_t)v10))
  {
    if (!v10)
      return 0;
LABEL_18:
    **(_QWORD **)(a1 + 48) = v10;
    v9 = *(_QWORD *)(a2 - 64);
    if (!v9)
      return 0;
LABEL_19:
    **(_QWORD **)(a1 + 56) = v9;
    return 1;
  }
  v11 = sub_1C581916C(v10);
  result = 0;
  if (v10 && (v11 & 1) != 0)
    goto LABEL_18;
  return result;
}

BOOL sub_1C5818E00(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;

  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 5)
  {
    v7 = *(unsigned __int16 *)(a2 + 18);
    if (v7 != 30)
    {
      v10 = a1 + 3;
LABEL_38:
      if (v7 != 13)
        goto LABEL_54;
      v15 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      v16 = *(unsigned __int8 *)(v15 + 16);
      if (v16 == 5)
      {
        if (*(_WORD *)(v15 + 18) != 25
          || !sub_1C4D89E3C(v10, *(llvm::Constant **)(v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF))))
        {
          goto LABEL_54;
        }
      }
      else if (v16 != 53 || (sub_1C4D89CC8(v10, *(llvm::Constant **)(v15 - 64)) & 1) == 0)
      {
        goto LABEL_54;
      }
      if ((sub_1C4D9EED4(a1 + 5, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32)) & 1) != 0)
        return 1;
      goto LABEL_54;
    }
    v8 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v9 = *(unsigned __int8 *)(v8 + 16);
    if (v9 == 5)
    {
      if (*(_WORD *)(v8 + 18) != 25
        || !sub_1C4D9EED4(a1, *(llvm::Constant **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF))))
      {
        goto LABEL_27;
      }
    }
    else if (v9 != 53 || (sub_1C4D9ED34(a1, *(llvm::Constant **)(v8 - 64)) & 1) == 0)
    {
      goto LABEL_27;
    }
    if ((sub_1C4D9EED4(a1 + 2, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32)) & 1) != 0)
      return 1;
LABEL_27:
    v13 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
    v14 = *(unsigned __int8 *)(v13 + 16);
    if (v14 == 5)
    {
      if (*(_WORD *)(v13 + 18) != 25
        || !sub_1C4D9EED4(a1, *(llvm::Constant **)(v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF))))
      {
        goto LABEL_34;
      }
    }
    else if (v14 != 53 || (sub_1C4D9ED34(a1, *(llvm::Constant **)(v13 - 64)) & 1) == 0)
    {
      goto LABEL_34;
    }
    if ((sub_1C4D9EED4(a1 + 2, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF))) & 1) != 0)
      return 1;
    goto LABEL_34;
  }
  if (v4 != 58)
    goto LABEL_35;
  v5 = *(_QWORD *)(a2 - 64);
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 5)
  {
    if (*(_WORD *)(v5 + 18) != 25
      || !sub_1C4D9EED4(a1, *(llvm::Constant **)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF))))
    {
      goto LABEL_16;
    }
  }
  else if (v6 != 53 || (sub_1C4D9ED34(a1, *(llvm::Constant **)(v5 - 64)) & 1) == 0)
  {
    goto LABEL_16;
  }
  if ((sub_1C4D9ED34(a1 + 2, *(llvm::Constant **)(a2 - 32)) & 1) != 0)
    return 1;
LABEL_16:
  v11 = *(_QWORD *)(a2 - 32);
  v12 = *(unsigned __int8 *)(v11 + 16);
  if (v12 == 5)
  {
    if (*(_WORD *)(v11 + 18) != 25
      || !sub_1C4D9EED4(a1, *(llvm::Constant **)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF))))
    {
      goto LABEL_34;
    }
LABEL_22:
    if ((sub_1C4D9ED34(a1 + 2, *(llvm::Constant **)(a2 - 64)) & 1) != 0)
      return 1;
    goto LABEL_34;
  }
  if (v12 == 53 && (sub_1C4D9ED34(a1, *(llvm::Constant **)(v11 - 64)) & 1) != 0)
    goto LABEL_22;
LABEL_34:
  v4 = *(unsigned __int8 *)(a2 + 16);
LABEL_35:
  v10 = a1 + 3;
  if (v4 != 41)
  {
    if (v4 != 5)
      goto LABEL_54;
    v7 = *(unsigned __int16 *)(a2 + 18);
    goto LABEL_38;
  }
  v17 = *(_QWORD *)(a2 - 64);
  v18 = *(unsigned __int8 *)(v17 + 16);
  if (v18 == 5)
  {
    if (*(_WORD *)(v17 + 18) != 25
      || !sub_1C4D89E3C(v10, *(llvm::Constant **)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF))))
    {
      goto LABEL_54;
    }
  }
  else if (v18 != 53 || (sub_1C4D89CC8(v10, *(llvm::Constant **)(v17 - 64)) & 1) == 0)
  {
    goto LABEL_54;
  }
  if ((sub_1C4D9ED34(a1 + 5, *(llvm::Constant **)(a2 - 32)) & 1) != 0)
    return 1;
LABEL_54:
  v19 = a1 + 8;
  v20 = *(unsigned __int8 *)(a2 + 16);
  if (v20 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 26
      || (sub_1C4D9EED4(v19, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF))) & 1) == 0)
    {
      return sub_1C581925C(a1 + 16, 26, a2);
    }
    return 1;
  }
  if (v20 == 54 && (sub_1C4D9ED34(v19, *(llvm::Constant **)(a2 - 64)) & 1) != 0)
    return 1;
  return sub_1C581925C(a1 + 16, 26, a2);
}

uint64_t sub_1C581916C(llvm::Constant *this)
{
  llvm::Constant *v1;
  unsigned int v2;
  uint64_t v4;
  int v7;
  llvm::Type *v8;
  char v9;
  llvm::UndefValue *AggregateElement;
  int v11;

  v1 = this;
  v2 = *((unsigned __int8 *)this + 16);
  if (this && v2 == 16)
    return sub_1C49AB31C((llvm::Constant *)((char *)this + 24));
  v4 = *(_QWORD *)this;
  if (v2 <= 0x14 && v4 != 0 && (*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 18)
  {
    this = llvm::Constant::getSplatValue(this, 0);
    if (this && *((_BYTE *)this + 16) == 16)
      return sub_1C49AB31C((llvm::Constant *)((char *)this + 24));
    if (*(_BYTE *)(v4 + 8) == 18)
    {
      v7 = *(_DWORD *)(v4 + 32);
      if (v7)
      {
        v8 = 0;
        v9 = 0;
        while (1)
        {
          AggregateElement = llvm::Constant::getAggregateElement(v1, v8);
          if (!AggregateElement)
            break;
          v11 = *((unsigned __int8 *)AggregateElement + 16);
          if ((v11 - 11) >= 2)
          {
            if (v11 != 16 || !sub_1C49AB31C((llvm::UndefValue *)((char *)AggregateElement + 24)))
              break;
            v9 = 1;
          }
          v8 = (llvm::Type *)((_DWORD)v8 + 1);
          if (v7 == (_DWORD)v8)
            return v9 & 1;
        }
      }
    }
  }
  v9 = 0;
  return v9 & 1;
}

BOOL sub_1C581925C(uint64_t a1, int a2, uint64_t a3)
{
  int v5;
  char v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v5 = *(unsigned __int8 *)(a3 + 16);
  v6 = a2 + 28;
  if (a2 + 28 != v5)
  {
    if (v5 != 5)
      return (v5 == 5) & v6;
    if (*(unsigned __int16 *)(a3 + 18) == a2)
    {
      v10 = *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
      v11 = *(unsigned __int8 *)(v10 + 16);
      if (v11 == 5)
      {
        if (*(_WORD *)(v10 + 18) != 25)
          goto LABEL_23;
        if (!sub_1C4D9EED4(a1, *(llvm::Constant **)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF))))
          goto LABEL_23;
        v12 = *(_QWORD *)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) + 32);
        if (!v12)
          goto LABEL_23;
      }
      else
      {
        if (v11 != 53)
          goto LABEL_23;
        if (!sub_1C4D9ED34(a1, *(llvm::Constant **)(v10 - 64)))
          goto LABEL_23;
        v12 = *(_QWORD *)(v10 - 32);
        if (!v12)
          goto LABEL_23;
      }
      **(_QWORD **)(a1 + 8) = v12;
      if (**(_QWORD **)(a1 + 16) == *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32))
      {
        v6 = 1;
        return (v5 == 5) & v6;
      }
    }
LABEL_23:
    v6 = 0;
    return (v5 == 5) & v6;
  }
  v7 = *(_QWORD *)(a3 - 64);
  v8 = *(unsigned __int8 *)(v7 + 16);
  if (v8 == 5)
  {
    if (*(_WORD *)(v7 + 18) != 25)
      return 0;
    if (!sub_1C4D9EED4(a1, *(llvm::Constant **)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF))))
      return 0;
    v9 = *(_QWORD *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) + 32);
    if (!v9)
      return 0;
  }
  else
  {
    if (v8 != 53)
      return 0;
    if (!sub_1C4D9ED34(a1, *(llvm::Constant **)(v7 - 64)))
      return 0;
    v9 = *(_QWORD *)(v7 - 32);
    if (!v9)
      return 0;
  }
  **(_QWORD **)(a1 + 8) = v9;
  return **(_QWORD **)(a1 + 16) == *(_QWORD *)(a3 - 32);
}

uint64_t sub_1C5819400(llvm::Constant *this)
{
  llvm::Constant *v1;
  uint64_t v3;
  BOOL v4;
  int v5;
  llvm::Type *v6;
  char v7;
  llvm::UndefValue *AggregateElement;
  int v9;

  v1 = this;
  if (this && *((_BYTE *)this + 16) == 16)
    return sub_1C49AB31C((llvm::Constant *)((char *)this + 24));
  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v4 = (*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 18;
  else
    v4 = 0;
  if (v4)
  {
    this = llvm::Constant::getSplatValue(this, 0);
    if (this && *((_BYTE *)this + 16) == 16)
      return sub_1C49AB31C((llvm::Constant *)((char *)this + 24));
    if (*(_BYTE *)(v3 + 8) == 18)
    {
      v5 = *(_DWORD *)(v3 + 32);
      if (v5)
      {
        v6 = 0;
        v7 = 0;
        while (1)
        {
          AggregateElement = llvm::Constant::getAggregateElement(v1, v6);
          if (!AggregateElement)
            break;
          v9 = *((unsigned __int8 *)AggregateElement + 16);
          if ((v9 - 11) >= 2)
          {
            if (v9 != 16 || !sub_1C49AB31C((llvm::UndefValue *)((char *)AggregateElement + 24)))
              break;
            v7 = 1;
          }
          v6 = (llvm::Type *)((_DWORD)v6 + 1);
          if (v5 == (_DWORD)v6)
            return v7 & 1;
        }
      }
    }
  }
  v7 = 0;
  return v7 & 1;
}

BOOL sub_1C58194EC(int a1, llvm::Constant *this)
{
  _BOOL4 v2;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  int v11;
  llvm::APFloatBase *SplatValue;
  char *v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  int v17;
  llvm::Type *v18;
  llvm::UndefValue *AggregateElement;
  int v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  _QWORD *v24;

  v4 = *((unsigned __int8 *)this + 16);
  if (this && v4 == 16)
  {
    v5 = *((_DWORD *)this + 8);
    v6 = (_QWORD *)(*((_QWORD *)this + 3) + 8 * ((v5 - 1) >> 6));
    if (v5 < 0x41)
      v6 = (_QWORD *)((char *)this + 24);
    return ((*v6 >> (v5 - 1)) & 1) == 0;
  }
  else
  {
    v8 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      v9 = (*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 18;
    else
      v9 = 0;
    v10 = !v9 || v4 > 0x14;
    v11 = v10;
    if (!v10)
    {
      SplatValue = llvm::Constant::getSplatValue(this, 0);
      if (SplatValue && *((_BYTE *)SplatValue + 16) == 16)
      {
        v14 = *((_QWORD *)SplatValue + 3);
        v13 = (char *)SplatValue + 24;
        v15 = *((_DWORD *)v13 + 2);
        v16 = (_QWORD *)(v14 + 8 * ((v15 - 1) >> 6));
        if (v15 < 0x41)
          v16 = v13;
        v2 = ((*v16 >> (v15 - 1)) & 1) == 0;
      }
      else
      {
        if (*(_BYTE *)(v8 + 8) == 18)
        {
          v17 = *(_DWORD *)(v8 + 32);
          if (v17)
          {
            v18 = 0;
            v2 = 0;
            while (1)
            {
              AggregateElement = llvm::Constant::getAggregateElement(this, v18);
              if (!AggregateElement)
                break;
              v20 = *((unsigned __int8 *)AggregateElement + 16);
              if ((v20 - 11) >= 2)
              {
                if (v20 != 16)
                  break;
                v22 = *((_QWORD *)AggregateElement + 3);
                v21 = (char *)AggregateElement + 24;
                v23 = *((_DWORD *)v21 + 2);
                v24 = (_QWORD *)(v22 + 8 * ((v23 - 1) >> 6));
                if (v23 < 0x41)
                  v24 = v21;
                if (((*v24 >> (v23 - 1)) & 1) != 0)
                  break;
                v2 = 1;
              }
              v18 = (llvm::Type *)((_DWORD)v18 + 1);
              if (v17 == (_DWORD)v18)
                return (v11 ^ 1) & v2;
            }
          }
        }
        v2 = 0;
      }
    }
    return (v11 ^ 1) & v2;
  }
}

uint64_t sub_1C5819650(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  BOOL v11;
  _QWORD **v14;

  v2 = *(unsigned __int8 *)(a2 + 16);
  v3 = v2 - 28;
  v5 = v2 < 0x1C && v2 != 5;
  if (!a2 || v5)
    goto LABEL_23;
  if (v2 <= 0x1B)
    v3 = *(unsigned __int16 *)(a2 + 18);
  if (v3 != 38
    || ((v6 = *(_DWORD *)(a2 + 20), (v6 & 0x40000000) != 0)
      ? (v7 = *(uint64_t **)(a2 - 8))
      : (v7 = (uint64_t *)(a2 - 32 * (v6 & 0x7FFFFFF))),
        (v8 = *v7, v9 = *(unsigned __int8 *)(v8 + 16), v8) ? (v10 = v9 >= 0x1C) : (v10 = 0),
        v10 ? (v11 = v9 - 53 > 1) : (v11 = 1),
        v11))
  {
LABEL_23:
    if (v2 < 0x1C || v2 - 53 > 1)
      return 0;
    v14 = (_QWORD **)(a1 + 24);
  }
  else
  {
    v14 = (_QWORD **)(a1 + 8);
    a2 = v8;
  }
  **v14 = a2;
  return 1;
}

uint64_t sub_1C58196E8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    if (*(unsigned __int8 *)(a2 + 16) - 41 <= 0x11)
    {
      v2 = *(_QWORD *)(a2 - 64);
      if (v2)
      {
        v3 = result;
        **(_QWORD **)result = v2;
        v4 = *(_QWORD *)(a2 - 32);
        result = sub_1C4B0378C((_QWORD **)(result + 8), v4);
        if ((result & 1) == 0)
        {
          if (v4)
            **(_QWORD **)(v3 + 16) = v4;
        }
      }
    }
  }
  return result;
}

BOOL sub_1C5819744(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;

  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 85)
  {
    v6 = *(_QWORD *)(a2 - 96);
    if (v6 && *(_BYTE *)(v6 + 16) == 81)
    {
      v7 = *(_QWORD *)(a2 - 64);
      v8 = *(_QWORD *)(a2 - 32);
      v9 = *(_QWORD *)(v6 - 64);
      v10 = *(_QWORD *)(v6 - 32);
      v11 = v7 == v9 && v8 == v10;
      if (v11 || (v7 == v10 ? (v12 = v8 == v9) : (v12 = 0), v12))
      {
        v13 = *(_WORD *)(v6 + 18) & 0x3E;
        if (v7 == v9)
        {
          if (v13 == 38)
            return 1;
        }
        else if (v13 == 40)
        {
          return 1;
        }
      }
    }
  }
  else if (v4 == 84)
  {
    v5 = *(_QWORD *)(a2 - 32);
    if (v5)
    {
      if (!*(_BYTE *)(v5 + 16)
        && *(_QWORD *)(v5 + 24) == *(_QWORD *)(a2 + 72)
        && (*(_BYTE *)(v5 + 33) & 0x20) != 0
        && *(_DWORD *)(v5 + 36) == 274)
      {
        return 1;
      }
    }
  }
  if (!sub_1C4E7A324(a1 + 2, a2))
  {
    v14 = *(unsigned __int8 *)(a2 + 16);
    if (v14 != 85)
    {
      if (v14 == 84)
      {
        v15 = *(_QWORD *)(a2 - 32);
        if (v15)
        {
          if (!*(_BYTE *)(v15 + 16)
            && *(_QWORD *)(v15 + 24) == *(_QWORD *)(a2 + 72)
            && (*(_BYTE *)(v15 + 33) & 0x20) != 0
            && *(_DWORD *)(v15 + 36) == 305)
          {
            return 1;
          }
        }
      }
      return sub_1C4E7A268(a1 + 6, a2);
    }
    v16 = *(_QWORD *)(a2 - 96);
    if (!v16 || *(_BYTE *)(v16 + 16) != 81)
      return sub_1C4E7A268(a1 + 6, a2);
    v17 = *(_QWORD *)(a2 - 64);
    v18 = *(_QWORD *)(a2 - 32);
    v19 = *(_QWORD *)(v16 - 64);
    v20 = *(_QWORD *)(v16 - 32);
    v21 = v17 == v19 && v18 == v20;
    if (!v21 && (v17 != v20 || v18 != v19))
      return sub_1C4E7A268(a1 + 6, a2);
    v22 = *(_WORD *)(v16 + 18) & 0x3E;
    if (v17 == v19)
    {
      if (v22 != 34)
        return sub_1C4E7A268(a1 + 6, a2);
    }
    else if (v22 != 36)
    {
      return sub_1C4E7A268(a1 + 6, a2);
    }
  }
  return 1;
}

uint64_t sub_1C58198E4(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 30)
      return 0;
    v8 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v9 = *(unsigned __int8 *)(v8 + 16);
    if (v9 == 5)
    {
      if (*(_WORD *)(v8 + 18) != 25)
        goto LABEL_32;
      if (!sub_1C4D9EED4(a1, *(llvm::Constant **)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF))))
        goto LABEL_32;
      v10 = *(_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32);
      if (!v10)
        goto LABEL_32;
    }
    else
    {
      if (v9 != 53)
        goto LABEL_32;
      if (!sub_1C4D9ED34(a1, *(llvm::Constant **)(v8 - 64)))
        goto LABEL_32;
      v10 = *(_QWORD *)(v8 - 32);
      if (!v10)
        goto LABEL_32;
    }
    **(_QWORD **)(a1 + 8) = v10;
    if ((sub_1C4D9EED4(a1 + 16, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32)) & 1) != 0)
      return 1;
LABEL_32:
    v15 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
    v16 = *(unsigned __int8 *)(v15 + 16);
    if (v16 == 5)
    {
      if (*(_WORD *)(v15 + 18) != 25)
        return 0;
      result = sub_1C4D9EED4(a1, *(llvm::Constant **)(v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF)));
      if (!(_DWORD)result)
        return result;
      v17 = *(_QWORD *)(v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF) + 32);
      if (!v17)
        return 0;
    }
    else
    {
      if (v16 != 53)
        return 0;
      result = sub_1C4D9ED34(a1, *(llvm::Constant **)(v15 - 64));
      if (!(_DWORD)result)
        return result;
      v17 = *(_QWORD *)(v15 - 32);
      if (!v17)
        return 0;
    }
    **(_QWORD **)(a1 + 8) = v17;
    return sub_1C4D9EED4(a1 + 16, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
  }
  if (v4 == 58)
  {
    v5 = *(_QWORD *)(a2 - 64);
    v6 = *(unsigned __int8 *)(v5 + 16);
    if (v6 == 5)
    {
      if (*(_WORD *)(v5 + 18) != 25
        || !sub_1C4D9EED4(a1, *(llvm::Constant **)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF)))
        || (v7 = *(_QWORD *)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) + 32)) == 0)
      {
LABEL_18:
        v11 = *(_QWORD *)(a2 - 32);
        v12 = *(unsigned __int8 *)(v11 + 16);
        if (v12 == 5)
        {
          if (*(_WORD *)(v11 + 18) != 25)
            return 0;
          result = sub_1C4D9EED4(a1, *(llvm::Constant **)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF)));
          if (!(_DWORD)result)
            return result;
          v14 = *(_QWORD *)(v11 - 32 * (*(_DWORD *)(v11 + 20) & 0x7FFFFFF) + 32);
          if (!v14)
            return 0;
        }
        else
        {
          if (v12 != 53)
            return 0;
          result = sub_1C4D9ED34(a1, *(llvm::Constant **)(v11 - 64));
          if (!(_DWORD)result)
            return result;
          v14 = *(_QWORD *)(v11 - 32);
          if (!v14)
            return 0;
        }
        **(_QWORD **)(a1 + 8) = v14;
        return sub_1C4D9ED34(a1 + 16, *(llvm::Constant **)(a2 - 64));
      }
    }
    else
    {
      if (v6 != 53)
        goto LABEL_18;
      if (!sub_1C4D9ED34(a1, *(llvm::Constant **)(v5 - 64)))
        goto LABEL_18;
      v7 = *(_QWORD *)(v5 - 32);
      if (!v7)
        goto LABEL_18;
    }
    **(_QWORD **)(a1 + 8) = v7;
    if ((sub_1C4D9ED34(a1 + 16, *(llvm::Constant **)(a2 - 32)) & 1) == 0)
      goto LABEL_18;
    return 1;
  }
  return 0;
}

BOOL sub_1C5819B98@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 54)
  {
    v6 = *(_QWORD *)(a2 - 64);
    v7 = *(unsigned __int8 *)(v6 + 16);
    if (v7 == 5)
    {
      if (*(_WORD *)(v6 + 18) != 15)
        return 0;
      if (!sub_1C4E71060(a1, *(llvm::Constant **)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF))))
        return 0;
      v8 = *(_QWORD *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) + 32);
      if (!v8)
        return 0;
    }
    else
    {
      if (v7 != 43)
        return 0;
      if (!sub_1C4D8AC3C(a1, *(llvm::Constant **)(v6 - 64)))
        return 0;
      v8 = *(_QWORD *)(v6 - 32);
      if (!v8)
        return 0;
    }
    **(_QWORD **)(a1 + 8) = v8;
    return sub_1C4D8A7F0((llvm::APInt *)(a1 + 16), *(unsigned __int8 **)(a2 - 32));
  }
  if (v5 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 26)
      goto LABEL_25;
    v9 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v10 = *(unsigned __int8 *)(v9 + 16);
    if (v10 == 5)
    {
      if (*(_WORD *)(v9 + 18) != 15)
        goto LABEL_25;
      if (!sub_1C4E71060(a1, *(llvm::Constant **)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF))))
        goto LABEL_25;
      v11 = *(_QWORD *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) + 32);
      if (!v11)
        goto LABEL_25;
    }
    else
    {
      if (v10 != 43)
        goto LABEL_25;
      if (!sub_1C4D8AC3C(a1, *(llvm::Constant **)(v9 - 64)))
        goto LABEL_25;
      v11 = *(_QWORD *)(v9 - 32);
      if (!v11)
        goto LABEL_25;
    }
    **(_QWORD **)(a1 + 8) = v11;
    if (!sub_1C4D8A86C((llvm::APInt *)(a1 + 16), *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32)))
    {
LABEL_25:
      a3 = 0;
      return (v5 == 5) & a3;
    }
    a3 = 1;
  }
  return (v5 == 5) & a3;
}

llvm::APFloatBase *sub_1C5819D30(_QWORD **a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (!a2 || v2 < 0x1C)
  {
    if (v2 == 5 && (*(_WORD *)(a2 + 18) & 0xFFFE) == 0x1A)
    {
      v5 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      if (v5)
      {
        **a1 = v5;
        return sub_1C4D8A004((uint64_t)(a1 + 1), *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32));
      }
    }
    return 0;
  }
  if ((v2 & 0xFE) != 0x36)
    return 0;
  v3 = *(_DWORD *)(a2 + 20);
  v4 = (v3 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v3 & 0x7FFFFFF));
  v7 = *v4;
  if (!v7)
    return 0;
  v9 = *a1;
  v8 = (uint64_t)(a1 + 1);
  *v9 = v7;
  v10 = *(_DWORD *)(a2 + 20);
  if ((v10 & 0x40000000) != 0)
    v11 = *(_QWORD *)(a2 - 8);
  else
    v11 = a2 - 32 * (v10 & 0x7FFFFFF);
  return sub_1C4D89F84(v8, *(unsigned __int8 **)(v11 + 32));
}

uint64_t sub_1C5819DE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  int v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 8);
  if (!v2 || *(_QWORD *)(v2 + 8))
    return 0;
  v6 = *(unsigned __int8 *)(a2 + 16);
  if (v6 == 5)
  {
    if (*(_WORD *)(a2 + 18) == 19)
    {
      result = sub_1C4D9EED4(a1, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
      if (!(_DWORD)result)
        return result;
      v7 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
      if (v7)
        goto LABEL_13;
    }
    return 0;
  }
  if (v6 != 47)
    return 0;
  result = sub_1C4D9ED34(a1, *(llvm::Constant **)(a2 - 64));
  if ((_DWORD)result)
  {
    v7 = *(_QWORD *)(a2 - 32);
    if (!v7)
      return 0;
LABEL_13:
    **(_QWORD **)(a1 + 8) = v7;
    if (*(unsigned __int8 *)(a2 + 16) >= 0x1Cu)
    {
      **(_QWORD **)(a1 + 16) = a2;
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1C5819EA8(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  _QWORD **v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
      return 0;
    v4 = *(unsigned __int8 *)(a2 + 16);
    if (v4 >= 0x1C)
    {
      if (v4 - 47 > 1)
        return 0;
      v11 = *(_DWORD *)(a2 + 20);
      if ((v11 & 0x40000000) != 0)
        v12 = *(uint64_t **)(a2 - 8);
      else
        v12 = (uint64_t *)(a2 - 32 * (v11 & 0x7FFFFFF));
      v13 = *v12;
      v14 = *(unsigned __int8 *)(v13 + 16);
      if (v14 != 5)
      {
        if (v14 != 45)
          return 0;
        v15 = *(_QWORD *)(v13 - 64);
        v16 = **a1;
        v17 = *(_QWORD *)(v13 - 32);
        if (v16 != v15 || !v17)
        {
          v18 = v15 && v16 == v17;
          v17 = *(_QWORD *)(v13 - 64);
          if (!v18)
            return 0;
        }
        *a1[1] = v17;
        *a1[2] = v13;
        v22 = *(_DWORD *)(a2 + 20);
        v23 = (v22 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v22 & 0x7FFFFFF);
        if (*a1[3] != *(_QWORD *)(v23 + 32))
          return 0;
        v10 = a1 + 4;
        v2 = 1;
        goto LABEL_50;
      }
      if (*(_WORD *)(v13 + 18) != 17)
        return 0;
      v19 = (uint64_t *)(v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF));
    }
    else
    {
      if (v4 != 5 || *(unsigned __int16 *)(a2 + 18) - 19 > 1)
        return 0;
      a2 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      v5 = *(unsigned __int8 *)(a2 + 16);
      if (v5 != 5)
      {
        if (v5 != 45)
          return 0;
        v6 = *(_QWORD *)(a2 - 64);
        v7 = **a1;
        v8 = *(_QWORD *)(a2 - 32);
        if (v7 != v6 || !v8)
        {
          v9 = v6 && v7 == v8;
          v8 = *(_QWORD *)(a2 - 64);
          if (!v9)
            return 0;
        }
        v2 = 0;
        *a1[1] = v8;
        v10 = a1 + 2;
LABEL_50:
        **v10 = a2;
        return v2;
      }
      if (*(_WORD *)(a2 + 18) != 17)
        return 0;
      v19 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    }
    v20 = **a1;
    a2 = v19[4];
    if (v20 != *v19 || !a2)
    {
      v21 = *v19 && v20 == a2;
      a2 = *v19;
      if (!v21)
        return 0;
    }
    v2 = 0;
    v10 = a1 + 1;
    goto LABEL_50;
  }
  return v2;
}

uint64_t sub_1C581A078(_QWORD **a1, llvm::Constant *this)
{
  char *v4;
  uint64_t result;

  if (this)
  {
    if (*((_BYTE *)this + 16) == 16)
    {
      v4 = (char *)this + 24;
      if ((sub_1C49AB31C((llvm::Constant *)((char *)this + 24)) & 1) != 0)
        goto LABEL_4;
    }
  }
  if ((*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) != 0x12 || *((unsigned __int8 *)this + 16) > 0x14u)
    return 0;
  result = (uint64_t)llvm::Constant::getSplatValue(this, 0);
  if (!result)
    return result;
  if (*(_BYTE *)(result + 16) != 16)
    return 0;
  v4 = (char *)(result + 24);
  result = sub_1C49AB31C((llvm::APInt *)(result + 24));
  if ((_DWORD)result)
  {
LABEL_4:
    **a1 = v4;
    return 1;
  }
  return result;
}

uint64_t sub_1C581A124(_QWORD **a1, llvm::Constant *this)
{
  char *v4;
  uint64_t result;

  if (this)
  {
    if (*((_BYTE *)this + 16) == 16)
    {
      v4 = (char *)this + 24;
      if ((sub_1C49AB31C((llvm::Constant *)((char *)this + 24)) & 1) != 0)
      {
LABEL_8:
        **a1 = v4;
        return 1;
      }
    }
  }
  if ((*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 0x12)
  {
    result = (uint64_t)llvm::Constant::getSplatValue(this, 0);
    if (!result)
      return result;
    if (*(_BYTE *)(result + 16) == 16)
    {
      v4 = (char *)(result + 24);
      result = sub_1C49AB31C((llvm::APInt *)(result + 24));
      if (!(_DWORD)result)
        return result;
      goto LABEL_8;
    }
  }
  return 0;
}

uint64_t sub_1C581A1C0(uint64_t a1, uint64_t a2)
{
  int v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 28)
      return 0;
    v9 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v10 = *(unsigned __int8 *)(v9 + 16);
    if (v10 == 5)
    {
      if (*(_WORD *)(v9 + 18) != 15
        || !sub_1C4E71060(a1, *(llvm::Constant **)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF))))
      {
        goto LABEL_31;
      }
      v11 = *(_QWORD *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) + 32);
    }
    else
    {
      if (v10 != 43 || !sub_1C4D8AC3C(a1, *(llvm::Constant **)(v9 - 64)))
        goto LABEL_31;
      v11 = *(_QWORD *)(v9 - 32);
    }
    if (*(_QWORD *)(a1 + 8) == v11
      && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32))
    {
      return 1;
    }
LABEL_31:
    v16 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
    v17 = *(unsigned __int8 *)(v16 + 16);
    if (v17 == 5)
    {
      if (*(_WORD *)(v16 + 18) != 15)
        return 0;
      result = sub_1C4E71060(a1, *(llvm::Constant **)(v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF)));
      if (!(_DWORD)result)
        return result;
      v18 = *(_QWORD *)(v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF) + 32);
    }
    else
    {
      if (v17 != 43)
        return 0;
      result = sub_1C4D8AC3C(a1, *(llvm::Constant **)(v16 - 64));
      if (!(_DWORD)result)
        return result;
      v18 = *(_QWORD *)(v16 - 32);
    }
    if (*(_QWORD *)(a1 + 8) == v18)
    {
      v5 = (_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      return *(_QWORD *)(a1 + 16) == *v5;
    }
    return 0;
  }
  if (v4 != 56)
    return 0;
  v5 = (_QWORD *)(a2 - 64);
  v6 = *(_QWORD *)(a2 - 64);
  v7 = *(unsigned __int8 *)(v6 + 16);
  if (v7 == 5)
  {
    if (*(_WORD *)(v6 + 18) == 15
      && sub_1C4E71060(a1, *(llvm::Constant **)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF))))
    {
      v8 = *(_QWORD *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) + 32);
      goto LABEL_15;
    }
  }
  else if (v7 == 43 && sub_1C4D8AC3C(a1, *(llvm::Constant **)(v6 - 64)))
  {
    v8 = *(_QWORD *)(v6 - 32);
LABEL_15:
    if (*(_QWORD *)(a1 + 8) != v8 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 - 32))
      goto LABEL_17;
    return 1;
  }
LABEL_17:
  v12 = *(_QWORD *)(a2 - 32);
  v13 = *(unsigned __int8 *)(v12 + 16);
  if (v13 == 5)
  {
    if (*(_WORD *)(v12 + 18) == 15)
    {
      result = sub_1C4E71060(a1, *(llvm::Constant **)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF)));
      if (!(_DWORD)result)
        return result;
      v15 = *(_QWORD *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) + 32);
      goto LABEL_24;
    }
  }
  else if (v13 == 43)
  {
    result = sub_1C4D8AC3C(a1, *(llvm::Constant **)(v12 - 64));
    if (!(_DWORD)result)
      return result;
    v15 = *(_QWORD *)(v12 - 32);
LABEL_24:
    if (*(_QWORD *)(a1 + 8) == v15)
      return *(_QWORD *)(a1 + 16) == *v5;
  }
  return 0;
}

llvm::UndefValue **sub_1C581A450(uint64_t a1, llvm::ArrayType **this)
{
  char isArrayAllocation;
  llvm::Type *v5;
  const llvm::APInt *v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  llvm::Value **NullValue;
  uint64_t v11;
  llvm::ValueAsMetadata *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::ConstantInt *v15;
  unint64_t v16;
  char v17;
  llvm::ValueHandleBase *v18;
  uint64_t v19;
  llvm::AllocaInst *v20;
  unsigned __int8 *v21;
  llvm::Type **v22;
  unsigned int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  unsigned int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  __int32 v44;
  char *v45;
  int64x2_t *v46;
  unsigned int v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  llvm::APInt *v63;
  unsigned int v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  BOOL v75;
  int v76;
  uint64_t v78;
  llvm::DataLayout **v79;
  unsigned __int8 *v80;
  unsigned int v81;
  const llvm::DataLayout *v82;
  const char *v83;
  uint64_t v84;
  unint64_t v85;
  unsigned __int8 v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  int v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  unsigned __int8 *v96;
  llvm::Value **v97;
  uint64_t v99;
  llvm::BasicBlock *v100;
  char *FirstNonPHIOrDbg;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  llvm::PointerType *v107;
  llvm::PointerType *TypeAtIndex;
  uint64_t v109;
  llvm::Type *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  llvm::AllocaInst *v116;
  int v117;
  int v118;
  __int16 v119;
  unsigned int v120;
  unsigned int v121;
  _DWORD *v122;
  uint64_t v123;
  _QWORD *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  unsigned __int8 **v128;
  uint64_t *v129;
  unsigned __int8 **v130;
  uint64_t v131;
  llvm::Constant *v132;
  llvm::Type *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t **v138;
  uint64_t *v139;
  int v140;
  int v141;
  uint64_t *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t ***v149;
  char *v150;
  llvm::Value *v151;
  char *v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t ***v158;
  uint64_t **v159;
  uint64_t **v160;
  uint64_t **v161;
  uint64_t ***v162;
  uint64_t v163;
  char **v164;
  char *v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  int v169;
  unsigned int v170;
  uint64_t ****v171;
  uint64_t ***v172;
  uint64_t ****v173;
  int v174;
  BOOL v175;
  unsigned int v176;
  uint64_t ****v177;
  _QWORD *v178;
  void *v179;
  uint64_t v180;
  uint64_t v182;
  llvm::ValueSymbolTable *v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  unsigned __int8 *v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  _DWORD *v194;
  llvm *v195;
  uint64_t v196;
  llvm::Value *Inst;
  const llvm::LoadInst *v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  __int32 v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  llvm::GetElementPtrInst *v207;
  uint64_t v208;
  _QWORD *v209;
  _QWORD *v210;
  llvm::Value *v211;
  uint64_t v212;
  int v213;
  llvm::Type **v214;
  uint64_t v215;
  llvm::Type *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t **v219;
  uint64_t v220;
  uint64_t ***v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  unsigned int v226;
  llvm::Type *v227;
  llvm::PointerType *v228;
  unint64_t v229;
  uint64_t v230;
  llvm::Value *v231;
  uint64_t v232;
  unsigned __int8 *v233;
  uint64_t v234;
  uint64_t v235;
  __int16 ParamAlignment;
  __int16 v237;
  uint64_t *v238;
  uint64_t v239;
  llvm::APInt *v240;
  unsigned int v241;
  BOOL v242;
  uint64_t v243;
  _DWORD *v244;
  llvm::Value *v245;
  int v246;
  llvm::Value *MemTransferInst;
  llvm::MDNode *v248;
  _QWORD *v249;
  _QWORD *v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t ***v253;
  _QWORD *v254;
  uint64_t **v255;
  uint64_t v256;
  llvm::Value *v257;
  int v258;
  unsigned int v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  int v263[2];
  llvm::Value *v264;
  uint64_t v265;
  uint64_t v266[4];
  __int16 v267;
  char v268;
  void *v269;
  uint64_t v270;
  _BYTE v271[32];
  void *v272;
  int64x2_t v273;
  int64x2_t v274;
  void *v275;
  uint64_t v276;
  _BYTE v277[32];
  _QWORD v278[2];
  int v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  int v283[2];
  int64x2_t v284;
  int64x2_t v285;
  __int128 v286;
  uint64_t v287;

  v287 = *MEMORY[0x1E0C80C00];
  isArrayAllocation = llvm::AllocaInst::isArrayAllocation((llvm::AllocaInst *)this);
  v7 = (uint64_t)*(this - 4);
  if ((isArrayAllocation & 1) != 0)
  {
    v8 = *(unsigned __int8 *)(v7 + 16);
    if (v7)
      v9 = v8 == 16;
    else
      v9 = 0;
    if (!v9)
    {
      if ((v8 - 11) <= 1)
      {
        NullValue = llvm::Constant::getNullValue(*this, v5);
        v11 = a1;
        v12 = (llvm::ValueAsMetadata *)this;
LABEL_8:
        v13 = (uint64_t)sub_1C577F888(v11, v12, (llvm::Value *)NullValue);
        goto LABEL_22;
      }
LABEL_19:
      llvm::DataLayout::getIntPtrType(*(llvm::DataLayout **)(a1 + 80), *this);
      v25 = (unsigned __int8 *)*(this - 4);
      if (*(_QWORD *)v25 != v24)
      {
        v26 = v24;
        v27 = *(uint64_t **)(a1 + 24);
        v274.i16[4] = 257;
        v21 = sub_1C4D8D514(v27, v25, v26, 0, (uint64_t)&v272);
        v19 = a1;
        v20 = (llvm::AllocaInst *)this;
LABEL_21:
        v13 = sub_1C577E2C8(v19, (uint64_t)v20, 0, (uint64_t)v21);
LABEL_22:
        v28 = v13;
        if (v13)
          return (llvm::UndefValue **)v28;
        goto LABEL_23;
      }
      goto LABEL_23;
    }
    v22 = (llvm::Type **)(v7 + 24);
    v23 = *(_DWORD *)(v7 + 32);
    if (v23 >= 0x41)
    {
      if (v23 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v7 + 24)) > 0x40)
        goto LABEL_19;
      v22 = (llvm::Type **)*v22;
    }
    llvm::ArrayType::get(this[8], *v22);
    TypeAtIndex = v107;
    v109 = *(_QWORD *)(a1 + 24);
    v110 = (llvm::Type *)(*((_DWORD *)*this + 2) >> 8);
    if ((*((_BYTE *)this + 23) & 0x10) == 0)
    {
      v126 = 0;
      v125 = &byte_1C871356D;
LABEL_178:
      v274.i16[4] = 261;
      v272 = v125;
      v273.i64[0] = v126;
      v128 = sub_1C627CF40(v109, TypeAtIndex, v110, 0, (uint64_t)&v272);
      v129 = (uint64_t *)v128;
      *((_WORD *)v128 + 9) = *((_WORD *)v128 + 9) & 0xFFC0 | __clz(1 << *((_WORD *)this + 9)) ^ 0x3F;
      if (v128)
        v130 = v128 + 3;
      else
        v130 = 0;
      while (1)
      {
        v131 = v130 ? (uint64_t)(v130 - 3) : 0;
        if (*(_BYTE *)(v131 + 16) != 59 && !sub_1C4D99D08(v131))
          break;
        v130 = (unsigned __int8 **)v130[1];
      }
      llvm::DataLayout::getIntPtrType(*(llvm::DataLayout **)(a1 + 80), *this);
      v284.i64[0] = (uint64_t)llvm::Constant::getNullValue(v132, v133);
      v284.i64[1] = v284.i64[0];
      if ((*((_BYTE *)v129 + 23) & 0x10) == 0)
      {
        v144 = 0;
        v143 = &byte_1C871356D;
LABEL_196:
        v274.i16[4] = 773;
        v272 = v143;
        v273.i64[0] = v144;
        v273.i64[1] = (uint64_t)".sub";
        v146 = (char *)operator new(0xB0uLL);
        v147 = v146;
        v148 = 0;
        v149 = (uint64_t ***)(v146 + 96);
        *((_DWORD *)v146 + 29) = *((_DWORD *)v146 + 29) & 0x38000000 | 3;
        do
        {
          v150 = &v146[v148];
          *(_QWORD *)v150 = 0;
          *((_QWORD *)v150 + 1) = 0;
          *((_QWORD *)v150 + 2) = 0;
          *((_QWORD *)v150 + 3) = v149;
          v148 += 32;
        }
        while (v148 != 96);
        sub_1C4774650(TypeAtIndex, v129, (llvm::Value *)&v284, 2);
        *(_OWORD *)(v147 + 120) = 0u;
        v152 = v147 + 120;
        *((_QWORD *)v147 + 12) = v153;
        *((_QWORD *)v147 + 13) = 0;
        v154 = *((_DWORD *)v147 + 29) & 0xC0000000 | 3;
        *((_DWORD *)v147 + 28) = 62;
        *((_DWORD *)v147 + 29) = v154;
        *(_OWORD *)(v147 + 136) = 0u;
        *((_DWORD *)v147 + 38) = 0;
        *((_QWORD *)v147 + 20) = TypeAtIndex;
        v155 = 1;
        do
        {
          if (v155 == 2)
            break;
          TypeAtIndex = (llvm::PointerType *)llvm::GetElementPtrInst::getTypeAtIndex(TypeAtIndex, (llvm::Type *)v284.i64[v155++], v151);
        }
        while (TypeAtIndex);
        *((_QWORD *)v147 + 21) = TypeAtIndex;
        v156 = *((_DWORD *)v147 + 29) & 0x7FFFFFF;
        v157 = -v156;
        v158 = &v149[-4 * v156];
        if (*v158)
        {
          v253 = &v149[4 * v157];
          v255 = v253[2];
          v254 = v253 + 2;
          *v255 = (uint64_t *)*(v254 - 1);
          v256 = *(v254 - 1);
          if (v256)
            *(_QWORD *)(v256 + 16) = *v254;
        }
        *v158 = (uint64_t **)v129;
        if (v129)
        {
          v161 = (uint64_t **)v129[1];
          v160 = (uint64_t **)(v129 + 1);
          v159 = v161;
          v162 = &v149[4 * v157];
          v162[1] = v161;
          if (v161)
            v159[2] = (uint64_t *)(v162 + 1);
          v162[2] = v160;
          *v160 = (uint64_t *)v158;
        }
        sub_1C5382FD4((uint64_t)&v269, v284.i64, v285.i64, (uint64_t)&v149[-4 * (*((_DWORD *)v147 + 29) & 0x7FFFFFF) + 4]);
        llvm::Value::setName(v149, (uint64_t)&v272);
        v147[113] |= 2u;
        v163 = *(_QWORD *)(v131 + 40);
        v164 = (char **)(v131 + 24);
        *((_QWORD *)v147 + 17) = v163;
        *(_WORD *)(v163 + 18) &= ~0x8000u;
        if ((v147[119] & 0x10) != 0)
        {
          v182 = *(_QWORD *)(v163 + 56);
          if (v182)
          {
            v183 = *(llvm::ValueSymbolTable **)(v182 + 104);
            if (v183)
              llvm::ValueSymbolTable::reinsertValue(v183, (llvm::Value *)v149);
          }
        }
        v165 = *v164;
        *((_QWORD *)v147 + 15) = *v164;
        *((_QWORD *)v147 + 16) = v164;
        *((_QWORD *)v165 + 1) = v152;
        *v164 = v152;
        v166 = *(_QWORD *)(a1 + 32);
        v272 = v149;
        if ((*(_BYTE *)(v166 + 2088) & 1) != 0)
        {
          v168 = v166 + 2096;
          v167 = 16;
        }
        else
        {
          v167 = *(_DWORD *)(v166 + 2104);
          if (!v167)
          {
            v177 = 0;
            goto LABEL_223;
          }
          v168 = *(_QWORD *)(v166 + 2096);
        }
        v169 = v167 - 1;
        v170 = v169 & ((v149 >> 4) ^ (v149 >> 9));
        v171 = (uint64_t ****)(v168 + 8 * v170);
        v172 = *v171;
        if (v149 == *v171)
        {
LABEL_226:
          v11 = a1;
          v12 = (llvm::ValueAsMetadata *)this;
          NullValue = (llvm::Value **)v149;
          goto LABEL_8;
        }
        v173 = 0;
        v174 = 1;
        while (v172 != (uint64_t ***)-4096)
        {
          if (v173)
            v175 = 0;
          else
            v175 = v172 == (uint64_t ***)-8192;
          if (v175)
            v173 = v171;
          v176 = v170 + v174++;
          v170 = v176 & v169;
          v171 = (uint64_t ****)(v168 + 8 * v170);
          v172 = *v171;
          if (v149 == *v171)
            goto LABEL_226;
        }
        if (v173)
          v177 = v173;
        else
          v177 = v171;
LABEL_223:
        v178 = sub_1C4E08FFC(v166 + 2088, (uint64_t)&v272, &v272, v177);
        *v178 = v272;
        v179 = v272;
        v180 = *(unsigned int *)(v166 + 2232);
        if (v180 >= *(_DWORD *)(v166 + 2236))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v166 + 2224, v166 + 2240, v180 + 1, 8);
          LODWORD(v180) = *(_DWORD *)(v166 + 2232);
        }
        *(_QWORD *)(*(_QWORD *)(v166 + 2224) + 8 * v180) = v179;
        ++*(_DWORD *)(v166 + 2232);
        goto LABEL_226;
      }
      v134 = **(_QWORD **)*v129;
      v135 = *(_QWORD *)(v134 + 152);
      v136 = *(unsigned int *)(v134 + 168);
      if ((_DWORD)v136)
      {
        LODWORD(v137) = (v136 - 1) & ((v129 >> 4) ^ (v129 >> 9));
        v138 = (uint64_t **)(v135 + 16 * v137);
        v139 = *v138;
        if (*v138 == v129)
        {
LABEL_195:
          v142 = v138[1];
          v145 = *v142;
          v143 = (char *)(v142 + 2);
          v144 = v145;
          goto LABEL_196;
        }
        v140 = 1;
        while (v139 != (uint64_t *)-4096)
        {
          v141 = v137 + v140++;
          v137 = v141 & (v136 - 1);
          v139 = *(uint64_t **)(v135 + 16 * v137);
          if (v139 == v129)
          {
            v138 = (uint64_t **)(v135 + 16 * v137);
            goto LABEL_195;
          }
        }
      }
      v138 = (uint64_t **)(v135 + 16 * v136);
      goto LABEL_195;
    }
    v111 = **(_QWORD **)*this;
    v112 = *(_QWORD *)(v111 + 152);
    v113 = *(unsigned int *)(v111 + 168);
    if ((_DWORD)v113)
    {
      LODWORD(v114) = (v113 - 1) & ((this >> 4) ^ (this >> 9));
      v115 = v112 + 16 * v114;
      v116 = *(llvm::AllocaInst **)v115;
      if (*(llvm::ArrayType ***)v115 == this)
      {
LABEL_177:
        v124 = *(_QWORD **)(v115 + 8);
        v127 = *v124;
        v125 = (char *)(v124 + 2);
        v126 = v127;
        goto LABEL_178;
      }
      v117 = 1;
      while (v116 != (llvm::AllocaInst *)-4096)
      {
        v118 = v114 + v117++;
        v114 = v118 & (v113 - 1);
        v116 = *(llvm::AllocaInst **)(v112 + 16 * v114);
        if (v116 == (llvm::AllocaInst *)this)
        {
          v115 = v112 + 16 * v114;
          goto LABEL_177;
        }
      }
    }
    v115 = v112 + 16 * v113;
    goto LABEL_177;
  }
  if (*(_DWORD *)(*(_QWORD *)v7 + 8) != 8205)
  {
    v14 = **(_QWORD **)(*(_QWORD *)(a1 + 24) + 64);
    v15 = *(llvm::ConstantInt **)(v14 + 1960);
    v16 = *(unsigned int *)(v14 + 1968);
    v273.i32[0] = v16 >> 8;
    if (v16 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v272, 1, 0);
    }
    else
    {
      if (v16 <= 0xFF)
        v17 = 0;
      else
        v17 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v16);
      v272 = (void *)(v17 & 1);
    }
    v18 = llvm::ConstantInt::get(v15, (llvm::LLVMContext *)&v272, v6);
    if (v273.i32[0] >= 0x41u && v272)
      MEMORY[0x1CAA32F9C](v272, 0x1000C8000313F17);
    v19 = a1;
    v20 = (llvm::AllocaInst *)this;
    v21 = (unsigned __int8 *)v18;
    goto LABEL_21;
  }
LABEL_23:
  v29 = (uint64_t)this[8];
  v30 = *(unsigned __int8 *)(v29 + 8);
  if (v30 > 0x11)
    goto LABEL_155;
  if (((1 << v30) & 0xAC7F) != 0)
    goto LABEL_25;
  if (((1 << v30) & 0x30000) == 0)
  {
LABEL_155:
    if ((v30 & 0xFE) != 0x12 && v30 != 21)
      goto LABEL_26;
  }
  if (!llvm::Type::isSizedDerivedType((uint64_t)this[8], 0))
    goto LABEL_26;
  v29 = (uint64_t)this[8];
LABEL_25:
  v31 = *(_QWORD *)(a1 + 80);
  sub_1C4768AD0(v31, v29);
  v33 = (unint64_t)(v32 + 7) >> 3;
  llvm::DataLayout::getAlignment(v31, v29);
  if (!((v33 + ~(-1 << v34)) >> v34))
  {
    if (llvm::AllocaInst::isArrayAllocation((llvm::AllocaInst *)this))
    {
      v97 = llvm::ConstantInt::get(*(llvm::ConstantInt **)*(this - 4), 1, 0);
      return (llvm::UndefValue **)sub_1C577E2C8(a1, (uint64_t)this, 0, (uint64_t)v97);
    }
    v99 = *(_QWORD *)(*((_QWORD *)this[5] + 7) + 80);
    if (v99)
      v100 = (llvm::BasicBlock *)(v99 - 24);
    else
      v100 = 0;
    FirstNonPHIOrDbg = llvm::BasicBlock::getFirstNonPHIOrDbg(v100, 1);
    if (FirstNonPHIOrDbg == (char *)this)
      goto LABEL_26;
    v102 = (uint64_t)FirstNonPHIOrDbg;
    if (!FirstNonPHIOrDbg || FirstNonPHIOrDbg[16] != 59)
    {
LABEL_153:
      llvm::Instruction::moveBefore((llvm::Instruction *)this, (llvm::Instruction *)v102);
      return this;
    }
    v103 = *((_QWORD *)FirstNonPHIOrDbg + 8);
    v104 = *(unsigned __int8 *)(v103 + 8);
    if (v104 > 0x11)
      goto LABEL_229;
    if (((1 << v104) & 0xAC7F) != 0)
    {
LABEL_152:
      if (!sub_1C4E3D148(*(_QWORD *)(a1 + 80), v103))
      {
        v119 = *(_WORD *)(v102 + 18);
        v120 = __clz(1 << v119) ^ 0x3F;
        v121 = __clz(1 << *((_WORD *)this + 9)) ^ 0x3F;
        if (v120 > v121)
          LOWORD(v121) = v120;
        *(_WORD *)(v102 + 18) = v119 & 0xFFC0 | v121;
        if (*this != *(llvm::ArrayType **)v102)
        {
          v122 = operator new(0x60uLL);
          v28 = (uint64_t)(v122 + 8);
          v122[13] = v122[13] & 0x38000000 | 1;
          *(_QWORD *)v122 = 0;
          *((_QWORD *)v122 + 1) = 0;
          *((_QWORD *)v122 + 2) = 0;
          *((_QWORD *)v122 + 3) = v122 + 8;
          v123 = (uint64_t)*this;
          v274.i16[4] = 257;
          llvm::BitCastInst::BitCastInst((uint64_t)(v122 + 8), v102, v123, (uint64_t)&v272, 0);
          return (llvm::UndefValue **)v28;
        }
        return sub_1C577F888(a1, (llvm::ValueAsMetadata *)this, (llvm::Value *)v102);
      }
      goto LABEL_153;
    }
    if (((1 << v104) & 0x30000) == 0)
    {
LABEL_229:
      if ((v104 & 0xFE) != 0x12 && v104 != 21)
        goto LABEL_153;
    }
    if (!llvm::Type::isSizedDerivedType(*((_QWORD *)FirstNonPHIOrDbg + 8), 0))
      goto LABEL_153;
    v103 = *(_QWORD *)(v102 + 64);
    goto LABEL_152;
  }
LABEL_26:
  v35 = 0;
  v269 = v271;
  v270 = 0x400000000;
  v261 = *(_QWORD *)(a1 + 48);
  v262 = a1;
  v272 = &v273.u64[1];
  v273.i64[1] = (uint64_t)this;
  v274.i8[0] = 0;
  v273.i64[0] = 0x2300000001;
  v36 = 1;
  do
  {
    v37 = (char *)v272 + 16 * v36;
    v39 = *((_QWORD *)v37 - 2);
    v38 = *((_QWORD *)v37 - 1);
    v273.i32[0] = --v36;
    v40 = *(_QWORD *)(v39 + 8);
    if (v40)
    {
      v41 = v38 & 1;
      *(_QWORD *)v263 = v38 & 1;
      while (1)
      {
        v42 = *(_QWORD *)(v40 + 24);
        v43 = *(unsigned __int8 *)(v42 + 16);
        if (v42 && v43 == 60)
        {
          if ((*(_WORD *)(v42 + 18) & 0x381) != 0)
            goto LABEL_111;
          goto LABEL_38;
        }
        if ((v43 - 77) <= 1)
        {
          v44 = v273.i32[0];
          if (v273.i32[0] < (unsigned __int32)v273.i32[1])
          {
            v45 = (char *)v272 + 16 * v273.u32[0];
            *(_QWORD *)v45 = v42;
            v45[8] = v41;
LABEL_36:
            v46 = &v273;
LABEL_37:
            v46->i32[0] = v44 + 1;
            goto LABEL_38;
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v272, (uint64_t)&v273.i64[1], v273.u32[0] + 1, 16);
          v68 = (uint64_t *)((char *)v272 + 16 * v273.u32[0]);
          *v68 = v42;
          v67 = *(_QWORD *)v263;
          goto LABEL_95;
        }
        if (*(unsigned __int8 *)(v42 + 16) > 0x3Du)
          break;
        if (v43 == 33 || v43 == 39)
          goto LABEL_48;
LABEL_67:
        if (llvm::Instruction::isLifetimeStartOrEnd((llvm::Instruction *)v42))
        {
          v56 = v270;
          if (v270 >= (unint64_t)HIDWORD(v270))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v269, (uint64_t)v271, v270 + 1, 8);
            v56 = v270;
          }
          *((_QWORD *)v269 + v56) = v42;
          v44 = v270;
          v46 = (int64x2_t *)&v270;
          goto LABEL_37;
        }
        v57 = sub_1C56E895C(v42);
        v58 = 0;
        if (!v42 || !v57)
          goto LABEL_112;
        v59 = *(_QWORD *)(v40 + 24);
        v60 = *(_DWORD *)(v59 + 20);
        if ((v60 & 0x40000000) != 0)
          v61 = *(_QWORD *)(v59 - 8);
        else
          v61 = v59 - 32 * (v60 & 0x7FFFFFF);
        if (((v40 - v61) & 0x1FFFFFFFE0) == 0x20)
        {
          v62 = *(_QWORD *)(v42 - 32 * (*(_DWORD *)(v42 + 20) & 0x7FFFFFF) + 96);
          v63 = (llvm::APInt *)(v62 + 24);
          v64 = *(_DWORD *)(v62 + 32);
          if (v64 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase(v63) != v64)
              goto LABEL_111;
          }
          else if (*(_QWORD *)v63)
          {
            goto LABEL_111;
          }
        }
        else
        {
          v58 = 0;
          if (v35 || v41)
            goto LABEL_112;
          if ((v60 & 0x40000000) != 0)
            v66 = *(_QWORD *)(v59 - 8);
          else
            v66 = v59 - 32 * (v60 & 0x7FFFFFF);
          if (((v40 - v66) & 0x1FFFFFFFE0) != 0
            || (v284.i64[0] = (uint64_t)llvm::Value::stripPointerCasts(*(llvm::Value **)(v42
                                                                                      - 32
                                                                                      * (*(_DWORD *)(v42 + 20) & 0x7FFFFFF)
                                                                                      + 32)),
                v284.i64[1] = -1,
                v285 = 0u,
                v286 = 0u,
                v35 = v42,
                (llvm::AAResults::pointsToConstantMemory(v261, (uint64_t)&v284, 0) & 1) == 0))
          {
LABEL_111:
            v58 = 0;
            goto LABEL_112;
          }
        }
LABEL_38:
        v40 = *(_QWORD *)(v40 + 8);
        if (!v40)
        {
          v36 = v273.i32[0];
          goto LABEL_109;
        }
      }
      if (v43 != 84)
      {
        if (v43 == 62)
        {
          if (v41)
            v47 = 1;
          else
            v47 = llvm::GetElementPtrInst::hasAllZeroIndices(*(llvm::GetElementPtrInst **)(v40 + 24)) ^ 1;
          v44 = v273.i32[0];
          if (v273.i32[0] < (unsigned __int32)v273.i32[1])
          {
            v65 = (char *)v272 + 16 * v273.u32[0];
            *(_QWORD *)v65 = v42;
            v65[8] = v47;
            goto LABEL_36;
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v272, (uint64_t)&v273.i64[1], v273.u32[0] + 1, 16);
          v67 = v47;
          v68 = (uint64_t *)((char *)v272 + 16 * v273.u32[0]);
          *v68 = v42;
LABEL_95:
          v68[1] = v67;
          v44 = v273.i32[0];
          goto LABEL_36;
        }
        goto LABEL_67;
      }
LABEL_48:
      if (v42 - 32 == v40)
        goto LABEL_38;
      v48 = *(_DWORD *)(v42 + 20);
      v49 = v42 - 32 * (v48 & 0x7FFFFFF);
      v50 = (v40 - v49) >> 5;
      if (v40 < v49
        || (v43 != 84 ? (v43 != 39 ? (v51 = 2) : (v51 = (*(_DWORD *)(v42 + 80) + 1))) : (v51 = 0),
            (v48 & 0x80000000) == 0 || (v78 = *(_QWORD *)(v49 - 8), (v78 & 0xFFFFFFFF0) == 0)
          ? (v52 = 0)
          : (v52 = (*(_DWORD *)(v49 - 12) - *(_DWORD *)(v49 - v78))),
            v42 - 32 * v51 - 32 * v52 - 32 <= v40))
      {
        v53 = 0;
      }
      else
      {
        if ((llvm::CallBase::paramHasAttr(*(_QWORD *)(v40 + 24), v50, 71) & 1) != 0)
          goto LABEL_111;
        v53 = 1;
      }
      v54 = *(_QWORD *)(v42 + 64);
      if (!v54 || (*(_BYTE *)(v54 + 17) & 0x30) == 0)
      {
        v55 = *(_DWORD *)(v42 + 20);
        if (v55 < 0)
        {
          v69 = v42 - 32 * (v55 & 0x7FFFFFF);
          v72 = *(_QWORD *)(v69 - 8);
          v70 = v69 - 8;
          v71 = v72;
          if (v72)
          {
            v73 = -v71;
            do
            {
              v74 = *(_DWORD *)(*(_QWORD *)(v70 + v73) + 8);
              v75 = v74 > 7;
              v76 = (1 << v74) & 0x83;
              if (v75 || v76 == 0)
                goto LABEL_65;
              v73 += 16;
            }
            while (v73);
          }
        }
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(v42, 45) & 1) == 0
          && !llvm::CallBase::hasFnAttrOnCalledFunction(v42, 44))
        {
          goto LABEL_65;
        }
      }
      if (!*(_QWORD *)(v42 + 8) || (sub_1C4D91D40(v42, v50, 22) & 1) != 0)
        goto LABEL_38;
LABEL_65:
      if (v53 && (llvm::CallBase::paramHasAttr(v42, v50, 69) & 1) != 0)
        goto LABEL_38;
      goto LABEL_67;
    }
LABEL_109:
    v58 = v35;
  }
  while (v36);
LABEL_112:
  if (v272 != &v273.u64[1])
    free(v272);
  v79 = (llvm::DataLayout **)a1;
  if (!v58)
    goto LABEL_135;
  v80 = (unsigned __int8 *)llvm::Value::stripPointerCasts(*(llvm::Value **)(v58
                                                                          - 32 * (*(_DWORD *)(v58 + 20) & 0x7FFFFFF)
                                                                          + 32));
  v81 = __clz(1 << *((_WORD *)this + 9)) ^ 0x3F;
  if (v81 > llvm::getOrEnforceKnownAlignment((uint64_t)v80, v81 | 0x100, *(unsigned __int8 **)(a1 + 80), (uint64_t)this, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 72)))goto LABEL_135;
  v82 = *(const llvm::DataLayout **)(a1 + 80);
  if ((llvm::AllocaInst::isArrayAllocation((llvm::AllocaInst *)this) & 1) != 0)
    goto LABEL_135;
  sub_1C4768AD0((uint64_t)v82, (uint64_t)this[8]);
  v85 = v84 + 7;
  if ((_DWORD)v83 == 1)
  if (v85 < 8)
    goto LABEL_135;
  v86 = *((_WORD *)this + 9) & 0x3F;
  v284.i32[2] = 64;
  v284.i64[0] = v85 >> 3;
  v272 = &v274.u64[1];
  v273.i64[0] = (uint64_t)&v274.i64[1];
  v273.i64[1] = 32;
  v274.i32[0] = 0;
  v87 = sub_1C4E99094((uint64_t)v80, v86, (llvm::APInt *)&v284, v82, 0, 0, 0, (llvm::SmallPtrSetImplBase *)&v272, 16);
  if ((void *)v273.i64[0] != v272)
    free((void *)v273.i64[0]);
  if (v284.i32[2] >= 0x41u && v284.i64[0])
    MEMORY[0x1CAA32F9C](v284.i64[0], 0x1000C8000313F17);
  if (!v87 || v80[16] > 0x1Bu)
    goto LABEL_135;
  v88 = *(_DWORD *)(*(_QWORD *)v80 + 8);
  if ((v88 & 0xFE) == 0x12)
    v88 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v80 + 16) + 8);
  v89 = v88 >> 8;
  v90 = llvm::PointerType::get(this[8], (llvm::Type *)(v88 >> 8));
  v91 = *((_DWORD *)*this + 2) >> 8;
  if (v91 == v88 >> 8)
  {
    if ((_DWORD)v270)
    {
      v92 = (uint64_t *)v269;
      v93 = 8 * v270;
      do
      {
        v94 = *v92++;
        sub_1C57813F4(v262, v94);
        v93 -= 8;
      }
      while (v93);
    }
    v95 = *(uint64_t **)(v262 + 24);
    v274.i16[4] = 257;
    v96 = sub_1C4773E38(v95, 49, v80, v90, (uint64_t)&v272);
    v28 = (uint64_t)sub_1C577F888(v262, (llvm::ValueAsMetadata *)this, (llvm::Value *)v96);
    sub_1C57813F4(v262, v58);
    goto LABEL_134;
  }
  v272 = (void *)1;
  v273 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v274 = v273;
  v275 = v277;
  v276 = 0x400000000;
  v278[0] = 0;
  v278[1] = 0;
  v279 = 0;
  v280 = 0;
  v281 = 0;
  v282 = 0;
  *(_QWORD *)v283 = v262;
  if (sub_1C581BB04((uint64_t)&v272, (uint64_t)this))
  {
    if ((_DWORD)v270)
    {
      v184 = (uint64_t *)v269;
      v185 = 8 * v270;
      do
      {
        v186 = *v184++;
        sub_1C57813F4(v262, v186);
        v185 -= 8;
      }
      while (v185);
    }
    v187 = *(uint64_t **)(v262 + 24);
    LOWORD(v286) = 257;
    v188 = sub_1C4773E38(v187, 49, v80, v90, (uint64_t)&v284);
    v284.i64[0] = (uint64_t)this;
    *(_QWORD *)sub_1C62A8A44((uint64_t)v278, v284.i64) = v188;
    if ((_DWORD)v276)
    {
      v189 = (uint64_t *)v275;
      v190 = (uint64_t *)((char *)v275 + 8 * v276);
      v259 = v89;
      v260 = v190;
      do
      {
        v191 = *v189;
        if (!sub_1C62A8AFC((uint64_t)v278, *v189))
        {
          v192 = *(unsigned __int8 *)(v191 + 16);
          if (!v191 || v192 != 60)
          {
            if (v191 && v192 == 62)
            {
              v199 = (uint64_t *)sub_1C62A8AFC((uint64_t)v278, *(_QWORD *)(v191 - 32 * (*(_DWORD *)(v191 + 20) & 0x7FFFFFF)));
              v284.i64[0] = (uint64_t)&v285;
              v284.i64[1] = 0x800000000;
              v200 = *(_DWORD *)(v191 + 20) & 0x7FFFFFF;
              v201 = -(-32 * v200 + 32);
              if ((unint64_t)v201 >= 0x101)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v284, (uint64_t)&v285, v201 >> 5, 8);
                v202 = v284.u32[2];
                v264 = (llvm::Value *)v284.i64[0];
                v203 = v284.i32[2];
              }
              else
              {
                v202 = 0;
                v203 = 0;
                v264 = (llvm::Value *)&v285;
              }
              if (v191 - 32 * v200 + 32 != v191)
              {
                v204 = (_QWORD *)((char *)v264 + 8 * v202);
                v205 = 32 - 32 * v200;
                do
                {
                  *v204++ = *(_QWORD *)(v191 + v205);
                  v205 += 32;
                }
                while (v205);
                v264 = (llvm::Value *)v284.i64[0];
              }
              v206 = v203 + ((unint64_t)v201 >> 5);
              v284.i32[2] = v206;
              v207 = *(llvm::GetElementPtrInst **)(v191 + 64);
              v208 = (v206 + 1);
              v267 = 257;
              v209 = operator new(32 * v208 + 80);
              v210 = &v209[4 * v208];
              *((_DWORD *)v210 + 5) = *((_DWORD *)v210 + 5) & 0x38000000 | v208 & 0x7FFFFFF;
              if ((_DWORD)v206 != -1)
              {
                do
                {
                  *v209 = 0;
                  v209[1] = 0;
                  v209[2] = 0;
                  v209[3] = v210;
                  v209 += 4;
                }
                while (v209 != v210);
              }
              sub_1C4774650(v207, v199, v264, v206);
              *v210 = v212;
              v210[1] = 0;
              v213 = *((_DWORD *)v210 + 5) & 0xC0000000 | v208 & 0x7FFFFFF;
              *((_DWORD *)v210 + 4) = 62;
              *((_DWORD *)v210 + 5) = v213;
              *(_OWORD *)(v210 + 3) = 0u;
              *(_OWORD *)(v210 + 5) = 0u;
              *((_DWORD *)v210 + 14) = 0;
              v210[8] = v207;
              if ((_DWORD)v206)
              {
                v214 = (llvm::Type **)((char *)v264 + 8);
                v215 = 8 * v206 - 8;
                do
                {
                  if (!v215)
                    break;
                  v216 = *v214++;
                  v207 = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(v207, v216, v211);
                  v215 -= 8;
                }
                while (v207);
                v213 = *((_DWORD *)v210 + 5);
              }
              v190 = v260;
              v210[9] = v207;
              v217 = v213 & 0x7FFFFFF;
              v218 = -v217;
              v219 = (uint64_t **)&v210[-4 * v217];
              if (*v219)
              {
                v249 = &v210[4 * v218];
                v251 = (_QWORD *)v249[2];
                v250 = v249 + 2;
                *v251 = *(v250 - 1);
                v252 = *(v250 - 1);
                if (v252)
                  *(_QWORD *)(v252 + 16) = *v250;
              }
              *v219 = v199;
              if (v199)
              {
                v222 = v199[1];
                v221 = (uint64_t ***)(v199 + 1);
                v220 = v222;
                v223 = &v210[4 * v218];
                v223[1] = v222;
                if (v222)
                  *(_QWORD *)(v220 + 16) = v223 + 1;
                v223[2] = v221;
                *v221 = v219;
              }
              sub_1C5382FD4((uint64_t)&v268, (uint64_t *)v264, (uint64_t *)v264 + v206, (uint64_t)&v210[-4 * (*((_DWORD *)v210 + 5) & 0x7FFFFFF) + 4]);
              llvm::Value::setName((uint64_t ***)v210, (uint64_t)v266);
              sub_1C577E498(*(uint64_t *)v283, (llvm::Value *)v210, v191);
              llvm::Value::takeName((llvm::Value *)v210, (llvm::Value *)v191);
              v266[0] = v191;
              *(_QWORD *)sub_1C62A8A44((uint64_t)v278, v266) = v210;
              if ((int64x2_t *)v284.i64[0] != &v285)
                free((void *)v284.i64[0]);
              goto LABEL_313;
            }
            if (v191 && v192 == 77)
            {
              v224 = sub_1C62A8AFC((uint64_t)v278, *(_QWORD *)(v191 - 32));
              v225 = v224;
              v226 = *(_DWORD *)(*(_QWORD *)v224 + 8);
              if ((v226 & 0xFE) == 0x12)
                v226 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v224 + 16) + 8);
              v227 = (llvm::Type *)(v226 >> 8);
              v228 = *(llvm::PointerType **)(*(_QWORD *)v191 + 24);
              if (v228)
                v229 = llvm::PointerType::get(v228, v227);
              else
                v229 = llvm::PointerType::get(**(llvm::PointerType ***)v191, v227);
              v243 = v229;
              v244 = operator new(0x60uLL);
              v244[13] = v244[13] & 0x38000000 | 1;
              v245 = (llvm::Value *)(v244 + 8);
              *(_QWORD *)v244 = 0;
              *((_QWORD *)v244 + 1) = 0;
              *((_QWORD *)v244 + 2) = 0;
              *((_QWORD *)v244 + 3) = v244 + 8;
              LOWORD(v286) = 257;
              llvm::BitCastInst::BitCastInst((uint64_t)(v244 + 8), v225, v243, (uint64_t)&v284, 0);
              sub_1C577E498(*(uint64_t *)v283, v245, v191);
              llvm::Value::takeName(v245, (llvm::Value *)v191);
              v284.i64[0] = v191;
              *(_QWORD *)sub_1C62A8A44((uint64_t)v278, v284.i64) = v245;
              goto LABEL_314;
            }
            if (!sub_1C56E895C(v191))
              v191 = 0;
            v230 = sub_1C62A8AFC((uint64_t)v278, *(_QWORD *)(v191 - 32 * (*(_DWORD *)(v191 + 20) & 0x7FFFFFF) + 32));
            if (!v230)
              goto LABEL_314;
            v231 = (llvm::Value *)v230;
            v232 = *(_QWORD *)(*(_QWORD *)v283 + 24);
            *(_QWORD *)(v232 + 48) = *(_QWORD *)(v191 + 40);
            *(_QWORD *)(v232 + 56) = v191 + 24;
            v233 = *(unsigned __int8 **)(v191 + 48);
            v284.i64[0] = (uint64_t)v233;
            if (v233)
            {
              llvm::MetadataTracking::track((uint64_t)&v284, v233, 2);
              v234 = v284.i64[0];
            }
            else
            {
              v234 = 0;
            }
            sub_1C4774EF4(v232, 0, v234);
            if (v284.i64[0])
              llvm::MetadataTracking::untrack((uint64_t)&v284, (unsigned __int8 *)v284.i64[0]);
            v265 = *(_QWORD *)(*(_QWORD *)v283 + 24);
            v258 = *(_DWORD *)(*(_QWORD *)(v191 - 32) + 36);
            v235 = v191 - 32 * (*(_DWORD *)(v191 + 20) & 0x7FFFFFF);
            v257 = *(llvm::Value **)v235;
            ParamAlignment = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v191 + 64), 0);
            v237 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v191 + 64), 1);
            v238 = *(uint64_t **)(v235 + 64);
            v239 = *(_QWORD *)(v235 + 96);
            v240 = (llvm::APInt *)(v239 + 24);
            v241 = *(_DWORD *)(v239 + 32);
            if (v241 > 0x40)
              v242 = llvm::APInt::countLeadingZerosSlowCase(v240) == v241;
            else
              v242 = *(_QWORD *)v240 == 0;
            v246 = v242;
            MemTransferInst = llvm::IRBuilderBase::CreateMemTransferInst(v265, v258, v257, ParamAlignment, v231, v237, v238, v246 ^ 1u, 0, 0, 0, 0);
            llvm::Instruction::getAAMetadata((uint64_t ***)v191, &v284);
            v190 = v260;
            if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v284), (int32x4_t)vceqzq_s64(v285))))) & 1) != 0)
            {
              if (v284.i64[0] || *((_QWORD *)MemTransferInst + 6) || (*((_BYTE *)MemTransferInst + 23) & 0x20) != 0)
              {
                llvm::Value::setMetadata(MemTransferInst, 1, (llvm::MDNode *)v284.i64[0]);
                v248 = (llvm::MDNode *)v284.i64[1];
                if (v284.i64[1])
                  goto LABEL_303;
              }
              else
              {
                v248 = (llvm::MDNode *)v284.i64[1];
                if (v284.i64[1])
                  goto LABEL_303;
              }
              if (*((_QWORD *)MemTransferInst + 6) || (*((_BYTE *)MemTransferInst + 23) & 0x20) != 0)
LABEL_303:
                llvm::Value::setMetadata(MemTransferInst, 5, v248);
              if (v285.i64[0] || *((_QWORD *)MemTransferInst + 6) || (*((_BYTE *)MemTransferInst + 23) & 0x20) != 0)
                llvm::Value::setMetadata(MemTransferInst, 7, (llvm::MDNode *)v285.i64[0]);
              v190 = v260;
              if (v285.i64[1] || *((_QWORD *)MemTransferInst + 6) || (*((_BYTE *)MemTransferInst + 23) & 0x20) != 0)
                llvm::Value::setMetadata(MemTransferInst, 8, (llvm::MDNode *)v285.i64[1]);
            }
            sub_1C57813F4(*(uint64_t *)v283, v191);
            v266[0] = v191;
            *(_QWORD *)sub_1C62A8A44((uint64_t)v278, v266) = MemTransferInst;
LABEL_313:
            v89 = v259;
            goto LABEL_314;
          }
          v193 = sub_1C62A8AFC((uint64_t)v278, *(_QWORD *)(v191 - 32));
          v194 = operator new(0x60uLL);
          v195 = (llvm *)(v194 + 8);
          v194[13] = v194[13] & 0x38000000 | 1;
          *(_QWORD *)v194 = 0;
          *((_QWORD *)v194 + 1) = 0;
          *((_QWORD *)v194 + 2) = 0;
          *((_QWORD *)v194 + 3) = v194 + 8;
          v196 = *(_QWORD *)v191;
          LOWORD(v286) = 257;
          Inst = (llvm::Value *)llvm::LoadInst::LoadInst((uint64_t)(v194 + 8), v196, v193, (uint64_t)&v284, *(_WORD *)(v191 + 18) & 1, ((unint64_t)*(unsigned __int16 *)(v191 + 18) >> 1) & 0x3F, (*(_WORD *)(v191 + 18) >> 7) & 7, *(_BYTE *)(v191 + 60), 0);
          llvm::Value::takeName(Inst, (llvm::Value *)v191);
          llvm::copyMetadataForLoad(v195, (llvm::LoadInst *)v191, v198);
          sub_1C577E498(*(uint64_t *)v283, v195, v191);
          sub_1C577F888(*(uint64_t *)v283, (llvm::ValueAsMetadata *)v191, v195);
          v284.i64[0] = v191;
          *(_QWORD *)sub_1C62A8A44((uint64_t)v278, v284.i64) = v195;
        }
LABEL_314:
        ++v189;
      }
      while (v189 != v190);
    }
  }
  sub_1C6176BF8(v278);
  if (v275 != v277)
    free(v275);
  if ((v272 & 1) == 0)
    MEMORY[0x1CAA32FB4](v273.i64[0], 8);
  v28 = 0;
LABEL_134:
  v79 = (llvm::DataLayout **)v262;
  if (v91 != v89)
LABEL_135:
    v28 = sub_1C57871C4(v79, (uint64_t)this);
  if (v269 != v271)
    free(v269);
  return (llvm::UndefValue **)v28;
}

uint64_t sub_1C581BB04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  llvm::APInt *v8;
  unsigned int v9;
  uint64_t v11;
  llvm::Instruction *v12;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2)
  {
    while (1)
    {
      v4 = *(_QWORD *)(v2 + 24);
      v12 = (llvm::Instruction *)v4;
      v5 = *(unsigned __int8 *)(v4 + 16);
      if (v4)
      {
        if (v5 == 60)
          break;
      }
      if (v5 == 77 || v5 == 62)
      {
        sub_1C6280544(a1, (uint64_t *)&v12);
        if ((sub_1C581BB04(a1, v12) & 1) == 0)
          return 0;
      }
      else
      {
        if (sub_1C56E895C(v4))
        {
          v7 = *(_QWORD *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF) + 96);
          v8 = (llvm::APInt *)(v7 + 24);
          v9 = *(_DWORD *)(v7 + 32);
          if (v9 > 0x40)
          {
            if (llvm::APInt::countLeadingZerosSlowCase(v8) != v9)
              return 0;
          }
          else if (*(_QWORD *)v8)
          {
            return 0;
          }
          v6 = (uint64_t *)&v12;
          goto LABEL_16;
        }
        if (!llvm::Instruction::isLifetimeStartOrEnd(v12))
          return 0;
      }
LABEL_17:
      v2 = *(_QWORD *)(v2 + 8);
      if (!v2)
        return 1;
    }
    if ((*(_WORD *)(v4 + 18) & 1) != 0)
      return 0;
    v11 = v4;
    v6 = &v11;
LABEL_16:
    sub_1C6280544(a1, v6);
    goto LABEL_17;
  }
  return 1;
}

llvm::Value *sub_1C581BC08(uint64_t a1, llvm::LoadInst *a2, llvm::PointerType *this, uint64_t *a4)
{
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned __int8 *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::LoadInst **v19;
  llvm::LoadInst *v20;
  int v21;
  int v22;
  llvm::LoadInst *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  int v27;
  __int16 v28;
  llvm::Value *v29;
  char v30;
  const llvm::LoadInst *v31;
  uint64_t v33;
  uint64_t *v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  __int16 v39;
  unsigned __int8 *v40;

  v8 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
  v9 = *(_DWORD *)(*(_QWORD *)v8 + 8);
  if ((v9 & 0xFE) == 0x12)
    v9 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v8 + 16) + 8);
  v10 = llvm::PointerType::get(this, (llvm::Type *)(v9 >> 8));
  v40 = 0;
  v35 = (char *)&v40;
  if (!sub_1C57E819C((_QWORD **)&v35, (uint64_t)v8) || (v12 = v40, *(_QWORD *)v40 != v10))
  {
    v11 = *(uint64_t **)(a1 + 24);
    v39 = 257;
    v12 = sub_1C4773E38(v11, 49, v8, v10, (uint64_t)&v35);
    v40 = v12;
  }
  v13 = *(uint64_t **)(a1 + 24);
  v14 = *((unsigned __int16 *)a2 + 9);
  if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
  {
    v15 = ***(_QWORD ***)a2;
    v16 = *(_QWORD *)(v15 + 152);
    v17 = *(unsigned int *)(v15 + 168);
    if ((_DWORD)v17)
    {
      LODWORD(v18) = (v17 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v19 = (llvm::LoadInst **)(v16 + 16 * v18);
      v20 = *v19;
      if (*v19 == a2)
      {
LABEL_12:
        v23 = v19[1];
        v26 = *(_QWORD *)v23;
        v25 = (char *)v23 + 16;
        v24 = v26;
        goto LABEL_13;
      }
      v21 = 1;
      while (v20 != (llvm::LoadInst *)-4096)
      {
        v22 = v18 + v21++;
        v18 = v22 & (v17 - 1);
        v20 = *(llvm::LoadInst **)(v16 + 16 * v18);
        if (v20 == a2)
        {
          v19 = (llvm::LoadInst **)(v16 + 16 * v18);
          goto LABEL_12;
        }
      }
    }
    v19 = (llvm::LoadInst **)(v16 + 16 * v17);
    goto LABEL_12;
  }
  v24 = 0;
  v25 = &byte_1C871356D;
LABEL_13:
  v27 = *((unsigned __int8 *)a4 + 32);
  if (v27 == 1)
  {
    v35 = v25;
    v36 = v24;
    v28 = 261;
    goto LABEL_19;
  }
  if (!*((_BYTE *)a4 + 32))
  {
    v28 = 256;
LABEL_19:
    v39 = v28;
    goto LABEL_20;
  }
  v33 = a4[1];
  if (*((_BYTE *)a4 + 33) == 1)
  {
    v34 = (uint64_t *)*a4;
  }
  else
  {
    LOBYTE(v27) = 2;
    v34 = a4;
  }
  v35 = v25;
  v36 = v24;
  v37 = v34;
  v38 = v33;
  LOBYTE(v39) = 5;
  HIBYTE(v39) = v27;
LABEL_20:
  v29 = sub_1C506D920(v13, (uint64_t)this, (uint64_t)v12, (v14 >> 1) & 0x3F | 0x100, v14 & 1, (uint64_t)&v35);
  v30 = *((_BYTE *)a2 + 60);
  *((_WORD *)v29 + 9) = *((_WORD *)v29 + 9) & 0xFC7F | *((_WORD *)a2 + 9) & 0x380;
  *((_BYTE *)v29 + 60) = v30;
  llvm::copyMetadataForLoad(v29, a2, v31);
  return v29;
}

llvm::UndefValue **sub_1C581BE08(uint64_t a1, uint64_t a2)
{
  uint64_t ***v2;
  uint64_t v4;
  uint64_t **v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::Value **v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  llvm::Value *v18;
  llvm::Value *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  BOOL v36;
  unsigned int v37;
  int v38;
  __int16 v39;
  llvm::UndefValue *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t ****v45;
  uint64_t ***v46;
  int v47;
  int v48;
  uint64_t **v49;
  unsigned __int8 *v50;
  int v51;
  int v52;
  int v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  llvm::UndefValue **result;
  uint64_t ***v58;
  int v59;
  llvm::PointerType *v60;
  _QWORD *v61;
  llvm::Value *v62;
  llvm::Type *v63;
  uint64_t v64;
  llvm::UndefValue *v65;
  llvm::Value *v66;
  uint64_t v67;
  llvm::ValueAsMetadata *v68;
  llvm::StructLayout *StructLayout;
  const llvm::APInt *v70;
  llvm::StructLayout *v71;
  unint64_t v72;
  uint64_t v73;
  llvm::ConstantInt *v74;
  llvm::Type *v75;
  const llvm::APInt *v76;
  uint64_t ***v77;
  unsigned int v78;
  uint64_t v79;
  llvm::ConstantInt *v80;
  unsigned int v81;
  unint64_t v82;
  llvm::ValueHandleBase *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  llvm::Value *v89;
  uint64_t v90;
  llvm::UndefValue *AvailableLoadedValue;
  unsigned __int8 *v92;
  uint64_t *v93;
  uint64_t **v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t ****v99;
  uint64_t ***v100;
  int v101;
  int v102;
  unint64_t v103;
  int v104;
  _BYTE *v105;
  uint64_t *v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t ***v110;
  char *v111;
  uint64_t **v112;
  uint64_t **v113;
  llvm::Value *v114;
  uint64_t *v115;
  uint64_t v116;
  char *v117;
  llvm::Type *v118;
  llvm::Value *v119;
  llvm::Type *v120;
  llvm::Value **NullValue;
  unsigned __int8 *v122;
  unsigned __int8 *v123;
  unsigned __int8 **v124;
  unsigned __int8 *v125;
  unsigned __int8 *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t ***v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t ****v136;
  uint64_t ***v137;
  int v138;
  int v139;
  uint64_t v140;
  const llvm::APInt *v141;
  unsigned int v142;
  unsigned int v143;
  unint64_t v144;
  uint64_t v145;
  llvm::ConstantInt *v146;
  llvm::Type *v147;
  const llvm::APInt *v148;
  uint64_t ***v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  llvm::ConstantInt *v153;
  unsigned int v154;
  unint64_t v155;
  llvm::ValueHandleBase *v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  llvm::Value *v161;
  uint64_t v162;
  const char *v163;
  uint64_t v164;
  llvm::ValueSymbolTable *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  uint64_t v174;
  llvm::PointerType *v175;
  unsigned int v176;
  unsigned int v177;
  int v178;
  llvm::Value *v180;
  uint64_t ***v181;
  char *v182;
  llvm::ValueHandleBase *v183;
  llvm::ValueHandleBase *v184;
  char v185;
  char v186;
  char *v187;
  char *v188;
  uint64_t **v189;
  _QWORD *v190;
  uint64_t **v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t ***v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t ****v200;
  uint64_t ***v201;
  int v202;
  int v203;
  uint64_t ***v204;
  char *v205;
  llvm::ValueHandleBase *v206;
  llvm::ValueHandleBase *v207;
  char v208;
  char v209;
  char *v210;
  char *v211;
  llvm::Value *v212;
  uint64_t **v213;
  _QWORD *v214;
  uint64_t **v215;
  uint64_t v216;
  __int16 v217;
  char v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unsigned __int8 **v222;
  int v223;
  unsigned __int8 *v224;
  unsigned __int8 *v225;
  unsigned __int8 *v226;
  uint64_t v227;
  uint64_t v228;
  unsigned __int8 **v229;
  int v230;
  unsigned __int8 *v231;
  unsigned __int8 *v232;
  unsigned __int8 *v233;
  uint64_t **v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  llvm::ValueHandleBase *v238;
  char *v239;
  uint64_t v240;
  llvm::ValueHandleBase *v241;
  uint64_t *v242;
  uint64_t *v243;
  uint64_t v244;
  unsigned int v245;
  uint64_t ***v246;
  __int128 v247;
  uint64_t ***v248;
  unsigned __int8 *v249;
  char v250;
  unsigned __int8 *v251;
  void *v252;
  llvm::ValueHandleBase *v253;
  const char *v254;
  __int16 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  uint64_t v259;

  v2 = (uint64_t ***)a2;
  v259 = *MEMORY[0x1E0C80C00];
  v5 = (uint64_t **)(a2 - 32);
  v4 = *(_QWORD *)(a2 - 32);
  if ((*(_WORD *)(a2 + 18) & 0x301) != 0)
    goto LABEL_2;
  if (!*(_QWORD *)(a2 + 8))
    goto LABEL_2;
  if (llvm::Value::isSwiftError(*(llvm::Value **)(a2 - 32)))
    goto LABEL_2;
  v49 = v2[1];
  if (!v49)
    goto LABEL_2;
  if (v49[1])
    goto LABEL_2;
  v50 = (unsigned __int8 *)v49[3];
  v51 = v50[16];
  if (v50)
  {
    if (v51 == 77 && *(_BYTE *)(*(_QWORD *)v50 + 8) == 11)
      goto LABEL_2;
  }
  if (!v50)
    goto LABEL_2;
  if ((v51 - 79) < 0xFFFFFFF3)
    goto LABEL_2;
  llvm::CastInst::isNoopCast((llvm::CastInst *)v50, *(const llvm::DataLayout **)(a1 + 80));
  if (!v52)
    goto LABEL_2;
  if (((_DWORD)(*v2)[1] & 0xFE) == 0x12)
    v53 = *(unsigned __int8 *)(*(*v2)[2] + 8);
  else
    v53 = *((_DWORD *)*v2 + 2);
  v175 = *(llvm::PointerType **)v50;
  v176 = *(_DWORD *)(*(_QWORD *)v50 + 8);
  v177 = v176;
  if ((*(_DWORD *)(*(_QWORD *)v50 + 8) & 0xFE) == 0x12)
    v177 = *(unsigned __int8 *)(**((_QWORD **)v175 + 2) + 8);
  if ((v53 == 15) != (v177 == 15))
    goto LABEL_2;
  v178 = *((unsigned __int8 *)v2 + 16);
  if (v178 == 60 || v178 == 61)
  {
    if ((*((_WORD *)v2 + 9) & 0x380) != 0)
      goto LABEL_246;
LABEL_250:
    LOWORD(v258) = 257;
    v180 = sub_1C581BC08(a1, (llvm::LoadInst *)v2, v175, (uint64_t *)&v256);
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v50, v180, (llvm::Value *)1);
    sub_1C57813F4(a1, (uint64_t)v50);
    return (llvm::UndefValue **)v2;
  }
  if ((v178 - 63) >= 3)
    goto LABEL_250;
LABEL_246:
  if ((v176 & 0xFFFFFFFD) == 0xD || v176 <= 6)
    goto LABEL_250;
LABEL_2:
  llvm::DataLayout::getAlignment(*(_QWORD *)(a1 + 80), (uint64_t)*v2);
  v7 = llvm::getOrEnforceKnownAlignment(v4, v6 | 0x100u, *(unsigned __int8 **)(a1 + 80), (uint64_t)v2, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 72));
  v8 = *((unsigned __int16 *)v2 + 9);
  if ((__clz(1 << (v8 >> 1)) ^ 0x3F) < v7)
    *((_WORD *)v2 + 9) = v8 & 0xFF81 | (2 * v7);
  if (v4)
  {
    if (*(_BYTE *)(v4 + 16) == 62)
    {
      LODWORD(v256) = 0;
      if (sub_1C581FAD0((_QWORD *)a1, v4, (llvm::Value *)v2, (unsigned int *)&v256))
      {
        llvm::Instruction::clone((llvm::Instruction *)v4);
        v10 = v9;
        v11 = v256;
        v12 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF) + 32 * v256), 0, 0);
        v13 = *(_DWORD *)(v10 + 20);
        if ((v13 & 0x40000000) != 0)
          v14 = *(_QWORD *)(v10 - 8);
        else
          v14 = v10 - 32 * (v13 & 0x7FFFFFF);
        v15 = v14 + 32 * v11;
        if (*(_QWORD *)v15)
        {
          **(_QWORD **)(v15 + 16) = *(_QWORD *)(v15 + 8);
          v16 = *(_QWORD *)(v15 + 8);
          if (v16)
            *(_QWORD *)(v16 + 16) = *(_QWORD *)(v15 + 16);
        }
        *(_QWORD *)v15 = v12;
        if (v12)
        {
          v19 = v12[1];
          v17 = v12 + 1;
          v18 = v19;
          v20 = v14 + 32 * v11;
          *(_QWORD *)(v20 + 8) = v19;
          if (v19)
            *((_QWORD *)v18 + 2) = v20 + 8;
          *(_QWORD *)(v20 + 16) = v17;
          *v17 = v15;
        }
        v21 = *(_QWORD *)(v4 + 40);
        *(_QWORD *)(v10 + 40) = v21;
        *(_WORD *)(v21 + 18) &= ~0x8000u;
        if ((*(_BYTE *)(v10 + 23) & 0x10) != 0)
        {
          v164 = *(_QWORD *)(v21 + 56);
          if (v164)
          {
            v165 = *(llvm::ValueSymbolTable **)(v164 + 104);
            if (v165)
              llvm::ValueSymbolTable::reinsertValue(v165, (llvm::Value *)v10);
          }
        }
        v23 = *(_QWORD *)(v4 + 24);
        v22 = (_QWORD *)(v4 + 24);
        *(_QWORD *)(v10 + 24) = v23;
        *(_QWORD *)(v10 + 32) = v22;
        *(_QWORD *)(v23 + 8) = v10 + 24;
        *v22 = v10 + 24;
        if (*v5)
        {
          **(v2 - 2) = (uint64_t *)*(v2 - 3);
          v24 = (uint64_t)*(v2 - 3);
          if (v24)
            *(_QWORD *)(v24 + 16) = *(v2 - 2);
        }
        *(v2 - 4) = (uint64_t **)v10;
        v25 = *(_QWORD *)(v10 + 8);
        *(v2 - 3) = (uint64_t **)v25;
        if (v25)
          *(_QWORD *)(v25 + 16) = v2 - 3;
        *(v2 - 2) = (uint64_t **)(v10 + 8);
        *(_QWORD *)(v10 + 8) = v5;
        v26 = *(_QWORD *)(a1 + 32);
        v27 = *(_DWORD *)(v26 + 8);
        *(_QWORD *)&v256 = v10;
        DWORD2(v256) = v27;
        v28 = *(_DWORD *)(v26 + 2080);
        if (v28)
        {
          v29 = *(_QWORD *)(v26 + 2064);
          v30 = v28 - 1;
          v31 = v30 & ((v10 >> 4) ^ (v10 >> 9));
          v32 = (_QWORD *)(v29 + 16 * v31);
          v33 = *v32;
          if (*v32 == v10)
            return (llvm::UndefValue **)v2;
          v34 = 0;
          v35 = 1;
          while (v33 != -4096)
          {
            if (v34)
              v36 = 0;
            else
              v36 = v33 == -8192;
            if (v36)
              v34 = v32;
            v37 = v31 + v35++;
            v31 = v37 & v30;
            v32 = (_QWORD *)(v29 + 16 * v31);
            v33 = *v32;
            if (*v32 == v10)
              return (llvm::UndefValue **)v2;
          }
          if (v34)
            v54 = v34;
          else
            v54 = v32;
        }
        else
        {
          v54 = 0;
        }
        v55 = sub_1C4D8D8F4((_DWORD *)(v26 + 2064), (uint64_t)&v256, (uint64_t *)&v256, v54);
        *v55 = v256;
        *((_DWORD *)v55 + 2) = DWORD2(v256);
        v56 = *(unsigned int *)(v26 + 8);
        if (v56 >= *(_DWORD *)(v26 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v26, v26 + 16, v56 + 1, 8);
          LODWORD(v56) = *(_DWORD *)(v26 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v26 + 8 * v56) = v10;
        ++*(_DWORD *)(v26 + 8);
        return (llvm::UndefValue **)v2;
      }
    }
  }
  v38 = *((unsigned __int8 *)v2 + 16);
  if (v38 == 60 || v38 == 61)
  {
    v39 = *((_WORD *)v2 + 9);
    if ((v39 & 0x380) != 0)
      goto LABEL_125;
  }
  else
  {
    if ((v38 - 63) < 3)
      goto LABEL_125;
    v39 = *((_WORD *)v2 + 9);
  }
  if ((v39 & 1) == 0)
  {
    v40 = (llvm::UndefValue *)*v2;
    if (((_DWORD)(*v2)[1] & 0xFE) == 0x10)
    {
      if ((*((_BYTE *)v2 + 23) & 0x10) == 0)
      {
        *(_QWORD *)&v247 = &byte_1C871356D;
        *((_QWORD *)&v247 + 1) = 0;
LABEL_68:
        v59 = *((_DWORD *)*v2 + 2);
        if (v59 == 17)
        {
          v60 = (llvm::PointerType *)*((_QWORD *)v40 + 3);
          v61 = (_QWORD *)*((_QWORD *)v40 + 4);
          if (v61 != (_QWORD *)1)
          {
            if ((unint64_t)v61 > *(_QWORD *)(a1 + 16))
              goto LABEL_125;
            v140 = sub_1C4E3D148(*(_QWORD *)(a1 + 80), *((_QWORD *)v40 + 3));
            v143 = v142;
            v144 = *((unsigned __int16 *)v2 + 9);
            v242 = (uint64_t *)*(v2 - 4);
            v244 = v140;
            v145 = **(_QWORD **)v40;
            v146 = *(llvm::ConstantInt **)(v145 + 1984);
            v240 = v145;
            DWORD2(v256) = *(_DWORD *)(v145 + 1992) >> 8;
            if (DWORD2(v256) > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v256, 0, 0);
            else
              *(_QWORD *)&v256 = 0;
            v238 = llvm::ConstantInt::get(v146, (llvm::LLVMContext *)&v256, v141);
            if (DWORD2(v256) >= 0x41 && (_QWORD)v256)
              MEMORY[0x1CAA32F9C](v256, 0x1000C8000313F17);
            v149 = (uint64_t ***)llvm::UndefValue::get(v40, v147);
            if (v61)
            {
              v150 = 0;
              v151 = v143;
              v152 = 0;
              v235 = v151;
              v236 = 1 << (v144 >> 1);
              v237 = v4;
              v234 = v5;
              v246 = v2;
              do
              {
                v252 = v238;
                v253 = 0;
                v153 = *(llvm::ConstantInt **)(v240 + 1984);
                v154 = *(_DWORD *)(v240 + 1992);
                DWORD2(v256) = v154 >> 8;
                if (v154 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v256, v150, 0);
                }
                else
                {
                  if (v154 <= 0xFF)
                    v155 = 0;
                  else
                    v155 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v154);
                  *(_QWORD *)&v256 = v155 & v150;
                }
                v156 = llvm::ConstantInt::get(v153, (llvm::LLVMContext *)&v256, v148);
                if (DWORD2(v256) >= 0x41 && (_QWORD)v256)
                  MEMORY[0x1CAA32F9C](v256, 0x1000C8000313F17);
                v253 = v156;
                v157 = *(uint64_t **)(a1 + 24);
                LOWORD(v258) = 773;
                v256 = v247;
                *(_QWORD *)&v257 = ".elt";
                v158 = sub_1C53901A0(v157, v40, v242, (llvm::Value *)&v252, 2, (uint64_t)&v256);
                v159 = *(uint64_t **)(a1 + 24);
                v160 = *((_QWORD *)v40 + 3);
                LOWORD(v258) = 773;
                v256 = v247;
                *(_QWORD *)&v257 = ".unpack";
                v161 = sub_1C506D920(v159, v160, v158, (63 - __clz((v152 | v236) & -(v152 | v236))) | 0x100u, 0, (uint64_t)&v256);
                llvm::Instruction::getAAMetadata(v246, &v256);
                if ((_QWORD)v256 || *((_QWORD *)v161 + 6) || (*((_BYTE *)v161 + 23) & 0x20) != 0)
                  llvm::Value::setMetadata(v161, 1, (llvm::MDNode *)v256);
                if (*((_QWORD *)&v256 + 1) || *((_QWORD *)v161 + 6) || (*((_BYTE *)v161 + 23) & 0x20) != 0)
                  llvm::Value::setMetadata(v161, 5, *((llvm::MDNode **)&v256 + 1));
                v5 = v234;
                if ((_QWORD)v257 || *((_QWORD *)v161 + 6) || (*((_BYTE *)v161 + 23) & 0x20) != 0)
                  llvm::Value::setMetadata(v161, 7, (llvm::MDNode *)v257);
                v4 = v237;
                v2 = v246;
                if (*((_QWORD *)&v257 + 1) || *((_QWORD *)v161 + 6) || (*((_BYTE *)v161 + 23) & 0x20) != 0)
                  llvm::Value::setMetadata(v161, 8, *((llvm::MDNode **)&v257 + 1));
                v162 = *(_QWORD *)(a1 + 24);
                LODWORD(v251) = v150;
                LOWORD(v258) = 257;
                v149 = (uint64_t ***)sub_1C506D788(v162, (uint64_t)v149, (uint64_t)v161, &v251, 1, (uint64_t)&v256);
                if (v235 == 1)
                v152 += v244;
                ++v150;
              }
              while (v61 != (_QWORD *)v150);
            }
            LOWORD(v258) = 261;
            v256 = v247;
            llvm::Value::setName(v149, (uint64_t)&v256);
            v67 = a1;
            v68 = (llvm::ValueAsMetadata *)v2;
            v66 = (llvm::Value *)v149;
            goto LABEL_88;
          }
        }
        else
        {
          if (v59 != 16)
            goto LABEL_125;
          v245 = *((_DWORD *)v40 + 3);
          if (v245 != 1)
          {
            StructLayout = llvm::DataLayout::getStructLayout(*(llvm::DataLayout **)(a1 + 80), v40);
            if ((*((_BYTE *)StructLayout + 9) & 1) != 0)
              goto LABEL_125;
            v71 = StructLayout;
            v72 = *((unsigned __int16 *)v2 + 9);
            v243 = (uint64_t *)*(v2 - 4);
            v73 = **(_QWORD **)v40;
            v74 = *(llvm::ConstantInt **)(v73 + 1960);
            DWORD2(v256) = *(_DWORD *)(v73 + 1968) >> 8;
            if (DWORD2(v256) > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v256, 0, 0);
            else
              *(_QWORD *)&v256 = 0;
            v241 = llvm::ConstantInt::get(v74, (llvm::LLVMContext *)&v256, v70);
            if (DWORD2(v256) >= 0x41 && (_QWORD)v256)
              MEMORY[0x1CAA32F9C](v256, 0x1000C8000313F17);
            v77 = (uint64_t ***)llvm::UndefValue::get(v40, v75);
            LODWORD(v251) = 0;
            if (v245)
            {
              v78 = 0;
              v239 = (char *)v71 + 16;
              do
              {
                v252 = v241;
                v253 = 0;
                v79 = v78;
                v80 = *(llvm::ConstantInt **)(v73 + 1960);
                v81 = *(_DWORD *)(v73 + 1968);
                DWORD2(v256) = v81 >> 8;
                if (v81 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v256, v79, 0);
                }
                else
                {
                  if (v81 <= 0xFF)
                    v82 = 0;
                  else
                    v82 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v81);
                  *(_QWORD *)&v256 = v82 & v79;
                }
                v83 = llvm::ConstantInt::get(v80, (llvm::LLVMContext *)&v256, v76);
                if (DWORD2(v256) >= 0x41 && (_QWORD)v256)
                  MEMORY[0x1CAA32F9C](v256, 0x1000C8000313F17);
                v253 = v83;
                v84 = *(uint64_t **)(a1 + 24);
                LOWORD(v258) = 773;
                v256 = v247;
                *(_QWORD *)&v257 = ".elt";
                v85 = sub_1C53901A0(v84, v40, v243, (llvm::Value *)&v252, 2, (uint64_t)&v256);
                v86 = *(_QWORD *)(*((_QWORD *)v40 + 2) + 8 * v251);
                v87 = *(uint64_t **)(a1 + 24);
                v88 = *(_QWORD *)&v239[8 * v251] | (1 << (v72 >> 1));
                LOWORD(v258) = 773;
                v256 = v247;
                *(_QWORD *)&v257 = ".unpack";
                v89 = sub_1C506D920(v87, v86, v85, (63 - __clz(v88 & -v88)) | 0x100u, 0, (uint64_t)&v256);
                llvm::Instruction::getAAMetadata(v2, &v256);
                if ((_QWORD)v256 || *((_QWORD *)v89 + 6) || (*((_BYTE *)v89 + 23) & 0x20) != 0)
                  llvm::Value::setMetadata(v89, 1, (llvm::MDNode *)v256);
                if (*((_QWORD *)&v256 + 1) || *((_QWORD *)v89 + 6) || (*((_BYTE *)v89 + 23) & 0x20) != 0)
                  llvm::Value::setMetadata(v89, 5, *((llvm::MDNode **)&v256 + 1));
                if ((_QWORD)v257 || *((_QWORD *)v89 + 6) || (*((_BYTE *)v89 + 23) & 0x20) != 0)
                  llvm::Value::setMetadata(v89, 7, (llvm::MDNode *)v257);
                if (*((_QWORD *)&v257 + 1) || *((_QWORD *)v89 + 6) || (*((_BYTE *)v89 + 23) & 0x20) != 0)
                  llvm::Value::setMetadata(v89, 8, *((llvm::MDNode **)&v257 + 1));
                v90 = *(_QWORD *)(a1 + 24);
                LOWORD(v258) = 257;
                v77 = (uint64_t ***)sub_1C506D788(v90, (uint64_t)v77, (uint64_t)v89, &v251, 1, (uint64_t)&v256);
                v78 = (_DWORD)v251 + 1;
                LODWORD(v251) = v78;
              }
              while (v78 < v245);
            }
            LOWORD(v258) = 261;
            v256 = v247;
            llvm::Value::setName(v77, (uint64_t)&v256);
            v67 = a1;
            v68 = (llvm::ValueAsMetadata *)v2;
            v66 = (llvm::Value *)v77;
            goto LABEL_88;
          }
          v60 = (llvm::PointerType *)**((_QWORD **)v40 + 2);
        }
        *(_QWORD *)&v256 = ".unpack";
        LOWORD(v258) = 259;
        v62 = sub_1C581BC08(a1, (llvm::LoadInst *)v2, v60, (uint64_t *)&v256);
        llvm::Instruction::getAAMetadata(v2, &v256);
        if ((_QWORD)v256 || *((_QWORD *)v62 + 6) || (*((_BYTE *)v62 + 23) & 0x20) != 0)
          llvm::Value::setMetadata(v62, 1, (llvm::MDNode *)v256);
        if (*((_QWORD *)&v256 + 1) || *((_QWORD *)v62 + 6) || (*((_BYTE *)v62 + 23) & 0x20) != 0)
          llvm::Value::setMetadata(v62, 5, *((llvm::MDNode **)&v256 + 1));
        if ((_QWORD)v257 || *((_QWORD *)v62 + 6) || (*((_BYTE *)v62 + 23) & 0x20) != 0)
          llvm::Value::setMetadata(v62, 7, (llvm::MDNode *)v257);
        if (*((_QWORD *)&v257 + 1) || *((_QWORD *)v62 + 6) || (*((_BYTE *)v62 + 23) & 0x20) != 0)
          llvm::Value::setMetadata(v62, 8, *((llvm::MDNode **)&v257 + 1));
        v64 = *(_QWORD *)(a1 + 24);
        v65 = llvm::UndefValue::get(v40, v63);
        LODWORD(v252) = 0;
        LOWORD(v258) = 261;
        v256 = v247;
        v66 = (llvm::Value *)sub_1C506D788(v64, (uint64_t)v65, (uint64_t)v62, &v252, 1, (uint64_t)&v256);
        v67 = a1;
        v68 = (llvm::ValueAsMetadata *)v2;
LABEL_88:
        result = sub_1C577F888(v67, v68, v66);
        if (result)
          return result;
        goto LABEL_125;
      }
      v41 = **(_QWORD **)v40;
      v42 = *(_QWORD *)(v41 + 152);
      v43 = *(unsigned int *)(v41 + 168);
      if ((_DWORD)v43)
      {
        LODWORD(v44) = (v43 - 1) & ((v2 >> 4) ^ (v2 >> 9));
        v45 = (uint64_t ****)(v42 + 16 * v44);
        v46 = *v45;
        if (*v45 == v2)
        {
LABEL_67:
          v58 = v45[1];
          *(_QWORD *)&v247 = v58 + 2;
          *((_QWORD *)&v247 + 1) = *v58;
          goto LABEL_68;
        }
        v47 = 1;
        while (v46 != (uint64_t ***)-4096)
        {
          v48 = v44 + v47++;
          v44 = v48 & (v43 - 1);
          v46 = *(uint64_t ****)(v42 + 16 * v44);
          if (v46 == v2)
          {
            v45 = (uint64_t ****)(v42 + 16 * v44);
            goto LABEL_67;
          }
        }
      }
      v45 = (uint64_t ****)(v42 + 16 * v43);
      goto LABEL_67;
    }
  }
LABEL_125:
  v250 = 0;
  AvailableLoadedValue = llvm::FindAvailableLoadedValue((llvm *)v2, *(llvm::LoadInst **)(a1 + 48), (llvm::AAResults *)&v250, (BOOL *)dword_1ED82E000);
  if (AvailableLoadedValue)
  {
    v92 = (unsigned __int8 *)AvailableLoadedValue;
    if (v250)
    {
      v256 = xmmword_1C8674C34;
      v257 = unk_1C8674C44;
      v258 = xmmword_1C8674C54;
      llvm::combineMetadata((uint64_t)AvailableLoadedValue, v2, (unsigned int *)&v256, 12, 0);
    }
    v93 = *(uint64_t **)(a1 + 24);
    v94 = *v2;
    if ((*((_BYTE *)v2 + 23) & 0x10) == 0)
    {
      v112 = 0;
      v111 = &byte_1C871356D;
      goto LABEL_148;
    }
    v95 = **v94;
    v96 = *(_QWORD *)(v95 + 152);
    v97 = *(unsigned int *)(v95 + 168);
    if ((_DWORD)v97)
    {
      LODWORD(v98) = (v97 - 1) & ((v2 >> 4) ^ (v2 >> 9));
      v99 = (uint64_t ****)(v96 + 16 * v98);
      v100 = *v99;
      if (*v99 == v2)
      {
LABEL_147:
        v110 = v99[1];
        v113 = *v110;
        v111 = (char *)(v110 + 2);
        v112 = v113;
LABEL_148:
        LOWORD(v258) = 773;
        *(_QWORD *)&v256 = v111;
        *((_QWORD *)&v256 + 1) = v112;
        *(_QWORD *)&v257 = ".cast";
        v114 = (llvm::Value *)sub_1C506D6A8(v93, v92, (uint64_t)v94, (uint64_t)&v256);
        return sub_1C577F888(a1, (llvm::ValueAsMetadata *)v2, v114);
      }
      v101 = 1;
      while (v100 != (uint64_t ***)-4096)
      {
        v102 = v98 + v101++;
        v98 = v102 & (v97 - 1);
        v100 = *(uint64_t ****)(v96 + 16 * v98);
        if (v100 == v2)
        {
          v99 = (uint64_t ****)(v96 + 16 * v98);
          goto LABEL_147;
        }
      }
    }
    v99 = (uint64_t ****)(v96 + 16 * v97);
    goto LABEL_147;
  }
  v103 = *((unsigned __int16 *)v2 + 9);
  if ((v103 & 0x301) != 0)
    return 0;
  v104 = *(unsigned __int8 *)(v4 + 16);
  if (!v4 || v104 != 62)
  {
    if ((v104 - 11) < 2)
      goto LABEL_159;
    if (v104 != 19)
      goto LABEL_166;
    v115 = v2[5][7];
    v116 = (uint64_t)**(v2 - 4);
    v108 = *(_DWORD *)(v116 + 8);
    if ((v108 & 0xFE) == 0x12)
      v108 = *(_DWORD *)(**(_QWORD **)(v116 + 16) + 8);
    if (!v115)
      goto LABEL_158;
    v109 = v115[14];
    if (!v109)
      goto LABEL_158;
    goto LABEL_157;
  }
  v105 = *(_BYTE **)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF));
  if (v105[16] != 19)
    goto LABEL_166;
  v106 = v2[5][7];
  v107 = *(_QWORD *)v105;
  v108 = *(_DWORD *)(*(_QWORD *)v105 + 8);
  if ((v108 & 0xFE) == 0x12)
    v108 = *(_DWORD *)(**(_QWORD **)(v107 + 16) + 8);
  if (v106)
  {
    v109 = v106[14];
    if (v109)
    {
LABEL_157:
      if ((*(_BYTE *)(v109 + 17) & 1) != 0)
        goto LABEL_166;
LABEL_158:
      if (v108 > 0xFF)
        goto LABEL_166;
LABEL_159:
      v117 = (char *)operator new(0x80uLL);
      *((_DWORD *)v117 + 21) = *((_DWORD *)v117 + 21) & 0x38000000 | 2;
      *(_QWORD *)v117 = 0;
      *((_QWORD *)v117 + 1) = 0;
      *((_QWORD *)v117 + 2) = 0;
      *((_QWORD *)v117 + 3) = v117 + 64;
      *((_QWORD *)v117 + 4) = 0;
      *((_QWORD *)v117 + 5) = 0;
      *((_QWORD *)v117 + 6) = 0;
      *((_QWORD *)v117 + 7) = v117 + 64;
      v119 = (llvm::Value *)llvm::PoisonValue::get((llvm::PoisonValue *)*v2, v118);
      NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)v4, v120);
      llvm::StoreInst::StoreInst((llvm::StoreInst *)(v117 + 64), v119, (llvm::Value *)NullValue, 0, (llvm::Instruction *)v2);
      v122 = (unsigned __int8 *)v2[6];
      v249 = v122;
      if (v122)
        llvm::MetadataTracking::track((uint64_t)&v249, v122, 2);
      v125 = (unsigned __int8 *)*((_QWORD *)v117 + 14);
      v124 = (unsigned __int8 **)(v117 + 112);
      v123 = v125;
      if (v125)
        llvm::MetadataTracking::untrack((uint64_t)v124, v123);
      v126 = v249;
      *v124 = v249;
      if (v126)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v249, v126, (uint64_t)v124);
        v249 = 0;
      }
      v114 = (llvm::Value *)llvm::PoisonValue::get((llvm::PoisonValue *)*v2, (llvm::Type *)v126);
      return sub_1C577F888(a1, (llvm::ValueAsMetadata *)v2, v114);
    }
  }
  if (v108 < 0x100)
    goto LABEL_159;
LABEL_166:
  v127 = *(_QWORD *)(v4 + 8);
  if (!v127)
    return 0;
  result = 0;
  if (v4 && v104 == 85 && !*(_QWORD *)(v127 + 8))
  {
    v128 = (v103 >> 1) & 0x3F;
    if (llvm::isSafeToLoadUnconditionally(*(uint64_t **)(v4 - 64), (uint64_t)*v2, (v103 >> 1) & 0x3F, *(const llvm::DataLayout **)(a1 + 80), (unint64_t *)v4, 0, 0)&& llvm::isSafeToLoadUnconditionally(*(uint64_t **)(v4 - 32), (uint64_t)*v2, v128, *(const llvm::DataLayout **)(a1 + 80), (unint64_t *)v4, 0, 0))
    {
      v129 = *(uint64_t **)(a1 + 24);
      v130 = (uint64_t)*v2;
      v131 = *(uint64_t ****)(v4 - 64);
      if ((*((_BYTE *)v131 + 23) & 0x10) == 0)
      {
        v183 = 0;
        v182 = &byte_1C871356D;
        goto LABEL_255;
      }
      v132 = ***v131;
      v133 = *(_QWORD *)(v132 + 152);
      v134 = *(unsigned int *)(v132 + 168);
      if ((_DWORD)v134)
      {
        LODWORD(v135) = (v134 - 1) & ((v131 >> 4) ^ (v131 >> 9));
        v136 = (uint64_t ****)(v133 + 16 * v135);
        v137 = *v136;
        if (*v136 == v131)
        {
LABEL_254:
          v181 = v136[1];
          v184 = (llvm::ValueHandleBase *)*v181;
          v182 = (char *)(v181 + 2);
          v183 = v184;
LABEL_255:
          v255 = 773;
          v252 = v182;
          v253 = v183;
          v254 = ".val";
          llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v129[6] + 56) + 40) + 272, v130);
          v186 = v185;
          v187 = (char *)operator new(0x60uLL);
          v188 = v187;
          *((_QWORD *)v187 + 2) = 0;
          *((_QWORD *)v187 + 3) = v187 + 32;
          v248 = (uint64_t ***)(v187 + 32);
          LOWORD(v258) = 257;
          *((_QWORD *)v187 + 4) = v130;
          *((_QWORD *)v187 + 5) = 0;
          *((_WORD *)v187 + 24) = 60;
          *((_DWORD *)v187 + 13) = 1;
          *(_OWORD *)(v187 + 56) = 0u;
          *(_OWORD *)(v187 + 72) = 0u;
          *((_DWORD *)v187 + 22) = 0;
          *(_QWORD *)v187 = v131;
          *((_QWORD *)v187 + 1) = 0;
          if (v131)
          {
            v191 = v131[1];
            v190 = v131 + 1;
            v189 = v191;
            *((_QWORD *)v187 + 1) = v191;
            if (v191)
              v189[2] = (uint64_t *)(v187 + 8);
            *((_QWORD *)v187 + 2) = v190;
            *v190 = v187;
          }
          *((_WORD *)v187 + 25) = 2 * (v186 & 0x3F);
          v187[92] = 1;
          llvm::Value::setName(v248, (uint64_t)&v256);
          (*(void (**)(uint64_t, uint64_t ***, void **, uint64_t, uint64_t))(*(_QWORD *)v129[10] + 16))(v129[10], v248, &v252, v129[6], v129[7]);
          v192 = *((unsigned int *)v129 + 2);
          if (!(_DWORD)v192)
          {
LABEL_260:
            v193 = *(uint64_t **)(a1 + 24);
            v194 = (uint64_t)*v2;
            v195 = *(uint64_t ****)(v4 - 32);
            if ((*((_BYTE *)v195 + 23) & 0x10) == 0)
            {
              v206 = 0;
              v205 = &byte_1C871356D;
              goto LABEL_269;
            }
            v196 = ***v195;
            v197 = *(_QWORD *)(v196 + 152);
            v198 = *(unsigned int *)(v196 + 168);
            if ((_DWORD)v198)
            {
              LODWORD(v199) = (v198 - 1) & ((v195 >> 4) ^ (v195 >> 9));
              v200 = (uint64_t ****)(v197 + 16 * v199);
              v201 = *v200;
              if (*v200 == v195)
              {
LABEL_268:
                v204 = v200[1];
                v207 = (llvm::ValueHandleBase *)*v204;
                v205 = (char *)(v204 + 2);
                v206 = v207;
LABEL_269:
                v255 = 773;
                v252 = v205;
                v253 = v206;
                v254 = ".val";
                llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v193[6] + 56) + 40) + 272, v194);
                v209 = v208;
                v210 = (char *)operator new(0x60uLL);
                v211 = v210;
                v212 = (llvm::Value *)(v210 + 32);
                *((_QWORD *)v210 + 2) = 0;
                *((_QWORD *)v210 + 3) = v210 + 32;
                LOWORD(v258) = 257;
                *((_QWORD *)v210 + 4) = v194;
                *((_QWORD *)v210 + 5) = 0;
                *((_WORD *)v210 + 24) = 60;
                *((_DWORD *)v210 + 13) = 1;
                *(_OWORD *)(v210 + 56) = 0u;
                *(_OWORD *)(v210 + 72) = 0u;
                *((_DWORD *)v210 + 22) = 0;
                *(_QWORD *)v210 = v195;
                *((_QWORD *)v210 + 1) = 0;
                if (v195)
                {
                  v215 = v195[1];
                  v214 = v195 + 1;
                  v213 = v215;
                  *((_QWORD *)v210 + 1) = v215;
                  if (v215)
                    v213[2] = (uint64_t *)(v210 + 8);
                  *((_QWORD *)v210 + 2) = v214;
                  *v214 = v210;
                }
                *((_WORD *)v210 + 25) = 2 * (v209 & 0x3F);
                v210[92] = 1;
                llvm::Value::setName((uint64_t ***)v210 + 4, (uint64_t)&v256);
                (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v193[10] + 16))(v193[10], v212, &v252, v193[6], v193[7]);
                v216 = *((unsigned int *)v193 + 2);
                if (!(_DWORD)v216)
                {
LABEL_274:
                  v217 = *((_WORD *)v2 + 9) & 0x380;
                  v218 = *((_BYTE *)v2 + 60);
                  *((_WORD *)v188 + 25) = v217 | *((_WORD *)v188 + 25) & 0xFC01 | (2 * v128);
                  v188[92] = v218;
                  *((_WORD *)v211 + 25) = *((_WORD *)v211 + 25) & 0xFC01 | (2 * v128) | v217;
                  v211[92] = v218;
                  v219 = *(_QWORD *)(v4 - 96);
                  LOWORD(v258) = 257;
                  return (llvm::UndefValue **)sub_1C4FC8748(v219, (uint64_t *)v248, (uint64_t)v212, (uint64_t)&v256, 0, 0);
                }
                v227 = *v193;
                v228 = *v193 + 16 * v216;
                v229 = (unsigned __int8 **)(v211 + 80);
                while (1)
                {
                  v230 = *(_DWORD *)v227;
                  v231 = *(unsigned __int8 **)(v227 + 8);
                  if (v231)
                  {
                    if (!v230)
                    {
                      v251 = *(unsigned __int8 **)(v227 + 8);
                      llvm::MetadataTracking::track((uint64_t)&v251, v231, 2);
                      v232 = *v229;
                      goto LABEL_301;
                    }
                  }
                  else
                  {
                    v232 = *v229;
                    if (!*v229 && (v211[55] & 0x20) == 0)
                      goto LABEL_298;
                    if (!v230)
                    {
                      v251 = 0;
LABEL_301:
                      if (v232)
                        llvm::MetadataTracking::untrack((uint64_t)(v211 + 80), v232);
                      v233 = v251;
                      *v229 = v251;
                      if (v233)
                        llvm::MetadataTracking::retrack((uint64_t)&v251, v233, (uint64_t)(v211 + 80));
                      goto LABEL_298;
                    }
                  }
                  llvm::Value::setMetadata(v212, *(_DWORD *)v227, (llvm::MDNode *)v231);
LABEL_298:
                  v227 += 16;
                  if (v227 == v228)
                    goto LABEL_274;
                }
              }
              v202 = 1;
              while (v201 != (uint64_t ***)-4096)
              {
                v203 = v199 + v202++;
                v199 = v203 & (v198 - 1);
                v201 = *(uint64_t ****)(v197 + 16 * v199);
                if (v201 == v195)
                {
                  v200 = (uint64_t ****)(v197 + 16 * v199);
                  goto LABEL_268;
                }
              }
            }
            v200 = (uint64_t ****)(v197 + 16 * v198);
            goto LABEL_268;
          }
          v220 = *v129;
          v221 = *v129 + 16 * v192;
          v222 = (unsigned __int8 **)(v188 + 80);
          while (1)
          {
            v223 = *(_DWORD *)v220;
            v224 = *(unsigned __int8 **)(v220 + 8);
            if (v224)
            {
              if (!v223)
              {
                v251 = *(unsigned __int8 **)(v220 + 8);
                llvm::MetadataTracking::track((uint64_t)&v251, v224, 2);
                v225 = *v222;
                goto LABEL_286;
              }
            }
            else
            {
              v225 = *v222;
              if (!*v222 && (v188[55] & 0x20) == 0)
                goto LABEL_283;
              if (!v223)
              {
                v251 = 0;
LABEL_286:
                if (v225)
                  llvm::MetadataTracking::untrack((uint64_t)(v188 + 80), v225);
                v226 = v251;
                *v222 = v251;
                if (v226)
                  llvm::MetadataTracking::retrack((uint64_t)&v251, v226, (uint64_t)(v188 + 80));
                goto LABEL_283;
              }
            }
            llvm::Value::setMetadata((llvm::Value *)v248, *(_DWORD *)v220, (llvm::MDNode *)v224);
LABEL_283:
            v220 += 16;
            if (v220 == v221)
              goto LABEL_260;
          }
        }
        v138 = 1;
        while (v137 != (uint64_t ***)-4096)
        {
          v139 = v135 + v138++;
          v135 = v139 & (v134 - 1);
          v137 = *(uint64_t ****)(v133 + 16 * v135);
          if (v137 == v131)
          {
            v136 = (uint64_t ****)(v133 + 16 * v135);
            goto LABEL_254;
          }
        }
      }
      v136 = (uint64_t ****)(v133 + 16 * v134);
      goto LABEL_254;
    }
    v166 = *(_QWORD *)(v4 - 64);
    if (*(_BYTE *)(v166 + 16) == 19)
    {
      v167 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 56);
      v168 = **v5;
      v169 = *(_DWORD *)(v168 + 8);
      if ((v169 & 0xFE) == 0x12)
        v169 = *(_DWORD *)(**(_QWORD **)(v168 + 16) + 8);
      if ((!v167 || (v170 = *(_QWORD *)(v167 + 112)) == 0 || (*(_BYTE *)(v170 + 17) & 1) == 0) && v169 <= 0xFF)
      {
        v166 = *(_QWORD *)(v4 - 32);
        return (llvm::UndefValue **)sub_1C577E2C8(a1, (uint64_t)v2, 0, v166);
      }
    }
    if (*(_BYTE *)(*(_QWORD *)(v4 - 32) + 16) != 19)
      return 0;
    v171 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 56);
    v172 = **v5;
    v173 = *(_DWORD *)(v172 + 8);
    if ((v173 & 0xFE) == 0x12)
      v173 = *(_DWORD *)(**(_QWORD **)(v172 + 16) + 8);
    if (!v171 || (v174 = *(_QWORD *)(v171 + 112)) == 0)
    {
      if (v173 > 0xFF)
        return 0;
      return (llvm::UndefValue **)sub_1C577E2C8(a1, (uint64_t)v2, 0, v166);
    }
    result = 0;
    if ((*(_BYTE *)(v174 + 17) & 1) == 0 && v173 <= 0xFF)
      return (llvm::UndefValue **)sub_1C577E2C8(a1, (uint64_t)v2, 0, v166);
  }
  return result;
}

uint64_t sub_1C581D3A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned __int8 **v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  int v10;
  llvm::PointerType **v12;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  _BOOL4 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unsigned __int16 v29;
  int v30;
  uint64_t *v31;
  uint64_t **v32;
  int v33;
  llvm::StructLayout *StructLayout;
  llvm::StructLayout *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t **v40;
  uint64_t *v41;
  int v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  llvm::PointerType **v46;
  unsigned __int8 *v47;
  unsigned int v48;
  unsigned int v49;
  BOOL v51;
  uint64_t v52;
  int v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t **v66;
  uint64_t *v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  const void *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t **v83;
  uint64_t *v84;
  int v85;
  int v86;
  unint64_t *v87;
  unint64_t v88;
  const void *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const llvm::APInt *v93;
  _DWORD *v94;
  uint64_t v95;
  llvm::ConstantInt *v96;
  llvm::MDNode *v97;
  llvm::ValueHandleBase *v98;
  unsigned int v99;
  char *v100;
  uint64_t v101;
  llvm::ConstantInt *v102;
  unsigned int v103;
  unint64_t v104;
  llvm::ValueHandleBase *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  llvm::Value *v111;
  llvm::MDNode *v112;
  unint64_t *v113;
  unint64_t v114;
  const void *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned __int8 *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned __int8 **v124;
  unsigned __int8 *v125;
  int v126;
  int v127;
  unint64_t *v128;
  unint64_t v129;
  const void *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  const llvm::APInt *v134;
  _DWORD *v135;
  uint64_t v136;
  llvm::ConstantInt *v137;
  llvm::MDNode *v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  llvm::ConstantInt *v143;
  unsigned int v144;
  unint64_t v145;
  llvm::ValueHandleBase *v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  llvm::Value *v151;
  const char *v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  char *v158;
  _QWORD *v159;
  uint64_t v160;
  int v161;
  BOOL v162;
  llvm::PointerType *v163;
  int v164;
  _QWORD *v165;
  _QWORD *v166;
  int v167;
  llvm::ValueHandleBase **v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  int v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t *v179;
  uint64_t v180;
  llvm::MDNode *v181;
  llvm::MDNode *v182;
  llvm::Value *v183;
  llvm::Type *v184;
  uint64_t v185;
  llvm::PointerType **v186;
  uint64_t v187;
  uint64_t v188;
  llvm::MDNode *v189;
  llvm::MDNode *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  llvm::Value **v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  llvm::Value *v200;
  llvm::Value *v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  int v210;
  uint64_t v211;
  int v212;
  unsigned int v213;
  _QWORD *v214;
  uint64_t v215;
  _QWORD *v216;
  int v217;
  BOOL v218;
  unsigned int v219;
  uint64_t v220;
  uint64_t v221;
  llvm::Type *v222;
  _QWORD *v223;
  int v224;
  llvm::Instruction *v225;
  int v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unsigned int v238;
  int v239;
  uint64_t v241;
  _QWORD *v242;
  _QWORD *v243;
  uint64_t v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  llvm::ValueSymbolTable *v249;
  uint64_t v250;
  int v251;
  int v252;
  uint64_t v253;
  int v254;
  unsigned int v255;
  _QWORD *v256;
  uint64_t v257;
  _QWORD *v258;
  int v259;
  BOOL v260;
  unsigned int v261;
  uint64_t v262;
  uint64_t *v263;
  uint64_t v264;
  unsigned int v265;
  unsigned int v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  _QWORD *v270;
  _QWORD *v272;
  _QWORD *v273;
  uint64_t v274;
  llvm::Value *v275;
  unint64_t v276;
  unint64_t v277;
  llvm::ValueHandleBase *v278;
  uint64_t *v279;
  uint64_t v280;
  unsigned int v281;
  uint64_t *v282;
  llvm::PointerType *v283;
  uint64_t *v284;
  _BOOL4 v285;
  unsigned int v286;
  llvm::MDNode *v287;
  llvm::MDNode *v288;
  llvm::MDNode *v289;
  llvm::MDNode *v290;
  __int16 v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  llvm::ValueHandleBase *v295;
  llvm::ValueHandleBase *v296;
  void *v297;
  __int128 v298;
  _BYTE v299[16];
  llvm::MDNode *v300;
  _BYTE v301[24];
  __int128 v302;
  uint64_t v303;

  v2 = a2;
  v303 = *MEMORY[0x1E0C80C00];
  v5 = (unsigned __int8 **)(a2 - 32);
  v4 = *(_QWORD *)(a2 - 32);
  v6 = *(_QWORD *)(a2 - 64);
  if ((*(_WORD *)(a2 + 18) & 0x301) != 0 || llvm::Value::isSwiftError(*(llvm::Value **)(a2 - 32)))
    goto LABEL_43;
  v7 = *(_QWORD *)(v2 - 64);
  v8 = *(unsigned __int8 *)(v7 + 16);
  if (v7 && v8 == 77)
  {
    v7 = *(_QWORD *)(v7 - 32);
    v9 = *(unsigned __int8 *)(*(_QWORD *)v7 + 8);
    if (v9 == 11)
      goto LABEL_43;
    v10 = *(unsigned __int8 *)(v2 + 16);
    if (v10 == 60 || v10 == 61)
    {
      if ((*(_WORD *)(v2 + 18) & 0x380) != 0)
      {
LABEL_8:
        if ((v9 & 0xFFFFFFFD) == 0xD || v9 < 7)
          goto LABEL_12;
        v8 = *(unsigned __int8 *)(v7 + 16);
        goto LABEL_15;
      }
    }
    else if ((v10 - 63) < 3)
    {
      goto LABEL_8;
    }
LABEL_12:
    v12 = (llvm::PointerType **)v7;
LABEL_13:
    sub_1C581F81C(a1, v2, v12);
    return sub_1C57813F4(a1, v2);
  }
LABEL_15:
  if (v8 != 93)
  {
    sub_1C4E7B480(v7);
    goto LABEL_43;
  }
  v12 = 0;
  do
  {
    v14 = *(_QWORD *)(v7 - 32);
    if (!v14 || *(_BYTE *)(v14 + 16) != 89)
      goto LABEL_43;
    if (v12)
    {
      if (v12 != *(llvm::PointerType ***)(v14 - 64))
        goto LABEL_43;
    }
    else
    {
      v12 = *(llvm::PointerType ***)(v14 - 64);
    }
    v15 = *(_QWORD *)(v14 - 32);
    v16 = v15 && *(_BYTE *)(v15 + 16) == 16;
    if (!v16 || *(_DWORD *)(v7 + 72) != 1)
      goto LABEL_43;
    v17 = (_QWORD *)(v15 + 24);
    if (*(_DWORD *)(v15 + 32) >= 0x41u)
      v17 = (_QWORD *)*v17;
    if (*v17 != **(_DWORD **)(v7 + 64))
      goto LABEL_43;
    v7 = *(_QWORD *)(v7 - 64);
  }
  while (v7 && *(_BYTE *)(v7 + 16) == 93);
  if (sub_1C4E7B480(v7))
  {
    if (v12)
    {
      v18 = *(_QWORD *)v7;
      v19 = *(_QWORD *)(a1 + 80);
      v283 = *v12;
      sub_1C4768AD0(v19, (uint64_t)*v12);
      v21 = v20 + 7;
      v23 = v22 == 1;
      sub_1C4768AD0(v19, v18);
      if (((v25 + 7) ^ v21) <= 7 && ((v23 ^ (v24 == 1)) & 1) == 0)
      {
        v26 = *((unsigned int *)v283 + 8);
        if (*(_BYTE *)(v18 + 8) == 17 && v18)
        {
          if (*(_QWORD *)(v18 + 32) != v26)
            goto LABEL_43;
        }
        else
        {
          if (*(_DWORD *)(v18 + 12) != (_DWORD)v26)
            goto LABEL_43;
          if ((_DWORD)v26)
          {
            v159 = *(_QWORD **)(v18 + 16);
            v160 = 8 * v26;
            while (*v159 == *((_QWORD *)v283 + 3))
            {
              ++v159;
              v160 -= 8;
              if (!v160)
                goto LABEL_231;
            }
            goto LABEL_43;
          }
        }
LABEL_231:
        v161 = *(unsigned __int8 *)(v2 + 16);
        if (v161 == 60 || v161 == 61)
        {
          if ((*(_WORD *)(v2 + 18) & 0x380) == 0)
            goto LABEL_13;
        }
        else if ((v161 - 63) >= 3)
        {
          goto LABEL_13;
        }
        v162 = (*((_DWORD *)*v12 + 2) & 0xFD) != 0xD && *((_DWORD *)*v12 + 2) > 6u;
        if (!v162)
          goto LABEL_13;
      }
    }
  }
LABEL_43:
  llvm::DataLayout::getAlignment(*(_QWORD *)(a1 + 80), *(_QWORD *)v6);
  v28 = llvm::getOrEnforceKnownAlignment(v4, v27 | 0x100u, *(unsigned __int8 **)(a1 + 80), v2, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 72));
  v29 = *(_WORD *)(v2 + 18);
  if ((__clz(1 << ((unint64_t)v29 >> 1)) ^ 0x3F) < v28)
  {
    v29 = v29 & 0xFF81 | (2 * v28);
    *(_WORD *)(v2 + 18) = v29;
  }
  v30 = *(unsigned __int8 *)(v2 + 16);
  if (v30 == 60 || v30 == 61)
  {
    if ((v29 & 0x380) != 0)
      goto LABEL_66;
  }
  else if ((v30 - 63) < 3)
  {
    goto LABEL_66;
  }
  if ((v29 & 1) == 0)
  {
    v31 = *(uint64_t **)(v2 - 64);
    v32 = (uint64_t **)*v31;
    if ((*(_DWORD *)(*v31 + 8) & 0xFE) == 0x10)
    {
      v33 = *(_DWORD *)(*v31 + 8);
      if (v33 != 17)
      {
        if (v33 != 16)
          goto LABEL_66;
        v281 = *((_DWORD *)v32 + 3);
        if (v281 != 1)
        {
          StructLayout = llvm::DataLayout::getStructLayout(*(llvm::DataLayout **)(a1 + 80), (llvm::StructType *)v32);
          if ((*((_BYTE *)StructLayout + 9) & 1) == 0)
          {
            v35 = StructLayout;
            v277 = *(unsigned __int16 *)(v2 + 18);
            v284 = v31;
            if ((*((_BYTE *)v31 + 23) & 0x10) == 0)
            {
              v73 = 0;
              v76 = 0;
              v300 = (llvm::MDNode *)&v301[16];
              *(_OWORD *)v301 = xmmword_1C6612EE0;
              goto LABEL_107;
            }
            v36 = **(_QWORD **)*v31;
            v37 = *(_QWORD *)(v36 + 152);
            v38 = *(unsigned int *)(v36 + 168);
            if ((_DWORD)v38)
            {
              LODWORD(v39) = (v38 - 1) & ((v31 >> 4) ^ (v31 >> 9));
              v40 = (uint64_t **)(v37 + 16 * v39);
              v41 = *v40;
              if (*v40 == v31)
              {
LABEL_104:
                v72 = (unint64_t *)v40[1];
                v75 = *v72;
                v74 = v72 + 2;
                v73 = v75;
                v300 = (llvm::MDNode *)&v301[16];
                *(_OWORD *)v301 = xmmword_1C6612EE0;
                if (v75 >= 0x11)
                {
                  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v300, &v301[16], v73, 1);
                  v76 = *(_QWORD *)v301;
                }
                else
                {
                  v76 = 0;
                  if (!v73)
                    goto LABEL_107;
                }
                memcpy((char *)v300 + v76, v74, v73);
                v76 = *(_QWORD *)v301;
LABEL_107:
                v77 = v76 + v73;
                *(_QWORD *)v301 = v77;
                if (*(_QWORD *)&v301[8] < (unint64_t)(v77 + 4))
                {
                  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v300, &v301[16], v77 + 4, 1);
                  v77 = *(_QWORD *)v301;
                }
                *(_DWORD *)((char *)v300 + v77) = 1953260846;
                *(_QWORD *)v301 += 4;
                v78 = (uint64_t *)*v5;
                if (((*v5)[23] & 0x10) == 0)
                {
                  v88 = 0;
                  v91 = 0;
                  v297 = v299;
                  v298 = xmmword_1C6612EE0;
                  goto LABEL_120;
                }
                v79 = **(_QWORD **)*v78;
                v80 = *(_QWORD *)(v79 + 152);
                v81 = *(unsigned int *)(v79 + 168);
                if ((_DWORD)v81)
                {
                  LODWORD(v82) = (v81 - 1) & ((v78 >> 4) ^ (v78 >> 9));
                  v83 = (uint64_t **)(v80 + 16 * v82);
                  v84 = *v83;
                  if (*v83 == v78)
                    goto LABEL_117;
                  v85 = 1;
                  while (v84 != (uint64_t *)-4096)
                  {
                    v86 = v82 + v85++;
                    v82 = v86 & (v81 - 1);
                    v84 = *(uint64_t **)(v80 + 16 * v82);
                    if (v84 == v78)
                    {
                      v83 = (uint64_t **)(v80 + 16 * v82);
                      goto LABEL_117;
                    }
                  }
                }
                v83 = (uint64_t **)(v80 + 16 * v81);
LABEL_117:
                v87 = (unint64_t *)v83[1];
                v90 = *v87;
                v89 = v87 + 2;
                v88 = v90;
                v297 = v299;
                v298 = xmmword_1C6612EE0;
                if (v90 >= 0x11)
                {
                  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v297, v299, v88, 1);
                  v91 = v298;
                }
                else
                {
                  v91 = 0;
                  if (!v88)
                  {
LABEL_120:
                    v92 = v91 + v88;
                    *(_QWORD *)&v298 = v92;
                    v93 = (const llvm::APInt *)(v92 + 7);
                    if (*((_QWORD *)&v298 + 1) < (unint64_t)(v92 + 7))
                    {
                      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v297, v299, (unint64_t)v93, 1);
                      v92 = v298;
                    }
                    v94 = (char *)v297 + v92;
                    *(_DWORD *)((char *)v94 + 3) = 1801675120;
                    *v94 = 1885696558;
                    *(_QWORD *)&v298 = v298 + 7;
                    v95 = **v32;
                    v96 = *(llvm::ConstantInt **)(v95 + 1960);
                    LODWORD(v288) = *(_DWORD *)(v95 + 1968) >> 8;
                    if (v288 > 0x40)
                      llvm::APInt::initSlowCase((llvm::APInt *)&v287, 0, 0);
                    else
                      v287 = 0;
                    v98 = llvm::ConstantInt::get(v96, (llvm::LLVMContext *)&v287, v93);
                    if (v288 >= 0x41 && v287)
                      MEMORY[0x1CAA32F9C](v287, 0x1000C8000313F17);
                    LODWORD(v293) = 0;
                    if (v281)
                    {
                      v99 = 0;
                      v100 = (char *)v35 + 16;
                      do
                      {
                        v295 = v98;
                        v296 = 0;
                        v101 = v99;
                        v102 = *(llvm::ConstantInt **)(v95 + 1960);
                        v103 = *(_DWORD *)(v95 + 1968);
                        LODWORD(v288) = v103 >> 8;
                        if (v103 >> 8 > 0x40)
                        {
                          llvm::APInt::initSlowCase((llvm::APInt *)&v287, v101, 0);
                        }
                        else
                        {
                          if (v103 <= 0xFF)
                            v104 = 0;
                          else
                            v104 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v103);
                          v287 = (llvm::MDNode *)(v104 & v101);
                        }
                        v105 = llvm::ConstantInt::get(v102, (llvm::LLVMContext *)&v287, v97);
                        if (v288 >= 0x41 && v287)
                          MEMORY[0x1CAA32F9C](v287, 0x1000C8000313F17);
                        v296 = v105;
                        v106 = *(uint64_t **)(a1 + 24);
                        v291 = 261;
                        v287 = (llvm::MDNode *)v297;
                        v288 = (llvm::MDNode *)v298;
                        v107 = sub_1C53901A0(v106, (llvm::GetElementPtrInst *)v32, v78, (llvm::Value *)&v295, 2, (uint64_t)&v287);
                        v108 = *(_QWORD *)(a1 + 24);
                        v291 = 261;
                        v287 = v300;
                        v288 = *(llvm::MDNode **)v301;
                        v109 = (uint64_t *)sub_1C506DBC4(v108, v284, (unsigned int *)&v293, 1, (uint64_t)&v287);
                        v110 = *(_QWORD *)&v100[8 * v293] | (1 << (v277 >> 1));
                        v111 = sub_1C509CCE8(*(uint64_t **)(a1 + 24), v109, v107, (63 - __clz(v110 & -v110)) | 0x100u, 0);
                        llvm::Instruction::getAAMetadata((uint64_t ***)v2, &v287);
                        if (v287 || *((_QWORD *)v111 + 6) || (*((_BYTE *)v111 + 23) & 0x20) != 0)
                          llvm::Value::setMetadata(v111, 1, v287);
                        if (v288 || *((_QWORD *)v111 + 6) || (*((_BYTE *)v111 + 23) & 0x20) != 0)
                          llvm::Value::setMetadata(v111, 5, v288);
                        if (v289 || *((_QWORD *)v111 + 6) || (*((_BYTE *)v111 + 23) & 0x20) != 0)
                          llvm::Value::setMetadata(v111, 7, v289);
                        v97 = v290;
                        if (v290 || *((_QWORD *)v111 + 6) || (*((_BYTE *)v111 + 23) & 0x20) != 0)
                          llvm::Value::setMetadata(v111, 8, v290);
                        v99 = v293 + 1;
                        LODWORD(v293) = v99;
                      }
                      while (v99 < v281);
                    }
                    if (v297 != v299)
                      free(v297);
                    v112 = v300;
LABEL_215:
                    if (v112 != (llvm::MDNode *)&v301[16])
                      free(v112);
                    return sub_1C57813F4(a1, v2);
                  }
                }
                memcpy((char *)v297 + v91, v89, v88);
                v91 = v298;
                goto LABEL_120;
              }
              v42 = 1;
              while (v41 != (uint64_t *)-4096)
              {
                v43 = v39 + v42++;
                v39 = v43 & (v38 - 1);
                v41 = *(uint64_t **)(v37 + 16 * v39);
                if (v41 == v31)
                {
                  v40 = (uint64_t **)(v37 + 16 * v39);
                  goto LABEL_104;
                }
              }
            }
            v40 = (uint64_t **)(v37 + 16 * v38);
            goto LABEL_104;
          }
          goto LABEL_66;
        }
LABEL_64:
        v45 = *(_QWORD *)(a1 + 24);
        LODWORD(v297) = 0;
        LOWORD(v302) = 257;
        v46 = (llvm::PointerType **)sub_1C506DBC4(v45, v31, (unsigned int *)&v297, 1, (uint64_t)&v300);
        sub_1C581F81C(a1, v2, v46);
        return sub_1C57813F4(a1, v2);
      }
      v44 = v32[4];
      if (v44 == (uint64_t *)1)
        goto LABEL_64;
      if ((unint64_t)v44 > *(_QWORD *)(a1 + 16))
        goto LABEL_66;
      v282 = v32[4];
      v280 = sub_1C4E3D148(*(_QWORD *)(a1 + 80), (uint64_t)v32[3]);
      v61 = v60;
      v276 = *(unsigned __int16 *)(v2 + 18);
      if ((*((_BYTE *)v31 + 23) & 0x10) != 0)
      {
        v62 = **(_QWORD **)*v31;
        v63 = *(_QWORD *)(v62 + 152);
        v64 = *(unsigned int *)(v62 + 168);
        if ((_DWORD)v64)
        {
          LODWORD(v65) = (v64 - 1) & ((v31 >> 4) ^ (v31 >> 9));
          v66 = (uint64_t **)(v63 + 16 * v65);
          v67 = *v66;
          if (*v66 != v31)
          {
            v68 = 1;
            do
            {
              if (v67 == (uint64_t *)-4096)
                goto LABEL_158;
              v69 = v65 + v68++;
              v65 = v69 & (v64 - 1);
              v67 = *(uint64_t **)(v63 + 16 * v65);
            }
            while (v67 != v31);
            v66 = (uint64_t **)(v63 + 16 * v65);
          }
        }
        else
        {
LABEL_158:
          v66 = (uint64_t **)(v63 + 16 * v64);
        }
        v113 = (unint64_t *)v66[1];
        v116 = *v113;
        v115 = v113 + 2;
        v114 = v116;
        v300 = (llvm::MDNode *)&v301[16];
        *(_OWORD *)v301 = xmmword_1C6612EE0;
        if (v116 >= 0x11)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v300, &v301[16], v114, 1);
          v117 = *(_QWORD *)v301;
        }
        else
        {
          v117 = 0;
          if (!v114)
            goto LABEL_162;
        }
        memcpy((char *)v300 + v117, v115, v114);
        v117 = *(_QWORD *)v301;
      }
      else
      {
        v114 = 0;
        v117 = 0;
        v300 = (llvm::MDNode *)&v301[16];
        *(_OWORD *)v301 = xmmword_1C6612EE0;
      }
LABEL_162:
      v118 = v117 + v114;
      *(_QWORD *)v301 = v118;
      if (*(_QWORD *)&v301[8] < (unint64_t)(v118 + 4))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v300, &v301[16], v118 + 4, 1);
        v118 = *(_QWORD *)v301;
      }
      *(_DWORD *)((char *)v300 + v118) = 1953260846;
      *(_QWORD *)v301 += 4;
      v119 = *v5;
      v279 = (uint64_t *)*v5;
      if (((*v5)[23] & 0x10) == 0)
      {
        v129 = 0;
        v132 = 0;
        v297 = v299;
        v298 = xmmword_1C6612EE0;
        goto LABEL_175;
      }
      v120 = ***(_QWORD ***)v119;
      v121 = *(_QWORD *)(v120 + 152);
      v122 = *(unsigned int *)(v120 + 168);
      if ((_DWORD)v122)
      {
        LODWORD(v123) = (v122 - 1) & ((v119 >> 4) ^ (v119 >> 9));
        v124 = (unsigned __int8 **)(v121 + 16 * v123);
        v125 = *v124;
        if (*v124 != v119)
        {
          v126 = 1;
          do
          {
            if (v125 == (unsigned __int8 *)-4096)
              goto LABEL_171;
            v127 = v123 + v126++;
            v123 = v127 & (v122 - 1);
            v125 = *(unsigned __int8 **)(v121 + 16 * v123);
          }
          while (v125 != v119);
          v124 = (unsigned __int8 **)(v121 + 16 * v123);
        }
      }
      else
      {
LABEL_171:
        v124 = (unsigned __int8 **)(v121 + 16 * v122);
      }
      v128 = (unint64_t *)v124[1];
      v131 = *v128;
      v130 = v128 + 2;
      v129 = v131;
      v297 = v299;
      v298 = xmmword_1C6612EE0;
      if (v131 >= 0x11)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v297, v299, v129, 1);
        v132 = v298;
      }
      else
      {
        v132 = 0;
        if (!v129)
        {
LABEL_175:
          v133 = v132 + v129;
          *(_QWORD *)&v298 = v133;
          v134 = (const llvm::APInt *)(v133 + 7);
          if (*((_QWORD *)&v298 + 1) < (unint64_t)(v133 + 7))
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v297, v299, (unint64_t)v134, 1);
            v133 = v298;
          }
          v135 = (char *)v297 + v133;
          *(_DWORD *)((char *)v135 + 3) = 1801675120;
          *v135 = 1885696558;
          *(_QWORD *)&v298 = v298 + 7;
          v136 = **v32;
          v137 = *(llvm::ConstantInt **)(v136 + 1984);
          LODWORD(v288) = *(_DWORD *)(v136 + 1992) >> 8;
          if (v288 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v287, 0, 0);
          else
            v287 = 0;
          v278 = llvm::ConstantInt::get(v137, (llvm::LLVMContext *)&v287, v134);
          if (v288 >= 0x41 && v287)
            MEMORY[0x1CAA32F9C](v287, 0x1000C8000313F17);
          if (v282)
          {
            v139 = 0;
            v140 = v61;
            v141 = 0;
            v142 = v140;
            do
            {
              v295 = v278;
              v296 = 0;
              v143 = *(llvm::ConstantInt **)(v136 + 1984);
              v144 = *(_DWORD *)(v136 + 1992);
              LODWORD(v288) = v144 >> 8;
              if (v144 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v287, v139, 0);
              }
              else
              {
                if (v144 <= 0xFF)
                  v145 = 0;
                else
                  v145 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v144);
                v287 = (llvm::MDNode *)(v145 & v139);
              }
              v146 = llvm::ConstantInt::get(v143, (llvm::LLVMContext *)&v287, v138);
              if (v288 >= 0x41 && v287)
                MEMORY[0x1CAA32F9C](v287, 0x1000C8000313F17);
              v296 = v146;
              v147 = *(uint64_t **)(a1 + 24);
              v291 = 261;
              v287 = (llvm::MDNode *)v297;
              v288 = (llvm::MDNode *)v298;
              v148 = sub_1C53901A0(v147, (llvm::GetElementPtrInst *)v32, v279, (llvm::Value *)&v295, 2, (uint64_t)&v287);
              v149 = *(_QWORD *)(a1 + 24);
              LODWORD(v293) = v139;
              v291 = 261;
              v287 = v300;
              v288 = *(llvm::MDNode **)v301;
              v150 = (uint64_t *)sub_1C506DBC4(v149, v31, (unsigned int *)&v293, 1, (uint64_t)&v287);
              v151 = sub_1C509CCE8(*(uint64_t **)(a1 + 24), v150, v148, (63 - __clz((v141 | (1 << (v276 >> 1))) & -(v141 | (1 << (v276 >> 1))))) | 0x100u, 0);
              llvm::Instruction::getAAMetadata((uint64_t ***)v2, &v287);
              if (v287 || *((_QWORD *)v151 + 6) || (*((_BYTE *)v151 + 23) & 0x20) != 0)
                llvm::Value::setMetadata(v151, 1, v287);
              if (v288 || *((_QWORD *)v151 + 6) || (*((_BYTE *)v151 + 23) & 0x20) != 0)
                llvm::Value::setMetadata(v151, 5, v288);
              if (v289 || *((_QWORD *)v151 + 6) || (*((_BYTE *)v151 + 23) & 0x20) != 0)
                llvm::Value::setMetadata(v151, 7, v289);
              v138 = v290;
              if (v290 || *((_QWORD *)v151 + 6) || (*((_BYTE *)v151 + 23) & 0x20) != 0)
                llvm::Value::setMetadata(v151, 8, v290);
              if (v142 == 1)
              v141 += v280;
              ++v139;
            }
            while (v282 != (uint64_t *)v139);
          }
          if (v297 != v299)
            free(v297);
          v112 = v300;
          goto LABEL_215;
        }
      }
      memcpy((char *)v297 + v132, v130, v129);
      v132 = v298;
      goto LABEL_175;
    }
  }
LABEL_66:
  v47 = *v5;
  v48 = (*v5)[16];
  v49 = v48 - 28;
  v51 = v48 < 0x1C && v48 != 5;
  if (v47 && !v51)
  {
    if (v48 <= 0x1B)
      v49 = *((unsigned __int16 *)v47 + 9);
    if (v49 == 49)
    {
      v292 = 0;
      v52 = *(_QWORD *)(v2 - 64);
      v300 = (llvm::MDNode *)&v292;
      if (*(_BYTE *)(v52 + 16) == 60)
      {
        v53 = *(_DWORD *)(v52 + 20);
        v54 = (v53 & 0x40000000) != 0 ? *(uint64_t **)(v52 - 8) : (uint64_t *)(v52 - 32 * (v53 & 0x7FFFFFF));
        if (sub_1C57E819C((_QWORD **)&v300, *v54))
        {
          v55 = *(uint64_t **)(v2 - 64);
          if (*(_BYTE *)(*v55 + 8) == 13)
          {
            v56 = v292;
            v57 = *(unsigned __int8 *)(v292 + 16);
            if (v292 && v57 == 77)
            {
              v56 = *(_QWORD *)(v292 - 32);
              v57 = *(unsigned __int8 *)(v56 + 16);
            }
            v294 = 0;
            v297 = 0;
            v287 = 0;
            v295 = 0;
            v293 = 0;
            v300 = (llvm::MDNode *)&v294;
            *(_QWORD *)v301 = &v297;
            *(_QWORD *)&v301[8] = &v287;
            *(_QWORD *)&v301[16] = &v295;
            *(_QWORD *)&v302 = &v293;
            if (v57 == 85)
            {
              v58 = *(_DWORD *)(v56 + 20);
              v59 = (v58 & 0x40000000) != 0 ? *(uint64_t **)(v56 - 8) : (uint64_t *)(v56 - 32 * (v58 & 0x7FFFFFF));
              if (sub_1C581FA54((uint64_t)&v300, *v59))
              {
                v70 = *(_DWORD *)(v56 + 20);
                v71 = (v70 & 0x40000000) != 0 ? *(_QWORD *)(v56 - 8) : v56 - 32 * (v70 & 0x7FFFFFF);
                v153 = *(_QWORD *)(v71 + 32);
                if (v153)
                {
                  **(_QWORD **)&v301[16] = v153;
                  v154 = *(_DWORD *)(v56 + 20);
                  v155 = (v154 & 0x40000000) != 0 ? *(_QWORD *)(v56 - 8) : v56 - 32 * (v154 & 0x7FFFFFF);
                  v156 = *(_QWORD *)(v155 + 64);
                  if (v156)
                  {
                    *(_QWORD *)v302 = v156;
                    if (*((_BYTE *)v297 + 16) == 60)
                    {
                      v157 = *((_DWORD *)v297 + 5);
                      v158 = (v157 & 0x40000000) != 0
                           ? (char *)*((_QWORD *)v297 - 1)
                           : (char *)v297 - 32 * (v157 & 0x7FFFFFF);
                      if ((v163 = *(llvm::PointerType **)v297, v295 == *(llvm::ValueHandleBase **)v158)
                        && *((_BYTE *)v287 + 16) == 60
                        && ((v164 = *((_DWORD *)v287 + 5), (v164 & 0x40000000) != 0)
                          ? (v165 = (_QWORD *)*((_QWORD *)v287 - 1))
                          : (v165 = (_QWORD *)((char *)v287 - 32 * (v164 & 0x7FFFFFF))),
                            v293 == *v165)
                        || ((v157 & 0x40000000) != 0
                          ? (v166 = (_QWORD *)*((_QWORD *)v297 - 1))
                          : (v166 = (char *)v297 - 32 * (v157 & 0x7FFFFFF)),
                            v293 == *v166
                         && *((_BYTE *)v287 + 16) == 60
                         && ((v167 = *((_DWORD *)v287 + 5), (v167 & 0x40000000) != 0)
                           ? (v168 = (llvm::ValueHandleBase **)*((_QWORD *)v287 - 1))
                           : (v168 = (llvm::ValueHandleBase **)((char *)v287 - 32 * (v167 & 0x7FFFFFF))),
                             v295 == *v168)))
                      {
                        if ((llvm::PointerType *)*v55 != v163)
                        {
                          v169 = *(_QWORD *)(a1 + 80);
                          sub_1C4768AD0(v169, *v55);
                          v171 = v170 + 7;
                          v285 = v172 == 1;
                          sub_1C4768AD0(v169, (uint64_t)v163);
                          if (((v174 + 7) ^ v171) <= 7 && ((v285 ^ (v173 == 1)) & 1) == 0)
                          {
                            v175 = v55[1];
                            if (!v175)
                            {
LABEL_276:
                              v180 = *(_QWORD *)(a1 + 24);
                              *(_QWORD *)(v180 + 48) = v55[5];
                              *(_QWORD *)(v180 + 56) = v55 + 3;
                              v181 = (llvm::MDNode *)v55[6];
                              v300 = v181;
                              if (v181)
                              {
                                llvm::MetadataTracking::track((uint64_t)&v300, (unsigned __int8 *)v181, 2);
                                v182 = v300;
                              }
                              else
                              {
                                v182 = 0;
                              }
                              sub_1C4774EF4(v180, 0, (uint64_t)v182);
                              if (v300)
                                llvm::MetadataTracking::untrack((uint64_t)&v300, (unsigned __int8 *)v300);
                              LOWORD(v302) = 257;
                              v183 = sub_1C581BC08(a1, (llvm::LoadInst *)v55, v163, (uint64_t *)&v300);
                              v185 = v55[1];
                              if (v185)
                              {
                                v186 = (llvm::PointerType **)v183;
                                do
                                {
                                  v187 = *(_QWORD *)(v185 + 24);
                                  v188 = *(_QWORD *)(a1 + 24);
                                  *(_QWORD *)(v188 + 48) = *(_QWORD *)(v187 + 40);
                                  *(_QWORD *)(v188 + 56) = v187 + 24;
                                  v189 = *(llvm::MDNode **)(v187 + 48);
                                  v300 = v189;
                                  if (v189)
                                  {
                                    llvm::MetadataTracking::track((uint64_t)&v300, (unsigned __int8 *)v189, 2);
                                    v190 = v300;
                                  }
                                  else
                                  {
                                    v190 = 0;
                                  }
                                  sub_1C4774EF4(v188, 0, (uint64_t)v190);
                                  if (v300)
                                    llvm::MetadataTracking::untrack((uint64_t)&v300, (unsigned __int8 *)v300);
                                  sub_1C581F81C(a1, v187, v186);
                                  v185 = *(_QWORD *)(v185 + 8);
                                }
                                while (v185);
                              }
                              v275 = (llvm::Value *)llvm::PoisonValue::get((llvm::PoisonValue *)*v55, v184);
                              sub_1C577F888(a1, (llvm::ValueAsMetadata *)v55, v275);
                              sub_1C57813F4(a1, (uint64_t)v55);
                              return sub_1C57813F4(a1, v2);
                            }
                            v176 = (uint64_t *)v292;
                            while (1)
                            {
                              v177 = *(_QWORD *)(v175 + 24);
                              if (!v177)
                                break;
                              if (*(_BYTE *)(v177 + 16) != 61)
                                break;
                              v178 = *(uint64_t **)(v177 - 32);
                              if (v178 == v55)
                                break;
                              v179 = *(uint64_t **)(v177 - 32);
                              if (v178)
                              {
                                v179 = v178;
                                if (*((_BYTE *)v178 + 16) == 77)
                                  v179 = (uint64_t *)*(v178 - 4);
                              }
                              if (v179 == v176 || llvm::Value::isSwiftError((llvm::Value *)v178))
                                break;
                              v175 = *(_QWORD *)(v175 + 8);
                              if (!v175)
                                goto LABEL_276;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (!v4
    || *(_BYTE *)(v4 + 16) != 62
    || (LODWORD(v300) = 0, !sub_1C581FAD0((_QWORD *)a1, v4, (llvm::Value *)v2, (unsigned int *)&v300)))
  {
    if ((*(_WORD *)(v2 + 18) & 0x301) != 0)
      return 0;
    v220 = *(_QWORD *)(v4 + 8);
    if (v220)
    {
      if (!*(_QWORD *)(v220 + 8))
      {
        v245 = *(unsigned __int8 *)(v4 + 16);
        if (v245 == 59)
          return sub_1C57813F4(a1, v2);
        if (v4)
        {
          if (v245 == 62)
          {
            v246 = *(_QWORD *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF));
            if (*(_BYTE *)(v246 + 16) == 59)
            {
              v247 = *(_QWORD *)(v246 + 8);
              if (v247)
              {
                if (!*(_QWORD *)(v247 + 8))
                  return sub_1C57813F4(a1, v2);
              }
            }
          }
        }
      }
    }
    v221 = *(_QWORD *)(a1 + 48);
    v300 = (llvm::MDNode *)v4;
    *(_QWORD *)v301 = -1;
    *(_OWORD *)&v301[8] = 0u;
    v302 = 0u;
    if (llvm::AAResults::pointsToConstantMemory(v221, (uint64_t)&v300, 0))
      return sub_1C57813F4(a1, v2);
    v223 = (_QWORD *)(v2 + 24);
    if (v2 + 24 == *(_QWORD *)(*(_QWORD *)(v2 + 40) + 48))
      goto LABEL_414;
    v224 = 6;
    v286 = (v2 >> 4) ^ (v2 >> 9);
    while (1)
    {
      v223 = (_QWORD *)*v223;
      v225 = v223 ? (llvm::Instruction *)(v223 - 3) : 0;
      if (sub_1C4D99D08((uint64_t)v225) || sub_1C509DDB0((uint64_t)v225))
        break;
      v227 = *((unsigned __int8 *)v225 + 16);
      if (v227 == 77)
      {
        if (*(_BYTE *)(*(_QWORD *)v225 + 8) == 15)
          break;
      }
      else
      {
        if (v223 && v227 == 61)
        {
          if ((*((_WORD *)v225 + 9) & 0x301) == 0
            && sub_1C4E9A3CC(*((unsigned __int8 **)v225 - 4), *v5)
            && **((_QWORD **)v225 - 8) == **(_QWORD **)(v2 - 64))
          {
            v250 = *(_QWORD *)(a1 + 32);
            v251 = *(_DWORD *)(v250 + 8);
            v300 = (llvm::MDNode *)v2;
            *(_DWORD *)v301 = v251;
            v252 = *(_DWORD *)(v250 + 2080);
            if (v252)
            {
              v253 = *(_QWORD *)(v250 + 2064);
              v254 = v252 - 1;
              v255 = v254 & v286;
              v256 = (_QWORD *)(v253 + 16 * (v254 & v286));
              v257 = *v256;
              if (*v256 != v2)
              {
                v258 = 0;
                v259 = 1;
                while (v257 != -4096)
                {
                  if (v258)
                    v260 = 0;
                  else
                    v260 = v257 == -8192;
                  if (v260)
                    v258 = v256;
                  v261 = v255 + v259++;
                  v255 = v261 & v254;
                  v256 = (_QWORD *)(v253 + 16 * v255);
                  v257 = *v256;
                  if (*v256 == v2)
                    goto LABEL_441;
                }
                if (v258)
                  v272 = v258;
                else
                  v272 = v256;
LABEL_438:
                v273 = sub_1C4D8D8F4((_DWORD *)(v250 + 2064), (uint64_t)&v300, (uint64_t *)&v300, v272);
                *v273 = v300;
                *((_DWORD *)v273 + 2) = *(_DWORD *)v301;
                v274 = *(unsigned int *)(v250 + 8);
                if (v274 >= *(_DWORD *)(v250 + 12))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v250, v250 + 16, v274 + 1, 8);
                  LODWORD(v274) = *(_DWORD *)(v250 + 8);
                }
                *(_QWORD *)(*(_QWORD *)v250 + 8 * v274) = v2;
                ++*(_DWORD *)(v250 + 8);
              }
LABEL_441:
              sub_1C57813F4(a1, (uint64_t)v225);
              return 0;
            }
            v272 = 0;
            goto LABEL_438;
          }
          goto LABEL_414;
        }
        if (v223 && v227 == 60)
        {
          if (v225 == (llvm::Instruction *)v6 && sub_1C4E9A3CC(*(unsigned __int8 **)(v6 - 32), (unsigned __int8 *)v4))
            return sub_1C57813F4(a1, v2);
LABEL_414:
          v262 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 56);
          v263 = *(uint64_t **)(v2 - 32);
          v264 = *v263;
          v265 = *(_DWORD *)(*v263 + 8);
          v266 = v265;
          if ((v265 & 0xFE) == 0x12)
            v266 = *(_DWORD *)(**(_QWORD **)(v264 + 16) + 8);
          if ((!v262 || (v267 = *(_QWORD *)(v262 + 112)) == 0 || (*(_BYTE *)(v267 + 17) & 1) == 0) && v266 <= 0xFF)
          {
            v268 = *((unsigned __int8 *)v263 + 16);
            if (v268 == 62)
              v268 = *(unsigned __int8 *)(v263[-4 * (*((_DWORD *)v263 + 5) & 0x7FFFFFF)] + 16);
            if (v268 == 19)
            {
              if ((v265 & 0xFE) == 0x12)
                v265 = *(_DWORD *)(**(_QWORD **)(v264 + 16) + 8);
              if ((!v262 || (v269 = *(_QWORD *)(v262 + 112)) == 0 || (*(_BYTE *)(v269 + 17) & 1) == 0) && v265 <= 0xFF)
              {
                if (*(_BYTE *)(v6 + 16) != 12)
                {
                  v270 = llvm::PoisonValue::get(*(llvm::PoisonValue **)v6, v222);
                  return sub_1C577E2C8(a1, v2, 0, (uint64_t)v270);
                }
                return 0;
              }
            }
          }
          if (*(unsigned __int8 *)(v6 + 16) - 11 > 1)
            return 0;
          return sub_1C57813F4(a1, v2);
        }
        v228 = (v227 - 33);
        if (v228 <= 0x37)
        {
          if (((1 << v228) & 0x8000000000041) != 0)
          {
            v229 = *((_QWORD *)v225 + 8);
            if (!v229 || (*(_BYTE *)(v229 + 17) & 0x30) == 0)
            {
              v230 = *((_DWORD *)v225 + 5);
              if (v230 < 0)
              {
                v233 = (char *)v225 - 32 * (v230 & 0x7FFFFFF);
                v236 = *((_QWORD *)v233 - 1);
                v234 = v233 - 8;
                v235 = v236;
                if (v236)
                {
                  v237 = -v235;
                  do
                  {
                    v238 = *(_DWORD *)(*(_QWORD *)&v234[v237] + 8);
                    v162 = v238 > 7;
                    v239 = (1 << v238) & 0x83;
                    if (v162 || v239 == 0)
                      goto LABEL_414;
                    v237 += 16;
                  }
                  while (v237);
                }
              }
              if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v225, 45) & 1) == 0
                && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v225, 44))
              {
                goto LABEL_414;
              }
            }
          }
          else if (((1 << v228) & 0x808001D0000010) != 0 || v228 == 27 && (*((_WORD *)v225 + 9) & 0x301) != 0)
          {
            goto LABEL_414;
          }
        }
      }
      v231 = *((unsigned __int8 *)v225 + 16) - 33;
      if (v231 <= 0x37)
      {
        if (((1 << (*((_BYTE *)v225 + 16) - 33)) & 0x8000000000041) != 0)
        {
          v232 = *((_QWORD *)v225 + 8);
          if (!v232 || (*(_BYTE *)(v232 + 20) & 4) == 0 && (*(_BYTE *)(v232 + 17) & 0x10) == 0)
          {
            LODWORD(v300) = 7;
            if (sub_1C53E4BBC((uint64_t)v225, (__int32 *)&v300, 1uLL))
            {
              v241 = *((_QWORD *)v225 - 4);
              if (!v241
                || *(_BYTE *)(v241 + 16)
                || *(_QWORD *)(v241 + 24) != *((_QWORD *)v225 + 9)
                || *(_DWORD *)(v241 + 36) != 7)
              {
                goto LABEL_414;
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v225, 66) & 1) == 0
              && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v225, 44))
            {
              goto LABEL_414;
            }
          }
        }
        else if (((1 << (*((_BYTE *)v225 + 16) - 33)) & 0x808001C8000010) != 0
               || v231 == 28 && (*((_WORD *)v225 + 9) & 0x301) != 0)
        {
          goto LABEL_414;
        }
      }
      if ((llvm::Instruction::mayThrow(v225) & 1) != 0)
        goto LABEL_414;
LABEL_331:
      --v224;
      if (v223 == *(_QWORD **)(*(_QWORD *)(v2 + 40) + 48) || v224 == 0)
        goto LABEL_414;
    }
    ++v224;
    goto LABEL_331;
  }
  llvm::Instruction::clone((llvm::Instruction *)v4);
  v192 = v191;
  v193 = v300;
  v194 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF) + 32 * v300), 0, 0);
  v195 = *(_DWORD *)(v192 + 20);
  if ((v195 & 0x40000000) != 0)
    v196 = *(_QWORD *)(v192 - 8);
  else
    v196 = v192 - 32 * (v195 & 0x7FFFFFF);
  v197 = v196 + 32 * v193;
  if (*(_QWORD *)v197)
  {
    **(_QWORD **)(v197 + 16) = *(_QWORD *)(v197 + 8);
    v198 = *(_QWORD *)(v197 + 8);
    if (v198)
      *(_QWORD *)(v198 + 16) = *(_QWORD *)(v197 + 16);
  }
  *(_QWORD *)v197 = v194;
  if (v194)
  {
    v201 = v194[1];
    v199 = v194 + 1;
    v200 = v201;
    v202 = v196 + 32 * v193;
    *(_QWORD *)(v202 + 8) = v201;
    if (v201)
      *((_QWORD *)v200 + 2) = v202 + 8;
    *(_QWORD *)(v202 + 16) = v199;
    *v199 = v197;
  }
  v203 = *(_QWORD *)(v4 + 40);
  *(_QWORD *)(v192 + 40) = v203;
  *(_WORD *)(v203 + 18) &= ~0x8000u;
  if ((*(_BYTE *)(v192 + 23) & 0x10) != 0)
  {
    v248 = *(_QWORD *)(v203 + 56);
    if (v248)
    {
      v249 = *(llvm::ValueSymbolTable **)(v248 + 104);
      if (v249)
        llvm::ValueSymbolTable::reinsertValue(v249, (llvm::Value *)v192);
    }
  }
  v205 = *(_QWORD *)(v4 + 24);
  v204 = (_QWORD *)(v4 + 24);
  *(_QWORD *)(v192 + 24) = v205;
  *(_QWORD *)(v192 + 32) = v204;
  *(_QWORD *)(v205 + 8) = v192 + 24;
  *v204 = v192 + 24;
  if (*v5)
  {
    **(_QWORD **)(v2 - 16) = *(_QWORD *)(v2 - 24);
    v206 = *(_QWORD *)(v2 - 24);
    if (v206)
      *(_QWORD *)(v206 + 16) = *(_QWORD *)(v2 - 16);
  }
  *(_QWORD *)(v2 - 32) = v192;
  v207 = *(_QWORD *)(v192 + 8);
  *(_QWORD *)(v2 - 24) = v207;
  if (v207)
    *(_QWORD *)(v207 + 16) = v2 - 24;
  *(_QWORD *)(v2 - 16) = v192 + 8;
  *(_QWORD *)(v192 + 8) = v5;
  v208 = *(_QWORD *)(a1 + 32);
  v209 = *(_DWORD *)(v208 + 8);
  v300 = (llvm::MDNode *)v192;
  *(_DWORD *)v301 = v209;
  v210 = *(_DWORD *)(v208 + 2080);
  if (v210)
  {
    v211 = *(_QWORD *)(v208 + 2064);
    v212 = v210 - 1;
    v213 = v212 & ((v192 >> 4) ^ (v192 >> 9));
    v214 = (_QWORD *)(v211 + 16 * v213);
    v215 = *v214;
    if (*v214 == v192)
      return v2;
    v216 = 0;
    v217 = 1;
    while (v215 != -4096)
    {
      if (v216)
        v218 = 0;
      else
        v218 = v215 == -8192;
      if (v218)
        v216 = v214;
      v219 = v213 + v217++;
      v213 = v219 & v212;
      v214 = (_QWORD *)(v211 + 16 * v213);
      v215 = *v214;
      if (*v214 == v192)
        return v2;
    }
    if (v216)
      v242 = v216;
    else
      v242 = v214;
  }
  else
  {
    v242 = 0;
  }
  v243 = sub_1C4D8D8F4((_DWORD *)(v208 + 2064), (uint64_t)&v300, (uint64_t *)&v300, v242);
  *v243 = v300;
  *((_DWORD *)v243 + 2) = *(_DWORD *)v301;
  v244 = *(unsigned int *)(v208 + 8);
  if (v244 >= *(_DWORD *)(v208 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v208, v208 + 16, v244 + 1, 8);
    LODWORD(v244) = *(_DWORD *)(v208 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v208 + 8 * v244) = v192;
  ++*(_DWORD *)(v208 + 8);
  return v2;
}

uint64_t sub_1C581EE20(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  llvm::BasicBlock *v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  llvm::Instruction *v8;
  llvm::BasicBlock *Successor;
  int hasNPredecessors;
  uint64_t i;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  unsigned __int8 *v29;
  int v30;
  const llvm::DILocation *v31;
  char isSameOperationAs;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  const llvm::Instruction *v64;
  char v65;
  llvm::Value *v66;
  unsigned __int8 *MergedLocation;
  uint64_t v68;
  _QWORD *v69;
  llvm::PHINode *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 *v76;
  unsigned __int8 **v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  _QWORD *v80;
  _QWORD *j;
  _QWORD *v82;
  unsigned int v83;
  uint64_t v84;
  char *v86;
  llvm::Value *v87;
  uint64_t v88;
  unsigned __int8 *v89;
  unsigned __int8 **v90;
  unsigned __int8 *v91;
  llvm::MDNode *v92[4];
  llvm::MDNode *v93;
  llvm::MDNode *v94;
  llvm::MDNode *v95;
  llvm::MDNode *v96;
  unsigned __int8 *v97;
  unsigned __int8 *v98;
  int64x2_t v99[2];
  __int16 v100;
  unsigned __int8 *v101;

  if ((*(_WORD *)(a2 + 18) & 0x301) != 0)
    return 0;
  v5 = *(llvm::BasicBlock **)(a2 + 40);
  v6 = (_QWORD *)*((_QWORD *)v5 + 5);
  if (v6 == (_QWORD *)((char *)v5 + 40))
  {
    v8 = 0;
  }
  else
  {
    if (v6)
      v7 = (unsigned __int8 *)(v6 - 3);
    else
      v7 = 0;
    if (v7[16] - 29 >= 0xB)
      v8 = 0;
    else
      v8 = (llvm::Instruction *)v7;
  }
  Successor = (llvm::BasicBlock *)llvm::Instruction::getSuccessor(v8, 0);
  hasNPredecessors = llvm::BasicBlock::hasNPredecessors(Successor, 2);
  result = 0;
  if (!hasNPredecessors)
    return result;
  for (i = *((_QWORD *)Successor + 1); i; i = *(_QWORD *)(i + 8))
  {
    v12 = *(_QWORD *)(i + 24);
    v13 = *(unsigned __int8 *)(v12 + 16);
    if (v12)
      v14 = v13 >= 0x1C;
    else
      v14 = 0;
    if (v14 && v13 - 29 < 0xB)
      break;
  }
  v16 = *(_QWORD *)(*(_QWORD *)(i + 24) + 40);
  if ((llvm::BasicBlock *)v16 == v5)
  {
    do
    {
      i = *(_QWORD *)(i + 8);
      v17 = *(_QWORD *)(i + 24);
      v18 = *(unsigned __int8 *)(v17 + 16);
      if (v17)
        v19 = v18 >= 0x1C;
      else
        v19 = 0;
      v20 = !v19 || v18 - 29 > 0xA;
    }
    while (v20);
    v16 = *(_QWORD *)(v17 + 40);
  }
  result = 0;
  if (v5 == Successor || (llvm::BasicBlock *)v16 == Successor)
    return result;
  v21 = *(_QWORD *)(v16 + 40);
  if (v21 == v16 + 40)
  {
    v23 = 0;
  }
  else
  {
    if (v21)
      v22 = v21 - 24;
    else
      v22 = 0;
    if (*(unsigned __int8 *)(v22 + 16) - 29 >= 0xB)
      v23 = 0;
    else
      v23 = v22;
  }
  result = 0;
  v24 = (_QWORD *)(v23 + 24);
  if (v23)
    v25 = (_QWORD *)(v23 + 24);
  else
    v25 = 0;
  v26 = (uint64_t)(v25 - 3);
  if (v23)
    v27 = v25 - 3;
  else
    v27 = 0;
  v28 = *((unsigned __int8 *)v27 + 16);
  if (v28 != 30)
    v27 = 0;
  if (!v23 || v28 != 30)
    return result;
  if (v25 == *(_QWORD **)(v16 + 48))
    return 0;
  if ((*((_DWORD *)v27 + 5) & 0x7FFFFFF) != 1)
  {
    if ((llvm::BasicBlock *)*(v27 - 4) != v5 && (llvm::BasicBlock *)*(v27 - 8) != v5)
      return 0;
    if (*((_BYTE *)v25 - 8) != 61)
    {
      do
      {
        v49 = *(unsigned __int8 *)(v26 + 16) - 33;
        if (v49 <= 0x37)
        {
          if (((1 << (*(_BYTE *)(v26 + 16) - 33)) & 0x8000000000041) != 0)
          {
            v50 = *(_QWORD *)(v26 + 64);
            if (!v50 || (*(_BYTE *)(v50 + 20) & 4) == 0 && (*(_BYTE *)(v50 + 17) & 0x10) == 0)
            {
              v99[0].i32[0] = 7;
              if (sub_1C53E4BBC(v26, v99[0].i32, 1uLL))
              {
                v55 = *(_QWORD *)(v26 - 32);
                if (!v55
                  || *(_BYTE *)(v55 + 16)
                  || *(_QWORD *)(v55 + 24) != *(_QWORD *)(v26 + 72)
                  || *(_DWORD *)(v55 + 36) != 7)
                {
                  return 0;
                }
              }
              if ((llvm::CallBase::hasFnAttrOnCalledFunction(v26, 66) & 1) == 0)
              {
                result = llvm::CallBase::hasFnAttrOnCalledFunction(v26, 44);
                if (!(_DWORD)result)
                  return result;
              }
            }
          }
          else if (((1 << (*(_BYTE *)(v26 + 16) - 33)) & 0x808001C8000010) != 0
                 || v49 == 28 && (*(_WORD *)(v26 + 18) & 0x301) != 0)
          {
            return 0;
          }
        }
        if ((llvm::Instruction::mayThrow((llvm::Instruction *)v26) & 1) != 0)
          return 0;
        v51 = *(unsigned __int8 *)(v26 + 16) - 33;
        if (v51 <= 0x37)
        {
          if (((1 << (*(_BYTE *)(v26 + 16) - 33)) & 0x8000000000041) != 0)
          {
            v53 = *(_QWORD *)(v26 + 64);
            if (!v53 || (*(_BYTE *)(v53 + 17) & 0x30) == 0)
            {
              v54 = *(_DWORD *)(v26 + 20);
              if (v54 < 0)
              {
                v56 = v26 - 32 * (v54 & 0x7FFFFFF);
                v59 = *(_QWORD *)(v56 - 8);
                v57 = v56 - 8;
                v58 = v59;
                if (v59)
                {
                  v60 = -v58;
                  do
                  {
                    v61 = *(_DWORD *)(*(_QWORD *)(v57 + v60) + 8);
                    v20 = v61 > 7;
                    v62 = (1 << v61) & 0x83;
                    if (v20 || v62 == 0)
                      return 0;
                    v60 += 16;
                  }
                  while (v60);
                }
              }
              if ((llvm::CallBase::hasFnAttrOnCalledFunction(v26, 45) & 1) == 0)
              {
                result = llvm::CallBase::hasFnAttrOnCalledFunction(v26, 44);
                if (!(_DWORD)result)
                  return result;
              }
            }
          }
          else if (v51 == 27)
          {
            if ((*(_WORD *)(v26 + 18) & 0x301) != 0)
              return 0;
          }
          else if (((1 << (*(_BYTE *)(v26 + 16) - 33)) & 0x808001D0000010) != 0)
          {
            return 0;
          }
        }
        if (v24 == *(_QWORD **)(v16 + 48))
          return 0;
        v24 = (_QWORD *)*v24;
        v26 = (uint64_t)(v24 - 3);
        if (v24)
          v52 = v24 - 3;
        else
          v52 = 0;
      }
      while (!v24 || *((_BYTE *)v52 + 16) != 61);
    }
    if (*(_QWORD *)(v26 - 32) != *(_QWORD *)(a2 - 32))
      return 0;
    isSameOperationAs = llvm::Instruction::isSameOperationAs((llvm::Instruction *)a2, (const llvm::Instruction *)v26, 0);
    result = 0;
    if ((isSameOperationAs & 1) == 0)
      return result;
    v33 = *((_QWORD *)v5 + 6);
    if (v33)
      v34 = v33 - 24;
    else
      v34 = 0;
    if (v34 == a2)
      goto LABEL_166;
    while (1)
    {
      v35 = *(unsigned __int8 *)(v34 + 16) - 33;
      if (v35 <= 0x37)
      {
        if (((1 << (*(_BYTE *)(v34 + 16) - 33)) & 0x8000000000041) != 0)
        {
          v36 = *(_QWORD *)(v34 + 64);
          if (!v36 || (*(_BYTE *)(v36 + 20) & 4) == 0 && (*(_BYTE *)(v36 + 17) & 0x10) == 0)
          {
            v99[0].i32[0] = 7;
            if (sub_1C53E4BBC(v34, v99[0].i32, 1uLL))
            {
              v40 = *(_QWORD *)(v34 - 32);
              if (!v40
                || *(_BYTE *)(v40 + 16)
                || *(_QWORD *)(v40 + 24) != *(_QWORD *)(v34 + 72)
                || *(_DWORD *)(v40 + 36) != 7)
              {
                return 0;
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v34, 66) & 1) == 0)
            {
              result = llvm::CallBase::hasFnAttrOnCalledFunction(v34, 44);
              if (!(_DWORD)result)
                return result;
            }
          }
        }
        else if (((1 << (*(_BYTE *)(v34 + 16) - 33)) & 0x808001C8000010) != 0
               || v35 == 28 && (*(_WORD *)(v34 + 18) & 0x301) != 0)
        {
          return 0;
        }
      }
      if ((llvm::Instruction::mayThrow((llvm::Instruction *)v34) & 1) != 0)
        return 0;
      v37 = *(unsigned __int8 *)(v34 + 16) - 33;
      if (v37 <= 0x37)
      {
        if (((1 << (*(_BYTE *)(v34 + 16) - 33)) & 0x8000000000041) != 0)
        {
          v38 = *(_QWORD *)(v34 + 64);
          if (!v38 || (*(_BYTE *)(v38 + 17) & 0x30) == 0)
          {
            v39 = *(_DWORD *)(v34 + 20);
            if (v39 < 0)
            {
              v41 = v34 - 32 * (v39 & 0x7FFFFFF);
              v44 = *(_QWORD *)(v41 - 8);
              v42 = v41 - 8;
              v43 = v44;
              if (v44)
              {
                v45 = -v43;
                do
                {
                  v46 = *(_DWORD *)(*(_QWORD *)(v42 + v45) + 8);
                  v20 = v46 > 7;
                  v47 = (1 << v46) & 0x83;
                  if (v20 || v47 == 0)
                    return 0;
                  v45 += 16;
                }
                while (v45);
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v34, 45) & 1) == 0
              && (llvm::CallBase::hasFnAttrOnCalledFunction(v34, 44) & 1) == 0)
            {
              return 0;
            }
          }
        }
        else if (v37 == 27)
        {
          if ((*(_WORD *)(v34 + 18) & 0x301) != 0)
            return 0;
        }
        else if (((1 << (*(_BYTE *)(v34 + 16) - 33)) & 0x808001D0000010) != 0)
        {
          return 0;
        }
      }
      v33 = *(_QWORD *)(v33 + 8);
      if (v33)
        v34 = v33 - 24;
      else
        v34 = 0;
      if (v34 == a2)
        goto LABEL_166;
    }
  }
  while (1)
  {
    v25 = (_QWORD *)*v25;
    v26 = (uint64_t)(v25 - 3);
    v29 = v25 ? (unsigned __int8 *)(v25 - 3) : 0;
    if (!sub_1C4D99D08((uint64_t)v29) && !sub_1C509DDB0((uint64_t)v29))
      break;
LABEL_60:
    result = 0;
    if (v25 == *(_QWORD **)(v16 + 48))
      return result;
  }
  v30 = v29[16];
  if (v30 == 77)
  {
    if (*(_BYTE *)(*(_QWORD *)v29 + 8) != 15)
      return 0;
    goto LABEL_60;
  }
  result = 0;
  if (v30 == 61)
    v64 = (const llvm::Instruction *)v29;
  else
    v64 = 0;
  if (!v25 || v30 != 61)
    return result;
  if (*((_QWORD *)v64 - 4) != *(_QWORD *)(a2 - 32))
    return 0;
  v65 = llvm::Instruction::isSameOperationAs((llvm::Instruction *)a2, v64, 0);
  result = 0;
  if ((v65 & 1) != 0)
  {
LABEL_166:
    v66 = *(llvm::Value **)(v26 - 64);
    MergedLocation = (unsigned __int8 *)llvm::DILocation::getMergedLocation(*(llvm::DILocation **)(a2 + 48), *(const llvm::DILocation **)(v26 + 48), v31);
    v101 = MergedLocation;
    if (MergedLocation)
      llvm::MetadataTracking::track((uint64_t)&v101, MergedLocation, 2);
    if (v66 != *(llvm::Value **)(a2 - 64))
    {
      v68 = *(_QWORD *)v66;
      v99[0].i64[0] = (uint64_t)"storemerge";
      v100 = 259;
      v69 = operator new(0x48uLL);
      v69[1] = v68;
      v70 = (llvm::PHINode *)(v69 + 1);
      *v69 = 0;
      v69[2] = 0;
      v69[3] = 0x4000000000000053;
      *((_OWORD *)v69 + 2) = 0u;
      *((_OWORD *)v69 + 3) = 0u;
      v69[8] = 0x200000000;
      llvm::Value::setName((uint64_t ***)v69 + 1, (uint64_t)v99);
      v71 = *((unsigned int *)v69 + 17);
      v72 = operator new(40 * v71);
      *v69 = v72;
      if ((_DWORD)v71)
      {
        v73 = &v72[4 * v71];
        do
        {
          *v72 = 0;
          v72[1] = 0;
          v72[2] = 0;
          v72[3] = v70;
          v72 += 4;
        }
        while (v72 != v73);
      }
      sub_1C477667C(v70, *(_QWORD *)(a2 - 64), *(_QWORD *)(a2 + 40));
      sub_1C477667C(v70, *(_QWORD *)(v26 - 64), v16);
      v74 = *((_QWORD *)Successor + 6);
      if (v74)
        v75 = v74 - 24;
      else
        v75 = 0;
      v66 = sub_1C57D7818(a1, v70, v75);
      v98 = v101;
      if (v101)
        llvm::MetadataTracking::track((uint64_t)&v98, v101, 2);
      v78 = (unsigned __int8 *)v69[7];
      v77 = (unsigned __int8 **)(v69 + 7);
      v76 = v78;
      if (v78)
        llvm::MetadataTracking::untrack((uint64_t)v77, v76);
      v79 = v98;
      *v77 = v98;
      if (v79)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v98, v79, (uint64_t)v77);
        v98 = 0;
      }
    }
    v80 = (_QWORD *)((char *)Successor + 40);
    for (j = (_QWORD *)*((_QWORD *)Successor + 6); j != v80; j = (_QWORD *)j[1])
    {
      v82 = j - 3;
      if (!j)
        v82 = 0;
      if (*((_BYTE *)v82 + 16) != 83)
      {
        v83 = *((unsigned __int8 *)j - 8) - 38;
        v20 = v83 > 0x38;
        v84 = (1 << v83) & 0x100060000000001;
        if (v20 || v84 == 0)
          v80 = j;
        else
          v80 = (_QWORD *)j[1];
        break;
      }
    }
    v86 = (char *)operator new(0x80uLL);
    *((_DWORD *)v86 + 21) = *((_DWORD *)v86 + 21) & 0x38000000 | 2;
    v87 = (llvm::Value *)(v86 + 64);
    *(_QWORD *)v86 = 0;
    *((_QWORD *)v86 + 1) = 0;
    *((_QWORD *)v86 + 2) = 0;
    *((_QWORD *)v86 + 3) = v86 + 64;
    *((_QWORD *)v86 + 4) = 0;
    *((_QWORD *)v86 + 5) = 0;
    *((_QWORD *)v86 + 6) = 0;
    *((_QWORD *)v86 + 7) = v86 + 64;
    llvm::StoreInst::StoreInst((uint64_t)(v86 + 64), (uint64_t)v66, *(_QWORD *)(a2 - 32), *(_WORD *)(a2 + 18) & 1, ((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1) & 0x3F, (*(_WORD *)(a2 + 18) >> 7) & 7, *(_BYTE *)(a2 + 60), 0);
    if (v80)
      v88 = (uint64_t)(v80 - 3);
    else
      v88 = 0;
    sub_1C57D7818(a1, v87, v88);
    v97 = v101;
    if (v101)
      llvm::MetadataTracking::track((uint64_t)&v97, v101, 2);
    v90 = (unsigned __int8 **)(v86 + 112);
    v89 = (unsigned __int8 *)*((_QWORD *)v86 + 14);
    if (v89)
      llvm::MetadataTracking::untrack((uint64_t)(v86 + 112), v89);
    v91 = v97;
    *v90 = v97;
    if (v91)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v97, v91, (uint64_t)(v86 + 112));
      v97 = 0;
    }
    llvm::Instruction::getAAMetadata((uint64_t ***)a2, v99);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v99[0]), (int32x4_t)vceqzq_s64(v99[1]))))) & 1) != 0)
    {
      llvm::Instruction::getAAMetadata((uint64_t ***)v26, v92);
      llvm::AAMDNodes::merge((llvm::MDNode **)v99, v92, &v93);
      if (v93 || *v90 || (v86[87] & 0x20) != 0)
        llvm::Value::setMetadata(v87, 1, v93);
      if (v94 || *v90 || (v86[87] & 0x20) != 0)
        llvm::Value::setMetadata(v87, 5, v94);
      if (v95 || *v90 || (v86[87] & 0x20) != 0)
        llvm::Value::setMetadata(v87, 7, v95);
      if (v96 || *v90 || (v86[87] & 0x20) != 0)
        llvm::Value::setMetadata(v87, 8, v96);
    }
    sub_1C57813F4(a1, a2);
    sub_1C57813F4(a1, v26);
    if (v101)
      llvm::MetadataTracking::untrack((uint64_t)&v101, v101);
    return 1;
  }
  return result;
}

void sub_1C581F81C(uint64_t a1, uint64_t a2, llvm::PointerType **a3)
{
  unsigned __int8 *v6;
  unsigned int v7;
  llvm::Type *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  llvm::Value *v12;
  char v13;
  _QWORD *v14;
  unsigned __int8 **v15;
  uint64_t v16;
  unsigned __int8 **v17;
  unsigned int v18;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22[4];
  __int16 v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[17];

  v26[16] = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int8 **)(a2 - 32);
  v7 = *(_DWORD *)(*(_QWORD *)v6 + 8);
  if ((v7 & 0xFE) == 0x12)
    v7 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v6 + 16) + 8);
  v8 = (llvm::Type *)(v7 >> 8);
  v24 = v26;
  v25 = 0x800000000;
  if (*(_QWORD *)(a2 + 48) || (*(_BYTE *)(a2 + 23) & 0x20) != 0)
    llvm::Instruction::getAllMetadataImpl(a2, (uint64_t)&v24);
  v9 = *(uint64_t **)(a1 + 24);
  v10 = llvm::PointerType::get(*a3, v8);
  v23 = 257;
  v11 = sub_1C4773E38(v9, 49, v6, v10, (uint64_t)v22);
  v12 = sub_1C509CCE8(v9, (uint64_t *)a3, (uint64_t)v11, (*(_WORD *)(a2 + 18) >> 1) & 0x3F | 0x100u, *(_WORD *)(a2 + 18) & 1);
  v13 = *(_BYTE *)(a2 + 60);
  *((_WORD *)v12 + 9) = *((_WORD *)v12 + 9) & 0xFC7F | *(_WORD *)(a2 + 18) & 0x380;
  *((_BYTE *)v12 + 60) = v13;
  v14 = v24;
  if ((_DWORD)v25)
  {
    v15 = (unsigned __int8 **)((char *)v12 + 48);
    v16 = 16 * v25;
    v17 = (unsigned __int8 **)((char *)v24 + 8);
    while (1)
    {
      v18 = *((_DWORD *)v17 - 2);
      if (v18 > 0x19 || ((1 << v18) & 0x20007AF) == 0)
        goto LABEL_19;
      v20 = *v17;
      if (*v17)
      {
        if (!v18)
        {
          v22[0] = *v17;
          llvm::MetadataTracking::track((uint64_t)v22, v20, 2);
LABEL_22:
          if (v22 == v15)
          {
            if (v22[0])
              llvm::MetadataTracking::untrack((uint64_t)v22, v22[0]);
          }
          else
          {
            if (*v15)
              llvm::MetadataTracking::untrack((uint64_t)v12 + 48, *v15);
            v21 = v22[0];
            *v15 = v22[0];
            if (v21)
              llvm::MetadataTracking::retrack((uint64_t)v22, v21, (uint64_t)v12 + 48);
          }
          goto LABEL_19;
        }
      }
      else
      {
        if (!*v15 && (*((_BYTE *)v12 + 23) & 0x20) == 0)
          goto LABEL_19;
        if (!v18)
        {
          v22[0] = 0;
          goto LABEL_22;
        }
      }
      llvm::Value::setMetadata(v12, v18, (llvm::MDNode *)v20);
LABEL_19:
      v17 += 2;
      v16 -= 16;
      if (!v16)
      {
        v14 = v24;
        break;
      }
    }
  }
  if (v14 != v26)
    free(v14);
}

uint64_t sub_1C581FA54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = 0;
  if (a2)
  {
    v3 = *(unsigned __int8 *)(a2 + 16);
    if (v3 >= 0x1C && v3 - 83 >= 0xFFFFFFFE)
    {
      v5 = *(_QWORD *)(a2 - 64);
      if (v5)
        v6 = *(unsigned __int8 *)(v5 + 16) >= 0x1Cu;
      else
        v6 = 0;
      if (v6)
      {
        v2 = 0;
        **(_QWORD **)(a1 + 8) = v5;
        v7 = *(_QWORD *)(a2 - 32);
        if (v7 && *(unsigned __int8 *)(v7 + 16) >= 0x1Cu)
        {
          **(_QWORD **)(a1 + 16) = v7;
          **(_DWORD **)a1 = *(_WORD *)(a2 + 18) & 0x3F;
          return 1;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return v2;
}

BOOL sub_1C581FAD0(_QWORD *a1, uint64_t a2, llvm::Value *a3, unsigned int *a4)
{
  int v4;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  llvm::APInt *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  int v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned __int8 *TypeAtIndex;
  unsigned int v28;
  llvm::Type **v29;
  uint64_t v30;
  llvm::Type *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  llvm::Value *v39;
  llvm::Value *v40;
  char v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char *v49;
  BOOL v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  BOOL v60;
  const char *v61;
  char v62;
  char v63;
  _BOOL4 v64;
  llvm::Module *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  _BOOL4 v69;
  BOOL v70;
  llvm::GlobalValue *Section;
  uint64_t v72;
  llvm::Module *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  BOOL v78;
  const char *v79;
  char v80;
  char v81;
  int v82;
  int64_t v83;
  unint64_t v85;
  unsigned int v86;
  BOOL v87;
  unsigned int v89;
  int v90;
  unsigned int v91;
  uint64_t v92;
  llvm::Value *v93;
  uint64_t *v94;
  uint64_t v95;
  unsigned int v96;
  char v97;
  uint64_t *v98;
  uint64_t v99;
  BOOL v100;
  unint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int v105;
  unint64_t *v106;
  unsigned int v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  void *v114;
  uint64_t v115;
  _BYTE v116[32];
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x7FFFFFE) == 0)
    return 0;
  v9 = v4 & 0x7FFFFFF;
  if ((v4 & 0x7FFFFFF) == 1)
  {
    v10 = 1;
  }
  else
  {
    v10 = 1;
    while (1)
    {
      v11 = *(_QWORD *)(a2 - 32 * v9 + 32 * v10);
      if (!v11 || *(_BYTE *)(v11 + 16) != 16)
        break;
      v13 = (llvm::APInt *)(v11 + 24);
      v14 = *(_DWORD *)(v11 + 32);
      if (v14 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v13) != v14)
          break;
      }
      else if (*(_QWORD *)v13)
      {
        break;
      }
      if ((_DWORD)v9 == ++v10)
      {
        v10 = v9;
        break;
      }
    }
  }
  *a4 = v10;
  v15 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  if (v10 == (_DWORD)v15)
    return 0;
  v16 = a2 - 32 * v15;
  if (*(unsigned __int8 *)(*(_QWORD *)(v16 + 32 * v10) + 16) < 0x15u)
    return 0;
  v114 = v116;
  v115 = 0x400000000;
  if (v10 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v114, (uint64_t)v116, v10, 8);
    v19 = v115;
    v21 = v114;
    v20 = v115;
LABEL_23:
    v22 = (uint64_t *)(v16 + 32);
    v23 = 32 * v10;
    v24 = &v21[8 * v20];
    do
    {
      v25 = *v22;
      v22 += 4;
      *v24++ = v25;
      v23 -= 32;
    }
    while (v23);
    goto LABEL_25;
  }
  v19 = 0;
  if (v10)
  {
    v20 = 0;
    v21 = v116;
    goto LABEL_23;
  }
LABEL_25:
  v26 = v19 + v10;
  LODWORD(v115) = v19 + v10;
  TypeAtIndex = *(unsigned __int8 **)(a2 + 64);
  v28 = TypeAtIndex[8];
  if (v28 == 19)
    goto LABEL_176;
  if (v26)
  {
    v29 = (llvm::Type **)((char *)v114 + 8);
    v30 = 8 * v26 - 8;
    v17 = 0;
    while (v30)
    {
      v31 = *v29++;
      TypeAtIndex = (unsigned __int8 *)llvm::GetElementPtrInst::getTypeAtIndex((llvm::GetElementPtrInst *)TypeAtIndex, v31, a3);
      v30 -= 8;
      if (!TypeAtIndex)
        goto LABEL_177;
    }
    v28 = TypeAtIndex[8];
  }
  if (v28 > 0x11)
    goto LABEL_143;
  if (((1 << v28) & 0xAC7F) != 0)
    goto LABEL_34;
  if (((1 << v28) & 0x30000) == 0)
  {
LABEL_143:
    if ((v28 & 0xFE) != 0x12 && v28 != 21)
      goto LABEL_176;
  }
  if (!llvm::Type::isSizedDerivedType((uint64_t)TypeAtIndex, 0))
    goto LABEL_176;
LABEL_34:
  v32 = a1[10];
  sub_1C4768AD0(v32, (uint64_t)TypeAtIndex);
  v34 = v33;
  llvm::DataLayout::getAlignment(v32, (uint64_t)TypeAtIndex);
  v36 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  if (*a4 + 1 != (_DWORD)v36 && (*(_BYTE *)(a2 + 17) & 2) == 0)
    goto LABEL_176;
  v101 = ((1 << v35) + ((unint64_t)(v34 + 7) >> 3) - 1) & -(1 << v35);
  v37 = *(_QWORD *)(a2 - 32 * v36);
  v108 = &v112;
  v109 = &v112;
  v110 = 4;
  LODWORD(v111) = 0;
  v117 = &v119;
  v118 = 0x400000000;
  sub_1C4848C0C((unsigned int *)&v117, 1uLL, v37);
  v38 = v118;
  while (1)
  {
    v39 = (llvm::Value *)v117[v38 - 1];
    LODWORD(v118) = v38 - 1;
    v40 = llvm::Value::stripPointerCasts(v39);
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v108, (uint64_t)v40);
    if (v41)
      break;
LABEL_84:
    v68 = 3;
LABEL_85:
    v69 = v68 == 3;
    if (v68 == 3)
    {
      v38 = v118;
      if ((_DWORD)v118)
        continue;
    }
    goto LABEL_150;
  }
  v42 = *((unsigned __int8 *)v40 + 16);
  if (v40 && v42 == 85)
  {
    v43 = *((_QWORD *)v40 - 8);
    v44 = v118;
    if (v118 >= (unint64_t)HIDWORD(v118))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, (uint64_t)&v119, v118 + 1, 8);
      v44 = v118;
    }
    v117[v44] = v43;
    v45 = (v118 + 1);
    LODWORD(v118) = v45;
    v46 = *((_QWORD *)v40 - 4);
    if (v45 >= HIDWORD(v118))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, (uint64_t)&v119, v45 + 1, 8);
      LODWORD(v45) = v118;
    }
    v117[v45] = v46;
LABEL_45:
    LODWORD(v118) = v118 + 1;
    goto LABEL_84;
  }
  if (v40 && v42 == 83)
  {
    v47 = *((_DWORD *)v40 + 5);
    if ((v47 & 0x40000000) != 0)
    {
      v49 = (char *)*((_QWORD *)v40 - 1);
      v48 = v47 & 0x7FFFFFF;
    }
    else
    {
      v48 = v47 & 0x7FFFFFF;
      v49 = (char *)v40 - 32 * v48;
    }
    sub_1C4DA9878((unsigned int *)&v117, (uint64_t)&v117[v118], v49, &v49[32 * v48]);
    goto LABEL_84;
  }
  if (v40)
    v50 = v42 == 1;
  else
    v50 = 0;
  if (!v50)
  {
    if (v40 && v42 == 59)
    {
      v51 = *((_QWORD *)v40 + 8);
      v52 = *(unsigned __int8 *)(v51 + 8);
      if (v52 > 0x11)
      {
LABEL_59:
        if ((v52 & 0xFE) != 0x12 && v52 != 21)
          goto LABEL_149;
        goto LABEL_64;
      }
      if (((1 << v52) & 0xAC7F) == 0)
      {
        if (((1 << v52) & 0x30000) == 0)
          goto LABEL_59;
LABEL_64:
        if (!llvm::Type::isSizedDerivedType(v51, 0))
          goto LABEL_149;
      }
      v54 = *((_QWORD *)v40 - 4);
      if (v54)
        v55 = *(_BYTE *)(v54 + 16) == 16;
      else
        v55 = 0;
      if (!v55)
        goto LABEL_149;
      v56 = *((_QWORD *)v40 + 8);
      sub_1C4768AD0(v32, v56);
      v58 = v57;
      v60 = v59 == 1;
      llvm::DataLayout::getAlignment(v32, v56);
      v63 = v62;
      if (v60)
      if (*(_DWORD *)(v54 + 32) <= 0x7Fu)
        llvm::APInt::zext((llvm::APInt *)(v54 + 24), 0x80u, (uint64_t)&v104);
      else
        sub_1C5DD14E0((uint64_t)&v104, v54 + 24);
      v103 = 128;
      llvm::APInt::initSlowCase((llvm::APInt *)&v102, ((1 << v63) + ((unint64_t)(v58 + 7) >> 3) - 1) & -(1 << v63), 0);
      llvm::APInt::operator*((uint64_t)&v104, &v102, (uint64_t)&v106);
      if (v107 < 0x41)
      {
        v64 = (unint64_t)v106 > v101;
        goto LABEL_114;
      }
      v82 = 0;
      v83 = ((unint64_t)v107 + 63) >> 6;
      do
      {
        if (v83-- < 1)
          break;
        v85 = v106[v83];
        v82 += __clz(v85);
      }
      while (!v85);
      v86 = v107 | 0xFFFFFFC0;
      if ((v107 & 0x3F) == 0)
        v86 = 0;
      if (v107 - v82 - v86 <= 0x40)
      {
        v64 = *v106 > v101;
      }
      else
      {
        v64 = 1;
        if (!v106)
        {
LABEL_114:
          if (v103 >= 0x41 && v102)
            MEMORY[0x1CAA32F9C](v102, 0x1000C8000313F17);
          if (v105 >= 0x41 && v104)
            MEMORY[0x1CAA32F9C](v104, 0x1000C8000313F17);
          if (v64)
            v68 = 1;
          else
            v68 = 3;
          goto LABEL_85;
        }
      }
      MEMORY[0x1CAA32F9C](v106, 0x1000C8000313F17);
      goto LABEL_114;
    }
    if (v40)
      v70 = v42 == 3;
    else
      v70 = 0;
    if (!v70)
    {
      v68 = 0;
      goto LABEL_138;
    }
    if ((*((_DWORD *)v40 + 5) & 0x7FFFFFF) == 0
      || (Section = llvm::GlobalValue::getSection(v40), v72 == 12)
      && (*(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
        ? (v87 = *((unsigned int *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
        : (v87 = 0),
          v87))
    {
LABEL_137:
      v68 = 1;
    }
    else if ((*((_DWORD *)v40 + 8) & 0xFu) - 5 < 4 || (v68 = 1, ((1 << (*((_DWORD *)v40 + 8) & 0xF)) & 0x614) == 0))
    {
      v73 = (llvm::Module *)*((_QWORD *)v40 + 5);
      if ((!v73 || !llvm::Module::getSemanticInterposition(v73) || (*((_BYTE *)v40 + 33) & 0x40) != 0)
        && (*((_BYTE *)v40 + 80) & 3) == 1)
      {
        v74 = *((_QWORD *)v40 + 3);
        sub_1C4768AD0(v32, v74);
        v76 = v75;
        v78 = v77 == 1;
        llvm::DataLayout::getAlignment(v32, v74);
        v81 = v80;
        if (v78)
        if ((((1 << v81) + ((unint64_t)(v76 + 7) >> 3) - 1) & -(1 << v81)) > v101)
          v68 = 1;
        else
          v68 = 3;
        goto LABEL_138;
      }
      goto LABEL_137;
    }
LABEL_138:
    if (v68 <= 1)
      v68 = 1;
    goto LABEL_85;
  }
  if ((*((_DWORD *)v40 + 8) & 0xFu) - 5 >= 4)
  {
    v69 = 0;
    if (((1 << (*((_DWORD *)v40 + 8) & 0xF)) & 0x614) != 0)
      goto LABEL_150;
  }
  v65 = (llvm::Module *)*((_QWORD *)v40 + 5);
  if (!v65 || !llvm::Module::getSemanticInterposition(v65) || (*((_BYTE *)v40 + 33) & 0x40) != 0)
  {
    v66 = *((_QWORD *)v40 - 4);
    v67 = v118;
    if (v118 >= (unint64_t)HIDWORD(v118))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, (uint64_t)&v119, v118 + 1, 8);
      v67 = v118;
    }
    v117[v67] = v66;
    goto LABEL_45;
  }
LABEL_149:
  v69 = 0;
LABEL_150:
  if (v117 != &v119)
    free(v117);
  if (v109 != v108)
    free(v109);
  if (!v69)
  {
LABEL_176:
    v17 = 0;
    goto LABEL_177;
  }
  v89 = *a4;
  v90 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  v91 = v89 + 1;
  do
  {
    v17 = v90 == v91;
    if (v90 == v91)
      break;
    v92 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * v91);
    if (a3)
    {
      v93 = a3;
      if (*((_QWORD *)a3 + 5))
        continue;
    }
    v100 = v92 && *(unsigned __int8 *)(v92 + 16) >= 0x1Cu;
    if (!v100
      || (v93 = *(llvm::Value **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * v91), !*(_QWORD *)(v92 + 40)))
    {
      v93 = 0;
    }
    v94 = (uint64_t *)a1[7];
    v95 = a1[9];
    v108 = (uint64_t *)a1[10];
    v109 = v94;
    v110 = (uint64_t)v93;
    v111 = v95;
    v112 = 0;
    v113 = 1;
    sub_1C4F83784(v92, 0, (uint64_t *)&v108, &v117);
    v96 = v118;
    v97 = v118 - 1;
    v98 = &v117[(v118 - 1) >> 6];
    if (v118 < 0x41)
      v98 = (uint64_t *)&v117;
    v99 = *v98;
    if (v120 >= 0x41 && v119)
    {
      MEMORY[0x1CAA32F9C](v119, 0x1000C8000313F17);
      v96 = v118;
    }
    if (v96 >= 0x41 && v117)
      MEMORY[0x1CAA32F9C](v117, 0x1000C8000313F17);
    ++v91;
  }
  while (((1 << v97) & v99) != 0);
LABEL_177:
  if (v114 != v116)
    free(v114);
  return v17;
}

llvm::Value *sub_1C5820410(uint64_t a1, llvm::Instruction *a2, uint64_t a3, uint64_t a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  llvm *v8;
  llvm::Constant *v9;
  __int128 v10;
  __int128 v11;
  llvm::Value *v12;
  llvm::Value *v13;
  uint64_t v14;
  llvm::ValueAsMetadata *v15;
  uint64_t v16;
  uint64_t Neg;
  uint64_t v19;
  uint64_t v20;
  llvm::Type *v21;
  int PrimitiveSizeInBits;
  llvm::Constant *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  llvm::Instruction **v28;
  llvm::Instruction *v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  _QWORD *v35;
  unsigned __int8 *v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  llvm::Instruction *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  llvm::ValueHandleBase *Shl;
  uint64_t v49;
  char *v50;
  char *v51;
  llvm::ValueHandleBase **v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  llvm::ValueHandleBase ***v56;
  uint64_t v57;
  char v58;
  _QWORD *v59;
  unsigned __int8 *v60;
  _QWORD ***v61;
  llvm::Value **ExactLogBase2;
  llvm::Value **v63;
  char *v64;
  char *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  llvm::Value *v70;
  char v71;
  llvm::APInt *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  llvm::Type *v77;
  _QWORD *v78;
  llvm::ConstantFP *v79;
  unsigned int v80;
  llvm::Constant *Zero;
  llvm::Constant *v82;
  llvm::APInt **v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  llvm::Instruction **v89;
  llvm::Instruction *v90;
  int v91;
  int v92;
  int v93;
  llvm::Type *v94;
  uint64_t v95;
  llvm::APInt **v96;
  char *v97;
  llvm::APInt *v98;
  int v99;
  uint64_t v100;
  int v101;
  llvm::APInt *v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  llvm::Instruction *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  llvm::ConstantFP *v118;
  unsigned int v119;
  llvm::APInt *v120;
  llvm::Constant *NullValue;
  llvm::Constant *v122;
  llvm::APInt **v123;
  _QWORD *v124;
  char *v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  char *v140;
  char *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  char *v147;
  llvm::APInt *v148;
  llvm::APInt *v149;
  char *v150;
  char *v151;
  _QWORD *v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  _QWORD **v166;
  _QWORD *v167;
  _QWORD **v168;
  _QWORD *v169;
  unsigned int v170;
  llvm::Constant **v171;
  uint64_t v172;
  unsigned int v173;
  llvm::UndefValue *v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  uint64_t *BinaryIntrinsic;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t *v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  int v189;
  char *v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  llvm::APInt ***v194;
  int v195;
  uint64_t v196;
  llvm::APInt **v197;
  char *v198;
  llvm::APInt **v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  llvm::APInt *v203;
  _QWORD *v204;
  llvm::APInt *v205;
  int v206;
  uint64_t v207;
  llvm::APInt **v208;
  char *v209;
  llvm::APInt **v210;
  uint64_t v211;
  llvm::APInt *v212;
  _QWORD *v213;
  llvm::APInt *v214;
  char v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  int v219;
  llvm::APInt *v220;
  int v221;
  llvm::Value **v222;
  uint64_t v223;
  uint64_t *v224;
  llvm::APInt *v225;
  int v226;
  llvm::Type *v227;
  int v228;
  unsigned int v229;
  llvm::ConstantFP *v230;
  unsigned int v231;
  llvm::Constant *v232;
  llvm::Constant *v233;
  llvm::Type **v234;
  llvm::Type *v235;
  llvm::APInt *v236;
  int v237;
  const llvm::APInt *v238;
  int v239;
  uint64_t v240;
  int v241;
  _QWORD *v242;
  int v243;
  _QWORD *v244;
  llvm::APInt **v245;
  llvm::APInt *v246;
  unsigned int v247;
  llvm::APInt *v248;
  uint64_t v249;
  llvm::APInt *v250;
  llvm::Value **v251;
  _QWORD *v252;
  uint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  int v256;
  const llvm::APInt *v257;
  llvm::APInt **v258;
  llvm::APInt *v259;
  unsigned int v260;
  llvm::APInt *v261;
  uint64_t v262;
  llvm::APInt *v263;
  llvm::Value **v264;
  _QWORD *v265;
  char *v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  uint64_t v270;
  _BOOL4 v271;
  const llvm::APInt *v272;
  uint64_t v273;
  uint64_t v274;
  _BOOL4 v275;
  _QWORD **v276;
  uint64_t v277;
  uint64_t v278;
  int v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t *v282;
  uint64_t *v283;
  llvm::ValueHandleBase *Bool;
  uint64_t v285;
  char v286;
  int v287;
  int v288;
  llvm::Type *v289;
  uint64_t *v290;
  uint64_t v291;
  uint64_t v292;
  _QWORD *v293;
  uint64_t v294;
  llvm::APInt *v295;
  uint64_t v296;
  llvm::APInt *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  llvm::APInt **v301;
  llvm::APInt *v302;
  llvm::APInt *v303;
  llvm::APInt *v304;
  __int128 v305;
  _BYTE v306[24];
  __int128 v307;
  uint64_t v308;
  llvm::APInt **v309;
  llvm::APInt **v310;
  __int16 v311;
  uint64_t v312;

  v312 = *MEMORY[0x1E0C80C00];
  v8 = (llvm *)*((_QWORD *)a2 - 8);
  v9 = (llvm::Constant *)*((_QWORD *)a2 - 4);
  v10 = *(_OWORD *)(a1 + 120);
  v11 = *(_OWORD *)(a1 + 104);
  v305 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)v306 = v11;
  *(_QWORD *)&v307 = *((_QWORD *)&v10 + 1);
  *(_QWORD *)&v306[16] = a2;
  v12 = (llvm::Value *)sub_1C4E637C8(v8, v9, (uint64_t)&v305, 3, a5, a6);
  if (v12)
    goto LABEL_2;
  if ((sub_1C577D620(a1, a2) & 1) != 0)
    return a2;
  Neg = sub_1C57826B8(a1, (unsigned __int8 *)a2);
  if (!Neg)
  {
    Neg = (uint64_t)sub_1C578171C(a1, (uint64_t)a2);
    if (!Neg)
    {
      v12 = sub_1C577ECF0(a1, (unsigned __int8 *)a2);
      if (v12)
      {
LABEL_2:
        v13 = v12;
        v14 = a1;
        v15 = a2;
        return (llvm::Value *)sub_1C577F888(v14, v15, v13);
      }
      v19 = *((_QWORD *)a2 - 8);
      v20 = *((_QWORD *)a2 - 4);
      v21 = *(llvm::Type **)a2;
      if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
        v21 = (llvm::Type *)**((_QWORD **)v21 + 2);
      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v21);
      if (sub_1C4D9ED34((uint64_t)&v305, (llvm::Constant *)v20))
      {
        if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
        {
          v42 = 0;
          v41 = &byte_1C871356D;
          goto LABEL_38;
        }
        v24 = ***(_QWORD ***)a2;
        v25 = *(_QWORD *)(v24 + 152);
        v26 = *(unsigned int *)(v24 + 168);
        if ((_DWORD)v26)
        {
          LODWORD(v27) = (v26 - 1) & ((a2 >> 4) ^ (a2 >> 9));
          v28 = (llvm::Instruction **)(v25 + 16 * v27);
          v29 = *v28;
          if (*v28 == a2)
          {
LABEL_37:
            v40 = v28[1];
            v43 = *(_QWORD *)v40;
            v41 = (char *)v40 + 16;
            v42 = v43;
LABEL_38:
            *(_WORD *)&v306[16] = 261;
            *(_QWORD *)&v305 = v41;
            *((_QWORD *)&v305 + 1) = v42;
            Neg = (uint64_t)llvm::BinaryOperator::CreateNeg((uint64_t *)v19, (llvm::Type *)&v305, 0);
            v44 = *((_BYTE *)a2 + 17);
            goto LABEL_39;
          }
          v30 = 1;
          while (v29 != (llvm::Instruction *)-4096)
          {
            v31 = v27 + v30++;
            v27 = v31 & (v26 - 1);
            v29 = *(llvm::Instruction **)(v25 + 16 * v27);
            if (v29 == a2)
            {
              v28 = (llvm::Instruction **)(v25 + 16 * v27);
              goto LABEL_37;
            }
          }
        }
        v28 = (llvm::Instruction **)(v25 + 16 * v26);
        goto LABEL_37;
      }
      v309 = 0;
      v32 = *((unsigned __int8 *)a2 + 16);
      if (v32 == 45)
      {
        v33 = *((_QWORD *)a2 - 8);
        v34 = *(unsigned __int8 *)(v33 + 16);
        if (v34 == 5)
        {
          if (*(_WORD *)(v33 + 18) != 25)
            goto LABEL_67;
          v45 = v33 - 32 * (*(_DWORD *)(v33 + 20) & 0x7FFFFFF);
          v35 = *(_QWORD **)v45;
          if (!*(_QWORD *)v45)
            goto LABEL_67;
          v36 = *(unsigned __int8 **)(v45 + 32);
          if (!v36)
            goto LABEL_67;
        }
        else
        {
          if (v34 != 53)
            goto LABEL_67;
          v35 = *(_QWORD **)(v33 - 64);
          if (!v35)
            goto LABEL_67;
          v36 = *(unsigned __int8 **)(v33 - 32);
          if (!v36 || v36[16] > 0x14u)
            goto LABEL_67;
        }
        v46 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
        if (!v46 || v46[16] > 0x14u)
          goto LABEL_67;
      }
      else
      {
        if (v32 != 5 || *((_WORD *)a2 + 9) != 17)
          goto LABEL_67;
        v37 = (_QWORD *)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
        v38 = *v37;
        v39 = *(unsigned __int8 *)(*v37 + 16);
        if (v39 == 5)
        {
          if (*(_WORD *)(v38 + 18) != 25)
            goto LABEL_67;
          v47 = v38 - 32 * (*(_DWORD *)(v38 + 20) & 0x7FFFFFF);
          v35 = *(_QWORD **)v47;
          if (!*(_QWORD *)v47)
            goto LABEL_67;
          v36 = *(unsigned __int8 **)(v47 + 32);
          if (!v36)
            goto LABEL_67;
        }
        else
        {
          if (v39 != 53)
            goto LABEL_67;
          v35 = *(_QWORD **)(v38 - 64);
          if (!v35)
            goto LABEL_67;
          v36 = *(unsigned __int8 **)(v38 - 32);
          if (!v36 || v36[16] > 0x14u)
            goto LABEL_67;
        }
        v46 = (unsigned __int8 *)v37[4];
        if (!v46)
          goto LABEL_67;
      }
      v305 = (unint64_t)&v309;
      if ((sub_1C4D8A004((uint64_t)&v305, (llvm::Constant *)v46) & 1) != 0)
      {
        Shl = llvm::ConstantExpr::getShl((llvm::ConstantExpr *)v46, (llvm::Constant *)v36, 0, 0);
        v49 = *((_QWORD *)a2 - 8);
        *(_WORD *)&v306[16] = 257;
        v50 = (char *)operator new(0x80uLL);
        v51 = v50;
        *(_QWORD *)v50 = 0;
        *((_QWORD *)v50 + 2) = 0;
        *((_QWORD *)v50 + 1) = 0;
        *((_QWORD *)v50 + 5) = 0;
        *((_QWORD *)v50 + 6) = 0;
        *((_QWORD *)v50 + 4) = 0;
        v52 = (llvm::ValueHandleBase **)(v50 + 32);
        *((_QWORD *)v50 + 8) = *v35;
        Neg = (uint64_t)(v50 + 64);
        *((_QWORD *)v50 + 3) = v50 + 64;
        *((_QWORD *)v50 + 7) = v50 + 64;
        *((_QWORD *)v50 + 9) = 0;
        v50[80] = 45;
        v50[81] = 0;
        *((_WORD *)v50 + 41) = 0;
        *((_DWORD *)v50 + 21) = 2;
        *((_DWORD *)v50 + 30) = 0;
        *(_OWORD *)(v50 + 104) = 0u;
        *(_OWORD *)(v50 + 88) = 0u;
        *(_QWORD *)v50 = v35;
        v55 = v35[1];
        v54 = v35 + 1;
        v53 = v55;
        *((_QWORD *)v50 + 1) = v55;
        if (v55)
          *(_QWORD *)(v53 + 16) = v50 + 8;
        *((_QWORD *)v50 + 2) = v54;
        *v54 = v50;
        if (*((_QWORD *)v50 + 4))
        {
          **((_QWORD **)v50 + 6) = *((_QWORD *)v50 + 5);
          v300 = *((_QWORD *)v50 + 5);
          if (v300)
            *(_QWORD *)(v300 + 16) = *((_QWORD *)v50 + 6);
        }
        *v52 = Shl;
        if (Shl)
        {
          v56 = (llvm::ValueHandleBase ***)((char *)Shl + 8);
          v57 = *((_QWORD *)Shl + 1);
          *((_QWORD *)v50 + 5) = v57;
          if (v57)
            *(_QWORD *)(v57 + 16) = v50 + 40;
          *((_QWORD *)v50 + 6) = v56;
          *v56 = v52;
        }
        llvm::Value::setName((uint64_t ***)v50 + 8, (uint64_t)&v305);
        v58 = *((_BYTE *)a2 + 17);
        if ((v58 & 2) != 0 && (*(_BYTE *)(v49 + 17) & 2) != 0)
          v51[81] |= 2u;
        if ((v58 & 4) != 0
          && (*(_BYTE *)(v49 + 17) & 4) != 0
          && llvm::Constant::isNotMinSignedValue((unint64_t)Shl))
        {
          v51[81] |= 4u;
        }
        return (llvm::Value *)Neg;
      }
      v32 = *((unsigned __int8 *)a2 + 16);
LABEL_67:
      if (v32 == 45)
      {
        v59 = (_QWORD *)*((_QWORD *)a2 - 8);
        if (!v59)
          goto LABEL_90;
        v60 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
        if (!v60 || v60[16] > 0x14u)
          goto LABEL_90;
      }
      else if (v32 != 5
             || *((_WORD *)a2 + 9) != 17
             || (v61 = (_QWORD ***)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)), (v59 = *v61) == 0)
             || (v60 = (unsigned __int8 *)v61[4]) == 0)
      {
LABEL_90:
        v75 = v19 + 8;
        v74 = *(_QWORD *)(v19 + 8);
        if (v74)
        {
          if (!*(_QWORD *)(v74 + 8) && sub_1C582A25C((llvm::Constant *)v20))
          {
            v76 = llvm::Negator::Negate(1, (llvm::Value *)v19, (_QWORD *)a1);
            if (v76)
            {
              v78 = (_QWORD *)v76;
              v79 = *(llvm::ConstantFP **)v20;
              if ((*(_DWORD *)(*(_QWORD *)v20 + 8) & 0xFE) == 0x12)
                v80 = *(unsigned __int8 *)(**((_QWORD **)v79 + 2) + 8);
              else
                v80 = *(_DWORD *)(*(_QWORD *)v20 + 8);
              if (v80 <= 6)
                Zero = llvm::ConstantFP::getZero(v79, (llvm::Type *)1);
              else
                Zero = (llvm::Constant *)llvm::Constant::getNullValue(v79, v77);
              v83 = (llvm::APInt **)Zero;
              v84 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)0xF, Zero, (llvm::Constant *)v20, v82);
              if (!v84)
              {
                v295 = *v83;
                if (*v83)
                {
                  v309 = v83;
                  v310 = (llvm::APInt **)v20;
                  v296 = **(_QWORD **)v295 + 1512;
                  LODWORD(v305) = 15;
                  *((_QWORD *)&v305 + 1) = &v309;
                  *(_QWORD *)v306 = 2;
                  *(_OWORD *)&v306[8] = 0u;
                  v307 = 0u;
                  v308 = 0;
                  v84 = sub_1C537D4FC(v296, (uint64_t)v295, (unsigned __int8 *)&v305);
                }
                else
                {
                  v84 = 0;
                }
              }
              if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
              {
                v108 = 0;
                v107 = &byte_1C871356D;
                goto LABEL_148;
              }
              v85 = ***(_QWORD ***)a2;
              v86 = *(_QWORD *)(v85 + 152);
              v87 = *(unsigned int *)(v85 + 168);
              if ((_DWORD)v87)
              {
                LODWORD(v88) = (v87 - 1) & ((a2 >> 4) ^ (a2 >> 9));
                v89 = (llvm::Instruction **)(v86 + 16 * v88);
                v90 = *v89;
                if (*v89 == a2)
                {
LABEL_147:
                  v106 = v89[1];
                  v109 = *(_QWORD *)v106;
                  v107 = (char *)v106 + 16;
                  v108 = v109;
LABEL_148:
                  *(_WORD *)&v306[16] = 261;
                  *(_QWORD *)&v305 = v107;
                  *((_QWORD *)&v305 + 1) = v108;
                  v110 = (char *)operator new(0x80uLL);
                  *((_QWORD *)v110 + 5) = 0;
                  v111 = v110 + 40;
                  *((_QWORD *)v110 + 6) = 0;
                  *((_QWORD *)v110 + 8) = *v78;
                  Neg = (uint64_t)(v110 + 64);
                  *((_QWORD *)v110 + 3) = v110 + 64;
                  *((_QWORD *)v110 + 7) = v110 + 64;
                  *((_QWORD *)v110 + 9) = 0;
                  v110[80] = 45;
                  v110[81] = 0;
                  *((_WORD *)v110 + 41) = 0;
                  *((_DWORD *)v110 + 21) = 2;
                  *(_OWORD *)(v110 + 88) = 0u;
                  *(_OWORD *)(v110 + 104) = 0u;
                  *((_DWORD *)v110 + 30) = 0;
                  *(_QWORD *)v110 = v78;
                  v114 = v78[1];
                  v113 = v78 + 1;
                  v112 = v114;
                  *((_QWORD *)v110 + 1) = v114;
                  if (v114)
                    *(_QWORD *)(v112 + 16) = v110 + 8;
                  *((_QWORD *)v110 + 2) = v113;
                  *v113 = v110;
                  *((_QWORD *)v110 + 4) = v84;
                  if (v84)
                  {
                    v117 = *(_QWORD *)(v84 + 8);
                    v116 = (_QWORD *)(v84 + 8);
                    v115 = v117;
                    *v111 = v117;
                    if (v117)
                      *(_QWORD *)(v115 + 16) = v111;
                    *((_QWORD *)v110 + 6) = v116;
                    *v116 = v110 + 32;
                  }
LABEL_236:
                  v194 = (llvm::APInt ***)&v305;
LABEL_237:
                  llvm::Value::setName((uint64_t ***)Neg, (uint64_t)v194);
                  return (llvm::Value *)Neg;
                }
                v91 = 1;
                while (v90 != (llvm::Instruction *)-4096)
                {
                  v92 = v88 + v91++;
                  v88 = v92 & (v87 - 1);
                  v90 = *(llvm::Instruction **)(v86 + 16 * v88);
                  if (v90 == a2)
                  {
                    v89 = (llvm::Instruction **)(v86 + 16 * v88);
                    goto LABEL_147;
                  }
                }
              }
              v89 = (llvm::Instruction **)(v86 + 16 * v87);
              goto LABEL_147;
            }
          }
        }
        Neg = sub_1C5781CD4(a1, a2);
        if (Neg)
          return (llvm::Value *)Neg;
        v12 = sub_1C582236C((uint64_t)a2, *(_QWORD *)(a1 + 24));
        if (v12)
          goto LABEL_2;
        if (*(unsigned __int8 *)(v20 + 16) <= 0x14u && *(_QWORD *)v75 && !*(_QWORD *)(*(_QWORD *)v75 + 8))
        {
          v103 = *(unsigned __int8 *)(v19 + 16);
          if (v103 == 5)
          {
            if (*(_WORD *)(v19 + 18) != 13)
              goto LABEL_111;
            v133 = (uint64_t *)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF));
            v104 = *v133;
            if (!*v133)
              goto LABEL_111;
            v105 = v133[4];
            if (!v105)
              goto LABEL_111;
          }
          else
          {
            if (v103 != 41)
              goto LABEL_111;
            v104 = *(_QWORD *)(v19 - 64);
            if (!v104)
              goto LABEL_111;
            v105 = *(_QWORD *)(v19 - 32);
            if (!v105 || *(unsigned __int8 *)(v105 + 16) > 0x14u)
              goto LABEL_111;
          }
          v134 = *(_QWORD *)(a1 + 24);
          *(_WORD *)&v306[16] = 257;
          v135 = sub_1C4EC4040(v134, v105, v20, (uint64_t)&v305, 0, 0);
          v136 = *(unsigned __int8 *)(v135 + 16);
          if (v136 != 45)
          {
            v137 = v135;
            if (v136 != 5 || *(_WORD *)(v135 + 18) != 17)
            {
              v138 = *(_QWORD *)(a1 + 24);
              *(_WORD *)&v306[16] = 257;
              v139 = (_QWORD *)sub_1C4EC4040(v138, v104, v20, (uint64_t)&v305, 0, 0);
              v311 = 257;
              v140 = (char *)operator new(0x80uLL);
              *((_QWORD *)v140 + 6) = 0;
              *((_QWORD *)v140 + 8) = *v139;
              Neg = (uint64_t)(v140 + 64);
              *((_QWORD *)v140 + 3) = v140 + 64;
              v141 = v140 + 32;
              *((_QWORD *)v140 + 7) = v140 + 64;
              *((_QWORD *)v140 + 9) = 0;
              v140[80] = 41;
              v140[81] = 0;
              *((_WORD *)v140 + 41) = 0;
              *((_DWORD *)v140 + 21) = 2;
              *(_OWORD *)(v140 + 88) = 0u;
              *(_OWORD *)(v140 + 104) = 0u;
              *((_DWORD *)v140 + 30) = 0;
              *(_QWORD *)v140 = v139;
              v144 = v139[1];
              v143 = v139 + 1;
              v142 = v144;
              *((_QWORD *)v140 + 1) = v144;
              if (v144)
                *(_QWORD *)(v142 + 16) = v140 + 8;
              *((_QWORD *)v140 + 2) = v143;
              *v143 = v140;
              v145 = (_QWORD *)(v137 + 8);
              v146 = *(_QWORD *)(v137 + 8);
              *((_QWORD *)v140 + 5) = v146;
              v147 = v140 + 40;
              *((_QWORD *)v140 + 4) = v137;
              if (!v146)
                goto LABEL_176;
LABEL_175:
              *(_QWORD *)(v146 + 16) = v147;
LABEL_176:
              *((_QWORD *)v140 + 6) = v145;
              *v145 = v141;
LABEL_360:
              v194 = &v309;
              goto LABEL_237;
            }
          }
        }
LABEL_111:
        if (v19 == v20)
        {
          v309 = 0;
          v304 = 0;
          if (llvm::matchSelectPattern(v19, (uint64_t)&v309, &v304, 0, 0) - 7 <= 1
            || (LODWORD(v305) = 1,
                *((_QWORD *)&v305 + 1) = 0,
                *(_QWORD *)v306 = &v309,
                sub_1C4E75A6C((uint64_t)&v305, v19)))
          {
            v96 = v309;
            *(_WORD *)&v306[16] = 257;
            v97 = (char *)operator new(0x80uLL);
            *((_QWORD *)v97 + 8) = *v96;
            Neg = (uint64_t)(v97 + 64);
            *((_QWORD *)v97 + 3) = v97 + 64;
            *((_QWORD *)v97 + 7) = v97 + 64;
            *((_QWORD *)v97 + 9) = 0;
            *((_QWORD *)v97 + 10) = 0x20000002DLL;
            *((_DWORD *)v97 + 30) = 0;
            *(_OWORD *)(v97 + 104) = 0u;
            *(_OWORD *)(v97 + 88) = 0u;
            *(_QWORD *)v97 = v96;
            v98 = v96[1];
            *((_QWORD *)v97 + 1) = v98;
            if (v98)
              *((_QWORD *)v98 + 2) = v97 + 8;
            *((_QWORD *)v97 + 4) = v96;
            *((_QWORD *)v97 + 5) = v97;
            *((_QWORD *)v97 + 2) = v97 + 40;
            *((_QWORD *)v97 + 6) = v96 + 1;
            v96[1] = (llvm::APInt *)(v97 + 32);
            goto LABEL_236;
          }
        }
        v303 = 0;
        v304 = 0;
        *((_QWORD *)&v305 + 1) = &v304;
        v93 = *(unsigned __int8 *)(v19 + 16);
        if (v93 == 5)
        {
          if (*(_WORD *)(v19 + 18) != 15)
            goto LABEL_127;
          if (!sub_1C4E71060((uint64_t)&v305, *(llvm::Constant **)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF))))goto LABEL_127;
          v95 = *(_QWORD *)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF) + 32);
          if (!v95)
            goto LABEL_127;
        }
        else
        {
          if (v93 != 43)
            goto LABEL_127;
          if (!sub_1C4D8AC3C((uint64_t)&v305, *(llvm::Constant **)(v19 - 64)))
            goto LABEL_127;
          v95 = *(_QWORD *)(v19 - 32);
          if (!v95)
            goto LABEL_127;
        }
        **((_QWORD **)&v305 + 1) = v95;
        if (*(unsigned __int8 *)(v20 + 16) <= 0x14u)
        {
          v118 = *(llvm::ConstantFP **)v20;
          if ((*(_DWORD *)(*(_QWORD *)v20 + 8) & 0xFE) == 0x12)
            v119 = *(unsigned __int8 *)(**((_QWORD **)v118 + 2) + 8);
          else
            v119 = *(_DWORD *)(*(_QWORD *)v20 + 8);
          v120 = v304;
          if (v119 <= 6)
            NullValue = llvm::ConstantFP::getZero(v118, (llvm::Type *)1);
          else
            NullValue = (llvm::Constant *)llvm::Constant::getNullValue(v118, v94);
          v123 = (llvm::APInt **)NullValue;
          v124 = llvm::ConstantFoldBinaryInstruction((llvm *)0xF, NullValue, (llvm::Constant *)v20, v122);
          if (!v124)
          {
            v297 = *v123;
            if (*v123)
            {
              v309 = v123;
              v310 = (llvm::APInt **)v20;
              v298 = **(_QWORD **)v297 + 1512;
              LODWORD(v305) = 15;
              *((_QWORD *)&v305 + 1) = &v309;
              *(_QWORD *)v306 = 2;
              *(_OWORD *)&v306[8] = 0u;
              v307 = 0u;
              v308 = 0;
              v124 = (_QWORD *)sub_1C537D4FC(v298, (uint64_t)v297, (unsigned __int8 *)&v305);
            }
            else
            {
              v124 = 0;
            }
          }
          *(_WORD *)&v306[16] = 257;
          v125 = (char *)operator new(0x80uLL);
          *((_QWORD *)v125 + 5) = 0;
          v126 = v125 + 40;
          *((_QWORD *)v125 + 6) = 0;
          *((_QWORD *)v125 + 8) = *(_QWORD *)v120;
          Neg = (uint64_t)(v125 + 64);
          *((_QWORD *)v125 + 3) = v125 + 64;
          *((_QWORD *)v125 + 7) = v125 + 64;
          *((_QWORD *)v125 + 9) = 0;
          v125[80] = 45;
          v125[81] = 0;
          *((_WORD *)v125 + 41) = 0;
          *((_DWORD *)v125 + 21) = 2;
          *(_OWORD *)(v125 + 88) = 0u;
          *(_OWORD *)(v125 + 104) = 0u;
          *((_DWORD *)v125 + 30) = 0;
          *(_QWORD *)v125 = v120;
          v129 = *((_QWORD *)v120 + 1);
          v128 = (_QWORD *)((char *)v120 + 8);
          v127 = v129;
          *((_QWORD *)v125 + 1) = v129;
          if (v129)
            *(_QWORD *)(v127 + 16) = v125 + 8;
          *((_QWORD *)v125 + 2) = v128;
          *v128 = v125;
          goto LABEL_162;
        }
LABEL_127:
        *((_QWORD *)&v305 + 1) = &v304;
        v99 = *(unsigned __int8 *)(v19 + 16);
        if (v99 == 5)
        {
          if (*(_WORD *)(v19 + 18) != 15
            || !sub_1C4E71060((uint64_t)&v305, *(llvm::Constant **)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF)))|| (v100 = *(_QWORD *)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF) + 32)) == 0)
          {
LABEL_190:
            *((_QWORD *)&v305 + 1) = &v304;
            *(_QWORD *)v306 = &v303;
            v159 = *((unsigned __int8 *)a2 + 16);
            if (v159 == 45)
            {
              v160 = *((_QWORD *)a2 - 8);
              v161 = *(_QWORD *)(v160 + 8);
              if (!v161 || *(_QWORD *)(v161 + 8))
              {
LABEL_193:
                v162 = *((_QWORD *)a2 - 4);
                v163 = *(_QWORD *)(v162 + 8);
                if (!v163 || *(_QWORD *)(v163 + 8))
                  goto LABEL_206;
                v164 = *(unsigned __int8 *)(v162 + 16);
                if (v164 == 5)
                {
                  if (*(_WORD *)(v162 + 18) != 15)
                    goto LABEL_206;
                  if (!sub_1C4E71060((uint64_t)&v305, *(llvm::Constant **)(v162 - 32 * (*(_DWORD *)(v162 + 20) & 0x7FFFFFF))))goto LABEL_206;
                  v165 = *(_QWORD *)(v162 - 32 * (*(_DWORD *)(v162 + 20) & 0x7FFFFFF) + 32);
                  if (!v165)
                    goto LABEL_206;
                }
                else
                {
                  if (v164 != 43)
                    goto LABEL_206;
                  if (!sub_1C4D8AC3C((uint64_t)&v305, *(llvm::Constant **)(v162 - 64)))
                    goto LABEL_206;
                  v165 = *(_QWORD *)(v162 - 32);
                  if (!v165)
                    goto LABEL_206;
                }
                **((_QWORD **)&v305 + 1) = v165;
                v276 = (_QWORD **)*((_QWORD *)a2 - 8);
                if (!v276)
                {
LABEL_206:
                  v170 = *(unsigned __int8 *)(v19 + 16);
                  if ((v170 < 0x1C || v170 - 41 > 0x11 || (v171 = (llvm::Constant **)v20, v172 = v19, v170 - 47 >= 2))
                    && ((v173 = *(unsigned __int8 *)(v20 + 16), v173 < 0x1C)
                     || (v171 = (llvm::Constant **)v19, v172 = v20, v173 - 41 >= 0x12)))
                  {
                    sub_1C577FA08(a1, (llvm::Constant **)v19);
                  }
                  else
                  {
                    v174 = sub_1C577FA08(a1, v171);
                    v175 = *(_QWORD *)(v172 + 8);
                    if (v175)
                    {
                      if (!*(_QWORD *)(v175 + 8))
                      {
                        v176 = *(_QWORD *)(v172 - 32);
                        if ((llvm::Constant **)v176 == v171 || (llvm::UndefValue *)v176 == v174)
                        {
                          v177 = *(unsigned __int8 *)(v172 + 16);
                          if ((v177 - 47) <= 1)
                          {
                            BinaryIntrinsic = *(uint64_t **)(v172 - 64);
                            if ((*(_BYTE *)(v172 + 17) & 2) == 0)
                            {
                              if (v177 == 47)
                                v179 = 22;
                              else
                                v179 = 23;
                              v180 = *(_QWORD *)(a1 + 24);
                              *(_WORD *)&v306[16] = 257;
                              v124 = sub_1C4773860(v180, v179, BinaryIntrinsic, v176, (uint64_t)&v305, 0);
                              if ((llvm::Constant **)v176 != v171)
                              {
                                *(_WORD *)&v306[16] = 257;
                                v181 = (char *)operator new(0x80uLL);
                                *((_QWORD *)v181 + 5) = 0;
                                v182 = (uint64_t *)(v181 + 40);
                                *((_QWORD *)v181 + 6) = 0;
                                *((_QWORD *)v181 + 8) = *v124;
                                Neg = (uint64_t)(v181 + 64);
                                *((_QWORD *)v181 + 3) = v181 + 64;
                                *((_QWORD *)v181 + 7) = v181 + 64;
                                *((_QWORD *)v181 + 9) = 0;
                                v181[80] = 43;
                                v181[81] = 0;
                                *((_WORD *)v181 + 41) = 0;
                                *((_DWORD *)v181 + 21) = 2;
                                *(_OWORD *)(v181 + 88) = 0u;
                                *(_OWORD *)(v181 + 104) = 0u;
                                *((_DWORD *)v181 + 30) = 0;
                                *(_QWORD *)v181 = v124;
                                v185 = v124[1];
                                v184 = v124 + 1;
                                v183 = v185;
                                *((_QWORD *)v181 + 1) = v185;
                                if (v185)
                                  *(_QWORD *)(v183 + 16) = v181 + 8;
                                *((_QWORD *)v181 + 2) = v184;
                                *v184 = v181;
                                *((_QWORD *)v181 + 4) = BinaryIntrinsic;
                                if (BinaryIntrinsic)
                                {
                                  v188 = BinaryIntrinsic[1];
                                  v187 = BinaryIntrinsic + 1;
                                  v186 = v188;
                                  *v182 = v188;
                                  if (v188)
                                    *(_QWORD *)(v186 + 16) = v182;
                                  *((_QWORD *)v181 + 6) = v187;
                                  *v187 = v181 + 32;
                                }
                                goto LABEL_236;
                              }
                              *(_WORD *)&v306[16] = 257;
                              v125 = (char *)operator new(0x80uLL);
                              *((_QWORD *)v125 + 5) = 0;
                              v126 = v125 + 40;
                              *((_QWORD *)v125 + 6) = 0;
                              *((_QWORD *)v125 + 8) = *BinaryIntrinsic;
                              Neg = (uint64_t)(v125 + 64);
                              *((_QWORD *)v125 + 3) = v125 + 64;
                              *((_QWORD *)v125 + 7) = v125 + 64;
                              *((_QWORD *)v125 + 9) = 0;
                              v125[80] = 43;
                              v125[81] = 0;
                              *((_WORD *)v125 + 41) = 0;
                              *((_DWORD *)v125 + 21) = 2;
                              *(_OWORD *)(v125 + 88) = 0u;
                              *(_OWORD *)(v125 + 104) = 0u;
                              *((_DWORD *)v125 + 30) = 0;
                              *(_QWORD *)v125 = BinaryIntrinsic;
                              v294 = BinaryIntrinsic[1];
                              v293 = BinaryIntrinsic + 1;
                              v292 = v294;
                              *((_QWORD *)v125 + 1) = v294;
                              if (v294)
                                *(_QWORD *)(v292 + 16) = v125 + 8;
                              *((_QWORD *)v125 + 2) = v293;
                              *v293 = v125;
LABEL_162:
                              *((_QWORD *)v125 + 4) = v124;
                              if (v124)
                              {
                                v132 = v124[1];
                                v131 = v124 + 1;
                                v130 = v132;
                                *v126 = v132;
                                if (v132)
                                  *(_QWORD *)(v130 + 16) = v126;
                                *((_QWORD *)v125 + 6) = v131;
                                *v131 = v125 + 32;
                              }
                              goto LABEL_236;
                            }
                            if ((llvm::Constant **)v176 != v171)
                            {
                              *(_WORD *)&v306[16] = 257;
                              v289 = (llvm::Type *)&v305;
                              v290 = BinaryIntrinsic;
                              return llvm::BinaryOperator::CreateNeg(v290, v289, 0);
                            }
LABEL_395:
                            v14 = a1;
                            v15 = a2;
                            v13 = (llvm::Value *)BinaryIntrinsic;
                            return (llvm::Value *)sub_1C577F888(v14, v15, v13);
                          }
                        }
                      }
                    }
                  }
                  v189 = *(_DWORD *)(*(_QWORD *)a2 + 8);
                  if ((v189 & 0xFE) == 0x12)
                    v189 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
                  if (v189 == 269)
                  {
                    *(_WORD *)&v306[16] = 257;
                    v190 = (char *)operator new(0x80uLL);
                    *((_QWORD *)v190 + 6) = 0;
                    *((_QWORD *)v190 + 8) = *(_QWORD *)v19;
                    Neg = (uint64_t)(v190 + 64);
                    *((_QWORD *)v190 + 3) = v190 + 64;
                    *((_QWORD *)v190 + 7) = v190 + 64;
                    *((_QWORD *)v190 + 9) = 0;
                    v190[80] = 56;
                    v190[81] = 0;
                    *((_WORD *)v190 + 41) = 0;
                    *((_DWORD *)v190 + 21) = 2;
                    *(_OWORD *)(v190 + 88) = 0u;
                    *(_OWORD *)(v190 + 104) = 0u;
                    *((_DWORD *)v190 + 30) = 0;
                    *(_QWORD *)v190 = v19;
                    v191 = *(_QWORD *)(v19 + 8);
                    *((_QWORD *)v190 + 1) = v191;
                    if (v191)
                      *(_QWORD *)(v191 + 16) = v190 + 8;
                    *((_QWORD *)v190 + 2) = v75;
                    *(_QWORD *)v75 = v190;
                    v192 = (_QWORD *)(v20 + 8);
                    v193 = *(_QWORD *)(v20 + 8);
                    *((_QWORD *)v190 + 5) = v193;
                    *((_QWORD *)v190 + 4) = v20;
                    if (v193)
                      *(_QWORD *)(v193 + 16) = v190 + 40;
                    *((_QWORD *)v190 + 6) = v192;
                    *v192 = v190 + 32;
                    goto LABEL_236;
                  }
                  v309 = 0;
                  *((_QWORD *)&v305 + 1) = &v309;
                  v195 = *(unsigned __int8 *)(v19 + 16);
                  if (v195 == 5)
                  {
                    if (*(_WORD *)(v19 + 18) != 25)
                      goto LABEL_253;
                    if (!sub_1C4D89E3C((uint64_t)&v305, *(llvm::Constant **)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF))))goto LABEL_253;
                    v196 = *(_QWORD *)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF) + 32);
                    if (!v196)
                      goto LABEL_253;
                  }
                  else if (v195 != 53
                         || !sub_1C4D89CC8((uint64_t)&v305, *(llvm::Constant **)(v19 - 64))
                         || (v196 = *(_QWORD *)(v19 - 32)) == 0)
                  {
LABEL_253:
                    *((_QWORD *)&v305 + 1) = &v309;
                    v206 = *(unsigned __int8 *)(v20 + 16);
                    if (v206 == 5)
                    {
                      if (*(_WORD *)(v20 + 18) != 25
                        || !sub_1C4D89E3C((uint64_t)&v305, *(llvm::Constant **)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF)))|| (v207 = *(_QWORD *)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF) + 32)) == 0)
                      {
LABEL_272:
                        *(_QWORD *)&v305 = &v304;
                        if (sub_1C4B0378C((_QWORD **)&v305, v19)
                          && (v309 = &v303, (sub_1C4B0378C(&v309, v20) & 1) != 0)
                          || (v302 = (llvm::APInt *)&v304, sub_1C4B037F8((_QWORD **)&v302, v19))
                          && (v301 = &v303, sub_1C4B037F8(&v301, v20)))
                        {
                          v216 = *(_QWORD *)v304;
                          v217 = *(_DWORD *)(*(_QWORD *)v304 + 8);
                          if ((v217 & 0xFE) == 0x12)
                            v217 = *(_DWORD *)(**(_QWORD **)(v216 + 16) + 8);
                          if (v217 == 269
                            && v216 == *(_QWORD *)v303
                            && (*(_QWORD *)v75 && !*(_QWORD *)(*(_QWORD *)v75 + 8)
                             || (v277 = *(_QWORD *)(v20 + 8)) != 0 && !*(_QWORD *)(v277 + 8)
                             || v304 == v303))
                          {
                            v278 = *(_QWORD *)(a1 + 24);
                            *(_QWORD *)&v305 = "mulBOOL";
                            *(_WORD *)&v306[16] = 259;
                            sub_1C4D89BCC(v278, v304, (uint64_t)v303, (uint64_t)&v305);
                            *(_WORD *)&v306[16] = 257;
                            v279 = 39;
LABEL_387:
                            llvm::CastInst::Create(v279);
                            return (llvm::Value *)v16;
                          }
                        }
                        *(_QWORD *)&v305 = &v304;
                        if (sub_1C4B037F8((_QWORD **)&v305, v19)
                          && (v309 = &v303, (sub_1C4B0378C(&v309, v20) & 1) != 0)
                          || (v302 = (llvm::APInt *)&v304, sub_1C4B0378C((_QWORD **)&v302, v19))
                          && (v301 = &v303, sub_1C4B037F8(&v301, v20)))
                        {
                          v218 = *(_QWORD *)v304;
                          v219 = *(_DWORD *)(*(_QWORD *)v304 + 8);
                          if ((v219 & 0xFE) == 0x12)
                            v219 = *(_DWORD *)(**(_QWORD **)(v218 + 16) + 8);
                          if (v219 == 269
                            && v218 == *(_QWORD *)v303
                            && (*(_QWORD *)v75 && !*(_QWORD *)(*(_QWORD *)v75 + 8)
                             || (v280 = *(_QWORD *)(v20 + 8)) != 0 && !*(_QWORD *)(v280 + 8)))
                          {
                            v281 = *(_QWORD *)(a1 + 24);
                            *(_QWORD *)&v305 = "mulBOOL";
                            *(_WORD *)&v306[16] = 259;
                            sub_1C4D89BCC(v281, v304, (uint64_t)v303, (uint64_t)&v305);
                            *(_WORD *)&v306[16] = 257;
                            v279 = 40;
                            goto LABEL_387;
                          }
                        }
                        *(_QWORD *)&v305 = &v304;
                        if (sub_1C4B0378C((_QWORD **)&v305, v19))
                        {
                          v220 = v304;
                          v221 = *(_DWORD *)(*(_QWORD *)v304 + 8);
                          if ((v221 & 0xFE) == 0x12)
                            v221 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v304 + 16) + 8);
                          if (v221 == 269)
                          {
                            v222 = llvm::ConstantInt::get(*(llvm::ConstantInt **)a2, 0, 0);
                            *(_WORD *)&v306[16] = 257;
                            v223 = (uint64_t)v220;
                            v224 = (uint64_t *)v20;
                            return sub_1C4FC8748(v223, v224, (uint64_t)v222, (uint64_t)&v305, 0, 0);
                          }
                        }
                        *(_QWORD *)&v305 = &v304;
                        if (sub_1C4B0378C((_QWORD **)&v305, v20))
                        {
                          v225 = v304;
                          v226 = *(_DWORD *)(*(_QWORD *)v304 + 8);
                          if ((v226 & 0xFE) == 0x12)
                            v226 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v304 + 16) + 8);
                          if (v226 == 269)
                          {
                            v222 = llvm::ConstantInt::get(*(llvm::ConstantInt **)a2, 0, 0);
                            *(_WORD *)&v306[16] = 257;
                            v223 = (uint64_t)v225;
LABEL_310:
                            v224 = (uint64_t *)v19;
                            return sub_1C4FC8748(v223, v224, (uint64_t)v222, (uint64_t)&v305, 0, 0);
                          }
                        }
                        *(_QWORD *)&v305 = &v304;
                        if (sub_1C4B037F8((_QWORD **)&v305, v19))
                        {
                          v228 = *(_DWORD *)(*(_QWORD *)v304 + 8);
                          if ((v228 & 0xFE) == 0x12)
                            v228 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v304 + 16) + 8);
                          if (v228 == 269)
                          {
                            v229 = *(unsigned __int8 *)(v20 + 16);
                            if (v229 != 5 && v229 <= 0x14)
                            {
                              v230 = *(llvm::ConstantFP **)v20;
                              if ((*(_DWORD *)(*(_QWORD *)v20 + 8) & 0xFE) == 0x12)
                                v231 = *(unsigned __int8 *)(**((_QWORD **)v230 + 2) + 8);
                              else
                                v231 = *(_DWORD *)(*(_QWORD *)v20 + 8);
                              if (v231 <= 6)
                                v232 = llvm::ConstantFP::getZero(v230, (llvm::Type *)1);
                              else
                                v232 = (llvm::Constant *)llvm::Constant::getNullValue(v230, v227);
                              v234 = (llvm::Type **)v232;
                              v19 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)0xF, v232, (llvm::Constant *)v20, v233);
                              if (!v19)
                              {
                                v235 = *v234;
                                if (*v234)
                                {
                                  v309 = v234;
                                  v310 = (llvm::APInt **)v20;
                                  v299 = **(_QWORD **)v235 + 1512;
                                  LODWORD(v305) = 15;
                                  *((_QWORD *)&v305 + 1) = &v309;
                                  *(_QWORD *)v306 = 2;
                                  *(_OWORD *)&v306[8] = 0u;
                                  v307 = 0u;
                                  v308 = 0;
                                  v19 = sub_1C537D4FC(v299, (uint64_t)v235, (unsigned __int8 *)&v305);
                                }
                                else
                                {
                                  v19 = 0;
                                }
                              }
                              v236 = v304;
                              v222 = llvm::Constant::getNullValue(*(llvm::Constant **)a2, v235);
                              *(_WORD *)&v306[16] = 257;
                              v223 = (uint64_t)v236;
                              goto LABEL_310;
                            }
                          }
                        }
                        v302 = 0;
                        *(_QWORD *)&v305 = &v304;
                        *((_QWORD *)&v305 + 1) = &v302;
                        *(_QWORD *)v306 = 0;
                        v237 = *(unsigned __int8 *)(v19 + 16);
                        if (v237 == 5)
                        {
                          if (*(_WORD *)(v19 + 18) != 26)
                            goto LABEL_343;
                          v245 = (llvm::APInt **)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF));
                          if (!*v245)
                            goto LABEL_343;
                          v304 = *v245;
                          if (!sub_1C4D8A004((uint64_t)&v305 + 8, v245[4]))
                            goto LABEL_343;
                        }
                        else
                        {
                          if (v237 != 54)
                            goto LABEL_343;
                          if (!*(_QWORD *)(v19 - 64))
                            goto LABEL_343;
                          v304 = *(llvm::APInt **)(v19 - 64);
                          if ((sub_1C4D89F84((uint64_t)&v305 + 8, *(unsigned __int8 **)(v19 - 32)) & 1) == 0)
                            goto LABEL_343;
                        }
                        v246 = v302;
                        v247 = *((_DWORD *)v302 + 2);
                        v248 = v302;
                        if (v247 >= 0x41)
                        {
                          if (v247 - llvm::APInt::countLeadingZerosSlowCase(v302) > 0x40)
                            goto LABEL_343;
                          v248 = *(llvm::APInt **)v246;
                        }
                        if (*(_QWORD *)v248 == v247 - 1)
                        {
                          v249 = *(_QWORD *)(a1 + 24);
                          v250 = v304;
                          *(_WORD *)&v306[16] = 257;
                          v251 = llvm::ConstantInt::get(*(llvm::ConstantInt ***)v304, v246, v238);
                          v252 = (_QWORD *)sub_1C534E5D8(v249, (uint64_t)v250, (uint64_t)v251, (uint64_t)&v305, 0);
                          v311 = 257;
                          v140 = (char *)operator new(0x80uLL);
                          *((_QWORD *)v140 + 6) = 0;
                          *((_QWORD *)v140 + 8) = *v252;
                          Neg = (uint64_t)(v140 + 64);
                          *((_QWORD *)v140 + 3) = v140 + 64;
                          v141 = v140 + 32;
                          *((_QWORD *)v140 + 7) = v140 + 64;
                          *((_QWORD *)v140 + 9) = 0;
                          v140[80] = 56;
                          v140[81] = 0;
                          *((_WORD *)v140 + 41) = 0;
                          *((_DWORD *)v140 + 21) = 2;
                          *(_OWORD *)(v140 + 88) = 0u;
                          *(_OWORD *)(v140 + 104) = 0u;
                          *((_DWORD *)v140 + 30) = 0;
                          *(_QWORD *)v140 = v252;
                          v255 = v252[1];
                          v254 = v252 + 1;
                          v253 = v255;
                          *((_QWORD *)v140 + 1) = v255;
                          if (v255)
                            *(_QWORD *)(v253 + 16) = v140 + 8;
                          *((_QWORD *)v140 + 2) = v254;
                          *v254 = v140;
                          v145 = (_QWORD *)(v20 + 8);
                          v146 = *(_QWORD *)(v20 + 8);
                          *((_QWORD *)v140 + 5) = v146;
                          v147 = v140 + 40;
                          *((_QWORD *)v140 + 4) = v20;
                          if (!v146)
                            goto LABEL_176;
                          goto LABEL_175;
                        }
LABEL_343:
                        *(_QWORD *)&v305 = &v304;
                        *((_QWORD *)&v305 + 1) = &v302;
                        *(_QWORD *)v306 = 0;
                        v256 = *(unsigned __int8 *)(v20 + 16);
                        if (v256 == 5)
                        {
                          if (*(_WORD *)(v20 + 18) != 26)
                            goto LABEL_361;
                          v258 = (llvm::APInt **)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF));
                          if (!*v258)
                            goto LABEL_361;
                          v304 = *v258;
                          if (!sub_1C4D8A004((uint64_t)&v305 + 8, v258[4]))
                            goto LABEL_361;
                        }
                        else
                        {
                          if (v256 != 54)
                            goto LABEL_361;
                          if (!*(_QWORD *)(v20 - 64))
                            goto LABEL_361;
                          v304 = *(llvm::APInt **)(v20 - 64);
                          if ((sub_1C4D89F84((uint64_t)&v305 + 8, *(unsigned __int8 **)(v20 - 32)) & 1) == 0)
                            goto LABEL_361;
                        }
                        v259 = v302;
                        v260 = *((_DWORD *)v302 + 2);
                        v261 = v302;
                        if (v260 >= 0x41)
                        {
                          if (v260 - llvm::APInt::countLeadingZerosSlowCase(v302) > 0x40)
                            goto LABEL_361;
                          v261 = *(llvm::APInt **)v259;
                        }
                        if (*(_QWORD *)v261 == v260 - 1)
                        {
                          v262 = *(_QWORD *)(a1 + 24);
                          v263 = v304;
                          *(_WORD *)&v306[16] = 257;
                          v264 = llvm::ConstantInt::get(*(llvm::ConstantInt ***)v304, v259, v257);
                          v265 = (_QWORD *)sub_1C534E5D8(v262, (uint64_t)v263, (uint64_t)v264, (uint64_t)&v305, 0);
                          v311 = 257;
                          v266 = (char *)operator new(0x80uLL);
                          *((_QWORD *)v266 + 6) = 0;
                          *((_QWORD *)v266 + 8) = *v265;
                          Neg = (uint64_t)(v266 + 64);
                          *((_QWORD *)v266 + 3) = v266 + 64;
                          *((_QWORD *)v266 + 7) = v266 + 64;
                          *((_QWORD *)v266 + 9) = 0;
                          v266[80] = 56;
                          v266[81] = 0;
                          *((_WORD *)v266 + 41) = 0;
                          *((_DWORD *)v266 + 21) = 2;
                          *(_OWORD *)(v266 + 88) = 0u;
                          *(_OWORD *)(v266 + 104) = 0u;
                          *((_DWORD *)v266 + 30) = 0;
                          *(_QWORD *)v266 = v265;
                          v269 = v265[1];
                          v268 = v265 + 1;
                          v267 = v269;
                          *((_QWORD *)v266 + 1) = v269;
                          if (v269)
                            *(_QWORD *)(v267 + 16) = v266 + 8;
                          *((_QWORD *)v266 + 2) = v268;
                          *v268 = v266;
                          v270 = *(_QWORD *)(v19 + 8);
                          *((_QWORD *)v266 + 5) = v270;
                          *((_QWORD *)v266 + 4) = v19;
                          if (v270)
                            *(_QWORD *)(v270 + 16) = v266 + 40;
                          *((_QWORD *)v266 + 6) = v75;
                          *(_QWORD *)v75 = v266 + 32;
                          goto LABEL_360;
                        }
LABEL_361:
                        *(_DWORD *)v306 = 64;
                        *(_QWORD *)&v305 = &v304;
                        *((_QWORD *)&v305 + 1) = (PrimitiveSizeInBits - 1);
                        *(_QWORD *)&v306[16] = &v304;
                        v271 = sub_1C582A34C((_QWORD **)&v305, *((_QWORD *)a2 - 8), PrimitiveSizeInBits - 1);
                        v274 = *((_QWORD *)a2 - 4);
                        if (v271 && (v273 = **(_QWORD **)&v306[16], **(_QWORD **)&v306[16] == v274))
                          v275 = 1;
                        else
                          v275 = sub_1C582A34C((_QWORD **)&v305, v274, v273)
                              && **(_QWORD **)&v306[16] == *((_QWORD *)a2 - 8);
                        if (*(_DWORD *)v306 >= 0x41u && *((_QWORD *)&v305 + 1))
                          MEMORY[0x1CAA32F9C](*((_QWORD *)&v305 + 1), 0x1000C8000313F17);
                        if (!v275)
                        {
                          sub_1C57833C8((_QWORD *)a1, (unsigned __int8 *)a2);
                          Neg = v285;
                          if (v285)
                            return (llvm::Value *)Neg;
                          v286 = *((_BYTE *)a2 + 17);
                          if ((v286 & 4) != 0
                            || (v287 = llvm::computeOverflowForSignedMul((llvm *)v19, (const llvm::Value *)v20, *(const llvm::Value **)(a1 + 80), *(const llvm::DataLayout **)(a1 + 56), a2, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1), v286 = *((_BYTE *)a2 + 17), v287 != 3))
                          {
                            v288 = 0;
                          }
                          else
                          {
                            v286 |= 4u;
                            *((_BYTE *)a2 + 17) = v286;
                            v288 = 1;
                          }
                          if ((v286 & 2) != 0
                            || llvm::computeOverflowForUnsignedMul((llvm *)v19, (const llvm::Value *)v20, *(const llvm::Value **)(a1 + 80), *(const llvm::DataLayout **)(a1 + 56), a2, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1) != 3)
                          {
                            if (!v288)
                              return 0;
                          }
                          else
                          {
                            *((_BYTE *)a2 + 17) |= 2u;
                          }
                          return a2;
                        }
                        v282 = *(uint64_t **)(a1 + 24);
                        v283 = (uint64_t *)v304;
                        Bool = llvm::ConstantInt::getBool(**(llvm::ConstantInt ***)a2, (llvm::LLVMContext *)((*((unsigned __int8 *)a2 + 17) >> 2) & 1), v272);
                        *(_WORD *)&v306[16] = 257;
                        BinaryIntrinsic = (uint64_t *)llvm::IRBuilderBase::CreateBinaryIntrinsic(v282, 1, v283, (uint64_t)Bool, 0, (uint64_t)&v305);
                        llvm::Value::takeName((llvm::Value *)BinaryIntrinsic, a2);
                        goto LABEL_395;
                      }
                    }
                    else
                    {
                      if (v206 != 53)
                        goto LABEL_272;
                      if (!sub_1C4D89CC8((uint64_t)&v305, *(llvm::Constant **)(v20 - 64)))
                        goto LABEL_272;
                      v207 = *(_QWORD *)(v20 - 32);
                      if (!v207)
                        goto LABEL_272;
                    }
                    **((_QWORD **)&v305 + 1) = v207;
                    v208 = v309;
                    *(_WORD *)&v306[16] = 257;
                    v209 = (char *)operator new(0x80uLL);
                    *((_QWORD *)v209 + 6) = 0;
                    *((_QWORD *)v209 + 5) = 0;
                    v210 = (llvm::APInt **)(v209 + 40);
                    *((_QWORD *)v209 + 8) = *(_QWORD *)v19;
                    Neg = (uint64_t)(v209 + 64);
                    *((_QWORD *)v209 + 3) = v209 + 64;
                    *((_QWORD *)v209 + 7) = v209 + 64;
                    *((_QWORD *)v209 + 9) = 0;
                    v209[80] = 53;
                    v209[81] = 0;
                    *((_WORD *)v209 + 41) = 0;
                    *((_DWORD *)v209 + 21) = 2;
                    *(_OWORD *)(v209 + 88) = 0u;
                    *(_OWORD *)(v209 + 104) = 0u;
                    *((_DWORD *)v209 + 30) = 0;
                    *(_QWORD *)v209 = v19;
                    v211 = *(_QWORD *)(v19 + 8);
                    *((_QWORD *)v209 + 1) = v211;
                    if (v211)
                      *(_QWORD *)(v211 + 16) = v209 + 8;
                    *((_QWORD *)v209 + 2) = v75;
                    *(_QWORD *)v75 = v209;
                    *((_QWORD *)v209 + 4) = v208;
                    if (v208)
                    {
                      v214 = v208[1];
                      v213 = v208 + 1;
                      v212 = v214;
                      *v210 = v214;
                      if (v214)
                        *((_QWORD *)v212 + 2) = v210;
                      *((_QWORD *)v209 + 6) = v213;
                      *v213 = v209 + 32;
                    }
                    llvm::Value::setName((uint64_t ***)v209 + 8, (uint64_t)&v305);
                    v19 = v20;
LABEL_268:
                    v44 = *(_BYTE *)(v19 + 17);
                    v215 = *((_BYTE *)a2 + 17);
                    if ((v215 & 2) != 0)
                      *(_BYTE *)(Neg + 17) |= 2u;
                    if ((v215 & 4) == 0)
                      return (llvm::Value *)Neg;
LABEL_39:
                    if ((v44 & 4) != 0)
                      *(_BYTE *)(Neg + 17) |= 4u;
                    return (llvm::Value *)Neg;
                  }
                  **((_QWORD **)&v305 + 1) = v196;
                  v197 = v309;
                  *(_WORD *)&v306[16] = 257;
                  v198 = (char *)operator new(0x80uLL);
                  *((_QWORD *)v198 + 5) = 0;
                  v199 = (llvm::APInt **)(v198 + 40);
                  *((_QWORD *)v198 + 6) = 0;
                  *((_QWORD *)v198 + 8) = *(_QWORD *)v20;
                  Neg = (uint64_t)(v198 + 64);
                  *((_QWORD *)v198 + 3) = v198 + 64;
                  *((_QWORD *)v198 + 7) = v198 + 64;
                  *((_QWORD *)v198 + 9) = 0;
                  v198[80] = 53;
                  v198[81] = 0;
                  *((_WORD *)v198 + 41) = 0;
                  *((_DWORD *)v198 + 21) = 2;
                  *(_OWORD *)(v198 + 88) = 0u;
                  *(_OWORD *)(v198 + 104) = 0u;
                  *((_DWORD *)v198 + 30) = 0;
                  *(_QWORD *)v198 = v20;
                  v202 = *(_QWORD *)(v20 + 8);
                  v201 = (_QWORD *)(v20 + 8);
                  v200 = v202;
                  *((_QWORD *)v198 + 1) = v202;
                  if (v202)
                    *(_QWORD *)(v200 + 16) = v198 + 8;
                  *((_QWORD *)v198 + 2) = v201;
                  *v201 = v198;
                  *((_QWORD *)v198 + 4) = v197;
                  if (v197)
                  {
                    v205 = v197[1];
                    v204 = v197 + 1;
                    v203 = v205;
                    *v199 = v205;
                    if (v205)
                      *((_QWORD *)v203 + 2) = v199;
                    *((_QWORD *)v198 + 6) = v204;
                    *v204 = v198 + 32;
                  }
                  llvm::Value::setName((uint64_t ***)v198 + 8, (uint64_t)&v305);
                  goto LABEL_268;
                }
LABEL_411:
                **(_QWORD **)v306 = v276;
                v291 = *(_QWORD *)(a1 + 24);
                *(_WORD *)&v306[16] = 257;
                v290 = (uint64_t *)sub_1C4EC4040(v291, (uint64_t)v304, (uint64_t)v303, (uint64_t)&v305, 0, 0);
                v311 = 257;
                v289 = (llvm::Type *)&v309;
                return llvm::BinaryOperator::CreateNeg(v290, v289, 0);
              }
              v239 = *(unsigned __int8 *)(v160 + 16);
              if (v239 == 5)
              {
                if (*(_WORD *)(v160 + 18) != 15)
                  goto LABEL_193;
                if (!sub_1C4E71060((uint64_t)&v305, *(llvm::Constant **)(v160 - 32 * (*(_DWORD *)(v160 + 20) & 0x7FFFFFF))))goto LABEL_193;
                v240 = *(_QWORD *)(v160 - 32 * (*(_DWORD *)(v160 + 20) & 0x7FFFFFF) + 32);
                if (!v240)
                  goto LABEL_193;
              }
              else
              {
                if (v239 != 43)
                  goto LABEL_193;
                if (!sub_1C4D8AC3C((uint64_t)&v305, *(llvm::Constant **)(v160 - 64)))
                  goto LABEL_193;
                v240 = *(_QWORD *)(v160 - 32);
                if (!v240)
                  goto LABEL_193;
              }
              **((_QWORD **)&v305 + 1) = v240;
              v276 = (_QWORD **)*((_QWORD *)a2 - 4);
              if (v276)
                goto LABEL_411;
              goto LABEL_193;
            }
            if (v159 != 5 || *((_WORD *)a2 + 9) != 17)
              goto LABEL_206;
            v166 = (_QWORD **)*((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
            v167 = v166[1];
            if (!v167 || v167[1])
            {
LABEL_204:
              v168 = (_QWORD **)((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
              v169 = v168[1];
              if (!v169 || v169[1])
                goto LABEL_206;
              v243 = *((unsigned __int8 *)v168 + 16);
              if (v243 == 5)
              {
                if (*((_WORD *)v168 + 9) != 15)
                  goto LABEL_206;
                if (!sub_1C4E71060((uint64_t)&v305, (llvm::Constant *)v168[-4 * (*((_DWORD *)v168 + 5) & 0x7FFFFFF)]))goto LABEL_206;
                v244 = v168[-4 * (*((_DWORD *)v168 + 5) & 0x7FFFFFF) + 4];
                if (!v244)
                  goto LABEL_206;
              }
              else
              {
                if (v243 != 43)
                  goto LABEL_206;
                if (!sub_1C4D8AC3C((uint64_t)&v305, (llvm::Constant *)*(v168 - 8)))
                  goto LABEL_206;
                v244 = *(v168 - 4);
                if (!v244)
                  goto LABEL_206;
              }
              **((_QWORD **)&v305 + 1) = v244;
              v276 = (_QWORD **)*((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
              if (!v276)
                goto LABEL_206;
              goto LABEL_411;
            }
            v241 = *((unsigned __int8 *)v166 + 16);
            if (v241 == 5)
            {
              if (*((_WORD *)v166 + 9) != 15)
                goto LABEL_204;
              if (!sub_1C4E71060((uint64_t)&v305, (llvm::Constant *)v166[-4 * (*((_DWORD *)v166 + 5) & 0x7FFFFFF)]))goto LABEL_204;
              v242 = v166[-4 * (*((_DWORD *)v166 + 5) & 0x7FFFFFF) + 4];
              if (!v242)
                goto LABEL_204;
            }
            else
            {
              if (v241 != 43)
                goto LABEL_204;
              if (!sub_1C4D8AC3C((uint64_t)&v305, (llvm::Constant *)*(v166 - 8)))
                goto LABEL_204;
              v242 = *(v166 - 4);
              if (!v242)
                goto LABEL_204;
            }
            **((_QWORD **)&v305 + 1) = v242;
            v276 = (_QWORD **)((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
            if (v276)
              goto LABEL_411;
            goto LABEL_204;
          }
        }
        else
        {
          if (v99 != 43)
            goto LABEL_190;
          if (!sub_1C4D8AC3C((uint64_t)&v305, *(llvm::Constant **)(v19 - 64)))
            goto LABEL_190;
          v100 = *(_QWORD *)(v19 - 32);
          if (!v100)
            goto LABEL_190;
        }
        **((_QWORD **)&v305 + 1) = v100;
        v310 = &v303;
        v101 = *(unsigned __int8 *)(v20 + 16);
        if (v101 == 5)
        {
          if (*(_WORD *)(v20 + 18) != 15)
            goto LABEL_190;
          if (!sub_1C4E71060((uint64_t)&v309, *(llvm::Constant **)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF))))goto LABEL_190;
          v102 = *(llvm::APInt **)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF) + 32);
          if (!v102)
            goto LABEL_190;
        }
        else
        {
          if (v101 != 43)
            goto LABEL_190;
          if (!sub_1C4D8AC3C((uint64_t)&v309, *(llvm::Constant **)(v20 - 64)))
            goto LABEL_190;
          v102 = *(llvm::APInt **)(v20 - 32);
          if (!v102)
            goto LABEL_190;
        }
        *v310 = v102;
        v148 = v303;
        v149 = v304;
        *(_WORD *)&v306[16] = 257;
        v150 = (char *)operator new(0x80uLL);
        v151 = v150;
        *((_QWORD *)v150 + 5) = 0;
        v152 = v150 + 40;
        *((_QWORD *)v150 + 6) = 0;
        *((_QWORD *)v150 + 8) = *(_QWORD *)v149;
        Neg = (uint64_t)(v150 + 64);
        *((_QWORD *)v150 + 3) = v150 + 64;
        *((_QWORD *)v150 + 7) = v150 + 64;
        *((_QWORD *)v150 + 9) = 0;
        v150[80] = 45;
        v150[81] = 0;
        *((_WORD *)v150 + 41) = 0;
        *((_DWORD *)v150 + 21) = 2;
        *(_OWORD *)(v150 + 88) = 0u;
        *(_OWORD *)(v150 + 104) = 0u;
        *((_DWORD *)v150 + 30) = 0;
        *(_QWORD *)v150 = v149;
        v155 = *((_QWORD *)v149 + 1);
        v154 = (_QWORD *)((char *)v149 + 8);
        v153 = v155;
        *((_QWORD *)v150 + 1) = v155;
        if (v155)
          *(_QWORD *)(v153 + 16) = v150 + 8;
        *((_QWORD *)v150 + 2) = v154;
        *v154 = v150;
        *((_QWORD *)v150 + 4) = v148;
        if (v148)
        {
          v158 = *((_QWORD *)v148 + 1);
          v157 = (_QWORD *)((char *)v148 + 8);
          v156 = v158;
          *v152 = v158;
          if (v158)
            *(_QWORD *)(v156 + 16) = v152;
          *((_QWORD *)v150 + 6) = v157;
          *v157 = v150 + 32;
        }
        llvm::Value::setName((uint64_t ***)v150 + 8, (uint64_t)&v305);
        if ((*((_BYTE *)a2 + 17) & 4) != 0 && (*(_BYTE *)(v19 + 17) & 4) != 0 && (*(_BYTE *)(v20 + 17) & 4) != 0)
          v151[81] |= 4u;
        return (llvm::Value *)Neg;
      }
      ExactLogBase2 = llvm::ConstantExpr::getExactLogBase2((llvm::ConstantExpr *)v60, v23);
      if (!ExactLogBase2)
        goto LABEL_90;
      v63 = ExactLogBase2;
      *(_WORD *)&v306[16] = 257;
      v64 = (char *)operator new(0x80uLL);
      v65 = v64;
      *((_QWORD *)v64 + 6) = 0;
      *((_QWORD *)v64 + 8) = *v59;
      Neg = (uint64_t)(v64 + 64);
      *((_QWORD *)v64 + 3) = v64 + 64;
      *((_QWORD *)v64 + 7) = v64 + 64;
      *((_QWORD *)v64 + 9) = 0;
      v64[80] = 53;
      v64[81] = 0;
      *((_WORD *)v64 + 41) = 0;
      *((_DWORD *)v64 + 21) = 2;
      *(_OWORD *)(v64 + 88) = 0u;
      *(_OWORD *)(v64 + 104) = 0u;
      *((_DWORD *)v64 + 30) = 0;
      *(_QWORD *)v64 = v59;
      v68 = v59[1];
      v67 = v59 + 1;
      v66 = v68;
      *((_QWORD *)v64 + 1) = v68;
      if (v68)
        *(_QWORD *)(v66 + 16) = v64 + 8;
      *((_QWORD *)v64 + 2) = v67;
      *v67 = v64;
      v69 = v63 + 1;
      v70 = v63[1];
      *((_QWORD *)v64 + 5) = v70;
      *((_QWORD *)v64 + 4) = v63;
      if (v70)
        *((_QWORD *)v70 + 2) = v64 + 40;
      *((_QWORD *)v64 + 6) = v69;
      *v69 = v64 + 32;
      llvm::Value::setName((uint64_t ***)v64 + 8, (uint64_t)&v305);
      v71 = *((_BYTE *)a2 + 17);
      if ((v71 & 2) != 0)
        v65[81] |= 2u;
      if ((v71 & 4) == 0)
        return (llvm::Value *)Neg;
      v304 = 0;
      v305 = (unint64_t)&v304;
      if (!sub_1C4D8A004((uint64_t)&v305, (llvm::Constant *)v63))
        return (llvm::Value *)Neg;
      v72 = v304;
      v73 = *((_DWORD *)v304 + 2);
      if (v73 >= 0x41)
      {
        if (v73 - llvm::APInt::countLeadingZerosSlowCase(v304) > 0x40)
          goto LABEL_89;
        v72 = *(llvm::APInt **)v72;
      }
      if (*(_QWORD *)v72 == v73 - 1)
        return (llvm::Value *)Neg;
LABEL_89:
      v65[81] |= 4u;
    }
  }
  return (llvm::Value *)Neg;
}

llvm::Value *sub_1C582236C(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  llvm::Value *result;
  int v39;
  uint64_t v40;
  __int16 v41;
  char v42;
  int v43;
  uint64_t v44;
  uint64_t *v45;
  unsigned __int8 *v46;
  int v47;
  uint64_t v48;
  __int16 v49;
  char v50;
  int v51;
  uint64_t v52;
  uint64_t *v53;
  _BYTE v54[32];
  __int16 v55;
  uint64_t *v56;
  __int128 v57;
  uint64_t *v58;
  __int16 v59;
  uint64_t *v60;
  uint64_t v61;

  v61 = 0;
  v60 = 0;
  v56 = &v61;
  *((_QWORD *)&v57 + 1) = &v60;
  v4 = *(unsigned __int8 *)(a1 + 16);
  if (v4 == 45)
  {
    v5 = *(_QWORD *)(a1 - 64);
    v6 = *(_QWORD *)(v5 + 8);
    if (v6 && !*(_QWORD *)(v6 + 8) && sub_1C5829F08(&v56, v5) && (v7 = *(_QWORD *)(a1 - 32)) != 0
      || (v8 = *(_QWORD *)(a1 - 32), (v9 = *(_QWORD *)(v8 + 8)) != 0)
      && !*(_QWORD *)(v9 + 8)
      && sub_1C5829F08(&v56, v8)
      && (v7 = *(_QWORD *)(a1 - 64)) != 0)
    {
      **((_QWORD **)&v57 + 1) = v7;
LABEL_25:
      v19 = (*(_BYTE *)(a1 + 17) & 6) != 0;
      v59 = 257;
      v20 = sub_1C5346748(a2, (uint64_t)v60, (uint64_t)&v56, 0, v19);
      v21 = v61;
      v22 = v60;
LABEL_48:
      v59 = 257;
      return llvm::IRBuilderBase::CreateSelect((uint64_t *)a2, v21, v22, (uint64_t)v20, (uint64_t)&v56, 0);
    }
  }
  else if (v4 == 5 && *(_WORD *)(a1 + 18) == 17)
  {
    v11 = *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
    v12 = -v11;
    v13 = *(_QWORD *)(a1 - 32 * v11);
    v14 = *(_QWORD *)(v13 + 8);
    if (v14)
    {
      if (!*(_QWORD *)(v14 + 8))
      {
        v15 = sub_1C5829F08(&v56, v13);
        v12 = -(uint64_t)(*(_DWORD *)(a1 + 20) & 0x7FFFFFF);
        if (v15)
        {
          v16 = *(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32);
          if (v16)
            goto LABEL_24;
        }
      }
    }
    v17 = *(_QWORD *)(a1 + 32 * v12 + 32);
    v18 = *(_QWORD *)(v17 + 8);
    if (v18)
    {
      if (!*(_QWORD *)(v18 + 8))
      {
        if (sub_1C5829F08(&v56, v17))
        {
          v16 = *(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
          if (v16)
          {
LABEL_24:
            **((_QWORD **)&v57 + 1) = v16;
            goto LABEL_25;
          }
        }
      }
    }
  }
  v56 = &v61;
  *((_QWORD *)&v57 + 1) = &v60;
  v23 = *(unsigned __int8 *)(a1 + 16);
  if (v23 == 45)
  {
    v24 = *(_QWORD *)(a1 - 64);
    v25 = *(_QWORD *)(v24 + 8);
    if (v25 && !*(_QWORD *)(v25 + 8) && sub_1C5829FB4(&v56, v24) && (v26 = *(_QWORD *)(a1 - 32)) != 0
      || (v27 = *(_QWORD *)(a1 - 32), (v28 = *(_QWORD *)(v27 + 8)) != 0)
      && !*(_QWORD *)(v28 + 8)
      && sub_1C5829FB4(&v56, v27)
      && (v26 = *(_QWORD *)(a1 - 64)) != 0)
    {
      **((_QWORD **)&v57 + 1) = v26;
LABEL_47:
      v37 = (*(_BYTE *)(a1 + 17) & 6) != 0;
      v59 = 257;
      v22 = (uint64_t *)sub_1C5346748(a2, (uint64_t)v60, (uint64_t)&v56, 0, v37);
      v21 = v61;
      v20 = (unsigned __int8 *)v60;
      goto LABEL_48;
    }
  }
  else if (v23 == 5 && *(_WORD *)(a1 + 18) == 17)
  {
    v29 = *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
    v30 = -v29;
    v31 = *(_QWORD *)(a1 - 32 * v29);
    v32 = *(_QWORD *)(v31 + 8);
    if (v32)
    {
      if (!*(_QWORD *)(v32 + 8))
      {
        v33 = sub_1C5829FB4(&v56, v31);
        v30 = -(uint64_t)(*(_DWORD *)(a1 + 20) & 0x7FFFFFF);
        if (v33)
        {
          v34 = *(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32);
          if (v34)
            goto LABEL_46;
        }
      }
    }
    v35 = *(_QWORD *)(a1 + 32 * v30 + 32);
    v36 = *(_QWORD *)(v35 + 8);
    if (v36)
    {
      if (!*(_QWORD *)(v36 + 8))
      {
        if (sub_1C5829FB4(&v56, v35))
        {
          v34 = *(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
          if (v34)
          {
LABEL_46:
            **((_QWORD **)&v57 + 1) = v34;
            goto LABEL_47;
          }
        }
      }
    }
  }
  v56 = &v61;
  v57 = xmmword_1C8661980;
  v58 = (uint64_t *)&v60;
  if (sub_1C582A060((uint64_t)&v56, a1, (uint64_t)&word_1C8661000))
  {
    v39 = *(_DWORD *)(a2 + 96);
    v40 = *(_QWORD *)(a2 + 88);
    v41 = *(_WORD *)(a2 + 100);
    v42 = *(_BYTE *)(a2 + 102);
    v43 = *(unsigned __int8 *)(a1 + 17) >> 1;
    if (v43 == 127)
      v43 = -1;
    *(_DWORD *)(a2 + 96) = v43;
    v44 = v61;
    v45 = v60;
    v59 = 257;
    v46 = sub_1C4772890((uint64_t *)a2, (uint64_t)v60, (uint64_t)&v56, 0);
    v55 = 257;
    result = llvm::IRBuilderBase::CreateSelect((uint64_t *)a2, v44, v45, (uint64_t)v46, (uint64_t)v54, 0);
    *(_DWORD *)(a2 + 96) = v39;
    *(_QWORD *)(a2 + 88) = v40;
    *(_WORD *)(a2 + 100) = v41;
    *(_BYTE *)(a2 + 102) = v42;
  }
  else
  {
    v56 = &v61;
    v57 = xmmword_1C8661990;
    v58 = (uint64_t *)&v60;
    if (sub_1C582A060((uint64_t)&v56, a1, (uint64_t)&word_1C8661000))
    {
      v47 = *(_DWORD *)(a2 + 96);
      v48 = *(_QWORD *)(a2 + 88);
      v49 = *(_WORD *)(a2 + 100);
      v50 = *(_BYTE *)(a2 + 102);
      v51 = *(unsigned __int8 *)(a1 + 17) >> 1;
      if (v51 == 127)
        v51 = -1;
      *(_DWORD *)(a2 + 96) = v51;
      v52 = v61;
      v59 = 257;
      v53 = (uint64_t *)sub_1C4772890((uint64_t *)a2, (uint64_t)v60, (uint64_t)&v56, 0);
      v55 = 257;
      result = llvm::IRBuilderBase::CreateSelect((uint64_t *)a2, v52, v53, (uint64_t)v60, (uint64_t)v54, 0);
      *(_DWORD *)(a2 + 96) = v47;
      *(_QWORD *)(a2 + 88) = v48;
      *(_WORD *)(a2 + 100) = v49;
      *(_BYTE *)(a2 + 102) = v50;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t ***sub_1C58227A4(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  _QWORD *v10;
  uint64_t ***v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int16 v27;
  char v28;
  int v29;
  uint64_t *v30;
  uint64_t *v31;
  llvm::Value *UnaryIntrinsic;
  _QWORD *v33[3];
  _QWORD *v34;
  uint64_t v35;
  _QWORD **v36;
  __int16 v37;
  uint64_t v38;
  _QWORD *v39;

  v4 = a2[16] - 28;
  v5 = *((_QWORD *)a2 - 8);
  v6 = *((_QWORD *)a2 - 4);
  v38 = 0;
  v39 = 0;
  v34 = &v39;
  if (sub_1C4E7B6EC(&v34, v5))
  {
    v33[0] = &v38;
    if (sub_1C4E7B6EC(v33, v6))
    {
      v7 = v38;
      v8 = v39;
      v37 = 257;
      v9 = (char *)operator new(0x80uLL);
      *((_QWORD *)v9 + 5) = 0;
      v10 = v9 + 40;
      *((_QWORD *)v9 + 6) = 0;
      *((_QWORD *)v9 + 8) = *v8;
      v11 = (uint64_t ***)(v9 + 64);
      *((_QWORD *)v9 + 3) = v9 + 64;
      *((_QWORD *)v9 + 7) = v9 + 64;
      *((_QWORD *)v9 + 9) = 0;
      v9[80] = v4 + 28;
      v9[81] = 0;
      *((_WORD *)v9 + 41) = 0;
      *((_DWORD *)v9 + 21) = 2;
      *(_OWORD *)(v9 + 88) = 0u;
      *(_OWORD *)(v9 + 104) = 0u;
      *((_DWORD *)v9 + 30) = 0;
      *(_QWORD *)v9 = v8;
      v14 = v8[1];
      v13 = v8 + 1;
      v12 = v14;
      *((_QWORD *)v9 + 1) = v14;
      if (v14)
        *(_QWORD *)(v12 + 16) = v9 + 8;
      *((_QWORD *)v9 + 2) = v13;
      *v13 = v9;
      *((_QWORD *)v9 + 4) = v7;
      if (v7)
      {
        v17 = *(_QWORD *)(v7 + 8);
        v16 = (_QWORD *)(v7 + 8);
        v15 = v17;
        *v10 = v17;
        if (v17)
          *(_QWORD *)(v15 + 16) = v10;
        *((_QWORD *)v9 + 6) = v16;
        *v16 = v9 + 32;
      }
LABEL_14:
      llvm::Value::setName(v11, (uint64_t)&v34);
      llvm::Instruction::copyIRFlags((uint64_t)v11, (uint64_t)a2, 1);
      return v11;
    }
  }
  if (v5 == v6)
  {
    LODWORD(v34) = 139;
    v35 = 0;
    v36 = &v39;
    if (sub_1C4E75A6C((uint64_t)&v34, v5))
    {
      v18 = v39;
      v37 = 257;
      v19 = (char *)operator new(0x80uLL);
      *((_QWORD *)v19 + 8) = *v18;
      v11 = (uint64_t ***)(v19 + 64);
      *((_QWORD *)v19 + 3) = v19 + 64;
      *((_QWORD *)v19 + 7) = v19 + 64;
      *((_QWORD *)v19 + 9) = 0;
      v19[80] = v4 + 28;
      v19[81] = 0;
      *((_WORD *)v19 + 41) = 0;
      *((_DWORD *)v19 + 21) = 2;
      *((_DWORD *)v19 + 30) = 0;
      *(_OWORD *)(v19 + 104) = 0u;
      *(_OWORD *)(v19 + 88) = 0u;
      *(_QWORD *)v19 = v18;
      v20 = v18[1];
      *((_QWORD *)v19 + 1) = v20;
      if (v20)
        *(_QWORD *)(v20 + 16) = v19 + 8;
      *((_QWORD *)v19 + 4) = v18;
      *((_QWORD *)v19 + 5) = v19;
      *((_QWORD *)v19 + 2) = v19 + 40;
      *((_QWORD *)v19 + 6) = v18 + 1;
      v18[1] = v19 + 32;
      goto LABEL_14;
    }
  }
  LODWORD(v34) = 139;
  v35 = 0;
  v36 = &v39;
  if (!sub_1C4E75A6C((uint64_t)&v34, v5))
    return 0;
  LODWORD(v33[0]) = 139;
  v33[1] = 0;
  v33[2] = &v38;
  if (!sub_1C4E75A6C((uint64_t)v33, v6))
    return 0;
  v21 = *(_QWORD *)(v5 + 8);
  if (!v21 || *(_QWORD *)(v21 + 8))
  {
    v22 = *(_QWORD *)(v6 + 8);
    if (!v22 || *(_QWORD *)(v22 + 8))
      return 0;
  }
  v24 = *(_QWORD *)(a1 + 24);
  v25 = *(_DWORD *)(v24 + 96);
  v26 = *(_QWORD *)(v24 + 88);
  v27 = *(_WORD *)(v24 + 100);
  v28 = *(_BYTE *)(v24 + 102);
  v29 = a2[17] >> 1;
  if (v29 == 127)
    v29 = -1;
  *(_DWORD *)(v24 + 96) = v29;
  v37 = 257;
  v30 = (uint64_t *)sub_1C4773860(v24, v4, v39, v38, (uint64_t)&v34, 0);
  v31 = *(uint64_t **)(a1 + 24);
  v37 = 257;
  UnaryIntrinsic = (llvm::Value *)llvm::IRBuilderBase::CreateUnaryIntrinsic(v31, 139, v30, 0, (uint64_t)&v34);
  llvm::Value::takeName(UnaryIntrinsic, (llvm::Value *)a2);
  v11 = (uint64_t ***)sub_1C577F888(a1, (llvm::ValueAsMetadata *)a2, UnaryIntrinsic);
  *(_DWORD *)(v24 + 96) = v25;
  *(_QWORD *)(v24 + 88) = v26;
  *(_WORD *)(v24 + 100) = v27;
  *(_BYTE *)(v24 + 102) = v28;
  return v11;
}

llvm::UndefValue **sub_1C5822AA4(uint64_t a1, uint64_t a2)
{
  llvm *v4;
  llvm::Constant *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  int v9;
  llvm::Value *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  llvm::Type *v16;
  llvm::ValueHandleBase *FMul;
  uint64_t *v18;
  char *v19;
  uint64_t *v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t ***v28;
  uint64_t UnaryIntrinsic;
  llvm::Value *v30;
  uint64_t v31;
  llvm::ValueAsMetadata *v32;
  llvm::Constant *v33;
  llvm::Constant *v34;
  uint64_t v35;
  unsigned int v36;
  unsigned __int8 *v37;
  uint64_t **v38;
  llvm::ValueHandleBase *v39;
  llvm::Constant *v40;
  llvm::Constant *v41;
  uint64_t *v42;
  char *v43;
  _QWORD *v44;
  char v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  int v52;
  unsigned __int8 *v53;
  uint64_t *v54;
  llvm::Constant *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t *v64;
  uint64_t *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  int v76;
  int v77;
  uint64_t *v78;
  int v79;
  uint64_t *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t *v96;
  uint64_t *v97;
  int v98;
  uint64_t *v99;
  uint64_t *v100;
  int v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t *v106;
  char *v107;
  uint64_t *v108;
  uint64_t ***v109;
  char v110;
  uint64_t v111;
  int v112;
  uint64_t *v113;
  llvm::Constant *v114;
  uint64_t **v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t **v118;
  uint64_t *v119;
  uint64_t *v120;
  int v121;
  uint64_t *v122;
  int v123;
  uint64_t *v124;
  uint64_t **v125;
  uint64_t *v126;
  uint64_t **v127;
  uint64_t v128;
  uint64_t ***v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t *v137;
  int v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t **v141;
  uint64_t **v142;
  uint64_t v143;
  uint64_t *v144;
  char *v145;
  uint64_t *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t **v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  llvm::Constant *v164;
  uint64_t v165;
  int v166;
  unsigned __int8 *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  int v176;
  unsigned __int8 **v177;
  llvm::Constant *v178;
  llvm::Constant *v179;
  llvm::Constant *v180;
  llvm::Constant *v181;
  llvm::Constant *v182;
  int v183;
  llvm::ConstantExpr **v184;
  llvm::ConstantExpr *v185;
  llvm::ConstantExpr *v186;
  llvm::ConstantExpr *v187;
  llvm::Constant *v188;
  llvm::ValueHandleBase *v189;
  char *v190;
  _QWORD *v191;
  uint64_t ***v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  int v199;
  llvm::Constant *v200;
  llvm::Constant *v201;
  llvm::Constant *v202;
  llvm::Constant *v203;
  char *v204;
  char *v205;
  char v206;
  uint64_t v207;
  llvm::ValueHandleBase *v208;
  char *v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  llvm::ValueHandleBase *FDiv;
  llvm::Constant *v222;
  llvm::Constant *v223;
  char *v224;
  _QWORD *v225;
  llvm::ValueHandleBase **v226;
  char v227;
  uint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  uint64_t v231;
  llvm::ValueHandleBase ***v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t *v237;
  uint64_t *v238;
  __int128 v239;
  __int128 v240;
  uint64_t **v241;
  uint64_t v242;
  uint64_t v243[2];
  llvm::Constant *v244;
  uint64_t **v245;
  uint64_t **v246;
  uint64_t v247;
  uint64_t **v248;
  uint64_t v249;

  v249 = *MEMORY[0x1E0C80C00];
  v4 = *(llvm **)(a2 - 64);
  v5 = *(llvm::Constant **)(a2 - 32);
  v6 = (unint64_t)*(unsigned __int8 *)(a2 + 17) >> 1;
  v7 = *(_OWORD *)(a1 + 120);
  v8 = *(_OWORD *)(a1 + 104);
  v239 = *(_OWORD *)(a1 + 88);
  v240 = v8;
  v242 = *((_QWORD *)&v7 + 1);
  v241 = (uint64_t **)a2;
  if ((_DWORD)v6 == 127)
    v9 = -1;
  else
    v9 = v6;
  v10 = (llvm::Value *)sub_1C4E6CFEC(v4, v5, v9, (llvm::Constant **)&v239, 0, (llvm::DSOLocalEquivalent **)1);
  if (v10)
    return sub_1C577F888(a1, (llvm::ValueAsMetadata *)a2, v10);
  if ((sub_1C577D620(a1, (llvm::Instruction *)a2) & 1) != 0)
    return (llvm::UndefValue **)a2;
  v12 = sub_1C57826B8(a1, (unsigned __int8 *)a2);
  if (!v12)
  {
    v12 = (uint64_t)sub_1C578171C(a1, a2);
    if (!v12)
    {
      v12 = sub_1C5781CD4(a1, (_BYTE *)a2);
      if (!v12)
      {
        v10 = sub_1C582236C(a2, *(_QWORD *)(a1 + 24));
        if (v10)
          return sub_1C577F888(a1, (llvm::ValueAsMetadata *)a2, v10);
        v12 = (uint64_t)sub_1C58227A4(a1, (unsigned __int8 *)a2);
        if (!v12)
        {
          v13 = *(_QWORD *)(a2 - 64);
          v14 = *(uint64_t **)(a2 - 32);
          *(_QWORD *)&v239 = 0xBFF0000000000000;
          if (sub_1C4E7BE28((const llvm::APInt **)&v239, (unsigned __int8 *)v14))
          {
            LOWORD(v241) = 257;
            v15 = llvm::UnaryOperator::Create(12, (uint64_t *)v13, (uint64_t)&v239, 0);
            v12 = v15;
LABEL_29:
            llvm::Instruction::copyIRFlags(v15, a2, 1);
            return (llvm::UndefValue **)v12;
          }
          v237 = 0;
          v238 = 0;
          *(_QWORD *)&v239 = &v238;
          if (sub_1C4E7B6EC((_QWORD **)&v239, v13) && v14 && *((unsigned __int8 *)v14 + 16) <= 0x14u)
          {
            FMul = (llvm::ValueHandleBase *)v238;
            v18 = (uint64_t *)llvm::ConstantExpr::get((llvm::ConstantExpr *)0xC, (unsigned __int8 *)v14, 0, 0, v16);
            LOWORD(v241) = 257;
            v19 = (char *)operator new(0x80uLL);
            *((_QWORD *)v19 + 5) = 0;
            v20 = (uint64_t *)(v19 + 40);
            *((_QWORD *)v19 + 6) = 0;
            *((_QWORD *)v19 + 8) = *(_QWORD *)FMul;
            v12 = (uint64_t)(v19 + 64);
            *((_QWORD *)v19 + 3) = v19 + 64;
            *((_QWORD *)v19 + 7) = v19 + 64;
            *((_QWORD *)v19 + 9) = 0;
            v21 = 46;
LABEL_20:
            v19[80] = v21;
            v19[81] = 0;
            *((_WORD *)v19 + 41) = 0;
            *((_DWORD *)v19 + 21) = 2;
            *(_OWORD *)(v19 + 88) = 0u;
            *(_OWORD *)(v19 + 104) = 0u;
            *((_DWORD *)v19 + 30) = 0;
            *(_QWORD *)v19 = FMul;
            v24 = *((_QWORD *)FMul + 1);
            v23 = (_QWORD *)((char *)FMul + 8);
            v22 = v24;
            *((_QWORD *)v19 + 1) = v24;
            if (v24)
              *(_QWORD *)(v22 + 16) = v19 + 8;
            *((_QWORD *)v19 + 2) = v23;
            *v23 = v19;
LABEL_23:
            *((_QWORD *)v19 + 4) = v18;
            if (v18)
            {
              v27 = v18[1];
              v26 = v18 + 1;
              v25 = v27;
              *v20 = v27;
              if (v27)
                *(_QWORD *)(v25 + 16) = v20;
              *((_QWORD *)v19 + 6) = v26;
              *v26 = v19 + 32;
            }
LABEL_27:
            v28 = (uint64_t ***)v12;
LABEL_28:
            llvm::Value::setName(v28, (uint64_t)&v239);
            v15 = v12;
            goto LABEL_29;
          }
          UnaryIntrinsic = (uint64_t)sub_1C577F49C(a1, (unsigned __int8 *)a2, (llvm *)v13, (llvm::Constant *)v14);
          if (UnaryIntrinsic)
            goto LABEL_31;
          if ((*(_BYTE *)(a2 + 17) & 2) == 0)
            goto LABEL_163;
          if (!v14
            || *((unsigned __int8 *)v14 + 16) > 0x14u
            || !llvm::Constant::isFiniteNonZeroFP((llvm::Constant *)v14))
          {
            goto LABEL_70;
          }
          v35 = *(_QWORD *)(v13 + 8);
          if (v35 && !*(_QWORD *)(v35 + 8))
          {
            v52 = *(unsigned __int8 *)(v13 + 16);
            if (v52 == 5)
            {
              if (*(_WORD *)(v13 + 18) != 21)
                goto LABEL_39;
              v140 = v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF);
              v53 = *(unsigned __int8 **)v140;
              if (!*(_QWORD *)v140)
                goto LABEL_39;
              v54 = *(uint64_t **)(v140 + 32);
              if (!v54)
                goto LABEL_39;
            }
            else
            {
              if (v52 != 49)
                goto LABEL_39;
              v53 = *(unsigned __int8 **)(v13 - 64);
              if (!v53)
                goto LABEL_39;
              if (v53[16] > 0x14u)
                goto LABEL_39;
              v54 = *(uint64_t **)(v13 - 32);
              if (!v54)
                goto LABEL_39;
            }
            v238 = v54;
            FMul = llvm::ConstantExpr::getFMul((llvm::ConstantExpr *)v14, (llvm::Constant *)v53, v33, v34);
            if (llvm::Constant::isNormalFP(FMul))
            {
              v18 = v238;
              LOWORD(v241) = 257;
              v19 = (char *)operator new(0x80uLL);
              *((_QWORD *)v19 + 5) = 0;
              v20 = (uint64_t *)(v19 + 40);
              *((_QWORD *)v19 + 6) = 0;
              *((_QWORD *)v19 + 8) = *(_QWORD *)FMul;
              *((_QWORD *)v19 + 3) = v19 + 64;
              v12 = (uint64_t)(v19 + 64);
              *((_QWORD *)v19 + 7) = v19 + 64;
              *((_QWORD *)v19 + 9) = 0;
              v21 = 49;
              goto LABEL_20;
            }
          }
LABEL_39:
          v36 = *(unsigned __int8 *)(v13 + 16);
          if (v36 == 5)
          {
            if (*(_WORD *)(v13 + 18) != 21)
              goto LABEL_66;
            v38 = (uint64_t **)(v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF));
            if (!*v38)
              goto LABEL_66;
            v238 = *v38;
            v37 = (unsigned __int8 *)v38[4];
            if (!v37)
              goto LABEL_66;
          }
          else
          {
            if (v36 != 49)
              goto LABEL_67;
            if (!*(_QWORD *)(v13 - 64)
              || (v238 = *(uint64_t **)(v13 - 64), (v37 = *(unsigned __int8 **)(v13 - 32)) == 0)
              || v37[16] > 0x14u)
            {
LABEL_66:
              v36 = *(unsigned __int8 *)(v13 + 16);
LABEL_67:
              if (v36 < 0x1C)
                goto LABEL_70;
              v57 = *(_QWORD *)(v13 + 8);
              if (!v57 || *(_QWORD *)(v57 + 8) || v36 != 44 && v36 != 42)
                goto LABEL_70;
              v138 = *(_DWORD *)(v13 + 20);
              v139 = (v138 & 0x40000000) != 0 ? *(uint64_t **)(v13 - 8) : (uint64_t *)(v13 - 32 * (v138 & 0x7FFFFFF));
              v160 = *v139;
              v161 = v139[4];
              v162 = *(unsigned __int8 *)(v160 + 16) >= 0x15u ? 0 : v160;
              v163 = *(unsigned __int8 *)(v161 + 16) >= 0x15u ? 0 : v161;
              v164 = (llvm::Constant *)(v162 ? v162 : v163);
              v165 = v162 ? v161 : v160;
              if (!v164 || !llvm::Constant::isFiniteNonZeroFP(v164))
                goto LABEL_70;
              v166 = *(unsigned __int8 *)(v165 + 16);
              switch(v166)
              {
                case 5:
                  v176 = *(unsigned __int16 *)(v165 + 18);
                  if (v176 == 21)
                  {
                    v177 = (unsigned __int8 **)(v165 - 32 * (*(_DWORD *)(v165 + 20) & 0x7FFFFFF));
                    v167 = v177[4];
                    if (!v167)
                    {
                      v167 = *v177;
                      if (!*v177)
                        goto LABEL_70;
                    }
                  }
                  else
                  {
                    if (v176 != 18)
                      goto LABEL_70;
                    v167 = *(unsigned __int8 **)(v165 - 32 * (*(_DWORD *)(v165 + 20) & 0x7FFFFFF) + 32);
                    if (!v167)
                      goto LABEL_70;
                  }
                  goto LABEL_320;
                case 49:
                  v167 = *(unsigned __int8 **)(v165 - 32);
                  if (v167 && v167[16] <= 0x14u)
                  {
LABEL_320:
                    if (!llvm::Constant::isFiniteNonZeroFP((llvm::Constant *)v167))
                      goto LABEL_70;
                    v180 = llvm::ConstantExpr::getFMul(v164, (llvm::Constant *)v14, v178, v179);
                    if (!llvm::Constant::isNormalFP(v180))
                      goto LABEL_70;
                    v183 = *(_DWORD *)(v165 + 20);
                    if ((v183 & 0x40000000) != 0)
                      v184 = *(llvm::ConstantExpr ***)(v165 - 8);
                    else
                      v184 = (llvm::ConstantExpr **)(v165 - 32 * (v183 & 0x7FFFFFF));
                    v185 = *v184;
                    v186 = v184[4];
                    if (*((unsigned __int8 *)*v184 + 16) >= 0x15u)
                      v187 = 0;
                    else
                      v187 = *v184;
                    if (*((unsigned __int8 *)v186 + 16) >= 0x15u)
                      v188 = 0;
                    else
                      v188 = v184[4];
                    if (*(_BYTE *)(v165 + 16) == 46)
                    {
                      if (v188)
                        v187 = v188;
                      v189 = llvm::ConstantExpr::getFMul(v187, (llvm::Constant *)v14, v181, v182);
                      if (!llvm::Constant::isNormalFP(v189))
                        goto LABEL_70;
                      if (!v188)
                        v185 = v186;
                      LOWORD(v241) = 257;
                      v190 = (char *)operator new(0x80uLL);
                      *((_QWORD *)v190 + 5) = 0;
                      v191 = v190 + 40;
                      *((_QWORD *)v190 + 6) = 0;
                      *((_QWORD *)v190 + 8) = *(_QWORD *)v185;
                      v192 = (uint64_t ***)(v190 + 64);
                      *((_QWORD *)v190 + 3) = v190 + 64;
                      *((_QWORD *)v190 + 7) = v190 + 64;
                      *((_QWORD *)v190 + 9) = 0;
                      v190[80] = 46;
                      v190[81] = 0;
                      *((_WORD *)v190 + 41) = 0;
                      *((_DWORD *)v190 + 21) = 2;
                      *(_OWORD *)(v190 + 88) = 0u;
                      *(_OWORD *)(v190 + 104) = 0u;
                      *((_DWORD *)v190 + 30) = 0;
                      *(_QWORD *)v190 = v185;
                      v195 = *((_QWORD *)v185 + 1);
                      v194 = (_QWORD *)((char *)v185 + 8);
                      v193 = v195;
                      *((_QWORD *)v190 + 1) = v195;
                      if (v195)
                        *(_QWORD *)(v193 + 16) = v190 + 8;
                      *((_QWORD *)v190 + 2) = v194;
                      *v194 = v190;
                      *((_QWORD *)v190 + 4) = v189;
                      if (v189)
                      {
                        v198 = *((_QWORD *)v189 + 1);
                        v197 = (_QWORD *)((char *)v189 + 8);
                        v196 = v198;
                        *v191 = v198;
                        if (v198)
                          *(_QWORD *)(v196 + 16) = v191;
                        *((_QWORD *)v190 + 6) = v197;
                        *v197 = v190 + 32;
                      }
                    }
                    else if (v187)
                    {
                      v207 = *(_QWORD *)(v165 + 8);
                      if (!v207)
                        goto LABEL_70;
                      if (*(_QWORD *)(v207 + 8))
                        goto LABEL_70;
                      v208 = llvm::ConstantExpr::getFMul(v187, (llvm::Constant *)v14, v181, v182);
                      if (!llvm::Constant::isNormalFP(v208))
                        goto LABEL_70;
                      LOWORD(v241) = 257;
                      v209 = (char *)operator new(0x80uLL);
                      *(_QWORD *)v209 = 0;
                      *((_QWORD *)v209 + 2) = 0;
                      *((_QWORD *)v209 + 1) = 0;
                      *((_QWORD *)v209 + 5) = 0;
                      *((_QWORD *)v209 + 6) = 0;
                      *((_QWORD *)v209 + 4) = 0;
                      *((_QWORD *)v209 + 8) = *(_QWORD *)v208;
                      v192 = (uint64_t ***)(v209 + 64);
                      *((_QWORD *)v209 + 3) = v209 + 64;
                      *((_QWORD *)v209 + 7) = v209 + 64;
                      *((_QWORD *)v209 + 9) = 0;
                      v209[80] = 49;
                      v209[81] = 0;
                      *((_WORD *)v209 + 41) = 0;
                      *((_DWORD *)v209 + 21) = 2;
                      *((_DWORD *)v209 + 30) = 0;
                      *(_OWORD *)(v209 + 104) = 0u;
                      *(_OWORD *)(v209 + 88) = 0u;
                      *(_QWORD *)v209 = v208;
                      v212 = *((_QWORD *)v208 + 1);
                      v211 = (_QWORD *)((char *)v208 + 8);
                      v210 = v212;
                      *((_QWORD *)v209 + 1) = v212;
                      if (v212)
                        *(_QWORD *)(v210 + 16) = v209 + 8;
                      *((_QWORD *)v209 + 2) = v211;
                      *v211 = v209;
                      if (*((_QWORD *)v209 + 4))
                      {
                        **((_QWORD **)v209 + 6) = *((_QWORD *)v209 + 5);
                        v234 = *((_QWORD *)v209 + 5);
                        if (v234)
                          *(_QWORD *)(v234 + 16) = *((_QWORD *)v209 + 6);
                      }
                      *((_QWORD *)v209 + 4) = v186;
                      v215 = *((_QWORD *)v186 + 1);
                      v214 = (_QWORD *)((char *)v186 + 8);
                      v213 = v215;
                      *((_QWORD *)v209 + 5) = v215;
                      if (v215)
                        *(_QWORD *)(v213 + 16) = v209 + 40;
                      *((_QWORD *)v209 + 6) = v214;
                      *v214 = v209 + 32;
                    }
                    else
                    {
                      FDiv = llvm::ConstantExpr::getFDiv((llvm::ConstantExpr *)v14, v188, v181, v182);
                      if (llvm::Constant::isNormalFP(FDiv))
                      {
                        LOWORD(v241) = 257;
                        v224 = (char *)operator new(0x80uLL);
                        *(_QWORD *)v224 = 0;
                        *((_QWORD *)v224 + 2) = 0;
                        *((_QWORD *)v224 + 1) = 0;
                        v225 = v224 + 8;
                        *((_QWORD *)v224 + 5) = 0;
                        *((_QWORD *)v224 + 6) = 0;
                        *((_QWORD *)v224 + 4) = 0;
                        v226 = (llvm::ValueHandleBase **)(v224 + 32);
                        *((_QWORD *)v224 + 8) = *(_QWORD *)v185;
                        v192 = (uint64_t ***)(v224 + 64);
                        *((_QWORD *)v224 + 3) = v224 + 64;
                        *((_QWORD *)v224 + 7) = v224 + 64;
                        *((_QWORD *)v224 + 9) = 0;
                        v227 = 46;
                      }
                      else
                      {
                        FDiv = llvm::ConstantExpr::getFDiv(v188, (llvm::Constant *)v14, v222, v223);
                        if (!llvm::Constant::isNormalFP(FDiv))
                          goto LABEL_70;
                        LOWORD(v241) = 257;
                        v224 = (char *)operator new(0x80uLL);
                        *(_QWORD *)v224 = 0;
                        *((_QWORD *)v224 + 2) = 0;
                        *((_QWORD *)v224 + 1) = 0;
                        v225 = v224 + 8;
                        *((_QWORD *)v224 + 5) = 0;
                        *((_QWORD *)v224 + 6) = 0;
                        *((_QWORD *)v224 + 4) = 0;
                        v226 = (llvm::ValueHandleBase **)(v224 + 32);
                        *((_QWORD *)v224 + 8) = *(_QWORD *)v185;
                        v192 = (uint64_t ***)(v224 + 64);
                        *((_QWORD *)v224 + 3) = v224 + 64;
                        *((_QWORD *)v224 + 7) = v224 + 64;
                        *((_QWORD *)v224 + 9) = 0;
                        v227 = 49;
                      }
                      v224[80] = v227;
                      v224[81] = 0;
                      *((_WORD *)v224 + 41) = 0;
                      *((_DWORD *)v224 + 21) = 2;
                      *((_DWORD *)v224 + 30) = 0;
                      *(_OWORD *)(v224 + 104) = 0u;
                      *(_OWORD *)(v224 + 88) = 0u;
                      *(_QWORD *)v224 = v185;
                      v230 = *((_QWORD *)v185 + 1);
                      v229 = (_QWORD *)((char *)v185 + 8);
                      v228 = v230;
                      *v225 = v230;
                      if (v230)
                        *(_QWORD *)(v228 + 16) = v225;
                      *((_QWORD *)v224 + 2) = v229;
                      *v229 = v224;
                      if (*((_QWORD *)v224 + 4))
                      {
                        **((_QWORD **)v224 + 6) = *((_QWORD *)v224 + 5);
                        v235 = *((_QWORD *)v224 + 5);
                        if (v235)
                          *(_QWORD *)(v235 + 16) = *((_QWORD *)v224 + 6);
                      }
                      *v226 = FDiv;
                      if (FDiv)
                      {
                        v233 = *((_QWORD *)FDiv + 1);
                        v232 = (llvm::ValueHandleBase ***)((char *)FDiv + 8);
                        v231 = v233;
                        *((_QWORD *)v224 + 5) = v233;
                        if (v233)
                          *(_QWORD *)(v231 + 16) = v224 + 40;
                        *((_QWORD *)v224 + 6) = v232;
                        *v232 = v226;
                      }
                    }
                    llvm::Value::setName(v192, (uint64_t)&v239);
                    *((_BYTE *)v192 + 17) |= 0xFEu;
                    sub_1C577E498(a1, (llvm::Value *)v192, a2);
                    if (v180)
                    {
                      v199 = *(unsigned __int8 *)(v13 + 16);
                      if (v199 == 44)
                        v200 = v180;
                      else
                        v200 = (llvm::Constant *)v192;
                      if (v199 == 44)
                        v201 = (llvm::Constant *)v192;
                      else
                        v201 = v180;
                      if (v162)
                        v202 = v200;
                      else
                        v202 = (llvm::Constant *)v192;
                      if (v162)
                        v203 = v201;
                      else
                        v203 = v180;
                      LOWORD(v241) = 257;
                      if (v199 == 42)
                      {
                        v204 = (char *)operator new(0x80uLL);
                        *((_QWORD *)v204 + 6) = 0;
                        *((_QWORD *)v204 + 8) = *(_QWORD *)v202;
                        *((_QWORD *)v204 + 3) = v204 + 64;
                        v205 = v204 + 32;
                        v12 = (uint64_t)(v204 + 64);
                        *((_QWORD *)v204 + 7) = v204 + 64;
                        *((_QWORD *)v204 + 9) = 0;
                        v206 = 42;
                      }
                      else
                      {
                        v204 = (char *)operator new(0x80uLL);
                        *((_QWORD *)v204 + 6) = 0;
                        *((_QWORD *)v204 + 8) = *(_QWORD *)v202;
                        *((_QWORD *)v204 + 3) = v204 + 64;
                        v205 = v204 + 32;
                        v12 = (uint64_t)(v204 + 64);
                        *((_QWORD *)v204 + 7) = v204 + 64;
                        *((_QWORD *)v204 + 9) = 0;
                        v206 = 44;
                      }
                      v204[80] = v206;
                      v204[81] = 0;
                      *((_WORD *)v204 + 41) = 0;
                      *((_DWORD *)v204 + 21) = 2;
                      *(_OWORD *)(v204 + 88) = 0u;
                      *(_OWORD *)(v204 + 104) = 0u;
                      *((_DWORD *)v204 + 30) = 0;
                      *(_QWORD *)v204 = v202;
                      v218 = *((_QWORD *)v202 + 1);
                      v217 = (_QWORD *)((char *)v202 + 8);
                      v216 = v218;
                      *((_QWORD *)v204 + 1) = v218;
                      if (v218)
                        *(_QWORD *)(v216 + 16) = v204 + 8;
                      *((_QWORD *)v204 + 2) = v217;
                      *v217 = v204;
                      v219 = (_QWORD *)((char *)v203 + 8);
                      v220 = *((_QWORD *)v203 + 1);
                      *((_QWORD *)v204 + 5) = v220;
                      *((_QWORD *)v204 + 4) = v203;
                      if (v220)
                        *(_QWORD *)(v220 + 16) = v204 + 40;
                      *((_QWORD *)v204 + 6) = v219;
                      *v219 = v205;
                      llvm::Value::setName((uint64_t ***)v12, (uint64_t)&v239);
                      *(_BYTE *)(v12 + 17) = *(_BYTE *)(a2 + 17) & 0xFE | *(_BYTE *)(v12 + 17) & 1;
                      return (llvm::UndefValue **)v12;
                    }
LABEL_70:
                    v236 = 0;
                    v58 = *(unsigned __int8 *)(a2 + 16);
                    if (v58 == 46)
                    {
                      v59 = *(uint64_t **)(a2 - 64);
                      v60 = v59[1];
                      if (v60 && !*(_QWORD *)(v60 + 8))
                      {
                        v112 = *((unsigned __int8 *)v59 + 16);
                        if (v112 == 5)
                        {
                          if (*((_WORD *)v59 + 9) != 21)
                            goto LABEL_73;
                          v125 = (uint64_t **)&v59[-4 * (*((_DWORD *)v59 + 5) & 0x7FFFFFF)];
                          v64 = *v125;
                          if (!*v125)
                            goto LABEL_73;
                          v238 = *v125;
                          v113 = v125[4];
                          if (!v113)
                            goto LABEL_73;
                        }
                        else
                        {
                          if (v112 != 49)
                            goto LABEL_73;
                          v64 = (uint64_t *)*(v59 - 8);
                          if (!v64)
                            goto LABEL_73;
                          v238 = (uint64_t *)*(v59 - 8);
                          v113 = (uint64_t *)*(v59 - 4);
                          if (!v113)
                            goto LABEL_73;
                        }
                        v237 = v113;
                        v126 = *(uint64_t **)(a2 - 32);
                        if (v126)
                        {
                          v236 = *(uint64_t **)(a2 - 32);
                          v59 = v126;
LABEL_242:
                          v143 = *(_QWORD *)(a1 + 24);
                          LOWORD(v241) = 257;
                          goto LABEL_243;
                        }
                      }
LABEL_73:
                      v61 = *(_QWORD *)(a2 - 32);
                      v62 = *(_QWORD *)(v61 + 8);
                      if (v62 && !*(_QWORD *)(v62 + 8))
                      {
                        v63 = *(unsigned __int8 *)(v61 + 16);
                        if (v63 != 5)
                        {
                          if (v63 != 49)
                            goto LABEL_86;
                          v64 = *(uint64_t **)(v61 - 64);
                          if (!v64)
                            goto LABEL_86;
                          v238 = *(uint64_t **)(v61 - 64);
                          v65 = *(uint64_t **)(v61 - 32);
                          if (!v65)
                            goto LABEL_86;
                          goto LABEL_211;
                        }
                        if (*(_WORD *)(v61 + 18) == 21)
                        {
                          v127 = (uint64_t **)(v61 - 32 * (*(_DWORD *)(v61 + 20) & 0x7FFFFFF));
                          v64 = *v127;
                          if (*v127)
                          {
                            v238 = *v127;
                            v65 = v127[4];
                            if (v65)
                            {
LABEL_211:
                              v237 = v65;
LABEL_241:
                              v236 = v59;
                              goto LABEL_242;
                            }
                          }
                        }
                      }
                      goto LABEL_86;
                    }
                    if (v58 != 5 || *(_WORD *)(a2 + 18) != 18)
                      goto LABEL_86;
                    v66 = (_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
                    v67 = *v66;
                    v68 = *(_QWORD *)(*v66 + 8);
                    if (v68 && !*(_QWORD *)(v68 + 8))
                    {
                      v121 = *(unsigned __int8 *)(v67 + 16);
                      if (v121 == 5)
                      {
                        if (*(_WORD *)(v67 + 18) != 21)
                          goto LABEL_84;
                        v141 = (uint64_t **)(v67 - 32 * (*(_DWORD *)(v67 + 20) & 0x7FFFFFF));
                        v64 = *v141;
                        if (!*v141)
                          goto LABEL_84;
                        v238 = *v141;
                        v122 = v141[4];
                        if (!v122)
                          goto LABEL_84;
                      }
                      else
                      {
                        if (v121 != 49)
                          goto LABEL_84;
                        v64 = *(uint64_t **)(v67 - 64);
                        if (!v64)
                          goto LABEL_84;
                        v238 = *(uint64_t **)(v67 - 64);
                        v122 = *(uint64_t **)(v67 - 32);
                        if (!v122)
                          goto LABEL_84;
                      }
                      v237 = v122;
                      v59 = (uint64_t *)v66[4];
                      if (v59)
                        goto LABEL_241;
                    }
LABEL_84:
                    v69 = v66[4];
                    v70 = *(_QWORD *)(v69 + 8);
                    if (v70 && !*(_QWORD *)(v70 + 8))
                    {
                      v123 = *(unsigned __int8 *)(v69 + 16);
                      if (v123 == 5)
                      {
                        if (*(_WORD *)(v69 + 18) != 21)
                          goto LABEL_86;
                        v142 = (uint64_t **)(v69 - 32 * (*(_DWORD *)(v69 + 20) & 0x7FFFFFF));
                        v64 = *v142;
                        if (!*v142)
                          goto LABEL_86;
                        v238 = *v142;
                        v124 = v142[4];
                        if (!v124)
                          goto LABEL_86;
                      }
                      else
                      {
                        if (v123 != 49)
                          goto LABEL_86;
                        v64 = *(uint64_t **)(v69 - 64);
                        if (!v64)
                          goto LABEL_86;
                        v238 = *(uint64_t **)(v69 - 64);
                        v124 = *(uint64_t **)(v69 - 32);
                        if (!v124)
                          goto LABEL_86;
                      }
                      v237 = v124;
                      v59 = (uint64_t *)v67;
                      goto LABEL_241;
                    }
LABEL_86:
                    if ((*(_BYTE *)(a2 + 17) & 4) != 0)
                    {
                      LODWORD(v239) = 280;
                      *((_QWORD *)&v239 + 1) = 0;
                      *(_QWORD *)&v240 = &v238;
                      v71 = *(_QWORD *)(v13 + 8);
                      if (v71)
                      {
                        if (!*(_QWORD *)(v71 + 8) && sub_1C4E75A6C((uint64_t)&v239, v13))
                        {
                          LODWORD(v244) = 280;
                          v245 = 0;
                          v246 = &v237;
                          v72 = v14[1];
                          if (v72)
                          {
                            if (!*(_QWORD *)(v72 + 8) && sub_1C4E75A6C((uint64_t)&v244, (uint64_t)v14))
                            {
                              v73 = *(_QWORD *)(a1 + 24);
                              LOWORD(v241) = 257;
                              v74 = (uint64_t *)sub_1C4867450(v73, v238, (uint64_t)v237, a2, (uint64_t)&v239);
                              v75 = *(uint64_t **)(a1 + 24);
                              LOWORD(v241) = 257;
                              v76 = 280;
LABEL_140:
                              UnaryIntrinsic = llvm::IRBuilderBase::CreateUnaryIntrinsic(v75, v76, v74, a2, (uint64_t)&v239);
                              goto LABEL_31;
                            }
                          }
                        }
                      }
                    }
                    if ((*(_BYTE *)(a2 + 17) & 0x10) != 0)
                    {
                      v244 = (llvm::Constant *)0x3FF0000000000000;
                      v245 = &v237;
                      v77 = *(unsigned __int8 *)(v13 + 16);
                      if (v77 == 5)
                      {
                        if (*(_WORD *)(v13 + 18) != 21)
                          goto LABEL_105;
                        if (!sub_1C55CDE08(&v244, *(llvm::Constant **)(v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF))))goto LABEL_105;
                        v78 = *(uint64_t **)(v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF) + 32);
                        if (!v78)
                          goto LABEL_105;
                      }
                      else
                      {
                        if (v77 != 49)
                          goto LABEL_105;
                        if (!sub_1C4E7BE28(&v244, *(unsigned __int8 **)(v13 - 64)))
                          goto LABEL_105;
                        v78 = *(uint64_t **)(v13 - 32);
                        if (!v78)
                          goto LABEL_105;
                      }
                      *v245 = v78;
                      LODWORD(v239) = 280;
                      *((_QWORD *)&v239 + 1) = 0;
                      *(_QWORD *)&v240 = &v238;
                      if (sub_1C4E75A6C((uint64_t)&v239, (uint64_t)v237) && v14 == v238)
                      {
                        v18 = v237;
                        LOWORD(v241) = 257;
LABEL_264:
                        v19 = (char *)operator new(0x80uLL);
                        *((_QWORD *)v19 + 5) = 0;
                        v20 = (uint64_t *)(v19 + 40);
                        *((_QWORD *)v19 + 6) = 0;
                        *((_QWORD *)v19 + 8) = *v14;
                        *((_QWORD *)v19 + 3) = v19 + 64;
                        v12 = (uint64_t)(v19 + 64);
                        *((_QWORD *)v19 + 7) = v19 + 64;
                        *((_QWORD *)v19 + 9) = 0;
                        v19[80] = 49;
                        v19[81] = 0;
                        *((_WORD *)v19 + 41) = 0;
                        *((_DWORD *)v19 + 21) = 2;
                        *(_OWORD *)(v19 + 88) = 0u;
                        *(_OWORD *)(v19 + 104) = 0u;
                        *((_DWORD *)v19 + 30) = 0;
                        *(_QWORD *)v19 = v14;
                        v159 = v14[1];
                        v158 = v14 + 1;
                        v157 = v159;
                        *((_QWORD *)v19 + 1) = v159;
                        if (v159)
                          *(_QWORD *)(v157 + 16) = v19 + 8;
                        *((_QWORD *)v19 + 2) = v158;
                        *v158 = v19;
                        goto LABEL_23;
                      }
                    }
LABEL_105:
                    if ((*(_BYTE *)(a2 + 17) & 0x10) != 0)
                    {
                      v244 = (llvm::Constant *)0x3FF0000000000000;
                      v245 = &v237;
                      v79 = *((unsigned __int8 *)v14 + 16);
                      if (v79 == 5)
                      {
                        if (*((_WORD *)v14 + 9) != 21)
                          goto LABEL_116;
                        if (!sub_1C55CDE08(&v244, (llvm::Constant *)v14[-4 * (*((_DWORD *)v14 + 5) & 0x7FFFFFF)]))goto LABEL_116;
                        v80 = (uint64_t *)v14[-4 * (*((_DWORD *)v14 + 5) & 0x7FFFFFF) + 4];
                        if (!v80)
                          goto LABEL_116;
                      }
                      else
                      {
                        if (v79 != 49)
                          goto LABEL_116;
                        if (!sub_1C4E7BE28(&v244, (unsigned __int8 *)*(v14 - 8)))
                          goto LABEL_116;
                        v80 = (uint64_t *)*(v14 - 4);
                        if (!v80)
                          goto LABEL_116;
                      }
                      *v245 = v80;
                      LODWORD(v239) = 280;
                      *((_QWORD *)&v239 + 1) = 0;
                      *(_QWORD *)&v240 = &v238;
                      if (sub_1C4E75A6C((uint64_t)&v239, (uint64_t)v237) && (uint64_t *)v13 == v238)
                      {
                        v144 = v237;
                        LOWORD(v241) = 257;
                        v145 = (char *)operator new(0x80uLL);
                        *((_QWORD *)v145 + 5) = 0;
                        v146 = (uint64_t *)(v145 + 40);
                        *((_QWORD *)v145 + 6) = 0;
                        *((_QWORD *)v145 + 8) = *(_QWORD *)v13;
                        *((_QWORD *)v145 + 3) = v145 + 64;
                        v109 = (uint64_t ***)(v145 + 64);
                        *((_QWORD *)v145 + 7) = v145 + 64;
                        *((_QWORD *)v145 + 9) = 0;
                        v145[80] = 49;
                        v145[81] = 0;
                        *((_WORD *)v145 + 41) = 0;
                        *((_DWORD *)v145 + 21) = 2;
                        *(_OWORD *)(v145 + 88) = 0u;
                        *(_OWORD *)(v145 + 104) = 0u;
                        *((_DWORD *)v145 + 30) = 0;
                        *(_QWORD *)v145 = v13;
                        v149 = *(_QWORD *)(v13 + 8);
                        v148 = (_QWORD *)(v13 + 8);
                        v147 = v149;
                        *((_QWORD *)v145 + 1) = v149;
                        if (v149)
                          *(_QWORD *)(v147 + 16) = v145 + 8;
                        *((_QWORD *)v145 + 2) = v148;
                        *v148 = v145;
                        *((_QWORD *)v145 + 4) = v144;
                        if (v144)
                        {
                          v152 = v144[1];
                          v151 = v144 + 1;
                          v150 = v152;
                          *v146 = v152;
                          if (v152)
                            *(_QWORD *)(v150 + 16) = v146;
                          *((_QWORD *)v145 + 6) = v151;
                          *v151 = v145 + 32;
                        }
                        goto LABEL_308;
                      }
                    }
LABEL_116:
                    if ((*(_BYTE *)(a2 + 17) & 4) == 0)
                      goto LABEL_117;
                    if ((*(_BYTE *)(a2 + 17) & 0x10) == 0)
                      goto LABEL_117;
                    if ((uint64_t *)v13 != v14)
                      goto LABEL_117;
                    v85 = *(_QWORD *)(v13 + 8);
                    if (!v85)
                      goto LABEL_117;
                    v86 = *(_QWORD *)(v85 + 8);
                    if (!v86 || *(_QWORD *)(v86 + 8))
                      goto LABEL_117;
                    *(_QWORD *)&v239 = &v238;
                    DWORD2(v239) = 280;
                    *(_QWORD *)&v240 = 0;
                    *((_QWORD *)&v240 + 1) = &v237;
                    v87 = *(unsigned __int8 *)(v13 + 16);
                    if (v87 == 5)
                    {
                      if (*(_WORD *)(v13 + 18) != 21)
                        goto LABEL_255;
                      v153 = (uint64_t **)(v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF));
                      if (!*v153)
                        goto LABEL_255;
                      v238 = *v153;
                      if (!sub_1C4E75A6C((uint64_t)&v239 + 8, (uint64_t)v153[4]))
                        goto LABEL_255;
                    }
                    else if (v87 != 49
                           || !*(_QWORD *)(v13 - 64)
                           || (v238 = *(uint64_t **)(v13 - 64), !sub_1C4E75A6C((uint64_t)&v239 + 8, *(_QWORD *)(v13 - 32))))
                    {
LABEL_255:
                      LODWORD(v239) = 280;
                      *((_QWORD *)&v239 + 1) = 0;
                      *(_QWORD *)&v240 = &v237;
                      *((_QWORD *)&v240 + 1) = &v238;
                      v154 = *(unsigned __int8 *)(v13 + 16);
                      if (v154 != 5)
                      {
                        if (v154 != 49)
                          goto LABEL_117;
                        if (!sub_1C4E75A6C((uint64_t)&v239, *(_QWORD *)(v13 - 64)))
                          goto LABEL_117;
                        v155 = *(_QWORD *)(v13 - 32);
                        if (!v155)
                          goto LABEL_117;
                        goto LABEL_263;
                      }
                      if (*(_WORD *)(v13 + 18) == 21
                        && sub_1C4E75A6C((uint64_t)&v239, *(_QWORD *)(v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF))))
                      {
                        v155 = *(_QWORD *)(v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF) + 32);
                        if (v155)
                        {
LABEL_263:
                          **((_QWORD **)&v240 + 1) = v155;
                          v156 = *(_QWORD *)(a1 + 24);
                          LOWORD(v241) = 257;
                          v18 = (uint64_t *)sub_1C4867450(v156, v238, (uint64_t)v238, a2, (uint64_t)&v239);
                          v14 = v237;
                          LOWORD(v241) = 257;
                          goto LABEL_264;
                        }
                      }
LABEL_117:
                      if (llvm::Instruction::isOnlyUserOfAnyOperand((llvm::Instruction *)a2))
                      {
                        LODWORD(v239) = 238;
                        *((_QWORD *)&v239 + 1) = 0;
                        *(_QWORD *)&v240 = &v238;
                        *((_QWORD *)&v240 + 1) = 1;
                        v241 = &v237;
                        if (sub_1C57A1C20((uint64_t)&v239, v13))
                        {
                          LODWORD(v244) = 238;
                          v245 = 0;
                          v246 = (uint64_t **)v238;
                          v247 = 1;
                          v248 = &v236;
                          if (sub_1C57A315C((uint64_t)&v244, (uint64_t)v14))
                          {
                            v82 = *(_QWORD *)(a1 + 24);
                            LOWORD(v241) = 257;
                            v83 = sub_1C579E980(v82, v237, (uint64_t)v236, a2, (uint64_t)&v239);
                            v84 = *(uint64_t **)(a1 + 24);
                            LOWORD(v241) = 257;
                            UnaryIntrinsic = llvm::IRBuilderBase::CreateBinaryIntrinsic(v84, 238, v238, v83, a2, (uint64_t)&v239);
LABEL_31:
                            v30 = (llvm::Value *)UnaryIntrinsic;
                            v31 = a1;
                            v32 = (llvm::ValueAsMetadata *)a2;
                            return sub_1C577F888(v31, v32, v30);
                          }
                        }
                        LODWORD(v239) = 239;
                        *((_QWORD *)&v239 + 1) = 0;
                        *(_QWORD *)&v240 = &v238;
                        *((_QWORD *)&v240 + 1) = 1;
                        v241 = &v237;
                        if (sub_1C57A1C20((uint64_t)&v239, v13))
                        {
                          LODWORD(v244) = 239;
                          v245 = 0;
                          v246 = (uint64_t **)v238;
                          v247 = 1;
                          v248 = &v236;
                          if (sub_1C57A315C((uint64_t)&v244, (uint64_t)v14))
                          {
                            v88 = v236;
                            v89 = v237;
                            if (*v237 == *v236)
                            {
                              v128 = *(_QWORD *)(a1 + 24);
                              LOWORD(v248) = 257;
                              v129 = (uint64_t ***)(*(uint64_t (**)(_QWORD, uint64_t *, uint64_t *, _QWORD, _QWORD))(**(_QWORD **)(v128 + 72) + 16))(*(_QWORD *)(v128 + 72), v237, v236, 0, 0);
                              if (!v129)
                              {
                                LOWORD(v241) = 257;
                                v130 = (char *)operator new(0x80uLL);
                                *((_QWORD *)v130 + 6) = 0;
                                *((_QWORD *)v130 + 8) = *v89;
                                v131 = (uint64_t)(v130 + 64);
                                *((_QWORD *)v130 + 3) = v130 + 64;
                                *((_QWORD *)v130 + 7) = v130 + 64;
                                *((_QWORD *)v130 + 9) = 0;
                                v130[80] = 41;
                                v130[81] = 0;
                                *((_WORD *)v130 + 41) = 0;
                                *((_DWORD *)v130 + 21) = 2;
                                *(_OWORD *)(v130 + 88) = 0u;
                                *(_OWORD *)(v130 + 104) = 0u;
                                *((_DWORD *)v130 + 30) = 0;
                                *(_QWORD *)v130 = v89;
                                v134 = v89[1];
                                v133 = v89 + 1;
                                v132 = v134;
                                *((_QWORD *)v130 + 1) = v134;
                                if (v134)
                                  *(_QWORD *)(v132 + 16) = v130 + 8;
                                *((_QWORD *)v130 + 2) = v133;
                                *v133 = v130;
                                v135 = v88 + 1;
                                v136 = v88[1];
                                *((_QWORD *)v130 + 5) = v136;
                                *((_QWORD *)v130 + 4) = v88;
                                if (v136)
                                  *(_QWORD *)(v136 + 16) = v130 + 40;
                                *((_QWORD *)v130 + 6) = v135;
                                *v135 = v130 + 32;
                                llvm::Value::setName((uint64_t ***)v130 + 8, (uint64_t)&v239);
                                v129 = (uint64_t ***)sub_1C4773754((uint64_t *)v128, v131, (uint64_t)&v244);
                              }
                              v137 = *(uint64_t **)(a1 + 24);
                              v244 = (llvm::Constant *)*v238;
                              v245 = *v129;
                              v243[0] = (uint64_t)v238;
                              v243[1] = (uint64_t)v129;
                              LOWORD(v241) = 257;
                              UnaryIntrinsic = llvm::IRBuilderBase::CreateIntrinsic(v137, 239, (uint64_t *)&v244, 2, v243, 2, a2, (uint64_t)&v239);
                              goto LABEL_31;
                            }
                          }
                        }
                        LODWORD(v239) = 75;
                        *((_QWORD *)&v239 + 1) = 0;
                        *(_QWORD *)&v240 = &v238;
                        if (sub_1C4E75A6C((uint64_t)&v239, v13))
                        {
                          LODWORD(v244) = 75;
                          v245 = 0;
                          v246 = &v237;
                          if (sub_1C4E75A6C((uint64_t)&v244, (uint64_t)v14))
                          {
                            v90 = *(_QWORD *)(a1 + 24);
                            LOWORD(v241) = 257;
                            v74 = (uint64_t *)sub_1C579E980(v90, v238, (uint64_t)v237, a2, (uint64_t)&v239);
                            v75 = *(uint64_t **)(a1 + 24);
                            LOWORD(v241) = 257;
                            v76 = 75;
                            goto LABEL_140;
                          }
                        }
                        LODWORD(v239) = 76;
                        *((_QWORD *)&v239 + 1) = 0;
                        *(_QWORD *)&v240 = &v238;
                        if (sub_1C4E75A6C((uint64_t)&v239, v13))
                        {
                          LODWORD(v244) = 76;
                          v245 = 0;
                          v246 = &v237;
                          if (sub_1C4E75A6C((uint64_t)&v244, (uint64_t)v14))
                          {
                            v91 = *(_QWORD *)(a1 + 24);
                            LOWORD(v241) = 257;
                            v74 = (uint64_t *)sub_1C579E980(v91, v238, (uint64_t)v237, a2, (uint64_t)&v239);
                            v75 = *(uint64_t **)(a1 + 24);
                            LOWORD(v241) = 257;
                            v76 = 76;
                            goto LABEL_140;
                          }
                        }
                      }
                      v92 = *(_QWORD *)(v13 + 8);
                      if (!v92 || *(_QWORD *)(v92 + 8))
                        goto LABEL_143;
                      v95 = *(unsigned __int8 *)(v13 + 16);
                      if (v95 == 46)
                      {
                        v96 = *(uint64_t **)(v13 - 64);
                        v97 = *(uint64_t **)(v13 - 32);
                        if (v14 == v96)
                        {
                          if (!v97)
                            goto LABEL_143;
                          v237 = *(uint64_t **)(v13 - 32);
                          v81 = 1;
                        }
                        else
                        {
                          if (!v96 || v14 != v97)
                            goto LABEL_143;
                          v237 = *(uint64_t **)(v13 - 64);
                          v81 = 1;
                          v97 = v96;
                        }
                        goto LABEL_291;
                      }
                      if (v95 != 5)
                      {
LABEL_290:
                        v81 = (v95 == 5) & v81;
                        v97 = v237;
LABEL_291:
                        if (v81 && v14 != v97)
                        {
                          v168 = *(_QWORD *)(a1 + 24);
                          LOWORD(v241) = 257;
                          v105 = (_QWORD *)sub_1C4867450(v168, v14, (uint64_t)v14, a2, (uint64_t)&v239);
                          v106 = v237;
                          LOWORD(v241) = 257;
                          goto LABEL_301;
                        }
LABEL_143:
                        v93 = v14[1];
                        if (!v93 || *(_QWORD *)(v93 + 8))
                        {
LABEL_145:
                          if (*(unsigned __int8 *)(a2 + 17) >= 0xFEu)
                          {
                            LODWORD(v239) = 177;
                            DWORD2(v239) = 0;
                            *(_QWORD *)&v240 = &v238;
                            *((_QWORD *)&v240 + 1) = 0x3FE0000000000000;
                            if (sub_1C582A4F4((uint64_t)&v239, v13))
                            {
                              v237 = v14;
                              v94 = v13;
                            }
                            else
                            {
                              v94 = 0;
                            }
                            LODWORD(v239) = 177;
                            DWORD2(v239) = 0;
                            *(_QWORD *)&v240 = &v238;
                            *((_QWORD *)&v240 + 1) = 0x3FE0000000000000;
                            if (sub_1C582A4F4((uint64_t)&v239, (uint64_t)v14))
                            {
                              v237 = (uint64_t *)v13;
LABEL_162:
                              v102 = *(uint64_t **)(a1 + 24);
                              LOWORD(v241) = 257;
                              v103 = (uint64_t *)llvm::IRBuilderBase::CreateUnaryIntrinsic(v102, 177, v238, a2, (uint64_t)&v239);
                              v104 = *(_QWORD *)(a1 + 24);
                              LOWORD(v241) = 257;
                              v105 = (_QWORD *)sub_1C4867450(v104, v103, (uint64_t)v237, a2, (uint64_t)&v239);
                              v106 = v237;
                              LOWORD(v241) = 257;
                              v107 = (char *)operator new(0x80uLL);
                              *((_QWORD *)v107 + 5) = 0;
                              v108 = (uint64_t *)(v107 + 40);
                              *((_QWORD *)v107 + 6) = 0;
                              *((_QWORD *)v107 + 8) = *v105;
                              *((_QWORD *)v107 + 3) = v107 + 64;
                              v109 = (uint64_t ***)(v107 + 64);
                              *((_QWORD *)v107 + 7) = v107 + 64;
                              *((_QWORD *)v107 + 9) = 0;
                              v110 = 44;
LABEL_302:
                              v107[80] = v110;
                              v107[81] = 0;
                              *((_WORD *)v107 + 41) = 0;
                              *((_DWORD *)v107 + 21) = 2;
                              *(_OWORD *)(v107 + 88) = 0u;
                              *(_OWORD *)(v107 + 104) = 0u;
                              *((_DWORD *)v107 + 30) = 0;
                              *(_QWORD *)v107 = v105;
                              v172 = v105[1];
                              v171 = v105 + 1;
                              v170 = v172;
                              *((_QWORD *)v107 + 1) = v172;
                              if (v172)
                                *(_QWORD *)(v170 + 16) = v107 + 8;
                              *((_QWORD *)v107 + 2) = v171;
                              *v171 = v107;
                              *((_QWORD *)v107 + 4) = v106;
                              if (v106)
                              {
                                v175 = v106[1];
                                v174 = v106 + 1;
                                v173 = v175;
                                *v108 = v175;
                                if (v175)
                                  *(_QWORD *)(v173 + 16) = v108;
                                *((_QWORD *)v107 + 6) = v174;
                                *v174 = v107 + 32;
                              }
LABEL_308:
                              v12 = (uint64_t)v109;
                              v28 = v109;
                              goto LABEL_28;
                            }
                            if (v94)
                              goto LABEL_162;
                          }
LABEL_163:
                          v244 = 0;
                          *(_QWORD *)&v239 = 0;
                          v111 = *(_QWORD *)(a2 - 64);
                          if (!v111 || *(_BYTE *)(v111 + 16) != 83)
                          {
                            v111 = *(_QWORD *)(a2 - 32);
                            if (!v111 || *(_BYTE *)(v111 + 16) != 83)
                              return 0;
                          }
                          if ((llvm::matchSimpleRecurrence(v111, &v239, &v244, v243) & 1) == 0)
                            return 0;
                          if ((_QWORD)v239 != a2)
                            return 0;
                          if ((~*(unsigned __int8 *)(a2 + 17) & 0x14) != 0)
                            return 0;
                          v114 = v244;
                          if (!v244
                            || *((unsigned __int8 *)v244 + 16) > 0x14u
                            || (llvm::Constant::isNullValue(v244) & 1) == 0
                            && (sub_1C4E71060((uint64_t)&v239, v114) & 1) == 0)
                          {
                            return 0;
                          }
                          v31 = a1;
                          v32 = (llvm::ValueAsMetadata *)a2;
                          v30 = v114;
                          return sub_1C577F888(v31, v32, v30);
                        }
                        v98 = *((unsigned __int8 *)v14 + 16);
                        if (v98 == 46)
                        {
                          v99 = (uint64_t *)*(v14 - 8);
                          v100 = (uint64_t *)*(v14 - 4);
                          if ((uint64_t *)v13 == v99)
                          {
                            if (!v100)
                              goto LABEL_145;
                            v237 = (uint64_t *)*(v14 - 4);
                            v101 = 1;
                          }
                          else
                          {
                            if (!v99 || (uint64_t *)v13 != v100)
                              goto LABEL_145;
                            v237 = (uint64_t *)*(v14 - 8);
                            v101 = 1;
                            v100 = v99;
                          }
                          goto LABEL_298;
                        }
                        if (v98 != 5)
                        {
LABEL_297:
                          v101 = (v98 == 5) & v81;
                          v100 = v237;
LABEL_298:
                          if (!v101 || (uint64_t *)v13 == v100)
                            goto LABEL_145;
                          v169 = *(_QWORD *)(a1 + 24);
                          LOWORD(v241) = 257;
                          v105 = (_QWORD *)sub_1C4867450(v169, (uint64_t *)v13, v13, a2, (uint64_t)&v239);
                          v106 = v237;
                          LOWORD(v241) = 257;
LABEL_301:
                          v107 = (char *)operator new(0x80uLL);
                          *((_QWORD *)v107 + 5) = 0;
                          v108 = (uint64_t *)(v107 + 40);
                          *((_QWORD *)v107 + 6) = 0;
                          *((_QWORD *)v107 + 8) = *v105;
                          *((_QWORD *)v107 + 3) = v107 + 64;
                          v109 = (uint64_t ***)(v107 + 64);
                          *((_QWORD *)v107 + 7) = v107 + 64;
                          *((_QWORD *)v107 + 9) = 0;
                          v110 = 46;
                          goto LABEL_302;
                        }
                        if (*((_WORD *)v14 + 9) == 18)
                        {
                          v118 = (uint64_t **)&v14[-4 * (*((_DWORD *)v14 + 5) & 0x7FFFFFF)];
                          v119 = *v118;
                          v120 = v118[4];
                          if ((uint64_t *)v13 != *v118)
                          {
                            LOBYTE(v81) = 0;
                            if (!v119 || (uint64_t *)v13 != v120)
                              goto LABEL_297;
                            goto LABEL_295;
                          }
                          v119 = v118[4];
                          if (v120)
                          {
LABEL_295:
                            v237 = v119;
                            LOBYTE(v81) = 1;
                            goto LABEL_297;
                          }
                        }
                        LOBYTE(v81) = 0;
                        goto LABEL_297;
                      }
                      if (*(_WORD *)(v13 + 18) == 18)
                      {
                        v115 = (uint64_t **)(v13 - 32 * (*(_DWORD *)(v13 + 20) & 0x7FFFFFF));
                        v116 = *v115;
                        v117 = v115[4];
                        if (v14 != *v115)
                        {
                          LOBYTE(v81) = 0;
                          if (!v116 || v14 != v117)
                            goto LABEL_290;
                          goto LABEL_288;
                        }
                        v116 = v115[4];
                        if (v117)
                        {
LABEL_288:
                          v237 = v116;
                          LOBYTE(v81) = 1;
                          goto LABEL_290;
                        }
                      }
                      LOBYTE(v81) = 0;
                      goto LABEL_290;
                    }
                    v143 = *(_QWORD *)(a1 + 24);
                    v64 = v238;
                    LOWORD(v241) = 257;
                    v59 = v238;
LABEL_243:
                    v105 = (_QWORD *)sub_1C4867450(v143, v64, (uint64_t)v59, a2, (uint64_t)&v239);
                    v106 = v237;
                    LOWORD(v241) = 257;
                    v107 = (char *)operator new(0x80uLL);
                    *((_QWORD *)v107 + 5) = 0;
                    v108 = (uint64_t *)(v107 + 40);
                    *((_QWORD *)v107 + 6) = 0;
                    *((_QWORD *)v107 + 8) = *v105;
                    *((_QWORD *)v107 + 3) = v107 + 64;
                    v109 = (uint64_t ***)(v107 + 64);
                    *((_QWORD *)v107 + 7) = v107 + 64;
                    *((_QWORD *)v107 + 9) = 0;
                    v110 = 49;
                    goto LABEL_302;
                  }
                  v167 = *(unsigned __int8 **)(v165 - 64);
                  if (!v167)
                    goto LABEL_70;
                  break;
                case 46:
                  v167 = *(unsigned __int8 **)(v165 - 32);
                  if (!v167)
                    goto LABEL_70;
                  break;
                default:
                  goto LABEL_70;
              }
              if (v167[16] > 0x14u)
                goto LABEL_70;
              goto LABEL_320;
            }
          }
          v39 = llvm::ConstantExpr::getFDiv((llvm::ConstantExpr *)v14, (llvm::Constant *)v37, v33, v34);
          if (llvm::Constant::isNormalFP(v39))
          {
            v42 = v238;
            LOWORD(v241) = 257;
            v43 = (char *)operator new(0x80uLL);
            *((_QWORD *)v43 + 5) = 0;
            v44 = v43 + 40;
            *((_QWORD *)v43 + 6) = 0;
            *((_QWORD *)v43 + 8) = *v42;
            *((_QWORD *)v43 + 3) = v43 + 64;
            v12 = (uint64_t)(v43 + 64);
            *((_QWORD *)v43 + 7) = v43 + 64;
            *((_QWORD *)v43 + 9) = 0;
            v45 = 46;
          }
          else
          {
            v55 = llvm::ConstantExpr::getFDiv((llvm::ConstantExpr *)v37, (llvm::Constant *)v14, v40, v41);
            v56 = *(_QWORD *)(v13 + 8);
            if (!v56)
              goto LABEL_66;
            if (*(_QWORD *)(v56 + 8))
              goto LABEL_66;
            v39 = v55;
            if (!llvm::Constant::isNormalFP(v55))
              goto LABEL_66;
            v42 = v238;
            LOWORD(v241) = 257;
            v43 = (char *)operator new(0x80uLL);
            *((_QWORD *)v43 + 5) = 0;
            v44 = v43 + 40;
            *((_QWORD *)v43 + 6) = 0;
            *((_QWORD *)v43 + 8) = *v42;
            *((_QWORD *)v43 + 3) = v43 + 64;
            v12 = (uint64_t)(v43 + 64);
            *((_QWORD *)v43 + 7) = v43 + 64;
            *((_QWORD *)v43 + 9) = 0;
            v45 = 49;
          }
          v43[80] = v45;
          v43[81] = 0;
          *((_WORD *)v43 + 41) = 0;
          *((_DWORD *)v43 + 21) = 2;
          *(_OWORD *)(v43 + 88) = 0u;
          *(_OWORD *)(v43 + 104) = 0u;
          *((_DWORD *)v43 + 30) = 0;
          *(_QWORD *)v43 = v42;
          v48 = v42[1];
          v47 = v42 + 1;
          v46 = v48;
          *((_QWORD *)v43 + 1) = v48;
          if (v48)
            *(_QWORD *)(v46 + 16) = v43 + 8;
          *((_QWORD *)v43 + 2) = v47;
          *v47 = v43;
          *((_QWORD *)v43 + 4) = v39;
          if (v39)
          {
            v51 = *((_QWORD *)v39 + 1);
            v50 = (_QWORD *)((char *)v39 + 8);
            v49 = v51;
            *v44 = v51;
            if (v51)
              *(_QWORD *)(v49 + 16) = v44;
            *((_QWORD *)v43 + 6) = v50;
            *v50 = v43 + 32;
          }
          goto LABEL_27;
        }
      }
    }
  }
  return (llvm::UndefValue **)v12;
}

uint64_t sub_1C5824480(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned __int8 *v6;
  BOOL v7;
  unsigned __int8 *v8;
  BOOL v9;
  int v10;
  char v11;
  uint64_t v12;
  char isNullValue;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  llvm::Type *v19;
  const llvm::APInt *v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  unsigned int v25;
  llvm::Value **False;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  BOOL v37;
  unsigned int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  BOOL v46;
  unsigned int v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  llvm::Value *PersonalityFn;
  const llvm::Value *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t **v56;
  char v57;
  uint64_t v58;
  int v59;

  result = 0;
  v4 = *(_QWORD *)(a2 - 32);
  if (v4 && *(_BYTE *)(v4 + 16) == 85)
  {
    v6 = *(unsigned __int8 **)(v4 - 64);
    if (v6)
      v7 = v6[16] >= 0x15u;
    else
      v7 = 1;
    if (!v7
      && (v10 = llvm::Constant::isNullValue(*(llvm::Constant **)(v4 - 64)),
          v10 || (sub_1C4E71060((uint64_t)&v58, (llvm::Constant *)v6) & 1) != 0))
    {
      v11 = 1;
      v12 = 2;
    }
    else
    {
      v8 = *(unsigned __int8 **)(v4 - 32);
      if (v8)
        v9 = v8[16] > 0x14u;
      else
        v9 = 1;
      if (v9)
        return 0;
      isNullValue = llvm::Constant::isNullValue(*(llvm::Constant **)(v4 - 32));
      if ((isNullValue & 1) != 0)
      {
        v11 = 0;
      }
      else
      {
        v14 = sub_1C4E71060((uint64_t)&v58, (llvm::Constant *)v8);
        v11 = 0;
        if ((v14 & 1) == 0)
          return 0;
      }
      v12 = 1;
    }
    sub_1C577E2C8((uint64_t)a1, a2, 1u, *(_QWORD *)(v4 - 96 + 32 * v12));
    v15 = *(_QWORD *)(v4 - 96);
    if (!*(_QWORD *)(v4 + 8))
    {
      v53 = *(_QWORD *)(v15 + 8);
      if (v53)
      {
        if (!*(_QWORD *)(v53 + 8))
          return 1;
      }
    }
    v57 = v11;
    v16 = (_QWORD *)(a2 + 24);
    v54 = v12;
    v55 = *(_QWORD **)(*(_QWORD *)(a2 + 40) + 48);
    v56 = *(uint64_t ***)v15;
    while (1)
    {
      if (v16 == v55)
        return 1;
      v16 = (_QWORD *)*v16;
      if (v16)
        v17 = (uint64_t)(v16 - 3);
      else
        v17 = 0;
      v18 = *(unsigned __int8 *)(v17 + 16);
      result = 1;
      if (v18 == 29 || v18 == 35)
        return result;
      if (v18 == 80)
      {
        PersonalityFn = (llvm::Value *)llvm::Function::getPersonalityFn(*(llvm::Function **)(*(_QWORD *)(v17 + 40) + 56));
        if (llvm::classifyEHPersonality(PersonalityFn, v52) != 10)
          return 1;
      }
      else if ((llvm::Instruction::mayThrow((llvm::Instruction *)v17) & 1) != 0
             || !llvm::Instruction::willReturn((llvm::Instruction *)v17))
      {
        return 1;
      }
      v21 = *(_DWORD *)(v17 + 20);
      if ((v21 & 0x40000000) == 0)
      {
        v22 = v21 & 0x7FFFFFF;
        v23 = (uint64_t *)(v17 - 32 * v22);
        if (v22)
          break;
        goto LABEL_73;
      }
      v23 = *(uint64_t **)(v17 - 8);
      v22 = v21 & 0x7FFFFFF;
      if (v22)
        break;
LABEL_73:
      if (v17 == v4)
        v4 = 0;
      if (v17 == v15)
        v15 = 0;
      if (!(v15 | v4))
        return 1;
    }
    v24 = &v23[4 * v22];
    v25 = (v17 >> 4) ^ (v17 >> 9);
    while (1)
    {
      if (*v23 == v4)
      {
        sub_1C5788CC4(a1, v23, *(_QWORD *)(v4 + 32 * v54 - 96));
        v27 = a1[4];
        v28 = *(_DWORD *)(v27 + 8);
        v58 = v17;
        v59 = v28;
        v29 = *(_DWORD *)(v27 + 2080);
        if (!v29)
          goto LABEL_72;
        v30 = *(_QWORD *)(v27 + 2064);
        v31 = v29 - 1;
        v32 = v31 & v25;
        v33 = (_QWORD *)(v30 + 16 * (v31 & v25));
        v34 = *v33;
        if (*v33 != v17)
        {
          v35 = 0;
          v36 = 1;
          while (v34 != -4096)
          {
            if (v35)
              v37 = 0;
            else
              v37 = v34 == -8192;
            if (v37)
              v35 = v33;
            v38 = v32 + v36++;
            v32 = v38 & v31;
            v33 = (_QWORD *)(v30 + 16 * v32);
            v34 = *v33;
            if (*v33 == v17)
              goto LABEL_70;
          }
LABEL_64:
          if (v35)
            v48 = v35;
          else
            v48 = v33;
LABEL_67:
          v49 = sub_1C4D8D8F4((_DWORD *)(v27 + 2064), (uint64_t)&v58, &v58, v48);
          *v49 = v58;
          *((_DWORD *)v49 + 2) = v59;
          v50 = *(unsigned int *)(v27 + 8);
          if (v50 >= *(unsigned int *)(v27 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v27, v27 + 16, v50 + 1, 8);
            v50 = *(unsigned int *)(v27 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v27 + 8 * v50) = v17;
          ++*(_DWORD *)(v27 + 8);
        }
      }
      else if (*v23 == v15)
      {
        if ((v57 & 1) != 0)
          False = llvm::ConstantInt::getFalse(v56, v19, v20);
        else
          False = llvm::ConstantInt::getTrue(v56, v19, v20);
        sub_1C5788CC4(a1, v23, (uint64_t)False);
        v27 = a1[4];
        v39 = *(_DWORD *)(v27 + 8);
        v58 = v17;
        v59 = v39;
        v40 = *(_DWORD *)(v27 + 2080);
        if (!v40)
        {
LABEL_72:
          v48 = 0;
          goto LABEL_67;
        }
        v41 = *(_QWORD *)(v27 + 2064);
        v42 = v40 - 1;
        v43 = v42 & v25;
        v33 = (_QWORD *)(v41 + 16 * (v42 & v25));
        v44 = *v33;
        if (*v33 != v17)
        {
          v35 = 0;
          v45 = 1;
          while (v44 != -4096)
          {
            if (v35)
              v46 = 0;
            else
              v46 = v44 == -8192;
            if (v46)
              v35 = v33;
            v47 = v43 + v45++;
            v43 = v47 & v42;
            v33 = (_QWORD *)(v41 + 16 * v43);
            v44 = *v33;
            if (*v33 == v17)
              goto LABEL_70;
          }
          goto LABEL_64;
        }
      }
LABEL_70:
      v23 += 4;
      if (v23 == v24)
        goto LABEL_73;
    }
  }
  return result;
}

llvm::Value *sub_1C5824840(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  llvm::ConstantInt **v9;
  uint64_t v10;
  unsigned int v11;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  const void **v25;
  const llvm::APInt *v26;
  llvm::APInt *v27;
  llvm::APInt *v28;
  const llvm::APInt *v29;
  llvm::APInt *v30;
  _QWORD *v31;
  llvm::Value **v32;
  char *v33;
  char *v34;
  llvm::Value ***v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  llvm::Value *v39;
  llvm::Value ****v40;
  llvm::Value *v41;
  char v42;
  char v43;
  const llvm::APInt *v44;
  _QWORD *v45;
  llvm::Value **v46;
  char *v47;
  llvm::Value ***v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  llvm::Value *v52;
  llvm::Value ****v53;
  llvm::Value *v54;
  char v55;
  unsigned int v56;
  _BOOL4 v57;
  _QWORD *v58;
  llvm::Value **v59;
  char *v60;
  llvm::Value ***v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  llvm::Value *v65;
  llvm::Value ****v66;
  llvm::Value *v67;
  _QWORD *v68;
  int v69;
  uint64_t v70;
  char v71;
  llvm::APInt *v72;
  llvm::APInt *v73;
  unint64_t v74;
  llvm::APInt *v75;
  unsigned int v76;
  llvm::APInt *v77;
  unsigned int v78;
  uint64_t v79;
  llvm::APInt *v80;
  uint64_t v81;
  uint64_t v82;
  const llvm::APInt *v83;
  llvm::APInt *v84;
  _QWORD *v85;
  llvm::Value **v86;
  char *v87;
  char *v88;
  llvm::Value ***v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  llvm::Value *v93;
  llvm::Value ****v94;
  llvm::Value *v95;
  char v96;
  char v97;
  const llvm::APInt *v98;
  _QWORD *v99;
  llvm::Value **v100;
  char *v101;
  llvm::Value ***v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  llvm::Value *v106;
  llvm::Value ****v107;
  llvm::Value *v108;
  char v109;
  char v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  llvm::Value **v121;
  uint64_t v122;
  llvm::Value **v123;
  unsigned int v124;
  _QWORD *v125;
  uint64_t v126;
  _DWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  unsigned int v133;
  unint64_t v134;
  unsigned int v135;
  unsigned int v136;
  unint64_t v137;
  int v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  llvm::Value **v142;
  char *v143;
  char *v144;
  llvm::Value *v145;
  _QWORD *v146;
  llvm::Value *v147;
  _QWORD *v148;
  uint64_t v149;
  char v150;
  _QWORD *v151;
  _QWORD *v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  unint64_t v156;
  int v157;
  _QWORD *v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  char v163;
  llvm::Value **v164;
  uint64_t v165;
  llvm::Value **v166;
  char *v167;
  llvm::Value *v168;
  _QWORD *v169;
  llvm::Value *v170;
  _QWORD *v171;
  uint64_t v172;
  unsigned __int8 v173;
  char *v174;
  _QWORD *v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unsigned __int8 v187;
  unsigned __int8 v188;
  unsigned __int8 v189;
  llvm::APInt **v190;
  llvm::APInt **v191;
  uint64_t v192;
  __int16 v193;
  BOOL v194[8];
  unsigned int v195;
  llvm::APInt *v196;
  _QWORD *v197;
  llvm::APInt *v198;
  llvm::APInt **v199;
  llvm::APInt **v200;
  uint64_t v201;
  __int16 v202;

  v4 = (uint64_t)sub_1C578171C((uint64_t)a1, (uint64_t)a2);
  if (v4)
    return (llvm::Value *)v4;
  v6 = *((_QWORD *)a2 - 8);
  v7 = *((_QWORD *)a2 - 4);
  v8 = a2[16];
  v9 = *(llvm::ConstantInt ***)a2;
  v10 = sub_1C5825BB0(v7, (uint64_t)a1, (llvm::AssumptionCache *)a2);
  if (!v10)
  {
    if ((sub_1C5824480(a1, (uint64_t)a2) & 1) != 0)
      return (llvm::Value *)a2;
    v11 = *(unsigned __int8 *)(v6 + 16);
    if (v11 <= 0x14 && v11 != 5 && sub_1C582A600(v7))
    {
      v4 = sub_1C577FF7C((uint64_t)a1, a2, (_QWORD *)v7, (llvm::Constant *)1);
      if (v4)
        return (llvm::Value *)v4;
    }
    v198 = 0;
    v199 = &v198;
    v200 = 0;
    if (!sub_1C4D89F84((uint64_t)&v199, (unsigned __int8 *)v7))
      goto LABEL_159;
    v196 = 0;
    v197 = 0;
    if (v8 != 48)
    {
      v190 = (llvm::APInt **)&v197;
      v191 = &v196;
      v192 = 0;
      v14 = *(unsigned __int8 *)(v6 + 16);
      if (v14 == 5)
      {
        if (*(_WORD *)(v6 + 18) == 19)
        {
          v24 = v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF);
          if (*(_QWORD *)v24)
          {
            v197 = *(_QWORD **)v24;
            if ((sub_1C4D8A004((uint64_t)&v191, *(llvm::Constant **)(v24 + 32)) & 1) != 0)
              goto LABEL_43;
          }
        }
      }
      else if (v14 == 47)
      {
        if (*(_QWORD *)(v6 - 64))
        {
          v197 = *(_QWORD **)(v6 - 64);
          if (sub_1C4D89F84((uint64_t)&v191, *(unsigned __int8 **)(v6 - 32)))
            goto LABEL_43;
        }
      }
      v4 = 0;
      goto LABEL_48;
    }
    v199 = (llvm::APInt **)&v197;
    v200 = &v196;
    v201 = 0;
    v13 = *(unsigned __int8 *)(v6 + 16);
    if (v13 == 5)
    {
      if (*(_WORD *)(v6 + 18) == 20)
      {
        v15 = v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF);
        if (*(_QWORD *)v15)
        {
          v197 = *(_QWORD **)v15;
          if ((sub_1C4D8A004((uint64_t)&v200, *(llvm::Constant **)(v15 + 32)) & 1) != 0)
            goto LABEL_43;
        }
      }
    }
    else if (v13 == 48)
    {
      if (*(_QWORD *)(v6 - 64))
      {
        v197 = *(_QWORD **)(v6 - 64);
        if ((sub_1C4D89F84((uint64_t)&v200, *(unsigned __int8 **)(v6 - 32)) & 1) != 0)
        {
LABEL_43:
          v25 = (const void **)v196;
          LODWORD(v191) = *((_DWORD *)v196 + 2);
          if (v191 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v190, 0, v8 == 48);
            v25 = (const void **)v196;
          }
          else
          {
            v190 = 0;
          }
          v194[0] = 0;
          if (v8 == 48)
            llvm::APInt::smul_ov(v25, v198, v194, (llvm::APInt *)&v199);
          else
            llvm::APInt::umul_ov((llvm::APInt *)v25, (uint64_t **)v198, v194, (uint64_t)&v199);
          if (v191 >= 0x41 && v190)
            MEMORY[0x1CAA32F9C](v190, 0x1000C8000313F17);
          v190 = v199;
          v56 = v200;
          LODWORD(v191) = (_DWORD)v200;
          v57 = v194[0];
          if (v194[0])
          {
            v4 = 0;
          }
          else
          {
            v188 = a2[16];
            v58 = v197;
            v59 = llvm::ConstantInt::get(v9, (llvm::Type *)&v190, v26);
            v202 = 257;
            v60 = (char *)operator new(0x80uLL);
            *(_QWORD *)v60 = 0;
            *((_QWORD *)v60 + 2) = 0;
            *((_QWORD *)v60 + 1) = 0;
            *((_QWORD *)v60 + 5) = 0;
            *((_QWORD *)v60 + 6) = 0;
            *((_QWORD *)v60 + 4) = 0;
            v61 = (llvm::Value ***)(v60 + 32);
            *((_QWORD *)v60 + 8) = *v58;
            v4 = (uint64_t)(v60 + 64);
            *((_QWORD *)v60 + 3) = v60 + 64;
            *((_QWORD *)v60 + 7) = v60 + 64;
            *((_QWORD *)v60 + 9) = 0;
            v60[80] = v188;
            v60[81] = 0;
            *((_WORD *)v60 + 41) = 0;
            *((_DWORD *)v60 + 21) = 2;
            *((_DWORD *)v60 + 30) = 0;
            *(_OWORD *)(v60 + 104) = 0u;
            *(_OWORD *)(v60 + 88) = 0u;
            *(_QWORD *)v60 = v58;
            v64 = v58[1];
            v63 = v58 + 1;
            v62 = v64;
            *((_QWORD *)v60 + 1) = v64;
            if (v64)
              *(_QWORD *)(v62 + 16) = v60 + 8;
            *((_QWORD *)v60 + 2) = v63;
            *v63 = v60;
            if (*((_QWORD *)v60 + 4))
            {
              **((_QWORD **)v60 + 6) = *((_QWORD *)v60 + 5);
              v185 = *((_QWORD *)v60 + 5);
              if (v185)
                *(_QWORD *)(v185 + 16) = *((_QWORD *)v60 + 6);
            }
            *v61 = v59;
            if (v59)
            {
              v67 = v59[1];
              v66 = (llvm::Value ****)(v59 + 1);
              v65 = v67;
              *((_QWORD *)v60 + 5) = v67;
              if (v67)
                *((_QWORD *)v65 + 2) = v60 + 40;
              *((_QWORD *)v60 + 6) = v66;
              *v66 = v61;
            }
            llvm::Value::setName((uint64_t ***)v60 + 8, (uint64_t)&v199);
            v56 = v191;
          }
          if (v56 >= 0x41 && v190)
            MEMORY[0x1CAA32F9C](v190, 0x1000C8000313F17);
          if (!v57)
            return (llvm::Value *)v4;
          if (v8 == 48)
          {
LABEL_29:
            v199 = (llvm::APInt **)&v197;
            v200 = &v196;
            v201 = 0;
            v16 = *(unsigned __int8 *)(v6 + 16);
            if (v16 < 0x1C)
            {
              if (v16 != 5)
                goto LABEL_111;
              v19 = *(unsigned __int16 *)(v6 + 18);
              HIDWORD(v21) = v19 - 13;
              LODWORD(v21) = v19 - 13;
              v20 = v21 >> 1;
              if (v20 > 6 || ((1 << v20) & 0x47) == 0)
                goto LABEL_111;
            }
            else
            {
              HIDWORD(v18) = v16 - 41;
              LODWORD(v18) = v16 - 41;
              v17 = v18 >> 1;
              if (v17 > 6 || ((1 << v17) & 0x47) == 0)
                goto LABEL_111;
              v19 = v16 - 28;
            }
            if (v19 != 17
              || (*(_BYTE *)(v6 + 17) & 4) == 0
              || ((v22 = *(_DWORD *)(v6 + 20), (v22 & 0x40000000) != 0)
                ? (v23 = *(_QWORD **)(v6 - 8))
                : (v23 = (_QWORD *)(v6 - 32 * (v22 & 0x7FFFFFF))),
                  (v68 = (_QWORD *)*v23) == 0
               || ((v197 = v68, v69 = *(_DWORD *)(v6 + 20), (v69 & 0x40000000) != 0)
                 ? (v70 = *(_QWORD *)(v6 - 8))
                 : (v70 = v6 - 32 * (v69 & 0x7FFFFFF)),
                   (sub_1C4D89F84((uint64_t)&v200, *(unsigned __int8 **)(v70 + 32)) & 1) == 0)))
            {
LABEL_111:
              v199 = (llvm::APInt **)&v197;
              v200 = &v196;
              v201 = 0;
              if (sub_1C582A720(&v199, v6))
              {
                v73 = v196;
                v76 = *((_DWORD *)v196 + 2);
                v77 = v196;
                if (v76 >= 0x41)
                {
                  if (v76 - llvm::APInt::countLeadingZerosSlowCase(v196) > 0x40)
                    goto LABEL_154;
                  v77 = *(llvm::APInt **)v73;
                }
                if (*(_QWORD *)v77 < (unint64_t)(v76 - 1))
                {
LABEL_116:
                  LODWORD(v191) = *((_DWORD *)v73 + 2);
                  if (v191 > 0x40)
                  {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v190, 0, v8 == 48);
                    v73 = v196;
                  }
                  else
                  {
                    v190 = 0;
                  }
                  v78 = *((_DWORD *)v73 + 2);
                  if (v78 > 0x40)
                  {
                    v82 = **(_QWORD **)v73;
                    v195 = v78;
                    llvm::APInt::initSlowCase((llvm::APInt *)v194, 0, 0);
                    v81 = 1 << v82;
                    if (v195 > 0x40)
                    {
                      *(_QWORD *)(*(_QWORD *)v194 + 8 * (v82 >> 6)) |= v81;
LABEL_124:
                      if (sub_1C5825E14(v198, (llvm::APInt *)v194, (llvm::APInt *)&v190, v8 == 48, v72))
                      {
                        v189 = a2[16];
                        v85 = v197;
                        v86 = llvm::ConstantInt::get(v9, (llvm::Type *)&v190, v83);
                        v202 = 257;
                        v87 = (char *)operator new(0x80uLL);
                        v88 = v87;
                        *(_QWORD *)v87 = 0;
                        *((_QWORD *)v87 + 2) = 0;
                        *((_QWORD *)v87 + 1) = 0;
                        *((_QWORD *)v87 + 5) = 0;
                        *((_QWORD *)v87 + 6) = 0;
                        *((_QWORD *)v87 + 4) = 0;
                        v89 = (llvm::Value ***)(v87 + 32);
                        *((_QWORD *)v87 + 8) = *v85;
                        v4 = (uint64_t)(v87 + 64);
                        *((_QWORD *)v87 + 3) = v87 + 64;
                        *((_QWORD *)v87 + 7) = v87 + 64;
                        *((_QWORD *)v87 + 9) = 0;
                        v87[80] = v189;
                        v87[81] = 0;
                        *((_WORD *)v87 + 41) = 0;
                        *((_DWORD *)v87 + 21) = 2;
                        *((_DWORD *)v87 + 30) = 0;
                        *(_OWORD *)(v87 + 104) = 0u;
                        *(_OWORD *)(v87 + 88) = 0u;
                        *(_QWORD *)v87 = v85;
                        v92 = v85[1];
                        v91 = v85 + 1;
                        v90 = v92;
                        *((_QWORD *)v87 + 1) = v92;
                        if (v92)
                          *(_QWORD *)(v90 + 16) = v87 + 8;
                        *((_QWORD *)v87 + 2) = v91;
                        *v91 = v87;
                        if (*((_QWORD *)v87 + 4))
                        {
                          **((_QWORD **)v87 + 6) = *((_QWORD *)v87 + 5);
                          v183 = *((_QWORD *)v87 + 5);
                          if (v183)
                            *(_QWORD *)(v183 + 16) = *((_QWORD *)v87 + 6);
                        }
                        *v89 = v86;
                        if (v86)
                        {
                          v95 = v86[1];
                          v94 = (llvm::Value ****)(v86 + 1);
                          v93 = v95;
                          *((_QWORD *)v87 + 5) = v95;
                          if (v95)
                            *((_QWORD *)v93 + 2) = v87 + 40;
                          *((_QWORD *)v87 + 6) = v94;
                          *v94 = v89;
                        }
                        llvm::Value::setName((uint64_t ***)v87 + 8, (uint64_t)&v199);
                        v96 = 0;
                        v97 = v88[81] & 0xFD | a2[17] & 2;
                      }
                      else
                      {
                        if (!sub_1C5825E14((llvm::APInt *)v194, v198, (llvm::APInt *)&v190, v8 == 48, v84))
                        {
                          v96 = 1;
LABEL_147:
                          if (v195 >= 0x41 && *(_QWORD *)v194)
                            MEMORY[0x1CAA32F9C](*(_QWORD *)v194, 0x1000C8000313F17);
                          if (v191 >= 0x41 && v190)
                            MEMORY[0x1CAA32F9C](v190, 0x1000C8000313F17);
                          if ((v96 & 1) == 0)
                            return (llvm::Value *)v4;
                          goto LABEL_154;
                        }
                        v99 = v197;
                        v100 = llvm::ConstantInt::get(v9, (llvm::Type *)&v190, v98);
                        v202 = 257;
                        v101 = (char *)operator new(0x80uLL);
                        v88 = v101;
                        *(_QWORD *)v101 = 0;
                        *((_QWORD *)v101 + 2) = 0;
                        *((_QWORD *)v101 + 1) = 0;
                        *((_QWORD *)v101 + 5) = 0;
                        *((_QWORD *)v101 + 6) = 0;
                        *((_QWORD *)v101 + 4) = 0;
                        v102 = (llvm::Value ***)(v101 + 32);
                        *((_QWORD *)v101 + 8) = *v99;
                        v4 = (uint64_t)(v101 + 64);
                        *((_QWORD *)v101 + 3) = v101 + 64;
                        *((_QWORD *)v101 + 7) = v101 + 64;
                        *((_QWORD *)v101 + 9) = 0;
                        v101[80] = 45;
                        v101[81] = 0;
                        *((_WORD *)v101 + 41) = 0;
                        *((_DWORD *)v101 + 21) = 2;
                        *((_DWORD *)v101 + 30) = 0;
                        *(_OWORD *)(v101 + 104) = 0u;
                        *(_OWORD *)(v101 + 88) = 0u;
                        *(_QWORD *)v101 = v99;
                        v105 = v99[1];
                        v104 = v99 + 1;
                        v103 = v105;
                        *((_QWORD *)v101 + 1) = v105;
                        if (v105)
                          *(_QWORD *)(v103 + 16) = v101 + 8;
                        *((_QWORD *)v101 + 2) = v104;
                        *v104 = v101;
                        if (*((_QWORD *)v101 + 4))
                        {
                          **((_QWORD **)v101 + 6) = *((_QWORD *)v101 + 5);
                          v186 = *((_QWORD *)v101 + 5);
                          if (v186)
                            *(_QWORD *)(v186 + 16) = *((_QWORD *)v101 + 6);
                        }
                        *v102 = v100;
                        if (v100)
                        {
                          v108 = v100[1];
                          v107 = (llvm::Value ****)(v100 + 1);
                          v106 = v108;
                          *((_QWORD *)v101 + 5) = v108;
                          if (v108)
                            *((_QWORD *)v106 + 2) = v101 + 40;
                          *((_QWORD *)v101 + 6) = v107;
                          *v107 = v102;
                        }
                        llvm::Value::setName((uint64_t ***)v101 + 8, (uint64_t)&v199);
                        if (v8 == 48)
                          v109 = 0;
                        else
                          v109 = *(_BYTE *)(v6 + 17) & 2;
                        v96 = 0;
                        v110 = v88[81] & 0xFD | v109;
                        v88[81] = v110;
                        v97 = v110 & 0xFB | *(_BYTE *)(v6 + 17) & 4;
                      }
                      v88[81] = v97;
                      goto LABEL_147;
                    }
                    v79 = *(_QWORD *)v194;
                  }
                  else
                  {
                    v79 = 0;
                    v80 = *(llvm::APInt **)v73;
                    v195 = *((_DWORD *)v73 + 2);
                    v81 = 1 << (char)v80;
                  }
                  *(_QWORD *)v194 = v79 | v81;
                  goto LABEL_124;
                }
              }
              goto LABEL_154;
            }
            goto LABEL_49;
          }
LABEL_48:
          v190 = (llvm::APInt **)&v197;
          v191 = &v196;
          v192 = 0;
          if ((sub_1C582A658(&v190, v6) & 1) == 0)
            goto LABEL_103;
LABEL_49:
          v28 = v196;
          LODWORD(v191) = *((_DWORD *)v196 + 2);
          if (v191 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v190, 0, v8 == 48);
            v28 = v196;
          }
          else
          {
            v190 = 0;
          }
          if (sub_1C5825E14(v198, v28, (llvm::APInt *)&v190, v8 == 48, v27))
          {
            v187 = a2[16];
            v31 = v197;
            v32 = llvm::ConstantInt::get(v9, (llvm::Type *)&v190, v29);
            v202 = 257;
            v33 = (char *)operator new(0x80uLL);
            v34 = v33;
            *(_QWORD *)v33 = 0;
            *((_QWORD *)v33 + 2) = 0;
            *((_QWORD *)v33 + 1) = 0;
            *((_QWORD *)v33 + 5) = 0;
            *((_QWORD *)v33 + 6) = 0;
            *((_QWORD *)v33 + 4) = 0;
            v35 = (llvm::Value ***)(v33 + 32);
            *((_QWORD *)v33 + 8) = *v31;
            v4 = (uint64_t)(v33 + 64);
            *((_QWORD *)v33 + 3) = v33 + 64;
            *((_QWORD *)v33 + 7) = v33 + 64;
            *((_QWORD *)v33 + 9) = 0;
            v33[80] = v187;
            v33[81] = 0;
            *((_WORD *)v33 + 41) = 0;
            *((_DWORD *)v33 + 21) = 2;
            *((_DWORD *)v33 + 30) = 0;
            *(_OWORD *)(v33 + 104) = 0u;
            *(_OWORD *)(v33 + 88) = 0u;
            *(_QWORD *)v33 = v31;
            v38 = v31[1];
            v37 = v31 + 1;
            v36 = v38;
            *((_QWORD *)v33 + 1) = v38;
            if (v38)
              *(_QWORD *)(v36 + 16) = v33 + 8;
            *((_QWORD *)v33 + 2) = v37;
            *v37 = v33;
            if (*((_QWORD *)v33 + 4))
            {
              **((_QWORD **)v33 + 6) = *((_QWORD *)v33 + 5);
              v182 = *((_QWORD *)v33 + 5);
              if (v182)
                *(_QWORD *)(v182 + 16) = *((_QWORD *)v33 + 6);
            }
            *v35 = v32;
            if (v32)
            {
              v41 = v32[1];
              v40 = (llvm::Value ****)(v32 + 1);
              v39 = v41;
              *((_QWORD *)v33 + 5) = v41;
              if (v41)
                *((_QWORD *)v39 + 2) = v33 + 40;
              *((_QWORD *)v33 + 6) = v40;
              *v40 = v35;
            }
            llvm::Value::setName((uint64_t ***)v33 + 8, (uint64_t)&v199);
            v42 = 0;
            v43 = v34[81] & 0xFD | a2[17] & 2;
          }
          else
          {
            if (!sub_1C5825E14(v196, v198, (llvm::APInt *)&v190, v8 == 48, v30))
            {
              v42 = 1;
LABEL_98:
              if (v191 >= 0x41 && v190)
                MEMORY[0x1CAA32F9C](v190, 0x1000C8000313F17);
              if ((v42 & 1) == 0)
                return (llvm::Value *)v4;
              if (v8 == 48)
                goto LABEL_111;
LABEL_103:
              v190 = (llvm::APInt **)&v197;
              v191 = &v196;
              v192 = 0;
              if (sub_1C4E73984(&v190, v6))
              {
                v73 = v196;
                v74 = *((unsigned int *)v196 + 2);
                v75 = v196;
                if (v74 >= 0x41)
                {
                  if (v74 - llvm::APInt::countLeadingZerosSlowCase(v196) > 0x40)
                    goto LABEL_154;
                  v75 = *(llvm::APInt **)v73;
                }
                if (*(_QWORD *)v75 < v74)
                  goto LABEL_116;
              }
LABEL_154:
              v111 = *((_DWORD *)v198 + 2);
              if (v111 > 0x40)
              {
                if (llvm::APInt::countLeadingZerosSlowCase(v198) == v111)
                  goto LABEL_159;
              }
              else if (!*(_QWORD *)v198)
              {
                goto LABEL_159;
              }
              v4 = sub_1C5781CD4((uint64_t)a1, a2);
              if (v4)
                return (llvm::Value *)v4;
LABEL_159:
              if (sub_1C4D89CC8((uint64_t)&v199, (llvm::Constant *)v6))
              {
                if (v8 == 48)
                {
                  v112 = a1[3];
                  v193 = 257;
                  v113 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v112 + 72)
                                                                                             + 16))(*(_QWORD *)(v112 + 72), v7, v6, 0, 0);
                  if (!v113)
                  {
                    v202 = 257;
                    v114 = (char *)operator new(0x80uLL);
                    *((_QWORD *)v114 + 6) = 0;
                    *((_QWORD *)v114 + 8) = *(_QWORD *)v7;
                    v115 = (uint64_t)(v114 + 64);
                    *((_QWORD *)v114 + 3) = v114 + 64;
                    *((_QWORD *)v114 + 7) = v114 + 64;
                    *((_QWORD *)v114 + 9) = 0;
                    v114[80] = 41;
                    v114[81] = 0;
                    *((_WORD *)v114 + 41) = 0;
                    *((_DWORD *)v114 + 21) = 2;
                    *(_OWORD *)(v114 + 88) = 0u;
                    *(_OWORD *)(v114 + 104) = 0u;
                    *((_DWORD *)v114 + 30) = 0;
                    *(_QWORD *)v114 = v7;
                    v116 = (_QWORD *)(v7 + 8);
                    v117 = *(_QWORD *)(v7 + 8);
                    *((_QWORD *)v114 + 1) = v117;
                    if (v117)
                      *(_QWORD *)(v117 + 16) = v114 + 8;
                    *((_QWORD *)v114 + 2) = v116;
                    *v116 = v114;
                    v118 = (_QWORD *)(v6 + 8);
                    v119 = *(_QWORD *)(v6 + 8);
                    *((_QWORD *)v114 + 5) = v119;
                    *((_QWORD *)v114 + 4) = v6;
                    if (v119)
                      *(_QWORD *)(v119 + 16) = v114 + 40;
                    *((_QWORD *)v114 + 6) = v118;
                    *v118 = v114 + 32;
                    llvm::Value::setName((uint64_t ***)v114 + 8, (uint64_t)&v199);
                    v113 = sub_1C4773754((uint64_t *)v112, v115, (uint64_t)&v190);
                  }
                  v120 = a1[3];
                  v121 = llvm::ConstantInt::get((llvm::ConstantInt *)v9, 3, 0);
                  v202 = 257;
                  v122 = sub_1C4774B48(v120, 36, v113, (uint64_t)v121, (uint64_t)&v199);
                  v123 = llvm::ConstantInt::get((llvm::ConstantInt *)v9, 0, 0);
                  v202 = 257;
                  return sub_1C4FC8748(v122, (uint64_t *)v7, (uint64_t)v123, (uint64_t)&v199, 0, 0);
                }
                else
                {
                  v127 = operator new(0x60uLL);
                  v4 = (uint64_t)(v127 + 8);
                  v127[13] = v127[13] & 0x38000000 | 1;
                  *(_QWORD *)v127 = 0;
                  *((_QWORD *)v127 + 1) = 0;
                  *((_QWORD *)v127 + 2) = 0;
                  *((_QWORD *)v127 + 3) = v127 + 8;
                  v128 = a1[3];
                  v202 = 257;
                  v129 = sub_1C4774B48(v128, 32, v7, v6, (uint64_t)&v199);
                  v193 = 257;
                  llvm::ZExtInst::ZExtInst(v4, v129, (uint64_t)v9, (uint64_t)&v190, 0);
                }
                return (llvm::Value *)v4;
              }
              if (sub_1C584C4C4((uint64_t)a1, (llvm::UndefValue *)a2))
                return (llvm::Value *)a2;
              v124 = *(unsigned __int8 *)(v6 + 16);
              if (v124 == 5)
              {
                if (*(_WORD *)(v6 + 18) != 15
                  || (v130 = v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF), (v125 = *(_QWORD **)v130) == 0)
                  || (v126 = *(_QWORD *)(v130 + 32)) == 0)
                {
LABEL_183:
                  if (v8 == 48)
                    goto LABEL_184;
                  goto LABEL_216;
                }
              }
              else
              {
                if (v124 != 43)
                  goto LABEL_183;
                v125 = *(_QWORD **)(v6 - 64);
                if (!v125)
                  goto LABEL_183;
                v126 = *(_QWORD *)(v6 - 32);
                if (!v126)
                  goto LABEL_183;
              }
              v131 = *(unsigned __int8 *)(v126 + 16);
              if (v8 == 48)
              {
                if (v131 == 5)
                {
                  if (*(_WORD *)(v126 + 18) != 23)
                    goto LABEL_184;
                  v151 = (_QWORD *)(v126 - 32 * (*(_DWORD *)(v126 + 20) & 0x7FFFFFF));
                  if (v125 != (_QWORD *)*v151)
                    goto LABEL_184;
                  v132 = v151[4];
                }
                else
                {
                  if (v131 != 51 || v125 != *(_QWORD **)(v126 - 64))
                    goto LABEL_184;
                  v132 = *(_QWORD *)(v126 - 32);
                }
                if (v7 != v132)
                {
LABEL_184:
                  if (v124 < 0x1C)
                  {
                    if (v124 != 5)
                      goto LABEL_228;
                    v135 = *(unsigned __int16 *)(v6 + 18);
                    HIDWORD(v137) = v135 - 13;
                    LODWORD(v137) = v135 - 13;
                    v136 = v137 >> 1;
                    if (v136 > 6 || ((1 << v136) & 0x47) == 0)
                      goto LABEL_228;
                  }
                  else
                  {
                    HIDWORD(v134) = v124 - 41;
                    LODWORD(v134) = v124 - 41;
                    v133 = v134 >> 1;
                    if (v133 > 6 || ((1 << v133) & 0x47) == 0)
                      goto LABEL_228;
                    v135 = v124 - 28;
                  }
                  if (v135 == 25 && (*(_BYTE *)(v6 + 17) & 4) != 0)
                  {
                    v138 = *(_DWORD *)(v6 + 20);
                    v139 = (v138 & 0x40000000) != 0 ? *(_QWORD **)(v6 - 8) : (_QWORD *)(v6 - 32 * (v138 & 0x7FFFFFF));
                    if (*v139 == v7)
                    {
                      v141 = v139[4];
                      if (v141)
                      {
                        v142 = llvm::ConstantInt::get((llvm::ConstantInt *)v9, 1, 0);
                        v202 = 257;
                        v143 = (char *)operator new(0x80uLL);
                        v144 = v143;
                        *((_QWORD *)v143 + 6) = 0;
                        *((_QWORD *)v143 + 8) = *v142;
                        v4 = (uint64_t)(v143 + 64);
                        *((_QWORD *)v143 + 3) = v143 + 64;
                        *((_QWORD *)v143 + 7) = v143 + 64;
                        *((_QWORD *)v143 + 9) = 0;
                        v143[80] = 53;
                        v143[81] = 0;
                        *((_WORD *)v143 + 41) = 0;
                        *((_DWORD *)v143 + 21) = 2;
                        *(_OWORD *)(v143 + 88) = 0u;
                        *(_OWORD *)(v143 + 104) = 0u;
                        *((_DWORD *)v143 + 30) = 0;
                        *(_QWORD *)v143 = v142;
                        v147 = v142[1];
                        v146 = v142 + 1;
                        v145 = v147;
                        *((_QWORD *)v143 + 1) = v147;
                        if (v147)
                          *((_QWORD *)v145 + 2) = v143 + 8;
                        *((_QWORD *)v143 + 2) = v146;
                        *v146 = v143;
                        v148 = (_QWORD *)(v141 + 8);
                        v149 = *(_QWORD *)(v141 + 8);
                        *((_QWORD *)v143 + 5) = v149;
                        *((_QWORD *)v143 + 4) = v141;
                        if (v149)
                          *(_QWORD *)(v149 + 16) = v143 + 40;
                        *((_QWORD *)v143 + 6) = v148;
                        *v148 = v143 + 32;
                        llvm::Value::setName((uint64_t ***)v143 + 8, (uint64_t)&v199);
                        v150 = v144[81] | 4;
LABEL_250:
                        v144[81] = v150;
                        return (llvm::Value *)v4;
                      }
                    }
                  }
LABEL_228:
                  v159 = *(unsigned __int8 *)(v7 + 16);
                  if (v159 == 5)
                  {
                    if (*(_WORD *)(v7 + 18) != 17)
                      return 0;
                    v162 = (uint64_t *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF));
                    v160 = *v162;
                    v161 = v162[4];
                  }
                  else
                  {
                    if (v159 != 45)
                      return 0;
                    v160 = *(_QWORD *)(v7 - 64);
                    v161 = *(_QWORD *)(v7 - 32);
                  }
                  if (v6 == v160)
                  {
                    v160 = v161;
                    if (!v161)
                      return 0;
                  }
                  else
                  {
                    v4 = 0;
                    if (!v160 || v6 != v161)
                      return (llvm::Value *)v4;
                  }
                  if (v8 == 48)
                    v163 = 4;
                  else
                    v163 = 2;
                  if ((*(_BYTE *)(v7 + 17) & v163) != 0)
                  {
                    v164 = llvm::ConstantInt::get((llvm::ConstantInt *)v9, 1, 0);
                    sub_1C577E2C8((uint64_t)a1, (uint64_t)a2, 0, (uint64_t)v164);
                    sub_1C577E2C8((uint64_t)a1, (uint64_t)a2, 1u, v160);
                    return (llvm::Value *)a2;
                  }
                  return 0;
                }
              }
              else
              {
                if (v131 == 5)
                {
                  if (*(_WORD *)(v126 + 18) != 22)
                    goto LABEL_216;
                  v152 = (_QWORD *)(v126 - 32 * (*(_DWORD *)(v126 + 20) & 0x7FFFFFF));
                  if (v125 != (_QWORD *)*v152)
                    goto LABEL_216;
                  v140 = v152[4];
                }
                else
                {
                  if (v131 != 50 || v125 != *(_QWORD **)(v126 - 64))
                    goto LABEL_216;
                  v140 = *(_QWORD *)(v126 - 32);
                }
                if (v7 != v140)
                {
LABEL_216:
                  v153 = v124 - 28;
                  if (v124 < 0x1C)
                  {
                    if (v124 != 5)
                      goto LABEL_228;
                    v153 = *(unsigned __int16 *)(v6 + 18);
                    v154 = v153 - 13;
                  }
                  else
                  {
                    v154 = v124 - 41;
                  }
                  HIDWORD(v156) = v154;
                  LODWORD(v156) = v154;
                  v155 = v156 >> 1;
                  if (v155 <= 6 && ((1 << v155) & 0x47) != 0 && v153 == 25 && (*(_BYTE *)(v6 + 17) & 2) != 0)
                  {
                    v157 = *(_DWORD *)(v6 + 20);
                    v158 = (v157 & 0x40000000) != 0 ? *(_QWORD **)(v6 - 8) : (_QWORD *)(v6 - 32 * (v157 & 0x7FFFFFF));
                    if (*v158 == v7)
                    {
                      v165 = v158[4];
                      if (v165)
                      {
                        v166 = llvm::ConstantInt::get((llvm::ConstantInt *)v9, 1, 0);
                        v202 = 257;
                        v167 = (char *)operator new(0x80uLL);
                        v144 = v167;
                        *((_QWORD *)v167 + 6) = 0;
                        *((_QWORD *)v167 + 8) = *v166;
                        v4 = (uint64_t)(v167 + 64);
                        *((_QWORD *)v167 + 3) = v167 + 64;
                        *((_QWORD *)v167 + 7) = v167 + 64;
                        *((_QWORD *)v167 + 9) = 0;
                        v167[80] = 53;
                        v167[81] = 0;
                        *((_WORD *)v167 + 41) = 0;
                        *((_DWORD *)v167 + 21) = 2;
                        *(_OWORD *)(v167 + 88) = 0u;
                        *(_OWORD *)(v167 + 104) = 0u;
                        *((_DWORD *)v167 + 30) = 0;
                        *(_QWORD *)v167 = v166;
                        v170 = v166[1];
                        v169 = v166 + 1;
                        v168 = v170;
                        *((_QWORD *)v167 + 1) = v170;
                        if (v170)
                          *((_QWORD *)v168 + 2) = v167 + 8;
                        *((_QWORD *)v167 + 2) = v169;
                        *v169 = v167;
                        v171 = (_QWORD *)(v165 + 8);
                        v172 = *(_QWORD *)(v165 + 8);
                        *((_QWORD *)v167 + 5) = v172;
                        *((_QWORD *)v167 + 4) = v165;
                        if (v172)
                          *(_QWORD *)(v172 + 16) = v167 + 40;
                        *((_QWORD *)v167 + 6) = v171;
                        *v171 = v167 + 32;
                        llvm::Value::setName((uint64_t ***)v167 + 8, (uint64_t)&v199);
                        v150 = v144[81] | 2;
                        goto LABEL_250;
                      }
                    }
                  }
                  goto LABEL_228;
                }
              }
              v173 = a2[16];
              v202 = 257;
              v174 = (char *)operator new(0x80uLL);
              *((_QWORD *)v174 + 6) = 0;
              *((_QWORD *)v174 + 5) = 0;
              v175 = v174 + 40;
              *((_QWORD *)v174 + 8) = *v125;
              v4 = (uint64_t)(v174 + 64);
              *((_QWORD *)v174 + 3) = v174 + 64;
              *((_QWORD *)v174 + 7) = v174 + 64;
              *((_QWORD *)v174 + 9) = 0;
              v174[80] = v173;
              v174[81] = 0;
              *((_WORD *)v174 + 41) = 0;
              *((_DWORD *)v174 + 21) = 2;
              *(_OWORD *)(v174 + 88) = 0u;
              *(_OWORD *)(v174 + 104) = 0u;
              *((_DWORD *)v174 + 30) = 0;
              *(_QWORD *)v174 = v125;
              v178 = v125[1];
              v177 = v125 + 1;
              v176 = v178;
              *((_QWORD *)v174 + 1) = v178;
              if (v178)
                *(_QWORD *)(v176 + 16) = v174 + 8;
              *((_QWORD *)v174 + 2) = v177;
              *v177 = v174;
              *((_QWORD *)v174 + 4) = v7;
              if (v7)
              {
                v181 = *(_QWORD *)(v7 + 8);
                v180 = (_QWORD *)(v7 + 8);
                v179 = v181;
                *v175 = v181;
                if (v181)
                  *(_QWORD *)(v179 + 16) = v175;
                *((_QWORD *)v174 + 6) = v180;
                *v180 = v174 + 32;
              }
              llvm::Value::setName((uint64_t ***)v174 + 8, (uint64_t)&v199);
              return (llvm::Value *)v4;
            }
            v45 = v197;
            v46 = llvm::ConstantInt::get(v9, (llvm::Type *)&v190, v44);
            v202 = 257;
            v47 = (char *)operator new(0x80uLL);
            v34 = v47;
            *(_QWORD *)v47 = 0;
            *((_QWORD *)v47 + 2) = 0;
            *((_QWORD *)v47 + 1) = 0;
            *((_QWORD *)v47 + 5) = 0;
            *((_QWORD *)v47 + 6) = 0;
            *((_QWORD *)v47 + 4) = 0;
            v48 = (llvm::Value ***)(v47 + 32);
            *((_QWORD *)v47 + 8) = *v45;
            v4 = (uint64_t)(v47 + 64);
            *((_QWORD *)v47 + 3) = v47 + 64;
            *((_QWORD *)v47 + 7) = v47 + 64;
            *((_QWORD *)v47 + 9) = 0;
            v47[80] = 45;
            v47[81] = 0;
            *((_WORD *)v47 + 41) = 0;
            *((_DWORD *)v47 + 21) = 2;
            *((_DWORD *)v47 + 30) = 0;
            *(_OWORD *)(v47 + 104) = 0u;
            *(_OWORD *)(v47 + 88) = 0u;
            *(_QWORD *)v47 = v45;
            v51 = v45[1];
            v50 = v45 + 1;
            v49 = v51;
            *((_QWORD *)v47 + 1) = v51;
            if (v51)
              *(_QWORD *)(v49 + 16) = v47 + 8;
            *((_QWORD *)v47 + 2) = v50;
            *v50 = v47;
            if (*((_QWORD *)v47 + 4))
            {
              **((_QWORD **)v47 + 6) = *((_QWORD *)v47 + 5);
              v184 = *((_QWORD *)v47 + 5);
              if (v184)
                *(_QWORD *)(v184 + 16) = *((_QWORD *)v47 + 6);
            }
            *v48 = v46;
            if (v46)
            {
              v54 = v46[1];
              v53 = (llvm::Value ****)(v46 + 1);
              v52 = v54;
              *((_QWORD *)v47 + 5) = v54;
              if (v54)
                *((_QWORD *)v52 + 2) = v47 + 40;
              *((_QWORD *)v47 + 6) = v53;
              *v53 = v48;
            }
            llvm::Value::setName((uint64_t ***)v47 + 8, (uint64_t)&v199);
            if (v8 == 48)
              v55 = 0;
            else
              v55 = *(_BYTE *)(v6 + 17) & 2;
            v42 = 0;
            v71 = v34[81] & 0xFD | v55;
            v34[81] = v71;
            v43 = v71 & 0xFB | *(_BYTE *)(v6 + 17) & 4;
          }
          v34[81] = v43;
          goto LABEL_98;
        }
      }
    }
    v4 = 0;
    goto LABEL_29;
  }
  return (llvm::Value *)sub_1C577E2C8((uint64_t)a1, (uint64_t)a2, 1u, v10);
}

uint64_t sub_1C5825BB0(uint64_t a1, uint64_t a2, llvm::AssumptionCache *a3)
{
  uint64_t v3;
  uint64_t result;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  llvm::Constant *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  _BYTE v27[32];
  __int16 v28;

  v3 = *(_QWORD *)(a1 + 8);
  if (!v3 || *(_QWORD *)(v3 + 8))
    return 0;
  v8 = *(unsigned __int8 *)(a1 + 16);
  if (v8 == 5)
  {
    if (*(_WORD *)(a1 + 18) != 26)
      goto LABEL_17;
    v14 = (_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
    v15 = *v14;
    v16 = *(_QWORD *)(*v14 + 8);
    if (!v16 || *(_QWORD *)(v16 + 8))
      goto LABEL_17;
    v19 = *(unsigned __int8 *)(v15 + 16);
    if (v19 == 5)
    {
      if (*(_WORD *)(v15 + 18) != 25)
        goto LABEL_17;
      v22 = v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF);
      v12 = *(llvm::Constant **)v22;
      if (!*(_QWORD *)v22)
        goto LABEL_17;
      v13 = *(_QWORD *)(v22 + 32);
      if (!v13)
        goto LABEL_17;
    }
    else
    {
      if (v19 != 53)
        goto LABEL_17;
      v12 = *(llvm::Constant **)(v15 - 64);
      if (!v12)
        goto LABEL_17;
      v13 = *(_QWORD *)(v15 - 32);
      if (!v13)
        goto LABEL_17;
    }
    v21 = v14[4];
    if (!v21)
      goto LABEL_17;
  }
  else
  {
    if (v8 != 54)
      goto LABEL_17;
    v9 = *(_QWORD *)(a1 - 64);
    v10 = *(_QWORD *)(v9 + 8);
    if (!v10 || *(_QWORD *)(v10 + 8))
      goto LABEL_17;
    v11 = *(unsigned __int8 *)(v9 + 16);
    if (v11 == 5)
    {
      if (*(_WORD *)(v9 + 18) != 25)
        goto LABEL_17;
      v20 = v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF);
      v12 = *(llvm::Constant **)v20;
      if (!*(_QWORD *)v20)
        goto LABEL_17;
      v13 = *(_QWORD *)(v20 + 32);
      if (!v13)
        goto LABEL_17;
    }
    else
    {
      if (v11 != 53)
        goto LABEL_17;
      v12 = *(llvm::Constant **)(v9 - 64);
      if (!v12)
        goto LABEL_17;
      v13 = *(_QWORD *)(v9 - 32);
      if (!v13)
        goto LABEL_17;
    }
    v21 = *(_QWORD *)(a1 - 32);
    if (!v21)
      goto LABEL_17;
  }
  if ((sub_1C4D89CC8((uint64_t)v27, v12) & 1) != 0)
  {
    v23 = *(_QWORD *)(a2 + 24);
    v28 = 257;
    v24 = sub_1C47733F8(v23, v13, v21, (uint64_t)v27, 0, 0);
    v25 = *(_QWORD *)(a2 + 24);
    v28 = 257;
    return sub_1C506E874(v25, (uint64_t)v12, v24, (uint64_t)v27, 0, 0);
  }
  v8 = *(unsigned __int8 *)(a1 + 16);
LABEL_17:
  result = 0;
  if (v8 >= 0x1C && v8 - 59 >= 0xFFFFFFEE && v8 - 55 >= 0xFFFFFFFE)
  {
    if (llvm::isKnownToBeAPowerOfTwo(*(llvm **)(a1 - 64), *(const llvm::Value **)(a2 + 80), 0, 0, *(_QWORD *)(a2 + 56), a3, *(const llvm::Instruction **)(a2 + 72), (const llvm::DominatorTree *)1, v26))
    {
      v17 = sub_1C5825BB0(*(_QWORD *)(a1 - 64), a2, a3);
      if (v17)
        sub_1C577E2C8(a2, a1, 0, v17);
      v18 = *(unsigned __int8 *)(a1 + 16);
      if ((v18 == 53 || v18 == 54) && (*(_BYTE *)(a1 + 17) & 2) == 0)
      {
        *(_BYTE *)(a1 + 17) |= 2u;
        return a1;
      }
      if (v17)
        return a1;
    }
    return 0;
  }
  return result;
}

BOOL sub_1C5825E14(llvm::APInt *this, llvm::APInt *a2, llvm::APInt *a3, int a4, llvm::APInt *a5)
{
  unsigned int v9;
  _BOOL8 v10;
  unsigned int v11;
  int v12;
  int64_t v13;
  unint64_t v15;
  unsigned int v16;
  uint64_t v18;
  unsigned int v19;

  v9 = *((_DWORD *)a2 + 2);
  if (v9 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase(a2) == v9)
      return 0;
  }
  else if (!*(_QWORD *)a2)
  {
    return 0;
  }
  if (a4)
  {
    v11 = *((_DWORD *)this + 2);
    if (v11 > 0x40)
    {
      if (((*(_QWORD *)(*(_QWORD *)this + 8 * ((v11 - 1) >> 6)) >> (v11 - 1)) & 1) == 0
        || llvm::APInt::countTrailingZerosSlowCase((unint64_t **)this) != v11 - 1)
      {
        v19 = v11;
        goto LABEL_34;
      }
    }
    else if (*(_QWORD *)this != 1 << (v11 - 1))
    {
      v19 = *((_DWORD *)this + 2);
LABEL_19:
      v18 = 0;
LABEL_20:
      llvm::APInt::sdivrem(this, (const void **)a2, a3, (llvm::APInt *)&v18, a5);
      goto LABEL_21;
    }
    if (v9)
    {
      if (v9 > 0x40)
      {
        if (llvm::APInt::countTrailingOnesSlowCase(a2) != v9)
          goto LABEL_18;
      }
      else if (*(_QWORD *)a2 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v9)
      {
LABEL_18:
        v19 = v11;
        if (v11 <= 0x40)
          goto LABEL_19;
LABEL_34:
        llvm::APInt::initSlowCase((llvm::APInt *)&v18, 0, 1);
        goto LABEL_20;
      }
    }
    return 0;
  }
  v19 = *((_DWORD *)this + 2);
  if (v19 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v18, 0, 0);
  else
    v18 = 0;
  llvm::APInt::udivrem((llvm::APInt **)this, a2, a3, (llvm::APInt *)&v18, a5);
LABEL_21:
  if (v19 <= 0x40)
    return v18 == 0;
  v12 = 0;
  v13 = ((unint64_t)v19 + 63) >> 6;
  do
  {
    if (v13-- < 1)
      break;
    v15 = *(_QWORD *)(v18 + 8 * v13);
    v12 += __clz(v15);
  }
  while (!v15);
  v16 = v19 | 0xFFFFFFC0;
  if ((v19 & 0x3F) == 0)
    v16 = 0;
  v10 = v12 + v16 == v19;
  if (v18)
    MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
  return v10;
}

llvm::UndefValue **sub_1C582600C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm::DSOLocalEquivalent **a6)
{
  unsigned __int8 *v8;
  llvm::Constant *v9;
  __int128 v10;
  __int128 v11;
  llvm::Value *v12;
  uint64_t ***v14;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  const llvm::APInt *v20;
  _BOOL4 v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  llvm::ConstantInt ***v25;
  llvm::Value **v26;
  char *v27;
  char *v28;
  llvm::Value ***v29;
  llvm::ConstantInt **v30;
  _QWORD *v31;
  llvm::ConstantInt **v32;
  llvm::Value *v33;
  llvm::Value ****v34;
  llvm::Value *v35;
  llvm::Constant *v36;
  uint64_t v37;
  uint64_t *v38;
  llvm::Type *v39;
  int v40;
  uint64_t v41;
  llvm::ValueHandleBase *AllOnesValue;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  int v49;
  uint64_t *v50;
  _QWORD *v51;
  _QWORD *v52;
  llvm::ConstantInt ***v53;
  char *v54;
  llvm::ConstantInt ***v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  llvm::ConstantInt **v59;
  _QWORD *v60;
  llvm::ConstantInt **v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 **v71;
  unsigned __int8 *v72;
  int v73;
  int v74;
  unsigned __int8 *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  llvm::APInt **v81;
  uint64_t v82;
  llvm::APInt *v83;
  const llvm::APInt *v84;
  llvm::ConstantInt ***v85;
  __int128 v86;
  __int128 v87;
  unsigned __int8 *v88;
  uint64_t v89;

  v8 = (unsigned __int8 *)*((_QWORD *)a2 - 8);
  v9 = (llvm::Constant *)*((_QWORD *)a2 - 4);
  v10 = *(_OWORD *)(a1 + 120);
  v11 = *(_OWORD *)(a1 + 104);
  v86 = *(_OWORD *)(a1 + 88);
  v87 = v11;
  v89 = *((_QWORD *)&v10 + 1);
  v88 = a2;
  v12 = (llvm::Value *)sub_1C4E71D14((llvm *)0x13, v8, v9, (llvm::Constant **)&v86, (const llvm::DataLayout *)3, a6);
  if (v12)
    return sub_1C577F888(a1, (llvm::ValueAsMetadata *)a2, v12);
  v14 = (uint64_t ***)sub_1C57826B8(a1, a2);
  if (!v14)
  {
    v14 = (uint64_t ***)sub_1C5824840((_QWORD *)a1, a2);
    if (!v14)
    {
      v16 = *((_QWORD *)a2 - 8);
      v17 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
      v84 = 0;
      v85 = 0;
      v83 = 0;
      *(_QWORD *)&v86 = &v85;
      *((_QWORD *)&v86 + 1) = &v84;
      *(_QWORD *)&v87 = 0;
      v18 = *(unsigned __int8 *)(v16 + 16);
      if (v18 == 5)
      {
        if (*(_WORD *)(v16 + 18) != 26)
          goto LABEL_40;
        v19 = v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF);
        if (!*(_QWORD *)v19)
          goto LABEL_40;
        v85 = *(llvm::ConstantInt ****)v19;
        if ((sub_1C4D8A004((uint64_t)&v86 + 8, *(llvm::Constant **)(v19 + 32)) & 1) == 0)
          goto LABEL_40;
      }
      else
      {
        if (v18 != 54)
          goto LABEL_40;
        if (!*(_QWORD *)(v16 - 64))
          goto LABEL_40;
        v85 = *(llvm::ConstantInt ****)(v16 - 64);
        if (!sub_1C4D89F84((uint64_t)&v86 + 8, *(unsigned __int8 **)(v16 - 32)))
          goto LABEL_40;
      }
      v81 = &v83;
      v82 = 0;
      if (!sub_1C4D89F84((uint64_t)&v81, v17))
        goto LABEL_40;
      v80 = 0;
      llvm::APInt::ushl_ov(v83, v84, &v80, (unsigned int *)&v81);
      v21 = v80;
      if (v80)
      {
LABEL_36:
        if (v82 >= 0x41 && v81)
          MEMORY[0x1CAA32F9C](v81, 0x1000C8000313F17);
        if (!v21)
          return (llvm::UndefValue **)v14;
LABEL_40:
        v36 = *(llvm::Constant **)a2;
        if (sub_1C4E734E4((uint64_t)&v86, (llvm::Constant *)v17))
        {
          v37 = *(_QWORD *)(a1 + 24);
          LOWORD(v88) = 257;
          v38 = (uint64_t *)sub_1C4774B48(v37, 35, v16, (uint64_t)v17, (uint64_t)&v86);
          LOWORD(v88) = 257;
          return (llvm::UndefValue **)llvm::CastInst::CreateZExtOrBitCast(v38, (uint64_t)v36, (uint64_t)&v86, 0);
        }
        *(_QWORD *)&v86 = &v85;
        if (sub_1C4B037F8((_QWORD **)&v86, (uint64_t)v17))
        {
          v40 = *((_DWORD *)*v85 + 2);
          if ((v40 & 0xFE) == 0x12)
            v40 = *(_DWORD *)(*(_QWORD *)(*v85)[2] + 8);
          if (v40 == 269)
          {
            v41 = *(_QWORD *)(a1 + 24);
            AllOnesValue = llvm::Constant::getAllOnesValue(v36, v39);
            LOWORD(v88) = 257;
            v38 = (uint64_t *)sub_1C4774B48(v41, 32, v16, (uint64_t)AllOnesValue, (uint64_t)&v86);
            LOWORD(v88) = 257;
            return (llvm::UndefValue **)llvm::CastInst::CreateZExtOrBitCast(v38, (uint64_t)v36, (uint64_t)&v86, 0);
          }
        }
        v14 = (uint64_t ***)sub_1C582672C((uint64_t)a2, *(_QWORD *)(a1 + 24));
        if (v14)
          return (llvm::UndefValue **)v14;
        v43 = *(unsigned __int8 *)(v16 + 16);
        if (v43 < 0x1C)
        {
          if (v43 != 5)
            goto LABEL_78;
          v46 = *(unsigned __int16 *)(v16 + 18);
          HIDWORD(v48) = v46 - 13;
          LODWORD(v48) = v46 - 13;
          v47 = v48 >> 1;
          if (v47 > 6 || ((1 << v47) & 0x47) == 0)
            goto LABEL_78;
        }
        else
        {
          HIDWORD(v45) = v43 - 41;
          LODWORD(v45) = v43 - 41;
          v44 = v45 >> 1;
          if (v44 > 6 || ((1 << v44) & 0x47) == 0)
            goto LABEL_78;
          v46 = v43 - 28;
        }
        if (v46 == 17 && (*(_BYTE *)(v16 + 17) & 2) != 0)
        {
          v49 = *(_DWORD *)(v16 + 20);
          v50 = (v49 & 0x40000000) != 0 ? *(uint64_t **)(v16 - 8) : (uint64_t *)(v16 - 32 * (v49 & 0x7FFFFFF));
          v51 = (_QWORD *)*v50;
          if (*v50)
          {
            v52 = (_QWORD *)v50[4];
            if (v52)
            {
              if ((sub_1C582A7E8(*v50, &v85, (uint64_t)v17) & 1) != 0
                || (*(_QWORD *)&v86 = &v85, *((_QWORD *)&v86 + 1) = v51, sub_1C582A8B4((uint64_t)&v86, (uint64_t)v17)))
              {
                v53 = v85;
                LOWORD(v88) = 257;
                v54 = (char *)operator new(0x80uLL);
                *((_QWORD *)v54 + 5) = 0;
                v55 = (llvm::ConstantInt ***)(v54 + 40);
                *((_QWORD *)v54 + 6) = 0;
                *((_QWORD *)v54 + 8) = *v52;
                v14 = (uint64_t ***)(v54 + 64);
                *((_QWORD *)v54 + 3) = v54 + 64;
                *((_QWORD *)v54 + 7) = v54 + 64;
                *((_QWORD *)v54 + 9) = 0;
                v54[80] = 47;
                v54[81] = 0;
                *((_WORD *)v54 + 41) = 0;
                *((_DWORD *)v54 + 21) = 2;
                *(_OWORD *)(v54 + 88) = 0u;
                *(_OWORD *)(v54 + 104) = 0u;
                *((_DWORD *)v54 + 30) = 0;
                *(_QWORD *)v54 = v52;
                v58 = v52[1];
                v57 = v52 + 1;
                v56 = v58;
                *((_QWORD *)v54 + 1) = v58;
                if (v58)
                  *(_QWORD *)(v56 + 16) = v54 + 8;
                *((_QWORD *)v54 + 2) = v57;
                *v57 = v54;
LABEL_68:
                *((_QWORD *)v54 + 4) = v53;
                if (v53)
                {
                  v61 = v53[1];
                  v60 = v53 + 1;
                  v59 = v61;
                  *v55 = v61;
                  if (v61)
                    v59[2] = (llvm::ConstantInt *)v55;
                  *((_QWORD *)v54 + 6) = v60;
                  *v60 = v54 + 32;
                }
                llvm::Value::setName(v14, (uint64_t)&v86);
                return (llvm::UndefValue **)v14;
              }
              if ((sub_1C582A7E8((uint64_t)v52, &v85, (uint64_t)v17) & 1) != 0
                || (*(_QWORD *)&v86 = &v85, *((_QWORD *)&v86 + 1) = v52, sub_1C582A8B4((uint64_t)&v86, (uint64_t)v17)))
              {
                v53 = v85;
                LOWORD(v88) = 257;
                v54 = (char *)operator new(0x80uLL);
                *((_QWORD *)v54 + 5) = 0;
                v55 = (llvm::ConstantInt ***)(v54 + 40);
                *((_QWORD *)v54 + 6) = 0;
                v62 = v51;
                *((_QWORD *)v54 + 8) = *v51;
                v14 = (uint64_t ***)(v54 + 64);
                *((_QWORD *)v54 + 3) = v54 + 64;
                *((_QWORD *)v54 + 7) = v54 + 64;
                *((_QWORD *)v54 + 9) = 0;
                v54[80] = 47;
                v54[81] = 0;
                *((_WORD *)v54 + 41) = 0;
                *((_DWORD *)v54 + 21) = 2;
                *(_OWORD *)(v54 + 88) = 0u;
                *(_OWORD *)(v54 + 104) = 0u;
                *((_DWORD *)v54 + 30) = 0;
                *(_QWORD *)v54 = v62;
                v63 = v62[1];
                v64 = v62 + 1;
                *((_QWORD *)v54 + 1) = v63;
                if (v63)
                  *(_QWORD *)(v63 + 16) = v54 + 8;
                *((_QWORD *)v54 + 2) = v64;
                *v64 = v54;
                goto LABEL_68;
              }
            }
          }
        }
LABEL_78:
        if (!sub_1C5826978(*(_QWORD *)(a1 + 24), (uint64_t)v17, 0, 0))
          return 0;
        v65 = sub_1C5826978(*(_QWORD *)(a1 + 24), (uint64_t)v17, 0, 1);
        v66 = *(_QWORD *)(a1 + 24);
        if ((a2[23] & 0x10) == 0)
        {
          v77 = 0;
          v76 = &byte_1C871356D;
          goto LABEL_89;
        }
        v67 = ***(_QWORD ***)a2;
        v68 = *(_QWORD *)(v67 + 152);
        v69 = *(unsigned int *)(v67 + 168);
        if ((_DWORD)v69)
        {
          LODWORD(v70) = (v69 - 1) & ((a2 >> 4) ^ (a2 >> 9));
          v71 = (unsigned __int8 **)(v68 + 16 * v70);
          v72 = *v71;
          if (*v71 == a2)
          {
LABEL_88:
            v75 = v71[1];
            v78 = *(_QWORD *)v75;
            v76 = (char *)(v75 + 16);
            v77 = v78;
LABEL_89:
            LOWORD(v88) = 261;
            *(_QWORD *)&v86 = v76;
            *((_QWORD *)&v86 + 1) = v77;
            v12 = (llvm::Value *)sub_1C506ED1C(v66, v16, v65, (uint64_t)&v86, (a2[17] >> 1) & 1);
            return sub_1C577F888(a1, (llvm::ValueAsMetadata *)a2, v12);
          }
          v73 = 1;
          while (v72 != (unsigned __int8 *)-4096)
          {
            v74 = v70 + v73++;
            v70 = v74 & (v69 - 1);
            v72 = *(unsigned __int8 **)(v68 + 16 * v70);
            if (v72 == a2)
            {
              v71 = (unsigned __int8 **)(v68 + 16 * v70);
              goto LABEL_88;
            }
          }
        }
        v71 = (unsigned __int8 **)(v68 + 16 * v69);
        goto LABEL_88;
      }
      if ((a2[17] & 2) == 0)
        goto LABEL_18;
      v23 = *(unsigned __int8 *)(v16 + 16);
      if (v23 < 0x1C)
      {
        if (v23 != 5)
        {
LABEL_18:
          v22 = 0;
LABEL_27:
          v25 = v85;
          v26 = llvm::ConstantInt::get(*v85, (llvm::Type *)&v81, v20);
          LOWORD(v88) = 257;
          v27 = (char *)operator new(0x80uLL);
          v28 = v27;
          *(_QWORD *)v27 = 0;
          *((_QWORD *)v27 + 2) = 0;
          *((_QWORD *)v27 + 1) = 0;
          *((_QWORD *)v27 + 5) = 0;
          *((_QWORD *)v27 + 6) = 0;
          *((_QWORD *)v27 + 4) = 0;
          v29 = (llvm::Value ***)(v27 + 32);
          *((_QWORD *)v27 + 8) = *v25;
          v14 = (uint64_t ***)(v27 + 64);
          *((_QWORD *)v27 + 3) = v27 + 64;
          *((_QWORD *)v27 + 7) = v27 + 64;
          *((_QWORD *)v27 + 9) = 0;
          v27[80] = 47;
          v27[81] = 0;
          *((_WORD *)v27 + 41) = 0;
          *((_DWORD *)v27 + 21) = 2;
          *((_DWORD *)v27 + 30) = 0;
          *(_OWORD *)(v27 + 104) = 0u;
          *(_OWORD *)(v27 + 88) = 0u;
          *(_QWORD *)v27 = v25;
          v32 = v25[1];
          v31 = v25 + 1;
          v30 = v32;
          *((_QWORD *)v27 + 1) = v32;
          if (v32)
            v30[2] = (llvm::ConstantInt *)(v27 + 8);
          *((_QWORD *)v27 + 2) = v31;
          *v31 = v27;
          if (*((_QWORD *)v27 + 4))
          {
            **((_QWORD **)v27 + 6) = *((_QWORD *)v27 + 5);
            v79 = *((_QWORD *)v27 + 5);
            if (v79)
              *(_QWORD *)(v79 + 16) = *((_QWORD *)v27 + 6);
          }
          *v29 = v26;
          if (v26)
          {
            v35 = v26[1];
            v34 = (llvm::Value ****)(v26 + 1);
            v33 = v35;
            *((_QWORD *)v27 + 5) = v35;
            if (v35)
              *((_QWORD *)v33 + 2) = v27 + 40;
            *((_QWORD *)v27 + 6) = v34;
            *v34 = v29;
          }
          llvm::Value::setName((uint64_t ***)v27 + 8, (uint64_t)&v86);
          if (v22)
            v28[81] |= 2u;
          goto LABEL_36;
        }
        v22 = 0;
        v24 = *(unsigned __int16 *)(v16 + 18);
        if (v24 > 0x1B || ((1 << v24) & 0xC180000) == 0)
          goto LABEL_27;
      }
      else
      {
        v22 = 0;
        if (v23 > 0x37 || ((1 << v23) & 0xC1800000000000) == 0)
          goto LABEL_27;
      }
      v22 = (*(unsigned __int8 *)(v16 + 17) >> 1) & 1;
      goto LABEL_27;
    }
  }
  return (llvm::UndefValue **)v14;
}

uint64_t sub_1C582672C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm::Constant *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  _DWORD *v12;
  uint64_t v13;
  llvm::UndefValue *v14;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _DWORD *v20;
  _QWORD *v21[4];
  __int16 v22;
  llvm::Constant ***v23;
  llvm::Constant **v24;
  llvm::Constant **v25;

  v3 = *(unsigned __int8 *)(a1 + 16) - 28;
  v4 = *(_QWORD *)(a1 - 64);
  v5 = *(_QWORD *)(a1 - 32);
  v6 = *(llvm::Constant **)a1;
  v24 = 0;
  v25 = 0;
  v21[0] = &v25;
  if (sub_1C4B0378C(v21, v4) && (v23 = &v24, sub_1C4B0378C(&v23, v5)) && *v25 == *v24)
  {
    v7 = *(_QWORD *)(v4 + 8);
    if (v7 && !*(_QWORD *)(v7 + 8) || (v10 = *(_QWORD *)(v5 + 8)) != 0 && !*(_QWORD *)(v10 + 8))
    {
      v22 = 257;
      v11 = sub_1C4773860(a2, v3, v25, (uint64_t)v24, (uint64_t)v21, 0);
      v12 = operator new(0x60uLL);
      v12[13] = v12[13] & 0x38000000 | 1;
      v13 = (uint64_t)(v12 + 8);
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = 0;
      *((_QWORD *)v12 + 2) = 0;
      *((_QWORD *)v12 + 3) = v12 + 8;
      v22 = 257;
      return llvm::ZExtInst::ZExtInst(v13, (uint64_t)v11, (uint64_t)v6, (uint64_t)v21, 0);
    }
  }
  else
  {
    v7 = *(_QWORD *)(v4 + 8);
  }
  v21[0] = &v25;
  if (!v7
    || *(_QWORD *)(v7 + 8)
    || !sub_1C4B0378C(v21, v4)
    || (*(unsigned __int8 *)(v5 + 16) <= 0x14u ? (v8 = v5 == 0) : (v8 = 1), v8))
  {
    v23 = &v25;
    v9 = *(_QWORD *)(v5 + 8);
    if (!v9 || *(_QWORD *)(v9 + 8) || !sub_1C4B0378C(&v23, v5) || *(unsigned __int8 *)(v4 + 16) > 0x14u)
      return 0;
  }
  else
  {
    v4 = v5;
  }
  v14 = sub_1C537D3B8((llvm *)0x26, v4, *v25, 0);
  if (sub_1C537D3B8((llvm *)0x27, (uint64_t)v14, v6, 0) == (llvm::UndefValue *)v4)
  {
    v16 = v25;
    if (*(unsigned __int8 *)(v5 + 16) > 0x14u)
    {
      v22 = 257;
      v17 = a2;
      v18 = v3;
      v19 = v14;
    }
    else
    {
      v22 = 257;
      v17 = a2;
      v18 = v3;
      v19 = v25;
      v16 = v14;
    }
    v11 = sub_1C4773860(v17, v18, v19, (uint64_t)v16, (uint64_t)v21, 0);
    v20 = operator new(0x60uLL);
    v20[13] = v20[13] & 0x38000000 | 1;
    v13 = (uint64_t)(v20 + 8);
    *(_QWORD *)v20 = 0;
    *((_QWORD *)v20 + 1) = 0;
    *((_QWORD *)v20 + 2) = 0;
    *((_QWORD *)v20 + 3) = v20 + 8;
    v22 = 257;
    return llvm::ZExtInst::ZExtInst(v13, (uint64_t)v11, (uint64_t)v6, (uint64_t)v21, 0);
  }
  return 0;
}

uint64_t sub_1C5826978(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  llvm::Constant *v8;
  uint64_t result;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  _BYTE v35[32];
  __int16 v36;
  _QWORD *v37[4];
  __int16 v38;

  if (sub_1C4E79980((uint64_t)v37, (llvm::Constant *)a2))
  {
    if ((_DWORD)a4)
      return (uint64_t)llvm::ConstantExpr::getExactLogBase2((llvm::ConstantExpr *)a2, v8);
    return -1;
  }
  if (a3 == 6)
    return 0;
  v10 = (a3 + 1);
  v34 = 0;
  v37[0] = &v34;
  if (sub_1C4B0378C(v37, a2))
  {
    v11 = (unsigned __int8 *)sub_1C5826978(a1, v34, v10, a4);
    if (v11)
    {
      if ((_DWORD)a4)
      {
        v12 = *(_QWORD *)a2;
        v38 = 257;
        return (uint64_t)sub_1C4773E38((uint64_t *)a1, 39, v11, v12, (uint64_t)v37);
      }
      return -1;
    }
  }
  v13 = *(unsigned __int8 *)(a2 + 16);
  if (v13 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 25)
      goto LABEL_32;
    v16 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v14 = *v16;
    if (!*v16)
      goto LABEL_32;
    v34 = *v16;
    v15 = v16[4];
    if (!v15)
      goto LABEL_32;
  }
  else
  {
    if (v13 != 53)
    {
LABEL_26:
      if (v13 == 85)
      {
        v26 = sub_1C5826978(a1, *(_QWORD *)(a2 - 64), v10, a4);
        if (v26)
        {
          v27 = (uint64_t *)v26;
          v28 = sub_1C5826978(a1, *(_QWORD *)(a2 - 32), v10, a4);
          if (v28)
          {
            if ((_DWORD)a4)
            {
              v29 = *(_QWORD *)(a2 - 96);
              v38 = 257;
              return (uint64_t)llvm::IRBuilderBase::CreateSelect((uint64_t *)a1, v29, v27, v28, (uint64_t)v37, 0);
            }
            return -1;
          }
        }
      }
LABEL_32:
      if (sub_1C57A2C04(a2))
      {
        v30 = *(_QWORD *)(a2 + 8);
        if (v30)
        {
          if (!*(_QWORD *)(v30 + 8) && (*(_DWORD *)(*(_QWORD *)(a2 - 32) + 36) - 305) <= 1)
          {
            result = sub_1C5826978(a1, *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), v10, a4);
            if (result)
            {
              v31 = (uint64_t *)result;
              v32 = sub_1C5826978(a1, *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32), v10, a4);
              if (v32)
                result = -1;
              else
                result = 0;
              if (v32)
              {
                if ((_DWORD)a4)
                {
                  v33 = *(_DWORD *)(*(_QWORD *)(a2 - 32) + 36);
                  v38 = 257;
                  return llvm::IRBuilderBase::CreateBinaryIntrinsic((uint64_t *)a1, v33, v31, v32, 0, (uint64_t)v37);
                }
              }
            }
            return result;
          }
        }
      }
      return 0;
    }
    v14 = *(_QWORD *)(a2 - 64);
    if (!v14)
      goto LABEL_32;
    v34 = *(_QWORD *)(a2 - 64);
    v15 = *(_QWORD *)(a2 - 32);
    if (!v15)
      goto LABEL_32;
  }
  v17 = sub_1C5826978(a1, v14, v10, a4);
  if (!v17)
  {
    v13 = *(unsigned __int8 *)(a2 + 16);
    goto LABEL_26;
  }
  if (!(_DWORD)a4)
    return -1;
  v18 = (_QWORD *)v17;
  v36 = 257;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), v17, v15, 0, 0);
  if (!result)
  {
    v38 = 257;
    v19 = (char *)operator new(0x80uLL);
    *((_QWORD *)v19 + 6) = 0;
    *((_QWORD *)v19 + 8) = *v18;
    v20 = (uint64_t)(v19 + 64);
    *((_QWORD *)v19 + 3) = v19 + 64;
    *((_QWORD *)v19 + 7) = v19 + 64;
    *((_QWORD *)v19 + 9) = 0;
    v19[80] = 41;
    v19[81] = 0;
    *((_WORD *)v19 + 41) = 0;
    *((_DWORD *)v19 + 21) = 2;
    *(_OWORD *)(v19 + 88) = 0u;
    *(_OWORD *)(v19 + 104) = 0u;
    *((_DWORD *)v19 + 30) = 0;
    *(_QWORD *)v19 = v18;
    v23 = v18[1];
    v22 = v18 + 1;
    v21 = v23;
    *((_QWORD *)v19 + 1) = v23;
    if (v23)
      *(_QWORD *)(v21 + 16) = v19 + 8;
    *((_QWORD *)v19 + 2) = v22;
    *v22 = v19;
    v24 = (_QWORD *)(v15 + 8);
    v25 = *(_QWORD *)(v15 + 8);
    *((_QWORD *)v19 + 5) = v25;
    *((_QWORD *)v19 + 4) = v15;
    if (v25)
      *(_QWORD *)(v25 + 16) = v19 + 40;
    *((_QWORD *)v19 + 6) = v24;
    *v24 = v19 + 32;
    llvm::Value::setName((uint64_t ***)v19 + 8, (uint64_t)v37);
    return sub_1C4773754((uint64_t *)a1, v20, (uint64_t)v35);
  }
  return result;
}

llvm::Instruction *sub_1C5826CC0(uint64_t a1, llvm::ValueAsMetadata *a2)
{
  llvm::Constant **v4;
  llvm::Constant *v5;
  __int128 v6;
  __int128 v7;
  llvm::Value **v8;
  uint64_t ***Neg;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  llvm::Type *v20;
  _BOOL4 v21;
  llvm::ConstantFP *v22;
  unsigned int v23;
  llvm::Constant *Zero;
  llvm::Constant *v25;
  llvm::Type **v26;
  uint64_t v27;
  llvm::Value **ExactLogBase2;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  llvm::ValueAsMetadata **v34;
  llvm::ValueAsMetadata *v35;
  int v36;
  int v37;
  uint64_t v38;
  llvm::Constant *v39;
  unsigned int PrimitiveSizeInBits;
  int v41;
  unsigned int v42;
  const void **v43;
  uint64_t v44;
  unint64_t v45;
  llvm::ValueAsMetadata *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  llvm::Value ***v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  llvm::Value *v56;
  llvm::Value ****v57;
  llvm::Value *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  llvm::ValueAsMetadata **v64;
  llvm::ValueAsMetadata *v65;
  int v66;
  int v67;
  size_t v68;
  const llvm::APInt *v69;
  llvm::Value **v70;
  _QWORD *v71;
  char *v72;
  char *v73;
  llvm::Value **v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  llvm::Value *v78;
  _QWORD *v79;
  llvm::Value *v80;
  llvm::ValueAsMetadata *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  llvm::ValueAsMetadata **v89;
  llvm::ValueAsMetadata *v90;
  int v91;
  int v92;
  llvm::ValueAsMetadata *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  llvm::UndefValue *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  llvm::Type *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  llvm::ValueAsMetadata **v120;
  llvm::ValueAsMetadata *v121;
  int v122;
  int v123;
  llvm::Type *v124;
  llvm::ConstantFP *v125;
  unsigned int v126;
  llvm::Constant *NullValue;
  llvm::Constant *v128;
  llvm::Constant **v129;
  llvm::ConstantExpr *v130;
  llvm::Constant *v131;
  llvm::Value **v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  llvm::ValueAsMetadata **v138;
  llvm::ValueAsMetadata *v139;
  int v140;
  int v141;
  uint64_t v142;
  llvm::ValueAsMetadata *v143;
  int v144;
  int v145;
  llvm::ValueHandleBase *AllOnesValue;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  llvm::ValueAsMetadata *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  _QWORD *v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  llvm::ValueAsMetadata *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  llvm::ValueAsMetadata **v173;
  llvm::ValueAsMetadata *v174;
  int v175;
  int v176;
  llvm::ValueAsMetadata *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  llvm::ConstantFP **v181;
  llvm::Instruction *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  BOOL v186;
  BOOL v187;
  BOOL v188;
  uint64_t v189;
  unsigned int v190;
  uint64_t v191;
  void *v192;
  unsigned int v193;
  llvm::APInt *v194;
  _QWORD *v195;
  __int128 v196;
  _BYTE v197[24];
  __int128 v198;
  uint64_t v199;
  llvm::Constant **v200;
  _QWORD *v201;
  __int16 v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  v4 = (llvm::Constant **)*((_QWORD *)a2 - 8);
  v5 = (llvm::Constant *)*((_QWORD *)a2 - 4);
  v6 = *(_OWORD *)(a1 + 120);
  v7 = *(_OWORD *)(a1 + 104);
  v196 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)v197 = v7;
  *(_QWORD *)&v198 = *((_QWORD *)&v6 + 1);
  *(_QWORD *)&v197[16] = a2;
  v8 = sub_1C4E63A00(v4, v5, (llvm::Constant **)&v196, (const llvm::DataLayout *)3);
  if (v8)
    return (llvm::Instruction *)sub_1C577F888(a1, a2, (llvm::Value *)v8);
  Neg = (uint64_t ***)sub_1C57826B8(a1, (unsigned __int8 *)a2);
  if (!Neg)
  {
    Neg = (uint64_t ***)sub_1C5824840((_QWORD *)a1, (unsigned __int8 *)a2);
    if (!Neg)
    {
      v12 = (uint64_t *)*((_QWORD *)a2 - 8);
      v13 = (_QWORD *)*((_QWORD *)a2 - 4);
      v14 = *(_QWORD *)a2;
      v195 = 0;
      if ((sub_1C4D9ED34((uint64_t)&v200, (llvm::Constant *)v13) & 1) != 0)
        goto LABEL_8;
      *(_QWORD *)&v196 = &v195;
      if (sub_1C4B037F8((_QWORD **)&v196, (uint64_t)v13))
      {
        v16 = *(_DWORD *)(*v195 + 8);
        if ((v16 & 0xFE) == 0x12)
          v16 = *(_DWORD *)(**(_QWORD **)(*v195 + 16) + 8);
        if (v16 == 269)
        {
LABEL_8:
          *(_WORD *)&v197[16] = 257;
          v15 = v12;
          return llvm::BinaryOperator::CreateNeg(v15, (llvm::Type *)&v196, 0);
        }
      }
      if (sub_1C4E7119C((uint64_t)&v196, (unsigned __int8 *)v13))
      {
        v17 = (char *)operator new(0x60uLL);
        Neg = (uint64_t ***)(v17 + 32);
        *((_DWORD *)v17 + 13) = *((_DWORD *)v17 + 13) & 0x38000000 | 1;
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v17 + 1) = 0;
        *((_QWORD *)v17 + 2) = 0;
        *((_QWORD *)v17 + 3) = v17 + 32;
        v18 = *(_QWORD *)(a1 + 24);
        *(_WORD *)&v197[16] = 257;
        v19 = sub_1C4774B48(v18, 32, (uint64_t)v12, (uint64_t)v13, (uint64_t)&v196);
        v202 = 257;
        llvm::ZExtInst::ZExtInst((uint64_t)Neg, v19, v14, (uint64_t)&v200, 0);
        return (llvm::Instruction *)Neg;
      }
      if ((*((_BYTE *)a2 + 17) & 2) != 0
        && (sub_1C4E79980((uint64_t)&v196, (llvm::Constant *)v13) && sub_1C58194EC((int)&v200, (llvm::Constant *)v13)
         || sub_1C582A25C((llvm::Constant *)v13)))
      {
        v21 = sub_1C582A25C((llvm::Constant *)v13);
        if (v21)
        {
          v22 = (llvm::ConstantFP *)*v13;
          if ((*(_DWORD *)(*v13 + 8) & 0xFE) == 0x12)
            v23 = *(unsigned __int8 *)(**((_QWORD **)v22 + 2) + 8);
          else
            v23 = *(_DWORD *)(*v13 + 8);
          if (v23 <= 6)
            Zero = llvm::ConstantFP::getZero(v22, (llvm::Type *)1);
          else
            Zero = (llvm::Constant *)llvm::Constant::getNullValue(v22, v20);
          v26 = (llvm::Type **)Zero;
          v27 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)0xF, Zero, (llvm::Constant *)v13, v25);
          if (!v27)
          {
            v20 = *v26;
            if (*v26)
            {
              v200 = v26;
              v201 = v13;
              v183 = **(_QWORD **)v20 + 1512;
              LODWORD(v196) = 15;
              *((_QWORD *)&v196 + 1) = &v200;
              *(_QWORD *)v197 = 2;
              *(_OWORD *)&v197[8] = 0u;
              v198 = 0u;
              v199 = 0;
              v27 = sub_1C537D4FC(v183, (uint64_t)v20, (unsigned __int8 *)&v196);
            }
            else
            {
              v27 = 0;
            }
          }
          v13 = (_QWORD *)v27;
        }
        ExactLogBase2 = llvm::ConstantExpr::getExactLogBase2((llvm::ConstantExpr *)v13, v20);
        v29 = a2 >> 4;
        if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
        {
          v48 = 0;
          v47 = &byte_1C871356D;
LABEL_50:
          *(_WORD *)&v197[16] = 261;
          *(_QWORD *)&v196 = v47;
          *((_QWORD *)&v196 + 1) = v48;
          v50 = (char *)operator new(0x80uLL);
          v51 = v50;
          *((_QWORD *)v50 + 4) = 0;
          v52 = (llvm::Value ***)(v50 + 32);
          *((_QWORD *)v50 + 5) = 0;
          *((_QWORD *)v50 + 6) = 0;
          *((_QWORD *)v50 + 8) = *v12;
          Neg = (uint64_t ***)(v50 + 64);
          *((_QWORD *)v50 + 3) = v50 + 64;
          *((_QWORD *)v50 + 7) = v50 + 64;
          *((_QWORD *)v50 + 9) = 0;
          v50[80] = 55;
          v50[81] = 0;
          *((_WORD *)v50 + 41) = 0;
          *((_DWORD *)v50 + 21) = 2;
          *(_OWORD *)(v50 + 88) = 0u;
          *(_OWORD *)(v50 + 104) = 0u;
          *((_DWORD *)v50 + 30) = 0;
          *(_QWORD *)v50 = v12;
          v55 = v12[1];
          v54 = v12 + 1;
          v53 = v55;
          *((_QWORD *)v50 + 1) = v55;
          if (v55)
            *(_QWORD *)(v53 + 16) = v50 + 8;
          *((_QWORD *)v50 + 2) = v54;
          *v54 = v50;
          if (*((_QWORD *)v50 + 4))
          {
            **((_QWORD **)v50 + 6) = *((_QWORD *)v50 + 5);
            v185 = *((_QWORD *)v50 + 5);
            if (v185)
              *(_QWORD *)(v185 + 16) = *((_QWORD *)v50 + 6);
          }
          *v52 = ExactLogBase2;
          if (ExactLogBase2)
          {
            v58 = ExactLogBase2[1];
            v57 = (llvm::Value ****)(ExactLogBase2 + 1);
            v56 = v58;
            *((_QWORD *)v50 + 5) = v58;
            if (v58)
              *((_QWORD *)v56 + 2) = v50 + 40;
            *((_QWORD *)v50 + 6) = v57;
            *v57 = v52;
          }
          llvm::Value::setName((uint64_t ***)v50 + 8, (uint64_t)&v196);
          v51[81] |= 2u;
          if (!v21)
            return (llvm::Instruction *)Neg;
          v59 = *(uint64_t **)(a1 + 24);
          *(_WORD *)&v197[16] = 257;
          sub_1C4773754(v59, (uint64_t)Neg, (uint64_t)&v196);
          if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
          {
            v83 = 0;
            v82 = &byte_1C871356D;
LABEL_81:
            *(_WORD *)&v197[16] = 773;
            *(_QWORD *)&v196 = v82;
            *((_QWORD *)&v196 + 1) = v83;
            *(_QWORD *)v197 = ".neg";
            llvm::Value::setName(Neg, (uint64_t)&v196);
            if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
            {
              v95 = 0;
              v94 = &byte_1C871356D;
              goto LABEL_90;
            }
            v85 = ***(_QWORD ***)a2;
            v86 = *(_QWORD *)(v85 + 152);
            v87 = *(unsigned int *)(v85 + 168);
            if ((_DWORD)v87)
            {
              LODWORD(v88) = (v87 - 1) & (v29 ^ (a2 >> 9));
              v89 = (llvm::ValueAsMetadata **)(v86 + 16 * v88);
              v90 = *v89;
              if (*v89 == a2)
              {
LABEL_89:
                v93 = v89[1];
                v96 = *(_QWORD *)v93;
                v94 = (char *)v93 + 16;
                v95 = v96;
LABEL_90:
                *(_WORD *)&v197[16] = 261;
                *(_QWORD *)&v196 = v94;
                *((_QWORD *)&v196 + 1) = v95;
                v15 = (uint64_t *)Neg;
                return llvm::BinaryOperator::CreateNeg(v15, (llvm::Type *)&v196, 0);
              }
              v91 = 1;
              while (v90 != (llvm::ValueAsMetadata *)-4096)
              {
                v92 = v88 + v91++;
                v88 = v92 & (v87 - 1);
                v90 = *(llvm::ValueAsMetadata **)(v86 + 16 * v88);
                if (v90 == a2)
                {
                  v89 = (llvm::ValueAsMetadata **)(v86 + 16 * v88);
                  goto LABEL_89;
                }
              }
            }
            v89 = (llvm::ValueAsMetadata **)(v86 + 16 * v87);
            goto LABEL_89;
          }
          v60 = ***(_QWORD ***)a2;
          v61 = *(_QWORD *)(v60 + 152);
          v62 = *(unsigned int *)(v60 + 168);
          if ((_DWORD)v62)
          {
            LODWORD(v63) = (v62 - 1) & (v29 ^ (a2 >> 9));
            v64 = (llvm::ValueAsMetadata **)(v61 + 16 * v63);
            v65 = *v64;
            if (*v64 == a2)
            {
LABEL_80:
              v81 = v64[1];
              v84 = *(_QWORD *)v81;
              v82 = (char *)v81 + 16;
              v83 = v84;
              goto LABEL_81;
            }
            v66 = 1;
            while (v65 != (llvm::ValueAsMetadata *)-4096)
            {
              v67 = v63 + v66++;
              v63 = v67 & (v62 - 1);
              v65 = *(llvm::ValueAsMetadata **)(v61 + 16 * v63);
              if (v65 == a2)
              {
                v64 = (llvm::ValueAsMetadata **)(v61 + 16 * v63);
                goto LABEL_80;
              }
            }
          }
          v64 = (llvm::ValueAsMetadata **)(v61 + 16 * v62);
          goto LABEL_80;
        }
        v30 = ***(_QWORD ***)a2;
        v31 = *(_QWORD *)(v30 + 152);
        v32 = *(unsigned int *)(v30 + 168);
        if ((_DWORD)v32)
        {
          LODWORD(v33) = (v32 - 1) & (v29 ^ (a2 >> 9));
          v34 = (llvm::ValueAsMetadata **)(v31 + 16 * v33);
          v35 = *v34;
          if (*v34 == a2)
          {
LABEL_49:
            v46 = v34[1];
            v49 = *(_QWORD *)v46;
            v47 = (char *)v46 + 16;
            v48 = v49;
            goto LABEL_50;
          }
          v36 = 1;
          while (v35 != (llvm::ValueAsMetadata *)-4096)
          {
            v37 = v33 + v36++;
            v33 = v37 & (v32 - 1);
            v35 = *(llvm::ValueAsMetadata **)(v31 + 16 * v33);
            if (v35 == a2)
            {
              v34 = (llvm::ValueAsMetadata **)(v31 + 16 * v33);
              goto LABEL_49;
            }
          }
        }
        v34 = (llvm::ValueAsMetadata **)(v31 + 16 * v32);
        goto LABEL_49;
      }
      v194 = 0;
      v196 = (unint64_t)&v194;
      if (sub_1C4D89F84((uint64_t)&v196, (unsigned __int8 *)v13))
      {
        v200 = 0;
        *(_QWORD *)&v196 = &v200;
        v38 = v12[1];
        if (v38 && !*(_QWORD *)(v38 + 8) && sub_1C4B037F8((_QWORD **)&v196, (uint64_t)v12))
        {
          v39 = *v200;
          if ((*((_DWORD *)*v200 + 2) & 0xFE) == 0x12)
            v39 = (llvm::Constant *)**((_QWORD **)v39 + 2);
          PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v39);
          v41 = *((_DWORD *)v194 + 2);
          if (v41 - sub_1C4959174(v194) + 1 <= PrimitiveSizeInBits)
          {
            v97 = sub_1C537D3B8((llvm *)0x26, (uint64_t)v13, *v200, 0);
            v98 = *(_QWORD *)(a1 + 24);
            *(_WORD *)&v197[16] = 257;
            v99 = sub_1C538EA44(v98, (uint64_t)v200, (uint64_t)v97, (uint64_t)&v196, 0);
            v100 = (char *)operator new(0x60uLL);
            *((_DWORD *)v100 + 13) = *((_DWORD *)v100 + 13) & 0x38000000 | 1;
            Neg = (uint64_t ***)(v100 + 32);
            *(_QWORD *)v100 = 0;
            *((_QWORD *)v100 + 1) = 0;
            *((_QWORD *)v100 + 2) = 0;
            *((_QWORD *)v100 + 3) = v100 + 32;
            *(_WORD *)&v197[16] = 257;
            llvm::SExtInst::SExtInst((uint64_t)(v100 + 32), v99, v14, (uint64_t)&v196, 0);
            return (llvm::Instruction *)Neg;
          }
        }
        v42 = *((_DWORD *)v194 + 2);
        if (v42 > 0x40)
        {
          if (((*(_QWORD *)(*(_QWORD *)v194 + 8 * ((v42 - 1) >> 6)) >> (v42 - 1)) & 1) != 0
            && llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v194) == v42 - 1)
          {
            goto LABEL_97;
          }
        }
        else if (*(_QWORD *)v194 == 1 << (v42 - 1))
        {
          goto LABEL_97;
        }
        *((_QWORD *)&v196 + 1) = &v195;
        if (sub_1C582A988((uint64_t)&v196, (uint64_t)v12))
        {
          v43 = (const void **)v194;
          v44 = *((unsigned int *)v194 + 2);
          v193 = v44;
          if (v44 > 0x40)
          {
            v68 = ((unint64_t)(v44 + 63) >> 3) & 0x3FFFFFF8;
            v192 = (void *)operator new[]();
            memcpy(v192, *v43, v68);
            llvm::APInt::flipAllBitsSlowCase((uint64_t)&v192);
          }
          else
          {
            if ((_DWORD)v44)
              v45 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v44;
            else
              v45 = 0;
            v192 = (void *)(v45 & ~*(_QWORD *)v194);
          }
          llvm::APInt::operator++((uint64_t)&v192);
          DWORD2(v196) = v193;
          *(_QWORD *)&v196 = v192;
          v193 = 0;
          v70 = llvm::ConstantInt::get((llvm::ConstantInt **)v14, (llvm::Type *)&v196, v69);
          if (DWORD2(v196) >= 0x41 && (_QWORD)v196)
            MEMORY[0x1CAA32F9C](v196, 0x1000C8000313F17);
          if (v193 >= 0x41 && v192)
            MEMORY[0x1CAA32F9C](v192, 0x1000C8000313F17);
          v71 = v195;
          *(_WORD *)&v197[16] = 257;
          v72 = (char *)operator new(0x80uLL);
          v73 = v72;
          *((_QWORD *)v72 + 5) = 0;
          v74 = (llvm::Value **)(v72 + 40);
          *((_QWORD *)v72 + 6) = 0;
          *((_QWORD *)v72 + 8) = *v71;
          Neg = (uint64_t ***)(v72 + 64);
          *((_QWORD *)v72 + 3) = v72 + 64;
          *((_QWORD *)v72 + 7) = v72 + 64;
          *((_QWORD *)v72 + 9) = 0;
          v72[80] = 48;
          v72[81] = 0;
          *((_WORD *)v72 + 41) = 0;
          *((_DWORD *)v72 + 21) = 2;
          *(_OWORD *)(v72 + 88) = 0u;
          *(_OWORD *)(v72 + 104) = 0u;
          *((_DWORD *)v72 + 30) = 0;
          *(_QWORD *)v72 = v71;
          v77 = v71[1];
          v76 = v71 + 1;
          v75 = v77;
          *((_QWORD *)v72 + 1) = v77;
          if (v77)
            *(_QWORD *)(v75 + 16) = v72 + 8;
          *((_QWORD *)v72 + 2) = v76;
          *v76 = v72;
          *((_QWORD *)v72 + 4) = v70;
          if (v70)
          {
            v80 = v70[1];
            v79 = v70 + 1;
            v78 = v80;
            *v74 = v80;
            if (v80)
              *((_QWORD *)v78 + 2) = v74;
            *((_QWORD *)v72 + 6) = v79;
            *v79 = v72 + 32;
          }
          llvm::Value::setName((uint64_t ***)v72 + 8, (uint64_t)&v196);
          v73[81] = v73[81] & 0xFD | *((_BYTE *)a2 + 17) & 2;
          return (llvm::Instruction *)Neg;
        }
      }
LABEL_97:
      v191 = 0;
      *((_QWORD *)&v196 + 1) = &v195;
      *(_QWORD *)v197 = &v191;
      v101 = *((unsigned __int8 *)a2 + 16);
      if (v101 == 48)
      {
        v102 = *((_QWORD *)a2 - 8);
        v103 = *(_QWORD *)(v102 + 8);
        if (v103)
        {
          if (!*(_QWORD *)(v103 + 8))
          {
            if (sub_1C582A988((uint64_t)&v196, v102))
            {
              v104 = *((_QWORD *)a2 - 4);
              if (v104)
                goto LABEL_169;
            }
          }
        }
      }
      else if (v101 == 5 && *((_WORD *)a2 + 9) == 20)
      {
        v105 = *((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
        v106 = *(_QWORD *)(v105 + 8);
        if (v106)
        {
          if (!*(_QWORD *)(v106 + 8))
          {
            if (sub_1C582A988((uint64_t)&v196, v105))
            {
              v104 = ((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
              if (v104)
              {
LABEL_169:
                v191 = v104;
                v168 = *(_QWORD *)(a1 + 24);
                if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
                {
                  v179 = 0;
                  v178 = &byte_1C871356D;
                  goto LABEL_179;
                }
                v169 = ***(_QWORD ***)a2;
                v170 = *(_QWORD *)(v169 + 152);
                v171 = *(unsigned int *)(v169 + 168);
                if ((_DWORD)v171)
                {
                  LODWORD(v172) = (v171 - 1) & ((a2 >> 4) ^ (a2 >> 9));
                  v173 = (llvm::ValueAsMetadata **)(v170 + 16 * v172);
                  v174 = *v173;
                  if (*v173 == a2)
                  {
LABEL_178:
                    v177 = v173[1];
                    v180 = *(_QWORD *)v177;
                    v178 = (char *)v177 + 16;
                    v179 = v180;
LABEL_179:
                    *(_WORD *)&v197[16] = 261;
                    *(_QWORD *)&v196 = v178;
                    *((_QWORD *)&v196 + 1) = v179;
                    v181 = (llvm::ConstantFP **)sub_1C538EA44(v168, (uint64_t)v195, v104, (uint64_t)&v196, (*((unsigned __int8 *)a2 + 17) >> 1) & 1);
                    v202 = 257;
                    return llvm::BinaryOperator::CreateNSWNeg(v181, (llvm::Value *)&v200, 0, v182);
                  }
                  v175 = 1;
                  while (v174 != (llvm::ValueAsMetadata *)-4096)
                  {
                    v176 = v172 + v175++;
                    v172 = v176 & (v171 - 1);
                    v174 = *(llvm::ValueAsMetadata **)(v170 + 16 * v172);
                    if (v174 == a2)
                    {
                      v173 = (llvm::ValueAsMetadata **)(v170 + 16 * v172);
                      goto LABEL_178;
                    }
                  }
                }
                v173 = (llvm::ValueAsMetadata **)(v170 + 16 * v171);
                goto LABEL_178;
              }
            }
          }
        }
      }
      LODWORD(v196) = 1;
      *((_QWORD *)&v196 + 1) = 0;
      *(_QWORD *)v197 = &v195;
      *(_QWORD *)&v197[8] = 1;
      *(_QWORD *)&v197[16] = &v195;
      v107 = *((_QWORD *)a2 - 8);
      v108 = *(_QWORD *)(v107 + 8);
      if (v108
        && !*(_QWORD *)(v108 + 8)
        && sub_1C582AAC0((uint64_t)&v196, v107)
        && **(_QWORD **)&v197[16] == *((_QWORD *)a2 - 4)
        || (v110 = *((_QWORD *)a2 - 4), (v111 = *(_QWORD *)(v110 + 8)) != 0)
        && !*(_QWORD *)(v111 + 8)
        && sub_1C582AAC0((uint64_t)&v196, v110)
        && **(_QWORD **)&v197[16] == *((_QWORD *)a2 - 8))
      {
        AllOnesValue = llvm::Constant::getAllOnesValue((llvm::Constant *)v14, v109);
        v147 = *(_QWORD *)(a1 + 24);
        *(_WORD *)&v197[16] = 257;
        v148 = sub_1C4774B48(v147, 38, (uint64_t)v195, (uint64_t)AllOnesValue, (uint64_t)&v196);
        v149 = (uint64_t *)llvm::ConstantInt::get((llvm::ConstantInt *)v14, 1, 0);
        *(_WORD *)&v197[16] = 257;
        return sub_1C4FC8748(v148, v149, (uint64_t)AllOnesValue, (uint64_t)&v196, 0, 0);
      }
      if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12)
        v14 = **(_QWORD **)(v14 + 16);
      v112 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v14);
      v113 = v112;
      v190 = v112;
      if (v112 > 0x40)
      {
        v115 = &v189;
        llvm::APInt::initSlowCase((llvm::APInt *)&v189, 0, 0);
        v114 = v113 - 1;
        if (v190 >= 0x41)
          v115 = (uint64_t *)(v189 + 8 * (v114 >> 6));
      }
      else
      {
        v189 = 0;
        LOBYTE(v114) = v112 - 1;
        v115 = &v189;
      }
      *v115 |= 1 << v114;
      if (llvm::MaskedValueIsZero((llvm *)v12, (const llvm::Value *)&v189, *(const llvm::APInt **)(a1 + 80), 0, *(const llvm::DataLayout **)(a1 + 56), a2, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1, v186))
      {
        if (llvm::MaskedValueIsZero((llvm *)v13, (const llvm::Value *)&v189, *(const llvm::APInt **)(a1 + 80), 0, *(const llvm::DataLayout **)(a1 + 56), a2, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1, v187))
        {
          if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
          {
            v116 = ***(_QWORD ***)a2;
            v117 = *(_QWORD *)(v116 + 152);
            v118 = *(unsigned int *)(v116 + 168);
            if ((_DWORD)v118)
            {
              LODWORD(v119) = (v118 - 1) & ((a2 >> 4) ^ (a2 >> 9));
              v120 = (llvm::ValueAsMetadata **)(v117 + 16 * v119);
              v121 = *v120;
              if (*v120 != a2)
              {
                v122 = 1;
                while (v121 != (llvm::ValueAsMetadata *)-4096)
                {
                  v123 = v119 + v122++;
                  v119 = v123 & (v118 - 1);
                  v121 = *(llvm::ValueAsMetadata **)(v117 + 16 * v119);
                  if (v121 == a2)
                    goto LABEL_129;
                }
                goto LABEL_153;
              }
LABEL_154:
              v150 = v120[1];
              v153 = *(_QWORD *)v150;
              v151 = (char *)v150 + 16;
              v152 = v153;
LABEL_155:
              *(_WORD *)&v197[16] = 261;
              *(_QWORD *)&v196 = v151;
              *((_QWORD *)&v196 + 1) = v152;
              v154 = (char *)operator new(0x80uLL);
              v155 = v154;
              *((_QWORD *)v154 + 5) = 0;
              v156 = v154 + 40;
              *((_QWORD *)v154 + 6) = 0;
              *((_QWORD *)v154 + 8) = *v12;
              Neg = (uint64_t ***)(v154 + 64);
              *((_QWORD *)v154 + 3) = v154 + 64;
              *((_QWORD *)v154 + 7) = v154 + 64;
              *((_QWORD *)v154 + 9) = 0;
              v154[80] = 47;
              v154[81] = 0;
              *((_WORD *)v154 + 41) = 0;
              *((_DWORD *)v154 + 21) = 2;
              *(_OWORD *)(v154 + 88) = 0u;
              *(_OWORD *)(v154 + 104) = 0u;
              *((_DWORD *)v154 + 30) = 0;
              *(_QWORD *)v154 = v12;
              v159 = v12[1];
              v158 = v12 + 1;
              v157 = v159;
              *((_QWORD *)v154 + 1) = v159;
              if (v159)
                *(_QWORD *)(v157 + 16) = v154 + 8;
              *((_QWORD *)v154 + 2) = v158;
              *v158 = v154;
              *((_QWORD *)v154 + 4) = v13;
              if (v13)
              {
                v162 = v13[1];
                v161 = v13 + 1;
                v160 = v162;
                *v156 = v162;
                if (v162)
                  *(_QWORD *)(v160 + 16) = v156;
                *((_QWORD *)v154 + 6) = v161;
                *v161 = v154 + 32;
              }
              llvm::Value::setName((uint64_t ***)v154 + 8, (uint64_t)&v196);
              v155[81] = v155[81] & 0xFD | *((_BYTE *)a2 + 17) & 2;
              goto LABEL_165;
            }
            goto LABEL_153;
          }
          goto LABEL_168;
        }
        if (sub_1C582A25C((llvm::Constant *)v13))
        {
          v125 = (llvm::ConstantFP *)*v13;
          if ((*(_DWORD *)(*v13 + 8) & 0xFE) == 0x12)
            v126 = *(unsigned __int8 *)(**((_QWORD **)v125 + 2) + 8);
          else
            v126 = *(_DWORD *)(*v13 + 8);
          if (v126 <= 6)
            NullValue = llvm::ConstantFP::getZero(v125, (llvm::Type *)1);
          else
            NullValue = (llvm::Constant *)llvm::Constant::getNullValue(v125, v124);
          v129 = (llvm::Constant **)NullValue;
          v130 = llvm::ConstantFoldBinaryInstruction((llvm *)0xF, NullValue, (llvm::Constant *)v13, v128);
          if (!v130)
          {
            v131 = *v129;
            if (*v129)
            {
              v200 = v129;
              v201 = v13;
              v184 = **(_QWORD **)v131 + 1512;
              LODWORD(v196) = 15;
              *((_QWORD *)&v196 + 1) = &v200;
              *(_QWORD *)v197 = 2;
              *(_OWORD *)&v197[8] = 0u;
              v198 = 0u;
              v199 = 0;
              v130 = (llvm::ConstantExpr *)sub_1C537D4FC(v184, (uint64_t)v131, (unsigned __int8 *)&v196);
            }
            else
            {
              v130 = 0;
            }
          }
          v132 = llvm::ConstantExpr::getExactLogBase2(v130, v131);
          v133 = *(_QWORD *)(a1 + 24);
          if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
          {
            v165 = 0;
            v164 = &byte_1C871356D;
            goto LABEL_164;
          }
          v134 = ***(_QWORD ***)a2;
          v135 = *(_QWORD *)(v134 + 152);
          v136 = *(unsigned int *)(v134 + 168);
          if ((_DWORD)v136)
          {
            LODWORD(v137) = (v136 - 1) & ((a2 >> 4) ^ (a2 >> 9));
            v138 = (llvm::ValueAsMetadata **)(v135 + 16 * v137);
            v139 = *v138;
            if (*v138 == a2)
            {
LABEL_163:
              v163 = v138[1];
              v166 = *(_QWORD *)v163;
              v164 = (char *)v163 + 16;
              v165 = v166;
LABEL_164:
              *(_WORD *)&v197[16] = 261;
              *(_QWORD *)&v196 = v164;
              *((_QWORD *)&v196 + 1) = v165;
              v167 = (uint64_t *)sub_1C506ED1C(v133, (uint64_t)v12, (uint64_t)v132, (uint64_t)&v196, (*((unsigned __int8 *)a2 + 17) >> 1) & 1);
              *(_WORD *)&v197[16] = 257;
              Neg = (uint64_t ***)llvm::BinaryOperator::CreateNeg(v167, (llvm::Type *)&v196, 0);
              goto LABEL_165;
            }
            v140 = 1;
            while (v139 != (llvm::ValueAsMetadata *)-4096)
            {
              v141 = v137 + v140++;
              v137 = v141 & (v136 - 1);
              v139 = *(llvm::ValueAsMetadata **)(v135 + 16 * v137);
              if (v139 == a2)
              {
                v138 = (llvm::ValueAsMetadata **)(v135 + 16 * v137);
                goto LABEL_163;
              }
            }
          }
          v138 = (llvm::ValueAsMetadata **)(v135 + 16 * v136);
          goto LABEL_163;
        }
        if (llvm::isKnownToBeAPowerOfTwo((llvm *)v13, *(const llvm::Value **)(a1 + 80), (const llvm::DataLayout *)1, 0, *(_QWORD *)(a1 + 56), a2, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1, v188))
        {
          if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
          {
            v142 = ***(_QWORD ***)a2;
            v117 = *(_QWORD *)(v142 + 152);
            v118 = *(unsigned int *)(v142 + 168);
            if ((_DWORD)v118)
            {
              LODWORD(v119) = (v118 - 1) & ((a2 >> 4) ^ (a2 >> 9));
              v120 = (llvm::ValueAsMetadata **)(v117 + 16 * v119);
              v143 = *v120;
              if (*v120 != a2)
              {
                v144 = 1;
                while (v143 != (llvm::ValueAsMetadata *)-4096)
                {
                  v145 = v119 + v144++;
                  v119 = v145 & (v118 - 1);
                  v143 = *(llvm::ValueAsMetadata **)(v117 + 16 * v119);
                  if (v143 == a2)
                  {
LABEL_129:
                    v120 = (llvm::ValueAsMetadata **)(v117 + 16 * v119);
                    goto LABEL_154;
                  }
                }
                goto LABEL_153;
              }
              goto LABEL_154;
            }
LABEL_153:
            v120 = (llvm::ValueAsMetadata **)(v117 + 16 * v118);
            goto LABEL_154;
          }
LABEL_168:
          v152 = 0;
          v151 = &byte_1C871356D;
          goto LABEL_155;
        }
      }
      Neg = 0;
LABEL_165:
      if (v190 >= 0x41 && v189)
        MEMORY[0x1CAA32F9C](v189, 0x1000C8000313F17);
    }
  }
  return (llvm::Instruction *)Neg;
}

llvm::UndefValue **sub_1C5827C70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  llvm::PoisonValue **v4;
  llvm::Constant *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  int v9;
  llvm::Constant *v10;
  uint64_t ***v12;
  unsigned __int8 *v13;
  uint64_t v14;
  llvm::Type *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  llvm::Type *v26;
  llvm::ConstantExpr *v27;
  llvm::Constant *v28;
  llvm::Constant *v29;
  llvm::ValueHandleBase *FDiv;
  _QWORD *v31;
  char *v32;
  _QWORD *v33;
  char v34;
  unsigned __int8 *v35;
  uint64_t v36;
  llvm::Constant *v37;
  llvm::Constant *v38;
  llvm::Type *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  int v50;
  unsigned __int8 **v51;
  llvm::Constant *FMul;
  unsigned __int8 **v53;
  llvm::Constant *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  unsigned __int8 *v62;
  int v63;
  uint64_t *v64;
  uint64_t Declaration;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  llvm::Value *v77;
  uint64_t *v78;
  uint64_t *v79;
  char *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t **v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  int v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  _QWORD *v101;
  char *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  unsigned __int8 *v108;
  char *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t *v121;
  llvm::APFloatBase *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t *v127;
  _QWORD *v128;
  int v129;
  _QWORD *v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t *v141;
  llvm::Value *BinaryIntrinsic;
  uint64_t v143;
  llvm::ValueSymbolTable *v144;
  unsigned __int8 *v145;
  unsigned int v146;
  uint64_t Intrinsic;
  char *v148;
  _QWORD *v149;
  uint64_t ***v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  char v159;
  char v160;
  char v161;
  int v162;
  llvm::Type *v163;
  llvm::Value *v164;
  uint64_t *v165;
  uint64_t v166;
  unsigned __int8 *v167;
  unsigned int v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  std::string __dst;
  uint64_t v173;
  unsigned __int8 *v174;
  uint64_t v175;
  uint64_t ***v176;
  __int16 v177;
  void *v178[2];
  __int128 v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  char v184;
  char v185;
  char v186;
  uint64_t ***v187[4];

  v2 = a2;
  v187[2] = *(uint64_t ****)MEMORY[0x1E0C80C00];
  v4 = *(llvm::PoisonValue ***)(a2 - 64);
  v5 = *(llvm::Constant **)(a2 - 32);
  v6 = (unint64_t)*(unsigned __int8 *)(v2 + 17) >> 1;
  v7 = *(_OWORD *)(a1 + 120);
  v8 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)v178 = *(_OWORD *)(a1 + 88);
  v179 = v8;
  v181 = *((_QWORD *)&v7 + 1);
  v180 = v2;
  if ((_DWORD)v6 == 127)
    v9 = -1;
  else
    v9 = v6;
  v10 = sub_1C4E6D224(v4, v5, v9, (llvm::Constant **)v178, 0, (llvm::DSOLocalEquivalent **)1);
  if (v10)
    return sub_1C577F888(a1, (llvm::ValueAsMetadata *)v2, v10);
  v12 = (uint64_t ***)sub_1C57826B8(a1, (unsigned __int8 *)v2);
  if (v12)
    return (llvm::UndefValue **)v12;
  v12 = (uint64_t ***)sub_1C578171C(a1, v2);
  if (v12)
    return (llvm::UndefValue **)v12;
  v13 = *(unsigned __int8 **)(v2 - 32);
  if (v13 && v13[16] <= 0x14u)
  {
    v174 = 0;
    v14 = *(_QWORD *)(v2 - 64);
    v178[0] = &v174;
    if (sub_1C4E7B6EC((_QWORD **)v178, v14))
    {
      v16 = v174;
      v17 = llvm::ConstantExpr::get((llvm::ConstantExpr *)0xC, v13, 0, 0, v15);
      LOWORD(v180) = 257;
      v18 = (char *)operator new(0x80uLL);
      *((_QWORD *)v18 + 5) = 0;
      v19 = v18 + 40;
      *((_QWORD *)v18 + 6) = 0;
      *((_QWORD *)v18 + 8) = *(_QWORD *)v16;
      v12 = (uint64_t ***)(v18 + 64);
      *((_QWORD *)v18 + 3) = v18 + 64;
      *((_QWORD *)v18 + 7) = v18 + 64;
      *((_QWORD *)v18 + 9) = 0;
      v18[80] = 49;
      v18[81] = 0;
      *((_WORD *)v18 + 41) = 0;
      *((_DWORD *)v18 + 21) = 2;
      *(_OWORD *)(v18 + 88) = 0u;
      *(_OWORD *)(v18 + 104) = 0u;
      *((_DWORD *)v18 + 30) = 0;
      *(_QWORD *)v18 = v16;
      v22 = *((_QWORD *)v16 + 1);
      v21 = v16 + 8;
      v20 = v22;
      *((_QWORD *)v18 + 1) = v22;
      if (v22)
        *(_QWORD *)(v20 + 16) = v18 + 8;
      *((_QWORD *)v18 + 2) = v21;
      *v21 = v18;
LABEL_14:
      *((_QWORD *)v18 + 4) = v17;
      if (v17)
      {
        v25 = *(_QWORD *)(v17 + 8);
        v24 = (_QWORD *)(v17 + 8);
        v23 = v25;
        *v19 = v25;
        if (v25)
          *(_QWORD *)(v23 + 16) = v19;
        *((_QWORD *)v18 + 6) = v24;
        *v24 = v18 + 32;
      }
LABEL_33:
      llvm::Value::setName(v12, (uint64_t)v178);
      llvm::Instruction::copyIRFlags((uint64_t)v12, v2, 1);
      return (llvm::UndefValue **)v12;
    }
    if ((llvm::Constant::hasExactInverseFP((llvm::Constant *)v13) & 1) != 0
      || (*(_BYTE *)(v2 + 17) & 0x20) != 0 && llvm::Constant::isNormalFP((llvm::Constant *)v13))
    {
      v27 = llvm::ConstantFP::get(*(llvm::ConstantFP ***)v2, v26, 1.0);
      FDiv = llvm::ConstantExpr::getFDiv(v27, (llvm::Constant *)v13, v28, v29);
      if (llvm::Constant::isNormalFP(FDiv))
      {
        v31 = *(_QWORD **)(v2 - 64);
        LOWORD(v180) = 257;
        v32 = (char *)operator new(0x80uLL);
        *((_QWORD *)v32 + 5) = 0;
        v33 = v32 + 40;
        *((_QWORD *)v32 + 6) = 0;
        *((_QWORD *)v32 + 8) = *v31;
        v12 = (uint64_t ***)(v32 + 64);
        *((_QWORD *)v32 + 3) = v32 + 64;
        *((_QWORD *)v32 + 7) = v32 + 64;
        *((_QWORD *)v32 + 9) = 0;
        v34 = 46;
LABEL_27:
        v32[80] = v34;
        v32[81] = 0;
        *((_WORD *)v32 + 41) = 0;
        *((_DWORD *)v32 + 21) = 2;
        *(_OWORD *)(v32 + 88) = 0u;
        *(_OWORD *)(v32 + 104) = 0u;
        *((_DWORD *)v32 + 30) = 0;
        *(_QWORD *)v32 = v31;
        v42 = v31[1];
        v41 = v31 + 1;
        v40 = v42;
        *((_QWORD *)v32 + 1) = v42;
        if (v42)
          *(_QWORD *)(v40 + 16) = v32 + 8;
        *((_QWORD *)v32 + 2) = v41;
        *v41 = v32;
        *((_QWORD *)v32 + 4) = FDiv;
        if (FDiv)
        {
          v45 = *((_QWORD *)FDiv + 1);
          v44 = (_QWORD *)((char *)FDiv + 8);
          v43 = v45;
          *v33 = v45;
          if (v45)
            *(_QWORD *)(v43 + 16) = v33;
          *((_QWORD *)v32 + 6) = v44;
          *v44 = v32 + 32;
        }
        goto LABEL_33;
      }
    }
  }
  v35 = *(unsigned __int8 **)(v2 - 64);
  if (v35 && v35[16] <= 0x14u)
  {
    v174 = 0;
    v36 = *(_QWORD *)(v2 - 32);
    v178[0] = &v174;
    if (sub_1C4E7B6EC((_QWORD **)v178, v36))
    {
      v31 = (_QWORD *)llvm::ConstantExpr::get((llvm::ConstantExpr *)0xC, v35, 0, 0, v39);
      FDiv = (llvm::ValueHandleBase *)v174;
      LOWORD(v180) = 257;
      v32 = (char *)operator new(0x80uLL);
      *((_QWORD *)v32 + 5) = 0;
      v33 = v32 + 40;
      *((_QWORD *)v32 + 6) = 0;
      *((_QWORD *)v32 + 8) = *v31;
      v12 = (uint64_t ***)(v32 + 64);
      *((_QWORD *)v32 + 3) = v32 + 64;
      *((_QWORD *)v32 + 7) = v32 + 64;
      *((_QWORD *)v32 + 9) = 0;
      v34 = 49;
      goto LABEL_27;
    }
    if ((~*(unsigned __int8 *)(v2 + 17) & 0x22) == 0)
    {
      v46 = *(_QWORD *)(v2 - 32);
      v47 = *(unsigned __int8 *)(v46 + 16);
      switch(v47)
      {
        case 5:
          v50 = *(unsigned __int16 *)(v46 + 18);
          if (v50 != 21)
          {
            if (v50 != 18)
              goto LABEL_59;
            v51 = (unsigned __int8 **)(v46 - 32 * (*(_DWORD *)(v46 + 20) & 0x7FFFFFF));
            if (!*v51)
              goto LABEL_59;
            v174 = *v51;
            v48 = v51[4];
            if (!v48)
              goto LABEL_59;
LABEL_50:
            FMul = llvm::ConstantExpr::getFDiv((llvm::ConstantExpr *)v35, (llvm::Constant *)v48, v37, v38);
LABEL_54:
            v54 = FMul;
            if (FMul && llvm::Constant::isNormalFP(FMul))
            {
              v17 = (uint64_t)v174;
              LOWORD(v180) = 257;
              v18 = (char *)operator new(0x80uLL);
              *((_QWORD *)v18 + 5) = 0;
              v19 = v18 + 40;
              *((_QWORD *)v18 + 6) = 0;
              *((_QWORD *)v18 + 8) = *(_QWORD *)v54;
              v12 = (uint64_t ***)(v18 + 64);
              *((_QWORD *)v18 + 3) = v18 + 64;
              *((_QWORD *)v18 + 7) = v18 + 64;
              *((_QWORD *)v18 + 9) = 0;
              v18[80] = 49;
              v18[81] = 0;
              *((_WORD *)v18 + 41) = 0;
              *((_DWORD *)v18 + 21) = 2;
              *(_OWORD *)(v18 + 88) = 0u;
              *(_OWORD *)(v18 + 104) = 0u;
              *((_DWORD *)v18 + 30) = 0;
              *(_QWORD *)v18 = v54;
              v57 = *((_QWORD *)v54 + 1);
              v56 = (_QWORD *)((char *)v54 + 8);
              v55 = v57;
              *((_QWORD *)v18 + 1) = v57;
              if (v57)
                *(_QWORD *)(v55 + 16) = v18 + 8;
              *((_QWORD *)v18 + 2) = v56;
              *v56 = v18;
              goto LABEL_14;
            }
            goto LABEL_59;
          }
          v53 = (unsigned __int8 **)(v46 - 32 * (*(_DWORD *)(v46 + 20) & 0x7FFFFFF));
          if (!*v53)
            goto LABEL_59;
          v174 = *v53;
          v49 = v53[4];
          if (!v49)
            goto LABEL_59;
          break;
        case 49:
          if (!*(_QWORD *)(v46 - 64))
            goto LABEL_59;
          v174 = *(unsigned __int8 **)(v46 - 64);
          v49 = *(unsigned __int8 **)(v46 - 32);
          if (!v49 || v49[16] > 0x14u)
            goto LABEL_59;
          break;
        case 46:
          if (!*(_QWORD *)(v46 - 64))
            goto LABEL_59;
          v174 = *(unsigned __int8 **)(v46 - 64);
          v48 = *(unsigned __int8 **)(v46 - 32);
          if (!v48 || v48[16] > 0x14u)
            goto LABEL_59;
          goto LABEL_50;
        default:
          goto LABEL_59;
      }
      FMul = llvm::ConstantExpr::getFMul((llvm::ConstantExpr *)v35, (llvm::Constant *)v49, v37, v38);
      goto LABEL_54;
    }
  }
LABEL_59:
  v12 = sub_1C58227A4(a1, (unsigned __int8 *)v2);
  if (!v12)
  {
    v58 = *(_QWORD *)(v2 - 64);
    v59 = *(_QWORD *)(v2 - 32);
    if (*(unsigned __int8 *)(v58 + 16) > 0x14u
      || *(_BYTE *)(v59 + 16) != 85
      || !v59
      || (v12 = (uint64_t ***)sub_1C577FF7C(a1, (_BYTE *)v2, *(_QWORD **)(v2 - 32), 0)) == 0)
    {
      v60 = *(_BYTE *)(v2 + 17);
      v173 = 0;
      v61 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 56) + 40);
      if (*(char *)(v61 + 239) < 0)
        sub_1C47EBC30(&__dst, *(void **)(v61 + 216), *(_QWORD *)(v61 + 224));
      else
        __dst = *(std::string *)(v61 + 216);
      if (!std::string::compare(&__dst, 0, 4uLL, "agx1"))
      {
        v63 = 27;
      }
      else if (!std::string::compare(&__dst, 0, 4uLL, "agx2"))
      {
        v63 = 28;
      }
      else if (!std::string::compare(&__dst, 0, 4uLL, "agx3"))
      {
        v63 = 29;
      }
      else
      {
        v63 = 0;
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      if ((v60 & 0x20) != 0 && (v63 - 27) <= 2)
      {
        LODWORD(v178[0]) = 280;
        v178[1] = 0;
        *(_QWORD *)&v179 = &v173;
        if (sub_1C4E75A6C((uint64_t)v178, v59))
        {
          v64 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 56) + 40);
          v178[0] = *(void **)v59;
          Declaration = llvm::Intrinsic::getDeclaration(v64, 261, (uint64_t *)v178, 1);
          v66 = Declaration;
          v170 = (_QWORD *)v58;
          if (Declaration)
            v67 = *(_QWORD *)(Declaration + 24);
          else
            v67 = 0;
          v178[0] = "rsqrt";
          LOWORD(v180) = 259;
          v76 = (char *)operator new(0x90uLL);
          v77 = (llvm::Value *)(v76 + 64);
          *((_DWORD *)v76 + 21) = *((_DWORD *)v76 + 21) & 0x38000000 | 2;
          *(_QWORD *)v76 = 0;
          *((_QWORD *)v76 + 1) = 0;
          *((_QWORD *)v76 + 2) = 0;
          *((_QWORD *)v76 + 3) = v76 + 64;
          *((_QWORD *)v76 + 4) = 0;
          v78 = (uint64_t *)(v76 + 32);
          *((_QWORD *)v76 + 5) = 0;
          *((_QWORD *)v76 + 6) = 0;
          *((_QWORD *)v76 + 7) = v76 + 64;
          *((_QWORD *)v76 + 8) = **(_QWORD **)(v67 + 16);
          *((_QWORD *)v76 + 9) = 0;
          v79 = (uint64_t *)(v76 + 72);
          v76[80] = 84;
          v76[81] = 0;
          *((_WORD *)v76 + 41) = 0;
          *((_DWORD *)v76 + 21) = 2;
          *(_OWORD *)(v76 + 88) = 0u;
          v80 = v76 + 88;
          *(_OWORD *)(v76 + 104) = 0u;
          *((_DWORD *)v76 + 30) = 0;
          v81 = *(_QWORD *)(v2 + 40);
          v82 = (uint64_t *)(v2 + 24);
          *((_QWORD *)v76 + 13) = v81;
          *(_WORD *)(v81 + 18) &= ~0x8000u;
          if ((v76[87] & 0x10) != 0)
          {
            v143 = *(_QWORD *)(v81 + 56);
            if (v143)
            {
              v144 = *(llvm::ValueSymbolTable **)(v143 + 104);
              if (v144)
                llvm::ValueSymbolTable::reinsertValue(v144, v77);
            }
          }
          v83 = *v82;
          *((_QWORD *)v76 + 11) = *v82;
          *((_QWORD *)v76 + 12) = v82;
          *(_QWORD *)(v83 + 8) = v80;
          *v82 = (uint64_t)v80;
          *((_QWORD *)v76 + 16) = 0;
          *((_QWORD *)v76 + 17) = v67;
          sub_1C5382FD4((uint64_t)&v174, &v173, (uint64_t *)&v174, (uint64_t)v77 - 32 * (*((_DWORD *)v76 + 21) & 0x7FFFFFF));
          if (*((_QWORD *)v76 + 4))
          {
            **((_QWORD **)v76 + 6) = *((_QWORD *)v76 + 5);
            v169 = *((_QWORD *)v76 + 5);
            if (v169)
              *(_QWORD *)(v169 + 16) = *((_QWORD *)v76 + 6);
          }
          *v78 = v66;
          if (v66)
          {
            v86 = *(_QWORD *)(v66 + 8);
            v85 = (uint64_t **)(v66 + 8);
            v84 = v86;
            *((_QWORD *)v76 + 5) = v86;
            if (v86)
              *(_QWORD *)(v84 + 16) = v76 + 40;
            *((_QWORD *)v76 + 6) = v85;
            *v85 = v78;
          }
          llvm::CallBase::populateBundleOperandInfos((uint64_t)v77, 0, 0, 1u);
          llvm::Value::setName((uint64_t ***)v77, (uint64_t)v178);
          *((_QWORD *)v76 + 16) = *(_QWORD *)(v59 + 64);
          v76[81] |= *(_BYTE *)(v2 + 17) & 0xFE;
          v178[0] = "mulsqrt";
          LOWORD(v180) = 259;
          v87 = (char *)operator new(0x80uLL);
          v88 = v87;
          *((_QWORD *)v87 + 6) = 0;
          *((_QWORD *)v87 + 8) = *v170;
          v12 = (uint64_t ***)(v87 + 64);
          *((_QWORD *)v87 + 3) = v87 + 64;
          *((_QWORD *)v87 + 7) = v87 + 64;
          *((_QWORD *)v87 + 9) = 0;
          v87[80] = 46;
          v87[81] = 0;
          *((_WORD *)v87 + 41) = 0;
          *((_DWORD *)v87 + 21) = 2;
          *(_OWORD *)(v87 + 88) = 0u;
          *(_OWORD *)(v87 + 104) = 0u;
          *((_DWORD *)v87 + 30) = 0;
          *(_QWORD *)v87 = v170;
          v90 = v170 + 1;
          v89 = v170[1];
          *((_QWORD *)v87 + 1) = v89;
          if (v89)
            *(_QWORD *)(v89 + 16) = v87 + 8;
          *((_QWORD *)v87 + 2) = v90;
          *v90 = v87;
          v91 = *v79;
          *((_QWORD *)v87 + 5) = *v79;
          *((_QWORD *)v87 + 4) = v77;
          if (v91)
            *(_QWORD *)(v91 + 16) = v87 + 40;
          *((_QWORD *)v87 + 6) = v79;
          *v79 = (uint64_t)(v87 + 32);
          llvm::Value::setName((uint64_t ***)v87 + 8, (uint64_t)v178);
          v88[81] |= *(_BYTE *)(v2 + 17) & 0xFE;
          return (llvm::UndefValue **)v12;
        }
      }
      if (*(unsigned __int8 *)(v59 + 16) > 0x14u
        || *(_BYTE *)(v58 + 16) != 85
        || (v12 = (uint64_t ***)sub_1C577FF7C(a1, (_BYTE *)v2, (_QWORD *)v58, 0)) == 0)
      {
        v68 = *(unsigned __int8 *)(v2 + 17);
        if ((~v68 & 0x22) != 0)
        {
LABEL_144:
          if ((v68 & 2) == 0
            || (v114 = *(_QWORD *)(v58 + 8)) == 0
            || *(_QWORD *)(v114 + 8)
            || (v118 = *(_QWORD *)(v59 + 8)) == 0
            || *(_QWORD *)(v118 + 8))
          {
LABEL_147:
            v171 = 0;
            if ((v68 & 4) == 0)
              goto LABEL_165;
            if ((v68 & 2) != 0)
            {
              v115 = *(unsigned __int8 *)(v59 + 16);
              if (v115 == 5)
              {
                if (*(_WORD *)(v59 + 18) == 18)
                {
                  v121 = (uint64_t *)(v59 - 32 * (*(_DWORD *)(v59 + 20) & 0x7FFFFFF));
                  v116 = *v121;
                  v117 = v121[4];
LABEL_159:
                  if (v58 == v116)
                  {
                    v116 = v117;
                    if (v117)
                    {
LABEL_162:
                      v122 = llvm::ConstantFP::get(*(llvm::ConstantFP ***)v2, (llvm::Type *)v62, 1.0);
                      sub_1C577E2C8(a1, v2, 0, (uint64_t)v122);
                      sub_1C577E2C8(a1, v2, 1u, v116);
                      return (llvm::UndefValue **)v2;
                    }
                  }
                  else if (v116 && v58 == v117)
                  {
                    goto LABEL_162;
                  }
                }
              }
              else if (v115 == 46)
              {
                v116 = *(_QWORD *)(v59 - 64);
                v117 = *(_QWORD *)(v59 - 32);
                goto LABEL_159;
              }
            }
            if ((v68 & 8) == 0)
              goto LABEL_165;
            v132 = *(unsigned __int8 *)(v2 + 16);
            if (v132 == 49)
            {
              v62 = *(unsigned __int8 **)(v2 - 64);
              if (v62)
              {
                v171 = *(_QWORD *)(v2 - 64);
                v133 = *(_QWORD *)(v2 - 32);
                if (v133)
                {
                  if (*(_BYTE *)(v133 + 16) == 84)
                  {
                    v134 = *(_QWORD *)(v133 - 32);
                    if (v134)
                    {
                      if (!*(_BYTE *)(v134 + 16)
                        && *(_QWORD *)(v134 + 24) == *(_QWORD *)(v133 + 72)
                        && *(_DWORD *)(v134 + 36) == 139
                        && v62 == *(unsigned __int8 **)(v133 - 32 * (*(_DWORD *)(v133 + 20) & 0x7FFFFFF)))
                      {
                        goto LABEL_204;
                      }
                    }
                  }
                }
              }
              LODWORD(v178[0]) = 139;
              v178[1] = 0;
              *(_QWORD *)&v179 = &v171;
              *((_QWORD *)&v179 + 1) = &v171;
              if (!sub_1C4E75A6C((uint64_t)v178, (uint64_t)v62))
                goto LABEL_165;
              v135 = *(_QWORD *)(v2 - 32);
LABEL_203:
              if (**((_QWORD **)&v179 + 1) != v135)
                goto LABEL_165;
LABEL_204:
              v140 = *(uint64_t **)(a1 + 24);
              v141 = (uint64_t *)llvm::ConstantFP::get(*(llvm::ConstantFP ***)v2, (llvm::Type *)v62, 1.0);
              LOWORD(v180) = 257;
              BinaryIntrinsic = (llvm::Value *)llvm::IRBuilderBase::CreateBinaryIntrinsic(v140, 19, v141, v171, v2, (uint64_t)v178);
              return sub_1C577F888(a1, (llvm::ValueAsMetadata *)v2, BinaryIntrinsic);
            }
            if (v132 == 5 && *(_WORD *)(v2 + 18) == 21)
            {
              v136 = (uint64_t *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
              v137 = *v136;
              if (*v136)
              {
                v171 = *v136;
                v138 = v136[4];
                if (v138)
                {
                  if (*(_BYTE *)(v138 + 16) == 84)
                  {
                    v139 = *(_QWORD *)(v138 - 32);
                    if (v139)
                    {
                      if (!*(_BYTE *)(v139 + 16)
                        && *(_QWORD *)(v139 + 24) == *(_QWORD *)(v138 + 72)
                        && *(_DWORD *)(v139 + 36) == 139
                        && v137 == *(_QWORD *)(v138 - 32 * (*(_DWORD *)(v138 + 20) & 0x7FFFFFF)))
                      {
                        goto LABEL_204;
                      }
                    }
                  }
                }
              }
              LODWORD(v178[0]) = 139;
              v178[1] = 0;
              *(_QWORD *)&v179 = &v171;
              *((_QWORD *)&v179 + 1) = &v171;
              if (!sub_1C4E75A6C((uint64_t)v178, *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF))))
                goto LABEL_165;
              v135 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 32);
              goto LABEL_203;
            }
LABEL_165:
            v123 = *(_QWORD *)(v2 - 32);
            if (*(_BYTE *)(v123 + 16) != 84)
              return 0;
            v124 = *(_QWORD *)(v123 - 32);
            if (!v124)
              return 0;
            if (*(_BYTE *)(v124 + 16))
              return 0;
            if (*(_QWORD *)(v124 + 24) != *(_QWORD *)(v123 + 72))
              return 0;
            if ((*(_BYTE *)(v124 + 33) & 0x20) == 0)
              return 0;
            v125 = *(_QWORD *)(v123 + 8);
            if (!v125)
              return 0;
            if (*(_QWORD *)(v125 + 8))
              return 0;
            v126 = *(unsigned __int8 *)(v2 + 17);
            if ((~v126 & 0x22) != 0)
              return 0;
            v127 = *(uint64_t **)(a1 + 24);
            v128 = *(_QWORD **)(v2 - 64);
            v129 = *(_DWORD *)(v124 + 36);
            v178[0] = &v179;
            v178[1] = (void *)0x600000000;
            if ((v129 - 75) >= 2)
            {
              if (v129 == 239)
              {
                if ((v126 & 8) != 0)
                {
                  *(_QWORD *)&v179 = *(_QWORD *)(v123 - 32 * (*(_DWORD *)(v123 + 20) & 0x7FFFFFF));
                  LODWORD(v178[1]) = 1;
                  v166 = *(_QWORD *)(v123 - 32 * (*(_DWORD *)(v123 + 20) & 0x7FFFFFF) + 32);
                  v177 = 257;
                  v167 = sub_1C5346748((uint64_t)v127, v166, (uint64_t)&v174, 0, 0);
                  v168 = v178[1];
                  if (LODWORD(v178[1]) >= HIDWORD(v178[1]))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v178, (uint64_t)&v179, LODWORD(v178[1]) + 1, 8);
                    v168 = v178[1];
                  }
                  *((_QWORD *)v178[0] + v168) = v167;
                  ++LODWORD(v178[1]);
                  v187[0] = *(uint64_t ****)v2;
                  v187[1] = **(uint64_t *****)(v123 - 32 * (*(_DWORD *)(v123 + 20) & 0x7FFFFFF) + 32);
                  v177 = 257;
                  Intrinsic = llvm::IRBuilderBase::CreateIntrinsic(v127, 239, (uint64_t *)v187, 2, (uint64_t *)v178[0], LODWORD(v178[1]), v2, (uint64_t)&v174);
                  v177 = 257;
                  v148 = (char *)operator new(0x80uLL);
                  *((_QWORD *)v148 + 6) = 0;
                  *((_QWORD *)v148 + 5) = 0;
                  v149 = v148 + 40;
                  *((_QWORD *)v148 + 8) = *v128;
                  v150 = (uint64_t ***)(v148 + 64);
                  *((_QWORD *)v148 + 3) = v148 + 64;
                  *((_QWORD *)v148 + 7) = v148 + 64;
                  *((_QWORD *)v148 + 9) = 0;
                  v148[80] = 46;
                  v148[81] = 0;
                  *((_WORD *)v148 + 41) = 0;
                  *((_DWORD *)v148 + 21) = 2;
                  goto LABEL_217;
                }
              }
              else if (v129 == 238)
              {
                v130 = (_QWORD *)(v123 - 32 * (*(_DWORD *)(v123 + 20) & 0x7FFFFFF));
                *(_QWORD *)&v179 = *v130;
                LODWORD(v178[1]) = 1;
                v131 = v130[4];
LABEL_214:
                v177 = 257;
                v145 = sub_1C579D8FC(v127, v131, v2, (uint64_t)&v174);
                v146 = v178[1];
                if (LODWORD(v178[1]) >= HIDWORD(v178[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v178, (uint64_t)&v179, LODWORD(v178[1]) + 1, 8);
                  v146 = v178[1];
                }
                *((_QWORD *)v178[0] + v146) = v145;
                ++LODWORD(v178[1]);
                v187[0] = *(uint64_t ****)v2;
                v177 = 257;
                Intrinsic = llvm::IRBuilderBase::CreateIntrinsic(v127, v129, (uint64_t *)v187, 1, (uint64_t *)v178[0], LODWORD(v178[1]), v2, (uint64_t)&v174);
                v177 = 257;
                v148 = (char *)operator new(0x80uLL);
                *((_QWORD *)v148 + 5) = 0;
                v149 = v148 + 40;
                *((_QWORD *)v148 + 6) = 0;
                *((_QWORD *)v148 + 8) = *v128;
                v150 = (uint64_t ***)(v148 + 64);
                *((_QWORD *)v148 + 3) = v148 + 64;
                *((_QWORD *)v148 + 7) = v148 + 64;
                *((_QWORD *)v148 + 9) = 0;
                v148[80] = 46;
                v148[81] = 0;
                *((_WORD *)v148 + 41) = 0;
                *((_DWORD *)v148 + 21) = 2;
LABEL_217:
                *(_OWORD *)(v148 + 88) = 0u;
                *(_OWORD *)(v148 + 104) = 0u;
                *((_DWORD *)v148 + 30) = 0;
                *(_QWORD *)v148 = v128;
                v153 = v128[1];
                v152 = v128 + 1;
                v151 = v153;
                *((_QWORD *)v148 + 1) = v153;
                if (v153)
                  *(_QWORD *)(v151 + 16) = v148 + 8;
                *((_QWORD *)v148 + 2) = v152;
                *v152 = v148;
                *((_QWORD *)v148 + 4) = Intrinsic;
                if (Intrinsic)
                {
                  v156 = *(_QWORD *)(Intrinsic + 8);
                  v155 = (_QWORD *)(Intrinsic + 8);
                  v154 = v156;
                  *v149 = v156;
                  if (v156)
                    *(_QWORD *)(v154 + 16) = v149;
                  *((_QWORD *)v148 + 6) = v155;
                  *v155 = v148 + 32;
                }
                llvm::Value::setName(v150, (uint64_t)&v174);
                llvm::Instruction::copyIRFlags((uint64_t)v150, v2, 1);
                goto LABEL_232;
              }
              v150 = 0;
LABEL_232:
              if (v178[0] != &v179)
                free(v178[0]);
              return (llvm::UndefValue **)v150;
            }
            v131 = *(_QWORD *)(v123 - 32 * (*(_DWORD *)(v123 + 20) & 0x7FFFFFF));
            goto LABEL_214;
          }
          v187[0] = 0;
          LODWORD(v178[0]) = 273;
          v178[1] = 0;
          *(_QWORD *)&v179 = v187;
          if (sub_1C4E75A6C((uint64_t)v178, v58)
            && (LODWORD(v174) = 51, v175 = 0, v176 = v187[0], sub_1C4E7AEB4((uint64_t)&v174, v59)))
          {
            v119 = v58;
            v120 = 0;
          }
          else
          {
            LODWORD(v178[0]) = 51;
            v178[1] = 0;
            *(_QWORD *)&v179 = v187;
            v119 = v58;
            if (!sub_1C4E75A6C((uint64_t)v178, v58)
              || (LODWORD(v174) = 273, v175 = 0, v176 = v187[0], !sub_1C4E7AEB4((uint64_t)&v174, v59)))
            {
LABEL_212:
              LOBYTE(v68) = *(_BYTE *)(v2 + 17);
              v58 = v119;
              goto LABEL_147;
            }
            v120 = 1;
          }
          if (llvm::hasFloatFn(*(_QWORD **)(a1 + 64), *(_QWORD *)v2, 0x1B3u, 0x1B4u, 0x1B8u))
          {
            sub_1C4773D54((uint64_t)v178, v2, 0, 0, 0);
            v157 = v183;
            v158 = v182;
            v159 = v184;
            v160 = v185;
            v161 = v186;
            v162 = *(unsigned __int8 *)(v2 + 17) >> 1;
            if (v162 == 127)
              v162 = -1;
            v183 = v162;
            v171 = *(_QWORD *)(*(_QWORD *)(v119 - 32) + 112);
            v164 = (llvm::Value *)llvm::emitUnaryFloatFnCall(v187[0], *(_QWORD **)(a1 + 64), 0x1B3u, 0x1B4u, 0x1B8u, (uint64_t)v178, &v171);
            if (v120)
            {
              v165 = (uint64_t *)llvm::ConstantFP::get(*(llvm::ConstantFP ***)v2, v163, 1.0);
              v177 = 257;
              v164 = (llvm::Value *)sub_1C47721F8((uint64_t)v178, v165, (uint64_t)v164, (uint64_t)&v174, 0);
            }
            v12 = (uint64_t ***)sub_1C577F888(a1, (llvm::ValueAsMetadata *)v2, v164);
            v183 = v157;
            v182 = v158;
            v184 = v159;
            v185 = v160;
            v186 = v161;
            if (v178[0] != &v179)
              free(v178[0]);
            return (llvm::UndefValue **)v12;
          }
          goto LABEL_212;
        }
        v174 = 0;
        v70 = (_QWORD *)(v58 + 8);
        v69 = *(_QWORD *)(v58 + 8);
        if (v69 && !*(_QWORD *)(v69 + 8))
        {
          v92 = *(unsigned __int8 *)(v58 + 16);
          if (v92 == 5)
          {
            if (*(_WORD *)(v58 + 18) != 21)
              goto LABEL_86;
            v94 = v58 - 32 * (*(_DWORD *)(v58 + 20) & 0x7FFFFFF);
            v93 = *(_QWORD **)v94;
            if (!*(_QWORD *)v94)
              goto LABEL_86;
            v62 = *(unsigned __int8 **)(v94 + 32);
            if (!v62)
              goto LABEL_86;
          }
          else
          {
            if (v92 != 49)
              goto LABEL_86;
            v93 = *(_QWORD **)(v58 - 64);
            if (!v93)
              goto LABEL_86;
            v62 = *(unsigned __int8 **)(v58 - 32);
            if (!v62)
              goto LABEL_86;
          }
          v174 = v62;
          if (v62[16] > 0x14u || *(unsigned __int8 *)(v59 + 16) >= 0x15u)
          {
            v95 = *(_QWORD *)(a1 + 24);
            LOWORD(v180) = 257;
            v17 = sub_1C4867450(v95, (uint64_t *)v62, v59, v2, (uint64_t)v178);
            LOWORD(v180) = 257;
            v18 = (char *)operator new(0x80uLL);
            *((_QWORD *)v18 + 5) = 0;
            v19 = v18 + 40;
            *((_QWORD *)v18 + 6) = 0;
            *((_QWORD *)v18 + 8) = *v93;
            v12 = (uint64_t ***)(v18 + 64);
            *((_QWORD *)v18 + 3) = v18 + 64;
            *((_QWORD *)v18 + 7) = v18 + 64;
            *((_QWORD *)v18 + 9) = 0;
            v18[80] = 49;
            v18[81] = 0;
            *((_WORD *)v18 + 41) = 0;
            *((_DWORD *)v18 + 21) = 2;
            *(_OWORD *)(v18 + 88) = 0u;
            *(_OWORD *)(v18 + 104) = 0u;
            *((_DWORD *)v18 + 30) = 0;
            *(_QWORD *)v18 = v93;
            v98 = v93[1];
            v97 = v93 + 1;
            v96 = v98;
            *((_QWORD *)v18 + 1) = v98;
            if (v98)
              *(_QWORD *)(v96 + 16) = v18 + 8;
            *((_QWORD *)v18 + 2) = v97;
            *v97 = v18;
            goto LABEL_14;
          }
        }
LABEL_86:
        v71 = *(_QWORD *)(v59 + 8);
        if (!v71)
        {
          v73 = *(unsigned __int8 *)(v59 + 16);
          goto LABEL_94;
        }
        v72 = *(_QWORD *)(v71 + 8);
        v73 = *(unsigned __int8 *)(v59 + 16);
        if (v72)
          goto LABEL_94;
        if (v73 == 5)
        {
          if (*(_WORD *)(v59 + 18) == 21)
          {
            v99 = (uint64_t *)(v59 - 32 * (*(_DWORD *)(v59 + 20) & 0x7FFFFFF));
            v74 = *v99;
            if (*v99)
            {
              v62 = (unsigned __int8 *)v99[4];
              if (v62)
              {
LABEL_126:
                v174 = v62;
                if (v62[16] > 0x14u || *(unsigned __int8 *)(v58 + 16) >= 0x15u)
                {
                  v100 = *(_QWORD *)(a1 + 24);
                  LOWORD(v180) = 257;
                  v101 = (_QWORD *)sub_1C4867450(v100, (uint64_t *)v62, v58, v2, (uint64_t)v178);
                  LOWORD(v180) = 257;
                  v102 = (char *)operator new(0x80uLL);
                  *((_QWORD *)v102 + 6) = 0;
                  *((_QWORD *)v102 + 8) = *v101;
                  v12 = (uint64_t ***)(v102 + 64);
                  *((_QWORD *)v102 + 3) = v102 + 64;
                  *((_QWORD *)v102 + 7) = v102 + 64;
                  *((_QWORD *)v102 + 9) = 0;
                  v102[80] = 49;
                  v102[81] = 0;
                  *((_WORD *)v102 + 41) = 0;
                  *((_DWORD *)v102 + 21) = 2;
                  *(_OWORD *)(v102 + 88) = 0u;
                  *(_OWORD *)(v102 + 104) = 0u;
                  *((_DWORD *)v102 + 30) = 0;
                  *(_QWORD *)v102 = v101;
                  v105 = v101[1];
                  v104 = v101 + 1;
                  v103 = v105;
                  *((_QWORD *)v102 + 1) = v105;
                  if (v105)
                    *(_QWORD *)(v103 + 16) = v102 + 8;
                  *((_QWORD *)v102 + 2) = v104;
                  *v104 = v102;
                  v106 = (_QWORD *)(v74 + 8);
                  v107 = *(_QWORD *)(v74 + 8);
                  *((_QWORD *)v102 + 5) = v107;
                  *((_QWORD *)v102 + 4) = v74;
                  if (v107)
                    *(_QWORD *)(v107 + 16) = v102 + 40;
                  *((_QWORD *)v102 + 6) = v106;
                  *v106 = v102 + 32;
                  goto LABEL_33;
                }
LABEL_94:
                v178[0] = (void *)0x3FF0000000000000;
                v178[1] = &v174;
                if (v73 == 49)
                  goto LABEL_95;
LABEL_134:
                if (v73 != 5)
                  goto LABEL_143;
                if (*(_WORD *)(v59 + 18) != 21)
                  goto LABEL_143;
                if (!sub_1C55CDE08((const llvm::APInt **)v178, *(llvm::Constant **)(v59 - 32 * (*(_DWORD *)(v59 + 20) & 0x7FFFFFF))))goto LABEL_143;
                v75 = *(_QWORD *)(v59 - 32 * (*(_DWORD *)(v59 + 20) & 0x7FFFFFF) + 32);
                if (!v75)
                  goto LABEL_143;
                goto LABEL_138;
              }
            }
          }
        }
        else if (v73 == 49)
        {
          v74 = *(_QWORD *)(v59 - 64);
          if (!v74 || (v62 = *(unsigned __int8 **)(v59 - 32)) == 0)
          {
            v178[0] = (void *)0x3FF0000000000000;
            v178[1] = &v174;
LABEL_95:
            if (!sub_1C4E7BE28((const llvm::APInt **)v178, *(unsigned __int8 **)(v59 - 64))
              || (v75 = *(_QWORD *)(v59 - 32)) == 0)
            {
LABEL_143:
              LOBYTE(v68) = *(_BYTE *)(v2 + 17);
              goto LABEL_144;
            }
LABEL_138:
            *(_QWORD *)v178[1] = v75;
            v108 = v174;
            LOWORD(v180) = 257;
            v109 = (char *)operator new(0x80uLL);
            *((_QWORD *)v109 + 6) = 0;
            *((_QWORD *)v109 + 8) = *(_QWORD *)v108;
            v12 = (uint64_t ***)(v109 + 64);
            *((_QWORD *)v109 + 3) = v109 + 64;
            *((_QWORD *)v109 + 7) = v109 + 64;
            *((_QWORD *)v109 + 9) = 0;
            v109[80] = 46;
            v109[81] = 0;
            *((_WORD *)v109 + 41) = 0;
            *((_DWORD *)v109 + 21) = 2;
            *(_OWORD *)(v109 + 88) = 0u;
            *(_OWORD *)(v109 + 104) = 0u;
            *((_DWORD *)v109 + 30) = 0;
            *(_QWORD *)v109 = v108;
            v112 = *((_QWORD *)v108 + 1);
            v111 = v108 + 8;
            v110 = v112;
            *((_QWORD *)v109 + 1) = v112;
            if (v112)
              *(_QWORD *)(v110 + 16) = v109 + 8;
            *((_QWORD *)v109 + 2) = v111;
            *v111 = v109;
            v113 = *(_QWORD *)(v58 + 8);
            *((_QWORD *)v109 + 5) = v113;
            *((_QWORD *)v109 + 4) = v58;
            if (v113)
              *(_QWORD *)(v113 + 16) = v109 + 40;
            *((_QWORD *)v109 + 6) = v70;
            *v70 = v109 + 32;
            goto LABEL_33;
          }
          goto LABEL_126;
        }
        v178[0] = (void *)0x3FF0000000000000;
        v178[1] = &v174;
        goto LABEL_134;
      }
    }
  }
  return (llvm::UndefValue **)v12;
}

uint64_t sub_1C58290B4(_QWORD *a1, _BYTE *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v10;
  unint64_t **v11;
  unsigned int v12;
  unsigned int v13;
  _BOOL4 v14;
  _QWORD v15[2];
  llvm::APInt *v16;

  result = (uint64_t)sub_1C578171C((uint64_t)a1, (uint64_t)a2);
  if (result)
    return result;
  v5 = *((_QWORD *)a2 - 8);
  v6 = *((_QWORD *)a2 - 4);
  v7 = sub_1C5825BB0(v6, (uint64_t)a1, (llvm::AssumptionCache *)a2);
  if (v7)
    return sub_1C577E2C8((uint64_t)a1, (uint64_t)a2, 1u, v7);
  if ((sub_1C5824480(a1, (uint64_t)a2) & 1) != 0)
    return (uint64_t)a2;
  v8 = *(unsigned __int8 *)(v5 + 16);
  if (v8 <= 0x14 && v8 != 5 && sub_1C582A600(v6))
  {
    result = sub_1C577FF7C((uint64_t)a1, a2, (_QWORD *)v6, (llvm::Constant *)1);
    if (result)
      return result;
  }
  if (*(unsigned __int8 *)(v6 + 16) > 0x14u)
    return 0;
  v10 = *(unsigned __int8 *)(v5 + 16);
  if (v10 < 0x1C)
    return 0;
  if (v10 != 83)
  {
    if (v10 == 85)
    {
      result = sub_1C577FF7C((uint64_t)a1, a2, (_QWORD *)v5, 0);
      if (result)
        return result;
    }
    goto LABEL_29;
  }
  v15[1] = 0;
  v16 = 0;
  v15[0] = &v16;
  if (sub_1C4D89F84((uint64_t)v15, (unsigned __int8 *)v6))
  {
    v11 = (unint64_t **)v16;
    v12 = *((_DWORD *)v16 + 2);
    if (v12 <= 0x40)
    {
      if (!*(_QWORD *)v16 || a2[16] != 50 && *(_QWORD *)v16 == 1 << (v12 - 1))
        goto LABEL_29;
LABEL_28:
      result = (uint64_t)sub_1C57808D4((uint64_t)a1, (llvm::Instruction *)a2, v5);
      if (result)
        return result;
      goto LABEL_29;
    }
    if (llvm::APInt::countLeadingZerosSlowCase(v16) != v12)
    {
      if (a2[16] == 50)
        goto LABEL_28;
      v13 = v12 - 1;
      if ((((*v11)[v13 >> 6] >> v13) & 1) == 0 || llvm::APInt::countTrailingZerosSlowCase(v11) != v13)
        goto LABEL_28;
    }
  }
LABEL_29:
  v14 = sub_1C584C4C4((uint64_t)a1, (llvm::UndefValue *)a2);
  result = (uint64_t)a2;
  if (!v14)
    return 0;
  return result;
}

llvm::Value *sub_1C582929C(uint64_t a1, llvm::ValueAsMetadata *a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm::DSOLocalEquivalent **a6)
{
  unsigned __int8 *v8;
  llvm::Constant *v9;
  __int128 v10;
  __int128 v11;
  llvm::Value **v12;
  uint64_t v13;
  _QWORD *v14;
  llvm *v15;
  llvm::Constant *v16;
  llvm::Type *v17;
  llvm::Type *v18;
  char *v19;
  llvm::ValueHandleBase *AllOnesValue;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  llvm::ValueHandleBase *v34;
  uint64_t v35;
  llvm::Type *v36;
  uint64_t *NullValue;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  llvm::Value **v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  llvm::Value *v46;
  BOOL v47;
  _QWORD v48[4];
  __int16 v49;
  _OWORD v50[2];
  llvm::ValueAsMetadata *v51;
  uint64_t v52;

  v8 = (unsigned __int8 *)*((_QWORD *)a2 - 8);
  v9 = (llvm::Constant *)*((_QWORD *)a2 - 4);
  v10 = *(_OWORD *)(a1 + 120);
  v11 = *(_OWORD *)(a1 + 104);
  v50[0] = *(_OWORD *)(a1 + 88);
  v50[1] = v11;
  v52 = *((_QWORD *)&v10 + 1);
  v51 = a2;
  v12 = sub_1C4E72984((llvm *)0x16, v8, v9, (uint64_t)v50, (const llvm::DataLayout *)3, a6);
  if (v12)
    return (llvm::Value *)sub_1C577F888(a1, a2, (llvm::Value *)v12);
  v13 = sub_1C57826B8(a1, (unsigned __int8 *)a2);
  if (v13)
    return (llvm::Value *)v13;
  v13 = sub_1C58290B4((_QWORD *)a1, a2);
  if (v13)
    return (llvm::Value *)v13;
  v13 = sub_1C582672C((uint64_t)a2, *(_QWORD *)(a1 + 24));
  if (v13)
    return (llvm::Value *)v13;
  v14 = (_QWORD *)*((_QWORD *)a2 - 8);
  v15 = (llvm *)*((_QWORD *)a2 - 4);
  v16 = *(llvm::Constant **)a2;
  if (llvm::isKnownToBeAPowerOfTwo(v15, *(const llvm::Value **)(a1 + 80), (const llvm::DataLayout *)1, 0, *(_QWORD *)(a1 + 56), a2, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1, v47))
  {
    AllOnesValue = llvm::Constant::getAllOnesValue(v16, v17);
    v22 = *(_QWORD *)(a1 + 24);
    v49 = 257;
    v23 = (*(uint64_t (**)(_QWORD, llvm *, llvm::ValueHandleBase *, _QWORD, _QWORD))(**(_QWORD **)(v22 + 72)
                                                                                             + 16))(*(_QWORD *)(v22 + 72), v15, AllOnesValue, 0, 0);
    if (!v23)
    {
      LOWORD(v51) = 257;
      v46 = llvm::BinaryOperator::Create(13, v15, (uint64_t)AllOnesValue, (uint64_t)v50, 0);
      v23 = sub_1C4773754((uint64_t *)v22, (uint64_t)v46, (uint64_t)v48);
    }
    LOWORD(v51) = 257;
    v24 = (char *)operator new(0x80uLL);
    *((_QWORD *)v24 + 5) = 0;
    v25 = v24 + 40;
    *((_QWORD *)v24 + 6) = 0;
    *((_QWORD *)v24 + 8) = *v14;
    v19 = v24 + 64;
    *((_QWORD *)v24 + 3) = v24 + 64;
    *((_QWORD *)v24 + 7) = v24 + 64;
    *((_QWORD *)v24 + 9) = 0;
    v24[80] = 56;
    v24[81] = 0;
    *((_WORD *)v24 + 41) = 0;
    *((_DWORD *)v24 + 21) = 2;
    *(_OWORD *)(v24 + 88) = 0u;
    *(_OWORD *)(v24 + 104) = 0u;
    *((_DWORD *)v24 + 30) = 0;
    *(_QWORD *)v24 = v14;
    v28 = v14[1];
    v27 = v14 + 1;
    v26 = v28;
    *((_QWORD *)v24 + 1) = v28;
    if (v28)
      *(_QWORD *)(v26 + 16) = v24 + 8;
    *((_QWORD *)v24 + 2) = v27;
    *v27 = v24;
    *((_QWORD *)v24 + 4) = v23;
    if (v23)
    {
      v31 = *(_QWORD *)(v23 + 8);
      v30 = (_QWORD *)(v23 + 8);
      v29 = v31;
      *v25 = v31;
      if (v31)
        *(_QWORD *)(v29 + 16) = v25;
      *((_QWORD *)v24 + 6) = v30;
      *v30 = v24 + 32;
    }
    llvm::Value::setName((uint64_t ***)v24 + 8, (uint64_t)v50);
    return (llvm::Value *)v19;
  }
  if (sub_1C4D89CC8((uint64_t)v50, (llvm::Constant *)v14))
  {
    v40 = *(_QWORD *)(a1 + 24);
    v41 = llvm::ConstantInt::get(v16, 1, 0);
    LOWORD(v51) = 257;
    v42 = (uint64_t *)sub_1C4774B48(v40, 33, (uint64_t)v15, (uint64_t)v41, (uint64_t)v50);
    LOWORD(v51) = 257;
    return llvm::CastInst::CreateZExtOrBitCast(v42, (uint64_t)v16, (uint64_t)v50, 0);
  }
  if (sub_1C4E734E4((uint64_t)v50, v15))
  {
    v43 = *(_QWORD *)(a1 + 24);
    LOWORD(v51) = 257;
    v44 = sub_1C4774B48(v43, 36, (uint64_t)v14, (uint64_t)v15, (uint64_t)v50);
    v45 = *(_QWORD *)(a1 + 24);
    LOWORD(v51) = 257;
    v39 = sub_1C47733F8(v45, (uint64_t)v14, (uint64_t)v15, (uint64_t)v50, 0, 0);
    LOWORD(v51) = 257;
    v38 = v44;
    NullValue = v14;
    return sub_1C4FC8748(v38, NullValue, v39, (uint64_t)v50, 0, 0);
  }
  v48[0] = 0;
  *(_QWORD *)&v50[0] = v48;
  if (sub_1C4B037F8((_QWORD **)v50, (uint64_t)v15))
  {
    v32 = *(_DWORD *)(*(_QWORD *)v48[0] + 8);
    if ((v32 & 0xFE) == 0x12)
      v32 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v48[0] + 16) + 8);
    if (v32 == 269)
    {
      v33 = *(_QWORD *)(a1 + 24);
      v34 = llvm::Constant::getAllOnesValue(v16, v18);
      LOWORD(v51) = 257;
      v35 = sub_1C4774B48(v33, 32, (uint64_t)v14, (uint64_t)v34, (uint64_t)v50);
      NullValue = (uint64_t *)llvm::Constant::getNullValue(v16, v36);
      LOWORD(v51) = 257;
      v38 = v35;
      v39 = (uint64_t)v14;
      return sub_1C4FC8748(v38, NullValue, v39, (uint64_t)v50, 0, 0);
    }
  }
  return 0;
}

llvm::UndefValue **sub_1C5829618(uint64_t a1, llvm::ValueAsMetadata *a2)
{
  llvm::Constant **v4;
  llvm::Constant *v5;
  __int128 v6;
  __int128 v7;
  llvm::Value **v8;
  uint64_t v10;
  _QWORD *v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int v21;
  llvm::ConstantInt **v22;
  uint64_t v23;
  unint64_t v24;
  const llvm::APInt *v25;
  llvm::Value **v26;
  void *v27;
  llvm::APFloatBase *SplatValue;
  unsigned int v30;
  unsigned int v31;
  llvm::APFloatBase *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  llvm::Type *v39;
  unsigned int PrimitiveSizeInBits;
  unsigned int v41;
  unsigned int v42;
  BOOL *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  llvm::ValueAsMetadata **v48;
  llvm::ValueAsMetadata *v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  llvm::Type *v54;
  char v55;
  llvm::UndefValue *AggregateElement;
  _QWORD *v57;
  unsigned int v58;
  unsigned int v59;
  llvm::Type *i;
  llvm::UndefValue *v61;
  llvm::Type *v62;
  llvm::Constant *v63;
  BOOL v64;
  _QWORD *v65;
  unsigned int v66;
  unsigned int v67;
  llvm::ConstantFP *v68;
  unsigned int v69;
  llvm::Constant *Zero;
  llvm::Constant *v71;
  llvm::Constant *v72;
  uint64_t v73;
  _QWORD **v74;
  uint64_t v75;
  llvm::FixedVectorType ***v76;
  uint64_t v77;
  llvm::UndefValue *Impl;
  uint64_t v79;
  _QWORD **v80;
  llvm::ValueAsMetadata *v81;
  char *v82;
  void *v83;
  void *v84;
  char *v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t *v93;
  unsigned __int8 *v94;
  llvm::Instruction *v95;
  BOOL v96[8];
  unsigned int v97;
  uint64_t v98;
  _QWORD *v99;
  void *v100;
  unsigned int v101;
  _WORD v102[4];
  _QWORD *v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  void *v108[2];
  __int128 v109;
  llvm::ValueAsMetadata *v110;
  uint64_t v111;
  _QWORD v112[4];

  v112[2] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::Constant **)*((_QWORD *)a2 - 8);
  v5 = (llvm::Constant *)*((_QWORD *)a2 - 4);
  v6 = *(_OWORD *)(a1 + 120);
  v7 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)v108 = *(_OWORD *)(a1 + 88);
  v109 = v7;
  v111 = *((_QWORD *)&v6 + 1);
  v110 = a2;
  v8 = sub_1C4E63A84(v4, v5, (uint64_t)v108, (const llvm::DataLayout *)3);
  if (v8)
    return sub_1C577F888(a1, a2, (llvm::Value *)v8);
  v10 = sub_1C57826B8(a1, (unsigned __int8 *)a2);
  if (!v10)
  {
    v10 = sub_1C58290B4((_QWORD *)a1, a2);
    if (!v10)
    {
      v12 = (_QWORD *)*((_QWORD *)a2 - 8);
      v13 = (_QWORD *)*((_QWORD *)a2 - 4);
      v14 = *((unsigned __int8 *)v13 + 16);
      if (v13 && v14 == 16)
      {
        v16 = v13 + 3;
        v15 = v13[3];
        v17 = *((_DWORD *)v13 + 8);
        v18 = v17 - 1;
        if (v17 >= 0x41)
          v19 = (_QWORD *)(v15 + 8 * (v18 >> 6));
        else
          v19 = v13 + 3;
        if (((*v19 >> v18) & 1) != 0)
        {
LABEL_13:
          v20 = *((unsigned int *)v16 + 2);
          v21 = v20 - 1;
          if (v20 > 0x40)
          {
            if (((*(_QWORD *)(v15 + 8 * (v21 >> 6)) >> v21) & 1) == 0
              || llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v16) != v21)
            {
              v22 = *(llvm::ConstantInt ***)a2;
              v101 = v20;
              v100 = (void *)operator new[]();
              memcpy(v100, (const void *)*v16, ((unint64_t)(v20 + 63) >> 3) & 0x3FFFFFF8);
              llvm::APInt::flipAllBitsSlowCase((uint64_t)&v100);
              goto LABEL_18;
            }
          }
          else if (1 << v21 != v15)
          {
            v22 = *(llvm::ConstantInt ***)a2;
            v101 = *((_DWORD *)v16 + 2);
            v23 = ~v15;
            v24 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v20;
            if (!(_DWORD)v20)
              v24 = 0;
            v100 = (void *)(v24 & v23);
LABEL_18:
            llvm::APInt::operator++((uint64_t)&v100);
            LODWORD(v108[1]) = v101;
            v108[0] = v100;
            v101 = 0;
            v26 = llvm::ConstantInt::get(v22, (llvm::Type *)v108, v25);
            v10 = sub_1C577E2C8(a1, (uint64_t)a2, 1u, (uint64_t)v26);
            if (LODWORD(v108[1]) >= 0x41 && v108[0])
              MEMORY[0x1CAA32F9C](v108[0], 0x1000C8000313F17);
            if (v101 < 0x41)
              return (llvm::UndefValue **)v10;
            v27 = v100;
            if (!v100)
              return (llvm::UndefValue **)v10;
LABEL_114:
            MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
            return (llvm::UndefValue **)v10;
          }
LABEL_36:
          v98 = 0;
          v99 = 0;
          v108[1] = &v99;
          *(_QWORD *)&v109 = &v98;
          v33 = *((unsigned __int8 *)a2 + 16);
          if (v33 == 51)
          {
            v34 = *((_QWORD *)a2 - 8);
            v35 = *(_QWORD *)(v34 + 8);
            if (v35)
            {
              if (!*(_QWORD *)(v35 + 8))
              {
                if (sub_1C582A988((uint64_t)v108, v34))
                {
                  v36 = *((_QWORD *)a2 - 4);
                  if (v36)
                  {
LABEL_116:
                    v98 = v36;
                    v93 = *(uint64_t **)(a1 + 24);
                    LOWORD(v110) = 257;
                    v94 = sub_1C622AECC(v93, v99, v36, (uint64_t)v108);
                    WORD4(v105) = 257;
                    return (llvm::UndefValue **)llvm::BinaryOperator::CreateNSWNeg((llvm::ConstantFP **)v94, (llvm::Value *)v102, 0, v95);
                  }
                }
              }
            }
          }
          else if (v33 == 5 && *((_WORD *)a2 + 9) == 23)
          {
            v37 = *((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
            v38 = *(_QWORD *)(v37 + 8);
            if (v38)
            {
              if (!*(_QWORD *)(v38 + 8))
              {
                if (sub_1C582A988((uint64_t)v108, v37))
                {
                  v36 = ((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
                  if (v36)
                    goto LABEL_116;
                }
              }
            }
          }
          v39 = *(llvm::Type **)a2;
          if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
            v39 = (llvm::Type *)**((_QWORD **)v39 + 2);
          PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v39);
          v41 = PrimitiveSizeInBits;
          v97 = PrimitiveSizeInBits;
          if (PrimitiveSizeInBits > 0x40)
          {
            v43 = v96;
            llvm::APInt::initSlowCase((llvm::APInt *)v96, 0, 0);
            v42 = v41 - 1;
            if (v97 >= 0x41)
              v43 = (BOOL *)(*(_QWORD *)v96 + 8 * (v42 >> 6));
          }
          else
          {
            *(_QWORD *)v96 = 0;
            LOBYTE(v42) = PrimitiveSizeInBits - 1;
            v43 = v96;
          }
          *(_QWORD *)v43 |= 1 << v42;
          if (!llvm::MaskedValueIsZero((llvm *)v13, (const llvm::Value *)v96, *(const llvm::APInt **)(a1 + 80), 0, *(const llvm::DataLayout **)(a1 + 56), a2, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1, v96[0])|| !llvm::MaskedValueIsZero((llvm *)v12, (const llvm::Value *)v96, *(const llvm::APInt **)(a1 + 80), 0, *(const llvm::DataLayout **)(a1 + 56), a2, *(const llvm::Instruction **)(a1 + 72), (const llvm::DominatorTree *)1, v96[0]))
          {
            v52 = *((unsigned __int8 *)v13 + 16);
            if (v52 == 15 || v52 == 10)
            {
              v53 = *(unsigned int *)(*v13 + 32);
              if ((_DWORD)v53)
              {
                v54 = 0;
                v55 = 0;
                while (1)
                {
                  AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)v13, v54);
                  if (!AggregateElement)
                    break;
                  if (*((_BYTE *)AggregateElement + 16) == 16)
                  {
                    v57 = (_QWORD *)((char *)AggregateElement + 24);
                    v58 = *((_DWORD *)AggregateElement + 8);
                    v59 = v58 - 1;
                    if (v58 >= 0x41)
                      v57 = (_QWORD *)(*v57 + 8 * (v59 >> 6));
                    v55 |= *v57 >> v59;
                  }
                  v54 = (llvm::Type *)((_DWORD)v54 + 1);
                  if ((_DWORD)v53 == (_DWORD)v54)
                  {
                    if ((v55 & 1) != 0)
                    {
                      v108[0] = &v109;
                      v108[1] = (void *)0x1000000000;
                      sub_1C4848C0C((unsigned int *)v108, v53, 0);
                      for (i = 0; i != (llvm::Type *)v53; i = (llvm::Type *)((char *)i + 1))
                      {
                        v61 = llvm::Constant::getAggregateElement((llvm::Constant *)v13, i);
                        *((_QWORD *)v108[0] + (_QWORD)i) = v61;
                        v63 = (llvm::Constant *)*((_QWORD *)v108[0] + (_QWORD)i);
                        if (v63)
                          v64 = *((_BYTE *)v63 + 16) == 16;
                        else
                          v64 = 0;
                        if (v64)
                        {
                          v65 = (_QWORD *)((char *)v63 + 24);
                          v66 = *((_DWORD *)v63 + 8);
                          v67 = v66 - 1;
                          if (v66 >= 0x41)
                            v65 = (_QWORD *)(*v65 + 8 * (v67 >> 6));
                          if (((*v65 >> v67) & 1) != 0)
                          {
                            v68 = *(llvm::ConstantFP **)v63;
                            if ((*(_DWORD *)(*(_QWORD *)v63 + 8) & 0xFE) == 0x12)
                              v69 = *(unsigned __int8 *)(**((_QWORD **)v68 + 2) + 8);
                            else
                              v69 = *(_DWORD *)(*(_QWORD *)v63 + 8);
                            if (v69 <= 6)
                              Zero = llvm::ConstantFP::getZero(v68, (llvm::Type *)1);
                            else
                              Zero = (llvm::Constant *)llvm::Constant::getNullValue(v68, v62);
                            v72 = Zero;
                            v73 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)0xF, Zero, v63, v71);
                            if (!v73)
                            {
                              v74 = *(_QWORD ***)v72;
                              if (*(_QWORD *)v72)
                              {
                                v112[0] = v72;
                                v112[1] = v63;
                                v75 = **v74 + 1512;
                                v102[0] = 15;
                                v102[1] = 0;
                                v103 = v112;
                                v104 = 2;
                                v105 = 0u;
                                v106 = 0u;
                                v107 = 0;
                                v73 = sub_1C537D4FC(v75, (uint64_t)v74, (unsigned __int8 *)v102);
                              }
                              else
                              {
                                v73 = 0;
                              }
                            }
                            *((_QWORD *)v108[0] + (_QWORD)i) = v73;
                          }
                        }
                      }
                      v76 = (llvm::FixedVectorType ***)v108[0];
                      v77 = LODWORD(v108[1]);
                      Impl = llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v108[0], (llvm::Type *)LODWORD(v108[1]));
                      v79 = (uint64_t)Impl;
                      if (!Impl)
                      {
                        llvm::FixedVectorType::get(**v76, (llvm::Type *)v77);
                        v79 = sub_1C537B3A4(**v80 + 1288, (uint64_t)v80, v76, v77);
                      }
                      if ((_QWORD *)v79 == v13)
                        v10 = 0;
                      else
                        v10 = sub_1C577E2C8(a1, (uint64_t)a2, 1u, v79);
                      if (v108[0] != &v109)
                        free(v108[0]);
                      if ((_QWORD *)v79 != v13)
                        goto LABEL_112;
                    }
                    break;
                  }
                }
              }
            }
            v10 = 0;
LABEL_112:
            if (v97 < 0x41)
              return (llvm::UndefValue **)v10;
            v27 = *(void **)v96;
            if (!*(_QWORD *)v96)
              return (llvm::UndefValue **)v10;
            goto LABEL_114;
          }
          if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
          {
            v83 = 0;
            v82 = &byte_1C871356D;
            goto LABEL_100;
          }
          v44 = ***(_QWORD ***)a2;
          v45 = *(_QWORD *)(v44 + 152);
          v46 = *(unsigned int *)(v44 + 168);
          if ((_DWORD)v46)
          {
            LODWORD(v47) = (v46 - 1) & ((a2 >> 4) ^ (a2 >> 9));
            v48 = (llvm::ValueAsMetadata **)(v45 + 16 * v47);
            v49 = *v48;
            if (*v48 == a2)
            {
LABEL_99:
              v81 = v48[1];
              v84 = *(void **)v81;
              v82 = (char *)v81 + 16;
              v83 = v84;
LABEL_100:
              LOWORD(v110) = 261;
              v108[0] = v82;
              v108[1] = v83;
              v85 = (char *)operator new(0x80uLL);
              *((_QWORD *)v85 + 5) = 0;
              v86 = v85 + 40;
              *((_QWORD *)v85 + 6) = 0;
              *((_QWORD *)v85 + 8) = *v12;
              v10 = (uint64_t)(v85 + 64);
              *((_QWORD *)v85 + 3) = v85 + 64;
              *((_QWORD *)v85 + 7) = v85 + 64;
              *((_QWORD *)v85 + 9) = 0;
              v85[80] = 50;
              v85[81] = 0;
              *((_WORD *)v85 + 41) = 0;
              *((_DWORD *)v85 + 21) = 2;
              *(_OWORD *)(v85 + 88) = 0u;
              *(_OWORD *)(v85 + 104) = 0u;
              *((_DWORD *)v85 + 30) = 0;
              *(_QWORD *)v85 = v12;
              v89 = v12[1];
              v88 = v12 + 1;
              v87 = v89;
              *((_QWORD *)v85 + 1) = v89;
              if (v89)
                *(_QWORD *)(v87 + 16) = v85 + 8;
              *((_QWORD *)v85 + 2) = v88;
              *v88 = v85;
              *((_QWORD *)v85 + 4) = v13;
              if (v13)
              {
                v92 = v13[1];
                v91 = v13 + 1;
                v90 = v92;
                *v86 = v92;
                if (v92)
                  *(_QWORD *)(v90 + 16) = v86;
                *((_QWORD *)v85 + 6) = v91;
                *v91 = v85 + 32;
              }
              llvm::Value::setName((uint64_t ***)v85 + 8, (uint64_t)v108);
              goto LABEL_112;
            }
            v50 = 1;
            while (v49 != (llvm::ValueAsMetadata *)-4096)
            {
              v51 = v47 + v50++;
              v47 = v51 & (v46 - 1);
              v49 = *(llvm::ValueAsMetadata **)(v45 + 16 * v47);
              if (v49 == a2)
              {
                v48 = (llvm::ValueAsMetadata **)(v45 + 16 * v47);
                goto LABEL_99;
              }
            }
          }
          v48 = (llvm::ValueAsMetadata **)(v45 + 16 * v46);
          goto LABEL_99;
        }
        if ((*(_DWORD *)(*v13 + 8) & 0xFE) != 0x12)
          goto LABEL_36;
      }
      else if (v14 > 0x14 || (*(_DWORD *)(*v13 + 8) & 0xFE) != 18)
      {
        goto LABEL_36;
      }
      SplatValue = llvm::Constant::getSplatValue(*((llvm::Constant **)a2 - 4), 0);
      if (!SplatValue || *((_BYTE *)SplatValue + 16) != 16)
        goto LABEL_36;
      v16 = (_QWORD *)((char *)SplatValue + 24);
      v15 = *((_QWORD *)SplatValue + 3);
      v30 = *((_DWORD *)SplatValue + 8);
      v31 = v30 - 1;
      v32 = v30 >= 0x41 ? (llvm::APFloatBase *)(v15 + 8 * (v31 >> 6)) : (llvm::APFloatBase *)((char *)SplatValue + 24);
      if (((*(_QWORD *)v32 >> v31) & 1) == 0)
        goto LABEL_36;
      goto LABEL_13;
    }
  }
  return (llvm::UndefValue **)v10;
}

char *sub_1C5829E54(uint64_t a1, unsigned __int8 *a2)
{
  llvm::PoisonValue **v4;
  llvm::PoisonValue **v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  char v9;
  llvm::Value *v10;
  char *result;
  _OWORD v12[2];
  unsigned __int8 *v13;
  uint64_t v14;

  v4 = (llvm::PoisonValue **)*((_QWORD *)a2 - 8);
  v5 = (llvm::PoisonValue **)*((_QWORD *)a2 - 4);
  v6 = (unint64_t)a2[17] >> 1;
  v7 = *(_OWORD *)(a1 + 120);
  v8 = *(_OWORD *)(a1 + 104);
  v12[0] = *(_OWORD *)(a1 + 88);
  v12[1] = v8;
  v14 = *((_QWORD *)&v7 + 1);
  v13 = a2;
  if ((_DWORD)v6 == 127)
    v9 = -1;
  else
    v9 = v6;
  v10 = sub_1C4E6D4DC(v4, v5, v9, (llvm::Constant **)v12, 0, (llvm::DSOLocalEquivalent **)1);
  if (v10)
    return (char *)sub_1C577F888(a1, (llvm::ValueAsMetadata *)a2, v10);
  result = (char *)sub_1C57826B8(a1, a2);
  if (!result)
    return sub_1C578171C(a1, (uint64_t)a2);
  return result;
}

uint64_t sub_1C5829F08(_QWORD **a1, uint64_t a2)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  if (*(_BYTE *)(a2 + 16) != 85)
    return 0;
  v4 = *(_DWORD *)(a2 + 20);
  v5 = (v4 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v4 & 0x7FFFFFF));
  v6 = *v5;
  if (!v6)
    return 0;
  v7 = (uint64_t)(a1 + 1);
  **a1 = v6;
  v8 = *(_DWORD *)(a2 + 20);
  v9 = (v8 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v8 & 0x7FFFFFF);
  if (!sub_1C4D89CC8(v7, *(llvm::Constant **)(v9 + 32)))
    return 0;
  v10 = *(_DWORD *)(a2 + 20);
  if ((v10 & 0x40000000) != 0)
    v11 = *(_QWORD *)(a2 - 8);
  else
    v11 = a2 - 32 * (v10 & 0x7FFFFFF);
  return sub_1C4D9ED34((uint64_t)a1 + 9, *(llvm::Constant **)(v11 + 64));
}

uint64_t sub_1C5829FB4(_QWORD **a1, uint64_t a2)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  if (*(_BYTE *)(a2 + 16) != 85)
    return 0;
  v4 = *(_DWORD *)(a2 + 20);
  v5 = (v4 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v4 & 0x7FFFFFF));
  v6 = *v5;
  if (!v6)
    return 0;
  v7 = (uint64_t)(a1 + 1);
  **a1 = v6;
  v8 = *(_DWORD *)(a2 + 20);
  v9 = (v8 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v8 & 0x7FFFFFF);
  if (!sub_1C4D9ED34(v7, *(llvm::Constant **)(v9 + 32)))
    return 0;
  v10 = *(_DWORD *)(a2 + 20);
  if ((v10 & 0x40000000) != 0)
    v11 = *(_QWORD *)(a2 - 8);
  else
    v11 = a2 - 32 * (v10 & 0x7FFFFFF);
  return sub_1C4D89CC8((uint64_t)a1 + 9, *(llvm::Constant **)(v11 + 64));
}

uint64_t sub_1C582A060@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 != 46)
  {
    if (v5 == 5)
    {
      if (*(_WORD *)(a2 + 18) != 18)
        goto LABEL_20;
      v12 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
      v13 = -v12;
      v14 = *(_QWORD *)(a2 - 32 * v12);
      v15 = *(_QWORD *)(v14 + 8);
      if (v15)
      {
        if (!*(_QWORD *)(v15 + 8))
        {
          v16 = sub_1C582A1B0(a1, v14);
          v13 = -(uint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
          if (v16)
          {
            v17 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
            if (v17)
              goto LABEL_19;
          }
        }
      }
      v18 = *(_QWORD *)(a2 + 32 * v13 + 32);
      a3 = *(_QWORD *)(v18 + 8);
      if (a3)
      {
        if (!*(_QWORD *)(a3 + 8))
        {
          if (sub_1C582A1B0(a1, v18))
          {
            v17 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
            if (v17)
            {
LABEL_19:
              **(_QWORD **)(a1 + 24) = v17;
              LOBYTE(a3) = 1;
              return (v5 == 5) & a3;
            }
          }
        }
LABEL_20:
        LOBYTE(a3) = 0;
      }
    }
    return (v5 == 5) & a3;
  }
  v6 = *(_QWORD *)(a2 - 64);
  v7 = *(_QWORD *)(v6 + 8);
  if (v7)
  {
    if (!*(_QWORD *)(v7 + 8))
    {
      if (sub_1C582A1B0(a1, v6))
      {
        v8 = *(_QWORD *)(a2 - 32);
        if (v8)
        {
LABEL_25:
          **(_QWORD **)(a1 + 24) = v8;
          return 1;
        }
      }
    }
  }
  v9 = *(_QWORD *)(a2 - 32);
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10 || *(_QWORD *)(v10 + 8))
    return 0;
  result = sub_1C582A1B0(a1, v9);
  if ((_DWORD)result)
  {
    v8 = *(_QWORD *)(a2 - 64);
    if (!v8)
      return 0;
    goto LABEL_25;
  }
  return result;
}

uint64_t sub_1C582A1B0(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  const llvm::APInt **v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  if (*(_BYTE *)(a2 + 16) != 85)
    return 0;
  v4 = *(_DWORD *)(a2 + 20);
  v5 = (v4 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v4 & 0x7FFFFFF));
  v6 = *v5;
  if (!v6)
    return 0;
  v7 = (const llvm::APInt **)(a1 + 8);
  **(_QWORD **)a1 = v6;
  v8 = *(_DWORD *)(a2 + 20);
  v9 = (v8 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v8 & 0x7FFFFFF);
  if (!sub_1C4E7BE28(v7, *(unsigned __int8 **)(v9 + 32)))
    return 0;
  v10 = *(_DWORD *)(a2 + 20);
  if ((v10 & 0x40000000) != 0)
    v11 = *(_QWORD *)(a2 - 8);
  else
    v11 = a2 - 32 * (v10 & 0x7FFFFFF);
  return sub_1C4E7BE28((const llvm::APInt **)(a1 + 16), *(unsigned __int8 **)(v11 + 64));
}

BOOL sub_1C582A25C(llvm::Constant *this)
{
  llvm::Constant *v1;
  unsigned int v2;
  uint64_t v4;
  int v7;
  llvm::Type *v8;
  char v9;
  llvm::UndefValue *AggregateElement;
  int v11;

  v1 = this;
  v2 = *((unsigned __int8 *)this + 16);
  if (this && v2 == 16)
    return sub_1C57EDD40((llvm::Constant *)((char *)this + 24));
  v4 = *(_QWORD *)this;
  if (v2 <= 0x14 && v4 != 0 && (*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 18)
  {
    this = llvm::Constant::getSplatValue(this, 0);
    if (this && *((_BYTE *)this + 16) == 16)
      return sub_1C57EDD40((llvm::Constant *)((char *)this + 24));
    if (*(_BYTE *)(v4 + 8) == 18)
    {
      v7 = *(_DWORD *)(v4 + 32);
      if (v7)
      {
        v8 = 0;
        v9 = 0;
        while (1)
        {
          AggregateElement = llvm::Constant::getAggregateElement(v1, v8);
          if (!AggregateElement)
            break;
          v11 = *((unsigned __int8 *)AggregateElement + 16);
          if ((v11 - 11) >= 2)
          {
            if (v11 != 16 || !sub_1C57EDD40((llvm::UndefValue *)((char *)AggregateElement + 24)))
              break;
            v9 = 1;
          }
          v8 = (llvm::Type *)((_DWORD)v8 + 1);
          if (v7 == (_DWORD)v8)
            return v9 & 1;
        }
      }
    }
  }
  v9 = 0;
  return v9 & 1;
}

BOOL sub_1C582A34C@<W0>(_QWORD **a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 57)
  {
    v6 = *(_QWORD *)(a2 - 64);
    v7 = *(unsigned __int8 *)(v6 + 16);
    if (v7 == 5)
    {
      if (*(_WORD *)(v6 + 18) != 27)
        return 0;
      v12 = *(_QWORD *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF));
      if (!v12)
        return 0;
      **a1 = v12;
      if (!sub_1C57BE190((llvm::APInt *)(a1 + 1), *(llvm::Constant **)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) + 32)))return 0;
    }
    else
    {
      if (v7 != 55)
        return 0;
      v8 = *(_QWORD *)(v6 - 64);
      if (!v8)
        return 0;
      **a1 = v8;
      if (!sub_1C57E8F04((llvm::APInt *)(a1 + 1), *(llvm::Constant **)(v6 - 32)))
        return 0;
    }
    return (sub_1C4D89CC8((uint64_t)(a1 + 3), *(llvm::Constant **)(a2 - 32)) & 1) != 0;
  }
  if (v5 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 29)
      goto LABEL_25;
    v9 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v10 = *(unsigned __int8 *)(v9 + 16);
    if (v10 == 5)
    {
      if (*(_WORD *)(v9 + 18) != 27)
        goto LABEL_25;
      v14 = *(_QWORD *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF));
      if (!v14)
        goto LABEL_25;
      **a1 = v14;
      if (!sub_1C57BE190((llvm::APInt *)(a1 + 1), *(llvm::Constant **)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) + 32)))goto LABEL_25;
    }
    else
    {
      if (v10 != 55)
        goto LABEL_25;
      v11 = *(_QWORD *)(v9 - 64);
      if (!v11)
        goto LABEL_25;
      **a1 = v11;
      if (!sub_1C57E8F04((llvm::APInt *)(a1 + 1), *(llvm::Constant **)(v9 - 32)))
        goto LABEL_25;
    }
    if ((sub_1C4D89E3C((uint64_t)(a1 + 3), *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32)) & 1) == 0)
    {
LABEL_25:
      a3 = 0;
      return (v5 == 5) & a3;
    }
    a3 = 1;
  }
  return (v5 == 5) & a3;
}

uint64_t sub_1C582A4F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a2 + 8);
  if (!v2)
    return 0;
  if (*(_QWORD *)(v2 + 8))
    return 0;
  if (*(_BYTE *)(a2 + 16) != 84)
    return 0;
  v3 = *(_QWORD *)(a2 - 32);
  if (!v3)
    return 0;
  if (*(_BYTE *)(v3 + 16))
    return 0;
  if (*(_QWORD *)(v3 + 24) != *(_QWORD *)(a2 + 72))
    return 0;
  if (*(_DWORD *)(v3 + 36) != *(_DWORD *)a1)
    return 0;
  v4 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * *(unsigned int *)(a1 + 8));
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5 || *(_QWORD *)(v5 + 8))
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 16);
  if (v7 == 5)
  {
    if (*(_WORD *)(v4 + 18) == 18)
    {
      v9 = *(_QWORD *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF));
      if (v9)
      {
        **(_QWORD **)(a1 + 16) = v9;
        if ((sub_1C55CDE08((const llvm::APInt **)(a1 + 24), *(llvm::Constant **)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF) + 32)) & 1) != 0)return 1;
      }
    }
  }
  else if (v7 == 46)
  {
    v8 = *(_QWORD *)(v4 - 64);
    if (v8)
    {
      **(_QWORD **)(a1 + 16) = v8;
      if ((sub_1C4E7BE28((const llvm::APInt **)(a1 + 24), *(unsigned __int8 **)(v4 - 32)) & 1) != 0)
        return 1;
    }
  }
  return 0;
}

BOOL sub_1C582A600(uint64_t a1)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v6;

  if (*(_BYTE *)(a1 + 16) != 85)
    return 0;
  v2 = *(_DWORD *)(a1 + 20);
  v3 = (v2 & 0x40000000) != 0 ? *(_QWORD *)(a1 - 8) : a1 - 32 * (v2 & 0x7FFFFFF);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 32) + 16);
  if (v4 > 0x14 || v4 == 5)
    return 0;
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 64) + 16);
  return v6 < 0x15 && v6 != 5;
}

llvm::APFloatBase *sub_1C582A658(_QWORD **a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  BOOL v5;
  int v6;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  int v11;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 < 0x1C)
  {
    if (v2 != 5)
      return 0;
    v8 = *(unsigned __int16 *)(a2 + 18);
    HIDWORD(v10) = v8 - 13;
    LODWORD(v10) = v8 - 13;
    v9 = v10 >> 1;
    v5 = v9 > 6;
    v11 = (1 << v9) & 0x47;
    if (v5 || v11 == 0)
      return 0;
  }
  else
  {
    HIDWORD(v4) = v2 - 41;
    LODWORD(v4) = v2 - 41;
    v3 = v4 >> 1;
    v5 = v3 > 6;
    v6 = (1 << v3) & 0x47;
    if (v5 || v6 == 0)
      return 0;
    v8 = v2 - 28;
  }
  if (v8 != 17 || (*(_BYTE *)(a2 + 17) & 2) == 0)
    return 0;
  v13 = *(_DWORD *)(a2 + 20);
  v14 = (v13 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v13 & 0x7FFFFFF));
  v15 = *v14;
  if (!v15)
    return 0;
  v17 = *a1;
  v16 = (uint64_t)(a1 + 1);
  *v17 = v15;
  v18 = *(_DWORD *)(a2 + 20);
  if ((v18 & 0x40000000) != 0)
    v19 = *(_QWORD *)(a2 - 8);
  else
    v19 = a2 - 32 * (v18 & 0x7FFFFFF);
  return sub_1C4D89F84(v16, *(unsigned __int8 **)(v19 + 32));
}

llvm::APFloatBase *sub_1C582A720(_QWORD **a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  BOOL v5;
  int v6;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  int v11;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 < 0x1C)
  {
    if (v2 != 5)
      return 0;
    v8 = *(unsigned __int16 *)(a2 + 18);
    HIDWORD(v10) = v8 - 13;
    LODWORD(v10) = v8 - 13;
    v9 = v10 >> 1;
    v5 = v9 > 6;
    v11 = (1 << v9) & 0x47;
    if (v5 || v11 == 0)
      return 0;
  }
  else
  {
    HIDWORD(v4) = v2 - 41;
    LODWORD(v4) = v2 - 41;
    v3 = v4 >> 1;
    v5 = v3 > 6;
    v6 = (1 << v3) & 0x47;
    if (v5 || v6 == 0)
      return 0;
    v8 = v2 - 28;
  }
  if (v8 != 25 || (*(_BYTE *)(a2 + 17) & 4) == 0)
    return 0;
  v13 = *(_DWORD *)(a2 + 20);
  v14 = (v13 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v13 & 0x7FFFFFF));
  v15 = *v14;
  if (!v15)
    return 0;
  v17 = *a1;
  v16 = (uint64_t)(a1 + 1);
  *v17 = v15;
  v18 = *(_DWORD *)(a2 + 20);
  if ((v18 & 0x40000000) != 0)
    v19 = *(_QWORD *)(a2 - 8);
  else
    v19 = a2 - 32 * (v18 & 0x7FFFFFF);
  return sub_1C4D89F84(v16, *(unsigned __int8 **)(v19 + 32));
}

uint64_t sub_1C582A7E8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  BOOL v6;
  int v7;
  unsigned int v9;
  unint64_t v10;
  int v11;
  int v13;
  _QWORD *v14;
  int v15;

  LODWORD(v3) = *(unsigned __int8 *)(a3 + 16);
  if (v3 < 0x1C)
  {
    if ((_DWORD)v3 == 5)
    {
      LODWORD(v3) = *(unsigned __int16 *)(a3 + 18);
      HIDWORD(v10) = v3 - 13;
      LODWORD(v10) = v3 - 13;
      v9 = v10 >> 1;
      v6 = v9 > 6;
      v11 = (1 << v9) & 0x47;
      if (!v6 && v11 != 0)
        goto LABEL_12;
    }
LABEL_16:
    v15 = 0;
    return v15 & v3;
  }
  HIDWORD(v5) = v3 - 41;
  LODWORD(v5) = v3 - 41;
  v4 = v5 >> 1;
  v6 = v4 > 6;
  v7 = (1 << v4) & 0x47;
  if (v6 || v7 == 0)
    goto LABEL_16;
  LODWORD(v3) = v3 - 28;
LABEL_12:
  if ((_DWORD)v3 == 17
    && (*(_BYTE *)(a3 + 17) & 2) != 0
    && ((v13 = *(_DWORD *)(a3 + 20), (v13 & 0x40000000) != 0)
      ? (v14 = *(_QWORD **)(a3 - 8))
      : (v14 = (_QWORD *)(a3 - 32 * (v13 & 0x7FFFFFF))),
        *v14 == a1))
  {
    v3 = v14[4];
    if (v3)
    {
      *a2 = v3;
      v15 = 1;
      LODWORD(v3) = 1;
      return v15 & v3;
    }
  }
  else
  {
    LODWORD(v3) = 0;
  }
  v15 = 1;
  return v15 & v3;
}

BOOL sub_1C582A8B4(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  BOOL v5;
  int v6;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  int v11;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 < 0x1C)
  {
    if (v2 != 5)
      return 0;
    v8 = *(unsigned __int16 *)(a2 + 18);
    HIDWORD(v10) = v8 - 13;
    LODWORD(v10) = v8 - 13;
    v9 = v10 >> 1;
    v5 = v9 > 6;
    v11 = (1 << v9) & 0x47;
    if (v5 || v11 == 0)
      return 0;
  }
  else
  {
    HIDWORD(v4) = v2 - 41;
    LODWORD(v4) = v2 - 41;
    v3 = v4 >> 1;
    v5 = v3 > 6;
    v6 = (1 << v3) & 0x47;
    if (v5 || v6 == 0)
      return 0;
    v8 = v2 - 28;
  }
  if (v8 != 17 || (*(_BYTE *)(a2 + 17) & 2) == 0)
    return 0;
  v13 = *(_DWORD *)(a2 + 20);
  v14 = (v13 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v13 & 0x7FFFFFF));
  v15 = *v14;
  if (!v15)
    return 0;
  **(_QWORD **)a1 = v15;
  v16 = *(_DWORD *)(a2 + 20);
  if ((v16 & 0x40000000) != 0)
    v17 = *(_QWORD *)(a2 - 8);
  else
    v17 = a2 - 32 * (v16 & 0x7FFFFFF);
  return *(_QWORD *)(a1 + 8) == *(_QWORD *)(v17 + 32);
}

uint64_t sub_1C582A988(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  BOOL v7;
  int v8;
  unsigned int v10;
  unint64_t v11;
  int v12;
  int v14;
  int v16;
  unsigned __int8 **v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  char v21;

  LODWORD(v4) = *(unsigned __int8 *)(a2 + 16);
  if (v4 < 0x1C)
  {
    if ((_DWORD)v4 == 5)
    {
      LODWORD(v4) = *(unsigned __int16 *)(a2 + 18);
      HIDWORD(v11) = v4 - 13;
      LODWORD(v11) = v4 - 13;
      v10 = v11 >> 1;
      v7 = v10 > 6;
      v12 = (1 << v10) & 0x47;
      if (!v7 && v12 != 0)
        goto LABEL_12;
    }
LABEL_16:
    v14 = 0;
    return v14 & v4;
  }
  HIDWORD(v6) = v4 - 41;
  LODWORD(v6) = v4 - 41;
  v5 = v6 >> 1;
  v7 = v5 > 6;
  v8 = (1 << v5) & 0x47;
  if (v7 || v8 == 0)
    goto LABEL_16;
  LODWORD(v4) = v4 - 28;
LABEL_12:
  if ((_DWORD)v4 == 15
    && (*(_BYTE *)(a2 + 17) & 4) != 0
    && ((v16 = *(_DWORD *)(a2 + 20), (v16 & 0x40000000) != 0)
      ? (v17 = *(unsigned __int8 ***)(a2 - 8))
      : (v17 = (unsigned __int8 **)(a2 - 32 * (v16 & 0x7FFFFFF))),
        (v18 = *v17) != 0
     && v18[16] <= 0x14u
     && ((llvm::Constant::isNullValue((llvm::Constant *)v18) & 1) != 0
      || (sub_1C4E71060((uint64_t)&v21, (llvm::Constant *)v18) & 1) != 0)))
  {
    v19 = *(_DWORD *)(a2 + 20);
    if ((v19 & 0x40000000) != 0)
      v20 = *(_QWORD *)(a2 - 8);
    else
      v20 = a2 - 32 * (v19 & 0x7FFFFFF);
    v4 = *(_QWORD *)(v20 + 32);
    if (v4)
    {
      **(_QWORD **)(a1 + 8) = v4;
      v14 = 1;
      LODWORD(v4) = 1;
      return v14 & v4;
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  v14 = 1;
  return v14 & v4;
}

BOOL sub_1C582AAC0(uint64_t a1, uint64_t a2)
{
  return sub_1C4E75A6C(a1, a2)
      && a2
      && *(_BYTE *)(a2 + 16) == 84
      && (sub_1C4D89CC8(a1 + 28, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * *(unsigned int *)(a1 + 24))) & 1) != 0;
}

uint64_t llvm::Negator::Negator(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;

  *(_QWORD *)result = result + 16;
  *(_QWORD *)(result + 8) = 0x1000000000;
  *(_QWORD *)(result + 144) = result + 160;
  *(_QWORD *)(result + 152) = 0x200000000;
  *(_QWORD *)(result + 208) = a2;
  *(_QWORD *)(result + 216) = result + 264;
  *(_QWORD *)(result + 224) = result + 280;
  *(_QWORD *)(result + 232) = 0;
  *(_DWORD *)(result + 240) = 0;
  *(_WORD *)(result + 244) = 512;
  *(_BYTE *)(result + 246) = 7;
  *(_QWORD *)(result + 192) = 0;
  *(_QWORD *)(result + 200) = 0;
  *(_QWORD *)(result + 248) = 0;
  *(_QWORD *)(result + 256) = 0;
  *(_QWORD *)(result + 264) = &unk_1E8135C10;
  *(_QWORD *)(result + 272) = a3;
  *(_QWORD *)(result + 280) = &off_1E8167568;
  *(_QWORD *)(result + 288) = &off_1E817D3D0;
  *(_QWORD *)(result + 296) = result;
  *(_QWORD *)(result + 312) = result + 288;
  *(_QWORD *)(result + 320) = a3;
  *(_QWORD *)(result + 328) = a4;
  *(_QWORD *)(result + 336) = a5;
  *(_BYTE *)(result + 344) = a6;
  v6 = 360;
  *(_QWORD *)(result + 352) = 1;
  do
  {
    *(_QWORD *)(result + v6) = -4096;
    v6 += 16;
  }
  while (v6 != 424);
  return result;
}

uint64_t llvm::Negator::getSortedOperandsOfBinOp(llvm::Negator *this, llvm::Instruction *a2)
{
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  char *v9;
  unsigned int v10;
  uint64_t *v13;

  v3 = *((_DWORD *)a2 + 5);
  if ((v3 & 0x40000000) != 0)
  {
    v13 = (uint64_t *)*((_QWORD *)a2 - 1);
    v5 = *v13;
    v6 = v13[4];
    if (!llvm::Instruction::isCommutative(a2))
      return v5;
  }
  else
  {
    v4 = (uint64_t *)((char *)a2 - 32 * (v3 & 0x7FFFFFF));
    v5 = *v4;
    v6 = v4[4];
    if ((llvm::Instruction::isCommutative(a2) & 1) == 0)
      return v5;
  }
  v7 = sub_1C577E1A0(v5);
  v8 = *((_DWORD *)a2 + 5);
  if ((v8 & 0x40000000) != 0)
    v9 = (char *)*((_QWORD *)a2 - 1);
  else
    v9 = (char *)a2 - 32 * (v8 & 0x7FFFFFF);
  v10 = sub_1C577E1A0(*((_QWORD *)v9 + 4));
  if (v7 >= v10)
    return v5;
  else
    return v6;
}

unsigned __int8 *llvm::Negator::visitImpl(llvm::Negator *this, llvm::Value *a2, unsigned int a3)
{
  unsigned __int8 *v4;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 **v9;
  llvm::Type *v10;
  llvm::ConstantFP *v11;
  unsigned int v12;
  llvm::Constant *Zero;
  llvm::Constant *v14;
  llvm::APInt *v15;
  _QWORD **v16;
  uint64_t v17;
  uint64_t v18;
  llvm::Type *v19;
  int PrimitiveSizeInBits;
  uint64_t *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  uint64_t isNotMinSignedValue;
  llvm::Type *v25;
  unsigned int v26;
  unsigned __int8 *v27;
  unsigned int v28;
  unsigned __int8 *v29;
  unsigned int v30;
  llvm::ConstantFP *v31;
  unsigned int v32;
  llvm::Constant *NullValue;
  llvm::Constant *v34;
  llvm::APInt *v35;
  llvm::Type *v36;
  uint64_t v37;
  llvm::ConstantFP *v38;
  unsigned int v39;
  llvm::Constant *v40;
  llvm::Constant *v41;
  llvm::APInt *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 **v49;
  unsigned __int8 *v50;
  int v51;
  int v52;
  int v53;
  unsigned __int8 *v54;
  int v55;
  unsigned __int8 *v56;
  uint64_t v57;
  llvm::Constant *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 **v63;
  unsigned __int8 *v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  unsigned __int8 **v69;
  unsigned __int8 *v70;
  llvm::APInt *v71;
  unsigned int v72;
  int v73;
  uint64_t *v74;
  unsigned __int8 *v75;
  llvm::Value **v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 **v81;
  unsigned __int8 *v82;
  int v83;
  int v84;
  uint64_t v85;
  int v86;
  unsigned __int8 *v87;
  unsigned int v88;
  llvm::ConstantInt *v89;
  llvm::Type *v90;
  int v91;
  llvm::Value **v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int8 *v96;
  uint64_t v97;
  uint64_t Select;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned __int8 **v106;
  unsigned __int8 *v107;
  int v108;
  int v109;
  unsigned __int8 **v110;
  unsigned __int8 *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  unsigned __int8 *v116;
  unsigned __int8 *v117;
  llvm::ConstantFP *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned __int8 **v123;
  unsigned __int8 *v124;
  int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned __int8 **v131;
  unsigned __int8 *v132;
  int v133;
  int v134;
  uint64_t *v135;
  unsigned __int8 *v136;
  llvm::Type *v137;
  int v138;
  uint64_t *v139;
  unsigned int v140;
  llvm::Value *SortedOperandsOfBinOp;
  llvm::Value *v142;
  llvm::Value *v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  int v148;
  uint64_t v149;
  llvm::Value **v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned __int8 **v160;
  unsigned __int8 *v161;
  int v162;
  int v163;
  unsigned __int8 *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  llvm::APInt **v168;
  uint64_t *v169;
  uint64_t v170;
  unsigned __int8 *v171;
  llvm::APInt *v172;
  unsigned __int8 *v173;
  unsigned __int8 *v174;
  int v175;
  llvm **v176;
  int v177;
  llvm::Value **v178;
  unsigned __int8 *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t *v184;
  int v185;
  llvm::Value **v186;
  unsigned __int8 *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  llvm::Value **v192;
  int v193;
  unsigned __int8 *v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unsigned __int8 **v204;
  unsigned __int8 *v205;
  int v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unsigned __int8 **v214;
  unsigned __int8 *v215;
  int v216;
  int v217;
  int v218;
  llvm::Value **v219;
  _BOOL8 haveNoCommonBitsSet;
  llvm::Constant *v221;
  uint64_t v222;
  unsigned __int8 *v223;
  int v224;
  int v225;
  unsigned __int8 *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  llvm::Value **v232;
  unsigned int v233;
  uint64_t v234;
  llvm::Value *v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  uint64_t *v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unsigned __int8 **v246;
  unsigned __int8 *v247;
  int v248;
  int v249;
  uint64_t v250;
  llvm::Type *v251;
  int v252;
  unsigned __int8 *v253;
  uint64_t v254;
  uint64_t v255;
  _QWORD *v256;
  uint64_t Not;
  uint64_t v258;
  unsigned __int8 *v259;
  int v260;
  int v261;
  unsigned __int8 *v262;
  llvm::APInt *v263;
  unsigned __int8 *v264;
  unsigned __int8 *v265;
  char *v266;
  llvm::Value **v267;
  uint64_t v268;
  uint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  llvm::Value *v272;
  _QWORD *v273;
  llvm::Value *v274;
  uint64_t v275;
  unsigned __int8 *v276;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unsigned __int8 **v283;
  unsigned __int8 *v284;
  int v285;
  int v286;
  uint64_t *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unsigned __int8 **v293;
  unsigned __int8 *v294;
  int v295;
  int v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unsigned __int8 **v303;
  unsigned __int8 *v304;
  int v305;
  int v306;
  _QWORD *v307;
  unsigned int v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  llvm::ConstantFP *v313;
  int v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unsigned __int8 **v319;
  unsigned __int8 *v320;
  int v321;
  int v322;
  unsigned int v323;
  uint64_t v324;
  uint64_t v325;
  int v326;
  unsigned __int8 *v327;
  uint64_t ***v328;
  uint64_t **v329;
  uint64_t **v330;
  uint64_t **v331;
  __int128 v332;
  uint64_t **v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  unsigned __int8 **v340;
  unsigned __int8 *v341;
  int v342;
  int v343;
  int v344;
  unsigned __int8 *v345;
  _QWORD *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unsigned __int8 **v351;
  unsigned __int8 *v352;
  int v353;
  int v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unsigned __int8 **v360;
  unsigned __int8 *v361;
  int v362;
  int v363;
  llvm::ConstantFP *v364;
  unsigned int v365;
  uint64_t v366;
  llvm::Constant *v367;
  llvm::Constant *v368;
  llvm::APInt *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  unsigned __int8 **v375;
  unsigned __int8 *v376;
  int v377;
  int v378;
  uint64_t v379;
  uint64_t v380;
  llvm::ConstantExpr *AllOnesValue;
  llvm::ValueHandleBase *Shl;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  unsigned __int8 **v387;
  unsigned __int8 *v388;
  int v389;
  int v390;
  uint64_t v391;
  void *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  unsigned __int8 **v398;
  unsigned __int8 *v399;
  int v400;
  int v401;
  unsigned __int8 *v402;
  char *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t *v406;
  unsigned int v407;
  uint64_t v408;
  uint64_t *v409;
  int v410;
  unsigned __int8 *v411;
  unsigned __int8 *v412;
  char *v413;
  uint64_t v414;
  uint64_t v415;
  unsigned __int8 *v416;
  char *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unsigned __int8 *v421;
  uint64_t v422;
  int v423;
  uint64_t *v424;
  unsigned __int8 *v425;
  char *v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  unsigned __int8 *v430;
  llvm::APInt *v431;
  unsigned __int8 *v432;
  unsigned __int8 *v433;
  int v434;
  uint64_t v435;
  unsigned __int8 *v436;
  uint64_t *v437;
  uint64_t *v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  unsigned __int8 *v445;
  char *v446;
  uint64_t v447;
  uint64_t v448;
  unsigned __int8 *v449;
  char *v450;
  uint64_t v451;
  uint64_t v452;
  unsigned __int8 *v453;
  char *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  unsigned __int8 **v461;
  unsigned __int8 *v462;
  int v463;
  int v464;
  unsigned __int8 *v465;
  llvm::APInt *v466;
  unsigned __int8 *v467;
  unsigned __int8 *v468;
  char *v469;
  _QWORD *v470;
  uint64_t v471;
  uint64_t v472;
  _QWORD *v473;
  uint64_t v474;
  uint64_t v475;
  _QWORD *v476;
  uint64_t v477;
  unsigned __int8 *v478;
  char *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  unsigned __int8 **v485;
  int v486;
  unsigned __int8 *v487;
  unsigned __int8 *v488;
  unsigned __int8 *v489;
  char *v490;
  uint64_t v491;
  uint64_t v492;
  unsigned __int8 *v493;
  char *v494;
  uint64_t v495;
  uint64_t v496;
  unsigned __int8 *v497;
  char *v498;
  uint64_t v499;
  uint64_t v500;
  unsigned __int8 *v501;
  char *v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  _QWORD **v506;
  uint64_t v507;
  _QWORD **v508;
  uint64_t v509;
  char *v510;
  __int128 v511;
  unsigned __int8 *v512;
  llvm::ConstantInt **v513;
  void *v514;
  uint64_t v515;
  _BYTE v516[16];
  _BYTE *v517;
  uint64_t v518;
  _BYTE v519[16];
  llvm::APInt *v520;
  unsigned __int8 *v521;
  const char *v522;
  __int16 v523;
  unsigned __int8 *v524;
  uint64_t v525;
  uint64_t v526;
  __int128 v527;
  __int128 v528;
  uint64_t v529;
  uint64_t v530;

  v4 = (unsigned __int8 *)a2;
  v530 = *MEMORY[0x1E0C80C00];
  if ((sub_1C4E7B480((uint64_t)a2) & 1) == 0)
  {
    v6 = *(_DWORD *)(*(_QWORD *)v4 + 8);
    if ((v6 & 0xFE) == 0x12)
      v6 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v4 + 16) + 8);
    if (v6 != 269)
    {
      v513 = 0;
      v525 = (uint64_t)&v513;
      v7 = v4[16];
      if (v7 == 5)
      {
        if (*((_WORD *)v4 + 9) != 15
          || !sub_1C4E71060((uint64_t)&v524, *(llvm::Constant **)&v4[-32 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF)])|| (v8 = *(_QWORD *)&v4[-32 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF) + 32]) == 0)
        {
LABEL_14:
          if (sub_1C57A0CAC((int)&v524, (llvm::Constant *)v4))
          {
            v11 = *(llvm::ConstantFP **)v4;
            if ((*(_DWORD *)(*(_QWORD *)v4 + 8) & 0xFE) == 0x12)
              v12 = *(unsigned __int8 *)(**((_QWORD **)v11 + 2) + 8);
            else
              v12 = *(_DWORD *)(*(_QWORD *)v4 + 8);
            if (v12 <= 6)
              Zero = llvm::ConstantFP::getZero(v11, (llvm::Type *)1);
            else
              Zero = (llvm::Constant *)llvm::Constant::getNullValue(v11, v10);
            v15 = Zero;
            v9 = (unsigned __int8 **)llvm::ConstantFoldBinaryInstruction((llvm *)0xF, Zero, (llvm::Constant *)v4, v14);
            if (v9)
              return (unsigned __int8 *)v9;
            v16 = *(_QWORD ***)v15;
            if (*(_QWORD *)v15)
            {
              v520 = v15;
              v521 = v4;
              v17 = **v16 + 1512;
              LODWORD(v524) = 15;
              v525 = (uint64_t)&v520;
              v526 = 2;
              v527 = 0u;
              v528 = 0u;
              v529 = 0;
              return (unsigned __int8 *)sub_1C537D4FC(v17, (uint64_t)v16, (unsigned __int8 *)&v524);
            }
            return 0;
          }
          if (v4[16] < 0x1Cu)
            return 0;
          v18 = *((_QWORD *)v4 + 1);
          if ((!v18 || *(_QWORD *)(v18 + 8)) && !*((_BYTE *)this + 344))
            return 0;
          v19 = *(llvm::Type **)v4;
          if ((*(_DWORD *)(*(_QWORD *)v4 + 8) & 0xFE) == 0x12)
            v19 = (llvm::Type *)**((_QWORD **)v19 + 2);
          PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v19);
          v21 = (uint64_t *)((char *)this + 144);
          v510 = (char *)this + 144;
          v511 = *((_OWORD *)this + 12);
          llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)this + 36, &v512);
          *((_QWORD *)this + 24) = *((_QWORD *)v4 + 5);
          *((_QWORD *)this + 25) = v4 + 24;
          v22 = (unsigned __int8 *)*((_QWORD *)v4 + 6);
          v524 = v22;
          if (v22)
          {
            llvm::MetadataTracking::track((uint64_t)&v524, v22, 2);
            v23 = v524;
          }
          else
          {
            v23 = 0;
          }
          isNotMinSignedValue = sub_1C4774EF4((uint64_t)this + 144, 0, (uint64_t)v23);
          v25 = (llvm::Type *)v524;
          if (v524)
            isNotMinSignedValue = llvm::MetadataTracking::untrack((uint64_t)&v524, v524);
          v26 = v4[16];
          if (v26 > 0x39)
          {
            if (v26 - 67 >= 2)
            {
              if (v26 != 58)
              {
                if (v26 != 85)
                  goto LABEL_99;
                v27 = (unsigned __int8 *)*((_QWORD *)v4 - 8);
                v28 = v27[16];
                if (v28 != 5)
                {
                  if (v27)
                  {
                    if (v28 <= 0x14)
                    {
                      v29 = (unsigned __int8 *)*((_QWORD *)v4 - 4);
                      v30 = v29[16];
                      if (v30 != 5 && v29 && v30 <= 0x14)
                      {
                        v31 = *(llvm::ConstantFP **)v27;
                        if ((*(_DWORD *)(*(_QWORD *)v27 + 8) & 0xFE) == 0x12)
                          v32 = *(unsigned __int8 *)(**((_QWORD **)v31 + 2) + 8);
                        else
                          v32 = *(_DWORD *)(*(_QWORD *)v27 + 8);
                        if (v32 <= 6)
                          NullValue = llvm::ConstantFP::getZero(v31, (llvm::Type *)1);
                        else
                          NullValue = (llvm::Constant *)llvm::Constant::getNullValue(v31, v25);
                        v35 = NullValue;
                        v37 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)0xF, NullValue, (llvm::Constant *)v27, v34);
                        if (!v37)
                        {
                          v36 = *(llvm::Type **)v35;
                          if (*(_QWORD *)v35)
                          {
                            v520 = v35;
                            v521 = v27;
                            v505 = **(_QWORD **)v36 + 1512;
                            LODWORD(v524) = 15;
                            v525 = (uint64_t)&v520;
                            v526 = 2;
                            v527 = 0u;
                            v528 = 0u;
                            v529 = 0;
                            v37 = sub_1C537D4FC(v505, (uint64_t)v36, (unsigned __int8 *)&v524);
                          }
                          else
                          {
                            v37 = 0;
                          }
                        }
                        v38 = *(llvm::ConstantFP **)v29;
                        if ((*(_DWORD *)(*(_QWORD *)v29 + 8) & 0xFE) == 0x12)
                          v39 = *(unsigned __int8 *)(**((_QWORD **)v38 + 2) + 8);
                        else
                          v39 = *(_DWORD *)(*(_QWORD *)v29 + 8);
                        if (v39 <= 6)
                          v40 = llvm::ConstantFP::getZero(v38, (llvm::Type *)1);
                        else
                          v40 = (llvm::Constant *)llvm::Constant::getNullValue(v38, v36);
                        v42 = v40;
                        v43 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)0xF, v40, (llvm::Constant *)v29, v41);
                        if (!v43)
                        {
                          v506 = *(_QWORD ***)v42;
                          if (*(_QWORD *)v42)
                          {
                            v520 = v42;
                            v521 = v29;
                            v507 = **v506 + 1512;
                            LODWORD(v524) = 15;
                            v525 = (uint64_t)&v520;
                            v526 = 2;
                            v527 = 0u;
                            v528 = 0u;
                            v529 = 0;
                            v43 = sub_1C537D4FC(v507, (uint64_t)v506, (unsigned __int8 *)&v524);
                          }
                          else
                          {
                            v43 = 0;
                          }
                        }
                        v44 = *((_QWORD *)v4 - 12);
                        if ((v4[23] & 0x10) == 0)
                        {
                          v181 = 0;
                          v180 = &byte_1C871356D;
LABEL_205:
                          WORD4(v527) = 773;
                          v524 = (unsigned __int8 *)v180;
                          v525 = v181;
                          v526 = (uint64_t)".neg";
                          v183 = v21;
                          v184 = (uint64_t *)v37;
LABEL_206:
                          Select = (uint64_t)llvm::IRBuilderBase::CreateSelect(v183, v44, v184, v43, (uint64_t)&v524, v4);
                          goto LABEL_296;
                        }
                        v45 = ***(_QWORD ***)v4;
                        v46 = *(_QWORD *)(v45 + 152);
                        v47 = *(unsigned int *)(v45 + 168);
                        if ((_DWORD)v47)
                        {
                          LODWORD(v48) = (v47 - 1) & ((v4 >> 4) ^ (v4 >> 9));
                          v49 = (unsigned __int8 **)(v46 + 16 * v48);
                          v50 = *v49;
                          if (*v49 == v4)
                          {
LABEL_204:
                            v179 = v49[1];
                            v182 = *(_QWORD *)v179;
                            v180 = (char *)(v179 + 16);
                            v181 = v182;
                            goto LABEL_205;
                          }
                          v51 = 1;
                          while (v50 != (unsigned __int8 *)-4096)
                          {
                            v52 = v48 + v51++;
                            v48 = v52 & (v47 - 1);
                            v50 = *(unsigned __int8 **)(v46 + 16 * v48);
                            if (v50 == v4)
                            {
                              v49 = (unsigned __int8 **)(v46 + 16 * v48);
                              goto LABEL_204;
                            }
                          }
                        }
                        v49 = (unsigned __int8 **)(v46 + 16 * v47);
                        goto LABEL_204;
                      }
                    }
                  }
                }
                goto LABEL_98;
              }
              v524 = (unsigned __int8 *)&v513;
              isNotMinSignedValue = sub_1C4D9EC28((_QWORD **)&v524, 30, (uint64_t)v4);
              if ((_DWORD)isNotMinSignedValue)
              {
                v75 = (unsigned __int8 *)v513;
                v76 = llvm::ConstantInt::get(*v513, 1, 0);
                if ((v4[23] & 0x10) == 0)
                {
LABEL_321:
                  v264 = 0;
                  v263 = (llvm::APInt *)&byte_1C871356D;
                  goto LABEL_288;
                }
                v77 = ***(_QWORD ***)v4;
                v78 = *(_QWORD *)(v77 + 152);
                v79 = *(unsigned int *)(v77 + 168);
                if ((_DWORD)v79)
                {
                  LODWORD(v80) = (v79 - 1) & ((v4 >> 4) ^ (v4 >> 9));
                  v81 = (unsigned __int8 **)(v78 + 16 * v80);
                  v82 = *v81;
                  if (*v81 == v4)
                  {
LABEL_287:
                    v262 = v81[1];
                    v265 = *(unsigned __int8 **)v262;
                    v263 = (llvm::APInt *)(v262 + 16);
                    v264 = v265;
LABEL_288:
                    v523 = 773;
                    v520 = v263;
                    v521 = v264;
                    v522 = ".neg";
                    v9 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, unsigned __int8 *, llvm::Value **, _QWORD, _QWORD))(**((_QWORD **)this + 27) + 16))(*((_QWORD *)this + 27), v75, v76, 0, 0);
                    if (v9)
                      goto LABEL_297;
                    WORD4(v527) = 257;
                    v266 = (char *)operator new(0x80uLL);
                    *((_QWORD *)v266 + 5) = 0;
                    v267 = (llvm::Value **)(v266 + 40);
                    *((_QWORD *)v266 + 6) = 0;
                    *((_QWORD *)v266 + 8) = *(_QWORD *)v75;
                    v268 = (uint64_t)(v266 + 64);
                    *((_QWORD *)v266 + 3) = v266 + 64;
                    *((_QWORD *)v266 + 7) = v266 + 64;
                    *((_QWORD *)v266 + 9) = 0;
                    v266[80] = 41;
                    v266[81] = 0;
                    *((_WORD *)v266 + 41) = 0;
                    *((_DWORD *)v266 + 21) = 2;
                    *(_OWORD *)(v266 + 88) = 0u;
                    *(_OWORD *)(v266 + 104) = 0u;
                    *((_DWORD *)v266 + 30) = 0;
                    *(_QWORD *)v266 = v75;
                    v271 = *((_QWORD *)v75 + 1);
                    v270 = v75 + 8;
                    v269 = v271;
                    *((_QWORD *)v266 + 1) = v271;
                    if (v271)
                      *(_QWORD *)(v269 + 16) = v266 + 8;
                    *((_QWORD *)v266 + 2) = v270;
                    *v270 = v266;
                    *((_QWORD *)v266 + 4) = v76;
                    if (v76)
                    {
                      v274 = v76[1];
                      v273 = v76 + 1;
                      v272 = v274;
                      *v267 = v274;
                      if (v274)
                        *((_QWORD *)v272 + 2) = v267;
                      *((_QWORD *)v266 + 6) = v273;
                      *v273 = v266 + 32;
                    }
                    llvm::Value::setName((uint64_t ***)v266 + 8, (uint64_t)&v524);
                    Select = sub_1C4773754((uint64_t *)this + 18, v268, (uint64_t)&v520);
LABEL_296:
                    v9 = (unsigned __int8 **)Select;
                    goto LABEL_297;
                  }
                  v83 = 1;
                  while (v82 != (unsigned __int8 *)-4096)
                  {
                    v84 = v80 + v83++;
                    v80 = v84 & (v79 - 1);
                    v82 = *(unsigned __int8 **)(v78 + 16 * v80);
                    if (v82 == v4)
                    {
LABEL_97:
                      v81 = (unsigned __int8 **)(v78 + 16 * v80);
                      goto LABEL_287;
                    }
                  }
                }
LABEL_286:
                v81 = (unsigned __int8 **)(v78 + 16 * v79);
                goto LABEL_287;
              }
LABEL_98:
              v26 = v4[16];
LABEL_99:
              v85 = *((_QWORD *)v4 + 1);
              if (v26 != 43)
                goto LABEL_107;
              if (v85 && !*(_QWORD *)(v85 + 8))
              {
                v86 = *((_DWORD *)v4 + 5);
              }
              else
              {
                v86 = *((_DWORD *)v4 + 5);
                if ((v86 & 0x40000000) != 0)
                  v87 = (unsigned __int8 *)*((_QWORD *)v4 - 1);
                else
                  v87 = &v4[-32 * (v86 & 0x7FFFFFF)];
                v88 = *(unsigned __int8 *)(*(_QWORD *)v87 + 16);
                if (v88 > 0x14 || v88 == 5)
                {
LABEL_107:
                  if (!v85 || *(_QWORD *)(v85 + 8))
                    goto LABEL_109;
                  if (v26 != 48)
                  {
                    if (v26 == 56)
                    {
                      v517 = 0;
                      v524 = (unsigned __int8 *)&v513;
                      v525 = (uint64_t)&v517;
                      v526 = 0;
                      *(_QWORD *)&v527 = &v513;
                      *((_QWORD *)&v527 + 1) = &v517;
                      *(_QWORD *)&v528 = 0;
                      if (sub_1C582D8DC((uint64_t)&v524, *((_QWORD *)v4 - 8))
                        && (sub_1C4D89CC8((uint64_t)&v528 + 8, *((llvm::Constant **)v4 - 4)) & 1) != 0)
                      {
                        goto LABEL_116;
                      }
                      isNotMinSignedValue = sub_1C582D8DC((uint64_t)&v524, *((_QWORD *)v4 - 4));
                      if ((_DWORD)isNotMinSignedValue)
                      {
                        isNotMinSignedValue = sub_1C4D89CC8((uint64_t)&v528 + 8, *((llvm::Constant **)v4 - 8));
                        if ((isNotMinSignedValue & 1) != 0)
                        {
LABEL_116:
                          v89 = *v513;
                          v90 = *v513;
                          if ((*((_DWORD *)*v513 + 2) & 0xFE) == 0x12)
                            v90 = (llvm::Type *)**((_QWORD **)v89 + 2);
                          v91 = llvm::Type::getPrimitiveSizeInBits(v90);
                          v92 = llvm::ConstantInt::get(v89, (v91 - 1), 0);
                          v93 = (uint64_t)v513;
                          WORD4(v527) = 257;
                          v94 = sub_1C47733F8((uint64_t)v21, (uint64_t)v92, (uint64_t)v517, (uint64_t)&v524, 0, 0);
                          v523 = 257;
                          v95 = sub_1C506E874((uint64_t)v21, v93, v94, (uint64_t)&v520, 0, 0);
                          WORD4(v527) = 257;
                          v96 = (unsigned __int8 *)sub_1C534E5D8((uint64_t)v21, v95, (uint64_t)v92, (uint64_t)&v524, 0);
                          v97 = *(_QWORD *)v4;
                          WORD4(v527) = 257;
                          Select = (uint64_t)sub_1C5390E08(v21, v96, v97, (uint64_t)&v524);
                          goto LABEL_296;
                        }
                      }
                    }
LABEL_164:
                    if (dword_1ED811060 < a3)
                      goto LABEL_109;
                    v9 = 0;
                    v140 = v4[16];
                    if (v140 <= 0x39)
                    {
                      if (v4[16] <= 0x34u)
                      {
                        if (v140 != 41)
                        {
                          if (v140 != 45)
                            goto LABEL_297;
                          SortedOperandsOfBinOp = (llvm::Value *)llvm::Negator::getSortedOperandsOfBinOp((llvm::Negator *)isNotMinSignedValue, (llvm::Instruction *)v4);
                          v143 = v142;
                          v144 = a3 + 1;
                          v145 = llvm::Negator::negate(this, v142, v144);
                          if (v145)
                          {
                            v146 = v145;
                            goto LABEL_311;
                          }
                          v278 = llvm::Negator::negate(this, SortedOperandsOfBinOp, v144);
                          if (v278)
                          {
                            v146 = v278;
                            SortedOperandsOfBinOp = v143;
LABEL_311:
                            if ((v4[23] & 0x10) == 0)
                            {
                              v404 = 0;
                              v403 = &byte_1C871356D;
                              goto LABEL_429;
                            }
                            v279 = ***(_QWORD ***)v4;
                            v280 = *(_QWORD *)(v279 + 152);
                            v281 = *(unsigned int *)(v279 + 168);
                            if ((_DWORD)v281)
                            {
                              LODWORD(v282) = (v281 - 1) & ((v4 >> 4) ^ (v4 >> 9));
                              v283 = (unsigned __int8 **)(v280 + 16 * v282);
                              v284 = *v283;
                              if (*v283 == v4)
                              {
LABEL_428:
                                v402 = v283[1];
                                v405 = *(_QWORD *)v402;
                                v403 = (char *)(v402 + 16);
                                v404 = v405;
LABEL_429:
                                WORD4(v527) = 773;
                                v524 = (unsigned __int8 *)v403;
                                v525 = v404;
                                v526 = (uint64_t)".neg";
                                v406 = (uint64_t *)((char *)this + 144);
                                Shl = SortedOperandsOfBinOp;
LABEL_430:
                                Select = sub_1C4EC4040((uint64_t)v406, v146, (uint64_t)Shl, (uint64_t)&v524, 0, 0);
                                goto LABEL_296;
                              }
                              v285 = 1;
                              while (v284 != (unsigned __int8 *)-4096)
                              {
                                v286 = v282 + v285++;
                                v282 = v286 & (v281 - 1);
                                v284 = *(unsigned __int8 **)(v280 + 16 * v282);
                                if (v284 == v4)
                                {
                                  v283 = (unsigned __int8 **)(v280 + 16 * v282);
                                  goto LABEL_428;
                                }
                              }
                            }
                            v283 = (unsigned __int8 **)(v280 + 16 * v281);
                            goto LABEL_428;
                          }
LABEL_109:
                          v9 = 0;
LABEL_297:
                          v275 = (uint64_t)v510;
                          if ((_QWORD)v511)
                          {
                            sub_1C4D8AE2C((uint64_t)v510, v511, *((uint64_t *)&v511 + 1));
                            v275 = (uint64_t)v510;
                          }
                          else
                          {
                            *((_QWORD *)v510 + 6) = 0;
                            *((_QWORD *)v510 + 7) = 0;
                          }
                          v524 = v512;
                          if (v512)
                          {
                            llvm::MetadataTracking::track((uint64_t)&v524, v512, 2);
                            v276 = v524;
                          }
                          else
                          {
                            v276 = 0;
                          }
                          sub_1C4774EF4(v275, 0, (uint64_t)v276);
                          if (v524)
                            llvm::MetadataTracking::untrack((uint64_t)&v524, v524);
                          if (v512)
                            llvm::MetadataTracking::untrack((uint64_t)&v512, v512);
                          return (unsigned __int8 *)v9;
                        }
LABEL_248:
                        v517 = v519;
                        v518 = 0x200000000;
                        v514 = v516;
                        v515 = 0x200000000;
                        v230 = *((_DWORD *)v4 + 5);
                        if ((v230 & 0x40000000) != 0)
                        {
                          v232 = (llvm::Value **)*((_QWORD *)v4 - 1);
                          v231 = v230 & 0x7FFFFFF;
                        }
                        else
                        {
                          v231 = v230 & 0x7FFFFFF;
                          v232 = (llvm::Value **)&v4[-32 * v231];
                        }
                        if (v231)
                        {
                          v233 = a3 + 1;
                          v234 = 32 * v231;
                          do
                          {
                            v235 = *v232;
                            v236 = llvm::Negator::negate(this, *v232, v233);
                            if (v236)
                            {
                              v237 = v236;
                              v238 = v518;
                              if (v518 >= HIDWORD(v518))
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v517, (uint64_t)v519, v518 + 1, 8);
                                *(_QWORD *)&v517[8 * v518] = v237;
                                v238 = v518;
                              }
                              else
                              {
                                *(_QWORD *)&v517[8 * v518] = v236;
                              }
                              v239 = &v518;
                            }
                            else
                            {
                              if (!*((_BYTE *)this + 344))
                                goto LABEL_333;
                              v238 = v515;
                              if (v515 >= HIDWORD(v515))
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v514, (uint64_t)v516, v515 + 1, 8);
                                *((_QWORD *)v514 + v515) = v235;
                                v238 = v515;
                              }
                              else
                              {
                                *((_QWORD *)v514 + v515) = v235;
                              }
                              v239 = &v515;
                            }
                            *(_DWORD *)v239 = v238 + 1;
                            v232 += 4;
                            v234 -= 32;
                          }
                          while (v234);
                          if ((_DWORD)v518 != 2)
                          {
                            if ((_DWORD)v515 != 2)
                              goto LABEL_334;
LABEL_333:
                            v9 = 0;
                            goto LABEL_444;
                          }
                          v241 = *(_QWORD **)v517;
                          v240 = *((_QWORD *)v517 + 1);
                          if ((v4[23] & 0x10) == 0)
                          {
                            v467 = 0;
                            v466 = (llvm::APInt *)&byte_1C871356D;
                            goto LABEL_488;
                          }
                          v242 = ***(_QWORD ***)v4;
                          v243 = *(_QWORD *)(v242 + 152);
                          v244 = *(unsigned int *)(v242 + 168);
                          if ((_DWORD)v244)
                          {
                            LODWORD(v245) = (v244 - 1) & ((v4 >> 4) ^ (v4 >> 9));
                            v246 = (unsigned __int8 **)(v243 + 16 * v245);
                            v247 = *v246;
                            if (*v246 == v4)
                            {
LABEL_487:
                              v465 = v246[1];
                              v468 = *(unsigned __int8 **)v465;
                              v466 = (llvm::APInt *)(v465 + 16);
                              v467 = v468;
LABEL_488:
                              v523 = 773;
                              v520 = v466;
                              v521 = v467;
                              v522 = ".neg";
                              v9 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, _QWORD, _QWORD))(**((_QWORD **)this + 27) + 16))(*((_QWORD *)this + 27), v241, v240, 0, 0);
                              if (v9)
                              {
LABEL_444:
                                if (v514 != v516)
                                  free(v514);
                                v421 = v517;
                                if (v517 != v519)
LABEL_468:
                                  free(v421);
                                goto LABEL_297;
                              }
                              WORD4(v527) = 257;
                              v469 = (char *)operator new(0x80uLL);
                              *((_QWORD *)v469 + 5) = 0;
                              v470 = v469 + 40;
                              *((_QWORD *)v469 + 6) = 0;
                              *((_QWORD *)v469 + 8) = *v241;
                              v471 = (uint64_t)(v469 + 64);
                              *((_QWORD *)v469 + 3) = v469 + 64;
                              *((_QWORD *)v469 + 7) = v469 + 64;
                              *((_QWORD *)v469 + 9) = 0;
                              v469[80] = 41;
                              v469[81] = 0;
                              *((_WORD *)v469 + 41) = 0;
                              *((_DWORD *)v469 + 21) = 2;
                              *(_OWORD *)(v469 + 88) = 0u;
                              *(_OWORD *)(v469 + 104) = 0u;
                              *((_DWORD *)v469 + 30) = 0;
                              *(_QWORD *)v469 = v241;
                              v474 = v241[1];
                              v473 = v241 + 1;
                              v472 = v474;
                              *((_QWORD *)v469 + 1) = v474;
                              if (v474)
                                *(_QWORD *)(v472 + 16) = v469 + 8;
                              *((_QWORD *)v469 + 2) = v473;
                              *v473 = v469;
                              *((_QWORD *)v469 + 4) = v240;
                              if (v240)
                              {
                                v477 = *(_QWORD *)(v240 + 8);
                                v476 = (_QWORD *)(v240 + 8);
                                v475 = v477;
                                *v470 = v477;
                                if (v477)
                                  *(_QWORD *)(v475 + 16) = v470;
                                *((_QWORD *)v469 + 6) = v476;
                                *v476 = v469 + 32;
                              }
                              llvm::Value::setName((uint64_t ***)v469 + 8, (uint64_t)&v524);
                              v420 = sub_1C4773754((uint64_t *)this + 18, v471, (uint64_t)&v520);
LABEL_443:
                              v9 = (unsigned __int8 **)v420;
                              goto LABEL_444;
                            }
                            v248 = 1;
                            while (v247 != (unsigned __int8 *)-4096)
                            {
                              v249 = v245 + v248++;
                              v245 = v249 & (v244 - 1);
                              v247 = *(unsigned __int8 **)(v243 + 16 * v245);
                              if (v247 == v4)
                              {
                                v246 = (unsigned __int8 **)(v243 + 16 * v245);
                                goto LABEL_487;
                              }
                            }
                          }
                          v246 = (unsigned __int8 **)(v243 + 16 * v244);
                          goto LABEL_487;
                        }
LABEL_334:
                        v297 = *(_QWORD *)v517;
                        v298 = *(_QWORD *)v514;
                        if ((v4[23] & 0x10) == 0)
                        {
                          v418 = 0;
                          v417 = &byte_1C871356D;
                          goto LABEL_442;
                        }
                        v299 = ***(_QWORD ***)v4;
                        v300 = *(_QWORD *)(v299 + 152);
                        v301 = *(unsigned int *)(v299 + 168);
                        if ((_DWORD)v301)
                        {
                          LODWORD(v302) = (v301 - 1) & ((v4 >> 4) ^ (v4 >> 9));
                          v303 = (unsigned __int8 **)(v300 + 16 * v302);
                          v304 = *v303;
                          if (*v303 == v4)
                          {
LABEL_441:
                            v416 = v303[1];
                            v419 = *(_QWORD *)v416;
                            v417 = (char *)(v416 + 16);
                            v418 = v419;
LABEL_442:
                            WORD4(v527) = 773;
                            v524 = (unsigned __int8 *)v417;
                            v525 = v418;
                            v526 = (uint64_t)".neg";
                            v420 = sub_1C47733F8((uint64_t)this + 144, v297, v298, (uint64_t)&v524, 0, 0);
                            goto LABEL_443;
                          }
                          v305 = 1;
                          while (v304 != (unsigned __int8 *)-4096)
                          {
                            v306 = v302 + v305++;
                            v302 = v306 & (v301 - 1);
                            v304 = *(unsigned __int8 **)(v300 + 16 * v302);
                            if (v304 == v4)
                            {
                              v303 = (unsigned __int8 **)(v300 + 16 * v302);
                              goto LABEL_441;
                            }
                          }
                        }
                        v303 = (unsigned __int8 **)(v300 + 16 * v301);
                        goto LABEL_441;
                      }
                      if (v140 != 53)
                      {
                        if (v140 != 57)
                          goto LABEL_297;
                        v175 = *((_DWORD *)v4 + 5);
                        if ((v175 & 0x40000000) != 0)
                          v176 = (llvm **)*((_QWORD *)v4 - 1);
                        else
                          v176 = (llvm **)&v4[-32 * (v175 & 0x7FFFFFF)];
                        haveNoCommonBitsSet = llvm::haveNoCommonBitsSet(*v176, v176[4], *((void ***)this + 40), *((const llvm::DataLayout **)this + 41), (llvm::AssumptionCache *)v4, *((const llvm::Instruction **)this + 42), (const llvm::DominatorTree *)1);
                        if (!haveNoCommonBitsSet)
                          goto LABEL_109;
                        v57 = llvm::Negator::getSortedOperandsOfBinOp((llvm::Negator *)haveNoCommonBitsSet, (llvm::Instruction *)v4);
                        if (!sub_1C4D89CC8((uint64_t)&v524, v221))
                          goto LABEL_248;
                        if ((v4[23] & 0x10) != 0)
                        {
                          v222 = ***(_QWORD ***)v4;
                          v60 = *(_QWORD *)(v222 + 152);
                          v61 = *(unsigned int *)(v222 + 168);
                          if ((_DWORD)v61)
                          {
                            LODWORD(v62) = (v61 - 1) & ((v4 >> 4) ^ (v4 >> 9));
                            v63 = (unsigned __int8 **)(v60 + 16 * v62);
                            v223 = *v63;
                            if (*v63 != v4)
                            {
                              v224 = 1;
                              while (v223 != (unsigned __int8 *)-4096)
                              {
                                v225 = v62 + v224++;
                                v62 = v225 & (v61 - 1);
                                v223 = *(unsigned __int8 **)(v60 + 16 * v62);
                                if (v223 == v4)
                                  goto LABEL_73;
                              }
                              goto LABEL_245;
                            }
LABEL_246:
                            v226 = v63[1];
                            v229 = *(_QWORD *)v226;
                            v227 = (char *)(v226 + 16);
                            v228 = v229;
LABEL_247:
                            WORD4(v527) = 773;
                            v524 = (unsigned __int8 *)v227;
                            v525 = v228;
                            v526 = (uint64_t)".neg";
                            Select = sub_1C506EAA0((uint64_t)this + 144, v57, (uint64_t)&v524);
                            goto LABEL_296;
                          }
                          goto LABEL_245;
                        }
                        goto LABEL_320;
                      }
                      v185 = *((_DWORD *)v4 + 5);
                      if ((v185 & 0x40000000) != 0)
                        v186 = (llvm::Value **)*((_QWORD *)v4 - 1);
                      else
                        v186 = (llvm::Value **)&v4[-32 * (v185 & 0x7FFFFFF)];
                      v250 = llvm::Negator::negate(this, *v186, a3 + 1);
                      v252 = *((_DWORD *)v4 + 5);
                      if (v250)
                      {
                        if ((v252 & 0x40000000) != 0)
                          v253 = (unsigned __int8 *)*((_QWORD *)v4 - 1);
                        else
                          v253 = &v4[-32 * (v252 & 0x7FFFFFF)];
                        v288 = *((_QWORD *)v253 + 4);
                        if ((v252 & 0x10000000) == 0)
                        {
                          v414 = 0;
                          v413 = &byte_1C871356D;
                          goto LABEL_439;
                        }
                        v289 = ***(_QWORD ***)v4;
                        v290 = *(_QWORD *)(v289 + 152);
                        v291 = *(unsigned int *)(v289 + 168);
                        if ((_DWORD)v291)
                        {
                          LODWORD(v292) = (v291 - 1) & ((v4 >> 4) ^ (v4 >> 9));
                          v293 = (unsigned __int8 **)(v290 + 16 * v292);
                          v294 = *v293;
                          if (*v293 == v4)
                          {
LABEL_438:
                            v412 = v293[1];
                            v415 = *(_QWORD *)v412;
                            v413 = (char *)(v412 + 16);
                            v414 = v415;
LABEL_439:
                            WORD4(v527) = 773;
                            v524 = (unsigned __int8 *)v413;
                            v525 = v414;
                            v526 = (uint64_t)".neg";
                            Select = sub_1C506E874((uint64_t)this + 144, v250, v288, (uint64_t)&v524, 0, 0);
                            goto LABEL_296;
                          }
                          v295 = 1;
                          while (v294 != (unsigned __int8 *)-4096)
                          {
                            v296 = v292 + v295++;
                            v292 = v296 & (v291 - 1);
                            v294 = *(unsigned __int8 **)(v290 + 16 * v292);
                            if (v294 == v4)
                            {
                              v293 = (unsigned __int8 **)(v290 + 16 * v292);
                              goto LABEL_438;
                            }
                          }
                        }
                        v293 = (unsigned __int8 **)(v290 + 16 * v291);
                        goto LABEL_438;
                      }
                      v9 = 0;
                      if ((v252 & 0x40000000) != 0)
                        v287 = (uint64_t *)*((_QWORD *)v4 - 1);
                      else
                        v287 = (uint64_t *)&v4[-32 * (v252 & 0x7FFFFFF)];
                      v379 = v287[4];
                      if (!v379 || *(unsigned __int8 *)(v379 + 16) > 0x14u)
                        goto LABEL_297;
                      v380 = *v287;
                      AllOnesValue = llvm::Constant::getAllOnesValue(*(llvm::Constant **)v379, v251);
                      Shl = llvm::ConstantExpr::getShl(AllOnesValue, (llvm::Constant *)v379, 0, 0);
                      if ((v4[23] & 0x10) == 0)
                      {
                        v499 = 0;
                        v498 = &byte_1C871356D;
                        goto LABEL_525;
                      }
                      v383 = ***(_QWORD ***)v4;
                      v384 = *(_QWORD *)(v383 + 152);
                      v385 = *(unsigned int *)(v383 + 168);
                      if ((_DWORD)v385)
                      {
                        LODWORD(v386) = (v385 - 1) & ((v4 >> 4) ^ (v4 >> 9));
                        v387 = (unsigned __int8 **)(v384 + 16 * v386);
                        v388 = *v387;
                        if (*v387 == v4)
                        {
LABEL_524:
                          v497 = v387[1];
                          v500 = *(_QWORD *)v497;
                          v498 = (char *)(v497 + 16);
                          v499 = v500;
LABEL_525:
                          WORD4(v527) = 773;
                          v524 = (unsigned __int8 *)v498;
                          v525 = v499;
                          v526 = (uint64_t)".neg";
                          v406 = v21;
                          v146 = v380;
                          goto LABEL_430;
                        }
                        v389 = 1;
                        while (v388 != (unsigned __int8 *)-4096)
                        {
                          v390 = v386 + v389++;
                          v386 = v390 & (v385 - 1);
                          v388 = *(unsigned __int8 **)(v384 + 16 * v386);
                          if (v388 == v4)
                          {
                            v387 = (unsigned __int8 **)(v384 + 16 * v386);
                            goto LABEL_524;
                          }
                        }
                      }
                      v387 = (unsigned __int8 **)(v384 + 16 * v385);
                      goto LABEL_524;
                    }
                    switch(v4[16])
                    {
                      case 'S':
                        v147 = *((_DWORD *)v4 + 5) & 0x7FFFFFF;
                        v524 = (unsigned __int8 *)&v526;
                        v525 = 0x400000000;
                        sub_1C4848C0C((unsigned int *)&v524, v147, 0);
                        v148 = *((_DWORD *)v4 + 5);
                        if ((v148 & 0x40000000) != 0)
                        {
                          v150 = (llvm::Value **)*((_QWORD *)v4 - 1);
                          v149 = v148 & 0x7FFFFFF;
                        }
                        else
                        {
                          v149 = v148 & 0x7FFFFFF;
                          v150 = (llvm::Value **)&v4[-32 * v149];
                        }
                        if (!v149 || !(_DWORD)v525)
                          goto LABEL_349;
                        v307 = v524;
                        v308 = a3 + 1;
                        v309 = 8 * v525 - 8;
                        v310 = 32 * v149 - 32;
                        do
                        {
                          v311 = llvm::Negator::negate(this, *v150, v308);
                          *v307 = v311;
                          if (!v311)
                          {
                            v9 = 0;
                            goto LABEL_467;
                          }
                          if (!v310)
                            break;
                          v150 += 4;
                          ++v307;
                          v312 = v309;
                          v309 -= 8;
                          v310 -= 32;
                        }
                        while (v312);
                        v148 = *((_DWORD *)v4 + 5);
LABEL_349:
                        v313 = *(llvm::ConstantFP **)v4;
                        v314 = v148 & 0x7FFFFFF;
                        if ((v148 & 0x10000000) == 0)
                        {
                          v432 = 0;
                          v431 = (llvm::APInt *)&byte_1C871356D;
LABEL_459:
                          v523 = 773;
                          v520 = v431;
                          v521 = v432;
                          v522 = ".neg";
                          v9 = (unsigned __int8 **)sub_1C4867E94((uint64_t)this + 144, (uint64_t)v313, v314, (uint64_t)&v520);
                          v434 = *((_DWORD *)v4 + 5);
                          if ((v434 & 0x40000000) != 0)
                          {
                            v436 = (unsigned __int8 *)*((_QWORD *)v4 - 1);
                            v435 = v434 & 0x7FFFFFF;
                          }
                          else
                          {
                            v435 = v434 & 0x7FFFFFF;
                            v436 = &v4[-32 * v435];
                          }
                          if ((_DWORD)v525 && v435)
                          {
                            v437 = (uint64_t *)&v436[32 * *((unsigned int *)v4 + 15)];
                            v438 = (uint64_t *)v524;
                            v439 = 8 * v435 - 8;
                            v440 = 8 * v525 - 8;
                            do
                            {
                              v442 = *v438++;
                              v441 = v442;
                              v443 = *v437++;
                              sub_1C477667C((llvm::PHINode *)v9, v441, v443);
                              if (!v440)
                                break;
                              v444 = v439;
                              v439 -= 8;
                              v440 -= 8;
                            }
                            while (v444);
                          }
LABEL_467:
                          v421 = v524;
                          if (v524 != (unsigned __int8 *)&v526)
                            goto LABEL_468;
                          goto LABEL_297;
                        }
                        v315 = **(_QWORD **)v313;
                        v316 = *(_QWORD *)(v315 + 152);
                        v317 = *(unsigned int *)(v315 + 168);
                        if (!(_DWORD)v317)
                          goto LABEL_457;
                        LODWORD(v318) = (v317 - 1) & ((v4 >> 4) ^ (v4 >> 9));
                        v319 = (unsigned __int8 **)(v316 + 16 * v318);
                        v320 = *v319;
                        if (*v319 != v4)
                        {
                          v321 = 1;
                          while (v320 != (unsigned __int8 *)-4096)
                          {
                            v322 = v318 + v321++;
                            v318 = v322 & (v317 - 1);
                            v320 = *(unsigned __int8 **)(v316 + 16 * v318);
                            if (v320 == v4)
                            {
                              v319 = (unsigned __int8 **)(v316 + 16 * v318);
                              goto LABEL_458;
                            }
                          }
LABEL_457:
                          v319 = (unsigned __int8 **)(v316 + 16 * v317);
                        }
LABEL_458:
                        v430 = v319[1];
                        v433 = *(unsigned __int8 **)v430;
                        v431 = (llvm::APInt *)(v430 + 16);
                        v432 = v433;
                        goto LABEL_459;
                      case 'T':
                      case 'V':
                      case 'W':
                      case 'X':
                      case '\\':
                      case ']':
                      case '^':
                        goto LABEL_297;
                      case 'U':
                        v193 = *((_DWORD *)v4 + 5);
                        if ((v193 & 0x40000000) != 0)
                          v194 = (unsigned __int8 *)*((_QWORD *)v4 - 1);
                        else
                          v194 = &v4[-32 * (v193 & 0x7FFFFFF)];
                        if (!llvm::isKnownNegation(*((llvm **)v194 + 4), *((const llvm::Value **)v194 + 8), 0))
                        {
                          v344 = *((_DWORD *)v4 + 5);
                          if ((v344 & 0x40000000) != 0)
                            v345 = (unsigned __int8 *)*((_QWORD *)v4 - 1);
                          else
                            v345 = &v4[-32 * (v344 & 0x7FFFFFF)];
                          v407 = a3 + 1;
                          v408 = llvm::Negator::negate(this, *((llvm::Value **)v345 + 4), a3 + 1);
                          if (v408)
                          {
                            v409 = (uint64_t *)v408;
                            v410 = *((_DWORD *)v4 + 5);
                            v411 = (v410 & 0x40000000) != 0
                                 ? (unsigned __int8 *)*((_QWORD *)v4 - 1)
                                 : &v4[-32 * (v410 & 0x7FFFFFF)];
                            v422 = llvm::Negator::negate(this, *((llvm::Value **)v411 + 8), v407);
                            if (v422)
                            {
                              v43 = v422;
                              v423 = *((_DWORD *)v4 + 5);
                              if ((v423 & 0x40000000) != 0)
                                v424 = (uint64_t *)*((_QWORD *)v4 - 1);
                              else
                                v424 = (uint64_t *)&v4[-32 * (v423 & 0x7FFFFFF)];
                              v44 = *v424;
                              if ((v423 & 0x10000000) != 0)
                              {
                                v457 = ***(_QWORD ***)v4;
                                v458 = *(_QWORD *)(v457 + 152);
                                v459 = *(unsigned int *)(v457 + 168);
                                if ((_DWORD)v459)
                                {
                                  LODWORD(v460) = (v459 - 1) & ((v4 >> 4) ^ (v4 >> 9));
                                  v461 = (unsigned __int8 **)(v458 + 16 * v460);
                                  v462 = *v461;
                                  if (*v461 != v4)
                                  {
                                    v463 = 1;
                                    do
                                    {
                                      if (v462 == (unsigned __int8 *)-4096)
                                        goto LABEL_527;
                                      v464 = v460 + v463++;
                                      v460 = v464 & (v459 - 1);
                                      v462 = *(unsigned __int8 **)(v458 + 16 * v460);
                                    }
                                    while (v462 != v4);
                                    v461 = (unsigned __int8 **)(v458 + 16 * v460);
                                  }
                                }
                                else
                                {
LABEL_527:
                                  v461 = (unsigned __int8 **)(v458 + 16 * v459);
                                }
                                v501 = v461[1];
                                v504 = *(_QWORD *)v501;
                                v502 = (char *)(v501 + 16);
                                v503 = v504;
                              }
                              else
                              {
                                v503 = 0;
                                v502 = &byte_1C871356D;
                              }
                              WORD4(v527) = 773;
                              v524 = (unsigned __int8 *)v502;
                              v525 = v503;
                              v526 = (uint64_t)".neg";
                              v183 = (uint64_t *)((char *)this + 144);
                              v184 = v409;
                              goto LABEL_206;
                            }
                          }
                          goto LABEL_109;
                        }
                        llvm::Instruction::clone((llvm::Instruction *)v4);
                        v9 = (unsigned __int8 **)v328;
                        v329 = *(v328 - 8);
                        v330 = *(v328 - 4);
                        if (v329 != v330)
                        {
                          v331 = *(v328 - 3);
                          *(v328 - 8) = v330;
                          *(v328 - 4) = v329;
                          v332 = *(_OWORD *)(v328 - 7);
                          v333 = *(v328 - 2);
                          *(v328 - 7) = v331;
                          *(v328 - 6) = v333;
                          *(_OWORD *)(v328 - 3) = v332;
                          *v333 = (uint64_t *)(v328 - 8);
                          v334 = (uint64_t)*(v328 - 7);
                          if (v334)
                            *(_QWORD *)(v334 + 16) = v328 - 7;
                          **(v328 - 2) = (uint64_t *)(v328 - 4);
                          v335 = (uint64_t)*(v328 - 3);
                          if (v335)
                            *(_QWORD *)(v335 + 16) = v328 - 3;
                        }
                        if ((v4[23] & 0x10) == 0)
                        {
                          v480 = 0;
                          v479 = &byte_1C871356D;
                          goto LABEL_498;
                        }
                        v336 = ***(_QWORD ***)v4;
                        v337 = *(_QWORD *)(v336 + 152);
                        v338 = *(unsigned int *)(v336 + 168);
                        if (!(_DWORD)v338)
                          goto LABEL_496;
                        LODWORD(v339) = (v338 - 1) & ((v4 >> 4) ^ (v4 >> 9));
                        v340 = (unsigned __int8 **)(v337 + 16 * v339);
                        v341 = *v340;
                        if (*v340 != v4)
                        {
                          v342 = 1;
                          while (v341 != (unsigned __int8 *)-4096)
                          {
                            v343 = v339 + v342++;
                            v339 = v343 & (v338 - 1);
                            v341 = *(unsigned __int8 **)(v337 + 16 * v339);
                            if (v341 == v4)
                            {
                              v340 = (unsigned __int8 **)(v337 + 16 * v339);
                              goto LABEL_497;
                            }
                          }
LABEL_496:
                          v340 = (unsigned __int8 **)(v337 + 16 * v338);
                        }
LABEL_497:
                        v478 = v340[1];
                        v481 = *(_QWORD *)v478;
                        v479 = (char *)(v478 + 16);
                        v480 = v481;
LABEL_498:
                        WORD4(v527) = 773;
                        v524 = (unsigned __int8 *)v479;
                        v525 = v480;
                        v526 = (uint64_t)".neg";
                        llvm::Value::setName(v328, (uint64_t)&v524);
                        WORD4(v527) = 257;
                        (*(void (**)(_QWORD, unsigned __int8 **, unsigned __int8 **, _QWORD, _QWORD))(**((_QWORD **)this + 28) + 16))(*((_QWORD *)this + 28), v9, &v524, *((_QWORD *)this + 24), *((_QWORD *)this + 25));
                        v482 = *((unsigned int *)this + 38);
                        if (!(_DWORD)v482)
                          goto LABEL_297;
                        v483 = *((_QWORD *)this + 18);
                        v484 = v483 + 16 * v482;
                        v485 = v9 + 6;
                        while (1)
                        {
                          v486 = *(_DWORD *)v483;
                          v487 = *(unsigned __int8 **)(v483 + 8);
                          if (v487)
                          {
                            if (!v486)
                            {
                              v520 = *(llvm::APInt **)(v483 + 8);
                              llvm::MetadataTracking::track((uint64_t)&v520, v487, 2);
LABEL_510:
                              if (&v520 == (llvm::APInt **)v485)
                              {
                                if (v520)
                                  llvm::MetadataTracking::untrack((uint64_t)&v520, (unsigned __int8 *)v520);
                              }
                              else
                              {
                                if (*v485)
                                  llvm::MetadataTracking::untrack((uint64_t)(v9 + 6), *v485);
                                v488 = (unsigned __int8 *)v520;
                                *v485 = (unsigned __int8 *)v520;
                                if (v488)
                                  llvm::MetadataTracking::retrack((uint64_t)&v520, v488, (uint64_t)(v9 + 6));
                              }
                              goto LABEL_507;
                            }
                          }
                          else
                          {
                            if (!*v485 && (*((_BYTE *)v9 + 23) & 0x20) == 0)
                              goto LABEL_507;
                            if (!v486)
                            {
                              v520 = 0;
                              goto LABEL_510;
                            }
                          }
                          llvm::Value::setMetadata((llvm::Value *)v9, v486, (llvm::MDNode *)v487);
LABEL_507:
                          v483 += 16;
                          if (v483 == v484)
                            goto LABEL_297;
                        }
                      case 'Y':
                        v208 = llvm::Negator::negate(this, *((llvm::Value **)v4 - 8), a3 + 1);
                        if (!v208)
                          goto LABEL_109;
                        v209 = *((_QWORD *)v4 - 4);
                        if ((v4[23] & 0x10) != 0)
                        {
                          v210 = ***(_QWORD ***)v4;
                          v211 = *(_QWORD *)(v210 + 152);
                          v212 = *(unsigned int *)(v210 + 168);
                          if ((_DWORD)v212)
                          {
                            LODWORD(v213) = (v212 - 1) & ((v4 >> 4) ^ (v4 >> 9));
                            v214 = (unsigned __int8 **)(v211 + 16 * v213);
                            v215 = *v214;
                            if (*v214 != v4)
                            {
                              v216 = 1;
                              do
                              {
                                if (v215 == (unsigned __int8 *)-4096)
                                  goto LABEL_469;
                                v217 = v213 + v216++;
                                v213 = v217 & (v212 - 1);
                                v215 = *(unsigned __int8 **)(v211 + 16 * v213);
                              }
                              while (v215 != v4);
                              v214 = (unsigned __int8 **)(v211 + 16 * v213);
                            }
                          }
                          else
                          {
LABEL_469:
                            v214 = (unsigned __int8 **)(v211 + 16 * v212);
                          }
                          v445 = v214[1];
                          v448 = *(_QWORD *)v445;
                          v446 = (char *)(v445 + 16);
                          v447 = v448;
                          goto LABEL_471;
                        }
                        v447 = 0;
                        v446 = &byte_1C871356D;
LABEL_471:
                        WORD4(v527) = 773;
                        v524 = (unsigned __int8 *)v446;
                        v525 = v447;
                        v526 = (uint64_t)".neg";
                        Select = (uint64_t)sub_1C4772EE0((uint64_t *)this + 18, v208, v209, (uint64_t)&v524);
                        goto LABEL_296;
                      case 'Z':
                        v195 = a3 + 1;
                        v196 = llvm::Negator::negate(this, *((llvm::Value **)v4 - 12), a3 + 1);
                        if (!v196)
                          goto LABEL_109;
                        v197 = v196;
                        v198 = llvm::Negator::negate(this, *((llvm::Value **)v4 - 8), v195);
                        if (!v198)
                          goto LABEL_109;
                        v199 = *((_QWORD *)v4 - 4);
                        if ((v4[23] & 0x10) != 0)
                        {
                          v200 = ***(_QWORD ***)v4;
                          v201 = *(_QWORD *)(v200 + 152);
                          v202 = *(unsigned int *)(v200 + 168);
                          if ((_DWORD)v202)
                          {
                            LODWORD(v203) = (v202 - 1) & ((v4 >> 4) ^ (v4 >> 9));
                            v204 = (unsigned __int8 **)(v201 + 16 * v203);
                            v205 = *v204;
                            if (*v204 != v4)
                            {
                              v206 = 1;
                              do
                              {
                                if (v205 == (unsigned __int8 *)-4096)
                                  goto LABEL_520;
                                v207 = v203 + v206++;
                                v203 = v207 & (v202 - 1);
                                v205 = *(unsigned __int8 **)(v201 + 16 * v203);
                              }
                              while (v205 != v4);
                              v204 = (unsigned __int8 **)(v201 + 16 * v203);
                            }
                          }
                          else
                          {
LABEL_520:
                            v204 = (unsigned __int8 **)(v201 + 16 * v202);
                          }
                          v493 = v204[1];
                          v496 = *(_QWORD *)v493;
                          v494 = (char *)(v493 + 16);
                          v495 = v496;
                          goto LABEL_522;
                        }
                        v495 = 0;
                        v494 = &byte_1C871356D;
LABEL_522:
                        WORD4(v527) = 773;
                        v524 = (unsigned __int8 *)v494;
                        v525 = v495;
                        v526 = (uint64_t)".neg";
                        Select = (uint64_t)sub_1C4773154((uint64_t *)this + 18, v197, v198, v199, (uint64_t)&v524);
                        goto LABEL_296;
                      case '[':
                        v191 = *((_DWORD *)v4 + 5);
                        if ((v191 & 0x40000000) != 0)
                          v192 = (llvm::Value **)*((_QWORD *)v4 - 1);
                        else
                          v192 = (llvm::Value **)&v4[-32 * (v191 & 0x7FFFFFF)];
                        v323 = a3 + 1;
                        v324 = llvm::Negator::negate(this, *v192, a3 + 1);
                        if (!v324)
                          goto LABEL_109;
                        v325 = v324;
                        v326 = *((_DWORD *)v4 + 5);
                        v327 = (v326 & 0x40000000) != 0
                             ? (unsigned __int8 *)*((_QWORD *)v4 - 1)
                             : &v4[-32 * (v326 & 0x7FFFFFF)];
                        v391 = llvm::Negator::negate(this, *((llvm::Value **)v327 + 4), v323);
                        if (!v391)
                          goto LABEL_109;
                        v392 = (void *)*((_QWORD *)v4 + 8);
                        v393 = *((unsigned int *)v4 + 18);
                        if ((v4[23] & 0x10) != 0)
                        {
                          v394 = ***(_QWORD ***)v4;
                          v395 = *(_QWORD *)(v394 + 152);
                          v396 = *(unsigned int *)(v394 + 168);
                          if ((_DWORD)v396)
                          {
                            LODWORD(v397) = (v396 - 1) & ((v4 >> 4) ^ (v4 >> 9));
                            v398 = (unsigned __int8 **)(v395 + 16 * v397);
                            v399 = *v398;
                            if (*v398 != v4)
                            {
                              v400 = 1;
                              do
                              {
                                if (v399 == (unsigned __int8 *)-4096)
                                  goto LABEL_517;
                                v401 = v397 + v400++;
                                v397 = v401 & (v396 - 1);
                                v399 = *(unsigned __int8 **)(v395 + 16 * v397);
                              }
                              while (v399 != v4);
                              v398 = (unsigned __int8 **)(v395 + 16 * v397);
                            }
                          }
                          else
                          {
LABEL_517:
                            v398 = (unsigned __int8 **)(v395 + 16 * v396);
                          }
                          v489 = v398[1];
                          v492 = *(_QWORD *)v489;
                          v490 = (char *)(v489 + 16);
                          v491 = v492;
                          goto LABEL_519;
                        }
                        v491 = 0;
                        v490 = &byte_1C871356D;
LABEL_519:
                        WORD4(v527) = 773;
                        v524 = (unsigned __int8 *)v490;
                        v525 = v491;
                        v526 = (uint64_t)".neg";
                        Select = sub_1C486AD20((uint64_t)this + 144, v325, v391, v392, v393, (uint64_t)&v524);
                        goto LABEL_296;
                      case '_':
                        v218 = *((_DWORD *)v4 + 5);
                        if ((v218 & 0x40000000) != 0)
                          v219 = (llvm::Value **)*((_QWORD *)v4 - 1);
                        else
                          v219 = (llvm::Value **)&v4[-32 * (v218 & 0x7FFFFFF)];
                        v346 = (_QWORD *)llvm::Negator::negate(this, *v219, a3 + 1);
                        if (!v346)
                          goto LABEL_109;
                        if ((v4[23] & 0x10) != 0)
                        {
                          v347 = ***(_QWORD ***)v4;
                          v348 = *(_QWORD *)(v347 + 152);
                          v349 = *(unsigned int *)(v347 + 168);
                          if ((_DWORD)v349)
                          {
                            LODWORD(v350) = (v349 - 1) & ((v4 >> 4) ^ (v4 >> 9));
                            v351 = (unsigned __int8 **)(v348 + 16 * v350);
                            v352 = *v351;
                            if (*v351 != v4)
                            {
                              v353 = 1;
                              do
                              {
                                if (v352 == (unsigned __int8 *)-4096)
                                  goto LABEL_472;
                                v354 = v350 + v353++;
                                v350 = v354 & (v349 - 1);
                                v352 = *(unsigned __int8 **)(v348 + 16 * v350);
                              }
                              while (v352 != v4);
                              v351 = (unsigned __int8 **)(v348 + 16 * v350);
                            }
                          }
                          else
                          {
LABEL_472:
                            v351 = (unsigned __int8 **)(v348 + 16 * v349);
                          }
                          v449 = v351[1];
                          v452 = *(_QWORD *)v449;
                          v450 = (char *)(v449 + 16);
                          v451 = v452;
                          goto LABEL_474;
                        }
                        v451 = 0;
                        v450 = &byte_1C871356D;
LABEL_474:
                        WORD4(v527) = 773;
                        v524 = (unsigned __int8 *)v450;
                        v525 = v451;
                        v526 = (uint64_t)".neg";
                        Select = (uint64_t)sub_1C57A4274((uint64_t *)this + 18, v346, (uint64_t)&v524);
                        goto LABEL_296;
                      default:
                        if (v140 != 58)
                        {
                          if (v140 != 66)
                            goto LABEL_297;
                          v177 = *((_DWORD *)v4 + 5);
                          if ((v177 & 0x40000000) != 0)
                            v178 = (llvm::Value **)*((_QWORD *)v4 - 1);
                          else
                            v178 = (llvm::Value **)&v4[-32 * (v177 & 0x7FFFFFF)];
                          v355 = llvm::Negator::negate(this, *v178, a3 + 1);
                          if (v355)
                          {
                            v117 = (unsigned __int8 *)v355;
                            v118 = *(llvm::ConstantFP **)v4;
                            if ((v4[23] & 0x10) != 0)
                            {
                              v356 = **(_QWORD **)v118;
                              v357 = *(_QWORD *)(v356 + 152);
                              v358 = *(unsigned int *)(v356 + 168);
                              if ((_DWORD)v358)
                              {
                                LODWORD(v359) = (v358 - 1) & ((v4 >> 4) ^ (v4 >> 9));
                                v360 = (unsigned __int8 **)(v357 + 16 * v359);
                                v361 = *v360;
                                if (*v360 != v4)
                                {
                                  v362 = 1;
                                  do
                                  {
                                    if (v361 == (unsigned __int8 *)-4096)
                                      goto LABEL_475;
                                    v363 = v359 + v362++;
                                    v359 = v363 & (v358 - 1);
                                    v361 = *(unsigned __int8 **)(v357 + 16 * v359);
                                  }
                                  while (v361 != v4);
                                  v360 = (unsigned __int8 **)(v357 + 16 * v359);
                                }
                              }
                              else
                              {
LABEL_475:
                                v360 = (unsigned __int8 **)(v357 + 16 * v358);
                              }
                              v453 = v360[1];
                              v456 = *(_QWORD *)v453;
                              v454 = (char *)(v453 + 16);
                              v455 = v456;
                            }
                            else
                            {
                              v455 = 0;
                              v454 = &byte_1C871356D;
                            }
                            WORD4(v527) = 773;
                            v524 = (unsigned __int8 *)v454;
                            v525 = v455;
                            v526 = (uint64_t)".neg";
                            v168 = (llvm::APInt **)&v524;
                            v169 = (uint64_t *)((char *)this + 144);
                            v170 = 38;
                            goto LABEL_193;
                          }
                          goto LABEL_109;
                        }
                        v254 = llvm::Negator::getSortedOperandsOfBinOp((llvm::Negator *)isNotMinSignedValue, (llvm::Instruction *)v4);
                        v9 = 0;
                        if (*(unsigned __int8 *)(v255 + 16) > 0x14u || !v255)
                          goto LABEL_297;
                        v256 = (_QWORD *)v254;
                        Not = llvm::ConstantExpr::getNot((llvm::Constant **)v255, (llvm::Constant *)v255);
                        WORD4(v527) = 257;
                        v75 = sub_1C506EC1C((uint64_t *)this + 18, v256, Not, (uint64_t)&v524);
                        v76 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v75, 1, 0);
                        if ((v4[23] & 0x10) == 0)
                          goto LABEL_321;
                        v258 = ***(_QWORD ***)v4;
                        v78 = *(_QWORD *)(v258 + 152);
                        v79 = *(unsigned int *)(v258 + 168);
                        if ((_DWORD)v79)
                        {
                          LODWORD(v80) = (v79 - 1) & ((v4 >> 4) ^ (v4 >> 9));
                          v81 = (unsigned __int8 **)(v78 + 16 * v80);
                          v259 = *v81;
                          if (*v81 == v4)
                            goto LABEL_287;
                          v260 = 1;
                          do
                          {
                            if (v259 == (unsigned __int8 *)-4096)
                              goto LABEL_286;
                            v261 = v80 + v260++;
                            v80 = v261 & (v79 - 1);
                            v259 = *(unsigned __int8 **)(v78 + 16 * v80);
                          }
                          while (v259 != v4);
                          goto LABEL_97;
                        }
                        goto LABEL_286;
                    }
                  }
                  v115 = *((_DWORD *)v4 + 5);
                  if ((v115 & 0x40000000) != 0)
                    v116 = (unsigned __int8 *)*((_QWORD *)v4 - 1);
                  else
                    v116 = &v4[-32 * (v115 & 0x7FFFFFF)];
                  v136 = (unsigned __int8 *)*((_QWORD *)v116 + 4);
                  if (!v136)
                    goto LABEL_164;
                  if (v136[16] > 0x14u)
                    goto LABEL_164;
                  isNotMinSignedValue = sub_1C5375B0C((llvm::Constant *)v136, (uint64_t (*)(uint64_t, llvm::UndefValue *))sub_1C5381FE4, (uint64_t)&v524);
                  if ((isNotMinSignedValue & 1) != 0)
                    goto LABEL_164;
                  isNotMinSignedValue = llvm::Constant::isNotMinSignedValue((unint64_t)v136);
                  if (!(_DWORD)isNotMinSignedValue)
                    goto LABEL_164;
                  isNotMinSignedValue = llvm::Constant::isNotOneValue((llvm::Constant *)v136);
                  if (!(_DWORD)isNotMinSignedValue)
                    goto LABEL_164;
                  v138 = *((_DWORD *)v4 + 5);
                  if ((v138 & 0x40000000) != 0)
                    v139 = (uint64_t *)*((_QWORD *)v4 - 1);
                  else
                    v139 = (uint64_t *)&v4[-32 * (v138 & 0x7FFFFFF)];
                  v364 = *(llvm::ConstantFP **)v136;
                  if ((*(_DWORD *)(*(_QWORD *)v136 + 8) & 0xFE) == 0x12)
                    v365 = *(unsigned __int8 *)(**((_QWORD **)v364 + 2) + 8);
                  else
                    v365 = *(_DWORD *)(*(_QWORD *)v136 + 8);
                  v366 = *v139;
                  if (v365 <= 6)
                    v367 = llvm::ConstantFP::getZero(v364, (llvm::Type *)1);
                  else
                    v367 = (llvm::Constant *)llvm::Constant::getNullValue(v364, v137);
                  v369 = v367;
                  v370 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)0xF, v367, (llvm::Constant *)v136, v368);
                  if (!v370)
                  {
                    v508 = *(_QWORD ***)v369;
                    if (*(_QWORD *)v369)
                    {
                      v520 = v369;
                      v521 = v136;
                      v509 = **v508 + 1512;
                      LODWORD(v524) = 15;
                      v525 = (uint64_t)&v520;
                      v526 = 2;
                      v527 = 0u;
                      v528 = 0u;
                      v529 = 0;
                      v370 = sub_1C537D4FC(v509, (uint64_t)v508, (unsigned __int8 *)&v524);
                    }
                    else
                    {
                      v370 = 0;
                    }
                  }
                  if ((v4[23] & 0x10) == 0)
                  {
                    v427 = 0;
                    v426 = &byte_1C871356D;
                    goto LABEL_454;
                  }
                  v371 = ***(_QWORD ***)v4;
                  v372 = *(_QWORD *)(v371 + 152);
                  v373 = *(unsigned int *)(v371 + 168);
                  if ((_DWORD)v373)
                  {
                    LODWORD(v374) = (v373 - 1) & ((v4 >> 4) ^ (v4 >> 9));
                    v375 = (unsigned __int8 **)(v372 + 16 * v374);
                    v376 = *v375;
                    if (*v375 == v4)
                    {
LABEL_453:
                      v425 = v375[1];
                      v428 = *(_QWORD *)v425;
                      v426 = (char *)(v425 + 16);
                      v427 = v428;
LABEL_454:
                      WORD4(v527) = 773;
                      v524 = (unsigned __int8 *)v426;
                      v525 = v427;
                      v526 = (uint64_t)".neg";
                      v429 = sub_1C538EA44((uint64_t)v21, v366, v370, (uint64_t)&v524, 0);
                      v9 = (unsigned __int8 **)v429;
                      if (v429 && *(unsigned __int8 *)(v429 + 16) >= 0x1Cu)
                        *(_BYTE *)(v429 + 17) = *(_BYTE *)(v429 + 17) & 0xFD | v4[17] & 2;
                      goto LABEL_297;
                    }
                    v377 = 1;
                    while (v376 != (unsigned __int8 *)-4096)
                    {
                      v378 = v374 + v377++;
                      v374 = v378 & (v373 - 1);
                      v376 = *(unsigned __int8 **)(v372 + 16 * v374);
                      if (v376 == v4)
                      {
                        v375 = (unsigned __int8 **)(v372 + 16 * v374);
                        goto LABEL_453;
                      }
                    }
                  }
                  v375 = (unsigned __int8 **)(v372 + 16 * v373);
                  goto LABEL_453;
                }
              }
              if ((v86 & 0x40000000) != 0)
                v99 = (uint64_t *)*((_QWORD *)v4 - 1);
              else
                v99 = (uint64_t *)&v4[-32 * (v86 & 0x7FFFFFF)];
              v100 = v99[4];
              v101 = *v99;
              if ((v86 & 0x10000000) == 0)
              {
                v113 = 0;
                v112 = &byte_1C871356D;
                goto LABEL_135;
              }
              v102 = ***(_QWORD ***)v4;
              v103 = *(_QWORD *)(v102 + 152);
              v104 = *(unsigned int *)(v102 + 168);
              if ((_DWORD)v104)
              {
                LODWORD(v105) = (v104 - 1) & ((v4 >> 4) ^ (v4 >> 9));
                v106 = (unsigned __int8 **)(v103 + 16 * v105);
                v107 = *v106;
                if (*v106 == v4)
                {
LABEL_134:
                  v111 = v106[1];
                  v114 = *(_QWORD *)v111;
                  v112 = (char *)(v111 + 16);
                  v113 = v114;
LABEL_135:
                  WORD4(v527) = 773;
                  v524 = (unsigned __int8 *)v112;
                  v525 = v113;
                  v526 = (uint64_t)".neg";
                  Select = sub_1C47733F8((uint64_t)this + 144, v100, v101, (uint64_t)&v524, 0, 0);
                  goto LABEL_296;
                }
                v108 = 1;
                while (v107 != (unsigned __int8 *)-4096)
                {
                  v109 = v105 + v108++;
                  v105 = v109 & (v104 - 1);
                  v107 = *(unsigned __int8 **)(v103 + 16 * v105);
                  if (v107 == v4)
                  {
                    v106 = (unsigned __int8 **)(v103 + 16 * v105);
                    goto LABEL_134;
                  }
                }
              }
              v106 = (unsigned __int8 **)(v103 + 16 * v104);
              goto LABEL_134;
            }
            v55 = *((_DWORD *)v4 + 5);
            if ((v55 & 0x40000000) != 0)
              v56 = (unsigned __int8 *)*((_QWORD *)v4 - 1);
            else
              v56 = &v4[-32 * (v55 & 0x7FFFFFF)];
            v67 = **(_QWORD **)v56;
            v68 = *(_DWORD *)(v67 + 8);
            if ((v68 & 0xFE) == 0x12)
              v68 = *(_DWORD *)(**(_QWORD **)(v67 + 16) + 8);
            if (v68 != 269)
              goto LABEL_98;
            if (v26 == 68)
            {
              if ((v55 & 0x40000000) != 0)
                v69 = (unsigned __int8 **)*((_QWORD *)v4 - 1);
              else
                v69 = (unsigned __int8 **)&v4[-32 * (v55 & 0x7FFFFFF)];
              v117 = *v69;
              v118 = *(llvm::ConstantFP **)v4;
              if ((v55 & 0x10000000) == 0)
              {
                v166 = 0;
                v165 = &byte_1C871356D;
                goto LABEL_189;
              }
              v119 = **(_QWORD **)v118;
              v120 = *(_QWORD *)(v119 + 152);
              v121 = *(unsigned int *)(v119 + 168);
              if ((_DWORD)v121)
              {
                LODWORD(v122) = (v121 - 1) & ((v4 >> 4) ^ (v4 >> 9));
                v123 = (unsigned __int8 **)(v120 + 16 * v122);
                v124 = *v123;
                if (*v123 == v4)
                {
LABEL_188:
                  v164 = v123[1];
                  v167 = *(_QWORD *)v164;
                  v165 = (char *)(v164 + 16);
                  v166 = v167;
LABEL_189:
                  WORD4(v527) = 773;
                  v524 = (unsigned __int8 *)v165;
                  v525 = v166;
                  v526 = (uint64_t)".neg";
                  v168 = (llvm::APInt **)&v524;
                  v169 = (uint64_t *)((char *)this + 144);
                  v170 = 39;
LABEL_193:
                  Select = (uint64_t)sub_1C4773E38(v169, v170, v117, (uint64_t)v118, (uint64_t)v168);
                  goto LABEL_296;
                }
                v125 = 1;
                while (v124 != (unsigned __int8 *)-4096)
                {
                  v126 = v122 + v125++;
                  v122 = v126 & (v121 - 1);
                  v124 = *(unsigned __int8 **)(v120 + 16 * v122);
                  if (v124 == v4)
                  {
                    v123 = (unsigned __int8 **)(v120 + 16 * v122);
                    goto LABEL_188;
                  }
                }
              }
              v123 = (unsigned __int8 **)(v120 + 16 * v121);
              goto LABEL_188;
            }
            if ((v55 & 0x40000000) != 0)
              v110 = (unsigned __int8 **)*((_QWORD *)v4 - 1);
            else
              v110 = (unsigned __int8 **)&v4[-32 * (v55 & 0x7FFFFFF)];
            v117 = *v110;
            v118 = *(llvm::ConstantFP **)v4;
            if ((v55 & 0x10000000) == 0)
            {
              v173 = 0;
              v172 = (llvm::APInt *)&byte_1C871356D;
              goto LABEL_192;
            }
            v127 = **(_QWORD **)v118;
            v128 = *(_QWORD *)(v127 + 152);
            v129 = *(unsigned int *)(v127 + 168);
            if ((_DWORD)v129)
            {
              LODWORD(v130) = (v129 - 1) & ((v4 >> 4) ^ (v4 >> 9));
              v131 = (unsigned __int8 **)(v128 + 16 * v130);
              v132 = *v131;
              if (*v131 == v4)
              {
LABEL_191:
                v171 = v131[1];
                v174 = *(unsigned __int8 **)v171;
                v172 = (llvm::APInt *)(v171 + 16);
                v173 = v174;
LABEL_192:
                v523 = 773;
                v520 = v172;
                v521 = v173;
                v522 = ".neg";
                v168 = &v520;
                v169 = (uint64_t *)((char *)this + 144);
                v170 = 40;
                goto LABEL_193;
              }
              v133 = 1;
              while (v132 != (unsigned __int8 *)-4096)
              {
                v134 = v130 + v133++;
                v130 = v134 & (v129 - 1);
                v132 = *(unsigned __int8 **)(v128 + 16 * v130);
                if (v132 == v4)
                {
                  v131 = (unsigned __int8 **)(v128 + 16 * v130);
                  goto LABEL_191;
                }
              }
            }
            v131 = (unsigned __int8 **)(v128 + 16 * v129);
            goto LABEL_191;
          }
          if (v26 - 54 >= 2)
          {
            if (v26 != 41)
              goto LABEL_99;
            v57 = llvm::Negator::getSortedOperandsOfBinOp((llvm::Negator *)isNotMinSignedValue, (llvm::Instruction *)v4);
            isNotMinSignedValue = sub_1C4D89CC8((uint64_t)&v524, v58);
            if ((_DWORD)isNotMinSignedValue)
            {
              if ((v4[23] & 0x10) != 0)
              {
                v59 = ***(_QWORD ***)v4;
                v60 = *(_QWORD *)(v59 + 152);
                v61 = *(unsigned int *)(v59 + 168);
                if ((_DWORD)v61)
                {
                  LODWORD(v62) = (v61 - 1) & ((v4 >> 4) ^ (v4 >> 9));
                  v63 = (unsigned __int8 **)(v60 + 16 * v62);
                  v64 = *v63;
                  if (*v63 != v4)
                  {
                    v65 = 1;
                    while (v64 != (unsigned __int8 *)-4096)
                    {
                      v66 = v62 + v65++;
                      v62 = v66 & (v61 - 1);
                      v64 = *(unsigned __int8 **)(v60 + 16 * v62);
                      if (v64 == v4)
                      {
LABEL_73:
                        v63 = (unsigned __int8 **)(v60 + 16 * v62);
                        goto LABEL_246;
                      }
                    }
                    goto LABEL_245;
                  }
                  goto LABEL_246;
                }
LABEL_245:
                v63 = (unsigned __int8 **)(v60 + 16 * v61);
                goto LABEL_246;
              }
LABEL_320:
              v228 = 0;
              v227 = &byte_1C871356D;
              goto LABEL_247;
            }
            goto LABEL_98;
          }
          v520 = 0;
          v53 = *((_DWORD *)v4 + 5);
          if ((v53 & 0x40000000) != 0)
            v54 = (unsigned __int8 *)*((_QWORD *)v4 - 1);
          else
            v54 = &v4[-32 * (v53 & 0x7FFFFFF)];
          v70 = (unsigned __int8 *)*((_QWORD *)v54 + 4);
          v524 = (unsigned __int8 *)&v520;
          v525 = 0;
          isNotMinSignedValue = (uint64_t)sub_1C4D89F84((uint64_t)&v524, v70);
          if (!(_DWORD)isNotMinSignedValue)
            goto LABEL_98;
          v71 = v520;
          v72 = *((_DWORD *)v520 + 2);
          if (v72 >= 0x41)
          {
            isNotMinSignedValue = llvm::APInt::countLeadingZerosSlowCase(v520);
            if (v72 - isNotMinSignedValue > 0x40)
              goto LABEL_98;
            v71 = *(llvm::APInt **)v71;
          }
          if (*(_QWORD *)v71 != PrimitiveSizeInBits - 1)
            goto LABEL_98;
          v73 = *((_DWORD *)v4 + 5);
          if (v4[16] == 55)
          {
            if ((v73 & 0x40000000) != 0)
              v74 = (uint64_t *)*((_QWORD *)v4 - 1);
            else
              v74 = (uint64_t *)&v4[-32 * (v73 & 0x7FFFFFF)];
            v151 = *v74;
            v152 = v74[4];
            WORD4(v527) = 257;
            v153 = sub_1C506ED1C((uint64_t)this + 144, v151, v152, (uint64_t)&v524, 0);
          }
          else
          {
            if ((v73 & 0x40000000) != 0)
              v135 = (uint64_t *)*((_QWORD *)v4 - 1);
            else
              v135 = (uint64_t *)&v4[-32 * (v73 & 0x7FFFFFF)];
            v154 = *v135;
            v155 = v135[4];
            WORD4(v527) = 257;
            v153 = sub_1C534E5D8((uint64_t)this + 144, v154, v155, (uint64_t)&v524, 0);
          }
          v9 = (unsigned __int8 **)v153;
          if (!v153 || *(unsigned __int8 *)(v153 + 16) < 0x1Cu)
            goto LABEL_297;
          llvm::Instruction::copyIRFlags(v153, (uint64_t)v4, 1);
          if ((v4[23] & 0x10) == 0)
          {
            v189 = 0;
            v188 = &byte_1C871356D;
            goto LABEL_211;
          }
          v156 = ***(_QWORD ***)v4;
          v157 = *(_QWORD *)(v156 + 152);
          v158 = *(unsigned int *)(v156 + 168);
          if ((_DWORD)v158)
          {
            LODWORD(v159) = (v158 - 1) & ((v4 >> 4) ^ (v4 >> 9));
            v160 = (unsigned __int8 **)(v157 + 16 * v159);
            v161 = *v160;
            if (*v160 == v4)
            {
LABEL_210:
              v187 = v160[1];
              v190 = *(_QWORD *)v187;
              v188 = (char *)(v187 + 16);
              v189 = v190;
LABEL_211:
              WORD4(v527) = 773;
              v524 = (unsigned __int8 *)v188;
              v525 = v189;
              v526 = (uint64_t)".neg";
              llvm::Value::setName((uint64_t ***)v9, (uint64_t)&v524);
              goto LABEL_297;
            }
            v162 = 1;
            while (v161 != (unsigned __int8 *)-4096)
            {
              v163 = v159 + v162++;
              v159 = v163 & (v158 - 1);
              v161 = *(unsigned __int8 **)(v157 + 16 * v159);
              if (v161 == v4)
              {
                v160 = (unsigned __int8 **)(v157 + 16 * v159);
                goto LABEL_210;
              }
            }
          }
          v160 = (unsigned __int8 **)(v157 + 16 * v158);
          goto LABEL_210;
        }
      }
      else
      {
        if (v7 != 43)
          goto LABEL_14;
        if (!sub_1C4D8AC3C((uint64_t)&v524, *((llvm::Constant **)v4 - 8)))
          goto LABEL_14;
        v8 = *((_QWORD *)v4 - 4);
        if (!v8)
          goto LABEL_14;
      }
      *(_QWORD *)v525 = v8;
      return (unsigned __int8 *)v513;
    }
  }
  return v4;
}

unsigned __int8 *llvm::Negator::negate(llvm::Negator *this, llvm::Value *a2, unsigned int a3)
{
  int v5;
  char *v6;
  unsigned int v7;
  int v8;
  char *v9;
  int v10;
  uint64_t v11;
  char *v12;
  llvm::Value *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unsigned __int8 *v18;
  unsigned int v19;
  int v20;
  int v21;
  char *v22;
  int v23;
  unsigned int v24;
  char *v25;
  llvm::Value *v26;
  char *v27;
  int v28;
  unsigned int v29;
  unsigned int *v30;
  int v32;
  int v33;
  unsigned int v34;
  llvm::Value *v35;
  char *v36;
  int v37;
  BOOL v38;
  unsigned int v39;
  int v40;
  BOOL v41;
  unsigned int v42;
  char *v43;

  v5 = *((_DWORD *)this + 88);
  v6 = (char *)this + 360;
  v7 = a2 >> 4;
  if ((v5 & 1) != 0)
  {
    v8 = 4;
    v9 = (char *)this + 360;
  }
  else
  {
    v9 = (char *)*((_QWORD *)this + 45);
    v8 = *((_DWORD *)this + 92);
    if (!v8)
    {
      v15 = 0;
      goto LABEL_8;
    }
  }
  v10 = v8 - 1;
  LODWORD(v11) = (v8 - 1) & (v7 ^ (a2 >> 9));
  v12 = &v9[16 * v11];
  v13 = *(llvm::Value **)v12;
  if (*(llvm::Value **)v12 == a2)
    goto LABEL_9;
  v14 = 1;
  while (v13 != (llvm::Value *)-4096)
  {
    v40 = v11 + v14++;
    v11 = v40 & v10;
    v13 = *(llvm::Value **)&v9[16 * v11];
    if (v13 == a2)
    {
      v12 = &v9[16 * v11];
      goto LABEL_9;
    }
  }
  if ((v5 & 1) != 0)
  {
    v15 = 4;
    v9 = (char *)this + 360;
  }
  else
  {
    v9 = (char *)*((_QWORD *)this + 45);
    v15 = *((unsigned int *)this + 92);
  }
LABEL_8:
  v12 = &v9[16 * v15];
LABEL_9:
  if ((v5 & 1) != 0)
  {
    v16 = 4;
    v17 = (char *)this + 360;
  }
  else
  {
    v17 = (char *)*((_QWORD *)this + 45);
    v16 = *((unsigned int *)this + 92);
  }
  if (&v17[16 * v16] != v12)
    return (unsigned __int8 *)*((_QWORD *)v12 + 1);
  v18 = llvm::Negator::visitImpl(this, a2, a3);
  v19 = *((_DWORD *)this + 88);
  v20 = v19 & 1;
  if ((v19 & 1) != 0)
  {
    v21 = 4;
    v22 = v6;
  }
  else
  {
    v21 = *((_DWORD *)this + 92);
    if (!v21)
    {
      v25 = 0;
      v29 = 0;
      goto LABEL_21;
    }
    v22 = (char *)*((_QWORD *)this + 45);
  }
  v23 = v21 - 1;
  v24 = (v21 - 1) & (v7 ^ (a2 >> 9));
  v25 = &v22[16 * v24];
  v26 = *(llvm::Value **)v25;
  if (*(llvm::Value **)v25 != a2)
  {
    v27 = 0;
    v28 = 1;
    while (v26 != (llvm::Value *)-4096)
    {
      if (v27)
        v38 = 0;
      else
        v38 = v26 == (llvm::Value *)-8192;
      if (v38)
        v27 = v25;
      v39 = v24 + v28++;
      v24 = v39 & v23;
      v25 = &v22[16 * (v39 & v23)];
      v26 = *(llvm::Value **)v25;
      if (*(llvm::Value **)v25 == a2)
        goto LABEL_27;
    }
    if (v27)
      v25 = v27;
    if ((v19 & 1) != 0)
      v29 = 4;
    else
      v29 = *((_DWORD *)this + 92);
LABEL_21:
    v30 = (unsigned int *)((char *)this + 352);
    if (4 * (v19 >> 1) + 4 < 3 * v29)
    {
      if (v29 + ~(v19 >> 1) - *((_DWORD *)this + 89) <= v29 >> 3)
      {
        sub_1C582DB30((uint64_t)this + 352, v29);
        v43 = 0;
        sub_1C582DA98((uint64_t)this + 352, (uint64_t)a2, &v43);
        v25 = v43;
        v19 = *v30;
        v20 = *v30 & 1;
      }
      goto LABEL_24;
    }
    sub_1C582DB30((uint64_t)this + 352, 2 * v29);
    v19 = *v30;
    if ((*v30 & 1) != 0)
    {
      v32 = 4;
    }
    else
    {
      v32 = *((_DWORD *)this + 92);
      if (!v32)
      {
        v20 = 0;
        v25 = 0;
LABEL_24:
        *v30 = (v19 & 0xFFFFFFFE | v20) + 2;
        if (*(_QWORD *)v25 != -4096)
          --*((_DWORD *)this + 89);
        *(_QWORD *)v25 = a2;
        *((_QWORD *)v25 + 1) = 0;
        goto LABEL_27;
      }
      v6 = (char *)*((_QWORD *)this + 45);
    }
    v20 = *v30 & 1;
    v33 = v32 - 1;
    v34 = (v32 - 1) & (v7 ^ (a2 >> 9));
    v25 = &v6[16 * v34];
    v35 = *(llvm::Value **)v25;
    if (*(llvm::Value **)v25 != a2)
    {
      v36 = 0;
      v37 = 1;
      while (v35 != (llvm::Value *)-4096)
      {
        if (v36)
          v41 = 0;
        else
          v41 = v35 == (llvm::Value *)-8192;
        if (v41)
          v36 = v25;
        v42 = v34 + v37++;
        v34 = v42 & v33;
        v25 = &v6[16 * (v42 & v33)];
        v35 = *(llvm::Value **)v25;
        if (*(llvm::Value **)v25 == a2)
          goto LABEL_24;
      }
      if (v36)
        v25 = v36;
    }
    goto LABEL_24;
  }
LABEL_27:
  *((_QWORD *)v25 + 1) = v18;
  return v18;
}

unsigned __int8 *llvm::Negator::run@<X0>(llvm::Negator *this@<X0>, llvm::Value *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  result = llvm::Negator::negate(this, a2, 0);
  v6 = *(_QWORD *)this;
  v7 = *((unsigned int *)this + 2);
  if (result)
  {
    *(_QWORD *)a3 = v6;
    *(_QWORD *)(a3 + 8) = v7;
    v8 = 1;
    *(_QWORD *)(a3 + 16) = result;
  }
  else
  {
    if ((_DWORD)v7)
    {
      v9 = 8 * v7;
      v10 = v6 - 8;
      do
      {
        result = (unsigned __int8 *)llvm::Instruction::eraseFromParent(*(llvm::Instruction **)(v10 + v9));
        v9 -= 8;
      }
      while (v9);
    }
    v8 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 24) = v8;
  return result;
}

uint64_t llvm::Negator::Negate(char a1, llvm::Value *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ****v20;
  uint64_t ****v21;
  uint64_t ***v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ****v27;
  uint64_t ***v28;
  int v29;
  int v30;
  uint64_t ***v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  uint64_t *v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 **v45;
  unsigned __int8 *v46;
  _BYTE *v47;
  _QWORD *v48;
  uint64_t v49;
  int v50;
  _QWORD *v51;
  uint64_t v52;
  unsigned __int8 *v53[4];
  __int16 v54;
  unsigned int *v55;
  __int128 v56;
  unsigned __int8 *v57;
  uint64_t ****v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  unsigned __int8 *v62;
  void *v63[2];
  _BYTE v64[128];
  void *v65;
  uint64_t v66;
  _QWORD v67[10];
  int v68;
  __int16 v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[2];
  void (**v74)(llvm::IRBuilderCallbackInserter *__hidden);
  _QWORD v75[3];
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  if (!byte_1ED810FA0)
    return 0;
  v4 = **(_QWORD **)a2;
  v5 = a3[7];
  v7 = a3[9];
  v6 = a3[10];
  v8 = v64;
  v63[0] = v64;
  v63[1] = (void *)0x1000000000;
  v9 = v67;
  v65 = v67;
  v66 = 0x200000000;
  v67[6] = v4;
  v67[7] = v73;
  v67[8] = &v74;
  v67[9] = 0;
  v68 = 0;
  v69 = 512;
  v70 = 7;
  v67[4] = 0;
  v67[5] = 0;
  v71 = 0;
  v72 = 0;
  v73[0] = &unk_1E8135C10;
  v73[1] = v6;
  v10 = v75;
  v74 = &off_1E8167568;
  v75[0] = &off_1E817D3D0;
  v76 = v75;
  v77 = v6;
  v75[1] = v63;
  v78 = v5;
  v79 = v7;
  v80 = a1;
  v11 = 45;
  v81 = 1;
  do
  {
    v63[v11] = (void *)-4096;
    v11 += 2;
  }
  while (v11 != 53);
  llvm::Negator::run((llvm::Negator *)v63, a2, (uint64_t)&v58);
  if (!v61)
  {
    v12 = 0;
    goto LABEL_6;
  }
  v55 = (unsigned int *)a3[3];
  v56 = *((_OWORD *)v55 + 3);
  llvm::IRBuilderBase::getCurrentDebugLocation(v55, &v57);
  v15 = a3[3];
  *(_QWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 56) = 0;
  v16 = (uint64_t *)a3[3];
  v17 = *v16;
  v18 = *((unsigned int *)v16 + 2);
  if ((_DWORD)v18)
  {
    v43 = 0;
    v19 = v17 + 16 * v18;
    v44 = 16 * v18;
    while (*(_DWORD *)(v17 + v43))
    {
      v43 += 16;
      if (v44 == v43)
        goto LABEL_18;
    }
    v19 = v17 + v43;
    if (16 * v18 - 16 != v43)
    {
      v48 = (_QWORD *)(v19 + 24);
      v49 = v44 - v43 - 16;
      do
      {
        v50 = *((_DWORD *)v48 - 2);
        if (v50)
        {
          *(_DWORD *)v19 = v50;
          *(_QWORD *)(v19 + 8) = *v48;
          v19 += 16;
        }
        v48 += 2;
        v49 -= 16;
        v8 = v64;
        v9 = v67;
      }
      while (v49);
    }
  }
  else
  {
    v19 = *v16;
  }
LABEL_18:
  *((_DWORD *)v16 + 2) = (unint64_t)(v19 - v17) >> 4;
  if (v59)
  {
    v20 = v58;
    v21 = &v58[v59];
    while (1)
    {
      v22 = *v20;
      if ((*((_BYTE *)*v20 + 23) & 0x10) != 0)
        break;
      v32 = 0;
      v33 = (unsigned __int8 *)&byte_1C871356D;
LABEL_28:
      v35 = (uint64_t *)a3[3];
      v54 = 261;
      v53[0] = v33;
      v53[1] = v32;
      (*(void (**)(uint64_t, uint64_t ***, unsigned __int8 **, uint64_t, uint64_t))(*(_QWORD *)v35[10] + 16))(v35[10], v22, v53, v35[6], v35[7]);
      v36 = *((unsigned int *)v35 + 2);
      if ((_DWORD)v36)
      {
        v39 = *v35;
        v40 = v39 + 16 * v36;
        do
        {
          v41 = *(_DWORD *)v39;
          v42 = *(unsigned __int8 **)(v39 + 8);
          if (v42)
          {
            v52 = v40;
            if (!v41)
            {
              v51 = v9;
              v47 = v8;
              v62 = *(unsigned __int8 **)(v39 + 8);
              llvm::MetadataTracking::track((uint64_t)&v62, v42, 2);
              goto LABEL_59;
            }
          }
          else
          {
            if (!v22[6] && (*((_BYTE *)v22 + 23) & 0x20) == 0)
              goto LABEL_50;
            v52 = v40;
            if (!v41)
            {
              v51 = v9;
              v47 = v8;
              v62 = 0;
LABEL_59:
              v45 = (unsigned __int8 **)(v22 + 6);
              if (&v62 == (unsigned __int8 **)(v22 + 6))
              {
                if (v62)
                  llvm::MetadataTracking::untrack((uint64_t)&v62, v62);
              }
              else
              {
                if (*v45)
                  llvm::MetadataTracking::untrack((uint64_t)(v22 + 6), *v45);
                v46 = v62;
                *v45 = v62;
                if (v46)
                  llvm::MetadataTracking::retrack((uint64_t)&v62, v46, (uint64_t)(v22 + 6));
              }
              v8 = v47;
              v9 = v51;
              goto LABEL_49;
            }
          }
          llvm::Value::setMetadata((llvm::Value *)v22, v41, (llvm::MDNode *)v42);
LABEL_49:
          v40 = v52;
LABEL_50:
          v39 += 16;
        }
        while (v39 != v40);
      }
      if (++v20 == v21)
        goto LABEL_32;
    }
    v23 = ***v22;
    v24 = *(_QWORD *)(v23 + 152);
    v25 = *(unsigned int *)(v23 + 168);
    if ((_DWORD)v25)
    {
      LODWORD(v26) = (v25 - 1) & ((v22 >> 4) ^ (v22 >> 9));
      v27 = (uint64_t ****)(v24 + 16 * v26);
      v28 = *v27;
      if (*v27 == v22)
      {
LABEL_27:
        v31 = v27[1];
        v34 = (unsigned __int8 *)*v31;
        v33 = (unsigned __int8 *)(v31 + 2);
        v32 = v34;
        goto LABEL_28;
      }
      v29 = 1;
      while (v28 != (uint64_t ***)-4096)
      {
        v30 = v26 + v29++;
        v26 = v30 & (v25 - 1);
        v28 = *(uint64_t ****)(v24 + 16 * v26);
        if (v28 == v22)
        {
          v27 = (uint64_t ****)(v24 + 16 * v26);
          goto LABEL_27;
        }
      }
    }
    v27 = (uint64_t ****)(v24 + 16 * v25);
    goto LABEL_27;
  }
LABEL_32:
  v12 = v60;
  v37 = v55;
  if ((_QWORD)v56)
  {
    sub_1C4D8AE2C((uint64_t)v55, v56, *((uint64_t *)&v56 + 1));
    v37 = v55;
  }
  else
  {
    *((_QWORD *)v55 + 6) = 0;
    *((_QWORD *)v37 + 7) = 0;
  }
  v53[0] = v57;
  if (v57)
  {
    llvm::MetadataTracking::track((uint64_t)v53, v57, 2);
    v38 = v53[0];
  }
  else
  {
    v38 = 0;
  }
  sub_1C4774EF4((uint64_t)v37, 0, (uint64_t)v38);
  if (v53[0])
    llvm::MetadataTracking::untrack((uint64_t)v53, v53[0]);
  if (v57)
    llvm::MetadataTracking::untrack((uint64_t)&v57, v57);
LABEL_6:
  if ((v81 & 1) == 0)
    MEMORY[0x1CAA32FB4](v82, 8);
  v74 = &off_1E8167568;
  if (v76 == v75)
  {
    v13 = 4;
  }
  else
  {
    if (!v76)
      goto LABEL_11;
    v13 = 5;
    v10 = v76;
  }
  (*(void (**)(_QWORD *))(*v10 + 8 * v13))(v10);
LABEL_11:
  if (v65 != v9)
    free(v65);
  if (v63[0] != v8)
    free(v63[0]);
  return v12;
}

void sub_1C582D81C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C582D830(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E817D3D0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C582D864(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E817D3D0;
  a2[1] = v2;
  return result;
}

_QWORD *sub_1C582D880(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  v3 = result[1];
  v4 = *(unsigned int *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(result[1], v3 + 16, v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = v2;
  ++*(_DWORD *)(v3 + 8);
  return result;
}

BOOL sub_1C582D8DC(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int v7;
  unint64_t **v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;

  v3 = *(_QWORD *)(a2 + 8);
  if (!v3 || *(_QWORD *)(v3 + 8))
    return 0;
  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 <= 0x1B && v5 != 5)
  {
    v8 = (unint64_t **)(a1 + 24);
    goto LABEL_11;
  }
  if (v5 <= 0x1B)
    v7 = *(unsigned __int16 *)(a2 + 18);
  else
    v7 = v5 - 28;
  if (v7 == 38)
  {
    v10 = *(_DWORD *)(a2 + 20);
    if ((v10 & 0x40000000) != 0)
      v11 = *(uint64_t **)(a2 - 8);
    else
      v11 = (uint64_t *)(a2 - 32 * (v10 & 0x7FFFFFF));
    v12 = *v11;
    LODWORD(v2) = *(unsigned __int8 *)(v12 + 16);
    if ((_DWORD)v2 == 5)
    {
      LODWORD(v2) = *(unsigned __int16 *)(v12 + 18);
      if ((_DWORD)v2 == 26)
      {
        v2 = *(_QWORD *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF));
        if (v2)
        {
          **(_QWORD **)a1 = v2;
          v2 = *(_DWORD *)(v12 + 20) & 0x7FFFFFF;
          v15 = *(_QWORD *)(v12 - 32 * v2 + 32);
          if (v15)
          {
            v2 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)v2 = v15;
            if (*(_BYTE *)(v15 + 16) != 5)
              return 1;
          }
        }
      }
    }
    else if ((_DWORD)v2 == 54)
    {
      v2 = *(_QWORD *)(v12 - 64);
      if (v2)
      {
        **(_QWORD **)a1 = v2;
        v13 = *(_QWORD *)(v12 - 32);
        LODWORD(v2) = *(unsigned __int8 *)(v13 + 16);
        if (v13 && v2 <= 0x14)
        {
          **(_QWORD **)(a1 + 8) = v13;
          if ((_DWORD)v2 != 5)
            return 1;
        }
      }
    }
  }
  v8 = (unint64_t **)(a1 + 24);
  if (v5 != 54)
  {
LABEL_11:
    if (v5 == 5)
    {
      if (*(_WORD *)(a2 + 18) != 26)
      {
LABEL_16:
        LOBYTE(v2) = 0;
        return (v5 == 5) & v2;
      }
      v2 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      if (v2)
      {
        **v8 = v2;
        v9 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
        if (v9)
        {
          **(_QWORD **)(a1 + 32) = v9;
          if (*(_BYTE *)(v9 + 16) != 5)
          {
            LOBYTE(v2) = 1;
            return (v5 == 5) & v2;
          }
        }
        goto LABEL_16;
      }
    }
    return (v5 == 5) & v2;
  }
  v16 = *(_QWORD *)(a2 - 64);
  if (!v16)
    return 0;
  **v8 = v16;
  v17 = *(_QWORD *)(a2 - 32);
  if (!v17)
    return 0;
  v18 = *(unsigned __int8 *)(v17 + 16);
  if (v18 > 0x14)
    return 0;
  **(_QWORD **)(a1 + 32) = v17;
  return v18 != 5;
}

uint64_t sub_1C582DA98(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;

  v3 = result + 8;
  if ((*(_BYTE *)result & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      v7 = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(result + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v12 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_8;
    }
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

int *sub_1C582DB30(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C582DCA8((int *)a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C582DCA8((int *)a1, v14, v9);
}

int *sub_1C582DCA8(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  int *v9;
  int v10;
  unsigned int v11;
  int *v12;
  uint64_t v13;
  int *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 18;
    v5 = result + 2;
  }
  else
  {
    v4 = result[4];
    if (!(_DWORD)v4)
      goto LABEL_5;
    v5 = (_QWORD *)*((_QWORD *)result + 1);
    v6 = &v5[2 * v4];
  }
  do
  {
    *v5 = -4096;
    v5 += 2;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v8 = 4;
        v9 = result + 2;
      }
      else
      {
        v9 = (int *)*((_QWORD *)result + 1);
        v8 = result[4];
      }
      v10 = v8 - 1;
      v11 = (v8 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v12 = &v9[4 * v11];
      v13 = *(_QWORD *)v12;
      if (v7 != *(_QWORD *)v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -4096)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -8192;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = &v9[4 * (v17 & v10)];
          v13 = *(_QWORD *)v12;
          if (v7 == *(_QWORD *)v12)
            goto LABEL_14;
        }
        if (v14)
          v12 = v14;
      }
LABEL_14:
      *(_QWORD *)v12 = v7;
      *((_QWORD *)v12 + 1) = a2[1];
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1C582DDB0()
{
  char v1;
  __int128 v2;
  char *v3;

  dword_1ED810F18 = sub_1C4D9A2C4("instcombine-negator", 0x13uLL, "Controls Negator transformations in InstCombine pass", 0x34uLL);
  v1 = 1;
  v3 = &v1;
  *(_QWORD *)&v2 = "Should we attempt to sink negations?";
  *((_QWORD *)&v2 + 1) = 36;
  sub_1C62A8B74(&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED810F20, &dword_1C475E000);
  *(_QWORD *)&v2 = "What is the maximal lookup depth when trying to check for viability of negation sinking.";
  *((_QWORD *)&v2 + 1) = 88;
  v3 = (char *)&unk_1C86619BC;
  sub_1C62A8C38((int **)&v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED810FE0, &dword_1C475E000);
}

unsigned __int8 **sub_1C582DE88(unsigned __int8 **this, uint64_t a2)
{
  unsigned __int8 **v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;

  v3 = this;
  v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0)
    v5 = *(_QWORD *)(a2 - 8);
  else
    v5 = a2 - 32 * (v4 & 0x7FFFFFF);
  v6 = *(unsigned __int8 **)(*(_QWORD *)v5 + 48);
  v15 = v6;
  if (v6)
    this = (unsigned __int8 **)llvm::MetadataTracking::track((uint64_t)&v15, v6, 2);
  v7 = v3 + 6;
  if (&v15 == v3 + 6)
  {
    if (v15)
      this = (unsigned __int8 **)llvm::MetadataTracking::untrack((uint64_t)&v15, v15);
  }
  else
  {
    if (*v7)
      this = (unsigned __int8 **)llvm::MetadataTracking::untrack((uint64_t)(v3 + 6), *v7);
    v8 = v15;
    *v7 = v15;
    if (v8)
    {
      this = (unsigned __int8 **)llvm::MetadataTracking::retrack((uint64_t)&v15, v8, (uint64_t)(v3 + 6));
      v15 = 0;
    }
  }
  v9 = *(_DWORD *)(a2 + 20);
  if ((v9 & 0x40000000) != 0)
  {
    v10 = *(_QWORD *)(a2 - 8);
    v11 = v9 & 0x7FFFFFF;
  }
  else
  {
    v11 = v9 & 0x7FFFFFF;
    v10 = a2 - 32 * v11;
  }
  if (v11 != 1)
  {
    v12 = (uint64_t *)(v10 + 32);
    v13 = 32 * v11 - 32;
    do
    {
      v14 = *v12;
      v12 += 4;
      this = (unsigned __int8 **)llvm::Instruction::applyMergedLocation((llvm::Instruction *)v3, (const llvm::DILocation *)v3[6], *(const llvm::DILocation **)(v14 + 48));
      v13 -= 32;
    }
    while (v13);
  }
  return this;
}

uint64_t sub_1C582DF94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t i;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  __int32 v39;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40) + 40;
  while (v2 != v3)
  {
    if (v2)
      v4 = v2 - 24;
    else
      v4 = 0;
    v5 = *(unsigned __int8 *)(v4 + 16);
    v6 = (v5 - 33);
    if (v6 > 0x37)
      goto LABEL_9;
    if (((1 << (v5 - 33)) & 0x8000000000041) != 0)
    {
      v7 = *(_QWORD *)(v4 + 64);
      if (v7 && (*(_BYTE *)(v7 + 17) & 0x30) != 0)
        goto LABEL_9;
      v8 = *(_DWORD *)(v4 + 20);
      if (v8 < 0 && (v12 = v4 - 32 * (v8 & 0x7FFFFFF), v15 = *(_QWORD *)(v12 - 8), v13 = v12 - 8, (v14 = v15) != 0))
      {
        v16 = -v14;
        while (1)
        {
          v17 = *(_DWORD *)(*(_QWORD *)(v13 + v16) + 8);
          v18 = v17 > 7;
          v19 = (1 << v17) & 0x83;
          if (v18 || v19 == 0)
            break;
          v16 += 16;
          if (!v16)
            goto LABEL_14;
        }
      }
      else
      {
LABEL_14:
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(v4, 45) & 1) != 0
          || (llvm::CallBase::hasFnAttrOnCalledFunction(v4, 44) & 1) != 0)
        {
          goto LABEL_9;
        }
        v5 = *(unsigned __int8 *)(v4 + 16);
      }
    }
    else
    {
      if (v6 == 27)
      {
        if ((*(_WORD *)(v4 + 18) & 0x301) != 0)
          return 0;
        goto LABEL_9;
      }
      if (((1 << (v5 - 33)) & 0x808001D0000010) == 0)
        goto LABEL_9;
    }
    result = 0;
    v10 = v5 - 33;
    if (v10 > 0x33 || ((1 << v10) & 0x8000000000041) == 0)
      return result;
    v11 = *(_QWORD *)(v4 + 64);
    if (!v11 || (*(_BYTE *)(v11 + 13) & 8) == 0)
    {
      v39 = 7;
      if (sub_1C53E4BBC(v4, &v39, 1uLL))
      {
        v21 = *(_QWORD *)(v4 - 32);
        if (!v21 || *(_BYTE *)(v21 + 16) || *(_QWORD *)(v21 + 24) != *(_QWORD *)(v4 + 72) || *(_DWORD *)(v21 + 36) != 7)
          return 0;
      }
      result = llvm::CallBase::hasFnAttrOnCalledFunction(v4, 11);
      if (!(_DWORD)result)
        return result;
    }
LABEL_9:
    v2 = *(_QWORD *)(v2 + 8);
  }
  v22 = *(_QWORD *)(a1 - 32);
  v23 = *(unsigned __int8 *)(v22 + 16);
  if (v22 && v23 == 59)
  {
    for (i = *(_QWORD *)(v22 + 8); i; i = *(_QWORD *)(i + 8))
    {
      v25 = *(_QWORD *)(i + 24);
      v26 = *(unsigned __int8 *)(v25 + 16);
      if (v26 != 60 && (v26 != 61 || *(_QWORD *)(v25 - 32) != v22))
        return 1;
    }
    if (*(_BYTE *)(*(_QWORD *)(v22 - 32) + 16) == 16)
    {
      v27 = *(_QWORD *)(v22 + 40);
      v28 = *(_QWORD *)(*(_QWORD *)(v27 + 56) + 80);
      v29 = v28 ? v28 - 24 : 0;
      if (v27 == v29 && (*(_WORD *)(v22 + 18) & 0x40) == 0)
        return 0;
    }
  }
  if (v23 != 62)
    return 1;
  v30 = *(_DWORD *)(v22 + 20) & 0x7FFFFFF;
  v31 = (uint64_t *)(v22 - 32 * v30);
  v32 = *v31;
  result = 1;
  if (*v31 && *(_BYTE *)(v32 + 16) == 59 && *(_BYTE *)(*(_QWORD *)(v32 - 32) + 16) == 16)
  {
    v33 = *(_QWORD *)(v32 + 40);
    v34 = *(_QWORD *)(*(_QWORD *)(v33 + 56) + 80);
    v35 = v34 ? v34 - 24 : 0;
    if (v33 == v35 && (*(_WORD *)(v32 + 18) & 0x40) == 0)
    {
      if ((_DWORD)v30 == 1)
        return 0;
      v36 = 2;
      do
      {
        v37 = *(unsigned __int8 *)(v31[4 * (v36 - 1)] + 16);
        result = v37 != 16;
      }
      while (v37 == 16 && (_DWORD)v30 != v36++);
    }
  }
  return result;
}

char *sub_1C582E294(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  llvm::Type ***v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  __int128 *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  char v48;
  uint64_t *v49;
  BOOL v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  llvm::Type *v81;
  const char *v82;
  unsigned int PrimitiveSizeInBits;
  const char *v84;
  unsigned int v85;
  unsigned __int8 *v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t *v90;
  int v91;
  uint64_t **v92;
  llvm::Instruction **v93;
  llvm::Instruction **v94;
  llvm::Instruction *v95;
  uint64_t v97;
  uint64_t v98;
  int v99;
  llvm::Type ***v100;
  unsigned __int8 **v101;
  uint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  int v111;
  int v112;
  char v113;
  uint64_t v114;
  int v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  __int16 v123;
  uint64_t v125;
  llvm::PHINode *v126;
  int v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  unsigned int v131;
  BOOL v132;
  uint64_t v134;
  char *v135;
  llvm::PHINode *v136;
  uint64_t v137;
  int v138;
  _QWORD **v139;
  _QWORD *v140;
  uint64_t ****v141;
  _QWORD *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  llvm::PHINode *v147;
  uint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  int v151;
  _QWORD **v152;
  _QWORD *v153;
  int v154;
  uint64_t v155;
  llvm::Type *v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  uint64_t *v170;
  uint64_t v171;
  unsigned __int8 *v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  char *v182;
  int v183;
  char *v184;
  uint64_t *v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t **v190;
  uint64_t v191;
  int v192;
  uint64_t *v193;
  __int16 v194;
  unsigned int v195;
  int v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t **v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t v209;
  int v210;
  int v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t *v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t **v225;
  uint64_t v226;
  int v227;
  uint64_t *v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  _QWORD *v239;
  llvm::PHINode *v240;
  char *v241;
  uint64_t v242;
  _QWORD *v243;
  _QWORD *v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t *v248;
  uint64_t v249;
  uint64_t *v250;
  uint64_t *v251;
  BOOL v252;
  uint64_t v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  uint64_t v262;
  int v263;
  unsigned int v264;
  llvm::PHINode **v265;
  llvm::PHINode *v266;
  llvm::PHINode **v267;
  int v268;
  BOOL v269;
  unsigned int v270;
  llvm::PHINode **v271;
  _QWORD *v272;
  uint64_t v273;
  uint64_t v274;
  unsigned int *v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t *v281;
  uint64_t v282;
  int v283;
  int v284;
  _QWORD *v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  char *v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  unsigned int *v293;
  llvm::PHINode *v294;
  unint64_t v295;
  int v296;
  uint64_t v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  int v303;
  char *v304;
  uint64_t v305;
  char *v306;
  uint64_t v307;
  unint64_t v308;
  int v309;
  char v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  char v315;
  uint64_t v316;
  uint64_t **v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t *v322;
  uint64_t v323;
  int v324;
  int v325;
  _QWORD *v326;
  uint64_t v327;
  char *v328;
  uint64_t v329;
  int v330;
  _QWORD *v331;
  llvm::PHINode *v332;
  char *v333;
  uint64_t v334;
  _QWORD *v335;
  _QWORD *v336;
  int v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t *v340;
  uint64_t v341;
  uint64_t *v342;
  uint64_t *v343;
  uint64_t v344;
  BOOL v345;
  uint64_t v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  int v353;
  uint64_t v354;
  int v355;
  unsigned int v356;
  llvm::PHINode **v357;
  llvm::PHINode *v358;
  llvm::PHINode **v359;
  int v360;
  BOOL v361;
  unsigned int v362;
  llvm::PHINode **v363;
  _QWORD *v364;
  uint64_t v365;
  unint64_t v366;
  uint64_t v367;
  llvm::ValueSymbolTable *v368;
  void *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t *v375;
  uint64_t v376;
  int v377;
  int v378;
  uint64_t v379;
  llvm::ValueSymbolTable *v380;
  llvm::PHINode *v381;
  char v382;
  llvm::PHINode *v383;
  uint64_t v384;
  llvm::PHINode *v385;
  uint64_t v386;
  uint64_t **v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t *v392;
  uint64_t v393;
  int v394;
  int v395;
  _QWORD *v396;
  uint64_t v397;
  char *v398;
  uint64_t v399;
  _QWORD *v400;
  llvm::Value *v401;
  char *v402;
  uint64_t v403;
  _QWORD *v404;
  _QWORD *v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  int v409;
  uint64_t v410;
  int v411;
  unsigned int v412;
  llvm::Value **v413;
  llvm::Value *v414;
  llvm::Value **v415;
  int v416;
  BOOL v417;
  unsigned int v418;
  llvm::Value **v419;
  _QWORD *v420;
  uint64_t v421;
  unint64_t v422;
  int v423;
  uint64_t v424;
  uint64_t v425;
  llvm::ValueSymbolTable *v426;
  int v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  llvm::PHINode *v431;
  unsigned __int8 v432;
  llvm::PHINode *v433;
  int v434;
  uint64_t v435;
  char *v436;
  char *v437;
  char *v438;
  uint64_t *v439;
  uint64_t *v440;
  uint64_t *v441;
  void *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  int v447;
  llvm::Value *v448;
  unsigned int v449;
  void *v450;
  unsigned int v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  int v455;
  uint64_t v456;
  int v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  llvm::PHINode **v462;
  llvm::PHINode *v463;
  int v464;
  int v465;
  llvm::PHINode *v466;
  char *v467;
  uint64_t v468;
  uint64_t v469;
  _QWORD *v470;
  llvm::PHINode *v471;
  uint64_t *v472;
  uint64_t v473;
  _QWORD *v474;
  _QWORD *v475;
  uint64_t v476;
  int v477;
  char *v478;
  char *v479;
  char *v480;
  uint64_t **v481;
  uint64_t v482;
  uint64_t v483;
  unsigned int v484;
  unsigned __int8 **v485;
  int v486;
  unsigned __int8 *v487;
  uint64_t v488;
  int v489;
  uint64_t v490;
  int v491;
  unsigned int v492;
  _QWORD *v493;
  uint64_t v494;
  _QWORD *v495;
  int v496;
  BOOL v497;
  unsigned int v498;
  uint64_t v499;
  llvm::MDNode **v500;
  uint64_t v501;
  unsigned __int8 *v502;
  llvm::MDNode *v503;
  _QWORD *v504;
  uint64_t v505;
  int v506;
  uint64_t v507;
  char *v508;
  char *v509;
  char *v510;
  char *v511;
  uint64_t v513;
  char *v514;
  uint64_t v515;
  _BYTE *v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  _QWORD *v521;
  uint64_t v522;
  unsigned __int8 *v523;
  uint64_t v524;
  int v525;
  uint64_t v526;
  uint64_t v527;
  char *v528;
  char *v529;
  uint64_t v530;
  uint64_t v531;
  int v532;
  uint64_t v533;
  uint64_t *v534;
  uint64_t v535;
  uint64_t v536;
  _QWORD *v537;
  char *v538;
  uint64_t v539;
  uint64_t v540;
  llvm::PHINode *v541;
  llvm::PHINode *v542;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  llvm::PHINode *v549;
  uint64_t *v550;
  llvm::GetElementPtrInst *TypeAtIndex;
  uint64_t v552;
  uint64_t v553;
  BOOL v554;
  char *v555;
  unsigned int v556;
  llvm::Value *v557;
  uint64_t v558;
  unsigned int v559;
  llvm::PHINode *v560;
  llvm::Type **v561;
  uint64_t v562;
  llvm::Type *v563;
  uint64_t **v564;
  uint64_t v565;
  uint64_t ***v566;
  uint64_t v567;
  char *v568;
  char *v569;
  uint64_t v570;
  char *v571;
  uint64_t v572;
  uint64_t ***v573;
  int v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t ****v579;
  uint64_t ***v580;
  int v581;
  int v582;
  uint64_t ***v583;
  char *v584;
  uint64_t **v585;
  uint64_t **v586;
  _QWORD *v587;
  char *v588;
  uint64_t v589;
  _QWORD *v590;
  _QWORD *v591;
  int v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t *v595;
  uint64_t v596;
  uint64_t v597;
  int v598;
  uint64_t v599;
  int v600;
  unsigned int v601;
  llvm::PHINode **v602;
  llvm::PHINode *v603;
  llvm::PHINode **v604;
  int v605;
  BOOL v606;
  unsigned int v607;
  llvm::PHINode **v608;
  _QWORD *v609;
  uint64_t v610;
  uint64_t v611;
  int v612;
  uint64_t v613;
  uint64_t ***v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t ****v619;
  uint64_t ***v620;
  int v621;
  int v622;
  uint64_t ***v623;
  char *v624;
  uint64_t **v625;
  uint64_t **v626;
  _QWORD *v627;
  char *v628;
  uint64_t v629;
  _QWORD *v630;
  _QWORD *v631;
  int v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t *v635;
  uint64_t v636;
  uint64_t v637;
  int v638;
  uint64_t v639;
  int v640;
  unsigned int v641;
  llvm::PHINode **v642;
  llvm::PHINode *v643;
  llvm::PHINode **v644;
  int v645;
  BOOL v646;
  unsigned int v647;
  llvm::PHINode **v648;
  _QWORD *v649;
  uint64_t v650;
  uint64_t v651;
  int v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t *v657;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  int v663;
  uint64_t *v664;
  int v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  llvm::ValueSymbolTable *v669;
  uint64_t v670;
  llvm::ValueSymbolTable *v671;
  llvm::UndefValue *v672;
  llvm::Value *v673;
  llvm::UndefValue *v674;
  llvm::Value *v675;
  uint64_t v676;
  uint64_t v677;
  char *v678;
  _QWORD *v679;
  _QWORD *v680;
  uint64_t v681;
  uint64_t v682;
  char *v683;
  uint64_t v684;
  char *v685;
  int v686[2];
  int v687[2];
  uint64_t v688;
  llvm::PHINode *v689;
  llvm::PHINode *v690;
  unsigned __int8 v691;
  llvm::PHINode *v692;
  llvm::PHINode *v693;
  llvm::PHINode *v694;
  llvm::PHINode *v695;
  llvm::PHINode *v696;
  llvm::PHINode *v697;
  int v698;
  llvm::PHINode *v699;
  llvm::PHINode *v700;
  llvm::PHINode *v701;
  llvm::PHINode *v702;
  llvm::PHINode *v703;
  llvm::PHINode *v704;
  llvm::PHINode *v705;
  int v706;
  char v707;
  llvm::PHINode *v708;
  llvm::PHINode *v709;
  llvm::PHINode *v710;
  char v711;
  uint64_t v712[4];
  __int16 v713;
  std::string __dst;
  __int128 v715;
  __int128 v716;
  uint64_t v717;
  uint64_t v718;

  v2 = a2;
  v718 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(v4 + 40);
  if (v5 != v4 + 40)
  {
    v6 = v5 ? v5 - 24 : 0;
    v7 = *(unsigned __int8 *)(v6 + 16);
    if ((v7 - 29) <= 0xA)
    {
      v8 = v7 - 38;
      v25 = v8 > 0x38;
      v9 = (1 << v8) & 0x100060000000001;
      if (!v25 && v9 != 0)
        return 0;
    }
  }
  v11 = *(_DWORD *)(a2 + 20);
  if ((v11 & 0x40000000) != 0)
    v12 = *(uint64_t **)(a2 - 8);
  else
    v12 = (uint64_t *)(a2 - 32 * (v11 & 0x7FFFFFF));
  v13 = *v12;
  v14 = *(unsigned __int8 *)(*v12 + 16);
  if (v14 <= 91)
  {
    if (v14 == 60)
    {
      if ((v11 & 0x40000000) != 0)
        v20 = *(uint64_t **)(a2 - 8);
      else
        v20 = (uint64_t *)(a2 - 32 * (v11 & 0x7FFFFFF));
      v69 = *v20;
      if (llvm::Value::isSwiftError(*(llvm::Value **)(*v20 - 32)))
        return 0;
      v70 = *(unsigned __int8 *)(v69 + 16);
      if (v70 == 60 || v70 == 61)
      {
        v71 = *(unsigned __int16 *)(v69 + 18);
        if ((v71 & 0x380) != 0)
          return 0;
      }
      else
      {
        if ((v70 - 63) < 3)
          return 0;
        v71 = *(unsigned __int16 *)(v69 + 18);
      }
      v72 = **(_QWORD **)(v69 - 32);
      v73 = *(_DWORD *)(v72 + 8);
      if ((v73 & 0xFE) == 0x12)
        v73 = *(_DWORD *)(**(_QWORD **)(v72 + 16) + 8);
      v74 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 56) + 40);
      if (*(char *)(v74 + 239) < 0)
        sub_1C47EBC30(&__dst, *(void **)(v74 + 216), *(_QWORD *)(v74 + 224));
      else
        __dst = *(std::string *)(v74 + 216);
      if (!std::string::compare(&__dst, 0, 4uLL, "agx1"))
      {
        v113 = 27;
      }
      else if (!std::string::compare(&__dst, 0, 4uLL, "agx2"))
      {
        v113 = 28;
      }
      else if (!std::string::compare(&__dst, 0, 4uLL, "agx3"))
      {
        v113 = 29;
      }
      else
      {
        v113 = 0;
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      v195 = v73 >> 8;
      if ((v113 & 0x1E) != 0x1C || v195 != 64)
      {
        v196 = *(_DWORD *)(v2 + 20);
        v197 = (v196 & 0x40000000) != 0 ? *(_QWORD *)(v2 - 8) : v2 - 32 * (v196 & 0x7FFFFFF);
        if (*(_QWORD *)(v69 + 40) == *(_QWORD *)(v197 + 32 * *(unsigned int *)(v2 + 60))
          && sub_1C582DF94(v69))
        {
          v704 = (llvm::PHINode *)v2;
          v198 = v71 & 1;
          if ((v71 & 1) == 0)
            goto LABEL_530;
          v199 = *(_QWORD *)(v69 + 40);
          v200 = *(_QWORD *)(v199 + 40);
          if (v200 == v199 + 40)
          {
            v201 = 0;
          }
          else
          {
            if (v200)
              v201 = v200 - 24;
            else
              v201 = 0;
            if (*(unsigned __int8 *)(v201 + 16) - 29 >= 0xB)
              v201 = 0;
          }
          v309 = *(unsigned __int8 *)(v201 + 16);
          if (v309 != 30)
            __asm { BR              X11 }
          if ((*(_DWORD *)(v201 + 20) & 0x7FFFFFF) != 3)
          {
LABEL_530:
            v432 = __clz(1 << (v71 >> 1)) ^ 0x3F;
            v433 = v704;
            v434 = *((_DWORD *)v704 + 5);
            if ((v434 & 0x40000000) != 0)
            {
              v436 = (char *)*((_QWORD *)v704 - 1);
              v437 = &v436[32 * *((unsigned int *)v704 + 15)];
              v435 = v434 & 0x7FFFFFF;
            }
            else
            {
              v435 = v434 & 0x7FFFFFF;
              v436 = (char *)v704 - 32 * v435;
              v437 = &v436[32 * *((unsigned int *)v704 + 15)];
            }
            v438 = &v437[8 * v435];
            v439 = (uint64_t *)(v437 + 8);
            if (v437 + 8 == v438)
            {
              v698 = v71 & 1;
              goto LABEL_570;
            }
            v691 = v432;
            v440 = (uint64_t *)&v436[32 * v435];
            v441 = (uint64_t *)(v436 + 32);
            if (v436 + 32 == (char *)v440)
            {
              v698 = v71 & 1;
              v433 = v704;
              goto LABEL_568;
            }
            v442 = &unk_1C86619D6;
            while (1)
            {
              v40 = 0;
              v443 = *v441;
              if (!*v441 || *(_BYTE *)(v443 + 16) != 60)
                return v40;
              v444 = *(_QWORD *)(v443 + 8);
              if (!v444)
                return 0;
              v445 = *v439;
              v446 = *(_QWORD *)(v444 + 8);
              if (v446)
                break;
LABEL_542:
              v447 = *(unsigned __int16 *)(v443 + 18);
              if ((v447 & 0x380) != 0 || (((v198 != 0) ^ v447) & 1) != 0)
                return 0;
              v448 = *(llvm::Value **)(v443 - 32);
              v449 = *(_DWORD *)(*(_QWORD *)v448 + 8);
              if ((v449 & 0xFE) == 0x12)
                v449 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v448 + 16) + 8);
              v698 = v198;
              if (v195 != v449 >> 8)
                return 0;
              v450 = v442;
              if (llvm::Value::isSwiftError(v448)
                || *(_QWORD *)(v443 + 40) != v445
                || !sub_1C582DF94(v443))
              {
                return 0;
              }
              v451 = __clz(1 << ((unint64_t)*(unsigned __int16 *)(v443 + 18) >> 1)) ^ 0x3F;
              if (v451 >= v691)
                LOBYTE(v451) = v691;
              v691 = v451;
              v198 = v698;
              v442 = v450;
              if (v698)
              {
                v452 = *(_QWORD *)(v443 + 40);
                v453 = *(_QWORD *)(v452 + 40);
                if (v453 == v452 + 40)
                {
                  v454 = 0;
                }
                else
                {
                  if (v453)
                    v454 = v453 - 24;
                  else
                    v454 = 0;
                  if (*(unsigned __int8 *)(v454 + 16) - 29 >= 0xB)
                    v454 = 0;
                }
                v455 = *(unsigned __int8 *)(v454 + 16);
                if (v455 != 30)
                  __asm { BR              X10 }
                if ((*(_DWORD *)(v454 + 20) & 0x7FFFFFF) == 3)
                  return 0;
              }
              if (++v439 != (uint64_t *)v438)
              {
                v441 += 4;
                if (v441 != v440)
                  continue;
              }
              v433 = v704;
              v434 = *((_DWORD *)v704 + 5);
LABEL_568:
              v432 = v691;
LABEL_570:
              v456 = **(_QWORD **)(v69 - 32);
              v457 = v434 & 0x7FFFFFF;
              if ((v434 & 0x10000000) != 0)
              {
                v458 = ***(_QWORD ***)v433;
                v459 = *(_QWORD *)(v458 + 152);
                v460 = *(unsigned int *)(v458 + 168);
                if ((_DWORD)v460)
                {
                  LODWORD(v461) = (v460 - 1) & ((v433 >> 4) ^ (v433 >> 9));
                  v462 = (llvm::PHINode **)(v459 + 16 * v461);
                  v463 = *v462;
                  if (*v462 != v433)
                  {
                    v464 = 1;
                    do
                    {
                      if (v463 == (llvm::PHINode *)-4096)
                        goto LABEL_577;
                      v465 = v461 + v464++;
                      v461 = v465 & (v460 - 1);
                      v463 = *(llvm::PHINode **)(v459 + 16 * v461);
                    }
                    while (v463 != v433);
                    v462 = (llvm::PHINode **)(v459 + 16 * v461);
                  }
                }
                else
                {
LABEL_577:
                  v462 = (llvm::PHINode **)(v459 + 16 * v460);
                }
                v466 = v462[1];
                v469 = *(_QWORD *)v466;
                v467 = (char *)v466 + 16;
                v468 = v469;
              }
              else
              {
                v468 = 0;
                v467 = &byte_1C871356D;
              }
              LOWORD(v717) = 773;
              *(_QWORD *)&v715 = v467;
              *((_QWORD *)&v715 + 1) = v468;
              *(_QWORD *)&v716 = ".in";
              v470 = operator new(0x48uLL);
              v470[1] = v456;
              v471 = (llvm::PHINode *)(v470 + 1);
              *v470 = 0;
              v470[2] = 0;
              v472 = v470 + 2;
              v470[3] = 0x4000000000000053;
              *((_OWORD *)v470 + 2) = 0u;
              *((_OWORD *)v470 + 3) = 0u;
              *((_DWORD *)v470 + 16) = 0;
              *((_DWORD *)v470 + 17) = v457;
              llvm::Value::setName((uint64_t ***)v470 + 1, (uint64_t)&v715);
              v473 = *((unsigned int *)v470 + 17);
              v474 = operator new(40 * v473);
              *v470 = v474;
              if ((_DWORD)v473)
              {
                v475 = &v474[4 * v473];
                do
                {
                  *v474 = 0;
                  v474[1] = 0;
                  v474[2] = 0;
                  v474[3] = v471;
                  v474 += 4;
                }
                while (v474 != v475);
              }
              v692 = (llvm::PHINode *)(v470 + 1);
              v476 = *(_QWORD *)(v69 - 32);
              v477 = *((_DWORD *)v433 + 5);
              v685 = (char *)v470;
              if ((v477 & 0x40000000) != 0)
                v478 = (char *)*((_QWORD *)v433 - 1);
              else
                v478 = (char *)v433 - 32 * (v477 & 0x7FFFFFF);
              v688 = a1;
              sub_1C477667C(v471, v476, *(_QWORD *)&v478[32 * *((unsigned int *)v433 + 15)]);
              v479 = (char *)operator new(0x60uLL);
              v480 = v479;
              *((_DWORD *)v479 + 13) = *((_DWORD *)v479 + 13) & 0x38000000 | 1;
              v40 = v479 + 32;
              *(_QWORD *)v479 = 0;
              *((_QWORD *)v479 + 1) = 0;
              *((_QWORD *)v479 + 2) = 0;
              *((_QWORD *)v479 + 3) = v479 + 32;
              v481 = *(uint64_t ***)v69;
              LOWORD(v717) = 257;
              *((_QWORD *)v479 + 4) = v481;
              *((_QWORD *)v479 + 5) = 0;
              *((_WORD *)v479 + 24) = 60;
              *((_DWORD *)v479 + 13) = 1;
              *(_OWORD *)(v479 + 56) = 0u;
              *(_OWORD *)(v479 + 72) = 0u;
              *((_DWORD *)v479 + 22) = 0;
              v482 = *v472;
              *(_QWORD *)v479 = v471;
              *((_QWORD *)v479 + 1) = v482;
              if (v482)
                *(_QWORD *)(v482 + 16) = v479 + 8;
              v683 = v479 + 8;
              *((_QWORD *)v479 + 2) = v472;
              *v472 = (uint64_t)v479;
              *((_WORD *)v479 + 25) = v698 & 0xFF81 | (2 * (v432 & 0x3F));
              v479[92] = 1;
              llvm::Value::setName((uint64_t ***)v479 + 4, (uint64_t)&v715);
              v483 = 0;
              v715 = xmmword_1C86619EC;
              v716 = unk_1C86619FC;
              v717 = 0x190000000DLL;
              v484 = (v69 >> 4) ^ (v69 >> 9);
              v485 = (unsigned __int8 **)(v480 + 80);
              while (2)
              {
                v486 = *((_DWORD *)&v715 + v483);
                v487 = *(unsigned __int8 **)(v69 + 48);
                if (!v487)
                {
                  if ((*(_BYTE *)(v69 + 23) & 0x20) != 0 && v486)
                    goto LABEL_594;
                  goto LABEL_608;
                }
                if (v486)
                {
                  if ((*(_BYTE *)(v69 + 23) & 0x20) == 0)
                    goto LABEL_608;
LABEL_594:
                  v488 = ***(_QWORD ***)v69;
                  v712[0] = v69;
                  v489 = *(_DWORD *)(v488 + 2496);
                  if (!v489)
                  {
                    v504 = 0;
                    goto LABEL_625;
                  }
                  v490 = *(_QWORD *)(v488 + 2480);
                  v491 = v489 - 1;
                  v492 = v491 & v484;
                  v493 = (_QWORD *)(v490 + 40 * (v491 & v484));
                  v494 = *v493;
                  if (*v493 != v69)
                  {
                    v495 = 0;
                    v496 = 1;
                    while (v494 != -4096)
                    {
                      if (v495)
                        v497 = 0;
                      else
                        v497 = v494 == -8192;
                      if (v497)
                        v495 = v493;
                      v498 = v492 + v496++;
                      v492 = v498 & v491;
                      v493 = (_QWORD *)(v490 + 40 * v492);
                      v494 = *v493;
                      if (*v493 == v69)
                        goto LABEL_604;
                    }
                    if (v495)
                      v504 = v495;
                    else
                      v504 = v493;
LABEL_625:
                    v493 = sub_1C541AB24(v488 + 2480, (uint64_t)v712, v712, v504);
                    v505 = v712[0];
                    v493[4] = 0;
                    v493[3] = 0;
                    *v493 = v505;
                    v493[1] = v493 + 3;
                    v493[2] = 0x100000000;
                  }
LABEL_604:
                  v499 = *((unsigned int *)v493 + 4);
                  if ((_DWORD)v499)
                  {
                    v500 = (llvm::MDNode **)(v493[1] + 8);
                    v501 = 16 * v499;
                    while (*((_DWORD *)v500 - 2) != v486)
                    {
                      v500 += 2;
                      v501 -= 16;
                      if (!v501)
                        goto LABEL_608;
                    }
                    v503 = *v500;
                    if (*v500)
                    {
LABEL_613:
                      llvm::Value::setMetadata((llvm::Value *)v40, v486, v503);
                      goto LABEL_620;
                    }
                  }
LABEL_608:
                  v502 = *v485;
                  if (*v485 || (v480[55] & 0x20) != 0)
                  {
                    if (v486)
                    {
                      v503 = 0;
                      goto LABEL_613;
                    }
                    v712[0] = 0;
LABEL_616:
                    if (v502)
                      llvm::MetadataTracking::untrack((uint64_t)(v480 + 80), v502);
                    v502 = (unsigned __int8 *)v712[0];
                    *v485 = (unsigned __int8 *)v712[0];
                    if (v502)
                      llvm::MetadataTracking::retrack((uint64_t)v712, v502, (uint64_t)(v480 + 80));
                  }
LABEL_620:
                  if (++v483 == 10)
                  {
                    v506 = *((_DWORD *)v704 + 5);
                    if ((v506 & 0x40000000) != 0)
                    {
                      v508 = (char *)*((_QWORD *)v704 - 1);
                      v509 = &v508[32 * *((unsigned int *)v704 + 15)];
                      v507 = v506 & 0x7FFFFFF;
                      v510 = &v509[8 * v507];
                    }
                    else
                    {
                      v507 = v506 & 0x7FFFFFF;
                      v508 = (char *)v704 - 32 * v507;
                      v509 = &v508[32 * *((unsigned int *)v704 + 15)];
                      v510 = &v509[8 * v507];
                    }
                    v511 = v508 + 32;
                    if (v509 + 8 != v510 && v511 != &v508[32 * v507])
                    {
                      v513 = 32 * v507 - 64;
                      v514 = v509 + 16;
                      do
                      {
                        v515 = *((_QWORD *)v514 - 1);
                        v516 = *(_BYTE **)v511;
                        v511 += 32;
                        llvm::combineMetadata((uint64_t)v40, v516, (unsigned int *)&v715, 10, 1);
                        v517 = *((_QWORD *)v516 - 4);
                        if (v517 != v476)
                          v476 = 0;
                        sub_1C477667C(v692, v517, v515);
                        if (v514 == v510)
                          break;
                        v518 = v513;
                        v513 -= 32;
                        v514 += 8;
                      }
                      while (v518);
                    }
                    if (v476)
                    {
                      v162 = (uint64_t)v704;
                      if (*(_QWORD *)v480)
                      {
                        **((_QWORD **)v480 + 2) = *((_QWORD *)v480 + 1);
                        v519 = *((_QWORD *)v480 + 1);
                        if (v519)
                          *(_QWORD *)(v519 + 16) = *((_QWORD *)v480 + 2);
                      }
                      *(_QWORD *)v480 = v476;
                      v522 = *(_QWORD *)(v476 + 8);
                      v521 = (_QWORD *)(v476 + 8);
                      v520 = v522;
                      *((_QWORD *)v480 + 1) = v522;
                      if (v522)
                        *(_QWORD *)(v520 + 16) = v683;
                      *((_QWORD *)v480 + 2) = v521;
                      *v521 = v480;
                      if ((v685[31] & 8) != 0)
                      {
                        v674 = llvm::UndefValue::get(*(llvm::UndefValue **)v692, (llvm::Type *)v502);
                        llvm::ValueAsMetadata::handleRAUW((uint64_t *)v692, v674, v675);
                      }
                      v523 = (unsigned __int8 *)*((_QWORD *)v685 + 7);
                      if (v523)
                        llvm::MetadataTracking::untrack((uint64_t)(v685 + 56), v523);
                      llvm::Value::~Value(v692, (llvm::Value *)v523);
                      v525 = *((_DWORD *)v685 + 7);
                      v526 = v525 & 0x7FFFFFF;
                      if ((v525 & 0x40000000) != 0)
                      {
                        v569 = *(char **)v685;
                        if ((_DWORD)v526)
                        {
                          v570 = 32 * v526;
                          do
                          {
                            v571 = &v569[v570];
                            if (*(_QWORD *)&v569[v570 - 32])
                            {
                              **((_QWORD **)v571 - 2) = *((_QWORD *)v571 - 3);
                              v572 = *((_QWORD *)v571 - 3);
                              if (v572)
                                *(_QWORD *)(v572 + 16) = *((_QWORD *)v571 - 2);
                            }
                            v570 -= 32;
                          }
                          while (v570);
                        }
                        operator delete(v569);
                        operator delete(v685);
                        v162 = (uint64_t)v704;
                      }
                      else
                      {
                        v527 = v526;
                        v528 = (char *)(v524 - 32 * v526);
                        if ((_DWORD)v526)
                        {
                          v529 = v685 - 8;
                          v530 = -32 * v527;
                          do
                          {
                            if (*((_QWORD *)v529 - 2))
                            {
                              **(_QWORD **)v529 = *((_QWORD *)v529 - 1);
                              v531 = *((_QWORD *)v529 - 1);
                              if (v531)
                                *(_QWORD *)(v531 + 16) = *(_QWORD *)v529;
                            }
                            v529 -= 32;
                            v530 += 32;
                          }
                          while (v530);
                        }
                        if (v525 < 0)
                          v528 = &v528[-*((_QWORD *)v528 - 1) - 8];
                        operator delete(v528);
                      }
                    }
                    else
                    {
                      v162 = (uint64_t)v704;
                      sub_1C57D7818(v688, v692, (uint64_t)v704);
                    }
                    if (v698)
                    {
                      v532 = *(_DWORD *)(v162 + 20);
                      if ((v532 & 0x40000000) != 0)
                      {
                        v534 = *(uint64_t **)(v162 - 8);
                        v533 = v532 & 0x7FFFFFF;
                      }
                      else
                      {
                        v533 = v532 & 0x7FFFFFF;
                        v534 = (uint64_t *)(v162 - 32 * v533);
                      }
                      if (v533)
                      {
                        v535 = 32 * v533;
                        do
                        {
                          v536 = *v534;
                          v534 += 4;
                          *(_WORD *)(v536 + 18) &= ~1u;
                          v535 -= 32;
                        }
                        while (v535);
                      }
                    }
LABEL_308:
                    v182 = v40;
                    goto LABEL_309;
                  }
                  continue;
                }
                break;
              }
              v712[0] = *(_QWORD *)(v69 + 48);
              llvm::MetadataTracking::track((uint64_t)v712, v487, 2);
              v502 = *v485;
              goto LABEL_616;
            }
            while (*(_QWORD *)(v446 + 24) == *(_QWORD *)(v444 + 24))
            {
              v444 = *(_QWORD *)(v444 + 8);
              v446 = *(_QWORD *)(v446 + 8);
              if (!v446)
                goto LABEL_542;
            }
          }
        }
      }
      return 0;
    }
    if (v14 == 62)
    {
      if ((v11 & 0x40000000) != 0)
        v15 = *(uint64_t **)(a2 - 8);
      else
        v15 = (uint64_t *)(a2 - 32 * (v11 & 0x7FFFFFF));
      v28 = *v15;
      v29 = *(_DWORD *)(*v15 + 20) & 0x7FFFFFF;
      *(_QWORD *)&v715 = &v716;
      *((_QWORD *)&v715 + 1) = 0x1000000000;
      if (v29 >= 0x11)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v715, (uint64_t)&v716, v29, 8);
        v30 = DWORD2(v715);
        v32 = (__int128 *)v715;
        v31 = DWORD2(v715);
      }
      else
      {
        v30 = 0;
        if (!(_DWORD)v29)
          goto LABEL_43;
        v31 = 0;
        v32 = &v716;
      }
      v33 = (_QWORD *)v32 + v31;
      v34 = -32 * v29;
      do
      {
        *v33++ = *(_QWORD *)(v28 + v34);
        v34 += 32;
      }
      while (v34);
      v11 = *(_DWORD *)(v2 + 20);
LABEL_43:
      v35 = (v30 + v29);
      DWORD2(v715) = v30 + v29;
      if ((v11 & 0x40000000) != 0)
      {
        v37 = *(_QWORD *)(v2 - 8);
        v36 = v11 & 0x7FFFFFF;
      }
      else
      {
        v36 = v11 & 0x7FFFFFF;
        v37 = v2 - 32 * v36;
      }
      if (v36 != 1)
      {
        v47 = v2;
        v48 = 0;
        v49 = (uint64_t *)(v37 + 32);
        v50 = 1;
        LOBYTE(v2) = 1;
        v51 = (uint64_t *)(v37 + 32 * v36);
        while (1)
        {
          v40 = 0;
          v52 = *v49;
          if (!*v49 || *(_BYTE *)(v52 + 16) != 62)
            goto LABEL_60;
          v53 = *(_QWORD *)(v52 + 8);
          if (!v53)
            goto LABEL_59;
          v54 = *(_QWORD *)(v53 + 8);
          if (v54)
            break;
LABEL_69:
          if (*(_QWORD *)(v52 + 64) != *(_QWORD *)(v28 + 64))
            goto LABEL_59;
          v55 = *(_DWORD *)(v52 + 20);
          v56 = *(_DWORD *)(v28 + 20);
          if (((v56 ^ v55) & 0x7FFFFFF) != 0)
            goto LABEL_59;
          if (v50 && (v57 = v55 & 0x7FFFFFF, v58 = v52 - 32 * v57, *(_BYTE *)(*(_QWORD *)v58 + 16) == 59))
          {
            if ((_DWORD)v57 == 1)
            {
              v50 = 1;
            }
            else
            {
              v59 = 2;
              do
              {
                v60 = *(unsigned __int8 *)(*(_QWORD *)(v58 + 32 * (v59 - 1)) + 16);
                v50 = v60 == 16;
                if ((_DWORD)v57 == v59)
                  break;
                ++v59;
              }
              while (v60 == 16);
            }
          }
          else
          {
            v50 = 0;
          }
          v61 = *(_BYTE *)(v52 + 17);
          v62 = v56 & 0x7FFFFFF;
          if ((v56 & 0x7FFFFFF) != 0)
          {
            v63 = 0;
            v64 = 8 * v62;
            v65 = v28;
            v66 = *v49;
            do
            {
              v67 = *(_QWORD *)(v65 - 32 * (*(_DWORD *)(v28 + 20) & 0x7FFFFFF));
              v68 = *(_QWORD *)(v66 - 32 * (*(_DWORD *)(v52 + 20) & 0x7FFFFFF));
              if (v67 != v68)
              {
                if (*(_BYTE *)(v67 + 16) == 16
                  || *(_BYTE *)(v68 + 16) == 16
                  || (*(_QWORD *)v67 != *(_QWORD *)v68) | v48 & 1)
                {
                  goto LABEL_59;
                }
                *(_QWORD *)(v715 + v63) = 0;
                v48 = 1;
              }
              v63 += 8;
              v66 += 32;
              v65 += 32;
            }
            while (v64 != v63);
          }
          LODWORD(v2) = v2 & ((v61 & 2) >> 1);
          v49 += 4;
          if (v49 == v51)
          {
            if (v50)
              goto LABEL_59;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst.__r_.__value_.__r.__words[2];
            HIDWORD(__dst.__r_.__value_.__r.__words[1]) = 16;
            if (v35 > 0x10)
            {
              LODWORD(__dst.__r_.__value_.__r.__words[1]) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)&__dst.__r_.__value_.__r.__words[2], v35, 8);
              v308 = DWORD2(v715);
              bzero(__dst.__r_.__value_.__l.__data_, 8 * v35);
              LODWORD(__dst.__r_.__value_.__r.__words[1]) = v35;
              v706 = v308;
              if ((_DWORD)v308)
              {
                v35 = v308;
                goto LABEL_478;
              }
LABEL_684:
              v694 = (llvm::PHINode *)v715;
              v550 = *(uint64_t **)v715;
              TypeAtIndex = *(llvm::GetElementPtrInst **)(v28 + 64);
              v700 = (llvm::PHINode *)(v715 + 8);
              v709 = (llvm::PHINode *)DWORD2(v715);
              v552 = DWORD2(v715) - 1;
              v553 = DWORD2(v715);
              v554 = DWORD2(v715) == 0;
              v713 = 257;
              v555 = (char *)operator new(32 * DWORD2(v715) + 80);
              v40 = &v555[32 * v553];
              v556 = v553 & 0x7FFFFFF;
              *((_DWORD *)v40 + 5) = *((_DWORD *)v40 + 5) & 0x38000000 | v553 & 0x7FFFFFF;
              if (!v554)
              {
                do
                {
                  *(_QWORD *)v555 = 0;
                  *((_QWORD *)v555 + 1) = 0;
                  *((_QWORD *)v555 + 2) = 0;
                  *((_QWORD *)v555 + 3) = v40;
                  v555 += 32;
                }
                while (v555 != v40);
              }
              sub_1C4774650(TypeAtIndex, v550, v700, v552);
              *(_QWORD *)v40 = v558;
              *((_QWORD *)v40 + 1) = 0;
              v559 = *((_DWORD *)v40 + 5) & 0xC0000000 | v556;
              *((_DWORD *)v40 + 4) = 62;
              *((_DWORD *)v40 + 5) = v559;
              *(_OWORD *)(v40 + 24) = 0u;
              *(_OWORD *)(v40 + 40) = 0u;
              *((_DWORD *)v40 + 14) = 0;
              *((_QWORD *)v40 + 8) = TypeAtIndex;
              if (v552)
              {
                v560 = v694;
                v561 = (llvm::Type **)((char *)v694 + 16);
                v562 = 8 * (_QWORD)v709 - 16;
                do
                {
                  if (!v562)
                    break;
                  v563 = *v561++;
                  TypeAtIndex = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(TypeAtIndex, v563, v557);
                  v562 -= 8;
                }
                while (TypeAtIndex);
                v556 = *((_DWORD *)v40 + 5) & 0x7FFFFFF;
              }
              else
              {
                v560 = v694;
              }
              *((_QWORD *)v40 + 9) = TypeAtIndex;
              v564 = (uint64_t **)&v40[-32 * v556];
              if (*v564)
              {
                v678 = &v40[-32 * v556];
                v680 = (_QWORD *)*((_QWORD *)v678 + 2);
                v679 = v678 + 16;
                *v680 = *(v679 - 1);
                v681 = *(v679 - 1);
                if (v681)
                  *(_QWORD *)(v681 + 16) = *v679;
              }
              *v564 = v550;
              if (v550)
              {
                v567 = v550[1];
                v566 = (uint64_t ***)(v550 + 1);
                v565 = v567;
                v568 = &v40[-32 * v556];
                *((_QWORD *)v568 + 1) = v567;
                if (v567)
                  *(_QWORD *)(v565 + 16) = v568 + 8;
                *((_QWORD *)v568 + 2) = v566;
                *v566 = v564;
              }
              sub_1C5382FD4((uint64_t)&v711, (uint64_t *)v700, (uint64_t *)v560 + (_QWORD)v709, (uint64_t)&v40[-32 * (*((_DWORD *)v40 + 5) & 0x7FFFFFF) + 32]);
              llvm::Value::setName((uint64_t ***)v40, (uint64_t)v712);
              if ((_DWORD)v2)
                v40[17] |= 2u;
              sub_1C582DE88((unsigned __int8 **)v40, v47);
              if ((std::string::size_type *)__dst.__r_.__value_.__l.__data_ != &__dst.__r_.__value_.__r.__words[2])
                free(__dst.__r_.__value_.__l.__data_);
              goto LABEL_60;
            }
            if (!(_DWORD)v35)
            {
              LODWORD(__dst.__r_.__value_.__r.__words[1]) = 0;
              goto LABEL_684;
            }
            bzero(&__dst.__r_.__value_.__r.__words[2], 8 * v35);
            LODWORD(__dst.__r_.__value_.__r.__words[1]) = v35;
            v706 = v35;
LABEL_478:
            v381 = 0;
            v382 = 0;
            v697 = (llvm::PHINode *)(v47 + 24);
            v383 = (llvm::PHINode *)(v35 - 1);
            while (2)
            {
              v384 = v28 + 32 * (_QWORD)v381;
              v385 = v381;
              while (*(_QWORD *)(v715 + 8 * (_QWORD)v385))
              {
                v385 = (llvm::PHINode *)((char *)v385 + 1);
                v384 += 32;
                if ((llvm::PHINode *)v35 == v385)
                {
                  if ((v382 & 1) == 0)
                    goto LABEL_684;
                  goto LABEL_527;
                }
              }
              *(_QWORD *)v687 = a1;
              v690 = v383;
              v386 = *(_QWORD *)(v384 - 32 * (*(_DWORD *)(v28 + 20) & 0x7FFFFFF));
              v387 = *(uint64_t ***)v386;
              v682 = v386;
              if ((*(_BYTE *)(v386 + 23) & 0x10) != 0)
              {
                v388 = **v387;
                v389 = *(_QWORD *)(v388 + 152);
                v390 = *(unsigned int *)(v388 + 168);
                if (!(_DWORD)v390)
                  goto LABEL_490;
                LODWORD(v391) = (v390 - 1) & ((v386 >> 4) ^ (v386 >> 9));
                v392 = (uint64_t *)(v389 + 16 * v391);
                v393 = *v392;
                if (*v392 != v386)
                {
                  v394 = 1;
                  while (v393 != -4096)
                  {
                    v395 = v391 + v394++;
                    v391 = v395 & (v390 - 1);
                    v393 = *(_QWORD *)(v389 + 16 * v391);
                    if (v393 == v386)
                    {
                      v392 = (uint64_t *)(v389 + 16 * v391);
                      goto LABEL_491;
                    }
                  }
LABEL_490:
                  v392 = (uint64_t *)(v389 + 16 * v390);
                }
LABEL_491:
                v396 = (_QWORD *)v392[1];
                v399 = *v396;
                v398 = (char *)(v396 + 2);
                v397 = v399;
              }
              else
              {
                v397 = 0;
                v398 = &byte_1C871356D;
              }
              v713 = 773;
              v712[0] = (uint64_t)v398;
              v712[1] = v397;
              v712[2] = (uint64_t)".pn";
              v400 = operator new(0x48uLL);
              v400[1] = v387;
              v401 = (llvm::Value *)(v400 + 1);
              *v400 = 0;
              v400[2] = 0;
              v400[3] = 0x4000000000000053;
              *((_OWORD *)v400 + 2) = 0u;
              v402 = (char *)(v400 + 4);
              *((_OWORD *)v400 + 3) = 0u;
              *((_DWORD *)v400 + 16) = 0;
              *((_DWORD *)v400 + 17) = v706;
              llvm::Value::setName((uint64_t ***)v400 + 1, (uint64_t)v712);
              v403 = *((unsigned int *)v400 + 17);
              v404 = operator new(40 * v403);
              *v400 = v404;
              if ((_DWORD)v403)
              {
                v405 = &v404[4 * v403];
                do
                {
                  *v404 = 0;
                  v404[1] = 0;
                  v404[2] = 0;
                  v404[3] = v401;
                  v404 += 4;
                }
                while (v404 != v405);
              }
              v406 = *(_QWORD *)(v47 + 40);
              v400[6] = v406;
              *(_WORD *)(v406 + 18) &= ~0x8000u;
              if ((*((_BYTE *)v400 + 31) & 0x10) != 0)
              {
                v425 = *(_QWORD *)(v406 + 56);
                if (v425)
                {
                  v426 = *(llvm::ValueSymbolTable **)(v425 + 104);
                  if (v426)
                    llvm::ValueSymbolTable::reinsertValue(v426, v401);
                }
              }
              v407 = *(_QWORD *)v697;
              v400[4] = *(_QWORD *)v697;
              v400[5] = v697;
              *(_QWORD *)(v407 + 8) = v402;
              *(_QWORD *)v697 = v402;
              a1 = *(_QWORD *)v687;
              v408 = *(_QWORD *)(*(_QWORD *)v687 + 32);
              v712[0] = (uint64_t)(v400 + 1);
              if ((*(_BYTE *)(v408 + 2088) & 1) != 0)
              {
                v410 = v408 + 2096;
                v409 = 16;
LABEL_499:
                v411 = v409 - 1;
                v412 = v411 & ((v401 >> 4) ^ (v401 >> 9));
                v413 = (llvm::Value **)(v410 + 8 * v412);
                v414 = *v413;
                if (v401 != *v413)
                {
                  v415 = 0;
                  v416 = 1;
                  while (v414 != (llvm::Value *)-4096)
                  {
                    if (v415)
                      v417 = 0;
                    else
                      v417 = v414 == (llvm::Value *)-8192;
                    if (v417)
                      v415 = v413;
                    v418 = v412 + v416++;
                    v412 = v418 & v411;
                    v413 = (llvm::Value **)(v410 + 8 * v412);
                    v414 = *v413;
                    if (v401 == *v413)
                      goto LABEL_515;
                  }
                  if (v415)
                    v419 = v415;
                  else
                    v419 = v413;
                  goto LABEL_512;
                }
              }
              else
              {
                v409 = *(_DWORD *)(v408 + 2104);
                if (v409)
                {
                  v410 = *(_QWORD *)(v408 + 2096);
                  goto LABEL_499;
                }
                v419 = 0;
LABEL_512:
                v420 = sub_1C4E08FFC(v408 + 2088, (uint64_t)v712, v712, v419);
                *v420 = v712[0];
                v421 = v712[0];
                v422 = *(unsigned int *)(v408 + 2232);
                if (v422 >= *(unsigned int *)(v408 + 2236))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v408 + 2224, v408 + 2240, v422 + 1, 8);
                  v422 = *(unsigned int *)(v408 + 2232);
                }
                *(_QWORD *)(*(_QWORD *)(v408 + 2224) + 8 * v422) = v421;
                ++*(_DWORD *)(v408 + 2232);
              }
LABEL_515:
              v423 = *(_DWORD *)(v47 + 20);
              if ((v423 & 0x40000000) != 0)
                v424 = *(_QWORD *)(v47 - 8);
              else
                v424 = v47 - 32 * (v423 & 0x7FFFFFF);
              sub_1C477667C(v401, v682, *(_QWORD *)(v424 + 32 * *(unsigned int *)(v47 + 60)));
              *(_QWORD *)(__dst.__r_.__value_.__r.__words[0] + 8 * (_QWORD)v385) = v401;
              *(_QWORD *)(v715 + 8 * (_QWORD)v385) = v401;
              v381 = (llvm::PHINode *)((char *)v385 + 1);
              v382 = 1;
              v383 = v690;
              if (v690 != v385)
                continue;
              break;
            }
LABEL_527:
            v427 = *(_DWORD *)(v47 + 20);
            if ((v427 & 0x40000000) != 0)
            {
              v429 = *(_QWORD *)(v47 - 8);
              v430 = v429 + 32 * *(unsigned int *)(v47 + 60);
              v428 = v427 & 0x7FFFFFF;
              v431 = (llvm::PHINode *)(v430 + 8 * v428);
            }
            else
            {
              v428 = v427 & 0x7FFFFFF;
              v429 = v47 - 32 * v428;
              v430 = v429 + 32 * *(unsigned int *)(v47 + 60);
              v431 = (llvm::PHINode *)(v430 + 8 * v428);
            }
            v541 = (llvm::PHINode *)(v429 + 32 * v428);
            v542 = (llvm::PHINode *)(v429 + 32);
            v699 = v431;
            v708 = (llvm::PHINode *)(v430 + 8);
            v693 = v541;
            if ((llvm::PHINode *)(v430 + 8) != v431 && v542 != v541)
            {
              do
              {
                if (LODWORD(__dst.__r_.__value_.__r.__words[1]))
                {
                  v544 = 0;
                  v545 = *(_QWORD *)v708;
                  v546 = *(_QWORD *)v542;
                  v547 = 8 * LODWORD(__dst.__r_.__value_.__r.__words[1]);
                  v548 = *(_QWORD *)v542;
                  do
                  {
                    v549 = *(llvm::PHINode **)(__dst.__r_.__value_.__r.__words[0] + v544);
                    if (v549)
                      sub_1C477667C(v549, *(_QWORD *)(v548 - 32 * (*(_DWORD *)(v546 + 20) & 0x7FFFFFF)), v545);
                    v544 += 8;
                    v548 += 32;
                  }
                  while (v547 != v544);
                }
                v708 = (llvm::PHINode *)((char *)v708 + 8);
                if (v708 == v699)
                  break;
                v542 = (llvm::PHINode *)((char *)v542 + 32);
              }
              while (v542 != v693);
            }
            goto LABEL_684;
          }
        }
        while (*(_QWORD *)(v54 + 24) == *(_QWORD *)(v53 + 24))
        {
          v53 = *(_QWORD *)(v53 + 8);
          v54 = *(_QWORD *)(v54 + 8);
          if (!v54)
            goto LABEL_69;
        }
      }
LABEL_59:
      v40 = 0;
LABEL_60:
      if ((__int128 *)v715 != &v716)
        free((void *)v715);
      return v40;
    }
LABEL_23:
    if ((v14 - 66) > 0xC)
    {
      v23 = v14 - 41;
      v24 = v14 - 81;
      v25 = v23 >= 0x12 && v24 > 1;
      if (v25)
        return 0;
      v26 = *(_DWORD *)(v13 + 20);
      if ((v26 & 0x40000000) != 0)
        v27 = *(_QWORD *)(v13 - 8);
      else
        v27 = v13 - 32 * (v26 & 0x7FFFFFF);
      v86 = *(unsigned __int8 **)(v27 + 32);
      if (v86)
        v89 = v86[16] >= 0x15u;
      else
        v89 = 1;
      if (v89)
      {
        if ((v11 & 0x40000000) != 0)
          v90 = *(uint64_t **)(a2 - 8);
        else
          v90 = (uint64_t *)(a2 - 32 * (v11 & 0x7FFFFFF));
        v114 = *v90;
        v115 = *(_DWORD *)(*v90 + 20);
        if ((v115 & 0x40000000) != 0)
          v116 = *(uint64_t **)(v114 - 8);
        else
          v116 = (uint64_t *)(v114 - 32 * (v115 & 0x7FFFFFF));
        v117 = *v116;
        v118 = v116[4];
        if ((v11 & 0x40000000) != 0)
        {
          v120 = *(_QWORD *)(a2 - 8);
          v119 = v11 & 0x7FFFFFF;
        }
        else
        {
          v119 = v11 & 0x7FFFFFF;
          v120 = a2 - 32 * v119;
        }
        if (v119 == 1)
        {
LABEL_184:
          v121 = *(unsigned __int8 *)(v114 + 16);
          v122 = v121 - 28;
          if (v114 && (v121 - 83) >= 0xFFFFFFFE)
          {
            v123 = *(_WORD *)(v114 + 18) & 0x3F;
            LOWORD(v717) = 257;
            v40 = llvm::CmpInst::Create(v122, v123, v117, v118, (uint64_t)&v715, 0);
          }
          else
          {
            LOWORD(v717) = 257;
            v219 = (char *)operator new(0x80uLL);
            *(_QWORD *)v219 = 0;
            *((_QWORD *)v219 + 2) = 0;
            *((_QWORD *)v219 + 1) = 0;
            *((_QWORD *)v219 + 5) = 0;
            *((_QWORD *)v219 + 6) = 0;
            *((_QWORD *)v219 + 4) = 0;
            v220 = (uint64_t *)(v219 + 32);
            *((_QWORD *)v219 + 8) = *(_QWORD *)v117;
            v40 = v219 + 64;
            *((_QWORD *)v219 + 3) = v219 + 64;
            *((_QWORD *)v219 + 7) = v219 + 64;
            *((_QWORD *)v219 + 9) = 0;
            v219[80] = v122 + 28;
            v219[81] = 0;
            *((_WORD *)v219 + 41) = 0;
            *((_DWORD *)v219 + 21) = 2;
            *((_DWORD *)v219 + 30) = 0;
            *(_OWORD *)(v219 + 104) = 0u;
            *(_OWORD *)(v219 + 88) = 0u;
            *(_QWORD *)v219 = v117;
            v223 = *(_QWORD *)(v117 + 8);
            v222 = (_QWORD *)(v117 + 8);
            v221 = v223;
            *((_QWORD *)v219 + 1) = v223;
            if (v223)
              *(_QWORD *)(v221 + 16) = v219 + 8;
            *((_QWORD *)v219 + 2) = v222;
            *v222 = v219;
            if (*((_QWORD *)v219 + 4))
            {
              **((_QWORD **)v219 + 6) = *((_QWORD *)v219 + 5);
              v677 = *((_QWORD *)v219 + 5);
              if (v677)
                *(_QWORD *)(v677 + 16) = *((_QWORD *)v219 + 6);
            }
            *v220 = v118;
            if (v118)
            {
              v226 = *(_QWORD *)(v118 + 8);
              v225 = (uint64_t **)(v118 + 8);
              v224 = v226;
              *((_QWORD *)v219 + 5) = v226;
              if (v226)
                *(_QWORD *)(v224 + 16) = v219 + 40;
              *((_QWORD *)v219 + 6) = v225;
              *v225 = v220;
            }
            llvm::Value::setName((uint64_t ***)v219 + 8, (uint64_t)&v715);
            v227 = *(_DWORD *)(v2 + 20);
            if ((v227 & 0x40000000) != 0)
              v228 = *(uint64_t **)(v2 - 8);
            else
              v228 = (uint64_t *)(v2 - 32 * (v227 & 0x7FFFFFF));
            llvm::Instruction::copyIRFlags((uint64_t)v40, *v228, 1);
            v229 = *(_DWORD *)(v2 + 20);
            if ((v229 & 0x40000000) != 0)
            {
              v231 = *(_QWORD *)(v2 - 8);
              v230 = v229 & 0x7FFFFFF;
            }
            else
            {
              v230 = v229 & 0x7FFFFFF;
              v231 = v2 - 32 * v230;
            }
            if (v230 != 1)
            {
              v232 = (uint64_t *)(v231 + 32);
              v233 = 32 * v230 - 32;
              do
              {
                v234 = *v232;
                v232 += 4;
                llvm::Instruction::andIRFlags((uint64_t)v40, v234);
                v233 -= 32;
              }
              while (v233);
            }
          }
          v182 = v40;
          goto LABEL_328;
        }
        v125 = *(_QWORD *)v117;
        v126 = *(llvm::PHINode **)v118;
        v127 = *(unsigned __int8 *)(v114 + 16);
        v128 = (uint64_t *)(v120 + 32 * v119);
        v129 = (uint64_t *)(v120 + 32);
        while (1)
        {
          v130 = *v129;
          v131 = *(unsigned __int8 *)(*v129 + 16);
          if (*v129)
            v132 = v131 >= 0x1C;
          else
            v132 = 0;
          if (!v132 || v131 != v127)
            return 0;
          v134 = *(_QWORD *)(v130 + 8);
          if (!v134)
            return 0;
          v135 = (char *)v118;
          v136 = (llvm::PHINode *)v117;
          v137 = *(_QWORD *)(v134 + 8);
          if (v137)
            break;
LABEL_200:
          v138 = *(_DWORD *)(v130 + 20);
          if ((v138 & 0x40000000) != 0)
            v139 = *(_QWORD ***)(v130 - 8);
          else
            v139 = (_QWORD **)(v130 - 32 * (v138 & 0x7FFFFFF));
          if (**v139 != v125
            || (llvm::PHINode *)*v139[4] != v126
            || (v127 - 83) >= 0xFFFFFFFE && ((*(_WORD *)(v114 + 18) ^ *(_WORD *)(v130 + 18)) & 0x3F) != 0)
          {
            return 0;
          }
          if ((v138 & 0x40000000) != 0)
            v140 = *(_QWORD **)(v130 - 8);
          else
            v140 = (_QWORD *)(v130 - 32 * (v138 & 0x7FFFFFF));
          if (*v140 != v117)
            v117 = 0;
          if (v140[4] != v118)
            v118 = 0;
          v129 += 4;
          if (v129 == v128)
          {
            v702 = v126;
            *(_QWORD *)v686 = a1;
            if (!(v117 | v118))
              return 0;
            if ((v115 & 0x40000000) != 0)
              v141 = *(uint64_t *****)(v114 - 8);
            else
              v141 = (uint64_t ****)(v114 - 32 * (v115 & 0x7FFFFFF));
            v695 = (llvm::PHINode *)v141[4];
            if (v117)
            {
              if (!v118)
              {
                v701 = 0;
                goto LABEL_752;
              }
LABEL_811:
              v118 = (uint64_t)v135;
              v117 = (uint64_t)v136;
              v2 = a2;
              goto LABEL_184;
            }
            v573 = *v141;
            v574 = v11 & 0x7FFFFFF;
            if ((*((_BYTE *)*v141 + 23) & 0x10) != 0)
            {
              v575 = ***v573;
              v576 = *(_QWORD *)(v575 + 152);
              v577 = *(unsigned int *)(v575 + 168);
              if (!(_DWORD)v577)
                goto LABEL_721;
              LODWORD(v578) = (v577 - 1) & ((v573 >> 4) ^ (v573 >> 9));
              v579 = (uint64_t ****)(v576 + 16 * v578);
              v580 = *v579;
              if (*v579 != v573)
              {
                v581 = 1;
                while (v580 != (uint64_t ***)-4096)
                {
                  v582 = v578 + v581++;
                  v578 = v582 & (v577 - 1);
                  v580 = *(uint64_t ****)(v576 + 16 * v578);
                  if (v580 == v573)
                  {
                    v579 = (uint64_t ****)(v576 + 16 * v578);
                    goto LABEL_722;
                  }
                }
LABEL_721:
                v579 = (uint64_t ****)(v576 + 16 * v577);
              }
LABEL_722:
              v583 = v579[1];
              v586 = *v583;
              v584 = (char *)(v583 + 2);
              v585 = v586;
            }
            else
            {
              v585 = 0;
              v584 = &byte_1C871356D;
            }
            LOWORD(v717) = 773;
            *(_QWORD *)&v715 = v584;
            *((_QWORD *)&v715 + 1) = v585;
            *(_QWORD *)&v716 = ".pn";
            v587 = operator new(0x48uLL);
            v587[1] = v125;
            v136 = (llvm::PHINode *)(v587 + 1);
            *v587 = 0;
            v587[2] = 0;
            v587[3] = 0x4000000000000053;
            *((_OWORD *)v587 + 2) = 0u;
            v588 = (char *)(v587 + 4);
            *((_OWORD *)v587 + 3) = 0u;
            *((_DWORD *)v587 + 16) = 0;
            *((_DWORD *)v587 + 17) = v574;
            llvm::Value::setName((uint64_t ***)v587 + 1, (uint64_t)&v715);
            v589 = *((unsigned int *)v587 + 17);
            v590 = operator new(40 * v589);
            *v587 = v590;
            if ((_DWORD)v589)
            {
              v591 = &v590[4 * v589];
              do
              {
                *v590 = 0;
                v590[1] = 0;
                v590[2] = 0;
                v590[3] = v136;
                v590 += 4;
              }
              while (v590 != v591);
            }
            v592 = *(_DWORD *)(a2 + 20);
            if ((v592 & 0x40000000) != 0)
              v593 = *(_QWORD *)(a2 - 8);
            else
              v593 = a2 - 32 * (v592 & 0x7FFFFFF);
            sub_1C477667C(v136, (uint64_t)v573, *(_QWORD *)(v593 + 32 * *(unsigned int *)(a2 + 60)));
            v594 = *(_QWORD *)(a2 + 40);
            v595 = (uint64_t *)(a2 + 24);
            v587[6] = v594;
            *(_WORD *)(v594 + 18) &= ~0x8000u;
            if ((*((_BYTE *)v587 + 31) & 0x10) != 0)
            {
              v668 = *(_QWORD *)(v594 + 56);
              if (v668)
              {
                v669 = *(llvm::ValueSymbolTable **)(v668 + 104);
                if (v669)
                  llvm::ValueSymbolTable::reinsertValue(v669, v136);
              }
            }
            v596 = *v595;
            v587[4] = *v595;
            v587[5] = v595;
            *(_QWORD *)(v596 + 8) = v588;
            *v595 = (uint64_t)v588;
            v597 = *(_QWORD *)(*(_QWORD *)v686 + 32);
            *(_QWORD *)&v715 = v587 + 1;
            if ((*(_BYTE *)(v597 + 2088) & 1) != 0)
            {
              v599 = v597 + 2096;
              v598 = 16;
LABEL_733:
              v600 = v598 - 1;
              v601 = v600 & ((v136 >> 4) ^ (v136 >> 9));
              v602 = (llvm::PHINode **)(v599 + 8 * v601);
              v603 = *v602;
              if (v136 != *v602)
              {
                v604 = 0;
                v605 = 1;
                while (v603 != (llvm::PHINode *)-4096)
                {
                  if (v604)
                    v606 = 0;
                  else
                    v606 = v603 == (llvm::PHINode *)-8192;
                  if (v606)
                    v604 = v602;
                  v607 = v601 + v605++;
                  v601 = v607 & v600;
                  v602 = (llvm::PHINode **)(v599 + 8 * v601);
                  v603 = *v602;
                  if (v136 == *v602)
                    goto LABEL_749;
                }
                if (v604)
                  v608 = v604;
                else
                  v608 = v602;
                goto LABEL_746;
              }
            }
            else
            {
              v598 = *(_DWORD *)(v597 + 2104);
              if (v598)
              {
                v599 = *(_QWORD *)(v597 + 2096);
                goto LABEL_733;
              }
              v608 = 0;
LABEL_746:
              v609 = sub_1C4E08FFC(v597 + 2088, (uint64_t)&v715, &v715, v608);
              *v609 = v715;
              v610 = v715;
              v611 = *(unsigned int *)(v597 + 2232);
              if (v611 >= *(_DWORD *)(v597 + 2236))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v597 + 2224, v597 + 2240, v611 + 1, 8);
                LODWORD(v611) = *(_DWORD *)(v597 + 2232);
              }
              *(_QWORD *)(*(_QWORD *)(v597 + 2224) + 8 * v611) = v610;
              ++*(_DWORD *)(v597 + 2232);
            }
LABEL_749:
            if (v118)
            {
              v701 = (llvm::PHINode *)(v587 + 1);
              v710 = 0;
              goto LABEL_791;
            }
            v11 = *(_DWORD *)(a2 + 20);
            v115 = *(_DWORD *)(v114 + 20);
            v701 = v136;
LABEL_752:
            v612 = v11 & 0x7FFFFFF;
            if ((v115 & 0x40000000) != 0)
              v613 = *(_QWORD *)(v114 - 8);
            else
              v613 = v114 - 32 * (v115 & 0x7FFFFFF);
            v614 = *(uint64_t ****)(v613 + 32);
            if ((*((_BYTE *)v614 + 23) & 0x10) != 0)
            {
              v615 = ***v614;
              v616 = *(_QWORD *)(v615 + 152);
              v617 = *(unsigned int *)(v615 + 168);
              if (!(_DWORD)v617)
                goto LABEL_762;
              LODWORD(v618) = (v617 - 1) & ((v614 >> 4) ^ (v614 >> 9));
              v619 = (uint64_t ****)(v616 + 16 * v618);
              v620 = *v619;
              if (*v619 != v614)
              {
                v621 = 1;
                while (v620 != (uint64_t ***)-4096)
                {
                  v622 = v618 + v621++;
                  v618 = v622 & (v617 - 1);
                  v620 = *(uint64_t ****)(v616 + 16 * v618);
                  if (v620 == v614)
                  {
                    v619 = (uint64_t ****)(v616 + 16 * v618);
                    goto LABEL_763;
                  }
                }
LABEL_762:
                v619 = (uint64_t ****)(v616 + 16 * v617);
              }
LABEL_763:
              v623 = v619[1];
              v626 = *v623;
              v624 = (char *)(v623 + 2);
              v625 = v626;
            }
            else
            {
              v625 = 0;
              v624 = &byte_1C871356D;
            }
            LOWORD(v717) = 773;
            *(_QWORD *)&v715 = v624;
            *((_QWORD *)&v715 + 1) = v625;
            *(_QWORD *)&v716 = ".pn";
            v627 = operator new(0x48uLL);
            v627[1] = v702;
            *v627 = 0;
            v627[2] = 0;
            v627[3] = 0x4000000000000053;
            *((_OWORD *)v627 + 2) = 0u;
            v628 = (char *)(v627 + 4);
            *((_OWORD *)v627 + 3) = 0u;
            *((_DWORD *)v627 + 16) = 0;
            *((_DWORD *)v627 + 17) = v612;
            v710 = (llvm::PHINode *)(v627 + 1);
            llvm::Value::setName((uint64_t ***)v627 + 1, (uint64_t)&v715);
            v629 = *((unsigned int *)v627 + 17);
            v630 = operator new(40 * v629);
            *v627 = v630;
            if ((_DWORD)v629)
            {
              v631 = &v630[4 * v629];
              do
              {
                *v630 = 0;
                v630[1] = 0;
                v630[2] = 0;
                v630[3] = v710;
                v630 += 4;
              }
              while (v630 != v631);
            }
            v632 = *(_DWORD *)(a2 + 20);
            if ((v632 & 0x40000000) != 0)
              v633 = *(_QWORD *)(a2 - 8);
            else
              v633 = a2 - 32 * (v632 & 0x7FFFFFF);
            sub_1C477667C(v710, (uint64_t)v695, *(_QWORD *)(v633 + 32 * *(unsigned int *)(a2 + 60)));
            v634 = *(_QWORD *)(a2 + 40);
            v635 = (uint64_t *)(a2 + 24);
            v627[6] = v634;
            *(_WORD *)(v634 + 18) &= ~0x8000u;
            if ((*((_BYTE *)v627 + 31) & 0x10) != 0)
            {
              v670 = *(_QWORD *)(v634 + 56);
              if (v670)
              {
                v671 = *(llvm::ValueSymbolTable **)(v670 + 104);
                if (v671)
                  llvm::ValueSymbolTable::reinsertValue(v671, v710);
              }
            }
            v636 = *v635;
            v627[4] = *v635;
            v627[5] = v635;
            *(_QWORD *)(v636 + 8) = v628;
            *v635 = (uint64_t)v628;
            v637 = *(_QWORD *)(*(_QWORD *)v686 + 32);
            *(_QWORD *)&v715 = v627 + 1;
            if ((*(_BYTE *)(v637 + 2088) & 1) != 0)
            {
              v639 = v637 + 2096;
              v638 = 16;
LABEL_774:
              v640 = v638 - 1;
              v641 = v640 & ((v710 >> 4) ^ (v710 >> 9));
              v642 = (llvm::PHINode **)(v639 + 8 * v641);
              v643 = *v642;
              if (v710 != *v642)
              {
                v644 = 0;
                v645 = 1;
                while (v643 != (llvm::PHINode *)-4096)
                {
                  if (v644)
                    v646 = 0;
                  else
                    v646 = v643 == (llvm::PHINode *)-8192;
                  if (v646)
                    v644 = v642;
                  v647 = v641 + v645++;
                  v641 = v647 & v640;
                  v642 = (llvm::PHINode **)(v639 + 8 * v641);
                  v643 = *v642;
                  if (v710 == *v642)
                    goto LABEL_790;
                }
                if (v644)
                  v648 = v644;
                else
                  v648 = v642;
                goto LABEL_787;
              }
            }
            else
            {
              v638 = *(_DWORD *)(v637 + 2104);
              if (v638)
              {
                v639 = *(_QWORD *)(v637 + 2096);
                goto LABEL_774;
              }
              v648 = 0;
LABEL_787:
              v649 = sub_1C4E08FFC(v637 + 2088, (uint64_t)&v715, &v715, v648);
              *v649 = v715;
              v650 = v715;
              v651 = *(unsigned int *)(v637 + 2232);
              if (v651 >= *(_DWORD *)(v637 + 2236))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v637 + 2224, v637 + 2240, v651 + 1, 8);
                LODWORD(v651) = *(_DWORD *)(v637 + 2232);
              }
              *(_QWORD *)(*(_QWORD *)(v637 + 2224) + 8 * v651) = v650;
              ++*(_DWORD *)(v637 + 2232);
            }
LABEL_790:
            v135 = (char *)(v627 + 1);
LABEL_791:
            v652 = *(_DWORD *)(a2 + 20);
            if ((v652 & 0x40000000) != 0)
            {
              v654 = *(_QWORD *)(a2 - 8);
              v655 = v654 + 32 * *(unsigned int *)(a2 + 60);
              v653 = v652 & 0x7FFFFFF;
              v656 = v655 + 8 * v653;
            }
            else
            {
              v653 = v652 & 0x7FFFFFF;
              v654 = a2 - 32 * v653;
              v655 = v654 + 32 * *(unsigned int *)(a2 + 60);
              v656 = v655 + 8 * v653;
            }
            v657 = (uint64_t *)(v654 + 32);
            if (v655 + 8 != v656 && v657 != (uint64_t *)(v654 + 32 * v653))
            {
              v659 = 32 * v653 - 64;
              v660 = v655 + 16;
              do
              {
                v661 = *(_QWORD *)(v660 - 8);
                v662 = *v657;
                if (v701)
                {
                  v663 = *(_DWORD *)(v662 + 20);
                  if ((v663 & 0x40000000) != 0)
                    v664 = *(uint64_t **)(v662 - 8);
                  else
                    v664 = (uint64_t *)(v662 - 32 * (v663 & 0x7FFFFFF));
                  sub_1C477667C(v701, *v664, *(_QWORD *)(v660 - 8));
                }
                if (v710)
                {
                  v665 = *(_DWORD *)(v662 + 20);
                  if ((v665 & 0x40000000) != 0)
                    v666 = *(_QWORD *)(v662 - 8);
                  else
                    v666 = v662 - 32 * (v665 & 0x7FFFFFF);
                  sub_1C477667C(v710, *(_QWORD *)(v666 + 32), v661);
                }
                if (v660 == v656)
                  break;
                v657 += 4;
                v667 = v659;
                v659 -= 32;
                v660 += 8;
              }
              while (v667);
            }
            goto LABEL_811;
          }
        }
        while (*(_QWORD *)(v137 + 24) == *(_QWORD *)(v134 + 24))
        {
          v134 = *(_QWORD *)(v134 + 8);
          v137 = *(_QWORD *)(v137 + 8);
          if (!v137)
            goto LABEL_200;
        }
        return 0;
      }
      v81 = 0;
      if ((v11 & 0x40000000) != 0)
        goto LABEL_132;
    }
    else
    {
      v18 = *(_DWORD *)(v13 + 20);
      if ((v18 & 0x40000000) != 0)
        v19 = *(llvm::Type ****)(v13 - 8);
      else
        v19 = (llvm::Type ***)(v13 - 32 * (v18 & 0x7FFFFFF));
      v81 = **v19;
      if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 13 && *((_BYTE *)v81 + 8) == 13)
      {
        PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)a2);
        if ((_DWORD)v82 == 1)
        v85 = llvm::Type::getPrimitiveSizeInBits(v81);
        if ((_DWORD)v84 == 1)
        if (!sub_1C577D3C0(a1, PrimitiveSizeInBits, v85))
          return 0;
        v86 = 0;
        v11 = *(_DWORD *)(v2 + 20);
        if ((v11 & 0x40000000) != 0)
          goto LABEL_132;
      }
      else
      {
        v86 = 0;
        if ((v11 & 0x40000000) != 0)
        {
LABEL_132:
          v88 = *(_QWORD *)(v2 - 8);
          v87 = v11 & 0x7FFFFFF;
LABEL_133:
          if (v87 != 1)
          {
            v93 = (llvm::Instruction **)(v88 + 32 * v87);
            v94 = (llvm::Instruction **)(v88 + 32);
            do
            {
              v95 = *v94;
              if (!*v94 || *((unsigned __int8 *)*v94 + 16) < 0x1Cu)
                return 0;
              v97 = *((_QWORD *)v95 + 1);
              if (!v97)
                return 0;
              v98 = *(_QWORD *)(v97 + 8);
              if (v98)
              {
                while (*(_QWORD *)(v98 + 24) == *(_QWORD *)(v97 + 24))
                {
                  v97 = *(_QWORD *)(v97 + 8);
                  v98 = *(_QWORD *)(v98 + 8);
                  if (!v98)
                    goto LABEL_146;
                }
                return 0;
              }
LABEL_146:
              if (!llvm::Instruction::isSameOperationAs(*v94, (const llvm::Instruction *)v13, 0))
                return 0;
              v99 = *((_DWORD *)v95 + 5);
              if (v81)
              {
                if ((v99 & 0x40000000) != 0)
                  v100 = (llvm::Type ***)*((_QWORD *)v95 - 1);
                else
                  v100 = (llvm::Type ***)((char *)v95 - 32 * (v99 & 0x7FFFFFF));
                if (**v100 != v81)
                  return 0;
              }
              else
              {
                if ((v99 & 0x40000000) != 0)
                  v101 = (unsigned __int8 **)*((_QWORD *)v95 - 1);
                else
                  v101 = (unsigned __int8 **)((char *)v95 - 32 * (v99 & 0x7FFFFFF));
                if (v101[4] != v86)
                  return 0;
              }
              v94 += 4;
            }
            while (v94 != v93);
          }
          v91 = *(_DWORD *)(v13 + 20);
          if ((v91 & 0x40000000) != 0)
            v92 = *(uint64_t ***)(v13 - 8);
          else
            v92 = (uint64_t **)(v13 - 32 * (v91 & 0x7FFFFFF));
          v102 = **v92;
          v103 = *(_DWORD *)(v2 + 20);
          v104 = v103 & 0x7FFFFFF;
          if ((v103 & 0x10000000) == 0)
          {
            v144 = 0;
            v143 = &byte_1C871356D;
LABEL_220:
            LOWORD(v717) = 773;
            *(_QWORD *)&v715 = v143;
            *((_QWORD *)&v715 + 1) = v144;
            *(_QWORD *)&v716 = ".in";
            v146 = (char *)operator new(0x48uLL);
            *((_QWORD *)v146 + 1) = v102;
            v147 = (llvm::PHINode *)(v146 + 8);
            *(_QWORD *)v146 = 0;
            *((_QWORD *)v146 + 2) = 0;
            *((_QWORD *)v146 + 3) = 0x4000000000000053;
            *((_OWORD *)v146 + 2) = 0u;
            *((_OWORD *)v146 + 3) = 0u;
            *((_DWORD *)v146 + 16) = 0;
            *((_DWORD *)v146 + 17) = v104;
            llvm::Value::setName((uint64_t ***)v146 + 1, (uint64_t)&v715);
            v148 = *((unsigned int *)v146 + 17);
            v149 = operator new(40 * v148);
            *(_QWORD *)v146 = v149;
            if ((_DWORD)v148)
            {
              v150 = &v149[4 * v148];
              do
              {
                *v149 = 0;
                v149[1] = 0;
                v149[2] = 0;
                v149[3] = v147;
                v149 += 4;
              }
              while (v149 != v150);
            }
            v151 = *(_DWORD *)(v13 + 20);
            if ((v151 & 0x40000000) != 0)
              v152 = *(_QWORD ***)(v13 - 8);
            else
              v152 = (_QWORD **)(v13 - 32 * (v151 & 0x7FFFFFF));
            v153 = *v152;
            v154 = *(_DWORD *)(v2 + 20);
            if ((v154 & 0x40000000) != 0)
              v155 = *(_QWORD *)(v2 - 8);
            else
              v155 = v2 - 32 * (v154 & 0x7FFFFFF);
            sub_1C477667C(v147, (uint64_t)v153, *(_QWORD *)(v155 + 32 * *(unsigned int *)(v2 + 60)));
            v157 = *(_DWORD *)(v2 + 20);
            v703 = (llvm::PHINode *)v86;
            if ((v157 & 0x40000000) != 0)
            {
              v159 = *(_QWORD *)(v2 - 8);
              v160 = v159 + 32 * *(unsigned int *)(v2 + 60);
              v158 = v157 & 0x7FFFFFF;
              v161 = v160 + 8 * v158;
            }
            else
            {
              v158 = v157 & 0x7FFFFFF;
              v159 = v2 - 32 * v158;
              v160 = v159 + 32 * *(unsigned int *)(v2 + 60);
              v161 = v160 + 8 * v158;
            }
            v162 = v2;
            v163 = a1;
            v164 = (uint64_t *)(v159 + 32);
            if (v160 + 8 != v161 && v164 != (uint64_t *)(v159 + 32 * v158))
            {
              v166 = 32 * v158 - 64;
              v167 = v160 + 16;
              do
              {
                v168 = *v164;
                v169 = *(_DWORD *)(*v164 + 20);
                if ((v169 & 0x40000000) != 0)
                  v170 = *(uint64_t **)(v168 - 8);
                else
                  v170 = (uint64_t *)(v168 - 32 * (v169 & 0x7FFFFFF));
                if ((_QWORD *)*v170 != v153)
                  v153 = 0;
                sub_1C477667C(v147, *v170, *(_QWORD *)(v167 - 8));
                if (v167 == v161)
                  break;
                v164 += 4;
                v171 = v166;
                v166 -= 32;
                v167 += 8;
              }
              while (v171);
            }
            if (v153)
            {
              if ((v146[31] & 8) != 0)
              {
                v672 = llvm::UndefValue::get(*(llvm::UndefValue **)v147, v156);
                llvm::ValueAsMetadata::handleRAUW((uint64_t *)v147, v672, v673);
              }
              v172 = (unsigned __int8 *)*((_QWORD *)v146 + 7);
              v173 = (uint64_t)v703;
              if (v172)
                llvm::MetadataTracking::untrack((uint64_t)(v146 + 56), v172);
              llvm::Value::~Value(v147, (llvm::Value *)v172);
              v174 = *((_DWORD *)v146 + 7);
              v175 = v174 & 0x7FFFFFF;
              if ((v174 & 0x40000000) != 0)
              {
                v304 = *(char **)v146;
                if ((_DWORD)v175)
                {
                  v305 = 32 * v175;
                  do
                  {
                    v306 = &v304[v305];
                    if (*(_QWORD *)&v304[v305 - 32])
                    {
                      **((_QWORD **)v306 - 2) = *((_QWORD *)v306 - 3);
                      v307 = *((_QWORD *)v306 - 3);
                      if (v307)
                        *(_QWORD *)(v307 + 16) = *((_QWORD *)v306 - 2);
                    }
                    v305 -= 32;
                  }
                  while (v305);
                }
                operator delete(v304);
                v177 = v146;
              }
              else
              {
                v176 = v175;
                v177 = (char *)v147 - 32 * v175;
                if ((_DWORD)v175)
                {
                  v178 = v146 - 8;
                  v179 = -32 * v176;
                  do
                  {
                    if (*((_QWORD *)v178 - 2))
                    {
                      **(_QWORD **)v178 = *((_QWORD *)v178 - 1);
                      v180 = *((_QWORD *)v178 - 1);
                      if (v180)
                        *(_QWORD *)(v180 + 16) = *(_QWORD *)v178;
                    }
                    v178 -= 32;
                    v179 += 32;
                  }
                  while (v179);
                }
                if (v174 < 0)
                  v177 = &v177[-*((_QWORD *)v177 - 1) - 8];
              }
              operator delete(v177);
            }
            else
            {
              sub_1C57D7818(v163, v147, v162);
              v153 = v146 + 8;
              v173 = (uint64_t)v703;
            }
            v181 = *(unsigned __int8 *)(v13 + 16);
            if (v13 && (v181 - 79) >= 0xFFFFFFF3)
            {
              LOWORD(v717) = 257;
              llvm::CastInst::Create(v181 - 28);
            }
            else
            {
              v183 = v181 - 28;
              if (v13 && (v181 - 59) >= 0xFFFFFFEE)
              {
                LOWORD(v717) = 257;
                v184 = (char *)operator new(0x80uLL);
                *(_QWORD *)v184 = 0;
                *((_QWORD *)v184 + 2) = 0;
                *((_QWORD *)v184 + 1) = 0;
                *((_QWORD *)v184 + 5) = 0;
                *((_QWORD *)v184 + 6) = 0;
                *((_QWORD *)v184 + 4) = 0;
                v185 = (uint64_t *)(v184 + 32);
                *((_QWORD *)v184 + 8) = *v153;
                v40 = v184 + 64;
                *((_QWORD *)v184 + 3) = v184 + 64;
                *((_QWORD *)v184 + 7) = v184 + 64;
                *((_QWORD *)v184 + 9) = 0;
                v184[80] = v183 + 28;
                v184[81] = 0;
                *((_WORD *)v184 + 41) = 0;
                *((_DWORD *)v184 + 21) = 2;
                *((_DWORD *)v184 + 30) = 0;
                *(_OWORD *)(v184 + 104) = 0u;
                *(_OWORD *)(v184 + 88) = 0u;
                *(_QWORD *)v184 = v153;
                v188 = v153[1];
                v187 = v153 + 1;
                v186 = v188;
                *((_QWORD *)v184 + 1) = v188;
                if (v188)
                  *(_QWORD *)(v186 + 16) = v184 + 8;
                *((_QWORD *)v184 + 2) = v187;
                *v187 = v184;
                if (*((_QWORD *)v184 + 4))
                {
                  **((_QWORD **)v184 + 6) = *((_QWORD *)v184 + 5);
                  v676 = *((_QWORD *)v184 + 5);
                  if (v676)
                    *(_QWORD *)(v676 + 16) = *((_QWORD *)v184 + 6);
                }
                *v185 = v173;
                if (v173)
                {
                  v191 = *(_QWORD *)(v173 + 8);
                  v190 = (uint64_t **)(v173 + 8);
                  v189 = v191;
                  *((_QWORD *)v184 + 5) = v191;
                  if (v191)
                    *(_QWORD *)(v189 + 16) = v184 + 40;
                  *((_QWORD *)v184 + 6) = v190;
                  *v190 = v185;
                }
                llvm::Value::setName((uint64_t ***)v184 + 8, (uint64_t)&v715);
                v192 = *(_DWORD *)(v162 + 20);
                if ((v192 & 0x40000000) != 0)
                  v193 = *(uint64_t **)(v162 - 8);
                else
                  v193 = (uint64_t *)(v162 - 32 * (v192 & 0x7FFFFFF));
                llvm::Instruction::copyIRFlags((uint64_t)v40, *v193, 1);
                v212 = *(_DWORD *)(v162 + 20);
                if ((v212 & 0x40000000) != 0)
                {
                  v214 = *(_QWORD *)(v162 - 8);
                  v213 = v212 & 0x7FFFFFF;
                }
                else
                {
                  v213 = v212 & 0x7FFFFFF;
                  v214 = v162 - 32 * v213;
                }
                if (v213 != 1)
                {
                  v215 = (uint64_t *)(v214 + 32);
                  v216 = 32 * v213 - 32;
                  do
                  {
                    v217 = *v215;
                    v215 += 4;
                    llvm::Instruction::andIRFlags((uint64_t)v40, v217);
                    v216 -= 32;
                  }
                  while (v216);
                }
                goto LABEL_308;
              }
              v194 = *(_WORD *)(v13 + 18) & 0x3F;
              LOWORD(v717) = 257;
              v182 = llvm::CmpInst::Create(v183, v194, (uint64_t)v153, v173, (uint64_t)&v715, 0);
            }
            v40 = v182;
LABEL_309:
            v218 = v162;
            goto LABEL_310;
          }
          v105 = ***(_QWORD ***)v2;
          v106 = *(_QWORD *)(v105 + 152);
          v107 = *(unsigned int *)(v105 + 168);
          if ((_DWORD)v107)
          {
            LODWORD(v108) = (v107 - 1) & ((v2 >> 4) ^ (v2 >> 9));
            v109 = (uint64_t *)(v106 + 16 * v108);
            v110 = *v109;
            if (*v109 == v2)
            {
LABEL_219:
              v142 = (_QWORD *)v109[1];
              v145 = *v142;
              v143 = (char *)(v142 + 2);
              v144 = v145;
              goto LABEL_220;
            }
            v111 = 1;
            while (v110 != -4096)
            {
              v112 = v108 + v111++;
              v108 = v112 & (v107 - 1);
              v110 = *(_QWORD *)(v106 + 16 * v108);
              if (v110 == v2)
              {
                v109 = (uint64_t *)(v106 + 16 * v108);
                goto LABEL_219;
              }
            }
          }
          v109 = (uint64_t *)(v106 + 16 * v107);
          goto LABEL_219;
        }
      }
    }
    v87 = v11 & 0x7FFFFFF;
    v88 = v2 - 32 * v87;
    goto LABEL_133;
  }
  if (v14 == 92)
  {
    if ((v11 & 0x40000000) != 0)
    {
      v22 = *(uint64_t **)(a2 - 8);
      v21 = v11 & 0x7FFFFFF;
    }
    else
    {
      v21 = v11 & 0x7FFFFFF;
      v22 = (uint64_t *)(a2 - 32 * v21);
    }
    v75 = *v22;
    v76 = &v22[4 * v21];
    while (1)
    {
      v22 += 4;
      if (v22 == v76)
        break;
      v40 = 0;
      v77 = *v22;
      if (!*v22 || *(_BYTE *)(v77 + 16) != 92)
        return v40;
      v78 = *(_QWORD *)(v77 + 8);
      if (!v78)
        return 0;
      v79 = *(_QWORD *)(v78 + 8);
      if (v79)
      {
        while (*(_QWORD *)(v79 + 24) == *(_QWORD *)(v78 + 24))
        {
          v78 = *(_QWORD *)(v78 + 8);
          v79 = *(_QWORD *)(v79 + 8);
          if (!v79)
            goto LABEL_107;
        }
        return 0;
      }
LABEL_107:
      v80 = *(unsigned int *)(v77 + 72);
      if ((_DWORD)v80 != *(_DWORD *)(v75 + 72)
        || memcmp(*(const void **)(v77 + 64), *(const void **)(v75 + 64), 4 * v80))
      {
        return 0;
      }
      v40 = 0;
      if (**(_QWORD **)(v77 - 32) != **(_QWORD **)(v75 - 32))
        return v40;
    }
    v202 = *(_QWORD *)(v75 - 32);
    v203 = *(uint64_t ***)v202;
    if ((*(_BYTE *)(v202 + 23) & 0x10) != 0)
    {
      v204 = **v203;
      v205 = *(_QWORD *)(v204 + 152);
      v206 = *(unsigned int *)(v204 + 168);
      if ((_DWORD)v206)
      {
        LODWORD(v207) = (v206 - 1) & ((v202 >> 4) ^ (v202 >> 9));
        v208 = (uint64_t *)(v205 + 16 * v207);
        v209 = *v208;
        if (*v208 != v202)
        {
          v210 = 1;
          do
          {
            if (v209 == -4096)
              goto LABEL_331;
            v211 = v207 + v210++;
            v207 = v211 & (v206 - 1);
            v209 = *(_QWORD *)(v205 + 16 * v207);
          }
          while (v209 != v202);
          v208 = (uint64_t *)(v205 + 16 * v207);
        }
      }
      else
      {
LABEL_331:
        v208 = (uint64_t *)(v205 + 16 * v206);
      }
      v235 = (_QWORD *)v208[1];
      v238 = *v235;
      v236 = (char *)(v235 + 2);
      v237 = v238;
    }
    else
    {
      v237 = 0;
      v236 = &byte_1C871356D;
    }
    LOWORD(v717) = 773;
    *(_QWORD *)&v715 = v236;
    *((_QWORD *)&v715 + 1) = v237;
    *(_QWORD *)&v716 = ".pn";
    v239 = operator new(0x48uLL);
    v239[1] = v203;
    v240 = (llvm::PHINode *)(v239 + 1);
    *v239 = 0;
    v239[2] = 0;
    v705 = (llvm::PHINode *)(v239 + 2);
    v239[3] = 0x4000000000000053;
    *((_OWORD *)v239 + 2) = 0u;
    v241 = (char *)(v239 + 4);
    *((_OWORD *)v239 + 3) = 0u;
    *((_DWORD *)v239 + 16) = 0;
    *((_DWORD *)v239 + 17) = v11 & 0x7FFFFFF;
    llvm::Value::setName((uint64_t ***)v239 + 1, (uint64_t)&v715);
    v242 = *((unsigned int *)v239 + 17);
    v243 = operator new(40 * v242);
    *v239 = v243;
    if ((_DWORD)v242)
    {
      v244 = &v243[4 * v242];
      do
      {
        *v243 = 0;
        v243[1] = 0;
        v243[2] = 0;
        v243[3] = v240;
        v243 += 4;
      }
      while (v243 != v244);
    }
    v245 = *(_DWORD *)(v2 + 20);
    v246 = a1;
    if ((v245 & 0x40000000) != 0)
    {
      v248 = *(uint64_t **)(v2 - 8);
      v249 = v2;
      v250 = &v248[4 * *(unsigned int *)(v2 + 60)];
      v247 = v245 & 0x7FFFFFF;
      v251 = &v250[v247];
    }
    else
    {
      v247 = v245 & 0x7FFFFFF;
      v248 = (uint64_t *)(v2 - 32 * v247);
      v249 = v2;
      v250 = &v248[4 * *(unsigned int *)(v2 + 60)];
      v251 = &v250[v247];
    }
    if (v247)
      v252 = v250 == v251;
    else
      v252 = 1;
    if (!v252)
    {
      v253 = 32 * v247 - 32;
      v254 = v250 + 1;
      do
      {
        v255 = *v248;
        v248 += 4;
        sub_1C477667C(v240, *(_QWORD *)(v255 - 32), *(v254 - 1));
        if (v254 == v251)
          break;
        v256 = v253;
        v253 -= 32;
        ++v254;
      }
      while (v256);
    }
    v257 = *(_QWORD *)(v249 + 40);
    v258 = (uint64_t *)(v249 + 24);
    v239[6] = v257;
    *(_WORD *)(v257 + 18) &= ~0x8000u;
    if ((*((_BYTE *)v239 + 31) & 0x10) != 0)
    {
      v379 = *(_QWORD *)(v257 + 56);
      if (v379)
      {
        v380 = *(llvm::ValueSymbolTable **)(v379 + 104);
        if (v380)
          llvm::ValueSymbolTable::reinsertValue(v380, v240);
      }
    }
    v259 = *v258;
    v239[4] = *v258;
    v239[5] = v258;
    *(_QWORD *)(v259 + 8) = v241;
    *v258 = (uint64_t)v241;
    v260 = *(_QWORD *)(v246 + 32);
    *(_QWORD *)&v715 = v239 + 1;
    if ((*(_BYTE *)(v260 + 2088) & 1) != 0)
    {
      v262 = v260 + 2096;
      v261 = 16;
    }
    else
    {
      v261 = *(_DWORD *)(v260 + 2104);
      if (!v261)
      {
        v271 = 0;
        goto LABEL_363;
      }
      v262 = *(_QWORD *)(v260 + 2096);
    }
    v263 = v261 - 1;
    v264 = v263 & ((v240 >> 4) ^ (v240 >> 9));
    v265 = (llvm::PHINode **)(v262 + 8 * v264);
    v266 = *v265;
    if (v240 == *v265)
      goto LABEL_366;
    v267 = 0;
    v268 = 1;
    while (v266 != (llvm::PHINode *)-4096)
    {
      if (v267)
        v269 = 0;
      else
        v269 = v266 == (llvm::PHINode *)-8192;
      if (v269)
        v267 = v265;
      v270 = v264 + v268++;
      v264 = v270 & v263;
      v265 = (llvm::PHINode **)(v262 + 8 * v264);
      v266 = *v265;
      if (v240 == *v265)
        goto LABEL_366;
    }
    if (v267)
      v271 = v267;
    else
      v271 = v265;
LABEL_363:
    v272 = sub_1C4E08FFC(v260 + 2088, (uint64_t)&v715, &v715, v271);
    *v272 = v715;
    v273 = v715;
    v274 = *(unsigned int *)(v260 + 2232);
    if (v274 >= *(_DWORD *)(v260 + 2236))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v260 + 2224, v260 + 2240, v274 + 1, 8);
      LODWORD(v274) = *(_DWORD *)(v260 + 2232);
    }
    *(_QWORD *)(*(_QWORD *)(v260 + 2224) + 8 * v274) = v273;
    ++*(_DWORD *)(v260 + 2232);
LABEL_366:
    v275 = *(unsigned int **)(v75 + 64);
    v276 = *(unsigned int *)(v75 + 72);
    if ((*(_BYTE *)(v249 + 23) & 0x10) != 0)
    {
      v277 = ***(_QWORD ***)v249;
      v278 = *(_QWORD *)(v277 + 152);
      v279 = *(unsigned int *)(v277 + 168);
      if ((_DWORD)v279)
      {
        LODWORD(v280) = (v279 - 1) & ((v249 >> 4) ^ (v249 >> 9));
        v281 = (uint64_t *)(v278 + 16 * v280);
        v282 = *v281;
        if (*v281 != v249)
        {
          v283 = 1;
          do
          {
            if (v282 == -4096)
              goto LABEL_373;
            v284 = v280 + v283++;
            v280 = v284 & (v279 - 1);
            v282 = *(_QWORD *)(v278 + 16 * v280);
          }
          while (v282 != v249);
          v281 = (uint64_t *)(v278 + 16 * v280);
        }
      }
      else
      {
LABEL_373:
        v281 = (uint64_t *)(v278 + 16 * v279);
      }
      v285 = (_QWORD *)v281[1];
      v288 = *v285;
      v286 = (char *)(v285 + 2);
      v287 = v288;
    }
    else
    {
      v287 = 0;
      v286 = &byte_1C871356D;
    }
    LOWORD(v717) = 261;
    *(_QWORD *)&v715 = v286;
    *((_QWORD *)&v715 + 1) = v287;
    v289 = (char *)operator new(0x80uLL);
    v290 = v289;
    v40 = v289 + 32;
    *((_DWORD *)v289 + 13) = *((_DWORD *)v289 + 13) & 0x38000000 | 1;
    *(_QWORD *)v289 = 0;
    *((_QWORD *)v289 + 1) = 0;
    *((_QWORD *)v289 + 2) = 0;
    *((_QWORD *)v289 + 3) = v289 + 32;
    v291 = *(_QWORD *)v240;
    if (!(_DWORD)v276)
    {
      v297 = *(_QWORD *)v240;
      v294 = v705;
      goto LABEL_388;
    }
    v292 = 4 * v276;
    v293 = v275;
    v294 = v705;
    while (1)
    {
      v295 = *v293;
      v296 = *(unsigned __int8 *)(v291 + 8);
      if (v291 && v296 == 17)
      {
        if (*(_QWORD *)(v291 + 32) <= v295)
        {
LABEL_826:
          v297 = 0;
LABEL_388:
          *((_QWORD *)v289 + 4) = v297;
          *((_QWORD *)v289 + 5) = 0;
          *((_QWORD *)v289 + 6) = 0x10000005CLL;
          *(_OWORD *)(v289 + 56) = 0u;
          *(_OWORD *)(v289 + 72) = 0u;
          *((_DWORD *)v289 + 22) = 0;
          v299 = *(_QWORD *)v294;
          *(_QWORD *)v289 = v240;
          *((_QWORD *)v289 + 1) = v299;
          if (v299)
            *(_QWORD *)(v299 + 16) = v289 + 8;
          *((_QWORD *)v289 + 2) = v294;
          *(_QWORD *)v294 = v289;
          v300 = (uint64_t)(v289 + 112);
          *((_QWORD *)v289 + 12) = v289 + 112;
          v301 = (uint64_t)(v289 + 96);
          *((_QWORD *)v290 + 13) = 0x400000000;
          if (v276 >= 5)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v301, v300, v276, 4);
            v302 = *((unsigned int *)v290 + 26);
            v300 = *((_QWORD *)v290 + 12);
LABEL_393:
            memcpy((void *)(v300 + 4 * v302), v275, 4 * v276);
            v303 = *((_DWORD *)v290 + 26);
          }
          else
          {
            if ((_DWORD)v276)
            {
              v302 = 0;
              goto LABEL_393;
            }
            v303 = 0;
          }
          *((_DWORD *)v290 + 26) = v303 + v276;
          llvm::Value::setName((uint64_t ***)v40, (uint64_t)&v715);
          v182 = v40;
          v218 = v249;
          goto LABEL_310;
        }
        v298 = (uint64_t *)(v291 + 24);
      }
      else
      {
        v297 = 0;
        if (!v291 || v296 != 16)
          goto LABEL_388;
        if (v295 >= *(_DWORD *)(v291 + 12))
          goto LABEL_826;
        v298 = (uint64_t *)(*(_QWORD *)(v291 + 16) + 8 * v295);
      }
      v291 = *v298;
      ++v293;
      v297 = v291;
      v292 -= 4;
      if (!v292)
        goto LABEL_388;
    }
  }
  if (v14 != 93)
    goto LABEL_23;
  if ((v11 & 0x40000000) != 0)
  {
    v17 = *(uint64_t **)(a2 - 8);
    v16 = v11 & 0x7FFFFFF;
  }
  else
  {
    v16 = v11 & 0x7FFFFFF;
    v17 = (uint64_t *)(a2 - 32 * v16);
  }
  v38 = *v17;
  v39 = &v17[4 * v16];
  while (1)
  {
    v17 += 4;
    if (v17 == v39)
      break;
    v40 = 0;
    v41 = *v17;
    if (!*v17 || *(_BYTE *)(v41 + 16) != 93)
      return v40;
    v42 = *(_QWORD *)(v41 + 8);
    if (!v42)
      return 0;
    v43 = *(_QWORD *)(v42 + 8);
    if (v43)
    {
      while (*(_QWORD *)(v43 + 24) == *(_QWORD *)(v42 + 24))
      {
        v42 = *(_QWORD *)(v42 + 8);
        v43 = *(_QWORD *)(v43 + 8);
        if (!v43)
          goto LABEL_54;
      }
      return 0;
    }
LABEL_54:
    v44 = *(unsigned int *)(v41 + 72);
    if ((_DWORD)v44 != *(_DWORD *)(v38 + 72))
      return 0;
    v45 = v38;
    v46 = memcmp(*(const void **)(v41 + 64), *(const void **)(v38 + 64), 4 * v44);
    v38 = v45;
    v40 = 0;
    if (v46)
      return v40;
  }
  v311 = 0;
  v312 = 0;
  v684 = v38;
  v712[0] = 0x100000000;
  v689 = (llvm::PHINode *)(v2 + 24);
  v696 = (llvm::PHINode *)(v38 - 64);
  do
  {
    v313 = a1;
    v314 = *((unsigned int *)v712 + v312);
    v315 = v311;
    v316 = *((_QWORD *)v696 + 4 * v314);
    v317 = *(uint64_t ***)v316;
    v707 = v315;
    if ((*(_BYTE *)(v316 + 23) & 0x10) != 0)
    {
      v318 = **v317;
      v319 = *(_QWORD *)(v318 + 152);
      v320 = *(unsigned int *)(v318 + 168);
      if ((_DWORD)v320)
      {
        LODWORD(v321) = (v320 - 1) & ((v316 >> 4) ^ (v316 >> 9));
        v322 = (uint64_t *)(v319 + 16 * v321);
        v323 = *v322;
        if (*v322 == v316)
        {
LABEL_421:
          v326 = (_QWORD *)v322[1];
          v329 = *v326;
          v328 = (char *)(v326 + 2);
          v327 = v329;
          goto LABEL_422;
        }
        v324 = 1;
        while (v323 != -4096)
        {
          v325 = v321 + v324++;
          v321 = v325 & (v320 - 1);
          v323 = *(_QWORD *)(v319 + 16 * v321);
          if (v323 == v316)
          {
            v322 = (uint64_t *)(v319 + 16 * v321);
            goto LABEL_421;
          }
        }
      }
      v322 = (uint64_t *)(v319 + 16 * v320);
      goto LABEL_421;
    }
    v327 = 0;
    v328 = &byte_1C871356D;
LABEL_422:
    v330 = *(_DWORD *)(v2 + 20) & 0x7FFFFFF;
    LOWORD(v717) = 773;
    *(_QWORD *)&v715 = v328;
    *((_QWORD *)&v715 + 1) = v327;
    *(_QWORD *)&v716 = ".pn";
    v331 = operator new(0x48uLL);
    v331[1] = v317;
    v332 = (llvm::PHINode *)(v331 + 1);
    *v331 = 0;
    v331[2] = 0;
    v331[3] = 0x4000000000000053;
    *((_OWORD *)v331 + 2) = 0u;
    v333 = (char *)(v331 + 4);
    *((_OWORD *)v331 + 3) = 0u;
    *((_DWORD *)v331 + 16) = 0;
    *((_DWORD *)v331 + 17) = v330;
    llvm::Value::setName((uint64_t ***)v331 + 1, (uint64_t)&v715);
    v334 = *((unsigned int *)v331 + 17);
    v335 = operator new(40 * v334);
    *v331 = v335;
    if ((_DWORD)v334)
    {
      v336 = &v335[4 * v334];
      do
      {
        *v335 = 0;
        v335[1] = 0;
        v335[2] = 0;
        v335[3] = v332;
        v335 += 4;
      }
      while (v335 != v336);
    }
    __dst.__r_.__value_.__r.__words[(int)v314] = (std::string::size_type)v332;
    v337 = *(_DWORD *)(v2 + 20);
    if ((v337 & 0x40000000) != 0)
    {
      v344 = v2;
      v340 = *(uint64_t **)(v2 - 8);
      v341 = v344;
      v342 = &v340[4 * *(unsigned int *)(v344 + 60)];
      v338 = v337 & 0x7FFFFFF;
      v343 = &v342[v338];
    }
    else
    {
      v338 = v337 & 0x7FFFFFF;
      v339 = v2;
      v340 = (uint64_t *)(v2 - 32 * v338);
      v341 = v339;
      v342 = &v340[4 * *(unsigned int *)(v339 + 60)];
      v343 = &v342[v338];
    }
    if (v338)
      v345 = v342 == v343;
    else
      v345 = 1;
    if (!v345)
    {
      v346 = 32 * v338 - 32;
      v347 = v342 + 1;
      do
      {
        v348 = *v340;
        v340 += 4;
        sub_1C477667C(v332, *(_QWORD *)(v348 + 32 * v314 - 64), *(v347 - 1));
        if (v347 == v343)
          break;
        v349 = v346;
        v346 -= 32;
        ++v347;
      }
      while (v349);
    }
    v2 = v341;
    v350 = *(_QWORD *)(v341 + 40);
    v331[6] = v350;
    *(_WORD *)(v350 + 18) &= ~0x8000u;
    if ((*((_BYTE *)v331 + 31) & 0x10) != 0)
    {
      v367 = *(_QWORD *)(v350 + 56);
      if (v367)
      {
        v368 = *(llvm::ValueSymbolTable **)(v367 + 104);
        if (v368)
          llvm::ValueSymbolTable::reinsertValue(v368, v332);
      }
    }
    v351 = *(_QWORD *)v689;
    v331[4] = *(_QWORD *)v689;
    v331[5] = v689;
    *(_QWORD *)(v351 + 8) = v333;
    *(_QWORD *)v689 = v333;
    a1 = v313;
    v352 = *(_QWORD *)(v313 + 32);
    *(_QWORD *)&v715 = v331 + 1;
    if ((*(_BYTE *)(v352 + 2088) & 1) != 0)
    {
      v354 = v352 + 2096;
      v353 = 16;
    }
    else
    {
      v353 = *(_DWORD *)(v352 + 2104);
      if (!v353)
      {
        v363 = 0;
        goto LABEL_452;
      }
      v354 = *(_QWORD *)(v352 + 2096);
    }
    v355 = v353 - 1;
    v356 = v355 & ((v332 >> 4) ^ (v332 >> 9));
    v357 = (llvm::PHINode **)(v354 + 8 * v356);
    v358 = *v357;
    if (v332 == *v357)
      goto LABEL_455;
    v359 = 0;
    v360 = 1;
    while (v358 != (llvm::PHINode *)-4096)
    {
      if (v359)
        v361 = 0;
      else
        v361 = v358 == (llvm::PHINode *)-8192;
      if (v361)
        v359 = v357;
      v362 = v356 + v360++;
      v356 = v362 & v355;
      v357 = (llvm::PHINode **)(v354 + 8 * v356);
      v358 = *v357;
      if (v332 == *v357)
        goto LABEL_455;
    }
    if (v359)
      v363 = v359;
    else
      v363 = v357;
LABEL_452:
    v364 = sub_1C4E08FFC(v352 + 2088, (uint64_t)&v715, &v715, v363);
    *v364 = v715;
    v365 = v715;
    v366 = *(unsigned int *)(v352 + 2232);
    if (v366 >= *(unsigned int *)(v352 + 2236))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v352 + 2224, v352 + 2240, v366 + 1, 8);
      v366 = *(unsigned int *)(v352 + 2232);
    }
    *(_QWORD *)(*(_QWORD *)(v352 + 2224) + 8 * v366) = v365;
    ++*(_DWORD *)(v352 + 2232);
LABEL_455:
    v311 = 1;
    v312 = 1;
  }
  while ((v707 & 1) == 0);
  v369 = *(void **)(v684 + 64);
  v370 = *(unsigned int *)(v684 + 72);
  if ((*(_BYTE *)(v341 + 23) & 0x10) != 0)
  {
    v371 = ***(_QWORD ***)v341;
    v372 = *(_QWORD *)(v371 + 152);
    v373 = *(unsigned int *)(v371 + 168);
    if (!(_DWORD)v373)
      goto LABEL_668;
    LODWORD(v374) = (v373 - 1) & ((v341 >> 4) ^ (v341 >> 9));
    v375 = (uint64_t *)(v372 + 16 * v374);
    v376 = *v375;
    if (*v375 != v341)
    {
      v377 = 1;
      while (v376 != -4096)
      {
        v378 = v374 + v377++;
        v374 = v378 & (v373 - 1);
        v376 = *(_QWORD *)(v372 + 16 * v374);
        if (v376 == v341)
        {
          v375 = (uint64_t *)(v372 + 16 * v374);
          goto LABEL_669;
        }
      }
LABEL_668:
      v375 = (uint64_t *)(v372 + 16 * v373);
    }
LABEL_669:
    v537 = (_QWORD *)v375[1];
    v540 = *v537;
    v538 = (char *)(v537 + 2);
    v539 = v540;
  }
  else
  {
    v539 = 0;
    v538 = &byte_1C871356D;
  }
  LOWORD(v717) = 261;
  *(_QWORD *)&v715 = v538;
  *((_QWORD *)&v715 + 1) = v539;
  v182 = sub_1C61BD4C4((llvm::Type **)__dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_, v369, v370, (uint64_t)&v715, 0);
  v40 = v182;
LABEL_328:
  v218 = v2;
LABEL_310:
  sub_1C582DE88((unsigned __int8 **)v182, v218);
  return v40;
}

