void sub_1C5201E78(uint64_t **a1, unint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;

  v4 = a1[1];
  v5 = a1[2];
  if (a2 <= ((char *)v5 - (char *)v4) >> 5)
  {
    if (a2)
    {
      v11 = &v4[4 * a2];
      do
      {
        *v4 = (uint64_t)v4;
        v4[1] = (uint64_t)v4;
        v4[2] = 0;
        v4[3] = (uint64_t)v4;
        v4 += 4;
      }
      while (v4 != v11);
      v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    v6 = (char *)v4 - (char *)*a1;
    v7 = a2 + (v6 >> 5);
    if (v7 >> 59)
      abort();
    v8 = (char *)v5 - (char *)*a1;
    if (v8 >> 4 > v7)
      v7 = v8 >> 4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v9 = 0x7FFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 >> 59)
        sub_1C4764EE4();
      v10 = (char *)operator new(32 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = (uint64_t *)&v10[32 * (v6 >> 5)];
    v13 = &v12[4 * a2];
    v14 = v12;
    do
    {
      *v14 = (uint64_t)v14;
      v14[1] = (uint64_t)v14;
      v14[2] = 0;
      v14[3] = (uint64_t)v14;
      v14 += 4;
    }
    while (v14 != v13);
    v15 = (uint64_t *)&v10[32 * v9];
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      *a1 = v12;
      a1[1] = v13;
      a1[2] = v15;
      if (v16)
LABEL_27:
        operator delete(v16);
    }
    else
    {
      do
      {
        v18 = v12;
        v16 -= 4;
        v12 = sub_1C6185480(v12 - 4, v16);
        *(v18 - 1) = *(v18 - 3);
      }
      while (v16 != v17);
      v16 = *a1;
      v19 = a1[1];
      *a1 = v12;
      a1[1] = v13;
      a1[2] = v15;
      if (v19 != v16)
      {
        do
        {
          v20 = v19 - 4;
          if (*(v19 - 2))
          {
            v22 = *(v19 - 4);
            v21 = (uint64_t *)*(v19 - 3);
            v23 = *v21;
            *(_QWORD *)(v23 + 8) = *(_QWORD *)(v22 + 8);
            **(_QWORD **)(v22 + 8) = v23;
            *(v19 - 2) = 0;
            if (v21 != v20)
            {
              do
              {
                v24 = (uint64_t *)v21[1];
                operator delete(v21);
                v21 = v24;
              }
              while (v24 != v20);
            }
          }
          v19 = v20;
        }
        while (v20 != v16);
      }
      if (v16)
        goto LABEL_27;
    }
  }
}

_QWORD *sub_1C5202020(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = result;
  v4 = (_QWORD *)result[1];
  if (v4 != a2)
  {
    do
    {
      v5 = v4 - 4;
      if (*(v4 - 2))
      {
        v6 = *(v4 - 4);
        result = (_QWORD *)*(v4 - 3);
        v7 = *result;
        *(_QWORD *)(v7 + 8) = *(_QWORD *)(v6 + 8);
        **(_QWORD **)(v6 + 8) = v7;
        *(v4 - 2) = 0;
        if (result != v5)
        {
          do
          {
            v8 = (_QWORD *)result[1];
            operator delete(result);
            result = v8;
          }
          while (v8 != v5);
        }
      }
      v4 = v5;
    }
    while (v5 != a2);
  }
  v3[1] = a2;
  return result;
}

int *sub_1C52020A8(uint64_t a1, int *a2)
{
  unsigned int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int *result;
  int v11;
  int v12;
  int *v14;
  int v15;
  BOOL v16;
  unsigned int v18;
  int v20;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  int *v32;
  int v33;
  BOOL v34;
  unsigned int v36;
  int *v38;

  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    v5 = a2[1];
    v6 = ((37 * v5) | ((unint64_t)(37 * *a2) << 32))
       + ~((unint64_t)(37 * v5) << 32);
    v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    v9 = (v4 - 1) & (((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27)));
    result = (int *)(*(_QWORD *)a1 + 12 * v9);
    v11 = *result;
    v12 = result[1];
    if (*a2 == *result && v5 == v12)
      return result;
    v14 = 0;
    v15 = 1;
    while (v11 != -1 || v12 != -1)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v12 == -2;
      if (v16 && v11 == -2)
        v14 = result;
      v18 = v9 + v15++;
      v9 = v18 & (v4 - 1);
      result = (int *)(*(_QWORD *)a1 + 12 * v9);
      v11 = *result;
      v12 = result[1];
      if (*a2 == *result && v5 == v12)
        return result;
    }
    if (v14)
      result = v14;
  }
  else
  {
    result = 0;
  }
  v20 = *(_DWORD *)(a1 + 8);
  if (4 * v20 + 4 >= 3 * v4)
  {
    sub_1C52023EC(a1, 2 * v4);
    v22 = *(_DWORD *)(a1 + 16);
    if (v22)
    {
      v23 = a2[1];
      v24 = ((37 * v23) | ((unint64_t)(37 * *a2) << 32))
          + ~((unint64_t)(37 * v23) << 32);
      v25 = (v24 ^ (v24 >> 22)) + ~((v24 ^ (v24 >> 22)) << 13);
      v26 = (9 * (v25 ^ (v25 >> 8))) ^ ((9 * (v25 ^ (v25 >> 8))) >> 15);
      v27 = v22 - 1;
      v28 = v27 & (((v26 + ~(v26 << 27)) >> 31) ^ (v26 + ~((_DWORD)v26 << 27)));
      result = (int *)(*(_QWORD *)a1 + 12 * v28);
      v29 = *result;
      v30 = result[1];
      if (*a2 != *result || v23 != v30)
      {
        v32 = 0;
        v33 = 1;
        while (v29 != -1 || v30 != -1)
        {
          if (v32)
            v34 = 0;
          else
            v34 = v30 == -2;
          if (v34 && v29 == -2)
            v32 = result;
          v36 = v28 + v33++;
          v28 = v36 & v27;
          result = (int *)(*(_QWORD *)a1 + 12 * v28);
          v29 = *result;
          v30 = result[1];
          if (*a2 == *result && v23 == v30)
            goto LABEL_28;
        }
        if (v32)
          result = v32;
      }
    }
    else
    {
      result = 0;
    }
  }
  else if (v4 + ~v20 - *(_DWORD *)(a1 + 12) <= v4 >> 3)
  {
    sub_1C52023EC(a1, v4);
    v38 = 0;
    sub_1C520231C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v38);
    result = v38;
  }
LABEL_28:
  ++*(_DWORD *)(a1 + 8);
  if (*result != -1 || result[1] != -1)
    --*(_DWORD *)(a1 + 12);
  *result = *a2;
  *(_QWORD *)(result + 1) = a2[1];
  return result;
}

uint64_t sub_1C520231C(uint64_t result, int a2, int a3, int a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  _DWORD *v10;
  int v11;
  int v12;
  _DWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v18;

  if (a2)
  {
    v5 = ((37 * a4) | ((unint64_t)(37 * a3) << 32))
       + ~((unint64_t)(37 * a4) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = a2 - 1;
    v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v10 = (_DWORD *)(result + 12 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 != a3 || v12 != a4)
    {
      v14 = 0;
      v15 = 1;
      while (v11 != -1 || v12 != -1)
      {
        if (v14)
          v16 = 0;
        else
          v16 = v12 == -2;
        if (v16 && v11 == -2)
          v14 = v10;
        v18 = v9 + v15++;
        v9 = v18 & v8;
        v10 = (_DWORD *)(result + 12 * (v18 & v8));
        v11 = *v10;
        v12 = v10[1];
        if (*v10 == a3 && v12 == a4)
          goto LABEL_25;
      }
      if (v14)
        v10 = v14;
    }
  }
  else
  {
    v10 = 0;
  }
LABEL_25:
  *a5 = v10;
  return result;
}

_QWORD *sub_1C52023EC(uint64_t a1, int a2)
{
  int v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  int v14;
  int *v15;
  int v16;
  int v17;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  _DWORD *v24;
  int v25;
  int v26;
  _DWORD *v28;
  int v29;
  BOOL v30;
  unsigned int v32;
  uint64_t v34;
  uint64_t v35;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(12 * v8, (std::align_val_t)4uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 12 * v10;
      v12 = result;
      do
      {
        *v12 = -1;
        v12 = (_QWORD *)((char *)v12 + 12);
        v11 -= 12;
      }
      while (v11);
    }
    if (v3)
    {
      v13 = 0;
      v14 = v10 - 1;
      v15 = v4;
      do
      {
        v16 = *v15;
        v17 = v15[1];
        if ((*v15 != -1 || v17 != -1) && (v16 != -2 || v17 != -2))
        {
          v20 = ((37 * v17) | ((unint64_t)(37 * v16) << 32))
              + ~((unint64_t)(37 * v17) << 32);
          v21 = (v20 ^ (v20 >> 22)) + ~((v20 ^ (v20 >> 22)) << 13);
          v22 = (9 * (v21 ^ (v21 >> 8))) ^ ((9 * (v21 ^ (v21 >> 8))) >> 15);
          v23 = v14 & (((v22 + ~(v22 << 27)) >> 31) ^ (v22 + ~((_DWORD)v22 << 27)));
          v24 = (_DWORD *)result + 3 * v23;
          v25 = *v24;
          v26 = v24[1];
          if (v16 != *v24 || v17 != v26)
          {
            v28 = 0;
            v29 = 1;
            while (v25 != -1 || v26 != -1)
            {
              if (v28)
                v30 = 0;
              else
                v30 = v26 == -2;
              if (v30 && v25 == -2)
                v28 = v24;
              v32 = v23 + v29++;
              v23 = v32 & v14;
              v24 = (_DWORD *)result + 3 * (v32 & v14);
              v25 = *v24;
              v26 = v24[1];
              if (v16 == *v24 && v17 == v26)
                goto LABEL_41;
            }
            if (v28)
              v24 = v28;
          }
LABEL_41:
          *v24 = v16;
          v24[1] = v17;
          v24[2] = v15[2];
          *(_DWORD *)(a1 + 8) = ++v13;
        }
        v15 += 3;
      }
      while (v15 != &v4[3 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v34 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v34)
  {
    v35 = 12 * v34;
    do
    {
      *result = -1;
      result = (_QWORD *)((char *)result + 12);
      v35 -= 12;
    }
    while (v35);
  }
  return result;
}

uint64_t sub_1C52025D0(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v3 = (uint64_t *)(a2 + 16 * (a1 & 0x7FFFFFFF) + 8);
  if (a1 >= 0)
    v3 = (uint64_t *)(a3 + 8 * a1);
  v4 = *v3;
  if (!v4)
    return 1;
  if ((*(_BYTE *)(v4 + 3) & 1) == 0)
  {
    v4 = *(_QWORD *)(v4 + 24);
    if (!v4 || (*(_BYTE *)(v4 + 3) & 1) == 0)
      return 1;
  }
  v6 = *(_QWORD *)(v4 + 8);
  if (**(_WORD **)(v6 + 16) == 10)
  {
    while (1)
    {
      v4 = *(_QWORD *)(v4 + 24);
      if (!v4 || (*(_BYTE *)(v4 + 3) & 1) == 0)
        break;
      v7 = *(_QWORD *)(v4 + 8);
      if (v7 != v6)
      {
        result = 0;
        v6 = *(_QWORD *)(v4 + 8);
        if (**(_WORD **)(v7 + 16) != 10)
          return result;
      }
    }
    return 1;
  }
  return 0;
}

void sub_1C5202668(uint64_t *a1, unsigned int a2)
{
  unsigned int v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a1[2])
  {
    v4 = a2 >> 7;
    v5 = sub_1C4DB3A84(a1, a2 >> 7);
    if (v5 != a1)
    {
      v6 = v5 + 2;
      if (*((_DWORD *)v5 + 4) == v4)
      {
        v7 = 0;
        v8 = 1;
        v9 = &v6[(a2 >> 6) & 1];
        v9[1] &= ~(1 << a2);
        while (!v6[v7 + 1])
        {
          v10 = v8;
          v8 = 0;
          v7 = 1;
          if ((v10 & 1) == 0)
          {
            v11 = a1[2];
            v12 = *(_QWORD *)(a1[3] + 8);
            v13 = *v5;
            *(_QWORD *)(v13 + 8) = v5[1];
            *(_QWORD *)v5[1] = v13;
            a1[2] = v11 - 1;
            a1[3] = v12;
            operator delete(v5);
            return;
          }
        }
      }
    }
  }
}

uint64_t sub_1C5202728()
{
  __n128 v1;
  int v2;
  char v3;
  char *v4;

  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Disable critical edge splitting during PHI elimination";
  v1.n128_u64[1] = 54;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED7FD9D8, "disable-phi-elim-edge-splitting", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FD9D8, &dword_1C475E000);
  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Split all critical edges during PHI elimination";
  v1.n128_u64[1] = 47;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED7FDA98, "phi-elim-split-all-critical-edges", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FDA98, &dword_1C475E000);
  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Do not use an early exit if isLiveOutPastPHIs returns true.";
  v1.n128_u64[1] = 59;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED7FDB58, "no-phi-elim-live-out-early-exit", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FDB58, &dword_1C475E000);
}

unint64_t llvm::findPHICopyInsertPoint(llvm *this, llvm::MachineBasicBlock *a2, llvm::MachineBasicBlock *a3)
{
  _QWORD *v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  char *v20;
  char *v21;
  uint64_t v22;
  int v23;
  _BYTE v24[64];

  v4 = (_QWORD *)((char *)this + 48);
  v5 = *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFFFF8;
  if ((llvm *)((char *)this + 48) == (llvm *)v5)
    return *((_QWORD *)this + 7);
  v6 = *((unsigned __int8 *)a2 + 184);
  if (*((_BYTE *)a2 + 184) || *((_BYTE *)a2 + 202))
  {
    v20 = v24;
    v21 = v24;
    v22 = 8;
    v23 = 0;
    v7 = *(_QWORD *)(*((_QWORD *)this + 4) + 40);
    if ((a3 & 0x80000000) != 0)
      v8 = (uint64_t *)(*(_QWORD *)(v7 + 24) + 16 * (a3 & 0x7FFFFFFF) + 8);
    else
      v8 = (uint64_t *)(*(_QWORD *)(v7 + 272) + 8 * a3);
    v10 = *v8;
    if (*v8)
    {
      if ((*(_BYTE *)(v10 + 3) & 1) != 0 || (v10 = *(_QWORD *)(v10 + 24)) != 0 && (*(_BYTE *)(v10 + 3) & 1) != 0)
      {
        v11 = *(_QWORD *)(v10 + 8);
LABEL_13:
        if (*(llvm **)(v11 + 24) == this)
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v20, v11);
          v11 = *(_QWORD *)(v10 + 8);
        }
        while (1)
        {
          v10 = *(_QWORD *)(v10 + 24);
          if (!v10 || (*(_BYTE *)(v10 + 3) & 1) == 0)
            break;
          if (*(_QWORD *)(v10 + 8) != v11)
          {
            v11 = *(_QWORD *)(v10 + 8);
            goto LABEL_13;
          }
        }
        v5 = *v4 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    v12 = *((_QWORD *)this + 7);
    if (!v5 || (*(_BYTE *)v5 & 4) == 0)
    {
      while ((*(_WORD *)(v5 + 44) & 4) != 0)
        v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
    }
    if ((_QWORD *)v5 != v4)
    {
      while (1)
      {
        v13 = (char *)sub_1C477672C((uint64_t)&v20, v5);
        v14 = v21 == v20 ? (uint64_t *)((char *)&v22 + 4) : &v22;
        if (v13 != &v21[8 * *(unsigned int *)v14])
          break;
        if (v6)
        {
          v15 = *(_QWORD *)(v5 + 16);
          v16 = *(_QWORD *)(v15 + 8);
          if ((*(_WORD *)(v5 + 44) & 0xC) != 0 && (*(_WORD *)(v5 + 44) & 4) == 0)
          {
            v18 = v5;
            if ((v16 & 0x80) != 0)
            {
LABEL_49:
              v12 = v5;
              goto LABEL_54;
            }
            while ((*(_WORD *)(v18 + 44) & 8) != 0)
            {
              v18 = *(_QWORD *)(v18 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v18 + 16) + 8) & 0x80) != 0)
                goto LABEL_49;
            }
          }
          else if ((v16 & 0x80) != 0)
          {
            goto LABEL_49;
          }
        }
        else
        {
          v15 = *(_QWORD *)(v5 + 16);
        }
        if (*(_WORD *)v15 == 2)
          goto LABEL_49;
        v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
        if (!v5 || (*(_BYTE *)v5 & 4) == 0)
        {
          while ((*(_WORD *)(v5 + 44) & 4) != 0)
            v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
        }
        if ((_QWORD *)v5 == v4)
          goto LABEL_54;
      }
      if ((*(_BYTE *)v5 & 4) == 0)
      {
        while ((*(_WORD *)(v5 + 44) & 8) != 0)
          v5 = *(_QWORD *)(v5 + 8);
      }
      v12 = *(_QWORD *)(v5 + 8);
    }
LABEL_54:
    v9 = llvm::MachineBasicBlock::SkipPHIsAndLabels((uint64_t)this, v12);
    if (v21 != v20)
      free(v21);
    return v9;
  }
  return llvm::MachineBasicBlock::getFirstTerminator(this);
}

uint64_t sub_1C5202ABC(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Post RA hazard recognizer";
  *(_QWORD *)(v2 + 8) = 25;
  *(_QWORD *)(v2 + 16) = "post-RA-hazard-rec";
  *(_QWORD *)(v2 + 24) = 18;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F2F28;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5202B4C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

_QWORD *sub_1C5202B4C()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F2F28);
  *result = &off_1E81485F0;
  return result;
}

void sub_1C5202B8C(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C5202C20(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5202CAC(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C5202CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t i;
  uint64_t v10;
  BOOL v11;

  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 888))(v3, a2);
  if (v4)
  {
    v5 = v4;
    v6 = a2 + 320;
    v7 = *(_QWORD *)(a2 + 328);
    if (v7 == v6)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      do
      {
        for (i = *(_QWORD *)(v7 + 56); i != v7 + 48; i = *(_QWORD *)(i + 8))
        {
          v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 64))(v5, i);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 104))(v5, v10);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 744))(v3, v7, i, v10);
          v11 = (_DWORD)v10 != 0;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, i);
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5))
            (*(void (**)(uint64_t))(*(_QWORD *)v5 + 80))(v5);
          if (!i || (*(_BYTE *)i & 4) == 0)
          {
            while ((*(_WORD *)(i + 44) & 8) != 0)
              i = *(_QWORD *)(i + 8);
          }
          v8 |= v11;
        }
        v7 = *(_QWORD *)(v7 + 8);
      }
      while (v7 != v6);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  else
  {
    v8 = 0;
  }
  return v8 & 1;
}

uint64_t sub_1C5202E48(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Post RA top-down list latency scheduler";
  *(_QWORD *)(v2 + 8) = 39;
  *(_QWORD *)(v2 + 16) = "post-RA-sched";
  *(_QWORD *)(v2 + 24) = 13;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F6FB8;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5202F80;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

llvm *sub_1C5202ED8(llvm *result)
{
  _QWORD *v1;
  _QWORD *v2;
  llvm *v3;
  void *v4;

  v1 = (_QWORD *)*((_QWORD *)result + 345);
  v2 = (_QWORD *)*((_QWORD *)result + 346);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      if (*v1)
      {
        result = (llvm *)(*(uint64_t (**)(llvm *))(*(_QWORD *)v3 + 32))(v3);
      }
      else
      {
        result = llvm::dbgs(result);
        v4 = (void *)*((_QWORD *)result + 4);
        if (*((_QWORD *)result + 3) - (_QWORD)v4 > 0xEuLL)
        {
          qmemcpy(v4, "**** NOOP ****\n", 15);
          *((_QWORD *)result + 4) += 15;
        }
        else
        {
          result = llvm::raw_ostream::write(result, "**** NOOP ****\n", 0xFuLL);
        }
      }
      ++v1;
    }
    while (v1 != v2);
  }
  return result;
}

double sub_1C5202F80()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = operator new();
  v1 = sub_1C4776848(v0, (uint64_t)&unk_1EF8F6FB8);
  *(_QWORD *)v1 = &off_1E81486F0;
  *(_QWORD *)(v1 + 272) = 0;
  *(_QWORD *)(v1 + 280) = 0;
  *(_QWORD *)(v1 + 248) = 0;
  *(_QWORD *)(v1 + 256) = 0;
  *(_DWORD *)(v1 + 264) = 0;
  *(_QWORD *)(v1 + 288) = 0;
  *(_QWORD *)(v1 + 296) = v1 + 320;
  *(_OWORD *)(v1 + 304) = xmmword_1C6612EF0;
  *(_QWORD *)(v1 + 328) = v1 + 344;
  *(_QWORD *)&result = 0x600000000;
  *(_QWORD *)(v1 + 336) = 0x600000000;
  *(_DWORD *)(v1 + 392) = 0;
  *(_QWORD *)(v1 + 400) = v1 + 416;
  *(_QWORD *)(v1 + 408) = 0x600000000;
  *(_DWORD *)(v1 + 464) = 0;
  *(_QWORD *)(v1 + 480) = 0;
  *(_QWORD *)(v1 + 488) = 0;
  *(_QWORD *)(v1 + 472) = 0;
  return result;
}

void sub_1C5203010(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;

  *a1 = (uint64_t)&off_1E81486F0;
  sub_1C61D92E0(a1 + 32);
  *a1 = (uint64_t)&unk_1E8144BE8;
  v2 = (uint64_t *)a1[22];
  if (v2 != a1 + 24)
    free(v2);
  v3 = (uint64_t *)a1[13];
  if (v3 != a1 + 15)
    free(v3);
  v4 = (uint64_t *)a1[4];
  if (v4 != a1 + 6)
    free(v4);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C520309C(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;

  *a1 = (uint64_t)&off_1E81486F0;
  sub_1C61D92E0(a1 + 32);
  *a1 = (uint64_t)&unk_1E8144BE8;
  v2 = (uint64_t *)a1[22];
  if (v2 != a1 + 24)
    free(v2);
  v3 = (uint64_t *)a1[13];
  if (v3 != a1 + 15)
    free(v3);
  v4 = (uint64_t *)a1[4];
  if (v4 != a1 + 6)
    free(v4);
  llvm::Pass::~Pass((llvm::Pass *)a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C520313C(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::TargetPassConfig::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineLoopInfo::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C52031F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  void *v6;
  const llvm::MachineLoopInfo *v7;
  void **v8;
  void *v9;
  uint64_t v10;
  void **v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  size_t v20;
  uint64_t *v21;
  unint64_t v22;
  size_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  const llvm::RegisterClassInfo *v27;
  uint64_t CriticalAntiDepBreaker;
  uint64_t i;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  _QWORD *v34;
  unint64_t v35;
  __int16 v36;
  int v37;
  int v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v45[115];
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t (**v50)(llvm::SchedulingPriorityQueue *__hidden);
  int v51;
  char v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t (***v56)(llvm::SchedulingPriorityQueue *__hidden);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  _BYTE v64[32];
  unsigned int v65;
  void *v66[2];
  _QWORD v67[6];

  v67[4] = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, *(const llvm::Function **)a2) & 1) != 0)
    return 0;
  *(_QWORD *)(a1 + 248) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  v5 = **(void ****)(a1 + 8);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::MachineLoopInfo::ID);
  v7 = (const llvm::MachineLoopInfo *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::MachineLoopInfo::ID);
  v8 = **(void ****)(a1 + 8);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != &llvm::AAResultsWrapperPass::ID);
  v10 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), &llvm::AAResultsWrapperPass::ID)+ 32);
  v11 = **(void ****)(a1 + 8);
  do
  {
    v12 = *v11;
    v11 += 2;
  }
  while (v12 != &llvm::TargetPassConfig::ID);
  v13 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), &llvm::TargetPassConfig::ID);
  llvm::RegisterClassInfo::runOnMachineFunction((llvm::RegisterClassInfo *)(a1 + 256), (const llvm::MachineFunction *)a2);
  v66[0] = v67;
  v66[1] = (void *)0x400000000;
  v14 = *(_QWORD *)(a2 + 16);
  v15 = *(_DWORD *)(*(_QWORD *)(v13 + 112) + 552);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 312))(v14);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v14 + 320))(v14, v66);
  if (word_1ED7FDC34)
  {
    if (byte_1ED7FDCA8)
      goto LABEL_11;
LABEL_31:
    v4 = 0;
    goto LABEL_86;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 264))(v14)
    || (*(int (**)(uint64_t))(*(_QWORD *)v14 + 352))(v14) > v15)
  {
    goto LABEL_31;
  }
LABEL_11:
  if (word_1ED7FDE74)
  {
    if (byte_1ED7FDEFF >= 0)
      v17 = byte_1ED7FDEFF & 0x7F;
    else
      v17 = qword_1ED7FDEF0;
    if (v17 == 8)
    {
      if (byte_1ED7FDEFF >= 0)
        v21 = &qword_1ED7FDEE8;
      else
        v21 = (uint64_t *)qword_1ED7FDEE8;
      if (byte_1ED7FDEFF >= 0)
        v22 = byte_1ED7FDEFF;
      else
        v22 = qword_1ED7FDEF0;
      if (v22 >= 8)
        v23 = 8;
      else
        v23 = v22;
      v24 = memcmp(v21, "critical", v23) == 0;
      v16 = v22 == 8 && v24;
    }
    else if (v17 == 3)
    {
      if (byte_1ED7FDEFF >= 0)
        v18 = byte_1ED7FDEFF;
      else
        v18 = qword_1ED7FDEF0;
      if (byte_1ED7FDEFF >= 0)
        v19 = &qword_1ED7FDEE8;
      else
        v19 = (uint64_t *)qword_1ED7FDEE8;
      if (v18 >= 3)
        v20 = 3;
      else
        v20 = v18;
      v16 = 0;
      if (!memcmp(v19, "all", v20) && v18 == 3)
        v16 = 2;
    }
    else
    {
      v16 = 0;
    }
  }
  llvm::ScheduleDAGInstrs::ScheduleDAGInstrs((llvm::ScheduleDAGInstrs *)v45, (const llvm::TargetSubtargetInfo **)a2, v7, 0);
  v51 = 0;
  v52 = 0;
  v45[0] = (unint64_t)&off_1E81487B0;
  v50 = &off_1E81430C0;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = &v50;
  v59 = 0;
  v58 = 0;
  v57 = 0;
  v62 = v10;
  v63 = 0u;
  memset(v64, 0, sizeof(v64));
  v65 = 0;
  v25 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 192))(*(_QWORD *)(a2 + 16));
  v26 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  v60 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *))(*(_QWORD *)v26 + 880))(v26, v25, v45);
  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a2 + 16) + 328))(*(_QWORD *)(a2 + 16), &v64[8]);
  if (v16 == 1)
  {
    CriticalAntiDepBreaker = llvm::createCriticalAntiDepBreaker((llvm *)a2, (llvm::MachineFunction *)(a1 + 256), v27);
  }
  else
  {
    CriticalAntiDepBreaker = 0;
    if (v16 == 2)
      CriticalAntiDepBreaker = llvm::createAggressiveAntiDepBreaker(a2, a1 + 256, (uint64_t)v66);
  }
  v61 = CriticalAntiDepBreaker;
  for (i = *(_QWORD *)(a2 + 328); i != a2 + 320; i = *(_QWORD *)(i + 8))
  {
    v46 = i;
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 32))(v60);
    if (v61)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v61 + 16))(v61, i);
    v30 = i + 48;
    LODWORD(v31) = -1;
    v32 = i + 48;
    do
    {
      v32 = *(_QWORD *)(v32 + 8);
      LODWORD(v31) = v31 + 1;
    }
    while (v32 != v30);
    if (v30 != *(_QWORD *)(i + 56))
    {
      v33 = v31;
      v34 = (_QWORD *)(i + 48);
      while (1)
      {
        v35 = *v34 & 0xFFFFFFFFFFFFFFF8;
        if (v35 && (*(_BYTE *)v35 & 4) != 0)
        {
          v36 = *(_WORD *)(v35 + 44);
        }
        else
        {
          while (1)
          {
            v36 = *(_WORD *)(v35 + 44);
            if ((v36 & 4) == 0)
              break;
            v35 = *(_QWORD *)v35 & 0xFFFFFFFFFFFFFFF8;
          }
        }
        v31 = (v31 - 1);
        v37 = v36 & 0xC;
        v38 = v36 & 4;
        v39 = *(_QWORD *)(*(_QWORD *)(v35 + 16) + 8);
        if (v37)
          v40 = v38 == 0;
        else
          v40 = 0;
        if (v40)
        {
          v42 = v35;
          if ((v39 & 0x80) != 0)
          {
LABEL_67:
            v47 = v34;
            v48 = v30;
            v49 = v33 - v31;
            *((_QWORD *)&v63 + 1) = v63;
            v65 = v33;
            sub_1C5203974((uint64_t)v45);
            sub_1C52041E0(v45);
            v33 = v31;
            v30 = v35;
            if (v61)
            {
              (*(void (**)(uint64_t, unint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, v35, v31, v65);
              v33 = v31;
              v30 = v35;
            }
            goto LABEL_69;
          }
          while ((*(_WORD *)(v42 + 44) & 8) != 0)
          {
            v42 = *(_QWORD *)(v42 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v42 + 16) + 8) & 0x80) != 0)
              goto LABEL_67;
          }
        }
        else if ((v39 & 0x80) != 0)
        {
          goto LABEL_67;
        }
        if ((*(unsigned int (**)(_QWORD, unint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 248) + 848))(*(_QWORD *)(a1 + 248), v35, i, a2))
        {
          goto LABEL_67;
        }
LABEL_69:
        if (**(_WORD **)(v35 + 16) == 20)
        {
          if ((*(_WORD *)(v35 + 44) & 8) != 0)
          {
            v41 = 0;
            v43 = v35;
            do
            {
              ++v41;
              v43 = *(_QWORD *)(v43 + 8);
            }
            while ((*(_WORD *)(v43 + 44) & 8) != 0);
          }
          else
          {
            v41 = 0;
          }
          LODWORD(v31) = v31 - v41;
        }
        v34 = (_QWORD *)v35;
        if (v35 == *(_QWORD *)(i + 56))
          goto LABEL_82;
      }
    }
    v33 = v31;
    v35 = i + 48;
LABEL_82:
    v47 = (_QWORD *)v35;
    v48 = v30;
    v49 = v33;
    *((_QWORD *)&v63 + 1) = v63;
    v65 = v33;
    sub_1C5203974((uint64_t)v45);
    sub_1C52041E0(v45);
    if (v61)
      (*(void (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
    v46 = 0;
    llvm::ScheduleDAGInstrs::fixupKills((llvm::ScheduleDAGInstrs *)v45, (const llvm::MachineFunction **)i);
  }
  sub_1C5204344((uint64_t)v45);
  v4 = 1;
LABEL_86:
  if (v66[0] != v67)
    free(v66[0]);
  return v4;
}

void sub_1C52037DC(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v7 = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&v7, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = v7;
  *(_QWORD *)v7 |= 8uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &v7 == (void **)a1)
    goto LABEL_9;
  if (v8 < 7)
  {
    v6 = v8;
LABEL_7:
    memcpy(v4, v3, 8 * v6);
    v3 = v7;
    goto LABEL_8;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
  v6 = v8;
  v3 = v7;
  if ((_DWORD)v8)
  {
    v4 = *(void **)a1;
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_9:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

uint64_t sub_1C5203908(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 920) = a2;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 2736) + 32))(*(_QWORD *)(a1 + 2736));
  result = *(_QWORD *)(a1 + 2744);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, a2);
  return result;
}

uint64_t sub_1C520395C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_QWORD *)(result + 928) = a3;
  *(_QWORD *)(result + 936) = a4;
  *(_DWORD *)(result + 944) = a5;
  *(_QWORD *)(result + 2768) = *(_QWORD *)(result + 2760);
  return result;
}

void sub_1C5203974(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  unsigned int v15;
  uint64_t *v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD *v41;
  llvm::SUnit **v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  int v48;
  llvm::SUnit **v49;
  char *v50;
  uint64_t v51;
  int v52;
  int i;
  llvm::SUnit **v54;
  unint64_t v55;
  llvm::SUnit **v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  llvm::SUnit *v65;
  _QWORD *v66;
  llvm::SUnit **v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  llvm::SUnit **v73;
  llvm::SUnit *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  llvm::SUnit *v80;
  llvm::SUnit *v81;
  char v82;
  uint64_t *v83;
  llvm::SUnit ***v84;
  _BYTE v85[35];

  llvm::ScheduleDAGInstrs::buildSchedGraph((llvm::ScheduleDAGInstrs *)a1, *(llvm::AAResults **)(a1 + 2752), 0, 0, 0, 0);
  v2 = *(_QWORD *)(a1 + 2744);
  if (v2
    && (*(unsigned int (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v2 + 24))(v2, a1 + 48, *(_QWORD *)(a1 + 928), *(_QWORD *)(a1 + 936), *(unsigned int *)(a1 + 2808), a1 + 2536))
  {
    sub_1C527C610(a1 + 48, *(_QWORD *)(a1 + 48));
    memset(&v85[3], 0, 32);
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_DWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 192) = 0;
    *(_DWORD *)(a1 + 264) = -1;
    *(_WORD *)(a1 + 300) = 0;
    *(_OWORD *)(a1 + 268) = 0u;
    *(_OWORD *)(a1 + 284) = 0u;
    *(_DWORD *)(a1 + 304) = 0;
    *(_BYTE *)(a1 + 308) = 0;
    *(_OWORD *)(a1 + 309) = *(_OWORD *)v85;
    *(_OWORD *)(a1 + 325) = *(_OWORD *)&v85[16];
    *(_DWORD *)(a1 + 340) = 0;
    memset(&v85[3], 0, 32);
    *(_OWORD *)(a1 + 344) = 0u;
    *(_OWORD *)(a1 + 360) = 0u;
    *(_DWORD *)(a1 + 384) = 0;
    *(_DWORD *)(a1 + 464) = 0;
    *(_DWORD *)(a1 + 536) = -1;
    *(_OWORD *)(a1 + 540) = 0u;
    *(_OWORD *)(a1 + 556) = 0u;
    *(_WORD *)(a1 + 572) = 0;
    *(_DWORD *)(a1 + 576) = 0;
    *(_BYTE *)(a1 + 580) = 0;
    *(_OWORD *)(a1 + 581) = *(_OWORD *)v85;
    *(_OWORD *)(a1 + 597) = *(_OWORD *)&v85[16];
    *(_DWORD *)(a1 + 612) = 0;
    llvm::ScheduleDAGInstrs::buildSchedGraph((llvm::ScheduleDAGInstrs *)a1, *(llvm::AAResults **)(a1 + 2752), 0, 0, 0, 0);
  }
  v3 = *(uint64_t **)(a1 + 2784);
  v4 = *(uint64_t **)(a1 + 2792);
  while (v3 != v4)
  {
    v5 = *v3++;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, a1);
  }
  sub_1C61E0648((_QWORD *)(a1 + 2632), (_QWORD *)(a1 + 48));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 2736) + 32))(*(_QWORD *)(a1 + 2736));
  sub_1C5204400((_QWORD *)a1, *(_QWORD *)(a1 + 184), *(_DWORD *)(a1 + 192));
  v7 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  if (v7 == v6)
  {
    v8 = *(_QWORD *)(a1 + 48);
  }
  else
  {
    do
    {
      if (!*(_DWORD *)(v7 + 208) && (*(_WORD *)(v7 + 228) & 0x200) == 0)
      {
        llvm::LatencyPriorityQueue::push((_QWORD *)(a1 + 2632), v7);
        *(_WORD *)(v7 + 228) |= 0x200u;
      }
      v7 += 272;
    }
    while (v7 != v6);
    v7 = *(_QWORD *)(a1 + 48);
    v8 = *(_QWORD *)(a1 + 56);
  }
  v84 = (llvm::SUnit ***)(a1 + 2760);
  sub_1C4DB1D18(a1 + 2760, 0xF0F0F0F0F0F0F0F1 * ((v8 - v7) >> 4));
  v9 = *(_QWORD *)(a1 + 2680);
  v10 = *(_QWORD *)(a1 + 2688);
  v11 = *(_QWORD *)(a1 + 2720);
  v12 = *(_QWORD *)(a1 + 2712);
  if (v9 != v10 || v12 != v11)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v83 = 0;
    while (1)
    {
      v82 = v14;
      v17 = (unint64_t)(v11 - v12) >> 3;
      if ((_DWORD)v17)
      {
        v18 = 0;
        v19 = -1;
        do
        {
          v20 = *(_QWORD *)(*(_QWORD *)(a1 + 2712) + 8 * v18);
          v21 = v20;
          if ((*(_BYTE *)(v20 + 236) & 1) == 0)
          {
            llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(*(_QWORD *)(a1 + 2712) + 8 * v18));
            v21 = *(_QWORD *)(*(_QWORD *)(a1 + 2712) + 8 * v18);
          }
          if (*(_DWORD *)(v20 + 240) <= v15)
          {
            llvm::LatencyPriorityQueue::push((_QWORD *)(a1 + 2632), v21);
            v23 = *(_QWORD *)(*(_QWORD *)(a1 + 2712) + 8 * v18);
            *(_WORD *)(v23 + 228) |= 0x200u;
            *(_QWORD *)(*(_QWORD *)(a1 + 2712) + 8 * v18) = *(_QWORD *)(*(_QWORD *)(a1 + 2720) - 8);
            *(_QWORD *)(a1 + 2720) -= 8;
            --v18;
            LODWORD(v17) = v17 - 1;
          }
          else
          {
            if ((*(_BYTE *)(v21 + 236) & 1) == 0)
              llvm::SUnit::ComputeDepth((llvm::SUnit *)v21);
            if (*(_DWORD *)(v21 + 240) < v19)
            {
              v22 = *(_QWORD *)(*(_QWORD *)(a1 + 2712) + 8 * v18);
              if ((*(_BYTE *)(v22 + 236) & 1) == 0)
                llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(*(_QWORD *)(a1 + 2712) + 8 * v18));
              v19 = *(_DWORD *)(v22 + 240);
            }
          }
          ++v18;
        }
        while (v18 != (_DWORD)v17);
        v9 = *(_QWORD *)(a1 + 2680);
        v10 = *(_QWORD *)(a1 + 2688);
      }
      if (v9 == v10)
      {
        v38 = **(_QWORD **)(a1 + 2736);
LABEL_67:
        (*(void (**)(void))(v38 + 80))();
        goto LABEL_68;
      }
      v24 = 0;
      v25 = 0;
      v26 = v16;
      while (1)
      {
        v27 = llvm::LatencyPriorityQueue::pop((uint64_t **)(a1 + 2632));
        v28 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 2736) + 24))(*(_QWORD *)(a1 + 2736), v27, 0);
        if (v28)
        {
LABEL_38:
          v24 |= v28 == 2;
          if (v26 >= v83)
          {
            v30 = v26 - v16;
            v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 61)
              goto LABEL_140;
            if (((char *)v83 - (char *)v16) >> 2 > v31)
              v31 = ((char *)v83 - (char *)v16) >> 2;
            if ((unint64_t)((char *)v83 - (char *)v16) >= 0x7FFFFFFFFFFFFFF8)
              v32 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v32 = v31;
            v80 = (llvm::SUnit *)v25;
            if (v32)
            {
              if (v32 >> 61)
                goto LABEL_141;
              v33 = (char *)operator new(8 * v32);
            }
            else
            {
              v33 = 0;
            }
            v34 = (uint64_t *)&v33[8 * v30];
            *v34 = v27;
            v29 = v34 + 1;
            while (v26 != v16)
            {
              v35 = *--v26;
              *--v34 = v35;
            }
            v83 = (uint64_t *)&v33[8 * v32];
            if (v16)
              operator delete(v16);
            v16 = v34;
            v25 = (uint64_t)v80;
          }
          else
          {
            *v26 = v27;
            v29 = v26 + 1;
          }
          goto LABEL_57;
        }
        if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 2736) + 72))(*(_QWORD *)(a1 + 2736), v27))break;
        if (v25)
          goto LABEL_38;
        v29 = v26;
        v25 = v27;
LABEL_57:
        v26 = v29;
        if (*(_QWORD *)(a1 + 2680) == *(_QWORD *)(a1 + 2688))
          goto LABEL_58;
      }
      if (!v25)
        goto LABEL_93;
      if (v27)
      {
        llvm::LatencyPriorityQueue::push((_QWORD *)(a1 + 2632), v25);
LABEL_93:
        v29 = v26;
        v25 = v27;
      }
      else
      {
        v29 = v26;
      }
LABEL_58:
      if (v16 != v29)
      {
        v36 = v16;
        do
        {
          v37 = *v36++;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 2632) + 88))(a1 + 2632, v37);
        }
        while (v36 != v29);
      }
      v38 = **(_QWORD **)(a1 + 2736);
      if (v25)
      {
        v81 = (llvm::SUnit *)v25;
        v48 = (*(uint64_t (**)(void))(v38 + 56))();
        if (v48)
        {
          v52 = v48;
          for (i = 0; i != v52; ++i)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 2736) + 96))(*(_QWORD *)(a1 + 2736));
            v54 = *(llvm::SUnit ***)(a1 + 2768);
            v55 = *(_QWORD *)(a1 + 2776);
            if ((unint64_t)v54 >= v55)
            {
              v56 = *v84;
              v57 = v54 - *v84;
              v58 = v57 + 1;
              if ((unint64_t)(v57 + 1) >> 61)
                goto LABEL_140;
              v59 = v55 - (_QWORD)v56;
              if (v59 >> 2 > v58)
                v58 = v59 >> 2;
              if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
                v60 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v60 = v58;
              if (v60)
              {
                if (v60 >> 61)
                  goto LABEL_141;
                v61 = (char *)operator new(8 * v60);
              }
              else
              {
                v61 = 0;
              }
              v62 = &v61[8 * v57];
              *(_QWORD *)v62 = 0;
              v49 = (llvm::SUnit **)(v62 + 8);
              if (v54 != v56)
              {
                do
                {
                  v63 = (uint64_t)*--v54;
                  *((_QWORD *)v62 - 1) = v63;
                  v62 -= 8;
                }
                while (v54 != v56);
                v54 = *v84;
              }
              *(_QWORD *)(a1 + 2760) = v62;
              *(_QWORD *)(a1 + 2768) = v49;
              *(_QWORD *)(a1 + 2776) = &v61[8 * v60];
              if (v54)
                operator delete(v54);
            }
            else
            {
              *v54 = 0;
              v49 = v54 + 1;
            }
            *(_QWORD *)(a1 + 2768) = v49;
          }
        }
        else
        {
          v49 = *(llvm::SUnit ***)(a1 + 2768);
        }
        v64 = *(_QWORD *)(a1 + 2776);
        if ((unint64_t)v49 >= v64)
        {
          v67 = *v84;
          v68 = v49 - *v84;
          v69 = v68 + 1;
          v65 = v81;
          if ((unint64_t)(v68 + 1) >> 61)
LABEL_140:
            abort();
          v70 = v64 - (_QWORD)v67;
          if (v70 >> 2 > v69)
            v69 = v70 >> 2;
          if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
            v71 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v71 = v69;
          if (v71)
          {
            if (v71 >> 61)
LABEL_141:
              sub_1C4764EE4();
            v72 = (char *)operator new(8 * v71);
          }
          else
          {
            v72 = 0;
          }
          v73 = (llvm::SUnit **)&v72[8 * v68];
          *v73 = v81;
          v66 = v73 + 1;
          if (v49 != v67)
          {
            do
            {
              v74 = *--v49;
              *--v73 = v74;
            }
            while (v49 != v67);
            v49 = *v84;
          }
          *(_QWORD *)(a1 + 2760) = v73;
          *(_QWORD *)(a1 + 2768) = v66;
          *(_QWORD *)(a1 + 2776) = &v72[8 * v71];
          if (v49)
            operator delete(v49);
        }
        else
        {
          v65 = v81;
          *v49 = v81;
          v66 = v49 + 1;
        }
        *(_QWORD *)(a1 + 2768) = v66;
        llvm::SUnit::setDepthToAtLeast(v65, v15);
        sub_1C5204400((_QWORD *)a1, *((_QWORD *)v65 + 14), *((_DWORD *)v65 + 30));
        *((_WORD *)v65 + 114) |= 0x400u;
        v75 = *((unsigned int *)v65 + 30);
        if ((_DWORD)v75)
        {
          v76 = (uint64_t *)*((_QWORD *)v65 + 14);
          v77 = 16 * v75;
          do
          {
            v78 = *v76;
            v76 += 2;
            llvm::LatencyPriorityQueue::AdjustPriorityOfUnscheduledPreds(a1 + 2632, v78 & 0xFFFFFFFFFFFFFFF8);
            v77 -= 16;
          }
          while (v77);
        }
        (*(void (**)(_QWORD, llvm::SUnit *))(**(_QWORD **)(a1 + 2736) + 40))(*(_QWORD *)(a1 + 2736), v65);
        v79 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 2736) + 16))(*(_QWORD *)(a1 + 2736));
        if ((v79 & 1) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 2736) + 80))(*(_QWORD *)(a1 + 2736));
          ++v15;
        }
        v14 = v79 ^ 1;
        goto LABEL_69;
      }
      if ((v82 & 1) != 0 || (v24 & 1) == 0)
        goto LABEL_67;
      (*(void (**)(void))(v38 + 96))();
      v39 = *(_QWORD **)(a1 + 2768);
      v40 = *(_QWORD *)(a1 + 2776);
      if ((unint64_t)v39 < v40)
      {
        *v39 = 0;
        v41 = v39 + 1;
        goto LABEL_89;
      }
      v42 = *v84;
      v43 = (llvm::SUnit **)v39 - *v84;
      v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 61)
        goto LABEL_140;
      v45 = v40 - (_QWORD)v42;
      if (v45 >> 2 > v44)
        v44 = v45 >> 2;
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
        v46 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v46 = v44;
      if (!v46)
      {
        v47 = 0;
        goto LABEL_84;
      }
      if (v46 >> 61)
        goto LABEL_141;
      v47 = (char *)operator new(8 * v46);
LABEL_84:
      v50 = &v47[8 * v43];
      *(_QWORD *)v50 = 0;
      v41 = v50 + 8;
      if (v39 != v42)
      {
        do
        {
          v51 = *--v39;
          *((_QWORD *)v50 - 1) = v51;
          v50 -= 8;
        }
        while (v39 != v42);
        v39 = *v84;
      }
      *(_QWORD *)(a1 + 2760) = v50;
      *(_QWORD *)(a1 + 2768) = v41;
      *(_QWORD *)(a1 + 2776) = &v47[8 * v46];
      if (v39)
        operator delete(v39);
LABEL_89:
      *(_QWORD *)(a1 + 2768) = v41;
LABEL_68:
      v14 = 0;
      ++v15;
LABEL_69:
      v9 = *(_QWORD *)(a1 + 2680);
      v10 = *(_QWORD *)(a1 + 2688);
      v11 = *(_QWORD *)(a1 + 2720);
      v12 = *(_QWORD *)(a1 + 2712);
      if (v9 == v10 && v12 == v11)
      {
        if (v16)
          operator delete(v16);
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 2648) = 0;
}

unint64_t *sub_1C52041E0(unint64_t *result)
{
  unint64_t *v1;
  unint64_t *v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  uint64_t v12;

  v1 = result;
  v2 = (unint64_t *)result[117];
  result[116] = (unint64_t)v2;
  v3 = (unint64_t *)result[320];
  if (v3)
    result = sub_1C48532D0((unint64_t *)result[115], v2, (unint64_t *)result[115], v3);
  v4 = v1[346] - v1[345];
  if ((v4 & 0x7FFFFFFF8) != 0)
  {
    v5 = 0;
    v6 = (v4 >> 3);
    do
    {
      v7 = *(_QWORD *)(v1[345] + 8 * v5);
      if (v7)
      {
        result = sub_1C48532D0((unint64_t *)v1[115], (unint64_t *)v1[117], (unint64_t *)v1[115], *(unint64_t **)(v7 + 8));
        if (!v5)
          goto LABEL_9;
      }
      else
      {
        result = (unint64_t *)(*(uint64_t (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v1[2] + 736))(v1[2], v1[115], v1[117]);
        if (!v5)
        {
LABEL_9:
          v8 = *(_QWORD *)v1[117] & 0xFFFFFFFFFFFFFFF8;
          if (!v8 || (*(_BYTE *)v8 & 4) == 0)
          {
            while ((*(_WORD *)(v8 + 44) & 4) != 0)
              v8 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
          }
          v1[116] = v8;
        }
      }
      ++v5;
    }
    while (v5 != v6);
  }
  v9 = v1[318];
  v10 = v1[317];
  if (v9 != v10)
  {
    do
    {
      v11 = *(unint64_t **)(v9 - 16);
      v12 = *(_QWORD *)(v9 - 8);
      v9 -= 16;
      if (!v12 || (*(_BYTE *)v12 & 4) == 0)
      {
        while ((*(_WORD *)(v12 + 44) & 8) != 0)
          v12 = *(_QWORD *)(v12 + 8);
      }
      result = sub_1C48532D0((unint64_t *)v1[115], *(unint64_t **)(v12 + 8), (unint64_t *)v1[115], v11);
    }
    while (v9 != v10);
    v9 = v1[317];
  }
  v1[318] = v9;
  v1[320] = 0;
  return result;
}

uint64_t sub_1C5204310(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 2744);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  *(_QWORD *)(a1 + 920) = 0;
  return result;
}

void sub_1C5204344(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void **v6;

  *(_QWORD *)a1 = &off_1E81487B0;
  v2 = *(_QWORD *)(a1 + 2736);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 2744);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v6 = (void **)(a1 + 2784);
  sub_1C50AF7B4(&v6);
  v4 = *(void **)(a1 + 2760);
  if (v4)
  {
    *(_QWORD *)(a1 + 2768) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 2712);
  if (v5)
  {
    *(_QWORD *)(a1 + 2720) = v5;
    operator delete(v5);
  }
  sub_1C61E0760((_QWORD *)(a1 + 2632));
  sub_1C50AF658(a1);
}

void sub_1C52043DC(uint64_t a1)
{
  sub_1C5204344(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5204400(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  BOOL v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t *v19;
  unint64_t v20;

  if (a3)
  {
    v3 = a2;
    v5 = a1 + 43;
    v6 = a2 + 16 * a3;
    do
    {
      v7 = *(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF8;
      if ((~*(_DWORD *)v3 & 6) != 0 || *(_DWORD *)(v3 + 8) < 4u)
      {
        v8 = *(_DWORD *)(v7 + 208) - 1;
        *(_DWORD *)(v7 + 208) = v8;
        if (v8)
          v9 = 1;
        else
          v9 = v5 == (_QWORD *)v7;
        if (!v9)
        {
          v10 = (unint64_t *)a1[340];
          v11 = a1[341];
          if ((unint64_t)v10 >= v11)
          {
            v13 = (_QWORD *)a1[339];
            v14 = v10 - v13;
            v15 = v14 + 1;
            if ((unint64_t)(v14 + 1) >> 61)
              abort();
            v16 = v11 - (_QWORD)v13;
            if (v16 >> 2 > v15)
              v15 = v16 >> 2;
            if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
              v17 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v17 = v15;
            if (v17)
            {
              if (v17 >> 61)
                sub_1C4764EE4();
              v18 = (char *)operator new(8 * v17);
            }
            else
            {
              v18 = 0;
            }
            v19 = (unint64_t *)&v18[8 * v14];
            *v19 = v7;
            v12 = v19 + 1;
            if (v10 != v13)
            {
              do
              {
                v20 = *--v10;
                *--v19 = v20;
              }
              while (v10 != v13);
              v10 = (unint64_t *)a1[339];
            }
            a1[339] = v19;
            a1[340] = v12;
            a1[341] = &v18[8 * v17];
            if (v10)
              operator delete(v10);
          }
          else
          {
            *v10 = v7;
            v12 = v10 + 1;
          }
          a1[340] = v12;
        }
      }
      else
      {
        --*(_DWORD *)(v7 + 216);
      }
      v3 += 16;
    }
    while (v3 != v6);
  }
}

uint64_t sub_1C5204560()
{
  int v1;
  int v2;
  int *v3;
  __n128 v4;

  v4.n128_u64[0] = (unint64_t)"Enable scheduling after register allocation";
  v4.n128_u64[1] = 43;
  LOBYTE(v1) = 0;
  v3 = &v1;
  v2 = 1;
  sub_1C6147A00((llvm::cl::Option *)&unk_1ED7FDC28, "post-RA-scheduler", &v4, (_BYTE **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FDC28, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Break post-RA scheduling anti-dependencies: \"critical\", \"all\", or \"none\"";
  v4.n128_u64[1] = 72;
  v3 = (int *)"none";
  v2 = 1;
  sub_1C47AD050((uint64_t)&qword_1ED7FDE68, 0, 0);
  qword_1ED7FDEF0 = 0;
  qword_1ED7FDEE8 = 0;
  unk_1ED7FDEF8 = 0;
  qword_1ED7FDF08 = 0;
  qword_1ED7FDF18 = 0;
  qword_1ED7FDF10 = 0;
  qword_1ED7FDF00 = (uint64_t)&unk_1E819E950;
  byte_1ED7FDF20 = 0;
  qword_1ED7FDE68 = (uint64_t)&unk_1E819E480;
  qword_1ED7FDF28 = (uint64_t)&unk_1E819E970;
  qword_1ED7FDF30 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED7FDF48 = (uint64_t)&qword_1ED7FDF30;
  sub_1C62091D0((__int128 *)&v4, (const char **)&v3, &v2);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7FDE68);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED7FDE68, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Debug control MBBs that are scheduled";
  v4.n128_u64[1] = 37;
  v1 = 1;
  v2 = 0;
  v3 = &v2;
  sub_1C619A5AC((llvm::cl::Option *)&unk_1ED7FDCE8, "postra-sched-debugdiv", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1ED7FDCE8, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Debug control MBBs that are scheduled";
  v4.n128_u64[1] = 37;
  v1 = 1;
  v2 = 0;
  v3 = &v2;
  sub_1C619A5AC((llvm::cl::Option *)&unk_1ED7FDDA8, "postra-sched-debugmod", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1ED7FDDA8, &dword_1C475E000);
}

uint64_t sub_1C520474C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Pre-ISel Intrinsic Lowering";
  *(_QWORD *)(v2 + 8) = 27;
  *(_QWORD *)(v2 + 16) = "pre-isel-intrinsic-lowering";
  *(_QWORD *)(v2 + 24) = 27;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F2F30;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5204FFC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::PreISelIntrinsicLoweringPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_1C5204878(a1);
  v4 = a2 + 80;
  if ((result & 1) != 0)
  {
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_QWORD *)(a2 + 88) = 0;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_QWORD *)a2 = a2 + 32;
    *(_QWORD *)(a2 + 8) = a2 + 32;
    *(_QWORD *)(a2 + 16) = 2;
    *(_QWORD *)(a2 + 48) = v4;
    *(_QWORD *)(a2 + 56) = v4;
    *(_DWORD *)(a2 + 64) = 2;
  }
  else
  {
    *(_QWORD *)a2 = a2 + 32;
    *(_QWORD *)(a2 + 8) = a2 + 32;
    *(_QWORD *)(a2 + 16) = 2;
    *(_DWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 48) = v4;
    *(_QWORD *)(a2 + 56) = v4;
    *(_QWORD *)(a2 + 64) = 2;
    *(_DWORD *)(a2 + 72) = 0;
    return (uint64_t)sub_1C4774094((llvm::SmallPtrSetImplBase *)a2, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  return result;
}

uint64_t sub_1C5204878(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t ***v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD ***v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t ****v24;
  uint64_t ***v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t ****v30;
  uint64_t ***v31;
  int v32;
  int v33;
  uint64_t ***v34;
  uint64_t **v35;
  uint64_t **v36;
  uint64_t v37;
  BOOL v38;
  BOOL v39;
  char *v40;
  uint64_t **v41;
  int v42;
  llvm::GetElementPtrInst *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  char *v50;
  char *v51;
  llvm::Value *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  unsigned __int8 **v58;
  int v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  uint64_t *v63;
  uint64_t ***v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  int v68;
  BOOL v69;
  unsigned int v70;
  _QWORD *v71;
  void *v72;
  uint64_t v73;
  int v74;
  uint64_t ****v75;
  int v76;
  BOOL v77;
  unsigned int v78;
  uint64_t ****v79;
  uint64_t ***v80;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE v86[32];
  __int16 v87;
  _BYTE v88[32];
  __int16 v89;
  unsigned __int8 *v90;
  void *v91;
  unsigned int v92;
  _QWORD v93[8];
  uint64_t v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v1 = a1 + 24;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 != a1 + 24)
  {
    v3 = 0;
    v82 = a1 + 24;
    while (1)
    {
      if (v2)
        v4 = (uint64_t ***)(v2 - 56);
      else
        v4 = 0;
      v5 = v4 >> 4;
      if ((*((_BYTE *)v4 + 34) & 0x40) == 0)
        goto LABEL_22;
      v6 = ***v4;
      v91 = v4;
      v7 = *(_DWORD *)(v6 + 2520);
      if (!v7)
        break;
      v8 = *(_QWORD *)(v6 + 2504);
      v9 = v7 - 1;
      v10 = v9 & (v5 ^ (v4 >> 9));
      v11 = (_QWORD *)(v8 + 24 * v10);
      v12 = (_QWORD ***)*v11;
      if ((uint64_t ***)*v11 != v4)
      {
        v67 = 0;
        v68 = 1;
        while (v12 != (_QWORD ***)-4096)
        {
          if (v67)
            v69 = 0;
          else
            v69 = v12 == (_QWORD ***)-8192;
          if (v69)
            v67 = v11;
          v70 = v10 + v68++;
          v10 = v70 & v9;
          v11 = (_QWORD *)(v8 + 24 * v10);
          v12 = (_QWORD ***)*v11;
          if ((uint64_t ***)*v11 == v4)
            goto LABEL_9;
        }
        if (v67)
          v71 = v67;
        else
          v71 = v11;
        goto LABEL_85;
      }
LABEL_9:
      if (v11[2] == 22)
      {
        v13 = (uint64_t *)v11[1];
        v14 = *v13;
        v15 = v13[1];
        v16 = *(uint64_t *)((char *)v13 + 14);
        v17 = v14 == 0x657478652E726961 && v15 == 0x645F796C6C616E72;
        v18 = v17 && v16 == 0x64656E696665645FLL;
        if (v18 && (*((_BYTE *)v4 + 34) & 0x40) != 0)
        {
          v19 = ***v4;
          v91 = v4;
          v20 = *(_DWORD *)(v19 + 2520);
          if (v20)
          {
            v21 = *(_QWORD *)(v19 + 2504);
            v22 = v20 - 1;
            v23 = v22 & (v5 ^ (v4 >> 9));
            v24 = (uint64_t ****)(v21 + 24 * v23);
            v25 = *v24;
            if (*v24 == v4)
            {
LABEL_21:
              v24[1] = (uint64_t ***)"";
              v24[2] = 0;
              *((_DWORD *)v4 + 8) &= ~0x400000u;
              goto LABEL_22;
            }
            v75 = 0;
            v76 = 1;
            while (v25 != (uint64_t ***)-4096)
            {
              if (v75)
                v77 = 0;
              else
                v77 = v25 == (uint64_t ***)-8192;
              if (v77)
                v75 = v24;
              v78 = v23 + v76++;
              v23 = v78 & v22;
              v24 = (uint64_t ****)(v21 + 24 * v23);
              v25 = *v24;
              if (*v24 == v4)
                goto LABEL_21;
            }
            if (v75)
              v79 = v75;
            else
              v79 = v24;
          }
          else
          {
            v79 = 0;
          }
          v24 = (uint64_t ****)sub_1C53D65B8(v19 + 2504, (uint64_t)&v91, (uint64_t *)&v91, v79);
          v80 = (uint64_t ***)v91;
          v24[1] = 0;
          v24[2] = 0;
          *v24 = v80;
          goto LABEL_21;
        }
      }
LABEL_22:
      if ((*((_BYTE *)v4 + 23) & 0x10) == 0)
        goto LABEL_38;
      v26 = ***v4;
      v27 = *(_QWORD *)(v26 + 152);
      v28 = *(unsigned int *)(v26 + 168);
      if (!(_DWORD)v28)
        goto LABEL_29;
      LODWORD(v29) = (v28 - 1) & (v5 ^ (v4 >> 9));
      v30 = (uint64_t ****)(v27 + 16 * v29);
      v31 = *v30;
      if (*v30 != v4)
      {
        v32 = 1;
        while (v31 != (uint64_t ***)-4096)
        {
          v33 = v29 + v32++;
          v29 = v33 & (v28 - 1);
          v31 = *(uint64_t ****)(v27 + 16 * v29);
          if (v31 == v4)
          {
            v30 = (uint64_t ****)(v27 + 16 * v29);
            goto LABEL_30;
          }
        }
LABEL_29:
        v30 = (uint64_t ****)(v27 + 16 * v28);
      }
LABEL_30:
      v34 = v30[1];
      if ((unint64_t)*v34 < 0x13
        || ((v35 = v34[2], v36 = v34[3], v37 = *(uint64_t *)((char *)v34 + 27), v35 == (uint64_t **)0x616F6C2E6D766C6CLL)
          ? (v38 = v36 == (uint64_t **)0x6974616C65722E64)
          : (v38 = 0),
            v38 ? (v39 = v37 == 0x2E65766974616C65) : (v39 = 0),
            !v39))
      {
LABEL_38:
        switch(*((_DWORD *)v4 + 9))
        {
          case 0xD0:
            v40 = "objc_autorelease";
            goto LABEL_112;
          case 0xD1:
            v40 = "objc_autoreleasePoolPop";
            goto LABEL_112;
          case 0xD2:
            v40 = "objc_autoreleasePoolPush";
            goto LABEL_112;
          case 0xD3:
            v40 = "objc_autoreleaseReturnValue";
            goto LABEL_112;
          case 0xD4:
            v40 = "objc_claimAutoreleasedReturnValue";
            goto LABEL_112;
          case 0xD7:
            v40 = "objc_copyWeak";
            goto LABEL_112;
          case 0xD8:
            v40 = "objc_destroyWeak";
            goto LABEL_112;
          case 0xD9:
            v40 = "objc_initWeak";
            goto LABEL_112;
          case 0xDA:
            v40 = "objc_loadWeak";
            goto LABEL_112;
          case 0xDB:
            v40 = "objc_loadWeakRetained";
            goto LABEL_112;
          case 0xDC:
            v40 = "objc_moveWeak";
            goto LABEL_112;
          case 0xDD:
            v40 = "objc_release";
            goto LABEL_101;
          case 0xDE:
            v40 = "objc_retain";
LABEL_101:
            v73 = (uint64_t)v4;
            v74 = 1;
            goto LABEL_113;
          case 0xDF:
            v40 = "objc_retain_autorelease";
            goto LABEL_112;
          case 0xE0:
            v40 = "objc_retainAutorelease";
            goto LABEL_112;
          case 0xE1:
            v40 = "objc_retainAutoreleaseReturnValue";
            goto LABEL_112;
          case 0xE2:
            v40 = "objc_retainAutoreleasedReturnValue";
            goto LABEL_112;
          case 0xE3:
            v40 = "objc_retainBlock";
            goto LABEL_112;
          case 0xE4:
            v40 = "objc_retainedObject";
            goto LABEL_112;
          case 0xE5:
            v40 = "objc_storeStrong";
            goto LABEL_112;
          case 0xE6:
            v40 = "objc_storeWeak";
            goto LABEL_112;
          case 0xE7:
            v40 = "objc_sync_enter";
            goto LABEL_112;
          case 0xE8:
            v40 = "objc_sync_exit";
            goto LABEL_112;
          case 0xE9:
            v40 = "objc_unretainedObject";
            goto LABEL_112;
          case 0xEA:
            v40 = "objc_unretainedPointer";
            goto LABEL_112;
          case 0xEB:
            v40 = "objc_unsafeClaimAutoreleasedReturnValue";
LABEL_112:
            v73 = (uint64_t)v4;
            v74 = 0;
LABEL_113:
            v3 |= sub_1C5205074(v73, v40, v74);
            break;
          default:
            goto LABEL_114;
        }
        goto LABEL_114;
      }
      v83 = v3;
      if (v4[1])
      {
        v85 = v26 + 1960;
        v84 = llvm::PointerType::get((llvm::PointerType *)(v26 + 1960), 0);
        v41 = v4[1];
        if (v41)
        {
          v42 = 0;
          v43 = (llvm::GetElementPtrInst *)(***v4 + 1912);
          while (1)
          {
            while (1)
            {
              v44 = (uint64_t)v41[3];
              v41 = (uint64_t **)v41[1];
              if (v44)
              {
                if (*(_BYTE *)(v44 + 16) == 84 && *(uint64_t ****)(v44 - 32) == v4)
                  break;
              }
              if (!v41)
                goto LABEL_81;
            }
            sub_1C4773D54((uint64_t)&v91, v44, 0, 0, 0);
            v45 = v44 - 32 * (*(_DWORD *)(v44 + 20) & 0x7FFFFFF);
            v46 = *(uint64_t **)v45;
            v47 = *(_QWORD *)(v45 + 32);
            v89 = 257;
            v48 = (unsigned __int8 *)sub_1C4867B70((uint64_t *)&v91, v43, v46, v47, (uint64_t)v88);
            v89 = 257;
            v49 = sub_1C4773E38((uint64_t *)&v91, 49, v48, v84, (uint64_t)v88);
            v87 = 257;
            v50 = (char *)operator new(0x60uLL);
            v51 = v50;
            v52 = (llvm::Value *)(v50 + 32);
            *((_QWORD *)v50 + 2) = 0;
            *((_QWORD *)v50 + 3) = v50 + 32;
            v89 = 257;
            *((_QWORD *)v50 + 4) = v85;
            *((_QWORD *)v50 + 5) = 0;
            *((_WORD *)v50 + 24) = 60;
            *((_DWORD *)v50 + 13) = 1;
            *(_OWORD *)(v50 + 56) = 0u;
            *(_OWORD *)(v50 + 72) = 0u;
            *((_DWORD *)v50 + 22) = 0;
            *(_QWORD *)v50 = v49;
            *((_QWORD *)v50 + 1) = 0;
            if (v49)
            {
              v55 = *((_QWORD *)v49 + 1);
              v54 = v49 + 8;
              v53 = v55;
              *((_QWORD *)v50 + 1) = v55;
              if (v55)
                *(_QWORD *)(v53 + 16) = v50 + 8;
              *((_QWORD *)v50 + 2) = v54;
              *v54 = v50;
            }
            *((_WORD *)v50 + 25) = 4;
            v50[92] = 1;
            llvm::Value::setName((uint64_t ***)v50 + 4, (uint64_t)v88);
            (*(void (**)(uint64_t, llvm::Value *, _BYTE *, _QWORD, _QWORD))(*(_QWORD *)v94 + 16))(v94, v52, v86, v93[4], v93[5]);
            if (v92)
              break;
LABEL_67:
            v63 = *(uint64_t **)(v44 - 32 * (*(_DWORD *)(v44 + 20) & 0x7FFFFFF));
            v89 = 257;
            v64 = sub_1C4867B70((uint64_t *)&v91, v43, v63, (uint64_t)v52, (uint64_t)v88);
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v44, (llvm::Value *)v64, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v44 + 40) + 40, (uint64_t ***)v44);
            v65 = *(_QWORD *)(v44 + 24);
            v66 = *(_QWORD **)(v44 + 32);
            *v66 = v65;
            *(_QWORD *)(v65 + 8) = v66;
            *(_QWORD *)(v44 + 24) = 0;
            *(_QWORD *)(v44 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v44);
            if (v91 != v93)
              free(v91);
            v42 = 1;
            if (!v41)
              goto LABEL_81;
          }
          v56 = (char *)v91;
          v57 = (char *)v91 + 16 * v92;
          v58 = (unsigned __int8 **)(v51 + 80);
          while (2)
          {
            v59 = *(_DWORD *)v56;
            v60 = (unsigned __int8 *)*((_QWORD *)v56 + 1);
            if (v60)
            {
              if (v59)
                goto LABEL_61;
              v90 = (unsigned __int8 *)*((_QWORD *)v56 + 1);
              llvm::MetadataTracking::track((uint64_t)&v90, v60, 2);
              v61 = *v58;
              if (*v58)
LABEL_59:
                llvm::MetadataTracking::untrack((uint64_t)(v51 + 80), v61);
LABEL_65:
              v62 = v90;
              *v58 = v90;
              if (v62)
                llvm::MetadataTracking::retrack((uint64_t)&v90, v62, (uint64_t)(v51 + 80));
            }
            else
            {
              v61 = *v58;
              if (*v58 || (v51[55] & 0x20) != 0)
              {
                if (!v59)
                {
                  v90 = 0;
                  if (v61)
                    goto LABEL_59;
                  goto LABEL_65;
                }
LABEL_61:
                llvm::Value::setMetadata(v52, *(_DWORD *)v56, (llvm::MDNode *)v60);
              }
            }
            v56 += 16;
            if (v56 == v57)
              goto LABEL_67;
            continue;
          }
        }
      }
      v42 = 0;
LABEL_81:
      v3 = v83 | v42;
      v1 = v82;
LABEL_114:
      v2 = *(_QWORD *)(v2 + 8);
      if (v2 == v1)
        return v3 & 1;
    }
    v71 = 0;
LABEL_85:
    v11 = sub_1C53D65B8(v6 + 2504, (uint64_t)&v91, (uint64_t *)&v91, v71);
    v72 = v91;
    v11[1] = 0;
    v11[2] = 0;
    *v11 = v72;
    goto LABEL_9;
  }
  LOBYTE(v3) = 0;
  return v3 & 1;
}

uint64_t sub_1C5204FFC()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8F2F30;
  *(_DWORD *)(result + 24) = 4;
  *(_QWORD *)result = &off_1E8148848;
  return result;
}

void sub_1C5205048(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C520506C(uint64_t a1, uint64_t a2)
{
  return sub_1C5204878(a2);
}

BOOL sub_1C5205074(uint64_t a1, char *__s, int a3)
{
  uint64_t v3;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  int v21;
  int FunctionClass;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t ***v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t ***v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t ***v47;
  uint64_t ***v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t ****v53;
  uint64_t ***v54;
  int v55;
  int v56;
  uint64_t ***v57;
  uint64_t **v58;
  char *v59;
  uint64_t **v60;
  unsigned int v61;
  uint64_t **v62;
  uint64_t **v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t **inserted;
  _QWORD v69[4];
  __int16 v70;
  void *v71;
  uint64_t v72;
  _BYTE v73[64];
  void *v74[2];
  _QWORD v75[17];

  v75[15] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v8 = *(_QWORD *)(a1 + 40);
    if (__s)
      v9 = strlen(__s);
    else
      v9 = 0;
    inserted = (uint64_t **)llvm::Module::getOrInsertFunction(v8, (unsigned __int8 *)__s, v9, *(llvm::PointerType **)(a1 + 24), 0);
    v11 = v10;
    if (*(_BYTE *)(v10 + 16))
      v12 = 1;
    else
      v12 = v10 == 0;
    if (v12)
    {
LABEL_22:
      FunctionClass = llvm::objcarc::GetFunctionClass((llvm::objcarc *)a1, (const llvm::Function *)v10);
      v24 = *(_QWORD *)(a1 + 8);
      if (!v24)
        return v3 != 0;
      v67 = dword_1C85FB730[FunctionClass];
      v25 = (uint64_t *)(v11 + 8);
      while (1)
      {
        v26 = v24;
        v27 = (uint64_t *)(v24 + 8);
        v24 = *(_QWORD *)(v24 + 8);
        v28 = (uint64_t ***)v27[2];
        v29 = (uint64_t)*(v28 - 4);
        if (v29)
        {
          if (!*(_BYTE *)(v29 + 16) && v29 == a1 && *(_QWORD *)(v29 + 24) == (_QWORD)v28[9])
            break;
        }
        if (*(_QWORD *)v26)
        {
          **(_QWORD **)(v26 + 16) = v24;
          v31 = *(_QWORD *)(v26 + 8);
          if (v31)
            *(_QWORD *)(v31 + 16) = *(_QWORD *)(v26 + 16);
        }
        *(_QWORD *)v26 = v11;
        if (v11)
        {
          v32 = *v25;
          *v27 = *v25;
          if (v32)
            *(_QWORD *)(v32 + 16) = v27;
          *(_QWORD *)(v26 + 16) = v25;
          *v25 = v26;
        }
LABEL_37:
        if (!v24)
          return v3 != 0;
      }
      sub_1C4D8ADA0((uint64_t)v74, v28[5], (uint64_t)(v28 + 3), 0, 0, 0);
      v33 = 0;
      v34 = *((unsigned __int8 *)v28 + 16);
      if (v34 != 84)
      {
        if (v34 == 39)
          v33 = (*((_DWORD *)v28 + 20) + 1);
        else
          v33 = 2;
      }
      v35 = *((_DWORD *)v28 + 5);
      v36 = v35 & 0x7FFFFFF;
      v37 = &v28[-4 * v36];
      if (v35 < 0 && (v64 = (uint64_t)*(v37 - 1), (v64 & 0xFFFFFFFF0) != 0))
        v38 = (*((_DWORD *)v37 - 3) - *(_DWORD *)((char *)v37 - v64));
      else
        v38 = 0;
      v39 = (uint64_t)&(&v28[-4 * v33])[-4 * v38 - 4];
      v71 = v73;
      v72 = 0x800000000;
      v40 = v39 - (_QWORD)v37;
      if ((unint64_t)(v39 - (_QWORD)v37) >= 0x101)
      {
        v65 = v36;
        v66 = v33;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v71, (uint64_t)v73, v40 >> 5, 8);
        v36 = v65;
        v33 = v66;
        v41 = v72;
        v43 = (uint64_t *)v71;
        v42 = v72;
      }
      else
      {
        v41 = 0;
        v42 = 0;
        v43 = (uint64_t *)v73;
      }
      if (v37 != (uint64_t ***)v39)
      {
        v44 = &v43[v41];
        v45 = 32 * v36 - 32 * v33 - 32 * v38 - 32;
        do
        {
          v46 = (uint64_t)*v37;
          v37 += 4;
          *v44++ = v46;
          v45 -= 32;
        }
        while (v45);
        v43 = (uint64_t *)v71;
      }
      LODWORD(v72) = v42 + ((unint64_t)v40 >> 5);
      v70 = 257;
      v47 = (uint64_t ***)sub_1C4774778((uint64_t *)v74, inserted, v11, v43, v72, (uint64_t)v69, 0);
      v48 = v47;
      if ((*((_BYTE *)v28 + 23) & 0x10) == 0)
      {
        v58 = 0;
        v59 = &byte_1C871356D;
        goto LABEL_57;
      }
      v49 = ***v28;
      v50 = *(_QWORD *)(v49 + 152);
      v51 = *(unsigned int *)(v49 + 168);
      if ((_DWORD)v51)
      {
        LODWORD(v52) = (v51 - 1) & ((v28 >> 4) ^ (v28 >> 9));
        v53 = (uint64_t ****)(v50 + 16 * v52);
        v54 = *v53;
        if (*v53 == v28)
        {
LABEL_56:
          v57 = v53[1];
          v60 = *v57;
          v59 = (char *)(v57 + 2);
          v58 = v60;
LABEL_57:
          v70 = 261;
          v69[0] = v59;
          v69[1] = v58;
          llvm::Value::setName(v47, (uint64_t)v69);
          v61 = *((_WORD *)v28 + 9) & 3;
          if (v67 > v61)
            LOWORD(v61) = v67;
          *((_WORD *)v48 + 9) = *((_WORD *)v48 + 9) & 0xFFFC | v61;
          if (v28[1])
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v28, (llvm::Value *)v48, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v28[5] + 5), v28);
          v62 = v28[3];
          v63 = v28[4];
          *v63 = (uint64_t *)v62;
          v62[1] = (uint64_t *)v63;
          v28[3] = 0;
          v28[4] = 0;
          llvm::Value::deleteValue((llvm::Value *)v28);
          if (v71 != v73)
            free(v71);
          if (v74[0] != v75)
            free(v74[0]);
          goto LABEL_37;
        }
        v55 = 1;
        while (v54 != (uint64_t ***)-4096)
        {
          v56 = v52 + v55++;
          v52 = v56 & (v51 - 1);
          v54 = *(uint64_t ****)(v50 + 16 * v52);
          if (v54 == v28)
          {
            v53 = (uint64_t ****)(v50 + 16 * v52);
            goto LABEL_56;
          }
        }
      }
      v53 = (uint64_t ****)(v50 + 16 * v51);
      goto LABEL_56;
    }
    v13 = *(_DWORD *)(a1 + 32);
    v14 = (v13 & 0xF) - 7;
    v15 = *(_DWORD *)(v10 + 32);
    v16 = v14 >= 2;
    if (v14 >= 2)
      v17 = *(_DWORD *)(v10 + 32);
    else
      v17 = v15 & 0xFFFFFFC0;
    v18 = v17 & 0xFFFFFFF0 | v13 & 0xF;
    *(_DWORD *)(v10 + 32) = v18;
    if (v16)
    {
      if ((v15 & 0x30) == 0 || (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v10) & 1) != 0)
        goto LABEL_16;
      v18 = *(_DWORD *)(v11 + 32);
    }
    *(_DWORD *)(v11 + 32) = v18 | 0x4000;
LABEL_16:
    if (a3)
    {
      v19 = *(_DWORD *)(v11 + 32) & 0xF;
      v20 = v19 > 0xA;
      v21 = (1 << v19) & 0x63C;
      if (v20 || v21 == 0)
        *(_QWORD *)(v11 + 112) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v11 + 112), **(uint64_t ***)v11, -1, 38);
    }
    goto LABEL_22;
  }
  return v3 != 0;
}

uint64_t sub_1C5205514(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Process Implicit Definitions";
  *(_QWORD *)(v2 + 8) = 28;
  *(_QWORD *)(v2 + 16) = "processimpdefs";
  *(_QWORD *)(v2 + 24) = 14;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F6FB9;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C52055A4;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C52055A4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  int64x2_t v3;
  unint64_t v5;
  unint64_t v7;
  _QWORD *v8;
  _QWORD v9[2];

  v0 = operator new();
  v1 = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F6FB9);
  *v1 = off_1E81488F0;
  v1[34] = 1;
  v2 = 280;
  v3 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)(v0 + v2) = v3;
    v2 += 16;
  }
  while (v2 != 408);
  *(_QWORD *)(v0 + 408) = v0 + 424;
  *(_QWORD *)(v0 + 416) = 0x1000000000;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v7 = qword_1ED830BC0[0];
  v5 = atomic_load(&qword_1ED7FDF58);
  if (v5 != -1)
  {
    v9[0] = sub_1C5205514;
    v9[1] = &v7;
    v8 = v9;
    std::__call_once(&qword_1ED7FDF58, &v8, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C52056B8(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;

  *(_QWORD *)this = off_1E81488F0;
  v2 = (char *)*((_QWORD *)this + 51);
  if (v2 != (char *)this + 424)
    free(v2);
  if ((*((_BYTE *)this + 272) & 1) == 0)
    MEMORY[0x1CAA32FB4](*((_QWORD *)this + 35), 8);
  *(_QWORD *)this = &unk_1E8144BE8;
  v3 = (char *)*((_QWORD *)this + 22);
  if (v3 != (char *)this + 192)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 13);
  if (v4 != (char *)this + 120)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 4);
  if (v5 != (char *)this + 48)
    free(v5);
  llvm::Pass::~Pass(this);
}

void sub_1C5205768(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;

  *(_QWORD *)this = off_1E81488F0;
  v2 = (char *)*((_QWORD *)this + 51);
  if (v2 != (char *)this + 424)
    free(v2);
  if ((*((_BYTE *)this + 272) & 1) == 0)
    MEMORY[0x1CAA32FB4](*((_QWORD *)this + 35), 8);
  *(_QWORD *)this = &unk_1E8144BE8;
  v3 = (char *)*((_QWORD *)this + 22);
  if (v3 != (char *)this + 192)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 13);
  if (v4 != (char *)this + 120)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 4);
  if (v5 != (char *)this + 48)
    free(v5);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C520582C(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C5205870(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int *v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;

  v3 = a1;
  *(_QWORD *)(a1 + 248) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(v3 + 256) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(v3 + 264) = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 328);
  v33 = a2 + 320;
  if (v4 != a2 + 320)
  {
    v5 = 0;
    v35 = (_DWORD *)(v3 + 272);
    v36 = v3;
    while (1)
    {
      v6 = v4 + 48;
      v34 = v4;
      for (i = *(_QWORD *)(v4 + 56); i != v6; i = *(_QWORD *)(i + 8))
      {
        if (**(_WORD **)(i + 16) == 10)
        {
          v37 = i;
          sub_1C49EAC08((uint64_t)v35, &v37);
        }
        if ((*(_BYTE *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            i = *(_QWORD *)(i + 8);
        }
      }
      v8 = *(unsigned int *)(v3 + 416);
      if ((_DWORD)v8)
        break;
LABEL_57:
      v4 = *(_QWORD *)(v34 + 8);
      if (v4 == v33)
        return v5 & 1;
    }
    while (1)
    {
      v9 = *(_QWORD *)(v3 + 408) + 8 * v8;
      v10 = *(_QWORD *)(v9 - 8);
      sub_1C49EEDFC(v35, (_QWORD *)(v9 - 8));
      --*(_DWORD *)(v3 + 416);
      v11 = *(_DWORD *)(*(_QWORD *)(v10 + 32) + 4);
      if ((v11 & 0x80000000) != 0)
        break;
      v12 = *(_QWORD *)(v10 + 24) + 48;
      v13 = *(_QWORD *)(v10 + 8);
      if (v13 != v12)
      {
        while (1)
        {
          v14 = *(unsigned int *)(v13 + 40);
          if ((_DWORD)v14)
          {
            v15 = 0;
            v16 = *(int **)(v13 + 32);
            v17 = 32 * v14;
            do
            {
              v18 = *v16;
              if (!*v16)
              {
                v19 = v16[1];
                if (v19 - 1 <= 0x3FFFFFFE
                  && (v11 == v19
                   || v11 - 1 <= 0x3FFFFFFE
                   && llvm::MCRegisterInfo::regsOverlap((_QWORD *)(*(_QWORD *)(v36 + 256) + 8), v11, v19)))
                {
                  if ((v18 & 0x1000000) == 0)
                    *v16 = v18 | 0x10000000;
                  v15 = 1;
                }
              }
              v16 += 8;
              v17 -= 32;
            }
            while (v17);
            if ((v15 & 1) != 0)
              break;
          }
          v13 = *(_QWORD *)(v13 + 8);
          if (v13 == v12)
            goto LABEL_27;
        }
LABEL_33:
        v24 = v10;
        if ((*(_BYTE *)v10 & 4) == 0)
        {
          v24 = v10;
          if ((*(_WORD *)(v10 + 44) & 8) != 0)
          {
            v24 = v10;
            do
              v24 = *(_QWORD *)(v24 + 8);
            while ((*(_WORD *)(v24 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80(*(_QWORD *)(v10 + 24) + 40, v10, *(_QWORD *)(v24 + 8));
        v3 = v36;
        goto LABEL_36;
      }
LABEL_27:
      v20 = *(_DWORD *)(v10 + 40);
      v21 = v20 - 1;
      v3 = v36;
      if (v20 != 1)
      {
        do
          llvm::MachineInstr::removeOperand(v10, v21--);
        while (v21);
      }
LABEL_36:
      v8 = *(unsigned int *)(v3 + 416);
      if (!(_DWORD)v8)
      {
        v5 = 1;
        goto LABEL_57;
      }
    }
    v22 = *(int **)(*(_QWORD *)(*(_QWORD *)(v3 + 264) + 24) + 16 * (v11 & 0x7FFFFFFF) + 8);
    if (v22)
    {
      while (1)
      {
        v23 = *v22;
        if ((*v22 & 0x81000000) == 0)
          break;
        v22 = (int *)*((_QWORD *)v22 + 3);
        if (!v22)
          goto LABEL_33;
      }
LABEL_38:
      *v22 = v23 | 0x10000000;
      v25 = *((_QWORD *)v22 + 1);
      v37 = v25;
      v26 = **(unsigned __int16 **)(v25 + 16);
      if ((v26 - 9) <= 0x3C && ((1 << (v26 - 9)) & 0x1000000000000605) != 0
        || v26 == 0)
      {
        v29 = *(unsigned int *)(v25 + 40);
        if ((_DWORD)v29)
        {
          v30 = *(_DWORD **)(v25 + 32);
          v31 = 32 * v29;
          do
          {
            if ((*v30 & 0x310000FF) == 0)
              goto LABEL_51;
            v30 += 8;
            v31 -= 32;
          }
          while (v31);
        }
        *(_QWORD *)(v25 + 16) = *(_QWORD *)(*(_QWORD *)(v36 + 248) + 8) + 480;
        sub_1C49EAC08((uint64_t)v35, &v37);
      }
LABEL_51:
      while (1)
      {
        v22 = (int *)*((_QWORD *)v22 + 3);
        if (!v22)
          break;
        v23 = *v22;
        if ((*v22 & 0x81000000) == 0)
          goto LABEL_38;
      }
    }
    goto LABEL_33;
  }
  v5 = 0;
  return v5 & 1;
}

uint64_t sub_1C5205BA8(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeMachineLoopInfoPass((uint64_t)a1);
  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeMachineOptimizationRemarkEmitterPassPass(a1, v2);
  v3 = operator new();
  *(_QWORD *)v3 = "Prologue/Epilogue Insertion & Frame Finalization";
  *(_QWORD *)(v3 + 8) = 48;
  *(_QWORD *)(v3 + 16) = "prologepilog";
  *(_QWORD *)(v3 + 24) = 12;
  *(_QWORD *)(v3 + 32) = &unk_1EF8F6FBA;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C5205D38;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C5205C4C(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  v2 = (_QWORD *)sub_1C4776848(a1, (uint64_t)&unk_1EF8F6FBA);
  *v2 = &off_1E81489B8;
  v2[32] = 0xFFFFFFFFLL;
  v2[33] = v2 + 35;
  v2[34] = 0x400000000;
  v2[39] = v2 + 41;
  v2[40] = 0x400000000;
  v2[46] = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1ED7FDF60);
  if (v4 != -1)
  {
    v8[0] = sub_1C5205BA8;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1ED7FDF60, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5205D38()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5205C4C(v0);
}

void sub_1C5205D60(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;

  *(_QWORD *)this = &off_1E81489B8;
  v2 = (char *)*((_QWORD *)this + 39);
  if (v2 != (char *)this + 328)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 33);
  if (v3 != (char *)this + 280)
    free(v3);
  *(_QWORD *)this = &unk_1E8144BE8;
  v4 = (char *)*((_QWORD *)this + 22);
  if (v4 != (char *)this + 192)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 13);
  if (v5 != (char *)this + 120)
    free(v5);
  v6 = (char *)*((_QWORD *)this + 4);
  if (v6 != (char *)this + 48)
    free(v6);
  llvm::Pass::~Pass(this);
}

void sub_1C5205E0C(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;

  *(_QWORD *)this = &off_1E81489B8;
  v2 = (char *)*((_QWORD *)this + 39);
  if (v2 != (char *)this + 328)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 33);
  if (v3 != (char *)this + 280)
    free(v3);
  *(_QWORD *)this = &unk_1E8144BE8;
  v4 = (char *)*((_QWORD *)this + 22);
  if (v4 != (char *)this + 192)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 13);
  if (v5 != (char *)this + 120)
    free(v5);
  v6 = (char *)*((_QWORD *)this + 4);
  if (v6 != (char *)this + 48)
    free(v6);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5205ECC(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineOptimizationRemarkEmitterPass::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C5205F44(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t i;
  unint64_t v41;
  unint64_t v42;
  uint64_t j;
  uint64_t v44;
  std::string::size_type *v45;
  std::string::size_type v46;
  uint64_t k;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  _QWORD *v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  unsigned __int16 *v97;
  unsigned int v98;
  unsigned __int16 v99;
  unsigned __int8 *v100;
  unsigned int v101;
  int v102;
  _DWORD *v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  unsigned __int16 v108;
  unsigned __int16 *v109;
  int v110;
  std::string::size_type v111;
  std::string::size_type v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  std::string::size_type v118;
  uint64_t v119;
  __int16 v120;
  unsigned int *v121;
  _BYTE *v122;
  uint64_t v123;
  char v124;
  unsigned int *size;
  unsigned int *v126;
  std::string::size_type v127;
  unint64_t v128;
  uint64_t **v129;
  uint64_t **v130;
  uint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  unsigned int StackObject;
  uint64_t v135;
  _DWORD *v136;
  _BOOL4 v137;
  uint64_t v138;
  unsigned int v139;
  unint64_t v140;
  unsigned __int8 v141;
  unsigned __int8 v142;
  uint64_t v143;
  char *v144;
  char *v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  unsigned int *v151;
  unsigned int *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  unsigned int v159;
  llvm::MachineFunction *v160;
  unint64_t v161;
  uint64_t **v162;
  uint64_t **v163;
  uint64_t *v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t m;
  __int16 v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t v189;
  char v190;
  uint64_t v191;
  unsigned int *v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t *v196;
  unint64_t *v197;
  _QWORD *v198;
  int v199;
  unsigned __int16 *v200;
  unsigned __int16 *v201;
  unsigned __int16 *v202;
  unint64_t v203;
  char *v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  char *v208;
  char *v209;
  char *v210;
  unint64_t v211;
  unint64_t *v212;
  unint64_t v213;
  uint64_t *n;
  _QWORD *v215;
  uint64_t *v216;
  unsigned int v217;
  unsigned __int16 *v218;
  unsigned __int16 *v219;
  unsigned __int16 *v220;
  unint64_t v221;
  char *v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t v226;
  char *v227;
  char *v228;
  char *v229;
  char *v230;
  uint64_t v231;
  llvm::MachineBasicBlock **v232;
  llvm::MachineBasicBlock *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _QWORD *FirstTerminator;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  unsigned int v241;
  uint64_t v242;
  llvm::MachineFunction *v243;
  unint64_t v244;
  uint64_t **v245;
  uint64_t **v246;
  uint64_t *v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  unsigned __int8 *v263;
  unsigned __int8 *v264;
  int v265;
  uint64_t v266;
  int v267;
  int64_t v268;
  int v269;
  uint64_t *v270;
  uint64_t v271;
  int64_t v272;
  uint64_t v273;
  int64_t v274;
  int v275;
  unsigned __int8 v276;
  unsigned int v277;
  unsigned int v278;
  uint64_t v279;
  int v280;
  uint64_t v281;
  unsigned __int8 *v282;
  int v283;
  uint64_t v284;
  unsigned __int8 *v285;
  int v286;
  unsigned int v287;
  uint64_t v288;
  unsigned int v289;
  int64_t *v290;
  int v291;
  unsigned int v292;
  uint64_t v293;
  uint64_t v294;
  int v295;
  int v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  uint64_t v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  uint64_t v307;
  unsigned int v308;
  int v309;
  uint64_t v310;
  int v311;
  unsigned int v312;
  unsigned int v313;
  int64_t *v314;
  int v315;
  unsigned int v316;
  int v317;
  unsigned int v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  _DWORD *v322;
  uint64_t v323;
  int v325;
  std::string *p_dst;
  int *v327;
  uint64_t v328;
  int v329;
  int v330;
  unsigned int v331;
  uint64_t v332;
  unsigned int v333;
  int64_t *v334;
  int *v335;
  uint64_t v336;
  int v337;
  int v338;
  unsigned int v339;
  uint64_t v340;
  unsigned int v341;
  int64_t *v342;
  int *v343;
  uint64_t v344;
  int v345;
  int v346;
  unsigned int v347;
  uint64_t v348;
  unsigned int v349;
  int64_t *v350;
  int v351;
  int v352;
  int v353;
  unsigned int v354;
  int v355;
  unsigned int v356;
  uint64_t v357;
  unsigned int v358;
  unsigned int v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  _DWORD *v363;
  uint64_t v364;
  _QWORD *v365;
  int v366;
  unsigned __int8 *v367;
  uint64_t v368;
  unsigned int v369;
  int64_t *v370;
  uint64_t v371;
  unsigned int v372;
  unsigned int v373;
  uint64_t v374;
  unsigned int v375;
  char v376;
  unsigned int v377;
  unint64_t v378;
  uint64_t v379;
  int v380;
  unsigned int v381;
  int v382;
  std::string *v385;
  int v386;
  uint64_t v387;
  _DWORD *v388;
  std::string::size_type v389;
  std::string::size_type v390;
  unsigned int *v391;
  unsigned int v392;
  unsigned int v393;
  unsigned int v394;
  unsigned int v395;
  unsigned int v396;
  uint64_t v397;
  unsigned int v398;
  unsigned int v399;
  unsigned int v400;
  char *v401;
  char *v402;
  uint64_t v403;
  int v404;
  uint64_t v405;
  int v406;
  unsigned int v407;
  uint64_t v408;
  uint64_t *v409;
  uint64_t v410;
  _QWORD *v411;
  int v412;
  unsigned int v413;
  unsigned int v414;
  int64_t *v415;
  unsigned int v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  unint64_t v422;
  int v423;
  unsigned int v424;
  unsigned int v425;
  uint64_t v426;
  unsigned int v427;
  unsigned int v428;
  uint64_t v429;
  _QWORD *v430;
  std::string::size_type v431;
  unsigned int v432;
  unsigned int v433;
  unsigned int v434;
  uint64_t v435;
  uint64_t v436;
  char v437;
  llvm::MachineFunction *v438;
  unsigned __int8 *v439;
  std::string *v440;
  int v441;
  uint64_t v442;
  int *v443;
  int v444;
  unsigned int v445;
  uint64_t v446;
  unsigned int v447;
  int64_t *v448;
  unint64_t v449;
  int64_t v450;
  uint64_t v451;
  unsigned __int8 *v452;
  unsigned int v453;
  unint64_t v454;
  uint64_t v455;
  char v456;
  std::string *v457;
  int v458;
  uint64_t v459;
  uint64_t v460;
  int *v461;
  int v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t *v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  int v476;
  uint64_t v477;
  unsigned __int8 v478;
  uint64_t v479;
  unint64_t v480;
  unsigned int v481;
  int ii;
  unsigned int v483;
  uint64_t v484;
  _QWORD *v485;
  BOOL v486;
  uint64_t v488;
  uint64_t v489;
  int v490;
  uint64_t v491;
  unsigned __int8 v492;
  uint64_t v493;
  unint64_t v494;
  unsigned int v495;
  int jj;
  unsigned int v497;
  uint64_t v498;
  _QWORD *v499;
  BOOL v500;
  uint64_t v502;
  int v503;
  _DWORD *v504;
  int v506;
  int v507;
  char v509;
  uint64_t v510;
  _QWORD *kk;
  uint64_t mm;
  uint64_t v513;
  std::string::size_type v514;
  std::string::size_type v515;
  uint64_t v516;
  unsigned int *v517;
  unint64_t v518;
  uint64_t v519;
  unint64_t v520;
  unsigned int v521;
  uint64_t v522;
  uint64_t *v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  unint64_t v527;
  unint64_t v528;
  int v529;
  unsigned int v530;
  unint64_t v531;
  _QWORD *v532;
  llvm::MachineBasicBlock *v533;
  llvm::MachineBasicBlock *v534;
  unint64_t v535;
  char *v536;
  unint64_t v537;
  uint64_t v538;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  unsigned int v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  unsigned __int16 *v547;
  unint64_t v548;
  int v549;
  __int16 v550;
  unint64_t v551;
  uint64_t v552;
  _WORD *v553;
  uint64_t v554;
  unint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  int v559;
  uint64_t *v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t *v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t *v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t *v571;
  uint64_t v572;
  uint64_t v573;
  int v574;
  unsigned int v575;
  _QWORD *v576;
  uint64_t *v577;
  uint64_t *v578;
  BOOL v579;
  _QWORD *v580;
  unsigned int v581;
  uint64_t *v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t *v585;
  uint64_t *v586;
  uint64_t *v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  unint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t *v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  char v606;
  _QWORD *v607;
  std::string::size_type nn;
  unint64_t v609;
  uint64_t v610;
  _QWORD *i1;
  _QWORD *v612;
  uint64_t *v613;
  llvm::RegScavenger *v614;
  uint64_t v615;
  unint64_t v616;
  uint64_t v617;
  uint64_t v618;
  int v619;
  uint64_t v620;
  unsigned __int8 v621;
  unint64_t v622;
  unsigned int v623;
  int v624;
  unint64_t v625;
  unsigned int v626;
  uint64_t v627;
  _QWORD *v628;
  unint64_t v630;
  uint64_t v631;
  int v632;
  uint64_t v633;
  unsigned __int8 v634;
  unint64_t v635;
  unsigned int v636;
  int v637;
  unsigned int v638;
  uint64_t v639;
  _QWORD *v640;
  unint64_t v642;
  unsigned __int8 *v643;
  uint64_t v644;
  int v645;
  int v646;
  int v647;
  unsigned int v648;
  _BOOL4 v649;
  int v650;
  unint64_t v651;
  int v652;
  uint64_t v653;
  uint64_t ****v654;
  uint64_t v655;
  _QWORD *v656;
  _QWORD *v657;
  _QWORD *v658;
  _QWORD *v659;
  _QWORD *v660;
  _QWORD *v661;
  char v662;
  uint64_t v663;
  _QWORD *v664;
  uint64_t v665;
  uint64_t v666;
  _QWORD *v667;
  uint64_t ***v669;
  uint64_t v670;
  int v671;
  uint64_t v672;
  int v673;
  unsigned int v674;
  uint64_t ****v675;
  uint64_t ***v676;
  uint64_t ****v677;
  int v678;
  BOOL v679;
  unsigned int v680;
  uint64_t v681;
  _QWORD *v682;
  uint64_t v683;
  uint64_t v684;
  const char *v685;
  uint64_t v686;
  uint64_t v687;
  char *v688;
  unint64_t v689;
  void **v690;
  char *v691;
  unint64_t v692;
  void **v693;
  uint64_t ****v694;
  unsigned __int8 *v695;
  BOOL v696;
  char v697;
  unint64_t v698;
  unint64_t v699;
  unint64_t v700;
  unint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t *v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  llvm::MachineBasicBlock **v712;
  uint64_t v713;
  llvm::MachineBasicBlock **v714;
  int64_t v715;
  uint64_t v716;
  uint64_t *v717;
  _QWORD *v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  char v722;
  uint64_t v723;
  unsigned int *v724;
  unsigned int *v725;
  unint64_t v726;
  uint64_t v727;
  unsigned __int8 *v728;
  llvm::MachineBasicBlock *v729;
  std::string::size_type *v730;
  _QWORD *v731;
  uint64_t v732;
  _QWORD *v733;
  unsigned int v734;
  char *v735;
  uint64_t v736;
  uint64_t *v737;
  uint64_t v738;
  unsigned int *v739;
  llvm::MachineBasicBlock *v740;
  int v741;
  _QWORD *v742;
  unsigned int v743;
  uint64_t v744;
  _QWORD *v745;
  unsigned int v746;
  uint64_t v747;
  uint64_t v748;
  _BYTE v749[24];
  int *v750;
  uint64_t v751;
  uint64_t v752;
  unsigned int v753;
  std::string v754;
  __int128 v755;
  int *v756;
  __int128 v757;
  unsigned int v758;
  std::string __dst;
  __int128 v760;
  int *v761;
  __int128 v762;
  int v763;
  char *v764;
  unsigned int v765;
  uint64_t v766;
  unsigned __int8 *v767;
  uint64_t v768;
  uint64_t v769;
  const char *v770;
  unint64_t v771;
  const char *v772;
  const char *v773;
  uint64_t v774;
  unsigned int v775;
  __int16 v776;
  uint64_t *v777;
  uint64_t v778;
  _QWORD v779[32];
  char v780;
  int v781;
  uint64_t v782;
  uint64_t v783;

  v783 = *MEMORY[0x1E0C80C00];
  v709 = *a2;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2[2] + 176))(a2[2]);
  v710 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2[2] + 112))(a2[2]);
  v717 = a2;
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 376))(v4, a2))
  {
    v5 = operator new();
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 128) = 0u;
    *(_OWORD *)(v5 + 144) = 0u;
    *(_OWORD *)(v5 + 160) = 0u;
    *(_OWORD *)(v5 + 176) = 0u;
    *(_OWORD *)(v5 + 208) = 0u;
    *(_OWORD *)(v5 + 224) = 0u;
    *(_OWORD *)(v5 + 240) = 0u;
    *(_OWORD *)(v5 + 256) = 0u;
    *(_OWORD *)(v5 + 272) = 0u;
    *(_OWORD *)(v5 + 288) = 0u;
    *(_OWORD *)(v5 + 304) = 0u;
    *(_OWORD *)(v5 + 320) = 0u;
    *(_OWORD *)(v5 + 336) = 0u;
    *(_OWORD *)(v5 + 352) = 0u;
    *(_OWORD *)(v5 + 368) = 0u;
    *(_QWORD *)(v5 + 384) = 0;
    *(_OWORD *)(v5 + 192) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_QWORD *)(v5 + 48) = v5 + 64;
    *(_DWORD *)(v5 + 60) = 2;
    *(_QWORD *)(v5 + 104) = v5 + 120;
    *(_DWORD *)(v5 + 116) = 6;
    *(_QWORD *)(v5 + 176) = v5 + 192;
    *(_DWORD *)(v5 + 188) = 6;
    *(_QWORD *)(v5 + 248) = v5 + 264;
    *(_DWORD *)(v5 + 260) = 6;
    *(_QWORD *)(v5 + 320) = v5 + 336;
    *(_DWORD *)(v5 + 332) = 6;
  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)(a1 + 248) = v5;
  *(_BYTE *)(a1 + 360) = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 392))(v4, a2);
  v6 = **(void ****)(a1 + 8);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != &llvm::MachineOptimizationRemarkEmitterPass::ID);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), &llvm::MachineOptimizationRemarkEmitterPass::ID)+ 248);
  v8 = a2;
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2[2] + 104))(a2[2]);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8[2] + 112))(v8[2]);
  v11 = *(_DWORD *)(v9 + 64) == -1 && *(_DWORD *)(v9 + 68) == -1;
  v736 = a1;
  v708 = v4;
  if (v11)
    goto LABEL_53;
  v12 = a2[7];
  v13 = (uint64_t *)a2[41];
  if (v13 == a2 + 40)
  {
    *(_DWORD *)(v12 + 72) = 0;
    v8 = a2;
    goto LABEL_53;
  }
  v719 = a2[7];
  v723 = v10;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = *(unsigned __int8 *)(v12 + 61) != 0;
  do
  {
    v19 = v13 + 6;
    v737 = v13;
    v20 = v13[7];
    while ((uint64_t *)v20 != v19)
    {
      v21 = **(unsigned __int16 **)(v20 + 16);
      if (*(_DWORD *)(v9 + 64) != v21 && *(_DWORD *)(v9 + 68) != v21)
      {
        if ((v21 - 1) <= 1)
          v18 |= (*(_BYTE *)(*(_QWORD *)(v20 + 32) + 48) & 2) >> 1;
        goto LABEL_31;
      }
      if (v14 <= *(_DWORD *)(*(_QWORD *)(v20 + 32) + 16))
        v14 = *(_DWORD *)(*(_QWORD *)(v20 + 32) + 16);
      if (v16 < v17)
      {
        *(_QWORD *)v16 = v20;
        v16 += 8;
        v18 = 1;
LABEL_31:
        v27 = v15;
LABEL_39:
        if ((*(_BYTE *)v20 & 4) != 0)
          goto LABEL_43;
        goto LABEL_42;
      }
      v22 = (v16 - v15) >> 3;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61)
        goto LABEL_844;
      v24 = v17 - v15;
      if (v24 >> 2 > v23)
        v23 = v24 >> 2;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
        v25 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v25 = v23;
      if (v25)
      {
        if (v25 >> 61)
LABEL_1183:
          sub_1C4764EE4();
        v26 = (char *)operator new(8 * v25);
      }
      else
      {
        v26 = 0;
      }
      v27 = &v26[8 * v22];
      *(_QWORD *)v27 = v20;
      v28 = v27 + 8;
      while (v16 != v15)
      {
        v29 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v27 - 1) = v29;
        v27 -= 8;
      }
      if (v15)
        operator delete(v15);
      v17 = &v26[8 * v25];
      v18 = 1;
      v16 = v28;
      if (v20)
        goto LABEL_39;
LABEL_42:
      while ((*(_WORD *)(v20 + 44) & 8) != 0)
        v20 = *(_QWORD *)(v20 + 8);
LABEL_43:
      v20 = *(_QWORD *)(v20 + 8);
      v15 = v27;
    }
    v13 = (uint64_t *)v737[1];
  }
  while (v13 != v717 + 40);
  *(_BYTE *)(v719 + 61) = v18 & 1;
  *(_DWORD *)(v719 + 72) = v14;
  a1 = v736;
  if (v15 != v16)
  {
    v30 = v15;
    do
    {
      v31 = *(_QWORD *)v30;
      if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v723 + 216))(v723, v717))
        (*(void (**)(uint64_t, uint64_t *, _QWORD, uint64_t))(*(_QWORD *)v723 + 296))(v723, v717, *(_QWORD *)(v31 + 24), v31);
      v30 += 8;
    }
    while (v30 != v16);
  }
  v8 = v717;
  if (v15)
    operator delete(v15);
LABEL_53:
  v32 = v8[7];
  v33 = *(_QWORD *)(v32 + 656);
  if (v33)
  {
    v34 = *(unsigned int *)(a1 + 272);
    if (v34 >= *(_DWORD *)(a1 + 276))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 264, a1 + 280, v34 + 1, 8);
      LODWORD(v34) = *(_DWORD *)(a1 + 272);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8 * v34) = v33;
    ++*(_DWORD *)(a1 + 272);
    v35 = *(_QWORD *)(v32 + 664);
    if (*(_QWORD *)(v35 + 88) != *(_QWORD *)(v35 + 96) || sub_1C498FBAC(v35))
    {
      v36 = *(unsigned int *)(a1 + 320);
      if (v36 >= *(_DWORD *)(a1 + 324))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 312, a1 + 328, v36 + 1, 8);
        LODWORD(v36) = *(_DWORD *)(a1 + 320);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 312) + 8 * v36) = v35;
      ++*(_DWORD *)(a1 + 320);
    }
  }
  else
  {
    v37 = v8[41];
    v38 = *(unsigned int *)(a1 + 272);
    if (v38 >= *(_DWORD *)(a1 + 276))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 264, a1 + 280, v38 + 1, 8);
      LODWORD(v38) = *(_DWORD *)(a1 + 272);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8 * v38) = v37;
    ++*(_DWORD *)(a1 + 272);
    v39 = v8 + 40;
    for (i = v8[41]; (uint64_t *)i != v39; i = *(_QWORD *)(i + 8))
    {
      if (*(_BYTE *)(i + 189))
      {
        v41 = *(unsigned int *)(a1 + 272);
        if (v41 >= *(unsigned int *)(a1 + 276))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 264, a1 + 280, v41 + 1, 8);
          v41 = *(unsigned int *)(a1 + 272);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8 * v41) = i;
        ++*(_DWORD *)(a1 + 272);
      }
      if (sub_1C498FBAC(i))
      {
        v42 = *(unsigned int *)(a1 + 320);
        if (v42 >= *(unsigned int *)(a1 + 324))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 312, a1 + 328, v42 + 1, 8);
          v42 = *(unsigned int *)(a1 + 320);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 312) + 8 * v42) = i;
        ++*(_DWORD *)(a1 + 320);
      }
    }
  }
  v744 = 1;
  v718 = &v745;
  v704 = &v747;
  for (j = 8; j != 232; j += 56)
    *(uint64_t *)((char *)&v744 + j) = -4096;
  v44 = *(unsigned int *)(a1 + 272);
  if ((_DWORD)v44)
  {
    v45 = *(std::string::size_type **)(a1 + 264);
    v730 = &v45[v44];
    while (1)
    {
      v46 = *v45;
      v767 = (unsigned __int8 *)&v769;
      v768 = 0x400000000;
      for (k = *(_QWORD *)(v46 + 56); k != v46 + 48; k = *(_QWORD *)(k + 8))
      {
        v48 = **(unsigned __int16 **)(k + 16);
        if ((v48 - 13) > 4)
          break;
        if ((unsigned __int16)(v48 - 13) <= 1u)
        {
          v49 = *(_QWORD *)(k + 32);
          v50 = *(_QWORD *)(v49 + ((unint64_t)(v48 != 14) << 6) + 16);
          if (*(_WORD *)(v50 + 32))
          {
            if (v48 == 14)
            {
              v51 = *(unsigned int *)(k + 40);
              if ((_DWORD)v51 != 2)
              {
                v52 = (_BYTE *)(v49 + 64);
                v53 = (_BYTE *)(v49 + 32 * v51);
                goto LABEL_86;
              }
LABEL_88:
              v54 = v48 == 14 ? 32 : 96;
              if ((_DWORD)v768)
              {
                v55 = *(_QWORD *)(v49 + v54 + 16);
                v56 = v767;
                v57 = 8 * v768;
                while (1)
                {
                  v58 = **(unsigned __int16 **)(*(_QWORD *)v56 + 16);
                  v59 = *(_QWORD *)(*(_QWORD *)v56 + 32);
                  if (*(_QWORD *)(v59 + ((unint64_t)(v58 != 14) << 6) + 16) == v50)
                  {
                    v60 = v58 == 14 ? 32 : 96;
                    if (sub_1C520AAB4(v55, *(_QWORD *)(v59 + v60 + 16)))
                      break;
                  }
                  v56 += 8;
                  v57 -= 8;
                  if (!v57)
                    goto LABEL_99;
                }
              }
              else
              {
LABEL_99:
                __dst.__r_.__value_.__r.__words[0] = v46;
                v61 = sub_1C6209448(&v744, (uint64_t *)&__dst);
                v62 = v61;
                v63 = *((unsigned int *)v61 + 4);
                if (v63 >= *((unsigned int *)v61 + 5))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v61 + 1), (uint64_t)(v61 + 3), v63 + 1, 8);
                  v63 = *((unsigned int *)v62 + 4);
                }
                *(_QWORD *)(v62[1] + 8 * v63) = k;
                ++*((_DWORD *)v62 + 4);
              }
            }
            else
            {
              v53 = (_BYTE *)(v49 + 32);
              v52 = *(_BYTE **)(k + 32);
LABEL_86:
              while (*v52 != 5)
              {
                v52 += 32;
                if (v52 == v53)
                  goto LABEL_88;
              }
              v64 = v768;
              if (v768 >= (unint64_t)HIDWORD(v768))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v767, (uint64_t)&v769, v768 + 1, 8);
                v64 = v768;
              }
              *(_QWORD *)&v767[8 * v64] = k;
              LODWORD(v768) = v768 + 1;
            }
            if (!k)
              goto LABEL_109;
          }
        }
        if ((*(_BYTE *)k & 4) == 0)
        {
LABEL_109:
          while ((*(_WORD *)(k + 44) & 8) != 0)
            k = *(_QWORD *)(k + 8);
        }
      }
      if ((v744 & 1) != 0)
        break;
      v65 = v746;
      a1 = v736;
      if (v746)
      {
        v66 = v745;
LABEL_113:
        v67 = v65 - 1;
        v68 = v67 & ((v46 >> 4) ^ (v46 >> 9));
        v69 = v66[7 * v68];
        if (v69 == v46)
        {
LABEL_117:
          __dst.__r_.__value_.__r.__words[0] = v46;
          v72 = sub_1C6209448(&v744, (uint64_t *)&__dst);
          v73 = *((unsigned int *)v72 + 4);
          if ((_DWORD)v73)
          {
            v74 = (_QWORD *)v72[1];
            v75 = &v74[v73];
            do
            {
              v76 = *v74;
              v77 = *(_QWORD *)(*(_QWORD *)(*v74 + 24) + 32);
              if (v77)
              {
                v78 = *(_QWORD *)(v77 + 728);
                if (v78)
                  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v78 + 32))(v78, *v74);
                v79 = *(unsigned int *)(v76 + 40);
                if ((_DWORD)v79)
                {
                  v80 = *(_QWORD *)(v76 + 32);
                  v81 = *(_QWORD *)(v77 + 40);
                  v82 = 32 * v79;
                  do
                  {
                    if (!*(_BYTE *)v80)
                    {
                      v83 = *(unsigned int *)(v80 + 4);
                      if ((v83 & 0x80000000) != 0)
                        v84 = (uint64_t *)(*(_QWORD *)(v81 + 24) + 16 * (v83 & 0x7FFFFFFF) + 8);
                      else
                        v84 = (uint64_t *)(*(_QWORD *)(v81 + 272) + 8 * v83);
                      v85 = *v84;
                      v87 = *(_QWORD *)(v80 + 16);
                      v86 = *(_QWORD *)(v80 + 24);
                      if (v80 != *v84)
                        v84 = (uint64_t *)(v87 + 24);
                      *v84 = v86;
                      if (v86)
                        v88 = v86;
                      else
                        v88 = v85;
                      *(_QWORD *)(v88 + 16) = v87;
                      *(_QWORD *)(v80 + 16) = 0;
                      *(_QWORD *)(v80 + 24) = 0;
                    }
                    v80 += 32;
                    v82 -= 32;
                  }
                  while (v82);
                }
              }
              *(_QWORD *)(v76 + 24) = 0;
              v89 = *(unint64_t **)(v76 + 8);
              v90 = *(_QWORD *)v76 & 0xFFFFFFFFFFFFFFF8;
              *v89 = v90 | *v89 & 7;
              *(_QWORD *)(v90 + 8) = v89;
              *(_QWORD *)v76 &= 7uLL;
              *(_QWORD *)(v76 + 8) = 0;
              ++v74;
              a1 = v736;
            }
            while (v74 != v75);
          }
        }
        else
        {
          v70 = 1;
          while (v69 != -4096)
          {
            v71 = v68 + v70++;
            v68 = v71 & v67;
            v69 = v66[7 * v68];
            if (v69 == v46)
              goto LABEL_117;
          }
        }
      }
      if (v767 != (unsigned __int8 *)&v769)
        free(v767);
      if (++v45 == v730)
        goto LABEL_143;
    }
    v65 = 4;
    v66 = &v745;
    a1 = v736;
    goto LABEL_113;
  }
LABEL_143:
  v91 = v717;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v717[1] + 184))(v717[1]) & 1) != 0)
  {
    v92 = *v717;
    v93 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v717[2] + 112))(v717[2]);
    v716 = v717[7];
    *(_QWORD *)(a1 + 256) = 0xFFFFFFFFLL;
    v754.__r_.__value_.__r.__words[0] = (std::string::size_type)&v754.__r_.__value_.__r.__words[2];
    v754.__r_.__value_.__l.__size_ = 0x600000000;
    v758 = 0;
    (*(void (**)(uint64_t, uint64_t *, std::string *, _QWORD))(*(_QWORD *)v93 + 264))(v93, v717, &v754, *(_QWORD *)(a1 + 248));
    if (v758)
    {
      v94 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v717[2] + 176))(v717[2]);
      v95 = (_QWORD *)v717[5];
      if (*((_BYTE *)v95 + 144))
      {
        v97 = (unsigned __int16 *)v95[19];
      }
      else
      {
        v96 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v95 + 16) + 176))(*(_QWORD *)(*v95 + 16));
        v97 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v96 + 32))(v96, *v95);
      }
      v98 = v758;
      v767 = (unsigned __int8 *)&v769;
      v768 = 0x600000000;
      sub_1C4765AA4((char *)&v767, (v758 + 63) >> 6, 0);
      v775 = v98;
      v99 = *v97;
      v738 = v92;
      if (*v97)
      {
        v100 = v767;
        v101 = 1;
        LOWORD(v102) = *v97;
        do
        {
          *(_QWORD *)&v100[8 * ((unsigned __int16)v102 >> 6)] |= 1 << v102;
          v102 = v97[v101++];
        }
        while (v102);
        v103 = 0;
        v104 = 0;
        memset(&__dst, 0, sizeof(__dst));
        do
        {
          if (((*(_QWORD *)(v754.__r_.__value_.__r.__words[0] + 8 * (v99 >> 6)) >> v99) & 1) != 0)
          {
            v105 = v99;
            v106 = *(_QWORD *)(v94 + 56);
            v107 = *(unsigned int *)(*(_QWORD *)(v94 + 8) + 24 * v99 + 8);
            if (*(_WORD *)(v106 + 2 * v107))
            {
              v108 = *(_WORD *)(v106 + 2 * v107) + v99;
              v109 = (unsigned __int16 *)(v106 + 2 * v107 + 2);
              while (((1 << v108) & *(_QWORD *)(v754.__r_.__value_.__r.__words[0] + 8 * (v108 >> 6))) == 0
                   || (*(_QWORD *)&v767[8 * (v108 >> 6)] & (1 << v108)) == 0)
              {
                v110 = *v109++;
                v108 += v110;
                if (!v110)
                  goto LABEL_157;
              }
            }
            else
            {
LABEL_157:
              if ((unint64_t)v103 >= __dst.__r_.__value_.__r.__words[2])
              {
                v112 = __dst.__r_.__value_.__r.__words[0];
                v113 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v103 - __dst.__r_.__value_.__r.__words[0]) >> 2);
                v114 = v113 + 1;
                if (v113 + 1 > 0x1555555555555555)
                  goto LABEL_844;
                if (0x5555555555555556
                   * ((uint64_t)(__dst.__r_.__value_.__r.__words[2] - __dst.__r_.__value_.__r.__words[0]) >> 2) > v114)
                  v114 = 0x5555555555555556
                       * ((uint64_t)(__dst.__r_.__value_.__r.__words[2] - __dst.__r_.__value_.__r.__words[0]) >> 2);
                if (0xAAAAAAAAAAAAAAABLL
                   * ((uint64_t)(__dst.__r_.__value_.__r.__words[2] - __dst.__r_.__value_.__r.__words[0]) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                  v115 = 0x1555555555555555;
                else
                  v115 = v114;
                if (v115)
                {
                  if (v115 > 0x1555555555555555)
                    goto LABEL_1183;
                  v116 = (char *)operator new(12 * v115);
                }
                else
                {
                  v116 = 0;
                }
                v117 = &v116[12 * v113];
                *(_DWORD *)v117 = v105;
                *((_DWORD *)v117 + 1) = 0;
                *((_WORD *)v117 + 4) = 1;
                v118 = (std::string::size_type)v117;
                if (v103 != (_DWORD *)v112)
                {
                  do
                  {
                    v119 = *(_QWORD *)(v103 - 3);
                    v103 -= 3;
                    v120 = *((_WORD *)v103 + 4);
                    *(_QWORD *)(v118 - 12) = v119;
                    v118 -= 12;
                    *(_WORD *)(v118 + 8) = v120;
                  }
                  while (v103 != (_DWORD *)v112);
                  v103 = (_DWORD *)__dst.__r_.__value_.__r.__words[0];
                }
                v111 = (std::string::size_type)(v117 + 12);
                __dst.__r_.__value_.__r.__words[0] = v118;
                __dst.__r_.__value_.__l.__size_ = (std::string::size_type)(v117 + 12);
                __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)&v116[12 * v115];
                if (v103)
                  operator delete(v103);
                a1 = v736;
              }
              else
              {
                *v103 = v105;
                v103[1] = 0;
                v111 = (std::string::size_type)(v103 + 3);
                *((_WORD *)v103 + 4) = 1;
              }
              __dst.__r_.__value_.__l.__size_ = v111;
              v103 = (_DWORD *)v111;
            }
          }
          v99 = v97[++v104];
        }
        while (v99);
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
      }
      v121 = (unsigned int *)(a1 + 260);
      v122 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v717[2] + 112))(v717[2]);
      v123 = v717[7];
      v724 = (unsigned int *)(a1 + 256);
      v124 = (*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t, std::string *, uint64_t, uint64_t))(*(_QWORD *)v122 + 40))(v122, v717, v94, &__dst, a1 + 256, a1 + 260);
      size = (unsigned int *)__dst.__r_.__value_.__l.__size_;
      v126 = (unsigned int *)__dst.__r_.__value_.__r.__words[0];
      if ((v124 & 1) != 0)
        goto LABEL_216;
      if (__dst.__r_.__value_.__r.__words[0] != __dst.__r_.__value_.__l.__size_)
      {
        LODWORD(v747) = 0;
        v720 = (*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v122 + 56))(v122, &v747);
        v127 = __dst.__r_.__value_.__l.__size_;
        size = (unsigned int *)__dst.__r_.__value_.__r.__words[0];
        if (__dst.__r_.__value_.__r.__words[0] != __dst.__r_.__value_.__l.__size_)
        {
          while (*((_BYTE *)size + 9))
          {
LABEL_214:
            size += 3;
            if (size == (unsigned int *)v127)
            {
              size = (unsigned int *)__dst.__r_.__value_.__l.__size_;
              v126 = (unsigned int *)__dst.__r_.__value_.__r.__words[0];
              goto LABEL_216;
            }
          }
          v128 = *size;
          v129 = *(uint64_t ***)(v94 + 240);
          v130 = *(uint64_t ***)(v94 + 248);
          if (v129 == v130)
          {
            v131 = 0;
          }
          else
          {
            v131 = 0;
            v132 = v128 >> 3;
            do
            {
              if ((v128 - 0x40000000) >= 0xC0000001)
              {
                v133 = **v129;
                if (v132 < *(unsigned __int16 *)(v133 + 22)
                  && ((1 << (v128 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v133 + 8) + v132)) != 0
                  && (!v131
                   || *v129 != v131
                   && ((*(_DWORD *)(v131[1] + ((*(unsigned __int16 *)(v133 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v133 + 24)) & 1) != 0))
                {
                  v131 = *v129;
                }
              }
              ++v129;
            }
            while (v129 != v130);
          }
          v743 = 0;
          if (((*(uint64_t (**)(uint64_t, uint64_t *, unint64_t, unsigned int *))(*(_QWORD *)v94 + 416))(v94, v717, v128, &v743) & 1) != 0)
          {
            StackObject = v743;
          }
          else
          {
            if ((_DWORD)v747)
            {
              v135 = 8 * v747;
              v136 = (_DWORD *)v720;
              while (1)
              {
                v137 = *v136 != v128;
                if (*v136 == (_DWORD)v128)
                  break;
                v136 += 2;
                v135 -= 8;
                if (!v135)
                {
                  v136 = (_DWORD *)(v720 + 8 * v747);
                  break;
                }
              }
            }
            else
            {
              v137 = 1;
              v136 = (_DWORD *)v720;
            }
            v138 = *(_QWORD *)(v94 + 264);
            v139 = *(unsigned __int16 *)(*v131 + 24)
                 + *(_DWORD *)(v94 + 272) * ((*(_QWORD *)(v94 + 248) - *(_QWORD *)(v94 + 240)) >> 3);
            v140 = (unint64_t)*(unsigned int *)(v138 + 24 * v139 + 4) >> 3;
            if (v137)
            {
              v141 = 63 - __clz((unint64_t)*(unsigned int *)(v138 + 24 * v139 + 8) >> 3);
              if (v122[12] >= v141)
                v142 = v141;
              else
                v142 = v122[12];
              StackObject = llvm::MachineFrameInfo::CreateStackObject((unsigned __int8 *)v123, v140, v142, 1u, 0, 0);
              a1 = v736;
              if (StackObject < *v724)
                *v724 = StackObject;
              if (StackObject > *v121)
                *v121 = StackObject;
              goto LABEL_213;
            }
            StackObject = llvm::MachineFrameInfo::CreateFixedSpillStackObject((llvm::MachineFrameInfo *)v123, v140, (int)v136[1], 0);
          }
          a1 = v736;
LABEL_213:
          size[1] = StackObject;
          *((_BYTE *)size + 9) = 0;
          goto LABEL_214;
        }
        v126 = (unsigned int *)__dst.__r_.__value_.__r.__words[0];
LABEL_216:
        v143 = (char *)size - (char *)v126;
        if (size == v126)
        {
          v144 = 0;
          v145 = 0;
        }
        else
        {
          if (0xAAAAAAAAAAAAAAABLL * (v143 >> 2) > 0x1555555555555555)
LABEL_844:
            abort();
          v144 = (char *)operator new((char *)size - (char *)v126);
          v145 = &v144[4 * (v143 >> 2)];
          memcpy(v144, v126, v143 - 2);
        }
        v146 = *(void **)(v123 + 80);
        if (v146)
        {
          *(_QWORD *)(v123 + 88) = v146;
          operator delete(v146);
          v126 = (unsigned int *)__dst.__r_.__value_.__r.__words[0];
        }
        *(_QWORD *)(v123 + 80) = v144;
        *(_QWORD *)(v123 + 88) = v145;
        *(_QWORD *)(v123 + 96) = v145;
      }
      if (v126)
      {
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v126;
        operator delete(v126);
      }
      if (v767 != (unsigned __int8 *)&v769)
        free(v767);
      v92 = v738;
    }
    v147 = *(_QWORD *)(v92 + 112);
    if (!v147 || (*(_BYTE *)(v147 + 14) & 2) == 0)
    {
      *(_BYTE *)(v716 + 104) = 1;
      if (*(_QWORD *)(v716 + 80) != *(_QWORD *)(v716 + 88))
      {
        v148 = *(unsigned int *)(a1 + 272);
        if ((_DWORD)v148)
        {
          v149 = *(_QWORD *)(a1 + 264);
          v711 = v149 + 8 * v148;
          do
          {
            v713 = v149;
            v150 = *(_QWORD **)v149;
            v152 = *(unsigned int **)(v716 + 80);
            v151 = *(unsigned int **)(v716 + 88);
            v153 = *(_QWORD *)(*(_QWORD *)v149 + 32);
            v731 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v153 + 16) + 104))(*(_QWORD *)(v153 + 16));
            v154 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v153 + 16) + 112))(*(_QWORD *)(v153 + 16));
            v155 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v153 + 16) + 176))(*(_QWORD *)(v153 + 16));
            v156 = (unint64_t *)v150[7];
            v721 = v155;
            if (((*(uint64_t (**)(uint64_t, _QWORD *, unint64_t *, unsigned int *, unint64_t))(*(_QWORD *)v154 + 176))(v154, v150, v156, v152, 0xAAAAAAAAAAAAAAABLL * (v151 - v152)) & 1) == 0)
            {
              if (v151 != v152)
              {
                v725 = &v152[v151 - v152];
                do
                {
                  v157 = *v152;
                  if (*((_BYTE *)v152 + 9))
                  {
                    v747 = 0;
                    v158 = v731[1];
                    v159 = v152[1];
                    v160 = (llvm::MachineFunction *)v150[4];
                    __dst.__r_.__value_.__r.__words[0] = 0;
                    v161 = *((_QWORD *)v160 + 28);
                    if (v161)
                    {
                      *((_QWORD *)v160 + 28) = *(_QWORD *)v161;
                      v767 = 0;
                    }
                    else
                    {
                      v161 = sub_1C484358C((uint64_t)v160 + 128, 72, 3);
                      v767 = (unsigned __int8 *)__dst.__r_.__value_.__r.__words[0];
                      if (__dst.__r_.__value_.__r.__words[0])
                      {
                        llvm::MetadataTracking::retrack((uint64_t)&__dst, (unsigned __int8 *)__dst.__r_.__value_.__l.__data_, (uint64_t)&v767);
                        __dst.__r_.__value_.__r.__words[0] = 0;
                      }
                    }
                    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v161, v160, v158 + 912, &v767, 0);
                    if (v767)
                      llvm::MetadataTracking::untrack((uint64_t)&v767, v767);
                    if (__dst.__r_.__value_.__r.__words[0])
                      llvm::MetadataTracking::untrack((uint64_t)&__dst, (unsigned __int8 *)__dst.__r_.__value_.__l.__data_);
                    v167 = v150[5];
                    *(_QWORD *)(v161 + 24) = v167;
                    v168 = *(_QWORD *)(v167 + 32);
                    v169 = *(unsigned int *)(v161 + 40);
                    if ((_DWORD)v169)
                    {
                      v172 = *(_QWORD *)(v161 + 32);
                      v173 = *(_QWORD *)(v168 + 40);
                      v174 = 32 * v169;
                      do
                      {
                        if (!*(_BYTE *)v172)
                        {
                          v175 = *(unsigned int *)(v172 + 4);
                          if ((int)v175 >= 0)
                            v176 = (uint64_t *)(*(_QWORD *)(v173 + 272) + 8 * v175);
                          else
                            v176 = (uint64_t *)(*(_QWORD *)(v173 + 24) + 16 * (v175 & 0x7FFFFFFF) + 8);
                          v177 = *v176;
                          if (*v176)
                          {
                            v178 = *(_QWORD *)(v177 + 16);
                            *(_QWORD *)(v177 + 16) = v172;
                            *(_QWORD *)(v172 + 16) = v178;
                            if ((*(_BYTE *)(v172 + 3) & 1) != 0)
                            {
                              *(_QWORD *)(v172 + 24) = v177;
                            }
                            else
                            {
                              *(_QWORD *)(v172 + 24) = 0;
                              v176 = (uint64_t *)(v178 + 24);
                            }
                          }
                          else
                          {
                            *(_QWORD *)(v172 + 16) = v172;
                            *(_QWORD *)(v172 + 24) = 0;
                          }
                          *v176 = v172;
                        }
                        v172 += 32;
                        v174 -= 32;
                      }
                      while (v174);
                    }
                    v170 = *(_QWORD *)(v168 + 728);
                    if (v170)
                      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v170 + 24))(v170, v161);
                    v171 = *v156 & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v161 = v171 | *(_QWORD *)v161 & 7;
                    *(_QWORD *)(v161 + 8) = v156;
                    *(_QWORD *)(v171 + 8) = v161;
                    *v156 = *v156 & 7 | v161;
                    v768 = 0;
                    v769 = 0;
                    v770 = 0;
                    HIDWORD(v767) = v159;
                    LODWORD(v767) = 0x1000000;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v161, v160, (const llvm::MachineOperand *)&v767);
                    v768 = 0;
                    v769 = 0;
                    v770 = 0;
                    HIDWORD(v767) = v157;
                    LODWORD(v767) = 0x4000000;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v161, v160, (const llvm::MachineOperand *)&v767);
                    if (v747)
                      llvm::MetadataTracking::untrack((uint64_t)&v747, (unsigned __int8 *)v747);
                  }
                  else
                  {
                    v162 = *(uint64_t ***)(v721 + 240);
                    v163 = *(uint64_t ***)(v721 + 248);
                    if (v162 == v163)
                    {
                      v164 = 0;
                    }
                    else
                    {
                      v164 = 0;
                      v165 = v157 >> 3;
                      do
                      {
                        if ((v157 - 0x40000000) >= 0xC0000001)
                        {
                          v166 = **v162;
                          if (v165 < *(unsigned __int16 *)(v166 + 22)
                            && ((1 << (v157 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v166 + 8) + v165)) != 0
                            && (!v164
                             || *v162 != v164
                             && ((*(_DWORD *)(v164[1] + ((*(unsigned __int16 *)(v166 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v166 + 24)) & 1) != 0))
                          {
                            v164 = *v162;
                          }
                        }
                        ++v162;
                      }
                      while (v162 != v163);
                    }
                    (*(void (**)(_QWORD *, _QWORD *, unint64_t *, _QWORD, uint64_t, _QWORD, uint64_t *, uint64_t))(*v731 + 448))(v731, v150, v156, *v152, 1, v152[1], v164, v721);
                  }
                  v152 += 3;
                }
                while (v152 != v725);
              }
              a1 = v736;
              for (m = v150[7]; (unint64_t *)m != v156; m = *(_QWORD *)(m + 8))
              {
                v180 = *(_WORD *)(m + 44);
                *(_WORD *)(m + 44) = v180 | 1;
                if ((*(_BYTE *)m & 4) == 0 && (v180 & 8) != 0)
                {
                  do
                    m = *(_QWORD *)(m + 8);
                  while ((*(_WORD *)(m + 44) & 8) != 0);
                }
              }
            }
            v149 = v713 + 8;
          }
          while (v713 + 8 != v711);
        }
        v181 = (_QWORD *)v717[7];
        v767 = (unsigned __int8 *)&v771;
        v768 = (uint64_t)&v771;
        v769 = 8;
        LODWORD(v770) = 0;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst.__r_.__value_.__r.__words[2];
        __dst.__r_.__value_.__l.__size_ = 0x800000000;
        v182 = v717[41];
        if (v181[82])
          v183 = v181[82];
        else
          v183 = v717[41];
        if (v182 != v183)
        {
          __dst.__r_.__value_.__r.__words[2] = v717[41];
          LODWORD(__dst.__r_.__value_.__r.__words[1]) = 1;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v767, v182);
        }
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v767, v183);
        v184 = v181[83];
        v185 = __dst.__r_.__value_.__r.__words[1];
        if (v184)
        {
          if (LODWORD(__dst.__r_.__value_.__r.__words[1]) >= HIDWORD(__dst.__r_.__value_.__r.__words[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)&__dst.__r_.__value_.__r.__words[2], LODWORD(__dst.__r_.__value_.__r.__words[1]) + 1, 8);
            v185 = __dst.__r_.__value_.__r.__words[1];
          }
          *(_QWORD *)(__dst.__r_.__value_.__r.__words[0] + 8 * v185) = v184;
          v185 = ++LODWORD(__dst.__r_.__value_.__r.__words[1]);
        }
        while (v185)
        {
          v186 = *(_QWORD *)(__dst.__r_.__value_.__r.__words[0] + 8 * v185-- - 8);
          LODWORD(__dst.__r_.__value_.__r.__words[1]) = v185;
          if (v183 == v184 || v186 != v183)
          {
            v187 = *(uint64_t **)(v186 + 88);
            v188 = *(uint64_t **)(v186 + 96);
            if (v187 != v188)
            {
              do
              {
                v189 = *v187;
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v767, *v187);
                if (v190)
                {
                  v191 = LODWORD(__dst.__r_.__value_.__r.__words[1]);
                  if (LODWORD(__dst.__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(__dst.__r_.__value_.__r.__words[1]))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)&__dst.__r_.__value_.__r.__words[2], LODWORD(__dst.__r_.__value_.__r.__words[1]) + 1, 8);
                    v191 = LODWORD(__dst.__r_.__value_.__r.__words[1]);
                  }
                  *(_QWORD *)(__dst.__r_.__value_.__r.__words[0] + 8 * v191) = v189;
                  ++LODWORD(__dst.__r_.__value_.__r.__words[1]);
                }
                ++v187;
              }
              while (v187 != v188);
              v185 = __dst.__r_.__value_.__r.__words[1];
            }
          }
        }
        v192 = (unsigned int *)v181[10];
        v739 = (unsigned int *)v181[11];
        if (v192 != v739)
        {
          v732 = v717[5];
          do
          {
            if ((unsigned __int8 *)v768 == v767)
              v193 = (uint64_t *)((char *)&v769 + 4);
            else
              v193 = &v769;
            v194 = *(unsigned int *)v193;
            if ((_DWORD)v194)
            {
              v195 = 8 * v194;
              v196 = (unint64_t *)v768;
              while (*v196 >= 0xFFFFFFFFFFFFFFFELL)
              {
                ++v196;
                v195 -= 8;
                if (!v195)
                  goto LABEL_346;
              }
            }
            else
            {
              v196 = (unint64_t *)v768;
            }
            v197 = (unint64_t *)(v768 + 8 * v194);
            if (v196 != v197)
            {
              v198 = (_QWORD *)*v196;
              while (1)
              {
                if (((*(_QWORD *)(*(_QWORD *)(v732 + 352) + (((unint64_t)*v192 >> 3) & 0x1FF8)) >> *v192) & 1) == 0)
                {
                  v199 = (unsigned __int16)*v192;
                  v200 = (unsigned __int16 *)v198[19];
                  v201 = (unsigned __int16 *)v198[20];
                  if (v200 == v201)
                    goto LABEL_321;
                  v202 = (unsigned __int16 *)v198[19];
                  while (*v202 != v199)
                  {
                    v202 += 8;
                    if (v202 == v201)
                      goto LABEL_321;
                  }
                  if (!*((_QWORD *)v202 + 1))
                  {
LABEL_321:
                    v203 = v198[21];
                    if ((unint64_t)v201 >= v203)
                    {
                      v205 = ((char *)v201 - (char *)v200) >> 4;
                      v206 = v205 + 1;
                      if ((unint64_t)(v205 + 1) >> 60)
                        goto LABEL_844;
                      v207 = v203 - (_QWORD)v200;
                      if (v207 >> 3 > v206)
                        v206 = v207 >> 3;
                      if ((unint64_t)v207 >= 0x7FFFFFFFFFFFFFF0)
                        v206 = 0xFFFFFFFFFFFFFFFLL;
                      v726 = v206;
                      if (v206)
                      {
                        if (v206 >> 60)
                          goto LABEL_1183;
                        v208 = (char *)operator new(16 * v206);
                      }
                      else
                      {
                        v208 = 0;
                      }
                      v209 = &v208[16 * v205];
                      *(_WORD *)v209 = v199;
                      *((_QWORD *)v209 + 1) = -1;
                      v210 = v209;
                      if (v200 == v201)
                      {
                        v211 = v726;
                      }
                      else
                      {
                        v211 = v726;
                        do
                        {
                          *((_OWORD *)v210 - 1) = *((_OWORD *)v201 - 1);
                          v210 -= 16;
                          v201 -= 8;
                        }
                        while (v201 != v200);
                        v200 = (unsigned __int16 *)v198[19];
                      }
                      v204 = v209 + 16;
                      v198[19] = v210;
                      v198[20] = v209 + 16;
                      v198[21] = &v208[16 * v211];
                      if (v200)
                        operator delete(v200);
                    }
                    else
                    {
                      *v201 = v199;
                      *((_QWORD *)v201 + 1) = -1;
                      v204 = (char *)(v201 + 8);
                    }
                    v198[20] = v204;
                  }
                }
                v212 = v196 + 1;
                a1 = v736;
                do
                {
                  if (v212 == v197)
                    goto LABEL_346;
                  v213 = *v212++;
                  v198 = (_QWORD *)v213;
                }
                while (v213 > 0xFFFFFFFFFFFFFFFDLL);
                v196 = v212 - 1;
              }
            }
LABEL_346:
            if (*((_BYTE *)v192 + 9))
            {
              for (n = (uint64_t *)v717[41]; n != v717 + 40; n = (uint64_t *)n[1])
              {
                v215 = sub_1C477672C((uint64_t)&v767, (uint64_t)n);
                if ((unsigned __int8 *)v768 == v767)
                  v216 = (uint64_t *)((char *)&v769 + 4);
                else
                  v216 = &v769;
                if (v215 == (_QWORD *)(v768 + 8 * *(unsigned int *)v216))
                {
                  v217 = v192[1];
                  v218 = (unsigned __int16 *)n[19];
                  v219 = (unsigned __int16 *)n[20];
                  if (v218 == v219)
                    goto LABEL_357;
                  v220 = (unsigned __int16 *)n[19];
                  while (*v220 != (unsigned __int16)v217)
                  {
                    v220 += 8;
                    if (v220 == v219)
                      goto LABEL_357;
                  }
                  if (!*((_QWORD *)v220 + 1))
                  {
LABEL_357:
                    v221 = n[21];
                    if ((unint64_t)v219 >= v221)
                    {
                      v223 = ((char *)v219 - (char *)v218) >> 4;
                      v224 = v223 + 1;
                      if ((unint64_t)(v223 + 1) >> 60)
                        goto LABEL_844;
                      v225 = v221 - (_QWORD)v218;
                      if (v225 >> 3 > v224)
                        v224 = v225 >> 3;
                      if ((unint64_t)v225 >= 0x7FFFFFFFFFFFFFF0)
                        v226 = 0xFFFFFFFFFFFFFFFLL;
                      else
                        v226 = v224;
                      if (v226)
                      {
                        if (v226 >> 60)
                          goto LABEL_1183;
                        v227 = (char *)operator new(16 * v226);
                      }
                      else
                      {
                        v227 = 0;
                      }
                      v228 = &v227[16 * v223];
                      *(_WORD *)v228 = v217;
                      *((_QWORD *)v228 + 1) = -1;
                      v229 = v228;
                      if (v218 != v219)
                      {
                        do
                        {
                          *((_OWORD *)v229 - 1) = *((_OWORD *)v219 - 1);
                          v229 -= 16;
                          v219 -= 8;
                        }
                        while (v219 != v218);
                        v218 = (unsigned __int16 *)n[19];
                      }
                      v230 = &v227[16 * v226];
                      v222 = v228 + 16;
                      n[19] = (uint64_t)v229;
                      n[20] = (uint64_t)(v228 + 16);
                      n[21] = (uint64_t)v230;
                      if (v218)
                        operator delete(v218);
                    }
                    else
                    {
                      *v219 = v217;
                      *((_QWORD *)v219 + 1) = -1;
                      v222 = (char *)(v219 + 8);
                    }
                    n[20] = (uint64_t)v222;
                  }
                }
              }
            }
            v192 += 3;
          }
          while (v192 != v739);
        }
        if ((std::string::size_type *)__dst.__r_.__value_.__l.__data_ != &__dst.__r_.__value_.__r.__words[2])
          free(__dst.__r_.__value_.__l.__data_);
        if ((unsigned __int8 *)v768 != v767)
          free((void *)v768);
        v231 = *(unsigned int *)(a1 + 320);
        if ((_DWORD)v231)
        {
          v232 = *(llvm::MachineBasicBlock ***)(a1 + 312);
          v712 = &v232[v231];
          do
          {
            v714 = v232;
            v233 = *v232;
            v234 = *((_QWORD *)*v232 + 4);
            v733 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v234 + 16) + 104))(*(_QWORD *)(v234 + 16));
            v235 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v234 + 16) + 112))(*(_QWORD *)(v234 + 16));
            v236 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v234 + 16) + 176))(*(_QWORD *)(v234 + 16));
            FirstTerminator = (_QWORD *)llvm::MachineBasicBlock::getFirstTerminator(v233);
            v740 = v233;
            if (((*(uint64_t (**)(uint64_t, llvm::MachineBasicBlock *, _QWORD *))(*(_QWORD *)v235 + 184))(v235, v233, FirstTerminator) & 1) == 0)
            {
              v238 = *(_QWORD *)(v716 + 88);
              v727 = *(_QWORD *)(v716 + 80);
              if (v238 != v727)
              {
                v239 = *(_QWORD *)(v716 + 88);
                do
                {
                  v241 = *(_DWORD *)(v239 - 12);
                  v239 -= 12;
                  v240 = v241;
                  if (*(_BYTE *)(v239 + 9))
                  {
                    v747 = 0;
                    v242 = v733[1];
                    v243 = (llvm::MachineFunction *)*((_QWORD *)v740 + 4);
                    __dst.__r_.__value_.__r.__words[0] = 0;
                    v244 = *((_QWORD *)v243 + 28);
                    if (v244)
                    {
                      *((_QWORD *)v243 + 28) = *(_QWORD *)v244;
                      v767 = 0;
                    }
                    else
                    {
                      v244 = sub_1C484358C((uint64_t)v243 + 128, 72, 3);
                      v767 = (unsigned __int8 *)__dst.__r_.__value_.__r.__words[0];
                      if (__dst.__r_.__value_.__r.__words[0])
                      {
                        llvm::MetadataTracking::retrack((uint64_t)&__dst, (unsigned __int8 *)__dst.__r_.__value_.__l.__data_, (uint64_t)&v767);
                        __dst.__r_.__value_.__r.__words[0] = 0;
                      }
                    }
                    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v244, v243, v242 + 912, &v767, 0);
                    if (v767)
                      llvm::MetadataTracking::untrack((uint64_t)&v767, v767);
                    if (__dst.__r_.__value_.__r.__words[0])
                      llvm::MetadataTracking::untrack((uint64_t)&__dst, (unsigned __int8 *)__dst.__r_.__value_.__l.__data_);
                    v250 = *((_QWORD *)v740 + 5);
                    *(_QWORD *)(v244 + 24) = v250;
                    v251 = *(_QWORD *)(v250 + 32);
                    v252 = *(unsigned int *)(v244 + 40);
                    if ((_DWORD)v252)
                    {
                      v256 = *(_QWORD *)(v244 + 32);
                      v257 = *(_QWORD *)(v251 + 40);
                      v258 = 32 * v252;
                      do
                      {
                        if (!*(_BYTE *)v256)
                        {
                          v259 = *(unsigned int *)(v256 + 4);
                          if ((int)v259 >= 0)
                            v260 = (uint64_t *)(*(_QWORD *)(v257 + 272) + 8 * v259);
                          else
                            v260 = (uint64_t *)(*(_QWORD *)(v257 + 24) + 16 * (v259 & 0x7FFFFFFF) + 8);
                          v261 = *v260;
                          if (*v260)
                          {
                            v262 = *(_QWORD *)(v261 + 16);
                            *(_QWORD *)(v261 + 16) = v256;
                            *(_QWORD *)(v256 + 16) = v262;
                            if ((*(_BYTE *)(v256 + 3) & 1) != 0)
                            {
                              *(_QWORD *)(v256 + 24) = v261;
                            }
                            else
                            {
                              *(_QWORD *)(v256 + 24) = 0;
                              v260 = (uint64_t *)(v262 + 24);
                            }
                          }
                          else
                          {
                            *(_QWORD *)(v256 + 16) = v256;
                            *(_QWORD *)(v256 + 24) = 0;
                          }
                          *v260 = v256;
                        }
                        v256 += 32;
                        v258 -= 32;
                      }
                      while (v258);
                    }
                    v253 = *(_QWORD *)(v251 + 728);
                    if (v253)
                      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v253 + 24))(v253, v244);
                    v254 = *FirstTerminator & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v244 = v254 | *(_QWORD *)v244 & 7;
                    *(_QWORD *)(v244 + 8) = FirstTerminator;
                    *(_QWORD *)(v254 + 8) = v244;
                    *FirstTerminator = *FirstTerminator & 7 | v244;
                    v768 = 0;
                    v769 = 0;
                    v770 = 0;
                    HIDWORD(v767) = v240;
                    LODWORD(v767) = 0x1000000;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v244, v243, (const llvm::MachineOperand *)&v767);
                    v255 = *(_DWORD *)(v238 - 8);
                    v768 = 0;
                    v769 = 0;
                    v770 = 0;
                    HIDWORD(v767) = v255;
                    LODWORD(v767) = 0x4000000;
                    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v244, v243, (const llvm::MachineOperand *)&v767);
                    if (v747)
                      llvm::MetadataTracking::untrack((uint64_t)&v747, (unsigned __int8 *)v747);
                    a1 = v736;
                  }
                  else
                  {
                    v245 = *(uint64_t ***)(v236 + 240);
                    v246 = *(uint64_t ***)(v236 + 248);
                    if (v245 == v246)
                    {
                      v247 = 0;
                    }
                    else
                    {
                      v247 = 0;
                      v248 = v240 >> 3;
                      do
                      {
                        if ((v240 - 0x40000000) >= 0xC0000001)
                        {
                          v249 = **v245;
                          if (v248 < *(unsigned __int16 *)(v249 + 22)
                            && ((1 << (v240 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v249 + 8) + v248)) != 0
                            && (!v247
                             || *v245 != v247
                             && ((*(_DWORD *)(v247[1] + ((*(unsigned __int16 *)(v249 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v249 + 24)) & 1) != 0))
                          {
                            v247 = *v245;
                          }
                        }
                        ++v245;
                      }
                      while (v245 != v246);
                    }
                    (*(void (**)(_QWORD *, llvm::MachineBasicBlock *, _QWORD *, unint64_t, _QWORD, uint64_t *, uint64_t))(*v733 + 464))(v733, v740, FirstTerminator, v240, *(unsigned int *)(v238 - 8), v247, v236);
                  }
                  v238 = v239;
                }
                while (v239 != v727);
              }
            }
            v232 = v714 + 1;
          }
          while (v714 + 1 != v712);
        }
      }
    }
    if ((std::string::size_type *)v754.__r_.__value_.__l.__data_ != &v754.__r_.__value_.__r.__words[2])
      free(v754.__r_.__value_.__l.__data_);
    v91 = v717;
  }
  (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v710 + 272))(v710, v91, *(_QWORD *)(a1 + 248));
  v263 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v91[2] + 112))(v91[2]);
  v264 = v263;
  v265 = *((_DWORD *)v263 + 2);
  v266 = v91[7];
  v267 = *((_DWORD *)v263 + 4);
  if (v265 == 1)
    v267 = -v267;
  v268 = v267;
  v734 = (*(uint64_t (**)(unsigned __int8 *, uint64_t *))(*(_QWORD *)v263 + 16))(v263, v91);
  v269 = *(_DWORD *)(v266 + 32);
  if (v269)
  {
    v270 = *(uint64_t **)(v266 + 8);
    v271 = -v269 + 1;
    v272 = v268;
    do
    {
      if (!*((_BYTE *)v270 + 20))
      {
        v273 = *v270;
        v274 = v265 == 1 ? -v273 : v270[1] + v273;
        if (v274 > v272)
          v272 = v274;
      }
      v275 = v271++;
      v270 += 5;
    }
    while (v275);
  }
  else
  {
    v272 = v268;
  }
  v276 = *(_BYTE *)(v266 + 60);
  v277 = *(_DWORD *)(a1 + 260);
  v278 = *(_DWORD *)(a1 + 256);
  if (v277 >= v278)
  {
    v303 = *(_QWORD *)(v266 + 8);
    v304 = v278 - 1;
    do
    {
      if (v265 == 1)
        v305 = v278;
      else
        v305 = v277;
      v306 = v305 + v269;
      if (!*(_BYTE *)(v303 + 40 * v306 + 20))
      {
        v307 = *(_QWORD *)(v303 + 40 * v306 + 8);
        if (v265 == 1)
        {
          v272 += v307;
LABEL_484:
          v308 = *(unsigned __int8 *)(v303 + 40 * v306 + 16);
          if (v276 <= v308)
            v276 = *(_BYTE *)(v303 + 40 * v306 + 16);
          v272 = (((1 << v308) + v272 + ~(unint64_t)(((1 << v308) - 1) & v734)) & -(1 << v308))
               + (((1 << v308) - 1) & v734);
          if (v265 == 1)
          {
            *(_QWORD *)(v303 + 40 * v306) = -v272;
          }
          else
          {
            *(_QWORD *)(v303 + 40 * v306) = v272;
            v272 += v307;
          }
          goto LABEL_479;
        }
        if (v307 != -1)
          goto LABEL_484;
      }
LABEL_479:
      --v277;
      ++v278;
    }
    while (v304 != v277);
  }
  v279 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v717[2] + 176))(v717[2]);
  v280 = (*(uint64_t (**)(unsigned __int8 *, uint64_t *))(*(_QWORD *)v264 + 32))(v264, v717);
  v281 = *(_QWORD *)(a1 + 248);
  v715 = v268;
  v722 = v280;
  v705 = v272;
  v707 = v279;
  if (v281 && v280)
  {
    v767 = (unsigned __int8 *)&v769;
    v768 = 0x200000000;
    sub_1C520AD94(*(_DWORD **)(v281 + 48), *(_DWORD *)(v281 + 56), (uint64_t)&v767);
    v282 = v767;
    if ((_DWORD)v768)
    {
      v283 = *(_DWORD *)(v266 + 32);
      v284 = 4 * v768;
      v285 = v767;
      do
      {
        v286 = *(_DWORD *)v285;
        if (v265 == 1)
        {
          v287 = v283 + v286;
          v288 = *(_QWORD *)(v266 + 8);
          v272 += *(_QWORD *)(v288 + 40 * (v283 + v286) + 8);
        }
        else
        {
          v288 = *(_QWORD *)(v266 + 8);
          v287 = v283 + v286;
        }
        v289 = *(unsigned __int8 *)(v288 + 40 * v287 + 16);
        if (v276 <= v289)
          v276 = v289;
        v272 = (((1 << v289) + v272 + ~(unint64_t)(((1 << v289) - 1) & v734)) & -(1 << v289))
             + (((1 << v289) - 1) & v734);
        if (v265 == 1)
        {
          *(_QWORD *)(v288 + 40 * (v283 + v286)) = -v272;
        }
        else
        {
          v290 = (int64_t *)(v288 + 40 * (v283 + v286));
          *v290 = v272;
          v272 += v290[1];
        }
        v285 += 4;
        v284 -= 4;
      }
      while (v284);
    }
    if (v282 != (unsigned __int8 *)&v769)
      free(v282);
  }
  v291 = *(unsigned __int8 *)(v266 + 649);
  if (*(_BYTE *)(v266 + 649))
  {
    v292 = *(unsigned __int8 *)(v266 + 648);
    v293 = ((1 << v292) - 1) & v734;
    v294 = (((1 << v292) + v272 + ~v293) & -(1 << v292)) + v293;
    v295 = *(_DWORD *)(v266 + 120);
    if (v295)
    {
      v296 = 0;
      v297 = *(_QWORD *)(v266 + 112);
      if (v265 == 1)
        v298 = -v294;
      else
        v298 = v294;
      v299 = *(_DWORD *)(v266 + 32);
      v300 = *(_QWORD *)(v266 + 8);
      do
      {
        *(_QWORD *)(v300 + 40 * (v299 + *(_DWORD *)(v297 + 16 * v296))) = *(_QWORD *)(v297 + 16 * v296 + 8)
                                                                                          + v298;
        ++v296;
      }
      while (v295 != v296);
    }
    v272 = *(_QWORD *)(v266 + 640) + v294;
    if (v292 > v276)
      v276 = v292;
  }
  v301 = v717[12];
  if (v301)
    v302 = *(_DWORD *)(v301 + 680);
  else
    v302 = 0x7FFFFFFF;
  v741 = v302;
  v767 = (unsigned __int8 *)&v769;
  v768 = 0x1000000000;
  v779[0] = 0;
  v778 = 0;
  v777 = &v778;
  v309 = *(_DWORD *)(v266 + 64);
  v728 = v264;
  if (v309 != -1)
  {
    if (v291)
    {
      v310 = *(_QWORD *)(v266 + 8);
      if (*(_BYTE *)(v310 + 40 * (*(_DWORD *)(v266 + 32) + v309) + 32))
      {
        a1 = v736;
        goto LABEL_578;
      }
    }
    else
    {
      v310 = *(_QWORD *)(v266 + 8);
    }
    __dst.__r_.__value_.__r.__words[0] = 1;
    memset_pattern16(&__dst.__r_.__value_.__r.__words[1], &unk_1C6613B70, 0x20uLL);
    v761 = (int *)&v762 + 2;
    *(_QWORD *)&v762 = 0x800000000;
    v754.__r_.__value_.__r.__words[0] = 1;
    memset_pattern16(&v754.__r_.__value_.__r.__words[1], &unk_1C6613B70, 0x20uLL);
    v756 = (int *)&v757 + 2;
    *(_QWORD *)&v757 = 0x800000000;
    v747 = 1;
    memset_pattern16(&v748, &unk_1C6613B70, 0x20uLL);
    v750 = (int *)&v752;
    v751 = 0x800000000;
    v311 = *(_DWORD *)(v266 + 32);
    v312 = v311 + v309;
    if (!*(_BYTE *)(v310 + 40 * (v311 + v309) + 20) && !v291)
    {
      if (v265 == 1)
        v272 += *(_QWORD *)(v310 + 40 * v312 + 8);
      v313 = *(unsigned __int8 *)(v310 + 40 * v312 + 16);
      if (v276 <= v313)
        v276 = *(_BYTE *)(v310 + 40 * v312 + 16);
      v272 = (((1 << v313) + v272 + ~(unint64_t)(((1 << v313) - 1) & v734)) & -(1 << v313))
           + (((1 << v313) - 1) & v734);
      if (v265 == 1)
      {
        *(_QWORD *)(v310 + 40 * v312) = -v272;
      }
      else
      {
        v314 = (int64_t *)(v310 + 40 * v312);
        *v314 = v272;
        v272 += v314[1];
      }
    }
    v315 = -858993459 * ((unint64_t)(*(_QWORD *)(v266 + 16) - v310) >> 3);
    if (v311 != v315)
    {
      v316 = 0;
      v317 = v315 - v311;
      do
      {
        v318 = *(_DWORD *)(v266 + 32) + v316;
        v319 = *(_QWORD *)(v266 + 8);
        if ((!*(_BYTE *)(v319 + 40 * v318 + 32) || !*(_BYTE *)(v266 + 649))
          && (v316 < *(_DWORD *)(v736 + 256) || v316 > *(_DWORD *)(v736 + 260)))
        {
          v320 = *(_QWORD *)(v736 + 248);
          if (v320 && (v321 = *(unsigned int *)(v320 + 56), (_DWORD)v321))
          {
            v322 = *(_DWORD **)(v320 + 48);
            v323 = 16 * v321;
            while (*v322 != v316)
            {
              v322 += 4;
              v323 -= 16;
              if (!v323)
                goto LABEL_516;
            }
          }
          else
          {
LABEL_516:
            if (v309 != v316
              && *(_QWORD *)(v319 + 40 * v318 + 8) != -1
              && v741 != v316
              && !*(_BYTE *)(v319 + 40 * v318 + 20))
            {
              v325 = *(unsigned __int8 *)(v319 + 40 * v318 + 36);
              if (v325)
              {
                if (v325 == 1)
                {
                  v743 = v316;
                  p_dst = &__dst;
                }
                else
                {
                  v743 = v316;
                  if (v325 == 3)
                    p_dst = (std::string *)&v747;
                  else
                    p_dst = &v754;
                }
                sub_1C61E8B34((uint64_t)p_dst, (int *)&v743);
              }
            }
          }
        }
        ++v316;
      }
      while (v316 != v317);
      if (!*(_BYTE *)(v266 + 649) && (_DWORD)v762)
      {
        v327 = v761;
        v328 = 4 * v762;
        do
        {
          v743 = 0;
          v329 = *v327;
          v743 = *v327;
          v330 = *(_DWORD *)(v266 + 32);
          if (v265 == 1)
          {
            v331 = v330 + v329;
            v332 = *(_QWORD *)(v266 + 8);
            v272 += *(_QWORD *)(v332 + 40 * (v330 + v329) + 8);
          }
          else
          {
            v332 = *(_QWORD *)(v266 + 8);
            v331 = v330 + v329;
          }
          v333 = *(unsigned __int8 *)(v332 + 40 * v331 + 16);
          if (v276 <= v333)
            v276 = v333;
          v272 = (((1 << v333) + v272 + ~(unint64_t)(((1 << v333) - 1) & v734)) & -(1 << v333))
               + (((1 << v333) - 1) & v734);
          if (v265 == 1)
          {
            *(_QWORD *)(v332 + 40 * (v330 + v329)) = -v272;
          }
          else
          {
            v334 = (int64_t *)(v332 + 40 * (v330 + v329));
            *v334 = v272;
            v272 += v334[1];
          }
          sub_1C49913E0((uint64_t)&v767, (int *)&v743);
          ++v327;
          v328 -= 4;
        }
        while (v328);
      }
    }
    if ((_DWORD)v757)
    {
      v335 = v756;
      v336 = 4 * v757;
      do
      {
        v743 = 0;
        v337 = *v335;
        v743 = *v335;
        v338 = *(_DWORD *)(v266 + 32);
        if (v265 == 1)
        {
          v339 = v338 + v337;
          v340 = *(_QWORD *)(v266 + 8);
          v272 += *(_QWORD *)(v340 + 40 * (v338 + v337) + 8);
        }
        else
        {
          v340 = *(_QWORD *)(v266 + 8);
          v339 = v338 + v337;
        }
        v341 = *(unsigned __int8 *)(v340 + 40 * v339 + 16);
        if (v276 <= v341)
          v276 = v341;
        v272 = (((1 << v341) + v272 + ~(unint64_t)(((1 << v341) - 1) & v734)) & -(1 << v341))
             + (((1 << v341) - 1) & v734);
        if (v265 == 1)
        {
          *(_QWORD *)(v340 + 40 * (v338 + v337)) = -v272;
        }
        else
        {
          v342 = (int64_t *)(v340 + 40 * (v338 + v337));
          *v342 = v272;
          v272 += v342[1];
        }
        sub_1C49913E0((uint64_t)&v767, (int *)&v743);
        ++v335;
        v336 -= 4;
      }
      while (v336);
    }
    v343 = v750;
    if ((_DWORD)v751)
    {
      v344 = 4 * v751;
      do
      {
        v743 = 0;
        v345 = *v343;
        v743 = *v343;
        v346 = *(_DWORD *)(v266 + 32);
        if (v265 == 1)
        {
          v347 = v346 + v345;
          v348 = *(_QWORD *)(v266 + 8);
          v272 += *(_QWORD *)(v348 + 40 * (v346 + v345) + 8);
        }
        else
        {
          v348 = *(_QWORD *)(v266 + 8);
          v347 = v346 + v345;
        }
        v349 = *(unsigned __int8 *)(v348 + 40 * v347 + 16);
        if (v276 <= v349)
          v276 = v349;
        v272 = (((1 << v349) + v272 + ~(unint64_t)(((1 << v349) - 1) & v734)) & -(1 << v349))
             + (((1 << v349) - 1) & v734);
        if (v265 == 1)
        {
          *(_QWORD *)(v348 + 40 * (v346 + v345)) = -v272;
        }
        else
        {
          v350 = (int64_t *)(v348 + 40 * (v346 + v345));
          *v350 = v272;
          v272 += v350[1];
        }
        sub_1C49913E0((uint64_t)&v767, (int *)&v743);
        ++v343;
        v344 -= 4;
      }
      while (v344);
      v343 = v750;
    }
    a1 = v736;
    if (v343 != (int *)&v752)
      free(v343);
    if ((v747 & 1) == 0)
      MEMORY[0x1CAA32FB4](v748, 4);
    if (v756 != (int *)((char *)&v757 + 8))
      free(v756);
    if ((v754.__r_.__value_.__s.__data_[0] & 1) == 0)
      MEMORY[0x1CAA32FB4](v754.__r_.__value_.__l.__size_, 4);
    if (v761 != (int *)((char *)&v762 + 8))
      free(v761);
    if ((__dst.__r_.__value_.__s.__data_[0] & 1) == 0)
      MEMORY[0x1CAA32FB4](__dst.__r_.__value_.__l.__size_, 4);
  }
LABEL_578:
  v747 = (uint64_t)v749;
  v748 = 0x800000000;
  v351 = -858993459 * ((*(_QWORD *)(v266 + 16) - *(_QWORD *)(v266 + 8)) >> 3);
  v352 = *(_DWORD *)(v266 + 32);
  v353 = v351 - v352;
  if (v351 != v352)
  {
    v354 = 0;
    v358 = 0;
    while (1)
    {
      v359 = *(_DWORD *)(v266 + 32) + v358;
      v360 = *(_QWORD *)(v266 + 8);
      if ((!*(_BYTE *)(v360 + 40 * v359 + 32) || !*(_BYTE *)(v266 + 649))
        && (v358 < *(_DWORD *)(a1 + 256) || v358 > *(_DWORD *)(a1 + 260)))
      {
        v361 = *(_QWORD *)(a1 + 248);
        if (v361)
        {
          v362 = *(unsigned int *)(v361 + 56);
          if ((_DWORD)v362)
          {
            v363 = *(_DWORD **)(v361 + 48);
            v364 = 16 * v362;
            while (*v363 != v358)
            {
              v363 += 4;
              v364 -= 16;
              if (!v364)
                goto LABEL_593;
            }
            goto LABEL_613;
          }
        }
LABEL_593:
        if (*(_QWORD *)(v360 + 40 * v359 + 8) != -1 && *(_DWORD *)(v266 + 64) != v358 && v741 != v358)
        {
          if (v779[0])
          {
            v365 = (_QWORD *)v778;
            if (v778)
            {
              do
              {
                v366 = *((_DWORD *)v365 + 7);
                if ((int)v358 >= v366)
                {
                  if (v366 >= (int)v358)
                    goto LABEL_613;
                  ++v365;
                }
                v365 = (_QWORD *)*v365;
              }
              while (v365);
            }
          }
          else if ((_DWORD)v768)
          {
            v367 = v767;
            v368 = 4 * v768;
            while (*(_DWORD *)v367 != v358)
            {
              v367 += 4;
              v368 -= 4;
              if (!v368)
                goto LABEL_609;
            }
            if (v368)
              goto LABEL_613;
          }
LABEL_609:
          if (!*(_BYTE *)(v360 + 40 * v359 + 20))
          {
            if (v354 >= HIDWORD(v748))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v747, (uint64_t)v749, v354 + 1, 4);
              v354 = v748;
            }
            *(_DWORD *)(v747 + 4 * v354) = v358;
            v354 = v748 + 1;
            LODWORD(v748) = v748 + 1;
          }
        }
      }
LABEL_613:
      if (++v358 == v353)
        goto LABEL_580;
    }
  }
  v354 = 0;
LABEL_580:
  if (v741 != 0x7FFFFFFF)
  {
    v355 = *(_DWORD *)(v266 + 32);
    if (v265 == 1)
    {
      v356 = v355 + v741;
      v357 = *(_QWORD *)(v266 + 8);
      v272 += *(_QWORD *)(v357 + 40 * (v355 + v741) + 8);
    }
    else
    {
      v357 = *(_QWORD *)(v266 + 8);
      v356 = v355 + v741;
    }
    v369 = *(unsigned __int8 *)(v357 + 40 * v356 + 16);
    if (v276 <= v369)
      v276 = v369;
    v272 = (((1 << v369) + v272 + ~(unint64_t)(((1 << v369) - 1) & v734)) & -(1 << v369))
         + (((1 << v369) - 1) & v734);
    if (v265 == 1)
    {
      *(_QWORD *)(v357 + 40 * (v355 + v741)) = -v272;
    }
    else
    {
      v370 = (int64_t *)(v357 + 40 * (v355 + v741));
      *v370 = v272;
      v272 += v370[1];
    }
  }
  v371 = v717[1];
  if (*(_DWORD *)(v371 + 552) && (*(_WORD *)(v371 + 1020) & 0x400) != 0)
  {
    (*(void (**)(unsigned __int8 *, uint64_t *, uint64_t *))(*(_QWORD *)v264 + 304))(v264, v717, &v747);
    v354 = v748;
  }
  v754.__r_.__value_.__r.__words[0] = (std::string::size_type)&v754.__r_.__value_.__r.__words[2];
  v754.__r_.__value_.__l.__size_ = 0x600000000;
  v758 = 0;
  if (!v354)
    goto LABEL_730;
  if (*(_DWORD *)(v717[1] + 552)
    && (*(_DWORD *)(v266 + 64) & 0x80000000) != 0
    && (*(unsigned int (**)(unsigned __int8 *, uint64_t *))(*(_QWORD *)v264 + 80))(v264, v717)
    && v705 <= 0x7FFFFFFF)
  {
    v372 = *(_DWORD *)(a1 + 256);
    v373 = *(_DWORD *)(a1 + 260);
    v374 = LODWORD(v754.__r_.__value_.__r.__words[1]);
    if ((v758 & 0x3F) != 0)
      *(_QWORD *)(v754.__r_.__value_.__r.__words[0] + 8 * LODWORD(v754.__r_.__value_.__r.__words[1]) - 8) |= -1 << (v758 & 0x3F);
    v375 = v374;
    v758 = v705;
    v376 = v705;
    v377 = v705 + 63;
    if ((_DWORD)v374 != (v705 + 63) >> 6)
    {
      v378 = v377 >> 6;
      if (v374 > v378)
      {
        LODWORD(v754.__r_.__value_.__r.__words[1]) = v377 >> 6;
        v375 = v377 >> 6;
      }
      else
      {
        v379 = v374;
        if (v378 > HIDWORD(v754.__r_.__value_.__r.__words[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v754, (uint64_t)&v754.__r_.__value_.__r.__words[2], v378, 8);
          v379 = LODWORD(v754.__r_.__value_.__r.__words[1]);
          v375 = v754.__r_.__value_.__r.__words[1];
        }
        if (v378 != v374)
          memset((void *)(v754.__r_.__value_.__r.__words[0] + 8 * v379), 255, 8 * (v378 - v374));
        v375 += v378 - v374;
        LODWORD(v754.__r_.__value_.__r.__words[1]) = v375;
        v376 = v758;
      }
    }
    if ((v376 & 0x3F) != 0)
      *(_QWORD *)(v754.__r_.__value_.__r.__words[0] + 8 * v375 - 8) &= ~(-1 << (v376 & 0x3F));
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst.__r_.__value_.__r.__words[2];
    __dst.__r_.__value_.__l.__size_ = 0x1000000000;
    v380 = *(_DWORD *)(v266 + 32);
    if (v380)
    {
      v381 = 0;
      v382 = -v380;
      do
      {
        if (!*(_BYTE *)(*(_QWORD *)(v266 + 8) + 40 * (v382 + *(_DWORD *)(v266 + 32)) + 20))
        {
          if (v381 >= HIDWORD(__dst.__r_.__value_.__r.__words[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)&__dst.__r_.__value_.__r.__words[2], v381 + 1, 4);
            v381 = __dst.__r_.__value_.__r.__words[1];
          }
          *(_DWORD *)(__dst.__r_.__value_.__r.__words[0] + 4 * v381) = v382;
          v381 = ++LODWORD(__dst.__r_.__value_.__r.__words[1]);
        }
      }
      while (!__CFADD__(v382++, 1));
    }
    else
    {
      v381 = 0;
    }
    if ((int)v372 <= (int)v373 && v372 <= v373)
    {
      do
      {
        if (!*(_BYTE *)(*(_QWORD *)(v266 + 8) + 40 * (v372 + *(_DWORD *)(v266 + 32)) + 20))
        {
          if (v381 >= HIDWORD(__dst.__r_.__value_.__r.__words[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)&__dst.__r_.__value_.__r.__words[2], v381 + 1, 4);
            v381 = __dst.__r_.__value_.__r.__words[1];
          }
          *(_DWORD *)(__dst.__r_.__value_.__r.__words[0] + 4 * v381) = v372;
          v381 = ++LODWORD(__dst.__r_.__value_.__r.__words[1]);
        }
        ++v372;
      }
      while (v373 + 1 != v372);
    }
    v385 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if (v381)
    {
      v386 = *(_DWORD *)(v266 + 32);
      v387 = *(_QWORD *)(v266 + 8);
      v388 = (_DWORD *)__dst.__r_.__value_.__r.__words[0];
      v389 = v754.__r_.__value_.__r.__words[0];
      v390 = __dst.__r_.__value_.__r.__words[0] + 4 * v381;
      do
      {
        v391 = (unsigned int *)(v387 + 40 * (*v388 + v386));
        v392 = *v391;
        v393 = v391[2];
        v394 = v393 + *v391;
        if (v265 == 1)
          v394 = -v392;
        if ((int)v394 < 1)
          goto LABEL_666;
        v395 = -v392 - v393;
        if (v265 != 1)
          v395 = v392;
        if (v395 == v394)
          goto LABEL_666;
        v396 = v395 >> 6;
        if (v395 >> 6 == v394 >> 6)
        {
          v397 = ~((1 << v394) + (-1 << v395));
        }
        else
        {
          *(_QWORD *)(v389 + 8 * v396) &= ~(-1 << v395);
          v398 = (v395 + 63) & 0xFFFFFFC0;
          if (v398 + 64 <= v394)
          {
            do
            {
              *(_QWORD *)(v389 + 8 * (v398 >> 6)) = 0;
              v399 = v398 + 64;
              v400 = v398 + 128;
              v398 += 64;
            }
            while (v400 <= v394);
          }
          else
          {
            v399 = (v395 + 63) & 0xFFFFFFC0;
          }
          if (v399 >= v394)
            goto LABEL_666;
          v397 = -1 << v394;
          v396 = v399 >> 6;
        }
        *(_QWORD *)(v389 + 8 * v396) &= v397;
LABEL_666:
        ++v388;
      }
      while (v388 != (_DWORD *)v390);
    }
    if (v385 != (std::string *)&__dst.__r_.__value_.__r.__words[2])
      free(v385);
  }
  if (!(_DWORD)v748)
    goto LABEL_730;
  v401 = (char *)v747;
  v402 = (char *)(v747 + 4 * v748);
  v403 = v734;
  v404 = *(_DWORD *)(v266 + 32);
  v405 = *(_QWORD *)(v266 + 8);
  do
  {
    v406 = *(_DWORD *)v401;
    v407 = *(_DWORD *)v401 + v404;
    v408 = *(_QWORD *)(v405 + 40 * v407 + 8);
    if (!v408)
      goto LABEL_684;
    if (!LODWORD(v754.__r_.__value_.__r.__words[1]))
    {
LABEL_683:
      v758 = 0;
      LODWORD(v754.__r_.__value_.__r.__words[1]) = 0;
LABEL_684:
      v412 = *(_DWORD *)v401;
      if (v265 == 1)
      {
        v413 = v404 + v412;
        v405 = *(_QWORD *)(v266 + 8);
        v272 += *(_QWORD *)(v405 + 40 * (v404 + v412) + 8);
      }
      else
      {
        v405 = *(_QWORD *)(v266 + 8);
        v413 = v404 + v412;
      }
      v414 = *(unsigned __int8 *)(v405 + 40 * v413 + 16);
      if (v276 <= v414)
        v276 = v414;
      v272 = (((1 << v414) + v272 + ~(unint64_t)(((1 << v414) - 1) & v403)) & -(1 << v414))
           + (((1 << v414) - 1) & v403);
      if (v265 == 1)
      {
        *(_QWORD *)(v405 + 40 * (v404 + v412)) = -v272;
      }
      else
      {
        v415 = (int64_t *)(v405 + 40 * (v404 + v412));
        *v415 = v272;
        v272 += v415[1];
      }
      goto LABEL_692;
    }
    v409 = (uint64_t *)v754.__r_.__value_.__r.__words[0];
    v410 = 8 * LODWORD(v754.__r_.__value_.__r.__words[1]);
    v411 = (_QWORD *)v754.__r_.__value_.__r.__words[0];
    while (!*v411)
    {
      ++v411;
      v410 -= 8;
      if (!v410)
        goto LABEL_683;
    }
    v416 = *(unsigned __int8 *)(v405 + 40 * v407 + 16);
    if (v416 > v276 || !v758)
      goto LABEL_684;
    v417 = 0;
    v418 = (v758 - 1) & 0xFFFFFFC0;
    while (1)
    {
      v420 = *v409++;
      v419 = v420;
      v421 = v418 + v417 ? -1 : 0xFFFFFFFFFFFFFFFFLL >> -(char)v758;
      v422 = v421 & v419;
      if (v422)
        break;
      v417 -= 64;
      if (v418 + v417 == -64)
        goto LABEL_684;
    }
    v423 = __clz(__rbit64(v422));
    if (v423 + 1 == (_DWORD)v417)
      goto LABEL_684;
    v424 = v423 - v417;
    v706 = (1 << v416) - 1;
    v702 = v403;
    v703 = -(1 << v416);
    while (1)
    {
      v425 = v265 == 1 ? v408 + v424 : v424;
      if (((v706 + v425) & v703) == v425)
        break;
LABEL_715:
      v424 = sub_1C476BA0C(&v754, v424 + 1, v758, 1u);
      if (v424 == -1)
      {
LABEL_716:
        v404 = *(_DWORD *)(v266 + 32);
        v403 = v702;
        goto LABEL_684;
      }
    }
    if (v408 + (int)v424 > v758)
      goto LABEL_716;
    if (v408 >= 1)
    {
      LODWORD(v426) = 0;
      while (((*(_QWORD *)(v754.__r_.__value_.__r.__words[0] + 8 * ((v424 + v426) >> 6)) >> (v424 + v426)) & 1) != 0)
      {
        v426 = (v426 + 1);
        if (v408 <= v426)
          goto LABEL_717;
      }
      goto LABEL_715;
    }
LABEL_717:
    if (v265 == 1)
    {
      v427 = v424 + v408;
      v404 = *(_DWORD *)(v266 + 32);
      v405 = *(_QWORD *)(v266 + 8);
      *(_QWORD *)(v405 + 40 * (v404 + v406)) = -(v424 + (_DWORD)v408);
    }
    else
    {
      v404 = *(_DWORD *)(v266 + 32);
      v405 = *(_QWORD *)(v266 + 8);
      *(_QWORD *)(v405 + 40 * (v404 + v406)) = (int)v424;
      v427 = v424 + v408;
    }
    v403 = v702;
    if ((_DWORD)v408)
    {
      v428 = v424 >> 6;
      if (v424 >> 6 == v427 >> 6)
      {
        v429 = ~((1 << v427) + (-1 << v424));
        v430 = (_QWORD *)(v754.__r_.__value_.__r.__words[0] + 8 * v428);
        goto LABEL_723;
      }
      v431 = v754.__r_.__value_.__r.__words[0];
      *(_QWORD *)(v754.__r_.__value_.__r.__words[0] + 8 * v428) &= ~(-1 << v424);
      v432 = (v424 + 63) & 0xFFFFFFC0;
      if (v432 + 64 <= v427)
      {
        do
        {
          *(_QWORD *)(v431 + 8 * (v432 >> 6)) = 0;
          v433 = v432 + 64;
          v434 = v432 + 128;
          v432 += 64;
        }
        while (v434 <= v427);
      }
      else
      {
        v433 = (v424 + 63) & 0xFFFFFFC0;
      }
      if (v433 < v427)
      {
        v429 = -1 << v427;
        v430 = (_QWORD *)(v431 + 8 * (v433 >> 6));
LABEL_723:
        *v430 &= v429;
      }
    }
LABEL_692:
    v401 += 4;
  }
  while (v401 != v402);
LABEL_730:
  v435 = v736;
  v436 = *(_QWORD *)(v736 + 248);
  v437 = v722;
  if (!v436)
    v437 = 1;
  if ((v437 & 1) != 0)
  {
    v438 = (llvm::MachineFunction *)v717;
    v439 = v728;
  }
  else
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst.__r_.__value_.__r.__words[2];
    __dst.__r_.__value_.__l.__size_ = 0x200000000;
    sub_1C520AD94(*(_DWORD **)(v436 + 48), *(_DWORD *)(v436 + 56), (uint64_t)&__dst);
    v440 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    v438 = (llvm::MachineFunction *)v717;
    v439 = v728;
    if (LODWORD(__dst.__r_.__value_.__r.__words[1]))
    {
      v441 = *(_DWORD *)(v266 + 32);
      v442 = 4 * LODWORD(__dst.__r_.__value_.__r.__words[1]);
      v443 = (int *)__dst.__r_.__value_.__r.__words[0];
      do
      {
        v444 = *v443;
        if (v265 == 1)
        {
          v445 = v441 + v444;
          v446 = *(_QWORD *)(v266 + 8);
          v272 += *(_QWORD *)(v446 + 40 * (v441 + v444) + 8);
        }
        else
        {
          v446 = *(_QWORD *)(v266 + 8);
          v445 = v441 + v444;
        }
        v447 = *(unsigned __int8 *)(v446 + 40 * v445 + 16);
        if (v276 <= v447)
          v276 = v447;
        v272 = (((1 << v447) + v272 + ~(unint64_t)(((1 << v447) - 1) & v734)) & -(1 << v447))
             + (((1 << v447) - 1) & v734);
        if (v265 == 1)
        {
          *(_QWORD *)(v446 + 40 * (v441 + v444)) = -v272;
        }
        else
        {
          v448 = (int64_t *)(v446 + 40 * (v441 + v444));
          *v448 = v272;
          v272 += v448[1];
        }
        ++v443;
        v442 -= 4;
      }
      while (v442);
    }
    if (v440 != (std::string *)&__dst.__r_.__value_.__r.__words[2])
      free(v440);
  }
  if (((*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v439 + 64))(v439) & 1) != 0)
  {
    v449 = v272;
    goto LABEL_749;
  }
  if (*(_BYTE *)(v266 + 61))
  {
    if ((*(unsigned int (**)(unsigned __int8 *, llvm::MachineFunction *))(*(_QWORD *)v439 + 208))(v439, v438))
    {
      LODWORD(v451) = *(_DWORD *)(v266 + 72);
      if ((_DWORD)v451 == -1)
        v451 = 0;
      else
        v451 = v451;
      v272 += v451;
    }
    if (*(_BYTE *)(v266 + 61))
      goto LABEL_758;
  }
  if (*(_BYTE *)(v266 + 36)
    || (*(unsigned int (**)(uint64_t, llvm::MachineFunction *))(*(_QWORD *)v707 + 440))(v707, v438)
    && (*(unsigned int (**)(uint64_t, llvm::MachineFunction *))(*(_QWORD *)v707 + 432))(v707, v438)
    && *(_DWORD *)(v266 + 32) != -858993459 * ((*(_QWORD *)(v266 + 16) - *(_QWORD *)(v266 + 8)) >> 3))
  {
LABEL_758:
    v452 = v439 + 12;
  }
  else
  {
    v452 = v439 + 13;
  }
  v453 = *v452;
  if (v453 <= v276)
    LOBYTE(v453) = v276;
  v449 = (((1 << v453) + v272 + ~(unint64_t)(((1 << v453) - 1) & v734)) & -(1 << v453))
       + (((1 << v453) - 1) & v734);
  if (v265 == 1)
  {
    v454 = v272 - v449;
    if (v272 == v449)
    {
      v450 = v715;
    }
    else
    {
      v455 = *(_QWORD *)(v736 + 248);
      v456 = v722;
      if (!v455)
        v456 = 1;
      v450 = v715;
      if ((v456 & 1) == 0)
      {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst.__r_.__value_.__r.__words[2];
        __dst.__r_.__value_.__l.__size_ = 0x200000000;
        sub_1C520AD94(*(_DWORD **)(v455 + 48), *(_DWORD *)(v455 + 56), (uint64_t)&__dst);
        v457 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if (LODWORD(__dst.__r_.__value_.__r.__words[1]))
        {
          v458 = *(_DWORD *)(v266 + 32);
          v459 = *(_QWORD *)(v266 + 8);
          v460 = 4 * LODWORD(__dst.__r_.__value_.__r.__words[1]);
          v461 = (int *)__dst.__r_.__value_.__r.__words[0];
          do
          {
            v462 = *v461++;
            *(_QWORD *)(v459 + 40 * (v462 + v458)) += v454;
            v460 -= 4;
          }
          while (v460);
        }
        if (v457 != (std::string *)&__dst.__r_.__value_.__r.__words[2])
          free(v457);
      }
    }
  }
  else
  {
LABEL_749:
    v450 = v715;
  }
  *(_QWORD *)(v266 + 48) = v449 - v450;
  if ((std::string::size_type *)v754.__r_.__value_.__l.__data_ != &v754.__r_.__value_.__r.__words[2])
    free(v754.__r_.__value_.__l.__data_);
  if ((_BYTE *)v747 != v749)
    free((void *)v747);
  sub_1C61247C0((uint64_t)&v777, (_QWORD *)v778);
  if (v767 != (unsigned __int8 *)&v769)
    free(v767);
  v463 = *(_QWORD *)(v709 + 112);
  if (!v463 || (*(_BYTE *)(v463 + 14) & 2) == 0)
  {
    v464 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v438 + 2) + 112))(*((_QWORD *)v438 + 2));
    v465 = *(unsigned int *)(v736 + 272);
    if ((_DWORD)v465)
    {
      v466 = *(uint64_t **)(v736 + 264);
      v467 = 8 * v465;
      do
      {
        v468 = *v466++;
        (*(void (**)(uint64_t, llvm::MachineFunction *, uint64_t))(*(_QWORD *)v464 + 96))(v464, v438, v468);
        v467 -= 8;
      }
      while (v467);
    }
    v469 = *(unsigned int *)(v736 + 320);
    if ((_DWORD)v469)
    {
      v470 = *(uint64_t **)(v736 + 312);
      v471 = 8 * v469;
      do
      {
        v472 = *v470++;
        (*(void (**)(uint64_t, llvm::MachineFunction *, uint64_t))(*(_QWORD *)v464 + 104))(v464, v438, v472);
        v471 -= 8;
      }
      while (v471);
    }
    v473 = *(_QWORD *)v438;
    v474 = *(_QWORD *)(*(_QWORD *)v438 + 112);
    if (v474)
    {
      if (*(_DWORD *)(v474 + 8))
      {
        v475 = *(_QWORD *)(v474 + 40);
        if (v475)
        {
          v476 = *(_DWORD *)(v475 + 40);
          if (v476)
          {
            v477 = *(_QWORD *)(v475 + 24);
            v478 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
            if ((v478 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
            {
              v699 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v699 = 0xFF51AFD7ED558CCDLL;
              qword_1ED7EAC80 = v699;
              __cxa_guard_release(&qword_1ED7EAC88);
            }
            v479 = __ROR8__(qword_1ED7EAC80 ^ 0xDD0BD02F49080E7DLL, 30);
            v480 = 0x9DDFEA08EB382D69
                 * ((qword_1ED7EAC80 - 0x7F03C492FD0D025ELL) ^ ((0x9DDFEA08EB382D69
                                                               * ((v479 + 0x33CEB1F3DE1A15C6) ^ (qword_1ED7EAC80
                                                                                                 - 0x7F03C492FD0D025ELL))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v479 + 0x33CEB1F3DE1A15C6) ^ (qword_1ED7EAC80 - 0x7F03C492FD0D025ELL))));
            v481 = -348639895 * ((v480 >> 47) ^ v480);
            for (ii = 1; ; ++ii)
            {
              v483 = v481 & (v476 - 1);
              v484 = v477 + 24 * v483;
              v485 = *(_QWORD **)v484;
              if (*(_QWORD *)v484 == -1)
              {
                if ("zero-call-used-regs" == (char *)-1)
                  goto LABEL_809;
                goto LABEL_795;
              }
              if (v485 != (_QWORD *)-2)
                break;
              if ("zero-call-used-regs" == (char *)-2)
                goto LABEL_809;
LABEL_795:
              if (v485 == (_QWORD *)-1)
                goto LABEL_946;
              v481 = ii + v483;
            }
            if (*(_QWORD *)(v484 + 8) != 19)
              goto LABEL_795;
            v486 = *v485 == 0x6C61632D6F72657ALL && v485[1] == 0x722D646573752D6CLL;
            if (!v486 || *(_QWORD *)((char *)v485 + 11) != 0x736765722D646573)
              goto LABEL_795;
LABEL_809:
            v488 = *(_QWORD *)(v473 + 112);
            if (!v488)
              goto LABEL_853;
            if (!*(_DWORD *)(v488 + 8))
              goto LABEL_853;
            v489 = *(_QWORD *)(v488 + 40);
            if (!v489)
              goto LABEL_853;
            v490 = *(_DWORD *)(v489 + 40);
            if (!v490)
              goto LABEL_853;
            v491 = *(_QWORD *)(v489 + 24);
            v492 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
            if ((v492 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
            {
              v701 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v701 = 0xFF51AFD7ED558CCDLL;
              qword_1ED7EAC80 = v701;
              __cxa_guard_release(&qword_1ED7EAC88);
            }
            v493 = __ROR8__(qword_1ED7EAC80 ^ 0xDD0BD02F49080E7DLL, 30);
            v494 = 0x9DDFEA08EB382D69
                 * ((qword_1ED7EAC80 - 0x7F03C492FD0D025ELL) ^ ((0x9DDFEA08EB382D69
                                                               * ((v493 + 0x33CEB1F3DE1A15C6) ^ (qword_1ED7EAC80
                                                                                                 - 0x7F03C492FD0D025ELL))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v493 + 0x33CEB1F3DE1A15C6) ^ (qword_1ED7EAC80 - 0x7F03C492FD0D025ELL))));
            v495 = -348639895 * ((v494 >> 47) ^ v494);
            for (jj = 1; ; ++jj)
            {
              v497 = v495 & (v490 - 1);
              v498 = v491 + 24 * v497;
              v499 = *(_QWORD **)v498;
              if (*(_QWORD *)v498 == -1)
              {
                if ("zero-call-used-regs" == (char *)-1)
                  goto LABEL_831;
                goto LABEL_817;
              }
              if (v499 != (_QWORD *)-2)
                break;
              if ("zero-call-used-regs" == (char *)-2)
                goto LABEL_831;
LABEL_817:
              if (v499 == (_QWORD *)-1)
                goto LABEL_853;
              v495 = jj + v497;
            }
            if (*(_QWORD *)(v498 + 8) != 19)
              goto LABEL_817;
            v500 = *v499 == 0x6C61632D6F72657ALL && v499[1] == 0x722D646573752D6CLL;
            if (!v500 || *(_QWORD *)((char *)v499 + 11) != 0x736765722D646573)
              goto LABEL_817;
LABEL_831:
            v502 = *(_QWORD *)(v498 + 16);
            if (!v502)
            {
LABEL_853:
              v509 = 0;
              goto LABEL_854;
            }
            v503 = *(_DWORD *)(v502 + 16) - 3;
            v504 = (_DWORD *)(v502 + *(unsigned int *)(v502 + 12) + 24);
            switch(v503)
            {
              case 1:
                if (*(_DWORD *)((char *)v504 + 1) == 1885956979)
                  goto LABEL_946;
                v509 = 2 * (*(_DWORD *)((char *)v504 + 1) == 1684370293);
                break;
              case 4:
                if (*(_DWORD *)((char *)v504 + 1) == 762080353 && v504[1] == 1919969069)
                {
                  v509 = 4;
                  break;
                }
                v506 = *(_DWORD *)((char *)v504 + 1);
                v507 = v504[1];
                if (v506 != 762080353 || v507 != 1735549229)
                  goto LABEL_853;
                v509 = 8;
                break;
              case 5:
                if (*(_QWORD *)((char *)v504 + 1) == 0x7270672D64657375)
                {
                  v509 = 6;
                }
                else if (*(_QWORD *)((char *)v504 + 1) == 0x6772612D64657375)
                {
                  v509 = 10;
                }
                else
                {
                  v509 = 0;
                }
                v438 = (llvm::MachineFunction *)v717;
                break;
              case 8:
                v696 = (*(_QWORD *)((char *)v504 + 1) ^ 0x2D7270672D6C6C61 | *(_QWORD *)(v504 + 1) ^ 0x6772612D7270672DLL) == 0;
                v697 = 12;
                goto LABEL_1180;
              case 9:
                v696 = (*(_QWORD *)((char *)v504 + 1) ^ 0x7270672D64657375 | *(unsigned int *)((char *)v504 + 9) ^ 0x6772612DLL) == 0;
                v697 = 14;
LABEL_1180:
                if (v696)
                  v509 = v697;
                else
                  v509 = 0;
                break;
              default:
                goto LABEL_853;
            }
LABEL_854:
            v510 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v438 + 2) + 176))(*((_QWORD *)v438 + 2));
            llvm::TargetRegisterInfo::getAllocatableSet(v510, (uint64_t)v438, 0, (char *)&__dst);
            v742 = (_QWORD *)v510;
            LODWORD(v510) = *(_DWORD *)(v510 + 16);
            v754.__r_.__value_.__r.__words[0] = (std::string::size_type)&v754.__r_.__value_.__r.__words[2];
            v754.__r_.__value_.__l.__size_ = 0x600000000;
            sub_1C4765AA4((char *)&v754, (v510 + 63) >> 6, 0);
            v758 = v510;
            if ((v509 & 2) != 0)
            {
              for (kk = (_QWORD *)*((_QWORD *)v438 + 41); kk != (_QWORD *)((char *)v438 + 320); kk = (_QWORD *)kk[1])
              {
                for (mm = kk[7]; (_QWORD *)mm != kk + 6; mm = *(_QWORD *)(mm + 8))
                {
                  v513 = *(unsigned int *)(mm + 40);
                  if ((_DWORD)v513)
                  {
                    v514 = __dst.__r_.__value_.__r.__words[0];
                    v515 = v754.__r_.__value_.__r.__words[0];
                    v516 = 32 * v513;
                    v517 = (unsigned int *)(*(_QWORD *)(mm + 32) + 4);
                    do
                    {
                      if (!*(v517 - 1) && (*(v517 - 1) & 0x2000000) == 0)
                      {
                        v518 = *v517;
                        v519 = 1 << v518;
                        v520 = v518 >> 6;
                        if ((v519 & *(_QWORD *)(v514 + 8 * v520)) != 0)
                          *(_QWORD *)(v515 + 8 * v520) |= v519;
                      }
                      v517 += 8;
                      v516 -= 32;
                    }
                    while (v516);
                    if (!mm)
                      goto LABEL_869;
                  }
                  if ((*(_BYTE *)mm & 4) == 0)
                  {
LABEL_869:
                    while ((*(_WORD *)(mm + 44) & 8) != 0)
                      mm = *(_QWORD *)(mm + 8);
                  }
                }
              }
            }
            v521 = *((_DWORD *)v742 + 4);
            v747 = (uint64_t)v749;
            v748 = 0x600000000;
            sub_1C4765AA4((char *)&v747, (v521 + 63) >> 6, 0);
            v753 = v521;
            if (v763)
            {
              v522 = 0;
              v523 = (uint64_t *)__dst.__r_.__value_.__r.__words[0];
              v524 = (v763 - 1) & 0xFFFFFFC0;
              while (1)
              {
                v526 = *v523++;
                v525 = v526;
                v527 = v524 + v522 ? -1 : 0xFFFFFFFFFFFFFFFFLL >> -(char)v763;
                v528 = v527 & v525;
                if (v528)
                  break;
                v522 -= 64;
                if (v524 + v522 == -64)
                  goto LABEL_891;
              }
              v529 = __clz(__rbit64(v528));
              if (v529 + 1 != (_DWORD)v522)
              {
                v530 = v529 - v522;
                do
                {
                  v531 = v530;
                  if (((*(uint64_t (**)(_QWORD *, llvm::MachineFunction *, _QWORD))(*v742 + 160))(v742, v438, v530) & 1) == 0&& ((v509 & 4) == 0|| (*(unsigned int (**)(_QWORD *, llvm::MachineFunction *, unint64_t))(*v742 + 168))(v742, v438, v531))&& ((v509 & 2) == 0|| ((*(_QWORD *)(v754.__r_.__value_.__r.__words[0] + ((v531 >> 3) & 0x1FFFFFF8)) >> v531) & 1) != 0)&& ((v509 & 8) == 0|| (*(unsigned int (**)(_QWORD *, llvm::MachineFunction *, unint64_t))(*v742 + 152))(v742, v438, v531)))
                  {
                    *(_QWORD *)(v747 + ((v531 >> 3) & 0x1FFFFFF8)) |= 1 << v531;
                  }
                  v530 = sub_1C476BA0C(&__dst, (int)v531 + 1, v763, 1u);
                }
                while (v530 != -1);
              }
            }
LABEL_891:
            v532 = (_QWORD *)((char *)v438 + 320);
            if (*((llvm::MachineFunction **)v438 + 41) != (llvm::MachineFunction *)((char *)v438 + 320))
            {
              v533 = (llvm::MachineBasicBlock *)*((_QWORD *)v438 + 41);
              while (1)
              {
                v534 = v533;
                v535 = llvm::MachineBasicBlock::getFirstTerminator(v533);
                v729 = v534;
                v536 = (char *)v534 + 48;
                if ((llvm::MachineBasicBlock *)((char *)v534 + 48) != (llvm::MachineBasicBlock *)v535)
                  break;
LABEL_927:
                v532 = (_QWORD *)((char *)v438 + 320);
                v533 = (llvm::MachineBasicBlock *)*((_QWORD *)v729 + 1);
                if (v533 == (llvm::MachineFunction *)((char *)v438 + 320))
                  goto LABEL_928;
              }
              v537 = v535;
              v735 = (char *)v534 + 48;
              while (2)
              {
                v538 = *(_QWORD *)(*(_QWORD *)(v537 + 16) + 8);
                if ((*(_WORD *)(v537 + 44) & 0xC) != 0 && (*(_WORD *)(v537 + 44) & 4) == 0)
                {
                  v555 = v537;
                  if ((v538 & 0x20) != 0)
                    goto LABEL_900;
                  while ((*(_WORD *)(v555 + 44) & 8) != 0)
                  {
                    v555 = *(_QWORD *)(v555 + 8);
                    if ((*(_BYTE *)(*(_QWORD *)(v555 + 16) + 8) & 0x20) != 0)
                      goto LABEL_900;
                  }
                  goto LABEL_922;
                }
                if ((v538 & 0x20) == 0)
                  goto LABEL_922;
LABEL_900:
                v540 = *(unsigned int *)(v537 + 40);
                if (!(_DWORD)v540)
                  goto LABEL_922;
                v541 = *(_QWORD *)(v537 + 32);
                v542 = v541 + 32 * v540;
                do
                {
                  if (!*(_BYTE *)v541)
                  {
                    v543 = *(_DWORD *)(v541 + 4);
                    v544 = v742[7];
                    v545 = v742[1] + 24 * v543;
                    v546 = *(unsigned int *)(v545 + 4);
                    v547 = (unsigned __int16 *)(v544 + 2 * *(unsigned int *)(v545 + 8));
                    v549 = *v547;
                    v548 = (unint64_t)(v547 + 1);
                    v550 = v549 + v543;
                    if (!v549)
                      v548 = 0;
                    v551 = v544 + 2 * v546;
                    LOWORD(v767) = *(_DWORD *)(v541 + 4);
                    v768 = v551;
                    LOWORD(v769) = v543;
                    LOWORD(v770) = v550;
                    v771 = v548;
                    LOWORD(v772) = v550;
                    v776 = 0;
                    v773 = 0;
                    v774 = 0;
                    v777 = 0;
                    while (v551 | v548 || v774 | (unint64_t)v777)
                    {
                      v552 = 0;
                      do
                      {
                        v553 = (_WORD *)(*(uint64_t (**)(unsigned __int8 **))((char *)&off_1E8148A68 + v552))(&v767);
                        v552 += 16;
                      }
                      while (!v553);
                      v554 = 0;
                      *(_QWORD *)(v747 + (((unint64_t)(unsigned __int16)*v553 >> 3) & 0x1FF8)) &= ~(1 << *v553);
                      do
                      {
                        if (((*(uint64_t (**)(unsigned __int8 **))((char *)&off_1E8148A88 + v554))(&v767) & 1) != 0)
                          break;
                        v11 = v554 == 16;
                        v554 += 16;
                      }
                      while (!v11);
                      v551 = v768;
                      v548 = v771;
                    }
                  }
                  v541 += 32;
                }
                while (v541 != v542);
                v536 = v735;
                if (v537)
                {
LABEL_922:
                  if ((*(_BYTE *)v537 & 4) != 0)
                    goto LABEL_926;
                }
                while ((*(_WORD *)(v537 + 44) & 8) != 0)
                  v537 = *(_QWORD *)(v537 + 8);
LABEL_926:
                v537 = *(_QWORD *)(v537 + 8);
                if ((char *)v537 == v536)
                  goto LABEL_927;
                continue;
              }
            }
LABEL_928:
            v438 = (llvm::MachineFunction *)v717;
            v556 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v717[2] + 112))(v717[2]);
            v557 = v717[41];
            v435 = v736;
            if ((_QWORD *)v557 != v532)
            {
              v558 = v556;
              while (!sub_1C498FBAC(v557))
              {
LABEL_939:
                v557 = *(_QWORD *)(v557 + 8);
                if ((_QWORD *)v557 == v532)
                  goto LABEL_940;
              }
              v767 = (unsigned __int8 *)&v769;
              v768 = 0x600000000;
              v559 = v748;
              if (!(_DWORD)v748)
              {
LABEL_937:
                v775 = v753;
                (*(void (**)(uint64_t, unsigned __int8 **, uint64_t))(*(_QWORD *)v558 + 112))(v558, &v767, v557);
                if (v767 != (unsigned __int8 *)&v769)
                  free(v767);
                goto LABEL_939;
              }
              v560 = &v769;
              v561 = v748;
              if (v748 >= 7uLL)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v767, (uint64_t)&v769, v748, 8);
                v561 = v748;
                if (!(_DWORD)v748)
                {
LABEL_936:
                  LODWORD(v768) = v559;
                  goto LABEL_937;
                }
                v560 = (uint64_t *)v767;
              }
              memcpy(v560, (const void *)v747, 8 * v561);
              goto LABEL_936;
            }
LABEL_940:
            if ((_BYTE *)v747 != v749)
              free((void *)v747);
            if ((std::string::size_type *)v754.__r_.__value_.__l.__data_ != &v754.__r_.__value_.__r.__words[2])
              free(v754.__r_.__value_.__l.__data_);
            if ((std::string::size_type *)__dst.__r_.__value_.__l.__data_ != &__dst.__r_.__value_.__r.__words[2])
              free(__dst.__r_.__value_.__l.__data_);
          }
        }
      }
    }
LABEL_946:
    v562 = *(unsigned int *)(v435 + 272);
    if ((_DWORD)v562)
    {
      v563 = *(uint64_t **)(v435 + 264);
      v564 = 8 * v562;
      do
      {
        v565 = *v563++;
        (*(void (**)(uint64_t, llvm::MachineFunction *, uint64_t))(*(_QWORD *)v464 + 144))(v464, v438, v565);
        v564 -= 8;
      }
      while (v564);
    }
    if ((llvm::MachineFunction::shouldSplitStack(v438) & 1) != 0)
    {
      v566 = *(unsigned int *)(v435 + 272);
      if ((_DWORD)v566)
      {
        v567 = *(uint64_t **)(v435 + 264);
        v568 = 8 * v566;
        do
        {
          v569 = *v567++;
          (*(void (**)(uint64_t, llvm::MachineFunction *, uint64_t))(*(_QWORD *)v464 + 160))(v464, v438, v569);
          v568 -= 8;
        }
        while (v568);
      }
    }
    if ((*(_WORD *)(*(_QWORD *)v438 + 18) & 0x3FF0) == 0xB0)
    {
      v570 = *(unsigned int *)(v435 + 272);
      if ((_DWORD)v570)
      {
        v571 = *(uint64_t **)(v435 + 264);
        v572 = 8 * v570;
        do
        {
          v573 = *v571++;
          (*(void (**)(uint64_t, llvm::MachineFunction *, uint64_t))(*(_QWORD *)v464 + 168))(v464, v438, v573);
          v572 -= 8;
        }
        while (v572);
      }
    }
  }
  v574 = v744;
  if (v744 > 1)
  {
    v577 = (uint64_t *)&v745;
    if ((v744 & 1) == 0)
    {
      v577 = v745;
      if (!v746)
      {
        v574 = 0;
        v578 = v745;
LABEL_1220:
        v438 = (llvm::MachineFunction *)v717;
        goto LABEL_961;
      }
      v704 = &v745[7 * v746];
    }
    v574 = v744 & 1;
    while ((*v577 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v577 += 7;
      if (v577 == v704)
      {
        v578 = v704;
        v577 = v704;
        goto LABEL_1220;
      }
    }
    v438 = (llvm::MachineFunction *)v717;
    v578 = v704;
  }
  else
  {
    if ((_DWORD)v744)
    {
      v575 = 4;
      v576 = &v745;
    }
    else
    {
      v576 = v745;
      v575 = v746;
    }
    v577 = &v576[7 * v575];
    v578 = v577;
  }
LABEL_961:
  v579 = v574 == 0;
  v580 = &v745;
  if (v579)
    v580 = v745;
  v581 = v746;
  if (!v579)
    v581 = 4;
  v582 = &v580[7 * v581];
LABEL_966:
  while (v577 != v582)
  {
    v583 = *((unsigned int *)v577 + 4);
    if ((_DWORD)v583)
    {
      v584 = *v577;
      v585 = (uint64_t *)v577[1];
      v586 = *(uint64_t **)(*v577 + 56);
      v587 = &v585[v583];
      do
      {
        v588 = *v585;
        v589 = *(_QWORD *)(v584 + 40);
        *(_QWORD *)(v588 + 24) = v589;
        v590 = *(_QWORD *)(v589 + 32);
        v591 = *(unsigned int *)(v588 + 40);
        if ((_DWORD)v591)
        {
          v594 = *(_QWORD *)(v588 + 32);
          v595 = *(_QWORD *)(v590 + 40);
          v596 = 32 * v591;
          do
          {
            if (!*(_BYTE *)v594)
            {
              v597 = *(unsigned int *)(v594 + 4);
              if ((int)v597 >= 0)
                v598 = (uint64_t *)(*(_QWORD *)(v595 + 272) + 8 * v597);
              else
                v598 = (uint64_t *)(*(_QWORD *)(v595 + 24) + 16 * (v597 & 0x7FFFFFFF) + 8);
              v599 = *v598;
              if (*v598)
              {
                v600 = *(_QWORD *)(v599 + 16);
                *(_QWORD *)(v599 + 16) = v594;
                *(_QWORD *)(v594 + 16) = v600;
                if ((*(_BYTE *)(v594 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v594 + 24) = v599;
                }
                else
                {
                  *(_QWORD *)(v594 + 24) = 0;
                  v598 = (uint64_t *)(v600 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v594 + 16) = v594;
                *(_QWORD *)(v594 + 24) = 0;
              }
              *v598 = v594;
            }
            v594 += 32;
            v596 -= 32;
          }
          while (v596);
        }
        v592 = *(_QWORD *)(v590 + 728);
        if (v592)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v592 + 24))(v592, v588);
        v593 = *v586 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v588 = v593 | *(_QWORD *)v588 & 7;
        *(_QWORD *)(v588 + 8) = v586;
        *(_QWORD *)(v593 + 8) = v588;
        *v586 = *v586 & 7 | v588;
        ++v585;
      }
      while (v585 != v587);
    }
    v601 = v577 + 7;
    v577 = v578;
    if (v601 != v578)
    {
      while ((*v601 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v601 += 7;
        if (v601 == v578)
        {
          v577 = v578;
          goto LABEL_966;
        }
      }
      v577 = v601;
    }
  }
  v602 = v736;
  (*(void (**)(uint64_t, llvm::MachineFunction *, _QWORD))(*(_QWORD *)v710 + 280))(v710, v438, *(_QWORD *)(v736 + 248));
  v603 = *((_QWORD *)v438 + 2);
  v604 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v603 + 112))(v603);
  if ((*(unsigned int (**)(uint64_t, llvm::MachineFunction *))(*(_QWORD *)v604 + 224))(v604, v438))
  {
    v605 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v603 + 176))(v603);
    if (*(_QWORD *)(v736 + 248) && !*(_BYTE *)(v736 + 360))
      v606 = 1;
    else
      v606 = (*(uint64_t (**)(uint64_t, llvm::MachineFunction *))(*(_QWORD *)v605 + 400))(v605, v438);
    *(_BYTE *)(v736 + 361) = v606;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst.__r_.__value_.__r.__words[2];
    __dst.__r_.__value_.__l.__size_ = 0x800000000;
    sub_1C49F6D78((uint64_t)&__dst, ((*((_QWORD *)v438 + 14) - *((_QWORD *)v438 + 13)) >> 3));
    v767 = (unsigned __int8 *)&v771;
    v768 = (uint64_t)&v771;
    v769 = 8;
    LODWORD(v770) = 0;
    v747 = (uint64_t)v438;
    sub_1C520AEA8((llvm::SmallPtrSetImplBase *)&v767, (uint64_t)&v747, &v754);
    v607 = (_QWORD *)v754.__r_.__value_.__r.__words[2];
    for (nn = v754.__r_.__value_.__l.__size_;
          v754.__r_.__value_.__r.__words[2] != v754.__r_.__value_.__l.__size_;
          nn = v754.__r_.__value_.__l.__size_)
    {
      LODWORD(v747) = 0;
      v609 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v607 - nn) >> 3);
      if ((v609 & 0xFFFFFFFE) != 0)
        LODWORD(v747) = *(_DWORD *)(__dst.__r_.__value_.__r.__words[0]
                                  + 4 * *(int *)(*(_QWORD *)(nn + 24 * (v609 - 2)) + 24));
      v610 = *(v607 - 3);
      sub_1C520AF58(v736, (_QWORD *)v610, (uint64_t)v438, (unsigned int *)&v747);
      *(_DWORD *)(__dst.__r_.__value_.__r.__words[0] + 4 * *(int *)(v610 + 24)) = v747;
      sub_1C520B4C4((uint64_t)&v754);
      v607 = (_QWORD *)v754.__r_.__value_.__r.__words[2];
    }
    if (v607)
      operator delete(v607);
    for (i1 = (_QWORD *)*((_QWORD *)v438 + 41); i1 != (_QWORD *)((char *)v438 + 320); i1 = (_QWORD *)i1[1])
    {
      v612 = sub_1C477672C((uint64_t)&v767, (uint64_t)i1);
      if ((unsigned __int8 *)v768 == v767)
        v613 = (uint64_t *)((char *)&v769 + 4);
      else
        v613 = &v769;
      if (v612 == (_QWORD *)(v768 + 8 * *(unsigned int *)v613))
      {
        LODWORD(v754.__r_.__value_.__l.__data_) = 0;
        sub_1C520AF58(v736, i1, (uint64_t)v438, (unsigned int *)&v754);
      }
    }
    if ((unsigned __int8 *)v768 != v767)
      free((void *)v768);
    if ((std::string::size_type *)__dst.__r_.__value_.__l.__data_ != &__dst.__r_.__value_.__r.__words[2])
      free(__dst.__r_.__value_.__l.__data_);
  }
  if (((*(uint64_t (**)(uint64_t, llvm::MachineFunction *))(*(_QWORD *)v708 + 376))(v708, v438) & 1) != 0
    && *(_BYTE *)(v736 + 360))
  {
    llvm::scavengeFrameVirtualRegs(v438, *(llvm::MachineFunction **)(v736 + 248), v614);
  }
  v615 = *((_QWORD *)v438 + 7);
  v616 = *(_QWORD *)(v615 + 48);
  v617 = *(_QWORD *)(*(_QWORD *)v438 + 112);
  if (!v617 || !*(_DWORD *)(v617 + 8) || (v618 = *(_QWORD *)(v617 + 40)) == 0)
  {
    v625 = 0xFFFFFFFFLL;
    goto LABEL_1080;
  }
  v619 = *(_DWORD *)(v618 + 40);
  if (!v619)
  {
    v625 = 0xFFFFFFFFLL;
    goto LABEL_1080;
  }
  v620 = *(_QWORD *)(v618 + 24);
  v621 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v621 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v698 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v698 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v698;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v622 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xA794B9D9BC943BA1)) ^ ((0x9DDFEA08EB382D69
                                                                              * (qword_1ED7EAC80 ^ 0xA794B9D9BC943BA1)) >> 47) ^ 0xC6E0CAF4D2E65AD6);
  v623 = (-348639895 * ((v622 >> 47) ^ v622)) ^ 0x2D6B6361;
  v624 = 1;
  v625 = 0xFFFFFFFFLL;
  while (1)
  {
    v626 = v623 & (v619 - 1);
    v627 = v620 + 24 * v626;
    v628 = *(_QWORD **)v627;
    if (*(_QWORD *)v627 == -1)
    {
      if ("warn-stack-size" == (char *)-1)
        goto LABEL_1036;
      goto LABEL_1025;
    }
    if (v628 != (_QWORD *)-2)
      break;
    if ("warn-stack-size" == (char *)-2)
      goto LABEL_1036;
LABEL_1025:
    if (v628 == (_QWORD *)-1)
      goto LABEL_1080;
    v623 = v624 + v626;
    ++v624;
  }
  if (*(_QWORD *)(v627 + 8) != 15)
    goto LABEL_1025;
  if (*v628 != 0x6174732D6E726177 || *(_QWORD *)((char *)v628 + 7) != 0x657A69732D6B6361)
    goto LABEL_1025;
LABEL_1036:
  v630 = *(_QWORD *)(*(_QWORD *)v438 + 112);
  if (!v630)
    goto LABEL_1072;
  LODWORD(v631) = *(_DWORD *)(v630 + 8);
  if (!(_DWORD)v631)
  {
LABEL_1221:
    v630 = 0;
    goto LABEL_1073;
  }
  v630 = *(_QWORD *)(v630 + 40);
  if (!v630)
  {
LABEL_1172:
    LODWORD(v631) = 0;
    v649 = 1;
    goto LABEL_1074;
  }
  v632 = *(_DWORD *)(v630 + 40);
  if (!v632)
  {
    v630 = 0;
    goto LABEL_1172;
  }
  v633 = *(_QWORD *)(v630 + 24);
  v634 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v634 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v700 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v700 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v700;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v635 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xA794B9D9BC943BA1)) ^ ((0x9DDFEA08EB382D69
                                                                              * (qword_1ED7EAC80 ^ 0xA794B9D9BC943BA1)) >> 47) ^ 0xC6E0CAF4D2E65AD6);
  v636 = (-348639895 * ((v635 >> 47) ^ v635)) ^ 0x2D6B6361;
  v637 = 1;
  while (2)
  {
    v638 = v636 & (v632 - 1);
    v639 = v633 + 24 * v638;
    v640 = *(_QWORD **)v639;
    if (*(_QWORD *)v639 == -1)
    {
      if ("warn-stack-size" == (char *)-1)
        goto LABEL_1055;
      goto LABEL_1044;
    }
    if (v640 == (_QWORD *)-2)
    {
      if ("warn-stack-size" == (char *)-2)
        goto LABEL_1055;
LABEL_1044:
      if (v640 != (_QWORD *)-1)
      {
        v636 = v637 + v638;
        ++v637;
        continue;
      }
      v630 = 0;
      goto LABEL_1072;
    }
    break;
  }
  if (*(_QWORD *)(v639 + 8) != 15)
    goto LABEL_1044;
  if (*v640 != 0x6174732D6E726177 || *(_QWORD *)((char *)v640 + 7) != 0x657A69732D6B6361)
    goto LABEL_1044;
LABEL_1055:
  v630 = *(_QWORD *)(v639 + 16);
  if (!v630)
  {
LABEL_1072:
    LODWORD(v631) = 0;
LABEL_1073:
    v649 = 1;
    goto LABEL_1074;
  }
  v631 = *(unsigned int *)(v630 + 16);
  if (!(_DWORD)v631)
    goto LABEL_1221;
  v642 = 0;
  v643 = (unsigned __int8 *)(*(unsigned int *)(v630 + 12) + v630 + 25);
  v644 = *(unsigned int *)(v630 + 16);
  while (1)
  {
    v646 = *v643++;
    v645 = v646;
    if ((v646 - 48) < 0xA)
    {
      v647 = -48;
      goto LABEL_1060;
    }
    if ((v645 - 97) >= 0x1A)
      break;
    v647 = -87;
LABEL_1068:
    v602 = v736;
    v438 = (llvm::MachineFunction *)v717;
LABEL_1060:
    v648 = v647 + v645;
    if (v648 > 9)
    {
      v630 = v642;
      goto LABEL_1225;
    }
    v630 = 10 * v642 + v648;
    if (v642 > v630 / 0xA)
    {
      LODWORD(v631) = 1;
      goto LABEL_1073;
    }
    v642 = v630;
    if (!--v644)
      goto LABEL_1225;
  }
  if ((v645 - 65) <= 0x19)
  {
    v647 = -55;
    goto LABEL_1068;
  }
  v630 = v642;
  v602 = v736;
  v438 = (llvm::MachineFunction *)v717;
LABEL_1225:
  v649 = v644 == v631;
  LODWORD(v631) = v644 != 0;
LABEL_1074:
  v650 = v631 | v649;
  v651 = v630;
  if (HIDWORD(v630))
    v652 = 1;
  else
    v652 = v650;
  v11 = v652 == 0;
  v625 = 0xFFFFFFFFLL;
  if (v11)
    v625 = v651;
LABEL_1080:
  v653 = *(_QWORD *)(*(_QWORD *)v438 + 112);
  if (v653 && (*(_BYTE *)(v653 + 18) & 2) != 0)
    v616 += *(_QWORD *)(v615 + 672);
  if (v616 > v625)
  {
    LODWORD(v768) = 2;
    BYTE4(v768) = 1;
    v769 = v709;
    v770 = "stack frame size";
    v771 = v616;
    v772 = (const char *)v625;
    v767 = (unsigned __int8 *)&unk_1E814E670;
    llvm::LLVMContext::diagnose(**(_QWORD **)v709, (const llvm::DiagnosticInfo *)&v767);
  }
  v654 = *(uint64_t *****)(v602 + 368);
  v655 = *(_QWORD *)****v654;
  if (*(_QWORD *)(v655 + 128)
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v655 + 72) + 48))(*(_QWORD *)(v655 + 72)))
  {
    v669 = *(uint64_t ****)v438;
    if ((*(_BYTE *)(*(_QWORD *)v438 + 23) & 0x20) == 0)
      goto LABEL_1127;
    v670 = ***v669;
    v767 = *(unsigned __int8 **)v438;
    v671 = *(_DWORD *)(v670 + 2496);
    if (v671)
    {
      v672 = *(_QWORD *)(v670 + 2480);
      v673 = v671 - 1;
      v674 = v673 & ((v669 >> 4) ^ (v669 >> 9));
      v675 = (uint64_t ****)(v672 + 40 * v674);
      v676 = *v675;
      if (*v675 == v669)
        goto LABEL_1122;
      v677 = 0;
      v678 = 1;
      while (v676 != (uint64_t ***)-4096)
      {
        if (v677)
          v679 = 0;
        else
          v679 = v676 == (uint64_t ***)-8192;
        if (v679)
          v677 = v675;
        v680 = v674 + v678++;
        v674 = v680 & v673;
        v675 = (uint64_t ****)(v672 + 40 * v674);
        v676 = *v675;
        if (*v675 == v669)
          goto LABEL_1122;
      }
      if (v677)
        v694 = v677;
      else
        v694 = v675;
    }
    else
    {
      v694 = 0;
    }
    v675 = (uint64_t ****)sub_1C541AB24(v670 + 2480, (uint64_t)&v767, (uint64_t *)&v767, v694);
    v695 = v767;
    v675[3] = 0;
    v675[4] = 0;
    *v675 = (uint64_t ***)v695;
    v675[1] = (uint64_t ***)(v675 + 3);
    v675[2] = (uint64_t ***)0x100000000;
LABEL_1122:
    v681 = *((unsigned int *)v675 + 4);
    if ((_DWORD)v681)
    {
      v682 = v675[1] + 1;
      v683 = 16 * v681;
      LODWORD(v684) = 0;
      while (*((_DWORD *)v682 - 2))
      {
        v685 = 0;
        v682 += 2;
        v683 -= 16;
        if (!v683)
          goto LABEL_1129;
      }
      v684 = *v682;
      if (*v682)
      {
        v685 = (const char *)*v682;
        if (*(_BYTE *)v684 != 15)
          v685 = *(const char **)(v684 - 8 * *(unsigned int *)(v684 + 8));
        LODWORD(v684) = *(_DWORD *)(v684 + 28);
        goto LABEL_1129;
      }
LABEL_1128:
      v685 = 0;
LABEL_1129:
      v686 = *((_QWORD *)v438 + 41);
      v687 = **(_QWORD **)(v686 + 32);
      LODWORD(v768) = 17;
      BYTE4(v768) = 2;
      v769 = v687;
      v770 = v685;
      v771 = v684;
      v772 = "prologepilog";
      v773 = "StackSize";
      v774 = 9;
      LOBYTE(v775) = 0;
      LOBYTE(v776) = 0;
      v777 = v779;
      v778 = 0x400000000;
      v780 = 0;
      v781 = -1;
      v782 = v686;
      v767 = (unsigned __int8 *)&unk_1E8144BB0;
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v754, "NumStackBytes", 0xDuLL, v616);
      if (SHIBYTE(v754.__r_.__value_.__r.__words[2]) < 0)
        sub_1C47EBC30(&__dst, v754.__r_.__value_.__l.__data_, v754.__r_.__value_.__l.__size_);
      else
        __dst = v754;
      if (SHIBYTE(v756) < 0)
      {
        sub_1C47EBC30(&v760, (void *)v755, *((unint64_t *)&v755 + 1));
      }
      else
      {
        v760 = v755;
        v761 = v756;
      }
      v762 = v757;
      sub_1C53B18D0((uint64_t)&v777, (__int128 *)&__dst);
      if (SHIBYTE(v761) < 0)
        operator delete((void *)v760);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)" stack bytes in function";
      __dst.__r_.__value_.__l.__size_ = 24;
      sub_1C53B17B4((uint64_t)&v777, (const void **)&__dst.__r_.__value_.__l.__data_);
      sub_1C61F875C((uint64_t)&__dst, (uint64_t)&v767);
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E8144BB0;
      if (SHIBYTE(v756) < 0)
        operator delete((void *)v755);
      if (SHIBYTE(v754.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v754.__r_.__value_.__l.__data_);
      v767 = (unsigned __int8 *)&off_1E814E790;
      v688 = (char *)v777;
      if ((_DWORD)v778)
      {
        v689 = (unint64_t)v778 << 6;
        do
        {
          v690 = (void **)&v688[v689];
          if (v688[v689 - 17] < 0)
            operator delete(*(v690 - 5));
          if (*((char *)v690 - 41) < 0)
            operator delete(*(v690 - 8));
          v689 -= 64;
        }
        while (v689);
        v688 = (char *)v777;
      }
      if (v688 != (char *)v779)
        free(v688);
      llvm::MachineOptimizationRemarkEmitter::emit(v654, (llvm::DiagnosticInfoOptimizationBase *)&__dst);
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E814E790;
      v691 = v764;
      if (v765)
      {
        v692 = (unint64_t)v765 << 6;
        do
        {
          v693 = (void **)&v691[v692];
          if (v691[v692 - 17] < 0)
            operator delete(*(v693 - 5));
          if (*((char *)v693 - 41) < 0)
            operator delete(*(v693 - 8));
          v692 -= 64;
        }
        while (v692);
        v691 = v764;
      }
      if (v691 != (char *)&v766)
        free(v691);
      goto LABEL_1087;
    }
LABEL_1127:
    LODWORD(v684) = 0;
    goto LABEL_1128;
  }
LABEL_1087:
  v656 = *(_QWORD **)(v602 + 248);
  if (v656)
  {
    v657 = (_QWORD *)v656[40];
    if (v657 != v656 + 42)
      free(v657);
    v658 = (_QWORD *)v656[31];
    if (v658 != v656 + 33)
      free(v658);
    v659 = (_QWORD *)v656[22];
    if (v659 != v656 + 24)
      free(v659);
    v660 = (_QWORD *)v656[13];
    if (v660 != v656 + 15)
      free(v660);
    v661 = (_QWORD *)v656[6];
    if (v661 != v656 + 8)
      free(v661);
    MEMORY[0x1CAA32FC0](v656, 0x10E0C4069A138BFLL);
  }
  *(_DWORD *)(v602 + 272) = 0;
  *(_DWORD *)(v602 + 320) = 0;
  *(_OWORD *)(v615 + 656) = 0u;
  v662 = v744;
  if ((v744 & 1) != 0)
  {
    v663 = 4;
LABEL_1101:
    v664 = v718 + 3;
    v665 = 56 * v663;
    do
    {
      v666 = *(v664 - 3);
      if (v666 != -4096 && v666 != -8192)
      {
        v667 = (_QWORD *)*(v664 - 2);
        if (v664 != v667)
          free(v667);
      }
      v664 += 7;
      v665 -= 56;
    }
    while (v665);
    v662 = v744;
  }
  else
  {
    v663 = v746;
    if (v746)
    {
      v718 = v745;
      goto LABEL_1101;
    }
  }
  if ((v662 & 1) == 0)
    MEMORY[0x1CAA32FB4](v745, 8);
  return 1;
}

BOOL sub_1C520AAB4(uint64_t a1, uint64_t a2)
{
  int8x16_t v5;
  char v6;

  llvm::DIExpression::getFragmentInfo(*(uint64_t **)(a1 + 24), *(uint64_t **)(a1 + 32), &v5);
  if (v6 && (llvm::DIExpression::getFragmentInfo(*(uint64_t **)(a2 + 24), *(uint64_t **)(a2 + 32), &v5), v6))
    return sub_1C62093E0(a1, a2) == 0;
  else
    return 1;
}

void sub_1C520AB24(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  void *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[224];
  uint64_t v21;

  v2 = a2;
  v21 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_DWORD *)(a1 + 16);
    if (v2 > 4)
    {
      *(_QWORD *)(a1 + 8) = operator new(56 * v2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C6209628(a1, v7, v7 + 56 * v8);
    JUMPOUT(0x1CAA32FB4);
  }
  v9 = 0;
  v10 = v20;
  do
  {
    v11 = a1 + v9;
    v12 = *(_QWORD *)(a1 + v9 + 8);
    if ((v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
      goto LABEL_22;
    v13 = v10 + 24;
    *((_QWORD *)v10 + 1) = v10 + 24;
    *(_QWORD *)v10 = v12;
    *((_QWORD *)v10 + 2) = 0x400000000;
    v14 = *(_DWORD *)(v11 + 24);
    v15 = *(void **)(v11 + 16);
    if (v14)
      v16 = a1 + v9 + 8 == (_QWORD)v10;
    else
      v16 = 1;
    if (!v16)
    {
      v17 = a1 + v9;
      v18 = a1 + v9 + 32;
      if ((void *)v18 != v15)
      {
        *((_QWORD *)v10 + 1) = v15;
        *((_DWORD *)v10 + 4) = v14;
        *((_DWORD *)v10 + 5) = *(_DWORD *)(v17 + 28);
        *(_QWORD *)(v11 + 16) = v18;
        *(_DWORD *)(v17 + 28) = 0;
        v15 = (void *)(a1 + v9 + 32);
        goto LABEL_19;
      }
      if (v14 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v10 + 8), (uint64_t)(v10 + 24), *(unsigned int *)(v11 + 24), 8);
        v19 = *(unsigned int *)(v11 + 24);
        if (!(_DWORD)v19)
          goto LABEL_18;
        v15 = *(void **)(v11 + 16);
        v13 = (void *)*((_QWORD *)v10 + 1);
      }
      else
      {
        v19 = *(unsigned int *)(v11 + 24);
      }
      memcpy(v13, v15, 8 * v19);
LABEL_18:
      *((_DWORD *)v10 + 4) = v14;
      v15 = *(void **)(v11 + 16);
LABEL_19:
      *(_DWORD *)(v11 + 24) = 0;
    }
    v10 += 56;
    if ((void *)(a1 + v9 + 32) != v15)
      free(v15);
LABEL_22:
    v9 += 56;
  }
  while (v9 != 224);
  if (v2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    *(_QWORD *)(a1 + 8) = operator new(56 * v2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v2;
  }
  sub_1C6209628(a1, (uint64_t)v20, (uint64_t)v10);
}

_DWORD *sub_1C520AD94(_DWORD *result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;

  if (a2)
  {
    v3 = 16 * a2;
    do
    {
      v4 = *result;
      if ((*result & 0x80000000) == 0)
      {
        v5 = *(unsigned int *)(a3 + 8);
        if (v5 >= *(unsigned int *)(a3 + 12))
        {
          v9 = v3;
          v7 = a3;
          v8 = result;
          v6 = *result;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v5 + 1, 4);
          v4 = v6;
          v3 = v9;
          a3 = v7;
          result = v8;
          v5 = *(unsigned int *)(v7 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a3 + 4 * v5) = v4;
        ++*(_DWORD *)(a3 + 8);
      }
      result += 4;
      v3 -= 16;
    }
    while (v3);
  }
  return result;
}

BOOL sub_1C520AE28(uint64_t a1)
{
  unsigned __int16 *v1;
  unsigned __int16 *v2;
  int v3;
  __int16 v4;

  v1 = *(unsigned __int16 **)(a1 + 8);
  v2 = *(unsigned __int16 **)(a1 + 56);
  if (v1 != v2)
  {
    v3 = *v1;
    *(_QWORD *)(a1 + 8) = v1 + 1;
    v4 = *(_WORD *)a1 + v3;
    *(_WORD *)a1 = v4;
    if (!v3)
      *(_QWORD *)(a1 + 8) = 0;
    *(_WORD *)(a1 + 16) = v4;
  }
  return v1 != v2;
}

BOOL sub_1C520AE68(uint64_t a1)
{
  unsigned __int16 *v1;
  unsigned __int16 *v2;
  int v3;
  __int16 v4;

  v1 = *(unsigned __int16 **)(a1 + 32);
  v2 = *(unsigned __int16 **)(a1 + 80);
  if (v1 != v2)
  {
    v3 = *v1;
    *(_QWORD *)(a1 + 32) = v1 + 1;
    v4 = *(_WORD *)(a1 + 24) + v3;
    *(_WORD *)(a1 + 24) = v4;
    if (!v3)
      *(_QWORD *)(a1 + 32) = 0;
    *(_WORD *)(a1 + 40) = v4;
  }
  return v1 != v2;
}

void sub_1C520AEA8(llvm::SmallPtrSetImplBase *this@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  char v6;
  _BYTE *v7;
  _BYTE *v8;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 328);
  sub_1C4774094(this, v5);
  if (v6)
  {
    v7 = operator new(0x18uLL);
    *(_QWORD *)v7 = v5;
    v7[8] = 0;
    v7[16] = 0;
    v8 = v7 + 24;
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  *a3 = this;
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = 0;
  sub_1C4D6CDA0(a3 + 1, v7, v8, 0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 3));
  if (v7)
    operator delete(v7);
}

void sub_1C520AF58(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int *a4)
{
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _BYTE *v24;
  uint64_t v25;
  llvm::MDNode *v26;
  unsigned int v27;
  unint64_t v28;
  llvm::MDNode *appended;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  unint64_t v34;
  uint64_t *v35;
  llvm::RegScavenger *v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  _QWORD *v40;
  uint64_t *v41;
  BOOL v42;
  _QWORD *v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v47;
  _QWORD v48[2];
  unsigned int v49;
  void *v50;
  uint64_t v51;
  _QWORD v52[5];

  v52[3] = *MEMORY[0x1E0C80C00];
  v7 = (_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 16) + 104))(*(_QWORD *)(a3 + 16));
  v47 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 16) + 176))(*(_QWORD *)(a3 + 16));
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 16) + 112))(*(_QWORD *)(a3 + 16));
  v9 = *(_QWORD *)(a1 + 248);
  if (v9 && *(_BYTE *)(a1 + 361))
  {
    llvm::RegScavenger::init(*(llvm::RegScavenger **)(a1 + 248), (llvm::MachineBasicBlock *)a2);
    llvm::LiveRegUnits::addLiveIns((llvm::LiveRegUnits *)(v9 + 96), (const llvm::MachineFunction **)a2);
  }
  v40 = a2;
  v10 = a2[7];
  v41 = a2 + 7;
  v11 = a2 + 6;
  if ((_QWORD *)v10 == a2 + 6)
    return;
  v42 = 0;
  v44 = v7;
  v45 = a1;
  v43 = a2 + 6;
  do
  {
    while (1)
    {
      v12 = v10;
      v13 = **(unsigned __int16 **)(v10 + 16);
      v14 = v7[16];
      v15 = v14 == v13;
      if (v14 != v13 && v7[17] != v13)
        break;
      *a4 += (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v7 + 48))(v7, v10);
      v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v8 + 296))(v8, a3, v40, v10);
      v42 = v15;
      if (v11 == (_QWORD *)v10)
        return;
    }
    v16 = *(unsigned int *)(v10 + 40);
    if (!(_DWORD)v16)
    {
LABEL_37:
      v31 = v45;
      if (v42)
      {
        v7 = v44;
        v32 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v44 + 48))(v44, v12);
        v33 = 0;
        *a4 += v32;
        v34 = v12;
      }
      else
      {
        v33 = 0;
        v34 = v12;
        v7 = v44;
      }
      v11 = v43;
      goto LABEL_41;
    }
    v17 = 0;
    v18 = 0;
    while (1)
    {
      v19 = *(_QWORD *)(v12 + 32);
      if (*(_BYTE *)(v19 + v17) == 5)
      {
        v20 = **(unsigned __int16 **)(v12 + 16);
        if ((v20 - 13) <= 1)
        {
          v49 = 0;
          v21 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 8)
                                + 40
                                * (*(_DWORD *)(*(_QWORD *)(a3 + 56) + 32) + *(_DWORD *)(v19 + v17 + 16))
                                + 8);
          v48[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 232))(v8, a3);
          v48[1] = v22;
          llvm::MachineOperand::ChangeToRegister(v19 + v17, v49, 0, 0, 0, 0, 0, 0);
          v23 = **(unsigned __int16 **)(v12 + 16);
          v24 = *(_BYTE **)(v12 + 32);
          v25 = 96;
          if (v23 == 14)
            v25 = 32;
          v26 = *(llvm::MDNode **)&v24[v25 + 16];
          if (v23 == 14)
          {
            v24 += 64;
          }
          else if (v23 == 13)
          {
            if (v24[32] != 1 || *v24)
            {
              if (llvm::DIExpression::isComplex(v26))
                v27 = 0;
              else
                v27 = 4;
            }
            else
            {
              if (llvm::DIExpression::isImplicit(v26))
              {
                v50 = v52;
                v52[0] = 148;
                v52[1] = v21;
                v51 = 0x200000002;
                v26 = llvm::DIExpression::prependOpcodes(v26, (unsigned int *)&v50, 1, 0);
                llvm::MachineOperand::ChangeToRegister(*(_QWORD *)(v12 + 32) + 32, 0, 0, 0, 0, 0, 0, 0);
                if (v50 != v52)
                  free(v50);
              }
              v27 = 0;
            }
            appended = llvm::TargetRegisterInfo::prependOffsetExpression(v47, v26, v27, (uint64_t)v48);
LABEL_28:
            v30 = 96;
            if (**(_WORD **)(v12 + 16) == 14)
              v30 = 32;
            *(_QWORD *)(*(_QWORD *)(v12 + 32) + v30 + 16) = appended;
            goto LABEL_31;
          }
          v28 = (unint64_t)(v17 + v19 - (_QWORD)v24) >> 5;
          v50 = v52;
          v51 = 0x300000000;
          (*(void (**)(uint64_t, _QWORD *, void **))(*(_QWORD *)v47 + 488))(v47, v48, &v50);
          appended = llvm::DIExpression::appendOpsToArg(v26, (uint64_t *)v50, v51, v28, 0);
          if (v50 != v52)
            free(v50);
          goto LABEL_28;
        }
        if (v20 != 16)
          break;
      }
LABEL_31:
      ++v18;
      v17 += 32;
      if (v16 == v18)
        goto LABEL_37;
    }
    if (v20 == 31)
    {
      LODWORD(v50) = 0;
      *(_QWORD *)(v19 + v17 + 48) += (int)*a4
                                   + (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, void **, _QWORD))(*(_QWORD *)v8 + 240))(v8, a3, *(unsigned int *)(v19 + v17 + 16), &v50, 0);
      llvm::MachineOperand::ChangeToRegister(*(_QWORD *)(v12 + 32) + v17, v50, 0, 0, 0, 0, 0, 0);
      goto LABEL_31;
    }
    v37 = *v41;
    v34 = v12;
    v31 = v45;
    v11 = v43;
    if (v12 != *v41)
    {
      v34 = *(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8;
      if (!v34 || (*(_BYTE *)v34 & 4) == 0)
      {
        while ((*(_WORD *)(v34 + 44) & 4) != 0)
          v34 = *(_QWORD *)v34 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    if (*(_BYTE *)(v45 + 361))
      v38 = *(_QWORD *)(v45 + 248);
    else
      v38 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v47 + 504))(v47, v12, *a4, v18, v38);
    v33 = 1;
    v35 = v41;
    v39 = v12 == v37;
    v7 = v44;
    if (v39)
    {
LABEL_46:
      v10 = *v35;
    }
    else
    {
LABEL_41:
      if ((_QWORD *)v34 != v11)
      {
        if ((*(_BYTE *)v34 & 4) == 0)
        {
          while ((*(_WORD *)(v34 + 44) & 8) != 0)
            v34 = *(_QWORD *)(v34 + 8);
        }
        v35 = (uint64_t *)(v34 + 8);
        goto LABEL_46;
      }
      v10 = (uint64_t)v11;
    }
    v36 = *(llvm::RegScavenger **)(v31 + 248);
    if (v36)
    {
      if (!*(_BYTE *)(v31 + 361))
        v33 = 1;
      if ((v33 & 1) == 0)
        sub_1C614D6B4(v36, v12);
    }
  }
  while ((_QWORD *)v10 != v11);
}

void sub_1C520B4C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;

  v2 = *(_QWORD *)(a1 + 16);
  while (2)
  {
    v3 = *(_QWORD *)(v2 - 24);
    if (!*(_BYTE *)(v2 - 8))
    {
      *(_QWORD *)(v2 - 16) = *(_QWORD *)(v3 + 88);
      *(_BYTE *)(v2 - 8) = 1;
    }
    while (1)
    {
      v4 = *(uint64_t **)(v2 - 16);
      if (v4 == *(uint64_t **)(v3 + 96))
        break;
      *(_QWORD *)(v2 - 16) = v4 + 1;
      v5 = *v4;
      sub_1C4774094(*(llvm::SmallPtrSetImplBase **)a1, *v4);
      if (v6)
      {
        v9 = *(_BYTE **)(a1 + 16);
        v8 = *(_QWORD *)(a1 + 24);
        if ((unint64_t)v9 >= v8)
        {
          v11 = *(_BYTE **)(a1 + 8);
          v12 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v11) >> 3) + 1;
          if (v12 > 0xAAAAAAAAAAAAAAALL)
            abort();
          v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (_QWORD)v11) >> 3);
          if (2 * v13 > v12)
            v12 = 2 * v13;
          if (v13 >= 0x555555555555555)
            v14 = 0xAAAAAAAAAAAAAAALL;
          else
            v14 = v12;
          if (v14)
          {
            if (v14 > 0xAAAAAAAAAAAAAAALL)
              sub_1C4764EE4();
            v15 = (char *)operator new(24 * v14);
          }
          else
          {
            v15 = 0;
          }
          v16 = &v15[8 * ((v9 - v11) >> 3)];
          *(_QWORD *)v16 = v5;
          v16[8] = 0;
          v16[16] = 0;
          v10 = v16 + 24;
          if (v9 != v11)
          {
            do
            {
              v17 = *(_OWORD *)(v9 - 24);
              *((_QWORD *)v16 - 1) = *((_QWORD *)v9 - 1);
              *(_OWORD *)(v16 - 24) = v17;
              v16 -= 24;
              v9 -= 24;
            }
            while (v9 != v11);
            v9 = *(_BYTE **)(a1 + 8);
          }
          *(_QWORD *)(a1 + 8) = v16;
          *(_QWORD *)(a1 + 16) = v10;
          *(_QWORD *)(a1 + 24) = &v15[24 * v14];
          if (v9)
            operator delete(v9);
        }
        else
        {
          *(_QWORD *)v9 = v5;
          v9[8] = 0;
          v10 = v9 + 24;
          v9[16] = 0;
        }
        *(_QWORD *)(a1 + 16) = v10;
        return;
      }
    }
    v7 = *(_QWORD *)(a1 + 8);
    v2 = *(_QWORD *)(a1 + 16) - 24;
    *(_QWORD *)(a1 + 16) = v2;
    if (v7 != v2)
      continue;
    break;
  }
}

void llvm::initializePseudoProbeInserterPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7FDF70);
  if (v1 != -1)
  {
    v4[0] = sub_1C520B6BC;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7FDF70, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C520B6BC(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetPassConfigPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Insert pseudo probe annotations for value profiling";
  *(_QWORD *)(v2 + 8) = 51;
  *(_QWORD *)(v2 + 16) = "pseudo-probe-inserter";
  *(_QWORD *)(v2 + 24) = 21;
  *(_QWORD *)(v2 + 32) = &unk_1ED7FDF68;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C520B83C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::createPseudoProbeInserter(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C520B778(v1);
}

uint64_t sub_1C520B778(uint64_t a1)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  v2 = sub_1C4776848(a1, (uint64_t)&unk_1ED7FDF68);
  *(_QWORD *)v2 = &off_1E8148AB8;
  *(_BYTE *)(v2 + 248) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1ED7FDF70);
  if (v4 != -1)
  {
    v8[0] = sub_1C520B6BC;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1ED7FDF70, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C520B83C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C520B778(v0);
}

void sub_1C520B864(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C520B8F8(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C520B984()
{
  return "Pseudo Probe Inserter";
}

uint64_t sub_1C520B994(uint64_t a1, uint64_t a2)
{
  const char *v3;
  __int16 v4;

  v3 = "llvm.pseudo_probe_desc";
  v4 = 259;
  *(_BYTE *)(a1 + 248) = llvm::Module::getNamedMetadata(a2, (uint64_t)&v3) != 0;
  return 0;
}

void *sub_1C520B9EC(llvm::MachineFunctionPass *this, llvm::AnalysisUsage *a2)
{
  *((_BYTE *)a2 + 160) = 1;
  return llvm::MachineFunctionPass::getAnalysisUsage(this, a2);
}

uint64_t sub_1C520B9F8(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  llvm::MachineFunction *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int *v28;
  size_t v29;
  size_t v30;
  uint64_t v31;
  _QWORD *v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  char *v71;
  char *v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v76;
  _QWORD *v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79[2];
  void *v80[2];
  _QWORD v81[20];

  v81[18] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 248)
    || (v76 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16)),
        v3 = *(_QWORD **)(a2 + 328),
        v77 = (_QWORD *)(a2 + 320),
        v3 == (_QWORD *)(a2 + 320)))
  {
    v4 = 0;
    return v4 & 1;
  }
  v4 = 0;
  do
  {
    v5 = v3 + 6;
    v6 = v3[7];
    if ((_QWORD *)v6 == v3 + 6)
      goto LABEL_135;
    v7 = 0;
    v8 = v3 + 5;
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8);
      if ((v9 & 8) == 0)
        v7 = (unint64_t *)v6;
      if ((*(_WORD *)(v6 + 44) & 0xC) == 0 || (*(_WORD *)(v6 + 44) & 4) != 0)
      {
        if ((v9 & 0x80) == 0)
          goto LABEL_66;
LABEL_13:
        v11 = *(_QWORD *)(v6 + 56);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 - 8 * *(unsigned int *)(v11 + 8));
          if (*(_BYTE *)v12 == 19)
          {
            v13 = *(unsigned int *)(v12 + 24);
            if (v13 >= 8 && (*(_DWORD *)(v12 + 24) & 7) == 7)
            {
              v78 = *(unsigned __int8 **)(v6 + 56);
              llvm::MetadataTracking::track((uint64_t)&v78, (unsigned __int8 *)v11, 2);
              v15 = *(_QWORD *)(v76 + 8) + 1104;
              if ((*(_WORD *)(v6 + 44) & 4) != 0)
              {
                v16 = (llvm::MachineFunction *)v3[4];
                v79[0] = v78;
                if (v78)
                  llvm::MetadataTracking::track((uint64_t)v79, v78, 2);
                v17 = *((_QWORD *)v16 + 28);
                if (v17)
                  *((_QWORD *)v16 + 28) = *(_QWORD *)v17;
                else
                  v17 = sub_1C484358C((uint64_t)v16 + 128, 72, 3);
                v80[0] = v79[0];
                if (v79[0])
                {
                  llvm::MetadataTracking::retrack((uint64_t)v79, v79[0], (uint64_t)v80);
                  v79[0] = 0;
                }
                llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v17, v16, v15, (unsigned __int8 **)v80, 0);
                if (v80[0])
                  llvm::MetadataTracking::untrack((uint64_t)v80, (unsigned __int8 *)v80[0]);
                if (v79[0])
                  llvm::MetadataTracking::untrack((uint64_t)v79, v79[0]);
                if (v5 != (_QWORD *)v6 && (*(_WORD *)(v6 + 44) & 4) != 0)
                  *(_WORD *)(v17 + 44) |= 0xCu;
                sub_1C512CA10(v3 + 5, (uint64_t *)v6, v17);
              }
              else
              {
                v16 = (llvm::MachineFunction *)v3[4];
                v79[0] = v78;
                if (v78)
                  llvm::MetadataTracking::track((uint64_t)v79, v78, 2);
                v17 = *((_QWORD *)v16 + 28);
                if (v17)
                  *((_QWORD *)v16 + 28) = *(_QWORD *)v17;
                else
                  v17 = sub_1C484358C((uint64_t)v16 + 128, 72, 3);
                v80[0] = v79[0];
                if (v79[0])
                {
                  llvm::MetadataTracking::retrack((uint64_t)v79, v79[0], (uint64_t)v80);
                  v79[0] = 0;
                }
                llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v17, v16, v15, (unsigned __int8 **)v80, 0);
                if (v80[0])
                  llvm::MetadataTracking::untrack((uint64_t)v80, (unsigned __int8 *)v80[0]);
                if (v79[0])
                  llvm::MetadataTracking::untrack((uint64_t)v79, v79[0]);
                v19 = *v8;
                *(_QWORD *)(v17 + 24) = *v8;
                v20 = *(_QWORD *)(v19 + 32);
                v21 = *(unsigned int *)(v17 + 40);
                if ((_DWORD)v21)
                {
                  v34 = *(_QWORD *)(v17 + 32);
                  v35 = *(_QWORD *)(v20 + 40);
                  v36 = 32 * v21;
                  do
                  {
                    if (!*(_BYTE *)v34)
                    {
                      v37 = *(unsigned int *)(v34 + 4);
                      if ((int)v37 >= 0)
                        v38 = (uint64_t *)(*(_QWORD *)(v35 + 272) + 8 * v37);
                      else
                        v38 = (uint64_t *)(*(_QWORD *)(v35 + 24) + 16 * (v37 & 0x7FFFFFFF) + 8);
                      v39 = *v38;
                      if (*v38)
                      {
                        v40 = *(_QWORD *)(v39 + 16);
                        *(_QWORD *)(v39 + 16) = v34;
                        *(_QWORD *)(v34 + 16) = v40;
                        if ((*(_BYTE *)(v34 + 3) & 1) != 0)
                        {
                          *(_QWORD *)(v34 + 24) = v39;
                        }
                        else
                        {
                          *(_QWORD *)(v34 + 24) = 0;
                          v38 = (uint64_t *)(v40 + 24);
                        }
                      }
                      else
                      {
                        *(_QWORD *)(v34 + 16) = v34;
                        *(_QWORD *)(v34 + 24) = 0;
                      }
                      *v38 = v34;
                    }
                    v34 += 32;
                    v36 -= 32;
                  }
                  while (v36);
                }
                v22 = *(_QWORD *)(v20 + 728);
                if (v22)
                  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v22 + 24))(v22, v17);
                v23 = *(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v17 = v23 | *(_QWORD *)v17 & 7;
                *(_QWORD *)(v17 + 8) = v6;
                *(_QWORD *)(v23 + 8) = v17;
                *(_QWORD *)v6 = *(_QWORD *)v6 & 7 | v17;
              }
              for (i = *(_QWORD *)(v11 - 8 * *(unsigned int *)(v11 + 8));
                    (*(_BYTE *)i & 0xFE) == 0x12;
              v25 = i - 8 * *(unsigned int *)(i + 8);
              v26 = *(_QWORD *)(v25 + 24);
              if (!v26 || (v27 = *(_QWORD **)(v26 + 8), v30 = *v27, v28 = (int *)(v27 + 3), (v29 = v30) == 0))
              {
                v31 = *(_QWORD *)(v25 + 16);
                if (v31)
                {
                  v32 = *(_QWORD **)(v31 + 8);
                  v33 = *v32;
                  v28 = (int *)(v32 + 3);
                  v29 = v33;
                }
                else
                {
                  v29 = 0;
                  v28 = 0;
                }
              }
              *(_OWORD *)v80 = xmmword_1C85F4BB0;
              v81[0] = 0;
              llvm::MD5::update((int *)v80, v28, v29);
              llvm::MD5::final((int *)v80, (int *)v79);
              LODWORD(v80[0]) = 1;
              v80[1] = 0;
              v81[0] = v79[0];
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v17, v16, (const llvm::MachineOperand *)v80);
              LODWORD(v80[0]) = 1;
              v80[1] = 0;
              v81[0] = (unsigned __int16)(v13 >> 3);
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v17, v16, (const llvm::MachineOperand *)v80);
              LODWORD(v80[0]) = 1;
              v80[1] = 0;
              v81[0] = (v13 >> 26) & 7;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v17, v16, (const llvm::MachineOperand *)v80);
              LODWORD(v80[0]) = 1;
              v80[1] = 0;
              v81[0] = v13 >> 29;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v17, v16, (const llvm::MachineOperand *)v80);
              if (v78)
                llvm::MetadataTracking::untrack((uint64_t)&v78, v78);
              v4 = 1;
            }
          }
        }
        goto LABEL_66;
      }
      v18 = v6;
      if ((v9 & 0x80) != 0)
        goto LABEL_13;
      while ((*(_WORD *)(v18 + 44) & 8) != 0)
      {
        v18 = *(_QWORD *)(v18 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v18 + 16) + 8) & 0x80) != 0)
          goto LABEL_13;
      }
LABEL_66:
      if ((*(_BYTE *)v6 & 4) == 0)
      {
        while ((*(_WORD *)(v6 + 44) & 8) != 0)
          v6 = *(_QWORD *)(v6 + 8);
      }
      v6 = *(_QWORD *)(v6 + 8);
    }
    while ((_QWORD *)v6 != v5);
    if (v7)
    {
      v41 = *v5 & 0xFFFFFFFFFFFFFFF8;
      if (!v41 || (*(_BYTE *)v41 & 4) == 0)
      {
        while ((*(_WORD *)(v41 + 44) & 4) != 0)
          v41 = *(_QWORD *)v41 & 0xFFFFFFFFFFFFFFF8;
      }
      if ((_QWORD *)v41 != v5)
      {
        do
        {
          v42 = *(_QWORD *)(v41 + 16);
          if ((*(_BYTE *)(v42 + 8) & 8) == 0)
            break;
          v43 = *(_QWORD *)v41 & 0xFFFFFFFFFFFFFFF8;
          if (!v43 || (*(_BYTE *)v43 & 4) == 0)
          {
            while ((*(_WORD *)(v43 + 44) & 4) != 0)
              v43 = *(_QWORD *)v43 & 0xFFFFFFFFFFFFFFF8;
          }
          if (*(_WORD *)v42 == 23)
          {
            v44 = *(_QWORD *)(*(_QWORD *)(v41 + 24) + 32);
            if (v44)
            {
              v45 = *(_QWORD *)(v44 + 728);
              if (v45)
                (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v45 + 32))(v45, v41);
              v46 = *(unsigned int *)(v41 + 40);
              if ((_DWORD)v46)
              {
                v47 = *(_QWORD *)(v41 + 32);
                v48 = *(_QWORD *)(v44 + 40);
                v49 = 32 * v46;
                do
                {
                  if (!*(_BYTE *)v47)
                  {
                    v50 = *(unsigned int *)(v47 + 4);
                    if ((v50 & 0x80000000) != 0)
                      v51 = (uint64_t *)(*(_QWORD *)(v48 + 24) + 16 * (v50 & 0x7FFFFFFF) + 8);
                    else
                      v51 = (uint64_t *)(*(_QWORD *)(v48 + 272) + 8 * v50);
                    v52 = *v51;
                    v54 = *(_QWORD *)(v47 + 16);
                    v53 = *(_QWORD *)(v47 + 24);
                    if (v47 != *v51)
                      v51 = (uint64_t *)(v54 + 24);
                    *v51 = v53;
                    if (v53)
                      v55 = v53;
                    else
                      v55 = v52;
                    *(_QWORD *)(v55 + 16) = v54;
                    *(_QWORD *)(v47 + 16) = 0;
                    *(_QWORD *)(v47 + 24) = 0;
                  }
                  v47 += 32;
                  v49 -= 32;
                }
                while (v49);
              }
            }
            v56 = *(unint64_t **)(v41 + 8);
            v57 = *(_QWORD *)v41 & 0xFFFFFFFFFFFFFFF8;
            *v56 = v57 | *v56 & 7;
            *(_QWORD *)(v57 + 8) = v56;
            *(_QWORD *)v41 &= 7uLL;
            *(_QWORD *)(v41 + 8) = 0;
            v58 = *v8;
            *(_QWORD *)(v41 + 24) = *v8;
            v59 = *(_QWORD *)(v58 + 32);
            v60 = *(unsigned int *)(v41 + 40);
            if ((_DWORD)v60)
            {
              v63 = *(_QWORD *)(v41 + 32);
              v64 = *(_QWORD *)(v59 + 40);
              v65 = 32 * v60;
              do
              {
                if (!*(_BYTE *)v63)
                {
                  v66 = *(unsigned int *)(v63 + 4);
                  if ((int)v66 >= 0)
                    v67 = (uint64_t *)(*(_QWORD *)(v64 + 272) + 8 * v66);
                  else
                    v67 = (uint64_t *)(*(_QWORD *)(v64 + 24) + 16 * (v66 & 0x7FFFFFFF) + 8);
                  v68 = *v67;
                  if (*v67)
                  {
                    v69 = *(_QWORD *)(v68 + 16);
                    *(_QWORD *)(v68 + 16) = v63;
                    *(_QWORD *)(v63 + 16) = v69;
                    if ((*(_BYTE *)(v63 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v63 + 24) = v68;
                    }
                    else
                    {
                      *(_QWORD *)(v63 + 24) = 0;
                      v67 = (uint64_t *)(v69 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v63 + 16) = v63;
                    *(_QWORD *)(v63 + 24) = 0;
                  }
                  *v67 = v63;
                }
                v63 += 32;
                v65 -= 32;
              }
              while (v65);
            }
            v61 = *(_QWORD *)(v59 + 728);
            if (v61)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v61 + 24))(v61, v41);
            v62 = *v7 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v41 = v62 | *(_QWORD *)v41 & 7;
            *(_QWORD *)(v41 + 8) = v7;
            *(_QWORD *)(v62 + 8) = v41;
            *v7 = *v7 & 7 | v41;
            v4 = 1;
          }
          v41 = v43;
        }
        while ((_QWORD *)v43 != v5);
      }
      goto LABEL_156;
    }
    v6 = v3[7];
LABEL_135:
    v80[0] = v81;
    v80[1] = (void *)0x400000000;
    if ((_QWORD *)v6 != v5)
    {
      v70 = 0;
      do
      {
        if (**(_WORD **)(v6 + 16) == 23)
        {
          if (v70 >= HIDWORD(v80[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v80, (uint64_t)v81, v70 + 1, 8);
            v70 = v80[1];
          }
          *((_QWORD *)v80[0] + v70) = v6;
          v70 = ++LODWORD(v80[1]);
        }
        if ((*(_BYTE *)v6 & 4) == 0)
        {
          while ((*(_WORD *)(v6 + 44) & 8) != 0)
            v6 = *(_QWORD *)(v6 + 8);
        }
        v6 = *(_QWORD *)(v6 + 8);
      }
      while ((_QWORD *)v6 != v5);
      v71 = (char *)v80[0];
      if (v70)
      {
        v72 = (char *)v80[0] + 8 * v70;
        do
        {
          v73 = *(_BYTE **)v71;
          v74 = *(_BYTE **)v71;
          if ((**(_BYTE **)v71 & 4) == 0)
          {
            v74 = *(_BYTE **)v71;
            if ((*((_WORD *)v73 + 22) & 8) != 0)
            {
              v74 = *(_BYTE **)v71;
              do
                v74 = (_BYTE *)*((_QWORD *)v74 + 1);
              while ((*((_WORD *)v74 + 22) & 8) != 0);
            }
          }
          sub_1C487FE80(*((_QWORD *)v73 + 3) + 40, (uint64_t)v73, *((_QWORD *)v74 + 1));
          v71 += 8;
        }
        while (v71 != v72);
        v70 = v80[1];
        v71 = (char *)v80[0];
      }
      v4 |= v70 != 0;
      if (v71 != (char *)v81)
        free(v71);
    }
LABEL_156:
    v3 = (_QWORD *)v3[1];
  }
  while (v3 != v77);
  return v4 & 1;
}

uint64_t llvm::PseudoSourceValue::PseudoSourceValue(uint64_t a1, int a2, uint64_t a3)
{
  *(_QWORD *)a1 = &off_1E8148B78;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 632))(a3);
  return a1;
}

{
  *(_QWORD *)a1 = &off_1E8148B78;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 632))(a3);
  return a1;
}

BOOL llvm::PseudoSourceValue::isConstant(llvm::PseudoSourceValue *this, const llvm::MachineFrameInfo *a2)
{
  return *((_DWORD *)this + 2) != 0;
}

uint64_t llvm::PseudoSourceValue::isAliased(llvm::PseudoSourceValue *this, const llvm::MachineFrameInfo *a2)
{
  return 0;
}

BOOL llvm::PseudoSourceValue::mayAlias(llvm::PseudoSourceValue *this, const llvm::MachineFrameInfo *a2)
{
  return (*((_DWORD *)this + 2) - 4) < 0xFFFFFFFD;
}

BOOL llvm::FixedStackPseudoSourceValue::isConstant(llvm::FixedStackPseudoSourceValue *this, const llvm::MachineFrameInfo *a2)
{
  return a2
      && !*((_BYTE *)a2 + 654)
      && *(_BYTE *)(*((_QWORD *)a2 + 1) + 40 * (*((_DWORD *)a2 + 8) + *((_DWORD *)this + 4)) + 17) != 0;
}

uint64_t llvm::CallEntryPseudoSourceValue::CallEntryPseudoSourceValue(uint64_t a1, int a2, uint64_t a3)
{
  *(_QWORD *)a1 = &off_1E8148B78;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 632))(a3);
  *(_QWORD *)a1 = &off_1E8148BF0;
  return a1;
}

{
  *(_QWORD *)a1 = &off_1E8148B78;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 632))(a3);
  *(_QWORD *)a1 = &off_1E8148BF0;
  return a1;
}

uint64_t llvm::CallEntryPseudoSourceValue::isConstant(llvm::CallEntryPseudoSourceValue *this, const llvm::MachineFrameInfo *a2)
{
  return 0;
}

uint64_t llvm::CallEntryPseudoSourceValue::isAliased(llvm::CallEntryPseudoSourceValue *this, const llvm::MachineFrameInfo *a2)
{
  return 0;
}

uint64_t llvm::CallEntryPseudoSourceValue::mayAlias(llvm::CallEntryPseudoSourceValue *this, const llvm::MachineFrameInfo *a2)
{
  return 0;
}

uint64_t llvm::GlobalValuePseudoSourceValue::GlobalValuePseudoSourceValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = &off_1E8148B78;
  *(_DWORD *)(a1 + 8) = 5;
  *(_DWORD *)(a1 + 12) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 632))(a3, 5);
  *(_QWORD *)a1 = &off_1E8148C30;
  *(_QWORD *)(a1 + 16) = a2;
  return a1;
}

{
  *(_QWORD *)a1 = &off_1E8148B78;
  *(_DWORD *)(a1 + 8) = 5;
  *(_DWORD *)(a1 + 12) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 632))(a3, 5);
  *(_QWORD *)a1 = &off_1E8148C30;
  *(_QWORD *)(a1 + 16) = a2;
  return a1;
}

uint64_t llvm::ExternalSymbolPseudoSourceValue::ExternalSymbolPseudoSourceValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = &off_1E8148B78;
  *(_DWORD *)(a1 + 8) = 6;
  *(_DWORD *)(a1 + 12) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 632))(a3, 6);
  *(_QWORD *)a1 = &off_1E8148C70;
  *(_QWORD *)(a1 + 16) = a2;
  return a1;
}

{
  *(_QWORD *)a1 = &off_1E8148B78;
  *(_DWORD *)(a1 + 8) = 6;
  *(_DWORD *)(a1 + 12) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 632))(a3, 6);
  *(_QWORD *)a1 = &off_1E8148C70;
  *(_QWORD *)(a1 + 16) = a2;
  return a1;
}

uint64_t *llvm::PseudoSourceValueManager::PseudoSourceValueManager(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  *a1 = a2;
  a1[1] = (uint64_t)&off_1E8148B78;
  *((_DWORD *)a1 + 4) = 0;
  *((_DWORD *)a1 + 5) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 632))(a2, 0);
  v3 = *a1;
  a1[3] = (uint64_t)&off_1E8148B78;
  *((_DWORD *)a1 + 8) = 1;
  *((_DWORD *)a1 + 9) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 632))(v3, 1);
  v4 = *a1;
  a1[5] = (uint64_t)&off_1E8148B78;
  *((_DWORD *)a1 + 12) = 2;
  *((_DWORD *)a1 + 13) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 632))(v4, 2);
  v5 = *a1;
  a1[7] = (uint64_t)&off_1E8148B78;
  *((_DWORD *)a1 + 16) = 3;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 632))(v5, 3);
  a1[10] = 0;
  *((_DWORD *)a1 + 17) = v6;
  a1[9] = (uint64_t)(a1 + 10);
  a1[11] = 0;
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0x1000000000;
  *((_DWORD *)a1 + 36) = 128;
  v7 = (char *)operator new(0x1800uLL, (std::align_val_t)8uLL);
  a1[16] = (uint64_t)v7;
  a1[17] = 0;
  v8 = *((unsigned int *)a1 + 36);
  if ((_DWORD)v8)
  {
    v9 = 48 * v8;
    v10 = v7 + 16;
    do
    {
      *v10 = 0;
      v10[1] = -4096;
      *(v10 - 2) = &off_1E8148CF0;
      *(v10 - 1) = 2;
      v10[2] = 0;
      v10 += 6;
      v9 -= 48;
    }
    while (v9);
  }
  *((_BYTE *)a1 + 152) = 0;
  *((_BYTE *)a1 + 176) = 0;
  return a1;
}

uint64_t llvm::PseudoSourceValueManager::getStack(llvm::PseudoSourceValueManager *this)
{
  return (uint64_t)this + 8;
}

uint64_t llvm::PseudoSourceValueManager::getGOT(llvm::PseudoSourceValueManager *this)
{
  return (uint64_t)this + 24;
}

uint64_t *llvm::PseudoSourceValueManager::getFixedStack(uint64_t **this, int a2)
{
  uint64_t **v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t *v6;
  int v7;
  int v8;
  uint64_t *v9;
  int v11;
  int *v12;

  v11 = a2;
  v12 = &v11;
  v3 = sub_1C511D14C(this + 9, &v11, (uint64_t)&std::piecewise_construct, &v12);
  v4 = (uint64_t)v3[5];
  if (!v4)
  {
    v5 = v3;
    v6 = *this;
    v4 = operator new();
    v7 = v11;
    *(_DWORD *)(v4 + 8) = 4;
    v8 = (*(uint64_t (**)(uint64_t *, uint64_t))(*v6 + 632))(v6, 4);
    *(_QWORD *)v4 = &off_1E8148CB0;
    *(_DWORD *)(v4 + 12) = v8;
    *(_DWORD *)(v4 + 16) = v7;
    v9 = v5[5];
    v5[5] = (uint64_t *)v4;
    if (v9)
    {
      (*(void (**)(uint64_t *))(*v9 + 16))(v9);
      return v5[5];
    }
  }
  return (uint64_t *)v4;
}

uint64_t llvm::PseudoSourceValueManager::getGlobalValueCallEntry(llvm::PseudoSourceValueManager *this, const llvm::GlobalValue *a2)
{
  char *v4;
  const llvm::GlobalValue *v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  const llvm::GlobalValue *v9;
  int32x2_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  const llvm::GlobalValue **v15;
  const llvm::GlobalValue *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v23;
  const llvm::GlobalValue *v24;
  const llvm::GlobalValue *v25;
  BOOL v26;
  uint64_t v28;
  _QWORD *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  int32x2_t *v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t (**v43)(llvm::CallbackVH *__hidden);
  uint64_t v44;
  unint64_t *v45;
  const llvm::GlobalValue *v46;
  char *v47;
  uint64_t v48;

  v4 = (char *)this + 128;
  v44 = 2;
  v45 = 0;
  v46 = a2;
  v5 = a2;
  if (a2 != (const llvm::GlobalValue *)-8192)
  {
    v5 = a2;
    if (a2 != (const llvm::GlobalValue *)-4096)
    {
      v5 = a2;
      if (a2)
      {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v44);
        v5 = v46;
      }
    }
  }
  v43 = &off_1E8148CF0;
  v47 = v4;
  v48 = 0;
  v6 = sub_1C6179BF0(*((_QWORD *)this + 16), *((_DWORD *)this + 36), (uint64_t)v5, &v48);
  v7 = v48;
  if ((v6 & 1) == 0)
  {
    v23 = (_QWORD *)sub_1C6209D6C((uint64_t)v4, (uint64_t)&v43, v48);
    v7 = (uint64_t)v23;
    v24 = (const llvm::GlobalValue *)v23[3];
    v25 = v46;
    if (v24 != v46)
    {
      v26 = v24 == (const llvm::GlobalValue *)-4096 || v24 == 0;
      if (!v26 && v24 != (const llvm::GlobalValue *)-8192)
      {
        v31 = v23[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v31 = v23[2];
        v32 = (unint64_t *)v23[2];
        if (v32)
        {
          *v32 = *v32 & 7 | v31;
        }
        else
        {
          v33 = v23[3];
          v34 = ***(int32x2_t ****)v33;
          v35 = (unint64_t)v34[303];
          if (v35 <= v31)
          {
            v36 = v34[305].u32[0];
            if (v35 + 16 * v36 > v31)
            {
              v37 = v36 - 1;
              LODWORD(v38) = v37 & ((v33 >> 4) ^ (v33 >> 9));
              v39 = (uint64_t *)(v35 + 16 * v38);
              v40 = *v39;
              if (v33 == *v39)
              {
LABEL_47:
                *v39 = -8192;
                v34[304] = vadd_s32(v34[304], (int32x2_t)0x1FFFFFFFFLL);
                v33 = v23[3];
              }
              else
              {
                v41 = 1;
                while (v40 != -4096)
                {
                  v42 = v38 + v41++;
                  v38 = v42 & v37;
                  v40 = *(_QWORD *)(v35 + 16 * v38);
                  if (v33 == v40)
                  {
                    v39 = (uint64_t *)(v35 + 16 * v38);
                    goto LABEL_47;
                  }
                }
              }
              *(_BYTE *)(v33 + 17) &= ~1u;
            }
          }
        }
        v25 = v46;
      }
      v23[3] = v25;
      if (v25 != (const llvm::GlobalValue *)-4096 && v25 != (const llvm::GlobalValue *)-8192 && v25 != 0)
      {
        v28 = v44;
        v29 = (_QWORD *)(v44 & 0xFFFFFFFFFFFFFFF8);
        v23[2] = *(_QWORD *)(v44 & 0xFFFFFFFFFFFFFFF8);
        *v29 = v23 + 1;
        v23[1] = v28 & 0xFFFFFFFFFFFFFFF8 | v23[1] & 7;
        v30 = (unint64_t *)v23[2];
        if (v30)
          *v30 = *v30 & 7 | (unint64_t)(v23 + 2);
      }
    }
    v23[4] = v47;
    v23[5] = 0;
  }
  if (v46 != (const llvm::GlobalValue *)-8192 && v46 != (const llvm::GlobalValue *)-4096 && v46)
  {
    v8 = v44 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v44 & 0xFFFFFFFFFFFFFFF8) = v45;
    if (v45)
    {
      *v45 = *v45 & 7 | v8;
    }
    else
    {
      v9 = v46;
      v10 = ***(int32x2_t ****)v46;
      v11 = (unint64_t)v10[303];
      if (v11 <= v8)
      {
        v12 = v10[305].u32[0];
        if (v11 + 16 * v12 > v8)
        {
          v13 = v12 - 1;
          LODWORD(v14) = v13 & ((v46 >> 4) ^ (v46 >> 9));
          v15 = (const llvm::GlobalValue **)(v11 + 16 * v14);
          v16 = *v15;
          if (v46 == *v15)
          {
LABEL_17:
            *v15 = (const llvm::GlobalValue *)-8192;
            v10[304] = vadd_s32(v10[304], (int32x2_t)0x1FFFFFFFFLL);
            v9 = v46;
          }
          else
          {
            v17 = 1;
            while (v16 != (const llvm::GlobalValue *)-4096)
            {
              v18 = v14 + v17++;
              v14 = v18 & v13;
              v16 = *(const llvm::GlobalValue **)(v11 + 16 * v14);
              if (v46 == v16)
              {
                v15 = (const llvm::GlobalValue **)(v11 + 16 * v14);
                goto LABEL_17;
              }
            }
          }
          *((_BYTE *)v9 + 17) &= ~1u;
        }
      }
    }
  }
  v19 = *(_QWORD *)(v7 + 40);
  if (!v19)
  {
    v20 = *(_QWORD *)this;
    v19 = operator new();
    *(_DWORD *)(v19 + 8) = 5;
    *(_DWORD *)(v19 + 12) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 632))(v20, 5);
    *(_QWORD *)v19 = &off_1E8148C30;
    *(_QWORD *)(v19 + 16) = a2;
    v21 = *(_QWORD *)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v19;
    if (v21)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
      return *(_QWORD *)(v7 + 40);
    }
  }
  return v19;
}

uint64_t llvm::PseudoSourceValueManager::getExternalSymbolCallEntry(llvm::PseudoSourceValueManager *this, const char *__s)
{
  const char *v2;
  size_t v4;
  unsigned int v5;
  int v6;
  size_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  const char *v18;
  _QWORD *v19;
  size_t *v20;
  char *v21;
  _QWORD **i;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v28;
  const char *__s1;

  v2 = __s;
  if (__s)
    v4 = strlen(__s);
  else
    v4 = 0;
  v5 = *((_DWORD *)this + 26);
  if (!v5)
  {
    *((_DWORD *)this + 27) = 0;
    *((_DWORD *)this + 28) = 0;
    v28 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v28)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v28[16] = 2;
    *((_QWORD *)this + 12) = v28;
    v5 = 16;
    *((_DWORD *)this + 26) = 16;
  }
  __s1 = v2;
  v6 = 0;
  if (v4)
  {
    v7 = v4;
    do
    {
      v8 = *(unsigned __int8 *)v2++;
      v6 = 33 * v6 + v8;
      --v7;
    }
    while (v7);
  }
  v9 = *((_QWORD *)this + 12);
  v10 = v5 - 1;
  v11 = v9 + 8 * v5 + 8;
  v12 = -1;
  v13 = 1;
  v14 = v6;
  while (1)
  {
    v15 = v14 & v10;
    v16 = *(_QWORD **)(v9 + 8 * v15);
    if (!v16)
      break;
    if (v16 == (_QWORD *)-8)
    {
      if (v12 == -1)
        v12 = v14 & v10;
    }
    else if (*(_DWORD *)(v11 + 4 * v15) == v6
           && v4 == *v16
           && (!v4 || !memcmp(__s1, (char *)v16 + *((unsigned int *)this + 29), v4)))
    {
      goto LABEL_23;
    }
    v14 = v13 + v15;
    ++v13;
  }
  v17 = v12;
  if (v12 == -1)
  {
    v17 = v15;
    v15 = v15;
  }
  else
  {
    v15 = v12;
  }
  *(_DWORD *)(v11 + 4 * v17) = v6;
  v16 = *(_QWORD **)(v9 + 8 * v15);
LABEL_23:
  if (v16 == (_QWORD *)-8)
  {
    --*((_DWORD *)this + 28);
    v18 = __s1;
  }
  else
  {
    v18 = __s1;
    if (v16)
      goto LABEL_36;
  }
  v19 = operator new(v4 + 17, (std::align_val_t)8uLL);
  v20 = v19;
  v21 = (char *)(v19 + 2);
  if (v4)
    memcpy(v19 + 2, v18, v4);
  v21[v4] = 0;
  *v20 = v4;
  v20[1] = 0;
  *(_QWORD *)(v9 + 8 * v15) = v20;
  ++*((_DWORD *)this + 27);
  for (i = (_QWORD **)(*((_QWORD *)this + 12)
                      + 8
                      * llvm::StringMapImpl::RehashTable((llvm::PseudoSourceValueManager *)((char *)this + 96), v15)); ; ++i)
  {
    v16 = *i;
    if (*i && v16 + 1 != 0)
      break;
  }
LABEL_36:
  v24 = v16[1];
  if (!v24)
  {
    v25 = *(_QWORD *)this;
    v24 = operator new();
    *(_DWORD *)(v24 + 8) = 6;
    *(_DWORD *)(v24 + 12) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 632))(v25, 6);
    *(_QWORD *)v24 = &off_1E8148C70;
    *(_QWORD *)(v24 + 16) = v18;
    v26 = v16[1];
    v16[1] = v24;
    if (v26)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
      return v16[1];
    }
  }
  return v24;
}

void sub_1C520CD94()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C520CDAC()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C520CDC4()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C520CDDC()
{
  JUMPOUT(0x1CAA32FC0);
}

char *sub_1C520CDF0(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(48 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6209E1C((_QWORD *)a1, v4, &v4[6 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 48 * v10;
    v12 = result + 16;
    do
    {
      *v12 = 0;
      v12[1] = -4096;
      *(v12 - 2) = &off_1E8148CF0;
      *(v12 - 1) = 2;
      v12[2] = 0;
      v12 += 6;
      v11 -= 48;
    }
    while (v11);
  }
  return result;
}

llvm::raw_ostream *llvm::rdf::operator<<(llvm::raw_ostream *this, uint64_t *a2)
{
  _BYTE *v4;
  uint64_t v5;
  void (**v6)(void);
  _QWORD v8[3];
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*a2 != -1)
  {
    v4 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v4 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this, 58);
    }
    else
    {
      *((_QWORD *)this + 4) = v4 + 1;
      *v4 = 58;
    }
    v5 = *a2;
    v10 = v9;
    v9[0] = &off_1E81433A0;
    v9[1] = v5;
    v8[0] = &unk_1E8133270;
    v8[1] = "%016llX";
    v8[2] = v5;
    llvm::raw_ostream::operator<<(this, (uint64_t)v8);
    if (v10 == v9)
    {
      v6 = (void (**)(void))(v9[0] + 32);
      goto LABEL_9;
    }
    if (v10)
    {
      v6 = (void (**)(void))(*v10 + 40);
LABEL_9:
      (*v6)();
    }
  }
  return this;
}

llvm::raw_ostream *llvm::rdf::operator<<(llvm::raw_ostream *this, unsigned int **a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  size_t v8;
  void *v9;
  _BYTE *v10;
  uint64_t v12;

  v4 = **a2;
  if (v4 && (v5 = *((_QWORD *)a2[1] + 2), v4 < *(_DWORD *)(v5 + 16)))
  {
    v6 = *(_QWORD *)(v5 + 72);
    if (v6)
    {
      v7 = (const char *)(v6 + *(unsigned int *)(*(_QWORD *)(v5 + 8) + 24 * v4));
      v8 = strlen(v7);
      v9 = (void *)*((_QWORD *)this + 4);
      if (v8 <= *((_QWORD *)this + 3) - (_QWORD)v9)
      {
        if (v8)
        {
          memcpy(v9, v7, v8);
          *((_QWORD *)this + 4) += v8;
        }
      }
      else
      {
        llvm::raw_ostream::write(this, v7, v8);
      }
    }
  }
  else
  {
    v10 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v10 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this, 35);
    }
    else
    {
      *((_QWORD *)this + 4) = v10 + 1;
      *v10 = 35;
    }
    sub_1C5E21910(this, **a2, 0, 0, 0);
  }
  v12 = *((_QWORD *)*a2 + 1);
  return llvm::rdf::operator<<(this, &v12);
}

llvm::raw_ostream *llvm::rdf::operator<<(char **this, unsigned int **a2)
{
  llvm::raw_ostream *v3;
  __int16 v4;
  int v5;
  char *v6;
  char v7;
  char *v8;
  char v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  __int16 *v13;
  const char *v14;
  _BYTE *v15;
  __int16 v17;

  v3 = (llvm::raw_ostream *)this;
  v4 = *(_WORD *)(*(_QWORD *)(*((_QWORD *)a2[1] + 37) + 8 * ((**a2 - 1) >> a2[1][69])) + 32 * (a2[1][70] & (**a2 - 1)));
  v5 = v4 & 0x1C;
  if ((v4 & 3) != 2)
  {
    if ((v4 & 3) == 1)
    {
      switch((v5 - 12) >> 2)
      {
        case 0u:
          v6 = this[4];
          if (v6 < this[3])
          {
            this[4] = v6 + 1;
            v7 = 112;
            goto LABEL_47;
          }
          v9 = 112;
          goto LABEL_53;
        case 1u:
          v6 = this[4];
          if (v6 < this[3])
          {
            this[4] = v6 + 1;
            v7 = 115;
            goto LABEL_47;
          }
          v9 = 115;
          goto LABEL_53;
        case 2u:
          goto LABEL_33;
        case 3u:
          v6 = this[4];
          if (v6 < this[3])
          {
            this[4] = v6 + 1;
            v7 = 102;
            goto LABEL_47;
          }
          v9 = 102;
          goto LABEL_53;
        default:
          v13 = (__int16 *)this[4];
          if ((unint64_t)(this[3] - (char *)v13) <= 1)
          {
            v14 = "c?";
            goto LABEL_42;
          }
          v17 = 16227;
          break;
      }
      goto LABEL_61;
    }
    v6 = this[4];
    if (v6 < this[3])
    {
      this[4] = v6 + 1;
      v7 = 63;
LABEL_47:
      *v6 = v7;
      goto LABEL_54;
    }
    v9 = 63;
    goto LABEL_53;
  }
  if ((*(_WORD *)(*(_QWORD *)(*((_QWORD *)a2[1] + 37) + 8 * ((**a2 - 1) >> a2[1][69])) + 32
                                                                                          * (a2[1][70] & (**a2 - 1))) & 0x400) != 0)
  {
    v8 = this[4];
    if (v8 >= this[3])
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)this, 47);
    }
    else
    {
      this[4] = v8 + 1;
      *v8 = 47;
    }
  }
  if ((v4 & 0xFE0u) >= 0x800)
  {
    v10 = (_BYTE *)*((_QWORD *)v3 + 4);
    if ((unint64_t)v10 >= *((_QWORD *)v3 + 3))
    {
      llvm::raw_ostream::write(v3, 92);
      if ((v4 & 0x100) != 0)
        goto LABEL_21;
    }
    else
    {
      *((_QWORD *)v3 + 4) = v10 + 1;
      *v10 = 92;
      if ((v4 & 0x100) != 0)
        goto LABEL_21;
    }
LABEL_15:
    if ((v4 & 0x40) == 0)
      goto LABEL_28;
    goto LABEL_25;
  }
  if ((v4 & 0x100) == 0)
    goto LABEL_15;
LABEL_21:
  v11 = (_BYTE *)*((_QWORD *)v3 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)v3 + 3))
  {
    llvm::raw_ostream::write(v3, 43);
    if ((v4 & 0x40) == 0)
      goto LABEL_28;
  }
  else
  {
    *((_QWORD *)v3 + 4) = v11 + 1;
    *v11 = 43;
    if ((v4 & 0x40) == 0)
      goto LABEL_28;
  }
LABEL_25:
  v12 = (_BYTE *)*((_QWORD *)v3 + 4);
  if ((unint64_t)v12 >= *((_QWORD *)v3 + 3))
  {
    llvm::raw_ostream::write(v3, 126);
  }
  else
  {
    *((_QWORD *)v3 + 4) = v12 + 1;
    *v12 = 126;
  }
LABEL_28:
  switch(v5)
  {
    case 4:
      v6 = (char *)*((_QWORD *)v3 + 4);
      if ((unint64_t)v6 < *((_QWORD *)v3 + 3))
      {
        *((_QWORD *)v3 + 4) = v6 + 1;
        v7 = 100;
        goto LABEL_47;
      }
      this = (char **)v3;
      v9 = 100;
      goto LABEL_53;
    case 20:
LABEL_33:
      v6 = (char *)*((_QWORD *)v3 + 4);
      if ((unint64_t)v6 < *((_QWORD *)v3 + 3))
      {
        *((_QWORD *)v3 + 4) = v6 + 1;
        v7 = 98;
        goto LABEL_47;
      }
      this = (char **)v3;
      v9 = 98;
      goto LABEL_53;
    case 8:
      v6 = (char *)*((_QWORD *)v3 + 4);
      if ((unint64_t)v6 < *((_QWORD *)v3 + 3))
      {
        *((_QWORD *)v3 + 4) = v6 + 1;
        v7 = 117;
        goto LABEL_47;
      }
      this = (char **)v3;
      v9 = 117;
LABEL_53:
      llvm::raw_ostream::write((llvm::raw_ostream *)this, v9);
      goto LABEL_54;
  }
  v13 = (__int16 *)*((_QWORD *)v3 + 4);
  if (*((_QWORD *)v3 + 3) - (_QWORD)v13 > 1uLL)
  {
    v17 = 16242;
LABEL_61:
    *v13 = v17;
    *((_QWORD *)v3 + 4) += 2;
    goto LABEL_54;
  }
  v14 = "r?";
LABEL_42:
  llvm::raw_ostream::write(v3, v14, 2uLL);
LABEL_54:
  sub_1C5E21910(v3, **a2, 0, 0, 0);
  if ((v4 & 0x20) != 0)
  {
    v15 = (_BYTE *)*((_QWORD *)v3 + 4);
    if ((unint64_t)v15 >= *((_QWORD *)v3 + 3))
    {
      llvm::raw_ostream::write(v3, 34);
    }
    else
    {
      *((_QWORD *)v3 + 4) = v15 + 1;
      *v15 = 34;
    }
  }
  return v3;
}

llvm::raw_ostream *llvm::rdf::operator<<(llvm::raw_ostream *a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _WORD *v10;
  uint64_t v11;
  unsigned int *v13;
  uint64_t v14;
  int v15;

  sub_1C520D5F8((uint64_t)a1, **(llvm::rdf::RefNode ***)a2, *(unsigned int *)(*(_QWORD *)a2 + 8), *(unsigned int **)(a2 + 8));
  v4 = (_BYTE *)*((_QWORD *)a1 + 4);
  if ((unint64_t)v4 >= *((_QWORD *)a1 + 3))
  {
    llvm::raw_ostream::write(a1, 40);
  }
  else
  {
    *((_QWORD *)a1 + 4) = v4 + 1;
    *v4 = 40;
  }
  v15 = *(_DWORD *)(**(_QWORD **)a2 + 8);
  if (v15)
  {
    v5 = *(_QWORD *)(a2 + 8);
    v13 = (unsigned int *)&v15;
    v14 = v5;
    llvm::rdf::operator<<((char **)a1, &v13);
  }
  v6 = (_BYTE *)*((_QWORD *)a1 + 4);
  if ((unint64_t)v6 >= *((_QWORD *)a1 + 3))
  {
    llvm::raw_ostream::write(a1, 44);
  }
  else
  {
    *((_QWORD *)a1 + 4) = v6 + 1;
    *v6 = 44;
  }
  v15 = *(_DWORD *)(**(_QWORD **)a2 + 16);
  if (v15)
  {
    v7 = *(_QWORD *)(a2 + 8);
    v13 = (unsigned int *)&v15;
    v14 = v7;
    llvm::rdf::operator<<((char **)a1, &v13);
  }
  v8 = (_BYTE *)*((_QWORD *)a1 + 4);
  if ((unint64_t)v8 >= *((_QWORD *)a1 + 3))
  {
    llvm::raw_ostream::write(a1, 44);
  }
  else
  {
    *((_QWORD *)a1 + 4) = v8 + 1;
    *v8 = 44;
  }
  v15 = *(_DWORD *)(**(_QWORD **)a2 + 20);
  if (v15)
  {
    v9 = *(_QWORD *)(a2 + 8);
    v13 = (unsigned int *)&v15;
    v14 = v9;
    llvm::rdf::operator<<((char **)a1, &v13);
  }
  v10 = (_WORD *)*((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 3) - (_QWORD)v10 > 1uLL)
  {
    *v10 = 14889;
    *((_QWORD *)a1 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a1, "):", 2uLL);
  }
  v15 = *(_DWORD *)(**(_QWORD **)a2 + 12);
  if (v15)
  {
    v11 = *(_QWORD *)(a2 + 8);
    v13 = (unsigned int *)&v15;
    v14 = v11;
    llvm::rdf::operator<<((char **)a1, &v13);
  }
  return a1;
}

{
  _BYTE *v4;
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  unsigned int *v9;
  uint64_t v10;
  int v11;

  sub_1C520D5F8((uint64_t)a1, **(llvm::rdf::RefNode ***)a2, *(unsigned int *)(*(_QWORD *)a2 + 8), *(unsigned int **)(a2 + 8));
  v4 = (_BYTE *)*((_QWORD *)a1 + 4);
  if ((unint64_t)v4 >= *((_QWORD *)a1 + 3))
  {
    llvm::raw_ostream::write(a1, 40);
  }
  else
  {
    *((_QWORD *)a1 + 4) = v4 + 1;
    *v4 = 40;
  }
  v11 = *(_DWORD *)(**(_QWORD **)a2 + 8);
  if (v11)
  {
    v5 = *(_QWORD *)(a2 + 8);
    v9 = (unsigned int *)&v11;
    v10 = v5;
    llvm::rdf::operator<<((char **)a1, &v9);
  }
  v6 = (_WORD *)*((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 3) - (_QWORD)v6 > 1uLL)
  {
    *v6 = 14889;
    *((_QWORD *)a1 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a1, "):", 2uLL);
  }
  v11 = *(_DWORD *)(**(_QWORD **)a2 + 12);
  if (v11)
  {
    v7 = *(_QWORD *)(a2 + 8);
    v9 = (unsigned int *)&v11;
    v10 = v7;
    llvm::rdf::operator<<((char **)a1, &v9);
  }
  return a1;
}

{
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _WORD *v8;
  uint64_t v9;
  unsigned int *v11;
  uint64_t v12;
  int v13;

  sub_1C520D5F8((uint64_t)a1, **(llvm::rdf::RefNode ***)a2, *(unsigned int *)(*(_QWORD *)a2 + 8), *(unsigned int **)(a2 + 8));
  v4 = (_BYTE *)*((_QWORD *)a1 + 4);
  if ((unint64_t)v4 >= *((_QWORD *)a1 + 3))
  {
    llvm::raw_ostream::write(a1, 40);
  }
  else
  {
    *((_QWORD *)a1 + 4) = v4 + 1;
    *v4 = 40;
  }
  v13 = *(_DWORD *)(**(_QWORD **)a2 + 8);
  if (v13)
  {
    v5 = *(_QWORD *)(a2 + 8);
    v11 = (unsigned int *)&v13;
    v12 = v5;
    llvm::rdf::operator<<((char **)a1, &v11);
  }
  v6 = (_BYTE *)*((_QWORD *)a1 + 4);
  if ((unint64_t)v6 >= *((_QWORD *)a1 + 3))
  {
    llvm::raw_ostream::write(a1, 44);
  }
  else
  {
    *((_QWORD *)a1 + 4) = v6 + 1;
    *v6 = 44;
  }
  v13 = *(_DWORD *)(**(_QWORD **)a2 + 16);
  if (v13)
  {
    v7 = *(_QWORD *)(a2 + 8);
    v11 = (unsigned int *)&v13;
    v12 = v7;
    llvm::rdf::operator<<((char **)a1, &v11);
  }
  v8 = (_WORD *)*((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 3) - (_QWORD)v8 > 1uLL)
  {
    *v8 = 14889;
    *((_QWORD *)a1 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a1, "):", 2uLL);
  }
  v13 = *(_DWORD *)(**(_QWORD **)a2 + 12);
  if (v13)
  {
    v9 = *(_QWORD *)(a2 + 8);
    v11 = (unsigned int *)&v13;
    v12 = v9;
    llvm::rdf::operator<<((char **)a1, &v11);
  }
  return a1;
}

llvm::raw_ostream *sub_1C520D5F8(uint64_t a1, llvm::rdf::RefNode *a2, uint64_t a3, unsigned int *a4)
{
  llvm::raw_ostream *v6;
  _BYTE *v7;
  uint64_t v8;
  llvm::raw_ostream *result;
  _BYTE *v10;
  _BYTE *v11;
  _QWORD v12[2];
  unsigned int *v13[2];
  unsigned int *v14[2];
  llvm::rdf::RefNode *v15;
  uint64_t v16;

  v15 = a2;
  v16 = a3;
  v14[0] = (unsigned int *)&v16;
  v14[1] = a4;
  v6 = llvm::rdf::operator<<((char **)a1, v14);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)a1, 60);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v7 + 1;
    *v7 = 60;
  }
  v12[0] = llvm::rdf::RefNode::getRegRef(v15, (const llvm::rdf::DataFlowGraph *)a4);
  v12[1] = v8;
  v13[0] = (unsigned int *)v12;
  v13[1] = a4;
  result = llvm::rdf::operator<<((llvm::raw_ostream *)a1, v13);
  v10 = *(_BYTE **)(a1 + 32);
  if ((unint64_t)v10 >= *(_QWORD *)(a1 + 24))
  {
    result = llvm::raw_ostream::write((llvm::raw_ostream *)a1, 62);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v10 + 1;
    *v10 = 62;
  }
  if ((*(_WORD *)v15 & 0x200) != 0)
  {
    v11 = *(_BYTE **)(a1 + 32);
    if ((unint64_t)v11 >= *(_QWORD *)(a1 + 24))
    {
      return llvm::raw_ostream::write((llvm::raw_ostream *)a1, 33);
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v11 + 1;
      *v11 = 33;
    }
  }
  return result;
}

llvm::raw_ostream *llvm::rdf::operator<<(llvm::raw_ostream *result, __int16 ***a2)
{
  __int16 **v2;
  __int16 v3;
  __int16 **v4;
  __int16 **v5;
  __int16 *v6;
  int v7;
  uint64_t *v8;
  __int16 **v9;

  v2 = *a2;
  v3 = ***a2;
  if ((v3 & 0x1C) == 8)
  {
    v6 = **a2;
    v7 = *((_DWORD *)v2 + 2);
    v5 = a2[1];
    v8 = (uint64_t *)&v6;
    v9 = v5;
    if ((v3 & 0x80) != 0)
      return llvm::rdf::operator<<(result, (uint64_t)&v8);
    else
      return llvm::rdf::operator<<(result, (uint64_t)&v8);
  }
  else if ((v3 & 0x1C) == 4)
  {
    v6 = **a2;
    v7 = *((_DWORD *)v2 + 2);
    v4 = a2[1];
    v8 = (uint64_t *)&v6;
    v9 = v4;
    return llvm::rdf::operator<<(result, (uint64_t)&v8);
  }
  return result;
}

llvm::raw_ostream *llvm::rdf::operator<<(llvm::raw_ostream *result, uint64_t a2)
{
  uint64_t v2;
  __int128 *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  _BYTE *v8;
  unsigned int *v9[2];
  __int128 v10;

  v2 = *(unsigned int *)(*(_QWORD *)a2 + 8);
  if ((_DWORD)v2)
  {
    v4 = **(__int128 ***)a2;
    v5 = v2 - 1;
    v6 = 16 * v2;
    do
    {
      v10 = *v4;
      v7 = *(unsigned int **)(a2 + 8);
      v9[0] = (unsigned int *)&v10 + 2;
      v9[1] = v7;
      result = llvm::rdf::operator<<((char **)result, v9);
      if (v5)
      {
        v8 = (_BYTE *)*((_QWORD *)result + 4);
        if ((unint64_t)v8 >= *((_QWORD *)result + 3))
        {
          result = llvm::raw_ostream::write(result, 32);
        }
        else
        {
          *((_QWORD *)result + 4) = v8 + 1;
          *v8 = 32;
        }
      }
      ++v4;
      --v5;
      v6 -= 16;
    }
    while (v6);
  }
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  int v5;
  unsigned int *v6;
  _BYTE *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  unsigned int *v11[2];
  int v12;

  v2 = *(_QWORD *)a2 + 8;
  v3 = **(_QWORD ***)a2;
  if (v3 != (_QWORD *)v2)
  {
    v5 = *(_DWORD *)(*(_QWORD *)a2 + 16);
    do
    {
      v12 = *((_DWORD *)v3 + 7);
      v6 = *(unsigned int **)(a2 + 8);
      v11[0] = (unsigned int *)&v12;
      v11[1] = v6;
      result = llvm::rdf::operator<<((char **)result, v11);
      if (--v5)
      {
        v7 = (_BYTE *)*((_QWORD *)result + 4);
        if ((unint64_t)v7 >= *((_QWORD *)result + 3))
        {
          result = llvm::raw_ostream::write(result, 32);
        }
        else
        {
          *((_QWORD *)result + 4) = v7 + 1;
          *v7 = 32;
        }
      }
      v8 = (_QWORD *)v3[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v3[2];
          v10 = *v9 == (_QWORD)v3;
          v3 = v9;
        }
        while (!v10);
      }
      v3 = v9;
    }
    while (v9 != (_QWORD *)v2);
  }
  return result;
}

uint64_t llvm::rdf::operator<<(uint64_t a1, _QWORD *a2)
{
  unsigned int *v4;
  llvm::raw_ostream *v5;
  _DWORD *v6;
  llvm::raw_ostream *v7;
  uint64_t **v8;
  _BYTE *v9;
  uint64_t **v11[2];
  unsigned int *v12[2];
  void *v13[2];
  _QWORD v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  v4 = (unsigned int *)a2[1];
  v12[0] = (unsigned int *)(*a2 + 8);
  v12[1] = v4;
  v5 = llvm::rdf::operator<<((char **)a1, v12);
  v6 = (_DWORD *)*((_QWORD *)v5 + 4);
  if (*((_QWORD *)v5 + 3) - (_QWORD)v6 > 6uLL)
  {
    *(_DWORD *)((char *)v6 + 3) = 1528850792;
    *v6 = 1752178746;
    *(_QWORD *)(a1 + 32) += 7;
    v7 = (llvm::raw_ostream *)a1;
  }
  else
  {
    v7 = llvm::raw_ostream::write((llvm::raw_ostream *)a1, ": phi [", 7uLL);
  }
  llvm::rdf::CodeNode::members(*(_DWORD **)*a2, (const llvm::rdf::DataFlowGraph *)a2[1], (uint64_t)v13);
  v8 = (uint64_t **)a2[1];
  v11[0] = (uint64_t **)v13;
  v11[1] = v8;
  sub_1C520DC8C(v7, v11);
  v9 = (_BYTE *)*((_QWORD *)v7 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 93);
  }
  else
  {
    *((_QWORD *)v7 + 4) = v9 + 1;
    *v9 = 93;
  }
  if (v13[0] != v14)
    free(v13[0]);
  return a1;
}

llvm::raw_ostream *sub_1C520DC8C(llvm::raw_ostream *a1, uint64_t ***a2)
{
  uint64_t **v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  __int16 **v9;
  _WORD *v10;
  __int16 **v12[2];
  uint64_t v13;
  int v14;

  v3 = *a2;
  v4 = *((unsigned int *)*a2 + 2);
  if ((_DWORD)v4)
  {
    v6 = *v3;
    v7 = (uint64_t)&(*v3)[2 * v4];
    v8 = v4 - 1;
    do
    {
      v13 = *v6;
      v14 = *((_DWORD *)v6 + 2);
      v9 = (__int16 **)a2[1];
      v12[0] = (__int16 **)&v13;
      v12[1] = v9;
      llvm::rdf::operator<<(a1, v12);
      if (v8)
      {
        v10 = (_WORD *)*((_QWORD *)a1 + 4);
        if (*((_QWORD *)a1 + 3) - (_QWORD)v10 > 1uLL)
        {
          *v10 = 8236;
          *((_QWORD *)a1 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(a1, ", ", 2uLL);
        }
      }
      --v8;
      v6 += 2;
    }
    while (v6 != (uint64_t *)v7);
  }
  return a1;
}

_DWORD *llvm::rdf::CodeNode::members@<X0>(_DWORD *this@<X0>, const llvm::rdf::DataFlowGraph *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  _DWORD *v7;
  _DWORD *v8;
  unsigned int v9;
  _QWORD *v10;

  v4 = a3 + 16;
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x400000000;
  v5 = this[4];
  if (v5)
  {
    v7 = this;
    v8 = (_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 37) + 8 * ((v5 - 1) >> *((_DWORD *)a2 + 69)))
                  + 32 * (*((_DWORD *)a2 + 70) & (v5 - 1)));
    if (v8 != this)
    {
      v9 = 0;
      do
      {
        if (v9 >= *(_DWORD *)(a3 + 12))
        {
          this = llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v4, v9 + 1, 16);
          v9 = *(_DWORD *)(a3 + 8);
        }
        v10 = (_QWORD *)(*(_QWORD *)a3 + 16 * v9);
        *v10 = v8;
        v10[1] = v5;
        v9 = *(_DWORD *)(a3 + 8) + 1;
        *(_DWORD *)(a3 + 8) = v9;
        v5 = v8[1];
        if (v5)
          v8 = (_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 37) + 8 * ((v5 - 1) >> *((_DWORD *)a2 + 69)))
                        + 32 * (*((_DWORD *)a2 + 70) & (v5 - 1)));
        else
          v8 = 0;
      }
      while (v8 != v7);
    }
  }
  return this;
}

uint64_t llvm::rdf::operator<<(uint64_t a1, const llvm::rdf::DataFlowGraph **a2)
{
  const llvm::rdf::DataFlowGraph *v4;
  uint64_t v5;
  uint64_t v6;
  llvm::raw_ostream *v7;
  _WORD *v8;
  llvm::raw_ostream *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  size_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  int v27;
  const char *v28;
  void (**v29)(void);
  uint64_t ***v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t ****v35;
  uint64_t ***v36;
  int v37;
  int v38;
  const char *v39;
  size_t v40;
  void *v41;
  llvm::raw_ostream *v42;
  const char *v43;
  size_t v44;
  size_t *v45;
  size_t v46;
  size_t v47;
  void *v48;
  _WORD *v49;
  llvm::raw_ostream *v50;
  uint64_t **v51;
  _BYTE *v52;
  size_t v54;
  uint64_t **v55[2];
  void *v56;
  void *v57;
  uint64_t v58;
  void **v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v4 = a2[1];
  v5 = *(_QWORD *)(*(_QWORD *)*a2 + 8);
  v6 = **(unsigned __int16 **)(v5 + 16);
  v56 = (char *)*a2 + 8;
  v57 = v4;
  v7 = llvm::rdf::operator<<((char **)a1, (unsigned int **)&v56);
  v8 = (_WORD *)*((_QWORD *)v7 + 4);
  if (*((_QWORD *)v7 + 3) - (_QWORD)v8 > 1uLL)
  {
    *v8 = 8250;
    *(_QWORD *)(a1 + 32) += 2;
    v9 = (llvm::raw_ostream *)a1;
  }
  else
  {
    v9 = llvm::raw_ostream::write((llvm::raw_ostream *)a1, ": ", 2uLL);
  }
  v10 = *((_QWORD *)a2[1] + 1);
  v11 = *(_QWORD *)(v10 + 24);
  if (v11)
  {
    v12 = (const char *)(v11 + *(unsigned int *)(*(_QWORD *)(v10 + 16) + 4 * v6));
    v13 = strlen(v12);
    v14 = (void *)*((_QWORD *)v9 + 4);
    if (v13 <= *((_QWORD *)v9 + 3) - (_QWORD)v14)
    {
      if (v13)
      {
        memcpy(v14, v12, v13);
        *((_QWORD *)v9 + 4) += v13;
      }
    }
    else
    {
      llvm::raw_ostream::write(v9, v12, v13);
    }
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8);
  if ((*(_WORD *)(v5 + 44) & 0xC) != 0 && (*(_WORD *)(v5 + 44) & 4) == 0)
  {
    if ((v15 & 0x80) == 0)
    {
      v24 = v5;
      while ((*(_WORD *)(v24 + 44) & 8) != 0)
      {
        v24 = *(_QWORD *)(v24 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v24 + 16) + 8) & 0x80) != 0)
          goto LABEL_13;
      }
      if ((v15 & 0x400) == 0)
      {
        v25 = v5;
        while ((*(_WORD *)(v25 + 44) & 8) != 0)
        {
          v25 = *(_QWORD *)(v25 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v25 + 16) + 9) & 4) != 0)
            goto LABEL_13;
        }
        goto LABEL_58;
      }
    }
  }
  else if ((v15 & 0x480) == 0)
  {
    goto LABEL_58;
  }
LABEL_13:
  v17 = *(unsigned int *)(v5 + 40);
  if (!(_DWORD)v17)
    goto LABEL_58;
  v18 = *(_QWORD *)(v5 + 32) + 16;
  v19 = 32 * v17;
  while (1)
  {
    v20 = *(unsigned __int8 *)(v18 - 16);
    v21 = v20 > 0xA;
    v22 = (1 << v20) & 0x610;
    if (!v21 && v22 != 0)
      break;
    v18 += 32;
    v19 -= 32;
    if (!v19)
      goto LABEL_58;
  }
  v26 = *(_BYTE **)(a1 + 32);
  if ((unint64_t)v26 >= *(_QWORD *)(a1 + 24))
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)a1, 32);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v26 + 1;
    *v26 = 32;
  }
  v27 = *(unsigned __int8 *)(v18 - 16);
  if (v27 == 10)
  {
    v30 = *(uint64_t ****)v18;
    if ((*(_BYTE *)(*(_QWORD *)v18 + 23) & 0x10) == 0)
      goto LABEL_58;
    v31 = ***v30;
    v32 = *(_QWORD *)(v31 + 152);
    v33 = *(unsigned int *)(v31 + 168);
    if ((_DWORD)v33)
    {
      LODWORD(v34) = (v33 - 1) & ((v30 >> 4) ^ (v30 >> 9));
      v35 = (uint64_t ****)(v32 + 16 * v34);
      v36 = *v35;
      if (*v35 == v30)
      {
LABEL_55:
        v45 = (size_t *)v35[1];
        v47 = *v45;
        v43 = (const char *)(v45 + 2);
        v46 = v47;
        v48 = *(void **)(a1 + 32);
        if (v47 > *(_QWORD *)(a1 + 24) - (_QWORD)v48)
        {
          v42 = (llvm::raw_ostream *)a1;
          v44 = v46;
          goto LABEL_57;
        }
        if (!v46)
          goto LABEL_58;
        memcpy(v48, v43, v46);
        v54 = *(_QWORD *)(a1 + 32) + v46;
LABEL_69:
        *(_QWORD *)(a1 + 32) = v54;
        goto LABEL_58;
      }
      v37 = 1;
      while (v36 != (uint64_t ***)-4096)
      {
        v38 = v34 + v37++;
        v34 = v38 & (v33 - 1);
        v36 = *(uint64_t ****)(v32 + 16 * v34);
        if (v36 == v30)
        {
          v35 = (uint64_t ****)(v32 + 16 * v34);
          goto LABEL_55;
        }
      }
    }
    v35 = (uint64_t ****)(v32 + 16 * v33);
    goto LABEL_55;
  }
  if (v27 == 9)
  {
    v39 = *(const char **)v18;
    if (!v39)
      goto LABEL_58;
    v40 = strlen(v39);
    v41 = *(void **)(a1 + 32);
    if (v40 > *(_QWORD *)(a1 + 24) - (_QWORD)v41)
    {
      v42 = (llvm::raw_ostream *)a1;
      v43 = v39;
      v44 = v40;
LABEL_57:
      llvm::raw_ostream::write(v42, v43, v44);
      goto LABEL_58;
    }
    if (!v40)
      goto LABEL_58;
    memcpy(v41, v39, v40);
    v54 = *(_QWORD *)(a1 + 32) + v40;
    goto LABEL_69;
  }
  if (v27 != 4)
    goto LABEL_58;
  v28 = *(const char **)v18;
  v59 = &v56;
  v56 = &off_1E8143F38;
  v57 = (void *)v28;
  sub_1C512E114((uint64_t)&v56, (llvm::raw_ostream *)a1);
  if (v59 == &v56)
  {
    v29 = (void (**)(void))((char *)v56 + 32);
  }
  else
  {
    if (!v59)
      goto LABEL_58;
    v29 = (void (**)(void))((char *)*v59 + 40);
  }
  (*v29)();
LABEL_58:
  v49 = *(_WORD **)(a1 + 32);
  if (*(_QWORD *)(a1 + 24) - (_QWORD)v49 > 1uLL)
  {
    *v49 = 23328;
    *(_QWORD *)(a1 + 32) += 2;
    v50 = (llvm::raw_ostream *)a1;
  }
  else
  {
    v50 = llvm::raw_ostream::write((llvm::raw_ostream *)a1, " [", 2uLL);
  }
  llvm::rdf::CodeNode::members(*(_DWORD **)*a2, a2[1], (uint64_t)&v56);
  v51 = (uint64_t **)a2[1];
  v55[0] = (uint64_t **)&v56;
  v55[1] = v51;
  sub_1C520DC8C(v50, v55);
  v52 = (_BYTE *)*((_QWORD *)v50 + 4);
  if ((unint64_t)v52 >= *((_QWORD *)v50 + 3))
  {
    llvm::raw_ostream::write(v50, 93);
  }
  else
  {
    *((_QWORD *)v50 + 4) = v52 + 1;
    *v52 = 93;
  }
  if (v56 != &v58)
    free(v56);
  return a1;
}

llvm::raw_ostream *llvm::rdf::operator<<(llvm::raw_ostream *this, uint64_t **a2)
{
  llvm::raw_ostream *v3;
  uint64_t *v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  _DWORD *v8;
  uint64_t *v9;
  uint64_t v11;
  int v12;
  unsigned int *v13;
  uint64_t *v14;

  v3 = this;
  v4 = *a2;
  v5 = *(_WORD *)**a2 & 0x1C;
  if (v5 == 16)
  {
    v11 = **a2;
    v12 = *((_DWORD *)v4 + 2);
    v7 = a2[1];
    v13 = (unsigned int *)&v11;
    v14 = v7;
    llvm::rdf::operator<<((uint64_t)this, (const llvm::rdf::DataFlowGraph **)&v13);
  }
  else if (v5 == 12)
  {
    v11 = **a2;
    v12 = *((_DWORD *)v4 + 2);
    v6 = a2[1];
    v13 = (unsigned int *)&v11;
    v14 = v6;
    llvm::rdf::operator<<((uint64_t)this, &v13);
  }
  else
  {
    v8 = (_DWORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v8 > 6uLL)
    {
      *(_DWORD *)((char *)v8 + 3) = 541028980;
      *v8 = 1953721961;
      *((_QWORD *)this + 4) += 7;
    }
    else
    {
      this = llvm::raw_ostream::write(this, "instr? ", 7uLL);
    }
    v9 = a2[1];
    v13 = (unsigned int *)(*a2 + 1);
    v14 = v9;
    llvm::rdf::operator<<((char **)this, &v13);
  }
  return v3;
}

char **llvm::rdf::operator<<(char **a1, _QWORD *a2)
{
  char **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  uint64_t v11;
  uint64_t v12;
  void (**v13)(void);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int *v27;
  int *v28;
  int v29;
  int *v30;
  unint64_t v31;
  char *v32;
  llvm::raw_ostream *v33;
  unint64_t v34;
  int v35;
  char *v36;
  unint64_t v37;
  char *v38;
  llvm::raw_ostream *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int v44;
  char **v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  int v52;
  int *v53;
  int *v54;
  int v55;
  int *v56;
  unint64_t v57;
  char *v58;
  llvm::raw_ostream *v59;
  unint64_t v60;
  int v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  int v66;
  uint64_t v67;
  char *v68;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int *v74;
  int *v75;
  uint64_t v76;
  int *v77;
  int *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  void **v85;
  uint64_t v86;

  v3 = a1;
  v86 = *MEMORY[0x1E0C80C00];
  v4 = a2[1];
  v5 = *(_QWORD *)(*(_QWORD *)*a2 + 8);
  v7 = *(_QWORD *)(v5 + 64);
  v6 = *(_QWORD *)(v5 + 72);
  v80 = (uint64_t *)(*a2 + 8);
  v81 = v4;
  v8 = llvm::rdf::operator<<(a1, (unsigned int **)&v80);
  v9 = *((_QWORD *)v8 + 4);
  if ((unint64_t)(*((_QWORD *)v8 + 3) - v9) > 5)
  {
    *(_WORD *)(v9 + 4) = 8237;
    *(_DWORD *)v9 = 757932090;
    v3[4] += 6;
    v10 = (llvm::raw_ostream *)v3;
  }
  else
  {
    v10 = llvm::raw_ostream::write((llvm::raw_ostream *)v3, ": --- ", 6uLL);
  }
  v85 = &v82;
  v82 = &off_1E8143F38;
  v83 = v5;
  sub_1C512E114((uint64_t)&v82, v10);
  v11 = *((_QWORD *)v10 + 4);
  if ((unint64_t)(*((_QWORD *)v10 + 3) - v11) > 0xA)
  {
    *(_DWORD *)(v11 + 7) = 678650981;
    *(_QWORD *)v11 = *(_QWORD *)" --- preds(";
    *((_QWORD *)v10 + 4) += 11;
  }
  else
  {
    v10 = llvm::raw_ostream::write(v10, " --- preds(", 0xBuLL);
  }
  sub_1C5E21910(v10, ((unint64_t)(v6 - v7) >> 3), 0, 0, 0);
  v12 = *((_QWORD *)v10 + 4);
  if ((unint64_t)(*((_QWORD *)v10 + 3) - v12) > 2)
  {
    *(_BYTE *)(v12 + 2) = 32;
    *(_WORD *)v12 = 14889;
    *((_QWORD *)v10 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v10, "): ", 3uLL);
  }
  if (v85 == &v82)
  {
    v13 = (void (**)(void))((char *)v82 + 32);
  }
  else
  {
    if (!v85)
      goto LABEL_12;
    v13 = (void (**)(void))((char *)*v85 + 40);
  }
  (*v13)();
LABEL_12:
  v70 = a2;
  v71 = v5;
  v14 = *(_QWORD *)(v5 + 64);
  v15 = *(_QWORD *)(v5 + 72);
  if (v14 == v15)
  {
    v18 = 0;
    v20 = 0;
    v16 = 0;
  }
  else
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    do
    {
      v19 = *(_DWORD *)(*(_QWORD *)v14 + 24);
      if (v17 >= v16)
      {
        v21 = (v17 - v18) >> 2;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 62)
LABEL_112:
          abort();
        if ((v16 - v18) >> 1 > v22)
          v22 = (v16 - v18) >> 1;
        if ((unint64_t)(v16 - v18) >= 0x7FFFFFFFFFFFFFFCLL)
          v23 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        if (v23)
        {
          if (v23 >> 62)
LABEL_113:
            sub_1C4764EE4();
          v24 = (char *)operator new(4 * v23);
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[4 * v21];
        *(_DWORD *)v25 = v19;
        v20 = (uint64_t)(v25 + 4);
        while (v17 != v18)
        {
          v26 = *((_DWORD *)v17 - 1);
          v17 -= 4;
          *((_DWORD *)v25 - 1) = v26;
          v25 -= 4;
        }
        v16 = &v24[4 * v23];
        if (v18)
          operator delete(v18);
        v18 = v25;
      }
      else
      {
        *(_DWORD *)v17 = v19;
        v20 = (uint64_t)(v17 + 4);
      }
      v14 += 8;
      v17 = (char *)v20;
    }
    while (v14 != v15);
  }
  v77 = 0;
  v78 = 0;
  v79 = 0;
  sub_1C4979194(&v77, v18, v20, (v20 - (uint64_t)v18) >> 2);
  v27 = v77;
  v28 = v78;
  if (v77 != v78)
  {
    v29 = ((unint64_t)((char *)v78 - (char *)v77) >> 2) - 1;
    v30 = v77;
    while (1)
    {
      v31 = *v30;
      v32 = v3[4];
      if ((unint64_t)(v3[3] - v32) > 3)
      {
        *(_DWORD *)v32 = 778199589;
        v3[4] += 4;
        v33 = (llvm::raw_ostream *)v3;
        if ((v31 & 0x80000000) != 0)
        {
LABEL_46:
          v34 = -(uint64_t)v31;
          v35 = 1;
          goto LABEL_40;
        }
      }
      else
      {
        v33 = llvm::raw_ostream::write((llvm::raw_ostream *)v3, "%bb.", 4uLL);
        if ((v31 & 0x80000000) != 0)
          goto LABEL_46;
      }
      v34 = v31;
      v35 = 0;
LABEL_40:
      sub_1C5E21910(v33, v34, 0, 0, v35);
      if (v29)
      {
        v36 = v3[4];
        if ((unint64_t)(v3[3] - v36) > 1)
        {
          *(_WORD *)v36 = 8236;
          v3[4] += 2;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v3, ", ", 2uLL);
        }
      }
      ++v30;
      --v29;
      if (v30 == v28)
        goto LABEL_49;
    }
  }
  v27 = v78;
LABEL_49:
  if (v27)
  {
    v78 = v27;
    operator delete(v27);
  }
  v37 = *(_QWORD *)(v71 + 96) - *(_QWORD *)(v71 + 88);
  v38 = v3[4];
  if ((unint64_t)(v3[3] - v38) > 7)
  {
    *(_QWORD *)v38 = 0x2873636375732020;
    v3[4] += 8;
    v39 = (llvm::raw_ostream *)v3;
  }
  else
  {
    v39 = llvm::raw_ostream::write((llvm::raw_ostream *)v3, "  succs(", 8uLL);
  }
  sub_1C5E21910(v39, (v37 >> 3), 0, 0, 0);
  v40 = *((_QWORD *)v39 + 4);
  if ((unint64_t)(*((_QWORD *)v39 + 3) - v40) > 2)
  {
    *(_BYTE *)(v40 + 2) = 32;
    *(_WORD *)v40 = 14889;
    *((_QWORD *)v39 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v39, "): ", 3uLL);
  }
  v42 = *(_QWORD *)(v71 + 88);
  v41 = *(_QWORD *)(v71 + 96);
  v43 = v18;
  while (v42 != v41)
  {
    v44 = *(_DWORD *)(*(_QWORD *)v42 + 24);
    if (v43 >= v16)
    {
      v45 = v3;
      v46 = (v43 - v18) >> 2;
      v47 = v46 + 1;
      if ((unint64_t)(v46 + 1) >> 62)
        goto LABEL_112;
      if ((v16 - v18) >> 1 > v47)
        v47 = (v16 - v18) >> 1;
      if ((unint64_t)(v16 - v18) >= 0x7FFFFFFFFFFFFFFCLL)
        v48 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v48 = v47;
      if (v48)
      {
        if (v48 >> 62)
          goto LABEL_113;
        v49 = (char *)operator new(4 * v48);
      }
      else
      {
        v49 = 0;
      }
      v50 = &v49[4 * v46];
      *(_DWORD *)v50 = v44;
      v51 = v50 + 4;
      while (v43 != v18)
      {
        v52 = *((_DWORD *)v43 - 1);
        v43 -= 4;
        *((_DWORD *)v50 - 1) = v52;
        v50 -= 4;
      }
      v16 = &v49[4 * v48];
      if (v18)
        operator delete(v18);
      v18 = v50;
      v43 = v51;
      v3 = v45;
    }
    else
    {
      *(_DWORD *)v43 = v44;
      v43 += 4;
    }
    v42 += 8;
  }
  v74 = 0;
  v75 = 0;
  v76 = 0;
  sub_1C4979194(&v74, v18, (uint64_t)v43, (v43 - v18) >> 2);
  v53 = v74;
  v54 = v75;
  if (v74 != v75)
  {
    v55 = ((unint64_t)((char *)v75 - (char *)v74) >> 2) - 1;
    v56 = v74;
    while (1)
    {
      v57 = *v56;
      v58 = v3[4];
      if ((unint64_t)(v3[3] - v58) > 3)
      {
        *(_DWORD *)v58 = 778199589;
        v3[4] += 4;
        v59 = (llvm::raw_ostream *)v3;
        if ((v57 & 0x80000000) != 0)
        {
LABEL_87:
          v60 = -(uint64_t)v57;
          v61 = 1;
          goto LABEL_81;
        }
      }
      else
      {
        v59 = llvm::raw_ostream::write((llvm::raw_ostream *)v3, "%bb.", 4uLL);
        if ((v57 & 0x80000000) != 0)
          goto LABEL_87;
      }
      v60 = v57;
      v61 = 0;
LABEL_81:
      sub_1C5E21910(v59, v60, 0, 0, v61);
      if (v55)
      {
        v62 = v3[4];
        if ((unint64_t)(v3[3] - v62) > 1)
        {
          *(_WORD *)v62 = 8236;
          v3[4] += 2;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v3, ", ", 2uLL);
        }
      }
      ++v56;
      --v55;
      if (v56 == v54)
        goto LABEL_90;
    }
  }
  v53 = v75;
LABEL_90:
  if (v53)
  {
    v75 = v53;
    operator delete(v53);
  }
  v63 = v3[4];
  if (v63 >= v3[3])
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v3, 10);
  }
  else
  {
    v3[4] = v63 + 1;
    *v63 = 10;
  }
  llvm::rdf::CodeNode::members(*(_DWORD **)*v70, (const llvm::rdf::DataFlowGraph *)v70[1], (uint64_t)&v82);
  v64 = (char *)v82;
  if ((_DWORD)v83)
  {
    v65 = (char *)v82 + 16 * v83;
    do
    {
      v66 = *((_DWORD *)v64 + 2);
      v72 = *(_QWORD *)v64;
      v73 = v66;
      v67 = v70[1];
      v80 = &v72;
      v81 = v67;
      llvm::rdf::operator<<((llvm::raw_ostream *)v3, &v80);
      v68 = v3[4];
      if (v68 >= v3[3])
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v3, 10);
      }
      else
      {
        v3[4] = v68 + 1;
        *v68 = 10;
      }
      v64 += 16;
    }
    while (v64 != v65);
    v64 = (char *)v82;
  }
  if (v64 != (char *)&v84)
    free(v64);
  if (v18)
    operator delete(v18);
  return v3;
}

llvm::raw_ostream *llvm::rdf::operator<<(llvm::raw_ostream *this, const llvm::rdf::DataFlowGraph **a2)
{
  uint64_t v4;
  llvm::raw_ostream *v5;
  const llvm::rdf::DataFlowGraph *v6;
  uint64_t v7;
  uint64_t ***v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ****v13;
  uint64_t ***v14;
  int v15;
  int v16;
  size_t *v17;
  const void *v18;
  size_t v19;
  size_t v20;
  _BYTE *v21;
  char *v22;
  char *v23;
  int v24;
  const llvm::rdf::DataFlowGraph *v25;
  _BYTE *v26;
  _WORD *v27;
  uint64_t v29;
  int v30;
  _QWORD v31[2];
  void *v32;
  const llvm::rdf::DataFlowGraph *v33;
  _QWORD v34[9];

  v34[8] = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v4) > 0xA)
  {
    *(_DWORD *)(v4 + 7) = 173750896;
    *(_QWORD *)v4 = *(_QWORD *)"DFG dump:[\n";
    *((_QWORD *)this + 4) += 11;
    v5 = this;
  }
  else
  {
    v5 = llvm::raw_ostream::write(this, "DFG dump:[\n", 0xBuLL);
  }
  v6 = a2[1];
  v32 = (char *)*a2 + 8;
  v33 = v6;
  llvm::rdf::operator<<((char **)v5, (unsigned int **)&v32);
  v7 = *((_QWORD *)v5 + 4);
  if ((unint64_t)(*((_QWORD *)v5 + 3) - v7) > 0xB)
  {
    *(_DWORD *)(v7 + 8) = 540700271;
    *(_QWORD *)v7 = *(_QWORD *)": Function: ";
    *((_QWORD *)v5 + 4) += 12;
  }
  else
  {
    v5 = llvm::raw_ostream::write(v5, ": Function: ", 0xCuLL);
  }
  v8 = **(uint64_t *****)(*(_QWORD *)*a2 + 8);
  if ((*((_BYTE *)v8 + 23) & 0x10) == 0)
  {
    v21 = (_BYTE *)*((_QWORD *)v5 + 4);
    goto LABEL_17;
  }
  v9 = ***v8;
  v10 = *(_QWORD *)(v9 + 152);
  v11 = *(unsigned int *)(v9 + 168);
  if ((_DWORD)v11)
  {
    LODWORD(v12) = (v11 - 1) & ((v8 >> 4) ^ (v8 >> 9));
    v13 = (uint64_t ****)(v10 + 16 * v12);
    v14 = *v13;
    if (*v13 == v8)
      goto LABEL_13;
    v15 = 1;
    while (v14 != (uint64_t ***)-4096)
    {
      v16 = v12 + v15++;
      v12 = v16 & (v11 - 1);
      v14 = *(uint64_t ****)(v10 + 16 * v12);
      if (v14 == v8)
      {
        v13 = (uint64_t ****)(v10 + 16 * v12);
        goto LABEL_13;
      }
    }
  }
  v13 = (uint64_t ****)(v10 + 16 * v11);
LABEL_13:
  v17 = (size_t *)v13[1];
  v20 = *v17;
  v18 = v17 + 2;
  v19 = v20;
  v21 = (_BYTE *)*((_QWORD *)v5 + 4);
  if (v20 <= *((_QWORD *)v5 + 3) - (_QWORD)v21)
  {
    if (v19)
    {
      memcpy(v21, v18, v19);
      v21 = (_BYTE *)(*((_QWORD *)v5 + 4) + v19);
      *((_QWORD *)v5 + 4) = v21;
    }
  }
  else
  {
    v5 = llvm::raw_ostream::write(v5, (const char *)v18, v19);
    v21 = (_BYTE *)*((_QWORD *)v5 + 4);
  }
LABEL_17:
  if ((unint64_t)v21 >= *((_QWORD *)v5 + 3))
  {
    llvm::raw_ostream::write(v5, 10);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v21 + 1;
    *v21 = 10;
  }
  llvm::rdf::CodeNode::members(*(_DWORD **)*a2, a2[1], (uint64_t)&v32);
  v22 = (char *)v32;
  if ((_DWORD)v33)
  {
    v23 = (char *)v32 + 16 * v33;
    do
    {
      v24 = *((_DWORD *)v22 + 2);
      v29 = *(_QWORD *)v22;
      v30 = v24;
      v25 = a2[1];
      v31[0] = &v29;
      v31[1] = v25;
      llvm::rdf::operator<<((char **)this, v31);
      v26 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v26 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this, 10);
      }
      else
      {
        *((_QWORD *)this + 4) = v26 + 1;
        *v26 = 10;
      }
      v22 += 16;
    }
    while (v22 != v23);
    v22 = (char *)v32;
  }
  if (v22 != (char *)v34)
    free(v22);
  v27 = (_WORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v27 > 1uLL)
  {
    *v27 = 2653;
    *((_QWORD *)this + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(this, "]\n", 2uLL);
  }
  return this;
}

llvm::raw_ostream *llvm::rdf::operator<<(llvm::raw_ostream *this, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  _QWORD *v6;
  _BYTE *v7;
  unsigned int *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _WORD *v12;
  unsigned int *v14[2];
  __int128 v15;

  v4 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v4 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this, 123);
  }
  else
  {
    *((_QWORD *)this + 4) = v4 + 1;
    *v4 = 123;
  }
  v5 = *(_QWORD *)a2 + 8;
  v6 = **(_QWORD ***)a2;
  if (v6 != (_QWORD *)v5)
  {
    do
    {
      v15 = *((_OWORD *)v6 + 2);
      v7 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v7 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this, 32);
      }
      else
      {
        *((_QWORD *)this + 4) = v7 + 1;
        *v7 = 32;
      }
      v8 = *(unsigned int **)(a2 + 8);
      v14[0] = (unsigned int *)&v15;
      v14[1] = v8;
      llvm::rdf::operator<<(this, v14);
      v9 = (_QWORD *)v6[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v6[2];
          v11 = *v10 == (_QWORD)v6;
          v6 = v10;
        }
        while (!v11);
      }
      v6 = v10;
    }
    while (v10 != (_QWORD *)v5);
  }
  v12 = (_WORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v12 > 1uLL)
  {
    *v12 = 32032;
    *((_QWORD *)this + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(this, " }", 2uLL);
  }
  return this;
}

llvm::raw_ostream *llvm::rdf::operator<<(llvm::raw_ostream *a1, llvm::rdf::RegisterAggr **a2)
{
  llvm::rdf::RegisterAggr::print(*a2, a1);
  return a1;
}

char **llvm::rdf::operator<<(char **this, unsigned int **a2)
{
  unsigned int *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  char *v12;
  llvm::rdf::RefNode *v13;
  const llvm::rdf::DataFlowGraph *v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  char *v19;
  _QWORD v21[2];
  unsigned int *v22[2];
  unsigned int *v23[2];

  v4 = *a2;
  v5 = *(_QWORD *)*a2;
  v6 = *((_QWORD *)*a2 + 1) - v5;
  v7 = (v6 >> 4) + 1;
  v8 = v6 & 0xFFFFFFFF0;
  while (v8)
  {
    v9 = *(_QWORD *)(v5 + v8 - 16);
    --v7;
    v8 -= 16;
    if (v9)
    {
LABEL_4:
      v10 = (v7 - 1);
      v11 = a2[1];
      v23[0] = (unsigned int *)(v5 + 16 * v10 + 8);
      v23[1] = v11;
      llvm::rdf::operator<<(this, v23);
      v12 = this[4];
      if (v12 >= this[3])
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)this, 60);
      }
      else
      {
        this[4] = v12 + 1;
        *v12 = 60;
      }
      v13 = *(llvm::rdf::RefNode **)(*(_QWORD *)v4 + 16 * v10);
      v14 = (const llvm::rdf::DataFlowGraph *)a2[1];
      v21[0] = llvm::rdf::RefNode::getRegRef(v13, v14);
      v21[1] = v15;
      v22[0] = (unsigned int *)v21;
      v22[1] = (unsigned int *)v14;
      llvm::rdf::operator<<((llvm::raw_ostream *)this, v22);
      v16 = this[4];
      if (v16 >= this[3])
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)this, 62);
      }
      else
      {
        this[4] = v16 + 1;
        *v16 = 62;
      }
      while (1)
      {
        v17 = v7 - 1;
        if (v7 == 1)
          return this;
        v18 = *(_QWORD *)(*(_QWORD *)v4 + 16 * (v7 - 2));
        --v7;
        if (v18)
        {
          v19 = this[4];
          if (v19 >= this[3])
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)this, 32);
          }
          else
          {
            this[4] = v19 + 1;
            *v19 = 32;
          }
          v5 = *(_QWORD *)v4;
          v7 = v17;
          goto LABEL_4;
        }
      }
    }
  }
  return this;
}

uint64_t llvm::rdf::RefNode::getRegRef(llvm::rdf::RefNode *this, const llvm::rdf::DataFlowGraph *a2)
{
  if ((*(_WORD *)this & 0x80) != 0)
    return *((_QWORD *)this + 3);
  else
    return llvm::rdf::DataFlowGraph::makeRegRef(a2, *((const llvm::MachineOperand **)this + 3));
}

void llvm::rdf::NodeAllocator::startNewBlock(size_t __sz)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t *v24;
  unint64_t v25;
  void *v26;

  v2 = (32 * *(_DWORD *)__sz);
  v3 = __sz + 128;
  *(_QWORD *)(__sz + 128) += v2;
  v4 = *(_QWORD *)(__sz + 48);
  if (((v4 + 31) & 0xFFFFFFFFFFFFFFE0) - v4 + v2 <= *(_QWORD *)(__sz + 56) - v4)
  {
    v9 = (v4 + 31) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)(__sz + 48) = v9 + v2;
  }
  else if (v2 < 0xFFE2)
  {
    v10 = *(_DWORD *)(__sz + 72) >> 7;
    if (v10 >= 0x1E)
      LOBYTE(v10) = 30;
    v11 = 0x10000 << v10;
    v12 = (char *)operator new(0x10000 << v10, (std::align_val_t)8uLL);
    v13 = *(unsigned int *)(__sz + 72);
    if (v13 >= *(_DWORD *)(__sz + 76))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 64, __sz + 80, v13 + 1, 8);
      LODWORD(v13) = *(_DWORD *)(__sz + 72);
    }
    *(_QWORD *)(*(_QWORD *)(__sz + 64) + 8 * v13) = v12;
    ++*(_DWORD *)(__sz + 72);
    v14 = &v12[v11];
    v9 = (unint64_t)(v12 + 31) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)(__sz + 48) = v9 + v2;
    *(_QWORD *)(__sz + 56) = v14;
  }
  else
  {
    v5 = v2 | 0x1F;
    v6 = operator new(v2 | 0x1F, (std::align_val_t)8uLL);
    v7 = *(unsigned int *)(__sz + 120);
    if (v7 >= *(_DWORD *)(__sz + 124))
    {
      v26 = v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 112, v3, v7 + 1, 16);
      v6 = v26;
      LODWORD(v7) = *(_DWORD *)(__sz + 120);
    }
    v8 = (_QWORD *)(*(_QWORD *)(__sz + 112) + 16 * v7);
    *v8 = v6;
    v8[1] = v5;
    ++*(_DWORD *)(__sz + 120);
    v9 = ((unint64_t)v6 + 31) & 0xFFFFFFFFFFFFFFE0;
  }
  v16 = *(unint64_t **)(__sz + 32);
  v15 = *(_QWORD *)(__sz + 40);
  if ((unint64_t)v16 >= v15)
  {
    v18 = *(_QWORD **)(__sz + 24);
    v19 = v16 - v18;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61)
      abort();
    v21 = v15 - (_QWORD)v18;
    if (v21 >> 2 > v20)
      v20 = v21 >> 2;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 61)
        sub_1C4764EE4();
      v23 = (char *)operator new(8 * v22);
    }
    else
    {
      v23 = 0;
    }
    v24 = (unint64_t *)&v23[8 * v19];
    *v24 = v9;
    v17 = v24 + 1;
    if (v16 != v18)
    {
      do
      {
        v25 = *--v16;
        *--v24 = v25;
      }
      while (v16 != v18);
      v16 = *(unint64_t **)(__sz + 24);
    }
    *(_QWORD *)(__sz + 24) = v24;
    *(_QWORD *)(__sz + 32) = v17;
    *(_QWORD *)(__sz + 40) = &v23[8 * v22];
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v16 = v9;
    v17 = v16 + 1;
  }
  *(_QWORD *)(__sz + 32) = v17;
  *(_QWORD *)(__sz + 16) = v9;
}

BOOL llvm::rdf::NodeAllocator::needNewBlock(llvm::rdf::NodeAllocator *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 4);
  return *((_QWORD *)this + 3) == v1
      || *(_DWORD *)this <= ((*((_QWORD *)this + 2) - *(_QWORD *)(v1 - 8)) / 32);
}

uint64_t llvm::rdf::NodeAllocator::New(size_t __sz)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(__sz + 32);
  if (*(_QWORD *)(__sz + 24) == v2
    || (result = *(_QWORD *)(__sz + 16), *(_DWORD *)__sz <= ((result - *(_QWORD *)(v2 - 8)) / 32)))
  {
    llvm::rdf::NodeAllocator::startNewBlock(__sz);
    result = *(_QWORD *)(__sz + 16);
  }
  *(_QWORD *)(__sz + 16) = result + 32;
  return result;
}

unint64_t llvm::rdf::NodeAllocator::id(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32) - v2;
  if ((v3 & 0x7FFFFFFF8) != 0)
  {
    v4 = 0;
    v5 = (v3 >> 3);
    while (1)
    {
      v3 = *(_QWORD *)(v2 + 8 * v4);
      if (v3 <= a2 && (32 * *(_DWORD *)a1) + v3 > a2)
        break;
      if (v5 == ++v4)
        return v3;
    }
    return (((_DWORD)v4 << *(_DWORD *)(a1 + 4)) | ((a2 - v3) >> 5)) + 1;
  }
  return v3;
}

uint64_t llvm::rdf::NodeAllocator::clear(llvm::rdf::NodeAllocator *this)
{
  uint64_t result;

  result = sub_1C520F4DC((uint64_t)this + 48);
  *((_QWORD *)this + 4) = *((_QWORD *)this + 3);
  *((_QWORD *)this + 2) = 0;
  return result;
}

uint64_t sub_1C520F4DC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  v2 = *(unsigned int *)(result + 72);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(result + 64);
    v4 = 16 * v2;
    do
    {
      v5 = *v3;
      v3 += 2;
      result = MEMORY[0x1CAA32FB4](v5, 8);
      v4 -= 16;
    }
    while (v4);
  }
  *(_DWORD *)(v1 + 72) = 0;
  v6 = *(unsigned int *)(v1 + 24);
  if ((_DWORD)v6)
  {
    *(_QWORD *)(v1 + 80) = 0;
    v7 = *(_QWORD **)(v1 + 16);
    v8 = *v7 + 0x10000;
    *(_QWORD *)v1 = *v7;
    *(_QWORD *)(v1 + 8) = v8;
    if ((_DWORD)v6 != 1)
    {
      v9 = v7 + 1;
      v10 = 8 * v6 - 8;
      do
      {
        v11 = *v9++;
        result = MEMORY[0x1CAA32FB4](v11, 8);
        v10 -= 8;
      }
      while (v10);
    }
    *(_DWORD *)(v1 + 24) = 1;
  }
  return result;
}

uint64_t llvm::rdf::NodeBase::append(uint64_t result, uint64_t a2, int a3)
{
  int v3;

  v3 = *(_DWORD *)(result + 4);
  if (v3 != a3)
  {
    *(_DWORD *)(result + 4) = a3;
    *(_DWORD *)(a2 + 4) = v3;
  }
  return result;
}

uint64_t llvm::rdf::DataFlowGraph::makeRegRef(llvm::rdf::DataFlowGraph *this, const llvm::MachineOperand *a2)
{
  char *v2;
  char *v3;
  char *v4;
  unsigned int v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  int v14;

  if (*(_DWORD *)a2)
  {
    v2 = (char *)*((_QWORD *)this + 4);
    v3 = (char *)*((_QWORD *)this + 5);
    if (v2 == v3)
    {
      v4 = (char *)*((_QWORD *)this + 4);
    }
    else
    {
      v4 = (char *)*((_QWORD *)this + 4);
      while (*(_QWORD *)v4 != *((_QWORD *)a2 + 2))
      {
        v4 += 8;
        if (v4 == v3)
        {
          v4 = (char *)*((_QWORD *)this + 5);
          return ((unint64_t)(v4 - v2) >> 3) + 1073741825;
        }
      }
    }
    return ((unint64_t)(v4 - v2) >> 3) + 1073741825;
  }
  else
  {
    v5 = *((_DWORD *)a2 + 1);
    v6 = (*(_DWORD *)a2 >> 8) & 0xFFF;
    if (v6)
    {
      v7 = (_QWORD *)*((_QWORD *)this + 2);
      v8 = v7[1];
      v9 = v7[7];
      v10 = *(unsigned int *)(v8 + 24 * v5 + 4);
      if (*(_WORD *)(v9 + 2 * v10))
      {
        v11 = *(_WORD *)(v9 + 2 * v10) + v5;
        v12 = (unsigned __int16 *)(v7[11] + 2 * *(unsigned int *)(v8 + 24 * v5 + 12));
        v13 = (unsigned __int16 *)(v9 + 2 * v10 + 2);
        while (v6 != *v12)
        {
          v5 = 0;
          v14 = *v13++;
          v11 += v14;
          ++v12;
          if (!v14)
            return v5;
        }
        return v11;
      }
      else
      {
        return 0;
      }
    }
  }
  return v5;
}

uint64_t llvm::rdf::RefNode::setRegRef(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = result;
  if (a3 == -1)
  {
    v6 = 0;
  }
  else
  {
    result = sub_1C5214E3C(a4 + 440, a3);
    v6 = result << 32;
  }
  *(_QWORD *)(v5 + 24) = v6 | a2;
  return result;
}

uint64_t llvm::rdf::RefNode::setRegRef(uint64_t this, llvm::MachineOperand *a2, llvm::rdf::DataFlowGraph *a3)
{
  *(_QWORD *)(this + 24) = a2;
  return this;
}

uint64_t llvm::rdf::RefNode::getOwner(llvm::rdf::RefNode *this, const llvm::rdf::DataFlowGraph *a2)
{
  int v2;
  uint64_t result;
  int v4;

  v2 = *((_DWORD *)this + 1);
  if (v2)
    result = *(_QWORD *)(*((_QWORD *)a2 + 37) + 8 * ((v2 - 1) >> *((_DWORD *)a2 + 69)))
           + 32 * (*((_DWORD *)a2 + 70) & (v2 - 1));
  else
    result = 0;
  while ((*(_WORD *)result & 3) != 1)
  {
    v4 = *(_DWORD *)(result + 4);
    if (v4)
      result = *(_QWORD *)(*((_QWORD *)a2 + 37) + 8 * ((v4 - 1) >> *((_DWORD *)a2 + 69)))
             + 32 * ((v4 - 1) & *((_DWORD *)a2 + 70));
    else
      result = 0;
  }
  return result;
}

uint64_t llvm::rdf::DefNode::linkToDef(uint64_t result, int a2, uint64_t a3, int a4)
{
  *(_DWORD *)(result + 8) = a4;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(a3 + 16) = a2;
  return result;
}

uint64_t llvm::rdf::UseNode::linkToDef(uint64_t result, int a2, uint64_t a3, int a4)
{
  *(_DWORD *)(result + 8) = a4;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a3 + 20);
  *(_DWORD *)(a3 + 20) = a2;
  return result;
}

uint64_t llvm::rdf::CodeNode::getFirstMember(llvm::rdf::CodeNode *this, const llvm::rdf::DataFlowGraph *a2)
{
  int v3;

  v3 = *((_DWORD *)this + 4);
  if (v3)
    return *(_QWORD *)(*((_QWORD *)a2 + 37) + 8 * ((v3 - 1) >> *((_DWORD *)a2 + 69)))
         + 32 * (*((_DWORD *)a2 + 70) & (v3 - 1));
  else
    return 0;
}

uint64_t llvm::rdf::CodeNode::getLastMember(llvm::rdf::CodeNode *this, const llvm::rdf::DataFlowGraph *a2)
{
  int v3;

  v3 = *((_DWORD *)this + 5);
  if (v3)
    return *(_QWORD *)(*((_QWORD *)a2 + 37) + 8 * ((v3 - 1) >> *((_DWORD *)a2 + 69)))
         + 32 * (*((_DWORD *)a2 + 70) & (v3 - 1));
  else
    return 0;
}

unint64_t llvm::rdf::CodeNode::addMember(unint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  unint64_t result;

  v7 = *(_DWORD *)(a1 + 20);
  if (!v7)
  {
    *(_DWORD *)(a1 + 16) = a3;
    result = llvm::rdf::DataFlowGraph::id(a4, a1);
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a4 + 296) + 8 * ((v7 - 1) >> *(_DWORD *)(a4 + 276)))
     + 32 * (*(_DWORD *)(a4 + 280) & (v7 - 1));
  result = *(unsigned int *)(v8 + 4);
  if ((_DWORD)result != a3)
  {
    *(_DWORD *)(v8 + 4) = a3;
LABEL_5:
    *(_DWORD *)(a2 + 4) = result;
  }
  *(_DWORD *)(a1 + 20) = a3;
  return result;
}

unint64_t llvm::rdf::DataFlowGraph::id(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!a2)
    return 0;
  v2 = *(_QWORD *)(a1 + 296);
  v3 = *(_QWORD *)(a1 + 304) - v2;
  if ((v3 & 0x7FFFFFFF8) != 0)
  {
    v4 = 0;
    v5 = (v3 >> 3);
    while (1)
    {
      v3 = *(_QWORD *)(v2 + 8 * v4);
      if (v3 <= a2 && (32 * *(_DWORD *)(a1 + 272)) + v3 > a2)
        break;
      if (v5 == ++v4)
        return v3;
    }
    return (((_DWORD)v4 << *(_DWORD *)(a1 + 276)) | ((a2 - v3) >> 5)) + 1;
  }
  return v3;
}

uint64_t llvm::rdf::CodeNode::addMemberAfter(uint64_t result, uint64_t a2, int a3, uint64_t a4, int a5)
{
  int v5;

  v5 = *(_DWORD *)(a2 + 4);
  if (v5 != a5)
  {
    *(_DWORD *)(a2 + 4) = a5;
    *(_DWORD *)(a4 + 4) = v5;
  }
  if (*(_DWORD *)(result + 20) == a3)
    *(_DWORD *)(result + 20) = a5;
  return result;
}

uint64_t llvm::rdf::CodeNode::removeMember(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;

  v4 = *(_DWORD *)(result + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a4 + 296) + 8 * ((v4 - 1) >> *(_DWORD *)(a4 + 276)))
       + 32 * (*(_DWORD *)(a4 + 280) & (v4 - 1));
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  if (v4 == a3)
  {
    if (*(_DWORD *)(result + 20) == a3)
      *(_QWORD *)(result + 16) = 0;
    else
      *(_DWORD *)(result + 16) = *(_DWORD *)(v5 + 4);
  }
  else
  {
    v6 = *(_DWORD *)(v5 + 4);
    if (v6 != a3)
    {
      do
      {
        v7 = v6;
        v5 = *(_QWORD *)(*(_QWORD *)(a4 + 296) + 8 * ((v6 - 1) >> *(_DWORD *)(a4 + 276)))
           + 32 * ((v6 - 1) & *(_DWORD *)(a4 + 280));
        v6 = *(_DWORD *)(v5 + 4);
      }
      while (v6 != a3);
      v4 = v7;
    }
    *(_DWORD *)(v5 + 4) = *(_DWORD *)(a2 + 4);
    if (*(_DWORD *)(result + 20) == a3)
      *(_DWORD *)(result + 20) = v4;
  }
  return result;
}

uint64_t llvm::rdf::InstrNode::getOwner(llvm::rdf::InstrNode *this, const llvm::rdf::DataFlowGraph *a2)
{
  int v2;
  uint64_t result;
  int v4;

  v2 = *((_DWORD *)this + 1);
  if (v2)
    result = *(_QWORD *)(*((_QWORD *)a2 + 37) + 8 * ((v2 - 1) >> *((_DWORD *)a2 + 69)))
           + 32 * (*((_DWORD *)a2 + 70) & (v2 - 1));
  else
    result = 0;
  while ((*(_WORD *)result & 0x1C) != 0x14)
  {
    v4 = *(_DWORD *)(result + 4);
    if (v4)
      result = *(_QWORD *)(*((_QWORD *)a2 + 37) + 8 * ((v4 - 1) >> *((_DWORD *)a2 + 69)))
             + 32 * ((v4 - 1) & *((_DWORD *)a2 + 70));
    else
      result = 0;
  }
  return result;
}

unint64_t llvm::rdf::BlockNode::addPhi(unint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v4 = *(_DWORD *)(result + 16);
  if (!v4)
    return llvm::rdf::CodeNode::addMember(result, a2, a3, a4);
  v5 = *(_DWORD *)(a4 + 276);
  v6 = *(_DWORD *)(a4 + 280);
  v7 = *(_QWORD *)(a4 + 296);
  v8 = *(_QWORD *)(v7 + 8 * ((v4 - 1) >> v5)) + 32 * (v6 & (v4 - 1));
  if ((*(_WORD *)v8 & 0x1C) == 0x10)
  {
    *(_DWORD *)(result + 16) = a3;
    *(_DWORD *)(a2 + 4) = v4;
  }
  else
  {
    do
    {
      v9 = v4;
      v10 = v8;
      v4 = *(_DWORD *)(v8 + 4);
      v8 = *(_QWORD *)(v7 + 8 * ((v4 - 1) >> v5)) + 32 * ((v4 - 1) & v6);
    }
    while ((*(_WORD *)v8 & 0x1C) == 0xC);
    if (v4 != a3)
    {
      *(_DWORD *)(v10 + 4) = a3;
      *(_DWORD *)(a2 + 4) = v4;
    }
    if (*(_DWORD *)(result + 20) == v9)
      *(_DWORD *)(result + 20) = a3;
  }
  return result;
}

uint64_t llvm::rdf::FuncNode::findBlock(llvm::rdf::FuncNode *this, const llvm::MachineBasicBlock *a2, const llvm::rdf::DataFlowGraph *a3)
{
  unsigned int v3;
  uint64_t v6;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  void *v12;
  uint64_t v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  v12 = v14;
  v13 = 0x400000000;
  v3 = *((_DWORD *)this + 4);
  if (!v3)
    return 0;
  v6 = *(_QWORD *)(*((_QWORD *)a3 + 37) + 8 * ((v3 - 1) >> *((_DWORD *)a3 + 69)))
     + 32 * (*((_DWORD *)a3 + 70) & (v3 - 1));
  if ((llvm::rdf::FuncNode *)v6 == this)
    return 0;
  v8 = 0;
  do
  {
    if (*(const llvm::MachineBasicBlock **)(v6 + 8) == a2)
    {
      if (v8 >= HIDWORD(v13))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v12, (uint64_t)v14, v8 + 1, 16);
        v8 = v13;
      }
      v9 = (char *)v12 + 16 * v8;
      *v9 = v6;
      v9[1] = v3;
      v8 = v13 + 1;
      LODWORD(v13) = v13 + 1;
    }
    v3 = *(_DWORD *)(v6 + 4);
    if (v3)
      v6 = *(_QWORD *)(*((_QWORD *)a3 + 37) + 8 * ((v3 - 1) >> *((_DWORD *)a3 + 69)))
         + 32 * (*((_DWORD *)a3 + 70) & (v3 - 1));
    else
      v6 = 0;
  }
  while ((llvm::rdf::FuncNode *)v6 != this);
  if (v8)
    v10 = *(_QWORD *)v12;
  else
    v10 = 0;
  if (v12 != v14)
    free(v12);
  return v10;
}

uint64_t llvm::rdf::FuncNode::getEntryBlock(llvm::rdf::FuncNode *this, const llvm::rdf::DataFlowGraph *a2)
{
  return llvm::rdf::FuncNode::findBlock(this, *(const llvm::MachineBasicBlock **)(*((_QWORD *)this + 1) + 328), a2);
}

uint64_t llvm::rdf::TargetOperandInfo::isPreserving(llvm::rdf::TargetOperandInfo *this, const llvm::MachineInstr *a2)
{
  return (*(uint64_t (**)(_QWORD, const llvm::MachineInstr *))(**((_QWORD **)this + 1) + 768))(*((_QWORD *)this + 1), a2);
}

uint64_t llvm::rdf::TargetOperandInfo::isClobbering(llvm::rdf::TargetOperandInfo *this, const llvm::MachineInstr *a2, unsigned int a3)
{
  int v3;

  v3 = *(_DWORD *)(*((_QWORD *)a2 + 4) + 32 * a3);
  if (v3 == 12)
    return 1;
  if ((*((_WORD *)a2 + 22) & 0xC) != 0 && (*((_WORD *)a2 + 22) & 4) == 0)
  {
    if ((*(_QWORD *)(*((_QWORD *)a2 + 2) + 8) & 0x80) != 0)
    {
LABEL_16:
      if ((~v3 & 0x5000000) == 0)
        return 1;
    }
    else
    {
      while ((*((_WORD *)a2 + 22) & 8) != 0)
      {
        a2 = (const llvm::MachineInstr *)*((_QWORD *)a2 + 1);
        if ((*(_BYTE *)(*((_QWORD *)a2 + 2) + 8) & 0x80) != 0)
          goto LABEL_16;
      }
    }
  }
  else if ((~v3 & 0x5000000) == 0 && (*(_QWORD *)(*((_QWORD *)a2 + 2) + 8) & 0x80) != 0)
  {
    return 1;
  }
  return 0;
}

BOOL llvm::rdf::TargetOperandInfo::isFixedReg(llvm::rdf::TargetOperandInfo *this, const llvm::MachineInstr *a2, unsigned int a3)
{
  _QWORD *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BOOL8 result;
  const llvm::MachineInstr *v12;
  const llvm::MachineInstr *v13;
  const llvm::MachineInstr *v14;
  uint64_t v15;
  unsigned __int16 *v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;

  v3 = (_QWORD *)*((_QWORD *)a2 + 2);
  v4 = v3[1];
  v5 = (*((_WORD *)a2 + 22) & 0xC) != 0 && (*((_WORD *)a2 + 22) & 4) == 0;
  if (v5)
  {
    if ((v4 & 0x80) != 0)
      return 1;
    v12 = a2;
    result = 1;
    while ((*((_WORD *)v12 + 22) & 8) != 0)
    {
      v12 = (const llvm::MachineInstr *)*((_QWORD *)v12 + 1);
      if ((*(_BYTE *)(*((_QWORD *)v12 + 2) + 8) & 0x80) != 0)
        return result;
    }
    if ((v4 & 0x20) != 0)
      return 1;
    v13 = a2;
    result = 1;
    while ((*((_WORD *)v13 + 22) & 8) != 0)
    {
      v13 = (const llvm::MachineInstr *)*((_QWORD *)v13 + 1);
      if ((*(_BYTE *)(*((_QWORD *)v13 + 2) + 8) & 0x20) != 0)
        return result;
    }
    if (*(unsigned __int16 *)v3 - 1 < 2)
      return 1;
    if ((v4 & 0x400) == 0)
    {
      v14 = a2;
      while ((*((_WORD *)v14 + 22) & 8) != 0)
      {
        v14 = (const llvm::MachineInstr *)*((_QWORD *)v14 + 1);
        if ((*(_BYTE *)(*((_QWORD *)v14 + 2) + 9) & 4) != 0)
          goto LABEL_8;
      }
      goto LABEL_12;
    }
    goto LABEL_8;
  }
  if ((v4 & 0xA0) != 0 || *(unsigned __int16 *)v3 - 1 < 2)
    return 1;
  if ((v4 & 0x400) != 0)
  {
LABEL_8:
    v6 = *((unsigned int *)a2 + 10);
    if ((_DWORD)v6)
    {
      v7 = (unsigned __int8 *)*((_QWORD *)a2 + 4);
      v8 = 32 * v6;
      while (*v7 - 9 >= 2)
      {
        v7 += 32;
        v8 -= 32;
        if (!v8)
          goto LABEL_12;
      }
      return 1;
    }
  }
  if (!v3[4] && !v3[3])
    return 0;
  v9 = *((_QWORD *)a2 + 4);
  v10 = *(_DWORD *)(v9 + 32 * a3);
  if ((v10 & 0xFFF00) != 0)
    return 0;
LABEL_12:
  v5 = (v10 & 0x1000000) == 0;
  v15 = 4;
  if (v5)
    v15 = 3;
  v16 = (unsigned __int16 *)v3[v15];
  if (!v16)
    return 0;
  v17 = *(_DWORD *)(v9 + 32 * a3 + 4);
  do
  {
    v19 = *v16++;
    v18 = v19;
    result = v19 != 0;
    if (v19)
      v20 = v17 == v18;
    else
      v20 = 1;
  }
  while (!v20);
  return result;
}

llvm::rdf::DataFlowGraph *llvm::rdf::DataFlowGraph::DataFlowGraph(llvm::rdf::DataFlowGraph *this, llvm::MachineFunction *a2, const llvm::TargetInstrInfo *a3, const llvm::TargetRegisterInfo *a4, const llvm::MachineDominatorTree *a5, const llvm::MachineDominanceFrontier *a6, const llvm::rdf::TargetOperandInfo *a7)
{
  char *v11;
  char *v12;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 2) = a4;
  v11 = (char *)this + 24;
  llvm::rdf::PhysicalRegisterInfo::PhysicalRegisterInfo((llvm::rdf::DataFlowGraph *)((char *)this + 24), a4, a2);
  *((_QWORD *)this + 19) = a5;
  *((_QWORD *)this + 20) = a6;
  *((_QWORD *)this + 21) = a7;
  LODWORD(a7) = *(_DWORD *)(*((_QWORD *)this + 3) + 44);
  *((_QWORD *)this + 22) = (char *)this + 192;
  *((_QWORD *)this + 23) = 0x600000000;
  sub_1C4765AA4((char *)this + 176, ((_DWORD)a7 + 63) >> 6, 0);
  *((_DWORD *)this + 60) = (_DWORD)a7;
  *((_QWORD *)this + 31) = v11;
  *((_QWORD *)this + 32) = 0;
  *((_DWORD *)this + 66) = 0;
  *((_QWORD *)this + 34) = 0xC00001000;
  *((_DWORD *)this + 70) = 4095;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_QWORD *)this + 42) = (char *)this + 352;
  *((_QWORD *)this + 43) = 0x400000000;
  *((_QWORD *)this + 48) = (char *)this + 400;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 1;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 52) = (char *)this + 424;
  v12 = (char *)operator new(0x100uLL);
  *((_QWORD *)this + 55) = v12;
  *((_QWORD *)this + 56) = v12;
  *((_QWORD *)this + 57) = v12 + 256;
  return this;
}

uint64_t llvm::rdf::DataFlowGraph::DefStack::Iterator::Iterator(uint64_t result, _QWORD *a2, char a3)
{
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)result = a2;
  if ((a3 & 1) != 0)
  {
    v3 = a2[1] - *a2;
    v4 = (v3 >> 4) + 1;
    v5 = v3 & 0xFFFFFFFF0;
    while (v5)
    {
      v6 = *(_QWORD *)(*a2 - 16 + v5);
      --v4;
      v5 -= 16;
      if (v6)
        goto LABEL_8;
    }
    v4 = 0;
LABEL_8:
    *(_DWORD *)(result + 8) = v4;
  }
  else
  {
    *(_DWORD *)(result + 8) = 0;
  }
  return result;
}

{
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)result = a2;
  if ((a3 & 1) != 0)
  {
    v3 = a2[1] - *a2;
    v4 = (v3 >> 4) + 1;
    v5 = v3 & 0xFFFFFFFF0;
    while (v5)
    {
      v6 = *(_QWORD *)(*a2 - 16 + v5);
      --v4;
      v5 -= 16;
      if (v6)
        goto LABEL_8;
    }
    v4 = 0;
LABEL_8:
    *(_DWORD *)(result + 8) = v4;
  }
  else
  {
    *(_DWORD *)(result + 8) = 0;
  }
  return result;
}

uint64_t llvm::rdf::DataFlowGraph::DefStack::size(llvm::rdf::DataFlowGraph::DefStack *this)
{
  uint64_t v1;
  unint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  uint64_t v8;

  v1 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  v3 = (v2 >> 4) + 1;
  v4 = v2 & 0xFFFFFFFF0;
  do
  {
    if (!v4)
      return 0;
    v5 = *(_QWORD *)(*(_QWORD *)this - 16 + v4);
    --v3;
    v4 -= 16;
  }
  while (!v5);
  LODWORD(result) = 0;
LABEL_5:
  result = (result + 1);
  v7 = v3;
  while (1)
  {
    v3 = v7 - 1;
    if (v7 == 1)
      return result;
    v8 = *(_QWORD *)(v1 + 16 * (v7 - 2));
    --v7;
    if (v8)
      goto LABEL_5;
  }
}

void llvm::rdf::DataFlowGraph::DefStack::pop(llvm::rdf::DataFlowGraph::DefStack *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v1 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  v2 = ((unint64_t)v1 >> 4) - 2;
  v3 = ((unint64_t)v1 >> 4) - 1;
  v4 = *(_QWORD *)this + 16 * v3;
  v5 = -v3;
  do
  {
    v6 = v4;
    v7 = v5;
    if (v2 == -1)
      break;
    v8 = *(_QWORD *)(*(_QWORD *)this + 16 * v2--);
    v4 -= 16;
    ++v5;
  }
  while (!v8);
  v9 = v1 >> 4;
  if (v9 >= -v7)
  {
    if (v9 > -v7)
      *((_QWORD *)this + 1) = v6;
  }
  else
  {
    sub_1C52150AC((uint64_t)this, -v7 - v9);
  }
}

uint64_t llvm::rdf::DataFlowGraph::DefStack::nextDown(llvm::rdf::DataFlowGraph::DefStack *this, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (a2 - 1);
  do
  {
    v3 = v2;
    if (!(_DWORD)v2)
      break;
    v2 = (v2 - 1);
  }
  while (!*(_QWORD *)(*(_QWORD *)this + 16 * (v3 - 1)));
  return v3;
}

void llvm::rdf::DataFlowGraph::DefStack::start_block(llvm::rdf::DataFlowGraph::DefStack *this, int a2)
{
  unint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  int v15;

  v5 = (_DWORD *)*((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  if ((unint64_t)v5 >= v4)
  {
    v7 = *(_DWORD **)this;
    v8 = ((uint64_t)v5 - *(_QWORD *)this) >> 4;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60)
      abort();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 60)
        sub_1C4764EE4();
      v12 = (char *)operator new(16 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[16 * v8];
    *(_QWORD *)v13 = 0;
    *((_DWORD *)v13 + 2) = a2;
    v6 = v13 + 16;
    if (v5 != v7)
    {
      do
      {
        v14 = *((_QWORD *)v5 - 2);
        v5 -= 4;
        v15 = v5[2];
        *((_QWORD *)v13 - 2) = v14;
        v13 -= 16;
        *((_DWORD *)v13 + 2) = v15;
      }
      while (v5 != v7);
      v5 = *(_DWORD **)this;
    }
    *(_QWORD *)this = v13;
    *((_QWORD *)this + 1) = v6;
    *((_QWORD *)this + 2) = &v12[16 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v5 = 0;
    v5[2] = a2;
    v6 = v5 + 4;
  }
  *((_QWORD *)this + 1) = v6;
}

void llvm::rdf::DataFlowGraph::DefStack::clear_block(llvm::rdf::DataFlowGraph::DefStack *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;

  v2 = *(_QWORD *)this;
  v3 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  if ((v3 & 0xFFFFFFFF0) != 0)
  {
    v4 = (unint64_t)v3 >> 4;
    v5 = v4 - 1;
    while (1)
    {
      --v4;
      v6 = v5;
      if (!*(_QWORD *)(v2 + 16 * v5))
      {
        if (!a2)
          goto LABEL_8;
        if (*(_DWORD *)(v2 + 16 * v5 + 8) == a2)
          break;
      }
      --v5;
      if (!v6)
        goto LABEL_7;
    }
    v5 = v4;
  }
  else
  {
LABEL_7:
    v5 = 0;
  }
LABEL_8:
  v7 = v3 >> 4;
  if (v5 <= (unint64_t)(v3 >> 4))
  {
    if (v5 < v7)
      *((_QWORD *)this + 1) = v2 + 16 * v5;
  }
  else
  {
    sub_1C52150AC((uint64_t)this, v5 - v7);
  }
}

uint64_t llvm::rdf::DataFlowGraph::DefStack::nextUp(llvm::rdf::DataFlowGraph::DefStack *this, uint64_t a2)
{
  uint64_t v2;

  do
  {
    v2 = 16 * a2;
    a2 = (a2 + 1);
  }
  while (a2 < ((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4)
       && *(_QWORD *)(*(_QWORD *)this + v2) == 0);
  return a2;
}

uint64_t **llvm::rdf::DataFlowGraph::getLandingPadLiveIns@<X0>(uint64_t **this@<X0>, _QWORD *a2@<X8>)
{
  llvm::Value *v3;
  uint64_t v4;
  int v5;
  llvm::Value **v6;
  uint64_t v7;
  unsigned int v8;
  const llvm::Value *v9;
  uint64_t **result;
  __int128 v11;

  v3 = 0;
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  v4 = **this;
  if ((*(_WORD *)(v4 + 18) & 8) != 0)
  {
    v5 = *(_DWORD *)(v4 + 20);
    if ((v5 & 0x40000000) != 0)
      v6 = *(llvm::Value ***)(v4 - 8);
    else
      v6 = (llvm::Value **)(v4 - 32 * (v5 & 0x7FFFFFF));
    v3 = *v6;
  }
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*this)[2] + 120))((*this)[2]);
  v8 = (*(uint64_t (**)(uint64_t, llvm::Value *))(*(_QWORD *)v7 + 712))(v7, v3);
  if (v8)
  {
    LODWORD(v11) = v8;
    *((_QWORD *)&v11 + 1) = -1;
    sub_1C52151C8((uint64_t)a2, v8, 0xFFFFFFFFFFFFFFFFLL, &v11);
  }
  result = (uint64_t **)llvm::classifyEHPersonality(v3, v9);
  if (((_DWORD)result - 7) >= 4)
  {
    result = (uint64_t **)(*(uint64_t (**)(uint64_t, llvm::Value *))(*(_QWORD *)v7 + 720))(v7, v3);
    if ((_DWORD)result)
    {
      LODWORD(v11) = (_DWORD)result;
      *((_QWORD *)&v11 + 1) = -1;
      return sub_1C52151C8((uint64_t)a2, result, 0xFFFFFFFFFFFFFFFFLL, &v11);
    }
  }
  return result;
}

uint64_t llvm::rdf::DataFlowGraph::ptr(llvm::rdf::DataFlowGraph *this, int a2)
{
  if (a2)
    return *(_QWORD *)(*((_QWORD *)this + 37) + 8 * ((a2 - 1) >> *((_DWORD *)this + 69)))
         + 32 * (*((_DWORD *)this + 70) & (a2 - 1));
  else
    return 0;
}

double llvm::rdf::DataFlowGraph::newNode(llvm::rdf::DataFlowGraph *this, __int16 a2)
{
  _OWORD *v3;
  double result;

  v3 = (_OWORD *)llvm::rdf::NodeAllocator::New((size_t)this + 272);
  result = 0.0;
  *v3 = 0u;
  v3[1] = 0u;
  *(_WORD *)v3 = a2;
  return result;
}

uint64_t llvm::rdf::DataFlowGraph::cloneNode(uint64_t a1, _OWORD *a2)
{
  uint64_t result;
  __int128 v4;
  __int16 v5;

  result = llvm::rdf::NodeAllocator::New(a1 + 272);
  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  v4 = a2[1];
  *(_OWORD *)result = *a2;
  *(_OWORD *)(result + 16) = v4;
  v5 = *(_WORD *)result;
  if ((*(_WORD *)result & 3) == 2)
  {
    *(_QWORD *)(result + 8) = 0;
    if ((v5 & 0x1C) == 4)
      *(_QWORD *)(result + 16) = 0;
  }
  return result;
}

_QWORD *llvm::rdf::DataFlowGraph::newUse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  __int16 v6;
  _QWORD *result;

  v6 = a5 | 0xA;
  result = (_QWORD *)llvm::rdf::NodeAllocator::New(a1 + 272);
  *result = 0;
  result[1] = 0;
  *(_WORD *)result = v6;
  result[2] = 0;
  result[3] = a4;
  return result;
}

uint64_t llvm::rdf::DataFlowGraph::newPhiUse(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, int a7, __int16 a8)
{
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v12 = a8 | 0xA;
  v13 = llvm::rdf::NodeAllocator::New(a1 + 272);
  *(_OWORD *)v13 = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_WORD *)v13 = v12;
  if (a5 == -1)
    v14 = 0;
  else
    v14 = sub_1C5214E3C(a1 + 440, a5) << 32;
  *(_QWORD *)(v13 + 24) = v14 | a4;
  *(_DWORD *)(v13 + 16) = a7;
  return v13;
}

_QWORD *llvm::rdf::DataFlowGraph::newDef(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  __int16 v6;
  _QWORD *result;

  v6 = a5 | 6;
  result = (_QWORD *)llvm::rdf::NodeAllocator::New(a1 + 272);
  *result = 0;
  result[1] = 0;
  *(_WORD *)result = v6;
  result[2] = 0;
  result[3] = a4;
  return result;
}

uint64_t llvm::rdf::DataFlowGraph::newDef(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, __int16 a6)
{
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v9 = a6 | 6;
  v10 = llvm::rdf::NodeAllocator::New(a1 + 272);
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_WORD *)v10 = v9;
  if (a5 == -1)
    v11 = 0;
  else
    v11 = sub_1C5214E3C(a1 + 440, a5) << 32;
  *(_QWORD *)(v10 + 24) = v11 | a4;
  return v10;
}

_OWORD *llvm::rdf::DataFlowGraph::newPhi(uint64_t a1, unint64_t a2)
{
  _OWORD *v4;
  int v5;

  v4 = (_OWORD *)llvm::rdf::NodeAllocator::New(a1 + 272);
  *v4 = 0u;
  v4[1] = 0u;
  *(_WORD *)v4 = 13;
  llvm::rdf::BlockNode::addPhi(a2, (uint64_t)v4, v5, a1);
  return v4;
}

uint64_t llvm::rdf::DataFlowGraph::newStmt(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int v8;

  v7 = llvm::rdf::NodeAllocator::New(a1 + 272);
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_WORD *)v7 = 17;
  *(_QWORD *)(v7 + 8) = a4;
  llvm::rdf::CodeNode::addMember(a2, v7, v8, a1);
  return v7;
}

uint64_t llvm::rdf::DataFlowGraph::newBlock(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int v8;

  v7 = llvm::rdf::NodeAllocator::New(a1 + 272);
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_WORD *)v7 = 21;
  *(_QWORD *)(v7 + 8) = a4;
  llvm::rdf::CodeNode::addMember(a2, v7, v8, a1);
  return v7;
}

double llvm::rdf::DataFlowGraph::newFunc(llvm::rdf::DataFlowGraph *this, llvm::MachineFunction *a2)
{
  uint64_t v3;
  double result;

  v3 = llvm::rdf::NodeAllocator::New((size_t)this + 272);
  result = 0.0;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_WORD *)v3 = 25;
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

void llvm::rdf::DataFlowGraph::build(uint64_t **this, char a2)
{
  unint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t i;
  int v22;
  char *v23;
  char *v24;
  __int128 *v25;
  llvm::rdf::RefNode **v26;
  uint64_t v27;
  llvm::rdf::RefNode *v28;
  unint64_t v29;
  _QWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  unsigned __int16 *j;
  unsigned __int16 *v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  _QWORD *v52;
  _QWORD *v53;
  BOOL v54;
  unsigned int *v55;
  int v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  _OWORD *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  int v79;
  _QWORD *v80;
  _QWORD **v81;
  unsigned int *v82;
  unint64_t *v83;
  char *v84;
  _QWORD *v85;
  _QWORD *v86;
  void *v87;
  void *v88;
  int v89;
  char v90;
  unint64_t Block;
  unsigned int *v92;
  char *__sz;
  __int128 v94;
  uint64_t v95;
  _QWORD **v96;
  _QWORD *v97[2];
  void *v98;
  _QWORD *v99;
  uint64_t v100;
  int v101;
  void *v102[2];
  __int128 __p;
  int v104;
  char *v105;
  int v106;
  _QWORD v107[10];

  v107[8] = *MEMORY[0x1E0C80C00];
  llvm::rdf::DataFlowGraph::reset((llvm::rdf::DataFlowGraph *)this);
  v5 = *this;
  __sz = (char *)(this + 34);
  v6 = llvm::rdf::NodeAllocator::New((size_t)(this + 34));
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_WORD *)v6 = 25;
  *(_QWORD *)(v6 + 8) = v5;
  this[32] = (uint64_t *)v6;
  *((_DWORD *)this + 66) = v7;
  v8 = *this + 40;
  if ((_QWORD *)*v8 == v8)
    return;
  v90 = a2;
  v9 = (_QWORD *)(*this)[41];
  if (v9 != v8)
  {
    v2 = 21;
    do
    {
      v10 = (unint64_t)this[32];
      v11 = llvm::rdf::NodeAllocator::New((size_t)__sz);
      *(_OWORD *)v11 = 0u;
      *(_OWORD *)(v11 + 16) = 0u;
      *(_WORD *)v11 = 21;
      *(_QWORD *)(v11 + 8) = v9;
      v13 = v12;
      llvm::rdf::CodeNode::addMember(v10, v11, v12, (uint64_t)this);
      v14 = this[53];
      v15 = this + 53;
      v16 = this + 53;
      if (v14)
      {
        while (1)
        {
          while (1)
          {
            v16 = (uint64_t **)v14;
            v17 = v14[4];
            if (v17 <= (unint64_t)v9)
              break;
            v14 = *v16;
            v15 = v16;
            if (!*v16)
              goto LABEL_11;
          }
          if (v17 >= (unint64_t)v9)
            break;
          v14 = v16[1];
          if (!v14)
          {
            v15 = v16 + 1;
            goto LABEL_11;
          }
        }
      }
      else
      {
LABEL_11:
        v18 = (uint64_t *)operator new(0x38uLL);
        v18[4] = (uint64_t)v9;
        v18[5] = v11;
        v18[6] = v13;
        *v18 = 0;
        v18[1] = 0;
        v18[2] = (uint64_t)v16;
        *v15 = v18;
        v19 = (uint64_t *)*this[52];
        if (v19)
        {
          this[52] = v19;
          v20 = *v15;
        }
        else
        {
          v20 = v18;
        }
        sub_1C4768E74(this[53], v20);
        this[54] = (uint64_t *)((char *)this[54] + 1);
      }
      for (i = v9[7]; (_QWORD *)i != v9 + 6; i = *(_QWORD *)(i + 8))
      {
        if (**(unsigned __int16 **)(i + 16) - 13 >= 5)
          llvm::rdf::DataFlowGraph::buildStmt((uint64_t)this, v11, v13, i);
        if ((*(_BYTE *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            i = *(_QWORD *)(i + 8);
        }
      }
      v9 = (_QWORD *)v9[1];
    }
    while (v9 != v8);
    v6 = (uint64_t)this[32];
  }
  Block = llvm::rdf::FuncNode::findBlock((llvm::rdf::FuncNode *)v6, *(const llvm::MachineBasicBlock **)(*(_QWORD *)(v6 + 8) + 328), (const llvm::rdf::DataFlowGraph *)this);
  v89 = v22;
  llvm::rdf::CodeNode::members(this[32], (const llvm::rdf::DataFlowGraph *)this, (uint64_t)&v105);
  v97[0] = 0;
  v97[1] = 0;
  v96 = v97;
  if (v106)
  {
    v23 = v105;
    v24 = &v105[16 * v106];
    do
    {
      llvm::rdf::CodeNode::members(*(_DWORD **)v23, (const llvm::rdf::DataFlowGraph *)this, (uint64_t)v102);
      v25 = (__int128 *)v102[0];
      v2 = (unint64_t)v102[0] + 16 * LODWORD(v102[1]);
      if (LODWORD(v102[1]))
      {
        do
        {
          llvm::rdf::CodeNode::members(*(_DWORD **)v25, (const llvm::rdf::DataFlowGraph *)this, (uint64_t)&v98);
          v26 = (llvm::rdf::RefNode **)v98;
          if ((_DWORD)v99)
          {
            v27 = 16 * v99;
            do
            {
              v28 = *v26;
              v26 += 2;
              *(_QWORD *)&v94 = llvm::rdf::RefNode::getRegRef(v28, (const llvm::rdf::DataFlowGraph *)this);
              *((_QWORD *)&v94 + 1) = v29;
              sub_1C52151C8((uint64_t)&v96, v94, v29, &v94);
              v27 -= 16;
            }
            while (v27);
            v26 = (llvm::rdf::RefNode **)v98;
          }
          if (v26 != (llvm::rdf::RefNode **)&v100)
            free(v26);
          ++v25;
        }
        while (v25 != (__int128 *)v2);
        v25 = (__int128 *)v102[0];
      }
      if (v25 != &__p)
        free(v25);
      v23 += 16;
    }
    while (v23 != v24);
  }
  v30 = (_QWORD *)(*this)[5];
  v31 = (_DWORD *)Block;
  v32 = *(_QWORD *)(Block + 8);
  v33 = (int *)v30[57];
  v34 = v30[58] - (_QWORD)v33;
  if (v34)
  {
    v35 = 8 * (v34 >> 3);
    do
    {
      v37 = *v33;
      v33 += 2;
      v36 = v37;
      if (v37)
        v38 = -1;
      else
        v38 = 0;
      llvm::rdf::RegisterAggr::insert((uint64_t)(this + 22), v36, v38);
      v35 -= 8;
    }
    while (v35);
  }
  if ((**(_BYTE **)(*v30 + 360) & 4) != 0)
  {
    v40 = *(unsigned __int16 **)(v32 + 152);
    for (j = *(unsigned __int16 **)(v32 + 160); v40 != j; v40 += 8)
    {
      if (*v40)
        v41 = *((_QWORD *)v40 + 1);
      else
        v41 = 0;
      llvm::rdf::RegisterAggr::insert((uint64_t)(this + 22), *v40, v41);
    }
  }
  v42 = (unint64_t)(this + 22);
  llvm::rdf::RegisterAggr::rr_iterator::rr_iterator((uint64_t)v102, (uint64_t)(this + 22), 0);
  llvm::rdf::RegisterAggr::rr_iterator::rr_iterator((uint64_t)&v98, (uint64_t)(this + 22), 1);
  if (v104 != v101)
  {
    v43 = (_QWORD *)*((_QWORD *)&__p + 1);
    do
    {
      v42 = *((unsigned int *)v43 + 8);
      v44 = v43[5];
      if (v42)
        v45 = v44;
      else
        v45 = 0;
      v46 = (_OWORD *)llvm::rdf::NodeAllocator::New((size_t)__sz);
      *v46 = 0u;
      v46[1] = 0u;
      *(_WORD *)v46 = 13;
      llvm::rdf::BlockNode::addPhi(Block, (uint64_t)v46, v47, (uint64_t)this);
      v50 = llvm::rdf::DataFlowGraph::newDef((uint64_t)this, v48, v49, v42, v45, 384);
      llvm::rdf::CodeNode::addMember((unint64_t)v46, v50, v51, (uint64_t)this);
      v52 = (_QWORD *)*((_QWORD *)&__p + 1);
      v53 = *(_QWORD **)(*((_QWORD *)&__p + 1) + 8);
      if (v53)
      {
        do
        {
          v43 = v53;
          v53 = (_QWORD *)*v53;
        }
        while (v53);
      }
      else
      {
        do
        {
          v43 = (_QWORD *)v52[2];
          v54 = *v43 == (_QWORD)v52;
          v52 = v43;
        }
        while (!v54);
      }
      *((_QWORD *)&__p + 1) = v43;
      ++v104;
    }
    while (v104 != v101);
  }
  sub_1C4FE319C((uint64_t)&v98, v99);
  sub_1C4FE319C((uint64_t)v102, (_QWORD *)v102[1]);
  llvm::rdf::DataFlowGraph::getLandingPadLiveIns(this, &v98);
  v55 = (unsigned int *)v105;
  v56 = v106;
  if (!v100)
    goto LABEL_86;
  if (v106)
  {
    v57 = (char *)(this + 52);
    v92 = (unsigned int *)&v105[16 * v106];
    do
    {
      v58 = *(_QWORD *)v55;
      v59 = *(_QWORD *)(*(_QWORD *)v55 + 8);
      if (*(_BYTE *)(v59 + 184))
      {
        v102[0] = &__p;
        v102[1] = (void *)0x400000000;
        v42 = *(_QWORD *)(v59 + 64);
        v60 = *(_QWORD *)(v59 + 72);
        while (v42 != v60)
        {
          *(_QWORD *)&v94 = *(_QWORD *)v42;
          v61 = sub_1C5214F78((uint64_t)v57, (unint64_t *)&v94);
          v62 = *v61;
          v63 = *((unsigned int *)v61 + 2);
          v64 = LODWORD(v102[1]);
          if (LODWORD(v102[1]) >= (unint64_t)HIDWORD(v102[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v102, (uint64_t)&__p, LODWORD(v102[1]) + 1, 16);
            v64 = LODWORD(v102[1]);
          }
          v65 = (char *)v102[0] + 16 * v64;
          *v65 = v62;
          v65[1] = v63;
          ++LODWORD(v102[1]);
          v42 += 8;
        }
        v66 = v98;
        if (v98 != &v99)
        {
          do
          {
            v67 = v66[4];
            v42 = v66[5];
            v68 = (_OWORD *)llvm::rdf::NodeAllocator::New((size_t)__sz);
            *v68 = 0u;
            v68[1] = 0u;
            *(_WORD *)v68 = 13;
            llvm::rdf::BlockNode::addPhi(v58, (uint64_t)v68, v69, (uint64_t)this);
            v72 = llvm::rdf::DataFlowGraph::newDef((uint64_t)this, v70, v71, v67, v42, 384);
            llvm::rdf::CodeNode::addMember((unint64_t)v68, v72, v73, (uint64_t)this);
            if (LODWORD(v102[1]))
            {
              v76 = (uint64_t *)v102[0];
              v77 = (uint64_t *)((char *)v102[0] + 16 * LODWORD(v102[1]));
              do
              {
                v2 = v2 & 0xFFFFFFFF00000000 | *((unsigned int *)v76 + 2);
                v78 = llvm::rdf::DataFlowGraph::newPhiUse((uint64_t)this, v74, v75, v67, v42, *v76, v2, 128);
                llvm::rdf::CodeNode::addMember((unint64_t)v68, v78, v79, (uint64_t)this);
                v76 += 2;
              }
              while (v76 != v77);
            }
            v80 = (_QWORD *)v66[1];
            if (v80)
            {
              do
              {
                v81 = (_QWORD **)v80;
                v80 = (_QWORD *)*v80;
              }
              while (v80);
            }
            else
            {
              do
              {
                v81 = (_QWORD **)v66[2];
                v54 = *v81 == v66;
                v66 = v81;
              }
              while (!v54);
            }
            v66 = v81;
          }
          while (v81 != &v99);
        }
        if (v102[0] != &__p)
          free(v102[0]);
        v57 = (char *)(this + 52);
      }
      v55 += 4;
    }
    while (v55 != v92);
    v55 = (unsigned int *)v105;
    v56 = v106;
    v31 = (_DWORD *)Block;
LABEL_86:
    *((_QWORD *)&v94 + 1) = 0;
    v95 = 0;
    *(_QWORD *)&v94 = (char *)&v94 + 8;
    if (v56)
    {
      v82 = &v55[4 * v56];
      do
      {
        v42 = v42 & 0xFFFFFFFF00000000 | v55[2];
        llvm::rdf::DataFlowGraph::recordDefsForDF((llvm::rdf::DataFlowGraph *)this, (uint64_t **)&v94, *(llvm::rdf::CodeNode **)v55);
        v55 += 4;
      }
      while (v55 != v82);
      if (v106)
      {
        v83 = (unint64_t *)v105;
        v84 = &v105[16 * v106];
        do
        {
          v42 = v42 & 0xFFFFFFFF00000000 | *((unsigned int *)v83 + 2);
          llvm::rdf::DataFlowGraph::buildPhis((uint64_t)this, (uint64_t)&v94, &v96, *v83, v42);
          v83 += 2;
        }
        while (v83 != (unint64_t *)v84);
      }
    }
    goto LABEL_94;
  }
  *((_QWORD *)&v94 + 1) = 0;
  v95 = 0;
  *(_QWORD *)&v94 = (char *)&v94 + 8;
LABEL_94:
  *(_OWORD *)v102 = 0u;
  __p = 0u;
  v104 = 1065353216;
  llvm::rdf::DataFlowGraph::linkBlockRefs((unint64_t)this, (uint64_t *)v102, v31, v89);
  if ((v90 & 1) == 0)
    llvm::rdf::DataFlowGraph::removeUnusedPhis((llvm::rdf::DataFlowGraph *)this);
  v85 = (_QWORD *)__p;
  if ((_QWORD)__p)
  {
    do
    {
      v86 = (_QWORD *)*v85;
      v87 = (void *)v85[3];
      if (v87)
      {
        v85[4] = v87;
        operator delete(v87);
      }
      operator delete(v85);
      v85 = v86;
    }
    while (v86);
  }
  v88 = v102[0];
  v102[0] = 0;
  if (v88)
    operator delete(v88);
  sub_1C52152C0(*((_QWORD **)&v94 + 1));
  sub_1C49F3440(v99);
  sub_1C49F3440(v97[0]);
  if (v105 != (char *)v107)
    free(v105);
}

void llvm::rdf::DataFlowGraph::reset(llvm::rdf::DataFlowGraph *this)
{
  sub_1C520F4DC((uint64_t)this + 320);
  *((_QWORD *)this + 38) = *((_QWORD *)this + 37);
  *((_QWORD *)this + 36) = 0;
  sub_1C49F3440(*((_QWORD **)this + 53));
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 52) = (char *)this + 424;
  *((_QWORD *)this + 32) = 0;
  *((_DWORD *)this + 66) = 0;
}

void llvm::rdf::DataFlowGraph::buildStmt(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t i;
  const llvm::MachineOperand *v22;
  unsigned int v23;
  int RegRef;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  const llvm::MachineOperand *v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  uint64_t v33;
  __int16 v34;
  int v35;
  __int16 v36;
  __int16 v37;
  _QWORD *v38;
  int v39;
  int v40;
  uint64_t j;
  uint64_t v42;
  _QWORD *v43;
  int v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  _QWORD *v48;
  uint64_t k;
  _DWORD *v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const llvm::MachineOperand *v57;
  uint64_t v58;
  int v60;
  uint64_t v61;
  __int16 v62;
  int v63;
  __int16 v64;
  __int16 v65;
  _QWORD *v66;
  int v67;
  uint64_t v68;
  uint64_t m;
  _DWORD *v70;
  int v71;
  int v72;
  __int16 v73;
  __int16 v74;
  _QWORD *v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  int v79;
  int v80;
  size_t __sz;
  void *v82[2];
  _DWORD v83[14];
  void *v84[2];
  _DWORD v85[14];
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v7 = a1 + 272;
  v8 = llvm::rdf::NodeAllocator::New(a1 + 272);
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_WORD *)v8 = 17;
  *(_QWORD *)(v8 + 8) = a4;
  llvm::rdf::CodeNode::addMember(a2, v8, v9, a1);
  v10 = *(unsigned __int16 *)(a4 + 44);
  v31 = (v10 & 0xC) == 0;
  v11 = (v10 >> 2) & 1;
  if (v31)
    v12 = 1;
  else
    v12 = v11;
  v13 = *(_QWORD *)(*(_QWORD *)(a4 + 16) + 8);
  if ((v12 & 1) == 0)
  {
    if ((v13 & 0x80) != 0)
      goto LABEL_23;
    v14 = a4;
    while ((*(_WORD *)(v14 + 44) & 8) != 0)
    {
      v14 = *(_QWORD *)(v14 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v14 + 16) + 8) & 0x80) != 0)
        goto LABEL_23;
    }
    if ((v13 & 0x400) == 0)
    {
      v15 = a4;
      while ((*(_WORD *)(v15 + 44) & 8) != 0)
      {
        v15 = *(_QWORD *)(v15 + 8);
        if ((*(_BYTE *)(*(_QWORD *)(v15 + 16) + 9) & 4) != 0)
          goto LABEL_17;
      }
      goto LABEL_7;
    }
    goto LABEL_17;
  }
  if ((v13 & 0x80) != 0)
    goto LABEL_23;
  if ((v13 & 0x400) != 0)
  {
LABEL_17:
    v16 = *(unsigned int *)(a4 + 40);
    if ((_DWORD)v16)
    {
      v17 = *(unsigned __int8 **)(a4 + 32);
      v18 = 32 * v16;
      while (*v17 - 9 >= 2)
      {
        v17 += 32;
        v18 -= 32;
        if (!v18)
          goto LABEL_21;
      }
    }
    else
    {
LABEL_21:
      if ((v12 & 1) != 0)
      {
        if ((v13 & 0x800) == 0)
          goto LABEL_7;
      }
      else if ((v13 & 0x800) == 0)
      {
        v77 = a4;
        while ((*(_WORD *)(v77 + 44) & 8) != 0)
        {
          v77 = *(_QWORD *)(v77 + 8);
          v79 = 1;
          if ((*(_BYTE *)(*(_QWORD *)(v77 + 16) + 9) & 8) != 0)
            goto LABEL_24;
        }
        goto LABEL_7;
      }
    }
LABEL_23:
    v79 = 1;
    goto LABEL_24;
  }
LABEL_7:
  v79 = 0;
LABEL_24:
  v19 = *(unsigned int *)(a4 + 40);
  v20 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 16);
  v84[0] = v85;
  v84[1] = (void *)0x600000000;
  sub_1C4765AA4((char *)v84, (v20 + 63) >> 6, 0);
  v85[12] = v20;
  __sz = v7;
  v78 = v8;
  if ((_DWORD)v19)
  {
    for (i = 0; i != v19; ++i)
    {
      v22 = (const llvm::MachineOperand *)(*(_QWORD *)(a4 + 32) + 32 * i);
      if ((*(_DWORD *)v22 & 0x30000FF) == 0x1000000)
      {
        v23 = *((_DWORD *)v22 + 1);
        if (v23 - 1 <= 0x3FFFFFFE)
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 168) + 16))(*(_QWORD *)(a1 + 168), a4, i))
          {
            RegRef = llvm::rdf::DataFlowGraph::makeRegRef((llvm::rdf::DataFlowGraph *)a1, v22);
            v26 = *(unsigned int *)(a4 + 40);
            if ((_DWORD)v26)
            {
              v27 = RegRef;
              v28 = v25;
              v29 = *(const llvm::MachineOperand **)(a4 + 32);
              v30 = 32 * v26;
              while (1)
              {
                if (!*(_DWORD *)v29)
                {
                  v31 = (*(_DWORD *)v29 & 0x11000000) != 0 || *((_DWORD *)v29 + 1) == 0;
                  if (!v31)
                  {
                    v32 = llvm::rdf::DataFlowGraph::makeRegRef((llvm::rdf::DataFlowGraph *)a1, v29);
                    if ((sub_1C5213414((_QWORD *)(a1 + 24), v27, v28, v32, v33) & 1) != 0)
                      break;
                  }
                }
                v29 = (const llvm::MachineOperand *)((char *)v29 + 32);
                v30 -= 32;
                if (!v30)
                {
                  v34 = 1280;
                  goto LABEL_39;
                }
              }
              v34 = 256;
LABEL_39:
              v7 = __sz;
              v8 = v78;
            }
            else
            {
              v34 = 1280;
              v7 = __sz;
            }
          }
          else
          {
            v34 = 0;
          }
          if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 168) + 24))(*(_QWORD *)(a1 + 168), a4, i))
          {
            v34 |= 0x40u;
          }
          v35 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 168) + 32))(*(_QWORD *)(a1 + 168), a4, i);
          v36 = v34 | 0x200;
          if (!v35)
            v36 = v34;
          if (v79 && (~*(_DWORD *)v22 & 0x5000000) == 0)
            v36 |= 0x800u;
          v37 = v36 | 6;
          v38 = (_QWORD *)llvm::rdf::NodeAllocator::New(v7);
          *v38 = 0;
          v38[1] = 0;
          *(_WORD *)v38 = v37;
          v38[2] = 0;
          v38[3] = v22;
          llvm::rdf::CodeNode::addMember(v8, (uint64_t)v38, v39, a1);
          *((_QWORD *)v84[0] + (v23 >> 6)) |= 1 << v23;
        }
      }
    }
  }
  v40 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 16);
  v82[0] = v83;
  v82[1] = (void *)0x600000000;
  sub_1C4765AA4((char *)v82, (v40 + 63) >> 6, 0);
  v83[12] = v40;
  if (!(_DWORD)v19)
    goto LABEL_98;
  for (j = 0; j != v19; ++j)
  {
    v42 = *(_QWORD *)(a4 + 32) + 32 * j;
    if (*(_BYTE *)v42 == 12)
    {
      v43 = (_QWORD *)llvm::rdf::NodeAllocator::New(__sz);
      *v43 = 0;
      v43[1] = 0;
      *(_WORD *)v43 = 2630;
      v43[2] = 0;
      v43[3] = v42;
      llvm::rdf::CodeNode::addMember(v8, (uint64_t)v43, v44, a1);
      v45 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 16);
      if (v45 != 1)
      {
        v46 = *(_QWORD *)(v42 + 16);
        v47 = 1;
        v48 = v82[0];
        do
        {
          if (((*(_DWORD *)(v46 + 4 * (v47 >> 5)) >> v47) & 1) == 0)
            v48[v47 >> 6] |= 1 << v47;
          ++v47;
        }
        while (v45 != v47);
      }
    }
  }
  for (k = 0; k != v19; ++k)
  {
    v50 = (_DWORD *)(*(_QWORD *)(a4 + 32) + 32 * k);
    if ((*v50 & 0x30000FF) == 0x3000000)
    {
      v51 = v50[1];
      if (v51 - 1 <= 0x3FFFFFFE)
      {
        v52 = 1 << v51;
        v53 = v51 >> 6;
        if ((*((_QWORD *)v84[0] + (v51 >> 6)) & (1 << v51)) == 0)
        {
          v80 = llvm::rdf::DataFlowGraph::makeRegRef((llvm::rdf::DataFlowGraph *)a1, (const llvm::MachineOperand *)(*(_QWORD *)(a4 + 32) + 32 * k));
          v55 = v54;
          if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 168) + 16))(*(_QWORD *)(a1 + 168), a4, k))
          {
            v56 = *(unsigned int *)(a4 + 40);
            if ((_DWORD)v56)
            {
              v57 = *(const llvm::MachineOperand **)(a4 + 32);
              v58 = 32 * v56;
              while (1)
              {
                if (!*(_DWORD *)v57 && (*(_DWORD *)v57 & 0x11000000) == 0 && *((_DWORD *)v57 + 1) != 0)
                {
                  v60 = llvm::rdf::DataFlowGraph::makeRegRef((llvm::rdf::DataFlowGraph *)a1, v57);
                  if ((sub_1C5213414((_QWORD *)(a1 + 24), v80, v55, v60, v61) & 1) != 0)
                    break;
                }
                v57 = (const llvm::MachineOperand *)((char *)v57 + 32);
                v58 -= 32;
                if (!v58)
                {
                  v62 = 1280;
                  goto LABEL_77;
                }
              }
              v62 = 256;
LABEL_77:
              v8 = v78;
            }
            else
            {
              v62 = 1280;
            }
          }
          else
          {
            v62 = 0;
          }
          if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 168) + 24))(*(_QWORD *)(a1 + 168), a4, k))
          {
            v62 |= 0x40u;
          }
          v63 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 168) + 32))(*(_QWORD *)(a1 + 168), a4, k);
          v64 = v62 | 0x200;
          if (!v63)
            v64 = v62;
          if (v79 && (~*v50 & 0x5000000) == 0)
          {
            if ((*((_QWORD *)v82[0] + v53) & v52) != 0)
              continue;
            v64 |= 0x800u;
          }
          v65 = v64 | 6;
          v66 = (_QWORD *)llvm::rdf::NodeAllocator::New(__sz);
          *v66 = 0;
          v66[1] = 0;
          *(_WORD *)v66 = v65;
          v66[2] = 0;
          v66[3] = v50;
          llvm::rdf::CodeNode::addMember(v8, (uint64_t)v66, v67, a1);
          *((_QWORD *)v84[0] + v53) |= v52;
        }
      }
    }
  }
  v68 = 0;
  for (m = 0; m != v19; ++m)
  {
    v70 = (_DWORD *)(*(_QWORD *)(a4 + 32) + v68);
    if ((*v70 & 0x10000FF) == 0 && (v70[1] - 1) <= 0x3FFFFFFE)
    {
      v71 = (*v70 >> 18) & 0x400;
      v72 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 168) + 32))(*(_QWORD *)(a1 + 168), a4, m);
      v73 = v71 | 0x200;
      if (!v72)
        v73 = v71;
      v74 = v73 | 0xA;
      v75 = (_QWORD *)llvm::rdf::NodeAllocator::New(__sz);
      *v75 = 0;
      v75[1] = 0;
      *(_WORD *)v75 = v74;
      v75[2] = 0;
      v75[3] = v70;
      llvm::rdf::CodeNode::addMember(v78, (uint64_t)v75, v76, a1);
    }
    v68 += 32;
  }
LABEL_98:
  if (v82[0] != v83)
    free(v82[0]);
  if (v84[0] != v85)
    free(v84[0]);
}

void llvm::rdf::DataFlowGraph::recordDefsForDF(llvm::rdf::DataFlowGraph *a1, uint64_t **a2, llvm::rdf::CodeNode *this)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  llvm::rdf::RefNode **v20;
  uint64_t v21;
  llvm::rdf::RefNode *v22;
  unint64_t v23;
  _QWORD *v24;
  void **v25;
  void **v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  BOOL v35;
  _QWORD *v36;
  char **v37;
  unsigned int v38;
  char *v39;
  uint64_t **v40;
  char *v41;
  unsigned int v42;
  char *v43;
  uint64_t *v44;
  uint64_t *v45;
  _QWORD **v46;
  _QWORD **v47;
  _QWORD *v48;
  unsigned int v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  char *v53;
  BOOL v54;
  unsigned int v55;
  uint64_t **v56;
  unint64_t v57;
  _OWORD *v58;
  void *v59;
  _QWORD *v60;
  uint64_t *v61;
  _QWORD *v62;
  _QWORD **v63;
  uint64_t **v64;
  char *v65;
  __int128 v66;
  _QWORD **v67;
  _QWORD *v68[2];
  void *v69;
  uint64_t v70;
  _BYTE v71[64];
  void *v72;
  uint64_t v73;
  int v74;
  void **v75;
  void **v76;
  uint64_t v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)a1 + 20);
  v4 = *(_QWORD **)(v3 + 256);
  if (v4)
  {
    v7 = *((_QWORD *)this + 1);
    v8 = (_QWORD *)(v3 + 256);
    v9 = v8;
    do
    {
      v10 = v4[4];
      v11 = v10 >= v7;
      if (v10 >= v7)
        v12 = v4;
      else
        v12 = v4 + 1;
      if (v11)
        v9 = v4;
      v4 = (_QWORD *)*v12;
    }
    while (*v12);
    if (v9 != v8 && v9[4] <= v7 && v9[7])
    {
      v68[0] = 0;
      v68[1] = 0;
      v67 = v68;
      llvm::rdf::CodeNode::members(this, a1, (uint64_t)&v72);
      v13 = (char *)v72;
      v64 = a2;
      if ((_DWORD)v73)
      {
        v14 = (char *)v72 + 16 * v73;
        do
        {
          v15 = *(_QWORD *)v13;
          v69 = v71;
          v70 = 0x400000000;
          v16 = *(_DWORD *)(v15 + 16);
          if (v16)
          {
            v17 = *(_QWORD *)(*((_QWORD *)a1 + 37) + 8 * ((v16 - 1) >> *((_DWORD *)a1 + 69)))
                + 32 * (*((_DWORD *)a1 + 70) & (v16 - 1));
            if (v15 != v17)
            {
              v18 = 0;
              do
              {
                if ((*(_WORD *)v17 & 0x1F) == 6)
                {
                  if (v18 >= HIDWORD(v70))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, (uint64_t)v71, v18 + 1, 16);
                    v18 = v70;
                  }
                  v19 = (char *)v69 + 16 * v18;
                  *v19 = v17;
                  v19[1] = v16;
                  v18 = v70 + 1;
                  LODWORD(v70) = v70 + 1;
                }
                v16 = *(_DWORD *)(v17 + 4);
                if (v16)
                  v17 = *(_QWORD *)(*((_QWORD *)a1 + 37) + 8 * ((v16 - 1) >> *((_DWORD *)a1 + 69)))
                      + 32 * (*((_DWORD *)a1 + 70) & (v16 - 1));
                else
                  v17 = 0;
              }
              while (v15 != v17);
              v20 = (llvm::rdf::RefNode **)v69;
              if (v18)
              {
                v21 = 16 * v18;
                do
                {
                  v22 = *v20;
                  v20 += 2;
                  *(_QWORD *)&v66 = llvm::rdf::RefNode::getRegRef(v22, a1);
                  *((_QWORD *)&v66 + 1) = v23;
                  sub_1C52151C8((uint64_t)&v67, v66, v23, &v66);
                  v21 -= 16;
                }
                while (v21);
                v20 = (llvm::rdf::RefNode **)v69;
              }
              if (v20 != (llvm::rdf::RefNode **)v71)
                free(v20);
            }
          }
          v13 += 16;
        }
        while (v13 != v14);
        v13 = (char *)v72;
      }
      if (v13 != (char *)&v74)
        free(v13);
      v24 = (_QWORD *)v9[5];
      v74 = 0;
      v72 = 0;
      v73 = 0;
      v75 = 0;
      v76 = 0;
      v77 = 0;
      sub_1C5214654((uint64_t)&v72, v24, v9 + 6);
      v26 = v75;
      v25 = v76;
      if (v76 != v75)
      {
        v27 = 0;
        v28 = 0;
        do
        {
          v29 = *((_QWORD *)a1 + 20);
          v30 = *(_QWORD **)(v29 + 256);
          if (v30)
          {
            v31 = v26[v27];
            v32 = (_QWORD *)(v29 + 256);
            v33 = v32;
            do
            {
              v34 = v30[4];
              v35 = v34 >= (unint64_t)v31;
              if (v34 >= (unint64_t)v31)
                v36 = v30;
              else
                v36 = v30 + 1;
              if (v35)
                v33 = v30;
              v30 = (_QWORD *)*v36;
            }
            while (*v36);
            if (v33 != v32 && v33[4] <= (unint64_t)v31)
            {
              sub_1C5214654((uint64_t)&v72, (_QWORD *)v33[5], v33 + 6);
              v26 = v75;
              v25 = v76;
            }
          }
          v27 = ++v28;
        }
        while (v28 < (unint64_t)(v25 - v26));
        if (v26 == v25)
        {
          v25 = v26;
        }
        else
        {
          v65 = (char *)a1 + 416;
          v37 = (char **)(v64 + 1);
          do
          {
            v69 = *v26;
            v38 = *((_DWORD *)sub_1C5214F78((uint64_t)v65, (unint64_t *)&v69) + 2);
            v39 = *v37;
            v40 = v64 + 1;
            v41 = (char *)(v64 + 1);
            if (*v37)
            {
              while (1)
              {
                while (1)
                {
                  v41 = v39;
                  v42 = *((_DWORD *)v39 + 8);
                  if (v42 <= v38)
                    break;
                  v39 = *(char **)v41;
                  v40 = (uint64_t **)v41;
                  if (!*(_QWORD *)v41)
                    goto LABEL_60;
                }
                if (v42 >= v38)
                  break;
                v39 = (char *)*((_QWORD *)v41 + 1);
                if (!v39)
                {
                  v40 = (uint64_t **)(v41 + 8);
                  goto LABEL_60;
                }
              }
            }
            else
            {
LABEL_60:
              v43 = v41;
              v41 = (char *)operator new(0x40uLL);
              *((_DWORD *)v41 + 8) = v38;
              *((_QWORD *)v41 + 7) = 0;
              *((_QWORD *)v41 + 6) = 0;
              *((_QWORD *)v41 + 5) = v41 + 48;
              *(_QWORD *)v41 = 0;
              *((_QWORD *)v41 + 1) = 0;
              *((_QWORD *)v41 + 2) = v43;
              *v40 = (uint64_t *)v41;
              v44 = (uint64_t *)**v64;
              v45 = (uint64_t *)v41;
              if (v44)
              {
                *v64 = v44;
                v45 = *v40;
              }
              sub_1C4768E74(v64[1], v45);
              v64[2] = (uint64_t *)((char *)v64[2] + 1);
            }
            v46 = v67;
            if (v67 != v68)
            {
              v47 = (_QWORD **)(v41 + 40);
              v48 = v41 + 48;
              do
              {
                v49 = *((_DWORD *)v46 + 8);
                v50 = (_QWORD *)*v48;
                v51 = v41 + 48;
                if (*v47 == v48)
                  goto LABEL_71;
                v52 = (_QWORD *)*v48;
                v53 = v41 + 48;
                if (v50)
                {
                  do
                  {
                    v51 = v52;
                    v52 = (_QWORD *)v52[1];
                  }
                  while (v52);
                }
                else
                {
                  do
                  {
                    v51 = (_QWORD *)*((_QWORD *)v53 + 2);
                    v54 = *v51 == (_QWORD)v53;
                    v53 = (char *)v51;
                  }
                  while (v54);
                }
                v55 = *((_DWORD *)v51 + 8);
                if (v55 < v49 || (v57 = (unint64_t)v46[5], v55 == v49) && v51[5] < v57)
                {
LABEL_71:
                  if (v50)
                  {
                    v69 = v51;
                    v56 = (uint64_t **)(v51 + 1);
                  }
                  else
                  {
                    v69 = v41 + 48;
                    v56 = (uint64_t **)(v41 + 48);
                  }
                }
                else
                {
                  v56 = (uint64_t **)sub_1C5215264((uint64_t)(v41 + 40), &v69, v49, v57);
                }
                if (!*v56)
                {
                  v58 = operator new(0x30uLL);
                  v58[2] = *((_OWORD *)v46 + 2);
                  v59 = v69;
                  *(_QWORD *)v58 = 0;
                  *((_QWORD *)v58 + 1) = 0;
                  *((_QWORD *)v58 + 2) = v59;
                  *v56 = (uint64_t *)v58;
                  v60 = (_QWORD *)**v47;
                  if (v60)
                  {
                    *v47 = v60;
                    v61 = *v56;
                  }
                  else
                  {
                    v61 = (uint64_t *)v58;
                  }
                  sub_1C4768E74(*((uint64_t **)v41 + 6), v61);
                  ++*((_QWORD *)v41 + 7);
                }
                v62 = v46[1];
                if (v62)
                {
                  do
                  {
                    v63 = (_QWORD **)v62;
                    v62 = (_QWORD *)*v62;
                  }
                  while (v62);
                }
                else
                {
                  do
                  {
                    v63 = (_QWORD **)v46[2];
                    v54 = *v63 == v46;
                    v46 = v63;
                  }
                  while (!v54);
                }
                v46 = v63;
              }
              while (v63 != v68);
            }
            ++v26;
          }
          while (v26 != v25);
          v25 = v75;
        }
      }
      if (v25)
      {
        v76 = v25;
        operator delete(v25);
      }
      MEMORY[0x1CAA32FB4](v72, 8);
      sub_1C49F3440(v68[0]);
    }
  }
}

void llvm::rdf::DataFlowGraph::buildPhis(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  char *v27;
  __n128 *v28;
  __n128 *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  int v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  __n128 *v46;
  __n128 *v47;
  __n128 *v48;
  __n128 *v49;
  _QWORD *v50;
  _QWORD **v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  __n128 *v55;
  unsigned __int32 v56;
  __n128 *i;
  __n128 *v60;
  char *v61;
  __n128 *v62;
  size_t v63;
  __n128 *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t *j;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  __n128 *k;
  _QWORD *v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int *v77;
  uint64_t v78;
  __n128 *v79;
  unint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  unsigned int *v88;
  unsigned int v89;
  _OWORD *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int *v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  unsigned int *v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  int v107;
  __n128 *v108;
  __n128 *v110;
  __n128 *v111;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD **v119;
  _QWORD *v120[2];
  unint64_t v121;
  __int128 v122;
  _QWORD v123[10];

  v123[8] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a2 + 8);
  v5 = a2 + 8;
  v6 = v7;
  if (v7)
  {
    v9 = v5;
    do
    {
      v10 = *(_DWORD *)(v6 + 32);
      v11 = v10 >= a5;
      if (v10 >= a5)
        v12 = (uint64_t *)v6;
      else
        v12 = (uint64_t *)(v6 + 8);
      if (v11)
        v9 = v6;
      v6 = *v12;
    }
    while (*v12);
    if (v9 != v5 && *(_DWORD *)(v9 + 32) <= a5 && *(_QWORD *)(v9 + 56))
    {
      v120[0] = 0;
      v120[1] = 0;
      v119 = v120;
      v13 = *(_QWORD **)(v9 + 40);
      v14 = (_QWORD *)(v9 + 48);
      if (v13 == (_QWORD *)(v9 + 48))
        goto LABEL_76;
      v116 = a1 + 24;
      do
      {
        v15 = v13[4];
        v16 = v13[5];
        v17 = HIDWORD(v15);
        v18 = *(_QWORD **)(v9 + 40);
        if (v18 != v14)
        {
          do
          {
            v19 = v18[4];
            v20 = v18[5];
            v21 = (_DWORD)v15 == (_DWORD)v19 && v20 == v16;
            if (!v21 && sub_1C5214FC4(v18[4], v18[5], v15, v16, v116))
            {
              LODWORD(v15) = v19;
              v17 = HIDWORD(v19);
              v16 = v20;
            }
            v22 = (_QWORD *)v18[1];
            if (v22)
            {
              do
              {
                v23 = v22;
                v22 = (_QWORD *)*v22;
              }
              while (v22);
            }
            else
            {
              do
              {
                v23 = (_QWORD *)v18[2];
                v21 = *v23 == (_QWORD)v18;
                v18 = v23;
              }
              while (!v21);
            }
            v18 = v23;
          }
          while (v23 != v14);
        }
        *(_QWORD *)&v122 = v15 | (v17 << 32);
        *((_QWORD *)&v122 + 1) = v16;
        sub_1C52151C8((uint64_t)&v119, v15, v16, &v122);
        v24 = (_QWORD *)v13[1];
        if (v24)
        {
          do
          {
            v25 = v24;
            v24 = (_QWORD *)*v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            v25 = (_QWORD *)v13[2];
            v21 = *v25 == (_QWORD)v13;
            v13 = v25;
          }
          while (!v21);
        }
        v13 = v25;
      }
      while (v25 != v14);
      v26 = v119;
      if (v119 == v120)
      {
LABEL_76:
        v29 = 0;
        v28 = 0;
      }
      else
      {
        v27 = 0;
        v28 = 0;
        v29 = 0;
        v30 = a3 + 1;
        do
        {
          v113 = (unint64_t)v27;
          v110 = v28;
          v31 = v26[5];
          v32 = v26[4];
          v33 = HIDWORD(v26[4]);
          v34 = (_QWORD *)*a3;
          if ((_QWORD *)*a3 != v30)
          {
            do
            {
              v36 = v34[4];
              v35 = v34[5];
              if (v32 != v36 || v35 != v31)
              {
                v38 = sub_1C5214FC4(v34[4], v34[5], v32, v31, v116);
                v30 = a3 + 1;
                if (v38)
                {
                  v32 = v36;
                  v33 = HIDWORD(v36);
                  v31 = v35;
                }
              }
              v39 = (_QWORD *)v34[1];
              if (v39)
              {
                do
                {
                  v40 = v39;
                  v39 = (_QWORD *)*v39;
                }
                while (v39);
              }
              else
              {
                do
                {
                  v40 = (_QWORD *)v34[2];
                  v21 = *v40 == (_QWORD)v34;
                  v34 = v40;
                }
                while (!v21);
              }
              v34 = v40;
            }
            while (v40 != v30);
          }
          v41 = v32 | (v33 << 32);
          v27 = (char *)v113;
          if ((unint64_t)v110 >= v113)
          {
            v42 = v110 - v29;
            v43 = v42 + 1;
            if ((unint64_t)(v42 + 1) >> 60)
LABEL_157:
              abort();
            if ((uint64_t)(v113 - (_QWORD)v29) >> 3 > v43)
              v43 = (uint64_t)(v113 - (_QWORD)v29) >> 3;
            if (v113 - (unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
              v44 = 0xFFFFFFFFFFFFFFFLL;
            else
              v44 = v43;
            if (v44)
            {
              if (v44 >> 60)
LABEL_158:
                sub_1C4764EE4();
              v45 = (char *)operator new(16 * v44);
            }
            else
            {
              v45 = 0;
            }
            v46 = (__n128 *)&v45[16 * v42];
            v46->n128_u64[0] = v41;
            v46->n128_u64[1] = v31;
            v47 = v110;
            if (v110 == v29)
            {
              v49 = v110;
              v29 = (__n128 *)&v45[16 * v42];
            }
            else
            {
              v48 = (__n128 *)&v45[16 * v42];
              do
              {
                v48[-1] = v47[-1];
                --v48;
                --v47;
              }
              while (v47 != v29);
              v49 = v29;
              v29 = v48;
            }
            v27 = &v45[16 * v44];
            v28 = v46 + 1;
            if (v49)
              operator delete(v49);
            v30 = a3 + 1;
          }
          else
          {
            v110->n128_u64[0] = v41;
            v110->n128_u64[1] = v31;
            v28 = v110 + 1;
          }
          v50 = (_QWORD *)v26[1];
          if (v50)
          {
            do
            {
              v51 = (_QWORD **)v50;
              v50 = (_QWORD *)*v50;
            }
            while (v50);
          }
          else
          {
            do
            {
              v51 = (_QWORD **)v26[2];
              v21 = *v51 == v26;
              v26 = v51;
            }
            while (!v21);
          }
          v26 = v51;
        }
        while (v51 != v120);
      }
      v52 = v28 - v29;
      v53 = 126 - 2 * __clz(v52);
      if (v28 == v29)
        v54 = 0;
      else
        v54 = v53;
      sub_1C52156E0(v29, v28, (uint64_t)&v122, v54, 1);
      if (v28 != v29)
      {
        v55 = v29 - 1;
        while (&v55[2] != v28)
        {
          v56 = v55[1].n128_u32[0];
          ++v55;
          if (v56 == v55[1].n128_u32[0] && v55->n128_u64[1] == v55[1].n128_u64[1])
          {
            for (i = v55 + 2; i != v28; ++i)
            {
              if (v55->n128_u32[0] != i->n128_u32[0] || v55->n128_u64[1] != i->n128_u64[1])
              {
                v55[1] = *i;
                ++v55;
              }
            }
            v60 = v55 + 1;
            v52 = v60 - v29;
            goto LABEL_98;
          }
        }
      }
      v60 = v28;
LABEL_98:
      v61 = (char *)((char *)v28 - (char *)v60);
      if (v61)
      {
        v62 = &v29[v52];
        v63 = (char *)v28 - &v61[(_QWORD)v62];
        if (v63)
          memmove(&v29[v52], &v61[(_QWORD)v62], v63);
        v64 = (__n128 *)((char *)v62 + v63);
      }
      else
      {
        v64 = v28;
      }
      *(_QWORD *)&v122 = v123;
      *((_QWORD *)&v122 + 1) = 0x400000000;
      v65 = *(_QWORD *)(a4 + 8);
      v66 = *(unint64_t **)(v65 + 64);
      for (j = *(unint64_t **)(v65 + 72); v66 != j; ++v66)
      {
        v121 = *v66;
        v68 = sub_1C5214F78(a1 + 416, &v121);
        v69 = *v68;
        v70 = *((unsigned int *)v68 + 2);
        v71 = DWORD2(v122);
        if (DWORD2(v122) >= (unint64_t)HIDWORD(v122))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v122, (uint64_t)v123, DWORD2(v122) + 1, 16);
          v71 = DWORD2(v122);
        }
        v72 = (_QWORD *)(v122 + 16 * v71);
        *v72 = v69;
        v72[1] = v70;
        ++DWORD2(v122);
      }
      if (v29 != v64)
      {
        k = v64;
        v74 = (_QWORD *)(a1 + 24);
        do
        {
          v75 = (unsigned int *)operator new(4uLL);
          v76 = v75;
          *v75 = 0;
          v77 = v75 + 1;
          v111 = k;
          if ((char *)k - (char *)v29 != 16)
          {
            v114 = (char *)(v75 + 1);
            v117 = k - v29;
            v78 = 1;
            do
            {
              if (v76 == v77)
              {
                v76 = v77;
              }
              else
              {
                v79 = &v29[v78];
                v80 = v79->n128_u64[0];
                v81 = v79->n128_i64[1];
                v82 = v76;
                while (!sub_1C5213414(v74, v80, v81, v29[*v82].n128_u64[0], v29[*v82].n128_i64[1]))
                {
                  if (++v82 == v77)
                    goto LABEL_134;
                }
                if (v77 >= (unsigned int *)v114)
                {
                  v83 = v77 - v76;
                  v84 = v83 + 1;
                  if ((unint64_t)(v83 + 1) >> 62)
                    goto LABEL_157;
                  if ((v114 - (char *)v76) >> 1 > v84)
                    v84 = (v114 - (char *)v76) >> 1;
                  if ((unint64_t)(v114 - (char *)v76) >= 0x7FFFFFFFFFFFFFFCLL)
                    v85 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v85 = v84;
                  if (v85)
                  {
                    if (v85 >> 62)
                      goto LABEL_158;
                    v86 = (char *)operator new(4 * v85);
                  }
                  else
                  {
                    v86 = 0;
                  }
                  v87 = &v86[4 * v83];
                  *(_DWORD *)v87 = v78;
                  v88 = (unsigned int *)v87;
                  do
                  {
                    v89 = *--v77;
                    *--v88 = v89;
                  }
                  while (v77 != v76);
                  v114 = &v86[4 * v85];
                  v77 = (unsigned int *)(v87 + 4);
                  if (v76)
                    operator delete(v76);
                  v76 = v88;
                  v74 = (_QWORD *)(a1 + 24);
                }
                else
                {
                  *v77++ = v78;
                }
              }
LABEL_134:
              v78 = (v78 + 1);
            }
            while (v117 != v78);
          }
          v90 = (_OWORD *)llvm::rdf::NodeAllocator::New(a1 + 272);
          *v90 = 0u;
          v90[1] = 0u;
          *(_WORD *)v90 = 13;
          llvm::rdf::BlockNode::addPhi(a4, (uint64_t)v90, v91, a1);
          v118 = ((char *)v77 - (char *)v76) & 0x3FFFFFFFCLL;
          if (v118)
          {
            v94 = v76;
            v95 = ((unint64_t)((char *)v77 - (char *)v76) >> 2);
            do
            {
              v96 = *v94++;
              v97 = llvm::rdf::DataFlowGraph::newDef(a1, v92, v93, v29[v96].n128_u64[0], v29[v96].n128_i64[1], 384);
              llvm::rdf::CodeNode::addMember((unint64_t)v90, v97, v98, a1);
              --v95;
            }
            while (v95);
          }
          if (DWORD2(v122))
          {
            v99 = v122;
            v115 = v122 + 16 * DWORD2(v122);
            do
            {
              v100 = *(_DWORD *)(v99 + 8);
              if (v118)
              {
                v101 = *(_QWORD *)v99;
                v102 = v76;
                v103 = ((unint64_t)((char *)v77 - (char *)v76) >> 2);
                do
                {
                  v104 = *v102++;
                  v105 = llvm::rdf::DataFlowGraph::newPhiUse(a1, v92, v93, v29[v104].n128_u64[0], v29[v104].n128_i64[1], v101, v100, 128);
                  llvm::rdf::CodeNode::addMember((unint64_t)v90, v105, v106, a1);
                  --v103;
                }
                while (v103);
              }
              v99 += 16;
            }
            while (v99 != v115);
          }
          for (k = v111; v77 != v76; --k)
          {
            v107 = *--v77;
            v108 = &v29[v107];
            if (k != &v108[1])
              memmove(v108, &v108[1], (char *)k - (char *)&v108[1]);
          }
          if (v76)
            operator delete(v76);
          v74 = (_QWORD *)(a1 + 24);
        }
        while (v29 != k);
      }
      if ((_QWORD *)v122 != v123)
        free((void *)v122);
      if (v29)
        operator delete(v29);
      sub_1C49F3440(v120[0]);
    }
  }
}

void llvm::rdf::DataFlowGraph::linkBlockRefs(unint64_t a1, uint64_t *a2, _DWORD *a3, int a4)
{
  _QWORD *i;
  unint64_t v8;
  char *v9;
  _DWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  _DWORD *v22;
  unsigned int **v23;
  unsigned int **v24;
  unsigned int *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int **v30;
  llvm::rdf::RefNode **v31;
  llvm::rdf::RefNode **v32;
  llvm::rdf::RefNode *v33;
  unsigned int v34;
  __int16 v35;
  unsigned int RegRef;
  uint64_t *v37;
  uint64_t *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int **v42;
  llvm::rdf::RefNode **v43;
  llvm::rdf::RefNode **v44;
  llvm::rdf::RefNode *v45;
  unsigned int v46;
  __int16 v47;
  unsigned int v48;
  uint64_t *v49;
  uint64_t *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int **v54;
  llvm::rdf::RefNode **v55;
  llvm::rdf::RefNode **v56;
  llvm::rdf::RefNode *v57;
  unsigned int v58;
  __int16 v59;
  unsigned int v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  void ***v65;
  uint64_t v66;
  void **v67;
  _QWORD *v68;
  uint64_t *v69;
  uint64_t v70;
  void **v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  _QWORD *v77;
  char *v78;
  uint64_t v79;
  int v80;
  unsigned int v81;
  llvm::rdf::RefNode *v82;
  unint64_t v83;
  _QWORD *j;
  unsigned int v85;
  unint64_t v86;
  uint64_t v87;
  unsigned int v88;
  _QWORD *v89;
  char *v90;
  char *v91;
  llvm::rdf::RefNode *v92;
  unsigned int v93;
  uint64_t v94;
  _QWORD *v95;
  void **v96;
  llvm::rdf::CodeNode *v98;
  unsigned int **v99;
  unsigned int **v100;
  unsigned int **v101;
  unsigned int **v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  int v106;
  _QWORD v107[2];
  uint64_t v108;
  _QWORD *v109;
  void *v110;
  uint64_t v111;
  _BYTE v112[64];
  void *v113;
  uint64_t v114;
  _QWORD v115[10];

  v115[8] = *MEMORY[0x1E0C80C00];
  for (i = (_QWORD *)a2[2]; i; i = (_QWORD *)*i)
  {
    v9 = (char *)i[4];
    v8 = i[5];
    if ((unint64_t)v9 >= v8)
    {
      v11 = (char *)i[3];
      v12 = (v9 - v11) >> 4;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60)
        abort();
      v14 = v8 - (_QWORD)v11;
      if (v14 >> 3 > v13)
        v13 = v14 >> 3;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
        v15 = 0xFFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        if (v15 >> 60)
          sub_1C4764EE4();
        v16 = (char *)operator new(16 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = &v16[16 * v12];
      *(_QWORD *)v17 = 0;
      *((_DWORD *)v17 + 2) = a4;
      v18 = v17;
      if (v9 != v11)
      {
        do
        {
          v19 = *((_QWORD *)v9 - 2);
          v9 -= 16;
          v20 = *((_DWORD *)v9 + 2);
          *((_QWORD *)v18 - 2) = v19;
          v18 -= 16;
          *((_DWORD *)v18 + 2) = v20;
        }
        while (v9 != v11);
        v9 = (char *)i[3];
      }
      v10 = v17 + 16;
      i[3] = v18;
      i[4] = v17 + 16;
      i[5] = &v16[16 * v15];
      if (v9)
        operator delete(v9);
    }
    else
    {
      *(_QWORD *)v9 = 0;
      *((_DWORD *)v9 + 2) = a4;
      v10 = v9 + 16;
    }
    i[4] = v10;
  }
  v21 = (unint64_t)&v110;
  v22 = a3;
  llvm::rdf::CodeNode::members(a3, (const llvm::rdf::DataFlowGraph *)a1, (uint64_t)&v110);
  v23 = (unsigned int **)v110;
  if ((_DWORD)v111)
  {
    v24 = (unsigned int **)((char *)v110 + 16 * v111);
    v99 = v24;
    do
    {
      v25 = *v23;
      v26 = *((unsigned int *)v23 + 2);
      if ((*(_WORD *)*v23 & 0x1C) == 0x10)
      {
        v103 = v21;
        v113 = v115;
        v114 = 0x400000000;
        v27 = v25[4];
        if (v27)
        {
          v28 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 8 * ((v27 - 1) >> *(_DWORD *)(a1 + 276)))
                               + 32 * (*(_DWORD *)(a1 + 280) & (v27 - 1)));
          if (v28 != v25)
          {
            v29 = 0;
            do
            {
              if ((*(_WORD *)v28 & 0x1F) == 0xA)
              {
                if (v29 >= HIDWORD(v114))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, (uint64_t)v115, v29 + 1, 16);
                  v29 = v114;
                }
                v30 = (unsigned int **)((char *)v113 + 16 * v29);
                *v30 = v28;
                v30[1] = (unsigned int *)v27;
                v29 = v114 + 1;
                LODWORD(v114) = v114 + 1;
              }
              v27 = v28[1];
              if (v27)
                v28 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 8 * ((v27 - 1) >> *(_DWORD *)(a1 + 276)))
                                     + 32 * (*(_DWORD *)(a1 + 280) & (v27 - 1)));
              else
                v28 = 0;
            }
            while (v25 != v28);
            v31 = (llvm::rdf::RefNode **)v113;
            if (v29)
            {
              v100 = v23;
              v32 = (llvm::rdf::RefNode **)((char *)v113 + 16 * v29);
              do
              {
                v33 = *v31;
                v34 = *((_DWORD *)v31 + 2);
                v35 = *(_WORD *)*v31;
                RegRef = llvm::rdf::RefNode::getRegRef(*v31, (const llvm::rdf::DataFlowGraph *)a1);
                v37 = sub_1C5216940(*a2, a2[1], RegRef);
                if (v37)
                {
                  v38 = v37 + 3;
                  if ((v35 & 0x1C) == 8)
                    sub_1C5214838((llvm::rdf::DataFlowGraph *)a1, (uint64_t)v25, v26, v33, v34, v38);
                  else
                    sub_1C521671C((llvm::rdf::DataFlowGraph *)a1, (uint64_t)v25, v26, v33, v34, v38);
                }
                v31 += 2;
              }
              while (v31 != v32);
              v31 = (llvm::rdf::RefNode **)v113;
              v24 = v99;
              v23 = v100;
            }
            if (v31 != v115)
              free(v31);
          }
        }
        v113 = v115;
        v114 = 0x400000000;
        v39 = v25[4];
        if (v39)
        {
          v40 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 8 * ((v39 - 1) >> *(_DWORD *)(a1 + 276)))
                               + 32 * (*(_DWORD *)(a1 + 280) & (v39 - 1)));
          if (v40 != v25)
          {
            v41 = 0;
            do
            {
              if ((*(_WORD *)v40 & 0x5F) == 0x46)
              {
                if (v41 >= HIDWORD(v114))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, (uint64_t)v115, v41 + 1, 16);
                  v41 = v114;
                }
                v42 = (unsigned int **)((char *)v113 + 16 * v41);
                *v42 = v40;
                v42[1] = (unsigned int *)v39;
                v41 = v114 + 1;
                LODWORD(v114) = v114 + 1;
              }
              v39 = v40[1];
              if (v39)
                v40 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 8 * ((v39 - 1) >> *(_DWORD *)(a1 + 276)))
                                     + 32 * (*(_DWORD *)(a1 + 280) & (v39 - 1)));
              else
                v40 = 0;
            }
            while (v40 != v25);
            v43 = (llvm::rdf::RefNode **)v113;
            if (v41)
            {
              v101 = v23;
              v44 = (llvm::rdf::RefNode **)((char *)v113 + 16 * v41);
              do
              {
                v45 = *v43;
                v46 = *((_DWORD *)v43 + 2);
                v47 = *(_WORD *)*v43;
                v48 = llvm::rdf::RefNode::getRegRef(*v43, (const llvm::rdf::DataFlowGraph *)a1);
                v49 = sub_1C5216940(*a2, a2[1], v48);
                if (v49)
                {
                  v50 = v49 + 3;
                  if ((v47 & 0x1C) == 8)
                    sub_1C5214838((llvm::rdf::DataFlowGraph *)a1, (uint64_t)v25, v26, v45, v46, v50);
                  else
                    sub_1C521671C((llvm::rdf::DataFlowGraph *)a1, (uint64_t)v25, v26, v45, v46, v50);
                }
                v43 += 2;
              }
              while (v43 != v44);
              v43 = (llvm::rdf::RefNode **)v113;
              v24 = v99;
              v23 = v101;
            }
            if (v43 != v115)
              free(v43);
          }
        }
        v21 = v103;
      }
      v21 = v21 & 0xFFFFFFFF00000000 | v26;
      llvm::rdf::DataFlowGraph::pushClobbers(a1, v25, v21, a2);
      if ((*(_WORD *)v25 & 0x1C) == 0x10)
      {
        v104 = v21;
        v113 = v115;
        v114 = 0x400000000;
        v51 = v25[4];
        if (v51)
        {
          v52 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 8 * ((v51 - 1) >> *(_DWORD *)(a1 + 276)))
                               + 32 * (*(_DWORD *)(a1 + 280) & (v51 - 1)));
          if (v52 != v25)
          {
            v53 = 0;
            do
            {
              if ((*(_WORD *)v52 & 0x5F) == 6)
              {
                if (v53 >= HIDWORD(v114))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, (uint64_t)v115, v53 + 1, 16);
                  v53 = v114;
                }
                v54 = (unsigned int **)((char *)v113 + 16 * v53);
                *v54 = v52;
                v54[1] = (unsigned int *)v51;
                v53 = v114 + 1;
                LODWORD(v114) = v114 + 1;
              }
              v51 = v52[1];
              if (v51)
                v52 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 8 * ((v51 - 1) >> *(_DWORD *)(a1 + 276)))
                                     + 32 * (*(_DWORD *)(a1 + 280) & (v51 - 1)));
              else
                v52 = 0;
            }
            while (v52 != v25);
            v55 = (llvm::rdf::RefNode **)v113;
            if (v53)
            {
              v102 = v23;
              v56 = (llvm::rdf::RefNode **)((char *)v113 + 16 * v53);
              do
              {
                v57 = *v55;
                v58 = *((_DWORD *)v55 + 2);
                v59 = *(_WORD *)*v55;
                v60 = llvm::rdf::RefNode::getRegRef(*v55, (const llvm::rdf::DataFlowGraph *)a1);
                v61 = sub_1C5216940(*a2, a2[1], v60);
                if (v61)
                {
                  v62 = v61 + 3;
                  if ((v59 & 0x1C) == 8)
                    sub_1C5214838((llvm::rdf::DataFlowGraph *)a1, (uint64_t)v25, v26, v57, v58, v62);
                  else
                    sub_1C521671C((llvm::rdf::DataFlowGraph *)a1, (uint64_t)v25, v26, v57, v58, v62);
                }
                v55 += 2;
              }
              while (v55 != v56);
              v55 = (llvm::rdf::RefNode **)v113;
              v24 = v99;
              v23 = v102;
            }
            if (v55 != v115)
              free(v55);
          }
        }
        v21 = v104;
      }
      llvm::rdf::DataFlowGraph::pushDefs(a1, (uint64_t)v25, v21, a2);
      v23 += 2;
    }
    while (v23 != v24);
    v23 = (unsigned int **)v110;
    v22 = a3;
  }
  if (v23 != (unsigned int **)v112)
    free(v23);
  v63 = sub_1C49FA70C(*(_QWORD *)(a1 + 152), *((_QWORD *)v22 + 1));
  v64 = *(unsigned int *)(v63 + 32);
  if ((_DWORD)v64)
  {
    v65 = *(void ****)(v63 + 24);
    v66 = 8 * v64;
    do
    {
      v67 = *v65++;
      v113 = *v67;
      v68 = sub_1C5214F78(a1 + 416, (unint64_t *)&v113);
      llvm::rdf::DataFlowGraph::linkBlockRefs(a1, a2, *v68, v68[1]);
      v66 -= 8;
    }
    while (v66);
  }
  LODWORD(v69) = llvm::rdf::DataFlowGraph::getLandingPadLiveIns((uint64_t **)a1, &v108);
  v70 = *((_QWORD *)v22 + 1);
  v71 = *(void ***)(v70 + 88);
  v98 = *(llvm::rdf::CodeNode **)(v70 + 96);
  if (v71 != (void **)v98)
  {
    v72 = a1 + 416;
    do
    {
      v106 = *((unsigned __int8 *)*v71 + 184);
      v113 = *v71;
      v69 = sub_1C5214F78(v72, (unint64_t *)&v113);
      v73 = *v69;
      v113 = v115;
      v114 = 0x400000000;
      v74 = *(_DWORD *)(v73 + 16);
      if (v74)
      {
        v75 = *(_QWORD *)(*(_QWORD *)(a1 + 296) + 8 * ((v74 - 1) >> *(_DWORD *)(a1 + 276)))
            + 32 * (*(_DWORD *)(a1 + 280) & (v74 - 1));
        if (v75 != v73)
        {
          v76 = 0;
          do
          {
            if ((*(_WORD *)v75 & 0x1F) == 0xD)
            {
              if (v76 >= HIDWORD(v114))
              {
                LODWORD(v69) = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v113, (uint64_t)v115, v76 + 1, 16);
                v76 = v114;
              }
              v77 = (char *)v113 + 16 * v76;
              *v77 = v75;
              v77[1] = v74;
              v76 = v114 + 1;
              LODWORD(v114) = v114 + 1;
            }
            v74 = *(_DWORD *)(v75 + 4);
            if (v74)
              v75 = *(_QWORD *)(*(_QWORD *)(a1 + 296) + 8 * ((v74 - 1) >> *(_DWORD *)(a1 + 276)))
                  + 32 * (*(_DWORD *)(a1 + 280) & (v74 - 1));
            else
              v75 = 0;
          }
          while (v75 != v73);
          v78 = (char *)v113;
          if (v76)
          {
            v96 = v71;
            v105 = (char *)v113 + 16 * v76;
            do
            {
              v79 = *(_QWORD *)v78;
              v80 = *((_DWORD *)v78 + 2);
              v81 = *(_DWORD *)(*(_QWORD *)v78 + 16);
              if (v106)
              {
                v82 = v81
                    ? (llvm::rdf::RefNode *)(*(_QWORD *)(*(_QWORD *)(a1 + 296)
                                                       + 8 * ((v81 - 1) >> *(_DWORD *)(a1 + 276)))
                                           + 32 * (*(_DWORD *)(a1 + 280) & (v81 - 1)))
                    : 0;
                LODWORD(v69) = llvm::rdf::RefNode::getRegRef(v82, (const llvm::rdf::DataFlowGraph *)a1);
                for (j = v109; j; j = (_QWORD *)*j)
                {
                  v85 = *((_DWORD *)j + 8);
                  if (v85 <= v69)
                  {
                    if (v85 != (_DWORD)v69)
                    {
                      if (v85 >= v69)
                        goto LABEL_142;
                      goto LABEL_122;
                    }
                    v86 = j[5];
                    if (v83 >= v86)
                    {
                      if (v86 >= v83)
                        goto LABEL_142;
LABEL_122:
                      ++j;
                    }
                  }
                }
              }
              v110 = v112;
              v111 = 0x400000000;
              if (v81)
              {
                v87 = *(_QWORD *)(*(_QWORD *)(a1 + 296) + 8 * ((v81 - 1) >> *(_DWORD *)(a1 + 276)))
                    + 32 * (*(_DWORD *)(a1 + 280) & (v81 - 1));
                if (v79 != v87)
                {
                  v88 = 0;
                  do
                  {
                    if ((*(_WORD *)v87 & 0x1C) == 8 && *(_DWORD *)(v87 + 16) == a4)
                    {
                      if (v88 >= HIDWORD(v111))
                      {
                        LODWORD(v69) = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v110, (uint64_t)v112, v88 + 1, 16);
                        v88 = v111;
                      }
                      v89 = (char *)v110 + 16 * v88;
                      *v89 = v87;
                      v89[1] = v81;
                      v88 = v111 + 1;
                      LODWORD(v111) = v111 + 1;
                    }
                    v81 = *(_DWORD *)(v87 + 4);
                    if (v81)
                      v87 = *(_QWORD *)(*(_QWORD *)(a1 + 296) + 8 * ((v81 - 1) >> *(_DWORD *)(a1 + 276)))
                          + 32 * (*(_DWORD *)(a1 + 280) & (v81 - 1));
                    else
                      v87 = 0;
                  }
                  while (v79 != v87);
                  v90 = (char *)v110;
                  if (v88)
                  {
                    v91 = (char *)v110 + 16 * v88;
                    do
                    {
                      v92 = *(llvm::rdf::RefNode **)v90;
                      v93 = *((_DWORD *)v90 + 2);
                      v107[0] = llvm::rdf::RefNode::getRegRef(*(llvm::rdf::RefNode **)v90, (const llvm::rdf::DataFlowGraph *)a1);
                      v107[1] = v94;
                      v95 = sub_1C5215300(a2, v107[0], v107);
                      sub_1C5214838((llvm::rdf::DataFlowGraph *)a1, v79, v80, v92, v93, v95 + 3);
                      v90 += 16;
                    }
                    while (v90 != v91);
                    v90 = (char *)v110;
                  }
                  if (v90 != v112)
                    free(v90);
                }
              }
LABEL_142:
              v78 += 16;
            }
            while (v78 != v105);
            v78 = (char *)v113;
            v71 = v96;
          }
          if (v78 != (char *)v115)
            free(v78);
          v72 = a1 + 416;
        }
      }
      ++v71;
    }
    while (v71 != (void **)v98);
  }
  llvm::rdf::DataFlowGraph::releaseBlock((int)v69, a4, a2);
  sub_1C49F3440(v109);
}

uint64_t llvm::rdf::DataFlowGraph::removeUnusedPhis(llvm::rdf::DataFlowGraph *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned __int32 v7;
  _QWORD *v8;
  llvm::rdf::InstrNode *v9;
  uint64_t v10;
  __int128 v11;
  __int32 *i;
  uint64_t v13;
  llvm::rdf::InstrNode *v14;
  __int32 *v15;
  __int32 *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  llvm::rdf::RefNode *v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  llvm::rdf::InstrNode *v27;
  uint64_t v28;
  _WORD *Owner;
  _QWORD v31[2];
  int32x2_t v32[2];
  int v33;
  __int32 *v34;
  __int32 *v35;
  uint64_t v36;
  llvm::rdf::InstrNode *v37;
  __int32 __c[2];
  _BYTE v39[64];
  void *v40;
  unsigned int v41;
  _QWORD v42[9];

  v42[8] = *MEMORY[0x1E0C80C00];
  v32[0] = 0;
  v32[1] = 0;
  v33 = 0;
  v35 = 0;
  v36 = 0;
  v34 = 0;
  llvm::rdf::CodeNode::members(*((_DWORD **)this + 32), this, (uint64_t)&v40);
  v2 = (char *)v40;
  if (v41)
  {
    v3 = (char *)v40 + 16 * v41;
    do
    {
      v4 = *(_QWORD *)v2;
      v37 = (llvm::rdf::InstrNode *)v39;
      *(_QWORD *)__c = 0x400000000;
      v5 = *(_DWORD *)(v4 + 16);
      if (v5)
      {
        v6 = *(_QWORD *)(*((_QWORD *)this + 37) + 8 * ((v5 - 1) >> *((_DWORD *)this + 69)))
           + 32 * (*((_DWORD *)this + 70) & (v5 - 1));
        if (v4 != v6)
        {
          v7 = 0;
          do
          {
            if ((*(_WORD *)v6 & 0x1F) == 0xD)
            {
              if (v7 >= __c[1])
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, (uint64_t)v39, v7 + 1, 16);
                v7 = __c[0];
              }
              v8 = (_QWORD *)((char *)v37 + 16 * v7);
              *v8 = v6;
              v8[1] = v5;
              v7 = ++__c[0];
            }
            v5 = *(_DWORD *)(v6 + 4);
            if (v5)
              v6 = *(_QWORD *)(*((_QWORD *)this + 37) + 8 * ((v5 - 1) >> *((_DWORD *)this + 69)))
                 + 32 * (*((_DWORD *)this + 70) & (v5 - 1));
            else
              v6 = 0;
          }
          while (v4 != v6);
          v9 = v37;
          if (v7)
          {
            v10 = 16 * v7;
            do
            {
              v11 = *(_OWORD *)v9;
              v9 = (llvm::rdf::InstrNode *)((char *)v9 + 16);
              v31[0] = *((_QWORD *)&v11 + 1);
              sub_1C4A0C7B8((uint64_t)v32, v31);
              v10 -= 16;
            }
            while (v10);
            v9 = v37;
          }
          if (v9 != (llvm::rdf::InstrNode *)v39)
            free(v9);
        }
      }
      v2 += 16;
    }
    while (v2 != v3);
    v2 = (char *)v40;
  }
  if (v2 != (char *)v42)
    free(v2);
  for (i = v34; v34 != v35; i = v34)
  {
    v13 = *i;
    if ((_DWORD)v13)
      v14 = (llvm::rdf::InstrNode *)(*(_QWORD *)(*((_QWORD *)this + 37)
                                               + 8 * ((v13 - 1) >> *((_DWORD *)this + 69)))
                                   + 32 * (*((_DWORD *)this + 70) & (v13 - 1)));
    else
      v14 = 0;
    v37 = v14;
    *(_QWORD *)__c = v13;
    if (sub_1C61932D4(v32, __c))
    {
      v15 = v35;
      v16 = wmemchr(v34, __c[0], v35 - v34);
      if (v16)
        v15 = v16;
      v17 = (char *)((char *)v35 - (char *)(v15 + 1));
      if (v35 != v15 + 1)
        memmove(v15, v15 + 1, (char *)v35 - (char *)(v15 + 1));
      v35 = (__int32 *)&v17[(_QWORD)v15];
    }
    llvm::rdf::CodeNode::members(v37, this, (uint64_t)&v40);
    if (v41)
    {
      v18 = 0;
      v19 = (char *)v40;
      v20 = (char *)v40 + 16 * v41;
      while (1)
      {
        v21 = *(_QWORD *)((char *)v40 + v18);
        if ((*(_WORD *)v21 & 0x1C) == 4 && (*(_DWORD *)(v21 + 16) || *(_DWORD *)(v21 + 20)))
          break;
        v18 += 16;
        if (16 * v41 == v18)
        {
          do
          {
            v22 = *(llvm::rdf::RefNode **)v19;
            v23 = *((_DWORD *)v19 + 2);
            v24 = *(_DWORD *)(*(_QWORD *)v19 + 8);
            if (v24)
            {
              Owner = (_WORD *)llvm::rdf::RefNode::getOwner((llvm::rdf::RefNode *)(*(_QWORD *)(*((_QWORD *)this + 37)+ 8* ((v24 - 1) >> *((_DWORD *)this + 69)))+ 32 * (*((_DWORD *)this + 70) & (v24 - 1))), this);
              LODWORD(v31[0]) = v25;
              if ((*Owner & 0x1F) == 0xD)
                sub_1C4A0C7B8((uint64_t)v32, v31);
            }
            if ((*(_WORD *)v22 & 0x1C) == 4)
              llvm::rdf::DataFlowGraph::unlinkDefDF((uint64_t)this, v22, v23);
            else
              llvm::rdf::DataFlowGraph::unlinkUseDF((uint64_t)this, (uint64_t)v22, v23);
            v26 = llvm::rdf::RefNode::getOwner(v22, this);
            llvm::rdf::CodeNode::removeMember(v26, (uint64_t)v22, v23, (uint64_t)this);
            v19 += 16;
          }
          while (v19 != v20);
          goto LABEL_47;
        }
      }
    }
    else
    {
LABEL_47:
      v27 = v37;
      v28 = llvm::rdf::InstrNode::getOwner(v37, this);
      llvm::rdf::CodeNode::removeMember(v28, (uint64_t)v27, __c[0], (uint64_t)this);
      v19 = (char *)v40;
    }
    if (v19 != (char *)v42)
      free(v19);
  }
  if (i)
  {
    v35 = i;
    operator delete(i);
  }
  return MEMORY[0x1CAA32FB4](*(_QWORD *)v32, 4);
}

uint64_t llvm::rdf::DataFlowGraph::makeRegRef(llvm::rdf::DataFlowGraph *this, unsigned int a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  int v10;

  if (a3)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 2);
    v4 = v3[1];
    v5 = v3[7];
    v6 = *(unsigned int *)(v4 + 24 * a2 + 4);
    if (*(_WORD *)(v5 + 2 * v6))
    {
      v7 = *(_WORD *)(v5 + 2 * v6) + a2;
      v8 = (unsigned __int16 *)(v3[11] + 2 * *(unsigned int *)(v4 + 24 * a2 + 12));
      v9 = (unsigned __int16 *)(v5 + 2 * v6 + 2);
      while (*v8 != a3)
      {
        a2 = 0;
        v10 = *v9++;
        v7 += v10;
        ++v8;
        if (!v10)
          return a2;
      }
      return v7;
    }
    else
    {
      return 0;
    }
  }
  return a2;
}

unint64_t llvm::rdf::DataFlowGraph::restrictRef(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  unint64_t v6;
  unsigned int v7;
  int v8;

  if ((_DWORD)a2 == a4)
  {
    v6 = 0;
    if ((a5 & a3) != 0)
      v7 = a2;
    else
      v7 = 0;
  }
  else
  {
    v8 = sub_1C5213414((_QWORD *)(a1 + 24), a2, a3, a4, a5);
    v6 = a2 & 0xFFFFFFFF00000000;
    if (v8)
    {
      v7 = a2;
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
  }
  return v7 | v6;
}

uint64_t sub_1C5213414(_QWORD *a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  int v5;

  v5 = a2;
  if (a2 > 0x3FFFFFFF)
  {
    if (a4 > 0x3FFFFFFF)
      return llvm::rdf::PhysicalRegisterInfo::aliasMM(a1, a2, a3, a4);
    a2 = a4;
    a3 = a5;
    a4 = v5;
    return llvm::rdf::PhysicalRegisterInfo::aliasRM(a1, a2, a3, a4);
  }
  if (a4 > 0x3FFFFFFF)
    return llvm::rdf::PhysicalRegisterInfo::aliasRM(a1, a2, a3, a4);
  return llvm::rdf::PhysicalRegisterInfo::aliasRR(a1, a2, a3, a4, a5);
}

void llvm::rdf::DataFlowGraph::markBlock(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *i;
  unint64_t v5;
  char *v6;
  _DWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int v17;

  for (i = *(_QWORD **)(a3 + 16); i; i = (_QWORD *)*i)
  {
    v6 = (char *)i[4];
    v5 = i[5];
    if ((unint64_t)v6 >= v5)
    {
      v8 = (char *)i[3];
      v9 = (v6 - v8) >> 4;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 60)
        abort();
      v11 = v5 - (_QWORD)v8;
      if (v11 >> 3 > v10)
        v10 = v11 >> 3;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
        v12 = 0xFFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 60)
          sub_1C4764EE4();
        v13 = (char *)operator new(16 * v12);
      }
      else
      {
        v13 = 0;
      }
      v14 = &v13[16 * v9];
      *(_QWORD *)v14 = 0;
      *((_DWORD *)v14 + 2) = a2;
      v15 = v14;
      if (v6 != v8)
      {
        do
        {
          v16 = *((_QWORD *)v6 - 2);
          v6 -= 16;
          v17 = *((_DWORD *)v6 + 2);
          *((_QWORD *)v15 - 2) = v16;
          v15 -= 16;
          *((_DWORD *)v15 + 2) = v17;
        }
        while (v6 != v8);
        v6 = (char *)i[3];
      }
      v7 = v14 + 16;
      i[3] = v15;
      i[4] = v14 + 16;
      i[5] = &v13[16 * v12];
      if (v6)
        operator delete(v6);
    }
    else
    {
      *(_QWORD *)v6 = 0;
      *((_DWORD *)v6 + 2) = a2;
      v7 = v6 + 16;
    }
    i[4] = v7;
  }
}

void llvm::rdf::DataFlowGraph::releaseBlock(int a1, int a2, _QWORD *a3)
{
  _QWORD **v3;
  _QWORD *v4;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x8_t v15;
  unint64_t v16;
  uint8x8_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;

  v3 = (_QWORD **)(a3 + 2);
  v4 = (_QWORD *)a3[2];
  if (v4)
  {
    do
    {
      llvm::rdf::DataFlowGraph::DefStack::clear_block((llvm::rdf::DataFlowGraph::DefStack *)(v4 + 3), a2);
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    v7 = *v3;
    if (*v3)
    {
      do
      {
        v8 = (_QWORD *)*v7;
        v9 = v7[3];
        v10 = v7[4];
        if (v9 != v10)
        {
          v11 = v10 - v9;
          v12 = v9 - 16;
          v13 = v11 & 0xFFFFFFFF0;
          while (v13)
          {
            v14 = *(_QWORD *)(v12 + v13);
            v13 -= 16;
            if (v14)
              goto LABEL_39;
          }
        }
        v15 = (int8x8_t)a3[1];
        v16 = v7[1];
        v17 = (uint8x8_t)vcnt_s8(v15);
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] > 1uLL)
        {
          if (v16 >= *(_QWORD *)&v15)
            v16 %= *(_QWORD *)&v15;
        }
        else
        {
          v16 &= *(_QWORD *)&v15 - 1;
        }
        v18 = *(_QWORD **)(*a3 + 8 * v16);
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18 != v7);
        if (v19 == v3)
          goto LABEL_42;
        v20 = v19[1];
        if (v17.u32[0] > 1uLL)
        {
          if (v20 >= *(_QWORD *)&v15)
            v20 %= *(_QWORD *)&v15;
        }
        else
        {
          v20 &= *(_QWORD *)&v15 - 1;
        }
        v21 = (_QWORD *)*v7;
        if (v20 != v16)
        {
LABEL_42:
          if (v8)
          {
            v22 = v8[1];
            if (v17.u32[0] > 1uLL)
            {
              v23 = v8[1];
              if (v22 >= *(_QWORD *)&v15)
                v23 = v22 % *(_QWORD *)&v15;
            }
            else
            {
              v23 = v22 & (*(_QWORD *)&v15 - 1);
            }
            v21 = (_QWORD *)*v7;
            if (v23 == v16)
              goto LABEL_30;
          }
          *(_QWORD *)(*a3 + 8 * v16) = 0;
          v21 = (_QWORD *)*v7;
        }
        if (!v21)
          goto LABEL_36;
        v22 = v21[1];
LABEL_30:
        if (v17.u32[0] > 1uLL)
        {
          if (v22 >= *(_QWORD *)&v15)
            v22 %= *(_QWORD *)&v15;
        }
        else
        {
          v22 &= *(_QWORD *)&v15 - 1;
        }
        if (v22 != v16)
        {
          *(_QWORD *)(*a3 + 8 * v22) = v19;
          v21 = (_QWORD *)*v7;
        }
LABEL_36:
        *v19 = v21;
        *v7 = 0;
        --a3[3];
        v24 = (void *)v7[3];
        if (v24)
        {
          v7[4] = v24;
          operator delete(v24);
        }
        operator delete(v7);
LABEL_39:
        v7 = v8;
      }
      while (v8);
    }
  }
}

void llvm::rdf::DataFlowGraph::pushAllDefs(unint64_t a1, unsigned int *a2, int a3, uint64_t *a4)
{
  llvm::rdf::DataFlowGraph::pushClobbers(a1, a2, a3, a4);
  llvm::rdf::DataFlowGraph::pushDefs(a1, (uint64_t)a2, a3, a4);
}

void llvm::rdf::DataFlowGraph::pushClobbers(unint64_t a1, unsigned int *a2, int a3, uint64_t *a4)
{
  unsigned int v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v8;
  llvm::rdf::RefNode **v9;
  unsigned int *v10;
  llvm::rdf::RefNode **v11;
  llvm::rdf::RefNode **v12;
  llvm::rdf::RefNode *v13;
  uint64_t v14;
  _QWORD *i;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  llvm::rdf::RefNode **v29;
  llvm::rdf::RefNode **v30;
  llvm::rdf::RefNode *v31;
  int v32;
  _OWORD *v33;
  unsigned int v34;
  _QWORD *j;
  unsigned int v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  llvm::rdf::RefNode **v48;
  llvm::rdf::RefNode **v49;
  llvm::rdf::RefNode *v50;
  int v51;
  _QWORD *v52;
  _OWORD *v53;
  BOOL v54;
  __int128 *v55;
  uint64_t v56;
  __int128 v57;
  llvm::rdf::RefNode **v58;
  unsigned int *v59;
  llvm::rdf::PhysicalRegisterInfo *v60;
  llvm::rdf::DataFlowGraph *v61;
  uint64_t *v63;
  unsigned int v64;
  __int128 v65;
  unsigned int v66[2];
  uint64_t v67;
  uint64_t *v68;
  _QWORD *v69[2];
  uint64_t *v70;
  _QWORD *v71[2];
  void *v72;
  unsigned int v73;
  uint64_t v74;
  llvm::rdf::RefNode **v75;
  uint64_t v76;
  _QWORD v77[11];

  v77[8] = *MEMORY[0x1E0C80C00];
  v71[0] = 0;
  v71[1] = 0;
  v69[1] = 0;
  v70 = (uint64_t *)v71;
  v68 = (uint64_t *)v69;
  v69[0] = 0;
  v75 = (llvm::rdf::RefNode **)v77;
  v76 = 0x400000000;
  v4 = a2[4];
  if (v4)
  {
    v5 = a1;
    v6 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 8 * ((v4 - 1) >> *(_DWORD *)(a1 + 276)))
                        + 32 * (*(_DWORD *)(a1 + 280) & (v4 - 1)));
    if (v6 != a2)
    {
      v8 = 0;
      do
      {
        if ((*(_WORD *)v6 & 0x1F) == 6)
        {
          if (v8 >= HIDWORD(v76))
          {
            v10 = a2;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, (uint64_t)v77, v8 + 1, 16);
            a2 = v10;
            v8 = v76;
          }
          v9 = &v75[2 * v8];
          *v9 = (llvm::rdf::RefNode *)v6;
          v9[1] = (llvm::rdf::RefNode *)v4;
          v8 = v76 + 1;
          LODWORD(v76) = v76 + 1;
        }
        v4 = v6[1];
        if (v4)
          v6 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(v5 + 296) + 8 * ((v4 - 1) >> *(_DWORD *)(v5 + 276)))
                              + 32 * (*(_DWORD *)(v5 + 280) & (v4 - 1)));
        else
          v6 = 0;
      }
      while (v6 != a2);
      v11 = v75;
      if (v8)
      {
        v60 = (llvm::rdf::PhysicalRegisterInfo *)(v5 + 24);
        v61 = (llvm::rdf::DataFlowGraph *)v5;
        v12 = &v75[2 * v8];
        v63 = a4;
        v58 = v12;
        v59 = a2;
        do
        {
          v13 = *v11;
          v14 = *((unsigned int *)v11 + 2);
          v5 = v5 & 0xFFFFFFFF00000000 | v14;
          for (i = v71[0]; i; i = (_QWORD *)*i)
          {
            v16 = *((_DWORD *)i + 7);
            if (v14 >= v16)
            {
              if (v16 >= v14)
                goto LABEL_78;
              ++i;
            }
          }
          if ((*(_WORD *)v13 & 0x40) != 0)
          {
            llvm::rdf::DataFlowGraph::getRelatedRefs(v61, *v11, a2, a3, v14, (uint64_t)&v72);
            *(_QWORD *)v66 = llvm::rdf::RefNode::getRegRef(*(llvm::rdf::RefNode **)v72, v61);
            v67 = v17;
            v18 = sub_1C5215300(a4, v66[0], v66);
            v19 = v18;
            v21 = (char *)v18[4];
            v20 = v18[5];
            if ((unint64_t)v21 >= v20)
            {
              v23 = (char *)v18[3];
              v24 = (v21 - v23) >> 4;
              v25 = v24 + 1;
              if ((unint64_t)(v24 + 1) >> 60)
LABEL_83:
                abort();
              v26 = v20 - (_QWORD)v23;
              if (v26 >> 3 > v25)
                v25 = v26 >> 3;
              if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
                v27 = 0xFFFFFFFFFFFFFFFLL;
              else
                v27 = v25;
              if (v27)
              {
                if (v27 >> 60)
LABEL_84:
                  sub_1C4764EE4();
                v28 = (char *)operator new(16 * v27);
              }
              else
              {
                v28 = 0;
              }
              v29 = (llvm::rdf::RefNode **)&v28[16 * v24];
              *v29 = v13;
              v29[1] = (llvm::rdf::RefNode *)v5;
              v30 = v29;
              if (v21 == v23)
              {
                a4 = v63;
              }
              else
              {
                a4 = v63;
                do
                {
                  v31 = (llvm::rdf::RefNode *)*((_QWORD *)v21 - 2);
                  v21 -= 16;
                  v32 = *((_DWORD *)v21 + 2);
                  *(v30 - 2) = v31;
                  v30 -= 2;
                  *((_DWORD *)v30 + 2) = v32;
                }
                while (v21 != v23);
                v21 = (char *)v19[3];
              }
              v22 = v29 + 2;
              v19[3] = v30;
              v19[4] = v29 + 2;
              v19[5] = &v28[16 * v27];
              if (v21)
                operator delete(v21);
            }
            else
            {
              *(_QWORD *)v21 = v13;
              *((_QWORD *)v21 + 1) = v5;
              v22 = v21 + 16;
            }
            v19[4] = v22;
            sub_1C4778ED8(&v68, v66, v66);
            llvm::rdf::PhysicalRegisterInfo::getAliasSet((uint64_t)v60, v66[0], (uint64_t)&v65);
            v33 = (_OWORD *)v65;
            if ((__int128 *)v65 != (__int128 *)((char *)&v65 + 8))
            {
              do
              {
                v34 = *((_DWORD *)v33 + 7);
                v64 = v34;
                for (j = v69[0]; j; j = (_QWORD *)*j)
                {
                  v36 = *((_DWORD *)j + 7);
                  if (v34 >= v36)
                  {
                    if (v36 >= v34)
                      goto LABEL_64;
                    ++j;
                  }
                }
                v37 = sub_1C5215300(a4, v34, &v64);
                v38 = v37;
                v40 = (char *)v37[4];
                v39 = v37[5];
                if ((unint64_t)v40 >= v39)
                {
                  v42 = (char *)v37[3];
                  v43 = (v40 - v42) >> 4;
                  v44 = v43 + 1;
                  if ((unint64_t)(v43 + 1) >> 60)
                    goto LABEL_83;
                  v45 = v39 - (_QWORD)v42;
                  if (v45 >> 3 > v44)
                    v44 = v45 >> 3;
                  if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0)
                    v46 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v46 = v44;
                  if (v46)
                  {
                    if (v46 >> 60)
                      goto LABEL_84;
                    v47 = (char *)operator new(16 * v46);
                  }
                  else
                  {
                    v47 = 0;
                  }
                  v48 = (llvm::rdf::RefNode **)&v47[16 * v43];
                  *v48 = v13;
                  v48[1] = (llvm::rdf::RefNode *)v5;
                  v49 = v48;
                  if (v40 != v42)
                  {
                    do
                    {
                      v50 = (llvm::rdf::RefNode *)*((_QWORD *)v40 - 2);
                      v40 -= 16;
                      v51 = *((_DWORD *)v40 + 2);
                      *(v49 - 2) = v50;
                      v49 -= 2;
                      *((_DWORD *)v49 + 2) = v51;
                    }
                    while (v40 != v42);
                    v40 = (char *)v38[3];
                  }
                  v41 = v48 + 2;
                  v38[3] = v49;
                  v38[4] = v48 + 2;
                  v38[5] = &v47[16 * v46];
                  if (v40)
                    operator delete(v40);
                  a4 = v63;
                }
                else
                {
                  *(_QWORD *)v40 = v13;
                  *((_QWORD *)v40 + 1) = v5;
                  v41 = v40 + 16;
                }
                v38[4] = v41;
LABEL_64:
                v52 = (_QWORD *)*((_QWORD *)v33 + 1);
                if (v52)
                {
                  do
                  {
                    v53 = v52;
                    v52 = (_QWORD *)*v52;
                  }
                  while (v52);
                }
                else
                {
                  do
                  {
                    v53 = (_OWORD *)*((_QWORD *)v33 + 2);
                    v54 = *(_QWORD *)v53 == (_QWORD)v33;
                    v33 = v53;
                  }
                  while (!v54);
                }
                v33 = v53;
              }
              while (v53 != (__int128 *)((char *)&v65 + 8));
            }
            sub_1C47655E8((uint64_t)&v65, *((_QWORD **)&v65 + 1));
            v55 = (__int128 *)v72;
            if (v73)
            {
              v56 = 16 * v73;
              v12 = v58;
              do
              {
                v57 = *v55++;
                v65 = v57;
                sub_1C4778ED8(&v70, (unsigned int *)&v65 + 2, (_DWORD *)&v65 + 2);
                v56 -= 16;
              }
              while (v56);
              v55 = (__int128 *)v72;
            }
            else
            {
              v12 = v58;
            }
            if (v55 != (__int128 *)&v74)
              free(v55);
            a2 = v59;
          }
LABEL_78:
          v11 += 2;
        }
        while (v11 != v12);
        v11 = v75;
      }
      if (v11 != v77)
        free(v11);
    }
  }
  sub_1C47655E8((uint64_t)&v68, v69[0]);
  sub_1C47655E8((uint64_t)&v70, v71[0]);
}

void llvm::rdf::DataFlowGraph::pushDefs(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  unsigned int v4;
  _WORD *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v9;
  unint64_t *v10;
  llvm::rdf::RefNode **v11;
  llvm::rdf::RefNode **v12;
  llvm::rdf::RefNode *v13;
  uint64_t v14;
  _QWORD *i;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  llvm::rdf::RefNode **v29;
  llvm::rdf::RefNode **v30;
  llvm::rdf::RefNode *v31;
  int v32;
  _OWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  llvm::rdf::RefNode **v45;
  llvm::rdf::RefNode **v46;
  llvm::rdf::RefNode *v47;
  int v48;
  _QWORD *v49;
  _OWORD *v50;
  BOOL v51;
  __int128 *v52;
  uint64_t v53;
  __int128 v54;
  llvm::rdf::RefNode **v55;
  uint64_t v56;
  _WORD *v57;
  llvm::rdf::PhysicalRegisterInfo *v58;
  uint64_t *v60;
  unsigned int v61;
  _OWORD v62[2];
  unsigned int v63[2];
  uint64_t v64;
  uint64_t *v65;
  _QWORD *v66[2];
  void *v67;
  unsigned int v68;
  uint64_t v69;
  llvm::rdf::RefNode **v70;
  uint64_t v71;
  _QWORD v72[11];

  v72[8] = *MEMORY[0x1E0C80C00];
  v66[0] = 0;
  v66[1] = 0;
  v65 = (uint64_t *)v66;
  v70 = (llvm::rdf::RefNode **)v72;
  v71 = 0x400000000;
  v4 = *(_DWORD *)(a2 + 16);
  if (v4)
  {
    v5 = (_WORD *)a2;
    v6 = a1;
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 296) + 8 * ((v4 - 1) >> *(_DWORD *)(a1 + 276)))
       + 32 * (*(_DWORD *)(a1 + 280) & (v4 - 1));
    if (v7 != a2)
    {
      v9 = 0;
      do
      {
        if ((*(_WORD *)v7 & 0x1F) == 6)
        {
          if (v9 >= HIDWORD(v71))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, (uint64_t)v72, v9 + 1, 16);
            v9 = v71;
          }
          v10 = (unint64_t *)&v70[2 * v9];
          *v10 = v7;
          v10[1] = v4;
          v9 = v71 + 1;
          LODWORD(v71) = v71 + 1;
        }
        v4 = *(_DWORD *)(v7 + 4);
        if (v4)
          v7 = *(_QWORD *)(*(_QWORD *)(v6 + 296) + 8 * ((v4 - 1) >> *(_DWORD *)(v6 + 276)))
             + 32 * (*(_DWORD *)(v6 + 280) & (v4 - 1));
        else
          v7 = 0;
      }
      while ((_WORD *)v7 != v5);
      v11 = v70;
      if (v9)
      {
        v57 = v5;
        v58 = (llvm::rdf::PhysicalRegisterInfo *)(v6 + 24);
        v12 = &v70[2 * v9];
        v60 = a4;
        v55 = v12;
        v56 = v6;
        do
        {
          v13 = *v11;
          v14 = *((unsigned int *)v11 + 2);
          v7 = v7 & 0xFFFFFFFF00000000 | v14;
          for (i = v66[0]; i; i = (_QWORD *)*i)
          {
            v16 = *((_DWORD *)i + 7);
            if (v14 >= v16)
            {
              if (v16 >= v14)
                goto LABEL_72;
              ++i;
            }
          }
          if ((*(_WORD *)v13 & 0x40) == 0)
          {
            llvm::rdf::DataFlowGraph::getRelatedRefs((llvm::rdf::DataFlowGraph *)v6, *v11, v5, a3, v14, (uint64_t)&v67);
            *(_QWORD *)v63 = llvm::rdf::RefNode::getRegRef(*(llvm::rdf::RefNode **)v67, (const llvm::rdf::DataFlowGraph *)v6);
            v64 = v17;
            v18 = sub_1C5215300(a4, v63[0], v63);
            v19 = v18;
            v21 = (char *)v18[4];
            v20 = v18[5];
            if ((unint64_t)v21 >= v20)
            {
              v23 = (char *)v18[3];
              v24 = (v21 - v23) >> 4;
              v25 = v24 + 1;
              if ((unint64_t)(v24 + 1) >> 60)
LABEL_77:
                abort();
              v26 = v20 - (_QWORD)v23;
              if (v26 >> 3 > v25)
                v25 = v26 >> 3;
              if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
                v27 = 0xFFFFFFFFFFFFFFFLL;
              else
                v27 = v25;
              if (v27)
              {
                if (v27 >> 60)
LABEL_78:
                  sub_1C4764EE4();
                v28 = (char *)operator new(16 * v27);
              }
              else
              {
                v28 = 0;
              }
              v29 = (llvm::rdf::RefNode **)&v28[16 * v24];
              *v29 = v13;
              v29[1] = (llvm::rdf::RefNode *)v7;
              v30 = v29;
              if (v21 == v23)
              {
                a4 = v60;
              }
              else
              {
                a4 = v60;
                do
                {
                  v31 = (llvm::rdf::RefNode *)*((_QWORD *)v21 - 2);
                  v21 -= 16;
                  v32 = *((_DWORD *)v21 + 2);
                  *(v30 - 2) = v31;
                  v30 -= 2;
                  *((_DWORD *)v30 + 2) = v32;
                }
                while (v21 != v23);
                v21 = (char *)v19[3];
              }
              v22 = v29 + 2;
              v19[3] = v30;
              v19[4] = v29 + 2;
              v19[5] = &v28[16 * v27];
              if (v21)
                operator delete(v21);
            }
            else
            {
              *(_QWORD *)v21 = v13;
              *((_QWORD *)v21 + 1) = v7;
              v22 = v21 + 16;
            }
            v19[4] = v22;
            llvm::rdf::PhysicalRegisterInfo::getAliasSet((uint64_t)v58, v63[0], (uint64_t)v62);
            v33 = *(_OWORD **)&v62[0];
            if (*(_OWORD **)&v62[0] != (_OWORD *)((char *)v62 + 8))
            {
              do
              {
                v61 = *((_DWORD *)v33 + 7);
                v34 = sub_1C5215300(a4, v61, &v61);
                v35 = v34;
                v37 = (char *)v34[4];
                v36 = v34[5];
                if ((unint64_t)v37 >= v36)
                {
                  v39 = (char *)v34[3];
                  v40 = (v37 - v39) >> 4;
                  v41 = v40 + 1;
                  if ((unint64_t)(v40 + 1) >> 60)
                    goto LABEL_77;
                  v42 = v36 - (_QWORD)v39;
                  if (v42 >> 3 > v41)
                    v41 = v42 >> 3;
                  if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0)
                    v43 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v43 = v41;
                  if (v43)
                  {
                    if (v43 >> 60)
                      goto LABEL_78;
                    v44 = (char *)operator new(16 * v43);
                  }
                  else
                  {
                    v44 = 0;
                  }
                  v45 = (llvm::rdf::RefNode **)&v44[16 * v40];
                  *v45 = v13;
                  v45[1] = (llvm::rdf::RefNode *)v7;
                  v46 = v45;
                  if (v37 != v39)
                  {
                    do
                    {
                      v47 = (llvm::rdf::RefNode *)*((_QWORD *)v37 - 2);
                      v37 -= 16;
                      v48 = *((_DWORD *)v37 + 2);
                      *(v46 - 2) = v47;
                      v46 -= 2;
                      *((_DWORD *)v46 + 2) = v48;
                    }
                    while (v37 != v39);
                    v37 = (char *)v35[3];
                  }
                  v38 = v45 + 2;
                  v35[3] = v46;
                  v35[4] = v45 + 2;
                  v35[5] = &v44[16 * v43];
                  if (v37)
                    operator delete(v37);
                  a4 = v60;
                }
                else
                {
                  *(_QWORD *)v37 = v13;
                  *((_QWORD *)v37 + 1) = v7;
                  v38 = v37 + 16;
                }
                v35[4] = v38;
                v49 = (_QWORD *)*((_QWORD *)v33 + 1);
                if (v49)
                {
                  do
                  {
                    v50 = v49;
                    v49 = (_QWORD *)*v49;
                  }
                  while (v49);
                }
                else
                {
                  do
                  {
                    v50 = (_OWORD *)*((_QWORD *)v33 + 2);
                    v51 = *(_QWORD *)v50 == (_QWORD)v33;
                    v33 = v50;
                  }
                  while (!v51);
                }
                v33 = v50;
              }
              while (v50 != (_OWORD *)((char *)v62 + 8));
            }
            sub_1C47655E8((uint64_t)v62, *((_QWORD **)&v62[0] + 1));
            v52 = (__int128 *)v67;
            if (v68)
            {
              v53 = 16 * v68;
              v5 = v57;
              do
              {
                v54 = *v52++;
                v62[0] = v54;
                sub_1C4778ED8(&v65, (unsigned int *)v62 + 2, (_DWORD *)v62 + 2);
                v53 -= 16;
              }
              while (v53);
              v52 = (__int128 *)v67;
            }
            else
            {
              v5 = v57;
            }
            v12 = v55;
            if (v52 != (__int128 *)&v69)
              free(v52);
            v6 = v56;
          }
LABEL_72:
          v11 += 2;
        }
        while (v11 != v12);
        v11 = v70;
      }
      if (v11 != v72)
        free(v11);
    }
  }
  sub_1C47655E8((uint64_t)&v65, v66[0]);
}

unsigned __int16 *llvm::rdf::DataFlowGraph::getRelatedRefs@<X0>(llvm::rdf::DataFlowGraph *a1@<X0>, llvm::rdf::RefNode *this@<X3>, _WORD *a3@<X1>, int a4@<W2>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned __int16 *result;
  unsigned int v17;

  v12 = 0;
  v13 = a6 + 16;
  *(_QWORD *)a6 = a6 + 16;
  *(_QWORD *)(a6 + 8) = 0x400000000;
  v14 = a5;
  do
  {
    if (v12 >= *(_DWORD *)(a6 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a6, v13, v12 + 1, 16);
      v12 = *(_DWORD *)(a6 + 8);
    }
    v15 = (_QWORD *)(*(_QWORD *)a6 + 16 * v12);
    *v15 = this;
    v15[1] = v14;
    v12 = *(_DWORD *)(a6 + 8) + 1;
    *(_DWORD *)(a6 + 8) = v12;
    result = llvm::rdf::DataFlowGraph::getNextRelated(a1, a3, a4, this);
    v14 = v17;
    if (!v17)
      break;
    this = (llvm::rdf::RefNode *)result;
  }
  while (v17 != a5);
  return result;
}

unsigned __int16 *llvm::rdf::DataFlowGraph::getNextRelated(llvm::rdf::DataFlowGraph *a1, _WORD *a2, int a3, llvm::rdf::RefNode *this)
{
  int RegRef;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int16 *i;
  unsigned __int16 v12;
  unsigned __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  RegRef = llvm::rdf::RefNode::getRegRef(this, a1);
  v9 = v8;
  v10 = *((_DWORD *)this + 1);
  if ((*a2 & 0x1C) == 0x10)
  {
    if (!v10)
      goto LABEL_4;
LABEL_3:
    for (i = (unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)a1 + 37)
                                             + 8 * ((v10 - 1) >> *((_DWORD *)a1 + 69)))
                                 + 32 * (*((_DWORD *)a1 + 70) & (v10 - 1)));
          i != (unsigned __int16 *)this;
          i = 0)
    {
      v12 = *i;
      if ((*i & 3) == 2)
      {
        if (llvm::rdf::RefNode::getRegRef((llvm::rdf::RefNode *)i, a1) != RegRef
          || v14 != v9
          || ((*(_WORD *)this ^ v12) & 0x1C) != 0
          || RegRef != llvm::rdf::RefNode::getRegRef(this, a1)
          || v9 != v15
          || *((_QWORD *)this + 3) != *((_QWORD *)i + 3))
        {
          return 0;
        }
        return i;
      }
      v10 = *((_DWORD *)i + 4);
      if (v10)
        goto LABEL_3;
LABEL_4:
      ;
    }
  }
  else
  {
    while (1)
    {
      i = v10
        ? (unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)a1 + 37) + 8
                                                                * ((v10 - 1) >> *((_DWORD *)a1 + 69)))
                             + 32 * (*((_DWORD *)a1 + 70) & (v10 - 1)))
        : 0;
      if (i == (unsigned __int16 *)this)
        break;
      v13 = *i;
      if ((*i & 3) == 2)
      {
        if (llvm::rdf::RefNode::getRegRef((llvm::rdf::RefNode *)i, a1) != RegRef
          || v16 != v9
          || ((*(_WORD *)this ^ v13) & 0x1C) != 0
          || RegRef != llvm::rdf::RefNode::getRegRef(this, a1)
          || v9 != v18
          || (v13 & 0x1C) == 8 && *((_DWORD *)i + 4) != *((_DWORD *)this + 4))
        {
          return 0;
        }
        return i;
      }
      v10 = *((_DWORD *)i + 4);
    }
  }
  return 0;
}

llvm::rdf::RefNode *llvm::rdf::DataFlowGraph::getNextShadow(llvm::rdf::DataFlowGraph *a1, uint64_t a2, int a3, llvm::rdf::RefNode *a4, int a5, int a6)
{
  llvm::rdf::RefNode *v12;
  int v13;
  unsigned __int16 *NextRelated;
  uint64_t v15;
  llvm::rdf::RefNode *v16;
  int v17;
  unsigned __int16 *v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  __int16 v22;
  int v23;

  v12 = a4;
  v13 = *(_WORD *)a4 & 0xFC0 | 0x20;
  NextRelated = llvm::rdf::DataFlowGraph::getNextRelated(a1, (_WORD *)a2, a3, a4);
  v16 = 0;
  if (!(_DWORD)v15 || (_DWORD)v15 == a5)
  {
    v17 = a5;
    v15 = 0;
  }
  else
  {
    v15 = v15;
    if ((*NextRelated & 0xFE0) == v13)
    {
      v12 = a4;
      v17 = a5;
      v16 = (llvm::rdf::RefNode *)NextRelated;
    }
    else
    {
      v16 = (llvm::rdf::RefNode *)NextRelated;
      while (1)
      {
        v12 = v16;
        v17 = v15;
        v18 = llvm::rdf::DataFlowGraph::getNextRelated(a1, (_WORD *)a2, a3, v16);
        if (!(_DWORD)v15 || (_DWORD)v15 == a5)
          break;
        v16 = (llvm::rdf::RefNode *)v18;
        v15 = v15;
        if ((*v18 & 0xFE0) == v13)
          goto LABEL_12;
      }
      v16 = 0;
      v15 = 0;
    }
  }
LABEL_12:
  if (!v15 && a6)
  {
    v19 = llvm::rdf::NodeAllocator::New((size_t)a1 + 272);
    v16 = (llvm::rdf::RefNode *)v19;
    *(_OWORD *)v19 = 0u;
    *(_OWORD *)(v19 + 16) = 0u;
    v21 = *((_OWORD *)a4 + 1);
    *(_OWORD *)v19 = *(_OWORD *)a4;
    *(_OWORD *)(v19 + 16) = v21;
    v22 = *(_WORD *)v19;
    if ((*(_WORD *)v19 & 3) == 2)
    {
      *(_QWORD *)(v19 + 8) = 0;
      if ((v22 & 0x1C) == 4)
        *(_QWORD *)(v19 + 16) = 0;
    }
    *(_WORD *)v19 = v22 & 0xF01F | v13;
    v23 = *((_DWORD *)v12 + 1);
    if (v23 != v20)
    {
      *((_DWORD *)v12 + 1) = v20;
      *(_DWORD *)(v19 + 4) = v23;
    }
    if (*(_DWORD *)(a2 + 20) == v17)
      *(_DWORD *)(a2 + 20) = v20;
  }
  return v16;
}

llvm::rdf::RefNode *llvm::rdf::DataFlowGraph::getNextShadow(llvm::rdf::DataFlowGraph *a1, _WORD *a2, int a3, llvm::rdf::RefNode *a4, int a5)
{
  __int16 v9;
  unsigned __int16 *NextRelated;
  int v11;
  llvm::rdf::RefNode *v12;
  llvm::rdf::RefNode *result;
  int v14;
  unsigned __int16 *v15;
  int v16;

  v9 = *(_WORD *)a4;
  NextRelated = llvm::rdf::DataFlowGraph::getNextRelated(a1, a2, a3, a4);
  if (!v11)
    return 0;
  v12 = (llvm::rdf::RefNode *)NextRelated;
  result = 0;
  if (v11 != a5)
  {
    v14 = v9 & 0xFC0 | 0x20;
    while ((*(_WORD *)v12 & 0xFE0) != v14)
    {
      v15 = llvm::rdf::DataFlowGraph::getNextRelated(a1, a2, a3, v12);
      if (!v16)
        return 0;
      v12 = (llvm::rdf::RefNode *)v15;
      result = 0;
      if (v16 == a5)
        return result;
    }
    return v12;
  }
  return result;
}

void sub_1C5214654(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v6;
  int v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;

  if (a2 != a3)
  {
    v4 = a2;
    while (1)
    {
      v6 = v4 + 4;
      v7 = *(_DWORD *)(a1 + 16);
      if (!v7)
        break;
      v8 = v7 - 1;
      v9 = ((*v6 >> 4) ^ (*v6 >> 9)) & v8;
      v10 = (_QWORD *)(*(_QWORD *)a1 + 8 * v9);
      v11 = *v10;
      if (*v6 != *v10)
      {
        v12 = 0;
        v13 = 1;
        while (v11 != -4096)
        {
          if (v12)
            v14 = 0;
          else
            v14 = v11 == -8192;
          if (v14)
            v12 = v10;
          v15 = v9 + v13++;
          v9 = v15 & v8;
          v10 = (_QWORD *)(*(_QWORD *)a1 + 8 * v9);
          v11 = *v10;
          if (*v6 == *v10)
            goto LABEL_35;
        }
        if (v12)
          v16 = v12;
        else
          v16 = v10;
        goto LABEL_17;
      }
LABEL_35:
      v28 = (_QWORD *)v4[1];
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = (_QWORD *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (_QWORD *)v4[2];
          v14 = *v29 == (_QWORD)v4;
          v4 = v29;
        }
        while (!v14);
      }
      v4 = v29;
      if (v29 == a3)
        return;
    }
    v16 = 0;
LABEL_17:
    *sub_1C4A07FEC(a1, (uint64_t)(v4 + 4), v4 + 4, v16) = *v6;
    v18 = *(_QWORD **)(a1 + 32);
    v17 = *(_QWORD *)(a1 + 40);
    if ((unint64_t)v18 >= v17)
    {
      v20 = *(_QWORD **)(a1 + 24);
      v21 = v18 - v20;
      v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 61)
        abort();
      v23 = v17 - (_QWORD)v20;
      if (v23 >> 2 > v22)
        v22 = v23 >> 2;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
        v24 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v24 = v22;
      if (v24)
      {
        if (v24 >> 61)
          sub_1C4764EE4();
        v25 = (char *)operator new(8 * v24);
      }
      else
      {
        v25 = 0;
      }
      v26 = &v25[8 * v21];
      *(_QWORD *)v26 = *v6;
      v19 = v26 + 8;
      if (v18 != v20)
      {
        do
        {
          v27 = *--v18;
          *((_QWORD *)v26 - 1) = v27;
          v26 -= 8;
        }
        while (v18 != v20);
        v18 = *(_QWORD **)(a1 + 24);
      }
      *(_QWORD *)(a1 + 24) = v26;
      *(_QWORD *)(a1 + 32) = v19;
      *(_QWORD *)(a1 + 40) = &v25[8 * v24];
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v18 = *v6;
      v19 = v18 + 1;
    }
    *(_QWORD *)(a1 + 32) = v19;
    goto LABEL_35;
  }
}

void sub_1C5214838(llvm::rdf::DataFlowGraph *a1, uint64_t a2, int a3, llvm::rdf::RefNode *this, unsigned int a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int RegRef;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  llvm::rdf::RefNode *NextShadow;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 hasAliasOf;
  uint64_t v28;
  char hasCoverOf;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v40;
  uint64_t v41;
  int v42;
  void *v43[2];
  _DWORD v44[14];
  char *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v6 = *a6;
  v7 = a6[1];
  if (*a6 != v7)
  {
    v11 = v7 - v6;
    v12 = v6 - 16;
    v13 = v11 & 0xFFFFFFFF0;
    while (v13)
    {
      v14 = *(_QWORD *)(v12 + v13);
      v13 -= 16;
      if (v14)
      {
        RegRef = llvm::rdf::RefNode::getRegRef(this, a1);
        v41 = v16;
        v42 = RegRef;
        v17 = *(_DWORD *)(*((_QWORD *)a1 + 3) + 44);
        v43[0] = v44;
        v43[1] = (void *)0x600000000;
        sub_1C4765AA4((char *)v43, (v17 + 63) >> 6, 0);
        v44[12] = v17;
        v45 = (char *)a1 + 24;
        v18 = *a6;
        v19 = a6[1] - *a6;
        v20 = (v19 >> 4) + 1;
        v21 = v19 & 0xFFFFFFFF0;
        while (v21)
        {
          v22 = *(_QWORD *)(v18 + v21 - 16);
          --v20;
          v21 -= 16;
          if (v22)
          {
            v40 = 0;
            NextShadow = 0;
LABEL_9:
            v24 = llvm::rdf::RefNode::getRegRef(*(llvm::rdf::RefNode **)(v18 + 16 * (v20 - 1)), a1);
            v26 = v25;
            hasAliasOf = llvm::rdf::RegisterAggr::hasAliasOf((uint64_t)v43, v24, v25);
            v28 = llvm::rdf::RegisterAggr::insert((uint64_t)v43, v24, v26);
            hasCoverOf = llvm::rdf::RegisterAggr::hasCoverOf(v28, v42, v41);
            v30 = hasCoverOf;
            if (hasAliasOf)
            {
              if ((hasCoverOf & 1) != 0)
                break;
            }
            else
            {
              v31 = (uint64_t *)(*a6 + 16 * (v20 - 1));
              v32 = *v31;
              v33 = v31[1];
              if (v40)
              {
                *(_WORD *)NextShadow |= 0x20u;
                NextShadow = llvm::rdf::DataFlowGraph::getNextShadow(a1, a2, a3, NextShadow, v40, 1);
              }
              else
              {
                NextShadow = this;
                v34 = a5;
              }
              *((_DWORD *)NextShadow + 2) = v33;
              *((_DWORD *)NextShadow + 3) = *(_DWORD *)(v32 + 20);
              *(_DWORD *)(v32 + 20) = v34;
              if ((v30 & 1) != 0)
                break;
              v40 = v34;
            }
            v18 = *a6;
            while (1)
            {
              v35 = v20 - 1;
              if (v20 == 1)
                goto LABEL_21;
              v36 = *(_QWORD *)(v18 + 16 * (v20 - 2));
              --v20;
              if (v36)
              {
                v20 = v35;
                goto LABEL_9;
              }
            }
          }
        }
LABEL_21:
        if (v43[0] != v44)
          free(v43[0]);
        return;
      }
    }
  }
}

uint64_t llvm::rdf::DataFlowGraph::unlinkUseDF(uint64_t result, uint64_t a2, int a3)
{
  int v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;

  v3 = *(_DWORD *)(a2 + 8);
  if (v3)
  {
    v4 = v3 - 1;
    v5 = *(_DWORD *)(result + 276);
    v6 = v4 >> v5;
    v7 = *(_DWORD *)(result + 280);
    v8 = 32 * (v7 & v4);
    v9 = *(_QWORD *)(result + 296);
    v10 = *(_QWORD *)(v9 + 8 * v6) + v8;
    v13 = *(_DWORD *)(v10 + 20);
    v11 = (_DWORD *)(v10 + 20);
    v12 = v13;
    if (v13)
    {
      if (v12 != a3)
      {
        v14 = v12 - 1;
        v15 = *(_QWORD *)(v9 + 8 * ((v12 - 1) >> v5));
        v16 = 32 * (v14 & v7);
        while (1)
        {
          v17 = v15 + v16;
          v18 = *(_DWORD *)(v17 + 12);
          if (v18 == a3)
            break;
          if (!v18)
            return result;
          v19 = v18 - 1;
          v20 = v19 >> v5;
          v16 = 32 * (v19 & v7);
          v15 = *(_QWORD *)(v9 + 8 * v20);
        }
        v11 = (_DWORD *)(v17 + 12);
      }
      goto LABEL_11;
    }
    if (!a3)
LABEL_11:
      *v11 = *(_DWORD *)(a2 + 12);
  }
  return result;
}

void llvm::rdf::DataFlowGraph::unlinkDefDF(uint64_t a1, _DWORD *a2, int a3)
{
  int v6;
  unsigned int v7;
  unsigned int i;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _DWORD *v43;
  void *v44;
  uint64_t v45;
  _BYTE v46[64];
  void *v47;
  uint64_t v48;
  _QWORD v49[10];

  v49[8] = *MEMORY[0x1E0C80C00];
  v6 = a2[2];
  v7 = a2[4];
  v47 = v49;
  v48 = 0x400000000;
  for (i = 0; v7; v7 = *(_DWORD *)(v11 + 12))
  {
    v9 = *(_DWORD *)(a1 + 280);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 296) + 8 * ((v7 - 1) >> *(_DWORD *)(a1 + 276)));
    if (i >= HIDWORD(v48))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, (uint64_t)v49, i + 1, 16);
      i = v48;
    }
    v11 = v10 + 32 * (v9 & (v7 - 1));
    v12 = (char *)v47 + 16 * i;
    *v12 = v11;
    v12[1] = v7;
    i = v48 + 1;
    LODWORD(v48) = v48 + 1;
  }
  v13 = a2[5];
  v44 = v46;
  v45 = 0x400000000;
  v14 = 0;
  if (v13)
  {
    do
    {
      v15 = *(_DWORD *)(a1 + 280);
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 296) + 8 * ((v13 - 1) >> *(_DWORD *)(a1 + 276)));
      if (v14 >= HIDWORD(v45))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, (uint64_t)v46, v14 + 1, 16);
        v14 = v45;
      }
      v17 = v16 + 32 * (v15 & (v13 - 1));
      v18 = (char *)v44 + 16 * v14;
      *v18 = v17;
      v18[1] = v13;
      v14 = v45 + 1;
      LODWORD(v45) = v45 + 1;
      v13 = *(_DWORD *)(v17 + 12);
    }
    while (v13);
    i = v48;
  }
  v19 = (uint64_t *)v47;
  if (!v6)
  {
    if (i)
    {
      v20 = 16 * i;
      v21 = (uint64_t *)v47;
      do
      {
        v22 = *v21;
        v21 += 2;
        *(_DWORD *)(v22 + 12) = 0;
        v20 -= 16;
      }
      while (v20);
    }
    if (v14)
    {
      v23 = (uint64_t *)v44;
      v24 = 16 * v14;
      do
      {
        v25 = *v23;
        v23 += 2;
        *(_DWORD *)(v25 + 12) = 0;
        v24 -= 16;
      }
      while (v24);
    }
  }
  if (i)
  {
    v26 = 16 * i;
    do
    {
      v27 = *v19;
      v19 += 2;
      *(_DWORD *)(v27 + 8) = v6;
      v26 -= 16;
    }
    while (v26);
    v14 = v45;
  }
  v28 = v44;
  if (v14)
  {
    v29 = 16 * v14;
    v30 = (uint64_t *)v44;
    do
    {
      v31 = *v30;
      v30 += 2;
      *(_DWORD *)(v31 + 8) = v6;
      v29 -= 16;
    }
    while (v29);
  }
  if (v6)
  {
    v32 = a2[3];
    v33 = *(_DWORD *)(a1 + 276);
    v34 = *(_DWORD *)(a1 + 280);
    v35 = *(_QWORD *)(a1 + 296);
    v36 = *(_QWORD *)(v35 + 8 * ((v6 - 1) >> v33)) + 32 * (v34 & (v6 - 1));
    v37 = *(_DWORD *)(v36 + 16);
    if (v37)
    {
      if (v37 != a3)
      {
        v38 = v37 - 1;
        v39 = *(_QWORD *)(v35 + 8 * (v38 >> v33));
        v40 = 32 * (v38 & v34);
        while (1)
        {
          v41 = v39 + v40;
          v42 = *(_DWORD *)(v41 + 12);
          if (v42 == a3)
            break;
          if (!v42)
            goto LABEL_34;
          v40 = 32 * ((v42 - 1) & v34);
          v39 = *(_QWORD *)(v35 + 8 * ((v42 - 1) >> v33));
        }
        *(_DWORD *)(v41 + 12) = v32;
        goto LABEL_34;
      }
    }
    else if (a3)
    {
LABEL_34:
      if ((_DWORD)v48)
      {
        v43 = v47;
        *(_DWORD *)(*((_QWORD *)v47 + 2 * v48 - 2) + 12) = *(_DWORD *)(v36 + 16);
        *(_DWORD *)(v36 + 16) = v43[2];
      }
      v28 = v44;
      if ((_DWORD)v45)
      {
        *(_DWORD *)(*((_QWORD *)v44 + 2 * v45 - 2) + 12) = *(_DWORD *)(v36 + 20);
        *(_DWORD *)(v36 + 20) = v28[2];
        v28 = v44;
      }
      goto LABEL_38;
    }
    *(_DWORD *)(v36 + 16) = v32;
    goto LABEL_34;
  }
LABEL_38:
  if (v28 != (_DWORD *)v46)
    free(v28);
  if (v47 != v49)
    free(v47);
}

void sub_1C5214E28()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5214E3C(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v8;
  char *i;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = *(char **)a1;
  v5 = *(char **)(a1 + 8);
  v6 = *(char **)a1;
  if (*(char **)a1 != v5)
  {
    v6 = *(char **)a1;
    while (*(_QWORD *)v6 != a2)
    {
      v6 += 8;
      if (v6 == v5)
      {
        v6 = *(char **)(a1 + 8);
        break;
      }
    }
  }
  if (v6 != v5)
    return ((v6 - v4) >> 3) + 1;
  v8 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v5 >= v8)
  {
    v10 = (v5 - v4) >> 3;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61)
      abort();
    v12 = v8 - (_QWORD)v4;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 61)
        sub_1C4764EE4();
      v14 = (char *)operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v10];
    *(_QWORD *)v15 = a2;
    for (i = v15 + 8; v5 != v4; v15 -= 8)
    {
      v16 = *((_QWORD *)v5 - 1);
      v5 -= 8;
      *((_QWORD *)v15 - 1) = v16;
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = i;
    *(_QWORD *)(a1 + 16) = &v14[8 * v13];
    if (v4)
    {
      operator delete(v4);
      v4 = *(char **)a1;
    }
    else
    {
      v4 = v15;
    }
  }
  else
  {
    *(_QWORD *)v5 = a2;
    i = v5 + 8;
  }
  *(_QWORD *)(a1 + 8) = i;
  return (i - v4) >> 3;
}

_QWORD *sub_1C5214F78(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
LABEL_8:
    abort();
  v3 = *a2;
  while (1)
  {
    while (1)
    {
      v4 = v2[4];
      if (v3 >= v4)
        break;
      v2 = (_QWORD *)*v2;
      if (!v2)
        goto LABEL_8;
    }
    if (v4 >= v3)
      return v2 + 5;
    v2 = (_QWORD *)v2[1];
    if (!v2)
      goto LABEL_8;
  }
}

uint64_t sub_1C5214FC4(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  int v10;
  uint64_t v11;
  uint64_t hasCoverOf;
  void *v14[2];
  _DWORD v15[14];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v10 = *(_DWORD *)(*(_QWORD *)a5 + 44);
  v14[0] = v15;
  v14[1] = (void *)0x600000000;
  sub_1C4765AA4((char *)v14, (v10 + 63) >> 6, 0);
  v15[12] = v10;
  v16 = a5;
  v11 = llvm::rdf::RegisterAggr::insert((uint64_t)v14, a1, a2);
  hasCoverOf = llvm::rdf::RegisterAggr::hasCoverOf(v11, a3, a4);
  if (v14[0] != v15)
    free(v14[0]);
  return hasCoverOf;
}

void sub_1C52150AC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int v16;

  v5 = *(_DWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), 16 * a2);
      v5 += 4 * a2;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_DWORD **)a1;
    v7 = (uint64_t)v5 - *(_QWORD *)a1;
    v8 = a2 + (v7 >> 4);
    if (v8 >> 60)
      abort();
    v9 = v4 - (_QWORD)v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        sub_1C4764EE4();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[16 * (v7 >> 4)];
    v13 = &v11[16 * v10];
    bzero(v12, 16 * a2);
    v14 = &v12[16 * a2];
    if (v5 != v6)
    {
      do
      {
        v15 = *((_QWORD *)v5 - 2);
        v5 -= 4;
        v16 = v5[2];
        *((_QWORD *)v12 - 2) = v15;
        v12 -= 16;
        *((_DWORD *)v12 + 2) = v16;
      }
      while (v5 != v6);
      v5 = *(_DWORD **)a1;
    }
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v14;
    *(_QWORD *)(a1 + 16) = v13;
    if (v5)
      operator delete(v5);
  }
}

uint64_t **sub_1C52151C8(uint64_t a1, unsigned int a2, unint64_t a3, _OWORD *a4)
{
  uint64_t **result;
  uint64_t **v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  result = (uint64_t **)sub_1C5215264(a1, &v12, a2, a3);
  if (!*result)
  {
    v7 = result;
    v8 = operator new(0x30uLL);
    v8[2] = *a4;
    v9 = v12;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = v9;
    *v7 = (uint64_t *)v8;
    v10 = **(_QWORD **)a1;
    if (v10)
    {
      *(_QWORD *)a1 = v10;
      v11 = *v7;
    }
    else
    {
      v11 = (uint64_t *)v8;
    }
    result = (uint64_t **)sub_1C4768E74(*(uint64_t **)(a1 + 8), v11);
    ++*(_QWORD *)(a1 + 16);
  }
  return result;
}

_QWORD *sub_1C5215264(uint64_t a1, _QWORD *a2, unsigned int a3, unint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  unint64_t v9;
  BOOL v10;

  v6 = *(_QWORD *)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v5 = v6;
  if (v6)
  {
    while (1)
    {
      v7 = (_QWORD *)v5;
      v8 = *(_DWORD *)(v5 + 32);
      if (v8 > a3)
        goto LABEL_6;
      if (v8 != a3)
      {
        v10 = v8 >= a3;
        goto LABEL_8;
      }
      v9 = v7[5];
      v10 = v9 >= a4;
      if (v9 <= a4)
      {
LABEL_8:
        if (v10)
          goto LABEL_12;
        result = v7 + 1;
        v5 = v7[1];
        if (!v5)
          goto LABEL_12;
      }
      else
      {
LABEL_6:
        v5 = *v7;
        result = v7;
        if (!*v7)
          goto LABEL_12;
      }
    }
  }
  v7 = result;
LABEL_12:
  *a2 = v7;
  return result;
}

void sub_1C52152C0(_QWORD *a1)
{
  if (a1)
  {
    sub_1C52152C0(*a1);
    sub_1C52152C0(a1[1]);
    sub_1C49F3440((_QWORD *)a1[6]);
    operator delete(a1);
  }
}

_QWORD *sub_1C5215300(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;

  v6 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v12 = a1 + 2;
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  v13 = (float)(unint64_t)(a1[3] + 1);
  v14 = *((float *)a1 + 8);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = (int8x8_t)v17;
    else
      prime = (int8x8_t)v16;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = a1[1];
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (*(_QWORD *)&prime <= v25)
        prime = (int8x8_t)v25;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            sub_1C4764EE4();
          v19 = operator new(8 * *(_QWORD *)&prime);
          v20 = (void *)*a1;
          *a1 = (uint64_t)v19;
          if (v20)
            operator delete(v20);
          v21 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v21++) = 0;
          while (*(_QWORD *)&prime != v21);
          v22 = (_QWORD *)*v12;
          if (*v12)
          {
            v23 = v22[1];
            v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(_QWORD *)&prime)
                v23 %= *(_QWORD *)&prime;
            }
            else
            {
              v23 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v23) = v12;
            v28 = (_QWORD *)*v22;
            if (*v22)
            {
              do
              {
                v29 = v28[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(_QWORD *)&prime)
                    v29 %= *(_QWORD *)&prime;
                }
                else
                {
                  v29 &= *(_QWORD *)&prime - 1;
                }
                if (v29 != v23)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v29))
                  {
                    *(_QWORD *)(*a1 + 8 * v29) = v22;
                    goto LABEL_55;
                  }
                  *v22 = *v28;
                  *v28 = **(_QWORD **)(*a1 + 8 * v29);
                  **(_QWORD **)(*a1 + 8 * v29) = v28;
                  v28 = v22;
                }
                v29 = v23;
LABEL_55:
                v22 = v28;
                v28 = (_QWORD *)*v28;
                v23 = v29;
              }
              while (v28);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v34 = (void *)*a1;
        *a1 = 0;
        if (v34)
          operator delete(v34);
        v7 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v30 = *a1;
  v31 = *(_QWORD **)(*a1 + 8 * v3);
  if (v31)
  {
    *v10 = *v31;
LABEL_72:
    *v31 = v10;
    goto LABEL_73;
  }
  *v10 = *v12;
  *v12 = v10;
  *(_QWORD *)(v30 + 8 * v3) = v12;
  if (*v10)
  {
    v32 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void sub_1C52156E0(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __n128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned __int32 v16;
  unint64_t v17;
  char v18;
  BOOL v19;
  __int128 *v20;
  unsigned __int32 v21;
  __int128 v22;
  __int128 v23;

_OWORD *sub_1C5215A58(_OWORD *result, _OWORD *a2)
{
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  _OWORD *v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  _OWORD *v9;
  uint64_t v10;
  unsigned int v11;

  if (result != a2)
  {
    v2 = result + 1;
    if (result + 1 != a2)
    {
      v3 = 0;
      v4 = result;
      while (1)
      {
        v5 = v4;
        v4 = v2;
        v6 = *((_DWORD *)v5 + 4);
        if (v6 < *(_DWORD *)v5)
          break;
        if (v6 == *(_DWORD *)v5)
        {
          v7 = *((_QWORD *)v5 + 3);
          if (v7 < *((_QWORD *)v5 + 1))
            goto LABEL_6;
        }
LABEL_19:
        v2 = v4 + 1;
        v3 += 16;
        if (v4 + 1 == a2)
          return result;
      }
      v7 = *((_QWORD *)v5 + 3);
LABEL_6:
      v8 = *((_DWORD *)v5 + 5);
      *v4 = *v5;
      v9 = result;
      if (v5 != result)
      {
        v10 = v3;
        while (1)
        {
          v11 = *(_DWORD *)((char *)result + v10 - 16);
          if (v6 >= v11)
          {
            if (v6 != v11)
            {
              v9 = (_OWORD *)((char *)result + v10);
              goto LABEL_18;
            }
            if (v7 >= *(_QWORD *)((char *)result + v10 - 8))
              break;
          }
          --v5;
          *(_OWORD *)((char *)result + v10) = *(_OWORD *)((char *)result + v10 - 16);
          v10 -= 16;
          if (!v10)
          {
            v9 = result;
            goto LABEL_18;
          }
        }
        v9 = v5;
      }
LABEL_18:
      *(_DWORD *)v9 = v6;
      *((_DWORD *)v9 + 1) = v8;
      *((_QWORD *)v9 + 1) = v7;
      goto LABEL_19;
    }
  }
  return result;
}

uint64_t sub_1C5215B30(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;

  if (result != a2)
  {
    while (1)
    {
      if (result + 16 == a2)
        return result;
      v2 = result;
      result += 16;
      v3 = *(_DWORD *)(v2 + 16);
      if (v3 >= *(_DWORD *)v2)
      {
        if (v3 == *(_DWORD *)v2)
        {
          v4 = *(_QWORD *)(v2 + 24);
          if (v4 < *(_QWORD *)(v2 + 8))
            goto LABEL_7;
        }
      }
      else
      {
        v4 = *(_QWORD *)(v2 + 24);
LABEL_7:
        v5 = *(_DWORD *)(v2 + 20);
        do
        {
          do
          {
            v6 = v2;
            *(_OWORD *)(v2 + 16) = *(_OWORD *)v2;
            v7 = *(_DWORD *)(v2 - 16);
            v2 -= 16;
            v8 = v3 == v7;
          }
          while (v3 < v7);
        }
        while (v8 && v4 < *(_QWORD *)(v6 - 8));
        *(_DWORD *)v6 = v3;
        *(_DWORD *)(v6 + 4) = v5;
        *(_QWORD *)(v6 + 8) = v4;
      }
    }
  }
  return result;
}

uint64_t sub_1C5215BB4(__int128 *a1, unsigned int *a2, __int128 *a3)
{
  unsigned int v3;
  __int128 v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = *a2;
  if (*a2 < *(_DWORD *)a1 || v3 == *(_DWORD *)a1 && *((_QWORD *)a2 + 1) < *((_QWORD *)a1 + 1))
  {
    if (*(_DWORD *)a3 < v3 || *(_DWORD *)a3 == v3 && *((_QWORD *)a3 + 1) < *((_QWORD *)a2 + 1))
    {
      v4 = *a1;
      *a1 = *a3;
      *a3 = v4;
    }
    else
    {
      v8 = *a1;
      *a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v8;
      if (*(_DWORD *)a3 < *a2 || *(_DWORD *)a3 == *a2 && *((_QWORD *)a3 + 1) < *((_QWORD *)a2 + 1))
      {
        v9 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *a3;
        *a3 = v9;
        return 2;
      }
    }
    return 1;
  }
  if (*(_DWORD *)a3 < v3 || *(_DWORD *)a3 == v3 && *((_QWORD *)a3 + 1) < *((_QWORD *)a2 + 1))
  {
    v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *a3;
    *a3 = v6;
    if (*a2 < *(_DWORD *)a1 || *a2 == *(_DWORD *)a1 && *((_QWORD *)a2 + 1) < *((_QWORD *)a1 + 1))
    {
      v7 = *a1;
      *a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v7;
      return 2;
    }
    return 1;
  }
  return 0;
}

_QWORD *sub_1C5215CDC(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *i;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  __int128 v15;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(_DWORD *)(a2 - 16);
  v5 = *a1;
  if (v5 < v4 || v5 == v4 && v3 < *(_QWORD *)(a2 - 8))
  {
    i = a1;
    do
    {
      v8 = *((_DWORD *)i + 4);
      i += 2;
      v7 = v8;
    }
    while (v5 >= v8 && (v5 != v7 || v3 >= i[1]));
  }
  else
  {
    for (i = a1 + 2; (unint64_t)i < a2 && v5 >= *(_DWORD *)i && (v5 != *(_DWORD *)i || v3 >= i[1]); i += 2)
      ;
  }
  if ((unint64_t)i < a2)
  {
    for (a2 -= 16; v5 < v4 || v5 == v4 && v3 < *(_QWORD *)(a2 + 8); a2 -= 16)
    {
      v9 = *(_DWORD *)(a2 - 16);
      v4 = v9;
    }
  }
  while ((unint64_t)i < a2)
  {
    v15 = *(_OWORD *)i;
    *(_OWORD *)i = *(_OWORD *)a2;
    *(_OWORD *)a2 = v15;
    do
    {
      v11 = *((_DWORD *)i + 4);
      i += 2;
      v10 = v11;
    }
    while (v5 >= v11 && (v5 != v10 || v3 >= i[1]));
    do
    {
      do
      {
        v12 = *(_DWORD *)(a2 - 16);
        a2 -= 16;
        v13 = v5 == v12;
      }
      while (v5 < v12);
    }
    while (v13 && v3 < *(_QWORD *)(a2 + 8));
  }
  if (i - 2 != a1)
    *(_OWORD *)a1 = *((_OWORD *)i - 1);
  *(i - 2) = v2;
  *(i - 1) = v3;
  return i;
}

unint64_t sub_1C5215E0C(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  __int128 v19;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  v5 = *a1;
  while (1)
  {
    v6 = a1[v2 + 2];
    if (v6 >= v5 && (v6 != v5 || a1[v2 + 3] >= v4))
      break;
    v2 += 2;
  }
  v7 = (unint64_t)&a1[v2 + 2];
  if (v2 * 8)
  {
    do
    {
      v9 = *(_DWORD *)(a2 - 16);
      a2 -= 16;
      v8 = v9;
    }
    while (v9 >= v5 && (v8 != v5 || *(_QWORD *)(a2 + 8) >= v4));
  }
  else
  {
LABEL_16:
    if (v7 < a2)
    {
      do
      {
        v11 = *(_DWORD *)(a2 - 16);
        a2 -= 16;
        v10 = v11;
        if (v11 < v5)
          break;
        if (v10 != v5)
          goto LABEL_16;
      }
      while (v7 < a2 && *(_QWORD *)(a2 + 8) >= v4);
    }
  }
  v12 = v7;
  if (v7 < a2)
  {
    v13 = a2;
    do
    {
      v19 = *(_OWORD *)v12;
      *(_OWORD *)v12 = *(_OWORD *)v13;
      *(_OWORD *)v13 = v19;
      do
      {
        do
        {
          v14 = *(_DWORD *)(v12 + 16);
          v12 += 16;
          v15 = v14 == v5;
        }
        while (v14 < v5);
      }
      while (v15 && *(_QWORD *)(v12 + 8) < v4);
      do
      {
        v17 = *(_DWORD *)(v13 - 16);
        v13 -= 16;
        v16 = v17;
      }
      while (v17 >= v5 && (v16 != v5 || *(_QWORD *)(v13 + 8) >= v4));
    }
    while (v12 < v13);
  }
  if ((uint64_t *)(v12 - 16) != a1)
    *(_OWORD *)a1 = *(_OWORD *)(v12 - 16);
  *(_QWORD *)(v12 - 16) = v3;
  *(_QWORD *)(v12 - 8) = v4;
  return v12 - 16;
}

BOOL sub_1C5215F4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  unsigned int v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 16);
      v7 = *(_DWORD *)(a2 - 16);
      if (v7 < *(_DWORD *)a1 || v7 == *(_DWORD *)a1 && *(_QWORD *)(a2 - 8) < *(_QWORD *)(a1 + 8))
      {
        v8 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v8;
      }
      return result;
    case 3:
      sub_1C5215BB4((__int128 *)a1, (unsigned int *)(a1 + 16), (__int128 *)(a2 - 16));
      return 1;
    case 4:
      sub_1C5216144(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      sub_1C5216228((__n128 *)a1, (__n128 *)(a1 + 16), (__n128 *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)(a2 - 16));
      return 1;
    default:
      v9 = a1 + 32;
      sub_1C5215BB4((__int128 *)a1, (unsigned int *)(a1 + 16), (__int128 *)(a1 + 32));
      v10 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(_DWORD *)v10;
    if (*(_DWORD *)v10 < *(_DWORD *)v9)
      break;
    if (v13 == *(_DWORD *)v9)
    {
      v14 = *(_QWORD *)(v10 + 8);
      if (v14 < *(_QWORD *)(v9 + 8))
        goto LABEL_12;
    }
LABEL_22:
    v9 = v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2)
      return 1;
  }
  v14 = *(_QWORD *)(v10 + 8);
LABEL_12:
  v15 = *(_DWORD *)(v10 + 4);
  *(_OWORD *)v10 = *(_OWORD *)v9;
  v16 = a1;
  if (v9 != a1)
  {
    v17 = v11;
    while (1)
    {
      v18 = *(_DWORD *)(a1 + v17 + 16);
      if (v13 >= v18)
      {
        if (v13 != v18)
        {
          v16 = a1 + v17 + 32;
          goto LABEL_21;
        }
        if (v14 >= *(_QWORD *)(a1 + v17 + 24))
          break;
      }
      v9 -= 16;
      *(_OWORD *)(a1 + v17 + 32) = *(_OWORD *)(a1 + v17 + 16);
      v17 -= 16;
      if (v17 == -32)
      {
        v16 = a1;
        goto LABEL_21;
      }
    }
    v16 = v9;
  }
LABEL_21:
  *(_DWORD *)v16 = v13;
  *(_DWORD *)(v16 + 4) = v15;
  *(_QWORD *)(v16 + 8) = v14;
  if (++v12 != 8)
    goto LABEL_22;
  return v10 + 16 == a2;
}

__n128 sub_1C5216144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;

  sub_1C5215BB4((__int128 *)a1, (unsigned int *)a2, (__int128 *)a3);
  if (*(_DWORD *)a4 < *(_DWORD *)a3 || *(_DWORD *)a4 == *(_DWORD *)a3 && *(_QWORD *)(a4 + 8) < *(_QWORD *)(a3 + 8))
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    if (*(_DWORD *)a3 < *(_DWORD *)a2 || *(_DWORD *)a3 == *(_DWORD *)a2 && *(_QWORD *)(a3 + 8) < *(_QWORD *)(a2 + 8))
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*(_DWORD *)a2 < *(_DWORD *)a1 || *(_DWORD *)a2 == *(_DWORD *)a1 && *(_QWORD *)(a2 + 8) < *(_QWORD *)(a1 + 8))
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 sub_1C5216228(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;

  result.n128_u64[0] = sub_1C5216144((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4).n128_u64[0];
  if (a5->n128_u32[0] < a4->n128_u32[0] || a5->n128_u32[0] == a4->n128_u32[0] && a5->n128_u64[1] < a4->n128_u64[1])
  {
    result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (a4->n128_u32[0] < a3->n128_u32[0] || a4->n128_u32[0] == a3->n128_u32[0] && a4->n128_u64[1] < a3->n128_u64[1])
    {
      result = *a3;
      *a3 = *a4;
      *a4 = result;
      if (a3->n128_u32[0] < a2->n128_u32[0] || a3->n128_u32[0] == a2->n128_u32[0] && a3->n128_u64[1] < a2->n128_u64[1])
      {
        result = *a2;
        *a2 = *a3;
        *a3 = result;
        if (a2->n128_u32[0] < a1->n128_u32[0]
          || a2->n128_u32[0] == a1->n128_u32[0] && a2->n128_u64[1] < a1->n128_u64[1])
        {
          result = *a1;
          *a1 = *a2;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

_OWORD *sub_1C5216354(uint64_t a1, _OWORD *a2, _OWORD *a3, uint64_t a4)
{
  _OWORD *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  __int128 v25;

  if ((_OWORD *)a1 != a2)
  {
    v6 = a2;
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) >> 4;
    if ((uint64_t)a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (int *)(a1 + 16 * v10);
      do
      {
        sub_1C5216534(a1, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (*(_DWORD *)v14 < *(_DWORD *)a1
          || *(_DWORD *)v14 == *(_DWORD *)a1 && *((_QWORD *)v14 + 1) < *(_QWORD *)(a1 + 8))
        {
          v15 = *v14;
          *v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          sub_1C5216534(a1, a4, v9, (int *)a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      do
      {
        v16 = 0;
        v25 = *(_OWORD *)a1;
        v17 = a1;
        do
        {
          v18 = (_OWORD *)v17;
          v19 = v16 + 1;
          v17 += 16 * (v16 + 1);
          v20 = 2 * v16;
          v16 = (2 * v16) | 1;
          v21 = v20 + 2;
          if (v21 < v9)
          {
            v22 = *(_DWORD *)(v17 + 16);
            if (*(_DWORD *)v17 < v22 || *(_DWORD *)v17 == v22 && *((_QWORD *)&v18[v19] + 1) < *(_QWORD *)(v17 + 24))
            {
              v17 += 16;
              v16 = v21;
            }
          }
          *v18 = *(_OWORD *)v17;
        }
        while (v16 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
        if ((_OWORD *)v17 == --v6)
        {
          *(_OWORD *)v17 = v25;
        }
        else
        {
          *(_OWORD *)v17 = *v6;
          *v6 = v25;
          sub_1C5216670(a1, v17 + 16, a4, (v17 + 16 - a1) >> 4);
        }
      }
      while (v9-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_1C5216534(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = result + 16 * v7;
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = *(_DWORD *)(v8 + 16);
        if (*(_DWORD *)v8 < v10 || *(_DWORD *)v8 == v10 && *(_QWORD *)(result + 16 * v7 + 8) < *(_QWORD *)(v8 + 24))
        {
          v8 += 16;
          v7 = v9;
        }
      }
      v11 = *a4;
      if (*(_DWORD *)v8 >= *a4)
      {
        if (*(_DWORD *)v8 == v11)
        {
          v12 = *((_QWORD *)a4 + 1);
          if (*(_QWORD *)(v8 + 8) < v12)
            return result;
        }
        else
        {
          v12 = *((_QWORD *)a4 + 1);
        }
        v13 = a4[1];
        *(_OWORD *)a4 = *(_OWORD *)v8;
        if (v5 >= v7)
        {
          while (1)
          {
            v15 = 2 * v7;
            v7 = (2 * v7) | 1;
            v14 = result + 16 * v7;
            v16 = v15 + 2;
            if (v16 < a3)
            {
              v17 = *(_DWORD *)(v14 + 16);
              if (*(_DWORD *)v14 < v17
                || *(_DWORD *)v14 == v17 && *(_QWORD *)(result + 16 * v7 + 8) < *(_QWORD *)(v14 + 24))
              {
                v14 += 16;
                v7 = v16;
              }
            }
            if (*(_DWORD *)v14 < v11 || *(_DWORD *)v14 == v11 && *(_QWORD *)(v14 + 8) < v12)
              break;
            *(_OWORD *)v8 = *(_OWORD *)v14;
            v8 = v14;
            if (v5 < v7)
              goto LABEL_24;
          }
        }
        v14 = v8;
LABEL_24:
        *(_DWORD *)v14 = v11;
        *(_DWORD *)(v14 + 4) = v13;
        *(_QWORD *)(v14 + 8) = v12;
      }
    }
  }
  return result;
}

uint64_t sub_1C5216670(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  unint64_t v11;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (unsigned int *)(result + 16 * (v4 >> 1));
    v7 = *(_DWORD *)(a2 - 16);
    if (*v6 >= v7)
    {
      if (*v6 != v7)
        return result;
      v8 = *(_QWORD *)(a2 - 8);
      if (*(_QWORD *)(result + 16 * v5 + 8) >= v8)
        return result;
    }
    else
    {
      v8 = *(_QWORD *)(a2 - 8);
    }
    v9 = *(_DWORD *)(a2 - 12);
    *(_OWORD *)(a2 - 16) = *(_OWORD *)v6;
    if (v4 >= 2)
    {
      while (1)
      {
        v11 = v5 - 1;
        v5 = (v5 - 1) >> 1;
        v10 = (unsigned int *)(result + 16 * v5);
        if (*v10 >= v7 && (*v10 != v7 || *(_QWORD *)(result + 16 * v5 + 8) >= v8))
          break;
        *(_OWORD *)v6 = *(_OWORD *)v10;
        v6 = (unsigned int *)(result + 16 * v5);
        if (v11 <= 1)
          goto LABEL_12;
      }
    }
    v10 = v6;
LABEL_12:
    *v10 = v7;
    v10[1] = v9;
    *((_QWORD *)v10 + 1) = v8;
  }
  return result;
}

void sub_1C521671C(llvm::rdf::DataFlowGraph *a1, uint64_t a2, int a3, llvm::rdf::RefNode *this, unsigned int a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int RegRef;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  llvm::rdf::RefNode *NextShadow;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 hasAliasOf;
  uint64_t v28;
  char hasCoverOf;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v40;
  uint64_t v41;
  int v42;
  void *v43[2];
  _DWORD v44[14];
  char *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v6 = *a6;
  v7 = a6[1];
  if (*a6 != v7)
  {
    v11 = v7 - v6;
    v12 = v6 - 16;
    v13 = v11 & 0xFFFFFFFF0;
    while (v13)
    {
      v14 = *(_QWORD *)(v12 + v13);
      v13 -= 16;
      if (v14)
      {
        RegRef = llvm::rdf::RefNode::getRegRef(this, a1);
        v41 = v16;
        v42 = RegRef;
        v17 = *(_DWORD *)(*((_QWORD *)a1 + 3) + 44);
        v43[0] = v44;
        v43[1] = (void *)0x600000000;
        sub_1C4765AA4((char *)v43, (v17 + 63) >> 6, 0);
        v44[12] = v17;
        v45 = (char *)a1 + 24;
        v18 = *a6;
        v19 = a6[1] - *a6;
        v20 = (v19 >> 4) + 1;
        v21 = v19 & 0xFFFFFFFF0;
        while (v21)
        {
          v22 = *(_QWORD *)(v18 + v21 - 16);
          --v20;
          v21 -= 16;
          if (v22)
          {
            v40 = 0;
            NextShadow = 0;
LABEL_9:
            v24 = llvm::rdf::RefNode::getRegRef(*(llvm::rdf::RefNode **)(v18 + 16 * (v20 - 1)), a1);
            v26 = v25;
            hasAliasOf = llvm::rdf::RegisterAggr::hasAliasOf((uint64_t)v43, v24, v25);
            v28 = llvm::rdf::RegisterAggr::insert((uint64_t)v43, v24, v26);
            hasCoverOf = llvm::rdf::RegisterAggr::hasCoverOf(v28, v42, v41);
            v30 = hasCoverOf;
            if (hasAliasOf)
            {
              if ((hasCoverOf & 1) != 0)
                break;
            }
            else
            {
              v31 = (uint64_t *)(*a6 + 16 * (v20 - 1));
              v32 = *v31;
              v33 = v31[1];
              if (v40)
              {
                *(_WORD *)NextShadow |= 0x20u;
                NextShadow = llvm::rdf::DataFlowGraph::getNextShadow(a1, a2, a3, NextShadow, v40, 1);
              }
              else
              {
                NextShadow = this;
                v34 = a5;
              }
              *((_DWORD *)NextShadow + 2) = v33;
              *((_DWORD *)NextShadow + 3) = *(_DWORD *)(v32 + 16);
              *(_DWORD *)(v32 + 16) = v34;
              if ((v30 & 1) != 0)
                break;
              v40 = v34;
            }
            v18 = *a6;
            while (1)
            {
              v35 = v20 - 1;
              if (v20 == 1)
                goto LABEL_21;
              v36 = *(_QWORD *)(v18 + 16 * (v20 - 2));
              --v20;
              if (v36)
              {
                v20 = v35;
                goto LABEL_9;
              }
            }
          }
        }
LABEL_21:
        if (v43[0] != v44)
          free(v43[0]);
        return;
      }
    }
  }
}

uint64_t *sub_1C5216940(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = ((_DWORD)a2 - 1) & a3;
  }
  v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2)
          v7 %= a2;
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

llvm::raw_ostream *llvm::rdf::operator<<(llvm::raw_ostream *this, _QWORD *a2)
{
  _BYTE *v4;
  uint64_t *v5;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  _DWORD *v9;
  _BYTE *v10;
  void (**v11)(void);
  uint64_t *v12;
  unsigned int *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  _BYTE *v16;
  _WORD *v17;
  uint64_t v19;
  unsigned int *v20[3];
  unsigned int **v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v4 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this, 123);
  }
  else
  {
    *((_QWORD *)this + 4) = v4 + 1;
    *v4 = 123;
  }
  v5 = *(uint64_t **)(*a2 + 16);
  if (v5)
  {
    while (1)
    {
      v6 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v6 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this, 32);
      }
      else
      {
        *((_QWORD *)this + 4) = v6 + 1;
        *v6 = 32;
      }
      v7 = *((_DWORD *)v5 + 4);
      v8 = *(_QWORD *)(a2[1] + 16);
      v9 = operator new(0x28uLL);
      *(_QWORD *)v9 = &off_1E814D010;
      v9[2] = v7;
      *((_QWORD *)v9 + 2) = v8;
      v9[6] = 0;
      *((_QWORD *)v9 + 4) = 0;
      v21 = (unsigned int **)v9;
      sub_1C52C9630((llvm::raw_ostream *)v9, this);
      v10 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v10 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this, 123);
      }
      else
      {
        *((_QWORD *)this + 4) = v10 + 1;
        *v10 = 123;
      }
      if (v21 == v20)
        break;
      if (v21)
      {
        v11 = (void (**)(void))(*v21 + 10);
LABEL_15:
        (*v11)();
      }
      v12 = (uint64_t *)v5[5];
      if (v12)
      {
        while (1)
        {
          v13 = (unsigned int *)a2[1];
          v20[0] = (unsigned int *)(v12 + 2);
          v20[1] = v13;
          v14 = llvm::rdf::operator<<((char **)this, v20);
          v19 = v12[3];
          llvm::rdf::operator<<(v14, &v19);
          v12 = (uint64_t *)*v12;
          if (!v12)
            break;
          v15 = (_BYTE *)*((_QWORD *)this + 4);
          if ((unint64_t)v15 >= *((_QWORD *)this + 3))
          {
            llvm::raw_ostream::write(this, 44);
          }
          else
          {
            *((_QWORD *)this + 4) = v15 + 1;
            *v15 = 44;
          }
        }
      }
      v16 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v16 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this, 125);
      }
      else
      {
        *((_QWORD *)this + 4) = v16 + 1;
        *v16 = 125;
      }
      v5 = (uint64_t *)*v5;
      if (!v5)
        goto LABEL_25;
    }
    v11 = (void (**)(void))(v20[0] + 8);
    goto LABEL_15;
  }
LABEL_25:
  v17 = (_WORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v17 > 1uLL)
  {
    *v17 = 32032;
    *((_QWORD *)this + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(this, " }", 2uLL);
  }
  return this;
}

uint64_t llvm::rdf::Liveness::getAllReachingDefs@<X0>(llvm::rdf::RefNode *this@<X3>, uint64_t a2@<X0>, int a3@<W1>, uint64_t a4@<X2>, unsigned int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, unsigned int *a9@<X8>)
{
  uint64_t v10;
  llvm::rdf::DataFlowGraph *v15;
  _WORD *Owner;
  int v17;
  char *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int v23;
  const llvm::rdf::DataFlowGraph *v24;
  unsigned int v25;
  llvm::rdf::RefNode *v26;
  int RegRef;
  uint64_t v28;
  llvm::rdf::DataFlowGraph *v29;
  _WORD *v30;
  int v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  const llvm::rdf::DataFlowGraph *v35;
  _BYTE *v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  int v42;
  int v43;
  uint64_t *v44;
  uint64_t **v45;
  uint64_t **v46;
  unsigned int v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t **v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t **i;
  uint64_t **v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  int v73;
  unsigned int v74;
  _QWORD *v75;
  _BYTE *v76;
  _QWORD *v77;
  int v78;
  BOOL v79;
  unsigned int v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t **v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t **j;
  uint64_t **v97;
  unint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  char *v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  size_t v120;
  char *v121;
  char *v122;
  int v123;
  char *v124;
  uint64_t v125;
  uint64_t *v126;
  int v127;
  unsigned int v128;
  _DWORD *v129;
  unsigned int v130;
  char *v131;
  int v132;
  const llvm::rdf::DataFlowGraph *v133;
  int v134;
  int v135;
  uint64_t v136;
  __int16 *v137;
  __int16 v138;
  unsigned int v139;
  uint64_t v140;
  unsigned int v141;
  int v142;
  uint64_t v143;
  _QWORD *k;
  unsigned int v145;
  _DWORD *v146;
  uint64_t v147;
  _QWORD *v148;
  llvm::rdf::RefNode **v149;
  llvm::rdf::RefNode **v150;
  char v151;
  llvm::rdf::RefNode *v152;
  llvm::rdf::RefNode *v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  llvm::rdf::RefNode **v157;
  llvm::rdf::RefNode **v158;
  uint64_t v159;
  __int16 v160;
  int v161;
  int v162;
  int v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  char *v170;
  char *v171;
  _WORD *v172;
  uint64_t *v173;
  char *v174;
  uint64_t v175;
  char *v176;
  _WORD *v177;
  int v179;
  uint64_t v180;
  char *v181;
  uint64_t *__p;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t **v190;
  uint64_t *v191;
  uint64_t v192;
  _QWORD v193[2];
  int v194;
  _QWORD v195[2];
  int v196;
  void *v197;
  unsigned int *v198;
  uint64_t v199;
  void *v200;
  uint64_t v201;
  _BYTE v202[64];
  void *__src;
  uint64_t v204;
  _BYTE v205[64];
  void *__dst;
  uint64_t v207;
  _DWORD v208[14];
  uint64_t v209;
  void *v210;
  uint64_t v211;
  _BYTE v212[128];
  _QWORD **v213;
  _QWORD *v214;
  uint64_t v215;
  uint64_t v216;

  v10 = 0;
  v216 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a9 = a9 + 4;
  *((_QWORD *)a9 + 1) = 0x400000000;
  v195[0] = 0;
  v195[1] = 0;
  v196 = 0;
  v198 = 0;
  v199 = 0;
  v197 = 0;
  v193[0] = 0;
  v193[1] = 0;
  v194 = 0;
  if ((*(_WORD *)this & 0x400) != 0)
    goto LABEL_272;
  LODWORD(v210) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 296)
                                        + 8 * ((a5 - 1) >> *(_DWORD *)(*(_QWORD *)a2 + 276)))
                            + 32 * (*(_DWORD *)(*(_QWORD *)a2 + 280) & (a5 - 1))
                            + 8);
  if ((_DWORD)v210)
    sub_1C4A0C7B8((uint64_t)v195, &v210);
  if (a6)
  {
    v15 = *(llvm::rdf::DataFlowGraph **)a2;
    Owner = (_WORD *)llvm::rdf::RefNode::getOwner(this, *(const llvm::rdf::DataFlowGraph **)a2);
    llvm::rdf::DataFlowGraph::getRelatedRefs(v15, this, Owner, v17, a5, (uint64_t)&v210);
    v18 = (char *)v210;
    if ((_DWORD)v211)
    {
      v19 = 16 * v211;
      do
      {
        LODWORD(__dst) = *(_DWORD *)(*(_QWORD *)v18 + 8);
        if ((_DWORD)__dst)
          sub_1C4A0C7B8((uint64_t)v195, &__dst);
        v18 += 16;
        v19 -= 16;
      }
      while (v19);
      v18 = (char *)v210;
    }
    if (v18 != v212)
      free(v18);
  }
  v20 = (unsigned int *)v197;
  v21 = v198;
  v180 = a8;
  if (v198 == v197)
  {
    v20 = v198;
  }
  else
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = *(const llvm::rdf::DataFlowGraph **)a2;
      v25 = v20[v22];
      if (v25)
        v26 = (llvm::rdf::RefNode *)(*(_QWORD *)(*((_QWORD *)v24 + 37) + 8 * ((v25 - 1) >> *((_DWORD *)v24 + 69)))
                                   + 32 * (*((_DWORD *)v24 + 70) & (v25 - 1)));
      else
        v26 = 0;
      if ((*(_WORD *)v26 & 0x80) == 0)
      {
        RegRef = llvm::rdf::RefNode::getRegRef(v26, v24);
        if ((*(_WORD *)v26 & 0x500) == 0x100 || (sub_1C5214FC4(RegRef, v28, a3, a4, *(_QWORD *)(a2 + 16)) & 1) == 0)
        {
          v29 = *(llvm::rdf::DataFlowGraph **)a2;
          v30 = (_WORD *)llvm::rdf::RefNode::getOwner(v26, *(const llvm::rdf::DataFlowGraph **)a2);
          llvm::rdf::DataFlowGraph::getRelatedRefs(v29, v26, v30, v31, v25, (uint64_t)&v210);
          v32 = (char *)v210;
          if ((_DWORD)v211)
          {
            v33 = 16 * v211;
            do
            {
              LODWORD(__dst) = *(_DWORD *)(*(_QWORD *)v32 + 8);
              if ((_DWORD)__dst)
                sub_1C4A0C7B8((uint64_t)v195, &__dst);
              v32 += 16;
              v33 -= 16;
            }
            while (v33);
            v32 = (char *)v210;
          }
          if (v32 != v212)
            free(v32);
        }
      }
      v20 = (unsigned int *)v197;
      v21 = v198;
      v22 = ++v23;
    }
    while (v23 < (unint64_t)(((char *)v198 - (_BYTE *)v197) >> 2));
  }
  v210 = v212;
  v211 = 0x2000000000;
  v215 = 0;
  v214 = 0;
  v213 = &v214;
  v191 = 0;
  v192 = 0;
  v189 = 0;
  v190 = &v191;
  v187 = (uint64_t *)&v188;
  v188 = 0;
  if (v20 != v21)
  {
    do
    {
      v34 = *v20;
      v35 = *(const llvm::rdf::DataFlowGraph **)a2;
      if ((_DWORD)v34)
        v36 = (_BYTE *)(*(_QWORD *)(*((_QWORD *)v35 + 37) + 8 * ((v34 - 1) >> *((_DWORD *)v35 + 69)))
                      + 32 * (*((_DWORD *)v35 + 70) & (v34 - 1)));
      else
        v36 = 0;
      __dst = v36;
      v207 = v34;
      if ((*v36 & 0x80) != 0
        || (v37 = *(_QWORD **)(a2 + 16),
            v38 = llvm::rdf::RefNode::getRegRef((llvm::rdf::RefNode *)v36, v35),
            sub_1C5213414(v37, a3, a4, v38, v39)))
      {
        sub_1C4879438((uint64_t)&v210, (unsigned int *)&v207);
        v40 = (uint64_t *)llvm::rdf::RefNode::getOwner((llvm::rdf::RefNode *)__dst, *(const llvm::rdf::DataFlowGraph **)a2);
        v42 = v41;
        v43 = v207;
        v44 = v191;
        v45 = &v191;
        v46 = &v191;
        if (v191)
        {
          while (1)
          {
            while (1)
            {
              v46 = (uint64_t **)v44;
              v47 = *((_DWORD *)v44 + 8);
              if (v47 <= v207)
                break;
              v44 = *v46;
              v45 = v46;
              if (!*v46)
                goto LABEL_45;
            }
            if (v47 >= v207)
              break;
            v44 = v46[1];
            if (!v44)
            {
              v45 = v46 + 1;
              goto LABEL_45;
            }
          }
        }
        else
        {
LABEL_45:
          v48 = (uint64_t *)v46;
          v46 = (uint64_t **)operator new(0x38uLL);
          *((_DWORD *)v46 + 8) = v43;
          *v46 = 0;
          v46[1] = 0;
          v46[5] = 0;
          v46[6] = 0;
          v46[2] = v48;
          *v45 = (uint64_t *)v46;
          v49 = (uint64_t *)v46;
          if (*v190)
          {
            v190 = (uint64_t **)*v190;
            v49 = *v45;
          }
          sub_1C4768E74(v191, v49);
          ++v192;
        }
        v46[5] = v40;
        *((_DWORD *)v46 + 12) = v42;
        if ((*(_WORD *)v40 & 0x1C) == 0x10)
          v50 = (uint64_t **)(v40[1] + 24);
        else
          v50 = (uint64_t **)(llvm::rdf::InstrNode::getOwner((llvm::rdf::InstrNode *)v40, *(const llvm::rdf::DataFlowGraph **)a2)+ 8);
        v51 = *v50;
        v52 = v188;
        for (i = &v188; ; v52 = *i)
        {
          v54 = i;
          if (!v52)
            break;
          while (1)
          {
            i = (uint64_t **)v52;
            v55 = v52[4];
            if (v55 > (unint64_t)v51)
              break;
            if (v55 >= (unint64_t)v51)
              goto LABEL_61;
            v52 = i[1];
            if (!v52)
            {
              v54 = i + 1;
              goto LABEL_58;
            }
          }
        }
LABEL_58:
        v56 = (uint64_t *)i;
        i = (uint64_t **)operator new(0xB8uLL);
        i[4] = v51;
        i[5] = (uint64_t *)(i + 7);
        i[6] = (uint64_t *)0x2000000000;
        *i = 0;
        i[1] = 0;
        i[2] = v56;
        *v54 = (uint64_t *)i;
        v57 = (uint64_t *)i;
        if (*v187)
        {
          v187 = (uint64_t *)*v187;
          v57 = *v54;
        }
        sub_1C4768E74(v188, v57);
        ++v189;
LABEL_61:
        v58 = *((unsigned int *)i + 12);
        if (v58 >= *((unsigned int *)i + 13))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(i + 5), (uint64_t)(i + 7), v58 + 1, 4);
          v58 = *((unsigned int *)i + 12);
        }
        *((_DWORD *)i[5] + v58) = v42;
        ++*((_DWORD *)i + 12);
      }
      ++v20;
    }
    while (v20 != v21);
    v59 = v187;
    if (v187 != (uint64_t *)&v188)
    {
      __p = 0;
      v60 = 0;
      v61 = 0;
      while (1)
      {
        if (v60 >= v61)
        {
          v62 = v60 - __p;
          v63 = v62 + 1;
          if ((unint64_t)(v62 + 1) >> 61)
LABEL_275:
            abort();
          if (((char *)v61 - (char *)__p) >> 2 > v63)
            v63 = ((char *)v61 - (char *)__p) >> 2;
          v64 = (unint64_t)((char *)v61 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v63;
          if (v64)
          {
            if (v64 >> 61)
LABEL_276:
              sub_1C4764EE4();
            v65 = (char *)operator new(8 * v64);
          }
          else
          {
            v65 = 0;
          }
          v66 = (uint64_t *)&v65[8 * v62];
          *v66 = v59[4];
          v67 = v66 + 1;
          while (v60 != __p)
          {
            v68 = *--v60;
            *--v66 = v68;
          }
          v61 = (uint64_t *)&v65[8 * v64];
          if (__p)
            operator delete(__p);
          __p = v66;
          v60 = v67;
        }
        else
        {
          *v60++ = v59[4];
        }
        v69 = *((unsigned int *)v59 + 12);
        if (v69 >= 3)
        {
          v70 = v59[4];
          v71 = (_BYTE *)(v70 + 48);
          v72 = *(_BYTE **)(v70 + 56);
          if (v72 != (_BYTE *)(v70 + 48))
            break;
        }
LABEL_111:
        v83 = v59[5];
        __dst = (void *)a2;
        v207 = (uint64_t)v193;
        v84 = 126 - 2 * __clz(v69);
        if (v69)
          v85 = v84;
        else
          v85 = 0;
        sub_1C521ED50(v83, (unsigned int *)(v83 + 4 * v69), (uint64_t)&__dst, v85, 1);
        v86 = (uint64_t *)v59[1];
        if (v86)
        {
          do
          {
            v87 = (uint64_t **)v86;
            v86 = (uint64_t *)*v86;
          }
          while (v86);
        }
        else
        {
          do
          {
            v87 = (uint64_t **)v59[2];
            v79 = *v87 == v59;
            v59 = (uint64_t *)v87;
          }
          while (!v79);
        }
        v59 = (uint64_t *)v87;
        if (v87 == &v188)
          goto LABEL_122;
      }
      v73 = 0;
      while (1)
      {
        ++v73;
        __dst = v72;
        LODWORD(v207) = v73;
        if (v194)
        {
          v74 = (v194 - 1) & ((v72 >> 4) ^ (v72 >> 9));
          v75 = (_QWORD *)(v193[0] + 16 * v74);
          v76 = (_BYTE *)*v75;
          if (v72 == (_BYTE *)*v75)
          {
LABEL_98:
            if (!v72)
              goto LABEL_107;
            goto LABEL_104;
          }
          v77 = 0;
          v78 = 1;
          while (v76 != (_BYTE *)-4096)
          {
            if (v77)
              v79 = 0;
            else
              v79 = v76 == (_BYTE *)-8192;
            if (v79)
              v77 = v75;
            v80 = v74 + v78++;
            v74 = v80 & (v194 - 1);
            v75 = (_QWORD *)(v193[0] + 16 * v74);
            v76 = (_BYTE *)*v75;
            if (v72 == (_BYTE *)*v75)
              goto LABEL_98;
          }
          if (v77)
            v81 = v77;
          else
            v81 = v75;
        }
        else
        {
          v81 = 0;
        }
        v82 = sub_1C48BE074((uint64_t)v193, (uint64_t)&__dst, (uint64_t *)&__dst, v81);
        *v82 = __dst;
        *((_DWORD *)v82 + 2) = v207;
        if (!v72)
          goto LABEL_107;
LABEL_104:
        if ((*v72 & 4) == 0)
        {
LABEL_107:
          while ((*((_WORD *)v72 + 22) & 8) != 0)
            v72 = (_BYTE *)*((_QWORD *)v72 + 1);
        }
        v72 = (_BYTE *)*((_QWORD *)v72 + 1);
        if (v72 == v71)
        {
          v69 = *((unsigned int *)v59 + 12);
          goto LABEL_111;
        }
      }
    }
  }
  v60 = 0;
  __p = 0;
LABEL_122:
  v88 = 126 - 2 * __clz(v60 - __p);
  __dst = (void *)a2;
  if (v60 == __p)
    v89 = 0;
  else
    v89 = v88;
  sub_1C521FC00((uint64_t)__p, v60, (uint64_t)&__dst, v89, 1);
  if (v60 != __p)
  {
    v90 = 0;
    v91 = 0;
    v92 = 0;
    while (1)
    {
      v94 = (uint64_t *)*--v60;
      v93 = v94;
      v95 = v188;
      for (j = &v188; ; v95 = *j)
      {
        v97 = j;
        if (!v95)
          break;
        while (1)
        {
          j = (uint64_t **)v95;
          v98 = v95[4];
          if (v98 > (unint64_t)v93)
            break;
          if (v98 >= (unint64_t)v93)
            goto LABEL_137;
          v95 = j[1];
          if (!v95)
          {
            v97 = j + 1;
            goto LABEL_134;
          }
        }
      }
LABEL_134:
      v99 = (uint64_t *)j;
      j = (uint64_t **)operator new(0xB8uLL);
      j[4] = v93;
      j[5] = (uint64_t *)(j + 7);
      j[6] = (uint64_t *)0x2000000000;
      *j = 0;
      j[1] = 0;
      j[2] = v99;
      *v97 = (uint64_t *)j;
      v100 = (uint64_t *)j;
      if (*v187)
      {
        v187 = (uint64_t *)*v187;
        v100 = *v97;
      }
      sub_1C4768E74(v188, v100);
      ++v189;
LABEL_137:
      v101 = *((unsigned int *)j + 12);
      if ((_DWORD)v101)
      {
        v102 = j[5];
        v103 = (v91 - v90) >> 2;
        v104 = &v90[(v91 - v90) & 0xFFFFFFFFFFFFFFFCLL];
        if (v101 > (v92 - v91) >> 2)
        {
          v105 = v103 + v101;
          if ((unint64_t)(v103 + v101) >> 62)
            goto LABEL_275;
          if ((v92 - v90) >> 1 > v105)
            v105 = (v92 - v90) >> 1;
          if ((unint64_t)(v92 - v90) >= 0x7FFFFFFFFFFFFFFCLL)
            v106 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v106 = v105;
          if (v106)
          {
            if (v106 >> 62)
              goto LABEL_276;
            v107 = (char *)operator new(4 * v106);
            v103 = (v91 - v90) >> 2;
          }
          else
          {
            v107 = 0;
          }
          v115 = &v107[4 * v103];
          v116 = &v115[4 * v101];
          v117 = 4 * v101;
          v118 = (char *)v102 - 4;
          v108 = v115;
          do
          {
            *(_DWORD *)v115 = *(_DWORD *)&v118[v117];
            v115 += 4;
            v117 -= 4;
          }
          while (v117);
          if (v90 != v91)
          {
            v119 = 4 * v103;
            do
            {
              *(_DWORD *)&v107[v119 - 4] = *(_DWORD *)&v90[v119 - 4];
              v119 -= 4;
            }
            while (v119);
            v108 = v107;
          }
          v120 = v91 - v104;
          if (v120)
            memmove(v116, v104, v120);
          v92 = &v107[4 * v106];
          v91 = &v116[v120];
          if (v90)
            operator delete(v90);
          goto LABEL_180;
        }
        v109 = (uint64_t *)((char *)v102 + 4 * v101);
        v110 = (v91 - v104) >> 2;
        if (v110 >= v101)
        {
          v113 = v91;
        }
        else
        {
          v111 = (uint64_t *)((char *)v109 - 4 * v110);
          if (v111 == v102)
          {
            v113 = v91;
          }
          else
          {
            v112 = 4 * v101 - 4 * v110;
            v113 = v91;
            v114 = v91;
            do
            {
              *(_DWORD *)v114 = *(_DWORD *)((char *)v102 + v112 - 4);
              v114 += 4;
              v113 += 4;
              v112 -= 4;
            }
            while (v112);
          }
          if (v91 - v104 < 1)
          {
            v108 = v90;
            v91 = v113;
            goto LABEL_180;
          }
          v102 = v111;
        }
        v121 = &v113[-4 * v101];
        v122 = v113;
        while (v121 < v91)
        {
          v123 = *(_DWORD *)v121;
          v121 += 4;
          *(_DWORD *)v122 = v123;
          v122 += 4;
        }
        v124 = &v104[4 * v101];
        if (v113 != v124)
        {
          memmove(&v113[-4 * ((v113 - v124) >> 2)], &v90[(v91 - v90) & 0xFFFFFFFFFFFFFFFCLL], v113 - v124);
          v103 = (v91 - v90) >> 2;
        }
        if (v102 != v109)
        {
          v125 = 4 * v103;
          v126 = __p;
          do
          {
            v127 = *((_DWORD *)v109 - 1);
            v109 = (uint64_t *)((char *)v109 - 4);
            *(_DWORD *)&v90[v125] = v127;
            v125 += 4;
          }
          while (v109 != v102);
          v108 = v90;
          v91 = v122;
          goto LABEL_181;
        }
        v108 = v90;
        v91 = v122;
      }
      else
      {
        v108 = v90;
      }
LABEL_180:
      v126 = __p;
LABEL_181:
      v90 = v108;
      if (v60 == v126)
        goto LABEL_184;
    }
  }
  v108 = 0;
  v91 = 0;
LABEL_184:
  __dst = v208;
  v207 = 0x600000000;
  if (&__dst != (void **)v180)
  {
    v128 = *(_DWORD *)(v180 + 8);
    if (v128)
    {
      if (v128 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v208, *(unsigned int *)(v180 + 8), 8);
        v130 = *(_DWORD *)(v180 + 8);
        if (!v130)
        {
LABEL_191:
          LODWORD(v207) = v128;
          goto LABEL_192;
        }
        v129 = __dst;
      }
      else
      {
        v129 = v208;
        v130 = *(_DWORD *)(v180 + 8);
      }
      memcpy(v129, *(const void **)v180, 8 * v130);
      goto LABEL_191;
    }
  }
LABEL_192:
  v208[12] = *(_DWORD *)(v180 + 64);
  v209 = *(_QWORD *)(v180 + 72);
  v181 = v108;
  if (v108 != v91)
  {
    v131 = v108;
    do
    {
      v132 = *(_DWORD *)v131;
      if ((a7 & 1) == 0 && (llvm::rdf::RegisterAggr::hasCoverOf((uint64_t)&__dst, a3, a4) & 1) != 0)
        break;
      v133 = *(const llvm::rdf::DataFlowGraph **)a2;
      v134 = *(_DWORD *)(*(_QWORD *)a2 + 276);
      v135 = *(_DWORD *)(*(_QWORD *)a2 + 280);
      v136 = *(_QWORD *)(*(_QWORD *)a2 + 296);
      v137 = (__int16 *)(*(_QWORD *)(v136 + 8 * ((v132 - 1) >> v134))
                       + 32 * (v135 & (v132 - 1)));
      v138 = *v137;
      __src = v205;
      v204 = 0x400000000;
      v200 = v202;
      v201 = 0x400000000;
      v139 = *((_DWORD *)v137 + 4);
      if (v139)
      {
        v140 = *(_QWORD *)(v136 + 8 * ((v139 - 1) >> v134)) + 32 * (v135 & (v139 - 1));
        if (v137 != (__int16 *)v140)
        {
          v141 = 0;
          v142 = v138 & 0x1F;
          do
          {
            if ((*(_WORD *)v140 & 0x1C) == 4)
            {
              v143 = v139;
              if (v215)
              {
                for (k = v214; k; k = (_QWORD *)*k)
                {
                  v145 = *((_DWORD *)k + 7);
                  if (v145 <= v143)
                  {
                    if (v145 >= v143)
                      goto LABEL_213;
                    ++k;
                  }
                }
              }
              else if ((_DWORD)v211)
              {
                v146 = v210;
                v147 = 4 * v211;
                while (*v146 != (_DWORD)v143)
                {
                  ++v146;
                  v147 -= 4;
                  if (!v147)
                    goto LABEL_216;
                }
                if (v147)
                {
LABEL_213:
                  if (v141 >= HIDWORD(v201))
                  {
                    v179 = v142;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v200, (uint64_t)v202, v141 + 1, 16);
                    v142 = v179;
                    v141 = v201;
                  }
                  v148 = (char *)v200 + 16 * v141;
                  *v148 = v140;
                  v148[1] = v143;
                  v141 = v201 + 1;
                  LODWORD(v201) = v201 + 1;
                }
              }
            }
LABEL_216:
            v139 = *(_DWORD *)(v140 + 4);
            if (v139)
              v140 = *(_QWORD *)(*((_QWORD *)v133 + 37) + 8 * ((v139 - 1) >> *((_DWORD *)v133 + 69)))
                   + 32 * (*((_DWORD *)v133 + 70) & (v139 - 1));
            else
              v140 = 0;
          }
          while ((__int16 *)v140 != v137);
          v149 = (llvm::rdf::RefNode **)v200;
          if (v141)
          {
            v150 = (llvm::rdf::RefNode **)((char *)v200 + 16 * v141);
            if (v142 == 13)
              v151 = 1;
            else
              v151 = a7;
            do
            {
              v152 = *v149;
              v153 = (llvm::rdf::RefNode *)*((unsigned int *)v149 + 2);
              v154 = llvm::rdf::RefNode::getRegRef(*v149, *(const llvm::rdf::DataFlowGraph **)a2);
              if ((v151 & 1) != 0 || (llvm::rdf::RegisterAggr::hasCoverOf((uint64_t)&__dst, v154, v155) & 1) == 0)
              {
                v156 = v204;
                if (v204 >= (unint64_t)HIDWORD(v204))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v205, v204 + 1, 16);
                  v156 = v204;
                }
                v157 = (llvm::rdf::RefNode **)((char *)__src + 16 * v156);
                *v157 = v152;
                v157[1] = v153;
                LODWORD(v204) = v204 + 1;
              }
              v149 += 2;
            }
            while (v149 != v150);
            v149 = (llvm::rdf::RefNode **)v200;
          }
          if (v149 != (llvm::rdf::RefNode **)v202)
            free(v149);
        }
      }
      sub_1C5220B24(a9, *(_QWORD *)a9 + 16 * a9[2], (char *)__src, (char *)__src + 16 * v204);
      v158 = (llvm::rdf::RefNode **)__src;
      if ((_DWORD)v204)
      {
        v159 = 16 * v204;
        do
        {
          v160 = *(_WORD *)*v158;
          if ((v160 & 0x80) != 0)
            v161 = a7 ^ 1;
          else
            v161 = 1;
          v162 = v160 & 0x100;
          if (v161 == 1 && v162 == 0)
          {
            v164 = llvm::rdf::RefNode::getRegRef(*v158, *(const llvm::rdf::DataFlowGraph **)a2);
            llvm::rdf::RegisterAggr::insert((uint64_t)&__dst, v164, v165);
          }
          v158 += 2;
          v159 -= 16;
        }
        while (v159);
        v158 = (llvm::rdf::RefNode **)__src;
      }
      if (v158 != (llvm::rdf::RefNode **)v205)
        free(v158);
      v131 += 4;
    }
    while (v131 != v91);
  }
  v166 = *(char **)a9;
  v167 = a9[2];
  if ((_DWORD)v167)
  {
    v168 = &v166[16 * v167];
    v169 = 16 * v167 - 16;
    v170 = *(char **)a9;
    v171 = *(char **)a9;
    while (1)
    {
      v172 = *(_WORD **)v171;
      v171 += 16;
      if ((*v172 & 0x800) != 0)
        break;
      v169 -= 16;
      v170 = v171;
      if (v171 == v168)
      {
        v173 = __p;
LABEL_262:
        v174 = v181;
        goto LABEL_263;
      }
    }
    v173 = __p;
    if (v171 == v168)
    {
      v168 = v170;
      goto LABEL_262;
    }
    v175 = 16;
    v168 = v170;
    v174 = v181;
    do
    {
      v176 = &v170[v175];
      if ((**(_WORD **)&v170[v175] & 0x800) == 0)
      {
        v177 = *(_WORD **)v176;
        *((_DWORD *)v168 + 2) = *((_DWORD *)v176 + 2);
        *(_QWORD *)v168 = v177;
        v168 += 16;
      }
      v175 += 16;
      v169 -= 16;
    }
    while (v169);
    v166 = *(char **)a9;
  }
  else
  {
    v168 = *(char **)a9;
    v174 = v181;
    v173 = __p;
  }
LABEL_263:
  a9[2] = (unint64_t)(v168 - v166) >> 4;
  if (__dst != v208)
    free(__dst);
  if (v174)
    operator delete(v174);
  if (v173)
    operator delete(v173);
  sub_1C521EB58(v188);
  sub_1C49F3440(v191);
  sub_1C47655E8((uint64_t)&v213, v214);
  if (v210 != v212)
    free(v210);
  v10 = v193[0];
LABEL_272:
  MEMORY[0x1CAA32FB4](v10, 8);
  if (v197)
  {
    v198 = (unsigned int *)v197;
    operator delete(v197);
  }
  return MEMORY[0x1CAA32FB4](v195[0], 4);
}

void llvm::rdf::Liveness::getAllReachingDefsRec(const llvm::rdf::DataFlowGraph **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, llvm::rdf::RefNode *a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X5>, _QWORD *a7@<X6>, uint64_t a8@<X8>)
{
  llvm::rdf::Liveness::getAllReachingDefsRecImpl(a1, a2, a3, a4, a5, a6, a7, 0, a8, dword_1ED7FDFF8);
}

void llvm::rdf::Liveness::getAllReachingDefsRecImpl(const llvm::rdf::DataFlowGraph **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, llvm::rdf::RefNode *a4@<X3>, unsigned int a5@<W4>, uint64_t a6@<X5>, _QWORD *a7@<X6>, unsigned int a8@<W7>, uint64_t a9@<X8>, unsigned int a10)
{
  const llvm::rdf::DataFlowGraph *v17;
  int v18;
  _QWORD *v19;
  llvm::rdf::RefNode *v20;
  int RegRef;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;
  __int128 *v26;
  uint64_t v27;
  __int128 v28;
  llvm::rdf::RefNode **v29;
  llvm::rdf::RefNode **v30;
  unsigned int v31;
  uint64_t *i;
  unsigned int v33;
  uint64_t v34;
  const llvm::rdf::DataFlowGraph *v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  _QWORD *v39;
  char *v40;
  char *v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int *v44;
  int v45;
  llvm::rdf::RefNode **v46;
  unsigned int v47;
  unsigned int *v50;
  _QWORD *v51[2];
  char v52;
  uint64_t Owner;
  unsigned int v54;
  llvm::rdf::RefNode *v55;
  unsigned int v56;
  uint64_t *v57;
  _QWORD *v58;
  uint64_t *v59[3];
  void *v60[2];
  _BYTE v61[64];
  void *v62;
  unsigned int v63;
  uint64_t v64;
  void *v65[2];
  _DWORD v66[14];
  const llvm::rdf::DataFlowGraph *v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if (a8 <= a10)
  {
    v17 = a1[2];
    v18 = *(_DWORD *)(*(_QWORD *)v17 + 44);
    v65[0] = v66;
    v65[1] = (void *)0x600000000;
    sub_1C4765AA4((char *)v65, (v18 + 63) >> 6, 0);
    v66[12] = v18;
    v67 = v17;
    v19 = (_QWORD *)*a7;
    if ((_QWORD *)*a7 != a7 + 1)
    {
      do
      {
        v20 = (llvm::rdf::RefNode *)(*(_QWORD *)(*((_QWORD *)*a1 + 37)
                                               + 8
                                               * ((*((_DWORD *)v19 + 7) - 1) >> *((_DWORD *)*a1 + 69)))
                                   + 32 * (*((_DWORD *)*a1 + 70) & (*((_DWORD *)v19 + 7) - 1)));
        if ((*(_WORD *)v20 & 0x80) == 0)
        {
          RegRef = llvm::rdf::RefNode::getRegRef(v20, *a1);
          llvm::rdf::RegisterAggr::insert((uint64_t)v65, RegRef, v22);
        }
        v23 = (_QWORD *)v19[1];
        if (v23)
        {
          do
          {
            v24 = v23;
            v23 = (_QWORD *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            v24 = (_QWORD *)v19[2];
            v25 = *v24 == (_QWORD)v19;
            v19 = v24;
          }
          while (!v25);
        }
        v19 = v24;
      }
      while (v24 != a7 + 1);
    }
    llvm::rdf::Liveness::getAllReachingDefs(a4, (uint64_t)a1, a2, a3, a5, 0, 1, (uint64_t)v65, (unsigned int *)&v62);
    if (v63)
    {
      sub_1C5220D38((uint64_t)v59, a7);
      if (v63)
      {
        v26 = (__int128 *)v62;
        v27 = 16 * v63;
        do
        {
          v28 = *v26++;
          *(_OWORD *)v60 = v28;
          sub_1C4778ED8(v59, (unsigned int *)&v60[1], &v60[1]);
          v27 -= 16;
        }
        while (v27);
      }
      sub_1C5220D38((uint64_t)&v57, a7);
      if (v63)
      {
        v29 = (llvm::rdf::RefNode **)v62;
        v47 = a8 + 1;
        v30 = (llvm::rdf::RefNode **)((char *)v62 + 16 * v63);
        v46 = v30;
        while (1)
        {
          v55 = *v29;
          v56 = *((_DWORD *)v29 + 2);
          sub_1C4778ED8(&v57, &v56, &v56);
          if ((*(_WORD *)v55 & 0x80) != 0)
          {
            Owner = llvm::rdf::RefNode::getOwner(v55, *a1);
            v54 = v31;
            for (i = *(uint64_t **)(a6 + 8); i; i = (uint64_t *)*i)
            {
              v33 = *((_DWORD *)i + 7);
              if (v33 <= v31)
              {
                if (v33 >= v31)
                  goto LABEL_52;
                ++i;
              }
            }
            sub_1C4778ED8((uint64_t **)a6, &v54, &v54);
            v34 = Owner;
            v35 = *a1;
            v60[0] = v61;
            v60[1] = (void *)0x400000000;
            v36 = *(_DWORD *)(Owner + 16);
            if (v36)
            {
              v37 = *(_QWORD *)(*((_QWORD *)v35 + 37) + 8 * ((v36 - 1) >> *((_DWORD *)v35 + 69)))
                  + 32 * (*((_DWORD *)v35 + 70) & (v36 - 1));
              if (Owner == v37)
                goto LABEL_46;
              v38 = 0;
              do
              {
                if ((*(_WORD *)v37 & 0x1F) == 0xA)
                {
                  if (v38 >= HIDWORD(v60[1]))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v60, (uint64_t)v61, v38 + 1, 16);
                    v38 = v60[1];
                  }
                  v39 = (char *)v60[0] + 16 * v38;
                  *v39 = v37;
                  v39[1] = v36;
                  v38 = ++LODWORD(v60[1]);
                }
                v36 = *(_DWORD *)(v37 + 4);
                if (v36)
                  v37 = *(_QWORD *)(*((_QWORD *)v35 + 37) + 8 * ((v36 - 1) >> *((_DWORD *)v35 + 69)))
                      + 32 * (*((_DWORD *)v35 + 70) & (v36 - 1));
                else
                  v37 = 0;
              }
              while (v34 != v37);
              if (!v38)
              {
LABEL_46:
                v45 = 1;
              }
              else
              {
                v40 = (char *)v60[0];
                v41 = (char *)v60[0] + 16 * v38;
                while (1)
                {
                  llvm::rdf::Liveness::getAllReachingDefsRecImpl(&v50, a1, a2, a3, *(_QWORD *)v40, *((unsigned int *)v40 + 2), a6, v59, v47, a10);
                  if (!v52)
                    break;
                  v42 = v50;
                  if (v50 != (unsigned int *)v51)
                  {
                    do
                    {
                      sub_1C5220DCC(&v57, (uint64_t *)&v58, v42 + 7, v42 + 7);
                      v43 = (unsigned int *)*((_QWORD *)v42 + 1);
                      if (v43)
                      {
                        do
                        {
                          v44 = v43;
                          v43 = *(unsigned int **)v43;
                        }
                        while (v43);
                      }
                      else
                      {
                        do
                        {
                          v44 = (unsigned int *)*((_QWORD *)v42 + 2);
                          v25 = *(_QWORD *)v44 == (_QWORD)v42;
                          v42 = v44;
                        }
                        while (!v25);
                      }
                      v42 = v44;
                    }
                    while (v44 != (unsigned int *)v51);
                  }
                  sub_1C47655E8((uint64_t)&v50, v51[0]);
                  v40 += 16;
                  if (v40 == v41)
                    goto LABEL_46;
                }
                *(_BYTE *)(sub_1C5220D38(a9, &v50) + 24) = 0;
                sub_1C47655E8((uint64_t)&v50, v51[0]);
                v45 = 0;
              }
              v30 = v46;
            }
            else
            {
              v45 = 1;
            }
            if (v60[0] != v61)
              free(v60[0]);
            if (!v45)
              break;
          }
LABEL_52:
          v29 += 2;
          if (v29 == v30)
            goto LABEL_55;
        }
      }
      else
      {
LABEL_55:
        *(_BYTE *)(sub_1C5220D38(a9, &v57) + 24) = 1;
      }
      sub_1C47655E8((uint64_t)&v57, v58);
      sub_1C47655E8((uint64_t)v59, v59[1]);
    }
    else
    {
      sub_1C5220D38(a9, a7);
      *(_BYTE *)(a9 + 24) = 1;
    }
    if (v62 != &v64)
      free(v62);
    if (v65[0] != v66)
      free(v65[0]);
  }
  else
  {
    *(_QWORD *)(a9 + 16) = 0;
    *(_QWORD *)(a9 + 8) = 0;
    *(_QWORD *)a9 = a9 + 8;
    *(_BYTE *)(a9 + 24) = 0;
  }
}

llvm::rdf::RefNode *llvm::rdf::Liveness::getNearestAliasedRef(unint64_t *a1, int a2, uint64_t a3, llvm::rdf::InstrNode *this, int a5)
{
  unint64_t v7;
  _DWORD *Owner;
  char *v9;
  uint64_t v10;
  int v11;
  char *v12;
  uint64_t v13;
  char *i;
  _DWORD *v15;
  unsigned int *v16;
  int v17;
  llvm::rdf::RefNode *v18;
  int v19;
  unsigned int *v20;
  llvm::rdf::RefNode *v21;
  uint64_t v22;
  _QWORD *v23;
  int RegRef;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  const llvm::rdf::DataFlowGraph *v28;
  _QWORD *v29;
  void *v30;
  unsigned int v31;
  uint64_t v32;
  _DWORD *v34;
  char *v35;
  char *v36;
  llvm::rdf::RefNode *v37;
  void *v40;
  uint64_t v41;
  _BYTE v42[64];
  void *__dst;
  uint64_t v44;
  _QWORD v45[10];

  v45[8] = *MEMORY[0x1E0C80C00];
  v7 = *a1;
  Owner = (_DWORD *)llvm::rdf::InstrNode::getOwner(this, (const llvm::rdf::DataFlowGraph *)*a1);
  llvm::rdf::CodeNode::members(Owner, (const llvm::rdf::DataFlowGraph *)v7, (uint64_t)&__dst);
  v9 = (char *)__dst;
  v10 = 16 * v44;
  v34 = Owner;
  while (v10)
  {
    v11 = *(_DWORD *)((char *)__dst + v10 - 8);
    v10 -= 16;
    if (v11 == a5)
    {
      v12 = (char *)__dst + v10 + 16;
      goto LABEL_6;
    }
  }
  v12 = (char *)__dst;
LABEL_6:
  if (v12 == __dst)
    v13 = 0;
  else
    v13 = -1;
  for (i = &v12[16 * v13]; i == v9; i = (char *)__dst + 16 * v31)
  {
LABEL_26:
    v26 = sub_1C49FA70C(a1[3], *((_QWORD *)v34 + 1));
    if (!v26
      || (v27 = *(void ***)(v26 + 8)) == 0
      || (v28 = (const llvm::rdf::DataFlowGraph *)*a1,
          v40 = *v27,
          v29 = sub_1C5214F78((uint64_t)v28 + 416, (unint64_t *)&v40),
          !*((_DWORD *)v29 + 2)))
    {
      v18 = 0;
      goto LABEL_49;
    }
    v34 = (_DWORD *)*v29;
    llvm::rdf::CodeNode::members((_DWORD *)*v29, (const llvm::rdf::DataFlowGraph *)*a1, (uint64_t)&v40);
    v30 = v40;
    if (v40 == v42)
    {
      v31 = v41;
      v32 = v44;
      if (v44 >= v41)
      {
        if ((_DWORD)v41)
          memmove(__dst, v42, 16 * v41 - 4);
      }
      else
      {
        if (HIDWORD(v44) < v41)
        {
          LODWORD(v44) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v45, v41, 16);
          goto LABEL_40;
        }
        if ((_DWORD)v44)
          memmove(__dst, v42, 16 * v44 - 4);
        else
LABEL_40:
          v32 = 0;
        if (v32 != v41)
          memcpy((char *)__dst + 16 * v32, (char *)v40 + 16 * v32, 16 * v41 - 16 * v32);
      }
      LODWORD(v44) = v31;
      goto LABEL_44;
    }
    if (__dst != v45)
    {
      free(__dst);
      v30 = v40;
    }
    __dst = v30;
    v44 = v41;
    v40 = v42;
    HIDWORD(v41) = 0;
    v31 = v44;
LABEL_44:
    LODWORD(v41) = 0;
    if (v40 != v42)
    {
      free(v40);
      v31 = v44;
    }
    v9 = (char *)__dst;
  }
  v35 = v9;
  while (1)
  {
    v15 = (_DWORD *)*((_QWORD *)i - 2);
    i -= 16;
    llvm::rdf::CodeNode::members(v15, (const llvm::rdf::DataFlowGraph *)*a1, (uint64_t)&v40);
    v16 = (unsigned int *)v40;
    if ((_DWORD)v41)
      break;
LABEL_23:
    if (v16 != (unsigned int *)v42)
      free(v16);
    if (i == v9)
      goto LABEL_26;
  }
  v36 = i;
  v37 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = (unsigned int *)((char *)v40 + 16 * v41);
  do
  {
    v21 = *(llvm::rdf::RefNode **)v16;
    v22 = v16[2];
    v7 = v7 & 0xFFFFFFFF00000000 | v22;
    v23 = (_QWORD *)a1[2];
    RegRef = llvm::rdf::RefNode::getRegRef(*(llvm::rdf::RefNode **)v16, (const llvm::rdf::DataFlowGraph *)*a1);
    if (sub_1C5213414(v23, RegRef, v25, a2, a3))
    {
      if ((*(_WORD *)v21 & 0x1F) == 6)
      {
        v19 = v22;
        v18 = v21;
        if ((*(_WORD *)v21 & 0x40) == 0)
        {
          v18 = v21;
          goto LABEL_47;
        }
      }
      else
      {
        v17 = v22;
        v37 = v21;
      }
    }
    v16 += 4;
  }
  while (v16 != v20);
  if (!v19)
  {
    if (!v17)
    {
      v16 = (unsigned int *)v40;
      v9 = v35;
      i = v36;
      goto LABEL_23;
    }
    v18 = v37;
  }
LABEL_47:
  if (v40 != v42)
    free(v40);
LABEL_49:
  if (__dst != v45)
    free(__dst);
  return v18;
}

void llvm::rdf::Liveness::getAllReachedUses(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  unsigned int i;
  llvm::rdf::RefNode *v11;
  int RegRef;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  llvm::rdf::RefNode *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int *v28;
  BOOL v29;
  uint64_t v30;
  unsigned int *v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int *v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int v39;
  void *__dst;
  uint64_t v41;
  _QWORD v42[6];
  int v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)a6 = a6 + 8;
  if ((llvm::rdf::RegisterAggr::hasCoverOf(a5, a2, a3) & 1) == 0)
  {
    if ((*(_WORD *)a4 & 0x800) != 0)
    {
      v39 = 0;
    }
    else
    {
      for (i = *(_DWORD *)(a4 + 20); ; i = *((_DWORD *)v11 + 3))
      {
        v39 = i;
        if (!i)
          break;
        v11 = (llvm::rdf::RefNode *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 296)
                                               + 8 * ((i - 1) >> *(_DWORD *)(*(_QWORD *)a1 + 276)))
                                   + 32 * (*(_DWORD *)(*(_QWORD *)a1 + 280) & (i - 1)));
        if ((*(_WORD *)v11 & 0x400) == 0)
        {
          RegRef = llvm::rdf::RefNode::getRegRef(v11, *(const llvm::rdf::DataFlowGraph **)a1);
          v14 = v13;
          if (sub_1C5213414(*(_QWORD **)(a1 + 16), a2, a3, RegRef, v13))
          {
            if ((llvm::rdf::RegisterAggr::hasCoverOf(a5, RegRef, v14) & 1) == 0)
              sub_1C4778ED8((uint64_t **)a6, &v39, &v39);
          }
        }
      }
    }
    v15 = *(_DWORD *)(a4 + 16);
    if (v15)
    {
      while (1)
      {
        v16 = v15;
        v17 = (llvm::rdf::RefNode *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 296)
                                               + 8 * ((v15 - 1) >> *(_DWORD *)(*(_QWORD *)a1 + 276)))
                                   + 32 * (*(_DWORD *)(*(_QWORD *)a1 + 280) & (v15 - 1)));
        v15 = *((_DWORD *)v17 + 3);
        v18 = llvm::rdf::RefNode::getRegRef(v17, *(const llvm::rdf::DataFlowGraph **)a1);
        v20 = v19;
        if ((llvm::rdf::RegisterAggr::hasCoverOf(a5, v18, v19) & 1) == 0)
        {
          if (sub_1C5213414(*(_QWORD **)(a1 + 16), a2, a3, v18, v20))
            break;
        }
LABEL_39:
        if (!v15)
          return;
      }
      v37 = 0;
      v38 = 0;
      v36 = (unsigned int *)&v37;
      if ((*(_WORD *)v17 & 0x500) == 0x100)
      {
        llvm::rdf::Liveness::getAllReachedUses(&__dst, a1, a2, a3, v17, v16, a5);
        sub_1C47655E8((uint64_t)&v36, v37);
        v21 = (_QWORD *)v41;
        v36 = (unsigned int *)__dst;
        v37 = (_QWORD *)v41;
        v38 = v42[0];
        if (v42[0])
        {
          *(_QWORD *)(v41 + 16) = &v37;
          __dst = &v41;
          v41 = 0;
          v42[0] = 0;
          v21 = 0;
        }
        else
        {
          v36 = (unsigned int *)&v37;
        }
        sub_1C47655E8((uint64_t)&__dst, v21);
LABEL_31:
        v26 = v36;
        if (v36 != (unsigned int *)&v37)
        {
          do
          {
            sub_1C5220DCC((_QWORD **)a6, (uint64_t *)(a6 + 8), v26 + 7, v26 + 7);
            v27 = (unsigned int *)*((_QWORD *)v26 + 1);
            if (v27)
            {
              do
              {
                v28 = v27;
                v27 = *(unsigned int **)v27;
              }
              while (v27);
            }
            else
            {
              do
              {
                v28 = (unsigned int *)*((_QWORD *)v26 + 2);
                v29 = *(_QWORD *)v28 == (_QWORD)v26;
                v26 = v28;
              }
              while (!v29);
            }
            v26 = v28;
          }
          while (v28 != (unsigned int *)&v37);
        }
        sub_1C47655E8((uint64_t)&v36, v37);
        goto LABEL_39;
      }
      v30 = v16;
      __dst = v42;
      v41 = 0x600000000;
      if (&__dst == (void **)a5 || (v22 = *(unsigned int *)(a5 + 8), !*(_DWORD *)(a5 + 8)))
      {
LABEL_24:
        v43 = *(_DWORD *)(a5 + 64);
        v44 = *(_QWORD *)(a5 + 72);
        llvm::rdf::RegisterAggr::insert((uint64_t)&__dst, v18, v20);
        llvm::rdf::Liveness::getAllReachedUses(&v33, a1, a2, a3, v17, v30, &__dst);
        sub_1C47655E8((uint64_t)&v36, v37);
        v25 = v34;
        v36 = v33;
        v37 = v34;
        v38 = v35;
        if (v35)
        {
          v34[2] = &v37;
          v33 = (unsigned int *)&v34;
          v34 = 0;
          v35 = 0;
          v25 = 0;
        }
        else
        {
          v36 = (unsigned int *)&v37;
        }
        sub_1C47655E8((uint64_t)&v33, v25);
        if (__dst != v42)
          free(__dst);
        goto LABEL_31;
      }
      v23 = v42;
      v24 = *(unsigned int *)(a5 + 8);
      if (v22 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v42, *(unsigned int *)(a5 + 8), 8);
        v24 = *(unsigned int *)(a5 + 8);
        if (!(_DWORD)v24)
        {
LABEL_23:
          LODWORD(v41) = v22;
          goto LABEL_24;
        }
        v23 = __dst;
      }
      memcpy(v23, *(const void **)a5, 8 * v24);
      goto LABEL_23;
    }
  }
}

void llvm::rdf::Liveness::computePhiInfo(llvm::rdf::Liveness *this)
{
  unint64_t v1;
  llvm::rdf::Liveness *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  char *v24;
  unint64_t v25;
  unsigned int *v26;
  _DWORD *v27;
  _QWORD *v28;
  uint64_t *v29;
  char *v30;
  char *v31;
  _WORD *v32;
  int RegRef;
  uint64_t v34;
  unint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t **v42;
  uint64_t *i;
  unint64_t v44;
  char *v45;
  _DWORD *v46;
  unint64_t v47;
  void *v48;
  unint64_t v49;
  float v50;
  _BOOL8 v51;
  unint64_t v52;
  unint64_t v53;
  int8x8_t prime;
  void *v55;
  void *v56;
  uint64_t v57;
  _QWORD **v58;
  unint64_t v59;
  uint8x8_t v60;
  unint64_t v61;
  uint8x8_t v62;
  uint64_t v63;
  _QWORD *j;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  unint64_t v68;
  _DWORD *v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int k;
  uint64_t v74;
  void *v75;
  void *v76;
  char *v77;
  unsigned int m;
  llvm::rdf::DataFlowGraph *v79;
  llvm::rdf::RefNode *v80;
  unsigned int v81;
  _WORD *Owner;
  int v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t n;
  void *v90;
  unsigned int v91;
  llvm::rdf::RefNode *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  char *v97;
  char *v98;
  _QWORD *v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  _QWORD *v107;
  _QWORD *v108;
  void *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  int *v114;
  _DWORD *v115;
  int *v116;
  int v117;
  llvm::rdf::RefNode **v118;
  char *v119;
  llvm::rdf::RefNode *v120;
  unint64_t v121;
  uint64_t **v122;
  unint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t *v126;
  int v127;
  llvm::rdf::RefNode **v128;
  llvm::rdf::RefNode **v129;
  llvm::rdf::RefNode *v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t **v133;
  uint64_t **v134;
  uint64_t *v135;
  uint64_t **v136;
  uint64_t **v137;
  unsigned int v138;
  BOOL v139;
  uint64_t **v140;
  _DWORD *v141;
  uint64_t v142;
  int v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t **v146;
  unsigned int v147;
  char *v148;
  char *v149;
  void *v150;
  void **v151;
  unint64_t v152;
  uint64_t *v153;
  int v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t *v157;
  _QWORD *v158;
  void *v159;
  int *v160;
  uint64_t v161;
  const llvm::rdf::DataFlowGraph *v162;
  uint64_t **v163;
  int v164;
  int v165;
  uint64_t v166;
  _DWORD *v167;
  unsigned int v168;
  _DWORD *v169;
  unsigned int v170;
  _QWORD *v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  llvm::rdf::RefNode *v175;
  uint64_t **v176;
  int v177;
  uint64_t v178;
  uint64_t **v179;
  uint64_t **v180;
  uint64_t **v181;
  int v182;
  uint64_t *v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t *v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  uint8x8_t v254;
  unint64_t v255;
  _DWORD **v256;
  _DWORD *v257;
  uint64_t *v258;
  int v259;
  unint64_t v260;
  int v261;
  BOOL v262;
  _BOOL4 v263;
  int v264;
  _QWORD *v265;
  void *v266;
  void **v267;
  unint64_t v268;
  uint64_t v269;
  float v270;
  _BOOL8 v271;
  unint64_t v272;
  unint64_t v273;
  int8x8_t v274;
  void *v275;
  void *v276;
  uint64_t v277;
  _QWORD **v278;
  unint64_t v279;
  uint8x8_t v280;
  unint64_t v281;
  uint8x8_t v282;
  uint64_t v283;
  _QWORD *kk;
  unint64_t v285;
  _QWORD *v286;
  _QWORD *v287;
  unint64_t v288;
  unint64_t v289;
  uint8x8_t v290;
  unint64_t v291;
  uint64_t **v292;
  uint64_t *v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  _QWORD *v299;
  unint64_t v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t *v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t *v308;
  uint64_t v309;
  void *v310;
  unint64_t v311;
  unint64_t v312;
  int8x8_t v313;
  uint8x8_t v314;
  uint64_t v315;
  uint64_t **v316;
  uint64_t *ii;
  unint64_t v318;
  unint64_t v320;
  unint64_t v321;
  uint8x8_t v322;
  uint64_t **v323;
  uint64_t *jj;
  unint64_t v325;
  _QWORD *v327;
  float v328;
  float v329;
  _BOOL8 v330;
  unint64_t v331;
  unint64_t v332;
  int8x8_t v333;
  void *v334;
  void *v335;
  uint64_t v336;
  _QWORD *v337;
  unint64_t v338;
  uint8x8_t v339;
  unint64_t v340;
  uint8x8_t v341;
  uint64_t v342;
  _QWORD *v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  _QWORD *v347;
  unint64_t v348;
  uint64_t v349;
  char *v350;
  void *v351;
  uint64_t v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  char *v356;
  void *v357;
  int *v358;
  _DWORD *v359;
  int v360;
  uint64_t *v361;
  uint64_t **v362;
  unint64_t v363;
  int *v364;
  _QWORD *v365;
  _QWORD *v366;
  _QWORD *v367;
  _QWORD *v368;
  void *v369;
  _QWORD *v370;
  void *v371;
  _QWORD *v372;
  _QWORD *v373;
  _QWORD *v374;
  void *v375;
  unint64_t v376;
  unint64_t v377;
  _DWORD *v378;
  uint64_t v379;
  uint64_t v380;
  void *v381;
  uint64_t *v382;
  uint64_t *v383;
  uint64_t *v384;
  uint64_t **v385;
  uint64_t *v386;
  uint64_t **v387;
  unsigned int v388;
  uint64_t **v389;
  uint64_t **v390;
  unsigned int v391;
  uint64_t *v392;
  uint64_t *v393;
  void *v394;
  void **v395;
  unsigned int v396;
  uint64_t v397;
  uint64_t *v398;
  uint64_t *v399;
  llvm *v400;
  _DWORD *v401;
  const llvm::rdf::DataFlowGraph *v402;
  llvm::raw_ostream *v403;
  uint64_t v404;
  uint64_t **v405;
  unsigned int v406;
  void **v407;
  BOOL v408;
  _DWORD *v409;
  uint64_t v410;
  llvm *v411;
  _BYTE *v412;
  const llvm::rdf::DataFlowGraph *v413;
  llvm::raw_ostream *v414;
  uint64_t *v415;
  uint64_t **v416;
  llvm *v417;
  uint64_t v418;
  uint64_t *v419;
  uint64_t *v420;
  llvm *v421;
  void *v422;
  uint64_t v423;
  uint64_t v424;
  unsigned int *v425;
  uint64_t v426;
  unsigned int *v427;
  unsigned int *v428;
  llvm *v429;
  llvm *v430;
  _DWORD *v431;
  const llvm::rdf::DataFlowGraph *v432;
  llvm *v433;
  const llvm::rdf::DataFlowGraph *v434;
  int v435;
  int v436;
  uint64_t v437;
  uint64_t v438;
  unsigned int v439;
  uint64_t v440;
  unsigned int v441;
  _QWORD *v442;
  llvm::raw_ostream *v443;
  _DWORD *v444;
  llvm *v445;
  _DWORD *v446;
  const llvm::rdf::DataFlowGraph *v447;
  llvm::raw_ostream *v448;
  _BYTE *v449;
  unsigned int *v450;
  unsigned int v451;
  void *v452;
  llvm *v453;
  _BYTE *v454;
  const llvm::rdf::DataFlowGraph *v455;
  _BYTE *v456;
  char *v457;
  unsigned int v458;
  char *v459;
  unsigned int *v460;
  uint64_t *v461;
  char *v462;
  uint64_t v463;
  int *v464;
  int *v465;
  char *v466;
  uint64_t **v467;
  uint64_t v468;
  _QWORD *v469;
  llvm::rdf::RefNode **v470;
  int v471;
  unint64_t v472;
  unint64_t v473;
  unint64_t v474;
  unint64_t v475;
  _QWORD *v476;
  const void **v477;
  uint64_t v478;
  uint64_t v479;
  _QWORD *v480;
  llvm::rdf::RefNode **v481;
  unint64_t v482;
  unint64_t v483;
  uint64_t **v484;
  uint64_t **v485;
  int *v486;
  uint64_t v487;
  char v488;
  unint64_t v489;
  unsigned int v490;
  uint64_t v491;
  unsigned int v492;
  llvm::rdf::RefNode *v493;
  unsigned int v494;
  uint64_t *v495;
  _QWORD v496[2];
  uint64_t *v497;
  _QWORD *v498[2];
  __int128 v499;
  int v500;
  void *v501;
  _BYTE *v502;
  uint64_t v503;
  int v504[2];
  int v505;
  void *__p[2];
  void *v507[2];
  float v508;
  uint64_t *v509;
  _QWORD *v510[2];
  void *v511;
  uint64_t v512;
  void *v513[6];
  int v514;
  uint64_t *v515;
  void *v516[2];
  _BYTE v517[72];
  void *v518;
  void *__dst;
  uint64_t v520;
  _DWORD v521[12];
  uint64_t v522;
  uint64_t *v523;
  void *__src[2];
  void *v525[2];
  float v526;
  int v527;
  uint64_t *v528;
  void *v529;
  uint64_t **v530;
  uint64_t *v531;
  uint64_t v532;
  void *v533;
  unsigned int v534;
  uint64_t v535;
  char *v536;
  uint64_t v537;
  _QWORD v538[10];

  v2 = this;
  v538[8] = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t)this + 296;
  v4 = *((_DWORD *)this + 76);
  if (!*((_QWORD *)this + 38))
    goto LABEL_26;
  v5 = *((unsigned int *)this + 78);
  v6 = *((_QWORD *)this + 37);
  if (v5 <= 4 * v4 || v5 < 0x41)
  {
    if (!(_DWORD)v5)
    {
LABEL_25:
      *((_QWORD *)v2 + 38) = 0;
      goto LABEL_26;
    }
    v13 = v6 + 8;
    v14 = 48 * v5;
    while (1)
    {
      v15 = *(_DWORD *)(v13 - 8);
      if (v15 == -2)
        goto LABEL_23;
      if (v15 != -1)
        break;
LABEL_24:
      v13 += 48;
      v14 -= 48;
      if (!v14)
        goto LABEL_25;
    }
    v13 = sub_1C521ECF4(v13);
LABEL_23:
    *(_DWORD *)(v13 - 8) = -1;
    goto LABEL_24;
  }
  v7 = 48 * v5;
  v8 = v6 + 8;
  do
  {
    if (*(_DWORD *)(v8 - 8) <= 0xFFFFFFFD)
      v8 = sub_1C521ECF4(v8);
    v8 += 48;
    v7 -= 48;
  }
  while (v7);
  v9 = 1 << (33 - __clz(v4 - 1));
  if (v9 <= 64)
    v9 = 64;
  if (v4)
    v10 = v9;
  else
    v10 = 0;
  if ((_DWORD)v10 == *((_DWORD *)v2 + 78))
  {
    *((_QWORD *)v2 + 38) = 0;
    if ((_DWORD)v10)
    {
      v11 = (_DWORD *)*((_QWORD *)v2 + 37);
      v12 = 48 * v10;
      do
      {
        *v11 = -1;
        v11 += 12;
        v12 -= 48;
      }
      while (v12);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)v3, 8);
    if ((_DWORD)v10)
    {
      v376 = (4 * (int)v10 / 3u + 1) | ((unint64_t)(4 * (int)v10 / 3u + 1) >> 1);
      v377 = v376 | (v376 >> 2) | ((v376 | (v376 >> 2)) >> 4);
      LODWORD(v377) = (((v377 | (v377 >> 8)) >> 16) | v377 | (v377 >> 8)) + 1;
      *((_DWORD *)v2 + 78) = v377;
      v378 = operator new(48 * v377, (std::align_val_t)8uLL);
      *((_QWORD *)v2 + 37) = v378;
      *((_QWORD *)v2 + 38) = 0;
      v379 = *((unsigned int *)v2 + 78);
      if ((_DWORD)v379)
      {
        v380 = 48 * v379;
        do
        {
          *v378 = -1;
          v378 += 12;
          v380 -= 48;
        }
        while (v380);
      }
    }
    else
    {
      *(_QWORD *)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      *(_DWORD *)(v3 + 16) = 0;
    }
  }
LABEL_26:
  v536 = (char *)v538;
  v537 = 0x400000000;
  v16 = (uint64_t *)llvm::rdf::CodeNode::members(*(_DWORD **)(*(_QWORD *)v2 + 256), *(const llvm::rdf::DataFlowGraph **)v2, (uint64_t)&v533);
  if (v534)
  {
    v17 = (char *)v533;
    v18 = (char *)v533 + 16 * v534;
    do
    {
      v19 = *(_QWORD *)v17;
      v1 = *(_QWORD *)v2;
      v518 = &v520;
      __dst = (void *)0x400000000;
      v20 = *(_DWORD *)(v19 + 16);
      if (!v20
        || (v21 = *(_QWORD *)(*(_QWORD *)(v1 + 296) + 8 * ((v20 - 1) >> *(_DWORD *)(v1 + 276)))
                + 32 * (*(_DWORD *)(v1 + 280) & (v20 - 1)),
            v19 == v21))
      {
        v22 = 0;
        v24 = (char *)&v520;
      }
      else
      {
        v22 = 0;
        do
        {
          if ((*(_WORD *)v21 & 0x1F) == 0xD)
          {
            if (v22 >= HIDWORD(__dst))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v518, (uint64_t)&v520, v22 + 1, 16);
              v22 = __dst;
            }
            v23 = (char *)v518 + 16 * v22;
            *v23 = v21;
            v23[1] = v20;
            v22 = (_DWORD)__dst + 1;
            LODWORD(__dst) = (_DWORD)__dst + 1;
          }
          v20 = *(_DWORD *)(v21 + 4);
          if (v20)
            v21 = *(_QWORD *)(*(_QWORD *)(v1 + 296) + 8 * ((v20 - 1) >> *(_DWORD *)(v1 + 276)))
                + 32 * (*(_DWORD *)(v1 + 280) & (v20 - 1));
          else
            v21 = 0;
        }
        while (v19 != v21);
        v24 = (char *)v518;
      }
      sub_1C5220B24((unsigned int *)&v536, (uint64_t)&v536[16 * v537], v24, &v24[16 * v22]);
      v16 = (uint64_t *)v518;
      if (v518 != &v520)
        free(v518);
      v17 += 16;
    }
    while (v17 != v18);
  }
  v510[0] = 0;
  v510[1] = 0;
  v509 = (uint64_t *)v510;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v507 = 0u;
  v508 = 1.0;
  v478 = v3;
  v479 = (uint64_t)v2;
  if ((_DWORD)v537)
  {
    v464 = 0;
    v25 = 0;
    v26 = (unsigned int *)v536;
    v462 = 0;
    v487 = (uint64_t)v2 + 184;
    v457 = &v536[16 * v537];
    while (1)
    {
      *(_QWORD *)v504 = *(_QWORD *)v26;
      v27 = *(_DWORD **)v504;
      v460 = v26;
      v1 = v26[2];
      v505 = v26[2];
      sub_1C5221054(v3, &v505);
      v469 = v28;
      llvm::rdf::CodeNode::members(v27, *(const llvm::rdf::DataFlowGraph **)v2, (uint64_t)&v529);
      v499 = 0uLL;
      v500 = 0;
      v502 = 0;
      v503 = 0;
      v501 = 0;
      v498[0] = 0;
      v498[1] = 0;
      v497 = (uint64_t *)v498;
      v29 = (uint64_t *)*((_QWORD *)v2 + 2);
      LODWORD(v27) = *(_DWORD *)(*v29 + 44);
      __src[0] = v525;
      __src[1] = (void *)0x600000000;
      sub_1C4765AA4((char *)__src, ((_DWORD)v27 + 63) >> 6, 0);
      v527 = (int)v27;
      v528 = v29;
      if ((_DWORD)v530)
      {
        v30 = (char *)v529;
        v31 = (char *)v529 + 16 * v530;
        do
        {
          v32 = *(_WORD **)v30;
          v518 = v32;
          LODWORD(__dst) = *((_DWORD *)v30 + 2);
          if ((*v32 & 0x1F) == 6)
          {
            RegRef = llvm::rdf::RefNode::getRegRef((llvm::rdf::RefNode *)v32, *(const llvm::rdf::DataFlowGraph **)v2);
            llvm::rdf::RegisterAggr::insert((uint64_t)__src, RegRef, v34);
            sub_1C4A0C7B8((uint64_t)&v499, &__dst);
            sub_1C4778ED8(&v497, (unsigned int *)&__dst, &__dst);
          }
          v30 += 16;
        }
        while (v30 != v31);
      }
      LODWORD(v518) = v1;
      __dst = v521;
      v520 = 0x600000000;
      v35 = LODWORD(__src[1]);
      if (LODWORD(__src[1]))
        break;
LABEL_57:
      v473 = v25;
      v38 = v527;
      LODWORD(v522) = v527;
      v39 = v528;
      v523 = v528;
      v40 = (unint64_t)__p[1];
      if (__p[1])
      {
        v41 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
        v41.i16[0] = vaddlv_u8(v41);
        if (v41.u32[0] > 1uLL)
        {
          v25 = v1;
          if (__p[1] <= (void *)v1)
            v25 = v1 % (unint64_t)__p[1];
        }
        else
        {
          v25 = (LODWORD(__p[1]) - 1) & v1;
        }
        v42 = (uint64_t **)*((_QWORD *)__p[0] + v25);
        if (v42)
        {
          for (i = *v42; i; i = (uint64_t *)*i)
          {
            v44 = i[1];
            if (v44 == v1)
            {
              if (*((_DWORD *)i + 4) == v1)
                goto LABEL_136;
            }
            else
            {
              if (v41.u32[0] > 1uLL)
              {
                if ((void *)v44 >= __p[1])
                  v44 %= (unint64_t)__p[1];
              }
              else
              {
                v44 &= (unint64_t)__p[1] - 1;
              }
              if (v44 != v25)
                break;
            }
          }
        }
      }
      v45 = (char *)operator new(0x68uLL);
      v46 = v45;
      *(_QWORD *)v45 = 0;
      *((_QWORD *)v45 + 1) = v1;
      v47 = v1;
      *((_DWORD *)v45 + 4) = v1;
      v48 = v45 + 40;
      *((_QWORD *)v45 + 3) = v45 + 40;
      v1 = (unint64_t)(v45 + 24);
      *((_QWORD *)v45 + 4) = 0x600000000;
      if ((_DWORD)v35)
      {
        if (v35 < 7)
        {
          v49 = v35;
          goto LABEL_78;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v45 + 24), (uint64_t)v48, v35, 8);
        v49 = v520;
        if ((_DWORD)v520)
        {
          v48 = *(void **)v1;
LABEL_78:
          memcpy(v48, __dst, 8 * v49);
        }
        v46[8] = v35;
        v38 = v522;
        v39 = v523;
      }
      v46[22] = v38;
      *((_QWORD *)v46 + 12) = v39;
      v50 = (float)((unint64_t)v507[1] + 1);
      if (!v40 || (float)(v508 * (float)v40) < v50)
      {
        v51 = (v40 & (v40 - 1)) != 0;
        if (v40 < 3)
          v51 = 1;
        v52 = v51 | (2 * v40);
        v53 = vcvtps_u32_f32(v50 / v508);
        if (v52 <= v53)
          prime = (int8x8_t)v53;
        else
          prime = (int8x8_t)v52;
        if (*(_QWORD *)&prime == 1)
        {
          prime = (int8x8_t)2;
        }
        else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
        {
          prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        }
        v40 = (unint64_t)__p[1];
        if ((void *)*(_QWORD *)&prime <= __p[1])
        {
          if ((void *)*(_QWORD *)&prime < __p[1])
          {
            v61 = vcvtps_u32_f32((float)(unint64_t)v507[1] / v508);
            if (__p[1] < (void *)3
              || (v62 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v62.i16[0] = vaddlv_u8(v62), v62.u32[0] > 1uLL))
            {
              v61 = std::__next_prime(v61);
            }
            else
            {
              v63 = 1 << -(char)__clz(v61 - 1);
              if (v61 >= 2)
                v61 = v63;
            }
            if (*(_QWORD *)&prime <= v61)
              prime = (int8x8_t)v61;
            if (*(_QWORD *)&prime >= v40)
            {
              v40 = (unint64_t)__p[1];
            }
            else
            {
              if (prime)
                goto LABEL_92;
              v159 = __p[0];
              __p[0] = 0;
              if (v159)
                operator delete(v159);
              v40 = 0;
              __p[1] = 0;
            }
          }
        }
        else
        {
LABEL_92:
          if (*(_QWORD *)&prime >> 61)
            goto LABEL_782;
          v55 = operator new(8 * *(_QWORD *)&prime);
          v56 = __p[0];
          __p[0] = v55;
          if (v56)
            operator delete(v56);
          v57 = 0;
          __p[1] = (void *)prime;
          do
            *((_QWORD *)__p[0] + v57++) = 0;
          while (*(_QWORD *)&prime != v57);
          v58 = (_QWORD **)v507[0];
          if (v507[0])
          {
            v59 = *((_QWORD *)v507[0] + 1);
            v60 = (uint8x8_t)vcnt_s8(prime);
            v60.i16[0] = vaddlv_u8(v60);
            if (v60.u32[0] > 1uLL)
            {
              if (v59 >= *(_QWORD *)&prime)
                v59 %= *(_QWORD *)&prime;
            }
            else
            {
              v59 &= *(_QWORD *)&prime - 1;
            }
            *((_QWORD *)__p[0] + v59) = v507;
            for (j = *v58; j; v59 = v65)
            {
              v65 = j[1];
              if (v60.u32[0] > 1uLL)
              {
                if (v65 >= *(_QWORD *)&prime)
                  v65 %= *(_QWORD *)&prime;
              }
              else
              {
                v65 &= *(_QWORD *)&prime - 1;
              }
              if (v65 != v59)
              {
                if (!*((_QWORD *)__p[0] + v65))
                {
                  *((_QWORD *)__p[0] + v65) = v58;
                  goto LABEL_117;
                }
                *v58 = (_QWORD *)*j;
                *j = **((_QWORD **)__p[0] + v65);
                **((_QWORD **)__p[0] + v65) = j;
                j = v58;
              }
              v65 = v59;
LABEL_117:
              v58 = (_QWORD **)j;
              j = (_QWORD *)*j;
            }
          }
          v40 = (unint64_t)prime;
        }
        if ((v40 & (v40 - 1)) != 0)
        {
          if (v40 <= v47)
            v25 = v47 % v40;
          else
            v25 = v47;
        }
        else
        {
          v25 = ((_DWORD)v40 - 1) & v47;
        }
      }
      v66 = __p[0];
      v67 = (_QWORD *)*((_QWORD *)__p[0] + v25);
      if (v67)
      {
        *(_QWORD *)v46 = *v67;
LABEL_134:
        *v67 = v46;
        goto LABEL_135;
      }
      *(void **)v46 = v507[0];
      v507[0] = v46;
      v66[v25] = v507;
      if (*(_QWORD *)v46)
      {
        v68 = *(_QWORD *)(*(_QWORD *)v46 + 8);
        if ((v40 & (v40 - 1)) != 0)
        {
          if (v68 >= v40)
            v68 %= v40;
        }
        else
        {
          v68 &= v40 - 1;
        }
        v67 = (char *)__p[0] + 8 * v68;
        goto LABEL_134;
      }
LABEL_135:
      ++v507[1];
LABEL_136:
      if (__dst != v521)
        free(__dst);
      v480 = v469 + 1;
      v69 = v501;
      v3 = v478;
      v2 = (llvm::rdf::Liveness *)v479;
      if (v502 != v501)
      {
        v70 = 0;
        v71 = 0;
        do
        {
          v72 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v479 + 296)
                          + 8 * ((v69[v70] - 1) >> *(_DWORD *)(*(_QWORD *)v479 + 276)))
              + 32 * (*(_DWORD *)(*(_QWORD *)v479 + 280) & (v69[v70] - 1));
          if ((*(_WORD *)v72 & 0x800) == 0)
          {
            for (k = *(_DWORD *)(v72 + 20); k; k = *(_DWORD *)(v74 + 12))
            {
              v74 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v479 + 296)
                              + 8 * ((k - 1) >> *(_DWORD *)(*(_QWORD *)v479 + 276)))
                  + 32 * (*(_DWORD *)(*(_QWORD *)v479 + 280) & (k - 1));
              if ((*(_WORD *)v74 & 0x480) == 0)
              {
                v75 = (void *)llvm::rdf::RefNode::getRegRef((llvm::rdf::RefNode *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v479 + 296)+ 8* ((k - 1) >> *(_DWORD *)(*(_QWORD *)v479 + 276)))+ 32 * (*(_DWORD *)(*(_QWORD *)v479 + 280) & (k - 1))), *(const llvm::rdf::DataFlowGraph **)v479);
                v1 = (unint64_t)v76;
                v518 = v75;
                __dst = v76;
                v77 = sub_1C5221384((uint64_t)v480, v75, &v518);
                LODWORD(v516[0]) = k;
                v516[1] = (void *)v1;
                sub_1C522178C((uint64_t)(v77 + 24), k, v1, v516);
              }
            }
          }
          for (m = *(_DWORD *)(v72 + 16); m; m = *((_DWORD *)v80 + 3))
          {
            v79 = *(llvm::rdf::DataFlowGraph **)v479;
            v80 = (llvm::rdf::RefNode *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v479 + 296)
                                                   + 8 * ((m - 1) >> *(_DWORD *)(*(_QWORD *)v479 + 276)))
                                       + 32 * (*(_DWORD *)(*(_QWORD *)v479 + 280) & (m - 1)));
            v81 = m;
            Owner = (_WORD *)llvm::rdf::RefNode::getOwner(v80, *(const llvm::rdf::DataFlowGraph **)v479);
            llvm::rdf::DataFlowGraph::getRelatedRefs(v79, v80, Owner, v83, v81, (uint64_t)&v518);
            v1 = (unint64_t)v518;
            if ((_DWORD)__dst)
            {
              v84 = 16 * __dst;
              do
              {
                *(_OWORD *)v516 = *(_OWORD *)v1;
                if ((*(_BYTE *)v516[0] & 0x80) == 0)
                  sub_1C4A0C7B8((uint64_t)&v499, &v516[1]);
                v1 += 16;
                v84 -= 16;
              }
              while (v84);
              v1 = (unint64_t)v518;
            }
            if ((uint64_t *)v1 != &v520)
              free((void *)v1);
          }
          v69 = v501;
          v70 = ++v71;
        }
        while (v71 < (unint64_t)((v502 - (_BYTE *)v501) >> 2));
      }
      v85 = v469[3];
      v25 = v473;
      while (v85)
      {
        sub_1C5221998((uint64_t)&v511, v85 + 24);
        if (*(_QWORD *)(v85 + 48))
        {
          v86 = *(_QWORD **)(v85 + 40);
          if (v86)
          {
            do
            {
              v87 = (_QWORD *)*v86;
              operator delete(v86);
              v86 = v87;
            }
            while (v87);
          }
          *(_QWORD *)(v85 + 40) = 0;
          v88 = *(_QWORD *)(v85 + 32);
          if (v88)
          {
            for (n = 0; n != v88; ++n)
              *(_QWORD *)(*(_QWORD *)(v85 + 24) + 8 * n) = 0;
          }
          *(_QWORD *)(v85 + 48) = 0;
        }
        v90 = v513[0];
        if (!v513[0])
          goto LABEL_191;
        do
        {
          v91 = *((_DWORD *)v90 + 4);
          if (v91)
            v92 = (llvm::rdf::RefNode *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v479 + 296)
                                                   + 8 * ((v91 - 1) >> *(_DWORD *)(*(_QWORD *)v479 + 276)))
                                       + 32 * (*(_DWORD *)(*(_QWORD *)v479 + 280) & (v91 - 1)));
          else
            v92 = 0;
          v93 = *(unsigned int *)(v85 + 16);
          v1 = v489 & 0xFFFFFFFF00000000 | v93;
          if ((_DWORD)v93)
            v94 = *((_QWORD *)v90 + 3);
          else
            v94 = 0;
          v95 = *(_QWORD *)(v479 + 16);
          v96 = *(_DWORD *)(*(_QWORD *)v95 + 44);
          v518 = &v520;
          __dst = (void *)0x600000000;
          sub_1C4765AA4((char *)&v518, (v96 + 63) >> 6, 0);
          v521[10] = v96;
          v522 = v95;
          v489 = v1;
          llvm::rdf::Liveness::getAllReachingDefs(v92, v479, v1, v94, v91, 0, 0, v487, (unsigned int *)v516);
          if (LODWORD(v516[1]))
          {
            v97 = (char *)v516[0];
            v98 = (char *)v516[0] + 16 * LODWORD(v516[1]);
            do
            {
              v99 = v498[0];
              if (v498[0])
              {
                v100 = *((_DWORD *)v97 + 2);
                do
                {
                  v101 = *((_DWORD *)v99 + 7);
                  if (v100 >= v101)
                  {
                    if (v101 >= v100)
                      goto LABEL_181;
                    ++v99;
                  }
                  v99 = (_QWORD *)*v99;
                }
                while (v99);
              }
              v102 = llvm::rdf::RefNode::getRegRef(*(llvm::rdf::RefNode **)v97, *(const llvm::rdf::DataFlowGraph **)v479);
              llvm::rdf::RegisterAggr::insert((uint64_t)&v518, v102, v103);
              v97 += 16;
            }
            while (v97 != v98);
          }
LABEL_181:
          if (v516[0] != v517)
            free(v516[0]);
          v105 = llvm::rdf::RegisterAggr::clearIn((uint64_t)&v518, v1, v94);
          if ((_DWORD)v105 && v104)
          {
            llvm::rdf::PhysicalRegisterInfo::mapTo(*(_QWORD **)(v479 + 16), v105, v104, *(_DWORD *)(v85 + 16));
            LODWORD(v516[0]) = v91;
            v516[1] = v106;
            sub_1C522178C(v85 + 24, v91, (unint64_t)v106, v516);
          }
          if (v518 != &v520)
            free(v518);
          v90 = *(void **)v90;
        }
        while (v90);
        if (*(_QWORD *)(v85 + 48))
          v85 = *(_QWORD *)v85;
        else
LABEL_191:
          v85 = sub_1C52219F8(v480, (uint64_t *)v85);
        v107 = v513[0];
        v3 = v478;
        v25 = v473;
        if (v513[0])
        {
          do
          {
            v108 = (_QWORD *)*v107;
            operator delete(v107);
            v107 = v108;
          }
          while (v108);
        }
        v109 = v511;
        v511 = 0;
        if (v109)
          operator delete(v109);
      }
      if (v469[4])
      {
        if (v25 >= (unint64_t)v462)
        {
          v110 = (uint64_t)(v25 - (_QWORD)v464) >> 2;
          v111 = v110 + 1;
          if ((unint64_t)(v110 + 1) >> 62)
            goto LABEL_620;
          if ((v462 - (char *)v464) >> 1 > v111)
            v111 = (v462 - (char *)v464) >> 1;
          if ((unint64_t)(v462 - (char *)v464) >= 0x7FFFFFFFFFFFFFFCLL)
            v112 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v112 = v111;
          if (v112)
          {
            if (v112 >> 62)
              goto LABEL_782;
            v113 = (char *)operator new(4 * v112);
          }
          else
          {
            v113 = 0;
          }
          v114 = (int *)&v113[4 * v110];
          *v114 = v505;
          v115 = v114 + 1;
          if ((int *)v25 == v464)
          {
            v116 = v464;
          }
          else
          {
            v116 = v464;
            do
            {
              v117 = *(_DWORD *)(v25 - 4);
              v25 -= 4;
              *--v114 = v117;
            }
            while ((int *)v25 != v464);
          }
          v462 = &v113[4 * v112];
          if (v116)
            operator delete(v116);
          v25 = (unint64_t)v115;
          v464 = v114;
        }
        else
        {
          *(_DWORD *)v25 = v505;
          v25 += 4;
        }
      }
      v496[0] = 0;
      v496[1] = 0;
      v495 = v496;
      if ((_DWORD)v530)
      {
        v118 = (llvm::rdf::RefNode **)v529;
        v119 = (char *)v529 + 16 * v530;
        v474 = v25;
        v466 = v119;
        while (1)
        {
          v120 = *v118;
          if ((*(_WORD *)*v118 & 0x1F) != 0xA)
            goto LABEL_279;
          v121 = *((unsigned int *)v118 + 2);
          v122 = (uint64_t **)v496[0];
          if (v496[0])
          {
            do
            {
              v123 = *((unsigned int *)v122 + 7);
              if (v123 <= v121)
              {
                if (v123 >= v121)
                  goto LABEL_279;
                ++v122;
              }
              v122 = (uint64_t **)*v122;
            }
            while (v122);
          }
          v493 = *v118;
          v494 = v121;
          if (*((_DWORD *)v120 + 2))
            break;
LABEL_279:
          v118 += 2;
          if (v118 == (llvm::rdf::RefNode **)v119)
          {
            v158 = (_QWORD *)v496[0];
            goto LABEL_282;
          }
        }
        v470 = v118;
        v124 = llvm::rdf::RefNode::getRegRef(v120, *(const llvm::rdf::DataFlowGraph **)v2);
        llvm::rdf::Liveness::getAllReachingDefs(v120, (uint64_t)v2, v124, v125, v121, 1, 0, v487, (unsigned int *)v516);
        v126 = (uint64_t *)*((_QWORD *)v2 + 2);
        v127 = *(_DWORD *)(*v126 + 44);
        v511 = v513;
        v512 = 0x600000000;
        sub_1C4765AA4((char *)&v511, (v127 + 63) >> 6, 0);
        v514 = v127;
        v515 = v126;
        if (!LODWORD(v516[1]))
          goto LABEL_269;
        v128 = (llvm::rdf::RefNode **)v516[0];
        v129 = (llvm::rdf::RefNode **)((char *)v516[0] + 16 * LODWORD(v516[1]));
        v481 = v129;
        while (2)
        {
          v130 = *v128;
          if ((*(_WORD *)*v128 & 0x80) == 0)
            goto LABEL_267;
          llvm::rdf::RefNode::getOwner(*v128, *(const llvm::rdf::DataFlowGraph **)v2);
          v132 = v131;
          v133 = sub_1C5221B54(&v509, v494, &v494);
          v134 = v133;
          v136 = v133 + 6;
          v135 = v133[6];
          if (v135)
          {
            v137 = v133 + 6;
            do
            {
              v138 = *((_DWORD *)v135 + 8);
              v139 = v138 >= v132;
              if (v138 >= v132)
                v140 = (uint64_t **)v135;
              else
                v140 = (uint64_t **)(v135 + 1);
              if (v139)
                v137 = (uint64_t **)v135;
              v135 = *v140;
            }
            while (*v140);
            if (v137 != v136 && *((_DWORD *)v137 + 8) <= v132)
            {
              llvm::rdf::RegisterAggr::insert((llvm::rdf::RegisterAggr *)(v137 + 5), (const llvm::rdf::RegisterAggr *)&v511);
              v2 = (llvm::rdf::Liveness *)v479;
              goto LABEL_267;
            }
          }
          LODWORD(v518) = v132;
          __dst = v521;
          v520 = 0x600000000;
          v1 = v512;
          if ((_DWORD)v512)
          {
            v141 = v521;
            v142 = v512;
            if (v512 < 7)
              goto LABEL_244;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v521, v512, 8);
            v142 = v512;
            if ((_DWORD)v512)
            {
              v141 = __dst;
LABEL_244:
              memcpy(v141, v511, 8 * v142);
            }
            LODWORD(v520) = v1;
            v132 = v518;
          }
          v484 = v134;
          v143 = v514;
          LODWORD(v522) = v514;
          v144 = v515;
          v523 = v515;
          v145 = *v136;
          v146 = v136;
          if (*v136)
          {
            while (1)
            {
              while (1)
              {
                v146 = (uint64_t **)v145;
                v147 = *((_DWORD *)v145 + 8);
                if (v147 <= v132)
                  break;
                v145 = *v146;
                v136 = v146;
                if (!*v146)
                  goto LABEL_253;
              }
              if (v147 >= v132)
                break;
              v145 = v146[1];
              if (!v145)
              {
                v136 = v146 + 1;
                goto LABEL_253;
              }
            }
LABEL_264:
            if (__dst != v521)
              free(__dst);
            v2 = (llvm::rdf::Liveness *)v479;
            v129 = v481;
LABEL_267:
            v154 = llvm::rdf::RefNode::getRegRef(v130, *(const llvm::rdf::DataFlowGraph **)v2);
            llvm::rdf::RegisterAggr::insert((uint64_t)&v511, v154, v155);
            v128 += 2;
            if (v128 == v129)
            {
              v120 = v493;
              LODWORD(v121) = v494;
              v25 = v474;
LABEL_269:
              llvm::rdf::DataFlowGraph::getRelatedRefs(*(llvm::rdf::DataFlowGraph **)v2, v120, *(_WORD **)v504, v505, v121, (uint64_t)&v518);
              v156 = (uint64_t *)v518;
              v157 = (uint64_t *)((char *)v518 + 16 * __dst);
              if ((_DWORD)__dst)
              {
                do
                {
                  v492 = *((_DWORD *)v156 + 2);
                  sub_1C4778ED8(&v495, &v492, &v492);
                  v156 += 2;
                }
                while (v156 != v157);
                v156 = (uint64_t *)v518;
              }
              if (v156 != &v520)
                free(v156);
              if (v511 != v513)
                free(v511);
              if (v516[0] != v517)
                free(v516[0]);
              v118 = v470;
              v119 = v466;
              goto LABEL_279;
            }
            continue;
          }
          break;
        }
LABEL_253:
        v148 = (char *)operator new(0x78uLL);
        v149 = v148;
        *((_DWORD *)v148 + 8) = v132;
        v150 = v148 + 56;
        *((_QWORD *)v148 + 5) = v148 + 56;
        v151 = (void **)(v148 + 40);
        *((_QWORD *)v148 + 6) = 0x600000000;
        if ((_DWORD)v1)
        {
          if (v1 < 7)
          {
            v152 = v1;
            goto LABEL_259;
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v148 + 40), (uint64_t)v150, v1, 8);
          v152 = v520;
          if ((_DWORD)v520)
          {
            v150 = *v151;
LABEL_259:
            memcpy(v150, __dst, 8 * v152);
          }
          *((_DWORD *)v149 + 12) = v1;
          v143 = v522;
          v144 = v523;
        }
        *((_DWORD *)v149 + 26) = v143;
        *((_QWORD *)v149 + 14) = v144;
        *(_QWORD *)v149 = 0;
        *((_QWORD *)v149 + 1) = 0;
        *((_QWORD *)v149 + 2) = v146;
        *v136 = (uint64_t *)v149;
        v153 = (uint64_t *)*v484[5];
        if (v153)
        {
          v484[5] = v153;
          v149 = (char *)*v136;
        }
        sub_1C4768E74(v484[6], (uint64_t *)v149);
        v484[7] = (uint64_t *)((char *)v484[7] + 1);
        v3 = v478;
        goto LABEL_264;
      }
      v158 = 0;
LABEL_282:
      sub_1C47655E8((uint64_t)&v495, v158);
      if (__src[0] != v525)
        free(__src[0]);
      sub_1C47655E8((uint64_t)&v497, v498[0]);
      if (v501)
      {
        v502 = v501;
        operator delete(v501);
      }
      MEMORY[0x1CAA32FB4](v499, 4);
      v16 = (uint64_t *)v529;
      if (v529 != &v531)
        free(v529);
      v26 = v460 + 4;
      if (v460 + 4 == (unsigned int *)v457)
        goto LABEL_300;
    }
    v36 = v521;
    v37 = LODWORD(__src[1]);
    if (LODWORD(__src[1]) >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v521, LODWORD(__src[1]), 8);
      v37 = LODWORD(__src[1]);
      if (!LODWORD(__src[1]))
      {
LABEL_56:
        LODWORD(v520) = v35;
        v1 = v518;
        goto LABEL_57;
      }
      v36 = __dst;
    }
    memcpy(v36, __src[0], 8 * v37);
    goto LABEL_56;
  }
  v462 = 0;
  v25 = 0;
  v464 = 0;
LABEL_300:
  v160 = v464;
  if (*((_BYTE *)v2 + 264))
  {
    v16 = (uint64_t *)llvm::dbgs((llvm *)v16);
    v381 = (void *)v16[4];
    if ((unint64_t)(v16[3] - (_QWORD)v381) > 0x28)
    {
      qmemcpy(v381, "Phi-up-to-phi map with intervening defs:\n", 41);
      v16[4] += 41;
    }
    else
    {
      v16 = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)v16, "Phi-up-to-phi map with intervening defs:\n", 0x29uLL);
    }
    v382 = v509;
    if (v509 != (uint64_t *)v510)
    {
      while (1)
      {
        LODWORD(v529) = *((_DWORD *)v382 + 8);
        v531 = 0;
        v532 = 0;
        v530 = &v531;
        v383 = (uint64_t *)v382[5];
        if (v383 != v382 + 6)
        {
          while (1)
          {
            v384 = v531;
            v385 = &v531;
            if (v530 != &v531)
            {
              v386 = v531;
              v387 = &v531;
              if (v531)
              {
                do
                {
                  v385 = (uint64_t **)v386;
                  v386 = (uint64_t *)v386[1];
                }
                while (v386);
              }
              else
              {
                do
                {
                  v385 = (uint64_t **)v387[2];
                  v262 = *v385 == (uint64_t *)v387;
                  v387 = v385;
                }
                while (v262);
              }
              v388 = *((_DWORD *)v383 + 8);
              if (*((_DWORD *)v385 + 8) >= v388)
                break;
            }
            if (v531)
              v389 = v385;
            else
              v389 = &v531;
            if (v531)
              v390 = v385 + 1;
            else
              v390 = &v531;
            if (!*v390)
              goto LABEL_677;
LABEL_688:
            v398 = (uint64_t *)v383[1];
            v2 = (llvm::rdf::Liveness *)v479;
            if (v398)
            {
              do
              {
                v399 = v398;
                v398 = (uint64_t *)*v398;
              }
              while (v398);
            }
            else
            {
              do
              {
                v399 = (uint64_t *)v383[2];
                v262 = *v399 == (_QWORD)v383;
                v383 = v399;
              }
              while (!v262);
            }
            v383 = v399;
            if (v399 == v382 + 6)
              goto LABEL_694;
          }
          v390 = &v531;
          v389 = &v531;
          if (v531)
          {
            while (1)
            {
              while (1)
              {
                v389 = (uint64_t **)v384;
                v391 = *((_DWORD *)v384 + 8);
                if (v391 <= v388)
                  break;
                v384 = *v389;
                v390 = v389;
                if (!*v389)
                  goto LABEL_677;
              }
              if (v391 >= v388)
                goto LABEL_688;
              v384 = v389[1];
              if (!v384)
              {
                v390 = v389 + 1;
                break;
              }
            }
          }
LABEL_677:
          v1 = v25;
          v392 = (uint64_t *)operator new(0x78uLL);
          v393 = v392;
          *((_DWORD *)v392 + 8) = *((_DWORD *)v383 + 8);
          v394 = v392 + 7;
          v392[5] = (uint64_t)(v392 + 7);
          v395 = (void **)(v392 + 5);
          v392[6] = 0x600000000;
          v396 = *((_DWORD *)v383 + 12);
          if (!v396 || v392 == v383)
          {
LABEL_685:
            *((_DWORD *)v393 + 26) = *((_DWORD *)v383 + 26);
            v393[14] = v383[14];
            *v393 = 0;
            v393[1] = 0;
            v393[2] = (uint64_t)v389;
            *v390 = v393;
            if (*v530)
            {
              v530 = (uint64_t **)*v530;
              v393 = *v390;
            }
            v16 = sub_1C4768E74(v531, v393);
            ++v532;
            v3 = v478;
            v25 = v1;
            goto LABEL_688;
          }
          if (v396 >= 7)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v392 + 5), (uint64_t)v394, *((unsigned int *)v383 + 12), 8);
            v397 = *((unsigned int *)v383 + 12);
            if (!(_DWORD)v397)
            {
LABEL_684:
              *((_DWORD *)v393 + 12) = v396;
              goto LABEL_685;
            }
            v394 = *v395;
          }
          else
          {
            v397 = *((unsigned int *)v383 + 12);
          }
          memcpy(v394, (const void *)v383[5], 8 * v397);
          goto LABEL_684;
        }
LABEL_694:
        v400 = llvm::dbgs((llvm *)v16);
        v401 = (_DWORD *)*((_QWORD *)v400 + 4);
        if (*((_QWORD *)v400 + 3) - (_QWORD)v401 > 3uLL)
        {
          *v401 = 543778928;
          *((_QWORD *)v400 + 4) += 4;
        }
        else
        {
          v400 = llvm::raw_ostream::write(v400, "phi ", 4uLL);
        }
        v160 = v464;
        v402 = *(const llvm::rdf::DataFlowGraph **)v2;
        v518 = &v529;
        __dst = v402;
        v403 = llvm::rdf::operator<<((char **)v400, (unsigned int **)&v518);
        v404 = *((_QWORD *)v403 + 4);
        if ((unint64_t)(*((_QWORD *)v403 + 3) - v404) > 4)
        {
          *(_BYTE *)(v404 + 4) = 123;
          *(_DWORD *)v404 = 540945696;
          *((_QWORD *)v403 + 4) += 5;
        }
        else
        {
          v403 = llvm::raw_ostream::write(v403, " -> {", 5uLL);
        }
        v405 = v530;
        if (v530 != &v531)
          break;
LABEL_720:
        v417 = llvm::dbgs(v403);
        v418 = *((_QWORD *)v417 + 4);
        if ((unint64_t)(*((_QWORD *)v417 + 3) - v418) > 2)
        {
          *(_BYTE *)(v418 + 2) = 10;
          *(_WORD *)v418 = 32032;
          *((_QWORD *)v417 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v417, " }\n", 3uLL);
        }
        sub_1C521EB58(v531);
        v419 = (uint64_t *)v382[1];
        if (v419)
        {
          do
          {
            v420 = v419;
            v419 = (uint64_t *)*v419;
          }
          while (v419);
        }
        else
        {
          do
          {
            v420 = (uint64_t *)v382[2];
            v262 = *v420 == (_QWORD)v382;
            v382 = v420;
          }
          while (!v262);
        }
        v382 = v420;
        if (v420 == (uint64_t *)v510)
          goto LABEL_301;
      }
      while (1)
      {
        LODWORD(v518) = *((_DWORD *)v405 + 8);
        __dst = v521;
        v520 = 0x600000000;
        v406 = *((_DWORD *)v405 + 12);
        v407 = (void **)(v405 + 5);
        if (v406)
          v408 = &__dst == v407;
        else
          v408 = 1;
        if (v408)
          goto LABEL_709;
        if (v406 < 7)
          break;
        v403 = (llvm::raw_ostream *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v521, *((unsigned int *)v405 + 12), 8);
        v410 = *((unsigned int *)v405 + 12);
        if ((_DWORD)v410)
        {
          v409 = __dst;
          goto LABEL_707;
        }
LABEL_708:
        LODWORD(v520) = v406;
LABEL_709:
        LODWORD(v522) = *((_DWORD *)v405 + 26);
        v523 = v405[14];
        v411 = llvm::dbgs(v403);
        v412 = (_BYTE *)*((_QWORD *)v411 + 4);
        if ((unint64_t)v412 >= *((_QWORD *)v411 + 3))
        {
          v411 = llvm::raw_ostream::write(v411, 32);
        }
        else
        {
          *((_QWORD *)v411 + 4) = v412 + 1;
          *v412 = 32;
        }
        v413 = *(const llvm::rdf::DataFlowGraph **)v2;
        __src[0] = &v518;
        __src[1] = v413;
        v414 = llvm::rdf::operator<<((char **)v411, (unsigned int **)__src);
        llvm::rdf::RegisterAggr::print((llvm::rdf::RegisterAggr *)&__dst, v414);
        v403 = (llvm::raw_ostream *)__dst;
        if (__dst != v521)
          free(__dst);
        v415 = v405[1];
        if (v415)
        {
          do
          {
            v416 = (uint64_t **)v415;
            v415 = (uint64_t *)*v415;
          }
          while (v415);
        }
        else
        {
          do
          {
            v416 = (uint64_t **)v405[2];
            v262 = *v416 == (uint64_t *)v405;
            v405 = v416;
          }
          while (!v262);
        }
        v405 = v416;
        if (v416 == &v531)
          goto LABEL_720;
      }
      v409 = v521;
      v410 = *((unsigned int *)v405 + 12);
LABEL_707:
      v403 = (llvm::raw_ostream *)memcpy(v409, *v407, 8 * v410);
      goto LABEL_708;
    }
  }
LABEL_301:
  *(_OWORD *)__src = 0u;
  *(_OWORD *)v525 = 0u;
  v526 = 1.0;
  if ((int *)v25 != v160)
  {
    v161 = 0;
    v458 = 0;
    while (1)
    {
      v162 = *(const llvm::rdf::DataFlowGraph **)v2;
      v163 = (uint64_t **)v160[v161];
      v164 = *(_DWORD *)(*(_QWORD *)v2 + 276);
      v165 = *(_DWORD *)(*(_QWORD *)v2 + 280);
      v166 = *(_QWORD *)(*(_QWORD *)v2 + 296);
      v167 = (_DWORD *)(*(_QWORD *)(v166 + 8 * (((_DWORD)v163 - 1) >> v164))
                      + 32 * (v165 & ((_DWORD)v163 - 1)));
      v529 = v167;
      v530 = v163;
      v518 = &v520;
      __dst = (void *)0x400000000;
      v168 = v167[4];
      if (v168)
      {
        v169 = (_DWORD *)(*(_QWORD *)(v166 + 8 * ((v168 - 1) >> v164)) + 32 * (v165 & (v168 - 1)));
        if (v167 != v169)
        {
          v170 = 0;
          do
          {
            if ((*(_WORD *)v169 & 0x1F) == 0xA)
            {
              if (v170 >= HIDWORD(__dst))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v518, (uint64_t)&v520, v170 + 1, 16);
                v170 = __dst;
              }
              v171 = (char *)v518 + 16 * v170;
              *v171 = v169;
              v171[1] = v168;
              v170 = (_DWORD)__dst + 1;
              LODWORD(__dst) = (_DWORD)__dst + 1;
            }
            v168 = v169[1];
            if (v168)
              v169 = (_DWORD *)(*(_QWORD *)(*((_QWORD *)v162 + 37) + 8 * ((v168 - 1) >> *((_DWORD *)v162 + 69)))
                              + 32 * (*((_DWORD *)v162 + 70) & (v168 - 1)));
            else
              v169 = 0;
          }
          while (v167 != v169);
        }
      }
      sub_1C5221054(v3, (int *)&v530);
      v463 = v172;
      v16 = (uint64_t *)v518;
      if ((_DWORD)__dst)
        break;
      v173 = v1;
LABEL_616:
      v1 = v173;
      if (v16 != &v520)
        free(v16);
      v161 = ++v458;
      if (v458 >= (unint64_t)((uint64_t)(v25 - (_QWORD)v160) >> 2))
        goto LABEL_622;
    }
    v459 = (char *)v518 + 16 * __dst;
    v173 = v1;
    while (1)
    {
      v174 = v173;
      v516[0] = (void *)*v16;
      v175 = (llvm::rdf::RefNode *)v516[0];
      v461 = v16;
      LODWORD(v516[1]) = *((_DWORD *)v16 + 2);
      v176 = sub_1C5221B54(&v509, v516[1], &v516[1]);
      v177 = llvm::rdf::RefNode::getRegRef(v175, *(const llvm::rdf::DataFlowGraph **)v2);
      v468 = v178;
      v471 = v177;
      v179 = (uint64_t **)v176[5];
      v467 = v176 + 6;
      if (v179 != v176 + 6)
        break;
      v173 = v174;
LABEL_613:
      v16 = v461 + 2;
      if (v461 + 2 == (uint64_t *)v459)
      {
        v16 = (uint64_t *)v518;
        goto LABEL_616;
      }
    }
    v173 = v174;
    v180 = v179;
LABEL_318:
    v477 = (const void **)(v180 + 5);
    if ((llvm::rdf::RegisterAggr::hasCoverOf((uint64_t)(v180 + 5), v471, v468) & 1) != 0)
      goto LABEL_600;
    v181 = v180;
    v182 = *((_DWORD *)v180 + 26);
    v183 = v181[5];
    v482 = v173;
    v485 = v181;
    v184 = *((unsigned int *)v181 + 12);
    LOBYTE(v181) = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v181 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
    {
      v363 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v363 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v363;
      __cxa_guard_release(&qword_1ED7EAC88);
    }
    v185 = 8 * v184;
    v475 = v25;
    if (v184 > 8)
    {
      v187 = 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69
                                                                                  * (qword_1ED7EAC80 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
      v188 = __ROR8__(qword_1ED7EAC80 ^ 0xB492B66FBE98F273, 49);
      v189 = qword_1ED7EAC80 ^ ((unint64_t)qword_1ED7EAC80 >> 47);
      v190 = qword_1ED7EAC80 ^ (((0x9DDFEA08EB382D69 * (v189 ^ (0xB492B66FBE98F273 * qword_1ED7EAC80))) ^ qword_1ED7EAC80) >> 47) ^ (0x9DDFEA08EB382D69 * (v189 ^ (0xB492B66FBE98F273 * qword_1ED7EAC80)));
      v191 = v183[1];
      v192 = v188 + qword_1ED7EAC80 + v191;
      v193 = v183[6];
      v194 = v183[7];
      v195 = v183[5];
      v196 = v195
           + v188
           - 0x4B6D499041670D8DLL * __ROR8__(v193 + qword_1ED7EAC80 - 0x4B6D499041670D8DLL * qword_1ED7EAC80, 42);
      v197 = v189 - 0x622015F714C7D297 * (v187 ^ (v187 >> 47));
      v198 = *v183 - 0x6D8ED9027DD26057 * qword_1ED7EAC80;
      v199 = v189 + v198;
      v201 = v183[2];
      v200 = v183[3];
      v202 = v198 + v191 + v201;
      v203 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v190) ^ ((0x9DDFEA08EB382D69 * v190) >> 47));
      v204 = (0xB492B66FBE98F273 * __ROR8__(v192, 37)) ^ v203;
      v205 = __ROR8__(v202, 44) + v198 + __ROR8__(v204 + v199 + v200, 21);
      v206 = __ROR8__(v197, 33);
      v207 = 0xB492B66FBE98F273 * v206;
      v208 = v202 + v200;
      v209 = v203 + v183[4] - 0x4B6D499041670D8DLL * v206;
      v210 = __ROR8__(v195 + v193 + v209, 44) + v209 + __ROR8__(v196 + v201 + v194 + v209, 21);
      v211 = v195 + v193 + v209 + v194;
      v212 = (v185 & 0x7FFFFFFC0) - 64;
      if ((v185 & 0x7FFFFFFC0) == 0x40)
      {
        v213 = v204;
      }
      else
      {
        v214 = v183 + 15;
        do
        {
          v215 = *(v214 - 6);
          v216 = __ROR8__(v196 + v207 + v208 + v215, 37);
          v218 = *(v214 - 2);
          v217 = *(v214 - 1);
          v196 = v218 + v208 - 0x4B6D499041670D8DLL * __ROR8__(v205 + v196 + v217, 42);
          v219 = v211 + v204;
          v220 = *(v214 - 7) - 0x4B6D499041670D8DLL * v205;
          v221 = *(v214 - 4);
          v222 = *(v214 - 5);
          v223 = v220 + v215 + v222;
          v213 = (0xB492B66FBE98F273 * v216) ^ v210;
          v207 = 0xB492B66FBE98F273 * __ROR8__(v219, 33);
          v205 = __ROR8__(v223, 44) + v220 + __ROR8__(v213 + v211 + v220 + v221, 21);
          v208 = v223 + v221;
          v224 = v207 + v210 + *(v214 - 3);
          v225 = *v214;
          v214 += 8;
          v226 = __ROR8__(v196 + v222 + v224 + v225, 21);
          v227 = v218 + v217 + v224;
          v210 = __ROR8__(v227, 44) + v224 + v226;
          v211 = v227 + v225;
          v204 = v213;
          v212 -= 64;
        }
        while (v212);
      }
      if ((v184 & 7) != 0)
      {
        v228 = &v183[v184];
        v229 = *(v228 - 7);
        v231 = *(v228 - 2);
        v230 = *(v228 - 1);
        v232 = v213 + v211;
        v233 = (0xB492B66FBE98F273 * __ROR8__(v196 + v208 + v207 + v229, 37)) ^ v210;
        v235 = *(v228 - 4);
        v234 = *(v228 - 3);
        v196 = v234 + v208 - 0x4B6D499041670D8DLL * __ROR8__(v196 + v205 + v231, 42);
        v236 = v233 + v211;
        v237 = *(v228 - 8) - 0x4B6D499041670D8DLL * v205;
        v240 = v228 - 6;
        v239 = *(v228 - 6);
        v238 = v240[1];
        v241 = v237 + v229 + v239;
        v207 = 0xB492B66FBE98F273 * __ROR8__(v232, 33);
        v205 = __ROR8__(v241, 44) + v237 + __ROR8__(v236 + v237 + v238, 21);
        v208 = v241 + v238;
        v242 = v207 + v210 + v235;
        v243 = v234 + v231 + v242;
        v210 = __ROR8__(v243, 44) + v242 + __ROR8__(v196 + v239 + v242 + v230, 21);
        v211 = v243 + v230;
        v213 = v233;
      }
      v244 = 0x9DDFEA08EB382D69
           * (v210 ^ ((0x9DDFEA08EB382D69 * (v205 ^ v210)) >> 47) ^ (0x9DDFEA08EB382D69 * (v205 ^ v210)));
      v245 = v207 - 0x5B6A4C820B386C68 * v184 - 0x622015F714C7D297 * (v244 ^ (v244 >> 47));
      v246 = 0x9DDFEA08EB382D69
           * ((v213
             - 0x4B6D499041670D8DLL * (v196 ^ (v196 >> 47))
             - 0x622015F714C7D297
             * ((0x9DDFEA08EB382D69
               * (v211 ^ ((0x9DDFEA08EB382D69 * (v208 ^ v211)) >> 47) ^ (0x9DDFEA08EB382D69 * (v208 ^ v211)))) ^ ((0x9DDFEA08EB382D69 * (v211 ^ ((0x9DDFEA08EB382D69 * (v208 ^ v211)) >> 47) ^ (0x9DDFEA08EB382D69 * (v208 ^ v211)))) >> 47))) ^ v245);
      v186 = 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v245 ^ (v246 >> 47) ^ v246)) ^ ((0x9DDFEA08EB382D69
                                                                      * (v245 ^ (v246 >> 47) ^ v246)) >> 47));
    }
    else
    {
      v186 = sub_1C49CE808(v183, v185, qword_1ED7EAC80);
    }
    v247 = ~(v186 << 32);
    v248 = v186 | ((unint64_t)(37 * v182) << 32);
    v249 = ((v248 + v247) ^ ((v248 + v247) >> 22)) + ~(((v248 + v247) ^ ((v248 + v247) >> 22)) << 13);
    v250 = (9 * (v249 ^ (v249 >> 8))) ^ ((9 * (v249 ^ (v249 >> 8))) >> 15);
    v251 = v250 + ~(v250 << 27);
    v252 = (v251 >> 31) ^ v251;
    v253 = (unint64_t)__src[1];
    v465 = v160;
    if (__src[1])
    {
      v254 = (uint8x8_t)vcnt_s8((int8x8_t)__src[1]);
      v254.i16[0] = vaddlv_u8(v254);
      v255 = v254.u32[0];
      if (v254.u32[0] > 1uLL)
      {
        v1 = (v251 >> 31) ^ v251;
        if (__src[1] <= (void *)v252)
          v1 = v252 % (unint64_t)__src[1];
      }
      else
      {
        v1 = v252 & ((unint64_t)__src[1] + 0xFFFFFFFF);
      }
      v256 = (_DWORD **)*((_QWORD *)__src[0] + v1);
      if (v256)
      {
        v257 = *v256;
        if (*v256)
        {
          v258 = v485[5];
          v259 = *((_DWORD *)v485 + 26);
          while (1)
          {
            v260 = *((_QWORD *)v257 + 1);
            if (v260 == v252)
              break;
            if (v255 > 1)
            {
              if (v260 >= v253)
                v260 %= v253;
            }
            else
            {
              v260 &= v253 - 1;
            }
            if (v260 != v1)
              goto LABEL_357;
LABEL_356:
            v257 = *(_DWORD **)v257;
            if (!v257)
              goto LABEL_357;
          }
          v261 = v257[20];
          v262 = v261 == -1 || v259 == -1;
          if (!v262)
          {
            if (v261 == v259 && !memcmp(*((const void **)v257 + 2), v258, 8 * v257[6]))
              goto LABEL_607;
            goto LABEL_356;
          }
          v263 = v261 != -1;
          v264 = v259 == -1 || v263;
          if (((v263 ^ v264) & 1) == 0)
            goto LABEL_356;
LABEL_607:
          v25 = v475;
          v173 = v482;
          v180 = v485;
LABEL_421:
          v1 = *(_QWORD *)(v463 + 24);
          if (!v1)
          {
            v160 = v465;
            goto LABEL_600;
          }
          v488 = 0;
          v486 = (int *)(v180 + 4);
          v476 = v257 + 28;
LABEL_423:
          if (!__p[1])
            goto LABEL_620;
          v289 = *v486;
          v290 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
          v290.i16[0] = vaddlv_u8(v290);
          if (v290.u32[0] > 1uLL)
          {
            v291 = *v486;
            if (__p[1] <= (void *)v289)
              v291 = v289 % (unint64_t)__p[1];
          }
          else
          {
            v291 = (LODWORD(__p[1]) - 1) & v289;
          }
          v292 = (uint64_t **)*((_QWORD *)__p[0] + v291);
          if (!v292 || (v293 = *v292) == 0)
LABEL_620:
            abort();
          v294 = *(unsigned int *)(v1 + 16);
          while (2)
          {
            v295 = v293[1];
            if (v295 != v289)
            {
              if (v290.u32[0] > 1uLL)
              {
                if ((void *)v295 >= __p[1])
                  v295 %= (unint64_t)__p[1];
              }
              else
              {
                v295 &= (unint64_t)__p[1] - 1;
              }
              if (v295 != v291)
                goto LABEL_620;
LABEL_439:
              v293 = (uint64_t *)*v293;
              if (!v293)
                goto LABEL_620;
              continue;
            }
            break;
          }
          if (*((_DWORD *)v293 + 4) != (_DWORD)v289)
            goto LABEL_439;
          if ((_DWORD)v294)
            v296 = -1;
          else
            v296 = 0;
          v297 = v173 & 0xFFFFFFFF00000000 | v294;
          v298 = (uint64_t)(v293 + 3);
          if (llvm::rdf::RegisterAggr::hasAliasOf((uint64_t)(v293 + 3), v297, v296))
          {
            v299 = (_QWORD *)*((_QWORD *)v2 + 2);
            v300 = llvm::rdf::RegisterAggr::intersectWith(v298, v297, v296);
            v302 = llvm::rdf::PhysicalRegisterInfo::mapTo(v299, v300, v301, *(_DWORD *)(v1 + 16));
            v173 = v302;
            v491 = v303;
            v304 = *(uint64_t **)(v1 + 40);
            if (v304)
            {
              v472 = v1;
              v305 = v302;
              v180 = v485;
              v483 = v302;
              while ((v304[3] & v491) == 0)
              {
LABEL_556:
                v304 = (uint64_t *)*v304;
                if (!v304)
                {
                  v1 = v472;
                  v25 = v475;
LABEL_570:
                  v1 = *(_QWORD *)v1;
                  if (v1)
                    goto LABEL_423;
                  v160 = v465;
                  if ((v488 & 1) != 0)
                  {
                    if (v25 >= (unint64_t)v462)
                    {
                      v352 = (uint64_t)(v25 - (_QWORD)v465) >> 2;
                      v353 = v352 + 1;
                      if ((unint64_t)(v352 + 1) >> 62)
                        goto LABEL_620;
                      if ((v462 - (char *)v465) >> 1 > v353)
                        v353 = (v462 - (char *)v465) >> 1;
                      if ((unint64_t)(v462 - (char *)v465) >= 0x7FFFFFFFFFFFFFFCLL)
                        v354 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v354 = v353;
                      if (v354)
                      {
                        if (v354 >> 62)
                          goto LABEL_782;
                        v355 = v173;
                        v356 = (char *)operator new(4 * v354);
                      }
                      else
                      {
                        v355 = v173;
                        v356 = 0;
                      }
                      v358 = (int *)&v356[4 * v352];
                      *v358 = *v486;
                      v359 = v358 + 1;
                      while ((int *)v25 != v465)
                      {
                        v360 = *(_DWORD *)(v25 - 4);
                        v25 -= 4;
                        *--v358 = v360;
                      }
                      v462 = &v356[4 * v354];
                      if (v465)
                        operator delete(v465);
                      v25 = (unint64_t)v359;
                      v160 = v358;
                      v173 = v355;
                      v180 = v485;
                    }
                    else
                    {
                      *(_DWORD *)v25 = *v486;
                      v25 += 4;
                    }
                  }
LABEL_600:
                  v361 = v180[1];
                  if (v361)
                  {
                    do
                    {
                      v362 = (uint64_t **)v361;
                      v361 = (uint64_t *)*v361;
                    }
                    while (v361);
                  }
                  else
                  {
                    do
                    {
                      v362 = (uint64_t **)v180[2];
                      v262 = *v362 == (uint64_t *)v180;
                      v180 = v362;
                    }
                    while (!v262);
                  }
                  v180 = v362;
                  if (v362 == v467)
                    goto LABEL_613;
                  goto LABEL_318;
                }
              }
              if (v305)
                v306 = v304[3] & v491;
              else
                v306 = 0;
              v307 = *((unsigned int *)v180 + 12);
              v490 = *((_DWORD *)v304 + 4);
              if (!(_DWORD)v307)
              {
LABEL_455:
                v310 = (void *)v305;
                v311 = v306;
                goto LABEL_553;
              }
              v308 = v180[5];
              v309 = 8 * v307;
              while (!*v308)
              {
                ++v308;
                v309 -= 8;
                if (!v309)
                  goto LABEL_455;
              }
              v312 = v306 ^ v305;
              v313 = *(int8x8_t *)(v257 + 26);
              if (v313)
              {
                v314 = (uint8x8_t)vcnt_s8(v313);
                v314.i16[0] = vaddlv_u8(v314);
                if (v314.u32[0] > 1uLL)
                {
                  v315 = v306 ^ v305;
                  if (v312 >= *(_QWORD *)&v313)
                    v315 = v312 % *(_QWORD *)&v313;
                }
                else
                {
                  v315 = (*(_QWORD *)&v313 - 1) & v312;
                }
                v316 = *(uint64_t ***)(*((_QWORD *)v257 + 12) + 8 * v315);
                if (v316)
                {
                  for (ii = *v316; ii; ii = (uint64_t *)*ii)
                  {
                    v318 = ii[1];
                    if (v318 == v312)
                    {
                      if (*((_DWORD *)ii + 4) == (_DWORD)v173 && ii[3] == v306)
                      {
                        v310 = (void *)ii[4];
                        v311 = ii[5];
                        v2 = (llvm::rdf::Liveness *)v479;
                        goto LABEL_553;
                      }
                    }
                    else
                    {
                      if (v314.u32[0] > 1uLL)
                      {
                        if (v318 >= *(_QWORD *)&v313)
                          v318 %= *(_QWORD *)&v313;
                      }
                      else
                      {
                        v318 &= *(_QWORD *)&v313 - 1;
                      }
                      if (v318 != v315)
                        break;
                    }
                  }
                }
              }
              v310 = (void *)llvm::rdf::RegisterAggr::clearIn((uint64_t)v477, v305, v306);
              v311 = v320;
              v321 = *((_QWORD *)v257 + 13);
              if (v321)
              {
                v322 = (uint8x8_t)vcnt_s8((int8x8_t)v321);
                v322.i16[0] = vaddlv_u8(v322);
                if (v322.u32[0] > 1uLL)
                {
                  v3 = v306 ^ v305;
                  if (v312 >= v321)
                    v3 = v312 % v321;
                }
                else
                {
                  v3 = (v321 - 1) & v312;
                }
                v323 = *(uint64_t ***)(*((_QWORD *)v257 + 12) + 8 * v3);
                if (v323)
                {
                  for (jj = *v323; jj; jj = (uint64_t *)*jj)
                  {
                    v325 = jj[1];
                    if (v325 == v312)
                    {
                      if (*((_DWORD *)jj + 4) == (_DWORD)v173 && jj[3] == v306)
                      {
                        v3 = v478;
                        v2 = (llvm::rdf::Liveness *)v479;
                        goto LABEL_552;
                      }
                    }
                    else
                    {
                      if (v322.u32[0] > 1uLL)
                      {
                        if (v325 >= v321)
                          v325 %= v321;
                      }
                      else
                      {
                        v325 &= v321 - 1;
                      }
                      if (v325 != v3)
                        break;
                    }
                  }
                }
              }
              v327 = operator new(0x30uLL);
              *v327 = 0;
              v327[1] = v312;
              v327[2] = v305;
              v327[3] = v306;
              v327[4] = v310;
              v327[5] = v311;
              v328 = (float)(unint64_t)(*((_QWORD *)v257 + 15) + 1);
              v329 = *((float *)v257 + 32);
              if (v321 && (float)(v329 * (float)v321) >= v328)
              {
LABEL_542:
                v346 = *((_QWORD *)v257 + 12);
                v347 = *(_QWORD **)(v346 + 8 * v3);
                v2 = (llvm::rdf::Liveness *)v479;
                if (v347)
                {
                  *v327 = *v347;
                  v3 = v478;
                }
                else
                {
                  *v327 = *v476;
                  *v476 = v327;
                  *(_QWORD *)(v346 + 8 * v3) = v476;
                  v3 = v478;
                  if (!*v327)
                  {
LABEL_551:
                    ++*((_QWORD *)v257 + 15);
                    v173 = v483;
LABEL_552:
                    v180 = v485;
LABEL_553:
                    v511 = v310;
                    v512 = v311;
                    if ((_DWORD)v310 && v311)
                    {
                      sub_1C5221054(v3, v486);
                      v350 = sub_1C5221384(v349 + 8, v310, &v511);
                      LODWORD(v499) = v490;
                      *((_QWORD *)&v499 + 1) = v311;
                      v488 = (sub_1C522178C((uint64_t)(v350 + 24), v490, v311, &v499) | v488) & 1;
                    }
                    goto LABEL_556;
                  }
                  v348 = *(_QWORD *)(*v327 + 8);
                  if ((v321 & (v321 - 1)) != 0)
                  {
                    if (v348 >= v321)
                      v348 %= v321;
                  }
                  else
                  {
                    v348 &= v321 - 1;
                  }
                  v347 = (_QWORD *)(*((_QWORD *)v257 + 12) + 8 * v348);
                }
                *v347 = v327;
                goto LABEL_551;
              }
              v330 = (v321 & (v321 - 1)) != 0;
              if (v321 < 3)
                v330 = 1;
              v331 = v330 | (2 * v321);
              v332 = vcvtps_u32_f32(v328 / v329);
              if (v331 <= v332)
                v333 = (int8x8_t)v332;
              else
                v333 = (int8x8_t)v331;
              if (*(_QWORD *)&v333 == 1)
              {
                v333 = (int8x8_t)2;
              }
              else if ((*(_QWORD *)&v333 & (*(_QWORD *)&v333 - 1)) != 0)
              {
                v333 = (int8x8_t)std::__next_prime(*(_QWORD *)&v333);
                v321 = *((_QWORD *)v257 + 13);
              }
              if (*(_QWORD *)&v333 > v321)
                goto LABEL_508;
              if (*(_QWORD *)&v333 < v321)
              {
                v340 = vcvtps_u32_f32((float)*((unint64_t *)v257 + 15) / *((float *)v257 + 32));
                if (v321 < 3
                  || (v341 = (uint8x8_t)vcnt_s8((int8x8_t)v321), v341.i16[0] = vaddlv_u8(v341), v341.u32[0] > 1uLL))
                {
                  v340 = std::__next_prime(v340);
                }
                else
                {
                  v342 = 1 << -(char)__clz(v340 - 1);
                  if (v340 >= 2)
                    v340 = v342;
                }
                if (*(_QWORD *)&v333 <= v340)
                  v333 = (int8x8_t)v340;
                if (*(_QWORD *)&v333 >= v321)
                {
                  v321 = *((_QWORD *)v257 + 13);
                }
                else
                {
                  if (v333)
                  {
LABEL_508:
                    if (*(_QWORD *)&v333 >> 61)
                      goto LABEL_782;
                    v334 = operator new(8 * *(_QWORD *)&v333);
                    v335 = (void *)*((_QWORD *)v257 + 12);
                    *((_QWORD *)v257 + 12) = v334;
                    if (v335)
                      operator delete(v335);
                    v336 = 0;
                    *((int8x8_t *)v257 + 13) = v333;
                    do
                      *(_QWORD *)(*((_QWORD *)v257 + 12) + 8 * v336++) = 0;
                    while (*(_QWORD *)&v333 != v336);
                    v337 = (_QWORD *)*v476;
                    if (*v476)
                    {
                      v338 = v337[1];
                      v339 = (uint8x8_t)vcnt_s8(v333);
                      v339.i16[0] = vaddlv_u8(v339);
                      if (v339.u32[0] > 1uLL)
                      {
                        if (v338 >= *(_QWORD *)&v333)
                          v338 %= *(_QWORD *)&v333;
                      }
                      else
                      {
                        v338 &= *(_QWORD *)&v333 - 1;
                      }
                      *(_QWORD *)(*((_QWORD *)v257 + 12) + 8 * v338) = v476;
                      v343 = (_QWORD *)*v337;
                      if (*v337)
                      {
                        do
                        {
                          v344 = v343[1];
                          if (v339.u32[0] > 1uLL)
                          {
                            if (v344 >= *(_QWORD *)&v333)
                              v344 %= *(_QWORD *)&v333;
                          }
                          else
                          {
                            v344 &= *(_QWORD *)&v333 - 1;
                          }
                          if (v344 != v338)
                          {
                            v345 = *((_QWORD *)v257 + 12);
                            if (!*(_QWORD *)(v345 + 8 * v344))
                            {
                              *(_QWORD *)(v345 + 8 * v344) = v337;
                              goto LABEL_533;
                            }
                            *v337 = *v343;
                            *v343 = **(_QWORD **)(*((_QWORD *)v257 + 12) + 8 * v344);
                            **(_QWORD **)(*((_QWORD *)v257 + 12) + 8 * v344) = v343;
                            v343 = v337;
                          }
                          v344 = v338;
LABEL_533:
                          v337 = v343;
                          v343 = (_QWORD *)*v343;
                          v338 = v344;
                        }
                        while (v343);
                      }
                    }
                    v321 = (unint64_t)v333;
                    goto LABEL_537;
                  }
                  v351 = (void *)*((_QWORD *)v257 + 12);
                  *((_QWORD *)v257 + 12) = 0;
                  if (v351)
                    operator delete(v351);
                  v321 = 0;
                  *((_QWORD *)v257 + 13) = 0;
                }
              }
LABEL_537:
              if ((v321 & (v321 - 1)) != 0)
              {
                if (v312 >= v321)
                  v3 = v312 % v321;
                else
                  v3 = v312;
              }
              else
              {
                v3 = (v321 - 1) & v312;
              }
              goto LABEL_542;
            }
            v25 = v475;
          }
          else
          {
            v173 = v297;
          }
          v180 = v485;
          goto LABEL_570;
        }
      }
    }
LABEL_357:
    v265 = operator new(0x88uLL);
    v257 = v265;
    *v265 = 0;
    v265[1] = v252;
    v266 = v265 + 4;
    v265[2] = v265 + 4;
    v267 = (void **)(v265 + 2);
    v265[3] = 0x600000000;
    if (v477 == v265 + 2 || (v268 = *((unsigned int *)v485 + 12), !*((_DWORD *)v485 + 12)))
    {
LABEL_365:
      v173 = v482;
      v257[20] = *((_DWORD *)v485 + 26);
      *((_QWORD *)v257 + 11) = v485[14];
      *((_OWORD *)v257 + 6) = 0u;
      *((_OWORD *)v257 + 7) = 0u;
      v257[32] = 1065353216;
      v270 = (float)((unint64_t)v525[1] + 1);
      v25 = v475;
      if (v253 && (float)(v526 * (float)v253) >= v270)
      {
LABEL_411:
        v286 = __src[0];
        v287 = (_QWORD *)*((_QWORD *)__src[0] + v1);
        if (v287)
        {
          *(_QWORD *)v257 = *v287;
          v180 = v485;
        }
        else
        {
          *(void **)v257 = v525[0];
          v525[0] = v257;
          v286[v1] = v525;
          v180 = v485;
          if (!*(_QWORD *)v257)
          {
LABEL_420:
            ++v525[1];
            goto LABEL_421;
          }
          v288 = *(_QWORD *)(*(_QWORD *)v257 + 8);
          if ((v253 & (v253 - 1)) != 0)
          {
            if (v288 >= v253)
              v288 %= v253;
          }
          else
          {
            v288 &= v253 - 1;
          }
          v287 = (char *)__src[0] + 8 * v288;
        }
        *v287 = v257;
        goto LABEL_420;
      }
      v271 = (v253 & (v253 - 1)) != 0;
      if (v253 < 3)
        v271 = 1;
      v272 = v271 | (2 * v253);
      v273 = vcvtps_u32_f32(v270 / v526);
      if (v272 <= v273)
        v274 = (int8x8_t)v273;
      else
        v274 = (int8x8_t)v272;
      if (*(_QWORD *)&v274 == 1)
      {
        v274 = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&v274 & (*(_QWORD *)&v274 - 1)) != 0)
      {
        v274 = (int8x8_t)std::__next_prime(*(_QWORD *)&v274);
      }
      v253 = (unint64_t)__src[1];
      if ((void *)*(_QWORD *)&v274 > __src[1])
        goto LABEL_377;
      if ((void *)*(_QWORD *)&v274 < __src[1])
      {
        v281 = vcvtps_u32_f32((float)(unint64_t)v525[1] / v526);
        if (__src[1] < (void *)3
          || (v282 = (uint8x8_t)vcnt_s8((int8x8_t)__src[1]), v282.i16[0] = vaddlv_u8(v282), v282.u32[0] > 1uLL))
        {
          v281 = std::__next_prime(v281);
        }
        else
        {
          v283 = 1 << -(char)__clz(v281 - 1);
          if (v281 >= 2)
            v281 = v283;
        }
        if (*(_QWORD *)&v274 <= v281)
          v274 = (int8x8_t)v281;
        if (*(_QWORD *)&v274 >= v253)
        {
          v253 = (unint64_t)__src[1];
        }
        else
        {
          if (v274)
          {
LABEL_377:
            if (*(_QWORD *)&v274 >> 61)
LABEL_782:
              sub_1C4764EE4();
            v275 = operator new(8 * *(_QWORD *)&v274);
            v276 = __src[0];
            __src[0] = v275;
            if (v276)
              operator delete(v276);
            v277 = 0;
            __src[1] = (void *)v274;
            do
              *((_QWORD *)__src[0] + v277++) = 0;
            while (*(_QWORD *)&v274 != v277);
            v278 = (_QWORD **)v525[0];
            if (v525[0])
            {
              v279 = *((_QWORD *)v525[0] + 1);
              v280 = (uint8x8_t)vcnt_s8(v274);
              v280.i16[0] = vaddlv_u8(v280);
              if (v280.u32[0] > 1uLL)
              {
                if (v279 >= *(_QWORD *)&v274)
                  v279 %= *(_QWORD *)&v274;
              }
              else
              {
                v279 &= *(_QWORD *)&v274 - 1;
              }
              *((_QWORD *)__src[0] + v279) = v525;
              for (kk = *v278; kk; v279 = v285)
              {
                v285 = kk[1];
                if (v280.u32[0] > 1uLL)
                {
                  if (v285 >= *(_QWORD *)&v274)
                    v285 %= *(_QWORD *)&v274;
                }
                else
                {
                  v285 &= *(_QWORD *)&v274 - 1;
                }
                if (v285 != v279)
                {
                  if (!*((_QWORD *)__src[0] + v285))
                  {
                    *((_QWORD *)__src[0] + v285) = v278;
                    goto LABEL_402;
                  }
                  *v278 = (_QWORD *)*kk;
                  *kk = **((_QWORD **)__src[0] + v285);
                  **((_QWORD **)__src[0] + v285) = kk;
                  kk = v278;
                }
                v285 = v279;
LABEL_402:
                v278 = (_QWORD **)kk;
                kk = (_QWORD *)*kk;
              }
            }
            v253 = (unint64_t)v274;
            goto LABEL_406;
          }
          v357 = __src[0];
          __src[0] = 0;
          if (v357)
            operator delete(v357);
          v253 = 0;
          __src[1] = 0;
        }
      }
LABEL_406:
      if ((v253 & (v253 - 1)) != 0)
      {
        if (v253 <= v252)
          v1 = v252 % v253;
        else
          v1 = v252;
      }
      else
      {
        v1 = ((_DWORD)v253 - 1) & v252;
      }
      goto LABEL_411;
    }
    if (v268 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v265 + 2), (uint64_t)v266, *((unsigned int *)v485 + 12), 8);
      v269 = *((unsigned int *)v485 + 12);
      if (!(_DWORD)v269)
      {
LABEL_364:
        v257[6] = v268;
        goto LABEL_365;
      }
      v266 = *v267;
    }
    else
    {
      v269 = *((unsigned int *)v485 + 12);
    }
    memcpy(v266, *v477, 8 * v269);
    goto LABEL_364;
  }
  v160 = (int *)v25;
LABEL_622:
  v364 = v160;
  if (*((_BYTE *)v2 + 264))
  {
    v421 = llvm::dbgs((llvm *)v16);
    v422 = (void *)*((_QWORD *)v421 + 4);
    if (*((_QWORD *)v421 + 3) - (_QWORD)v422 > 0xDuLL)
    {
      qmemcpy(v422, "Real use map:\n", 14);
      *((_QWORD *)v421 + 4) += 14;
    }
    else
    {
      llvm::raw_ostream::write(v421, "Real use map:\n", 0xEuLL);
    }
    v423 = *((_QWORD *)v2 + 37);
    v424 = *((unsigned int *)v2 + 78);
    v425 = (unsigned int *)(v423 + 48 * v424);
    if (*((_DWORD *)v2 + 76))
    {
      if ((_DWORD)v424)
      {
        v426 = 48 * v424;
        v427 = (unsigned int *)*((_QWORD *)v2 + 37);
        while (*v427 >= 0xFFFFFFFE)
        {
          v427 += 12;
          v426 -= 48;
          if (!v426)
            goto LABEL_739;
        }
      }
      else
      {
        v427 = (unsigned int *)*((_QWORD *)v2 + 37);
      }
    }
    else
    {
LABEL_739:
      v427 = (unsigned int *)(v423 + 48 * v424);
    }
    v428 = (unsigned int *)(v423 + 48 * v424);
    while (v427 != v428)
    {
      LODWORD(v529) = *v427;
      v429 = (llvm *)sub_1C5221C2C((uint64_t)&v530, (uint64_t)(v427 + 2));
      v430 = llvm::dbgs(v429);
      v431 = (_DWORD *)*((_QWORD *)v430 + 4);
      if (*((_QWORD *)v430 + 3) - (_QWORD)v431 > 3uLL)
      {
        *v431 = 543778928;
        *((_QWORD *)v430 + 4) += 4;
      }
      else
      {
        v430 = llvm::raw_ostream::write(v430, "phi ", 4uLL);
      }
      v432 = *(const llvm::rdf::DataFlowGraph **)v2;
      v518 = &v529;
      __dst = v432;
      v433 = llvm::rdf::operator<<((char **)v430, (unsigned int **)&v518);
      v434 = *(const llvm::rdf::DataFlowGraph **)v2;
      v435 = *((_DWORD *)v434 + 69);
      v436 = *((_DWORD *)v434 + 70);
      v437 = *((_QWORD *)v434 + 37);
      v438 = *(_QWORD *)(v437 + 8 * (((_DWORD)v529 - 1) >> v435))
           + 32 * (v436 & ((_DWORD)v529 - 1));
      v518 = &v520;
      __dst = (void *)0x400000000;
      v439 = *(_DWORD *)(v438 + 16);
      if (!v439)
        goto LABEL_756;
      v440 = *(_QWORD *)(v437 + 8 * ((v439 - 1) >> v435)) + 32 * (v436 & (v439 - 1));
      if (v438 == v440)
        goto LABEL_756;
      v441 = 0;
      do
      {
        if ((*(_WORD *)v440 & 0x1F) == 6)
        {
          if (v441 >= HIDWORD(__dst))
          {
            v433 = (llvm *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v518, (uint64_t)&v520, v441 + 1, 16);
            v441 = __dst;
          }
          v442 = (char *)v518 + 16 * v441;
          *v442 = v440;
          v442[1] = v439;
          v441 = (_DWORD)__dst + 1;
          LODWORD(__dst) = (_DWORD)__dst + 1;
        }
        v439 = *(_DWORD *)(v440 + 4);
        if (v439)
          v440 = *(_QWORD *)(*((_QWORD *)v434 + 37) + 8 * ((v439 - 1) >> *((_DWORD *)v434 + 69)))
               + 32 * (*((_DWORD *)v434 + 70) & (v439 - 1));
        else
          v440 = 0;
      }
      while (v438 != v440);
      if (v441)
      {
        v2 = (llvm::rdf::Liveness *)v479;
        v516[0] = (void *)llvm::rdf::RefNode::getRegRef(*(llvm::rdf::RefNode **)v518, *(const llvm::rdf::DataFlowGraph **)v479);
        v516[1] = v452;
        v453 = llvm::dbgs((llvm *)v516[0]);
        v454 = (_BYTE *)*((_QWORD *)v453 + 4);
        if ((unint64_t)v454 >= *((_QWORD *)v453 + 3))
        {
          v453 = llvm::raw_ostream::write(v453, 60);
        }
        else
        {
          *((_QWORD *)v453 + 4) = v454 + 1;
          *v454 = 60;
        }
        v455 = *(const llvm::rdf::DataFlowGraph **)v479;
        v511 = v516;
        v512 = (uint64_t)v455;
        v443 = llvm::rdf::operator<<(v453, (unsigned int **)&v511);
        v456 = (_BYTE *)*((_QWORD *)v443 + 4);
        if ((unint64_t)v456 >= *((_QWORD *)v443 + 3))
        {
          v443 = llvm::raw_ostream::write(v443, 62);
        }
        else
        {
          *((_QWORD *)v443 + 4) = v456 + 1;
          *v456 = 62;
        }
      }
      else
      {
LABEL_756:
        v443 = llvm::dbgs(v433);
        v444 = (_DWORD *)*((_QWORD *)v443 + 4);
        if (*((_QWORD *)v443 + 3) - (_QWORD)v444 > 6uLL)
        {
          *(_DWORD *)((char *)v444 + 3) = 1046963570;
          *v444 = 1919905340;
          *((_QWORD *)v443 + 4) += 7;
        }
        else
        {
          v443 = llvm::raw_ostream::write(v443, "<noreg>", 7uLL);
        }
        v2 = (llvm::rdf::Liveness *)v479;
      }
      v445 = llvm::dbgs(v443);
      v446 = (_DWORD *)*((_QWORD *)v445 + 4);
      if (*((_QWORD *)v445 + 3) - (_QWORD)v446 > 3uLL)
      {
        *v446 = 540945696;
        *((_QWORD *)v445 + 4) += 4;
      }
      else
      {
        v445 = llvm::raw_ostream::write(v445, " -> ", 4uLL);
      }
      v447 = *(const llvm::rdf::DataFlowGraph **)v2;
      v516[0] = &v530;
      v516[1] = v447;
      v448 = llvm::rdf::operator<<(v445, v516);
      v449 = (_BYTE *)*((_QWORD *)v448 + 4);
      if ((unint64_t)v449 >= *((_QWORD *)v448 + 3))
      {
        llvm::raw_ostream::write(v448, 10);
      }
      else
      {
        *((_QWORD *)v448 + 4) = v449 + 1;
        *v449 = 10;
      }
      if (v518 != &v520)
        free(v518);
      sub_1C521ECF4((uint64_t)&v530);
      v450 = v427 + 12;
      while (v450 != v425)
      {
        v451 = *v450;
        v450 += 12;
        if (v451 <= 0xFFFFFFFD)
        {
          v427 = v450 - 12;
          goto LABEL_771;
        }
      }
      v427 = v425;
LABEL_771:
      ;
    }
  }
  v365 = v525[0];
  if (v525[0])
  {
    do
    {
      v366 = (_QWORD *)*v365;
      v367 = (_QWORD *)v365[14];
      if (v367)
      {
        do
        {
          v368 = (_QWORD *)*v367;
          operator delete(v367);
          v367 = v368;
        }
        while (v368);
      }
      v369 = (void *)v365[12];
      v365[12] = 0;
      if (v369)
        operator delete(v369);
      v370 = (_QWORD *)v365[2];
      if (v370 != v365 + 4)
        free(v370);
      operator delete(v365);
      v365 = v366;
    }
    while (v366);
  }
  v371 = __src[0];
  __src[0] = 0;
  if (v371)
    operator delete(v371);
  v372 = v507[0];
  if (v507[0])
  {
    do
    {
      v373 = (_QWORD *)*v372;
      v374 = (_QWORD *)v372[3];
      if (v374 != v372 + 5)
        free(v374);
      operator delete(v372);
      v372 = v373;
    }
    while (v373);
  }
  v375 = __p[0];
  __p[0] = 0;
  if (v375)
    operator delete(v375);
  if (v364)
    operator delete(v364);
  sub_1C5221014(v510[0]);
  if (v533 != &v535)
    free(v533);
  if (v536 != (char *)v538)
    free(v536);
}

void llvm::rdf::Liveness::computeLiveIns(uint64_t **this)
{
  char *v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  char *v6;
  char *v7;
  void *v8;
  _BYTE *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  BOOL v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  BOOL v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t **v37;
  uint64_t **v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  unint64_t *v42;
  unint64_t *v43;
  _QWORD **v44;
  _QWORD *v45;
  uint64_t *v46;
  _QWORD **v47;
  uint64_t **v48;
  _QWORD *v49;
  _QWORD **v50;
  BOOL v51;
  uint64_t *v52;
  uint64_t **v53;
  llvm *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t **v57;
  uint64_t v58;
  uint64_t *v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  _QWORD *v64;
  char *v65;
  char *v66;
  uint64_t *i;
  uint64_t *v68;
  uint64_t v69;
  void *v70;
  llvm::rdf::Liveness *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  _QWORD *v79;
  uint64_t *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int v87;
  _QWORD *v88;
  char *v89;
  char *v90;
  char v91;
  llvm::rdf::RefNode *v92;
  unint64_t v93;
  char *v94;
  char *j;
  uint64_t **v96;
  unint64_t v97;
  uint64_t v98;
  llvm::rdf::RefNode *v99;
  char *v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  llvm::rdf::RefNode *v110;
  unsigned int v111;
  uint64_t *v112;
  int v113;
  int RegRef;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  void **v120;
  void **v121;
  uint64_t *v122;
  llvm *v123;
  void *v124;
  llvm::rdf::Liveness *v125;
  uint64_t **v126;
  _QWORD *k;
  llvm *v128;
  llvm::raw_ostream *v129;
  _DWORD *v130;
  unint64_t v131;
  llvm::raw_ostream *v132;
  int v133;
  _DWORD *v134;
  uint64_t *v135;
  _BYTE *v136;
  llvm::rdf::Liveness *v137;
  llvm::rdf::Liveness *v138;
  llvm *v139;
  llvm::raw_ostream *v140;
  _DWORD *v141;
  unint64_t v142;
  llvm::raw_ostream *v143;
  int v144;
  _DWORD *v145;
  uint64_t *v146;
  _BYTE *v147;
  llvm::rdf::Liveness *v148;
  llvm::rdf::Liveness *v149;
  unsigned __int16 *v150;
  unsigned __int16 *v151;
  __n128 *v152;
  __n128 *v153;
  __n128 *v154;
  __n128 *v155;
  unsigned __int32 v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  char *v161;
  __n128 *v162;
  __n128 *v163;
  unint64_t v164;
  uint64_t v165;
  llvm *v166;
  llvm *v167;
  uint64_t v168;
  llvm *v169;
  uint64_t (**v170)(llvm *);
  __n128 *m;
  llvm *v172;
  _BYTE *v173;
  uint64_t *v174;
  llvm *v175;
  uint64_t v176;
  uint64_t **v177;
  __n128 *v178;
  void **v179;
  unint64_t v180;
  void *v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  char *v186;
  __n128 *v187;
  __n128 *v188;
  __n128 *v189;
  void **v190;
  void **v191;
  unint64_t v192;
  uint64_t v193;
  llvm *v194;
  llvm *v195;
  uint64_t v196;
  __n128 *n;
  llvm *v198;
  _BYTE *v199;
  uint64_t *v200;
  llvm *v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t *v205;
  uint64_t *v206;
  char *v207;
  unsigned int *v208;
  char *v209;
  char *v210;
  llvm *v211;
  llvm::rdf::RefNode *v212;
  llvm::rdf::RefNode *v213;
  uint64_t *v214;
  uint64_t *v215;
  unsigned int v216;
  uint64_t *v217;
  _QWORD *v218;
  __int128 v219;
  int v220[2];
  uint64_t v221;
  __int128 v222;
  uint64_t *v223;
  _QWORD *v224[2];
  int v225[2];
  unsigned int v226;
  uint64_t **v227;
  uint64_t *v228;
  uint64_t v229;
  void *v230;
  uint64_t v231;
  _DWORD v232[14];
  uint64_t *v233;
  void *v234[2];
  __int128 v235;
  int v236;
  void *v237[2];
  _BYTE v238[16];
  int v239;
  void *v240[2];
  uint64_t v241;
  void **v242;
  int v243;
  uint64_t *v244;
  _QWORD **v245;
  _QWORD *v246;
  unint64_t *v247;
  unint64_t *v248;
  uint64_t v249;
  uint64_t v250;

  v250 = *MEMORY[0x1E0C80C00];
  v2 = (char *)(this + 34);
  sub_1C6209F90((_DWORD *)this + 68);
  llvm::rdf::CodeNode::members((_DWORD *)(*this)[32], (const llvm::rdf::DataFlowGraph *)*this, (uint64_t)&v244);
  v3 = v244;
  if ((_DWORD)v245)
  {
    v212 = (llvm::rdf::RefNode *)&v244[2 * v245];
    do
    {
      v215 = v3;
      v4 = *v3;
      v5 = *(void **)(v4 + 8);
      llvm::rdf::CodeNode::members((_DWORD *)v4, (const llvm::rdf::DataFlowGraph *)*this, (uint64_t)v240);
      v6 = (char *)v240[0];
      v7 = (char *)v240[0] + 16 * LODWORD(v240[1]);
      if (LODWORD(v240[1]))
      {
        do
        {
          v8 = (void *)*((unsigned int *)v6 + 2);
          llvm::rdf::CodeNode::members(*(_DWORD **)v6, (const llvm::rdf::DataFlowGraph *)*this, (uint64_t)v237);
          v9 = v237[0];
          if (LODWORD(v237[1]))
          {
            v10 = 16 * LODWORD(v237[1]);
            v11 = (unsigned int *)((char *)v237[0] + 8);
            do
            {
              v12 = *v11;
              v11 += 4;
              v230 = (void *)v12;
              v231 = (uint64_t)v5;
              sub_1C5221E60((uint64_t)v234, (uint64_t)v2, &v230, &v231);
              v10 -= 16;
            }
            while (v10);
            v9 = v237[0];
          }
          if (v9 != v238)
            free(v9);
          v234[0] = v8;
          v234[1] = v5;
          sub_1C5221E60((uint64_t)v237, (uint64_t)v2, v234, &v234[1]);
          v6 += 16;
        }
        while (v6 != v7);
        v6 = (char *)v240[0];
      }
      if (v6 != (char *)&v241)
        free(v6);
      v3 = v215 + 2;
    }
    while (v215 + 2 != (uint64_t *)v212);
    v3 = v244;
  }
  if (v3 != (uint64_t *)&v246)
    free(v3);
  v13 = **this;
  v228 = 0;
  v229 = 0;
  v227 = &v228;
  v14 = (_QWORD *)(v13 + 320);
  v203 = v13;
  v15 = *(_QWORD **)(v13 + 328);
  if (v15 != (_QWORD *)(v13 + 320))
  {
    do
    {
      v16 = this[4];
      v17 = (_QWORD *)v16[32];
      if (v17)
      {
        v18 = v16 + 32;
        v19 = v16 + 32;
        do
        {
          v20 = v17[4];
          v21 = v20 >= (unint64_t)v15;
          if (v20 >= (unint64_t)v15)
            v22 = v17;
          else
            v22 = v17 + 1;
          if (v21)
            v19 = v17;
          v17 = (_QWORD *)*v22;
        }
        while (*v22);
        if (v19 != v18 && v19[4] <= (unint64_t)v15)
        {
          v23 = (_QWORD *)v19[5];
          v244 = 0;
          v245 = 0;
          LODWORD(v246) = 0;
          v247 = 0;
          v248 = 0;
          v249 = 0;
          sub_1C5214654((uint64_t)&v244, v23, v19 + 6);
          v25 = v247;
          v24 = v248;
          if (v248 != v247)
          {
            v26 = 0;
            v27 = 0;
            do
            {
              v28 = this[4];
              v29 = (_QWORD *)v28[32];
              if (v29)
              {
                v30 = v25[v26];
                v31 = v28 + 32;
                v32 = v31;
                do
                {
                  v33 = v29[4];
                  v34 = v33 >= v30;
                  if (v33 >= v30)
                    v35 = v29;
                  else
                    v35 = v29 + 1;
                  if (v34)
                    v32 = v29;
                  v29 = (_QWORD *)*v35;
                }
                while (*v35);
                if (v32 != v31 && v32[4] <= v30)
                {
                  sub_1C5214654((uint64_t)&v244, (_QWORD *)v32[5], v32 + 6);
                  v25 = v247;
                  v24 = v248;
                }
              }
              v26 = ++v27;
            }
            while (v27 < (unint64_t)(v24 - v25));
          }
          v240[0] = v15;
          sub_1C4A07D1C((uint64_t)&v244, v240);
          v36 = v228;
          v37 = &v228;
          v38 = &v228;
          if (v228)
          {
            while (1)
            {
              while (1)
              {
                v38 = (uint64_t **)v36;
                v39 = v36[4];
                if (v39 <= (unint64_t)v15)
                  break;
                v36 = *v38;
                v37 = v38;
                if (!*v38)
                  goto LABEL_52;
              }
              if (v39 >= (unint64_t)v15)
                break;
              v36 = v38[1];
              if (!v36)
              {
                v37 = v38 + 1;
                goto LABEL_52;
              }
            }
          }
          else
          {
LABEL_52:
            v40 = (uint64_t *)v38;
            v38 = (uint64_t **)operator new(0x40uLL);
            v38[7] = 0;
            v38[6] = 0;
            v38[4] = v15;
            v38[5] = (uint64_t *)(v38 + 6);
            *v38 = 0;
            v38[1] = 0;
            v38[2] = v40;
            *v37 = (uint64_t *)v38;
            v41 = (uint64_t *)v38;
            if (*v227)
            {
              v227 = (uint64_t **)*v227;
              v41 = *v37;
            }
            sub_1C4768E74(v228, v41);
            ++v229;
          }
          v42 = v247;
          v43 = v248;
          if (v247 != v248)
          {
            v44 = v38 + 5;
            v45 = v38 + 6;
            do
            {
              sub_1C514F13C(v44, v45, v42, (uint64_t *)v42);
              ++v42;
            }
            while (v42 != v43);
            v42 = v247;
          }
          if (v42)
          {
            v248 = v42;
            operator delete(v42);
          }
          MEMORY[0x1CAA32FB4](v244, 8);
        }
      }
      v15 = (_QWORD *)v15[1];
    }
    while (v15 != v14);
    v46 = (uint64_t *)v227;
    if (v227 != &v228)
    {
      do
      {
        v244 = (uint64_t *)v46[4];
        sub_1C514F0A8((uint64_t)&v245, v46 + 5);
        v47 = v245;
        if (v245 != &v246)
        {
          do
          {
            v237[0] = v47[4];
            v240[0] = v237;
            v48 = sub_1C514F1E8(this + 40, (unint64_t *)v237, (uint64_t)&std::piecewise_construct, (uint64_t ***)v240);
            sub_1C47BC21C(v48 + 5, (unint64_t *)&v244, &v244);
            v49 = v47[1];
            if (v49)
            {
              do
              {
                v50 = (_QWORD **)v49;
                v49 = (_QWORD *)*v49;
              }
              while (v49);
            }
            else
            {
              do
              {
                v50 = (_QWORD **)v47[2];
                v51 = *v50 == v47;
                v47 = v50;
              }
              while (!v51);
            }
            v47 = v50;
          }
          while (v50 != &v246);
        }
        sub_1C47655E8((uint64_t)&v245, v246);
        v52 = (uint64_t *)v46[1];
        if (v52)
        {
          do
          {
            v53 = (uint64_t **)v52;
            v52 = (uint64_t *)*v52;
          }
          while (v52);
        }
        else
        {
          do
          {
            v53 = (uint64_t **)v46[2];
            v51 = *v53 == v46;
            v46 = (uint64_t *)v53;
          }
          while (!v51);
        }
        v46 = (uint64_t *)v53;
      }
      while (v53 != &v228);
    }
  }
  v204 = v14;
  llvm::rdf::Liveness::computePhiInfo((llvm::rdf::Liveness *)this);
  v54 = (llvm *)llvm::rdf::CodeNode::members((_DWORD *)(*this)[32], (const llvm::rdf::DataFlowGraph *)*this, (uint64_t)&v244);
  if ((_DWORD)v245)
  {
    v55 = v244;
    v56 = &v244[2 * v245];
    v57 = this + 43;
    v214 = v56;
    do
    {
      v58 = *v55;
      v234[0] = *(void **)(*v55 + 8);
      v54 = (llvm *)sub_1C5221F50(v57, (unint64_t)v234[0], v234);
      v59 = *this;
      v240[0] = &v241;
      v240[1] = (void *)0x400000000;
      v60 = *(_DWORD *)(v58 + 16);
      if (v60)
      {
        v61 = *(_QWORD *)(v59[37] + 8 * ((v60 - 1) >> *((_DWORD *)v59 + 69))) + 32 * ((_DWORD)v59[35] & (v60 - 1));
        if (v58 != v61)
        {
          v62 = 0;
          v63 = (uint64_t)v54 + 40;
          do
          {
            if ((*(_WORD *)v61 & 0x1F) == 0xD)
            {
              if (v62 >= HIDWORD(v240[1]))
              {
                v54 = (llvm *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v240, (uint64_t)&v241, v62 + 1, 16);
                v62 = v240[1];
              }
              v64 = (char *)v240[0] + 16 * v62;
              *v64 = v61;
              v64[1] = v60;
              v62 = ++LODWORD(v240[1]);
            }
            v60 = *(_DWORD *)(v61 + 4);
            if (v60)
              v61 = *(_QWORD *)(v59[37] + 8 * ((v60 - 1) >> *((_DWORD *)v59 + 69)))
                  + 32 * ((_DWORD)v59[35] & (v60 - 1));
            else
              v61 = 0;
          }
          while (v58 != v61);
          v65 = (char *)v240[0];
          if (v62)
          {
            v66 = (char *)v240[0] + 16 * v62;
            do
            {
              *(_OWORD *)v237 = *(_OWORD *)v65;
              sub_1C5221054((uint64_t)(this + 37), (int *)&v237[1]);
              for (i = (uint64_t *)*((_QWORD *)v54 + 3); i; i = (uint64_t *)*i)
              {
                v54 = (llvm *)sub_1C5221384(v63, *((_DWORD *)i + 4), (_DWORD *)i + 4);
                v68 = (uint64_t *)i[5];
                if (v68)
                {
                  v69 = (uint64_t)v54 + 24;
                  do
                  {
                    sub_1C522202C(v69, v68[2], v68[3], (_OWORD *)v68 + 1);
                    v68 = (uint64_t *)*v68;
                  }
                  while (v68);
                }
              }
              v65 += 16;
            }
            while (v65 != v66);
            v65 = (char *)v240[0];
            v56 = v214;
          }
          v57 = this + 43;
          if (v65 != (char *)&v241)
            free(v65);
        }
      }
      v55 += 2;
    }
    while (v55 != v56);
  }
  if (*((_BYTE *)this + 264))
  {
    v54 = llvm::dbgs(v54);
    v70 = (void *)*((_QWORD *)v54 + 4);
    if (*((_QWORD *)v54 + 3) - (_QWORD)v70 > 0x16uLL)
    {
      qmemcpy(v70, "Phi live-on-entry map:\n", 23);
      *((_QWORD *)v54 + 4) += 23;
    }
    else
    {
      v54 = llvm::raw_ostream::write(v54, "Phi live-on-entry map:\n", 0x17uLL);
    }
    v71 = (llvm::rdf::Liveness *)this[43];
    if (v71 != (llvm::rdf::Liveness *)(this + 44))
    {
      do
      {
        v128 = llvm::dbgs(v54);
        v129 = v128;
        v130 = (_DWORD *)*((_QWORD *)v128 + 4);
        if (*((_QWORD *)v128 + 3) - (_QWORD)v130 > 6uLL)
        {
          *(_DWORD *)((char *)v130 + 3) = 589327203;
          *v130 = 1668246626;
          *((_QWORD *)v128 + 4) += 7;
        }
        else
        {
          v129 = llvm::raw_ostream::write(v128, "block #", 7uLL);
        }
        v131 = *(int *)(*((_QWORD *)v71 + 4) + 24);
        if ((v131 & 0x80000000) != 0)
        {
          v131 = -(uint64_t)v131;
          v132 = v129;
          v133 = 1;
        }
        else
        {
          v132 = v129;
          v133 = 0;
        }
        sub_1C5E21910(v132, v131, 0, 0, v133);
        v134 = (_DWORD *)*((_QWORD *)v129 + 4);
        if (*((_QWORD *)v129 + 3) - (_QWORD)v134 > 3uLL)
        {
          *v134 = 540945696;
          *((_QWORD *)v129 + 4) += 4;
        }
        else
        {
          v129 = llvm::raw_ostream::write(v129, " -> ", 4uLL);
        }
        v135 = *this;
        v240[0] = (char *)v71 + 40;
        v240[1] = v135;
        v54 = llvm::rdf::operator<<(v129, v240);
        v136 = (_BYTE *)*((_QWORD *)v129 + 4);
        if ((unint64_t)v136 >= *((_QWORD *)v129 + 3))
        {
          v54 = llvm::raw_ostream::write(v129, 10);
        }
        else
        {
          *((_QWORD *)v129 + 4) = v136 + 1;
          *v136 = 10;
        }
        v137 = (llvm::rdf::Liveness *)*((_QWORD *)v71 + 1);
        if (v137)
        {
          do
          {
            v138 = v137;
            v137 = *(llvm::rdf::Liveness **)v137;
          }
          while (v137);
        }
        else
        {
          do
          {
            v138 = (llvm::rdf::Liveness *)*((_QWORD *)v71 + 2);
            v51 = *(_QWORD *)v138 == (_QWORD)v71;
            v71 = v138;
          }
          while (!v51);
        }
        v71 = v138;
      }
      while (v138 != (llvm::rdf::Liveness *)(this + 44));
    }
  }
  if ((_DWORD)v245)
  {
    v72 = v244;
    v73 = &v244[2 * v245];
    v206 = v73;
    do
    {
      v74 = *v72;
      v75 = *this;
      v240[0] = &v241;
      v240[1] = (void *)0x400000000;
      v76 = *(_DWORD *)(v74 + 16);
      if (v76)
      {
        v77 = *(_QWORD *)(v75[37] + 8 * ((v76 - 1) >> *((_DWORD *)v75 + 69))) + 32 * ((_DWORD)v75[35] & (v76 - 1));
        if (v74 != v77)
        {
          v78 = 0;
          do
          {
            if ((*(_WORD *)v77 & 0x1F) == 0xD)
            {
              if (v78 >= HIDWORD(v240[1]))
              {
                v80 = v72;
                v54 = (llvm *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v240, (uint64_t)&v241, v78 + 1, 16);
                v73 = v206;
                v72 = v80;
                v78 = v240[1];
              }
              v79 = (char *)v240[0] + 16 * v78;
              *v79 = v77;
              v79[1] = v76;
              v78 = ++LODWORD(v240[1]);
            }
            v76 = *(_DWORD *)(v77 + 4);
            if (v76)
              v77 = *(_QWORD *)(v75[37] + 8 * ((v76 - 1) >> *((_DWORD *)v75 + 69)))
                  + 32 * ((_DWORD)v75[35] & (v76 - 1));
            else
              v77 = 0;
          }
          while (v74 != v77);
          v81 = (char *)v240[0];
          if (v78)
          {
            v205 = v72;
            v207 = (char *)v240[0] + 16 * v78;
            do
            {
              v82 = *(_QWORD *)v81;
              *(_QWORD *)v225 = *(_QWORD *)v81;
              v83 = *((unsigned int *)v81 + 2);
              v226 = *((_DWORD *)v81 + 2);
              sub_1C5221054((uint64_t)(this + 37), (int *)&v226);
              v211 = v54;
              if (*((_QWORD *)v54 + 4))
              {
                v208 = (unsigned int *)v81;
                v224[0] = 0;
                v224[1] = 0;
                v223 = (uint64_t *)v224;
                v84 = *this;
                v237[0] = v238;
                v237[1] = (void *)0x400000000;
                v85 = *(_DWORD *)(v82 + 16);
                if (v85)
                {
                  v86 = *(_QWORD *)(v84[37] + 8 * ((v85 - 1) >> *((_DWORD *)v84 + 69)))
                      + 32 * ((_DWORD)v84[35] & (v85 - 1));
                  if (v82 != v86)
                  {
                    v87 = 0;
                    do
                    {
                      if ((*(_WORD *)v86 & 0x1F) == 0xA)
                      {
                        if (v87 >= HIDWORD(v237[1]))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v237, (uint64_t)v238, v87 + 1, 16);
                          v87 = v237[1];
                        }
                        v88 = (char *)v237[0] + 16 * v87;
                        *v88 = v86;
                        v88[1] = v85;
                        v87 = ++LODWORD(v237[1]);
                      }
                      v85 = *(_DWORD *)(v86 + 4);
                      if (v85)
                        v86 = *(_QWORD *)(v84[37] + 8 * ((v85 - 1) >> *((_DWORD *)v84 + 69)))
                            + 32 * ((_DWORD)v84[35] & (v85 - 1));
                      else
                        v86 = 0;
                    }
                    while (v82 != v86);
                    v89 = (char *)v237[0];
                    if (v87)
                    {
                      v90 = (char *)v237[0] + 16 * v87;
                      v209 = v90;
                      do
                      {
                        v222 = *(_OWORD *)v89;
                        sub_1C4778ED8(&v223, (unsigned int *)&v222 + 2, (_DWORD *)&v222 + 2);
                        if ((v91 & 1) != 0)
                        {
                          v92 = (llvm::rdf::RefNode *)v222;
                          if (*(_DWORD *)(v222 + 8))
                          {
                            v216 = DWORD2(v222);
                            v93 = *(_QWORD *)(*(_QWORD *)((*this)[37]
                                                        + 8
                                                        * ((*(_DWORD *)(v222 + 16) - 1) >> *((_DWORD *)*this + 69)))
                                            + 32 * ((_DWORD)(*this)[35] & (*(_DWORD *)(v222 + 16) - 1))
                                            + 8);
                            v94 = (char *)this[47];
                            for (j = (char *)(this + 47); ; v94 = *(char **)j)
                            {
                              v96 = (uint64_t **)j;
                              if (!v94)
                                break;
                              while (1)
                              {
                                j = v94;
                                v97 = *((_QWORD *)v94 + 4);
                                if (v97 > v93)
                                  break;
                                if (v97 >= v93)
                                  goto LABEL_147;
                                v94 = (char *)*((_QWORD *)j + 1);
                                if (!v94)
                                {
                                  v96 = (uint64_t **)(j + 8);
                                  goto LABEL_144;
                                }
                              }
                            }
LABEL_144:
                            v98 = v83;
                            v99 = (llvm::rdf::RefNode *)v222;
                            v100 = j;
                            j = (char *)operator new(0x50uLL);
                            *((_QWORD *)j + 4) = v93;
                            *(_OWORD *)(j + 40) = 0u;
                            *(_OWORD *)(j + 56) = 0u;
                            *((_DWORD *)j + 18) = 1065353216;
                            *(_QWORD *)j = 0;
                            *((_QWORD *)j + 1) = 0;
                            *((_QWORD *)j + 2) = v100;
                            *v96 = (uint64_t *)j;
                            v101 = (uint64_t *)*this[46];
                            v102 = (uint64_t *)j;
                            if (v101)
                            {
                              this[46] = v101;
                              v102 = *v96;
                            }
                            sub_1C4768E74(this[47], v102);
                            this[48] = (uint64_t *)((char *)this[48] + 1);
                            v92 = v99;
                            v83 = v98;
LABEL_147:
                            v103 = (uint64_t *)*((_QWORD *)v211 + 3);
                            if (v103)
                            {
                              v210 = v89;
                              v104 = (uint64_t)(j + 40);
                              v213 = v92;
                              do
                              {
                                v105 = (_QWORD *)v103[5];
                                if (v105)
                                {
                                  v217 = v103;
                                  do
                                  {
                                    v106 = v105[3];
                                    v220[0] = *((_DWORD *)v103 + 4);
                                    if (v220[0])
                                      v107 = v106;
                                    else
                                      v107 = 0;
                                    v221 = v107;
                                    llvm::rdf::Liveness::getAllReachingDefs(v92, (uint64_t)this, v220[0], v107, v216, 1, 0, (uint64_t)(this + 23), (unsigned int *)v234);
                                    v108 = (char *)v234[0];
                                    v109 = (char *)v234[0] + 16 * LODWORD(v234[1]);
                                    if (LODWORD(v234[1]))
                                    {
                                      do
                                      {
                                        v110 = *(llvm::rdf::RefNode **)v108;
                                        v111 = *((_DWORD *)v108 + 2);
                                        v112 = this[2];
                                        v113 = *(_DWORD *)(*v112 + 44);
                                        v230 = v232;
                                        v231 = 0x600000000;
                                        sub_1C4765AA4((char *)&v230, (v113 + 63) >> 6, 0);
                                        v232[12] = v113;
                                        v233 = v112;
                                        RegRef = llvm::rdf::RefNode::getRegRef(v110, (const llvm::rdf::DataFlowGraph *)*this);
                                        v116 = llvm::rdf::RegisterAggr::insert((uint64_t)&v230, RegRef, v115);
                                        LODWORD(v110) = v220[0];
                                        llvm::rdf::RegisterAggr::intersect(v116, v220[0], v221);
                                        llvm::rdf::RegisterAggr::makeRegRef((llvm::rdf::RegisterAggr *)&v230);
                                        v118 = v117;
                                        v119 = sub_1C5221384(v104, v110, v220);
                                        LODWORD(v219) = v111;
                                        *((_QWORD *)&v219 + 1) = v118;
                                        sub_1C522178C((uint64_t)(v119 + 24), v111, v118, &v219);
                                        if (v230 != v232)
                                          free(v230);
                                        v108 += 16;
                                      }
                                      while (v108 != v109);
                                      v108 = (char *)v234[0];
                                    }
                                    if (v108 != (char *)&v235)
                                      free(v108);
                                    v105 = (_QWORD *)*v105;
                                    v92 = v213;
                                    v103 = v217;
                                  }
                                  while (v105);
                                }
                                v103 = (uint64_t *)*v103;
                              }
                              while (v103);
                              v83 = v226;
                              v89 = v210;
                            }
                            llvm::rdf::DataFlowGraph::getRelatedRefs((llvm::rdf::DataFlowGraph *)*this, v92, *(_WORD **)v225, v83, v216, (uint64_t)v234);
                            v120 = (void **)v234[0];
                            v121 = (void **)((char *)v234[0] + 16 * LODWORD(v234[1]));
                            if (LODWORD(v234[1]))
                            {
                              do
                              {
                                v230 = *v120;
                                LODWORD(v231) = *((_DWORD *)v120 + 2);
                                sub_1C4778ED8(&v223, (unsigned int *)&v231, &v231);
                                v120 += 2;
                              }
                              while (v120 != v121);
                              v120 = (void **)v234[0];
                            }
                            if (v120 != (void **)&v235)
                              free(v120);
                            v90 = v209;
                          }
                        }
                        v89 += 16;
                      }
                      while (v89 != v90);
                      v89 = (char *)v237[0];
                    }
                    if (v89 != v238)
                      free(v89);
                  }
                }
                sub_1C47655E8((uint64_t)&v223, v224[0]);
                v81 = (char *)v208;
              }
              v81 += 16;
            }
            while (v81 != v207);
            v81 = (char *)v240[0];
            v73 = v206;
            v72 = v205;
          }
          if (v81 != (char *)&v241)
          {
            v122 = v72;
            free(v81);
            v73 = v206;
            v72 = v122;
          }
        }
      }
      v72 += 2;
    }
    while (v72 != v73);
  }
  if (*((_BYTE *)this + 264))
  {
    v123 = llvm::dbgs(v54);
    v124 = (void *)*((_QWORD *)v123 + 4);
    if (*((_QWORD *)v123 + 3) - (_QWORD)v124 > 0x15uLL)
    {
      qmemcpy(v124, "Phi live-on-exit map:\n", 22);
      *((_QWORD *)v123 + 4) += 22;
    }
    else
    {
      v123 = llvm::raw_ostream::write(v123, "Phi live-on-exit map:\n", 0x16uLL);
    }
    v125 = (llvm::rdf::Liveness *)this[46];
    if (v125 != (llvm::rdf::Liveness *)(this + 47))
    {
      do
      {
        v139 = llvm::dbgs(v123);
        v140 = v139;
        v141 = (_DWORD *)*((_QWORD *)v139 + 4);
        if (*((_QWORD *)v139 + 3) - (_QWORD)v141 > 6uLL)
        {
          *(_DWORD *)((char *)v141 + 3) = 589327203;
          *v141 = 1668246626;
          *((_QWORD *)v139 + 4) += 7;
        }
        else
        {
          v140 = llvm::raw_ostream::write(v139, "block #", 7uLL);
        }
        v142 = *(int *)(*((_QWORD *)v125 + 4) + 24);
        if ((v142 & 0x80000000) != 0)
        {
          v142 = -(uint64_t)v142;
          v143 = v140;
          v144 = 1;
        }
        else
        {
          v143 = v140;
          v144 = 0;
        }
        sub_1C5E21910(v143, v142, 0, 0, v144);
        v145 = (_DWORD *)*((_QWORD *)v140 + 4);
        if (*((_QWORD *)v140 + 3) - (_QWORD)v145 > 3uLL)
        {
          *v145 = 540945696;
          *((_QWORD *)v140 + 4) += 4;
        }
        else
        {
          v140 = llvm::raw_ostream::write(v140, " -> ", 4uLL);
        }
        v146 = *this;
        v240[0] = (char *)v125 + 40;
        v240[1] = v146;
        v123 = llvm::rdf::operator<<(v140, v240);
        v147 = (_BYTE *)*((_QWORD *)v140 + 4);
        if ((unint64_t)v147 >= *((_QWORD *)v140 + 3))
        {
          v123 = llvm::raw_ostream::write(v140, 10);
        }
        else
        {
          *((_QWORD *)v140 + 4) = v147 + 1;
          *v147 = 10;
        }
        v148 = (llvm::rdf::Liveness *)*((_QWORD *)v125 + 1);
        if (v148)
        {
          do
          {
            v149 = v148;
            v148 = *(llvm::rdf::Liveness **)v148;
          }
          while (v148);
        }
        else
        {
          do
          {
            v149 = (llvm::rdf::Liveness *)*((_QWORD *)v125 + 2);
            v51 = *(_QWORD *)v149 == (_QWORD)v125;
            v125 = v149;
          }
          while (!v51);
        }
        v125 = v149;
      }
      while (v149 != (llvm::rdf::Liveness *)(this + 47));
    }
  }
  *(_OWORD *)v234 = 0u;
  v235 = 0u;
  v236 = 1065353216;
  llvm::rdf::Liveness::traverse((uint64_t)this, *(llvm::MachineBasicBlock **)(v203 + 328), (uint64_t)v234);
  v126 = sub_1C521EBA4(this + 15, *(_QWORD *)(v203 + 328), *(_QWORD *)(v203 + 328), (uint64_t)(this + 5));
  llvm::rdf::RegisterAggr::insert((llvm::rdf::RegisterAggr *)(v126 + 5), (const llvm::rdf::RegisterAggr *)(*this + 22));
  if (*((_BYTE *)this + 264))
  {
    for (k = *(_QWORD **)(v203 + 328); k != v204; k = (_QWORD *)v218[1])
    {
      v151 = (unsigned __int16 *)k[19];
      v150 = (unsigned __int16 *)k[20];
      v218 = k;
      if (v150 == v151)
      {
        v152 = 0;
        v153 = 0;
        v154 = 0;
      }
      else
      {
        v154 = 0;
        v155 = 0;
        v152 = 0;
        do
        {
          v156 = *v151;
          if (*v151)
            v157 = *((_QWORD *)v151 + 1);
          else
            v157 = 0;
          if (v155 >= v154)
          {
            v158 = v155 - v152;
            v159 = v158 + 1;
            if ((unint64_t)(v158 + 1) >> 60)
LABEL_323:
              abort();
            if (((char *)v154 - (char *)v152) >> 3 > v159)
              v159 = ((char *)v154 - (char *)v152) >> 3;
            if ((unint64_t)((char *)v154 - (char *)v152) >= 0x7FFFFFFFFFFFFFF0)
              v160 = 0xFFFFFFFFFFFFFFFLL;
            else
              v160 = v159;
            if (v160)
            {
              if (v160 >> 60)
LABEL_324:
                sub_1C4764EE4();
              v161 = (char *)operator new(16 * v160);
            }
            else
            {
              v161 = 0;
            }
            v162 = (__n128 *)&v161[16 * v158];
            v162->n128_u32[0] = v156;
            v162->n128_u64[1] = v157;
            if (v155 == v152)
            {
              v152 = (__n128 *)&v161[16 * v158];
            }
            else
            {
              v163 = (__n128 *)&v161[16 * v158];
              do
              {
                v163[-1] = v155[-1];
                --v163;
                --v155;
              }
              while (v155 != v152);
              v155 = v152;
              v152 = v163;
            }
            v154 = (__n128 *)&v161[16 * v160];
            v153 = v162 + 1;
            if (v155)
              operator delete(v155);
          }
          else
          {
            v155->n128_u32[0] = v156;
            v155->n128_u64[1] = v157;
            v153 = v155 + 1;
          }
          v151 += 8;
          v155 = v153;
        }
        while (v151 != v150);
      }
      v164 = 126 - 2 * __clz(v153 - v152);
      if (v153 == v152)
        v165 = 0;
      else
        v165 = v164;
      sub_1C52156E0(v152, v153, (uint64_t)v240, v165, 1);
      v167 = llvm::dbgs(v166);
      v242 = v240;
      v240[0] = &off_1E8143F38;
      v240[1] = v218;
      sub_1C512E114((uint64_t)v240, v167);
      v168 = *((_QWORD *)v167 + 4);
      if ((unint64_t)(*((_QWORD *)v167 + 3) - v168) > 8)
      {
        *(_BYTE *)(v168 + 8) = 123;
        *(_QWORD *)v168 = *(_QWORD *)"\t rec = {";
        *((_QWORD *)v167 + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(v167, "\t rec = {", 9uLL);
      }
      v169 = (llvm *)v242;
      if (v242 == v240)
      {
        v170 = (uint64_t (**)(llvm *))((char *)v240[0] + 32);
        v169 = (llvm *)v240;
      }
      else
      {
        if (!v242)
          goto LABEL_263;
        v170 = (uint64_t (**)(llvm *))((char *)*v242 + 40);
      }
      v169 = (llvm *)(*v170)(v169);
LABEL_263:
      for (m = v152; m != v153; ++m)
      {
        *(__n128 *)v240 = *m;
        v172 = llvm::dbgs(v169);
        v173 = (_BYTE *)*((_QWORD *)v172 + 4);
        if ((unint64_t)v173 >= *((_QWORD *)v172 + 3))
        {
          v172 = llvm::raw_ostream::write(v172, 32);
        }
        else
        {
          *((_QWORD *)v172 + 4) = v173 + 1;
          *v173 = 32;
        }
        v174 = *this;
        v237[0] = v240;
        v237[1] = v174;
        v169 = llvm::rdf::operator<<(v172, (unsigned int **)v237);
      }
      v175 = llvm::dbgs(v169);
      v176 = *((_QWORD *)v175 + 4);
      if ((unint64_t)(*((_QWORD *)v175 + 3) - v176) > 2)
      {
        *(_BYTE *)(v176 + 2) = 10;
        *(_WORD *)v176 = 32032;
        *((_QWORD *)v175 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v175, " }\n", 3uLL);
      }
      v177 = sub_1C521EBA4(this + 15, (unint64_t)v218, (uint64_t)v218, (uint64_t)(this + 5)) + 5;
      llvm::rdf::RegisterAggr::rr_iterator::rr_iterator((uint64_t)v240, (uint64_t)v177, 0);
      llvm::rdf::RegisterAggr::rr_iterator::rr_iterator((uint64_t)v237, (uint64_t)v177, 1);
      if (v243 == v239)
      {
        v178 = v152;
      }
      else
      {
        v179 = v242;
        v178 = v152;
        do
        {
          v180 = *((unsigned int *)v179 + 8);
          v181 = v179[5];
          if (v180)
            v182 = (unint64_t)v181;
          else
            v182 = 0;
          if (v152 >= v154)
          {
            v183 = v152 - v178;
            v184 = v183 + 1;
            if ((unint64_t)(v183 + 1) >> 60)
              goto LABEL_323;
            if (((char *)v154 - (char *)v178) >> 3 > v184)
              v184 = ((char *)v154 - (char *)v178) >> 3;
            if ((unint64_t)((char *)v154 - (char *)v178) >= 0x7FFFFFFFFFFFFFF0)
              v185 = 0xFFFFFFFFFFFFFFFLL;
            else
              v185 = v184;
            if (v185)
            {
              if (v185 >> 60)
                goto LABEL_324;
              v186 = (char *)operator new(16 * v185);
            }
            else
            {
              v186 = 0;
            }
            v187 = (__n128 *)&v186[16 * v183];
            v187->n128_u64[0] = v180;
            v187->n128_u64[1] = v182;
            if (v152 == v178)
            {
              v189 = v152;
              v178 = (__n128 *)&v186[16 * v183];
            }
            else
            {
              v188 = (__n128 *)&v186[16 * v183];
              do
              {
                v188[-1] = v152[-1];
                --v188;
                --v152;
              }
              while (v152 != v178);
              v189 = v178;
              v178 = v188;
            }
            v154 = (__n128 *)&v186[16 * v185];
            v152 = v187 + 1;
            if (v189)
              operator delete(v189);
          }
          else
          {
            v152->n128_u64[0] = v180;
            v152->n128_u64[1] = v182;
            ++v152;
          }
          v190 = v242;
          v191 = (void **)v242[1];
          if (v191)
          {
            do
            {
              v179 = v191;
              v191 = (void **)*v191;
            }
            while (v191);
          }
          else
          {
            do
            {
              v179 = (void **)v190[2];
              v51 = *v179 == v190;
              v190 = v179;
            }
            while (!v51);
          }
          v242 = v179;
          ++v243;
        }
        while (v243 != v239);
      }
      sub_1C4FE319C((uint64_t)v237, (_QWORD *)v237[1]);
      sub_1C4FE319C((uint64_t)v240, (_QWORD *)v240[1]);
      v192 = 126 - 2 * __clz(v152 - v178);
      if (v152 == v178)
        v193 = 0;
      else
        v193 = v192;
      sub_1C52156E0(v178, v152, (uint64_t)v240, v193, 1);
      v195 = llvm::dbgs(v194);
      v196 = *((_QWORD *)v195 + 4);
      if ((unint64_t)(*((_QWORD *)v195 + 3) - v196) > 8)
      {
        *(_BYTE *)(v196 + 8) = 123;
        *(_QWORD *)v196 = *(_QWORD *)"\tcomp = {";
        *((_QWORD *)v195 + 4) += 9;
      }
      else
      {
        v195 = llvm::raw_ostream::write(v195, "\tcomp = {", 9uLL);
      }
      for (n = v178; n != v152; ++n)
      {
        *(__n128 *)v240 = *n;
        v198 = llvm::dbgs(v195);
        v199 = (_BYTE *)*((_QWORD *)v198 + 4);
        if ((unint64_t)v199 >= *((_QWORD *)v198 + 3))
        {
          v198 = llvm::raw_ostream::write(v198, 32);
        }
        else
        {
          *((_QWORD *)v198 + 4) = v199 + 1;
          *v199 = 32;
        }
        v200 = *this;
        v237[0] = v240;
        v237[1] = v200;
        v195 = llvm::rdf::operator<<(v198, (unsigned int **)v237);
      }
      v201 = llvm::dbgs(v195);
      v202 = *((_QWORD *)v201 + 4);
      if ((unint64_t)(*((_QWORD *)v201 + 3) - v202) > 2)
      {
        *(_BYTE *)(v202 + 2) = 10;
        *(_WORD *)v202 = 32032;
        *((_QWORD *)v201 + 4) += 3;
        if (!v178)
          continue;
LABEL_313:
        operator delete(v178);
        continue;
      }
      llvm::raw_ostream::write(v201, " }\n", 3uLL);
      if (v178)
        goto LABEL_313;
    }
  }
  sub_1C521ECF4((uint64_t)v234);
  if (v244 != (uint64_t *)&v246)
    free(v244);
  sub_1C61910D0((uint64_t)&v227, v228);
}

uint64_t llvm::rdf::Liveness::traverse(uint64_t a1, llvm::MachineBasicBlock *a2, uint64_t a3)
{
  llvm::MachineBasicBlock *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *i;
  char *v12;
  uint64_t ***v13;
  uint64_t v14;
  uint64_t ***v15;
  uint64_t **v16;
  void *v17;
  char *v18;
  uint64_t *j;
  uint64_t *v20;
  uint64_t v21;
  llvm::MachineBasicBlock **v22;
  llvm *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t k;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  const llvm::rdf::DataFlowGraph *v34;
  unsigned int v35;
  llvm::rdf::RefNode *v36;
  llvm::rdf::InstrNode *Owner;
  uint64_t v38;
  llvm::MachineBasicBlock *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int RegRef;
  uint64_t v47;
  char *v48;
  char *v49;
  llvm::rdf::RefNode *v50;
  unsigned int v51;
  const llvm::rdf::DataFlowGraph *v52;
  llvm::rdf::InstrNode *v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  llvm::MachineBasicBlock *v58;
  _DWORD *Block;
  uint64_t *v60;
  uint64_t **v61;
  uint64_t **v62;
  uint64_t *v63;
  const llvm::rdf::DataFlowGraph *v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int v67;
  _QWORD *v68;
  char *v69;
  char *v70;
  llvm::rdf::RefNode *v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  llvm::MachineBasicBlock *v79;
  uint64_t v80;
  int *v81;
  unsigned int v82;
  int v83;
  char *v84;
  llvm::MachineBasicBlock *v85;
  uint64_t v86;
  llvm::rdf::RegisterAggr *v87;
  llvm *v88;
  uint64_t *m;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t **v93;
  uint64_t **v94;
  uint64_t **v95;
  unint64_t v96;
  uint64_t **v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t *n;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t **v106;
  BOOL v107;
  llvm *v109;
  llvm::raw_ostream *v110;
  _DWORD *v111;
  _WORD *v112;
  _QWORD *v113;
  void *v114;
  llvm *v115;
  uint64_t **v116;
  llvm *v117;
  uint64_t v118;
  llvm *v119;
  uint64_t v120;
  const llvm::rdf::DataFlowGraph *v121;
  llvm::raw_ostream *v122;
  _BYTE *v123;
  llvm *v124;
  uint64_t v125;
  llvm *v126;
  uint64_t v127;
  const llvm::rdf::DataFlowGraph *v128;
  llvm::raw_ostream *v129;
  _BYTE *v130;
  llvm *v131;
  uint64_t v132;
  llvm *v133;
  uint64_t v134;
  const llvm::rdf::DataFlowGraph *v135;
  llvm::raw_ostream *v136;
  _BYTE *v137;
  llvm *v138;
  void *v139;
  llvm *v140;
  uint64_t v141;
  const llvm::rdf::DataFlowGraph *v142;
  llvm::raw_ostream *v143;
  _BYTE *v144;
  uint64_t v145;
  llvm *v146;
  uint64_t v147;
  llvm *v148;
  uint64_t v149;
  const llvm::rdf::DataFlowGraph *v150;
  llvm::raw_ostream *v151;
  _BYTE *v152;
  llvm *v153;
  llvm::raw_ostream *v154;
  uint64_t v155;
  uint64_t **v156;
  _BYTE *v157;
  llvm *v158;
  llvm::raw_ostream *v159;
  uint64_t v160;
  uint64_t **v161;
  _BYTE *v162;
  llvm *v163;
  llvm::raw_ostream *v164;
  uint64_t v165;
  uint64_t **v166;
  _BYTE *v167;
  llvm *v168;
  llvm::raw_ostream *v169;
  uint64_t v170;
  _BYTE *v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  llvm *v175;
  _BYTE *v176;
  unint64_t v177;
  int v178;
  llvm *v179;
  llvm::raw_ostream *v180;
  uint64_t v181;
  uint64_t **v182;
  _BYTE *v183;
  uint64_t *v184;
  uint64_t **v185;
  uint64_t v186;
  __int128 v188;
  __int128 v189;
  _BYTE v190[16];
  uint64_t v191;
  llvm::MachineBasicBlock *v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  void *v196[2];
  __int128 v197;
  int v198;
  llvm::MachineBasicBlock **v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t ***v202;
  int v203;
  uint64_t v204;
  uint64_t v205;

  v3 = a2;
  v205 = *MEMORY[0x1E0C80C00];
  v192 = a2;
  v5 = sub_1C49FA70C(*(_QWORD *)(a1 + 24), (uint64_t)a2);
  v6 = v5;
  v7 = *(unsigned int *)(v5 + 32);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD **)(v5 + 24);
    v9 = &v8[v7];
    do
    {
      v10 = (_QWORD *)*v8;
      *(_OWORD *)v196 = 0u;
      v197 = 0u;
      v198 = 1065353216;
      llvm::rdf::Liveness::traverse(a1, *v10, v196);
      for (i = (uint64_t *)v197; i; i = (uint64_t *)*i)
      {
        LODWORD(v199) = *((_DWORD *)i + 4);
        sub_1C5221998((uint64_t)&v200, (uint64_t)(i + 3));
        v12 = sub_1C5221384(a3, v199, &v199);
        v13 = v202;
        if (v202)
        {
          v14 = (uint64_t)(v12 + 24);
          do
          {
            sub_1C522202C(v14, v13[2], (unint64_t)v13[3], (_OWORD *)v13 + 1);
            v13 = (uint64_t ***)*v13;
          }
          while (v13);
          v15 = v202;
          if (v202)
          {
            do
            {
              v16 = *v15;
              operator delete(v15);
              v15 = (uint64_t ***)v16;
            }
            while (v16);
          }
        }
        v17 = (void *)v200;
        v200 = 0;
        if (v17)
          operator delete(v17);
      }
      v5 = sub_1C521ECF4((uint64_t)v196);
      ++v8;
    }
    while (v8 != v9);
  }
  if (*(_BYTE *)(a1 + 264))
  {
    v109 = llvm::dbgs((llvm *)v5);
    v110 = v109;
    v111 = (_DWORD *)*((_QWORD *)v109 + 4);
    if (*((_QWORD *)v109 + 3) - (_QWORD)v111 > 3uLL)
    {
      *v111 = 539831562;
      *((_QWORD *)v109 + 4) += 4;
    }
    else
    {
      v110 = llvm::raw_ostream::write(v109, "\n-- ", 4uLL);
    }
    v202 = (uint64_t ***)&v199;
    v199 = (llvm::MachineBasicBlock **)&off_1E8143F38;
    v200 = (uint64_t)v3;
    sub_1C512E114((uint64_t)&v199, v110);
    v112 = (_WORD *)*((_QWORD *)v110 + 4);
    if (*((_QWORD *)v110 + 3) - (_QWORD)v112 > 1uLL)
    {
      *v112 = 8250;
      v113 = (_QWORD *)(*((_QWORD *)v110 + 4) + 2);
      *((_QWORD *)v110 + 4) = v113;
    }
    else
    {
      v110 = llvm::raw_ostream::write(v110, ": ", 2uLL);
      v113 = (_QWORD *)*((_QWORD *)v110 + 4);
    }
    if (*((_QWORD *)v110 + 3) - (_QWORD)v113 > 7uLL)
    {
      *v113 = 0x6573726576617274;
      v114 = (void *)(*((_QWORD *)v110 + 4) + 8);
      *((_QWORD *)v110 + 4) = v114;
    }
    else
    {
      v110 = llvm::raw_ostream::write(v110, "traverse", 8uLL);
      v114 = (void *)*((_QWORD *)v110 + 4);
    }
    if (*((_QWORD *)v110 + 3) - (_QWORD)v114 > 0x17uLL)
    {
      qmemcpy(v114, " after recursion into: {", 24);
      *((_QWORD *)v110 + 4) += 24;
    }
    else
    {
      llvm::raw_ostream::write(v110, " after recursion into: {", 0x18uLL);
    }
    v115 = (llvm *)v202;
    if (v202 == (uint64_t ***)&v199)
    {
      v116 = (uint64_t **)(v199 + 4);
      v115 = (llvm *)&v199;
    }
    else
    {
      if (!v202)
      {
LABEL_164:
        v145 = *(unsigned int *)(v6 + 32);
        if ((_DWORD)v145)
        {
          v172 = *(uint64_t **)(v6 + 24);
          v173 = 8 * v145;
          do
          {
            v174 = *v172;
            v175 = llvm::dbgs(v115);
            v176 = (_BYTE *)*((_QWORD *)v175 + 4);
            if ((unint64_t)v176 >= *((_QWORD *)v175 + 3))
            {
              v175 = llvm::raw_ostream::write(v175, 32);
            }
            else
            {
              *((_QWORD *)v175 + 4) = v176 + 1;
              *v176 = 32;
            }
            v177 = *(int *)(*(_QWORD *)v174 + 24);
            if ((v177 & 0x80000000) != 0)
            {
              v177 = -(uint64_t)v177;
              v178 = 1;
            }
            else
            {
              v178 = 0;
            }
            v115 = sub_1C5E21910(v175, v177, 0, 0, v178);
            ++v172;
            v173 -= 8;
          }
          while (v173);
        }
        v146 = llvm::dbgs(v115);
        v147 = *((_QWORD *)v146 + 4);
        if ((unint64_t)(*((_QWORD *)v146 + 3) - v147) > 2)
        {
          *(_BYTE *)(v147 + 2) = 10;
          *(_WORD *)v147 = 32032;
          *((_QWORD *)v146 + 4) += 3;
        }
        else
        {
          v146 = llvm::raw_ostream::write(v146, " }\n", 3uLL);
        }
        v148 = llvm::dbgs(v146);
        v149 = *((_QWORD *)v148 + 4);
        if ((unint64_t)(*((_QWORD *)v148 + 3) - v149) > 9)
        {
          *(_WORD *)(v149 + 8) = 8250;
          *(_QWORD *)v149 = *(_QWORD *)"  LiveIn: ";
          *((_QWORD *)v148 + 4) += 10;
        }
        else
        {
          v148 = llvm::raw_ostream::write(v148, "  LiveIn: ", 0xAuLL);
        }
        v150 = *(const llvm::rdf::DataFlowGraph **)a1;
        v199 = (llvm::MachineBasicBlock **)a3;
        v200 = (uint64_t)v150;
        v151 = llvm::rdf::operator<<(v148, &v199);
        v152 = (_BYTE *)*((_QWORD *)v151 + 4);
        if ((unint64_t)v152 >= *((_QWORD *)v151 + 3))
        {
          v151 = llvm::raw_ostream::write(v151, 10);
        }
        else
        {
          *((_QWORD *)v151 + 4) = v152 + 1;
          *v152 = 10;
        }
        v179 = llvm::dbgs(v151);
        v180 = v179;
        v181 = *((_QWORD *)v179 + 4);
        if ((unint64_t)(*((_QWORD *)v179 + 3) - v181) > 9)
        {
          *(_WORD *)(v181 + 8) = 8224;
          *(_QWORD *)v181 = *(_QWORD *)"  Local:  ";
          *((_QWORD *)v179 + 4) += 10;
        }
        else
        {
          v180 = llvm::raw_ostream::write(v179, "  Local:  ", 0xAuLL);
        }
        v3 = v192;
        v182 = sub_1C521EBA4((uint64_t **)(a1 + 120), (unint64_t)v192, (uint64_t)v192, a1 + 40);
        llvm::rdf::RegisterAggr::print((llvm::rdf::RegisterAggr *)(v182 + 5), v180);
        v183 = (_BYTE *)*((_QWORD *)v180 + 4);
        if ((unint64_t)v183 >= *((_QWORD *)v180 + 3))
        {
          llvm::raw_ostream::write(v180, 10);
        }
        else
        {
          *((_QWORD *)v180 + 4) = v183 + 1;
          *v183 = 10;
        }
        goto LABEL_14;
      }
      v116 = *v202 + 5;
    }
    v115 = (llvm *)((uint64_t (*)(llvm *))*v116)(v115);
    goto LABEL_164;
  }
LABEL_14:
  v18 = sub_1C5221F50((uint64_t **)(a1 + 368), (unint64_t)v3, &v192);
  for (j = (uint64_t *)*((_QWORD *)v18 + 7); j; j = (uint64_t *)*j)
  {
    v18 = sub_1C5221384(a3, *((_DWORD *)j + 4), (_DWORD *)j + 4);
    v20 = (uint64_t *)j[5];
    if (v20)
    {
      v21 = (uint64_t)(v18 + 24);
      do
      {
        sub_1C522202C(v21, v20[2], v20[3], (_OWORD *)v20 + 1);
        v20 = (uint64_t *)*v20;
      }
      while (v20);
    }
  }
  if (*(_BYTE *)(a1 + 264))
  {
    v117 = llvm::dbgs((llvm *)v18);
    v118 = *((_QWORD *)v117 + 4);
    if ((unint64_t)(*((_QWORD *)v117 + 3) - v118) > 9)
    {
      *(_WORD *)(v118 + 8) = 2648;
      *(_QWORD *)v118 = *(_QWORD *)"after LOX\n";
      *((_QWORD *)v117 + 4) += 10;
    }
    else
    {
      v117 = llvm::raw_ostream::write(v117, "after LOX\n", 0xAuLL);
    }
    v119 = llvm::dbgs(v117);
    v120 = *((_QWORD *)v119 + 4);
    if ((unint64_t)(*((_QWORD *)v119 + 3) - v120) > 9)
    {
      *(_WORD *)(v120 + 8) = 8250;
      *(_QWORD *)v120 = *(_QWORD *)"  LiveIn: ";
      *((_QWORD *)v119 + 4) += 10;
    }
    else
    {
      v119 = llvm::raw_ostream::write(v119, "  LiveIn: ", 0xAuLL);
    }
    v121 = *(const llvm::rdf::DataFlowGraph **)a1;
    v199 = (llvm::MachineBasicBlock **)a3;
    v200 = (uint64_t)v121;
    v122 = llvm::rdf::operator<<(v119, &v199);
    v123 = (_BYTE *)*((_QWORD *)v122 + 4);
    if ((unint64_t)v123 >= *((_QWORD *)v122 + 3))
    {
      v122 = llvm::raw_ostream::write(v122, 10);
    }
    else
    {
      *((_QWORD *)v122 + 4) = v123 + 1;
      *v123 = 10;
    }
    v153 = llvm::dbgs(v122);
    v154 = v153;
    v155 = *((_QWORD *)v153 + 4);
    if ((unint64_t)(*((_QWORD *)v153 + 3) - v155) > 9)
    {
      *(_WORD *)(v155 + 8) = 8224;
      *(_QWORD *)v155 = *(_QWORD *)"  Local:  ";
      *((_QWORD *)v153 + 4) += 10;
    }
    else
    {
      v154 = llvm::raw_ostream::write(v153, "  Local:  ", 0xAuLL);
    }
    v156 = sub_1C521EBA4((uint64_t **)(a1 + 120), (unint64_t)v3, (uint64_t)v3, a1 + 40);
    llvm::rdf::RegisterAggr::print((llvm::rdf::RegisterAggr *)(v156 + 5), v154);
    v157 = (_BYTE *)*((_QWORD *)v154 + 4);
    if ((unint64_t)v157 >= *((_QWORD *)v154 + 3))
    {
      llvm::raw_ostream::write(v154, 10);
    }
    else
    {
      *((_QWORD *)v154 + 4) = v157 + 1;
      *v157 = 10;
    }
  }
  v22 = (llvm::MachineBasicBlock **)a3;
  v23 = (llvm *)sub_1C5221C2C((uint64_t)v190, a3);
  if (*(_QWORD *)(a3 + 24))
  {
    v24 = *(_QWORD **)(a3 + 16);
    if (v24)
    {
      do
      {
        v25 = (_QWORD *)*v24;
        sub_1C61B8160((uint64_t)(v24 + 3));
        operator delete(v24);
        v24 = v25;
      }
      while (v25);
    }
    v22 = (llvm::MachineBasicBlock **)a3;
    *(_QWORD *)(a3 + 16) = 0;
    v26 = *(_QWORD *)(a3 + 8);
    if (v26)
    {
      for (k = 0; k != v26; ++k)
        *(_QWORD *)(*(_QWORD *)a3 + 8 * k) = 0;
    }
    *(_QWORD *)(a3 + 24) = 0;
  }
  v28 = v191;
  if (v191)
  {
    do
    {
      v29 = *(_DWORD *)(v28 + 16);
      LODWORD(v193) = v29;
      if (v29)
        v30 = -1;
      else
        v30 = 0;
      v194 = v30;
      v23 = (llvm *)sub_1C5221384((uint64_t)v22, v29, &v193);
      v184 = (uint64_t *)v28;
      v31 = *(uint64_t **)(v28 + 40);
      if (v31)
      {
        v32 = (uint64_t)v23 + 24;
        v33 = (int)v193;
        v186 = (uint64_t)v23 + 24;
        do
        {
          v189 = *((_OWORD *)v31 + 1);
          v34 = *(const llvm::rdf::DataFlowGraph **)a1;
          v35 = v189;
          if ((_DWORD)v189)
            v36 = (llvm::rdf::RefNode *)(*(_QWORD *)(*((_QWORD *)v34 + 37)
                                                   + 8 * ((v189 - 1) >> *((_DWORD *)v34 + 69)))
                                       + 32 * (*((_DWORD *)v34 + 70) & (v189 - 1)));
          else
            v36 = 0;
          Owner = (llvm::rdf::InstrNode *)llvm::rdf::RefNode::getOwner(v36, *(const llvm::rdf::DataFlowGraph **)a1);
          v38 = llvm::rdf::InstrNode::getOwner(Owner, v34);
          v39 = v192;
          if (v192 == *(llvm::MachineBasicBlock **)(v38 + 8))
          {
            v40 = *(_QWORD *)(a1 + 16);
            v41 = *(_DWORD *)(*(_QWORD *)v40 + 44);
            v199 = (llvm::MachineBasicBlock **)&v201;
            v200 = 0x600000000;
            sub_1C4765AA4((char *)&v199, (v41 + 63) >> 6, 0);
            v203 = v41;
            v204 = v40;
            v42 = *((_QWORD *)&v189 + 1);
            if ((*(_WORD *)v36 & 0x500) == 0x100
              || (v43 = llvm::rdf::RefNode::getRegRef(v36, *(const llvm::rdf::DataFlowGraph **)a1),
                  v45 = llvm::rdf::RegisterAggr::insert((uint64_t)&v199, v43, v44),
                  (llvm::rdf::RegisterAggr::hasCoverOf(v45, v33, v42) & 1) == 0))
            {
              RegRef = llvm::rdf::RefNode::getRegRef(v36, *(const llvm::rdf::DataFlowGraph **)a1);
              llvm::rdf::Liveness::getAllReachingDefs(v36, a1, RegRef, v47, v35, 0, 0, a1 + 184, (unsigned int *)v196);
              if (LODWORD(v196[1]))
              {
                v48 = (char *)v196[0];
                v49 = (char *)v196[0] + 16 * LODWORD(v196[1]);
                while (1)
                {
                  v50 = *(llvm::rdf::RefNode **)v48;
                  v51 = *((_DWORD *)v48 + 2);
                  v52 = *(const llvm::rdf::DataFlowGraph **)a1;
                  v53 = (llvm::rdf::InstrNode *)llvm::rdf::RefNode::getOwner(*(llvm::rdf::RefNode **)v48, *(const llvm::rdf::DataFlowGraph **)a1);
                  if (*(llvm::MachineBasicBlock **)(llvm::rdf::InstrNode::getOwner(v53, v52) + 8) != v39)
                    break;
                  if ((*(_WORD *)v50 & 0x100) == 0)
                  {
                    v54 = llvm::rdf::RefNode::getRegRef(v50, v52);
                    llvm::rdf::RegisterAggr::insert((uint64_t)&v199, v54, v55);
                  }
                  if ((llvm::rdf::RegisterAggr::hasCoverOf((uint64_t)&v199, v33, v42) & 1) == 0)
                  {
                    v48 += 16;
                    if (v48 != v49)
                      continue;
                  }
                  goto LABEL_49;
                }
                llvm::rdf::RegisterAggr::clearIn((uint64_t)&v199, v33, v42);
                LODWORD(v188) = v51;
                *((_QWORD *)&v188 + 1) = v56;
                sub_1C522178C(v186, v51, v56, &v188);
              }
LABEL_49:
              if (v196[0] != &v197)
                free(v196[0]);
              v32 = v186;
            }
            v23 = (llvm *)v199;
            if (v199 != (llvm::MachineBasicBlock **)&v201)
              free(v199);
          }
          else
          {
            sub_1C522202C(v32, v189, *((unint64_t *)&v189 + 1), &v189);
          }
          v31 = (uint64_t *)*v31;
        }
        while (v31);
      }
      v28 = *v184;
      v22 = (llvm::MachineBasicBlock **)a3;
    }
    while (*v184);
  }
  v57 = (uint64_t *)v22[2];
  if (v57)
  {
    do
    {
      while (v57[6])
      {
        v57 = (uint64_t *)*v57;
        if (!v57)
          goto LABEL_61;
      }
      v23 = (llvm *)sub_1C52219F8(v22, v57);
      v57 = (uint64_t *)v23;
    }
    while (v23);
  }
LABEL_61:
  if (*(_BYTE *)(a1 + 264))
  {
    v124 = llvm::dbgs(v23);
    v125 = *((_QWORD *)v124 + 4);
    if ((unint64_t)(*((_QWORD *)v124 + 3) - v125) > 0x13)
    {
      *(_DWORD *)(v125 + 16) = 174809967;
      *(_OWORD *)v125 = *(_OWORD *)"after defs in block\n";
      *((_QWORD *)v124 + 4) += 20;
    }
    else
    {
      v124 = llvm::raw_ostream::write(v124, "after defs in block\n", 0x14uLL);
    }
    v126 = llvm::dbgs(v124);
    v127 = *((_QWORD *)v126 + 4);
    if ((unint64_t)(*((_QWORD *)v126 + 3) - v127) > 9)
    {
      *(_WORD *)(v127 + 8) = 8250;
      *(_QWORD *)v127 = *(_QWORD *)"  LiveIn: ";
      *((_QWORD *)v126 + 4) += 10;
    }
    else
    {
      v126 = llvm::raw_ostream::write(v126, "  LiveIn: ", 0xAuLL);
    }
    v128 = *(const llvm::rdf::DataFlowGraph **)a1;
    v199 = v22;
    v200 = (uint64_t)v128;
    v129 = llvm::rdf::operator<<(v126, &v199);
    v130 = (_BYTE *)*((_QWORD *)v129 + 4);
    if ((unint64_t)v130 >= *((_QWORD *)v129 + 3))
    {
      v129 = llvm::raw_ostream::write(v129, 10);
    }
    else
    {
      *((_QWORD *)v129 + 4) = v130 + 1;
      *v130 = 10;
    }
    v158 = llvm::dbgs(v129);
    v159 = v158;
    v160 = *((_QWORD *)v158 + 4);
    if ((unint64_t)(*((_QWORD *)v158 + 3) - v160) > 9)
    {
      *(_WORD *)(v160 + 8) = 8224;
      *(_QWORD *)v160 = *(_QWORD *)"  Local:  ";
      *((_QWORD *)v158 + 4) += 10;
    }
    else
    {
      v159 = llvm::raw_ostream::write(v158, "  Local:  ", 0xAuLL);
    }
    v58 = v192;
    v161 = sub_1C521EBA4((uint64_t **)(a1 + 120), (unint64_t)v192, (uint64_t)v192, a1 + 40);
    llvm::rdf::RegisterAggr::print((llvm::rdf::RegisterAggr *)(v161 + 5), v159);
    v162 = (_BYTE *)*((_QWORD *)v159 + 4);
    if ((unint64_t)v162 >= *((_QWORD *)v159 + 3))
    {
      llvm::raw_ostream::write(v159, 10);
    }
    else
    {
      *((_QWORD *)v159 + 4) = v162 + 1;
      *v162 = 10;
    }
  }
  else
  {
    v58 = v192;
  }
  Block = (_DWORD *)llvm::rdf::FuncNode::findBlock(*(llvm::rdf::FuncNode **)(*(_QWORD *)a1 + 256), v58, *(const llvm::rdf::DataFlowGraph **)a1);
  v60 = (uint64_t *)llvm::rdf::CodeNode::members(Block, *(const llvm::rdf::DataFlowGraph **)a1, (uint64_t)&v199);
  v61 = (uint64_t **)v199;
  if ((_DWORD)v200)
  {
    v62 = (uint64_t **)&v199[2 * v200];
    v185 = v62;
    do
    {
      v63 = *v61;
      if ((*(_WORD *)*v61 & 0x1C) == 0x10)
      {
        v64 = *(const llvm::rdf::DataFlowGraph **)a1;
        v196[0] = &v197;
        v196[1] = (void *)0x400000000;
        v65 = *((_DWORD *)v63 + 4);
        if (v65)
        {
          v66 = *(_QWORD *)(*((_QWORD *)v64 + 37) + 8 * ((v65 - 1) >> *((_DWORD *)v64 + 69)))
              + 32 * (*((_DWORD *)v64 + 70) & (v65 - 1));
          if (v63 != (uint64_t *)v66)
          {
            v67 = 0;
            do
            {
              if ((*(_WORD *)v66 & 0x1F) == 0xA)
              {
                if (v67 >= HIDWORD(v196[1]))
                {
                  v60 = (uint64_t *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v196, (uint64_t)&v197, v67 + 1, 16);
                  v67 = v196[1];
                }
                v68 = (char *)v196[0] + 16 * v67;
                *v68 = v66;
                v68[1] = v65;
                v67 = ++LODWORD(v196[1]);
              }
              v65 = *(_DWORD *)(v66 + 4);
              if (v65)
                v66 = *(_QWORD *)(*((_QWORD *)v64 + 37) + 8 * ((v65 - 1) >> *((_DWORD *)v64 + 69)))
                    + 32 * (*((_DWORD *)v64 + 70) & (v65 - 1));
              else
                v66 = 0;
            }
            while (v63 != (uint64_t *)v66);
            v69 = (char *)v196[0];
            if (v67)
            {
              v70 = (char *)v196[0] + 16 * v67;
              do
              {
                v71 = *(llvm::rdf::RefNode **)v69;
                if ((**(_WORD **)v69 & 0x400) == 0)
                {
                  v72 = *((_DWORD *)v69 + 2);
                  v73 = llvm::rdf::RefNode::getRegRef(*(llvm::rdf::RefNode **)v69, *(const llvm::rdf::DataFlowGraph **)a1);
                  v74 = v73;
                  v76 = v75;
                  *(_QWORD *)&v189 = v73;
                  *((_QWORD *)&v189 + 1) = v75;
                  v77 = llvm::rdf::RefNode::getRegRef(v71, *(const llvm::rdf::DataFlowGraph **)a1);
                  llvm::rdf::Liveness::getAllReachingDefs(v71, a1, v77, v78, v72, 0, 0, a1 + 184, (unsigned int *)&v193);
                  v60 = (uint64_t *)v193;
                  if ((_DWORD)v194)
                  {
                    v79 = v192;
                    v80 = 16 * v194;
                    v81 = (int *)((char *)v193 + 8);
                    do
                    {
                      v83 = *v81;
                      v81 += 4;
                      v82 = v83;
                      if (*((llvm::MachineBasicBlock **)sub_1C4D7501C(*(_QWORD *)(a1 + 272), *(_DWORD *)(a1 + 288), v83)+ 1) != v79)
                      {
                        v84 = sub_1C5221384(a3, v74, &v189);
                        LODWORD(v188) = v82;
                        *((_QWORD *)&v188 + 1) = v76;
                        sub_1C522178C((uint64_t)(v84 + 24), v82, v76, &v188);
                      }
                      v80 -= 16;
                    }
                    while (v80);
                    v60 = (uint64_t *)v193;
                  }
                  if (v60 != &v195)
                    free(v60);
                }
                v69 += 16;
              }
              while (v69 != v70);
              v69 = (char *)v196[0];
              v62 = v185;
            }
            if (v69 != (char *)&v197)
              free(v69);
          }
        }
      }
      v61 += 2;
    }
    while (v61 != v62);
    v61 = (uint64_t **)v199;
  }
  if (v61 != (uint64_t **)&v201)
    free(v61);
  if (*(_BYTE *)(a1 + 264))
  {
    v131 = llvm::dbgs((llvm *)v60);
    v132 = *((_QWORD *)v131 + 4);
    if ((unint64_t)(*((_QWORD *)v131 + 3) - v132) > 0x13)
    {
      *(_DWORD *)(v132 + 16) = 174809967;
      *(_OWORD *)v132 = *(_OWORD *)"after uses in block\n";
      *((_QWORD *)v131 + 4) += 20;
    }
    else
    {
      v131 = llvm::raw_ostream::write(v131, "after uses in block\n", 0x14uLL);
    }
    v133 = llvm::dbgs(v131);
    v134 = *((_QWORD *)v133 + 4);
    if ((unint64_t)(*((_QWORD *)v133 + 3) - v134) > 9)
    {
      *(_WORD *)(v134 + 8) = 8250;
      *(_QWORD *)v134 = *(_QWORD *)"  LiveIn: ";
      *((_QWORD *)v133 + 4) += 10;
    }
    else
    {
      v133 = llvm::raw_ostream::write(v133, "  LiveIn: ", 0xAuLL);
    }
    v135 = *(const llvm::rdf::DataFlowGraph **)a1;
    v199 = (llvm::MachineBasicBlock **)a3;
    v200 = (uint64_t)v135;
    v136 = llvm::rdf::operator<<(v133, &v199);
    v137 = (_BYTE *)*((_QWORD *)v136 + 4);
    if ((unint64_t)v137 >= *((_QWORD *)v136 + 3))
    {
      v136 = llvm::raw_ostream::write(v136, 10);
    }
    else
    {
      *((_QWORD *)v136 + 4) = v137 + 1;
      *v137 = 10;
    }
    v163 = llvm::dbgs(v136);
    v164 = v163;
    v165 = *((_QWORD *)v163 + 4);
    if ((unint64_t)(*((_QWORD *)v163 + 3) - v165) > 9)
    {
      *(_WORD *)(v165 + 8) = 8224;
      *(_QWORD *)v165 = *(_QWORD *)"  Local:  ";
      *((_QWORD *)v163 + 4) += 10;
    }
    else
    {
      v164 = llvm::raw_ostream::write(v163, "  Local:  ", 0xAuLL);
    }
    v85 = v192;
    v166 = sub_1C521EBA4((uint64_t **)(a1 + 120), (unint64_t)v192, (uint64_t)v192, a1 + 40);
    llvm::rdf::RegisterAggr::print((llvm::rdf::RegisterAggr *)(v166 + 5), v164);
    v167 = (_BYTE *)*((_QWORD *)v164 + 4);
    if ((unint64_t)v167 >= *((_QWORD *)v164 + 3))
    {
      llvm::raw_ostream::write(v164, 10);
    }
    else
    {
      *((_QWORD *)v164 + 4) = v167 + 1;
      *v167 = 10;
    }
  }
  else
  {
    v85 = v192;
  }
  v86 = a3;
  v87 = (llvm::rdf::RegisterAggr *)(sub_1C521EBA4((uint64_t **)(a1 + 120), (unint64_t)v85, (uint64_t)v85, a1 + 40)
                                  + 5);
  v88 = (llvm *)sub_1C5221F50((uint64_t **)(a1 + 344), (unint64_t)v85, &v192);
  for (m = (uint64_t *)*((_QWORD *)v88 + 7); m; m = (uint64_t *)*m)
  {
    v90 = (_QWORD *)m[5];
    if (v90)
    {
      v91 = 0;
      do
      {
        v91 |= v90[3];
        v90 = (_QWORD *)*v90;
      }
      while (v90);
    }
    else
    {
      v91 = 0;
    }
    if (*((_DWORD *)m + 4))
      v92 = v91;
    else
      v92 = 0;
    v88 = (llvm *)llvm::rdf::RegisterAggr::insert((uint64_t)v87, *((_DWORD *)m + 4), v92);
  }
  if (*(_BYTE *)(a1 + 264))
  {
    v138 = llvm::dbgs(v88);
    v139 = (void *)*((_QWORD *)v138 + 4);
    if (*((_QWORD *)v138 + 3) - (_QWORD)v139 > 0x17uLL)
    {
      qmemcpy(v139, "after phi uses in block\n", 24);
      *((_QWORD *)v138 + 4) += 24;
    }
    else
    {
      v138 = llvm::raw_ostream::write(v138, "after phi uses in block\n", 0x18uLL);
    }
    v140 = llvm::dbgs(v138);
    v141 = *((_QWORD *)v140 + 4);
    if ((unint64_t)(*((_QWORD *)v140 + 3) - v141) > 9)
    {
      *(_WORD *)(v141 + 8) = 8250;
      *(_QWORD *)v141 = *(_QWORD *)"  LiveIn: ";
      *((_QWORD *)v140 + 4) += 10;
    }
    else
    {
      v140 = llvm::raw_ostream::write(v140, "  LiveIn: ", 0xAuLL);
    }
    v142 = *(const llvm::rdf::DataFlowGraph **)a1;
    v199 = (llvm::MachineBasicBlock **)a3;
    v200 = (uint64_t)v142;
    v143 = llvm::rdf::operator<<(v140, &v199);
    v144 = (_BYTE *)*((_QWORD *)v143 + 4);
    if ((unint64_t)v144 >= *((_QWORD *)v143 + 3))
    {
      v143 = llvm::raw_ostream::write(v143, 10);
    }
    else
    {
      *((_QWORD *)v143 + 4) = v144 + 1;
      *v144 = 10;
    }
    v168 = llvm::dbgs(v143);
    v169 = v168;
    v170 = *((_QWORD *)v168 + 4);
    if ((unint64_t)(*((_QWORD *)v168 + 3) - v170) > 9)
    {
      *(_WORD *)(v170 + 8) = 8224;
      *(_QWORD *)v170 = *(_QWORD *)"  Local:  ";
      *((_QWORD *)v168 + 4) += 10;
    }
    else
    {
      v169 = llvm::raw_ostream::write(v168, "  Local:  ", 0xAuLL);
    }
    llvm::rdf::RegisterAggr::print(v87, v169);
    v171 = (_BYTE *)*((_QWORD *)v169 + 4);
    if ((unint64_t)v171 >= *((_QWORD *)v169 + 3))
    {
      llvm::raw_ostream::write(v169, 10);
    }
    else
    {
      *((_QWORD *)v169 + 4) = v171 + 1;
      *v171 = 10;
    }
  }
  v199 = &v192;
  v93 = sub_1C514F1E8((uint64_t **)(a1 + 320), (unint64_t *)&v192, (uint64_t)&std::piecewise_construct, (uint64_t ***)&v199);
  v94 = (uint64_t **)v93[5];
  v95 = v93 + 6;
  if (v94 != v93 + 6)
  {
    do
    {
      v96 = (unint64_t)v94[4];
      v97 = sub_1C521EBA4((uint64_t **)(a1 + 120), v96, v96, a1 + 40);
      v98 = *(uint64_t **)(v86 + 16);
      if (v98)
      {
        v99 = (uint64_t)(v97 + 5);
        do
        {
          for (n = (uint64_t *)v98[5]; n; n = (uint64_t *)*n)
          {
            v101 = n[3];
            v102 = *(_QWORD *)(a1 + 24);
            v103 = *((_QWORD *)sub_1C4D7501C(*(_QWORD *)(a1 + 272), *(_DWORD *)(a1 + 288), *((_DWORD *)n + 4)) + 1);
            llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v102);
            if (llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v102 + 1320), v103, v96))
            {
              if (*((_DWORD *)v98 + 4))
                v104 = v101;
              else
                v104 = 0;
              llvm::rdf::RegisterAggr::insert(v99, *((_DWORD *)v98 + 4), v104);
            }
          }
          v98 = (uint64_t *)*v98;
        }
        while (v98);
      }
      v105 = v94[1];
      if (v105)
      {
        do
        {
          v106 = (uint64_t **)v105;
          v105 = (uint64_t *)*v105;
        }
        while (v105);
      }
      else
      {
        do
        {
          v106 = (uint64_t **)v94[2];
          v107 = *v106 == (uint64_t *)v94;
          v94 = v106;
        }
        while (!v107);
      }
      v94 = v106;
      v86 = a3;
    }
    while (v106 != v95);
  }
  return sub_1C521ECF4((uint64_t)v190);
}

void llvm::rdf::Liveness::resetLiveIns(llvm::rdf::Liveness *this)
{
  uint64_t v1;
  _QWORD *v2;
  unsigned __int16 *v3;
  unsigned __int16 *v4;
  char *v5;
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *i;
  int v17;
  uint64_t **v18;
  _QWORD *v19;
  uint64_t *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t *v23;
  _QWORD *v24;
  _QWORD *v25;
  char *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  _QWORD *v40;
  _QWORD *v41;
  BOOL v42;
  uint64_t **v43;
  char *v44;
  _QWORD *v45;
  int v46;
  __int16 v47;
  uint64_t *v48;
  _QWORD *v49;
  _QWORD *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t *v53;
  _QWORD *v54;
  _QWORD *v55;
  __int128 v56;
  uint64_t v57;
  uint64_t *v58;
  _QWORD *v59[2];
  __int128 v60;
  uint64_t v61;
  uint64_t *v62;
  _QWORD *v63[2];
  __int128 v64;
  uint64_t v65;
  uint64_t *v66;
  _QWORD *v67;
  _QWORD *v68;
  __int128 v69;
  uint64_t v70;
  uint64_t *v71;
  _QWORD *v72;
  _QWORD *v73;
  __int128 v74;
  uint64_t v75;

  v1 = **(_QWORD **)this;
  v2 = *(_QWORD **)(v1 + 328);
  v45 = (_QWORD *)(v1 + 320);
  if (v2 != (_QWORD *)(v1 + 320))
  {
    v43 = (uint64_t **)((char *)this + 120);
    v44 = (char *)this + 40;
    do
    {
      v3 = (unsigned __int16 *)v2[19];
      v4 = (unsigned __int16 *)v2[20];
      if (v4 == v3)
      {
        v7 = 0;
      }
      else
      {
        v5 = 0;
        v6 = 0;
        v7 = 0;
        do
        {
          v8 = *v3;
          if (v6 >= v5)
          {
            v9 = (v6 - v7) >> 2;
            v10 = v9 + 1;
            if ((unint64_t)(v9 + 1) >> 62)
LABEL_74:
              abort();
            if ((v5 - v7) >> 1 > v10)
              v10 = (v5 - v7) >> 1;
            if ((unint64_t)(v5 - v7) >= 0x7FFFFFFFFFFFFFFCLL)
              v11 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v11 = v10;
            if (v11)
            {
              if (v11 >> 62)
LABEL_75:
                sub_1C4764EE4();
              v12 = (char *)operator new(4 * v11);
            }
            else
            {
              v12 = 0;
            }
            v13 = &v12[4 * v9];
            *(_DWORD *)v13 = v8;
            v14 = v13 + 4;
            while (v6 != v7)
            {
              v15 = *((_DWORD *)v6 - 1);
              v6 -= 4;
              *((_DWORD *)v13 - 1) = v15;
              v13 -= 4;
            }
            v5 = &v12[4 * v11];
            if (v7)
              operator delete(v7);
            v7 = v13;
            v6 = v14;
          }
          else
          {
            *(_DWORD *)v6 = v8;
            v6 += 4;
          }
          v3 += 8;
        }
        while (v3 != v4);
        for (i = v7; i != v6; i += 4)
        {
          v17 = *(unsigned __int16 *)i;
          llvm::MachineBasicBlock::removeLiveIn(v2, v17, -1);
        }
      }
      v18 = sub_1C521EBA4(v43, (unint64_t)v2, (uint64_t)v2, (uint64_t)v44) + 5;
      llvm::rdf::RegisterAggr::rr_iterator::rr_iterator((uint64_t)&v53, (uint64_t)v18, 0);
      llvm::rdf::RegisterAggr::rr_iterator::rr_iterator((uint64_t)&v48, (uint64_t)v18, 1);
      v20 = v53;
      v19 = v54;
      v71 = v53;
      v72 = v54;
      v21 = v55;
      v73 = v55;
      if (v55)
      {
        v54[2] = &v72;
        v53 = (uint64_t *)&v54;
        v54 = 0;
        v55 = 0;
      }
      else
      {
        v20 = (uint64_t *)&v72;
        v71 = (uint64_t *)&v72;
      }
      v74 = v56;
      v75 = v57;
      v23 = v48;
      v22 = v49;
      v66 = v48;
      v67 = v49;
      v24 = v50;
      v68 = v50;
      if (v50)
      {
        v49[2] = &v67;
        v48 = (uint64_t *)&v49;
        v49 = 0;
        v50 = 0;
        v21 = v73;
      }
      else
      {
        v23 = (uint64_t *)&v67;
        v66 = (uint64_t *)&v67;
      }
      v69 = v51;
      v70 = v52;
      v58 = v20;
      v59[0] = v19;
      v59[1] = v21;
      if (v21)
      {
        v19[2] = v59;
        v71 = (uint64_t *)&v72;
        v72 = 0;
        v73 = 0;
      }
      else
      {
        v58 = (uint64_t *)v59;
      }
      v60 = v74;
      v61 = v75;
      v62 = v23;
      v63[0] = v22;
      v63[1] = v24;
      if (v24)
      {
        v22[2] = v63;
        v66 = (uint64_t *)&v67;
        v67 = 0;
        v68 = 0;
        v22 = 0;
      }
      else
      {
        v62 = (uint64_t *)v63;
      }
      v64 = v69;
      v65 = v70;
      sub_1C4FE319C((uint64_t)&v66, v22);
      sub_1C4FE319C((uint64_t)&v71, v72);
      sub_1C4FE319C((uint64_t)&v48, v49);
      sub_1C4FE319C((uint64_t)&v53, v54);
      sub_1C522222C(&v71, &v58);
      v74 = v60;
      v75 = v61;
      sub_1C522222C(&v66, &v62);
      v70 = v65;
      v69 = v64;
      if (DWORD2(v74) != DWORD2(v64))
      {
        v25 = (_QWORD *)v74;
        v26 = (char *)v2[20];
        do
        {
          v27 = *((_DWORD *)v25 + 8);
          v28 = v25[5];
          if (v27)
            v29 = v28;
          else
            v29 = 0;
          v30 = v2[21];
          if ((unint64_t)v26 >= v30)
          {
            v31 = (char *)v2[19];
            v32 = (v26 - v31) >> 4;
            v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 60)
              goto LABEL_74;
            v34 = v30 - (_QWORD)v31;
            if (v34 >> 3 > v33)
              v33 = v34 >> 3;
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
              v35 = 0xFFFFFFFFFFFFFFFLL;
            else
              v35 = v33;
            if (v35)
            {
              if (v35 >> 60)
                goto LABEL_75;
              v36 = (char *)operator new(16 * v35);
            }
            else
            {
              v36 = 0;
            }
            v37 = &v36[16 * v32];
            *(_WORD *)v37 = v27;
            *((_QWORD *)v37 + 1) = v29;
            if (v26 == v31)
            {
              v39 = v26;
              v38 = &v36[16 * v32];
            }
            else
            {
              v38 = &v36[16 * v32];
              do
              {
                *((_OWORD *)v38 - 1) = *((_OWORD *)v26 - 1);
                v38 -= 16;
                v26 -= 16;
              }
              while (v26 != v31);
              v39 = (char *)v2[19];
            }
            v26 = v37 + 16;
            v2[19] = v38;
            v2[20] = v37 + 16;
            v2[21] = &v36[16 * v35];
            if (v39)
              operator delete(v39);
          }
          else
          {
            *(_WORD *)v26 = v27;
            *((_WORD *)v26 + 3) = v47;
            *(_DWORD *)(v26 + 2) = v46;
            *((_QWORD *)v26 + 1) = v29;
            v26 += 16;
          }
          v2[20] = v26;
          v40 = (_QWORD *)v74;
          v41 = *(_QWORD **)(v74 + 8);
          if (v41)
          {
            do
            {
              v25 = v41;
              v41 = (_QWORD *)*v41;
            }
            while (v41);
          }
          else
          {
            do
            {
              v25 = (_QWORD *)v40[2];
              v42 = *v25 == (_QWORD)v40;
              v40 = v25;
            }
            while (!v42);
          }
          *(_QWORD *)&v74 = v25;
          ++DWORD2(v74);
        }
        while (DWORD2(v74) != DWORD2(v69));
      }
      sub_1C4FE319C((uint64_t)&v66, v67);
      sub_1C4FE319C((uint64_t)&v71, v72);
      sub_1C4FE319C((uint64_t)&v62, v63[0]);
      sub_1C4FE319C((uint64_t)&v58, v59[0]);
      if (v7)
        operator delete(v7);
      v2 = (_QWORD *)v2[1];
    }
    while (v2 != v45);
  }
}

void llvm::rdf::Liveness::resetKills(llvm::rdf::Liveness *this)
{
  uint64_t v1;
  llvm::MachineBasicBlock *v2;
  llvm::MachineBasicBlock *v3;

  v1 = **(_QWORD **)this;
  v2 = (llvm::MachineBasicBlock *)(v1 + 320);
  v3 = *(llvm::MachineBasicBlock **)(v1 + 328);
  if (v3 != (llvm::MachineBasicBlock *)(v1 + 320))
  {
    do
    {
      llvm::rdf::Liveness::resetKills(this, v3);
      v3 = (llvm::MachineBasicBlock *)*((_QWORD *)v3 + 1);
    }
    while (v3 != v2);
  }
}

void llvm::rdf::Liveness::resetKills(llvm::rdf::Liveness *this, llvm::MachineBasicBlock *a2)
{
  int v4;
  int v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  unsigned __int16 v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned __int16 *v21;
  int v22;
  uint64_t v23;
  uint64_t i;
  unsigned __int16 *v25;
  unsigned __int16 *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int16 *v36;
  unsigned __int16 v37;
  uint64_t v38;
  _QWORD *v39;
  unsigned __int16 *v40;
  int v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  _DWORD *v50;
  _QWORD *v51;
  _DWORD *v52;
  unsigned int v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unsigned __int16 *v57;
  int v58;
  unsigned __int16 *v59;
  unsigned int v60;
  __int16 v61;
  int v62;
  unint64_t v63;
  unsigned int v64;
  int v65;
  _WORD *v66;
  unsigned __int16 *v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unsigned __int16 *v77;
  int v78;
  uint64_t v79;
  int v81;
  _QWORD *v82;
  uint64_t v83;
  unsigned __int16 *v84;
  _QWORD *v85;
  int v86;
  void *v87[2];
  _DWORD v88[14];
  void *v89[2];
  _DWORD v90[14];
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(*((_QWORD *)this + 1) + 16);
  v89[0] = v90;
  v89[1] = (void *)0x600000000;
  sub_1C4765AA4((char *)v89, (v4 + 63) >> 6, 0);
  v90[12] = v4;
  v5 = *(_DWORD *)(*((_QWORD *)this + 1) + 16);
  v87[0] = v88;
  v87[1] = (void *)0x600000000;
  sub_1C4765AA4((char *)v87, (v5 + 63) >> 6, 0);
  v88[12] = v5;
  v6 = (unsigned __int16 *)*((_QWORD *)a2 + 19);
  v7 = (unsigned __int16 *)*((_QWORD *)a2 + 20);
  if (v7 != v6)
  {
    v8 = *((_QWORD *)this + 1);
    if (v8)
      v9 = (uint64_t *)(v8 + 8);
    else
      v9 = 0;
    v10 = v9[6];
    v11 = *v9;
    v12 = v9[10];
    v13 = v89[0];
    do
    {
      v14 = *v6;
      v15 = *(unsigned int *)(v11 + 24 * *v6 + 4);
      if (*(_WORD *)(v10 + 2 * v15))
      {
        v16 = *((_QWORD *)v6 + 1);
        v17 = (unsigned __int16 *)(v12 + 2 * *(unsigned int *)(v11 + 24 * *v6 + 12));
        v18 = *(_WORD *)(v10 + 2 * v15) + v14;
        v19 = *(_QWORD *)(v8 + 232);
        v20 = v89[0];
        v21 = (unsigned __int16 *)(v10 + 2 + 2 * v15);
        do
        {
          if ((*(_QWORD *)(v19 + 8 * *v17) & v16) != 0)
            v20[v18 >> 6] |= 1 << v18;
          v22 = *v21++;
          v18 += v22;
          ++v17;
        }
        while (v22);
      }
      else
      {
        v13[v14 >> 6] |= 1 << v14;
      }
      v6 += 8;
    }
    while (v6 != v7);
  }
  v23 = *((_QWORD *)a2 + 11);
  for (i = *((_QWORD *)a2 + 12); v23 != i; v23 += 8)
  {
    v25 = *(unsigned __int16 **)(*(_QWORD *)v23 + 152);
    v26 = *(unsigned __int16 **)(*(_QWORD *)v23 + 160);
    if (v26 != v25)
    {
      v27 = *((_QWORD *)this + 1);
      if (v27)
        v28 = (uint64_t *)(v27 + 8);
      else
        v28 = 0;
      v29 = v28[6];
      v30 = *v28;
      v31 = v28[10];
      v32 = v87[0];
      do
      {
        v33 = *v25;
        v34 = *(unsigned int *)(v30 + 24 * *v25 + 4);
        if (*(_WORD *)(v29 + 2 * v34))
        {
          v35 = *((_QWORD *)v25 + 1);
          v36 = (unsigned __int16 *)(v31 + 2 * *(unsigned int *)(v30 + 24 * *v25 + 12));
          v37 = *(_WORD *)(v29 + 2 * v34) + v33;
          v38 = *(_QWORD *)(v27 + 232);
          v39 = v87[0];
          v40 = (unsigned __int16 *)(v29 + 2 + 2 * v34);
          do
          {
            if ((*(_QWORD *)(v38 + 8 * *v36) & v35) != 0)
              v39[v37 >> 6] |= 1 << v37;
            v41 = *v40++;
            v37 += v41;
            ++v36;
          }
          while (v41);
        }
        else
        {
          v32[v33 >> 6] |= 1 << v33;
        }
        v25 += 8;
      }
      while (v25 != v26);
    }
  }
  v43 = *((_QWORD *)a2 + 6);
  v42 = (char *)a2 + 48;
  v44 = v43 & 0xFFFFFFFFFFFFFFF8;
  if ((v43 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(_BYTE *)v44 & 4) == 0)
  {
    while ((*(_WORD *)(v44 + 44) & 4) != 0)
      v44 = *(_QWORD *)v44 & 0xFFFFFFFFFFFFFFF8;
  }
  while ((char *)v44 != v42)
  {
    if (**(unsigned __int16 **)(v44 + 16) - 13 >= 5)
    {
      v45 = *(unsigned int *)(v44 + 40);
      if ((_DWORD)v45)
      {
        v46 = *(_DWORD **)(v44 + 32);
        v47 = 32 * v45;
        do
        {
          if ((*v46 & 0x10000FF) == 0)
            *v46 &= ~0x4000000u;
          v46 += 8;
          v47 -= 32;
        }
        while (v47);
        v48 = *(unsigned int *)(v44 + 40);
        if ((_DWORD)v48)
        {
          v49 = *(_DWORD **)(v44 + 32);
          v50 = &v49[8 * v48];
          v51 = v87[0];
          v52 = v49;
          do
          {
            if ((*v52 & 0x30000FF) == 0x1000000)
            {
              v53 = v52[1];
              if (v53 - 1 <= 0x3FFFFFFE)
              {
                v54 = *((_QWORD *)this + 1);
                v55 = (_QWORD *)(v54 + 8);
                if (!v54)
                  v55 = 0;
                v56 = v55[6];
                if (v56)
                {
                  v57 = (unsigned __int16 *)(v56 + 2 * *(unsigned int *)(*v55 + 24 * v53 + 4));
                  do
                  {
                    v51[(unsigned __int16)v53 >> 6] &= ~(1 << v53);
                    v58 = *v57++;
                    v53 += v58;
                  }
                  while (v58);
                }
              }
            }
            v52 += 8;
          }
          while (v52 != v50);
          do
          {
            if ((*v49 & 0x110000FF) == 0)
            {
              v68 = v49[1];
              if (v68 - 1 <= 0x3FFFFFFE)
              {
                v69 = *((_QWORD *)this + 1);
                if (v69)
                  v70 = (uint64_t *)(v69 + 8);
                else
                  v70 = 0;
                v71 = *v70;
                v72 = *(_DWORD *)(*v70 + 24 * v68 + 16) & 0xF;
                v73 = ((unint64_t)*(unsigned int *)(*v70 + 24 * v68 + 16) >> 3) & 0x1FFFFFFE;
                v76 = v70 + 5;
                v75 = v70[5];
                v74 = v76[1];
                v77 = (unsigned __int16 *)(v74 + v73);
                v78 = *v77;
                v66 = v77 + 1;
                v65 = v78 + v72 * v68;
                while (1)
                {
                  v79 = 4 * (unsigned __int16)v65;
                  v63 = *(unsigned __int16 *)(v75 + v79);
                  if (*(_WORD *)(v75 + v79) && v74 != 0)
                    break;
                  v81 = (unsigned __int16)*v66++;
                  v65 += v81;
                  if (!v81)
                  {
LABEL_74:
                    *v49 |= 0x4000000u;
                    v69 = *((_QWORD *)this + 1);
                    goto LABEL_76;
                  }
                }
                if (((*(_QWORD *)((char *)v87[0] + ((v63 >> 3) & 0x1FF8)) >> v63) & 1) == 0)
                {
                  v59 = (unsigned __int16 *)(v74
                                           + 2
                                           * *(unsigned int *)(v71
                                                             + 24
                                                             * *(unsigned __int16 *)(v75 + 4 * (unsigned __int16)v65)
                                                             + 8));
                  v60 = *(unsigned __int16 *)(v75 + 4 * (unsigned __int16)v65 + 2) << 16;
                  do
                  {
                    v62 = *v59++;
                    v61 = v62;
                    if (v62)
                    {
                      LOWORD(v63) = v61 + v63;
                    }
                    else
                    {
                      v64 = HIWORD(v60);
                      if (HIWORD(v60))
                      {
                        v60 >>= 16;
                      }
                      else
                      {
                        if (!*v66)
                          goto LABEL_74;
                        v65 += (unsigned __int16)*v66++;
                        v67 = (unsigned __int16 *)(v75 + 4 * (unsigned __int16)v65);
                        v64 = *v67;
                        v60 = v67[1] << 16;
                      }
                      LOWORD(v63) = v64;
                      v59 = (unsigned __int16 *)(v74 + 2 * *(unsigned int *)(v71 + 24 * v64 + 8));
                    }
                  }
                  while (((*((_QWORD *)v87[0] + ((unsigned __int16)v63 >> 6)) >> v63) & 1) == 0);
                }
LABEL_76:
                if (v69)
                  v82 = (_QWORD *)(v69 + 8);
                else
                  v82 = 0;
                v83 = v82[6];
                if (v83)
                {
                  v84 = (unsigned __int16 *)(v83 + 2 * *(unsigned int *)(*v82 + 24 * v68 + 4));
                  v85 = v87[0];
                  do
                  {
                    v85[(unsigned __int16)v68 >> 6] |= 1 << v68;
                    v86 = *v84++;
                    v68 += v86;
                  }
                  while (v86);
                }
              }
            }
            v49 += 8;
          }
          while (v49 != v50);
        }
      }
    }
    v44 = *(_QWORD *)v44 & 0xFFFFFFFFFFFFFFF8;
    if (!v44 || (*(_BYTE *)v44 & 4) == 0)
    {
      while ((*(_WORD *)(v44 + 44) & 4) != 0)
        v44 = *(_QWORD *)v44 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  if (v87[0] != v88)
    free(v87[0]);
  if (v89[0] != v90)
    free(v89[0]);
}

uint64_t llvm::rdf::Liveness::getBlockWithRef(llvm::rdf::Liveness *this, int a2)
{
  return *((_QWORD *)sub_1C4D7501C(*((_QWORD *)this + 34), *((_DWORD *)this + 72), a2) + 1);
}

void llvm::rdf::Liveness::emptify(uint64_t a1, _QWORD *a2)
{
  uint64_t *i;

  for (i = (uint64_t *)a2[2]; i; i = (uint64_t *)sub_1C52219F8(a2, i))
  {
    while (i[6])
    {
      i = (uint64_t *)*i;
      if (!i)
        return;
    }
  }
}

void sub_1C521EB58(_QWORD *a1)
{
  _QWORD *v2;

  if (a1)
  {
    sub_1C521EB58(*a1);
    sub_1C521EB58(a1[1]);
    v2 = (_QWORD *)a1[5];
    if (v2 != a1 + 7)
      free(v2);
    operator delete(a1);
  }
}

uint64_t **sub_1C521EBA4(uint64_t **a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  void **v14;
  unsigned int v15;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;

  v8 = a1 + 1;
  v7 = a1[1];
  if (!v7)
  {
    v9 = a1 + 1;
LABEL_9:
    v11 = operator new(0x78uLL);
    v12 = v11;
    v11[4] = a3;
    v13 = v11 + 7;
    v11[5] = v11 + 7;
    v14 = (void **)(v11 + 5);
    v11[6] = 0x600000000;
    v15 = *(_DWORD *)(a4 + 8);
    if (v11 + 5 == (_QWORD *)a4 || v15 == 0)
      goto LABEL_20;
    if (v15 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v11 + 5), (uint64_t)v13, *(unsigned int *)(a4 + 8), 8);
      v17 = *(unsigned int *)(a4 + 8);
      if (!(_DWORD)v17)
      {
LABEL_19:
        *((_DWORD *)v12 + 12) = v15;
LABEL_20:
        *((_DWORD *)v12 + 26) = *(_DWORD *)(a4 + 64);
        v12[14] = *(_QWORD *)(a4 + 72);
        *v12 = 0;
        v12[1] = 0;
        v12[2] = v9;
        *v8 = v12;
        v18 = (uint64_t *)**a1;
        v19 = v12;
        if (v18)
        {
          *a1 = v18;
          v19 = *v8;
        }
        sub_1C4768E74(a1[1], v19);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
        return (uint64_t **)v12;
      }
      v13 = *v14;
    }
    else
    {
      v17 = *(unsigned int *)(a4 + 8);
    }
    memcpy(v13, *(const void **)a4, 8 * v17);
    goto LABEL_19;
  }
  while (1)
  {
    while (1)
    {
      v9 = (uint64_t **)v7;
      v10 = v7[4];
      if (v10 <= a2)
        break;
      v7 = *v9;
      v8 = v9;
      if (!*v9)
        goto LABEL_9;
    }
    if (v10 >= a2)
      return v9;
    v7 = v9[1];
    if (!v7)
    {
      v8 = v9 + 1;
      goto LABEL_9;
    }
  }
}

uint64_t sub_1C521ECF4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_1C61B8160((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t sub_1C521ED50(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  BOOL v31;
  BOOL v32;
  unsigned int v33;
  unsigned int *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int *v55;
  BOOL v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  unsigned int *v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t *v75;
  int v76;
  unsigned int *v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int *v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int *v90;
  int64_t v91;
  unsigned int *v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int *v100;
  uint64_t v101;
  unint64_t v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  unsigned int *v107;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int *v112;
  unsigned int *v113;
  int64_t v114;
  unsigned int *v115;
  int64_t v116;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  unsigned int *v123;

  v123 = (unsigned int *)result;
LABEL_2:
  v7 = a2;
  v8 = v123;
  v115 = a2 - 1;
  while (2)
  {
    v9 = (char *)v7 - (char *)v8;
    v10 = v7 - v8;
    v123 = v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v45 = *(a2 - 1);
        v46 = *v8;
        result = sub_1C521F658(*(_QWORD *)a3, *(uint64_t **)(a3 + 8), v45, *v8);
        if ((_DWORD)result)
        {
          *v8 = v45;
          *(a2 - 1) = v46;
        }
        return result;
      case 3:
        return sub_1C521F824(v8, v8 + 1, v115, a3);
      case 4:
        return sub_1C521FB48(v8, v8 + 1, v8 + 2, v115, a3);
      case 5:
        v47 = v8 + 2;
        v48 = v8 + 3;
        sub_1C521FB48(v8, v8 + 1, v8 + 2, v8 + 3, a3);
        v49 = *(a2 - 1);
        v50 = v8[3];
        result = sub_1C521F658(*(_QWORD *)a3, *(uint64_t **)(a3 + 8), v49, v50);
        if ((_DWORD)result)
        {
          *v48 = v49;
          *(a2 - 1) = v50;
          v51 = *v48;
          v52 = *v47;
          result = sub_1C521F658(*(_QWORD *)a3, *(uint64_t **)(a3 + 8), *v48, *v47);
          if ((_DWORD)result)
          {
            *v47 = v51;
            *v48 = v52;
            v53 = v8[1];
            result = sub_1C521F658(*(_QWORD *)a3, *(uint64_t **)(a3 + 8), v51, v53);
            if ((_DWORD)result)
            {
              v8[1] = v51;
              v8[2] = v53;
              v54 = *v8;
              result = sub_1C521F658(*(_QWORD *)a3, *(uint64_t **)(a3 + 8), v51, *v8);
              if ((_DWORD)result)
              {
                *v8 = v51;
                v8[1] = v54;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 95)
        {
          v55 = v8 + 1;
          v56 = v8 == v7 || v55 == v7;
          v57 = v56;
          if ((a5 & 1) != 0)
          {
            if ((v57 & 1) == 0)
            {
              v58 = 0;
              v59 = *(_QWORD *)a3;
              v60 = v8;
              do
              {
                v62 = *v60;
                v61 = v60[1];
                v60 = v55;
                result = sub_1C521F658(v59, *(uint64_t **)(a3 + 8), v61, v62);
                if ((_DWORD)result)
                {
                  v63 = v58;
                  while (1)
                  {
                    *(unsigned int *)((char *)v8 + v63 + 4) = v62;
                    if (!v63)
                      break;
                    v62 = *(unsigned int *)((char *)v8 + v63 - 4);
                    result = sub_1C521F658(*(_QWORD *)a3, *(uint64_t **)(a3 + 8), v61, v62);
                    v63 -= 4;
                    if ((result & 1) == 0)
                    {
                      v64 = (unsigned int *)((char *)v8 + v63 + 4);
                      goto LABEL_79;
                    }
                  }
                  v64 = v8;
LABEL_79:
                  *v64 = v61;
                  v59 = *(_QWORD *)a3;
                }
                v55 = v60 + 1;
                v58 += 4;
              }
              while (v60 + 1 != a2);
            }
          }
          else if ((v57 & 1) == 0)
          {
            v109 = *(_QWORD *)a3;
            do
            {
              v111 = *v123;
              v110 = v123[1];
              v112 = v55;
              result = sub_1C521F658(v109, *(uint64_t **)(a3 + 8), v110, *v123);
              if ((_DWORD)result)
              {
                v113 = v112;
                do
                {
                  *v113 = v111;
                  v111 = *(v113 - 2);
                  result = sub_1C521F658(*(_QWORD *)a3, *(uint64_t **)(a3 + 8), v110, v111);
                  --v113;
                }
                while ((result & 1) != 0);
                *v113 = v110;
                v109 = *(_QWORD *)a3;
              }
              v123 = v112;
              v55 = v112 + 1;
            }
            while (v112 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v8 != v7)
          {
            v65 = a3;
            v66 = (unint64_t)(v10 - 2) >> 1;
            v67 = v66;
            v120 = v10;
            v116 = v66;
            do
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = &v123[v69];
                v71 = 2 * v67 + 2;
                v72 = *v70;
                v114 = v67;
                if (v71 >= v10)
                {
                  v74 = *(_QWORD *)v65;
                  v75 = *(uint64_t **)(v65 + 8);
                }
                else
                {
                  v73 = v70[1];
                  v74 = *(_QWORD *)v65;
                  v75 = *(uint64_t **)(v65 + 8);
                  v76 = sub_1C521F658(*(_QWORD *)v65, v75, v72, v73);
                  if (v76)
                  {
                    v72 = v73;
                    ++v70;
                  }
                  v68 = v114;
                  if (v76)
                    v69 = v71;
                }
                v77 = &v123[v68];
                v78 = v74;
                v79 = *v77;
                result = sub_1C521F658(v78, v75, v72, *v77);
                v10 = v120;
                if ((result & 1) == 0)
                {
                  v118 = v79;
                  do
                  {
                    v80 = v70;
                    *v77 = v72;
                    if (v66 < v69)
                      break;
                    v81 = (2 * v69) | 1;
                    v70 = &v123[v81];
                    v82 = 2 * v69 + 2;
                    v72 = *v70;
                    if (v82 >= v10)
                    {
                      v84 = *(_QWORD *)v65;
                      v85 = *(uint64_t **)(v65 + 8);
                      v69 = (2 * v69) | 1;
                    }
                    else
                    {
                      v83 = v70[1];
                      v84 = *(_QWORD *)v65;
                      v85 = *(uint64_t **)(v65 + 8);
                      v86 = sub_1C521F658(*(_QWORD *)v65, v85, *v70, v83);
                      if (v86)
                      {
                        v72 = v83;
                        ++v70;
                      }
                      v66 = v116;
                      v69 = v86 ? v82 : v81;
                    }
                    v87 = v84;
                    v79 = v118;
                    result = sub_1C521F658(v87, v85, v72, v118);
                    v77 = v80;
                    v10 = v120;
                  }
                  while (!(_DWORD)result);
                  *v80 = v79;
                  v68 = v114;
                }
              }
              v67 = v68 - 1;
            }
            while (v68);
            v88 = v65;
            do
            {
              v89 = 0;
              v90 = v123;
              v121 = *v123;
              v91 = (unint64_t)(v10 - 2) >> 1;
              do
              {
                v92 = &v90[v89];
                v95 = v92[1];
                v93 = v92 + 1;
                v94 = v95;
                v96 = (2 * v89) | 1;
                v97 = 2 * v89 + 2;
                if (v97 < v10)
                {
                  v98 = v93[1];
                  v99 = v10;
                  result = sub_1C521F658(*(_QWORD *)v65, *(uint64_t **)(v65 + 8), v94, v98);
                  v10 = v99;
                  if ((_DWORD)result)
                  {
                    v94 = v98;
                    ++v93;
                  }
                  v88 = v65;
                  if ((_DWORD)result)
                    v96 = v97;
                }
                *v90 = v94;
                v90 = v93;
                v89 = v96;
              }
              while (v96 <= v91);
              v100 = a2 - 1;
              v56 = v93 == --a2;
              if (v56)
              {
                *v93 = v121;
              }
              else
              {
                *v93 = *v100;
                *v100 = v121;
                v101 = (char *)v93 - (char *)v123 + 4;
                if (v101 >= 5)
                {
                  v102 = (((unint64_t)v101 >> 2) - 2) >> 1;
                  v103 = &v123[v102];
                  v104 = *v103;
                  v105 = *v93;
                  v106 = v10;
                  result = sub_1C521F658(*(_QWORD *)v88, *(uint64_t **)(v88 + 8), *v103, *v93);
                  v10 = v106;
                  if ((_DWORD)result)
                  {
                    do
                    {
                      v107 = v103;
                      *v93 = v104;
                      if (!v102)
                        break;
                      v102 = (v102 - 1) >> 1;
                      v103 = &v123[v102];
                      v104 = *v103;
                      result = sub_1C521F658(*(_QWORD *)v88, *(uint64_t **)(v88 + 8), *v103, v105);
                      v93 = v107;
                    }
                    while ((result & 1) != 0);
                    *v107 = v105;
                    v10 = v106;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x201)
        {
          sub_1C521F824(&v8[(unint64_t)v10 >> 1], v8, v115, a3);
        }
        else
        {
          sub_1C521F824(v8, &v8[(unint64_t)v10 >> 1], v115, a3);
          sub_1C521F824(v8 + 1, v12 - 1, a2 - 2, a3);
          sub_1C521F824(v8 + 2, &v8[v11 + 1], a2 - 3, a3);
          sub_1C521F824(v12 - 1, v12, &v8[v11 + 1], a3);
          v13 = *v8;
          *v8 = *v12;
          *v12 = v13;
        }
        v14 = a4 - 1;
        v15 = *v8;
        v16 = *(_QWORD *)a3;
        v17 = *(uint64_t **)(a3 + 8);
        if ((a5 & 1) == 0 && (sub_1C521F658(*(_QWORD *)a3, *(uint64_t **)(a3 + 8), *(v8 - 1), *v8) & 1) == 0)
        {
          result = sub_1C521F658(v16, v17, v15, *v115);
          if ((result & 1) != 0)
          {
            do
            {
              v33 = v8[1];
              ++v8;
              result = sub_1C521F658(v16, v17, v15, v33);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v34 = v8 + 1;
            do
            {
              v8 = v34;
              if (v34 >= v7)
                break;
              ++v34;
              result = sub_1C521F658(v16, v17, v15, *v8);
            }
            while (!(_DWORD)result);
          }
          v35 = v14;
          v36 = v7;
          if (v8 < v7)
          {
            v36 = v7;
            do
            {
              v37 = *--v36;
              result = sub_1C521F658(v16, v17, v15, v37);
            }
            while ((result & 1) != 0);
          }
          if (v8 < v36)
          {
            v38 = *v8;
            v39 = *v36;
            do
            {
              *v8 = v39;
              *v36 = v38;
              v40 = *(_QWORD *)a3;
              v41 = *(uint64_t **)(a3 + 8);
              do
              {
                v42 = v8[1];
                ++v8;
                v38 = v42;
              }
              while (!sub_1C521F658(v40, v41, v15, v42));
              do
              {
                v43 = *--v36;
                v39 = v43;
                result = sub_1C521F658(v40, v41, v15, v43);
              }
              while ((result & 1) != 0);
            }
            while (v8 < v36);
          }
          v44 = v8 - 1;
          v7 = a2;
          if (v8 - 1 != v123)
            *v123 = *v44;
          a5 = 0;
          *v44 = v15;
          a4 = v35;
          continue;
        }
        v119 = v14;
        v18 = 0;
        do
          v19 = v8[++v18];
        while ((sub_1C521F658(v16, v17, v19, v15) & 1) != 0);
        v20 = &v8[v18];
        v21 = v7;
        if (v18 == 1)
        {
          v21 = v7;
          do
          {
            if (v20 >= v21)
              break;
            v23 = *--v21;
          }
          while ((sub_1C521F658(v16, v17, v23, v15) & 1) == 0);
        }
        else
        {
          do
            v22 = *--v21;
          while (!sub_1C521F658(v16, v17, v22, v15));
        }
        if (v20 >= v21)
        {
          v8 = (unsigned int *)((char *)v8 + v18 * 4);
        }
        else
        {
          v24 = *v21;
          v8 = (unsigned int *)((char *)v8 + v18 * 4);
          v25 = v21;
          do
          {
            *v8 = v24;
            *v25 = v19;
            v26 = *(_QWORD *)a3;
            v27 = *(uint64_t **)(a3 + 8);
            do
            {
              v28 = v8[1];
              ++v8;
              v19 = v28;
            }
            while ((sub_1C521F658(v26, v27, v28, v15) & 1) != 0);
            do
            {
              v29 = *--v25;
              v24 = v29;
            }
            while (!sub_1C521F658(v26, v27, v29, v15));
          }
          while (v8 < v25);
        }
        v30 = v8 - 1;
        v7 = a2;
        if (v8 - 1 != v123)
          *v123 = *v30;
        *v30 = v15;
        v31 = v20 >= v21;
        a4 = v119;
        if (!v31)
        {
LABEL_33:
          result = sub_1C521ED50(v123, v8 - 1, a3, v119, a5 & 1);
          a5 = 0;
          continue;
        }
        v32 = sub_1C521F914(v123, v8 - 1, a3);
        result = sub_1C521F914(v8, a2, a3);
        if (!(_DWORD)result)
        {
          if (v32)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 1;
        if (!v32)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t sub_1C521F658(uint64_t a1, uint64_t *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  int v32;

  if (a3 == a4)
  {
LABEL_2:
    LOBYTE(v4) = 0;
    return v4 & 1;
  }
  v5 = *(_DWORD *)(*(_QWORD *)a1 + 276);
  v6 = *(_DWORD *)(*(_QWORD *)a1 + 280);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 296);
  v8 = *(_QWORD *)(v7 + 8 * ((a3 - 1) >> v5)) + 32 * (v6 & (a3 - 1));
  v9 = *(_QWORD *)(v7 + 8 * ((a4 - 1) >> v5)) + 32 * (v6 & (a4 - 1));
  v10 = *(_WORD *)v8 & 0x1C;
  v11 = *(_WORD *)v9 & 0x1C;
  if (v10 != 16 || v11 != 16)
  {
    v13 = v10 != 16;
    if (v13 && v11 != 16)
      LOBYTE(v4) = a3 < a4;
    else
      LOBYTE(v4) = v13;
    return v4 & 1;
  }
  v14 = *(_QWORD *)(v8 + 8);
  v15 = *(_QWORD *)(v9 + 8);
  v4 = *((unsigned int *)a2 + 4);
  if (!(_DWORD)v4)
    goto LABEL_18;
  v16 = *a2;
  v17 = v4 - 1;
  LODWORD(v18) = (v4 - 1) & ((v14 >> 4) ^ (v14 >> 9));
  v19 = (_QWORD *)(*a2 + 16 * v18);
  v20 = *v19;
  if (v14 != *v19)
  {
    v21 = 1;
    while (v20 != -4096)
    {
      v22 = v18 + v21++;
      v18 = v22 & v17;
      v20 = *(_QWORD *)(v16 + 16 * v18);
      if (v14 == v20)
      {
        if ((_DWORD)v18 == (_DWORD)v4)
          goto LABEL_18;
        v23 = (unsigned int *)(v16 + 16 * v18 + 8);
        goto LABEL_31;
      }
    }
    goto LABEL_18;
  }
  if ((_DWORD)v18 == (_DWORD)v4)
  {
LABEL_18:
    v24 = *(_QWORD *)(v14 + 24);
    v25 = v24 + 48;
    v26 = *(_QWORD *)(v24 + 56);
    if (v26 != v25)
    {
      while (v26 != v14)
      {
        if (v26 == v15)
          goto LABEL_2;
        if (!v26 || (LOBYTE(v4) = *(_BYTE *)v26, (*(_BYTE *)v26 & 4) == 0))
        {
          while (1)
          {
            LOWORD(v4) = *(_WORD *)(v26 + 44);
            if ((v4 & 8) == 0)
              break;
            v26 = *(_QWORD *)(v26 + 8);
          }
        }
        v26 = *(_QWORD *)(v26 + 8);
        if (v26 == v25)
          return v4 & 1;
      }
      LOBYTE(v4) = 1;
    }
    return v4 & 1;
  }
  v23 = (unsigned int *)(v19 + 1);
LABEL_31:
  v27 = *v23;
  LODWORD(v28) = v17 & ((v15 >> 4) ^ (v15 >> 9));
  v29 = (uint64_t *)(v16 + 16 * v28);
  v30 = *v29;
  if (v15 != *v29)
  {
    v29 = (uint64_t *)(v16 + 16 * v4);
    v31 = 1;
    while (v30 != -4096)
    {
      v32 = v28 + v31++;
      v28 = v32 & v17;
      v30 = *(_QWORD *)(v16 + 16 * v28);
      if (v15 == v30)
      {
        v29 = (uint64_t *)(v16 + 16 * v28);
        break;
      }
    }
  }
  LOBYTE(v4) = v27 < *((_DWORD *)v29 + 2);
  return v4 & 1;
}

uint64_t sub_1C521F824(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  char v12;
  unsigned int v13;
  uint64_t result;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  v8 = *a2;
  v9 = *a1;
  v10 = *(_QWORD *)a4;
  v11 = *(uint64_t **)(a4 + 8);
  v12 = sub_1C521F658(*(_QWORD *)a4, v11, *a2, *a1);
  v13 = *a3;
  result = sub_1C521F658(v10, v11, *a3, v8);
  if ((v12 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      *a1 = v13;
    }
    else
    {
      *a1 = v8;
      *a2 = v9;
      v17 = *a3;
      result = sub_1C521F658(*(_QWORD *)a4, *(uint64_t **)(a4 + 8), *a3, v9);
      if (!(_DWORD)result)
        return result;
      *a2 = v17;
    }
    *a3 = v9;
  }
  else if ((_DWORD)result)
  {
    *a2 = v13;
    *a3 = v8;
    v15 = *a2;
    v16 = *a1;
    result = sub_1C521F658(*(_QWORD *)a4, *(uint64_t **)(a4 + 8), *a2, *a1);
    if ((_DWORD)result)
    {
      *a1 = v15;
      *a2 = v16;
    }
  }
  return result;
}

BOOL sub_1C521F914(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (sub_1C521F658(*(_QWORD *)a3, *(uint64_t **)(a3 + 8), v8, *a1))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      sub_1C521F824(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1C521FB48(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v20 = a1 + 2;
      v21 = a1 + 3;
      sub_1C521FB48(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      v22 = *(a2 - 1);
      v23 = a1[3];
      if (sub_1C521F658(*(_QWORD *)a3, *(uint64_t **)(a3 + 8), v22, v23))
      {
        *v21 = v22;
        *(a2 - 1) = v23;
        v24 = *v21;
        v25 = *v20;
        if (sub_1C521F658(*(_QWORD *)a3, *(uint64_t **)(a3 + 8), *v21, *v20))
        {
          *v20 = v24;
          *v21 = v25;
          v26 = a1[1];
          if (sub_1C521F658(*(_QWORD *)a3, *(uint64_t **)(a3 + 8), v24, v26))
          {
            a1[1] = v24;
            a1[2] = v26;
            v27 = *a1;
            if (sub_1C521F658(*(_QWORD *)a3, *(uint64_t **)(a3 + 8), v24, *a1))
            {
              *a1 = v24;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 2;
      sub_1C521F824(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 12;
      break;
  }
  while (1)
  {
    v14 = *v11;
    v15 = *v10;
    if (sub_1C521F658(*(_QWORD *)a3, *(uint64_t **)(a3 + 8), *v11, v15))
    {
      v16 = v13;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v16) = v15;
        v17 = v16 - 4;
        if (v16 == 4)
          break;
        v15 = *(unsigned int *)((char *)a1 + v16 - 8);
        v18 = sub_1C521F658(*(_QWORD *)a3, *(uint64_t **)(a3 + 8), v14, v15);
        v16 = v17;
        if ((v18 & 1) == 0)
        {
          v19 = (unsigned int *)((char *)a1 + v17);
          goto LABEL_13;
        }
      }
      v19 = a1;
LABEL_13:
      *v19 = v14;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v13 += 4;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t sub_1C521FB48(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, uint64_t a5)
{
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;

  sub_1C521F824(a1, a2, a3, a5);
  v10 = *a4;
  v11 = *a3;
  result = sub_1C521F658(*(_QWORD *)a5, *(uint64_t **)(a5 + 8), *a4, *a3);
  if ((_DWORD)result)
  {
    *a3 = v10;
    *a4 = v11;
    v13 = *a3;
    v14 = *a2;
    result = sub_1C521F658(*(_QWORD *)a5, *(uint64_t **)(a5 + 8), *a3, *a2);
    if ((_DWORD)result)
    {
      *a2 = v13;
      *a3 = v14;
      v15 = *a2;
      v16 = *a1;
      result = sub_1C521F658(*(_QWORD *)a5, *(uint64_t **)(a5 + 8), *a2, *a1);
      if ((_DWORD)result)
      {
        *a1 = v15;
        *a2 = v16;
      }
    }
  }
  return result;
}

uint64_t sub_1C521FC00(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  BOOL v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  int64_t v69;
  uint64_t *v70;
  int64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BOOL4 v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BOOL4 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  int64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int64_t v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  int64_t v130;
  unint64_t v131;
  uint64_t *v132;

  v132 = (uint64_t *)result;
LABEL_2:
  v126 = a2 - 1;
  v8 = v132;
  while (2)
  {
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    v132 = v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v52 = *(a2 - 1);
        v53 = *v8;
        v54 = *(_QWORD *)(*(_QWORD *)a3 + 24);
        llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v54);
        result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v54 + 1320), v52, v53);
        if ((_DWORD)result)
        {
          v55 = *v8;
          *v8 = *(a2 - 1);
          *(a2 - 1) = v55;
        }
        return result;
      case 3uLL:
        return sub_1C52206EC(v8, v8 + 1, v126, a3);
      case 4uLL:
        return sub_1C5220A24(v8, v8 + 1, v8 + 2, v126, a3);
      case 5uLL:
        return sub_1C52205A4(v8, v8 + 1, v8 + 2, v8 + 3, v126, a3);
      default:
        v11 = v8;
        if (v9 <= 191)
        {
          v56 = v8 + 1;
          v58 = v8 == a2 || v56 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v58)
            {
              v59 = 0;
              v60 = v8;
              do
              {
                v62 = *v60;
                v61 = v60[1];
                v60 = v56;
                v63 = *(_QWORD *)(*(_QWORD *)a3 + 24);
                llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v63);
                result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v63 + 1320), v61, v62);
                if ((_DWORD)result)
                {
                  v64 = *v60;
                  v65 = v59;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v65 + 8) = *(uint64_t *)((char *)v8 + v65);
                    if (!v65)
                      break;
                    v66 = *(uint64_t *)((char *)v8 + v65 - 8);
                    v67 = *(_QWORD *)(*(_QWORD *)a3 + 24);
                    llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v67);
                    result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v67 + 1320), v64, v66);
                    v65 -= 8;
                    if ((result & 1) == 0)
                    {
                      v68 = (uint64_t *)((char *)v8 + v65 + 8);
                      goto LABEL_72;
                    }
                  }
                  v68 = v8;
LABEL_72:
                  *v68 = v64;
                }
                v56 = v60 + 1;
                v59 += 8;
              }
              while (v60 + 1 != a2);
            }
          }
          else if (!v58)
          {
            do
            {
              v114 = *v132;
              v113 = v132[1];
              v115 = v56;
              v116 = *(_QWORD *)(*(_QWORD *)a3 + 24);
              llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v116);
              result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v116 + 1320), v113, v114);
              if ((_DWORD)result)
              {
                v117 = *v115;
                v118 = v115;
                do
                {
                  v119 = v118;
                  v120 = *--v118;
                  *v119 = v120;
                  v121 = *(v119 - 2);
                  v122 = *(_QWORD *)(*(_QWORD *)a3 + 24);
                  llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v122);
                  result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v122 + 1320), v117, v121);
                }
                while ((result & 1) != 0);
                *v118 = v117;
              }
              v132 = v115;
              v56 = v115 + 1;
            }
            while (v115 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v8 != a2)
          {
            v69 = (v10 - 2) >> 1;
            v130 = v69;
            v124 = a2;
            v70 = v8;
            do
            {
              v71 = v69;
              if (v130 >= v69)
              {
                v72 = (2 * v69) | 1;
                v73 = &v70[v72];
                v74 = 2 * v69 + 2;
                v75 = v10;
                v123 = v69;
                if (v74 < (uint64_t)v10)
                {
                  v76 = *v73;
                  v77 = v73[1];
                  v78 = *(_QWORD *)(*(_QWORD *)a3 + 24);
                  llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v78);
                  v79 = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v78 + 1320), v76, v77);
                  if (v79)
                    ++v73;
                  v71 = v123;
                  a2 = v124;
                  if (v79)
                    v72 = v74;
                }
                v70 = v132;
                v80 = &v132[v71];
                v81 = *v73;
                v82 = *v80;
                v83 = *(_QWORD *)(*(_QWORD *)a3 + 24);
                llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v83);
                result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v83 + 1320), v81, v82);
                v71 = v123;
                v10 = v75;
                if ((result & 1) == 0)
                {
                  v127 = *v80;
                  do
                  {
                    v84 = v73;
                    *v80 = *v73;
                    if (v130 < v72)
                      break;
                    v85 = (2 * v72) | 1;
                    v73 = &v132[v85];
                    v86 = 2 * v72 + 2;
                    if (v86 < v75)
                    {
                      v87 = *v73;
                      v88 = v73[1];
                      v89 = *(_QWORD *)(*(_QWORD *)a3 + 24);
                      llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v89);
                      v90 = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v89 + 1320), v87, v88);
                      if (v90)
                        ++v73;
                      a2 = v124;
                      if (v90)
                        v85 = v86;
                    }
                    v91 = *v73;
                    v92 = *(_QWORD *)(*(_QWORD *)a3 + 24);
                    llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v92);
                    result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v92 + 1320), v91, v127);
                    v80 = v84;
                    v72 = v85;
                  }
                  while (!(_DWORD)result);
                  *v84 = v127;
                  v70 = v132;
                  v10 = v75;
                  v71 = v123;
                }
              }
              v69 = v71 - 1;
            }
            while (v71);
            do
            {
              v93 = 0;
              v94 = v132;
              v125 = a2;
              v128 = *v132;
              v95 = (v10 - 2) >> 1;
              v131 = v10;
              do
              {
                v96 = &v94[v93 + 1];
                v97 = (2 * v93) | 1;
                v98 = 2 * v93 + 2;
                if (v98 < (uint64_t)v10)
                {
                  v99 = *v96;
                  v100 = v94[v93 + 2];
                  v101 = *(_QWORD *)(*(_QWORD *)a3 + 24);
                  llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v101);
                  result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v101 + 1320), v99, v100);
                  if ((_DWORD)result)
                    ++v96;
                  v10 = v131;
                  if ((_DWORD)result)
                    v97 = v98;
                }
                *v94 = *v96;
                v94 = v96;
                v93 = v97;
              }
              while (v97 <= v95);
              a2 = v125 - 1;
              if (v96 == v125 - 1)
              {
                *v96 = v128;
              }
              else
              {
                *v96 = *a2;
                *a2 = v128;
                v102 = (char *)v96 - (char *)v132 + 8;
                if (v102 >= 9)
                {
                  v103 = (((unint64_t)v102 >> 3) - 2) >> 1;
                  v104 = &v132[v103];
                  v105 = *v104;
                  v106 = *v96;
                  v107 = *(_QWORD *)(*(_QWORD *)a3 + 24);
                  llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v107);
                  result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v107 + 1320), v105, v106);
                  if ((_DWORD)result)
                  {
                    v108 = *v96;
                    do
                    {
                      v109 = v104;
                      *v96 = *v104;
                      if (!v103)
                        break;
                      v103 = (v103 - 1) >> 1;
                      v104 = &v132[v103];
                      v110 = *v104;
                      v111 = *(_QWORD *)(*(_QWORD *)a3 + 24);
                      llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v111);
                      result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v111 + 1320), v110, v108);
                      v96 = v109;
                    }
                    while ((result & 1) != 0);
                    *v109 = v108;
                  }
                }
              }
            }
            while ((uint64_t)v10-- > 2);
          }
          return result;
        }
        v12 = &v8[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          sub_1C52206EC(&v11[v10 >> 1], v11, v126, a3);
        }
        else
        {
          sub_1C52206EC(v11, &v11[v10 >> 1], v126, a3);
          sub_1C52206EC(v11 + 1, v12 - 1, a2 - 2, a3);
          sub_1C52206EC(v11 + 2, &v11[(v10 >> 1) + 1], a2 - 3, a3);
          sub_1C52206EC(v12 - 1, &v11[v10 >> 1], &v11[(v10 >> 1) + 1], a3);
          v13 = *v11;
          *v11 = *v12;
          *v12 = v13;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v14 = *(v11 - 1);
          v15 = *v11;
          v16 = *(_QWORD *)(*(_QWORD *)a3 + 24);
          llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v16);
          if (!llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v16 + 1320), v14, v15))
          {
            v35 = *v11;
            v36 = *v126;
            v37 = *(_QWORD *)(*(_QWORD *)a3 + 24);
            llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v37);
            result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v37 + 1320), v35, v36);
            if ((result & 1) != 0)
            {
              v8 = v11;
              do
              {
                v38 = v8[1];
                ++v8;
                v39 = *(_QWORD *)(*(_QWORD *)a3 + 24);
                llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v39);
                result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v39 + 1320), v35, v38);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v40 = v11 + 1;
              do
              {
                v8 = v40;
                if (v40 >= a2)
                  break;
                ++v40;
                v41 = *v8;
                v42 = *(_QWORD *)(*(_QWORD *)a3 + 24);
                llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v42);
                result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v42 + 1320), v35, v41);
              }
              while (!(_DWORD)result);
            }
            v43 = a2;
            if (v8 < a2)
            {
              v43 = a2;
              do
              {
                v44 = *--v43;
                v45 = *(_QWORD *)(*(_QWORD *)a3 + 24);
                llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v45);
                result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v45 + 1320), v35, v44);
              }
              while ((result & 1) != 0);
            }
            while (v8 < v43)
            {
              v46 = *v8;
              *v8 = *v43;
              *v43 = v46;
              do
              {
                v47 = v8[1];
                ++v8;
                v48 = *(_QWORD *)(*(_QWORD *)a3 + 24);
                llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v48);
              }
              while (!llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v48 + 1320), v35, v47));
              do
              {
                v49 = *--v43;
                v50 = *(_QWORD *)(*(_QWORD *)a3 + 24);
                llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v50);
                result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v50 + 1320), v35, v49);
              }
              while ((result & 1) != 0);
            }
            v51 = v8 - 1;
            if (v8 - 1 != v11)
              *v11 = *v51;
            a5 = 0;
            *v51 = v35;
            continue;
          }
        }
        v17 = 0;
        v18 = *v11;
        do
        {
          v19 = v11[v17 + 1];
          v20 = *(_QWORD *)(*(_QWORD *)a3 + 24);
          llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v20);
          ++v17;
        }
        while (llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v20 + 1320), v19, v18));
        v21 = &v11[v17];
        v22 = a2;
        if (v17 == 1)
        {
          v22 = a2;
          do
          {
            if (v21 >= v22)
              break;
            v25 = *--v22;
            v26 = *(_QWORD *)(*(_QWORD *)a3 + 24);
            llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v26);
          }
          while (!llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v26 + 1320), v25, v18));
        }
        else
        {
          do
          {
            v23 = *--v22;
            v24 = *(_QWORD *)(*(_QWORD *)a3 + 24);
            llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v24);
          }
          while (!llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v24 + 1320), v23, v18));
        }
        v8 = &v11[v17];
        if (v21 < v22)
        {
          v27 = v22;
          do
          {
            v28 = *v8;
            *v8 = *v27;
            *v27 = v28;
            do
            {
              v29 = v8[1];
              ++v8;
              v30 = *(_QWORD *)(*(_QWORD *)a3 + 24);
              llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v30);
            }
            while (llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v30 + 1320), v29, v18));
            do
            {
              v31 = *--v27;
              v32 = *(_QWORD *)(*(_QWORD *)a3 + 24);
              llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v32);
            }
            while (!llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v32 + 1320), v31, v18));
          }
          while (v8 < v27);
        }
        v33 = v8 - 1;
        if (v8 - 1 != v132)
          *v132 = *v33;
        *v33 = v18;
        if (v21 < v22)
        {
LABEL_30:
          result = sub_1C521FC00(v132, v8 - 1, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v34 = sub_1C5220834(v132, v8 - 1, a3);
        result = sub_1C5220834(v8, a2, a3);
        if (!(_DWORD)result)
        {
          if (v34)
            continue;
          goto LABEL_30;
        }
        a2 = v8 - 1;
        if (!v34)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1C52205A4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_1C5220A24(a1, a2, a3, a4, a6);
  v12 = *a5;
  v13 = *a4;
  v14 = *(_QWORD *)(*(_QWORD *)a6 + 24);
  llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v14);
  result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v14 + 1320), v12, v13);
  if (result)
  {
    v16 = *a4;
    *a4 = *a5;
    *a5 = v16;
    v17 = *a4;
    v18 = *a3;
    v19 = *(_QWORD *)(*(_QWORD *)a6 + 24);
    llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v19);
    result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v19 + 1320), v17, v18);
    if (result)
    {
      v20 = *a3;
      *a3 = *a4;
      *a4 = v20;
      v21 = *a3;
      v22 = *a2;
      v23 = *(_QWORD *)(*(_QWORD *)a6 + 24);
      llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v23);
      result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v23 + 1320), v21, v22);
      if (result)
      {
        v24 = *a2;
        *a2 = *a3;
        *a3 = v24;
        v25 = *a2;
        v26 = *a1;
        v27 = *(_QWORD *)(*(_QWORD *)a6 + 24);
        llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v27);
        result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v27 + 1320), v25, v26);
        if (result)
        {
          v28 = *a1;
          *a1 = *a2;
          *a2 = v28;
        }
      }
    }
  }
  return result;
}

BOOL sub_1C52206EC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v8 = *a2;
  v9 = *a1;
  v10 = *(_QWORD *)(*(_QWORD *)a4 + 24);
  llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v10);
  LOBYTE(v8) = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v10 + 1320), v8, v9);
  v11 = *a3;
  v12 = *a2;
  v13 = *(_QWORD *)(*(_QWORD *)a4 + 24);
  llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v13);
  result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v13 + 1320), v11, v12);
  if ((v8 & 1) != 0)
  {
    v15 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v15;
    }
    else
    {
      *a1 = *a2;
      *a2 = v15;
      v21 = *a3;
      v22 = *(_QWORD *)(*(_QWORD *)a4 + 24);
      llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v22);
      result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v22 + 1320), v21, v15);
      if (result)
      {
        v23 = *a2;
        *a2 = *a3;
        *a3 = v23;
      }
    }
  }
  else if (result)
  {
    v16 = *a2;
    *a2 = *a3;
    *a3 = v16;
    v17 = *a2;
    v18 = *a1;
    v19 = *(_QWORD *)(*(_QWORD *)a4 + 24);
    llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v19);
    result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v19 + 1320), v17, v18);
    if (result)
    {
      v20 = *a1;
      *a1 = *a2;
      *a2 = v20;
    }
  }
  return result;
}

BOOL sub_1C5220834(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      v10 = *(_QWORD *)(*(_QWORD *)a3 + 24);
      llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v10);
      if (llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v10 + 1320), v8, v9))
      {
        v11 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v11;
      }
      return 1;
    case 3:
      sub_1C52206EC(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1C5220A24(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1C52205A4(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v12 = a1 + 2;
      sub_1C52206EC(a1, a1 + 1, a1 + 2, a3);
      v13 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    v16 = *v13;
    v17 = *v12;
    v18 = *(_QWORD *)(*(_QWORD *)a3 + 24);
    llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v18);
    if (llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v18 + 1320), v16, v17))
    {
      v19 = *v13;
      v20 = v14;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v20 + 24) = *(uint64_t *)((char *)a1 + v20 + 16);
        if (v20 == -16)
          break;
        v21 = *(uint64_t *)((char *)a1 + v20 + 8);
        v22 = *(_QWORD *)(*(_QWORD *)a3 + 24);
        llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v22);
        v20 -= 8;
        if (!llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v22 + 1320), v19, v21))
        {
          v23 = (uint64_t *)((char *)a1 + v20 + 24);
          goto LABEL_12;
        }
      }
      v23 = a1;
LABEL_12:
      *v23 = v19;
      if (++v15 == 8)
        return v13 + 1 == a2;
    }
    v12 = v13;
    v14 += 8;
    if (++v13 == a2)
      return 1;
  }
}

BOOL sub_1C5220A24(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  sub_1C52206EC(a1, a2, a3, a5);
  v10 = *a4;
  v11 = *a3;
  v12 = *(_QWORD *)(*(_QWORD *)a5 + 24);
  llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v12);
  result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v12 + 1320), v10, v11);
  if (result)
  {
    v14 = *a3;
    *a3 = *a4;
    *a4 = v14;
    v15 = *a3;
    v16 = *a2;
    v17 = *(_QWORD *)(*(_QWORD *)a5 + 24);
    llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v17);
    result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v17 + 1320), v15, v16);
    if (result)
    {
      v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      v19 = *a2;
      v20 = *a1;
      v21 = *(_QWORD *)(*(_QWORD *)a5 + 24);
      llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v21);
      result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v21 + 1320), v19, v20);
      if (result)
      {
        v22 = *a1;
        *a1 = *a2;
        *a2 = v22;
      }
    }
  }
  return result;
}

unsigned int *sub_1C5220B24(unsigned int *result, uint64_t a2, char *__src, char *a4)
{
  char *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  _BYTE *v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;

  v5 = __src;
  v6 = result;
  v7 = *(_QWORD *)result;
  v8 = result[2];
  v9 = result[3];
  v10 = a4 - __src;
  v11 = v8 + ((a4 - __src) >> 4);
  if (*(_QWORD *)result + 16 * v8 == a2)
  {
    if (v11 > v9)
    {
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v11, 16);
      LODWORD(v8) = v6[2];
      v7 = *(_QWORD *)v6;
    }
    if (v5 != a4)
    {
      result = (unsigned int *)memcpy((void *)(v7 + 16 * v8), v5, v10);
      LODWORD(v8) = v6[2];
    }
    v6[2] = v8 + (v10 >> 4);
  }
  else
  {
    v12 = (a2 - v7) >> 4;
    v13 = (uint64_t)v10 >> 4;
    if (v11 > v9)
    {
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v11, 16);
      v7 = *(_QWORD *)v6;
      v8 = v6[2];
    }
    v14 = (_DWORD *)(v7 + 16 * v12);
    v15 = (_BYTE *)(v7 + 16 * v8);
    v16 = (v15 - (_BYTE *)v14) >> 4;
    if (v16 >= v13)
    {
      v19 = v13 + v8;
      if (v19 <= v6[3])
      {
        v20 = v8;
      }
      else
      {
        result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v6, (uint64_t)(v6 + 4), v19, 16);
        v20 = v6[2];
        LODWORD(v8) = v6[2];
      }
      if (v5 != a4)
      {
        v21 = (_OWORD *)(*(_QWORD *)v6 + 16 * v20);
        v22 = -16 * v13;
        do
        {
          *v21++ = *(_OWORD *)&v15[v22];
          v22 += 16;
        }
        while (v22);
        LODWORD(v8) = v6[2];
      }
      v6[2] = v8 + v13;
      if (&v15[-16 * v13] != (_BYTE *)v14)
        result = (unsigned int *)memmove(&v14[4 * v13], v14, &v15[-16 * v13] - (_BYTE *)v14 - 4);
      if (v5 != a4)
        return (unsigned int *)memmove(v14, v5, v10 - 4);
    }
    else
    {
      v17 = v8 + (v10 >> 4);
      v6[2] = v17;
      if (v12 != v8)
      {
        result = (unsigned int *)memcpy((void *)(v7 + 16 * v17 - 16 * v16), (const void *)(v7 + 16 * v12), v15 - (_BYTE *)v14);
        do
        {
          v18 = *(_QWORD *)v5;
          v14[2] = *((_DWORD *)v5 + 2);
          *(_QWORD *)v14 = v18;
          v14 += 4;
          v5 += 16;
          --v16;
        }
        while (v16);
      }
      if (v5 != a4)
        return (unsigned int *)memcpy(v15, v5, a4 - v5);
    }
  }
  return result;
}

uint64_t sub_1C5220D38(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  BOOL v8;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = (unsigned int *)(a2 + 1);
  v5 = (unsigned int *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      sub_1C5220DCC((_QWORD **)a1, v3, v5 + 7, v5 + 7);
      v6 = (unsigned int *)*((_QWORD *)v5 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(unsigned int **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (unsigned int *)*((_QWORD *)v5 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

_DWORD *sub_1C5220DCC(_QWORD **a1, uint64_t *a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t *v6;
  _DWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v13;
  uint64_t *v14;

  v6 = sub_1C5220E78(a1, a2, &v14, &v13, a3);
  v7 = (_DWORD *)*v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = operator new(0x20uLL);
    v7[7] = *a4;
    v9 = v14;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v9;
    *v8 = (uint64_t)v7;
    v10 = (_QWORD *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = (uint64_t *)*v8;
    }
    sub_1C4768E74(a1[1], v11);
    a1[2] = (_QWORD *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t *sub_1C5220E78(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int v20;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          a4 = (uint64_t *)v16;
          v17 = *(_DWORD *)(v16 + 28);
          if (v15 >= v17)
            break;
          v16 = *a4;
          v5 = a4;
          if (!*a4)
            goto LABEL_34;
        }
        if (v17 >= v15)
          break;
        v5 = a4 + 1;
        v16 = a4[1];
      }
      while (v16);
LABEL_25:
      *a3 = a4;
      return v5;
    }
    goto LABEL_42;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v18 = a2;
    do
    {
      a4 = (uint64_t *)v18[2];
      v14 = *a4 == (_QWORD)v18;
      v18 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    v19 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          a4 = (uint64_t *)v19;
          v20 = *(_DWORD *)(v19 + 28);
          if (v6 >= v20)
            break;
          v19 = *a4;
          v5 = a4;
          if (!*a4)
            goto LABEL_34;
        }
        if (v20 >= v6)
          break;
        v5 = a4 + 1;
        v19 = a4[1];
      }
      while (v19);
      goto LABEL_25;
    }
LABEL_42:
    *a3 = v5;
    return v5;
  }
  if (v11)
  {
LABEL_34:
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_1C5221014(_QWORD *a1)
{
  if (a1)
  {
    sub_1C5221014(*a1);
    sub_1C5221014(a1[1]);
    sub_1C521EB58((_QWORD *)a1[6]);
    operator delete(a1);
  }
}

double sub_1C5221054(uint64_t a1, int *a2)
{
  char v4;
  double result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;

  v9 = 0;
  v4 = sub_1C5221140(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  v6 = v9;
  if ((v4 & 1) != 0)
    return result;
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_9;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 12) <= v8 >> 3)
  {
LABEL_9:
    sub_1C52211D8(a1, v8);
    v9 = 0;
    sub_1C5221140(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    v6 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)v6 != -1)
    --*(_DWORD *)(a1 + 12);
  *(_DWORD *)v6 = *a2;
  result = 0.0;
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_DWORD *)(v6 + 40) = 1065353216;
  return result;
}

uint64_t sub_1C5221140(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (37 * a3) & (a2 - 1);
    v6 = (_DWORD *)(a1 + 48 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -2;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_DWORD *)(a1 + 48 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_DWORD *sub_1C52211D8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(48 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 48 * v10;
      do
      {
        *result = -1;
        result += 12;
        v11 -= 48;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 0;
      v13 = 48 * v3;
      do
      {
        v14 = *(_DWORD *)(v4 + v12);
        if (v14 <= 0xFFFFFFFD)
        {
          v25 = 0;
          sub_1C5221140(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v25);
          v15 = v25;
          *v25 = *(_DWORD *)(v4 + v12);
          v16 = (uint64_t *)(v4 + v12 + 8);
          v17 = *v16;
          *v16 = 0;
          *((_QWORD *)v15 + 1) = v17;
          *((_QWORD *)v15 + 2) = *(_QWORD *)(v4 + v12 + 16);
          *(_QWORD *)(v4 + v12 + 16) = 0;
          v18 = *(_QWORD *)(v4 + v12 + 24);
          *((_QWORD *)v15 + 3) = v18;
          v19 = v15 + 6;
          v20 = *(_QWORD *)(v4 + v12 + 32);
          *((_QWORD *)v15 + 4) = v20;
          v15[10] = *(_DWORD *)(v4 + v12 + 40);
          if (v20)
          {
            v21 = *(_QWORD *)(v18 + 8);
            v22 = *((_QWORD *)v15 + 2);
            if ((v22 & (v22 - 1)) != 0)
            {
              if (v21 >= v22)
                v21 %= v22;
            }
            else
            {
              v21 &= v22 - 1;
            }
            *(_QWORD *)(v17 + 8 * v21) = v19;
            *(_QWORD *)(v4 + v12 + 24) = 0;
            *(_QWORD *)(v4 + v12 + 32) = 0;
          }
          ++*(_DWORD *)(a1 + 8);
          sub_1C521ECF4((uint64_t)v16);
        }
        v12 += 48;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v23 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v23)
  {
    v24 = 48 * v23;
    do
    {
      *result = -1;
      result += 12;
      v24 -= 48;
    }
    while (v24);
  }
  return result;
}

char *sub_1C5221384(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  v10 = (char *)operator new(0x40uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *((_DWORD *)v10 + 14) = 1065353216;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_1C5221594(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *(_QWORD *)v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *(_QWORD *)v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v10)
  {
    v20 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1C5221594(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    sub_1C4764EE4();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

uint64_t sub_1C522178C(uint64_t a1, unsigned int a2, unint64_t a3, _OWORD *a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = a2 ^ a3;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = a2 ^ a3;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == a2 && i[3] == a3)
            return 0;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = v7;
  *((_OWORD *)v14 + 1) = *a4;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_1C5221594(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v14 = *v22;
LABEL_42:
    *v22 = v14;
    goto LABEL_43;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v14)
  {
    v23 = *(_QWORD *)(*v14 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return 1;
}

uint64_t sub_1C5221998(uint64_t a1, uint64_t a2)
{
  uint64_t *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_1C5221594(a1, *(_QWORD *)(a2 + 8));
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
    sub_1C522202C(a1, i[2], i[3], (_OWORD *)i + 1);
  return a1;
}

uint64_t sub_1C52219F8(_QWORD *a1, uint64_t *a2)
{
  int8x8_t v3;
  unint64_t v4;
  uint64_t v5;
  uint8x8_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v3 = (int8x8_t)a1[1];
  v5 = *a2;
  v4 = a2[1];
  v6 = (uint8x8_t)vcnt_s8(v3);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v7 = *(uint64_t **)(*a1 + 8 * v4);
  do
  {
    v8 = v7;
    v7 = (uint64_t *)*v7;
  }
  while (v7 != a2);
  if (v8 != a1 + 2)
  {
    v9 = v8[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    v10 = *a2;
    if (v9 == v4)
    {
LABEL_20:
      if (!v10)
        goto LABEL_27;
      goto LABEL_21;
    }
  }
  if (!v5)
    goto LABEL_19;
  v11 = *(_QWORD *)(v5 + 8);
  if (v6.u32[0] > 1uLL)
  {
    if (v11 >= *(_QWORD *)&v3)
      v11 %= *(_QWORD *)&v3;
  }
  else
  {
    v11 &= *(_QWORD *)&v3 - 1;
  }
  v10 = *a2;
  if (v11 != v4)
  {
LABEL_19:
    *(_QWORD *)(*a1 + 8 * v4) = 0;
    v10 = *a2;
    goto LABEL_20;
  }
LABEL_21:
  v12 = *(_QWORD *)(v10 + 8);
  if (v6.u32[0] > 1uLL)
  {
    if (v12 >= *(_QWORD *)&v3)
      v12 %= *(_QWORD *)&v3;
  }
  else
  {
    v12 &= *(_QWORD *)&v3 - 1;
  }
  if (v12 != v4)
  {
    *(_QWORD *)(*a1 + 8 * v12) = v8;
    v10 = *a2;
  }
LABEL_27:
  *v8 = v10;
  *a2 = 0;
  --a1[3];
  sub_1C61B8160((uint64_t)(a2 + 3));
  operator delete(a2);
  return v5;
}

uint64_t **sub_1C5221B54(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[7] = 0;
    v7[6] = 0;
    v7[5] = (uint64_t *)(v7 + 6);
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    sub_1C4768E74(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t sub_1C5221C2C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_1C5221594(a1, *(_QWORD *)(a2 + 8));
  v5 = *(uint64_t **)(a2 + 16);
  if (v5)
  {
    v6 = (_QWORD *)(a1 + 16);
    do
    {
      v7 = *((unsigned int *)v5 + 4);
      v8 = *(_QWORD *)(a1 + 8);
      if (v8)
      {
        v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          v2 = *((unsigned int *)v5 + 4);
          if (v8 <= v7)
            v2 = v7 % v8;
        }
        else
        {
          v2 = ((_DWORD)v8 - 1) & v7;
        }
        v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v2);
        if (v10)
        {
          for (i = *v10; i; i = (uint64_t *)*i)
          {
            v12 = i[1];
            if (v12 == v7)
            {
              if (*((_DWORD *)i + 4) == (_DWORD)v7)
                goto LABEL_41;
            }
            else
            {
              if (v9.u32[0] > 1uLL)
              {
                if (v12 >= v8)
                  v12 %= v8;
              }
              else
              {
                v12 &= v8 - 1;
              }
              if (v12 != v2)
                break;
            }
          }
        }
      }
      v13 = operator new(0x40uLL);
      *v13 = 0;
      v13[1] = v7;
      *((_DWORD *)v13 + 4) = *((_DWORD *)v5 + 4);
      sub_1C5221998((uint64_t)(v13 + 3), (uint64_t)(v5 + 3));
      v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v15 = *(float *)(a1 + 32);
      if (!v8 || (float)(v15 * (float)v8) < v14)
      {
        v16 = (v8 & (v8 - 1)) != 0;
        if (v8 < 3)
          v16 = 1;
        v17 = v16 | (2 * v8);
        v18 = vcvtps_u32_f32(v14 / v15);
        if (v17 <= v18)
          v19 = v18;
        else
          v19 = v17;
        sub_1C5221594(a1, v19);
        v8 = *(_QWORD *)(a1 + 8);
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v8 <= v7)
            v2 = v7 % v8;
          else
            v2 = v7;
        }
        else
        {
          v2 = ((_DWORD)v8 - 1) & v7;
        }
      }
      v20 = *(_QWORD *)a1;
      v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v21)
      {
        *v13 = *v21;
      }
      else
      {
        *v13 = *v6;
        *v6 = v13;
        *(_QWORD *)(v20 + 8 * v2) = v6;
        if (!*v13)
          goto LABEL_40;
        v22 = *(_QWORD *)(*v13 + 8);
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v22 >= v8)
            v22 %= v8;
        }
        else
        {
          v22 &= v8 - 1;
        }
        v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
      }
      *v21 = v13;
LABEL_40:
      ++*(_QWORD *)(a1 + 24);
LABEL_41:
      v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  return a1;
}

_DWORD *sub_1C5221E60(uint64_t a1, uint64_t a2, _DWORD *a3, _QWORD *a4)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  _DWORD *result;
  int v12;
  char v13;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v18;

  v8 = *(_DWORD *)(a2 + 16);
  if (!v8)
  {
    v14 = 0;
LABEL_5:
    result = sub_1C4A1197C(a2, (uint64_t)a3, a3, v14);
    *result = *a3;
    *((_QWORD *)result + 1) = *a4;
    v9 = *(_QWORD *)a2;
    v8 = *(_DWORD *)(a2 + 16);
    v13 = 1;
    goto LABEL_6;
  }
  v9 = *(_QWORD *)a2;
  v10 = (37 * *a3) & (v8 - 1);
  result = (_DWORD *)(*(_QWORD *)a2 + 16 * v10);
  v12 = *result;
  if (*a3 != *result)
  {
    v15 = 0;
    v16 = 1;
    while (v12 != -1)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v12 == -2;
      if (v17)
        v15 = result;
      v18 = v10 + v16++;
      v10 = v18 & (v8 - 1);
      result = (_DWORD *)(v9 + 16 * v10);
      v12 = *result;
      if (*a3 == *result)
        goto LABEL_3;
    }
    if (v15)
      v14 = v15;
    else
      v14 = result;
    goto LABEL_5;
  }
LABEL_3:
  v13 = 0;
LABEL_6:
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v9 + 16 * v8;
  *(_BYTE *)(a1 + 16) = v13;
  return result;
}

char *sub_1C5221F50(uint64_t **a1, unint64_t a2, _QWORD *a3)
{
  char *v5;
  uint64_t **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = (char *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = v5;
        v8 = *((_QWORD *)v5 + 4);
        if (v8 <= a2)
          break;
        v5 = *(char **)v7;
        v6 = (uint64_t **)v7;
        if (!*(_QWORD *)v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = (char *)*((_QWORD *)v7 + 1);
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (char *)(a1 + 1);
LABEL_9:
    v9 = v7;
    v7 = (char *)operator new(0x50uLL);
    *((_QWORD *)v7 + 4) = *a3;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *((_DWORD *)v7 + 18) = 1065353216;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    sub_1C4768E74(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_1C522202C(uint64_t a1, unsigned int a2, unint64_t a3, _OWORD *a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = a2 ^ a3;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = a2 ^ a3;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == a2 && i[3] == a3)
            return;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = v7;
  *((_OWORD *)v14 + 1) = *a4;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_1C5221594(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v14 = *v22;
LABEL_42:
    *v22 = v14;
    goto LABEL_43;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v14)
  {
    v23 = *(_QWORD *)(*v14 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
}

uint64_t **sub_1C522222C(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  uint64_t **v12;
  uint64_t **v13;
  unsigned int v14;
  _OWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;

  a1[1] = 0;
  v3 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v6 = *((_DWORD *)v5 + 8);
      v7 = a1[1];
      v8 = v3;
      if (*a1 == v3)
        goto LABEL_8;
      v9 = a1[1];
      v10 = v3;
      if (v7)
      {
        do
        {
          v8 = v9;
          v9 = (uint64_t *)v9[1];
        }
        while (v9);
      }
      else
      {
        do
        {
          v8 = (uint64_t *)v10[2];
          v11 = *v8 == (_QWORD)v10;
          v10 = v8;
        }
        while (v11);
      }
      if (*((_DWORD *)v8 + 8) < v6)
      {
LABEL_8:
        if (v7)
          v12 = (uint64_t **)v8;
        else
          v12 = (uint64_t **)v3;
        if (v7)
          v13 = (uint64_t **)(v8 + 1);
        else
          v13 = (uint64_t **)v3;
        if (*v13)
          goto LABEL_27;
      }
      else
      {
        v13 = (uint64_t **)v3;
        v12 = (uint64_t **)v3;
        if (v7)
        {
          while (1)
          {
            while (1)
            {
              v12 = (uint64_t **)v7;
              v14 = *((_DWORD *)v7 + 8);
              if (v14 <= v6)
                break;
              v7 = *v12;
              v13 = v12;
              if (!*v12)
                goto LABEL_23;
            }
            if (v14 >= v6)
              goto LABEL_27;
            v7 = v12[1];
            if (!v7)
            {
              v13 = v12 + 1;
              break;
            }
          }
        }
      }
LABEL_23:
      v15 = operator new(0x30uLL);
      v15[2] = *((_OWORD *)v5 + 2);
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = 0;
      *((_QWORD *)v15 + 2) = v12;
      *v13 = (uint64_t *)v15;
      v16 = (uint64_t *)**a1;
      if (v16)
      {
        *a1 = v16;
        v17 = *v13;
      }
      else
      {
        v17 = (uint64_t *)v15;
      }
      sub_1C4768E74(a1[1], v17);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
LABEL_27:
      v18 = (_QWORD *)v5[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v5[2];
          v11 = *v19 == (_QWORD)v5;
          v5 = v19;
        }
        while (!v11);
      }
      v5 = v19;
    }
    while (v19 != v4);
  }
  return a1;
}

uint64_t sub_1C52223B4()
{
  __int128 v1;
  int v2;
  int v3;
  int *v4;

  v4 = &v3;
  v2 = 1;
  v3 = 25;
  *(_QWORD *)&v1 = "Maximum recursion level";
  *((_QWORD *)&v1 + 1) = 23;
  sub_1C4DB1928((uint64_t)&unk_1ED7FDF78, "rdf-liveness-max-rec", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7FDF78, &dword_1C475E000);
}

llvm::rdf::PhysicalRegisterInfo *llvm::rdf::PhysicalRegisterInfo::PhysicalRegisterInfo(llvm::rdf::PhysicalRegisterInfo *this, const llvm::TargetRegisterInfo *a2, const llvm::MachineFunction *a3)
{
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unsigned __int16 ****v12;
  unsigned __int16 ****v13;
  unsigned __int16 ***v14;
  unsigned __int16 **v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int16 ***v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  _BYTE *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  size_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  unsigned __int16 *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  __int16 v45;
  _WORD *v46;
  unsigned __int16 *v47;
  __int16 v48;
  unsigned __int16 v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t i;
  uint64_t j;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  unint64_t v66;
  char *v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  void **v83;
  unsigned int v84;
  void *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  unsigned int k;
  int v100;
  uint64_t v101;
  int v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned __int16 *v106;
  unsigned __int16 *v107;
  int v108;
  int v109;
  int v110;
  unint64_t v111;
  size_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  void **v134;
  unsigned int v135;
  void *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t m;
  int v151;
  uint64_t *v152;
  uint64_t v153;
  int v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  unsigned __int16 *v159;
  int v160;
  BOOL v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  const llvm::MachineFunction *v166;
  char *v167;
  char *v168;
  void *__src;
  uint64_t v170;
  _BYTE v171[48];
  int v172;
  void *v173[2];
  _DWORD v174[14];
  uint64_t v175;

  v175 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = a2;
  v6 = (char *)operator new(0x100uLL);
  *((_QWORD *)this + 1) = v6;
  *((_QWORD *)this + 2) = v6;
  *((_QWORD *)this + 3) = v6 + 256;
  *((_OWORD *)this + 2) = 0u;
  v7 = (uint64_t *)((char *)this + 32);
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  v8 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v8)
  {
    v9 = (char *)operator new(8 * v8);
    bzero(v9, 8 * v8);
    v10 = &v9[8 * v8];
    *((_QWORD *)this + 4) = v9;
    *((_QWORD *)this + 5) = v10;
    *((_QWORD *)this + 6) = v10;
  }
  v173[0] = v174;
  v173[1] = (void *)0x600000000;
  sub_1C4765AA4((char *)v173, (v8 + 63) >> 6, 0);
  v174[12] = v8;
  v11 = *(_QWORD *)this;
  v12 = *(unsigned __int16 *****)(*(_QWORD *)this + 240);
  v13 = *(unsigned __int16 *****)(*(_QWORD *)this + 248);
  if (v12 != v13)
  {
    while (1)
    {
      v14 = *v12;
      v15 = **v12;
      v16 = *((unsigned __int16 *)v15 + 10);
      if (*((_WORD *)v15 + 10))
        break;
LABEL_12:
      if (++v12 == v13)
        goto LABEL_13;
    }
    v17 = *v15;
    v18 = *v7;
    v19 = 2 * v16;
    v20 = v173[0];
    while (1)
    {
      v21 = *v17;
      v22 = *(_QWORD *)(v18 + 8 * v21);
      v23 = v14;
      if (!v22)
        goto LABEL_10;
      v24 = v20[v21 >> 6];
      v23 = v14;
      if ((v24 & (1 << v21)) != 0)
        goto LABEL_10;
      if (v14[3] != *(unsigned __int16 ***)(v22 + 24))
        break;
LABEL_11:
      ++v17;
      v19 -= 2;
      if (!v19)
        goto LABEL_12;
    }
    v23 = 0;
    v20[v21 >> 6] = v24 | (1 << v21);
LABEL_10:
    *(_QWORD *)(v18 + 8 * v21) = v23;
    goto LABEL_11;
  }
LABEL_13:
  v25 = *(unsigned int *)(v11 + 44);
  v27 = (_BYTE *)*((_QWORD *)this + 7);
  v26 = (char *)*((_QWORD *)this + 8);
  v28 = (v26 - v27) >> 4;
  if (v25 <= v28)
  {
    if (v25 < v28)
      *((_QWORD *)this + 8) = &v27[16 * v25];
  }
  else
  {
    v166 = a3;
    v29 = v25 - v28;
    v30 = *((_QWORD *)this + 9);
    if (v25 - v28 <= (v30 - (uint64_t)v26) >> 4)
    {
      bzero(v26, 16 * v29);
      *((_QWORD *)this + 8) = &v26[16 * v29];
    }
    else
    {
      v31 = v30 - (_QWORD)v27;
      v32 = v31 >> 3;
      if (v31 >> 3 <= v25)
        v32 = *(unsigned int *)(v11 + 44);
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
        v33 = 0xFFFFFFFFFFFFFFFLL;
      else
        v33 = v32;
      if (v33 >> 60)
        goto LABEL_205;
      v34 = (char *)operator new(16 * v33);
      v35 = &v34[16 * v28];
      v36 = 16 * v29;
      v37 = &v34[16 * v33];
      bzero(v35, v36);
      if (v26 == v27)
      {
        a3 = v166;
      }
      else
      {
        a3 = v166;
        do
        {
          *((_OWORD *)v35 - 1) = *((_OWORD *)v26 - 1);
          v35 -= 16;
          v26 -= 16;
        }
        while (v26 != v27);
        v26 = (char *)*((_QWORD *)this + 7);
      }
      *((_QWORD *)this + 7) = v35;
      *((_QWORD *)this + 8) = &v34[16 * v25];
      *((_QWORD *)this + 9) = v37;
      if (v26)
        operator delete(v26);
    }
    v11 = *(_QWORD *)this;
    LODWORD(v25) = *(_DWORD *)(*(_QWORD *)this + 44);
  }
  if ((_DWORD)v25)
  {
    v38 = 0;
    v39 = *((_QWORD *)this + 7);
    while (1)
    {
      v40 = (_DWORD *)(v39 + 16 * v38);
      if (!*v40)
        break;
LABEL_37:
      if (++v38 == v25)
        goto LABEL_48;
    }
    v41 = (unsigned __int16 *)(*(_QWORD *)(v11 + 48) + 4 * v38);
    v42 = *v41;
    if (v41[1])
    {
      *(_QWORD *)(v39 + 16 * v38 + 8) = -1;
      *v40 = v42;
      goto LABEL_37;
    }
    v43 = *(_QWORD *)(v11 + 8) + 24 * *v41;
    v44 = *(unsigned int *)(v43 + 16);
    v45 = v44 & 0xF;
    v46 = (_WORD *)(*(_QWORD *)(v11 + 56) + ((v44 >> 3) & 0x1FFFFFFE));
    v48 = *v46;
    v47 = v46 + 1;
    v49 = v48 + v45 * v42;
    v50 = (uint64_t *)(*(_QWORD *)(v11 + 64) + 8 * *(unsigned __int16 *)(v43 + 20));
    while (1)
    {
      v51 = *v50;
      *(_DWORD *)(v39 + 16 * v49) = v42;
      if (v51)
      {
        v52 = v39 + 16 * v49;
      }
      else
      {
        v53 = *(_QWORD *)(*v7 + 8 * v42);
        if (!v53)
        {
          *(_QWORD *)(v39 + 16 * v49 + 8) = -1;
          goto LABEL_45;
        }
        v52 = v39 + 16 * v49;
        v51 = *(_QWORD *)(v53 + 24);
      }
      *(_QWORD *)(v52 + 8) = v51;
LABEL_45:
      ++v50;
      v54 = *v47++;
      v49 += v54;
      if (!v54)
        goto LABEL_37;
    }
  }
LABEL_48:
  v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 72))(v11);
  if (v56)
  {
    v57 = (uint64_t *)v55;
    v58 = 8 * v56;
    do
    {
      v59 = *v57++;
      sub_1C52230F0((uint64_t)this + 8, v59);
      v58 -= 8;
    }
    while (v58);
  }
  v60 = (char *)a3 + 320;
  for (i = *((_QWORD *)a3 + 41); (char *)i != v60; i = *(_QWORD *)(i + 8))
  {
    for (j = *(_QWORD *)(i + 56); j != i + 48; j = *(_QWORD *)(j + 8))
    {
      v63 = *(unsigned int *)(j + 40);
      if ((_DWORD)v63)
      {
        v64 = 32 * v63;
        v65 = (uint64_t *)(*(_QWORD *)(j + 32) + 16);
        do
        {
          if (*((_BYTE *)v65 - 16) == 12)
            sub_1C52230F0((uint64_t)this + 8, *v65);
          v65 += 4;
          v64 -= 32;
        }
        while (v64);
        if (!j)
          goto LABEL_64;
      }
      if ((*(_BYTE *)j & 4) == 0)
      {
LABEL_64:
        while ((*(_WORD *)(j + 44) & 8) != 0)
          j = *(_QWORD *)(j + 8);
      }
    }
  }
  v66 = ((*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3) + 1;
  v68 = (char *)*((_QWORD *)this + 10);
  v67 = (char *)*((_QWORD *)this + 11);
  v69 = 0x8E38E38E38E38E39 * ((v67 - v68) >> 3);
  v70 = v66 - v69;
  if (v66 <= v69)
  {
    if (v66 < v69)
    {
      v89 = &v68[72 * v66];
      while (v67 != v89)
      {
        v91 = (char *)*((_QWORD *)v67 - 9);
        v67 -= 72;
        v90 = v91;
        if (v67 + 16 != v91)
          free(v90);
      }
      *((_QWORD *)this + 11) = v89;
    }
  }
  else
  {
    v71 = *((_QWORD *)this + 12);
    if (0x8E38E38E38E38E39 * ((v71 - (uint64_t)v67) >> 3) >= v70)
    {
      v92 = &v67[72 * v70];
      v93 = 72 * v66 - 8 * ((v67 - v68) >> 3);
      v94 = v67 + 16;
      do
      {
        *((_QWORD *)v94 + 6) = 0;
        *((_OWORD *)v94 + 1) = 0uLL;
        *((_OWORD *)v94 + 2) = 0uLL;
        *(_OWORD *)v94 = 0uLL;
        *((_QWORD *)v94 - 2) = v94;
        *((_QWORD *)v94 - 1) = 0x600000000;
        v94 += 72;
        v93 -= 72;
      }
      while (v93);
      *((_QWORD *)this + 11) = v92;
    }
    else
    {
      v72 = 0x1C71C71C71C71C72 * ((v71 - (uint64_t)v68) >> 3);
      if (v72 <= v66)
        v72 = ((*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3) + 1;
      if (0x8E38E38E38E38E39 * ((v71 - (uint64_t)v68) >> 3) >= 0x1C71C71C71C71C7)
        v73 = 0x38E38E38E38E38ELL;
      else
        v73 = v72;
      if (v73 > 0x38E38E38E38E38ELL)
        goto LABEL_205;
      v74 = (char *)operator new(72 * v73);
      v75 = &v74[8 * ((v67 - v68) >> 3)];
      v76 = v75 + 16;
      v77 = 72 * v66 - 8 * ((v67 - v68) >> 3);
      do
      {
        *((_QWORD *)v76 + 6) = 0;
        *((_OWORD *)v76 + 1) = 0uLL;
        *((_OWORD *)v76 + 2) = 0uLL;
        *(_OWORD *)v76 = 0uLL;
        *((_QWORD *)v76 - 2) = v76;
        *((_QWORD *)v76 - 1) = 0x600000000;
        v76 += 72;
        v77 -= 72;
      }
      while (v77);
      v78 = &v74[72 * v73];
      if (v67 != v68)
      {
        v167 = &v74[72 * v66];
        v79 = 0;
        while (1)
        {
          v80 = &v67[v79];
          v81 = &v75[v79];
          v82 = &v75[v79 - 56];
          *(_QWORD *)&v75[v79 - 72] = v82;
          v83 = (void **)&v75[v79 - 72];
          *(_QWORD *)&v75[v79 - 64] = 0x600000000;
          if (v75 == v67)
            goto LABEL_87;
          v84 = *((_DWORD *)v80 - 16);
          if (!v84)
            goto LABEL_87;
          v85 = (void *)*((_QWORD *)v80 - 9);
          v86 = &v67[v79];
          v87 = (uint64_t)&v67[v79 - 56];
          if ((void *)v87 != v85)
          {
            *v83 = v85;
            *((_DWORD *)v81 - 16) = v84;
            *((_DWORD *)v81 - 15) = *((_DWORD *)v86 - 15);
            *((_QWORD *)v80 - 9) = v87;
            *((_DWORD *)v86 - 15) = 0;
            goto LABEL_86;
          }
          if (v84 >= 7)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75[v79 - 72], (uint64_t)&v75[v79 - 56], *((unsigned int *)v80 - 16), 8);
            v88 = *((unsigned int *)v80 - 16);
            if (!(_DWORD)v88)
              goto LABEL_85;
            v85 = (void *)*((_QWORD *)v80 - 9);
            v82 = (char *)*v83;
          }
          else
          {
            v88 = *((unsigned int *)v80 - 16);
          }
          memcpy(v82, v85, 8 * v88);
LABEL_85:
          *((_DWORD *)v81 - 16) = v84;
LABEL_86:
          *((_DWORD *)v80 - 16) = 0;
LABEL_87:
          *((_DWORD *)v81 - 2) = *((_DWORD *)v80 - 2);
          v79 -= 72;
          if (&v67[v79] == v68)
          {
            v67 = (char *)*((_QWORD *)this + 10);
            v95 = (char *)*((_QWORD *)this + 11);
            *((_QWORD *)this + 10) = &v75[v79];
            *((_QWORD *)this + 11) = v167;
            *((_QWORD *)this + 12) = v78;
            while (v95 != v67)
            {
              v97 = (char *)*((_QWORD *)v95 - 9);
              v95 -= 72;
              v96 = v97;
              if (v95 + 16 != v97)
                free(v96);
            }
            goto LABEL_105;
          }
        }
      }
      *((_QWORD *)this + 10) = v75;
      *((_QWORD *)this + 11) = &v74[72 * v66];
      *((_QWORD *)this + 12) = v78;
LABEL_105:
      if (v67)
        operator delete(v67);
    }
  }
  v98 = (*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3;
  if ((_DWORD)v98)
  {
    for (k = 1; k <= v98; ++k)
    {
      v100 = *(_DWORD *)(*(_QWORD *)this + 44);
      __src = v171;
      v170 = 0x600000000;
      sub_1C4765AA4((char *)&__src, (v100 + 63) >> 6, 0);
      v172 = v100;
      v101 = *(_QWORD *)this;
      v102 = *(_DWORD *)(*(_QWORD *)this + 16);
      v103 = __src;
      if (v102 != 1)
      {
        v104 = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * (k - 1));
        v105 = 1;
        do
        {
          if (((*(_DWORD *)(v104 + 4 * (v105 >> 5)) >> v105) & 1) != 0)
          {
            v106 = (unsigned __int16 *)(*(_QWORD *)(v101 + 56)
                                      + (((unint64_t)*(unsigned int *)(*(_QWORD *)(v101 + 8) + 24 * v105 + 16) >> 3) & 0x1FFFFFFE));
            v108 = *v106;
            v107 = v106 + 1;
            v109 = v108 + (*(_DWORD *)(*(_QWORD *)(v101 + 8) + 24 * v105 + 16) & 0xF) * v105;
            do
            {
              v103[(unsigned __int16)v109 >> 6] |= 1 << v109;
              v110 = *v107++;
              v109 += v110;
            }
            while (v110);
          }
          ++v105;
        }
        while (v102 != (_DWORD)v105);
      }
      v111 = v170;
      v112 = 8 * v170;
      if ((_DWORD)v170)
      {
        v113 = 8 * v170;
        v114 = v103;
        do
        {
          *v114 = ~*v114;
          ++v114;
          v113 -= 8;
        }
        while (v113);
      }
      if ((v100 & 0x3F) != 0)
        v103[v111 - 1] &= ~(-1 << (v100 & 0x3F));
      v115 = *((_QWORD *)this + 10) + 72 * k;
      if ((void **)v115 == &__src)
        goto LABEL_132;
      v116 = *(unsigned int *)(v115 + 8);
      if (v116 >= v111)
      {
        if ((_DWORD)v111)
          memmove(*(void **)v115, v103, v112);
        goto LABEL_131;
      }
      if (*(_DWORD *)(v115 + 12) < v111)
      {
        *(_DWORD *)(v115 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v115, v115 + 16, v111, 8);
      }
      else if ((_DWORD)v116)
      {
        memmove(*(void **)v115, v103, 8 * v116);
        goto LABEL_129;
      }
      v116 = 0;
LABEL_129:
      if (v116 != v170)
        memcpy((void *)(*(_QWORD *)v115 + 8 * v116), (char *)__src + 8 * v116, 8 * v170 - 8 * v116);
LABEL_131:
      *(_DWORD *)(v115 + 8) = v111;
      v100 = v172;
      v103 = __src;
LABEL_132:
      *(_DWORD *)(v115 + 64) = v100;
      if (v103 != (_QWORD *)v171)
        free(v103);
    }
  }
  v117 = *(unsigned int *)(*(_QWORD *)this + 44);
  v119 = (char *)*((_QWORD *)this + 13);
  v118 = (char *)*((_QWORD *)this + 14);
  v120 = 0x8E38E38E38E38E39 * ((v118 - v119) >> 3);
  v121 = v117 - v120;
  if (v117 <= v120)
  {
    if (v117 < v120)
    {
      v140 = &v119[72 * v117];
      while (v118 != v140)
      {
        v142 = (char *)*((_QWORD *)v118 - 9);
        v118 -= 72;
        v141 = v142;
        if (v118 + 16 != v142)
          free(v141);
      }
      *((_QWORD *)this + 14) = v140;
    }
    goto LABEL_175;
  }
  v122 = *((_QWORD *)this + 15);
  if (0x8E38E38E38E38E39 * ((v122 - (uint64_t)v118) >> 3) >= v121)
  {
    v143 = &v118[72 * v121];
    v144 = 72 * v117 - 8 * ((v118 - v119) >> 3);
    v145 = v118 + 16;
    do
    {
      *((_QWORD *)v145 + 6) = 0;
      *((_OWORD *)v145 + 1) = 0uLL;
      *((_OWORD *)v145 + 2) = 0uLL;
      *(_OWORD *)v145 = 0uLL;
      *((_QWORD *)v145 - 2) = v145;
      *((_QWORD *)v145 - 1) = 0x600000000;
      v145 += 72;
      v144 -= 72;
    }
    while (v144);
    *((_QWORD *)this + 14) = v143;
    goto LABEL_175;
  }
  v123 = 0x1C71C71C71C71C72 * ((v122 - (uint64_t)v119) >> 3);
  if (v123 <= v117)
    v123 = *(unsigned int *)(*(_QWORD *)this + 44);
  if (0x8E38E38E38E38E39 * ((v122 - (uint64_t)v119) >> 3) >= 0x1C71C71C71C71C7)
    v124 = 0x38E38E38E38E38ELL;
  else
    v124 = v123;
  if (v124 > 0x38E38E38E38E38ELL)
LABEL_205:
    sub_1C4764EE4();
  v125 = (char *)operator new(72 * v124);
  v126 = &v125[8 * ((v118 - v119) >> 3)];
  v127 = v126 + 16;
  v128 = 72 * v117 - 8 * ((v118 - v119) >> 3);
  do
  {
    *((_QWORD *)v127 + 6) = 0;
    *((_OWORD *)v127 + 1) = 0uLL;
    *((_OWORD *)v127 + 2) = 0uLL;
    *(_OWORD *)v127 = 0uLL;
    *((_QWORD *)v127 - 2) = v127;
    *((_QWORD *)v127 - 1) = 0x600000000;
    v127 += 72;
    v128 -= 72;
  }
  while (v128);
  v129 = &v125[72 * v124];
  if (v118 != v119)
  {
    v168 = &v125[72 * v117];
    v130 = 0;
    while (1)
    {
      v131 = &v118[v130];
      v132 = &v126[v130];
      v133 = &v126[v130 - 56];
      *(_QWORD *)&v126[v130 - 72] = v133;
      v134 = (void **)&v126[v130 - 72];
      *(_QWORD *)&v126[v130 - 64] = 0x600000000;
      if (v126 == v118)
        goto LABEL_155;
      v135 = *((_DWORD *)v131 - 16);
      if (!v135)
        goto LABEL_155;
      v136 = (void *)*((_QWORD *)v131 - 9);
      v137 = &v118[v130];
      v138 = (uint64_t)&v118[v130 - 56];
      if ((void *)v138 != v136)
      {
        *v134 = v136;
        *((_DWORD *)v132 - 16) = v135;
        *((_DWORD *)v132 - 15) = *((_DWORD *)v137 - 15);
        *((_QWORD *)v131 - 9) = v138;
        *((_DWORD *)v137 - 15) = 0;
        goto LABEL_154;
      }
      if (v135 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v126[v130 - 72], (uint64_t)&v126[v130 - 56], *((unsigned int *)v131 - 16), 8);
        v139 = *((unsigned int *)v131 - 16);
        if (!(_DWORD)v139)
          goto LABEL_153;
        v136 = (void *)*((_QWORD *)v131 - 9);
        v133 = (char *)*v134;
      }
      else
      {
        v139 = *((unsigned int *)v131 - 16);
      }
      memcpy(v133, v136, 8 * v139);
LABEL_153:
      *((_DWORD *)v132 - 16) = v135;
LABEL_154:
      *((_DWORD *)v131 - 16) = 0;
LABEL_155:
      *((_DWORD *)v132 - 2) = *((_DWORD *)v131 - 2);
      v130 -= 72;
      if (&v118[v130] == v119)
      {
        v118 = (char *)*((_QWORD *)this + 13);
        v146 = (char *)*((_QWORD *)this + 14);
        *((_QWORD *)this + 13) = &v126[v130];
        *((_QWORD *)this + 14) = v168;
        *((_QWORD *)this + 15) = v129;
        while (v146 != v118)
        {
          v148 = (char *)*((_QWORD *)v146 - 9);
          v146 -= 72;
          v147 = v148;
          if (v146 + 16 != v148)
            free(v147);
        }
        goto LABEL_173;
      }
    }
  }
  *((_QWORD *)this + 13) = v126;
  *((_QWORD *)this + 14) = &v125[72 * v117];
  *((_QWORD *)this + 15) = v129;
LABEL_173:
  if (v118)
    operator delete(v118);
LABEL_175:
  v149 = *(unsigned int *)(*(_QWORD *)this + 44);
  if ((_DWORD)v149)
  {
    for (m = 0; m != v149; ++m)
    {
      v151 = *(_DWORD *)(*(_QWORD *)this + 16);
      __src = v171;
      v170 = 0x600000000;
      sub_1C4765AA4((char *)&__src, (v151 + 63) >> 6, 0);
      v172 = v151;
      if (*(_QWORD *)this)
        v152 = (uint64_t *)(*(_QWORD *)this + 8);
      else
        v152 = 0;
      v153 = v152[5];
      v154 = *(unsigned __int16 *)(v153 + 4 * m);
      if (*(_WORD *)(v153 + 4 * m))
      {
        v155 = *(unsigned __int16 *)(v153 + 4 * m + 2);
        v156 = v152[6];
        v157 = *v152;
        v158 = __src;
        do
        {
          if (v156)
          {
            v159 = (unsigned __int16 *)(v156 + 2 * *(unsigned int *)(v157 + 24 * (unsigned __int16)v154 + 8));
            do
            {
              v158[(unsigned __int16)v154 >> 6] |= 1 << v154;
              v160 = *v159++;
              v154 += v160;
            }
            while (v160);
          }
          v154 = v155;
          v161 = (unsigned __int16)v155 == 0;
          v155 = 0;
        }
        while (!v161);
      }
      v162 = *((_QWORD *)this + 13) + 72 * m;
      if ((void **)v162 == &__src)
        goto LABEL_199;
      v163 = v170;
      v164 = *(unsigned int *)(v162 + 8);
      if (v164 >= v170)
      {
        if ((_DWORD)v170)
          memmove(*(void **)v162, __src, 8 * v170);
        goto LABEL_198;
      }
      if (*(_DWORD *)(v162 + 12) < v170)
      {
        *(_DWORD *)(v162 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v162, v162 + 16, v163, 8);
      }
      else if ((_DWORD)v164)
      {
        memmove(*(void **)v162, __src, 8 * v164);
        goto LABEL_196;
      }
      v164 = 0;
LABEL_196:
      if (v164 != v170)
        memcpy((void *)(*(_QWORD *)v162 + 8 * v164), (char *)__src + 8 * v164, 8 * v170 - 8 * v164);
LABEL_198:
      *(_DWORD *)(v162 + 8) = v163;
      v151 = v172;
LABEL_199:
      *(_DWORD *)(v162 + 64) = v151;
      if (__src != v171)
        free(__src);
    }
  }
  if (v173[0] != v174)
    free(v173[0]);
  return this;
}

void sub_1C52230F0(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v4 = *(char **)a1;
  v5 = *(char **)(a1 + 8);
  v6 = *(char **)a1;
  if (*(char **)a1 != v5)
  {
    v6 = *(char **)a1;
    while (*(_QWORD *)v6 != a2)
    {
      v6 += 8;
      if (v6 == v5)
      {
        v6 = *(char **)(a1 + 8);
        break;
      }
    }
  }
  if (v6 == v5)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v5 >= v7)
    {
      v9 = (v5 - v4) >> 3;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61)
        abort();
      v11 = v7 - (_QWORD)v4;
      if (v11 >> 2 > v10)
        v10 = v11 >> 2;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 61)
          sub_1C4764EE4();
        v13 = (char *)operator new(8 * v12);
      }
      else
      {
        v13 = 0;
      }
      v14 = &v13[8 * v9];
      *(_QWORD *)v14 = a2;
      v8 = v14 + 8;
      if (v4 != v5)
      {
        do
        {
          v15 = *((_QWORD *)v5 - 1);
          v5 -= 8;
          *((_QWORD *)v14 - 1) = v15;
          v14 -= 8;
        }
        while (v5 != v4);
        v4 = *(char **)a1;
      }
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = &v13[8 * v12];
      if (v4)
        operator delete(v4);
    }
    else
    {
      *(_QWORD *)v5 = a2;
      v8 = v5 + 8;
    }
    *(_QWORD *)(a1 + 8) = v8;
  }
}

uint64_t llvm::rdf::PhysicalRegisterInfo::getAliasSet@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  _QWORD *i;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  int v20;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned __int16 *v25;
  int v26;
  BOOL v27;
  __int16 v28;
  int v29;
  unsigned __int16 *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  int v37;

  v4 = (_QWORD *)this;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = a3 + 8;
  if (a2 < 0x40000000)
  {
    if (*(_QWORD *)this)
      v16 = (_QWORD *)(*(_QWORD *)this + 8);
    else
      v16 = 0;
    v18 = v16[5];
    v17 = v16[6];
    v19 = (_WORD *)(v17 + (((unint64_t)*(unsigned int *)(*v16 + 24 * a2 + 16) >> 3) & 0x1FFFFFFE));
    v20 = (unsigned __int16)*v19 + (*(_DWORD *)(*v16 + 24 * a2 + 16) & 0xF) * a2;
    while (1)
    {
      ++v19;
      LOWORD(v22) = *(_WORD *)(v18 + 4 * (unsigned __int16)v20);
      if ((_WORD)v22)
        break;
LABEL_31:
      v20 += (unsigned __int16)*v19;
      if (!*v19)
        goto LABEL_44;
    }
    v23 = *(unsigned __int16 *)(v18 + 4 * (unsigned __int16)v20 + 2);
    v24 = v23 << 16;
    while (!v17)
    {
LABEL_29:
      v24 = 0;
      LOWORD(v22) = v23;
      v27 = (unsigned __int16)v23 == 0;
      LOWORD(v23) = 0;
      if (v27)
        goto LABEL_31;
    }
    v25 = (unsigned __int16 *)(v17 + 2 * *(unsigned int *)(*v16 + 24 * (unsigned __int16)v22 + 8));
    while (a2 == (unsigned __int16)v22)
    {
      v26 = *v25++;
      LOWORD(v22) = v26 + v22;
      if (!v26)
        goto LABEL_29;
    }
    do
    {
      v37 = (unsigned __int16)v22;
      this = (uint64_t)sub_1C4778ED8((uint64_t **)a3, (unsigned int *)&v37, &v37);
      do
      {
        v29 = *v25++;
        v28 = v29;
        if (v29)
        {
          LOWORD(v22) = v28 + v22;
        }
        else
        {
          v22 = HIWORD(v24);
          if (HIWORD(v24))
          {
            v24 >>= 16;
          }
          else
          {
            if (!*v19)
              goto LABEL_44;
            v20 += (unsigned __int16)*v19++;
            v30 = (unsigned __int16 *)(v16[5] + 4 * (unsigned __int16)v20);
            v22 = *v30;
            v24 = v30[1] << 16;
          }
          v25 = (unsigned __int16 *)(v16[6] + 2 * *(unsigned int *)(*v16 + 24 * v22 + 8));
        }
      }
      while (a2 == (unsigned __int16)v22);
    }
    while (v19);
LABEL_44:
    v31 = (_QWORD *)v4[1];
    v32 = (_QWORD *)v4[2];
    if (v31 != v32)
    {
      if (a2)
        v33 = -1;
      else
        v33 = 0;
      do
      {
        v34 = (char *)v4[1];
        v35 = (char *)v4[2];
        if (v34 == v35)
        {
          v36 = (char *)v4[1];
        }
        else
        {
          v36 = (char *)v4[1];
          while (*(_QWORD *)v36 != *v31)
          {
            v36 += 8;
            if (v36 == v35)
            {
              v36 = (char *)v4[2];
              break;
            }
          }
        }
        v37 = ((unint64_t)(v36 - v34) >> 3) + 1073741825;
        this = llvm::rdf::PhysicalRegisterInfo::aliasRM(v4, a2, v33, v37);
        if ((_DWORD)this)
          this = (uint64_t)sub_1C4778ED8((uint64_t **)a3, (unsigned int *)&v37, &v37);
        ++v31;
      }
      while (v31 != v32);
    }
  }
  else
  {
    v6 = *(_QWORD *)this;
    v7 = *(_QWORD **)(this + 8);
    v8 = v7[a2 - 1073741825];
    v9 = 1;
    v37 = 1;
    v10 = *(_DWORD *)(v6 + 16);
    if (v10 != 1)
    {
      do
      {
        if (((*(_DWORD *)(v8 + 4 * (v9 >> 5)) >> v9) & 1) == 0)
        {
          this = (uint64_t)sub_1C4778ED8((uint64_t **)a3, (unsigned int *)&v37, &v37);
          v9 = v37;
        }
        v37 = ++v9;
      }
      while (v9 != v10);
      v7 = (_QWORD *)v4[1];
    }
    for (i = (_QWORD *)v4[2]; v7 != i; ++v7)
    {
      v12 = (char *)v4[1];
      v13 = (char *)v4[2];
      if (v12 == v13)
      {
        v14 = (char *)v4[1];
      }
      else
      {
        v14 = (char *)v4[1];
        while (*(_QWORD *)v14 != *v7)
        {
          v14 += 8;
          if (v14 == v13)
          {
            v14 = (char *)v4[2];
            break;
          }
        }
      }
      v15 = ((unint64_t)(v14 - v12) >> 3) + 1073741825;
      v37 = v15;
      if (v15 != a2)
      {
        this = llvm::rdf::PhysicalRegisterInfo::aliasMM(v4, a2, -1, v15);
        if ((_DWORD)this)
          this = (uint64_t)sub_1C4778ED8((uint64_t **)a3, (unsigned int *)&v37, &v37);
      }
    }
  }
  return this;
}

BOOL llvm::rdf::PhysicalRegisterInfo::aliasMM(_QWORD *a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v12;

  v4 = a1[1];
  v5 = *(_QWORD *)(v4 + 8 * (a2 - 1073741825));
  v6 = *(unsigned int *)(*a1 + 16);
  v7 = *(_QWORD *)(v4 + 8 * (a4 - 1073741825));
  v8 = v6 >> 5;
  if (v6 < 0x20)
  {
LABEL_8:
    v12 = *(_DWORD *)(*a1 + 16) & 0x1F;
    return v12
        && (*(_DWORD *)(v5 + 4 * v8) | (-1 << v12) | *(_DWORD *)(v7 + 4 * v8)) != -1;
  }
  else
  {
    v9 = 0;
    while (1)
    {
      v10 = *(_DWORD *)(v7 + v9) | *(_DWORD *)(v5 + v9);
      if (v9 ? ~v10 : ~v10 & 0xFFFFFFFE)
        return 1;
      v9 += 4;
      if (4 * v8 == v9)
        goto LABEL_8;
    }
  }
}

uint64_t llvm::rdf::PhysicalRegisterInfo::aliasRM(_QWORD *a1, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned __int16 v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v4 = *(_QWORD *)(a1[1] + 8 * (a4 - 1073741825));
  v5 = ((*(_DWORD *)(v4 + 4 * (a2 >> 5)) >> a2) & 1) == 0;
  if (a3 != -1)
  {
    v6 = *(_QWORD *)(a1[4] + 8 * a2);
    if (!v6 || (*(_QWORD *)(v6 + 24) & ~a3) != 0)
    {
      if (*a1)
        v7 = (_QWORD *)(*a1 + 8);
      else
        v7 = 0;
      v8 = v7[6];
      v9 = *(unsigned int *)(*v7 + 24 * a2 + 4);
      if (*(_WORD *)(v8 + 2 * v9))
      {
        v10 = (unsigned __int16 *)(v7[10] + 2 * *(unsigned int *)(*v7 + 24 * a2 + 12));
        v11 = *(_WORD *)(v8 + 2 * v9) + a2;
        v12 = (unsigned __int16 *)(v8 + 2 * v9 + 2);
        v13 = a3;
        while (1)
        {
          v14 = *(_QWORD *)(*(_QWORD *)(*a1 + 232) + 8 * *v10);
          if ((v14 & a3) != 0 && ((*(_DWORD *)(v4 + 4 * (v11 >> 5)) >> v11) & 1) != 0)
          {
            v13 &= ~v14;
            if (!v13)
              break;
          }
          v15 = *v12++;
          v11 += v15;
          ++v10;
          if (!v15)
            return 1;
        }
        return 0;
      }
      else
      {
        return 1;
      }
    }
  }
  return v5;
}

uint64_t llvm::rdf::PhysicalRegisterInfo::aliasRR(_QWORD *a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  unsigned __int16 *v12;
  __int16 v13;
  unsigned __int16 v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  __int16 v18;
  _WORD *v19;
  unsigned __int16 *v20;
  __int16 v21;
  unsigned __int16 v22;
  _QWORD *v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  BOOL v28;

  if (*a1)
    v5 = (uint64_t *)(*a1 + 8);
  else
    v5 = 0;
  v6 = *v5;
  v7 = *v5 + 24 * a2;
  v8 = *(unsigned int *)(v7 + 16);
  v9 = v5[6];
  v10 = v5[7];
  v11 = (_WORD *)(v9 + ((v8 >> 3) & 0x1FFFFFFE));
  v13 = *v11;
  v12 = v11 + 1;
  v14 = v13 + (v8 & 0xF) * a2;
  v15 = (_QWORD *)(v10 + 8 * *(unsigned __int16 *)(v7 + 20));
  v16 = v6 + 24 * a4;
  v17 = *(unsigned int *)(v16 + 16);
  v18 = v17 & 0xF;
  v19 = (_WORD *)(v9 + ((v17 >> 3) & 0x1FFFFFFE));
  v21 = *v19;
  v20 = v19 + 1;
  v22 = v21 + v18 * a4;
  v23 = (_QWORD *)(v10 + 8 * *(unsigned __int16 *)(v16 + 20));
  while (1)
  {
    if (*v15)
      v24 = (*v15 & a3) == 0;
    else
      v24 = 0;
    if (v24)
      goto LABEL_15;
    if (*v23)
      v25 = (*v23 & a5) == 0;
    else
      v25 = 0;
    if (v25)
    {
LABEL_18:
      ++v23;
      v27 = *v20++;
      v22 += v27;
      if (!v27)
        v20 = 0;
      goto LABEL_20;
    }
    if (v14 == v22)
      return 1;
    if (v14 >= v22)
      goto LABEL_18;
LABEL_15:
    ++v15;
    v26 = *v12++;
    v14 += v26;
    if (!v26)
      v12 = 0;
LABEL_20:
    if (v12)
      v28 = v20 == 0;
    else
      v28 = 1;
    if (v28)
      return 0;
  }
}

unint64_t llvm::rdf::PhysicalRegisterInfo::mapTo(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  uint64_t SubRegIndex;
  uint64_t v12;

  if ((_DWORD)a2 == a4)
  {
    v6 = a2 & 0xFFFFFFFF00000000;
    v7 = a4;
  }
  else
  {
    v8 = *a1;
    v9 = (_QWORD *)(*a1 + 8);
    v7 = a4;
    v10 = a2;
    SubRegIndex = llvm::MCRegisterInfo::getSubRegIndex(v9, a4, a2);
    if ((_DWORD)SubRegIndex)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 216))(v8, SubRegIndex, a3);
      v6 = 0;
    }
    else
    {
      v12 = llvm::MCRegisterInfo::getSubRegIndex(v9, v10, a4);
      if ((_DWORD)v12)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 224))(v8, v12, a3);
      v6 = 0;
    }
  }
  return v6 | v7;
}

BOOL llvm::rdf::RegisterAggr::hasAliasOf(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 result;
  BOOL v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  unsigned __int16 *v21;
  __int16 v22;
  unsigned __int16 v23;
  _QWORD *v24;
  BOOL v25;
  int v26;

  v3 = *(_QWORD **)(a1 + 72);
  if (a2 < 0x40000000)
  {
    v16 = (_QWORD *)*v3;
    v17 = v16[1] + 24 * a2;
    v18 = *(unsigned int *)(v17 + 16);
    v19 = v16[8];
    v20 = (_WORD *)(v16[7] + ((v18 >> 3) & 0x1FFFFFFE));
    v22 = *v20;
    v21 = v20 + 1;
    v23 = v22 + (v18 & 0xF) * a2;
    v24 = (_QWORD *)(v19 + 8 * *(unsigned __int16 *)(v17 + 20));
    while (1)
    {
      v25 = *v24 && (*v24 & a3) == 0;
      if (!v25 && ((*(_QWORD *)(*(_QWORD *)a1 + 8 * (v23 >> 6)) >> v23) & 1) != 0)
        break;
      ++v24;
      v26 = *v21++;
      v23 += v26;
      if (!v26)
        return 0;
    }
    return 1;
  }
  else
  {
    v4 = v3[10] + 72 * (a2 - 0x40000000);
    v5 = *(_DWORD *)(a1 + 8);
    LODWORD(v6) = *(_DWORD *)(v4 + 8);
    if (v6 >= v5)
      v6 = v5;
    else
      v6 = v6;
    if ((_DWORD)v6)
    {
      v7 = *(uint64_t **)a1;
      v8 = *(uint64_t **)v4;
      v9 = v6 - 1;
      do
      {
        v11 = *v7++;
        v10 = v11;
        v12 = *v8++;
        v13 = v12 & v10;
        result = v13 != 0;
        if (v13)
          v15 = 1;
        else
          v15 = v9 == 0;
        --v9;
      }
      while (!v15);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::rdf::RegisterAggr::hasCoverOf(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  _DWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _WORD *v12;
  unsigned __int16 *v13;
  __int16 v14;
  unsigned __int16 v15;
  _QWORD *v16;
  BOOL v17;
  int v18;
  _BOOL8 v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  void *__dst;
  uint64_t v31;
  _DWORD v32[14];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x40000000)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 80) + 72 * (a2 - 0x40000000);
    __dst = v32;
    v31 = 0x600000000;
    v5 = *(_DWORD *)(v4 + 8);
    if (&__dst == (void **)v4 || v5 == 0)
    {
      v5 = 0;
      v7 = v32;
LABEL_22:
      v32[12] = *(_DWORD *)(v4 + 64);
      LODWORD(v21) = *(_DWORD *)(a1 + 8);
      if (v21 >= v5)
        v21 = v5;
      else
        v21 = v21;
      if ((_DWORD)v21)
      {
        v22 = *(uint64_t **)a1;
        v23 = v7;
        do
        {
          v24 = *v22++;
          *v23++ &= ~v24;
          --v21;
        }
        while (v21);
      }
      if (v5)
      {
        v25 = 8 * v5 - 8;
        v26 = (uint64_t *)v7;
        do
        {
          v27 = *v26++;
          v19 = v27 == 0;
          if (v27)
            v28 = 1;
          else
            v28 = v25 == 0;
          v25 -= 8;
        }
        while (!v28);
      }
      else
      {
        v19 = 1;
      }
      if (v7 != v32)
        free(v7);
      return v19;
    }
    if (v5 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v32, *(unsigned int *)(v4 + 8), 8);
      v20 = *(_DWORD *)(v4 + 8);
      v7 = __dst;
      if (!v20)
      {
LABEL_21:
        LODWORD(v31) = v5;
        goto LABEL_22;
      }
    }
    else
    {
      v20 = *(_DWORD *)(v4 + 8);
      v7 = v32;
    }
    memcpy(v7, *(const void **)v4, 8 * v20);
    v7 = __dst;
    goto LABEL_21;
  }
  v8 = **(_QWORD ***)(a1 + 72);
  v9 = v8[1] + 24 * a2;
  v10 = *(unsigned int *)(v9 + 16);
  v11 = v8[8];
  v12 = (_WORD *)(v8[7] + ((v10 >> 3) & 0x1FFFFFFE));
  v14 = *v12;
  v13 = v12 + 1;
  v15 = v14 + (v10 & 0xF) * a2;
  v16 = (_QWORD *)(v11 + 8 * *(unsigned __int16 *)(v9 + 20));
  while (1)
  {
    v17 = *v16 && (*v16 & a3) == 0;
    if (!v17 && ((*(_QWORD *)(*(_QWORD *)a1 + 8 * (v15 >> 6)) >> v15) & 1) == 0)
      break;
    ++v16;
    v18 = *v13++;
    v15 += v18;
    if (!v18)
      return 1;
  }
  return 0;
}

uint64_t llvm::rdf::RegisterAggr::insert(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _WORD *v15;
  unsigned __int16 *v16;
  __int16 v17;
  unsigned __int16 v18;
  _QWORD *v19;
  BOOL v20;
  int v21;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  int v29;

  v4 = *(_QWORD **)(a1 + 72);
  if (a2 < 0x40000000)
  {
    v11 = (_QWORD *)*v4;
    v12 = v11[1] + 24 * a2;
    v13 = *(unsigned int *)(v12 + 16);
    v14 = v11[8];
    v15 = (_WORD *)(v11[7] + ((v13 >> 3) & 0x1FFFFFFE));
    v17 = *v15;
    v16 = v15 + 1;
    v18 = v17 + (v13 & 0xF) * a2;
    v19 = (_QWORD *)(v14 + 8 * *(unsigned __int16 *)(v12 + 20));
    do
    {
      if (*v19)
        v20 = (*v19 & a3) == 0;
      else
        v20 = 0;
      if (!v20)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * (v18 >> 6)) |= 1 << v18;
      ++v19;
      v21 = *v16++;
      v18 += v21;
    }
    while (v21);
  }
  else
  {
    v5 = v4[10] + 72 * (a2 - 0x40000000);
    v6 = *(_DWORD *)(v5 + 64);
    if (*(_DWORD *)(a1 + 64) < v6)
    {
      v23 = *(_DWORD *)(a1 + 64) & 0x3F;
      v24 = *(unsigned int *)(a1 + 8);
      if (v23)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v24 - 8) &= ~(-1 << v23);
      v25 = v24;
      *(_DWORD *)(a1 + 64) = v6;
      v26 = v6 + 63;
      if ((_DWORD)v24 != (v6 + 63) >> 6)
      {
        v27 = v26 >> 6;
        if (v24 > v27)
        {
          *(_DWORD *)(a1 + 8) = v27;
          v25 = v26 >> 6;
        }
        else
        {
          v28 = v24;
          if (v27 > *(_DWORD *)(a1 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v27, 8);
            v28 = *(unsigned int *)(a1 + 8);
            v25 = *(_DWORD *)(a1 + 8);
          }
          if (v27 != v24)
            bzero((void *)(*(_QWORD *)a1 + 8 * v28), 8 * (v27 - v24));
          v25 += v27 - v24;
          *(_DWORD *)(a1 + 8) = v25;
          v6 = *(_DWORD *)(a1 + 64);
        }
      }
      v29 = v6 & 0x3F;
      if (v29)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v25 - 8) &= ~(-1 << v29);
    }
    v7 = *(unsigned int *)(v5 + 8);
    if ((_DWORD)v7)
    {
      v8 = *(uint64_t **)v5;
      v9 = *(_QWORD **)a1;
      do
      {
        v10 = *v8++;
        *v9++ |= v10;
        --v7;
      }
      while (v7);
    }
  }
  return a1;
}

llvm::rdf::RegisterAggr *llvm::rdf::RegisterAggr::insert(llvm::rdf::RegisterAggr *this, const llvm::rdf::RegisterAggr *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  int v16;

  v4 = *((_DWORD *)a2 + 16);
  if (*((_DWORD *)this + 16) < v4)
  {
    v10 = *((_DWORD *)this + 16) & 0x3F;
    v11 = *((unsigned int *)this + 2);
    if (v10)
      *(_QWORD *)(*(_QWORD *)this + 8 * v11 - 8) &= ~(-1 << v10);
    v12 = v11;
    *((_DWORD *)this + 16) = v4;
    v13 = v4 + 63;
    if ((_DWORD)v11 != (v4 + 63) >> 6)
    {
      v14 = v13 >> 6;
      if (v11 > v14)
      {
        *((_DWORD *)this + 2) = v14;
        v12 = v13 >> 6;
      }
      else
      {
        v15 = v11;
        if (v14 > *((_DWORD *)this + 3))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this, (uint64_t)this + 16, v14, 8);
          v15 = *((unsigned int *)this + 2);
          v12 = *((_DWORD *)this + 2);
        }
        if (v14 != v11)
          bzero((void *)(*(_QWORD *)this + 8 * v15), 8 * (v14 - v11));
        v12 += v14 - v11;
        *((_DWORD *)this + 2) = v12;
        v4 = *((_DWORD *)this + 16);
      }
    }
    v16 = v4 & 0x3F;
    if (v16)
      *(_QWORD *)(*(_QWORD *)this + 8 * v12 - 8) &= ~(-1 << v16);
  }
  v5 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v5)
  {
    v6 = *(uint64_t **)a2;
    v7 = *(_QWORD **)this;
    do
    {
      v8 = *v6++;
      *v7++ |= v8;
      --v5;
    }
    while (v5);
  }
  return this;
}

uint64_t llvm::rdf::RegisterAggr::intersect(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v17;
  uint64_t v18;
  _DWORD v19[14];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_DWORD *)(*(_QWORD *)v6 + 44);
  v17 = v19;
  v18 = 0x600000000;
  sub_1C4765AA4((char *)&v17, (v7 + 63) >> 6, 0);
  v19[12] = v7;
  v20 = v6;
  llvm::rdf::RegisterAggr::insert((uint64_t)&v17, a2, a3);
  v8 = *(_DWORD *)(a1 + 8);
  v9 = v18;
  if (v18 >= v8)
    v10 = v8;
  else
    v10 = v18;
  if ((_DWORD)v10)
  {
    v11 = (uint64_t *)v17;
    v12 = *(_QWORD **)a1;
    v13 = v10;
    do
    {
      v14 = *v11++;
      *v12++ &= v14;
      --v13;
    }
    while (v13);
  }
  if (v8 > v9)
  {
    v15 = *(_QWORD **)a1;
    do
    {
      v15[v10] = 0;
      LODWORD(v10) = v10 + 1;
    }
    while (v8 != (_DWORD)v10);
  }
  if (v17 != v19)
    free(v17);
  return a1;
}

uint64_t llvm::rdf::RegisterAggr::intersect(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *(_DWORD *)(result + 8);
  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= v2)
    v4 = v2;
  else
    v4 = v3;
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)a2;
    v6 = *(_QWORD **)result;
    v7 = v4;
    do
    {
      v8 = *v5++;
      *v6++ &= v8;
      --v7;
    }
    while (v7);
  }
  if (v2 > v3)
  {
    v9 = *(_QWORD **)result;
    do
    {
      v9[v4] = 0;
      LODWORD(v4) = v4 + 1;
    }
    while (v2 != (_DWORD)v4);
  }
  return result;
}

uint64_t llvm::rdf::RegisterAggr::clear(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  _DWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  void *v14;
  uint64_t v15;
  _DWORD v16[14];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_DWORD *)(*(_QWORD *)v6 + 44);
  v14 = v16;
  v15 = 0x600000000;
  sub_1C4765AA4((char *)&v14, (v7 + 63) >> 6, 0);
  v16[12] = v7;
  v17 = v6;
  llvm::rdf::RegisterAggr::insert((uint64_t)&v14, a2, a3);
  LODWORD(v8) = *(_DWORD *)(a1 + 8);
  if (v15 >= v8)
    v8 = v8;
  else
    v8 = v15;
  v9 = v14;
  if ((_DWORD)v8)
  {
    v10 = *(_QWORD **)a1;
    v11 = (uint64_t *)v14;
    do
    {
      v12 = *v11++;
      *v10++ &= ~v12;
      --v8;
    }
    while (v8);
  }
  if (v9 != v16)
    free(v9);
  return a1;
}

uint64_t llvm::rdf::RegisterAggr::clear(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;

  LODWORD(v2) = *(_DWORD *)(result + 8);
  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= v2)
    v2 = v2;
  else
    v2 = v3;
  if ((_DWORD)v2)
  {
    v4 = *(uint64_t **)a2;
    v5 = *(_QWORD **)result;
    do
    {
      v6 = *v4++;
      *v5++ &= ~v6;
      --v2;
    }
    while (v2);
  }
  return result;
}

unint64_t llvm::rdf::RegisterAggr::intersectWith(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t RegRef;
  void *v22;
  uint64_t v23;
  _DWORD v24[14];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_DWORD *)(*(_QWORD *)v6 + 44);
  v22 = v24;
  v23 = 0x600000000;
  sub_1C4765AA4((char *)&v22, (v7 + 63) >> 6, 0);
  v24[12] = v7;
  v25 = v6;
  llvm::rdf::RegisterAggr::insert((uint64_t)&v22, a2, a3);
  v8 = v23;
  v9 = *(_DWORD *)(a1 + 8);
  if (v9 >= v23)
    v10 = v23;
  else
    v10 = v9;
  v11 = v22;
  if ((_DWORD)v10)
  {
    v12 = *(uint64_t **)a1;
    v13 = v22;
    v14 = v10;
    do
    {
      v15 = *v12++;
      *v13++ &= v15;
      --v14;
    }
    while (v14);
  }
  if (v8 > v9)
  {
    do
    {
      v11[v10] = 0;
      LODWORD(v10) = v10 + 1;
    }
    while ((_DWORD)v8 != (_DWORD)v10);
  }
  if ((_DWORD)v8)
  {
    v16 = 0;
    v17 = 8 * v8;
    while (!v11[v16 / 8])
    {
      v16 += 8;
      if (v17 == v16)
        goto LABEL_13;
    }
    RegRef = llvm::rdf::RegisterAggr::makeRegRef((llvm::rdf::RegisterAggr *)&v22);
    v19 = RegRef & 0xFFFFFFFF00000000;
    v18 = RegRef;
    v11 = v22;
  }
  else
  {
LABEL_13:
    v18 = 0;
    v19 = 0;
  }
  if (v11 != (_QWORD *)v24)
    free(v11);
  return v19 | v18;
}

uint64_t llvm::rdf::RegisterAggr::makeRegRef(llvm::rdf::RegisterAggr *this)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  _BYTE *v7;
  unsigned int v8;
  int v9;
  unsigned int i;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 *v31;
  unsigned __int16 *v32;
  int v33;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  void *__dst;
  uint64_t v41;
  _BYTE v42[48];
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v2 = sub_1C476B7EC((uint64_t)this);
  if ((v2 & 0x80000000) != 0)
    return 0;
  v3 = v2;
  v4 = *(_QWORD *)(*((_QWORD *)this + 9) + 104) + 72 * v2;
  __dst = v42;
  v41 = 0x600000000;
  v5 = *(_DWORD *)(v4 + 8);
  if (&__dst != (void **)v4 && v5 != 0)
  {
    if (v5 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v42, *(unsigned int *)(v4 + 8), 8);
      v8 = *(_DWORD *)(v4 + 8);
      if (!v8)
      {
LABEL_12:
        LODWORD(v41) = v5;
        goto LABEL_13;
      }
      v7 = __dst;
    }
    else
    {
      v7 = v42;
      v8 = *(_DWORD *)(v4 + 8);
    }
    memcpy(v7, *(const void **)v4, 8 * v8);
    goto LABEL_12;
  }
LABEL_13:
  v43 = *(_DWORD *)(v4 + 64);
  for (i = sub_1C476BA0C(this, v3 + 1, *((_DWORD *)this + 16), 1u);
        (i & 0x80000000) == 0;
        i = sub_1C476BA0C(this, i + 1, *((_DWORD *)this + 16), 1u))
  {
    v11 = *(_QWORD *)(*((_QWORD *)this + 9) + 104) + 72 * i;
    v12 = v41;
    v13 = *(_DWORD *)(v11 + 8);
    if (v13 >= v41)
      v14 = v41;
    else
      v14 = v13;
    if ((_DWORD)v14)
    {
      v15 = *(uint64_t **)v11;
      v16 = __dst;
      v17 = v14;
      do
      {
        v18 = *v15++;
        *v16++ &= v18;
        --v17;
      }
      while (v17);
    }
    if (v12 > v13)
    {
      v19 = __dst;
      do
      {
        v19[v14] = 0;
        LODWORD(v14) = v14 + 1;
      }
      while (v12 != (_DWORD)v14);
    }
  }
  if (!v43)
    goto LABEL_38;
  v20 = 0;
  v21 = (v43 - 1) & 0xFFFFFFC0;
  v22 = (uint64_t *)__dst;
  while (1)
  {
    v24 = *v22++;
    v23 = v24;
    v25 = v21 == v20 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v43 : -1;
    v26 = v25 & v23;
    if (v26)
      break;
    v20 += 64;
    if (v21 + 64 == v20)
      goto LABEL_38;
  }
  v9 = __clz(__rbit64(v26)) + v20;
  if (v9 >= 1)
  {
    v27 = 0;
    v28 = (_QWORD *)**((_QWORD **)this + 9);
    v29 = v28[1] + 24 * v9;
    v30 = v28[8];
    v31 = (unsigned __int16 *)(v28[7] + (((unint64_t)*(unsigned int *)(v29 + 16) >> 3) & 0x1FFFFFFE));
    v33 = *v31;
    v32 = v31 + 1;
    v34 = v33 + (*(_DWORD *)(v29 + 16) & 0xF) * v9;
    v35 = (uint64_t *)(v30 + 8 * *(unsigned __int16 *)(v29 + 20));
    do
    {
      v37 = *v35++;
      v36 = v37;
      if (!v37)
        v36 = -1;
      v27 |= ((uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8 * ((unsigned __int16)v34 >> 6)) >> v34 << 63) >> 63) & v36;
      v38 = *v32++;
      v34 += v38;
    }
    while (v38);
  }
  else
  {
LABEL_38:
    v9 = 0;
  }
  if (__dst != v42)
    free(__dst);
  return v9;
}

uint64_t llvm::rdf::RegisterAggr::clearIn(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t RegRef;
  void *v15;
  uint64_t v16;
  _DWORD v17[14];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_DWORD *)(*(_QWORD *)v6 + 44);
  v15 = v17;
  v16 = 0x600000000;
  sub_1C4765AA4((char *)&v15, (v7 + 63) >> 6, 0);
  v17[12] = v7;
  v18 = v6;
  llvm::rdf::RegisterAggr::insert((uint64_t)&v15, a2, a3);
  v8 = *(_DWORD *)(a1 + 8);
  if (v8 >= v16)
    v9 = v16;
  else
    v9 = v8;
  if ((_DWORD)v9)
  {
    v10 = *(uint64_t **)a1;
    v11 = v15;
    do
    {
      v12 = *v10++;
      *v11++ &= ~v12;
      --v9;
    }
    while (v9);
  }
  RegRef = llvm::rdf::RegisterAggr::makeRegRef((llvm::rdf::RegisterAggr *)&v15);
  if (v15 != v17)
    free(v15);
  return RegRef;
}

uint64_t llvm::rdf::RegisterAggr::print(llvm::rdf::RegisterAggr *this, llvm::raw_ostream *a2)
{
  _BYTE *v4;
  uint64_t result;
  unsigned int v6;
  _BYTE *v7;
  uint64_t v8;
  void (**v9)(void);
  _WORD *v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)v4 >= *((_QWORD *)a2 + 3))
  {
    llvm::raw_ostream::write(a2, 123);
  }
  else
  {
    *((_QWORD *)a2 + 4) = v4 + 1;
    *v4 = 123;
  }
  result = sub_1C476B7EC((uint64_t)this);
  if ((result & 0x80000000) == 0)
  {
    v6 = result;
    while (1)
    {
      v7 = (_BYTE *)*((_QWORD *)a2 + 4);
      if ((unint64_t)v7 >= *((_QWORD *)a2 + 3))
      {
        llvm::raw_ostream::write(a2, 32);
      }
      else
      {
        *((_QWORD *)a2 + 4) = v7 + 1;
        *v7 = 32;
      }
      v8 = **((_QWORD **)this + 9);
      v11[0] = &off_1E814D058;
      v11[1] = v6;
      v11[2] = v8;
      v12 = v11;
      sub_1C52C9AC8((llvm::raw_ostream *)v11, a2);
      if (v12 == v11)
        break;
      if (v12)
      {
        v9 = (void (**)(void))(*v12 + 40);
LABEL_13:
        (*v9)();
      }
      result = sub_1C476BA0C(this, v6 + 1, *((_DWORD *)this + 16), 1u);
      v6 = result;
      if ((result & 0x80000000) != 0)
        goto LABEL_15;
    }
    v9 = (void (**)(void))(v11[0] + 32);
    goto LABEL_13;
  }
LABEL_15:
  v10 = (_WORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v10 <= 1uLL)
    return (uint64_t)llvm::raw_ostream::write(a2, " }", 2uLL);
  *v10 = 32032;
  *((_QWORD *)a2 + 4) += 2;
  return result;
}

uint64_t llvm::rdf::RegisterAggr::rr_iterator::rr_iterator(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  int v14;
  _QWORD v16[2];
  _DWORD *v17;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = (uint64_t *)(a1 + 8);
  *(_QWORD *)a1 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = a2;
  v7 = sub_1C476B7EC(a2);
  if ((v7 & 0x80000000) == 0)
  {
    v8 = v7;
    do
    {
      v9 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 72) + 56) + 16 * v8);
      v10 = *v9;
      v11 = *((_QWORD *)v9 + 1);
      if (v10)
        v12 = v11;
      else
        v12 = 0;
      v16[0] = v10;
      v16[1] = v12;
      v17 = v16;
      v13 = sub_1C522492C((uint64_t **)a1, (unsigned int *)v16, (uint64_t)&std::piecewise_construct, &v17);
      v13[5] = (uint64_t *)((unint64_t)v13[5] | v12);
      v8 = sub_1C476BA0C((_QWORD *)a2, v8 + 1, *(_DWORD *)(a2 + 64), 1u);
    }
    while ((v8 & 0x80000000) == 0);
  }
  if ((a3 & 1) != 0)
  {
    v14 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v14 = 0;
    v6 = *(uint64_t **)a1;
  }
  *(_QWORD *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 32) = v14;
  return a1;
}

llvm::raw_ostream *llvm::rdf::operator<<(llvm::raw_ostream *a1, llvm::rdf::RegisterAggr *this)
{
  llvm::rdf::RegisterAggr::print(this, a1);
  return a1;
}

uint64_t **sub_1C522492C(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)v9;
    v9 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v9 + 8) = **a4;
    v9[5] = 0;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v11;
    *v7 = (uint64_t *)v9;
    v12 = (uint64_t *)**a1;
    v13 = (uint64_t *)v9;
    if (v12)
    {
      *a1 = v12;
      v13 = *v7;
    }
    sub_1C4768E74(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v9;
}

void llvm::initializeReachingDefAnalysisPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1EF8F6FC8);
  if (v1 != -1)
  {
    v4[0] = sub_1C5224A70;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1EF8F6FC8, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5224A70(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "ReachingDefAnalysis";
  *(_QWORD *)(v2 + 8) = 19;
  *(_QWORD *)(v2 + 16) = "reaching-deps-analysis";
  *(_QWORD *)(v2 + 24) = 22;
  *(_QWORD *)(v2 + 32) = &llvm::ReachingDefAnalysis::ID;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::ReachingDefAnalysis>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

char *llvm::ReachingDefAnalysis::enterBasicBlock(llvm::ReachingDefAnalysis *this, llvm::MachineBasicBlock *a2)
{
  llvm::MachineBasicBlock *v2;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  char *v8;
  char **v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  char *result;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  _WORD *i;
  _WORD *v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  _WORD *v53;
  unsigned __int16 *v54;
  __int16 v55;
  unsigned __int16 v56;
  unsigned __int16 v57;
  int v58;
  unint64_t v59;
  char *v60;
  char **v61;

  v2 = a2;
  v4 = *((_DWORD *)a2 + 6);
  v5 = *((_QWORD *)this + 65);
  v6 = (_QWORD *)(v5 + 24 * v4);
  v7 = *((unsigned int *)this + 86);
  v9 = (char **)(v6 + 1);
  v8 = (char *)v6[1];
  v10 = (char *)*v6;
  v11 = (uint64_t)&v8[-*v6];
  v12 = v11 >> 3;
  if (v7 > v11 >> 3)
  {
    v13 = v7 - v12;
    v14 = v5 + 24 * v4;
    v17 = *(_QWORD *)(v14 + 16);
    v16 = (char **)(v14 + 16);
    v15 = v17;
    if (v7 - v12 <= (v17 - (uint64_t)v8) >> 3)
    {
      bzero(v8, 8 * v13);
      *v9 = &v8[8 * v13];
      goto LABEL_23;
    }
    v61 = v16;
    v18 = v15 - (_QWORD)v10;
    if (v18 >> 2 > v7)
      v7 = v18 >> 2;
    v19 = (unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8;
    v20 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v19)
      v20 = v7;
    if (v20 >> 61)
      sub_1C4764EE4();
    v59 = v20;
    v21 = (char *)operator new(8 * v20);
    v22 = &v21[8 * v12];
    v60 = &v21[8 * v59];
    bzero(v22, 8 * v13);
    v23 = &v21[8 * v13 + v11];
    if (v8 == v10)
    {
      *v6 = v22;
      *v9 = v23;
      *v61 = v60;
      v2 = a2;
      if (!v8)
        goto LABEL_23;
    }
    else
    {
      v24 = v8;
      do
      {
        v25 = *((_QWORD *)v24 - 1);
        v24 -= 8;
        *((_QWORD *)v22 - 1) = v25;
        v22 -= 8;
        *(_QWORD *)v24 = 0;
      }
      while (v24 != v10);
      *v6 = v22;
      *v9 = v23;
      *v61 = v60;
      v2 = a2;
      do
      {
        v8 -= 8;
        sub_1C5228510((uint64_t *)v8);
      }
      while (v8 != v10);
      v8 = v10;
      if (!v10)
        goto LABEL_23;
    }
    operator delete(v8);
    goto LABEL_23;
  }
  if (v7 < v12)
  {
    v26 = &v10[8 * v7];
    while (v8 != v26)
    {
      v8 -= 8;
      sub_1C5228510((uint64_t *)v8);
    }
    *v9 = v26;
  }
LABEL_23:
  *((_DWORD *)this + 122) = 0;
  v27 = (_QWORD *)((char *)this + 352);
  result = (char *)*((_QWORD *)this + 44);
  if (result == *((char **)this + 45))
  {
    v29 = *((unsigned int *)this + 86);
    v30 = *((_QWORD *)this + 46);
    if (v29 <= (v30 - (uint64_t)result) >> 2)
    {
      v34 = &result[4 * v29];
      if ((_DWORD)v29)
      {
        v36 = 0;
        do
        {
          *(_DWORD *)&result[v36] = *((_DWORD *)this + 158);
          v36 += 4;
        }
        while (4 * v29 != v36);
      }
    }
    else
    {
      if (result)
      {
        *((_QWORD *)this + 45) = result;
        operator delete(result);
        v30 = 0;
        *v27 = 0;
        *((_QWORD *)this + 45) = 0;
        *((_QWORD *)this + 46) = 0;
      }
      v31 = v30 >> 1;
      if (v30 >> 1 <= v29)
        v31 = v29;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
        v32 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v32 = v31;
      if (v32 >> 62)
        abort();
      result = (char *)operator new(4 * v32);
      v33 = 0;
      *((_QWORD *)this + 44) = result;
      *((_QWORD *)this + 46) = &result[4 * v32];
      v34 = &result[4 * v29];
      v35 = *((_DWORD *)this + 158);
      do
      {
        *(_DWORD *)&result[v33] = v35;
        v33 += 4;
      }
      while (4 * v29 != v33);
    }
    *((_QWORD *)this + 45) = v34;
  }
  v37 = *((_QWORD *)v2 + 8);
  v38 = *((_QWORD *)v2 + 9);
  if (v37 == v38)
  {
    v49 = (_WORD *)*((_QWORD *)v2 + 19);
    for (i = (_WORD *)*((_QWORD *)v2 + 20); v49 != i; v49 += 8)
    {
      v50 = *((_QWORD *)this + 32);
      if (v50)
        v51 = (_QWORD *)(v50 + 8);
      else
        v51 = 0;
      v52 = *(unsigned int *)(*v51 + 24 * (unsigned __int16)*v49 + 16);
      v53 = (_WORD *)(v51[6] + ((v52 >> 3) & 0x1FFFFFFE));
      v55 = *v53;
      v54 = v53 + 1;
      v56 = v55 + (v52 & 0xF) * *v49;
      do
      {
        v57 = v56;
        if (*(_DWORD *)(*v27 + 4 * v56) != -1)
        {
          *(_DWORD *)(*v27 + 4 * v56) = -1;
          result = (char *)sub_1C5224ED4(*(_QWORD *)(*((_QWORD *)this + 65) + 24 * v4) + 8 * v56, -2);
        }
        v58 = *v54++;
        v56 = v58 + v57;
      }
      while (v58);
    }
  }
  else
  {
    v39 = *((_QWORD *)this + 47);
    do
    {
      v40 = (uint64_t *)(v39 + 24 * *(int *)(*(_QWORD *)v37 + 24));
      v41 = *v40;
      if (*v40 != v40[1] && *((_DWORD *)this + 86))
      {
        v42 = 0;
        do
        {
          v43 = *(_DWORD *)&result[4 * v42];
          if (v43 <= *(_DWORD *)(v41 + 4 * v42))
            v43 = *(_DWORD *)(v41 + 4 * v42);
          *(_DWORD *)&result[4 * v42++] = v43;
        }
        while (v42 != *((_DWORD *)this + 86));
      }
      v37 += 8;
    }
    while (v37 != v38);
    v44 = *((_DWORD *)this + 86);
    if (v44)
    {
      v45 = 0;
      do
      {
        v46 = v45;
        v47 = *(int *)(*((_QWORD *)this + 44) + 4 * v45);
        if ((_DWORD)v47 != *((_DWORD *)this + 158))
        {
          result = (char *)sub_1C5224ED4(*(_QWORD *)(*((_QWORD *)this + 65) + 24 * v4) + 8 * v46, (4 * v47) | 2);
          v44 = *((_DWORD *)this + 86);
        }
        v45 = v46 + 1;
      }
      while ((_DWORD)v46 + 1 != v44);
    }
  }
  return result;
}

uint64_t sub_1C5224ED4(uint64_t result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3 = (uint64_t *)result;
  v4 = *(_QWORD *)result;
  if (*(_QWORD *)result > 1uLL)
  {
    if ((v4 & 1) == 0)
    {
      v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
      result = operator new();
      *(_QWORD *)result = result + 16;
      *(_QWORD *)(result + 8) = 0x400000000;
      *v3 = result | 1;
      v6 = result & 0xFFFFFFFFFFFFFFFELL;
      v7 = *(unsigned int *)((result & 0xFFFFFFFFFFFFFFFELL) + 8);
      if (v7 >= *(_DWORD *)((result & 0xFFFFFFFFFFFFFFFELL) + 12))
      {
        v10 = result & 0xFFFFFFFFFFFFFFFELL;
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(result & 0xFFFFFFFFFFFFFFFELL, v6 + 16, v7 + 1, 8);
        v6 = v10;
        LODWORD(v7) = *(_DWORD *)(v10 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
      ++*(_DWORD *)(v6 + 8);
      v4 = *v3;
    }
    v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v9 = *(unsigned int *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
    if (v9 >= *(_DWORD *)(v8 + 12))
    {
      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v8, v8 + 16, v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(v8 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = a2;
    ++*(_DWORD *)(v8 + 8);
  }
  else
  {
    *(_QWORD *)result = a2 & 0xFFFFFFFFFFFFFFFELL;
  }
  return result;
}

const void **llvm::ReachingDefAnalysis::leaveBasicBlock(const void **this, llvm::MachineBasicBlock *a2)
{
  const void **v2;
  unsigned int v3;
  _QWORD *v4;
  const void ***v5;
  char *v6;
  _BYTE *v7;
  size_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  void **v18;
  _QWORD *v19;
  char *v20;
  char *v21;
  size_t v22;
  unint64_t v23;
  char *v24;
  void *v25;
  char *v26;
  _QWORD *v27;
  _DWORD *v28;
  _DWORD *v29;

  v2 = this;
  v3 = *((_DWORD *)a2 + 6);
  v4 = this[47];
  v5 = (const void ***)&v4[3 * v3];
  if (v5 == (const void ***)(this + 44))
    goto LABEL_23;
  v6 = (char *)this[44];
  v7 = this[45];
  v8 = v7 - v6;
  v9 = (v7 - v6) >> 2;
  v10 = &v4[3 * v3];
  v13 = v10[2];
  v12 = v10 + 2;
  v11 = v13;
  v14 = (char *)*v5;
  if (v9 > (v13 - (uint64_t)*v5) >> 2)
  {
    if (v14)
    {
      v4[3 * v3 + 1] = v14;
      operator delete(v14);
      v11 = 0;
      *v5 = 0;
      v5[1] = 0;
      v5[2] = 0;
    }
    if ((v8 & 0x8000000000000000) != 0)
      goto LABEL_29;
    v15 = v11 >> 1;
    if (v11 >> 1 <= v9)
      v15 = (v7 - v6) >> 2;
    v16 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v15;
    if (v16 >> 62)
LABEL_29:
      abort();
    this = (const void **)operator new(4 * v16);
    v14 = (char *)this;
    *v5 = this;
    v17 = &v4[3 * v3];
    v17[1] = this;
    v18 = (void **)(v17 + 1);
    *v12 = (char *)this + 4 * v16;
    if (v7 != v6)
      this = (const void **)memcpy(this, v6, v7 - v6);
    goto LABEL_22;
  }
  v19 = &v4[3 * v3];
  v21 = (char *)v19[1];
  v18 = (void **)(v19 + 1);
  v20 = v21;
  v22 = v21 - v14;
  v23 = (v21 - v14) >> 2;
  if (v23 < v9)
  {
    v24 = &v6[4 * v23];
    if (v20 != v14)
    {
      this = (const void **)memmove(v14, this[44], v22);
      v14 = (char *)*v18;
    }
    v8 = v7 - v24;
    if (v7 == v24)
      goto LABEL_22;
    v25 = v14;
    v26 = v24;
    goto LABEL_21;
  }
  if (v7 != v6)
  {
    v25 = v14;
    v26 = (char *)v2[44];
LABEL_21:
    this = (const void **)memmove(v25, v26, v8);
  }
LABEL_22:
  *v18 = &v14[v8];
  v4 = v2[47];
LABEL_23:
  v27 = &v4[3 * v3];
  v28 = (_DWORD *)*v27;
  v29 = (_DWORD *)v27[1];
  while (v28 != v29)
  {
    if (*v28 != *((_DWORD *)v2 + 158))
      *v28 -= *((_DWORD *)v2 + 122);
    ++v28;
  }
  v2[45] = v2[44];
  return this;
}

_QWORD *llvm::ReachingDefAnalysis::processDefs(llvm::ReachingDefAnalysis *this, llvm::MachineInstr *a2)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _WORD *v12;
  unsigned __int16 *v13;
  __int16 v14;
  unsigned __int16 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  _QWORD *result;
  llvm::MachineInstr *v22;

  v22 = a2;
  v3 = *((unsigned int *)a2 + 10);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD *)*((_QWORD *)a2 + 4);
    v5 = &v4[8 * v3];
    v6 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 24);
    do
    {
      v7 = v4[1];
      if ((*v4 & 0x10000FF) == 0x1000000 && v7 != 0)
      {
        v9 = *((_QWORD *)this + 32);
        if (v9)
          v10 = (_QWORD *)(v9 + 8);
        else
          v10 = 0;
        v11 = *(unsigned int *)(*v10 + 24 * v7 + 16);
        v12 = (_WORD *)(v10[6] + ((v11 >> 3) & 0x1FFFFFFE));
        v14 = *v12;
        v13 = v12 + 1;
        v15 = v14 + (v11 & 0xF) * v7;
        do
        {
          v16 = v15;
          v17 = *((_QWORD *)this + 44);
          v18 = *((_DWORD *)this + 122);
          if (*(_DWORD *)(v17 + 4 * v16) != v18)
          {
            *(_DWORD *)(v17 + 4 * v16) = v18;
            sub_1C5224ED4(*(_QWORD *)(*((_QWORD *)this + 65) + 24 * v6) + 8 * v16, (4 * *((int *)this + 122)) | 2);
          }
          v19 = *v13++;
          v15 = v19 + v16;
        }
        while (v19);
      }
      v4 += 8;
    }
    while (v4 != v5);
  }
  v20 = *((_DWORD *)this + 122);
  result = sub_1C6128C08((uint64_t *)this + 62, &v22);
  *((_DWORD *)result + 2) = v20;
  ++*((_DWORD *)this + 122);
  return result;
}

_QWORD *llvm::ReachingDefAnalysis::reprocessBasicBlock(_QWORD *this, llvm::MachineBasicBlock *a2)
{
  _QWORD *v2;
  char *v3;
  uint64_t v4;
  int v5;
  int v7;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  v2 = this;
  v3 = (char *)a2 + 48;
  v4 = *((_QWORD *)a2 + 7);
  if ((llvm::MachineBasicBlock *)v4 != (llvm::MachineBasicBlock *)((char *)a2 + 48))
  {
    while (1)
    {
      v5 = **(unsigned __int16 **)(v4 + 16);
      if ((v5 - 13) >= 5 && v5 != 23)
        break;
      v4 = *(_QWORD *)(v4 + 8);
      if ((char *)v4 == v3)
        goto LABEL_19;
    }
  }
  if ((char *)v4 == v3)
  {
LABEL_19:
    v29 = 0;
  }
  else
  {
    v29 = 0;
LABEL_11:
    ++v29;
    while (1)
    {
      v4 = *(_QWORD *)(v4 + 8);
      if ((char *)v4 == v3)
        break;
      v7 = **(unsigned __int16 **)(v4 + 16);
      if ((v7 - 13) >= 5 && v7 != 23)
      {
        if ((char *)v4 != v3)
          goto LABEL_11;
        break;
      }
    }
  }
  v9 = *((_QWORD *)a2 + 8);
  v28 = *((_QWORD *)a2 + 9);
  if (v9 != v28)
  {
    v10 = *((_DWORD *)a2 + 6);
    v11 = this[47];
    while (1)
    {
      v12 = (_QWORD *)(v11 + 24 * *(int *)(*(_QWORD *)v9 + 24));
      if (*v12 != v12[1])
      {
        if (*((_DWORD *)v2 + 86))
          break;
      }
LABEL_50:
      v9 += 8;
      if (v9 == v28)
        return this;
    }
    v13 = 0;
    while (1)
    {
      v14 = v13;
      v15 = *(int *)(*v12 + 4 * v13);
      if ((_DWORD)v15 != *((_DWORD *)v2 + 158))
      {
        this = (_QWORD *)(*(_QWORD *)(v2[65] + 24 * v10) + 8 * v13);
        v16 = *this;
        if ((*this & 1) != 0)
        {
          v18 = *(_DWORD **)(v16 & 0xFFFFFFFFFFFFFFFELL);
          v17 = &v18[2 * *(unsigned int *)((v16 & 0xFFFFFFFFFFFFFFFELL) + 8)];
        }
        else
        {
          v17 = &this[v16 > 1];
          v18 = (_DWORD *)(*(_QWORD *)(v2[65] + 24 * v10) + 8 * v14);
        }
        if (v18 == v17 || (*v18 & 0x80000000) == 0)
        {
          v19 = (4 * v15) | 2;
          if ((v16 & 1) != 0)
          {
            v21 = v16 & 0xFFFFFFFFFFFFFFFELL;
            v22 = *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFFELL);
            v23 = *(unsigned int *)((v16 & 0xFFFFFFFFFFFFFFFELL) + 8);
            if ((_DWORD *)(v22 + 8 * v23) == v18)
              goto LABEL_40;
            if (v23 >= *(_DWORD *)(v21 + 12))
            {
              this = llvm::SmallVectorBase<unsigned int>::grow_pod(v21, v21 + 16, v23 + 1, 8);
              v24 = *(_QWORD *)v21;
              v23 = *(unsigned int *)(v21 + 8);
            }
            else
            {
              v24 = *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFFELL);
            }
            v25 = (uint64_t *)(v24 + 8 * (((uint64_t)v18 - v22) >> 3));
            v26 = (_QWORD *)(v24 + 8 * v23);
            *v26 = *(v26 - 1);
            if (v26 - 1 != v25)
            {
              this = memmove(v25 + 1, v25, (char *)(v26 - 1) - (char *)v25);
              LODWORD(v23) = *(_DWORD *)(v21 + 8);
            }
            *(_DWORD *)(v21 + 8) = v23 + 1;
            *v25 = v19;
          }
          else
          {
            if (&this[v16 > 1] != (_QWORD *)v18)
            {
              v20 = v16 & 0xFFFFFFFFFFFFFFFELL;
              *this = v19;
              goto LABEL_41;
            }
LABEL_40:
            v20 = (4 * v15) | 2;
LABEL_41:
            this = (_QWORD *)sub_1C5224ED4((uint64_t)this, v20);
          }
          v11 = v2[47];
LABEL_43:
          v27 = *(_QWORD *)(v11 + 24 * v10);
          if (*(_DWORD *)(v27 + 4 * v14) < (int)v15 - v29)
            *(_DWORD *)(v27 + 4 * v14) = v15 - v29;
          goto LABEL_47;
        }
        if ((int)v15 > (int)*v18 >> 2)
        {
          *(_QWORD *)v18 = (4 * v15) | 2;
          goto LABEL_43;
        }
      }
LABEL_47:
      v13 = v14 + 1;
      if ((_DWORD)v14 + 1 == *((_DWORD *)v2 + 86))
        goto LABEL_50;
    }
  }
  return this;
}

const void **llvm::ReachingDefAnalysis::processBasicBlock(llvm::ReachingDefAnalysis *this, uint64_t a2)
{
  llvm::MachineBasicBlock *v3;
  char *v4;
  uint64_t v5;
  int v6;
  int v9;

  v3 = *(llvm::MachineBasicBlock **)a2;
  if (!*(_BYTE *)(a2 + 8))
    return (const void **)llvm::ReachingDefAnalysis::reprocessBasicBlock(this, *(llvm::MachineBasicBlock **)a2);
  llvm::ReachingDefAnalysis::enterBasicBlock(this, *(llvm::MachineBasicBlock **)a2);
  v4 = (char *)v3 + 48;
  v5 = *((_QWORD *)v3 + 7);
  if ((llvm::MachineBasicBlock *)v5 != (llvm::MachineBasicBlock *)((char *)v3 + 48))
  {
    while (1)
    {
      v6 = **(unsigned __int16 **)(v5 + 16);
      if ((v6 - 13) >= 5 && v6 != 23)
        break;
      v5 = *(_QWORD *)(v5 + 8);
      if ((char *)v5 == v4)
        return llvm::ReachingDefAnalysis::leaveBasicBlock((const void **)this, v3);
    }
  }
LABEL_17:
  if ((char *)v5 != v4)
  {
    llvm::ReachingDefAnalysis::processDefs(this, (llvm::MachineInstr *)v5);
    while (1)
    {
      v5 = *(_QWORD *)(v5 + 8);
      if ((char *)v5 == v4)
        break;
      v9 = **(unsigned __int16 **)(v5 + 16);
      if ((v9 - 13) >= 5 && v9 != 23)
        goto LABEL_17;
    }
  }
  return llvm::ReachingDefAnalysis::leaveBasicBlock((const void **)this, v3);
}

uint64_t llvm::ReachingDefAnalysis::runOnMachineFunction(llvm::ReachingDefAnalysis *this, llvm::MachineFunction *a2)
{
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v8;

  *((_QWORD *)this + 31) = a2;
  *((_QWORD *)this + 32) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 176))(*((_QWORD *)a2 + 2));
  llvm::ReachingDefAnalysis::init(this);
  v3 = *((unsigned int *)this + 68);
  if ((_DWORD)v3)
  {
    v4 = (__int128 *)*((_QWORD *)this + 33);
    v5 = 16 * v3;
    do
    {
      v6 = *v4++;
      v8 = v6;
      llvm::ReachingDefAnalysis::processBasicBlock(this, (uint64_t)&v8);
      v5 -= 16;
    }
    while (v5);
  }
  return 0;
}

void llvm::ReachingDefAnalysis::init(llvm::ReachingDefAnalysis *this)
{
  llvm::MachineFunction *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char **v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  char **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  void *v31;
  int v32;
  void **v33;
  _BYTE *v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  void *__src;
  uint64_t v39;
  _BYTE v40[64];
  void *v41[2];
  _QWORD v42[9];

  v42[8] = *MEMORY[0x1E0C80C00];
  v2 = (llvm::MachineFunction *)*((_QWORD *)this + 31);
  *((_DWORD *)this + 86) = *(_DWORD *)(*((_QWORD *)this + 32) + 44);
  v3 = (*((_QWORD *)v2 + 14) - *((_QWORD *)v2 + 13)) >> 3;
  v4 = v3;
  v5 = *((unsigned int *)this + 132);
  if (v3 != v5)
  {
    v6 = (char **)((char *)this + 520);
    if (v3 >= v5)
    {
      if (v3 > (unint64_t)*((unsigned int *)this + 133))
      {
        __src = 0;
        v10 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)this + 520, v3, 24, (unint64_t *)&__src);
        v11 = (char *)*((_QWORD *)this + 65);
        v12 = *((unsigned int *)this + 132);
        if ((_DWORD)v12)
        {
          v13 = &v11[24 * v12];
          v14 = v10;
          do
          {
            *v14 = 0;
            v14[1] = 0;
            v14[2] = 0;
            *(_OWORD *)v14 = *(_OWORD *)v11;
            v14[2] = *((_QWORD *)v11 + 2);
            *(_QWORD *)v11 = 0;
            *((_QWORD *)v11 + 1) = 0;
            *((_QWORD *)v11 + 2) = 0;
            v11 += 24;
            v14 += 3;
          }
          while (v11 != v13);
          v15 = 24 * v12;
          v16 = (uint64_t)(*v6 - 24);
          do
          {
            v41[0] = (void *)(v16 + v15);
            sub_1C52284A0((void ***)v41);
            v15 -= 24;
          }
          while (v15);
          v11 = *v6;
        }
        v17 = (int)__src;
        if (v11 != (char *)this + 536)
          free(v11);
        *((_QWORD *)this + 65) = v10;
        *((_DWORD *)this + 133) = v17;
        v5 = *((unsigned int *)this + 132);
      }
      if (v3 != v5)
        bzero(&(*v6)[24 * v5], 24 * ((24 * (v3 - v5) - 24) / 0x18) + 24);
    }
    else
    {
      v7 = 3 * v5;
      v8 = 24 * v3 - 8 * v7;
      v9 = &(*v6)[8 * v7 - 24];
      do
      {
        v41[0] = v9;
        sub_1C52284A0((void ***)v41);
        v9 -= 24;
        v8 += 24;
      }
      while (v8);
    }
    *((_DWORD *)this + 132) = v3;
    v2 = (llvm::MachineFunction *)*((_QWORD *)this + 31);
    v3 = (*((_QWORD *)v2 + 14) - *((_QWORD *)v2 + 13)) >> 3;
    v4 = v3;
  }
  v18 = *((unsigned int *)this + 96);
  if (v4 != v18)
  {
    v19 = (char **)((char *)this + 376);
    if (v4 >= v18)
    {
      if (v4 > *((unsigned int *)this + 97))
      {
        v41[0] = 0;
        v24 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)this + 376, v4, 24, (unint64_t *)v41);
        v25 = (char *)*((_QWORD *)this + 47);
        v26 = *((unsigned int *)this + 96);
        if ((_DWORD)v26)
        {
          v27 = &v25[24 * v26];
          v28 = v24;
          do
          {
            *v28 = 0;
            v28[1] = 0;
            v28[2] = 0;
            *(_OWORD *)v28 = *(_OWORD *)v25;
            v28[2] = *((_QWORD *)v25 + 2);
            *(_QWORD *)v25 = 0;
            *((_QWORD *)v25 + 1) = 0;
            *((_QWORD *)v25 + 2) = 0;
            v25 += 24;
            v28 += 3;
          }
          while (v25 != v27);
          v29 = *v19;
          v30 = 24 * v26;
          do
          {
            v31 = *(void **)&v29[v30 - 24];
            if (v31)
            {
              *(_QWORD *)&v29[v30 - 16] = v31;
              operator delete(v31);
            }
            v30 -= 24;
          }
          while (v30);
          v25 = *v19;
        }
        v32 = (int)v41[0];
        if (v25 != (char *)this + 392)
          free(v25);
        *((_QWORD *)this + 47) = v24;
        *((_DWORD *)this + 97) = v32;
        v18 = *((unsigned int *)this + 96);
      }
      if (v4 != v18)
        bzero(&(*v19)[24 * v18], 24 * ((24 * (v4 - v18) - 24) / 0x18) + 24);
    }
    else
    {
      v20 = 3 * v18;
      v21 = (uint64_t)&(*v19)[8 * v20 - 24];
      v22 = 24 * v4 - 8 * v20;
      do
      {
        v23 = *(void **)v21;
        if (*(_QWORD *)v21)
        {
          *(_QWORD *)(v21 + 8) = v23;
          operator delete(v23);
        }
        v21 -= 24;
        v22 += 24;
      }
      while (v22);
    }
    *((_DWORD *)this + 96) = v3;
    v2 = (llvm::MachineFunction *)*((_QWORD *)this + 31);
  }
  v41[0] = v42;
  v41[1] = (void *)0x400000000;
  llvm::LoopTraversal::traverse((llvm::LoopTraversal *)v41, v2, (uint64_t)&__src);
  v33 = (void **)((char *)this + 264);
  v34 = __src;
  if ((void **)((char *)this + 264) != &__src)
  {
    if (__src != v40)
    {
      v35 = (char *)*((_QWORD *)this + 33);
      if (v35 != (char *)this + 280)
      {
        free(v35);
        v34 = __src;
      }
      *((_QWORD *)this + 33) = v34;
      *((_QWORD *)this + 34) = v39;
      __src = v40;
      HIDWORD(v39) = 0;
      goto LABEL_57;
    }
    v36 = v39;
    v37 = *((unsigned int *)this + 68);
    if (v37 >= v39)
    {
      if ((_DWORD)v39)
        memmove(*v33, __src, 16 * v39 - 6);
      goto LABEL_56;
    }
    if (*((_DWORD *)this + 69) >= v39)
    {
      if ((_DWORD)v37)
      {
        memmove(*v33, __src, 16 * v37 - 6);
        goto LABEL_54;
      }
    }
    else
    {
      *((_DWORD *)this + 68) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 264, (uint64_t)this + 280, v36, 16);
    }
    v37 = 0;
LABEL_54:
    if (v37 != v39)
      memcpy((char *)*v33 + 16 * v37, (char *)__src + 16 * v37, 16 * v39 - 16 * v37);
LABEL_56:
    *((_DWORD *)this + 68) = v36;
LABEL_57:
    LODWORD(v39) = 0;
    v34 = __src;
  }
  if (v34 != v40)
    free(v34);
  if (v41[0] != v42)
    free(v41[0]);
}

const void **llvm::ReachingDefAnalysis::traverse(const void **this)
{
  uint64_t v1;
  llvm::ReachingDefAnalysis *v2;
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v1 = *((unsigned int *)this + 68);
  if ((_DWORD)v1)
  {
    v2 = (llvm::ReachingDefAnalysis *)this;
    v3 = (__int128 *)this[33];
    v4 = 16 * v1;
    do
    {
      v5 = *v3++;
      v6 = v5;
      this = llvm::ReachingDefAnalysis::processBasicBlock(v2, (uint64_t)&v6);
      v4 -= 16;
    }
    while (v4);
  }
  return this;
}

void llvm::ReachingDefAnalysis::releaseMemory(llvm::ReachingDefAnalysis *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;

  v2 = *((unsigned int *)this + 96);
  if ((_DWORD)v2)
  {
    v3 = *((_QWORD *)this + 47);
    v4 = 24 * v2;
    do
    {
      v5 = *(void **)(v3 + v4 - 24);
      if (v5)
      {
        *(_QWORD *)(v3 + v4 - 16) = v5;
        operator delete(v5);
      }
      v4 -= 24;
    }
    while (v4);
  }
  *((_DWORD *)this + 96) = 0;
  v6 = *((unsigned int *)this + 132);
  if ((_DWORD)v6)
  {
    v7 = 24 * v6;
    v8 = *((_QWORD *)this + 65) - 24;
    do
    {
      v23 = (void **)(v8 + v7);
      sub_1C52284A0(&v23);
      v7 -= 24;
    }
    while (v7);
  }
  *((_DWORD *)this + 132) = 0;
  v9 = (_QWORD *)((char *)this + 496);
  v10 = *((_DWORD *)this + 126);
  if (v10)
  {
    v11 = *((_DWORD *)this + 128);
    if (v11 > 4 * v10 && v11 >= 0x41)
    {
      v12 = 1 << (33 - __clz(v10 - 1));
      if (v12 <= 64)
        v13 = 64;
      else
        v13 = v12;
LABEL_18:
      if (v13 == v11)
      {
        *((_QWORD *)this + 63) = 0;
        v14 = 16 * v11;
        v15 = (_QWORD *)*((_QWORD *)this + 62);
        do
        {
          *v15 = -4096;
          v15 += 2;
          v14 -= 16;
        }
        while (v14);
      }
      else
      {
        MEMORY[0x1CAA32FB4](*v9, 8);
        if (v13)
        {
          v18 = (4 * v13 / 3u + 1) | ((unint64_t)(4 * v13 / 3u + 1) >> 1);
          v19 = v18 | (v18 >> 2) | ((v18 | (v18 >> 2)) >> 4);
          LODWORD(v19) = (((v19 | (v19 >> 8)) >> 16) | v19 | (v19 >> 8)) + 1;
          *((_DWORD *)this + 128) = v19;
          v20 = operator new(16 * v19, (std::align_val_t)8uLL);
          *((_QWORD *)this + 62) = v20;
          *((_QWORD *)this + 63) = 0;
          v21 = *((unsigned int *)this + 128);
          if ((_DWORD)v21)
          {
            v22 = 16 * v21;
            do
            {
              *v20 = -4096;
              v20 += 2;
              v22 -= 16;
            }
            while (v22);
          }
        }
        else
        {
          *v9 = 0;
          *((_QWORD *)this + 63) = 0;
          *((_DWORD *)this + 128) = 0;
        }
      }
      goto LABEL_26;
    }
  }
  else
  {
    if (!*((_DWORD *)this + 127))
      goto LABEL_26;
    v11 = *((_DWORD *)this + 128);
    if (v11 > 0x40)
    {
      v13 = 0;
      goto LABEL_18;
    }
  }
  if (v11)
  {
    v16 = (_QWORD *)*v9;
    v17 = 16 * v11;
    do
    {
      *v16 = -4096;
      v16 += 2;
      v17 -= 16;
    }
    while (v17);
  }
  *((_QWORD *)this + 63) = 0;
LABEL_26:
  *((_QWORD *)this + 45) = *((_QWORD *)this + 44);
}

void llvm::ReachingDefAnalysis::reset(__int128 **this)
{
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  (*((void (**)(__int128 **))*this + 11))(this);
  llvm::ReachingDefAnalysis::init((llvm::ReachingDefAnalysis *)this);
  v2 = *((unsigned int *)this + 68);
  if ((_DWORD)v2)
  {
    v3 = this[33];
    v4 = 16 * v2;
    do
    {
      v5 = *v3++;
      v6 = v5;
      llvm::ReachingDefAnalysis::processBasicBlock((llvm::ReachingDefAnalysis *)this, (uint64_t)&v6);
      v4 -= 16;
    }
    while (v4);
  }
}

uint64_t llvm::ReachingDefAnalysis::getReachingDef(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  _WORD *v11;
  unsigned __int16 v12;
  uint64_t result;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  v20 = 0;
  v21 = a2;
  if (sub_1C61252B8((uint64_t *)(a1 + 496), &v21, &v20))
    v6 = *(_DWORD *)(v20 + 8);
  else
    v6 = 0;
  v7 = *(_DWORD *)(a1 + 632);
  v8 = *(_QWORD *)(a1 + 256);
  if (v8)
    v9 = (_QWORD *)(v8 + 8);
  else
    v9 = 0;
  v10 = *(unsigned int *)(*v9 + 24 * a3 + 16);
  v11 = (_WORD *)(v9[6] + ((v10 >> 3) & 0x1FFFFFFE));
  v12 = *v11 + (v10 & 0xF) * a3;
  LODWORD(result) = *(_DWORD *)(a1 + 632);
  do
  {
    v14 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 520) + 24 * *(unsigned int *)(*(_QWORD *)(a2 + 24) + 24))
                             + 8 * v12);
    v15 = *v14;
    if ((*v14 & 1) != 0)
    {
      v17 = v15 & 0xFFFFFFFFFFFFFFFELL;
      v14 = *(unint64_t **)v17;
      v16 = *(_QWORD *)v17 + 8 * *(unsigned int *)(v17 + 8);
    }
    else
    {
      v16 = (uint64_t)&v14[v15 > 1];
    }
    while (v14 != (unint64_t *)v16)
    {
      v18 = *(int *)v14 >> 2;
      if (v18 >= v6)
        break;
      ++v14;
      v7 = v18;
    }
    if ((int)result <= v7)
      result = v7;
    else
      result = result;
    v19 = (unsigned __int16)v11[1];
    ++v11;
    v12 += v19;
  }
  while (v19);
  return result;
}

uint64_t llvm::ReachingDefAnalysis::getReachingLocalMIDef(llvm::ReachingDefAnalysis *a1, uint64_t a2, unsigned int a3)
{
  llvm::MachineBasicBlock *v6;
  int ReachingDef;

  if ((llvm::ReachingDefAnalysis::getReachingDef((uint64_t)a1, a2, a3) & 0x80000000) != 0)
    return 0;
  v6 = *(llvm::MachineBasicBlock **)(a2 + 24);
  ReachingDef = llvm::ReachingDefAnalysis::getReachingDef((uint64_t)a1, a2, a3);
  return llvm::ReachingDefAnalysis::getInstFromId(a1, v6, ReachingDef);
}

BOOL llvm::ReachingDefAnalysis::hasLocalDefBefore(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (int)llvm::ReachingDefAnalysis::getReachingDef(a1, a2, a3) >= 0;
}

uint64_t llvm::ReachingDefAnalysis::getInstFromId(llvm::ReachingDefAnalysis *this, llvm::MachineBasicBlock *a2, int a3)
{
  char *v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  if (a3 < 0)
    return 0;
  v3 = (char *)a2 + 48;
  v4 = *((_QWORD *)a2 + 7);
  if ((llvm::MachineBasicBlock *)v4 == (llvm::MachineBasicBlock *)((char *)a2 + 48))
    return 0;
  v7 = (uint64_t *)((char *)this + 496);
  while (1)
  {
    v12 = 0;
    v13 = v4;
    if (sub_1C61252B8(v7, &v13, &v12))
    {
      v8 = v12;
      v9 = *((_QWORD *)this + 62);
      v10 = *((unsigned int *)this + 128);
    }
    else
    {
      v9 = *((_QWORD *)this + 62);
      v10 = *((unsigned int *)this + 128);
      v8 = v9 + 16 * v10;
    }
    if (v8 != v9 + 16 * v10 && *(_DWORD *)(v8 + 8) == a3)
      break;
    if (!v4 || (*(_BYTE *)v4 & 4) == 0)
    {
      while ((*(_WORD *)(v4 + 44) & 8) != 0)
        v4 = *(_QWORD *)(v4 + 8);
    }
    v4 = *(_QWORD *)(v4 + 8);
    if ((char *)v4 == v3)
      return 0;
  }
  return v4;
}

BOOL llvm::ReachingDefAnalysis::hasSameReachingDef(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int ReachingDef;

  if (*(_QWORD *)(a2 + 24) != *(_QWORD *)(a3 + 24))
    return 0;
  ReachingDef = llvm::ReachingDefAnalysis::getReachingDef(a1, a2, a4);
  return ReachingDef == llvm::ReachingDefAnalysis::getReachingDef(a1, a3, a4);
}

uint64_t llvm::ReachingDefAnalysis::getClearance(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = a2;
  if (sub_1C61252B8((uint64_t *)(a1 + 496), &v9, &v8))
    v6 = *(_DWORD *)(v8 + 8);
  else
    v6 = 0;
  return v6 - llvm::ReachingDefAnalysis::getReachingDef(a1, a2, a3);
}

uint64_t llvm::ReachingDefAnalysis::getReachingLocalUses(uint64_t result, uint64_t a2, unsigned int a3, llvm::SmallPtrSetImplBase *a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = (uint64_t *)result;
  v7 = *(_QWORD *)(a2 + 24) + 48;
  v9 = a2;
  while (1)
  {
LABEL_2:
    if (!v9 || (*(_BYTE *)v9 & 4) == 0)
    {
      while ((*(_WORD *)(v9 + 44) & 8) != 0)
        v9 = *(_QWORD *)(v9 + 8);
    }
    v9 = *(_QWORD *)(v9 + 8);
    if (v9 == v7)
      return result;
    if (**(unsigned __int16 **)(v9 + 16) - 13 >= 5)
    {
      result = llvm::ReachingDefAnalysis::getReachingLocalMIDef((llvm::ReachingDefAnalysis *)v6, v9, a3);
      if (result != a2)
        return result;
      v10 = *(unsigned int *)(v9 + 40);
      if ((_DWORD)v10)
      {
        v11 = *(_QWORD *)(v9 + 32);
        v12 = 32 * v10;
        while (1)
        {
          result = sub_1C52261E0(*(_DWORD *)v11, *(_DWORD *)(v11 + 4), a3, v6[32]);
          if ((_DWORD)result)
          {
            result = (uint64_t)sub_1C4774094(a4, v9);
            if (((*(_DWORD *)v11 >> 26) & ~HIBYTE(*(_DWORD *)v11) & 1) != 0)
              return result;
          }
          v11 += 32;
          v12 -= 32;
          if (!v12)
            goto LABEL_2;
        }
      }
    }
  }
}

BOOL sub_1C52261E0(int a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  _BOOL8 result;

  if ((a1 & 0x10000FF) != 0 || a2 == 0)
    return 0;
  if (a3 == a2)
    return 1;
  result = 0;
  if (!(a2 >> 30) && a3 - 1 <= 0x3FFFFFFE)
    return llvm::MCRegisterInfo::regsOverlap((_QWORD *)(a4 + 8), a2, a3);
  return result;
}

uint64_t llvm::ReachingDefAnalysis::getLiveInUses(uint64_t a1, llvm::MachineBasicBlock *this, unsigned int a3, llvm::SmallPtrSetImplBase *a4)
{
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v17;
  uint64_t LastNonDebugInstr;

  v8 = (char *)this + 48;
  v9 = *((_QWORD *)this + 7);
  if ((llvm::MachineBasicBlock *)v9 != (llvm::MachineBasicBlock *)((char *)this + 48))
  {
    while (1)
    {
      v10 = **(unsigned __int16 **)(v9 + 16);
      if ((v10 - 13) >= 5 && v10 != 23)
        break;
      v9 = *(_QWORD *)(v9 + 8);
      if ((char *)v9 == v8)
        goto LABEL_22;
    }
  }
  if ((char *)v9 != v8)
  {
LABEL_10:
    v12 = *(unsigned int *)(v9 + 40);
    if (!(_DWORD)v12)
      goto LABEL_16;
    v13 = *(_QWORD *)(v9 + 32);
    v14 = v13 + 32 * v12;
    do
    {
      if (sub_1C52261E0(*(_DWORD *)v13, *(_DWORD *)(v13 + 4), a3, *(_QWORD *)(a1 + 256)))
      {
        if ((llvm::ReachingDefAnalysis::getReachingDef(a1, v9, a3) & 0x80000000) == 0)
          return 0;
        sub_1C4774094(a4, v9);
      }
      v13 += 32;
    }
    while (v13 != v14);
LABEL_16:
    while (1)
    {
      v9 = *(_QWORD *)(v9 + 8);
      if ((char *)v9 == v8)
        break;
      v15 = **(unsigned __int16 **)(v9 + 16);
      if ((v15 - 13) >= 5 && v15 != 23)
      {
        if ((char *)v9 != v8)
          goto LABEL_10;
        break;
      }
    }
  }
LABEL_22:
  v17 = 1;
  LastNonDebugInstr = llvm::MachineBasicBlock::getLastNonDebugInstr(this, 1);
  if (v8 == (char *)LastNonDebugInstr)
    return v17;
  else
    return llvm::ReachingDefAnalysis::isReachingDefLiveOut(a1, LastNonDebugInstr, a3);
}

uint64_t llvm::ReachingDefAnalysis::isReachingDefLiveOut(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *v9;
  uint64_t LastNonDebugInstr;
  int ReachingDef;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v19;
  void *v20;
  __int128 v21;
  _BYTE v22[16];
  void *v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 256);
  v19 = v7;
  v20 = v22;
  v21 = xmmword_1C6464ED0;
  v23 = 0;
  v24 = 0;
  v8 = *(_DWORD *)(v7 + 16);
  if (v8)
  {
    v9 = malloc_type_calloc(*(unsigned int *)(v7 + 16), 1uLL, 0x6D9A4F0CuLL);
    if (!v9)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v23 = v9;
    v24 = v8;
  }
  llvm::LivePhysRegs::addLiveOuts((llvm::LivePhysRegs *)&v19, (const llvm::MachineFunction **)v6);
  if ((llvm::LivePhysRegs::available((llvm::LivePhysRegs *)&v19, *(const llvm::MachineRegisterInfo **)(*(_QWORD *)(v6 + 32) + 40), (unsigned __int16)a3) & 1) == 0&& ((LastNonDebugInstr = llvm::MachineBasicBlock::getLastNonDebugInstr((llvm::MachineBasicBlock *)v6, 1), ReachingDef = llvm::ReachingDefAnalysis::getReachingDef(a1, a2, a3), v6 + 48 == LastNonDebugInstr)|| llvm::ReachingDefAnalysis::getReachingDef(a1, LastNonDebugInstr, a3) == ReachingDef))
  {
    v12 = *(unsigned int *)(LastNonDebugInstr + 40);
    if ((_DWORD)v12)
    {
      v13 = *(_QWORD *)(LastNonDebugInstr + 32);
      v14 = v13 + 32 * v12;
      v15 = *(_QWORD *)(a1 + 256);
      do
      {
        v16 = sub_1C5227004(*(_DWORD *)v13, *(_DWORD *)(v13 + 4), a3, v15);
        if (v16)
          break;
        v13 += 32;
      }
      while (v13 != v14);
      v17 = !v16;
    }
    else
    {
      v17 = 1;
    }
  }
  else
  {
    v17 = 0;
  }
  free(v23);
  if (v20 != v22)
    free(v20);
  return v17;
}

void llvm::ReachingDefAnalysis::getGlobalUses(llvm::ReachingDefAnalysis *a1, uint64_t a2, unsigned int a3, llvm::SmallPtrSetImplBase *a4)
{
  unsigned __int16 v5;
  uint64_t v8;
  uint64_t LocalLiveOutMIDef;
  BOOL v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  unsigned __int16 *i;
  char *v25;
  char *v26;
  uint64_t v27;
  int v28;
  _BYTE v29[32];
  void *v30;
  uint64_t v31;
  _QWORD v32[5];

  v5 = a3;
  v32[4] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a2 + 24);
  llvm::ReachingDefAnalysis::getReachingLocalUses((uint64_t)a1, a2, a3, a4);
  LocalLiveOutMIDef = llvm::ReachingDefAnalysis::getLocalLiveOutMIDef(a1, *(_QWORD *)(a2 + 24), a3);
  if (LocalLiveOutMIDef)
    v11 = LocalLiveOutMIDef == a2;
  else
    v11 = 0;
  if (v11)
  {
    v12 = *(char **)(v8 + 88);
    v13 = *(char **)(v8 + 96);
    v30 = v32;
    v31 = 0x400000000;
    v14 = v13 - v12;
    if ((unint64_t)(v13 - v12) >= 0x21)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v30, (uint64_t)v32, v14 >> 3, 8);
      v15 = v31;
      v16 = v31;
    }
    else
    {
      v15 = 0;
      v16 = 0;
    }
    if (v12 != v13)
    {
      v17 = (char *)v30 + 8 * v15;
      do
      {
        v18 = *(_QWORD *)v12;
        v12 += 8;
        *v17++ = v18;
      }
      while (v12 != v13);
    }
    v25 = v29;
    v26 = v29;
    v27 = 4;
    v28 = 0;
    v19 = v16 + ((unint64_t)v14 >> 3);
    LODWORD(v31) = v19;
    if (v19)
    {
      v20 = v5;
      do
      {
        v21 = *((_QWORD *)v30 + v19 - 1);
        LODWORD(v31) = v19 - 1;
        v22 = (char *)sub_1C477672C((uint64_t)&v25, v21);
        if (v26 == v25)
          v23 = (uint64_t *)((char *)&v27 + 4);
        else
          v23 = &v27;
        if (v22 == &v26[8 * *(unsigned int *)v23])
        {
          for (i = *(unsigned __int16 **)(v21 + 152); i != *(unsigned __int16 **)(v21 + 160); i += 8)
          {
            if (*i == v20)
            {
              if (*((_QWORD *)i + 1))
              {
                if (llvm::ReachingDefAnalysis::getLiveInUses((uint64_t)a1, (llvm::MachineBasicBlock *)v21, a3, a4))sub_1C514C6DC((unsigned int *)&v30, (uint64_t)v30 + 8 * v31, *(char **)(v21 + 88), *(char **)(v21 + 96));
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v25, v21);
              }
              break;
            }
          }
        }
        v19 = v31;
      }
      while ((_DWORD)v31);
      if (v26 != v25)
        free(v26);
    }
    if (v30 != v32)
      free(v30);
  }
}

uint64_t llvm::ReachingDefAnalysis::getLocalLiveOutMIDef(llvm::ReachingDefAnalysis *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  void *v8;
  uint64_t LastNonDebugInstr;
  uint64_t InstFromId;
  unsigned int v11;
  int ReachingDef;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  void *v19;
  __int128 v20;
  _BYTE v21[16];
  void *v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)a1 + 32);
  v18 = v6;
  v19 = v21;
  v20 = xmmword_1C6464ED0;
  v22 = 0;
  v23 = 0;
  v7 = *(_DWORD *)(v6 + 16);
  if (v7)
  {
    v8 = malloc_type_calloc(*(unsigned int *)(v6 + 16), 1uLL, 0x6D9A4F0CuLL);
    if (!v8)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v22 = v8;
    v23 = v7;
  }
  llvm::LivePhysRegs::addLiveOuts((llvm::LivePhysRegs *)&v18, (const llvm::MachineFunction **)a2);
  if ((llvm::LivePhysRegs::available((llvm::LivePhysRegs *)&v18, *(const llvm::MachineRegisterInfo **)(*(_QWORD *)(a2 + 32) + 40), (unsigned __int16)a3) & 1) != 0|| (LastNonDebugInstr = llvm::MachineBasicBlock::getLastNonDebugInstr((llvm::MachineBasicBlock *)a2, 1), a2 + 48 == LastNonDebugInstr))
  {
LABEL_12:
    InstFromId = 0;
    goto LABEL_13;
  }
  InstFromId = LastNonDebugInstr;
  v11 = a3;
  ReachingDef = llvm::ReachingDefAnalysis::getReachingDef((uint64_t)a1, LastNonDebugInstr, a3);
  v13 = *(unsigned int *)(InstFromId + 40);
  if (!(_DWORD)v13)
  {
LABEL_10:
    if ((ReachingDef & 0x80000000) == 0)
    {
      InstFromId = llvm::ReachingDefAnalysis::getInstFromId(a1, (llvm::MachineBasicBlock *)a2, ReachingDef);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  v14 = *(_QWORD *)(InstFromId + 32);
  v15 = v14 + 32 * v13;
  v16 = *((_QWORD *)a1 + 32);
  while (!sub_1C5227004(*(_DWORD *)v14, *(_DWORD *)(v14 + 4), v11, v16))
  {
    v14 += 32;
    if (v14 == v15)
      goto LABEL_10;
  }
LABEL_13:
  free(v22);
  if (v19 != v21)
    free(v19);
  return InstFromId;
}

void llvm::ReachingDefAnalysis::getGlobalReachingDefs(uint64_t *a1, uint64_t a2, unsigned int a3, llvm::SmallPtrSetImplBase *a4)
{
  uint64_t UniqueReachingMIDef;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;

  UniqueReachingMIDef = llvm::ReachingDefAnalysis::getUniqueReachingMIDef(a1, a2, a3);
  if (UniqueReachingMIDef)
  {
    sub_1C4774094(a4, UniqueReachingMIDef);
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 24);
    v10 = *(uint64_t **)(v9 + 64);
    v11 = *(uint64_t **)(v9 + 72);
    while (v10 != v11)
    {
      v12 = *v10++;
      llvm::ReachingDefAnalysis::getLiveOuts((llvm::ReachingDefAnalysis *)a1, v12, a3, a4);
    }
  }
}

uint64_t llvm::ReachingDefAnalysis::getUniqueReachingMIDef(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t ReachingLocalMIDef;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v22;
  int v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  _BYTE v28[16];
  uint64_t v29;

  ReachingLocalMIDef = llvm::ReachingDefAnalysis::getReachingLocalMIDef((llvm::ReachingDefAnalysis *)a1, a2, a3);
  if (!ReachingLocalMIDef
    || ((v20 = ReachingLocalMIDef,
         v24 = (uint64_t *)ReachingLocalMIDef,
         v29 = 0,
         !sub_1C61252B8(a1 + 62, &v24, &v29))
      ? (v22 = 0)
      : (v22 = *(_DWORD *)(v29 + 8)),
        (v24 = (uint64_t *)a2, v29 = 0, !sub_1C61252B8(a1 + 62, &v24, &v29))
      ? (v23 = 0)
      : (v23 = *(_DWORD *)(v29 + 8)),
        v22 >= v23))
  {
    v7 = (uint64_t *)v28;
    v24 = (uint64_t *)v28;
    v25 = (uint64_t *)v28;
    v26 = 2;
    v27 = 0;
    v8 = *(_QWORD *)(a2 + 24);
    v9 = *(uint64_t **)(v8 + 64);
    v10 = *(uint64_t **)(v8 + 72);
    if (v9 == v10)
    {
      v13 = 0;
      LODWORD(v12) = 0;
      v14 = (uint64_t *)v28;
    }
    else
    {
      do
      {
        v11 = *v9++;
        llvm::ReachingDefAnalysis::getLiveOuts((llvm::ReachingDefAnalysis *)a1, v11, a3, (llvm::SmallPtrSetImplBase *)&v24);
      }
      while (v9 != v10);
      LODWORD(v12) = HIDWORD(v26);
      v13 = v27;
      v7 = v24;
      v14 = v25;
    }
    if ((_DWORD)v12 - v13 == 1)
    {
      if (v14 == v7)
        v12 = v12;
      else
        v12 = v26;
      if ((_DWORD)v12)
      {
        v15 = 8 * v12;
        v16 = 8 * v12;
        v17 = v14;
        while (1)
        {
          v18 = *v17;
          if ((unint64_t)*v17 < 0xFFFFFFFFFFFFFFFELL)
            break;
          ++v17;
          v16 -= 8;
          if (!v16)
          {
            v18 = v14[v12];
            break;
          }
        }
        if (*(_QWORD *)(v18 + 24) != v8)
        {
          v19 = v14;
          while (1)
          {
            v20 = *v19;
            if ((unint64_t)*v19 < 0xFFFFFFFFFFFFFFFELL)
              goto LABEL_22;
            ++v19;
            v15 -= 8;
            if (!v15)
            {
              v20 = v14[v12];
              goto LABEL_22;
            }
          }
        }
      }
      else
      {
        v20 = *v14;
        if (*(_QWORD *)(*v14 + 24) != v8)
          goto LABEL_22;
      }
    }
    v20 = 0;
LABEL_22:
    if (v14 != v7)
      free(v14);
  }
  return v20;
}

void llvm::ReachingDefAnalysis::getLiveOuts(llvm::ReachingDefAnalysis *a1, uint64_t a2, unsigned int a3, llvm::SmallPtrSetImplBase *a4)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  int v7;
  _BYTE v8[16];

  v4 = v8;
  v5 = v8;
  v6 = 2;
  v7 = 0;
  llvm::ReachingDefAnalysis::getLiveOuts(a1, a2, a3, a4, (unsigned int *)&v4);
  if (v5 != v4)
    free(v5);
}

void llvm::ReachingDefAnalysis::getLiveOuts(llvm::ReachingDefAnalysis *a1, uint64_t a2, unsigned int a3, llvm::SmallPtrSetImplBase *a4, unsigned int *a5)
{
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  int v14;
  void *v15;
  uint64_t LocalLiveOutMIDef;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  __int128 v22;
  _BYTE v23[16];
  void *v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v10 = sub_1C477672C((uint64_t)a5, a2);
  v11 = *((_QWORD *)a5 + 1);
  if (v11 == *(_QWORD *)a5)
    v12 = a5 + 5;
  else
    v12 = a5 + 4;
  if (v10 == (_QWORD *)(v11 + 8 * *v12))
  {
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a5, a2);
    v13 = *((_QWORD *)a1 + 32);
    v20 = v13;
    v21 = v23;
    v22 = xmmword_1C6464ED0;
    v24 = 0;
    v25 = 0;
    v14 = *(_DWORD *)(v13 + 16);
    if (v14)
    {
      v15 = malloc_type_calloc(*(unsigned int *)(v13 + 16), 1uLL, 0x6D9A4F0CuLL);
      if (!v15)
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      v24 = v15;
      v25 = v14;
    }
    llvm::LivePhysRegs::addLiveOuts((llvm::LivePhysRegs *)&v20, (const llvm::MachineFunction **)a2);
    if ((llvm::LivePhysRegs::available((llvm::LivePhysRegs *)&v20, *(const llvm::MachineRegisterInfo **)(*(_QWORD *)(a2 + 32) + 40), (unsigned __int16)a3) & 1) == 0)
    {
      LocalLiveOutMIDef = llvm::ReachingDefAnalysis::getLocalLiveOutMIDef(a1, a2, a3);
      if (LocalLiveOutMIDef)
      {
        sub_1C4774094(a4, LocalLiveOutMIDef);
      }
      else
      {
        v18 = *(uint64_t **)(a2 + 64);
        v17 = *(uint64_t **)(a2 + 72);
        while (v18 != v17)
        {
          v19 = *v18++;
          llvm::ReachingDefAnalysis::getLiveOuts(a1, v19, a3, a4, a5);
        }
      }
    }
    free(v24);
    if (v21 != v23)
      free(v21);
  }
}

uint64_t llvm::ReachingDefAnalysis::getMIOperand(llvm::ReachingDefAnalysis *this, llvm::MachineInstr *a2, unsigned int a3)
{
  return llvm::ReachingDefAnalysis::getUniqueReachingMIDef((uint64_t *)this, (uint64_t)a2, *(_DWORD *)(*((_QWORD *)a2 + 4) + 32 * a3 + 4));
}

uint64_t llvm::ReachingDefAnalysis::getMIOperand(llvm::ReachingDefAnalysis *this, llvm::MachineInstr *a2, llvm::MachineOperand *a3)
{
  return llvm::ReachingDefAnalysis::getUniqueReachingMIDef((uint64_t *)this, (uint64_t)a2, *((_DWORD *)a3 + 1));
}

BOOL llvm::ReachingDefAnalysis::isRegUsedAfter(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *v9;
  unsigned __int16 *i;
  unsigned __int16 **v11;
  unsigned __int16 **v12;
  int v13;
  _BOOL8 v15;
  int v16;
  uint64_t *v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned __int16 **v23;
  uint64_t v24;
  void *v25;
  __int128 v26;
  _BYTE v27[16];
  void *v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 256);
  v24 = v7;
  v25 = v27;
  v26 = xmmword_1C6464ED0;
  v28 = 0;
  v29 = 0;
  v8 = *(_DWORD *)(v7 + 16);
  if (v8)
  {
    v9 = malloc_type_calloc(*(unsigned int *)(v7 + 16), 1uLL, 0x6D9A4F0CuLL);
    if (!v9)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v28 = v9;
    v29 = v8;
  }
  llvm::LivePhysRegs::addLiveOuts((llvm::LivePhysRegs *)&v24, (const llvm::MachineFunction **)v6);
  if (llvm::LivePhysRegs::available((llvm::LivePhysRegs *)&v24, *(const llvm::MachineRegisterInfo **)(*(_QWORD *)(v6 + 32) + 40), a3))
  {
    v11 = (unsigned __int16 **)(v6 + 48);
    for (i = *(unsigned __int16 **)(v6 + 48); ; i = *v12)
    {
      v12 = (unsigned __int16 **)((unint64_t)i & 0xFFFFFFFFFFFFFFF8);
      if (v11 == (unsigned __int16 **)((unint64_t)i & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_26;
      v13 = *v12[2];
      if ((v13 - 13) >= 5 && v13 != 23)
        break;
    }
    if (v12 == v11)
    {
LABEL_26:
      v15 = 0;
      goto LABEL_27;
    }
    while (1)
    {
      llvm::LivePhysRegs::removeDefs((llvm::LivePhysRegs *)&v24, (const llvm::MachineInstr *)v12);
      llvm::LivePhysRegs::addUses((llvm::LivePhysRegs *)&v24, (const llvm::MachineInstr *)v12);
      if (!llvm::LivePhysRegs::available((llvm::LivePhysRegs *)&v24, *(const llvm::MachineRegisterInfo **)(*(_QWORD *)(v6 + 32) + 40), a3))break;
      v12 = (unsigned __int16 **)((unint64_t)*v12 & 0xFFFFFFFFFFFFFFF8);
      if (v11 == v12)
        goto LABEL_26;
      while (1)
      {
        v16 = *v12[2];
        v15 = 0;
        if ((v16 - 13) >= 5 && v16 != 23)
          break;
        v12 = (unsigned __int16 **)((unint64_t)*v12 & 0xFFFFFFFFFFFFFFF8);
        if (v11 == v12)
          goto LABEL_27;
      }
      if (v12 == v11)
        goto LABEL_27;
    }
    v19 = (uint64_t *)(a1 + 496);
    v22 = 0;
    v23 = v12;
    if (sub_1C61252B8((uint64_t *)(a1 + 496), &v23, &v22))
      v20 = *(_DWORD *)(v22 + 8);
    else
      v20 = 0;
    v22 = 0;
    v23 = (unsigned __int16 **)a2;
    if (sub_1C61252B8(v19, &v23, &v22))
      v21 = *(_DWORD *)(v22 + 8);
    else
      v21 = 0;
    v15 = v20 > v21;
  }
  else
  {
    v15 = 1;
  }
LABEL_27:
  free(v28);
  if (v25 != v27)
    free(v25);
  return v15;
}

uint64_t llvm::ReachingDefAnalysis::isRegDefinedAfter(llvm::ReachingDefAnalysis *a1, uint64_t a2, unsigned int a3)
{
  llvm::MachineBasicBlock *v6;
  uint64_t LastNonDebugInstr;
  uint64_t v8;
  int ReachingDef;
  uint64_t result;

  v6 = *(llvm::MachineBasicBlock **)(a2 + 24);
  LastNonDebugInstr = llvm::MachineBasicBlock::getLastNonDebugInstr(v6, 1);
  if ((llvm::MachineBasicBlock *)((char *)v6 + 48) != (llvm::MachineBasicBlock *)LastNonDebugInstr)
  {
    v8 = LastNonDebugInstr;
    ReachingDef = llvm::ReachingDefAnalysis::getReachingDef((uint64_t)a1, a2, a3);
    if (ReachingDef != llvm::ReachingDefAnalysis::getReachingDef((uint64_t)a1, v8, a3))
      return 1;
  }
  result = llvm::ReachingDefAnalysis::getLocalLiveOutMIDef(a1, (uint64_t)v6, a3);
  if (result)
    return result == llvm::ReachingDefAnalysis::getReachingLocalMIDef(a1, a2, a3);
  return result;
}

BOOL sub_1C5227004(int a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  _BOOL8 result;

  if ((a1 & 0x10000FF) != 0x1000000 || a2 == 0)
    return 0;
  if (a3 == a2)
    return 1;
  result = 0;
  if (!(a2 >> 30) && a3 - 1 <= 0x3FFFFFFE)
    return llvm::MCRegisterInfo::regsOverlap((_QWORD *)(a4 + 8), a2, a3);
  return result;
}

uint64_t llvm::ReachingDefAnalysis::isSafeToMoveForwards(llvm::ReachingDefAnalysis *this, llvm::MachineInstr *a2, llvm::MachineInstr *a3)
{
  uint64_t v3;
  llvm::MachineInstr *v5;
  llvm::MachineInstr *v7;
  uint64_t v8;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  unsigned int v13;
  BOOL v14;
  int ReachingDef;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _QWORD *i;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)a2 + 3);
  if ((llvm::MachineInstr *)(v3 + 48) == a2)
    return 0;
  v5 = a2;
  v7 = a2;
  while (v7 != a3)
  {
    if (!v7 || (*(_BYTE *)v7 & 4) == 0)
    {
      while ((*((_WORD *)v7 + 22) & 8) != 0)
        v7 = (llvm::MachineInstr *)*((_QWORD *)v7 + 1);
    }
    v7 = (llvm::MachineInstr *)*((_QWORD *)v7 + 1);
    if (v7 == (llvm::MachineInstr *)(v3 + 48))
      return 0;
  }
  v8 = 0;
  if (a2 != a3 && v3 == *((_QWORD *)a3 + 3))
  {
    v32 = &v34;
    v33 = 0x200000000;
    v36 = 0;
    v37 = 0;
    v35 = &v36;
    v10 = *((unsigned int *)a2 + 10);
    if ((_DWORD)v10)
    {
      v11 = (_DWORD *)*((_QWORD *)a2 + 4);
      v12 = &v11[8 * v10];
      do
      {
        v13 = v11[1];
        if (*v11)
          v14 = 1;
        else
          v14 = v13 == 0;
        if (!v14)
        {
          if ((*v11 & 0x1000000) != 0)
          {
            v31 = v11[1];
            sub_1C522856C((uint64_t **)&v32, &v31);
          }
          else if (*((_QWORD *)v5 + 3) != *((_QWORD *)a3 + 3)
                 || (ReachingDef = llvm::ReachingDefAnalysis::getReachingDef((uint64_t)this, (uint64_t)v5, v11[1]),
                     ReachingDef != llvm::ReachingDefAnalysis::getReachingDef((uint64_t)this, (uint64_t)a3, v13)))
          {
            v8 = 0;
            v17 = v36;
            goto LABEL_62;
          }
        }
        v11 += 8;
      }
      while (v11 != v12);
      if (!v5)
        goto LABEL_30;
    }
    if ((*(_BYTE *)v5 & 4) == 0)
    {
LABEL_30:
      while ((*((_WORD *)v5 + 22) & 8) != 0)
        v5 = (llvm::MachineInstr *)*((_QWORD *)v5 + 1);
    }
    v16 = *((_QWORD *)v5 + 1);
    v17 = v36;
    if ((llvm::MachineInstr *)v16 == a3)
    {
      v8 = 1;
      goto LABEL_62;
    }
    v18 = v37;
    v19 = v32;
    v20 = v33;
    v21 = 4 * v33;
    do
    {
      v22 = sub_1C5227980((llvm::MachineInstr *)v16);
      if ((v22 & 1) != 0)
        break;
      v23 = *(unsigned int *)(v16 + 40);
      if ((_DWORD)v23)
      {
        v24 = *(_QWORD *)(v16 + 32);
        v25 = v24 + 32 * v23;
        do
        {
          if (!*(_BYTE *)v24)
          {
            v26 = *(_DWORD *)(v24 + 4);
            if (v26)
            {
              if (v18)
              {
                for (i = v17; i; i = (_QWORD *)*i)
                {
                  v28 = *((_DWORD *)i + 7);
                  if (v26 >= v28)
                  {
                    if (v28 >= v26)
                      goto LABEL_59;
                    ++i;
                  }
                }
              }
              else if (v20)
              {
                v29 = v21;
                v30 = v19;
                while (*v30 != v26)
                {
                  ++v30;
                  v29 -= 4;
                  if (!v29)
                    goto LABEL_37;
                }
                if (v29)
                {
LABEL_59:
                  v8 = 0;
                  goto LABEL_62;
                }
              }
            }
          }
LABEL_37:
          v24 += 32;
        }
        while (v24 != v25);
      }
      if ((*(_BYTE *)v16 & 4) == 0)
      {
        while ((*(_WORD *)(v16 + 44) & 8) != 0)
          v16 = *(_QWORD *)(v16 + 8);
      }
      v16 = *(_QWORD *)(v16 + 8);
    }
    while ((llvm::MachineInstr *)v16 != a3);
    v8 = v22 ^ 1u;
LABEL_62:
    sub_1C61247C0((uint64_t)&v35, v17);
    if (v32 != &v34)
      free(v32);
  }
  return v8;
}

uint64_t llvm::ReachingDefAnalysis::isSafeToMoveBackwards(llvm::ReachingDefAnalysis *this, llvm::MachineInstr *a2, llvm::MachineInstr *a3)
{
  uint64_t v3;
  llvm::MachineInstr *v7;
  uint64_t v8;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  unsigned int v13;
  BOOL v14;
  int ReachingDef;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _QWORD *i;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)a2 + 3);
  if ((llvm::MachineInstr *)(v3 + 48) == a2)
    return 0;
  v7 = a2;
  while (v7 != a3)
  {
    v7 = (llvm::MachineInstr *)(*(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8);
    if (!v7 || (*(_BYTE *)v7 & 4) == 0)
    {
      while ((*((_WORD *)v7 + 22) & 4) != 0)
        v7 = (llvm::MachineInstr *)(*(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8);
    }
    if (v7 == (llvm::MachineInstr *)(v3 + 48))
      return 0;
  }
  v8 = 0;
  if (a2 != a3 && v3 == *((_QWORD *)a3 + 3))
  {
    v32 = &v34;
    v33 = 0x200000000;
    v36 = 0;
    v37 = 0;
    v35 = &v36;
    v10 = *((unsigned int *)a2 + 10);
    if ((_DWORD)v10)
    {
      v11 = (_DWORD *)*((_QWORD *)a2 + 4);
      v12 = &v11[8 * v10];
      do
      {
        v13 = v11[1];
        if (*v11)
          v14 = 1;
        else
          v14 = v13 == 0;
        if (!v14)
        {
          if ((*v11 & 0x1000000) != 0)
          {
            v31 = v11[1];
            sub_1C522856C((uint64_t **)&v32, &v31);
          }
          else if (*((_QWORD *)a2 + 3) != *((_QWORD *)a3 + 3)
                 || (ReachingDef = llvm::ReachingDefAnalysis::getReachingDef((uint64_t)this, (uint64_t)a2, v11[1]),
                     ReachingDef != llvm::ReachingDefAnalysis::getReachingDef((uint64_t)this, (uint64_t)a3, v13)))
          {
            v8 = 0;
            v17 = v36;
            goto LABEL_64;
          }
        }
        v11 += 8;
      }
      while (v11 != v12);
    }
    v16 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (!v16 || (*(_BYTE *)v16 & 4) == 0)
    {
      while ((*(_WORD *)(v16 + 44) & 4) != 0)
        v16 = *(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8;
    }
    v17 = v36;
    if ((llvm::MachineInstr *)v16 == a3)
    {
      v8 = 1;
      goto LABEL_64;
    }
    v18 = v37;
    v19 = v32;
    v20 = v33;
    v21 = 4 * v33;
    do
    {
      v22 = sub_1C5227980((llvm::MachineInstr *)v16);
      if ((v22 & 1) != 0)
        break;
      v23 = *(unsigned int *)(v16 + 40);
      if ((_DWORD)v23)
      {
        v24 = *(_QWORD *)(v16 + 32);
        v25 = v24 + 32 * v23;
        do
        {
          if (!*(_BYTE *)v24)
          {
            v26 = *(_DWORD *)(v24 + 4);
            if (v26)
            {
              if (v18)
              {
                for (i = v17; i; i = (_QWORD *)*i)
                {
                  v28 = *((_DWORD *)i + 7);
                  if (v26 >= v28)
                  {
                    if (v28 >= v26)
                      goto LABEL_61;
                    ++i;
                  }
                }
              }
              else if (v20)
              {
                v29 = v21;
                v30 = v19;
                while (*v30 != v26)
                {
                  ++v30;
                  v29 -= 4;
                  if (!v29)
                    goto LABEL_37;
                }
                if (v29)
                {
LABEL_61:
                  v8 = 0;
                  goto LABEL_64;
                }
              }
            }
          }
LABEL_37:
          v24 += 32;
        }
        while (v24 != v25);
      }
      v16 = *(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8;
      if (!v16 || (*(_BYTE *)v16 & 4) == 0)
      {
        while ((*(_WORD *)(v16 + 44) & 4) != 0)
          v16 = *(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    while ((llvm::MachineInstr *)v16 != a3);
    v8 = v22 ^ 1u;
LABEL_64:
    sub_1C61247C0((uint64_t)&v35, v17);
    if (v32 != &v34)
      free(v32);
  }
  return v8;
}

uint64_t llvm::ReachingDefAnalysis::isSafeToRemove(llvm::ReachingDefAnalysis *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  int v8;
  _BYTE v9[16];
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v10 = &v14;
  v11 = &v14;
  v12 = 1;
  v13 = 0;
  v5 = v9;
  v6 = v9;
  v7 = 2;
  v8 = 0;
  v3 = llvm::ReachingDefAnalysis::isSafeToRemove(a1, a2, (unsigned int *)&v5, a3, &v10);
  if (v6 != v5)
    free(v6);
  if (v11 != v10)
    free(v11);
  return v3;
}

uint64_t llvm::ReachingDefAnalysis::isSafeToRemove(llvm::ReachingDefAnalysis *a1, uint64_t a2, unsigned int *a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  unsigned int v20;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int *v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned int *v34;
  unint64_t *v35;
  unint64_t v36;
  _DWORD *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  _BYTE v42[32];

  v10 = sub_1C477672C((uint64_t)a3, a2);
  v11 = *((_QWORD *)a3 + 1);
  if (v11 == *(_QWORD *)a3)
    v12 = a3 + 5;
  else
    v12 = a3 + 4;
  if (v10 != (_QWORD *)(v11 + 8 * *v12))
    return 1;
  v13 = sub_1C477672C((uint64_t)a5, a2);
  v14 = a5[1];
  v15 = v14 == *a5 ? (unsigned int *)((char *)a5 + 20) : (unsigned int *)(a5 + 2);
  if (v13 != (_QWORD *)(v14 + 8 * *v15))
    return 1;
  if ((sub_1C5227980((llvm::MachineInstr *)a2) & 1) == 0)
  {
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, a2);
    v17 = *(unsigned int *)(a2 + 40);
    if (!(_DWORD)v17)
    {
LABEL_50:
      sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, a2);
      return 1;
    }
    v18 = *(_DWORD **)(a2 + 32);
    v19 = &v18[8 * v17];
    v37 = v19;
    while (1)
    {
      v20 = v18[1];
      if ((*v18 & 0x10000FF) != 0x1000000 || v20 == 0)
        goto LABEL_47;
      v38 = (uint64_t *)v42;
      v39 = (uint64_t *)v42;
      v40 = 4;
      v41 = 0;
      llvm::ReachingDefAnalysis::getGlobalUses(a1, a2, v20, (llvm::SmallPtrSetImplBase *)&v38);
      if (v39 == v38)
        v22 = (uint64_t *)((char *)&v40 + 4);
      else
        v22 = &v40;
      v23 = *(unsigned int *)v22;
      if ((_DWORD)v23)
      {
        v24 = 8 * v23;
        v25 = v39;
        while ((unint64_t)*v25 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v25;
          v24 -= 8;
          if (!v24)
          {
            v26 = 1;
            goto LABEL_44;
          }
        }
      }
      else
      {
        v25 = v39;
      }
      v27 = (char *)&v39[v23];
      if (v25 != (uint64_t *)v27)
      {
        v28 = *v25;
LABEL_29:
        v29 = sub_1C477672C((uint64_t)a5, v28);
        v30 = a5[1];
        if (v30 == *a5)
          v31 = (unsigned int *)a5 + 5;
        else
          v31 = (unsigned int *)(a5 + 2);
        if (v29 == (_QWORD *)(v30 + 8 * *v31))
        {
          v32 = sub_1C477672C((uint64_t)a4, v28);
          v33 = a4[1];
          v34 = v33 == *a4 ? (unsigned int *)((char *)a4 + 20) : (unsigned int *)(a4 + 2);
          if (v32 == (_QWORD *)(v33 + 8 * *v34)
            && !llvm::ReachingDefAnalysis::isSafeToRemove(a1, v28, a3, a4, a5))
          {
            v26 = 0;
            goto LABEL_43;
          }
        }
        v35 = (unint64_t *)(v25 + 1);
        while (v35 != (unint64_t *)v27)
        {
          v36 = *v35++;
          v28 = v36;
          if (v36 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v25 = (uint64_t *)(v35 - 1);
            goto LABEL_29;
          }
        }
      }
      v26 = 1;
LABEL_43:
      v19 = v37;
LABEL_44:
      if (v39 != v38)
        free(v39);
      if (!v26)
        return 0;
LABEL_47:
      v18 += 8;
      if (v18 == v19)
        goto LABEL_50;
    }
  }
  return 0;
}

uint64_t llvm::ReachingDefAnalysis::isSafeToRemove(llvm::ReachingDefAnalysis *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  int v9;
  _BYTE v10[16];

  v6 = v10;
  v7 = v10;
  v8 = 2;
  v9 = 0;
  v4 = llvm::ReachingDefAnalysis::isSafeToRemove(a1, a2, (unsigned int *)&v6, a3, a4);
  if (v7 != v6)
    free(v7);
  return v4;
}

uint64_t sub_1C5227980(llvm::MachineInstr *a1)
{
  unsigned __int16 *v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  unint64_t v5;
  BOOL hasUnmodeledSideEffects;
  uint64_t result;
  char v8;
  llvm::MachineInstr *v9;
  llvm::MachineInstr *v10;
  llvm::MachineInstr *v11;
  llvm::MachineInstr *v12;
  llvm::MachineInstr *v13;
  llvm::MachineInstr *v14;
  llvm::MachineInstr *v15;
  llvm::MachineInstr *v16;
  unsigned int v17;
  char v18;
  llvm::MachineInstr *v19;

  v1 = (unsigned __int16 *)*((_QWORD *)a1 + 2);
  v2 = *v1 - 1;
  if (v2 <= 1 && (*(_BYTE *)(*((_QWORD *)a1 + 4) + 48) & 8) != 0)
    return 1;
  v3 = *((unsigned __int16 *)a1 + 22);
  v4 = (v3 >> 2) & 1;
  if ((v3 & 0xC) == 0)
    LOBYTE(v4) = 1;
  v5 = *((_QWORD *)v1 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v5 & 0x80000) != 0)
      return 1;
  }
  else
  {
    if ((v5 & 0x80000) != 0)
      return 1;
    v8 = v4;
    v9 = a1;
    v10 = a1;
    while (1)
    {
      a1 = v9;
      LOBYTE(v4) = v8;
      if ((*((_WORD *)v10 + 22) & 8) == 0)
        break;
      v10 = (llvm::MachineInstr *)*((_QWORD *)v10 + 1);
      result = 1;
      if ((*(_BYTE *)(*((_QWORD *)v10 + 2) + 10) & 8) != 0)
        return result;
    }
  }
  if (v2 <= 1 && (*(_BYTE *)(*((_QWORD *)a1 + 4) + 48) & 0x10) != 0)
    return 1;
  if ((v4 & 1) == 0)
  {
    v18 = v4;
    v19 = a1;
    if ((v5 & 0x100000) != 0)
      return 1;
    v11 = a1;
    result = 1;
    while ((*((_WORD *)v11 + 22) & 8) != 0)
    {
      v11 = (llvm::MachineInstr *)*((_QWORD *)v11 + 1);
      if ((*(_BYTE *)(*((_QWORD *)v11 + 2) + 10) & 0x10) != 0)
        return result;
    }
    a1 = v19;
    if ((v5 & 0x200000) == 0)
    {
      v12 = v19;
      a1 = v19;
      while ((*((_WORD *)v12 + 22) & 8) != 0)
      {
        v12 = (llvm::MachineInstr *)*((_QWORD *)v12 + 1);
        LOBYTE(v4) = v18;
        if ((*(_BYTE *)(*((_QWORD *)v12 + 2) + 10) & 0x20) != 0)
          goto LABEL_33;
      }
LABEL_34:
      if (!llvm::MachineInstr::hasUnmodeledSideEffects(v19))
      {
        if ((v18 & 1) == 0)
        {
          if ((v5 & 0x200) != 0)
            return 1;
          v13 = v19;
          result = 1;
          while ((*((_WORD *)v13 + 22) & 8) != 0)
          {
            v13 = (llvm::MachineInstr *)*((_QWORD *)v13 + 1);
            if ((*(_BYTE *)(*((_QWORD *)v13 + 2) + 9) & 2) != 0)
              return result;
          }
          if ((v5 & 0x80) != 0)
            return 1;
          v14 = v19;
          result = 1;
          while ((*((_WORD *)v14 + 22) & 8) != 0)
          {
            v14 = (llvm::MachineInstr *)*((_QWORD *)v14 + 1);
            if ((*(_BYTE *)(*((_QWORD *)v14 + 2) + 8) & 0x80) != 0)
              return result;
          }
          if ((v5 & 0x100) != 0)
            return 1;
          v15 = v19;
          result = 1;
          while ((*((_WORD *)v15 + 22) & 8) != 0)
          {
            v15 = (llvm::MachineInstr *)*((_QWORD *)v15 + 1);
            if ((*(_BYTE *)(*((_QWORD *)v15 + 2) + 9) & 1) != 0)
              return result;
          }
          if ((v5 & 0x400) != 0)
            return 1;
          v16 = v19;
          result = 1;
          while ((*((_WORD *)v16 + 22) & 8) != 0)
          {
            v16 = (llvm::MachineInstr *)*((_QWORD *)v16 + 1);
            if ((*(_BYTE *)(*((_QWORD *)v16 + 2) + 9) & 4) != 0)
              return result;
          }
          if ((v5 & 0x20) != 0)
            return 1;
          do
          {
            v17 = *((unsigned __int16 *)v19 + 22);
            result = (v17 >> 3) & 1;
            if ((v17 & 8) == 0)
              break;
            v19 = (llvm::MachineInstr *)*((_QWORD *)v19 + 1);
          }
          while ((*(_BYTE *)(*((_QWORD *)v19 + 2) + 8) & 0x20) == 0);
          return result;
        }
        if ((v5 & 0x200) == 0)
        {
LABEL_12:
          if ((v5 & 0x580) != 0)
            return 1;
          else
            return (v5 >> 5) & 1;
        }
      }
      return 1;
    }
LABEL_33:
    v18 = v4;
    v19 = a1;
    if ((v3 & 0x4000) == 0)
      return 1;
    goto LABEL_34;
  }
  if ((v5 & 0x100000) != 0)
    return 1;
  if ((v5 & 0x200000) != 0)
    goto LABEL_33;
  hasUnmodeledSideEffects = llvm::MachineInstr::hasUnmodeledSideEffects(a1);
  result = 1;
  if (!hasUnmodeledSideEffects && (v5 & 0x200) == 0)
    goto LABEL_12;
  return result;
}

void llvm::ReachingDefAnalysis::collectKilledOperands(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  unsigned int v9;
  llvm::MachineInstr *UniqueReachingMIDef;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  int *v16;
  int *v17;
  int v18;
  int v19;
  _BOOL4 v21;
  int v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t *i;
  _QWORD *v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  _BYTE v41[32];

  v4 = a2;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, a2);
  v6 = *(unsigned int *)(v4 + 40);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD **)(v4 + 32);
    v8 = &v7[8 * v6];
    v35 = a1;
    v36 = v4;
    do
    {
      v9 = v7[1];
      if ((*v7 & 0x10000FF) == 0 && v9 != 0)
      {
        UniqueReachingMIDef = (llvm::MachineInstr *)llvm::ReachingDefAnalysis::getUniqueReachingMIDef(a1, v4, v9);
        if (UniqueReachingMIDef)
        {
          v12 = (uint64_t)UniqueReachingMIDef;
          v13 = v7[1];
          if ((sub_1C5227980(UniqueReachingMIDef) & 1) == 0)
          {
            v14 = *(unsigned int *)(v12 + 40);
            if (!(_DWORD)v14)
              goto LABEL_22;
            v15 = 0;
            v16 = *(int **)(v12 + 32);
            v17 = &v16[8 * v14];
            do
            {
              v18 = *v16;
              v19 = v16[1];
              v16 += 8;
              v21 = (v18 & 0x10000FF) == 0x1000000 && v19 != 0;
              v22 = (~v18 & 0x5000000) != 0 && v21;
              v15 += v22;
            }
            while (v16 != v17);
            if (v15 <= 1)
            {
LABEL_22:
              v37 = (uint64_t *)v41;
              v38 = (uint64_t *)v41;
              v39 = 4;
              v40 = 0;
              llvm::ReachingDefAnalysis::getGlobalUses((llvm::ReachingDefAnalysis *)a1, v12, v13, (llvm::SmallPtrSetImplBase *)&v37);
              v23 = 0;
              if (HIDWORD(v39) - v40 <= (*(_DWORD *)(a3 + 20) - *(_DWORD *)(a3 + 24)))
              {
                if (v38 == v37)
                  v24 = HIDWORD(v39);
                else
                  v24 = v39;
                if ((_DWORD)v24)
                {
                  v25 = 8 * v24;
                  v26 = v38;
                  while ((unint64_t)*v26 >= 0xFFFFFFFFFFFFFFFELL)
                  {
                    ++v26;
                    v25 -= 8;
                    if (!v25)
                      goto LABEL_45;
                  }
                }
                else
                {
                  v26 = v38;
                }
                v27 = &v38[v24];
                if (v26 == v27)
                {
LABEL_45:
                  v23 = 1;
                }
                else
                {
                  v28 = sub_1C477672C(a3, *v26);
                  v29 = *(_QWORD *)(a3 + 8);
                  if (v29 == *(_QWORD *)a3)
                    v30 = (unsigned int *)(a3 + 20);
                  else
                    v30 = (unsigned int *)(a3 + 16);
                  if (v28 == (_QWORD *)(v29 + 8 * *v30))
                  {
                    v23 = 0;
                  }
                  else
                  {
                    for (i = v26 + 1; ; ++i)
                    {
                      v23 = i == v27;
                      if (i == v27)
                        break;
                      if ((unint64_t)*i < 0xFFFFFFFFFFFFFFFELL)
                      {
                        v32 = sub_1C477672C(a3, *i);
                        v33 = *(_QWORD *)(a3 + 8);
                        v34 = (unsigned int *)(v33 == *(_QWORD *)a3 ? a3 + 20 : a3 + 16);
                        if (v32 == (_QWORD *)(v33 + 8 * *v34))
                          break;
                      }
                    }
                  }
                }
              }
              if (v38 != v37)
                free(v38);
              a1 = v35;
              v4 = v36;
              if (v23)
                llvm::ReachingDefAnalysis::collectKilledOperands(v35, v12, a3);
            }
          }
        }
      }
      v7 += 8;
    }
    while (v7 != v8);
  }
}

uint64_t llvm::ReachingDefAnalysis::isSafeToDefRegAt(llvm::ReachingDefAnalysis *a1, uint64_t a2, unsigned int a3)
{
  uint64_t isSafeToDefRegAt;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v5 = &v9;
  v6 = &v9;
  v7 = 1;
  v8 = 0;
  isSafeToDefRegAt = llvm::ReachingDefAnalysis::isSafeToDefRegAt(a1, a2, a3, (uint64_t)&v5);
  if (v6 != v5)
    free(v6);
  return isSafeToDefRegAt;
}

uint64_t llvm::ReachingDefAnalysis::isSafeToDefRegAt(llvm::ReachingDefAnalysis *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t result;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t *i;
  _QWORD *v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  _BYTE v34[16];

  v5 = a2;
  if (llvm::ReachingDefAnalysis::isRegUsedAfter((uint64_t)a1, a2, a3))
  {
    result = llvm::ReachingDefAnalysis::getReachingLocalMIDef(a1, v5, a3);
    if (!result)
      return result;
    v30 = (uint64_t *)v34;
    v31 = (uint64_t *)v34;
    v32 = 2;
    v33 = 0;
    llvm::ReachingDefAnalysis::getGlobalUses(a1, result, a3, (llvm::SmallPtrSetImplBase *)&v30);
    v9 = 0;
    if (HIDWORD(v32) - v33 <= (*(_DWORD *)(a4 + 20) - *(_DWORD *)(a4 + 24)))
    {
      if (v31 == v30)
        v10 = HIDWORD(v32);
      else
        v10 = v32;
      if ((_DWORD)v10)
      {
        v11 = 8 * v10;
        v12 = v31;
        while ((unint64_t)*v12 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v12;
          v11 -= 8;
          if (!v11)
            goto LABEL_26;
        }
      }
      else
      {
        v12 = v31;
      }
      v13 = &v31[v10];
      if (v12 == v13)
      {
LABEL_26:
        v9 = 1;
      }
      else
      {
        v14 = sub_1C477672C(a4, *v12);
        v15 = *(_QWORD *)(a4 + 8);
        if (v15 == *(_QWORD *)a4)
          v16 = (unsigned int *)(a4 + 20);
        else
          v16 = (unsigned int *)(a4 + 16);
        if (v14 == (_QWORD *)(v15 + 8 * *v16))
        {
          v9 = 0;
        }
        else
        {
          for (i = v12 + 1; ; ++i)
          {
            v9 = i == v13;
            if (i == v13)
              break;
            if ((unint64_t)*i < 0xFFFFFFFFFFFFFFFELL)
            {
              v18 = sub_1C477672C(a4, *i);
              v19 = *(_QWORD *)(a4 + 8);
              v20 = (unsigned int *)(v19 == *(_QWORD *)a4 ? a4 + 20 : a4 + 16);
              if (v18 == (_QWORD *)(v19 + 8 * *v20))
                break;
            }
          }
        }
      }
    }
    if (v31 != v30)
      free(v31);
    if (!v9)
      return 0;
  }
  v21 = *(_QWORD *)(v5 + 24);
  if (!llvm::ReachingDefAnalysis::isRegDefinedAfter(a1, v5, a3))
    return 1;
  v22 = v21 + 48;
  if (v21 + 48 == v5)
    return 1;
  while (1)
  {
    v23 = sub_1C477672C(a4, v5);
    v24 = *(_QWORD *)(a4 + 8);
    v25 = (unsigned int *)(v24 == *(_QWORD *)a4 ? a4 + 20 : a4 + 16);
    if (v23 == (_QWORD *)(v24 + 8 * *v25))
      break;
LABEL_37:
    if (!v5)
      goto LABEL_47;
LABEL_44:
    if ((*(_BYTE *)v5 & 4) == 0)
    {
LABEL_47:
      while ((*(_WORD *)(v5 + 44) & 8) != 0)
        v5 = *(_QWORD *)(v5 + 8);
    }
    v5 = *(_QWORD *)(v5 + 8);
    if (v5 == v22)
      return 1;
  }
  v26 = *(unsigned int *)(v5 + 40);
  if (!(_DWORD)v26)
    goto LABEL_44;
  v27 = *(_QWORD *)(v5 + 32);
  v28 = v27 + 32 * v26;
  v29 = *((_QWORD *)a1 + 32);
  while (!sub_1C5227004(*(_DWORD *)v27, *(_DWORD *)(v27 + 4), a3, v29))
  {
    v27 += 32;
    if (v27 == v28)
      goto LABEL_37;
  }
  return 0;
}

void sub_1C52280DC(uint64_t a1)
{
  sub_1C5228350(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5228100(llvm::MachineFunctionPass *this, llvm::AnalysisUsage *a2)
{
  *((_BYTE *)a2 + 160) = 1;
  return llvm::MachineFunctionPass::getAnalysisUsage(this, a2);
}

void sub_1C522810C(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v7 = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&v7, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = v7;
  *(_QWORD *)v7 |= 0xCuLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &v7 == (void **)a1)
    goto LABEL_9;
  if (v8 < 7)
  {
    v6 = v8;
LABEL_7:
    memcpy(v4, v3, 8 * v6);
    v3 = v7;
    goto LABEL_8;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
  v6 = v8;
  v3 = v7;
  if ((_DWORD)v8)
  {
    v4 = *(void **)a1;
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_9:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

uint64_t llvm::callDefaultCtor<llvm::ReachingDefAnalysis>()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  v0 = operator new();
  v1 = sub_1C4776848(v0, (uint64_t)&llvm::ReachingDefAnalysis::ID);
  *(_QWORD *)v1 = &off_1E8148D50;
  *(_QWORD *)(v1 + 264) = v1 + 280;
  *(_QWORD *)(v1 + 272) = 0x400000000;
  *(_QWORD *)(v1 + 352) = 0;
  *(_QWORD *)(v1 + 360) = 0;
  *(_QWORD *)(v1 + 368) = 0;
  *(_QWORD *)(v1 + 376) = v1 + 392;
  *(_QWORD *)(v1 + 384) = 0x400000000;
  *(_QWORD *)(v1 + 496) = 0;
  *(_QWORD *)(v1 + 504) = 0;
  *(_DWORD *)(v1 + 512) = 0;
  *(_QWORD *)(v1 + 520) = v1 + 536;
  *(_QWORD *)(v1 + 528) = 0x400000000;
  *(_DWORD *)(v1 + 632) = -1048576;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1EF8F6FC8);
  if (v3 != -1)
  {
    v7[0] = sub_1C5224A70;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1EF8F6FC8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C5228350(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void **v15;

  *(_QWORD *)a1 = &off_1E8148D50;
  v2 = *(char **)(a1 + 520);
  v3 = *(unsigned int *)(a1 + 528);
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    v5 = v2 - 24;
    do
    {
      v15 = (void **)&v5[v4];
      sub_1C52284A0(&v15);
      v4 -= 24;
    }
    while (v4);
    v2 = *(char **)(a1 + 520);
  }
  if (v2 != (char *)(a1 + 536))
    free(v2);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 496), 8);
  v6 = *(char **)(a1 + 376);
  v7 = *(unsigned int *)(a1 + 384);
  if ((_DWORD)v7)
  {
    v8 = 24 * v7;
    do
    {
      v9 = *(void **)&v6[v8 - 24];
      if (v9)
      {
        *(_QWORD *)&v6[v8 - 16] = v9;
        operator delete(v9);
      }
      v8 -= 24;
    }
    while (v8);
    v6 = *(char **)(a1 + 376);
  }
  if (v6 != (char *)(a1 + 392))
    free(v6);
  v10 = *(void **)(a1 + 352);
  if (v10)
  {
    *(_QWORD *)(a1 + 360) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 264);
  if (v11 != (void *)(a1 + 280))
    free(v11);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v12 = *(void **)(a1 + 176);
  if (v12 != (void *)(a1 + 192))
    free(v12);
  v13 = *(void **)(a1 + 104);
  if (v13 != (void *)(a1 + 120))
    free(v13);
  v14 = *(void **)(a1 + 32);
  if (v14 != (void *)(a1 + 48))
    free(v14);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C52284A0(void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = sub_1C5228510(v4 - 1);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_1C5228510(uint64_t *a1)
{
  uint64_t v2;
  void **v3;

  v2 = *a1;
  if ((*a1 & 1) != 0)
  {
    v3 = (void **)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if ((v2 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
      if (*v3 != v3 + 2)
        free(*v3);
      MEMORY[0x1CAA32FC0](v3, 0x1080C40ED926357);
    }
  }
  return a1;
}

uint64_t **sub_1C522856C(uint64_t **result, int *a2)
{
  uint64_t **v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  int *v10;

  v3 = result;
  if (result[5])
  {
    v4 = result + 3;
    return sub_1C49915F0(v4, a2, a2);
  }
  v5 = *result;
  v6 = *((unsigned int *)result + 2);
  v7 = *a2;
  if ((_DWORD)v6)
  {
    v8 = 4 * v6;
    v9 = *result;
    while (*(_DWORD *)v9 != v7)
    {
      v9 = (uint64_t *)((char *)v9 + 4);
      v8 -= 4;
      if (!v8)
        goto LABEL_10;
    }
    if (v8)
      return result;
LABEL_10:
    if (v6 > 1)
    {
      do
      {
        v10 = (int *)*v3 + v6 - 1;
        sub_1C49915F0(v3 + 3, v10, v10);
        LODWORD(v6) = *((_DWORD *)v3 + 2) - 1;
        *((_DWORD *)v3 + 2) = v6;
      }
      while ((_DWORD)v6);
      v4 = v3 + 3;
      return sub_1C49915F0(v4, a2, a2);
    }
  }
  if (v6 >= *((_DWORD *)result + 3))
  {
    result = (uint64_t **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 2), v6 + 1, 4);
    v5 = *v3;
    v6 = *((unsigned int *)v3 + 2);
  }
  *((_DWORD *)v5 + v6) = v7;
  ++*((_DWORD *)v3 + 2);
  return result;
}

void llvm::RegAllocBase::init(llvm::RegAllocBase *this, llvm::VirtRegMap *a2, llvm::LiveIntervals *a3, llvm::LiveRegMatrix *a4)
{
  llvm::MachineRegisterInfo *v6;
  const llvm::MachineFunction *v7;
  uint64_t v8;

  v6 = (llvm::MachineRegisterInfo *)*((_QWORD *)a2 + 31);
  v8 = *((_QWORD *)a2 + 33);
  v7 = (const llvm::MachineFunction *)*((_QWORD *)a2 + 34);
  *((_QWORD *)this + 1) = v8;
  *((_QWORD *)this + 2) = v6;
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 4) = a3;
  *((_QWORD *)this + 5) = a4;
  llvm::MachineRegisterInfo::freezeReservedRegs(v6, v7);
  llvm::RegisterClassInfo::runOnMachineFunction((llvm::RegAllocBase *)((char *)this + 48), *((const llvm::MachineFunction **)a2 + 34));
}

llvm::Timer *llvm::RegAllocBase::seedLiveRegs(llvm::RegAllocBase *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::LiveInterval *v14;
  uint64_t v15;
  uint64_t v16;
  llvm::Timer *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  int v24;
  llvm::Timer *v25;

  llvm::NamedRegionTimer::NamedRegionTimer(&v25, "seed", 4uLL, "Seed Live Regs", 0xEuLL, "regalloc", 8uLL, a8, "Register Allocation", 0x13uLL, llvm::TimePassesIsEnabled);
  v9 = *(_DWORD *)(*((_QWORD *)this + 2) + 32);
  if (!v9)
  {
LABEL_13:
    result = v25;
    if (v25)
      return (llvm::Timer *)llvm::Timer::stopTimer(result);
    return result;
  }
  v10 = 0;
  while (1)
  {
    v11 = v10 & 0x7FFFFFFF;
    v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 24) + 16 * v11 + 8);
    if (!v12)
      goto LABEL_4;
    while ((*(_DWORD *)v12 & 0x80000000) != 0)
    {
      v12 = *(_QWORD *)(v12 + 24);
      if (!v12)
        goto LABEL_4;
    }
    v13 = *((_QWORD *)this + 4);
    if (v11 >= *(unsigned int *)(v13 + 416)
      || (v14 = *(llvm::LiveInterval **)(*(_QWORD *)(v13 + 408) + 8 * v11)) == 0)
    {
      v14 = (llvm::LiveInterval *)sub_1C4851220(*((_QWORD *)this + 4), v10 | 0x80000000);
      v18 = *(_QWORD *)(v13 + 304);
      v19 = *(_QWORD *)(v13 + 248);
      v20 = *(_QWORD *)(v19 + 40);
      *(_QWORD *)v18 = v19;
      *(_QWORD *)(v18 + 8) = v20;
      *(_OWORD *)(v18 + 16) = *(_OWORD *)(v13 + 288);
      *(_QWORD *)(v18 + 32) = v13 + 312;
      llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v18);
      *(_DWORD *)(v18 + 184) = 0;
      v21 = *(_QWORD *)(v13 + 256);
      v23 = *(_BYTE *)(v21 + 16) == 0;
      v22 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v21 + 24) + 16 * (*((_DWORD *)v14 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                               + 34);
      v23 = v23 || v22 == 0;
      v24 = !v23;
      llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v13 + 304), v14, v24);
      llvm::LiveIntervals::computeDeadValues(v13, (uint64_t)v14, 0);
    }
    v15 = *((_DWORD *)v14 + 28) & 0x7FFFFFFF;
    if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 280) + 4 * v15))
      goto LABEL_4;
    v16 = *((_QWORD *)this + 39);
    if (!v16)
      break;
    if ((*(unsigned int (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v16 + 48))(v16, *((_QWORD *)this + 1), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 24) + 16 * v15) & 0xFFFFFFFFFFFFFFF8))
    {
      (*(void (**)(llvm::RegAllocBase *, llvm::LiveInterval *))(*(_QWORD *)this + 40))(this, v14);
    }
LABEL_4:
    if (++v10 == v9)
      goto LABEL_13;
  }
  sub_1C485C2F0();
  return (llvm::Timer *)llvm::Timer::stopTimer(result);
}

_QWORD *llvm::RegAllocBase::enqueue(_QWORD *this, const llvm::LiveInterval *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  llvm::RegAllocBase *v6;

  v2 = *((_DWORD *)a2 + 28) & 0x7FFFFFFF;
  if (!*(_DWORD *)(*(_QWORD *)(this[3] + 280) + 4 * v2))
  {
    v3 = this;
    v4 = this[39];
    if (v4)
    {
      this = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v4 + 48))(v4, v3[1], *(_QWORD *)(*(_QWORD *)(v3[2] + 24) + 16 * v2) & 0xFFFFFFFFFFFFFFF8);
      if ((_DWORD)this)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, const llvm::LiveInterval *))(*v3 + 40))(v3, a2);
    }
    else
    {
      sub_1C485C2F0();
      return (_QWORD *)llvm::RegAllocBase::allocatePhysRegs(v6);
    }
  }
  return this;
}

char *llvm::RegAllocBase::allocatePhysRegs(llvm::RegAllocBase *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *result;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 ***v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int16 *v33;
  uint64_t v34;
  int *v35;
  int *v36;
  uint64_t v37;
  llvm::LiveInterval *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  BOOL v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  char *v64;
  char **v65;
  const char *v66;
  __int16 v67;
  uint64_t (**v68)(llvm::DiagnosticInfo *__hidden);
  int v69;
  char v70;
  uint64_t v71;
  const char **v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  _QWORD v76[4];

  v76[2] = *MEMORY[0x1E0C80C00];
  llvm::RegAllocBase::seedLiveRegs(this, a2, a3, a4, a5, a6, a7, a8);
  result = (char *)(*(uint64_t (**)(llvm::RegAllocBase *))(*(_QWORD *)this + 48))(this);
  if (result)
  {
    v10 = (unsigned int *)result;
    do
    {
      v11 = *((_QWORD *)this + 2);
      v12 = v10[28];
      if ((v12 & 0x80000000) != 0)
        v13 = (uint64_t *)(*(_QWORD *)(v11 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
      else
        v13 = (uint64_t *)(*(_QWORD *)(v11 + 272) + 8 * v12);
      v14 = *v13;
      if (v14)
      {
        while ((*(_DWORD *)v14 & 0x80000000) != 0)
        {
          v14 = *(_QWORD *)(v14 + 24);
          if (!v14)
            goto LABEL_9;
        }
        ++*(_DWORD *)(*((_QWORD *)this + 5) + 272);
        v74 = v76;
        v75 = 0x400000000;
        v22 = (*(uint64_t (**)(llvm::RegAllocBase *, unsigned int *, void **))(*(_QWORD *)this + 56))(this, v10, &v74);
        if (v22)
        {
          if (v22 == -1)
          {
            v23 = *((_QWORD *)this + 2);
            v24 = v10[28];
            if ((v24 & 0x80000000) != 0)
              v25 = (uint64_t *)(*(_QWORD *)(v23 + 24) + 16 * (v24 & 0x7FFFFFFF) + 8);
            else
              v25 = (uint64_t *)(*(_QWORD *)(v23 + 272) + 8 * v24);
            v26 = *v25;
            if (v26)
            {
              v27 = *(_QWORD *)(v26 + 8);
LABEL_27:
              v28 = v27;
              while (1)
              {
                v26 = *(_QWORD *)(v26 + 24);
                if (!v26)
                  break;
                v27 = *(_QWORD *)(v26 + 8);
                if (v27 != v28)
                {
                  if (**(unsigned __int16 **)(v28 + 16) - 1 > 1)
                    goto LABEL_27;
                  break;
                }
              }
            }
            else
            {
              v28 = 0;
            }
            v29 = (unsigned __int16 ***)(*(_QWORD *)(*(_QWORD *)(v23 + 24) + 16 * (v24 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
            v30 = *((unsigned __int16 *)*v29 + 12);
            v31 = *((_QWORD *)this + 6);
            if (*((_DWORD *)this + 14) != *(_DWORD *)(v31 + 24 * *((unsigned __int16 *)*v29 + 12)))
              llvm::RegisterClassInfo::compute((uint64_t *)this + 6, v29);
            v32 = v31 + 24 * v30;
            if (!*(_DWORD *)(v32 + 4))
            {
              v64 = "no registers from class available to allocate";
              goto LABEL_96;
            }
            if (!v28)
            {
              v64 = "ran out of registers during register allocation";
LABEL_96:
              llvm::report_fatal_error((llvm *)v64, (const char *)1);
            }
            v33 = *(unsigned __int16 **)(v32 + 16);
            if (**(unsigned __int16 **)(v28 + 16) - 1 > 1)
            {
              v34 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 24) + 32) + 32) + 2064);
              v66 = "ran out of registers during register allocation";
              v67 = 259;
              v69 = 0;
              v70 = 0;
              v68 = &off_1E814E960;
              v71 = 0;
              v72 = &v66;
              v73 = 0;
              llvm::LLVMContext::diagnose(v34, (const llvm::DiagnosticInfo *)&v68);
            }
            else
            {
              llvm::MachineInstr::emitError(v28, (uint64_t)"inline assembly requires more registers than available", 54);
            }
            *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 280) + 4 * (v10[28] & 0x7FFFFFFF)) = *v33;
          }
          else
          {
            llvm::LiveRegMatrix::assign(*((_QWORD **)this + 5), (llvm::LiveInterval *)v10, v22);
          }
        }
        v35 = (int *)v74;
        v36 = (int *)((char *)v74 + 4 * v75);
        if ((_DWORD)v75)
        {
          while (1)
          {
            v37 = *((_QWORD *)this + 4);
            if ((*v35 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v37 + 416)
              || (v38 = *(llvm::LiveInterval **)(*(_QWORD *)(v37 + 408) + 8 * (*v35 & 0x7FFFFFFF))) == 0)
            {
              v38 = (llvm::LiveInterval *)sub_1C4851220(*((_QWORD *)this + 4), *v35);
              v55 = *(_QWORD *)(v37 + 304);
              v56 = *(_QWORD *)(v37 + 248);
              *(_QWORD *)v55 = v56;
              *(_QWORD *)(v55 + 8) = *(_QWORD *)(v56 + 40);
              *(_OWORD *)(v55 + 16) = *(_OWORD *)(v37 + 288);
              *(_QWORD *)(v55 + 32) = v37 + 312;
              llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v55);
              *(_DWORD *)(v55 + 184) = 0;
              v57 = *(_QWORD *)(v37 + 256);
              v59 = *(_BYTE *)(v57 + 16) == 0;
              v58 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v57 + 24) + 16
                                                                            * (*((_DWORD *)v38 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                       + 34);
              v59 = v59 || v58 == 0;
              v60 = !v59;
              llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v37 + 304), v38, v60);
              llvm::LiveIntervals::computeDeadValues(v37, (uint64_t)v38, 0);
            }
            v39 = *((_QWORD *)this + 2);
            v40 = *((unsigned int *)v38 + 28);
            if ((v40 & 0x80000000) != 0)
              v41 = (uint64_t *)(*(_QWORD *)(v39 + 24) + 16 * (v40 & 0x7FFFFFFF) + 8);
            else
              v41 = (uint64_t *)(*(_QWORD *)(v39 + 272) + 8 * v40);
            v42 = *v41;
            if (v42)
            {
              while ((*(_DWORD *)v42 & 0x80000000) != 0)
              {
                v42 = *(_QWORD *)(v42 + 24);
                if (!v42)
                  goto LABEL_50;
              }
              v50 = v40 & 0x7FFFFFFF;
              if (!*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 280) + 4 * v50))
              {
                v51 = *((_QWORD *)this + 39);
                if (!v51)
                {
                  sub_1C485C2F0();
                  return llvm::RegAllocBase::postOptimization(v65);
                }
                if ((*(unsigned int (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v51 + 48))(v51, *((_QWORD *)this + 1), *(_QWORD *)(*(_QWORD *)(v39 + 24) + 16 * v50) & 0xFFFFFFFFFFFFFFF8))
                {
                  (*(void (**)(llvm::RegAllocBase *, llvm::LiveInterval *))(*(_QWORD *)this + 40))(this, v38);
                }
              }
            }
            else
            {
LABEL_50:
              (*(void (**)(llvm::RegAllocBase *, llvm::LiveInterval *))(*(_QWORD *)this + 64))(this, v38);
              v43 = *((_QWORD *)this + 4);
              v44 = *((_DWORD *)v38 + 28) & 0x7FFFFFFF;
              v45 = *(_QWORD *)(v43 + 408);
              v46 = *(_QWORD *)(v45 + 8 * v44);
              if (v46)
              {
                v47 = *(_QWORD *)(v46 + 104);
                if (v47)
                {
                  do
                  {
                    v52 = *(_QWORD *)(v47 + 96);
                    v53 = *(_QWORD *)(v47 + 104);
                    *(_QWORD *)(v47 + 96) = 0;
                    if (v52)
                    {
                      sub_1C47655E8(v52, *(_QWORD **)(v52 + 8));
                      MEMORY[0x1CAA32FC0](v52, 0x1020C4062D53EE8);
                    }
                    v54 = *(void **)(v47 + 64);
                    if (v54 != (void *)(v47 + 80))
                      free(v54);
                    if (*(_QWORD *)v47 != v47 + 16)
                      free(*(void **)v47);
                    v47 = v53;
                  }
                  while (v53);
                }
                v48 = *(_QWORD *)(v46 + 96);
                *(_QWORD *)(v46 + 96) = 0;
                *(_QWORD *)(v46 + 104) = 0;
                if (v48)
                {
                  sub_1C47655E8(v48, *(_QWORD **)(v48 + 8));
                  MEMORY[0x1CAA32FC0](v48, 0x1020C4062D53EE8);
                }
                v49 = *(void **)(v46 + 64);
                if (v49 != (void *)(v46 + 80))
                  free(v49);
                if (*(_QWORD *)v46 != v46 + 16)
                  free(*(void **)v46);
                MEMORY[0x1CAA32FC0](v46, 0x10A0C408DA535C6);
                v45 = *(_QWORD *)(v43 + 408);
              }
              *(_QWORD *)(v45 + 8 * v44) = 0;
            }
            if (++v35 == v36)
            {
              v35 = (int *)v74;
              break;
            }
          }
        }
        if (v35 != (int *)v76)
          free(v35);
      }
      else
      {
LABEL_9:
        (*(void (**)(llvm::RegAllocBase *, unsigned int *))(*(_QWORD *)this + 64))(this, v10);
        v15 = *((_QWORD *)this + 4);
        v16 = v10[28] & 0x7FFFFFFF;
        v17 = *(_QWORD *)(v15 + 408);
        v18 = *(_QWORD *)(v17 + 8 * v16);
        if (v18)
        {
          v19 = *(_QWORD *)(v18 + 104);
          if (v19)
          {
            do
            {
              v61 = *(_QWORD *)(v19 + 96);
              v62 = *(_QWORD *)(v19 + 104);
              *(_QWORD *)(v19 + 96) = 0;
              if (v61)
              {
                sub_1C47655E8(v61, *(_QWORD **)(v61 + 8));
                MEMORY[0x1CAA32FC0](v61, 0x1020C4062D53EE8);
              }
              v63 = *(void **)(v19 + 64);
              if (v63 != (void *)(v19 + 80))
                free(v63);
              if (*(_QWORD *)v19 != v19 + 16)
                free(*(void **)v19);
              v19 = v62;
            }
            while (v62);
          }
          v20 = *(_QWORD *)(v18 + 96);
          *(_QWORD *)(v18 + 96) = 0;
          *(_QWORD *)(v18 + 104) = 0;
          if (v20)
          {
            sub_1C47655E8(v20, *(_QWORD **)(v20 + 8));
            MEMORY[0x1CAA32FC0](v20, 0x1020C4062D53EE8);
          }
          v21 = *(void **)(v18 + 64);
          if (v21 != (void *)(v18 + 80))
            free(v21);
          if (*(_QWORD *)v18 != v18 + 16)
            free(*(void **)v18);
          MEMORY[0x1CAA32FC0](v18, 0x10A0C408DA535C6);
          v17 = *(_QWORD *)(v15 + 408);
        }
        *(_QWORD *)(v17 + 8 * v16) = 0;
      }
      result = (char *)(*(uint64_t (**)(llvm::RegAllocBase *))(*(_QWORD *)this + 48))(this);
      v10 = (unsigned int *)result;
    }
    while (result);
  }
  return result;
}

char *llvm::RegAllocBase::postOptimization(char **this)
{
  uint64_t v2;
  char *result;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int32x2_t *v11;
  int32x2_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v25;
  int v26;
  unsigned int v27;
  char *v28;

  v2 = (*((uint64_t (**)(char **))*this + 4))(this);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  v4 = this[40];
  result = this[41];
  v5 = 336;
  if (result == v4)
    v5 = 340;
  v6 = *(unsigned int *)((char *)this + v5);
  v7 = (uint64_t *)this[41];
  if ((_DWORD)v6)
  {
    v8 = 0;
    while (*(_QWORD *)&result[v8] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v8 += 8;
      if (8 * v6 == v8)
        goto LABEL_30;
    }
    v7 = (uint64_t *)&result[v8];
  }
  v9 = &result[8 * v6];
  if (v7 != (uint64_t *)v9)
  {
    v10 = *v7;
LABEL_11:
    v11 = (int32x2_t *)*((_QWORD *)this[4] + 36);
    v12 = v11[46];
    v13 = v11[48].u32[0];
    if ((_DWORD)v13)
    {
      LODWORD(v14) = (v13 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      v15 = (uint64_t *)(*(_QWORD *)&v12 + 16 * v14);
      v16 = *v15;
      if (*v15 == v10)
        goto LABEL_18;
      v17 = 1;
      while (v16 != -4096)
      {
        v18 = v14 + v17++;
        v14 = v18 & (v13 - 1);
        v16 = *(_QWORD *)(*(_QWORD *)&v12 + 16 * v14);
        if (v16 == v10)
        {
          v15 = (uint64_t *)(*(_QWORD *)&v12 + 16 * v14);
          goto LABEL_18;
        }
      }
    }
    v15 = (uint64_t *)(*(_QWORD *)&v12 + 16 * v13);
LABEL_18:
    if (v15 != (uint64_t *)(*(_QWORD *)&v12 + 16 * v13))
    {
      v19 = v15[1] & 0xFFFFFFFFFFFFFFF8;
      *v15 = -8192;
      v11[47] = vadd_s32(v11[47], (int32x2_t)0x1FFFFFFFFLL);
      *(_QWORD *)(v19 + 16) = 0;
    }
    v20 = v10;
    if ((*(_BYTE *)v10 & 4) == 0)
    {
      v20 = v10;
      if ((*(_WORD *)(v10 + 44) & 8) != 0)
      {
        v20 = v10;
        do
          v20 = *(_QWORD *)(v20 + 8);
        while ((*(_WORD *)(v20 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(v10 + 24) + 40, v10, *(_QWORD *)(v20 + 8));
    v21 = (unint64_t *)(v7 + 1);
    while (v21 != (unint64_t *)v9)
    {
      v22 = *v21++;
      v10 = v22;
      if (v22 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v7 = (uint64_t *)(v21 - 1);
        goto LABEL_11;
      }
    }
    v4 = this[40];
    result = this[41];
  }
LABEL_30:
  if (result == v4)
  {
LABEL_31:
    *(char **)((char *)this + 340) = 0;
    return result;
  }
  v23 = *((unsigned int *)this + 84);
  if (v23 < 0x21 || 4 * (*((_DWORD *)this + 85) - *((_DWORD *)this + 86)) >= v23)
  {
    result = (char *)memset(result, 255, 8 * v23);
    goto LABEL_31;
  }
  free(result);
  v25 = *((_DWORD *)this + 85) - *((_DWORD *)this + 86);
  v26 = 1 << (33 - __clz(v25 - 1));
  if (v25 <= 0x10)
    v27 = 32;
  else
    v27 = v26;
  *((_DWORD *)this + 84) = v27;
  *(char **)((char *)this + 340) = 0;
  v28 = (char *)malloc_type_malloc(8 * v27, 0x4065EBACuLL);
  if (!v28)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  this[41] = v28;
  return (char *)memset(v28, 255, 8 * *((unsigned int *)this + 84));
}

uint64_t sub_1C5229214()
{
  __n128 v1;
  int v2;
  char *v3;

  v3 = &llvm::RegAllocBase::VerifyEnabled;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Verify during register allocation";
  v1.n128_u64[1] = 33;
  sub_1C61A1F40((llvm::cl::Option *)&unk_1ED7FE038, "verify-regalloc", &v3, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4EB22A8, &unk_1ED7FE038, &dword_1C475E000);
}

_QWORD *sub_1C5229294(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD **v3;
  _QWORD *v4;

  v2 = &llvm::RegisterRegAllocBase<llvm::RegisterRegAlloc>::Registry;
  while (1)
  {
    v3 = (_QWORD **)v2;
    v2 = (_QWORD *)*v2;
    if (!v2)
      break;
    if (v2 == a1)
    {
      v4 = a1;
      if (off_1ED7EAEB0)
      {
        (*(void (**)(void *, _QWORD, _QWORD))(*(_QWORD *)off_1ED7EAEB0 + 32))(off_1ED7EAEB0, a1[1], a1[2]);
        v4 = *v3;
      }
      *v3 = (_QWORD *)*v4;
      return a1;
    }
  }
  return a1;
}

uint64_t sub_1C52292FC(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  llvm::PassRegistry *v5;
  llvm::PassRegistry *v6;
  llvm::PassRegistry *v7;
  uint64_t v8;

  llvm::initializeLiveDebugVariablesPass(a1, a2);
  llvm::initializeSlotIndexesPass((uint64_t)a1);
  llvm::initializeLiveIntervalsPass((uint64_t)a1);
  llvm::initializeRegisterCoalescerPass(a1, v3);
  llvm::initializeMachineSchedulerPass(a1, v4);
  llvm::initializeLiveStacksPass(a1, v5);
  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeMachineLoopInfoPass((uint64_t)a1);
  llvm::initializeVirtRegMapPass(a1, v6);
  llvm::initializeLiveRegMatrixPass(a1, v7);
  v8 = operator new();
  *(_QWORD *)v8 = "Basic Register Allocator";
  *(_QWORD *)(v8 + 8) = 24;
  *(_QWORD *)(v8 + 16) = "regallocbasic";
  *(_QWORD *)(v8 + 24) = 13;
  *(_QWORD *)(v8 + 32) = &unk_1EF8F2F38;
  *(_WORD *)(v8 + 40) = 0;
  *(_BYTE *)(v8 + 42) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = sub_1C5229610;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v8, 1);
  return v8;
}

uint64_t sub_1C52293D8()
{
  return 1;
}

uint64_t sub_1C52293E0(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  void (**v6)(void);
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = sub_1C4776848(a1, (uint64_t)&unk_1EF8F2F38) + 248;
  v5 = (_QWORD *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      v9 = v8;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v8);
    }
    else
    {
      v9 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    }
  }
  else
  {
    v9 = 0;
  }
  sub_1C620A1C8(v4, (uint64_t)v8);
  if (v9 == v8)
  {
    v6 = (void (**)(void))(v8[0] + 32);
    goto LABEL_10;
  }
  if (v9)
  {
    v6 = (void (**)(void))(*v9 + 40);
LABEL_10:
    (*v6)();
  }
  *(_QWORD *)a1 = &off_1E8148E70;
  *(_QWORD *)(a1 + 248) = &unk_1E8148F60;
  *(_QWORD *)(a1 + 856) = &unk_1E8148FB8;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_QWORD *)(a1 + 912) = a1 + 928;
  *(_QWORD *)(a1 + 920) = 0x600000000;
  *(_DWORD *)(a1 + 976) = 0;
  return a1;
}

uint64_t llvm::createBasicRegisterAllocator(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  void (**v4)(void);
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = operator new();
  v3 = (_QWORD *)a1[3];
  if (v3)
  {
    if (v3 == a1)
    {
      v7 = v6;
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v6);
    }
    else
    {
      v7 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_1C52293E0(v2, v6);
  if (v7 == v6)
  {
    v4 = (void (**)(void))(v6[0] + 32);
    goto LABEL_10;
  }
  if (v7)
  {
    v4 = (void (**)(void))(*v7 + 40);
LABEL_10:
    (*v4)();
  }
  return v2;
}

uint64_t sub_1C5229610()
{
  uint64_t v0;
  void (**v1)(void);
  _QWORD v3[3];
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  v3[0] = &off_1E7FB3428;
  v3[1] = sub_1C52293D8;
  v4 = v3;
  sub_1C52293E0(v0, v3);
  if (v4 == v3)
  {
    v1 = (void (**)(void))(v3[0] + 32);
    goto LABEL_5;
  }
  if (v4)
  {
    v1 = (void (**)(void))(*v4 + 40);
LABEL_5:
    (*v1)();
  }
  return v0;
}

void sub_1C52296D0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  a1[31] = &unk_1E8148F60;
  v2 = a1 + 31;
  *a1 = &off_1E8148E70;
  a1[107] = &unk_1E8148FB8;
  v3 = (_QWORD *)a1[114];
  if (v3 != a1 + 116)
    free(v3);
  v4 = (void *)a1[110];
  if (v4)
  {
    a1[111] = v4;
    operator delete(v4);
  }
  v5 = a1[109];
  a1[109] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  sub_1C620A270(v2);
  *a1 = &unk_1E8144BE8;
  v6 = (_QWORD *)a1[22];
  if (v6 != a1 + 24)
    free(v6);
  v7 = (_QWORD *)a1[13];
  if (v7 != a1 + 15)
    free(v7);
  v8 = (_QWORD *)a1[4];
  if (v8 != a1 + 6)
    free(v8);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C52297AC(_QWORD *a1)
{
  sub_1C52296D0(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C52297D0()
{
  return "Basic Register Allocator";
}

void *sub_1C52297E0(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&unk_1EF8F6EF8);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&unk_1EF8F6EF8);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::LiveStacks::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::LiveStacks::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineBlockFrequencyInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineBlockFrequencyInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::VirtRegMap::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::VirtRegMap::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::LiveRegMatrix::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::LiveRegMatrix::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C5229998(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 872);
  *(_QWORD *)(a1 + 872) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t sub_1C52299B8(uint64_t a1, uint64_t a2)
{
  void **v3;
  void *v4;
  llvm::VirtRegMap *v5;
  void **v6;
  void *v7;
  llvm::LiveIntervals *v8;
  void **v9;
  void *v10;
  llvm::LiveRegMatrix *v11;
  uint64_t v12;
  void **v13;
  void *v14;
  uint64_t v15;
  void **v16;
  void *v17;
  uint64_t v18;
  llvm::VirtRegAuxInfo *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t InlineSpiller;
  uint64_t v28;
  int8x16_t v30;
  _QWORD v31[2];
  int8x16_t v32;
  uint64_t v33;
  uint64_t v34;

  *(_QWORD *)(a1 + 864) = a2;
  v3 = **(void ****)(a1 + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != &llvm::VirtRegMap::ID);
  v5 = (llvm::VirtRegMap *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), &llvm::VirtRegMap::ID);
  v6 = **(void ****)(a1 + 8);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != &llvm::LiveIntervals::ID);
  v8 = (llvm::LiveIntervals *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), &llvm::LiveIntervals::ID);
  v9 = **(void ****)(a1 + 8);
  do
  {
    v10 = *v9;
    v9 += 2;
  }
  while (v10 != &llvm::LiveRegMatrix::ID);
  v11 = (llvm::LiveRegMatrix *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v9 - 1) + 96))(*(v9 - 1), &llvm::LiveRegMatrix::ID);
  llvm::RegAllocBase::init((llvm::RegAllocBase *)(a1 + 248), v5, v8, v11);
  v12 = *(_QWORD *)(a1 + 864);
  v30 = *(int8x16_t *)(a1 + 272);
  v13 = **(void ****)(a1 + 8);
  do
  {
    v14 = *v13;
    v13 += 2;
  }
  while (v14 != &llvm::MachineLoopInfo::ID);
  v15 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), &llvm::MachineLoopInfo::ID);
  v16 = **(void ****)(a1 + 8);
  do
  {
    v17 = *v16;
    v16 += 2;
  }
  while (v17 != &llvm::MachineBlockFrequencyInfo::ID);
  v18 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v16 - 1) + 96))(*(v16 - 1), &llvm::MachineBlockFrequencyInfo::ID);
  v31[0] = &unk_1E8149000;
  v31[1] = v12;
  v32 = vextq_s8(v30, v30, 8uLL);
  v33 = v15;
  v34 = v18;
  llvm::VirtRegAuxInfo::calculateSpillWeightsAndHints((llvm::VirtRegAuxInfo *)v31);
  InlineSpiller = llvm::createInlineSpiller((llvm *)a1, *(llvm::MachineFunctionPass **)(a1 + 864), *(llvm::MachineFunction **)(a1 + 272), (llvm::VirtRegMap *)v31, v19);
  v28 = *(_QWORD *)(a1 + 872);
  *(_QWORD *)(a1 + 872) = InlineSpiller;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
  llvm::RegAllocBase::allocatePhysRegs((llvm::RegAllocBase *)(a1 + 248), v20, v21, v22, v23, v24, v25, v26);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 248) + 24))(a1 + 248);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  return 1;
}

void sub_1C5229BA0(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v7 = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&v7, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = v7;
  *(_QWORD *)v7 |= 2uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &v7 == (void **)a1)
    goto LABEL_9;
  if (v8 < 7)
  {
    v6 = v8;
LABEL_7:
    memcpy(v4, v3, 8 * v6);
    v3 = v7;
    goto LABEL_8;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
  v6 = v8;
  v3 = v7;
  if ((_DWORD)v8)
  {
    v4 = *(void **)a1;
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_9:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

void sub_1C5229CCC(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v7 = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&v7, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = v7;
  *(_QWORD *)v7 |= 1uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &v7 == (void **)a1)
    goto LABEL_9;
  if (v8 < 7)
  {
    v6 = v8;
LABEL_7:
    memcpy(v4, v3, 8 * v6);
    v3 = v7;
    goto LABEL_8;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
  v6 = v8;
  v3 = v7;
  if ((_DWORD)v8)
  {
    v4 = *(void **)a1;
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_9:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

BOOL sub_1C5229DF8(uint64_t a1, int a2)
{
  uint64_t v3;
  unint64_t v4;
  llvm::LiveInterval *v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;

  v3 = *(_QWORD *)(a1 + 280);
  v4 = a2 & 0x7FFFFFFF;
  if (v4 >= *(unsigned int *)(v3 + 416) || (v5 = *(llvm::LiveInterval **)(*(_QWORD *)(v3 + 408) + 8 * v4)) == 0)
  {
    v5 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(a1 + 280), a2);
    v8 = *(_QWORD *)(v3 + 304);
    v9 = *(_QWORD *)(v3 + 248);
    v10 = *(_QWORD *)(v9 + 40);
    *(_QWORD *)v8 = v9;
    *(_QWORD *)(v8 + 8) = v10;
    *(_OWORD *)(v8 + 16) = *(_OWORD *)(v3 + 288);
    *(_QWORD *)(v8 + 32) = v3 + 312;
    llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v8);
    *(_DWORD *)(v8 + 184) = 0;
    v11 = *(_QWORD *)(v3 + 256);
    v13 = *(_BYTE *)(v11 + 16) == 0;
    v12 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v11 + 24) + 16 * (*((_DWORD *)v5 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                             + 34);
    v13 = v13 || v12 == 0;
    v14 = !v13;
    llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v3 + 304), v5, v14);
    llvm::LiveIntervals::computeDeadValues(v3, (uint64_t)v5, 0);
  }
  v6 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 280) + 4 * v4);
  if (v6)
  {
    llvm::LiveRegMatrix::unassign(*(llvm::LiveRegMatrix **)(a1 + 288), v5);
    (*(void (**)(uint64_t, llvm::LiveInterval *))(*(_QWORD *)(a1 + 248) + 64))(a1 + 248, v5);
  }
  else
  {
    *((_DWORD *)v5 + 18) = 0;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v6 != 0;
}

uint64_t sub_1C5229F14(uint64_t result, int a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm::LiveInterval *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  uint64_t v15;

  v2 = a2 & 0x7FFFFFFF;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 272) + 280) + 4 * v2))
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 280);
    if (v2 >= *(unsigned int *)(v4 + 416) || (v5 = *(llvm::LiveInterval **)(*(_QWORD *)(v4 + 408) + 8 * v2)) == 0)
    {
      v5 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(result + 280), a2);
      v8 = *(_QWORD *)(v4 + 304);
      v9 = *(_QWORD *)(v4 + 248);
      v10 = *(_QWORD *)(v9 + 40);
      *(_QWORD *)v8 = v9;
      *(_QWORD *)(v8 + 8) = v10;
      *(_OWORD *)(v8 + 16) = *(_OWORD *)(v4 + 288);
      *(_QWORD *)(v8 + 32) = v4 + 312;
      llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v8);
      *(_DWORD *)(v8 + 184) = 0;
      v11 = *(_QWORD *)(v4 + 256);
      v13 = *(_BYTE *)(v11 + 16) == 0;
      v12 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v11 + 24) + 16 * (*((_DWORD *)v5 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                               + 34);
      v13 = v13 || v12 == 0;
      v14 = !v13;
      llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v4 + 304), v5, v14);
      llvm::LiveIntervals::computeDeadValues(v4, (uint64_t)v5, 0);
    }
    result = llvm::LiveRegMatrix::unassign(*(llvm::LiveRegMatrix **)(v3 + 288), v5);
    v6 = *((_DWORD *)v5 + 28) & 0x7FFFFFFF;
    if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 272) + 280) + 4 * v6))
    {
      v7 = *(_QWORD *)(v3 + 560);
      if (v7)
      {
        result = (*(uint64_t (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v7 + 48))(v7, *(_QWORD *)(v3 + 256), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 264) + 24) + 16 * v6) & 0xFFFFFFFFFFFFFFF8);
        if ((_DWORD)result)
          return (*(uint64_t (**)(uint64_t, llvm::LiveInterval *))(*(_QWORD *)(v3 + 248) + 40))(v3 + 248, v5);
      }
      else
      {
        sub_1C485C2F0();
        return sub_1C522A068(v15);
      }
    }
  }
  return result;
}

uint64_t sub_1C522A068(uint64_t a1)
{
  return *(_QWORD *)(a1 + 872);
}

void sub_1C522A070(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  float v22;
  _QWORD *v23;

  v4 = (_QWORD *)a1[111];
  v5 = a1[112];
  if ((unint64_t)v4 >= v5)
  {
    v7 = (_QWORD *)a1[110];
    v8 = v4 - v7;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      abort();
    v10 = v5 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        sub_1C4764EE4();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = a2;
    v6 = v13 + 8;
    if (v4 != v7)
    {
      do
      {
        v14 = *--v4;
        *((_QWORD *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v4 != v7);
      v4 = (_QWORD *)a1[110];
    }
    a1[110] = v13;
    a1[111] = v6;
    a1[112] = &v12[8 * v11];
    if (v4)
      operator delete(v4);
  }
  else
  {
    *v4 = a2;
    v6 = v4 + 1;
  }
  a1[111] = v6;
  v15 = a1[110];
  if ((uint64_t)v6 - v15 >= 9)
  {
    v16 = ((((unint64_t)v6 - v15) >> 3) - 2) >> 1;
    v17 = (_QWORD *)(v15 + 8 * v16);
    v18 = *v17;
    v21 = *(v6 - 1);
    v20 = v6 - 1;
    v19 = v21;
    v22 = *(float *)(v21 + 116);
    if (*(float *)(*v17 + 116) < v22)
    {
      do
      {
        v23 = v17;
        *v20 = v18;
        if (!v16)
          break;
        v16 = (v16 - 1) >> 1;
        v17 = (_QWORD *)(v15 + 8 * v16);
        v18 = *v17;
        v20 = v23;
      }
      while (*(float *)(*v17 + 116) < v22);
      *v23 = v19;
    }
  }
}

uint64_t sub_1C522A1C8(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  char *v19;

  v1 = *(char **)(a1 + 880);
  v2 = *(char **)(a1 + 888);
  if (v1 == v2)
    return 0;
  v3 = *(_QWORD *)v1;
  v4 = v2 - v1;
  if (v2 - v1 >= 9)
  {
    v5 = 0;
    v6 = v4 >> 3;
    v7 = (unint64_t)((v4 >> 3) - 2) >> 1;
    v8 = *(char **)(a1 + 880);
    do
    {
      v9 = v8;
      v8 += 8 * v5 + 8;
      v10 = 2 * v5;
      v5 = (2 * v5) | 1;
      v11 = v10 + 2;
      if (v11 < v6 && *(float *)(*(_QWORD *)v8 + 116) < *(float *)(*((_QWORD *)v8 + 1) + 116))
      {
        v8 += 8;
        v5 = v11;
      }
      *(_QWORD *)v9 = *(_QWORD *)v8;
    }
    while (v5 <= v7);
    v12 = v2 - 8;
    if (v8 == v12)
    {
      *(_QWORD *)v8 = v3;
    }
    else
    {
      *(_QWORD *)v8 = *(_QWORD *)v12;
      *(_QWORD *)v12 = v3;
      v13 = v8 - v1 + 8;
      if (v13 >= 9)
      {
        v14 = (((unint64_t)v13 >> 3) - 2) >> 1;
        v15 = &v1[8 * v14];
        v16 = *(_QWORD *)v15;
        v17 = *(_QWORD *)v8;
        v18 = *(float *)(*(_QWORD *)v8 + 116);
        if (*(float *)(*(_QWORD *)v15 + 116) < v18)
        {
          do
          {
            v19 = v15;
            *(_QWORD *)v8 = v16;
            if (!v14)
              break;
            v14 = (v14 - 1) >> 1;
            v15 = &v1[8 * v14];
            v16 = *(_QWORD *)v15;
            v8 = v19;
          }
          while (*(float *)(*(_QWORD *)v15 + 116) < v18);
          *(_QWORD *)v19 = v17;
        }
      }
    }
  }
  *(_QWORD *)(a1 + 888) -= 8;
  return v3;
}

uint64_t sub_1C522A2FC(int8x16_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _WORD *v12;
  unsigned __int16 v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  int v43;
  uint64_t v44;
  int v45;
  int i;
  uint64_t v47;
  char *v48;
  char *v51;
  uint64_t (**v52)(llvm::MachineRegisterInfo::Delegate *__hidden);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int8x16_t v56;
  uint64_t v57;
  __int8 *v58;
  int v59;
  char v60;
  __int8 *v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  int v65;
  _BYTE v66[32];
  _BYTE *v67;
  _BYTE *v68;
  uint64_t v69;
  int v70;
  _BYTE v71[32];
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  char *v77;
  uint64_t v78;
  _BYTE v79[32];
  _QWORD *v80;
  uint64_t v81;
  _QWORD v82[10];

  v82[8] = *MEMORY[0x1E0C80C00];
  v77 = v79;
  v78 = 0x800000000;
  sub_1C506591C(*(_DWORD *)(a2 + 112), a1[17].i64[0], (uint64_t)&a1[18].i64[1], a1[18].i64[0], (uint64_t)&v72);
  v5 = -v73;
  v6 = v76;
  if (v76 != -(int)v73)
  {
    LODWORD(v41) = -(int)v73;
    do
    {
      v42 = (unsigned __int16 *)((char *)v72 + 2 * v73 + 2 * (int)v41);
      if ((int)v5 >= 0)
        v42 = (unsigned __int16 *)(v75 + 2 * v41);
      v40 = *v42;
      v43 = llvm::LiveRegMatrix::checkInterference(a1[18].i64[0], a2, *v42);
      if (v43 == 1)
      {
        v44 = v78;
        if (v78 >= (unint64_t)HIDWORD(v78))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, (uint64_t)v79, v78 + 1, 4);
          v44 = v78;
        }
        *(_DWORD *)&v77[4 * v44] = v40;
        LODWORD(v78) = v78 + 1;
      }
      else if (!v43)
      {
        goto LABEL_77;
      }
      if (v76 <= (int)v5)
      {
        v45 = v5;
      }
      else
      {
        LODWORD(v41) = v5 + 1;
        v45 = v5 + 1;
      }
      if ((v45 & 0x80000000) == 0 && v45 < v76)
      {
        for (i = *(unsigned __int16 *)(v75 + 2 * v45); (i - 1) <= 0x3FFFFFFE; ++v45)
        {
          if (v73)
          {
            v47 = 2 * v73;
            v48 = (char *)v72;
            while (*(unsigned __int16 *)v48 != (unsigned __int16)i)
            {
              v48 += 2;
              v47 -= 2;
              if (!v47)
              {
                v48 = (char *)v72 + 2 * v73;
                break;
              }
            }
          }
          else
          {
            v48 = (char *)v72;
          }
          if (v73 == (v48 - (_BYTE *)v72) >> 1)
            break;
          v41 = (v45 + 1);
          if ((_DWORD)v41 == v76)
            break;
          i = *(unsigned __int16 *)(v75 + 2 * v41);
        }
      }
      LODWORD(v5) = v41;
    }
    while (v6 != (_DWORD)v41);
  }
  if (!(_DWORD)v78)
  {
LABEL_42:
    if (*(float *)(a2 + 116) == INFINITY)
    {
      v40 = 0xFFFFFFFFLL;
    }
    else
    {
      v37 = a1[54].i64[0];
      v52 = &off_1E8143478;
      v53 = a2;
      v38 = *(_QWORD *)(v37 + 40);
      v54 = a3;
      v55 = v38;
      v56 = vextq_s8(a1[17], a1[17], 8uLL);
      v57 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v37 + 16) + 104))(*(_QWORD *)(v37 + 16));
      v58 = &a1[53].i8[8];
      v59 = *(_DWORD *)(a3 + 8);
      v60 = 0;
      v61 = &a1[35].i8[8];
      v62 = v66;
      v63 = v66;
      v64 = 4;
      v65 = 0;
      v67 = v71;
      v68 = v71;
      v69 = 4;
      v70 = 0;
      *(_QWORD *)(v38 + 8) = &v52;
      v39 = (*(uint64_t (**)(int8x16_t *))(a1->i64[0] + 192))(a1);
      (*(void (**)(uint64_t, uint64_t (***)(llvm::MachineRegisterInfo::Delegate *__hidden)))(*(_QWORD *)v39 + 24))(v39, &v52);
      v52 = &off_1E8143478;
      *(_QWORD *)(v55 + 8) = 0;
      if (v68 != v67)
        free(v68);
      if (v63 != v62)
        free(v63);
      v40 = 0;
    }
    goto LABEL_77;
  }
  v7 = (unsigned int *)v77;
  v51 = &v77[4 * v78];
  while (2)
  {
    v8 = *v7;
    v80 = v82;
    v81 = 0x800000000;
    v9 = a1[16].i64[0];
    if (v9)
      v10 = (_QWORD *)(v9 + 8);
    else
      v10 = 0;
    v11 = *(unsigned int *)(*v10 + 24 * v8 + 16);
    v12 = (_WORD *)(v10[6] + ((v11 >> 3) & 0x1FFFFFFE));
    v13 = *v12 + (v11 & 0xF) * v8;
    while (1)
    {
      v14 = a1[18].i64[0];
      v15 = v13;
      v16 = *(_QWORD *)(v14 + 400);
      v17 = v16 + 176 * v13;
      v18 = *(_DWORD *)(v14 + 272);
      v19 = (_DWORD *)(*(_QWORD *)(v14 + 392) + 216 * v15);
      if (*(_DWORD *)(v17 + 168) != v18
        || *(_QWORD *)(v16 + 176 * v15 + 8) != a2
        || *(_DWORD **)v17 != v19
        || *v19 != *(_DWORD *)(v16 + 176 * v15 + 164))
      {
        *(_QWORD *)v17 = v19;
        v20 = v16 + 176 * v15;
        *(_QWORD *)(v20 + 8) = a2;
        *(_DWORD *)(v20 + 120) = 0;
        *(_WORD *)(v20 + 160) = 0;
        *(_DWORD *)(v20 + 164) = *v19;
        *(_DWORD *)(v17 + 168) = v18;
LABEL_10:
        llvm::LiveIntervalUnion::Query::collectInterferingVRegs((llvm::LiveIntervalUnion::Query *)v17, 0xFFFFFFFF);
        goto LABEL_11;
      }
      if (!*(_BYTE *)(v17 + 161))
        goto LABEL_10;
LABEL_11:
      v21 = *(unsigned int *)(v17 + 120);
      if ((_DWORD)v21)
        break;
LABEL_21:
      v29 = (unsigned __int16)v12[1];
      ++v12;
      v13 = v29 + v15;
      if (!v29)
      {
        if ((_DWORD)v81)
        {
          v31 = 0;
          v32 = 8 * v81;
          do
          {
            v33 = v80[v31 / 8];
            if (*(_DWORD *)(*(_QWORD *)(a1[17].i64[0] + 280) + 4 * (*(_DWORD *)(v33 + 112) & 0x7FFFFFFF)))
            {
              llvm::LiveRegMatrix::unassign((llvm::LiveRegMatrix *)a1[18].i64[0], (const llvm::LiveInterval *)v80[v31 / 8]);
              v34 = a1[54].i64[0];
              v52 = &off_1E8143478;
              v53 = v33;
              v35 = *(_QWORD *)(v34 + 40);
              v54 = a3;
              v55 = v35;
              v56 = vextq_s8(a1[17], a1[17], 8uLL);
              v57 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v34 + 16) + 104))(*(_QWORD *)(v34 + 16));
              v58 = &a1[53].i8[8];
              v59 = *(_DWORD *)(a3 + 8);
              v60 = 0;
              v61 = &a1[35].i8[8];
              v62 = v66;
              v63 = v66;
              v64 = 4;
              v65 = 0;
              v67 = v71;
              v68 = v71;
              v69 = 4;
              v70 = 0;
              *(_QWORD *)(v55 + 8) = &v52;
              v36 = (*(uint64_t (**)(int8x16_t *))(a1->i64[0] + 192))(a1);
              (*(void (**)(uint64_t, uint64_t (***)(llvm::MachineRegisterInfo::Delegate *__hidden)))(*(_QWORD *)v36 + 24))(v36, &v52);
              v52 = &off_1E8143478;
              *(_QWORD *)(v55 + 8) = 0;
              if (v68 != v67)
                free(v68);
              if (v63 != v62)
                free(v63);
            }
            v31 += 8;
          }
          while (v32 != v31);
        }
        v30 = 1;
        goto LABEL_28;
      }
    }
    v22 = *(_QWORD *)(v17 + 112);
    v23 = 8 * v21;
    v24 = v22 - 8;
    while (1)
    {
      v25 = *(_QWORD *)(v24 + v23);
      v26 = *(float *)(v25 + 116);
      if (v26 == INFINITY || v26 > *(float *)(a2 + 116))
        break;
      v28 = v81;
      if (v81 >= (unint64_t)HIDWORD(v81))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, (uint64_t)v82, v81 + 1, 8);
        v28 = v81;
      }
      v80[v28] = v25;
      LODWORD(v81) = v81 + 1;
      v23 -= 8;
      if (!v23)
        goto LABEL_21;
    }
    v30 = 0;
LABEL_28:
    if (v80 != v82)
      free(v80);
    if (!v30)
    {
      if (++v7 == (unsigned int *)v51)
        goto LABEL_42;
      continue;
    }
    break;
  }
  v40 = *v7;
LABEL_77:
  if (v72 != &v74)
    free(v72);
  if (v77 != v79)
    free(v77);
  return v40;
}

void sub_1C522A930(uint64_t a1)
{
  sub_1C52296D0((_QWORD *)(a1 - 248));
}

void sub_1C522A938(uint64_t a1)
{
  sub_1C52296D0((_QWORD *)(a1 - 248));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C522A960(uint64_t a1)
{
  return *(_QWORD *)(a1 + 624);
}

void sub_1C522A968(uint64_t a1, uint64_t a2)
{
  sub_1C522A070((_QWORD *)(a1 - 248), a2);
}

uint64_t sub_1C522A970(uint64_t a1)
{
  return sub_1C522A1C8(a1 - 248);
}

uint64_t sub_1C522A978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C522A2FC((int8x16_t *)(a1 - 248), a2, a3);
}

void sub_1C522A980(uint64_t a1)
{
  sub_1C52296D0((_QWORD *)(a1 - 856));
}

void sub_1C522A988(uint64_t a1)
{
  sub_1C52296D0((_QWORD *)(a1 - 856));
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C522A9B0(uint64_t a1, int a2)
{
  return sub_1C5229DF8(a1 - 856, a2);
}

uint64_t sub_1C522A9BC(uint64_t a1, int a2)
{
  return sub_1C5229F14(a1 - 856, a2);
}

void sub_1C522A9C8()
{
  JUMPOUT(0x1CAA32FC0);
}

float sub_1C522A9DC(float a1, uint64_t a2, int a3)
{
  return a1 / (float)(a3 + 400);
}

uint64_t sub_1C522A9EC()
{
  sub_1C620A114((uint64_t)&unk_1ED7FE0F8, "basic", "basic register allocator", (uint64_t)llvm::createBasicRegisterAllocator);
  return __cxa_atexit((void (*)(void *))sub_1C5229294, &unk_1ED7FE0F8, &dword_1C475E000);
}

uint64_t sub_1C522AA40(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Regalloc eviction policy";
  *(_QWORD *)(v2 + 8) = 24;
  *(_QWORD *)(v2 + 16) = "regalloc-evict";
  *(_QWORD *)(v2 + 24) = 14;
  *(_QWORD *)(v2 + 32) = &llvm::RegAllocEvictionAdvisorAnalysis::ID;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::RegAllocEvictionAdvisorAnalysis>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

int8x16_t *llvm::RegAllocEvictionAdvisor::RegAllocEvictionAdvisor(int8x16_t *a1, uint64_t a2, int8x16_t *a3)
{
  int8x16_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;

  a1->i64[0] = (uint64_t)off_1E8149028;
  a1->i64[1] = a2;
  a1[1].i64[0] = (uint64_t)a3;
  a1[1].i64[1] = a3[18].i64[0];
  v6 = a3[17];
  a1[2] = vextq_s8(v6, v6, 8uLL);
  a1[3].i64[0] = *(_QWORD *)(v6.i64[0] + 248);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  a1[3].i64[1] = v7;
  a1[4].i64[0] = (uint64_t)&a3[18].i64[1];
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 232))(v7, a2);
  v9 = *(unsigned int *)(v7 + 16);
  a1[4].i64[1] = **(_QWORD **)(v7 + 216) + (v9 * v8);
  a1[5].i64[0] = v9;
  if (byte_1ED82FBE8)
    v10 = 1;
  else
    v10 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 16) + 360))(*(_QWORD *)(a2 + 16), *(unsigned int *)(*(_QWORD *)(a2 + 8) + 552));
  a1[5].i8[8] = v10;
  a1[5].i32[3] = 1;
  return a1;
}

BOOL llvm::DefaultEvictionAdvisor::shouldEvict(llvm::DefaultEvictionAdvisor *this, const llvm::LiveInterval *a2, int a3, const llvm::LiveInterval *a4, int a5)
{
  return *(int *)(*(_QWORD *)(*((_QWORD *)this + 2) + 1248) + 8 * (*((_DWORD *)a4 + 28) & 0x7FFFFFFF)) <= 3
      && a3 != 0
      && a5 == 0
      || *((float *)a2 + 29) > *((float *)a4 + 29);
}

uint64_t llvm::DefaultEvictionAdvisor::canEvictHintInterference(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;

  v5 = 1;
  return llvm::DefaultEvictionAdvisor::canEvictInterferenceBasedOnCost(a1, a2, a3, 1, (uint64_t)&v5, a4);
}

uint64_t llvm::DefaultEvictionAdvisor::canEvictInterferenceBasedOnCost(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6)
{
  __int16 v9;
  uint64_t v10;
  uint64_t result;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unsigned __int16 v25;
  float v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _DWORD *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t *i;
  unsigned int v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int16 ***v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned __int16 ***v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BOOL4 v70;
  float v71;
  unsigned int v72;
  int v73;
  BOOL v74;
  _BOOL4 v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  BOOL v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  _WORD *v97;
  _BOOL4 v98;
  int v99;
  unsigned int v101;

  v9 = a3;
  v10 = a2;
  if ((int)llvm::LiveRegMatrix::checkInterference(*(_QWORD *)(a1 + 24), a2, a3) <= 1)
  {
    v13 = *(_DWORD *)(v10 + 8);
    if (v13)
    {
      v14 = **(_QWORD **)v10;
      if ((v14 & 6) == 0 || (v15 = *(_QWORD *)(*(_QWORD *)v10 + 24 * v13 - 16), (v15 & 6) == 0))
      {
        v98 = 0;
        goto LABEL_15;
      }
      v16 = *(_QWORD *)(a1 + 32);
      v17 = sub_1C499C548(*(_QWORD *)(v16 + 288), v14);
      v19 = v17 == sub_1C499C548(*(_QWORD *)(v16 + 288), v15) && v17 != 0;
    }
    else
    {
      v19 = 1;
    }
    v98 = v19;
LABEL_15:
    v20 = *(_QWORD *)(a1 + 16);
    v101 = *(_DWORD *)(*(_QWORD *)(v20 + 1248) + 8 * (*(_DWORD *)(v10 + 112) & 0x7FFFFFFF) + 4);
    if (!v101)
      v101 = *(_DWORD *)(v20 + 1280);
    v21 = 0;
    v22 = *(_QWORD *)(a1 + 56);
    if (v22)
      v23 = (_QWORD *)(v22 + 8);
    else
      v23 = 0;
    v24 = *(unsigned int *)(*v23 + 24 * a3 + 16);
    v97 = (_WORD *)(v23[6] + ((v24 >> 3) & 0x1FFFFFFE));
    v25 = *v97 + (v24 & 0xF) * v9;
    v99 = a4 ^ 1;
    v26 = 0.0;
    v27 = &unk_1ED82F000;
    while (1)
    {
      v28 = *(_QWORD *)(a1 + 24);
      v29 = v25;
      v30 = *(_QWORD *)(v28 + 400);
      v31 = v30 + 176 * v25;
      v32 = *(_DWORD *)(v28 + 272);
      v33 = (_DWORD *)(*(_QWORD *)(v28 + 392) + 216 * v29);
      if (*(_DWORD *)(v31 + 168) != v32
        || *(_QWORD *)(v30 + 176 * v29 + 8) != v10
        || *(_DWORD **)v31 != v33
        || *v33 != *(_DWORD *)(v30 + 176 * v29 + 164))
      {
        break;
      }
      v37 = *(_DWORD *)(v31 + 120);
      v35 = v27[810];
      if (*(_BYTE *)(v31 + 161))
        v92 = v37 > v35;
      else
        v92 = 1;
      if (v92)
        goto LABEL_23;
LABEL_24:
      if (v37 >= v35)
        return 0;
      if (v37)
      {
        v38 = *(_QWORD *)(v31 + 112);
        v39 = v38 + 8 * v37;
        LODWORD(v31) = v21;
        while (1)
        {
          v41 = *(_QWORD *)(v39 - 8);
          v39 -= 8;
          v40 = v41;
          v42 = *(_DWORD *)(v41 + 112);
          if (*(_QWORD *)(a6 + 96))
          {
            for (i = *(uint64_t **)(a6 + 88); i; i = (uint64_t *)*i)
            {
              v44 = *((_DWORD *)i + 7);
              if (v42 >= v44)
              {
                if (v44 >= v42)
                  return 0;
                ++i;
              }
            }
          }
          else
          {
            v45 = *(unsigned int *)(a6 + 8);
            if ((_DWORD)v45)
            {
              v46 = *(_DWORD **)a6;
              v47 = 4 * v45;
              while (*v46 != v42)
              {
                ++v46;
                v47 -= 4;
                if (!v47)
                  goto LABEL_40;
              }
              if (v47)
                return 0;
            }
          }
LABEL_40:
          v48 = v42 & 0x7FFFFFFF;
          v49 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 1248);
          if (*(_DWORD *)(v49 + 8 * v48) == 6)
            return 0;
          if (*(float *)(v10 + 116) == INFINITY)
          {
            if (*(float *)(v40 + 116) == INFINITY)
            {
              v95 = a5;
              v51 = *(_QWORD *)(a1 + 64);
              v52 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24);
              v53 = (unsigned __int16 ***)(*(_QWORD *)(v52 + 16 * (*(_DWORD *)(v10 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
              v54 = *((unsigned __int16 *)*v53 + 12);
              v55 = *(_QWORD *)v51;
              v56 = *(_DWORD *)(v51 + 8);
              if (v56 == *(_DWORD *)(*(_QWORD *)v51 + 24 * *((unsigned __int16 *)*v53 + 12)))
              {
                v57 = *(_QWORD *)v51;
              }
              else
              {
                v58 = v29;
                llvm::RegisterClassInfo::compute((uint64_t *)v51, v53);
                v29 = v58;
                v27 = (_DWORD *)&unk_1ED82F000;
                v51 = *(_QWORD *)(a1 + 64);
                v52 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24);
                v57 = *(_QWORD *)v51;
                v56 = *(_DWORD *)(v51 + 8);
                v48 = *(_DWORD *)(v40 + 112) & 0x7FFFFFFF;
                v42 = *(_DWORD *)(v40 + 112);
              }
              v59 = *(_DWORD *)(v55 + 24 * v54 + 4);
              v60 = (unsigned __int16 ***)(*(_QWORD *)(v52 + 16 * v48) & 0xFFFFFFFFFFFFFFF8);
              v61 = *((unsigned __int16 *)*v60 + 12);
              if (v56 != *(_DWORD *)(v57 + 24 * *((unsigned __int16 *)*v60 + 12)))
              {
                v93 = v40;
                v62 = v39;
                v63 = v38;
                v64 = v29;
                llvm::RegisterClassInfo::compute((uint64_t *)v51, v60);
                v29 = v64;
                v38 = v63;
                v39 = v62;
                v40 = v93;
                v27 = (_DWORD *)&unk_1ED82F000;
                v42 = *(_DWORD *)(v93 + 112);
                v48 = v42 & 0x7FFFFFFF;
              }
              v50 = v59 < *(_DWORD *)(v57 + 24 * v61 + 4);
              v49 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 1248);
              a5 = v95;
            }
            else
            {
              v50 = 1;
            }
          }
          else
          {
            v50 = 0;
          }
          v65 = *(_DWORD *)(v49 + 8 * v48 + 4);
          if (v101 == v65)
            return 0;
          if (v101 < v65)
          {
            if (!v50)
              return 0;
            LODWORD(v31) = v31 + 10;
          }
          v66 = *(_QWORD *)(a1 + 40);
          v67 = v42 & 0x7FFFFFFF;
          v68 = *(_QWORD *)(*(_QWORD *)(v66 + 248) + 208);
          v69 = v68 + 40 * v67;
          if (!*(_DWORD *)(v69 + 16)
            || ((v89 = **(_DWORD **)(v69 + 8), !*(_DWORD *)(v68 + 40 * v67))
              ? (v90 = v89 == 0)
              : (v90 = 1),
                v90))
          {
            v70 = 0;
          }
          else
          {
            v91 = *(_QWORD *)(v66 + 280);
            if (v89 < 0)
              v89 = *(_DWORD *)(v91 + 4 * (v89 & 0x7FFFFFFF));
            v70 = *(_DWORD *)(v91 + 4 * v67) == v89;
          }
          v31 = (v31 + v70);
          v71 = *(float *)(v40 + 116);
          if (v26 < v71)
            v26 = *(float *)(v40 + 116);
          v72 = *(_DWORD *)a5;
          if (v31 >= *(_DWORD *)a5 && (v72 < v31 || v26 >= *(float *)(a5 + 4)))
            return 0;
          if (!v50)
          {
            v74 = *(_DWORD *)(v49 + 8 * v67) <= 3;
            v73 = v99;
            if (!v74)
              v73 = 1;
            v74 = (v70 | v73) == 1 && *(float *)(v10 + 116) <= v71;
            if (v74)
              return 0;
            v75 = v98;
            if (v72 == -1)
              v75 = 0;
            if (v75)
            {
              v76 = **(_QWORD **)v40;
              if ((v76 & 6) != 0)
              {
                v77 = *(_QWORD *)(*(_QWORD *)v40 + 24 * *(unsigned int *)(v40 + 8) - 16);
                if ((v77 & 6) != 0)
                {
                  v94 = v31;
                  v78 = v40;
                  v79 = v38;
                  v80 = v10;
                  v81 = a6;
                  v82 = v39;
                  v83 = a5;
                  v84 = *(_QWORD *)(a1 + 32);
                  v96 = v29;
                  v85 = sub_1C499C548(*(_QWORD *)(v84 + 288), v76);
                  v86 = *(_QWORD *)(v84 + 288);
                  a5 = v83;
                  v39 = v82;
                  a6 = v81;
                  v10 = v80;
                  v38 = v79;
                  v87 = v78;
                  v31 = v94;
                  v88 = sub_1C499C548(v86, v77);
                  v29 = v96;
                  v27 = (_DWORD *)&unk_1ED82F000;
                  if (v85)
                  {
                    if (v85 == v88)
                    {
                      if (!*(_BYTE *)(a1 + 88))
                        return 0;
                      result = llvm::RegAllocEvictionAdvisor::canReassign((uint64_t *)a1, v87, a3);
                      v29 = v96;
                      v27 = (_DWORD *)&unk_1ED82F000;
                      if (!(_DWORD)result)
                        return result;
                    }
                  }
                }
              }
            }
          }
          if (v39 == v38)
            goto LABEL_89;
        }
      }
      v31 = v21;
LABEL_89:
      v21 = v31;
      v25 = *++v97 + v29;
      if (!*v97)
      {
        *(_DWORD *)a5 = v31;
        *(float *)(a5 + 4) = v26;
        return 1;
      }
    }
    *(_QWORD *)v31 = v33;
    v34 = v30 + 176 * v29;
    *(_QWORD *)(v34 + 8) = v10;
    *(_DWORD *)(v34 + 120) = 0;
    *(_WORD *)(v34 + 160) = 0;
    *(_DWORD *)(v34 + 164) = *v33;
    *(_DWORD *)(v31 + 168) = v32;
    v35 = v27[810];
LABEL_23:
    v36 = v29;
    llvm::LiveIntervalUnion::Query::collectInterferingVRegs((llvm::LiveIntervalUnion::Query *)v31, v35);
    v29 = v36;
    v27 = &unk_1ED82F000;
    v37 = *(_DWORD *)(v31 + 120);
    v35 = dword_1ED82FCA8;
    goto LABEL_24;
  }
  return 0;
}

unint64_t llvm::DefaultEvictionAdvisor::tryFindEvictionCandidate(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t OrderLimit;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int i;
  uint64_t v18;
  unsigned __int16 *v19;
  unint64_t v20;
  uint64_t v22;
  unsigned __int16 *v23;
  unint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 *v31;
  uint64_t v32;
  uint64_t v33;

  v33 = 0xFFFFFFFFLL;
  OrderLimit = llvm::RegAllocEvictionAdvisor::getOrderLimit(a1, a2, a3, a4);
  if ((OrderLimit & 0xFF00000000) == 0)
    return 0;
  if (a4 != 255)
  {
    LODWORD(v33) = 0;
    HIDWORD(v33) = *(_DWORD *)(a2 + 116);
  }
  v11 = *(_QWORD *)(a3 + 8);
  v12 = -v11;
  if ((_DWORD)OrderLimit)
  {
    v13 = OrderLimit - 1;
    v14 = *(_DWORD *)(a3 + 72);
    if (v14 < (int)OrderLimit - 1)
      v13 = *(_DWORD *)(a3 + 72);
    if (v14 < (int)OrderLimit)
      v15 = v13;
    else
      v15 = v13 + 1;
    if ((v15 & 0x80000000) == 0 && v15 < v14)
    {
      v16 = *(_QWORD *)(a3 + 56);
      for (i = *(unsigned __int16 *)(v16 + 2 * v15);
            (i - 1) <= 0x3FFFFFFE;
            i = *(unsigned __int16 *)(v16 + 2 * ++v15))
      {
        if (v11)
        {
          v18 = 2 * v11;
          v19 = *(unsigned __int16 **)a3;
          while (*v19 != i)
          {
            ++v19;
            v18 -= 2;
            if (!v18)
            {
              v19 = (unsigned __int16 *)(*(_QWORD *)a3 + 2 * v11);
              break;
            }
          }
        }
        else
        {
          v19 = *(unsigned __int16 **)a3;
        }
        if (v11 == ((uint64_t)v19 - *(_QWORD *)a3) >> 1)
          break;
        if (v15 == v14 - 1)
        {
          v15 = *(_DWORD *)(a3 + 72);
          break;
        }
      }
    }
  }
  else
  {
    v15 = *(_DWORD *)(a3 + 72);
  }
  if (v15 == (_DWORD)v12)
    return 0;
  v20 = 0;
  LODWORD(v22) = -(int)v11;
  do
  {
    v23 = (unsigned __int16 *)(*(_QWORD *)a3 + 2 * *(_QWORD *)(a3 + 8) + 2 * (int)v22);
    if ((int)v12 >= 0)
      v23 = (unsigned __int16 *)(*(_QWORD *)(a3 + 56) + 2 * v22);
    v24 = *v23;
    if (*(unsigned __int8 *)(a1[9] + v24) < a4)
    {
      if (a4 != 1
        || (v32 = a1[8], *(_QWORD *)(v32 + 48) <= v24)
        || !*(_WORD *)(*(_QWORD *)(v32 + 40) + 2 * v24)
        || llvm::LiveRegMatrix::isPhysRegUsed(a1[3], v24))
      {
        if (llvm::DefaultEvictionAdvisor::canEvictInterferenceBasedOnCost((uint64_t)a1, a2, v24, 0, (uint64_t)&v33, a5))
        {
          v20 = v24;
          if ((v12 & 0x80000000) != 0)
            break;
        }
      }
    }
    v25 = *(_DWORD *)(a3 + 72);
    if (v25 <= (int)v12)
    {
      v26 = v12;
    }
    else
    {
      LODWORD(v22) = v12 + 1;
      v26 = v12 + 1;
    }
    if ((v26 & 0x80000000) == 0 && v26 < v25)
    {
      v27 = *(_QWORD *)(a3 + 56);
      v28 = *(unsigned __int16 *)(v27 + 2 * v26);
      if ((v28 - 1) <= 0x3FFFFFFE)
      {
        v29 = *(_QWORD *)(a3 + 8);
        do
        {
          if (v29)
          {
            v30 = 2 * v29;
            v31 = *(unsigned __int16 **)a3;
            while (*v31 != (unsigned __int16)v28)
            {
              ++v31;
              v30 -= 2;
              if (!v30)
              {
                v31 = (unsigned __int16 *)(*(_QWORD *)a3 + 2 * v29);
                break;
              }
            }
          }
          else
          {
            v31 = *(unsigned __int16 **)a3;
          }
          if (v29 == ((uint64_t)v31 - *(_QWORD *)a3) >> 1)
            break;
          v22 = (v26 + 1);
          if ((_DWORD)v22 == v25)
            break;
          v28 = *(unsigned __int16 *)(v27 + 2 * v22);
          ++v26;
        }
        while ((v28 - 1) <= 0x3FFFFFFE);
      }
    }
    LODWORD(v12) = v22;
  }
  while (v15 != (_DWORD)v22);
  return v20;
}

void sub_1C522B4F4()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C522B508(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void sub_1C522B520(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C522B544(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  const char *v4;
  __int16 v5;
  uint64_t (**v6)(llvm::DiagnosticInfo *__hidden);
  int v7;
  char v8;
  uint64_t v9;
  const char **v10;
  uint64_t v11;

  if (*(_BYTE *)(a1 + 32))
  {
    v2 = *a2;
    v4 = "Requested regalloc eviction advisor analysis could be created. Using default";
    v5 = 259;
    v7 = 0;
    v8 = 0;
    v6 = &off_1E814E960;
    v9 = 0;
    v10 = &v4;
    v11 = 0;
    llvm::LLVMContext::diagnose(v2, (const llvm::DiagnosticInfo *)&v6);
  }
  return 0;
}

int8x16_t *sub_1C522B5AC@<X0>(uint64_t a1@<X1>, int8x16_t *a2@<X2>, int8x16_t **a3@<X8>)
{
  int8x16_t *v6;
  int8x16_t *result;

  v6 = (int8x16_t *)operator new();
  result = llvm::RegAllocEvictionAdvisor::RegAllocEvictionAdvisor(v6, a1, a2);
  result->i64[0] = (uint64_t)&off_1E8149108;
  *a3 = result;
  return result;
}

void sub_1C522B60C(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    v2 = a1;
    v3 = a1 + 40 * a2;
    do
    {
      sub_1C620A874(*(unsigned __int8 **)v2, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
      v2 += 40;
    }
    while (v2 != v3);
  }
}

unint64_t sub_1C522B650(unint64_t a1)
{
  unint64_t v3;
  unint64_t v5;

  if (qword_1ED7FE1E0 >= HIDWORD(qword_1ED7FE1E0))
  {
    v3 = qword_1ED7FE1E0 + 1;
    if (qword_1ED7FE1D8 <= a1 && qword_1ED7FE1D8 + 48 * (unint64_t)qword_1ED7FE1E0 > a1)
    {
      v5 = a1 - qword_1ED7FE1D8;
      sub_1C620A928(v3);
      return qword_1ED7FE1D8 + v5;
    }
    else
    {
      sub_1C620A928(v3);
    }
  }
  return a1;
}

uint64_t sub_1C522B6C4()
{
  __int128 v1;
  int v2;
  int *v3;
  int v4;
  int v5;
  __n128 v6;
  _QWORD v7[2];
  int v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  int v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  int v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = 1;
  v5 = 1;
  v2 = 0;
  v3 = &v2;
  *(_QWORD *)&v1 = "Enable regalloc advisor mode";
  *((_QWORD *)&v1 + 1) = 28;
  v6.n128_u64[0] = (unint64_t)v7;
  v7[0] = "default";
  v7[1] = 7;
  v8 = 0;
  v9 = "Default";
  v10 = 7;
  v11 = "release";
  v12 = 7;
  v13 = 1;
  v14 = "precompiled";
  v15 = 11;
  v16 = "development";
  v17 = 11;
  v18 = 2;
  v19 = "for training";
  v20 = 12;
  v6.n128_u64[1] = 0x400000003;
  sub_1C620A6BC(&v5, &v4, &v3, &v1, (uint64_t)&v6);
  if ((_QWORD *)v6.n128_u64[0] != v7)
    free((void *)v6.n128_u64[0]);
  __cxa_atexit((void (*)(void *))sub_1C620A2F4, &qword_1ED7FE130, &dword_1C475E000);
  LODWORD(v3) = 1;
  v6.n128_u64[0] = (unint64_t)"Local reassignment can yield better allocation decisions, but may be compile time intensive";
  v6.n128_u64[1] = 91;
  LOBYTE(v5) = 0;
  *(_QWORD *)&v1 = &v5;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED82FB68, "enable-local-reassign", &v3, &v6, (_BYTE **)&v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED82FB68, &dword_1C475E000);
  LODWORD(v3) = 1;
  v6.n128_u64[0] = (unint64_t)"Number of interferences after which we declare an interference unevictable and bail"
                                     " out. This is a compilation cost-saving consideration. To disable, pass a very large number.";
  v6.n128_u64[1] = 175;
  v5 = 10;
  *(_QWORD *)&v1 = &v5;
  sub_1C620A9F4(&v3, (__int128 *)&v6, (int **)&v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &EvictInterferenceCutoff, &dword_1C475E000);
}

uint64_t sub_1C522B8A8(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Fast Register Allocator";
  *(_QWORD *)(v2 + 8) = 23;
  *(_QWORD *)(v2 + 16) = "regallocfast";
  *(_QWORD *)(v2 + 24) = 12;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F2F40;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C522BBF8;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C522B938()
{
  return 1;
}

uint64_t sub_1C522B940(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1C4776848(a1, (uint64_t)&unk_1EF8F2F40);
  *(_QWORD *)v6 = &off_1E8149340;
  *(_QWORD *)(v6 + 280) = 0;
  *(_DWORD *)(v6 + 288) = 0;
  *(_QWORD *)(v6 + 296) = 0;
  *(_QWORD *)(v6 + 304) = 0;
  *(_QWORD *)(v6 + 312) = 0;
  *(_QWORD *)(v6 + 320) = v6 + 344;
  *(_QWORD *)(v6 + 328) = 0;
  *(_QWORD *)(v6 + 336) = 4;
  *(_QWORD *)(v6 + 352) = v6 + 368;
  *(_QWORD *)(v6 + 360) = 0x600000000;
  *(_DWORD *)(v6 + 416) = 0;
  *(_QWORD *)(v6 + 424) = v6 + 440;
  *(_QWORD *)(v6 + 432) = 0x600000000;
  *(_DWORD *)(v6 + 488) = 0;
  *(_QWORD *)(v6 + 504) = 0;
  *(_QWORD *)(v6 + 512) = 0;
  *(_QWORD *)(v6 + 496) = 0;
  v7 = *(_QWORD *)(a2 + 24);
  if (v7)
  {
    if (v7 == a2)
    {
      *(_QWORD *)(a1 + 544) = a1 + 520;
      (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 544) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 544) = 0;
  }
  *(_QWORD *)(a1 + 560) = a1 + 576;
  *(_QWORD *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 576) = -1;
  *(_BYTE *)(a1 + 584) = a3;
  *(_QWORD *)(a1 + 592) = a1 + 608;
  *(_QWORD *)(a1 + 600) = 0x800000000;
  *(_QWORD *)(a1 + 800) = 0;
  *(_DWORD *)(a1 + 808) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_DWORD *)(a1 + 832) = 0;
  *(_DWORD *)(a1 + 856) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_DWORD *)(a1 + 880) = 0;
  *(_QWORD *)(a1 + 888) = a1 + 904;
  *(_QWORD *)(a1 + 896) = 0x600000000;
  *(_DWORD *)(a1 + 952) = 0;
  *(_QWORD *)(a1 + 976) = 0;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_QWORD *)(a1 + 984) = a1 + 1000;
  *(_QWORD *)(a1 + 992) = 0x2000000000;
  *(_QWORD *)(a1 + 1256) = a1 + 1280;
  *(_OWORD *)(a1 + 1264) = xmmword_1C6464ED0;
  *(_QWORD *)(a1 + 1296) = 0;
  *(_DWORD *)(a1 + 1304) = 0;
  *(_QWORD *)(a1 + 1312) = a1 + 1336;
  *(_QWORD *)(a1 + 1320) = 0;
  *(_QWORD *)(a1 + 1328) = 8;
  *(_QWORD *)(a1 + 1352) = 0;
  *(_DWORD *)(a1 + 1360) = 0;
  *(_QWORD *)(a1 + 1368) = a1 + 1392;
  *(_OWORD *)(a1 + 1376) = xmmword_1C6464ED0;
  *(_QWORD *)(a1 + 1408) = a1 + 1424;
  *(_QWORD *)(a1 + 1416) = 0x600000000;
  return a1;
}

uint64_t llvm::createFastRegisterAllocator(_QWORD *a1, char a2)
{
  uint64_t v4;
  _QWORD *v5;
  void (**v6)(void);
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  v5 = (_QWORD *)a1[3];
  if (v5)
  {
    if (v5 == a1)
    {
      v9 = v8;
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v8);
    }
    else
    {
      v9 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    }
  }
  else
  {
    v9 = 0;
  }
  sub_1C522B940(v4, (uint64_t)v8, a2);
  if (v9 == v8)
  {
    v6 = (void (**)(void))(v8[0] + 32);
    goto LABEL_10;
  }
  if (v9)
  {
    v6 = (void (**)(void))(*v9 + 40);
LABEL_10:
    (*v6)();
  }
  return v4;
}

uint64_t sub_1C522BBF8()
{
  uint64_t v0;
  void (**v1)(void);
  _QWORD v3[3];
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  v3[0] = &off_1E7FB3428;
  v3[1] = sub_1C522B938;
  v4 = v3;
  sub_1C522B940(v0, (uint64_t)v3, 1);
  if (v4 == v3)
  {
    v1 = (void (**)(void))(v3[0] + 32);
    goto LABEL_5;
  }
  if (v4)
  {
    v1 = (void (**)(void))(*v4 + 40);
LABEL_5:
    (*v1)();
  }
  return v0;
}

void sub_1C522BCBC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;

  *(_QWORD *)a1 = &off_1E8149340;
  v2 = *(void **)(a1 + 1408);
  if (v2 != (void *)(a1 + 1424))
    free(v2);
  v3 = *(void **)(a1 + 1368);
  if (v3 != (void *)(a1 + 1392))
    free(v3);
  free(*(void **)(a1 + 1352));
  v4 = *(void **)(a1 + 1312);
  if (v4 != (void *)(a1 + 1336))
    free(v4);
  free(*(void **)(a1 + 1296));
  v5 = *(void **)(a1 + 1256);
  if (v5 != (void *)(a1 + 1280))
    free(v5);
  v6 = *(void **)(a1 + 984);
  if (v6 != (void *)(a1 + 1000))
    free(v6);
  v7 = *(void **)(a1 + 960);
  if (v7)
  {
    *(_QWORD *)(a1 + 968) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 888);
  if (v8 != (void *)(a1 + 904))
    free(v8);
  v9 = *(unsigned int *)(a1 + 880);
  v10 = *(_QWORD *)(a1 + 864);
  if ((_DWORD)v9)
  {
    v11 = 32 * v9;
    v12 = (_QWORD *)(v10 + 24);
    do
    {
      if (*((_DWORD *)v12 - 6) <= 0xFFFFFFFD)
      {
        v13 = (_QWORD *)*(v12 - 2);
        if (v12 != v13)
          free(v13);
      }
      v12 += 4;
      v11 -= 32;
    }
    while (v11);
    v10 = *(_QWORD *)(a1 + 864);
  }
  MEMORY[0x1CAA32FB4](v10, 8);
  v14 = *(unsigned int *)(a1 + 856);
  v15 = *(_QWORD *)(a1 + 840);
  if ((_DWORD)v14)
  {
    v16 = 40 * v14;
    v17 = (_QWORD *)(v15 + 24);
    do
    {
      if (*((_DWORD *)v17 - 6) <= 0xFFFFFFFD)
      {
        v18 = (_QWORD *)*(v17 - 2);
        if (v17 != v18)
          free(v18);
      }
      v17 += 5;
      v16 -= 40;
    }
    while (v16);
    v15 = *(_QWORD *)(a1 + 840);
  }
  MEMORY[0x1CAA32FB4](v15, 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 816), 4);
  free(*(void **)(a1 + 800));
  v19 = *(void **)(a1 + 592);
  if (v19 != (void *)(a1 + 608))
    free(v19);
  v20 = *(void **)(a1 + 560);
  if (v20 != (void *)(a1 + 576))
    free(v20);
  v21 = *(_QWORD **)(a1 + 544);
  if (v21 == (_QWORD *)(a1 + 520))
  {
    v22 = 4;
    v21 = (_QWORD *)(a1 + 520);
  }
  else
  {
    if (!v21)
      goto LABEL_38;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_38:
  sub_1C61D92E0((uint64_t *)(a1 + 280));
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v23 = *(void **)(a1 + 176);
  if (v23 != (void *)(a1 + 192))
    free(v23);
  v24 = *(void **)(a1 + 104);
  if (v24 != (void *)(a1 + 120))
    free(v24);
  v25 = *(void **)(a1 + 32);
  if (v25 != (void *)(a1 + 48))
    free(v25);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C522BEE8(uint64_t a1)
{
  sub_1C522BCBC(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C522BF0C()
{
  return "Fast Register Allocator";
}

void *sub_1C522BF1C(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C522BF4C(uint64_t a1, const llvm::MachineFunction *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  int v10;
  size_t v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  size_t v15;
  unsigned int v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  llvm::MachineBasicBlock *v22;
  unint64_t v24;
  uint64_t v25;
  unsigned __int16 *v26;
  BOOL v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unsigned __int16 *v32;
  unsigned __int16 *v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  unsigned __int16 *v41;
  unsigned __int16 *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  unsigned __int16 *v50;
  int v51;
  uint64_t k;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  int v64;
  int *v65;
  int *v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  unsigned __int16 *v77;
  unsigned __int16 *v78;
  int v79;
  int v80;
  uint64_t v81;
  int v82;
  _BOOL4 v83;
  _BOOL4 v84;
  uint64_t v85;
  int *v86;
  int v87;
  int v88;
  char *v89;
  char *v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  char *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int16 *v102;
  int v103;
  uint64_t v104;
  unsigned int v105;
  int *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  unint64_t v111;
  _DWORD *v112;
  unsigned int **v113;
  uint64_t v114;
  unsigned int *v115;
  int v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  int v120;
  int *v121;
  int v122;
  BOOL v123;
  int v124;
  int *v125;
  int v126;
  BOOL v127;
  int v128;
  int v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  int v133;
  int v134;
  BOOL v135;
  int v136;
  unint64_t v137;
  uint64_t v138;
  size_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int *v146;
  int v147;
  unsigned int v148;
  BOOL v149;
  uint64_t v150;
  _QWORD *v151;
  unsigned __int16 *v152;
  unsigned __int16 *v153;
  int v154;
  int v155;
  int v156;
  _QWORD *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  int v169;
  _WORD *v170;
  uint64_t v171;
  unsigned int v172;
  int v174;
  unsigned int v175;
  uint64_t v176;
  unsigned __int16 *v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  _DWORD *v183;
  uint64_t v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t i;
  uint64_t v188;
  unsigned int v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int **v196;
  uint64_t v197;
  int *v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  _DWORD *v207;
  _DWORD *v208;
  unint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  unint64_t v213;
  unsigned __int16 *v214;
  unsigned __int16 *v215;
  int v216;
  int v217;
  uint64_t v218;
  int v219;
  unint64_t v220;
  char v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  int v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unsigned int *v235;
  unsigned int v236;
  unsigned int v237;
  uint64_t v238;
  llvm::MachineInstr *v239;
  unsigned int *v240;
  uint64_t v241;
  unsigned int v242;
  unsigned int *v243;
  unsigned __int16 ***v244;
  unsigned int v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  unsigned int v250;
  unsigned int v251;
  unsigned int *v252;
  unsigned int *v253;
  unsigned int v254;
  unsigned int v255;
  uint64_t v256;
  unsigned int v257;
  unsigned int v258;
  uint64_t v259;
  unsigned int v260;
  unsigned int v261;
  unsigned __int16 ***v262;
  unsigned int v263;
  uint64_t v264;
  int v265;
  _QWORD *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unsigned int v270;
  unsigned __int16 *v271;
  unsigned __int16 *v272;
  int v273;
  uint64_t v274;
  int v275;
  unint64_t v277;
  uint64_t j;
  uint64_t v279;
  unsigned int *v280;
  uint64_t v281;
  int v282;
  int *v283;
  unsigned int *v284;
  unsigned int *v285;
  unsigned int *v286;
  int v287;
  int v288;
  unint64_t v289;
  uint64_t v290;
  _QWORD *v291;
  unsigned __int16 *v292;
  unsigned __int16 *v293;
  int v294;
  int v295;
  int v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  int v300;
  unsigned __int16 *v301;
  unsigned __int16 *v302;
  uint64_t v303;
  int *v304;
  int v305;
  unsigned int v306;
  BOOL v307;
  uint64_t v308;
  uint64_t v309;
  unsigned int v310;
  unsigned int v311;
  int v312;
  unsigned int v313;
  unsigned int v314;
  uint64_t v315;
  unsigned int v316;
  unsigned int v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  llvm::MachineFunction *v322;
  unsigned __int8 *v323;
  llvm::MachineInstr *v324;
  uint64_t v325;
  llvm::MachineInstr *v326;
  uint64_t v327;
  llvm::MachineInstr *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  llvm::MachineFunction *v333;
  llvm::MachineInstr *v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t *v340;
  uint64_t v341;
  uint64_t v342;
  llvm::MachineInstr *v343;
  int v344;
  unsigned int v345;
  uint64_t v346;
  uint64_t v347;
  unsigned int v348;
  uint64_t v349;
  _QWORD *v350;
  unint64_t v351;
  _QWORD *m;
  unsigned int v353;
  _DWORD *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unsigned int *v359;
  unsigned int *v360;
  uint64_t *v361;
  uint64_t *v362;
  uint64_t v363;
  uint64_t v364;
  unsigned int *v365;
  uint64_t v366;
  uint64_t *v367;
  uint64_t *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  unsigned int *v373;
  unsigned int v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  void *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t *v385;
  uint64_t v386;
  llvm::MachineBasicBlock *v387;
  unint64_t *v388;
  unsigned int v389;
  llvm::MachineFunction *v390;
  int v391;
  char v392;
  uint64_t *v393;
  unsigned int *v394;
  llvm::MachineBasicBlock *v395;
  unsigned __int16 *v396;
  _WORD *v397;
  _QWORD *v398;
  uint64_t v399;
  _QWORD *v400;
  uint64_t *v401;
  uint64_t v402;
  _QWORD *v403;
  int v404;
  uint64_t v405;
  char v406;
  uint64_t v407;
  uint64_t *v408;
  int v409;
  char *v410;
  uint64_t v411;
  char *v412;
  _BYTE v413[24];
  _BYTE *v414;
  char *v415;
  char *v416;
  _BYTE v417[24];
  _BYTE *v418;
  void *v419[2];
  __int128 v420;
  _QWORD *v421;
  __int128 *v422;
  char *v423;
  _QWORD v424[3];
  _QWORD *v425;
  __int128 v426;
  _OWORD v427[3];
  unsigned __int8 *v428;
  int v429;
  uint64_t v430;
  char *v431;
  _QWORD *v432;
  uint64_t v433;
  uint64_t v434;

  v3 = a1;
  v434 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 256) = *((_QWORD *)a2 + 5);
  v4 = *((_QWORD *)a2 + 2);
  *(_QWORD *)(a1 + 264) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 176))(v4);
  *(_QWORD *)(v3 + 272) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  *(_QWORD *)(v3 + 248) = *((_QWORD *)a2 + 7);
  llvm::MachineRegisterInfo::freezeReservedRegs(*(llvm::MachineRegisterInfo **)(v3 + 256), a2);
  v401 = (uint64_t *)(v3 + 280);
  llvm::RegisterClassInfo::runOnMachineFunction((llvm::RegisterClassInfo *)(v3 + 280), a2);
  v5 = *(_DWORD *)(*(_QWORD *)(v3 + 264) + 44);
  *(_QWORD *)(v3 + 1264) = 0;
  v408 = (uint64_t *)(v3 + 1256);
  sub_1C61D8D14((void *)(v3 + 1256), v5);
  v393 = (uint64_t *)(v3 + 1312);
  *(_QWORD *)(v3 + 1320) = 0;
  sub_1C61D8D14((void *)(v3 + 1312), v5);
  v6 = *(unsigned int *)(*(_QWORD *)(v3 + 256) + 32);
  v7 = (_QWORD *)(v3 + 560);
  v8 = *(unsigned int *)(v3 + 568);
  if ((_DWORD)v8 == (_DWORD)v6)
    goto LABEL_11;
  v9 = *(_DWORD *)(*(_QWORD *)(v3 + 256) + 32);
  if (v8 <= v6)
  {
    v10 = *(_DWORD *)(v3 + 576);
    v11 = v6 - v8;
    v12 = *(unsigned int *)(v3 + 568);
    v13 = *(_DWORD *)(v3 + 568);
    if (v6 > *(_DWORD *)(v3 + 572))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 560, v3 + 576, *(unsigned int *)(*(_QWORD *)(v3 + 256) + 32), 4);
      v12 = *(unsigned int *)(v3 + 568);
      v13 = *(_DWORD *)(v3 + 568);
      if (v11)
      {
LABEL_5:
        v14 = (_DWORD *)(*v7 + 4 * v12);
        v15 = v8 - v6;
        do
        {
          *v14++ = v10;
          v149 = __CFADD__(v15++, 1);
        }
        while (!v149);
        v13 = *(_DWORD *)(v3 + 568);
      }
    }
    else if (v11)
    {
      goto LABEL_5;
    }
    v9 = v13 + v11;
  }
  *(_DWORD *)(v3 + 568) = v9;
LABEL_11:
  v16 = *(_DWORD *)(v3 + 808);
  v411 = v3;
  v403 = (_QWORD *)(v3 + 560);
  if (v16 < v6 || v16 >> 2 > v6)
  {
    free(*(void **)(v3 + 800));
    v17 = malloc_type_calloc(v6, 1uLL, 0x6D9A4F0CuLL);
    if (!v17)
    {
      if ((_DWORD)v6 || (v17 = malloc_type_malloc(1uLL, 0x4065EBACuLL), v7 = (_QWORD *)(v3 + 560), !v17))
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    *(_QWORD *)(v3 + 800) = v17;
    *(_DWORD *)(v3 + 808) = v6;
  }
  v400 = (_QWORD *)(v3 + 888);
  *(_DWORD *)(v3 + 896) = 0;
  *(_DWORD *)(v3 + 952) = v6;
  if ((v6 + 63) < 0x40)
  {
    v21 = 0;
  }
  else
  {
    v18 = (v6 + 63) >> 6;
    if (v18 > *(_DWORD *)(v3 + 900))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v400, v3 + 904, v18, 8);
      v19 = *(unsigned int *)(v3 + 896);
      LODWORD(v6) = *(_DWORD *)(v3 + 952);
      v20 = *(_DWORD *)(v3 + 896);
    }
    else
    {
      v19 = 0;
      v20 = 0;
    }
    bzero((void *)(*(_QWORD *)(v3 + 888) + 8 * v19), 8 * v18);
    v21 = (v20 + v18);
    *(_DWORD *)(v3 + 896) = v21;
  }
  if ((v6 & 0x3F) != 0)
    *(_QWORD *)(*v400 + 8 * v21 - 8) &= ~(-1 << (v6 & 0x3F));
  v22 = (llvm::MachineBasicBlock *)*((_QWORD *)a2 + 41);
  v387 = (const llvm::MachineFunction *)((char *)a2 + 320);
  if (v22 == (const llvm::MachineFunction *)((char *)a2 + 320))
    goto LABEL_22;
  v386 = v3 + 960;
  v394 = (unsigned int *)(v3 + 816);
  v383 = v3 + 1424;
  v384 = v3 + 1408;
  v382 = v3 + 1368;
  v380 = v3 + 984;
  v381 = (void *)(v3 + 1392);
  v399 = v3 + 592;
  v379 = v3 + 1000;
  v385 = (uint64_t *)(v3 + 864);
  v402 = v3 + 840;
  do
  {
    *(_QWORD *)(v3 + 552) = v22;
    v24 = *(unsigned int *)(*(_QWORD *)(v3 + 264) + 44);
    LODWORD(v419[0]) = 0;
    sub_1C522E4AC(v386, v24, (int *)v419);
    llvm::MachineBasicBlock::liveout_begin(v22, (uint64_t)v419);
    v25 = *((_QWORD *)v22 + 12);
    v426 = *(_OWORD *)v419;
    v427[0] = v420;
    while (*((_QWORD *)&v426 + 1) == *(_QWORD *)&v427[0])
    {
      if (v25 == *((_QWORD *)&v426 + 1))
        goto LABEL_39;
      v26 = (unsigned __int16 *)*((_QWORD *)&v427[0] + 1);
LABEL_33:
      v28 = *v26;
      v29 = *(_QWORD *)(v3 + 264);
      if (v29)
        v30 = (_QWORD *)(v29 + 8);
      else
        v30 = 0;
      v31 = *(unsigned int *)(*v30 + 24 * v28 + 16);
      v32 = (unsigned __int16 *)(v30[6] + ((v31 >> 3) & 0x1FFFFFFE));
      v34 = *v32;
      v33 = v32 + 1;
      v35 = v34 + (v31 & 0xF) * v28;
      v36 = *(_QWORD *)(v3 + 960);
      do
      {
        *(_DWORD *)(v36 + 4 * (unsigned __int16)v35) = 1;
        v37 = *v33++;
        v35 += v37;
      }
      while (v37);
      sub_1C61E99C4((unsigned __int16 *)&v426);
    }
    v26 = (unsigned __int16 *)*((_QWORD *)&v427[0] + 1);
    v27 = *((_QWORD *)&v426 + 1) == v25 && *((_QWORD *)&v427[0] + 1) == 0;
    if (!v27)
      goto LABEL_33;
LABEL_39:
    *(_DWORD *)(v3 + 992) = 0;
    v395 = v22;
    v39 = *((_QWORD *)v22 + 6);
    v38 = (_QWORD *)((char *)v22 + 48);
    v40 = v39 & 0xFFFFFFFFFFFFFFF8;
    if ((v39 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(_BYTE *)v40 & 4) == 0)
    {
      while ((*(_WORD *)(v40 + 44) & 4) != 0)
        v40 = *(_QWORD *)v40 & 0xFFFFFFFFFFFFFFF8;
    }
    v398 = v38;
    if ((_QWORD *)v40 == v38)
      goto LABEL_45;
    while (2)
    {
      if (**(unsigned __int16 **)(v40 + 16) - 13 <= 1)
      {
        sub_1C620AD54(&v428, v40);
        v56 = v433;
        if (v433)
          v57 = v431;
        else
          v57 = (char *)v428;
        if (v433)
          v58 = (char *)&v432;
        else
          v58 = (char *)&v428[4 * v429];
        if (v57 == v58)
        {
LABEL_79:
          sub_1C47655E8((uint64_t)&v431, v432);
          if (v428 != (unsigned __int8 *)&v430)
            free(v428);
          v38 = v398;
          goto LABEL_421;
        }
        v410 = v58;
        while (2)
        {
          v86 = (int *)(v57 + 28);
          if (!v56)
            v86 = (int *)v57;
          v87 = *v86;
          if (*v86 < 0)
          {
            v88 = *(_DWORD *)(*v7 + 4 * (v87 & 0x7FFFFFFF));
            if (v88 != -1)
            {
              llvm::updateDbgValueForSpill(v40, v88, v87);
              goto LABEL_123;
            }
            v91 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 800) + (v87 & 0x7FFFFFFF));
            v92 = v3;
            v3 = *(unsigned int *)(v3 + 600);
            v93 = *(_QWORD *)(v92 + 592);
            if (v3 > v91)
            {
              while (1)
              {
                v94 = v91;
                if (((*(_DWORD *)(v93 + 24 * v91 + 8) ^ v87) & 0x7FFFFFFF) == 0)
                  break;
                v91 += 256;
                if (v94 + 256 >= v3)
                  goto LABEL_135;
              }
              v3 = v91;
            }
LABEL_135:
            *(_QWORD *)&v426 = v427;
            *((_QWORD *)&v426 + 1) = 0x600000000;
            sub_1C61F1700(v40, v87, v419);
            v415 = (char *)v419[0];
            v416 = (char *)v419[1];
            if (v422)
            {
              if (v422 == &v420)
              {
                v418 = v417;
                (*(void (**)(__int128 *, _BYTE *))(v420 + 24))(&v420, v417);
              }
              else
              {
                v418 = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)v422 + 16))();
              }
            }
            else
            {
              v418 = 0;
            }
            v412 = v423;
            if (v425)
            {
              if (v425 == v424)
              {
                v414 = v413;
                (*(void (**)(_QWORD *))(v424[0] + 24))(v424);
              }
              else
              {
                v414 = (_BYTE *)(*(uint64_t (**)(void))(*v425 + 16))();
              }
            }
            else
            {
              v414 = 0;
            }
LABEL_145:
            v95 = v415;
            while (v95 != v412)
            {
              v96 = DWORD2(v426);
              if (DWORD2(v426) >= (unint64_t)HIDWORD(v426))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v426, (uint64_t)v427, DWORD2(v426) + 1, 8);
                v96 = DWORD2(v426);
              }
              *(_QWORD *)(v426 + 8 * v96) = v95;
              ++DWORD2(v426);
              while (1)
              {
                v95 = v415 + 32;
                v415 = v95;
                if (v95 == v416)
                  break;
                if (!v418)
                {
                  sub_1C485C2F0();
                  goto LABEL_576;
                }
                if ((*(unsigned int (**)(_BYTE *, char *))(*(_QWORD *)v418 + 48))(v418, v95))
                  goto LABEL_145;
              }
            }
            v97 = v414;
            if (v414 == v413)
            {
              v97 = v413;
              v98 = 4;
              goto LABEL_158;
            }
            if (v414)
            {
              v98 = 5;
LABEL_158:
              (*(void (**)(void))(*v97 + 8 * v98))();
            }
            v99 = v418;
            if (v418 == v417)
            {
              v99 = v417;
              v100 = 4;
              goto LABEL_163;
            }
            if (v418)
            {
              v100 = 5;
LABEL_163:
              (*(void (**)(void))(*v99 + 8 * v100))();
            }
            sub_1C619047C(v419);
            if (v93 + 24 * v3 == *(_QWORD *)(v411 + 592) + 24 * *(unsigned int *)(v411 + 600)
              || (v101 = v93 + 24 * v3,
                  v103 = *(unsigned __int16 *)(v101 + 12),
                  v102 = (unsigned __int16 *)(v101 + 12),
                  !v103))
            {
              v104 = v411;
              v105 = *(_DWORD *)(v411 + 880);
              if (!v105)
              {
                v106 = 0;
                goto LABEL_168;
              }
              v108 = *(_QWORD *)(v411 + 864);
              v109 = (v105 - 1) & (37 * v87);
              v106 = (int *)(v108 + 32 * v109);
              v110 = *v106;
              if (v87 == *v106)
              {
LABEL_174:
                v111 = v106[4];
                if (v111 >= v106[5])
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v106 + 2), (uint64_t)(v106 + 6), v111 + 1, 8);
                  v111 = v106[4];
                }
                *(_QWORD *)(*((_QWORD *)v106 + 1) + 8 * v111) = v40;
                ++v106[4];
                goto LABEL_177;
              }
              v125 = 0;
              v126 = 1;
              while (v110 != -1)
              {
                if (v125)
                  v127 = 0;
                else
                  v127 = v110 == -2;
                if (v127)
                  v125 = v106;
                v128 = v109 + v126++;
                v109 = v128 & (v105 - 1);
                v106 = (int *)(v108 + 32 * v109);
                v110 = *v106;
                if (v87 == *v106)
                  goto LABEL_174;
              }
              if (v125)
                v106 = v125;
LABEL_168:
              v107 = *(_DWORD *)(v411 + 872);
              if (4 * v107 + 4 >= 3 * v105)
              {
                sub_1C522E72C(v385, 2 * v105);
                v116 = *(_DWORD *)(v411 + 880);
                if (!v116)
                  goto LABEL_208;
                v117 = *(_QWORD *)(v411 + 864);
                v118 = v116 - 1;
                v119 = v118 & (37 * v87);
                v106 = (int *)(v117 + 32 * v119);
                v120 = *v106;
                if (v87 == *v106)
                  goto LABEL_170;
                v121 = 0;
                v122 = 1;
                while (v120 != -1)
                {
                  if (v121)
                    v123 = 0;
                  else
                    v123 = v120 == -2;
                  if (v123)
                    v121 = v106;
                  v124 = v119 + v122++;
                  v119 = v124 & v118;
                  v106 = (int *)(v117 + 32 * v119);
                  v120 = *v106;
                  v104 = v411;
                  if (v87 == *v106)
                    goto LABEL_170;
                }
              }
              else
              {
                if (v105 + ~v107 - *(_DWORD *)(v411 + 876) > v105 >> 3)
                {
LABEL_170:
                  ++*(_DWORD *)(v104 + 872);
                  if (*v106 != -1)
                    --*(_DWORD *)(v104 + 876);
                  *v106 = v87;
                  *((_QWORD *)v106 + 1) = v106 + 6;
                  *((_QWORD *)v106 + 2) = 0x100000000;
                  goto LABEL_174;
                }
                sub_1C522E72C(v385, v105);
                v129 = *(_DWORD *)(v411 + 880);
                if (!v129)
                {
LABEL_208:
                  v106 = 0;
                  goto LABEL_170;
                }
                v130 = *(_QWORD *)(v411 + 864);
                v131 = v129 - 1;
                v132 = v131 & (37 * v87);
                v106 = (int *)(v130 + 32 * v132);
                v133 = *v106;
                if (v87 == *v106)
                  goto LABEL_170;
                v121 = 0;
                v134 = 1;
                while (v133 != -1)
                {
                  if (v121)
                    v135 = 0;
                  else
                    v135 = v133 == -2;
                  if (v135)
                    v121 = v106;
                  v136 = v132 + v134++;
                  v132 = v136 & v131;
                  v106 = (int *)(v130 + 32 * v132);
                  v133 = *v106;
                  v104 = v411;
                  if (v87 == *v106)
                    goto LABEL_170;
                }
              }
              if (v121)
                v106 = v121;
              v104 = v411;
              goto LABEL_170;
            }
            if (DWORD2(v426))
            {
              v113 = (unsigned int **)v426;
              v114 = 8 * DWORD2(v426);
              do
              {
                v115 = *v113++;
                sub_1C522E5C4(v411, (llvm::MachineInstr *)v40, v115, *v102);
                v114 -= 8;
              }
              while (v114);
            }
LABEL_177:
            LODWORD(v419[0]) = v87;
            v112 = sub_1C620AE08(v402, (int *)v419);
            sub_1C618A450(v112 + 2, (_BYTE *)v426, (_BYTE *)(v426 + 8 * DWORD2(v426)));
            if ((_OWORD *)v426 != v427)
              free((void *)v426);
            v58 = v410;
            v3 = v411;
            v7 = v403;
            if (!v56)
            {
LABEL_180:
              v90 = v57 + 4;
              goto LABEL_181;
            }
          }
          else
          {
LABEL_123:
            if (!v56)
              goto LABEL_180;
          }
          v89 = (char *)*((_QWORD *)v57 + 1);
          if (v89)
          {
            do
            {
              v90 = v89;
              v89 = *(char **)v89;
            }
            while (v89);
          }
          else
          {
            do
            {
              v90 = (char *)*((_QWORD *)v57 + 2);
              v27 = *(_QWORD *)v90 == (_QWORD)v57;
              v57 = v90;
            }
            while (!v27);
          }
LABEL_181:
          v57 = v90;
          if (v90 == v58)
            goto LABEL_79;
          continue;
        }
      }
      *(_QWORD *)(v3 + 1264) = 0;
      *(_DWORD *)(v3 + 1416) = 0;
      sub_1C620B0C0(v394);
      v59 = *(unsigned int *)(v40 + 40);
      if (!(_DWORD)v59)
        goto LABEL_402;
      v60 = 0;
      v61 = 0;
      v62 = 0;
      v63 = 0;
      v409 = 0;
      v64 = 0;
      v65 = *(int **)(v40 + 32);
      v66 = &v65[8 * v59];
      do
      {
        v67 = *v65;
        if (*v65 == 12)
        {
          v69 = *((_QWORD *)v65 + 2);
          v70 = *(unsigned int *)(v3 + 1416);
          if (v70 >= *(unsigned int *)(v3 + 1420))
          {
            v391 = v60;
            v85 = v62;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v384, v383, v70 + 1, 8);
            v62 = v85;
            v60 = v391;
            v70 = *(unsigned int *)(v3 + 1416);
          }
          *(_QWORD *)(*(_QWORD *)(v3 + 1408) + 8 * v70) = v69;
          ++*(_DWORD *)(v3 + 1416);
          v61 = 1;
        }
        else if (!*v65)
        {
          v68 = v65[1];
          if ((v68 & 0x80000000) != 0)
          {
            v3 = v411;
            if ((v67 & 0x1000000) != 0)
            {
              v409 |= (v67 & 0x40000000u) >> 30;
              if ((v67 & 0xF00000) != 0
                || (v64 |= (v67 & 0x40000000u) >> 30, v63 = 1, (v67 & 0xFFF00) != 0) && (v67 & 0x10000000) == 0)
              {
                v64 = 1;
                v63 = 1;
              }
              v62 = 1;
            }
          }
          else if ((v68 - 1) > 0x3FFFFFFE
                 || ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v411 + 256) + 352) + ((v68 >> 3) & 0x1FFFFFF8)) >> v68) & 1) != 0)
          {
            v3 = v411;
          }
          else
          {
            if ((v67 & 0x1000000) != 0)
            {
              v404 = v64;
              v71 = v61;
              v72 = v62;
              v73 = sub_1C522F178(v411, v40, (unsigned __int16)v65[1]);
              v74 = *(_QWORD *)(v411 + 264);
              if (v74)
                v75 = (_QWORD *)(v74 + 8);
              else
                v75 = 0;
              v76 = *(unsigned int *)(*v75 + 24 * (unsigned __int16)v68 + 16);
              v77 = (unsigned __int16 *)(v75[6] + ((v76 >> 3) & 0x1FFFFFFE));
              v79 = *v77;
              v78 = v77 + 1;
              v80 = v79 + (v76 & 0xF) * v68;
              v3 = v411;
              v81 = *(_QWORD *)(v411 + 960);
              do
              {
                *(_DWORD *)(v81 + 4 * (unsigned __int16)v80) = 1;
                v82 = *v78++;
                v80 += v82;
              }
              while (v82);
              v67 = *v65;
              v409 |= (*v65 & 0x40000000u) >> 30;
              v62 = v72;
              if ((v73 & 1) == 0)
              {
                v67 |= 0x4000000u;
                *v65 = v67;
              }
              v63 = 1;
              v61 = v71;
              v64 = v404;
            }
            else
            {
              v3 = v411;
            }
            v83 = (v67 & 0xFFF00) != 0;
            if ((v67 & 0x1000000) == 0)
              v83 = 1;
            v84 = (v67 & 0x30000000) == 0 && v83;
            v60 |= v84;
          }
        }
        v65 += 8;
      }
      while (v65 != v66);
      v392 = v60;
      if ((v63 & 1) == 0)
        goto LABEL_298;
      if ((v62 & 1) == 0)
        goto LABEL_297;
      if ((v64 & 1) == 0)
      {
        v144 = *(unsigned int *)(v40 + 40);
        if ((_DWORD)v144)
        {
          v186 = 0;
          for (i = 0; i != v144; ++i)
          {
            v188 = *(_QWORD *)(v40 + 32);
            if ((*(_DWORD *)(v188 + v186) & 0x10000FF) == 0x1000000)
            {
              v189 = *(_DWORD *)(v188 + v186 + 4);
              if ((v189 & 0x80000000) != 0)
                sub_1C522EB64(v3, v40, i, v189, 0);
            }
            v186 += 32;
          }
          goto LABEL_297;
        }
        if ((v61 & 1) != 0)
          goto LABEL_299;
        goto LABEL_402;
      }
      *(_QWORD *)(v3 + 1376) = 0;
      *(_QWORD *)(v3 + 1320) = 0;
      v137 = *(_QWORD *)(*(_QWORD *)(v3 + 264) + 248) - *(_QWORD *)(*(_QWORD *)(v3 + 264) + 240);
      v138 = (v137 >> 3);
      *(_QWORD *)&v427[0] = 0;
      v426 = 0uLL;
      if ((v137 >> 3))
      {
        v139 = 4 * v138;
        v140 = (char *)operator new(4 * v138);
        v141 = &v140[4 * v138];
        *(_QWORD *)&v426 = v140;
        *(_QWORD *)&v427[0] = v141;
        bzero(v140, v139);
        *((_QWORD *)&v426 + 1) = v141;
      }
      v142 = *(unsigned int *)(v40 + 40);
      if (!(_DWORD)v142)
      {
        v143 = 0;
        goto LABEL_291;
      }
      v145 = 0;
      v405 = *(unsigned int *)(v40 + 40);
      while (2)
      {
        v146 = (int *)(*(_QWORD *)(v40 + 32) + 32 * v145);
        v147 = *v146;
        if (!*v146)
        {
          v148 = v146[1];
          if ((v147 & 0x30000000) == 0)
          {
            if ((v147 & 0x1000000) != 0)
            {
              v149 = (v147 & 0xFFF00) == 0 || v148 - 1 >= 0x3FFFFFFF;
              if (v149)
                goto LABEL_251;
            }
            else if (v148 - 1 > 0x3FFFFFFE)
            {
              goto LABEL_251;
            }
            v150 = *(_QWORD *)(v3 + 264);
            if (v150)
              v151 = (_QWORD *)(v150 + 8);
            else
              v151 = 0;
            v152 = (unsigned __int16 *)(v151[6]
                                      + (((unint64_t)*(unsigned int *)(*v151
                                                                            + 24 * (unsigned __int16)v146[1]
                                                                            + 16) >> 3) & 0x1FFFFFFE));
            v154 = *v152;
            v153 = v152 + 1;
            v155 = v154 + (*(_DWORD *)(*v151 + 24 * (unsigned __int16)v146[1] + 16) & 0xF) * v148;
            do
            {
              LOWORD(v419[0]) = v155;
              sub_1C61DF708(v393, (unsigned __int16 *)v419);
              v156 = *v153++;
              v155 += v156;
            }
            while (v156);
            v147 = *v146;
            v3 = v411;
            v142 = v405;
          }
LABEL_251:
          if ((v147 & 0x1000000) != 0)
          {
            if ((v148 & 0x80000000) != 0)
            {
              v179 = *(_QWORD *)(v3 + 1376);
              if ((unint64_t)(v179 + 1) > *(_QWORD *)(v3 + 1384))
              {
                llvm::SmallVectorBase<unsigned long long>::grow_pod(v382, v381, v179 + 1, 2);
                v179 = *(_QWORD *)(v3 + 1376);
              }
              *(_WORD *)(*(_QWORD *)(v3 + 1368) + 2 * v179) = v145;
              ++*(_QWORD *)(v3 + 1376);
              v180 = *(_QWORD *)(*(_QWORD *)(v3 + 264) + 240);
              v181 = *(_QWORD *)(*(_QWORD *)(v3 + 264) + 248) - v180;
              if ((v181 & 0x7FFFFFFF8) != 0)
              {
                v182 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 256) + 24) + 16 * (v148 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                 + 8);
                v183 = (_DWORD *)v426;
                v184 = (v181 >> 3);
                do
                {
                  v185 = *(unsigned __int16 *)(**(_QWORD **)v180 + 24);
                  if (((*(_DWORD *)(v182 + ((v185 >> 3) & 0x1FFCLL)) >> v185) & 1) != 0)
                    ++*v183;
                  ++v183;
                  v180 += 8;
                  --v184;
                }
                while (v184);
              }
            }
            else
            {
              v157 = *(_QWORD **)(v3 + 264);
              v158 = v157[30];
              v159 = v157[31] - v158;
              if ((v159 & 0x7FFFFFFF8) != 0)
              {
                v160 = 0;
                v161 = v157[1];
                v164 = v157 + 6;
                v163 = v157[6];
                v162 = v164[1];
                v165 = v426;
                v166 = (v159 >> 3);
                do
                {
                  v167 = *(_QWORD *)(v158 + 8 * v160);
                  v168 = ((unint64_t)*(unsigned int *)(v161 + 24 * v148 + 16) >> 3) & 0x1FFFFFFE;
                  v169 = *(unsigned __int16 *)(v162 + v168) + (*(_DWORD *)(v161 + 24 * v148 + 16) & 0xF) * v148;
                  v170 = (_WORD *)(v162 + 2 + v168);
                  while (1)
                  {
                    v171 = (unsigned __int16)v169;
                    LOWORD(v172) = *(_WORD *)(v163 + 4 * (unsigned __int16)v169);
                    if ((_WORD)v172 && v162 != 0)
                      break;
                    v174 = (unsigned __int16)*v170++;
                    v169 += v174;
                    if (!v174)
                      goto LABEL_274;
                  }
                  while (2)
                  {
                    v175 = *(unsigned __int16 *)(v163 + 4 * v171 + 2) << 16;
                    v176 = (unsigned __int16)v172;
                    while (2)
                    {
                      v177 = (unsigned __int16 *)(v162 + 2 * *(unsigned int *)(v161 + 24 * v176 + 8));
                      do
                      {
                        if ((unsigned __int16)v172 - 1 <= 0x3FFFFFFE
                          && (unint64_t)(unsigned __int16)v172 >> 3 < *(unsigned __int16 *)(*(_QWORD *)v167 + 22)
                          && ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v167 + 8)
                                                  + ((unint64_t)(unsigned __int16)v172 >> 3)) >> (v172 & 7)) & 1) != 0)
                        {
                          ++*(_DWORD *)(v165 + 4 * v160);
                          goto LABEL_274;
                        }
                        v178 = *v177++;
                        LOWORD(v172) = v178 + v172;
                      }
                      while (v178);
                      v176 = HIWORD(v175);
                      if ((_DWORD)v176)
                      {
                        v172 = HIWORD(v175);
                        v175 >>= 16;
                        continue;
                      }
                      break;
                    }
                    if (*v170)
                    {
                      v169 += (unsigned __int16)*v170++;
                      v171 = (unsigned __int16)v169;
                      LOWORD(v172) = *(_WORD *)(v163 + 4 * (unsigned __int16)v169);
                      continue;
                    }
                    break;
                  }
LABEL_274:
                  ++v160;
                }
                while (v160 != v166);
              }
            }
          }
        }
        if (++v145 != v142)
          continue;
        break;
      }
      v143 = *(_QWORD *)(v3 + 1376);
LABEL_291:
      v190 = *(_QWORD *)(v3 + 1368);
      v419[0] = (void *)v40;
      v419[1] = (void *)v3;
      *(_QWORD *)&v420 = &v426;
      v191 = 126 - 2 * __clz(v143);
      if (v143)
        v192 = v191;
      else
        v192 = 0;
      sub_1C522F44C(v190, (__int16 *)(v190 + 2 * v143), (uint64_t)v419, v192, 1);
      v193 = *(_QWORD *)(v3 + 1376);
      if (v193)
      {
        v301 = *(unsigned __int16 **)(v3 + 1368);
        v302 = &v301[v193];
        v396 = v302;
        do
        {
          v303 = *v301;
          v304 = (int *)(*(_QWORD *)(v40 + 32) + 32 * v303);
          v305 = *v304;
          v306 = v304[1];
          if ((*v304 & 0x40F00000) != 0
            || ((v305 & 0xFFF00) != 0 ? (v307 = (v305 & 0x10000000) == 0) : (v307 = 0), v307))
          {
            v313 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 800) + (v306 & 0x7FFFFFFF));
            v314 = *(_DWORD *)(v3 + 600);
            if (v314 > v313)
            {
              v315 = *(_QWORD *)(v3 + 592);
              while (1)
              {
                v316 = v313;
                if (((*(_DWORD *)(v315 + 24 * v313 + 8) ^ v306) & 0x7FFFFFFF) == 0)
                  break;
                v313 += 256;
                if (v316 + 256 >= v314)
                  goto LABEL_490;
              }
              if (v314 != v313)
              {
                v407 = v315 + 24 * v313;
                v317 = *(unsigned __int16 *)(v407 + 12);
                if (*(_WORD *)(v407 + 12))
                {
                  v397 = (_WORD *)(v407 + 12);
                  if (sub_1C5230188(v3, v317, 1))
                  {
                    v389 = v317;
                    sub_1C522F078(v3, v317);
                    *v397 = 0;
                    sub_1C523029C(v3, v40, v407, 0, 1);
                    if (!v40 || (v318 = v40, (*(_BYTE *)v40 & 4) == 0))
                    {
                      v318 = v40;
                      if ((*(_WORD *)(v40 + 44) & 8) != 0)
                      {
                        v318 = v40;
                        do
                          v318 = *(_QWORD *)(v318 + 8);
                        while ((*(_WORD *)(v318 + 44) & 8) != 0);
                      }
                    }
                    v388 = *(unint64_t **)(v318 + 8);
                    v319 = v3;
                    v320 = *(_QWORD *)(v3 + 552);
                    v321 = *(_QWORD *)(*(_QWORD *)(v319 + 272) + 8);
                    v322 = *(llvm::MachineFunction **)(v320 + 32);
                    v323 = *(unsigned __int8 **)(v40 + 56);
                    v428 = v323;
                    if (v323)
                      llvm::MetadataTracking::track((uint64_t)&v428, v323, 2);
                    v324 = (llvm::MachineInstr *)*((_QWORD *)v322 + 28);
                    if (v324)
                      *((_QWORD *)v322 + 28) = *(_QWORD *)v324;
                    else
                      v324 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v322 + 128, 72, 3);
                    v419[0] = v428;
                    v390 = v322;
                    if (v428)
                    {
                      v343 = v324;
                      llvm::MetadataTracking::retrack((uint64_t)&v428, v428, (uint64_t)v419);
                      v324 = v343;
                      v322 = v390;
                      v428 = 0;
                    }
                    v325 = v321 + 912;
                    v326 = v324;
                    llvm::MachineInstr::MachineInstr(v324, v322, v325, (unsigned __int8 **)v419, 0);
                    if (v419[0])
                      llvm::MetadataTracking::untrack((uint64_t)v419, (unsigned __int8 *)v419[0]);
                    if (v428)
                      llvm::MetadataTracking::untrack((uint64_t)&v428, v428);
                    v327 = *(_QWORD *)(v320 + 40);
                    v328 = v326;
                    *((_QWORD *)v326 + 3) = v327;
                    v329 = *(_QWORD *)(v327 + 32);
                    v330 = *((unsigned int *)v326 + 10);
                    v3 = v411;
                    if ((_DWORD)v330)
                    {
                      v336 = *((_QWORD *)v326 + 4);
                      v337 = *(_QWORD *)(v329 + 40);
                      v338 = 32 * v330;
                      do
                      {
                        if (!*(_BYTE *)v336)
                        {
                          v339 = *(unsigned int *)(v336 + 4);
                          if ((int)v339 >= 0)
                            v340 = (uint64_t *)(*(_QWORD *)(v337 + 272) + 8 * v339);
                          else
                            v340 = (uint64_t *)(*(_QWORD *)(v337 + 24) + 16 * (v339 & 0x7FFFFFFF) + 8);
                          v341 = *v340;
                          if (*v340)
                          {
                            v342 = *(_QWORD *)(v341 + 16);
                            *(_QWORD *)(v341 + 16) = v336;
                            *(_QWORD *)(v336 + 16) = v342;
                            if ((*(_BYTE *)(v336 + 3) & 1) != 0)
                            {
                              *(_QWORD *)(v336 + 24) = v341;
                            }
                            else
                            {
                              *(_QWORD *)(v336 + 24) = 0;
                              v340 = (uint64_t *)(v342 + 24);
                            }
                          }
                          else
                          {
                            *(_QWORD *)(v336 + 16) = v336;
                            *(_QWORD *)(v336 + 24) = 0;
                          }
                          *v340 = v336;
                        }
                        v336 += 32;
                        v338 -= 32;
                      }
                      while (v338);
                    }
                    v331 = *(_QWORD *)(v329 + 728);
                    if (v331)
                    {
                      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(_QWORD *)v331 + 24))(v331, v326);
                      v328 = v326;
                    }
                    v332 = *v388 & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v328 = v332 | *(_QWORD *)v328 & 7;
                    *((_QWORD *)v328 + 1) = v388;
                    *(_QWORD *)(v332 + 8) = v328;
                    *v388 = *v388 & 7 | (unint64_t)v328;
                    v419[1] = 0;
                    v420 = 0uLL;
                    HIDWORD(v419[0]) = v389;
                    LODWORD(v419[0]) = 0x1000000;
                    v333 = v322;
                    v334 = v328;
                    llvm::MachineInstr::addOperand(v328, v333, (const llvm::MachineOperand *)v419);
                    v335 = (unsigned __int16)*v397;
                    v419[1] = 0;
                    v420 = 0uLL;
                    HIDWORD(v419[0]) = v335;
                    LODWORD(v419[0]) = 0x4000000;
                    llvm::MachineInstr::addOperand(v334, v390, (const llvm::MachineOperand *)v419);
                    v305 = *(_DWORD *)(*(_QWORD *)(v40 + 32) + 32 * v303);
                  }
                }
                v302 = v396;
                if ((v305 & 0xFFF00) != 0 && (v305 & 0x10000000) == 0)
                  *(_QWORD *)v407 = v40;
              }
            }
LABEL_490:
            v308 = v3;
            v309 = v40;
            v310 = v303;
            v311 = v306;
            v312 = 1;
          }
          else
          {
            v308 = v3;
            v309 = v40;
            v310 = *v301;
            v311 = v304[1];
            v312 = 0;
          }
          sub_1C522EB64(v308, v309, v310, v311, v312);
          ++v301;
        }
        while (v301 != v302);
      }
      if ((_QWORD)v426)
      {
        *((_QWORD *)&v426 + 1) = v426;
        operator delete((void *)v426);
      }
LABEL_297:
      v194 = *(unsigned int *)(v40 + 40);
      if ((_DWORD)v194)
      {
        v284 = *(unsigned int **)(v40 + 32);
        v285 = &v284[8 * v194];
        do
        {
          v286 = v285;
          v288 = *(v285 - 8);
          v285 -= 8;
          v287 = v288;
          if ((v288 & 0x10000FF) == 0x1000000)
          {
            if ((v287 & 0xFFF00) != 0)
            {
              *v285 = v287 & 0xFFF000FF;
            }
            else if ((v287 & 0x40F00000) == 0)
            {
              v289 = *(v286 - 7);
              if ((_DWORD)v289)
              {
                if (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 256) + 352) + ((v289 >> 3) & 0x1FFFFFF8)) >> v289) & 1) == 0)
                {
                  sub_1C522F078(v3, (unsigned __int16)*(v286 - 7));
                  v290 = *(_QWORD *)(v3 + 264);
                  if (v290)
                    v291 = (_QWORD *)(v290 + 8);
                  else
                    v291 = 0;
                  v292 = (unsigned __int16 *)(v291[6]
                                            + (((unint64_t)*(unsigned int *)(*v291
                                                                                  + 24 * (unsigned __int16)v289
                                                                                  + 16) >> 3) & 0x1FFFFFFE));
                  v294 = *v292;
                  v293 = v292 + 1;
                  v295 = v294 + (*(_DWORD *)(*v291 + 24 * (unsigned __int16)v289 + 16) & 0xF) * v289;
                  do
                  {
                    LOWORD(v419[0]) = v295;
                    sub_1C511402C(v408, (unsigned __int16 *)v419);
                    v296 = *v293++;
                    v295 += v296;
                  }
                  while (v296);
                }
              }
            }
          }
        }
        while (v285 != v284);
      }
LABEL_298:
      if ((v61 & 1) != 0)
      {
LABEL_299:
        v195 = *(unsigned int *)(v3 + 1416);
        if ((_DWORD)v195)
        {
          v196 = *(int ***)(v3 + 1408);
          v197 = 8 * v195;
          do
          {
            v198 = *v196++;
            sub_1C4963F5C(*(_QWORD *)(v3 + 256) + 280, v198, 0xFFFFFFFF);
            v197 -= 8;
          }
          while (v197);
        }
        v199 = *(_DWORD *)(v3 + 600);
        if (v199)
        {
          v200 = *(_QWORD *)(v3 + 592);
          v201 = v200 + 24 * v199;
          do
          {
            v202 = *(unsigned __int16 *)(v200 + 12);
            if (*(_WORD *)(v200 + 12))
            {
              v203 = *(unsigned int *)(v3 + 1416);
              if ((_DWORD)v203)
              {
                v204 = *(_QWORD **)(v3 + 1408);
                v205 = 8 * v203;
                while ((*(_DWORD *)(*v204 + 4 * (v202 >> 5)) & (1 << v202)) != 0)
                {
                  ++v204;
                  v205 -= 8;
                  if (!v205)
                    goto LABEL_311;
                }
                sub_1C522F178(v3, v40, v202);
              }
            }
LABEL_311:
            v200 += 24;
          }
          while (v200 != v201);
        }
      }
      v206 = *(unsigned int *)(v40 + 40);
      if ((v392 & 1) != 0)
      {
        if ((_DWORD)v206)
        {
          v207 = *(_DWORD **)(v40 + 32);
          v208 = &v207[8 * v206];
          do
          {
            if ((*v207 & 0x300000FF) == 0 && (*v207 & 0x10FFF00) != 0x1000000)
            {
              v210 = v207[1];
              if ((v210 - 1) <= 0x3FFFFFFE
                && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v411 + 256) + 352) + 8 * (v210 >> 6)) & (1 << v210)) == 0)
              {
                v406 = sub_1C522F178(v411, v40, (unsigned __int16)v207[1]);
                v211 = *(_QWORD *)(v411 + 264);
                v212 = v211 ? (_QWORD *)(v211 + 8) : 0;
                v213 = *(unsigned int *)(*v212 + 24 * (unsigned __int16)v210 + 16);
                v214 = (unsigned __int16 *)(v212[6] + ((v213 >> 3) & 0x1FFFFFFE));
                v216 = *v214;
                v215 = v214 + 1;
                v217 = v216 + (v213 & 0xF) * v210;
                v218 = *(_QWORD *)(v411 + 960);
                do
                {
                  *(_DWORD *)(v218 + 4 * (unsigned __int16)v217) = 1;
                  v219 = *v215++;
                  v217 += v219;
                }
                while (v219);
                sub_1C5230EE0(v411, (unsigned __int16)v210);
                if ((v406 & 1) == 0
                  && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v411 + 256) + 352) + 8 * (v210 >> 6)) & (1 << v210)) == 0)
                {
                  *v207 |= 0x4000000u;
                }
              }
            }
            v207 += 8;
          }
          while (v207 != v208);
          LODWORD(v206) = *(_DWORD *)(v40 + 40);
          v3 = v411;
          goto LABEL_331;
        }
      }
      else
      {
LABEL_331:
        if ((_DWORD)v206)
        {
          v220 = 0;
          v221 = 0;
          while (2)
          {
            v222 = *(_QWORD *)(v40 + 32);
            v223 = 32 * v220;
            v224 = v206;
            while (1)
            {
              v225 = *(_DWORD *)(v222 + v223);
              if ((v225 & 0x10000FF) != 0)
                break;
              v226 = *(unsigned int *)(v222 + v223 + 4);
              if ((v226 & 0x80000000) == 0)
                break;
              if ((v225 & 0x10000000) == 0)
              {
                v227 = (v226 >> 6) & 0x1FFFFFF;
                v228 = *(_QWORD *)(*v400 + 8 * v227);
                if ((v228 & (1 << v226)) == 0)
                {
                  v232 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 256) + 24) + 16 * (v226 & 0x7FFFFFFF) + 8);
                  if (v232)
                  {
                    if ((*(_BYTE *)(v232 + 3) & 1) != 0
                      || (v232 = *(_QWORD *)(v232 + 24)) != 0 && (*(_BYTE *)(v232 + 3) & 1) != 0)
                    {
                      v233 = *(_QWORD *)(v3 + 552);
                      v234 = *(_QWORD *)(v232 + 8);
                      if (*(_QWORD *)(v234 + 24) != v233)
                        goto LABEL_349;
                      v247 = 0;
LABEL_368:
                      if (v247 == 7)
                      {
LABEL_349:
                        *(_QWORD *)(*v400 + 8 * v227) = v228 | (1 << v226);
                      }
                      else
                      {
                        ++v247;
                        while (1)
                        {
                          v232 = *(_QWORD *)(v232 + 24);
                          if (!v232 || (*(_BYTE *)(v232 + 3) & 1) == 0)
                            break;
                          v248 = *(_QWORD *)(v232 + 8);
                          if (v248 != v234)
                          {
                            v234 = *(_QWORD *)(v232 + 8);
                            if (*(_QWORD *)(v248 + 24) == v233)
                              goto LABEL_368;
                            goto LABEL_349;
                          }
                        }
                      }
                    }
                  }
                }
                LODWORD(v426) = v226;
                v419[0] = 0;
                v419[1] = (void *)v226;
                LOBYTE(v420) = 0;
                v229 = sub_1C5230BE8(v399, (__int128 *)v419);
                if (v230)
                {
                  v231 = *(_QWORD *)(v40 + 32);
                  if (((*(_DWORD *)(v231 + v223) >> 26) & ~HIBYTE(*(_DWORD *)(v231 + v223)) & 1) == 0)
                  {
                    if (sub_1C5230D08((uint64_t *)v411, v226))
                      *(_BYTE *)(v229 + 14) = 1;
                    else
                      *(_DWORD *)(v231 + v223) |= 0x4000000u;
                  }
                }
                v235 = (unsigned int *)(v222 + v223);
                v236 = *(unsigned __int16 *)(v229 + 12);
                v3 = v411;
                if (*(_WORD *)(v229 + 12))
                {
LABEL_352:
                  *(_QWORD *)v229 = v40;
                  if (**(_WORD **)(v40 + 16) == 20)
                  {
                    *((_WORD *)sub_1C620B6B8((uint64_t)v394, (int *)&v426) + 2) = v236;
                    v236 = *(unsigned __int16 *)(v229 + 12);
                  }
                  sub_1C5230EE0(v411, v236);
                  v237 = *(unsigned __int16 *)(v229 + 12);
                  v238 = v411;
                  v239 = (llvm::MachineInstr *)v40;
                  v240 = v235;
                }
                else
                {
                  if (**(_WORD **)(v40 + 16) == 19
                    && (v241 = *(_QWORD *)(v40 + 32), (*(_DWORD *)(v241 + 32) & 0xFFF00) == 0))
                  {
                    v242 = *(_DWORD *)(v241 + 4);
                  }
                  else
                  {
                    v242 = 0;
                  }
                  sub_1C523029C(v411, v40, v229, v242, 0);
                  if (!*(_BYTE *)(v229 + 16))
                  {
                    v236 = *(unsigned __int16 *)(v229 + 12);
                    goto LABEL_352;
                  }
                  v243 = v235;
                  v244 = (unsigned __int16 ***)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v411 + 256) + 24)
                                                          + 16 * (v226 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
                  v245 = *((unsigned __int16 *)*v244 + 12);
                  v246 = *(_QWORD *)(v411 + 280);
                  if (*(_DWORD *)(v411 + 288) != *(_DWORD *)(v246 + 24 * *((unsigned __int16 *)*v244 + 12)))
                    llvm::RegisterClassInfo::compute(v401, v244);
                  v237 = **(unsigned __int16 **)(v246 + 24 * v245 + 16);
                  v238 = v411;
                  v239 = (llvm::MachineInstr *)v40;
                  v240 = v243;
                }
                sub_1C522E5C4(v238, v239, v240, v237);
                v224 = *(unsigned int *)(v40 + 40);
                LODWORD(v206) = *(_DWORD *)(v40 + 40);
                break;
              }
              ++v220;
              v223 += 32;
              v221 = 1;
              if (v220 >= v206)
                goto LABEL_375;
            }
            if (++v220 < v224)
              continue;
            break;
          }
          if ((v221 & 1) == 0)
            goto LABEL_400;
          v222 = *(_QWORD *)(v40 + 32);
LABEL_375:
          v249 = *(_QWORD *)(v40 + 16);
          v250 = *(unsigned __int8 *)(v249 + 4);
          if ((*(_BYTE *)(v249 + 8) & 2) != 0)
          {
            if ((_DWORD)v206 == v250)
              goto LABEL_400;
            v251 = *(unsigned __int8 *)(v249 + 4);
            do
            {
              v344 = *(_DWORD *)(v222 + 32 * v250);
              if ((v344 & 0x10000FF) != 0x1000000)
                break;
              v251 += (v344 & 0x2000000) == 0;
              if ((_DWORD)v206 - 1 == v250)
                break;
              ++v250;
            }
            while ((v344 & 0x2000000) == 0);
          }
          else
          {
            v251 = *(unsigned __int8 *)(v249 + 4);
          }
          if (v251 != (_DWORD)v206)
          {
            v252 = (unsigned int *)(v222 + 32 * v206);
            v253 = (unsigned int *)(v222 + 32 * v251);
            do
            {
              v254 = *v253;
              if ((*v253 & 0x10000FF) == 0)
              {
                v255 = v253[1];
                if ((v255 & 0x80000000) != 0)
                {
                  v256 = v255 & 0x7FFFFFFF;
                  v257 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 800) + v256);
                  v258 = *(_DWORD *)(v3 + 600);
                  if (v258 <= v257)
                    goto LABEL_388;
                  v259 = *(_QWORD *)(v3 + 592);
                  while (1)
                  {
                    v260 = v257;
                    if (((*(_DWORD *)(v259 + 24 * v257 + 8) ^ v255) & 0x7FFFFFFF) == 0)
                      break;
                    v257 += 256;
                    if (v260 + 256 >= v258)
                      goto LABEL_388;
                  }
                  if (v258 == v257
                    || (v261 = *(unsigned __int16 *)(v259 + 24 * v257 + 12), !*(_WORD *)(v259 + 24 * v257 + 12)))
                  {
LABEL_388:
                    v262 = (unsigned __int16 ***)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 256) + 24) + 16 * v256) & 0xFFFFFFFFFFFFFFF8);
                    v263 = *((unsigned __int16 *)*v262 + 12);
                    v264 = *(_QWORD *)(v3 + 280);
                    if (*(_DWORD *)(v3 + 288) != *(_DWORD *)(v264 + 24 * *((unsigned __int16 *)*v262 + 12)))
                    {
                      llvm::RegisterClassInfo::compute(v401, v262);
                      v254 = *v253;
                    }
                    v261 = **(unsigned __int16 **)(v264 + 24 * v263 + 16);
                  }
                  v265 = (v254 >> 8) & 0xFFF;
                  if (v265)
                  {
                    v266 = *(_QWORD **)(v3 + 264);
                    v267 = v266[1];
                    v268 = v266[7];
                    v269 = *(unsigned int *)(v267 + 24 * v261 + 4);
                    if (*(_WORD *)(v268 + 2 * v269))
                    {
                      v270 = v261;
                      v261 += *(unsigned __int16 *)(v268 + 2 * v269);
                      v271 = (unsigned __int16 *)(v266[11] + 2 * *(unsigned int *)(v267 + 24 * v270 + 12));
                      v272 = (unsigned __int16 *)(v268 + 2 * v269 + 2);
                      while (v265 != *v271)
                      {
                        v273 = *v272++;
                        v261 += v273;
                        ++v271;
                        if (!v273)
                          goto LABEL_396;
                      }
                    }
                    else
                    {
LABEL_396:
                      LOWORD(v261) = 0;
                    }
                    *v253 = v254 & 0xFFF000FF;
                  }
                  llvm::MachineOperand::setReg((uint64_t)v253, (unsigned __int16)v261);
                  *v253 |= 0x8000000u;
                }
              }
              v253 += 8;
            }
            while (v253 != v252);
          }
        }
LABEL_400:
        if ((v409 & 1) != 0)
        {
          v274 = *(unsigned int *)(v40 + 40);
          if ((_DWORD)v274)
          {
            v297 = *(_QWORD *)(v40 + 32);
            v298 = 32 * v274;
            do
            {
              v299 = *(_DWORD *)(v297 + v298 - 32);
              if ((v299 & 0x410000FF) == 0x41000000)
              {
                if ((v299 & 0xFFF00) != 0)
                {
                  *(_DWORD *)(v297 + v298 - 32) = v299 & 0xFFF000FF;
                }
                else
                {
                  v300 = *(_DWORD *)(v297 + v298 - 28);
                  if (v300
                    && llvm::MachineInstr::findRegisterUseOperandIdx(v40, *(_DWORD *)(v297 + v298 - 28), 0, *(_QWORD *)(v3 + 264)) == -1)
                  {
                    sub_1C522F078(v3, (unsigned __int16)v300);
                  }
                }
              }
              v298 -= 32;
            }
            while (v298);
          }
        }
      }
LABEL_402:
      v275 = **(unsigned __int16 **)(v40 + 16);
      v7 = v403;
      v38 = v398;
      if (v275 == 19)
      {
        if (*(_DWORD *)(*(_QWORD *)(v40 + 32) + 4) != *(_DWORD *)(*(_QWORD *)(v40 + 32) + 36)
          || *(_DWORD *)(v40 + 40) != 2)
        {
          goto LABEL_421;
        }
        v277 = *(unsigned int *)(v3 + 992);
        if (v277 >= *(unsigned int *)(v3 + 996))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v380, v379, v277 + 1, 8);
          v277 = *(unsigned int *)(v3 + 992);
        }
        *(_QWORD *)(*(_QWORD *)(v3 + 984) + 8 * v277) = v40;
        ++*(_DWORD *)(v3 + 992);
        v275 = **(unsigned __int16 **)(v40 + 16);
      }
      if (v275 == 20)
      {
        for (j = *(_QWORD *)(v40 + 8); (*(_WORD *)(j + 44) & 4) != 0; j = *(_QWORD *)(j + 8))
        {
          v279 = *(unsigned int *)(j + 40);
          if ((_DWORD)v279)
          {
            v280 = *(unsigned int **)(j + 32);
            v281 = 32 * v279;
            do
            {
              if (!*(_BYTE *)v280)
              {
                v282 = v280[1];
                if (v282 < 0)
                {
                  v283 = sub_1C49796E4(*(_QWORD *)(v3 + 816), *(_DWORD *)(v3 + 832), v282);
                  sub_1C522E5C4(v3, (llvm::MachineInstr *)v40, v280, *((unsigned __int16 *)v283 + 2));
                }
              }
              v280 += 8;
              v281 -= 32;
            }
            while (v281);
          }
        }
      }
LABEL_421:
      v40 = *(_QWORD *)v40 & 0xFFFFFFFFFFFFFFF8;
      if (!v40 || (*(_BYTE *)v40 & 4) == 0)
      {
        while ((*(_WORD *)(v40 + 44) & 4) != 0)
          v40 = *(_QWORD *)v40 & 0xFFFFFFFFFFFFFFF8;
      }
      if ((_QWORD *)v40 != v38)
        continue;
      break;
    }
LABEL_45:
    if (*(_DWORD *)(v3 + 600))
    {
      v41 = (unsigned __int16 *)*((_QWORD *)v395 + 19);
      v42 = (unsigned __int16 *)*((_QWORD *)v395 + 20);
      if (v42 != v41)
      {
        v43 = *(_QWORD *)(v3 + 264);
        v44 = (uint64_t *)(v43 + 8);
        if (!v43)
          v44 = 0;
        v45 = *v44;
        v46 = v44[6];
        v47 = *(_QWORD *)(v3 + 960);
        do
        {
          v48 = ((unint64_t)*(unsigned int *)(v45 + 24 * *v41 + 16) >> 3) & 0x1FFFFFFE;
          v49 = *(unsigned __int16 *)(v46 + v48) + (*(_DWORD *)(v45 + 24 * *v41 + 16) & 0xF) * *v41;
          v50 = (unsigned __int16 *)(v46 + 2 + v48);
          do
          {
            *(_DWORD *)(v47 + 4 * (unsigned __int16)v49) = 2;
            v51 = *v50++;
            v49 += v51;
          }
          while (v51);
          v41 += 8;
        }
        while (v41 != v42);
      }
      v419[0] = &v420;
      v419[1] = (void *)0x200000000;
      v421 = 0;
      v422 = 0;
      *((_QWORD *)&v420 + 1) = &v421;
      for (k = *((_QWORD *)v395 + 7); (_QWORD *)k != v38; k = *(_QWORD *)(k + 8))
      {
        if (**(unsigned __int16 **)(k + 16) - 4 > 2)
        {
          if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 272) + 1144))(*(_QWORD *)(v3 + 272), k))break;
          v53 = *(unsigned int *)(k + 40);
          if ((_DWORD)v53)
          {
            v54 = 32 * v53;
            v55 = (_DWORD *)(*(_QWORD *)(k + 32) + 4);
            do
            {
              if (!*((_BYTE *)v55 - 4))
              {
                LODWORD(v426) = *v55;
                sub_1C4778DC4((uint64_t)v419, (unsigned int *)&v426);
              }
              v55 += 8;
              v54 -= 32;
            }
            while (v54);
            if (!k)
              goto LABEL_67;
          }
          if ((*(_BYTE *)k & 4) == 0)
          {
LABEL_67:
            while ((*(_WORD *)(k + 44) & 8) != 0)
              k = *(_QWORD *)(k + 8);
          }
        }
        else if ((*(_BYTE *)k & 4) == 0)
        {
          while ((*(_WORD *)(k + 44) & 8) != 0)
            k = *(_QWORD *)(k + 8);
        }
      }
      v345 = *(_DWORD *)(v3 + 600);
      if (v345)
      {
        v346 = *(_QWORD *)(v3 + 592);
        v347 = v346 + 24 * v345;
        do
        {
          v348 = *(unsigned __int16 *)(v346 + 12);
          if (*(_WORD *)(v346 + 12))
          {
            v349 = *(_QWORD *)(v3 + 264);
            v350 = v349 ? (_QWORD *)(v349 + 8) : 0;
            v351 = *(unsigned int *)(*v350 + 24 * *(unsigned __int16 *)(v346 + 12) + 16);
            if (*(_DWORD *)(*(_QWORD *)(v3 + 960)
                           + 4
                           * (unsigned __int16)(*(_WORD *)(v350[6] + ((v351 >> 3) & 0x1FFFFFFE)) + (v351 & 0xF) * v348)) != 2)
            {
              if (v422)
              {
                for (m = v421; m; m = (_QWORD *)*m)
                {
                  v353 = *((_DWORD *)m + 7);
                  if (v353 <= v348)
                  {
                    if (v353 >= v348)
                      break;
                    ++m;
                  }
                }
              }
              else if (LODWORD(v419[1]))
              {
                v354 = v419[0];
                v355 = 4 * LODWORD(v419[1]);
                do
                {
                  if (*v354 == v348)
                    break;
                  ++v354;
                  v355 -= 4;
                }
                while (v355);
              }
              sub_1C5230F64(v3, *(_DWORD *)(v346 + 8));
              (*(void (**)(void))(**(_QWORD **)(v3 + 272) + 464))();
            }
          }
          v346 += 24;
        }
        while (v346 != v347);
      }
      *(_DWORD *)(v3 + 600) = 0;
      sub_1C47655E8((uint64_t)&v420 + 8, v421);
      if (v419[0] != &v420)
        free(v419[0]);
    }
    v356 = *(unsigned int *)(v3 + 992);
    if ((_DWORD)v356)
    {
      v361 = *(uint64_t **)(v3 + 984);
      v362 = &v361[v356];
      do
      {
        v363 = *v361;
        if (!*v361 || (v364 = *v361, (*(_BYTE *)v363 & 4) == 0))
        {
          v364 = *v361;
          if ((*(_WORD *)(v363 + 44) & 8) != 0)
          {
            v364 = *v361;
            do
              v364 = *(_QWORD *)(v364 + 8);
            while ((*(_WORD *)(v364 + 44) & 8) != 0);
          }
        }
        sub_1C487FE80((uint64_t)v395 + 40, v363, *(_QWORD *)(v364 + 8));
        ++v361;
      }
      while (v361 != v362);
    }
    v357 = *(_QWORD *)(v3 + 864);
    v358 = *(unsigned int *)(v3 + 880);
    v359 = (unsigned int *)(v357 + 32 * v358);
    if (*(_DWORD *)(v3 + 872))
    {
      if (*(_DWORD *)(v3 + 880))
      {
        v375 = 32 * v358;
        v360 = *(unsigned int **)(v3 + 864);
        while (*v360 >= 0xFFFFFFFE)
        {
          v360 += 8;
          v375 -= 32;
          if (!v375)
            goto LABEL_538;
        }
      }
      else
      {
        v360 = *(unsigned int **)(v3 + 864);
      }
    }
    else
    {
LABEL_538:
      v360 = (unsigned int *)(v357 + 32 * v358);
    }
    v365 = (unsigned int *)(v357 + 32 * v358);
LABEL_551:
    while (v360 != v365)
    {
      v366 = v360[4];
      if ((_DWORD)v366)
      {
        v367 = (uint64_t *)*((_QWORD *)v360 + 1);
        v368 = &v367[v366];
        do
        {
          v369 = *v367;
          v370 = *(_QWORD *)(*v367 + 32);
          if (**(_WORD **)(*v367 + 16) != 14)
          {
            v372 = v370 + 32;
            goto LABEL_558;
          }
          v371 = *(unsigned int *)(v369 + 40);
          if ((_DWORD)v371 != 2)
          {
            v372 = v370 + 32 * v371;
            v370 += 64;
LABEL_558:
            while (*(_BYTE *)v370 || *(_DWORD *)(v370 + 4) != *v360)
            {
              v370 += 32;
              if (v370 == v372)
                goto LABEL_561;
            }
            sub_1C61FACB0(v369);
          }
LABEL_561:
          ++v367;
        }
        while (v367 != v368);
      }
      v373 = v360 + 8;
      while (v373 != v359)
      {
        v374 = *v373;
        v373 += 8;
        if (v374 <= 0xFFFFFFFD)
        {
          v360 = v373 - 8;
          goto LABEL_551;
        }
      }
      v360 = v359;
    }
    sub_1C620ACA8((uint64_t)v385);
    v22 = (llvm::MachineBasicBlock *)*((_QWORD *)v395 + 1);
  }
  while (v22 != v387);
LABEL_22:
  if (*(_BYTE *)(v3 + 584))
  {
LABEL_576:
    v376 = *(_QWORD *)(v3 + 256);
    *(_DWORD *)(v376 + 32) = 0;
    v377 = *(_QWORD *)(v376 + 456);
    v378 = *(_QWORD *)(v376 + 464);
    while (v377 != v378)
    {
      *(_DWORD *)(v377 + 4) = 0;
      v377 += 8;
    }
  }
  *(_DWORD *)(v3 + 568) = 0;
  sub_1C620ABF8(v3 + 840);
  return 1;
}

void sub_1C522E0DC(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v7 = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&v7, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = v7;
  *(_QWORD *)v7 |= 2uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &v7 == (void **)a1)
    goto LABEL_9;
  if (v8 < 7)
  {
    v6 = v8;
LABEL_7:
    memcpy(v4, v3, 8 * v6);
    v3 = v7;
    goto LABEL_8;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
  v6 = v8;
  v3 = v7;
  if ((_DWORD)v8)
  {
    v4 = *(void **)a1;
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_9:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

void sub_1C522E208(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  _OWORD *v4;
  void *v5;
  int v6;
  unsigned int v7;
  void *__src;
  uint64_t v9;
  _OWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 584))
  {
    *(_QWORD *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_QWORD *)a2 = a2 + 16;
    *(_QWORD *)(a2 + 8) = 0x600000000;
    sub_1C4765AA4((char *)a2, 1uLL, 0);
    *(_DWORD *)(a2 + 64) = 11;
    return;
  }
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  __src = v10;
  v9 = 0x600000000;
  sub_1C4765AA4((char *)&__src, 1uLL, 0);
  v3 = 11;
  LODWORD(v11) = 11;
  v4 = __src;
  *(_QWORD *)__src |= 8uLL;
  v5 = (void *)(a2 + 16);
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x600000000;
  v6 = v9;
  if ((_DWORD)v9 && &__src != (void **)a2)
  {
    if (v9 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v9, 8);
      v7 = v9;
      v4 = __src;
      if (!(_DWORD)v9)
      {
LABEL_10:
        *(_DWORD *)(a2 + 8) = v6;
        v3 = v11;
        goto LABEL_11;
      }
      v5 = *(void **)a2;
    }
    else
    {
      v7 = v9;
    }
    memcpy(v5, v4, 8 * v7);
    v4 = __src;
    goto LABEL_10;
  }
LABEL_11:
  *(_DWORD *)(a2 + 64) = v3;
  if (v4 != v10)
    free(v4);
}

void sub_1C522E380(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v7 = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&v7, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = v7;
  *(_QWORD *)v7 |= 1uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &v7 == (void **)a1)
    goto LABEL_9;
  if (v8 < 7)
  {
    v6 = v8;
LABEL_7:
    memcpy(v4, v3, 8 * v6);
    v3 = v7;
    goto LABEL_8;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
  v6 = v8;
  v3 = v7;
  if ((_DWORD)v8)
  {
    v4 = *(void **)a1;
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_9:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

_DWORD *sub_1C522E4AC(uint64_t a1, unint64_t a2, int *a3)
{
  uint64_t v6;
  _DWORD *result;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;
  int *v13;
  unint64_t v14;
  uint64_t v15;
  int *v16;
  int *v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a1 + 16);
  result = *(_DWORD **)a1;
  if (a2 > (v6 - (uint64_t)result) >> 2)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v6 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a2 >> 62)
      goto LABEL_26;
    v8 = v6 >> 1;
    if (v6 >> 1 <= a2)
      v8 = a2;
    v9 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v8;
    if (v9 >> 62)
LABEL_26:
      abort();
    result = operator new(4 * v9);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 16) = &result[v9];
    v10 = &result[a2];
    v11 = 4 * a2;
    v12 = *a3;
    do
    {
      *result++ = v12;
      v11 -= 4;
    }
    while (v11);
    goto LABEL_25;
  }
  v13 = *(int **)(a1 + 8);
  v14 = v13 - result;
  if (v14 >= a2)
    v15 = a2;
  else
    v15 = v13 - result;
  if (v15)
  {
    v16 = result;
    do
    {
      *v16++ = *a3;
      --v15;
    }
    while (v15);
  }
  if (a2 <= v14)
  {
    v10 = &result[a2];
LABEL_25:
    *(_QWORD *)(a1 + 8) = v10;
    return result;
  }
  v17 = &v13[a2 - v14];
  v18 = 4 * a2 - 4 * v14;
  do
  {
    *v13++ = *a3;
    v18 -= 4;
  }
  while (v18);
  *(_QWORD *)(a1 + 8) = v17;
  return result;
}

void sub_1C522E5C4(uint64_t a1, llvm::MachineInstr *a2, unsigned int *a3, unsigned int a4)
{
  int v6;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;

  v6 = (*a3 >> 8) & 0xFFF;
  if (v6)
  {
    if (a4
      && (v9 = *(_QWORD **)(a1 + 264),
          v10 = v9[1],
          v11 = v9[7],
          v12 = *(unsigned int *)(v10 + 24 * a4 + 4),
          *(_WORD *)(v11 + 2 * v12)))
    {
      v13 = *(unsigned __int16 *)(v11 + 2 * v12) + a4;
      v14 = (unsigned __int16 *)(v9[11] + 2 * *(unsigned int *)(v10 + 24 * a4 + 12));
      v15 = (unsigned __int16 *)(v11 + 2 * v12 + 2);
      while (v6 != *v14)
      {
        v16 = 0;
        v17 = *v15++;
        v13 += v17;
        ++v14;
        if (!v17)
          goto LABEL_11;
      }
      v16 = (unsigned __int16)v13;
    }
    else
    {
      v16 = 0;
    }
LABEL_11:
    llvm::MachineOperand::setReg((uint64_t)a3, v16);
    v18 = *a3 | 0x8000000;
    if ((*a3 & 0x1000000) == 0)
      v18 = *a3 & 0xF7F000FF | 0x8000000;
    *a3 = v18;
    if ((!(v18 & 0x1000000) & (v18 >> 26)) != 0)
    {
      llvm::MachineInstr::addRegisterKilled(a2, a4, *(_QWORD *)(a1 + 264), 1);
    }
    else if ((~v18 & 0x11000000) == 0)
    {
      v19 = *(_QWORD *)(a1 + 264);
      if ((HIBYTE(v18) & 1 & (v18 >> 26)) != 0)
        llvm::MachineInstr::addRegisterDead(a2, a4, v19, 1);
      else
        llvm::MachineInstr::addRegisterDefined((uint64_t)a2, a4, v19);
    }
  }
  else
  {
    llvm::MachineOperand::setReg((uint64_t)a3, a4);
    *a3 |= 0x8000000u;
  }
}

_DWORD *sub_1C522E72C(uint64_t *a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void *v19;
  unsigned int v20;
  int *v21;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;

  v3 = *((unsigned int *)a1 + 4);
  v4 = (int *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -1;
        result += 8;
        v11 -= 32;
      }
      while (v11);
    }
    if (!(_DWORD)v3)
LABEL_46:
      JUMPOUT(0x1CAA32FB4);
    v12 = &v4[8 * v3];
    v13 = v4;
    while (1)
    {
      v14 = *v13;
      if (*v13 <= 0xFFFFFFFD)
        break;
LABEL_24:
      v13 += 8;
      if (v13 == v12)
        goto LABEL_46;
    }
    v15 = *((_DWORD *)a1 + 4) - 1;
    v16 = v15 & (37 * v14);
    v17 = *a1 + 32 * v16;
    v18 = *(_DWORD *)v17;
    if (v14 != *(_DWORD *)v17)
    {
      v24 = 0;
      v25 = 1;
      while (v18 != -1)
      {
        if (v24)
          v26 = 0;
        else
          v26 = v18 == -2;
        if (v26)
          v24 = v17;
        v27 = v16 + v25++;
        v16 = v27 & v15;
        v17 = *a1 + 32 * v16;
        v18 = *(_DWORD *)v17;
        if (v14 == *(_DWORD *)v17)
          goto LABEL_12;
      }
      if (v24)
        v17 = v24;
    }
LABEL_12:
    v19 = (void *)(v17 + 24);
    *(_QWORD *)(v17 + 8) = v17 + 24;
    *(_DWORD *)v17 = v14;
    *(_QWORD *)(v17 + 16) = 0x100000000;
    v20 = v13[4];
    v21 = (int *)*((_QWORD *)v13 + 1);
    if ((int *)v17 == v13 || v20 == 0)
    {
LABEL_22:
      ++*((_DWORD *)a1 + 2);
      if (v21 != v13 + 6)
        free(v21);
      goto LABEL_24;
    }
    if (v21 != v13 + 6)
    {
      *(_QWORD *)(v17 + 8) = v21;
      v28 = v13[5];
      *(_DWORD *)(v17 + 16) = v20;
      *(_DWORD *)(v17 + 20) = v28;
      *((_QWORD *)v13 + 1) = v13 + 6;
      v13[5] = 0;
      v21 = v13 + 6;
      goto LABEL_21;
    }
    if (v20 >= 2)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v17 + 8, v17 + 24, v13[4], 8);
      v23 = v13[4];
      if (!(_DWORD)v23)
        goto LABEL_20;
      v21 = (int *)*((_QWORD *)v13 + 1);
      v19 = *(void **)(v17 + 8);
    }
    else
    {
      v23 = v13[4];
    }
    memcpy(v19, v21, 8 * v23);
LABEL_20:
    *(_DWORD *)(v17 + 16) = v20;
    v21 = (int *)*((_QWORD *)v13 + 1);
LABEL_21:
    v13[4] = 0;
    goto LABEL_22;
  }
  a1[1] = 0;
  v29 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v29)
  {
    v30 = 32 * v29;
    do
    {
      *result = -1;
      result += 8;
      v30 -= 32;
    }
    while (v30);
  }
  return result;
}

_DWORD *sub_1C522E984(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C620AFD0(a1, v4, v4 + 40 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 40 * v10;
    do
    {
      *result = -1;
      result += 10;
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C522EA48(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v11;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v11 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v11);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_10;
    }
    v7 = (_DWORD *)(a2 + 8);
    v6 = *(unsigned int *)(a2 + 8);
    v8 = *(unsigned int *)(a1 + 8);
    if (v8 >= v6)
    {
      if ((_DWORD)v6)
        memmove(*(void **)a1, v4, 8 * v6);
      goto LABEL_9;
    }
    if (*(_DWORD *)(a1 + 12) < v6)
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6, 8);
    }
    else if ((_DWORD)v8)
    {
      memmove(*(void **)a1, v4, 8 * v8);
LABEL_7:
      v9 = *v7;
      if (v8 != v9)
        memcpy((void *)(*(_QWORD *)a1 + 8 * v8), (const void *)(*(_QWORD *)a2 + 8 * v8), *(_QWORD *)a2 + 8 * v9 - (*(_QWORD *)a2 + 8 * v8));
LABEL_9:
      *(_DWORD *)(a1 + 8) = v6;
LABEL_10:
      *v7 = 0;
      return a1;
    }
    v8 = 0;
    goto LABEL_7;
  }
  return a1;
}

void sub_1C522EB64(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v7;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  char v12;
  unsigned int v13;
  uint64_t v14;
  _BOOL8 v15;
  _QWORD *FirstTerminator;
  _DWORD *v17;
  uint64_t i;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  llvm::MachineInstr *v29;
  const llvm::MachineInstr *v30;
  llvm::MachineFunction *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  _QWORD *v47;
  unsigned int *v48;
  uint64_t v49;
  _DWORD *v50;
  int v51;
  unint64_t *v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  void *v56[2];
  _BYTE v57[48];
  __int128 v58;
  char v59;
  char *v60;
  uint64_t v61;
  _QWORD v62[20];

  v7 = a2;
  v62[18] = *MEMORY[0x1E0C80C00];
  v54 = a4;
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)&v58 = 0;
  v10 = (unsigned int *)(v9 + 32 * a3);
  *((_QWORD *)&v58 + 1) = a4;
  v59 = 0;
  v11 = sub_1C5230BE8(a1 + 592, &v58);
  if (v12 && (~*v10 & 0x5000000) != 0)
  {
    if (sub_1C5230D08((uint64_t *)a1, a4))
      *(_BYTE *)(v11 + 14) = 1;
    else
      *v10 |= 0x4000000u;
  }
  v13 = *(unsigned __int16 *)(v11 + 12);
  if (!*(_WORD *)(v11 + 12))
  {
    sub_1C523029C(a1, v7, v11, 0, a5);
    v13 = *(unsigned __int16 *)(v11 + 12);
  }
  if (*(_BYTE *)(v11 + 15) || *(_BYTE *)(v11 + 14))
  {
    if (**(_WORD **)(v7 + 16) != 10)
    {
      v14 = v7;
      if ((*(_BYTE *)v7 & 4) == 0)
      {
        v14 = v7;
        if ((*(_WORD *)(v7 + 44) & 8) != 0)
        {
          v14 = v7;
          do
            v14 = *(_QWORD *)(v14 + 8);
          while ((*(_WORD *)(v14 + 44) & 8) != 0);
        }
      }
      v48 = v10;
      v49 = v7;
      v15 = *(_QWORD *)v11 == 0;
      v47 = (_QWORD *)v11;
      v51 = *(unsigned __int8 *)(v11 + 14);
      v46 = v13;
      v52 = *(unint64_t **)(v14 + 8);
      v53 = sub_1C5230F64(a1, a4);
      (*(void (**)(_QWORD, _QWORD, unint64_t *, _QWORD, _BOOL8))(**(_QWORD **)(a1 + 272) + 448))(*(_QWORD *)(a1 + 272), *(_QWORD *)(a1 + 552), v52, v13, v15);
      FirstTerminator = (_QWORD *)llvm::MachineBasicBlock::getFirstTerminator(*(llvm::MachineBasicBlock **)(a1 + 552));
      LODWORD(v58) = a4;
      v17 = sub_1C620AE08(a1 + 840, (int *)&v58);
      *(_QWORD *)&v58 = 1;
      for (i = 8; i != 40; i += 16)
        *(_QWORD *)((char *)&v58 + i) = -4096;
      v60 = (char *)v62;
      v61 = 0x200000000;
      v50 = v17;
      v19 = v17[4];
      if ((_DWORD)v19)
      {
        v20 = (uint64_t *)*((_QWORD *)v17 + 1);
        v21 = 8 * v19;
        do
        {
          v22 = *v20;
          v55 = *(_QWORD *)(*v20 + 8);
          v23 = sub_1C620B110((uint64_t)&v58, &v55);
          v24 = v23;
          v25 = *(unsigned int *)(v23 + 8);
          if (v25 >= *(unsigned int *)(v23 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v23, v23 + 16, v25 + 1, 8);
            v25 = *(unsigned int *)(v24 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v24 + 8 * v25) = v22;
          ++*(_DWORD *)(v24 + 8);
          ++v20;
          v21 -= 8;
        }
        while (v21);
        if ((_DWORD)v61)
        {
          v26 = v60;
          v27 = &v60[72 * v61];
          do
          {
            v28 = *(_QWORD *)v26;
            v55 = *(_QWORD *)v26;
            v56[0] = v57;
            v56[1] = (void *)0x600000000;
            if (*((_DWORD *)v26 + 4))
            {
              llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)v56, (uint64_t)(v26 + 8));
              v28 = v55;
            }
            v29 = llvm::buildDbgValueForSpill(*(_QWORD *)(a1 + 552), v52, v28, v53, (uint64_t)v56);
            if (v51)
            {
              v30 = v29;
              v31 = *(llvm::MachineFunction **)(*(_QWORD *)(a1 + 552) + 32);
              v32 = *((_QWORD *)v31 + 28);
              if (v32)
                *((_QWORD *)v31 + 28) = *(_QWORD *)v32;
              else
                v32 = sub_1C484358C((uint64_t)v31 + 128, 72, 3);
              llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v32, v31, v30);
              v33 = *(_QWORD *)(*(_QWORD *)(a1 + 552) + 40);
              *(_QWORD *)(v32 + 24) = v33;
              v34 = *(_QWORD *)(v33 + 32);
              v35 = *(unsigned int *)(v32 + 40);
              if ((_DWORD)v35)
              {
                v39 = *(_QWORD *)(v32 + 32);
                v40 = *(_QWORD *)(v34 + 40);
                v41 = 32 * v35;
                do
                {
                  if (!*(_BYTE *)v39)
                  {
                    v42 = *(unsigned int *)(v39 + 4);
                    if ((int)v42 >= 0)
                      v43 = (uint64_t *)(*(_QWORD *)(v40 + 272) + 8 * v42);
                    else
                      v43 = (uint64_t *)(*(_QWORD *)(v40 + 24) + 16 * (v42 & 0x7FFFFFFF) + 8);
                    v44 = *v43;
                    if (*v43)
                    {
                      v45 = *(_QWORD *)(v44 + 16);
                      *(_QWORD *)(v44 + 16) = v39;
                      *(_QWORD *)(v39 + 16) = v45;
                      if ((*(_BYTE *)(v39 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v39 + 24) = v44;
                      }
                      else
                      {
                        *(_QWORD *)(v39 + 24) = 0;
                        v43 = (uint64_t *)(v45 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v39 + 16) = v39;
                      *(_QWORD *)(v39 + 24) = 0;
                    }
                    *v43 = v39;
                  }
                  v39 += 32;
                  v41 -= 32;
                }
                while (v41);
              }
              v36 = *(_QWORD *)(v34 + 728);
              if (v36)
                (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v36 + 24))(v36, v32);
              v37 = *FirstTerminator & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v32 = v37 | *(_QWORD *)v32 & 7;
              *(_QWORD *)(v32 + 8) = FirstTerminator;
              *(_QWORD *)(v37 + 8) = v32;
              *FirstTerminator = *FirstTerminator & 7 | v32;
            }
            if (**(_WORD **)(v28 + 16) == 13)
            {
              v38 = *(_QWORD *)(v28 + 32);
              if (!*(_BYTE *)v38 && !*(_DWORD *)(v38 + 4))
                llvm::updateDbgValueForSpill(v28, v53, 0);
            }
            if (v56[0] != v57)
              free(v56[0]);
            v26 += 72;
          }
          while (v26 != v27);
        }
      }
      v50[4] = 0;
      sub_1C51AFDA0(&v60);
      if ((v58 & 1) == 0)
        MEMORY[0x1CAA32FB4](*((_QWORD *)&v58 + 1), 8);
      v11 = (uint64_t)v47;
      v10 = v48;
      *v47 = 0;
      v7 = v49;
      v13 = v46;
    }
    *(_WORD *)(v11 + 14) = 0;
  }
  if (**(_WORD **)(v7 + 16) == 20)
    *((_WORD *)sub_1C620B6B8(a1 + 816, (int *)&v54) + 2) = v13;
  sub_1C5230EE0(a1, v13);
  sub_1C522E5C4(a1, (llvm::MachineInstr *)v7, v10, v13);
}

uint64_t sub_1C522F078(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned __int16 *v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  _WORD *v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  int v24;
  int v25;
  int v26;

  v2 = *(_QWORD *)(result + 264);
  if (v2)
    v3 = (uint64_t *)(v2 + 8);
  else
    v3 = 0;
  v4 = *v3;
  v5 = *(unsigned int *)(*v3 + 24 * a2 + 16);
  v6 = v5 >> 4;
  v7 = v3[6];
  v8 = *(unsigned __int16 *)(v7 + 2 * (v5 >> 4)) + (v5 & 0xF) * a2;
  v9 = *(_QWORD *)(result + 960);
  v10 = *(_DWORD *)(v9 + 4 * (unsigned __int16)(*(_WORD *)(v7 + 2 * (v5 >> 4)) + (v5 & 0xF) * a2));
  if (v10)
  {
    if (v10 == 1)
    {
      v11 = (unsigned __int16 *)(v7 + 2 * v6 + 2);
      do
      {
        *(_DWORD *)(v9 + 4 * (unsigned __int16)v8) = 0;
        v12 = *v11++;
        v8 += v12;
      }
      while (v12);
    }
    else
    {
      v13 = *(unsigned __int8 *)(*(_QWORD *)(result + 800) + (v10 & 0x7FFFFFFF));
      v14 = *(_DWORD *)(result + 600);
      v15 = *(_QWORD *)(result + 592);
      if (v14 > v13)
      {
        while (1)
        {
          v16 = v13;
          if (((*(_DWORD *)(v15 + 24 * v13 + 8) ^ v10) & 0x7FFFFFFF) == 0)
            break;
          v13 += 256;
          if (v16 + 256 >= v14)
            goto LABEL_14;
        }
        v14 = v13;
      }
LABEL_14:
      v17 = v15 + 24 * v14;
      v20 = *(unsigned __int16 *)(v17 + 12);
      v18 = (_WORD *)(v17 + 12);
      v19 = v20;
      v21 = *(unsigned int *)(v4 + 24 * v20 + 16);
      v22 = (unsigned __int16 *)(v7 + ((v21 >> 3) & 0x1FFFFFFE));
      v24 = *v22;
      v23 = v22 + 1;
      v25 = v24 + (v21 & 0xF) * v19;
      do
      {
        *(_DWORD *)(v9 + 4 * (unsigned __int16)v25) = 0;
        v26 = *v23++;
        v25 += v26;
      }
      while (v26);
      *v18 = 0;
    }
  }
  return result;
}

uint64_t sub_1C522F178(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  _WORD *v8;
  unsigned __int16 v9;
  uint64_t v10;
  unsigned __int16 v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  int v29;
  int v30;
  int v31;
  int v32;

  v4 = 0;
  v5 = *(_QWORD *)(a1 + 264);
  if (v5)
    v6 = (_QWORD *)(v5 + 8);
  else
    v6 = 0;
  v7 = *(unsigned int *)(*v6 + 24 * a3 + 16);
  v8 = (_WORD *)(v6[6] + ((v7 >> 3) & 0x1FFFFFFE));
  v9 = *v8 + (v7 & 0xF) * a3;
  v10 = *(_QWORD *)(a1 + 960);
  do
  {
    v11 = v9;
    v12 = *(_DWORD *)(v10 + 4 * v9);
    if (v12)
    {
      if (v12 == 1)
      {
        *(_DWORD *)(v10 + 4 * v9) = 0;
        v4 = 1;
      }
      else
      {
        v13 = v12 & 0x7FFFFFFF;
        v14 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 800) + v13);
        v15 = *(_DWORD *)(a1 + 600);
        v16 = *(_QWORD *)(a1 + 592);
        if (v15 > v14)
        {
          while (1)
          {
            v17 = v14;
            if (((*(_DWORD *)(v16 + 24 * v14 + 8) ^ v12) & 0x7FFFFFFF) == 0)
              break;
            v14 += 256;
            if (v17 + 256 >= v15)
              goto LABEL_13;
          }
          v15 = v14;
        }
LABEL_13:
        v18 = a2;
        if ((*(_BYTE *)a2 & 4) == 0)
        {
          v18 = a2;
          if ((*(_WORD *)(a2 + 44) & 8) != 0)
          {
            v18 = a2;
            do
              v18 = *(_QWORD *)(v18 + 8);
            while ((*(_WORD *)(v18 + 44) & 8) != 0);
          }
        }
        v19 = *(_QWORD *)(v18 + 8);
        v20 = v16 + 24 * v15;
        v22 = *(unsigned __int16 *)(v20 + 12);
        v21 = (_WORD *)(v20 + 12);
        v23 = sub_1C5230F64(a1, v12);
        (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, uint64_t, unint64_t, _QWORD))(**(_QWORD **)(a1 + 272) + 464))(*(_QWORD *)(a1 + 272), *(_QWORD *)(a1 + 552), v19, v22, v23, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 24) + 16 * v13) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(a1 + 264));
        v24 = *(_QWORD *)(a1 + 264);
        if (v24)
          v25 = (_QWORD *)(v24 + 8);
        else
          v25 = 0;
        v26 = *(unsigned int *)(*v25 + 24 * (unsigned __int16)*v21 + 16);
        v27 = (unsigned __int16 *)(v25[6] + ((v26 >> 3) & 0x1FFFFFFE));
        v29 = *v27;
        v28 = v27 + 1;
        v30 = v29 + (v26 & 0xF) * (unsigned __int16)*v21;
        v10 = *(_QWORD *)(a1 + 960);
        do
        {
          *(_DWORD *)(v10 + 4 * (unsigned __int16)v30) = 0;
          v31 = *v28++;
          v30 += v31;
        }
        while (v31);
        *v21 = 0;
        v4 = 1;
        *(_BYTE *)(v16 + 24 * v15 + 15) = 1;
      }
    }
    v32 = (unsigned __int16)v8[1];
    ++v8;
    v9 = v32 + v11;
  }
  while (v32);
  return v4 & 1;
}

unsigned int *sub_1C522F350(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  v2 = result[4];
  v3 = result[2];
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *((_QWORD *)result + 1) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(_DWORD **)result;
      v7 = 8 * v2;
      do
      {
        *v6 = -1;
        v6 += 2;
        v7 -= 8;
      }
      while (v7);
    }
  }
  else
  {
    result = (unsigned int *)MEMORY[0x1CAA32FB4](*(_QWORD *)result, 4);
    if (v5)
    {
      v8 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      v1[4] = v9;
      result = (unsigned int *)operator new(8 * v9, (std::align_val_t)4uLL);
      *(_QWORD *)v1 = result;
      *((_QWORD *)v1 + 1) = 0;
      v10 = v1[4];
      if ((_DWORD)v10)
      {
        v11 = 8 * v10;
        do
        {
          *result = -1;
          result += 2;
          v11 -= 8;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)v1 = 0;
      *((_QWORD *)v1 + 1) = 0;
      v1[4] = 0;
    }
  }
  return result;
}

uint64_t sub_1C522F44C(uint64_t result, __int16 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int16 *v9;
  __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int16 *v14;
  __int16 v15;
  uint64_t v16;
  unsigned int v17;
  __int16 *v19;
  __int16 *v20;
  unsigned int v21;
  unsigned int v22;
  __int16 *v23;
  __int16 v24;
  unsigned int v25;
  unsigned int v26;
  __int16 *v27;
  BOOL v28;
  BOOL v29;
  unsigned int v30;
  unsigned int v31;
  __int16 *v32;
  __int16 *v33;
  unsigned int v34;
  __int16 v35;
  unsigned int v36;
  unsigned int v37;
  __int16 *v38;
  __int16 v39;
  unsigned __int16 *v40;
  unsigned __int16 *v41;
  __int16 v42;
  unsigned __int16 v43;
  unsigned int v44;
  __int16 v45;
  unsigned int v46;
  unint64_t v47;
  __int16 *v48;
  BOOL v50;
  uint64_t v51;
  __int16 *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  __int16 *v57;
  int64_t v58;
  int64_t v59;
  uint64_t v60;
  __int16 *v61;
  __int16 *v62;
  unsigned int v63;
  __int16 *v64;
  uint64_t v65;
  uint64_t v66;
  __int16 *v67;
  uint64_t v68;
  __int16 *v69;
  uint64_t v70;
  __int16 *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  __int16 *v75;
  __int16 *v76;
  unsigned int v77;
  __int16 *v78;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  __int16 *v83;
  __int16 *v84;
  __int16 v85;
  __int16 *v86;
  __int16 *v87;
  __int16 *v88;
  __int16 *v89;
  int64_t v90;
  __int16 v91;

  v9 = (__int16 *)result;
LABEL_2:
  v88 = a2 - 2;
  v89 = a2 - 1;
  v87 = a2 - 3;
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = sub_1C522FC04(a3, (unsigned __int16)*(a2 - 1), (unsigned __int16)*v9);
        if ((_DWORD)result)
        {
          v39 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v39;
        }
        return result;
      case 3:
        return sub_1C522FDC8(v9, v9 + 1, v89, a3);
      case 4:
        return sub_1C52300D8(v9, v9 + 1, v9 + 2, v89, a3);
      case 5:
        v40 = (unsigned __int16 *)(v9 + 2);
        v41 = (unsigned __int16 *)(v9 + 3);
        sub_1C52300D8(v9, v9 + 1, v9 + 2, v9 + 3, a3);
        result = sub_1C522FC04(a3, (unsigned __int16)*(a2 - 1), (unsigned __int16)v9[3]);
        if ((_DWORD)result)
        {
          v42 = *v41;
          *v41 = *(a2 - 1);
          *(a2 - 1) = v42;
          result = sub_1C522FC04(a3, *v41, *v40);
          if ((_DWORD)result)
          {
            v43 = *v40;
            v44 = *v41;
            *v40 = v44;
            *v41 = v43;
            result = sub_1C522FC04(a3, v44, (unsigned __int16)v9[1]);
            if ((_DWORD)result)
            {
              v45 = v9[1];
              v46 = (unsigned __int16)v9[2];
              v9[1] = v46;
              v9[2] = v45;
              result = sub_1C522FC04(a3, v46, (unsigned __int16)*v9);
              if ((_DWORD)result)
              {
                HIDWORD(v47) = *(_DWORD *)v9;
                LODWORD(v47) = *(_DWORD *)v9;
                *(_DWORD *)v9 = v47 >> 16;
              }
            }
          }
        }
        return result;
      default:
        if (v11 <= 47)
        {
          v48 = v9 + 1;
          v50 = v9 == a2 || v48 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v50)
            {
              v51 = 0;
              v52 = v9;
              do
              {
                v53 = (unsigned __int16)v52[1];
                v54 = (unsigned __int16)*v52;
                v52 = v48;
                result = sub_1C522FC04(a3, v53, v54);
                if ((_DWORD)result)
                {
                  v55 = (unsigned __int16)*v52;
                  v56 = v51;
                  while (1)
                  {
                    *(__int16 *)((char *)v9 + v56 + 2) = *(__int16 *)((char *)v9 + v56);
                    if (!v56)
                      break;
                    result = sub_1C522FC04(a3, v55, *(unsigned __int16 *)((char *)v9 + v56 - 2));
                    v56 -= 2;
                    if ((result & 1) == 0)
                    {
                      v57 = (__int16 *)((char *)v9 + v56 + 2);
                      goto LABEL_76;
                    }
                  }
                  v57 = v9;
LABEL_76:
                  *v57 = v55;
                }
                v48 = v52 + 1;
                v51 += 2;
              }
              while (v52 + 1 != a2);
            }
          }
          else if (!v50)
          {
            do
            {
              v80 = (unsigned __int16)v9[1];
              v81 = (unsigned __int16)*v9;
              v9 = v48;
              result = sub_1C522FC04(a3, v80, v81);
              if ((_DWORD)result)
              {
                v82 = (unsigned __int16)*v9;
                v83 = v9;
                do
                {
                  v84 = v83;
                  v85 = *--v83;
                  *v84 = v85;
                  result = sub_1C522FC04(a3, v82, (unsigned __int16)*(v84 - 2));
                }
                while ((result & 1) != 0);
                *v83 = v82;
              }
              v48 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v58 = (unint64_t)(v12 - 2) >> 1;
            v90 = v58;
            v86 = a2;
            do
            {
              v59 = v58;
              if (v90 >= v58)
              {
                v60 = (2 * v58) | 1;
                v61 = &v9[v60];
                if (2 * v58 + 2 < v12 && sub_1C522FC04(a3, (unsigned __int16)*v61, (unsigned __int16)v61[1]))
                {
                  ++v61;
                  v60 = 2 * v59 + 2;
                }
                v62 = &v9[v59];
                result = sub_1C522FC04(a3, (unsigned __int16)*v61, (unsigned __int16)*v62);
                if ((result & 1) == 0)
                {
                  v63 = (unsigned __int16)*v62;
                  do
                  {
                    v64 = v61;
                    *v62 = *v61;
                    if (v90 < v60)
                      break;
                    v65 = (2 * v60) | 1;
                    v61 = &v9[v65];
                    v66 = 2 * v60 + 2;
                    if (v66 < v12 && sub_1C522FC04(a3, (unsigned __int16)*v61, (unsigned __int16)v61[1]))
                    {
                      ++v61;
                      v65 = v66;
                    }
                    result = sub_1C522FC04(a3, (unsigned __int16)*v61, v63);
                    v62 = v64;
                    v60 = v65;
                  }
                  while (!(_DWORD)result);
                  *v64 = v63;
                  a2 = v86;
                }
              }
              v58 = v59 - 1;
            }
            while (v59);
            do
            {
              v67 = a2;
              v68 = 0;
              v91 = *v9;
              v69 = v9;
              do
              {
                v70 = 2 * v68 + 2;
                v71 = (__int16 *)((char *)v69 + v70);
                v72 = (2 * v68) | 1;
                if (v70 < v12)
                {
                  result = sub_1C522FC04(a3, (unsigned __int16)*v71, (unsigned __int16)v71[1]);
                  if ((_DWORD)result)
                  {
                    ++v71;
                    v72 = v70;
                  }
                }
                *v69 = *v71;
                v69 = v71;
                v68 = v72;
              }
              while (v72 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
              a2 = v67 - 1;
              if (v71 == v67 - 1)
              {
                *v71 = v91;
              }
              else
              {
                *v71 = *a2;
                *a2 = v91;
                v73 = (char *)v71 - (char *)v9 + 2;
                if (v73 >= 3)
                {
                  v74 = (((unint64_t)v73 >> 1) - 2) >> 1;
                  v75 = &v9[v74];
                  result = sub_1C522FC04(a3, (unsigned __int16)*v75, (unsigned __int16)*v71);
                  if ((_DWORD)result)
                  {
                    v76 = v67 - 1;
                    v77 = (unsigned __int16)*v71;
                    do
                    {
                      v78 = v75;
                      *v71 = *v75;
                      if (!v74)
                        break;
                      v74 = (v74 - 1) >> 1;
                      v75 = &v9[v74];
                      result = sub_1C522FC04(a3, (unsigned __int16)*v75, v77);
                      v71 = v78;
                    }
                    while ((result & 1) != 0);
                    *v78 = v77;
                    a2 = v76;
                  }
                }
              }
            }
            while (v12-- > 2);
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v9[(unint64_t)v12 >> 1];
        if ((unint64_t)v11 < 0x101)
        {
          sub_1C522FDC8(v14, v9, v89, a3);
        }
        else
        {
          sub_1C522FDC8(v9, v14, v89, a3);
          sub_1C522FDC8(v9 + 1, v14 - 1, v88, a3);
          sub_1C522FDC8(v9 + 2, &v9[v13 + 1], v87, a3);
          sub_1C522FDC8(v14 - 1, v14, &v9[v13 + 1], a3);
          v15 = *v9;
          *v9 = *v14;
          *v14 = v15;
        }
        --a4;
        if ((a5 & 1) == 0 && !sub_1C522FC04(a3, (unsigned __int16)*(v9 - 1), (unsigned __int16)*v9))
        {
          v30 = (unsigned __int16)*v9;
          result = sub_1C522FC04(a3, v30, (unsigned __int16)*v89);
          if ((result & 1) != 0)
          {
            v10 = v9;
            do
            {
              v31 = (unsigned __int16)v10[1];
              ++v10;
              result = sub_1C522FC04(a3, v30, v31);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v32 = v9 + 1;
            do
            {
              v10 = v32;
              if (v32 >= a2)
                break;
              ++v32;
              result = sub_1C522FC04(a3, v30, (unsigned __int16)*v10);
            }
            while (!(_DWORD)result);
          }
          v33 = a2;
          if (v10 < a2)
          {
            v33 = a2;
            do
            {
              v34 = (unsigned __int16)*--v33;
              result = sub_1C522FC04(a3, v30, v34);
            }
            while ((result & 1) != 0);
          }
          while (v10 < v33)
          {
            v35 = *v10;
            *v10 = *v33;
            *v33 = v35;
            do
            {
              v36 = (unsigned __int16)v10[1];
              ++v10;
            }
            while (!sub_1C522FC04(a3, v30, v36));
            do
            {
              v37 = (unsigned __int16)*--v33;
              result = sub_1C522FC04(a3, v30, v37);
            }
            while ((result & 1) != 0);
          }
          v38 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v38;
          a5 = 0;
          *v38 = v30;
          continue;
        }
        v16 = 0;
        v17 = (unsigned __int16)*v9;
        while (sub_1C522FC04(a3, (unsigned __int16)v9[++v16], v17))
          ;
        v19 = &v9[v16];
        v20 = a2;
        if (v16 == 1)
        {
          do
          {
            if (v19 >= a2)
              break;
            v22 = (unsigned __int16)*--a2;
          }
          while (!sub_1C522FC04(a3, v22, v17));
        }
        else
        {
          do
            v21 = (unsigned __int16)*--a2;
          while (!sub_1C522FC04(a3, v21, v17));
        }
        v10 = &v9[v16];
        if (v19 < a2)
        {
          v23 = a2;
          do
          {
            v24 = *v10;
            *v10 = *v23;
            *v23 = v24;
            do
            {
              v25 = (unsigned __int16)v10[1];
              ++v10;
            }
            while (sub_1C522FC04(a3, v25, v17));
            do
              v26 = (unsigned __int16)*--v23;
            while (!sub_1C522FC04(a3, v26, v17));
          }
          while (v10 < v23);
        }
        v27 = v10 - 1;
        if (v10 - 1 != v9)
          *v9 = *v27;
        *v27 = v17;
        v28 = v19 >= a2;
        a2 = v20;
        if (!v28)
        {
LABEL_30:
          result = sub_1C522F44C(v9, v10 - 1, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v29 = sub_1C522FEA8(v9, v10 - 1, a3);
        result = sub_1C522FEA8(v10, v20, a3);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_30;
        }
        a2 = v10 - 1;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1C522FC04(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  unsigned int *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 ***v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _BOOL4 v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v6 = (_DWORD *)(v5 + 32 * a2);
  v7 = (unsigned int *)(v5 + 32 * a3);
  v8 = *(_QWORD *)(*(_QWORD *)(v4 + 256) + 24);
  v9 = *(_QWORD *)(v8 + 16 * (v6[1] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
  v10 = (unsigned __int16 ***)(*(_QWORD *)(v8 + 16 * (v7[1] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
  v11 = (uint64_t *)(v4 + 280);
  v12 = *(unsigned __int16 *)(*(_QWORD *)v9 + 24);
  v13 = *(_QWORD *)(v4 + 280);
  v14 = *(_DWORD *)(v4 + 288);
  if (v14 == *(_DWORD *)(v13 + 24 * *(unsigned __int16 *)(*(_QWORD *)v9 + 24)))
  {
    v15 = *(_QWORD *)(v4 + 280);
  }
  else
  {
    llvm::RegisterClassInfo::compute((uint64_t *)(v4 + 280), (unsigned __int16 ***)(*(_QWORD *)(v8 + 16 * (v6[1] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8));
    v15 = *(_QWORD *)(v4 + 280);
    v14 = *(_DWORD *)(v4 + 288);
  }
  v16 = *(_DWORD *)(v13 + 24 * v12 + 4);
  v17 = *((unsigned __int16 *)*v10 + 12);
  v18 = *((unsigned __int16 *)*v10 + 12);
  if (v14 != *(_DWORD *)(v15 + 24 * v18))
  {
    llvm::RegisterClassInfo::compute(v11, v10);
    v18 = *((unsigned __int16 *)*v10 + 12);
  }
  v19 = *(_DWORD *)(v15 + 24 * v17 + 4);
  v20 = **(_QWORD **)(a1 + 16);
  v21 = *(_DWORD *)(v20 + 4 * *(unsigned __int16 *)(*(_QWORD *)v9 + 24));
  v22 = *(_DWORD *)(v20 + 4 * v18);
  if (v21 > v16 && v22 <= v19)
    return 1;
  if (v21 <= v16 && v22 > v19)
    return 0;
  v25 = ((*v6 >> 28) & 1) == 0;
  if ((*v6 & 0xFFF00) != 0)
    v25 = 0;
  v26 = (*v6 & 0x40F00000) != 0 || v25;
  v27 = *v7;
  v28 = (*v7 & 0x40F00000) != 0 || (v27 & 0xFFF00) == 0 && ((v27 >> 28) & 1) == 0;
  if (v26 > v28)
    return 1;
  return a2 < a3 && v26 >= v28;
}

BOOL sub_1C522FDC8(__int16 *a1, __int16 *a2, __int16 *a3, uint64_t a4)
{
  BOOL v8;
  _BOOL8 result;
  unsigned int v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;

  v8 = sub_1C522FC04(a4, (unsigned __int16)*a2, (unsigned __int16)*a1);
  result = sub_1C522FC04(a4, (unsigned __int16)*a3, (unsigned __int16)*a2);
  if (v8)
  {
    v10 = (unsigned __int16)*a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      result = sub_1C522FC04(a4, (unsigned __int16)*a3, v10);
      if (result)
      {
        v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
      }
    }
  }
  else if (result)
  {
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    result = sub_1C522FC04(a4, (unsigned __int16)*a2, (unsigned __int16)*a1);
    if (result)
    {
      v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL sub_1C522FEA8(__int16 *a1, __int16 *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  __int16 v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  __int16 *v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  __int16 v19;
  unsigned __int16 v20;
  unsigned int v21;
  __int16 v22;
  unsigned int v23;
  unint64_t v24;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sub_1C522FC04(a3, (unsigned __int16)*(a2 - 1), (unsigned __int16)*a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      sub_1C522FDC8(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1C52300D8(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v17 = (unsigned __int16 *)(a1 + 2);
      v18 = (unsigned __int16 *)(a1 + 3);
      sub_1C52300D8(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      if (sub_1C522FC04(a3, (unsigned __int16)*(a2 - 1), (unsigned __int16)a1[3]))
      {
        v19 = *v18;
        *v18 = *(a2 - 1);
        *(a2 - 1) = v19;
        if (sub_1C522FC04(a3, *v18, *v17))
        {
          v20 = *v17;
          v21 = *v18;
          *v17 = v21;
          *v18 = v20;
          if (sub_1C522FC04(a3, v21, (unsigned __int16)a1[1]))
          {
            v22 = a1[1];
            v23 = (unsigned __int16)a1[2];
            a1[1] = v23;
            a1[2] = v22;
            if (sub_1C522FC04(a3, v23, (unsigned __int16)*a1))
            {
              HIDWORD(v24) = *(_DWORD *)a1;
              LODWORD(v24) = *(_DWORD *)a1;
              *(_DWORD *)a1 = v24 >> 16;
            }
          }
        }
      }
      return 1;
    default:
      v9 = (unsigned __int16 *)(a1 + 2);
      sub_1C522FDC8(a1, a1 + 1, a1 + 2, a3);
      v10 = (unsigned __int16 *)(a1 + 3);
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (sub_1C522FC04(a3, *v10, *v9))
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(__int16 *)((char *)a1 + v14 + 6) = *(__int16 *)((char *)a1 + v14 + 4);
        if (v14 == -4)
          break;
        v14 -= 2;
        if (!sub_1C522FC04(a3, v13, *((unsigned __int16 *)v15 + 1)))
        {
          v16 = (__int16 *)((char *)a1 + v14 + 6);
          goto LABEL_13;
        }
      }
      v16 = a1;
LABEL_13:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == (unsigned __int16 *)a2;
    }
    v9 = v10;
    v11 += 2;
    if (++v10 == (unsigned __int16 *)a2)
      return 1;
  }
}

BOOL sub_1C52300D8(__int16 *a1, __int16 *a2, __int16 *a3, __int16 *a4, uint64_t a5)
{
  _BOOL8 result;
  __int16 v11;
  __int16 v12;
  __int16 v13;

  sub_1C522FDC8(a1, a2, a3, a5);
  result = sub_1C522FC04(a5, (unsigned __int16)*a4, (unsigned __int16)*a3);
  if (result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = sub_1C522FC04(a5, (unsigned __int16)*a3, (unsigned __int16)*a2);
    if (result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = sub_1C522FC04(a5, (unsigned __int16)*a2, (unsigned __int16)*a1);
      if (result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t sub_1C5230188(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _WORD *v9;
  unsigned __int16 v10;
  uint64_t v11;
  unsigned int i;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;

  if (a3 && (v3 = *(unsigned int *)(a1 + 1416), (_DWORD)v3))
  {
    v4 = *(_QWORD **)(a1 + 1408);
    v5 = 8 * v3;
    while ((*(_DWORD *)(*v4 + 4 * (a2 >> 5)) & (1 << a2)) != 0)
    {
      ++v4;
      v5 -= 8;
      if (!v5)
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    v6 = *(_QWORD *)(a1 + 264);
    if (v6)
      v7 = (_QWORD *)(v6 + 8);
    else
      v7 = 0;
    v8 = *(unsigned int *)(*v7 + 24 * a2 + 16);
    v9 = (_WORD *)(v7[6] + ((v8 >> 3) & 0x1FFFFFFE));
    v10 = *v9 + (v8 & 0xF) * a2;
    v11 = *(_QWORD *)(a1 + 1264);
    while (1)
    {
      for (i = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1296) + v10); i < v11; i += 256)
      {
        if (*(unsigned __int16 *)(*(_QWORD *)(a1 + 1256) + 2 * i) == v10)
        {
          if (v11 != i)
            return 1;
          break;
        }
      }
      if (a3)
      {
        v13 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1352) + v10);
        v14 = *(_QWORD *)(a1 + 1320);
        if (v13 < v14)
        {
          while (1)
          {
            v15 = v13;
            if (*(unsigned __int16 *)(*(_QWORD *)(a1 + 1312) + 2 * v13) == v10)
              break;
            v13 += 256;
            if (v15 + 256 >= v14)
              goto LABEL_21;
          }
          if (v14 != v13)
            break;
        }
      }
LABEL_21:
      v16 = (unsigned __int16)v9[1];
      ++v9;
      v10 += v16;
      if (!v16)
        return 0;
    }
  }
  return 1;
}

_QWORD *sub_1C523029C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  unsigned int v6;
  uint64_t v8;
  _QWORD *v9;
  unsigned __int16 ***v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  __int16 v28;
  _WORD *v29;
  unsigned __int16 *v30;
  __int16 v31;
  unsigned __int16 v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  _QWORD *result;
  int v46;
  uint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  unsigned int v50;
  _QWORD *v51;
  uint64_t UniqueVRegDef;
  unsigned int v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  _WORD *v60;
  unsigned __int16 *v61;
  __int16 v62;
  unsigned __int16 v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  _WORD *v69;
  unsigned __int16 *v70;
  __int16 v71;
  unsigned __int16 v72;
  int v73;

  v6 = a4;
  v8 = *(unsigned int *)(a3 + 8);
  v9 = *(_QWORD **)(a1 + 256);
  v10 = (unsigned __int16 ***)(*(_QWORD *)(v9[3] + 16 * (v8 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
  if (a4 - 1 <= 0x3FFFFFFE
    && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v9 + 16) + 176))(*(_QWORD *)(*v9 + 16))
                                        + 216)
                            + 16)
                + a4)
    && ((*(_QWORD *)(v9[44] + 8 * (v6 >> 6)) >> v6) & 1) == 0
    && (v11 = (unint64_t)v6 >> 3, v11 < *((unsigned __int16 *)*v10 + 11))
    && ((*((unsigned __int8 *)(*v10)[1] + v11) >> (v6 & 7)) & 1) != 0
    && (sub_1C5230188(a1, (unsigned __int16)v6, a5) & 1) == 0)
  {
    v57 = *(_QWORD *)(a1 + 264);
    if (v57)
      v58 = (_QWORD *)(v57 + 8);
    else
      v58 = 0;
    v59 = *(unsigned int *)(*v58 + 24 * (unsigned __int16)v6 + 16);
    v60 = (_WORD *)(v58[6] + ((v59 >> 3) & 0x1FFFFFFE));
    v62 = *v60;
    v61 = v60 + 1;
    v63 = v62 + (v59 & 0xF) * v6;
    while (!*(_DWORD *)(*(_QWORD *)(a1 + 960) + 4 * v63))
    {
      v64 = *v61++;
      v63 += v64;
      if (!v64)
      {
        v44 = (unsigned __int16)v6;
LABEL_86:
        v41 = (_QWORD *)a1;
        v42 = a2;
        v43 = a3;
        return sub_1C52307FC(v41, v42, v43, v44);
      }
    }
  }
  else
  {
    v6 = 0;
  }
  v12 = *(_QWORD *)(a1 + 256);
  if ((v8 & 0x80000000) != 0)
    v13 = (uint64_t *)(*(_QWORD *)(v12 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8);
  else
    v13 = (uint64_t *)(*(_QWORD *)(v12 + 272) + 8 * v8);
  v14 = *v13;
  if (!*v13)
    goto LABEL_15;
  if ((*(_BYTE *)(v14 + 3) & 1) == 0)
  {
    v14 = *(_QWORD *)(v14 + 24);
    if (!v14 || (*(_BYTE *)(v14 + 3) & 1) == 0)
      goto LABEL_15;
  }
  v46 = 0;
  v47 = *(_QWORD *)(v14 + 8);
LABEL_50:
  if (**(_WORD **)(v47 + 16) != 19 || (v48 = *(_DWORD **)(v47 + 32), (*v48 & 0xFFF00) != 0) || (v48[8] & 0xFFF00) != 0)
  {
LABEL_53:
    if (v46 != 2)
    {
      ++v46;
      v49 = *(_QWORD *)(v14 + 8);
      while (1)
      {
        v14 = *(_QWORD *)(v14 + 24);
        if (!v14 || (*(_BYTE *)(v14 + 3) & 1) == 0)
          break;
        v47 = *(_QWORD *)(v14 + 8);
        if (v47 != v49)
          goto LABEL_50;
      }
    }
LABEL_15:
    LODWORD(v15) = 0;
    goto LABEL_16;
  }
  v50 = 0;
  while (1)
  {
    v15 = v48[9];
    v51 = *(_QWORD **)(a1 + 256);
    if ((v15 - 1) < 0x3FFFFFFF)
      break;
    UniqueVRegDef = llvm::MachineRegisterInfo::getUniqueVRegDef(*(_QWORD *)(a1 + 256), v15);
    if (UniqueVRegDef)
    {
      if (**(_WORD **)(UniqueVRegDef + 16) == 19)
      {
        v48 = *(_DWORD **)(UniqueVRegDef + 32);
        if ((*v48 & 0xFFF00) == 0 && (v48[8] & 0xFFF00) == 0 && v50++ < 3)
          continue;
      }
    }
    goto LABEL_53;
  }
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v51 + 16) + 176))(*(_QWORD *)(*v51 + 16))
                                         + 216)
                             + 16)
                 + v15))
    goto LABEL_15;
  v65 = v15 >> 3;
  if (((*(_QWORD *)(v51[44] + ((v15 >> 3) & 0x1FFFFFF8)) >> v15) & 1) != 0
    || v65 >= *((unsigned __int16 *)*v10 + 11)
    || ((*((unsigned __int8 *)(*v10)[1] + v65) >> (v15 & 7)) & 1) == 0
    || (sub_1C5230188(a1, (unsigned __int16)v15, a5) & 1) != 0)
  {
    goto LABEL_15;
  }
  v66 = *(_QWORD *)(a1 + 264);
  if (v66)
    v67 = (_QWORD *)(v66 + 8);
  else
    v67 = 0;
  v68 = *(unsigned int *)(*v67 + 24 * (unsigned __int16)v15 + 16);
  v69 = (_WORD *)(v67[6] + ((v68 >> 3) & 0x1FFFFFFE));
  v71 = *v69;
  v70 = v69 + 1;
  v72 = v71 + (v68 & 0xF) * v15;
  while (!*(_DWORD *)(*(_QWORD *)(a1 + 960) + 4 * v72))
  {
    v73 = *v70++;
    v72 += v73;
    if (!v73)
    {
      v44 = (unsigned __int16)v15;
      goto LABEL_86;
    }
  }
LABEL_16:
  v16 = *((unsigned __int16 *)*v10 + 12);
  v17 = *(_QWORD *)(a1 + 280);
  if (*(_DWORD *)(a1 + 288) != *(_DWORD *)(v17 + 24 * *((unsigned __int16 *)*v10 + 12)))
    llvm::RegisterClassInfo::compute((uint64_t *)(a1 + 280), v10);
  v18 = v17 + 24 * v16;
  v19 = *(unsigned int *)(v18 + 4);
  if (!(_DWORD)v19)
    goto LABEL_72;
  v20 = 0;
  v21 = *(unsigned __int16 **)(v18 + 16);
  v22 = &v21[v19];
  v23 = -1;
  do
  {
    v24 = *v21;
    if ((sub_1C5230188(a1, v24, a5) & 1) == 0)
    {
      v25 = *(_QWORD *)(a1 + 264);
      if (v25)
        v26 = (_QWORD *)(v25 + 8);
      else
        v26 = 0;
      v27 = *(unsigned int *)(*v26 + 24 * v24 + 16);
      v28 = v27 & 0xF;
      v29 = (_WORD *)(v26[6] + ((v27 >> 3) & 0x1FFFFFFE));
      v31 = *v29;
      v30 = v29 + 1;
      v32 = v31 + v28 * v24;
      while (1)
      {
        v33 = *(_DWORD *)(*(_QWORD *)(a1 + 960) + 4 * v32);
        if (v33)
          break;
        v34 = *v30++;
        v32 += v34;
        if (!v34)
        {
          v41 = (_QWORD *)a1;
          v42 = a2;
          v43 = a3;
          v44 = v24;
          return sub_1C52307FC(v41, v42, v43, v44);
        }
      }
      if (v33 == 1)
      {
        v35 = -1;
      }
      else
      {
        if (*(_DWORD *)(*(_QWORD *)(a1 + 560) + 4 * (v33 & 0x7FFFFFFF)) != -1)
          goto LABEL_37;
        v36 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 800) + (v33 & 0x7FFFFFFF));
        v37 = *(_DWORD *)(a1 + 600);
        v38 = *(_QWORD *)(a1 + 592);
        if (v37 > v36)
        {
          while (1)
          {
            v39 = v36;
            if (((*(_DWORD *)(v38 + 24 * v36 + 8) ^ v33) & 0x7FFFFFFF) == 0)
              break;
            v36 += 256;
            if (v39 + 256 >= v37)
              goto LABEL_36;
          }
          v37 = v36;
        }
LABEL_36:
        if (!*(_BYTE *)(v38 + 24 * v37 + 14))
          v35 = 100;
        else
LABEL_37:
          v35 = 50;
      }
      if ((_DWORD)v15 == v24 || v6 == v24)
        v35 -= 20;
      if (v35 < v23)
      {
        v23 = v35;
        v20 = v24;
      }
    }
    ++v21;
  }
  while (v21 != v22);
  if (v20)
  {
    sub_1C522F178(a1, a2, v20);
    v41 = (_QWORD *)a1;
    v42 = a2;
    v43 = a3;
    v44 = v20;
    return sub_1C52307FC(v41, v42, v43, v44);
  }
  else
  {
LABEL_72:
    v54 = **(unsigned __int16 **)(a2 + 16) - 1;
    if (v54 >= 2)
      v55 = "ran out of registers during register allocation";
    else
      v55 = "inline assembly requires more registers than available";
    if (v54 >= 2)
      v56 = 47;
    else
      v56 = 54;
    result = (_QWORD *)llvm::MachineInstr::emitError(a2, (uint64_t)v55, v56);
    *(_BYTE *)(a3 + 16) = 1;
    *(_WORD *)(a3 + 12) = 0;
  }
  return result;
}

_QWORD *sub_1C52307FC(_QWORD *result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  _DWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  _QWORD v52[3];
  _QWORD *v53;
  _DWORD *v54;
  _QWORD v55[3];
  _QWORD *v56;
  uint64_t v57;

  v5 = result;
  v57 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a3 + 8);
  *(_WORD *)(a3 + 12) = a4;
  v7 = result[33];
  if (v7)
    v8 = (_QWORD *)(v7 + 8);
  else
    v8 = 0;
  v10 = *(unsigned int *)(*v8 + 24 * a4 + 16);
  v11 = (unsigned __int16 *)(v8[6] + ((v10 >> 3) & 0x1FFFFFFE));
  v13 = *v11;
  v12 = v11 + 1;
  v14 = v13 + (v10 & 0xF) * a4;
  v15 = result[120];
  do
  {
    *(_DWORD *)(v15 + 4 * (unsigned __int16)v14) = v6;
    v16 = *v12++;
    v14 += v16;
  }
  while (v16);
  v17 = result[108];
  v18 = *((unsigned int *)result + 220);
  if ((_DWORD)v18)
  {
    v19 = ((_DWORD)v18 - 1) & (37 * v6);
    v20 = (int *)(v17 + 32 * v19);
    v21 = *v20;
    if (*v20 == v6)
      goto LABEL_13;
    v22 = 1;
    while (v21 != -1)
    {
      v23 = v19 + v22++;
      v19 = v23 & (v18 - 1);
      v21 = *(_DWORD *)(v17 + 32 * v19);
      if (v21 == v6)
      {
        v20 = (int *)(v17 + 32 * v19);
        goto LABEL_13;
      }
    }
  }
  v20 = (int *)(v17 + 32 * v18);
LABEL_13:
  if ((int *)(v17 + 32 * v18) != v20)
  {
    v24 = v20[4];
    if ((_DWORD)v24)
    {
      v25 = (uint64_t *)*((_QWORD *)v20 + 1);
      v26 = &v25[v24];
      v27 = &v49;
      v28 = &v45;
      do
      {
        v29 = *v25;
        v30 = *(_QWORD *)(*v25 + 32);
        if (**(_WORD **)(*v25 + 16) != 14)
        {
          v32 = v30 + 32;
          goto LABEL_20;
        }
        v31 = *(unsigned int *)(v29 + 40);
        if ((_DWORD)v31 == 2)
          goto LABEL_23;
        v32 = v30 + 32 * v31;
        v30 += 64;
LABEL_20:
        while (*(_BYTE *)v30 || *(_DWORD *)(v30 + 4) != v6)
        {
          v30 += 32;
          if (v30 == v32)
            goto LABEL_23;
        }
        v43 = v28;
        v41 = a2;
        v42 = v27;
        v33 = *(_QWORD *)(a2 + 8);
        v34 = a4;
        if (v33 != v29)
        {
          v34 = 20;
          while (llvm::MachineInstr::findRegisterDefOperandIdx(v33, a4, 0, 1, v5[33]) == -1)
          {
            if (!--v34)
              goto LABEL_37;
            if (!v33 || (*(_BYTE *)v33 & 4) == 0)
            {
              while ((*(_WORD *)(v33 + 44) & 8) != 0)
                v33 = *(_QWORD *)(v33 + 8);
            }
            v33 = *(_QWORD *)(v33 + 8);
            if (v33 == v29)
            {
              v34 = a4;
              goto LABEL_37;
            }
          }
          v34 = 0;
        }
LABEL_37:
        sub_1C61F1700(v29, v6, v51);
        v47 = (_DWORD *)v51[0];
        v48 = (_DWORD *)v51[1];
        if (v53)
        {
          v35 = (uint64_t)v43;
          if (v53 == v52)
          {
            v50 = (uint64_t)v42;
            (*(void (**)(_QWORD *))(v52[0] + 24))(v52);
          }
          else
          {
            v50 = (*(uint64_t (**)(void))(*v53 + 16))();
          }
        }
        else
        {
          v50 = 0;
          v35 = (uint64_t)v43;
        }
        v44 = v54;
        if (v56)
        {
          if (v56 == v55)
          {
            v46 = v35;
            (*(void (**)(_QWORD *, uint64_t))(v55[0] + 24))(v55, v35);
          }
          else
          {
            v46 = (*(uint64_t (**)(void))(*v56 + 16))();
          }
        }
        else
        {
          v46 = 0;
        }
        v36 = v47;
        while (v36 != v44)
        {
          llvm::MachineOperand::setReg((uint64_t)v36, v34);
          if (v34)
            *v36 |= 0x8000000u;
          while (1)
          {
            v36 = v47 + 8;
            v47 = v36;
            if (v36 == v48)
              break;
            if (!v50)
              sub_1C485C2F0();
            if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(_QWORD *)v50 + 48))(v50, v36))
            {
              v36 = v47;
              break;
            }
          }
        }
        v37 = (_QWORD *)v46;
        v28 = v43;
        if ((uint64_t *)v46 == v43)
        {
          v37 = v43;
          v38 = 4;
          v27 = v42;
        }
        else
        {
          v27 = v42;
          if (!v46)
            goto LABEL_60;
          v38 = 5;
        }
        (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_60:
        v39 = (_QWORD *)v50;
        if ((uint64_t *)v50 == v27)
        {
          v39 = v27;
          v40 = 4;
LABEL_64:
          (*(void (**)(void))(*v39 + 8 * v40))();
          goto LABEL_65;
        }
        if (v50)
        {
          v40 = 5;
          goto LABEL_64;
        }
LABEL_65:
        result = sub_1C619047C(v51);
        a2 = v41;
LABEL_23:
        ++v25;
      }
      while (v25 != v26);
    }
    v20[4] = 0;
  }
  return result;
}

uint64_t sub_1C5230BE8(uint64_t a1, __int128 *a2)
{
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;

  v2 = a2;
  v4 = *((_DWORD *)a2 + 2) & 0x7FFFFFFF;
  v5 = *(_QWORD *)(a1 + 208);
  v6 = *(unsigned __int8 *)(v5 + v4);
  v7 = *(_DWORD *)(a1 + 8);
  if (v7 > v6)
  {
    v8 = *(_QWORD *)a1;
    while (1)
    {
      v9 = v6;
      if ((*(_DWORD *)(v8 + 24 * v6 + 8) & 0x7FFFFFFF) == (_DWORD)v4)
        break;
      v6 += 256;
      if (v9 + 256 >= v7)
        goto LABEL_7;
    }
    if (v7 != v6)
      return v8 + 24 * v6;
  }
LABEL_7:
  *(_BYTE *)(v5 + v4) = v7;
  v10 = *(unsigned int *)(a1 + 8);
  v11 = *(_QWORD *)a1;
  if (v10 >= *(_DWORD *)(a1 + 12))
  {
    v15 = v10 + 1;
    v16 = v11 + 24 * v10;
    if (v11 <= (unint64_t)a2 && v16 > (unint64_t)a2)
    {
      v18 = (uint64_t)a2 - v11;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v15, 24);
      v11 = *(_QWORD *)a1;
      v2 = (__int128 *)(*(_QWORD *)a1 + v18);
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v15, 24);
      v11 = *(_QWORD *)a1;
    }
  }
  v12 = v11 + 24 * *(unsigned int *)(a1 + 8);
  v13 = *v2;
  *(_QWORD *)(v12 + 16) = *((_QWORD *)v2 + 2);
  *(_OWORD *)v12 = v13;
  LODWORD(v12) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v12;
  return *(_QWORD *)a1 + 24 * v12 - 24;
}

uint64_t sub_1C5230D08(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  int v9;
  uint64_t v11;
  uint64_t UniqueVRegDef;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t i;
  uint64_t v21;

  v2 = 1 << a2;
  v3 = (a2 >> 6) & 0x1FFFFFF;
  v4 = a1[69];
  v6 = *(_QWORD **)(v4 + 88);
  v5 = *(_QWORD **)(v4 + 96);
  if ((*(_QWORD *)(a1[111] + 8 * v3) & (1 << a2)) != 0)
  {
    v7 = v6 == v5;
    return !v7;
  }
  v9 = a2;
  if (v6 != v5)
  {
    while (*v6 != v4)
    {
      if (++v6 == v5)
      {
        v6 = *(_QWORD **)(v4 + 96);
        break;
      }
    }
  }
  v11 = a2;
  if (v6 == v5)
  {
    UniqueVRegDef = 0;
  }
  else
  {
    UniqueVRegDef = llvm::MachineRegisterInfo::getUniqueVRegDef(a1[32], a2);
    if (!UniqueVRegDef)
    {
LABEL_12:
      *(_QWORD *)(a1[111] + 8 * v3) |= v2;
      return 1;
    }
  }
  v13 = a1[32];
  if (v9 < 0)
    v14 = (uint64_t *)(*(_QWORD *)(v13 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
  else
    v14 = (uint64_t *)(*(_QWORD *)(v13 + 272) + 8 * v11);
  v15 = *v14;
  if (!v15)
    return 0;
  if ((*(_BYTE *)(v15 + 3) & 0x81) != 0)
  {
    do
    {
      v15 = *(_QWORD *)(v15 + 24);
      if (!v15)
        return 0;
    }
    while ((*(_DWORD *)v15 & 0x81000000) != 0);
  }
  v16 = (_QWORD *)a1[69];
  v17 = *(_QWORD *)(v15 + 8);
  if (*(_QWORD **)(v17 + 24) == v16)
  {
    v18 = 0;
LABEL_24:
    if (v18 != 7)
    {
      ++v18;
      if (UniqueVRegDef)
      {
        if (UniqueVRegDef == v17)
          goto LABEL_12;
        if (v16 + 6 != (_QWORD *)v17)
        {
          for (i = v16[7]; i != UniqueVRegDef && i != v17; i = *(_QWORD *)(i + 8))
          {
            if (!i || (*(_BYTE *)i & 4) == 0)
            {
              while ((*(_WORD *)(i + 44) & 8) != 0)
                i = *(_QWORD *)(i + 8);
            }
          }
          if (i != UniqueVRegDef)
            goto LABEL_12;
        }
      }
      while (1)
      {
        v15 = *(_QWORD *)(v15 + 24);
        if (!v15)
          return 0;
        if ((*(_DWORD *)v15 & 0x81000000) == 0)
        {
          v21 = *(_QWORD *)(v15 + 8);
          if (v21 != v17)
          {
            v17 = *(_QWORD *)(v15 + 8);
            if (*(_QWORD **)(v21 + 24) == v16)
              goto LABEL_24;
            break;
          }
        }
      }
    }
  }
  *(_QWORD *)(a1[111] + 8 * v3) |= v2;
  v7 = v16[11] == v16[12];
  return !v7;
}

uint64_t sub_1C5230EE0(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t result;
  int v10;
  unsigned __int16 v11;

  v2 = *(_QWORD *)(a1 + 264);
  if (v2)
    v3 = (_QWORD *)(v2 + 8);
  else
    v3 = 0;
  v4 = (unsigned __int16 *)(v3[6] + (((unint64_t)*(unsigned int *)(*v3 + 24 * a2 + 16) >> 3) & 0x1FFFFFFE));
  v6 = *v4;
  v5 = v4 + 1;
  v7 = v6 + (*(_DWORD *)(*v3 + 24 * a2 + 16) & 0xF) * a2;
  v8 = (uint64_t *)(a1 + 1256);
  do
  {
    v11 = v7;
    result = sub_1C61DF708(v8, &v11);
    v10 = *v5++;
    v7 += v10;
  }
  while (v10);
  return result;
}

uint64_t sub_1C5230F64(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v3 = a2 & 0x7FFFFFFF;
  result = *(unsigned int *)(*(_QWORD *)(a1 + 560) + 4 * v3);
  if ((_DWORD)result == -1)
  {
    v5 = *(_QWORD *)(a1 + 264);
    v6 = *(_QWORD *)(v5 + 264)
       + 24
       * (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 24) + 16 * v3) & 0xFFFFFFFFFFFFFFF8)
                              + 24)
        + *(_DWORD *)(v5 + 272) * ((*(_QWORD *)(v5 + 248) - *(_QWORD *)(v5 + 240)) >> 3));
    result = llvm::MachineFrameInfo::CreateSpillStackObject(*(unsigned __int8 **)(a1 + 248), (unint64_t)*(unsigned int *)(v6 + 4) >> 3, 63 - __clz((unint64_t)*(unsigned int *)(v6 + 8) >> 3));
    *(_DWORD *)(*(_QWORD *)(a1 + 560) + 4 * v3) = result;
  }
  return result;
}

uint64_t sub_1C5230FFC(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v16[32];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a2 >= 3)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 2)
    {
      v15 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v15;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C620B4B8(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v16;
  v10 = 1;
  v11 = a1 + 8;
  do
  {
    v12 = v8;
    if ((*(_QWORD *)v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(_QWORD *)v9 = *(_QWORD *)v11;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(v11 + 8);
      v9 += 16;
    }
    v11 = a1 + 8 + 16 * v10;
    v8 = 1;
    v10 = 2;
  }
  while ((v12 & 1) == 0);
  if (a2 > 2)
  {
    *(_DWORD *)a1 &= ~1u;
    v13 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v13;
  }
  return sub_1C620B4B8(a1, (uint64_t)v16, (uint64_t)v9);
}

unint64_t sub_1C5231184(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 72 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_1C620B580(a1, v5);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_1C620B580(a1, v5);
    }
  }
  return a2;
}

_DWORD *sub_1C52311EC(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)4uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C620B8E8(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result = -1;
      result += 2;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

void sub_1C52312A4(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v4 = 32 * v2;
    v5 = *(_QWORD *)a1 + 24;
    do
    {
      if (*(_DWORD *)(v5 - 24) <= 0xFFFFFFFD)
      {
        v6 = *(void **)(v5 - 16);
        if ((void *)v5 != v6)
          free(v6);
      }
      v5 += 32;
      v4 -= 32;
    }
    while (v4);
  }
  if (v3)
  {
    v7 = 1 << (33 - __clz(v3 - 1));
    if (v7 <= 64)
      v8 = 64;
    else
      v8 = v7;
    if (v8 == *(_DWORD *)(a1 + 16))
    {
      *(_QWORD *)(a1 + 8) = 0;
      v9 = 32 * v8;
      v10 = *(_DWORD **)a1;
      do
      {
        *v10 = -1;
        v10 += 8;
        v9 -= 32;
      }
      while (v9);
    }
    else
    {
      MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
      v11 = (4 * v8 / 3 + 1) | ((unint64_t)(4 * v8 / 3 + 1) >> 1);
      v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
      LODWORD(v12) = (((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8)) + 1;
      *(_DWORD *)(a1 + 16) = v12;
      v13 = operator new(32 * v12, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = 0;
      v14 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v14)
      {
        v15 = 32 * v14;
        do
        {
          *v13 = -1;
          v13 += 8;
          v15 -= 32;
        }
        while (v15);
      }
    }
  }
  else if (*(_DWORD *)(a1 + 16))
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_1C52313F4(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v4 = 40 * v2;
    v5 = *(_QWORD *)a1 + 24;
    do
    {
      if (*(_DWORD *)(v5 - 24) <= 0xFFFFFFFD)
      {
        v6 = *(void **)(v5 - 16);
        if ((void *)v5 != v6)
          free(v6);
      }
      v5 += 40;
      v4 -= 40;
    }
    while (v4);
  }
  v7 = 1 << (33 - __clz(v3 - 1));
  if (v7 <= 64)
    v7 = 64;
  if (v3)
    v8 = v7;
  else
    v8 = 0;
  if ((_DWORD)v8 == *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 8) = 0;
    if ((_DWORD)v8)
    {
      v9 = *(_DWORD **)a1;
      v10 = 40 * v8;
      do
      {
        *v9 = -1;
        v9 += 10;
        v10 -= 40;
      }
      while (v10);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    if ((_DWORD)v8)
    {
      v11 = (4 * (int)v8 / 3u + 1) | ((unint64_t)(4 * (int)v8 / 3u + 1) >> 1);
      v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
      LODWORD(v12) = (((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8)) + 1;
      *(_DWORD *)(a1 + 16) = v12;
      v13 = operator new(40 * v12, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = 0;
      v14 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v14)
      {
        v15 = 40 * v14;
        do
        {
          *v13 = -1;
          v13 += 10;
          v15 -= 40;
        }
        while (v15);
      }
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
    }
  }
}

uint64_t sub_1C5231544()
{
  int v1;

  v1 = 1;
  sub_1C620B9BC(&v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7FE3C0, &dword_1C475E000);
  sub_1C620A114((uint64_t)&unk_1ED7FE390, "fast", "fast register allocator", (uint64_t)llvm::createFastRegisterAllocator);
  return __cxa_atexit((void (*)(void *))sub_1C5229294, &unk_1ED7FE390, &dword_1C475E000);
}

uint64_t sub_1C52315C8(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  llvm::PassRegistry *v5;
  llvm::PassRegistry *v6;
  llvm::PassRegistry *v7;
  llvm::PassRegistry *v8;
  llvm::PassRegistry *v9;
  llvm::PassRegistry *v10;
  llvm::PassRegistry *v11;
  uint64_t v12;

  llvm::initializeLiveDebugVariablesPass(a1, a2);
  llvm::initializeSlotIndexesPass((uint64_t)a1);
  llvm::initializeLiveIntervalsPass((uint64_t)a1);
  llvm::initializeRegisterCoalescerPass(a1, v3);
  llvm::initializeMachineSchedulerPass(a1, v4);
  llvm::initializeLiveStacksPass(a1, v5);
  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeMachineLoopInfoPass((uint64_t)a1);
  llvm::initializeVirtRegMapPass(a1, v6);
  llvm::initializeLiveRegMatrixPass(a1, v7);
  llvm::initializeEdgeBundlesPass(a1, v8);
  llvm::initializeSpillPlacementPass(a1, v9);
  llvm::initializeMachineOptimizationRemarkEmitterPassPass(a1, v10);
  llvm::initializeRegAllocEvictionAdvisorAnalysisPass(a1, v11);
  v12 = operator new();
  *(_QWORD *)v12 = "Greedy Register Allocator";
  *(_QWORD *)(v12 + 8) = 25;
  *(_QWORD *)(v12 + 16) = "greedy";
  *(_QWORD *)(v12 + 24) = 6;
  *(_QWORD *)(v12 + 32) = &unk_1EF8F2F48;
  *(_WORD *)(v12 + 40) = 0;
  *(_BYTE *)(v12 + 42) = 0;
  *(_QWORD *)(v12 + 48) = 0;
  *(_QWORD *)(v12 + 56) = 0;
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = sub_1C620C96C;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v12, 1);
  return v12;
}

uint64_t sub_1C52316C4()
{
  return 1;
}

uint64_t sub_1C52316CC(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void (**v7)(_QWORD *);
  uint64_t v8;
  uint64_t v9;
  int64x2_t v10;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = sub_1C4776848(a1, (uint64_t)&unk_1EF8F2F48) + 248;
  v5 = (_QWORD *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      v13 = v12;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v12);
    }
    else
    {
      v13 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    }
  }
  else
  {
    v13 = 0;
  }
  sub_1C620A1C8(v4, (uint64_t)v12);
  v6 = v13;
  if (v13 == v12)
  {
    v7 = (void (**)(_QWORD *))(v12[0] + 32);
    v6 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_7;
    v7 = (void (**)(_QWORD *))(*v13 + 40);
  }
  (*v7)(v6);
LABEL_7:
  *(_QWORD *)a1 = &off_1E8149408;
  *(_QWORD *)(a1 + 248) = &unk_1E8149508;
  *(_QWORD *)(a1 + 856) = &unk_1E8149560;
  llvm::RegisterClassInfo::RegisterClassInfo((llvm::RegisterClassInfo *)(a1 + 888));
  *(_QWORD *)(a1 + 1240) = 0;
  *(_BYTE *)(a1 + 1248) = 0;
  *(_BYTE *)(a1 + 1288) = 0;
  *(_QWORD *)(a1 + 1296) = 0;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_DWORD *)(a1 + 1328) = 0;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1380) = 0u;
  v8 = 1400;
  do
  {
    v9 = a1 + v8;
    *(_QWORD *)v9 = 0;
    *(_DWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 40) = 0;
    *(_QWORD *)(v9 + 48) = a1 + v8 + 64;
    *(_QWORD *)(v9 + 56) = 0x400000000;
    *(_QWORD *)(v9 + 512) = a1 + v8 + 528;
    v8 += 720;
    *(_QWORD *)(v9 + 520) = 0x800000000;
  }
  while (v9 + 720 != a1 + 24440);
  *(_QWORD *)(a1 + 24440) = a1 + 24456;
  *(_QWORD *)(a1 + 24448) = 0x800000000;
  *(_QWORD *)(a1 + 24520) = a1 + 24536;
  *(_QWORD *)(a1 + 24528) = 0x2000000000;
  *(_QWORD *)(a1 + 29144) = a1 + 29160;
  *(_QWORD *)(a1 + 29152) = 0x2000000000;
  *(_QWORD *)(a1 + 29288) = 0;
  *(_QWORD *)(a1 + 29296) = 1;
  v10 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(a1 + 29304) = v10;
  *(int64x2_t *)(a1 + 29320) = v10;
  *(int64x2_t *)(a1 + 29336) = v10;
  *(int64x2_t *)(a1 + 29352) = v10;
  *(_QWORD *)(a1 + 29368) = a1 + 29384;
  *(_QWORD *)(a1 + 29376) = 0x800000000;
  *(_OWORD *)(a1 + 29448) = 0u;
  return a1;
}

BOOL sub_1C52318EC(uint64_t a1, int a2)
{
  uint64_t v3;
  unint64_t v4;
  llvm::LiveInterval *v5;
  int v6;

  v3 = *(_QWORD *)(a1 + 280);
  v4 = a2 & 0x7FFFFFFF;
  if (v4 >= *(unsigned int *)(v3 + 416) || (v5 = *(llvm::LiveInterval **)(*(_QWORD *)(v3 + 408) + 8 * v4)) == 0)
  {
    v5 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(a1 + 280), a2);
    llvm::LiveIntervals::computeVirtRegInterval((llvm::LiveIntervals *)v3, v5);
  }
  v6 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 280) + 4 * v4);
  if (v6)
  {
    llvm::LiveRegMatrix::unassign(*(llvm::LiveRegMatrix **)(a1 + 288), v5);
    (*(void (**)(uint64_t, llvm::LiveInterval *))(*(_QWORD *)a1 + 208))(a1, v5);
  }
  else
  {
    *((_DWORD *)v5 + 18) = 0;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v6 != 0;
}

BOOL sub_1C5231994(uint64_t a1, int a2)
{
  return sub_1C52318EC(a1 - 856, a2);
}

uint64_t sub_1C52319A0(uint64_t result, int a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm::LiveInterval *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a2 & 0x7FFFFFFF;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 272) + 280) + 4 * v2))
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 280);
    if (v2 >= *(unsigned int *)(v4 + 416) || (v5 = *(llvm::LiveInterval **)(*(_QWORD *)(v4 + 408) + 8 * v2)) == 0)
    {
      v5 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(result + 280), a2);
      llvm::LiveIntervals::computeVirtRegInterval((llvm::LiveIntervals *)v4, v5);
    }
    result = llvm::LiveRegMatrix::unassign(*(llvm::LiveRegMatrix **)(v3 + 288), v5);
    v6 = *((_DWORD *)v5 + 28) & 0x7FFFFFFF;
    if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 272) + 280) + 4 * v6))
    {
      v7 = *(_QWORD *)(v3 + 560);
      if (v7)
      {
        result = (*(uint64_t (**)(uint64_t, _QWORD, unint64_t))(*(_QWORD *)v7 + 48))(v7, *(_QWORD *)(v3 + 256), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 264) + 24) + 16 * v6) & 0xFFFFFFFFFFFFFFF8);
        if ((_DWORD)result)
          return (*(uint64_t (**)(uint64_t, llvm::LiveInterval *))(*(_QWORD *)(v3 + 248) + 40))(v3 + 248, v5);
      }
      else
      {
        sub_1C485C2F0();
        return sub_1C5231A88();
      }
    }
  }
  return result;
}

uint64_t sub_1C5231A88(uint64_t a1, int a2)
{
  return sub_1C52319A0(a1 - 856, a2);
}

_QWORD *sub_1C5231A94(_QWORD *result, int a2, int a3)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = a3 & 0x7FFFFFFF;
  v4 = *((unsigned int *)result + 2);
  if (v3 < v4)
  {
    v5 = result;
    v6 = *result;
    *(_DWORD *)(*result + 8 * v3) = 1;
    v7 = a2 & 0x7FFFFFFF;
    if (v7 < v4)
    {
LABEL_10:
      *(_QWORD *)(v6 + 8 * v7) = *(_QWORD *)(v6 + 8 * v3);
      return result;
    }
    v8 = result[2];
    v9 = v7 + 1 - v4;
    v10 = v4;
    v11 = v4;
    if (v7 >= *((unsigned int *)result + 3))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 2), v7 + 1, 8);
      v10 = *((unsigned int *)v5 + 2);
      v6 = *v5;
      v11 = *((_DWORD *)v5 + 2);
      if (v9)
      {
LABEL_5:
        v12 = (_QWORD *)(v6 + 8 * v10);
        v13 = ~v7 + v4;
        do
          *v12++ = v8;
        while (!__CFADD__(v13++, 1));
        v11 = *((_DWORD *)v5 + 2);
        v6 = *v5;
      }
    }
    else if (v9)
    {
      goto LABEL_5;
    }
    *((_DWORD *)v5 + 2) = v11 + v9;
    goto LABEL_10;
  }
  return result;
}

_QWORD *sub_1C5231B64(uint64_t a1, int a2, int a3)
{
  return sub_1C5231A94((_QWORD *)(a1 + 392), a2, a3);
}

void sub_1C5231B74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 1200);
  *(_QWORD *)(a1 + 1200) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  v4 = (_DWORD *)(a1 + 24528);
  v3 = *(unsigned int *)(a1 + 24528);
  if ((_DWORD)v3)
  {
    v5 = *(_QWORD *)(a1 + 24520);
    v6 = 144 * v3;
    do
    {
      v7 = v5 + v6;
      v8 = *(void **)(v5 + v6 - 48);
      if ((void *)(v5 + v6 - 32) != v8)
        free(v8);
      v9 = *(void **)(v7 - 120);
      if ((void *)(v7 - 104) != v9)
        free(v9);
      *(_QWORD *)(v5 + v6 - 128) = 0;
      v10 = *(_QWORD *)(v5 + v6 - 136);
      if (v10)
        --*(_DWORD *)(v10 + 8);
      *(_QWORD *)(v5 + v6 - 136) = 0;
      v6 -= 144;
    }
    while (v6);
  }
  *v4 = 0;
}

uint64_t sub_1C5231C30(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t *v67;
  int v68;
  unint64_t v69;

  v6 = *((unsigned int *)a3 + 2);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 24 * v6;
    v9 = *a3 + 1;
    do
    {
      v7 = ((*v9 >> 1) & 3 | *(_DWORD *)((*v9 & 0xFFFFFFFFFFFFFFF8) + 24))
         + v7
         - ((*(v9 - 1) >> 1) & 3 | *(_DWORD *)((*(v9 - 1) & 0xFFFFFFFFFFFFFFF8) + 24));
      v9 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  else
  {
    v7 = 0;
  }
  v10 = *((_DWORD *)a3 + 28);
  v11 = (uint64_t *)(a1 + 1248);
  v12 = v10 & 0x7FFFFFFF;
  v13 = *(unsigned int *)(a1 + 1256);
  if ((v10 & 0x7FFFFFFFu) >= v13)
  {
    v14 = *(_QWORD *)(a1 + 1264);
    v15 = v12 + 1 - v13;
    v16 = *(unsigned int *)(a1 + 1256);
    v17 = *(_DWORD *)(a1 + 1256);
    if (v12 >= *(_DWORD *)(a1 + 1260))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 1248, a1 + 1264, v12 + 1, 8);
      v16 = *(unsigned int *)(a1 + 1256);
      v17 = *(_DWORD *)(a1 + 1256);
      if (v15)
      {
LABEL_9:
        v18 = (_QWORD *)(*v11 + 8 * v16);
        v19 = ~v12 + v13;
        do
        {
          *v18++ = v14;
          v20 = __CFADD__(v19++, 1);
        }
        while (!v20);
        v17 = *(_DWORD *)(a1 + 1256);
      }
    }
    else if (v15)
    {
      goto LABEL_9;
    }
    LODWORD(v13) = v17 + v15;
    *(_DWORD *)(a1 + 1256) = v17 + v15;
  }
  v21 = *v11;
  v22 = *(_DWORD *)(*v11 + 8 * v12);
  switch(v22)
  {
    case 5:
      v7 = dword_1EF8F2F50++;
      goto LABEL_45;
    case 2:
      goto LABEL_45;
    case 0:
      if (v12 < v13)
      {
LABEL_25:
        v22 = 1;
        *(_DWORD *)(v21 + 8 * v12) = 1;
        break;
      }
      v23 = v13;
      v24 = *(_QWORD *)(a1 + 1264);
      v25 = v12 + 1 - v13;
      v26 = v13;
      if (v12 >= *(_DWORD *)(a1 + 1260))
      {
        v58 = v12 + 1 - v13;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 1248, a1 + 1264, v12 + 1, 8);
        v23 = v13;
        LODWORD(v25) = v12 + 1 - v13;
        v26 = *(unsigned int *)(a1 + 1256);
        v21 = *(_QWORD *)(a1 + 1248);
        LODWORD(v13) = *(_DWORD *)(a1 + 1256);
        if (v58)
        {
LABEL_20:
          v27 = (_QWORD *)(v21 + 8 * v26);
          v28 = ~v12 + v23;
          do
          {
            *v27++ = v24;
            v20 = __CFADD__(v28++, 1);
          }
          while (!v20);
          LODWORD(v13) = *(_DWORD *)(a1 + 1256);
          v21 = *(_QWORD *)(a1 + 1248);
        }
      }
      else if (v25)
      {
        goto LABEL_20;
      }
      *(_DWORD *)(a1 + 1256) = v13 + v25;
      goto LABEL_25;
  }
  v29 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 880) + 360))(*(_QWORD *)(a1 + 880));
  v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 24) + 16 * v12) & 0xFFFFFFFFFFFFFFF8;
  if ((v29 & 1) != 0)
  {
    v31 = 0;
  }
  else
  {
    v68 = v10;
    v32 = *(unsigned __int16 *)(*(_QWORD *)v30 + 24);
    v33 = *(_QWORD *)(a1 + 888);
    if (*(_DWORD *)(a1 + 896) != *(_DWORD *)(v33 + 24 * *(unsigned __int16 *)(*(_QWORD *)v30 + 24)))
    {
      v67 = a2;
      v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 24) + 16 * v12) & 0xFFFFFFFFFFFFFFF8;
      v35 = v29;
      llvm::RegisterClassInfo::compute((uint64_t *)(a1 + 888), (unsigned __int16 ***)v30);
      v29 = v35;
      v30 = v34;
      a2 = v67;
    }
    v31 = v7 >> 4 > 2 * *(_DWORD *)(v33 + 24 * v32 + 4);
    v10 = v68;
  }
  if (v22 != 1)
    goto LABEL_41;
  if (v31)
    goto LABEL_41;
  v36 = *((_DWORD *)a3 + 2);
  if (!v36)
    goto LABEL_41;
  v37 = **a3;
  if ((v37 & 6) == 0)
    goto LABEL_41;
  v38 = (*a3)[3 * v36 - 2];
  if ((v38 & 6) == 0)
    goto LABEL_41;
  v39 = *(_QWORD *)(a1 + 280);
  v69 = v30;
  v40 = v10;
  v41 = v29;
  v42 = sub_1C499C548(*(_QWORD *)(v39 + 288), v37);
  v43 = sub_1C499C548(*(_QWORD *)(v39 + 288), v38);
  v44 = v41;
  v10 = v40;
  v30 = v69;
  if (!v42)
    goto LABEL_41;
  if (v42 == v43)
  {
    if ((v44 & 1) != 0)
    {
      v45 = *(_QWORD *)(*(_QWORD *)(a1 + 1128) + 352);
      v46 = (*a3)[3 * *((unsigned int *)a3 + 2) - 2];
    }
    else
    {
      v45 = **a3;
      v46 = *(_QWORD *)(*(_QWORD *)(a1 + 1128) + 344);
    }
    v47 = (*(_DWORD *)((v46 & 0xFFFFFFFFFFFFFFF8) + 24) - *(_DWORD *)((v45 & 0xFFFFFFFFFFFFFFF8) + 24)) >> 2;
  }
  else
  {
LABEL_41:
    v47 = v7 + 0x20000000;
  }
  v48 = v47 | (*(unsigned __int8 *)(v30 + 32) << 24);
  v49 = *(_QWORD *)(a1 + 272);
  v50 = *(_QWORD *)(*(_QWORD *)(v49 + 248) + 208) + 40 * v12;
  if (*(_DWORD *)(v50 + 16)
    && ((v57 = **(_DWORD **)(v50 + 8), (v57 - 1) < 0x3FFFFFFF)
     || v57 < 0 && *(_DWORD *)(*(_QWORD *)(v49 + 280) + 4 * (v57 & 0x7FFFFFFF))))
  {
    v51 = -1073741824;
  }
  else
  {
    v51 = 0x80000000;
  }
  v7 = v48 | v51;
LABEL_45:
  v52 = v7 | ((unint64_t)~v10 << 32);
  v54 = (_QWORD *)a2[1];
  v53 = a2[2];
  if ((unint64_t)v54 >= v53)
  {
    v59 = *a2;
    v60 = ((uint64_t)v54 - *a2) >> 3;
    v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 61)
      abort();
    v62 = v53 - v59;
    if (v62 >> 2 > v61)
      v61 = v62 >> 2;
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
      v63 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v63 = v61;
    if (v63)
    {
      if (v63 >> 61)
        sub_1C4764EE4();
      v64 = (char *)operator new(8 * v63);
    }
    else
    {
      v64 = 0;
    }
    v65 = (unint64_t *)&v64[8 * v60];
    *v65 = v52;
    v55 = (uint64_t)(v65 + 1);
    if (v54 != (_QWORD *)v59)
    {
      do
      {
        v66 = *--v54;
        *--v65 = v66;
      }
      while (v54 != (_QWORD *)v59);
      v54 = (_QWORD *)*a2;
    }
    *a2 = (uint64_t)v65;
    a2[1] = v55;
    a2[2] = (uint64_t)&v64[8 * v63];
    if (v54)
      operator delete(v54);
  }
  else
  {
    *v54 = v52;
    v55 = (uint64_t)(v54 + 1);
  }
  a2[1] = v55;
  return sub_1C523B298(*a2, v55, (v55 - *a2) >> 3);
}

uint64_t sub_1C52320D4(uint64_t a1, uint64_t **a2)
{
  return sub_1C5231C30(a1 - 248, (uint64_t *)(a1 + 960), a2);
}

llvm::LiveInterval *sub_1C52320E8(uint64_t a1)
{
  return sub_1C52320F0(a1, (uint64_t *)(a1 + 1208));
}

llvm::LiveInterval *sub_1C52320F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  llvm::LiveInterval *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  int v27;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 == v4)
    return 0;
  v6 = *(_QWORD *)(a1 + 280);
  v7 = ~*(_DWORD *)(v3 + 4);
  if ((v7 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v6 + 416)
    || (v8 = *(llvm::LiveInterval **)(*(_QWORD *)(v6 + 408) + 8 * (v7 & 0x7FFFFFFF))) == 0)
  {
    v8 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(a1 + 280), v7);
    v21 = *(_QWORD *)(v6 + 304);
    v22 = *(_QWORD *)(v6 + 248);
    v23 = *(_QWORD *)(v22 + 40);
    *(_QWORD *)v21 = v22;
    *(_QWORD *)(v21 + 8) = v23;
    *(_OWORD *)(v21 + 16) = *(_OWORD *)(v6 + 288);
    *(_QWORD *)(v21 + 32) = v6 + 312;
    llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v21);
    *(_DWORD *)(v21 + 184) = 0;
    v24 = *(_QWORD *)(v6 + 256);
    v26 = *(_BYTE *)(v24 + 16) == 0;
    v25 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v24 + 24) + 16 * (*((_DWORD *)v8 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                             + 34);
    v26 = v26 || v25 == 0;
    v27 = !v26;
    llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v6 + 304), v8, v27);
    llvm::LiveIntervals::computeDeadValues(v6, (uint64_t)v8, 0);
    v3 = *a2;
    v4 = a2[1];
  }
  if (v4 - v3 >= 9)
  {
    v9 = 0;
    v10 = (unint64_t)(v4 - v3) >> 3;
    v11 = *(_QWORD *)v3;
    v12 = v10 - 2;
    if (v10 < 2)
      v12 = v10 - 1;
    v13 = v12 >> 1;
    v14 = (unsigned int *)v3;
    do
    {
      v15 = v14;
      v16 = v9 + 1;
      v14 += 2 * v9 + 2;
      v17 = 2 * v9;
      v9 = (2 * v9) | 1;
      v18 = v17 + 2;
      if (v18 < (uint64_t)v10)
      {
        v19 = v14[2];
        if (*v14 < v19 || v19 >= *v14 && v15[2 * v16 + 1] < v14[3])
        {
          v14 += 2;
          v9 = v18;
        }
      }
      *v15 = *v14;
      v15[1] = v14[1];
    }
    while (v9 <= v13);
    if ((unsigned int *)(v4 - 8) == v14)
    {
      *(_QWORD *)v14 = v11;
    }
    else
    {
      *v14 = *(_DWORD *)(v4 - 8);
      v14[1] = *(_DWORD *)(v4 - 4);
      *(_QWORD *)(v4 - 8) = v11;
      sub_1C523B298(v3, (uint64_t)(v14 + 2), ((uint64_t)v14 - v3 + 8) >> 3);
      v4 = a2[1];
    }
  }
  a2[1] = v4 - 8;
  return v8;
}

llvm::LiveInterval *sub_1C52322D0(uint64_t a1)
{
  return sub_1C52320F0(a1 - 248, (uint64_t *)(a1 + 960));
}

_DWORD *sub_1C52322E0(_DWORD *result)
{
  signed int v1;
  unsigned __int16 **v2;
  int v3;
  unsigned __int16 *v4;
  int v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  uint64_t v8;
  unsigned __int16 *v9;

  v1 = result[2];
  v2 = *(unsigned __int16 ***)result;
  v3 = *(_DWORD *)(*(_QWORD *)result + 72);
  if (v1 < v3)
    result[2] = ++v1;
  if ((v1 & 0x80000000) == 0 && v1 < v3)
  {
    v4 = v2[7];
    do
    {
      v5 = v4[v1];
      if ((v5 - 1) > 0x3FFFFFFE)
        break;
      v6 = *v2;
      v7 = v2[1];
      if (v7)
      {
        v8 = 2 * (_QWORD)v7;
        v9 = *v2;
        while (*v9 != v5)
        {
          ++v9;
          v8 -= 2;
          if (!v8)
          {
            v9 = &v6[(_QWORD)v7];
            break;
          }
        }
      }
      else
      {
        v9 = *v2;
      }
      if (v7 == (unsigned __int16 *)(v9 - v6))
        break;
      result[2] = ++v1;
    }
    while (v1 != v3);
  }
  return result;
}

void sub_1C523237C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _WORD *v22;
  unsigned __int16 *v23;
  __int16 v24;
  unsigned __int16 v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _DWORD *v31;
  uint64_t v32;
  int v33;
  char *v34;
  _QWORD *v35;
  const llvm::LiveInterval *v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  _QWORD *v50;
  int v51;
  char *v52;
  int v53;
  void *v54;
  uint64_t v55;
  _QWORD v56[10];

  v5 = a3;
  v6 = a2;
  v56[8] = *MEMORY[0x1E0C80C00];
  v8 = (_QWORD *)(a1 + 1248);
  v9 = *(_DWORD *)(a2 + 112) & 0x7FFFFFFF;
  v10 = *(_QWORD *)(a1 + 1248);
  v51 = *(_DWORD *)(v10 + 8 * v9 + 4);
  if (!v51)
  {
    v51 = *(_DWORD *)(a1 + 1280);
    *(_DWORD *)(a1 + 1280) = v51 + 1;
    v11 = *(unsigned int *)(a1 + 1256);
    if (v9 < v11)
    {
      v5 = a3;
LABEL_11:
      *(_DWORD *)(v10 + 8 * v9 + 4) = v51;
      goto LABEL_12;
    }
    v12 = *(_QWORD *)(a1 + 1264);
    v13 = v9 + 1 - v11;
    if (v9 >= *(_DWORD *)(a1 + 1260))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 1248, a1 + 1264, v9 + 1, 8);
      v14 = *(unsigned int *)(a1 + 1256);
      v10 = *(_QWORD *)(a1 + 1248);
      v15 = *(_DWORD *)(a1 + 1256);
      if (v13)
      {
LABEL_6:
        v16 = (_QWORD *)(v10 + 8 * v14);
        v17 = ~v9 + v11;
        do
        {
          *v16++ = v12;
          v18 = __CFADD__(v17++, 1);
        }
        while (!v18);
        v15 = *(_DWORD *)(a1 + 1256);
        v10 = *(_QWORD *)(a1 + 1248);
      }
    }
    else
    {
      v14 = *(unsigned int *)(a1 + 1256);
      v15 = *(_DWORD *)(a1 + 1256);
      if (v13)
        goto LABEL_6;
    }
    v5 = a3;
    *(_DWORD *)(a1 + 1256) = v15 + v13;
    goto LABEL_11;
  }
LABEL_12:
  v50 = v8;
  v54 = v56;
  v55 = 0x800000000;
  v19 = *(_QWORD *)(a1 + 880);
  if (v19)
    v20 = (_QWORD *)(v19 + 8);
  else
    v20 = 0;
  v21 = *(unsigned int *)(*v20 + 24 * v5 + 16);
  v22 = (_WORD *)(v20[6] + ((v21 >> 3) & 0x1FFFFFFE));
  v24 = *v22;
  v23 = v22 + 1;
  v25 = v24 + (v21 & 0xF) * v5;
  do
  {
    v26 = *(_QWORD *)(a1 + 288);
    v27 = v25;
    v28 = *(_QWORD *)(v26 + 400);
    v29 = v28 + 176 * v25;
    v30 = *(_DWORD *)(v26 + 272);
    v31 = (_DWORD *)(*(_QWORD *)(v26 + 392) + 216 * v27);
    if (*(_DWORD *)(v29 + 168) != v30
      || *(_QWORD *)(v28 + 176 * v27 + 8) != v6
      || *(_DWORD **)v29 != v31
      || *v31 != *(_DWORD *)(v28 + 176 * v27 + 164))
    {
      *(_QWORD *)v29 = v31;
      v32 = v28 + 176 * v27;
      *(_QWORD *)(v32 + 8) = v6;
      *(_DWORD *)(v32 + 120) = 0;
      *(_WORD *)(v32 + 160) = 0;
      *(_DWORD *)(v32 + 164) = *v31;
      *(_DWORD *)(v29 + 168) = v30;
LABEL_18:
      llvm::LiveIntervalUnion::Query::collectInterferingVRegs((llvm::LiveIntervalUnion::Query *)v29, 0xFFFFFFFF);
      goto LABEL_19;
    }
    if (!*(_BYTE *)(v29 + 161))
      goto LABEL_18;
LABEL_19:
    sub_1C486AF08((unsigned int *)&v54, *(_BYTE **)(v29 + 112), (_BYTE *)(*(_QWORD *)(v29 + 112) + 8 * *(unsigned int *)(v29 + 120)));
    v33 = *v23++;
    v25 = v33 + v27;
  }
  while (v33);
  v34 = (char *)v54;
  if ((_DWORD)v55)
  {
    v52 = (char *)v54 + 8 * v55;
    v35 = v8;
    do
    {
      v36 = *(const llvm::LiveInterval **)v34;
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 280)
                     + 4 * (*(_DWORD *)(*(_QWORD *)v34 + 112) & 0x7FFFFFFF)))
      {
        v37 = v6;
        v38 = *(_DWORD *)(v6 + 112);
        v53 = *(_DWORD *)(*(_QWORD *)v34 + 112);
        sub_1C523A96C(a1 + 1312, &v53)[1] = v38;
        sub_1C523A96C(a1 + 1312, &v53)[2] = v5;
        llvm::LiveRegMatrix::unassign(*(llvm::LiveRegMatrix **)(a1 + 288), v36);
        v39 = *((_DWORD *)v36 + 28);
        v40 = v39 & 0x7FFFFFFF;
        v41 = *(unsigned int *)(a1 + 1256);
        if ((v39 & 0x7FFFFFFFu) >= v41)
        {
          v42 = *(_QWORD *)(a1 + 1264);
          if (v40 >= *(_DWORD *)(a1 + 1260))
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v50, a1 + 1264, v40 + 1, 8);
          v43 = *(_DWORD *)(a1 + 1256);
          v44 = v40 + 1 - v41;
          v35 = v50;
          if (v44)
          {
            v45 = (_QWORD *)(*v50 + 8 * *(unsigned int *)(a1 + 1256));
            v46 = ~v40 + v41;
            do
            {
              *v45++ = v42;
              v18 = __CFADD__(v46++, 1);
            }
            while (!v18);
            v43 = *(_DWORD *)(a1 + 1256);
          }
          *(_DWORD *)(a1 + 1256) = v43 + v44;
          v5 = a3;
        }
        *(_DWORD *)(*v35 + 8 * v40 + 4) = v51;
        v47 = *((_DWORD *)v36 + 28);
        v48 = *(unsigned int *)(a4 + 8);
        if (v48 >= *(unsigned int *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v48 + 1, 4);
          v48 = *(unsigned int *)(a4 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a4 + 4 * v48) = v47;
        ++*(_DWORD *)(a4 + 8);
        v6 = v37;
      }
      v34 += 8;
    }
    while (v34 != v52);
    v34 = (char *)v54;
  }
  if (v34 != (char *)v56)
    free(v34);
}

uint64_t sub_1C5232760(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  int v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v10 = 0;
  result = sub_1C523B340(a1, *a2, &v10);
  if ((result & 1) != 0)
    return result;
  v5 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v6 = 8;
  else
    v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_14;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 4) <= v6 >> 3)
  {
LABEL_14:
    sub_1C523B3EC(a1, v6);
    v10 = 0;
    result = sub_1C523B340(a1, *a2, &v10);
  }
  v7 = v10;
  *(_DWORD *)a1 += 2;
  if (*v7 != -4096)
    --*(_DWORD *)(a1 + 4);
  *v7 = *a2;
  v8 = *a2;
  v9 = *(unsigned int *)(a1 + 80);
  if (v9 >= *(_DWORD *)(a1 + 84))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 72, a1 + 88, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a1 + 80);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v9) = v8;
  ++*(_DWORD *)(a1 + 80);
  return result;
}

uint64_t sub_1C5232878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  llvm::Timer *v17;

  llvm::NamedRegionTimer::NamedRegionTimer(&v17, "evict", 5uLL, "Evict", 5uLL, "regalloc", 8uLL, a8, "Register Allocation", 0x13uLL, llvm::TimePassesIsEnabled);
  v14 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 1296) + 16))(*(_QWORD *)(a1 + 1296), a2, a3, a5, a6);
  v15 = v14;
  if ((_DWORD)v14)
    sub_1C523237C(a1, a2, v14, a4);
  if (v17)
    llvm::Timer::stopTimer(v17);
  return v15;
}

BOOL llvm::RegAllocEvictionAdvisor::isUnusedCalleeSavedReg(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  __int16 v7;
  _WORD *v8;
  unsigned __int16 *v9;
  __int16 v10;
  unsigned __int16 v11;
  uint64_t v12;
  int v13;
  _BOOL8 result;
  int v15;

  v2 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(v2 + 48) <= (unint64_t)a2 || !*(_WORD *)(*(_QWORD *)(v2 + 40) + 2 * a2))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(v3 + 248);
  if (v4)
    v5 = (_QWORD *)(v4 + 8);
  else
    v5 = 0;
  v6 = *(unsigned int *)(*v5 + 24 * a2 + 16);
  v7 = v6 & 0xF;
  v8 = (_WORD *)(v5[6] + ((v6 >> 3) & 0x1FFFFFFE));
  v10 = *v8;
  v9 = v8 + 1;
  v11 = v10 + v7 * a2;
  v12 = *(_QWORD *)(v3 + 392);
  do
  {
    v13 = *(_DWORD *)(v12 + 216 * v11 + 204);
    result = v13 == 0;
    if (v13)
      break;
    v15 = *v9++;
    v11 += v15;
  }
  while (v15);
  return result;
}

uint64_t llvm::RegAllocEvictionAdvisor::getOrderLimit(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 ***v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(unsigned int *)(a3 + 64);
  if (a4 <= 0xFE)
  {
    v15 = *(unsigned int *)(a3 + 64);
    v8 = (unsigned __int16 ***)(*(_QWORD *)(*(_QWORD *)(a1[6] + 24) + 16 * (*(_DWORD *)(a2 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
    v9 = a1[8];
    v10 = *((unsigned __int16 *)*v8 + 12);
    v11 = *(_QWORD *)v9;
    if (*(_DWORD *)(v9 + 8) != *(_DWORD *)(*(_QWORD *)v9 + 24 * *((unsigned __int16 *)*v8 + 12)))
      llvm::RegisterClassInfo::compute((uint64_t *)v9, v8);
    if (*(unsigned __int8 *)(v11 + 24 * v10 + 9) >= a4)
    {
      v5 = 0;
      v4 = 0;
      return v4 | v5;
    }
    if (*(unsigned __int8 *)(a1[9] + *(unsigned __int16 *)(*(_QWORD *)(a3 + 56) + 2 * *(_QWORD *)(a3 + 64) - 2)) < a4)
    {
      v5 = 0x100000000;
      v4 = v15;
      return v4 | v5;
    }
    v12 = a1[8];
    v13 = *((unsigned __int16 *)*v8 + 12);
    v14 = *(_QWORD *)v12;
    if (*(_DWORD *)(v12 + 8) != *(_DWORD *)(*(_QWORD *)v12 + 24 * *((unsigned __int16 *)*v8 + 12)))
      llvm::RegisterClassInfo::compute((uint64_t *)v12, v8);
    v4 = *(unsigned __int16 *)(v14 + 24 * v13 + 10);
  }
  v5 = 0x100000000;
  return v4 | v5;
}

BOOL llvm::RegAllocEvictionAdvisor::canAllocatePhysReg(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  _BOOL8 result;
  uint64_t v4;

  if (*(unsigned __int8 *)(a1[9] + a3) >= a2)
    return 0;
  if (a2 != 1)
    return 1;
  v4 = a1[8];
  if (*(_QWORD *)(v4 + 48) <= (unint64_t)a3)
    return 1;
  if (!*(_WORD *)(*(_QWORD *)(v4 + 40) + 2 * a3))
    return 1;
  result = llvm::LiveRegMatrix::isPhysRegUsed(a1[3], a3);
  if (result)
    return 1;
  return result;
}

BOOL sub_1C5232B80(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _BYTE *v20;
  __int16 v21;
  _WORD *v22;
  __int16 v23;
  _BYTE *v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  __int16 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int i;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  BOOL v54;
  unint64_t v55;
  unint64_t v56;
  unsigned int *v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t *v61;

  v5 = (_QWORD *)a1;
  v6 = (unsigned int *)(a1 + 24448);
  v7 = *(_QWORD *)(a1 + 1336);
  v8 = *(_QWORD *)(v7 + 280);
  v9 = *(unsigned int *)(v7 + 288);
  v61 = (uint64_t *)(a1 + 24440);
  v10 = *(_DWORD *)(a1 + 24448);
  v59 = v9;
  if (v10 == (_DWORD)v9)
  {
    if ((_DWORD)v9)
    {
LABEL_3:
      v57 = v6;
      v58 = a3;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = *v61;
        v14 = (unsigned int *)(*v61 + 8 * v12);
        v15 = *(_DWORD *)(*(_QWORD *)(v8 + 40 * v12) + 24);
        *v14 = v15;
        v16 = *(unsigned int **)a2;
        if (*(_QWORD *)a2)
        {
          v17 = *((_QWORD *)v16 + 64);
          if (*(_DWORD *)(v17 + 24 * v15) != v16[1])
          {
            sub_1C50E4FD4(*(unsigned int **)a2, v15);
            v9 = v59;
            v5 = (_QWORD *)a1;
            v17 = *((_QWORD *)v16 + 64);
          }
          v18 = (void *)(v17 + 24 * v15);
        }
        else
        {
          v18 = &unk_1C85FAC00;
        }
        v19 = v8 + 40 * v12;
        v20 = (_BYTE *)(v19 + 32);
        v21 = *(unsigned __int8 *)(v19 + 32);
        *(_QWORD *)(a2 + 8) = v18;
        *((_BYTE *)v14 + 4) = v21;
        v22 = v14 + 1;
        v25 = *(unsigned __int8 *)(v19 + 33);
        v24 = (_BYTE *)(v19 + 33);
        v23 = v25;
        if (v25)
          v23 = (**(_WORD **)(*(_QWORD *)((*(_QWORD *)(v8 + 40 * v12 + 16) & 0xFFFFFFFFFFFFFFF8) + 16) + 16) != 10) << 8;
        *v22 = v23 | v21;
        *(_BYTE *)(v13 + 8 * v12 + 6) = *(_QWORD *)(v8 + 40 * v12 + 24) > 7uLL;
        v26 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
        if (v26 < 8)
          goto LABEL_37;
        if (!*v20)
        {
          v31 = 0;
          goto LABEL_21;
        }
        v27 = *v14;
        v28 = *(_QWORD *)(*(_QWORD *)(v5[141] + 392) + 16 * v27);
        v29 = *(_DWORD *)((v26 & 0xFFFFFFFFFFFFFFF8) + 24) | (v26 >> 1) & 3;
        if (v29 <= ((v28 >> 1) & 3 | *(_DWORD *)((v28 & 0xFFFFFFFFFFFFFFF8) + 24)))
        {
          v30 = 4;
        }
        else
        {
          if (v29 >= ((*(_QWORD *)(v8 + 40 * v12 + 8) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v8 + 40 * v12 + 8) & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 24)))
          {
            v31 = v29 < ((*(_QWORD *)(v8 + 40 * v12 + 16) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v8 + 40 * v12 + 16) & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 24));
            goto LABEL_21;
          }
          v30 = 2;
        }
        *v22 = v30 | v23;
        v32 = *(_QWORD *)(v8 + 40 * v12 + 8);
        if (*(_DWORD *)((v32 & 0xFFFFFFFFFFFFFFF8) + 24) < *(_DWORD *)((sub_1C523AC10(v5[167] + 48, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5[167] + 104)+ 8 * v27)) & 0xFFFFFFFFFFFFFFF8)+ 24))return 0;
        v31 = 1;
        v9 = v59;
        v5 = (_QWORD *)a1;
LABEL_21:
        if (*v24)
        {
          v33 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 16);
          v34 = (uint64_t *)v5[167];
          v35 = *(unsigned int **)(*(_QWORD *)(*v34 + 104) + 8 * *v14);
          v36 = v35[6];
          v37 = v34[7];
          v38 = *(_QWORD *)(v37 + 16 * v36);
          if (v38 < 8 || *(_QWORD *)(v37 + 16 * v36 + 8) >= 8uLL)
          {
            v38 = sub_1C528C724(v34 + 6, v34[5], (llvm::MachineBasicBlock *)v35);
            v9 = v59;
            v5 = (_QWORD *)a1;
          }
          if ((*(_DWORD *)((v33 & 0xFFFFFFFFFFFFFFF8) + 24) | (v33 >> 1) & 3) >= ((v38 >> 1) & 3 | *(_DWORD *)((v38 & 0xFFFFFFFFFFFFFFF8) + 24)))
          {
            v40 = 1024;
            goto LABEL_28;
          }
          v39 = (*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16) & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 24);
          if (v39 > ((*(_QWORD *)(v8 + 40 * v12 + 16) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v8 + 40 * v12 + 16) & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 24)))
          {
            v40 = 512;
LABEL_28:
            *v22 = *(unsigned __int8 *)v22 | v40;
            ++v31;
LABEL_32:
            v41 = *(_QWORD *)(*(_QWORD *)(v5[147] + 392) + 8 * *v14);
            do
            {
              if (__CFADD__(v41, v11))
                v11 = -1;
              else
                v11 += v41;
              --v31;
            }
            while (v31);
            goto LABEL_37;
          }
          if (v39 > ((*(_QWORD *)(v8 + 40 * v12 + 8) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v8 + 40 * v12 + 8) & 0xFFFFFFFFFFFFFFF8)
                                                                                          + 24)))
            ++v31;
        }
        if (v31)
          goto LABEL_32;
LABEL_37:
        if (++v12 == v9)
        {
          a3 = v58;
          v42 = *v57;
          goto LABEL_48;
        }
      }
    }
  }
  else
  {
    if (v10 <= v9)
    {
      if (*(_DWORD *)(a1 + 24452) < v9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v61, a1 + 24456, v9, 8);
        v9 = v59;
        v5 = (_QWORD *)a1;
        v10 = *v6;
      }
      if (v10 != (_DWORD)v9)
      {
        bzero((void *)(*v61 + 8 * v10), 8 * (v9 - v10));
        v9 = v59;
        v5 = (_QWORD *)a1;
      }
    }
    *v6 = v9;
    if ((_DWORD)v9)
      goto LABEL_3;
  }
  v42 = 0;
  v11 = 0;
LABEL_48:
  *a3 = v11;
  v44 = v5;
  llvm::SpillPlacement::addConstraints((_QWORD *)v5[147], v5[3055], v42);
  v45 = v44[147];
  *(_DWORD *)(v45 + 352) = 0;
  v46 = *(_QWORD *)(v45 + 288);
  v47 = sub_1C476B7EC(v46);
  if (v47 != -1)
  {
    for (i = v47; i != -1; i = sub_1C476BA0C((_QWORD *)v46, i + 1, *(_DWORD *)(v46 + 64), 1u))
    {
      llvm::SpillPlacement::update((llvm::SpillPlacement *)v45, i);
      v49 = *(_QWORD *)(v45 + 280);
      v50 = (unint64_t *)(v49 + 112 * i);
      v51 = v50[13];
      v52 = *v50;
      v53 = *(_QWORD *)(v49 + 112 * i + 8);
      v54 = __CFADD__(v51, v53);
      v55 = v51 + v53;
      if (v54)
        v55 = -1;
      if (v52 < v55 && *(int *)(v49 + 112 * i + 16) >= 1)
      {
        v56 = *(unsigned int *)(v45 + 352);
        if (v56 >= *(unsigned int *)(v45 + 356))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v45 + 344, v45 + 360, v56 + 1, 4);
          v56 = *(unsigned int *)(v45 + 352);
        }
        *(_DWORD *)(*(_QWORD *)(v45 + 344) + 4 * v56) = i;
        ++*(_DWORD *)(v45 + 352);
      }
    }
  }
  return *(_DWORD *)(v45 + 352) != 0;
}

BOOL sub_1C5233078(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  void **v6;
  BOOL v7;
  _DWORD *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  unsigned int *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v37;
  _QWORD *v38;
  __int16 v39;
  __int16 v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t *v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  __int16 v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  __int16 v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int v59;
  int v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  _QWORD *v71;
  uint64_t v72;
  unsigned int *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  unsigned int v83;
  unint64_t v84;
  char v86;
  uint64_t v88;
  _BOOL4 v89;
  unint64_t v90;
  uint64_t v91;
  unsigned int *v92;
  void *v93;
  uint64_t v94;
  _DWORD v95[14];
  _DWORD v96[8];
  _QWORD v97[10];

  v97[8] = *MEMORY[0x1E0C80C00];
  v4 = a1[167];
  v93 = v95;
  v94 = 0x600000000;
  v5 = *(_DWORD *)(v4 + 632);
  v6 = (void **)(v4 + 624);
  if (v5)
    v7 = &v93 == v6;
  else
    v7 = 1;
  if (v7)
    goto LABEL_9;
  if (v5 >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, (uint64_t)v95, *(unsigned int *)(v4 + 632), 8);
    v9 = *(_DWORD *)(v4 + 632);
    if (!v9)
      goto LABEL_8;
    v8 = v93;
  }
  else
  {
    v8 = v95;
    v9 = *(_DWORD *)(v4 + 632);
  }
  memcpy(v8, *v6, 8 * v9);
LABEL_8:
  LODWORD(v94) = v5;
LABEL_9:
  v10 = 0;
  v95[12] = *(_DWORD *)(v4 + 688);
  v88 = a2 + 96;
  v90 = xmmword_1ED7FE8F8;
  v91 = a2;
  while (1)
  {
    v11 = a1[147];
    v12 = *(unsigned int *)(v11 + 352);
    if ((_DWORD)v12)
      break;
LABEL_22:
    v23 = *(unsigned int *)(a2 + 104);
    v89 = v23 == v10;
    if (v23 == v10)
      goto LABEL_103;
    v24 = *(_QWORD *)(a2 + 96);
    v25 = (unsigned int *)(v24 + 4 * v10);
    if (!*(_DWORD *)a2)
    {
      llvm::SpillPlacement::addPrefSpill((_QWORD *)a1[147], (unsigned int *)(v24 + 4 * v10), v23 - v10, 1);
      goto LABEL_88;
    }
    v26 = *(_QWORD *)(a2 + 8);
    if (v26)
      ++*(_DWORD *)(v26 + 8);
    v27 = 0;
    v28 = 0;
    v92 = (unsigned int *)(v24 + 4 * v23);
    do
    {
      v29 = *v25;
      if (v26)
      {
        v30 = *(_QWORD *)(v26 + 512);
        if (*(_DWORD *)(v30 + 24 * v29) != *(_DWORD *)(v26 + 4))
        {
          sub_1C50E4FD4((unsigned int *)v26, *v25);
          v30 = *(_QWORD *)(v26 + 512);
        }
        v31 = (_QWORD *)(v30 + 24 * v29);
      }
      else
      {
        v31 = &unk_1C85FAC00;
      }
      if (v31[1] > 7uLL)
      {
        LODWORD(v97[v27]) = v29;
        v32 = *(_QWORD *)(*(_QWORD *)(a1[108] + 104) + 8 * v29);
        v33 = v32 + 48;
        v34 = *(_QWORD *)(v32 + 56);
        if (v34 != v33)
        {
          while (1)
          {
            v35 = **(unsigned __int16 **)(v34 + 16);
            if ((v35 - 13) >= 5 && v35 != 23)
              break;
            if ((*(_BYTE *)v34 & 4) == 0)
            {
              while ((*(_WORD *)(v34 + 44) & 8) != 0)
                v34 = *(_QWORD *)(v34 + 8);
            }
            v34 = *(_QWORD *)(v34 + 8);
            if (v34 == v33)
              goto LABEL_42;
          }
        }
        if (v33 != v34)
        {
          v56 = *(_WORD *)(v34 + 44);
          v57 = v34;
          if ((v56 & 0xC) != 0)
          {
            if ((v56 & 4) != 0)
            {
              v57 = v34;
              do
                v57 = *(_QWORD *)v57 & 0xFFFFFFFFFFFFFFF8;
              while ((*(_WORD *)(v57 + 44) & 4) != 0);
            }
            if ((v56 & 8) != 0)
            {
              do
                v34 = *(_QWORD *)(v34 + 8);
              while ((*(_WORD *)(v34 + 44) & 8) != 0);
            }
            a2 = v91;
          }
          v58 = *(_QWORD *)(v34 + 8);
          if (v57 != v58)
          {
            while (1)
            {
              v59 = **(unsigned __int16 **)(v57 + 16);
              v17 = v59 > 0x17;
              v60 = (1 << v59) & 0x83E000;
              if (v17 || v60 == 0)
                break;
              v57 = *(_QWORD *)(v57 + 8);
              if (v57 == v58)
              {
                v57 = v58;
                break;
              }
            }
          }
          v62 = *(_QWORD *)(a1[35] + 288);
          v63 = *(_QWORD *)(v62 + 368);
          v64 = *(unsigned int *)(v62 + 384);
          if ((_DWORD)v64)
          {
            LODWORD(v65) = ((v57 >> 4) ^ (v57 >> 9)) & (v64 - 1);
            v66 = (uint64_t *)(v63 + 16 * v65);
            v67 = *v66;
            if (v57 == *v66)
            {
LABEL_72:
              v68 = v66[1];
              if (*(_DWORD *)((v68 & 0xFFFFFFFFFFFFFFF8) + 24) < *(_DWORD *)((sub_1C523AC10(a1[167] + 48, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1[167] + 104)+ 8 * v29)) & 0xFFFFFFFFFFFFFFF8)+ 24))
              {
                v86 = 0;
                goto LABEL_85;
              }
              goto LABEL_42;
            }
            v69 = 1;
            while (v67 != -4096)
            {
              v70 = v65 + v69++;
              v65 = v70 & (v64 - 1);
              v67 = *(_QWORD *)(v63 + 16 * v65);
              if (v57 == v67)
              {
                v66 = (uint64_t *)(v63 + 16 * v65);
                goto LABEL_72;
              }
            }
          }
          v66 = (uint64_t *)(v63 + 16 * v64);
          goto LABEL_72;
        }
LABEL_42:
        v37 = *(_QWORD *)(*(_QWORD *)(a1[141] + 392) + 16 * v29);
        v38 = &v97[v27];
        if ((*(_DWORD *)((v31[1] & 0xFFFFFFFFFFFFFFF8) + 24) | (v31[1] >> 1) & 3) <= ((v37 >> 1) & 3 | *(_DWORD *)((v37 & 0xFFFFFFFFFFFFFFF8) + 24)))
          v39 = 4;
        else
          v39 = 2;
        v40 = v39 | (*((unsigned __int8 *)v38 + 5) << 8);
        *((_WORD *)v38 + 2) = v40;
        v41 = (char *)v38 + 4;
        v42 = v31[2];
        v43 = (uint64_t *)a1[167];
        v44 = *(unsigned int **)(*(_QWORD *)(*v43 + 104) + 8 * v29);
        v45 = v44[6];
        v46 = v43[7];
        v47 = *(_QWORD *)(v46 + 16 * v45);
        if (v47 < 8 || *(_QWORD *)(v46 + 16 * v45 + 8) >= 8uLL)
        {
          v47 = sub_1C528C724(v43 + 6, v43[5], (llvm::MachineBasicBlock *)v44);
          LOBYTE(v40) = *v41;
        }
        if ((*(_DWORD *)((v42 & 0xFFFFFFFFFFFFFFF8) + 24) | (v42 >> 1) & 3) >= ((v47 >> 1) & 3 | *(_DWORD *)((v47 & 0xFFFFFFFFFFFFFFF8) + 24)))
          v48 = 1024;
        else
          v48 = 512;
        *(_WORD *)v41 = v48 & 0xFF00 | v40;
        if (++v27 == 8)
        {
          llvm::SpillPlacement::addConstraints((_QWORD *)a1[147], (uint64_t)v97, 8);
          v27 = 0;
        }
        goto LABEL_58;
      }
      v96[v28++] = v29;
      if (v28 != 8)
        goto LABEL_59;
      v49 = 0;
      v50 = (_QWORD *)a1[147];
      do
      {
        v51 = v96[v49];
        v52 = *(_QWORD *)(v50[32] + 256);
        v53 = *(_DWORD *)(v52 + 4 * (2 * v51));
        v54 = *(_DWORD *)(v52 + 4 * ((2 * (_DWORD)v51) | 1u));
        if (v53 != v54)
        {
          llvm::SpillPlacement::activate((uint64_t)v50, *(_DWORD *)(v52 + 4 * (2 * v51)));
          llvm::SpillPlacement::activate((uint64_t)v50, v54);
          v55 = *(_QWORD *)(v50[49] + 8 * v51);
          sub_1C528BE34((unsigned int *)(v50[35] + 112 * v53), v54, v55);
          sub_1C528BE34((unsigned int *)(v50[35] + 112 * v54), v53, v55);
        }
        ++v49;
      }
      while (v49 != 8);
      v28 = 0;
LABEL_58:
      a2 = v91;
LABEL_59:
      ++v25;
    }
    while (v25 != v92);
    llvm::SpillPlacement::addConstraints((_QWORD *)a1[147], (uint64_t)v97, v27);
    if (v28)
    {
      v71 = (_QWORD *)a1[147];
      v72 = 4 * v28;
      v73 = v96;
      do
      {
        v74 = *v73;
        v75 = *(_QWORD *)(v71[32] + 256);
        v76 = *(_DWORD *)(v75 + 4 * (2 * v74));
        v77 = *(_DWORD *)(v75 + 4 * ((2 * (_DWORD)v74) | 1u));
        if (v76 != v77)
        {
          llvm::SpillPlacement::activate((uint64_t)v71, *(_DWORD *)(v75 + 4 * (2 * v74)));
          llvm::SpillPlacement::activate((uint64_t)v71, v77);
          v78 = *(_QWORD *)(v71[49] + 8 * v74);
          sub_1C528BE34((unsigned int *)(v71[35] + 112 * v76), v77, v78);
          sub_1C528BE34((unsigned int *)(v71[35] + 112 * v77), v76, v78);
        }
        ++v73;
        v72 -= 4;
      }
      while (v72);
    }
    v86 = 1;
LABEL_85:
    if (v26)
      --*(_DWORD *)(v26 + 8);
    if ((v86 & 1) == 0)
      goto LABEL_103;
LABEL_88:
    v10 = *(unsigned int *)(a2 + 104);
    v79 = a1[147];
    *(_DWORD *)(v79 + 352) = 0;
    v80 = *(_DWORD *)(*(_QWORD *)(v79 + 256) + 304);
    if (10 * v80)
    {
      v81 = -10 * v80;
      do
      {
        v82 = *(unsigned int *)(v79 + 488);
        if (!(_DWORD)v82)
          break;
        v83 = *(_DWORD *)(*(_QWORD *)(v79 + 480) + 4 * v82 - 4);
        *(_DWORD *)(v79 + 488) = v82 - 1;
        if (llvm::SpillPlacement::update((llvm::SpillPlacement *)v79, v83)
          && *(int *)(*(_QWORD *)(v79 + 280) + 112 * v83 + 16) >= 1)
        {
          v84 = *(unsigned int *)(v79 + 352);
          if (v84 >= *(unsigned int *)(v79 + 356))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v79 + 344, v79 + 360, v84 + 1, 4);
            v84 = *(unsigned int *)(v79 + 352);
          }
          *(_DWORD *)(*(_QWORD *)(v79 + 344) + 4 * v84) = v83;
          ++*(_DWORD *)(v79 + 352);
        }
      }
      while (!__CFADD__(v81++, 1));
    }
  }
  v13 = *(unsigned int **)(v11 + 344);
  v14 = &v13[v12];
  while (1)
  {
    v15 = *(_QWORD *)(a1[146] + 312) + 48 * *v13;
    v16 = *(unsigned int *)(v15 + 8);
    v17 = v90 > v16;
    v90 -= v16;
    if (!v17)
      break;
    if ((_DWORD)v16)
    {
      v18 = *(unsigned int **)v15;
      v19 = 4 * v16;
      do
      {
        v20 = *v18;
        v21 = *((_QWORD *)v93 + (v20 >> 6));
        if (((1 << v20) & v21) != 0)
        {
          *((_QWORD *)v93 + (v20 >> 6)) = v21 & ~(1 << v20);
          v22 = *(unsigned int *)(a2 + 104);
          if (v22 >= *(unsigned int *)(a2 + 108))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v88, a2 + 112, v22 + 1, 4);
            v22 = *(unsigned int *)(a2 + 104);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 96) + 4 * v22) = v20;
          ++*(_DWORD *)(a2 + 104);
        }
        ++v18;
        v19 -= 4;
      }
      while (v19);
    }
    if (++v13 == v14)
      goto LABEL_22;
  }
  v89 = 0;
LABEL_103:
  if (v93 != v95)
    free(v93);
  return v89;
}

uint64_t sub_1C52337F4(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 1336);
  v2 = *(_DWORD *)(v1 + 288);
  if (!v2)
    return 0;
  result = 0;
  v5 = *(_QWORD *)(v1 + 280);
  v6 = v5 + 40 * v2;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 1176) + 392);
  v8 = v5 + 24;
  do
  {
    v9 = v8 - 24;
    v10 = *(_QWORD *)(v7 + 8 * *(unsigned int *)(*(_QWORD *)(v8 - 24) + 24));
    if (__CFADD__(v10, result))
      result = -1;
    else
      result += v10;
    if (*(_BYTE *)(v8 + 8) && *(_BYTE *)(v8 + 9))
    {
      v11 = __CFADD__(v10, result);
      v12 = v10 + result;
      if (v11)
        v12 = -1;
      if (*(_QWORD *)v8 > 7uLL)
        result = v12;
    }
    v8 += 40;
  }
  while (v9 + 40 != v6);
  return result;
}

uint64_t sub_1C5233878(uint64_t a1, unsigned __int16 **a2, unint64_t *a3, unsigned int *a4, int a5)
{
  unsigned __int16 *v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int16 *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _WORD *v20;
  unsigned __int16 *v21;
  __int16 v22;
  unsigned __int16 v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int8x8_t *v35;
  uint64_t v36;
  int8x8_t v37;
  uint8x8_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void **v45;
  unint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  unsigned int v55;
  void **v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int **v63;
  _QWORD *v64;
  unsigned int *v65;
  uint64_t v66;
  unsigned int *v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  _BOOL4 v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int i;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unsigned int *v96;
  uint64_t v97;
  void *v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int *v102;
  uint64_t j;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  BOOL v110;
  unsigned int *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  BOOL v115;
  uint64_t v116;
  unint64_t v117;
  unsigned int v118;
  unsigned __int16 *v119;
  int v120;
  unsigned __int16 *v121;
  uint64_t v122;
  unsigned __int16 *v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  unsigned int *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v135;
  unsigned int *v136;
  unsigned int v137;
  uint64_t v138;
  int v139;
  unsigned __int16 **v140;
  unsigned int v142;
  int v144;
  uint64_t v145;
  unsigned int *v147;
  uint64_t v148;
  unint64_t v149;

  v5 = a2[1];
  v6 = -(uint64_t)v5;
  if (*((_DWORD *)a2 + 18) != -(int)v5)
  {
    v8 = (_QWORD *)a1;
    v9 = -*((_DWORD *)a2 + 2);
    v10 = a1 + 24520;
    v135 = a1 + 1352;
    v136 = (unsigned int *)(a1 + 24528);
    v142 = -1;
    v11 = *((_DWORD *)a2 + 18);
    v140 = a2;
    v139 = v11;
    while (1)
    {
      v12 = &(*a2)[(_QWORD)a2[1] + (int)v9];
      v144 = v6;
      v145 = v9;
      if ((int)v6 >= 0)
        v12 = &a2[7][v9];
      v13 = *v12;
      if (a5)
      {
        v14 = v8[162];
        v15 = *(_QWORD *)(v14 + 64);
        if (*(_QWORD *)(v15 + 48) > v13)
        {
          if (*(_WORD *)(*(_QWORD *)(v15 + 40) + 2 * v13))
          {
            v16 = *(_QWORD *)(v14 + 24);
            v17 = *(_QWORD *)(v16 + 248);
            if (v17)
              v18 = (_QWORD *)(v17 + 8);
            else
              v18 = 0;
            v19 = *(unsigned int *)(*v18 + 24 * v13 + 16);
            v20 = (_WORD *)(v18[6] + ((v19 >> 3) & 0x1FFFFFFE));
            v22 = *v20;
            v21 = v20 + 1;
            v23 = v22 + (v19 & 0xF) * v13;
            v24 = *(_QWORD *)(v16 + 392);
            do
            {
              if (*(_DWORD *)(v24 + 216 * v23 + 204))
                goto LABEL_17;
              v25 = *v21++;
              v23 += v25;
            }
            while (v25);
            a2 = v140;
            v26 = v139;
            v27 = v144;
            goto LABEL_142;
          }
        }
      }
LABEL_17:
      v28 = *a4;
      if (*a4 == 32)
        break;
LABEL_56:
      if (*v136 <= v28)
      {
        sub_1C523B60C(v10, v28 + 1);
        v28 = *a4;
      }
      v60 = *(_QWORD *)v10;
      v61 = *(_QWORD *)v10 + 144 * v28;
      *(_DWORD *)v61 = v13;
      *(_DWORD *)(v61 + 4) = 0;
      v63 = (unsigned int **)(v61 + 8);
      v62 = *(_QWORD *)(v61 + 8);
      *(_QWORD *)(v61 + 16) = 0;
      v64 = (_QWORD *)(v61 + 16);
      if (v62)
        --*(_DWORD *)(v62 + 8);
      *v63 = 0;
      if ((_DWORD)v13)
      {
        v65 = sub_1C50E49F8(v135, v13);
        *v64 = 0;
        if (*v63)
          --(*v63)[2];
        *v63 = v65;
        if (v65)
          ++v65[2];
      }
      v137 = v28;
      v138 = v60;
      v66 = v60 + 144 * v28;
      *(_DWORD *)(v66 + 104) = 0;
      v67 = (unsigned int *)(v66 + 104);
      v68 = v8[147];
      v69 = v67 - 20;
      *(_DWORD *)(v68 + 352) = 0;
      *(_DWORD *)(v68 + 488) = 0;
      *(_QWORD *)(v68 + 288) = v67 - 20;
      *(v67 - 18) = 0;
      v70 = *(_DWORD *)(*(_QWORD *)(v68 + 256) + 304);
      *(v67 - 4) = v70;
      if (v70 + 63 < 0x40)
      {
        v74 = 0;
      }
      else
      {
        v71 = (v70 + 63) >> 6;
        if (v71 > *(v67 - 17))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v67 - 20), (uint64_t)(v67 - 16), v71, 8);
          v72 = *(v67 - 18);
          v70 = *(v67 - 4);
          v73 = *(v67 - 18);
        }
        else
        {
          v72 = 0;
          v73 = 0;
        }
        bzero((void *)(*(_QWORD *)v69 + 8 * v72), 8 * v71);
        v74 = (v73 + v71);
        *(v67 - 18) = v74;
        v8 = (_QWORD *)a1;
      }
      if ((v70 & 0x3F) != 0)
        *(_QWORD *)(*(_QWORD *)v69 + 8 * v74 - 8) &= ~(-1 << (v70 & 0x3F));
      v148 = 0;
      v149 = 0;
      v147 = *v63;
      if (v147)
        ++v147[2];
      v75 = sub_1C5232B80((uint64_t)v8, (uint64_t)&v147, (uint64_t *)&v149);
      v148 = 0;
      if (v147)
        --v147[2];
      v147 = 0;
      if (v75)
      {
        v76 = v149;
        if (v149 < *a3 && sub_1C5233078(v8, v61))
        {
          v133 = v76;
          v77 = v8[147];
          v78 = *(_QWORD *)(v77 + 288);
          for (i = sub_1C476B7EC(v78); i != -1; i = sub_1C476BA0C((_QWORD *)v78, i + 1, *(_DWORD *)(v78 + 64), 1u))
          {
            if (*(int *)(*(_QWORD *)(v77 + 280) + 112 * i + 16) <= 0)
              *(_QWORD *)(**(_QWORD **)(v77 + 288) + (((unint64_t)i >> 3) & 0x1FFFFFF8)) &= ~(1 << i);
          }
          *(_QWORD *)(v77 + 288) = 0;
          v80 = *(v67 - 18);
          if ((_DWORD)v80)
          {
            v81 = *(_QWORD **)v69;
            v82 = 8 * v80;
            while (!*v81)
            {
              ++v81;
              v82 -= 8;
              if (!v82)
                goto LABEL_141;
            }
            v83 = v8[167];
            v84 = *(unsigned int *)(v83 + 288);
            if ((_DWORD)v84)
            {
              v85 = 0;
              v86 = 0;
              v87 = *(_QWORD *)(v83 + 280);
              do
              {
                v88 = v8[3055];
                v89 = (unsigned int *)(v88 + 8 * v86);
                v90 = *v89;
                v91 = *(_QWORD *)(v8[146] + 256);
                v92 = *(unsigned int *)(v91 + 8 * *v89);
                v93 = *(_QWORD *)(*(_QWORD *)v69 + ((v92 >> 3) & 0x1FFFFFF8));
                v94 = *(unsigned int *)(v91 + 4 * ((2 * *v89) | 1));
                v95 = *(_QWORD *)(*(_QWORD *)v69 + ((v94 >> 3) & 0x1FFFFFF8));
                v96 = *v63;
                if (*v63)
                {
                  v97 = *((_QWORD *)v96 + 64);
                  if (*(_DWORD *)(v97 + 24 * v90) != v96[1])
                  {
                    v126 = v94;
                    v127 = v88;
                    v130 = v84;
                    v131 = v85;
                    v128 = (unsigned int *)(v88 + 8 * v86);
                    v129 = v87;
                    v124 = *(_QWORD *)(*(_QWORD *)v69 + ((v92 >> 3) & 0x1FFFFFF8));
                    v125 = *(_QWORD *)(*(_QWORD *)v69 + ((v94 >> 3) & 0x1FFFFFF8));
                    sub_1C50E4FD4(v96, v90);
                    v93 = v124;
                    v95 = v125;
                    LOBYTE(v94) = v126;
                    v88 = v127;
                    v89 = v128;
                    v87 = v129;
                    v84 = v130;
                    v85 = v131;
                    v97 = *((_QWORD *)v96 + 64);
                  }
                  v98 = (void *)(v97 + 24 * v90);
                }
                else
                {
                  v98 = &unk_1C85FAC00;
                }
                *v64 = v98;
                v99 = *(unsigned __int8 *)(v87 + 40 * v86 + 32);
                if (*(_BYTE *)(v87 + 40 * v86 + 32))
                  v99 = (((1 << v92) & v93) != 0) ^ (*(_BYTE *)(v88 + 8 * v86 + 4) == 1);
                v8 = (_QWORD *)a1;
                if (*(_BYTE *)(v87 + 40 * v86 + 33))
                  v99 += (((1 << v94) & v95) != 0) ^ (*(unsigned __int8 *)(v88 + 8 * v86 + 5) << 8 == 256);
                if (v99)
                {
                  v100 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1176) + 392) + 8 * *v89);
                  do
                  {
                    if (__CFADD__(v100, v85))
                      v85 = -1;
                    else
                      v85 += v100;
                    --v99;
                  }
                  while (v99);
                }
                ++v86;
              }
              while (v86 != v84);
            }
            else
            {
              v85 = 0;
            }
            v101 = *v67;
            if ((_DWORD)v101)
            {
              v102 = *(unsigned int **)(v138 + 144 * v137 + 96);
              for (j = 4 * v101; j; j -= 4)
              {
                v104 = *v102;
                v105 = *(_QWORD *)(v8[146] + 256);
                v106 = *(unsigned int *)(v105 + 4 * (2 * v104));
                v107 = (1 << v106) & *(_QWORD *)(*(_QWORD *)v69 + ((v106 >> 3) & 0x1FFFFFF8));
                v108 = *(unsigned int *)(v105 + 4 * ((2 * (_DWORD)v104) | 1u));
                v109 = (1 << v108) & *(_QWORD *)(*(_QWORD *)v69 + ((v108 >> 3) & 0x1FFFFFF8));
                if (v107 | v109)
                {
                  if (v107)
                    v110 = v109 == 0;
                  else
                    v110 = 1;
                  if (v110)
                  {
                    v114 = *(_QWORD *)(*(_QWORD *)(v8[147] + 392) + 8 * v104);
                  }
                  else
                  {
                    v111 = *v63;
                    if (*v63)
                    {
                      v112 = *((_QWORD *)v111 + 64);
                      if (*(_DWORD *)(v112 + 24 * v104) != v111[1])
                      {
                        v132 = v85;
                        sub_1C50E4FD4(*v63, *v102);
                        v85 = v132;
                        v112 = *((_QWORD *)v111 + 64);
                      }
                      v113 = (_QWORD *)(v112 + 24 * v104);
                    }
                    else
                    {
                      v113 = &unk_1C85FAC00;
                    }
                    *v64 = v113;
                    if (v113[1] < 8uLL)
                      goto LABEL_125;
                    v114 = *(_QWORD *)(*(_QWORD *)(v8[147] + 392) + 8 * v104);
                    if (__CFADD__(v114, v85))
                      v85 = -1;
                    else
                      v85 += v114;
                  }
                  v115 = __CFADD__(v114, v85);
                  v116 = v114 + v85;
                  if (v115)
                    v85 = -1;
                  else
                    v85 = v116;
                }
LABEL_125:
                ++v102;
              }
            }
            if (__CFADD__(v85, v133))
              v117 = -1;
            else
              v117 = v85 + v133;
            v149 = v117;
            v118 = *a4;
            if (v117 < *a3)
            {
              *a3 = v117;
              v142 = v118;
            }
            *a4 = v118 + 1;
          }
        }
      }
LABEL_141:
      a2 = v140;
      v26 = v139;
      v27 = v144;
      v9 = v145;
      v11 = *((_DWORD *)v140 + 18);
LABEL_142:
      if (v11 > v27)
        v9 = ++v27;
      if ((v27 & 0x80000000) == 0 && v27 < v11)
      {
        v119 = a2[7];
        v120 = v119[v27];
        if ((v120 - 1) <= 0x3FFFFFFE)
        {
          v121 = a2[1];
          do
          {
            if (v121)
            {
              v122 = 2 * (_QWORD)v121;
              v123 = *a2;
              while (*v123 != (unsigned __int16)v120)
              {
                ++v123;
                v122 -= 2;
                if (!v122)
                {
                  v123 = &(*a2)[(_QWORD)v121];
                  break;
                }
              }
            }
            else
            {
              v123 = *a2;
            }
            if (v121 == (unsigned __int16 *)(v123 - *a2))
              break;
            v9 = (v27 + 1);
            if ((_DWORD)v9 == v11)
              break;
            v120 = v119[v9];
            ++v27;
          }
          while ((v120 - 1) <= 0x3FFFFFFE);
        }
      }
      LODWORD(v6) = v9;
      if (v26 == (_DWORD)v9)
        return v142;
    }
    v29 = 0;
    v30 = 0;
    v31 = -1;
    do
    {
      if (v29 != v142 && *(_DWORD *)(*(_QWORD *)v10 + 144 * v29))
      {
        v32 = *(_QWORD *)v10 + 144 * v29;
        v33 = *(unsigned int *)(v32 + 32);
        if ((_DWORD)v33)
        {
          v34 = 0;
          v35 = *(int8x8_t **)(v32 + 24);
          v36 = 8 * v33;
          do
          {
            v37 = *v35++;
            v38 = (uint8x8_t)vcnt_s8(v37);
            v38.i16[0] = vaddlv_u8(v38);
            v34 += v38.i32[0];
            v36 -= 8;
          }
          while (v36);
        }
        else
        {
          v34 = 0;
        }
        if (v34 < v31)
        {
          v30 = v29;
          v31 = v34;
        }
      }
      ++v29;
    }
    while (v29 != 32);
    *a4 = 31;
    v39 = *(_QWORD *)v10;
    v40 = (_QWORD *)(*(_QWORD *)v10 + 144 * v30);
    *v40 = *(_QWORD *)(*(_QWORD *)v10 + 4464);
    v40[2] = 0;
    v43 = v40[1];
    v41 = v40 + 1;
    v42 = v43;
    v44 = *(_QWORD *)(v39 + 4472);
    if (v43)
      --*(_DWORD *)(v42 + 8);
    *v41 = v44;
    if (v44)
      ++*(_DWORD *)(v44 + 8);
    if (v30 == 31)
    {
LABEL_53:
      v28 = *a4;
      v59 = v142;
      if (v142 == *a4)
        v59 = v30;
      v142 = v59;
      goto LABEL_56;
    }
    v45 = (void **)(v39 + 144 * v30 + 24);
    v46 = *(unsigned int *)(v39 + 4496);
    v47 = v39 + 144 * v30;
    v50 = *(_DWORD *)(v47 + 32);
    v48 = (_DWORD *)(v47 + 32);
    v49 = v50;
    if (v50 >= v46)
    {
      if ((_DWORD)v46)
        memmove(*v45, *(const void **)(v39 + 4488), 8 * v46);
LABEL_44:
      *v48 = v46;
      v52 = v39 + 144 * v30;
      v55 = *(_DWORD *)(v52 + 104);
      v53 = (_DWORD *)(v52 + 104);
      v54 = v55;
      *(v53 - 4) = *(_DWORD *)(v39 + 4552);
      v56 = (void **)(v53 - 2);
      v57 = *(unsigned int *)(v39 + 4568);
      if (v55 >= v57)
      {
        if ((_DWORD)v57)
          memmove(*v56, *(const void **)(v39 + 4560), 4 * v57);
        goto LABEL_52;
      }
      if (*(_DWORD *)(v39 + 144 * v30 + 108) < v57)
      {
        *v53 = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v53 - 2), v39 + 144 * v30 + 112, v57, 4);
      }
      else if ((_DWORD)v54)
      {
        memmove(*v56, *(const void **)(v39 + 4560), 4 * v54);
LABEL_48:
        v58 = *(unsigned int *)(v39 + 4568);
        if (v54 != v58)
          memcpy((char *)*v56 + 4 * v54, (const void *)(*(_QWORD *)(v39 + 4560) + 4 * v54), 4 * v58 - 4 * v54);
LABEL_52:
        *v53 = v57;
        v8 = (_QWORD *)a1;
        goto LABEL_53;
      }
      v54 = 0;
      goto LABEL_48;
    }
    if (*(_DWORD *)(v39 + 144 * v30 + 36) < v46)
    {
      *v48 = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v45, v39 + 144 * v30 + 40, v46, 8);
    }
    else if ((_DWORD)v49)
    {
      memmove(*v45, *(const void **)(v39 + 4488), 8 * v49);
      goto LABEL_42;
    }
    v49 = 0;
LABEL_42:
    v51 = *(unsigned int *)(v39 + 4496);
    if (v49 != v51)
      memcpy((char *)*v45 + 8 * v49, (const void *)(*(_QWORD *)(v39 + 4488) + 8 * v49), 8 * v51 - 8 * v49);
    goto LABEL_44;
  }
  return -1;
}

void sub_1C5234258(int8x16_t *a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5)
{
  uint64_t v9;
  __int8 *v10;
  __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 ***v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  int8x16_t *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  int *v41;
  unsigned int v42;
  void **v43;
  BOOL v44;
  _DWORD *v45;
  unsigned int v46;
  unsigned int *v47;
  int8x16_t *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int8x16_t *v76;
  uint64_t v77;
  int v78;
  llvm::LiveInterval *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int32 v86;
  int v87;
  uint64_t *v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  unsigned int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int32 v99;
  uint64_t *v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int32 v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v117;
  unsigned int v118;
  int v119;
  int v120;
  uint64_t i64;
  int v122;
  unsigned int *v123;
  unsigned int *v124;
  unsigned int *v125;
  unsigned int v126;
  int8x16_t *v127;
  _QWORD v128[2];
  uint64_t v129;
  uint64_t v130;
  int8x16_t v131;
  uint64_t v132;
  __int8 *v133;
  unsigned int v134;
  char v135;
  __int8 *v136;
  _BYTE *v137;
  _BYTE *v138;
  uint64_t v139;
  int v140;
  _BYTE v141[32];
  _BYTE *v142;
  _BYTE *v143;
  uint64_t v144;
  int v145;
  _BYTE v146[32];
  void *v147;
  uint64_t v148;
  _BYTE v149[32];
  void *v150[2];
  _BYTE v151[32];
  _QWORD *v152;
  uint64_t v153;
  _DWORD v154[14];
  uint64_t v155;

  v155 = *MEMORY[0x1E0C80C00];
  v147 = v149;
  v148 = 0x800000000;
  v9 = a1[54].i64[0];
  v10 = &a1[53].i8[8];
  v11 = &a1[35].i8[8];
  v128[0] = &off_1E8143478;
  v128[1] = a2;
  v12 = *(_QWORD *)(v9 + 40);
  v129 = a5;
  v130 = v12;
  v131 = vextq_s8(a1[17], a1[17], 8uLL);
  v132 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 16) + 104))(*(_QWORD *)(v9 + 16));
  v133 = v10;
  v134 = *(_DWORD *)(a5 + 8);
  v135 = 0;
  v136 = v11;
  v137 = v141;
  v138 = v141;
  v139 = 4;
  v140 = 0;
  v142 = v146;
  v143 = v146;
  v144 = 4;
  v145 = 0;
  *(_QWORD *)(v12 + 8) = v128;
  sub_1C528D84C(a1[84].i64[0], (uint64_t)v128, dword_1ED7FE9C0);
  sub_1C4893E04(&a1[1821].i8[8], *(unsigned int *)(a1[73].i64[0] + 304), -1);
  v127 = a1;
  if (a3 != -1)
  {
    v13 = a1[1532].i64[1];
    if (sub_1C5234D5C(v13 + 144 * a3, &a1[1821].i64[1], a3))
    {
      v14 = v148;
      if (v148 >= HIDWORD(v148))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 4);
        v14 = v148;
      }
      *((_DWORD *)v147 + v14) = a3;
      LODWORD(v148) = v148 + 1;
      *(_DWORD *)(v13 + 144 * a3 + 4) = sub_1C528EB90(a1[84].i64[0]);
    }
  }
  if (a4)
  {
    v110 = a1[1532].i64[1];
    if (sub_1C5234D5C(v110, &a1[1821].i64[1], 0))
    {
      v111 = v148;
      if (v148 >= HIDWORD(v148))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 4);
        v111 = v148;
      }
      *((_DWORD *)v147 + v111) = 0;
      LODWORD(v148) = v148 + 1;
      *(_DWORD *)(v110 + 4) = sub_1C528EB90(a1[84].i64[0]);
    }
  }
  v124 = (unsigned int *)v147;
  v15 = v148;
  v118 = v134;
  v119 = *(_DWORD *)(v129 + 8);
  v16 = a1[83].i64[1];
  v120 = *(_DWORD *)(*(_QWORD *)(v16 + 40) + 112);
  v17 = (unsigned __int16 ***)(*(_QWORD *)(*(_QWORD *)(a1[16].i64[1] + 24) + 16 * (v120 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
  v18 = *((unsigned __int16 *)*v17 + 12);
  v19 = a1[18].i64[1];
  if (a1[19].i32[0] != *(_DWORD *)(v19 + 24 * *((unsigned __int16 *)*v17 + 12)))
  {
    llvm::RegisterClassInfo::compute(&a1[18].i64[1], v17);
    v16 = a1[83].i64[1];
  }
  v20 = *(unsigned int *)(v16 + 288);
  if ((_DWORD)v20)
  {
    v122 = *(unsigned __int8 *)(v19 + 24 * v18 + 8);
    v21 = *(_BYTE **)(v16 + 280);
    v22 = 40 * v20;
    v23 = a1;
    do
    {
      v24 = *(_DWORD *)(*(_QWORD *)v21 + 24);
      if (!v21[32]
        || (v25 = *(_DWORD *)(v23[1821].i64[1] + 4 * *(unsigned int *)(*(_QWORD *)(v23[73].i64[0] + 256) + 8 * v24)),
            v25 == -1))
      {
        v32 = 0;
        v28 = 0;
      }
      else
      {
        v26 = v23[1532].i64[1];
        v27 = v26 + 144 * v25;
        v28 = *(_DWORD *)(v27 + 4);
        v29 = *(_QWORD *)(v27 + 8);
        if (v29)
        {
          v30 = *(_QWORD *)(v29 + 512);
          if (*(_DWORD *)(v30 + 24 * v24) != *(_DWORD *)(v29 + 4))
          {
            sub_1C50E4FD4((unsigned int *)v29, *(_DWORD *)(*(_QWORD *)v21 + 24));
            v30 = *(_QWORD *)(v29 + 512);
          }
          v31 = (_QWORD *)(v30 + 24 * v24);
        }
        else
        {
          v31 = &unk_1C85FAC00;
        }
        *(_QWORD *)(v26 + 144 * v25 + 16) = v31;
        v32 = v31[1];
      }
      if (!v21[33]
        || (v33 = *(_DWORD *)(v23[1821].i64[1]
                            + 4 * *(unsigned int *)(*(_QWORD *)(v23[73].i64[0] + 256) + 4 * ((2 * v24) | 1))),
            v33 == -1))
      {
        v40 = 0;
        v36 = 0;
      }
      else
      {
        v34 = v23[1532].i64[1];
        v35 = v34 + 144 * v33;
        v36 = *(_DWORD *)(v35 + 4);
        v37 = *(_QWORD *)(v35 + 8);
        if (v37)
        {
          v38 = *(_QWORD *)(v37 + 512);
          if (*(_DWORD *)(v38 + 24 * v24) != *(_DWORD *)(v37 + 4))
          {
            sub_1C50E4FD4((unsigned int *)v37, v24);
            v38 = *(_QWORD *)(v37 + 512);
          }
          v39 = (_QWORD *)(v38 + 24 * v24);
        }
        else
        {
          v39 = &unk_1C85FAC00;
        }
        *(_QWORD *)(v34 + 144 * v33 + 16) = v39;
        v40 = v39[2];
        v23 = v127;
      }
      if (v28 | v36)
      {
        v41 = (int *)v23[84].i64[0];
        if (v28 && v36)
        {
          sub_1C5294084(v41, v24, v28, v32, v36, v40);
        }
        else if (v28)
        {
          sub_1C52943E4((unint64_t)v41, (uint64_t)v21, v28, v32);
        }
        else
        {
          sub_1C5294668((uint64_t)v41, (uint64_t)v21, v36, v40);
        }
      }
      else if (sub_1C5293EE4((_QWORD *)v23[83].i64[1], (uint64_t)v21, v122 != 0))
      {
        sub_1C5293F4C(v23[84].u64[0], (uint64_t)v21);
      }
      v21 += 40;
      v22 -= 40;
    }
    while (v22);
    v16 = v23[83].i64[1];
  }
  v152 = v154;
  v153 = 0x600000000;
  v42 = *(_DWORD *)(v16 + 632);
  v43 = (void **)(v16 + 624);
  if (v42)
    v44 = &v152 == (_QWORD **)v43;
  else
    v44 = 1;
  if (!v44)
  {
    if (v42 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, (uint64_t)v154, *(unsigned int *)(v16 + 632), 8);
      v46 = *(_DWORD *)(v16 + 632);
      if (!v46)
        goto LABEL_47;
      v45 = v152;
    }
    else
    {
      v45 = v154;
      v46 = *(_DWORD *)(v16 + 632);
    }
    memcpy(v45, *v43, 8 * v46);
LABEL_47:
    LODWORD(v153) = v42;
  }
  v154[12] = *(_DWORD *)(v16 + 688);
  v47 = v124;
  v48 = v127;
  if ((_DWORD)v15)
  {
    v123 = &v124[v15];
    do
    {
      v125 = v47;
      v49 = v48[1532].i64[1] + 144 * *v47;
      v50 = *(unsigned int *)(v49 + 104);
      if ((_DWORD)v50)
      {
        v51 = *(unsigned int **)(v49 + 96);
        v52 = 4 * v50;
        do
        {
          v53 = *v51;
          v54 = v152[v53 >> 6];
          if (((1 << v53) & v54) != 0)
          {
            v152[v53 >> 6] = v54 & ~(1 << v53);
            v55 = *(_QWORD *)(v48[73].i64[0] + 256);
            v56 = v48[1821].i64[1];
            v57 = *(_DWORD *)(v56 + 4 * *(unsigned int *)(v55 + 4 * (2 * v53)));
            if (v57 == -1)
            {
              v64 = 0;
              v60 = 0;
            }
            else
            {
              v58 = v48[1532].i64[1];
              v59 = v58 + 144 * v57;
              v60 = *(_DWORD *)(v59 + 4);
              v61 = *(_QWORD *)(v59 + 8);
              if (v61)
              {
                v62 = *(_QWORD *)(v61 + 512);
                if (*(_DWORD *)(v62 + 24 * v53) != *(_DWORD *)(v61 + 4))
                {
                  sub_1C50E4FD4((unsigned int *)v61, v53);
                  v62 = *(_QWORD *)(v61 + 512);
                  v55 = *(_QWORD *)(v48[73].i64[0] + 256);
                  v56 = v48[1821].i64[1];
                }
                v63 = (_QWORD *)(v62 + 24 * v53);
              }
              else
              {
                v63 = &unk_1C85FAC00;
              }
              *(_QWORD *)(v58 + 144 * v57 + 16) = v63;
              v64 = v63[1];
            }
            v65 = *(_DWORD *)(v56 + 4 * *(unsigned int *)(v55 + 4 * ((2 * (_DWORD)v53) | 1u)));
            if (v65 == -1)
            {
              v72 = 0;
              v68 = 0;
            }
            else
            {
              v66 = v48[1532].i64[1];
              v67 = v66 + 144 * v65;
              v68 = *(_DWORD *)(v67 + 4);
              v69 = *(_QWORD *)(v67 + 8);
              if (v69)
              {
                v70 = *(_QWORD *)(v69 + 512);
                if (*(_DWORD *)(v70 + 24 * v53) != *(_DWORD *)(v69 + 4))
                {
                  sub_1C50E4FD4((unsigned int *)v69, v53);
                  v70 = *(_QWORD *)(v69 + 512);
                }
                v71 = (_QWORD *)(v70 + 24 * v53);
              }
              else
              {
                v71 = &unk_1C85FAC00;
              }
              *(_QWORD *)(v66 + 144 * v65 + 16) = v71;
              v72 = v71[2];
              v48 = v127;
            }
            if (v60 | v68)
              sub_1C5294084((int *)v48[84].i64[0], v53, v60, v64, v68, v72);
          }
          ++v51;
          v52 -= 4;
        }
        while (v52);
      }
      v47 = v125 + 1;
    }
    while (v125 + 1 != v123);
  }
  v150[0] = v151;
  v150[1] = (void *)0x800000000;
  sub_1C528FF04(v48[84].u64[0], (unsigned int *)v150);
  sub_1C50F9BC0(v48[74].i64[0], v120, (int *)(*(_QWORD *)v129 + 4 * v134), *(unsigned int *)(v129 + 8) - (unint64_t)v134);
  v73 = *(_DWORD *)(v129 + 8);
  v74 = v73 - v134;
  if (v73 != v134)
  {
    v75 = 0;
    v126 = *(_DWORD *)(v48[83].i64[1] + 288) - *(_DWORD *)(v48[83].i64[1] + 616) + *(_DWORD *)(v48[83].i64[1] + 696);
    v76 = v48 + 78;
    i64 = (uint64_t)v48[79].i64;
    do
    {
      v77 = v48[17].i64[1];
      v78 = *(_DWORD *)(*(_QWORD *)v129 + 4 * (v134 + v75));
      if ((v78 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v77 + 416)
        || (v79 = *(llvm::LiveInterval **)(*(_QWORD *)(v77 + 408) + 8 * (v78 & 0x7FFFFFFF))) == 0)
      {
        v79 = (llvm::LiveInterval *)sub_1C4851220(v48[17].i64[1], v78);
        v112 = *(_QWORD *)(v77 + 304);
        v113 = *(_QWORD *)(v77 + 248);
        *(_QWORD *)v112 = v113;
        *(_QWORD *)(v112 + 8) = *(_QWORD *)(v113 + 40);
        *(_OWORD *)(v112 + 16) = *(_OWORD *)(v77 + 288);
        *(_QWORD *)(v112 + 32) = v77 + 312;
        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v112);
        *(_DWORD *)(v112 + 184) = 0;
        v114 = *(_QWORD *)(v77 + 256);
        v44 = *(_BYTE *)(v114 + 16) == 0;
        v115 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v114 + 24) + 16 * (*((_DWORD *)v79 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                  + 34);
        v117 = !v44 && v115 != 0;
        llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v77 + 304), v79, v117);
        llvm::LiveIntervals::computeDeadValues(v77, (uint64_t)v79, 0);
      }
      v80 = *((_DWORD *)v79 + 28);
      v81 = v80 & 0x7FFFFFFF;
      v82 = v48[78].u32[2];
      if ((v80 & 0x7FFFFFFFu) >= v82)
      {
        v83 = v81 + 1;
        v84 = v48[79].i64[0];
        v85 = v48[78].u32[2];
        v86 = v48[78].i32[2];
        if (v81 >= v48[78].i32[3])
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v76, i64, v81 + 1, 8);
          v85 = v48[78].u32[2];
          v86 = v48[78].i32[2];
        }
        v87 = v83 - v82;
        if (v83 != v82)
        {
          v88 = (uint64_t *)(v76->i64[0] + 8 * v85);
          v89 = ~v81 + v82;
          do
          {
            *v88++ = v84;
            v90 = __CFADD__(v89++, 1);
          }
          while (!v90);
          v86 = v48[78].i32[2];
        }
        LODWORD(v82) = v86 + v87;
        v48[78].i32[2] = v86 + v87;
      }
      v91 = v76->i64[0];
      if (!*(_DWORD *)(v76->i64[0] + 8 * v81))
      {
        v92 = *((_DWORD *)v150[0] + v75);
        if (v92)
        {
          if (v92 < v119 - v118 && sub_1C528D60C(v48[83].i64[1], (uint64_t)v79) >= v126)
          {
            v93 = *((_DWORD *)v79 + 28);
            v94 = v93 & 0x7FFFFFFF;
            v95 = v48[78].u32[2];
            if ((v93 & 0x7FFFFFFFu) >= v95)
            {
              v96 = v94 + 1;
              v97 = v127[79].i64[0];
              if (v94 >= v127[78].i32[3])
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v76, i64, v94 + 1, 8);
                v98 = v127[78].u32[2];
                v99 = v127[78].i32[2];
              }
              else
              {
                v98 = v95;
                v99 = v95;
              }
              if (v96 != v95)
              {
                v100 = (uint64_t *)(v76->i64[0] + 8 * v98);
                v101 = ~v94 + v95;
                do
                {
                  *v100++ = v97;
                  v90 = __CFADD__(v101++, 1);
                }
                while (!v90);
                v99 = v127[78].i32[2];
              }
              v127[78].i32[2] = v99 + v96 - v95;
            }
            *(_DWORD *)(v76->i64[0] + 8 * v94) = 3;
            v48 = v127;
          }
        }
        else
        {
          v102 = *((_DWORD *)v79 + 28);
          v103 = v102 & 0x7FFFFFFF;
          if ((v102 & 0x7FFFFFFFu) >= v82)
          {
            v104 = v48[79].i64[0];
            v105 = v82;
            v106 = v82;
            if (v103 >= v48[78].i32[3])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v76, i64, v103 + 1, 8);
              v105 = v127[78].u32[2];
              v91 = v127[78].i64[0];
              v106 = v127[78].i32[2];
            }
            v107 = v103 + 1 - v82;
            if (v107)
            {
              v108 = (uint64_t *)(v91 + 8 * v105);
              v109 = ~v103 + v82;
              do
              {
                *v108++ = v104;
                v90 = __CFADD__(v109++, 1);
              }
              while (!v90);
              v48 = v127;
              v106 = v127[78].i32[2];
              v91 = v127[78].i64[0];
            }
            else
            {
              v48 = v127;
            }
            v48[78].i32[2] = v106 + v107;
          }
          *(_DWORD *)(v91 + 8 * v103) = 4;
        }
      }
      ++v75;
    }
    while (v75 != v74);
  }
  if (llvm::RegAllocBase::VerifyEnabled)
    llvm::MachineFunction::verify((llvm::MachineFunction *)v48[54].i64[0], (llvm::Pass *)v48, "After splitting live range around region", 1);
  if (v150[0] != v151)
    free(v150[0]);
  if (v152 != (_QWORD *)v154)
    free(v152);
  v128[0] = &off_1E8143478;
  *(_QWORD *)(v130 + 8) = 0;
  if (v143 != v142)
    free(v143);
  if (v138 != v137)
    free(v138);
  if (v147 != v149)
    free(v147);
}

uint64_t sub_1C5234D5C(uint64_t a1, _QWORD *a2, int a3)
{
  _QWORD *v6;
  unsigned int v7;
  uint64_t v8;

  v6 = (_QWORD *)(a1 + 24);
  v7 = sub_1C476B7EC(a1 + 24);
  if (v7 == -1)
    return 0;
  v8 = 0;
  do
  {
    if (*(_DWORD *)(*a2 + 4 * v7) == -1)
    {
      *(_DWORD *)(*a2 + 4 * v7) = a3;
      v8 = (v8 + 1);
    }
    v7 = sub_1C476BA0C(v6, v7 + 1, *(_DWORD *)(a1 + 88), 1u);
  }
  while (v7 != -1);
  return v8;
}

char *sub_1C5234DEC(char *result, unint64_t a2, float a3)
{
  float **v5;
  float *v6;
  unint64_t v7;
  _DWORD *v8;
  float *v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  unint64_t v13;
  float *v14;

  v5 = (float **)result;
  if (*((unsigned int *)result + 3) >= a2)
  {
    v9 = *(float **)result;
    v8 = result + 8;
    v10 = *((unsigned int *)result + 2);
    if (v10 >= a2)
      v11 = a2;
    else
      v11 = *((unsigned int *)result + 2);
    if (v11)
    {
      v12 = *(float **)result;
      do
      {
        *v12++ = a3;
        --v11;
      }
      while (v11);
    }
    v13 = v10 - a2;
    if (v10 < a2)
    {
      v14 = &v9[v10];
      do
        *v14++ = a3;
      while (!__CFADD__(v13++, 1));
    }
  }
  else
  {
    *((_DWORD *)result + 2) = 0;
    result = (char *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 16), a2, 4);
    v6 = *v5;
    v7 = a2;
    do
    {
      *v6++ = a3;
      --v7;
    }
    while (v7);
    v8 = v5 + 1;
  }
  *v8 = a2;
  return result;
}

uint64_t sub_1C5234EA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, unsigned int a6)
{
  uint64_t v6;
  unint64_t **v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  char *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  char *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  unsigned int v32;
  char *v33;
  uint64_t v34;
  char *v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  int *v41;
  int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  _WORD *v51;
  unsigned __int16 *v52;
  __int16 v53;
  unsigned __int16 v54;
  uint64_t v55;
  int v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  int32x2_t *v60;
  int v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  llvm::Timer *v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  float v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  unsigned int v84;
  float v85;
  uint64_t v86;
  float v87;
  unsigned int v88;
  unsigned __int16 *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  unint64_t v98;
  _WORD *v99;
  unsigned __int16 v100;
  unint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  llvm::LiveIntervalUnion::Query *v107;
  int v108;
  _DWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  unsigned int v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  int v133;
  unsigned int v134;
  uint64_t v135;
  unsigned int v136;
  _QWORD *v137;
  float v138;
  llvm::Timer *v139;
  unsigned int v140;
  uint64_t v141;
  float v142;
  _QWORD *v143;
  int v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  unsigned int *v148;
  unsigned int *v149;
  unsigned int v150;
  int v151;
  uint64_t v152;
  unint64_t *v153;
  char *v154;
  int v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  unint64_t v161;
  _WORD *v162;
  unsigned __int16 v163;
  llvm::LiveRange *v164;
  unsigned int v165;
  _QWORD *v166;
  uint64_t v167;
  unsigned int v168;
  unsigned int v169;
  _QWORD *v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  BOOL v174;
  unint64_t v175;
  _QWORD *v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  llvm::Timer *v181;
  int v182;
  uint64_t v183;
  int v184;
  int v185;
  float *v186;
  int v187;
  int v188;
  unsigned int v189;
  int v190;
  BOOL v191;
  float v192;
  BOOL v193;
  unsigned int v194;
  int v195;
  unsigned int v196;
  BOOL v198;
  float v199;
  unsigned int v200;
  unsigned int i;
  float v202;
  float v203;
  int v205;
  int j;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  llvm::Timer *v210;
  int v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  _QWORD *v225;
  uint64_t v226;
  int v227;
  BOOL v228;
  __int32 v229;
  int32x2_t v230;
  __int32 v231;
  unsigned int v232;
  int *v233;
  int v234;
  int v235;
  unsigned int v236;
  uint64_t v237;
  unsigned int v238;
  uint64_t v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  unint64_t v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  uint64_t *v250;
  _BOOL4 v251;
  uint64_t v252;
  unsigned int m;
  BOOL v254;
  uint64_t v255;
  int v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  int v261;
  int v262;
  _QWORD *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  uint64_t v272;
  uint64_t *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  int v280;
  uint64_t v281;
  unsigned __int16 *v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  _QWORD *v286;
  unint64_t v287;
  _WORD *v288;
  unsigned __int16 v289;
  uint64_t v290;
  unsigned int v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  _DWORD *v295;
  _BYTE *v296;
  uint64_t v297;
  unsigned int v298;
  unsigned int v299;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t *v308;
  unsigned int v309;
  uint64_t v310;
  _DWORD *v311;
  uint64_t v312;
  uint64_t v313;
  int **v314;
  int *v315;
  int v316;
  int **v317;
  int *v318;
  int v319;
  int v320;
  BOOL v321;
  int v322;
  int k;
  uint64_t v324;
  char *v325;
  uint64_t *v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t *v329;
  int v330;
  unsigned int v331;
  void *v332;
  unint64_t *v333;
  unint64_t v334;
  int v335;
  unint64_t v336;
  unint64_t v337;
  unint64_t *v338;
  unint64_t *v339;
  unint64_t v340;
  uint64_t *v341;
  uint64_t *v342;
  uint64_t *v343;
  llvm::LiveInterval *v344;
  unsigned int v345;
  uint64_t v346;
  void **v347;
  uint64_t *v348;
  uint64_t v349;
  void ***v350;
  unsigned int v351;
  uint64_t *v352;
  uint64_t *v353;
  uint64_t **v354;
  uint64_t v355;
  uint64_t **v356;
  uint64_t *v357;
  void **v358;
  void **v359;
  int64_t v360;
  uint64_t v361;
  const llvm::LiveInterval *v362;
  uint64_t v363;
  uint64_t v364;
  int64_t v365;
  char v366;
  uint64_t v367;
  llvm::Timer *v368;
  unsigned int v369;
  uint64_t v370;
  int v371;
  int *v372;
  uint64_t v373;
  uint64_t v374;
  llvm::LiveInterval *v375;
  _QWORD *v376;
  uint64_t *v377;
  int v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  int v383;
  int v385;
  _QWORD *v386;
  _QWORD *v387;
  uint64_t v388;
  unsigned int v389;
  uint64_t *v390;
  uint64_t v391;
  uint64_t *v392;
  uint64_t *v393;
  void **v394;
  _QWORD *v395;
  int v396;
  uint64_t v397;
  unsigned int v398;
  uint64_t v399;
  int v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t *v405;
  unsigned __int16 ***v406;
  unsigned int v407;
  uint64_t v408;
  int v409;
  uint64_t v410;
  uint64_t v411;
  unint64_t v412;
  _DWORD *v413;
  unsigned __int16 ***RegClassConstraintEffectForVReg;
  uint64_t v415;
  unsigned int v416;
  uint64_t v417;
  int v418;
  unint64_t v419;
  unint64_t v420;
  uint64_t v421;
  uint64_t v422;
  _QWORD *v423;
  uint64_t v424;
  unsigned int v425;
  unsigned __int16 ***v426;
  uint64_t v427;
  unsigned int v428;
  uint64_t v429;
  int v430;
  uint64_t v431;
  uint64_t *v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  llvm::Timer *v438;
  int v439;
  uint64_t v440;
  uint64_t *v441;
  int v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  int v449;
  _QWORD *v450;
  uint64_t v451;
  uint64_t v452;
  int v453;
  int v454;
  uint64_t v455;
  int v456;
  unsigned int v457;
  int *v458;
  int v459;
  int v460;
  unsigned int v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  _QWORD *v465;
  uint64_t v466;
  _DWORD *v467;
  uint64_t v468;
  unsigned int v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  unsigned int v473;
  uint64_t v474;
  _QWORD *v475;
  uint64_t v476;
  _DWORD *v477;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  int v482;
  int v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  int v488;
  uint64_t v489;
  _QWORD *v490;
  uint64_t v491;
  uint64_t v492;
  int v493;
  uint64_t v494;
  uint64_t v495;
  int v496;
  uint64_t v497;
  _QWORD *v498;
  uint64_t v499;
  uint64_t *v500;
  uint64_t v501;
  uint64_t *v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  int v508;
  int v510;
  uint64_t v511;
  _DWORD *v512;
  unsigned int v513;
  uint64_t v514;
  uint64_t v515;
  unsigned int v516;
  uint64_t v517;
  _QWORD *v518;
  uint64_t v519;
  _DWORD *v520;
  uint64_t v521;
  unsigned int *v522;
  uint64_t v523;
  unsigned int v524;
  uint64_t v525;
  uint64_t v526;
  _QWORD *v527;
  unint64_t v528;
  unint64_t v529;
  uint64_t *v530;
  _QWORD *v531;
  uint64_t v532;
  unint64_t v533;
  uint64_t v534;
  uint64_t v535;
  unint64_t v536;
  unint64_t v537;
  uint64_t v538;
  llvm::Timer *v539;
  llvm::Timer *v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  int v545;
  int v546;
  int v547;
  uint64_t v548;
  uint64_t v549;
  int v550;
  uint64_t *v551;
  uint64_t *v552;
  uint64_t v553;
  uint64_t *v554;
  uint64_t v555;
  int v556;
  uint64_t v557;
  unsigned int v558;
  unsigned int v559;
  unsigned int v560;
  uint64_t **v561;
  unint64_t v562;
  int64_t v563;
  _QWORD *v566;
  uint64_t v567;
  int *v568;
  uint64_t v569;
  unsigned int v570;
  int v571;
  unint64_t v572;
  uint64_t *v573;
  llvm::Timer *v574;
  llvm::Timer *v575;
  unsigned __int8 v576;
  llvm::Timer *v577;
  void *v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  int v582;
  void *__p;
  uint64_t v584;
  _QWORD v585[4];
  llvm::Timer *v586;
  uint64_t v587;
  _BYTE v588[32];
  uint64_t *v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  int8x16_t v593;
  uint64_t v594;
  uint64_t v595;
  unsigned int v596;
  char v597;
  uint64_t v598;
  void **v599;
  void **v600;
  uint64_t v601;
  int v602;
  _BYTE v603[32];
  _BYTE *v604;
  _BYTE *v605;
  uint64_t v606;
  int v607;
  _BYTE v608[32];
  llvm::Timer *v609;
  uint64_t v610;
  uint64_t v611;
  int v612;
  _QWORD v613[6];

  v9 = (unint64_t **)a2;
  v613[4] = *MEMORY[0x1E0C80C00];
  v576 = -1;
  v11 = (uint64_t *)(a1 + 296);
  sub_1C506591C(*(_DWORD *)(a2 + 112), *(_QWORD *)(a1 + 272), a1 + 296, *(_QWORD *)(a1 + 288), (uint64_t)&v578);
  v15 = -v579;
  v16 = v582;
  v567 = a4;
  if (v582 == -(int)v579)
    goto LABEL_77;
  v17 = -(int)v579;
  do
  {
    v18 = *(_QWORD *)(a1 + 288);
    if ((v15 & 0x80000000) != 0)
    {
      if (!llvm::LiveRegMatrix::checkInterference(v18, (uint64_t)v9, *((unsigned __int16 *)v578 + v579 + (int)v17)))
      {
        v28 = (char *)v578 + 2 * v579;
        v6 = *(unsigned __int16 *)&v28[2 * (int)v17];
        if (*(_WORD *)&v28[2 * (int)v17])
          goto LABEL_60;
        goto LABEL_77;
      }
    }
    else if (!llvm::LiveRegMatrix::checkInterference(v18, (uint64_t)v9, *(unsigned __int16 *)(v581 + 2 * v17)))
    {
      v6 = *(unsigned __int16 *)(v581 + 2 * v17);
      goto LABEL_8;
    }
    v6 = 0;
LABEL_8:
    if (v582 <= (int)v15)
      v19 = v17;
    else
      v19 = (v15 + 1);
    if (v582 <= (int)v15)
      v20 = v15;
    else
      v20 = v15 + 1;
    if (v20 < 0
      || v20 >= v582
      || (v21 = *(unsigned __int16 *)(v581 + 2 * v20), (v21 - 1) > 0x3FFFFFFE))
    {
      v15 = v19;
    }
    else
    {
      v15 = v19;
      do
      {
        if (v579)
        {
          v22 = 2 * v579;
          v23 = (char *)v578;
          while (*(unsigned __int16 *)v23 != (unsigned __int16)v21)
          {
            v23 += 2;
            v22 -= 2;
            if (!v22)
            {
              v23 = (char *)v578 + 2 * v579;
              break;
            }
          }
        }
        else
        {
          v23 = (char *)v578;
        }
        if (v579 == (v23 - (_BYTE *)v578) >> 1)
          break;
        v15 = (v20 + 1);
        if ((_DWORD)v15 == v582)
          break;
        v21 = *(unsigned __int16 *)(v581 + 2 * v15);
        ++v20;
      }
      while ((v21 - 1) <= 0x3FFFFFFE);
    }
    if (v16 == (_DWORD)v15)
      break;
    v17 = v15;
  }
  while (!(_DWORD)v6);
  if (!(_DWORD)v6)
    goto LABEL_77;
  v24 = (_DWORD)v9[14] & 0x7FFFFFFF;
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 208);
  v26 = v25 + 40 * v24;
  if (*(_DWORD *)(v26 + 16))
    v27 = **(_DWORD **)(v26 + 8);
  else
    v27 = 0;
  if (*(_DWORD *)(v25 + 40 * v24))
    v29 = 0;
  else
    v29 = v27;
  if ((_DWORD)v29)
    v30 = v29 >> 30 == 0;
  else
    v30 = 0;
  if (v30)
  {
    v33 = (char *)v578 + 2 * v579;
    if (!WORD1(v29))
    {
      if (v579)
      {
        v34 = 2 * v579;
        v35 = (char *)v578;
        while (*(unsigned __int16 *)v35 != (unsigned __int16)v29)
        {
          v35 += 2;
          v34 -= 2;
          if (!v34)
            goto LABEL_56;
        }
        v33 = v35;
      }
      else
      {
        v33 = (char *)v578;
      }
    }
LABEL_56:
    if (v579 != (v33 - (_BYTE *)v578) >> 1)
    {
      if (((*(uint64_t (**)(_QWORD, unint64_t **, uint64_t, uint64_t))(**(_QWORD **)(a1 + 1296) + 24))(*(_QWORD *)(a1 + 1296), v9, v29, v567) & 1) != 0)
      {
        sub_1C523237C(a1, (uint64_t)v9, v29, a3);
        v6 = v29;
LABEL_59:
        a4 = v567;
        if ((_DWORD)v6)
          goto LABEL_60;
        goto LABEL_77;
      }
      v589 = (uint64_t *)v9;
      sub_1C5232760(a1 + 29296, (uint64_t *)&v589);
    }
  }
  v31 = *(_QWORD *)(a1 + 29448);
  if (!*(_BYTE *)(v31 + v6))
    goto LABEL_59;
  a4 = v567;
  v32 = sub_1C5232878(a1, (uint64_t)v9, (uint64_t)&v578, a3, *(unsigned __int8 *)(v31 + v6), v567, v12, v13);
  if (v32)
    v6 = v32;
  else
    v6 = v6;
LABEL_60:
  v36 = *(_DWORD *)(a1 + 1328);
  if (v36)
  {
    v37 = *((_DWORD *)v9 + 28);
    v38 = *(_QWORD *)(a1 + 1312);
    v39 = v36 - 1;
    v40 = v39 & (37 * v37);
    v41 = (int *)(v38 + 12 * v40);
    v42 = *v41;
    if (*v41 == v37)
    {
LABEL_65:
      *v41 = -2;
      *(int32x2_t *)(a1 + 1320) = vadd_s32(*(int32x2_t *)(a1 + 1320), (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v43 = 1;
      while (v42 != -1)
      {
        v44 = v40 + v43++;
        v40 = v44 & v39;
        v41 = (int *)(v38 + 12 * v40);
        v42 = *v41;
        if (*v41 == v37)
          goto LABEL_65;
      }
    }
  }
  if (*(_QWORD *)(a1 + 29288))
  {
    v45 = *(_QWORD *)(a1 + 1296);
    v46 = *(_QWORD *)(v45 + 64);
    if (*(_QWORD *)(v46 + 48) > (unint64_t)v6)
    {
      if (*(_WORD *)(*(_QWORD *)(v46 + 40) + 2 * v6))
      {
        v47 = *(_QWORD *)(v45 + 24);
        v48 = *(_QWORD *)(v47 + 248);
        v49 = v48 ? (_QWORD *)(v48 + 8) : 0;
        v50 = *(unsigned int *)(*v49 + 24 * v6 + 16);
        v51 = (_WORD *)(v49[6] + ((v50 >> 3) & 0x1FFFFFFE));
        v53 = *v51;
        v52 = v51 + 1;
        v54 = v53 + (v50 & 0xF) * v6;
        v55 = *(_QWORD *)(v47 + 392);
        do
        {
          if (*(_DWORD *)(v55 + 216 * v54 + 204))
            goto LABEL_697;
          v56 = *v52++;
          v54 += v56;
        }
        while (v56);
        if (!*(_DWORD *)(a3 + 8))
        {
          v6 = sub_1C620C0F4((int8x16_t *)a1, (uint64_t)v9, (unsigned __int16 **)&v578, v6, &v576, a3);
          if (!(v6 | *(_DWORD *)(a3 + 8)))
          {
LABEL_77:
            v57 = (_QWORD *)(a1 + 1248);
            v58 = (_DWORD)v9[14] & 0x7FFFFFFF;
            v59 = *(_QWORD *)(a1 + 1248);
            v60 = (int32x2_t *)a1;
            v61 = *(_DWORD *)(v59 + 8 * v58);
            v568 = (int *)v9;
            v569 = (uint64_t)v60;
            v566 = v57;
            if (v61 == 2)
              goto LABEL_78;
            v212 = sub_1C5232878((uint64_t)v60, (uint64_t)v9, (uint64_t)&v578, a3, v576, a4, v12, v13);
            if ((_DWORD)v212)
            {
              v6 = v212;
              v213 = *((_DWORD *)v9 + 28);
              v214 = *(_QWORD *)(*(_QWORD *)&v60[33] + 208);
              v215 = v214 + 40 * (v213 & 0x7FFFFFFF);
              if (*(_DWORD *)(v215 + 16))
                v216 = **(_DWORD **)(v215 + 8);
              else
                v216 = 0;
              if (*(_DWORD *)(v214 + 40 * (v213 & 0x7FFFFFFF)))
                v227 = 0;
              else
                v227 = v216;
              if (v227)
                v228 = v227 == (_DWORD)v212;
              else
                v228 = 1;
              if (!v228)
              {
                v589 = (uint64_t *)v9;
                sub_1C5232760((uint64_t)&v60[3662], (uint64_t *)&v589);
                v213 = *((_DWORD *)v9 + 28);
              }
              v229 = v60[166].i32[0];
              if (v229)
              {
                v230 = v60[164];
                v231 = v229 - 1;
                v232 = v231 & (37 * v213);
                v233 = (int *)(*(_QWORD *)&v230 + 12 * v232);
                v234 = *v233;
                if (*v233 != v213)
                {
                  v235 = 1;
                  do
                  {
                    if (v234 == -1)
                      goto LABEL_697;
                    v236 = v232 + v235++;
                    v232 = v236 & v231;
                    v233 = (int *)(*(_QWORD *)&v230 + 12 * v232);
                    v234 = *v233;
                  }
                  while (*v233 != v213);
                }
                *v233 = -2;
                v60[165] = vadd_s32(v60[165], (int32x2_t)0x1FFFFFFFFLL);
              }
              goto LABEL_697;
            }
            if (v61 <= 1)
            {
              v217 = *((_DWORD *)v9 + 28);
              v218 = v217 & 0x7FFFFFFF;
              v219 = *(unsigned int *)(v569 + 1256);
              v220 = v566;
              if ((v217 & 0x7FFFFFFFu) >= v219)
              {
                v221 = *(_QWORD *)(v569 + 1264);
                v222 = v218 + 1 - v219;
                if (v218 >= *(_DWORD *)(v569 + 1260))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v566, v569 + 1264, v218 + 1, 8);
                  v220 = v566;
                  v223 = *(unsigned int *)(v569 + 1256);
                  v224 = *(_DWORD *)(v569 + 1256);
                  if (v222)
                    goto LABEL_269;
                }
                else
                {
                  v223 = *(unsigned int *)(v569 + 1256);
                  v224 = *(_DWORD *)(v569 + 1256);
                  if (v222)
                  {
LABEL_269:
                    v225 = (_QWORD *)(*v220 + 8 * v223);
                    v226 = ~v218 + v219;
                    do
                    {
                      *v225++ = v221;
                      v174 = __CFADD__(v226++, 1);
                    }
                    while (!v174);
                    v224 = *(_DWORD *)(v569 + 1256);
                  }
                }
                *(_DWORD *)(v569 + 1256) = v224 + v222;
                v217 = *((_DWORD *)v9 + 28);
              }
              *(_DWORD *)(*v220 + 8 * v218) = 2;
LABEL_665:
              v452 = *(unsigned int *)(a3 + 8);
              if (v452 >= *(_DWORD *)(a3 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v452 + 1, 4);
                LODWORD(v452) = *(_DWORD *)(a3 + 8);
              }
              v6 = 0;
              *(_DWORD *)(*(_QWORD *)a3 + 4 * v452) = v217;
              ++*(_DWORD *)(a3 + 8);
              goto LABEL_697;
            }
            v57 = v566;
            if (v61 <= 3)
            {
              v59 = *v566;
              v58 = (_DWORD)v9[14] & 0x7FFFFFFF;
LABEL_78:
              v62 = *(_DWORD *)(a3 + 8);
              v63 = v569;
              if (*(int *)(v59 + 8 * v58) > 3)
                goto LABEL_651;
              v64 = **v9;
              v552 = v11;
              if ((v64 & 6) != 0
                && (v65 = (*v9)[3 * *((unsigned int *)v9 + 2) - 2], (v65 & 6) != 0)
                && (v66 = *(_QWORD *)(v569 + 280),
                    v6 = sub_1C499C548(*(_QWORD *)(v66 + 288), v64),
                    v67 = *(_QWORD *)(v66 + 288),
                    v63 = v569,
                    v6 == sub_1C499C548(v67, v65)))
              {
                v68 = (uint64_t *)(v569 + 1336);
                if (v6)
                {
                  v545 = v62;
                  llvm::NamedRegionTimer::NamedRegionTimer(&v577, "local_split", 0xBuLL, "Local Splitting", 0xFuLL, "regalloc", 8uLL, v13, "Register Allocation", 0x13uLL, llvm::TimePassesIsEnabled);
                  v69 = *v68;
                  *(_DWORD *)(v69 + 208) = 0;
                  *(_DWORD *)(v69 + 288) = 0;
                  *(_DWORD *)(v69 + 688) = 0;
                  *(_DWORD *)(v69 + 632) = 0;
                  *(_QWORD *)(v69 + 40) = v9;
                  sub_1C528CED8(v69);
                  v553 = v569 + 1336;
                  v70 = *v68;
                  if (*(_DWORD *)(*v68 + 288) != 1)
                    goto LABEL_586;
                  v71 = *(_DWORD *)(v70 + 208);
                  if (v71 < 3)
                    goto LABEL_586;
                  v551 = *(uint64_t **)(v70 + 280);
                  v6 = *(_QWORD *)(v70 + 200);
                  v72 = (llvm::Timer *)&v611;
                  v609 = (llvm::Timer *)&v611;
                  v610 = 0x800000000;
                  v73 = *(_QWORD *)(v569 + 288);
                  v74 = *((_DWORD *)v9 + 28);
                  v541 = a3;
                  if (*(_DWORD *)(v73 + 412) == v74)
                  {
                    v75 = *(_DWORD *)(v73 + 272);
                    if (*(_DWORD *)(v73 + 408) == v75)
                      goto LABEL_87;
                  }
                  else
                  {
                    v75 = *(_DWORD *)(v73 + 272);
                  }
                  *(_DWORD *)(v73 + 412) = v74;
                  *(_DWORD *)(v73 + 408) = v75;
                  *(_DWORD *)(v73 + 480) = 0;
                  *(_DWORD *)(v73 + 424) = 0;
                  llvm::LiveIntervals::checkRegMaskInterference(*(_QWORD *)(v73 + 256), (uint64_t)v9, v73 + 416);
                  v72 = (llvm::Timer *)&v611;
LABEL_87:
                  v76 = v71 - 1;
                  v77 = *v551;
                  if (*(_DWORD *)(v73 + 480))
                  {
                    v521 = *(_QWORD *)(v569 + 280);
                    v522 = (unsigned int *)(*(_QWORD *)(v521 + 600) + 8 * *(unsigned int *)(v77 + 24));
                    v523 = *v522;
                    v524 = v522[1];
                    v525 = *(_QWORD *)(v521 + 440);
                    v526 = v525 + 8 * v523;
                    if (v524)
                    {
                      v527 = (_QWORD *)(v525 + 8 * v523);
                      v528 = v522[1];
                      do
                      {
                        v529 = v528 >> 1;
                        v530 = &v527[v528 >> 1];
                        v532 = *v530;
                        v531 = v530 + 1;
                        v528 += ~(v528 >> 1);
                        if (((v532 >> 1) & 3 | *(_DWORD *)((v532 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) + 24) | 2u))
                          v527 = v531;
                        else
                          v528 = v529;
                      }
                      while (v528);
                    }
                    else
                    {
                      v527 = (_QWORD *)(v525 + 8 * v523);
                    }
                    v533 = ((unint64_t)v527 - v526) >> 3;
                    if (v524 != (_DWORD)v533)
                    {
                      v534 = 0;
                      while (1)
                      {
                        v535 = v534 + 1;
                        v536 = *(_QWORD *)(v6 + 8 * (v534 + 1)) & 0xFFFFFFFFFFFFFFF8;
                        v537 = *(_QWORD *)(v526 + 8 * v533) & 0xFFFFFFFFFFFFFFF8;
                        if (*(_DWORD *)(v536 + 24) >= *(_DWORD *)(v537 + 24))
                        {
                          if (v535 == v76 && v536 == v537)
                            goto LABEL_777;
                          v538 = v610;
                          if (v610 >= (unint64_t)HIDWORD(v610))
                          {
                            v549 = v6;
                            v539 = v72;
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v609, (uint64_t)v72, v610 + 1, 4);
                            v72 = v539;
                            v6 = v549;
                            v538 = v610;
                          }
                          *((_DWORD *)v609 + v538) = v534;
                          LODWORD(v610) = v610 + 1;
                          v11 = v552;
                          if ((_DWORD)v533 == v524)
                          {
LABEL_777:
                            v77 = *v551;
                            a4 = v567;
                            break;
                          }
                          while (*(_DWORD *)((*(_QWORD *)(v526 + 8 * v533) & 0xFFFFFFFFFFFFFFF8) + 24) < *(_DWORD *)((*(_QWORD *)(v6 + 8 * v535) & 0xFFFFFFFFFFFFFFF8) + 24))
                          {
                            LODWORD(v533) = v533 + 1;
                            if (v524 == (_DWORD)v533)
                              goto LABEL_777;
                          }
                        }
                        if (v535 != v76)
                        {
                          ++v534;
                          if ((_DWORD)v533 != v524)
                            continue;
                        }
                        goto LABEL_777;
                      }
                    }
                  }
                  v78 = *(unsigned int *)(v77 + 24);
                  v79 = *(_QWORD *)(*(_QWORD *)(v569 + 1136) + 248);
                  if (v79)
                    v80 = (float)*(unint64_t *)(*(_QWORD *)(v79 + 8) + 16);
                  else
                    v80 = 0.0;
                  v81 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v569 + 1176) + 392) + 8 * v78);
                  v82 = *(_DWORD *)(*(_QWORD *)(v569 + 1248) + 8 * ((_DWORD)v9[14] & 0x7FFFFFFF));
                  v586 = (llvm::Timer *)v588;
                  v587 = 0x800000000;
                  v83 = -v579;
                  v550 = v582;
                  if (v582 == -(int)v579)
                    goto LABEL_583;
                  v547 = v82;
                  v540 = v72;
                  v84 = 0;
                  v85 = (float)(1.0 / v80) * (float)v81;
                  v86 = -(int)v579;
                  v87 = 0.0;
                  v88 = v76;
                  v548 = v6;
                  while (2)
                  {
                    v559 = v88;
                    v558 = v84;
                    v89 = (unsigned __int16 *)((char *)v578 + 2 * v579 + 2 * (int)v86);
                    v556 = v83;
                    v557 = v86;
                    if ((int)v83 >= 0)
                      v89 = (unsigned __int16 *)(v581 + 2 * v86);
                    v90 = *v89;
                    v91 = *(_QWORD *)(*(_QWORD *)v553 + 280);
                    v92 = *(_QWORD *)(*(_QWORD *)v553 + 200);
                    v93 = *(_DWORD *)(*(_QWORD *)v553 + 208) - 1;
                    if (*(_BYTE *)(v91 + 32))
                      v94 = *(_QWORD *)(v91 + 8) & 0xFFFFFFFFFFFFFFF8;
                    else
                      v94 = *(_QWORD *)(v91 + 8);
                    if (*(_BYTE *)(v91 + 33))
                      v95 = *(_QWORD *)(v91 + 16) & 0xFFFFFFFFFFFFFFF8 | 6;
                    else
                      v95 = *(_QWORD *)(v91 + 16);
                    sub_1C5234DEC((char *)&v586, (*(_DWORD *)(*(_QWORD *)v553 + 208) - 1), 0.0);
                    v96 = *(_QWORD *)(v569 + 880);
                    if (v96)
                      v97 = (_QWORD *)(v96 + 8);
                    else
                      v97 = 0;
                    v98 = *(unsigned int *)(*v97 + 24 * v90 + 16);
                    v99 = (_WORD *)(v97[6] + ((v98 >> 3) & 0x1FFFFFFE));
                    v562 = v90;
                    v100 = *v99 + (v98 & 0xF) * v90;
                    v572 = v94 & 0xFFFFFFFFFFFFFFF8;
                    v570 = (v94 >> 1) & 3;
                    v63 = v569;
                    v101 = v95 & 0xFFFFFFFFFFFFFFF8;
                    v102 = (v95 >> 1) & 3;
                    while (2)
                    {
                      v103 = *(_QWORD *)(v63 + 288);
                      v104 = *(_QWORD *)(*(_QWORD *)(v63 + 1336) + 40);
                      v105 = v100;
                      v106 = *(_QWORD *)(v103 + 400);
                      v107 = (llvm::LiveIntervalUnion::Query *)(v106 + 176 * v100);
                      v108 = *(_DWORD *)(v103 + 272);
                      v109 = (_DWORD *)(*(_QWORD *)(v103 + 392) + 216 * v105);
                      if (*((_DWORD *)v107 + 42) != v108
                        || *(_QWORD *)(v106 + 176 * v105 + 8) != v104
                        || *(_DWORD **)v107 != v109
                        || *v109 != *(_DWORD *)(v106 + 176 * v105 + 164))
                      {
                        *(_QWORD *)v107 = v109;
                        v110 = v106 + 176 * v105;
                        *(_QWORD *)(v110 + 8) = v104;
                        *(_DWORD *)(v110 + 120) = 0;
                        *(_WORD *)(v110 + 160) = 0;
                        *(_DWORD *)(v110 + 164) = *v109;
                        *((_DWORD *)v107 + 42) = v108;
                      }
                      if (llvm::LiveIntervalUnion::Query::collectInterferingVRegs(v107, 1u))
                      {
                        v111 = *(_QWORD *)(*(_QWORD *)(v63 + 288) + 392);
                        v112 = v111 + 216 * v105;
                        v589 = (uint64_t *)(v112 + 8);
                        v590 = (uint64_t)&v592;
                        v591 = 0x400000000;
                        if (*(_DWORD *)(v112 + 200))
                        {
                          v117 = *(unsigned int *)(v111 + 216 * v105 + 204);
                          if ((_DWORD)v117)
                          {
                            v118 = 0;
                            v119 = v111 + 216 * v105 + 104;
                            do
                            {
                              if (((*(_QWORD *)(v119 + 8 * v118) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v119 + 8 * v118) & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v572 + 24) | v570))
                                goto LABEL_125;
                              ++v118;
                            }
                            while (v117 != v118);
                            v118 = v117;
                          }
                          else
                          {
                            v118 = 0;
                          }
LABEL_125:
                          sub_1C4A078FC(&v589, v118);
                          if ((_DWORD)v591)
                          {
                            if (*(_DWORD *)(v590 + 12) < *(_DWORD *)(v590 + 8))
                            {
                              v120 = *((_DWORD *)v589 + 48);
                              v121 = *(_QWORD *)(*(_QWORD *)(v590 + 16 * (v591 - 1))
                                               + 8 * *(unsigned int *)(v590 + 16 * (v591 - 1) + 12));
                              v122 = v120 - v591;
                              if (v120 != (_DWORD)v591)
                              {
                                do
                                {
                                  v156 = v121 & 0xFFFFFFFFFFFFFFC0;
                                  LODWORD(v157) = -1;
                                  do
                                  {
                                    v157 = (v157 + 1);
                                    v158 = *(_QWORD *)((v121 & 0xFFFFFFFFFFFFFFC0) + 8 * v157 + 0x60);
                                  }
                                  while (((v158 >> 1) & 3 | *(_DWORD *)((v158 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v572 + 24) | v570));
                                  sub_1C4A079DC(&v590, v121, v157);
                                  v121 = *(_QWORD *)(v156 + 8 * v157);
                                  --v122;
                                  v63 = v569;
                                }
                                while (v122);
                              }
                              LODWORD(v123) = -1;
                              do
                              {
                                v123 = (v123 + 1);
                                v124 = *(_QWORD *)((v121 & 0xFFFFFFFFFFFFFFC0) + 16 * v123 + 8);
                              }
                              while (((v124 >> 1) & 3 | *(_DWORD *)((v124 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v572 + 24) | v570));
                              sub_1C4A079DC(&v590, v121, v123);
                              v9 = (unint64_t **)v568;
                            }
                            goto LABEL_131;
                          }
                        }
                        else
                        {
                          v113 = *(unsigned int *)(v111 + 216 * v105 + 204);
                          if ((_DWORD)v113)
                          {
                            v114 = 0;
                            v115 = (uint64_t *)(v111 + 216 * v105 + 16);
                            do
                            {
                              v116 = *v115;
                              v115 += 2;
                              if (((v116 >> 1) & 3 | *(_DWORD *)((v116 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v572 + 24) | v570))
                                goto LABEL_123;
                              ++v114;
                            }
                            while (v113 != v114);
                            v114 = v113;
                          }
                          else
                          {
                            v114 = 0;
                          }
LABEL_123:
                          sub_1C4A078FC(&v589, v114);
LABEL_131:
                          v125 = v591;
                          if ((_DWORD)v591)
                          {
                            v126 = 0;
                            do
                            {
                              v127 = v590;
                              v128 = *(_DWORD *)(v590 + 8);
                              if (*(_DWORD *)(v590 + 12) >= v128)
                                break;
                              v129 = (char *)(v590 + 16 * v125);
                              v130 = *((_QWORD *)v129 - 2);
                              v131 = *((unsigned int *)v129 - 1);
                              if (((*(_QWORD *)(v130 + 16 * v131) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v130 + 16 * v131) & 0xFFFFFFFFFFFFFFF8) + 24)) >= (*(_DWORD *)(v101 + 24) | v102))
                                break;
                              v132 = v589;
                              v133 = *((_DWORD *)v589 + 48);
                              v134 = *((_DWORD *)v129 - 1);
                              v135 = *((_QWORD *)v129 - 2);
                              while (1)
                              {
                                v136 = v126 + 1;
                                v137 = (_QWORD *)(v135 + 16 * v134);
                                if (!v133)
                                  v137 = (_QWORD *)(v130 + 16 * v131);
                                if ((*(_DWORD *)((*(_QWORD *)(v92 + 8 * v136) & 0xFFFFFFFFFFFFFFF8) + 24) | 3u) >= ((*v137 >> 1) & 3 | *(_DWORD *)((*v137 & 0xFFFFFFFFFFFFFFF8) + 24)))
                                  break;
                                if (!v133)
                                {
                                  v135 = *((_QWORD *)v129 - 2);
                                  v134 = *((_DWORD *)v129 - 1);
                                }
                                ++v126;
                                if (v93 == v136)
                                  goto LABEL_165;
                              }
                              if (v93 == v126)
                                break;
                              v138 = *(float *)(*(_QWORD *)(v130 + 8 * v131 + 128) + 116);
                              v139 = v586;
                              v140 = *((_DWORD *)v129 - 1);
                              v141 = *((_QWORD *)v129 - 2);
                              do
                              {
                                if (v93 == v126)
                                  goto LABEL_165;
                                v142 = *((float *)v139 + v126);
                                if (v142 < v138)
                                  v142 = v138;
                                *((float *)v139 + v126++) = v142;
                                v143 = (_QWORD *)(v141 + 16 * v140 + 8);
                                if (!v133)
                                {
                                  v140 = v131;
                                  v141 = v130;
                                  v143 = (_QWORD *)(v130 + 16 * v131 + 8);
                                }
                              }
                              while (*(_DWORD *)((*(_QWORD *)(v92 + 8 * v126) & 0xFFFFFFFFFFFFFFF8) + 24) < ((*v143 >> 1) & 3 | *(_DWORD *)((*v143 & 0xFFFFFFFFFFFFFFF8) + 24)));
                              v144 = v131 + 1;
                              *((_DWORD *)v129 - 1) = v131 + 1;
                              v125 = v591;
                              if (v144 == *(_DWORD *)(v127 + 16 * v591 - 8))
                              {
                                v145 = *((unsigned int *)v132 + 48);
                                if ((_DWORD)v145)
                                {
                                  v146 = 1;
                                  v147 = v145 + 1;
                                  v148 = (unsigned int *)(v127 + 16 * v145 - 8);
                                  do
                                  {
                                    v149 = v148;
                                    if (v147 == 2)
                                    {
                                      v150 = *(_DWORD *)(v127 + 12);
                                      goto LABEL_160;
                                    }
                                    v150 = v148[1];
                                    v151 = *v148 - 1;
                                    --v147;
                                    v148 -= 4;
                                  }
                                  while (v150 == v151);
                                  v146 = v147;
                                  v128 = *v149;
LABEL_160:
                                  v149[1] = v150 + 1;
                                  if (v150 + 1 != v128)
                                  {
                                    v152 = *(_QWORD *)(*((_QWORD *)v149 - 1) + 8 * (v150 + 1));
                                    if ((_DWORD)v145 != v146)
                                    {
                                      do
                                      {
                                        v154 = (char *)(v590 + 16 * v146);
                                        *(_QWORD *)v154 = v152 & 0xFFFFFFFFFFFFFFC0;
                                        *((_DWORD *)v154 + 2) = (v152 & 0x3F) + 1;
                                        *((_DWORD *)v154 + 3) = 0;
                                        ++v146;
                                        v152 = *(_QWORD *)(v152 & 0xFFFFFFFFFFFFFFC0);
                                      }
                                      while ((_DWORD)v145 != v146);
                                      v127 = v590;
                                    }
                                    v153 = (unint64_t *)(v127 + 16 * v145);
                                    *v153 = v152 & 0xFFFFFFFFFFFFFFC0;
                                    v153[1] = (v152 & 0x3F) + 1;
                                    v125 = v591;
                                  }
                                }
                              }
                              --v126;
                            }
                            while (v125);
                          }
                        }
LABEL_165:
                        if ((uint64_t *)v590 != &v592)
                          free((void *)v590);
                      }
                      v155 = (unsigned __int16)v99[1];
                      ++v99;
                      v100 = v155 + v105;
                      if (v155)
                        continue;
                      break;
                    }
                    v159 = *(_QWORD *)(v63 + 880);
                    if (v159)
                      v160 = (_QWORD *)(v159 + 8);
                    else
                      v160 = 0;
                    v161 = *(unsigned int *)(*v160 + 24 * v562 + 16);
                    v162 = (_WORD *)(v160[6] + ((v161 >> 3) & 0x1FFFFFFE));
                    v163 = *v162 + (v161 & 0xF) * v562;
LABEL_177:
                    v164 = sub_1C50E4F00(*(llvm::LiveIntervals **)(v63 + 280), v163);
                    v165 = *((_DWORD *)v164 + 2);
                    v166 = *(_QWORD **)v164;
                    if (v165)
                    {
                      v167 = v166[3 * v165 - 2];
                      v168 = *(_DWORD *)(v572 + 24) | v570;
                      v169 = (v167 >> 1) & 3 | *(_DWORD *)((v167 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v170 = *(_QWORD **)v164;
                      v171 = *((unsigned int *)v164 + 2);
                      if (v168 < v169)
                      {
                        do
                        {
                          v172 = v171 >> 1;
                          v173 = v170[3 * (v171 >> 1) + 1];
                          LODWORD(v173) = (v173 >> 1) & 3 | *(_DWORD *)((v173 & 0xFFFFFFFFFFFFFFF8) + 24);
                          v171 -= (v171 >> 1) + 1;
                          v174 = v168 >= v173;
                          if (v168 >= v173)
                            v175 = v172 + 1;
                          else
                            v175 = 0;
                          v170 += 3 * v175;
                          if (!v174)
                            v171 = v172;
                        }
                        while (v171);
LABEL_188:
                        v176 = &v166[3 * v165];
                        if (v170 != v176)
                        {
                          v177 = 0;
                          v178 = *(_DWORD *)(v101 + 24) | v102;
                          do
                          {
                            v179 = (*v170 >> 1) & 3 | *(_DWORD *)((*v170 & 0xFFFFFFFFFFFFFFF8) + 24);
                            if (v179 >= v178)
                              break;
                            while (1)
                            {
                              v180 = v177 + 1;
                              if ((*(_DWORD *)((*(_QWORD *)(v92 + 8 * (v177 + 1)) & 0xFFFFFFFFFFFFFFF8) + 24) | 3u) >= v179)
                                break;
                              ++v177;
                              if (v93 == v180)
                                goto LABEL_199;
                            }
                            if (v93 == v177)
                              break;
                            v181 = v586;
                            do
                            {
                              if (v93 == v177)
                                goto LABEL_199;
                              *((_DWORD *)v181 + v177++) = 2139095040;
                            }
                            while (*(_DWORD *)((*(_QWORD *)(v92 + 8 * v177) & 0xFFFFFFFFFFFFFFF8) + 24) < ((v170[1] >> 1) & 3 | *(_DWORD *)((v170[1] & 0xFFFFFFFFFFFFFFF8) + 24)));
                            v170 += 3;
                            --v177;
                          }
                          while (v170 != v176);
                        }
LABEL_199:
                        v182 = (unsigned __int16)v162[1];
                        ++v162;
                        v163 += v182;
                        if (!v182)
                        {
                          v183 = *(_QWORD *)(v63 + 288);
                          v184 = *((_DWORD *)v9 + 28);
                          if (*(_DWORD *)(v183 + 412) != v184)
                          {
                            v185 = *(_DWORD *)(v183 + 272);
                            a4 = v567;
                            v11 = v552;
                            v6 = v548;
LABEL_255:
                            *(_DWORD *)(v183 + 412) = v184;
                            *(_DWORD *)(v183 + 408) = v185;
                            *(_DWORD *)(v183 + 480) = 0;
                            *(_DWORD *)(v183 + 424) = 0;
                            llvm::LiveIntervals::checkRegMaskInterference(*(_QWORD *)(v183 + 256), (uint64_t)v9, v183 + 416);
                            goto LABEL_202;
                          }
                          v185 = *(_DWORD *)(v183 + 272);
                          a4 = v567;
                          v11 = v552;
                          v6 = v548;
                          if (*(_DWORD *)(v183 + 408) != v185)
                            goto LABEL_255;
LABEL_202:
                          if (!*(_DWORD *)(v183 + 480)
                            || (_DWORD)v562
                            && ((*(_QWORD *)(*(_QWORD *)(v183 + 416) + ((v562 >> 3) & 0x1FF8)) >> v562) & 1) != 0)
                          {
                            v186 = (float *)v586;
LABEL_204:
                            v84 = v558;
                            v88 = v559;
                            v187 = v547;
                            v188 = v556;
                            v86 = v557;
                            goto LABEL_205;
                          }
                          v209 = v610;
                          v186 = (float *)v586;
                          if (!(_DWORD)v610)
                            goto LABEL_204;
                          v210 = v609;
                          v84 = v558;
                          v88 = v559;
                          v187 = v547;
                          v188 = v556;
                          v86 = v557;
                          do
                          {
                            v211 = *(_DWORD *)v210;
                            v210 = (llvm::Timer *)((char *)v210 + 4);
                            v186[v211] = INFINITY;
                            --v209;
                          }
                          while (v209);
LABEL_205:
                          v189 = 0;
                          v190 = *((unsigned __int8 *)v551 + 32);
                          v191 = *((_BYTE *)v551 + 32) != 0;
                          v192 = *v186;
                          v193 = 1;
                          v194 = 1;
                          while (2)
                          {
                            v195 = v191 + v193;
                            v196 = v194 + v195 - v189;
                            v198 = (v196 < v76 || v187 < 3) && v192 < INFINITY;
                            if (v198
                              && (v199 = (float)(v85 * (float)(v196 + 1))
                                       / (float)(((*(_QWORD *)(v6 + 8 * v194) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v6 + 8 * v194) & 0xFFFFFFFFFFFFFFF8) + 24))
                                               + 16 * v195
                                               - ((*(_QWORD *)(v6 + 8 * v189) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v6 + 8 * v189) & 0xFFFFFFFFFFFFFFF8) + 24))
                                               + 400),
                                  (float)(v199 * 0.97998) >= v192))
                            {
                              v202 = v199 - v192;
                              if (v202 > v87)
                              {
                                v87 = v202 * 0.97998;
                                v84 = v194;
                                v88 = v189;
                              }
                            }
                            else
                            {
                              v200 = v189 + 1;
                              if (v189 + 1 < v194)
                              {
                                if (v186[v189] >= v192)
                                {
                                  v192 = v186[v200];
                                  for (i = v189 + 2; v194 != i; ++i)
                                  {
                                    if (v192 < v186[i])
                                      v192 = v186[i];
                                  }
                                }
                                v189 = v200;
                                goto LABEL_228;
                              }
                              v192 = 0.0;
                              ++v189;
                            }
                            if (v194 >= v76)
                              break;
                            v203 = v186[v194++];
                            if (v192 < v203)
                              v192 = v203;
LABEL_228:
                            v191 = (v190 | v189) != 0;
                            v193 = v194 != (_DWORD)v76 || *((_BYTE *)v551 + 33) != 0;
                            if (v190 | v189 || v193)
                              continue;
                            break;
                          }
                          if (v582 <= v188)
                          {
                            v205 = v188;
                          }
                          else
                          {
                            v86 = (v188 + 1);
                            v205 = v188 + 1;
                          }
                          if ((v205 & 0x80000000) == 0 && v205 < v582)
                          {
                            for (j = *(unsigned __int16 *)(v581 + 2 * v205);
                                  (j - 1) <= 0x3FFFFFFE;
                                  ++v205)
                            {
                              if (v579)
                              {
                                v207 = 2 * v579;
                                v208 = (char *)v578;
                                do
                                {
                                  if (*(unsigned __int16 *)v208 == (unsigned __int16)j)
                                    goto LABEL_247;
                                  v208 += 2;
                                  v207 -= 2;
                                }
                                while (v207);
                                v208 = (char *)v578 + 2 * v579;
                              }
                              else
                              {
                                v208 = (char *)v578;
                              }
LABEL_247:
                              if (v579 == (v208 - (_BYTE *)v578) >> 1)
                                break;
                              v86 = (v205 + 1);
                              if ((_DWORD)v86 == v582)
                                break;
                              j = *(unsigned __int16 *)(v581 + 2 * v86);
                            }
                          }
                          LODWORD(v83) = v86;
                          if (v550 == (_DWORD)v86)
                          {
                            if (v88 != (_DWORD)v76)
                            {
                              v257 = *(_QWORD *)(v63 + 864);
                              v560 = v88;
                              v589 = (uint64_t *)&off_1E8143478;
                              v590 = (uint64_t)v9;
                              v258 = *(_QWORD *)(v257 + 40);
                              v591 = v541;
                              v592 = v258;
                              v593 = vextq_s8(*(int8x16_t *)(v569 + 272), *(int8x16_t *)(v569 + 272), 8uLL);
                              v594 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v257 + 16) + 104))(*(_QWORD *)(v257 + 16));
                              v595 = v569 + 856;
                              v63 = v569;
                              v596 = *(_DWORD *)(v541 + 8);
                              v597 = 0;
                              v598 = v569 + 568;
                              v599 = (void **)v603;
                              v600 = (void **)v603;
                              v601 = 4;
                              v602 = 0;
                              v604 = v608;
                              v605 = v608;
                              v606 = 4;
                              v607 = 0;
                              *(_QWORD *)(v258 + 8) = &v589;
                              sub_1C528D84C(*(_QWORD *)(v569 + 1344), (uint64_t)&v589, 0);
                              sub_1C528EB90(*(_QWORD *)(v569 + 1344));
                              v259 = sub_1C528EC00(*(_QWORD *)(v569 + 1344), *(_QWORD *)(v6 + 8 * v560));
                              v260 = sub_1C528F4A4(*(_QWORD *)(v569 + 1344), *(_QWORD *)(v6 + 8 * v84));
                              sub_1C528F0F0(*(_QWORD *)(v63 + 1344) + 200, v259, v260, *(_DWORD *)(*(_QWORD *)(v63 + 1344) + 88));
                              __p = v585;
                              v584 = 0x800000000;
                              sub_1C528FF04(*(_QWORD *)(v569 + 1344), (unsigned int *)&__p);
                              sub_1C50F9BC0(*(_QWORD *)(v569 + 1184), *((_DWORD *)v9 + 28), (int *)(*(_QWORD *)v591 + 4 * v596), *(unsigned int *)(v591 + 8) - (unint64_t)v596);
                              v261 = *((unsigned __int8 *)v551 + 32);
                              if (v560)
                                v261 = 1;
                              v262 = *((unsigned __int8 *)v551 + 33);
                              if (v84 != (_DWORD)v76)
                                v262 = 1;
                              v263 = v566;
                              if (v84 - v560 + v261 + v262 >= v76)
                              {
                                v264 = v584;
                                if ((_DWORD)v584)
                                {
                                  v265 = 0;
                                  do
                                  {
                                    if (*((_DWORD *)__p + v265) == 1)
                                    {
                                      v266 = *(_QWORD *)(v569 + 280);
                                      v267 = *(_DWORD *)(*(_QWORD *)v591 + 4 * (v596 + v265));
                                      if ((v267 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v266 + 416)
                                        || (v6 = *(_QWORD *)(*(_QWORD *)(v266 + 408) + 8 * (v267 & 0x7FFFFFFF))) == 0)
                                      {
                                        v6 = sub_1C4851220(*(_QWORD *)(v569 + 280), v267);
                                        v275 = *(_QWORD *)(v266 + 304);
                                        v276 = *(_QWORD *)(v266 + 248);
                                        *(_QWORD *)v275 = v276;
                                        *(_QWORD *)(v275 + 8) = *(_QWORD *)(v276 + 40);
                                        *(_OWORD *)(v275 + 16) = *(_OWORD *)(v266 + 288);
                                        *(_QWORD *)(v275 + 32) = v266 + 312;
                                        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v275);
                                        *(_DWORD *)(v275 + 184) = 0;
                                        v277 = *(_QWORD *)(v266 + 256);
                                        v30 = *(_BYTE *)(v277 + 16) == 0;
                                        v278 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v277 + 24)
                                                                               + 16
                                                                               * (*(_DWORD *)(v6 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                                                  + 34);
                                        v280 = !v30 && v278 != 0;
                                        llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v266 + 304), (llvm::LiveInterval *)v6, v280);
                                        llvm::LiveIntervals::computeDeadValues(v266, v6, 0);
                                        v263 = v566;
                                      }
                                      v268 = *(_DWORD *)(v6 + 112);
                                      v269 = v268 & 0x7FFFFFFF;
                                      v270 = *(unsigned int *)(v569 + 1256);
                                      if ((v268 & 0x7FFFFFFFu) >= v270)
                                      {
                                        v6 = *(_QWORD *)(v569 + 1264);
                                        if (v269 >= *(_DWORD *)(v569 + 1260))
                                        {
                                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v263, v569 + 1264, v269 + 1, 8);
                                          v263 = v566;
                                        }
                                        v271 = *(_DWORD *)(v569 + 1256);
                                        v272 = v269 + 1 - v270;
                                        if (v272)
                                        {
                                          v273 = (uint64_t *)(*v263 + 8 * *(unsigned int *)(v569 + 1256));
                                          v274 = ~v269 + v270;
                                          do
                                          {
                                            *v273++ = v6;
                                            v174 = __CFADD__(v274++, 1);
                                          }
                                          while (!v174);
                                          v271 = *(_DWORD *)(v569 + 1256);
                                        }
                                        *(_DWORD *)(v569 + 1256) = v271 + v272;
                                      }
                                      *(_DWORD *)(*v263 + 8 * v269) = 3;
                                      v11 = v552;
                                    }
                                    ++v265;
                                  }
                                  while (v265 != v264);
                                }
                              }
                              if (__p != v585)
                                free(__p);
                              v589 = (uint64_t *)&off_1E8143478;
                              *(_QWORD *)(v592 + 8) = 0;
                              a4 = v567;
                              if (v605 != v604)
                                free(v605);
                              v9 = (unint64_t **)v568;
                              if (v600 != v599)
                                free(v600);
                              v186 = (float *)v586;
                            }
                            v72 = v540;
                            if (v186 != (float *)v588)
                            {
                              free(v186);
                              v72 = v540;
                            }
LABEL_583:
                            if (v609 != v72)
                              free(v609);
                            a3 = v541;
LABEL_586:
                            v57 = v566;
                            if (!*(_DWORD *)(a3 + 8))
                            {
                              v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v63 + 264) + 24)
                                             + 16 * ((_DWORD)v9[14] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
                              v397 = v63;
                              v398 = *(unsigned __int16 *)(*(_QWORD *)v6 + 24);
                              v399 = *(_QWORD *)(v397 + 296);
                              if (*(_DWORD *)(v397 + 304) != *(_DWORD *)(v399
                                                                        + 24
                                                                        * *(unsigned __int16 *)(*(_QWORD *)v6 + 24)))
                              {
                                llvm::RegisterClassInfo::compute(v11, (unsigned __int16 ***)v6);
                                v57 = v566;
                              }
                              v400 = *(unsigned __int8 *)(v399 + 24 * v398 + 8);
                              v63 = v569;
                              if (v400)
                              {
                                v401 = *(_QWORD *)(v569 + 864);
                                v589 = (uint64_t *)&off_1E8143478;
                                v590 = (uint64_t)v9;
                                v402 = *(_QWORD *)(v401 + 40);
                                v591 = a3;
                                v592 = v402;
                                v593 = vextq_s8(*(int8x16_t *)(v569 + 272), *(int8x16_t *)(v569 + 272), 8uLL);
                                v594 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v401 + 16) + 104))(*(_QWORD *)(v401 + 16));
                                v595 = v569 + 856;
                                v63 = v569;
                                v596 = *(_DWORD *)(a3 + 8);
                                v597 = 0;
                                v598 = v569 + 568;
                                v599 = (void **)v603;
                                v600 = (void **)v603;
                                v601 = 4;
                                v602 = 0;
                                v604 = v608;
                                v605 = v608;
                                v606 = 4;
                                v607 = 0;
                                *(_QWORD *)(v402 + 8) = &v589;
                                sub_1C528D84C(*(_QWORD *)(v569 + 1344), (uint64_t)&v589, 1);
                                v403 = *(_QWORD *)(v569 + 1336);
                                v404 = *(unsigned int *)(v403 + 208);
                                if (v404 >= 2)
                                {
                                  v543 = a3;
                                  v405 = *(uint64_t **)(v403 + 200);
                                  v406 = (unsigned __int16 ***)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v569 + 880) + 256))(*(_QWORD *)(v569 + 880), v6, *(_QWORD *)(v569 + 864));
                                  v6 = v569 + 888;
                                  v407 = *((unsigned __int16 *)*v406 + 12);
                                  v408 = *(_QWORD *)(v569 + 888);
                                  if (*(_DWORD *)(v569 + 896) != *(_DWORD *)(v408
                                                                            + 24 * *((unsigned __int16 *)*v406 + 12)))
                                    llvm::RegisterClassInfo::compute((uint64_t *)v6, v406);
                                  v409 = *(_DWORD *)(v408 + 24 * v407 + 4);
                                  v410 = 8 * v404;
                                  v63 = v569;
                                  do
                                  {
                                    v411 = *v405;
                                    if ((unint64_t)*v405 < 8)
                                      goto LABEL_605;
                                    v412 = *(_QWORD *)((v411 & 0xFFFFFFFFFFFFFFF8) + 16);
                                    if (!v412)
                                      goto LABEL_605;
                                    if (**(_WORD **)(v412 + 16) != 19
                                      || (v413 = *(_DWORD **)(v412 + 32), (*v413 & 0xFFF00) != 0)
                                      || (v413[8] & 0xFFF00) != 0)
                                    {
                                      RegClassConstraintEffectForVReg = (unsigned __int16 ***)llvm::MachineInstr::getRegClassConstraintEffectForVReg(v412, v568[28], (uint64_t)v406, *(llvm::TargetInstrInfo **)(v63 + 872), *(llvm::TargetRegisterInfo **)(v63 + 880), 1);
                                      if (RegClassConstraintEffectForVReg)
                                      {
                                        v415 = v63;
                                        v416 = *((unsigned __int16 *)*RegClassConstraintEffectForVReg + 12);
                                        v417 = *(_QWORD *)(v415 + 888);
                                        if (*(_DWORD *)(v415 + 896) != *(_DWORD *)(v417
                                                                                  + 24
                                                                                  * *((unsigned __int16 *)*RegClassConstraintEffectForVReg
                                                                                    + 12)))
                                          llvm::RegisterClassInfo::compute((uint64_t *)v6, RegClassConstraintEffectForVReg);
                                        v418 = *(_DWORD *)(v417 + 24 * v416 + 4);
                                        v63 = v569;
                                      }
                                      else
                                      {
                                        v418 = 0;
                                      }
                                      if (v409 != v418)
                                      {
LABEL_605:
                                        sub_1C528EB90(*(_QWORD *)(v63 + 1344));
                                        v419 = sub_1C528EC00(*(_QWORD *)(v63 + 1344), v411);
                                        v420 = sub_1C528F4A4(*(_QWORD *)(v63 + 1344), v411);
                                        sub_1C528F0F0(*(_QWORD *)(v63 + 1344) + 200, v419, v420, *(_DWORD *)(*(_QWORD *)(v63 + 1344) + 88));
                                      }
                                    }
                                    ++v405;
                                    v410 -= 8;
                                  }
                                  while (v410);
                                  a4 = v567;
                                  v9 = (unint64_t **)v568;
                                  a3 = v543;
                                  if (*(_DWORD *)(v591 + 8) != v596)
                                  {
                                    v609 = (llvm::Timer *)&v611;
                                    v610 = 0x800000000;
                                    sub_1C528FF04(*(_QWORD *)(v63 + 1344), (unsigned int *)&v609);
                                    sub_1C50F9BC0(*(_QWORD *)(v63 + 1184), v568[28], (int *)(*(_QWORD *)v591 + 4 * v596), *(unsigned int *)(v591 + 8) - (unint64_t)v596);
                                    v421 = *(unsigned int *)(v591 + 8);
                                    if (v596 != (_DWORD)v421)
                                    {
                                      v511 = *(_QWORD *)v591 + 4 * v421;
                                      v512 = (_DWORD *)(*(_QWORD *)v591 + 4 * v596);
                                      v513 = *(_DWORD *)(v63 + 1256);
                                      do
                                      {
                                        v6 = *v512 & 0x7FFFFFFF;
                                        if ((*v512 & 0x7FFFFFFFu) >= v513)
                                        {
                                          v514 = *(_QWORD *)(v63 + 1264);
                                          v515 = v513;
                                          v516 = v513;
                                          if (v6 >= *(_DWORD *)(v63 + 1260))
                                          {
                                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v566, v63 + 1264, v6 + 1, 8);
                                            v515 = *(unsigned int *)(v63 + 1256);
                                            v516 = *(_DWORD *)(v63 + 1256);
                                          }
                                          v517 = v6 + 1 - v513;
                                          if (v517)
                                          {
                                            v518 = (_QWORD *)(*v566 + 8 * v515);
                                            v519 = ~v6 + v513;
                                            do
                                            {
                                              *v518++ = v514;
                                              v174 = __CFADD__(v519++, 1);
                                            }
                                            while (!v174);
                                            v516 = *(_DWORD *)(v63 + 1256);
                                          }
                                          v513 = v516 + v517;
                                          *(_DWORD *)(v63 + 1256) = v516 + v517;
                                        }
                                        v520 = (_DWORD *)(*v566 + 8 * v6);
                                        if (!*v520)
                                          *v520 = 4;
                                        ++v512;
                                      }
                                      while (v512 != (_DWORD *)v511);
                                    }
                                    if (v609 != (llvm::Timer *)&v611)
                                      free(v609);
                                    a4 = v567;
                                    v9 = (unint64_t **)v568;
                                    a3 = v543;
                                  }
                                }
                                v589 = (uint64_t *)&off_1E8143478;
                                *(_QWORD *)(v592 + 8) = 0;
                                if (v605 != v604)
                                  free(v605);
                                if (v600 != v599)
                                  free(v600);
                                v57 = v566;
                              }
                            }
                            if (v577)
                            {
                              llvm::Timer::stopTimer(v577);
                              v57 = v566;
                            }
                            v62 = v545;
LABEL_651:
                            if (*(_DWORD *)(a3 + 8) == v62)
                            {
                              v14.n128_u32[0] = *((_DWORD *)v9 + 29);
                              if (v14.n128_f32[0] != INFINITY)
                                goto LABEL_653;
LABEL_320:
                              if (!(*(unsigned int (**)(_QWORD, _QWORD, unint64_t **, __n128))(**(_QWORD **)(v63 + 880) + 536))(*(_QWORD *)(v63 + 880), *(_QWORD *)(v63 + 864), v9, v14))
                              {
LABEL_324:
                                v6 = 0xFFFFFFFFLL;
                                goto LABEL_697;
                              }
                              v563 = a5[2];
                              if (dword_1ED7FE538 <= a6 && !byte_1ED7FE6B8)
                              {
                                *(_BYTE *)(v63 + 1304) |= 1u;
                                goto LABEL_324;
                              }
                              v609 = (llvm::Timer *)v613;
                              v610 = (uint64_t)v613;
                              v611 = 4;
                              v612 = 0;
                              LODWORD(v589) = *((_DWORD *)v9 + 28);
                              sub_1C48302EC(a4, (unsigned int *)&v589);
                              v586 = (llvm::Timer *)v588;
                              v587 = 0x400000000;
                              v255 = -v579;
                              v256 = v582;
                              if (v582 == -(int)v579)
                              {
                                v6 = 0xFFFFFFFFLL;
                                goto LABEL_571;
                              }
                              v281 = a4;
                              LODWORD(a4) = -(int)v579;
                              v561 = (uint64_t **)(v281 + 80);
                              v555 = a3 + 16;
                              v573 = (uint64_t *)(v281 + 88);
                              v542 = a3;
                              v571 = v582;
                              while (2)
                              {
                                v282 = (unsigned __int16 *)((char *)v578 + 2 * v579 + 2 * (int)a4);
                                if ((int)v255 >= 0)
                                  v282 = (unsigned __int16 *)(v581 + 2 * a4);
                                v283 = *v282;
                                if ((llvm::Timer *)v610 == v609)
                                {
LABEL_362:
                                  v612 = 0;
                                  HIDWORD(v611) = 0;
                                }
                                else
                                {
                                  if (v611 < 0x21 || 4 * (HIDWORD(v611) - v612) >= v611)
                                  {
                                    memset((void *)v610, 255, 8 * v611);
                                    goto LABEL_362;
                                  }
                                  free((void *)v610);
                                  v330 = 1 << (33 - __clz(HIDWORD(v611) - v612 - 1));
                                  if ((HIDWORD(v611) - v612) <= 0x10)
                                    v331 = 32;
                                  else
                                    v331 = v330;
                                  v611 = v331;
                                  v612 = 0;
                                  v332 = malloc_type_malloc(8 * v331, 0x4065EBACuLL);
                                  if (!v332)
                                    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
                                  v610 = (uint64_t)v332;
                                  memset(v332, 255, 8 * v611);
                                }
                                LODWORD(v587) = 0;
                                if ((int)llvm::LiveRegMatrix::checkInterference(*(_QWORD *)(v63 + 288), (uint64_t)v9, v283) > 1)goto LABEL_428;
                                v284 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v63 + 264) + 24)
                                                 + 16 * ((_DWORD)v9[14] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
                                v285 = *(_QWORD *)(v63 + 880);
                                if (v285)
                                  v286 = (_QWORD *)(v285 + 8);
                                else
                                  v286 = 0;
                                v287 = *(unsigned int *)(*v286 + 24 * v283 + 16);
                                v288 = (_WORD *)(v286[6] + ((v287 >> 3) & 0x1FFFFFFE));
                                v289 = *v288 + (v287 & 0xF) * v283;
LABEL_368:
                                v290 = *(_QWORD *)(v63 + 288);
                                v291 = v289;
                                v292 = *(_QWORD *)(v290 + 400);
                                v293 = v292 + 176 * v289;
                                v294 = *(_DWORD *)(v290 + 272);
                                v295 = (_DWORD *)(*(_QWORD *)(v290 + 392) + 216 * v291);
                                if (*(_DWORD *)(v293 + 168) == v294
                                  && *(int **)(v292 + 176 * v291 + 8) == v568
                                  && *(_DWORD **)v293 == v295
                                  && *v295 == *(_DWORD *)(v292 + 176 * v291 + 164))
                                {
                                  v296 = (_BYTE *)(v293 + 161);
                                  v299 = *(_DWORD *)(v293 + 120);
                                  v298 = dword_1ED7FE5F8;
                                  if (*(_BYTE *)(v293 + 161))
                                    v321 = v299 > dword_1ED7FE5F8;
                                  else
                                    v321 = 1;
                                  if (!v321)
                                  {
LABEL_371:
                                    if (v299 >= v298 && byte_1ED7FE6B8 == 0)
                                    {
                                      *(_BYTE *)(v63 + 1304) |= 2u;
LABEL_427:
                                      v9 = (unint64_t **)v568;
                                      v256 = v571;
LABEL_428:
                                      if (v582 <= (int)v255)
                                      {
                                        v322 = v255;
                                      }
                                      else
                                      {
                                        LODWORD(a4) = v255 + 1;
                                        v322 = v255 + 1;
                                      }
                                      if ((v322 & 0x80000000) == 0 && v322 < v582)
                                      {
                                        for (k = *(unsigned __int16 *)(v581 + 2 * v322);
                                              (k - 1) <= 0x3FFFFFFE;
                                              ++v322)
                                        {
                                          if (v579)
                                          {
                                            v324 = 2 * v579;
                                            v325 = (char *)v578;
                                            while (*(unsigned __int16 *)v325 != (unsigned __int16)k)
                                            {
                                              v325 += 2;
                                              v324 -= 2;
                                              if (!v324)
                                              {
                                                v325 = (char *)v578 + 2 * v579;
                                                break;
                                              }
                                            }
                                          }
                                          else
                                          {
                                            v325 = (char *)v578;
                                          }
                                          if (v579 == (v325 - (_BYTE *)v578) >> 1)
                                            break;
                                          a4 = (v322 + 1);
                                          if ((_DWORD)a4 == v582)
                                            break;
                                          k = *(unsigned __int16 *)(v581 + 2 * a4);
                                        }
                                      }
                                      LODWORD(v255) = a4;
                                      if (v256 == (_DWORD)a4)
                                      {
                                        v6 = 0xFFFFFFFFLL;
LABEL_569:
                                        if (v586 != (llvm::Timer *)v588)
                                          free(v586);
LABEL_571:
                                        if ((llvm::Timer *)v610 != v609)
                                          free((void *)v610);
                                        goto LABEL_697;
                                      }
                                      continue;
                                    }
                                    if (*v296)
                                    {
                                      if (v299)
                                        goto LABEL_379;
LABEL_413:
                                      v320 = (unsigned __int16)v288[1];
                                      ++v288;
                                      v289 = v320 + v291;
                                      if (!v320)
                                      {
                                        __p = 0;
                                        v584 = 0;
                                        v585[0] = 0;
                                        if ((llvm::Timer *)v610 == v609)
                                          v326 = (uint64_t *)((char *)&v611 + 4);
                                        else
                                          v326 = &v611;
                                        v327 = *(unsigned int *)v326;
                                        if ((_DWORD)v327)
                                        {
                                          v328 = 8 * v327;
                                          v329 = (unint64_t *)v610;
                                          while (*v329 >= 0xFFFFFFFFFFFFFFFELL)
                                          {
                                            ++v329;
                                            v328 -= 8;
                                            if (!v328)
                                              goto LABEL_468;
                                          }
                                        }
                                        else
                                        {
                                          v329 = (unint64_t *)v610;
                                        }
                                        v333 = (unint64_t *)(v610 + 8 * v327);
                                        if (v329 != v333)
                                        {
                                          v334 = *v329;
LABEL_462:
                                          v335 = *(_DWORD *)(v334 + 112);
                                          sub_1C5231C30(v569, (uint64_t *)&__p, (uint64_t **)v334);
                                          v336 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v569 + 272) + 280)
                                                                 + 4 * (v335 & 0x7FFFFFFF));
                                          v337 = a5[2];
                                          if (v337 >= a5[3])
                                          {
                                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a5, (uint64_t)(a5 + 4), v337 + 1, 16);
                                            v337 = a5[2];
                                          }
                                          v338 = (unint64_t *)(*(_QWORD *)a5 + 16 * v337);
                                          *v338 = v334;
                                          v338[1] = v336;
                                          ++a5[2];
                                          v63 = v569;
                                          llvm::LiveRegMatrix::unassign(*(llvm::LiveRegMatrix **)(v569 + 288), (const llvm::LiveInterval *)v334);
                                          v339 = v329 + 1;
                                          while (v339 != v333)
                                          {
                                            v340 = *v339++;
                                            v334 = v340;
                                            if (v340 <= 0xFFFFFFFFFFFFFFFDLL)
                                            {
                                              v329 = v339 - 1;
                                              goto LABEL_462;
                                            }
                                          }
                                        }
LABEL_468:
                                        v9 = (unint64_t **)v568;
                                        llvm::LiveRegMatrix::assign(*(_QWORD **)(v63 + 288), (llvm::LiveInterval *)v568, v283);
                                        v589 = &v591;
                                        v590 = 0x1000000000;
                                        if (*(_DWORD *)(v567 + 8))
                                          sub_1C48623F0((uint64_t)&v589, v567);
                                        v600 = 0;
                                        v601 = 0;
                                        v599 = (void **)&v600;
                                        v341 = *v561;
                                        if (*v561 != v573)
                                        {
                                          do
                                          {
                                            sub_1C620CA2C(&v599, (uint64_t *)&v600, *((_DWORD *)v341 + 7), (_DWORD *)v341 + 7);
                                            v342 = (uint64_t *)v341[1];
                                            if (v342)
                                            {
                                              do
                                              {
                                                v343 = v342;
                                                v342 = (uint64_t *)*v342;
                                              }
                                              while (v342);
                                            }
                                            else
                                            {
                                              do
                                              {
                                                v343 = (uint64_t *)v341[2];
                                                v30 = *v343 == (_QWORD)v341;
                                                v341 = v343;
                                              }
                                              while (!v30);
                                            }
                                            v341 = v343;
                                          }
                                          while (v343 != v573);
                                        }
                                        do
                                        {
                                          while (1)
                                          {
                                            if (__p == (void *)v584)
                                            {
                                              v367 = v542;
                                              if ((_DWORD)v587)
                                              {
                                                v368 = v586;
                                                v369 = *(_DWORD *)(v542 + 8);
                                                v370 = 4 * v587;
                                                do
                                                {
                                                  v371 = *(_DWORD *)v368;
                                                  if (v369 >= *(_DWORD *)(v367 + 12))
                                                  {
                                                    llvm::SmallVectorBase<unsigned int>::grow_pod(v542, v555, v369 + 1, 4);
                                                    v369 = *(_DWORD *)(v542 + 8);
                                                  }
                                                  v367 = v542;
                                                  *(_DWORD *)(*(_QWORD *)v542 + 4 * v369) = v371;
                                                  v369 = *(_DWORD *)(v542 + 8) + 1;
                                                  *(_DWORD *)(v542 + 8) = v369;
                                                  v368 = (llvm::Timer *)((char *)v368 + 4);
                                                  v370 -= 4;
                                                }
                                                while (v370);
                                              }
                                              v63 = v569;
                                              llvm::LiveRegMatrix::unassign(*(llvm::LiveRegMatrix **)(v569 + 288), (const llvm::LiveInterval *)v568);
                                              v366 = 1;
                                              v6 = v283;
                                              goto LABEL_520;
                                            }
                                            v344 = sub_1C52320F0(v63, (uint64_t *)&__p);
                                            v345 = sub_1C5234EA4(v63, v344, &v586, v567, a5, a6 + 1);
                                            if (!v345)
                                              break;
                                            if (v345 == -1)
                                              goto LABEL_482;
                                            llvm::LiveRegMatrix::assign(*(_QWORD **)(v63 + 288), v344, v345);
                                            LODWORD(v577) = *((_DWORD *)v344 + 28);
                                            sub_1C48302EC(v567, (unsigned int *)&v577);
                                          }
                                        }
                                        while (!*((_DWORD *)v344 + 2));
LABEL_482:
                                        sub_1C48623F0(v567, (uint64_t)&v589);
                                        v346 = v542;
                                        if (&v589 != (uint64_t **)v567)
                                        {
                                          v347 = v599;
                                          if (*(_QWORD *)(v567 + 96)
                                            && ((v348 = *v561,
                                                 *v561 = v573,
                                                 *(_QWORD *)(*v573 + 16) = 0,
                                                 *v573 = 0,
                                                 v573[1] = 0,
                                                 v348[1])
                                              ? (v349 = v348[1])
                                              : (v349 = (uint64_t)v348),
                                                v349))
                                          {
                                            v386 = sub_1C4FCE18C(v349);
                                            if (v347 == (void **)&v600)
                                            {
                                              v387 = (_QWORD *)v349;
                                              v388 = (uint64_t)v561;
                                              v350 = &v600;
                                            }
                                            else
                                            {
                                              v388 = (uint64_t)v561;
                                              do
                                              {
                                                v387 = v386;
                                                v389 = *((_DWORD *)v347 + 7);
                                                *(_DWORD *)(v349 + 28) = v389;
                                                v390 = v573;
                                                v391 = *v573;
                                                v392 = v573;
                                                if (*v573)
                                                {
                                                  do
                                                  {
                                                    while (1)
                                                    {
                                                      v392 = (uint64_t *)v391;
                                                      if (v389 >= *(_DWORD *)(v391 + 28))
                                                        break;
                                                      v391 = *(_QWORD *)v391;
                                                      v390 = v392;
                                                      if (!*v392)
                                                        goto LABEL_554;
                                                    }
                                                    v391 = *(_QWORD *)(v391 + 8);
                                                  }
                                                  while (v391);
                                                  v390 = v392 + 1;
                                                }
LABEL_554:
                                                *(_QWORD *)v349 = 0;
                                                *(_QWORD *)(v349 + 8) = 0;
                                                *(_QWORD *)(v349 + 16) = v392;
                                                *v390 = v349;
                                                v393 = (uint64_t *)**v561;
                                                if (v393)
                                                {
                                                  *v561 = v393;
                                                  v349 = *v390;
                                                }
                                                sub_1C4768E74(*(uint64_t **)(v567 + 88), (uint64_t *)v349);
                                                ++*(_QWORD *)(v567 + 96);
                                                if (v386)
                                                  v386 = sub_1C4FCE18C((uint64_t)v386);
                                                else
                                                  v386 = 0;
                                                v394 = (void **)v347[1];
                                                if (v394)
                                                {
                                                  do
                                                  {
                                                    v350 = (void ***)v394;
                                                    v394 = (void **)*v394;
                                                  }
                                                  while (v394);
                                                }
                                                else
                                                {
                                                  do
                                                  {
                                                    v350 = (void ***)v347[2];
                                                    v30 = *v350 == v347;
                                                    v347 = (void **)v350;
                                                  }
                                                  while (!v30);
                                                }
                                                if (!v387)
                                                  break;
                                                v347 = (void **)v350;
                                                v349 = (uint64_t)v387;
                                              }
                                              while (v350 != &v600);
                                            }
                                            sub_1C47655E8(v388, v387);
                                            if (v386)
                                            {
                                              do
                                              {
                                                v395 = v386;
                                                v386 = (_QWORD *)v386[2];
                                              }
                                              while (v386);
                                              sub_1C47655E8((uint64_t)v561, v395);
                                            }
                                          }
                                          else
                                          {
                                            v350 = (void ***)v347;
                                          }
                                          v9 = (unint64_t **)v568;
                                          v63 = v569;
                                          v346 = v542;
                                          if (v350 != &v600)
                                          {
                                            do
                                            {
                                              v351 = *((_DWORD *)v350 + 7);
                                              v352 = (uint64_t *)operator new(0x20uLL);
                                              v353 = v352;
                                              *((_DWORD *)v352 + 7) = v351;
                                              v354 = (uint64_t **)v573;
                                              v355 = *v573;
                                              v356 = (uint64_t **)v573;
                                              if (*v573)
                                              {
                                                do
                                                {
                                                  while (1)
                                                  {
                                                    v356 = (uint64_t **)v355;
                                                    if (*(_DWORD *)(v355 + 28) <= v351)
                                                      break;
                                                    v355 = *(_QWORD *)v355;
                                                    v354 = v356;
                                                    if (!*v356)
                                                      goto LABEL_496;
                                                  }
                                                  v355 = *(_QWORD *)(v355 + 8);
                                                }
                                                while (v355);
                                                v354 = v356 + 1;
                                              }
LABEL_496:
                                              *v352 = 0;
                                              v352[1] = 0;
                                              v352[2] = (uint64_t)v356;
                                              *v354 = v352;
                                              v357 = (uint64_t *)**v561;
                                              if (v357)
                                              {
                                                *v561 = v357;
                                                v353 = *v354;
                                              }
                                              sub_1C4768E74(*(uint64_t **)(v567 + 88), v353);
                                              ++*(_QWORD *)(v567 + 96);
                                              v358 = v350[1];
                                              if (v358)
                                              {
                                                do
                                                {
                                                  v359 = v358;
                                                  v358 = (void **)*v358;
                                                }
                                                while (v358);
                                              }
                                              else
                                              {
                                                do
                                                {
                                                  v359 = v350[2];
                                                  v30 = *v359 == v350;
                                                  v350 = (void ***)v359;
                                                }
                                                while (!v30);
                                              }
                                              v350 = (void ***)v359;
                                            }
                                            while (v359 != (void **)&v600);
                                          }
                                        }
                                        llvm::LiveRegMatrix::unassign(*(llvm::LiveRegMatrix **)(v63 + 288), (const llvm::LiveInterval *)v9);
                                        if ((_DWORD)v587)
                                        {
                                          v372 = (int *)v586;
                                          v373 = 4 * v587;
                                          do
                                          {
                                            v374 = *(_QWORD *)(v63 + 280);
                                            if ((*v372 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v374 + 416)
                                              || (v375 = *(llvm::LiveInterval **)(*(_QWORD *)(v374 + 408)
                                                                                + 8 * (*v372 & 0x7FFFFFFF))) == 0)
                                            {
                                              v375 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(v63 + 280), *v372);
                                              v380 = *(_QWORD *)(v374 + 304);
                                              v381 = *(_QWORD *)(v374 + 248);
                                              *(_QWORD *)v380 = v381;
                                              *(_QWORD *)(v380 + 8) = *(_QWORD *)(v381 + 40);
                                              *(_OWORD *)(v380 + 16) = *(_OWORD *)(v374 + 288);
                                              *(_QWORD *)(v380 + 32) = v374 + 312;
                                              llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v380);
                                              *(_DWORD *)(v380 + 184) = 0;
                                              v382 = *(_QWORD *)(v374 + 256);
                                              v30 = *(_BYTE *)(v382 + 16) == 0;
                                              v383 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v382 + 24)
                                                                                     + 16
                                                                                     * (*((_DWORD *)v375 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                                                        + 34);
                                              v385 = !v30 && v383 != 0;
                                              llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v374 + 304), v375, v385);
                                              llvm::LiveIntervals::computeDeadValues(v374, (uint64_t)v375, 0);
                                            }
                                            v376 = sub_1C477672C((uint64_t)&v609, (uint64_t)v375);
                                            if ((llvm::Timer *)v610 == v609)
                                              v377 = (uint64_t *)((char *)&v611 + 4);
                                            else
                                              v377 = &v611;
                                            v9 = (unint64_t **)v568;
                                            if (v376 == (_QWORD *)(v610 + 8 * *(unsigned int *)v377))
                                            {
                                              v378 = *v372;
                                              v379 = *(unsigned int *)(v346 + 8);
                                              if (v379 >= *(unsigned int *)(v346 + 12))
                                              {
                                                llvm::SmallVectorBase<unsigned int>::grow_pod(v346, v555, v379 + 1, 4);
                                                v379 = *(unsigned int *)(v346 + 8);
                                              }
                                              *(_DWORD *)(*(_QWORD *)v346 + 4 * v379) = v378;
                                              ++*(_DWORD *)(v346 + 8);
                                              v63 = v569;
                                            }
                                            ++v372;
                                            v373 -= 4;
                                          }
                                          while (v373);
                                        }
                                        v360 = a5[2];
                                        if (v360 > v563)
                                        {
                                          v361 = 16 * v360 - 16;
                                          do
                                          {
                                            v362 = *(const llvm::LiveInterval **)(*(_QWORD *)a5 + v361);
                                            if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v63 + 272) + 280)
                                                           + 4 * (*((_DWORD *)v362 + 28) & 0x7FFFFFFF)))
                                              llvm::LiveRegMatrix::unassign(*(llvm::LiveRegMatrix **)(v63 + 288), v362);
                                            --v360;
                                            v361 -= 16;
                                          }
                                          while (v360 > v563);
                                          LODWORD(v360) = a5[2];
                                        }
                                        v363 = v63;
                                        v364 = 16 * v563;
                                        v365 = v563;
                                        if ((_DWORD)v563 != (_DWORD)v360)
                                        {
                                          do
                                          {
                                            llvm::LiveRegMatrix::assign(*(_QWORD **)(v363 + 288), *(llvm::LiveInterval **)(*(_QWORD *)a5 + v364), *(unsigned int *)(*(_QWORD *)a5 + v364 + 8));
                                            ++v365;
                                            v364 += 16;
                                          }
                                          while (v365 != a5[2]);
                                        }
                                        sub_1C620D330(a5, v563);
                                        v366 = 0;
                                        v63 = v363;
LABEL_520:
                                        sub_1C47655E8((uint64_t)&v599, v600);
                                        v256 = v571;
                                        if (v589 != &v591)
                                          free(v589);
                                        if (__p)
                                          operator delete(__p);
                                        if ((v366 & 1) != 0)
                                          goto LABEL_569;
                                        goto LABEL_428;
                                      }
                                      goto LABEL_368;
                                    }
                                    llvm::LiveIntervalUnion::Query::collectInterferingVRegs((llvm::LiveIntervalUnion::Query *)v293, 0xFFFFFFFF);
                                    v299 = *(_DWORD *)(v293 + 120);
                                    if (!v299)
                                      goto LABEL_413;
LABEL_379:
                                    v301 = *(_QWORD *)(v293 + 112);
                                    v302 = v301 + 8 * v299;
                                    while (2)
                                    {
                                      v304 = *(_QWORD *)(v302 - 8);
                                      v302 -= 8;
                                      v303 = v304;
                                      v305 = *(unsigned int *)(v304 + 112);
                                      if (*(_DWORD *)(*v566 + 8 * (v305 & 0x7FFFFFFF)) == 6)
                                      {
                                        v306 = *(_QWORD *)(v63 + 264);
                                        v307 = *(_QWORD *)(v306 + 24);
                                        if ((*(_QWORD *)(v307 + 16 * (v305 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == v284)
                                        {
                                          v313 = v568[28];
                                          if ((v313 & 0x80000000) != 0)
                                            v314 = (int **)(v307 + 16 * (v313 & 0x7FFFFFFF) + 8);
                                          else
                                            v314 = (int **)(*(_QWORD *)(v306 + 272) + 8 * v313);
                                          v315 = *v314;
                                          if (!v315)
                                            goto LABEL_427;
                                          v316 = *v315;
                                          if ((*v315 & 0x1000000) != 0)
                                            goto LABEL_403;
                                          do
                                          {
                                            v315 = (int *)*((_QWORD *)v315 + 3);
                                            if (!v315)
                                              goto LABEL_427;
                                            v316 = *v315;
                                            if ((*v315 & 0x1000000) == 0)
                                              goto LABEL_427;
LABEL_403:
                                            ;
                                          }
                                          while ((v316 & 0xF00000) == 0);
                                          if ((v305 & 0x80000000) != 0)
                                            v317 = (int **)(v307 + 16 * (v305 & 0x7FFFFFFF) + 8);
                                          else
                                            v317 = (int **)(*(_QWORD *)(v306 + 272) + 8 * v305);
                                          v318 = *v317;
                                          if (v318)
                                          {
                                            v319 = *v318;
                                            if ((*v318 & 0x1000000) != 0)
                                              goto LABEL_411;
                                            while (1)
                                            {
                                              v318 = (int *)*((_QWORD *)v318 + 3);
                                              if (!v318)
                                                break;
                                              v319 = *v318;
                                              if ((*v318 & 0x1000000) == 0)
                                                break;
LABEL_411:
                                              if ((v319 & 0xF00000) != 0)
                                                goto LABEL_427;
                                            }
                                          }
                                        }
                                      }
                                      if (*(_QWORD *)(v567 + 96))
                                      {
                                        v308 = v573;
                                        while (1)
                                        {
                                          v308 = (uint64_t *)*v308;
                                          if (!v308)
                                            break;
                                          v309 = *((_DWORD *)v308 + 7);
                                          if (v305 >= v309)
                                          {
                                            if (v309 >= v305)
                                              goto LABEL_427;
                                            ++v308;
                                          }
                                        }
                                      }
                                      else
                                      {
                                        v310 = *(unsigned int *)(v567 + 8);
                                        if ((_DWORD)v310)
                                        {
                                          v311 = *(_DWORD **)v567;
                                          v312 = 4 * v310;
                                          while (*v311 != (_DWORD)v305)
                                          {
                                            ++v311;
                                            v312 -= 4;
                                            if (!v312)
                                              goto LABEL_396;
                                          }
                                          if (v312)
                                            goto LABEL_427;
                                        }
                                      }
LABEL_396:
                                      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v609, v303);
                                      if (v302 == v301)
                                        goto LABEL_413;
                                      continue;
                                    }
                                  }
                                }
                                else
                                {
                                  *(_QWORD *)v293 = v295;
                                  v296 = (_BYTE *)(v293 + 161);
                                  v297 = v292 + 176 * v291;
                                  *(_QWORD *)(v297 + 8) = v568;
                                  *(_DWORD *)(v297 + 120) = 0;
                                  *(_WORD *)(v297 + 160) = 0;
                                  *(_DWORD *)(v297 + 164) = *v295;
                                  *(_DWORD *)(v293 + 168) = v294;
                                  v298 = dword_1ED7FE5F8;
                                }
                                break;
                              }
                              llvm::LiveIntervalUnion::Query::collectInterferingVRegs((llvm::LiveIntervalUnion::Query *)v293, v298);
                              v299 = *(_DWORD *)(v293 + 120);
                              v298 = dword_1ED7FE5F8;
                              goto LABEL_371;
                            }
                            v453 = *(_DWORD *)(v63 + 1328);
                            if (v453)
                            {
                              v454 = *((_DWORD *)v9 + 28);
                              v455 = *(_QWORD *)(v63 + 1312);
                              v456 = v453 - 1;
                              v457 = v456 & (37 * v454);
                              v458 = (int *)(v455 + 12 * v457);
                              v459 = *v458;
                              if (*v458 == v454)
                              {
LABEL_673:
                                v6 = 0;
                                *v458 = -2;
                                *(int32x2_t *)(v63 + 1320) = vadd_s32(*(int32x2_t *)(v63 + 1320), (int32x2_t)0x1FFFFFFFFLL);
                                goto LABEL_697;
                              }
                              v460 = 1;
                              while (v459 != -1)
                              {
                                v461 = v457 + v460++;
                                v457 = v461 & v456;
                                v458 = (int *)(v455 + 12 * v457);
                                v459 = *v458;
                                if (*v458 == v454)
                                  goto LABEL_673;
                              }
                            }
LABEL_696:
                            v6 = 0;
                            goto LABEL_697;
                          }
                          continue;
                        }
                        goto LABEL_177;
                      }
                    }
                    else
                    {
                      v165 = 0;
                    }
                    break;
                  }
                  v170 = &v166[3 * v165];
                  goto LABEL_188;
                }
              }
              else
              {
                v68 = (uint64_t *)(v63 + 1336);
              }
              llvm::NamedRegionTimer::NamedRegionTimer(&v586, "global_split", 0xCuLL, "Global Splitting", 0x10uLL, "regalloc", 8uLL, v13, "Register Allocation", 0x13uLL, llvm::TimePassesIsEnabled);
              v554 = v68;
              v237 = *v68;
              *(_DWORD *)(v237 + 208) = 0;
              *(_DWORD *)(v237 + 288) = 0;
              *(_DWORD *)(v237 + 688) = 0;
              *(_DWORD *)(v237 + 632) = 0;
              *(_QWORD *)(v237 + 40) = v9;
              sub_1C528CED8(v237);
              v238 = *((_DWORD *)v9 + 28);
              if (*(int *)(*v566 + 8 * (v238 & 0x7FFFFFFF)) > 2)
              {
LABEL_631:
                v546 = v62;
                v6 = v238;
                v426 = (unsigned __int16 ***)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v63 + 264) + 24)
                                                        + 16 * (v238 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
                v427 = v63;
                v428 = *((unsigned __int16 *)*v426 + 12);
                v429 = *(_QWORD *)(v427 + 296);
                if (*(_DWORD *)(v427 + 304) != *(_DWORD *)(v429 + 24 * *((unsigned __int16 *)*v426 + 12)))
                  llvm::RegisterClassInfo::compute(v11, v426);
                v430 = *(unsigned __int8 *)(v429 + 24 * v428 + 8);
                v431 = *(_QWORD *)(v569 + 864);
                v589 = (uint64_t *)&off_1E8143478;
                v590 = (uint64_t)v9;
                v433 = *(_QWORD *)(v431 + 40);
                v591 = a3;
                v592 = v433;
                v593 = vextq_s8(*(int8x16_t *)(v569 + 272), *(int8x16_t *)(v569 + 272), 8uLL);
                v594 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v431 + 16) + 104))(*(_QWORD *)(v431 + 16));
                v595 = v569 + 856;
                v63 = v569;
                v596 = *(_DWORD *)(a3 + 8);
                v597 = 0;
                v598 = v569 + 568;
                v599 = (void **)v603;
                v600 = (void **)v603;
                v601 = 4;
                v602 = 0;
                v604 = v608;
                v605 = v608;
                v606 = 4;
                v607 = 0;
                *(_QWORD *)(v433 + 8) = &v589;
                sub_1C528D84C(*(_QWORD *)(v569 + 1344), (uint64_t)&v589, dword_1ED7FE9C0);
                v434 = *(_QWORD *)(v569 + 1336);
                v435 = *(unsigned int *)(v434 + 288);
                if ((_DWORD)v435)
                {
                  v436 = *(_QWORD *)(v434 + 280);
                  v437 = 40 * v435;
                  do
                  {
                    if (sub_1C5293EE4((_QWORD *)*v554, v436, v430 != 0))
                      sub_1C5293F4C(*(_QWORD *)(v569 + 1344), v436);
                    v436 += 40;
                    v437 -= 40;
                  }
                  while (v437);
                }
                a4 = v567;
                if (*(_DWORD *)(v591 + 8) != v596)
                {
                  v544 = a3;
                  v438 = (llvm::Timer *)&v611;
                  v609 = (llvm::Timer *)&v611;
                  v610 = 0x800000000;
                  sub_1C528FF04(*(_QWORD *)(v569 + 1344), (unsigned int *)&v609);
                  sub_1C50F9BC0(*(_QWORD *)(v569 + 1184), v6, (int *)(*(_QWORD *)v591 + 4 * v596), *(unsigned int *)(v591 + 8) - (unint64_t)v596);
                  v439 = *(_DWORD *)(v591 + 8);
                  v440 = v439 - v596;
                  v441 = v566;
                  if (v439 != v596)
                  {
                    v479 = 0;
                    v480 = v569 + 1264;
                    do
                    {
                      v481 = *(_QWORD *)(v569 + 280);
                      v482 = *(_DWORD *)(*(_QWORD *)v591 + 4 * (v596 + v479));
                      if ((v482 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v481 + 416)
                        || (v6 = *(_QWORD *)(*(_QWORD *)(v481 + 408) + 8 * (v482 & 0x7FFFFFFF))) == 0)
                      {
                        v504 = v480;
                        v6 = sub_1C4851220(*(_QWORD *)(v569 + 280), v482);
                        v505 = *(_QWORD *)(v481 + 304);
                        v506 = *(_QWORD *)(v481 + 248);
                        *(_QWORD *)v505 = v506;
                        *(_QWORD *)(v505 + 8) = *(_QWORD *)(v506 + 40);
                        *(_OWORD *)(v505 + 16) = *(_OWORD *)(v481 + 288);
                        *(_QWORD *)(v505 + 32) = v481 + 312;
                        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v505);
                        *(_DWORD *)(v505 + 184) = 0;
                        v507 = *(_QWORD *)(v481 + 256);
                        v30 = *(_BYTE *)(v507 + 16) == 0;
                        v508 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v507 + 24)
                                                               + 16 * (*(_DWORD *)(v6 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                                  + 34);
                        v510 = !v30 && v508 != 0;
                        llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v481 + 304), (llvm::LiveInterval *)v6, v510);
                        llvm::LiveIntervals::computeDeadValues(v481, v6, 0);
                        v480 = v504;
                        v441 = v566;
                      }
                      v483 = *(_DWORD *)(v6 + 112);
                      v484 = v483 & 0x7FFFFFFF;
                      v485 = *(unsigned int *)(v569 + 1256);
                      if ((v483 & 0x7FFFFFFFu) >= v485)
                      {
                        v486 = *(_QWORD *)(v569 + 1264);
                        v487 = *(unsigned int *)(v569 + 1256);
                        v488 = *(_DWORD *)(v569 + 1256);
                        if (v484 >= *(_DWORD *)(v569 + 1260))
                        {
                          v574 = v438;
                          v500 = v432;
                          v501 = v480;
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v441, v480, v484 + 1, 8);
                          v480 = v501;
                          v432 = v500;
                          v438 = v574;
                          v441 = v566;
                          v487 = *(unsigned int *)(v569 + 1256);
                          v488 = *(_DWORD *)(v569 + 1256);
                        }
                        v489 = v484 + 1 - v485;
                        if (v489)
                        {
                          v490 = (_QWORD *)(*v441 + 8 * v487);
                          v491 = ~v484 + v485;
                          do
                          {
                            *v490++ = v486;
                            v174 = __CFADD__(v491++, 1);
                          }
                          while (!v174);
                          v488 = *(_DWORD *)(v569 + 1256);
                        }
                        LODWORD(v485) = v488 + v489;
                        *(_DWORD *)(v569 + 1256) = v488 + v489;
                        v9 = (unint64_t **)v568;
                      }
                      v492 = *v441;
                      if (!*(_DWORD *)(*v441 + 8 * v484) && !*((_DWORD *)v609 + v479))
                      {
                        v493 = *(_DWORD *)(v6 + 112);
                        v6 = v493 & 0x7FFFFFFF;
                        if ((v493 & 0x7FFFFFFFu) >= v485)
                        {
                          v494 = *(_QWORD *)(v569 + 1264);
                          v495 = v485;
                          v496 = v485;
                          if (v6 >= *(_DWORD *)(v569 + 1260))
                          {
                            v575 = v438;
                            v502 = v432;
                            v503 = v480;
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v566, v480, v6 + 1, 8);
                            v480 = v503;
                            v432 = v502;
                            v438 = v575;
                            v495 = *(unsigned int *)(v569 + 1256);
                            v492 = *(_QWORD *)(v569 + 1248);
                            v496 = *(_DWORD *)(v569 + 1256);
                          }
                          v497 = v6 + 1 - v485;
                          if (v497)
                          {
                            v498 = (_QWORD *)(v492 + 8 * v495);
                            v499 = ~v6 + v485;
                            do
                            {
                              *v498++ = v494;
                              v174 = __CFADD__(v499++, 1);
                            }
                            while (!v174);
                            v496 = *(_DWORD *)(v569 + 1256);
                            v492 = *(_QWORD *)(v569 + 1248);
                            v9 = (unint64_t **)v568;
                          }
                          else
                          {
                            v9 = (unint64_t **)v568;
                          }
                          v441 = v566;
                          *(_DWORD *)(v569 + 1256) = v496 + v497;
                        }
                        *(_DWORD *)(v492 + 8 * v6) = 4;
                      }
                      ++v479;
                    }
                    while (v479 != v440);
                  }
                  if (llvm::RegAllocBase::VerifyEnabled)
                    llvm::MachineFunction::verify(*(llvm::MachineFunction **)(v569 + 864), (llvm::Pass *)v569, "After splitting live range around basic blocks", 1);
                  a3 = v544;
                  a4 = v567;
                  if (v609 != v438)
                    free(v609);
                }
                v589 = v432 + 2;
                *(_QWORD *)(v592 + 8) = 0;
                if (v605 != v604)
                  free(v605);
                v62 = v546;
                if (v600 != v599)
                  free(v600);
                v57 = v566;
              }
              else
              {
                if ((*(unsigned int (**)(_QWORD, _QWORD, unint64_t **))(**(_QWORD **)(v63 + 880)
                                                                                         + 528))(*(_QWORD *)(v63 + 880), *(_QWORD *)(v63 + 864), v9))
                {
                  LODWORD(__p) = 0;
                  v239 = sub_1C52337F4(v63);
                  if (*(_DWORD *)(*(_QWORD *)(v63 + 1336) + 696))
                  {
                    v240 = v62;
                    v241 = a3;
                    v242 = *(_QWORD *)(v63 + 24520);
                    *(_QWORD *)v242 = 0;
                    *(_QWORD *)(v242 + 16) = 0;
                    v243 = *(_QWORD *)(v242 + 8);
                    if (v243)
                      --*(_DWORD *)(v243 + 8);
                    *(_QWORD *)(v242 + 8) = 0;
                    v6 = v242 + 24;
                    *(_DWORD *)(v242 + 104) = 0;
                    v244 = *(_QWORD *)(v63 + 1176);
                    *(_DWORD *)(v244 + 352) = 0;
                    *(_DWORD *)(v244 + 488) = 0;
                    *(_QWORD *)(v244 + 288) = v242 + 24;
                    *(_DWORD *)(v242 + 32) = 0;
                    v245 = *(_DWORD *)(*(_QWORD *)(v244 + 256) + 304);
                    *(_DWORD *)(v242 + 88) = v245;
                    if ((v245 + 63) < 0x40)
                    {
                      v249 = 0;
                    }
                    else
                    {
                      v246 = (v245 + 63) >> 6;
                      if (v246 > *(_DWORD *)(v242 + 36))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod(v242 + 24, v242 + 40, v246, 8);
                        v247 = *(unsigned int *)(v242 + 32);
                        v245 = *(_DWORD *)(v242 + 88);
                        v248 = *(_DWORD *)(v242 + 32);
                      }
                      else
                      {
                        v247 = 0;
                        v248 = 0;
                      }
                      bzero((void *)(*(_QWORD *)(v242 + 24) + 8 * v247), 8 * v246);
                      v249 = (v248 + v246);
                      *(_DWORD *)(v242 + 32) = v249;
                      v63 = v569;
                    }
                    if ((v245 & 0x3F) != 0)
                      *(_QWORD *)(*(_QWORD *)v6 + 8 * v249 - 8) &= ~(-1 << (v245 & 0x3F));
                    v250 = *(uint64_t **)(v242 + 8);
                    v589 = v250;
                    v590 = 0;
                    v62 = v240;
                    if (v250)
                      ++*((_DWORD *)v250 + 2);
                    v251 = sub_1C5232B80(v63, (uint64_t)&v589, (uint64_t *)&v609);
                    if (v589)
                      --*((_DWORD *)v589 + 2);
                    if (!v251 || !sub_1C5233078((_QWORD *)v63, v242))
                      goto LABEL_624;
                    v252 = *(_QWORD *)(v63 + 1176);
                    v6 = *(_QWORD *)(v252 + 288);
                    for (m = sub_1C476B7EC(v6); m != -1; m = sub_1C476BA0C((_QWORD *)v6, m + 1, *(_DWORD *)(v6 + 64), 1u))
                    {
                      if (*(int *)(*(_QWORD *)(v252 + 280) + 112 * m + 16) <= 0)
                        *(_QWORD *)(**(_QWORD **)(v252 + 288) + (((unint64_t)m >> 3) & 0x1FFFFFF8)) &= ~(1 << m);
                    }
                    *(_QWORD *)(v252 + 288) = 0;
                    v422 = *(unsigned int *)(v242 + 32);
                    v62 = v240;
                    if ((_DWORD)v422)
                    {
                      v423 = *(_QWORD **)(v242 + 24);
                      v424 = 8 * v422;
                      while (!*v423)
                      {
                        ++v423;
                        v424 -= 8;
                        if (!v424)
                          goto LABEL_624;
                      }
                      v396 = 1;
                      LODWORD(__p) = 1;
                      v239 = -1;
                    }
                    else
                    {
LABEL_624:
                      v396 = 0;
                    }
                    a3 = v241;
                    v11 = v552;
                  }
                  else
                  {
                    v396 = 0;
                  }
                  v589 = (uint64_t *)v239;
                  v425 = sub_1C5233878(v63, (unsigned __int16 **)&v578, (unint64_t *)&v589, (unsigned int *)&__p, 0);
                  if ((v396 & 1) != 0 || v425 != -1)
                    sub_1C5234258((int8x16_t *)v63, (uint64_t)v9, v425, v396, a3);
                }
                v57 = v566;
                if (!*(_DWORD *)(a3 + 8))
                {
                  v238 = *((_DWORD *)v9 + 28);
                  goto LABEL_631;
                }
              }
              if (v586)
              {
                llvm::Timer::stopTimer(v586);
                v57 = v566;
              }
              goto LABEL_651;
            }
            v14.n128_u32[0] = *((_DWORD *)v9 + 29);
            v254 = v61 > 5 || v14.n128_f32[0] == INFINITY;
            v63 = (uint64_t)v60;
            if (v254)
              goto LABEL_320;
LABEL_653:
            if (!byte_1ED7FE778
              && (v442 = (*(uint64_t (**)(_QWORD, _QWORD, unint64_t **, __n128))(**(_QWORD **)(v63 + 880)
                                                                                                + 544))(*(_QWORD *)(v63 + 880), *(_QWORD *)(v63 + 864), v9, v14), v57 = v566, !v442)|| (v217 = *((_DWORD *)v9 + 28), v443 = v217 & 0x7FFFFFFF, v444 = *v57, *(int *)(*v57 + 8 * v443) > 4))
            {
              llvm::NamedRegionTimer::NamedRegionTimer(&v609, "spill", 5uLL, "Spiller", 7uLL, "regalloc", 8uLL, v13, "Register Allocation", 0x13uLL, llvm::TimePassesIsEnabled);
              v462 = *(_QWORD *)(v63 + 864);
              v589 = (uint64_t *)&off_1E8143478;
              v590 = (uint64_t)v9;
              v463 = *(_QWORD *)(v462 + 40);
              v591 = a3;
              v592 = v463;
              v593 = vextq_s8(*(int8x16_t *)(v569 + 272), *(int8x16_t *)(v569 + 272), 8uLL);
              v594 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v462 + 16) + 104))(*(_QWORD *)(v462 + 16));
              v595 = v569 + 856;
              v596 = *(_DWORD *)(a3 + 8);
              v597 = 0;
              v598 = v569 + 568;
              v599 = (void **)v603;
              v600 = (void **)v603;
              v601 = 4;
              v602 = 0;
              v604 = v608;
              v605 = v608;
              v606 = 4;
              v607 = 0;
              *(_QWORD *)(v463 + 8) = &v589;
              v464 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v569 + 176))(v569);
              (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v464 + 24))(v464, &v589);
              v465 = v566;
              v466 = *(unsigned int *)(a3 + 8);
              if ((_DWORD)v466)
              {
                v467 = *(_DWORD **)a3;
                v468 = *(_QWORD *)a3 + 4 * v466;
                v469 = *(_DWORD *)(v569 + 1256);
                do
                {
                  v470 = *v467 & 0x7FFFFFFF;
                  if ((*v467 & 0x7FFFFFFFu) >= v469)
                  {
                    v471 = *(_QWORD *)(v569 + 1264);
                    v472 = v469;
                    v473 = v469;
                    if (v470 >= *(_DWORD *)(v569 + 1260))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v465, v569 + 1264, v470 + 1, 8);
                      v465 = v566;
                      v472 = *(unsigned int *)(v569 + 1256);
                      v473 = *(_DWORD *)(v569 + 1256);
                    }
                    v474 = v470 + 1 - v469;
                    if (v474)
                    {
                      v475 = (_QWORD *)(*v465 + 8 * v472);
                      v476 = ~v470 + v469;
                      do
                      {
                        *v475++ = v471;
                        v174 = __CFADD__(v476++, 1);
                      }
                      while (!v174);
                      v473 = *(_DWORD *)(v569 + 1256);
                    }
                    v469 = v473 + v474;
                    *(_DWORD *)(v569 + 1256) = v473 + v474;
                  }
                  v477 = (_DWORD *)(*v465 + 8 * v470);
                  if (!*v477)
                    *v477 = 6;
                  ++v467;
                }
                while (v467 != (_DWORD *)v468);
              }
              sub_1C50F9BC0(*(_QWORD *)(v569 + 1184), v568[28], (int *)(*(_QWORD *)v591 + 4 * v596), *(unsigned int *)(v591 + 8) - (unint64_t)v596);
              if (llvm::RegAllocBase::VerifyEnabled)
                llvm::MachineFunction::verify(*(llvm::MachineFunction **)(v569 + 864), (llvm::Pass *)v569, "After spilling", 1);
              v589 = (uint64_t *)&off_1E8143478;
              *(_QWORD *)(v592 + 8) = 0;
              if (v605 != v604)
                free(v605);
              if (v600 != v599)
                free(v600);
              if (v609)
                llvm::Timer::stopTimer(v609);
              goto LABEL_696;
            }
            v445 = *(unsigned int *)(v63 + 1256);
            if (v443 >= v445)
            {
              v446 = *(_QWORD *)(v63 + 1264);
              v447 = v443 + 1 - v445;
              if (v443 >= *(_DWORD *)(v63 + 1260))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v57, v63 + 1264, v443 + 1, 8);
                v448 = *(unsigned int *)(v63 + 1256);
                v444 = *(_QWORD *)(v63 + 1248);
                v449 = *(_DWORD *)(v63 + 1256);
                if (v447)
                  goto LABEL_659;
              }
              else
              {
                v448 = *(unsigned int *)(v63 + 1256);
                v449 = *(_DWORD *)(v63 + 1256);
                if (v447)
                {
LABEL_659:
                  v450 = (_QWORD *)(v444 + 8 * v448);
                  v451 = ~v443 + v445;
                  do
                  {
                    *v450++ = v446;
                    v174 = __CFADD__(v451++, 1);
                  }
                  while (!v174);
                  v449 = *(_DWORD *)(v63 + 1256);
                  v444 = *(_QWORD *)(v63 + 1248);
                }
              }
              *(_DWORD *)(v63 + 1256) = v449 + v447;
              v217 = *((_DWORD *)v9 + 28);
            }
            *(_DWORD *)(v444 + 8 * v443) = 5;
            goto LABEL_665;
          }
        }
      }
    }
  }
LABEL_697:
  if (v578 != &v580)
    free(v578);
  return v6;
}

uint64_t sub_1C52384F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::LLVMContext *v4;
  uint64_t v5;
  int v7;
  const char *v8;
  const char *v9;
  __int16 v10;
  void *v11[2];
  _BYTE v12[128];
  void *v13[2];
  _BYTE v14[64];
  _QWORD **v15;
  _QWORD *v16[3];

  v16[2] = *(_QWORD **)MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 1304) = 0;
  v4 = ****(llvm::LLVMContext *****)(a1 + 864);
  v13[0] = v14;
  v13[1] = (void *)0x1000000000;
  v16[0] = 0;
  v16[1] = 0;
  v15 = v16;
  v11[0] = v12;
  v11[1] = (void *)0x800000000;
  v5 = sub_1C5234EA4(a1, a2, a3, (uint64_t)v13, (unsigned int *)v11, 0);
  if ((_DWORD)v5 == -1 && *(_BYTE *)(a1 + 1304))
  {
    v7 = *(_BYTE *)(a1 + 1304) & 3;
    switch(v7)
    {
      case 3:
        v8 = "register allocation failed: maximum interference and depth for recoloring reached. Use -fexhaustive-registe"
             "r-search to skip cutoffs";
        break;
      case 2:
        v8 = "register allocation failed: maximum interference for recoloring reached. Use -fexhaustive-register-search to skip cutoffs";
        break;
      case 1:
        v8 = "register allocation failed: maximum depth for recoloring reached. Use -fexhaustive-register-search to skip cutoffs";
        break;
      default:
        goto LABEL_2;
    }
    v9 = v8;
    v10 = 259;
    llvm::LLVMContext::emitError(v4, (const llvm::Twine *)&v9);
  }
LABEL_2:
  if (v11[0] != v12)
    free(v11[0]);
  sub_1C47655E8((uint64_t)&v15, v16[0]);
  if (v13[0] != v14)
    free(v13[0]);
  return v5;
}

uint64_t sub_1C5238668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C52384F8(a1 - 248, a2, a3);
}

_QWORD *sub_1C5238670(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_1C523869C(a1 + 29296, &v3);
}

_QWORD *sub_1C523869C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *result;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *a2;
  v10 = 0;
  result = (_QWORD *)sub_1C523B340(a1, v4, &v10);
  if ((_DWORD)result)
  {
    *v10 = -8192;
    v6 = *(_DWORD *)(a1 + 4) + 1;
    *(_DWORD *)a1 -= 2;
    *(_DWORD *)(a1 + 4) = v6;
    result = *(_QWORD **)(a1 + 72);
    v7 = *(unsigned int *)(a1 + 80);
    v8 = &result[v7];
    if ((_DWORD)v7)
    {
      v9 = 8 * v7;
      while (*result != *a2)
      {
        ++result;
        v9 -= 8;
        if (!v9)
        {
          result = v8;
          break;
        }
      }
    }
    if (v8 != result + 1)
    {
      result = memmove(result, result + 1, (char *)v8 - (char *)(result + 1));
      LODWORD(v7) = *(_DWORD *)(a1 + 80);
    }
    *(_DWORD *)(a1 + 80) = v7 - 1;
  }
  return result;
}

_QWORD *sub_1C5238744(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return sub_1C523869C(a1 + 29048, &v3);
}

_QWORD *sub_1C5238770(_QWORD *result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;

  v3 = result[33];
  if ((a2 & 0x80000000) != 0)
    v4 = (uint64_t *)(*(_QWORD *)(v3 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  else
    v4 = (uint64_t *)(*(_QWORD *)(v3 + 272) + 8 * a2);
  v5 = *v4;
  if (!v5)
    return result;
  while ((*(_DWORD *)v5 & 0x80000000) != 0)
  {
    v5 = *(_QWORD *)(v5 + 24);
    if (!v5)
      return result;
  }
  v6 = a2;
  v7 = a3 + 16;
  v8 = *(_QWORD *)(v5 + 8);
LABEL_9:
  if (**(_WORD **)(v8 + 16) != 19)
    goto LABEL_24;
  v9 = *(_DWORD **)(v8 + 32);
  if ((*v9 & 0xFFF00) != 0)
    goto LABEL_24;
  if ((v9[8] & 0xFFF00) != 0)
    goto LABEL_24;
  v10 = v9[1];
  if (v10 == v6)
  {
    v10 = v9[9];
    if (v10 == v6)
      goto LABEL_24;
  }
  v11 = v10;
  if ((unint64_t)(v10 - 1) >= 0x3FFFFFFF)
    v11 = *(unsigned int *)(*(_QWORD *)(result[34] + 280) + 4 * (v10 & 0x7FFFFFFF));
  v12 = *(_QWORD *)(result[142] + 248);
  if (v12)
  {
    v13 = *(_DWORD *)(v12 + 176);
    if (v13)
    {
      v14 = *(_QWORD *)(v8 + 24);
      v15 = *(_QWORD *)(v12 + 160);
      v16 = v13 - 1;
      v17 = (v13 - 1) & ((v14 >> 4) ^ (v14 >> 9));
      v18 = *(_QWORD *)(v15 + 16 * v17);
      if (v18 == v14)
      {
LABEL_19:
        v19 = *(unsigned int *)(v15 + 16 * v17 + 8);
        if (v19 != 0xFFFFFFFFLL)
        {
          v20 = *(_QWORD *)(*(_QWORD *)(v12 + 8) + 24 * v19 + 16);
          goto LABEL_21;
        }
      }
      else
      {
        v24 = 1;
        while (v18 != -4096)
        {
          v25 = v17 + v24++;
          v17 = v25 & v16;
          v18 = *(_QWORD *)(v15 + 16 * v17);
          if (v18 == v14)
            goto LABEL_19;
        }
      }
    }
  }
  v20 = 0;
LABEL_21:
  v21 = *(unsigned int *)(a3 + 8);
  if (v21 >= *(unsigned int *)(a3 + 12))
  {
    v31 = result;
    v32 = v5;
    v33 = v7;
    v29 = v10;
    v30 = a3;
    v26 = v6;
    v27 = v11;
    v28 = v20;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v7, v21 + 1, 16);
    v11 = v27;
    v20 = v28;
    v10 = v29;
    a3 = v30;
    v6 = v26;
    v5 = v32;
    v7 = v33;
    result = v31;
    v21 = *(unsigned int *)(v30 + 8);
  }
  v22 = v10 | (v11 << 32);
  v23 = (_QWORD *)(*(_QWORD *)a3 + 16 * v21);
  *v23 = v20;
  v23[1] = v22;
  ++*(_DWORD *)(a3 + 8);
  v8 = *(_QWORD *)(v5 + 8);
LABEL_24:
  while (1)
  {
    v5 = *(_QWORD *)(v5 + 24);
    if (!v5)
      return result;
    if ((*(_DWORD *)v5 & 0x80000000) == 0 && *(_QWORD *)(v5 + 8) != v8)
    {
      v8 = *(_QWORD *)(v5 + 8);
      goto LABEL_9;
    }
  }
}

void sub_1C5238970(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string v20;
  void *v21;
  char v22;
  std::string v23;
  void *v24;
  char v25;
  std::string v26;
  void *v27;
  char v28;
  std::string v29;
  void *v30;
  char v31;
  std::string v32;
  void *v33;
  char v34;
  std::string v35;
  void *v36;
  char v37;
  std::string v38;
  void *v39;
  char v40;
  std::string v41;
  void *__p;
  char v43;
  std::string v44;
  void *v45;
  char v46;
  std::string v47;
  void *v48;
  char v49;
  std::string v50;
  void *v51;
  char v52;
  const char *v53;
  uint64_t v54;

  v4 = *(_DWORD *)(a1 + 12);
  if (v4)
  {
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v50, "NumSpills", 9uLL, v4);
    v9 = sub_1C47E3888(a2, (uint64_t)&v50);
    v53 = " spills ";
    v54 = 8;
    sub_1C53B17B4(v9 + 80, (const void **)&v53);
    if (v52 < 0)
      operator delete(v51);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v47, "TotalSpillsCost", 0xFuLL, *(float *)(a1 + 32));
    v10 = sub_1C47E3888(a2, (uint64_t)&v47);
    v53 = " total spills cost ";
    v54 = 19;
    sub_1C53B17B4(v10 + 80, (const void **)&v53);
    if (v49 < 0)
      operator delete(v48);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a1 + 16);
  if (v5)
  {
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v44, "NumFoldedSpills", 0xFuLL, v5);
    v11 = sub_1C47E3888(a2, (uint64_t)&v44);
    v53 = " folded spills ";
    v54 = 15;
    sub_1C53B17B4(v11 + 80, (const void **)&v53);
    if (v46 < 0)
      operator delete(v45);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v41, "TotalFoldedSpillsCost", 0x15uLL, *(float *)(a1 + 36));
    v12 = sub_1C47E3888(a2, (uint64_t)&v41);
    v53 = " total folded spills cost ";
    v54 = 26;
    sub_1C53B17B4(v12 + 80, (const void **)&v53);
    if (v43 < 0)
      operator delete(__p);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)a1)
  {
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v38, "NumReloads", 0xAuLL, *(_DWORD *)a1);
    v13 = sub_1C47E3888(a2, (uint64_t)&v38);
    v53 = " reloads ";
    v54 = 9;
    sub_1C53B17B4(v13 + 80, (const void **)&v53);
    if (v40 < 0)
      operator delete(v39);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v35, "TotalReloadsCost", 0x10uLL, *(float *)(a1 + 24));
    v14 = sub_1C47E3888(a2, (uint64_t)&v35);
    v53 = " total reloads cost ";
    v54 = 20;
    sub_1C53B17B4(v14 + 80, (const void **)&v53);
    if (v37 < 0)
      operator delete(v36);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
  }
  v6 = *(_DWORD *)(a1 + 4);
  if (v6)
  {
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v32, "NumFoldedReloads", 0x10uLL, v6);
    v15 = sub_1C47E3888(a2, (uint64_t)&v32);
    v53 = " folded reloads ";
    v54 = 16;
    sub_1C53B17B4(v15 + 80, (const void **)&v53);
    if (v34 < 0)
      operator delete(v33);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v29, "TotalFoldedReloadsCost", 0x16uLL, *(float *)(a1 + 28));
    v16 = sub_1C47E3888(a2, (uint64_t)&v29);
    v53 = " total folded reloads cost ";
    v54 = 27;
    sub_1C53B17B4(v16 + 80, (const void **)&v53);
    if (v31 < 0)
      operator delete(v30);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  v7 = *(_DWORD *)(a1 + 8);
  if (v7)
  {
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v26, "NumZeroCostFoldedReloads", 0x18uLL, v7);
    v17 = sub_1C47E3888(a2, (uint64_t)&v26);
    v53 = " zero cost folded reloads ";
    v54 = 26;
    sub_1C53B17B4(v17 + 80, (const void **)&v53);
    if (v28 < 0)
      operator delete(v27);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
  }
  v8 = *(_DWORD *)(a1 + 20);
  if (v8)
  {
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v23, "NumVRCopies", 0xBuLL, v8);
    v18 = sub_1C47E3888(a2, (uint64_t)&v23);
    v53 = " virtual registers copies ";
    v54 = 26;
    sub_1C53B17B4(v18 + 80, (const void **)&v53);
    if (v25 < 0)
      operator delete(v24);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v20, "TotalCopiesCost", 0xFuLL, *(float *)(a1 + 40));
    v19 = sub_1C47E3888(a2, (uint64_t)&v20);
    v53 = " total copies cost ";
    v54 = 19;
    sub_1C53B17B4(v19 + 80, (const void **)&v53);
    if (v22 < 0)
      operator delete(v21);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
  }
}

void sub_1C5238DF0(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD **v12;
  uint64_t v13;
  _QWORD **v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;
  BOOL v19;
  unint64_t v20;
  _BYTE *v21;
  _QWORD **v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _BYTE *v33;
  unsigned int *v34;
  _QWORD *v35;
  _QWORD *v36;
  int v37;
  int v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  float v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  float v50;
  int v51;
  int v52;
  _OWORD *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  unint64_t v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  void *v63;
  uint64_t v64;
  _BYTE v65[64];
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  _BYTE v71[64];
  _QWORD **v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD v77[4];

  v4 = a1;
  v77[2] = *MEMORY[0x1E0C80C00];
  *(_OWORD *)((char *)a1 + 28) = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  v5 = a3 + 48;
  v6 = *(_QWORD *)(a3 + 56);
  if (v6 != a3 + 48)
  {
    v7 = 0;
    v8 = 0;
    v57 = 0;
    v9 = 0;
    v10 = *(_QWORD *)(*(_QWORD *)(a2 + 864) + 56);
    v62 = 0;
    v60 = 0;
    while (1)
    {
      if (**(_WORD **)(v6 + 16) == 19)
      {
        v11 = *(_QWORD *)(v6 + 32);
        if (!*(_BYTE *)v11
          && !*(_BYTE *)(v11 + 32)
          && (*(_DWORD *)(v11 + 4) & 0x80000000) != 0
          && (*(_DWORD *)(v11 + 36) & 0x80000000) != 0)
        {
          *((_DWORD *)v4 + 5) = ++v7;
        }
      }
      else
      {
        v75 = v77;
        v76 = 0x200000000;
        if ((*(unsigned int (**)(_QWORD, uint64_t, int *))(**(_QWORD **)(a2 + 872) + 64))(*(_QWORD *)(a2 + 872), v6, &v62)&& *(_BYTE *)(*(_QWORD *)(v10 + 8) + 40 * (*(_DWORD *)(v10 + 32) + v62) + 18))
        {
          *(_DWORD *)v4 = ++HIDWORD(v60);
          goto LABEL_71;
        }
        if ((*(unsigned int (**)(_QWORD, uint64_t, int *))(**(_QWORD **)(a2 + 872) + 96))(*(_QWORD *)(a2 + 872), v6, &v62)&& *(_BYTE *)(*(_QWORD *)(v10 + 8) + 40 * (*(_DWORD *)(v10 + 32) + v62) + 18))
        {
          *((_DWORD *)v4 + 3) = ++v9;
          goto LABEL_71;
        }
        if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD **))(**(_QWORD **)(a2 + 872) + 88))(*(_QWORD *)(a2 + 872), v6, &v75)&& (_DWORD)v76)
        {
          v12 = (_QWORD **)v75;
          v13 = 8 * v76;
          do
          {
            if (*(_BYTE *)(*(_QWORD *)(v10 + 8)
                          + 40
                          * (*(_DWORD *)((**v12 & ((uint64_t)(**v12 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)
                                                     + 0x10)
                                         + *(_DWORD *)(v10 + 32))
                          + 18))
            {
              v16 = **(unsigned __int16 **)(v6 + 16);
              v17 = v16 > 0x1F;
              v18 = (1 << v16) & 0x8A000000;
              v19 = v17 || v18 == 0;
              if (v19)
              {
                LODWORD(v60) = v76 + v60;
                *((_DWORD *)v4 + 1) = v60;
                goto LABEL_71;
              }
              v54 = v9;
              v55 = v8;
              v56 = v7;
              v20 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 872) + 496))(*(_QWORD *)(a2 + 872), v6);
              v21 = v71;
              v69 = v71;
              v70 = 0x1000000000;
              v22 = &v73;
              v73 = 0;
              v74 = 0;
              v72 = &v73;
              v63 = v65;
              v64 = 0x1000000000;
              v67 = 0;
              v68 = 0;
              v66 = &v67;
              v23 = *(unsigned int *)(v6 + 40);
              if ((_DWORD)v23)
              {
                v53 = v4;
                v24 = 0;
                v25 = 0;
                v59 = HIDWORD(v20);
                v26 = v20;
                do
                {
                  v27 = *(_QWORD *)(v6 + 32);
                  if (*(_BYTE *)(v27 + v24) == 5)
                  {
                    v28 = *(_DWORD *)(v27 + v24 + 16);
                    if (*(_BYTE *)(*(_QWORD *)(v10 + 8) + 40 * (*(_DWORD *)(v10 + 32) + v28) + 18))
                    {
                      if (v25 < v26 || v25 >= v59)
                      {
                        v61 = v28;
                        v29 = &v63;
                      }
                      else
                      {
                        v61 = v28;
                        v29 = &v69;
                      }
                      sub_1C48302EC((uint64_t)v29, &v61);
                    }
                  }
                  ++v25;
                  v24 += 32;
                }
                while (v23 != v25);
                v21 = v69;
                v30 = v74;
                v22 = v72;
                v31 = v70;
                v4 = v53;
              }
              else
              {
                v31 = 0;
                v30 = 0;
              }
              if (v30)
                v32 = v22;
              else
                v32 = v21;
              v33 = &v21[4 * v31];
              while (1)
              {
                if (v30)
                {
                  if (v32 == &v73)
                    goto LABEL_61;
                }
                else if (v32 == (_QWORD *)v33)
                {
LABEL_61:
                  if (v74)
                    v37 = v74;
                  else
                    v37 = v70;
                  v38 = v60 + v37;
                  v39 = v64;
                  v40 = v67;
                  if (v68)
                    v39 = v68;
                  LODWORD(v60) = v38;
                  *((_DWORD *)v4 + 1) = v38;
                  *((_DWORD *)v4 + 2) = v57 + v39;
                  v57 += v39;
                  sub_1C47655E8((uint64_t)&v66, v40);
                  if (v63 != v65)
                    free(v63);
                  sub_1C47655E8((uint64_t)&v72, v73);
                  v8 = v55;
                  v7 = v56;
                  v9 = v54;
                  if (v69 != v71)
                    free(v69);
                  goto LABEL_71;
                }
                v61 = 0;
                v34 = (unsigned int *)v32 + 7;
                if (!v30)
                  v34 = (unsigned int *)v32;
                v61 = *v34;
                sub_1C5162A80((uint64_t)&v63, &v61);
                if (v30)
                {
                  v35 = (_QWORD *)v32[1];
                  v36 = v32;
                  if (v35)
                  {
                    do
                    {
                      v32 = v35;
                      v35 = (_QWORD *)*v35;
                    }
                    while (v35);
                  }
                  else
                  {
                    do
                    {
                      v32 = (_QWORD *)v36[2];
                      v19 = *v32 == (_QWORD)v36;
                      v36 = v32;
                    }
                    while (!v19);
                  }
                }
                else
                {
                  v32 = (_QWORD *)((char *)v32 + 4);
                }
              }
            }
            ++v12;
            v13 -= 8;
          }
          while (v13);
        }
        LODWORD(v76) = 0;
        if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD **))(**(_QWORD **)(a2 + 872) + 120))(*(_QWORD *)(a2 + 872), v6, &v75)&& (_DWORD)v76)
        {
          v14 = (_QWORD **)v75;
          v15 = 8 * v76;
          while (!*(_BYTE *)(*(_QWORD *)(v10 + 8)
                            + 40
                            * (*(_DWORD *)((**v14 & ((uint64_t)(**v14 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)
                                                       + 0x10)
                                           + *(_DWORD *)(v10 + 32))
                            + 18))
          {
            ++v14;
            v15 -= 8;
            if (!v15)
              goto LABEL_71;
          }
          v8 += v76;
          *((_DWORD *)v4 + 4) = v8;
        }
LABEL_71:
        if (v75 != v77)
          free(v75);
        if (!v6)
        {
LABEL_77:
          while ((*(_WORD *)(v6 + 44) & 8) != 0)
            v6 = *(_QWORD *)(v6 + 8);
          goto LABEL_78;
        }
      }
      if ((*(_BYTE *)v6 & 4) == 0)
        goto LABEL_77;
LABEL_78:
      v6 = *(_QWORD *)(v6 + 8);
      if (v6 == v5)
        goto LABEL_81;
    }
  }
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v60 = 0;
LABEL_81:
  v41 = *(_QWORD *)(*(_QWORD *)(a2 + 1136) + 248);
  if (v41)
  {
    v42 = *(_DWORD *)(v41 + 176);
    v43 = 0.0;
    if (v42)
    {
      v44 = *(_QWORD *)(v41 + 160);
      v45 = v42 - 1;
      v46 = (v42 - 1) & ((a3 >> 4) ^ (a3 >> 9));
      v47 = *(_QWORD *)(v44 + 16 * v46);
      if (v47 == a3)
      {
LABEL_84:
        v48 = *(unsigned int *)(v44 + 16 * v46 + 8);
        if (v48 != 0xFFFFFFFFLL)
          v43 = (float)*(unint64_t *)(*(_QWORD *)(v41 + 8) + 24 * v48 + 16);
      }
      else
      {
        v51 = 1;
        while (v47 != -4096)
        {
          v52 = v46 + v51++;
          v46 = v52 & v45;
          v47 = *(_QWORD *)(v44 + 16 * v46);
          if (v47 == a3)
            goto LABEL_84;
        }
      }
    }
    v49 = (float)*(unint64_t *)(*(_QWORD *)(v41 + 8) + 16);
  }
  else
  {
    v43 = 0.0;
    v49 = 0.0;
  }
  v50 = v43 * (float)(1.0 / v49);
  *((float *)v4 + 6) = v50 * (float)HIDWORD(v60);
  *((float *)v4 + 7) = v50 * (float)v60;
  *((float *)v4 + 8) = v50 * (float)v9;
  *((float *)v4 + 9) = v50 * (float)v8;
  *((float *)v4 + 10) = v50 * (float)v7;
}

float sub_1C5239430(uint64_t a1, uint64_t a2)
{
  float result;

  *(int32x4_t *)a1 = vaddq_s32(*(int32x4_t *)a1, *(int32x4_t *)a2);
  *(int32x2_t *)(a1 + 16) = vadd_s32(*(int32x2_t *)(a1 + 16), *(int32x2_t *)(a2 + 16));
  *(float32x4_t *)(a1 + 24) = vaddq_f32(*(float32x4_t *)(a2 + 24), *(float32x4_t *)(a1 + 24));
  result = *(float *)(a2 + 40) + *(float *)(a1 + 40);
  *(float *)(a1 + 40) = result;
  return result;
}

uint64_t sub_1C5239474(uint64_t *****a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;

  v3 = *****a1;
  if (*(_QWORD *)(v3 + 128))
    return 1;
  v6 = *(_QWORD *)(v3 + 72);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6) & 1) != 0
    || ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 40))(v6, a2, a3) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, a2, a3);
  }
}

uint64_t sub_1C5239514(uint64_t a1, const llvm::MachineFunction *a2)
{
  uint64_t v4;
  char *v5;
  void **v6;
  void *v7;
  llvm::VirtRegMap *v8;
  void **v9;
  void *v10;
  llvm::LiveIntervals *v11;
  void **v12;
  void *v13;
  llvm::LiveRegMatrix *v14;
  void **v15;
  void *v16;
  void **v17;
  void *v18;
  void **v19;
  void *v20;
  void **v21;
  void *v22;
  void **v23;
  void *v24;
  void **v25;
  void *v26;
  void **v27;
  void *v28;
  void **v29;
  void *v30;
  void **v31;
  void *v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  void *v42;
  void **v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int8x16_t *v52;
  llvm::VirtRegAuxInfo *v53;
  uint64_t v54;
  uint64_t InlineSpiller;
  uint64_t v56;
  char *v57;
  char *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t i;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  _QWORD *v83;
  int v84;
  uint64_t v85;
  BOOL v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  int v92;
  uint64_t v93;
  unint64_t v94;
  int v95;
  uint64_t v96;
  unsigned __int32 v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  llvm::LiveInterval *v102;
  int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  int v112;
  unsigned int v113;
  _DWORD *v114;
  uint64_t v115;
  int v116;
  int v117;
  unint64_t v118;
  _DWORD *v119;
  uint64_t v120;
  unint64_t v121;
  _DWORD *v122;
  BOOL v123;
  _DWORD *v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  _DWORD *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  llvm::LiveIntervals *v133;
  uint64_t v134;
  llvm::MachineLoop **v135;
  llvm::MachineLoop **v136;
  float v137;
  llvm::MachineLoop *v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  _QWORD *v143;
  _QWORD *j;
  uint64_t *v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  int32x4_t v149;
  int32x2_t v150;
  uint64_t ****v151;
  uint64_t v152;
  uint64_t Subprogram;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  const llvm::DILocation *Impl;
  uint64_t v158;
  uint64_t v159;
  _BYTE *v160;
  unint64_t v161;
  char *v162;
  __int128 v163;
  float32x4_t v164;
  uint64_t *v165;
  __int128 v166;
  int8x16_t v167;
  uint64_t v168;
  __int128 v169;
  __int128 v170;
  int32x2_t v171;
  float32x4_t v172;
  float v173;
  unsigned __int8 *v174;
  __int128 v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  float32x4_t v179;
  _QWORD *v180[2];
  void *v181;
  int32x2_t v182;
  int32x2_t v183;
  float32x4_t v184;
  float v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  __int128 v189;
  const char *v190;
  const char *v191;
  uint64_t v192;
  char v193;
  char v194;
  void *v195;
  uint64_t v196;
  _BYTE v197[260];
  int v198;
  uint64_t v199;
  uint64_t v200;

  v200 = *MEMORY[0x1E0C80C00];
  v4 = a1 + 29296;
  *(_QWORD *)(a1 + 864) = a2;
  *(_QWORD *)(a1 + 880) = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a2 + 2) + 176))(*((_QWORD **)a2 + 2));
  *(_QWORD *)(a1 + 872) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 864) + 16) + 104))(*(_QWORD *)(*(_QWORD *)(a1 + 864) + 16));
  llvm::RegisterClassInfo::runOnMachineFunction((llvm::RegisterClassInfo *)(a1 + 888), a2);
  v5 = &llvm::RegAllocBase::VerifyEnabled;
  if (llvm::RegAllocBase::VerifyEnabled)
    llvm::MachineFunction::verify(*(llvm::MachineFunction **)(a1 + 864), (llvm::Pass *)a1, "Before greedy register allocator", 1);
  v6 = **(void ****)(a1 + 8);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != &llvm::VirtRegMap::ID);
  v8 = (llvm::VirtRegMap *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), &llvm::VirtRegMap::ID);
  v9 = **(void ****)(a1 + 8);
  do
  {
    v10 = *v9;
    v9 += 2;
  }
  while (v10 != &llvm::LiveIntervals::ID);
  v11 = (llvm::LiveIntervals *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v9 - 1) + 96))(*(v9 - 1), &llvm::LiveIntervals::ID);
  v12 = **(void ****)(a1 + 8);
  do
  {
    v13 = *v12;
    v12 += 2;
  }
  while (v13 != &llvm::LiveRegMatrix::ID);
  v14 = (llvm::LiveRegMatrix *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v12 - 1) + 96))(*(v12 - 1), &llvm::LiveRegMatrix::ID);
  llvm::RegAllocBase::init((llvm::RegAllocBase *)(a1 + 248), v8, v11, v14);
  v15 = **(void ****)(a1 + 8);
  do
  {
    v16 = *v15;
    v15 += 2;
  }
  while (v16 != &llvm::SlotIndexes::ID);
  *(_QWORD *)(a1 + 1128) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v15 - 1) + 96))(*(v15 - 1), &llvm::SlotIndexes::ID);
  v17 = **(void ****)(a1 + 8);
  do
  {
    v18 = *v17;
    v17 += 2;
  }
  while (v18 != &llvm::MachineBlockFrequencyInfo::ID);
  *(_QWORD *)(a1 + 1136) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v17 - 1) + 96))(*(v17 - 1), &llvm::MachineBlockFrequencyInfo::ID);
  v19 = **(void ****)(a1 + 8);
  do
  {
    v20 = *v19;
    v19 += 2;
  }
  while (v20 != &llvm::MachineDominatorTree::ID);
  *(_QWORD *)(a1 + 1144) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v19 - 1) + 96))(*(v19 - 1), &llvm::MachineDominatorTree::ID);
  v21 = **(void ****)(a1 + 8);
  do
  {
    v22 = *v21;
    v21 += 2;
  }
  while (v22 != &llvm::MachineOptimizationRemarkEmitterPass::ID);
  *(_QWORD *)(a1 + 1160) = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v21 - 1) + 96))(*(v21 - 1), &llvm::MachineOptimizationRemarkEmitterPass::ID)+ 248);
  v23 = **(void ****)(a1 + 8);
  do
  {
    v24 = *v23;
    v23 += 2;
  }
  while (v24 != &llvm::MachineLoopInfo::ID);
  *(_QWORD *)(a1 + 1152) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v23 - 1) + 96))(*(v23 - 1), &llvm::MachineLoopInfo::ID);
  v25 = **(void ****)(a1 + 8);
  do
  {
    v26 = *v25;
    v25 += 2;
  }
  while (v26 != &llvm::EdgeBundles::ID);
  *(_QWORD *)(a1 + 1168) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v25 - 1) + 96))(*(v25 - 1), &llvm::EdgeBundles::ID);
  v27 = **(void ****)(a1 + 8);
  do
  {
    v28 = *v27;
    v27 += 2;
  }
  while (v28 != &llvm::SpillPlacement::ID);
  *(_QWORD *)(a1 + 1176) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v27 - 1) + 96))(*(v27 - 1), &llvm::SpillPlacement::ID);
  v29 = **(void ****)(a1 + 8);
  do
  {
    v30 = *v29;
    v29 += 2;
  }
  while (v30 != &unk_1EF8F6EF8);
  *(_QWORD *)(a1 + 1184) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v29 - 1) + 96))(*(v29 - 1), &unk_1EF8F6EF8);
  v31 = **(void ****)(a1 + 8);
  do
  {
    v32 = *v31;
    v31 += 2;
  }
  while (v32 != &llvm::AAResultsWrapperPass::ID);
  *(_QWORD *)(a1 + 1192) = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v31 - 1) + 96))(*(v31 - 1), &llvm::AAResultsWrapperPass::ID)+ 32);
  v33 = dword_1ED7FE838;
  v34 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 880) + 368))(*(_QWORD *)(a1 + 880));
  if (v33 <= v34)
    v35 = v34;
  else
    v35 = v33;
  *(_QWORD *)(a1 + 29288) = v35;
  if ((_DWORD)v35)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(a1 + 1136) + 248);
    if (v36 && (v37 = *(_QWORD *)(*(_QWORD *)(v36 + 8) + 16)) != 0)
    {
      if (v37 >> 14)
      {
        if (HIDWORD(v37))
        {
          *(_QWORD *)(a1 + 29288) = (v37 >> 14) * v35;
          goto LABEL_36;
        }
        v87 = v37 == 0x80000000;
        v88 = ((v37 >> 1) | 0x200000000000) / v37;
        if (v87)
          LODWORD(v88) = 0x4000;
        LODWORD(v186) = v88;
        v38 = llvm::BranchProbability::scaleByInverse((llvm::BranchProbability *)&v186, v35);
      }
      else
      {
        LODWORD(v186) = (_DWORD)v37 << 17;
        v38 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v186, v35);
      }
      *(_QWORD *)(a1 + 29288) = v38;
    }
    else
    {
      *(_QWORD *)(a1 + 29288) = 0;
    }
  }
LABEL_36:
  v39 = *(_QWORD *)(a1 + 880);
  v40 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v39 + 232))(v39, *(_QWORD *)(a1 + 864));
  v41 = *(unsigned int *)(v39 + 16);
  *(_QWORD *)(a1 + 29448) = **(_QWORD **)(v39 + 216) + (v41 * v40);
  *(_QWORD *)(a1 + 29456) = v41;
  if (*(_BYTE *)(a1 + 1288))
  {
    v42 = *(void **)(a1 + 1248);
    if (v42 != (void *)(a1 + 1264))
      free(v42);
  }
  *(_QWORD *)(a1 + 1280) = 0;
  *(_QWORD *)(a1 + 1248) = a1 + 1264;
  *(_QWORD *)(a1 + 1272) = 0;
  *(_QWORD *)(a1 + 1264) = 0;
  *(_QWORD *)(a1 + 1256) = 0;
  *(_DWORD *)(a1 + 1280) = 1;
  *(_BYTE *)(a1 + 1288) = 1;
  v43 = **(void ****)(a1 + 8);
  do
  {
    v44 = *v43;
    v43 += 2;
  }
  while (v44 != &llvm::RegAllocEvictionAdvisorAnalysis::ID);
  v45 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v43 - 1) + 96))(*(v43 - 1), &llvm::RegAllocEvictionAdvisorAnalysis::ID);
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v45 + 152))(&v186, v45, *(_QWORD *)(a1 + 864), a1);
  v46 = v186;
  v186 = 0;
  v47 = *(_QWORD *)(a1 + 1296);
  *(_QWORD *)(a1 + 1296) = v46;
  if (v47)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
    v48 = v186;
    v186 = 0;
    if (v48)
      (*(void (**)(void *))(*(_QWORD *)v48 + 8))(v48);
  }
  v49 = *(_QWORD *)(a1 + 864);
  v50 = *(_QWORD *)(a1 + 1152);
  v51 = *(_QWORD *)(a1 + 1136);
  v167 = *(int8x16_t *)(a1 + 272);
  v52 = (int8x16_t *)operator new();
  v52->i64[0] = (uint64_t)&unk_1E8149000;
  v52->i64[1] = v49;
  v52[1] = vextq_s8(v167, v167, 8uLL);
  v52[2].i64[0] = v50;
  v52[2].i64[1] = v51;
  v54 = *(_QWORD *)(a1 + 1240);
  *(_QWORD *)(a1 + 1240) = v52;
  if (v54)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
    v52 = *(int8x16_t **)(a1 + 1240);
  }
  InlineSpiller = llvm::createInlineSpiller((llvm *)a1, *(llvm::MachineFunctionPass **)(a1 + 864), *(llvm::MachineFunction **)(a1 + 272), (llvm::VirtRegMap *)v52, v53);
  v56 = *(_QWORD *)(a1 + 1200);
  *(_QWORD *)(a1 + 1200) = InlineSpiller;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 16))(v56);
  llvm::VirtRegAuxInfo::calculateSpillWeightsAndHints(*(llvm::VirtRegAuxInfo **)(a1 + 1240));
  v57 = (char *)operator new();
  v58 = sub_1C528CE24(v57, *(_QWORD *)(a1 + 272), *(_QWORD *)(a1 + 280), *(_QWORD *)(a1 + 1152));
  v59 = *(_QWORD **)(a1 + 1336);
  *(_QWORD *)(a1 + 1336) = v58;
  if (v59)
  {
    v60 = (_QWORD *)v59[78];
    if (v60 != v59 + 80)
      free(v60);
    v61 = (_QWORD *)v59[35];
    if (v61 != v59 + 37)
      free(v61);
    v62 = (_QWORD *)v59[25];
    if (v62 != v59 + 27)
      free(v62);
    v63 = (_QWORD *)v59[7];
    if (v63 != v59 + 9)
      free(v63);
    MEMORY[0x1CAA32FC0](v59, 0x10E0C405BCED39ELL);
  }
  v64 = operator new();
  v65 = sub_1C528D70C(v64, *(_QWORD *)(a1 + 1336), *(_QWORD *)(a1 + 1192), *(_QWORD *)(a1 + 280), *(_QWORD *)(a1 + 272), *(_QWORD *)(a1 + 1144), *(_QWORD *)(a1 + 1136), *(_QWORD *)(a1 + 1240));
  v66 = *(_QWORD *)(a1 + 1344);
  *(_QWORD *)(a1 + 1344) = v65;
  if (v66)
  {
    for (i = 1128; i != -280; i -= 704)
      sub_1C5109060(v66 + i);
    MEMORY[0x1CAA32FB4](*(_QWORD *)(v66 + 400), 8);
    if (*(_DWORD *)(v66 + 384))
    {
      sub_1C523B828(v66 + 200, (void (*)(_QWORD *, _QWORD, uint64_t))llvm::IntervalMap<llvm::SlotIndex,unsigned int,9u,llvm::IntervalMapInfo<llvm::SlotIndex>>::deleteNode, 0);
      *(_OWORD *)(v66 + 372) = 0u;
      *(_OWORD *)(v66 + 344) = 0u;
      *(_OWORD *)(v66 + 360) = 0u;
      *(_OWORD *)(v66 + 312) = 0u;
      *(_OWORD *)(v66 + 328) = 0u;
      *(_OWORD *)(v66 + 280) = 0u;
      *(_OWORD *)(v66 + 296) = 0u;
      *(_OWORD *)(v66 + 264) = 0u;
      *(_OWORD *)(v66 + 248) = 0u;
      *(_OWORD *)(v66 + 232) = 0u;
      *(_OWORD *)(v66 + 216) = 0u;
      *(_OWORD *)(v66 + 200) = 0u;
    }
    *(_DWORD *)(v66 + 388) = 0;
    *(_QWORD *)(v66 + 96) = 0;
    sub_1C4926AE8(v66 + 104);
    MEMORY[0x1CAA32FC0](v66, 0x10F0C4069DD8601);
  }
  v68 = *(_QWORD *)(a1 + 864);
  v69 = *(_QWORD *)(a1 + 280);
  v70 = *(_QWORD *)(*(_QWORD *)(a1 + 288) + 392);
  v71 = *(_QWORD *)(a1 + 1128);
  v72 = *(_QWORD *)(a1 + 880);
  *(_QWORD *)(a1 + 1368) = v68;
  *(_QWORD *)(a1 + 1360) = v70;
  *(_QWORD *)(a1 + 1352) = v72;
  sub_1C50E49A0((void *)(a1 + 1352));
  v73 = 1400;
  do
  {
    v74 = a1 + v73;
    *(_DWORD *)v74 = 0;
    *(_QWORD *)(v74 + 16) = v68;
    *(_QWORD *)(v74 + 24) = v71;
    *(_QWORD *)(v74 + 32) = v69;
    v73 += 720;
  }
  while (v74 + 720 != a1 + 24440);
  sub_1C523B60C(a1 + 24520, 0x20uLL);
  v82 = *(_DWORD *)v4;
  if (*(_DWORD *)v4 > 1u || *(_DWORD *)(v4 + 4))
  {
    if ((v82 & 1) != 0)
    {
      v110 = (_QWORD *)(a1 + 29304);
      v111 = (_QWORD *)(a1 + 29368);
    }
    else
    {
      v109 = *(unsigned int *)(v4 + 16);
      if (((2 * v82) & 0xFFFFFFFC) < v109 && v109 >= 0x41)
      {
        sub_1C523BAB8((_QWORD *)v4);
        goto LABEL_68;
      }
      if (!(_DWORD)v109)
      {
        v112 = 0;
LABEL_122:
        *(_DWORD *)v4 = v112;
        *(_DWORD *)(v4 + 4) = 0;
        goto LABEL_68;
      }
      v110 = *(_QWORD **)(a1 + 29304);
      v111 = &v110[v109];
    }
    do
      *v110++ = -4096;
    while (v110 != v111);
    v112 = *(_DWORD *)v4 & 1;
    goto LABEL_122;
  }
LABEL_68:
  *(_DWORD *)(v4 + 80) = 0;
  v83 = (_QWORD *)(a1 + 1312);
  v84 = *(_DWORD *)(a1 + 1320);
  if (v84)
  {
    v113 = *(_DWORD *)(a1 + 1328);
    if (v113 <= 4 * v84 || v113 < 0x41)
      goto LABEL_124;
    v116 = 1 << (33 - __clz(v84 - 1));
    if (v116 <= 64)
      v117 = 64;
    else
      v117 = v116;
    goto LABEL_150;
  }
  if (*(_DWORD *)(a1 + 1324))
  {
    v113 = *(_DWORD *)(a1 + 1328);
    if (v113 <= 0x40)
    {
LABEL_124:
      if (v113)
      {
        v114 = (_DWORD *)*v83;
        v115 = 12 * v113;
        do
        {
          *v114 = -1;
          v114 += 3;
          v115 -= 12;
        }
        while (v115);
      }
      *(_QWORD *)(a1 + 1320) = 0;
      goto LABEL_70;
    }
    v117 = 0;
LABEL_150:
    if (v117 == v113)
    {
      *(_QWORD *)(a1 + 1320) = 0;
      v124 = *(_DWORD **)(a1 + 1312);
      v125 = 12 * v113;
      do
      {
        *v124 = -1;
        v124 += 3;
        v125 -= 12;
      }
      while (v125);
    }
    else
    {
      MEMORY[0x1CAA32FB4](*v83, 4);
      if (v117)
      {
        v126 = (4 * v117 / 3u + 1) | ((unint64_t)(4 * v117 / 3u + 1) >> 1);
        v127 = v126 | (v126 >> 2) | ((v126 | (v126 >> 2)) >> 4);
        LODWORD(v127) = (((v127 | (v127 >> 8)) >> 16) | v127 | (v127 >> 8)) + 1;
        *(_DWORD *)(a1 + 1328) = v127;
        v128 = operator new(12 * v127, (std::align_val_t)4uLL);
        *(_QWORD *)(a1 + 1312) = v128;
        *(_QWORD *)(a1 + 1320) = 0;
        v129 = *(unsigned int *)(a1 + 1328);
        if ((_DWORD)v129)
        {
          v130 = 12 * v129;
          do
          {
            *v128 = -1;
            v128 += 3;
            v130 -= 12;
          }
          while (v130);
        }
      }
      else
      {
        *v83 = 0;
        *(_QWORD *)(a1 + 1320) = 0;
        *(_DWORD *)(a1 + 1328) = 0;
      }
    }
  }
LABEL_70:
  llvm::RegAllocBase::allocatePhysRegs((llvm::RegAllocBase *)(a1 + 248), v75, v76, v77, v78, v79, v80, v81);
  v85 = *(unsigned int *)(v4 + 80);
  if (!(_DWORD)v85)
    goto LABEL_71;
  v89 = *(_QWORD *)(a1 + 29368);
  v90 = v89 + 8 * v85;
  v91 = &v188;
  while (2)
  {
    v92 = *(_DWORD *)(*(_QWORD *)v89 + 112);
    v93 = *(_QWORD *)(*(_QWORD *)(a1 + 272) + 280);
    if (!*(_DWORD *)(v93 + 4 * (v92 & 0x7FFFFFFF)))
      goto LABEL_112;
    v168 = v90;
    v176 = &v178;
    v177 = 0x400000000;
    v180[0] = 0;
    v180[1] = 0;
    v179.i64[1] = (uint64_t)v180;
    v181 = &v183;
    v182 = (int32x2_t)0x200000000;
    v165 = v91;
    v186 = v91;
    v187 = 0x400000000;
    LODWORD(v170) = v92;
    v94 = *(unsigned int *)(v93 + 4 * (v92 & 0x7FFFFFFF));
    sub_1C4854E58((uint64_t)&v176, (unsigned int *)&v170);
    v95 = v170;
    v96 = v182.u32[0];
    if (v182.u32[0] >= (unint64_t)v182.u32[1])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v181, (uint64_t)&v183, v182.u32[0] + 1, 4);
      v96 = v182.u32[0];
    }
    *((_DWORD *)v181 + v96) = v95;
    v97 = ++v182.i32[0];
    do
    {
      v98 = *((unsigned int *)v181 + --v97);
      v182.i32[0] = v97;
      LODWORD(v170) = v98;
      if ((unint64_t)(v98 - 1) < 0x3FFFFFFF)
        continue;
      v99 = v98 & 0x7FFFFFFF;
      v100 = *(_QWORD *)(*(_QWORD *)(a1 + 272) + 280);
      if (*(_DWORD *)(v100 + 4 * v99))
      {
        v101 = *(_QWORD *)(a1 + 280);
        if (v99 >= *(unsigned int *)(v101 + 416)
          || (v102 = *(llvm::LiveInterval **)(*(_QWORD *)(v101 + 408) + 8 * v99)) == 0)
        {
          v131 = v5;
          v132 = *(_QWORD *)(a1 + 280);
          v102 = (llvm::LiveInterval *)sub_1C4851220(v132, v98);
          v133 = (llvm::LiveIntervals *)v132;
          v5 = v131;
          llvm::LiveIntervals::computeVirtRegInterval(v133, v102);
          LODWORD(v98) = v170;
          v100 = *(_QWORD *)(*(_QWORD *)(a1 + 272) + 280);
        }
        v103 = *(_DWORD *)(v100 + 4 * (v98 & 0x7FFFFFFF));
        if (v103 == (_DWORD)v94)
        {
          LODWORD(v187) = 0;
          sub_1C5238770((_QWORD *)a1, v98, (uint64_t)&v186);
        }
        else
        {
          if ((v94 - 1) > 0x3FFFFFFE)
            goto LABEL_103;
          v108 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 24) + 16 * (v98 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
          if ((v94 >> 3) >= *(unsigned __int16 *)(v108 + 22)
            || ((*(unsigned __int8 *)(*(_QWORD *)(v108 + 8) + (v94 >> 3)) >> (v94 & 7)) & 1) == 0
            || llvm::LiveRegMatrix::checkInterference(*(_QWORD *)(a1 + 288), (uint64_t)v102, v94))
          {
            goto LABEL_103;
          }
          LODWORD(v187) = 0;
          sub_1C5238770((_QWORD *)a1, v170, (uint64_t)&v186);
          if ((_DWORD)v187)
          {
            v118 = 0;
            v119 = v186;
            v120 = 16 * v187;
            v121 = v120;
            v122 = v186;
            do
            {
              if (v122[3] != v103)
              {
                v123 = __CFADD__(*(_QWORD *)v122, v118);
                v118 += *(_QWORD *)v122;
                if (v123)
                  v118 = -1;
              }
              v122 += 4;
              v121 -= 16;
            }
            while (v121);
            do
            {
              if (v119[3] != (_DWORD)v94)
              {
                v123 = __CFADD__(*(_QWORD *)v119, v121);
                v121 += *(_QWORD *)v119;
                if (v123)
                  v121 = -1;
              }
              v119 += 4;
              v120 -= 16;
            }
            while (v120);
            if (v118 < v121)
              goto LABEL_103;
          }
          llvm::LiveRegMatrix::unassign(*(llvm::LiveRegMatrix **)(a1 + 288), v102);
          llvm::LiveRegMatrix::assign(*(_QWORD **)(a1 + 288), v102, v94);
        }
        if ((_DWORD)v187)
        {
          v104 = 16 * v187;
          v105 = (unsigned int *)((char *)v186 + 8);
          do
          {
            if ((sub_1C4854E58((uint64_t)&v176, v105) & 0x100000000) != 0)
            {
              v106 = *v105;
              v107 = v182.u32[0];
              if (v182.u32[0] >= (unint64_t)v182.u32[1])
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v181, (uint64_t)&v183, v182.u32[0] + 1, 4);
                v107 = v182.u32[0];
              }
              *((_DWORD *)v181 + v107) = v106;
              ++v182.i32[0];
            }
            v105 += 4;
            v104 -= 16;
          }
          while (v104);
        }
      }
LABEL_103:
      v97 = v182.i32[0];
    }
    while (v97);
    v91 = v165;
    if (v186 != v165)
      free(v186);
    if (v181 != &v183)
      free(v181);
    sub_1C47655E8((uint64_t)&v179.i64[1], v180[0]);
    if (v176 != &v178)
      free(v176);
    v90 = v168;
LABEL_112:
    v89 += 8;
    if (v89 != v90)
      continue;
    break;
  }
LABEL_71:
  if (*v5)
    llvm::MachineFunction::verify(*(llvm::MachineFunction **)(a1 + 864), (llvm::Pass *)a1, "Before post optimization", 1);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 248) + 24))(a1 + 248);
  if (sub_1C5239474(*(uint64_t ******)(a1 + 1160), (uint64_t)"regalloc", 8))
  {
    v134 = *(_QWORD *)(a1 + 1152);
    v135 = *(llvm::MachineLoop ***)(v134 + 272);
    v136 = *(llvm::MachineLoop ***)(v134 + 280);
    if (v135 == v136)
    {
      v163 = 0uLL;
      v164 = 0uLL;
      v137 = 0.0;
      v166 = 0uLL;
      v169 = 0uLL;
    }
    else
    {
      v163 = 0uLL;
      v164 = 0uLL;
      v137 = 0.0;
      v166 = 0uLL;
      v169 = 0uLL;
      do
      {
        v138 = *v135++;
        sub_1C620C21C((uint64_t)&v181, a1, v138);
        *((_QWORD *)&v139 + 1) = *((_QWORD *)&v163 + 1);
        *(int32x2_t *)&v139 = vadd_s32((int32x2_t)v181, *(int32x2_t *)&v163);
        *((_QWORD *)&v140 + 1) = *((_QWORD *)&v169 + 1);
        *(int32x2_t *)&v140 = vadd_s32(v182, *(int32x2_t *)&v169);
        v169 = v140;
        *((_QWORD *)&v141 + 1) = *((_QWORD *)&v166 + 1);
        *(int32x2_t *)&v141 = vadd_s32(v183, *(int32x2_t *)&v166);
        v166 = v141;
        v163 = v139;
        v164 = vaddq_f32(v164, v184);
        v137 = v137 + v185;
      }
      while (v135 != v136);
    }
    v142 = *(_QWORD *)(a1 + 864);
    v143 = (_QWORD *)(v142 + 320);
    for (j = *(_QWORD **)(v142 + 328); j != v143; j = (_QWORD *)j[1])
    {
      v145 = (uint64_t *)(*(_QWORD *)(a1 + 1152) + 248);
      v186 = j;
      v176 = 0;
      if ((sub_1C48BF0C0(v145, &v186, &v176) & 1) == 0 || !*((_QWORD *)v176 + 1))
      {
        sub_1C5238DF0(&v170, a1, (uint64_t)j);
        *((_QWORD *)&v146 + 1) = *((_QWORD *)&v163 + 1);
        *(int32x2_t *)&v146 = vadd_s32(*(int32x2_t *)&v170, *(int32x2_t *)&v163);
        *((_QWORD *)&v147 + 1) = *((_QWORD *)&v169 + 1);
        *(int32x2_t *)&v147 = vadd_s32(*(int32x2_t *)((char *)&v170 + 8), *(int32x2_t *)&v169);
        v169 = v147;
        *((_QWORD *)&v148 + 1) = *((_QWORD *)&v166 + 1);
        *(int32x2_t *)&v148 = vadd_s32(v171, *(int32x2_t *)&v166);
        v166 = v148;
        v163 = v146;
        v164 = vaddq_f32(v164, v172);
        v137 = v137 + v173;
      }
    }
    v176 = (void *)v163;
    v177 = v169;
    v178 = v166;
    v179 = v164;
    *(float *)v180 = v137;
    *(int32x2_t *)v149.i8 = vrev64_s32(*(int32x2_t *)&v163);
    v149.i64[1] = __PAIR64__(v166, vdup_lane_s32(*(int32x2_t *)&v169, 1).u32[0]);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(v149, v149))) & 1) != 0
      || (v150 = vceqz_s32((int32x2_t)vext_s8(*(int8x8_t *)&v166, *(int8x8_t *)&v169, 4uLL)), (v150.i8[4] & 1) == 0)
      || (v150.i8[0] & 1) == 0)
    {
      v151 = *(uint64_t *****)(a1 + 1160);
      v152 = *(_QWORD *)****v151;
      if (*(_QWORD *)(v152 + 128)
        || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v152 + 72) + 48))(*(_QWORD *)(v152 + 72)))
      {
        v174 = 0;
        Subprogram = llvm::Function::getSubprogram(**(llvm::Function ***)(a1 + 864));
        if (Subprogram)
        {
          v154 = Subprogram;
          v155 = *(_QWORD *)(Subprogram + 16);
          v156 = (uint64_t *)(v155 & 0xFFFFFFFFFFFFFFF8);
          if ((v155 & 4) != 0)
            v156 = (uint64_t *)*v156;
          Impl = (const llvm::DILocation *)llvm::DILocation::getImpl(v156, *(_DWORD *)(v154 + 24), 1u, v154, 0, 0, 0, 1);
          llvm::DebugLoc::DebugLoc((llvm::DebugLoc *)&v186, Impl);
          sub_1C49264C4(&v174, (unsigned __int8 **)&v186);
          if (v186)
            llvm::MetadataTracking::untrack((uint64_t)&v186, (unsigned __int8 *)v186);
        }
        llvm::DiagnosticLocation::DiagnosticLocation((llvm::DiagnosticLocation *)&v175, (const llvm::DebugLoc *)&v174);
        v158 = *(_QWORD *)(*(_QWORD *)(a1 + 864) + 328);
        v159 = **(_QWORD **)(v158 + 32);
        LODWORD(v187) = 16;
        BYTE4(v187) = 2;
        v189 = v175;
        v188 = v159;
        v190 = "regalloc";
        v191 = "SpillReloadCopies";
        v192 = 17;
        v193 = 0;
        v194 = 0;
        v195 = v197;
        v196 = 0x400000000;
        v197[256] = 0;
        v198 = -1;
        v199 = v158;
        v186 = &unk_1E8141F00;
        sub_1C5238970((uint64_t)&v176, (uint64_t)&v186);
        *(_QWORD *)&v175 = "generated in function";
        *((_QWORD *)&v175 + 1) = 21;
        sub_1C53B17B4((uint64_t)&v195, (const void **)&v175);
        if (v174)
          llvm::MetadataTracking::untrack((uint64_t)&v174, v174);
        llvm::MachineOptimizationRemarkEmitter::emit(v151, (llvm::DiagnosticInfoOptimizationBase *)&v186);
        v186 = &off_1E814E790;
        v160 = v195;
        if ((_DWORD)v196)
        {
          v161 = (unint64_t)v196 << 6;
          v162 = (char *)v195 - 64;
          do
          {
            sub_1C4765530((uint64_t)&v162[v161]);
            v161 -= 64;
          }
          while (v161);
          v160 = v195;
        }
        if (v160 != v197)
          free(v160);
      }
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  return 1;
}

const char *sub_1C523A5DC()
{
  return "Greedy Register Allocator";
}

void sub_1C523A5EC(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *__src;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  __src = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&__src, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = __src;
  *(_QWORD *)__src |= 2uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &__src == (void **)a1)
    goto LABEL_7;
  if (v8 >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
    v6 = v8;
    v3 = __src;
    if (!(_DWORD)v8)
      goto LABEL_6;
    v4 = *(void **)a1;
  }
  else
  {
    v6 = v8;
  }
  memcpy(v4, v3, 8 * v6);
  v3 = __src;
LABEL_6:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_7:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

void sub_1C523A71C(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *__src;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  __src = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&__src, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = __src;
  *(_QWORD *)__src |= 1uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &__src == (void **)a1)
    goto LABEL_7;
  if (v8 >= 7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
    v6 = v8;
    v3 = __src;
    if (!(_DWORD)v8)
      goto LABEL_6;
    v4 = *(void **)a1;
  }
  else
  {
    v6 = v8;
  }
  memcpy(v4, v3, 8 * v6);
  v3 = __src;
LABEL_6:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_7:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

uint64_t sub_1C523A84C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 1200);
}

void sub_1C523A854(uint64_t a1)
{
  sub_1C523AF04(a1 - 248);
}

void sub_1C523A85C(uint64_t a1)
{
  sub_1C523AF04(a1 - 248);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C523A884(uint64_t a1)
{
  return *(_QWORD *)(a1 + 952);
}

void sub_1C523A88C(uint64_t a1)
{
  sub_1C523AF04(a1 - 856);
}

void sub_1C523A894(uint64_t a1)
{
  sub_1C523AF04(a1 - 856);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C523A8BC(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

uint64_t sub_1C523A8D0(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 152))
    v1 = *(_QWORD *)(result + 144);
  else
    v1 = 0;
  *(_QWORD *)(result + 128) = v1;
  return result;
}

_QWORD *sub_1C523A8EC(_QWORD *a1, unsigned int a2)
{
  uint64_t v3;
  _QWORD *result;
  int v5;
  _QWORD *v6;

  if (a2 <= 8)
  {
    *a1 = 1;
  }
  else
  {
    *(_DWORD *)a1 &= ~1u;
    v3 = a2;
    result = operator new(8 * a2, (std::align_val_t)8uLL);
    a1[1] = result;
    a1[2] = v3;
    v5 = *(_DWORD *)a1;
    *a1 = *(_DWORD *)a1 & 1;
    if ((v5 & 1) == 0)
    {
      v6 = &result[v3];
      goto LABEL_4;
    }
  }
  result = a1 + 1;
  v6 = a1 + 9;
  do
LABEL_4:
    *result++ = -4096;
  while (result != v6);
  return result;
}

int *sub_1C523A96C(uint64_t a1, int *a2)
{
  char v4;
  int *result;
  int v6;
  unsigned int v7;
  int v8;
  int *v9;

  v9 = 0;
  v4 = sub_1C523AA48(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  result = v9;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    sub_1C523AAD4(a1, v7);
    v9 = 0;
    sub_1C523AA48(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    result = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -1)
    --*(_DWORD *)(a1 + 12);
  v8 = *a2;
  result[1] = 0;
  result[2] = 0;
  *result = v8;
  return result;
}

uint64_t sub_1C523AA48(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  _DWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t result;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (37 * a3) & (a2 - 1);
    v6 = (_DWORD *)(a1 + 12 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -1)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -2;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_DWORD *)(a1 + 12 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_11;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a4 = v6;
  return result;
}

_DWORD *sub_1C523AAD4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(12 * v8, (std::align_val_t)4uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 12 * v10;
      do
      {
        *result = -1;
        result += 3;
        v11 -= 12;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 12 * v3;
      v13 = v4;
      do
      {
        v14 = *(_DWORD *)v13;
        if (*(_DWORD *)v13 <= 0xFFFFFFFD)
        {
          v18 = 0;
          sub_1C523AA48(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          v15 = v18;
          *v18 = *(_DWORD *)v13;
          *(_QWORD *)(v15 + 1) = *(_QWORD *)(v13 + 4);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 12;
        v12 -= 12;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 12 * v16;
    do
    {
      *result = -1;
      result += 3;
      v17 -= 12;
    }
    while (v17);
  }
  return result;
}

uint64_t sub_1C523AC10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v20;
  int v21;

  v2 = a2 + 48;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 288) + 392) + 16 * *(unsigned int *)(a2 + 24));
  if (a2 + 48 != (*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFF8))
  {
    v5 = llvm::MachineBasicBlock::SkipPHIsLabelsAndDebug(a2, *(_QWORD *)(a2 + 56), 1);
    if (v2 != v5)
    {
      v6 = *(_QWORD *)(*(_QWORD *)a1 + 288);
      v7 = *(_WORD *)(v5 + 44);
      v8 = v5;
      if ((v7 & 0xC) != 0)
      {
        v8 = v5;
        if ((v7 & 4) != 0)
        {
          v8 = v5;
          do
            v8 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v8 + 44) & 4) != 0);
        }
        if ((v7 & 8) != 0)
        {
          do
            v5 = *(_QWORD *)(v5 + 8);
          while ((*(_WORD *)(v5 + 44) & 8) != 0);
        }
      }
      v9 = *(_QWORD *)(v5 + 8);
      if (v8 != v9)
      {
        while (1)
        {
          v10 = **(unsigned __int16 **)(v8 + 16);
          v11 = v10 > 0x17;
          v12 = (1 << v10) & 0x83E000;
          if (v11 || v12 == 0)
            break;
          v8 = *(_QWORD *)(v8 + 8);
          if (v8 == v9)
          {
            v8 = *(_QWORD *)(v5 + 8);
            break;
          }
        }
      }
      v14 = *(_QWORD *)(v6 + 368);
      v15 = *(unsigned int *)(v6 + 384);
      if ((_DWORD)v15)
      {
        LODWORD(v16) = ((v8 >> 4) ^ (v8 >> 9)) & (v15 - 1);
        v17 = (uint64_t *)(v14 + 16 * v16);
        v18 = *v17;
        if (v8 == *v17)
          return v17[1];
        v20 = 1;
        while (v18 != -4096)
        {
          v21 = v16 + v20++;
          v16 = v21 & (v15 - 1);
          v18 = *(_QWORD *)(v14 + 16 * v16);
          if (v8 == v18)
          {
            v17 = (uint64_t *)(v14 + 16 * v16);
            return v17[1];
          }
        }
      }
      v17 = (uint64_t *)(v14 + 16 * v15);
      return v17[1];
    }
  }
  return v3;
}

uint64_t *sub_1C523AD7C(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int a5)
{
  uint64_t *v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *((_DWORD *)a2 + 7), v6 > a5))
  {
    v7 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v9 = a2;
LABEL_17:
      if (v7)
      {
        *a3 = v9;
        return v9 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v7)
    {
      v8 = (uint64_t *)*a2;
      do
      {
        v9 = v8;
        v8 = (uint64_t *)v8[1];
      }
      while (v8);
    }
    else
    {
      v12 = a2;
      do
      {
        v9 = (uint64_t *)v12[2];
        v13 = *v9 == (_QWORD)v12;
        v12 = v9;
      }
      while (v13);
    }
    if (*((_DWORD *)v9 + 7) < a5)
      goto LABEL_17;
    v14 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          a4 = (uint64_t *)v14;
          v15 = *(_DWORD *)(v14 + 28);
          if (v15 <= a5)
            break;
          v14 = *a4;
          v5 = a4;
          if (!*a4)
            goto LABEL_34;
        }
        if (v15 >= a5)
          break;
        v5 = a4 + 1;
        v14 = a4[1];
      }
      while (v14);
LABEL_25:
      *a3 = a4;
      return v5;
    }
    goto LABEL_42;
  }
  if (v6 >= a5)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v10 = a2[1];
  if (v10)
  {
    v11 = (uint64_t *)a2[1];
    do
    {
      a4 = v11;
      v11 = (uint64_t *)*v11;
    }
    while (v11);
  }
  else
  {
    v16 = a2;
    do
    {
      a4 = (uint64_t *)v16[2];
      v13 = *a4 == (_QWORD)v16;
      v16 = a4;
    }
    while (!v13);
  }
  if (a4 != v5 && *((_DWORD *)a4 + 7) <= a5)
  {
    v17 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          a4 = (uint64_t *)v17;
          v18 = *(_DWORD *)(v17 + 28);
          if (v18 <= a5)
            break;
          v17 = *a4;
          v5 = a4;
          if (!*a4)
            goto LABEL_34;
        }
        if (v18 >= a5)
          break;
        v5 = a4 + 1;
        v17 = a4[1];
      }
      while (v17);
      goto LABEL_25;
    }
LABEL_42:
    *a3 = v5;
    return v5;
  }
  if (v10)
  {
LABEL_34:
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_1C523AF04(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;

  *(_QWORD *)a1 = &off_1E8149408;
  *(_QWORD *)(a1 + 248) = &unk_1E8149508;
  v2 = (_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 856) = &unk_1E8149560;
  v3 = (_BYTE *)(a1 + 29296);
  v4 = *(void **)(a1 + 29368);
  if (v4 != (void *)(a1 + 29384))
    free(v4);
  if ((*v3 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 29304), 8);
  v5 = *(void **)(a1 + 29144);
  if (v5 != (void *)(a1 + 29160))
    free(v5);
  sub_1C620CACC((void **)(a1 + 24520));
  v6 = *(void **)(a1 + 24440);
  if (v6 != (void *)(a1 + 24456))
    free(v6);
  sub_1C523B114(a1 + 1352);
  v7 = *(_QWORD *)(a1 + 1344);
  *(_QWORD *)(a1 + 1344) = 0;
  if (v7)
  {
    v8 = sub_1C523B788(v7);
    MEMORY[0x1CAA32FC0](v8, 0x10F0C4069DD8601);
  }
  v9 = *(_QWORD **)(a1 + 1336);
  *(_QWORD *)(a1 + 1336) = 0;
  if (v9)
  {
    v10 = sub_1C523B708(v9);
    MEMORY[0x1CAA32FC0](v10, 0x10E0C405BCED39ELL);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1312), 4);
  v11 = *(_QWORD *)(a1 + 1296);
  *(_QWORD *)(a1 + 1296) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (*(_BYTE *)(a1 + 1288))
  {
    v12 = *(void **)(a1 + 1248);
    if (v12 != (void *)(a1 + 1264))
      free(v12);
    *(_BYTE *)(a1 + 1288) = 0;
  }
  v13 = *(_QWORD *)(a1 + 1240);
  *(_QWORD *)(a1 + 1240) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(void **)(a1 + 1208);
  if (v14)
  {
    *(_QWORD *)(a1 + 1216) = v14;
    operator delete(v14);
  }
  v15 = *(_QWORD *)(a1 + 1200);
  *(_QWORD *)(a1 + 1200) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
  sub_1C61D92E0((uint64_t *)(a1 + 888));
  sub_1C620A270(v2);
  sub_1C4926674((llvm::Pass *)a1);
}

_QWORD *sub_1C523B0A4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)a1[12];
  if (v2 != a1 + 14)
    free(v2);
  v3 = (_QWORD *)a1[3];
  if (v3 != a1 + 5)
    free(v3);
  a1[2] = 0;
  v4 = a1[1];
  if (v4)
    --*(_DWORD *)(v4 + 8);
  a1[1] = 0;
  return a1;
}

uint64_t sub_1C523B114(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  char *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  void **v12;
  char *v13;

  free(*(void **)(a1 + 24));
  v2 = a1 + 23088;
  do
  {
    v3 = *(void **)(v2 - 208);
    if (v3 != (void *)(v2 - 192))
      free(v3);
    v4 = v2 - 720;
    v6 = (void **)(v2 - 672);
    v5 = *(char **)(v2 - 672);
    v7 = *(unsigned int *)(v2 - 664);
    if ((_DWORD)v7)
    {
      v8 = 112 * v7;
      do
      {
        v9 = *(char **)&v5[v8 - 104];
        if (&v5[v8 - 88] != v9)
        {
          v12 = v6;
          v13 = v5;
          v11 = v8;
          free(v9);
          v8 = v11;
          v6 = v12;
          v5 = v13;
        }
        v8 -= 112;
      }
      while (v8);
      v5 = (char *)*v6;
    }
    if (v5 != (char *)(v2 - 656))
      free(v5);
    v2 -= 720;
  }
  while (v4 != a1 + 48);
  return a1;
}

void sub_1C523B1E0(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    v2 = a1;
    v3 = a1 + 40 * a2;
    do
    {
      sub_1C620CCF4(*(unsigned __int8 **)v2, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
      v2 += 40;
    }
    while (v2 != v3);
  }
}

unint64_t sub_1C523B224(unint64_t a1)
{
  unint64_t v3;
  unint64_t v5;

  if (qword_1ED7FE9F0 >= HIDWORD(qword_1ED7FE9F0))
  {
    v3 = qword_1ED7FE9F0 + 1;
    if (qword_1ED7FE9E8 <= a1 && qword_1ED7FE9E8 + 48 * (unint64_t)qword_1ED7FE9F0 > a1)
    {
      v5 = a1 - qword_1ED7FE9E8;
      sub_1C620CDA8(v3);
      return qword_1ED7FE9E8 + v5;
    }
    else
    {
      sub_1C620CDA8(v3);
    }
  }
  return a1;
}

uint64_t sub_1C523B298(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;

  v3 = a3 - 2;
  if (a3 >= 2)
  {
    v4 = v3 >> 1;
    v5 = (unsigned int *)(result + 8 * (v3 >> 1));
    v6 = *v5;
    v7 = *(_DWORD *)(a2 - 8);
    if (*v5 < v7 || v7 >= v6 && *(_DWORD *)(result + 8 * v4 + 4) < *(_DWORD *)(a2 - 4))
    {
      v8 = *(_DWORD *)(a2 - 8);
      v9 = *(_DWORD *)(a2 - 4);
      *(_DWORD *)(a2 - 8) = v6;
      *(_DWORD *)(a2 - 4) = v5[1];
      if (v3 >= 2)
      {
        while (1)
        {
          v11 = v4 - 1;
          v4 = (v4 - 1) >> 1;
          v10 = (unsigned int *)(result + 8 * v4);
          v12 = *v10;
          if (*v10 >= v8)
          {
            if (v12 > v8)
              break;
            v13 = *(_DWORD *)(result + 8 * v4 + 4);
            if (v13 >= v9)
              break;
          }
          else
          {
            v13 = v10[1];
          }
          *v5 = v12;
          v5[1] = v13;
          v5 = (unsigned int *)(result + 8 * v4);
          if (v11 <= 1)
            goto LABEL_12;
        }
      }
      v10 = v5;
LABEL_12:
      *v10 = v8;
      v10[1] = v9;
    }
  }
  return result;
}

uint64_t sub_1C523B340(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_16;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

uint64_t sub_1C523B3EC(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C523B554(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 72; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C523B554(a1, v14, v8);
}

uint64_t sub_1C523B554(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C523B340((uint64_t)v5, v10, &v11);
      *v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C523B60C(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(unsigned int *)(result + 8);
  if (v2 != a2)
  {
    if (v2 > a2)
    {
      v5 = 9 * v2;
      v6 = 144 * a2 - 16 * v5;
      v7 = (_QWORD *)(*(_QWORD *)result + 16 * v5 - 144);
      v9 = a2;
      v10 = result;
      do
      {
        sub_1C523B0A4(v7);
        LODWORD(a2) = v9;
        result = v10;
        v7 -= 18;
        v6 += 144;
      }
      while (v6);
    }
    else
    {
      if (*(unsigned int *)(result + 12) < a2)
      {
        v11 = result;
        v8 = a2;
        sub_1C620D1A4(result, a2);
        result = v11;
        a2 = v8;
        v2 = *(unsigned int *)(v11 + 8);
      }
      if (v2 != a2)
      {
        v3 = *(_QWORD *)result + 144 * a2;
        v4 = *(_QWORD *)result + 144 * v2;
        do
        {
          *(_OWORD *)(v4 + 80) = 0uLL;
          *(_OWORD *)(v4 + 96) = 0uLL;
          *(_OWORD *)(v4 + 128) = 0uLL;
          *(_OWORD *)(v4 + 48) = 0uLL;
          *(_OWORD *)(v4 + 64) = 0uLL;
          *(_OWORD *)(v4 + 16) = 0uLL;
          *(_OWORD *)(v4 + 32) = 0uLL;
          *(_OWORD *)v4 = 0uLL;
          *(_OWORD *)(v4 + 112) = 0uLL;
          *(_QWORD *)(v4 + 24) = v4 + 40;
          *(_DWORD *)(v4 + 36) = 6;
          *(_QWORD *)(v4 + 96) = v4 + 112;
          *(_DWORD *)(v4 + 108) = 8;
          v4 += 144;
        }
        while (v4 != v3);
      }
    }
    *(_DWORD *)(result + 8) = a2;
  }
  return result;
}

_QWORD *sub_1C523B708(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = (_QWORD *)a1[78];
  if (v2 != a1 + 80)
    free(v2);
  v3 = (_QWORD *)a1[35];
  if (v3 != a1 + 37)
    free(v3);
  v4 = (_QWORD *)a1[25];
  if (v4 != a1 + 27)
    free(v4);
  v5 = (_QWORD *)a1[7];
  if (v5 != a1 + 9)
    free(v5);
  return a1;
}

uint64_t sub_1C523B788(uint64_t a1)
{
  uint64_t i;

  for (i = 1128; i != -280; i -= 704)
    sub_1C5109060(a1 + i);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 400), 8);
  if (*(_DWORD *)(a1 + 384))
  {
    sub_1C523B828(a1 + 200, (void (*)(_QWORD *, _QWORD, uint64_t))llvm::IntervalMap<llvm::SlotIndex,unsigned int,9u,llvm::IntervalMapInfo<llvm::SlotIndex>>::deleteNode, 0);
    *(_OWORD *)(a1 + 372) = 0u;
    *(_OWORD *)(a1 + 344) = 0u;
    *(_OWORD *)(a1 + 360) = 0u;
    *(_OWORD *)(a1 + 312) = 0u;
    *(_OWORD *)(a1 + 328) = 0u;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
  }
  *(_DWORD *)(a1 + 388) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_1C4926AE8(a1 + 104);
  return a1;
}

void sub_1C523B828(uint64_t a1, void (*a2)(_QWORD *, _QWORD, uint64_t), uint64_t a3)
{
  int v3;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void (*v14)(_QWORD *, _QWORD, _QWORD);
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _BYTE v25[32];
  void *v26;
  uint64_t v27;
  _QWORD v28[5];

  v28[4] = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 184);
  if (v3)
  {
    v26 = v28;
    v27 = 0x400000000;
    v23 = v25;
    v24 = 0x400000000;
    v7 = *(_DWORD *)(a1 + 188);
    if (v7)
    {
      v7 = 0;
      v8 = 0;
      do
      {
        v9 = *(_QWORD *)(a1 + 8 + 8 * v8);
        if (v7 >= HIDWORD(v27))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, (uint64_t)v28, v7 + 1, 8);
          v7 = v27;
        }
        *((_QWORD *)v26 + v7) = v9;
        v7 = v27 + 1;
        LODWORD(v27) = v27 + 1;
        ++v8;
      }
      while (v8 != *(_DWORD *)(a1 + 188));
      v3 = *(_DWORD *)(a1 + 184);
    }
    v10 = (v3 - 1);
    if (v3 != 1)
    {
      do
      {
        v22 = v27;
        if ((_DWORD)v27)
        {
          v15 = 0;
          v21 = (_QWORD *)(a1 + (a3 >> 1));
          do
          {
            v16 = 0;
            v17 = v24;
            v18 = 8 * (*((_QWORD *)v26 + v15) & 0x3FLL) + 8;
            do
            {
              v19 = *(_QWORD *)((*((_QWORD *)v26 + v15) & 0xFFFFFFFFFFFFFFC0) + v16);
              if (v17 >= HIDWORD(v24))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, (uint64_t)v25, v17 + 1, 8);
                v17 = v24;
              }
              *((_QWORD *)v23 + v17) = v19;
              v17 = v24 + 1;
              LODWORD(v24) = v24 + 1;
              v16 += 8;
            }
            while (v18 != v16);
            v20 = a2;
            if ((a3 & 1) != 0)
              v20 = *(void (**)(_QWORD *, _QWORD, uint64_t))(*v21 + a2);
            v20(v21, *((_QWORD *)v26 + v15++), v10);
          }
          while (v15 != v22);
        }
        LODWORD(v27) = 0;
        sub_1C50FDE40(&v26, (uint64_t)&v23);
        v10 = (v10 - 1);
      }
      while ((_DWORD)v10);
      v7 = v27;
    }
    if (v7)
    {
      v11 = 0;
      v12 = 8 * v7;
      v13 = (_QWORD *)(a1 + (a3 >> 1));
      do
      {
        v14 = a2;
        if ((a3 & 1) != 0)
          v14 = *(void (**)(_QWORD *, _QWORD, _QWORD))(*v13 + a2);
        v14(v13, *(_QWORD *)((char *)v26 + v11), 0);
        v11 += 8;
      }
      while (v12 != v11);
    }
    if (v23 != v25)
      free(v23);
    if (v26 != v28)
      free(v26);
  }
}

uint64_t llvm::IntervalMap<llvm::SlotIndex,unsigned int,9u,llvm::IntervalMapInfo<llvm::SlotIndex>>::deleteNode(uint64_t result, uint64_t a2)
{
  unint64_t *v2;

  v2 = *(unint64_t **)(result + 192);
  *(_QWORD *)(a2 & 0xFFFFFFFFFFFFFFC0) = *v2;
  *v2 = a2 & 0xFFFFFFFFFFFFFFC0;
  return result;
}

_QWORD *sub_1C523BAB8(_QWORD *result)
{
  _QWORD *v1;
  unsigned int v2;
  char v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = result;
  v2 = *(_DWORD *)result;
  v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if ((v3 & 0x3E) == 0x1C)
    v4 = 64;
  else
    v4 = 1 << (33 - v3);
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 9)
  {
    v6 = result + 1;
    *result = 1;
    v7 = result + 9;
    do
LABEL_16:
      *v6++ = -4096;
    while (v6 != v7);
    return result;
  }
  if ((v2 & 1) != 0)
    return sub_1C523A8EC(v1, v5);
  if (v5 != *((_DWORD *)result + 4))
  {
    MEMORY[0x1CAA32FB4](result[1], 8);
    return sub_1C523A8EC(v1, v5);
  }
  *result = 0;
  if (v5)
  {
    v6 = (_QWORD *)result[1];
    v7 = &v6[v5];
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_1C523BB7C()
{
  int v1;
  int *v2;
  __int128 v3;
  int v4;
  __n128 v5;
  _QWORD v6[2];
  int v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  int v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  int v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = 1;
  *(_QWORD *)&v3 = "Spill mode for splitting live ranges";
  *((_QWORD *)&v3 + 1) = 36;
  v5.n128_u64[0] = (unint64_t)v6;
  v6[0] = "default";
  v6[1] = 7;
  v7 = 0;
  v8 = "Default";
  v9 = 7;
  v10 = "size";
  v11 = 4;
  v12 = 1;
  v13 = "Optimize for size";
  v14 = 17;
  v15 = "speed";
  v16 = 5;
  v17 = 2;
  v18 = "Optimize for speed";
  v19 = 18;
  v5.n128_u64[1] = 0x400000003;
  v1 = 2;
  v2 = &v1;
  sub_1C620CB48(&v4, &v3, (uint64_t)&v5, &v2);
  if ((_QWORD *)v5.n128_u64[0] != v6)
    free((void *)v5.n128_u64[0]);
  __cxa_atexit((void (*)(void *))sub_1C620BA68, &qword_1ED7FE940, &dword_1C475E000);
  LODWORD(v2) = 1;
  v5.n128_u64[0] = (unint64_t)"Last chance recoloring max depth";
  v5.n128_u64[1] = 32;
  v4 = 5;
  *(_QWORD *)&v3 = &v4;
  sub_1C6147F28((uint64_t)&unk_1ED7FE4B8, "lcr-max-depth", &v2, &v5, (int **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7FE4B8, &dword_1C475E000);
  LODWORD(v2) = 1;
  v5.n128_u64[0] = (unint64_t)"Last chance recoloring maximum number of considered interference at a time";
  v5.n128_u64[1] = 74;
  v4 = 8;
  *(_QWORD *)&v3 = &v4;
  sub_1C620CE74(&v2, (__int128 *)&v5, (int **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED7FE578, &dword_1C475E000);
  LODWORD(v3) = 0;
  v5.n128_u64[0] = (unint64_t)"Exhaustive Search for registers bypassing the depth and interference cutoffs of las"
                                     "t chance recoloring";
  v5.n128_u64[1] = 102;
  LODWORD(v2) = 1;
  sub_1C620CF50(&v3, &v5, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7FE638, &dword_1C475E000);
  LODWORD(v2) = 1;
  v5.n128_u64[0] = (unint64_t)"Instead of spilling a variable right away, defer the actual code insertion to the e"
                                     "nd of the allocation. That way the allocator might still find a suitable coloring f"
                                     "or this variable because of other evicted variables.";
  v5.n128_u64[1] = 218;
  LOBYTE(v4) = 0;
  *(_QWORD *)&v3 = &v4;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED7FE6F8, "enable-deferred-spilling", &v2, &v5, (_BYTE **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FE6F8, &dword_1C475E000);
  v5.n128_u64[0] = (unint64_t)"Cost for first time use of callee-saved register.";
  v5.n128_u64[1] = 49;
  LODWORD(v2) = 0;
  *(_QWORD *)&v3 = &v2;
  v4 = 1;
  sub_1C61D8E94((uint64_t)&unk_1ED7FE7B8, "regalloc-csr-first-time-cost", &v5, (int **)&v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7FE7B8, &dword_1C475E000);
  v5.n128_u64[0] = (unint64_t)"growRegion() does not scale with the number of BB edges, so limit its budget and ba"
                                     "il out once we reach the limit.";
  v5.n128_u64[1] = 114;
  LODWORD(v2) = 10000;
  *(_QWORD *)&v3 = &v2;
  v4 = 1;
  sub_1C620D064((__int128 *)&v5, (int **)&v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1C620BA6C, &qword_1ED7FE878, &dword_1C475E000);
  sub_1C620A114((uint64_t)&unk_1ED7FE488, "greedy", "greedy register allocator", (uint64_t)llvm::createGreedyRegisterAllocator);
  return __cxa_atexit((void (*)(void *))sub_1C5229294, &unk_1ED7FE488, &dword_1C475E000);
}

uint64_t llvm::createDefaultPBQPRegisterAllocator(llvm *this, char *a2)
{
  return llvm::createPBQPRegisterAllocator(0, a2);
}

uint64_t llvm::PBQP::RegAlloc::PBQPRAGraph::dump(llvm::PBQP::RegAlloc::PBQPRAGraph *this, llvm::raw_ostream *a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  int v7;
  _BYTE *v8;
  int v9;
  float **v10;
  _WORD *v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  void (**v15)(void);
  int v16;
  unsigned int v17;
  uint64_t result;
  uint64_t v19;
  char *v20;
  char *v21;
  unsigned int *v22;
  _BYTE *v23;
  _QWORD *v24;
  void (**v25)(void);
  _BYTE *v26;
  _DWORD *v27;
  void (**v28)(void);
  unsigned int v29;
  size_t v30;
  char *v31;
  uint64_t v32;
  int *v33;
  _DWORD *v34;
  int v35;
  _BYTE *v36;
  _BYTE *v37;
  int v38;
  uint64_t (**v39)();
  char *v40;
  uint64_t (**v41)();
  unint64_t v42;
  llvm::PBQP::RegAlloc::PBQPRAGraph *v43;
  float **v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = -1171354717 * ((*((_QWORD *)this + 17) - *((_QWORD *)this + 16)) >> 3);
  LODWORD(v41) = 0;
  HIDWORD(v41) = v4;
  v5 = (char *)this + 152;
  v42 = (unint64_t)this + 152;
  LODWORD(v41) = sub_1C5245708((uint64_t)&v41, 0);
  v6 = v41;
  v39 = v41;
  v40 = v5;
  LODWORD(v41) = -1171354717 * ((*((_QWORD *)this + 17) - *((_QWORD *)this + 16)) >> 3);
  HIDWORD(v41) = (_DWORD)v41;
  v42 = (unint64_t)v5;
  v7 = sub_1C5245708((uint64_t)&v41, v41);
  if (v6 != v7)
  {
    v9 = v7;
    while (1)
    {
      v10 = *(float ***)(*((_QWORD *)this + 16) + 88 * v6);
      v41 = &off_1E8149818;
      v42 = v6;
      v43 = this;
      v44 = (float **)&v41;
      sub_1C523CF40((uint64_t)&v41, a2);
      v11 = (_WORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v11 > 1uLL)
      {
        *v11 = 8250;
        *((_QWORD *)a2 + 4) += 2;
        v12 = a2;
      }
      else
      {
        v12 = llvm::raw_ostream::write(a2, ": ", 2uLL);
      }
      v13 = sub_1C523C438(v12, v10);
      v14 = (_BYTE *)*((_QWORD *)v13 + 4);
      if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
      {
        llvm::raw_ostream::write(v13, 10);
      }
      else
      {
        *((_QWORD *)v13 + 4) = v14 + 1;
        *v14 = 10;
      }
      if (v44 == (float **)&v41)
        break;
      if (v44)
      {
        v15 = (void (**)(void))(*v44 + 10);
LABEL_14:
        (*v15)();
      }
      LODWORD(v39) = v6 + 1;
      v6 = sub_1C5245708((uint64_t)&v39, v6 + 1);
      LODWORD(v39) = v6;
      if (v6 == v9)
        goto LABEL_2;
    }
    v15 = (void (**)(void))(v41 + 4);
    goto LABEL_14;
  }
LABEL_2:
  v8 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)v8 >= *((_QWORD *)a2 + 3))
  {
    llvm::raw_ostream::write(a2, 10);
  }
  else
  {
    *((_QWORD *)a2 + 4) = v8 + 1;
    *v8 = 10;
  }
  v16 = -1431655765 * ((*((_QWORD *)this + 23) - *((_QWORD *)this + 22)) >> 4);
  LODWORD(v41) = 0;
  HIDWORD(v41) = v16;
  v42 = (unint64_t)this + 200;
  LODWORD(v41) = sub_1C5245708((uint64_t)&v41, 0);
  v17 = v41;
  v39 = v41;
  v40 = (char *)this + 200;
  LODWORD(v41) = -1431655765 * ((*((_QWORD *)this + 23) - *((_QWORD *)this + 22)) >> 4);
  HIDWORD(v41) = (_DWORD)v41;
  v42 = (unint64_t)this + 200;
  result = sub_1C5245708((uint64_t)&v41, v41);
  v38 = result;
  if (v17 != (_DWORD)result)
  {
    do
    {
      v19 = *((_QWORD *)this + 22) + 48 * v17;
      v20 = (char *)*(unsigned int *)(v19 + 20);
      v21 = (char *)*(unsigned int *)(v19 + 24);
      v22 = *(unsigned int **)v19;
      v41 = &off_1E8149818;
      v42 = (unint64_t)v20;
      v43 = this;
      v44 = (float **)&v41;
      sub_1C523CF40((uint64_t)&v41, a2);
      v23 = (_BYTE *)*((_QWORD *)a2 + 4);
      if ((unint64_t)v23 >= *((_QWORD *)a2 + 3))
      {
        llvm::raw_ostream::write(a2, 32);
      }
      else
      {
        *((_QWORD *)a2 + 4) = v23 + 1;
        *v23 = 32;
      }
      sub_1C5E21910(a2, *v22, 0, 0, 0);
      v24 = (_QWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v24 > 7uLL)
      {
        *v24 = 0x202F2073776F7220;
        *((_QWORD *)a2 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(a2, " rows / ", 8uLL);
      }
      if (v44 == (float **)&v41)
      {
        v25 = (void (**)(void))(v41 + 4);
      }
      else
      {
        if (!v44)
          goto LABEL_30;
        v25 = (void (**)(void))(*v44 + 10);
      }
      (*v25)();
LABEL_30:
      v41 = &off_1E8149818;
      v42 = (unint64_t)v21;
      v43 = this;
      v44 = (float **)&v41;
      sub_1C523CF40((uint64_t)&v41, a2);
      v26 = (_BYTE *)*((_QWORD *)a2 + 4);
      if ((unint64_t)v26 >= *((_QWORD *)a2 + 3))
      {
        llvm::raw_ostream::write(a2, 32);
      }
      else
      {
        *((_QWORD *)a2 + 4) = v26 + 1;
        *v26 = 32;
      }
      sub_1C5E21910(a2, v22[1], 0, 0, 0);
      v27 = (_DWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v27 > 6uLL)
      {
        *(_DWORD *)((char *)v27 + 3) = 171602796;
        *v27 = 1819239200;
        *((_QWORD *)a2 + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(a2, " cols:\n", 7uLL);
      }
      if (v44 == (float **)&v41)
      {
        v28 = (void (**)(void))(v41 + 4);
        goto LABEL_39;
      }
      if (v44)
      {
        v28 = (void (**)(void))(*v44 + 10);
LABEL_39:
        (*v28)();
      }
      if (*v22)
      {
        v29 = 0;
        do
        {
          LODWORD(v41) = v22[1];
          v30 = 4 * v41;
          v31 = (char *)operator new[]();
          bzero(v31, v30);
          v42 = (unint64_t)v31;
          v32 = v22[1];
          if ((_DWORD)v32)
          {
            v33 = (int *)(*((_QWORD *)v22 + 1) + 4 * v32 * v29);
            v34 = v31;
            do
            {
              v35 = *v33++;
              *v34++ = v35;
              --v32;
            }
            while (v32);
          }
          sub_1C523C438(a2, (float **)&v41);
          v36 = (_BYTE *)*((_QWORD *)a2 + 4);
          if (*((_BYTE **)a2 + 3) == v36)
          {
            llvm::raw_ostream::write(a2, "\n", 1uLL);
          }
          else
          {
            *v36 = 10;
            ++*((_QWORD *)a2 + 4);
          }
          MEMORY[0x1CAA32F9C](v31, 0x1000C8052888210);
          ++v29;
        }
        while (v29 < *v22);
      }
      v37 = (_BYTE *)*((_QWORD *)a2 + 4);
      if ((unint64_t)v37 >= *((_QWORD *)a2 + 3))
      {
        llvm::raw_ostream::write(a2, 10);
      }
      else
      {
        *((_QWORD *)a2 + 4) = v37 + 1;
        *v37 = 10;
      }
      LODWORD(v39) = v17 + 1;
      result = sub_1C5245708((uint64_t)&v39, v17 + 1);
      v17 = result;
      LODWORD(v39) = result;
    }
    while ((_DWORD)result != v38);
  }
  return result;
}

llvm::raw_ostream *sub_1C523C438(llvm::raw_ostream *this, float **a2)
{
  llvm::raw_ostream *v3;
  _WORD *v4;
  unint64_t v5;
  _WORD *v6;
  llvm::raw_ostream *v7;
  _WORD *v8;

  v3 = this;
  v4 = (_WORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v4 > 1uLL)
  {
    *v4 = 8283;
    *((_QWORD *)this + 4) += 2;
  }
  else
  {
    this = llvm::raw_ostream::write(this, "[ ", 2uLL);
  }
  llvm::write_double(this, 0, 0, 0, *a2[1]);
  if (*(_DWORD *)a2 >= 2u)
  {
    v5 = 1;
    do
    {
      v6 = (_WORD *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v6 > 1uLL)
      {
        *v6 = 8236;
        *((_QWORD *)v3 + 4) += 2;
        v7 = v3;
      }
      else
      {
        v7 = llvm::raw_ostream::write(v3, ", ", 2uLL);
      }
      llvm::write_double(v7, 0, 0, 0, a2[1][v5++]);
    }
    while (v5 < *(unsigned int *)a2);
  }
  v8 = (_WORD *)*((_QWORD *)v3 + 4);
  if (*((_QWORD *)v3 + 3) - (_QWORD)v8 > 1uLL)
  {
    *v8 = 23840;
    *((_QWORD *)v3 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v3, " ]", 2uLL);
  }
  return v3;
}

uint64_t llvm::PBQP::RegAlloc::PBQPRAGraph::dump(llvm::PBQP::RegAlloc::PBQPRAGraph *this)
{
  llvm *v2;

  v2 = llvm::dbgs(this);
  return llvm::PBQP::RegAlloc::PBQPRAGraph::dump(this, v2);
}

llvm::raw_ostream *llvm::PBQP::RegAlloc::PBQPRAGraph::printDot(llvm::PBQP::RegAlloc::PBQPRAGraph *this, llvm::raw_ostream *a2)
{
  _QWORD *v4;
  int v5;
  unsigned int v6;
  int v7;
  void *v8;
  llvm::raw_ostream *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  llvm::raw_ostream *result;
  _WORD *v14;
  int v15;
  uint64_t v16;
  llvm::raw_ostream *v17;
  uint64_t v18;
  _WORD *v19;
  _DWORD *v20;
  void (**v21)(void);
  int v22;
  uint64_t v23;
  llvm::raw_ostream *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  size_t v29;
  char *v30;
  uint64_t v31;
  int *v32;
  _DWORD *v33;
  int v34;
  _WORD *v35;
  _DWORD *v36;
  uint64_t (**v37)();
  char *v38;
  uint64_t (**v39)();
  unint64_t v40;
  llvm::PBQP::RegAlloc::PBQPRAGraph *v41;
  float **v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v4 > 7uLL)
  {
    *v4 = 0xA7B206870617267;
    *((_QWORD *)a2 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(a2, "graph {\n", 8uLL);
  }
  v5 = -1171354717 * ((*((_QWORD *)this + 17) - *((_QWORD *)this + 16)) >> 3);
  LODWORD(v39) = 0;
  HIDWORD(v39) = v5;
  v40 = (unint64_t)this + 152;
  LODWORD(v39) = sub_1C5245708((uint64_t)&v39, 0);
  v6 = v39;
  v37 = v39;
  v38 = (char *)this + 152;
  LODWORD(v39) = -1171354717 * ((*((_QWORD *)this + 17) - *((_QWORD *)this + 16)) >> 3);
  HIDWORD(v39) = (_DWORD)v39;
  v40 = (unint64_t)this + 152;
  v7 = sub_1C5245708((uint64_t)&v39, v39);
  if (v6 != v7)
  {
    v15 = v7;
    while (1)
    {
      v16 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v16) > 5)
      {
        *(_WORD *)(v16 + 4) = 25956;
        *(_DWORD *)v16 = 1869488160;
        *((_QWORD *)a2 + 4) += 6;
        v17 = a2;
      }
      else
      {
        v17 = llvm::raw_ostream::write(a2, "  node", 6uLL);
      }
      sub_1C5E21910(v17, v6, 0, 0, 0);
      v18 = *((_QWORD *)v17 + 4);
      if ((unint64_t)(*((_QWORD *)v17 + 3) - v18) > 9)
      {
        *(_WORD *)(v18 + 8) = 8765;
        *(_QWORD *)v18 = *(_QWORD *)" [ label=\"";
        *((_QWORD *)v17 + 4) += 10;
      }
      else
      {
        v17 = llvm::raw_ostream::write(v17, " [ label=\"", 0xAuLL);
      }
      v39 = &off_1E8149818;
      v40 = v6;
      v41 = this;
      v42 = (float **)&v39;
      sub_1C523CF40((uint64_t)&v39, v17);
      v19 = (_WORD *)*((_QWORD *)v17 + 4);
      if (*((_QWORD *)v17 + 3) - (_QWORD)v19 > 1uLL)
      {
        *v19 = 28252;
        *((_QWORD *)v17 + 4) += 2;
      }
      else
      {
        v17 = llvm::raw_ostream::write(v17, "\\n", 2uLL);
      }
      sub_1C523C438(v17, *(float ***)(*((_QWORD *)this + 16) + 88 * v6));
      v20 = (_DWORD *)*((_QWORD *)v17 + 4);
      if (*((_QWORD *)v17 + 3) - (_QWORD)v20 > 3uLL)
      {
        *v20 = 173875234;
        *((_QWORD *)v17 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(v17, "\" ]\n", 4uLL);
      }
      if (v42 == (float **)&v39)
        break;
      if (v42)
      {
        v21 = (void (**)(void))(*v42 + 10);
LABEL_24:
        (*v21)();
      }
      LODWORD(v37) = (_DWORD)v37 + 1;
      v6 = sub_1C5245708((uint64_t)&v37, v37);
      LODWORD(v37) = v6;
      if (v6 == v15)
        goto LABEL_4;
    }
    v21 = (void (**)(void))(v39 + 4);
    goto LABEL_24;
  }
LABEL_4:
  v8 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v8 > 0xCuLL)
  {
    qmemcpy(v8, "  edge [ len=", 13);
    *((_QWORD *)a2 + 4) += 13;
    v9 = a2;
  }
  else
  {
    v9 = llvm::raw_ostream::write(a2, "  edge [ len=", 0xDuLL);
  }
  sub_1C5E21910(v9, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)this + 17) - *((_QWORD *)this + 16)) >> 3)- ((uint64_t)(*((_QWORD *)this + 20) - *((_QWORD *)this + 19)) >> 2), 0, 0, 0);
  v10 = *((_QWORD *)v9 + 4);
  if ((unint64_t)(*((_QWORD *)v9 + 3) - v10) > 2)
  {
    *(_BYTE *)(v10 + 2) = 10;
    *(_WORD *)v10 = 23840;
    *((_QWORD *)v9 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v9, " ]\n", 3uLL);
  }
  v11 = -1431655765 * ((*((_QWORD *)this + 23) - *((_QWORD *)this + 22)) >> 4);
  LODWORD(v39) = 0;
  HIDWORD(v39) = v11;
  v40 = (unint64_t)this + 200;
  LODWORD(v39) = sub_1C5245708((uint64_t)&v39, 0);
  v12 = v39;
  v37 = v39;
  v38 = (char *)this + 200;
  LODWORD(v39) = -1431655765 * ((*((_QWORD *)this + 23) - *((_QWORD *)this + 22)) >> 4);
  HIDWORD(v39) = (_DWORD)v39;
  v40 = (unint64_t)this + 200;
  result = (llvm::raw_ostream *)sub_1C5245708((uint64_t)&v39, v39);
  if (v12 != (_DWORD)result)
  {
    v22 = (int)result;
    do
    {
      v23 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v23) > 5)
      {
        *(_WORD *)(v23 + 4) = 25956;
        *(_DWORD *)v23 = 1869488160;
        *((_QWORD *)a2 + 4) += 6;
        v24 = a2;
      }
      else
      {
        v24 = llvm::raw_ostream::write(a2, "  node", 6uLL);
      }
      sub_1C5E21910(v24, *(unsigned int *)(*((_QWORD *)this + 22) + 48 * v12 + 20), 0, 0, 0);
      v25 = (_QWORD *)*((_QWORD *)v24 + 4);
      if (*((_QWORD *)v24 + 3) - (_QWORD)v25 > 7uLL)
      {
        *v25 = 0x65646F6E202D2D20;
        *((_QWORD *)v24 + 4) += 8;
      }
      else
      {
        v24 = llvm::raw_ostream::write(v24, " -- node", 8uLL);
      }
      sub_1C5E21910(v24, *(unsigned int *)(*((_QWORD *)this + 22) + 48 * v12 + 24), 0, 0, 0);
      v26 = *((_QWORD *)v24 + 4);
      if ((unint64_t)(*((_QWORD *)v24 + 3) - v26) > 9)
      {
        *(_WORD *)(v26 + 8) = 8765;
        *(_QWORD *)v26 = *(_QWORD *)" [ label=\"";
        *((_QWORD *)v24 + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(v24, " [ label=\"", 0xAuLL);
      }
      v27 = *(_QWORD *)(*((_QWORD *)this + 22) + 48 * v12);
      if (*(_DWORD *)v27)
      {
        v28 = 0;
        do
        {
          LODWORD(v39) = *(_DWORD *)(v27 + 4);
          v29 = 4 * v39;
          v30 = (char *)operator new[]();
          bzero(v30, v29);
          v40 = (unint64_t)v30;
          v31 = *(unsigned int *)(v27 + 4);
          if ((_DWORD)v31)
          {
            v32 = (int *)(*(_QWORD *)(v27 + 8) + 4 * v31 * v28);
            v33 = v30;
            do
            {
              v34 = *v32++;
              *v33++ = v34;
              --v31;
            }
            while (v31);
          }
          sub_1C523C438(a2, (float **)&v39);
          v35 = (_WORD *)*((_QWORD *)a2 + 4);
          if (*((_QWORD *)a2 + 3) - (_QWORD)v35 > 1uLL)
          {
            *v35 = 28252;
            *((_QWORD *)a2 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(a2, "\\n", 2uLL);
          }
          MEMORY[0x1CAA32F9C](v30, 0x1000C8052888210);
          ++v28;
        }
        while (v28 < *(_DWORD *)v27);
      }
      v36 = (_DWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v36 > 3uLL)
      {
        *v36 = 173875234;
        *((_QWORD *)a2 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(a2, "\" ]\n", 4uLL);
      }
      LODWORD(v37) = (_DWORD)v37 + 1;
      result = (llvm::raw_ostream *)sub_1C5245708((uint64_t)&v37, v37);
      v12 = result;
      LODWORD(v37) = (_DWORD)result;
    }
    while ((_DWORD)result != v22);
  }
  v14 = (_WORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v14 <= 1uLL)
    return llvm::raw_ostream::write(a2, "}\n", 2uLL);
  *v14 = 2685;
  *((_QWORD *)a2 + 4) += 2;
  return result;
}

uint64_t llvm::createPBQPRegisterAllocator(llvm *this, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  llvm::PassRegistry *v7;
  llvm::PassRegistry *v9;

  v3 = operator new();
  v4 = sub_1C4776848(v3, (uint64_t)&unk_1EF8F2F58);
  *(_QWORD *)v4 = &off_1E8149860;
  *(_QWORD *)(v4 + 264) = 0;
  *(_QWORD *)(v4 + 272) = 0;
  *(_QWORD *)(v4 + 248) = this;
  *(_QWORD *)(v4 + 256) = v4 + 264;
  *(_QWORD *)(v4 + 280) = v4 + 288;
  *(_QWORD *)(v4 + 288) = 0;
  *(_QWORD *)(v4 + 296) = 0;
  *(_QWORD *)(v4 + 304) = v4 + 336;
  *(_QWORD *)(v4 + 312) = v4 + 336;
  *(_QWORD *)(v4 + 320) = 32;
  *(_DWORD *)(v4 + 328) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  llvm::initializeSlotIndexesPass(qword_1ED830BC0[0]);
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  llvm::initializeLiveIntervalsPass(qword_1ED830BC0[0]);
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  llvm::initializeLiveStacksPass((llvm *)qword_1ED830BC0[0], v7);
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  llvm::initializeVirtRegMapPass((llvm *)qword_1ED830BC0[0], v9);
  return v3;
}

uint64_t sub_1C523CDEC(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &off_1E81497E8;
  v3 = (void **)(a1 + 8);
  sub_1C4764BBC(&v3);
  return a1;
}

void sub_1C523CE30(uint64_t a1)
{
  void **v1;

  *(_QWORD *)a1 = &off_1E81497E8;
  v1 = (void **)(a1 + 8);
  sub_1C4764BBC(&v1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C523CE84(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(result + 8);
  for (i = *(uint64_t **)(result + 16);
        v2 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

void sub_1C523CED4()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C523CEE8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E8149818;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C523CF20(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8149818;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C523CF40(uint64_t a1, llvm::raw_ostream *a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  const char *v11;
  size_t v12;
  void *v13;
  _BYTE *v14;
  _DWORD *v15;
  _BYTE *v16;

  v4 = *(_QWORD **)(**(_QWORD **)(a1 + 16) + 40);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v4 + 16) + 176))(*(_QWORD *)(*v4 + 16));
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 128) + 88 * v6 + 40);
  v8 = *(_QWORD *)(v5 + 80);
  v9 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v4[3] + 16 * (v7 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) + 16);
  sub_1C5E21910(a2, v6, 0, 0, 0);
  v10 = (_WORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v10 > 1uLL)
  {
    *v10 = 10272;
    *((_QWORD *)a2 + 4) += 2;
    if (!v8)
      goto LABEL_5;
  }
  else
  {
    a2 = llvm::raw_ostream::write(a2, " (", 2uLL);
    if (!v8)
      goto LABEL_5;
  }
  v11 = (const char *)(v8 + v9);
  v12 = strlen(v11);
  v13 = (void *)*((_QWORD *)a2 + 4);
  if (v12 <= *((_QWORD *)a2 + 3) - (_QWORD)v13)
  {
    if (v12)
    {
      memcpy(v13, v11, v12);
      *((_QWORD *)a2 + 4) += v12;
    }
  }
  else
  {
    a2 = llvm::raw_ostream::write(a2, v11, v12);
  }
LABEL_5:
  v14 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)a2 + 3))
  {
    llvm::raw_ostream::write(a2, 58);
  }
  else
  {
    *((_QWORD *)a2 + 4) = v14 + 1;
    *v14 = 58;
  }
  v15 = operator new(0x28uLL);
  *(_QWORD *)v15 = &off_1E814D010;
  v15[2] = v7;
  *((_QWORD *)v15 + 2) = v5;
  v15[6] = 0;
  *((_QWORD *)v15 + 4) = 0;
  sub_1C52C9630((llvm::raw_ostream *)v15, a2);
  v16 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)v16 >= *((_QWORD *)a2 + 3))
  {
    llvm::raw_ostream::write(a2, 41);
  }
  else
  {
    *((_QWORD *)a2 + 4) = v16 + 1;
    *v16 = 41;
  }
  return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v15 + 40))(v15);
}

void sub_1C523D110(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)a1 = &off_1E8149860;
  v2 = *(void **)(a1 + 312);
  if (v2 != *(void **)(a1 + 304))
    free(v2);
  sub_1C47655E8(a1 + 280, *(_QWORD **)(a1 + 288));
  sub_1C47655E8(a1 + 256, *(_QWORD **)(a1 + 264));
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v3 = *(void **)(a1 + 176);
  if (v3 != (void *)(a1 + 192))
    free(v3);
  v4 = *(void **)(a1 + 104);
  if (v4 != (void *)(a1 + 120))
    free(v4);
  v5 = *(void **)(a1 + 32);
  if (v5 != (void *)(a1 + 48))
    free(v5);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C523D1C0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)a1 = &off_1E8149860;
  v2 = *(void **)(a1 + 312);
  if (v2 != *(void **)(a1 + 304))
    free(v2);
  sub_1C47655E8(a1 + 280, *(_QWORD **)(a1 + 288));
  sub_1C47655E8(a1 + 256, *(_QWORD **)(a1 + 264));
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v3 = *(void **)(a1 + 176);
  if (v3 != (void *)(a1 + 192))
    free(v3);
  v4 = *(void **)(a1 + 104);
  if (v4 != (void *)(a1 + 120))
    free(v4);
  v5 = *(void **)(a1 + 32);
  if (v5 != (void *)(a1 + 48))
    free(v5);
  llvm::Pass::~Pass((llvm::Pass *)a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C523D284()
{
  return "PBQP Register Allocator";
}

void *sub_1C523D294(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  uint64_t v4;

  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::LiveIntervals::ID);
  v4 = *((_QWORD *)a1 + 31);
  if (v4)
    sub_1C4771E64((uint64_t)this, (uint64_t)this, v4);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::LiveStacks::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::LiveStacks::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineBlockFrequencyInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineBlockFrequencyInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::VirtRegMap::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::VirtRegMap::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C523D424(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void **v3;
  void *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void **v8;
  void *v9;
  void **v10;
  void *v11;
  uint64_t v12;
  void **v13;
  void *v14;
  uint64_t v15;
  llvm::VirtRegAuxInfo *v16;
  uint64_t v17;
  int v18;
  int i;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char **v23;
  _QWORD *v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  llvm::LiveIntervals *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  char *v52;
  char *v53;
  _QWORD *v54;
  _QWORD *v55;
  char *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  llvm::LiveInterval *v61;
  unint64_t v62;
  uint64_t (*v63)(uint64_t);
  uint64_t v64;
  unsigned __int16 *v65;
  uint64_t *v66;
  char *v67;
  char *v68;
  unsigned __int16 *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  _WORD *v73;
  unsigned __int16 *v74;
  __int16 v75;
  unsigned __int16 v76;
  llvm::LiveRange *v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  int v85;
  int v86;
  uint64_t *v87;
  uint64_t **v88;
  uint64_t **v89;
  unsigned int v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t *v103;
  char *v104;
  char *v105;
  uint64_t *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  int v111;
  char *v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  BOOL v121;
  int v122;
  uint64_t **v123;
  llvm::LiveInterval *v124;
  uint64_t v125;
  void *v126;
  uint64_t *v127;
  uint64_t v128;
  int v129;
  unsigned int v130;
  _QWORD *v131;
  uint64_t v132;
  _WORD *v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  __int128 v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t v152;
  void *v153;
  _QWORD *v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  std::__shared_weak_count *v171;
  unint64_t *p_shared_owners;
  unint64_t v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  int **v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  void *v185;
  uint64_t *v186;
  uint64_t *v187;
  unsigned int v188;
  uint64_t v189;
  unint64_t v190;
  unsigned __int8 v191;
  uint64_t v192;
  unsigned int v193;
  int j;
  uint64_t v195;
  unint64_t v196;
  _DWORD *v197;
  uint64_t v198;
  _DWORD *v199;
  int v200;
  _QWORD *v201;
  std::__shared_weak_count *v202;
  std::__shared_weak_count *v203;
  std::__shared_weak_count *v204;
  uint64_t v205;
  unint64_t *v206;
  unint64_t v207;
  unint64_t v208;
  char *v209;
  unint64_t *v210;
  unint64_t *v211;
  uint64_t *v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  int v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  uint64_t *v223;
  uint64_t **v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  int v230;
  unint64_t v231;
  char *v232;
  char *v233;
  unsigned int v234;
  int k;
  int **v236;
  unsigned int v237;
  int m;
  uint64_t v239;
  uint64_t v240;
  int v241;
  unsigned int v242;
  int v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  _DWORD *v247;
  uint64_t v248;
  _DWORD *v249;
  unsigned int *v250;
  unsigned int *v251;
  char *v252;
  void *v253;
  unsigned int v254;
  uint64_t *v255;
  unsigned int v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  char *v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  char *v264;
  uint64_t *v265;
  uint64_t *v266;
  uint64_t *v267;
  uint64_t *v268;
  unsigned int v269;
  unsigned int v270;
  uint64_t v271;
  float v272;
  float v273;
  _BOOL4 v274;
  unsigned int *v275;
  unsigned int *v276;
  unsigned int *v277;
  unsigned int v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unsigned int *v282;
  uint64_t v283;
  unsigned int v284;
  uint64_t v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int *v289;
  unsigned int *v290;
  unsigned int v291;
  uint64_t v292;
  unsigned int v293;
  uint64_t v294;
  unsigned int *v295;
  const void **v296;
  uint64_t v297;
  size_t v298;
  void *v299;
  uint64_t v300;
  uint64_t v301;
  float *v302;
  uint64_t v303;
  float *v304;
  float v305;
  float v306;
  float *v307;
  float v308;
  int v309;
  float *v310;
  uint64_t v311;
  float v312;
  float v313;
  unsigned int *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  char *v318;
  uint64_t n;
  unsigned int v320;
  uint64_t v321;
  uint64_t v322;
  unsigned int v323;
  uint64_t v324;
  unsigned int v325;
  float *v326;
  float v327;
  float *v328;
  float v329;
  float v330;
  uint64_t v331;
  float v332;
  float *v333;
  float *v334;
  uint64_t v335;
  float *v336;
  float v337;
  float v338;
  float v339;
  float v340;
  float v341;
  float v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  unsigned int v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t *v351;
  unsigned int *v352;
  unsigned int *v353;
  uint64_t v354;
  unsigned int v355;
  unsigned int v356;
  uint64_t v357;
  unint64_t v358;
  unsigned int v359;
  uint64_t v360;
  int v361;
  float *v362;
  uint64_t v363;
  float *v364;
  float v365;
  float v366;
  float v367;
  float *v368;
  float *v369;
  uint64_t v370;
  float v371;
  float v372;
  float v373;
  float v374;
  void *v375;
  uint64_t v376;
  float *v377;
  float *v378;
  uint64_t v379;
  float v380;
  void *v381;
  unsigned int v382;
  void *v383;
  unsigned int v384;
  unsigned int *v385;
  unsigned int v386;
  int v387;
  uint64_t ii;
  unsigned int v389;
  char *v390;
  uint64_t v391;
  int v392;
  float *v393;
  float *v394;
  uint64_t v395;
  float v396;
  unsigned int v397;
  unsigned int v398;
  const void **v399;
  uint64_t v400;
  uint64_t v401;
  float *v402;
  uint64_t v403;
  unsigned int *v404;
  unsigned int *v405;
  uint64_t v406;
  unsigned int **v407;
  unsigned int *v408;
  unsigned int v409;
  uint64_t *v410;
  unsigned int v411;
  uint64_t **v412;
  uint64_t **v413;
  uint64_t *v414;
  unsigned int v415;
  uint64_t v416;
  size_t v417;
  char *v418;
  uint64_t v419;
  unsigned int v420;
  unsigned int v421;
  uint64_t v422;
  _DWORD *v423;
  unint64_t v424;
  uint64_t *v425;
  uint64_t **v426;
  uint64_t **v427;
  uint64_t *v428;
  unsigned int v429;
  int v430;
  size_t v431;
  uint64_t v432;
  int *v433;
  _DWORD *v434;
  int v435;
  unint64_t v436;
  float *v437;
  float *v438;
  float v439;
  uint64_t v440;
  float *v441;
  float v442;
  float v443;
  _QWORD *v444;
  _QWORD *v445;
  uint64_t v446;
  uint64_t v447;
  unsigned int v448;
  int v449;
  int v450;
  char v451;
  unsigned int v452;
  uint64_t *v453;
  uint64_t **v454;
  uint64_t **v455;
  uint64_t *v456;
  unsigned int v457;
  int v458;
  int v459;
  BOOL v460;
  _QWORD *v461;
  _QWORD *v462;
  uint64_t v463;
  uint64_t v464;
  int v465;
  llvm::LiveInterval *v466;
  uint64_t v467;
  uint64_t v468;
  unint64_t v469;
  BOOL v470;
  unint64_t v471;
  uint64_t (*v472)(uint64_t);
  unsigned __int16 *v473;
  uint64_t v474;
  uint64_t v475;
  _QWORD *v476;
  _QWORD *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  int v481;
  int v483;
  char *v484;
  char *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t *v488;
  uint64_t v489;
  char *v490;
  uint64_t v491;
  int32x2_t *v492;
  int32x2_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t *v496;
  uint64_t v497;
  int v498;
  int v499;
  unint64_t v500;
  uint64_t v501;
  unint64_t *v502;
  unint64_t v503;
  uint64_t v505;
  unsigned int v507;
  int v508;
  unsigned int v509;
  void *v510;
  _QWORD *v511;
  uint64_t *v512;
  uint64_t v513;
  uint64_t v514;
  _QWORD *v516;
  uint64_t InlineSpiller;
  uint64_t v518;
  _QWORD *v519;
  llvm::MachineFunction *v520;
  int v521;
  unsigned int v522;
  char *v523;
  uint64_t v524;
  char *v525;
  unsigned int v526;
  char *v527;
  unsigned int v528;
  unsigned int v529;
  unint64_t v530;
  size_t v531;
  char *__dst;
  unsigned int __dsta;
  _QWORD *v534;
  unsigned int v535;
  unsigned int v536;
  uint64_t v537;
  char *v538;
  unsigned int v539;
  _QWORD *v540;
  uint64_t v541;
  llvm::LiveIntervals *v542;
  uint64_t *v543;
  unsigned int v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  _QWORD v548[2];
  int v549;
  uint64_t v550;
  uint64_t v551;
  unsigned int v552;
  _QWORD v553[2];
  int v554;
  uint64_t v555;
  uint64_t v556;
  int v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  uint64_t v564;
  uint64_t v565;
  _QWORD *v566;
  _QWORD *v567;
  _QWORD *v568;
  _QWORD v569[6];
  _QWORD v570[6];
  uint64_t **v571;
  uint64_t *v572;
  uint64_t v573;
  unsigned int *v574;
  float *v575;
  unsigned int v576;
  uint64_t **v577;
  uint64_t v578;
  _QWORD v579[4];
  __int128 v580;
  _QWORD *v581;
  uint64_t v582;
  uint64_t *v583;
  _QWORD *v584;
  uint64_t v585;
  uint64_t *v586;
  _QWORD *v587;
  uint64_t v588;
  uint64_t v589;

  v2 = a1;
  v589 = *MEMORY[0x1E0C80C00];
  v3 = **(void ****)(a1 + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != &llvm::LiveIntervals::ID);
  v5 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), &llvm::LiveIntervals::ID);
  v6 = **(void ****)(v2 + 8);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != &llvm::MachineBlockFrequencyInfo::ID);
  v513 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), &llvm::MachineBlockFrequencyInfo::ID);
  v8 = **(void ****)(v2 + 8);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != &llvm::VirtRegMap::ID);
  v520 = (llvm::MachineFunction *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), &llvm::VirtRegMap::ID);
  v10 = **(void ****)(v2 + 8);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != &llvm::MachineLoopInfo::ID);
  v12 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), &llvm::MachineLoopInfo::ID);
  v570[2] = v5;
  v570[3] = v520;
  v570[4] = v12;
  v570[5] = v513;
  v570[1] = a2;
  v570[0] = &off_1E8149920;
  llvm::VirtRegAuxInfo::calculateSpillWeightsAndHints((llvm::VirtRegAuxInfo *)v570);
  v13 = **(void ****)(v2 + 8);
  do
  {
    v14 = *v13;
    v13 += 2;
  }
  while (v14 != &llvm::MachineLoopInfo::ID);
  v15 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), &llvm::MachineLoopInfo::ID);
  v569[0] = &unk_1E8149000;
  v569[1] = a2;
  v514 = v5;
  v569[2] = v5;
  v569[3] = v520;
  v569[4] = v15;
  v569[5] = v513;
  InlineSpiller = llvm::createInlineSpiller((llvm *)v2, (llvm::MachineFunctionPass *)a2, v520, (llvm::VirtRegMap *)v569, v16);
  llvm::MachineRegisterInfo::freezeReservedRegs(*(llvm::MachineRegisterInfo **)(a2 + 40), (const llvm::MachineFunction *)a2);
  v17 = *(_QWORD *)(a2 + 40);
  v18 = *(_DWORD *)(v17 + 32);
  if (v18)
  {
    for (i = 0; i != v18; ++i)
    {
      LODWORD(v545) = i | 0x80000000;
      v20 = *(_QWORD *)(*(_QWORD *)(v17 + 24) + 16 * (i & 0x7FFFFFFF) + 8);
      if (v20)
      {
        while ((*(_DWORD *)v20 & 0x80000000) != 0)
        {
          v20 = *(_QWORD *)(v20 + 24);
          if (!v20)
            goto LABEL_18;
        }
        sub_1C4778ED8((uint64_t **)(v2 + 256), (unsigned int *)&v545, &v545);
      }
LABEL_18:
      ;
    }
  }
  v516 = (_QWORD *)(v2 + 256);
  if (!*(_QWORD *)(v2 + 272))
    goto LABEL_579;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = (_QWORD *)operator new();
  *v22 = &off_1E81497E8;
  v22[1] = 0;
  v23 = (char **)(v22 + 1);
  v22[2] = 0;
  v22[3] = 0;
  v24 = (_QWORD *)operator new();
  *v24 = &off_1E8149948;
  v568 = v24;
  v25 = (_QWORD *)v22[2];
  if ((unint64_t)v25 >= v22[3])
  {
    v26 = sub_1C4D62F9C(v23, (uint64_t *)&v568);
    v27 = (uint64_t)v568;
    v22[2] = v26;
    v568 = 0;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  }
  else
  {
    *v25 = v24;
    v22[2] = v25 + 1;
    v568 = 0;
  }
  v28 = (_QWORD *)operator new();
  *v28 = &off_1E81499B0;
  v567 = v28;
  v29 = (_QWORD *)v22[2];
  v511 = v22;
  if ((unint64_t)v29 >= v22[3])
  {
    v30 = sub_1C4D62F9C(v23, (uint64_t *)&v567);
    v31 = (uint64_t)v567;
    v22[2] = v30;
    v567 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  else
  {
    *v29 = v28;
    v22[2] = v29 + 1;
    v567 = 0;
  }
  if (byte_1ED7FEC48)
  {
    v32 = (_QWORD *)operator new();
    *v32 = &off_1E8149A18;
    v566 = v32;
    v33 = (_QWORD *)v22[2];
    if ((unint64_t)v33 >= v22[3])
    {
      v34 = sub_1C4D62F9C(v23, (uint64_t *)&v566);
      v35 = (uint64_t)v566;
      v22[2] = v34;
      v566 = 0;
      if (v35)
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    }
    else
    {
      *v33 = v32;
      v22[2] = v33 + 1;
      v566 = 0;
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v21 + 392))(&v565, v21);
  v36 = v565;
  if (v565)
  {
    v37 = v22;
    v38 = (uint64_t *)v22[2];
    if ((unint64_t)v38 >= v22[3])
    {
      v39 = sub_1C4D62F9C(v23, &v565);
      v37 = v22;
    }
    else
    {
      v565 = 0;
      *v38 = v36;
      v39 = (char *)(v38 + 1);
    }
    v40 = v514;
    v37[2] = v39;
    v41 = v565;
    v565 = 0;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  else
  {
    v565 = 0;
    v40 = v514;
  }
  v519 = (_QWORD *)(v2 + 264);
  v512 = (uint64_t *)(v2 + 280);
  v518 = v2;
  do
  {
    v545 = a2;
    v546 = v40;
    v547 = v513;
    v553[0] = 0;
    v553[1] = 0;
    v554 = 0;
    v555 = 0;
    v556 = 0;
    v557 = 0;
    v558 = 0u;
    v559 = 0u;
    v560 = 0u;
    v561 = 0u;
    v562 = 0u;
    v563 = 0u;
    v564 = 0;
    v548[0] = 0;
    v548[1] = 0;
    v549 = 0;
    v550 = 0;
    v551 = 0;
    v552 = 0;
    MEMORY[0x1CAA32FB4](0, 8);
    MEMORY[0x1CAA32FB4](0, 4);
    MEMORY[0x1CAA32FB4](0, 8);
    MEMORY[0x1CAA32FB4](0, 4);
    v42 = (llvm::LiveIntervals *)v546;
    v43 = *(_QWORD *)(v545 + 40);
    v537 = v545;
    v44 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v545 + 16) + 176))(*(_QWORD *)(v545 + 16));
    v45 = (_QWORD *)*v516;
    if ((_QWORD *)*v516 == v519)
    {
      v572 = 0;
      v573 = 0;
      v571 = &v572;
      sub_1C5245168(0);
      goto LABEL_318;
    }
    v46 = v44;
    v542 = v42;
    v47 = 0;
    v48 = (_QWORD *)*v516;
    do
    {
      v49 = v47;
      v50 = (_QWORD *)v48[1];
      if (v50)
      {
        do
        {
          v51 = v50;
          v50 = (_QWORD *)*v50;
        }
        while (v50);
      }
      else
      {
        do
        {
          v51 = (_QWORD *)v48[2];
          v121 = *v51 == (_QWORD)v48;
          v48 = v51;
        }
        while (!v121);
      }
      ++v47;
      v48 = v51;
    }
    while (v51 != v519);
    if (v49 >= 0x3FFFFFFFFFFFFFFFLL)
LABEL_654:
      abort();
    v52 = (char *)operator new(4 * v47);
    v53 = v52;
    do
    {
      *(_DWORD *)v53 = *((_DWORD *)v45 + 7);
      v54 = (_QWORD *)v45[1];
      if (v54)
      {
        do
        {
          v55 = v54;
          v54 = (_QWORD *)*v54;
        }
        while (v54);
      }
      else
      {
        do
        {
          v55 = (_QWORD *)v45[2];
          v121 = *v55 == (_QWORD)v45;
          v45 = v55;
        }
        while (!v121);
      }
      v53 += 4;
      v45 = v55;
    }
    while (v55 != v519);
    v572 = 0;
    v573 = 0;
    v571 = &v572;
    if (v53 == v52)
    {
      v233 = v52;
      sub_1C5245168(0);
      v232 = v233;
LABEL_317:
      operator delete(v232);
      goto LABEL_318;
    }
    v56 = &v52[4 * v47];
    v57 = (_QWORD *)(v46 + 8);
    v540 = (_QWORD *)(v46 + 8);
    if (!v46)
      v57 = 0;
    v534 = v57;
    v58 = (uint64_t)v542;
    v523 = (char *)v542 + 312;
    v525 = v56;
    v59 = v52;
    do
    {
      __dst = v53 - 4;
      v529 = *((_DWORD *)v53 - 1);
      v60 = v529 & 0x7FFFFFFF;
      if (v60 >= *(unsigned int *)(v58 + 416)
        || (v61 = *(llvm::LiveInterval **)(*(_QWORD *)(v58 + 408) + 8 * v60)) == 0)
      {
        v61 = (llvm::LiveInterval *)sub_1C4851220(v58, v529);
        v117 = *(_QWORD *)(v58 + 304);
        v118 = *(_QWORD *)(v58 + 248);
        *(_QWORD *)v117 = v118;
        *(_QWORD *)(v117 + 8) = *(_QWORD *)(v118 + 40);
        *(_OWORD *)(v117 + 16) = *(_OWORD *)(v58 + 288);
        *(_QWORD *)(v117 + 32) = v523;
        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v117);
        *(_DWORD *)(v117 + 184) = 0;
        v119 = *(_QWORD *)(v58 + 256);
        v121 = *(_BYTE *)(v119 + 16) == 0;
        v120 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v119 + 24) + 16 * (*((_DWORD *)v61 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                  + 34);
        v121 = v121 || v120 == 0;
        v122 = !v121;
        llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v58 + 304), v61, v122);
        llvm::LiveIntervals::computeDeadValues(v58, (uint64_t)v61, 0);
      }
      if (!*((_DWORD *)v61 + 2))
      {
        sub_1C5244698(v512, *((_DWORD *)v61 + 28), *((_DWORD *)v61 + 28));
        LODWORD(v580) = *((_DWORD *)v61 + 28);
        sub_1C61D9060((uint64_t)v516, (unsigned int *)&v580);
        goto LABEL_151;
      }
      v62 = *(_QWORD *)(*(_QWORD *)(v43 + 24) + 16 * v60) & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)&v580 = &v581;
      *((_QWORD *)&v580 + 1) = 0x600000000;
      LODWORD(v587) = 0;
      llvm::LiveIntervals::checkRegMaskInterference(v58, (uint64_t)v61, (uint64_t)&v580);
      v63 = *(uint64_t (**)(uint64_t))(v62 + 48);
      if (v63)
      {
        v65 = (unsigned __int16 *)v63(v537);
        if (!v64)
          goto LABEL_109;
      }
      else
      {
        v65 = **(unsigned __int16 ***)v62;
        v64 = *(unsigned __int16 *)(*(_QWORD *)v62 + 20);
        if (!*(_WORD *)(*(_QWORD *)v62 + 20))
        {
LABEL_109:
          v68 = 0;
          v86 = v529;
          goto LABEL_111;
        }
      }
      v527 = v59;
      v66 = 0;
      v67 = 0;
      v68 = 0;
      v69 = &v65[v64];
      do
      {
        v70 = *v65;
        if (((*(_QWORD *)(*(_QWORD *)(v43 + 352) + ((v70 >> 3) & 0x1FF8)) >> v70) & 1) == 0
          && (!(_DWORD)v587 || ((*(_QWORD *)(v580 + ((v70 >> 3) & 0x1FF8)) >> v70) & 1) != 0))
        {
          v71 = v43;
          v72 = *(unsigned int *)(*v534 + 24 * *v65 + 16);
          v73 = (_WORD *)(v534[6] + ((v72 >> 3) & 0x1FFFFFFE));
          v75 = *v73;
          v74 = v73 + 1;
          v76 = v75 + (v72 & 0xF) * v70;
          do
          {
            v77 = sub_1C50E4F00(v542, v76);
            if (*((_DWORD *)v77 + 2) && llvm::LiveRange::overlapsFrom((uint64_t)v61, (uint64_t)v77, *(_QWORD **)v77))
              goto LABEL_92;
            v78 = *v74++;
            v76 += v78;
          }
          while (v78);
          if (v67 >= (char *)v66)
          {
            v79 = (v67 - v68) >> 2;
            v80 = v79 + 1;
            if ((unint64_t)(v79 + 1) >> 62)
              goto LABEL_654;
            if (((char *)v66 - v68) >> 1 > v80)
              v80 = ((char *)v66 - v68) >> 1;
            if ((unint64_t)((char *)v66 - v68) >= 0x7FFFFFFFFFFFFFFCLL)
              v81 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v81 = v80;
            if (v81)
            {
              if (v81 >> 62)
                goto LABEL_655;
              v82 = (char *)operator new(4 * v81);
            }
            else
            {
              v82 = 0;
            }
            v83 = &v82[4 * v79];
            *(_DWORD *)v83 = v70;
            v84 = v83 + 4;
            while (v67 != v68)
            {
              v85 = *((_DWORD *)v67 - 1);
              v67 -= 4;
              *((_DWORD *)v83 - 1) = v85;
              v83 -= 4;
            }
            v66 = (uint64_t *)&v82[4 * v81];
            if (v68)
              operator delete(v68);
            v68 = v83;
            v67 = v84;
          }
          else
          {
            *(_DWORD *)v67 = v70;
            v67 += 4;
          }
LABEL_92:
          v43 = v71;
        }
        ++v65;
      }
      while (v65 != v69);
      v86 = v529;
      if (v68 != v67)
      {
        v87 = v572;
        v88 = &v572;
        v89 = &v572;
        v59 = v527;
        if (v572)
        {
          while (1)
          {
            while (1)
            {
              v88 = (uint64_t **)v87;
              v90 = *((_DWORD *)v87 + 8);
              if (v90 <= v529)
                break;
              v87 = *v88;
              v89 = v88;
              if (!*v88)
                goto LABEL_102;
            }
            if (v90 >= v529)
              break;
            v87 = v88[1];
            if (!v87)
            {
              v89 = v88 + 1;
              goto LABEL_102;
            }
          }
        }
        else
        {
LABEL_102:
          v91 = (uint64_t *)v88;
          v88 = (uint64_t **)operator new(0x40uLL);
          *((_DWORD *)v88 + 8) = v529;
          *v88 = 0;
          v88[1] = 0;
          v88[6] = 0;
          v88[7] = 0;
          v88[5] = 0;
          v88[2] = v91;
          *v89 = (uint64_t *)v88;
          v92 = (uint64_t *)v88;
          if (*v571)
          {
            v571 = (uint64_t **)*v571;
            v92 = *v89;
          }
          sub_1C4768E74(v572, v92);
          ++v573;
        }
        v93 = v88[5];
        if (v93)
        {
          v88[6] = v93;
          operator delete(v93);
        }
        v88[5] = (uint64_t *)v68;
        v88[6] = (uint64_t *)v67;
        v88[7] = v66;
        v2 = v518;
        v58 = (uint64_t)v542;
        goto LABEL_149;
      }
      v59 = v527;
LABEL_111:
      v577 = (uint64_t **)v579;
      v578 = 0x800000000;
      v58 = (uint64_t)v542;
      sub_1C52443CC(v518, v86, (uint64_t)&v577, v537, (uint64_t)v542, (uint64_t)v520, InlineSpiller);
      v94 = v578;
      if ((_DWORD)v578)
      {
        v95 = (uint64_t *)v577;
        v96 = __dst;
        v97 = __dst - v59;
        v98 = &v59[(__dst - v59) & 0xFFFFFFFFFFFFFFFCLL];
        if (v578 > (v525 - __dst) >> 2)
        {
          v99 = v59;
          v100 = v97 >> 2;
          v101 = (v97 >> 2) + v578;
          if (v101 >> 62)
            goto LABEL_654;
          if ((v525 - v99) >> 1 > v101)
            v101 = (v525 - v99) >> 1;
          v102 = 0x3FFFFFFFFFFFFFFFLL;
          if ((unint64_t)(v525 - v99) < 0x7FFFFFFFFFFFFFFCLL)
            v102 = v101;
          v530 = v102;
          if (v102)
          {
            if (v102 >> 62)
LABEL_655:
              sub_1C4764EE4();
            v103 = (uint64_t *)v577;
            v104 = (char *)operator new(4 * v102);
          }
          else
          {
            v103 = (uint64_t *)v577;
            v104 = 0;
          }
          v113 = &v104[4 * v100];
          memcpy(v113, v103, 4 * v94);
          if (v99 != __dst)
          {
            v114 = 4 * v100;
            do
            {
              *(_DWORD *)&v104[v114 - 4] = *(_DWORD *)&v99[v114 - 4];
              v114 -= 4;
            }
            while (v114);
            v113 = v104;
          }
          v115 = (v97 & 0xFFFFFFFFFFFFFFFCLL) + 4 * v94;
          v116 = &v104[v115];
          if (__dst != v98)
            memmove(&v104[v115], v98, __dst - v98);
          v525 = &v104[4 * v530];
          v105 = &v116[__dst - v98];
          if (v99)
            operator delete(v99);
          v59 = v113;
          goto LABEL_143;
        }
        v106 = (uint64_t *)((char *)v577 + 4 * v578);
        v107 = (__dst - v98) >> 2;
        if (v107 >= v578)
        {
          v109 = __dst;
        }
        else
        {
          v108 = (char *)v577 + 4 * v107;
          memmove(__dst, v108, (char *)v106 - v108);
          v96 = __dst;
          v109 = &__dst[(char *)v106 - v108];
          if (__dst - v98 < 1)
          {
            v105 = &__dst[(char *)v106 - v108];
LABEL_143:
            v58 = (uint64_t)v542;
            goto LABEL_144;
          }
          v106 = (uint64_t *)v108;
        }
        v110 = &v109[-4 * v94];
        v105 = v109;
        while (v110 < v96)
        {
          v111 = *(_DWORD *)v110;
          v110 += 4;
          *(_DWORD *)v105 = v111;
          v105 += 4;
        }
        v112 = &v98[4 * v94];
        if (v109 != v112)
          memmove(&v109[-4 * ((v109 - v112) >> 2)], v98, v109 - v112);
        if (v106 != v95)
          memmove(v98, v95, (char *)v106 - (char *)v95);
        goto LABEL_143;
      }
      v105 = __dst;
LABEL_144:
      if (v577 != v579)
        free(v577);
      if (v68)
        operator delete(v68);
      __dst = v105;
      v2 = v518;
LABEL_149:
      if ((_QWORD **)v580 != &v581)
        free((void *)v580);
LABEL_151:
      v53 = __dst;
    }
    while (v59 != __dst);
    v123 = v571;
    if (v571 == &v572)
      goto LABEL_313;
    do
    {
      LODWORD(v574) = *((_DWORD *)v123 + 8);
      if ((v574 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(v58 + 416)
        || (v124 = *(llvm::LiveInterval **)(*(_QWORD *)(v58 + 408) + 8 * (v574 & 0x7FFFFFFF))) == 0)
      {
        v124 = (llvm::LiveInterval *)sub_1C4851220(v58, (int)v574);
        v225 = *(_QWORD *)(v58 + 304);
        v226 = *(_QWORD *)(v58 + 248);
        *(_QWORD *)v225 = v226;
        *(_QWORD *)(v225 + 8) = *(_QWORD *)(v226 + 40);
        *(_OWORD *)(v225 + 16) = *(_OWORD *)(v58 + 288);
        *(_QWORD *)(v225 + 32) = v523;
        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v225);
        *(_DWORD *)(v225 + 184) = 0;
        v227 = *(_QWORD *)(v58 + 256);
        v121 = *(_BYTE *)(v227 + 16) == 0;
        v228 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v227 + 24) + 16 * (*((_DWORD *)v124 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                  + 34);
        v230 = !v121 && v228 != 0;
        llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v58 + 304), v124, v230);
        llvm::LiveIntervals::computeDeadValues(v58, (uint64_t)v124, 0);
      }
      if (!*((_DWORD *)v124 + 2))
      {
        sub_1C4778ED8((uint64_t **)v512, (unsigned int *)&v574, &v574);
        sub_1C61D9060((uint64_t)v516, (unsigned int *)&v574);
        goto LABEL_292;
      }
      v125 = ((unint64_t)((char *)v123[6] - (char *)v123[5]) >> 2) + 1;
      v126 = (void *)operator new[]();
      bzero(v126, 4 * v125);
      v127 = v123[5];
      if (v123[6] != v127)
      {
        v128 = 0;
        v129 = 0;
        do
        {
          v130 = *((_DWORD *)v127 + v128);
          v131 = *(_QWORD **)(v537 + 40);
          if (*((_BYTE *)v131 + 144))
          {
            v133 = (_WORD *)v131[19];
          }
          else
          {
            v132 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v131 + 16) + 176))(*(_QWORD *)(*v131 + 16));
            v133 = (_WORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v132 + 32))(v132, *v131);
          }
          v134 = (unsigned __int16)*v133;
          if (*v133)
          {
            v135 = 1;
            while (v130 != v134 && (v130 - 1 > 0x3FFFFFFE || !llvm::MCRegisterInfo::regsOverlap(v540, v130, v134)))
            {
              v134 = (unsigned __int16)v133[v135++];
              if (!v134)
                goto LABEL_178;
            }
            *((float *)v126 + (v129 + 1)) = *((float *)v126 + (v129 + 1)) + 1.0;
          }
LABEL_178:
          v127 = v123[5];
          v128 = ++v129;
        }
        while (v129 != ((char *)v123[6] - (char *)v127) >> 2);
      }
      LODWORD(v577) = v125;
      v578 = (uint64_t)v126;
      sub_1C5240A44((std::__shared_weak_count **)&v580, (uint64_t)v553, (unsigned int *)&v577);
      v136 = v578;
      v578 = 0;
      if (v136)
        MEMORY[0x1CAA32F9C](v136, 0x1000C8052888210);
      v137 = v580;
      if (*((_QWORD *)&v580 + 1))
      {
        v138 = (unint64_t *)(*((_QWORD *)&v580 + 1) + 8);
        do
          v139 = __ldxr(v138);
        while (__stxr(v139 + 1, v138));
      }
      if ((_QWORD)v560 == *((_QWORD *)&v560 + 1))
      {
        v157 = *((_QWORD *)&v558 + 1);
        v156 = v559;
        v140 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v559 - *((_QWORD *)&v558 + 1)) >> 3);
        if ((unint64_t)v559 >= *((_QWORD *)&v559 + 1))
        {
          v159 = v140 + 1;
          if ((unint64_t)(v140 + 1) > 0x2E8BA2E8BA2E8BALL)
            goto LABEL_654;
          if (0x5D1745D1745D1746 * ((uint64_t)(*((_QWORD *)&v559 + 1) - *((_QWORD *)&v558 + 1)) >> 3) > v159)
            v159 = 0x5D1745D1745D1746 * ((uint64_t)(*((_QWORD *)&v559 + 1) - *((_QWORD *)&v558 + 1)) >> 3);
          if ((unint64_t)(0x2E8BA2E8BA2E8BA3
                                * ((uint64_t)(*((_QWORD *)&v559 + 1) - *((_QWORD *)&v558 + 1)) >> 3)) >= 0x1745D1745D1745DLL)
            v160 = 0x2E8BA2E8BA2E8BALL;
          else
            v160 = v159;
          if (v160 > 0x2E8BA2E8BA2E8BALL)
            goto LABEL_655;
          v161 = 88 * v160;
          v162 = (char *)operator new(88 * v160);
          v163 = &v162[88 * v140];
          *(_OWORD *)v163 = v137;
          *((_QWORD *)v163 + 2) = 0;
          *((_DWORD *)v163 + 6) = 0;
          *((_QWORD *)v163 + 4) = 0;
          *((_DWORD *)v163 + 10) = 0;
          v158 = v163 + 88;
          *((_OWORD *)v163 + 3) = 0u;
          *((_OWORD *)v163 + 4) = 0u;
          *((_QWORD *)v163 + 10) = 0;
          if (v156 == v157)
          {
            *((_QWORD *)&v558 + 1) = &v162[88 * v140];
            *(_QWORD *)&v559 = v163 + 88;
            *((_QWORD *)&v559 + 1) = &v162[v161];
          }
          else
          {
            v164 = 0;
            do
            {
              v165 = &v163[v164];
              v166 = v156 + v164;
              *(_OWORD *)(v165 - 88) = *(_OWORD *)(v156 + v164 - 88);
              *(_QWORD *)(v166 - 88) = 0;
              *(_QWORD *)(v166 - 80) = 0;
              v167 = *(_QWORD *)(v156 + v164 - 72);
              *((_DWORD *)v165 - 16) = *(_DWORD *)(v156 + v164 - 64);
              *((_QWORD *)v165 - 9) = v167;
              v168 = *(_QWORD *)(v156 + v164 - 56);
              *(_QWORD *)(v166 - 56) = 0;
              *((_QWORD *)v165 - 7) = v168;
              *((_DWORD *)v165 - 12) = *(_DWORD *)(v156 + v164 - 48);
              *(_OWORD *)(v165 - 40) = *(_OWORD *)(v156 + v164 - 40);
              *(_QWORD *)(v166 - 40) = 0;
              *(_QWORD *)(v166 - 32) = 0;
              *(_OWORD *)(v165 - 24) = *(_OWORD *)(v156 + v164 - 24);
              *((_QWORD *)v165 - 1) = *(_QWORD *)(v156 + v164 - 8);
              *(_QWORD *)(v166 - 24) = 0;
              *(_QWORD *)(v166 - 16) = 0;
              *(_QWORD *)(v166 - 8) = 0;
              v164 -= 88;
            }
            while (v156 + v164 != v157);
            v156 = *((_QWORD *)&v558 + 1);
            v169 = v559;
            *((_QWORD *)&v558 + 1) = &v163[v164];
            *(_QWORD *)&v559 = v163 + 88;
            *((_QWORD *)&v559 + 1) = &v162[v161];
            while (v169 != v156)
            {
              v170 = *(void **)(v169 - 24);
              if (v170)
              {
                *(_QWORD *)(v169 - 16) = v170;
                operator delete(v170);
              }
              v171 = *(std::__shared_weak_count **)(v169 - 32);
              if (v171)
              {
                p_shared_owners = (unint64_t *)&v171->__shared_owners_;
                do
                  v173 = __ldaxr(p_shared_owners);
                while (__stlxr(v173 - 1, p_shared_owners));
                if (!v173)
                {
                  ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
                  std::__shared_weak_count::__release_weak(v171);
                }
              }
              v174 = *(_QWORD *)(v169 - 56);
              *(_QWORD *)(v169 - 56) = 0;
              if (v174)
                MEMORY[0x1CAA32F9C](v174, 0x1000C8052888210);
              v175 = *(std::__shared_weak_count **)(v169 - 80);
              if (v175)
              {
                v176 = (unint64_t *)&v175->__shared_owners_;
                do
                  v177 = __ldaxr(v176);
                while (__stlxr(v177 - 1, v176));
                if (!v177)
                {
                  ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                  std::__shared_weak_count::__release_weak(v175);
                }
              }
              v169 -= 88;
            }
          }
          if (v156)
            operator delete((void *)v156);
        }
        else
        {
          *(_QWORD *)v559 = v137;
          *(_QWORD *)(v156 + 8) = *((_QWORD *)&v137 + 1);
          *(_QWORD *)(v156 + 16) = 0;
          *(_DWORD *)(v156 + 24) = 0;
          *(_QWORD *)(v156 + 32) = 0;
          *(_DWORD *)(v156 + 40) = 0;
          v158 = (char *)(v156 + 88);
          *(_OWORD *)(v156 + 48) = 0u;
          *(_OWORD *)(v156 + 64) = 0u;
          *(_QWORD *)(v156 + 80) = 0;
        }
        *(_QWORD *)&v559 = v158;
      }
      else
      {
        v140 = *(unsigned int *)(*((_QWORD *)&v560 + 1) - 4);
        *((_QWORD *)&v560 + 1) -= 4;
        v141 = *((_QWORD *)&v558 + 1);
        v142 = *((_QWORD *)&v558 + 1) + 88 * v140;
        v143 = *(std::__shared_weak_count **)(v142 + 8);
        *(_OWORD *)v142 = v137;
        if (v143)
        {
          v144 = (unint64_t *)&v143->__shared_owners_;
          do
            v145 = __ldaxr(v144);
          while (__stlxr(v145 - 1, v144));
          if (!v145)
          {
            ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
            std::__shared_weak_count::__release_weak(v143);
          }
        }
        v146 = v141 + 88 * v140;
        *(_QWORD *)(v146 + 16) = 0;
        *(_DWORD *)(v146 + 24) = 0;
        v147 = *(_QWORD *)(v146 + 32);
        *(_QWORD *)(v146 + 32) = 0;
        if (v147)
          MEMORY[0x1CAA32F9C](v147, 0x1000C8052888210);
        v148 = v141 + 88 * v140;
        *(_DWORD *)(v148 + 40) = 0;
        v149 = *(std::__shared_weak_count **)(v148 + 56);
        *(_QWORD *)(v148 + 48) = 0;
        *(_QWORD *)(v148 + 56) = 0;
        if (v149)
        {
          v150 = (unint64_t *)&v149->__shared_owners_;
          do
            v151 = __ldaxr(v150);
          while (__stlxr(v151 - 1, v150));
          if (!v151)
          {
            ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
            std::__shared_weak_count::__release_weak(v149);
          }
        }
        v152 = v141 + 88 * v140;
        v155 = *(void **)(v152 + 64);
        v154 = (_QWORD *)(v152 + 64);
        v153 = v155;
        if (v155)
        {
          *(_QWORD *)(v141 + 88 * v140 + 72) = v153;
          operator delete(v153);
        }
        *v154 = 0;
        v154[1] = 0;
        v154[2] = 0;
      }
      if ((_QWORD)v558)
      {
        v178 = (int **)(*(_QWORD *)(*(_QWORD *)v558 + 128) + 88 * v140);
        sub_1C524474C((uint64_t)(v178 + 2), **v178);
      }
      v179 = (std::__shared_weak_count *)*((_QWORD *)&v580 + 1);
      if (*((_QWORD *)&v580 + 1))
      {
        v180 = (unint64_t *)(*((_QWORD *)&v580 + 1) + 8);
        do
          v181 = __ldaxr(v180);
        while (__stlxr(v181 - 1, v180));
        if (!v181)
        {
          ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
          std::__shared_weak_count::__release_weak(v179);
        }
      }
      v182 = *((_QWORD *)&v558 + 1);
      *(_DWORD *)(*((_QWORD *)&v558 + 1) + 88 * v140 + 40) = (_DWORD)v574;
      v183 = ((char *)v123[6] - (char *)v123[5]) >> 2;
      v184 = (void *)operator new[]();
      v185 = v184;
      if ((_DWORD)v183)
        bzero(v184, 4 * v183);
      v186 = v123[5];
      v187 = v123[6];
      if (v187 != v186)
        memmove(v185, v186, (char *)v187 - (char *)v186);
      v188 = v552;
      if (!v552)
      {
LABEL_267:
        v209 = (char *)operator new(0x40uLL);
        v204 = (std::__shared_weak_count *)v209;
        *((_QWORD *)v209 + 1) = 0;
        v210 = (unint64_t *)(v209 + 8);
        *((_QWORD *)v209 + 2) = 0;
        v211 = (unint64_t *)(v209 + 16);
        *(_QWORD *)v209 = &off_1E8149A48;
        v212 = (uint64_t *)(v209 + 24);
        *((_QWORD *)v209 + 5) = &v550;
        *((_DWORD *)v209 + 12) = v183;
        v205 = (uint64_t)(v209 + 48);
        *((_QWORD *)v209 + 7) = v185;
        do
          v213 = __ldxr(v210);
        while (__stxr(v213 + 1, v210));
        do
          v214 = __ldxr(v211);
        while (__stxr(v214 + 1, v211));
        *((_QWORD *)v209 + 3) = v209 + 24;
        *((_QWORD *)v209 + 4) = v209;
        do
          v215 = __ldaxr(v210);
        while (__stlxr(v215 - 1, v210));
        if (!v215)
        {
          (*(void (**)(char *))(*(_QWORD *)v209 + 16))(v209);
          std::__shared_weak_count::__release_weak(v204);
        }
        v577 = (uint64_t **)v212;
        *(_QWORD *)&v580 = 0;
        if ((sub_1C5244E24(v550, v552, (unint64_t *)&v577, (unint64_t **)&v580) & 1) != 0)
        {
          do
LABEL_280:
            v217 = __ldxr(v210);
          while (__stxr(v217 + 1, v210));
          do
            v218 = __ldaxr(v210);
          while (__stlxr(v218 - 1, v210));
          if (!v218)
          {
            v185 = 0;
            goto LABEL_284;
          }
          goto LABEL_286;
        }
        v216 = v552;
        if (4 * (int)v551 + 4 >= 3 * v552)
        {
          v216 = 2 * v552;
        }
        else if (v552 + ~(_DWORD)v551 - HIDWORD(v551) > v552 >> 3)
        {
LABEL_277:
          LODWORD(v551) = v551 + 1;
          if (*(_QWORD *)v580)
            --HIDWORD(v551);
          *(_QWORD *)v580 = v212;
          goto LABEL_280;
        }
        sub_1C5245048((uint64_t)&v550, v216);
        *(_QWORD *)&v580 = 0;
        sub_1C5244E24(v550, v552, (unint64_t *)&v577, (unint64_t **)&v580);
        goto LABEL_277;
      }
      v189 = v550;
      v190 = sub_1C52447CC((unsigned int *)v185, (unsigned int *)v185 + v183);
      DWORD2(v580) = 0;
      *(_QWORD *)&v580 = 0;
      v191 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
      if ((v191 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
      {
        v231 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v231 = 0xFF51AFD7ED558CCDLL;
        qword_1ED7EAC80 = v231;
        __cxa_guard_release(&qword_1ED7EAC88);
      }
      LODWORD(v580) = v183;
      *(_QWORD *)((char *)&v580 + 4) = v190;
      v192 = __ROR8__(v190 + 12, 12);
      v193 = (v188 - 1) & ((-348639895
                          * ((((0x9DDFEA08EB382D69
                                            * (v192 ^ ((0x9DDFEA08EB382D69
                                                      * (qword_1ED7EAC80 ^ (unint64_t)v580 ^ v192)) >> 47) ^ (0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ (unint64_t)v580 ^ v192)))) >> 32) >> 15) ^ (-348639895 * (v192 ^ (((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ (unint64_t)v580 ^ v192)) >> 32) >> 15) ^ (-348639895 * (qword_1ED7EAC80 ^ v183 ^ v192)))))) ^ v190);
      for (j = 1; ; ++j)
      {
        v195 = v193;
        v196 = *(_QWORD *)(v189 + 8 * v193);
        if (v196 < 2)
          goto LABEL_250;
        if (*(_DWORD *)(v196 + 24) != (_DWORD)v183)
          goto LABEL_258;
        if (!(_DWORD)v183)
          break;
        v197 = *(_DWORD **)(v196 + 32);
        v198 = 4 * v183;
        v199 = v185;
        while (*v199 == *v197)
        {
          ++v199;
          ++v197;
          v198 -= 4;
          if (!v198)
            goto LABEL_259;
        }
LABEL_250:
        if (!v196)
          goto LABEL_267;
LABEL_258:
        v200 = j + v195;
        v193 = v200 & (v188 - 1);
      }
LABEL_259:
      v201 = (_QWORD *)(v189 + 8 * v195);
      if (v201 == (_QWORD *)(v550 + 8 * v552))
        goto LABEL_267;
      v202 = *(std::__shared_weak_count **)(v196 + 8);
      if (!v202 || (v203 = std::__shared_weak_count::lock(v202)) == 0)
        sub_1C5240EB8();
      v204 = v203;
      v205 = *v201 + 24;
      v206 = (unint64_t *)&v203->__shared_owners_;
      do
        v207 = __ldxr(v206);
      while (__stxr(v207 + 1, v206));
      do
        v208 = __ldaxr(v206);
      while (__stlxr(v208 - 1, v206));
      if (v208)
      {
LABEL_285:
        MEMORY[0x1CAA32F9C](v185, 0x1000C8052888210);
      }
      else
      {
LABEL_284:
        ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
        std::__shared_weak_count::__release_weak(v204);
        if (v185)
          goto LABEL_285;
      }
LABEL_286:
      v219 = v182 + 88 * v140;
      v220 = *(std::__shared_weak_count **)(v219 + 56);
      *(_QWORD *)(v219 + 48) = v205;
      *(_QWORD *)(v219 + 56) = v204;
      v58 = (uint64_t)v542;
      if (v220)
      {
        v221 = (unint64_t *)&v220->__shared_owners_;
        do
          v222 = __ldaxr(v221);
        while (__stlxr(v222 - 1, v221));
        if (!v222)
        {
          ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
          std::__shared_weak_count::__release_weak(v220);
        }
      }
      LODWORD(v580) = (_DWORD)v574;
      sub_1C4A0CDB4((uint64_t)v548, (int *)&v580)[1] = v140;
LABEL_292:
      v223 = v123[1];
      if (v223)
      {
        do
        {
          v224 = (uint64_t **)v223;
          v223 = (uint64_t *)*v223;
        }
        while (v223);
      }
      else
      {
        do
        {
          v224 = (uint64_t **)v123[2];
          v121 = *v224 == (uint64_t *)v123;
          v123 = v224;
        }
        while (!v121);
      }
      v123 = v224;
    }
    while (v224 != &v572);
LABEL_313:
    sub_1C5245168(v572);
    v232 = __dst;
    if (__dst)
      goto LABEL_317;
LABEL_318:
    (*(void (**)(_QWORD *, uint64_t *))(*v511 + 16))(v511, &v545);
    if (*((_QWORD *)&v558 + 1) == (_QWORD)v559)
    {
      v572 = 0;
      v573 = 0;
      v571 = &v572;
      goto LABEL_556;
    }
    v581 = 0;
    v582 = 0;
    *(_QWORD *)&v580 = &v545;
    *((_QWORD *)&v580 + 1) = &v581;
    v584 = 0;
    v585 = 0;
    v587 = 0;
    v588 = 0;
    v583 = (uint64_t *)&v584;
    v586 = (uint64_t *)&v587;
    *(_QWORD *)&v558 = &v580;
    LODWORD(v577) = 0;
    HIDWORD(v577) = -1171354717 * (((_QWORD)v559 - *((_QWORD *)&v558 + 1)) >> 3);
    v578 = (uint64_t)&v560;
    LODWORD(v577) = sub_1C5245708((uint64_t)&v577, 0);
    v234 = v577;
    v574 = (unsigned int *)v577;
    v575 = (float *)&v560;
    LODWORD(v577) = -1171354717 * (((_QWORD)v559 - *((_QWORD *)&v558 + 1)) >> 3);
    HIDWORD(v577) = (_DWORD)v577;
    v578 = (uint64_t)&v560;
    for (k = sub_1C5245708((uint64_t)&v577, v577); v234 != k; LODWORD(v574) = v234)
    {
      v236 = (int **)(*(_QWORD *)(*(_QWORD *)v558 + 128) + 88 * v234);
      sub_1C524474C((uint64_t)(v236 + 2), **v236);
      LODWORD(v574) = v234 + 1;
      v234 = sub_1C5245708((uint64_t)&v574, v234 + 1);
    }
    LODWORD(v577) = 0;
    HIDWORD(v577) = -1431655765 * (((_QWORD)v562 - *((_QWORD *)&v561 + 1)) >> 4);
    v578 = (uint64_t)&v563;
    LODWORD(v577) = sub_1C5245708((uint64_t)&v577, 0);
    v237 = v577;
    v574 = (unsigned int *)v577;
    v575 = (float *)&v563;
    LODWORD(v577) = -1431655765 * (((_QWORD)v562 - *((_QWORD *)&v561 + 1)) >> 4);
    HIDWORD(v577) = (_DWORD)v577;
    v578 = (uint64_t)&v563;
    for (m = sub_1C5245708((uint64_t)&v577, v577); v237 != m; LODWORD(v574) = v237)
    {
      v239 = v558;
      sub_1C52429D0(*(_QWORD *)(*(_QWORD *)v558 + 128), *(_QWORD *)(*(_QWORD *)v558 + 176), v237, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v558 + 176) + 48 * v237 + 20));
      sub_1C52429D0(*(_QWORD *)(*(_QWORD *)v239 + 128), *(_QWORD *)(*(_QWORD *)v239 + 176), v237, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v239 + 176) + 48 * v237 + 24));
      LODWORD(v574) = v237 + 1;
      v237 = sub_1C5245708((uint64_t)&v574, v237 + 1);
    }
    v572 = 0;
    v573 = 0;
    v571 = &v572;
    v240 = v580;
    v241 = -1171354717 * ((*(_QWORD *)(v240 + 136) - *(_QWORD *)(v240 + 128)) >> 3);
    LODWORD(v577) = 0;
    HIDWORD(v577) = v241;
    v578 = v580 + 152;
    LODWORD(v577) = sub_1C5245708((uint64_t)&v577, 0);
    v242 = v577;
    v574 = (unsigned int *)v577;
    v575 = (float *)(v240 + 152);
    LODWORD(v577) = -1171354717 * ((*(_QWORD *)(v240 + 136) - *(_QWORD *)(v240 + 128)) >> 3);
    HIDWORD(v577) = (_DWORD)v577;
    v578 = v240 + 152;
    v243 = sub_1C5245708((uint64_t)&v577, v577);
    if (v242 != v243)
    {
      v244 = v243;
      do
      {
        v245 = *(_QWORD *)(v580 + 128);
        if (*(_QWORD *)(v245 + 88 * v242 + 72) - *(_QWORD *)(v245 + 88 * v242 + 64) > 0xBuLL)
        {
          v246 = *(unsigned int *)(v245 + 88 * v242 + 20);
          if (*(_DWORD *)(v245 + 88 * v242 + 24) < v246)
            goto LABEL_336;
          v247 = *(_DWORD **)(v245 + 88 * v242 + 32);
          if ((_DWORD)v246)
          {
            v248 = 4 * v246;
            v249 = v247;
            while (*v249)
            {
              ++v249;
              v248 -= 4;
              if (!v248)
              {
                v249 = &v247[v246];
                break;
              }
            }
          }
          else
          {
            v249 = v247;
          }
          if (v246 == v249 - v247)
          {
            LODWORD(v577) = v242;
            sub_1C5244364((uint64_t)&v580, v242);
            sub_1C4778ED8(&v586, (unsigned int *)&v577, &v577);
            *(_DWORD *)(*(_QWORD *)(v580 + 128) + 88 * v577 + 16) = 1;
          }
          else
          {
LABEL_336:
            LODWORD(v577) = v242;
            sub_1C5244364((uint64_t)&v580, v242);
            sub_1C4778ED8(&v583, (unsigned int *)&v577, &v577);
            *(_DWORD *)(*(_QWORD *)(v580 + 128) + 88 * v577 + 16) = 2;
          }
        }
        else
        {
          LODWORD(v577) = v242;
          sub_1C5244364((uint64_t)&v580, v242);
          sub_1C4778ED8((uint64_t **)&v580 + 1, (unsigned int *)&v577, &v577);
          *(_DWORD *)(*(_QWORD *)(v580 + 128) + 88 * v577 + 16) = 3;
        }
        LODWORD(v574) = v242 + 1;
        v242 = sub_1C5245708((uint64_t)&v574, v242 + 1);
        LODWORD(v574) = v242;
      }
      while (v242 != v244);
    }
    v250 = 0;
    v251 = 0;
    v252 = 0;
    v541 = v580;
    while (2)
    {
      while (v582)
      {
        v253 = (void *)*((_QWORD *)&v580 + 1);
        v254 = *(_DWORD *)(*((_QWORD *)&v580 + 1) + 28);
        sub_1C485B670((uint64_t **)&v580 + 1, *((uint64_t **)&v580 + 1));
        operator delete(v253);
        if (v251 >= (unsigned int *)v252)
        {
          v261 = v251 - v250;
          v262 = v261 + 1;
          if ((unint64_t)(v261 + 1) >> 62)
            goto LABEL_654;
          if ((v252 - (char *)v250) >> 1 > v262)
            v262 = (v252 - (char *)v250) >> 1;
          if ((unint64_t)(v252 - (char *)v250) >= 0x7FFFFFFFFFFFFFFCLL)
            v263 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v263 = v262;
          if (v263)
          {
            if (v263 >> 62)
              goto LABEL_655;
            v264 = (char *)operator new(4 * v263);
          }
          else
          {
            v264 = 0;
          }
          v276 = (unsigned int *)&v264[4 * v261];
          *v276 = v254;
          v277 = v276 + 1;
          while (v251 != v250)
          {
            v278 = *--v251;
            *--v276 = v278;
          }
          v252 = &v264[4 * v263];
          if (v250)
            operator delete(v250);
          v250 = v276;
          v251 = v277;
        }
        else
        {
          *v251++ = v254;
        }
        v279 = v580;
        v280 = *(_QWORD *)(v580 + 128);
        v281 = v280 + 88 * v254;
        v282 = *(unsigned int **)(v281 + 64);
        v283 = (uint64_t)(*(_QWORD *)(v281 + 72) - (_QWORD)v282) >> 2;
        if (v283)
        {
          v538 = v252;
          v543 = (uint64_t *)v580;
          if (v283 == 2)
          {
            v284 = *v282;
            v285 = *(_QWORD *)(v580 + 176);
            v286 = *(_DWORD *)(v285 + 48 * *v282 + 20);
            __dsta = v286;
            if (v286 == v254)
              __dsta = *(_DWORD *)(v285 + 48 * v284 + 24);
            v287 = v282[1];
            v288 = *(_DWORD *)(v285 + 48 * v287 + 20);
            v535 = v288;
            if (v288 == v254)
              v535 = *(_DWORD *)(v285 + 48 * v287 + 24);
            v289 = *(unsigned int **)(v280 + 88 * v254);
            v521 = *(_DWORD *)(v285 + 48 * v284 + 20);
            if (v286 == v254)
            {
              v290 = (unsigned int *)operator new();
              sub_1C524549C((uint64_t)&v574, *(unsigned int **)(*(_QWORD *)(v279 + 176) + 48 * v284));
              *(_QWORD *)v290 = v574;
              *((_QWORD *)v290 + 1) = v575;
              sub_1C5243020(v290 + 4, v290);
            }
            else
            {
              v290 = *(unsigned int **)(v285 + 48 * v284);
            }
            v526 = v287;
            v528 = v284;
            v522 = v288;
            if (v288 == v254)
            {
              v314 = (unsigned int *)operator new();
              sub_1C524549C((uint64_t)&v574, *(unsigned int **)(*(_QWORD *)(v279 + 176) + 48 * v287));
              *(_QWORD *)v314 = v574;
              *((_QWORD *)v314 + 1) = v575;
              sub_1C5243020(v314 + 4, v314);
            }
            else
            {
              v314 = *(unsigned int **)(*(_QWORD *)(v279 + 176) + 48 * v287);
            }
            v315 = *v289;
            v316 = *v290;
            v317 = *v314;
            v524 = (v317 * v316);
            v531 = 4 * v524;
            v318 = (char *)operator new[]();
            bzero(v318, 4 * v524);
            if ((_DWORD)v316)
            {
              for (n = 0; n != v316; ++n)
              {
                if ((_DWORD)v317)
                {
                  v320 = 0;
                  v321 = 0;
                  v322 = *((_QWORD *)v290 + 1);
                  v323 = v290[1];
                  v324 = *((_QWORD *)v314 + 1);
                  v325 = v314[1];
                  v326 = (float *)*((_QWORD *)v289 + 1);
                  v327 = *(float *)(v322 + 4 * v323 * n);
                  v329 = *v326;
                  v328 = v326 + 1;
                  v330 = v329;
                  v331 = v322 + 4 * v323 * n + 4;
                  do
                  {
                    v332 = v330 + (float)(v327 + *(float *)(v324 + 4 * v325 * v321));
                    if (v315 >= 2)
                    {
                      v333 = (float *)v331;
                      v334 = v328;
                      v335 = v315 - 1;
                      v336 = (float *)(v324 + 4 + 4 * v320);
                      do
                      {
                        v337 = *v333++;
                        v338 = v337;
                        v339 = *v336++;
                        v340 = v338 + v339;
                        v341 = *v334++;
                        v342 = v340 + v341;
                        if (v342 < v332)
                          v332 = v342;
                        --v335;
                      }
                      while (v335);
                    }
                    *(float *)&v318[4 * (v317 * n) + 4 * v321++] = v332;
                    v320 += v325;
                  }
                  while (v321 != v317);
                }
              }
            }
            v252 = v538;
            if (v521 == v254)
            {
              v343 = *((_QWORD *)v290 + 4);
              *((_QWORD *)v290 + 4) = 0;
              if (v343)
                MEMORY[0x1CAA32F9C](v343, 0x1000C8077774924);
              v344 = *((_QWORD *)v290 + 3);
              *((_QWORD *)v290 + 3) = 0;
              if (v344)
                MEMORY[0x1CAA32F9C](v344, 0x1000C8077774924);
              v345 = *((_QWORD *)v290 + 1);
              *((_QWORD *)v290 + 1) = 0;
              if (v345)
                MEMORY[0x1CAA32F9C](v345, 0x1000C8052888210);
              MEMORY[0x1CAA32FC0](v290, 0x1090C407F878B49);
            }
            v121 = v522 == v254;
            v346 = __dsta;
            if (v121)
            {
              v347 = *((_QWORD *)v314 + 4);
              *((_QWORD *)v314 + 4) = 0;
              if (v347)
                MEMORY[0x1CAA32F9C](v347, 0x1000C8077774924);
              v348 = *((_QWORD *)v314 + 3);
              *((_QWORD *)v314 + 3) = 0;
              if (v348)
                MEMORY[0x1CAA32F9C](v348, 0x1000C8077774924);
              v349 = *((_QWORD *)v314 + 1);
              *((_QWORD *)v314 + 1) = 0;
              if (v349)
                MEMORY[0x1CAA32F9C](v349, 0x1000C8052888210);
              MEMORY[0x1CAA32FC0](v314, 0x1090C407F878B49);
            }
            v350 = v543[16] + 88 * __dsta;
            v351 = v543;
            v352 = *(unsigned int **)(v350 + 64);
            v353 = *(unsigned int **)(v350 + 72);
            if (v352 == v353)
              goto LABEL_472;
            v354 = v543[22];
            while (1)
            {
              v355 = *v352;
              v356 = *(_DWORD *)(v354 + 48 * *v352 + 20);
              if (v356 == v535)
                break;
              if (*(_DWORD *)(v354 + 48 * v355 + 24) == v535)
                goto LABEL_466;
              if (++v352 == v353)
                goto LABEL_472;
            }
            v356 = v535;
LABEL_466:
            if (v355 == -1)
            {
LABEL_472:
              v574 = (unsigned int *)__PAIR64__(v317, v316);
              v383 = (void *)operator new[]();
              bzero(v383, v531);
              v575 = (float *)v383;
              if ((_DWORD)v524)
                memcpy(v383, v318, v531);
              sub_1C5242418(v543, __dsta, v535, (uint64_t *)&v574);
              v381 = v575;
              v382 = v528;
              goto LABEL_475;
            }
            v376 = *(_QWORD *)(v354 + 48 * v355);
            if (__dsta == v356)
            {
              v574 = (unsigned int *)__PAIR64__(v317, v316);
              v377 = (float *)operator new[]();
              bzero(v377, v531);
              v575 = v377;
              if ((_DWORD)v524)
              {
                memcpy(v377, v318, v531);
                v378 = *(float **)(v376 + 8);
                v379 = 4 * v524;
                do
                {
                  v380 = *v378++;
                  *v377 = *v377 + v380;
                  ++v377;
                  v379 -= 4;
                }
                while (v379);
              }
              v351 = v543;
              sub_1C5243F74((uint64_t)v543, v355, (uint64_t *)&v574);
              v381 = v575;
              v382 = v528;
              v346 = __dsta;
LABEL_475:
              v384 = v526;
              if (v381)
LABEL_476:
                MEMORY[0x1CAA32F9C](v381, 0x1000C8052888210);
              sub_1C5245310(v351, v382, v346);
              sub_1C5245310(v351, v384, v535);
              MEMORY[0x1CAA32F9C](v318, 0x1000C8052888210);
              continue;
            }
            v381 = (void *)operator new[]();
            bzero(v381, v531);
            if ((_DWORD)v316)
            {
              v387 = 0;
              for (ii = 0; ii != v316; ++ii)
              {
                if ((_DWORD)v317)
                {
                  v389 = 0;
                  v390 = &v318[4 * v387];
                  v391 = v317;
                  do
                  {
                    v392 = *(_DWORD *)v390;
                    v390 += 4;
                    *((_DWORD *)v381 + ii + v389) = v392;
                    v389 += v316;
                    --v391;
                  }
                  while (v391);
                }
                v387 += v317;
              }
            }
            v574 = (unsigned int *)__PAIR64__(v316, v317);
            v393 = (float *)operator new[]();
            bzero(v393, v531);
            v575 = v393;
            if ((_DWORD)v524)
            {
              memcpy(v393, v381, v531);
              v394 = *(float **)(v376 + 8);
              v395 = 4 * v524;
              do
              {
                v396 = *v394++;
                *v393 = *v393 + v396;
                ++v393;
                v395 -= 4;
              }
              while (v395);
            }
            v351 = v543;
            sub_1C5243F74((uint64_t)v543, v355, (uint64_t *)&v574);
            v384 = v526;
            if (v575)
              MEMORY[0x1CAA32F9C](v575, 0x1000C8052888210);
            v382 = v528;
            v346 = __dsta;
            goto LABEL_476;
          }
          v291 = *v282;
          v292 = *(_QWORD *)(v580 + 176);
          v293 = *(_DWORD *)(v292 + 48 * *v282 + 20);
          if (v293 == v254)
            v293 = *(_DWORD *)(v292 + 48 * v291 + 24);
          v536 = *v282;
          v294 = *(_QWORD *)(v292 + 48 * v291);
          v295 = *(unsigned int **)(v280 + 88 * v254);
          v296 = *(const void ***)(v280 + 88 * v293);
          v297 = *(unsigned int *)v296;
          v298 = 4 * v297;
          v299 = (void *)operator new[]();
          bzero(v299, 4 * v297);
          if ((_DWORD)v297)
          {
            memmove(v299, v296[1], v298);
            v300 = *(_QWORD *)(v294 + 8);
            if (*(_DWORD *)(v543[22] + 48 * v536 + 20) == v254)
            {
              v301 = 0;
              v302 = (float *)*((_QWORD *)v295 + 1);
              v303 = *v295;
              v305 = *v302;
              v304 = v302 + 1;
              v306 = v305;
              do
              {
                v307 = (float *)(v300 + 4 * v301);
                v308 = v306 + *v307;
                if (v303 >= 2)
                {
                  v309 = *(_DWORD *)(v294 + 4);
                  v310 = v304;
                  v311 = v303 - 1;
                  do
                  {
                    v312 = *v310++;
                    v313 = v307[v309] + v312;
                    if (v313 < v308)
                      v308 = v313;
                    v309 += *(_DWORD *)(v294 + 4);
                    --v311;
                  }
                  while (v311);
                }
                *((float *)v299 + v301) = v308 + *((float *)v299 + v301);
                ++v301;
              }
              while (v301 != v297);
            }
            else
            {
              v359 = 0;
              v360 = 0;
              v361 = *(_DWORD *)(v294 + 4);
              v362 = (float *)*((_QWORD *)v295 + 1);
              v363 = *v295;
              v365 = *v362;
              v364 = v362 + 1;
              v366 = v365;
              do
              {
                v367 = v366 + *(float *)(v300 + 4 * (v361 * v360));
                if (v363 >= 2)
                {
                  v368 = (float *)(v300 + 4 + 4 * v359);
                  v369 = v364;
                  v370 = v363 - 1;
                  do
                  {
                    v371 = *v368++;
                    v372 = v371;
                    v373 = *v369++;
                    v374 = v372 + v373;
                    if (v374 < v367)
                      v367 = v374;
                    --v370;
                  }
                  while (v370);
                }
                *((float *)v299 + v360) = v367 + *((float *)v299 + v360);
                ++v360;
                v359 += v361;
              }
              while (v360 != v297);
            }
          }
          LODWORD(v574) = v297;
          v375 = (void *)operator new[]();
          bzero(v375, v298);
          v575 = (float *)v375;
          if ((_DWORD)v297)
            memcpy(v375, v299, v298);
          sub_1C524092C((uint64_t)v543, v293, (uint64_t)&v574);
          if (v575)
            MEMORY[0x1CAA32F9C](v575, 0x1000C8052888210);
          sub_1C5245310(v543, v536, v293);
          MEMORY[0x1CAA32F9C](v299, 0x1000C8052888210);
          v252 = v538;
        }
      }
      if (v585)
      {
        v255 = v583;
        v256 = *((_DWORD *)v583 + 7);
        sub_1C485B670(&v583, v583);
        operator delete(v255);
        if (v251 >= (unsigned int *)v252)
        {
          v257 = v251 - v250;
          v258 = v257 + 1;
          if ((unint64_t)(v257 + 1) >> 62)
            goto LABEL_654;
          if ((v252 - (char *)v250) >> 1 > v258)
            v258 = (v252 - (char *)v250) >> 1;
          if ((unint64_t)(v252 - (char *)v250) >= 0x7FFFFFFFFFFFFFFCLL)
            v259 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v259 = v258;
          if (v259)
          {
            if (v259 >> 62)
              goto LABEL_655;
            v260 = (char *)operator new(4 * v259);
          }
          else
          {
            v260 = 0;
          }
          v385 = (unsigned int *)&v260[4 * v257];
          *v385 = v256;
          v275 = v385 + 1;
          while (v251 != v250)
          {
            v386 = *--v251;
            *--v385 = v386;
          }
          goto LABEL_498;
        }
LABEL_378:
        *v251 = v256;
        v275 = v251 + 1;
        goto LABEL_501;
      }
      if (v588)
      {
        v265 = v586;
        v266 = (uint64_t *)&v587;
        if (v586 != (uint64_t *)&v587)
        {
          v266 = v586;
          while (1)
          {
            v267 = (uint64_t *)v265[1];
            v268 = v265;
            if (v267)
            {
              do
              {
                v265 = v267;
                v267 = (uint64_t *)*v267;
              }
              while (v267);
            }
            else
            {
              do
              {
                v265 = (uint64_t *)v268[2];
                v121 = *v265 == (_QWORD)v268;
                v268 = v265;
              }
              while (!v121);
            }
            if (v265 == (uint64_t *)&v587)
              break;
            v269 = *((_DWORD *)v265 + 7);
            v270 = *((_DWORD *)v266 + 7);
            v271 = *(_QWORD *)(v580 + 128);
            v272 = **(float **)(*(_QWORD *)(v271 + 88 * v269) + 8);
            v273 = **(float **)(*(_QWORD *)(v271 + 88 * v270) + 8);
            if (v272 == v273)
              v274 = *(_QWORD *)(v271 + 88 * v269 + 72) - *(_QWORD *)(v271 + 88 * v269 + 64) < *(_QWORD *)(v271 + 88 * v270 + 72)
                                                                                                 - *(_QWORD *)(v271 + 88 * v270 + 64);
            else
              v274 = v272 < v273;
            if (v274)
              v266 = v265;
          }
        }
        v256 = *((_DWORD *)v266 + 7);
        sub_1C485B670(&v586, v266);
        operator delete(v266);
        if (v251 < (unsigned int *)v252)
          goto LABEL_378;
        v357 = v251 - v250;
        v358 = v357 + 1;
        if ((unint64_t)(v357 + 1) >> 62)
          goto LABEL_654;
        if ((v252 - (char *)v250) >> 1 > v358)
          v358 = (v252 - (char *)v250) >> 1;
        if ((unint64_t)(v252 - (char *)v250) >= 0x7FFFFFFFFFFFFFFCLL)
          v259 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v259 = v358;
        if (v259)
        {
          if (v259 >> 62)
            goto LABEL_655;
          v260 = (char *)operator new(4 * v259);
        }
        else
        {
          v260 = 0;
        }
        v385 = (unsigned int *)&v260[4 * v357];
        *v385 = v256;
        v275 = v385 + 1;
        while (v251 != v250)
        {
          v397 = *--v251;
          *--v385 = v397;
        }
LABEL_498:
        v252 = &v260[4 * v259];
        if (v250)
          operator delete(v250);
        v250 = v385;
LABEL_501:
        sub_1C5245290((uint64_t **)v580, v256);
        v251 = v275;
        continue;
      }
      break;
    }
    v578 = 0;
    v579[0] = 0;
    v577 = (uint64_t **)&v578;
    while (v250 != v251)
    {
      v398 = *--v251;
      v544 = v398;
      v399 = *(const void ***)(*(_QWORD *)(v541 + 128) + 88 * v398);
      v400 = *(unsigned int *)v399;
      v401 = 4 * v400;
      v402 = (float *)operator new[]();
      bzero(v402, 4 * v400);
      v539 = v400;
      if ((_DWORD)v400)
        memmove(v402, v399[1], 4 * v400);
      v403 = *(_QWORD *)(v541 + 128) + 88 * v544;
      v404 = *(unsigned int **)(v403 + 64);
      v405 = *(unsigned int **)(v403 + 72);
      while (v404 != v405)
      {
        v406 = *(_QWORD *)(v541 + 176);
        v407 = (unsigned int **)(v406 + 48 * *v404);
        v408 = *v407;
        v409 = *((_DWORD *)v407 + 5);
        if (v544 == v409)
        {
          v410 = (uint64_t *)v578;
          if (!v578)
            goto LABEL_518;
          v411 = *(_DWORD *)(v406 + 48 * *v404 + 24);
          v412 = (uint64_t **)&v578;
          do
          {
            v413 = v412;
            v414 = v410;
            v415 = *((_DWORD *)v410 + 7);
            if (v415 >= v411)
              v412 = (uint64_t **)v410;
            else
              ++v410;
            v410 = (uint64_t *)*v410;
          }
          while (v410);
          if (v412 == (uint64_t **)&v578)
            goto LABEL_518;
          if (v415 >= v411)
            v413 = (uint64_t **)v414;
          if (*((_DWORD *)v413 + 7) > v411)
LABEL_518:
            v412 = (uint64_t **)&v578;
          v416 = *((unsigned int *)v412 + 8);
          v417 = 4 * *v408;
          v418 = (char *)operator new[]();
          bzero(v418, v417);
          v419 = *v408;
          if ((_DWORD)v419)
          {
            v420 = 0;
            v421 = v408[1];
            v422 = *((_QWORD *)v408 + 1) + 4 * v416;
            v423 = v418;
            do
            {
              *v423++ = *(_DWORD *)(v422 + 4 * v420);
              v420 += v421;
              --v419;
            }
            while (v419);
          }
          if (v539)
          {
            v424 = 0;
            do
            {
              v402[v424 / 4] = v402[v424 / 4] + *(float *)&v418[v424];
              v424 += 4;
            }
            while (v401 != v424);
          }
        }
        else
        {
          v425 = (uint64_t *)v578;
          v426 = (uint64_t **)&v578;
          if (!v578)
            goto LABEL_535;
          do
          {
            v427 = v426;
            v428 = v425;
            v429 = *((_DWORD *)v425 + 7);
            if (v429 >= v409)
              v426 = (uint64_t **)v425;
            else
              ++v425;
            v425 = (uint64_t *)*v425;
          }
          while (v425);
          if (v426 == (uint64_t **)&v578)
            goto LABEL_535;
          if (v429 >= v409)
            v427 = (uint64_t **)v428;
          if (*((_DWORD *)v427 + 7) > v409)
LABEL_535:
            v426 = (uint64_t **)&v578;
          v430 = *((_DWORD *)v426 + 8);
          v431 = 4 * v408[1];
          v418 = (char *)operator new[]();
          bzero(v418, v431);
          v432 = v408[1];
          if ((_DWORD)v432)
          {
            v433 = (int *)(*((_QWORD *)v408 + 1) + 4 * (v432 * v430));
            v434 = v418;
            do
            {
              v435 = *v433++;
              *v434++ = v435;
              --v432;
            }
            while (v432);
          }
          if (v539)
          {
            v436 = 0;
            do
            {
              v402[v436 / 4] = v402[v436 / 4] + *(float *)&v418[v436];
              v436 += 4;
            }
            while (v401 != v436);
          }
        }
        MEMORY[0x1CAA32F9C](v418, 0x1000C8052888210);
        ++v404;
      }
      v437 = v402;
      if (v539 >= 2)
      {
        v438 = v402 + 1;
        v439 = *v402;
        v440 = v401 - 4;
        v437 = v402;
        v441 = v402 + 1;
        do
        {
          v442 = *v441++;
          v443 = v442;
          if (v442 < v439)
          {
            v439 = v443;
            v437 = v438;
          }
          v438 = v441;
          v440 -= 4;
        }
        while (v440);
      }
      v576 = v544;
      v574 = &v576;
      *((_DWORD *)sub_1C52451B0((uint64_t **)&v577, &v576, (uint64_t)&std::piecewise_construct, &v574) + 8) = (unint64_t)((char *)v437 - (char *)v402) >> 2;
      MEMORY[0x1CAA32F9C](v402, 0x1000C8052888210);
    }
    sub_1C47655E8((uint64_t)&v571, v572);
    v444 = (_QWORD *)v578;
    v571 = v577;
    v572 = (uint64_t *)v578;
    v573 = v579[0];
    if (v579[0])
    {
      *(_QWORD *)(v578 + 16) = &v572;
      v577 = (uint64_t **)&v578;
      v578 = 0;
      v579[0] = 0;
      v444 = 0;
    }
    else
    {
      v571 = &v572;
    }
    v2 = v518;
    sub_1C47655E8((uint64_t)&v577, v444);
    if (v250)
      operator delete(v250);
    v445 = v587;
    *(_QWORD *)(v580 + 120) = 0;
    sub_1C47655E8((uint64_t)&v586, v445);
    sub_1C47655E8((uint64_t)&v583, v584);
    sub_1C47655E8((uint64_t)&v580 + 8, v581);
LABEL_556:
    v446 = v545;
    v447 = v546;
    (*(void (**)(_QWORD))(**(_QWORD **)(v545 + 16) + 176))(*(_QWORD *)(v545 + 16));
    *((_DWORD *)v520 + 72) = 0;
    llvm::VirtRegMap::grow((uint64_t)v520);
    LODWORD(v580) = 0;
    DWORD1(v580) = -1171354717 * (((_QWORD)v559 - *((_QWORD *)&v558 + 1)) >> 3);
    *((_QWORD *)&v580 + 1) = &v560;
    LODWORD(v580) = sub_1C5245708((uint64_t)&v580, 0);
    v448 = v580;
    v577 = (uint64_t **)v580;
    v578 = (uint64_t)&v560;
    LODWORD(v580) = -1171354717 * (((_QWORD)v559 - *((_QWORD *)&v558 + 1)) >> 3);
    DWORD1(v580) = v580;
    *((_QWORD *)&v580 + 1) = &v560;
    v449 = sub_1C5245708((uint64_t)&v580, v580);
    if (v448 == v449)
    {
      sub_1C47655E8((uint64_t)&v571, v572);
      sub_1C5245558(&v545);
      break;
    }
    v450 = v449;
    v451 = 0;
    do
    {
      v452 = v448;
      v453 = v572;
      if (!v572)
        goto LABEL_568;
      v454 = &v572;
      do
      {
        v455 = v454;
        v456 = v453;
        v457 = *((_DWORD *)v453 + 7);
        if (v457 >= v448)
          v454 = (uint64_t **)v453;
        else
          ++v453;
        v453 = (uint64_t *)*v453;
      }
      while (v453);
      if (v454 == &v572)
        goto LABEL_568;
      if (v457 >= v448)
        v455 = (uint64_t **)v456;
      if (*((_DWORD *)v455 + 7) > v448)
LABEL_568:
        v454 = &v572;
      v458 = *(_DWORD *)(*((_QWORD *)&v558 + 1) + 88 * v448 + 40);
      v459 = *((_DWORD *)v454 + 8);
      if (v459)
      {
        *(_DWORD *)(*((_QWORD *)v520 + 35) + 4 * (v458 & 0x7FFFFFFF)) = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v558 + 1) + 88 * v448 + 48) + 8)
                                                                                              + 4
                                                                                              * (v459 - 1));
      }
      else
      {
        *(_QWORD *)&v580 = &v581;
        *((_QWORD *)&v580 + 1) = 0x800000000;
        sub_1C52443CC(v2, v458, (uint64_t)&v580, v446, v447, (uint64_t)v520, InlineSpiller);
        v460 = DWORD2(v580) != 0;
        if ((_QWORD **)v580 != &v581)
          free((void *)v580);
        v451 |= v460;
      }
      LODWORD(v577) = v452 + 1;
      v448 = sub_1C5245708((uint64_t)&v577, v452 + 1);
      LODWORD(v577) = v448;
    }
    while (v448 != v450);
    sub_1C47655E8((uint64_t)&v571, v572);
    sub_1C5245558(&v545);
    v40 = v514;
  }
  while ((v451 & 1) != 0);
  (*(void (**)(_QWORD *))(*v511 + 8))(v511);
LABEL_579:
  v461 = *(_QWORD **)(v2 + 280);
  v462 = (_QWORD *)(v2 + 288);
  v463 = v514;
  if (v461 != (_QWORD *)(v2 + 288))
  {
    v464 = *(_QWORD *)(a2 + 40);
    do
    {
      v465 = *((_DWORD *)v461 + 7);
      if ((v465 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v463 + 416)
        || (v466 = *(llvm::LiveInterval **)(*(_QWORD *)(v463 + 408) + 8 * (v465 & 0x7FFFFFFF))) == 0)
      {
        v466 = (llvm::LiveInterval *)sub_1C4851220(v463, v465);
        v478 = *(_QWORD *)(v514 + 304);
        v479 = *(_QWORD *)(v514 + 248);
        *(_QWORD *)v478 = v479;
        *(_QWORD *)(v478 + 8) = *(_QWORD *)(v479 + 40);
        *(_OWORD *)(v478 + 16) = *(_OWORD *)(v514 + 288);
        *(_QWORD *)(v478 + 32) = v514 + 312;
        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v478);
        *(_DWORD *)(v478 + 184) = 0;
        v463 = v514;
        v480 = *(_QWORD *)(v514 + 256);
        v121 = *(_BYTE *)(v480 + 16) == 0;
        v481 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v480 + 24) + 16 * (*((_DWORD *)v466 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                  + 34);
        v483 = !v121 && v481 != 0;
        llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v514 + 304), v466, v483);
        llvm::LiveIntervals::computeDeadValues(v514, (uint64_t)v466, 0);
      }
      v467 = *((_DWORD *)v466 + 28) & 0x7FFFFFFF;
      v468 = *(_QWORD *)(v464 + 208);
      v469 = v468 + 40 * v467;
      if (!*(_DWORD *)(v469 + 16)
        || ((LODWORD(v469) = **(_DWORD **)(v469 + 8), !*(_DWORD *)(v468 + 40 * v467))
          ? (v470 = (_DWORD)v469 == 0)
          : (v470 = 1),
            v470))
      {
        v471 = *(_QWORD *)(*(_QWORD *)(v464 + 24) + 16 * v467) & 0xFFFFFFFFFFFFFFF8;
        v472 = *(uint64_t (**)(uint64_t))(v471 + 48);
        if (v472)
        {
          v473 = (unsigned __int16 *)v472(a2);
          if (v474)
            goto LABEL_593;
        }
        else
        {
          v473 = **(unsigned __int16 ***)v471;
          v474 = *(unsigned __int16 *)(*(_QWORD *)v471 + 20);
          if (*(_WORD *)(*(_QWORD *)v471 + 20))
          {
LABEL_593:
            v475 = 2 * v474;
            do
            {
              v469 = *v473;
              if (((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v520 + 31) + 352) + ((v469 >> 3) & 0x1FF8)) >> v469) & 1) == 0)
                goto LABEL_597;
              ++v473;
              v475 -= 2;
            }
            while (v475);
          }
        }
        LOWORD(v469) = 0;
      }
LABEL_597:
      *(_DWORD *)(*((_QWORD *)v520 + 35) + 4 * (*((_DWORD *)v466 + 28) & 0x7FFFFFFF)) = (unsigned __int16)v469;
      v476 = (_QWORD *)v461[1];
      if (v476)
      {
        do
        {
          v477 = v476;
          v476 = (_QWORD *)*v476;
        }
        while (v476);
      }
      else
      {
        do
        {
          v477 = (_QWORD *)v461[2];
          v121 = *v477 == (_QWORD)v461;
          v461 = v477;
        }
        while (!v121);
      }
      v461 = v477;
    }
    while (v477 != v462);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)InlineSpiller + 32))(InlineSpiller);
  v485 = *(char **)(v2 + 304);
  v484 = *(char **)(v2 + 312);
  v486 = 320;
  if (v484 == v485)
    v486 = 324;
  v487 = *(unsigned int *)(v2 + v486);
  v488 = *(uint64_t **)(v2 + 312);
  if ((_DWORD)v487)
  {
    v489 = 0;
    while (*(_QWORD *)&v484[v489] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v489 += 8;
      if (8 * v487 == v489)
        goto LABEL_640;
    }
    v488 = (uint64_t *)&v484[v489];
  }
  v490 = &v484[8 * v487];
  if (v488 != (uint64_t *)v490)
  {
    v491 = *v488;
LABEL_621:
    v492 = *(int32x2_t **)(v514 + 288);
    v493 = v492[46];
    v494 = v492[48].u32[0];
    if (!(_DWORD)v494)
      goto LABEL_627;
    LODWORD(v495) = (v494 - 1) & ((v491 >> 4) ^ (v491 >> 9));
    v496 = (uint64_t *)(*(_QWORD *)&v493 + 16 * v495);
    v497 = *v496;
    if (*v496 != v491)
    {
      v498 = 1;
      while (v497 != -4096)
      {
        v499 = v495 + v498++;
        v495 = v499 & (v494 - 1);
        v497 = *(_QWORD *)(*(_QWORD *)&v493 + 16 * v495);
        if (v497 == v491)
        {
          v496 = (uint64_t *)(*(_QWORD *)&v493 + 16 * v495);
          goto LABEL_628;
        }
      }
LABEL_627:
      v496 = (uint64_t *)(*(_QWORD *)&v493 + 16 * v494);
    }
LABEL_628:
    if (v496 != (uint64_t *)(*(_QWORD *)&v493 + 16 * v494))
    {
      v500 = v496[1] & 0xFFFFFFFFFFFFFFF8;
      *v496 = -8192;
      v492[47] = vadd_s32(v492[47], (int32x2_t)0x1FFFFFFFFLL);
      *(_QWORD *)(v500 + 16) = 0;
    }
    v501 = v491;
    if ((*(_BYTE *)v491 & 4) == 0)
    {
      v501 = v491;
      if ((*(_WORD *)(v491 + 44) & 8) != 0)
      {
        v501 = v491;
        do
          v501 = *(_QWORD *)(v501 + 8);
        while ((*(_WORD *)(v501 + 44) & 8) != 0);
      }
    }
    sub_1C487FE80(*(_QWORD *)(v491 + 24) + 40, v491, *(_QWORD *)(v501 + 8));
    v502 = (unint64_t *)(v488 + 1);
    while (v502 != (unint64_t *)v490)
    {
      v503 = *v502++;
      v491 = v503;
      if (v503 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v488 = (uint64_t *)(v502 - 1);
        goto LABEL_621;
      }
    }
    v485 = *(char **)(v2 + 304);
    v484 = *(char **)(v2 + 312);
  }
LABEL_640:
  if (v484 == v485)
  {
LABEL_641:
    *(_QWORD *)(v2 + 324) = 0;
  }
  else
  {
    v505 = *(unsigned int *)(v2 + 320);
    if (v505 < 0x21 || 4 * (*(_DWORD *)(v2 + 324) - *(_DWORD *)(v2 + 328)) >= v505)
    {
      memset(v484, 255, 8 * v505);
      goto LABEL_641;
    }
    free(v484);
    v507 = *(_DWORD *)(v2 + 324) - *(_DWORD *)(v2 + 328);
    v508 = 1 << (33 - __clz(v507 - 1));
    if (v507 <= 0x10)
      v509 = 32;
    else
      v509 = v508;
    *(_DWORD *)(v2 + 320) = v509;
    *(_QWORD *)(v2 + 324) = 0;
    v510 = malloc_type_malloc(8 * v509, 0x4065EBACuLL);
    if (!v510)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    *(_QWORD *)(v2 + 312) = v510;
    memset(v510, 255, 8 * *(unsigned int *)(v2 + 320));
  }
  sub_1C47655E8((uint64_t)v516, *(_QWORD **)(v2 + 264));
  *(_QWORD *)(v2 + 264) = 0;
  *(_QWORD *)(v2 + 272) = 0;
  *(_QWORD *)(v2 + 256) = v2 + 264;
  sub_1C47655E8(v2 + 280, *(_QWORD **)(v2 + 288));
  *(_QWORD *)(v2 + 288) = 0;
  *(_QWORD *)(v2 + 296) = 0;
  *(_QWORD *)(v2 + 280) = v462;
  (*(void (**)(uint64_t))(*(_QWORD *)InlineSpiller + 16))(InlineSpiller);
  return 1;
}

void sub_1C5240448(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v7 = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&v7, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = v7;
  *(_QWORD *)v7 |= 2uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &v7 == (void **)a1)
    goto LABEL_9;
  if (v8 < 7)
  {
    v6 = v8;
LABEL_7:
    memcpy(v4, v3, 8 * v6);
    v3 = v7;
    goto LABEL_8;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
  v6 = v8;
  v3 = v7;
  if ((_DWORD)v8)
  {
    v4 = *(void **)a1;
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_9:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

void sub_1C5240574(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v7 = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&v7, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = v7;
  *(_QWORD *)v7 |= 1uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &v7 == (void **)a1)
    goto LABEL_9;
  if (v8 < 7)
  {
    v6 = v8;
LABEL_7:
    memcpy(v4, v3, 8 * v6);
    v3 = v7;
    goto LABEL_8;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
  v6 = v8;
  v3 = v7;
  if ((_DWORD)v8)
  {
    v4 = *(void **)a1;
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_9:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

void sub_1C52406A4()
{
  JUMPOUT(0x1CAA32FC0);
}

float sub_1C52406B8(float a1, uint64_t a2, int a3, unsigned int a4)
{
  return (float)(a1 / (float)(a3 + 400)) * (float)a4;
}

void sub_1C52406D4()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C52406E8(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  _QWORD *v5;
  unsigned int v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  float v12;
  float v13;
  const void **v14;
  uint64_t v15;
  float *v16;
  float *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  int v23;
  int v24;
  float *v25;
  _QWORD v26[2];
  uint64_t v27;
  _QWORD *v28;

  v3 = a2[1];
  v4 = -1171354717 * ((a2[17] - a2[16]) >> 3);
  LODWORD(v27) = 0;
  HIDWORD(v27) = v4;
  v5 = a2 + 19;
  v28 = a2 + 19;
  LODWORD(v27) = sub_1C5245708((uint64_t)&v27, 0);
  v6 = v27;
  v26[0] = v27;
  v26[1] = v5;
  LODWORD(v27) = -1171354717 * ((a2[17] - a2[16]) >> 3);
  HIDWORD(v27) = v27;
  v28 = v5;
  result = sub_1C5245708((uint64_t)&v27, v27);
  if (v6 != (_DWORD)result)
  {
    v8 = result;
    do
    {
      v9 = a2[16];
      v10 = *(_DWORD *)(v9 + 88 * v6 + 40);
      if ((v10 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v3 + 416)
        || (v11 = *(_QWORD *)(*(_QWORD *)(v3 + 408) + 8 * (v10 & 0x7FFFFFFF))) == 0)
      {
        v11 = sub_1C4851220(v3, v10);
        v18 = *(_QWORD *)(v3 + 304);
        v19 = *(_QWORD *)(v3 + 248);
        *(_QWORD *)v18 = v19;
        *(_QWORD *)(v18 + 8) = *(_QWORD *)(v19 + 40);
        *(_OWORD *)(v18 + 16) = *(_OWORD *)(v3 + 288);
        *(_QWORD *)(v18 + 32) = v3 + 312;
        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v18);
        *(_DWORD *)(v18 + 184) = 0;
        v20 = *(_QWORD *)(v3 + 256);
        v22 = *(_BYTE *)(v20 + 16) == 0;
        v21 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v20 + 24) + 16 * (*(_DWORD *)(v11 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                 + 34);
        v22 = v22 || v21 == 0;
        v23 = !v22;
        llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v3 + 304), (llvm::LiveInterval *)v11, v23);
        llvm::LiveIntervals::computeDeadValues(v3, v11, 0);
        v9 = a2[16];
      }
      v12 = *(float *)(v11 + 116);
      if (v12 == 0.0)
        v13 = 1.1755e-38;
      else
        v13 = v12 + 10.0;
      v14 = *(const void ***)(v9 + 88 * v6);
      v15 = *(unsigned int *)v14;
      v16 = (float *)operator new[]();
      bzero(v16, 4 * v15);
      if ((_DWORD)v15)
        memmove(v16, v14[1], 4 * v15);
      *v16 = v13;
      v24 = v15;
      v25 = v16;
      sub_1C524092C((uint64_t)a2, v6, (uint64_t)&v24);
      v17 = v25;
      v25 = 0;
      if (v17)
        MEMORY[0x1CAA32F9C](v17, 0x1000C8052888210);
      LODWORD(v26[0]) = v6 + 1;
      result = sub_1C5245708((uint64_t)v26, v6 + 1);
      v6 = result;
      LODWORD(v26[0]) = result;
    }
    while ((_DWORD)result != v8);
  }
  return result;
}

void sub_1C524092C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count **v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;

  v18 = *(_DWORD *)a3;
  v5 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  v19 = v5;
  *(_DWORD *)a3 = 0;
  sub_1C5240A44(&v20, a1 + 72, &v18);
  v6 = v19;
  v19 = 0;
  if (v6)
    MEMORY[0x1CAA32F9C](v6, 0x1000C8052888210);
  v7 = (std::__shared_weak_count **)(*(_QWORD *)(a1 + 128) + 88 * a2);
  v9 = v20;
  v8 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = v7[1];
  *v7 = v9;
  v7[1] = v8;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1C5240A44(std::__shared_weak_count **a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5;
  float *v6;
  int v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count **v22;
  unint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int i;
  uint64_t v29;
  unint64_t v30;
  float *v31;
  uint64_t v32;
  float *v33;
  int v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42[3];

  v42[2] = *(unint64_t **)MEMORY[0x1E0C80C00];
  v5 = *a3;
  v6 = (float *)*((_QWORD *)a3 + 1);
  *((_QWORD *)a3 + 1) = 0;
  *a3 = 0;
  v7 = *(_DWORD *)(a2 + 16);
  if (!v7)
  {
LABEL_2:
    v8 = (std::__shared_weak_count *)operator new(0x40uLL);
    v9 = v8;
    v8->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    v8->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    v8->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8149978;
    v12 = (unint64_t)&v8[1];
    v8[1].__shared_weak_owners_ = a2;
    LODWORD(v8[2].__vftable) = v5;
    v13 = v8 + 2;
    v8[2].__shared_owners_ = (uint64_t)v6;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)&v8[1];
    v8[1].__shared_owners_ = (uint64_t)v8;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v9);
    }
    v41 = v12;
    v42[0] = 0;
    if ((sub_1C5240FB0(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), &v41, v42) & 1) != 0)
    {
LABEL_15:
      *a1 = v13;
      a1[1] = v9;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        v6 = 0;
        goto LABEL_21;
      }
      return;
    }
    v17 = *(_DWORD *)(a2 + 16);
    v18 = *(_DWORD *)(a2 + 8);
    if (4 * v18 + 4 >= 3 * v17)
    {
      v17 *= 2;
    }
    else if (v17 + ~v18 - *(_DWORD *)(a2 + 12) > v17 >> 3)
    {
LABEL_12:
      v19 = v42[0];
      ++*(_DWORD *)(a2 + 8);
      if (*v19)
        --*(_DWORD *)(a2 + 12);
      *v19 = v12;
      goto LABEL_15;
    }
    sub_1C52411D8(a2, v17);
    v42[0] = 0;
    sub_1C5240FB0(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), &v41, v42);
    goto LABEL_12;
  }
  v22 = *(std::__shared_weak_count ***)a2;
  v23 = sub_1C6193EA0(v6, (uint64_t)&v6[v5]);
  memset(v42, 0, 12);
  v24 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v24 & 1) == 0)
  {
LABEL_47:
    if (__cxa_guard_acquire(&qword_1ED7EAC88))
    {
      v40 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v40 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v40;
      __cxa_guard_release(&qword_1ED7EAC88);
    }
  }
  LODWORD(v42[0]) = v5;
  *(unint64_t **)((char *)v42 + 4) = (unint64_t *)v23;
  v25 = __ROR8__(v23 + 12, 12);
  v26 = 0x9DDFEA08EB382D69
      * (v25 ^ ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ (uint64_t)v42[0] ^ v25)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                           * (qword_1ED7EAC80 ^ (uint64_t)v42[0] ^ v25)));
  v27 = (v7 - 1) & ((-348639895 * ((v26 >> 47) ^ v26)) ^ v23);
  for (i = 1; ; ++i)
  {
    v29 = v27;
    v30 = (unint64_t)v22[v27];
    if (v30 < 2)
      goto LABEL_27;
    if ((_DWORD)v5 != *(_DWORD *)(v30 + 24))
      goto LABEL_35;
    if (!(_DWORD)v5)
      break;
    v31 = *(float **)(v30 + 32);
    v32 = 4 * v5;
    v33 = v6;
    while (*v33 == *v31)
    {
      ++v33;
      ++v31;
      v32 -= 4;
      if (!v32)
        goto LABEL_36;
    }
LABEL_27:
    if (!v30)
      goto LABEL_2;
LABEL_35:
    v34 = i + v29;
    v27 = v34 & (v7 - 1);
  }
LABEL_36:
  v22 += v29;
  if (v22 == (std::__shared_weak_count **)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 16)))
    goto LABEL_2;
  v35 = *(std::__shared_weak_count **)(v30 + 8);
  if (!v35 || (v36 = std::__shared_weak_count::lock(v35)) == 0)
  {
    sub_1C5240EB8();
    goto LABEL_47;
  }
  v9 = v36;
  *a1 = *v22 + 1;
  a1[1] = v36;
  v37 = (unint64_t *)&v36->__shared_owners_;
  do
    v38 = __ldxr(v37);
  while (__stxr(v38 + 1, v37));
  do
    v39 = __ldaxr(v37);
  while (__stlxr(v39 - 1, v37));
  if (!v39)
  {
LABEL_21:
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (v6)
    JUMPOUT(0x1CAA32F9CLL);
}

unint64_t sub_1C5240E38(char *a1, _DWORD *__dst, char *a3, int a4, uint64_t *a5)
{
  _QWORD *v8;
  char *v9;
  uint64_t v11;
  int v12[2];

  v11 = 0;
  v8 = sub_1C4ED49B0(a1, &v11, __dst, (unint64_t)a3, a4);
  *(_QWORD *)v12 = v11;
  v9 = (char *)sub_1C4E37644(a1, (uint64_t *)v12, v8, (unint64_t)a3, *a5);
  return sub_1C4E37BA0(a1, *(uint64_t *)v12, v9, a3);
}

uint64_t sub_1C5240EB8()
{
  std::__libcpp_verbose_abort("bad_weak_ptr was thrown in -fno-exceptions mode");
  return sub_1C5240ECC();
}

void sub_1C5240ECC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8149978;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C5240EDC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8149978;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5240F0C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  _QWORD *v5;
  unint64_t *v6;

  v2 = a1[5];
  v5 = a1 + 3;
  v6 = 0;
  if (sub_1C5240FB0(*(_QWORD *)v2, *(_DWORD *)(v2 + 16), (unint64_t *)&v5, &v6))
  {
    *v6 = 1;
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  v3 = a1[7];
  a1[7] = 0;
  if (v3)
    MEMORY[0x1CAA32F9C](v3, 0x1000C8052888210);
  v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

uint64_t sub_1C5240FB0(uint64_t a1, int a2, unint64_t *a3, unint64_t **a4)
{
  unint64_t *v5;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 v12;
  _QWORD *v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  float *v22;
  float *v23;
  uint64_t v24;
  BOOL v25;
  unsigned int v26;
  int v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;

  if (!a2)
  {
    v5 = 0;
    result = 0;
    goto LABEL_3;
  }
  v10 = *a3;
  v11 = sub_1C6193EA0(*(_QWORD **)(*a3 + 32), *(_QWORD *)(*a3 + 32) + 4 * *(unsigned int *)(*a3 + 24));
  v12 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v13 = &unk_1ED7EA000;
  if ((v12 & 1) == 0)
  {
    v30 = v11;
    v27 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v13 = &unk_1ED7EA000;
    v28 = v27;
    v11 = v30;
    if (v28)
    {
      v29 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v29 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v29;
      __cxa_guard_release(&qword_1ED7EAC88);
      v13 = (_QWORD *)&unk_1ED7EA000;
      v11 = v30;
    }
  }
  v14 = 0;
  LODWORD(v31) = *(_DWORD *)(v10 + 24);
  HIDWORD(v31) = v11;
  v15 = __ROR8__(v11 + 12, 12);
  v16 = 0x9DDFEA08EB382D69
      * (v15 ^ ((0x9DDFEA08EB382D69 * (v31 ^ v13[400] ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v31 ^ v13[400] ^ v15)));
  v17 = (a2 - 1) & ((-348639895 * ((v16 >> 47) ^ v16)) ^ v11);
  v18 = *a3;
  v19 = 1;
  result = 1;
  while (1)
  {
    v5 = (unint64_t *)(a1 + 8 * v17);
    v20 = *v5;
    if (v18 < 2)
    {
      if (v18 == v20)
        goto LABEL_24;
      goto LABEL_10;
    }
    if (v20 < 2)
      goto LABEL_10;
    v21 = *(unsigned int *)(v18 + 24);
    if ((_DWORD)v21 == *(_DWORD *)(v20 + 24))
      break;
LABEL_18:
    if (v14)
      v25 = 0;
    else
      v25 = v20 == 1;
    if (v25)
      v14 = (unint64_t *)(a1 + 8 * v17);
    v26 = v19 + v17;
    ++v19;
    v17 = v26 & (a2 - 1);
  }
  if (!(_DWORD)v21)
  {
LABEL_24:
    result = 1;
    goto LABEL_3;
  }
  v22 = *(float **)(v18 + 32);
  v23 = *(float **)(v20 + 32);
  v24 = 4 * v21;
  while (*v22 == *v23)
  {
    ++v22;
    ++v23;
    v24 -= 4;
    if (!v24)
      goto LABEL_3;
  }
LABEL_10:
  if (v20)
    goto LABEL_18;
  result = 0;
  if (v14)
    v5 = v14;
LABEL_3:
  *a4 = v5;
  return result;
}

void sub_1C52411D8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t *v14;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  v9 = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = v9;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
      bzero(v9, 8 * v10);
    if ((_DWORD)v3)
    {
      v11 = 8 * v3;
      v12 = (unint64_t *)v4;
      do
      {
        if (*v12 >= 2)
        {
          v14 = 0;
          sub_1C5240FB0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v12, &v14);
          *v14 = *v12;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v12;
        v11 -= 8;
      }
      while (v11);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v13 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v13)
    bzero(v9, 8 * v13);
}

void sub_1C52412FC()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5241310(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  char *v11;
  int v12;
  llvm::LiveInterval *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  int v29;
  char *v30;
  __int128 v31;
  uint64_t **v32;
  char *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  char *v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  uint64_t *v48;
  uint64_t **v49;
  uint64_t *v50;
  char *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t **v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BOOL4 v66;
  uint64_t **v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v76;
  uint64_t **v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int *v85;
  uint64_t v86;
  uint64_t v87;
  char v89;
  unsigned int v90;
  _QWORD *v91;
  int v92;
  int v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unsigned int v103;
  unint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  unsigned int v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *p_shared_owners;
  unint64_t v126;
  uint64_t *v127;
  uint64_t **v128;
  uint64_t **v129;
  _OWORD *v130;
  uint64_t *v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v139;
  int v140;
  unsigned int v141;
  uint64_t *v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v148;
  int v149;
  void *v150;
  int v151;
  unsigned int v152;
  int v153[2];
  __int128 v154;
  uint64_t v155;
  uint64_t **v156;
  uint64_t *v157;
  uint64_t v158;
  unsigned int (*v159)(__int128 *, uint64_t *);
  uint64_t v160[2];
  unsigned int v161;
  uint64_t v162[2];
  int v163;
  _QWORD *v164;
  uint64_t v165;
  unsigned int v166;
  unint64_t v167;
  unint64_t v168;
  __int128 v169;
  unsigned int v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;

  v2 = a2;
  v3 = a2[1];
  v164 = 0;
  v165 = 0;
  v166 = 0;
  v162[0] = 0;
  v162[1] = 0;
  v163 = 0;
  v160[0] = 0;
  v160[1] = 0;
  v161 = 0;
  v158 = 0;
  v159 = (unsigned int (*)(__int128 *, uint64_t *))sub_1C5242190;
  v156 = &v157;
  v157 = 0;
  v4 = -1171354717 * ((unint64_t)(a2[17] - a2[16]) >> 3);
  LODWORD(v169) = 0;
  DWORD1(v169) = v4;
  v5 = a2 + 19;
  *((_QWORD *)&v169 + 1) = a2 + 19;
  LODWORD(v169) = sub_1C5245708((uint64_t)&v169, 0);
  v6 = v169;
  *(_QWORD *)&v154 = v169;
  *((_QWORD *)&v154 + 1) = v5;
  v7 = -1171354717 * ((unint64_t)(v2[17] - v2[16]) >> 3);
  LODWORD(v169) = v7;
  DWORD1(v169) = v7;
  *((_QWORD *)&v169 + 1) = v5;
  v8 = sub_1C5245708((uint64_t)&v169, v7);
  if (v6 != v8)
  {
    v9 = v8;
    v142 = v2;
    v144 = 0;
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = *(_DWORD *)(v2[16] + 88 * v6 + 40);
      if ((v12 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v3 + 416)
        || (v13 = *(llvm::LiveInterval **)(*(_QWORD *)(v3 + 408) + 8 * (v12 & 0x7FFFFFFF))) == 0)
      {
        v13 = (llvm::LiveInterval *)sub_1C4851220(v3, v12);
        v24 = *(_QWORD *)(v3 + 304);
        v25 = *(_QWORD *)(v3 + 248);
        *(_QWORD *)v24 = v25;
        *(_QWORD *)(v24 + 8) = *(_QWORD *)(v25 + 40);
        *(_OWORD *)(v24 + 16) = *(_OWORD *)(v3 + 288);
        *(_QWORD *)(v24 + 32) = v3 + 312;
        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v24);
        *(_DWORD *)(v24 + 184) = 0;
        v2 = v142;
        v26 = *(_QWORD *)(v3 + 256);
        v28 = *(_BYTE *)(v26 + 16) == 0;
        v27 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v26 + 24) + 16 * (*((_DWORD *)v13 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                 + 34);
        v28 = v28 || v27 == 0;
        v29 = !v28;
        llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v3 + 304), v13, v29);
        llvm::LiveIntervals::computeDeadValues(v3, (uint64_t)v13, 0);
      }
      v14 = (char *)v10;
      if (v10 >= (unint64_t)v144)
      {
        v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)v11) >> 3) + 1;
        if (v16 > 0xAAAAAAAAAAAAAAALL)
LABEL_205:
          abort();
        if (0x5555555555555556 * ((v144 - v11) >> 3) > v16)
          v16 = 0x5555555555555556 * ((v144 - v11) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v144 - v11) >> 3) >= 0x555555555555555)
          v17 = 0xAAAAAAAAAAAAAAALL;
        else
          v17 = v16;
        if (v17)
        {
          if (v17 > 0xAAAAAAAAAAAAAAALL)
LABEL_206:
            sub_1C4764EE4();
          v18 = (char *)operator new(24 * v17);
          v14 = (char *)v10;
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[8 * ((uint64_t)(v10 - (_QWORD)v11) >> 3)];
        *(_QWORD *)v19 = v13;
        *((_QWORD *)v19 + 1) = 0;
        *((_DWORD *)v19 + 4) = v6;
        if (v14 == v11)
        {
          v22 = v14;
          v11 = &v18[8 * ((uint64_t)(v10 - (_QWORD)v11) >> 3)];
          v2 = v142;
        }
        else
        {
          v20 = &v18[8 * ((uint64_t)(v10 - (_QWORD)v11) >> 3)];
          v2 = v142;
          do
          {
            v21 = *(_OWORD *)(v14 - 24);
            *((_QWORD *)v20 - 1) = *((_QWORD *)v14 - 1);
            *(_OWORD *)(v20 - 24) = v21;
            v20 -= 24;
            v14 -= 24;
          }
          while (v14 != v11);
          v22 = v11;
          v11 = v20;
        }
        v144 = &v18[24 * v17];
        v15 = (uint64_t)(v19 + 24);
        if (v22)
        {
          v23 = (uint64_t)(v19 + 24);
          operator delete(v22);
          v15 = v23;
        }
      }
      else
      {
        *(_QWORD *)v10 = v13;
        *(_QWORD *)(v10 + 8) = 0;
        *(_DWORD *)(v10 + 16) = v6;
        v15 = v10 + 24;
      }
      *(_QWORD *)&v169 = sub_1C5242204;
      v10 = v15;
      sub_1C5242254((uint64_t)v11, v15, (uint64_t (**)(uint64_t, uint64_t))&v169, 0xAAAAAAAAAAAAAAABLL * ((v15 - (uint64_t)v11) >> 3));
      LODWORD(v154) = v154 + 1;
      v6 = sub_1C5245708((uint64_t)&v154, v154);
      LODWORD(v154) = v6;
    }
    while (v6 != v9);
    if (v11 != (char *)v10)
    {
      v30 = (char *)v10;
      while (1)
      {
        v31 = *(_OWORD *)v11;
        v155 = *((_QWORD *)v11 + 2);
        v154 = v31;
        v32 = v156;
        if (v156 == &v157)
        {
          v33 = v144;
        }
        else
        {
          v33 = v144;
          while (1)
          {
            v35 = v32[4];
            v34 = v32[5];
            v36 = *(_QWORD *)(*v35 + 24 * (_QWORD)v34 + 8);
            if ((*(_DWORD *)((v36 & 0xFFFFFFFFFFFFFFF8) + 24) | (v36 >> 1) & 3) > ((*(_QWORD *)(*(_QWORD *)v154 + 24 * *((_QWORD *)&v154 + 1)) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(*(_QWORD *)v154 + 24 * *((_QWORD *)&v154 + 1)) & 0xFFFFFFFFFFFFFFF8) + 24)))
              break;
            if (v34 != (uint64_t *)(*((unsigned int *)v35 + 2) - 1))
            {
              v37 = (char *)v34 + 1;
              v38 = *((_DWORD *)v32 + 12);
              if (v30 >= v33)
              {
                v40 = 0xAAAAAAAAAAAAAAABLL * ((v30 - v11) >> 3);
                v41 = v40 + 1;
                if (v40 + 1 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_205;
                if (0x5555555555555556 * ((v33 - v11) >> 3) > v41)
                  v41 = 0x5555555555555556 * ((v33 - v11) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((v33 - v11) >> 3) >= 0x555555555555555)
                  v42 = 0xAAAAAAAAAAAAAAALL;
                else
                  v42 = v41;
                if (v42)
                {
                  if (v42 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_206;
                  v43 = v30;
                  v44 = (char *)operator new(24 * v42);
                  v30 = v43;
                }
                else
                {
                  v44 = 0;
                }
                v45 = &v44[24 * v40];
                *(_QWORD *)v45 = v35;
                *((_QWORD *)v45 + 1) = v37;
                *((_DWORD *)v45 + 4) = v38;
                if (v30 == v11)
                {
                  v11 = &v44[24 * v40];
                }
                else
                {
                  v46 = &v44[24 * v40];
                  do
                  {
                    v47 = *(_OWORD *)(v30 - 24);
                    *((_QWORD *)v46 - 1) = *((_QWORD *)v30 - 1);
                    *(_OWORD *)(v46 - 24) = v47;
                    v46 -= 24;
                    v30 -= 24;
                  }
                  while (v30 != v11);
                  v30 = v11;
                  v11 = v46;
                }
                v33 = &v44[24 * v42];
                v39 = (uint64_t)(v45 + 24);
                if (v30)
                  operator delete(v30);
              }
              else
              {
                *(_QWORD *)v30 = v35;
                *((_QWORD *)v30 + 1) = v37;
                v39 = (uint64_t)(v30 + 24);
                *((_DWORD *)v30 + 4) = v38;
              }
              *(_QWORD *)&v169 = sub_1C5242204;
              sub_1C5242254((uint64_t)v11, v39, (uint64_t (**)(uint64_t, uint64_t))&v169, 0xAAAAAAAAAAAAAAABLL * ((v39 - (uint64_t)v11) >> 3));
              v30 = (char *)v39;
            }
            v48 = v32[1];
            if (v48)
            {
              do
              {
                v49 = (uint64_t **)v48;
                v48 = (uint64_t *)*v48;
              }
              while (v48);
            }
            else
            {
              do
              {
                v49 = (uint64_t **)v32[2];
                v28 = *v49 == (uint64_t *)v32;
                v32 = v49;
              }
              while (!v28);
            }
            v32 = v49;
            if (v49 == &v157)
            {
              v32 = &v157;
              break;
            }
          }
          v50 = (uint64_t *)v156;
          if (v156 != v32)
          {
            v51 = v33;
            do
            {
              v52 = (uint64_t *)v50[1];
              v53 = v50;
              if (v52)
              {
                do
                {
                  v54 = (uint64_t **)v52;
                  v52 = (uint64_t *)*v52;
                }
                while (v52);
              }
              else
              {
                do
                {
                  v54 = (uint64_t **)v53[2];
                  v28 = *v54 == v53;
                  v53 = (uint64_t *)v54;
                }
                while (!v28);
              }
              v55 = v30;
              if (v156 == (uint64_t **)v50)
                v156 = v54;
              --v158;
              sub_1C485B6E0(v157, v50);
              operator delete(v50);
              v50 = (uint64_t *)v54;
              v30 = v55;
            }
            while (v54 != v32);
            v33 = v51;
          }
        }
        v143 = (uint64_t)v11;
        v144 = v33;
        v56 = *((_QWORD *)v11 + 1);
        *(_QWORD *)&v154 = *(_QWORD *)v11;
        *((_QWORD *)&v154 + 1) = v56;
        LODWORD(v155) = *((_DWORD *)v11 + 4);
        *(_QWORD *)&v169 = sub_1C5242204;
        v145 = v30;
        if (v30 - v11 >= 25)
        {
          v57 = 0;
          v58 = 0xAAAAAAAAAAAAAAABLL * ((v30 - v11) >> 3);
          v59 = *(_QWORD *)v11;
          v60 = *((_QWORD *)v11 + 1);
          v61 = *((_DWORD *)v11 + 4);
          v62 = v11;
          do
          {
            v63 = (uint64_t)&v62[24 * v57 + 24];
            v64 = (2 * v57) | 1;
            v65 = 2 * v57 + 2;
            if (v65 < v58)
            {
              v66 = ((BOOL (*)(uint64_t, uint64_t))v169)((uint64_t)&v62[24 * v57 + 24], (uint64_t)&v62[24 * v57 + 48]);
              v30 = v145;
              if (v66)
              {
                v63 += 24;
                v64 = v65;
              }
            }
            *(_QWORD *)v62 = *(_QWORD *)v63;
            *((_QWORD *)v62 + 1) = *(_QWORD *)(v63 + 8);
            *((_DWORD *)v62 + 4) = *(_DWORD *)(v63 + 16);
            v62 = (char *)v63;
            v57 = v64;
          }
          while (v64 <= (uint64_t)((unint64_t)(v58 - 2) >> 1));
          if ((char *)v63 == v30 - 24)
          {
            *(_QWORD *)v63 = v59;
            *(_QWORD *)(v63 + 8) = v60;
            *(_DWORD *)(v63 + 16) = v61;
            v2 = v142;
            v11 = (char *)v143;
          }
          else
          {
            *(_QWORD *)v63 = *((_QWORD *)v30 - 3);
            *(_QWORD *)(v63 + 8) = *((_QWORD *)v30 - 2);
            *(_DWORD *)(v63 + 16) = *((_DWORD *)v30 - 2);
            *((_QWORD *)v30 - 3) = v59;
            *((_QWORD *)v30 - 2) = v60;
            *((_DWORD *)v30 - 2) = v61;
            v11 = (char *)v143;
            sub_1C5242254(v143, v63 + 24, (uint64_t (**)(uint64_t, uint64_t))&v169, 0xAAAAAAAAAAAAAAABLL * ((v63 + 24 - v143) >> 3));
            v2 = v142;
          }
        }
        v67 = v156;
        if (v156 != &v157)
          break;
LABEL_175:
        v127 = v157;
        v128 = &v157;
        v129 = &v157;
        if (!v157)
          goto LABEL_184;
        v128 = &v157;
        while (1)
        {
          while (1)
          {
            v129 = (uint64_t **)v127;
            if (!v159(&v154, v127 + 4))
              break;
            v127 = *v129;
            v128 = v129;
            if (!*v129)
              goto LABEL_184;
          }
          if (!v159((__int128 *)v129 + 2, (uint64_t *)&v154))
            break;
          v128 = v129 + 1;
          v127 = v129[1];
          if (!v127)
            goto LABEL_184;
        }
        if (!*v128)
        {
LABEL_184:
          v130 = operator new(0x38uLL);
          v130[2] = v154;
          *((_QWORD *)v130 + 6) = v155;
          *(_QWORD *)v130 = 0;
          *((_QWORD *)v130 + 1) = 0;
          *((_QWORD *)v130 + 2) = v129;
          *v128 = (uint64_t *)v130;
          if (*v156)
          {
            v156 = (uint64_t **)*v156;
            v131 = *v128;
          }
          else
          {
            v131 = (uint64_t *)v130;
          }
          sub_1C4768E74(v157, v131);
          ++v158;
        }
        v30 = v145 - 24;
        if (v11 == v145 - 24)
          goto LABEL_189;
      }
      v152 = v155;
      while (1)
      {
        v68 = *((_DWORD *)v67 + 12);
        v69 = v2[16];
        v70 = *(_QWORD *)(v69 + 88 * v152 + 48);
        v71 = *(_QWORD *)(v69 + 88 * v68 + 48);
        if (v70 != v71)
        {
          *(_QWORD *)&v169 = 0;
          v72 = v160[0];
          v73 = v161;
          if (v70 >= v71)
          {
            v74 = v71;
          }
          else
          {
            v74 = v70;
            v70 = v71;
          }
          if (sub_1C5242330(v160[0], v161, v74, v70, &v169) && (_QWORD)v169 != v72 + 16 * v73)
            goto LABEL_98;
        }
        v78 = v68 >= v152 ? v152 : v68;
        v79 = v152 <= v68 ? v68 : v152;
        v153[0] = v78;
        v153[1] = v79;
        if ((sub_1C620D3B4(v162[0], v163, v78, v79, &v169) & 1) != 0)
          goto LABEL_98;
        v80 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v2 + 16) + 176))(*(_QWORD *)(*v2 + 16));
        v81 = v2;
        v82 = v80;
        v83 = v81[16];
        v84 = *(_QWORD *)(v83 + 88 * v152 + 48);
        v85 = *(int **)(v83 + 88 * v68 + 48);
        *(_QWORD *)&v169 = 0;
        v86 = (uint64_t)v164;
        v87 = v166;
        if (sub_1C5242584((uint64_t)v164, v166, v84, (uint64_t)v85, &v169)
          && (_QWORD)v169 != v86 + 32 * v87)
        {
          break;
        }
        v141 = v87;
        v140 = *(_DWORD *)v84 + 1;
        v149 = *v85 + 1;
        v150 = (void *)operator new[]();
        bzero(v150, 4 * (v149 * v140));
        v151 = *(_DWORD *)v84;
        if (!*(_DWORD *)v84)
          goto LABEL_132;
        v89 = 0;
        v90 = 0;
        v91 = (_QWORD *)(v82 + 8);
        v147 = v68;
        v148 = (uint64_t)v85;
        v92 = *v85;
        v139 = v84;
        v146 = *(_QWORD *)(v84 + 8);
        v93 = *v85;
        do
        {
          if (v93)
          {
            v94 = 0;
            v95 = *(_DWORD *)(v146 + 4 * v90++);
            v96 = *(_QWORD *)(v148 + 8);
            do
            {
              v97 = *(_DWORD *)(v96 + 4 * v94);
              if (v95 == v97
                || v95 - 1 <= 0x3FFFFFFE && v97 - 1 <= 0x3FFFFFFE && llvm::MCRegisterInfo::regsOverlap(v91, v95, v97))
              {
                *((_DWORD *)v150 + v90 * v149 + (v94 + 1)) = 2139095040;
                v89 = 1;
              }
              ++v94;
            }
            while (v92 != (_DWORD)v94);
            v93 = v92;
            v68 = v147;
          }
          else
          {
            ++v90;
          }
        }
        while (v90 != v151);
        if ((v89 & 1) == 0)
        {
LABEL_132:
          MEMORY[0x1CAA32F9C](v150, 0x1000C8052888210);
          v2 = v142;
          v98 = v142[16];
          v99 = *(_QWORD *)(v98 + 88 * v152 + 48);
          v100 = *(_QWORD *)(v98 + 88 * v68 + 48);
          if (v99 >= v100)
          {
            v167 = v100;
            v168 = v99;
          }
          else
          {
            v167 = v99;
            v168 = v100;
          }
          sub_1C52435B8((uint64_t)&v169, (uint64_t)v160, (uint64_t *)&v167);
          v11 = (char *)v143;
          goto LABEL_98;
        }
        v167 = __PAIR64__(v149, v140);
        v168 = (unint64_t)v150;
        v2 = v142;
        v103 = sub_1C5242418(v142, v152, v68, (uint64_t *)&v167);
        v104 = v168;
        v168 = 0;
        if (v104)
          MEMORY[0x1CAA32F9C](v104, 0x1000C8052888210);
        v105 = v142[22];
        *(_QWORD *)&v169 = 0;
        v106 = sub_1C5242584(v86, v141, v139, v148, &v169);
        v107 = (uint64_t *)v169;
        if ((v106 & 1) != 0)
        {
          v11 = (char *)v143;
        }
        else
        {
          if (4 * (int)v165 + 4 >= 3 * v141)
          {
            sub_1C5243460((uint64_t)&v164, 2 * v141);
            *(_QWORD *)&v169 = 0;
            sub_1C5242584((uint64_t)v164, v166, v139, v148, &v169);
            v107 = (uint64_t *)v169;
            v11 = (char *)v143;
          }
          else
          {
            v11 = (char *)v143;
            if (v141 + ~(_DWORD)v165 - HIDWORD(v165) <= v141 >> 3)
            {
              sub_1C5243460((uint64_t)&v164, v141);
              *(_QWORD *)&v169 = 0;
              sub_1C5242584((uint64_t)v164, v166, v139, v148, &v169);
              v107 = (uint64_t *)v169;
            }
          }
          LODWORD(v165) = v165 + 1;
          if (*v107 != -4096 || v107[1] != -4096)
            --HIDWORD(v165);
          *v107 = v139;
          v107[1] = v148;
          v107[2] = 0;
          v107[3] = 0;
        }
        v119 = (uint64_t *)(v105 + 48 * v103);
        v121 = *v119;
        v120 = v119[1];
        if (v120)
        {
          v122 = (unint64_t *)(v120 + 8);
          do
            v123 = __ldxr(v122);
          while (__stxr(v123 + 1, v122));
        }
        v124 = (std::__shared_weak_count *)v107[3];
        v107[2] = v121;
        v107[3] = v120;
        if (v124)
        {
          p_shared_owners = (unint64_t *)&v124->__shared_owners_;
          do
            v126 = __ldaxr(p_shared_owners);
          while (__stlxr(v126 - 1, p_shared_owners));
          if (!v126)
          {
            ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
            v118 = v124;
LABEL_172:
            std::__shared_weak_count::__release_weak(v118);
          }
        }
LABEL_173:
        sub_1C620D498((uint64_t)&v169, (uint64_t)v162, v153);
LABEL_98:
        v76 = v67[1];
        if (v76)
        {
          do
          {
            v77 = (uint64_t **)v76;
            v76 = (uint64_t *)*v76;
          }
          while (v76);
        }
        else
        {
          do
          {
            v77 = (uint64_t **)v67[2];
            v28 = *v77 == (uint64_t *)v67;
            v67 = v77;
          }
          while (!v28);
        }
        v67 = v77;
        if (v77 == &v157)
          goto LABEL_175;
      }
      v101 = *(_QWORD *)(v169 + 16);
      v102 = *(std::__shared_weak_count **)(v169 + 24);
      if (v102)
      {
        v108 = (unint64_t *)&v102->__shared_owners_;
        v2 = v142;
        do
          v109 = __ldxr(v108);
        while (__stxr(v109 + 1, v108));
        do
          v110 = __ldxr(v108);
        while (__stxr(v110 + 1, v108));
      }
      else
      {
        v2 = v142;
      }
      *(_QWORD *)&v169 = v101;
      *((_QWORD *)&v169 + 1) = v102;
      v170 = v152;
      v171 = v68;
      v172 = -1;
      v173 = -1;
      v111 = sub_1C524266C(v2, &v169);
      v112 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
      if (*((_QWORD *)&v169 + 1))
      {
        v113 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
        do
          v114 = __ldaxr(v113);
        while (__stlxr(v114 - 1, v113));
        if (!v114)
        {
          ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
          std::__shared_weak_count::__release_weak(v112);
        }
      }
      v115 = v2[15];
      if (v115)
      {
        sub_1C52429D0(*(_QWORD *)(*(_QWORD *)v115 + 128), *(_QWORD *)(*(_QWORD *)v115 + 176), v111, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v115 + 176) + 48 * v111 + 20));
        sub_1C52429D0(*(_QWORD *)(*(_QWORD *)v115 + 128), *(_QWORD *)(*(_QWORD *)v115 + 176), v111, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v115 + 176) + 48 * v111 + 24));
      }
      if (!v102)
        goto LABEL_173;
      v116 = (unint64_t *)&v102->__shared_owners_;
      do
        v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (v117)
        goto LABEL_173;
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      v118 = v102;
      goto LABEL_172;
    }
LABEL_189:
    if (v11)
      operator delete(v11);
  }
  sub_1C49F3440(v157);
  MEMORY[0x1CAA32FB4](v160[0], 8);
  MEMORY[0x1CAA32FB4](v162[0], 4);
  v132 = v164;
  if (v166)
  {
    v133 = &v164[4 * v166];
    do
    {
      v134 = v132[1];
      if ((*v132 != -4096 || v134 != -4096) && (*v132 != -8192 || v134 != -8192))
      {
        v135 = (std::__shared_weak_count *)v132[3];
        if (v135)
        {
          v136 = (unint64_t *)&v135->__shared_owners_;
          do
            v137 = __ldaxr(v136);
          while (__stlxr(v137 - 1, v136));
          if (!v137)
          {
            ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
            std::__shared_weak_count::__release_weak(v135);
          }
        }
      }
      v132 += 4;
    }
    while (v132 != v133);
    v132 = v164;
  }
  return MEMORY[0x1CAA32FB4](v132, 8);
}

BOOL sub_1C5242190(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(_QWORD *)(*(_QWORD *)*a1 + 24 * a1[1] + 8);
  v3 = *(_QWORD *)(*(_QWORD *)*a2 + 24 * a2[1] + 8);
  v4 = *(_DWORD *)((v2 & 0xFFFFFFFFFFFFFFF8) + 24) | (v2 >> 1) & 3;
  v5 = (v3 >> 1) & 3 | *(_DWORD *)((v3 & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v4 < v5)
    return 1;
  if (v4 > v5)
    return 0;
  return *(_DWORD *)(*a1 + 112) < *(_DWORD *)(*a2 + 112);
}

BOOL sub_1C5242204(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(**(_QWORD **)a1 + 24 * *(_QWORD *)(a1 + 8));
  v3 = *(_QWORD *)(**(_QWORD **)a2 + 24 * *(_QWORD *)(a2 + 8));
  return (*(_DWORD *)((v2 & 0xFFFFFFFFFFFFFFF8) + 24) | (v2 >> 1) & 3) > ((v3 >> 1) & 3 | *(_DWORD *)((v3 & 0xFFFFFFFFFFFFFFF8) + 24));
}

uint64_t sub_1C5242254(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v16 = v4;
    v17 = v5;
    v8 = result;
    v9 = v6 >> 1;
    v10 = result + 24 * (v6 >> 1);
    v11 = (__int128 *)(a2 - 24);
    result = (*a3)(v10, a2 - 24);
    if ((_DWORD)result)
    {
      v12 = *v11;
      v15 = *((_QWORD *)v11 + 2);
      v14 = v12;
      do
      {
        v13 = v10;
        *(_QWORD *)v11 = *(_QWORD *)v10;
        *((_QWORD *)v11 + 1) = *(_QWORD *)(v10 + 8);
        *((_DWORD *)v11 + 4) = *(_DWORD *)(v10 + 16);
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v10 = v8 + 24 * v9;
        result = (*a3)(v10, (uint64_t)&v14);
        v11 = (__int128 *)v13;
      }
      while ((result & 1) != 0);
      *(_OWORD *)v13 = v14;
      *(_DWORD *)(v13 + 16) = v15;
    }
  }
  return result;
}

uint64_t sub_1C5242330(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v20;

  if (a2)
  {
    v5 = ((a4 >> 4) ^ (a4 >> 9) | ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32))
       + ~((unint64_t)((a4 >> 4) ^ (a4 >> 9)) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = a2 - 1;
    v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v10 = (_QWORD *)(a1 + 16 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 == a3 && v12 == a4)
    {
      v14 = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      while (v11 != -4096 || v12 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v12 == -8192;
        if (v18 && v11 == -8192)
          v16 = v10;
        v20 = v9 + v17++;
        v9 = v20 & v8;
        v10 = (_QWORD *)(a1 + 16 * (v20 & v8));
        v11 = *v10;
        v12 = v10[1];
        v14 = 1;
        if (*v10 == a3 && v12 == a4)
          goto LABEL_9;
      }
      v14 = 0;
      if (v16)
        v10 = v16;
    }
  }
  else
  {
    v10 = 0;
    v14 = 0;
  }
LABEL_9:
  *a5 = v10;
  return v14;
}

unint64_t sub_1C5242418(uint64_t *a1, int a2, int a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v27 = *a4;
  v7 = a4[1];
  *a4 = 0;
  a4[1] = 0;
  v28 = v7;
  sub_1C5242A54(&v29, (uint64_t)(a1 + 9), (int *)&v27);
  v8 = v28;
  v28 = 0;
  if (v8)
    MEMORY[0x1CAA32F9C](v8, 0x1000C8052888210);
  v10 = v29;
  v9 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  *(_QWORD *)&v22 = v10;
  *((_QWORD *)&v22 + 1) = v9;
  v23 = a2;
  v24 = a3;
  v25 = -1;
  v26 = -1;
  v13 = sub_1C524266C(a1, &v22);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = a1[15];
  if (v17)
  {
    sub_1C52429D0(*(_QWORD *)(*(_QWORD *)v17 + 128), *(_QWORD *)(*(_QWORD *)v17 + 176), v13, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v17 + 176) + 48 * v13 + 20));
    sub_1C52429D0(*(_QWORD *)(*(_QWORD *)v17 + 128), *(_QWORD *)(*(_QWORD *)v17 + 176), v13, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v17 + 176) + 48 * v13 + 24));
  }
  v18 = v30;
  if (v30)
  {
    v19 = (unint64_t *)&v30->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v13;
}

uint64_t sub_1C5242584(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v15;
  int v16;
  BOOL v17;
  int v19;

  if (a2)
  {
    v5 = ((a4 >> 4) ^ (a4 >> 9) | ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32))
       + ~((unint64_t)((a4 >> 4) ^ (a4 >> 9)) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ ((_DWORD)v7 + ~((_DWORD)v7 << 27)));
    v9 = (_QWORD *)(a1 + 32 * v8);
    v10 = *v9;
    v11 = v9[1];
    if (*v9 == a3 && v11 == a4)
    {
      v13 = 1;
    }
    else
    {
      v15 = 0;
      v16 = 1;
      while (v10 != -4096 || v11 != -4096)
      {
        if (v15)
          v17 = 0;
        else
          v17 = v11 == -8192;
        if (v17 && v10 == -8192)
          v15 = v9;
        v19 = v8 + v16++;
        v8 = v19 & (a2 - 1);
        v9 = (_QWORD *)(a1 + 32 * v8);
        v10 = *v9;
        v11 = v9[1];
        v13 = 1;
        if (*v9 == a3 && v11 == a4)
          goto LABEL_9;
      }
      v13 = 0;
      if (v15)
        v9 = v15;
    }
  }
  else
  {
    v9 = 0;
    v13 = 0;
  }
LABEL_9:
  *a5 = v9;
  return v13;
}

unint64_t sub_1C524266C(uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  _OWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char *v30;
  char *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  uint64_t v35;

  v4 = a1[26];
  if (a1[25] == v4)
  {
    v16 = a1[22];
    v15 = a1[23];
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - v16) >> 4);
    v17 = a1[24];
    if (v15 >= v17)
    {
      v20 = v14 + 1;
      if (v14 + 1 > 0x555555555555555)
        abort();
      v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v16) >> 4);
      if (2 * v21 > v20)
        v20 = 2 * v21;
      if (v21 >= 0x2AAAAAAAAAAAAAALL)
        v22 = 0x555555555555555;
      else
        v22 = v20;
      if (v22)
      {
        if (v22 > 0x555555555555555)
          sub_1C4764EE4();
        v23 = (char *)operator new(48 * v22);
      }
      else
      {
        v23 = 0;
      }
      v24 = &v23[16 * ((uint64_t)(v15 - v16) >> 4)];
      v25 = &v23[48 * v22];
      v26 = *a2;
      v27 = a2[1];
      *(_QWORD *)a2 = 0;
      *((_QWORD *)a2 + 1) = 0;
      *(_OWORD *)v24 = v26;
      *((_OWORD *)v24 + 1) = v27;
      *((_OWORD *)v24 + 2) = a2[2];
      v19 = v24 + 48;
      while (v15 != v16)
      {
        v28 = *(_OWORD *)(v15 - 48);
        v15 -= 48;
        *((_OWORD *)v24 - 3) = v28;
        v24 -= 48;
        *(_QWORD *)v15 = 0;
        *(_QWORD *)(v15 + 8) = 0;
        v29 = *(_OWORD *)(v15 + 32);
        *((_OWORD *)v24 + 1) = *(_OWORD *)(v15 + 16);
        *((_OWORD *)v24 + 2) = v29;
      }
      v30 = (char *)a1[22];
      v31 = (char *)a1[23];
      a1[22] = (uint64_t)v24;
      a1[23] = (uint64_t)v19;
      a1[24] = (uint64_t)v25;
      while (v31 != v30)
      {
        v32 = (std::__shared_weak_count *)*((_QWORD *)v31 - 5);
        if (v32)
        {
          p_shared_owners = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldaxr(p_shared_owners);
          while (__stlxr(v34 - 1, p_shared_owners));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        v31 -= 48;
      }
      if (v30)
        operator delete(v30);
    }
    else
    {
      *(_OWORD *)v15 = *a2;
      *(_QWORD *)a2 = 0;
      *((_QWORD *)a2 + 1) = 0;
      v18 = a2[2];
      *(_OWORD *)(v15 + 16) = a2[1];
      *(_OWORD *)(v15 + 32) = v18;
      v19 = (_OWORD *)(v15 + 48);
    }
    a1[23] = (uint64_t)v19;
    LODWORD(v5) = v14;
  }
  else
  {
    v5 = *(unsigned int *)(v4 - 4);
    a1[26] = v4 - 4;
    v6 = a1[22];
    v7 = v6 + 48 * v5;
    v8 = *a2;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v9 = *(std::__shared_weak_count **)(v7 + 8);
    *(_OWORD *)v7 = v8;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = a2[2];
    v13 = v6 + 48 * v5;
    *(_OWORD *)(v13 + 16) = a2[1];
    *(_OWORD *)(v13 + 32) = v12;
    v14 = v5;
  }
  v35 = a1[22] + 48 * v5;
  sub_1C52428A8(v35, a1[16], v14, 0);
  sub_1C52428A8(v35, a1[16], v14, 1u);
  return v14;
}

void sub_1C52428A8(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v7;
  char *v8;
  char **v9;
  char *v10;
  _QWORD *v11;
  char *v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  int v22;

  v7 = a2 + 88 * *(unsigned int *)(a1 + 4 * a4 + 20);
  v10 = *(char **)(v7 + 64);
  v9 = (char **)(v7 + 64);
  v8 = v10;
  v11 = v9 + 1;
  v12 = v9[1];
  v13 = (unint64_t)v9[2];
  if ((unint64_t)v12 >= v13)
  {
    v15 = (v12 - v8) >> 2;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 62)
      abort();
    v17 = v13 - (_QWORD)v8;
    if (v17 >> 1 > v16)
      v16 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 62)
        sub_1C4764EE4();
      v19 = (char *)operator new(4 * v18);
    }
    else
    {
      v19 = 0;
    }
    v20 = &v19[4 * v15];
    v21 = &v19[4 * v18];
    *(_DWORD *)v20 = a3;
    v14 = v20 + 4;
    while (v12 != v8)
    {
      v22 = *((_DWORD *)v12 - 1);
      v12 -= 4;
      *((_DWORD *)v20 - 1) = v22;
      v20 -= 4;
    }
    *v9 = v20;
    *v11 = v14;
    v9[2] = v21;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_DWORD *)v12 = a3;
    v14 = v12 + 4;
    v15 = (v12 - v8) >> 2;
  }
  *v11 = v14;
  *(_QWORD *)(a1 + 8 * a4 + 32) = v15;
}

uint64_t sub_1C52429D0(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int *v8;
  int v9;
  uint64_t v10;
  unsigned int *v11;
  int v12;
  int v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = (uint64_t *)(a2 + 48 * a3);
  v5 = *v4;
  v6 = *v4 + 16;
  LODWORD(v4) = *((_DWORD *)v4 + 6);
  v7 = (_DWORD)v4 == a4;
  if ((_DWORD)v4 == a4)
    v8 = (int *)v6;
  else
    v8 = (int *)(v5 + 20);
  v9 = *v8;
  v10 = result + 88 * a4;
  v12 = *(_DWORD *)(v10 + 20);
  v13 = *(_DWORD *)(v10 + 24);
  v11 = (unsigned int *)(v10 + 20);
  v11[1] = v13 + v9;
  v14 = (uint64_t *)(v5 + 32);
  v15 = (uint64_t *)(v5 + 24);
  if (!v7)
    v14 = v15;
  if (v12)
  {
    v16 = 0;
    v17 = *v14;
    v18 = *(_QWORD *)(result + 88 * a4 + 32);
    do
    {
      *(_DWORD *)(v18 + 4 * v16) += *(unsigned __int8 *)(v17 + v16);
      ++v16;
    }
    while (v16 < *v11);
  }
  return result;
}

unint64_t sub_1C5242A54(_QWORD *a1, uint64_t a2, int *a3)
{
  float *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  std::__shared_weak_count *shared_owners;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t result;
  unsigned int v26;
  int i;
  uint64_t v28;
  unint64_t v29;
  float *v30;
  uint64_t v31;
  float *v32;
  int v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  _DWORD *v40;
  int *v41;
  uint64_t *v42;
  uint64_t v44;
  float *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;

  v4 = (float *)*((_QWORD *)a3 + 1);
  *((_QWORD *)a3 + 1) = 0;
  v5 = a2 + 24;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *a3;
  v8 = a3[1];
  LODWORD(v44) = *a3;
  HIDWORD(v44) = v8;
  v45 = v4;
  *(_QWORD *)a3 = 0;
  v9 = *(_DWORD *)(a2 + 40);
  if (!v9)
  {
LABEL_2:
    v10 = (std::__shared_weak_count *)operator new(0x58uLL);
    v10->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    v10->__shared_weak_owners_ = 0;
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E81499E0;
    v10[1].__vftable = 0;
    v44 = 0;
    v45 = 0;
    v10[1].__shared_owners_ = 0;
    v10[1].__shared_weak_owners_ = v5;
    LODWORD(v10[2].__vftable) = v7;
    HIDWORD(v10[2].__vftable) = v8;
    v10[2].__shared_owners_ = (uint64_t)v4;
    sub_1C5243020((unsigned int *)&v10[2].__shared_weak_owners_, (unsigned int *)&v10[2]);
    shared_owners = (std::__shared_weak_count *)v10[1].__shared_owners_;
    if (shared_owners)
    {
      v14 = a1;
      if (shared_owners->__shared_owners_ != -1)
        goto LABEL_14;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      do
        v16 = __ldxr(p_shared_weak_owners);
      while (__stxr(v16 + 1, p_shared_weak_owners));
      v10[1].__vftable = (std::__shared_weak_count_vtbl *)&v10[1];
      v10[1].__shared_owners_ = (uint64_t)v10;
      std::__shared_weak_count::__release_weak(shared_owners);
    }
    else
    {
      v14 = a1;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
      do
        v18 = __ldxr(p_shared_weak_owners);
      while (__stxr(v18 + 1, p_shared_weak_owners));
      v10[1].__vftable = (std::__shared_weak_count_vtbl *)&v10[1];
      v10[1].__shared_owners_ = (uint64_t)v10;
    }
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
LABEL_14:
    v46 = v10 + 1;
    v47 = 0;
    if ((sub_1C52431F0(*(_QWORD *)(a2 + 24), *(_DWORD *)(a2 + 40), (unint64_t *)&v46, &v47) & 1) != 0)
      goto LABEL_20;
    v20 = *(_DWORD *)(a2 + 40);
    v21 = *(_DWORD *)(a2 + 32);
    if (4 * v21 + 4 >= 3 * v20)
    {
      v20 *= 2;
    }
    else if (v20 + ~v21 - *(_DWORD *)(a2 + 36) > v20 >> 3)
    {
LABEL_17:
      v22 = v47;
      ++*(_DWORD *)(a2 + 32);
      if (*v22)
        --*(_DWORD *)(a2 + 36);
      *v22 = (unint64_t)&v10[1];
LABEL_20:
      *v14 = v10 + 2;
      v14[1] = v10;
      do
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
        goto LABEL_24;
      goto LABEL_25;
    }
    sub_1C5243340(v5, v20);
    v47 = 0;
    sub_1C52431F0(*(_QWORD *)(a2 + 24), *(_DWORD *)(a2 + 40), (unint64_t *)&v46, &v47);
    goto LABEL_17;
  }
  v47 = (unint64_t *)sub_1C6193EA0(v4, (uint64_t)&v4[v8 * v7]);
  v26 = (v9 - 1) & sub_1C5242DEC(&v44, (int *)&v44 + 1, (uint64_t *)&v47);
  for (i = 1; ; ++i)
  {
    v28 = v26;
    v29 = *(_QWORD *)(v6 + 8 * v26);
    if (v29 < 2)
      goto LABEL_29;
    if (v7 != *(_DWORD *)(v29 + 24) || v8 != *(_DWORD *)(v29 + 28))
      goto LABEL_38;
    if (!(v8 * v7))
      break;
    v30 = *(float **)(v29 + 32);
    v31 = 4 * (v8 * v7);
    v32 = v4;
    while (*v32 == *v30)
    {
      ++v32;
      ++v30;
      v31 -= 4;
      if (!v31)
        goto LABEL_39;
    }
LABEL_29:
    if (!v29)
      goto LABEL_2;
LABEL_38:
    v33 = i + v28;
    v26 = v33 & (v9 - 1);
  }
LABEL_39:
  v34 = (_QWORD *)(v6 + 8 * v28);
  if (v34 == (_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * *(unsigned int *)(a2 + 40)))
    goto LABEL_2;
  v35 = *(std::__shared_weak_count **)(v29 + 8);
  if (v35 && (v36 = std::__shared_weak_count::lock(v35)) != 0)
  {
    v10 = v36;
    *a1 = *v34 + 24;
    a1[1] = v36;
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
    do
      v39 = __ldaxr(v37);
    while (__stlxr(v39 - 1, v37));
    if (!v39)
    {
LABEL_24:
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
LABEL_25:
    result = (unint64_t)v45;
    if (v45)
      JUMPOUT(0x1CAA32F9CLL);
  }
  else
  {
    v40 = (_DWORD *)sub_1C5240EB8();
    return sub_1C5242DEC(v40, v41, v42);
  }
  return result;
}

unint64_t sub_1C5242DEC(_DWORD *a1, int *a2, uint64_t *a3)
{
  uint64_t *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v7;
  int v8;
  unint64_t v9;
  int *v10;
  _DWORD *v12;
  _OWORD v13[4];
  _OWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a3;
  v17 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  memset(v13, 0, sizeof(v13));
  v4 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v5 = &unk_1ED7EA000;
  if ((v4 & 1) == 0)
  {
    v12 = a1;
    v10 = a2;
    v7 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v5 = &unk_1ED7EA000;
    a2 = v10;
    v3 = a3;
    v8 = v7;
    a1 = v12;
    if (v8)
    {
      v9 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v9 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v9;
      __cxa_guard_release(&qword_1ED7EAC88);
      v5 = (_QWORD *)&unk_1ED7EA000;
      v3 = a3;
      a1 = v12;
      a2 = v10;
    }
  }
  v16 = v5[400];
  LODWORD(v13[0]) = *a1;
  return sub_1C5240E38((char *)v13, (_DWORD *)v13 + 1, (char *)v14, *a2, v3);
}

void sub_1C5242EFC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E81499E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C5242F0C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E81499E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5242F3C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  unint64_t *v8;

  v2 = a1[5];
  v7 = a1 + 3;
  v8 = 0;
  if (sub_1C52431F0(*(_QWORD *)v2, *(_DWORD *)(v2 + 16), (unint64_t *)&v7, &v8))
  {
    *v8 = 1;
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  v3 = a1[10];
  a1[10] = 0;
  if (v3)
    MEMORY[0x1CAA32F9C](v3, 0x1000C8077774924);
  v4 = a1[9];
  a1[9] = 0;
  if (v4)
    MEMORY[0x1CAA32F9C](v4, 0x1000C8077774924);
  v5 = a1[7];
  a1[7] = 0;
  if (v5)
    MEMORY[0x1CAA32F9C](v5, 0x1000C8052888210);
  v6 = (std::__shared_weak_count *)a1[4];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

unsigned int *sub_1C5243020(unsigned int *a1, unsigned int *a2)
{
  size_t v4;
  void *v5;
  size_t v6;
  void *v7;
  size_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t i;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int *v18;
  unsigned int v19;
  int *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  int v26;

  *(_QWORD *)a1 = 0;
  v4 = *a2 - 1;
  v5 = (void *)operator new[]();
  bzero(v5, v4);
  *((_QWORD *)a1 + 1) = v5;
  v6 = a2[1] - 1;
  v7 = (void *)operator new[]();
  bzero(v7, v6);
  *((_QWORD *)a1 + 2) = v7;
  v8 = 4 * (a2[1] - 1);
  v9 = (int *)operator new[]();
  bzero(v9, v8);
  v11 = *a2;
  v10 = a2[1];
  if (v11 > 1)
  {
    v12 = *((_QWORD *)a2 + 1) + 4;
    v13 = a2[1];
    for (i = 1; i != v11; ++i)
    {
      if (v10 < 2)
      {
        v16 = 0;
      }
      else
      {
        v15 = 0;
        v16 = 0;
        do
        {
          if (*(float *)(v12 + 4 * v13 + 4 * v15) == INFINITY)
          {
            ++v16;
            ++v9[v15];
            v17 = *((_QWORD *)a1 + 2);
            *(_BYTE *)(*((_QWORD *)a1 + 1) + i - 1) = 1;
            *(_BYTE *)(v17 + v15) = 1;
          }
          ++v15;
        }
        while (v10 - 1 != v15);
      }
      if (*a1 > v16)
        v16 = *a1;
      *a1 = v16;
      v13 += v10;
    }
  }
  v18 = v9;
  if ((unint64_t)(v10 - 1) >= 2)
  {
    v20 = v9 + 1;
    v19 = *v9;
    v21 = 4 * v10 - 8;
    v18 = v9;
    v22 = (unsigned int *)(v9 + 1);
    do
    {
      v24 = *v22++;
      v23 = v24;
      v25 = v19 >= v24;
      if (v19 <= v24)
        v19 = v23;
      if (!v25)
        v18 = v20;
      v20 = (int *)v22;
      v21 -= 4;
    }
    while (v21);
  }
  v26 = *v18;
  if (a1[1] > *v18)
    v26 = a1[1];
  a1[1] = v26;
  MEMORY[0x1CAA32F9C](v9, 0x1000C8052888210);
  return a1;
}

uint64_t sub_1C52431F0(uint64_t a1, int a2, unint64_t *a3, unint64_t **a4)
{
  unint64_t *v5;
  uint64_t result;
  _DWORD *v10;
  int *v11;
  int v12;
  unint64_t *v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  float *v21;
  float *v22;
  uint64_t v23;
  BOOL v24;
  unsigned int v25;
  unint64_t v26;

  if (!a2)
  {
    v5 = 0;
    result = 0;
    goto LABEL_3;
  }
  v10 = (_DWORD *)(*a3 + 24);
  v11 = (int *)(*a3 + 28);
  v26 = sub_1C6193EA0(*(_QWORD **)(*a3 + 32), *(_QWORD *)(*a3 + 32) + 4 * (*v11 * *v10));
  v12 = sub_1C5242DEC(v10, v11, (uint64_t *)&v26);
  v13 = 0;
  v14 = (a2 - 1) & v12;
  v15 = *a3;
  v16 = 1;
  result = 1;
  while (1)
  {
    v5 = (unint64_t *)(a1 + 8 * v14);
    v17 = *v5;
    if (v15 >= 2)
    {
      if (v17 >= 2)
      {
        v18 = *(_DWORD *)(v15 + 24);
        if (v18 != *(_DWORD *)(v17 + 24))
          goto LABEL_17;
        v19 = *(_DWORD *)(v15 + 28);
        if (v19 != *(_DWORD *)(v17 + 28))
          goto LABEL_17;
        v20 = (v19 * v18);
        if (!(_DWORD)v20)
        {
LABEL_23:
          result = 1;
          goto LABEL_3;
        }
        v21 = *(float **)(v15 + 32);
        v22 = *(float **)(v17 + 32);
        v23 = 4 * v20;
        while (*v21 == *v22)
        {
          ++v21;
          ++v22;
          v23 -= 4;
          if (!v23)
            goto LABEL_3;
        }
      }
    }
    else if (v15 == v17)
    {
      goto LABEL_23;
    }
    if (!v17)
      break;
LABEL_17:
    if (v13)
      v24 = 0;
    else
      v24 = v17 == 1;
    if (v24)
      v13 = (unint64_t *)(a1 + 8 * v14);
    v25 = v16 + v14;
    ++v16;
    v14 = v25 & (a2 - 1);
  }
  result = 0;
  if (v13)
    v5 = v13;
LABEL_3:
  *a4 = v5;
  return result;
}

void sub_1C5243340(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t *v14;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  v9 = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = v9;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
      bzero(v9, 8 * v10);
    if ((_DWORD)v3)
    {
      v11 = 8 * v3;
      v12 = (unint64_t *)v4;
      do
      {
        if (*v12 >= 2)
        {
          v14 = 0;
          sub_1C52431F0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v12, &v14);
          *v14 = *v12;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v12;
        v11 -= 8;
      }
      while (v11);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v13 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v13)
    bzero(v9, 8 * v13);
}

_OWORD *sub_1C5243460(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  int64x2_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  uint64_t *v21;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        *result = v12;
        result += 2;
        v11 -= 32;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v13 = 32 * v3;
      v14 = (uint64_t *)v4;
      do
      {
        v15 = *v14;
        v16 = v14[1];
        if ((*v14 != -4096 || v16 != -4096) && (v15 != -8192 || v16 != -8192))
        {
          v21 = 0;
          sub_1C5242584(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v15, v16, &v21);
          v17 = v21;
          *v21 = *v14;
          *(_OWORD *)(v17 + 1) = *(_OWORD *)(v14 + 1);
          v17[3] = v14[3];
          v14[2] = 0;
          v14[3] = 0;
          ++*(_DWORD *)(a1 + 8);
        }
        v14 += 4;
        v13 -= 32;
      }
      while (v13);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v18 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v18)
  {
    v19 = 32 * v18;
    v20 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *result = v20;
      result += 2;
      v19 -= 32;
    }
    while (v19);
  }
  return result;
}

uint64_t sub_1C52435B8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t *v7;
  unsigned int v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;

  v12 = 0;
  result = sub_1C5242330(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, a3[1], &v12);
  v7 = v12;
  v8 = *(_DWORD *)(a2 + 16);
  if ((result & 1) != 0)
  {
    v9 = 0;
    goto LABEL_9;
  }
  v10 = *(_DWORD *)(a2 + 8);
  if (4 * v10 + 4 >= 3 * v8)
  {
    v8 *= 2;
  }
  else if (v8 + ~v10 - *(_DWORD *)(a2 + 12) > v8 >> 3)
  {
    goto LABEL_5;
  }
  sub_1C52436D0(a2, v8);
  v12 = 0;
  result = sub_1C5242330(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, a3[1], &v12);
  v7 = v12;
LABEL_5:
  ++*(_DWORD *)(a2 + 8);
  if (*v7 != -4096 || v7[1] != -4096)
    --*(_DWORD *)(a2 + 12);
  *v7 = *a3;
  v7[1] = a3[1];
  v8 = *(_DWORD *)(a2 + 16);
  v9 = 1;
LABEL_9:
  v11 = *(_QWORD *)a2 + 16 * v8;
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v9;
  return result;
}

void sub_1C52436D0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  v9 = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = v9;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
      memset_pattern16(v9, &unk_1C85F2160, 16 * v10);
    if ((_DWORD)v3)
    {
      v11 = 16 * v3;
      v12 = (uint64_t *)(v4 + 8);
      do
      {
        v13 = *(v12 - 1);
        v14 = *v12;
        if ((v13 != -4096 || v14 != -4096) && (v13 != -8192 || v14 != -8192))
        {
          v17 = 0;
          sub_1C5242330(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v13, v14, &v17);
          v15 = v17;
          *v17 = *(v12 - 1);
          v15[1] = *v12;
          ++*(_DWORD *)(a1 + 8);
        }
        v12 += 2;
        v11 -= 16;
      }
      while (v11);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
    memset_pattern16(v9, &unk_1C85F2160, 16 * v16);
}

void *sub_1C524381C(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  void *result;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)4uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C620D5E0(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
    return memset(result, 255, 8 * v10);
  return result;
}

void sub_1C52438DC()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C52438F0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  int v24;
  int *v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int *v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  _QWORD *v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int *v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  size_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int *v65;
  float *v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int *v77;
  float *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  unsigned int *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  const void **v88;
  uint64_t v89;
  char *v90;
  int v91;
  int v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD v108[2];
  uint64_t v109;

  v2 = (uint64_t)a2;
  v3 = *a2;
  v98 = a2[2];
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 16) + 176))(*(_QWORD *)(*a2 + 16));
  v109 = 0;
  v107 = 0;
  v108[0] = 0;
  v106 = result;
  *(_DWORD *)((char *)v108 + 7) = 0;
  v95 = v3;
  v5 = *(_QWORD *)(v3 + 328);
  v93 = v3 + 320;
  if (v5 != v3 + 320)
  {
    v96 = (uint64_t *)v2;
    while (1)
    {
      v6 = v5 + 48;
      v7 = *(_QWORD *)(v5 + 56);
      if (v7 != v5 + 48)
        break;
LABEL_107:
      v5 = *(_QWORD *)(v5 + 8);
      if (v5 == v93)
        return result;
    }
    v99 = (v5 >> 4) ^ (v5 >> 9);
    v97 = v5;
    while (1)
    {
      result = llvm::CoalescerPair::setRegisters((llvm::CoalescerPair *)&v106, (const llvm::MachineInstr *)v7);
      if (!(_DWORD)result)
        goto LABEL_82;
      v9 = v107;
      v8 = HIDWORD(v107);
      if (HIDWORD(v107) == (_DWORD)v107)
        goto LABEL_82;
      v10 = *(_QWORD *)(v98 + 248);
      if (v10)
        break;
      v18 = 0.0;
LABEL_14:
      v19 = v18 * (float)(1.0 / (float)v10);
      if (v109)
      {
        v20 = *(_QWORD *)(v2 + 24);
        v21 = *(unsigned int *)(v2 + 40);
        if ((_DWORD)v21)
        {
          LODWORD(v22) = (v21 - 1) & (37 * v107);
          v23 = (int *)(v20 + 8 * v22);
          v24 = *v23;
          if ((_DWORD)v107 == *v23)
            goto LABEL_17;
          v40 = 1;
          while (v24 != -1)
          {
            v41 = v22 + v40++;
            v22 = v41 & (v21 - 1);
            v24 = *(_DWORD *)(v20 + 8 * v22);
            if ((_DWORD)v107 == v24)
            {
              v23 = (int *)(v20 + 8 * v22);
              goto LABEL_17;
            }
          }
        }
        v23 = (int *)(v20 + 8 * v21);
LABEL_17:
        v25 = (int *)(v20 + 8 * v21);
        if (v25 == v23)
        {
          v26 = -1;
          if (!(_DWORD)v21)
            goto LABEL_42;
        }
        else
        {
          v26 = v23[1];
          if (!(_DWORD)v21)
            goto LABEL_42;
        }
        v34 = v21 - 1;
        LODWORD(v21) = (v21 - 1) & (37 * HIDWORD(v107));
        v35 = (int *)(v20 + 8 * v21);
        v36 = *v35;
        if (HIDWORD(v107) == *v35)
        {
LABEL_28:
          if (v25 == v35)
            goto LABEL_42;
          v37 = v35[1];
        }
        else
        {
          v42 = 1;
          while (v36 != -1)
          {
            v43 = v21 + v42++;
            v21 = v43 & v34;
            v36 = *(_DWORD *)(v20 + 8 * v21);
            if (HIDWORD(v107) == v36)
            {
              v35 = (int *)(v20 + 8 * v21);
              goto LABEL_28;
            }
          }
LABEL_42:
          v37 = -1;
        }
        v44 = *(_QWORD *)(v2 + 128);
        v45 = (_QWORD *)(v44 + 88 * v26);
        v46 = (unsigned int *)v45[6];
        v47 = *(unsigned int **)(v44 + 88 * v37 + 48);
        v48 = (unsigned int *)v45[8];
        v49 = (unsigned int *)v45[9];
        if (v48 == v49)
          goto LABEL_69;
        v50 = *(_QWORD *)(v2 + 176);
        while (1)
        {
          v51 = *v48;
          v52 = *(_DWORD *)(v50 + 48 * *v48 + 20);
          if (v52 == v37 || *(_DWORD *)(v50 + 48 * v51 + 24) == v37)
            break;
          if (++v48 == v49)
            goto LABEL_69;
        }
        if (v51 == -1)
        {
LABEL_69:
          v69 = *v46 + 1;
          v70 = *v47 + 1;
          v71 = (char *)operator new[]();
          bzero(v71, 4 * (v70 * v69));
          v72 = *v46;
          if ((_DWORD)v72)
          {
            v73 = 0;
            v74 = *((_QWORD *)v46 + 1);
            v75 = *v47;
            do
            {
              if ((_DWORD)v75)
              {
                v76 = *(_DWORD *)(v74 + 4 * v73);
                v77 = (int *)*((_QWORD *)v47 + 1);
                v78 = (float *)&v71[4 * (v70 * ++v73) + 4];
                v79 = v75;
                do
                {
                  v80 = *v77++;
                  if (v76 == v80)
                    *v78 = *v78 - v19;
                  ++v78;
                  --v79;
                }
                while (v79);
              }
              else
              {
                ++v73;
              }
            }
            while (v73 != v72);
          }
          v102 = __PAIR64__(v70, v69);
          v103 = (uint64_t)v71;
          v2 = (uint64_t)v96;
          sub_1C5242418(v96, v26, v37, (uint64_t *)&v102);
          result = v103;
          v103 = 0;
          v5 = v97;
        }
        else
        {
          if (v52 == v37)
            v53 = v47;
          else
            v53 = v46;
          if (v52 == v37)
            v54 = v46;
          else
            v54 = v47;
          v55 = *(unsigned int **)(v50 + 48 * v51);
          v56 = v55[1];
          v94 = *v55;
          v57 = v56 * *v55;
          v58 = 4 * v57;
          v59 = (char *)operator new[]();
          bzero(v59, v58);
          if (v57)
            memmove(v59, *((const void **)v55 + 1), v58);
          v60 = *v53;
          v5 = v97;
          if ((_DWORD)v60)
          {
            v61 = 0;
            v62 = *((_QWORD *)v53 + 1);
            v63 = *v54;
            do
            {
              if ((_DWORD)v63)
              {
                v64 = *(_DWORD *)(v62 + 4 * v61);
                v65 = (int *)*((_QWORD *)v54 + 1);
                v66 = (float *)&v59[4 * v56 * ++v61 + 4];
                v67 = v63;
                do
                {
                  v68 = *v65++;
                  if (v64 == v68)
                    *v66 = *v66 - v19;
                  ++v66;
                  --v67;
                }
                while (v67);
              }
              else
              {
                ++v61;
              }
            }
            while (v61 != v60);
          }
          v100 = __PAIR64__(v56, v94);
          v101 = (uint64_t)v59;
          v2 = (uint64_t)v96;
          sub_1C5243F74((uint64_t)v96, v51, (uint64_t *)&v100);
          result = v101;
          v101 = 0;
        }
LABEL_80:
        if (result)
          result = MEMORY[0x1CAA32F9C](result, 0x1000C8052888210);
        goto LABEL_82;
      }
      v27 = *(_QWORD **)(v95 + 40);
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v27 + 16) + 176))(*(_QWORD *)(*v27 + 16));
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 216) + 16) + v9)
        && ((*(_QWORD *)(v27[44] + ((v9 >> 3) & 0x1FFFFFF8)) >> v9) & 1) == 0)
      {
        v28 = *(_QWORD *)(v2 + 24);
        v29 = *(unsigned int *)(v2 + 40);
        if ((_DWORD)v29)
        {
          LODWORD(v30) = (v29 - 1) & (37 * v8);
          v31 = (int *)(v28 + 8 * v30);
          v32 = *v31;
          if (v8 == *v31)
            goto LABEL_24;
          v91 = 1;
          while (v32 != -1)
          {
            v92 = v30 + v91++;
            v30 = v92 & (v29 - 1);
            v32 = *(_DWORD *)(v28 + 8 * v30);
            if (v8 == v32)
            {
              v31 = (int *)(v28 + 8 * v30);
              goto LABEL_24;
            }
          }
        }
        v31 = (int *)(v28 + 8 * v29);
LABEL_24:
        if ((int *)(v28 + 8 * v29) == v31)
          v33 = -1;
        else
          v33 = v31[1];
        v81 = *(_QWORD *)(v2 + 128);
        v82 = *(unsigned int **)(v81 + 88 * v33 + 48);
        v83 = *v82;
        if ((_DWORD)v83)
        {
          v84 = 0;
          v85 = *((_QWORD *)v82 + 1);
          v86 = 4 * v83;
          v87 = v33;
          while (*(_DWORD *)(v85 + v84) != (_DWORD)v9)
          {
            v84 += 4;
            if (v86 == v84)
              goto LABEL_82;
          }
          v88 = *(const void ***)(v81 + 88 * v33);
          v89 = *(unsigned int *)v88;
          v90 = (char *)operator new[]();
          bzero(v90, 4 * v89);
          if ((_DWORD)v89)
            memmove(v90, v88[1], 4 * v89);
          *(float *)&v90[v84 + 4] = *(float *)&v90[v84 + 4] - v19;
          v104 = v89;
          v105 = (uint64_t)v90;
          sub_1C524092C(v2, v87, (uint64_t)&v104);
          result = v105;
          v105 = 0;
          goto LABEL_80;
        }
      }
LABEL_82:
      if (!v7 || (*(_BYTE *)v7 & 4) == 0)
      {
        while ((*(_WORD *)(v7 + 44) & 8) != 0)
          v7 = *(_QWORD *)(v7 + 8);
      }
      v7 = *(_QWORD *)(v7 + 8);
      if (v7 == v6)
        goto LABEL_107;
    }
    v11 = *(_DWORD *)(v10 + 176);
    if (v11)
    {
      v12 = *(_QWORD *)(v10 + 160);
      v13 = v11 - 1;
      v14 = (v11 - 1) & v99;
      v15 = *(_QWORD *)(v12 + 16 * v14);
      if (v15 == v5)
      {
LABEL_10:
        v16 = *(unsigned int *)(v12 + 16 * v14 + 8);
        if (v16 != 0xFFFFFFFFLL)
        {
          v17 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 24 * v16 + 16);
LABEL_12:
          v18 = (float)v17;
LABEL_13:
          v10 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 16);
          goto LABEL_14;
        }
      }
      else
      {
        v38 = 1;
        while (v15 != -4096)
        {
          v39 = v14 + v38++;
          v14 = v39 & v13;
          v15 = *(_QWORD *)(v12 + 16 * v14);
          if (v15 == v5)
            goto LABEL_10;
        }
      }
      v18 = 0.0;
      goto LABEL_13;
    }
    v17 = 0;
    goto LABEL_12;
  }
  return result;
}

void sub_1C5243F74(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;

  v46 = *a3;
  v5 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v47 = v5;
  sub_1C5242A54(&v48, a1 + 72, (int *)&v46);
  v6 = v47;
  v47 = 0;
  if (v6)
    MEMORY[0x1CAA32F9C](v6, 0x1000C8052888210);
  v7 = *(uint64_t ***)(a1 + 120);
  v8 = v48;
  if (v7)
  {
    v9 = (*v7)[22] + 48 * a2;
    v10 = *(_DWORD *)(v9 + 20);
    v11 = *(_DWORD *)(v9 + 24);
    v12 = (*v7)[16];
    v13 = *(_QWORD *)v9;
    v14 = v12 + 88 * v10;
    v16 = *(_DWORD *)(v14 + 20);
    v15 = (unsigned int *)(v14 + 20);
    v15[1] -= *(_DWORD *)(v13 + 20);
    if (v16)
    {
      v17 = 0;
      v18 = *(_QWORD *)(v13 + 24);
      v19 = *(_QWORD *)(v12 + 88 * v10 + 32);
      do
      {
        *(_DWORD *)(v19 + 4 * v17) -= *(unsigned __int8 *)(v18 + v17);
        ++v17;
        v20 = *v15;
      }
      while (v17 < v20);
    }
    else
    {
      LODWORD(v20) = 0;
    }
    v22 = v12 + 88 * v11;
    v24 = *(_DWORD *)(v22 + 20);
    v23 = (unsigned int *)(v22 + 20);
    v23[1] -= *(_DWORD *)(v13 + 16);
    if (v24)
    {
      v25 = 0;
      v26 = *(_QWORD *)(v13 + 32);
      v27 = *(_QWORD *)(v12 + 88 * v11 + 32);
      do
      {
        *(_DWORD *)(v27 + 4 * v25) -= *(unsigned __int8 *)(v26 + v25);
        ++v25;
        v28 = *v23;
      }
      while (v25 < v28);
      LODWORD(v20) = *v15;
    }
    else
    {
      LODWORD(v28) = 0;
    }
    v15[1] += *(_DWORD *)(v8 + 20);
    if ((_DWORD)v20)
    {
      v29 = 0;
      v30 = *(_QWORD *)(v8 + 24);
      v31 = *(_QWORD *)(v12 + 88 * v10 + 32);
      do
      {
        *(_DWORD *)(v31 + 4 * v29) += *(unsigned __int8 *)(v30 + v29);
        ++v29;
      }
      while (v29 < *v15);
      LODWORD(v28) = *v23;
    }
    v21 = a2;
    v23[1] += *(_DWORD *)(v8 + 16);
    if ((_DWORD)v28)
    {
      v32 = 0;
      v33 = *(_QWORD *)(v8 + 32);
      v34 = *(_QWORD *)(v12 + 88 * v11 + 32);
      do
      {
        *(_DWORD *)(v34 + 4 * v32) += *(unsigned __int8 *)(v33 + v32);
        ++v32;
      }
      while (v32 < *v23);
    }
    v35 = v12 + 88 * v11 + 16;
    sub_1C5244258(v7, v10, v12 + 88 * v10 + 16);
    sub_1C5244258(v7, v11, v35);
  }
  else
  {
    v21 = a2;
  }
  v36 = (_QWORD *)(*(_QWORD *)(a1 + 176) + 48 * v21);
  v37 = v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v39 = __ldxr(p_shared_owners);
    while (__stxr(v39 + 1, p_shared_owners));
  }
  v40 = (std::__shared_weak_count *)v36[1];
  *v36 = v8;
  v36[1] = v37;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v49;
  if (v49)
  {
    v44 = (unint64_t *)&v49->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

uint64_t **sub_1C5244258(uint64_t **result, unsigned int a2, uint64_t a3)
{
  uint64_t **v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;
  unsigned int v11;

  v3 = result;
  if (*(_QWORD *)((*result)[16] + 88 * a2 + 72) - *(_QWORD *)((*result)[16] + 88 * a2 + 64) == 12)
  {
    v10 = a2;
    sub_1C5244364((uint64_t)result, a2);
    result = sub_1C4778ED8(v3 + 1, &v10, &v10);
    v4 = (*v3)[16] + 88 * v10;
    v5 = 3;
LABEL_13:
    *(_DWORD *)(v4 + 16) = v5;
    return result;
  }
  if (*(_DWORD *)a3 == 1)
  {
    v6 = *(unsigned int *)(a3 + 4);
    if (*(_DWORD *)(a3 + 8) < v6)
      goto LABEL_12;
    v7 = *(_QWORD *)(a3 + 16);
    if ((_DWORD)v6)
    {
      v8 = 4 * v6;
      v9 = *(_DWORD **)(a3 + 16);
      while (*v9)
      {
        ++v9;
        v8 -= 4;
        if (!v8)
        {
          v9 = (_DWORD *)(v7 + 4 * v6);
          break;
        }
      }
    }
    else
    {
      v9 = *(_DWORD **)(a3 + 16);
    }
    if (v6 != ((uint64_t)v9 - v7) >> 2)
    {
LABEL_12:
      v11 = a2;
      sub_1C5244364((uint64_t)result, a2);
      result = sub_1C4778ED8(v3 + 4, &v11, &v11);
      v4 = (*v3)[16] + 88 * v11;
      v5 = 2;
      goto LABEL_13;
    }
  }
  return result;
}

uint64_t sub_1C5244364(uint64_t result, unsigned int a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;

  v4 = a2;
  v2 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)result + 128) + 88 * a2 + 16);
  switch(v2)
  {
    case 1:
      v3 = result + 56;
      return sub_1C61D9060(v3, &v4);
    case 2:
      v3 = result + 32;
      return sub_1C61D9060(v3, &v4);
    case 3:
      v3 = result + 8;
      return sub_1C61D9060(v3, &v4);
  }
  return result;
}

void sub_1C52443CC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v13;
  llvm::LiveInterval *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v31;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  char v40;
  uint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  int v45;
  _BYTE v46[32];
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  int v50;
  _BYTE v51[36];
  int v52;

  v52 = a2;
  v13 = (uint64_t *)(a1 + 256);
  sub_1C61D9060(a1 + 256, (unsigned int *)&v52);
  if ((v52 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(a5 + 416)
    || (v14 = *(llvm::LiveInterval **)(*(_QWORD *)(a5 + 408) + 8 * (v52 & 0x7FFFFFFF))) == 0)
  {
    v14 = (llvm::LiveInterval *)sub_1C4851220(a5, v52);
    v26 = *(_QWORD *)(a5 + 304);
    v27 = *(_QWORD *)(a5 + 248);
    *(_QWORD *)v26 = v27;
    *(_QWORD *)(v26 + 8) = *(_QWORD *)(v27 + 40);
    *(_OWORD *)(v26 + 16) = *(_OWORD *)(a5 + 288);
    *(_QWORD *)(v26 + 32) = a5 + 312;
    llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v26);
    *(_DWORD *)(v26 + 184) = 0;
    v28 = *(_QWORD *)(a5 + 256);
    v24 = *(_BYTE *)(v28 + 16) == 0;
    v29 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v28 + 24) + 16 * (*((_DWORD *)v14 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                             + 34);
    v31 = !v24 && v29 != 0;
    llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(a5 + 304), v14, v31);
    llvm::LiveIntervals::computeDeadValues(a5, (uint64_t)v14, 0);
  }
  v32[0] = &off_1E8143478;
  v32[1] = v14;
  v15 = *(_QWORD *)(a4 + 40);
  v33 = a3;
  v34 = v15;
  v35 = a5;
  v36 = a6;
  v37 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a4 + 16) + 104))(*(_QWORD *)(a4 + 16));
  v38 = 0;
  v39 = *(_DWORD *)(a3 + 8);
  v40 = 0;
  v41 = a1 + 304;
  v42 = v46;
  v43 = v46;
  v44 = 4;
  v45 = 0;
  v47 = v51;
  v48 = v51;
  v49 = 4;
  v50 = 0;
  *(_QWORD *)(v15 + 8) = v32;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a7 + 24))(a7, v32);
  (*(void (**)(_QWORD))(**(_QWORD **)(a4 + 16) + 176))(*(_QWORD *)(a4 + 16));
  v16 = *(unsigned int *)(v33 + 8);
  if (v39 != (_DWORD)v16)
  {
    v17 = (int *)(*(_QWORD *)v33 + 4 * v39);
    v18 = 4 * v16 - 4 * v39;
    do
    {
      if ((*v17 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(a5 + 416)
        || (v19 = *(unsigned int **)(*(_QWORD *)(a5 + 408) + 8 * (*v17 & 0x7FFFFFFF))) == 0)
      {
        v19 = (unsigned int *)sub_1C4851220(a5, *v17);
        v20 = *(_QWORD *)(a5 + 304);
        v21 = *(_QWORD *)(a5 + 248);
        *(_QWORD *)v20 = v21;
        *(_QWORD *)(v20 + 8) = *(_QWORD *)(v21 + 40);
        *(_OWORD *)(v20 + 16) = *(_OWORD *)(a5 + 288);
        *(_QWORD *)(v20 + 32) = a5 + 312;
        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v20);
        *(_DWORD *)(v20 + 184) = 0;
        v22 = *(_QWORD *)(a5 + 256);
        v24 = *(_BYTE *)(v22 + 16) == 0;
        v23 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v22 + 24) + 16 * (v19[28] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                 + 34);
        v24 = v24 || v23 == 0;
        v25 = !v24;
        llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(a5 + 304), (llvm::LiveInterval *)v19, v25);
        llvm::LiveIntervals::computeDeadValues(a5, (uint64_t)v19, 0);
      }
      sub_1C5244698(v13, v19[28], v19[28]);
      ++v17;
      v18 -= 4;
    }
    while (v18);
  }
  v32[0] = &off_1E8143478;
  *(_QWORD *)(v34 + 8) = 0;
  if (v48 != v47)
    free(v48);
  if (v43 != v42)
    free(v43);
}

uint64_t *sub_1C5244698(uint64_t *result, unsigned int a2, int a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t **v6;
  _QWORD *v7;
  unsigned int v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = result;
  v6 = (uint64_t **)(result + 1);
  v5 = result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (_QWORD *)v5;
        v8 = *(_DWORD *)(v5 + 28);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = (uint64_t **)v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = result + 1;
LABEL_9:
    v9 = operator new(0x20uLL);
    v9[7] = a3;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v7;
    *v6 = (uint64_t *)v9;
    v10 = *(_QWORD *)*v4;
    if (v10)
    {
      *v4 = v10;
      v11 = *v6;
    }
    else
    {
      v11 = (uint64_t *)v9;
    }
    result = sub_1C4768E74((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

uint64_t sub_1C524474C(uint64_t a1, int a2)
{
  size_t v3;
  void *v4;
  uint64_t result;

  *(_DWORD *)(a1 + 4) = a2 - 1;
  v3 = 4 * (a2 - 1);
  v4 = (void *)operator new[]();
  bzero(v4, v3);
  result = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  if (result)
    JUMPOUT(0x1CAA32F9CLL);
  return result;
}

unint64_t sub_1C52447CC(unsigned int *a1, unsigned int *a2)
{
  unsigned __int8 v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t i;
  uint64_t v7;
  unsigned __int8 v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  unint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int *v43;
  int v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  int v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v3 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v4 = &unk_1ED7EA000;
  if ((v3 & 1) == 0)
  {
    v56 = a1;
    v57 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v4 = &unk_1ED7EA000;
    v58 = v57;
    a1 = v56;
    if (v58)
    {
      v59 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v59 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v59;
      __cxa_guard_release(&qword_1ED7EAC88);
      v4 = (_QWORD *)&unk_1ED7EA000;
      a1 = v56;
    }
  }
  v5 = v4[400];
  if (a1 == a2)
  {
    v9 = 0;
    return sub_1C49CE808(&v66, v9, v5);
  }
  else
  {
    for (i = 0; ; i += 8)
    {
      v7 = *a1;
      v8 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
      if ((v8 & 1) == 0)
      {
        v11 = a1;
        v12 = v5;
        v13 = __cxa_guard_acquire(&qword_1ED7EAC88);
        v4 = &unk_1ED7EA000;
        v5 = v12;
        v14 = v13;
        a1 = v11;
        if (v14)
        {
          v15 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override)
            v15 = 0xFF51AFD7ED558CCDLL;
          qword_1ED7EAC80 = v15;
          __cxa_guard_release(&qword_1ED7EAC88);
          v4 = (_QWORD *)&unk_1ED7EA000;
          v5 = v12;
          a1 = v11;
        }
      }
      if (i > 0x38)
        break;
      v9 = i + 8;
      v10 = 0x9DDFEA08EB382D69 * (v4[400] + 8 * v7);
      *(uint64_t *)((char *)&v66 + i) = 0x9DDFEA08EB382D69
                                     * ((0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                                                       * (v10 ^ (v10 >> 47))) >> 47));
      if (++a1 == a2)
        return sub_1C49CE808(&v66, v9, v5);
    }
    v17 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v5 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
    v18 = __ROR8__(v5 ^ 0xB492B66FBE98F273, 49);
    v19 = v5 ^ (v5 >> 47);
    v20 = v5 ^ (((0x9DDFEA08EB382D69 * (v19 ^ (0xB492B66FBE98F273 * v5))) ^ v5) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                            * (v19 ^ (0xB492B66FBE98F273 * v5)));
    v21 = v18 + v5 + v67;
    v22 = v71 + v18 - 0x4B6D499041670D8DLL * __ROR8__(v72 + v5 - 0x4B6D499041670D8DLL * v5, 42);
    v23 = v66 - 0x6D8ED9027DD26057 * v5;
    v24 = v19 + v23;
    v25 = v23 + v67 + v68;
    v26 = __ROR8__(v25, 44) + v23;
    v27 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v20) ^ ((0x9DDFEA08EB382D69 * v20) >> 47));
    v28 = (0xB492B66FBE98F273 * __ROR8__(v21, 37)) ^ v27;
    v29 = __ROR8__(v19 - 0x622015F714C7D297 * (v17 ^ (v17 >> 47)), 33);
    v30 = v26 + __ROR8__(v28 + v24 + v69, 21);
    v31 = 0xB492B66FBE98F273 * v29;
    v32 = v25 + v69;
    v33 = v27 + v70 - 0x4B6D499041670D8DLL * v29;
    v34 = __ROR8__(v71 + v72 + v33, 44) + v33 + __ROR8__(v22 + v68 + v73 + v33, 21);
    v35 = v71 + v72 + v33 + v73;
    v36 = 64;
    if (a1 != a2)
    {
      v37 = v28;
      do
      {
        v38 = 0;
        do
        {
          v39 = *a1;
          v40 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
          if ((v40 & 1) == 0)
          {
            v43 = a1;
            v62 = v32;
            v64 = v30;
            v60 = v37;
            v61 = v34;
            v44 = __cxa_guard_acquire(&qword_1ED7EAC88);
            v37 = v60;
            v34 = v61;
            v32 = v62;
            v30 = v64;
            v4 = &unk_1ED7EA000;
            v45 = v44;
            a1 = v43;
            if (v45)
            {
              v46 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v46 = 0xFF51AFD7ED558CCDLL;
              qword_1ED7EAC80 = v46;
              __cxa_guard_release(&qword_1ED7EAC88);
              v37 = v60;
              v34 = v61;
              v32 = v62;
              v30 = v64;
              v4 = (_QWORD *)&unk_1ED7EA000;
              a1 = v43;
            }
          }
          if (v38 > 0x38)
          {
            v41 = 64;
            goto LABEL_29;
          }
          v41 = v38 + 8;
          v42 = 0x9DDFEA08EB382D69 * (v4[400] + 8 * v39);
          *(uint64_t *)((char *)&v66 + v38) = 0x9DDFEA08EB382D69
                                           * ((0x9DDFEA08EB382D69 * (v42 ^ (v42 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                                                             * (v42 ^ (v42 >> 47))) >> 47));
          ++a1;
          v38 += 8;
        }
        while (a1 != a2);
        if ((v41 & 0x7FFFFFFFFFFFFFB8) != 0)
        {
          v63 = v32;
          v65 = v30;
          v47 = v34;
          v48 = v37;
          sub_1C4E37E60(&v66, (_BYTE *)&v66 + v41, &v74);
          v37 = v48;
          v32 = v63;
          v30 = v65;
          v34 = v47;
          v4 = (_QWORD *)&unk_1ED7EA000;
        }
        a1 = a2;
LABEL_29:
        v49 = v22 + v31 + v32 + v67;
        v22 = v71 + v32 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v22 + v72, 42);
        v50 = v66 - 0x4B6D499041670D8DLL * v30;
        v28 = (0xB492B66FBE98F273 * __ROR8__(v49, 37)) ^ v34;
        v30 = __ROR8__(v50 + v67 + v68, 44) + v50 + __ROR8__(v28 + v35 + v50 + v69, 21);
        v31 = 0xB492B66FBE98F273 * __ROR8__(v35 + v37, 33);
        v32 = v50 + v67 + v68 + v69;
        v51 = v31 + v34 + v70;
        v34 = __ROR8__(v71 + v72 + v51, 44) + v51 + __ROR8__(v22 + v68 + v51 + v73, 21);
        v35 = v71 + v72 + v51 + v73;
        v36 += v41;
        v37 = v28;
      }
      while (a1 != a2);
    }
    v52 = 0x9DDFEA08EB382D69
        * (v35 ^ ((0x9DDFEA08EB382D69 * (v32 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v32 ^ v35)));
    v53 = v28 - 0x4B6D499041670D8DLL * (v22 ^ (v22 >> 47)) - 0x622015F714C7D297 * (v52 ^ (v52 >> 47));
    v54 = 0x9DDFEA08EB382D69
        * (v34 ^ ((0x9DDFEA08EB382D69 * (v30 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v30 ^ v34)));
    v55 = v31 - 0x4B6D499041670D8DLL * (v36 ^ (v36 >> 47)) - 0x622015F714C7D297 * (v54 ^ (v54 >> 47));
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69
           * (v55 ^ ((0x9DDFEA08EB382D69 * (v53 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v53 ^ v55)))) ^ ((0x9DDFEA08EB382D69 * (v55 ^ ((0x9DDFEA08EB382D69 * (v53 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v53 ^ v55)))) >> 47));
  }
}

void sub_1C5244D40(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8149A48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C5244D50(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E8149A48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5244D80(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  _QWORD *v5;
  unint64_t *v6;

  v2 = a1[5];
  v5 = a1 + 3;
  v6 = 0;
  if (sub_1C5244E24(*(_QWORD *)v2, *(_DWORD *)(v2 + 16), (unint64_t *)&v5, &v6))
  {
    *v6 = 1;
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  v3 = a1[7];
  a1[7] = 0;
  if (v3)
    MEMORY[0x1CAA32F9C](v3, 0x1000C8052888210);
  v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

uint64_t sub_1C5244E24(uint64_t a1, int a2, unint64_t *a3, unint64_t **a4)
{
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  int i;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  BOOL v24;
  unsigned int v25;
  uint64_t result;
  int v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;

  if (!a2)
  {
    v18 = 0;
    result = 0;
    goto LABEL_26;
  }
  v8 = *a3;
  v9 = sub_1C52447CC(*(unsigned int **)(*a3 + 32), (unsigned int *)(*(_QWORD *)(*a3 + 32) + 4 * *(unsigned int *)(*a3 + 24)));
  v10 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v11 = &unk_1ED7EA000;
  if ((v10 & 1) == 0)
  {
    v30 = v9;
    v27 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v11 = &unk_1ED7EA000;
    v28 = v27;
    v9 = v30;
    if (v28)
    {
      v29 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v29 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v29;
      __cxa_guard_release(&qword_1ED7EAC88);
      v11 = (_QWORD *)&unk_1ED7EA000;
      v9 = v30;
    }
  }
  v12 = 0;
  LODWORD(v31) = *(_DWORD *)(v8 + 24);
  HIDWORD(v31) = v9;
  v13 = __ROR8__(v9 + 12, 12);
  v14 = 0x9DDFEA08EB382D69
      * (v13 ^ ((0x9DDFEA08EB382D69 * (v31 ^ v11[400] ^ v13)) >> 47) ^ (0x9DDFEA08EB382D69 * (v31 ^ v11[400] ^ v13)));
  v15 = (a2 - 1) & ((-348639895 * ((v14 >> 47) ^ v14)) ^ v9);
  v16 = *a3;
  for (i = 1; ; ++i)
  {
    v18 = (unint64_t *)(a1 + 8 * v15);
    v19 = *v18;
    if (v16 < 2)
    {
      if (v16 == v19)
        goto LABEL_22;
      goto LABEL_8;
    }
    if (v19 < 2)
      goto LABEL_8;
    v20 = *(unsigned int *)(v16 + 24);
    if ((_DWORD)v20 == *(_DWORD *)(v19 + 24))
      break;
LABEL_16:
    if (v12)
      v24 = 0;
    else
      v24 = v19 == 1;
    if (v24)
      v12 = (unint64_t *)(a1 + 8 * v15);
    v25 = i + v15;
    v15 = v25 & (a2 - 1);
  }
  if (!(_DWORD)v20)
  {
LABEL_22:
    result = 1;
    goto LABEL_26;
  }
  v21 = *(_DWORD **)(v16 + 32);
  v22 = *(_DWORD **)(v19 + 32);
  v23 = 4 * v20;
  while (*v21 == *v22)
  {
    ++v21;
    ++v22;
    v23 -= 4;
    if (!v23)
      goto LABEL_22;
  }
LABEL_8:
  if (v19)
    goto LABEL_16;
  result = 0;
  if (v12)
    v18 = v12;
LABEL_26:
  *a4 = v18;
  return result;
}

void sub_1C5245048(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t *v14;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  v9 = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = v9;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
      bzero(v9, 8 * v10);
    if ((_DWORD)v3)
    {
      v11 = 8 * v3;
      v12 = (unint64_t *)v4;
      do
      {
        if (*v12 >= 2)
        {
          v14 = 0;
          sub_1C5244E24(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v12, &v14);
          *v14 = *v12;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v12;
        v11 -= 8;
      }
      while (v11);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v13 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v13)
    bzero(v9, 8 * v13);
}

void sub_1C5245168(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    sub_1C5245168(*a1);
    sub_1C5245168(a1[1]);
    v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t **sub_1C52451B0(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)v9;
    v9 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v9 + 7) = **a4;
    *((_DWORD *)v9 + 8) = 0;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v11;
    *v7 = (uint64_t *)v9;
    v12 = (uint64_t *)**a1;
    v13 = (uint64_t *)v9;
    if (v12)
    {
      *a1 = v12;
      v13 = *v7;
    }
    sub_1C4768E74(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v9;
}

uint64_t **sub_1C5245290(uint64_t **result, unsigned int a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  uint64_t **v6;
  unsigned int v7;
  uint64_t *v8;
  unsigned int v9;

  v2 = (uint64_t)&result[16][11 * a2];
  v3 = *(unsigned int **)(v2 + 64);
  v4 = *(unsigned int **)(v2 + 72);
  if (v3 != v4)
  {
    v6 = result;
    do
    {
      v7 = *v3;
      v8 = v6[22];
      v9 = HIDWORD(v8[6 * *v3 + 2]);
      if (v9 == a2)
        v9 = v8[6 * v7 + 3];
      result = sub_1C5245310(v6, v7, v9);
      ++v3;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t **sub_1C5245310(_QWORD *a1, unsigned int a2, unsigned int a3)
{
  uint64_t **result;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int *v12;
  int v13;
  uint64_t v14;
  unsigned int *v15;
  int v16;
  int v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;

  result = (uint64_t **)a1[15];
  if (result)
  {
    v6 = (*result)[16];
    v7 = a2;
    v8 = (*result)[22] + 48 * a2;
    v9 = *(_QWORD *)v8;
    v10 = *(_QWORD *)v8 + 16;
    LODWORD(v8) = *(_DWORD *)(v8 + 24);
    v11 = (_DWORD)v8 == a3;
    if ((_DWORD)v8 == a3)
      v12 = (int *)v10;
    else
      v12 = (int *)(v9 + 20);
    v13 = *v12;
    v14 = v6 + 88 * a3;
    v16 = *(_DWORD *)(v14 + 20);
    v17 = *(_DWORD *)(v14 + 24);
    v15 = (unsigned int *)(v14 + 20);
    v18 = (uint64_t *)(v9 + 32);
    v19 = (uint64_t *)(v9 + 24);
    if (!v11)
      v18 = v19;
    v15[1] = v17 - v13;
    if (v16)
    {
      v20 = 0;
      v21 = *v18;
      v22 = *(_QWORD *)(v6 + 88 * a3 + 32);
      do
      {
        *(_DWORD *)(v22 + 4 * v20) -= *(unsigned __int8 *)(v21 + v20);
        ++v20;
      }
      while (v20 < *v15);
    }
    result = sub_1C5244258(result, a3, v6 + 88 * a3 + 16);
  }
  else
  {
    v7 = a2;
  }
  v23 = a1[22];
  if (*(_DWORD *)(v23 + 48 * v7 + 20) == a3)
  {
    v24 = v23 + 48 * v7;
    v27 = *(_QWORD *)(v24 + 32);
    v25 = (_QWORD *)(v24 + 32);
    v26 = v27;
    v28 = a1[16] + 88 * a3;
    v30 = *(_QWORD *)(v28 + 64);
    v29 = *(_QWORD *)(v28 + 72);
    LODWORD(v27) = *(_DWORD *)(v29 - 4);
    v31 = v29 - 4;
    v32 = v27;
    v33 = v23 + 48 * v27;
    v11 = *(_DWORD *)(v33 + 20) == a3;
    v34 = (_QWORD *)(v33 + 40);
    v35 = (_QWORD *)(v33 + 32);
    if (!v11)
      v35 = v34;
    *v35 = v26;
    *(_DWORD *)(v30 + 4 * v26) = v32;
    *(_QWORD *)(v28 + 72) = v31;
  }
  else
  {
    v36 = v23 + 48 * v7;
    v38 = *(_QWORD *)(v36 + 40);
    v25 = (_QWORD *)(v36 + 40);
    v37 = v38;
    v39 = *((_DWORD *)v25 - 4);
    v40 = a1[16] + 88 * v39;
    v42 = *(_QWORD *)(v40 + 64);
    v41 = *(_QWORD *)(v40 + 72);
    LODWORD(v38) = *(_DWORD *)(v41 - 4);
    v43 = v41 - 4;
    v44 = v38;
    v45 = v23 + 48 * v38;
    v11 = *(_DWORD *)(v45 + 20) == v39;
    v46 = (_QWORD *)(v45 + 40);
    v47 = (_QWORD *)(v45 + 32);
    if (!v11)
      v47 = v46;
    *v47 = v37;
    *(_DWORD *)(v42 + 4 * v37) = v44;
    *(_QWORD *)(v40 + 72) = v43;
  }
  *v25 = -1;
  return result;
}

void sub_1C524549C(uint64_t a1, unsigned int *a2)
{
  unsigned int v4;
  int v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int *v13;
  uint64_t v14;
  int v15;

  v5 = *a2;
  v4 = a2[1];
  *(_DWORD *)a1 = v4;
  *(_DWORD *)(a1 + 4) = v5;
  v6 = 4 * v5 * v4;
  v7 = (void *)operator new[]();
  bzero(v7, v6);
  *(_QWORD *)(a1 + 8) = v7;
  v8 = *a2;
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = 0;
    v11 = a2[1];
    do
    {
      if ((_DWORD)v11)
      {
        v12 = 0;
        v13 = (int *)(*((_QWORD *)a2 + 1) + 4 * v9);
        v14 = v11;
        do
        {
          v15 = *v13++;
          *((_DWORD *)v7 + v10 + v12) = v15;
          v12 += v5;
          --v14;
        }
        while (v14);
      }
      ++v10;
      v9 += v11;
    }
    while (v10 != v8);
  }
}

_QWORD *sub_1C5245558(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;

  v2 = (void *)a1[25];
  if (v2)
  {
    a1[26] = v2;
    operator delete(v2);
  }
  v3 = a1[22];
  if (v3)
  {
    v4 = a1[23];
    v5 = (void *)a1[22];
    if (v4 != v3)
    {
      do
      {
        v6 = *(std::__shared_weak_count **)(v4 - 40);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 48;
      }
      while (v4 != v3);
      v5 = (void *)a1[22];
    }
    a1[23] = v3;
    operator delete(v5);
  }
  v9 = (void *)a1[19];
  if (v9)
  {
    a1[20] = v9;
    operator delete(v9);
  }
  v10 = a1[16];
  if (v10)
  {
    v11 = a1[17];
    v12 = (void *)a1[16];
    if (v11 != v10)
    {
      do
      {
        v13 = *(void **)(v11 - 24);
        if (v13)
        {
          *(_QWORD *)(v11 - 16) = v13;
          operator delete(v13);
        }
        v14 = *(std::__shared_weak_count **)(v11 - 32);
        if (v14)
        {
          v15 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v17 = *(_QWORD *)(v11 - 56);
        *(_QWORD *)(v11 - 56) = 0;
        if (v17)
          MEMORY[0x1CAA32F9C](v17, 0x1000C8052888210);
        v18 = *(std::__shared_weak_count **)(v11 - 80);
        if (v18)
        {
          v19 = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        v11 -= 88;
      }
      while (v11 != v10);
      v12 = (void *)a1[16];
    }
    a1[17] = v10;
    operator delete(v12);
  }
  MEMORY[0x1CAA32FB4](a1[12], 8);
  MEMORY[0x1CAA32FB4](a1[9], 8);
  MEMORY[0x1CAA32FB4](a1[6], 8);
  MEMORY[0x1CAA32FB4](a1[3], 4);
  return a1;
}

uint64_t sub_1C5245708(uint64_t a1, uint64_t __c)
{
  uint64_t i;
  __int32 **v4;
  __int32 *v5;
  __int32 *v6;
  __int32 *v7;

  for (i = __c; i < *(_DWORD *)(a1 + 4); i = (i + 1))
  {
    v4 = *(__int32 ***)(a1 + 8);
    v5 = v4[1];
    v6 = wmemchr(*v4, i, v5 - *v4);
    if (v6)
      v7 = v6;
    else
      v7 = v5;
    if (v7 == v4[1])
      break;
  }
  return i;
}

uint64_t sub_1C524577C()
{
  int v1;
  char v2;
  char *v3;
  __n128 v4;

  sub_1C620A114((uint64_t)&unk_1ED7FEB98, "pbqp", "PBQP register allocator", (uint64_t)llvm::createDefaultPBQPRegisterAllocator);
  __cxa_atexit((void (*)(void *))sub_1C5229294, &unk_1ED7FEB98, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Attempt coalescing during PBQP register allocation.";
  v4.n128_u64[1] = 51;
  v2 = 0;
  v3 = &v2;
  v1 = 1;
  sub_1C6147A00((llvm::cl::Option *)&unk_1ED7FEBC8, "pbqp-coalescing", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FEBC8, &dword_1C475E000);
}

float64_t llvm::RegAllocScore::operator+=(float64x2_t *a1, float64x2_t *a2)
{
  float64x2_t v2;
  double v3;
  float64_t result;

  v2 = a1[1];
  *a1 = vaddq_f64(*a2, *a1);
  v3 = a1[2].f64[1];
  a1[2].f64[0] = a2[2].f64[0] + a1[2].f64[0];
  a1[1] = vaddq_f64(a2[1], v2);
  result = a2[2].f64[1] + v3;
  a1[2].f64[1] = result;
  return result;
}

BOOL llvm::RegAllocScore::operator==(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[4] == a2[4] && a1[3] == a2[3] && a1[5] == a2[5];
}

BOOL llvm::RegAllocScore::operator!=(double *a1, double *a2)
{
  return !llvm::RegAllocScore::operator==(a1, a2);
}

double llvm::RegAllocScore::getScore(llvm::RegAllocScore *this)
{
  return *(double *)&qword_1ED82FD70 * *(double *)this
       + 0.0
       + *(double *)&qword_1ED82FE38 * *((double *)this + 1)
       + *(double *)&xmmword_1ED82FF00 * *((double *)this + 2)
       + (*(double *)&qword_1ED82FE38 + *(double *)&xmmword_1ED82FF00) * *((double *)this + 4)
       + *(double *)&xmmword_1ED82FFC8 * *((double *)this + 3)
       + *(double *)&xmmword_1ED830090 * *((double *)this + 5);
}

void llvm::calculateRegAllocScore(llvm *this@<X0>, const llvm::MachineFunction *a2@<X1>, const llvm::MachineBlockFrequencyInfo *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD v5[2];
  const llvm::MachineFunction *v6;

  v6 = a2;
  v5[0] = this;
  v5[1] = a3;
  llvm::calculateRegAllocScore((uint64_t)this, sub_1C5245DB8, (uint64_t)&v6, (uint64_t (*)(uint64_t, uint64_t))sub_1C5245E74, (uint64_t)v5, a4);
}

void llvm::calculateRegAllocScore(uint64_t a1@<X0>, double (*a2)(uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  unsigned int v21;
  int v22;
  unsigned __int16 *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;

  v6 = a1 + 320;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)a6 = 0u;
  v7 = *(_QWORD *)(a1 + 328);
  if (v7 != a1 + 320)
  {
    v12 = 0.0;
    v13 = 0.0;
    v14 = 0.0;
    v15 = 0.0;
    v16 = 0.0;
    v17 = 0.0;
    while (1)
    {
      v18 = a2(a3, v7);
      v19 = *(_QWORD *)(v7 + 56);
      v40 = 0.0;
      v41 = 0.0;
      v37 = 0.0;
      v38 = 0.0;
      v39 = 0.0;
      v20 = 0.0;
      if (v19 != v7 + 48)
        break;
LABEL_64:
      v17 = v17 + v20;
      v16 = v16 + v38;
      *(double *)a6 = v17;
      *(double *)(a6 + 8) = v16;
      v15 = v15 + v39;
      v14 = v14 + v37;
      v13 = v13 + v40;
      *(double *)(a6 + 16) = v15;
      *(double *)(a6 + 24) = v13;
      v12 = v12 + v41;
      *(double *)(a6 + 32) = v14;
      *(double *)(a6 + 40) = v12;
      v7 = *(_QWORD *)(v7 + 8);
      if (v7 == v6)
        return;
    }
    v38 = 0.0;
    v39 = 0.0;
    v40 = 0.0;
    v41 = 0.0;
    v37 = 0.0;
    while (1)
    {
      v21 = **(unsigned __int16 **)(v19 + 16);
      if (v21 <= 0x13)
      {
        if (((1 << v21) & 0x3E086) != 0)
          goto LABEL_7;
        if (v21 == 19)
        {
          v20 = v18 + v20;
          goto LABEL_7;
        }
      }
      v22 = a4(a5, v19);
      v23 = *(unsigned __int16 **)(v19 + 16);
      if (v22)
      {
        if ((*((_BYTE *)v23 + 11) & 0x40) != 0)
          v40 = v18 + v40;
        else
          v41 = v18 + v41;
        goto LABEL_7;
      }
      v24 = *v23 - 1;
      if (v24 <= 1)
      {
        v31 = *(_QWORD *)(*(_QWORD *)(v19 + 32) + 48);
        if ((v31 & 8) != 0)
          goto LABEL_51;
      }
      v25 = *(unsigned __int16 *)(v19 + 44);
      v26 = v25 & 0xC;
      v27 = *((_QWORD *)v23 + 1);
      v28 = (v25 & 0xC) != 0 && (v25 & 4) == 0;
      if (v28)
      {
        v32 = v19;
        if ((v27 & 0x80000) != 0)
        {
LABEL_23:
          if (v24 <= 1)
          {
            v31 = *(_QWORD *)(*(_QWORD *)(v19 + 32) + 48);
LABEL_51:
            if ((v31 & 0x10) != 0)
              goto LABEL_63;
            v25 = *(unsigned __int16 *)(v19 + 44);
            v26 = v25 & 0xC;
          }
          v27 = *((_QWORD *)v23 + 1);
          if (v26 && (v25 & 4) == 0)
          {
            v35 = v19;
            if ((v27 & 0x100000) != 0)
            {
LABEL_63:
              v37 = v18 + v37;
              goto LABEL_7;
            }
            while ((*(_WORD *)(v35 + 44) & 8) != 0)
            {
              v35 = *(_QWORD *)(v35 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v35 + 16) + 10) & 0x10) != 0)
                goto LABEL_63;
            }
          }
          else if ((v27 & 0x100000) != 0)
          {
            goto LABEL_63;
          }
          goto LABEL_27;
        }
        while ((*(_WORD *)(v32 + 44) & 8) != 0)
        {
          v32 = *(_QWORD *)(v32 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v32 + 16) + 10) & 8) != 0)
            goto LABEL_23;
        }
      }
      else if ((v27 & 0x80000) != 0)
      {
        goto LABEL_23;
      }
LABEL_27:
      if (v24 > 1 || (*(_BYTE *)(*(_QWORD *)(v19 + 32) + 48) & 8) == 0)
      {
        v28 = (v25 & 0xC) == 0;
        v29 = (v25 >> 2) & 1;
        if (v28)
          LOBYTE(v29) = 1;
        if ((v29 & 1) != 0)
        {
          if ((v27 & 0x80000) == 0)
            goto LABEL_33;
        }
        else
        {
          v33 = v19;
          if ((v27 & 0x80000) == 0)
          {
            while ((*(_WORD *)(v33 + 44) & 8) != 0)
            {
              v33 = *(_QWORD *)(v33 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v33 + 16) + 10) & 8) != 0)
                goto LABEL_45;
            }
LABEL_33:
            if (v24 <= 1 && (*(_BYTE *)(*(_QWORD *)(v19 + 32) + 48) & 0x10) != 0)
            {
LABEL_54:
              v30 = v18;
            }
            else
            {
              if ((v29 & 1) != 0)
              {
                if ((v27 & 0x100000) != 0)
                  goto LABEL_54;
              }
              else
              {
                v34 = v19;
                if ((v27 & 0x100000) != 0)
                  goto LABEL_54;
                while ((*(_WORD *)(v34 + 44) & 8) != 0)
                {
                  v34 = *(_QWORD *)(v34 + 8);
                  if ((*(_BYTE *)(*(_QWORD *)(v34 + 16) + 10) & 0x10) != 0)
                    goto LABEL_54;
                }
              }
              v30 = -0.0;
            }
            v39 = v39 + v30;
            goto LABEL_7;
          }
        }
      }
LABEL_45:
      v38 = v18 + v38;
LABEL_7:
      if ((*(_BYTE *)v19 & 4) == 0)
      {
        while ((*(_WORD *)(v19 + 44) & 8) != 0)
          v19 = *(_QWORD *)(v19 + 8);
      }
      v19 = *(_QWORD *)(v19 + 8);
      if (v19 == v7 + 48)
        goto LABEL_64;
    }
  }
}

uint64_t sub_1C5245CD4(uint64_t a1, char *a2, _QWORD **a3, _WORD *a4)
{
  uint64_t v8;
  size_t v9;
  _QWORD *v10;

  v8 = sub_1C47AD050(a1, 0, 0);
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_QWORD *)(v8 + 136) = &unk_1E8134CB8;
  *(_QWORD *)v8 = &unk_1E8134C50;
  *(_QWORD *)(v8 + 160) = &unk_1E819E320;
  *(_QWORD *)(v8 + 168) = &unk_1E8134CD8;
  *(_QWORD *)(v8 + 192) = v8 + 168;
  v9 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v9);
  v10 = *a3;
  *(_QWORD *)(a1 + 128) = **a3;
  *(_BYTE *)(a1 + 152) = 1;
  *(_QWORD *)(a1 + 144) = *v10;
  *(_WORD *)(a1 + 10) = (32 * (*a4 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

double sub_1C5245DB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  float v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  int v12;
  int v13;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 248);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 176);
    v4 = 0.0;
    if (v3)
    {
      v5 = *(_QWORD *)(v2 + 160);
      v6 = v3 - 1;
      v7 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v8 = *(_QWORD *)(v5 + 16 * v7);
      if (v8 == a2)
      {
LABEL_4:
        v9 = *(unsigned int *)(v5 + 16 * v7 + 8);
        if (v9 != 0xFFFFFFFFLL)
          v4 = (float)*(unint64_t *)(*(_QWORD *)(v2 + 8) + 24 * v9 + 16);
      }
      else
      {
        v12 = 1;
        while (v8 != -4096)
        {
          v13 = v7 + v12++;
          v7 = v13 & v6;
          v8 = *(_QWORD *)(v5 + 16 * v7);
          if (v8 == a2)
            goto LABEL_4;
        }
      }
    }
    v10 = (float)*(unint64_t *)(*(_QWORD *)(v2 + 8) + 16);
  }
  else
  {
    v4 = 0.0;
    v10 = 0.0;
  }
  return (float)(v4 * (float)(1.0 / v10));
}

uint64_t sub_1C5245E74(_QWORD *a1, const llvm::MachineInstr *a2)
{
  uint64_t v4;
  uint64_t v5;
  llvm::TargetInstrInfo *v6;
  llvm::AAResults *v7;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 16) + 104))(*(_QWORD *)(*a1 + 16));
  v5 = *((_QWORD *)a2 + 2);
  if (*(_WORD *)v5 != 10)
  {
    if ((*(_BYTE *)(v5 + 11) & 0x20) == 0)
      return 0;
    v6 = (llvm::TargetInstrInfo *)v4;
    v7 = (llvm::AAResults *)a1[1];
    if (((*(uint64_t (**)(uint64_t, const llvm::MachineInstr *, llvm::AAResults *))(*(_QWORD *)v4 + 32))(v4, a2, v7) & 1) == 0)return llvm::TargetInstrInfo::isReallyTriviallyReMaterializableGeneric(v6, a2, v7);
  }
  return 1;
}

uint64_t sub_1C5245F10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;
  uint64_t *v6;

  v5 = 0x3FC999999999999ALL;
  v6 = &v5;
  v4 = 1;
  sub_1C5245CD4((uint64_t)&CopyWeight, "regalloc-copy-weight", &v6, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4DB7184, &CopyWeight, &dword_1C475E000);
  v5 = 0x4010000000000000;
  v6 = &v5;
  v4 = 1;
  sub_1C5245CD4((uint64_t)&LoadWeight, "regalloc-load-weight", &v6, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4DB7184, &LoadWeight, &dword_1C475E000);
  v0 = sub_1C47AD050((uint64_t)&StoreWeight, 0, 0);
  xmmword_1ED82FF00 = 0u;
  *(_OWORD *)&qword_1ED82FF10 = 0u;
  *((_QWORD *)&xmmword_1ED82FF00 + 1) = &unk_1E8134CB8;
  StoreWeight = (uint64_t)&unk_1E8134C50;
  qword_1ED82FF20 = (uint64_t)&unk_1E819E320;
  qword_1ED82FF28 = (uint64_t)&unk_1E8134CD8;
  qword_1ED82FF40 = (uint64_t)&qword_1ED82FF28;
  llvm::cl::Option::setArgStr(v0, "regalloc-store-weight", 0x15uLL);
  *(_QWORD *)&xmmword_1ED82FF00 = 0x3FF0000000000000;
  byte_1ED82FF18 = 1;
  qword_1ED82FF10 = 0x3FF0000000000000;
  word_1ED82FE8A = word_1ED82FE8A & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&StoreWeight);
  __cxa_atexit((void (*)(void *))sub_1C4DB7184, &StoreWeight, &dword_1C475E000);
  v1 = sub_1C47AD050((uint64_t)&CheapRematWeight, 0, 0);
  xmmword_1ED82FFC8 = 0u;
  *(_OWORD *)&qword_1ED82FFD8 = 0u;
  *((_QWORD *)&xmmword_1ED82FFC8 + 1) = &unk_1E8134CB8;
  CheapRematWeight = (uint64_t)&unk_1E8134C50;
  qword_1ED82FFE8 = (uint64_t)&unk_1E819E320;
  qword_1ED82FFF0 = (uint64_t)&unk_1E8134CD8;
  qword_1ED830008 = (uint64_t)&qword_1ED82FFF0;
  llvm::cl::Option::setArgStr(v1, "regalloc-cheap-remat-weight", 0x1BuLL);
  *(_QWORD *)&xmmword_1ED82FFC8 = 0x3FC999999999999ALL;
  byte_1ED82FFE0 = 1;
  qword_1ED82FFD8 = 0x3FC999999999999ALL;
  word_1ED82FF52 = word_1ED82FF52 & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&CheapRematWeight);
  __cxa_atexit((void (*)(void *))sub_1C4DB7184, &CheapRematWeight, &dword_1C475E000);
  v2 = sub_1C47AD050((uint64_t)&ExpensiveRematWeight, 0, 0);
  xmmword_1ED830090 = 0u;
  *(_OWORD *)&qword_1ED8300A0 = 0u;
  *((_QWORD *)&xmmword_1ED830090 + 1) = &unk_1E8134CB8;
  ExpensiveRematWeight = (uint64_t)&unk_1E8134C50;
  qword_1ED8300B0 = (uint64_t)&unk_1E819E320;
  qword_1ED8300B8 = (uint64_t)&unk_1E8134CD8;
  qword_1ED8300D0 = (uint64_t)&qword_1ED8300B8;
  llvm::cl::Option::setArgStr(v2, "regalloc-expensive-remat-weight", 0x1FuLL);
  *(_QWORD *)&xmmword_1ED830090 = 0x3FF0000000000000;
  byte_1ED8300A8 = 1;
  qword_1ED8300A0 = 0x3FF0000000000000;
  word_1ED83001A = word_1ED83001A & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&ExpensiveRematWeight);
  return __cxa_atexit((void (*)(void *))sub_1C4DB7184, &ExpensiveRematWeight, &dword_1C475E000);
}

double llvm::RegisterClassInfo::RegisterClassInfo(llvm::RegisterClassInfo *this)
{
  double result;

  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = (char *)this + 64;
  *((_OWORD *)this + 3) = xmmword_1C6612EF0;
  *((_QWORD *)this + 9) = (char *)this + 88;
  *(_QWORD *)&result = 0x600000000;
  *((_QWORD *)this + 10) = 0x600000000;
  *((_DWORD *)this + 34) = 0;
  *((_QWORD *)this + 18) = (char *)this + 160;
  *((_QWORD *)this + 19) = 0x600000000;
  *((_DWORD *)this + 52) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 27) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = (char *)this + 64;
  *((_OWORD *)this + 3) = xmmword_1C6612EF0;
  *((_QWORD *)this + 9) = (char *)this + 88;
  *(_QWORD *)&result = 0x600000000;
  *((_QWORD *)this + 10) = 0x600000000;
  *((_DWORD *)this + 34) = 0;
  *((_QWORD *)this + 18) = (char *)this + 160;
  *((_QWORD *)this + 19) = 0x600000000;
  *((_DWORD *)this + 52) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 27) = 0;
  return result;
}

void llvm::RegisterClassInfo::runOnMachineFunction(llvm::RegisterClassInfo *this, const llvm::MachineFunction *a2)
{
  llvm::RegisterClassInfo *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned __int16 *v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned __int16 *v24;
  unint64_t v25;
  int v26;
  _WORD *v27;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned __int16 *v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  unsigned int v38;
  unsigned __int16 *v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _WORD *v48;
  int v49;
  unsigned int v50;
  BOOL v51;
  int v52;
  int v53;
  unsigned int v54;
  unsigned int *i;
  unsigned __int16 *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  unsigned __int16 *v63;
  void **v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  const void **v71;
  int v72;
  const void **v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  void *v78;
  uint64_t v79;
  int v80;
  llvm::RegisterClassInfo *v81;
  void *__s2;
  uint64_t v83;
  _BYTE v84[48];
  int v85;
  uint64_t v86;

  v3 = this;
  v86 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 2) = a2;
  v4 = *((_QWORD *)a2 + 2);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 176))(v4) == *((_QWORD *)this + 3))
  {
    v15 = *(_QWORD **)(*((_QWORD *)v3 + 2) + 40);
    if (*((_BYTE *)v15 + 144))
    {
      v14 = (unsigned __int16 *)v15[19];
    }
    else
    {
      v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v15 + 16) + 176))(*(_QWORD *)(*v15 + 16));
      v14 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 32))(v16, *v15);
    }
    if (v14 == *((unsigned __int16 **)v3 + 4))
    {
      v40 = 0;
      v18 = *((_QWORD *)v3 + 3);
      goto LABEL_35;
    }
  }
  else
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 176))(v4);
    *((_QWORD *)v3 + 3) = v5;
    v6 = *(_QWORD *)(v5 + 248) - *(_QWORD *)(v5 + 240);
    v7 = (v6 >> 3);
    v8 = (_QWORD *)operator new[]();
    *v8 = 24;
    v8[1] = v7;
    if ((v6 & 0x7FFFFFFF8) != 0)
    {
      v9 = v8 + 4;
      v10 = 24 * v7;
      do
      {
        *v9 = 0;
        *(v9 - 2) = 0;
        *((_DWORD *)v9 - 2) = 0;
        v9 += 3;
        v10 -= 24;
      }
      while (v10);
    }
    v11 = *(_QWORD *)v3;
    *(_QWORD *)v3 = v8 + 2;
    if (v11)
      sub_1C507665C((uint64_t)v3, v11);
    v12 = *(_QWORD **)(*((_QWORD *)v3 + 2) + 40);
    if (*((_BYTE *)v12 + 144))
    {
      v14 = (unsigned __int16 *)v12[19];
    }
    else
    {
      v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v12 + 16) + 176))(*(_QWORD *)(*v12 + 16));
      v14 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 32))(v13, *v12);
    }
  }
  sub_1C4C080F8((_QWORD *)v3 + 5, *(unsigned int *)(*((_QWORD *)v3 + 3) + 16), 0);
  v17 = *v14;
  v18 = *((_QWORD *)v3 + 3);
  if (*v14)
  {
    if (v18)
      v19 = (uint64_t *)(v18 + 8);
    else
      v19 = 0;
    v20 = *v19;
    v23 = v19 + 5;
    v22 = v19[5];
    v21 = v23[1];
    v24 = v14;
    do
    {
      v25 = ((unint64_t)*(unsigned int *)(v20 + 24 * (unsigned __int16)v17 + 16) >> 3) & 0x1FFFFFFE;
      v26 = *(unsigned __int16 *)(v21 + v25) + (*(_DWORD *)(v20 + 24 * (unsigned __int16)v17 + 16) & 0xF) * v17;
      v27 = (_WORD *)(v21 + 2 + v25);
      do
      {
        v28 = 4 * (unsigned __int16)v26;
        v29 = *(unsigned __int16 *)(v22 + v28);
        if (*(_WORD *)(v22 + v28))
          v30 = v21 == 0;
        else
          v30 = 1;
        if (!v30)
        {
          v33 = *(unsigned __int16 *)(v22 + 4 * (unsigned __int16)v26 + 2) << 16;
          v34 = (unsigned __int16 *)(v21 + 2 * *(unsigned int *)(v20 + 24 * v29 + 8));
          v35 = *((_QWORD *)v3 + 5);
          while (1)
          {
            *(_WORD *)(v35 + 2 * (unsigned __int16)v29) = v17;
            v37 = *v34++;
            v36 = v37;
            if (v37)
            {
              LOWORD(v29) = v36 + v29;
            }
            else
            {
              v38 = HIWORD(v33);
              if (HIWORD(v33))
              {
                v33 >>= 16;
              }
              else
              {
                if (!*v27)
                  goto LABEL_24;
                v26 += (unsigned __int16)*v27++;
                v39 = (unsigned __int16 *)(v22 + 4 * (unsigned __int16)v26);
                v38 = *v39;
                v33 = v39[1] << 16;
              }
              LOWORD(v29) = v38;
              v34 = (unsigned __int16 *)(v21 + 2 * *(unsigned int *)(v20 + 24 * v38 + 8));
            }
            LOWORD(v17) = *v24;
          }
        }
        v31 = (unsigned __int16)*v27++;
        v26 += v31;
      }
      while (v31);
LABEL_24:
      v32 = v24[1];
      ++v24;
      v17 = v32;
    }
    while (v32);
  }
  v40 = 1;
LABEL_35:
  *((_QWORD *)v3 + 4) = v14;
  v41 = *(_DWORD *)(v18 + 16);
  __s2 = v84;
  v83 = 0x600000000;
  sub_1C4765AA4((char *)&__s2, (v41 + 63) >> 6, 0);
  v85 = v41;
  v42 = *v14;
  if (*v14)
  {
    v80 = v40;
    v81 = v3;
    do
    {
      v43 = *((_QWORD *)v3 + 3);
      if (v43)
        v44 = (_QWORD *)(v43 + 8);
      else
        v44 = 0;
      v45 = ((unint64_t)*(unsigned int *)(*v44 + 24 * (unsigned __int16)v42 + 16) >> 3) & 0x1FFFFFFE;
      v47 = v44[5];
      v46 = v44[6];
      v48 = (_WORD *)(v46 + v45 + 2);
      v49 = *(unsigned __int16 *)(v46 + v45) + (*(_DWORD *)(*v44 + 24 * (unsigned __int16)v42 + 16) & 0xF) * v42;
      do
      {
        LOWORD(v50) = *(_WORD *)(v47 + 4 * (unsigned __int16)v49);
        if ((_WORD)v50)
          v51 = v46 == 0;
        else
          v51 = 1;
        if (!v51)
        {
          v54 = *(unsigned __int16 *)(v47 + 4 * (unsigned __int16)v49 + 2) << 16;
          for (i = (unsigned int *)(*v44 + 24 * *(unsigned __int16 *)(v47 + 4 * (unsigned __int16)v49) + 8);
                ;
                i = (unsigned int *)(*v44 + 24 * v62 + 8))
          {
            v56 = (unsigned __int16 *)(v46 + 2 * *i);
            do
            {
              v57 = (*(uint64_t (**)(uint64_t, const llvm::MachineFunction *, _QWORD))(*(_QWORD *)v4 + 416))(v4, a2, (unsigned __int16)v50);
              v58 = (unsigned __int16)v50 >> 6;
              v59 = 1 << v50;
              if (v57)
                v60 = *((_QWORD *)__s2 + v58) | v59;
              else
                v60 = *((_QWORD *)__s2 + v58) & ~v59;
              *((_QWORD *)__s2 + v58) = v60;
              v61 = *v56++;
              LOWORD(v50) = v61 + v50;
            }
            while (v61);
            v62 = HIWORD(v54);
            if (HIWORD(v54))
            {
              v50 = HIWORD(v54);
              v54 >>= 16;
            }
            else
            {
              if (!*v48)
                goto LABEL_47;
              v49 += (unsigned __int16)*v48++;
              v63 = (unsigned __int16 *)(v44[5] + 4 * (unsigned __int16)v49);
              v62 = *v63;
              v54 = v63[1] << 16;
              LOWORD(v50) = *v63;
            }
            v46 = v44[6];
          }
        }
        v52 = (unsigned __int16)*v48++;
        v49 += v52;
      }
      while (v52);
LABEL_47:
      v53 = v14[1];
      ++v14;
      v42 = v53;
      v3 = v81;
    }
    while (v53);
    v41 = v85;
    v40 = v80;
  }
  if (*((_DWORD *)v3 + 34) != v41 || memcmp(*((const void **)v3 + 9), __s2, 8 * *((unsigned int *)v3 + 20)))
  {
    v64 = (void **)((char *)v3 + 72);
    if ((void **)((char *)v3 + 72) == &__s2)
    {
LABEL_74:
      *((_DWORD *)v3 + 34) = v41;
      v40 = 1;
      goto LABEL_75;
    }
    v65 = v83;
    v66 = *((unsigned int *)v3 + 20);
    if (v66 >= v83)
    {
      if ((_DWORD)v83)
        memmove(*v64, __s2, 8 * v83);
      goto LABEL_73;
    }
    if (*((_DWORD *)v3 + 21) < v83)
    {
      *((_DWORD *)v3 + 20) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3 + 72, (uint64_t)v3 + 88, v65, 8);
    }
    else if ((_DWORD)v66)
    {
      memmove(*v64, __s2, 8 * v66);
      goto LABEL_71;
    }
    v66 = 0;
LABEL_71:
    if (v66 != v83)
      memcpy((char *)*v64 + 8 * v66, (char *)__s2 + 8 * v66, 8 * v83 - 8 * v66);
LABEL_73:
    *((_DWORD *)v3 + 20) = v65;
    v41 = v85;
    goto LABEL_74;
  }
LABEL_75:
  v67 = *((_QWORD *)v3 + 3);
  v68 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v67 + 232))(v67, *((_QWORD *)v3 + 2));
  v69 = *(unsigned int *)(v67 + 16);
  *((_QWORD *)v3 + 28) = **(_QWORD **)(v67 + 216) + (v69 * v68);
  *((_QWORD *)v3 + 29) = v69;
  v70 = *(_QWORD *)(*((_QWORD *)v3 + 2) + 40);
  v71 = (const void **)((char *)v3 + 144);
  v72 = *(_DWORD *)(v70 + 416);
  if (*((_DWORD *)v3 + 52) == v72 && !memcmp(*(const void **)(v70 + 352), *v71, 8 * *(unsigned int *)(v70 + 360)))
  {
    if (!v40)
      goto LABEL_97;
    goto LABEL_92;
  }
  v73 = (const void **)(v70 + 352);
  if (v71 != (const void **)(v70 + 352))
  {
    v74 = *(unsigned int *)(v70 + 360);
    v75 = *((unsigned int *)v3 + 38);
    if (v75 >= v74)
    {
      if ((_DWORD)v74)
        memmove((void *)*v71, *v73, 8 * v74);
      goto LABEL_90;
    }
    if (*((_DWORD *)v3 + 39) < v74)
    {
      *((_DWORD *)v3 + 38) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3 + 144, (uint64_t)v3 + 160, v74, 8);
    }
    else if ((_DWORD)v75)
    {
      memmove((void *)*v71, *v73, 8 * v75);
      goto LABEL_88;
    }
    v75 = 0;
LABEL_88:
    v76 = *(unsigned int *)(v70 + 360);
    if (v75 != v76)
      memcpy((char *)*v71 + 8 * v75, (char *)*v73 + 8 * v75, (_BYTE *)*v73 + 8 * v76 - ((_BYTE *)*v73 + 8 * v75));
LABEL_90:
    *((_DWORD *)v3 + 38) = v74;
    v72 = *(_DWORD *)(v70 + 416);
  }
  *((_DWORD *)v3 + 52) = v72;
LABEL_92:
  v77 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v3 + 3) + 296))(*((_QWORD *)v3 + 3));
  v78 = (void *)operator new[]();
  v79 = *((_QWORD *)v3 + 27);
  *((_QWORD *)v3 + 27) = v78;
  if (v79)
  {
    MEMORY[0x1CAA32F9C](v79, 0x1000C8052888210);
    v78 = (void *)*((_QWORD *)v3 + 27);
  }
  if (v77)
    bzero(v78, 4 * v77);
  ++*((_DWORD *)v3 + 2);
LABEL_97:
  if (__s2 != v84)
    free(__s2);
}

void llvm::RegisterClassInfo::compute(uint64_t *a1, unsigned __int16 ***a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 **v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unsigned __int16 **v12;
  unsigned int v13;
  __int16 v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  _DWORD *v24;
  unsigned __int16 *v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  unsigned int v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  BOOL v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int16 ***v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t *v41;
  void *v42;
  __int128 v43;
  _QWORD v44[5];

  v44[4] = *MEMORY[0x1E0C80C00];
  v4 = *((unsigned __int16 *)*a2 + 12);
  v5 = *a1;
  v6 = *(_QWORD *)(a1[2] + 16);
  v38 = *a1 + 24 * *((unsigned __int16 *)*a2 + 12);
  v41 = (uint64_t *)(v38 + 16);
  if (!*(_QWORD *)(v38 + 16))
  {
    v7 = operator new[]();
    v8 = *v41;
    *v41 = v7;
    if (v8)
      MEMORY[0x1CAA32F9C](v8, 0x1000C80BDFB0063);
  }
  v40 = v4;
  v42 = v44;
  v43 = xmmword_1C6612EE0;
  v9 = a2[6];
  v37 = a2;
  if (v9)
  {
    v11 = (unsigned __int16 *)((uint64_t (*)(uint64_t))v9)(a1[2]);
  }
  else
  {
    v12 = *a2;
    v11 = **a2;
    v10 = *((unsigned __int16 *)v12 + 10);
  }
  v39 = v5;
  if (v10)
  {
    v13 = 0;
    v14 = 0;
    v15 = 2 * v10;
    v16 = -1;
    v17 = -1;
    do
    {
      v18 = *v11;
      if (((*(_QWORD *)(a1[18] + ((v18 >> 3) & 0x1FF8)) >> v18) & 1) == 0)
      {
        v19 = *(unsigned __int8 *)(a1[28] + v18);
        if (v19 < v17)
          v17 = *(_BYTE *)(a1[28] + v18);
        if (*(_WORD *)(a1[5] + 2 * v18)
          && ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 416))(v6, a1[2], *v11) & 1) == 0)
        {
          v20 = v43;
          if ((unint64_t)(v43 + 1) > *((_QWORD *)&v43 + 1))
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v42, v44, v43 + 1, 2);
            v20 = v43;
          }
          *((_WORD *)v42 + v20) = v18;
          *(_QWORD *)&v43 = v43 + 1;
        }
        else
        {
          if (v19 != v16)
            v14 = v13;
          *(_WORD *)(*v41 + 2 * v13++) = v18;
          v16 = v19;
        }
      }
      ++v11;
      v15 -= 2;
    }
    while (v15);
  }
  else
  {
    v14 = 0;
    v13 = 0;
    v17 = -1;
    v16 = -1;
  }
  LODWORD(v21) = v43;
  v22 = v13 + v43;
  v23 = v39 + 24 * v40;
  *(_DWORD *)(v23 + 4) = v13 + v43;
  v24 = (_DWORD *)(v23 + 4);
  if ((_DWORD)v21)
  {
    v21 = v21;
    v25 = (unsigned __int16 *)v42;
    v26 = a1[28];
    v27 = *v41;
    do
    {
      v29 = *v25++;
      v28 = v29;
      v30 = *(unsigned __int8 *)(v26 + v29);
      if (v30 != v16)
        v14 = v13;
      *(_WORD *)(v27 + 2 * v13++) = v28;
      v16 = v30;
      --v21;
    }
    while (v21);
  }
  if (dword_1ED7FED08)
    v31 = v22 > dword_1ED7FED08;
  else
    v31 = 0;
  if (v31)
    *v24 = dword_1ED7FED08;
  v32 = (*(uint64_t (**)(uint64_t, unsigned __int16 ***, uint64_t))(*(_QWORD *)a1[3] + 256))(a1[3], v37, a1[2]);
  if (v32)
    v33 = v32 == (_QWORD)v37;
  else
    v33 = 1;
  if (!v33)
  {
    v34 = *(unsigned __int16 *)(*(_QWORD *)v32 + 24);
    v35 = *a1;
    if (*((_DWORD *)a1 + 2) != *(_DWORD *)(*a1 + 24 * *(unsigned __int16 *)(*(_QWORD *)v32 + 24)))
      llvm::RegisterClassInfo::compute(a1, v32);
    if (*(_DWORD *)(v35 + 24 * v34 + 4) > *v24)
      *(_BYTE *)(v39 + 24 * v40 + 8) = 1;
  }
  v36 = v39 + 24 * v40;
  *(_BYTE *)(v36 + 9) = v17;
  *(_WORD *)(v36 + 10) = v14;
  *(_DWORD *)v38 = *((_DWORD *)a1 + 2);
  if (v42 != v44)
    free(v42);
}

uint64_t llvm::RegisterClassInfo::computePSetLimit(llvm::RegisterClassInfo *this, uint64_t a2)
{
  uint64_t v4;
  unsigned __int16 ****v5;
  unsigned __int16 ****v6;
  unsigned __int16 ***v7;
  unsigned int v8;
  unsigned __int16 ***v9;
  int *v10;
  int v11;
  int v12;
  unsigned int v14;
  int v17;
  unsigned __int16 **v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;

  v4 = *((_QWORD *)this + 3);
  v5 = *(unsigned __int16 *****)(v4 + 240);
  v6 = *(unsigned __int16 *****)(v4 + 248);
  if (v5 == v6)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = *v5;
      v10 = (int *)(*(uint64_t (**)(_QWORD, unsigned __int16 ***))(**((_QWORD **)this + 3) + 320))(*((_QWORD *)this + 3), *v5);
      do
      {
        v12 = *v10++;
        v11 = v12;
      }
      while (v12 != -1 && v11 != (_DWORD)a2);
      if (v11 != -1)
      {
        v14 = *(_DWORD *)((*(uint64_t (**)(_QWORD, unsigned __int16 ***))(**((_QWORD **)this + 3) + 280))(*((_QWORD *)this + 3), v9)+ 4);
        if (!v7 || v14 > v8)
        {
          v8 = v14;
          v7 = v9;
        }
      }
      ++v5;
    }
    while (v5 != v6);
  }
  llvm::RegisterClassInfo::compute((uint64_t *)this, v7);
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 144))(*((_QWORD *)this + 3)) & 1) != 0)
  {
    v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 2) + 16) + 424))(*(_QWORD *)(*((_QWORD *)this + 2) + 16));
    v18 = *v7;
    v19 = *((unsigned __int16 *)*v7 + 10);
    v20 = v17 + 16;
    v21 = 2 * v17;
    if (v19 != 256)
      v21 = *((unsigned __int16 *)*v7 + 10);
    if (v19 != 144)
      v20 = v21;
    if (v19 == 128)
      v22 = v17;
    else
      v22 = v20;
    v23 = *((unsigned __int16 *)v18 + 12);
    v24 = *(_QWORD *)this;
    if (*((_DWORD *)this + 2) != *(_DWORD *)(*(_QWORD *)this + 24 * *((unsigned __int16 *)v18 + 12)))
      llvm::RegisterClassInfo::compute((uint64_t *)this, v7);
    v25 = *(_DWORD *)(v24 + 24 * v23 + 4) - v22;
    LODWORD(a2) = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 3) + 312))(*((_QWORD *)this + 3), *((_QWORD *)this + 2), a2);
    return (a2
                        + *(_DWORD *)(*(uint64_t (**)(_QWORD, unsigned __int16 ***))(**((_QWORD **)this + 3)
                                                                                             + 280))(*((_QWORD *)this + 3), v7)* v25);
  }
  v26 = *((unsigned __int16 *)*v7 + 12);
  v27 = *(_QWORD *)this;
  if (*((_DWORD *)this + 2) != *(_DWORD *)(*(_QWORD *)this + 24 * *((unsigned __int16 *)*v7 + 12)))
    llvm::RegisterClassInfo::compute((uint64_t *)this, v7);
  v28 = *(_DWORD *)(v27 + 24 * v26 + 4);
  a2 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 3) + 312))(*((_QWORD *)this + 3), *((_QWORD *)this + 2), a2);
  if (v28)
  {
    v25 = v28 - *((unsigned __int16 *)*v7 + 10);
    return (a2
                        + *(_DWORD *)(*(uint64_t (**)(_QWORD, unsigned __int16 ***))(**((_QWORD **)this + 3)
                                                                                             + 280))(*((_QWORD *)this + 3), v7)* v25);
  }
  return a2;
}

uint64_t sub_1C5246DD8()
{
  __n128 v1;
  __int128 v2;
  int v3;
  int *v4;
  int v5;

  v5 = 1;
  v3 = 0;
  v4 = &v3;
  *(_QWORD *)&v2 = "N";
  *((_QWORD *)&v2 + 1) = 1;
  v1.n128_u64[0] = (unint64_t)"Limit all regclasses to N registers";
  v1.n128_u64[1] = 35;
  sub_1C620D6E8(&v5, &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED7FEC88, &dword_1C475E000);
}

uint64_t sub_1C5246E50(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeLiveIntervalsPass((uint64_t)a1);
  llvm::initializeSlotIndexesPass((uint64_t)a1);
  llvm::initializeMachineLoopInfoPass((uint64_t)a1);
  llvm::initializeAAResultsWrapperPassPass(a1, v2);
  v3 = operator new();
  *(_QWORD *)v3 = "Simple Register Coalescing";
  *(_QWORD *)(v3 + 8) = 26;
  *(_QWORD *)(v3 + 16) = "simple-register-coalescing";
  *(_QWORD *)(v3 + 24) = 26;
  *(_QWORD *)(v3 + 32) = &unk_1EF8F6FE0;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C5247470;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t llvm::CoalescerPair::setRegisters(llvm::CoalescerPair *this, const llvm::MachineInstr *a2)
{
  int *v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t CommonSubClass;
  uint64_t (*v17)(void);
  uint64_t v18;
  int v19;
  BOOL v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *((_QWORD *)this + 2) = 0;
  v4 = (int *)((char *)this + 16);
  *((_QWORD *)this + 4) = 0;
  *(_WORD *)((char *)this + 25) = 0;
  *((_QWORD *)this + 1) = 0;
  v25 = 0;
  v26 = 0;
  result = sub_1C52471B4(*(_QWORD *)this, (uint64_t)a2, (_DWORD *)&v26 + 1, &v26, (int *)&v25 + 1, (int *)&v25);
  if (!(_DWORD)result)
    return result;
  v7 = v25;
  v6 = HIDWORD(v25);
  *((_BYTE *)this + 24) = v25 != 0;
  v8 = v26;
  v9 = HIDWORD(v26);
  v10 = v26 - 1;
  if ((HIDWORD(v26) - 1) <= 0x3FFFFFFE)
  {
    if (v10 < 0x3FFFFFFF)
      return 0;
    *((_BYTE *)this + 26) = 1;
    v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 32) + 40);
    LODWORD(result) = v9;
    v22 = v7;
  }
  else
  {
    v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 32) + 40);
    if (v10 > 0x3FFFFFFE)
    {
      v12 = *(_QWORD *)(v11 + 24);
      v13 = *(_QWORD *)(v12 + 16 * (HIDWORD(v26) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
      v14 = *(_QWORD *)(v12 + 16 * (v26 & 0x7FFFFFFF));
      v15 = v14 & 0xFFFFFFFFFFFFFFF8;
      if (!v6 || !v7)
      {
        if (v7)
        {
          *((_DWORD *)this + 5) = v7;
          v17 = *(uint64_t (**)(void))(**(_QWORD **)this + 184);
        }
        else
        {
          if (!v6)
          {
            CommonSubClass = llvm::TargetRegisterInfo::getCommonSubClass(*(_QWORD *)this, v14 & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(v12 + 16 * (HIDWORD(v26) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
            goto LABEL_11;
          }
          *((_DWORD *)this + 4) = v6;
          v17 = *(uint64_t (**)(void))(**(_QWORD **)this + 184);
        }
        CommonSubClass = v17();
LABEL_11:
        v18 = CommonSubClass;
        *((_QWORD *)this + 4) = CommonSubClass;
        if (CommonSubClass)
          goto LABEL_12;
        return 0;
      }
      if (HIDWORD(v26) == (_DWORD)v26 && v6 != v7)
        return 0;
      result = (uint64_t)llvm::TargetRegisterInfo::getCommonSuperRegClass(*(_QWORD *)this, *(_QWORD *)(v12 + 16 * (HIDWORD(v26) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, v6, v14 & 0xFFFFFFFFFFFFFFF8, v7, (_DWORD *)this + 5, v4);
      v18 = result;
      *((_QWORD *)this + 4) = result;
      if (result)
      {
LABEL_12:
        v19 = *v4;
        if (!*v4 || *((_DWORD *)this + 5))
        {
          LODWORD(result) = v8;
          v8 = v9;
        }
        else
        {
          *((_DWORD *)this + 4) = 0;
          *((_DWORD *)this + 5) = v19;
          *((_BYTE *)this + 26) ^= 1u;
          LODWORD(result) = v9;
        }
        v21 = v18 != v15 || v18 != v13;
        *((_BYTE *)this + 25) = v21;
        goto LABEL_21;
      }
      return result;
    }
    LODWORD(result) = v26;
    v8 = HIDWORD(v26);
    v22 = v6;
    v6 = v7;
  }
  if (!v6 || (result = llvm::MCRegisterInfo::getSubReg((_QWORD *)(*(_QWORD *)this + 8), result, v6), (_DWORD)result))
  {
    if (v22)
    {
      result = llvm::MCRegisterInfo::getMatchingSuperReg((uint64_t *)(*(_QWORD *)this + 8), result, v22, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 24) + 16 * (v8 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8));
      if (!(_DWORD)result)
        return result;
    }
    else
    {
      if ((result - 1) > 0x3FFFFFFE)
        return 0;
      v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 24) + 16 * (v8 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
      v24 = (unint64_t)result >> 3;
      if (v24 >= *(unsigned __int16 *)(v23 + 22)
        || ((*(unsigned __int8 *)(*(_QWORD *)(v23 + 8) + v24) >> (result & 7)) & 1) == 0)
      {
        return 0;
      }
    }
LABEL_21:
    *((_DWORD *)this + 2) = result;
    *((_DWORD *)this + 3) = v8;
    return 1;
  }
  return result;
}

uint64_t sub_1C52471B4(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, int *a5, int *a6)
{
  int v10;
  _DWORD *v11;
  _DWORD *v12;
  int v13;
  _DWORD *v14;
  int v15;

  v10 = **(unsigned __int16 **)(a2 + 16);
  if (v10 == 11)
  {
    v14 = *(_DWORD **)(a2 + 32);
    *a4 = v14[1];
    v15 = v14[28];
    if (((*v14 >> 8) & 0xFFF) != 0)
    {
      if (v15)
      {
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
        v14 = *(_DWORD **)(a2 + 32);
      }
      else
      {
        v15 = (*v14 >> 8) & 0xFFF;
      }
    }
    *a6 = v15;
    v12 = v14 + 16;
    v13 = v14[17];
  }
  else
  {
    if (v10 != 19)
      return 0;
    v11 = *(_DWORD **)(a2 + 32);
    *a4 = v11[1];
    *a6 = (*v11 >> 8) & 0xFFF;
    v12 = v11 + 8;
    v13 = v11[9];
  }
  *a3 = v13;
  *a5 = (*v12 >> 8) & 0xFFF;
  return 1;
}

BOOL llvm::CoalescerPair::flip(int32x2_t *this)
{
  __int32 v1;

  v1 = this[1].i32[0];
  if ((v1 - 0x40000000) <= 0xC0000000)
  {
    this[1].i32[0] = this[1].i32[1];
    this[1].i32[1] = v1;
    this[2] = vrev64_s32(this[2]);
    this[3].i8[2] ^= 1u;
  }
  return (v1 - 0x40000000) < 0xC0000001;
}

uint64_t llvm::CoalescerPair::isCoalescable(llvm::CoalescerPair *this, const llvm::MachineInstr *a2)
{
  uint64_t result;
  unsigned int SubReg;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;

  if (!a2)
    return 0;
  v19 = 0;
  v20 = 0;
  result = sub_1C52471B4(*(_QWORD *)this, (uint64_t)a2, (_DWORD *)&v20 + 1, &v20, (int *)&v19 + 1, (int *)&v19);
  if ((_DWORD)result)
  {
    SubReg = v20;
    v5 = *((_DWORD *)this + 3);
    if ((_DWORD)v20 == v5)
    {
      v19 = __PAIR64__(v19, HIDWORD(v19));
      SubReg = HIDWORD(v20);
    }
    else if (HIDWORD(v20) != v5)
    {
      return 0;
    }
    v6 = *((_DWORD *)this + 2);
    if (v6 - 1 <= 0x3FFFFFFE)
    {
      if (SubReg - 1 <= 0x3FFFFFFE)
      {
        if ((_DWORD)v19)
          SubReg = llvm::MCRegisterInfo::getSubReg((_QWORD *)(*(_QWORD *)this + 8), SubReg, v19);
        if (HIDWORD(v19))
        {
          v11 = *(_QWORD *)(*(_QWORD *)this + 8);
          v12 = *(_QWORD *)(*(_QWORD *)this + 56);
          v13 = *(unsigned int *)(v11 + 24 * v6 + 4);
          if (*(_WORD *)(v12 + 2 * v13))
          {
            v14 = *(_WORD *)(v12 + 2 * v13) + v6;
            v15 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)this + 88)
                                     + 2 * *(unsigned int *)(v11 + 24 * v6 + 12));
            v16 = (unsigned __int16 *)(v12 + 2 * v13 + 2);
            while (HIDWORD(v19) != *v15)
            {
              v18 = *v16++;
              v14 += v18;
              ++v15;
              if (!v18)
                goto LABEL_33;
            }
            v17 = v14;
          }
          else
          {
LABEL_33:
            v17 = 0;
          }
          return v17 == SubReg;
        }
        else
        {
          return v6 == SubReg;
        }
      }
    }
    else if (v6 == SubReg)
    {
      v7 = *(_QWORD *)this;
      v8 = HIDWORD(v19);
      if (*((_DWORD *)this + 5))
      {
        if (HIDWORD(v19))
        {
          v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 208))(v7);
          v7 = *(_QWORD *)this;
        }
        else
        {
          v8 = *((_DWORD *)this + 5);
        }
      }
      v9 = v19;
      if (*((_DWORD *)this + 4))
      {
        if ((_DWORD)v19)
          v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 208))(v7);
        else
          v9 = *((_DWORD *)this + 4);
      }
      return v8 == v9;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1C5247470()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  v0 = operator new();
  v1 = sub_1C4776848(v0, (uint64_t)&unk_1EF8F6FE0);
  *(_QWORD *)v1 = &off_1E8149A88;
  *(_QWORD *)(v1 + 248) = &unk_1E8149B50;
  *(_QWORD *)(v1 + 328) = 0;
  *(_OWORD *)(v1 + 336) = 0u;
  *(_OWORD *)(v1 + 256) = 0u;
  *(_OWORD *)(v1 + 272) = 0u;
  *(_OWORD *)(v1 + 288) = 0u;
  *(_OWORD *)(v1 + 304) = 0u;
  *(_DWORD *)(v1 + 320) = 0;
  *(_QWORD *)(v1 + 352) = v1 + 376;
  *(_QWORD *)(v1 + 360) = 0;
  *(_QWORD *)(v1 + 368) = 4;
  *(_QWORD *)(v1 + 384) = v1 + 400;
  *(_QWORD *)(v1 + 392) = 0x600000000;
  *(_DWORD *)(v1 + 448) = 0;
  *(_QWORD *)(v1 + 456) = v1 + 472;
  *(_QWORD *)(v1 + 464) = 0x600000000;
  *(_DWORD *)(v1 + 520) = 0;
  *(_DWORD *)(v1 + 592) = 0;
  *(_OWORD *)(v1 + 576) = 0u;
  *(_DWORD *)(v1 + 616) = 0;
  *(_OWORD *)(v1 + 600) = 0u;
  *(_DWORD *)(v1 + 640) = 0;
  *(_OWORD *)(v1 + 624) = 0u;
  *(_QWORD *)(v1 + 648) = 0;
  *(_DWORD *)(v1 + 655) = 0;
  *(_OWORD *)(v1 + 556) = 0u;
  *(_OWORD *)(v1 + 528) = 0u;
  *(_OWORD *)(v1 + 544) = 0u;
  *(_QWORD *)(v1 + 664) = v1 + 680;
  *(_QWORD *)(v1 + 672) = 0x800000000;
  *(_QWORD *)(v1 + 744) = v1 + 760;
  *(_QWORD *)(v1 + 752) = 0x800000000;
  *(_QWORD *)(v1 + 824) = v1 + 856;
  *(_QWORD *)(v1 + 832) = v1 + 856;
  *(_QWORD *)(v1 + 840) = 8;
  *(_DWORD *)(v1 + 848) = 0;
  *(_QWORD *)(v1 + 920) = v1 + 936;
  *(_QWORD *)(v1 + 928) = 0x800000000;
  *(_QWORD *)(v1 + 1000) = v1 + 1016;
  *(_QWORD *)(v1 + 1008) = 0x800000000;
  *(_DWORD *)(v1 + 1064) = 0;
  *(_OWORD *)(v1 + 1048) = 0u;
  *(_DWORD *)(v1 + 1088) = 0;
  *(_OWORD *)(v1 + 1072) = 0u;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED8300D8);
  if (v3 != -1)
  {
    v7[0] = sub_1C5246E50;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED8300D8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C524763C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  void *v19;

  *(_QWORD *)a1 = &off_1E8149A88;
  *(_QWORD *)(a1 + 248) = &unk_1E8149B50;
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1072), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1048), 4);
  v2 = *(void **)(a1 + 1000);
  if (v2 != (void *)(a1 + 1016))
    free(v2);
  v3 = *(void **)(a1 + 920);
  if (v3 != (void *)(a1 + 936))
    free(v3);
  v4 = *(void **)(a1 + 832);
  if (v4 != *(void **)(a1 + 824))
    free(v4);
  v5 = *(void **)(a1 + 744);
  if (v5 != (void *)(a1 + 760))
    free(v5);
  v6 = *(void **)(a1 + 664);
  if (v6 != (void *)(a1 + 680))
    free(v6);
  v7 = *(unsigned int *)(a1 + 640);
  v8 = *(_QWORD *)(a1 + 624);
  if ((_DWORD)v7)
  {
    v9 = 40 * v7;
    v10 = (_QWORD *)(v8 + 24);
    do
    {
      if (*((_DWORD *)v10 - 6) <= 0xFFFFFFFD)
      {
        v11 = (_QWORD *)*(v10 - 2);
        if (v10 != v11)
          free(v11);
      }
      v10 += 5;
      v9 -= 40;
    }
    while (v9);
    v8 = *(_QWORD *)(a1 + 624);
  }
  MEMORY[0x1CAA32FB4](v8, 8);
  sub_1C5249B3C((unsigned int *)(a1 + 600));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 600), 8);
  v12 = *(unsigned int *)(a1 + 592);
  v13 = *(_QWORD *)(a1 + 576);
  if ((_DWORD)v12)
  {
    v14 = 32 * v12;
    v15 = (_QWORD *)(v13 + 24);
    do
    {
      if (*((_DWORD *)v15 - 6) <= 0xFFFFFFFD)
      {
        v16 = (_QWORD *)*(v15 - 2);
        if (v15 != v16)
          free(v16);
      }
      v15 += 4;
      v14 -= 32;
    }
    while (v14);
    v13 = *(_QWORD *)(a1 + 576);
  }
  MEMORY[0x1CAA32FB4](v13, 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 552), 8);
  sub_1C61D92E0((uint64_t *)(a1 + 312));
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v17 = *(void **)(a1 + 176);
  if (v17 != (void *)(a1 + 192))
    free(v17);
  v18 = *(void **)(a1 + 104);
  if (v18 != (void *)(a1 + 120))
    free(v18);
  v19 = *(void **)(a1 + 32);
  if (v19 != (void *)(a1 + 48))
    free(v19);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C5247808(uint64_t a1)
{
  sub_1C524763C(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C524782C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 288) + 40))(*(_QWORD *)(a1 + 288));
}

void *sub_1C524783C(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineDominatorTree::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

_DWORD *sub_1C5247904(uint64_t a1)
{
  _DWORD *result;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  unsigned int v7;
  int v8;
  unsigned int v9;
  void *v10;
  unsigned int v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  int v15;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = *(_DWORD **)(a1 + 832);
  if (result == *(_DWORD **)(a1 + 824))
    goto LABEL_2;
  v5 = *(unsigned int *)(a1 + 840);
  if (v5 < 0x21 || 4 * (*(_DWORD *)(a1 + 844) - *(_DWORD *)(a1 + 848)) >= v5)
  {
    result = memset(result, 255, 8 * v5);
LABEL_2:
    *(_QWORD *)(a1 + 844) = 0;
    goto LABEL_3;
  }
  free(result);
  v7 = *(_DWORD *)(a1 + 844) - *(_DWORD *)(a1 + 848);
  v8 = 1 << (33 - __clz(v7 - 1));
  if (v7 <= 0x10)
    v9 = 32;
  else
    v9 = v8;
  *(_DWORD *)(a1 + 840) = v9;
  *(_QWORD *)(a1 + 844) = 0;
  v10 = malloc_type_malloc(8 * v9, 0x4065EBACuLL);
  if (!v10)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  *(_QWORD *)(a1 + 832) = v10;
  result = memset(v10, 255, 8 * *(unsigned int *)(a1 + 840));
LABEL_3:
  *(_DWORD *)(a1 + 672) = 0;
  *(_DWORD *)(a1 + 928) = 0;
  *(_DWORD *)(a1 + 1008) = 0;
  v3 = (_QWORD *)(a1 + 1072);
  v4 = *(_DWORD *)(a1 + 1080);
  if (v4)
  {
    v11 = *(_DWORD *)(a1 + 1088);
    if (v11 > 4 * v4 && v11 >= 0x41)
    {
      v14 = 1 << (33 - __clz(v4 - 1));
      if (v14 <= 64)
        v15 = 64;
      else
        v15 = v14;
LABEL_26:
      if (v15 == v11)
      {
        *(_QWORD *)(a1 + 1080) = 0;
        v16 = *(_DWORD **)(a1 + 1072);
        v17 = 16 * v11;
        do
        {
          *v16 = -1;
          v16 += 4;
          v17 -= 16;
        }
        while (v17);
      }
      else
      {
        result = (_DWORD *)MEMORY[0x1CAA32FB4](*v3, 8);
        if (v15)
        {
          v18 = (4 * v15 / 3u + 1) | ((unint64_t)(4 * v15 / 3u + 1) >> 1);
          v19 = v18 | (v18 >> 2) | ((v18 | (v18 >> 2)) >> 4);
          LODWORD(v19) = (((v19 | (v19 >> 8)) >> 16) | v19 | (v19 >> 8)) + 1;
          *(_DWORD *)(a1 + 1088) = v19;
          result = operator new(16 * v19, (std::align_val_t)8uLL);
          *(_QWORD *)(a1 + 1072) = result;
          *(_QWORD *)(a1 + 1080) = 0;
          v20 = *(unsigned int *)(a1 + 1088);
          if ((_DWORD)v20)
          {
            v21 = 16 * v20;
            do
            {
              *result = -1;
              result += 4;
              v21 -= 16;
            }
            while (v21);
          }
        }
        else
        {
          *v3 = 0;
          *(_QWORD *)(a1 + 1080) = 0;
          *(_DWORD *)(a1 + 1088) = 0;
        }
      }
      return result;
    }
  }
  else
  {
    if (!*(_DWORD *)(a1 + 1084))
      return result;
    v11 = *(_DWORD *)(a1 + 1088);
    if (v11 > 0x40)
    {
      v15 = 0;
      goto LABEL_26;
    }
  }
  if (v11)
  {
    v12 = (_DWORD *)*v3;
    v13 = 16 * v11;
    do
    {
      *v12 = -1;
      v12 += 4;
      v13 -= 16;
    }
    while (v13);
  }
  *(_QWORD *)(a1 + 1080) = 0;
  return result;
}

BOOL sub_1C5247B3C(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  void **v5;
  void *v6;
  void **v7;
  void *v8;
  void **v9;
  void *v10;
  __int128 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  int v32;
  BOOL v33;
  unsigned int v34;
  unsigned int *v35;
  llvm::Pass *v36;
  int v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  _DWORD *v42;
  int v43;
  _DWORD *v44;
  int v45;
  BOOL v46;
  int v47;
  _DWORD *v48;
  unsigned int v49;
  unint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int *v63;
  int v64;
  BOOL v65;
  unsigned int v66;
  int v67;
  BOOL v68;
  unsigned int v69;
  llvm::Pass *v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int16 v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unsigned int v89;
  BOOL v90;
  int v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  unint64_t v105;
  char *v106;
  _QWORD *v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  int v116;
  int v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  unint64_t v126;
  char *v127;
  _QWORD *v128;
  char *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int *v140;
  uint64_t v141;
  unsigned int *v142;
  unsigned int *v143;
  uint64_t v144;
  uint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  unsigned int *v148;
  unsigned int v149;
  uint64_t v150;
  _QWORD *v151;
  unsigned int v152;
  _QWORD *v153;
  uint64_t v154;
  char *v155;
  char *v156;
  _QWORD *v157;
  char *v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;
  _QWORD *v164;
  int v165;
  int v166;
  _QWORD *v167;
  int v168;
  uint64_t i;
  int v170;
  char v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  char *v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  void **v182;
  uint64_t *v183;
  char *v184;
  char *v185;
  uint64_t v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  unint64_t v192;
  void **p_src;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int v197;
  _BYTE *v198;
  unint64_t v199;
  void **v200;
  uint64_t *v201;
  unsigned int *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  int v208;
  unsigned int *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  int v215;
  int v216;
  int v218;
  uint64_t v219;
  int v220;
  int v221;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  BOOL v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  BOOL v233;
  uint64_t v234;
  unint64_t v235;
  const void *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _BYTE *v240;
  unsigned int v241;
  unint64_t v242;
  uint64_t v243;
  _BYTE *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  size_t v252;
  uint64_t v253;
  int *v254;
  int *v255;
  uint64_t v256;
  int v257;
  int v258;
  int *v259;
  int v260;
  int v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  void *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  int v280;
  int v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  int *v286;
  uint64_t v287;
  int *v288;
  int *v289;
  _DWORD *v290;
  unsigned int *v291;
  unsigned int v292;
  int v293;
  uint64_t v294;
  _DWORD *v295;
  int v296;
  int v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  unint64_t v301;
  _DWORD *v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  void *v310;
  int v311;
  unsigned int v312;
  _DWORD *v313;
  uint64_t v314;
  unint64_t v315;
  unint64_t v316;
  _DWORD *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  _QWORD *v322;
  uint64_t v323;
  _QWORD *v324;
  _QWORD *v325;
  int v326;
  uint64_t v327;
  _DWORD *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  _QWORD *v332;
  uint64_t v333;
  _QWORD *v334;
  _QWORD *v335;
  int v336;
  unsigned int v337;
  _DWORD *v338;
  uint64_t v339;
  _DWORD *v340;
  uint64_t v341;
  int v342;
  _DWORD *v343;
  _DWORD *v344;
  uint64_t v345;
  int v346;
  _DWORD *v347;
  unint64_t v348;
  unint64_t v349;
  _DWORD *v350;
  uint64_t v351;
  uint64_t v352;
  unint64_t v353;
  unint64_t v354;
  _DWORD *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  int v360;
  _DWORD *v361;
  _QWORD *v362;
  unsigned int v364;
  uint64_t v365;
  uint64_t v366;
  char *v367;
  uint64_t v368;
  uint64_t v369;
  llvm::Pass *v370;
  char *v371;
  __int128 v372;
  uint64_t v373;
  char *v374;
  uint64_t v375;
  unsigned int *v376;
  _DWORD *v377;
  void *__src;
  uint64_t v379;
  _BYTE v380[64];
  _QWORD *v381;
  uint64_t v382;
  _QWORD v383[4];

  v383[2] = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int8 *)(a2 + 353);
  if (*(_BYTE *)(a2 + 353))
    return v2 == 0;
  *(_QWORD *)(a1 + 256) = a2;
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 272) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 176))(v4);
  *(_QWORD *)(a1 + 280) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v5 = **(void ****)(a1 + 8);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::LiveIntervals::ID);
  *(_QWORD *)(a1 + 288) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::LiveIntervals::ID);
  v7 = **(void ****)(a1 + 8);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != &llvm::AAResultsWrapperPass::ID);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::AAResultsWrapperPass::ID)+ 32);
  v9 = **(void ****)(a1 + 8);
  do
  {
    v10 = *v9;
    v9 += 2;
  }
  while (v10 != &llvm::MachineLoopInfo::ID);
  *(_QWORD *)(a1 + 296) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v9 - 1) + 96))(*(v9 - 1), &llvm::MachineLoopInfo::ID);
  v360 = v2;
  if (dword_1ED7FF008)
    v12 = dword_1ED7FF008 == 1;
  else
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 256))(v4);
  *(_BYTE *)(a1 + 657) = v12;
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 288) + 288);
  v14 = *(_QWORD *)(a1 + 256);
  v15 = *(_QWORD *)(v14 + 1096);
  v16 = *(unsigned int *)(v14 + 1112);
  v17 = (unsigned int *)(v15 + 24 * v16);
  v370 = (llvm::Pass *)a1;
  if (*(_DWORD *)(v14 + 1104))
  {
    if ((_DWORD)v16)
    {
      v18 = 24 * v16;
      v19 = *(unsigned int **)(v14 + 1096);
      while (*v19 >= 0xFFFFFFFE)
      {
        v19 += 6;
        v18 -= 24;
        if (!v18)
          goto LABEL_16;
      }
    }
    else
    {
      v19 = *(unsigned int **)(v14 + 1096);
    }
  }
  else
  {
LABEL_16:
    v19 = (unsigned int *)(v15 + 24 * v16);
  }
  v20 = (unsigned int *)(v15 + 24 * v16);
  if (v19 != v20)
  {
    v375 = a1 + 552;
    v21 = a1 + 576;
    do
    {
      v22 = *((_QWORD *)v19 + 1);
      *(_QWORD *)&v11 = *((_QWORD *)v19 + 2);
      LODWORD(__src) = v11;
      v23 = *(_QWORD *)(*(_QWORD *)(v13 + 392) + 16 * *(unsigned int *)(v22 + 24));
      v24 = *v19;
      v25 = *((_DWORD *)v370 + 142);
      if (v25)
      {
        v26 = v11;
        v27 = *((_QWORD *)v370 + 69);
        v28 = (v25 - 1) & (37 * v24);
        v29 = (unsigned int *)(v27 + 24 * v28);
        v30 = *v29;
        if (v24 == *v29)
          goto LABEL_37;
        v31 = 0;
        v32 = 1;
        while (v30 != -1)
        {
          if (v31)
            v33 = 0;
          else
            v33 = v30 == -2;
          if (v33)
            v31 = v29;
          v34 = v28 + v32++;
          v28 = v34 & (v25 - 1);
          v29 = (unsigned int *)(v27 + 24 * v28);
          v30 = *v29;
          if (v24 == *v29)
            goto LABEL_37;
        }
        if (v31)
          v35 = v31;
        else
          v35 = v29;
      }
      else
      {
        v35 = 0;
      }
      v36 = v370;
      v37 = *((_DWORD *)v370 + 140);
      if (4 * v37 + 4 >= 3 * v25)
      {
        v372 = v11;
        sub_1C5249B98(v375, 2 * v25);
        v53 = *((_DWORD *)v370 + 142);
        if (!v53)
          goto LABEL_71;
        v54 = *((_QWORD *)v370 + 69);
        v55 = v53 - 1;
        v56 = (v53 - 1) & (37 * v24);
        v35 = (unsigned int *)(v54 + 24 * v56);
        v57 = *v35;
        v11 = v372;
        if (v24 != *v35)
        {
          v63 = 0;
          v64 = 1;
          while (v57 != -1)
          {
            if (v63)
              v65 = 0;
            else
              v65 = v57 == -2;
            if (v65)
              v63 = v35;
            v66 = v56 + v64++;
            v56 = v66 & v55;
            v35 = (unsigned int *)(v54 + 24 * (v66 & v55));
            v57 = *v35;
            v36 = v370;
            v11 = v372;
            if (v24 == *v35)
              goto LABEL_34;
          }
LABEL_91:
          if (v63)
            v35 = v63;
LABEL_70:
          v36 = v370;
          goto LABEL_72;
        }
        v36 = v370;
      }
      else if (v25 + ~v37 - *((_DWORD *)v370 + 141) <= v25 >> 3)
      {
        v372 = v11;
        sub_1C5249B98(v375, v25);
        v58 = *((_DWORD *)v370 + 142);
        if (v58)
        {
          v59 = *((_QWORD *)v370 + 69);
          v60 = v58 - 1;
          v61 = (v58 - 1) & (37 * v24);
          v35 = (unsigned int *)(v59 + 24 * v61);
          v62 = *v35;
          if (v24 != *v35)
          {
            v63 = 0;
            v67 = 1;
            while (v62 != -1)
            {
              if (v63)
                v68 = 0;
              else
                v68 = v62 == -2;
              if (v68)
                v63 = v35;
              v69 = v61 + v67++;
              v61 = v69 & v60;
              v35 = (unsigned int *)(v59 + 24 * (v69 & v60));
              v62 = *v35;
              v36 = v370;
              v11 = v372;
              if (v24 == *v35)
                goto LABEL_34;
            }
            goto LABEL_91;
          }
          goto LABEL_70;
        }
LABEL_71:
        v35 = 0;
LABEL_72:
        v11 = v372;
      }
LABEL_34:
      ++*((_DWORD *)v36 + 140);
      if (*v35 != -1)
        --*((_DWORD *)v36 + 141);
      *v35 = v24;
      *((_QWORD *)v35 + 1) = v23;
      *((_QWORD *)v35 + 2) = v11;
      v26 = (int)__src;
LABEL_37:
      v38 = *((_DWORD *)v370 + 148);
      if (v38)
      {
        v39 = *((_QWORD *)v370 + 72);
        v40 = v38 - 1;
        v41 = (37 * v26) & v40;
        v42 = (_DWORD *)(v39 + 32 * v41);
        v43 = *v42;
        if (v26 == *v42)
          goto LABEL_50;
        v44 = 0;
        v45 = 1;
        while (v43 != -1)
        {
          if (v44)
            v46 = 0;
          else
            v46 = v43 == -2;
          if (v46)
            v44 = v42;
          v47 = v41 + v45++;
          v41 = v47 & v40;
          v42 = (_DWORD *)(v39 + 32 * v41);
          v43 = *v42;
          if (v26 == *v42)
            goto LABEL_50;
        }
        if (v44)
          v48 = v44;
        else
          v48 = v42;
      }
      else
      {
        v48 = 0;
      }
      v42 = sub_1C5249CE0(v21, (int *)&__src, v48);
      *v42 = v26;
      *((_QWORD *)v42 + 1) = v42 + 6;
      *((_QWORD *)v42 + 2) = 0x200000000;
LABEL_50:
      v49 = *v19;
      v50 = v42[4];
      if (v50 >= v42[5])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v42 + 2), (uint64_t)(v42 + 6), v50 + 1, 4);
        v50 = v42[4];
      }
      *(_DWORD *)(*((_QWORD *)v42 + 1) + 4 * v50) = v49;
      ++v42[4];
      v51 = v19 + 6;
      while (v51 != v17)
      {
        v52 = *v51;
        v51 += 6;
        if (v52 <= 0xFFFFFFFD)
        {
          v19 = v51 - 6;
          goto LABEL_57;
        }
      }
      v19 = v17;
LABEL_57:
      ;
    }
    while (v19 != v20);
  }
  v70 = v370;
  *((_BYTE *)v370 + 658) = byte_1ED7FEF48;
  if (byte_1ED7FF0C8)
    llvm::MachineFunction::verify(*((llvm::MachineFunction **)v370 + 32), v370, "Before register coalescing", 1);
  v376 = (unsigned int *)((char *)v370 + 600);
  v71 = *((_DWORD *)v370 + 152);
  if (v71 || *((_DWORD *)v370 + 153))
  {
    v307 = *((unsigned int *)v370 + 154);
    if (v307 > 4 * v71 && v307 >= 0x41)
    {
      sub_1C5249B3C(v376);
      if (v71)
      {
        v311 = 1 << (33 - __clz(v71 - 1));
        if (v311 <= 64)
          v312 = 64;
        else
          v312 = v311;
        if (v312 == *((_DWORD *)v370 + 154))
        {
          v70 = v370;
          *((_QWORD *)v370 + 76) = 0;
          v313 = (_DWORD *)*((_QWORD *)v370 + 75);
          v314 = 32 * v312;
          do
          {
            *v313 = -1;
            v313 += 8;
            v314 -= 32;
          }
          while (v314);
        }
        else
        {
          v70 = v370;
          MEMORY[0x1CAA32FB4](*((_QWORD *)v370 + 75), 8);
          v315 = (4 * v312 / 3 + 1) | ((unint64_t)(4 * v312 / 3 + 1) >> 1);
          v316 = v315 | (v315 >> 2) | ((v315 | (v315 >> 2)) >> 4);
          LODWORD(v316) = (((v316 | (v316 >> 8)) >> 16) | v316 | (v316 >> 8)) + 1;
          *((_DWORD *)v370 + 154) = v316;
          v317 = operator new(32 * v316, (std::align_val_t)8uLL);
          *((_QWORD *)v370 + 75) = v317;
          *((_QWORD *)v370 + 76) = 0;
          v318 = *((unsigned int *)v370 + 154);
          if ((_DWORD)v318)
          {
            v319 = 32 * v318;
            do
            {
              *v317 = -1;
              v317 += 8;
              v319 -= 32;
            }
            while (v319);
          }
        }
        goto LABEL_98;
      }
      if (*((_DWORD *)v370 + 154))
      {
        MEMORY[0x1CAA32FB4](*(_QWORD *)v376, 8);
        *(_QWORD *)v376 = 0;
        *((_QWORD *)v370 + 76) = 0;
        *((_DWORD *)v370 + 154) = 0;
        v70 = v370;
        goto LABEL_98;
      }
    }
    else if ((_DWORD)v307)
    {
      v308 = *(_QWORD *)v376;
      v309 = 32 * v307;
      do
      {
        if (*(_DWORD *)v308 != -1)
        {
          if (*(_DWORD *)v308 != -2)
          {
            v310 = *(void **)(v308 + 8);
            if (v310)
            {
              *(_QWORD *)(v308 + 16) = v310;
              operator delete(v310);
            }
          }
          *(_DWORD *)v308 = -1;
        }
        v308 += 32;
        v309 -= 32;
      }
      while (v309);
    }
    v70 = v370;
    *((_QWORD *)v370 + 76) = 0;
  }
LABEL_98:
  v72 = *((_DWORD *)v70 + 158);
  if (!v72 && !*((_DWORD *)v70 + 159))
    goto LABEL_100;
  v320 = *((unsigned int *)v70 + 160);
  v321 = *((_QWORD *)v70 + 78);
  if (v320 <= 4 * v72 || v320 < 0x41)
  {
    if (!(_DWORD)v320)
    {
LABEL_574:
      v70 = v370;
      *((_QWORD *)v370 + 79) = 0;
      goto LABEL_100;
    }
    v340 = (_DWORD *)(v321 + 24);
    v341 = 40 * v320;
    while (1)
    {
      v342 = *(v340 - 6);
      if (v342 == -2)
        goto LABEL_572;
      if (v342 != -1)
        break;
LABEL_573:
      v340 += 10;
      v341 -= 40;
      if (!v341)
        goto LABEL_574;
    }
    v343 = (_DWORD *)*((_QWORD *)v340 - 2);
    if (v340 != v343)
      free(v343);
LABEL_572:
    *(v340 - 6) = -1;
    goto LABEL_573;
  }
  v322 = (_QWORD *)((char *)v370 + 624);
  v323 = 40 * v320;
  v324 = (_QWORD *)(v321 + 24);
  do
  {
    if (*((_DWORD *)v324 - 6) <= 0xFFFFFFFD)
    {
      v325 = (_QWORD *)*(v324 - 2);
      if (v324 != v325)
        free(v325);
    }
    v324 += 5;
    v323 -= 40;
  }
  while (v323);
  v326 = 1 << (33 - __clz(v72 - 1));
  if (v326 <= 64)
    v326 = 64;
  if (v72)
    v327 = v326;
  else
    v327 = 0;
  if ((_DWORD)v327 == *((_DWORD *)v370 + 160))
  {
    v70 = v370;
    *((_QWORD *)v370 + 79) = 0;
    if ((_DWORD)v327)
    {
      v328 = (_DWORD *)*((_QWORD *)v370 + 78);
      v329 = 40 * v327;
      do
      {
        *v328 = -1;
        v328 += 10;
        v329 -= 40;
      }
      while (v329);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*v322, 8);
    if ((_DWORD)v327)
    {
      v348 = (4 * (int)v327 / 3u + 1) | ((unint64_t)(4 * (int)v327 / 3u + 1) >> 1);
      v349 = v348 | (v348 >> 2) | ((v348 | (v348 >> 2)) >> 4);
      LODWORD(v349) = (((v349 | (v349 >> 8)) >> 16) | v349 | (v349 >> 8)) + 1;
      v70 = v370;
      *((_DWORD *)v370 + 160) = v349;
      v350 = operator new(40 * v349, (std::align_val_t)8uLL);
      *((_QWORD *)v370 + 78) = v350;
      *((_QWORD *)v370 + 79) = 0;
      v351 = *((unsigned int *)v370 + 160);
      if ((_DWORD)v351)
      {
        v352 = 40 * v351;
        do
        {
          *v350 = -1;
          v350 += 10;
          v352 -= 40;
        }
        while (v352);
      }
    }
    else
    {
      *v322 = 0;
      *((_QWORD *)v370 + 79) = 0;
      *((_DWORD *)v370 + 160) = 0;
      v70 = v370;
    }
  }
LABEL_100:
  v368 = *(_QWORD *)(*((_QWORD *)v70 + 36) + 288);
  __src = v380;
  v379 = 0x800000000;
  v73 = *(_QWORD *)(a2 + 328);
  if (v73 != a2 + 320)
  {
    while (1)
    {
      v74 = v73 + 48;
      v366 = v73;
      v75 = *(_QWORD *)(v73 + 56);
      if (v75 != v73 + 48)
        break;
LABEL_207:
      LODWORD(v379) = 0;
      v73 = *(_QWORD *)(v366 + 8);
      if (v73 == a2 + 320)
        goto LABEL_208;
    }
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v79 = 0;
    v365 = v74;
    while (1)
    {
      v80 = **(unsigned __int16 **)(v75 + 16);
      if (v80 - 13 > 1)
        break;
      v81 = *(_QWORD *)(v75 + 32);
      if (v80 != 14)
      {
        v83 = v81 + 32;
        goto LABEL_153;
      }
      v82 = *(unsigned int *)(v75 + 40);
      if ((_DWORD)v82 != 2)
      {
        v83 = v81 + 32 * v82;
        v81 += 64;
        do
        {
LABEL_153:
          if (!*(_BYTE *)v81 && (*(_DWORD *)(v81 + 4) & 0x80000000) != 0)
          {
            if (v78 >= HIDWORD(v379))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v380, v78 + 1, 8);
              v77 = v379;
            }
            *((_QWORD *)__src + v77) = v75;
            v76 = v379 + 1;
            goto LABEL_161;
          }
          v81 += 32;
        }
        while (v81 != v83);
        if (v75)
          goto LABEL_162;
LABEL_165:
        while ((*(_WORD *)(v75 + 44) & 8) != 0)
          v75 = *(_QWORD *)(v75 + 8);
        goto LABEL_166;
      }
LABEL_162:
      if ((*(_BYTE *)v75 & 4) == 0)
        goto LABEL_165;
LABEL_166:
      v75 = *(_QWORD *)(v75 + 8);
      if (v75 == v74)
      {
        if (v76)
        {
          v118 = *(_QWORD *)(*(_QWORD *)(v368 + 392) + 16 * *(unsigned int *)(v366 + 24) + 8);
          v119 = (char *)__src;
          v374 = (char *)__src + 8 * v76;
          do
          {
            v120 = *(_QWORD *)v119;
            v121 = *(_QWORD *)(*(_QWORD *)v119 + 32);
            if (**(_WORD **)(*(_QWORD *)v119 + 16) != 14)
            {
              v123 = v121 + 32;
              goto LABEL_185;
            }
            v122 = *(unsigned int *)(v120 + 40);
            if ((_DWORD)v122 != 2)
            {
              v123 = v121 + 32 * v122;
              v121 += 64;
              do
              {
LABEL_185:
                if (!*(_BYTE *)v121 && (*(_DWORD *)(v121 + 4) & 0x80000000) != 0)
                {
                  LODWORD(v381) = *(_DWORD *)(v121 + 4);
                  v124 = (_QWORD *)sub_1C5101E30((uint64_t)v376, (int *)&v381);
                  v125 = v124;
                  v127 = (char *)v124[2];
                  v126 = v124[3];
                  if ((unint64_t)v127 >= v126)
                  {
                    v129 = (char *)v124[1];
                    v130 = (v127 - v129) >> 4;
                    v131 = v130 + 1;
                    if ((unint64_t)(v130 + 1) >> 60)
                      goto LABEL_507;
                    v132 = v126 - (_QWORD)v129;
                    if (v132 >> 3 > v131)
                      v131 = v132 >> 3;
                    if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFF0)
                      v133 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v133 = v131;
                    if (v133)
                    {
                      if (v133 >> 60)
                        goto LABEL_508;
                      v134 = (char *)operator new(16 * v133);
                    }
                    else
                    {
                      v134 = 0;
                    }
                    v135 = &v134[16 * v130];
                    *(_QWORD *)v135 = v118;
                    *((_QWORD *)v135 + 1) = v120;
                    v136 = v135;
                    if (v127 != v129)
                    {
                      do
                      {
                        *((_OWORD *)v136 - 1) = *((_OWORD *)v127 - 1);
                        v136 -= 16;
                        v127 -= 16;
                      }
                      while (v127 != v129);
                      v127 = (char *)v125[1];
                    }
                    v128 = v135 + 16;
                    v125[1] = v136;
                    v125[2] = v135 + 16;
                    v125[3] = &v134[16 * v133];
                    if (v127)
                      operator delete(v127);
                  }
                  else
                  {
                    *(_QWORD *)v127 = v118;
                    *((_QWORD *)v127 + 1) = v120;
                    v128 = v127 + 16;
                  }
                  v125[2] = v128;
                }
                v121 += 32;
              }
              while (v121 != v123);
            }
            v119 += 8;
          }
          while (v119 != v374);
        }
        goto LABEL_207;
      }
    }
    if (v80 <= 0x17 && ((1 << v80) & 0x838000) != 0)
      goto LABEL_162;
    v85 = *(_WORD *)(v75 + 44);
    v86 = v75;
    if ((v85 & 4) != 0)
    {
      do
        v86 = *(_QWORD *)v86 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v86 + 44) & 4) != 0);
    }
    v87 = v75;
    if ((v85 & 8) != 0)
    {
      do
        v87 = *(_QWORD *)(v87 + 8);
      while ((*(_WORD *)(v87 + 44) & 8) != 0);
    }
    v88 = *(_QWORD *)(v87 + 8);
    if (v86 != v88)
    {
      while (1)
      {
        v89 = **(unsigned __int16 **)(v86 + 16);
        v90 = v89 > 0x17;
        v91 = (1 << v89) & 0x83E000;
        if (v90 || v91 == 0)
          break;
        v86 = *(_QWORD *)(v86 + 8);
        if (v86 == v88)
        {
          v86 = v88;
          break;
        }
      }
    }
    v93 = *(_QWORD *)(v368 + 368);
    v94 = *(unsigned int *)(v368 + 384);
    if (!(_DWORD)v94)
    {
LABEL_173:
      v96 = (uint64_t *)(v93 + 16 * v94);
      if (v79)
        goto LABEL_124;
LABEL_172:
      v76 = 0;
LABEL_161:
      LODWORD(v379) = v76;
      v77 = v76;
      v78 = v76;
      v79 = v76;
      if (!v75)
        goto LABEL_165;
      goto LABEL_162;
    }
    LODWORD(v95) = ((v86 >> 4) ^ (v86 >> 9)) & (v94 - 1);
    v96 = (uint64_t *)(v93 + 16 * v95);
    v97 = *v96;
    if (v86 == *v96)
    {
      if (v79)
        goto LABEL_124;
      goto LABEL_172;
    }
    v116 = 1;
    do
    {
      if (v97 == -4096)
        goto LABEL_173;
      v117 = v95 + v116++;
      v95 = v117 & (v94 - 1);
      v97 = *(_QWORD *)(v93 + 16 * v95);
    }
    while (v86 != v97);
    v96 = (uint64_t *)(v93 + 16 * v95);
    if (!v79)
      goto LABEL_172;
LABEL_124:
    v98 = (char *)__src;
    v371 = (char *)__src + 8 * v79;
    v373 = v96[1];
    while (1)
    {
      v99 = *(_QWORD *)v98;
      v100 = *(_QWORD *)(*(_QWORD *)v98 + 32);
      if (**(_WORD **)(*(_QWORD *)v98 + 16) != 14)
        break;
      v101 = *(unsigned int *)(v99 + 40);
      if ((_DWORD)v101 != 2)
      {
        v102 = v100 + 32 * v101;
        v100 += 64;
        do
        {
LABEL_129:
          if (!*(_BYTE *)v100 && (*(_DWORD *)(v100 + 4) & 0x80000000) != 0)
          {
            LODWORD(v381) = *(_DWORD *)(v100 + 4);
            v103 = (_QWORD *)sub_1C5101E30((uint64_t)v376, (int *)&v381);
            v104 = v103;
            v106 = (char *)v103[2];
            v105 = v103[3];
            if ((unint64_t)v106 >= v105)
            {
              v108 = (char *)v103[1];
              v109 = (v106 - v108) >> 4;
              v110 = v109 + 1;
              if ((unint64_t)(v109 + 1) >> 60)
LABEL_507:
                abort();
              v111 = v105 - (_QWORD)v108;
              if (v111 >> 3 > v110)
                v110 = v111 >> 3;
              if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF0)
                v112 = 0xFFFFFFFFFFFFFFFLL;
              else
                v112 = v110;
              if (v112)
              {
                if (v112 >> 60)
LABEL_508:
                  sub_1C4764EE4();
                v113 = (char *)operator new(16 * v112);
              }
              else
              {
                v113 = 0;
              }
              v114 = &v113[16 * v109];
              *(_QWORD *)v114 = v373;
              *((_QWORD *)v114 + 1) = v99;
              v115 = v114;
              if (v106 != v108)
              {
                do
                {
                  *((_OWORD *)v115 - 1) = *((_OWORD *)v106 - 1);
                  v115 -= 16;
                  v106 -= 16;
                }
                while (v106 != v108);
                v106 = (char *)v104[1];
              }
              v107 = v114 + 16;
              v104[1] = v115;
              v104[2] = v114 + 16;
              v104[3] = &v113[16 * v112];
              if (v106)
                operator delete(v106);
            }
            else
            {
              *(_QWORD *)v106 = v373;
              *((_QWORD *)v106 + 1) = v99;
              v107 = v106 + 16;
            }
            v104[2] = v107;
          }
          v100 += 32;
        }
        while (v100 != v102);
      }
      v98 += 8;
      if (v98 == v371)
      {
        v76 = 0;
        v74 = v365;
        goto LABEL_161;
      }
    }
    v102 = v100 + 32;
    goto LABEL_129;
  }
LABEL_208:
  v137 = (uint64_t)v370;
  v138 = *((_QWORD *)v370 + 75);
  v139 = *((unsigned int *)v370 + 154);
  v140 = (unsigned int *)(v138 + 32 * v139);
  if (*((_DWORD *)v370 + 152))
  {
    if ((_DWORD)v139)
    {
      v141 = 32 * v139;
      v142 = (unsigned int *)*((_QWORD *)v370 + 75);
      while (*v142 >= 0xFFFFFFFE)
      {
        v142 += 8;
        v141 -= 32;
        if (!v141)
          goto LABEL_213;
      }
    }
    else
    {
      v142 = (unsigned int *)*((_QWORD *)v370 + 75);
    }
  }
  else
  {
LABEL_213:
    v142 = (unsigned int *)(v138 + 32 * v139);
  }
  v143 = (unsigned int *)(v138 + 32 * v139);
  while (v142 != v143)
  {
    v144 = *((_QWORD *)v142 + 1);
    v145 = (uint64_t *)*((_QWORD *)v142 + 2);
    v146 = 126 - 2 * __clz(((uint64_t)v145 - v144) >> 4);
    if (v145 == (uint64_t *)v144)
      v147 = 0;
    else
      v147 = v146;
    sub_1C524A0AC(v144, v145, v147, 1);
    v148 = v142 + 8;
    while (v148 != v140)
    {
      v149 = *v148;
      v148 += 8;
      if (v149 <= 0xFFFFFFFD)
      {
        v142 = v148 - 8;
        goto LABEL_224;
      }
    }
    v142 = v140;
LABEL_224:
    ;
  }
  if (__src != v380)
    free(__src);
  llvm::RegisterClassInfo::runOnMachineFunction((llvm::Pass *)((char *)v370 + 312), (const llvm::MachineFunction *)a2);
  if (byte_1ED7FEDC8)
  {
    v150 = *((_QWORD *)v370 + 32);
    v151 = (_QWORD *)(v150 + 320);
    v152 = -1;
    v153 = (_QWORD *)(v150 + 320);
    do
    {
      v153 = (_QWORD *)v153[1];
      ++v152;
    }
    while (v153 != v151);
    v154 = v152;
    if (v152)
    {
      v155 = (char *)operator new(16 * v152);
      v156 = &v155[16 * v154];
    }
    else
    {
      v155 = 0;
      v156 = 0;
    }
    v157 = *(_QWORD **)(v150 + 328);
    if (v157 != v151)
    {
      v158 = v155;
      while (1)
      {
        v159 = *((_QWORD *)v370 + 37);
        v160 = *(_DWORD *)(v159 + 264);
        if (v160)
        {
          v161 = *(_QWORD *)(v159 + 248);
          v162 = v160 - 1;
          v163 = (v160 - 1) & ((v157 >> 4) ^ (v157 >> 9));
          v164 = *(_QWORD **)(v161 + 16 * v163);
          if (v157 == v164)
          {
LABEL_240:
            v167 = *(_QWORD **)(v161 + 16 * v163 + 8);
            if (v167)
            {
              v168 = 0;
              do
              {
                v167 = (_QWORD *)*v167;
                ++v168;
              }
              while (v167);
              goto LABEL_245;
            }
          }
          else
          {
            v165 = 1;
            while (v164 != (_QWORD *)-4096)
            {
              v166 = v163 + v165++;
              v163 = v166 & v162;
              v164 = *(_QWORD **)(v161 + 16 * v163);
              if (v157 == v164)
                goto LABEL_240;
            }
          }
        }
        v168 = 0;
LABEL_245:
        if (*((_BYTE *)v370 + 658)
          && ((v157[9] - v157[8]) & 0x7FFFFFFF8) == 8
          && ((v157[12] - v157[11]) & 0x7FFFFFFF8) == 8)
        {
          for (i = v157[7]; (_QWORD *)i != v157 + 6; i = *(_QWORD *)(i + 8))
          {
            v170 = **(unsigned __int16 **)(i + 16);
            if (v170 != 11 && v170 != 19 && !sub_1C61D913C(i, 1))
              goto LABEL_260;
            if ((*(_BYTE *)i & 4) == 0)
            {
              while ((*(_WORD *)(i + 44) & 8) != 0)
                i = *(_QWORD *)(i + 8);
            }
          }
          v173 = 1;
        }
        else
        {
LABEL_260:
          v173 = 0;
        }
        if (v155 >= v156)
        {
          v174 = (v155 - v158) >> 4;
          v175 = v174 + 1;
          if ((unint64_t)(v174 + 1) >> 60)
            goto LABEL_507;
          if ((v156 - v158) >> 3 > v175)
            v175 = (v156 - v158) >> 3;
          if ((unint64_t)(v156 - v158) >= 0x7FFFFFFFFFFFFFF0)
            v176 = 0xFFFFFFFFFFFFFFFLL;
          else
            v176 = v175;
          if (v176)
          {
            if (v176 >> 60)
              goto LABEL_508;
            v177 = (char *)operator new(16 * v176);
          }
          else
          {
            v177 = 0;
          }
          v178 = &v177[16 * v174];
          *(_QWORD *)v178 = v157;
          *((_DWORD *)v178 + 2) = v168;
          v178[12] = v173;
          v179 = v178;
          while (v155 != v158)
          {
            v180 = *((_QWORD *)v155 - 2);
            v155 -= 16;
            v181 = *(_QWORD *)(v155 + 5);
            *((_QWORD *)v179 - 2) = v180;
            v179 -= 16;
            *(_QWORD *)(v179 + 5) = v181;
          }
          v156 = &v177[16 * v176];
          v155 = v178 + 16;
          if (v158)
            operator delete(v158);
          v158 = v179;
        }
        else
        {
          *(_QWORD *)v155 = v157;
          *((_DWORD *)v155 + 2) = v168;
          v155[12] = v173;
          v155 += 16;
        }
        v157 = (_QWORD *)v157[1];
        if (v157 == v151)
          goto LABEL_283;
      }
    }
    v158 = v155;
LABEL_283:
    if (v155 - v158 >= 32)
      qsort(v158, (unint64_t)(v155 - v158) >> 4, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_1C524B2F8);
    v137 = (uint64_t)v370;
    if (v158 == v155)
      goto LABEL_413;
    v182 = (void **)((char *)v370 + 664);
    v183 = (uint64_t *)((char *)v370 + 672);
    v361 = (_DWORD *)((char *)v370 + 752);
    v362 = (_QWORD *)((char *)v370 + 744);
    v358 = (uint64_t)v370 + 760;
    v359 = (uint64_t)v370 + 680;
    v364 = -1;
    v184 = v158;
    v377 = (_DWORD *)((char *)v370 + 672);
LABEL_287:
    v367 = v184;
    if (!*(_BYTE *)(v137 + 657))
    {
      v186 = *(_QWORD *)v184;
      v187 = *(_DWORD *)v183;
      v369 = *(unsigned int *)v183;
      goto LABEL_292;
    }
    v185 = v184;
    if (*((_DWORD *)v184 + 2) >= v364)
    {
      v186 = *(_QWORD *)v184;
      v369 = *(unsigned int *)v183;
    }
    else
    {
      sub_1C524B394(v137);
      v364 = *((_DWORD *)v185 + 2);
      v186 = *(_QWORD *)v185;
      v369 = *(unsigned int *)(v137 + 672);
      if (!*(_BYTE *)(v137 + 657))
      {
        v187 = *(_DWORD *)(v137 + 672);
LABEL_292:
        __src = v380;
        v379 = 0x200000000;
        v188 = v186 + 48;
        v189 = *(_QWORD *)(v186 + 56);
        if (v189 == v186 + 48)
        {
          v241 = 0;
          v240 = v380;
LABEL_387:
          v242 = v241 + (unint64_t)v187;
          if (v242 > *(unsigned int *)(v137 + 676))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v182, v359, v242, 8);
            v187 = *(_DWORD *)v183;
          }
          v239 = v369;
          if (v241)
          {
            memcpy((char *)*v182 + 8 * v187, v240, 8 * v241);
            v239 = v369;
            v187 = *(_DWORD *)v183;
          }
          *(_DWORD *)v183 = v187 + v241;
          goto LABEL_392;
        }
        while (2)
        {
          v190 = **(unsigned __int16 **)(v189 + 16);
          if (v190 != 19 && v190 != 11)
          {
LABEL_304:
            if ((*(_BYTE *)v189 & 4) == 0)
            {
              while ((*(_WORD *)(v189 + 44) & 8) != 0)
                v189 = *(_QWORD *)(v189 + 8);
            }
            v189 = *(_QWORD *)(v189 + 8);
            if (v189 == v188)
            {
              v240 = __src;
              v241 = v379;
              v187 = *(_DWORD *)v183;
              goto LABEL_387;
            }
            continue;
          }
          break;
        }
        if (sub_1C52519B8((uint64_t *)v137, v189))
        {
          v192 = v379;
          if (v379 < (unint64_t)HIDWORD(v379))
          {
            p_src = &__src;
            v194 = &v379;
LABEL_303:
            *((_QWORD *)*p_src + v192) = v189;
            ++*(_DWORD *)v194;
            goto LABEL_304;
          }
          p_src = &__src;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v380, v379 + 1, 8);
          v194 = &v379;
        }
        else
        {
          v192 = *(unsigned int *)(v137 + 672);
          if (v192 < *(unsigned int *)(v137 + 676))
          {
            p_src = v182;
            v194 = v183;
            goto LABEL_303;
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v182, v359, v192 + 1, 8);
          v194 = v183;
          p_src = v182;
        }
        v192 = *(unsigned int *)v194;
        goto LABEL_303;
      }
    }
    __src = v380;
    v379 = 0x200000000;
    v381 = v383;
    v382 = 0x200000000;
    v195 = v186 + 48;
    v196 = *(_QWORD *)(v186 + 56);
    if (v196 == v186 + 48)
    {
      v197 = 0;
      v198 = v380;
      goto LABEL_378;
    }
    while (1)
    {
      v216 = **(unsigned __int16 **)(v196 + 16);
      if (v216 != 19 && v216 != 11)
        goto LABEL_373;
      v218 = sub_1C52519B8((uint64_t *)v137, v196);
      if (**(_WORD **)(v196 + 16) != 19)
        goto LABEL_367;
      v219 = *(_QWORD *)(v196 + 32);
      if ((*(_BYTE *)(v219 + 35) & 0x10) != 0)
        goto LABEL_367;
      v220 = *(_DWORD *)(v219 + 36);
      v221 = *(_DWORD *)(v219 + 4);
      if ((v220 - 1) < 0x3FFFFFFF || (v221 - 1) < 0x3FFFFFFF)
        goto LABEL_367;
      v223 = *((_QWORD *)v370 + 36);
      if ((v220 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v223 + 416)
        || (v202 = *(unsigned int **)(*(_QWORD *)(v223 + 408) + 8 * (v220 & 0x7FFFFFFF))) == 0)
      {
        v202 = (unsigned int *)sub_1C4851220(*((_QWORD *)v370 + 36), v220);
        v203 = *(_QWORD *)(v223 + 304);
        v204 = *(_QWORD *)(v223 + 248);
        *(_QWORD *)v203 = v204;
        *(_QWORD *)(v203 + 8) = *(_QWORD *)(v204 + 40);
        *(_OWORD *)(v203 + 16) = *(_OWORD *)(v223 + 288);
        *(_QWORD *)(v203 + 32) = v223 + 312;
        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v203);
        *(_DWORD *)(v203 + 184) = 0;
        v205 = *(_QWORD *)(v223 + 256);
        v33 = *(_BYTE *)(v205 + 16) == 0;
        v206 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v205 + 24) + 16 * (v202[28] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                  + 34);
        v208 = !v33 && v206 != 0;
        llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v223 + 304), (llvm::LiveInterval *)v202, v208);
        llvm::LiveIntervals::computeDeadValues(v223, (uint64_t)v202, 0);
      }
      if ((v224 = **(_QWORD **)v202, (v224 & 6) == 0)
        || (v225 = *(_QWORD *)(*(_QWORD *)v202 + 24 * v202[2] - 16), (v225 & 6) == 0)
        || ((v226 = sub_1C499C548(*(_QWORD *)(v223 + 288), v224),
             v227 = sub_1C499C548(*(_QWORD *)(v223 + 288), v225),
             v226)
          ? (v228 = v226 == v227)
          : (v228 = 0),
            v182 = (void **)((char *)v370 + 664),
            !v228))
      {
        if ((v221 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v223 + 416)
          || (v209 = *(unsigned int **)(*(_QWORD *)(v223 + 408) + 8 * (v221 & 0x7FFFFFFF))) == 0)
        {
          v209 = (unsigned int *)sub_1C4851220(v223, v221);
          v210 = *(_QWORD *)(v223 + 304);
          v211 = *(_QWORD *)(v223 + 248);
          *(_QWORD *)v210 = v211;
          *(_QWORD *)(v210 + 8) = *(_QWORD *)(v211 + 40);
          *(_OWORD *)(v210 + 16) = *(_OWORD *)(v223 + 288);
          *(_QWORD *)(v210 + 32) = v223 + 312;
          llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v210);
          *(_DWORD *)(v210 + 184) = 0;
          v182 = (void **)((char *)v370 + 664);
          v212 = *(_QWORD *)(v223 + 256);
          v33 = *(_BYTE *)(v212 + 16) == 0;
          v213 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v212 + 24) + 16 * (v209[28] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                    + 34);
          v215 = !v33 && v213 != 0;
          llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v223 + 304), (llvm::LiveInterval *)v209, v215);
          llvm::LiveIntervals::computeDeadValues(v223, (uint64_t)v209, 0);
        }
        if ((v229 = **(_QWORD **)v209, (v229 & 6) == 0)
          || (v230 = *(_QWORD *)(*(_QWORD *)v209 + 24 * v209[2] - 16), (v230 & 6) == 0)
          || ((v231 = sub_1C499C548(*(_QWORD *)(v223 + 288), v229),
               v232 = sub_1C499C548(*(_QWORD *)(v223 + 288), v230),
               v231)
            ? (v233 = v231 == v232)
            : (v233 = 0),
              v182 = (void **)((char *)v370 + 664),
              !v233))
        {
LABEL_367:
          if (v218)
          {
            v199 = v382;
            if (v382 < (unint64_t)HIDWORD(v382))
            {
              v200 = (void **)&v381;
              v137 = (uint64_t)v370;
              v201 = &v382;
              goto LABEL_372;
            }
            v200 = (void **)&v381;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v381, (uint64_t)v383, v382 + 1, 8);
            v137 = (uint64_t)v370;
            v201 = &v382;
          }
          else
          {
            v137 = (uint64_t)v370;
            v199 = *((unsigned int *)v370 + 168);
            if (v199 < *((unsigned int *)v370 + 169))
            {
              v200 = v182;
              v201 = (uint64_t *)((char *)v370 + 672);
              goto LABEL_372;
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v182, v359, v199 + 1, 8);
            v201 = (uint64_t *)((char *)v370 + 672);
            v200 = v182;
          }
          goto LABEL_322;
        }
      }
      if (v218)
      {
        v199 = v379;
        if (v379 >= (unint64_t)HIDWORD(v379))
        {
          v200 = &__src;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v380, v379 + 1, 8);
          v201 = &v379;
          v137 = (uint64_t)v370;
LABEL_322:
          v199 = *(unsigned int *)v201;
          goto LABEL_372;
        }
        v200 = &__src;
        v201 = &v379;
        v137 = (uint64_t)v370;
      }
      else
      {
        v137 = (uint64_t)v370;
        v199 = *((unsigned int *)v370 + 188);
        if (v199 >= *((unsigned int *)v370 + 189))
        {
          v200 = (void **)((char *)v370 + 744);
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v362, v358, v199 + 1, 8);
          v201 = (uint64_t *)((char *)v370 + 752);
          goto LABEL_322;
        }
        v201 = (uint64_t *)((char *)v370 + 752);
        v200 = (void **)((char *)v370 + 744);
      }
LABEL_372:
      *((_QWORD *)*v200 + v199) = v196;
      ++*(_DWORD *)v201;
LABEL_373:
      if ((*(_BYTE *)v196 & 4) == 0)
      {
        while ((*(_WORD *)(v196 + 44) & 8) != 0)
          v196 = *(_QWORD *)(v196 + 8);
      }
      v196 = *(_QWORD *)(v196 + 8);
      if (v196 == v195)
      {
        v198 = __src;
        v197 = v379;
LABEL_378:
        v234 = *(unsigned int *)(v137 + 752);
        v235 = v234 + v197;
        v183 = (uint64_t *)((char *)v370 + 672);
        if (v235 > *(unsigned int *)(v137 + 756))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v362, v358, v235, 8);
          LODWORD(v234) = *v361;
          if (v197)
            goto LABEL_412;
        }
        else
        {
          if (!v197)
            goto LABEL_380;
LABEL_412:
          memcpy((void *)(*v362 + 8 * v234), v198, 8 * v197);
          LODWORD(v234) = *v361;
        }
LABEL_380:
        *(_DWORD *)(v137 + 752) = v234 + v197;
        v236 = v381;
        v237 = v382;
        v238 = *(unsigned int *)(v137 + 672);
        if (v238 + (unint64_t)v382 > *(unsigned int *)(v137 + 676))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v182, v359, v238 + v382, 8);
          LODWORD(v238) = *v377;
        }
        v239 = v369;
        if ((_DWORD)v237)
        {
          memcpy((char *)*v182 + 8 * v238, v236, 8 * v237);
          v239 = v369;
          LODWORD(v238) = *v377;
        }
        *v377 = v238 + v237;
        if (v381 != v383)
        {
          free(v381);
          v239 = v369;
        }
LABEL_392:
        if (__src != v380)
        {
          free(__src);
          v239 = v369;
        }
        v243 = v239;
        if (sub_1C524B58C(v137, (uint64_t *)(*(_QWORD *)(v137 + 664) + 8 * v239), *(unsigned int *)(v137 + 672) - v239))
        {
          v244 = *v182;
          v245 = *(unsigned int *)v183;
          v246 = (uint64_t)*v182 + 8 * v245;
          if (v243 == v245)
          {
            v247 = v243;
            v248 = (char *)*v182 + 8 * v243;
          }
          else
          {
            v247 = v243;
            v249 = 8 * v245 - 8 * v243;
            v248 = (char *)*v182 + 8 * v243;
            while (*v248)
            {
              ++v248;
              v249 -= 8;
              if (!v249)
              {
                v248 = (char *)*v182 + 8 * v245;
                break;
              }
            }
          }
          if (v248 != (_QWORD *)v246)
          {
            v250 = v248 + 1;
            if (v248 + 1 != (_QWORD *)v246)
            {
              v251 = 8 * v245 - 8 * v247 - 8 * (((char *)v248 - ((_BYTE *)*v182 + 8 * v243)) >> 3) - 8;
              do
              {
                if (*v250)
                  *v248++ = *v250;
                ++v250;
                v251 -= 8;
              }
              while (v251);
              v244 = *v182;
            }
          }
          *(_DWORD *)v183 = (unint64_t)((char *)v248 - v244) >> 3;
        }
        v184 = v367 + 16;
        if (v367 + 16 == v155)
        {
LABEL_413:
          sub_1C524B444(v137);
          sub_1C524B394(v137);
          while ((sub_1C524B58C(v137, *(uint64_t **)(v137 + 664), *(unsigned int *)(v137 + 672)) & 1) != 0)
            ;
          sub_1C524B444(v137);
          if (v158)
            operator delete(v158);
          break;
        }
        goto LABEL_287;
      }
    }
  }
  v252 = *(unsigned int *)(v137 + 1008);
  if (v252 >= 2)
  {
    qsort(*(void **)(v137 + 1000), v252, 4uLL, (int (__cdecl *)(const void *, const void *))sub_1C5257728);
    LODWORD(v252) = *(_DWORD *)(v137 + 1008);
  }
  v253 = *(_QWORD *)(v137 + 1000);
  v254 = (int *)(v253 + 4 * v252);
  if ((_DWORD)v252)
  {
    v255 = (int *)(v253 - 4);
    v256 = 4 * v252 - 4;
    while (v256)
    {
      v257 = v255[1];
      v258 = v255[2];
      ++v255;
      v256 -= 4;
      if (v257 == v258)
        goto LABEL_425;
    }
  }
  else
  {
    v255 = *(int **)(v137 + 1000);
LABEL_425:
    if (v255 != v254)
    {
      v259 = v255 + 2;
      if (v255 + 2 != v254)
      {
        v260 = *v255;
        do
        {
          v261 = v260;
          v260 = *v259;
          if (v261 != *v259)
          {
            v255[1] = v260;
            ++v255;
          }
          ++v259;
        }
        while (v259 != v254);
      }
      v254 = v255 + 1;
    }
  }
  v262 = (unint64_t)v254 - v253;
  *(_DWORD *)(v137 + 1008) = v262 >> 2;
  if ((v262 >> 2))
  {
    v263 = 0;
    v264 = (v262 >> 2);
    do
    {
      v265 = *(unsigned int *)(*(_QWORD *)(v137 + 1000) + 4 * v263);
      v266 = *(_QWORD **)(v137 + 264);
      if ((v265 & 0x80000000) != 0)
        v267 = (uint64_t *)(v266[3] + 16 * (v265 & 0x7FFFFFFF) + 8);
      else
        v267 = (uint64_t *)(v266[34] + 8 * v265);
      v268 = *v267;
      if (v268)
      {
        while ((*(_DWORD *)v268 & 0x80000000) != 0)
        {
          v268 = *(_QWORD *)(v268 + 24);
          if (!v268)
            goto LABEL_455;
        }
        if (llvm::MachineRegisterInfo::recomputeRegClass(v266, v265))
        {
          v269 = *(_QWORD *)(v137 + 288);
          v270 = v265 & 0x7FFFFFFF;
          if (v270 >= *(unsigned int *)(v269 + 416) || (v271 = *(_QWORD *)(*(_QWORD *)(v269 + 408) + 8 * v270)) == 0)
          {
            v271 = sub_1C4851220(*(_QWORD *)(v137 + 288), v265);
            v277 = *(_QWORD *)(v269 + 304);
            v278 = *(_QWORD *)(v269 + 248);
            *(_QWORD *)v277 = v278;
            *(_QWORD *)(v277 + 8) = *(_QWORD *)(v278 + 40);
            *(_OWORD *)(v277 + 16) = *(_OWORD *)(v269 + 288);
            *(_QWORD *)(v277 + 32) = v269 + 312;
            llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v277);
            *(_DWORD *)(v277 + 184) = 0;
            v279 = *(_QWORD *)(v269 + 256);
            v33 = *(_BYTE *)(v279 + 16) == 0;
            v280 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v279 + 24)
                                                   + 16 * (*(_DWORD *)(v271 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                      + 34);
            v282 = !v33 && v280 != 0;
            llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v269 + 304), (llvm::LiveInterval *)v271, v282);
            llvm::LiveIntervals::computeDeadValues(v269, v271, 0);
          }
          v272 = *(_QWORD *)(v271 + 104);
          if (v272)
          {
            v273 = *(_QWORD *)(v137 + 264);
            if (!*(_BYTE *)(v273 + 16)
              || !*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(v273 + 24) + 16 * v270) & 0xFFFFFFFFFFFFFFF8) + 34))
            {
              do
              {
                v275 = *(_QWORD *)(v272 + 96);
                v274 = *(_QWORD *)(v272 + 104);
                *(_QWORD *)(v272 + 96) = 0;
                if (v275)
                {
                  sub_1C47655E8(v275, *(_QWORD **)(v275 + 8));
                  MEMORY[0x1CAA32FC0](v275, 0x1020C4062D53EE8);
                }
                v276 = *(void **)(v272 + 64);
                if (v276 != (void *)(v272 + 80))
                  free(v276);
                if (*(_QWORD *)v272 != v272 + 16)
                  free(*(void **)v272);
                v272 = v274;
              }
              while (v274);
              *(_QWORD *)(v271 + 104) = 0;
            }
          }
        }
      }
LABEL_455:
      ++v263;
    }
    while (v263 != v264);
  }
  v283 = *(_QWORD *)(v137 + 256);
  v284 = *(_QWORD *)(v283 + 1096);
  v285 = *(unsigned int *)(v283 + 1112);
  v286 = (int *)(v284 + 24 * v285);
  if (*(_DWORD *)(v283 + 1104))
  {
    v2 = v360;
    if ((_DWORD)v285)
    {
      v287 = 24 * v285;
      v288 = *(int **)(v283 + 1096);
      while (*v288 >= 0xFFFFFFFE)
      {
        v288 += 6;
        v287 -= 24;
        if (!v287)
        {
          v288 = (int *)(v284 + 24 * v285);
          break;
        }
      }
    }
    else
    {
      v288 = *(int **)(v283 + 1096);
    }
  }
  else
  {
    v288 = (int *)(v284 + 24 * v285);
    v2 = v360;
  }
  v289 = (int *)(v284 + 24 * v285);
  while (v288 != v289)
  {
    __src = 0;
    if (sub_1C48306A4(*(_QWORD *)(v137 + 552), *(_DWORD *)(v137 + 568), *v288, &__src))
      v290 = __src;
    else
      v290 = (_DWORD *)(*(_QWORD *)(v137 + 552) + 24 * *(unsigned int *)(v137 + 568));
    v288[4] = v290[4];
    v288[5] = v290[5];
    v291 = (unsigned int *)(v288 + 6);
    while (v291 != (unsigned int *)v286)
    {
      v292 = *v291;
      v291 += 6;
      if (v292 <= 0xFFFFFFFD)
      {
        v288 = (int *)(v291 - 6);
        goto LABEL_481;
      }
    }
    v288 = v286;
LABEL_481:
    ;
  }
  v293 = *(_DWORD *)(v137 + 560);
  if (v293 || *(_DWORD *)(v137 + 564))
  {
    v294 = *(unsigned int *)(v137 + 568);
    v295 = *(_DWORD **)(v137 + 552);
    if (v294 <= 4 * v293 || v294 < 0x41)
    {
      if ((_DWORD)v294)
      {
        v299 = 24 * v294;
        do
        {
          *v295 = -1;
          v295 += 6;
          v299 -= 24;
        }
        while (v299);
      }
      *(_QWORD *)(v137 + 560) = 0;
    }
    else if (v293)
    {
      v296 = 1 << (33 - __clz(v293 - 1));
      if (v296 <= 64)
        v297 = 64;
      else
        v297 = v296;
      if (v297 == (_DWORD)v294)
      {
        *(_QWORD *)(v137 + 560) = 0;
        v298 = 24 * v294;
        do
        {
          *v295 = -1;
          v295 += 6;
          v298 -= 24;
        }
        while (v298);
      }
      else
      {
        MEMORY[0x1CAA32FB4](v295, 8);
        v300 = (4 * v297 / 3u + 1) | ((unint64_t)(4 * v297 / 3u + 1) >> 1);
        v301 = v300 | (v300 >> 2) | ((v300 | (v300 >> 2)) >> 4);
        LODWORD(v301) = (((v301 | (v301 >> 8)) >> 16) | v301 | (v301 >> 8)) + 1;
        *(_DWORD *)(v137 + 568) = v301;
        v302 = operator new(24 * v301, (std::align_val_t)8uLL);
        *(_QWORD *)(v137 + 552) = v302;
        *(_QWORD *)(v137 + 560) = 0;
        v303 = *(unsigned int *)(v137 + 568);
        if ((_DWORD)v303)
        {
          v304 = 24 * v303;
          do
          {
            *v302 = -1;
            v302 += 6;
            v304 -= 24;
          }
          while (v304);
        }
      }
    }
    else
    {
      MEMORY[0x1CAA32FB4](v295, 8);
      *(_QWORD *)(v137 + 552) = 0;
      *(_QWORD *)(v137 + 560) = 0;
      *(_DWORD *)(v137 + 568) = 0;
    }
  }
  v305 = *(_DWORD *)(v137 + 584);
  if (!v305 && !*(_DWORD *)(v137 + 588))
    goto LABEL_504;
  v330 = *(unsigned int *)(v137 + 592);
  v331 = *(_QWORD *)(v137 + 576);
  if (v330 <= 4 * v305 || v330 < 0x41)
  {
    if (!(_DWORD)v330)
    {
LABEL_583:
      v137 = (uint64_t)v370;
      *((_QWORD *)v370 + 73) = 0;
      v2 = v360;
      goto LABEL_504;
    }
    v344 = (_DWORD *)(v331 + 24);
    v345 = 32 * v330;
    while (1)
    {
      v346 = *(v344 - 6);
      if (v346 == -2)
        goto LABEL_581;
      if (v346 != -1)
        break;
LABEL_582:
      v344 += 8;
      v345 -= 32;
      if (!v345)
        goto LABEL_583;
    }
    v347 = (_DWORD *)*((_QWORD *)v344 - 2);
    if (v344 != v347)
      free(v347);
LABEL_581:
    *(v344 - 6) = -1;
    goto LABEL_582;
  }
  v332 = (_QWORD *)((char *)v370 + 576);
  v333 = 32 * v330;
  v334 = (_QWORD *)(v331 + 24);
  do
  {
    if (*((_DWORD *)v334 - 6) <= 0xFFFFFFFD)
    {
      v335 = (_QWORD *)*(v334 - 2);
      if (v334 != v335)
        free(v335);
    }
    v334 += 4;
    v333 -= 32;
  }
  while (v333);
  if (v305)
  {
    v336 = 1 << (33 - __clz(v305 - 1));
    if (v336 <= 64)
      v337 = 64;
    else
      v337 = v336;
    if (v337 == *((_DWORD *)v370 + 148))
    {
      v137 = (uint64_t)v370;
      *((_QWORD *)v370 + 73) = 0;
      v338 = (_DWORD *)*((_QWORD *)v370 + 72);
      v339 = 32 * v337;
      v2 = v360;
      do
      {
        *v338 = -1;
        v338 += 8;
        v339 -= 32;
      }
      while (v339);
    }
    else
    {
      v137 = (uint64_t)v370;
      MEMORY[0x1CAA32FB4](*((_QWORD *)v370 + 72), 8);
      v353 = (4 * v337 / 3 + 1) | ((unint64_t)(4 * v337 / 3 + 1) >> 1);
      v354 = v353 | (v353 >> 2) | ((v353 | (v353 >> 2)) >> 4);
      LODWORD(v354) = (((v354 | (v354 >> 8)) >> 16) | v354 | (v354 >> 8)) + 1;
      *((_DWORD *)v370 + 148) = v354;
      v355 = operator new(32 * v354, (std::align_val_t)8uLL);
      *((_QWORD *)v370 + 72) = v355;
      *((_QWORD *)v370 + 73) = 0;
      v356 = *((unsigned int *)v370 + 148);
      v2 = v360;
      if ((_DWORD)v356)
      {
        v357 = 32 * v356;
        do
        {
          *v355 = -1;
          v355 += 8;
          v357 -= 32;
        }
        while (v357);
      }
    }
    goto LABEL_504;
  }
  if (!*((_DWORD *)v370 + 148))
    goto LABEL_583;
  MEMORY[0x1CAA32FB4](*v332, 8);
  *v332 = 0;
  *((_QWORD *)v370 + 73) = 0;
  *((_DWORD *)v370 + 148) = 0;
  v2 = v360;
  v137 = (uint64_t)v370;
LABEL_504:
  if (byte_1ED7FF0C8)
    llvm::MachineFunction::verify(*(llvm::MachineFunction **)(v137 + 256), (llvm::Pass *)v137, "After register coalescing", 1);
  return v2 == 0;
}

_QWORD *sub_1C5249AFC(uint64_t a1, uint64_t a2)
{
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 824), a2);
}

void sub_1C5249B04(uint64_t a1)
{
  sub_1C524763C(a1 - 248);
}

void sub_1C5249B0C(uint64_t a1)
{
  sub_1C524763C(a1 - 248);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5249B34(uint64_t a1, uint64_t a2)
{
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 576), a2);
}

void sub_1C5249B3C(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void *v4;

  v1 = a1[4];
  if ((_DWORD)v1)
  {
    v2 = 32 * v1;
    v3 = (_QWORD *)(*(_QWORD *)a1 + 16);
    do
    {
      if (*((_DWORD *)v3 - 4) <= 0xFFFFFFFD)
      {
        v4 = (void *)*(v3 - 1);
        if (v4)
        {
          *v3 = v4;
          operator delete(v4);
        }
      }
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
}

_DWORD *sub_1C5249B98(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = -1;
        result += 6;
        v11 -= 24;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 24 * v3;
      v13 = (_OWORD *)(v4 + 8);
      do
      {
        v14 = *((_DWORD *)v13 - 2);
        if (v14 <= 0xFFFFFFFD)
        {
          v18 = 0;
          sub_1C48306A4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          v15 = v18;
          *v18 = v14;
          *(_OWORD *)(v15 + 2) = *v13;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 = (_OWORD *)((char *)v13 + 24);
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 24 * v16;
    do
    {
      *result = -1;
      result += 6;
      v17 -= 24;
    }
    while (v17);
  }
  return result;
}

_DWORD *sub_1C5249CE0(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  int v7;
  int v9;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    sub_1C5249E54((uint64_t *)a1, 2 * v6);
    v7 = *a2;
    v9 = *(_DWORD *)(a1 + 16) - 1;
    v10 = (37 * *a2) & v9;
    a3 = (_DWORD *)(*(_QWORD *)a1 + 32 * v10);
    v11 = *a3;
    if (*a2 != *a3)
    {
      v12 = 0;
      v13 = 1;
      while (v11 != -1)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v11 == -2;
        if (v14)
          v12 = a3;
        v15 = v10 + v13++;
        v10 = v15 & v9;
        a3 = (_DWORD *)(*(_QWORD *)a1 + 32 * v10);
        v11 = *a3;
        if (v7 == *a3)
          goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      v7 = *a3;
      goto LABEL_4;
    }
    sub_1C5249E54((uint64_t *)a1, v6);
    v7 = *a2;
    v16 = *(_DWORD *)(a1 + 16) - 1;
    v17 = (37 * *a2) & v16;
    a3 = (_DWORD *)(*(_QWORD *)a1 + 32 * v17);
    v18 = *a3;
    if (*a2 != *a3)
    {
      v12 = 0;
      v19 = 1;
      while (v18 != -1)
      {
        if (v12)
          v20 = 0;
        else
          v20 = v18 == -2;
        if (v20)
          v12 = a3;
        v21 = v17 + v19++;
        v17 = v21 & v16;
        a3 = (_DWORD *)(*(_QWORD *)a1 + 32 * v17);
        v18 = *a3;
        if (v7 == *a3)
          goto LABEL_4;
      }
LABEL_27:
      if (v12)
        a3 = v12;
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_DWORD *sub_1C5249E54(uint64_t *a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void *v19;
  unsigned int v20;
  int *v21;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  uint64_t v30;

  v3 = *((unsigned int *)a1 + 4);
  v4 = (int *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -1;
        result += 8;
        v11 -= 32;
      }
      while (v11);
    }
    if (!(_DWORD)v3)
LABEL_46:
      JUMPOUT(0x1CAA32FB4);
    v12 = &v4[8 * v3];
    v13 = v4;
    while (1)
    {
      v14 = *v13;
      if (*v13 <= 0xFFFFFFFD)
        break;
LABEL_24:
      v13 += 8;
      if (v13 == v12)
        goto LABEL_46;
    }
    v15 = *((_DWORD *)a1 + 4) - 1;
    v16 = v15 & (37 * v14);
    v17 = *a1 + 32 * v16;
    v18 = *(_DWORD *)v17;
    if (v14 != *(_DWORD *)v17)
    {
      v25 = 0;
      v26 = 1;
      while (v18 != -1)
      {
        if (v25)
          v27 = 0;
        else
          v27 = v18 == -2;
        if (v27)
          v25 = v17;
        v28 = v16 + v26++;
        v16 = v28 & v15;
        v17 = *a1 + 32 * v16;
        v18 = *(_DWORD *)v17;
        if (v14 == *(_DWORD *)v17)
          goto LABEL_12;
      }
      if (v25)
        v17 = v25;
    }
LABEL_12:
    v19 = (void *)(v17 + 24);
    *(_QWORD *)(v17 + 8) = v17 + 24;
    *(_DWORD *)v17 = v14;
    *(_QWORD *)(v17 + 16) = 0x200000000;
    v20 = v13[4];
    v21 = (int *)*((_QWORD *)v13 + 1);
    if ((int *)v17 == v13 || v20 == 0)
    {
LABEL_22:
      ++*((_DWORD *)a1 + 2);
      if (v21 != v13 + 6)
        free(v21);
      goto LABEL_24;
    }
    if (v21 != v13 + 6)
    {
      *(_QWORD *)(v17 + 8) = v21;
      v24 = v13[5];
      *(_DWORD *)(v17 + 16) = v20;
      *(_DWORD *)(v17 + 20) = v24;
      *((_QWORD *)v13 + 1) = v13 + 6;
      v13[5] = 0;
      v21 = v13 + 6;
      goto LABEL_21;
    }
    if (v20 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v17 + 8, v17 + 24, v13[4], 4);
      v23 = v13[4];
      if (!(_DWORD)v23)
        goto LABEL_20;
      v21 = (int *)*((_QWORD *)v13 + 1);
      v19 = *(void **)(v17 + 8);
    }
    else
    {
      v23 = v13[4];
    }
    memcpy(v19, v21, 4 * v23);
LABEL_20:
    *(_DWORD *)(v17 + 16) = v20;
    v21 = (int *)*((_QWORD *)v13 + 1);
LABEL_21:
    v13[4] = 0;
    goto LABEL_22;
  }
  a1[1] = 0;
  v29 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v29)
  {
    v30 = 32 * v29;
    do
    {
      *result = -1;
      result += 8;
      v30 -= 32;
    }
    while (v30);
  }
  return result;
}

uint64_t sub_1C524A0AC(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t *k;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t *j;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t *v67;
  BOOL v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unint64_t v82;
  _QWORD *v83;
  int64_t v84;
  int64_t v85;
  int64_t v86;
  uint64_t v87;
  uint64_t *v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t *v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unint64_t v103;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t *v128;
  unint64_t v129;
  unsigned int v130;
  unint64_t v131;
  uint64_t *m;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  unsigned int v138;
  unint64_t v139;
  uint64_t *n;
  uint64_t v141;
  unsigned int v142;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 2;
  i = v7;
  while (2)
  {
    v7 = i;
    v10 = (char *)a2 - (char *)i;
    v11 = ((char *)a2 - (char *)i) >> 4;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v61 = *i;
        v62 = *(a2 - 2);
        v63 = (v62 >> 1) & 3 | *(_DWORD *)((v62 & 0xFFFFFFFFFFFFFFF8) + 24);
        v64 = *(_DWORD *)((*i & 0xFFFFFFFFFFFFFFF8) + 24) | (*i >> 1) & 3;
        if (v63 >= v64)
        {
          if (v64 < v63)
            return result;
          v66 = *(a2 - 1);
          v65 = i[1];
          if (v66 >= v65)
            return result;
        }
        else
        {
          v65 = i[1];
          v66 = *(a2 - 1);
        }
        *i = v62;
        i[1] = v66;
        *(a2 - 2) = v61;
        *(a2 - 1) = v65;
        return result;
      case 3:
        return (uint64_t)sub_1C524AC34(i, i + 2, a2 - 2);
      case 4:
        return (uint64_t)sub_1C524B000(i, i + 2, i + 4, a2 - 2);
      case 5:
        return (uint64_t)sub_1C524B148(i, i + 2, i + 4, i + 6, a2 - 2);
      default:
        if (v10 > 383)
        {
          if (!a3)
          {
            if (i == a2)
              return result;
            v84 = (unint64_t)(v11 - 2) >> 1;
            v85 = v84;
            while (1)
            {
              v86 = v85;
              if (v84 >= v85)
              {
                v87 = (2 * v85) | 1;
                v88 = &i[2 * v87];
                if (2 * v86 + 2 < v11)
                {
                  v89 = (*v88 >> 1) & 3 | *(_DWORD *)((*v88 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v90 = *(_DWORD *)((v88[2] & 0xFFFFFFFFFFFFFFF8) + 24) | (v88[2] >> 1) & 3;
                  if (v89 < v90 || v90 >= v89 && i[2 * v87 + 1] < (unint64_t)v88[3])
                  {
                    v88 += 2;
                    v87 = 2 * v86 + 2;
                  }
                }
                v91 = &i[2 * v86];
                v92 = *v91;
                v93 = (*v88 >> 1) & 3 | *(_DWORD *)((*v88 & 0xFFFFFFFFFFFFFFF8) + 24);
                v94 = *(_DWORD *)((*v91 & 0xFFFFFFFFFFFFFFF8) + 24) | (*v91 >> 1) & 3;
                if (v93 >= v94)
                {
                  if (v94 < v93)
                  {
                    v95 = v91[1];
                    v96 = v88[1];
LABEL_132:
                    *v91 = *v88;
                    v91[1] = v96;
                    if (v84 >= v87)
                    {
                      while (1)
                      {
                        v98 = 2 * v87;
                        v87 = (2 * v87) | 1;
                        v97 = &i[2 * v87];
                        v99 = v98 + 2;
                        if (v99 < v11)
                        {
                          v100 = (*v97 >> 1) & 3 | *(_DWORD *)((*v97 & 0xFFFFFFFFFFFFFFF8) + 24);
                          v101 = *(_DWORD *)((v97[2] & 0xFFFFFFFFFFFFFFF8) + 24) | (v97[2] >> 1) & 3;
                          if (v100 < v101 || v101 >= v100 && i[2 * v87 + 1] < (unint64_t)v97[3])
                          {
                            v97 += 2;
                            v87 = v99;
                          }
                        }
                        v102 = (*v97 >> 1) & 3 | *(_DWORD *)((*v97 & 0xFFFFFFFFFFFFFFF8) + 24);
                        if (v102 < v94)
                          break;
                        v103 = v97[1];
                        if (v94 >= v102 && v103 < v95)
                          break;
                        *v88 = *v97;
                        v88[1] = v103;
                        v88 = v97;
                        if (v84 < v87)
                          goto LABEL_134;
                      }
                    }
                    v97 = v88;
LABEL_134:
                    *v97 = v92;
                    v97[1] = v95;
                    goto LABEL_135;
                  }
                  v96 = v88[1];
                  v95 = i[2 * v86 + 1];
                  if (v96 >= v95)
                    goto LABEL_132;
                }
              }
LABEL_135:
              v85 = v86 - 1;
              if (!v86)
              {
                while (1)
                {
                  v105 = 0;
                  v106 = *i;
                  v107 = i[1];
                  v108 = v11 - 2;
                  if (v11 < 2)
                    v108 = v11 - 1;
                  v109 = v108 >> 1;
                  v110 = i;
                  do
                  {
                    v111 = v110;
                    v112 = v105 + 1;
                    v110 += 2 * v105 + 2;
                    v113 = 2 * v105;
                    result = (2 * v105) | 1;
                    v105 = result;
                    v114 = v113 + 2;
                    if (v114 < v11)
                    {
                      result = (uint64_t)(v110 + 2);
                      v115 = (*v110 >> 1) & 3 | *(_DWORD *)((*v110 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v116 = *(_DWORD *)((v110[2] & 0xFFFFFFFFFFFFFFF8) + 24) | (v110[2] >> 1) & 3;
                      if (v115 < v116 || v116 >= v115 && v111[2 * v112 + 1] < (unint64_t)v110[3])
                      {
                        v110 += 2;
                        v105 = v114;
                      }
                    }
                    v117 = v110[1];
                    *v111 = *v110;
                    v111[1] = v117;
                  }
                  while (v105 <= v109);
                  if (v110 == a2 - 2)
                  {
                    *v110 = v106;
                    v110[1] = v107;
                  }
                  else
                  {
                    v118 = *(a2 - 1);
                    *v110 = *(a2 - 2);
                    v110[1] = v118;
                    *(a2 - 2) = v106;
                    *(a2 - 1) = v107;
                    v119 = (char *)v110 - (char *)i + 16;
                    if (v119 >= 17)
                    {
                      v120 = ((unint64_t)v119 >> 4) - 2;
                      v121 = v120 >> 1;
                      v122 = &i[2 * (v120 >> 1)];
                      v123 = *v110;
                      result = *v122;
                      v124 = (*v122 >> 1) & 3 | *(_DWORD *)((*v122 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v125 = *(_DWORD *)((*v110 & 0xFFFFFFFFFFFFFFF8) + 24) | (*v110 >> 1) & 3;
                      if (v124 < v125)
                      {
                        v126 = v110[1];
                        v127 = v122[1];
LABEL_166:
                        *v110 = result;
                        v110[1] = v127;
                        if (v120 >= 2)
                        {
                          while (1)
                          {
                            v129 = v121 - 1;
                            v121 = (v121 - 1) >> 1;
                            v128 = &i[2 * v121];
                            result = *v128;
                            v130 = (*v128 >> 1) & 3 | *(_DWORD *)((*v128 & 0xFFFFFFFFFFFFFFF8) + 24);
                            if (v130 >= v125)
                            {
                              if (v125 < v130)
                                break;
                              v131 = i[2 * v121 + 1];
                              if (v131 >= v126)
                                break;
                            }
                            else
                            {
                              v131 = v128[1];
                            }
                            *v122 = result;
                            v122[1] = v131;
                            v122 = &i[2 * v121];
                            if (v129 <= 1)
                              goto LABEL_173;
                          }
                        }
                        v128 = v122;
LABEL_173:
                        *v128 = v123;
                        v128[1] = v126;
                        goto LABEL_174;
                      }
                      if (v125 >= v124)
                      {
                        v127 = i[2 * v121 + 1];
                        v126 = v110[1];
                        if (v127 < v126)
                          goto LABEL_166;
                      }
                    }
                  }
LABEL_174:
                  a2 -= 2;
                  if (v11-- <= 2)
                    return result;
                }
              }
            }
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = &i[2 * ((unint64_t)v11 >> 1)];
          if ((unint64_t)v10 < 0x801)
          {
            result = (uint64_t)sub_1C524AC34(&v7[2 * ((unint64_t)v11 >> 1)], v7, a2 - 2);
          }
          else
          {
            sub_1C524AC34(v7, &v7[2 * ((unint64_t)v11 >> 1)], a2 - 2);
            sub_1C524AC34(v7 + 2, v13 - 2, a2 - 4);
            sub_1C524AC34(v7 + 4, &v7[2 * v12 + 2], a2 - 6);
            result = (uint64_t)sub_1C524AC34(v13 - 2, v13, &v7[2 * v12 + 2]);
            v14 = *v7;
            v15 = v7[1];
            v16 = v13[1];
            *v7 = *v13;
            v7[1] = v16;
            *v13 = v14;
            v13[1] = v15;
          }
          --a3;
          v17 = *v7;
          if ((a4 & 1) == 0)
          {
            v20 = (*(v7 - 2) >> 1) & 3 | *(_DWORD *)((*(v7 - 2) & 0xFFFFFFFFFFFFFFF8) + 24);
            v18 = v17 & 0xFFFFFFFFFFFFFFF8;
            v19 = (v17 >> 1) & 3;
            v21 = *(_DWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 24) | v19;
            if (v20 < v21)
              goto LABEL_14;
            if (v21 < v20)
            {
              v22 = v7[1];
            }
            else
            {
              v22 = v7[1];
              if (*(v7 - 1) < v22)
                goto LABEL_14;
            }
            v44 = *v8;
            v45 = (*v8 >> 1) & 3 | *(_DWORD *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 24);
            if (v21 >= v45 && (v45 < v21 || v22 >= *(a2 - 1)))
            {
              for (i = v7 + 2; i < a2; i += 2)
              {
                v60 = (*i >> 1) & 3 | *(_DWORD *)((*i & 0xFFFFFFFFFFFFFFF8) + 24);
                if (v21 < v60 || v60 >= v21 && v22 < i[1])
                  break;
              }
            }
            else
            {
              i = v7;
              do
              {
                v46 = i[2];
                i += 2;
                v47 = (v46 >> 1) & 3 | *(_DWORD *)((v46 & 0xFFFFFFFFFFFFFFF8) + 24);
              }
              while (v21 >= v47 && (v47 < v21 || v22 >= i[1]));
            }
            j = a2;
            if (i < a2)
            {
              for (j = a2 - 2; ; j -= 2)
              {
                v49 = (v44 >> 1) & 3 | *(_DWORD *)((v44 & 0xFFFFFFFFFFFFFFF8) + 24);
                if (v21 >= v49 && (v49 < v21 || v22 >= j[1]))
                  break;
                v50 = *(j - 2);
                v44 = v50;
              }
            }
            if (i < j)
            {
              v51 = *i;
              v52 = *j;
              do
              {
                *i = v52;
                *j = v51;
                v53 = i[2];
                i += 2;
                v51 = v53;
                v54 = *(i - 1);
                *(i - 1) = j[1];
                j[1] = v54;
                while (1)
                {
                  v55 = (v51 >> 1) & 3 | *(_DWORD *)((v51 & 0xFFFFFFFFFFFFFFF8) + 24);
                  if (v21 < v55 || v55 >= v21 && v22 < i[1])
                    break;
                  v56 = i[2];
                  i += 2;
                  v51 = v56;
                }
                do
                {
                  do
                  {
                    v57 = *(j - 2);
                    j -= 2;
                    v52 = v57;
                    v58 = (v57 >> 1) & 3 | *(_DWORD *)((v57 & 0xFFFFFFFFFFFFFFF8) + 24);
                  }
                  while (v21 < v58);
                }
                while (v58 >= v21 && v22 < j[1]);
              }
              while (i < j);
            }
            if (i - 2 != v7)
            {
              v59 = *(i - 1);
              *v7 = *(i - 2);
              v7[1] = v59;
            }
            a4 = 0;
            *(i - 2) = v17;
            *(i - 1) = v22;
            continue;
          }
          v18 = v17 & 0xFFFFFFFFFFFFFFF8;
          v19 = (v17 >> 1) & 3;
LABEL_14:
          v23 = 0;
          v24 = v7[1];
          v25 = v19 | *(_DWORD *)(v18 + 24);
          while (1)
          {
            v26 = v7[v23 + 2];
            v27 = (v26 >> 1) & 3 | *(_DWORD *)((v26 & 0xFFFFFFFFFFFFFFF8) + 24);
            if (v27 >= v25 && (v25 < v27 || v7[v23 + 3] >= v24))
              break;
            v23 += 2;
          }
          v28 = (unint64_t)&v7[v23 + 2];
          if (v23 * 8)
          {
            v29 = (*v8 >> 1) & 3 | *(_DWORD *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 24);
            for (k = a2 - 2; v29 >= v25 && (v25 < v29 || k[1] >= v24); k -= 2)
            {
              v31 = *(k - 2);
              v29 = (v31 >> 1) & 3 | *(_DWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 24);
            }
          }
          else
          {
            k = a2;
            if (v28 < (unint64_t)a2)
            {
              v32 = (*v8 >> 1) & 3 | *(_DWORD *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 24);
              k = a2 - 2;
              if (v32 >= v25)
              {
                k = a2 - 2;
                do
                {
                  if (v25 >= v32)
                  {
                    if (v28 >= (unint64_t)k || k[1] < v24)
                      break;
                  }
                  else if (v28 >= (unint64_t)k)
                  {
                    break;
                  }
                  v33 = *(k - 2);
                  k -= 2;
                  v32 = (v33 >> 1) & 3 | *(_DWORD *)((v33 & 0xFFFFFFFFFFFFFFF8) + 24);
                }
                while (v32 >= v25);
              }
            }
          }
          if (v28 >= (unint64_t)k)
          {
            i = (uint64_t *)v28;
          }
          else
          {
            v34 = *k;
            i = (uint64_t *)v28;
            v35 = k;
            do
            {
              v36 = i[1];
              v37 = v35[1];
              *i = v34;
              i[1] = v37;
              *v35 = v26;
              v35[1] = v36;
              do
              {
                do
                {
                  v38 = i[2];
                  i += 2;
                  v26 = v38;
                  v39 = (v38 >> 1) & 3 | *(_DWORD *)((v38 & 0xFFFFFFFFFFFFFFF8) + 24);
                }
                while (v39 < v25);
              }
              while (v25 >= v39 && i[1] < v24);
              do
              {
                v40 = *(v35 - 2);
                v35 -= 2;
                v34 = v40;
                v41 = (v40 >> 1) & 3 | *(_DWORD *)((v40 & 0xFFFFFFFFFFFFFFF8) + 24);
              }
              while (v41 >= v25 && (v25 < v41 || v35[1] >= v24));
            }
            while (i < v35);
          }
          if (i - 2 != v7)
          {
            v42 = *(i - 1);
            *v7 = *(i - 2);
            v7[1] = v42;
          }
          *(i - 2) = v17;
          *(i - 1) = v24;
          if (v28 < (unint64_t)k)
          {
LABEL_51:
            result = sub_1C524A0AC(v7, i - 2, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          v43 = sub_1C524ADC4(v7, i - 2);
          result = sub_1C524ADC4(i, a2);
          if (!(_DWORD)result)
          {
            if (v43)
              continue;
            goto LABEL_51;
          }
          a2 = i - 2;
          if (v43)
            return result;
          goto LABEL_2;
        }
        v67 = i + 2;
        v69 = i == a2 || v67 == a2;
        if ((a4 & 1) == 0)
        {
          if (v69)
            return result;
          for (m = i + 1; ; m += 2)
          {
            v134 = v7;
            v7 = v67;
            v135 = *v134;
            v136 = v134[2];
            v137 = (v136 >> 1) & 3 | *(_DWORD *)((v136 & 0xFFFFFFFFFFFFFFF8) + 24);
            v138 = *(_DWORD *)((*v134 & 0xFFFFFFFFFFFFFFF8) + 24) | (*v134 >> 1) & 3;
            if (v137 < v138)
              break;
            if (v138 >= v137)
            {
              v139 = v134[3];
              if (v139 < v134[1])
                goto LABEL_186;
            }
LABEL_192:
            v67 = v7 + 2;
            if (v7 + 2 == a2)
              return result;
          }
          v139 = v134[3];
LABEL_186:
          for (n = m; ; n -= 2)
          {
            v141 = *n;
            n[1] = v135;
            n[2] = v141;
            v135 = *(n - 3);
            v142 = (v135 >> 1) & 3 | *(_DWORD *)((v135 & 0xFFFFFFFFFFFFFFF8) + 24);
            if (v137 >= v142 && (v142 < v137 || v139 >= *(n - 2)))
              break;
          }
          *(n - 1) = v136;
          *n = v139;
          goto LABEL_192;
        }
        if (v69)
          return result;
        v70 = 0;
        v71 = i;
        do
        {
          v72 = v71;
          v71 = v67;
          v73 = v72[2];
          v74 = (v73 >> 1) & 3 | *(_DWORD *)((v73 & 0xFFFFFFFFFFFFFFF8) + 24);
          v75 = *(_DWORD *)((*v72 & 0xFFFFFFFFFFFFFFF8) + 24) | (*v72 >> 1) & 3;
          if (v74 >= v75)
          {
            if (v75 < v74)
              goto LABEL_118;
            v76 = v72[3];
            v77 = v72[1];
            if (v76 >= v77)
              goto LABEL_118;
          }
          else
          {
            v76 = v72[3];
            v77 = v72[1];
          }
          v72[2] = *v72;
          v71[1] = v77;
          v78 = i;
          if (v72 == i)
            goto LABEL_117;
          v79 = v70;
          while (1)
          {
            v80 = *(uint64_t *)((char *)i + v79 - 16);
            result = (v80 >> 1) & 3;
            v81 = result | *(_DWORD *)((v80 & 0xFFFFFFFFFFFFFFF8) + 24);
            if (v74 >= v81)
              break;
            v82 = *(uint64_t *)((char *)i + v79 - 8);
LABEL_114:
            v72 -= 2;
            v83 = (uint64_t *)((char *)i + v79);
            *v83 = v80;
            v83[1] = v82;
            v79 -= 16;
            if (!v79)
            {
              v78 = i;
              goto LABEL_117;
            }
          }
          if (v81 >= v74)
          {
            v78 = (uint64_t *)((char *)i + v79);
            v82 = *(uint64_t *)((char *)i + v79 - 8);
            if (v76 >= v82)
              goto LABEL_117;
            goto LABEL_114;
          }
          v78 = v72;
LABEL_117:
          *v78 = v73;
          v78[1] = v76;
LABEL_118:
          v67 = v71 + 2;
          v70 += 16;
        }
        while (v71 + 2 != a2);
        return result;
    }
  }
}

uint64_t *sub_1C524AC34(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;

  v3 = *result;
  v4 = *a2;
  v5 = (*a2 >> 1) & 3 | *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v6 = *(_DWORD *)((*result & 0xFFFFFFFFFFFFFFF8) + 24) | (*result >> 1) & 3;
  if (v5 >= v6 && (v6 < v5 || a2[1] >= (unint64_t)result[1]))
  {
    v10 = (*a3 >> 1) & 3 | *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24);
    if (v10 >= v5)
    {
      if (v5 < v10)
        return result;
      v12 = a3[1];
      v11 = a2[1];
      if (v12 >= v11)
        return result;
    }
    else
    {
      v11 = a2[1];
      v12 = a3[1];
    }
    *a2 = *a3;
    a2[1] = v12;
    *a3 = v4;
    a3[1] = v11;
    v13 = *result;
    v14 = (*a2 >> 1) & 3 | *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24);
    v15 = *(_DWORD *)((*result & 0xFFFFFFFFFFFFFFF8) + 24) | (*result >> 1) & 3;
    if (v14 >= v15)
    {
      if (v15 < v14)
        return result;
      v17 = a2[1];
      v16 = result[1];
      if (v17 >= v16)
        return result;
    }
    else
    {
      v16 = result[1];
      v17 = a2[1];
    }
    *result = *a2;
    result[1] = v17;
    *a2 = v13;
    a2[1] = v16;
    return result;
  }
  v7 = (*a3 >> 1) & 3 | *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v7 < v5)
  {
    v8 = a3[1];
LABEL_6:
    v9 = result[1];
    *result = *a3;
    result[1] = v8;
    *a3 = v3;
    a3[1] = v9;
    return result;
  }
  if (v5 >= v7)
  {
    v8 = a3[1];
    v18 = a2[1];
    if (v8 < v18)
      goto LABEL_6;
  }
  else
  {
    v18 = a2[1];
  }
  v19 = result[1];
  *result = v4;
  result[1] = v18;
  *a2 = v3;
  a2[1] = v19;
  v20 = (*a3 >> 1) & 3 | *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v20 < v6)
  {
    v21 = a3[1];
LABEL_24:
    *a2 = *a3;
    a2[1] = v21;
    *a3 = v3;
    a3[1] = v19;
    return result;
  }
  if (v6 >= v20)
  {
    v21 = a3[1];
    if (v21 < v19)
      goto LABEL_24;
  }
  return result;
}

BOOL sub_1C524ADC4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *a1;
      v7 = *(a2 - 2);
      v8 = (v7 >> 1) & 3 | *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 24);
      v9 = *(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a1 >> 1) & 3;
      if (v8 < v9)
      {
        v10 = a1[1];
        v11 = *(a2 - 1);
LABEL_30:
        *a1 = v7;
        a1[1] = v11;
        *(a2 - 2) = v6;
        *(a2 - 1) = v10;
        return result;
      }
      if (v9 >= v8)
      {
        v11 = *(a2 - 1);
        v10 = a1[1];
        if (v11 < v10)
          goto LABEL_30;
      }
      return result;
    case 3:
      sub_1C524AC34(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_1C524B000(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_1C524B148(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v12 = a1 + 4;
      sub_1C524AC34(a1, a1 + 2, a1 + 4);
      v13 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
LABEL_6:
  v16 = *v13;
  v17 = (*v13 >> 1) & 3 | *(_DWORD *)((*v13 & 0xFFFFFFFFFFFFFFF8) + 24);
  v18 = *(_DWORD *)((*v12 & 0xFFFFFFFFFFFFFFF8) + 24) | (*v12 >> 1) & 3;
  if (v17 >= v18)
  {
    if (v18 < v17)
      goto LABEL_21;
    v19 = v13[1];
    v20 = v12[1];
    if (v19 >= v20)
      goto LABEL_21;
  }
  else
  {
    v19 = v13[1];
    v20 = v12[1];
  }
  *v13 = *v12;
  v13[1] = v20;
  v21 = a1;
  if (v12 == a1)
    goto LABEL_20;
  v22 = v14;
  while (1)
  {
    v23 = (char *)a1 + v22;
    v24 = *(uint64_t *)((char *)a1 + v22 + 16);
    v25 = (v24 >> 1) & 3 | *(_DWORD *)((v24 & 0xFFFFFFFFFFFFFFF8) + 24);
    if (v17 >= v25)
    {
      if (v25 < v17)
      {
        v21 = (uint64_t *)((char *)a1 + v22 + 32);
        goto LABEL_20;
      }
      v26 = *(uint64_t *)((char *)a1 + v22 + 24);
      if (v19 >= v26)
      {
        v21 = v12;
LABEL_20:
        *v21 = v16;
        v21[1] = v19;
        if (++v15 == 8)
          return v13 + 2 == a2;
LABEL_21:
        v12 = v13;
        v14 += 16;
        v13 += 2;
        if (v13 == a2)
          return 1;
        goto LABEL_6;
      }
    }
    else
    {
      v26 = *((_QWORD *)v23 + 3);
    }
    v12 -= 2;
    *((_QWORD *)v23 + 4) = v24;
    *(uint64_t *)((char *)a1 + v22 + 40) = v26;
    v22 -= 16;
    if (v22 == -32)
    {
      v21 = a1;
      goto LABEL_20;
    }
  }
}

uint64_t *sub_1C524B000(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;

  result = sub_1C524AC34(a1, a2, a3);
  v9 = *a3;
  v10 = (*a4 >> 1) & 3 | *(_DWORD *)((*a4 & 0xFFFFFFFFFFFFFFF8) + 24);
  v11 = *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a3 >> 1) & 3;
  if (v10 >= v11)
  {
    if (v11 < v10)
      return result;
    v13 = a4[1];
    v12 = a3[1];
    if (v13 >= v12)
      return result;
  }
  else
  {
    v12 = a3[1];
    v13 = a4[1];
  }
  *a3 = *a4;
  a3[1] = v13;
  *a4 = v9;
  a4[1] = v12;
  v14 = *a2;
  v15 = (*a3 >> 1) & 3 | *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24);
  v16 = *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a2 >> 1) & 3;
  if (v15 >= v16)
  {
    if (v16 < v15)
      return result;
    v18 = a3[1];
    v17 = a2[1];
    if (v18 >= v17)
      return result;
  }
  else
  {
    v17 = a2[1];
    v18 = a3[1];
  }
  *a2 = *a3;
  a2[1] = v18;
  *a3 = v14;
  a3[1] = v17;
  v19 = *a1;
  v20 = (*a2 >> 1) & 3 | *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v21 = *(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a1 >> 1) & 3;
  if (v20 < v21)
  {
    v22 = a1[1];
    v23 = a2[1];
LABEL_15:
    *a1 = *a2;
    a1[1] = v23;
    *a2 = v19;
    a2[1] = v22;
    return result;
  }
  if (v21 >= v20)
  {
    v23 = a2[1];
    v22 = a1[1];
    if (v23 < v22)
      goto LABEL_15;
  }
  return result;
}

uint64_t *sub_1C524B148(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *result;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;

  result = sub_1C524B000(a1, a2, a3, a4);
  v11 = *a4;
  v12 = (*a5 >> 1) & 3 | *(_DWORD *)((*a5 & 0xFFFFFFFFFFFFFFF8) + 24);
  v13 = *(_DWORD *)((*a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a4 >> 1) & 3;
  if (v12 >= v13)
  {
    if (v13 < v12)
      return result;
    v15 = a5[1];
    v14 = a4[1];
    if (v15 >= v14)
      return result;
  }
  else
  {
    v14 = a4[1];
    v15 = a5[1];
  }
  *a4 = *a5;
  a4[1] = v15;
  *a5 = v11;
  a5[1] = v14;
  v16 = *a3;
  v17 = (*a4 >> 1) & 3 | *(_DWORD *)((*a4 & 0xFFFFFFFFFFFFFFF8) + 24);
  v18 = *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a3 >> 1) & 3;
  if (v17 >= v18)
  {
    if (v18 < v17)
      return result;
    v20 = a4[1];
    v19 = a3[1];
    if (v20 >= v19)
      return result;
  }
  else
  {
    v19 = a3[1];
    v20 = a4[1];
  }
  *a3 = *a4;
  a3[1] = v20;
  *a4 = v16;
  a4[1] = v19;
  v21 = *a2;
  v22 = (*a3 >> 1) & 3 | *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24);
  v23 = *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a2 >> 1) & 3;
  if (v22 >= v23)
  {
    if (v23 < v22)
      return result;
    v25 = a3[1];
    v24 = a2[1];
    if (v25 >= v24)
      return result;
  }
  else
  {
    v24 = a2[1];
    v25 = a3[1];
  }
  *a2 = *a3;
  a2[1] = v25;
  *a3 = v21;
  a3[1] = v24;
  v26 = *a1;
  v27 = (*a2 >> 1) & 3 | *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v28 = *(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a1 >> 1) & 3;
  if (v27 < v28)
  {
    v29 = a1[1];
    v30 = a2[1];
LABEL_9:
    *a1 = *a2;
    a1[1] = v30;
    *a2 = v26;
    a2[1] = v29;
    return result;
  }
  if (v28 >= v27)
  {
    v30 = a2[1];
    v29 = a1[1];
    if (v30 < v29)
      goto LABEL_9;
  }
  return result;
}

uint64_t sub_1C524B2F8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *((_DWORD *)a1 + 2);
  v3 = *((_DWORD *)a2 + 2);
  v4 = v2 > v3;
  if (v2 != v3)
  {
LABEL_7:
    if (v4)
      return 0xFFFFFFFFLL;
    else
      return 1;
  }
  if (a1[12] == a2[12])
  {
    v5 = ((*(_QWORD *)(*(_QWORD *)a1 + 96) - *(_QWORD *)(*(_QWORD *)a1 + 88)) >> 3)
       + ((*(_QWORD *)(*(_QWORD *)a1 + 72) - *(_QWORD *)(*(_QWORD *)a1 + 64)) >> 3);
    v6 = ((*(_QWORD *)(*(_QWORD *)a2 + 96) - *(_QWORD *)(*(_QWORD *)a2 + 88)) >> 3)
       + ((*(_QWORD *)(*(_QWORD *)a2 + 72) - *(_QWORD *)(*(_QWORD *)a2 + 64)) >> 3);
    v4 = v5 > v6;
    if (v5 == v6)
    {
      if (*(_DWORD *)(*(_QWORD *)a1 + 24) < *(_DWORD *)(*(_QWORD *)a2 + 24))
        return 0xFFFFFFFFLL;
      else
        return 1;
    }
    goto LABEL_7;
  }
  if (a1[12])
    return 0xFFFFFFFFLL;
  else
    return 1;
}

uint64_t sub_1C524B394(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  result = sub_1C524B58C(a1, *(uint64_t **)(a1 + 744), *(unsigned int *)(a1 + 752));
  v3 = *(unsigned int *)(a1 + 752);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 8 * v3;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 744) + v4);
      if (v6)
      {
        v7 = *(unsigned int *)(a1 + 672);
        if (v7 >= *(unsigned int *)(a1 + 676))
        {
          result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 664, a1 + 680, v7 + 1, 8);
          v7 = *(unsigned int *)(a1 + 672);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 664) + 8 * v7) = v6;
        ++*(_DWORD *)(a1 + 672);
      }
      v4 += 8;
    }
    while (v5 != v4);
  }
  *(_DWORD *)(a1 + 752) = 0;
  return result;
}

void sub_1C524B444(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  const llvm::LiveRange *v11;
  unsigned int *v12;
  unsigned int v13;
  void **v14;
  uint64_t v15;

  v2 = *(_DWORD *)(a1 + 1056);
  v3 = *(_QWORD *)(a1 + 1048);
  v4 = *(unsigned int *)(a1 + 1064);
  v5 = (unsigned int *)(v3 + 4 * v4);
  if (v2)
  {
    if ((_DWORD)v4)
    {
      v6 = 4 * v4;
      v7 = *(unsigned int **)(a1 + 1048);
      while (*v7 >= 0xFFFFFFFE)
      {
        ++v7;
        v6 -= 4;
        if (!v6)
          goto LABEL_6;
      }
    }
    else
    {
      v7 = *(unsigned int **)(a1 + 1048);
    }
  }
  else
  {
LABEL_6:
    v7 = (unsigned int *)(v3 + 4 * v4);
  }
  v8 = (unsigned int *)(v3 + 4 * v4);
  if (v7 != v8)
  {
    do
    {
      v9 = *(_QWORD *)(a1 + 288);
      v10 = *v7 & 0x7FFFFFFF;
      if (v10 < *(_DWORD *)(v9 + 416))
      {
        v11 = *(const llvm::LiveRange **)(*(_QWORD *)(v9 + 408) + 8 * v10);
        if (v11)
        {
          sub_1C5251D74(a1, v11, a1 + 920);
          if (*(_DWORD *)(a1 + 928))
            sub_1C5251E14(a1);
        }
      }
      v12 = v7 + 1;
      while (v12 != v5)
      {
        v13 = *v12++;
        if (v13 <= 0xFFFFFFFD)
        {
          v7 = v12 - 1;
          goto LABEL_18;
        }
      }
      v7 = v5;
LABEL_18:
      ;
    }
    while (v7 != v8);
    v2 = *(_DWORD *)(a1 + 1056);
  }
  if (v2 || *(_DWORD *)(a1 + 1060))
  {
    v14 = (void **)(a1 + 1048);
    v15 = *(unsigned int *)(a1 + 1064);
    if (v15 <= 4 * v2 || v15 < 0x41)
    {
      if ((_DWORD)v15)
        memset(*v14, 255, 4 * v15);
      *(_QWORD *)(a1 + 1056) = 0;
    }
    else
    {
      sub_1C4A068AC(v14);
    }
  }
}

uint64_t sub_1C524B58C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  __int16 v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  int v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  unsigned int v58;
  _QWORD *v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  BOOL v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unsigned int v75;
  _QWORD *v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  unint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  BOOL v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int16 v93;
  unint64_t v94;
  llvm::MachineInstr *v95;
  unint64_t v96;
  unsigned int v97;
  int v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  llvm::LiveInterval *v109;
  int v110;
  int v111;
  int v112;
  uint64_t v113;
  unint64_t v114;
  llvm::LiveInterval *v115;
  unsigned int v116;
  llvm::LiveInterval *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  BOOL v123;
  char v124;
  unsigned int v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  unsigned __int16 ***v141;
  unsigned int v142;
  uint64_t v143;
  int v144;
  unint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  unint64_t v155;
  unsigned int v156;
  _QWORD *v157;
  uint64_t v158;
  unsigned int v159;
  unsigned int v160;
  _QWORD *v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  BOOL v165;
  unint64_t v166;
  unsigned int v167;
  unint64_t v168;
  unsigned int *v169;
  uint64_t v170;
  uint64_t *v171;
  _QWORD *v172;
  unsigned int v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  BOOL v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int v185;
  unsigned int v186;
  _QWORD *v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  BOOL v191;
  unint64_t v192;
  _QWORD *v193;
  unsigned int v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t v197;
  _DWORD *v198;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int v203;
  uint64_t v204;
  uint64_t v205;
  unsigned int v206;
  unint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  unsigned int v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  BOOL v214;
  unint64_t v215;
  _DWORD *v216;
  uint64_t v217;
  unsigned int **v218;
  uint64_t v219;
  _QWORD *v220;
  unint64_t v221;
  _WORD *v222;
  unsigned __int16 v223;
  unsigned int v224;
  uint64_t v225;
  uint64_t v226;
  unsigned __int16 *v227;
  unsigned int v228;
  unsigned int v229;
  uint64_t v230;
  llvm::LiveRange *v231;
  unsigned int *v232;
  unsigned int v233;
  _QWORD *v234;
  uint64_t v235;
  unsigned int v236;
  unint64_t v237;
  __int16 v238;
  unint64_t v239;
  unint64_t v240;
  unsigned int v241;
  int v242;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t *v248;
  uint64_t v249;
  int v250;
  int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  unsigned int v256;
  uint64_t v257;
  unsigned int v258;
  _QWORD *v259;
  uint64_t v260;
  unsigned int v261;
  unsigned int v262;
  _QWORD *v263;
  unint64_t v264;
  unint64_t v265;
  uint64_t v266;
  BOOL v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  _QWORD *v274;
  unint64_t *v275;
  uint64_t v276;
  uint64_t v277;
  _QWORD *v278;
  _QWORD *v279;
  uint64_t v280;
  unint64_t v281;
  int v282;
  unsigned int v283;
  unsigned int v284;
  _QWORD *v285;
  unint64_t v286;
  _QWORD *v287;
  unint64_t v288;
  uint64_t v289;
  BOOL v290;
  unint64_t v291;
  uint64_t v292;
  unsigned int v293;
  unsigned int v294;
  _QWORD *v295;
  unint64_t v296;
  _QWORD *v297;
  unint64_t v298;
  uint64_t v299;
  BOOL v300;
  unint64_t v301;
  int v302;
  uint64_t v303;
  unsigned int v304;
  _QWORD *v305;
  unint64_t v306;
  uint64_t v307;
  BOOL v308;
  unint64_t v309;
  uint64_t v310;
  int v311;
  unsigned int v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unsigned int v316;
  uint64_t v317;
  uint64_t v318;
  unsigned int v319;
  unsigned int v320;
  _QWORD *v321;
  unint64_t v322;
  unint64_t v323;
  uint64_t v324;
  BOOL v325;
  unint64_t v326;
  uint64_t v327;
  _QWORD *v328;
  uint64_t v329;
  uint64_t *v330;
  uint64_t v331;
  uint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t *v337;
  _QWORD *v338;
  uint64_t v339;
  uint64_t v340;
  _BYTE *v341;
  unint64_t v342;
  uint64_t v344;
  unint64_t v345;
  unsigned int v346;
  _QWORD *v347;
  uint64_t v348;
  unsigned int v349;
  unsigned int v350;
  _QWORD *v351;
  unint64_t v352;
  unint64_t v353;
  uint64_t v354;
  BOOL v355;
  unint64_t v356;
  _QWORD *v357;
  unsigned int v358;
  unsigned int v359;
  uint64_t v360;
  uint64_t v361;
  int v362;
  llvm::LiveInterval *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  int v367;
  int v369;
  int v370;
  _QWORD *v371;
  int v372;
  uint64_t v373;
  int v374;
  unsigned int v375;
  int v376;
  _DWORD *v377;
  uint64_t v378;
  int *v379;
  uint64_t v380;
  int v381;
  int v382;
  _QWORD *v383;
  int v384;
  uint64_t v385;
  int v386;
  unsigned int v387;
  int v388;
  _DWORD *v389;
  uint64_t v390;
  int *v391;
  uint64_t v392;
  int v393;
  uint64_t v394;
  uint64_t v395;
  int *v396;
  int *v397;
  int *v398;
  void **v399;
  uint64_t v400;
  char *v401;
  uint64_t v402;
  _QWORD *v403;
  uint64_t v404;
  int v405;
  _DWORD *v406;
  unsigned int v407;
  unsigned int v408;
  unsigned int v409;
  int *v410;
  int v411;
  int v412;
  unsigned int v413;
  uint64_t v414;
  unsigned int v415;
  unsigned int v416;
  _QWORD *v417;
  unint64_t v418;
  unint64_t v419;
  uint64_t v420;
  BOOL v421;
  unint64_t v422;
  int v423;
  unint64_t v424;
  uint64_t *v425;
  unint64_t v426;
  int v427;
  uint64_t v428;
  uint64_t v429;
  int *v430;
  int v431;
  uint64_t *v432;
  uint64_t v433;
  uint64_t v434;
  _DWORD *v435;
  int v436;
  uint64_t v437;
  uint64_t v438;
  unint64_t *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  unint64_t v443;
  unint64_t v444;
  uint64_t *v445;
  uint64_t v446;
  __int16 v447;
  unint64_t v448;
  uint64_t v449;
  uint64_t v450;
  unint64_t v451;
  unsigned int v452;
  int v453;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t *v458;
  uint64_t v459;
  int v460;
  int v461;
  uint64_t v462;
  __int16 v463;
  unint64_t v464;
  unint64_t v465;
  unsigned int v466;
  int v467;
  uint64_t v469;
  uint64_t *v470;
  uint64_t v471;
  int v472;
  int v473;
  unint64_t v474;
  unint64_t v475;
  BOOL isConstantPhysReg;
  _QWORD *v477;
  _QWORD *v478;
  unint64_t v479;
  unint64_t v480;
  uint64_t v481;
  unint64_t v482;
  uint64_t v483;
  uint64_t v484;
  _QWORD *v485;
  unint64_t v486;
  _WORD *v487;
  unsigned __int16 *v488;
  __int16 v489;
  unsigned __int16 v490;
  llvm::LiveRange *v491;
  uint64_t v492;
  int v493;
  llvm::MachineInstr *v494;
  uint64_t v495;
  int v496;
  int v497;
  int v498;
  int v499;
  unint64_t v500;
  llvm::LiveInterval *v501;
  int v502;
  uint64_t v503;
  uint64_t v504;
  __int16 v505;
  unint64_t v506;
  uint64_t v507;
  unsigned int v508;
  int v509;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t *v514;
  uint64_t v515;
  int v516;
  int v517;
  unint64_t v518;
  unsigned int v519;
  uint64_t *v520;
  uint64_t v521;
  unsigned int v522;
  unsigned int v523;
  uint64_t *v524;
  unint64_t v525;
  unint64_t v526;
  uint64_t v527;
  BOOL v528;
  unint64_t v529;
  int v530;
  uint64_t v531;
  unsigned int v532;
  _QWORD *v533;
  uint64_t v534;
  unsigned int v535;
  unsigned int v536;
  _QWORD *v537;
  unint64_t v538;
  unint64_t v539;
  uint64_t v540;
  BOOL v541;
  unint64_t v542;
  unint64_t v543;
  uint64_t v544;
  _DWORD *v545;
  uint64_t v546;
  unsigned int v547;
  unint64_t v548;
  uint64_t v549;
  _DWORD *v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  int v554;
  int v556;
  unsigned int v557;
  uint64_t *v558;
  uint64_t v559;
  unsigned int v560;
  unsigned int v561;
  uint64_t *v562;
  unint64_t v563;
  unint64_t v564;
  uint64_t v565;
  BOOL v566;
  unint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  int v571;
  int v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  int v577;
  int v579;
  uint64_t v580;
  void *v581;
  uint64_t v582;
  unsigned int v583;
  int v584;
  uint64_t v585;
  int v586;
  unsigned int v587;
  int v588;
  int v589;
  unsigned int v590;
  uint64_t v591;
  unint64_t v592;
  llvm::LiveInterval *v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  void *v600;
  uint64_t v601;
  uint64_t v602;
  void *v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  int v607;
  int v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  int v613;
  int v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  int v619;
  int v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  int v625;
  int v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  int v631;
  int v633;
  _QWORD *v634;
  _QWORD *v635;
  _QWORD *v636;
  uint64_t v637;
  void *v638;
  void *v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  int v644;
  int v646;
  unint64_t v647;
  unsigned int v648;
  unint64_t v649;
  unint64_t v650;
  uint64_t v651;
  uint64_t v653;
  int v654;
  int v655;
  int v656;
  int v657;
  unint64_t v658;
  uint64_t v659;
  llvm::MachineInstr *v660;
  int v661;
  _QWORD **v662;
  uint64_t v663;
  __int16 v664;
  unint64_t v665;
  llvm::MachineInstr *v666;
  unint64_t v667;
  unsigned int v668;
  int v669;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t *v674;
  uint64_t v675;
  int v676;
  int v677;
  unint64_t v678;
  unsigned int v679;
  uint64_t v680;
  uint64_t v681;
  unsigned int v682;
  unsigned int v683;
  _QWORD *v684;
  unint64_t v685;
  unint64_t v686;
  uint64_t v687;
  BOOL v688;
  unint64_t v689;
  uint64_t v690;
  unsigned int v691;
  uint64_t *v692;
  uint64_t v693;
  unsigned int v694;
  unsigned int v695;
  uint64_t *v696;
  unint64_t v697;
  unint64_t v698;
  uint64_t v699;
  BOOL v700;
  unint64_t v701;
  uint64_t v702;
  unint64_t v703;
  uint64_t v704;
  uint64_t RegisterDefOperandIdx;
  int v706;
  int v707;
  int v708;
  unint64_t v710;
  unsigned int v711;
  uint64_t v712;
  uint64_t v713;
  unsigned int v714;
  unsigned int v715;
  _QWORD *v716;
  unint64_t v717;
  unint64_t v718;
  uint64_t v719;
  BOOL v720;
  unint64_t v721;
  unint64_t v722;
  uint64_t v723;
  uint64_t *v724;
  _QWORD *v725;
  _QWORD *v726;
  uint64_t v727;
  _QWORD *v728;
  unsigned int v729;
  _QWORD *v730;
  _QWORD *v731;
  unsigned int v732;
  unsigned int v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t *v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  unsigned int v741;
  unint64_t v742;
  __int16 v743;
  unint64_t v744;
  uint64_t v745;
  unint64_t v746;
  unsigned int v747;
  int v748;
  uint64_t *v750;
  uint64_t v751;
  uint64_t v752;
  int v753;
  int v754;
  uint64_t v755;
  unint64_t v756;
  int v757;
  unsigned int v758;
  unsigned int v759;
  uint64_t v760;
  unint64_t v761;
  uint64_t *v762;
  uint64_t *v763;
  unint64_t v764;
  uint64_t v765;
  BOOL v766;
  unint64_t v767;
  int v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  int v772;
  int v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  unint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t *v784;
  _DWORD *v785;
  uint64_t v786;
  uint64_t v787;
  int v788;
  int v789;
  int v790;
  int v791;
  unint64_t v792;
  llvm::LiveInterval *v793;
  int v794;
  uint64_t v795;
  uint64_t v796;
  __int16 v797;
  unint64_t v798;
  uint64_t v799;
  unsigned int v800;
  int v801;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t *v806;
  uint64_t v807;
  int v808;
  int v809;
  unint64_t v810;
  unsigned int v811;
  _QWORD *v812;
  uint64_t v813;
  unsigned int v814;
  unsigned int v815;
  unint64_t v816;
  _QWORD *v817;
  unint64_t v818;
  unint64_t v819;
  uint64_t v820;
  BOOL v821;
  unint64_t v822;
  uint64_t v823;
  unint64_t v824;
  unint64_t v825;
  uint64_t v826;
  _QWORD *v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  __int16 v832;
  unint64_t v833;
  uint64_t v834;
  unint64_t v835;
  unsigned int v836;
  int v837;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t *v843;
  uint64_t v844;
  int v845;
  int v846;
  unint64_t v847;
  unsigned int v848;
  uint64_t *v849;
  uint64_t v850;
  unsigned int v851;
  unsigned int v852;
  uint64_t *v853;
  unint64_t v854;
  unint64_t v855;
  uint64_t v856;
  BOOL v857;
  unint64_t v858;
  uint64_t *v859;
  _DWORD *v860;
  unsigned int v861;
  uint64_t v862;
  uint64_t v863;
  unsigned int v864;
  unsigned int v865;
  _QWORD *v866;
  unint64_t v867;
  unint64_t v868;
  uint64_t v869;
  BOOL v870;
  unint64_t v871;
  uint64_t v872;
  _QWORD *j;
  unsigned int v874;
  _QWORD *v875;
  uint64_t v876;
  unsigned int v877;
  unsigned int v878;
  unint64_t v879;
  _QWORD *v880;
  unint64_t v881;
  unint64_t v882;
  uint64_t v883;
  BOOL v884;
  unint64_t v885;
  _QWORD *v886;
  uint64_t v887;
  unsigned int v888;
  _QWORD *v889;
  unint64_t v890;
  uint64_t v891;
  BOOL v892;
  unint64_t v893;
  uint64_t v894;
  _QWORD *v895;
  uint64_t *v896;
  uint64_t *v897;
  char v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  unsigned int v902;
  unint64_t v903;
  uint64_t v904;
  _QWORD *v905;
  unsigned int v906;
  unint64_t v907;
  unint64_t v908;
  uint64_t v909;
  BOOL v910;
  unint64_t v911;
  unint64_t v912;
  unint64_t v913;
  uint64_t v914;
  _DWORD *v915;
  uint64_t v916;
  uint64_t v917;
  unsigned int v918;
  uint64_t v919;
  unint64_t v920;
  unsigned int v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  void *v925;
  unsigned int v926;
  unint64_t *v927;
  unint64_t v928;
  unsigned int v929;
  unsigned int v930;
  unint64_t *v931;
  unint64_t v932;
  unint64_t v933;
  unint64_t v934;
  BOOL v935;
  unint64_t v936;
  unint64_t v937;
  char *v938;
  unint64_t v939;
  unint64_t v940;
  unsigned int v941;
  unint64_t v942;
  unsigned int v943;
  char *v944;
  char *v945;
  unint64_t v946;
  uint64_t v947;
  BOOL v948;
  unint64_t v949;
  uint64_t v950;
  uint64_t v951;
  unint64_t v952;
  unint64_t v953;
  unsigned int v954;
  unsigned int v955;
  unint64_t *v956;
  unint64_t v957;
  unint64_t v958;
  unint64_t v959;
  BOOL v960;
  unint64_t v961;
  unint64_t *v962;
  unint64_t v963;
  unint64_t v964;
  BOOL v965;
  unint64_t v966;
  void *v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  unsigned int v971;
  unint64_t v972;
  uint64_t v973;
  unsigned int v974;
  unint64_t *v975;
  unint64_t v976;
  unsigned int v977;
  unsigned int v978;
  unint64_t *v979;
  unint64_t v980;
  unint64_t v981;
  unint64_t v982;
  BOOL v983;
  unint64_t v984;
  uint64_t v985;
  unsigned int RegisterUseOperandIdx;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  int v991;
  int v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  int v997;
  int v999;
  uint64_t v1000;
  unsigned int v1001;
  _QWORD *v1002;
  uint64_t v1003;
  unsigned int v1004;
  unsigned int v1005;
  _QWORD *v1006;
  unint64_t v1007;
  unint64_t v1008;
  uint64_t v1009;
  BOOL v1010;
  unint64_t v1011;
  void *v1012;
  uint64_t v1013;
  void **v1014;
  void (**v1015)(void);
  uint64_t v1016;
  char *v1017;
  unint64_t v1018;
  uint64_t v1019;
  unint64_t v1020;
  BOOL v1021;
  unint64_t v1022;
  void *v1023;
  void *v1024;
  uint64_t v1025;
  int v1026;
  char *v1027;
  uint64_t v1028;
  unsigned int v1029;
  unsigned int v1030;
  char *v1031;
  unint64_t v1032;
  unint64_t v1033;
  uint64_t v1034;
  BOOL v1035;
  unint64_t v1036;
  char *v1037;
  uint64_t v1038;
  unint64_t v1039;
  unsigned int v1040;
  uint64_t v1042;
  int v1043;
  uint64_t v1044;
  int *v1045;
  int v1046;
  llvm::LiveInterval *v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  int v1051;
  int v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  int v1057;
  int v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  int v1063;
  int v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  int v1069;
  int v1071;
  int *v1072;
  unsigned int v1073;
  _QWORD *v1074;
  uint64_t v1075;
  unsigned int v1076;
  unsigned int v1077;
  _QWORD *v1078;
  unint64_t v1079;
  unint64_t v1080;
  uint64_t v1081;
  BOOL v1082;
  unint64_t v1083;
  int v1084;
  unsigned int v1085;
  int v1086;
  unsigned int v1087;
  unint64_t FirstTerminator;
  _QWORD *v1089;
  __int16 v1090;
  unint64_t v1091;
  unint64_t v1092;
  unint64_t v1093;
  unsigned int v1094;
  int v1095;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t *v1101;
  uint64_t v1102;
  int v1103;
  int v1104;
  uint64_t v1105;
  void *v1106;
  uint64_t v1107;
  _DWORD *v1108;
  int v1109;
  BOOL v1110;
  int v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t *v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  int v1120;
  llvm::MachineFunction *v1121;
  void *v1122;
  unint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  unint64_t v1128;
  int v1129;
  unint64_t v1130;
  uint64_t v1131;
  _QWORD *i;
  uint64_t v1133;
  _QWORD *v1134;
  uint64_t v1135;
  uint64_t v1136;
  unsigned int v1137;
  uint64_t v1138;
  uint64_t v1139;
  unsigned int v1140;
  unsigned int v1141;
  _QWORD *v1142;
  unint64_t v1143;
  unint64_t v1144;
  uint64_t v1145;
  BOOL v1146;
  unint64_t v1147;
  _QWORD *v1148;
  unsigned int v1149;
  unsigned int v1150;
  uint64_t v1151;
  uint64_t v1152;
  unint64_t *v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  unint64_t v1158;
  uint64_t v1159;
  unsigned int v1160;
  uint64_t v1161;
  uint64_t v1162;
  unsigned int v1163;
  unsigned int v1164;
  _QWORD *v1165;
  unint64_t v1166;
  unint64_t v1167;
  uint64_t v1168;
  BOOL v1169;
  unint64_t v1170;
  _QWORD *v1171;
  unsigned int v1172;
  unsigned int v1173;
  uint64_t v1174;
  int v1175;
  int v1176;
  _QWORD *v1177;
  char *v1178;
  uint64_t v1179;
  uint64_t v1180;
  unint64_t *v1181;
  uint64_t v1182;
  _QWORD *v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  unint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t *v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  unsigned int **v1197;
  unsigned int *v1198;
  unsigned int v1199;
  uint64_t v1200;
  _DWORD *v1201;
  int v1202;
  uint64_t v1203;
  unint64_t v1204;
  __int16 v1205;
  unint64_t v1206;
  unint64_t v1207;
  unsigned int v1208;
  int v1209;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t *v1215;
  uint64_t v1216;
  int v1217;
  int v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  unsigned int v1223;
  _QWORD *v1224;
  uint64_t v1225;
  unsigned int v1226;
  unsigned int v1227;
  _QWORD *v1228;
  unint64_t v1229;
  unint64_t v1230;
  uint64_t v1231;
  BOOL v1232;
  unint64_t v1233;
  unint64_t v1234;
  unsigned int v1235;
  unsigned int v1236;
  _QWORD *v1237;
  uint64_t v1238;
  unsigned int v1239;
  unsigned int v1240;
  _QWORD *v1241;
  unint64_t v1242;
  unint64_t v1243;
  uint64_t v1244;
  BOOL v1245;
  unint64_t v1246;
  llvm::LiveInterval *v1247;
  uint64_t v1248;
  uint64_t v1249;
  uint64_t v1250;
  int v1251;
  int v1253;
  llvm::LiveInterval *v1254;
  llvm::LiveInterval *v1255;
  uint64_t v1256;
  uint64_t v1257;
  uint64_t v1258;
  int v1259;
  int v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  int v1265;
  int v1267;
  uint64_t v1269;
  uint64_t v1270;
  int *v1271;
  void *v1272;
  uint64_t v1273;
  unsigned int v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t *v1277;
  uint64_t v1278;
  uint64_t v1279;
  unint64_t v1280;
  unint64_t v1281;
  uint64_t v1282;
  const llvm::LiveRange *v1283;
  unsigned int v1284;
  uint64_t *v1285;
  unsigned int v1286;
  _QWORD *v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t *v1290;
  uint64_t v1291;
  uint64_t v1292;
  unint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  uint64_t v1297;
  uint64_t v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t *v1301;
  _QWORD *v1302;
  uint64_t v1303;
  int v1304;
  int v1305;
  uint64_t *v1306;
  llvm::SmallPtrSetImplBase *v1307;
  llvm::MachineInstr *v1308;
  uint64_t v1309;
  _QWORD v1310[3];
  uint64_t v1311;
  int v1312;
  void *v1313;
  uint64_t v1314;
  uint64_t v1315;
  void *__src;
  uint64_t v1317;
  uint64_t v1318;
  void *v1319;
  uint64_t v1320;
  _BYTE v1321[32];
  void *v1322;
  uint64_t v1323;
  _BYTE v1324[64];
  void *v1325;
  uint64_t v1326;
  _QWORD v1327[7];
  void *v1328;
  uint64_t v1329;
  void *v1330;
  uint64_t v1331;
  void *v1332;
  uint64_t v1333;
  uint64_t v1334;
  void **v1335;
  int v1336;
  void *v1337;
  uint64_t v1338;
  void *v1339;
  uint64_t v1340;
  void *v1341;
  uint64_t v1342;
  _QWORD v1343[18];

  v1343[16] = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    LOBYTE(v5) = 0;
    return v5 & 1;
  }
  v3 = a2;
  v5 = 0;
  v6 = &a2[a3];
  v7 = a1 + 824;
  v1295 = a1 + 936;
  v1296 = a1 + 920;
  v1302 = (_QWORD *)(a1 + 648);
  v1303 = a1 + 1072;
  v1300 = a1 + 624;
  v1299 = a1 + 576;
  v1301 = (uint64_t *)(a1 + 312);
  v1297 = a1 + 1016;
  v1298 = a1 + 1000;
  v1306 = v6;
  v1307 = (llvm::SmallPtrSetImplBase *)(a1 + 824);
  do
  {
    if (!*v3)
      goto LABEL_1680;
    v8 = sub_1C477672C(v7, *v3);
    v9 = *(_QWORD *)(a1 + 832);
    if (v9 == *(_QWORD *)(a1 + 824))
      v10 = 844;
    else
      v10 = 840;
    if (v8 != (_QWORD *)(v9 + 8 * *(unsigned int *)(a1 + v10)))
      goto LABEL_1679;
    v11 = *v3;
    v1309 = *(_QWORD *)(a1 + 272);
    v1311 = 0;
    memset(v1310, 0, 19);
    v12 = llvm::CoalescerPair::setRegisters((llvm::CoalescerPair *)&v1309, (const llvm::MachineInstr *)v11);
    v13 = 0;
    if (!v12)
      goto LABEL_1678;
    v1308 = (llvm::MachineInstr *)v11;
    if (!v1311)
      goto LABEL_89;
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 24);
    v15 = *(_QWORD *)(v14 + 16 * (HIDWORD(v1310[0]) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
    v16 = *(_QWORD *)(v14 + 16 * (v1310[0] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
    v17 = HIDWORD(v1310[1]);
    if (BYTE2(v1310[2]))
    {
      v18 = HIDWORD(v1310[1]);
      v17 = LODWORD(v1310[1]);
      v16 = *(_QWORD *)(v14 + 16 * (HIDWORD(v1310[0]) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
      v15 = *(_QWORD *)(v14 + 16 * (v1310[0] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      v18 = LODWORD(v1310[1]);
    }
    if (!(*(unsigned int (**)(_QWORD, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(a1 + 272) + 520))(*(_QWORD *)(a1 + 272), v11, v15, v17, v16, v18))goto LABEL_1677;
    if (!v1311)
      goto LABEL_89;
    v19 = *(unsigned int *)(v11 + 40);
    if (!(_DWORD)v19)
    {
LABEL_23:
      v23 = *(unsigned int *)(a1 + 928);
      if (v23 >= *(unsigned int *)(a1 + 932))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v1296, v1295, v23 + 1, 8);
        v23 = *(unsigned int *)(a1 + 928);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 920) + 8 * v23) = v11;
      ++*(_DWORD *)(a1 + 928);
      sub_1C5251E14(a1);
      v13 = 1;
      goto LABEL_1678;
    }
    v20 = *(_DWORD **)(v11 + 32);
    v21 = 32 * v19;
    while (1)
    {
      v22 = (*v20 & 0x10000FF) != 0x1000000 || (*v20 & 0x5000000) == 83886080;
      if (!v22)
        break;
      v20 += 8;
      v21 -= 32;
      if (!v21)
        goto LABEL_23;
    }
    LODWORD(v1332) = 0;
    LODWORD(v1325) = 0;
    LODWORD(v1341) = 0;
    LODWORD(v1322) = 0;
    if (!sub_1C52471B4(*(_QWORD *)(a1 + 272), v11, &v1332, &v1325, (int *)&v1341, (int *)&v1322))
    {
LABEL_88:
      v6 = v1306;
      goto LABEL_89;
    }
    v25 = *(_WORD *)(v11 + 44);
    v26 = v11;
    if ((v25 & 4) != 0)
    {
      do
        v26 = *(_QWORD *)v26 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v26 + 44) & 4) != 0);
    }
    if ((v25 & 8) != 0)
    {
      do
        v11 = *(_QWORD *)(v11 + 8);
      while ((*(_WORD *)(v11 + 44) & 8) != 0);
    }
    v27 = *(_QWORD *)(v11 + 8);
    if (v26 != v27)
    {
      while (1)
      {
        v28 = **(unsigned __int16 **)(v26 + 16);
        v29 = v28 > 0x17;
        v30 = (1 << v28) & 0x83E000;
        if (v29 || v30 == 0)
          break;
        v26 = *(_QWORD *)(v26 + 8);
        if (v26 == v27)
        {
          v26 = *(_QWORD *)(v11 + 8);
          break;
        }
      }
    }
    v32 = *(_QWORD *)(a1 + 288);
    v33 = *(_QWORD *)(v32 + 288);
    v34 = *(_QWORD *)(v33 + 368);
    v35 = *(unsigned int *)(v33 + 384);
    if (!(_DWORD)v35)
      goto LABEL_42;
    LODWORD(v36) = ((v26 >> 4) ^ (v26 >> 9)) & (v35 - 1);
    v37 = (uint64_t *)(v34 + 16 * v36);
    v38 = *v37;
    if (v26 != *v37)
    {
      v39 = 1;
      while (v38 != -4096)
      {
        v40 = v36 + v39++;
        v36 = v40 & (v35 - 1);
        v38 = *(_QWORD *)(v34 + 16 * v36);
        if (v26 == v38)
        {
          v37 = (uint64_t *)(v34 + 16 * v36);
          goto LABEL_43;
        }
      }
LABEL_42:
      v37 = (uint64_t *)(v34 + 16 * v35);
    }
LABEL_43:
    v41 = v37[1];
    v42 = v1332 & 0x7FFFFFFF;
    if (v42 >= *(unsigned int *)(v32 + 416) || (v43 = *(_QWORD *)(*(_QWORD *)(v32 + 408) + 8 * v42)) == 0)
    {
      v43 = sub_1C4851220(*(_QWORD *)(a1 + 288), (int)v1332);
      v604 = *(_QWORD *)(v32 + 304);
      v605 = *(_QWORD *)(v32 + 248);
      *(_QWORD *)v604 = v605;
      *(_QWORD *)(v604 + 8) = *(_QWORD *)(v605 + 40);
      *(_OWORD *)(v604 + 16) = *(_OWORD *)(v32 + 288);
      *(_QWORD *)(v604 + 32) = v32 + 312;
      llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v604);
      *(_DWORD *)(v604 + 184) = 0;
      v606 = *(_QWORD *)(v32 + 256);
      v22 = *(_BYTE *)(v606 + 16) == 0;
      v607 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v606 + 24) + 16 * (*(_DWORD *)(v43 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                + 34);
      v609 = !v22 && v607 != 0;
      llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v32 + 304), (llvm::LiveInterval *)v43, v609);
      llvm::LiveIntervals::computeDeadValues(v32, v43, 0);
    }
    if ((_DWORD)v1341)
    {
      v44 = *(_QWORD *)(v43 + 104);
      if (v44)
      {
        v45 = v41 & 0xFFFFFFFFFFFFFFF8;
        v46 = (v41 >> 1) & 3;
        v11 = (uint64_t)v1308;
        while (1)
        {
          if ((*(_QWORD *)(v44 + 112) & *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 232)
                                                   + 8 * v1341)) == 0)
            goto LABEL_62;
          v47 = *(_DWORD *)(v44 + 8);
          v48 = *(_QWORD **)v44;
          if (!v47)
            break;
          v49 = v48[3 * v47 - 2];
          v50 = *(_DWORD *)(v45 + 24) | v46;
          v51 = (v49 >> 1) & 3 | *(_DWORD *)((v49 & 0xFFFFFFFFFFFFFFF8) + 24);
          v52 = *(_QWORD **)v44;
          v53 = *(unsigned int *)(v44 + 8);
          if (v50 >= v51)
            goto LABEL_59;
          do
          {
            v54 = v53 >> 1;
            v55 = v52[3 * (v53 >> 1) + 1];
            LODWORD(v55) = (v55 >> 1) & 3 | *(_DWORD *)((v55 & 0xFFFFFFFFFFFFFFF8) + 24);
            v53 -= (v53 >> 1) + 1;
            v56 = v50 >= v55;
            if (v50 >= v55)
              v57 = v54 + 1;
            else
              v57 = 0;
            v52 += 3 * v57;
            if (!v56)
              v53 = v54;
          }
          while (v53);
LABEL_60:
          if (v52 != &v48[3 * v47]
            && ((*v52 >> 1) & 3 | *(_DWORD *)((*v52 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v45 + 24) | v46))
          {
            goto LABEL_88;
          }
LABEL_62:
          v44 = *(_QWORD *)(v44 + 104);
          if (!v44)
            goto LABEL_77;
        }
        v47 = 0;
LABEL_59:
        v52 = &v48[3 * v47];
        goto LABEL_60;
      }
    }
    v58 = *(_DWORD *)(v43 + 8);
    v59 = *(_QWORD **)v43;
    if (!v58)
    {
      v58 = 0;
LABEL_74:
      v11 = (uint64_t)v1308;
      v63 = &v59[3 * v58];
      goto LABEL_75;
    }
    v60 = v59[3 * v58 - 2];
    v61 = *(_DWORD *)((v41 & 0xFFFFFFFFFFFFFFF8) + 24) | (v41 >> 1) & 3;
    v62 = (v60 >> 1) & 3 | *(_DWORD *)((v60 & 0xFFFFFFFFFFFFFFF8) + 24);
    v63 = *(_QWORD **)v43;
    v64 = *(unsigned int *)(v43 + 8);
    if (v61 >= v62)
      goto LABEL_74;
    do
    {
      v65 = v64 >> 1;
      v66 = v63[3 * (v64 >> 1) + 1];
      LODWORD(v66) = (v66 >> 1) & 3 | *(_DWORD *)((v66 & 0xFFFFFFFFFFFFFFF8) + 24);
      v64 -= (v64 >> 1) + 1;
      v67 = v61 >= v66;
      if (v61 >= v66)
        v68 = v65 + 1;
      else
        v68 = 0;
      v63 += 3 * v68;
      if (!v67)
        v64 = v65;
    }
    while (v64);
    v11 = (uint64_t)v1308;
LABEL_75:
    if (v63 != &v59[3 * v58]
      && ((*v63 >> 1) & 3 | *(_DWORD *)((*v63 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v41 & 0xFFFFFFFFFFFFFFF8) + 24) | (v41 >> 1) & 3))
    {
      goto LABEL_88;
    }
LABEL_77:
    v69 = v5;
    v70 = *(_QWORD *)(a1 + 288);
    v71 = v1325;
    v72 = v1325 & 0x7FFFFFFF;
    if (v72 >= *(unsigned int *)(v70 + 416) || (v73 = *(_QWORD *)(*(_QWORD *)(v70 + 408) + 8 * v72)) == 0)
    {
      v73 = sub_1C4851220(*(_QWORD *)(a1 + 288), (int)v1325);
      v988 = *(_QWORD *)(v70 + 304);
      v989 = *(_QWORD *)(v70 + 248);
      *(_QWORD *)v988 = v989;
      *(_QWORD *)(v988 + 8) = *(_QWORD *)(v989 + 40);
      *(_OWORD *)(v988 + 16) = *(_OWORD *)(v70 + 288);
      *(_QWORD *)(v988 + 32) = v70 + 312;
      llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v988);
      *(_DWORD *)(v988 + 184) = 0;
      v990 = *(_QWORD *)(v70 + 256);
      v22 = *(_BYTE *)(v990 + 16) == 0;
      v991 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v990 + 24) + 16 * (*(_DWORD *)(v73 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                + 34);
      v993 = !v22 && v991 != 0;
      llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v70 + 304), (llvm::LiveInterval *)v73, v993);
      llvm::LiveIntervals::computeDeadValues(v70, v73, 0);
    }
    v74 = v41 & 0xFFFFFFFFFFFFFFF8;
    v75 = *(_DWORD *)(v73 + 8);
    v76 = *(_QWORD **)v73;
    if (!v75)
    {
      v80 = 0;
      v11 = (uint64_t)v1308;
LABEL_358:
      v81 = &v76[3 * v80];
      goto LABEL_359;
    }
    v77 = v76[3 * v75 - 2];
    v78 = *(_DWORD *)(v74 + 24) | 2;
    v79 = (v77 >> 1) & 3 | *(_DWORD *)((v77 & 0xFFFFFFFFFFFFFFF8) + 24);
    v80 = *(unsigned int *)(v73 + 8);
    v81 = *(_QWORD **)v73;
    v82 = v80;
    v11 = (uint64_t)v1308;
    if (v78 >= v79)
      goto LABEL_358;
    do
    {
      v83 = v82 >> 1;
      v84 = v81[3 * (v82 >> 1) + 1];
      LODWORD(v84) = (v84 >> 1) & 3 | *(_DWORD *)((v84 & 0xFFFFFFFFFFFFFFF8) + 24);
      v82 -= (v82 >> 1) + 1;
      v85 = v78 >= v84;
      if (v78 >= v84)
        v86 = v83 + 1;
      else
        v86 = 0;
      v81 += 3 * v86;
      if (!v85)
        v82 = v83;
    }
    while (v82);
    v80 = *(unsigned int *)(v73 + 8);
LABEL_359:
    v278 = &v76[3 * v80];
    if (v81 == v278
      || ((*v81 >> 1) & 3 | *(_DWORD *)((*v81 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v74 + 24) | 2u))
    {
      v81 = &v76[3 * v80];
      if (!v75)
        goto LABEL_1600;
    }
    else if (!v75)
    {
      goto LABEL_1600;
    }
    if (v81 == v278)
      v279 = 0;
    else
      v279 = v81;
    v280 = v279[1];
    v281 = v280 & 0xFFFFFFFFFFFFFFF8;
    v282 = *(_DWORD *)((v280 & 0xFFFFFFFFFFFFFFF8) + 24);
    v283 = (v280 >> 1) & 3;
    v284 = v282 | v283;
    if (v284 < ((*(v278 - 2) >> 1) & 3 | *(_DWORD *)((*(v278 - 2) & 0xFFFFFFFFFFFFFFF8) + 24)))
    {
      v285 = *(_QWORD **)v73;
      v286 = v80;
      do
      {
        v287 = v285;
        v288 = v286 >> 1;
        v289 = v285[3 * (v286 >> 1) + 1];
        LODWORD(v289) = (v289 >> 1) & 3 | *(_DWORD *)((v289 & 0xFFFFFFFFFFFFFFF8) + 24);
        v286 -= (v286 >> 1) + 1;
        v290 = v284 >= v289;
        if (v284 >= v289)
          v291 = v288 + 1;
        else
          v291 = 0;
        v285 += 3 * v291;
        if (!v290)
          v286 = v288;
      }
      while (v286);
      if (v285 != v278
        && ((*v285 >> 1) & 3 | *(_DWORD *)((*v285 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v281 + 24) | v283))
      {
        v292 = v287[3 * v291 + 2];
        if (v292)
        {
          if ((*(_BYTE *)(v292 + 8) & 6) == 0)
          {
            *(_QWORD *)(v11 + 16) = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 8) + 480;
            v311 = *(_DWORD *)(v11 + 40);
            v5 = v69;
            v6 = v1306;
            if (v311)
            {
              v312 = v311 - 1;
              v313 = 32 * (v311 - 1);
              do
              {
                if ((*(_DWORD *)(*(_QWORD *)(v11 + 32) + v313) & 0x10000FF) == 0)
                  llvm::MachineInstr::removeOperand(v11, v312);
                --v312;
                v313 -= 32;
              }
              while (v312 != -1);
            }
            v7 = (uint64_t)v1307;
            goto LABEL_1675;
          }
        }
      }
    }
    v293 = (v41 >> 1) & 3;
    v294 = *(_DWORD *)(v74 + 24) | v293;
    if (v294 >= ((*(v278 - 2) >> 1) & 3 | *(_DWORD *)((*(v278 - 2) & 0xFFFFFFFFFFFFFFF8) + 24)))
      goto LABEL_1600;
    v295 = *(_QWORD **)v73;
    v296 = v80;
    do
    {
      v297 = v295;
      v298 = v296 >> 1;
      v299 = v295[3 * (v296 >> 1) + 1];
      LODWORD(v299) = (v299 >> 1) & 3 | *(_DWORD *)((v299 & 0xFFFFFFFFFFFFFFF8) + 24);
      v296 -= (v296 >> 1) + 1;
      v300 = v294 >= v299;
      if (v294 >= v299)
        v301 = v298 + 1;
      else
        v301 = 0;
      v295 += 3 * v301;
      if (!v300)
        v296 = v298;
    }
    while (v296);
    if (v295 == v278
      || (v302 = *(_DWORD *)(v74 + 24),
          ((*v295 >> 1) & 3 | *(_DWORD *)((*v295 & 0xFFFFFFFFFFFFFFF8) + 24)) > (v302 | v293))
      || (v303 = v297[3 * v301 + 2]) == 0)
    {
LABEL_1600:
      llvm::LiveIntervals::removeVRegDefAt(*(_QWORD *)(a1 + 288), v73, v74 | 4);
      goto LABEL_1601;
    }
    v304 = v302 | 2;
    if ((v302 | 2u) >= ((*(v278 - 2) >> 1) & 3 | *(_DWORD *)((*(v278 - 2) & 0xFFFFFFFFFFFFFFF8) + 24)))
      goto LABEL_397;
    do
    {
      v305 = v76;
      v306 = v80 >> 1;
      v307 = v76[3 * (v80 >> 1) + 1];
      LODWORD(v307) = (v307 >> 1) & 3 | *(_DWORD *)((v307 & 0xFFFFFFFFFFFFFFF8) + 24);
      v80 -= (v80 >> 1) + 1;
      v308 = v304 >= v307;
      if (v304 >= v307)
        v309 = v306 + 1;
      else
        v309 = 0;
      v76 = &v305[3 * v309];
      if (!v308)
        v80 = v306;
    }
    while (v80);
    if (v76 == v278 || ((*v76 >> 1) & 3 | *(_DWORD *)((*v76 & 0xFFFFFFFFFFFFFFF8) + 24)) > v304)
LABEL_397:
      v310 = 0;
    else
      v310 = v305[3 * v309 + 2];
    llvm::LiveRange::MergeValueNumberInto(v73, v310, v303);
    v314 = *(_QWORD *)(v73 + 104);
    if (v314)
    {
      v1290 = (uint64_t *)(v73 + 104);
      v315 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 232) + 8 * v1322);
      while ((*(_QWORD *)(v314 + 112) & v315) == 0)
      {
LABEL_424:
        v314 = *(_QWORD *)(v314 + 104);
        if (!v314)
        {
          v328 = (_QWORD *)(v73 + 104);
          v329 = *v1290;
          if (!*v1290)
            goto LABEL_1601;
          while (1)
          {
            v1107 = v329;
            if (!*(_DWORD *)(v329 + 8))
              break;
LABEL_1460:
            v328 = (_QWORD *)(v329 + 104);
            v329 = *(_QWORD *)(v329 + 104);
            if (!v329)
              goto LABEL_1601;
          }
          while (1)
          {
            v1105 = *(_QWORD *)(v1107 + 96);
            v329 = *(_QWORD *)(v1107 + 104);
            *(_QWORD *)(v1107 + 96) = 0;
            if (v1105)
            {
              v1294 = v1105;
              sub_1C47655E8(v1105, *(_QWORD **)(v1105 + 8));
              MEMORY[0x1CAA32FC0](v1294, 0x1020C4062D53EE8);
            }
            v1106 = *(void **)(v1107 + 64);
            if (v1106 != (void *)(v1107 + 80))
              free(v1106);
            if (*(_QWORD *)v1107 == v1107 + 16)
            {
              if (!v329)
              {
LABEL_1462:
                *v328 = 0;
                goto LABEL_1601;
              }
            }
            else
            {
              free(*(void **)v1107);
              if (!v329)
                goto LABEL_1462;
            }
            v1107 = v329;
            if (*(_DWORD *)(v329 + 8))
            {
              *v328 = v329;
              goto LABEL_1460;
            }
          }
        }
      }
      v316 = *(_DWORD *)(v314 + 8);
      v317 = *(_QWORD *)v314;
      if (v316)
      {
        v318 = *(_QWORD *)(v317 + 24 * v316 - 16);
        v319 = *(_DWORD *)(v74 + 24) | 2;
        v320 = (v318 >> 1) & 3 | *(_DWORD *)((v318 & 0xFFFFFFFFFFFFFFF8) + 24);
        v321 = *(_QWORD **)v314;
        v322 = *(unsigned int *)(v314 + 8);
        if (v319 < v320)
        {
          do
          {
            v323 = v322 >> 1;
            v324 = v321[3 * (v322 >> 1) + 1];
            LODWORD(v324) = (v324 >> 1) & 3 | *(_DWORD *)((v324 & 0xFFFFFFFFFFFFFFF8) + 24);
            v322 -= (v322 >> 1) + 1;
            v325 = v319 >= v324;
            if (v319 >= v324)
              v326 = v323 + 1;
            else
              v326 = 0;
            v321 += 3 * v326;
            if (!v325)
              v322 = v323;
          }
          while (v322);
          goto LABEL_419;
        }
      }
      else
      {
        v316 = 0;
      }
      v321 = (_QWORD *)(v317 + 24 * v316);
LABEL_419:
      if (v321 == (_QWORD *)(v317 + 24 * v316)
        || ((*v321 >> 1) & 3 | *(_DWORD *)((*v321 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v74 + 24) | 2u))
      {
        v327 = 0;
      }
      else
      {
        v327 = v321[2];
      }
      llvm::LiveRange::removeValNo((uint64_t *)v314, v327);
      goto LABEL_424;
    }
LABEL_1601:
    v1196 = *(_QWORD *)(a1 + 264);
    if ((v71 & 0x80000000) != 0)
      v1197 = (unsigned int **)(*(_QWORD *)(v1196 + 24) + 16 * v72 + 8);
    else
      v1197 = (unsigned int **)(*(_QWORD *)(v1196 + 272) + 8 * v71);
    v5 = v69;
    v6 = v1306;
    v7 = (uint64_t)v1307;
    v11 = (uint64_t)v1308;
    v1198 = *v1197;
    if (!v1198)
      goto LABEL_1607;
    while (1)
    {
      v1199 = *v1198;
      if ((*v1198 & 0x80000000) == 0)
        break;
      v1198 = (unsigned int *)*((_QWORD *)v1198 + 3);
      if (!v1198)
        goto LABEL_1607;
    }
LABEL_1615:
    if ((v1199 & 0x1000000) != 0)
      goto LABEL_1667;
    v1204 = *((_QWORD *)v1198 + 1);
    v1205 = *(_WORD *)(v1204 + 44);
    v1206 = v1204;
    if ((v1205 & 4) != 0)
    {
      do
        v1206 = *(_QWORD *)v1206 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v1206 + 44) & 4) != 0);
    }
    if ((v1205 & 8) != 0)
    {
      do
        v1204 = *(_QWORD *)(v1204 + 8);
      while ((*(_WORD *)(v1204 + 44) & 8) != 0);
    }
    v1207 = *(_QWORD *)(v1204 + 8);
    if (v1206 != v1207)
    {
      while (1)
      {
        v1208 = **(unsigned __int16 **)(v1206 + 16);
        v29 = v1208 > 0x17;
        v1209 = (1 << v1208) & 0x83E000;
        if (v29 || v1209 == 0)
          break;
        v1206 = *(_QWORD *)(v1206 + 8);
        if (v1206 == v1207)
        {
          v1206 = v1207;
          break;
        }
      }
    }
    v1211 = *(_QWORD *)(*(_QWORD *)(a1 + 288) + 288);
    v1212 = *(_QWORD *)(v1211 + 368);
    v1213 = *(unsigned int *)(v1211 + 384);
    if ((_DWORD)v1213)
    {
      LODWORD(v1214) = ((v1206 >> 4) ^ (v1206 >> 9)) & (v1213 - 1);
      v1215 = (uint64_t *)(v1212 + 16 * v1214);
      v1216 = *v1215;
      if (v1206 == *v1215)
        goto LABEL_1632;
      v1217 = 1;
      while (v1216 != -4096)
      {
        v1218 = v1214 + v1217++;
        v1214 = v1218 & (v1213 - 1);
        v1216 = *(_QWORD *)(v1212 + 16 * v1214);
        if (v1206 == v1216)
        {
          v1215 = (uint64_t *)(v1212 + 16 * v1214);
          goto LABEL_1632;
        }
      }
    }
    v1215 = (uint64_t *)(v1212 + 16 * v1213);
LABEL_1632:
    v1219 = v1215[1];
    v1220 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 232) + 8 * ((v1199 >> 8) & 0xFFF));
    v1221 = *(_QWORD *)(v73 + 104);
    if (v1220 != -1 && v1221 != 0)
    {
      v1234 = v1219 & 0xFFFFFFFFFFFFFFF8;
      v1235 = (v1219 >> 1) & 3;
      while ((*(_QWORD *)(v1221 + 112) & v1220) == 0)
      {
LABEL_1660:
        v1221 = *(_QWORD *)(v1221 + 104);
        if (!v1221)
          goto LABEL_1666;
      }
      v1236 = *(_DWORD *)(v1221 + 8);
      v1237 = *(_QWORD **)v1221;
      if (v1236)
      {
        v1238 = v1237[3 * v1236 - 2];
        v1239 = *(_DWORD *)(v1234 + 24) | v1235;
        v1240 = (v1238 >> 1) & 3 | *(_DWORD *)((v1238 & 0xFFFFFFFFFFFFFFF8) + 24);
        v1241 = *(_QWORD **)v1221;
        v1242 = *(unsigned int *)(v1221 + 8);
        if (v1239 < v1240)
        {
          do
          {
            v1243 = v1242 >> 1;
            v1244 = v1241[3 * (v1242 >> 1) + 1];
            LODWORD(v1244) = (v1244 >> 1) & 3 | *(_DWORD *)((v1244 & 0xFFFFFFFFFFFFFFF8) + 24);
            v1242 -= (v1242 >> 1) + 1;
            v1245 = v1239 >= v1244;
            if (v1239 >= v1244)
              v1246 = v1243 + 1;
            else
              v1246 = 0;
            v1241 += 3 * v1246;
            if (!v1245)
              v1242 = v1243;
          }
          while (v1242);
LABEL_1658:
          if (v1241 != &v1237[3 * v1236]
            && ((*v1241 >> 1) & 3 | *(_DWORD *)((*v1241 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v1234 + 24) | v1235))
          {
            goto LABEL_1667;
          }
          goto LABEL_1660;
        }
      }
      else
      {
        v1236 = 0;
      }
      v1241 = &v1237[3 * v1236];
      goto LABEL_1658;
    }
    v1223 = *(_DWORD *)(v73 + 8);
    v1224 = *(_QWORD **)v73;
    if (v1223)
    {
      v1225 = v1224[3 * v1223 - 2];
      v1226 = *(_DWORD *)((v1219 & 0xFFFFFFFFFFFFFFF8) + 24) | (v1219 >> 1) & 3;
      v1227 = (v1225 >> 1) & 3 | *(_DWORD *)((v1225 & 0xFFFFFFFFFFFFFFF8) + 24);
      v1228 = *(_QWORD **)v73;
      v1229 = *(unsigned int *)(v73 + 8);
      if (v1226 < v1227)
      {
        do
        {
          v1230 = v1229 >> 1;
          v1231 = v1228[3 * (v1229 >> 1) + 1];
          LODWORD(v1231) = (v1231 >> 1) & 3 | *(_DWORD *)((v1231 & 0xFFFFFFFFFFFFFFF8) + 24);
          v1229 -= (v1229 >> 1) + 1;
          v1232 = v1226 >= v1231;
          if (v1226 >= v1231)
            v1233 = v1230 + 1;
          else
            v1233 = 0;
          v1228 += 3 * v1233;
          if (!v1232)
            v1229 = v1230;
        }
        while (v1229);
        goto LABEL_1664;
      }
    }
    else
    {
      v1223 = 0;
    }
    v1228 = &v1224[3 * v1223];
LABEL_1664:
    if (v1228 == &v1224[3 * v1223]
      || ((*v1228 >> 1) & 3 | *(_DWORD *)((*v1228 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v1219 & 0xFFFFFFFFFFFFFFF8) + 24) | (v1219 >> 1) & 3))
    {
LABEL_1666:
      *v1198 = v1199 | 0x10000000;
    }
LABEL_1667:
    while (1)
    {
      v1198 = (unsigned int *)*((_QWORD *)v1198 + 3);
      if (!v1198)
        break;
      v1199 = *v1198;
      if ((*v1198 & 0x80000000) == 0)
        goto LABEL_1615;
    }
LABEL_1607:
    v1200 = *((unsigned int *)v1308 + 10);
    if (!(_DWORD)v1200)
    {
      llvm::LiveIntervals::shrinkToUses(*(_QWORD **)(a1 + 288), v73, 0);
LABEL_1675:
      if (**(_WORD **)(v11 + 16) != 10)
        sub_1C5251F5C(a1, v11);
LABEL_1677:
      v13 = 0;
      goto LABEL_1678;
    }
    v1201 = (_DWORD *)*((_QWORD *)v1308 + 4);
    v1202 = (int)v1325;
    v1203 = 32 * v1200;
    do
    {
      if ((*v1201 & 0x10000FF) == 0x1000000 && v1201[1] == v1202)
        *v1201 |= 0x10000000u;
      v1201 += 8;
      v1203 -= 32;
    }
    while (v1203);
    llvm::LiveIntervals::shrinkToUses(*(_QWORD **)(a1 + 288), v73, 0);
    if (v1308)
      goto LABEL_1675;
LABEL_89:
    LODWORD(v87) = HIDWORD(v1310[0]);
    v88 = v1310[0];
    if (HIDWORD(v1310[0]) == (unint64_t)LODWORD(v1310[0]))
    {
      v89 = *(_QWORD *)(a1 + 288);
      if ((HIDWORD(v1310[0]) & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v89 + 416)
        || (v90 = *(_QWORD *)(*(_QWORD *)(v89 + 408) + 8 * (HIDWORD(v1310[0]) & 0x7FFFFFFF))) == 0)
      {
        v90 = sub_1C4851220(*(_QWORD *)(a1 + 288), SHIDWORD(v1310[0]));
        v551 = *(_QWORD *)(v89 + 304);
        v552 = *(_QWORD *)(v89 + 248);
        *(_QWORD *)v551 = v552;
        *(_QWORD *)(v551 + 8) = *(_QWORD *)(v552 + 40);
        *(_OWORD *)(v551 + 16) = *(_OWORD *)(v89 + 288);
        *(_QWORD *)(v551 + 32) = v89 + 312;
        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v551);
        *(_DWORD *)(v551 + 184) = 0;
        v553 = *(_QWORD *)(v89 + 256);
        v22 = *(_BYTE *)(v553 + 16) == 0;
        v554 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v553 + 24) + 16 * (*(_DWORD *)(v90 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                  + 34);
        v556 = !v22 && v554 != 0;
        llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v89 + 304), (llvm::LiveInterval *)v90, v556);
        llvm::LiveIntervals::computeDeadValues(v89, v90, 0);
        v89 = *(_QWORD *)(a1 + 288);
      }
      v91 = *(_QWORD *)(v89 + 288);
      v92 = (uint64_t)v1308;
      v93 = *((_WORD *)v1308 + 22);
      v94 = (unint64_t)v1308;
      if ((v93 & 4) != 0)
      {
        do
          v94 = *(_QWORD *)v94 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v94 + 44) & 4) != 0);
      }
      v95 = v1308;
      if ((v93 & 8) != 0)
      {
        do
          v95 = (llvm::MachineInstr *)*((_QWORD *)v95 + 1);
        while ((*((_WORD *)v95 + 22) & 8) != 0);
      }
      v96 = *((_QWORD *)v95 + 1);
      if (v94 != v96)
      {
        while (1)
        {
          v97 = **(unsigned __int16 **)(v94 + 16);
          v29 = v97 > 0x17;
          v98 = (1 << v97) & 0x83E000;
          if (v29 || v98 == 0)
            break;
          v94 = *(_QWORD *)(v94 + 8);
          if (v94 == v96)
          {
            v94 = v96;
            break;
          }
        }
      }
      v100 = *(_QWORD *)(v91 + 368);
      v101 = *(unsigned int *)(v91 + 384);
      if ((_DWORD)v101)
      {
        LODWORD(v102) = ((v94 >> 4) ^ (v94 >> 9)) & (v101 - 1);
        v103 = (uint64_t *)(v100 + 16 * v102);
        v104 = *v103;
        if (v94 == *v103)
          goto LABEL_191;
        v105 = 1;
        while (v104 != -4096)
        {
          v106 = v102 + v105++;
          v102 = v106 & (v101 - 1);
          v104 = *(_QWORD *)(v100 + 16 * v102);
          if (v94 == v104)
          {
            v103 = (uint64_t *)(v100 + 16 * v102);
            goto LABEL_191;
          }
        }
      }
      v103 = (uint64_t *)(v100 + 16 * v101);
LABEL_191:
      v155 = v103[1] & 0xFFFFFFFFFFFFFFF8;
      v156 = *(_DWORD *)(v90 + 8);
      v157 = *(_QWORD **)v90;
      if (v156)
      {
        v158 = v157[3 * v156 - 2];
        v159 = *(_DWORD *)(v155 + 24);
        v160 = (v158 >> 1) & 3 | *(_DWORD *)((v158 & 0xFFFFFFFFFFFFFFF8) + 24);
        v161 = *(_QWORD **)v90;
        v162 = *(unsigned int *)(v90 + 8);
        if (v159 < v160)
        {
          do
          {
            v163 = v162 >> 1;
            v164 = v161[3 * (v162 >> 1) + 1];
            LODWORD(v164) = (v164 >> 1) & 3 | *(_DWORD *)((v164 & 0xFFFFFFFFFFFFFFF8) + 24);
            v162 -= (v162 >> 1) + 1;
            v165 = v159 >= v164;
            if (v159 >= v164)
              v166 = v163 + 1;
            else
              v166 = 0;
            v161 += 3 * v166;
            if (!v165)
              v162 = v163;
          }
          while (v162);
          goto LABEL_208;
        }
      }
      else
      {
        v156 = 0;
      }
      v161 = &v157[3 * v156];
LABEL_208:
      v172 = &v157[3 * v156];
      if (v161 == v172)
        goto LABEL_821;
      v173 = *(_DWORD *)((*v161 & 0xFFFFFFFFFFFFFFF8) + 24);
      v174 = *(_DWORD *)(v155 + 24);
      if (((*v161 >> 1) & 3 | v173) > v174)
      {
        v176 = 0;
      }
      else
      {
        v175 = v161[2];
        if (v155 == (v161[1] & 0xFFFFFFFFFFFFFFF8))
        {
          v161 += 3;
          if (v161 == v172)
            goto LABEL_821;
          v173 = *(_DWORD *)((*v161 & 0xFFFFFFFFFFFFFFF8) + 24);
        }
        if (*(_QWORD *)(v175 + 8) == v155)
          v176 = 0;
        else
          v176 = v175;
      }
      if (v174 < v173 || ((v177 = v161[2], v176 != v177) ? (v178 = v177 == 0) : (v178 = 1), v178))
      {
LABEL_821:
        sub_1C5251F5C(a1, v92);
        v13 = 1;
        v7 = (uint64_t)v1307;
        goto LABEL_1678;
      }
      v179 = *(_QWORD *)(v90 + 104);
      if (!v179)
      {
        llvm::LiveRange::MergeValueNumberInto(v90, v177, v176);
        v6 = v1306;
        goto LABEL_821;
      }
      v1285 = (uint64_t *)(v90 + 104);
      v1289 = v176;
      v1305 = v5;
      v180 = 0;
      v181 = *((_QWORD *)v1308 + 3);
      while (1)
      {
        v182 = *(_DWORD *)(v179 + 8);
        v183 = *(_QWORD *)v179;
        if (!v182)
          break;
        v184 = *(_QWORD *)(v183 + 24 * v182 - 16);
        v185 = *(_DWORD *)(v155 + 24);
        v186 = (v184 >> 1) & 3 | *(_DWORD *)((v184 & 0xFFFFFFFFFFFFFFF8) + 24);
        v187 = *(_QWORD **)v179;
        v188 = *(unsigned int *)(v179 + 8);
        if (v185 >= v186)
          goto LABEL_234;
        do
        {
          v189 = v188 >> 1;
          v190 = v187[3 * (v188 >> 1) + 1];
          LODWORD(v190) = (v190 >> 1) & 3 | *(_DWORD *)((v190 & 0xFFFFFFFFFFFFFFF8) + 24);
          v188 -= (v188 >> 1) + 1;
          v191 = v185 >= v190;
          if (v185 >= v190)
            v192 = v189 + 1;
          else
            v192 = 0;
          v187 += 3 * v192;
          if (!v191)
            v188 = v189;
        }
        while (v188);
LABEL_235:
        v193 = (_QWORD *)(v183 + 24 * v182);
        if (v187 != v193)
        {
          v194 = *(_DWORD *)((*v187 & 0xFFFFFFFFFFFFFFF8) + 24);
          v195 = *(_DWORD *)(v155 + 24);
          if (((*v187 >> 1) & 3 | v194) > v195)
          {
            v197 = 0;
            goto LABEL_244;
          }
          v196 = v187[2];
          if (v155 != (v187[1] & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_240;
          v187 += 3;
          if (v187 != v193)
          {
            v194 = *(_DWORD *)((*v187 & 0xFFFFFFFFFFFFFFF8) + 24);
LABEL_240:
            if (*(_QWORD *)(v196 + 8) == v155)
              v197 = 0;
            else
              v197 = v196;
LABEL_244:
            if (v195 >= v194)
            {
              v198 = (_DWORD *)v187[2];
              if ((_DWORD *)v197 != v198 && v198 != 0)
              {
                v200 = v187[2];
                if (v197)
                  v200 = llvm::LiveRange::MergeValueNumberInto(v179, v187[2], v197);
                v201 = *(_QWORD *)(v181 + 64);
                v202 = *(_QWORD *)(v181 + 72);
                if (v201 == v202)
                {
LABEL_270:
                  v180 |= *(_QWORD *)(v179 + 112);
                  llvm::LiveRange::removeValNo((uint64_t *)v179, v200);
                }
                else
                {
                  v203 = *(_DWORD *)(v179 + 8);
                  v204 = *(_QWORD *)v179 + 24 * v203;
                  while (1)
                  {
                    v205 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 288) + 392)
                                     + 16 * *(unsigned int *)(*(_QWORD *)v201 + 24)
                                     + 8);
                    v206 = (v205 >> 1) & 3;
                    v207 = v205 & 0xFFFFFFFFFFFFFFF8;
                    if (v206)
                      v208 = v207 | (2 * (v206 - 1));
                    else
                      v208 = *(_QWORD *)v207 | 6;
                    v209 = (_QWORD *)(*(_QWORD *)v179 + 24 * v203);
                    if (v203)
                    {
                      v210 = *(_DWORD *)((v208 & 0xFFFFFFFFFFFFFFF8) + 24) | (v208 >> 1) & 3;
                      v209 = (_QWORD *)(*(_QWORD *)v179 + 24 * v203);
                      if (v210 < ((*(_QWORD *)(v204 - 16) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v204 - 16) & 0xFFFFFFFFFFFFFFF8)
                                                                                               + 24)))
                      {
                        v209 = *(_QWORD **)v179;
                        v211 = *(unsigned int *)(v179 + 8);
                        do
                        {
                          v212 = v211 >> 1;
                          v213 = v209[3 * (v211 >> 1) + 1];
                          LODWORD(v213) = (v213 >> 1) & 3 | *(_DWORD *)((v213 & 0xFFFFFFFFFFFFFFF8) + 24);
                          v211 -= (v211 >> 1) + 1;
                          v214 = v210 >= v213;
                          if (v210 >= v213)
                            v215 = v212 + 1;
                          else
                            v215 = 0;
                          v209 += 3 * v215;
                          if (!v214)
                            v211 = v212;
                        }
                        while (v211);
                      }
                    }
                    if (v209 != (_QWORD *)v204
                      && ((*v209 >> 1) & 3 | *(_DWORD *)((*v209 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v208 & 0xFFFFFFFFFFFFFFF8) + 24) | (v208 >> 1) & 3))
                    {
                      v216 = (_DWORD *)v209[2];
                      if (v216)
                      {
                        if (*v216 != *v198)
                          break;
                      }
                    }
                    v201 += 8;
                    if (v201 == v202)
                      goto LABEL_270;
                  }
                }
              }
            }
            v92 = (uint64_t)v1308;
          }
        }
        v179 = *(_QWORD *)(v179 + 104);
        if (!v179)
        {
          llvm::LiveRange::MergeValueNumberInto(v90, v177, v1289);
          v5 = v1305;
          v6 = v1306;
          if (!v180)
            goto LABEL_821;
          v217 = *(_QWORD *)(a1 + 264);
          if ((v1310[0] & 0x8000000000000000) != 0)
            v218 = (unsigned int **)(*(_QWORD *)(v217 + 24) + 16 * (HIDWORD(v1310[0]) & 0x7FFFFFFF) + 8);
          else
            v218 = (unsigned int **)(*(_QWORD *)(v217 + 272) + 8 * HIDWORD(v1310[0]));
          v232 = *v218;
          if (!v232)
            goto LABEL_299;
          while (1)
          {
            v233 = *v232;
            if ((*v232 & 0x81000000) == 0)
              break;
            v232 = (unsigned int *)*((_QWORD *)v232 + 3);
            if (!v232)
              goto LABEL_299;
          }
LABEL_301:
          if ((v233 & 0x10000000) != 0)
            goto LABEL_339;
          v236 = (v233 >> 8) & 0xFFF;
          if (!v236)
            goto LABEL_339;
          v237 = *((_QWORD *)v232 + 1);
          v238 = *(_WORD *)(v237 + 44);
          v239 = v237;
          if ((v238 & 4) != 0)
          {
            do
              v239 = *(_QWORD *)v239 & 0xFFFFFFFFFFFFFFF8;
            while ((*(_WORD *)(v239 + 44) & 4) != 0);
          }
          if ((v238 & 8) != 0)
          {
            do
              v237 = *(_QWORD *)(v237 + 8);
            while ((*(_WORD *)(v237 + 44) & 8) != 0);
          }
          v240 = *(_QWORD *)(v237 + 8);
          if (v239 != v240)
          {
            do
            {
              v241 = **(unsigned __int16 **)(v239 + 16);
              v29 = v241 > 0x17;
              v242 = (1 << v241) & 0x83E000;
              if (v29 || v242 == 0)
                goto LABEL_312;
              v239 = *(_QWORD *)(v239 + 8);
            }
            while (v239 != v240);
            v239 = v240;
          }
LABEL_312:
          v244 = *(_QWORD *)(*(_QWORD *)(a1 + 288) + 288);
          v245 = *(_QWORD *)(v244 + 368);
          v246 = *(unsigned int *)(v244 + 384);
          if ((_DWORD)v246)
          {
            LODWORD(v247) = ((v239 >> 4) ^ (v239 >> 9)) & (v246 - 1);
            v248 = (uint64_t *)(v245 + 16 * v247);
            v249 = *v248;
            if (v239 != *v248)
            {
              v250 = 1;
              do
              {
                if (v249 == -4096)
                  goto LABEL_318;
                v251 = v247 + v250++;
                v247 = v251 & (v246 - 1);
                v249 = *(_QWORD *)(v245 + 16 * v247);
              }
              while (v239 != v249);
              v248 = (uint64_t *)(v245 + 16 * v247);
            }
          }
          else
          {
LABEL_318:
            v248 = (uint64_t *)(v245 + 16 * v246);
          }
          v252 = *v1285;
          if (!*v1285)
            goto LABEL_339;
          v253 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 232) + 8 * v236);
          v254 = v248[1];
          v255 = v254 & 0xFFFFFFFFFFFFFFF8;
          v256 = (v254 >> 1) & 3;
          v257 = v253 & v180;
          while (2)
          {
            v258 = *(_DWORD *)(v252 + 8);
            v259 = *(_QWORD **)v252;
            if (v258)
            {
              v260 = v259[3 * v258 - 2];
              v261 = *(_DWORD *)(v255 + 24) | v256;
              v262 = (v260 >> 1) & 3 | *(_DWORD *)((v260 & 0xFFFFFFFFFFFFFFF8) + 24);
              v263 = *(_QWORD **)v252;
              v264 = *(unsigned int *)(v252 + 8);
              if (v261 < v262)
              {
                do
                {
                  v265 = v264 >> 1;
                  v266 = v263[3 * (v264 >> 1) + 1];
                  LODWORD(v266) = (v266 >> 1) & 3 | *(_DWORD *)((v266 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v264 -= (v264 >> 1) + 1;
                  v267 = v261 >= v266;
                  if (v261 >= v266)
                    v268 = v265 + 1;
                  else
                    v268 = 0;
                  v263 += 3 * v268;
                  if (!v267)
                    v264 = v265;
                }
                while (v264);
LABEL_332:
                if ((v263 == &v259[3 * v258]
                   || ((*v263 >> 1) & 3 | *(_DWORD *)((*v263 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v255 + 24) | v256))
                  && v257)
                {
                  *v232 = v233 | 0x10000000;
                  goto LABEL_339;
                }
                v252 = *(_QWORD *)(v252 + 104);
                if (!v252)
                {
LABEL_339:
                  while (1)
                  {
                    v232 = (unsigned int *)*((_QWORD *)v232 + 3);
                    if (!v232)
                      break;
                    v233 = *v232;
                    if ((*v232 & 0x81000000) == 0)
                      goto LABEL_301;
                  }
LABEL_299:
                  v234 = (_QWORD *)(v90 + 104);
                  v235 = *v1285;
                  if (!*v1285)
                    goto LABEL_820;
                  while (1)
                  {
                    v640 = v235;
                    if (!*(_DWORD *)(v235 + 8))
                      break;
LABEL_819:
                    v234 = (_QWORD *)(v235 + 104);
                    v235 = *(_QWORD *)(v235 + 104);
                    v5 = v1305;
                    if (!v235)
                      goto LABEL_820;
                  }
                  while (1)
                  {
                    v637 = *(_QWORD *)(v640 + 96);
                    v235 = *(_QWORD *)(v640 + 104);
                    *(_QWORD *)(v640 + 96) = 0;
                    if (v637)
                    {
                      v636 = v234;
                      sub_1C47655E8(v637, *(_QWORD **)(v637 + 8));
                      MEMORY[0x1CAA32FC0](v637, 0x1020C4062D53EE8);
                      v234 = v636;
                    }
                    v638 = *(void **)(v640 + 64);
                    if (v638 != (void *)(v640 + 80))
                    {
                      v635 = v234;
                      free(v638);
                      v234 = v635;
                    }
                    v639 = *(void **)v640;
                    v92 = (uint64_t)v1308;
                    if (*(_QWORD *)v640 == v640 + 16)
                    {
                      if (!v235)
                      {
LABEL_822:
                        *v234 = 0;
                        v5 = v1305;
LABEL_820:
                        llvm::LiveIntervals::shrinkToUses(*(_QWORD **)(a1 + 288), v90, 0);
                        goto LABEL_821;
                      }
                    }
                    else
                    {
                      v634 = v234;
                      free(v639);
                      v234 = v634;
                      if (!v235)
                        goto LABEL_822;
                    }
                    v640 = v235;
                    if (*(_DWORD *)(v235 + 8))
                    {
                      *v234 = v235;
                      goto LABEL_819;
                    }
                  }
                }
                continue;
              }
            }
            else
            {
              v258 = 0;
            }
            break;
          }
          v263 = &v259[3 * v258];
          goto LABEL_332;
        }
      }
      v182 = 0;
LABEL_234:
      v187 = (_QWORD *)(v183 + 24 * v182);
      goto LABEL_235;
    }
    if (v1311)
    {
      if (LOBYTE(v1310[2]))
      {
        *(_QWORD *)(a1 + 648) = 0;
        *(_BYTE *)(a1 + 656) = 0;
        v107 = *(_QWORD *)(a1 + 288);
LABEL_123:
        v1341 = v1343;
        v1342 = 0x1000000000;
        v119 = *(unsigned int *)(v107 + 416);
        if ((v87 & 0x7FFFFFFF) >= v119
          || (v120 = *(_QWORD *)(*(_QWORD *)(v107 + 408) + 8 * (v87 & 0x7FFFFFFF))) == 0)
        {
          v120 = sub_1C4851220(v107, v87);
          v568 = *(_QWORD *)(v107 + 304);
          v569 = *(_QWORD *)(v107 + 248);
          *(_QWORD *)v568 = v569;
          *(_QWORD *)(v568 + 8) = *(_QWORD *)(v569 + 40);
          *(_OWORD *)(v568 + 16) = *(_OWORD *)(v107 + 288);
          *(_QWORD *)(v568 + 32) = v107 + 312;
          llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v568);
          *(_DWORD *)(v568 + 184) = 0;
          v570 = *(_QWORD *)(v107 + 256);
          v22 = *(_BYTE *)(v570 + 16) == 0;
          v571 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v570 + 24) + 16
                                                                          * (*(_DWORD *)(v120 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                    + 34);
          v573 = !v22 && v571 != 0;
          llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v107 + 304), (llvm::LiveInterval *)v120, v573);
          llvm::LiveIntervals::computeDeadValues(v107, v120, 0);
          v107 = *(_QWORD *)(a1 + 288);
          v119 = *(unsigned int *)(v107 + 416);
        }
        v121 = v1310[0] & 0x7FFFFFFF;
        if (v121 >= v119 || (v122 = *(_QWORD *)(*(_QWORD *)(v107 + 408) + 8 * v121)) == 0)
        {
          v122 = sub_1C4851220(v107, v1310[0]);
          v574 = *(_QWORD *)(v107 + 304);
          v575 = *(_QWORD *)(v107 + 248);
          *(_QWORD *)v574 = v575;
          *(_QWORD *)(v574 + 8) = *(_QWORD *)(v575 + 40);
          *(_OWORD *)(v574 + 16) = *(_OWORD *)(v107 + 288);
          *(_QWORD *)(v574 + 32) = v107 + 312;
          llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v574);
          *(_DWORD *)(v574 + 184) = 0;
          v576 = *(_QWORD *)(v107 + 256);
          v22 = *(_BYTE *)(v576 + 16) == 0;
          v577 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v576 + 24) + 16
                                                                          * (*(_DWORD *)(v122 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                    + 34);
          v579 = !v22 && v577 != 0;
          llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v107 + 304), (llvm::LiveInterval *)v122, v579);
          llvm::LiveIntervals::computeDeadValues(v107, v122, 0);
          v107 = *(_QWORD *)(a1 + 288);
        }
        if (*(_BYTE *)(*(_QWORD *)(a1 + 264) + 16))
          v123 = *(_BYTE *)(v1311 + 34) == 0;
        else
          v123 = 1;
        v124 = !v123;
        sub_1C525433C((uint64_t)&v1332, v120, SHIDWORD(v1310[0]), SHIDWORD(v1310[1]), 0, (uint64_t)&v1341, (uint64_t)&v1309, v107, *(_QWORD *)(a1 + 272), 0, v124);
        sub_1C525433C((uint64_t)&v1325, v122, v1310[0], v1310[1], 0, (uint64_t)&v1341, (uint64_t)&v1309, *(_QWORD *)(a1 + 288), *(_QWORD *)(a1 + 272), 0, v124);
        v125 = dword_1ED7FF248;
        v1304 = v5;
        if (*(_DWORD *)(v122 + 72) >= dword_1ED7FF248)
        {
          LODWORD(v1322) = *(_DWORD *)(v122 + 112);
          v126 = sub_1C5255680(v1303, (int *)&v1322);
          v127 = *(_QWORD *)(v126 + 8);
          if (v127 >= dword_1ED7FF308)
            goto LABEL_154;
          *(_QWORD *)(v126 + 8) = v127 + 1;
          v125 = dword_1ED7FF248;
        }
        if (*(_DWORD *)(v120 + 72) >= v125)
        {
          LODWORD(v1322) = *(_DWORD *)(v120 + 112);
          v128 = sub_1C5255680(v1303, (int *)&v1322);
          v129 = *(_QWORD *)(v128 + 8);
          if (v129 >= dword_1ED7FF308)
            goto LABEL_154;
          *(_QWORD *)(v128 + 8) = v129 + 1;
        }
        v130 = *((unsigned int *)v1325 + 18);
        if ((_DWORD)v130)
        {
          v131 = 0;
          v132 = 0;
          v133 = 48 * v130;
          while (1)
          {
            sub_1C52559F0((uint64_t)&v1325, v131, (uint64_t **)&v1332);
            if (*(_DWORD *)((char *)v1330 + v132) == 5)
              break;
            v132 += 48;
            ++v131;
            if (v133 == v132)
              goto LABEL_143;
          }
LABEL_154:
          v140 = 0;
          goto LABEL_155;
        }
LABEL_143:
        v134 = *((unsigned int *)v1332 + 18);
        if ((_DWORD)v134)
        {
          v135 = 0;
          v136 = 0;
          v137 = 48 * v134;
          do
          {
            sub_1C52559F0((uint64_t)&v1332, v135, (uint64_t **)&v1325);
            if (*(_DWORD *)((char *)v1339 + v136) == 5)
              goto LABEL_154;
            v136 += 48;
            ++v135;
          }
          while (v137 != v136);
        }
        if (!sub_1C525440C((uint64_t *)&v1325, (uint64_t **)&v1332)
          || !sub_1C525440C((uint64_t *)&v1332, (uint64_t **)&v1325))
        {
          goto LABEL_154;
        }
        v138 = *(_QWORD *)(v122 + 104);
        if (*(_QWORD *)(v120 + 104) | v138)
        {
          v139 = LODWORD(v1310[1]);
          if (v138)
          {
            if (LODWORD(v1310[1]))
            {
              do
              {
                *(_QWORD *)(v138 + 112) = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 272)
                                                                                             + 216))(*(_QWORD *)(a1 + 272), v139, *(_QWORD *)(v138 + 112));
                v138 = *(_QWORD *)(v138 + 104);
              }
              while (v138);
            }
          }
          else
          {
            if (LODWORD(v1310[1]))
              v330 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 232) + 8 * LODWORD(v1310[1]));
            else
              v330 = (uint64_t *)(v1311 + 24);
            v331 = *(_QWORD *)(a1 + 288) + 312;
            v332 = *v330;
            v333 = (_QWORD *)sub_1C484358C(v331, 120, 3);
            *v333 = v333 + 2;
            v333[1] = 0x200000000;
            v333[8] = v333 + 10;
            v333[9] = 0x200000000;
            v333[12] = 0;
            sub_1C50E31B0((uint64_t)v333, v122, v331);
            v333[14] = v332;
            v333[13] = *(_QWORD *)(v122 + 104);
            *(_QWORD *)(v122 + 104) = v333;
          }
          v334 = HIDWORD(v1310[1]);
          v335 = *(_QWORD *)(v120 + 104);
          if (v335)
          {
            do
            {
              v336 = *(_QWORD *)(v335 + 112);
              if ((_DWORD)v334)
                v336 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 272) + 216))(*(_QWORD *)(a1 + 272), v334, *(_QWORD *)(v335 + 112));
              sub_1C52548F0(a1, v122, v335, v336, (uint64_t)&v1309, v139);
              v335 = *(_QWORD *)(v335 + 104);
            }
            while (v335);
          }
          else
          {
            if (HIDWORD(v1310[1]))
              v337 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 232) + 8 * HIDWORD(v1310[1]));
            else
              v337 = (uint64_t *)(v1311 + 24);
            sub_1C52548F0(a1, v122, v120, *v337, (uint64_t)&v1309, v139);
          }
          v338 = v1325;
          v339 = *((unsigned int *)v1325 + 18);
          if ((_DWORD)v339)
          {
            v340 = 0;
            v341 = v1330;
            do
            {
              if (!*(_DWORD *)&v341[48 * v340])
              {
                v342 = *(_QWORD *)(*(_QWORD *)(v338[8] + 8 * v340) + 8);
                if (v342 >= 8 && (*(_QWORD *)(*(_QWORD *)(v338[8] + 8 * v340) + 8) & 6) != 0)
                {
                  v344 = *(_QWORD *)(v122 + 104);
                  if (v344)
                  {
                    v345 = v342 & 0xFFFFFFFFFFFFFFF8;
                    while (1)
                    {
                      v346 = *(_DWORD *)(v344 + 8);
                      v347 = *(_QWORD **)v344;
                      if (!v346)
                        break;
                      v348 = v347[3 * v346 - 2];
                      v349 = *(_DWORD *)(v345 + 24);
                      v350 = (v348 >> 1) & 3 | *(_DWORD *)((v348 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v351 = *(_QWORD **)v344;
                      v352 = *(unsigned int *)(v344 + 8);
                      if (v349 >= v350)
                        goto LABEL_459;
                      do
                      {
                        v353 = v352 >> 1;
                        v354 = v351[3 * (v352 >> 1) + 1];
                        LODWORD(v354) = (v354 >> 1) & 3 | *(_DWORD *)((v354 & 0xFFFFFFFFFFFFFFF8) + 24);
                        v352 -= (v352 >> 1) + 1;
                        v355 = v349 >= v354;
                        if (v349 >= v354)
                          v356 = v353 + 1;
                        else
                          v356 = 0;
                        v351 += 3 * v356;
                        if (!v355)
                          v352 = v353;
                      }
                      while (v352);
LABEL_460:
                      v357 = &v347[3 * v346];
                      if (v351 != v357)
                      {
                        v358 = *(_DWORD *)((*v351 & 0xFFFFFFFFFFFFFFF8) + 24);
                        v359 = *(_DWORD *)(v345 + 24);
                        if (((*v351 >> 1) & 3 | v358) <= v359 && v345 == (v351[1] & 0xFFFFFFFFFFFFFFF8))
                        {
                          v351 += 3;
                          if (v351 == v357)
                            goto LABEL_468;
                          v358 = *(_DWORD *)((*v351 & 0xFFFFFFFFFFFFFFF8) + 24);
                        }
                        if (v359 >= v358)
                        {
                          v360 = v351[2];
                          if (v360)
                          {
                            if (*(_QWORD *)(v360 + 8) == v342)
                              goto LABEL_470;
                          }
                        }
                      }
LABEL_468:
                      v344 = *(_QWORD *)(v344 + 104);
                      if (!v344)
                        goto LABEL_469;
                    }
                    v346 = 0;
LABEL_459:
                    v351 = &v347[3 * v346];
                    goto LABEL_460;
                  }
LABEL_469:
                  v341[48 * v340 + 41] = 1;
                  *(_BYTE *)(a1 + 656) = 1;
                }
              }
LABEL_470:
              ++v340;
            }
            while (v340 != v339);
          }
          sub_1C52549E8((uint64_t *)&v1325, v122, v1302);
          sub_1C52549E8((uint64_t *)&v1332, v122, v1302);
        }
        v1322 = v1324;
        v1323 = 0x800000000;
        sub_1C5254F3C((uint64_t *)&v1325, (uint64_t *)&v1332, (uint64_t)&v1322, 1);
        sub_1C5254F3C((uint64_t *)&v1332, (uint64_t *)&v1325, (uint64_t)&v1322, 1);
        v1319 = v1321;
        v1320 = 0x800000000;
        sub_1C5255114((uint64_t *)&v1325, v1307, (uint64_t)&v1319, v122);
        sub_1C5255114((uint64_t *)&v1332, v1307, (uint64_t)&v1319, 0);
        while ((_DWORD)v1320)
        {
          v361 = *(_QWORD *)(a1 + 288);
          v362 = *((_DWORD *)v1319 + v1320 - 1);
          LODWORD(v1320) = v1320 - 1;
          if ((v362 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v361 + 416)
            || (v363 = *(llvm::LiveInterval **)(*(_QWORD *)(v361 + 408) + 8 * (v362 & 0x7FFFFFFF))) == 0)
          {
            v363 = (llvm::LiveInterval *)sub_1C4851220(v361, v362);
            v364 = *(_QWORD *)(v361 + 304);
            v365 = *(_QWORD *)(v361 + 248);
            *(_QWORD *)v364 = v365;
            *(_QWORD *)(v364 + 8) = *(_QWORD *)(v365 + 40);
            *(_OWORD *)(v364 + 16) = *(_OWORD *)(v361 + 288);
            *(_QWORD *)(v364 + 32) = v361 + 312;
            llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v364);
            *(_DWORD *)(v364 + 184) = 0;
            v366 = *(_QWORD *)(v361 + 256);
            v22 = *(_BYTE *)(v366 + 16) == 0;
            v367 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v366 + 24)
                                                   + 16 * (*((_DWORD *)v363 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                      + 34);
            v369 = !v22 && v367 != 0;
            llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v361 + 304), v363, v369);
            llvm::LiveIntervals::computeDeadValues(v361, (uint64_t)v363, 0);
          }
          sub_1C5251D74(a1, v363, 0);
        }
        v370 = HIDWORD(v1310[0]);
        v371 = operator new(0x28uLL);
        *v371 = &off_1E8149BE0;
        v371[1] = a1;
        v371[2] = v122;
        v371[3] = v120;
        v371[4] = &v1332;
        LODWORD(__src) = v370;
        sub_1C5256F40(*(_QWORD *)(a1 + 600), *(_DWORD *)(a1 + 616), v370, v122, (uint64_t *)v120, (uint64_t)&v1332);
        v372 = *(_DWORD *)(a1 + 640);
        if (v372)
        {
          v373 = *(_QWORD *)(a1 + 624);
          v374 = v372 - 1;
          v375 = v374 & (37 * v370);
          v376 = *(_DWORD *)(v373 + 40 * v375);
          if (v376 == v370)
          {
LABEL_486:
            v377 = sub_1C620D894(v1300, (int *)&__src);
            v378 = v377[4];
            if ((_DWORD)v378)
            {
              v379 = (int *)*((_QWORD *)v377 + 1);
              v380 = 4 * v378;
              do
              {
                v381 = *v379++;
                v1312 = v381;
                (*(void (**)(_QWORD *, int *))(*v371 + 48))(v371, &v1312);
                v380 -= 4;
              }
              while (v380);
            }
          }
          else
          {
            v1084 = 1;
            while (v376 != -1)
            {
              v1085 = v375 + v1084++;
              v375 = v1085 & v374;
              v376 = *(_DWORD *)(v373 + 40 * v375);
              if (v376 == v370)
                goto LABEL_486;
            }
          }
        }
        (*(void (**)(_QWORD *))(*v371 + 40))(v371);
        v382 = v1310[0];
        v383 = operator new(0x28uLL);
        *v383 = &off_1E8149C28;
        v383[1] = a1;
        v383[2] = v120;
        v383[3] = v122;
        v383[4] = &v1325;
        LODWORD(__src) = v382;
        sub_1C5256F40(*(_QWORD *)(a1 + 600), *(_DWORD *)(a1 + 616), v382, v120, (uint64_t *)v122, (uint64_t)&v1325);
        v384 = *(_DWORD *)(a1 + 640);
        if (v384)
        {
          v385 = *(_QWORD *)(a1 + 624);
          v386 = v384 - 1;
          v387 = v386 & (37 * v382);
          v388 = *(_DWORD *)(v385 + 40 * v387);
          if (v388 == v382)
          {
LABEL_491:
            v389 = sub_1C620D894(v1300, (int *)&__src);
            v390 = v389[4];
            if ((_DWORD)v390)
            {
              v391 = (int *)*((_QWORD *)v389 + 1);
              v392 = 4 * v390;
              do
              {
                v393 = *v391++;
                v1312 = v393;
                (*(void (**)(_QWORD *, int *))(*v383 + 48))(v383, &v1312);
                v392 -= 4;
              }
              while (v392);
            }
          }
          else
          {
            v1086 = 1;
            while (v388 != -1)
            {
              v1087 = v387 + v1086++;
              v387 = v1087 & v386;
              v388 = *(_DWORD *)(v385 + 40 * v387);
              if (v388 == v382)
                goto LABEL_491;
            }
          }
        }
        (*(void (**)(_QWORD *))(*v383 + 40))(v383);
        v394 = *(_QWORD *)(a1 + 576);
        v395 = *(unsigned int *)(a1 + 592);
        v396 = sub_1C4E341F8(v394, *(_DWORD *)(a1 + 592), SHIDWORD(v1310[0]));
        if ((int *)(v394 + 32 * v395) == v396)
          goto LABEL_544;
        v397 = v396;
        v399 = (void **)(v396 + 2);
        v398 = (int *)*((_QWORD *)v396 + 1);
        v400 = v396[4];
        if (!(_DWORD)v400)
        {
          __src = &v1318;
          v1317 = 0x200000000;
          goto LABEL_529;
        }
        v401 = (char *)&v398[v400];
        v402 = *(_QWORD *)(a1 + 552);
        v403 = *(_QWORD **)v120;
        v404 = *(_QWORD *)v120 - 16;
        v405 = v1310[0];
        v406 = (_DWORD *)*((_QWORD *)v396 + 1);
        while (1)
        {
          v407 = *(_DWORD *)(a1 + 568);
          if (v407)
          {
            v408 = v407 - 1;
            v409 = (v407 - 1) & (37 * *v406);
            v410 = (int *)(v402 + 24 * v409);
            v411 = *v410;
            if (*v406 == *v410)
              goto LABEL_504;
            v412 = 1;
            while (v411 != -1)
            {
              v413 = v409 + v412++;
              v409 = v413 & v408;
              v410 = (int *)(v402 + 24 * (v413 & v408));
              v411 = *v410;
              if (*v406 == *v410)
                goto LABEL_504;
            }
          }
          v410 = (int *)(v402 + 24 * v407);
LABEL_504:
          v414 = *((_QWORD *)v410 + 1);
          v415 = *(_DWORD *)(v120 + 8);
          if (v415)
          {
            v416 = *(_DWORD *)((v414 & 0xFFFFFFFFFFFFFFF8) + 24) | (v414 >> 1) & 3;
            v417 = v403;
            v418 = *(unsigned int *)(v120 + 8);
            if (v416 < ((*(_QWORD *)(v404 + 24 * v415) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v404 + 24 * v415) & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 24)))
            {
              do
              {
                v419 = v418 >> 1;
                v420 = v417[3 * (v418 >> 1) + 1];
                LODWORD(v420) = (v420 >> 1) & 3 | *(_DWORD *)((v420 & 0xFFFFFFFFFFFFFFF8) + 24);
                v418 -= (v418 >> 1) + 1;
                v421 = v416 >= v420;
                if (v416 >= v420)
                  v422 = v419 + 1;
                else
                  v422 = 0;
                v417 += 3 * v422;
                if (!v421)
                  v418 = v419;
              }
              while (v418);
              goto LABEL_515;
            }
          }
          else
          {
            v415 = 0;
          }
          v417 = &v403[3 * v415];
LABEL_515:
          if (v417 != &v403[3 * v415]
            && ((*v417 >> 1) & 3 | *(_DWORD *)((*v417 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v414 & 0xFFFFFFFFFFFFFFF8) + 24) | (v414 >> 1) & 3)
            && (!v1310[1] || (v423 = v410[5]) == 0 || v423 == HIDWORD(v1310[1])))
          {
            v410[4] = v405;
            if (HIDWORD(v1310[1]))
              v410[5] = HIDWORD(v1310[1]);
          }
          if (++v406 == (_DWORD *)v401)
          {
            v424 = v397[4];
            __src = &v1318;
            v1317 = 0x200000000;
            if (&__src != v399 && v424)
            {
              v425 = &v1318;
              v426 = v424;
              if (v424 < 3)
                goto LABEL_526;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v1318, v424, 4);
              v426 = v397[4];
              if ((_DWORD)v426)
              {
                v425 = (uint64_t *)__src;
                v398 = (int *)*v399;
LABEL_526:
                memcpy(v425, v398, 4 * v426);
              }
              LODWORD(v1317) = v424;
              v398 = (int *)*v399;
            }
LABEL_529:
            if (v398 != v397 + 6)
              free(v398);
            *v397 = -2;
            *(int32x2_t *)(a1 + 584) = vadd_s32(*(int32x2_t *)(a1 + 584), (int32x2_t)0x1FFFFFFFFLL);
            v427 = v1310[0];
            v428 = *(_QWORD *)(a1 + 576);
            v429 = *(unsigned int *)(a1 + 592);
            v430 = sub_1C4E341F8(v428, *(_DWORD *)(a1 + 592), v1310[0]);
            if ((int *)(v428 + 32 * v429) != v430)
            {
              sub_1C4860A74((unsigned int *)v430 + 2, __src, (_BYTE *)__src + 4 * v1317);
              goto LABEL_542;
            }
            v1312 = v427;
            v1313 = &v1315;
            v1314 = 0x200000000;
            v431 = v1317;
            if ((_DWORD)v1317)
            {
              if (v1317 < 3)
              {
                v432 = &v1315;
                v433 = v1317;
                goto LABEL_536;
              }
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1313, (uint64_t)&v1315, v1317, 4);
              v433 = v1317;
              if ((_DWORD)v1317)
              {
                v432 = (uint64_t *)v1313;
LABEL_536:
                memcpy(v432, __src, 4 * v433);
              }
              LODWORD(v1314) = v431;
              v428 = *(_QWORD *)(a1 + 576);
              LODWORD(v429) = *(_DWORD *)(a1 + 592);
            }
            if ((_DWORD)v429)
            {
              v434 = (37 * v1312) & (v429 - 1);
              v435 = (_DWORD *)(v428 + 32 * v434);
              v436 = *v435;
              if (v1312 == *v435)
                goto LABEL_540;
              v1108 = 0;
              v1109 = 1;
              while (v436 != -1)
              {
                if (v1108)
                  v1110 = 0;
                else
                  v1110 = v436 == -2;
                if (v1110)
                  v1108 = v435;
                v1111 = v434 + v1109++;
                v434 = v1111 & (v429 - 1);
                v435 = (_DWORD *)(v428 + 32 * v434);
                v436 = *v435;
                if (v1312 == *v435)
                  goto LABEL_540;
              }
              if (v1108)
                v550 = v1108;
              else
                v550 = v435;
            }
            else
            {
              v550 = 0;
            }
            sub_1C620DAB0(v1299, v550, &v1312, (uint64_t)&v1313);
LABEL_540:
            if (v1313 != &v1315)
              free(v1313);
LABEL_542:
            if (__src != &v1318)
              free(__src);
LABEL_544:
            llvm::LiveRange::join((uint64_t *)v122, (unsigned int *)v120, (uint64_t)v1328, (uint64_t)v1337, (uint64_t *)&v1341);
            llvm::MachineRegisterInfo::clearKillFlags(*(_QWORD *)(a1 + 264), *(_DWORD *)(v122 + 112));
            llvm::MachineRegisterInfo::clearKillFlags(*(_QWORD *)(a1 + 264), *(_DWORD *)(v120 + 112));
            v437 = v1323;
            if ((_DWORD)v1323)
            {
              v438 = *(_QWORD *)(a1 + 288);
              v439 = (unint64_t *)v1322;
              v440 = *(_QWORD *)(v438 + 304);
              v441 = *(_QWORD *)(v438 + 248);
              *(_QWORD *)v440 = v441;
              *(_QWORD *)(v440 + 8) = *(_QWORD *)(v441 + 40);
              *(_OWORD *)(v440 + 16) = *(_OWORD *)(v438 + 288);
              *(_QWORD *)(v440 + 32) = v438 + 312;
              llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v440);
              *(_DWORD *)(v440 + 184) = 0;
              v442 = 8 * v437;
              do
              {
                v443 = *v439++;
                llvm::LiveRangeCalc::extend(*(llvm::LiveRangeCalc **)(v438 + 304), (uint64_t *)v122, v443, 0, 0, 0);
                v442 -= 8;
              }
              while (v442);
            }
            if (v1319 != v1321)
              free(v1319);
            if (v1322 != v1324)
              free(v1322);
            v140 = 1;
LABEL_155:
            if (v1330 != &v1331)
              free(v1330);
            if (v1328 != &v1329)
              free(v1328);
            if (v1339 != &v1340)
              free(v1339);
            if (v1337 != &v1338)
              free(v1337);
            if (v1341 != v1343)
              free(v1341);
            if ((v140 & 1) != 0)
            {
LABEL_166:
              v141 = (unsigned __int16 ***)v1311;
              if (BYTE1(v1310[2]))
                *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 24) + 16 * (v1310[0] & 0x7FFFFFFF)) = v1311 & 0xFFFFFFFFFFFFFFFBLL;
              if (v141)
              {
                v142 = *((unsigned __int16 *)*v141 + 12);
                v143 = *(_QWORD *)(a1 + 312);
                if (*(_DWORD *)(a1 + 320) != *(_DWORD *)(v143 + 24 * *((unsigned __int16 *)*v141 + 12)))
                  llvm::RegisterClassInfo::compute(v1301, v141);
                if (*(_BYTE *)(v143 + 24 * v142 + 8))
                {
                  v144 = v1310[0];
                  v145 = *(unsigned int *)(a1 + 1008);
                  if (v145 >= *(unsigned int *)(a1 + 1012))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod(v1298, v1297, v145 + 1, 4);
                    v145 = *(unsigned int *)(a1 + 1008);
                  }
                  *(_DWORD *)(*(_QWORD *)(a1 + 1000) + 4 * v145) = v144;
                  ++*(_DWORD *)(a1 + 1008);
                }
              }
              v146 = sub_1C477672C((uint64_t)v1307, (uint64_t)v1308);
              v147 = *(_QWORD *)(a1 + 832);
              v148 = 840;
              if (v147 == *(_QWORD *)(a1 + 824))
                v148 = 844;
              if (v146 != (_QWORD *)(v147 + 8 * *(unsigned int *)(a1 + v148)))
              {
                *v146 = -2;
                ++*(_DWORD *)(a1 + 848);
              }
              v6 = v1306;
              if (LODWORD(v1310[1]))
                sub_1C5253958(a1, v1310[0], v1310[0], LODWORD(v1310[1]));
              sub_1C5253958(a1, HIDWORD(v1310[0]), v1310[0], HIDWORD(v1310[1]));
              if (*(_QWORD *)(a1 + 648))
              {
                v149 = *(_QWORD *)(a1 + 288);
                v150 = v1310[0] & 0x7FFFFFFF;
                if (v150 >= *(unsigned int *)(v149 + 416)
                  || (v151 = *(_QWORD *)(*(_QWORD *)(v149 + 408) + 8 * v150)) == 0)
                {
                  v151 = sub_1C4851220(*(_QWORD *)(a1 + 288), v1310[0]);
                  v641 = *(_QWORD *)(v149 + 304);
                  v642 = *(_QWORD *)(v149 + 248);
                  *(_QWORD *)v641 = v642;
                  *(_QWORD *)(v641 + 8) = *(_QWORD *)(v642 + 40);
                  *(_OWORD *)(v641 + 16) = *(_OWORD *)(v149 + 288);
                  *(_QWORD *)(v641 + 32) = v149 + 312;
                  llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v641);
                  *(_DWORD *)(v641 + 184) = 0;
                  v643 = *(_QWORD *)(v149 + 256);
                  v22 = *(_BYTE *)(v643 + 16) == 0;
                  v644 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v643 + 24)
                                                         + 16 * (*(_DWORD *)(v151 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                            + 34);
                  v646 = !v22 && v644 != 0;
                  llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v149 + 304), (llvm::LiveInterval *)v151, v646);
                  llvm::LiveIntervals::computeDeadValues(v149, v151, 0);
                }
                v153 = (uint64_t *)(v151 + 104);
                v152 = *(_QWORD *)(v151 + 104);
                if (v152)
                {
                  do
                  {
                    if ((*(_QWORD *)(v152 + 112) & *v1302) != 0)
                      llvm::LiveIntervals::shrinkToUses(*(_QWORD **)(a1 + 288), v152, *(_DWORD *)(v151 + 112));
                    v152 = *(_QWORD *)(v152 + 104);
                  }
                  while (v152);
                  v154 = *v153;
                  if (*v153)
                  {
                    while (1)
                    {
                      v582 = v154;
                      if (!*(_DWORD *)(v154 + 8))
                        break;
LABEL_738:
                      v153 = (uint64_t *)(v154 + 104);
                      v154 = *(_QWORD *)(v154 + 104);
                      if (!v154)
                        goto LABEL_739;
                    }
                    while (1)
                    {
                      v580 = *(_QWORD *)(v582 + 96);
                      v154 = *(_QWORD *)(v582 + 104);
                      *(_QWORD *)(v582 + 96) = 0;
                      if (v580)
                      {
                        sub_1C47655E8(v580, *(_QWORD **)(v580 + 8));
                        MEMORY[0x1CAA32FC0](v580, 0x1020C4062D53EE8);
                      }
                      v581 = *(void **)(v582 + 64);
                      if (v581 != (void *)(v582 + 80))
                        free(v581);
                      if (*(_QWORD *)v582 == v582 + 16)
                      {
                        if (!v154)
                        {
LABEL_742:
                          *v153 = 0;
                          break;
                        }
                      }
                      else
                      {
                        free(*(void **)v582);
                        if (!v154)
                          goto LABEL_742;
                      }
                      v582 = v154;
                      if (*(_DWORD *)(v154 + 8))
                      {
                        *v153 = v154;
                        goto LABEL_738;
                      }
                    }
                  }
                }
              }
LABEL_739:
              v583 = HIDWORD(v1310[0]);
              v584 = *(_DWORD *)(a1 + 1064);
              if (v584)
              {
                v585 = *(_QWORD *)(a1 + 1048);
                v586 = v584 - 1;
                v587 = v586 & (37 * HIDWORD(v1310[0]));
                v588 = *(_DWORD *)(v585 + 4 * v587);
                if (HIDWORD(v1310[0]) == v588)
                {
LABEL_741:
                  *(_BYTE *)(a1 + 656) = 1;
LABEL_748:
                  v591 = *(_QWORD *)(a1 + 288);
                  v592 = v1310[0] & 0x7FFFFFFF;
                  if (v592 >= *(unsigned int *)(v591 + 416)
                    || (v593 = *(llvm::LiveInterval **)(*(_QWORD *)(v591 + 408) + 8 * v592)) == 0)
                  {
                    v593 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(a1 + 288), v1310[0]);
                    v610 = *(_QWORD *)(v591 + 304);
                    v611 = *(_QWORD *)(v591 + 248);
                    *(_QWORD *)v610 = v611;
                    *(_QWORD *)(v610 + 8) = *(_QWORD *)(v611 + 40);
                    *(_OWORD *)(v610 + 16) = *(_OWORD *)(v591 + 288);
                    *(_QWORD *)(v610 + 32) = v591 + 312;
                    llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v610);
                    *(_DWORD *)(v610 + 184) = 0;
                    v612 = *(_QWORD *)(v591 + 256);
                    v22 = *(_BYTE *)(v612 + 16) == 0;
                    v613 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v612 + 24)
                                                           + 16 * (*((_DWORD *)v593 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                              + 34);
                    v615 = !v22 && v613 != 0;
                    llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v591 + 304), v593, v615);
                    llvm::LiveIntervals::computeDeadValues(v591, (uint64_t)v593, 0);
                  }
                  sub_1C5251D74(a1, v593, 0);
                  v583 = HIDWORD(v1310[0]);
LABEL_751:
                  v594 = *(_QWORD *)(a1 + 288);
                  v595 = v583 & 0x7FFFFFFF;
                  v596 = *(_QWORD *)(v594 + 408);
                  v597 = *(_QWORD *)(v596 + 8 * v595);
                  if (v597)
                  {
                    v598 = *(_QWORD *)(v597 + 104);
                    if (v598)
                    {
                      do
                      {
                        v601 = *(_QWORD *)(v598 + 96);
                        v602 = *(_QWORD *)(v598 + 104);
                        *(_QWORD *)(v598 + 96) = 0;
                        if (v601)
                        {
                          sub_1C47655E8(v601, *(_QWORD **)(v601 + 8));
                          MEMORY[0x1CAA32FC0](v601, 0x1020C4062D53EE8);
                        }
                        v603 = *(void **)(v598 + 64);
                        if (v603 != (void *)(v598 + 80))
                          free(v603);
                        if (*(_QWORD *)v598 != v598 + 16)
                          free(*(void **)v598);
                        v598 = v602;
                      }
                      while (v602);
                    }
                    v599 = *(_QWORD *)(v597 + 96);
                    *(_QWORD *)(v597 + 96) = 0;
                    *(_QWORD *)(v597 + 104) = 0;
                    if (v599)
                    {
                      sub_1C47655E8(v599, *(_QWORD **)(v599 + 8));
                      MEMORY[0x1CAA32FC0](v599, 0x1020C4062D53EE8);
                    }
                    v600 = *(void **)(v597 + 64);
                    if (v600 != (void *)(v597 + 80))
                      free(v600);
                    if (*(_QWORD *)v597 != v597 + 16)
                      free(*(void **)v597);
                    MEMORY[0x1CAA32FC0](v597, 0x10A0C408DA535C6);
                    v596 = *(_QWORD *)(v594 + 408);
                    v583 = HIDWORD(v1310[0]);
                  }
                  *(_QWORD *)(v596 + 8 * v595) = 0;
                  (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 272) + 352))(*(_QWORD *)(a1 + 272), v583, LODWORD(v1310[0]), *(_QWORD *)(a1 + 256));
                  v13 = 1;
                  v5 = v1304;
                  v7 = (uint64_t)v1307;
LABEL_1678:
                  v5 |= v13;
                  goto LABEL_1679;
                }
                v589 = 1;
                while (v588 != -1)
                {
                  v590 = v587 + v589++;
                  v587 = v590 & v586;
                  v588 = *(_DWORD *)(v585 + 4 * v587);
                  if (HIDWORD(v1310[0]) == v588)
                    goto LABEL_741;
                }
              }
              if (*(_BYTE *)(a1 + 656))
                goto LABEL_748;
              goto LABEL_751;
            }
            goto LABEL_620;
          }
        }
      }
      v113 = *(_QWORD *)(a1 + 288);
      v114 = *(unsigned int *)(v113 + 416);
      if ((HIDWORD(v1310[0]) & 0x7FFFFFFFu) >= v114
        || (v115 = *(llvm::LiveInterval **)(*(_QWORD *)(v113 + 408) + 8 * (HIDWORD(v1310[0]) & 0x7FFFFFFF))) == 0)
      {
        v115 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(a1 + 288), SHIDWORD(v1310[0]));
        v622 = *(_QWORD *)(v113 + 304);
        v623 = *(_QWORD *)(v113 + 248);
        *(_QWORD *)v622 = v623;
        *(_QWORD *)(v622 + 8) = *(_QWORD *)(v623 + 40);
        *(_OWORD *)(v622 + 16) = *(_OWORD *)(v113 + 288);
        *(_QWORD *)(v622 + 32) = v113 + 312;
        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v622);
        *(_DWORD *)(v622 + 184) = 0;
        v624 = *(_QWORD *)(v113 + 256);
        v22 = *(_BYTE *)(v624 + 16) == 0;
        v625 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v624 + 24) + 16 * (*((_DWORD *)v115 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                  + 34);
        v627 = !v22 && v625 != 0;
        llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v113 + 304), v115, v627);
        llvm::LiveIntervals::computeDeadValues(v113, (uint64_t)v115, 0);
        v113 = *(_QWORD *)(a1 + 288);
        v88 = v1310[0];
        v114 = *(unsigned int *)(v113 + 416);
      }
      v116 = *((_DWORD *)v115 + 2);
      if ((v88 & 0x7FFFFFFFu) >= v114
        || (v117 = *(llvm::LiveInterval **)(*(_QWORD *)(v113 + 408) + 8 * (v88 & 0x7FFFFFFF))) == 0)
      {
        v117 = (llvm::LiveInterval *)sub_1C4851220(v113, v88);
        v628 = *(_QWORD *)(v113 + 304);
        v629 = *(_QWORD *)(v113 + 248);
        *(_QWORD *)v628 = v629;
        *(_QWORD *)(v628 + 8) = *(_QWORD *)(v629 + 40);
        *(_OWORD *)(v628 + 16) = *(_OWORD *)(v113 + 288);
        *(_QWORD *)(v628 + 32) = v113 + 312;
        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v628);
        *(_DWORD *)(v628 + 184) = 0;
        v630 = *(_QWORD *)(v113 + 256);
        v22 = *(_BYTE *)(v630 + 16) == 0;
        v631 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v630 + 24) + 16 * (*((_DWORD *)v117 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                  + 34);
        v633 = !v22 && v631 != 0;
        llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v113 + 304), v117, v633);
        llvm::LiveIntervals::computeDeadValues(v113, (uint64_t)v117, 0);
      }
      if (v116 > *((_DWORD *)v117 + 2) && (LODWORD(v1310[0]) - 0x40000000) <= 0xC0000000)
      {
        v1310[0] = __PAIR64__(v1310[0], HIDWORD(v1310[0]));
        v1310[1] = vrev64_s32((int32x2_t)v1310[1]);
        BYTE2(v1310[2]) ^= 1u;
      }
    }
    else
    {
      if (((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 352)
                       + (((unint64_t)LODWORD(v1310[0]) >> 3) & 0x1FFFFFF8)) >> SLOBYTE(v1310[0])) & 1) == 0)
        goto LABEL_114;
      v108 = *(_QWORD *)(a1 + 288);
      if ((HIDWORD(v1310[0]) & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v108 + 416)
        || (v109 = *(llvm::LiveInterval **)(*(_QWORD *)(v108 + 408) + 8 * (HIDWORD(v1310[0]) & 0x7FFFFFFF))) == 0)
      {
        v109 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(a1 + 288), SHIDWORD(v1310[0]));
        v616 = *(_QWORD *)(v108 + 304);
        v617 = *(_QWORD *)(v108 + 248);
        *(_QWORD *)v616 = v617;
        *(_QWORD *)(v616 + 8) = *(_QWORD *)(v617 + 40);
        *(_OWORD *)(v616 + 16) = *(_OWORD *)(v108 + 288);
        *(_QWORD *)(v616 + 32) = v108 + 312;
        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v616);
        *(_DWORD *)(v616 + 184) = 0;
        v618 = *(_QWORD *)(v108 + 256);
        v22 = *(_BYTE *)(v618 + 16) == 0;
        v619 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v618 + 24) + 16 * (*((_DWORD *)v109 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                  + 34);
        v621 = !v22 && v619 != 0;
        llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v108 + 304), v109, v621);
        llvm::LiveIntervals::computeDeadValues(v108, (uint64_t)v109, 0);
      }
      v110 = *((_DWORD *)v109 + 18);
      v11 = (uint64_t)v1308;
      if (v110 != 1)
      {
LABEL_114:
        LOBYTE(v1332) = 0;
        v111 = sub_1C525205C(a1, (uint64_t)&v1309, v11, &v1332);
        v112 = ((_BYTE)v1332 != 0) & ~v111;
        goto LABEL_1008;
      }
    }
    v118 = v1311;
    *(_QWORD *)(a1 + 648) = 0;
    *(_BYTE *)(a1 + 656) = 0;
    v107 = *(_QWORD *)(a1 + 288);
    v87 = HIDWORD(v1310[0]);
    if (v118)
      goto LABEL_123;
    v167 = v1310[0];
    v168 = HIDWORD(v1310[0]) & 0x7FFFFFFF;
    if (v168 >= *(unsigned int *)(v107 + 416) || (v169 = *(unsigned int **)(*(_QWORD *)(v107 + 408) + 8 * v168)) == 0)
    {
      v169 = (unsigned int *)sub_1C4851220(*(_QWORD *)(a1 + 288), SHIDWORD(v1310[0]));
      v994 = *(_QWORD *)(v107 + 304);
      v995 = *(_QWORD *)(v107 + 248);
      *(_QWORD *)v994 = v995;
      *(_QWORD *)(v994 + 8) = *(_QWORD *)(v995 + 40);
      *(_OWORD *)(v994 + 16) = *(_OWORD *)(v107 + 288);
      *(_QWORD *)(v994 + 32) = v107 + 312;
      llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v994);
      *(_DWORD *)(v994 + 184) = 0;
      v996 = *(_QWORD *)(v107 + 256);
      v22 = *(_BYTE *)(v996 + 16) == 0;
      v997 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v996 + 24) + 16 * (v169[28] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                + 34);
      v999 = !v22 && v997 != 0;
      llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v107 + 304), (llvm::LiveInterval *)v169, v999);
      llvm::LiveIntervals::computeDeadValues(v107, (uint64_t)v169, 0);
    }
    v1304 = v5;
    if (llvm::MachineRegisterInfo::isConstantPhysReg(*(_QWORD **)(a1 + 264), v167))
      goto LABEL_203;
    v219 = *(_QWORD *)(a1 + 272);
    if (v219)
      v220 = (_QWORD *)(v219 + 8);
    else
      v220 = 0;
    v221 = *(unsigned int *)(*v220 + 24 * v167 + 16);
    v222 = (_WORD *)(v220[6] + ((v221 >> 3) & 0x1FFFFFFE));
    v223 = *v222 + (v221 & 0xF) * v167;
    while (1)
    {
      ++v222;
      v224 = v223;
      v225 = *(_QWORD *)(a1 + 272);
      v226 = v225 ? v225 + 8 : 0;
      v227 = (unsigned __int16 *)(*(_QWORD *)(v226 + 40) + 4 * v223);
      v228 = *v227;
      v229 = v227[1];
      while (v228)
      {
        v230 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 352) + (((unint64_t)v228 >> 3) & 0x1FFFFFF8)) >> v228;
        v228 = v229;
        v229 = 0;
        if ((v230 & 1) == 0)
          goto LABEL_620;
      }
      v231 = sub_1C50E4F00(*(llvm::LiveIntervals **)(a1 + 288), v224);
      if (*((_DWORD *)v231 + 2))
      {
        if (llvm::LiveRange::overlapsFrom((uint64_t)v169, (uint64_t)v231, *(_QWORD **)v231))
          break;
      }
      v223 = *v222 + v224;
      if (!*v222)
      {
        v1332 = &v1334;
        v1333 = 0x600000000;
        v1336 = 0;
        if (llvm::LiveIntervals::checkRegMaskInterference(*(_QWORD *)(a1 + 288), (uint64_t)v169, (uint64_t)&v1332)
          && ((*((_QWORD *)v1332 + (v167 >> 6)) >> v167) & 1) == 0)
        {
          if (v1332 != &v1334)
            free(v1332);
          break;
        }
        if (v1332 != &v1334)
          free(v1332);
LABEL_203:
        v170 = *(_QWORD *)(a1 + 264);
        if (BYTE2(v1310[2]))
        {
          if ((v87 & 0x80000000) != 0)
            v171 = (uint64_t *)(*(_QWORD *)(v170 + 24) + 16 * v168 + 8);
          else
            v171 = (uint64_t *)(*(_QWORD *)(v170 + 272) + 8 * v87);
          v276 = *v171;
          if (v276
            && ((*(_BYTE *)(v276 + 3) & 1) != 0
             || (v276 = *(_QWORD *)(v276 + 24)) != 0 && (*(_BYTE *)(v276 + 3) & 1) != 0))
          {
            v277 = *(_QWORD *)(v276 + 8);
          }
          else
          {
            v277 = 0;
          }
          goto LABEL_356;
        }
        if (!llvm::MachineRegisterInfo::hasOneNonDBGUse(v170, v87))
          break;
        v269 = **(_QWORD **)v169;
        if ((v269 & 6) == 0)
          break;
        v270 = *(_QWORD *)(*(_QWORD *)v169 + 24 * v169[2] - 16);
        if ((v270 & 6) == 0)
          break;
        v271 = *(_QWORD *)(a1 + 288);
        v272 = sub_1C499C548(*(_QWORD *)(v271 + 288), v269);
        v273 = sub_1C499C548(*(_QWORD *)(v271 + 288), v270);
        if (!v272 || v272 != v273)
          break;
        v274 = *(_QWORD **)(a1 + 264);
        if ((v87 & 0x80000000) != 0)
          v275 = (unint64_t *)(v274[3] + 16 * v168 + 8);
        else
          v275 = (unint64_t *)(v274[34] + 8 * v87);
        v444 = *v275;
        if (!v444)
        {
LABEL_554:
          if ((v87 & 0x80000000) != 0)
            v445 = (uint64_t *)(v274[3] + 16 * v168 + 8);
          else
            v445 = (uint64_t *)(v274[34] + 8 * v87);
          v446 = *v445;
          if ((*(_BYTE *)(v446 + 3) & 0x81) != 0)
          {
            do
              v446 = *(_QWORD *)(v446 + 24);
            while ((*(_DWORD *)v446 & 0x81000000) != 0);
          }
          v277 = *(_QWORD *)(v446 + 8);
          v447 = *(_WORD *)(v277 + 44);
          v448 = v277;
          if ((v447 & 4) != 0)
          {
            do
              v448 = *(_QWORD *)v448 & 0xFFFFFFFFFFFFFFF8;
            while ((*(_WORD *)(v448 + 44) & 4) != 0);
          }
          v449 = v277;
          if ((v447 & 8) != 0)
          {
            do
              v449 = *(_QWORD *)(v449 + 8);
            while ((*(_WORD *)(v449 + 44) & 8) != 0);
          }
          v450 = *(_QWORD *)(*(_QWORD *)(a1 + 288) + 288);
          v451 = *(_QWORD *)(v449 + 8);
          if (v448 != v451)
          {
            do
            {
              v452 = **(unsigned __int16 **)(v448 + 16);
              v29 = v452 > 0x17;
              v453 = (1 << v452) & 0x83E000;
              if (v29 || v453 == 0)
                goto LABEL_568;
              v448 = *(_QWORD *)(v448 + 8);
            }
            while (v448 != v451);
            v448 = v451;
          }
LABEL_568:
          v455 = *(_QWORD *)(v450 + 368);
          v456 = *(unsigned int *)(v450 + 384);
          if ((_DWORD)v456)
          {
            LODWORD(v457) = ((v448 >> 4) ^ (v448 >> 9)) & (v456 - 1);
            v458 = (uint64_t *)(v455 + 16 * v457);
            v459 = *v458;
            if (v448 != *v458)
            {
              v460 = 1;
              do
              {
                if (v459 == -4096)
                  goto LABEL_574;
                v461 = v457 + v460++;
                v457 = v461 & (v456 - 1);
                v459 = *(_QWORD *)(v455 + 16 * v457);
              }
              while (v448 != v459);
              v458 = (uint64_t *)(v455 + 16 * v457);
            }
          }
          else
          {
LABEL_574:
            v458 = (uint64_t *)(v455 + 16 * v456);
          }
          v462 = v458[1];
          v463 = *(_WORD *)(v444 + 44);
          v464 = v444;
          if ((v463 & 4) != 0)
          {
            do
              v464 = *(_QWORD *)v464 & 0xFFFFFFFFFFFFFFF8;
            while ((*(_WORD *)(v464 + 44) & 4) != 0);
          }
          if ((v463 & 8) != 0)
          {
            do
              v444 = *(_QWORD *)(v444 + 8);
            while ((*(_WORD *)(v444 + 44) & 8) != 0);
          }
          v465 = *(_QWORD *)(v444 + 8);
          if (v464 != v465)
          {
            do
            {
              v466 = **(unsigned __int16 **)(v464 + 16);
              v29 = v466 > 0x17;
              v467 = (1 << v466) & 0x83E000;
              if (v29 || v467 == 0)
                goto LABEL_584;
              v464 = *(_QWORD *)(v464 + 8);
            }
            while (v464 != v465);
            v464 = v465;
          }
LABEL_584:
          if ((_DWORD)v456)
          {
            LODWORD(v469) = ((v464 >> 4) ^ (v464 >> 9)) & (v456 - 1);
            v470 = (uint64_t *)(v455 + 16 * v469);
            v471 = *v470;
            if (v464 != *v470)
            {
              v472 = 1;
              do
              {
                if (v471 == -4096)
                  goto LABEL_590;
                v473 = v469 + v472++;
                v469 = v473 & (v456 - 1);
                v471 = *(_QWORD *)(v455 + 16 * v469);
              }
              while (v464 != v471);
              v470 = (uint64_t *)(v455 + 16 * v469);
            }
          }
          else
          {
LABEL_590:
            v470 = (uint64_t *)(v455 + 16 * v456);
          }
          v474 = v462 & 0xFFFFFFFFFFFFFFF8 | 4;
          v475 = v470[1] & 0xFFFFFFFFFFFFFFF8;
          isConstantPhysReg = llvm::MachineRegisterInfo::isConstantPhysReg(v274, v167);
          v477 = *(_QWORD **)(a1 + 288);
          if (!isConstantPhysReg)
          {
            v478 = (_QWORD *)(v477[36] + 344);
            v479 = v475;
            do
            {
              v479 = *(_QWORD *)(v479 + 8);
              if ((_QWORD *)v479 == v478)
              {
                v480 = *v478 & 0xFFFFFFFFFFFFFFF9;
                goto LABEL_598;
              }
            }
            while (!*(_QWORD *)(v479 + 16));
            v480 = v479 & 0xFFFFFFFFFFFFFFF9 | 4;
            if (v480 == v474)
              goto LABEL_609;
            do
            {
LABEL_598:
              if (v480 < 8)
                v481 = 0;
              else
                v481 = *(_QWORD *)((v480 & 0xFFFFFFFFFFFFFFF8) + 16);
              if (llvm::MachineInstr::findRegisterUseOperandIdx(v481, v167, 0, *(_QWORD *)(a1 + 272)) != -1)
                goto LABEL_620;
              v482 = v480 & 0xFFFFFFFFFFFFFFF8;
              while (1)
              {
                v482 = *(_QWORD *)(v482 + 8);
                if ((_QWORD *)v482 == v478)
                  break;
                if (*(_QWORD *)(v482 + 16))
                {
                  v480 = v482 & 0xFFFFFFFFFFFFFFF9 | (2 * ((v480 >> 1) & 3));
                  goto LABEL_607;
                }
              }
              v480 = *v478 & 0xFFFFFFFFFFFFFFF9;
LABEL_607:
              ;
            }
            while (v480 != v474);
            v477 = *(_QWORD **)(a1 + 288);
          }
LABEL_609:
          v483 = v475 | 4;
          llvm::LiveIntervals::removePhysRegDefAt(v477, v167, v474);
          v484 = *(_QWORD *)(a1 + 272);
          if (v484)
            v485 = (_QWORD *)(v484 + 8);
          else
            v485 = 0;
          v486 = *(unsigned int *)(*v485 + 24 * v167 + 16);
          v487 = (_WORD *)(v485[6] + ((v486 >> 3) & 0x1FFFFFFE));
          v489 = *v487;
          v488 = v487 + 1;
          v490 = v489 + (v486 & 0xF) * v167;
          do
          {
            v491 = sub_1C50E4F00(*(llvm::LiveIntervals **)(a1 + 288), v490);
            v492 = *(_QWORD *)(a1 + 288) + 312;
            if (*((_QWORD *)v491 + 12))
            {
              v1332 = v491;
              sub_1C510A3C0((uint64_t *)&v1332, v483, v492, 0);
            }
            else
            {
              v1332 = v491;
              sub_1C510A6B8((uint64_t **)&v1332, v483, v492, 0);
            }
            v493 = *v488++;
            v490 += v493;
          }
          while (v493);
LABEL_356:
          sub_1C5251F5C(a1, v277);
          llvm::MachineRegisterInfo::clearKillFlags(*(_QWORD *)(a1 + 264), HIDWORD(v1310[0]));
          goto LABEL_166;
        }
        if ((*(_BYTE *)(v444 + 3) & 1) == 0)
        {
          v444 = *(_QWORD *)(v444 + 24);
          if (!v444)
            goto LABEL_554;
          if ((*(_BYTE *)(v444 + 3) & 1) == 0)
          {
            v444 = 0;
            goto LABEL_554;
          }
        }
        v444 = *(_QWORD *)(v444 + 8);
        goto LABEL_554;
      }
    }
LABEL_620:
    LOBYTE(v1312) = 0;
    v494 = v1308;
    if ((sub_1C525205C(a1, (uint64_t)&v1309, (uint64_t)v1308, &v1312) & 1) != 0)
      goto LABEL_621;
    v5 = v1304;
    v6 = v1306;
    if (LOBYTE(v1310[2]) || !v1311)
      goto LABEL_1002;
    v495 = *(_QWORD *)(a1 + 288);
    v496 = BYTE2(v1310[2]);
    v497 = v1310[0];
    v498 = HIDWORD(v1310[0]);
    if (BYTE2(v1310[2]))
      v499 = v1310[0];
    else
      v499 = HIDWORD(v1310[0]);
    v500 = *(unsigned int *)(v495 + 416);
    if ((v499 & 0x7FFFFFFFu) >= v500
      || (v501 = *(llvm::LiveInterval **)(*(_QWORD *)(v495 + 408) + 8 * (v499 & 0x7FFFFFFF))) == 0)
    {
      v501 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(a1 + 288), v499);
      v1048 = *(_QWORD *)(v495 + 304);
      v1049 = *(_QWORD *)(v495 + 248);
      *(_QWORD *)v1048 = v1049;
      *(_QWORD *)(v1048 + 8) = *(_QWORD *)(v1049 + 40);
      *(_OWORD *)(v1048 + 16) = *(_OWORD *)(v495 + 288);
      *(_QWORD *)(v1048 + 32) = v495 + 312;
      llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v1048);
      *(_DWORD *)(v1048 + 184) = 0;
      v494 = v1308;
      v1050 = *(_QWORD *)(v495 + 256);
      v22 = *(_BYTE *)(v1050 + 16) == 0;
      v1051 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v1050 + 24) + 16 * (*((_DWORD *)v501 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                 + 34);
      v1053 = !v22 && v1051 != 0;
      llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v495 + 304), v501, v1053);
      llvm::LiveIntervals::computeDeadValues(v495, (uint64_t)v501, 0);
      v495 = *(_QWORD *)(a1 + 288);
      v496 = BYTE2(v1310[2]);
      v498 = HIDWORD(v1310[0]);
      v497 = v1310[0];
      v500 = *(unsigned int *)(v495 + 416);
    }
    if (v496)
      v502 = v498;
    else
      v502 = v497;
    if ((v502 & 0x7FFFFFFFu) >= v500 || (v503 = *(_QWORD *)(*(_QWORD *)(v495 + 408) + 8 * (v502 & 0x7FFFFFFF))) == 0)
    {
      v503 = sub_1C4851220(v495, v502);
      v1054 = *(_QWORD *)(v495 + 304);
      v1055 = *(_QWORD *)(v495 + 248);
      *(_QWORD *)v1054 = v1055;
      *(_QWORD *)(v1054 + 8) = *(_QWORD *)(v1055 + 40);
      *(_OWORD *)(v1054 + 16) = *(_OWORD *)(v495 + 288);
      *(_QWORD *)(v1054 + 32) = v495 + 312;
      llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v1054);
      *(_DWORD *)(v1054 + 184) = 0;
      v494 = v1308;
      v1056 = *(_QWORD *)(v495 + 256);
      v22 = *(_BYTE *)(v1056 + 16) == 0;
      v1057 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v1056 + 24) + 16 * (*(_DWORD *)(v503 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                 + 34);
      v1059 = !v22 && v1057 != 0;
      llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v495 + 304), (llvm::LiveInterval *)v503, v1059);
      llvm::LiveIntervals::computeDeadValues(v495, v503, 0);
      v495 = *(_QWORD *)(a1 + 288);
    }
    v504 = *(_QWORD *)(v495 + 288);
    v505 = *((_WORD *)v494 + 22);
    v506 = (unint64_t)v494;
    if ((v505 & 4) != 0)
    {
      do
        v506 = *(_QWORD *)v506 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v506 + 44) & 4) != 0);
    }
    if ((v505 & 8) != 0)
    {
      do
        v494 = (llvm::MachineInstr *)*((_QWORD *)v494 + 1);
      while ((*((_WORD *)v494 + 22) & 8) != 0);
    }
    v507 = *((_QWORD *)v494 + 1);
    if (v506 != v507)
    {
      while (1)
      {
        v508 = **(unsigned __int16 **)(v506 + 16);
        v29 = v508 > 0x17;
        v509 = (1 << v508) & 0x83E000;
        if (v29 || v509 == 0)
          break;
        v506 = *(_QWORD *)(v506 + 8);
        if (v506 == v507)
        {
          v506 = *((_QWORD *)v494 + 1);
          break;
        }
      }
    }
    v511 = *(_QWORD *)(v504 + 368);
    v512 = *(unsigned int *)(v504 + 384);
    if ((_DWORD)v512)
    {
      LODWORD(v513) = ((v506 >> 4) ^ (v506 >> 9)) & (v512 - 1);
      v514 = (uint64_t *)(v511 + 16 * v513);
      v515 = *v514;
      if (v506 == *v514)
        goto LABEL_652;
      v516 = 1;
      while (v515 != -4096)
      {
        v517 = v513 + v516++;
        v513 = v517 & (v512 - 1);
        v515 = *(_QWORD *)(v511 + 16 * v513);
        if (v506 == v515)
        {
          v514 = (uint64_t *)(v511 + 16 * v513);
          goto LABEL_652;
        }
      }
    }
    v514 = (uint64_t *)(v511 + 16 * v512);
LABEL_652:
    v518 = v514[1] & 0xFFFFFFFFFFFFFFF8;
    v519 = *(_DWORD *)(v503 + 8);
    v520 = *(uint64_t **)v503;
    if (!v519)
    {
      v519 = 0;
LABEL_662:
      v524 = &v520[3 * v519];
      goto LABEL_663;
    }
    v521 = v520[3 * v519 - 2];
    v522 = *(_DWORD *)(v518 + 24) | 2;
    v523 = (v521 >> 1) & 3 | *(_DWORD *)((v521 & 0xFFFFFFFFFFFFFFF8) + 24);
    v524 = *(uint64_t **)v503;
    v525 = *(unsigned int *)(v503 + 8);
    if (v522 >= v523)
      goto LABEL_662;
    do
    {
      v526 = v525 >> 1;
      v527 = v524[3 * (v525 >> 1) + 1];
      LODWORD(v527) = (v527 >> 1) & 3 | *(_DWORD *)((v527 & 0xFFFFFFFFFFFFFFF8) + 24);
      v525 -= (v525 >> 1) + 1;
      v528 = v522 >= v527;
      if (v522 >= v527)
        v529 = v526 + 1;
      else
        v529 = 0;
      v524 += 3 * v529;
      if (!v528)
        v525 = v526;
    }
    while (v525);
LABEL_663:
    if (v524 == &v520[3 * v519])
      goto LABEL_843;
    v530 = *(_DWORD *)(v518 + 24);
    if (((*v524 >> 1) & 3 | *(_DWORD *)((*v524 & 0xFFFFFFFFFFFFFFF8) + 24)) > (v530 | 2u))
      goto LABEL_843;
    v531 = v524[2];
    if (*(_QWORD *)(v531 + 8) != (v518 | 4))
      goto LABEL_843;
    v532 = *((_DWORD *)v501 + 2);
    v533 = *(_QWORD **)v501;
    if (!v532)
    {
      v532 = 0;
LABEL_676:
      v537 = &v533[3 * v532];
      goto LABEL_677;
    }
    v534 = v533[3 * v532 - 2];
    v535 = v530 | 1;
    v536 = (v534 >> 1) & 3 | *(_DWORD *)((v534 & 0xFFFFFFFFFFFFFFF8) + 24);
    v537 = *(_QWORD **)v501;
    v538 = *((unsigned int *)v501 + 2);
    if ((v530 | 1u) >= v536)
      goto LABEL_676;
    do
    {
      v539 = v538 >> 1;
      v540 = v537[3 * (v538 >> 1) + 1];
      LODWORD(v540) = (v540 >> 1) & 3 | *(_DWORD *)((v540 & 0xFFFFFFFFFFFFFFF8) + 24);
      v538 -= (v538 >> 1) + 1;
      v541 = v535 >= v540;
      if (v535 >= v540)
        v542 = v539 + 1;
      else
        v542 = 0;
      v537 += 3 * v542;
      if (!v541)
        v538 = v539;
    }
    while (v538);
LABEL_677:
    if (v537 != &v533[3 * v532]
      && ((*v537 >> 1) & 3 | *(_DWORD *)((*v537 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (v530 | 1u))
    {
      v1291 = v537[2];
      v543 = *(_QWORD *)(v1291 + 8);
      v544 = v543 < 8 ? 0 : *(_QWORD *)((v543 & 0xFFFFFFFFFFFFFFF8) + 16);
      if (llvm::CoalescerPair::isCoalescable((llvm::CoalescerPair *)&v1309, (const llvm::MachineInstr *)v544))
      {
        if (**(_WORD **)(v544 + 16) == 19)
        {
          v545 = *(_DWORD **)(v544 + 32);
          if ((*v545 & 0xFFF00) == 0 && (v545[8] & 0xFFF00) == 0)
          {
            v546 = *(_QWORD *)(v1291 + 8);
            v547 = (v546 >> 1) & 3;
            v548 = v546 & 0xFFFFFFFFFFFFFFF8;
            if (v547)
              v549 = v548 | (2 * (v547 - 1));
            else
              v549 = *(_QWORD *)v548 | 6;
            v557 = *(_DWORD *)(v503 + 8);
            v558 = *(uint64_t **)v503;
            if (v557)
            {
              v559 = v558[3 * v557 - 2];
              v560 = *(_DWORD *)((v549 & 0xFFFFFFFFFFFFFFF8) + 24) | (v549 >> 1) & 3;
              v561 = (v559 >> 1) & 3 | *(_DWORD *)((v559 & 0xFFFFFFFFFFFFFFF8) + 24);
              v562 = *(uint64_t **)v503;
              v563 = *(unsigned int *)(v503 + 8);
              if (v560 < v561)
              {
                do
                {
                  v564 = v563 >> 1;
                  v565 = v562[3 * (v563 >> 1) + 1];
                  LODWORD(v565) = (v565 >> 1) & 3 | *(_DWORD *)((v565 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v563 -= (v563 >> 1) + 1;
                  v566 = v560 >= v565;
                  if (v560 >= v565)
                    v567 = v564 + 1;
                  else
                    v567 = 0;
                  v562 += 3 * v567;
                  if (!v566)
                    v563 = v564;
                }
                while (v563);
                goto LABEL_832;
              }
            }
            else
            {
              v557 = 0;
            }
            v562 = &v558[3 * v557];
LABEL_832:
            if (v562 == &v558[3 * v557]
              || ((*v562 >> 1) & 3 | *(_DWORD *)((*v562 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v549 & 0xFFFFFFFFFFFFFFF8) + 24) | (v549 >> 1) & 3))
            {
              goto LABEL_843;
            }
            v647 = v562[1];
            v648 = (v647 >> 1) & 3;
            v1272 = (void *)v647;
            v649 = v647 & 0xFFFFFFFFFFFFFFF8;
            v650 = v648 ? v649 | (2 * (v648 - 1)) : *(_QWORD *)v649 | 6;
            if (v650 < 8)
              goto LABEL_843;
            v651 = *(_QWORD *)((v650 & 0xFFFFFFFFFFFFFFF8) + 16);
            if (!v651)
              goto LABEL_843;
            if (*(_QWORD *)(v651 + 24) != *((_QWORD *)v1308 + 3) || v562 + 3 != v524)
              goto LABEL_843;
            v1269 = *(_QWORD *)((v650 & 0xFFFFFFFFFFFFFFF8) + 16);
            v1271 = (int *)v501;
            v1284 = v648;
            v922 = *v524;
            *(_QWORD *)(v531 + 8) = v1272;
            v1325 = v1272;
            v1275 = v922;
            v1280 = v649;
            v1326 = v922;
            v1327[0] = v531;
            llvm::LiveRange::addSegment(v503, (uint64_t)&v1325);
            v923 = v562[2];
            if (v531 != v923)
              llvm::LiveRange::MergeValueNumberInto(v503, v531, v923);
            v924 = *(_QWORD *)(v503 + 104);
            v925 = v1272;
            if (v924)
            {
              while (1)
              {
                v926 = *(_DWORD *)(v924 + 8);
                v927 = *(unint64_t **)v924;
                if (!v926)
                  break;
                v928 = v927[3 * v926 - 2];
                v929 = *(_DWORD *)(v518 + 24) | 2;
                v930 = (v928 >> 1) & 3 | *(_DWORD *)((v928 & 0xFFFFFFFFFFFFFFF8) + 24);
                v931 = *(unint64_t **)v924;
                v932 = *(unsigned int *)(v924 + 8);
                if (v929 >= v930)
                {
                  v937 = *(unsigned int *)(v924 + 8);
LABEL_1212:
                  v931 = &v927[3 * v937];
                  goto LABEL_1213;
                }
                do
                {
                  v933 = v932 >> 1;
                  v934 = v931[3 * (v932 >> 1) + 1];
                  LODWORD(v934) = (v934 >> 1) & 3 | *(_DWORD *)((v934 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v932 -= (v932 >> 1) + 1;
                  v935 = v929 >= v934;
                  if (v929 >= v934)
                    v936 = v933 + 1;
                  else
                    v936 = 0;
                  v931 += 3 * v936;
                  if (!v935)
                    v932 = v933;
                }
                while (v932);
                v937 = *(unsigned int *)(v924 + 8);
LABEL_1213:
                v938 = (char *)&v927[3 * v937];
                if (v931 != (unint64_t *)v938)
                {
                  v939 = *v931;
                  v940 = *v931 & 0xFFFFFFFFFFFFFFF8;
                  v941 = (*v931 >> 1) & 3 | *(_DWORD *)(v940 + 24);
                  if (v941 <= (*(_DWORD *)(v518 + 24) | 2u))
                  {
                    v942 = v931[1];
                    if (v940 == (v942 & 0xFFFFFFFFFFFFFFF8))
                    {
                      if (v926)
                      {
                        v962 = &v927[3 * v937];
                        if (v941 < ((*((_QWORD *)v938 - 2) >> 1) & 3 | *(_DWORD *)((*((_QWORD *)v938 - 2) & 0xFFFFFFFFFFFFFFF8)
                                                                                                + 24)))
                        {
                          v962 = *(unint64_t **)v924;
                          do
                          {
                            v963 = v937 >> 1;
                            v964 = v962[3 * (v937 >> 1) + 1];
                            LODWORD(v964) = (v964 >> 1) & 3 | *(_DWORD *)((v964 & 0xFFFFFFFFFFFFFFF8)
                                                                                      + 24);
                            v937 -= (v937 >> 1) + 1;
                            v965 = v941 >= v964;
                            if (v941 >= v964)
                              v966 = v963 + 1;
                            else
                              v966 = 0;
                            v962 += 3 * v966;
                            if (!v965)
                              v937 = v963;
                          }
                          while (v937);
                        }
                      }
                      else
                      {
                        v962 = &v927[3 * v937];
                      }
                      v967 = (void *)v962[1];
                      v968 = v962[2];
                      if (*v962 == v939)
                      {
                        if (v967 == (void *)v942)
                        {
                          if (v938 != (char *)(v962 + 3))
                          {
                            memmove(v962, v962 + 3, v938 - (char *)(v962 + 3));
                            v926 = *(_DWORD *)(v924 + 8);
                          }
                          *(_DWORD *)(v924 + 8) = v926 - 1;
                          llvm::LiveRange::removeValNoIfDead(v924, v968);
                        }
                        else
                        {
                          *v962 = v942;
                        }
                        v925 = v1272;
                      }
                      else
                      {
                        v962[1] = v939;
                        v925 = v1272;
                        if (v967 != (void *)v942)
                        {
                          v1332 = (void *)v942;
                          v1333 = (uint64_t)v967;
                          v1334 = v968;
                          sub_1C510F69C(v924, (uint64_t)(v962 + 3), (unint64_t)&v1332);
                        }
                      }
                      goto LABEL_1278;
                    }
                  }
                }
                if (!v926)
                  goto LABEL_1228;
                v943 = *(_DWORD *)(v1280 + 24) | v1284;
                if (v943 >= ((*((_QWORD *)v938 - 2) >> 1) & 3 | *(_DWORD *)((*((_QWORD *)v938 - 2) & 0xFFFFFFFFFFFFFFF8)
                                                                                         + 24)))
                  goto LABEL_1228;
                v944 = *(char **)v924;
                do
                {
                  v945 = v944;
                  v946 = v937 >> 1;
                  v947 = *(_QWORD *)&v944[24 * (v937 >> 1) + 8];
                  LODWORD(v947) = (v947 >> 1) & 3 | *(_DWORD *)((v947 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v937 -= (v937 >> 1) + 1;
                  v948 = v943 >= v947;
                  if (v943 >= v947)
                    v949 = v946 + 1;
                  else
                    v949 = 0;
                  v944 += 24 * v949;
                  if (!v948)
                    v937 = v946;
                }
                while (v937);
                if (v944 == v938
                  || ((*(_QWORD *)v944 >> 1) & 3 | *(_DWORD *)((*(_QWORD *)v944 & 0xFFFFFFFFFFFFFFF8)
                                                                           + 24)) > (*(_DWORD *)(v1280 + 24) | v1284)
                  || !*(_QWORD *)&v945[24 * v949 + 16])
                {
LABEL_1228:
                  v950 = *(_QWORD *)(a1 + 288);
                  v951 = sub_1C499C548(*(_QWORD *)(v950 + 288), (unint64_t)v925);
                  llvm::LiveRange::extendInBlock(v924, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v950 + 288) + 392) + 16 * *(unsigned int *)(v951 + 24)), (uint64_t)v925);
                  v926 = *(_DWORD *)(v924 + 8);
                  v927 = *(unint64_t **)v924;
                }
                if (!v926)
                {
                  LODWORD(v952) = 0;
LABEL_1253:
                  v956 = &v927[3 * v952];
                  goto LABEL_1254;
                }
                v952 = v926;
                v953 = v927[3 * v926 - 2];
                v954 = *(_DWORD *)(v518 + 24) | 2;
                v955 = (v953 >> 1) & 3 | *(_DWORD *)((v953 & 0xFFFFFFFFFFFFFFF8) + 24);
                v956 = v927;
                v957 = v952;
                if (v954 >= v955)
                  goto LABEL_1253;
                do
                {
                  v958 = v957 >> 1;
                  v959 = v956[3 * (v957 >> 1) + 1];
                  LODWORD(v959) = (v959 >> 1) & 3 | *(_DWORD *)((v959 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v957 -= (v957 >> 1) + 1;
                  v960 = v954 >= v959;
                  if (v954 >= v959)
                    v961 = v958 + 1;
                  else
                    v961 = 0;
                  v956 += 3 * v961;
                  if (!v960)
                    v957 = v958;
                }
                while (v957);
LABEL_1254:
                if (v956 == &v927[3 * v952]
                  || ((*v956 >> 1) & 3 | *(_DWORD *)((*v956 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v518 + 24) | 2u))
                {
                  v969 = 0;
                }
                else
                {
                  v969 = v956[2];
                }
                v1341 = v925;
                v1342 = v1275;
                v1343[0] = v969;
                llvm::LiveRange::addSegment(v924, (uint64_t)&v1341);
                v970 = *(_QWORD *)(v1291 + 8);
                v971 = (v970 >> 1) & 3;
                v972 = v970 & 0xFFFFFFFFFFFFFFF8;
                if (v971)
                  v973 = v972 | (2 * (v971 - 1));
                else
                  v973 = *(_QWORD *)v972 | 6;
                v974 = *(_DWORD *)(v924 + 8);
                v975 = *(unint64_t **)v924;
                if (v974)
                {
                  v976 = v975[3 * v974 - 2];
                  v977 = *(_DWORD *)((v973 & 0xFFFFFFFFFFFFFFF8) + 24) | (v973 >> 1) & 3;
                  v978 = (v976 >> 1) & 3 | *(_DWORD *)((v976 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v979 = *(unint64_t **)v924;
                  v980 = *(unsigned int *)(v924 + 8);
                  if (v977 < v978)
                  {
                    do
                    {
                      v981 = v980 >> 1;
                      v982 = v979[3 * (v980 >> 1) + 1];
                      LODWORD(v982) = (v982 >> 1) & 3 | *(_DWORD *)((v982 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v980 -= (v980 >> 1) + 1;
                      v983 = v977 >= v982;
                      if (v977 >= v982)
                        v984 = v981 + 1;
                      else
                        v984 = 0;
                      v979 += 3 * v984;
                      if (!v983)
                        v980 = v981;
                    }
                    while (v980);
                    goto LABEL_1272;
                  }
                }
                else
                {
                  v974 = 0;
                }
                v979 = &v975[3 * v974];
LABEL_1272:
                if (v979 == &v975[3 * v974]
                  || ((*v979 >> 1) & 3 | *(_DWORD *)((*v979 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v973 & 0xFFFFFFFFFFFFFFF8) + 24) | (v973 >> 1) & 3))
                {
                  v985 = 0;
                }
                else
                {
                  v985 = v979[2];
                }
                if (v969 != v985)
                  llvm::LiveRange::MergeValueNumberInto(v924, v969, v985);
LABEL_1278:
                v924 = *(_QWORD *)(v924 + 104);
                if (!v924)
                  goto LABEL_1285;
              }
              v937 = 0;
              goto LABEL_1212;
            }
LABEL_1285:
            RegisterUseOperandIdx = llvm::MachineInstr::findRegisterUseOperandIdx(v1269, *(_DWORD *)(v503 + 112), 1, 0);
            if (RegisterUseOperandIdx != -1)
              *(_DWORD *)(*(_QWORD *)(v1269 + 32) + 32 * RegisterUseOperandIdx) &= ~0x4000000u;
            llvm::MachineInstr::substituteRegister((uint64_t)v1308, v1271[28], *(_DWORD *)(v503 + 112), 0, *(_QWORD **)(a1 + 272));
            v987 = v518 | 4;
            if (v537[1] == (v518 | 4))
            {
LABEL_1288:
              sub_1C5251D74(a1, (const llvm::LiveRange *)v1271, 0);
LABEL_1289:
              sub_1C5251F5C(a1, (uint64_t)v1308);
              goto LABEL_621;
            }
            v1072 = v1271;
            while (1)
            {
              v1072 = (int *)*((_QWORD *)v1072 + 13);
              if (!v1072)
                goto LABEL_1289;
              v1073 = v1072[2];
              v1074 = *(_QWORD **)v1072;
              if (v1073)
              {
                v1075 = v1074[3 * v1073 - 2];
                v1076 = *(_DWORD *)(v518 + 24) | 1;
                v1077 = (v1075 >> 1) & 3 | *(_DWORD *)((v1075 & 0xFFFFFFFFFFFFFFF8) + 24);
                v1078 = *(_QWORD **)v1072;
                v1079 = v1072[2];
                if (v1076 < v1077)
                {
                  do
                  {
                    v1080 = v1079 >> 1;
                    v1081 = v1078[3 * (v1079 >> 1) + 1];
                    LODWORD(v1081) = (v1081 >> 1) & 3 | *(_DWORD *)((v1081 & 0xFFFFFFFFFFFFFFF8) + 24);
                    v1079 -= (v1079 >> 1) + 1;
                    v1082 = v1076 >= v1081;
                    if (v1076 >= v1081)
                      v1083 = v1080 + 1;
                    else
                      v1083 = 0;
                    v1078 += 3 * v1083;
                    if (!v1082)
                      v1079 = v1080;
                  }
                  while (v1079);
                  goto LABEL_1417;
                }
              }
              else
              {
                v1073 = 0;
              }
              v1078 = &v1074[3 * v1073];
              v987 = v518 | 4;
LABEL_1417:
              if (v1078 != &v1074[3 * v1073]
                && ((*v1078 >> 1) & 3 | *(_DWORD *)((*v1078 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v518 + 24) | 1u)
                && v1078[1] == v987)
              {
                goto LABEL_1288;
              }
            }
          }
        }
      }
    }
LABEL_843:
    v653 = *(_QWORD *)(a1 + 288);
    v654 = BYTE2(v1310[2]);
    v655 = v1310[0];
    v656 = HIDWORD(v1310[0]);
    if (BYTE2(v1310[2]))
      v657 = v1310[0];
    else
      v657 = HIDWORD(v1310[0]);
    v658 = *(unsigned int *)(v653 + 416);
    if ((v657 & 0x7FFFFFFFu) >= v658 || (v659 = *(_QWORD *)(*(_QWORD *)(v653 + 408) + 8 * (v657 & 0x7FFFFFFF))) == 0)
    {
      v659 = sub_1C4851220(*(_QWORD *)(a1 + 288), v657);
      v1060 = *(_QWORD *)(v653 + 304);
      v1061 = *(_QWORD *)(v653 + 248);
      *(_QWORD *)v1060 = v1061;
      *(_QWORD *)(v1060 + 8) = *(_QWORD *)(v1061 + 40);
      *(_OWORD *)(v1060 + 16) = *(_OWORD *)(v653 + 288);
      *(_QWORD *)(v1060 + 32) = v653 + 312;
      llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v1060);
      *(_DWORD *)(v1060 + 184) = 0;
      v1062 = *(_QWORD *)(v653 + 256);
      v22 = *(_BYTE *)(v1062 + 16) == 0;
      v1063 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v1062 + 24) + 16 * (*(_DWORD *)(v659 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                 + 34);
      v1065 = !v22 && v1063 != 0;
      llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v653 + 304), (llvm::LiveInterval *)v659, v1065);
      llvm::LiveIntervals::computeDeadValues(v653, v659, 0);
      v653 = *(_QWORD *)(a1 + 288);
      v654 = BYTE2(v1310[2]);
      v656 = HIDWORD(v1310[0]);
      v655 = v1310[0];
      v658 = *(unsigned int *)(v653 + 416);
    }
    v660 = v1308;
    if (v654)
      v661 = v656;
    else
      v661 = v655;
    if ((v661 & 0x7FFFFFFFu) >= v658
      || (v662 = *(_QWORD ***)(*(_QWORD *)(v653 + 408) + 8 * (v661 & 0x7FFFFFFF))) == 0)
    {
      v662 = (_QWORD **)sub_1C4851220(v653, v661);
      v1066 = *(_QWORD *)(v653 + 304);
      v1067 = *(_QWORD *)(v653 + 248);
      *(_QWORD *)v1066 = v1067;
      *(_QWORD *)(v1066 + 8) = *(_QWORD *)(v1067 + 40);
      *(_OWORD *)(v1066 + 16) = *(_OWORD *)(v653 + 288);
      *(_QWORD *)(v1066 + 32) = v653 + 312;
      llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v1066);
      *(_DWORD *)(v1066 + 184) = 0;
      v660 = v1308;
      v1068 = *(_QWORD *)(v653 + 256);
      v22 = *(_BYTE *)(v1068 + 16) == 0;
      v1069 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v1068 + 24) + 16 * ((_DWORD)v662[14] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                 + 34);
      v1071 = !v22 && v1069 != 0;
      llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v653 + 304), (llvm::LiveInterval *)v662, v1071);
      llvm::LiveIntervals::computeDeadValues(v653, (uint64_t)v662, 0);
      v653 = *(_QWORD *)(a1 + 288);
    }
    v5 = v1304;
    v663 = *(_QWORD *)(v653 + 288);
    v664 = *((_WORD *)v660 + 22);
    v665 = (unint64_t)v660;
    if ((v664 & 4) != 0)
    {
      do
        v665 = *(_QWORD *)v665 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v665 + 44) & 4) != 0);
    }
    v666 = v660;
    if ((v664 & 8) != 0)
    {
      do
        v666 = (llvm::MachineInstr *)*((_QWORD *)v666 + 1);
      while ((*((_WORD *)v666 + 22) & 8) != 0);
    }
    v667 = *((_QWORD *)v666 + 1);
    if (v665 != v667)
    {
      while (1)
      {
        v668 = **(unsigned __int16 **)(v665 + 16);
        v29 = v668 > 0x17;
        v669 = (1 << v668) & 0x83E000;
        if (v29 || v669 == 0)
          break;
        v665 = *(_QWORD *)(v665 + 8);
        if (v665 == v667)
        {
          v665 = v667;
          break;
        }
      }
    }
    v671 = *(_QWORD *)(v663 + 368);
    v672 = *(unsigned int *)(v663 + 384);
    if ((_DWORD)v672)
    {
      LODWORD(v673) = ((v665 >> 4) ^ (v665 >> 9)) & (v672 - 1);
      v674 = (uint64_t *)(v671 + 16 * v673);
      v675 = *v674;
      if (v665 == *v674)
        goto LABEL_869;
      v676 = 1;
      while (v675 != -4096)
      {
        v677 = v673 + v676++;
        v673 = v677 & (v672 - 1);
        v675 = *(_QWORD *)(v671 + 16 * v673);
        if (v665 == v675)
        {
          v674 = (uint64_t *)(v671 + 16 * v673);
          goto LABEL_869;
        }
      }
    }
    v674 = (uint64_t *)(v671 + 16 * v672);
LABEL_869:
    v678 = v674[1] & 0xFFFFFFFFFFFFFFF8;
    v679 = *((_DWORD *)v662 + 2);
    v680 = (uint64_t)*v662;
    if (!v679)
    {
      v679 = 0;
LABEL_879:
      v684 = (_QWORD *)(v680 + 24 * v679);
      goto LABEL_880;
    }
    v681 = *(_QWORD *)(v680 + 24 * v679 - 16);
    v682 = *(_DWORD *)(v678 + 24) | 2;
    v683 = (v681 >> 1) & 3 | *(_DWORD *)((v681 & 0xFFFFFFFFFFFFFFF8) + 24);
    v684 = *v662;
    v685 = *((unsigned int *)v662 + 2);
    if (v682 >= v683)
      goto LABEL_879;
    do
    {
      v686 = v685 >> 1;
      v687 = v684[3 * (v685 >> 1) + 1];
      LODWORD(v687) = (v687 >> 1) & 3 | *(_DWORD *)((v687 & 0xFFFFFFFFFFFFFFF8) + 24);
      v685 -= (v685 >> 1) + 1;
      v688 = v682 >= v687;
      if (v682 >= v687)
        v689 = v686 + 1;
      else
        v689 = 0;
      v684 += 3 * v689;
      if (!v688)
        v685 = v686;
    }
    while (v685);
LABEL_880:
    if (v684 == (_QWORD *)(v680 + 24 * v679)
      || ((*v684 >> 1) & 3 | *(_DWORD *)((*v684 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v678 + 24) | 2u))
    {
      v690 = 0;
    }
    else
    {
      v690 = v684[2];
    }
    v691 = *(_DWORD *)(v659 + 8);
    v692 = *(uint64_t **)v659;
    if (!v691)
    {
      v691 = 0;
LABEL_894:
      v696 = &v692[3 * v691];
      goto LABEL_895;
    }
    v693 = v692[3 * v691 - 2];
    v694 = *(_DWORD *)(v678 + 24) | 1;
    v695 = (v693 >> 1) & 3 | *(_DWORD *)((v693 & 0xFFFFFFFFFFFFFFF8) + 24);
    v696 = *(uint64_t **)v659;
    v697 = *(unsigned int *)(v659 + 8);
    if (v694 >= v695)
      goto LABEL_894;
    do
    {
      v698 = v697 >> 1;
      v699 = v696[3 * (v697 >> 1) + 1];
      LODWORD(v699) = (v699 >> 1) & 3 | *(_DWORD *)((v699 & 0xFFFFFFFFFFFFFFF8) + 24);
      v697 -= (v697 >> 1) + 1;
      v700 = v694 >= v699;
      if (v694 >= v699)
        v701 = v698 + 1;
      else
        v701 = 0;
      v696 += 3 * v701;
      if (!v700)
        v697 = v698;
    }
    while (v697);
LABEL_895:
    if (v696 == &v692[3 * v691]
      || ((*v696 >> 1) & 3 | *(_DWORD *)((*v696 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v678 + 24) | 1u))
    {
      v702 = 0;
    }
    else
    {
      v702 = v696[2];
    }
    v703 = *(_QWORD *)(v702 + 8);
    if (v703 < 8)
      goto LABEL_1001;
    if ((v703 & 6) == 0)
      goto LABEL_1001;
    v704 = *(_QWORD *)((v703 & 0xFFFFFFFFFFFFFFF8) + 16);
    if (!v704 || (*(_BYTE *)(*(_QWORD *)(v704 + 16) + 11) & 2) == 0)
      goto LABEL_1001;
    RegisterDefOperandIdx = llvm::MachineInstr::findRegisterDefOperandIdx(v704, *(_DWORD *)(v659 + 112), 0, 0, 0);
    LODWORD(v1341) = 0;
    v706 = *(_DWORD *)(*(_QWORD *)(v704 + 32) + 32 * RegisterDefOperandIdx);
    v707 = v706 & 0x10000FF;
    v708 = v706 & 0xF00000;
    if (v707 != 0x1000000 || v708 == 0)
      goto LABEL_1001;
    v1292 = v690;
    LODWORD(v1341) = llvm::MachineInstr::findTiedOperandIdx((llvm::MachineInstr *)v704, RegisterDefOperandIdx);
    LODWORD(v1322) = -1;
    if (!(*(unsigned int (**)(_QWORD, uint64_t, void **, void **))(**(_QWORD **)(a1 + 280) + 200))(*(_QWORD *)(a1 + 280), v704, &v1341, &v1322)|| *(_DWORD *)(*(_QWORD *)(v704 + 32) + 32 * v1322 + 4) != *((_DWORD *)v662 + 28))
    {
      goto LABEL_1000;
    }
    v710 = *(_QWORD *)(v702 + 8) & 0xFFFFFFFFFFFFFFF8;
    v711 = *((_DWORD *)v662 + 2);
    v712 = (uint64_t)*v662;
    if (!v711)
    {
      v711 = 0;
LABEL_919:
      v716 = (_QWORD *)(v712 + 24 * v711);
      goto LABEL_920;
    }
    v713 = *(_QWORD *)(v712 + 24 * v711 - 16);
    v714 = *(_DWORD *)(v710 + 24);
    v715 = (v713 >> 1) & 3 | *(_DWORD *)((v713 & 0xFFFFFFFFFFFFFFF8) + 24);
    v716 = *v662;
    v717 = *((unsigned int *)v662 + 2);
    if (v714 >= v715)
      goto LABEL_919;
    do
    {
      v718 = v717 >> 1;
      v719 = v716[3 * (v717 >> 1) + 1];
      LODWORD(v719) = (v719 >> 1) & 3 | *(_DWORD *)((v719 & 0xFFFFFFFFFFFFFFF8) + 24);
      v717 -= (v717 >> 1) + 1;
      v720 = v714 >= v719;
      if (v714 >= v719)
        v721 = v718 + 1;
      else
        v721 = 0;
      v716 += 3 * v721;
      if (!v720)
        v717 = v718;
    }
    while (v717);
LABEL_920:
    if (v716 == (_QWORD *)(v712 + 24 * v711))
      goto LABEL_1000;
    if (((*v716 >> 1) & 3 | *(_DWORD *)((*v716 & 0xFFFFFFFFFFFFFFF8) + 24)) > *(_DWORD *)(v710 + 24))
      goto LABEL_1000;
    if (v710 != (v716[1] & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_1000;
    v1286 = *(_DWORD *)(*(_QWORD *)(v704 + 32) + 32 * v1322 + 4);
    if ((llvm::LiveIntervals::hasPHIKill(*(_QWORD *)(a1 + 288), v659, v702) & 1) != 0)
      goto LABEL_1000;
    v722 = *(unsigned int *)(v659 + 8);
    v1277 = *(uint64_t **)v659;
    v1281 = v722;
    v723 = *(_QWORD *)v659 + 24 * v722;
    if ((_DWORD)v722)
    {
      v724 = *(uint64_t **)v659;
      v1273 = *(_QWORD *)v659 + 24 * v722;
      do
      {
        if (v724[2] == v702)
        {
          v725 = *v662;
          v1274 = *((_DWORD *)v662 + 2);
          v1270 = *v724;
          v726 = sub_1C620DB10(*v662, v1274, *v724);
          v723 = v1273;
          v727 = v726 == v725 ? 0 : -1;
          v728 = &v725[3 * v1274];
          if (&v726[3 * v727] != v728)
          {
            v729 = (v724[1] >> 1) & 3 | *(_DWORD *)((v724[1] & 0xFFFFFFFFFFFFFFF8) + 24);
            v730 = &v726[3 * v727 + 1];
            do
            {
              v731 = v730 - 1;
              v732 = (*(v730 - 1) >> 1) & 3 | *(_DWORD *)((*(v730 - 1) & 0xFFFFFFFFFFFFFFF8) + 24);
              if (v729 < v732)
                break;
              if (v730[1] != v1292)
              {
                v733 = *(_DWORD *)((v1270 & 0xFFFFFFFFFFFFFFF8) + 24) | (v1270 >> 1) & 3;
                if (v732 <= v733)
                {
                  if (((*v730 >> 1) & 3 | *(_DWORD *)((*v730 & 0xFFFFFFFFFFFFFFF8) + 24)) > v733)
                    goto LABEL_1000;
                }
                else if (v732 < v729)
                {
                  goto LABEL_1000;
                }
              }
              v730 += 3;
            }
            while (v731 + 3 != v728);
          }
        }
        v724 += 3;
      }
      while (v724 != (uint64_t *)v723);
    }
    v734 = *(_QWORD *)(a1 + 264);
    v735 = *(unsigned int *)(v659 + 112);
    if ((v735 & 0x80000000) != 0)
      v736 = (uint64_t *)(*(_QWORD *)(v734 + 24) + 16 * (v735 & 0x7FFFFFFF) + 8);
    else
      v736 = (uint64_t *)(*(_QWORD *)(v734 + 272) + 8 * v735);
    v737 = *v736;
    if (!v737)
      goto LABEL_987;
    if ((*(_BYTE *)(v737 + 3) & 0x81) != 0)
    {
      do
      {
        v737 = *(_QWORD *)(v737 + 24);
        if (!v737)
          goto LABEL_987;
      }
      while ((*(_DWORD *)v737 & 0x81000000) != 0);
    }
    v738 = *(_QWORD *)(*(_QWORD *)(a1 + 288) + 288);
    v739 = *(_QWORD *)(v738 + 368);
    v740 = *(unsigned int *)(v738 + 384);
    v741 = v740 - 1;
LABEL_950:
    v742 = *(_QWORD *)(v737 + 8);
    v743 = *(_WORD *)(v742 + 44);
    v744 = v742;
    if ((v743 & 4) != 0)
    {
      do
        v744 = *(_QWORD *)v744 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v744 + 44) & 4) != 0);
    }
    v745 = *(_QWORD *)(v737 + 8);
    if ((v743 & 8) != 0)
    {
      do
        v745 = *(_QWORD *)(v745 + 8);
      while ((*(_WORD *)(v745 + 44) & 8) != 0);
    }
    v746 = *(_QWORD *)(v745 + 8);
    if (v744 != v746)
    {
      while (1)
      {
        v747 = **(unsigned __int16 **)(v744 + 16);
        v29 = v747 > 0x17;
        v748 = (1 << v747) & 0x83E000;
        if (v29 || v748 == 0)
          break;
        v744 = *(_QWORD *)(v744 + 8);
        if (v744 == v746)
        {
          v744 = v746;
          break;
        }
      }
    }
    v750 = (uint64_t *)(v739 + 16 * v740);
    if ((_DWORD)v740)
    {
      LODWORD(v751) = ((v744 >> 4) ^ (v744 >> 9)) & v741;
      v750 = (uint64_t *)(v739 + 16 * v751);
      v752 = *v750;
      if (v744 != *v750)
      {
        v753 = 1;
        while (v752 != -4096)
        {
          v754 = v751 + v753++;
          v751 = v754 & v741;
          v752 = *(_QWORD *)(v739 + 16 * v751);
          if (v744 == v752)
          {
            v750 = (uint64_t *)(v739 + 16 * v751);
            goto LABEL_966;
          }
        }
        v750 = (uint64_t *)(v739 + 16 * v740);
      }
    }
LABEL_966:
    if ((_DWORD)v1281)
    {
      v755 = v750[1];
      v756 = v755 & 0xFFFFFFFFFFFFFFF8;
      v757 = *(_DWORD *)((v755 & 0xFFFFFFFFFFFFFFF8) + 24);
      v758 = (v755 >> 1) & 3;
      v759 = v757 | v758;
      if ((v757 | v758) < ((*(_QWORD *)(v723 - 16) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v723 - 16) & 0xFFFFFFFFFFFFFFF8)
                                                                                        + 24)))
      {
        v760 = *(_QWORD *)(v742 + 32);
        v762 = v1277;
        v761 = v1281;
        do
        {
          v763 = v762;
          v764 = v761 >> 1;
          v765 = v762[3 * (v761 >> 1) + 1];
          LODWORD(v765) = (v765 >> 1) & 3 | *(_DWORD *)((v765 & 0xFFFFFFFFFFFFFFF8) + 24);
          v761 -= (v761 >> 1) + 1;
          v766 = v759 >= v765;
          if (v759 >= v765)
            v767 = v764 + 1;
          else
            v767 = 0;
          v762 += 3 * v767;
          if (!v766)
            v761 = v764;
        }
        while (v761);
        if (v762 != (uint64_t *)v723
          && ((*v762 >> 1) & 3 | *(_DWORD *)((*v762 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v756 + 24) | v758)
          && v763[3 * v767 + 2] == v702)
        {
          v768 = *(_DWORD *)(v760 + ((v737 - v760) & 0x1FFFFFFFE0));
          if ((v768 & 0x10000FF) == 0 && (v768 & 0xF00000) != 0)
          {
LABEL_1000:
            v5 = v1304;
LABEL_1001:
            v6 = v1306;
            v494 = v1308;
LABEL_1002:
            v111 = 0;
            v112 = 1;
            v7 = (uint64_t)v1307;
            if (LOBYTE(v1310[2]) || !v1311)
              goto LABEL_1008;
            if (**((_WORD **)v494 + 2) != 19
              || (v785 = (_DWORD *)*((_QWORD *)v494 + 4), (*v785 & 0xFFF00) != 0)
              || (v785[8] & 0xFFF00) != 0)
            {
              v111 = 0;
              v112 = 1;
              goto LABEL_1008;
            }
            v786 = *((_QWORD *)v494 + 3);
            if (*(_BYTE *)(v786 + 184)
              || *(_BYTE *)(v786 + 202)
              || ((*(_QWORD *)(v786 + 72) - *(_QWORD *)(v786 + 64)) & 0x7FFFFFFF8) != 0x10)
            {
              v111 = 0;
              v112 = 1;
              v7 = (uint64_t)v1307;
              goto LABEL_1008;
            }
            v787 = *(_QWORD *)(a1 + 288);
            v788 = BYTE2(v1310[2]);
            v789 = v1310[0];
            v790 = HIDWORD(v1310[0]);
            if (BYTE2(v1310[2]))
              v791 = v1310[0];
            else
              v791 = HIDWORD(v1310[0]);
            v792 = *(unsigned int *)(v787 + 416);
            if ((v791 & 0x7FFFFFFFu) >= v792
              || (v793 = *(llvm::LiveInterval **)(*(_QWORD *)(v787 + 408) + 8 * (v791 & 0x7FFFFFFF))) == 0)
            {
              v1247 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(a1 + 288), v791);
              v1248 = *(_QWORD *)(v787 + 304);
              v1249 = *(_QWORD *)(v787 + 248);
              *(_QWORD *)v1248 = v1249;
              *(_QWORD *)(v1248 + 8) = *(_QWORD *)(v1249 + 40);
              *(_OWORD *)(v1248 + 16) = *(_OWORD *)(v787 + 288);
              *(_QWORD *)(v1248 + 32) = v787 + 312;
              llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v1248);
              *(_DWORD *)(v1248 + 184) = 0;
              v494 = v1308;
              v1250 = *(_QWORD *)(v787 + 256);
              v22 = *(_BYTE *)(v1250 + 16) == 0;
              v1251 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v1250 + 24)
                                                      + 16 * (*((_DWORD *)v1247 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                         + 34);
              v1253 = !v22 && v1251 != 0;
              llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v787 + 304), v1247, v1253);
              llvm::LiveIntervals::computeDeadValues(v787, (uint64_t)v1247, 0);
              v793 = v1247;
              v787 = *(_QWORD *)(a1 + 288);
              v788 = BYTE2(v1310[2]);
              v790 = HIDWORD(v1310[0]);
              v789 = v1310[0];
              v792 = *(unsigned int *)(v787 + 416);
            }
            if (v788)
              v794 = v790;
            else
              v794 = v789;
            if ((v794 & 0x7FFFFFFFu) >= v792
              || (v795 = *(_QWORD *)(*(_QWORD *)(v787 + 408) + 8 * (v794 & 0x7FFFFFFF))) == 0)
            {
              v1254 = v793;
              v1255 = (llvm::LiveInterval *)sub_1C4851220(v787, v794);
              v1256 = *(_QWORD *)(v787 + 304);
              v1257 = *(_QWORD *)(v787 + 248);
              *(_QWORD *)v1256 = v1257;
              *(_QWORD *)(v1256 + 8) = *(_QWORD *)(v1257 + 40);
              *(_OWORD *)(v1256 + 16) = *(_OWORD *)(v787 + 288);
              *(_QWORD *)(v1256 + 32) = v787 + 312;
              llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v1256);
              *(_DWORD *)(v1256 + 184) = 0;
              v494 = v1308;
              v1258 = *(_QWORD *)(v787 + 256);
              v22 = *(_BYTE *)(v1258 + 16) == 0;
              v1259 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v1258 + 24)
                                                      + 16 * (*((_DWORD *)v1255 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                         + 34);
              v1261 = !v22 && v1259 != 0;
              llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v787 + 304), v1255, v1261);
              llvm::LiveIntervals::computeDeadValues(v787, (uint64_t)v1255, 0);
              v795 = (uint64_t)v1255;
              v793 = v1254;
              v787 = *(_QWORD *)(a1 + 288);
            }
            v796 = *(_QWORD *)(v787 + 288);
            v797 = *((_WORD *)v494 + 22);
            v798 = (unint64_t)v494;
            if ((v797 & 4) != 0)
            {
              do
                v798 = *(_QWORD *)v798 & 0xFFFFFFFFFFFFFFF8;
              while ((*(_WORD *)(v798 + 44) & 4) != 0);
            }
            if ((v797 & 8) != 0)
            {
              do
                v494 = (llvm::MachineInstr *)*((_QWORD *)v494 + 1);
              while ((*((_WORD *)v494 + 22) & 8) != 0);
            }
            v799 = *((_QWORD *)v494 + 1);
            if (v798 != v799)
            {
              while (1)
              {
                v800 = **(unsigned __int16 **)(v798 + 16);
                v29 = v800 > 0x17;
                v801 = (1 << v800) & 0x83E000;
                if (v29 || v801 == 0)
                  break;
                v798 = *(_QWORD *)(v798 + 8);
                if (v798 == v799)
                {
                  v798 = *((_QWORD *)v494 + 1);
                  break;
                }
              }
            }
            v803 = *(_QWORD *)(v796 + 368);
            v804 = *(unsigned int *)(v796 + 384);
            if ((_DWORD)v804)
            {
              LODWORD(v805) = ((v798 >> 4) ^ (v798 >> 9)) & (v804 - 1);
              v806 = (uint64_t *)(v803 + 16 * v805);
              v807 = *v806;
              if (v798 != *v806)
              {
                v808 = 1;
                while (v807 != -4096)
                {
                  v809 = v805 + v808++;
                  v805 = v809 & (v804 - 1);
                  v807 = *(_QWORD *)(v803 + 16 * v805);
                  if (v798 == v807)
                  {
                    v806 = (uint64_t *)(v803 + 16 * v805);
                    goto LABEL_1041;
                  }
                }
                goto LABEL_1040;
              }
            }
            else
            {
LABEL_1040:
              v806 = (uint64_t *)(v803 + 16 * v804);
            }
LABEL_1041:
            v1304 = v5;
            v810 = v806[1] & 0xFFFFFFFFFFFFFFF8;
            v811 = *((_DWORD *)v793 + 2);
            v812 = *(_QWORD **)v793;
            if (v811)
            {
              v813 = v812[3 * v811 - 2];
              v814 = *(_DWORD *)(v810 + 24) | 1;
              v815 = (v813 >> 1) & 3 | *(_DWORD *)((v813 & 0xFFFFFFFFFFFFFFF8) + 24);
              v816 = *((unsigned int *)v793 + 2);
              v817 = *(_QWORD **)v793;
              v818 = v816;
              if (v814 < v815)
              {
                do
                {
                  v819 = v818 >> 1;
                  v820 = v817[3 * (v818 >> 1) + 1];
                  LODWORD(v820) = (v820 >> 1) & 3 | *(_DWORD *)((v820 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v818 -= (v818 >> 1) + 1;
                  v821 = v814 >= v820;
                  if (v814 >= v820)
                    v822 = v819 + 1;
                  else
                    v822 = 0;
                  v817 += 3 * v822;
                  if (!v821)
                    v818 = v819;
                }
                while (v818);
                v816 = *((unsigned int *)v793 + 2);
LABEL_1156:
                v895 = &v812[3 * v816];
                if (v817 == v895
                  || ((*v817 >> 1) & 3 | *(_DWORD *)((*v817 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v810 + 24) | 1u))
                {
                  v817 = &v812[3 * v816];
                }
                if ((*(_BYTE *)(v817[2] + 8) & 6) != 0
                  || (v1287 = (_QWORD *)v795,
                      v1293 = v810,
                      v1279 = *(_QWORD *)(v796 + 392),
                      v1283 = v793,
                      llvm::LiveRange::overlaps(v795, *(_QWORD *)(v1279 + 16 * *(unsigned int *)(v786 + 24)), v810 | 2)))
                {
                  v111 = 0;
                  v112 = 1;
                  v5 = v1304;
                  v6 = v1306;
                  v7 = (uint64_t)v1307;
                  goto LABEL_1008;
                }
                v896 = *(uint64_t **)(v786 + 64);
                v897 = *(uint64_t **)(v786 + 72);
                if (v896 == v897)
                  goto LABEL_1197;
                v898 = 0;
                v899 = 0;
                do
                {
                  v900 = v899;
                  while (1)
                  {
                    v899 = *v896;
                    v901 = *(_QWORD *)(v1279 + 16 * *(unsigned int *)(*v896 + 24) + 8);
                    v902 = (v901 >> 1) & 3;
                    v903 = v901 & 0xFFFFFFFFFFFFFFF8;
                    if (v902)
                      v904 = v903 | (2 * (v902 - 1));
                    else
                      v904 = *(_QWORD *)v903 | 6;
                    v905 = &v812[3 * v816];
                    if (v811)
                    {
                      v906 = *(_DWORD *)((v904 & 0xFFFFFFFFFFFFFFF8) + 24) | (v904 >> 1) & 3;
                      v905 = &v812[3 * v816];
                      if (v906 < ((*(v895 - 2) >> 1) & 3 | *(_DWORD *)((*(v895 - 2) & 0xFFFFFFFFFFFFFFF8)
                                                                                    + 24)))
                      {
                        v905 = v812;
                        v907 = v816;
                        do
                        {
                          v908 = v907 >> 1;
                          v909 = v905[3 * (v907 >> 1) + 1];
                          LODWORD(v909) = (v909 >> 1) & 3 | *(_DWORD *)((v909 & 0xFFFFFFFFFFFFFFF8) + 24);
                          v907 -= (v907 >> 1) + 1;
                          v910 = v906 >= v909;
                          if (v906 >= v909)
                            v911 = v908 + 1;
                          else
                            v911 = 0;
                          v905 += 3 * v911;
                          if (!v910)
                            v907 = v908;
                        }
                        while (v907);
                      }
                    }
                    v912 = *(_QWORD *)(v905[2] + 8);
                    if (v912 < 8)
                      goto LABEL_1193;
                    v913 = v912 & 0xFFFFFFFFFFFFFFF8;
                    v914 = *(_QWORD *)((v912 & 0xFFFFFFFFFFFFFFF8) + 16);
                    if (!v914)
                      goto LABEL_1193;
                    if (**(_WORD **)(v914 + 16) != 19)
                      goto LABEL_1193;
                    v915 = *(_DWORD **)(v914 + 32);
                    if ((*v915 & 0xFFF00) != 0
                      || (v915[8] & 0xFFF00) != 0
                      || v915[1] != *((_DWORD *)v1283 + 28)
                      || v915[9] != *((_DWORD *)v1287 + 28)
                      || *(_QWORD *)(v914 + 24) != v899)
                    {
                      goto LABEL_1193;
                    }
                    v916 = *((unsigned int *)v1287 + 18);
                    if ((_DWORD)v916)
                      break;
LABEL_1190:
                    ++v896;
                    v898 = 1;
                    if (v896 == v897)
                    {
                      v899 = v900;
                      goto LABEL_1195;
                    }
                  }
                  v917 = v1287[8];
                  v918 = (v912 >> 1) & 3;
                  v919 = 8 * v916;
                  while (1)
                  {
                    v920 = *(_QWORD *)(*(_QWORD *)v917 + 8);
                    if (v920 >= 8)
                    {
                      v921 = *(_DWORD *)((v920 & 0xFFFFFFFFFFFFFFF8) + 24) | (v920 >> 1) & 3;
                      if ((*(_DWORD *)(v913 + 24) | v918) < v921 && v921 < (*(_DWORD *)(v903 + 24) | v902))
                        break;
                    }
                    v917 += 8;
                    v919 -= 8;
                    if (!v919)
                      goto LABEL_1190;
                  }
LABEL_1193:
                  ++v896;
                }
                while (v896 != v897);
                if ((v898 & 1) == 0)
                {
LABEL_1197:
                  v111 = 0;
                  v112 = 1;
                  goto LABEL_622;
                }
LABEL_1195:
                if (v899)
                {
                  if (((*(_QWORD *)(v899 + 96) - *(_QWORD *)(v899 + 88)) & 0x7FFFFFFF0) != 0)
                    goto LABEL_1197;
                  FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator((llvm::MachineBasicBlock *)v899);
                  v1089 = (_QWORD *)FirstTerminator;
                  if (v899 + 48 != FirstTerminator)
                  {
                    v1090 = *(_WORD *)(FirstTerminator + 44);
                    v1091 = FirstTerminator;
                    if ((v1090 & 4) != 0)
                    {
                      v1091 = FirstTerminator;
                      do
                        v1091 = *(_QWORD *)v1091 & 0xFFFFFFFFFFFFFFF8;
                      while ((*(_WORD *)(v1091 + 44) & 4) != 0);
                    }
                    v1092 = FirstTerminator;
                    if ((v1090 & 8) != 0)
                    {
                      v1092 = FirstTerminator;
                      do
                        v1092 = *(_QWORD *)(v1092 + 8);
                      while ((*(_WORD *)(v1092 + 44) & 8) != 0);
                    }
                    v1093 = *(_QWORD *)(v1092 + 8);
                    if (v1091 != v1093)
                    {
                      while (1)
                      {
                        v1094 = **(unsigned __int16 **)(v1091 + 16);
                        v29 = v1094 > 0x17;
                        v1095 = (1 << v1094) & 0x83E000;
                        if (v29 || v1095 == 0)
                          break;
                        v1091 = *(_QWORD *)(v1091 + 8);
                        if (v1091 == v1093)
                        {
                          v1091 = v1093;
                          break;
                        }
                      }
                    }
                    v1097 = *(_QWORD *)(*(_QWORD *)(a1 + 288) + 288);
                    v1098 = *(_QWORD *)(v1097 + 368);
                    v1099 = *(unsigned int *)(v1097 + 384);
                    if ((_DWORD)v1099)
                    {
                      LODWORD(v1100) = ((v1091 >> 4) ^ (v1091 >> 9)) & (v1099 - 1);
                      v1101 = (uint64_t *)(v1098 + 16 * v1100);
                      v1102 = *v1101;
                      if (v1091 != *v1101)
                      {
                        v1103 = 1;
                        while (v1102 != -4096)
                        {
                          v1104 = v1100 + v1103++;
                          v1100 = v1104 & (v1099 - 1);
                          v1102 = *(_QWORD *)(v1098 + 16 * v1100);
                          if (v1091 == v1102)
                          {
                            v1101 = (uint64_t *)(v1098 + 16 * v1100);
                            goto LABEL_1493;
                          }
                        }
                        goto LABEL_1492;
                      }
                    }
                    else
                    {
LABEL_1492:
                      v1101 = (uint64_t *)(v1098 + 16 * v1099);
                    }
LABEL_1493:
                    if (llvm::LiveRange::overlaps((uint64_t)v1287, v1101[1] & 0xFFFFFFFFFFFFFFF8 | 2, *(_QWORD *)(*(_QWORD *)(v1097 + 392) + 16 * *(unsigned int *)(v899 + 24) + 8)))
                    {
                      goto LABEL_1197;
                    }
                  }
                  v1119 = *(_QWORD *)(*(_QWORD *)(a1 + 280) + 8);
                  v1120 = *((_DWORD *)v1287 + 28);
                  v1121 = *(llvm::MachineFunction **)(v899 + 32);
                  v1122 = (void *)*((_QWORD *)v1308 + 7);
                  v1325 = v1122;
                  if (v1122)
                    llvm::MetadataTracking::track((uint64_t)&v1325, (unsigned __int8 *)v1122, 2);
                  v1123 = *((_QWORD *)v1121 + 28);
                  if (v1123)
                    *((_QWORD *)v1121 + 28) = *(_QWORD *)v1123;
                  else
                    v1123 = sub_1C484358C((uint64_t)v1121 + 128, 72, 3);
                  v1332 = v1325;
                  if (v1325)
                  {
                    llvm::MetadataTracking::retrack((uint64_t)&v1325, (unsigned __int8 *)v1325, (uint64_t)&v1332);
                    v1325 = 0;
                  }
                  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v1123, v1121, v1119 + 912, (unsigned __int8 **)&v1332, 0);
                  if (v1332)
                    llvm::MetadataTracking::untrack((uint64_t)&v1332, (unsigned __int8 *)v1332);
                  if (v1325)
                    llvm::MetadataTracking::untrack((uint64_t)&v1325, (unsigned __int8 *)v1325);
                  v1124 = *(_QWORD *)(v899 + 40);
                  *(_QWORD *)(v1123 + 24) = v1124;
                  v1125 = *(_QWORD *)(v1124 + 32);
                  v1126 = *(unsigned int *)(v1123 + 40);
                  if ((_DWORD)v1126)
                  {
                    v1189 = *(_QWORD *)(v1123 + 32);
                    v1190 = *(_QWORD *)(v1125 + 40);
                    v1191 = 32 * v1126;
                    do
                    {
                      if (!*(_BYTE *)v1189)
                      {
                        v1192 = *(unsigned int *)(v1189 + 4);
                        if ((int)v1192 >= 0)
                          v1193 = (uint64_t *)(*(_QWORD *)(v1190 + 272) + 8 * v1192);
                        else
                          v1193 = (uint64_t *)(*(_QWORD *)(v1190 + 24) + 16 * (v1192 & 0x7FFFFFFF) + 8);
                        v1194 = *v1193;
                        if (*v1193)
                        {
                          v1195 = *(_QWORD *)(v1194 + 16);
                          *(_QWORD *)(v1194 + 16) = v1189;
                          *(_QWORD *)(v1189 + 16) = v1195;
                          if ((*(_BYTE *)(v1189 + 3) & 1) != 0)
                          {
                            *(_QWORD *)(v1189 + 24) = v1194;
                          }
                          else
                          {
                            *(_QWORD *)(v1189 + 24) = 0;
                            v1193 = (uint64_t *)(v1195 + 24);
                          }
                        }
                        else
                        {
                          *(_QWORD *)(v1189 + 16) = v1189;
                          *(_QWORD *)(v1189 + 24) = 0;
                        }
                        *v1193 = v1189;
                      }
                      v1189 += 32;
                      v1191 -= 32;
                    }
                    while (v1191);
                  }
                  v1127 = *(_QWORD *)(v1125 + 728);
                  if (v1127)
                    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v1127 + 24))(v1127, v1123);
                  v1128 = *v1089 & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)v1123 = v1128 | *(_QWORD *)v1123 & 7;
                  *(_QWORD *)(v1123 + 8) = v1089;
                  *(_QWORD *)(v1128 + 8) = v1123;
                  *v1089 = *v1089 & 7 | v1123;
                  v1333 = 0;
                  v1334 = 0;
                  v1335 = 0;
                  HIDWORD(v1332) = v1120;
                  LODWORD(v1332) = 0x1000000;
                  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1123, v1121, (const llvm::MachineOperand *)&v1332);
                  v1129 = *((_DWORD *)v1283 + 28);
                  v1333 = 0;
                  HIDWORD(v1332) = v1129;
                  LODWORD(v1332) = 0;
                  v1334 = 0;
                  v1335 = 0;
                  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v1123, v1121, (const llvm::MachineOperand *)&v1332);
                  v1130 = sub_1C4850BC8(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 288), v1123, 0) & 0xFFFFFFFFFFFFFFF8 | 4;
                  v1131 = *(_QWORD *)(a1 + 288) + 312;
                  if (v1287[12])
                  {
                    v1332 = v1287;
                    sub_1C510A3C0((uint64_t *)&v1332, v1130, v1131, 0);
                  }
                  else
                  {
                    v1332 = v1287;
                    sub_1C510A6B8((uint64_t **)&v1332, v1130, v1131, 0);
                  }
                  for (i = (_QWORD *)v1287[13]; i; i = (_QWORD *)i[13])
                  {
                    v1133 = *(_QWORD *)(a1 + 288) + 312;
                    if (i[12])
                    {
                      v1332 = i;
                      sub_1C510A3C0((uint64_t *)&v1332, v1130, v1133, 0);
                    }
                    else
                    {
                      v1332 = i;
                      sub_1C510A6B8((uint64_t **)&v1332, v1130, v1133, 0);
                    }
                  }
                  v1134 = sub_1C477672C((uint64_t)v1307, v1123);
                  v1135 = *(_QWORD *)(a1 + 832);
                  v1136 = 840;
                  if (v1135 == *(_QWORD *)(a1 + 824))
                    v1136 = 844;
                  if (v1134 != (_QWORD *)(v1135 + 8 * *(unsigned int *)(a1 + v1136)))
                  {
                    *v1134 = -2;
                    ++*(_DWORD *)(a1 + 848);
                  }
                }
                sub_1C5251F5C(a1, (uint64_t)v1308);
                v1332 = &v1334;
                v1333 = 0x800000000;
                v1137 = *((_DWORD *)v1287 + 2);
                v1138 = *v1287;
                if (v1137)
                {
                  v1139 = *(_QWORD *)(v1138 + 24 * v1137 - 16);
                  v1140 = *(_DWORD *)(v1293 + 24);
                  v1141 = (v1139 >> 1) & 3 | *(_DWORD *)((v1139 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v1142 = (_QWORD *)*v1287;
                  v1143 = *((unsigned int *)v1287 + 2);
                  if (v1140 < v1141)
                  {
                    do
                    {
                      v1144 = v1143 >> 1;
                      v1145 = v1142[3 * (v1143 >> 1) + 1];
                      LODWORD(v1145) = (v1145 >> 1) & 3 | *(_DWORD *)((v1145 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v1143 -= (v1143 >> 1) + 1;
                      v1146 = v1140 >= v1145;
                      if (v1140 >= v1145)
                        v1147 = v1144 + 1;
                      else
                        v1147 = 0;
                      v1142 += 3 * v1147;
                      if (!v1146)
                        v1143 = v1144;
                    }
                    while (v1143);
LABEL_1531:
                    v1148 = (_QWORD *)(v1138 + 24 * v1137);
                    if (v1142 == v1148)
                      goto LABEL_1538;
                    v1149 = *(_DWORD *)((*v1142 & 0xFFFFFFFFFFFFFFF8) + 24);
                    v1150 = *(_DWORD *)(v1293 + 24);
                    if (((*v1142 >> 1) & 3 | v1149) <= v1150
                      && v1293 == (v1142[1] & 0xFFFFFFFFFFFFFFF8))
                    {
                      v1142 += 3;
                      if (v1142 != v1148)
                      {
                        v1149 = *(_DWORD *)((*v1142 & 0xFFFFFFFFFFFFFFF8) + 24);
                        goto LABEL_1536;
                      }
LABEL_1538:
                      v1151 = 0;
                    }
                    else
                    {
LABEL_1536:
                      if (v1150 < v1149)
                        goto LABEL_1538;
                      v1151 = v1142[2];
                    }
                    llvm::LiveIntervals::pruneValue(*(_QWORD *)(a1 + 288), (uint64_t)v1287, v1293 | 4, (uint64_t)&v1332);
                    *(_QWORD *)(v1151 + 8) = 0;
                    v1152 = *(_QWORD *)(a1 + 288);
                    v1153 = (unint64_t *)v1332;
                    v1154 = v1333;
                    v1155 = *(_QWORD *)(v1152 + 304);
                    v1156 = *(_QWORD *)(v1152 + 248);
                    *(_QWORD *)v1155 = v1156;
                    *(_QWORD *)(v1155 + 8) = *(_QWORD *)(v1156 + 40);
                    *(_OWORD *)(v1155 + 16) = *(_OWORD *)(v1152 + 288);
                    *(_QWORD *)(v1155 + 32) = v1152 + 312;
                    llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v1155);
                    *(_DWORD *)(v1155 + 184) = 0;
                    if ((_DWORD)v1154)
                    {
                      v1157 = 8 * v1154;
                      do
                      {
                        v1158 = *v1153++;
                        llvm::LiveRangeCalc::extend(*(llvm::LiveRangeCalc **)(v1152 + 304), v1287, v1158, 0, 0, 0);
                        v1157 -= 8;
                      }
                      while (v1157);
                    }
                    v1159 = v1287[13];
                    while (2)
                    {
                      if (!v1159)
                      {
                        sub_1C5251D74(a1, (const llvm::LiveRange *)v1287, 0);
                        sub_1C5251D74(a1, v1283, 0);
                        if (v1332 != &v1334)
                          free(v1332);
                        goto LABEL_621;
                      }
                      LODWORD(v1333) = 0;
                      v1160 = *(_DWORD *)(v1159 + 8);
                      v1161 = *(_QWORD *)v1159;
                      if (v1160)
                      {
                        v1162 = *(_QWORD *)(v1161 + 24 * v1160 - 16);
                        v1163 = *(_DWORD *)(v1293 + 24);
                        v1164 = (v1162 >> 1) & 3 | *(_DWORD *)((v1162 & 0xFFFFFFFFFFFFFFF8) + 24);
                        v1165 = *(_QWORD **)v1159;
                        v1166 = *(unsigned int *)(v1159 + 8);
                        if (v1163 < v1164)
                        {
                          do
                          {
                            v1167 = v1166 >> 1;
                            v1168 = v1165[3 * (v1166 >> 1) + 1];
                            LODWORD(v1168) = (v1168 >> 1) & 3 | *(_DWORD *)((v1168 & 0xFFFFFFFFFFFFFFF8)
                                                                                        + 24);
                            v1166 -= (v1166 >> 1) + 1;
                            v1169 = v1163 >= v1168;
                            if (v1163 >= v1168)
                              v1170 = v1167 + 1;
                            else
                              v1170 = 0;
                            v1165 += 3 * v1170;
                            if (!v1169)
                              v1166 = v1167;
                          }
                          while (v1166);
LABEL_1555:
                          v1171 = (_QWORD *)(v1161 + 24 * v1160);
                          if (v1165 == v1171)
                            goto LABEL_1562;
                          v1172 = *(_DWORD *)((*v1165 & 0xFFFFFFFFFFFFFFF8) + 24);
                          v1173 = *(_DWORD *)(v1293 + 24);
                          if (((*v1165 >> 1) & 3 | v1172) <= v1173
                            && v1293 == (v1165[1] & 0xFFFFFFFFFFFFFFF8))
                          {
                            v1165 += 3;
                            if (v1165 != v1171)
                            {
                              v1172 = *(_DWORD *)((*v1165 & 0xFFFFFFFFFFFFFFF8) + 24);
                              goto LABEL_1560;
                            }
LABEL_1562:
                            v1174 = 0;
                          }
                          else
                          {
LABEL_1560:
                            if (v1173 < v1172)
                              goto LABEL_1562;
                            v1174 = v1165[2];
                          }
                          llvm::LiveIntervals::pruneValue(*(_QWORD *)(a1 + 288), v1159, v1293 | 4, (uint64_t)&v1332);
                          *(_QWORD *)(v1174 + 8) = 0;
                          v1175 = v1333;
                          if ((_DWORD)v1333)
                          {
                            v1176 = 0;
                            v1177 = v1332;
                            v1178 = (char *)v1332 - 8;
                            do
                            {
                              v1179 = v1177[v1176];
                              while ((v1179 & 0xFFFFFFFFFFFFFFF8) == v1293)
                              {
                                v1179 = *(_QWORD *)&v1178[8 * v1175];
                                v1177[v1176] = v1179;
                                LODWORD(v1333) = --v1175;
                                if (v1176 == v1175)
                                  goto LABEL_1570;
                              }
                              ++v1176;
                            }
                            while (v1176 != v1175);
                          }
LABEL_1570:
                          v1325 = v1327;
                          v1326 = 0x800000000;
                          llvm::LiveInterval::computeSubRangeUndefs((uint64_t)v1287, (uint64_t)&v1325, *(_QWORD *)(v1159 + 112), *(_QWORD **)(a1 + 264), *(_QWORD *)(*(_QWORD *)(a1 + 288) + 288));
                          v1180 = *(_QWORD *)(a1 + 288);
                          v1181 = (unint64_t *)v1332;
                          v1182 = v1333;
                          v1183 = v1325;
                          v1184 = v1326;
                          v1185 = *(_QWORD *)(v1180 + 304);
                          v1186 = *(_QWORD *)(v1180 + 248);
                          *(_QWORD *)v1185 = v1186;
                          *(_QWORD *)(v1185 + 8) = *(_QWORD *)(v1186 + 40);
                          *(_OWORD *)(v1185 + 16) = *(_OWORD *)(v1180 + 288);
                          *(_QWORD *)(v1185 + 32) = v1180 + 312;
                          llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v1185);
                          *(_DWORD *)(v1185 + 184) = 0;
                          if ((_DWORD)v1182)
                          {
                            v1187 = 8 * v1182;
                            do
                            {
                              v1188 = *v1181++;
                              llvm::LiveRangeCalc::extend(*(llvm::LiveRangeCalc **)(v1180 + 304), (uint64_t *)v1159, v1188, 0, v1183, v1184);
                              v1187 -= 8;
                            }
                            while (v1187);
                          }
                          if (v1325 != v1327)
                            free(v1325);
                          v1159 = *(_QWORD *)(v1159 + 104);
                          continue;
                        }
                      }
                      else
                      {
                        v1160 = 0;
                      }
                      break;
                    }
                    v1165 = (_QWORD *)(v1161 + 24 * v1160);
                    goto LABEL_1555;
                  }
                }
                else
                {
                  v1137 = 0;
                }
                v1142 = (_QWORD *)(v1138 + 24 * v1137);
                goto LABEL_1531;
              }
            }
            else
            {
              v816 = 0;
            }
            v817 = &v812[3 * v816];
            goto LABEL_1156;
          }
        }
      }
    }
    while (1)
    {
      v737 = *(_QWORD *)(v737 + 24);
      if (!v737)
        break;
      if ((*(_DWORD *)v737 & 0x81000000) == 0)
        goto LABEL_950;
    }
LABEL_987:
    v769 = *(_QWORD *)(v704 + 24);
    v770 = llvm::TargetInstrInfo::commuteInstruction(*(llvm::TargetInstrInfo **)(a1 + 280), (llvm::MachineInstr *)v704, 0, v1341, v1322);
    if (!v770)
      goto LABEL_1000;
    v771 = v770;
    v772 = *(_DWORD *)(v659 + 112);
    if (v772 < 0)
    {
      v773 = *((_DWORD *)v662 + 28);
      if (v773 < 0
        && !sub_1C51A3F30(*(_QWORD **)(a1 + 264), v773, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 24) + 16 * (v773 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 24) + 16 * (v772 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, 0))
      {
        goto LABEL_1000;
      }
    }
    if (v771 != v704)
    {
      sub_1C49FB860(*(int32x2_t **)(*(_QWORD *)(a1 + 288) + 288), v704, v771);
      v775 = *(_QWORD *)(v769 + 40);
      v774 = v769 + 40;
      *(_QWORD *)(v771 + 24) = v775;
      v776 = *(_QWORD *)(v775 + 32);
      v777 = *(unsigned int *)(v771 + 40);
      if ((_DWORD)v777)
      {
        v1112 = *(_QWORD *)(v771 + 32);
        v1113 = *(_QWORD *)(v776 + 40);
        v1114 = 32 * v777;
        do
        {
          if (!*(_BYTE *)v1112)
          {
            v1115 = *(unsigned int *)(v1112 + 4);
            if ((int)v1115 >= 0)
              v1116 = (uint64_t *)(*(_QWORD *)(v1113 + 272) + 8 * v1115);
            else
              v1116 = (uint64_t *)(*(_QWORD *)(v1113 + 24) + 16 * (v1115 & 0x7FFFFFFF) + 8);
            v1117 = *v1116;
            if (*v1116)
            {
              v1118 = *(_QWORD *)(v1117 + 16);
              *(_QWORD *)(v1117 + 16) = v1112;
              *(_QWORD *)(v1112 + 16) = v1118;
              if ((*(_BYTE *)(v1112 + 3) & 1) != 0)
              {
                *(_QWORD *)(v1112 + 24) = v1117;
              }
              else
              {
                *(_QWORD *)(v1112 + 24) = 0;
                v1116 = (uint64_t *)(v1118 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v1112 + 16) = v1112;
              *(_QWORD *)(v1112 + 24) = 0;
            }
            *v1116 = v1112;
          }
          v1112 += 32;
          v1114 -= 32;
        }
        while (v1114);
      }
      v778 = *(_QWORD *)(v776 + 728);
      if (v778)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v778 + 24))(v778, v771);
      v779 = *(_QWORD *)v704 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v771 = v779 | *(_QWORD *)v771 & 7;
      *(_QWORD *)(v771 + 8) = v704;
      *(_QWORD *)(v779 + 8) = v771;
      v780 = *(_QWORD *)v704 & 7 | v771;
      *(_QWORD *)v704 = v780;
      v781 = v704;
      if ((v780 & 4) == 0)
      {
        v781 = v704;
        if ((*(_WORD *)(v704 + 44) & 8) != 0)
        {
          v781 = v704;
          do
            v781 = *(_QWORD *)(v781 + 8);
          while ((*(_WORD *)(v781 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(v774, v704, *(_QWORD *)(v781 + 8));
    }
    v782 = *(_QWORD *)(a1 + 264);
    v783 = *(unsigned int *)(v659 + 112);
    if ((v783 & 0x80000000) != 0)
      v784 = (uint64_t *)(*(_QWORD *)(v782 + 24) + 16 * (v783 & 0x7FFFFFFF) + 8);
    else
      v784 = (uint64_t *)(*(_QWORD *)(v782 + 272) + 8 * v783);
    v823 = *v784;
    if (*v784)
    {
      while ((*(_BYTE *)(v823 + 3) & 1) != 0)
      {
        v823 = *(_QWORD *)(v823 + 24);
        if (!v823)
          goto LABEL_1054;
      }
      do
      {
        v830 = v823;
        do
          v823 = *(_QWORD *)(v823 + 24);
        while (v823 && (*(_BYTE *)(v823 + 3) & 1) != 0);
        if ((*(_DWORD *)v830 & 0x10000000) != 0)
          continue;
        v831 = *(_QWORD *)(v830 + 8);
        if (**(unsigned __int16 **)(v831 + 16) - 13 <= 4)
        {
          llvm::MachineOperand::setReg(v830, v1286);
          continue;
        }
        v832 = *(_WORD *)(v831 + 44);
        v833 = *(_QWORD *)(v830 + 8);
        if ((v832 & 4) != 0)
        {
          do
            v833 = *(_QWORD *)v833 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v833 + 44) & 4) != 0);
        }
        v834 = *(_QWORD *)(v830 + 8);
        if ((v832 & 8) != 0)
        {
          do
            v834 = *(_QWORD *)(v834 + 8);
          while ((*(_WORD *)(v834 + 44) & 8) != 0);
        }
        v835 = *(_QWORD *)(v834 + 8);
        if (v833 != v835)
        {
          while (1)
          {
            v836 = **(unsigned __int16 **)(v833 + 16);
            v29 = v836 > 0x17;
            v837 = (1 << v836) & 0x83E000;
            if (v29 || v837 == 0)
              break;
            v833 = *(_QWORD *)(v833 + 8);
            if (v833 == v835)
            {
              v833 = v835;
              break;
            }
          }
        }
        v839 = *(_QWORD *)(*(_QWORD *)(a1 + 288) + 288);
        v840 = *(_QWORD *)(v839 + 368);
        v841 = *(unsigned int *)(v839 + 384);
        if ((_DWORD)v841)
        {
          LODWORD(v842) = ((v833 >> 4) ^ (v833 >> 9)) & (v841 - 1);
          v843 = (uint64_t *)(v840 + 16 * v842);
          v844 = *v843;
          if (v833 == *v843)
            goto LABEL_1081;
          v845 = 1;
          while (v844 != -4096)
          {
            v846 = v842 + v845++;
            v842 = v846 & (v841 - 1);
            v844 = *(_QWORD *)(v840 + 16 * v842);
            if (v833 == v844)
            {
              v843 = (uint64_t *)(v840 + 16 * v842);
              goto LABEL_1081;
            }
          }
        }
        v843 = (uint64_t *)(v840 + 16 * v841);
LABEL_1081:
        v847 = v843[1] & 0xFFFFFFFFFFFFFFF8;
        v848 = *(_DWORD *)(v659 + 8);
        v849 = *(uint64_t **)v659;
        if (!v848)
        {
          v848 = 0;
LABEL_1091:
          v853 = &v849[3 * v848];
          goto LABEL_1092;
        }
        v850 = v849[3 * v848 - 2];
        v851 = *(_DWORD *)(v847 + 24) | 1;
        v852 = (v850 >> 1) & 3 | *(_DWORD *)((v850 & 0xFFFFFFFFFFFFFFF8) + 24);
        v853 = *(uint64_t **)v659;
        v854 = *(unsigned int *)(v659 + 8);
        if (v851 >= v852)
          goto LABEL_1091;
        do
        {
          v855 = v854 >> 1;
          v856 = v853[3 * (v854 >> 1) + 1];
          LODWORD(v856) = (v856 >> 1) & 3 | *(_DWORD *)((v856 & 0xFFFFFFFFFFFFFFF8) + 24);
          v854 -= (v854 >> 1) + 1;
          v857 = v851 >= v856;
          if (v851 >= v856)
            v858 = v855 + 1;
          else
            v858 = 0;
          v853 += 3 * v858;
          if (!v857)
            v854 = v855;
        }
        while (v854);
LABEL_1092:
        v859 = &v849[3 * v848];
        if (v853 == v859
          || ((*v853 >> 1) & 3 | *(_DWORD *)((*v853 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v847 + 24) | 1u))
        {
          v853 = v859;
        }
        if (v853[2] != v702)
          continue;
        *(_DWORD *)v830 &= ~0x4000000u;
        if (v1286 - 1 > 0x3FFFFFFE)
          llvm::MachineOperand::setReg(v830, v1286);
        else
          llvm::MachineOperand::substPhysReg((unsigned int *)v830, v1286, *(_QWORD *)(a1 + 272));
        if ((llvm::MachineInstr *)v831 == v1308)
          continue;
        if (**(_WORD **)(v831 + 16) != 19)
          continue;
        v860 = *(_DWORD **)(v831 + 32);
        if (v860[1] != *((_DWORD *)v662 + 28) || (*v860 & 0xFFF00) != 0)
          continue;
        v861 = *((_DWORD *)v662 + 2);
        v862 = (uint64_t)*v662;
        if (!v861)
        {
          v861 = 0;
LABEL_1114:
          v866 = (_QWORD *)(v862 + 24 * v861);
          goto LABEL_1115;
        }
        v863 = *(_QWORD *)(v862 + 24 * v861 - 16);
        v864 = *(_DWORD *)(v847 + 24) | 2;
        v865 = (v863 >> 1) & 3 | *(_DWORD *)((v863 & 0xFFFFFFFFFFFFFFF8) + 24);
        v866 = *v662;
        v867 = *((unsigned int *)v662 + 2);
        if (v864 >= v865)
          goto LABEL_1114;
        do
        {
          v868 = v867 >> 1;
          v869 = v866[3 * (v867 >> 1) + 1];
          LODWORD(v869) = (v869 >> 1) & 3 | *(_DWORD *)((v869 & 0xFFFFFFFFFFFFFFF8) + 24);
          v867 -= (v867 >> 1) + 1;
          v870 = v864 >= v869;
          if (v864 >= v869)
            v871 = v868 + 1;
          else
            v871 = 0;
          v866 += 3 * v871;
          if (!v870)
            v867 = v868;
        }
        while (v867);
LABEL_1115:
        if (v866 != (_QWORD *)(v862 + 24 * v861)
          && ((*v866 >> 1) & 3 | *(_DWORD *)((*v866 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v847 + 24) | 2u))
        {
          v872 = v866[2];
          if (v872)
          {
            v1292 = llvm::LiveRange::MergeValueNumberInto((uint64_t)v662, v872, v1292);
            for (j = v662[13]; ; j = *(_QWORD **)(v1278 + 104))
            {
              v1278 = (uint64_t)j;
              if (!j)
              {
                sub_1C5251F5C(a1, v831);
                goto LABEL_1095;
              }
              v874 = *((_DWORD *)j + 2);
              v875 = (_QWORD *)*j;
              if (!v874)
                break;
              v876 = v875[3 * v874 - 2];
              v877 = *(_DWORD *)(v847 + 24) | 2;
              v878 = (v876 >> 1) & 3 | *(_DWORD *)((v876 & 0xFFFFFFFFFFFFFFF8) + 24);
              v879 = *(unsigned int *)(v1278 + 8);
              v880 = *(_QWORD **)v1278;
              v881 = v879;
              if (v877 >= v878)
                goto LABEL_1130;
              do
              {
                v882 = v881 >> 1;
                v883 = v880[3 * (v881 >> 1) + 1];
                LODWORD(v883) = (v883 >> 1) & 3 | *(_DWORD *)((v883 & 0xFFFFFFFFFFFFFFF8) + 24);
                v881 -= (v881 >> 1) + 1;
                v884 = v877 >= v883;
                if (v877 >= v883)
                  v885 = v882 + 1;
                else
                  v885 = 0;
                v880 += 3 * v885;
                if (!v884)
                  v881 = v882;
              }
              while (v881);
              v879 = *(unsigned int *)(v1278 + 8);
LABEL_1131:
              v886 = &v875[3 * v879];
              if (v880 != v886
                && ((*v880 >> 1) & 3 | *(_DWORD *)((*v880 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v847 + 24) | 2u))
              {
                v887 = v880[2];
                if (v887)
                {
                  if (!v874)
                    goto LABEL_1144;
                  v888 = *(_DWORD *)(v678 + 24) | 2;
                  if (v888 >= ((*(v886 - 2) >> 1) & 3 | *(_DWORD *)((*(v886 - 2) & 0xFFFFFFFFFFFFFFF8)
                                                                                 + 24)))
                    goto LABEL_1144;
                  do
                  {
                    v889 = v875;
                    v890 = v879 >> 1;
                    v891 = v875[3 * (v879 >> 1) + 1];
                    LODWORD(v891) = (v891 >> 1) & 3 | *(_DWORD *)((v891 & 0xFFFFFFFFFFFFFFF8) + 24);
                    v879 -= (v879 >> 1) + 1;
                    v892 = v888 >= v891;
                    if (v888 >= v891)
                      v893 = v890 + 1;
                    else
                      v893 = 0;
                    v875 = &v889[3 * v893];
                    if (!v892)
                      v879 = v890;
                  }
                  while (v879);
                  if (v875 != v886
                    && ((*v875 >> 1) & 3 | *(_DWORD *)((*v875 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v678 + 24) | 2u))
                  {
                    v894 = v889[3 * v893 + 2];
                  }
                  else
                  {
LABEL_1144:
                    v894 = 0;
                  }
                  llvm::LiveRange::MergeValueNumberInto(v1278, v887, v894);
                }
              }
            }
            v879 = 0;
LABEL_1130:
            v880 = &v875[3 * v879];
            goto LABEL_1131;
          }
        }
LABEL_1095:
        ;
      }
      while (v823);
    }
LABEL_1054:
    LOBYTE(v1319) = 0;
    v824 = *(_QWORD *)(v659 + 104);
    v825 = (unint64_t)v662[13];
    if (!(v824 | v825))
      goto LABEL_1367;
    v1282 = *(_QWORD *)(a1 + 288) + 312;
    if (v824)
    {
      if (!v825)
      {
        v826 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 24)
                                      + 16 * ((_DWORD)v662[14] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                         + 24);
        v827 = (_QWORD *)sub_1C484358C(v1282, 120, 3);
        *v827 = v827 + 2;
        v827[1] = 0x200000000;
        v827[8] = v827 + 10;
        v827[9] = 0x200000000;
        v827[12] = 0;
        sub_1C50E31B0((uint64_t)v827, (uint64_t)v662, v1282);
        v827[14] = v826;
        v827[13] = v662[13];
        v828 = (uint64_t)v827;
        v662[13] = v827;
        v824 = *(_QWORD *)(v659 + 104);
        if (!v824)
        {
          v829 = 0;
          goto LABEL_1348;
        }
      }
    }
    else
    {
      v1000 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + 24)
                                     + 16 * (*(_DWORD *)(v659 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                        + 24);
      v824 = sub_1C484358C(v1282, 120, 3);
      *(_QWORD *)v824 = v824 + 16;
      *(_QWORD *)(v824 + 8) = 0x200000000;
      *(_QWORD *)(v824 + 64) = v824 + 80;
      *(_QWORD *)(v824 + 72) = 0x200000000;
      *(_QWORD *)(v824 + 96) = 0;
      sub_1C50E31B0(v824, v659, v1282);
      *(_QWORD *)(v824 + 112) = v1000;
      *(_QWORD *)(v824 + 104) = *(_QWORD *)(v659 + 104);
      *(_QWORD *)(v659 + 104) = v824;
    }
    v829 = 0;
    v1276 = *(_QWORD *)(*(_QWORD *)(a1 + 288) + 288);
    do
    {
      v1001 = *(_DWORD *)(v824 + 8);
      v1002 = *(_QWORD **)v824;
      if (!v1001)
      {
        v1001 = 0;
LABEL_1316:
        v1006 = &v1002[3 * v1001];
        goto LABEL_1317;
      }
      v1003 = v1002[3 * v1001 - 2];
      v1004 = *(_DWORD *)(v678 + 24) | 1;
      v1005 = (v1003 >> 1) & 3 | *(_DWORD *)((v1003 & 0xFFFFFFFFFFFFFFF8) + 24);
      v1006 = *(_QWORD **)v824;
      v1007 = *(unsigned int *)(v824 + 8);
      if (v1004 >= v1005)
        goto LABEL_1316;
      do
      {
        v1008 = v1007 >> 1;
        v1009 = v1006[3 * (v1007 >> 1) + 1];
        LODWORD(v1009) = (v1009 >> 1) & 3 | *(_DWORD *)((v1009 & 0xFFFFFFFFFFFFFFF8) + 24);
        v1007 -= (v1007 >> 1) + 1;
        v1010 = v1004 >= v1009;
        if (v1004 >= v1009)
          v1011 = v1008 + 1;
        else
          v1011 = 0;
        v1006 += 3 * v1011;
        if (!v1010)
          v1007 = v1008;
      }
      while (v1007);
LABEL_1317:
      if (v1006 != &v1002[3 * v1001]
        && ((*v1006 >> 1) & 3 | *(_DWORD *)((*v1006 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v678 + 24) | 1u))
      {
        v1012 = (void *)v1006[2];
        if (v1012)
        {
          v1013 = *(_QWORD *)(v824 + 112);
          v1288 = v1013 | v829;
          v1014 = (void **)operator new(0x30uLL);
          *v1014 = &off_1E8149C70;
          v1014[1] = (void *)v1282;
          v1014[2] = (void *)v824;
          v1014[3] = (void *)(v678 | 4);
          v1014[4] = v1012;
          v1014[5] = &v1319;
          v1335 = v1014;
          llvm::LiveInterval::refineSubRanges((uint64_t)v662, v1282, v1013, (uint64_t)&v1332, v1276, *(_QWORD **)(a1 + 272), 0);
          if (v1335 == &v1332)
          {
            v1015 = (void (**)(void))((char *)v1332 + 32);
LABEL_1324:
            (*v1015)();
          }
          else if (v1335)
          {
            v1015 = (void (**)(void))((char *)*v1335 + 40);
            goto LABEL_1324;
          }
          v829 = v1288;
        }
      }
      v824 = *(_QWORD *)(v824 + 104);
    }
    while (v824);
    v828 = (uint64_t)v662[13];
    if (v828)
    {
      while (1)
      {
LABEL_1348:
        if ((*(_QWORD *)(v828 + 112) & v829) != 0)
          goto LABEL_1366;
        v1026 = *(_DWORD *)(v828 + 8);
        v1027 = *(char **)v828;
        if (!v1026)
          break;
        v1028 = *(_QWORD *)&v1027[24 * v1026 - 16];
        v1029 = *(_DWORD *)(v678 + 24) | 2;
        v1030 = (v1028 >> 1) & 3 | *(_DWORD *)((v1028 & 0xFFFFFFFFFFFFFFF8) + 24);
        v1031 = *(char **)v828;
        v1032 = *(unsigned int *)(v828 + 8);
        if (v1029 >= v1030)
        {
          v1020 = *(unsigned int *)(v828 + 8);
LABEL_1360:
          v1031 = &v1027[24 * v1020];
          goto LABEL_1361;
        }
        do
        {
          v1033 = v1032 >> 1;
          v1034 = *(_QWORD *)&v1031[24 * (v1032 >> 1) + 8];
          LODWORD(v1034) = (v1034 >> 1) & 3 | *(_DWORD *)((v1034 & 0xFFFFFFFFFFFFFFF8) + 24);
          v1032 -= (v1032 >> 1) + 1;
          v1035 = v1029 >= v1034;
          if (v1029 >= v1034)
            v1036 = v1033 + 1;
          else
            v1036 = 0;
          v1031 += 24 * v1036;
          if (!v1035)
            v1032 = v1033;
        }
        while (v1032);
        v1020 = *(unsigned int *)(v828 + 8);
LABEL_1361:
        v1037 = &v1027[24 * v1020];
        if (v1031 == v1037)
          goto LABEL_1366;
        v1038 = *(_QWORD *)v1031;
        v1039 = *(_QWORD *)v1031 & 0xFFFFFFFFFFFFFFF8;
        v1040 = (*(_QWORD *)v1031 >> 1) & 3 | *(_DWORD *)(v1039 + 24);
        if (v1040 > (*(_DWORD *)(v678 + 24) | 2u) || v1039 != v678)
          goto LABEL_1366;
        v1016 = v829;
        if (v1026)
        {
          v1017 = &v1027[24 * v1020];
          if (v1040 < ((*((_QWORD *)v1037 - 2) >> 1) & 3 | *(_DWORD *)((*((_QWORD *)v1037 - 2) & 0xFFFFFFFFFFFFFFF8)
                                                                                    + 24)))
          {
            v1017 = *(char **)v828;
            do
            {
              v1018 = v1020 >> 1;
              v1019 = *(_QWORD *)&v1017[24 * (v1020 >> 1) + 8];
              LODWORD(v1019) = (v1019 >> 1) & 3 | *(_DWORD *)((v1019 & 0xFFFFFFFFFFFFFFF8) + 24);
              v1020 -= (v1020 >> 1) + 1;
              v1021 = v1040 >= v1019;
              if (v1040 >= v1019)
                v1022 = v1018 + 1;
              else
                v1022 = 0;
              v1017 += 24 * v1022;
              if (!v1021)
                v1020 = v1018;
            }
            while (v1020);
          }
        }
        else
        {
          v1017 = &v1027[24 * v1020];
        }
        v1023 = (void *)*((_QWORD *)v1031 + 1);
        v1024 = (void *)*((_QWORD *)v1017 + 1);
        v1025 = *((_QWORD *)v1017 + 2);
        if (*(_QWORD *)v1017 == v1038)
        {
          if (v1024 == v1023)
          {
            if (v1037 != v1017 + 24)
            {
              memmove(v1017, v1017 + 24, v1037 - (v1017 + 24));
              v1026 = *(_DWORD *)(v828 + 8);
            }
            *(_DWORD *)(v828 + 8) = v1026 - 1;
            llvm::LiveRange::removeValNoIfDead(v828, v1025);
          }
          else
          {
            *(_QWORD *)v1017 = v1023;
          }
          goto LABEL_1346;
        }
        *((_QWORD *)v1017 + 1) = v1038;
        if (v1024 != v1023)
        {
          v1325 = v1023;
          v1326 = (uint64_t)v1024;
          v1327[0] = v1025;
          sub_1C510F69C(v828, (uint64_t)(v1017 + 24), (unint64_t)&v1325);
LABEL_1346:
          v829 = v1016;
        }
LABEL_1366:
        v828 = *(_QWORD *)(v828 + 104);
        if (!v828)
          goto LABEL_1367;
      }
      v1020 = 0;
      goto LABEL_1360;
    }
LABEL_1367:
    *(_QWORD *)(v1292 + 8) = *(_QWORD *)(v702 + 8);
    v1042 = sub_1C5257260((uint64_t)v662, v1292, *(_QWORD *)v659, *(_DWORD *)(v659 + 8), v702);
    LOBYTE(v1319) = v1319 | BYTE1(v1042);
    llvm::LiveIntervals::removeVRegDefAt(*(_QWORD *)(a1 + 288), v659, *(_QWORD *)(v702 + 8));
    v1043 = v1319;
    sub_1C5251F5C(a1, (uint64_t)v1308);
    if (v1043)
    {
      v1044 = *(_QWORD *)(a1 + 288);
      if (BYTE2(v1310[2]))
        v1045 = (int *)v1310 + 1;
      else
        v1045 = (int *)v1310;
      v1046 = *v1045;
      if ((*v1045 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v1044 + 416)
        || (v1047 = *(llvm::LiveInterval **)(*(_QWORD *)(v1044 + 408) + 8 * (v1046 & 0x7FFFFFFF))) == 0)
      {
        v1047 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(a1 + 288), v1046);
        v1262 = *(_QWORD *)(v1044 + 304);
        v1263 = *(_QWORD *)(v1044 + 248);
        *(_QWORD *)v1262 = v1263;
        *(_QWORD *)(v1262 + 8) = *(_QWORD *)(v1263 + 40);
        *(_OWORD *)(v1262 + 16) = *(_OWORD *)(v1044 + 288);
        *(_QWORD *)(v1262 + 32) = v1044 + 312;
        llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v1262);
        *(_DWORD *)(v1262 + 184) = 0;
        v1264 = *(_QWORD *)(v1044 + 256);
        v22 = *(_BYTE *)(v1264 + 16) == 0;
        v1265 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v1264 + 24) + 16
                                                                          * (*((_DWORD *)v1047 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                   + 34);
        v1267 = !v22 && v1265 != 0;
        llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v1044 + 304), v1047, v1267);
        llvm::LiveIntervals::computeDeadValues(v1044, (uint64_t)v1047, 0);
      }
      sub_1C5251D74(a1, v1047, 0);
    }
LABEL_621:
    v112 = 0;
    v111 = 1;
LABEL_622:
    v5 = v1304;
    v6 = v1306;
    v7 = (uint64_t)v1307;
LABEL_1008:
    v5 |= v111;
    if ((v111 & 1) != 0 || !v112)
LABEL_1679:
      *v3 = 0;
LABEL_1680:
    ++v3;
  }
  while (v3 != v6);
  return v5 & 1;
}

uint64_t sub_1C52519B8(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::LiveInterval *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::LiveInterval *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  if (!byte_1ED7FEE88)
    return 0;
  v40 = 0;
  v4 = sub_1C52471B4(a1[34], a2, (_DWORD *)&v40 + 1, &v40, &v39, &v38);
  result = 0;
  if (!v4)
    return result;
  v6 = v40;
  if ((v40 - 1) < 0x3FFFFFFF)
    return 0;
  v7 = HIDWORD(v40);
  if ((HIDWORD(v40) - 1) < 0x3FFFFFFF)
    return 0;
  v8 = a1[33];
  result = sub_1C5251CE8(v40, a2, v8);
  if ((_DWORD)result)
  {
    v9 = *(_QWORD *)(a2 + 24);
    v10 = a1[36];
    if ((v6 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v10 + 416)
      && (v11 = *(llvm::LiveInterval **)(*(_QWORD *)(v10 + 408) + 8 * (v6 & 0x7FFFFFFF))) != 0)
    {
      if ((v7 & 0x80000000) == 0)
      {
LABEL_11:
        v12 = (uint64_t *)(*(_QWORD *)(v8 + 272) + 8 * v7);
        goto LABEL_20;
      }
    }
    else
    {
      v11 = (llvm::LiveInterval *)sub_1C4851220(a1[36], v6);
      v13 = *(_QWORD *)(v10 + 304);
      v14 = *(_QWORD *)(v10 + 248);
      *(_QWORD *)v13 = v14;
      *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 40);
      *(_OWORD *)(v13 + 16) = *(_OWORD *)(v10 + 288);
      *(_QWORD *)(v13 + 32) = v10 + 312;
      llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v13);
      *(_DWORD *)(v13 + 184) = 0;
      v15 = *(_QWORD *)(v10 + 256);
      v17 = *(_BYTE *)(v15 + 16) == 0;
      v16 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v15 + 24) + 16 * (*((_DWORD *)v11 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                               + 34);
      v17 = v17 || v16 == 0;
      v18 = !v17;
      llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v10 + 304), v11, v18);
      llvm::LiveIntervals::computeDeadValues(v10, (uint64_t)v11, 0);
      v8 = a1[33];
      if ((v7 & 0x80000000) == 0)
        goto LABEL_11;
    }
    v12 = (uint64_t *)(*(_QWORD *)(v8 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8);
LABEL_20:
    v19 = *v12;
    if (*v12)
    {
      while ((*(_DWORD *)v19 & 0x80000000) != 0)
      {
        v19 = *(_QWORD *)(v19 + 24);
        if (!v19)
          return 0;
      }
      v20 = *(_QWORD *)(v19 + 8);
LABEL_25:
      if (v20 == a2
        || ((v21 = **(unsigned __int16 **)(v20 + 16), v21 != 19) ? (v22 = v21 == 11) : (v22 = 1),
            !v22 || *(_QWORD *)(v20 + 24) != v9))
      {
LABEL_42:
        v26 = *(_QWORD *)(v19 + 8);
        while (1)
        {
          v19 = *(_QWORD *)(v19 + 24);
          if (!v19)
            return 0;
          if ((*(_DWORD *)v19 & 0x80000000) == 0)
          {
            v20 = *(_QWORD *)(v19 + 8);
            if (v20 != v26)
              goto LABEL_25;
          }
        }
      }
      v37 = 0;
      if ((sub_1C52471B4(a1[34], a2, (_DWORD *)&v37 + 1, &v37, &v36, &v35) & 1) != 0)
      {
        if ((_DWORD)v37 == (_DWORD)v7)
          v23 = HIDWORD(v37);
        else
          v23 = v37;
        if (v23 - 1 >= 0x3FFFFFFF && (sub_1C5251CE8(v23, v20, a1[33]) & 1) == 0)
        {
          v24 = a1[36];
          if ((v23 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(v24 + 416)
            || (v25 = *(_QWORD *)(*(_QWORD *)(v24 + 408) + 8 * (v23 & 0x7FFFFFFF))) == 0)
          {
            v27 = (llvm::LiveInterval *)sub_1C4851220(a1[36], v23);
            v34 = v19;
            v28 = *(_QWORD *)(v24 + 304);
            v29 = *(_QWORD *)(v24 + 248);
            *(_QWORD *)v28 = v29;
            *(_QWORD *)(v28 + 8) = *(_QWORD *)(v29 + 40);
            *(_OWORD *)(v28 + 16) = *(_OWORD *)(v24 + 288);
            *(_QWORD *)(v28 + 32) = v24 + 312;
            llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v28);
            *(_DWORD *)(v28 + 184) = 0;
            v19 = v34;
            v30 = *(_QWORD *)(v24 + 256);
            v17 = *(_BYTE *)(v30 + 16) == 0;
            v31 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v30 + 24) + 16 * (*((_DWORD *)v27 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                     + 34);
            v33 = !v17 && v31 != 0;
            llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v24 + 304), v27, v33);
            llvm::LiveIntervals::computeDeadValues(v24, (uint64_t)v27, 0);
            v25 = (uint64_t)v27;
          }
          if (*((_DWORD *)v11 + 2) && llvm::LiveRange::overlapsFrom(v25, (uint64_t)v11, *(_QWORD **)v11))
            return 1;
        }
        goto LABEL_42;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_1C5251CE8(unsigned int a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  BOOL v8;

  if ((a1 & 0x80000000) != 0)
    v3 = (uint64_t *)(*(_QWORD *)(a3 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  else
    v3 = (uint64_t *)(*(_QWORD *)(a3 + 272) + 8 * a1);
  v4 = *v3;
  if (!v4)
    return 1;
  while ((*(_DWORD *)v4 & 0x80000000) != 0)
  {
    v4 = *(_QWORD *)(v4 + 24);
    if (!v4)
      return 1;
  }
  v6 = *(_QWORD *)(v4 + 8);
LABEL_9:
  if (v6 == a2 || ((v7 = **(unsigned __int16 **)(v6 + 16), v7 != 11) ? (v8 = v7 == 19) : (v8 = 1), !v8))
  {
    while (1)
    {
      v4 = *(_QWORD *)(v4 + 24);
      if (!v4)
        return 1;
      if ((*(_DWORD *)v4 & 0x80000000) == 0 && *(_QWORD *)(v4 + 8) != v6)
      {
        v6 = *(_QWORD *)(v4 + 8);
        goto LABEL_9;
      }
    }
  }
  return 0;
}

void sub_1C5251D74(uint64_t a1, const llvm::LiveRange *a2, uint64_t a3)
{
  void *v5[2];
  _QWORD v6[9];

  v6[8] = *MEMORY[0x1E0C80C00];
  if (llvm::LiveIntervals::shrinkToUses(*(_QWORD **)(a1 + 288), (uint64_t)a2, a3))
  {
    v5[0] = v6;
    v5[1] = (void *)0x800000000;
    llvm::LiveIntervals::splitSeparateComponents(*(_QWORD *)(a1 + 288), a2, (uint64_t)v5);
    if (v5[0] != v6)
      free(v5[0]);
  }
}

void sub_1C5251E14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6[3];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  int v18;
  _BYTE v19[32];
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  _QWORD *v25;
  uint64_t v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x1E0C80C00];
  v25 = v27;
  v26 = 0x800000000;
  v2 = *(_QWORD *)(a1 + 256);
  v3 = *(_QWORD *)(a1 + 288);
  v4 = a1 + 248;
  v6[0] = (uint64_t)&off_1E8143478;
  v6[1] = 0;
  v5 = *(_QWORD *)(v2 + 40);
  v6[2] = (uint64_t)&v25;
  v7 = v5;
  v8 = v3;
  v9 = 0;
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 16) + 104))(*(_QWORD *)(v2 + 16));
  v11 = v4;
  v12 = v26;
  v13 = 0;
  v14 = 0;
  v15 = v19;
  v16 = v19;
  v17 = 4;
  v18 = 0;
  v20 = v24;
  v21 = v24;
  v22 = 4;
  v23 = 0;
  *(_QWORD *)(v5 + 8) = v6;
  llvm::LiveRangeEdit::eliminateDeadDefs(v6, a1 + 920, 0, 0, 0);
  v6[0] = (uint64_t)&off_1E8143478;
  *(_QWORD *)(v7 + 8) = 0;
  if (v21 != v20)
    free(v21);
  if (v16 != v15)
    free(v16);
  if (v25 != v27)
    free(v25);
}

uint64_t sub_1C5251F5C(uint64_t a1, uint64_t a2)
{
  int32x2_t *v4;
  int32x2_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;

  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 824), a2);
  v4 = *(int32x2_t **)(*(_QWORD *)(a1 + 288) + 288);
  v5 = v4[46];
  v6 = v4[48].u32[0];
  if ((_DWORD)v6)
  {
    LODWORD(v7) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v8 = (uint64_t *)(*(_QWORD *)&v5 + 16 * v7);
    v9 = *v8;
    if (*v8 == a2)
      goto LABEL_8;
    v10 = 1;
    while (v9 != -4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v6 - 1);
      v9 = *(_QWORD *)(*(_QWORD *)&v5 + 16 * v7);
      if (v9 == a2)
      {
        v8 = (uint64_t *)(*(_QWORD *)&v5 + 16 * v7);
        goto LABEL_8;
      }
    }
  }
  v8 = (uint64_t *)(*(_QWORD *)&v5 + 16 * v6);
LABEL_8:
  if (v8 != (uint64_t *)(*(_QWORD *)&v5 + 16 * v6))
  {
    v12 = v8[1] & 0xFFFFFFFFFFFFFFF8;
    *v8 = -8192;
    v4[47] = vadd_s32(v4[47], (int32x2_t)0x1FFFFFFFFLL);
    *(_QWORD *)(v12 + 16) = 0;
  }
  v13 = a2;
  if ((*(_BYTE *)a2 & 4) == 0)
  {
    v13 = a2;
    if ((*(_WORD *)(a2 + 44) & 8) != 0)
    {
      v13 = a2;
      do
        v13 = *(_QWORD *)(v13 + 8);
      while ((*(_WORD *)(v13 + 44) & 8) != 0);
    }
  }
  return sub_1C487FE80(*(_QWORD *)(a2 + 24) + 40, a2, *(_QWORD *)(v13 + 8));
}

uint64_t sub_1C525205C(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t result;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  llvm::LiveInterval *v19;
  uint64_t v20;
  __int16 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  _QWORD *v39;
  uint64_t v40;
  unsigned int v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  BOOL v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  unint64_t v53;
  uint64_t v55;
  int v56;
  uint64_t v58;
  llvm::TargetInstrInfo *v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *i;
  int v63;
  int v64;
  int v65;
  _BOOL4 isSafeToMove;
  _BOOL4 v68;
  _DWORD *v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unsigned __int8 *v75;
  unint64_t *v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  unsigned __int8 **v80;
  unsigned __int8 *v81;
  uint64_t v82;
  unsigned int *v83;
  unsigned int v84;
  uint64_t CommonSubClass;
  int v86;
  unsigned int v87;
  unint64_t v88;
  unsigned int v89;
  unint64_t v90;
  _OWORD *v91;
  _OWORD *v92;
  __int128 v93;
  uint64_t v94;
  unsigned int v95;
  int v96;
  unsigned int *v97;
  __int16 v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unsigned int v103;
  int v104;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  int v111;
  int v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v119;
  int v120;
  _QWORD *v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  unsigned int v125;
  int v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned __int16 *v133;
  unsigned __int16 *v134;
  int v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  __int16 v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unsigned int v148;
  int v149;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  __int16 v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unsigned int v165;
  int v166;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  int v173;
  int v174;
  unsigned int v175;
  uint64_t v176;
  _QWORD *v177;
  unint64_t v178;
  _WORD *v179;
  unsigned __int16 *v180;
  __int16 v181;
  unsigned __int16 v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  char v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  uint64_t v196;
  uint64_t v197;
  unsigned int v198;
  unsigned int v199;
  _QWORD *v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  BOOL v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unsigned int v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int v217;
  unsigned int v218;
  _QWORD *v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  BOOL v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t *v226;
  llvm::LiveInterval *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  int v233;
  uint64_t v234;
  void *v235;
  uint64_t v236;
  _DWORD *v237;
  llvm::MachineOperand *v238;
  uint64_t v239;
  __int16 v240;
  unint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  unsigned int v245;
  int v246;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t v252;
  int v253;
  int v254;
  uint64_t v255;
  uint64_t *v256;
  uint64_t v257;
  unint64_t v258;
  unsigned int v259;
  uint64_t v260;
  _QWORD *v261;
  unint64_t v262;
  _WORD *v263;
  unsigned __int16 *v264;
  __int16 v265;
  unsigned __int16 v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  int v279;
  unsigned int v280;
  int v281;
  int v282;
  unsigned int v283;
  uint64_t v284;
  uint64_t *v285;
  uint64_t v286;
  unsigned int v287;
  int v288;
  int v290;
  unsigned int v291;
  _DWORD *v292;
  int v293;
  _DWORD *v294;
  int v295;
  BOOL v296;
  unsigned int v297;
  _DWORD *v298;
  _DWORD *v299;
  uint64_t v300;
  uint64_t v301;
  llvm::AAResults *v302;
  int v303;
  llvm::AAResults *v304;
  llvm::AAResults *j;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t *v309[4];
  unsigned __int8 *v310;
  unsigned __int8 *v311;
  BOOL v312;
  unsigned int v313;
  llvm::MachineOperand *v314;
  uint64_t v315;
  void **v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  int v322;
  char v323;
  uint64_t v324;
  _BYTE *v325;
  _BYTE *v326;
  uint64_t v327;
  int v328;
  _BYTE v329[32];
  _BYTE *v330;
  _BYTE *v331;
  uint64_t v332;
  int v333;
  _BYTE v334[32];
  _QWORD *v335;
  uint64_t v336;
  _QWORD v337[6];

  result = 0;
  v337[4] = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  v9 = *(_DWORD *)(a2 + 8);
  v8 = *(_DWORD *)(a2 + 12);
  v10 = *(_BYTE *)(a2 + 26) == 0;
  if (*(_BYTE *)(a2 + 26))
    v11 = *(_DWORD *)(a2 + 8);
  else
    v11 = *(_DWORD *)(a2 + 12);
  v313 = v11;
  v12 = *(_DWORD *)(a2 + 16);
  v13 = *(_DWORD *)(a2 + 20);
  if (v10)
    v14 = v13;
  else
    v14 = v12;
  if (v10)
    v15 = v9;
  else
    v15 = v8;
  if (v10)
    v16 = v12;
  else
    v16 = v13;
  if ((v11 - 1) < 0x3FFFFFFF)
    return result;
  v18 = *(_QWORD *)(a1 + 288);
  if ((v11 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v18 + 416)
    || (v19 = *(llvm::LiveInterval **)(*(_QWORD *)(v18 + 408) + 8 * (v11 & 0x7FFFFFFF))) == 0)
  {
    v308 = a1;
    v113 = v15;
    v19 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(a1 + 288), v11);
    v114 = *(_QWORD *)(v18 + 304);
    v115 = *(_QWORD *)(v18 + 248);
    *(_QWORD *)v114 = v115;
    *(_QWORD *)(v114 + 8) = *(_QWORD *)(v115 + 40);
    *(_OWORD *)(v114 + 16) = *(_OWORD *)(v18 + 288);
    *(_QWORD *)(v114 + 32) = v18 + 312;
    llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v114);
    *(_DWORD *)(v114 + 184) = 0;
    v116 = *(_QWORD *)(v18 + 256);
    v10 = *(_BYTE *)(v116 + 16) == 0;
    v117 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v116 + 24) + 16 * (*((_DWORD *)v19 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                              + 34);
    v119 = !v10 && v117 != 0;
    llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v18 + 304), v19, v119);
    llvm::LiveIntervals::computeDeadValues(v18, (uint64_t)v19, 0);
    v15 = v113;
    a1 = v308;
    v18 = *(_QWORD *)(v308 + 288);
  }
  v20 = *(_QWORD *)(v18 + 288);
  v21 = *(_WORD *)(a3 + 44);
  v22 = a3;
  if ((v21 & 4) != 0)
  {
    v22 = a3;
    do
      v22 = *(_QWORD *)v22 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v22 + 44) & 4) != 0);
  }
  v23 = a3;
  if ((v21 & 8) != 0)
  {
    v23 = a3;
    do
      v23 = *(_QWORD *)(v23 + 8);
    while ((*(_WORD *)(v23 + 44) & 8) != 0);
  }
  v24 = *(_QWORD *)(v23 + 8);
  if (v22 != v24)
  {
    while (1)
    {
      v25 = **(unsigned __int16 **)(v22 + 16);
      v26 = v25 > 0x17;
      v27 = (1 << v25) & 0x83E000;
      if (v26 || v27 == 0)
        break;
      v22 = *(_QWORD *)(v22 + 8);
      if (v22 == v24)
      {
        v22 = *(_QWORD *)(v23 + 8);
        break;
      }
    }
  }
  v29 = *(_QWORD *)(v20 + 368);
  v30 = *(unsigned int *)(v20 + 384);
  if ((_DWORD)v30)
  {
    LODWORD(v31) = ((v22 >> 4) ^ (v22 >> 9)) & (v30 - 1);
    v32 = (uint64_t *)(v29 + 16 * v31);
    v33 = *v32;
    if (v22 == *v32)
      goto LABEL_32;
    v34 = 1;
    while (v33 != -4096)
    {
      v35 = v31 + v34++;
      v31 = v35 & (v30 - 1);
      v33 = *(_QWORD *)(v29 + 16 * v31);
      if (v22 == v33)
      {
        v32 = (uint64_t *)(v29 + 16 * v31);
        goto LABEL_32;
      }
    }
  }
  v32 = (uint64_t *)(v29 + 16 * v30);
LABEL_32:
  v36 = v32[1];
  v37 = v36 & 0xFFFFFFFFFFFFFFF8;
  v38 = *((_DWORD *)v19 + 2);
  v39 = *(_QWORD **)v19;
  if (!v38)
  {
    v38 = 0;
    goto LABEL_43;
  }
  v40 = v39[3 * v38 - 2];
  v41 = *(_DWORD *)(v37 + 24);
  if (v41 >= ((v40 >> 1) & 3 | *(_DWORD *)((v40 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_43:
    v42 = &v39[3 * v38];
    goto LABEL_44;
  }
  v42 = *(_QWORD **)v19;
  v43 = *((unsigned int *)v19 + 2);
  do
  {
    v44 = v43 >> 1;
    v45 = v42[3 * (v43 >> 1) + 1];
    LODWORD(v45) = (v45 >> 1) & 3 | *(_DWORD *)((v45 & 0xFFFFFFFFFFFFFFF8) + 24);
    v43 -= (v43 >> 1) + 1;
    v46 = v41 >= v45;
    if (v41 >= v45)
      v47 = v44 + 1;
    else
      v47 = 0;
    v42 += 3 * v47;
    if (!v46)
      v43 = v44;
  }
  while (v43);
LABEL_44:
  v48 = &v39[3 * v38];
  if (v42 == v48
    || ((*v42 >> 1) & 3 | *(_DWORD *)((*v42 & 0xFFFFFFFFFFFFFFF8) + 24)) > *(_DWORD *)(v37 + 24))
  {
    return 0;
  }
  v49 = v42[2];
  v50 = v42[1] & 0xFFFFFFFFFFFFFFF8;
  v51 = v42 + 3;
  if (v37 == v50 && v51 == v48)
  {
    if (!v49)
      return 0;
    v53 = *(_QWORD *)(v49 + 8);
  }
  else
  {
    v53 = *(_QWORD *)(v49 + 8);
    if (v53 == v37)
      return 0;
  }
  if (v53 < 8 || (v53 & 6) == 0)
    return 0;
  v55 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFFFF8) + 16);
  if (!v55)
    return 0;
  v56 = **(unsigned __int16 **)(v55 + 16);
  if (v56 == 19 || v56 == 11)
  {
    result = 0;
    *a4 = 1;
    return result;
  }
  v306 = v15;
  v307 = a1;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 280) + 152))(*(_QWORD *)(a1 + 280), v55);
  if ((_DWORD)result)
  {
    v58 = *(_QWORD *)(v55 + 16);
    if (*(_WORD *)v58 != 10)
    {
      if ((*(_BYTE *)(v58 + 11) & 0x20) == 0)
        return 0;
      v59 = *(llvm::TargetInstrInfo **)(v307 + 280);
      v302 = *(llvm::AAResults **)(v307 + 304);
      if (((*(uint64_t (**)(llvm::TargetInstrInfo *, uint64_t))(*(_QWORD *)v59 + 32))(v59, v55) & 1) == 0)
      {
        result = llvm::TargetInstrInfo::isReallyTriviallyReMaterializableGeneric(v59, (const llvm::MachineInstr *)v55, v302);
        if (!(_DWORD)result)
          return result;
      }
    }
    v60 = *(unsigned int *)(v55 + 40);
    if (!(_DWORD)v60)
      return 0;
    v61 = 32 * v60;
    for (i = (_DWORD *)(*(_QWORD *)(v55 + 32) + 4); ; i += 8)
    {
      v63 = *(i - 1);
      if ((v63 & 0x10000FF) == 0x1000000 && *i == v11)
      {
        v64 = v63 & 0xFFF00;
        v65 = v63 & 0x10000000;
        if (!v64 || v65 != 0)
          break;
      }
      result = 0;
      v61 -= 32;
      if (!v61)
        return result;
    }
    v312 = 0;
    isSafeToMove = llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)v55, *(llvm::AAResults **)(v307 + 304), &v312);
    v68 = isSafeToMove;
    result = 0;
    if (v68)
    {
      if (*(_BYTE *)(*(_QWORD *)(v55 + 16) + 4) != 1)
        return 0;
      v69 = *(_DWORD **)(a3 + 32);
      if ((*v69 & 0xFFF00) != 0 && (*v69 & 0x10000000) == 0)
        return 0;
      v303 = v69[1];
      if ((_DWORD)v14)
      {
        if ((_DWORD)v16)
          return 0;
      }
      v301 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v307 + 280) + 16))(*(_QWORD *)(v307 + 280));
      if (**(_WORD **)(v55 + 16) == 10)
        goto LABEL_89;
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v307 + 272) + 560))(*(_QWORD *)(v307 + 272)))
      {
        if ((v306 & 0x80000000) != 0)
        {
          if (v301 != (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v307 + 264) + 24) + 16 * (v306 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8))
            return 0;
          goto LABEL_89;
        }
        if ((v306 - 1) > 0x3FFFFFFE
          || (v306 >> 3) >= *(unsigned __int16 *)(*(_QWORD *)v301 + 22)
          || ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v301 + 8) + (v306 >> 3)) >> (v306 & 7)) & 1) == 0)
        {
          return 0;
        }
      }
      else if ((v306 - 1) > 0x3FFFFFFE)
      {
LABEL_89:
        v300 = *(_QWORD *)(v49 + 8);
        v335 = v337;
        v336 = 0x800000000;
        v71 = *(_QWORD *)(v307 + 256);
        v72 = *(_QWORD *)(v307 + 288);
        v314 = (llvm::MachineOperand *)&off_1E8143478;
        v315 = 0;
        v73 = *(_QWORD *)(v71 + 40);
        v316 = (void **)&v335;
        v317 = v73;
        v318 = v72;
        v319 = 0;
        v320 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v71 + 16) + 104))(*(_QWORD *)(v71 + 16));
        v321 = v307 + 248;
        v322 = v336;
        v323 = 0;
        v324 = 0;
        v325 = v329;
        v326 = v329;
        v327 = 4;
        v328 = 0;
        v330 = v334;
        v331 = v334;
        v332 = 4;
        v333 = 0;
        *(_QWORD *)(v73 + 8) = &v314;
        v74 = llvm::LiveRangeEdit::allUsesAvailableAt((uint64_t)&v314, v55, v300, v36);
        v314 = (llvm::MachineOperand *)&off_1E8143478;
        *(_QWORD *)(v317 + 8) = 0;
        if (v331 != v330)
          free(v331);
        if (v326 != v325)
          free(v326);
        if (v335 != v337)
          free(v335);
        if (v74)
        {
          v75 = *(unsigned __int8 **)(a3 + 56);
          v311 = v75;
          if (v75)
            llvm::MetadataTracking::track((uint64_t)&v311, v75, 2);
          v76 = *(unint64_t **)(a3 + 24);
          v77 = a3;
          if ((*(_BYTE *)a3 & 4) == 0)
          {
            v77 = a3;
            if ((*(_WORD *)(a3 + 44) & 8) != 0)
            {
              v77 = a3;
              do
                v77 = *(_QWORD *)(v77 + 8);
              while ((*(_WORD *)(v77 + 44) & 8) != 0);
            }
          }
          v78 = *(_QWORD **)(v77 + 8);
          (*(void (**)(_QWORD, _QWORD, _QWORD *, unint64_t, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(v307 + 280) + 176))(*(_QWORD *)(v307 + 280), *(_QWORD *)(a3 + 24), v78, v306, v14, v55, *(_QWORD *)(v307 + 272));
          v79 = *v78 & 0xFFFFFFFFFFFFFFF8;
          if (!v79 || (*(_BYTE *)v79 & 4) == 0)
          {
            while ((*(_WORD *)(v79 + 44) & 4) != 0)
              v79 = *(_QWORD *)v79 & 0xFFFFFFFFFFFFFFF8;
          }
          v310 = v311;
          if (v311)
            llvm::MetadataTracking::track((uint64_t)&v310, v311, 2);
          v80 = (unsigned __int8 **)(v79 + 56);
          if (&v310 == (unsigned __int8 **)(v79 + 56))
          {
            if (v310)
              llvm::MetadataTracking::untrack((uint64_t)&v310, v310);
          }
          else
          {
            if (*v80)
              llvm::MetadataTracking::untrack(v79 + 56, *v80);
            v81 = v310;
            *v80 = v310;
            if (v81)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v310, v81, v79 + 56);
              v310 = 0;
            }
          }
          v82 = *(_QWORD *)(a2 + 32);
          if ((_DWORD)v16)
          {
            v83 = *(unsigned int **)(v79 + 32);
            v84 = *v83;
            if (((*v83 >> 8) & 0xFFF) == (_DWORD)v16)
            {
              CommonSubClass = llvm::TargetRegisterInfo::getCommonSubClass(*(_QWORD *)(v307 + 272), v301, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v307 + 264) + 24) + 16 * (v306 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
              if (CommonSubClass)
              {
                v16 = 0;
                *v83 = v84 & 0xEFF000FF;
                v82 = CommonSubClass;
              }
            }
          }
          v314 = (llvm::MachineOperand *)&v316;
          v315 = 0x400000000;
          v86 = *(_DWORD *)(a3 + 40);
          v87 = *(unsigned __int16 *)(*(_QWORD *)(a3 + 16) + 2);
          v88 = v86 - v87;
          if (v88 >= 5)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v314, (uint64_t)&v316, v88, 32);
            v87 = *(unsigned __int16 *)(*(_QWORD *)(a3 + 16) + 2);
            v86 = *(_DWORD *)(a3 + 40);
          }
          if (v86 != v87)
          {
            do
            {
              v89 = v87;
              v90 = *(_QWORD *)(a3 + 32) + 32 * v87;
              if (!*(_BYTE *)v90 && (*(_DWORD *)(v90 + 4) - 1) <= 0x3FFFFFFE)
              {
                v91 = (_OWORD *)sub_1C47C0F60((uint64_t)&v314, v90, 1);
                v92 = (_OWORD *)((char *)v314 + 32 * v315);
                v93 = v91[1];
                *v92 = *v91;
                v92[1] = v93;
                LODWORD(v315) = v315 + 1;
              }
              v87 = v89 + 1;
            }
            while (v86 != v89 + 1);
          }
          sub_1C49FB860(*(int32x2_t **)(*(_QWORD *)(v307 + 288) + 288), a3, v79);
          v94 = a3;
          if ((*(_BYTE *)a3 & 4) == 0)
          {
            v94 = a3;
            if ((*(_WORD *)(a3 + 44) & 8) != 0)
            {
              v94 = a3;
              do
                v94 = *(_QWORD *)(v94 + 8);
              while ((*(_WORD *)(v94 + 44) & 8) != 0);
            }
          }
          sub_1C487FE80(*(_QWORD *)(a3 + 24) + 40, a3, *(_QWORD *)(v94 + 8));
          sub_1C4774094((llvm::SmallPtrSetImplBase *)(v307 + 824), a3);
          v335 = v337;
          v336 = 0x400000000;
          v95 = *(unsigned __int16 *)(*(_QWORD *)(v79 + 16) + 2);
          v96 = *(_DWORD *)(v79 + 40);
          if (v96 != v95)
          {
            v123 = 0;
            do
            {
              v124 = *(_QWORD *)(v79 + 32);
              v125 = v95;
              if ((*(_DWORD *)(v124 + 32 * v95) & 0x10000FF) == 0x1000000)
              {
                v126 = *(_DWORD *)(v124 + 32 * v95 + 4);
                if (v123 >= HIDWORD(v336))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v335, (uint64_t)v337, v123 + 1, 4);
                  v123 = v336;
                }
                *((_DWORD *)v335 + v123) = v126;
                v123 = v336 + 1;
                LODWORD(v336) = v336 + 1;
              }
              v95 = v125 + 1;
            }
            while (v96 != v125 + 1);
          }
          v97 = *(unsigned int **)(v79 + 32);
          if ((v306 & 0x80000000) == 0)
          {
            if (v97[1] == v303)
              goto LABEL_324;
            *v97 |= 0x4000000u;
            memset(&v309[1], 0, 24);
            LODWORD(v309[0]) = 50331648;
            HIDWORD(v309[0]) = v303;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v79, *(llvm::MachineFunction **)(*(_QWORD *)(v79 + 24) + 32), (const llvm::MachineOperand *)v309);
            v98 = *(_WORD *)(v79 + 44);
            v99 = v79;
            if ((v98 & 4) != 0)
            {
              v99 = v79;
              do
                v99 = *(_QWORD *)v99 & 0xFFFFFFFFFFFFFFF8;
              while ((*(_WORD *)(v99 + 44) & 4) != 0);
            }
            v100 = *(_QWORD *)(*(_QWORD *)(v307 + 288) + 288);
            v101 = v79;
            if ((v98 & 8) != 0)
            {
              v101 = v79;
              do
                v101 = *(_QWORD *)(v101 + 8);
              while ((*(_WORD *)(v101 + 44) & 8) != 0);
            }
            v102 = *(_QWORD *)(v101 + 8);
            if (v99 != v102)
            {
              while (1)
              {
                v103 = **(unsigned __int16 **)(v99 + 16);
                v26 = v103 > 0x17;
                v104 = (1 << v103) & 0x83E000;
                if (v26 || v104 == 0)
                  break;
                v99 = *(_QWORD *)(v99 + 8);
                if (v99 == v102)
                {
                  v99 = *(_QWORD *)(v101 + 8);
                  break;
                }
              }
            }
            v106 = *(_QWORD *)(v100 + 368);
            v107 = *(unsigned int *)(v100 + 384);
            if ((_DWORD)v107)
            {
              LODWORD(v108) = ((v99 >> 4) ^ (v99 >> 9)) & (v107 - 1);
              v109 = (uint64_t *)(v106 + 16 * v108);
              v110 = *v109;
              if (v99 == *v109)
                goto LABEL_236;
              v111 = 1;
              while (v110 != -4096)
              {
                v112 = v108 + v111++;
                v108 = v112 & (v107 - 1);
                v110 = *(_QWORD *)(v106 + 16 * v108);
                if (v99 == v110)
                {
                  v109 = (uint64_t *)(v106 + 16 * v108);
                  goto LABEL_236;
                }
              }
            }
            v109 = (uint64_t *)(v106 + 16 * v107);
LABEL_236:
            v175 = *(_DWORD *)(*(_QWORD *)(v79 + 32) + 4);
            v176 = *(_QWORD *)(v307 + 272);
            if (v176)
              v177 = (_QWORD *)(v176 + 8);
            else
              v177 = 0;
            v178 = *(unsigned int *)(*v177 + 24 * v175 + 16);
            v179 = (_WORD *)(v177[6] + ((v178 >> 3) & 0x1FFFFFFE));
            v181 = *v179;
            v180 = v179 + 1;
            v182 = v181 + (v178 & 0xF) * v175;
            v183 = v109[1] & 0xFFFFFFFFFFFFFFF8 | 4;
            do
            {
              v184 = *(_QWORD *)(v307 + 288);
              v185 = *(_QWORD *)(v184 + 680);
              v186 = *(_QWORD *)(v185 + 8 * v182);
              if (v186)
              {
                v187 = v184 + 312;
                if (*(_QWORD *)(v186 + 96))
                {
                  v309[0] = *(uint64_t **)(v185 + 8 * v182);
                  sub_1C510A3C0((uint64_t *)v309, v183, v187, 0);
                }
                else
                {
                  v309[0] = *(uint64_t **)(v185 + 8 * v182);
                  sub_1C510A6B8(v309, v183, v187, 0);
                }
              }
              v188 = *v180++;
              v182 += v188;
            }
            while (v188);
            goto LABEL_324;
          }
          v127 = ((unint64_t)*v97 >> 8) & 0xFFF;
          if (v301)
          {
            v128 = *(_QWORD *)(v307 + 272);
            if ((_DWORD)v127)
              v129 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)v128 + 184))(v128, v82, v301, v127);
            else
              v129 = llvm::TargetRegisterInfo::getCommonSubClass(v128, v82, v301);
            v82 = v129;
          }
          v137 = *(_QWORD *)(v307 + 288);
          v138 = v306 & 0x7FFFFFFF;
          if (v138 >= *(unsigned int *)(v137 + 416)
            || (v304 = *(llvm::AAResults **)(*(_QWORD *)(v137 + 408) + 8 * v138)) == 0)
          {
            v227 = (llvm::LiveInterval *)sub_1C4851220(v137, v306);
            v228 = *(_QWORD *)(v137 + 304);
            v229 = *(_QWORD *)(v137 + 248);
            *(_QWORD *)v228 = v229;
            *(_QWORD *)(v228 + 8) = *(_QWORD *)(v229 + 40);
            *(_OWORD *)(v228 + 16) = *(_OWORD *)(v137 + 288);
            *(_QWORD *)(v228 + 32) = v137 + 312;
            llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v228);
            *(_DWORD *)(v228 + 184) = 0;
            v230 = *(_QWORD *)(v137 + 256);
            v10 = *(_BYTE *)(v230 + 16) == 0;
            v231 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v230 + 24)
                                                   + 16 * (*((_DWORD *)v227 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                      + 34);
            v233 = !v10 && v231 != 0;
            llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v137 + 304), v227, v233);
            v304 = v227;
            llvm::LiveIntervals::computeDeadValues(v137, (uint64_t)v227, 0);
          }
          v139 = *((_QWORD *)v304 + 13);
          for (j = (llvm::AAResults *)((char *)v304 + 104); v139; v139 = *(_QWORD *)(v139 + 104))
          {
            v140 = *(_QWORD *)(v139 + 112);
            if ((_DWORD)v16)
              v140 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v307 + 272) + 216))(*(_QWORD *)(v307 + 272), v16, v140);
            *(_QWORD *)(v139 + 112) = v140;
          }
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v307 + 264) + 24) + 16 * v138) = v82 & 0xFFFFFFFFFFFFFFFBLL;
          sub_1C5253958(v307, v306, v306, v16);
          **(_DWORD **)(v79 + 32) = **(_DWORD **)(v79 + 32) & 0xFFF000FF | ((v127 & 0xFFF) << 8);
          if ((_DWORD)v127)
          {
            v141 = *(_QWORD *)j;
            if (!*(_QWORD *)j)
              goto LABEL_324;
            v142 = *(_QWORD *)(v307 + 288);
            v143 = *(_WORD *)(v79 + 44);
            v144 = v79;
            if ((v143 & 4) != 0)
            {
              v144 = v79;
              do
                v144 = *(_QWORD *)v144 & 0xFFFFFFFFFFFFFFF8;
              while ((*(_WORD *)(v144 + 44) & 4) != 0);
            }
            v145 = *(_QWORD *)(v142 + 288);
            v146 = v79;
            if ((v143 & 8) != 0)
            {
              v146 = v79;
              do
                v146 = *(_QWORD *)(v146 + 8);
              while ((*(_WORD *)(v146 + 44) & 8) != 0);
            }
            v147 = *(_QWORD *)(v146 + 8);
            if (v144 != v147)
            {
              do
              {
                v148 = **(unsigned __int16 **)(v144 + 16);
                v26 = v148 > 0x17;
                v149 = (1 << v148) & 0x83E000;
                if (v26 || v149 == 0)
                  goto LABEL_213;
                v144 = *(_QWORD *)(v144 + 8);
              }
              while (v144 != v147);
              v144 = *(_QWORD *)(v146 + 8);
            }
LABEL_213:
            v151 = *(_QWORD *)(v145 + 368);
            v152 = *(unsigned int *)(v145 + 384);
            if ((_DWORD)v152)
            {
              LODWORD(v153) = ((v144 >> 4) ^ (v144 >> 9)) & (v152 - 1);
              v154 = (uint64_t *)(v151 + 16 * v153);
              v155 = *v154;
              if (v144 != *v154)
              {
                v156 = 1;
                do
                {
                  if (v155 == -4096)
                    goto LABEL_246;
                  v157 = v153 + v156++;
                  v153 = v157 & (v152 - 1);
                  v155 = *(_QWORD *)(v151 + 16 * v153);
                }
                while (v144 != v155);
                v154 = (uint64_t *)(v151 + 16 * v153);
              }
            }
            else
            {
LABEL_246:
              v154 = (uint64_t *)(v151 + 16 * v152);
            }
            v189 = 0;
            v190 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v307 + 272) + 232) + 8 * v127);
            v191 = v154[1] & 0xFFFFFFFFFFFFFFF8;
            v192 = 2;
            if ((*(_BYTE *)(*(_QWORD *)(v79 + 32) + 3) & 0x40) == 0)
              v192 = 4;
            v193 = v192 | v191;
            v194 = v142 + 312;
            while (1)
            {
              v195 = *(_DWORD *)(v141 + 8);
              if ((*(_QWORD *)(v141 + 112) & v190) != 0)
              {
                if (!v195)
                {
                  if (*(_QWORD *)(v141 + 96))
                  {
                    v309[0] = (uint64_t *)v141;
                    sub_1C510A3C0((uint64_t *)v309, v193, v194, 0);
                  }
                  else
                  {
                    v309[0] = (uint64_t *)v141;
                    sub_1C510A6B8(v309, v193, v194, 0);
                  }
                }
                goto LABEL_268;
              }
              v196 = *(_QWORD *)v141;
              if (v195)
              {
                v197 = *(_QWORD *)(v196 + 24 * v195 - 16);
                v198 = *(_DWORD *)(v191 + 24) | 2;
                v199 = (v197 >> 1) & 3 | *(_DWORD *)((v197 & 0xFFFFFFFFFFFFFFF8) + 24);
                v200 = *(_QWORD **)v141;
                v201 = *(unsigned int *)(v141 + 8);
                if (v198 < v199)
                {
                  do
                  {
                    v202 = v201 >> 1;
                    v203 = v200[3 * (v201 >> 1) + 1];
                    LODWORD(v203) = (v203 >> 1) & 3 | *(_DWORD *)((v203 & 0xFFFFFFFFFFFFFFF8) + 24);
                    v201 -= (v201 >> 1) + 1;
                    v204 = v198 >= v203;
                    if (v198 >= v203)
                      v205 = v202 + 1;
                    else
                      v205 = 0;
                    v200 += 3 * v205;
                    if (!v204)
                      v201 = v202;
                  }
                  while (v201);
                  goto LABEL_265;
                }
              }
              else
              {
                v195 = 0;
              }
              v200 = (_QWORD *)(v196 + 24 * v195);
LABEL_265:
              if (v200 != (_QWORD *)(v196 + 24 * v195)
                && ((*v200 >> 1) & 3 | *(_DWORD *)((*v200 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v191 + 24) | 2u)
                && (v206 = v200[2]) != 0)
              {
                llvm::LiveRange::removeValNo((uint64_t *)v141, v206);
                v141 = *(_QWORD *)(v141 + 104);
                v189 = 1;
                if (!v141)
                  goto LABEL_274;
              }
              else
              {
LABEL_268:
                v141 = *(_QWORD *)(v141 + 104);
                if (!v141)
                {
                  if ((v189 & 1) == 0)
                    goto LABEL_324;
LABEL_274:
                  v207 = *(_QWORD *)j;
                  if (!*(_QWORD *)j)
                    goto LABEL_324;
                  while (1)
                  {
                    v236 = v207;
                    if (!*(_DWORD *)(v207 + 8))
                      break;
LABEL_323:
                    j = (llvm::AAResults *)(v207 + 104);
                    v207 = *(_QWORD *)(v207 + 104);
                    if (!v207)
                      goto LABEL_324;
                  }
                  while (1)
                  {
                    v234 = *(_QWORD *)(v236 + 96);
                    v207 = *(_QWORD *)(v236 + 104);
                    *(_QWORD *)(v236 + 96) = 0;
                    if (v234)
                    {
                      sub_1C47655E8(v234, *(_QWORD **)(v234 + 8));
                      MEMORY[0x1CAA32FC0](v234, 0x1020C4062D53EE8);
                    }
                    v235 = *(void **)(v236 + 64);
                    if (v235 != (void *)(v236 + 80))
                      free(v235);
                    if (*(_QWORD *)v236 == v236 + 16)
                    {
                      if (!v207)
                      {
LABEL_432:
                        *(_QWORD *)j = 0;
                        goto LABEL_324;
                      }
                    }
                    else
                    {
                      free(*(void **)v236);
                      if (!v207)
                        goto LABEL_432;
                    }
                    v236 = v207;
                    if (*(_DWORD *)(v207 + 8))
                    {
                      *(_QWORD *)j = v207;
                      goto LABEL_323;
                    }
                  }
                }
              }
            }
          }
          **(_DWORD **)(v79 + 32) &= ~0x10000000u;
          v158 = *(_QWORD *)j;
          if (!*(_QWORD *)j)
            goto LABEL_324;
          v159 = *(_QWORD *)(v307 + 288);
          v160 = *(_WORD *)(v79 + 44);
          v161 = v79;
          if ((v160 & 4) != 0)
          {
            v161 = v79;
            do
              v161 = *(_QWORD *)v161 & 0xFFFFFFFFFFFFFFF8;
            while ((*(_WORD *)(v161 + 44) & 4) != 0);
          }
          v162 = *(_QWORD *)(v159 + 288);
          v163 = v79;
          if ((v160 & 8) != 0)
          {
            v163 = v79;
            do
              v163 = *(_QWORD *)(v163 + 8);
            while ((*(_WORD *)(v163 + 44) & 8) != 0);
          }
          v164 = *(_QWORD *)(v163 + 8);
          if (v161 != v164)
          {
            do
            {
              v165 = **(unsigned __int16 **)(v161 + 16);
              v26 = v165 > 0x17;
              v166 = (1 << v165) & 0x83E000;
              if (v26 || v166 == 0)
                goto LABEL_229;
              v161 = *(_QWORD *)(v161 + 8);
            }
            while (v161 != v164);
            v161 = *(_QWORD *)(v163 + 8);
          }
LABEL_229:
          v168 = *(_QWORD *)(v162 + 368);
          v169 = *(unsigned int *)(v162 + 384);
          if ((_DWORD)v169)
          {
            LODWORD(v170) = ((v161 >> 4) ^ (v161 >> 9)) & (v169 - 1);
            v171 = (uint64_t *)(v168 + 16 * v170);
            v172 = *v171;
            if (v161 != *v171)
            {
              v173 = 1;
              do
              {
                if (v172 == -4096)
                  goto LABEL_276;
                v174 = v170 + v173++;
                v170 = v174 & (v169 - 1);
                v172 = *(_QWORD *)(v168 + 16 * v170);
              }
              while (v161 != v172);
              v171 = (uint64_t *)(v168 + 16 * v170);
            }
          }
          else
          {
LABEL_276:
            v171 = (uint64_t *)(v168 + 16 * v169);
          }
          v208 = v171[1] & 0xFFFFFFFFFFFFFFF8;
          v209 = 2;
          if ((*(_BYTE *)(*(_QWORD *)(v79 + 32) + 3) & 0x40) == 0)
            v209 = 4;
          v210 = v209 | v208;
          v211 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v307 + 264) + 24) + 16 * v138) & 0xFFFFFFFFFFFFFFF8)
                           + 24);
          v212 = v159 + 312;
          v213 = v209 >> 1;
          while (1)
          {
            v214 = *(_DWORD *)(v158 + 8);
            v215 = *(_QWORD *)v158;
            if (v214)
            {
              v216 = *(_QWORD *)(v215 + 24 * v214 - 16);
              v217 = *(_DWORD *)(v208 + 24) | v213;
              v218 = (v216 >> 1) & 3 | *(_DWORD *)((v216 & 0xFFFFFFFFFFFFFFF8) + 24);
              v219 = *(_QWORD **)v158;
              v220 = *(unsigned int *)(v158 + 8);
              if (v217 < v218)
              {
                do
                {
                  v221 = v220 >> 1;
                  v222 = v219[3 * (v220 >> 1) + 1];
                  LODWORD(v222) = (v222 >> 1) & 3 | *(_DWORD *)((v222 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v220 -= (v220 >> 1) + 1;
                  v223 = v217 >= v222;
                  if (v217 >= v222)
                    v224 = v221 + 1;
                  else
                    v224 = 0;
                  v219 += 3 * v224;
                  if (!v223)
                    v220 = v221;
                }
                while (v220);
                goto LABEL_291;
              }
            }
            else
            {
              v214 = 0;
            }
            v219 = (_QWORD *)(v215 + 24 * v214);
LABEL_291:
            if (v219 == (_QWORD *)(v215 + 24 * v214)
              || ((*v219 >> 1) & 3 | *(_DWORD *)((*v219 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v208 + 24) | v213))
            {
              if (*(_QWORD *)(v158 + 96))
              {
                v309[0] = (uint64_t *)v158;
                sub_1C510A3C0((uint64_t *)v309, v210, v212, 0);
              }
              else
              {
                v309[0] = (uint64_t *)v158;
                sub_1C510A6B8(v309, v210, v212, 0);
              }
            }
            v225 = v158 + 104;
            v158 = *(_QWORD *)(v158 + 104);
            v211 &= ~*(_QWORD *)(v225 + 8);
            if (!v158)
            {
              if (v211)
              {
                v226 = (uint64_t *)sub_1C484358C(v212, 120, 3);
                *v226 = (uint64_t)(v226 + 2);
                v226[1] = 0x200000000;
                v226[8] = (uint64_t)(v226 + 10);
                v226[9] = 0x200000000;
                v226[12] = 0;
                v226[13] = 0;
                v226[14] = v211;
                v226[13] = *(_QWORD *)j;
                *(_QWORD *)j = v226;
                if (v226[12])
                {
                  v309[0] = v226;
                  sub_1C510A3C0((uint64_t *)v309, v210, v212, 0);
                }
                else
                {
                  v309[0] = v226;
                  sub_1C510A6B8(v309, v210, v212, 0);
                }
              }
LABEL_324:
              v237 = *(_DWORD **)(v79 + 32);
              if ((*v237 & 0xFFF00) != 0)
                *v237 |= 0x10000000u;
              if ((_DWORD)v315)
              {
                v238 = v314;
                v239 = 32 * v315;
                do
                {
                  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v79, *(llvm::MachineFunction **)(*(_QWORD *)(v79 + 24) + 32), v238);
                  v238 = (llvm::MachineOperand *)((char *)v238 + 32);
                  v239 -= 32;
                }
                while (v239);
              }
              v240 = *(_WORD *)(v79 + 44);
              v241 = v79;
              if ((v240 & 4) != 0)
              {
                v241 = v79;
                do
                  v241 = *(_QWORD *)v241 & 0xFFFFFFFFFFFFFFF8;
                while ((*(_WORD *)(v241 + 44) & 4) != 0);
              }
              v242 = *(_QWORD *)(*(_QWORD *)(v307 + 288) + 288);
              v243 = v79;
              if ((v240 & 8) != 0)
              {
                v243 = v79;
                do
                  v243 = *(_QWORD *)(v243 + 8);
                while ((*(_WORD *)(v243 + 44) & 8) != 0);
              }
              v244 = *(_QWORD *)(v243 + 8);
              if (v241 != v244)
              {
                while (1)
                {
                  v245 = **(unsigned __int16 **)(v241 + 16);
                  v26 = v245 > 0x17;
                  v246 = (1 << v245) & 0x83E000;
                  if (v26 || v246 == 0)
                    break;
                  v241 = *(_QWORD *)(v241 + 8);
                  if (v241 == v244)
                  {
                    v241 = *(_QWORD *)(v243 + 8);
                    break;
                  }
                }
              }
              v248 = *(_QWORD *)(v242 + 368);
              v249 = *(unsigned int *)(v242 + 384);
              if ((_DWORD)v249)
              {
                LODWORD(v250) = ((v241 >> 4) ^ (v241 >> 9)) & (v249 - 1);
                v251 = (uint64_t *)(v248 + 16 * v250);
                v252 = *v251;
                if (v241 != *v251)
                {
                  v253 = 1;
                  while (v252 != -4096)
                  {
                    v254 = v250 + v253++;
                    v250 = v254 & (v249 - 1);
                    v252 = *(_QWORD *)(v248 + 16 * v250);
                    if (v241 == v252)
                    {
                      v251 = (uint64_t *)(v248 + 16 * v250);
                      goto LABEL_345;
                    }
                  }
                  goto LABEL_344;
                }
              }
              else
              {
LABEL_344:
                v251 = (uint64_t *)(v248 + 16 * v249);
              }
LABEL_345:
              v255 = v336;
              v256 = (uint64_t *)v307;
              if ((_DWORD)v336)
              {
                v257 = 0;
                v258 = v251[1] & 0xFFFFFFFFFFFFFFF8 | 4;
                do
                {
                  v259 = *((_DWORD *)v335 + v257);
                  v260 = v256[34];
                  if (v260)
                    v261 = (_QWORD *)(v260 + 8);
                  else
                    v261 = 0;
                  v262 = *(unsigned int *)(*v261 + 24 * v259 + 16);
                  v263 = (_WORD *)(v261[6] + ((v262 >> 3) & 0x1FFFFFFE));
                  v265 = *v263;
                  v264 = v263 + 1;
                  v266 = v265 + (v262 & 0xF) * v259;
                  do
                  {
                    v267 = v256[36];
                    v268 = *(_QWORD *)(v267 + 680);
                    v269 = *(_QWORD *)(v268 + 8 * v266);
                    if (v269)
                    {
                      v270 = v267 + 312;
                      if (*(_QWORD *)(v269 + 96))
                      {
                        v309[0] = *(uint64_t **)(v268 + 8 * v266);
                        sub_1C510A3C0((uint64_t *)v309, v258, v270, 0);
                      }
                      else
                      {
                        v309[0] = *(uint64_t **)(v268 + 8 * v266);
                        sub_1C510A6B8(v309, v258, v270, 0);
                      }
                      v256 = (uint64_t *)v307;
                    }
                    v271 = *v264++;
                    v266 += v271;
                  }
                  while (v271);
                  ++v257;
                }
                while (v257 != v255);
              }
              v272 = v313;
              if (sub_1C4A91738(v256[33], v313))
              {
                v273 = *(_QWORD *)(v307 + 264);
                v274 = (uint64_t *)((v272 & 0x80000000) != 0
                                 ? *(_QWORD *)(v273 + 24) + 16 * (v272 & 0x7FFFFFFF) + 8
                                 : *(_QWORD *)(v273 + 272) + 8 * v272);
                v275 = *v274;
                if (*v274)
                {
                  while ((*(_BYTE *)(v275 + 3) & 1) != 0)
                  {
                    v275 = *(_QWORD *)(v275 + 24);
                    if (!v275)
                      goto LABEL_377;
                  }
                  do
                  {
                    v276 = v275;
                    do
                      v275 = *(_QWORD *)(v275 + 24);
                    while (v275 && (*(_BYTE *)(v275 + 3) & 1) != 0);
                    v277 = *(_QWORD *)(v276 + 8);
                    if (**(unsigned __int16 **)(v277 + 16) - 13 <= 4)
                    {
                      if ((v306 - 1) > 0x3FFFFFFE)
                        llvm::MachineOperand::setReg(v276, v306);
                      else
                        llvm::MachineOperand::substPhysReg((unsigned int *)v276, v306, *(_QWORD *)(v307 + 272));
                      sub_1C48532D0(v76, *(unint64_t **)(v79 + 8), *(unint64_t **)(v277 + 24), (unint64_t *)v277);
                    }
                  }
                  while (v275);
                  LODWORD(v272) = v313;
                }
              }
LABEL_377:
              v278 = *(_QWORD *)(v307 + 1048);
              v279 = *(_DWORD *)(v307 + 1064);
              if (v279)
              {
                v280 = (v279 - 1) & (37 * v272);
                v281 = *(_DWORD *)(v278 + 4 * v280);
                if ((_DWORD)v272 == v281)
                  goto LABEL_379;
                v282 = 1;
                while (v281 != -1)
                {
                  v283 = v280 + v282++;
                  v280 = v283 & (v279 - 1);
                  v281 = *(_DWORD *)(v278 + 4 * v280);
                  if ((_DWORD)v272 == v281)
                    goto LABEL_379;
                }
              }
              v284 = *(_QWORD *)(v307 + 264);
              if ((v272 & 0x80000000) != 0)
                v285 = (uint64_t *)(*(_QWORD *)(v284 + 24) + 16 * (v272 & 0x7FFFFFFF) + 8);
              else
                v285 = (uint64_t *)(*(_QWORD *)(v284 + 272) + 8 * v272);
              v286 = *v285;
              if (v286)
              {
                if ((*(_BYTE *)(v286 + 3) & 0x81) != 0)
                {
                  do
                  {
                    v286 = *(_QWORD *)(v286 + 24);
                    if (!v286)
                      goto LABEL_406;
                  }
                  while ((*(_DWORD *)v286 & 0x81000000) != 0);
                }
                v287 = 0;
LABEL_398:
                v288 = **(unsigned __int16 **)(*(_QWORD *)(v286 + 8) + 16);
                if (v288 == 19 || v288 == 11)
                  ++v287;
                while (1)
                {
                  v286 = *(_QWORD *)(v286 + 24);
                  if (!v286)
                    break;
                  if ((*(_DWORD *)v286 & 0x81000000) == 0)
                    goto LABEL_398;
                }
              }
              else
              {
LABEL_406:
                v287 = 0;
              }
              if (v287 >= dword_1ED7FF188)
              {
                if (v279)
                {
                  v290 = v279 - 1;
                  v291 = v290 & (37 * v272);
                  v292 = (_DWORD *)(v278 + 4 * v291);
                  v293 = *v292;
                  if ((_DWORD)v272 == *v292)
                    goto LABEL_379;
                  v294 = 0;
                  v295 = 1;
                  while (v293 != -1)
                  {
                    if (v294)
                      v296 = 0;
                    else
                      v296 = v293 == -2;
                    if (v296)
                      v294 = v292;
                    v297 = v291 + v295++;
                    v291 = v297 & v290;
                    v292 = (_DWORD *)(v278 + 4 * v291);
                    v293 = *v292;
                    if ((_DWORD)v272 == *v292)
                      goto LABEL_379;
                  }
                  if (v294)
                    v298 = v294;
                  else
                    v298 = v292;
                }
                else
                {
                  v298 = 0;
                }
                v299 = sub_1C4978C80(v307 + 1048, (uint64_t)&v313, (int *)&v313, v298);
                *v299 = v313;
              }
              else
              {
                sub_1C5251D74(v307, v19, v307 + 920);
                if (*(_DWORD *)(v307 + 928))
                  sub_1C5251E14(v307);
              }
LABEL_379:
              if (v335 != v337)
                free(v335);
              if (v314 != (llvm::MachineOperand *)&v316)
                free(v314);
              if (v311)
                llvm::MetadataTracking::untrack((uint64_t)&v311, v311);
              return 1;
            }
          }
        }
        return 0;
      }
      v120 = (**(_DWORD **)(v55 + 32) >> 8) & 0xFFF;
      if (*(_DWORD *)(a2 + 20))
      {
        v121 = *(_QWORD **)(v307 + 272);
        if (!v120)
        {
          v120 = *(_DWORD *)(a2 + 20);
          goto LABEL_183;
        }
        v120 = (*(uint64_t (**)(_QWORD *))(*v121 + 208))(v121);
      }
      v122 = v306;
      if (!v120)
      {
LABEL_189:
        if (v122 - 1 > 0x3FFFFFFE)
          return 0;
        v136 = (unint64_t)v122 >> 3;
        if (v136 >= *(unsigned __int16 *)(*(_QWORD *)v301 + 22)
          || ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v301 + 8) + v136) >> (v122 & 7)) & 1) == 0)
        {
          return 0;
        }
        goto LABEL_89;
      }
      v121 = *(_QWORD **)(v307 + 272);
LABEL_183:
      v130 = v121[1];
      v131 = v121[7];
      v132 = *(unsigned int *)(v130 + 24 * v306 + 4);
      if (!*(_WORD *)(v131 + 2 * v132))
        return 0;
      LOWORD(v122) = *(_WORD *)(v131 + 2 * v132) + v306;
      v133 = (unsigned __int16 *)(v121[11] + 2 * *(unsigned int *)(v130 + 24 * v306 + 12));
      v134 = (unsigned __int16 *)(v131 + 2 * v132 + 2);
      while (v120 != *v133)
      {
        result = 0;
        v135 = *v134++;
        LOWORD(v122) = v135 + v122;
        ++v133;
        if (!v135)
          return result;
      }
      v122 = (unsigned __int16)v122;
      goto LABEL_189;
    }
  }
  return result;
}

void sub_1C5253958(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v5;
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  __int16 v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  BOOL v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  BOOL v41;
  _BOOL4 v42;
  __int16 v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  int v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  BOOL v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  int v94;
  int v95;
  _QWORD *v96;
  __int16 v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unsigned int v101;
  int v102;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  int v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v117;
  _BOOL4 v118;
  int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  unsigned int v128;
  _BYTE *v129;
  _BYTE *v130;
  uint64_t v131;
  int v132;
  _BYTE v133[64];
  unsigned int *v134;
  uint64_t v135;
  _QWORD v136[6];

  v5 = a3;
  v7 = (_QWORD *)a1;
  v136[4] = *MEMORY[0x1E0C80C00];
  v8 = a3 - 1;
  v122 = a3 - 1;
  if (a3 - 1 < 0x3FFFFFFF)
  {
    v125 = 0;
    goto LABEL_40;
  }
  v9 = *(_QWORD *)(a1 + 288);
  v10 = a3;
  v11 = a3 & 0x7FFFFFFF;
  if (v11 >= *(unsigned int *)(v9 + 416) || (v12 = *(_QWORD *)(*(_QWORD *)(v9 + 408) + 8 * v11)) == 0)
  {
    v12 = sub_1C4851220(v9, a3);
    v112 = *(_QWORD *)(v9 + 304);
    v113 = *(_QWORD *)(v9 + 248);
    *(_QWORD *)v112 = v113;
    *(_QWORD *)(v112 + 8) = *(_QWORD *)(v113 + 40);
    *(_OWORD *)(v112 + 16) = *(_OWORD *)(v9 + 288);
    *(_QWORD *)(v112 + 32) = v9 + 312;
    llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v112);
    *(_DWORD *)(v112 + 184) = 0;
    v114 = *(_QWORD *)(v9 + 256);
    v13 = *(_BYTE *)(v114 + 16) == 0;
    v115 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v114 + 24) + 16 * (*(_DWORD *)(v12 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                              + 34);
    v117 = !v13 && v115 != 0;
    llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v9 + 304), (llvm::LiveInterval *)v12, v117);
    llvm::LiveIntervals::computeDeadValues(v9, v12, 0);
  }
  v125 = v12;
  if (*(_QWORD *)(v12 + 104))
    v13 = v5 == a2;
  else
    v13 = 1;
  if (!v13)
  {
    v14 = *(_QWORD *)(a1 + 264);
    v15 = (uint64_t *)((v5 & 0x80000000) != 0 ? *(_QWORD *)(v14 + 24) + 16 * v11 + 8 : *(_QWORD *)(v14 + 272) + 8 * v10);
    v16 = *v15;
    if (*v15)
    {
      while (1)
      {
        if ((*(_DWORD *)v16 & 0x10000000) != 0)
          goto LABEL_33;
        v17 = (*(_DWORD *)v16 >> 8) & 0xFFF;
        if (!v17)
          goto LABEL_33;
        v18 = *(_QWORD *)(v16 + 8);
        if (**(unsigned __int16 **)(v18 + 16) - 13 < 5)
          goto LABEL_33;
        v19 = *(_WORD *)(v18 + 44);
        v20 = *(_QWORD *)(v16 + 8);
        if ((v19 & 4) != 0)
        {
          do
            v20 = *(_QWORD *)v20 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v20 + 44) & 4) != 0);
        }
        if ((v19 & 8) != 0)
        {
          do
            v18 = *(_QWORD *)(v18 + 8);
          while ((*(_WORD *)(v18 + 44) & 8) != 0);
        }
        v21 = *(_QWORD *)(v18 + 8);
        if (v20 != v21)
        {
          while (1)
          {
            v22 = **(unsigned __int16 **)(v20 + 16);
            v23 = v22 > 0x17;
            v24 = (1 << v22) & 0x83E000;
            if (v23 || v24 == 0)
              break;
            v20 = *(_QWORD *)(v20 + 8);
            if (v20 == v21)
            {
              v20 = v21;
              break;
            }
          }
        }
        v26 = *(_QWORD *)(*(_QWORD *)(a1 + 288) + 288);
        v27 = *(_QWORD *)(v26 + 368);
        v28 = *(unsigned int *)(v26 + 384);
        if (!(_DWORD)v28)
          goto LABEL_31;
        LODWORD(v29) = ((v20 >> 4) ^ (v20 >> 9)) & (v28 - 1);
        v30 = (uint64_t *)(v27 + 16 * v29);
        v31 = *v30;
        if (v20 != *v30)
          break;
LABEL_32:
        sub_1C525751C(a1, v12, v30[1] & 0xFFFFFFFFFFFFFFF8 | 2, (int *)v16, v17);
LABEL_33:
        v16 = *(_QWORD *)(v16 + 24);
        if (!v16)
          goto LABEL_39;
      }
      v32 = 1;
      while (v31 != -4096)
      {
        v33 = v29 + v32++;
        v29 = v33 & (v28 - 1);
        v31 = *(_QWORD *)(v27 + 16 * v29);
        if (v20 == v31)
        {
          v30 = (uint64_t *)(v27 + 16 * v29);
          goto LABEL_32;
        }
      }
LABEL_31:
      v30 = (uint64_t *)(v27 + 16 * v28);
      goto LABEL_32;
    }
  }
LABEL_39:
  v7 = (_QWORD *)a1;
  v8 = v122;
LABEL_40:
  v129 = v133;
  v130 = v133;
  v131 = 8;
  v132 = 0;
  v34 = v7[33];
  v35 = a2;
  if ((a2 & 0x80000000) != 0)
    v36 = (uint64_t *)(*(_QWORD *)(v34 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  else
    v36 = (uint64_t *)(*(_QWORD *)(v34 + 272) + 8 * a2);
  v37 = *v36;
  if (*v36)
  {
    v118 = v8 > 0x3FFFFFFE;
    v128 = v5;
    v127 = 16 * (v5 & 0x7FFFFFFF);
    v121 = v5;
    v119 = a2;
    v120 = a2;
    while (1)
    {
      v38 = *(_QWORD *)(v37 + 8);
      do
        v37 = *(_QWORD *)(v37 + 24);
      while (v37 && *(_QWORD *)(v37 + 8) == v38);
      if (a2 == v5)
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v129, v38);
        if (!v39)
          goto LABEL_159;
      }
      v134 = (unsigned int *)v136;
      v135 = 0x800000000;
      v40 = llvm::MachineInstr::readsWritesVirtualRegister(v38, v35, (uint64_t)&v134);
      if (v40)
        v41 = 1;
      else
        v41 = (_DWORD)a4 == 0;
      v42 = v118;
      if (v41)
        v42 = 0;
      if (!v42)
        goto LABEL_87;
      if (**(unsigned __int16 **)(v38 + 16) - 13 < 5)
        goto LABEL_57;
      v43 = *(_WORD *)(v38 + 44);
      v44 = v38;
      if ((v43 & 4) != 0)
      {
        do
          v44 = *(_QWORD *)v44 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v44 + 44) & 4) != 0);
      }
      v45 = v38;
      if ((v43 & 8) != 0)
      {
        do
          v45 = *(_QWORD *)(v45 + 8);
        while ((*(_WORD *)(v45 + 44) & 8) != 0);
      }
      v46 = *(_QWORD *)(v45 + 8);
      if (v44 != v46)
      {
        do
        {
          v47 = **(unsigned __int16 **)(v44 + 16);
          v23 = v47 > 0x17;
          v48 = (1 << v47) & 0x83E000;
          if (v23 || v48 == 0)
            goto LABEL_67;
          v44 = *(_QWORD *)(v44 + 8);
        }
        while (v44 != v46);
        v44 = v46;
      }
LABEL_67:
      v50 = *(_QWORD *)(v7[36] + 288);
      v51 = *(_QWORD *)(v50 + 368);
      v52 = *(unsigned int *)(v50 + 384);
      if ((_DWORD)v52)
      {
        LODWORD(v53) = ((v44 >> 4) ^ (v44 >> 9)) & (v52 - 1);
        v54 = (uint64_t *)(v51 + 16 * v53);
        v55 = *v54;
        if (v44 != *v54)
        {
          v56 = 1;
          do
          {
            if (v55 == -4096)
              goto LABEL_73;
            v57 = v53 + v56++;
            v53 = v57 & (v52 - 1);
            v55 = *(_QWORD *)(v51 + 16 * v53);
          }
          while (v44 != v55);
          v54 = (uint64_t *)(v51 + 16 * v53);
        }
      }
      else
      {
LABEL_73:
        v54 = (uint64_t *)(v51 + 16 * v52);
      }
      v58 = v54[1];
      v59 = *(_DWORD *)(v125 + 8);
      v60 = *(_QWORD **)v125;
      if (!v59)
        break;
      v61 = v60[3 * v59 - 2];
      v62 = *(_DWORD *)((v58 & 0xFFFFFFFFFFFFFFF8) + 24) | (v58 >> 1) & 3;
      v63 = (v61 >> 1) & 3 | *(_DWORD *)((v61 & 0xFFFFFFFFFFFFFFF8) + 24);
      v64 = *(_QWORD **)v125;
      v65 = *(unsigned int *)(v125 + 8);
      if (v62 >= v63)
        goto LABEL_84;
      do
      {
        v66 = v65 >> 1;
        v67 = v64[3 * (v65 >> 1) + 1];
        LODWORD(v67) = (v67 >> 1) & 3 | *(_DWORD *)((v67 & 0xFFFFFFFFFFFFFFF8) + 24);
        v65 -= (v65 >> 1) + 1;
        v68 = v62 >= v67;
        if (v62 >= v67)
          v69 = v66 + 1;
        else
          v69 = 0;
        v64 += 3 * v69;
        if (!v68)
          v65 = v66;
      }
      while (v65);
LABEL_85:
      if (v64 != &v60[3 * v59])
      {
        v40 = ((*v64 >> 1) & 3 | *(_DWORD *)((*v64 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v58 & 0xFFFFFFFFFFFFFFF8) + 24) | (v58 >> 1) & 3);
        goto LABEL_87;
      }
LABEL_57:
      v40 = 0;
LABEL_87:
      v70 = v135;
      v71 = v125;
      if (!(_DWORD)v135)
        goto LABEL_156;
      v72 = 0;
      v126 = (v40 == 0) << 28;
      do
      {
        v73 = (int *)(*(_QWORD *)(v38 + 32) + 32 * v134[v72]);
        v74 = *v73;
        if ((_DWORD)a4)
        {
          if ((v74 & 0x1000000) != 0)
          {
            v74 = v74 & 0xEFFFFFFF | v126;
            *v73 = v74;
          }
          if (v8 < 0x3FFFFFFF || (v74 & 0x1000000) != 0)
            goto LABEL_140;
          v75 = a4;
          if (((v74 >> 8) & 0xFFF) != 0)
          {
            v75 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v7[34] + 208))(v7[34], a4);
            if (!v75)
              goto LABEL_142;
          }
        }
        else
        {
          if (v8 < 0x3FFFFFFF || (v74 & 0x1000000) != 0)
            goto LABEL_140;
          v75 = (v74 >> 8) & 0xFFF;
          if (!v75)
            goto LABEL_142;
        }
        v76 = v7[33];
        v77 = *(_QWORD *)(v76 + 24);
        if (*(_BYTE *)(v76 + 16))
          v78 = *(_BYTE *)((*(_QWORD *)(v77 + v127) & 0xFFFFFFFFFFFFFFF8) + 34) == 0;
        else
          v78 = 1;
        if (v78)
          goto LABEL_142;
        v79 = v7[36];
        if (!*(_QWORD *)(v71 + 104))
        {
          v80 = v79 + 312;
          v81 = *(_QWORD *)((*(_QWORD *)(v77 + 16 * (*(_DWORD *)(v71 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) + 24);
          v82 = *(_QWORD *)(*(_QWORD *)(v7[34] + 232) + 8 * a4);
          v124 = v81 & ~v82;
          v83 = (_QWORD *)sub_1C484358C(v79 + 312, 120, 3);
          *v83 = v83 + 2;
          v83[1] = 0x200000000;
          v83[8] = v83 + 10;
          v83[9] = 0x200000000;
          v83[12] = 0;
          sub_1C50E31B0((uint64_t)v83, v125, v80);
          v83[14] = v82;
          v71 = v125;
          v83[13] = *(_QWORD *)(v125 + 104);
          *(_QWORD *)(v125 + 104) = v83;
          v7 = (_QWORD *)a1;
          v84 = v80;
          v8 = v122;
          v85 = (_QWORD *)sub_1C484358C(v84, 120, 3);
          *v85 = v85 + 2;
          v85[1] = 0x200000000;
          v85[8] = v85 + 10;
          v85[9] = 0x200000000;
          v85[12] = 0;
          v85[13] = 0;
          v85[14] = v124;
          v85[13] = *(_QWORD *)(v125 + 104);
          *(_QWORD *)(v125 + 104) = v85;
          v79 = *(_QWORD *)(a1 + 288);
        }
        v86 = *(_QWORD *)(v79 + 288);
        if (**(unsigned __int16 **)(v38 + 16) - 13 > 4)
        {
          v97 = *(_WORD *)(v38 + 44);
          v98 = v38;
          if ((v97 & 4) != 0)
          {
            do
              v98 = *(_QWORD *)v98 & 0xFFFFFFFFFFFFFFF8;
            while ((*(_WORD *)(v98 + 44) & 4) != 0);
          }
          v99 = v38;
          if ((v97 & 8) != 0)
          {
            do
              v99 = *(_QWORD *)(v99 + 8);
            while ((*(_WORD *)(v99 + 44) & 8) != 0);
          }
          v100 = *(_QWORD *)(v99 + 8);
          if (v98 != v100)
          {
            do
            {
              v101 = **(unsigned __int16 **)(v98 + 16);
              v23 = v101 > 0x17;
              v102 = (1 << v101) & 0x83E000;
              if (v23 || v102 == 0)
                goto LABEL_131;
              v98 = *(_QWORD *)(v98 + 8);
            }
            while (v98 != v100);
            v98 = v100;
          }
LABEL_131:
          v104 = *(_QWORD *)(v86 + 368);
          v105 = *(unsigned int *)(v86 + 384);
          if ((_DWORD)v105)
          {
            LODWORD(v106) = ((v98 >> 4) ^ (v98 >> 9)) & (v105 - 1);
            v107 = (uint64_t *)(v104 + 16 * v106);
            v108 = *v107;
            if (v98 != *v107)
            {
              v109 = 1;
              do
              {
                if (v108 == -4096)
                  goto LABEL_137;
                v110 = v106 + v109++;
                v106 = v110 & (v105 - 1);
                v108 = *(_QWORD *)(v104 + 16 * v106);
              }
              while (v98 != v108);
              v107 = (uint64_t *)(v104 + 16 * v106);
            }
          }
          else
          {
LABEL_137:
            v107 = (uint64_t *)(v104 + 16 * v105);
          }
          v96 = v107 + 1;
          goto LABEL_139;
        }
        v87 = *(_QWORD *)(v38 + 24);
        v88 = v38;
        while (v88 != *(_QWORD *)(v87 + 56))
        {
          v88 = *(_QWORD *)v88 & 0xFFFFFFFFFFFFFFF8;
          if (!v88 || (*(_BYTE *)v88 & 4) == 0)
          {
            while ((*(_WORD *)(v88 + 44) & 4) != 0)
              v88 = *(_QWORD *)v88 & 0xFFFFFFFFFFFFFFF8;
          }
          v89 = *(_QWORD *)(v86 + 368);
          v90 = *(unsigned int *)(v86 + 384);
          if (!(_DWORD)v90)
            goto LABEL_119;
          LODWORD(v91) = ((v88 >> 4) ^ (v88 >> 9)) & (v90 - 1);
          v92 = (uint64_t *)(v89 + 16 * v91);
          v93 = *v92;
          if (v88 != *v92)
          {
            v94 = 1;
            while (v93 != -4096)
            {
              v95 = v91 + v94++;
              v91 = v95 & (v90 - 1);
              v93 = *(_QWORD *)(v89 + 16 * v91);
              if (v88 == v93)
              {
                v92 = (uint64_t *)(v89 + 16 * v91);
                goto LABEL_120;
              }
            }
LABEL_119:
            v92 = (uint64_t *)(v89 + 16 * v90);
          }
LABEL_120:
          if (v92 != (uint64_t *)(v89 + 16 * v90))
          {
            v96 = v92 + 1;
            goto LABEL_139;
          }
        }
        v96 = (_QWORD *)(*(_QWORD *)(v86 + 392) + 16 * *(unsigned int *)(v87 + 24));
LABEL_139:
        sub_1C525751C((uint64_t)v7, v71, *v96 & 0xFFFFFFFFFFFFFFF8 | 2, v73, v75);
LABEL_140:
        if (v8 <= 0x3FFFFFFE)
        {
          llvm::MachineOperand::substPhysReg((unsigned int *)v73, v128, v7[34]);
          goto LABEL_147;
        }
LABEL_142:
        if (!(_DWORD)a4)
        {
          llvm::MachineOperand::setReg((uint64_t)v73, v128);
          goto LABEL_147;
        }
        if (((*v73 >> 8) & 0xFFF) == 0)
        {
          llvm::MachineOperand::setReg((uint64_t)v73, v128);
          LOWORD(v111) = a4;
          goto LABEL_146;
        }
        v111 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v7[34] + 208))(v7[34], a4);
        llvm::MachineOperand::setReg((uint64_t)v73, v128);
        if (v111)
LABEL_146:
          *v73 = *v73 & 0xFFF000FF | ((v111 & 0xFFF) << 8);
LABEL_147:
        ++v72;
      }
      while (v72 != v70);
LABEL_156:
      if (v134 != (unsigned int *)v136)
        free(v134);
      a2 = v120;
      v5 = v121;
      v35 = v119;
LABEL_159:
      if (!v37)
      {
        if (v130 != v129)
          free(v130);
        return;
      }
    }
    v59 = 0;
LABEL_84:
    v64 = &v60[3 * v59];
    goto LABEL_85;
  }
}

uint64_t sub_1C525433C(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11)
{
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  size_t v17;

  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 12) = a4;
  *(_QWORD *)(a1 + 16) = a5;
  *(_BYTE *)(a1 + 24) = a10;
  *(_BYTE *)(a1 + 25) = a11;
  *(_QWORD *)(a1 + 32) = a6;
  *(_QWORD *)(a1 + 40) = a7;
  v13 = *(_QWORD *)(a8 + 288);
  *(_QWORD *)(a1 + 48) = a8;
  *(_QWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 64) = a9;
  v14 = *(unsigned int *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = a1 + 88;
  *(_QWORD *)(a1 + 80) = 0x800000000;
  sub_1C4893E04((char *)(a1 + 72), v14, -1);
  *(_QWORD *)(a1 + 120) = a1 + 136;
  v15 = *(unsigned int *)(a2 + 72);
  *(_DWORD *)(a1 + 132) = 8;
  if (v15 >= 9)
  {
    *(_DWORD *)(a1 + 128) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 120, a1 + 136, v15, 48);
    v16 = *(void **)(a1 + 120);
    v17 = 48 * v15;
LABEL_5:
    bzero(v16, v17);
    goto LABEL_6;
  }
  if ((_DWORD)v15)
  {
    v16 = (void *)(a1 + 136);
    v17 = 48 * v15;
    goto LABEL_5;
  }
LABEL_6:
  *(_DWORD *)(a1 + 128) = v15;
  return a1;
}

uint64_t sub_1C525440C(uint64_t *a1, uint64_t **a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  _DWORD *v45;
  unsigned int v46;
  BOOL v47;
  _QWORD *v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t **v57;
  void *v58;
  uint64_t v59;
  _QWORD v60[18];

  v60[16] = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned int *)(*a1 + 72);
  if (!(_DWORD)v2)
    return 1;
  v4 = 0;
  v54 = *(unsigned int *)(*a1 + 72);
  v57 = a2;
  while (1)
  {
    v5 = a1[15];
    if (*(_DWORD *)(v5 + 48 * v4) == 4)
      break;
LABEL_85:
    if (++v4 == v2)
      return 1;
  }
  if (*((_BYTE *)a1 + 24))
    return 0;
  v55 = v5 + 48 * v4;
  v6 = *(_QWORD *)(*a1 + 64);
  v7 = *(_QWORD *)(v6 + 8 * v4);
  v8 = a2[15][6 * **(unsigned int **)(v55 + 32) + 2];
  v9 = *(_QWORD *)(v55 + 8);
  v58 = v60;
  v59 = 0x800000000;
  v10 = *(_QWORD *)(v6 + 8 * v4);
  v11 = sub_1C499C548(a1[7], *(_QWORD *)(v10 + 8));
  a2 = v57;
  v12 = *((unsigned int *)*v57 + 2);
  v13 = **v57;
  v56 = v4;
  if ((_DWORD)v12)
  {
    v14 = *(_QWORD *)(v13 + 24 * v12 - 16);
    v15 = (*(_QWORD *)(v10 + 8) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v10 + 8) & 0xFFFFFFFFFFFFFFF8) + 24);
    if (v15 < ((v14 >> 1) & 3 | *(_DWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 24)))
    {
      do
      {
        v16 = v12 >> 1;
        v17 = *(_QWORD *)(v13 + 24 * (v12 >> 1) + 8);
        LODWORD(v17) = (v17 >> 1) & 3 | *(_DWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 24);
        v12 -= (v12 >> 1) + 1;
        v18 = v15 >= v17;
        if (v15 >= v17)
          v19 = v16 + 1;
        else
          v19 = 0;
        v13 += 24 * v19;
        if (!v18)
          v12 = v16;
      }
      while (v12);
      goto LABEL_16;
    }
  }
  else
  {
    LODWORD(v12) = 0;
  }
  v13 += 24 * v12;
LABEL_16:
  v20 = v9 & v8;
  v21 = *(_QWORD *)(*(_QWORD *)(a1[7] + 392) + 16 * *(unsigned int *)(v11 + 24) + 8);
  v22 = v21 & 0xFFFFFFFFFFFFFFF8;
  v23 = (v21 >> 1) & 3;
  v24 = *(_DWORD *)((v21 & 0xFFFFFFFFFFFFFFF8) + 24);
  v25 = v13 + 24;
  v26 = v20;
  while (1)
  {
    v27 = *(_QWORD *)(v25 - 16);
    if (((v27 >> 1) & 3 | *(_DWORD *)((v27 & 0xFFFFFFFFFFFFFFF8) + 24)) >= (v24 | v23))
      break;
    if ((~(_BYTE)v27 & 6) != 0)
    {
      v28 = v59;
      if (v59 >= (unint64_t)HIDWORD(v59))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v58, (uint64_t)v60, v59 + 1, 16);
        a2 = v57;
        v28 = v59;
      }
      v29 = (char *)v58 + 16 * v28;
      *v29 = v27;
      v29[1] = v26;
      LODWORD(v59) = v59 + 1;
      if (v25 != **a2 + 24 * *((unsigned int *)*a2 + 2))
      {
        v24 = *(_DWORD *)(v22 + 24);
        if (((*(_QWORD *)v25 >> 1) & 3 | *(_DWORD *)((*(_QWORD *)v25 & 0xFFFFFFFFFFFFFFF8) + 24)) < (v24 | v23))
        {
          v30 = (uint64_t)&a2[15][6 * **(unsigned int **)(v25 + 16)];
          v26 &= ~*(_QWORD *)(v30 + 8);
          v25 += 24;
          if (*(_QWORD *)(v30 + 24) && v26 != 0)
            continue;
        }
      }
    }
    v32 = sub_1C499C548(a1[7], *(_QWORD *)(v7 + 8));
    v33 = *(_QWORD *)(v7 + 8);
    v34 = v33 & 6;
    if ((v33 & 6) == 0)
    {
      v35 = *(_QWORD *)(v32 + 56);
      a2 = v57;
      goto LABEL_40;
    }
    a2 = v57;
    if (v33 >= 8)
    {
      v35 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFFFF8) + 16);
      if (v34 == 2)
        goto LABEL_40;
      if (v35 && (*(_BYTE *)v35 & 4) != 0)
      {
LABEL_39:
        v35 = *(_QWORD *)(v35 + 8);
        goto LABEL_40;
      }
LABEL_38:
      while ((*(_WORD *)(v35 + 44) & 8) != 0)
        v35 = *(_QWORD *)(v35 + 8);
      goto LABEL_39;
    }
    v35 = 0;
    if (v34 != 2)
      goto LABEL_38;
LABEL_40:
    if (*(_QWORD *)v58 < 8uLL)
      v36 = 0;
    else
      v36 = *(_QWORD *)((*(_QWORD *)v58 & 0xFFFFFFFFFFFFFFF8) + 16);
    LODWORD(v37) = 0;
    while (2)
    {
      v38 = **(unsigned __int16 **)(v35 + 16);
      if ((v38 - 13) >= 5 && v38 != 23)
      {
        v41 = *(unsigned int *)(v35 + 40);
        if ((_DWORD)v41)
        {
          v43 = *((_DWORD *)a2 + 2);
          v42 = *((unsigned int *)a2 + 3);
          v44 = 32 * v41;
          v45 = (_DWORD *)(*(_QWORD *)(v35 + 32) + 4);
          do
          {
            v46 = *(v45 - 1);
            if ((v46 & 0x10000FF) == 0)
            {
              v47 = (v46 & 0x10FFF00) != 0x1000000 && (v46 & 0x30000000) == 0;
              if (v47 && *v45 == v43)
              {
                v49 = (_QWORD *)a1[8];
                v50 = (v46 >> 8) & 0xFFF;
                if ((_DWORD)v42)
                {
                  if (v50)
                  {
                    v51 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v49 + 208))(v49, v42);
                    a2 = v57;
                    v50 = v51;
                    v49 = (_QWORD *)a1[8];
                  }
                  else
                  {
                    v50 = v42;
                  }
                }
                if ((*(_QWORD *)(v49[29] + 8 * v50) & v20) != 0)
                  goto LABEL_80;
              }
            }
            v45 += 8;
            v44 -= 32;
          }
          while (v44);
        }
      }
      if (v35 == v36)
      {
        v37 = (v37 + 1);
        if ((_DWORD)v59 == (_DWORD)v37)
        {
          *(_DWORD *)v55 = 3;
          v52 = 1;
          goto LABEL_82;
        }
        v40 = *((_QWORD *)v58 + 2 * v37);
        if (v40 < 8)
          v36 = 0;
        else
          v36 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFFF8) + 16);
        v20 = *((_QWORD *)v58 + 2 * v37 + 1);
        if (v35)
          goto LABEL_57;
      }
      else
      {
        if (!v35)
          break;
LABEL_57:
        if ((*(_BYTE *)v35 & 4) != 0)
        {
LABEL_61:
          v35 = *(_QWORD *)(v35 + 8);
          continue;
        }
      }
      break;
    }
    while ((*(_WORD *)(v35 + 44) & 8) != 0)
      v35 = *(_QWORD *)(v35 + 8);
    goto LABEL_61;
  }
LABEL_80:
  v52 = 0;
LABEL_82:
  v2 = v54;
  v4 = v56;
  if (v58 != v60)
  {
    free(v58);
    a2 = v57;
  }
  if (v52)
    goto LABEL_85;
  return 0;
}

uint64_t sub_1C52548F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  _QWORD *v13;
  uint64_t result;
  uint64_t (**v15)(void);
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a1 + 288);
  v13 = operator new(0x28uLL);
  *v13 = &off_1E8149B98;
  v13[1] = a1;
  v13[2] = v12 + 312;
  v13[3] = a3;
  v13[4] = a5;
  v17 = v13;
  llvm::LiveInterval::refineSubRanges(a2, v12 + 312, a4, (uint64_t)v16, *(_QWORD *)(v12 + 288), *(_QWORD **)(a1 + 272), a6);
  result = (uint64_t)v17;
  if (v17 == v16)
  {
    v15 = (uint64_t (**)(void))(v16[0] + 32);
  }
  else
  {
    if (!v17)
      return result;
    v15 = (uint64_t (**)(void))(*v17 + 40);
  }
  return (*v15)();
}

void sub_1C52549E8(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  _QWORD *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  _BYTE *v64;
  unint64_t v65;
  unint64_t v66;
  int *v67;
  void *v69;
  uint64_t v70;
  _QWORD v71[10];

  v71[8] = *MEMORY[0x1E0C80C00];
  v63 = *(unsigned int *)(*a1 + 72);
  if (!(_DWORD)v63)
    return;
  v4 = 0;
  v5 = 0;
  v62 = (uint64_t *)(a2 + 104);
  do
  {
    v6 = a1[15];
    v67 = (int *)(v6 + 48 * v4);
    if (*v67 == 1
      || !*v67
      && ((v7 = v6 + 48 * v4, v8 = *(unsigned __int8 *)(v7 + 40), v9 = *(unsigned __int8 *)(v7 + 41), v8)
        ? (v10 = v9 == 0)
        : (v10 = 1),
          !v10))
    {
      v11 = v6 + 48 * v4;
      v13 = *(unsigned __int8 *)(v11 + 43);
      v12 = (_BYTE *)(v11 + 43);
      v14 = v13 ? *(_QWORD *)(*(_QWORD *)(v6 + 48 * v4 + 32) + 8) : 0;
      v15 = *v62;
      if (*v62)
      {
        v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 64) + 8 * v4) + 8) & 0xFFFFFFFFFFFFFFF8;
        v65 = v14 & 0xFFFFFFFFFFFFFFF8;
        v66 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 64) + 8 * v4) + 8);
        v64 = v12;
        while (1)
        {
          v17 = *(_DWORD *)(v15 + 8);
          v18 = *(_QWORD *)v15;
          if (!v17)
            break;
          v19 = *(_QWORD *)(v18 + 24 * v17 - 16);
          v20 = *(_DWORD *)(v16 + 24);
          v21 = (v19 >> 1) & 3 | *(_DWORD *)((v19 & 0xFFFFFFFFFFFFFFF8) + 24);
          v22 = *(_QWORD **)v15;
          v23 = *(unsigned int *)(v15 + 8);
          if (v20 >= v21)
            goto LABEL_24;
          do
          {
            v24 = v23 >> 1;
            v25 = v22[3 * (v23 >> 1) + 1];
            LODWORD(v25) = (v25 >> 1) & 3 | *(_DWORD *)((v25 & 0xFFFFFFFFFFFFFFF8) + 24);
            v23 -= (v23 >> 1) + 1;
            v26 = v20 >= v25;
            if (v20 >= v25)
              v27 = v24 + 1;
            else
              v27 = 0;
            v22 += 3 * v27;
            if (!v26)
              v23 = v24;
          }
          while (v23);
LABEL_25:
          v28 = (_QWORD *)(v18 + 24 * v17);
          if (v22 == v28)
            goto LABEL_79;
          v29 = *(_DWORD *)((*v22 & 0xFFFFFFFFFFFFFFF8) + 24);
          v30 = *(_DWORD *)(v16 + 24);
          if (((*v22 >> 1) & 3 | v29) > v30)
          {
            v31 = 0;
            goto LABEL_34;
          }
          v31 = v22[2];
          if (v16 != (v22[1] & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_30;
          v22 += 3;
          if (v22 != v28)
          {
            v29 = *(_DWORD *)((*v22 & 0xFFFFFFFFFFFFFFF8) + 24);
LABEL_30:
            if (*(_QWORD *)(v31 + 8) == v16)
              v31 = 0;
LABEL_34:
            if (v30 >= v29)
            {
              v32 = v22[2];
              if (v32)
              {
                if (!v31)
                  goto LABEL_40;
                v33 = v22[1];
                v34 = *v67;
                if (*v12 && v34 == 1)
                {
                  if (*(_QWORD *)(v32 + 8) == v66)
                  {
LABEL_40:
                    v69 = v71;
                    v70 = 0x800000000;
                    llvm::LiveIntervals::pruneValue(a1[6], v15, v66, (uint64_t)&v69);
                    *(_QWORD *)(v32 + 8) = 0;
                    if (!*v12)
                      goto LABEL_74;
                    v35 = *(_DWORD *)(v15 + 8);
                    v36 = *(_QWORD *)v15;
                    if (v35)
                    {
                      v37 = *(_QWORD *)(v36 + 24 * v35 - 16);
                      v38 = *(_DWORD *)(v65 + 24);
                      v39 = (v37 >> 1) & 3 | *(_DWORD *)((v37 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v40 = *(_QWORD **)v15;
                      v41 = *(unsigned int *)(v15 + 8);
                      if (v38 < v39)
                      {
                        do
                        {
                          v42 = v41 >> 1;
                          v43 = v40[3 * (v41 >> 1) + 1];
                          LODWORD(v43) = (v43 >> 1) & 3 | *(_DWORD *)((v43 & 0xFFFFFFFFFFFFFFF8) + 24);
                          v41 -= (v41 >> 1) + 1;
                          v44 = v38 >= v43;
                          if (v38 >= v43)
                            v45 = v42 + 1;
                          else
                            v45 = 0;
                          v40 += 3 * v45;
                          if (!v44)
                            v41 = v42;
                        }
                        while (v41);
LABEL_64:
                        v47 = (_QWORD *)(v36 + 24 * v35);
                        if (v40 != v47)
                        {
                          v48 = *(_DWORD *)((*v40 & 0xFFFFFFFFFFFFFFF8) + 24);
                          v49 = *(_DWORD *)(v65 + 24);
                          if (((*v40 >> 1) & 3 | v48) > v49 || v65 != (v40[1] & 0xFFFFFFFFFFFFFFF8))
                            goto LABEL_69;
                          v40 += 3;
                          if (v40 != v47)
                          {
                            v48 = *(_DWORD *)((*v40 & 0xFFFFFFFFFFFFFFF8) + 24);
LABEL_69:
                            if (v49 >= v48)
                            {
                              if (v40[2])
                              {
                                v50 = (unint64_t *)v69;
                                v51 = a1[6];
                                v52 = v70;
                                v53 = *(_QWORD *)(v51 + 304);
                                v54 = *(_QWORD *)(v51 + 248);
                                *(_QWORD *)v53 = v54;
                                *(_QWORD *)(v53 + 8) = *(_QWORD *)(v54 + 40);
                                *(_OWORD *)(v53 + 16) = *(_OWORD *)(v51 + 288);
                                *(_QWORD *)(v53 + 32) = v51 + 312;
                                llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v53);
                                *(_DWORD *)(v53 + 184) = 0;
                                if ((_DWORD)v52)
                                {
                                  v55 = 8 * v52;
                                  do
                                  {
                                    v56 = *v50++;
                                    llvm::LiveRangeCalc::extend(*(llvm::LiveRangeCalc **)(v51 + 304), (uint64_t *)v15, v56, 0, 0, 0);
                                    v55 -= 8;
                                  }
                                  while (v55);
                                }
                              }
                            }
                          }
                        }
LABEL_74:
                        if ((*(_BYTE *)(v32 + 8) & 6) == 0)
                          *a3 |= *(_QWORD *)(v15 + 112);
                        if (v69 != v71)
                          free(v69);
                        v5 = 1;
                        v12 = v64;
                        goto LABEL_79;
                      }
                    }
                    else
                    {
                      v35 = 0;
                    }
                    v40 = (_QWORD *)(v36 + 24 * v35);
                    goto LABEL_64;
                  }
                  if ((~(_BYTE)v33 & 6) != 0)
                    goto LABEL_56;
                }
                else if ((~(_BYTE)v33 & 6) != 0)
                {
                  if (v34 != 1)
                    goto LABEL_79;
LABEL_56:
                  if ((*(_BYTE *)(v31 + 8) & 6) != 0)
                    goto LABEL_79;
                  v46 = (~(_BYTE)v33 & 6) != 0 ? v32 : 0;
                  if (v31 != v46)
                    goto LABEL_79;
                }
LABEL_51:
                *a3 |= *(_QWORD *)(v15 + 112);
                goto LABEL_79;
              }
            }
          }
          if (v31)
            goto LABEL_51;
LABEL_79:
          v15 = *(_QWORD *)(v15 + 104);
          if (!v15)
            goto LABEL_80;
        }
        v17 = 0;
LABEL_24:
        v22 = (_QWORD *)(v18 + 24 * v17);
        goto LABEL_25;
      }
    }
LABEL_80:
    ++v4;
  }
  while (v4 != v63);
  v57 = v62;
  v58 = *v62;
  if ((v5 & (*v62 != 0)) == 1)
  {
    do
    {
      v61 = v58;
      if (!*(_DWORD *)(v58 + 8))
      {
        while (1)
        {
          v59 = *(_QWORD *)(v61 + 96);
          v58 = *(_QWORD *)(v61 + 104);
          *(_QWORD *)(v61 + 96) = 0;
          if (v59)
          {
            sub_1C47655E8(v59, *(_QWORD **)(v59 + 8));
            MEMORY[0x1CAA32FC0](v59, 0x1020C4062D53EE8);
          }
          v60 = *(void **)(v61 + 64);
          if (v60 != (void *)(v61 + 80))
            free(v60);
          if (*(_QWORD *)v61 == v61 + 16)
          {
            if (!v58)
            {
LABEL_96:
              *v57 = 0;
              return;
            }
          }
          else
          {
            free(*(void **)v61);
            if (!v58)
              goto LABEL_96;
          }
          v61 = v58;
          if (*(_DWORD *)(v58 + 8))
          {
            *v57 = v58;
            break;
          }
        }
      }
      v57 = (uint64_t *)(v58 + 104);
      v58 = *(_QWORD *)(v58 + 104);
    }
    while (v58);
  }
}

void sub_1C5254F3C(uint64_t *a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  BOOL v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;

  v4 = *(unsigned int *)(*a1 + 72);
  if ((_DWORD)v4)
  {
    v9 = 0;
    v25 = a3 + 16;
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 64) + 8 * v9) + 8);
      v11 = *(_DWORD *)(a1[15] + 48 * v9);
      if ((v11 - 1) >= 2)
      {
        if (v11 == 3)
        {
          llvm::LiveIntervals::pruneValue(a1[6], *a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 64) + 8 * v9) + 8), a3);
          v12 = a2[15] + 48 * **(unsigned int **)(a1[15] + 48 * v9 + 32);
          v13 = *(unsigned __int8 *)(v12 + 40);
          v14 = *(_DWORD *)v12;
          v15 = v13 && v14 == 0;
          v16 = v15;
          if ((v10 & 6) != 0)
          {
            if (a4)
            {
              v17 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 16);
              v18 = *(unsigned int *)(v17 + 40);
              if ((_DWORD)v18)
              {
                v19 = *(unsigned int **)(v17 + 32);
                v20 = 32 * v18;
                do
                {
                  v21 = *v19;
                  if ((*v19 & 0x10000FF) == 0x1000000 && v19[1] == *((_DWORD *)a1 + 2))
                  {
                    if ((v21 & 0x10000000) == 0 || v16)
                      v23 = *v19;
                    else
                      v23 = v21 & 0xEFFFFFFF;
                    if ((v21 & 0xFFF00) != 0)
                      v21 = v23;
                    *v19 = v21 & 0xFBFFFFFF;
                  }
                  v19 += 8;
                  v20 -= 32;
                }
                while (v20);
              }
            }
            if (!v16)
            {
              v24 = *(unsigned int *)(a3 + 8);
              if (v24 >= *(unsigned int *)(a3 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v25, v24 + 1, 8);
                v24 = *(unsigned int *)(a3 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a3 + 8 * v24) = v10;
              ++*(_DWORD *)(a3 + 8);
            }
          }
        }
      }
      else if (sub_1C5256D50((uint64_t)a1, v9, (uint64_t)a2))
      {
        llvm::LiveIntervals::pruneValue(a1[6], *a1, v10, a3);
      }
      ++v9;
    }
    while (v9 != v4);
  }
}

uint64_t *sub_1C5255114(uint64_t *result, llvm::SmallPtrSetImplBase *this, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t *v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  unsigned int v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  BOOL v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t *v55;
  unint64_t v56;
  int32x2_t *v57;
  int32x2_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v69;

  v4 = *(unsigned int *)(*result + 72);
  if (!(_DWORD)v4)
    return result;
  v7 = (uint64_t **)result;
  v8 = 0;
  v67 = a3 + 16;
  do
  {
    result = *v7;
    v9 = *(_QWORD *)((*v7)[8] + 8 * v8);
    v10 = *(_QWORD *)(v9 + 8);
    v11 = v7[15];
    v12 = v11[6 * v8];
    if (v12 == 1)
      goto LABEL_67;
    if (v12 || !LOBYTE(v11[6 * v8 + 5]) || !BYTE1(v11[6 * v8 + 5]))
      goto LABEL_89;
    if (!a4)
    {
      llvm::LiveRange::removeValNo(result, *(_QWORD *)((*v7)[8] + 8 * v8));
      *(_QWORD *)(v9 + 8) = 0;
      goto LABEL_67;
    }
    v13 = *((_DWORD *)result + 2);
    v14 = *result;
    if (v13)
    {
      v15 = *(_QWORD *)(v14 + 24 * v13 - 16);
      v16 = *(_DWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 24) | (v10 >> 1) & 3;
      v17 = (v15 >> 1) & 3 | *(_DWORD *)((v15 & 0xFFFFFFFFFFFFFFF8) + 24);
      v18 = (_QWORD *)*result;
      v19 = *((unsigned int *)result + 2);
      if (v16 < v17)
      {
        do
        {
          v20 = v19 >> 1;
          v21 = v18[3 * (v19 >> 1) + 1];
          LODWORD(v21) = (v21 >> 1) & 3 | *(_DWORD *)((v21 & 0xFFFFFFFFFFFFFFF8) + 24);
          v19 -= (v19 >> 1) + 1;
          v22 = v16 >= v21;
          if (v16 >= v21)
            v23 = v20 + 1;
          else
            v23 = 0;
          v18 += 3 * v23;
          if (!v22)
            v19 = v20;
        }
        while (v19);
        goto LABEL_20;
      }
    }
    else
    {
      v13 = 0;
    }
    v18 = (_QWORD *)(v14 + 24 * v13);
LABEL_20:
    v24 = (_QWORD *)(v14 + 24 * v13);
    if (v18 == v24
      || ((*v18 >> 1) & 3 | *(_DWORD *)((*v18 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 24) | (v10 >> 1) & 3))
    {
      v18 = v24;
    }
    v25 = v18[1];
    llvm::LiveRange::removeValNo(result, *(_QWORD *)((*v7)[8] + 8 * v8));
    *(_QWORD *)(v9 + 8) = 0;
    v26 = *(_QWORD *)(a4 + 104);
    if (!v26)
      goto LABEL_67;
    v27 = 0;
    v28 = 0;
    v69 = 0;
    v29 = v10 & 0xFFFFFFFFFFFFFFF8;
    v30 = (v10 >> 1) & 3;
    do
    {
      v31 = *(_DWORD *)(v26 + 8);
      v32 = *(unint64_t **)v26;
      if (!v31)
      {
        v31 = 0;
LABEL_34:
        v36 = &v32[3 * v31];
        goto LABEL_35;
      }
      v33 = v32[3 * v31 - 2];
      v34 = *(_DWORD *)(v29 + 24) | v30;
      v35 = (v33 >> 1) & 3 | *(_DWORD *)((v33 & 0xFFFFFFFFFFFFFFF8) + 24);
      v36 = *(unint64_t **)v26;
      v37 = *(unsigned int *)(v26 + 8);
      if (v34 >= v35)
        goto LABEL_34;
      do
      {
        v38 = v37 >> 1;
        v39 = v36[3 * (v37 >> 1) + 1];
        LODWORD(v39) = (v39 >> 1) & 3 | *(_DWORD *)((v39 & 0xFFFFFFFFFFFFFFF8) + 24);
        v37 -= (v37 >> 1) + 1;
        v40 = v34 >= v39;
        if (v34 >= v39)
          v41 = v38 + 1;
        else
          v41 = 0;
        v36 += 3 * v41;
        if (!v40)
          v37 = v38;
      }
      while (v37);
LABEL_35:
      if (v36 != &v32[3 * v31])
      {
        v42 = (*v36 >> 1) & 3 | *(_DWORD *)((*v36 & 0xFFFFFFFFFFFFFFF8) + 24);
        if (v42 <= (*(_DWORD *)(v29 + 24) | v30))
        {
          v43 = v36 + 1;
          if (v28 >= 8
            && (*(_DWORD *)((v28 & 0xFFFFFFFFFFFFFFF8) + 24) | (v28 >> 1) & 3) >= ((*v43 >> 1) & 3 | *(_DWORD *)((*v43 & 0xFFFFFFFFFFFFFFF8) + 24)))
          {
            v43 = &v69;
          }
          v28 = *v43;
          v69 = *v43;
        }
        else if (v27 < 8)
        {
          v27 = *v36;
        }
        else if (v42 < (*(_DWORD *)((v27 & 0xFFFFFFFFFFFFFFF8) + 24) | (v27 >> 1) & 3))
        {
          v27 = *v36;
        }
      }
      v26 = *(_QWORD *)(v26 + 104);
    }
    while (v26);
    if (v28 > 7
      && (*(_DWORD *)((v28 & 0xFFFFFFFFFFFFFFF8) + 24) | (v28 >> 1) & 3) < (*(_DWORD *)((v25 & 0xFFFFFFFFFFFFFFF8) + 24) | (v25 >> 1) & 3))
    {
      v25 = v28;
    }
    if (v27 >= 8
      && (*(_DWORD *)((v27 & 0xFFFFFFFFFFFFFFF8) + 24) | (v27 >> 1) & 3) < (*(_DWORD *)((v25 & 0xFFFFFFFFFFFFFFF8) + 24) | (v25 >> 1) & 3))
    {
      v25 = v27;
    }
    if (v28 < 8)
      goto LABEL_67;
    v44 = *((unsigned int *)*v7 + 2);
    v45 = **v7;
    if (!(_DWORD)v44)
    {
      LODWORD(v44) = 0;
LABEL_64:
      v48 = v45 + 24 * v44;
      goto LABEL_65;
    }
    v46 = *(_QWORD *)(v45 + 24 * v44 - 16);
    v47 = *(_DWORD *)(v29 + 24) | v30;
    v48 = **v7;
    if (v47 >= ((v46 >> 1) & 3 | *(_DWORD *)((v46 & 0xFFFFFFFFFFFFFFF8) + 24)))
      goto LABEL_64;
    do
    {
      v49 = v44 >> 1;
      v50 = *(_QWORD *)(v48 + 24 * (v44 >> 1) + 8);
      LODWORD(v50) = (v50 >> 1) & 3 | *(_DWORD *)((v50 & 0xFFFFFFFFFFFFFFF8) + 24);
      v44 -= (v44 >> 1) + 1;
      v51 = v47 >= v50;
      if (v47 >= v50)
        v52 = v49 + 1;
      else
        v52 = 0;
      v48 += 24 * v52;
      if (!v51)
        v44 = v49;
    }
    while (v44);
LABEL_65:
    if (v48 != v45)
      *(_QWORD *)(v48 - 16) = v25;
LABEL_67:
    if (v10 < 8)
      v53 = 0;
    else
      v53 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 16);
    if (**(_WORD **)(v53 + 16) == 19)
    {
      v54 = *(_DWORD *)(*(_QWORD *)(v53 + 32) + 36);
      if (v54 < 0)
      {
        v55 = v7[5];
        if (v54 != *((_DWORD *)v55 + 3) && v54 != *((_DWORD *)v55 + 2))
        {
          v56 = *(unsigned int *)(a3 + 8);
          if (v56 >= *(unsigned int *)(a3 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v67, v56 + 1, 4);
            v56 = *(unsigned int *)(a3 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a3 + 4 * v56) = v54;
          ++*(_DWORD *)(a3 + 8);
        }
      }
    }
    sub_1C4774094(this, v53);
    v57 = (int32x2_t *)v7[6][36];
    v58 = v57[46];
    v59 = v57[48].u32[0];
    if ((_DWORD)v59)
    {
      LODWORD(v60) = (v59 - 1) & ((v53 >> 4) ^ (v53 >> 9));
      v61 = (uint64_t *)(*(_QWORD *)&v58 + 16 * v60);
      v62 = *v61;
      if (*v61 != v53)
      {
        v63 = 1;
        while (v62 != -4096)
        {
          v64 = v60 + v63++;
          v60 = v64 & (v59 - 1);
          v62 = *(_QWORD *)(*(_QWORD *)&v58 + 16 * v60);
          if (v62 == v53)
          {
            v61 = (uint64_t *)(*(_QWORD *)&v58 + 16 * v60);
            goto LABEL_84;
          }
        }
        goto LABEL_83;
      }
    }
    else
    {
LABEL_83:
      v61 = (uint64_t *)(*(_QWORD *)&v58 + 16 * v59);
    }
LABEL_84:
    if (v61 != (uint64_t *)(*(_QWORD *)&v58 + 16 * v59))
    {
      v65 = v61[1] & 0xFFFFFFFFFFFFFFF8;
      *v61 = -8192;
      v57[47] = vadd_s32(v57[47], (int32x2_t)0x1FFFFFFFFLL);
      *(_QWORD *)(v65 + 16) = 0;
    }
    v66 = v53;
    if ((*(_BYTE *)v53 & 4) == 0)
    {
      v66 = v53;
      if ((*(_WORD *)(v53 + 44) & 8) != 0)
      {
        v66 = v53;
        do
          v66 = *(_QWORD *)(v66 + 8);
        while ((*(_WORD *)(v66 + 44) & 8) != 0);
      }
    }
    result = (uint64_t *)sub_1C487FE80(*(_QWORD *)(v53 + 24) + 40, v53, *(_QWORD *)(v66 + 8));
LABEL_89:
    ++v8;
  }
  while (v8 != v4);
  return result;
}

uint64_t sub_1C5255680(uint64_t a1, int *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  BOOL v25;
  unsigned int v26;

  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    v5 = (37 * *a2) & (v4 - 1);
    result = *(_QWORD *)a1 + 16 * v5;
    v7 = *(_DWORD *)result;
    if (*a2 == *(_DWORD *)result)
      return result;
    v8 = 0;
    v9 = 1;
    while (v7 != -1)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -2;
      if (v10)
        v8 = result;
      v11 = v5 + v9++;
      v5 = v11 & (v4 - 1);
      result = *(_QWORD *)a1 + 16 * v5;
      v7 = *(_DWORD *)result;
      if (*a2 == *(_DWORD *)result)
        return result;
    }
    if (v8)
      result = v8;
  }
  else
  {
    result = 0;
  }
  v12 = *(_DWORD *)(a1 + 8);
  if (4 * v12 + 4 >= 3 * v4)
  {
    sub_1C5255878((uint64_t *)a1, 2 * v4);
    v13 = *a2;
    v14 = *(_DWORD *)(a1 + 16) - 1;
    v15 = (37 * *a2) & v14;
    result = *(_QWORD *)a1 + 16 * v15;
    v16 = *(_DWORD *)result;
    if (*a2 == *(_DWORD *)result)
      goto LABEL_16;
    v17 = 0;
    v18 = 1;
    while (v16 != -1)
    {
      if (v17)
        v19 = 0;
      else
        v19 = v16 == -2;
      if (v19)
        v17 = result;
      v20 = v15 + v18++;
      v15 = v20 & v14;
      result = *(_QWORD *)a1 + 16 * v15;
      v16 = *(_DWORD *)result;
      if (v13 == *(_DWORD *)result)
        goto LABEL_16;
    }
    goto LABEL_43;
  }
  if (v4 + ~v12 - *(_DWORD *)(a1 + 12) <= v4 >> 3)
  {
    sub_1C5255878((uint64_t *)a1, v4);
    v13 = *a2;
    v21 = *(_DWORD *)(a1 + 16) - 1;
    v22 = (37 * *a2) & v21;
    result = *(_QWORD *)a1 + 16 * v22;
    v23 = *(_DWORD *)result;
    if (*a2 == *(_DWORD *)result)
      goto LABEL_16;
    v17 = 0;
    v24 = 1;
    while (v23 != -1)
    {
      if (v17)
        v25 = 0;
      else
        v25 = v23 == -2;
      if (v25)
        v17 = result;
      v26 = v22 + v24++;
      v22 = v26 & v21;
      result = *(_QWORD *)a1 + 16 * v22;
      v23 = *(_DWORD *)result;
      if (v13 == *(_DWORD *)result)
        goto LABEL_16;
    }
LABEL_43:
    if (v17)
      result = v17;
  }
  v13 = *(_DWORD *)result;
LABEL_16:
  ++*(_DWORD *)(a1 + 8);
  if (v13 != -1)
    --*(_DWORD *)(a1 + 12);
  *(_DWORD *)result = *a2;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

_DWORD *sub_1C5255878(uint64_t *a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  int v14;
  int *v15;
  int v16;
  unsigned int v17;
  _DWORD *v18;
  int v19;
  _DWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *((unsigned int *)a1 + 4);
  v4 = (int *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      v12 = result;
      do
      {
        *v12 = -1;
        v12 += 4;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v13 = 0;
      v14 = v10 - 1;
      v15 = v4;
      do
      {
        v16 = *v15;
        if (*v15 <= 0xFFFFFFFD)
        {
          v17 = (37 * v16) & v14;
          v18 = &result[4 * v17];
          v19 = *v18;
          if (v16 != *v18)
          {
            v20 = 0;
            v21 = 1;
            while (v19 != -1)
            {
              if (v20)
                v22 = 0;
              else
                v22 = v19 == -2;
              if (v22)
                v20 = v18;
              v23 = v17 + v21++;
              v17 = v23 & v14;
              v18 = &result[4 * (v23 & v14)];
              v19 = *v18;
              if (v16 == *v18)
                goto LABEL_12;
            }
            if (v20)
              v18 = v20;
          }
LABEL_12:
          *v18 = v16;
          *((_QWORD *)v18 + 1) = *((_QWORD *)v15 + 1);
          *((_DWORD *)a1 + 2) = ++v13;
        }
        v15 += 4;
      }
      while (v15 != &v4[4 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v24 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v24)
  {
    v25 = 16 * v24;
    do
    {
      *result = -1;
      result += 4;
      v25 -= 16;
    }
    while (v25);
  }
  return result;
}

uint64_t sub_1C52559F0(uint64_t result, unsigned int a2, uint64_t **a3)
{
  uint64_t v3;
  uint64_t v4;
  int64x2_t *v5;
  uint64_t **v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;
  unint64_t v36;
  _QWORD *v37;
  unsigned int *v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v42;
  unsigned int **v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  BOOL v54;
  unint64_t v55;
  _QWORD *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int *v59;
  uint64_t v60;
  _BOOL4 v61;
  unsigned int *v62;
  uint64_t v64;
  unsigned int **v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t *v68;
  uint64_t *v69;
  _BYTE *v70;
  int v71;
  uint64_t v72;
  uint64_t *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t *v77;
  int v78;
  unsigned int v79;
  BOOL v80;
  _DWORD *v81;
  int v82;
  unsigned int v83;
  uint64_t *v84;
  uint64_t *v85;
  _BYTE *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unsigned int v100;
  _QWORD *v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  _QWORD *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  BOOL v109;
  unint64_t v110;
  _QWORD *v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int *v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  BOOL v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v131;
  unsigned int **v132;
  uint64_t v133;
  _BOOL4 v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t **v139;
  uint64_t *v140;
  uint64_t v141;

  v3 = *(_QWORD *)(result + 120);
  v4 = v3 + 48 * a2;
  v5 = (int64x2_t *)(v4 + 8);
  if (*(_QWORD *)(v4 + 8))
    return result;
  v6 = (uint64_t **)result;
  v141 = a2;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 64) + 8 * a2);
  v8 = *(_QWORD *)(v7 + 8);
  if (v8 > 7)
  {
    v10 = a3;
    if ((v8 & 6) == 0)
    {
      if (*(_BYTE *)(result + 24))
        v13 = 1;
      else
        v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 64) + 232) + 8 * *(unsigned int *)(result + 12));
      v11 = 0;
      *v5 = vdupq_n_s64(v13);
      goto LABEL_54;
    }
    v11 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 16);
    if (*(_BYTE *)(result + 24))
    {
      *v5 = vdupq_n_s64(1uLL);
      if (**(_WORD **)(v11 + 16) == 10)
      {
        v12 = v3 + 48 * a2;
        *(_QWORD *)(v12 + 16) = 0;
        *(_BYTE *)(v12 + 40) = 1;
      }
      goto LABEL_54;
    }
    v14 = *(unsigned int *)(v11 + 40);
    if (!(_DWORD)v14)
    {
      v5->i64[0] = 0;
      *(_QWORD *)(v4 + 16) = 0;
      goto LABEL_52;
    }
    v135 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)result + 64) + 8 * a2);
    v15 = 0;
    v16 = v11;
    v17 = 0;
    v133 = v16;
    v18 = *(unsigned int **)(v16 + 32);
    v19 = 32 * v14;
    do
    {
      v20 = *v18;
      if (!*v18 && (v20 & 0x1000000) != 0 && v18[1] == *((_DWORD *)v6 + 2))
      {
        v21 = v6[8];
        v22 = (v20 >> 8) & 0xFFF;
        if (*((_DWORD *)v6 + 3))
        {
          if (v22)
          {
            result = (*(uint64_t (**)(uint64_t *))(*v21 + 208))(v6[8]);
            v22 = result;
            v20 = *v18;
          }
          else
          {
            v22 = *((_DWORD *)v6 + 3);
          }
        }
        v15 |= *(_QWORD *)(v21[29] + 8 * v22);
        v23 = (v20 & 0x10FFF00) != 0x1000000 && (v20 & 0x30000000) == 0;
        if (v23)
          v17 = 1;
      }
      v18 += 8;
      v19 -= 32;
    }
    while (v19);
    v5->i64[0] = v15;
    v10 = a3;
    v24 = v3 + 48 * v141;
    *(_QWORD *)(v24 + 16) = v15;
    v25 = (_QWORD *)(v24 + 16);
    v23 = v17 == 0;
    v11 = v133;
    v7 = v135;
    if (v23)
      goto LABEL_52;
    v26 = *(_QWORD *)(v135 + 8) & 0xFFFFFFFFFFFFFFF8;
    v27 = *((_DWORD *)*v6 + 2);
    v28 = **v6;
    if (v27)
    {
      v29 = *(_QWORD *)(v28 + 24 * v27 - 16);
      v30 = *(_DWORD *)(v26 + 24);
      if (v30 < ((v29 >> 1) & 3 | *(_DWORD *)((v29 & 0xFFFFFFFFFFFFFFF8) + 24)))
      {
        v31 = (_QWORD *)**v6;
        v32 = *((unsigned int *)*v6 + 2);
        do
        {
          v33 = v32 >> 1;
          v34 = v31[3 * (v32 >> 1) + 1];
          LODWORD(v34) = (v34 >> 1) & 3 | *(_DWORD *)((v34 & 0xFFFFFFFFFFFFFFF8) + 24);
          v32 -= (v32 >> 1) + 1;
          v35 = v30 >= v34;
          if (v30 >= v34)
            v36 = v33 + 1;
          else
            v36 = 0;
          v31 += 3 * v36;
          if (!v35)
            v32 = v33;
        }
        while (v32);
LABEL_42:
        v37 = (_QWORD *)(v28 + 24 * v27);
        if (v31 != v37
          && ((*v31 >> 1) & 3 | *(_DWORD *)((*v31 & 0xFFFFFFFFFFFFFFF8) + 24)) <= *(_DWORD *)(v26 + 24))
        {
          v38 = (unsigned int *)v31[2];
          v39 = v31[1] & 0xFFFFFFFFFFFFFFF8;
          v40 = v31 + 3;
          if (v26 == v39 && v40 == v37)
          {
            v116 = v3 + 48 * v141;
            *(_QWORD *)(v116 + 24) = v38;
            v43 = (unsigned int **)(v116 + 24);
            if (v38)
              goto LABEL_50;
LABEL_52:
            if (**(_WORD **)(v11 + 16) == 10)
              *(_BYTE *)(v3 + 48 * v141 + 40) = 1;
LABEL_54:
            v44 = *(_QWORD *)(v7 + 8);
            v45 = v44 & 0xFFFFFFFFFFFFFFF8;
            v46 = *((_DWORD *)*v10 + 2);
            v47 = **v10;
            if (v46)
            {
              v48 = *(_QWORD *)(v47 + 24 * v46 - 16);
              v49 = *(_DWORD *)(v45 + 24);
              if (v49 < ((v48 >> 1) & 3 | *(_DWORD *)((v48 & 0xFFFFFFFFFFFFFFF8) + 24)))
              {
                v50 = (_QWORD *)**v10;
                v51 = *((unsigned int *)*v10 + 2);
                do
                {
                  v52 = v51 >> 1;
                  v53 = v50[3 * (v51 >> 1) + 1];
                  LODWORD(v53) = (v53 >> 1) & 3 | *(_DWORD *)((v53 & 0xFFFFFFFFFFFFFFF8) + 24);
                  result = (v51 >> 1) + 1;
                  v51 -= result;
                  v54 = v49 >= v53;
                  if (v49 >= v53)
                    v55 = v52 + 1;
                  else
                    v55 = 0;
                  v50 += 3 * v55;
                  if (!v54)
                    v51 = v52;
                }
                while (v51);
LABEL_66:
                v56 = (_QWORD *)(v47 + 24 * v46);
                if (v50 == v56)
                {
                  v9 = 0;
                  *(_QWORD *)(v3 + 48 * v141 + 32) = 0;
                  goto LABEL_119;
                }
                v57 = *(_DWORD *)((*v50 & 0xFFFFFFFFFFFFFFF8) + 24);
                v58 = *(_DWORD *)(v45 + 24);
                if (((*v50 >> 1) & 3 | v57) > v58)
                {
                  v60 = 0;
                  v61 = 0;
                  v59 = 0;
                }
                else
                {
                  v60 = v50[1];
                  v59 = (unsigned int *)v50[2];
                  v61 = v45 == (v60 & 0xFFFFFFFFFFFFFFF8);
                  if (v45 == (v60 & 0xFFFFFFFFFFFFFFF8))
                  {
                    v50 += 3;
                    if (v50 == v56)
                    {
                      v61 = 1;
                      goto LABEL_82;
                    }
                    v57 = *(_DWORD *)((*v50 & 0xFFFFFFFFFFFFFFF8) + 24);
                  }
                  if (*((_QWORD *)v59 + 1) == v45)
                    v59 = 0;
                }
                if (v58 >= v57)
                {
                  v62 = (unsigned int *)v50[2];
                  if (v59 != v62 && v62 != 0)
                  {
                    v75 = (*((_QWORD *)v62 + 1) >> 1) & 3 | *(_DWORD *)((*((_QWORD *)v62 + 1) & 0xFFFFFFFFFFFFFFF8)
                                                                                    + 24);
                    v76 = v58 | (v44 >> 1) & 3;
                    if (v75 >= v76)
                    {
                      if (v59 && v76 < v75)
                      {
                        *(_QWORD *)(v3 + 48 * v141 + 32) = v59;
                        goto LABEL_103;
                      }
                    }
                    else
                    {
                      result = sub_1C52559F0(v10, *v62, v6);
                    }
                    *(_QWORD *)(v3 + 48 * v141 + 32) = v62;
                    v77 = v10[15];
                    if (v77[6 * *v62 + 1])
                    {
                      if ((*(_BYTE *)(v7 + 8) & 6) == 0
                        || (*(_QWORD *)(v3 + 48 * v141 + 16) & v77[6 * *v62 + 2]) == 0)
                      {
                        v78 = 2;
LABEL_99:
                        *(_DWORD *)v4 = v78;
                        *((_DWORD *)v6[9] + v141) = *((_DWORD *)v10[9]
                                                    + **(unsigned int **)(v3 + 48 * v141 + 32));
                        return result;
                      }
                      goto LABEL_103;
                    }
                    goto LABEL_118;
                  }
                  v60 = v50[1];
                }
LABEL_82:
                v64 = v3 + 48 * v141;
                *(_QWORD *)(v64 + 32) = v59;
                v65 = (unsigned int **)(v64 + 32);
                if (v59)
                {
                  v134 = v61;
                  result = sub_1C52559F0(v10, *v59, v6);
                  v66 = *v65;
                  v67 = **v65;
                  v68 = v10[15];
                  v69 = &v68[6 * v67];
                  v71 = *((unsigned __int8 *)v69 + 40);
                  v70 = v69 + 5;
                  if (v71)
                  {
                    if (!v11)
                      goto LABEL_93;
                    v132 = v65;
                    v136 = v7;
                    v139 = v10;
                    v72 = *(_QWORD *)(v11 + 24);
                    v73 = v68;
                    v74 = v67;
                    result = sub_1C499C548((uint64_t)v6[7], *((_QWORD *)v66 + 1));
                    v67 = v74;
                    v23 = v72 == result;
                    v68 = v73;
                    v7 = v136;
                    v10 = v139;
                    v65 = v132;
                    if (v23)
LABEL_93:
                      v68[6 * v67 + 2] &= ~v68[6 * v67 + 1];
                    else
                      *v70 = 0;
                  }
                  if ((*(_BYTE *)(v7 + 8) & 6) == 0)
                    goto LABEL_112;
                  if (**(_WORD **)(v11 + 16) == 10)
                  {
LABEL_98:
                    v78 = 1;
                    goto LABEL_99;
                  }
                  v140 = v68;
                  v79 = v67;
                  result = llvm::CoalescerPair::isCoalescable((llvm::CoalescerPair *)v6[5], (const llvm::MachineInstr *)v11);
                  if ((_DWORD)result)
                  {
                    *(_QWORD *)(v3 + 48 * v141 + 16) &= v140[6 * v79 + 2] | ~v5->i64[0];
                    goto LABEL_98;
                  }
                  v80 = v134;
                  if (!v134
                    || (*(_DWORD *)((v60 & 0xFFFFFFFFFFFFFFF8) + 24) | (v60 >> 1) & 3) > ((*(_QWORD *)(v7 + 8) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v7 + 8) & 0xFFFFFFFFFFFFFFF8) + 24)))
                  {
                    if (**(_WORD **)(v11 + 16) == 19)
                    {
                      v81 = *(_DWORD **)(v11 + 32);
                      if ((*v81 & 0xFFF00) == 0 && (v81[8] & 0xFFF00) == 0 && !*((_BYTE *)v6[5] + 24))
                      {
                        v118 = *v65;
                        result = sub_1C5256510((uint64_t)v6, v7);
                        v120 = v119;
                        v121 = (uint64_t)v118;
                        v122 = result;
                        if (v121 == result && *((_DWORD *)v10 + 2) == v120)
                          goto LABEL_175;
                        v137 = v120;
                        result = sub_1C5256510((uint64_t)v10, v121);
                        if (v122 && result)
                          v124 = *(_QWORD *)(v122 + 8) == *(_QWORD *)(result + 8);
                        else
                          v124 = v122 == result;
                        v80 = v134;
                        if (v124 && v137 == v123)
                        {
LABEL_175:
                          v78 = 1;
                          *(_BYTE *)(v3 + 48 * v141 + 43) = 1;
                          goto LABEL_99;
                        }
                      }
                    }
                    if (!*((_BYTE *)v6 + 24) && (v5->i64[0] & v140[6 * v79 + 2]) != 0)
                    {
                      if (!v80 && (*(_QWORD *)(v6[8][29] + 8 * *((unsigned int *)v10 + 3)) & ~v5->i64[0]) != 0)
                      {
                        if (*((_BYTE *)v6 + 25))
                        {
                          v91 = v7;
                          v92 = (uint64_t)v6[6];
                          v93 = *((_DWORD *)v10 + 2);
                          if ((v93 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v92 + 416)
                            || (v94 = *(_QWORD *)(*(_QWORD *)(v92 + 408) + 8 * (v93 & 0x7FFFFFFF))) == 0)
                          {
                            v94 = sub_1C4851220((uint64_t)v6[6], v93);
                            v125 = *(_QWORD *)(v92 + 304);
                            v126 = *(_QWORD *)(v92 + 248);
                            v127 = *(_QWORD *)(v126 + 40);
                            *(_QWORD *)v125 = v126;
                            *(_QWORD *)(v125 + 8) = v127;
                            *(_OWORD *)(v125 + 16) = *(_OWORD *)(v92 + 288);
                            *(_QWORD *)(v125 + 32) = v92 + 312;
                            llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v125);
                            *(_DWORD *)(v125 + 184) = 0;
                            v128 = *(_QWORD *)(v92 + 256);
                            v23 = *(_BYTE *)(v128 + 16) == 0;
                            v129 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v128 + 24)
                                                                   + 16 * (*(_DWORD *)(v94 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                                      + 34);
                            v131 = !v23 && v129 != 0;
                            llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v92 + 304), (llvm::LiveInterval *)v94, v131);
                            result = llvm::LiveIntervals::computeDeadValues(v92, v94, 0);
                          }
                          v95 = *(_QWORD *)(v94 + 104);
                          if (v95)
                          {
                            while (1)
                            {
                              v96 = *((unsigned int *)v10 + 3);
                              v97 = *(_QWORD *)(v95 + 112);
                              if ((_DWORD)v96)
                              {
                                result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6[8] + 216))(v6[8], v96, v97);
                                v97 = result;
                              }
                              if ((v5->i64[0] & v97) == 0)
                                goto LABEL_158;
                              v98 = *(_QWORD *)(v91 + 8);
                              v99 = v98 & 0xFFFFFFFFFFFFFFF8;
                              v100 = *(_DWORD *)(v95 + 8);
                              v101 = *(_QWORD **)v95;
                              if (!v100)
                                break;
                              v102 = v101[3 * v100 - 2];
                              v103 = *(_DWORD *)(v99 + 24);
                              v104 = (v102 >> 1) & 3 | *(_DWORD *)((v102 & 0xFFFFFFFFFFFFFFF8) + 24);
                              v105 = *(_QWORD **)v95;
                              v106 = *(unsigned int *)(v95 + 8);
                              if (v103 >= v104)
                                goto LABEL_144;
                              do
                              {
                                v107 = v106 >> 1;
                                v108 = v105[3 * (v106 >> 1) + 1];
                                LODWORD(v108) = (v108 >> 1) & 3 | *(_DWORD *)((v108 & 0xFFFFFFFFFFFFFFF8)
                                                                                          + 24);
                                v106 -= (v106 >> 1) + 1;
                                v109 = v103 >= v108;
                                if (v103 >= v108)
                                  v110 = v107 + 1;
                                else
                                  v110 = 0;
                                v105 += 3 * v110;
                                if (!v109)
                                  v106 = v107;
                              }
                              while (v106);
LABEL_145:
                              v111 = &v101[3 * v100];
                              if (v105 == v111)
                                goto LABEL_158;
                              v112 = *(_DWORD *)((*v105 & 0xFFFFFFFFFFFFFFF8) + 24);
                              v113 = *(_DWORD *)(v99 + 24);
                              if (((*v105 >> 1) & 3 | v112) > v113)
                              {
                                v114 = 0;
                                v115 = 0;
                              }
                              else
                              {
                                v114 = v105[1];
                                v115 = v105[2];
                                if (v99 == (v114 & 0xFFFFFFFFFFFFFFF8))
                                {
                                  v105 += 3;
                                  if (v105 == v111)
                                    goto LABEL_156;
                                  v112 = *(_DWORD *)((*v105 & 0xFFFFFFFFFFFFFFF8) + 24);
                                }
                                if (*(_QWORD *)(v115 + 8) == v99)
                                  v115 = 0;
                              }
                              if (v113 >= v112)
                                v114 = v105[1];
LABEL_156:
                              if (v115
                                && (*(_DWORD *)((v114 & 0xFFFFFFFFFFFFFFF8) + 24) | (v114 >> 1) & 3) > (v113 | (v98 >> 1) & 3))
                              {
                                goto LABEL_103;
                              }
LABEL_158:
                              v95 = *(_QWORD *)(v95 + 104);
                              v82 = 3;
                              if (!v95)
                                goto LABEL_113;
                            }
                            v100 = 0;
LABEL_144:
                            v105 = &v101[3 * v100];
                            goto LABEL_145;
                          }
                          if ((v5->i64[0] & *(_QWORD *)(v6[8][29] + 8 * *((unsigned int *)v10 + 3))) == 0)
                            goto LABEL_112;
                        }
                        else
                        {
                          result = sub_1C499C548((uint64_t)v6[7], *(_QWORD *)(v7 + 8));
                          v117 = *(_QWORD *)(v6[7][49] + 16 * *(unsigned int *)(result + 24) + 8);
                          if ((*(_DWORD *)((v60 & 0xFFFFFFFFFFFFFFF8) + 24) | (v60 >> 1) & 3) < ((v117 >> 1) & 3 | *(_DWORD *)((v117 & 0xFFFFFFFFFFFFFFF8) + 24)))
                          {
                            v82 = 4;
LABEL_113:
                            *(_DWORD *)v4 = v82;
                            v83 = **v65;
                            v84 = v10[15];
                            v85 = &v84[6 * v83];
                            v87 = *((unsigned __int8 *)v85 + 40);
                            v86 = v85 + 5;
                            if (v87
                              && *((_BYTE *)v6 + 25)
                              && (v84[6 * v83 + 1] & ~*(_QWORD *)(v3 + 48 * v141 + 16)) != 0)
                            {
                              *v86 = 0;
                              v84[6 * v83 + 2] = -1;
                            }
                            BYTE1(v84[6 * v83 + 5]) = 1;
                            goto LABEL_120;
                          }
                        }
                      }
LABEL_103:
                      v9 = 5;
                      goto LABEL_119;
                    }
LABEL_112:
                    v82 = 3;
                    goto LABEL_113;
                  }
                }
LABEL_118:
                v9 = 0;
                goto LABEL_119;
              }
            }
            else
            {
              v46 = 0;
            }
            v50 = (_QWORD *)(v47 + 24 * v46);
            goto LABEL_66;
          }
          if (*((_QWORD *)v38 + 1) != v26)
          {
            v42 = v3 + 48 * v141;
            *(_QWORD *)(v42 + 24) = v38;
            v43 = (unsigned int **)(v42 + 24);
LABEL_50:
            result = sub_1C52559F0(v6, *v38, a3);
            *v25 |= v6[15][6 * **v43 + 2];
            goto LABEL_52;
          }
        }
        *(_QWORD *)(v3 + 48 * v141 + 24) = 0;
        goto LABEL_52;
      }
    }
    else
    {
      v27 = 0;
    }
    v31 = (_QWORD *)(v28 + 24 * v27);
    goto LABEL_42;
  }
  v9 = 0;
  v5->i64[0] = -1;
LABEL_119:
  *(_DWORD *)v4 = v9;
LABEL_120:
  v88 = (uint64_t)v6[4];
  *((_DWORD *)v6[9] + v141) = *(_DWORD *)(v88 + 8);
  v89 = *(_QWORD *)((*v6)[8] + 8 * v141);
  v90 = *(unsigned int *)(v88 + 8);
  if (v90 >= *(_DWORD *)(v88 + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v88, v88 + 16, v90 + 1, 8);
    LODWORD(v90) = *(_DWORD *)(v88 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v88 + 8 * v90) = v89;
  ++*(_DWORD *)(v88 + 8);
  return result;
}

uint64_t sub_1C5256510(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  BOOL v30;
  unint64_t v31;
  unsigned int v32;
  _QWORD *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  _QWORD *v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v53;

  while (1)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if ((v4 & 6) == 0)
      return a2;
    v5 = v4 < 8 ? 0 : *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 16);
    if (**(_WORD **)(v5 + 16) != 19)
      return a2;
    v6 = *(_DWORD **)(v5 + 32);
    if ((*v6 & 0xFFF00) != 0)
      return a2;
    if ((v6[8] & 0xFFF00) != 0)
      return a2;
    v7 = v6[9];
    if ((v7 & 0x80000000) == 0)
      return a2;
    v8 = *(_QWORD *)(a1 + 48);
    if ((v7 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v8 + 416)
      || (v9 = *(_QWORD *)(*(_QWORD *)(v8 + 408) + 8 * (v7 & 0x7FFFFFFF))) == 0)
    {
      v9 = sub_1C4851220(*(_QWORD *)(a1 + 48), v7);
      v47 = *(_QWORD *)(v8 + 304);
      v48 = *(_QWORD *)(v8 + 248);
      v49 = *(_QWORD *)(v48 + 40);
      *(_QWORD *)v47 = v48;
      *(_QWORD *)(v47 + 8) = v49;
      *(_OWORD *)(v47 + 16) = *(_OWORD *)(v8 + 288);
      *(_QWORD *)(v47 + 32) = v8 + 312;
      llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v47);
      *(_DWORD *)(v47 + 184) = 0;
      v50 = *(_QWORD *)(v8 + 256);
      v30 = *(_BYTE *)(v50 + 16) == 0;
      v51 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v50 + 24) + 16 * (*(_DWORD *)(v9 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                               + 34);
      v53 = !v30 && v51 != 0;
      llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v8 + 304), (llvm::LiveInterval *)v9, v53);
      llvm::LiveIntervals::computeDeadValues(v8, v9, 0);
    }
    if (*(_BYTE *)(a1 + 24))
    {
      v10 = *(_QWORD *)(v9 + 104);
      if (v10)
      {
        v11 = 0;
        v12 = v4 & 0xFFFFFFFFFFFFFFF8;
        while (1)
        {
          v13 = *(unsigned int *)(a1 + 12);
          v14 = *(_QWORD *)(v10 + 112);
          if ((_DWORD)v13)
            v14 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 64) + 216))(*(_QWORD *)(a1 + 64), v13, v14);
          if ((*(_QWORD *)(a1 + 16) & v14) == 0)
            goto LABEL_42;
          v15 = *(_DWORD *)(v10 + 8);
          v16 = *(_QWORD **)v10;
          if (!v15)
            break;
          v17 = v16[3 * v15 - 2];
          v18 = *(_DWORD *)(v12 + 24);
          v19 = (v17 >> 1) & 3 | *(_DWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 24);
          v20 = *(_QWORD **)v10;
          v21 = *(unsigned int *)(v10 + 8);
          if (v18 >= v19)
            goto LABEL_27;
          do
          {
            v22 = v21 >> 1;
            v23 = v20[3 * (v21 >> 1) + 1];
            LODWORD(v23) = (v23 >> 1) & 3 | *(_DWORD *)((v23 & 0xFFFFFFFFFFFFFFF8) + 24);
            v21 -= (v21 >> 1) + 1;
            v24 = v18 >= v23;
            if (v18 >= v23)
              v25 = v22 + 1;
            else
              v25 = 0;
            v20 += 3 * v25;
            if (!v24)
              v21 = v22;
          }
          while (v21);
LABEL_28:
          v26 = &v16[3 * v15];
          if (v20 == v26
            || ((*v20 >> 1) & 3 | *(_DWORD *)((*v20 & 0xFFFFFFFFFFFFFFF8) + 24)) > *(_DWORD *)(v12 + 24))
          {
            v27 = 0;
            if (!v11)
              goto LABEL_41;
          }
          else
          {
            v27 = v20[2];
            v28 = v20[1] & 0xFFFFFFFFFFFFFFF8;
            v29 = v20 + 3;
            v30 = v12 == v28 && v29 == v26;
            if (!v30 && *(_QWORD *)(v27 + 8) == v12)
              v27 = 0;
            if (!v11)
            {
LABEL_41:
              v11 = v27;
              goto LABEL_42;
            }
          }
          if (v27 && v11 != v27)
            return a2;
LABEL_42:
          v10 = *(_QWORD *)(v10 + 104);
          if (!v10)
            goto LABEL_62;
        }
        v15 = 0;
LABEL_27:
        v20 = &v16[3 * v15];
        goto LABEL_28;
      }
    }
    v31 = v4 & 0xFFFFFFFFFFFFFFF8;
    v32 = *(_DWORD *)(v9 + 8);
    v33 = *(_QWORD **)v9;
    if (!v32)
    {
      v32 = 0;
LABEL_54:
      v37 = &v33[3 * v32];
      goto LABEL_55;
    }
    v34 = v33[3 * v32 - 2];
    v35 = *(_DWORD *)(v31 + 24);
    v36 = (v34 >> 1) & 3 | *(_DWORD *)((v34 & 0xFFFFFFFFFFFFFFF8) + 24);
    v37 = *(_QWORD **)v9;
    v38 = *(unsigned int *)(v9 + 8);
    if (v35 >= v36)
      goto LABEL_54;
    do
    {
      v39 = v38 >> 1;
      v40 = v37[3 * (v38 >> 1) + 1];
      LODWORD(v40) = (v40 >> 1) & 3 | *(_DWORD *)((v40 & 0xFFFFFFFFFFFFFFF8) + 24);
      v38 -= (v38 >> 1) + 1;
      v41 = v35 >= v40;
      if (v35 >= v40)
        v42 = v39 + 1;
      else
        v42 = 0;
      v37 += 3 * v42;
      if (!v41)
        v38 = v39;
    }
    while (v38);
LABEL_55:
    v43 = &v33[3 * v32];
    if (v37 == v43
      || ((*v37 >> 1) & 3 | *(_DWORD *)((*v37 & 0xFFFFFFFFFFFFFFF8) + 24)) > *(_DWORD *)(v31 + 24))
    {
      return 0;
    }
    v11 = v37[2];
    v44 = v37[1] & 0xFFFFFFFFFFFFFFF8;
    v45 = v37 + 3;
    v46 = v31 == v44 && v45 == v43;
    if (!v46 && *(_QWORD *)(v11 + 8) == v31)
      return 0;
LABEL_62:
    a2 = v11;
    if (!v11)
      return a2;
  }
}

void sub_1C5256890()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C52568A4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E8149B98;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1C52568E4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8149B98;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_1C525690C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  double result;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28[2];
  _BYTE v29[48];
  void *v30;
  uint64_t v31;
  _BYTE v32[16];
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _BYTE v36[64];
  uint64_t *v37[9];
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t *v42[9];
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47[2];
  _QWORD v48[17];

  v48[16] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 8))
  {
    v5 = a1[2];
    v4 = a1[3];
    v6 = a1[1];
    v28[0] = v29;
    v28[1] = (void *)0x200000000;
    v30 = v32;
    v31 = 0x200000000;
    v33 = 0;
    sub_1C50E31B0((uint64_t)v28, v4, v5);
    v7 = *(_QWORD *)(a2 + 112);
    v8 = (int *)a1[4];
    v47[0] = v48;
    v47[1] = (void *)0x1000000000;
    sub_1C525433C((uint64_t)v42, (uint64_t)v28, v8[3], v8[5], v7, (uint64_t)v47, (uint64_t)v8, *(_QWORD *)(v6 + 288), *(_QWORD *)(v6 + 272), 1, 1);
    sub_1C525433C((uint64_t)v37, a2, v8[2], v8[4], v7, (uint64_t)v47, (uint64_t)v8, *(_QWORD *)(v6 + 288), *(_QWORD *)(v6 + 272), 1, 1);
    v9 = *((unsigned int *)v37[0] + 18);
    if ((_DWORD)v9)
    {
      v10 = 0;
      v11 = 0;
      v12 = v9 - 1;
      do
      {
        sub_1C52559F0((uint64_t)v37, v11, v42);
        v13 = *(_DWORD *)((char *)v40 + v10) == 5 || v12 == v11++;
        v10 += 48;
      }
      while (!v13);
    }
    v14 = *((unsigned int *)v42[0] + 18);
    if ((_DWORD)v14)
    {
      v15 = 0;
      v16 = 0;
      v17 = v14 - 1;
      do
      {
        sub_1C52559F0((uint64_t)v42, v16, v37);
        v18 = *(_DWORD *)((char *)v45 + v15) == 5 || v17 == v16++;
        v15 += 48;
      }
      while (!v18);
    }
    sub_1C525440C((uint64_t *)v37, v42);
    sub_1C525440C((uint64_t *)v42, v37);
    v34 = v36;
    v35 = 0x800000000;
    sub_1C5254F3C((uint64_t *)v37, (uint64_t *)v42, (uint64_t)&v34, 0);
    sub_1C5254F3C((uint64_t *)v42, (uint64_t *)v37, (uint64_t)&v34, 0);
    sub_1C5256CC8((uint64_t *)v37);
    sub_1C5256CC8((uint64_t *)v42);
    llvm::LiveRange::join((uint64_t *)a2, (unsigned int *)v28, (uint64_t)v38, (uint64_t)v43, (uint64_t *)v47);
    v20 = v35;
    if ((_DWORD)v35)
    {
      v21 = *(_QWORD *)(v6 + 288);
      v22 = (unint64_t *)v34;
      v23 = *(_QWORD *)(v21 + 304);
      v24 = *(_QWORD *)(v21 + 248);
      *(_QWORD *)v23 = v24;
      *(_QWORD *)(v23 + 8) = *(_QWORD *)(v24 + 40);
      *(_OWORD *)(v23 + 16) = *(_OWORD *)(v21 + 288);
      *(_QWORD *)(v23 + 32) = v21 + 312;
      llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v23);
      *(_DWORD *)(v23 + 184) = 0;
      v25 = 8 * v20;
      do
      {
        v26 = *v22++;
        llvm::LiveRangeCalc::extend(*(llvm::LiveRangeCalc **)(v21 + 304), (uint64_t *)a2, v26, 0, 0, 0);
        v25 -= 8;
      }
      while (v25);
    }
    if (v34 != v36)
      free(v34);
    if (v40 != &v41)
      free(v40);
    if (v38 != &v39)
      free(v38);
    if (v45 != &v46)
      free(v45);
    if (v43 != &v44)
      free(v43);
    if (v47[0] != v48)
      free(v47[0]);
    v27 = v33;
    v33 = 0;
    if (v27)
    {
      sub_1C47655E8(v27, *(_QWORD **)(v27 + 8));
      MEMORY[0x1CAA32FC0](v27, 0x1020C4062D53EE8);
    }
    if (v30 != v32)
      free(v30);
    if (v28[0] != v29)
      free(v28[0]);
  }
  else
  {
    *(_QWORD *)&result = sub_1C50E31B0(a2, a1[3], a1[2]).n128_u64[0];
  }
  return result;
}

uint64_t *sub_1C5256CC8(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  uint64_t *v12;
  uint64_t v13;

  v1 = *(unsigned int *)(*result + 72);
  if ((_DWORD)v1)
  {
    v2 = result;
    v3 = 0;
    v4 = 0;
    v5 = 48 * v1;
    do
    {
      v6 = (int *)(v2[15] + v4);
      v7 = *v6;
      v8 = *((unsigned __int8 *)v6 + 40);
      v9 = *((unsigned __int8 *)v6 + 41);
      if (v7)
        v10 = 1;
      else
        v10 = v8 == 0;
      if (!v10 && v9 != 0)
      {
        v12 = (uint64_t *)*v2;
        v13 = *(_QWORD *)(*(_QWORD *)(*v2 + 64) + v3);
        *(_QWORD *)(v13 + 8) = 0;
        result = llvm::LiveRange::removeValNo(v12, v13);
      }
      v4 += 48;
      v3 += 8;
    }
    while (v5 != v4);
  }
  return result;
}

uint64_t sub_1C5256D50(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 120);
  v4 = v3 + 48 * a2;
  v7 = *(unsigned __int8 *)(v4 + 41);
  v6 = (_BYTE *)(v4 + 41);
  v5 = v7;
  if (v7)
    return v5 != 0;
  v8 = v3 + 48 * a2;
  v10 = *(unsigned __int8 *)(v8 + 42);
  v9 = (_BYTE *)(v8 + 42);
  if (v10)
    return v5 != 0;
  if ((*(_DWORD *)(v3 + 48 * a2) - 1) >= 2)
    return 0;
  *v9 = 1;
  result = sub_1C5256D50(a3, **(unsigned int **)(v3 + 48 * a2 + 32), a1);
  *v6 = result;
  return result;
}

_DWORD *sub_1C5256DE4(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C620D9C0(a1, v4, v4 + 40 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 40 * v10;
    do
    {
      *result = -1;
      result += 10;
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

void sub_1C5256EAC()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5256EC0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E8149BE0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1C5256F00(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8149BE0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C5256F28(uint64_t a1, int *a2)
{
  return sub_1C5256F40(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 600), *(_DWORD *)(*(_QWORD *)(a1 + 8) + 616), *a2, *(_QWORD *)(a1 + 16), *(uint64_t **)(a1 + 24), *(_QWORD *)(a1 + 32));
}

uint64_t sub_1C5256F40(uint64_t result, unsigned int a2, int a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  BOOL v18;
  _QWORD *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;

  if (!a2)
  {
LABEL_7:
    v11 = result + 32 * a2;
    goto LABEL_8;
  }
  v10 = (37 * a3) & (a2 - 1);
  v11 = result + 32 * v10;
  v12 = *(_DWORD *)v11;
  if (*(_DWORD *)v11 != a3)
  {
    v13 = 1;
    while (v12 != -1)
    {
      v14 = v10 + v13++;
      v10 = v14 & (a2 - 1);
      v12 = *(_DWORD *)(result + 32 * v10);
      if (v12 == a3)
      {
        v11 = result + 32 * v10;
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (result + 32 * a2 != v11)
  {
    v16 = *(uint64_t **)(v11 + 8);
    v15 = *(uint64_t **)(v11 + 16);
    if (v16 != v15)
    {
      v17 = 0;
      v18 = 0;
      v19 = *(_QWORD **)a4;
      do
      {
        if (v19 == (_QWORD *)(*(_QWORD *)a4 + 24 * *(unsigned int *)(a4 + 8)))
          return result;
        v20 = (*v16 >> 1) & 3 | *(_DWORD *)((*v16 & 0xFFFFFFFFFFFFFFF8) + 24);
        if (v20 >= (*(_DWORD *)((v19[1] & 0xFFFFFFFFFFFFFFF8) + 24) | (v19[1] >> 1) & 3))
        {
          v19 += 3;
          continue;
        }
        if (v20 < ((*v19 >> 1) & 3 | *(_DWORD *)((*v19 & 0xFFFFFFFFFFFFFFF8) + 24)))
        {
LABEL_41:
          v16 += 2;
          continue;
        }
        result = v16[1];
        v21 = *(_QWORD *)(result + 32);
        if (**(_WORD **)(result + 16) != 14)
        {
          v23 = v21 + 32;
          goto LABEL_18;
        }
        v22 = *(unsigned int *)(result + 40);
        if ((_DWORD)v22 == 2)
        {
LABEL_21:
          v24 = 0;
        }
        else
        {
          v23 = v21 + 32 * v22;
          v21 += 64;
LABEL_18:
          while (*(_BYTE *)v21 || *(_DWORD *)(v21 + 4) != a3)
          {
            v21 += 32;
            if (v21 == v23)
              goto LABEL_21;
          }
          v24 = 1;
        }
        if (v17 == *v16)
        {
          v25 = v18;
          goto LABEL_39;
        }
        v26 = *((_DWORD *)a5 + 2);
        v27 = *a5;
        if (v26)
        {
          v28 = *(_QWORD *)(v27 + 24 * v26 - 16);
          v29 = (v28 >> 1) & 3 | *(_DWORD *)((v28 & 0xFFFFFFFFFFFFFFF8) + 24);
          v30 = *a5;
          v31 = *((unsigned int *)a5 + 2);
          if (v20 < v29)
          {
            do
            {
              v32 = v31 >> 1;
              v33 = *(_QWORD *)(v30 + 24 * (v31 >> 1) + 8);
              LODWORD(v33) = (v33 >> 1) & 3 | *(_DWORD *)((v33 & 0xFFFFFFFFFFFFFFF8) + 24);
              v31 -= (v31 >> 1) + 1;
              v34 = v20 >= v33;
              if (v20 >= v33)
                v35 = v32 + 1;
              else
                v35 = 0;
              v30 += 24 * v35;
              if (!v34)
                v31 = v32;
            }
            while (v31);
            goto LABEL_36;
          }
        }
        else
        {
          v26 = 0;
        }
        v30 = v27 + 24 * v26;
LABEL_36:
        if (v30 == v27 + 24 * v26)
        {
          v25 = 1;
        }
        else
        {
          v18 = *(_DWORD *)(*(_QWORD *)(a6 + 120) + 48 * **(unsigned int **)(v30 + 16)) > 1u;
          v17 = *v16;
          v25 = v18;
        }
LABEL_39:
        if ((v24 & v25) != 1)
          goto LABEL_41;
        result = sub_1C61FACB0(result);
        v15 = *(uint64_t **)(v11 + 16);
      }
      while (v16 != v15);
    }
  }
  return result;
}

void sub_1C52571CC()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C52571E0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E8149C28;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1C5257220(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8149C28;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C5257248(uint64_t a1, int *a2)
{
  return sub_1C5256F40(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 600), *(_DWORD *)(*(_QWORD *)(a1 + 8) + 616), *a2, *(_QWORD *)(a1 + 16), *(uint64_t **)(a1 + 24), *(_QWORD *)(a1 + 32));
}

uint64_t sub_1C5257260(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  unsigned __int8 v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;

  if (a4)
  {
    v8 = 0;
    v9 = 0;
    v10 = (_QWORD *)(a3 + 16);
    v11 = 24 * a4;
    do
    {
      if (*v10 == a5)
      {
        v13 = *((_OWORD *)v10 - 1);
        v14 = a2;
        if ((~*(_DWORD *)(llvm::LiveRange::addSegment(a1, (uint64_t)&v13) + 8) & 6) == 0)
          v9 = 1;
        v8 = 1;
      }
      v10 += 3;
      v11 -= 24;
    }
    while (v11);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  return v8 | (v9 << 8);
}

void sub_1C5257310()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5257324(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E8149C70;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_1C525736C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E8149C70;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C525739C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t result;

  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD **)a2;
    v6 = *(_QWORD *)a2 + 24 * v4;
    v7 = *(_DWORD *)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFF8) + 24) | (*(_QWORD *)(a1 + 24) >> 1) & 3;
    if (v7 >= ((*(_QWORD *)(v6 - 16) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(v6 - 16) & 0xFFFFFFFFFFFFFFF8)
                                                                          + 24)))
      goto LABEL_11;
    do
    {
      v8 = v5;
      v9 = v4 >> 1;
      v10 = v5[3 * (v4 >> 1) + 1];
      LODWORD(v10) = (v10 >> 1) & 3 | *(_DWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 24);
      v4 -= (v4 >> 1) + 1;
      v11 = v7 >= v10;
      if (v7 >= v10)
        v12 = v9 + 1;
      else
        v12 = 0;
      v5 = &v8[3 * v12];
      if (!v11)
        v4 = v9;
    }
    while (v4);
    if (v5 == (_QWORD *)v6 || ((*v5 >> 1) & 3 | *(_DWORD *)((*v5 & 0xFFFFFFFFFFFFFFF8) + 24)) > v7)
LABEL_11:
      v13 = 0;
    else
      v13 = v8[3 * v12 + 2];
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 24);
    v13 = sub_1C484358C(*(_QWORD *)(a1 + 8), 16, 3);
    v15 = *(unsigned int *)(a2 + 72);
    v16 = *(_DWORD *)(a2 + 76);
    *(_DWORD *)v13 = v15;
    *(_QWORD *)(v13 + 8) = v14;
    if (v15 >= v16)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 64, a2 + 80, v15 + 1, 8);
      LODWORD(v15) = *(_DWORD *)(a2 + 72);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v15) = v13;
    ++*(_DWORD *)(a2 + 72);
  }
  result = sub_1C5257260(a2, v13, **(_QWORD **)(a1 + 16), *(_DWORD *)(*(_QWORD *)(a1 + 16) + 8), *(_QWORD *)(a1 + 32));
  **(_BYTE **)(a1 + 40) |= BYTE1(result);
  if ((result & 1) != 0)
    *(_QWORD *)(v13 + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  return result;
}

uint64_t sub_1C525751C(uint64_t result, uint64_t a2, uint64_t a3, int *a4, unsigned int a5)
{
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  _QWORD *v31;
  unsigned int v32;
  unsigned int v33;

  v5 = *a4;
  v6 = *(_QWORD *)(a2 + 104);
  v7 = a3 & 0xFFFFFFFFFFFFFFF8;
  if (v6)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 272) + 232) + 8 * a5) ^ ((uint64_t)(v5 << 7) >> 31);
    v9 = (a3 >> 1) & 3;
    while (1)
    {
      if ((*(_QWORD *)(v6 + 112) & v8) == 0)
        goto LABEL_17;
      v10 = *(_DWORD *)(v6 + 8);
      v11 = *(_QWORD **)v6;
      if (!v10)
        break;
      v12 = v11[3 * v10 - 2];
      v13 = *(_DWORD *)(v7 + 24) | v9;
      v14 = (v12 >> 1) & 3 | *(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 24);
      v15 = *(_QWORD **)v6;
      v16 = *(unsigned int *)(v6 + 8);
      if (v13 >= v14)
        goto LABEL_14;
      do
      {
        v17 = v16 >> 1;
        v18 = v15[3 * (v16 >> 1) + 1];
        LODWORD(v18) = (v18 >> 1) & 3 | *(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 24);
        v16 -= (v16 >> 1) + 1;
        v19 = v13 >= v18;
        if (v13 >= v18)
          v20 = v17 + 1;
        else
          v20 = 0;
        v15 += 3 * v20;
        if (!v19)
          v16 = v17;
      }
      while (v16);
LABEL_15:
      if (v15 != &v11[3 * v10]
        && ((*v15 >> 1) & 3 | *(_DWORD *)((*v15 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v7 + 24) | v9))
      {
        return result;
      }
LABEL_17:
      v6 = *(_QWORD *)(v6 + 104);
      if (!v6)
        goto LABEL_18;
    }
    v10 = 0;
LABEL_14:
    v15 = &v11[3 * v10];
    goto LABEL_15;
  }
LABEL_18:
  *a4 = v5 | 0x10000000;
  v21 = *(_DWORD *)(a2 + 8);
  v22 = *(_QWORD **)a2;
  if (v21)
  {
    v23 = v22[3 * v21 - 2];
    v24 = *(_DWORD *)(v7 + 24);
    if (v24 < ((v23 >> 1) & 3 | *(_DWORD *)((v23 & 0xFFFFFFFFFFFFFFF8) + 24)))
    {
      v25 = *(_QWORD **)a2;
      v26 = *(unsigned int *)(a2 + 8);
      do
      {
        v27 = v26 >> 1;
        v28 = v25[3 * (v26 >> 1) + 1];
        LODWORD(v28) = (v28 >> 1) & 3 | *(_DWORD *)((v28 & 0xFFFFFFFFFFFFFFF8) + 24);
        v26 -= (v26 >> 1) + 1;
        v29 = v24 >= v28;
        if (v24 >= v28)
          v30 = v27 + 1;
        else
          v30 = 0;
        v25 += 3 * v30;
        if (!v29)
          v26 = v27;
      }
      while (v26);
      goto LABEL_30;
    }
  }
  else
  {
    v21 = 0;
  }
  v25 = &v22[3 * v21];
LABEL_30:
  v31 = &v22[3 * v21];
  if (v25 == v31)
    goto LABEL_41;
  v32 = *(_DWORD *)((*v25 & 0xFFFFFFFFFFFFFFF8) + 24);
  v33 = *(_DWORD *)(v7 + 24);
  if (((*v25 >> 1) & 3 | v32) > v33 || v7 != (v25[1] & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_35;
  v25 += 3;
  if (v25 == v31)
  {
LABEL_41:
    *(_BYTE *)(result + 656) = 1;
    return result;
  }
  v32 = *(_DWORD *)((*v25 & 0xFFFFFFFFFFFFFFF8) + 24);
LABEL_35:
  if (v33 < v32)
    goto LABEL_41;
  if ((~*((_DWORD *)v25 + 2) & 6) == 0 || v25[2] == 0)
    goto LABEL_41;
  return result;
}

uint64_t sub_1C5257728(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a2 < *a1;
}

__n128 sub_1C5257744(__n128 *a1, char **a2, _WORD *a3)
{
  __n128 result;
  char *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7FEE08, "terminal-rule", 0xDuLL);
  result = *a1;
  xmmword_1ED7FEE28 = (__int128)*a1;
  v7 = *a2;
  byte_1ED7FEE88 = **a2;
  byte_1ED7FEE99 = 1;
  byte_1ED7FEE98 = *v7;
  word_1ED7FEE12 = (32 * (*a3 & 3)) | word_1ED7FEE12 & 0xFF9F;
  return result;
}

__n128 sub_1C52577C8(__n128 *a1, int **a2, _WORD *a3)
{
  __n128 result;
  int *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7FEF88, "join-globalcopies", 0x11uLL);
  result = *a1;
  xmmword_1ED7FEFA8 = (__int128)*a1;
  v7 = *a2;
  dword_1ED7FF008 = **a2;
  byte_1ED7FF01C = 1;
  dword_1ED7FF018 = *v7;
  word_1ED7FEF92 = (32 * (*a3 & 3)) | word_1ED7FEF92 & 0xFF9F;
  return result;
}

uint64_t sub_1C525784C()
{
  int v1;
  int *v2;
  __n128 v3;
  int v4;

  v3.n128_u64[0] = (unint64_t)"Coalesce copies (default=true)";
  v3.n128_u64[1] = 30;
  LOBYTE(v1) = 1;
  v2 = &v1;
  v4 = 1;
  sub_1C6147A00((llvm::cl::Option *)&unk_1ED7FED48, "join-liveintervals", &v3, (_BYTE **)&v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7FED48, &dword_1C475E000);
  v3.n128_u64[0] = (unint64_t)"Apply the terminal rule";
  v3.n128_u64[1] = 23;
  LOBYTE(v1) = 0;
  v2 = &v1;
  v4 = 1;
  sub_1C620DB68(&v3, (char **)&v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7FEE08, &dword_1C475E000);
  v3.n128_u64[0] = (unint64_t)"Coalesce copies on split edges (default=subtarget)";
  v3.n128_u64[1] = 50;
  LODWORD(v2) = 1;
  sub_1C620DC0C((__int128 *)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7FEEC8, &dword_1C475E000);
  v3.n128_u64[0] = (unint64_t)"Coalesce copies that span blocks (default=subtarget)";
  v3.n128_u64[1] = 52;
  v4 = 0;
  v2 = &v4;
  v1 = 1;
  sub_1C620DCCC(&v3, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C506F830, &qword_1ED7FEF88, &dword_1C475E000);
  v3.n128_u64[0] = (unint64_t)"Verify machine instrs before and after register coalescing";
  v3.n128_u64[1] = 58;
  LODWORD(v2) = 1;
  sub_1C620DD70((__int128 *)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7FF048, &dword_1C475E000);
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"During rematerialization for a copy, if the def instruction has many other copy use"
                                     "s to be rematerialized, delay the multiple separate live interval update work and d"
                                     "o them all at once after all those rematerialization are done. It will save a lot o"
                                     "f repeated work. ";
  v3.n128_u64[1] = 266;
  v1 = 100;
  v2 = &v1;
  sub_1C6147F28((uint64_t)&unk_1ED7FF108, "late-remat-update-threshold", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7FF108, &dword_1C475E000);
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"If the valnos size of an interval is larger than the threshold, it is regarded as a"
                                     " large interval. ";
  v3.n128_u64[1] = 100;
  v1 = 100;
  v2 = &v1;
  sub_1C6147F28((uint64_t)&unk_1ED7FF1C8, "large-interval-size-threshold", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7FF1C8, &dword_1C475E000);
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"For a large interval, if it is coalesed with other live intervals many times more t"
                                     "han the threshold, stop its coalescing to control the compile time. ";
  v3.n128_u64[1] = 151;
  v1 = 100;
  v2 = &v1;
  sub_1C6147F28((uint64_t)&unk_1ED7FF288, "large-interval-freq-threshold", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7FF288, &dword_1C475E000);
}

llvm::raw_ostream *llvm::dumpRegSetPressure(llvm::raw_ostream *result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  llvm::raw_ostream *v5;
  uint64_t v6;
  char v7;
  llvm *v8;
  const char *v9;
  const char *v10;
  size_t v11;
  void *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;

  v3 = a2;
  if (!a2)
    goto LABEL_18;
  v5 = result;
  v6 = 0;
  v7 = 1;
  do
  {
    if (*((_DWORD *)v5 + v6))
    {
      v8 = llvm::dbgs(result);
      v9 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 304))(a3, v6);
      if (v9)
      {
        v10 = v9;
        v11 = strlen(v9);
        v12 = (void *)*((_QWORD *)v8 + 4);
        if (v11 <= *((_QWORD *)v8 + 3) - (_QWORD)v12)
        {
          if (v11)
          {
            memcpy(v12, v10, v11);
            *((_QWORD *)v8 + 4) += v11;
          }
        }
        else
        {
          llvm::raw_ostream::write(v8, v10, v11);
        }
      }
      v13 = (_BYTE *)*((_QWORD *)v8 + 4);
      if (*((_BYTE **)v8 + 3) == v13)
      {
        llvm::raw_ostream::write(v8, "=", 1uLL);
      }
      else
      {
        *v13 = 61;
        ++*((_QWORD *)v8 + 4);
      }
      result = sub_1C5E21910(v8, *((unsigned int *)v5 + v6), 0, 0, 0);
      v14 = (_BYTE *)*((_QWORD *)v8 + 4);
      if ((unint64_t)v14 >= *((_QWORD *)v8 + 3))
      {
        result = llvm::raw_ostream::write(v8, 10);
        v7 = 0;
      }
      else
      {
        v7 = 0;
        *((_QWORD *)v8 + 4) = v14 + 1;
        *v14 = 10;
      }
    }
    ++v6;
  }
  while (v3 != v6);
  if ((v7 & 1) != 0)
  {
LABEL_18:
    result = llvm::dbgs(result);
    v15 = (_BYTE *)*((_QWORD *)result + 4);
    if (*((_BYTE **)result + 3) == v15)
    {
      return llvm::raw_ostream::write(result, "\n", 1uLL);
    }
    else
    {
      *v15 = 10;
      ++*((_QWORD *)result + 4);
    }
  }
  return result;
}

BOOL llvm::RegPressureTracker::isTopClosed(llvm::RegPressureTracker *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 6);
  if (*((_BYTE *)this + 56))
    return *(_QWORD *)(v1 + 312) > 7uLL;
  else
    return *(_QWORD *)(v1 + 312) == 0;
}

BOOL llvm::RegPressureTracker::isBottomClosed(llvm::RegPressureTracker *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 6);
  if (*((_BYTE *)this + 56))
    return *(_QWORD *)(v1 + 320) > 7uLL;
  else
    return *(_QWORD *)(v1 + 320) == 0;
}

llvm *llvm::RegPressureDelta::dump(llvm::RegPressureDelta *this)
{
  llvm *v2;
  _QWORD *v3;
  llvm *v4;
  llvm *v5;
  void *v6;
  llvm *v7;
  llvm *v8;
  void *v9;
  llvm *v10;
  llvm *result;
  _WORD *v12;

  v2 = llvm::dbgs(this);
  v3 = (_QWORD *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v3 > 7uLL)
  {
    *v3 = 0x3D7373656378455BLL;
    *((_QWORD *)v2 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v2, "[Excess=", 8uLL);
  }
  v4 = llvm::PressureChange::dump(this);
  v5 = llvm::dbgs(v4);
  v6 = (void *)*((_QWORD *)v5 + 4);
  if (*((_QWORD *)v5 + 3) - (_QWORD)v6 > 0xDuLL)
  {
    qmemcpy(v6, ", CriticalMax=", 14);
    *((_QWORD *)v5 + 4) += 14;
  }
  else
  {
    llvm::raw_ostream::write(v5, ", CriticalMax=", 0xEuLL);
  }
  v7 = llvm::PressureChange::dump((llvm::RegPressureDelta *)((char *)this + 4));
  v8 = llvm::dbgs(v7);
  v9 = (void *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 0xCuLL)
  {
    qmemcpy(v9, ", CurrentMax=", 13);
    *((_QWORD *)v8 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(v8, ", CurrentMax=", 0xDuLL);
  }
  v10 = llvm::PressureChange::dump((llvm::RegPressureDelta *)((char *)this + 8));
  result = llvm::dbgs(v10);
  v12 = (_WORD *)*((_QWORD *)result + 4);
  if (*((_QWORD *)result + 3) - (_QWORD)v12 <= 1uLL)
    return llvm::raw_ostream::write(result, "]\n", 2uLL);
  *v12 = 2653;
  *((_QWORD *)result + 4) += 2;
  return result;
}

uint64_t llvm::RegPressureTracker::increaseRegPressure(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;

  if (!a3 && a4)
  {
    v5 = result;
    v6 = *(_QWORD **)(result + 24);
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v6 + 16) + 176))(*(_QWORD *)(*v6 + 16));
    v8 = v7;
    if ((a2 & 0x80000000) != 0)
    {
      v9 = *(_QWORD *)(v6[3] + 16 * (a2 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
      v10 = (unsigned int *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v7 + 320))(v7, v9);
      result = *(unsigned int *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v8 + 280))(v8, v9);
    }
    else
    {
      v10 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 328))(v7, a2);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 288))(v8, a2);
    }
    v11 = *v10;
    if ((_DWORD)v11 != -1)
    {
      v12 = *(_QWORD *)(v5 + 72);
      v13 = **(_QWORD **)(v5 + 48);
      v14 = v10 + 1;
      do
      {
        *(_DWORD *)(v12 + 4 * v11) += result;
        v15 = *(v14 - 1);
        v16 = *(_DWORD *)(v13 + 4 * v15);
        if (v16 <= *(_DWORD *)(v12 + 4 * v15))
          v16 = *(_DWORD *)(v12 + 4 * v15);
        *(_DWORD *)(v13 + 4 * v15) = v16;
        v17 = *v14++;
        v11 = v17;
      }
      while (v17 != -1);
    }
  }
  return result;
}

uint64_t llvm::RegPressureTracker::decreaseRegPressure(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;

  if (!a4 && a3)
  {
    v5 = result;
    v6 = *(_QWORD **)(result + 24);
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v6 + 16) + 176))(*(_QWORD *)(*v6 + 16));
    v8 = v7;
    if ((a2 & 0x80000000) != 0)
    {
      v9 = *(_QWORD *)(v6[3] + 16 * (a2 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
      v10 = (unsigned int *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v7 + 320))(v7, v9);
      result = *(unsigned int *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v8 + 280))(v8, v9);
    }
    else
    {
      v10 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 328))(v7, a2);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 288))(v8, a2);
    }
    v11 = *v10;
    if ((_DWORD)v11 != -1)
    {
      v12 = *(_QWORD *)(v5 + 72);
      v13 = v10 + 1;
      do
      {
        *(_DWORD *)(v12 + 4 * v11) -= result;
        v14 = *v13++;
        v11 = v14;
      }
      while (v14 != -1);
    }
  }
  return result;
}

uint64_t llvm::IntervalPressure::reset(uint64_t this)
{
  *(_QWORD *)(this + 312) = 0;
  *(_QWORD *)(this + 320) = 0;
  *(_QWORD *)(this + 8) = *(_QWORD *)this;
  *(_DWORD *)(this + 32) = 0;
  *(_DWORD *)(this + 176) = 0;
  return this;
}

uint64_t llvm::RegionPressure::reset(uint64_t this)
{
  *(_QWORD *)(this + 312) = 0;
  *(_QWORD *)(this + 320) = 0;
  *(_QWORD *)(this + 8) = *(_QWORD *)this;
  *(_DWORD *)(this + 32) = 0;
  *(_DWORD *)(this + 176) = 0;
  return this;
}

uint64_t llvm::IntervalPressure::openTop(uint64_t result, uint64_t a2)
{
  if (((*(_QWORD *)(result + 312) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(result + 312) & 0xFFFFFFFFFFFFFFF8)
                                                                       + 24)) > (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 24) | (a2 >> 1) & 3))
  {
    *(_QWORD *)(result + 312) = 0;
    *(_DWORD *)(result + 32) = 0;
  }
  return result;
}

uint64_t llvm::RegionPressure::openTop(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)(result + 312) == a2)
  {
    *(_QWORD *)(result + 312) = 0;
    *(_DWORD *)(result + 32) = 0;
  }
  return result;
}

uint64_t llvm::IntervalPressure::openBottom(uint64_t result, uint64_t a2)
{
  if (((*(_QWORD *)(result + 320) >> 1) & 3 | *(_DWORD *)((*(_QWORD *)(result + 320) & 0xFFFFFFFFFFFFFFF8)
                                                                       + 24)) <= (*(_DWORD *)((a2 & 0xFFFFFFFFFFFFFFF8)
                                                                                            + 24) | (a2 >> 1) & 3))
  {
    *(_QWORD *)(result + 320) = 0;
    *(_DWORD *)(result + 32) = 0;
  }
  return result;
}

uint64_t llvm::RegionPressure::openBottom(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)(result + 320) == a2)
  {
    *(_QWORD *)(result + 320) = 0;
    *(_DWORD *)(result + 32) = 0;
  }
  return result;
}

_DWORD *llvm::LiveRegSet::init(llvm::LiveRegSet *this, const llvm::MachineRegisterInfo *a2)
{
  _DWORD *result;
  int v5;
  size_t v6;
  unsigned int v7;

  result = (_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 16) + 176))(*(_QWORD *)(*(_QWORD *)a2 + 16));
  v5 = result[4];
  v6 = (*((_DWORD *)a2 + 8) + v5);
  v7 = *((_DWORD *)this + 38);
  if (v7 < v6 || v7 >> 2 > v6)
  {
    free(*((void **)this + 18));
    result = malloc_type_calloc(v6, 1uLL, 0x6D9A4F0CuLL);
    if (!result && ((_DWORD)v6 || (result = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    *((_QWORD *)this + 18) = result;
    *((_DWORD *)this + 38) = v6;
  }
  *((_DWORD *)this + 40) = v5;
  return result;
}

uint64_t llvm::LiveRegSet::clear(uint64_t this)
{
  *(_DWORD *)(this + 8) = 0;
  return this;
}

uint64_t llvm::RegPressureTracker::reset(uint64_t this)
{
  uint64_t *v1;
  uint64_t v2;

  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 80) = *(_QWORD *)(this + 72);
  *(_QWORD *)(this + 336) = *(_QWORD *)(this + 328);
  v1 = *(uint64_t **)(this + 48);
  v2 = *v1;
  v1[39] = 0;
  v1[40] = 0;
  v1[1] = v2;
  *((_DWORD *)v1 + 8) = 0;
  *((_DWORD *)v1 + 44) = 0;
  *(_DWORD *)(this + 104) = 0;
  *(_DWORD *)(this + 272) = 0;
  return this;
}

_DWORD *llvm::RegPressureTracker::init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, int a8)
{
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD *v22;
  _DWORD *v23;
  _DWORD *result;
  int v25;
  size_t v26;
  unsigned int v27;
  size_t v29;
  unsigned int v30;
  int v31;

  *(_QWORD *)(a1 + 32) = 0;
  v15 = (_QWORD *)(a1 + 32);
  v17 = a1 + 72;
  v16 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 80) = v16;
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a1 + 328);
  v18 = *(uint64_t **)(a1 + 48);
  v19 = *v18;
  v18[39] = 0;
  v18[40] = 0;
  v18[1] = v19;
  *((_DWORD *)v18 + 8) = 0;
  *((_DWORD *)v18 + 44) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(_QWORD *)a1 = a2;
  v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(a1 + 8) = v20;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)a1 + 40);
  *(_QWORD *)(a1 + 40) = a5;
  *(_BYTE *)(a1 + 57) = a8;
  *(_BYTE *)(a1 + 58) = a7;
  if (*(_BYTE *)(a1 + 56))
    *v15 = a4;
  *(_QWORD *)(a1 + 64) = a6;
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 296))(v20);
  v31 = 0;
  sub_1C522E4AC(v17, v21, &v31);
  v22 = *(_QWORD **)(a1 + 48);
  if (v22 != (_QWORD *)v17)
    sub_1C4FCE520(v22, *(char **)(a1 + 72), *(char **)(a1 + 80), (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 2);
  v23 = *(_DWORD **)(a1 + 24);
  result = (_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v23 + 16) + 176))(*(_QWORD *)(*(_QWORD *)v23 + 16));
  v25 = result[4];
  v26 = (v23[8] + v25);
  v27 = *(_DWORD *)(a1 + 248);
  if (v27 < v26 || v27 >> 2 > v26)
  {
    free(*(void **)(a1 + 240));
    result = malloc_type_calloc(v26, 1uLL, 0x6D9A4F0CuLL);
    if (!result && ((_DWORD)v26 || (result = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_22:
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    *(_QWORD *)(a1 + 240) = result;
    *(_DWORD *)(a1 + 248) = v26;
  }
  *(_DWORD *)(a1 + 256) = v25;
  if (a8)
  {
    v29 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + 32);
    v30 = *(_DWORD *)(a1 + 320);
    if (v30 < v29 || v30 >> 2 > v29)
    {
      free(*(void **)(a1 + 312));
      result = malloc_type_calloc(v29, 1uLL, 0x6D9A4F0CuLL);
      if (!result)
      {
        if ((_DWORD)v29)
          goto LABEL_22;
        result = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        if (!result)
          goto LABEL_22;
      }
      *(_QWORD *)(a1 + 312) = result;
      *(_DWORD *)(a1 + 320) = v29;
    }
  }
  return result;
}

unint64_t llvm::RegPressureTracker::getCurrSlot(llvm::RegPressureTracker *this)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v7;
  __int16 v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;

  v1 = *((_QWORD *)this + 8);
  v2 = *((_QWORD *)this + 5);
  v3 = v2 + 48;
  if (v1 != v2 + 48)
  {
    while (1)
    {
      v4 = **(unsigned __int16 **)(v1 + 16);
      if ((v4 - 13) >= 5 && v4 != 23)
        break;
      if ((*(_BYTE *)v1 & 4) == 0)
      {
        while ((*(_WORD *)(v1 + 44) & 8) != 0)
          v1 = *(_QWORD *)(v1 + 8);
      }
      v1 = *(_QWORD *)(v1 + 8);
      if (v1 == v3)
        return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 288) + 392)
                         + 16 * *(unsigned int *)(v2 + 24)
                         + 8);
    }
  }
  if (v3 == v1)
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 288) + 392)
                     + 16 * *(unsigned int *)(v2 + 24)
                     + 8);
  v7 = *(_QWORD *)(*((_QWORD *)this + 4) + 288);
  v8 = *(_WORD *)(v1 + 44);
  v9 = v1;
  if ((v8 & 0xC) != 0)
  {
    if ((v8 & 4) != 0)
    {
      v9 = v1;
      do
        v9 = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v9 + 44) & 4) != 0);
    }
    if ((v8 & 8) != 0)
    {
      do
        v1 = *(_QWORD *)(v1 + 8);
      while ((*(_WORD *)(v1 + 44) & 8) != 0);
    }
  }
  v10 = *(_QWORD *)(v1 + 8);
  if (v9 != v10)
  {
    while (1)
    {
      v11 = **(unsigned __int16 **)(v9 + 16);
      v12 = v11 > 0x17;
      v13 = (1 << v11) & 0x83E000;
      if (v12 || v13 == 0)
        break;
      v9 = *(_QWORD *)(v9 + 8);
      if (v9 == v10)
      {
        v9 = v10;
        break;
      }
    }
  }
  v15 = *(_QWORD *)(v7 + 368);
  v16 = *(unsigned int *)(v7 + 384);
  if (!(_DWORD)v16)
    goto LABEL_27;
  LODWORD(v17) = ((v9 >> 4) ^ (v9 >> 9)) & (v16 - 1);
  v18 = (uint64_t *)(v15 + 16 * v17);
  v19 = *v18;
  if (v9 != *v18)
  {
    v20 = 1;
    while (v19 != -4096)
    {
      v21 = v17 + v20++;
      v17 = v21 & (v16 - 1);
      v19 = *(_QWORD *)(v15 + 16 * v17);
      if (v9 == v19)
      {
        v18 = (uint64_t *)(v15 + 16 * v17);
        return v18[1] & 0xFFFFFFFFFFFFFFF8 | 4;
      }
    }
LABEL_27:
    v18 = (uint64_t *)(v15 + 16 * v16);
  }
  return v18[1] & 0xFFFFFFFFFFFFFFF8 | 4;
}

uint64_t sub_1C525858C(uint64_t result, uint64_t a2)
{
  int v2;

  if (result != a2)
  {
    while (1)
    {
      v2 = **(unsigned __int16 **)(result + 16);
      if ((v2 - 13) >= 5 && v2 != 23)
        break;
      if ((*(_BYTE *)result & 4) == 0)
      {
        while ((*(_WORD *)(result + 44) & 8) != 0)
          result = *(_QWORD *)(result + 8);
      }
      result = *(_QWORD *)(result + 8);
      if (result == a2)
        return a2;
    }
  }
  return result;
}

unsigned int *llvm::RegPressureTracker::closeTop(llvm::RegPressureTracker *this)
{
  unint64_t CurrSlot;
  uint64_t v3;
  unint64_t v4;

  if (*((_BYTE *)this + 56))
  {
    CurrSlot = llvm::RegPressureTracker::getCurrSlot(this);
    v3 = *((_QWORD *)this + 6);
    *(_QWORD *)(v3 + 312) = CurrSlot;
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 6) + 312) = *((_QWORD *)this + 8);
    v3 = *((_QWORD *)this + 6);
  }
  v4 = *((unsigned int *)this + 26);
  if (*(_DWORD *)(v3 + 36) < v4)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 24, v3 + 40, v4, 16);
    v3 = *((_QWORD *)this + 6);
  }
  return sub_1C5258650((unsigned int *)this + 24, v3 + 24);
}

unsigned int *sub_1C5258650(unsigned int *result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;

  v2 = result[2];
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = a2 + 16;
    v6 = 16 * v2;
    v7 = (_QWORD *)(*(_QWORD *)result + 8);
    do
    {
      v8 = *v7;
      if (*v7)
      {
        v9 = v4[40];
        v10 = *((_DWORD *)v7 - 2);
        v11 = v10 >= v9;
        v12 = (v10 - v9) | 0x80000000;
        if (v11)
          v13 = v12;
        else
          v13 = v10;
        v14 = *(unsigned int *)(a2 + 8);
        if (v14 >= *(unsigned int *)(a2 + 12))
        {
          result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v5, v14 + 1, 16);
          v14 = *(unsigned int *)(a2 + 8);
        }
        v15 = (_QWORD *)(*(_QWORD *)a2 + 16 * v14);
        *v15 = v13;
        v15[1] = v8;
        ++*(_DWORD *)(a2 + 8);
      }
      v7 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  return result;
}

unsigned int *llvm::RegPressureTracker::closeBottom(llvm::RegPressureTracker *this)
{
  unint64_t CurrSlot;
  uint64_t v3;
  unint64_t v4;

  if (*((_BYTE *)this + 56))
  {
    CurrSlot = llvm::RegPressureTracker::getCurrSlot(this);
    v3 = *((_QWORD *)this + 6);
    *(_QWORD *)(v3 + 320) = CurrSlot;
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 6) + 320) = *((_QWORD *)this + 8);
    v3 = *((_QWORD *)this + 6);
  }
  v4 = *((unsigned int *)this + 26);
  if (*(_DWORD *)(v3 + 180) < v4)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 168, v3 + 184, v4, 16);
    v3 = *((_QWORD *)this + 6);
  }
  return sub_1C5258650((unsigned int *)this + 24, v3 + 168);
}

unsigned int *llvm::RegPressureTracker::closeRegion(unsigned int *this)
{
  unsigned int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v1 = this;
  v2 = *((_QWORD *)this + 6);
  if (!*((_BYTE *)this + 56))
  {
    v5 = *(_QWORD *)(v2 + 320);
    if (*(_QWORD *)(v2 + 312))
    {
      if (v5)
        return this;
      *(_QWORD *)(v2 + 312) = *((_QWORD *)this + 8);
      v2 = *((_QWORD *)this + 6);
      goto LABEL_5;
    }
    if (!v5)
      return this;
    return llvm::RegPressureTracker::closeBottom((llvm::RegPressureTracker *)this);
  }
  v3 = *(_QWORD *)(v2 + 320);
  if (*(_QWORD *)(v2 + 312) > 7uLL)
  {
    if (v3 > 7)
      return this;
    return llvm::RegPressureTracker::closeBottom((llvm::RegPressureTracker *)this);
  }
  if (v3 <= 7)
    return this;
  *(_QWORD *)(v2 + 312) = llvm::RegPressureTracker::getCurrSlot((llvm::RegPressureTracker *)this);
LABEL_5:
  v4 = v1[26];
  if (*(_DWORD *)(v2 + 36) < v4)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v2 + 24, v2 + 40, v4, 16);
    v2 = *((_QWORD *)v1 + 6);
  }
  return sub_1C5258650(v1 + 24, v2 + 24);
}

int *llvm::RegPressureTracker::initLiveThru(llvm::RegPressureTracker *this, const llvm::RegPressureTracker *a2)
{
  uint64_t *v4;
  unsigned int v5;
  int *result;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int *v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  int v24;

  v4 = (uint64_t *)((char *)this + 328);
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 296))(*((_QWORD *)this + 1));
  v24 = 0;
  result = sub_1C522E4AC((uint64_t)v4, v5, &v24);
  v7 = *((_QWORD *)this + 6);
  v8 = *(unsigned int *)(v7 + 176);
  if ((_DWORD)v8)
  {
    v9 = *(int **)(v7 + 168);
    v10 = &v9[4 * v8];
    do
    {
      v11 = *v9;
      if (*v9 < 0)
      {
        v12 = v11 & 0x7FFFFFFF;
        v13 = *(unsigned __int8 *)(*((_QWORD *)a2 + 39) + v12);
        v14 = *((_DWORD *)a2 + 68);
        if (v14 <= v13)
          goto LABEL_7;
        while (((*(_DWORD *)(*((_QWORD *)a2 + 33) + 4 * v13) ^ v11) & 0x7FFFFFFF) != 0)
        {
          v13 += 256;
          if (v13 >= v14)
            goto LABEL_7;
        }
        if (v14 == v13)
        {
LABEL_7:
          if (*((_QWORD *)v9 + 1))
          {
            v15 = (_QWORD *)*((_QWORD *)this + 3);
            v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v15 + 16) + 176))(*(_QWORD *)(*v15 + 16));
            v17 = *(_QWORD *)(v15[3] + 16 * v12) & 0xFFFFFFFFFFFFFFF8;
            v18 = (unsigned int *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v16 + 320))(v16, v17);
            result = (int *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v16 + 280))(v16, v17);
            v19 = *v18;
            if ((_DWORD)v19 != -1)
            {
              v20 = *result;
              v21 = *v4;
              v22 = v18 + 1;
              do
              {
                *(_DWORD *)(v21 + 4 * v19) += v20;
                v23 = *v22++;
                v19 = v23;
              }
              while (v23 != -1);
            }
          }
        }
      }
      v9 += 4;
    }
    while (v9 != v10);
  }
  return result;
}

void *llvm::RegisterOperands::collect(void *this, const llvm::MachineInstr *a2, const llvm::TargetRegisterInfo *a3, const llvm::MachineRegisterInfo *a4, int a5, char a6)
{
  uint64_t v7;
  __int16 v8;
  const llvm::MachineInstr *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  int *v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int *v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[3];
  char v53;

  v7 = (uint64_t)this;
  v52[0] = this;
  v52[1] = a3;
  v52[2] = a4;
  v53 = a6;
  v8 = *((_WORD *)a2 + 22);
  v9 = a2;
  if (!a5)
  {
    if ((v8 & 4) != 0)
    {
      v9 = a2;
      do
        v9 = (const llvm::MachineInstr *)(*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8);
      while ((*((_WORD *)v9 + 22) & 4) != 0);
    }
    v26 = *((_QWORD *)a2 + 3) + 48;
    v27 = (int *)*((_QWORD *)v9 + 4);
    v28 = *((unsigned int *)v9 + 10);
    v29 = &v27[8 * v28];
    if (!(_DWORD)v28)
    {
      v43 = *((_QWORD *)v9 + 1);
      if (v43 == v26)
      {
        v9 = (const llvm::MachineInstr *)(*((_QWORD *)a2 + 3) + 48);
      }
      else
      {
        v9 = (const llvm::MachineInstr *)(*((_QWORD *)a2 + 3) + 48);
        if ((*(_WORD *)(v43 + 44) & 4) != 0)
        {
          do
          {
            v50 = v43;
            v51 = *(unsigned int *)(v43 + 40);
            if ((_DWORD)v51)
            {
              v9 = (const llvm::MachineInstr *)v43;
              goto LABEL_93;
            }
            v43 = *(_QWORD *)(v43 + 8);
          }
          while (v43 != v26 && (*(_WORD *)(v43 + 44) & 4) != 0);
          v9 = (const llvm::MachineInstr *)(*((_QWORD *)a2 + 3) + 48);
LABEL_93:
          v27 = *(int **)(v50 + 32);
          v29 = &v27[8 * v51];
        }
      }
    }
    if (v27 == v29)
    {
LABEL_54:
      v37 = *(unsigned int *)(v7 + 152);
      if ((_DWORD)v37)
      {
        v38 = *(uint64_t **)(v7 + 144);
        v39 = &v38[2 * v37];
        v40 = (_QWORD *)(v7 + 288);
        do
        {
          v41 = *v38;
          v42 = v38[1];
          v38 += 2;
          this = sub_1C525A960(v40, v41, v42);
        }
        while (v38 != v39);
      }
      return this;
    }
    while (1)
    {
      v30 = *v27;
      if (!*v27)
      {
        v31 = v27[1];
        if (v31)
        {
          v32 = v30 & 0x30000000;
          if ((v30 & 0x1000000) == 0)
          {
            v33 = (unsigned int *)v7;
            if (v32)
              goto LABEL_37;
LABEL_36:
            this = sub_1C525D0F4((uint64_t)v52, v31, v33);
            goto LABEL_37;
          }
          if (v32)
            v35 = 1;
          else
            v35 = (v30 & 0xFFF00) == 0;
          if (!v35)
          {
            this = sub_1C525D0F4((uint64_t)v52, v27[1], (unsigned int *)v7);
            v30 = *v27;
          }
          v36 = v30 & 0x5000000;
          if (v36 == 83886080)
            v33 = (unsigned int *)(v7 + 288);
          else
            v33 = (unsigned int *)(v7 + 144);
          if (v36 != 83886080 || (a6 & 1) == 0)
            goto LABEL_36;
        }
      }
LABEL_37:
      v27 += 8;
      if (v27 == v29)
      {
        v34 = *((_QWORD *)v9 + 1);
        if (v34 == v26)
          goto LABEL_54;
        v27 = v29;
        v9 = (const llvm::MachineInstr *)v26;
        if ((*(_WORD *)(v34 + 44) & 4) != 0)
        {
          while (1)
          {
            v48 = v34;
            v49 = *(unsigned int *)(v34 + 40);
            if ((_DWORD)v49)
              break;
            v34 = *(_QWORD *)(v34 + 8);
            if (v34 == v26 || (*(_WORD *)(v34 + 44) & 4) == 0)
            {
              v9 = (const llvm::MachineInstr *)v26;
              goto LABEL_88;
            }
          }
          v9 = (const llvm::MachineInstr *)v34;
LABEL_88:
          v27 = *(int **)(v48 + 32);
          v29 = &v27[8 * v49];
        }
      }
      if (v27 == v29)
        goto LABEL_54;
    }
  }
  if ((v8 & 4) != 0)
  {
    v9 = a2;
    do
      v9 = (const llvm::MachineInstr *)(*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8);
    while ((*((_WORD *)v9 + 22) & 4) != 0);
  }
  v10 = *((_QWORD *)a2 + 3) + 48;
  v11 = (unsigned int *)*((_QWORD *)v9 + 4);
  v12 = *((unsigned int *)v9 + 10);
  v13 = &v11[8 * v12];
  if (!(_DWORD)v12)
  {
    v25 = *((_QWORD *)v9 + 1);
    if (v25 == v10)
    {
      v9 = (const llvm::MachineInstr *)(*((_QWORD *)a2 + 3) + 48);
    }
    else
    {
      v9 = (const llvm::MachineInstr *)(*((_QWORD *)a2 + 3) + 48);
      if ((*(_WORD *)(v25 + 44) & 4) != 0)
      {
        do
        {
          v46 = v25;
          v47 = *(unsigned int *)(v25 + 40);
          if ((_DWORD)v47)
          {
            v9 = (const llvm::MachineInstr *)v25;
            goto LABEL_78;
          }
          v25 = *(_QWORD *)(v25 + 8);
        }
        while (v25 != v10 && (*(_WORD *)(v25 + 44) & 4) != 0);
        v9 = (const llvm::MachineInstr *)(*((_QWORD *)a2 + 3) + 48);
LABEL_78:
        v11 = *(unsigned int **)(v46 + 32);
        v13 = &v11[8 * v47];
      }
    }
  }
  while (v11 != v13)
  {
    v14 = *v11;
    if (!*v11)
    {
      v15 = v11[1];
      if (v15)
      {
        v16 = (v14 >> 8) & 0xFFF;
        if ((v14 & 0x1000000) == 0)
        {
          if ((v14 & 0x30000000) != 0)
            goto LABEL_11;
          v17 = (unsigned int *)v7;
          goto LABEL_10;
        }
        if ((v14 & 0x10000000) != 0)
          v16 = 0;
        if ((~v14 & 0x5000000) != 0)
        {
          v17 = (unsigned int *)(v7 + 144);
LABEL_10:
          this = sub_1C525CFE0((uint64_t)v52, v15, v16, v17);
          goto LABEL_11;
        }
        if ((a6 & 1) == 0)
        {
          v17 = (unsigned int *)(v7 + 288);
          goto LABEL_10;
        }
      }
    }
LABEL_11:
    v11 += 8;
    if (v11 == v13)
    {
      v18 = *((_QWORD *)v9 + 1);
      if (v18 == v10)
        break;
      v11 = v13;
      v9 = (const llvm::MachineInstr *)v10;
      if ((*(_WORD *)(v18 + 44) & 4) != 0)
      {
        while (1)
        {
          v44 = v18;
          v45 = *(unsigned int *)(v18 + 40);
          if ((_DWORD)v45)
            break;
          v18 = *(_QWORD *)(v18 + 8);
          if (v18 == v10 || (*(_WORD *)(v18 + 44) & 4) == 0)
          {
            v9 = (const llvm::MachineInstr *)v10;
            goto LABEL_73;
          }
        }
        v9 = (const llvm::MachineInstr *)v18;
LABEL_73:
        v11 = *(unsigned int **)(v44 + 32);
        v13 = &v11[8 * v45];
      }
    }
  }
  v19 = *(unsigned int *)(v7 + 152);
  if ((_DWORD)v19)
  {
    v20 = *(uint64_t **)(v7 + 144);
    v21 = &v20[2 * v19];
    v22 = (_QWORD *)(v7 + 288);
    do
    {
      v23 = *v20;
      v24 = v20[1];
      v20 += 2;
      this = sub_1C525A960(v22, v23, v24);
    }
    while (v20 != v21);
  }
  return this;
}

uint64_t llvm::RegisterOperands::detectDeadDefs(uint64_t this, const llvm::MachineInstr *a2, const llvm::LiveIntervals *a3)
{
  uint64_t v4;
  __int16 v5;
  const llvm::MachineInstr *v6;
  uint64_t v7;
  const llvm::MachineInstr *v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const llvm::MachineInstr **v16;
  const llvm::MachineInstr *v17;
  int v18;
  int v19;
  unint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  llvm::LiveInterval *v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  _QWORD *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  __int128 v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v50;
  __int128 v51;

  v4 = this;
  v5 = *((_WORD *)a2 + 22);
  v6 = a2;
  if ((v5 & 4) != 0)
  {
    v6 = a2;
    do
      v6 = (const llvm::MachineInstr *)(*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8);
    while ((*((_WORD *)v6 + 22) & 4) != 0);
  }
  v7 = *((_QWORD *)a3 + 36);
  if ((v5 & 8) != 0)
  {
    do
      a2 = (const llvm::MachineInstr *)*((_QWORD *)a2 + 1);
    while ((*((_WORD *)a2 + 22) & 8) != 0);
  }
  v8 = (const llvm::MachineInstr *)*((_QWORD *)a2 + 1);
  if (v6 != v8)
  {
    while (1)
    {
      v9 = **((unsigned __int16 **)v6 + 2);
      v10 = v9 > 0x17;
      v11 = (1 << v9) & 0x83E000;
      v12 = v10 || v11 == 0;
      if (v12)
        break;
      v6 = (const llvm::MachineInstr *)*((_QWORD *)v6 + 1);
      if (v6 == v8)
      {
        v6 = (const llvm::MachineInstr *)*((_QWORD *)a2 + 1);
        break;
      }
    }
  }
  v13 = *(_QWORD *)(v7 + 368);
  v14 = *(unsigned int *)(v7 + 384);
  if ((_DWORD)v14)
  {
    LODWORD(v15) = ((v6 >> 4) ^ (v6 >> 9)) & (v14 - 1);
    v16 = (const llvm::MachineInstr **)(v13 + 16 * v15);
    v17 = *v16;
    if (v6 == *v16)
      goto LABEL_17;
    v18 = 1;
    while (v17 != (const llvm::MachineInstr *)-4096)
    {
      v19 = v15 + v18++;
      v15 = v19 & (v14 - 1);
      v17 = *(const llvm::MachineInstr **)(v13 + 16 * v15);
      if (v6 == v17)
      {
        v16 = (const llvm::MachineInstr **)(v13 + 16 * v15);
        goto LABEL_17;
      }
    }
  }
  v16 = (const llvm::MachineInstr **)(v13 + 16 * v14);
LABEL_17:
  if (*(_DWORD *)(this + 152))
  {
    v20 = (unint64_t)v16[1] & 0xFFFFFFFFFFFFFFF8;
    v21 = *(unsigned int **)(this + 144);
    while (1)
    {
      v22 = *v21;
      if ((v22 & 0x80000000) != 0)
      {
        if ((v22 & 0x7FFFFFFF) >= (unint64_t)*((unsigned int *)a3 + 104)
          || (v23 = *(llvm::LiveInterval **)(*((_QWORD *)a3 + 51) + 8 * (v22 & 0x7FFFFFFF))) == 0)
        {
          v23 = (llvm::LiveInterval *)sub_1C4851220((uint64_t)a3, v22);
          v44 = *((_QWORD *)a3 + 38);
          v45 = *((_QWORD *)a3 + 31);
          v46 = *(_QWORD *)(v45 + 40);
          *(_QWORD *)v44 = v45;
          *(_QWORD *)(v44 + 8) = v46;
          *(_OWORD *)(v44 + 16) = *((_OWORD *)a3 + 18);
          *(_QWORD *)(v44 + 32) = (char *)a3 + 312;
          llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v44);
          *(_DWORD *)(v44 + 184) = 0;
          v47 = *((_QWORD *)a3 + 32);
          v12 = *(_BYTE *)(v47 + 16) == 0;
          v48 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v47 + 24) + 16 * (*((_DWORD *)v23 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                   + 34);
          v50 = !v12 && v48 != 0;
          llvm::LiveIntervalCalc::calculate(*((llvm::LiveIntervalCalc **)a3 + 38), v23, v50);
          this = llvm::LiveIntervals::computeDeadValues((uint64_t)a3, (uint64_t)v23, 0);
        }
      }
      else
      {
        v23 = *(llvm::LiveInterval **)(*((_QWORD *)a3 + 85) + 8 * v22);
        if (!v23)
          goto LABEL_49;
      }
      v24 = *((_DWORD *)v23 + 2);
      v25 = *(_QWORD **)v23;
      if (!v24)
        break;
      v26 = v25[3 * v24 - 2];
      v27 = *(_DWORD *)(v20 + 24);
      v28 = (v26 >> 1) & 3 | *(_DWORD *)((v26 & 0xFFFFFFFFFFFFFFF8) + 24);
      v29 = *(_QWORD **)v23;
      v30 = *((unsigned int *)v23 + 2);
      if (v27 >= v28)
        goto LABEL_34;
      do
      {
        v31 = v30 >> 1;
        v32 = v29[3 * (v30 >> 1) + 1];
        LODWORD(v32) = (v32 >> 1) & 3 | *(_DWORD *)((v32 & 0xFFFFFFFFFFFFFFF8) + 24);
        v30 -= (v30 >> 1) + 1;
        v33 = v27 >= v32;
        if (v27 >= v32)
          v34 = v31 + 1;
        else
          v34 = 0;
        v29 += 3 * v34;
        if (!v33)
          v30 = v31;
      }
      while (v30);
LABEL_35:
      v35 = &v25[3 * v24];
      if (v29 == v35)
        goto LABEL_49;
      v36 = *(_DWORD *)((*v29 & 0xFFFFFFFFFFFFFFF8) + 24);
      v37 = *(_DWORD *)(v20 + 24);
      if (((*v29 >> 1) & 3 | v36) > v37)
      {
        LOBYTE(v38) = 0;
      }
      else
      {
        v38 = v29[1];
        if (v20 == (v38 & 0xFFFFFFFFFFFFFFF8))
        {
          v29 += 3;
          if (v29 == v35)
            goto LABEL_43;
          v36 = *(_DWORD *)((*v29 & 0xFFFFFFFFFFFFFFF8) + 24);
        }
      }
      if (v37 >= v36)
        v38 = v29[1];
LABEL_43:
      if ((~(_BYTE)v38 & 6) == 0)
      {
        v39 = *(_OWORD *)v21;
        v40 = *(unsigned int *)(v4 + 296);
        if (v40 >= *(unsigned int *)(v4 + 300))
        {
          v51 = *(_OWORD *)v21;
          this = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 288, v4 + 304, v40 + 1, 16);
          v39 = v51;
          v40 = *(unsigned int *)(v4 + 296);
        }
        *(_OWORD *)(*(_QWORD *)(v4 + 288) + 16 * v40) = v39;
        ++*(_DWORD *)(v4 + 296);
        v41 = *(unsigned int *)(v4 + 152);
        v42 = *(_QWORD *)(v4 + 144) + 16 * v41;
        if ((unsigned int *)v42 != v21 + 4)
        {
          this = (uint64_t)memmove(v21, v21 + 4, v42 - (_QWORD)(v21 + 4));
          LODWORD(v41) = *(_DWORD *)(v4 + 152);
        }
        v43 = v41 - 1;
        *(_DWORD *)(v4 + 152) = v43;
        goto LABEL_50;
      }
LABEL_49:
      v21 += 4;
      v43 = *(_DWORD *)(v4 + 152);
LABEL_50:
      if (v21 == (unsigned int *)(*(_QWORD *)(v4 + 144) + 16 * v43))
        return this;
    }
    v24 = 0;
LABEL_34:
    v29 = &v25[3 * v24];
    goto LABEL_35;
  }
  return this;
}

uint64_t llvm::RegisterOperands::adjustLaneLiveness(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  int v32;

  v9 = result;
  if (*(_DWORD *)(result + 152))
  {
    v10 = *(_QWORD *)(result + 144);
    do
    {
      result = sub_1C5259334(a2, a3, *(_DWORD *)v10, a4 & 0xFFFFFFFFFFFFFFF8 | 6);
      if (a5)
      {
        v11 = *(_DWORD *)v10;
        if ((*(_DWORD *)v10 & 0x80000000) != 0 && (result & ~*(_QWORD *)(v10 + 8)) == 0)
        {
          v15 = *(unsigned int *)(a5 + 40);
          if ((_DWORD)v15)
          {
            v16 = *(int **)(a5 + 32);
            v17 = 32 * v15;
            do
            {
              v18 = *v16;
              if ((*v16 & 0x10000FF) == 0x1000000 && (v18 & 0xFFF00) != 0 && v16[1] == v11)
                *v16 = v18 | 0x10000000;
              v16 += 8;
              v17 -= 32;
            }
            while (v17);
          }
        }
      }
      if ((*(_QWORD *)(v10 + 8) & result) != 0)
      {
        *(_QWORD *)(v10 + 8) &= result;
        v10 += 16;
        v12 = *(_DWORD *)(v9 + 152);
      }
      else
      {
        v13 = *(unsigned int *)(v9 + 152);
        v14 = *(_QWORD *)(v9 + 144) + 16 * v13;
        if (v14 != v10 + 16)
        {
          result = (uint64_t)memmove((void *)v10, (const void *)(v10 + 16), v14 - (v10 + 16));
          LODWORD(v13) = *(_DWORD *)(v9 + 152);
        }
        v12 = v13 - 1;
        *(_DWORD *)(v9 + 152) = v12;
      }
    }
    while (v10 != *(_QWORD *)(v9 + 144) + 16 * v12);
  }
  if (*(_DWORD *)(v9 + 8))
  {
    v20 = *(_QWORD *)v9;
    do
    {
      result = sub_1C5259334(a2, a3, *(_DWORD *)v20, a4 & 0xFFFFFFFFFFFFFFF8);
      if ((*(_QWORD *)(v20 + 8) & result) != 0)
      {
        *(_QWORD *)(v20 + 8) &= result;
        v20 += 16;
        v21 = *(_DWORD *)(v9 + 8);
      }
      else
      {
        v22 = *(unsigned int *)(v9 + 8);
        v23 = *(_QWORD *)v9 + 16 * v22;
        if (v23 != v20 + 16)
        {
          result = (uint64_t)memmove((void *)v20, (const void *)(v20 + 16), v23 - (v20 + 16));
          LODWORD(v22) = *(_DWORD *)(v9 + 8);
        }
        v21 = v22 - 1;
        *(_DWORD *)(v9 + 8) = v21;
      }
    }
    while (v20 != *(_QWORD *)v9 + 16 * v21);
  }
  if (a5)
  {
    v24 = *(unsigned int *)(v9 + 296);
    if ((_DWORD)v24)
    {
      v25 = *(unsigned int **)(v9 + 288);
      v26 = &v25[4 * v24];
      v27 = a4 & 0xFFFFFFFFFFFFFFF8 | 6;
      do
      {
        v28 = *v25;
        if ((*v25 & 0x80000000) != 0)
        {
          result = sub_1C5259334(a2, a3, *v25, v27);
          if (!result)
          {
            v29 = *(unsigned int *)(a5 + 40);
            if ((_DWORD)v29)
            {
              v30 = *(int **)(a5 + 32);
              v31 = 32 * v29;
              do
              {
                v32 = *v30;
                if ((*v30 & 0x10000FF) == 0x1000000 && (v32 & 0xFFF00) != 0 && v30[1] == v28)
                  *v30 = v32 | 0x10000000;
                v30 += 8;
                v31 -= 32;
              }
              while (v31);
            }
          }
        }
        v25 += 4;
      }
      while (v25 != v26);
    }
  }
  return result;
}

uint64_t sub_1C5259334(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  unsigned int v32;
  _QWORD *v33;
  uint64_t v34;
  unsigned int v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  BOOL v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;

  if ((a3 & 0x80000000) != 0)
  {
    v15 = a3 & 0x7FFFFFFF;
    if (v15 >= *(unsigned int *)(a1 + 416) || (v16 = *(_QWORD *)(*(_QWORD *)(a1 + 408) + 8 * v15)) == 0)
    {
      v51 = a4;
      v52 = a2;
      v50 = a3 & 0x7FFFFFFF;
      v16 = sub_1C4851220(a1, a3);
      v43 = *(_QWORD *)(a1 + 304);
      v44 = *(_QWORD *)(a1 + 248);
      v45 = *(_QWORD *)(v44 + 40);
      *(_QWORD *)v43 = v44;
      *(_QWORD *)(v43 + 8) = v45;
      *(_OWORD *)(v43 + 16) = *(_OWORD *)(a1 + 288);
      *(_QWORD *)(v43 + 32) = a1 + 312;
      llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v43);
      *(_DWORD *)(v43 + 184) = 0;
      v46 = *(_QWORD *)(a1 + 256);
      v48 = *(_BYTE *)(v46 + 16) == 0;
      v47 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v46 + 24) + 16 * (*(_DWORD *)(v16 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                               + 34);
      v48 = v48 || v47 == 0;
      v49 = !v48;
      llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(a1 + 304), (llvm::LiveInterval *)v16, v49);
      llvm::LiveIntervals::computeDeadValues(a1, v16, 0);
      v15 = v50;
      a4 = v51;
      a2 = v52;
    }
    v17 = *(_QWORD *)(v16 + 104);
    if (v17)
    {
      result = 0;
      v19 = a4 & 0xFFFFFFFFFFFFFFF8;
      v20 = (a4 >> 1) & 3;
      while (1)
      {
        v21 = *(_DWORD *)(v17 + 8);
        v22 = *(_QWORD **)v17;
        if (v21)
        {
          v23 = v22[3 * v21 - 2];
          v24 = *(_DWORD *)(v19 + 24) | v20;
          v25 = (v23 >> 1) & 3 | *(_DWORD *)((v23 & 0xFFFFFFFFFFFFFFF8) + 24);
          v26 = *(_QWORD **)v17;
          v27 = *(unsigned int *)(v17 + 8);
          if (v24 < v25)
          {
            do
            {
              v28 = v27 >> 1;
              v29 = v26[3 * (v27 >> 1) + 1];
              LODWORD(v29) = (v29 >> 1) & 3 | *(_DWORD *)((v29 & 0xFFFFFFFFFFFFFFF8) + 24);
              v27 -= (v27 >> 1) + 1;
              v30 = v24 >= v29;
              if (v24 >= v29)
                v31 = v28 + 1;
              else
                v31 = 0;
              v26 += 3 * v31;
              if (!v30)
                v27 = v28;
            }
            while (v27);
            goto LABEL_28;
          }
        }
        else
        {
          v21 = 0;
        }
        v26 = &v22[3 * v21];
LABEL_28:
        if (v26 != &v22[3 * v21]
          && ((*v26 >> 1) & 3 | *(_DWORD *)((*v26 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v19 + 24) | v20))
        {
          result |= *(_QWORD *)(v17 + 112);
        }
        v17 = *(_QWORD *)(v17 + 104);
        if (!v17)
          return result;
      }
    }
    v32 = *(_DWORD *)(v16 + 8);
    v33 = *(_QWORD **)v16;
    if (v32)
    {
      v34 = v33[3 * v32 - 2];
      v35 = *(_DWORD *)((a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (a4 >> 1) & 3;
      if (v35 < ((v34 >> 1) & 3 | *(_DWORD *)((v34 & 0xFFFFFFFFFFFFFFF8) + 24)))
      {
        v36 = *(_QWORD **)v16;
        v37 = *(unsigned int *)(v16 + 8);
        do
        {
          v38 = v37 >> 1;
          v39 = v36[3 * (v37 >> 1) + 1];
          LODWORD(v39) = (v39 >> 1) & 3 | *(_DWORD *)((v39 & 0xFFFFFFFFFFFFFFF8) + 24);
          v37 -= (v37 >> 1) + 1;
          v40 = v35 >= v39;
          if (v35 >= v39)
            v41 = v38 + 1;
          else
            v41 = 0;
          v36 += 3 * v41;
          if (!v40)
            v37 = v38;
        }
        while (v37);
LABEL_52:
        if (v36 != &v33[3 * v32]
          && ((*v36 >> 1) & 3 | *(_DWORD *)((*v36 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (a4 >> 1) & 3))
        {
          return *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(a2 + 24) + 16 * v15) & 0xFFFFFFFFFFFFFFF8) + 24);
        }
        return 0;
      }
    }
    else
    {
      v32 = 0;
    }
    v36 = &v33[3 * v32];
    goto LABEL_52;
  }
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 680) + 8 * a3);
  if (!v4)
    return -1;
  v5 = *(unsigned int *)(v4 + 8);
  v6 = *(_QWORD **)v4;
  if (!(_DWORD)v5)
  {
    LODWORD(v5) = 0;
    goto LABEL_45;
  }
  v7 = v6[3 * v5 - 2];
  v8 = *(_DWORD *)((a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (a4 >> 1) & 3;
  if (v8 >= ((v7 >> 1) & 3 | *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_45:
    v9 = &v6[3 * v5];
    goto LABEL_46;
  }
  v9 = v6;
  v10 = v5;
  do
  {
    v11 = v10 >> 1;
    v12 = v9[3 * (v10 >> 1) + 1];
    LODWORD(v12) = (v12 >> 1) & 3 | *(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 24);
    v10 -= (v10 >> 1) + 1;
    v13 = v8 >= v12;
    if (v8 >= v12)
      v14 = v11 + 1;
    else
      v14 = 0;
    v9 += 3 * v14;
    if (!v13)
      v10 = v11;
  }
  while (v10);
LABEL_46:
  if (v9 == &v6[3 * v5])
    return 0;
  if (((*v9 >> 1) & 3 | *(_DWORD *)((*v9 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (a4 >> 1) & 3))
    return 0;
  else
    return -1;
}

void llvm::PressureDiffs::init(llvm::PressureDiffs *this, unsigned int a2)
{
  void *v4;

  *((_DWORD *)this + 2) = a2;
  if (*((_DWORD *)this + 3) < a2)
  {
    *((_DWORD *)this + 3) = a2;
    free(*(void **)this);
    v4 = malloc_type_calloc(a2, 0x40uLL, 0x6D9A4F0CuLL);
    if (!v4)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    *(_QWORD *)this = v4;
  }
  else
  {
    bzero(*(void **)this, (unint64_t)a2 << 6);
  }
}

_QWORD *llvm::PressureDiffs::addInstruction(_QWORD *result, unsigned int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int v14;

  v6 = *result + ((unint64_t)a2 << 6);
  v7 = *(unsigned int *)(a3 + 152);
  if ((_DWORD)v7)
  {
    v8 = *(unsigned int **)(a3 + 144);
    v9 = 16 * v7;
    do
    {
      v10 = *v8;
      v8 += 4;
      result = (_QWORD *)llvm::PressureDiff::addPressureChange(v6, v10, 1, a4);
      v9 -= 16;
    }
    while (v9);
  }
  v11 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v11)
  {
    v12 = *(unsigned int **)a3;
    v13 = 16 * v11;
    do
    {
      v14 = *v12;
      v12 += 4;
      result = (_QWORD *)llvm::PressureDiff::addPressureChange(v6, v14, 0, a4);
      v13 -= 16;
    }
    while (v13);
  }
  return result;
}

uint64_t llvm::PressureDiff::addPressureChange(uint64_t a1, uint64_t a2, int a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  uint64_t result;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned __int16 v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;

  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a4 + 16) + 176))(*(_QWORD *)(*a4 + 16));
  v9 = v8;
  if ((a2 & 0x80000000) != 0)
  {
    v10 = *(_QWORD *)(a4[3] + 16 * (a2 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
    v11 = (unsigned int *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v8 + 320))(v8, v10);
    result = *(unsigned int *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v9 + 280))(v9, v10);
  }
  else
  {
    v11 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 328))(v8, a2);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 288))(v9, a2);
  }
  v13 = *v11;
  if (*v11 != -1)
  {
    if (a3)
      v14 = -(int)result;
    else
      v14 = result;
    do
    {
      v15 = 0;
      while (*(_WORD *)(a1 + v15))
      {
        v16 = *(unsigned __int16 *)(a1 + v15) - 1;
        if (v16 >= v13)
        {
          if (v16 == v13)
            goto LABEL_17;
          break;
        }
        v15 += 4;
        if (v15 == 64)
          return result;
      }
      v17 = v13 + 1;
      if ((_WORD)v13 != 0xFFFF)
      {
        v18 = 0;
        v19 = v15;
        do
        {
          v20 = *(_DWORD *)(a1 + v19);
          *(_DWORD *)(a1 + v19) = v18 | v17;
          if (v19 == 60)
            break;
          v18 = v20 & 0xFFFF0000;
          v19 += 4;
          v17 = v20;
        }
        while ((_WORD)v20);
      }
LABEL_17:
      v21 = a1 + v15;
      v22 = v14 + *(__int16 *)(a1 + v15 + 2);
      if (v22)
      {
        *(_WORD *)(v21 + 2) = v22;
      }
      else
      {
        if (v15 != 60)
        {
          while (1)
          {
            v21 = a1 + v15;
            if (!*(_WORD *)(a1 + v15 + 4))
              break;
            *(_DWORD *)v21 = *(_DWORD *)(v21 + 4);
            v15 += 4;
            if (v15 == 60)
            {
              v21 = a1 + 60;
              break;
            }
          }
        }
        *(_DWORD *)v21 = 0;
      }
      v23 = v11[1];
      ++v11;
      v13 = v23;
    }
    while (v23 != -1);
  }
  return result;
}

uint64_t llvm::RegPressureTracker::addLiveRegs(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;

  if (a3)
  {
    v3 = a2;
    v4 = result;
    v5 = a2 + 16 * a3;
    v6 = result + 96;
    do
    {
      v7 = *(_DWORD *)v3;
      if ((*(_DWORD *)v3 & 0x80000000) != 0)
        v7 = *(_DWORD *)(v4 + 256) + (v7 & 0x7FFFFFFF);
      v8 = *(_QWORD *)(v3 + 8);
      v14 = v7;
      v15 = v8;
      v9 = sub_1C525D1D8(v6, (unsigned int *)&v14);
      if ((v10 & 1) != 0)
      {
        v11 = 0;
      }
      else
      {
        v11 = *(_QWORD *)(v9 + 8);
        *(_QWORD *)(v9 + 8) = v11 | v8;
      }
      v12 = *(_QWORD *)(v3 + 8) | v11;
      v13 = *(_DWORD *)v3;
      v3 += 16;
      result = llvm::RegPressureTracker::increaseRegPressure(v4, v13, v11, v12);
    }
    while (v3 != v5);
  }
  return result;
}

uint64_t llvm::RegPressureTracker::discoverLiveInOrOut(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;

  v5 = a3;
  v7 = result;
  v8 = *(_QWORD *)a4;
  v9 = *(unsigned int *)(a4 + 8);
  if (!(_DWORD)v9)
  {
LABEL_5:
    if (v9 >= *(_DWORD *)(a4 + 12))
    {
      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v9 + 1, 16);
      v8 = *(_QWORD *)a4;
      v9 = *(unsigned int *)(a4 + 8);
    }
    v12 = (_QWORD *)(v8 + 16 * v9);
    *v12 = a2;
    v12[1] = v5;
    ++*(_DWORD *)(a4 + 8);
LABEL_9:
    if (v5)
    {
      v14 = *(uint64_t **)(v7 + 48);
      v15 = *(_QWORD **)(v7 + 24);
      v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v15 + 16) + 176))(*(_QWORD *)(*v15 + 16));
      v17 = v16;
      if ((a2 & 0x80000000) != 0)
      {
        v18 = *(_QWORD *)(v15[3] + 16 * (a2 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
        v19 = (unsigned int *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v16 + 320))(v16, v18);
        result = *(unsigned int *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v17 + 280))(v17, v18);
      }
      else
      {
        v19 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 328))(v16, a2);
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 288))(v17, a2);
      }
      v20 = *v19;
      if ((_DWORD)v20 != -1)
      {
        v21 = *v14;
        v22 = v19 + 1;
        do
        {
          *(_DWORD *)(v21 + 4 * v20) += result;
          v23 = *v22++;
          v20 = v23;
        }
        while (v23 != -1);
      }
    }
    return result;
  }
  v10 = (uint64_t *)(v8 + 8);
  v11 = 16 * v9;
  while (*((_DWORD *)v10 - 2) != (_DWORD)a2)
  {
    v10 += 2;
    v11 -= 16;
    if (!v11)
      goto LABEL_5;
  }
  v13 = *v10;
  v5 = *v10 | a3;
  *v10 = v5;
  if (!v13)
    goto LABEL_9;
  return result;
}

uint64_t llvm::RegPressureTracker::discoverLiveIn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return llvm::RegPressureTracker::discoverLiveInOrOut(a1, a2, a3, *(_QWORD *)(a1 + 48) + 24);
}

uint64_t llvm::RegPressureTracker::discoverLiveOut(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return llvm::RegPressureTracker::discoverLiveInOrOut(a1, a2, a3, *(_QWORD *)(a1 + 48) + 168);
}

uint64_t llvm::RegPressureTracker::bumpDeadDefs(uint64_t result, unsigned int *a2, uint64_t a3)
{
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;

  if (a3)
  {
    v3 = a2;
    v4 = result;
    v5 = &a2[4 * a3];
    v6 = a2;
    do
    {
      v7 = *v6;
      v8 = v7;
      v9 = *v6;
      if ((v7 & 0x80000000) != 0)
      {
        v8 = *(_DWORD *)(v4 + 256) + (v7 & 0x7FFFFFFF);
        v9 = *(_DWORD *)(v4 + 256) + (v7 & 0x7FFFFFFF);
      }
      v10 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 240) + v8);
      v11 = *(_DWORD *)(v4 + 104);
      if (v11 <= v10)
        goto LABEL_11;
      v12 = *(_QWORD *)(v4 + 96);
      while (1)
      {
        v13 = v10;
        if (*(_DWORD *)(v12 + 16 * v10) == v9)
          break;
        v10 += 256;
        if (v13 + 256 >= v11)
          goto LABEL_11;
      }
      if (v11 == v10)
LABEL_11:
        v14 = 0;
      else
        v14 = *(_QWORD *)(v12 + 16 * v10 + 8);
      result = llvm::RegPressureTracker::increaseRegPressure(v4, v7, v14, *((_QWORD *)v6 + 1) | v14);
      v6 += 4;
    }
    while (v6 != v5);
    do
    {
      v16 = *v3;
      v17 = v16;
      if ((v16 & 0x80000000) != 0)
        v17 = *(_DWORD *)(v4 + 256) + (v16 & 0x7FFFFFFF);
      v18 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 240) + v17);
      v19 = *(_DWORD *)(v4 + 104);
      if (v19 <= v18)
        goto LABEL_26;
      v20 = *(_QWORD *)(v4 + 96);
      while (1)
      {
        v21 = v18;
        if (*(_DWORD *)(v20 + 16 * v18) == v17)
          break;
        v18 += 256;
        if (v21 + 256 >= v19)
          goto LABEL_26;
      }
      if (v19 == v18 || !*(_QWORD *)(v20 + 16 * v18 + 8))
      {
LABEL_26:
        if (*((_QWORD *)v3 + 1))
        {
          v22 = *(_QWORD **)(v4 + 24);
          v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v22 + 16) + 176))(*(_QWORD *)(*v22 + 16));
          v24 = v23;
          if ((v16 & 0x80000000) != 0)
          {
            v25 = *(_QWORD *)(v22[3] + 16 * (v16 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
            v15 = (unsigned int *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v23 + 320))(v23, v25);
            result = *(unsigned int *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v24 + 280))(v24, v25);
          }
          else
          {
            v15 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 328))(v23, v16);
            result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 288))(v24, v16);
          }
          v26 = *v15;
          if ((_DWORD)v26 != -1)
          {
            v27 = *(_QWORD *)(v4 + 72);
            v28 = v15 + 1;
            do
            {
              *(_DWORD *)(v27 + 4 * v26) -= result;
              v29 = *v28++;
              v26 = v29;
            }
            while (v29 != -1);
          }
        }
      }
      v3 += 4;
    }
    while (v3 != v5);
  }
  return result;
}

uint64_t llvm::RegPressureTracker::recede(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  _DWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  __int16 v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  BOOL v49;
  int v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  int v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  uint64_t v62;
  unint64_t v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _DWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  BOOL v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  _QWORD *v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  _QWORD *v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  BOOL v102;
  unint64_t v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  unsigned int v107;
  BOOL v108;
  unsigned int v109;
  _QWORD *v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  _QWORD *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  BOOL v118;
  unint64_t v119;
  unsigned int v120;
  int v121;
  unsigned int v122;
  unsigned int v123;
  BOOL v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  BOOL v136;
  unint64_t v137;
  unsigned int v138;
  int v139;
  unsigned int v140;
  unsigned int v141;
  BOOL v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int *v145;
  unsigned int *v146;
  unsigned int v147;
  uint64_t v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  unsigned int v157;
  unint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  unint64_t v162;
  unsigned int **v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;

  result = llvm::RegPressureTracker::bumpDeadDefs(a1, a2[36], *((unsigned int *)a2 + 74));
  v163 = a2;
  v164 = a3;
  v7 = *((unsigned int *)a2 + 38);
  if ((_DWORD)v7)
  {
    v8 = a2[18];
    v9 = &v8[4 * v7];
    v165 = a3 + 16;
    do
    {
      v10 = *v8;
      if ((v10 & 0x80000000) != 0)
        v11 = *(_DWORD *)(a1 + 256) + (v10 & 0x7FFFFFFF);
      else
        v11 = *v8;
      v12 = *((_QWORD *)v8 + 1);
      v13 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 240) + v11);
      v14 = *(_DWORD *)(a1 + 104);
      if (v14 <= v13)
        goto LABEL_9;
      v15 = *(_QWORD *)(a1 + 96);
      while (1)
      {
        v16 = v13;
        if (*(_DWORD *)(v15 + 16 * v13) == v11)
          break;
        v13 += 256;
        if (v16 + 256 >= v14)
          goto LABEL_9;
      }
      if (v14 == v13)
      {
LABEL_9:
        v17 = 0;
      }
      else
      {
        v18 = v15 + 16 * v13;
        v17 = *(_QWORD *)(v18 + 8);
        *(_QWORD *)(v18 + 8) = v17 & ~v12;
        v12 = *((_QWORD *)v8 + 1);
      }
      v19 = v17;
      if ((v12 & ~v17) != 0)
      {
        llvm::RegPressureTracker::discoverLiveInOrOut(a1, v10, v12 & ~v17, *(_QWORD *)(a1 + 48) + 168);
        v20 = *(_QWORD **)(a1 + 24);
        v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v20 + 16) + 176))(*(_QWORD *)(*v20 + 16));
        v22 = v21;
        if ((v10 & 0x80000000) != 0)
        {
          v23 = *(_QWORD *)(v20[3] + 16 * (v10 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
          v24 = (unsigned int *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v21 + 320))(v21, v23);
          result = *(unsigned int *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v22 + 280))(v22, v23);
        }
        else
        {
          v24 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 328))(v21, v10);
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 288))(v22, v10);
        }
        v25 = *v24;
        if ((_DWORD)v25 == -1)
        {
          v19 = 1;
          a3 = v164;
        }
        else
        {
          v26 = *(_QWORD *)(a1 + 72);
          v27 = v24 + 1;
          a3 = v164;
          do
          {
            *(_DWORD *)(v26 + 4 * v25) += result;
            v28 = *v27++;
            v25 = v28;
          }
          while (v28 != -1);
          v19 = 1;
        }
      }
      if ((v17 & ~v12) != 0)
        goto LABEL_35;
      if (a3 && *(_BYTE *)(a1 + 58))
      {
        v29 = *(_DWORD **)a3;
        v30 = *(unsigned int *)(a3 + 8);
        if ((_DWORD)v30)
        {
          v31 = v29 + 2;
          v32 = 16 * v30;
          while ((_DWORD)v10 != *((_DWORD *)v31 - 2))
          {
            v31 += 2;
            v32 -= 16;
            if (!v32)
              goto LABEL_26;
          }
          *v31 = 0;
          if (!v19)
            goto LABEL_35;
LABEL_30:
          v34 = *(_QWORD **)(a1 + 24);
          v35 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v34 + 16) + 176))(*(_QWORD *)(*v34 + 16));
          v36 = v35;
          if ((v10 & 0x80000000) != 0)
          {
            v37 = *(_QWORD *)(v34[3] + 16 * (v10 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
            v38 = (unsigned int *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v35 + 320))(v35, v37);
            result = *(unsigned int *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v36 + 280))(v36, v37);
          }
          else
          {
            v38 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 328))(v35, v10);
            result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 288))(v36, v10);
          }
          v39 = *v38;
          if ((_DWORD)v39 != -1)
          {
            v40 = *(_QWORD *)(a1 + 72);
            v41 = v38 + 1;
            do
            {
              *(_DWORD *)(v40 + 4 * v39) -= result;
              v42 = *v41++;
              v39 = v42;
            }
            while (v42 != -1);
          }
          goto LABEL_35;
        }
LABEL_26:
        if (v30 >= *(_DWORD *)(a3 + 12))
        {
          result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v165, v30 + 1, 16);
          v29 = *(_DWORD **)a3;
          v30 = *(unsigned int *)(a3 + 8);
        }
        v33 = (uint64_t *)&v29[4 * v30];
        *v33 = v10;
        v33[1] = 0;
        ++*(_DWORD *)(a3 + 8);
      }
      if (v19)
        goto LABEL_30;
LABEL_35:
      v8 += 4;
    }
    while (v8 != v9);
  }
  if (!*(_BYTE *)(a1 + 56))
  {
    v59 = 0;
    goto LABEL_62;
  }
  v43 = *(_QWORD *)(a1 + 64);
  v44 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 288);
  v45 = *(_WORD *)(v43 + 44);
  v46 = v43;
  if ((v45 & 4) != 0)
  {
    v46 = *(_QWORD *)(a1 + 64);
    do
      v46 = *(_QWORD *)v46 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v46 + 44) & 4) != 0);
  }
  if ((v45 & 8) != 0)
  {
    do
      v43 = *(_QWORD *)(v43 + 8);
    while ((*(_WORD *)(v43 + 44) & 8) != 0);
  }
  v47 = *(_QWORD *)(v43 + 8);
  if (v46 != v47)
  {
    while (1)
    {
      v48 = **(unsigned __int16 **)(v46 + 16);
      v49 = v48 > 0x17;
      v50 = (1 << v48) & 0x83E000;
      v51 = v49 || v50 == 0;
      if (v51)
        break;
      v46 = *(_QWORD *)(v46 + 8);
      if (v46 == v47)
      {
        v46 = v47;
        break;
      }
    }
  }
  v52 = *(_QWORD *)(v44 + 368);
  v53 = *(unsigned int *)(v44 + 384);
  if (!(_DWORD)v53)
    goto LABEL_60;
  LODWORD(v54) = ((v46 >> 4) ^ (v46 >> 9)) & (v53 - 1);
  v55 = (uint64_t *)(v52 + 16 * v54);
  v56 = *v55;
  if (v46 != *v55)
  {
    v57 = 1;
    while (v56 != -4096)
    {
      v58 = v54 + v57++;
      v54 = v58 & (v53 - 1);
      v56 = *(_QWORD *)(v52 + 16 * v54);
      if (v46 == v56)
      {
        v55 = (uint64_t *)(v52 + 16 * v54);
        goto LABEL_61;
      }
    }
LABEL_60:
    v55 = (uint64_t *)(v52 + 16 * v53);
  }
LABEL_61:
  v59 = v55[1] & 0xFFFFFFFFFFFFFFF8 | 4;
LABEL_62:
  v60 = *((unsigned int *)v163 + 2);
  if ((_DWORD)v60)
  {
    v61 = *v163;
    v62 = (uint64_t)&(*v163)[4 * v60];
    v63 = v59 & 0xFFFFFFFFFFFFFFF8;
    v64 = (v59 >> 1) & 3;
    v162 = v59 & 0xFFFFFFFFFFFFFFF8 | 6;
    do
    {
      v65 = *v61;
      v66 = v65;
      if ((v65 & 0x80000000) != 0)
        v66 = *(_DWORD *)(a1 + 256) + (v65 & 0x7FFFFFFF);
      v67 = *((_QWORD *)v61 + 1);
      v166 = v66;
      v167 = v67;
      result = sub_1C525D1D8(a1 + 96, &v166);
      if ((v68 & 1) != 0)
      {
        v71 = *((_QWORD *)v61 + 1);
        if (v71)
          goto LABEL_71;
      }
      else
      {
        v69 = *(_QWORD *)(result + 8);
        *(_QWORD *)(result + 8) = v69 | v67;
        v70 = *((_QWORD *)v61 + 1);
        v71 = v70 | v69;
        if ((v70 | v69) != v69)
        {
          if (v69)
            goto LABEL_166;
LABEL_71:
          if (a3)
          {
            if (*(_BYTE *)(a1 + 58) && (v72 = *(unsigned int *)(a3 + 8), (_DWORD)v72))
            {
              v73 = *(_DWORD **)a3;
              v74 = 16 * v72;
              while ((_DWORD)v65 != *v73)
              {
                v73 += 4;
                v74 -= 16;
                if (!v74)
                  goto LABEL_77;
              }
              sub_1C525A960((_QWORD *)a3, v65, v71);
            }
            else
            {
LABEL_77:
              sub_1C525A8B8((unsigned int *)a3, v65, v71);
            }
          }
          if (!*(_BYTE *)(a1 + 56))
            goto LABEL_165;
          v75 = v62;
          v76 = *(_QWORD *)(a1 + 32);
          if ((v65 & 0x80000000) == 0)
          {
            v77 = *(_QWORD *)(*(_QWORD *)(v76 + 680) + 8 * v65);
            if (v77)
            {
              v78 = *(unsigned int *)(v77 + 8);
              v79 = *(_QWORD **)v77;
              v62 = v75;
              if ((_DWORD)v78)
              {
                v80 = v79[3 * v78 - 2];
                v81 = *(_DWORD *)(v63 + 24) | v64;
                v82 = (v80 >> 1) & 3 | *(_DWORD *)((v80 & 0xFFFFFFFFFFFFFFF8) + 24);
                v83 = v79;
                v84 = v78;
                if (v81 < v82)
                {
                  do
                  {
                    v85 = v84 >> 1;
                    v86 = v83[3 * (v84 >> 1) + 1];
                    LODWORD(v86) = (v86 >> 1) & 3 | *(_DWORD *)((v86 & 0xFFFFFFFFFFFFFFF8) + 24);
                    v84 -= (v84 >> 1) + 1;
                    v87 = v81 >= v86;
                    if (v81 >= v86)
                      v88 = v85 + 1;
                    else
                      v88 = 0;
                    v83 += 3 * v88;
                    if (!v87)
                      v84 = v85;
                  }
                  while (v84);
                  goto LABEL_155;
                }
              }
              else
              {
                LODWORD(v78) = 0;
              }
              goto LABEL_154;
            }
            v69 = 0;
            v62 = v75;
LABEL_166:
            result = llvm::RegPressureTracker::increaseRegPressure(a1, v65, v69, v71);
            goto LABEL_167;
          }
          v89 = *(_QWORD *)(a1 + 24);
          v90 = v65 & 0x7FFFFFFF;
          if (v90 < *(unsigned int *)(v76 + 416))
          {
            v91 = *(_QWORD *)(*(_QWORD *)(v76 + 408) + 8 * v90);
            if (v91)
            {
              if (*(_BYTE *)(a1 + 58))
                goto LABEL_93;
LABEL_144:
              LODWORD(v78) = *(_DWORD *)(v91 + 8);
              v79 = *(_QWORD **)v91;
              v62 = v75;
              if (!(_DWORD)v78)
              {
                LODWORD(v78) = 0;
                a3 = v164;
                goto LABEL_154;
              }
              v130 = v79[3 * v78 - 2];
              v131 = *(_DWORD *)(v63 + 24) | v64;
              v132 = (v130 >> 1) & 3 | *(_DWORD *)((v130 & 0xFFFFFFFFFFFFFFF8) + 24);
              v83 = *(_QWORD **)v91;
              v133 = *(unsigned int *)(v91 + 8);
              a3 = v164;
              if (v131 >= v132)
              {
LABEL_154:
                v83 = &v79[3 * v78];
                goto LABEL_155;
              }
              do
              {
                v134 = v133 >> 1;
                v135 = v83[3 * (v133 >> 1) + 1];
                LODWORD(v135) = (v135 >> 1) & 3 | *(_DWORD *)((v135 & 0xFFFFFFFFFFFFFFF8) + 24);
                v133 -= (v133 >> 1) + 1;
                v136 = v131 >= v135;
                if (v131 >= v135)
                  v137 = v134 + 1;
                else
                  v137 = 0;
                v83 += 3 * v137;
                if (!v136)
                  v133 = v134;
              }
              while (v133);
LABEL_155:
              v143 = v83 != &v79[3 * v78]
                  && ((v138 = (*v83 >> 1) & 3 | *(_DWORD *)((*v83 & 0xFFFFFFFFFFFFFFF8) + 24),
                       v139 = *(_DWORD *)(v63 + 24),
                       v140 = v139 | v64,
                       v141 = v139 | 1,
                       v138 <= v140)
                    ? (v142 = v138 >= v141)
                    : (v142 = 1),
                      !v142)
                  && v83[1] != v162;
              v69 = v143 << 63 >> 63;
LABEL_163:
              if (!v69)
                goto LABEL_166;
              llvm::RegPressureTracker::discoverLiveInOrOut(a1, v65, v69, *(_QWORD *)(a1 + 48) + 168);
              goto LABEL_165;
            }
          }
          v161 = *(_QWORD *)(a1 + 24);
          v160 = *(unsigned __int8 *)(a1 + 58);
          v91 = sub_1C4851220(*(_QWORD *)(a1 + 32), v65);
          v159 = *(_QWORD *)(v76 + 304);
          v125 = *(_QWORD *)(v76 + 248);
          *(_QWORD *)v159 = v125;
          *(_QWORD *)(v159 + 8) = *(_QWORD *)(v125 + 40);
          *(_OWORD *)(v159 + 16) = *(_OWORD *)(v76 + 288);
          *(_QWORD *)(v159 + 32) = v76 + 312;
          llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v159);
          *(_DWORD *)(v159 + 184) = 0;
          v126 = *(_QWORD *)(v76 + 256);
          v51 = *(_BYTE *)(v126 + 16) == 0;
          v127 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v126 + 24) + 16 * (*(_DWORD *)(v91 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                    + 34);
          v129 = !v51 && v127 != 0;
          llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v76 + 304), (llvm::LiveInterval *)v91, v129);
          llvm::LiveIntervals::computeDeadValues(v76, v91, 0);
          v90 = v65 & 0x7FFFFFFF;
          v89 = v161;
          if (!v160)
            goto LABEL_144;
LABEL_93:
          v92 = *(_QWORD *)(v91 + 104);
          v62 = v75;
          if (v92)
          {
            v69 = 0;
            a3 = v164;
            while (1)
            {
              v93 = *(_DWORD *)(v92 + 8);
              v94 = *(_QWORD **)v92;
              if (v93)
              {
                v95 = v94[3 * v93 - 2];
                v96 = *(_DWORD *)(v63 + 24) | v64;
                v97 = (v95 >> 1) & 3 | *(_DWORD *)((v95 & 0xFFFFFFFFFFFFFFF8) + 24);
                v98 = *(_QWORD **)v92;
                v99 = *(unsigned int *)(v92 + 8);
                if (v96 < v97)
                {
                  do
                  {
                    v100 = v99 >> 1;
                    v101 = v98[3 * (v99 >> 1) + 1];
                    LODWORD(v101) = (v101 >> 1) & 3 | *(_DWORD *)((v101 & 0xFFFFFFFFFFFFFFF8) + 24);
                    v99 -= (v99 >> 1) + 1;
                    v102 = v96 >= v101;
                    if (v96 >= v101)
                      v103 = v100 + 1;
                    else
                      v103 = 0;
                    v98 += 3 * v103;
                    if (!v102)
                      v99 = v100;
                  }
                  while (v99);
                  goto LABEL_106;
                }
              }
              else
              {
                v93 = 0;
              }
              v98 = &v94[3 * v93];
LABEL_106:
              if (v98 != &v94[3 * v93])
              {
                v104 = (*v98 >> 1) & 3 | *(_DWORD *)((*v98 & 0xFFFFFFFFFFFFFFF8) + 24);
                v105 = *(_DWORD *)(v63 + 24);
                v106 = v105 | v64;
                v107 = v105 | 1;
                v108 = v104 > v106 || v104 >= v107;
                if (!v108 && v98[1] != v162)
                  v69 |= *(_QWORD *)(v92 + 112);
              }
              v92 = *(_QWORD *)(v92 + 104);
              if (!v92)
                goto LABEL_163;
            }
          }
          v109 = *(_DWORD *)(v91 + 8);
          v110 = *(_QWORD **)v91;
          if (v109)
          {
            v111 = v110[3 * v109 - 2];
            v112 = *(_DWORD *)(v63 + 24) | v64;
            v113 = (v111 >> 1) & 3 | *(_DWORD *)((v111 & 0xFFFFFFFFFFFFFFF8) + 24);
            v114 = *(_QWORD **)v91;
            v115 = *(unsigned int *)(v91 + 8);
            a3 = v164;
            if (v112 < v113)
            {
              do
              {
                v116 = v115 >> 1;
                v117 = v114[3 * (v115 >> 1) + 1];
                LODWORD(v117) = (v117 >> 1) & 3 | *(_DWORD *)((v117 & 0xFFFFFFFFFFFFFFF8) + 24);
                v115 -= (v115 >> 1) + 1;
                v118 = v112 >= v117;
                if (v112 >= v117)
                  v119 = v116 + 1;
                else
                  v119 = 0;
                v114 += 3 * v119;
                if (!v118)
                  v115 = v116;
              }
              while (v115);
LABEL_130:
              if (v114 != &v110[3 * v109])
              {
                v120 = (*v114 >> 1) & 3 | *(_DWORD *)((*v114 & 0xFFFFFFFFFFFFFFF8) + 24);
                v121 = *(_DWORD *)(v63 + 24);
                v122 = v121 | v64;
                v123 = v121 | 1;
                v124 = v120 > v122 || v120 >= v123;
                if (!v124 && v114[1] != v162)
                {
                  v69 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(v89 + 24) + 16 * v90) & 0xFFFFFFFFFFFFFFF8) + 24);
                  goto LABEL_163;
                }
              }
LABEL_165:
              v69 = 0;
              goto LABEL_166;
            }
          }
          else
          {
            v109 = 0;
            a3 = v164;
          }
          v114 = &v110[3 * v109];
          goto LABEL_130;
        }
      }
LABEL_167:
      v61 += 4;
    }
    while (v61 != (unsigned int *)v62);
  }
  if (*(_BYTE *)(a1 + 57))
  {
    v144 = *((unsigned int *)v163 + 38);
    if ((_DWORD)v144)
    {
      v145 = v163[18];
      v146 = &v145[4 * v144];
      do
      {
        v147 = *v145;
        if ((*v145 & 0x80000000) != 0)
        {
          v148 = v147 & 0x7FFFFFFF;
          v149 = *(_DWORD *)(a1 + 256) + (v147 & 0x7FFFFFFF);
          v150 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 240) + v149);
          v151 = *(_DWORD *)(a1 + 104);
          if (v151 <= v150)
            goto LABEL_178;
          v152 = *(_QWORD *)(a1 + 96);
          while (1)
          {
            v153 = v150;
            if (*(_DWORD *)(v152 + 16 * v150) == v149)
              break;
            v150 += 256;
            if (v153 + 256 >= v151)
              goto LABEL_178;
          }
          if (v151 == v150)
LABEL_178:
            v154 = 0;
          else
            v154 = *(_QWORD *)(v152 + 16 * v150 + 8);
          if ((*((_QWORD *)v145 + 1) & v154) == 0)
          {
            v155 = *(_QWORD *)(a1 + 312);
            v156 = *(unsigned __int8 *)(v155 + v148);
            v157 = *(_DWORD *)(a1 + 272);
            if (v157 <= v156)
              goto LABEL_183;
            while ((*(_DWORD *)(*(_QWORD *)(a1 + 264) + 4 * v156) & 0x7FFFFFFF) != (_DWORD)v148)
            {
              v156 += 256;
              if (v156 >= v157)
                goto LABEL_183;
            }
            if (v157 == v156)
            {
LABEL_183:
              *(_BYTE *)(v155 + v148) = v157;
              v158 = *(unsigned int *)(a1 + 272);
              if (v158 >= *(unsigned int *)(a1 + 276))
              {
                result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 264, a1 + 280, v158 + 1, 4);
                v158 = *(unsigned int *)(a1 + 272);
              }
              *(_DWORD *)(*(_QWORD *)(a1 + 264) + 4 * v158) = v147;
              ++*(_DWORD *)(a1 + 272);
            }
          }
        }
        v145 += 4;
      }
      while (v145 != v146);
    }
  }
  return result;
}

unsigned int *sub_1C525A8B8(unsigned int *result, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;

  v5 = result;
  v6 = *(_QWORD *)result;
  v7 = result[2];
  if ((_DWORD)v7)
  {
    v8 = (_QWORD *)(v6 + 8);
    v9 = 16 * v7;
    while ((_DWORD)a2 != *((_DWORD *)v8 - 2))
    {
      v8 += 2;
      v9 -= 16;
      if (!v9)
        goto LABEL_5;
    }
    *v8 |= a3;
  }
  else
  {
LABEL_5:
    if (v7 >= result[3])
    {
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v7 + 1, 16);
      v6 = *(_QWORD *)v5;
      v7 = v5[2];
    }
    v10 = (_QWORD *)(v6 + 16 * v7);
    *v10 = a2;
    v10[1] = a3;
    ++v5[2];
  }
  return result;
}

_QWORD *sub_1C525A960(_QWORD *result, int a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((unsigned int *)result + 2);
  if ((_DWORD)v3)
  {
    v4 = result;
    v5 = 0;
    v6 = *result;
    v7 = 16 * v3;
    while (a2 != *(_DWORD *)(v6 + v5))
    {
      v5 += 16;
      if (v7 == v5)
        return result;
    }
    result = (_QWORD *)(v6 + v5);
    v8 = *(_QWORD *)(v6 + v5 + 8) & ~a3;
    result[1] = v8;
    if (!v8)
    {
      if (v7 - 16 != v5)
      {
        result = memmove(result, result + 2, v7 - v5 - 16);
        LODWORD(v3) = *((_DWORD *)v4 + 2);
      }
      *((_DWORD *)v4 + 2) = v3 - 1;
    }
  }
  return result;
}

uint64_t llvm::RegPressureTracker::getLiveThroughAt(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t v41;
  unsigned int v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  BOOL v47;
  unint64_t v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  BOOL v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  BOOL v66;
  unint64_t v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  int v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v3 = *(_QWORD *)(a1 + 32);
  if ((a2 & 0x80000000) == 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v3 + 680) + 8 * a2);
    if (!v4)
      return 0;
    v5 = *(unsigned int *)(v4 + 8);
    v6 = *(_QWORD **)v4;
    if ((_DWORD)v5)
    {
      v7 = v6[3 * v5 - 2];
      v8 = *(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (a3 >> 1) & 3;
      if (v8 < ((v7 >> 1) & 3 | *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 24)))
      {
        v9 = v6;
        v10 = v5;
        do
        {
          v11 = v10 >> 1;
          v12 = v9[3 * (v10 >> 1) + 1];
          LODWORD(v12) = (v12 >> 1) & 3 | *(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 24);
          v10 -= (v10 >> 1) + 1;
          v13 = v8 >= v12;
          if (v8 >= v12)
            v14 = v11 + 1;
          else
            v14 = 0;
          v9 += 3 * v14;
          if (!v13)
            v10 = v11;
        }
        while (v10);
        goto LABEL_77;
      }
LABEL_76:
      v9 = &v6[3 * v5];
      goto LABEL_77;
    }
LABEL_75:
    LODWORD(v5) = 0;
    goto LABEL_76;
  }
  v15 = *(_QWORD *)(a1 + 24);
  v16 = a2 & 0x7FFFFFFF;
  if (v16 < *(unsigned int *)(v3 + 416) && (v17 = *(_QWORD *)(*(_QWORD *)(v3 + 408) + 8 * v16)) != 0)
  {
    if (*(_BYTE *)(a1 + 58))
      goto LABEL_16;
  }
  else
  {
    v75 = *(_QWORD *)(a1 + 24);
    v76 = a3;
    v74 = a2 & 0x7FFFFFFF;
    v73 = *(unsigned __int8 *)(a1 + 58);
    v17 = sub_1C4851220(*(_QWORD *)(a1 + 32), a2);
    v54 = *(_QWORD *)(v3 + 304);
    v55 = *(_QWORD *)(v3 + 248);
    v56 = *(_QWORD *)(v55 + 40);
    *(_QWORD *)v54 = v55;
    *(_QWORD *)(v54 + 8) = v56;
    *(_OWORD *)(v54 + 16) = *(_OWORD *)(v3 + 288);
    *(_QWORD *)(v54 + 32) = v3 + 312;
    llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v54);
    *(_DWORD *)(v54 + 184) = 0;
    v57 = *(_QWORD *)(v3 + 256);
    v59 = *(_BYTE *)(v57 + 16) == 0;
    v58 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v57 + 24) + 16 * (*(_DWORD *)(v17 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                             + 34);
    v59 = v59 || v58 == 0;
    v60 = !v59;
    llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v3 + 304), (llvm::LiveInterval *)v17, v60);
    llvm::LiveIntervals::computeDeadValues(v3, v17, 0);
    v16 = v74;
    v15 = v75;
    a3 = v76;
    if (v73)
    {
LABEL_16:
      v18 = *(_QWORD *)(v17 + 104);
      if (v18)
      {
        result = 0;
        v20 = a3 & 0xFFFFFFFFFFFFFFF8;
        v21 = (a3 >> 1) & 3;
        v22 = a3 & 0xFFFFFFFFFFFFFFF8 | 6;
        while (1)
        {
          v23 = *(_DWORD *)(v18 + 8);
          v24 = *(_QWORD **)v18;
          if (v23)
          {
            v25 = v24[3 * v23 - 2];
            v26 = *(_DWORD *)(v20 + 24) | v21;
            v27 = (v25 >> 1) & 3 | *(_DWORD *)((v25 & 0xFFFFFFFFFFFFFFF8) + 24);
            v28 = *(_QWORD **)v18;
            v29 = *(unsigned int *)(v18 + 8);
            if (v26 < v27)
            {
              do
              {
                v30 = v29 >> 1;
                v31 = v28[3 * (v29 >> 1) + 1];
                LODWORD(v31) = (v31 >> 1) & 3 | *(_DWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 24);
                v29 -= (v29 >> 1) + 1;
                v32 = v26 >= v31;
                if (v26 >= v31)
                  v33 = v30 + 1;
                else
                  v33 = 0;
                v28 += 3 * v33;
                if (!v32)
                  v29 = v30;
              }
              while (v29);
              goto LABEL_29;
            }
          }
          else
          {
            v23 = 0;
          }
          v28 = &v24[3 * v23];
LABEL_29:
          if (v28 != &v24[3 * v23])
          {
            v34 = (*v28 >> 1) & 3 | *(_DWORD *)((*v28 & 0xFFFFFFFFFFFFFFF8) + 24);
            v35 = *(_DWORD *)(v20 + 24);
            v36 = v35 | v21;
            v37 = v35 | 1;
            v38 = v34 > v36 || v34 >= v37;
            if (!v38 && v28[1] != v22)
              result |= *(_QWORD *)(v18 + 112);
          }
          v18 = *(_QWORD *)(v18 + 104);
          if (!v18)
            return result;
        }
      }
      v39 = *(_DWORD *)(v17 + 8);
      v40 = *(_QWORD **)v17;
      if (v39)
      {
        v41 = v40[3 * v39 - 2];
        v42 = *(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (a3 >> 1) & 3;
        if (v42 < ((v41 >> 1) & 3 | *(_DWORD *)((v41 & 0xFFFFFFFFFFFFFFF8) + 24)))
        {
          v43 = *(_QWORD **)v17;
          v44 = *(unsigned int *)(v17 + 8);
          do
          {
            v45 = v44 >> 1;
            v46 = v43[3 * (v44 >> 1) + 1];
            LODWORD(v46) = (v46 >> 1) & 3 | *(_DWORD *)((v46 & 0xFFFFFFFFFFFFFFF8) + 24);
            v44 -= (v44 >> 1) + 1;
            v47 = v42 >= v46;
            if (v42 >= v46)
              v48 = v45 + 1;
            else
              v48 = 0;
            v43 += 3 * v48;
            if (!v47)
              v44 = v45;
          }
          while (v44);
LABEL_51:
          if (v43 != &v40[3 * v39])
          {
            v49 = (*v43 >> 1) & 3 | *(_DWORD *)((*v43 & 0xFFFFFFFFFFFFFFF8) + 24);
            v50 = *(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 24);
            v51 = v50 | (a3 >> 1) & 3;
            v52 = v50 | 1;
            v53 = v49 > v51 || v49 >= v52;
            if (!v53 && v43[1] != (a3 & 0xFFFFFFFFFFFFFFF8 | 6))
              return *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(v15 + 24) + 16 * v16) & 0xFFFFFFFFFFFFFFF8) + 24);
          }
          return 0;
        }
      }
      else
      {
        v39 = 0;
      }
      v43 = &v40[3 * v39];
      goto LABEL_51;
    }
  }
  LODWORD(v5) = *(_DWORD *)(v17 + 8);
  v6 = *(_QWORD **)v17;
  if (!(_DWORD)v5)
    goto LABEL_75;
  v61 = v6[3 * v5 - 2];
  v62 = *(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (a3 >> 1) & 3;
  if (v62 >= ((v61 >> 1) & 3 | *(_DWORD *)((v61 & 0xFFFFFFFFFFFFFFF8) + 24)))
    goto LABEL_76;
  v9 = *(_QWORD **)v17;
  v63 = *(unsigned int *)(v17 + 8);
  do
  {
    v64 = v63 >> 1;
    v65 = v9[3 * (v63 >> 1) + 1];
    LODWORD(v65) = (v65 >> 1) & 3 | *(_DWORD *)((v65 & 0xFFFFFFFFFFFFFFF8) + 24);
    v63 -= (v63 >> 1) + 1;
    v66 = v62 >= v65;
    if (v62 >= v65)
      v67 = v64 + 1;
    else
      v67 = 0;
    v9 += 3 * v67;
    if (!v66)
      v63 = v64;
  }
  while (v63);
LABEL_77:
  if (v9 == &v6[3 * v5])
    return 0;
  v68 = (*v9 >> 1) & 3 | *(_DWORD *)((*v9 & 0xFFFFFFFFFFFFFFF8) + 24);
  v69 = *(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFF8) + 24);
  v70 = v69 | (a3 >> 1) & 3;
  v71 = v69 | 1;
  if (v68 > v70 || v68 >= v71)
    return 0;
  if (v9[1] == (a3 & 0xFFFFFFFFFFFFFFF8 | 6))
    return 0;
  else
    return -1;
}

