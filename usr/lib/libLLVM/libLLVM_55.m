char *sub_1C5E2AAF0(uint64_t *a1, uint64_t a2, char *a3, char *a4)
{
  char *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  char v16;
  char v17;

  v5 = a3;
  v7 = *a1;
  v8 = a1[1];
  v9 = a2 - *a1;
  if (*a1 + v8 == a2)
  {
    sub_1C638DE64(a1, a3, a4);
    return (char *)(*a1 + v9);
  }
  else
  {
    v10 = a4 - a3;
    v11 = v8 + a4 - a3;
    if (a1[2] < v11)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, a1 + 3, v11, 1);
      v7 = *a1;
      v8 = a1[1];
    }
    v12 = (char *)(v7 + v9);
    v13 = (_BYTE *)(v7 + v8);
    v14 = v8 - v9;
    if (v8 - v9 >= v10)
    {
      sub_1C5042AFC(a1, &v13[-v10], (char *)(v7 + v8));
      if (&v13[-v10] != v12)
        memmove(&v12[v10], v12, &v13[-v10] - v12);
      if (a4 != v5)
        memmove(v12, v5, a4 - v5);
    }
    else
    {
      a1[1] = v8 + v10;
      if (v9 != v8)
        memcpy((void *)(v7 + v10 + v9), v12, v8 - v9);
      if (v14)
      {
        v15 = v12;
        do
        {
          v16 = *v5++;
          *v15++ = v16;
          --v14;
        }
        while (v14);
      }
      while (v5 != a4)
      {
        v17 = *v5++;
        *v13++ = v17;
      }
    }
  }
  return v12;
}

void llvm::RISCVAttributeParser::stackAlign(llvm::RISCVAttributeParser *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t ULEB128;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  BOOL v10;
  std::string *v11;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type v14;
  __int128 *v15;
  uint64_t v16;
  void *__p[2];
  char v18;
  std::string v19;
  std::string v20;
  __int128 v21;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  ULEB128 = llvm::DataExtractor::getULEB128((uint64_t *)this + 16, (uint64_t *)this + 19, (_QWORD *)this + 20);
  v7 = ULEB128;
  if (ULEB128)
  {
    v8 = (char *)v22 + 5;
    v9 = ULEB128;
    do
    {
      *--v8 = (v9 % 0xA) | 0x30;
      v10 = v9 > 9;
      v9 /= 0xAuLL;
    }
    while (v10);
  }
  else
  {
    v8 = (char *)v22 + 4;
    BYTE4(v22[0]) = 48;
  }
  sub_1C4E61270(&v19, v8, (char *)v22 + 5, (char *)v22 + 5 - v8);
  v11 = std::string::insert(&v19, 0, "Stack alignment is ");
  v12 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v18 = 6;
  strcpy((char *)__p, "-bytes");
  v13 = std::string::append(&v20, (const std::string::value_type *)__p, 6uLL);
  v14 = v13->__r_.__value_.__r.__words[2];
  v21 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v22[0] = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (v18 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (v22[0] >= 0)
    v15 = &v21;
  else
    v15 = (__int128 *)v21;
  if (v22[0] >= 0)
    v16 = HIBYTE(v22[0]) & 0x7F;
  else
    v16 = *((_QWORD *)&v21 + 1);
  llvm::ELFAttributeParser::printAttribute(this, a2, v7, (uint64_t)v15, v16);
  *a3 = 0;
  if (SHIBYTE(v22[0]) < 0)
    operator delete((void *)v21);
}

uint64_t llvm::RISCVAttributeParser::handler@<X0>(uint64_t this@<X0>, BOOL *a2@<X2>, uint64_t a3@<X1>, _QWORD *a4@<X8>)
{
  uint64_t v6;

  v6 = 0;
  *a2 = 0;
  while (llvm::RISCVAttributeParser::displayRoutines[v6] != a3)
  {
    v6 += 6;
    if (v6 == 36)
      goto LABEL_7;
  }
  this = (*(uint64_t (**)(uint64_t))&llvm::RISCVAttributeParser::displayRoutines[v6 + 2])(this);
  if (*a4)
    return this;
  *a2 = 1;
LABEL_7:
  *a4 = 0;
  return this;
}

void llvm::RISCVISAInfo::addExtension(uint64_t a1, const void *a2, std::string::size_type a3, unsigned int a4, unsigned int a5)
{
  std::string *p_dst;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t **v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  std::string __dst;
  std::string __p;
  unint64_t v25;

  memset(&__p, 0, sizeof(__p));
  if (!a2)
  {
    memset(&__p, 0, sizeof(__p));
    v25 = __PAIR64__(a5, a4);
    memset(&__dst, 0, sizeof(__dst));
    goto LABEL_21;
  }
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a3 >= 0x17)
  {
    v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v11 = a3 | 7;
    v12 = v11 + 1;
    p_dst = (std::string *)operator new(v11 + 1);
    __dst.__r_.__value_.__l.__size_ = a3;
    __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = a3;
  p_dst = &__dst;
  if (a3)
LABEL_10:
    memmove(p_dst, a2, a3);
  p_dst->__r_.__value_.__s.__data_[a3] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = __dst;
  v25 = __PAIR64__(a5, a4);
  if (a3 >= 0x17)
  {
    v14 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v14 = a3 | 7;
    v15 = v14 + 1;
    v13 = (std::string *)operator new(v14 + 1);
    __dst.__r_.__value_.__l.__size_ = a3;
    __dst.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = a3;
    v13 = &__dst;
    if (!a3)
      goto LABEL_20;
  }
  memmove(v13, a2, a3);
LABEL_20:
  v13->__r_.__value_.__s.__data_[a3] = 0;
LABEL_21:
  v17 = (uint64_t **)(a1 + 32);
  v16 = *(uint64_t **)(a1 + 32);
  if (!v16)
  {
    v18 = (uint64_t **)(a1 + 32);
LABEL_29:
    v20 = (uint64_t *)operator new(0x58uLL);
    *(std::string *)(v20 + 4) = __dst;
    memset(&__dst, 0, sizeof(__dst));
    *(_OWORD *)(v20 + 7) = 0u;
    *(_OWORD *)(v20 + 9) = 0u;
    *v20 = 0;
    v20[1] = 0;
    v20[2] = (uint64_t)v18;
    *v17 = v20;
    v21 = **(_QWORD **)(a1 + 24);
    v22 = v20;
    if (v21)
    {
      *(_QWORD *)(a1 + 24) = v21;
      v22 = *v17;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 32), v22);
    ++*(_QWORD *)(a1 + 40);
    goto LABEL_32;
  }
  while (1)
  {
    while (1)
    {
      v18 = (uint64_t **)v16;
      v19 = (char *)(v16 + 4);
      if (!llvm::RISCVISAInfo::compareExtension((char *)&__dst, (char *)v16 + 32))
        break;
      v16 = *v18;
      v17 = v18;
      if (!*v18)
        goto LABEL_29;
    }
    if (!llvm::RISCVISAInfo::compareExtension(v19, (char *)&__dst))
      break;
    v17 = v18 + 1;
    v16 = v18[1];
    if (!v16)
      goto LABEL_29;
  }
  v20 = *v17;
  if (!*v17)
    goto LABEL_29;
LABEL_32:
  std::string::operator=((std::string *)(v20 + 7), &__p);
  v20[10] = v25;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

BOOL llvm::RISCVISAInfo::isSupportedExtensionFeature(_QWORD *a1, size_t a2)
{
  BOOL v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  const void *v8;
  size_t v9;

  if (a2 > 0xC
    && (*a1 == 0x656D697265707865 ? (v4 = *(_QWORD *)((char *)a1 + 5) == 0x2D6C61746E656D69) : (v4 = 0), v4))
  {
    v7 = 0;
    v8 = (char *)a1 + 13;
    v9 = a2 - 13;
    do
    {
      result = sub_1C5E2F870(v8, v9, (&off_1E81A1DA0)[v7]);
      if (result)
        break;
      v4 = v7 == 12;
      v7 += 2;
    }
    while (!v4);
  }
  else
  {
    v5 = 0;
    do
    {
      result = sub_1C5E2F870(a1, a2, (&off_1E81A1E10)[v5]);
      if (result)
        break;
      v4 = v5 == 96;
      v5 += 2;
    }
    while (!v4);
  }
  return result;
}

BOOL llvm::RISCVISAInfo::isSupportedExtension(const void *a1, size_t a2)
{
  uint64_t i;
  uint64_t v5;
  _BOOL8 result;
  BOOL v7;

  for (i = 0; i != 98; i += 2)
  {
    if (sub_1C5E2F870(a1, a2, (&off_1E81A1E10)[i]))
      return 1;
  }
  v5 = 0;
  do
  {
    result = sub_1C5E2F870(a1, a2, (&off_1E81A1DA0)[v5]);
    if (result)
      break;
    v7 = v5 == 12;
    v5 += 2;
  }
  while (!v7);
  return result;
}

uint64_t llvm::RISCVISAInfo::hasExtension(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  size_t v3;
  const void *v4;
  void **p_dst;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *i;
  void **__dst;
  size_t v15;
  unint64_t v16;

  v3 = a3;
  v4 = a2;
  if (a3 >= 0xD && *a2 == 0x656D697265707865 && *(_QWORD *)((char *)a2 + 5) == 0x2D6C61746E656D69)
  {
    v3 = a3 - 13;
    v4 = (char *)a2 + 13;
  }
  if (!llvm::RISCVISAInfo::isSupportedExtension(v4, v3))
    return 0;
  if (v4)
  {
    if (v3 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v3 >= 0x17)
    {
      v10 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17)
        v10 = v3 | 7;
      v11 = v10 + 1;
      p_dst = (void **)operator new(v10 + 1);
      v15 = v3;
      v16 = v11 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v16) = v3;
      p_dst = (void **)&__dst;
      if (!v3)
        goto LABEL_22;
    }
    memmove(p_dst, v4, v3);
LABEL_22:
    *((_BYTE *)p_dst + v3) = 0;
    goto LABEL_23;
  }
  __dst = 0;
  v15 = 0;
  v16 = 0;
LABEL_23:
  for (i = *(char **)(a1 + 32); i; i = *(char **)i)
  {
    if ((llvm::RISCVISAInfo::compareExtension((char *)&__dst, i + 32) & 1) == 0)
    {
      if (!llvm::RISCVISAInfo::compareExtension(i + 32, (char *)&__dst))
      {
        v9 = 1;
        goto LABEL_30;
      }
      i += 8;
    }
  }
  v9 = 0;
LABEL_30:
  if (SHIBYTE(v16) < 0)
    operator delete(__dst);
  return v9;
}

uint64_t sub_1C5E2B38C(int __c)
{
  _BYTE *v3;
  uint64_t v4;

  if (__c == 105)
    return 4294967294;
  if (__c == 101)
    return 0xFFFFFFFFLL;
  v3 = memchr("mafdqlcbjtpvn", __c, 0xDuLL);
  v4 = v3 - "mafdqlcbjtpvn";
  if (!v3)
    v4 = -1;
  if (v4 == -1)
    return (__c - 84);
  else
    return v4;
}

uint64_t sub_1C5E2B3F8(char *a1)
{
  char *v1;
  int v2;
  int v3;
  int v4;

  if (a1[23] >= 0)
    v1 = a1;
  else
    v1 = *(char **)a1;
  v2 = *v1;
  if (v2 > 119)
  {
    if (v2 == 120)
    {
      v3 = 0;
      v4 = 768;
    }
    else
    {
      v3 = sub_1C5E2B38C(v1[1]);
      v4 = 512;
    }
  }
  else
  {
    v3 = 0;
    if (v2 == 104)
      v4 = 256;
    else
      v4 = 0;
  }
  return (v4 + v3);
}

void llvm::RISCVISAInfo::toFeatures(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v7;
  _BYTE *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD *v34;
  BOOL v35;
  _QWORD v37[2];
  _BYTE *v38;
  size_t v39;
  __int16 v40;

  v3 = *(_QWORD **)(a1 + 24);
  v4 = (_QWORD *)(a1 + 32);
  if (v3 != (_QWORD *)(a1 + 32))
  {
    v5 = a3;
    do
    {
      v7 = *((_BYTE *)v3 + 55);
      if (v7 >= 0)
        v8 = v3 + 4;
      else
        v8 = (_BYTE *)v3[4];
      if (v7 >= 0)
        v9 = v7 & 0x7F;
      else
        v9 = v3[5];
      if (v9 != 1 || *v8 != 105)
      {
        v10 = 0;
        while (!sub_1C5E2F870(v8, v9, (&off_1E81A1DA0)[v10]))
        {
          v10 += 2;
          if (v10 == 14)
          {
            v40 = 1283;
            v37[0] = "+";
            v38 = v8;
            v39 = v9;
            v11 = *(_QWORD *)(v5 + 24);
            if (v11)
            {
              v12 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v11 + 48))(v11, v37);
              v14 = v13;
              v16 = a2[1];
              v15 = (unint64_t)a2[2];
              if ((unint64_t)v16 >= v15)
              {
                v17 = *a2;
                v18 = ((char *)v16 - (char *)*a2) >> 4;
                v19 = v18 + 1;
                if (!((unint64_t)(v18 + 1) >> 60))
                {
                  v20 = v15 - (_QWORD)v17;
                  if (v20 >> 3 > v19)
                    v19 = v20 >> 3;
                  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
                    v21 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v21 = v19;
                  if (v21)
                  {
                    if (!(v21 >> 60))
                    {
                      v22 = (char *)operator new(16 * v21);
                      goto LABEL_42;
                    }
LABEL_58:
                    sub_1C4764EE4();
                  }
                  v22 = 0;
LABEL_42:
                  v31 = (uint64_t *)&v22[16 * v18];
                  *v31 = v12;
                  v31[1] = v14;
                  v32 = v31;
                  if (v16 != v17)
                  {
                    do
                    {
                      *((_OWORD *)v32 - 1) = *((_OWORD *)v16 - 1);
                      v32 -= 2;
                      v16 -= 2;
                    }
                    while (v16 != v17);
                    goto LABEL_44;
                  }
                  goto LABEL_45;
                }
LABEL_57:
                abort();
              }
LABEL_27:
              *v16 = v12;
              v16[1] = v14;
              v26 = v16 + 2;
              goto LABEL_48;
            }
LABEL_56:
            sub_1C485C2F0();
            goto LABEL_57;
          }
        }
        v40 = 1283;
        v37[0] = "+experimental-";
        v38 = v8;
        v39 = v9;
        v23 = *(_QWORD *)(v5 + 24);
        if (!v23)
          goto LABEL_56;
        v12 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v23 + 48))(v23, v37);
        v14 = v24;
        v16 = a2[1];
        v25 = (unint64_t)a2[2];
        if ((unint64_t)v16 < v25)
          goto LABEL_27;
        v27 = *a2;
        v28 = ((char *)v16 - (char *)*a2) >> 4;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 60)
          goto LABEL_57;
        v30 = v25 - (_QWORD)v27;
        if (v30 >> 3 > v29)
          v29 = v30 >> 3;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
          v21 = 0xFFFFFFFFFFFFFFFLL;
        else
          v21 = v29;
        if (v21)
        {
          if (v21 >> 60)
            goto LABEL_58;
          v22 = (char *)operator new(16 * v21);
        }
        else
        {
          v22 = 0;
        }
        v31 = (uint64_t *)&v22[16 * v28];
        *v31 = v12;
        v31[1] = v14;
        v32 = v31;
        if (v16 != v27)
        {
          do
          {
            *((_OWORD *)v32 - 1) = *((_OWORD *)v16 - 1);
            v32 -= 2;
            v16 -= 2;
          }
          while (v16 != v27);
LABEL_44:
          v16 = *a2;
        }
LABEL_45:
        v26 = v31 + 2;
        *a2 = v32;
        a2[1] = v31 + 2;
        a2[2] = (uint64_t *)&v22[16 * v21];
        if (v16)
          operator delete(v16);
        v5 = a3;
LABEL_48:
        a2[1] = v26;
      }
      v33 = (_QWORD *)v3[1];
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = (_QWORD *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (_QWORD *)v3[2];
          v35 = *v34 == (_QWORD)v3;
          v3 = v34;
        }
        while (!v35);
      }
      v3 = v34;
    }
    while (v34 != v4);
  }
}

void llvm::RISCVISAInfo::parseFeatures(int a1@<W0>, unsigned __int8 **a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  signed __int8 v8;
  BOOL v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  _BOOL8 v13;
  unsigned __int8 *v14;
  size_t v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  llvm::RISCVISAInfo *v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  llvm::RISCVISAInfo *v27;
  uint64_t v28;
  void *__dst[2];
  unint64_t v30;
  llvm::RISCVISAInfo *v31;

  v28 = a3;
  v5 = (_QWORD *)operator new();
  *(_DWORD *)v5 = a1;
  *(_QWORD *)((char *)v5 + 12) = 0;
  *(_QWORD *)((char *)v5 + 4) = 0;
  v5[4] = 0;
  v5[5] = 0;
  v5[3] = v5 + 4;
  v31 = (llvm::RISCVISAInfo *)v5;
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    while (1)
    {
      v8 = v6[23];
      v9 = v8 < 0;
      v10 = *(unsigned __int8 **)v6;
      if (v8 >= 0)
        v10 = v6;
      v11 = v8 & 0x7F;
      v12 = *v10;
      if (v9)
        v11 = *((_QWORD *)v6 + 1);
      v13 = v11 != 0;
      v14 = v11 ? v10 + 1 : v10;
      v15 = v11 - v13;
      v16 = (unint64_t)(v11 - v13) >= 0xD;
      v17 = v11 - v13 - 13;
      if (v16
        && (*(_QWORD *)v14 == 0x656D697265707865 ? (v18 = *(_QWORD *)(v14 + 5) == 0x2D6C61746E656D69) : (v18 = 0),
            v18))
      {
        v14 += 13;
        v19 = &off_1E81A1DA0;
        v20 = 7;
        v15 = v17;
      }
      else
      {
        v19 = &off_1E81A1E10;
        v20 = 49;
      }
      v21 = (unsigned int *)v19 + 3;
      v22 = 16 * v20;
      while (!sub_1C5E2F870(v14, v15, *(char **)(v21 - 3)))
      {
        v21 += 4;
        v22 -= 16;
        if (!v22)
          goto LABEL_22;
      }
      v23 = v31;
      if (v12 != 43)
        break;
      llvm::RISCVISAInfo::addExtension((uint64_t)v31, v14, v15, *(v21 - 1), *v21);
LABEL_22:
      v6 += 24;
      if (v6 == v7)
        goto LABEL_35;
    }
    if (v15 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v15 >= 0x17)
    {
      v25 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v25 = v15 | 7;
      v26 = v25 + 1;
      v24 = (void **)operator new(v25 + 1);
      __dst[1] = (void *)v15;
      v30 = v26 | 0x8000000000000000;
      __dst[0] = v24;
    }
    else
    {
      HIBYTE(v30) = v15;
      v24 = __dst;
      if (!v15)
      {
LABEL_33:
        *((_BYTE *)v24 + v15) = 0;
        sub_1C638E1B0((uint64_t **)v23 + 3, (char *)__dst);
        if (SHIBYTE(v30) < 0)
          operator delete(__dst[0]);
        goto LABEL_22;
      }
    }
    memmove(v24, v14, v15);
    goto LABEL_33;
  }
LABEL_35:
  llvm::RISCVISAInfo::postProcessAndChecking(&v31, v28);
  v27 = v31;
  if (v31)
  {
    sub_1C638E170(*((_QWORD **)v31 + 4));
    MEMORY[0x1CAA32FC0](v27, 0x1020C401F42C5C2);
  }
}

void llvm::RISCVISAInfo::postProcessAndChecking(llvm::RISCVISAInfo **a1@<X0>, uint64_t a2@<X8>)
{
  llvm::RISCVISAInfo *v4;
  llvm::RISCVISAInfo *v5;

  llvm::RISCVISAInfo::updateImplication(*a1);
  llvm::RISCVISAInfo::updateCombination(*a1);
  llvm::RISCVISAInfo::updateFLen(*a1);
  llvm::RISCVISAInfo::updateMinVLen((uint64_t)*a1);
  llvm::RISCVISAInfo::updateMaxELen((uint64_t)*a1);
  llvm::RISCVISAInfo::checkDependency(*a1, &v5);
  v4 = v5;
  if (v5)
  {
    *(_BYTE *)(a2 + 8) |= 1u;
  }
  else
  {
    *(_BYTE *)(a2 + 8) &= ~1u;
    v4 = *a1;
    *a1 = 0;
  }
  *(_QWORD *)a2 = v4;
}

void llvm::RISCVISAInfo::parseArchString(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  BOOL v15;
  int v16;
  llvm::RISCVISAInfo *v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  std::string::size_type v22;
  unint64_t first_of;
  unint64_t v24;
  char *v25;
  uint64_t i;
  char *v27;
  size_t v28;
  uint64_t v29;
  std::string::size_type v30;
  std::string::size_type v31;
  char *v32;
  std::string::size_type v33;
  uint64_t v34;
  char *v35;
  unsigned __int8 *v36;
  char *v37;
  int v38;
  uint64_t v39;
  unsigned __int8 *v40;
  int v41;
  char v42;
  std::string::size_type v43;
  unsigned __int8 *v44;
  BOOL v45;
  unsigned __int8 *v46;
  std::string::size_type v47;
  std::string::size_type v48;
  char *v49;
  char v50;
  _BYTE *v51;
  char *v52;
  unsigned __int8 *v53;
  int v54;
  char *v55;
  const std::error_category *v56;
  uint64_t *v57;
  uint64_t v58;
  _BYTE *v59;
  const std::error_category *v60;
  BOOL v61;
  const char *v62;
  uint64_t *v63;
  uint64_t v64;
  unsigned __int8 **v65;
  uint64_t v66;
  unint64_t v67;
  unsigned __int8 *v68;
  const char *v69;
  size_t v70;
  size_t v71;
  size_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  std::string::size_type v78;
  char **v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  int v87;
  const std::error_category *v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  void **v97;
  uint64_t v98;
  const std::error_category *v99;
  const std::error_category *v100;
  void **v101;
  const std::error_category *v102;
  uint64_t *p_dst;
  const std::error_category *v104;
  uint64_t *v105;
  char *v106;
  char *v107;
  size_t v108;
  _WORD *v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  void *p_p;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  void **v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  unint64_t v127;
  const char *v128;
  size_t v129;
  size_t v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  void **v138;
  uint64_t v139;
  llvm::RISCVISAInfo *v140;
  char *v141;
  unsigned __int8 **v142;
  char *v143;
  unsigned __int8 **v144;
  size_t __len;
  char *v146;
  char v147;
  size_t v148;
  char *__src;
  const char *__srca;
  int v151;
  uint64_t v152;
  void *__p;
  size_t v154;
  int64_t v155;
  uint64_t __dst;
  size_t v157;
  int64_t v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  uint64_t v162;
  unsigned __int8 *v163;
  std::string::size_type v164;
  unsigned __int8 *v165;
  std::string::size_type v166;
  uint64_t v167;
  uint64_t v168;
  llvm::RISCVISAInfo *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  const std::error_category *v173;
  const char *v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  int v179;
  void **v180;
  void **v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  uint64_t *v185;
  unint64_t v186;
  __int16 v187;
  char *v188;
  uint64_t v189;
  _QWORD v190[2];
  __int16 v191;
  __int128 v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  uint64_t v197;
  int v198;
  uint64_t *v199;
  uint64_t v200;

  v200 = *MEMORY[0x1E0C80C00];
  if (!a2)
    goto LABEL_9;
  v10 = 0;
  v11 = MEMORY[0x1E0C80978];
  do
  {
    v12 = *(unsigned __int8 *)(a1 + v10);
    if (*(char *)(a1 + v10) < 0)
    {
      if (__maskrune((char)v12, 0x8000uLL))
      {
LABEL_10:
        *(_QWORD *)&v192 = 22;
        *((_QWORD *)&v192 + 1) = std::generic_category();
        v188 = "string must be lowercase";
        sub_1C5DF1730(&v188, (uint64_t *)&v192, &v171);
        *(_BYTE *)(a5 + 8) |= 1u;
        v13 = v171;
        goto LABEL_11;
      }
    }
    else if ((*(_DWORD *)(v11 + 4 * v12 + 60) & 0x8000) != 0)
    {
      goto LABEL_10;
    }
    ++v10;
  }
  while (a2 != v10);
  if (a2 < 4
    || ((v14 = *(_DWORD *)a1 != 875984498, *(_DWORD *)a1 == 875984498) ? (v15 = 1) : (v15 = *(_DWORD *)a1 == 842233458),
        a2 == 4 || !v15))
  {
LABEL_9:
    *(_QWORD *)&v192 = 22;
    *((_QWORD *)&v192 + 1) = std::generic_category();
    v188 = "string must begin with rv32{i,e,g} or rv64{i,g}";
    sub_1C5DF1730(&v188, (uint64_t *)&v192, &v170);
    *(_BYTE *)(a5 + 8) |= 1u;
    v13 = v170;
LABEL_11:
    *(_QWORD *)a5 = v13;
    return;
  }
  if (*(_DWORD *)a1 == 875984498)
    v16 = 64;
  else
    v16 = 32;
  v17 = (llvm::RISCVISAInfo *)operator new();
  *(_DWORD *)v17 = v16;
  *(_QWORD *)((char *)v17 + 12) = 0;
  *(_QWORD *)((char *)v17 + 4) = 0;
  *((_QWORD *)v17 + 5) = 0;
  *((_QWORD *)v17 + 4) = 0;
  *((_QWORD *)v17 + 3) = (char *)v17 + 32;
  v169 = v17;
  v18 = *(char *)(a1 + 4);
  switch(v18)
  {
    case 'e':
      if (!v14)
      {
        *(_QWORD *)&v192 = 22;
        *((_QWORD *)&v192 + 1) = std::generic_category();
        v188 = "standard user-level extension 'e' requires 'rv32'";
        sub_1C5DF1730(&v188, (uint64_t *)&v192, &v167);
        *(_BYTE *)(a5 + 8) |= 1u;
        *(_QWORD *)a5 = v167;
        v167 = 0;
        goto LABEL_149;
      }
LABEL_26:
      __src = "mafdqlcbjtpvn";
      v19 = 13;
      break;
    case 'g':
      __src = "qlcbjtpvn";
      v19 = 9;
      break;
    case 'i':
      goto LABEL_26;
    default:
      *(_QWORD *)&v192 = 22;
      *((_QWORD *)&v192 + 1) = std::generic_category();
      v188 = "first letter should be 'e', 'i' or 'g'";
      sub_1C5DF1730(&v188, (uint64_t *)&v192, &v168);
      *(_BYTE *)(a5 + 8) |= 1u;
      *(_QWORD *)a5 = v168;
      v168 = 0;
LABEL_149:
      v169 = 0;
      goto LABEL_150;
  }
  v20 = *(unsigned __int8 *)(a1 + 4);
  v21 = (unsigned __int8 *)(a1 + 5);
  v22 = a2 - 5;
  v165 = v21;
  v166 = v22;
  v163 = 0;
  v164 = 0;
  first_of = llvm::StringRef::find_first_of(&v165, "zsx", 3, 0);
  if (first_of != -1)
  {
    if (v22 >= first_of)
      v24 = first_of;
    else
      v24 = v22;
    v163 = &v21[v24];
    v164 = v22 - v24;
    v165 = v21;
    v166 = v24;
    v22 = v24;
  }
  v162 = 0;
  v161 = 0;
  HIBYTE(v193) = 1;
  LOWORD(v192) = v20;
  sub_1C5E2D048(&v188, &v192, 1uLL, v21, v22, (int *)&v162 + 1, (int *)&v162, &v161, a3, a4);
  if (SHIBYTE(v193) < 0)
    operator delete((void *)v192);
  v25 = v188;
  if (v188)
  {
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v25;
    goto LABEL_106;
  }
  v148 = v19;
  v147 = a4;
  if (v20 == 103)
  {
    for (i = 0; i != 5; ++i)
    {
      v27 = off_1E81A2120[i];
      if (v27)
        v28 = strlen(off_1E81A2120[i]);
      else
        v28 = 0;
      v29 = sub_1C5E2DF30(v27, v28);
      if (v27)
        v30 = strlen(v27);
      else
        v30 = 0;
      llvm::RISCVISAInfo::addExtension((uint64_t)v17, v27, v30, v29, HIDWORD(v29));
    }
  }
  else
  {
    HIBYTE(v193) = 1;
    LOWORD(v192) = v20;
    llvm::RISCVISAInfo::addExtension((uint64_t)v17, &v192, 1uLL, HIDWORD(v162), v162);
    if (SHIBYTE(v193) < 0)
      operator delete((void *)v192);
  }
  v31 = v161;
  if (v22 < v161)
    v31 = v22;
  v32 = (char *)&v21[v31];
  v33 = v22 - v31;
  v165 = (unsigned __int8 *)v32;
  v166 = v33;
  if (v33)
  {
    v34 = v19;
    if (*v32 == 95)
    {
      ++v32;
      --v33;
      v165 = (unsigned __int8 *)v32;
      v166 = v33;
    }
  }
  else
  {
    v34 = v19;
  }
  v35 = __src;
  v36 = (unsigned __int8 *)&__src[v34];
  v37 = &v32[v33];
  while (2)
  {
    if (v32 != v37)
    {
      v38 = *v32;
      v39 = *v32;
      if (v35 == (char *)v36)
      {
LABEL_96:
        v59 = memchr(__src, *v32, v148);
        v60 = std::generic_category();
        if (v59)
          v61 = v59 - __src == -1;
        else
          v61 = 1;
        v172 = 0;
        v173 = 0;
        v174 = 0;
        DWORD2(v192) = 0;
        v196 = 0;
        v197 = 0;
        *(_QWORD *)&v192 = &unk_1E81A7208;
        v199 = &v172;
        v198 = 0;
        v194 = 0;
        v195 = 0;
        v193 = 0;
        if (v61)
          v62 = "invalid standard user-level extension '%c'";
        else
          v62 = "standard user-level extension not given in canonical order '%c'";
        v188 = (char *)&off_1E81A2538;
        v189 = (uint64_t)v62;
        v190[0] = v39;
        llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v192, (uint64_t)&v188);
        v63 = v199;
        v64 = operator new();
        v191 = 260;
        v188 = (char *)v63;
        *(_QWORD *)v64 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&v188, (_QWORD *)(v64 + 8));
        *(_QWORD *)(v64 + 32) = 22;
        *(_QWORD *)(v64 + 40) = v60;
        *(_BYTE *)(v64 + 48) = 1;
        *(_QWORD *)&v192 = off_1E81A6E70;
        if (v198 == 1 && v193)
          MEMORY[0x1CAA32F9C](v193, 0x1000C8077774924);
        if (SHIBYTE(v174) < 0)
          operator delete((void *)v172);
        *(_BYTE *)(a5 + 8) |= 1u;
        *(_QWORD *)a5 = v64;
        goto LABEL_106;
      }
      v40 = (unsigned __int8 *)v35;
      while (1)
      {
        v41 = *v40++;
        if (v41 == *v32)
          break;
        v35 = (char *)v40;
        if (v40 == v36)
          goto LABEL_96;
      }
      v184 = 0uLL;
      v185 = 0;
      LODWORD(v181) = 0;
      LODWORD(__dst) = 0;
      LODWORD(__p) = 0;
      v146 = v37;
      v141 = v32 + 1;
      if (v32 + 1 == v37)
      {
        v43 = 0;
        v44 = 0;
        v42 = 0;
      }
      else
      {
        sub_1C4E61270(&v192, v32 + 1, v37, v37 - (v32 + 1));
        if (SHIBYTE(v185) < 0)
          operator delete((void *)v184);
        v185 = v193;
        v184 = v192;
        v42 = HIBYTE(v193);
        v43 = *((_QWORD *)&v192 + 1);
        v44 = (unsigned __int8 *)v192;
      }
      HIBYTE(v193) = 1;
      LOWORD(v192) = v38;
      v45 = v42 < 0;
      if (v42 >= 0)
        v46 = (unsigned __int8 *)&v184;
      else
        v46 = v44;
      v47 = v42 & 0x7F;
      if (v45)
        v48 = v43;
      else
        v48 = v47;
      sub_1C5E2D048(&v188, &v192, 1uLL, v46, v48, (int *)&v181, (int *)&__dst, &__p, a3, v147);
      if (SHIBYTE(v193) < 0)
        operator delete((void *)v192);
      v49 = v188;
      if (v188)
      {
        v50 = 0;
        *(_BYTE *)(a5 + 8) |= 1u;
        *(_QWORD *)a5 = v49;
        goto LABEL_85;
      }
      v51 = memchr("mafdcbv", v38, 7uLL);
      if (!v51 || v51 - "mafdcbv" == -1)
      {
        v56 = std::generic_category();
        v172 = 0;
        v173 = 0;
        v174 = 0;
        DWORD2(v192) = 0;
        v196 = 0;
        v197 = 0;
        *(_QWORD *)&v192 = &unk_1E81A7208;
        v199 = &v172;
        v198 = 0;
        v194 = 0;
        v195 = 0;
        v193 = 0;
        v188 = (char *)&off_1E81A2538;
        v189 = (uint64_t)"unsupported standard user-level extension '%c'";
        v190[0] = v39;
        llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v192, (uint64_t)&v188);
        v57 = v199;
        v58 = operator new();
        v191 = 260;
        v188 = (char *)v57;
        *(_QWORD *)v58 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&v188, (_QWORD *)(v58 + 8));
        *(_QWORD *)(v58 + 32) = 22;
        *(_QWORD *)(v58 + 40) = v56;
        *(_BYTE *)(v58 + 48) = 1;
        *(_QWORD *)&v192 = off_1E81A6E70;
        if (v198 == 1 && v193)
          MEMORY[0x1CAA32F9C](v193, 0x1000C8077774924);
        v37 = v146;
        if (SHIBYTE(v174) < 0)
        {
          operator delete((void *)v172);
          v37 = v146;
        }
        v50 = 0;
        *(_BYTE *)(a5 + 8) |= 1u;
        *(_QWORD *)a5 = v58;
      }
      else
      {
        HIBYTE(v193) = 1;
        LOWORD(v192) = v38;
        llvm::RISCVISAInfo::addExtension((uint64_t)v169, &v192, 1uLL, v181, __dst);
        if (SHIBYTE(v193) < 0)
          operator delete((void *)v192);
        v52 = &v141[__p];
        v54 = *v52;
        v53 = (unsigned __int8 *)(v52 + 1);
        if (v54 == 95)
          v32 = (char *)v53;
        else
          v32 = &v141[__p];
        v50 = 1;
LABEL_85:
        v37 = v146;
      }
      if (SHIBYTE(v185) < 0)
      {
        v55 = v37;
        operator delete((void *)v184);
        v37 = v55;
      }
      ++v35;
      if ((v50 & 1) == 0)
        goto LABEL_106;
      continue;
    }
    break;
  }
  *(_QWORD *)&v192 = &v193;
  *((_QWORD *)&v192 + 1) = 0x800000000;
  llvm::StringRef::split((char *)&v163, (uint64_t)&v192, 95, -1, 1);
  v188 = (char *)v190;
  v189 = 0x800000000;
  v65 = (unsigned __int8 **)v192;
  if (DWORD2(v192) <= 1 && (!DWORD2(v192) || !*(_QWORD *)(v192 + 8)))
    goto LABEL_203;
  v66 = 0;
  v140 = v169;
  v142 = (unsigned __int8 **)(v192 + 16 * DWORD2(v192));
LABEL_112:
  v67 = (unint64_t)v65[1];
  if (!v67)
  {
    v99 = std::generic_category();
    v172 = 22;
    v173 = v99;
    *(_QWORD *)&v184 = "extension name missing after separator '_'";
    sub_1C5DF1730((_BYTE **)&v184, &v172, &v160);
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v160;
    v160 = 0;
    goto LABEL_281;
  }
  v144 = v65;
  v68 = *v65;
  v69 = sub_1C5E2E01C(*v65, v67);
  v71 = v70;
  __srca = sub_1C5E2E09C(v68, v67);
  __len = v72;
  v73 = (v67 - 1);
  v74 = v73 & ((int)v73 >> 31);
  while (1)
  {
    v75 = v73;
    if ((int)v73 < 1)
      break;
    v76 = v68[v73--];
    if ((v76 - 48) >= 0xA)
    {
      v74 = v73 + 1;
      if (v76 == 112 && v68[v73] - 48 <= 9)
      {
        if ((_DWORD)v73)
        {
          v77 = v73;
          while (v68[v77] - 48 <= 9)
          {
            --v77;
            if (--v75 <= 1)
              goto LABEL_122;
          }
          v74 = v75 - 1;
        }
        else
        {
LABEL_122:
          v74 = 0;
        }
      }
      break;
    }
  }
  if (v67 >= v74 + 1)
    v78 = v74 + 1;
  else
    v78 = v67;
  if (!v71)
  {
    v100 = std::generic_category();
    v187 = 1283;
    *(_QWORD *)&v184 = "invalid extension prefix '";
    v185 = (uint64_t *)v68;
    v186 = v67;
    v172 = (uint64_t)&v184;
    v174 = "'";
    LOWORD(v176) = 770;
    llvm::Twine::str((llvm::Twine *)&v172, &v181);
    if (v183 >= 0)
      v101 = (void **)&v181;
    else
      v101 = v181;
    __dst = 22;
    v157 = (size_t)v100;
    __p = v101;
    sub_1C5DF1730((_BYTE **)&__p, &__dst, &v159);
    if (SHIBYTE(v183) < 0)
      operator delete(v181);
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v159;
    v159 = 0;
    goto LABEL_281;
  }
  v79 = &(&off_1E81A2148)[2 * v66 + 1];
  do
  {
    if (*v79 == (char *)v71 && !memcmp(*(v79 - 1), v69, v71))
    {
      if (v78 == v71)
      {
        v102 = std::generic_category();
        if (__srca)
        {
          if (__len > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_285;
          if (__len >= 0x17)
          {
            v112 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((__len | 7) != 0x17)
              v112 = __len | 7;
            v113 = v112 + 1;
            p_dst = (uint64_t *)operator new(v112 + 1);
            v157 = __len;
            v158 = v113 | 0x8000000000000000;
            __dst = (uint64_t)p_dst;
          }
          else
          {
            HIBYTE(v158) = __len;
            p_dst = &__dst;
            if (!__len)
              goto LABEL_210;
          }
          memmove(p_dst, __srca, __len);
LABEL_210:
          *((_BYTE *)p_dst + __len) = 0;
          if (v158 >= 0)
            v110 = &__dst;
          else
            v110 = (uint64_t *)__dst;
        }
        else
        {
          __dst = 0;
          v157 = 0;
          v110 = &__dst;
          v158 = 0;
        }
        if (v69)
        {
          if (v71 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_285;
          if (v71 >= 0x17)
          {
            v116 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v71 | 7) != 0x17)
              v116 = v71 | 7;
            v117 = v116 + 1;
            p_p = operator new(v116 + 1);
            v154 = v71;
            v155 = v117 | 0x8000000000000000;
            __p = p_p;
          }
          else
          {
            HIBYTE(v155) = v71;
            p_p = &__p;
          }
          memmove(p_p, v69, v71);
          *((_BYTE *)p_p + v71) = 0;
          v115 = &__p;
          if (v155 < 0)
            v115 = __p;
        }
        else
        {
          __p = 0;
          v154 = 0;
          v115 = &__p;
          v155 = 0;
        }
        v182 = 0;
        v183 = 0;
        LODWORD(v173) = 0;
        v177 = 0;
        v178 = 0;
        v172 = (uint64_t)&unk_1E81A7208;
        v180 = (void **)&v181;
        v181 = 0;
        v179 = 0;
        v175 = 0;
        v176 = 0;
        v174 = 0;
        *(_QWORD *)&v184 = &unk_1E813E940;
        *((_QWORD *)&v184 + 1) = "%s name missing after '%s'";
        v185 = v110;
        v186 = (unint64_t)v115;
        llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v172, (uint64_t)&v184);
        v118 = v180;
        v119 = operator new();
        v187 = 260;
        *(_QWORD *)&v184 = v118;
        *(_QWORD *)v119 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&v184, (_QWORD *)(v119 + 8));
        *(_QWORD *)(v119 + 32) = 22;
        *(_QWORD *)(v119 + 40) = v102;
        *(_BYTE *)(v119 + 48) = 1;
        v172 = (uint64_t)off_1E81A6E70;
        if (v179 == 1 && v174)
          MEMORY[0x1CAA32F9C](v174, 0x1000C8077774924);
        if (SHIBYTE(v183) < 0)
          operator delete(v181);
        *(_BYTE *)(a5 + 8) |= 1u;
        *(_QWORD *)a5 = v119;
        goto LABEL_277;
      }
      v152 = 0;
      sub_1C5E2D048(&v172, v68, v78, &v68[v78], v67 - v78, (int *)&v152 + 1, (int *)&v152, &v151, a3, v147);
      v80 = v172;
      if (v172)
      {
        *(_BYTE *)(a5 + 8) |= 1u;
        *(_QWORD *)a5 = v80;
        goto LABEL_281;
      }
      v81 = v188;
      v82 = v189;
      if ((_DWORD)v189)
      {
        v83 = 16 * v189;
        v84 = v188;
        v143 = &v188[v83];
        while (*((_QWORD *)v84 + 1) != v78 || v78 && memcmp(*(const void **)v84, v68, v78))
        {
          v84 += 16;
          v83 -= 16;
          if (!v83)
          {
            v84 = v143;
            break;
          }
        }
      }
      else
      {
        v84 = v188;
      }
      if (v82 != (v84 - v81) >> 4)
      {
        v104 = std::generic_category();
        if (!__srca)
        {
          __dst = 0;
          v157 = 0;
          v111 = &__dst;
          v158 = 0;
          goto LABEL_234;
        }
        if (__len <= 0x7FFFFFFFFFFFFFF7)
        {
          if (__len >= 0x17)
          {
            v120 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((__len | 7) != 0x17)
              v120 = __len | 7;
            v121 = v120 + 1;
            v105 = (uint64_t *)operator new(v120 + 1);
            v157 = __len;
            v158 = v121 | 0x8000000000000000;
            __dst = (uint64_t)v105;
          }
          else
          {
            HIBYTE(v158) = __len;
            v105 = &__dst;
            if (!__len)
              goto LABEL_231;
          }
          memmove(v105, __srca, __len);
LABEL_231:
          *((_BYTE *)v105 + __len) = 0;
          if (v158 >= 0)
            v111 = &__dst;
          else
            v111 = (uint64_t *)__dst;
LABEL_234:
          if (!v68)
          {
            __p = 0;
            v154 = 0;
            v123 = &__p;
            v155 = 0;
            goto LABEL_246;
          }
          if (v78 <= 0x7FFFFFFFFFFFFFF7)
          {
            if (v78 >= 0x17)
            {
              v124 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v78 | 7) != 0x17)
                v124 = v78 | 7;
              v125 = v124 + 1;
              v122 = operator new(v124 + 1);
              v154 = v78;
              v155 = v125 | 0x8000000000000000;
              __p = v122;
            }
            else
            {
              HIBYTE(v155) = v78;
              v122 = &__p;
              if (!v78)
                goto LABEL_244;
            }
            memmove(v122, v68, v78);
LABEL_244:
            *((_BYTE *)v122 + v78) = 0;
            v123 = &__p;
            if (v155 < 0)
              v123 = __p;
LABEL_246:
            v182 = 0;
            v183 = 0;
            LODWORD(v173) = 0;
            v177 = 0;
            v178 = 0;
            v172 = (uint64_t)&unk_1E81A7208;
            v180 = (void **)&v181;
            v181 = 0;
            v179 = 0;
            v175 = 0;
            v176 = 0;
            v174 = 0;
            *(_QWORD *)&v184 = &unk_1E813E940;
            *((_QWORD *)&v184 + 1) = "duplicated %s '%s'";
            v185 = v111;
LABEL_273:
            v186 = (unint64_t)v123;
            llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v172, (uint64_t)&v184);
            v138 = v180;
            v139 = operator new();
            v187 = 260;
            *(_QWORD *)&v184 = v138;
            *(_QWORD *)v139 = off_1E81A0C88;
            llvm::Twine::str((llvm::Twine *)&v184, (_QWORD *)(v139 + 8));
            *(_QWORD *)(v139 + 32) = 22;
            *(_QWORD *)(v139 + 40) = v104;
            *(_BYTE *)(v139 + 48) = 1;
            v172 = (uint64_t)off_1E81A6E70;
            if (v179 == 1 && v174)
              MEMORY[0x1CAA32F9C](v174, 0x1000C8077774924);
            if (SHIBYTE(v183) < 0)
              operator delete(v181);
            *(_BYTE *)(a5 + 8) |= 1u;
            *(_QWORD *)a5 = v139;
LABEL_277:
            if (SHIBYTE(v155) < 0)
              operator delete(__p);
            if (SHIBYTE(v158) < 0)
              goto LABEL_280;
            goto LABEL_281;
          }
        }
LABEL_285:
        abort();
      }
      llvm::RISCVISAInfo::addExtension((uint64_t)v140, v68, v78, HIDWORD(v152), v152);
      v85 = v189;
      if (v189 >= (unint64_t)HIDWORD(v189))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v188, (uint64_t)v190, v189 + 1, 16);
        v85 = v189;
      }
      v86 = &v188[16 * v85];
      *(_QWORD *)v86 = v68;
      *((_QWORD *)v86 + 1) = v78;
      v87 = v189 + 1;
      LODWORD(v189) = v189 + 1;
      v65 = v144 + 2;
      if (v144 + 2 == v142)
      {
        if (v87)
        {
          v106 = v188;
          v107 = &v188[16 * v87];
          while (1)
          {
            v109 = *(_WORD **)v106;
            v108 = *((_QWORD *)v106 + 1);
            if (!llvm::RISCVISAInfo::isSupportedExtension(*(const void **)v106, v108))
              break;
            v106 += 16;
            if (v106 == v107)
              goto LABEL_203;
          }
          v126 = (char *)sub_1C5E2E01C(v109, v108);
          v128 = sub_1C5E2E09C(v126, v127);
          v130 = v129;
          v104 = std::generic_category();
          if (v128)
          {
            if (v130 > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_285;
            if (v130 >= 0x17)
            {
              v133 = (v130 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v130 | 7) != 0x17)
                v133 = v130 | 7;
              v134 = v133 + 1;
              v131 = (uint64_t *)operator new(v133 + 1);
              v157 = v130;
              v158 = v134 | 0x8000000000000000;
              __dst = (uint64_t)v131;
            }
            else
            {
              HIBYTE(v158) = v130;
              v131 = &__dst;
              if (!v130)
                goto LABEL_257;
            }
            memmove(v131, v128, v130);
LABEL_257:
            *((_BYTE *)v131 + v130) = 0;
            if (v158 >= 0)
              v132 = &__dst;
            else
              v132 = (uint64_t *)__dst;
          }
          else
          {
            __dst = 0;
            v157 = 0;
            v132 = &__dst;
            v158 = 0;
          }
          if (v109)
          {
            if (v108 > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_285;
            if (v108 >= 0x17)
            {
              v136 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v108 | 7) != 0x17)
                v136 = v108 | 7;
              v137 = v136 + 1;
              v135 = operator new(v136 + 1);
              v154 = v108;
              v155 = v137 | 0x8000000000000000;
              __p = v135;
            }
            else
            {
              HIBYTE(v155) = v108;
              v135 = &__p;
              if (!v108)
                goto LABEL_270;
            }
            memmove(v135, v109, v108);
LABEL_270:
            *((_BYTE *)v135 + v108) = 0;
            v123 = &__p;
            if (v155 < 0)
              v123 = __p;
          }
          else
          {
            __p = 0;
            v154 = 0;
            v123 = &__p;
            v155 = 0;
          }
          v182 = 0;
          v183 = 0;
          LODWORD(v173) = 0;
          v177 = 0;
          v178 = 0;
          v172 = (uint64_t)&unk_1E81A7208;
          v180 = (void **)&v181;
          v181 = 0;
          v179 = 0;
          v175 = 0;
          v176 = 0;
          v174 = 0;
          *(_QWORD *)&v184 = &unk_1E813E940;
          *((_QWORD *)&v184 + 1) = "unsupported %s '%s'";
          v185 = v132;
          goto LABEL_273;
        }
LABEL_203:
        llvm::RISCVISAInfo::postProcessAndChecking(&v169, a5);
        goto LABEL_281;
      }
      goto LABEL_112;
    }
    ++v66;
    v79 += 2;
  }
  while (v66 != 4);
  v88 = std::generic_category();
  if (!__srca)
  {
    __dst = 0;
    v157 = 0;
    v90 = &__dst;
    v158 = 0;
    goto LABEL_164;
  }
  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_285;
  if (__len >= 0x17)
  {
    v91 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v91 = __len | 7;
    v92 = v91 + 1;
    v89 = (uint64_t *)operator new(v91 + 1);
    v157 = __len;
    v158 = v92 | 0x8000000000000000;
    __dst = (uint64_t)v89;
  }
  else
  {
    HIBYTE(v158) = __len;
    v89 = &__dst;
    if (!__len)
      goto LABEL_161;
  }
  memmove(v89, __srca, __len);
LABEL_161:
  *((_BYTE *)v89 + __len) = 0;
  if (v158 >= 0)
    v90 = &__dst;
  else
    v90 = (uint64_t *)__dst;
LABEL_164:
  if (!v68)
  {
    __p = 0;
    v154 = 0;
    v94 = &__p;
    v155 = 0;
    goto LABEL_174;
  }
  if (v67 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_285;
  if (v67 >= 0x17)
  {
    v95 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v67 | 7) != 0x17)
      v95 = v67 | 7;
    v96 = v95 + 1;
    v93 = operator new(v95 + 1);
    v154 = v67;
    v155 = v96 | 0x8000000000000000;
    __p = v93;
  }
  else
  {
    HIBYTE(v155) = v67;
    v93 = &__p;
  }
  memmove(v93, v68, v67);
  *((_BYTE *)v93 + v67) = 0;
  v94 = &__p;
  if (v155 < 0)
    v94 = __p;
LABEL_174:
  v182 = 0;
  v183 = 0;
  LODWORD(v173) = 0;
  v177 = 0;
  v178 = 0;
  v172 = (uint64_t)&unk_1E81A7208;
  v180 = (void **)&v181;
  v181 = 0;
  v179 = 0;
  v175 = 0;
  v176 = 0;
  v174 = 0;
  *(_QWORD *)&v184 = &unk_1E813E940;
  *((_QWORD *)&v184 + 1) = "%s not given in canonical order '%s'";
  v185 = v90;
  v186 = (unint64_t)v94;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v172, (uint64_t)&v184);
  v97 = v180;
  v98 = operator new();
  v187 = 260;
  *(_QWORD *)&v184 = v97;
  *(_QWORD *)v98 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v184, (_QWORD *)(v98 + 8));
  *(_QWORD *)(v98 + 32) = 22;
  *(_QWORD *)(v98 + 40) = v88;
  *(_BYTE *)(v98 + 48) = 1;
  v172 = (uint64_t)off_1E81A6E70;
  if (v179 == 1 && v174)
    MEMORY[0x1CAA32F9C](v174, 0x1000C8077774924);
  if (SHIBYTE(v183) < 0)
    operator delete(v181);
  *(_BYTE *)(a5 + 8) |= 1u;
  *(_QWORD *)a5 = v98;
  if (SHIBYTE(v155) < 0)
    operator delete(__p);
  if (SHIBYTE(v158) < 0)
LABEL_280:
    operator delete((void *)__dst);
LABEL_281:
  if (v188 != (char *)v190)
    free(v188);
  if ((uint64_t **)v192 != &v193)
    free((void *)v192);
LABEL_106:
  v17 = v169;
  v169 = 0;
  if (v17)
  {
LABEL_150:
    sub_1C638E170(*((_QWORD **)v17 + 4));
    MEMORY[0x1CAA32FC0](v17, 0x1020C401F42C5C2);
  }
}

void sub_1C5E2D048(_QWORD *a1, _BYTE *a2, std::string::size_type a3, unsigned __int8 *a4, std::string::size_type a5, int *a6, int *a7, _DWORD *a8, char a9, char a10)
{
  _QWORD *v13;
  unint64_t v14;
  std::string::size_type v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  unsigned __int8 *v23;
  std::string::size_type v24;
  int v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  const std::error_category *v29;
  const char *v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  int v38;
  const std::error_category *v39;
  std::string *v40;
  _QWORD *v41;
  uint64_t v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  _QWORD *v47;
  std::string *p_dst;
  std::string *v49;
  std::string *v50;
  unint64_t v51;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  std::string *v56;
  std::string::size_type v57;
  const std::string::value_type *v58;
  uint64_t v59;
  uint64_t v60;
  std::string *v61;
  std::string::size_type v62;
  std::string *v63;
  std::string::size_type v64;
  const std::error_category *v65;
  std::string *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  std::string *v70;
  std::string::size_type v71;
  std::string *v72;
  uint64_t v73;
  uint64_t v74;
  std::string *v75;
  std::string::size_type v76;
  std::string *v77;
  uint64_t v78;
  uint64_t v79;
  std::string *v80;
  std::string::size_type v81;
  std::string *v82;
  std::string::size_type size;
  void *v84;
  uint64_t v85;
  int v86;
  unint64_t v87;
  std::string *v88;
  std::string::size_type v89;
  std::string *v90;
  std::string::size_type v91;
  unint64_t v92;
  char *v93;
  BOOL v94;
  void **v95;
  std::string::size_type v96;
  std::string *v97;
  std::string::size_type v98;
  std::string *v99;
  std::string::size_type v100;
  char *v101;
  void **v102;
  std::string::size_type v103;
  std::string *v104;
  std::string::size_type v105;
  std::string *v106;
  std::string::size_type v107;
  std::string *v108;
  std::string::size_type v109;
  const std::error_category *v110;
  std::string *v111;
  uint64_t v112;
  uint64_t v113;
  std::string *v114;
  std::string::size_type v115;
  std::string *v116;
  std::string::size_type v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  std::string *v121;
  std::string::size_type v122;
  std::string *v123;
  std::string::size_type v124;
  std::string *v125;
  std::string::size_type v126;
  char v127;
  std::string::size_type __len;
  void *__p[2];
  char v132;
  void *v133[2];
  char v134;
  std::string v135;
  std::string v136;
  std::string v137;
  std::string v138;
  std::string v139;
  std::string __dst;
  std::string::size_type v141;
  __int16 v142;
  std::string v143;
  std::string v144;
  __int16 v145;
  uint64_t v146;

  v13 = a1;
  v146 = *MEMORY[0x1E0C80C00];
  *a6 = 0;
  *a7 = 0;
  *a8 = 0;
  if (a5)
  {
    v14 = 0;
    while (a4[v14] - 48 <= 9)
    {
      if (a5 == ++v14)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v14 = -1;
  }
  if (a5 >= v14)
    v15 = v14;
  else
    v15 = a5;
  v16 = a5 - v15;
  if (!v15)
  {
    v17 = 0;
    goto LABEL_53;
  }
  if (v16 && a4[v15] == 112)
  {
    v17 = &a4[v15 + 1];
    v18 = v16 - 1;
    if (v18)
    {
      v19 = 0;
      while (v17[v19] - 48 <= 9)
      {
        if (v18 == ++v19)
          goto LABEL_16;
      }
    }
    else
    {
LABEL_16:
      v19 = -1;
    }
    if (v18 >= v19)
      v20 = v19;
    else
      v20 = v18;
    if (!v20)
    {
      v29 = std::generic_category();
      v142 = 1283;
      v30 = "minor version number missing after 'p' for extension '";
      goto LABEL_82;
    }
    v21 = v18 >= v15 + 1;
    v16 = v18 - (v15 + 1);
    if (!v21)
      v16 = 0;
  }
  else
  {
    v20 = 0;
    v17 = 0;
  }
  v22 = 0;
  v23 = a4;
  v24 = v15;
  while (1)
  {
    v25 = *v23;
    if ((v25 - 48) < 0xA)
    {
      v26 = -48;
      goto LABEL_28;
    }
    if ((v25 - 97) < 0x1A)
    {
      v26 = -87;
      goto LABEL_28;
    }
    if ((v25 - 65) > 0x19)
      break;
    v26 = -55;
LABEL_28:
    v27 = v26 + v25;
    if (v27 > 9)
      break;
    v28 = 10 * v22 + v27;
    if (v22 > v28 / 0xA)
      goto LABEL_70;
    ++v23;
    v22 = v28;
    if (!--v24)
      goto LABEL_39;
  }
  v28 = v22;
LABEL_39:
  if (HIDWORD(v28) || v24)
  {
LABEL_70:
    v29 = std::generic_category();
    v142 = 1283;
    v30 = "Failed to parse major version number for extension '";
    goto LABEL_82;
  }
  *a6 = v28;
  if (v20)
  {
    v31 = 0;
    v32 = 0;
    do
    {
      v33 = v17[v31];
      if ((v33 - 48) >= 0xA)
      {
        if ((v33 - 97) >= 0x1A)
        {
          if ((v33 - 65) > 0x19)
            goto LABEL_81;
          v34 = -55;
        }
        else
        {
          v34 = -87;
        }
      }
      else
      {
        v34 = -48;
      }
      v35 = v34 + v33;
      if (v35 > 9)
        goto LABEL_81;
      v36 = 10 * v32 + v35;
      if (v32 > v36 / 0xA)
        goto LABEL_81;
      ++v31;
      v32 = v36;
    }
    while (v20 != v31);
    if (!HIDWORD(v36))
    {
      v37 = 0;
      *a7 = v36;
      v38 = v15 + v20 + 1;
      goto LABEL_54;
    }
LABEL_81:
    v29 = std::generic_category();
    v142 = 1283;
    v30 = "Failed to parse minor version number for extension '";
LABEL_82:
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
    __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)a2;
    v141 = a3;
    v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
    v144.__r_.__value_.__r.__words[2] = (std::string::size_type)"'";
    v145 = 770;
    llvm::Twine::str((llvm::Twine *)&v144, &v143);
    if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = &v143;
    else
      v49 = (std::string *)v143.__r_.__value_.__r.__words[0];
    v139.__r_.__value_.__r.__words[0] = 22;
    v139.__r_.__value_.__l.__size_ = (std::string::size_type)v29;
    v138.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
    sub_1C5DF1730(&v138.__r_.__value_.__l.__data_, (uint64_t *)&v139, v13);
LABEL_126:
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v143.__r_.__value_.__l.__data_);
    return;
  }
LABEL_53:
  v20 = 0;
  v37 = 1;
  v38 = v15;
LABEL_54:
  *a8 = v38;
  if (a3 >= 2 && v16)
  {
    v143.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
    *(_OWORD *)&v143.__r_.__value_.__r.__words[1] = xmmword_1C8670070;
    strcpy(v143.__r_.__value_.__l.__data_, "multi-character extensions must be separated by underscores");
    goto LABEL_57;
  }
  v127 = v37;
  __len = v20;
  v43 = 0;
  while (2)
  {
    if (sub_1C5E2F870(a2, a3, (&off_1E81A1DA0)[v43]))
    {
      if ((a9 & 1) != 0)
      {
        v46 = (unint64_t)(&off_1E81A1DA0)[v43 + 1];
        if (!(__len | v15) && a10)
        {
          if (!a2)
          {
            memset(&__dst, 0, sizeof(__dst));
            v47 = a1;
LABEL_115:
            v62 = v61->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v144.__r_.__value_.__l.__data_ = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
            v144.__r_.__value_.__r.__words[2] = v62;
            v61->__r_.__value_.__l.__size_ = 0;
            v61->__r_.__value_.__r.__words[2] = 0;
            v61->__r_.__value_.__r.__words[0] = 0;
            goto LABEL_116;
          }
          v47 = a1;
          if (a3 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_271;
          if (a3 >= 0x17)
          {
            v59 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((a3 | 7) != 0x17)
              v59 = a3 | 7;
            v60 = v59 + 1;
            p_dst = (std::string *)operator new(v59 + 1);
            __dst.__r_.__value_.__l.__size_ = a3;
            __dst.__r_.__value_.__r.__words[2] = v60 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          }
          else
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = a3;
            p_dst = &__dst;
            if (!a3)
              goto LABEL_114;
          }
          memmove(p_dst, a2, a3);
LABEL_114:
          p_dst->__r_.__value_.__s.__data_[a3] = 0;
          goto LABEL_115;
        }
        if (!a10)
          goto LABEL_101;
        v51 = HIDWORD(v46);
        if (*a6 == (_DWORD)v46 && *a7 == HIDWORD(v46))
          goto LABEL_101;
        if (!a4)
        {
          memset(&v144, 0, sizeof(v144));
          goto LABEL_140;
        }
        if (v15 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_271;
        if (v15 >= 0x17)
        {
          v68 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v15 | 7) != 0x17)
            v68 = v15 | 7;
          v69 = v68 + 1;
          v53 = operator new(v68 + 1);
          v144.__r_.__value_.__l.__size_ = v15;
          v144.__r_.__value_.__r.__words[2] = v69 | 0x8000000000000000;
          v144.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
        }
        else
        {
          *((_BYTE *)&v144.__r_.__value_.__s + 23) = v15;
          v53 = &v144;
          if (!v15)
            goto LABEL_139;
        }
        memmove(v53, a4, v15);
LABEL_139:
        *((_BYTE *)v53 + v15) = 0;
LABEL_140:
        v70 = std::string::insert(&v144, 0, "unsupported version number ");
        v71 = v70->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v143.__r_.__value_.__l.__data_ = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
        v143.__r_.__value_.__r.__words[2] = v71;
        v70->__r_.__value_.__l.__size_ = 0;
        v70->__r_.__value_.__r.__words[2] = 0;
        v70->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v144.__r_.__value_.__l.__data_);
        if ((v127 & 1) == 0)
        {
          if (v17)
          {
            if (__len > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_271;
            if (__len >= 0x17)
            {
              v78 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((__len | 7) != 0x17)
                v78 = __len | 7;
              v79 = v78 + 1;
              v72 = (std::string *)operator new(v78 + 1);
              __dst.__r_.__value_.__l.__size_ = __len;
              __dst.__r_.__value_.__r.__words[2] = v79 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
            }
            else
            {
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len;
              v72 = &__dst;
            }
            memmove(v72, v17, __len);
            v72->__r_.__value_.__s.__data_[__len] = 0;
          }
          else
          {
            memset(&__dst, 0, sizeof(__dst));
          }
          v80 = std::string::insert(&__dst, 0, ".");
          v81 = v80->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v144.__r_.__value_.__l.__data_ = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
          v144.__r_.__value_.__r.__words[2] = v81;
          v80->__r_.__value_.__l.__size_ = 0;
          v80->__r_.__value_.__r.__words[2] = 0;
          v80->__r_.__value_.__r.__words[0] = 0;
          if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v82 = &v144;
          else
            v82 = (std::string *)v144.__r_.__value_.__r.__words[0];
          if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = *((_BYTE *)&v144.__r_.__value_.__s + 23) & 0x7F;
          else
            size = v144.__r_.__value_.__l.__size_;
          std::string::append(&v143, (const std::string::value_type *)v82, size);
          if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v144.__r_.__value_.__l.__data_);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
        }
        if (!a2)
        {
          memset(&v135, 0, sizeof(v135));
LABEL_184:
          v88 = std::string::insert(&v135, 0, " for experimental extension '");
          v89 = v88->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v136.__r_.__value_.__l.__data_ = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
          v136.__r_.__value_.__r.__words[2] = v89;
          v88->__r_.__value_.__l.__size_ = 0;
          v88->__r_.__value_.__r.__words[2] = 0;
          v88->__r_.__value_.__r.__words[0] = 0;
          v90 = std::string::append(&v136, "'(this compiler supports ");
          v91 = v90->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v137.__r_.__value_.__l.__data_ = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
          v137.__r_.__value_.__r.__words[2] = v91;
          v90->__r_.__value_.__l.__size_ = 0;
          v90->__r_.__value_.__r.__words[2] = 0;
          v90->__r_.__value_.__r.__words[0] = 0;
          v92 = v46;
          if ((_DWORD)v46)
          {
            v93 = &v144.__r_.__value_.__s.__data_[21];
            do
            {
              *--v93 = (v92 % 0xA) | 0x30;
              v94 = v92 > 9;
              v92 /= 0xAuLL;
            }
            while (v94);
          }
          else
          {
            v93 = &v144.__r_.__value_.__s.__data_[20];
            v144.__r_.__value_.__s.__data_[20] = 48;
          }
          sub_1C4E61270(v133, v93, &v144.__r_.__value_.__s.__data_[21], (char *)&v144.__r_.__value_.__r.__words[2] + 5 - v93);
          if (v134 >= 0)
            v95 = v133;
          else
            v95 = (void **)v133[0];
          if (v134 >= 0)
            v96 = v134 & 0x7F;
          else
            v96 = (std::string::size_type)v133[1];
          v97 = std::string::append(&v137, (const std::string::value_type *)v95, v96);
          v98 = v97->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v138.__r_.__value_.__l.__data_ = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
          v138.__r_.__value_.__r.__words[2] = v98;
          v97->__r_.__value_.__l.__size_ = 0;
          v97->__r_.__value_.__r.__words[2] = 0;
          v97->__r_.__value_.__r.__words[0] = 0;
          v99 = std::string::append(&v138, ".");
          v100 = v99->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v139.__r_.__value_.__l.__data_ = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
          v139.__r_.__value_.__r.__words[2] = v100;
          v99->__r_.__value_.__l.__size_ = 0;
          v99->__r_.__value_.__r.__words[2] = 0;
          v99->__r_.__value_.__r.__words[0] = 0;
          if (v51)
          {
            v101 = &v144.__r_.__value_.__s.__data_[21];
            do
            {
              *--v101 = (v51 % 0xA) | 0x30;
              v94 = v51 > 9;
              v51 /= 0xAuLL;
            }
            while (v94);
          }
          else
          {
            v101 = &v144.__r_.__value_.__s.__data_[20];
            v144.__r_.__value_.__s.__data_[20] = 48;
          }
          sub_1C4E61270(__p, v101, &v144.__r_.__value_.__s.__data_[21], (char *)&v144.__r_.__value_.__r.__words[2] + 5 - v101);
          if (v132 >= 0)
            v102 = __p;
          else
            v102 = (void **)__p[0];
          if (v132 >= 0)
            v103 = v132 & 0x7F;
          else
            v103 = (std::string::size_type)__p[1];
          v104 = std::string::append(&v139, (const std::string::value_type *)v102, v103);
          v105 = v104->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
          __dst.__r_.__value_.__r.__words[2] = v105;
          v104->__r_.__value_.__l.__size_ = 0;
          v104->__r_.__value_.__r.__words[2] = 0;
          v104->__r_.__value_.__r.__words[0] = 0;
          v106 = std::string::append(&__dst, ")");
          v107 = v106->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v144.__r_.__value_.__l.__data_ = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
          v144.__r_.__value_.__r.__words[2] = v107;
          v106->__r_.__value_.__l.__size_ = 0;
          v106->__r_.__value_.__r.__words[2] = 0;
          v106->__r_.__value_.__r.__words[0] = 0;
          if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v108 = &v144;
          else
            v108 = (std::string *)v144.__r_.__value_.__r.__words[0];
          if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v109 = *((_BYTE *)&v144.__r_.__value_.__s + 23) & 0x7F;
          else
            v109 = v144.__r_.__value_.__l.__size_;
          std::string::append(&v143, (const std::string::value_type *)v108, v109);
          if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v144.__r_.__value_.__l.__data_);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          if (v132 < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v139.__r_.__value_.__l.__data_);
          if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v138.__r_.__value_.__l.__data_);
          if (v134 < 0)
            operator delete(v133[0]);
          if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v137.__r_.__value_.__l.__data_);
          if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v136.__r_.__value_.__l.__data_);
          if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v135.__r_.__value_.__l.__data_);
          v110 = std::generic_category();
          v145 = 260;
          v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&v143;
          llvm::Twine::str((llvm::Twine *)&v144, &__dst);
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v111 = &__dst;
          else
            v111 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          v139.__r_.__value_.__r.__words[0] = 22;
          v139.__r_.__value_.__l.__size_ = (std::string::size_type)v110;
          v138.__r_.__value_.__r.__words[0] = (std::string::size_type)v111;
          v41 = a1;
          goto LABEL_124;
        }
        if (a3 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_271;
        if (a3 >= 0x17)
        {
          v85 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((a3 | 7) != 0x17)
            v85 = a3 | 7;
          v86 = v46;
          v46 = v85 + 1;
          v84 = operator new(v85 + 1);
          v87 = v46 | 0x8000000000000000;
          LODWORD(v46) = v86;
          v135.__r_.__value_.__l.__size_ = a3;
          v135.__r_.__value_.__r.__words[2] = v87;
          v135.__r_.__value_.__r.__words[0] = (std::string::size_type)v84;
        }
        else
        {
          *((_BYTE *)&v135.__r_.__value_.__s + 23) = a3;
          v84 = &v135;
          if (!a3)
            goto LABEL_183;
        }
        memmove(v84, a2, a3);
LABEL_183:
        *((_BYTE *)v84 + a3) = 0;
        goto LABEL_184;
      }
      if (!a2)
      {
        memset(&__dst, 0, sizeof(__dst));
        v47 = a1;
LABEL_108:
        v56 = std::string::insert(&__dst, 0, "requires '-menable-experimental-extensions' for experimental extension '");
        v57 = v56->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v144.__r_.__value_.__l.__data_ = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
        v144.__r_.__value_.__r.__words[2] = v57;
        v56->__r_.__value_.__l.__size_ = 0;
        v56->__r_.__value_.__r.__words[2] = 0;
        v56->__r_.__value_.__r.__words[0] = 0;
        v58 = "'";
LABEL_116:
        v63 = std::string::append(&v144, v58);
        v64 = v63->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v143.__r_.__value_.__l.__data_ = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
        v143.__r_.__value_.__r.__words[2] = v64;
        v63->__r_.__value_.__l.__size_ = 0;
        v63->__r_.__value_.__r.__words[2] = 0;
        v63->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v144.__r_.__value_.__l.__data_);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        v65 = std::generic_category();
        v145 = 260;
        v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&v143;
        llvm::Twine::str((llvm::Twine *)&v144, &__dst);
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v66 = &__dst;
        else
          v66 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        v139.__r_.__value_.__r.__words[0] = 22;
        v139.__r_.__value_.__l.__size_ = (std::string::size_type)v65;
        v138.__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
        v41 = v47;
        goto LABEL_124;
      }
      v47 = a1;
      if (a3 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_271;
      if (a3 >= 0x17)
      {
        v54 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a3 | 7) != 0x17)
          v54 = a3 | 7;
        v55 = v54 + 1;
        v50 = (std::string *)operator new(v54 + 1);
        __dst.__r_.__value_.__l.__size_ = a3;
        __dst.__r_.__value_.__r.__words[2] = v55 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = a3;
        v50 = &__dst;
        if (!a3)
          goto LABEL_107;
      }
      memmove(v50, a2, a3);
LABEL_107:
      v50->__r_.__value_.__s.__data_[a3] = 0;
      goto LABEL_108;
    }
    v43 += 2;
    if (v43 != 14)
      continue;
    break;
  }
  if (a3 == 1 && *a2 == 103)
  {
LABEL_101:
    *a1 = 0;
    return;
  }
  if (__len | v15)
  {
    if (llvm::RISCVISAInfo::isSupportedExtension((uint64_t)a2, a3, *a6, *a7))
      goto LABEL_69;
    if (v15 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_271;
    if (v15 >= 0x17)
    {
      v73 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v73 = v15 | 7;
      v74 = v73 + 1;
      v67 = operator new(v73 + 1);
      v144.__r_.__value_.__l.__size_ = v15;
      v144.__r_.__value_.__r.__words[2] = v74 | 0x8000000000000000;
      v144.__r_.__value_.__r.__words[0] = (std::string::size_type)v67;
    }
    else
    {
      *((_BYTE *)&v144.__r_.__value_.__s + 23) = v15;
      v67 = &v144;
      if (!v15)
        goto LABEL_152;
    }
    memmove(v67, a4, v15);
LABEL_152:
    *((_BYTE *)v67 + v15) = 0;
    v75 = std::string::insert(&v144, 0, "unsupported version number ");
    v76 = v75->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v143.__r_.__value_.__l.__data_ = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
    v143.__r_.__value_.__r.__words[2] = v76;
    v75->__r_.__value_.__l.__size_ = 0;
    v75->__r_.__value_.__r.__words[2] = 0;
    v75->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v144.__r_.__value_.__l.__data_);
    if ((v127 & 1) == 0)
    {
      if (v17)
      {
        if (__len > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_271;
        if (__len >= 0x17)
        {
          v112 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((__len | 7) != 0x17)
            v112 = __len | 7;
          v113 = v112 + 1;
          v77 = (std::string *)operator new(v112 + 1);
          __dst.__r_.__value_.__l.__size_ = __len;
          __dst.__r_.__value_.__r.__words[2] = v113 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len;
          v77 = &__dst;
        }
        memmove(v77, v17, __len);
        v77->__r_.__value_.__s.__data_[__len] = 0;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
      }
      v114 = std::string::insert(&__dst, 0, ".");
      v115 = v114->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v144.__r_.__value_.__l.__data_ = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
      v144.__r_.__value_.__r.__words[2] = v115;
      v114->__r_.__value_.__l.__size_ = 0;
      v114->__r_.__value_.__r.__words[2] = 0;
      v114->__r_.__value_.__r.__words[0] = 0;
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v116 = &v144;
      else
        v116 = (std::string *)v144.__r_.__value_.__r.__words[0];
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v117 = *((_BYTE *)&v144.__r_.__value_.__s + 23) & 0x7F;
      else
        v117 = v144.__r_.__value_.__l.__size_;
      std::string::append(&v143, (const std::string::value_type *)v116, v117);
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v144.__r_.__value_.__l.__data_);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (!a2)
    {
      memset(&v139, 0, sizeof(v139));
      v13 = a1;
      goto LABEL_259;
    }
    if (a3 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (a3 >= 0x17)
      {
        v119 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a3 | 7) != 0x17)
          v119 = a3 | 7;
        v120 = v119 + 1;
        v118 = operator new(v119 + 1);
        v139.__r_.__value_.__l.__size_ = a3;
        v139.__r_.__value_.__r.__words[2] = v120 | 0x8000000000000000;
        v139.__r_.__value_.__r.__words[0] = (std::string::size_type)v118;
        v13 = a1;
      }
      else
      {
        *((_BYTE *)&v139.__r_.__value_.__s + 23) = a3;
        v118 = &v139;
        v13 = a1;
        if (!a3)
          goto LABEL_258;
      }
      memmove(v118, a2, a3);
LABEL_258:
      *((_BYTE *)v118 + a3) = 0;
LABEL_259:
      v121 = std::string::insert(&v139, 0, " for extension '");
      v122 = v121->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v122;
      v121->__r_.__value_.__l.__size_ = 0;
      v121->__r_.__value_.__r.__words[2] = 0;
      v121->__r_.__value_.__r.__words[0] = 0;
      v123 = std::string::append(&__dst, "'");
      v124 = v123->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v144.__r_.__value_.__l.__data_ = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
      v144.__r_.__value_.__r.__words[2] = v124;
      v123->__r_.__value_.__l.__size_ = 0;
      v123->__r_.__value_.__r.__words[2] = 0;
      v123->__r_.__value_.__r.__words[0] = 0;
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v125 = &v144;
      else
        v125 = (std::string *)v144.__r_.__value_.__r.__words[0];
      if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v126 = *((_BYTE *)&v144.__r_.__value_.__s + 23) & 0x7F;
      else
        v126 = v144.__r_.__value_.__l.__size_;
      std::string::append(&v143, (const std::string::value_type *)v125, v126);
      if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v144.__r_.__value_.__l.__data_);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v139.__r_.__value_.__l.__data_);
LABEL_57:
      v39 = std::generic_category();
      v145 = 260;
      v144.__r_.__value_.__r.__words[0] = (std::string::size_type)&v143;
      llvm::Twine::str((llvm::Twine *)&v144, &__dst);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v40 = &__dst;
      else
        v40 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      v139.__r_.__value_.__r.__words[0] = 22;
      v139.__r_.__value_.__l.__size_ = (std::string::size_type)v39;
      v138.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
      v41 = v13;
LABEL_124:
      sub_1C5DF1730(&v138.__r_.__value_.__l.__data_, (uint64_t *)&v139, v41);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_126;
    }
LABEL_271:
    abort();
  }
  v44 = sub_1C5E2DF30(a2, a3);
  if (v45)
  {
    *a6 = v44;
    *a7 = HIDWORD(v44);
  }
LABEL_69:
  *a1 = 0;
}

uint64_t sub_1C5E2DF30(const void *a1, size_t a2)
{
  char v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[5];

  v4 = 0;
  v5 = 0;
  v12[4] = *MEMORY[0x1E0C80C00];
  v12[0] = &off_1E81A1E10;
  v12[1] = 49;
  v12[2] = &off_1E81A1DA0;
  v12[3] = 7;
  while (1)
  {
    v6 = v4;
    v7 = &v12[2 * v5];
    v8 = v7[1];
    if (v8)
      break;
LABEL_6:
    v4 = 1;
    v5 = 1;
    if ((v6 & 1) != 0)
      return 0;
  }
  v9 = *v7 + 8;
  v10 = 16 * v8;
  while (!sub_1C5E2F870(a1, a2, *(char **)(v9 - 8)))
  {
    v9 += 16;
    v10 -= 16;
    if (!v10)
      goto LABEL_6;
  }
  return *(_QWORD *)v9;
}

const char *sub_1C5E2E01C(_WORD *a1, unint64_t a2)
{
  int v3;
  const char *v4;
  const char *v5;

  if (a2 >= 2)
  {
    if (*a1 == 30835)
      return "sx";
  }
  else if (!a2)
  {
    return 0;
  }
  v3 = *(unsigned __int8 *)a1;
  v4 = "x";
  v5 = "z";
  if (v3 != 122)
    v5 = 0;
  if (v3 != 120)
    v4 = v5;
  if (v3 == 115)
    return "s";
  else
    return v4;
}

const char *sub_1C5E2E09C(_WORD *a1, unint64_t a2)
{
  int v3;
  const char *v4;
  const char *v5;

  if (a2 >= 2)
  {
    if (*a1 == 30835)
      return "non-standard supervisor-level extension";
  }
  else if (!a2)
  {
    return 0;
  }
  v3 = *(unsigned __int8 *)a1;
  v4 = "non-standard user-level extension";
  v5 = "standard user-level extension";
  if (v3 != 122)
    v5 = 0;
  if (v3 != 120)
    v4 = v5;
  if (v3 == 115)
    return "standard supervisor-level extension";
  else
    return v4;
}

void llvm::RISCVISAInfo::checkDependency(llvm::RISCVISAInfo *this@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  char *v4;
  char v5;
  char *v6;
  char *v7;
  int v8;
  char *v9;
  char *v10;
  int v11;
  char *v12;
  char *v13;
  int v14;
  char *v15;
  int v16;
  char v17;
  char v18;
  int v19;
  char *v20;
  const std::error_category *v21;
  const char *v22;
  const std::error_category *v23;
  const std::error_category *v24;
  const std::error_category *v25;
  _QWORD *v26;
  int v27;
  _QWORD *v28;
  const std::error_category *v29;
  const char *v30;
  char v31;
  const std::error_category *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  int v37;
  void *v39[2];
  char v40;
  void *__p[2];
  char v42;
  void *v43[2];
  char v44;
  void *v45[2];
  char v46;
  uint64_t v47;
  const std::error_category *v48;
  char v49;

  v37 = *(_DWORD *)this;
  v3 = 1;
  v49 = 1;
  LOWORD(v47) = 101;
  v4 = (char *)*((_QWORD *)this + 4);
  if (!v4)
  {
    v5 = 1;
    goto LABEL_10;
  }
  while ((llvm::RISCVISAInfo::compareExtension((char *)&v47, v4 + 32) & 1) != 0)
  {
LABEL_3:
    v4 = *(char **)v4;
    if (!v4)
    {
      v5 = 1;
      goto LABEL_7;
    }
  }
  if (llvm::RISCVISAInfo::compareExtension(v4 + 32, (char *)&v47))
  {
    v4 += 8;
    goto LABEL_3;
  }
  v5 = 0;
LABEL_7:
  if (v49 < 0)
    operator delete((void *)v47);
LABEL_10:
  v49 = 1;
  LOWORD(v47) = 100;
  v6 = (char *)*((_QWORD *)this + 4);
  if (!v6)
    goto LABEL_18;
  while (2)
  {
    if ((llvm::RISCVISAInfo::compareExtension((char *)&v47, v6 + 32) & 1) != 0)
    {
LABEL_12:
      v6 = *(char **)v6;
      if (!v6)
      {
        v3 = 1;
        goto LABEL_16;
      }
      continue;
    }
    break;
  }
  if (llvm::RISCVISAInfo::compareExtension(v6 + 32, (char *)&v47))
  {
    v6 += 8;
    goto LABEL_12;
  }
  v3 = 0;
LABEL_16:
  if (v49 < 0)
    operator delete((void *)v47);
LABEL_18:
  v49 = 1;
  LOWORD(v47) = 102;
  v7 = (char *)*((_QWORD *)this + 4);
  if (!v7)
  {
    v8 = 0;
    goto LABEL_27;
  }
  while (2)
  {
    if ((llvm::RISCVISAInfo::compareExtension((char *)&v47, v7 + 32) & 1) != 0)
    {
LABEL_20:
      v7 = *(char **)v7;
      if (!v7)
      {
        v8 = 0;
        goto LABEL_24;
      }
      continue;
    }
    break;
  }
  if (llvm::RISCVISAInfo::compareExtension(v7 + 32, (char *)&v47))
  {
    v7 += 8;
    goto LABEL_20;
  }
  v8 = 1;
LABEL_24:
  if (v49 < 0)
    operator delete((void *)v47);
LABEL_27:
  v49 = 5;
  strcpy((char *)&v47, "zfinx");
  v9 = (char *)*((_QWORD *)this + 4);
  if (!v9)
    goto LABEL_39;
  while (2)
  {
    if ((llvm::RISCVISAInfo::compareExtension((char *)&v47, v9 + 32) & 1) != 0)
    {
LABEL_29:
      v9 = *(char **)v9;
      if (!v9)
        goto LABEL_37;
      continue;
    }
    break;
  }
  if (llvm::RISCVISAInfo::compareExtension(v9 + 32, (char *)&v47))
  {
    v9 += 8;
    goto LABEL_29;
  }
  LODWORD(v9) = 1;
LABEL_37:
  if (v49 < 0)
    operator delete((void *)v47);
LABEL_39:
  v49 = 5;
  strcpy((char *)&v47, "zdinx");
  v10 = (char *)*((_QWORD *)this + 4);
  if (!v10)
  {
    v11 = 0;
    goto LABEL_48;
  }
  while (2)
  {
    if ((llvm::RISCVISAInfo::compareExtension((char *)&v47, v10 + 32) & 1) != 0)
    {
LABEL_41:
      v10 = *(char **)v10;
      if (!v10)
      {
        v11 = 0;
        goto LABEL_45;
      }
      continue;
    }
    break;
  }
  if (llvm::RISCVISAInfo::compareExtension(v10 + 32, (char *)&v47))
  {
    v10 += 8;
    goto LABEL_41;
  }
  v11 = 1;
LABEL_45:
  if (v49 < 0)
    operator delete((void *)v47);
LABEL_48:
  v49 = 6;
  strcpy((char *)&v47, "zve32x");
  v12 = (char *)*((_QWORD *)this + 4);
  if (!v12)
    goto LABEL_58;
  while (2)
  {
    if ((llvm::RISCVISAInfo::compareExtension((char *)&v47, v12 + 32) & 1) != 0)
    {
LABEL_50:
      v12 = *(char **)v12;
      if (!v12)
        goto LABEL_56;
      continue;
    }
    break;
  }
  if (llvm::RISCVISAInfo::compareExtension(v12 + 32, (char *)&v47))
  {
    v12 += 8;
    goto LABEL_50;
  }
  LOBYTE(v12) = 1;
LABEL_56:
  if (v49 < 0)
    operator delete((void *)v47);
LABEL_58:
  v49 = 6;
  strcpy((char *)&v47, "zve32f");
  v13 = (char *)*((_QWORD *)this + 4);
  if (!v13)
  {
    v14 = 1;
    goto LABEL_67;
  }
  while (2)
  {
    if ((llvm::RISCVISAInfo::compareExtension((char *)&v47, v13 + 32) & 1) != 0)
    {
LABEL_60:
      v13 = *(char **)v13;
      if (!v13)
      {
        v14 = 1;
        goto LABEL_64;
      }
      continue;
    }
    break;
  }
  if (llvm::RISCVISAInfo::compareExtension(v13 + 32, (char *)&v47))
  {
    v13 += 8;
    goto LABEL_60;
  }
  v14 = 0;
LABEL_64:
  if (v49 < 0)
    operator delete((void *)v47);
LABEL_67:
  v49 = 6;
  strcpy((char *)&v47, "zve64d");
  v15 = (char *)*((_QWORD *)this + 4);
  if (!v15)
  {
    v16 = 1;
    goto LABEL_76;
  }
  while (2)
  {
    if ((llvm::RISCVISAInfo::compareExtension((char *)&v47, v15 + 32) & 1) != 0)
    {
LABEL_69:
      v15 = *(char **)v15;
      if (!v15)
      {
        v16 = 1;
        goto LABEL_73;
      }
      continue;
    }
    break;
  }
  if (llvm::RISCVISAInfo::compareExtension(v15 + 32, (char *)&v47))
  {
    v15 += 8;
    goto LABEL_69;
  }
  v16 = 0;
LABEL_73:
  if (v49 < 0)
    operator delete((void *)v47);
LABEL_76:
  if (v37 == 32)
    v17 = 1;
  else
    v17 = v5;
  if ((v17 & 1) == 0)
  {
    v21 = std::generic_category();
    v47 = 22;
    v48 = v21;
    v22 = "standard user-level extension 'e' requires 'rv32'";
LABEL_93:
    v45[0] = (void *)v22;
    v26 = a2;
LABEL_94:
    sub_1C5DF1730((_BYTE **)v45, &v47, v26);
    return;
  }
  if (((v3 | v8) & 1) == 0)
  {
    v23 = std::generic_category();
    v47 = 22;
    v48 = v23;
    v22 = "d requires f extension to also be specified";
    goto LABEL_93;
  }
  if (((v8 | v9 | v14) & 1) == 0)
  {
    v24 = std::generic_category();
    v47 = 22;
    v48 = v24;
    v22 = "zve32f requires f or zfinx extension to also be specified";
    goto LABEL_93;
  }
  if (((v11 | v16 | v3 ^ 1) & 1) == 0)
  {
    v25 = std::generic_category();
    v47 = 22;
    v48 = v25;
    v22 = "zve64d requires d or zdinx extension to also be specified";
    goto LABEL_93;
  }
  v18 = (char)v12;
  v19 = *((_DWORD *)this + 2);
  v49 = 4;
  strcpy((char *)&v47, "zvfh");
  v20 = (char *)*((_QWORD *)this + 4);
  if (!v20)
  {
LABEL_95:
    v27 = 0;
    v28 = a2;
    goto LABEL_96;
  }
  while (2)
  {
    if ((llvm::RISCVISAInfo::compareExtension((char *)&v47, v20 + 32) & 1) != 0)
    {
LABEL_85:
      v20 = *(char **)v20;
      if (!v20)
        goto LABEL_95;
      continue;
    }
    break;
  }
  if (llvm::RISCVISAInfo::compareExtension(v20 + 32, (char *)&v47))
  {
    v20 += 8;
    goto LABEL_85;
  }
  v46 = 3;
  LODWORD(v45[0]) = 6841978;
  v33 = (char *)*((_QWORD *)this + 4);
  if (!v33)
  {
    v44 = 6;
    strcpy((char *)v43, "zfhmin");
LABEL_128:
    v42 = 5;
    strcpy((char *)__p, "zhinx");
    goto LABEL_129;
  }
  do
  {
    if ((llvm::RISCVISAInfo::compareExtension((char *)v45, v33 + 32) & 1) == 0)
    {
      if (!llvm::RISCVISAInfo::compareExtension(v33 + 32, (char *)v45))
      {
        v27 = 0;
        v28 = a2;
        goto LABEL_134;
      }
      v33 += 8;
    }
    v33 = *(char **)v33;
  }
  while (v33);
  v34 = (char *)*((_QWORD *)this + 4);
  v44 = 6;
  strcpy((char *)v43, "zfhmin");
  if (!v34)
    goto LABEL_128;
  do
  {
    if ((llvm::RISCVISAInfo::compareExtension((char *)v43, v34 + 32) & 1) == 0)
    {
      if (!llvm::RISCVISAInfo::compareExtension(v34 + 32, (char *)v43))
      {
        v27 = 0;
        v28 = a2;
        goto LABEL_132;
      }
      v34 += 8;
    }
    v34 = *(char **)v34;
  }
  while (v34);
  v35 = (char *)*((_QWORD *)this + 4);
  v42 = 5;
  strcpy((char *)__p, "zhinx");
  if (!v35)
    goto LABEL_129;
  do
  {
    if ((llvm::RISCVISAInfo::compareExtension((char *)__p, v35 + 32) & 1) == 0)
    {
      if (!llvm::RISCVISAInfo::compareExtension(v35 + 32, (char *)__p))
      {
        v27 = 0;
        goto LABEL_130;
      }
      v35 += 8;
    }
    v35 = *(char **)v35;
  }
  while (v35);
  v36 = (char *)*((_QWORD *)this + 4);
  v40 = 8;
  strcpy((char *)v39, "zhinxmin");
  if (!v36)
  {
LABEL_129:
    v27 = 1;
    goto LABEL_130;
  }
  while (2)
  {
    if ((llvm::RISCVISAInfo::compareExtension((char *)v39, v36 + 32) & 1) != 0)
      goto LABEL_138;
    if (llvm::RISCVISAInfo::compareExtension(v36 + 32, (char *)v39))
    {
      v36 += 8;
LABEL_138:
      v36 = *(char **)v36;
      if (!v36)
      {
        v27 = 1;
        goto LABEL_142;
      }
      continue;
    }
    break;
  }
  v27 = 0;
LABEL_142:
  if (v40 < 0)
    operator delete(v39[0]);
LABEL_130:
  v28 = a2;
  if (v42 < 0)
    operator delete(__p[0]);
LABEL_132:
  if (v44 < 0)
    operator delete(v43[0]);
LABEL_134:
  if (v46 < 0)
    operator delete(v45[0]);
LABEL_96:
  if (v49 < 0)
    operator delete((void *)v47);
  if (v27)
  {
    v29 = std::generic_category();
    v47 = 22;
    v48 = v29;
    v30 = "zvfh requires zfh, zfhmin, zhinx or zhinxmin extension to also be specified";
    goto LABEL_106;
  }
  if (v19)
    v31 = v18;
  else
    v31 = 1;
  if ((v31 & 1) == 0)
  {
    v32 = std::generic_category();
    v47 = 22;
    v48 = v32;
    v30 = "zvl*b requires v or zve* extension to also be specified";
LABEL_106:
    v45[0] = (void *)v30;
    v26 = v28;
    goto LABEL_94;
  }
  *v28 = 0;
}

void llvm::RISCVISAInfo::updateImplication(llvm::RISCVISAInfo *this)
{
  int v2;
  char *v3;
  char **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t i;
  void **v9;
  char **v10;
  char *v11;
  char v12;
  int v13;
  size_t v14;
  char *v15;
  char **v16;
  BOOL v17;
  unsigned int v18;
  char *v19;
  const void *v20;
  size_t v21;
  char **v22;
  unint64_t v23;
  char **v24;
  size_t v25;
  size_t v26;
  int v27;
  int v28;
  char *v29;
  const void **v30;
  const void **v31;
  char *v32;
  size_t v33;
  size_t v34;
  size_t v35;
  char **p_dst;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  int v40;
  size_t v41;
  uint64_t v42;
  size_t v43;
  uint64_t v44;
  llvm::RISCVISAInfo *v45;
  char *__dst;
  size_t v47;
  unint64_t v48;
  uint64_t v49;
  void *__p[2];
  char v51;
  void *v52;
  uint64_t v53;
  _QWORD v54[34];

  v54[32] = *MEMORY[0x1E0C80C00];
  v2 = 1;
  v51 = 1;
  LOWORD(__p[0]) = 101;
  v4 = (char **)((char *)this + 32);
  v3 = (char *)*((_QWORD *)this + 4);
  if (!v3)
  {
    v5 = 1;
    goto LABEL_10;
  }
  while ((llvm::RISCVISAInfo::compareExtension((char *)__p, v3 + 32) & 1) != 0)
  {
LABEL_3:
    v3 = *(char **)v3;
    if (!v3)
    {
      v5 = 1;
      goto LABEL_7;
    }
  }
  if (llvm::RISCVISAInfo::compareExtension(v3 + 32, (char *)__p))
  {
    v3 += 8;
    goto LABEL_3;
  }
  v5 = 0;
LABEL_7:
  if (v51 < 0)
    operator delete(__p[0]);
LABEL_10:
  v51 = 1;
  LOWORD(__p[0]) = 105;
  v6 = *v4;
  if (!*v4)
    goto LABEL_18;
  while (2)
  {
    if ((llvm::RISCVISAInfo::compareExtension((char *)__p, v6 + 32) & 1) != 0)
    {
LABEL_12:
      v6 = *(char **)v6;
      if (!v6)
      {
        v2 = 1;
        goto LABEL_16;
      }
      continue;
    }
    break;
  }
  if (llvm::RISCVISAInfo::compareExtension(v6 + 32, (char *)__p))
  {
    v6 += 8;
    goto LABEL_12;
  }
  v2 = 0;
LABEL_16:
  if (v51 < 0)
    operator delete(__p[0]);
LABEL_18:
  if ((v5 & v2) == 1)
  {
    v7 = sub_1C5E2DF30("i", 1uLL);
    llvm::RISCVISAInfo::addExtension((uint64_t)this, "i", 1uLL, v7, HIDWORD(v7));
  }
  __p[0] = (void *)1;
  for (i = 1; i != 33; i += 4)
  {
    v9 = &__p[i];
    *(_OWORD *)v9 = xmmword_1C85F6FF0;
    *((_OWORD *)v9 + 1) = xmmword_1C85F6FF0;
  }
  v52 = v54;
  v53 = 0x1000000000;
  v45 = this;
  v10 = (char **)*((_QWORD *)this + 3);
  if (v10 != v4)
  {
    do
    {
      v11 = v10[4];
      v12 = *((_BYTE *)v10 + 55);
      v13 = v12;
      if (v12 >= 0)
        v11 = (char *)(v10 + 4);
      v14 = v12 & 0x7F;
      if (v13 < 0)
        v14 = (size_t)v10[5];
      __dst = v11;
      v47 = v14;
      sub_1C5E2EDD4((uint64_t)__p, (const void **)&__dst);
      v15 = v10[1];
      if (v15)
      {
        do
        {
          v16 = (char **)v15;
          v15 = *(char **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (char **)v10[2];
          v17 = *v16 == (char *)v10;
          v10 = v16;
        }
        while (!v17);
      }
      v10 = v16;
    }
    while (v16 != v4);
    v18 = v53;
    if ((_DWORD)v53)
    {
      while (1)
      {
        v19 = (char *)v52 + 16 * v18;
        v20 = (const void *)*((_QWORD *)v19 - 2);
        v21 = *((_QWORD *)v19 - 1);
        __dst = 0;
        if (sub_1C638E370((uint64_t)__p, (const void **)v19 - 2, &__dst))
        {
          *(_OWORD *)__dst = xmmword_1C85FAB10;
          LODWORD(__p[0]) -= 2;
          ++HIDWORD(__p[0]);
        }
        v18 = v53 - 1;
        LODWORD(v53) = v53 - 1;
        v22 = &off_1E81A2188;
        v23 = 26;
        do
        {
          v24 = &v22[4 * (v23 >> 1)];
          v25 = (size_t)v24[1];
          if (v21 >= v25)
            v26 = (size_t)v24[1];
          else
            v26 = v21;
          if (v26 && (v27 = memcmp(*v24, v20, v26)) != 0)
          {
            v28 = (v27 >> 31) | 1;
          }
          else
          {
            if (v25 < v21)
              v28 = -1;
            else
              v28 = 1;
            if (v25 == v21)
              v28 = 0;
          }
          if (v28 == -1)
            v23 += ~(v23 >> 1);
          else
            v23 >>= 1;
          if (v28 == -1)
            v22 = v24 + 4;
        }
        while (v23);
        if (v22 != &off_1E81A24C8 && v22[1] == (char *)v21 && (!v21 || !memcmp(*v22, v20, v21)))
        {
          v29 = v22[3];
          if (v29)
            break;
        }
LABEL_89:
        if (!v18)
          goto LABEL_90;
      }
      v30 = (const void **)v22[2];
      v31 = &v30[(_QWORD)v29];
LABEL_60:
      v32 = *v30;
      __dst = (char *)v32;
      if (v32)
        v33 = strlen((const char *)v32);
      else
        v33 = 0;
      v47 = v33;
      if ((sub_1C638E370((uint64_t)__p, (const void **)&__dst, &v49) & 1) != 0)
        goto LABEL_86;
      v34 = strlen((const char *)v32);
      if (v34 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      v35 = v34;
      if (v34 >= 0x17)
      {
        v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v34 | 7) != 0x17)
          v37 = v34 | 7;
        v38 = v37 + 1;
        p_dst = (char **)operator new(v37 + 1);
        v47 = v35;
        v48 = v38 | 0x8000000000000000;
        __dst = (char *)p_dst;
      }
      else
      {
        HIBYTE(v48) = v34;
        p_dst = &__dst;
        if (!v34)
        {
LABEL_72:
          *((_BYTE *)p_dst + v35) = 0;
          v39 = *v4;
          if (!*v4)
          {
LABEL_78:
            v40 = 1;
            goto LABEL_79;
          }
          while (1)
          {
            if ((llvm::RISCVISAInfo::compareExtension((char *)&__dst, v39 + 32) & 1) == 0)
            {
              if (!llvm::RISCVISAInfo::compareExtension(v39 + 32, (char *)&__dst))
              {
                v40 = 0;
LABEL_79:
                if (SHIBYTE(v48) < 0)
                  operator delete(__dst);
                if (v40)
                {
                  if (v32)
                  {
                    v41 = strlen((const char *)v32);
                    v42 = sub_1C5E2DF30(v32, v41);
                    llvm::RISCVISAInfo::addExtension((uint64_t)v45, v32, v41, v42, HIDWORD(v42));
                    v43 = strlen((const char *)v32);
                  }
                  else
                  {
                    v44 = sub_1C5E2DF30(0, 0);
                    llvm::RISCVISAInfo::addExtension((uint64_t)v45, 0, 0, v44, HIDWORD(v44));
                    v43 = 0;
                  }
                  __dst = (char *)v32;
                  v47 = v43;
                  sub_1C5E2EDD4((uint64_t)__p, (const void **)&__dst);
                }
LABEL_86:
                if (++v30 == v31)
                {
                  v18 = v53;
                  goto LABEL_89;
                }
                goto LABEL_60;
              }
              v39 += 8;
            }
            v39 = *(char **)v39;
            if (!v39)
              goto LABEL_78;
          }
        }
      }
      memmove(p_dst, v32, v35);
      goto LABEL_72;
    }
  }
LABEL_90:
  if (v52 != v54)
    free(v52);
  if (((uint64_t)__p[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](__p[1], 8);
}

void *sub_1C5E2EDD4(uint64_t a1, const void **a2)
{
  void *result;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  _BYTE v8[24];

  result = sub_1C638E2B4((uint64_t)v8, a1, a2);
  if (v8[16])
  {
    v5 = *(_OWORD *)a2;
    v6 = *(unsigned int *)(a1 + 272);
    if (v6 >= *(_DWORD *)(a1 + 276))
    {
      v7 = *(_OWORD *)a2;
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 264, a1 + 280, v6 + 1, 16);
      v5 = v7;
      LODWORD(v6) = *(_DWORD *)(a1 + 272);
    }
    *(_OWORD *)(*(_QWORD *)(a1 + 264) + 16 * v6) = v5;
    ++*(_DWORD *)(a1 + 272);
  }
  return result;
}

void llvm::RISCVISAInfo::updateCombination(llvm::RISCVISAInfo *this)
{
  char v2;
  char **v3;
  char *v4;
  size_t v5;
  char *v6;
  const char **v7;
  char v8;
  uint64_t v9;
  int v10;
  size_t v11;
  uint64_t v12;
  BOOL v13;

  v2 = 0;
  v3 = &off_1E81A24C8;
  do
  {
    v4 = *v3;
    v5 = (size_t)v3[1];
    v7 = (const char **)v3[2];
    v6 = v3[3];
    if ((llvm::RISCVISAInfo::hasExtension((uint64_t)this, *v3, v5) & 1) != 0)
    {
      v8 = v2;
    }
    else
    {
      if (!v6)
        goto LABEL_11;
      v9 = 8 * (_QWORD)v6;
      v10 = 1;
      do
      {
        if (*v7)
          v11 = strlen(*v7);
        else
          v11 = 0;
        v10 &= llvm::RISCVISAInfo::hasExtension((uint64_t)this, *v7++, v11);
        v9 -= 8;
      }
      while (v9);
      v8 = v2;
      if ((v10 & 1) != 0)
      {
LABEL_11:
        v12 = sub_1C5E2DF30(v4, v5);
        llvm::RISCVISAInfo::addExtension((uint64_t)this, v4, v5, v12, HIDWORD(v12));
        v8 = 1;
      }
    }
    v13 = v3 + 4 == (char **)&unk_1E81A2528;
    v2 = (v3 + 4 != (char **)&unk_1E81A2528) & v8;
    if (v3 + 4 == (char **)&unk_1E81A2528)
      v3 = &off_1E81A24C8;
    else
      v3 += 4;
  }
  while (!v13 || (v8 & 1) != 0);
}

void llvm::RISCVISAInfo::updateFLen(llvm::RISCVISAInfo *this)
{
  char *v1;
  char *v3;
  int v4;
  void *__p[2];
  char v6;

  *((_DWORD *)this + 1) = 0;
  v6 = 1;
  LOWORD(__p[0]) = 100;
  v1 = (char *)*((_QWORD *)this + 4);
  if (v1)
  {
    do
    {
      if ((llvm::RISCVISAInfo::compareExtension((char *)__p, v1 + 32) & 1) == 0)
      {
        if (!llvm::RISCVISAInfo::compareExtension(v1 + 32, (char *)__p))
        {
          if (v6 < 0)
            operator delete(__p[0]);
          v4 = 64;
LABEL_24:
          *((_DWORD *)this + 1) = v4;
          return;
        }
        v1 += 8;
      }
      v1 = *(char **)v1;
    }
    while (v1);
    if (v6 < 0)
      operator delete(__p[0]);
    v3 = (char *)*((_QWORD *)this + 4);
    v6 = 1;
    LOWORD(__p[0]) = 102;
    if (v3)
    {
      while (1)
      {
        if ((llvm::RISCVISAInfo::compareExtension((char *)__p, v3 + 32) & 1) == 0)
        {
          if (!llvm::RISCVISAInfo::compareExtension(v3 + 32, (char *)__p))
          {
            if (v6 < 0)
              operator delete(__p[0]);
            v4 = 32;
            goto LABEL_24;
          }
          v3 += 8;
        }
        v3 = *(char **)v3;
        if (!v3)
        {
          if (v6 < 0)
            operator delete(__p[0]);
          return;
        }
      }
    }
  }
}

uint64_t llvm::RISCVISAInfo::updateMinVLen(uint64_t this)
{
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;

  v1 = *(_QWORD **)(this + 24);
  if (v1 != (_QWORD *)(this + 32))
  {
    do
    {
      v2 = (_QWORD *)v1[4];
      v3 = *((_BYTE *)v1 + 55);
      v4 = v3;
      if (v3 >= 0)
        v2 = v1 + 4;
      v5 = v3 & 0x7F;
      if (v4 < 0)
        v5 = v1[5];
      v6 = v5 - 3;
      if (v5 >= 3)
      {
        v7 = *(_WORD *)v2 == 30330 && *((_BYTE *)v2 + 2) == 108;
        if (v7 && v5 >= 4 && *((_BYTE *)v2 + v5 - 1) == 98)
        {
          if (v6 >= v5 - 4)
            v6 = v5 - 4;
          if (v6)
          {
            v8 = 0;
            v9 = (unsigned __int8 *)v2 + 3;
            while (1)
            {
              v10 = *v9;
              if ((v10 - 48) >= 0xA)
              {
                if ((v10 - 97) >= 0x1A)
                {
                  if ((v10 - 65) > 0x19)
                    break;
                  v11 = -55;
                }
                else
                {
                  v11 = -87;
                }
              }
              else
              {
                v11 = -48;
              }
              v12 = v11 + v10;
              if (v12 > 9)
                break;
              v13 = 10 * v8 + v12;
              if (v8 > v13 / 0xA)
                break;
              ++v9;
              v8 = v13;
              if (!--v6)
              {
                if (!HIDWORD(v13))
                {
                  v14 = *(_DWORD *)(this + 8);
                  if (v14 <= v13)
                    v14 = v13;
                  *(_DWORD *)(this + 8) = v14;
                }
                break;
              }
            }
          }
        }
      }
      v15 = (_QWORD *)v1[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v1[2];
          v7 = *v16 == (_QWORD)v1;
          v1 = v16;
        }
        while (!v7);
      }
      v1 = v16;
    }
    while (v16 != (_QWORD *)(this + 32));
  }
  return this;
}

uint64_t llvm::RISCVISAInfo::updateMaxELen(uint64_t this)
{
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unsigned __int8 *v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  _BOOL4 v19;
  _BOOL4 v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD *v24;
  _QWORD *v25;

  v1 = *(_QWORD **)(this + 24);
  if (v1 == (_QWORD *)(this + 32))
    return this;
  do
  {
    v2 = (_QWORD *)v1[4];
    v3 = *((_BYTE *)v1 + 55);
    v4 = v3;
    if (v3 >= 0)
      v2 = v1 + 4;
    v5 = v3 & 0x7F;
    if (v4 < 0)
      v5 = v1[5];
    v6 = v5 - 3;
    if (v5 < 3)
      goto LABEL_48;
    v7 = *(_WORD *)v2 == 30330 && *((_BYTE *)v2 + 2) == 101;
    if (!v7)
      goto LABEL_48;
    v8 = (unsigned __int8 *)v2 + 3;
    v9 = v5 - 4;
    v10 = v8[v9];
    if (v10 == 102)
    {
      v11 = *(_DWORD *)(this + 16);
      if (v11 <= 0x20)
        v11 = 32;
      *(_DWORD *)(this + 16) = v11;
      v10 = v8[v9];
    }
    if (v10 == 100)
    {
      v12 = *(_DWORD *)(this + 16);
      if (v12 <= 0x40)
        v12 = 64;
      *(_DWORD *)(this + 16) = v12;
    }
    if (v6 >= v9)
      v6 = v9;
    if (!v6)
    {
      v18 = 0;
      v19 = 0;
LABEL_35:
      v20 = 1;
      goto LABEL_39;
    }
    v13 = 0;
    v14 = v6;
    while (1)
    {
      v15 = *v8;
      if ((v15 - 48) < 0xA)
      {
        v16 = -48;
        goto LABEL_26;
      }
      if ((v15 - 97) < 0x1A)
      {
        v16 = -87;
        goto LABEL_26;
      }
      if ((v15 - 65) > 0x19)
        break;
      v16 = -55;
LABEL_26:
      v17 = v16 + v15;
      if (v17 > 9)
        break;
      v18 = 10 * v13 + v17;
      if (v13 > v18 / 0xA)
      {
        v19 = 1;
        goto LABEL_35;
      }
      ++v8;
      v13 = v18;
      if (!--v14)
        goto LABEL_38;
    }
    v18 = v13;
LABEL_38:
    v20 = v6 == v14;
    v19 = v14 != 0;
LABEL_39:
    v21 = v19 || v20;
    if (v18 >= 0x100000000)
      v22 = 0;
    else
      v22 = v18;
    if (v21)
      v23 = 0;
    else
      v23 = v22;
    if (*(_DWORD *)(this + 12) > v23)
      v23 = *(_DWORD *)(this + 12);
    *(_DWORD *)(this + 12) = v23;
LABEL_48:
    v24 = (_QWORD *)v1[1];
    if (v24)
    {
      do
      {
        v25 = v24;
        v24 = (_QWORD *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        v25 = (_QWORD *)v1[2];
        v7 = *v25 == (_QWORD)v1;
        v1 = v25;
      }
      while (!v7);
    }
    v1 = v25;
  }
  while (v25 != (_QWORD *)(this + 32));
  return this;
}

void llvm::RISCVISAInfo::toString(llvm::RISCVISAInfo *this@<X0>, uint64_t a2@<X8>)
{
  llvm::raw_ostream *v4;
  llvm::RISCVISAInfo *v5;
  char v6;
  char v7;
  int v8;
  const void *v9;
  size_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  const char *v14;
  llvm::raw_ostream *v15;
  char **v16;
  llvm::raw_ostream *v17;
  llvm::RISCVISAInfo *v18;
  llvm::RISCVISAInfo *v19;
  BOOL v20;
  __int128 v21;
  void *__p[2];
  uint64_t v23;
  uint64_t v24;
  void (**v25)(llvm::raw_ostream *__hidden);
  int v26;
  uint64_t v27;
  _BYTE *v28;
  char *v29;
  char v30;
  uint64_t v31;
  int v32;
  void **v33;
  void *v34[2];
  uint64_t v35;

  v34[0] = 0;
  v34[1] = 0;
  v35 = 0;
  v26 = 0;
  v30 = 0;
  v31 = 0;
  v25 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v33 = v34;
  v32 = 0;
  v28 = 0;
  v29 = 0;
  v27 = 0;
  v4 = llvm::raw_ostream::write((llvm::raw_ostream *)&v25, "rv", 2uLL);
  sub_1C5E21910(v4, *(unsigned int *)this, 0, 0, 0);
  v5 = (llvm::RISCVISAInfo *)*((_QWORD *)this + 3);
  if (v5 != (llvm::RISCVISAInfo *)((char *)this + 32))
  {
    v6 = 0;
    do
    {
      v7 = *((_BYTE *)v5 + 55);
      v8 = v7;
      if (v7 >= 0)
        v9 = (char *)v5 + 32;
      else
        v9 = (const void *)*((_QWORD *)v5 + 4);
      v10 = v7 & 0x7F;
      if (v8 >= 0)
        v11 = v10;
      else
        v11 = *((_QWORD *)v5 + 5);
      if (*((char *)v5 + 79) < 0)
      {
        sub_1C47EBC30(__p, *((void **)v5 + 7), *((_QWORD *)v5 + 8));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)((char *)v5 + 56);
        v23 = *((_QWORD *)v5 + 9);
      }
      v24 = *((_QWORD *)v5 + 10);
      v12 = v6 & 1;
      v13 = v29;
      if (v28 - v29 >= v12)
      {
        if ((v6 & 1) != 0)
        {
          memcpy(v29, "_", v6 & 1);
          v13 = &v29[v12];
          v29 += v12;
        }
        v15 = (llvm::raw_ostream *)&v25;
        v16 = &v29;
      }
      else
      {
        if ((v6 & 1) != 0)
          v14 = "_";
        else
          v14 = 0;
        v15 = llvm::raw_ostream::write((llvm::raw_ostream *)&v25, v14, v6 & 1);
        v16 = (char **)((char *)v15 + 32);
        v13 = (char *)*((_QWORD *)v15 + 4);
      }
      if (v11 <= *((_QWORD *)v15 + 3) - (_QWORD)v13)
      {
        if (v11)
        {
          memcpy(v13, v9, v11);
          *v16 += v11;
        }
      }
      else
      {
        llvm::raw_ostream::write(v15, (const char *)v9, v11);
      }
      sub_1C5E21910((llvm::raw_ostream *)&v25, v24, 0, 0, 0);
      if (v28 == v29)
      {
        v17 = llvm::raw_ostream::write((llvm::raw_ostream *)&v25, "p", 1uLL);
      }
      else
      {
        *v29++ = 112;
        v17 = (llvm::raw_ostream *)&v25;
      }
      sub_1C5E21910(v17, HIDWORD(v24), 0, 0, 0);
      if (SHIBYTE(v23) < 0)
        operator delete(__p[0]);
      v18 = (llvm::RISCVISAInfo *)*((_QWORD *)v5 + 1);
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = *(llvm::RISCVISAInfo **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (llvm::RISCVISAInfo *)*((_QWORD *)v5 + 2);
          v20 = *(_QWORD *)v19 == (_QWORD)v5;
          v5 = v19;
        }
        while (!v20);
      }
      v6 = 1;
      v5 = v19;
    }
    while (v19 != (llvm::RISCVISAInfo *)((char *)this + 32));
  }
  if (*((char *)v33 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)a2, *v33, (unint64_t)v33[1]);
  }
  else
  {
    v21 = *(_OWORD *)v33;
    *(_QWORD *)(a2 + 16) = v33[2];
    *(_OWORD *)a2 = v21;
  }
  v25 = off_1E81A6E70;
  if (v32 == 1 && v27)
    MEMORY[0x1CAA32F9C](v27, 0x1000C8077774924);
  if (SHIBYTE(v35) < 0)
    operator delete(v34[0]);
}

void llvm::RISCVISAInfo::toFeatureVector(llvm::RISCVISAInfo *this@<X0>, unint64_t *a2@<X8>)
{
  _QWORD *v2;
  char *v3;
  char v5;
  void *v6;
  void *v7;
  void **v8;
  int v9;
  BOOL v10;
  char *v11;
  char *v12;
  uint64_t i;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  void *__p[2];
  uint64_t v18;
  void *__dst[2];
  uint64_t v20;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  v3 = (char *)this + 32;
  if (v2 != (_QWORD *)((char *)this + 32))
  {
    while (1)
    {
      if (*((char *)v2 + 55) < 0)
      {
        sub_1C47EBC30(__dst, (void *)v2[4], v2[5]);
      }
      else
      {
        *(_OWORD *)__dst = *((_OWORD *)v2 + 2);
        v20 = v2[6];
      }
      v5 = HIBYTE(v20);
      v6 = v20 >= 0 ? (void *)(HIBYTE(v20) & 0x7F) : __dst[1];
      if (v6 != (void *)1)
        break;
      if (v20 >= 0)
        v7 = (void *)HIBYTE(v20);
      else
        v7 = __dst[1];
      if (v20 >= 0)
        v8 = __dst;
      else
        v8 = (void **)__dst[0];
      v9 = memcmp(v8, "i", v7 != 0);
      v10 = v7 == (void *)1 && v9 == 0;
      if (!v10)
        goto LABEL_31;
      if (v5 < 0)
        goto LABEL_43;
LABEL_21:
      v11 = (char *)v2[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (char *)v2[2];
          v10 = *(_QWORD *)v12 == (_QWORD)v2;
          v2 = v12;
        }
        while (!v10);
      }
      v2 = v12;
      if (v12 == v3)
        return;
    }
    if (v20 >= 0)
      v8 = __dst;
    else
      v8 = (void **)__dst[0];
LABEL_31:
    for (i = 0; i != 14; i += 2)
    {
      if (sub_1C5E2F870(v8, (size_t)v6, (&off_1E81A1DA0)[i]))
        break;
    }
    std::operator+<char>();
    v14 = a2[1];
    if (v14 >= a2[2])
    {
      v16 = sub_1C4D9AEFC(a2, (uint64_t)__p);
    }
    else
    {
      if (SHIBYTE(v18) < 0)
      {
        sub_1C47EBC30((_BYTE *)a2[1], __p[0], (unint64_t)__p[1]);
      }
      else
      {
        v15 = *(_OWORD *)__p;
        *(_QWORD *)(v14 + 16) = v18;
        *(_OWORD *)v14 = v15;
      }
      v16 = v14 + 24;
    }
    a2[1] = v16;
    if (SHIBYTE(v18) < 0)
      operator delete(__p[0]);
    if ((v20 & 0x8000000000000000) == 0)
      goto LABEL_21;
LABEL_43:
    operator delete(__dst[0]);
    goto LABEL_21;
  }
}

BOOL sub_1C5E2F870(const void *a1, size_t a2, char *__s)
{
  if (__s)
  {
    if (strlen(__s) != a2)
      return 0;
    if (!a2)
      return 1;
    return memcmp(__s, a1, a2) == 0;
  }
  else
  {
    return a2 == 0;
  }
}

uint64_t sub_1C5E2F8E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  const void *v6;
  size_t v7;
  size_t v8;

  if (a1 == a2)
    return 0;
  v5 = a1;
  v6 = *(const void **)a3;
  v7 = *(_QWORD *)(a3 + 8);
  while (1)
  {
    v8 = *(_QWORD *)v5 ? strlen(*(const char **)v5) : 0;
    if (v8 == v7
      && (!v7 || !memcmp(*(const void **)v5, v6, v7))
      && *(_DWORD *)(a3 + 16) == *(_DWORD *)(v5 + 8)
      && *(_DWORD *)(a3 + 20) == *(_DWORD *)(v5 + 12))
    {
      break;
    }
    v5 += 16;
    if (v5 == a2)
      return 0;
  }
  return 1;
}

uint64_t sub_1C5E2F99C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  const void **v6;
  uint64_t v7;
  const void **v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v12;
  const void *v13[33];

  v13[32] = *(const void **)MEMORY[0x1E0C80C00];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(const void ***)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v12 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v12;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C5E2FB14(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v13;
  for (i = 8; i != 264; i += 16)
  {
    if (*(_QWORD *)(a1 + i) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      *(_OWORD *)v8 = *(_OWORD *)(a1 + i);
      v8 += 2;
    }
  }
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    v10 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v10;
  }
  return sub_1C5E2FB14(a1, v13, v8);
}

uint64_t sub_1C5E2FB14(uint64_t result, const void **a2, const void **a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  _OWORD *v10;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_OWORD *)(result + 8);
    v9 = (_OWORD *)(result + 264);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_OWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = xmmword_1C85F6FF0;
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((unint64_t)*a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v10 = 0;
      result = sub_1C638E370((uint64_t)v5, a2, &v10);
      *v10 = *(_OWORD *)a2;
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

unint64_t llvm::ScaledNumbers::multiply64(unint64_t this, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t result;
  unint64_t v7;
  int v8;
  BOOL v9;
  unint64_t v10;

  v2 = HIDWORD(this);
  v3 = a2 * (unint64_t)HIDWORD(this);
  v4 = HIDWORD(a2) * (unint64_t)this;
  v5 = a2 * (unint64_t)this;
  result = a2 * this;
  if (result >= v5 + (v3 << 32))
    v7 = (__PAIR128__(HIDWORD(v3) + HIDWORD(a2) * (unint64_t)v2, v5)
        + __PAIR128__(HIDWORD(v4), v3 << 32)) >> 64;
  else
    v7 = ((__PAIR128__(HIDWORD(v3) + HIDWORD(a2) * (unint64_t)v2, v5)
         + __PAIR128__(HIDWORD(v4), v3 << 32)) >> 64)
       + 1;
  if (v7)
  {
    v8 = __clz(v7);
    if (v8)
      v7 = (result >> -(char)v8) | (v7 << v8);
    if (((result >> (v8 ^ 0x3Fu)) & 1) != 0)
    {
      v9 = __CFADD__(v7, 1);
      v10 = v7 + 1;
      if (v9)
        return 0x8000000000000000;
      else
        return v10;
    }
    else
    {
      return v7;
    }
  }
  return result;
}

unint64_t llvm::ScaledNumbers::divide32(llvm::ScaledNumbers *this, unsigned int a2)
{
  unsigned int v2;
  unint64_t v3;
  __int16 v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  __int16 v8;
  BOOL v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;

  v2 = __clz(this) + 32;
  if (!(_DWORD)this)
    v2 = 64;
  v3 = ((unint64_t)this << v2) / a2;
  if (HIDWORD(v3))
  {
    v4 = __clz(v3);
    v5 = v3 >> (32 - v4);
    LOWORD(v2) = 32 - v4 - v2;
    v6 = v3 >> (31 - v4);
    v7 = v5 + 1;
    if ((_DWORD)v5 == -1)
    {
      v7 = 0x80000000;
      v8 = v2 + 1;
    }
    else
    {
      v8 = v2;
    }
    v9 = (v6 & 1) == 0;
    if ((v6 & 1) != 0)
      v3 = v7;
    else
      v3 = v5;
    if (!v9)
      LOWORD(v2) = v8;
  }
  else
  {
    v10 = -v2;
    v11 = ((unint64_t)this << v2) % a2;
    v12 = (a2 & 1) + ((unint64_t)a2 >> 1);
    v13 = v3 + 1;
    if ((_DWORD)v3 == -1)
    {
      v13 = 0x80000000;
      LOWORD(v10) = 1 - v2;
    }
    if (v11 >= v12)
      v3 = v13;
    else
      v3 = v3;
    if (v11 < v12)
      v2 = -v2;
    else
      LOWORD(v2) = v10;
  }
  return v3 | ((unint64_t)(unsigned __int16)v2 << 32);
}

unint64_t llvm::ScaledNumbers::divide64(unint64_t this, unint64_t a2)
{
  int v2;
  int v3;
  unint64_t v4;
  int v5;
  __int16 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v2 = __clz(__rbit64(a2));
  v3 = -v2;
  if (!v2)
    LOBYTE(v2) = 0;
  v4 = a2 >> v2;
  if (v4 != 1)
  {
    v5 = __clz(this);
    v6 = v3 - v5;
    if (!v5)
      LOBYTE(v5) = 0;
    v7 = this << v5;
    v8 = (this << v5) / v4;
    v9 = v7 - v8 * v4;
    if (v9)
    {
      do
      {
        --v6;
        v10 = v9 < 0;
        v11 = 2 * v9;
        v13 = v10 || v4 <= v11;
        if ((_DWORD)v13)
          v14 = v4;
        else
          v14 = 0;
        v9 = v11 - v14;
        v8 = v13 | (2 * v8);
      }
      while ((v8 & 0x8000000000000000) == 0 && v9);
    }
    v15 = (v4 & 1) + (v4 >> 1);
    v16 = v8 + 1;
    if (v8 == -1)
      v16 = 0x8000000000000000;
    if (v9 >= v15)
      return v16;
    else
      return v8;
  }
  return this;
}

uint64_t llvm::ScaledNumbers::compareImpl(unint64_t this, unint64_t a2, char a3)
{
  _BOOL4 v3;

  v3 = this >> a3 << a3 < this;
  if (this >> a3 > a2)
    v3 = 1;
  if (this >> a3 >= a2)
    return v3;
  else
    return 0xFFFFFFFFLL;
}

void llvm::ScaledNumberBase::toString(unint64_t this@<X0>, unsigned int a2@<W1>, char a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  BOOL v15;
  char v16;
  std::string::size_type size;
  std::string::size_type v18;
  unint64_t v19;
  int v20;
  int v21;
  std::string *p_str;
  std::string *v23;
  BOOL v24;
  char *v25;
  std::string::value_type v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  std::string::size_type v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  std::string *v38;
  std::string::size_type v39;
  size_t v40;
  void *v41;
  std::string *v42;
  std::string::size_type v43;
  std::string::size_type v44;
  std::string *v45;
  char *v46;
  std::string::size_type v47;
  int v48;
  uint64_t v49;
  void *v50;
  std::string *v51;
  std::string::size_type v52;
  std::string *v53;
  std::string::size_type v54;
  std::string::size_type v55;
  std::string v57;
  char v58;
  std::string v59;
  std::string __str;
  _BYTE v61[24];
  std::string v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if (!this)
  {
    *(_BYTE *)(a5 + 23) = 3;
    *(_DWORD *)a5 = 3157552;
    return;
  }
  if (!a2)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v14 = 0;
    memset(&__str, 0, sizeof(__str));
    v13 = this;
    do
    {
LABEL_36:
      std::string::push_back(&__str, (v13 % 0xA) | 0x30);
      v15 = v13 > 9;
      v13 /= 0xAuLL;
    }
    while (v15);
    v16 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    size = __str.__r_.__value_.__l.__size_;
    v18 = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
    else
      v19 = __str.__r_.__value_.__l.__size_;
    goto LABEL_52;
  }
  if ((int)a2 < 1)
  {
    if (a2 < 0xFFFFFFC1)
    {
      if (a2 == -64)
      {
        v10 = 0;
        v11 = 0;
        memset(&__str, 0, sizeof(__str));
        v14 = 1;
        v12 = this;
        goto LABEL_51;
      }
      if (a2 >= 0xFFFFFF89)
        v10 = this << a2;
      else
        v10 = 0;
      if (a2 >= 0xFFFFFF89)
        v11 = -64 - a2;
      else
        v11 = 0;
      if (a2 >= 0xFFFFFF89)
        v12 = this >> -(char)a2;
      else
        v12 = 0;
      v13 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v13 = this >> -(char)a2;
      v12 = this << a2;
    }
  }
  else
  {
    v7 = __clz(this);
    if ((int)v7 >= (int)a2)
      v8 = a2;
    else
      v8 = v7;
    if (v7 >= a2)
      v9 = this << v8;
    else
      v9 = 0;
    if (v8)
      LOWORD(a2) = a2 - v8;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    if (v8)
      v13 = v9;
    else
      v13 = 0;
    if (v8)
      this <<= v8;
  }
  v14 = v12 != 0;
  if (!(v13 | v12))
  {
    v20 = (__int16)a2 + 63;
    v21 = v20 - __clz(this);
    if (v21 >= 0x3FFF)
      v21 = 0x3FFF;
    v59.__r_.__value_.__r.__words[0] = this << (v20 - v21);
    v59.__r_.__value_.__l.__size_ = (v21 + 0x3FFF) & (unint64_t)((uint64_t)v59.__r_.__value_.__l.__data_ >> 63);
    LODWORD(__str.__r_.__value_.__r.__words[1]) = 80;
    llvm::APInt::initFromArray((unsigned int *)&__str, (uint64_t *)&v59, 2u);
    llvm::detail::IEEEFloat::initFromF80LongDoubleAPInt((int **)&v62.__r_.__value_.__l.__size_, (const llvm::APInt **)&__str);
    if (LODWORD(__str.__r_.__value_.__r.__words[1]) >= 0x41 && __str.__r_.__value_.__r.__words[0])
      MEMORY[0x1CAA32F9C](__str.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v61;
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_1C85FBF50;
    sub_1C5322CA0((uint64_t)&v62, (uint64_t *)&__str, a4, 0, 1);
    sub_1C4E61270((_QWORD *)a5, __str.__r_.__value_.__l.__data_, (char *)(__str.__r_.__value_.__r.__words[0] + __str.__r_.__value_.__l.__size_), __str.__r_.__value_.__l.__size_);
    if (__str.__r_.__value_.__l.__data_ != v61)
      free(__str.__r_.__value_.__l.__data_);
    if ((_UNKNOWN *)v62.__r_.__value_.__l.__size_ == &unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)&v62.__r_.__value_.__r.__words[2]);
    }
    else if ((*(_DWORD *)(v62.__r_.__value_.__l.__size_ + 8) - 64) <= 0xFFFFFF7F
           && v62.__r_.__value_.__r.__words[2])
    {
      MEMORY[0x1CAA32F9C](v62.__r_.__value_.__r.__words[2], 0x1000C8000313F17);
    }
    return;
  }
  memset(&__str, 0, sizeof(__str));
  if (v13)
    goto LABEL_36;
LABEL_51:
  std::string::push_back(&__str, 48);
  v19 = 0;
  v16 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  size = __str.__r_.__value_.__l.__size_;
  v18 = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
LABEL_52:
  p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if (v16 >= 0)
  {
    p_str = &__str;
    size = v18;
  }
  v23 = (std::string *)((char *)p_str + size - 1);
  if (size)
    v24 = p_str >= v23;
  else
    v24 = 1;
  if (!v24)
  {
    v25 = &p_str->__r_.__value_.__s.__data_[1];
    do
    {
      v26 = *(v25 - 1);
      *(v25 - 1) = v23->__r_.__value_.__s.__data_[0];
      v23->__r_.__value_.__s.__data_[0] = v26;
      v23 = (std::string *)((char *)v23 - 1);
      v24 = v25++ >= (char *)v23;
    }
    while (!v24);
  }
  if (!v14)
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
    else
      v40 = __str.__r_.__value_.__l.__size_;
    sub_1C484371C(a5, v40 + 2);
    if (*(char *)(a5 + 23) >= 0)
      v41 = (void *)a5;
    else
      v41 = *(void **)a5;
    if (v40)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = &__str;
      else
        v42 = (std::string *)__str.__r_.__value_.__r.__words[0];
      memmove(v41, v42, v40);
    }
    strcpy((char *)v41 + v40, ".0");
    goto LABEL_118;
  }
  std::string::push_back(&__str, 46);
  v27 = 1;
  v28 = 1 << -a3;
  v29 = (v10 >> 8) & 0xF0FFFFFFFFFFFFFFLL | ((v12 & 0xF) << 56);
  v30 = v12 >> 4;
  v31 = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v31 = __str.__r_.__value_.__l.__size_;
  v55 = v31;
  while (1)
  {
    v32 = v11;
    v33 = v27;
    if (v11)
      --v11;
    else
      v11 = 0;
    if (v32)
      v34 = 5;
    else
      v34 = 10;
    v35 = 10 * v29;
    v36 = 10 * v30 + ((10 * v29) >> 60);
    v37 = v36 >> 60;
    if ((v36 >> 60) >= 0xA)
      LOBYTE(v37) = (v36 >> 60) - 10;
    std::string::push_back(&__str, v37 | 0x30);
    if (v19)
      goto LABEL_80;
    v38 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v38 = &__str;
    v39 = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v39 = __str.__r_.__value_.__l.__size_;
    if (v38->__r_.__value_.__s.__data_[v39 - 1] != 48)
LABEL_80:
      ++v19;
    else
      v19 = 0;
    v28 *= v34;
    if (!v28)
      break;
    v30 = v36 & 0xFFFFFFFFFFFFFFFLL;
    if (16 * v36 < v28 >> 1)
      break;
    v29 = v35 & 0xFFFFFFFFFFFFFFELL;
    v27 = v33 + 1;
    if (a4 && a4 < v19 && v33 >= 2)
      goto LABEL_101;
  }
  if (!a4 || a4 >= v19)
  {
LABEL_117:
    sub_1C5E30480((std::string *)a5, &__str);
    goto LABEL_118;
  }
LABEL_101:
  v43 = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v43 = __str.__r_.__value_.__l.__size_;
  if (a4 - v19 + v43 <= v55 + 1)
    v44 = v55 + 1;
  else
    v44 = a4 - v19 + v43;
  if (v44 >= v43)
    goto LABEL_117;
  v45 = &__str;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v45 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((v45->__r_.__value_.__s.__data_[v44] - 53) < 5)
  {
    if (!v44)
    {
LABEL_116:
      v49 = 1;
      *((_BYTE *)&v59.__r_.__value_.__s + 23) = 1;
      v59.__r_.__value_.__s.__data_[0] = 49;
      goto LABEL_124;
    }
    v46 = (char *)&v45[-1].__r_.__value_.__r.__words[2] + 7;
    v47 = v44;
    while (1)
    {
      v48 = v46[v47];
      if (v48 != 46)
      {
        if (v48 != 57)
        {
          v49 = 0;
          v45->__r_.__value_.__s.__data_[v47 - 1] = v48 + 1;
          *((_BYTE *)&v59.__r_.__value_.__s + 23) = 0;
LABEL_124:
          *(_BYTE *)((unint64_t)&v59 | v49) = 0;
          std::string::basic_string(&v57, &__str, 0, v44, (std::allocator<char> *)&v58);
          if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v51 = &v57;
          else
            v51 = (std::string *)v57.__r_.__value_.__r.__words[0];
          if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v52 = *((_BYTE *)&v57.__r_.__value_.__s + 23) & 0x7F;
          else
            v52 = v57.__r_.__value_.__l.__size_;
          v53 = std::string::append(&v59, (const std::string::value_type *)v51, v52);
          v54 = v53->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v62.__r_.__value_.__l.__data_ = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
          v62.__r_.__value_.__r.__words[2] = v54;
          v53->__r_.__value_.__l.__size_ = 0;
          v53->__r_.__value_.__r.__words[2] = 0;
          v53->__r_.__value_.__r.__words[0] = 0;
          sub_1C5E30480((std::string *)a5, &v62);
          if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v62.__r_.__value_.__l.__data_);
          if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v57.__r_.__value_.__l.__data_);
          if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
          {
            v50 = (void *)v59.__r_.__value_.__r.__words[0];
LABEL_136:
            operator delete(v50);
          }
          goto LABEL_118;
        }
        v46[v47] = 48;
      }
      if (!--v47)
        goto LABEL_116;
    }
  }
  std::string::basic_string(&v62, &__str, 0, v44, (std::allocator<char> *)&v59);
  sub_1C5E30480((std::string *)a5, &v62);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
  {
    v50 = (void *)v62.__r_.__value_.__r.__words[0];
    goto LABEL_136;
  }
LABEL_118:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

std::string *sub_1C5E30480(std::string *a1, const std::string *a2)
{
  char v2;
  BOOL v3;
  const std::string *v4;
  uint64_t size;
  int v6;
  uint64_t v7;
  char v9;

  v2 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v3 = v2 < 0;
  v4 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  if (v2 >= 0)
    v4 = a2;
  size = v2 & 0x7F;
  if (v3)
    size = a2->__r_.__value_.__l.__size_;
  while (size)
  {
    v6 = *((unsigned __int8 *)&v4[-1].__r_.__value_.__r.__words[2] + size-- + 7);
    if (v6 != 48)
      goto LABEL_9;
  }
  size = -1;
LABEL_9:
  if (v4->__r_.__value_.__s.__data_[size] == 46)
    v7 = size + 1;
  else
    v7 = size;
  return std::string::basic_string(a1, a2, 0, v7 + 1, (std::allocator<char> *)&v9);
}

llvm::raw_ostream *llvm::ScaledNumberBase::print(llvm::ScaledNumberBase *this, llvm::raw_ostream *a2, unsigned int a3, char a4, unsigned int a5)
{
  void **v6;
  size_t v7;
  llvm::raw_ostream *v8;
  void *__p[2];
  char v11;

  llvm::ScaledNumberBase::toString((unint64_t)a2, a3, a4, a5, (uint64_t)__p);
  if (v11 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if (v11 >= 0)
    v7 = v11 & 0x7F;
  else
    v7 = (size_t)__p[1];
  v8 = llvm::raw_ostream::write(this, (const char *)v6, v7);
  if (v11 < 0)
    operator delete(__p[0]);
  return v8;
}

llvm::raw_ostream *llvm::ScaledNumberBase::dump(llvm::ScaledNumberBase *this, signed int a2, int a3)
{
  llvm *v6;
  llvm::raw_ostream *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  unint64_t v10;
  llvm::raw_ostream *v11;
  int v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v15;
  llvm::raw_ostream *v16;
  int v17;
  llvm::raw_ostream *result;
  _BYTE *v19;

  v6 = llvm::dbgs(this);
  v7 = llvm::ScaledNumberBase::print(v6, this, a2, a3, 0);
  v8 = v7;
  v9 = (_BYTE *)*((_QWORD *)v7 + 4);
  if (*((_BYTE **)v7 + 3) == v9)
  {
    v8 = llvm::raw_ostream::write(v7, "[", 1uLL);
  }
  else
  {
    *v9 = 91;
    ++*((_QWORD *)v7 + 4);
  }
  v10 = a3;
  if (a3 < 0)
  {
    v10 = -(uint64_t)a3;
    v11 = v8;
    v12 = 1;
  }
  else
  {
    v11 = v8;
    v12 = 0;
  }
  sub_1C5E21910(v11, v10, 0, 0, v12);
  v13 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (*((_BYTE **)v8 + 3) == v13)
  {
    v8 = llvm::raw_ostream::write(v8, ":", 1uLL);
  }
  else
  {
    *v13 = 58;
    ++*((_QWORD *)v8 + 4);
  }
  sub_1C5E21910(v8, (unint64_t)this, 0, 0, 0);
  v14 = *((_QWORD *)v8 + 4);
  if ((unint64_t)(*((_QWORD *)v8 + 3) - v14) > 2)
  {
    *(_BYTE *)(v14 + 2) = 94;
    *(_WORD *)v14 = 12842;
    *((_QWORD *)v8 + 4) += 3;
  }
  else
  {
    v8 = llvm::raw_ostream::write(v8, "*2^", 3uLL);
  }
  v15 = a2;
  if (a2 < 0)
  {
    v15 = -(uint64_t)a2;
    v16 = v8;
    v17 = 1;
  }
  else
  {
    v16 = v8;
    v17 = 0;
  }
  result = sub_1C5E21910(v16, v15, 0, 0, v17);
  v19 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (*((_BYTE **)v8 + 3) == v19)
    return llvm::raw_ostream::write(v8, "]", 1uLL);
  *v19 = 93;
  ++*((_QWORD *)v8 + 4);
  return result;
}

llvm::raw_ostream *llvm::operator<<(llvm::raw_ostream *this, llvm **a2)
{
  _WORD *v4;
  void **v5;
  size_t v6;
  void *__p[2];
  char v9;

  v4 = (_WORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v4 > 1uLL)
  {
    *v4 = 30768;
    *((_QWORD *)this + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(this, "0x", 2uLL);
  }
  llvm::to_hexString(*a2, 1, (uint64_t)__p);
  if (v9 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if (v9 >= 0)
    v6 = v9 & 0x7F;
  else
    v6 = (size_t)__p[1];
  llvm::raw_ostream::write(this, (const char *)v5, v6);
  if (v9 < 0)
    operator delete(__p[0]);
  return this;
}

void llvm::to_hexString(llvm *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v4;
  _QWORD v5[2];
  int v6;
  char v7;
  char v8;
  char v9;
  void (**v10)(llvm::raw_ostream *__hidden);
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  int v17;
  void **v18;
  void *v19[2];
  uint64_t v20;

  v19[0] = 0;
  v19[1] = 0;
  v20 = 0;
  v11 = 0;
  v15 = 0;
  v16 = 0;
  v10 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v18 = v19;
  v17 = 0;
  v13 = 0;
  v14 = 0;
  v12 = 0;
  v5[0] = this;
  v5[1] = 0;
  v6 = 1;
  v7 = 1;
  v8 = a2;
  v9 = 0;
  llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v10, (uint64_t)v5);
  if (*((char *)v18 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)a3, *v18, (unint64_t)v18[1]);
  }
  else
  {
    v4 = *(_OWORD *)v18;
    *(_QWORD *)(a3 + 16) = v18[2];
    *(_OWORD *)a3 = v4;
  }
  v10 = off_1E81A6E70;
  if (v17 == 1 && v12)
    MEMORY[0x1CAA32F9C](v12, 0x1000C8077774924);
  if (SHIBYTE(v20) < 0)
    operator delete(v19[0]);
}

llvm::raw_ostream *llvm::ScopedPrinter::printBinaryImpl(uint64_t a1, const void *a2, size_t a3, const void *a4, size_t a5, unsigned __int8 *a6, unint64_t a7, int a8, unsigned int a9)
{
  llvm::raw_ostream *v17;
  _BYTE *v18;
  size_t v19;
  llvm::raw_ostream *v20;
  _BYTE *v21;
  void *v22;
  llvm::raw_ostream *v23;
  _WORD *v24;
  void *v25;
  llvm::raw_ostream *v26;
  _WORD *v27;
  llvm::raw_ostream *result;
  llvm::raw_ostream *v29;
  uint64_t v30;
  llvm::raw_ostream *v31;
  int v32;
  llvm::raw_ostream *v33;
  _BYTE *v34;
  _WORD *v35;
  unsigned __int8 *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  __int16 v42;
  char v43;

  v17 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1);
  v18 = (_BYTE *)*((_QWORD *)v17 + 4);
  v19 = *((_QWORD *)v17 + 3) - (_QWORD)v18;
  if (a7 > 0x10 || a8)
  {
    if (a3 <= v19)
    {
      if (a3)
      {
        memcpy(v18, a2, a3);
        *((_QWORD *)v17 + 4) += a3;
      }
    }
    else
    {
      llvm::raw_ostream::write(v17, (const char *)a2, a3);
    }
    if (a5)
    {
      v23 = *(llvm::raw_ostream **)(a1 + 8);
      v24 = (_WORD *)*((_QWORD *)v23 + 4);
      if (*((_QWORD *)v23 + 3) - (_QWORD)v24 > 1uLL)
      {
        *v24 = 8250;
        v25 = (void *)(*((_QWORD *)v23 + 4) + 2);
        *((_QWORD *)v23 + 4) = v25;
      }
      else
      {
        llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 8), ": ", 2uLL);
        v25 = (void *)*((_QWORD *)v23 + 4);
      }
      if (a5 <= *((_QWORD *)v23 + 3) - (_QWORD)v25)
      {
        memcpy(v25, a4, a5);
        *((_QWORD *)v23 + 4) += a5;
      }
      else
      {
        llvm::raw_ostream::write(v23, (const char *)a4, a5);
      }
    }
    v29 = *(llvm::raw_ostream **)(a1 + 8);
    v30 = *((_QWORD *)v29 + 4);
    if ((unint64_t)(*((_QWORD *)v29 + 3) - v30) > 2)
    {
      *(_BYTE *)(v30 + 2) = 10;
      *(_WORD *)v30 = 10272;
      *((_QWORD *)v29 + 4) += 3;
      if (a7)
      {
LABEL_31:
        v31 = *(llvm::raw_ostream **)(a1 + 8);
        v32 = 2 * *(_DWORD *)(a1 + 16) + 2;
        v36 = a6;
        v37 = a7;
        v38 = a9;
        v39 = 1;
        v40 = v32;
        v41 = 16;
        v42 = 260;
        v43 = 1;
        v33 = llvm::raw_ostream::operator<<(v31, &v36);
        v34 = (_BYTE *)*((_QWORD *)v33 + 4);
        if (*((_BYTE **)v33 + 3) == v34)
        {
          llvm::raw_ostream::write(v33, "\n", 1uLL);
        }
        else
        {
          *v34 = 10;
          ++*((_QWORD *)v33 + 4);
        }
      }
    }
    else
    {
      llvm::raw_ostream::write(v29, " (\n", 3uLL);
      if (a7)
        goto LABEL_31;
    }
    result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1);
    goto LABEL_34;
  }
  if (a3 <= v19)
  {
    if (a3)
    {
      memcpy(v18, a2, a3);
      v18 = (_BYTE *)(*((_QWORD *)v17 + 4) + a3);
      *((_QWORD *)v17 + 4) = v18;
    }
  }
  else
  {
    llvm::raw_ostream::write(v17, (const char *)a2, a3);
    v18 = (_BYTE *)*((_QWORD *)v17 + 4);
  }
  if (*((_BYTE **)v17 + 3) == v18)
  {
    llvm::raw_ostream::write(v17, ":", 1uLL);
    if (a5)
    {
LABEL_11:
      v20 = *(llvm::raw_ostream **)(a1 + 8);
      v21 = (_BYTE *)*((_QWORD *)v20 + 4);
      if (*((_BYTE **)v20 + 3) == v21)
      {
        llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 8), " ", 1uLL);
        v22 = (void *)*((_QWORD *)v20 + 4);
      }
      else
      {
        *v21 = 32;
        v22 = (void *)(*((_QWORD *)v20 + 4) + 1);
        *((_QWORD *)v20 + 4) = v22;
      }
      if (a5 <= *((_QWORD *)v20 + 3) - (_QWORD)v22)
      {
        memcpy(v22, a4, a5);
        *((_QWORD *)v20 + 4) += a5;
      }
      else
      {
        llvm::raw_ostream::write(v20, (const char *)a4, a5);
      }
    }
  }
  else
  {
    *v18 = 58;
    ++*((_QWORD *)v17 + 4);
    if (a5)
      goto LABEL_11;
  }
  v26 = *(llvm::raw_ostream **)(a1 + 8);
  v27 = (_WORD *)*((_QWORD *)v26 + 4);
  if (*((_QWORD *)v26 + 3) - (_QWORD)v27 > 1uLL)
  {
    *v27 = 10272;
    *((_QWORD *)v26 + 4) += 2;
  }
  else
  {
    v26 = llvm::raw_ostream::write(v26, " (", 2uLL);
  }
  v36 = a6;
  v37 = a7;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = a7;
  v42 = 257;
  v43 = 0;
  if (!(_DWORD)a7)
    LOBYTE(v42) = 0;
  result = llvm::raw_ostream::operator<<(v26, &v36);
LABEL_34:
  v35 = (_WORD *)*((_QWORD *)result + 4);
  if (*((_QWORD *)result + 3) - (_QWORD)v35 <= 1uLL)
    return llvm::raw_ostream::write(result, ")\n", 2uLL);
  *v35 = 2601;
  *((_QWORD *)result + 4) += 2;
  return result;
}

uint64_t llvm::JSONScopedPrinter::JSONScopedPrinter(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  int v5;
  uint64_t v6;

  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 1;
  *(_QWORD *)a1 = &off_1E81A2558;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 48) = a1 + 64;
  *(_QWORD *)(a1 + 56) = 0x800000000;
  if (a3)
    v5 = 2;
  else
    v5 = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 144;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = a2;
  *(_DWORD *)(a1 + 296) = v5;
  *(_DWORD *)(a1 + 300) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 136) = 0x1000000001;
  v6 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 312) = v6;
  if (v6)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a1);
  return a1;
}

_QWORD *sub_1C5E30D2C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  *a1 = &off_1E81A2558;
  v2 = a1[39];
  a1[39] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_QWORD *)a1[16];
  if (v3 != a1 + 18)
    free(v3);
  v4 = (_QWORD *)a1[6];
  if (v4 != a1 + 8)
    free(v4);
  return a1;
}

void sub_1C5E30D98(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  *a1 = &off_1E81A2558;
  v2 = a1[39];
  a1[39] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_QWORD *)a1[16];
  if (v3 != a1 + 18)
    free(v3);
  v4 = (_QWORD *)a1[6];
  if (v4 != a1 + 8)
    free(v4);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5E30E14(uint64_t a1, char *a2, unint64_t a3, void *a4)
{
  uint64_t v5;
  void *v6[5];

  v6[4] = *(void **)MEMORY[0x1E0C80C00];
  v5 = a1 + 128;
  LOWORD(v6[0]) = 4;
  v6[1] = a4;
  llvm::json::OStream::attributeBegin(a1 + 128, a2, a3);
  llvm::json::OStream::value(v5, (uint64_t)v6);
  --*(_DWORD *)(a1 + 136);
  llvm::json::Value::destroy(v6);
}

void sub_1C5E30E9C(uint64_t a1, char *a2, unint64_t a3, unsigned int a4)
{
  uint64_t v5;
  void *v6[5];

  v6[4] = *(void **)MEMORY[0x1E0C80C00];
  v5 = a1 + 128;
  LOWORD(v6[0]) = 3;
  v6[1] = (void *)a4;
  llvm::json::OStream::attributeBegin(a1 + 128, a2, a3);
  llvm::json::OStream::value(v5, (uint64_t)v6);
  --*(_DWORD *)(a1 + 136);
  llvm::json::Value::destroy(v6);
}

void sub_1C5E30F28(uint64_t a1, char *a2, unint64_t a3, unsigned int a4)
{
  uint64_t v5;
  void *v6[5];

  v6[4] = *(void **)MEMORY[0x1E0C80C00];
  v5 = a1 + 128;
  LOWORD(v6[0]) = 3;
  v6[1] = (void *)a4;
  llvm::json::OStream::attributeBegin(a1 + 128, a2, a3);
  llvm::json::OStream::value(v5, (uint64_t)v6);
  --*(_DWORD *)(a1 + 136);
  llvm::json::Value::destroy(v6);
}

void sub_1C5E30FB4(uint64_t a1, char *a2, unint64_t a3, unsigned int a4)
{
  uint64_t v5;
  void *v6[5];

  v6[4] = *(void **)MEMORY[0x1E0C80C00];
  v5 = a1 + 128;
  LOWORD(v6[0]) = 3;
  v6[1] = (void *)a4;
  llvm::json::OStream::attributeBegin(a1 + 128, a2, a3);
  llvm::json::OStream::value(v5, (uint64_t)v6);
  --*(_DWORD *)(a1 + 136);
  llvm::json::Value::destroy(v6);
}

void sub_1C5E31040(uint64_t a1, char *a2, unint64_t a3, void *a4)
{
  uint64_t v5;
  void *v6[5];

  v6[4] = *(void **)MEMORY[0x1E0C80C00];
  v5 = a1 + 128;
  LOWORD(v6[0]) = 3;
  v6[1] = a4;
  llvm::json::OStream::attributeBegin(a1 + 128, a2, a3);
  llvm::json::OStream::value(v5, (uint64_t)v6);
  --*(_DWORD *)(a1 + 136);
  llvm::json::Value::destroy(v6);
}

void sub_1C5E310C8(uint64_t a1, char *a2, unint64_t a3, int a4)
{
  uint64_t v5;
  void *v6[5];

  v6[4] = *(void **)MEMORY[0x1E0C80C00];
  v5 = a1 + 128;
  LOWORD(v6[0]) = 3;
  v6[1] = (void *)a4;
  llvm::json::OStream::attributeBegin(a1 + 128, a2, a3);
  llvm::json::OStream::value(v5, (uint64_t)v6);
  --*(_DWORD *)(a1 + 136);
  llvm::json::Value::destroy(v6);
}

void sub_1C5E31154(uint64_t a1, char *a2, unint64_t a3, int a4)
{
  uint64_t v5;
  void *v6[5];

  v6[4] = *(void **)MEMORY[0x1E0C80C00];
  v5 = a1 + 128;
  LOWORD(v6[0]) = 3;
  v6[1] = (void *)a4;
  llvm::json::OStream::attributeBegin(a1 + 128, a2, a3);
  llvm::json::OStream::value(v5, (uint64_t)v6);
  --*(_DWORD *)(a1 + 136);
  llvm::json::Value::destroy(v6);
}

void sub_1C5E311E0(uint64_t a1, char *a2, unint64_t a3, int a4)
{
  uint64_t v5;
  void *v6[5];

  v6[4] = *(void **)MEMORY[0x1E0C80C00];
  v5 = a1 + 128;
  LOWORD(v6[0]) = 3;
  v6[1] = (void *)a4;
  llvm::json::OStream::attributeBegin(a1 + 128, a2, a3);
  llvm::json::OStream::value(v5, (uint64_t)v6);
  --*(_DWORD *)(a1 + 136);
  llvm::json::Value::destroy(v6);
}

void sub_1C5E3126C(uint64_t a1, char *a2, unint64_t a3, uint64_t a4)
{
  llvm::json::OStream *v6;
  llvm::raw_ostream *v7;
  _BOOL4 v8;
  void *v9;
  __int128 v10;
  _QWORD v11[6];

  v11[5] = *MEMORY[0x1E0C80C00];
  v6 = (llvm::json::OStream *)(a1 + 128);
  llvm::json::OStream::attributeBegin(a1 + 128, a2, a3);
  v7 = (llvm::raw_ostream *)llvm::json::OStream::rawValueBegin(v6);
  v8 = *(_BYTE *)(a4 + 12) == 0;
  v9 = v11;
  v10 = xmmword_1C64638D0;
  llvm::APInt::toString(a4, &v9, 0xAu, v8, 0);
  llvm::raw_ostream::write(v7, (const char *)v9, v10);
  if (v9 != v11)
    free(v9);
  *(_DWORD *)(a1 + 136) -= 2;
}

void sub_1C5E31344(uint64_t a1, char *a2, unint64_t a3, char a4)
{
  uint64_t v5;
  void *v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v5 = a1 + 128;
  LOWORD(v6) = 1;
  v7 = a4;
  llvm::json::OStream::attributeBegin(a1 + 128, a2, a3);
  llvm::json::OStream::value(v5, (uint64_t)&v6);
  --*(_DWORD *)(a1 + 136);
  llvm::json::Value::destroy(&v6);
}

llvm::raw_ostream *sub_1C5E313CC(uint64_t a1, char *a2, unint64_t a3, char *a4, uint64_t a5)
{
  llvm::json::OStream *v8;
  char v9;
  llvm::raw_ostream *result;
  void *v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = (llvm::json::OStream *)(a1 + 128);
  llvm::json::OStream::attributeBegin(a1 + 128, a2, a3);
  llvm::json::OStream::arrayBegin(v8);
  for (; a5; --a5)
  {
    v9 = *a4++;
    LOWORD(v11) = 1;
    v12 = v9;
    llvm::json::OStream::value((uint64_t)v8, (uint64_t)&v11);
    llvm::json::Value::destroy(&v11);
  }
  result = llvm::json::OStream::arrayEnd(v8);
  --*(_DWORD *)(a1 + 136);
  return result;
}

llvm::raw_ostream *sub_1C5E3148C(uint64_t a1, char *a2, unint64_t a3, __int128 *a4, uint64_t a5)
{
  llvm::json::OStream *v8;
  uint64_t v9;
  __int128 v10;
  llvm::raw_ostream *result;
  void *__p[2];
  uint64_t v13;
  void *v14[5];

  v14[4] = *(void **)MEMORY[0x1E0C80C00];
  v8 = (llvm::json::OStream *)(a1 + 128);
  llvm::json::OStream::attributeBegin(a1 + 128, a2, a3);
  llvm::json::OStream::arrayBegin(v8);
  if (a5)
  {
    v9 = 24 * a5;
    do
    {
      if (*((char *)a4 + 23) < 0)
      {
        sub_1C47EBC30(__p, *(void **)a4, *((_QWORD *)a4 + 1));
      }
      else
      {
        v10 = *a4;
        v13 = *((_QWORD *)a4 + 2);
        *(_OWORD *)__p = v10;
      }
      sub_1C4D673F4((uint64_t)v14, (unint64_t)__p);
      llvm::json::OStream::value((uint64_t)v8, (uint64_t)v14);
      llvm::json::Value::destroy(v14);
      if (SHIBYTE(v13) < 0)
        operator delete(__p[0]);
      a4 = (__int128 *)((char *)a4 + 24);
      v9 -= 24;
    }
    while (v9);
  }
  result = llvm::json::OStream::arrayEnd(v8);
  --*(_DWORD *)(a1 + 136);
  return result;
}

llvm::raw_ostream *sub_1C5E31584(uint64_t a1, char *a2, unint64_t a3, void **a4, uint64_t a5)
{
  llvm::json::OStream *v8;
  uint64_t v9;
  void *v10;
  llvm::raw_ostream *result;
  void *v12[5];

  v12[4] = *(void **)MEMORY[0x1E0C80C00];
  v8 = (llvm::json::OStream *)(a1 + 128);
  llvm::json::OStream::attributeBegin(a1 + 128, a2, a3);
  llvm::json::OStream::arrayBegin(v8);
  if (a5)
  {
    v9 = 8 * a5;
    do
    {
      v10 = *a4++;
      LOWORD(v12[0]) = 4;
      v12[1] = v10;
      llvm::json::OStream::value((uint64_t)v8, (uint64_t)v12);
      llvm::json::Value::destroy(v12);
      v9 -= 8;
    }
    while (v9);
  }
  result = llvm::json::OStream::arrayEnd(v8);
  --*(_DWORD *)(a1 + 136);
  return result;
}

llvm::raw_ostream *sub_1C5E31648(uint64_t a1, char *a2, unint64_t a3, unsigned int *a4, uint64_t a5)
{
  llvm::json::OStream *v8;
  uint64_t v9;
  unsigned int v10;
  llvm::raw_ostream *result;
  void *v12[5];

  v12[4] = *(void **)MEMORY[0x1E0C80C00];
  v8 = (llvm::json::OStream *)(a1 + 128);
  llvm::json::OStream::attributeBegin(a1 + 128, a2, a3);
  llvm::json::OStream::arrayBegin(v8);
  if (a5)
  {
    v9 = 4 * a5;
    do
    {
      v10 = *a4++;
      LOWORD(v12[0]) = 3;
      v12[1] = (void *)v10;
      llvm::json::OStream::value((uint64_t)v8, (uint64_t)v12);
      llvm::json::Value::destroy(v12);
      v9 -= 4;
    }
    while (v9);
  }
  result = llvm::json::OStream::arrayEnd(v8);
  --*(_DWORD *)(a1 + 136);
  return result;
}

llvm::raw_ostream *sub_1C5E3170C(uint64_t a1, char *a2, unint64_t a3, unsigned __int16 *a4, uint64_t a5)
{
  llvm::json::OStream *v8;
  uint64_t v9;
  unsigned int v10;
  llvm::raw_ostream *result;
  void *v12[5];

  v12[4] = *(void **)MEMORY[0x1E0C80C00];
  v8 = (llvm::json::OStream *)(a1 + 128);
  llvm::json::OStream::attributeBegin(a1 + 128, a2, a3);
  llvm::json::OStream::arrayBegin(v8);
  if (a5)
  {
    v9 = 2 * a5;
    do
    {
      v10 = *a4++;
      LOWORD(v12[0]) = 3;
      v12[1] = (void *)v10;
      llvm::json::OStream::value((uint64_t)v8, (uint64_t)v12);
      llvm::json::Value::destroy(v12);
      v9 -= 2;
    }
    while (v9);
  }
  result = llvm::json::OStream::arrayEnd(v8);
  --*(_DWORD *)(a1 + 136);
  return result;
}

llvm::raw_ostream *sub_1C5E317D0(uint64_t a1, char *a2, unint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  llvm::json::OStream *v8;
  unsigned int v9;
  llvm::raw_ostream *result;
  void *v11[5];

  v11[4] = *(void **)MEMORY[0x1E0C80C00];
  v8 = (llvm::json::OStream *)(a1 + 128);
  llvm::json::OStream::attributeBegin(a1 + 128, a2, a3);
  llvm::json::OStream::arrayBegin(v8);
  for (; a5; --a5)
  {
    v9 = *a4++;
    LOWORD(v11[0]) = 3;
    v11[1] = (void *)v9;
    llvm::json::OStream::value((uint64_t)v8, (uint64_t)v11);
    llvm::json::Value::destroy(v11);
  }
  result = llvm::json::OStream::arrayEnd(v8);
  --*(_DWORD *)(a1 + 136);
  return result;
}

llvm::raw_ostream *sub_1C5E31890(uint64_t a1, char *a2, unint64_t a3, void **a4, uint64_t a5)
{
  llvm::json::OStream *v8;
  uint64_t v9;
  void *v10;
  llvm::raw_ostream *result;
  void *v12[5];

  v12[4] = *(void **)MEMORY[0x1E0C80C00];
  v8 = (llvm::json::OStream *)(a1 + 128);
  llvm::json::OStream::attributeBegin(a1 + 128, a2, a3);
  llvm::json::OStream::arrayBegin(v8);
  if (a5)
  {
    v9 = 8 * a5;
    do
    {
      v10 = *a4++;
      LOWORD(v12[0]) = 3;
      v12[1] = v10;
      llvm::json::OStream::value((uint64_t)v8, (uint64_t)v12);
      llvm::json::Value::destroy(v12);
      v9 -= 8;
    }
    while (v9);
  }
  result = llvm::json::OStream::arrayEnd(v8);
  --*(_DWORD *)(a1 + 136);
  return result;
}

llvm::raw_ostream *sub_1C5E31954(uint64_t a1, char *a2, unint64_t a3, int *a4, uint64_t a5)
{
  llvm::json::OStream *v8;
  uint64_t v9;
  void *v10;
  llvm::raw_ostream *result;
  void *v12[5];

  v12[4] = *(void **)MEMORY[0x1E0C80C00];
  v8 = (llvm::json::OStream *)(a1 + 128);
  llvm::json::OStream::attributeBegin(a1 + 128, a2, a3);
  llvm::json::OStream::arrayBegin(v8);
  if (a5)
  {
    v9 = 4 * a5;
    do
    {
      v10 = (void *)*a4++;
      LOWORD(v12[0]) = 3;
      v12[1] = v10;
      llvm::json::OStream::value((uint64_t)v8, (uint64_t)v12);
      llvm::json::Value::destroy(v12);
      v9 -= 4;
    }
    while (v9);
  }
  result = llvm::json::OStream::arrayEnd(v8);
  --*(_DWORD *)(a1 + 136);
  return result;
}

llvm::raw_ostream *sub_1C5E31A18(uint64_t a1, char *a2, unint64_t a3, __int16 *a4, uint64_t a5)
{
  llvm::json::OStream *v8;
  uint64_t v9;
  void *v10;
  llvm::raw_ostream *result;
  void *v12[5];

  v12[4] = *(void **)MEMORY[0x1E0C80C00];
  v8 = (llvm::json::OStream *)(a1 + 128);
  llvm::json::OStream::attributeBegin(a1 + 128, a2, a3);
  llvm::json::OStream::arrayBegin(v8);
  if (a5)
  {
    v9 = 2 * a5;
    do
    {
      v10 = (void *)*a4++;
      LOWORD(v12[0]) = 3;
      v12[1] = v10;
      llvm::json::OStream::value((uint64_t)v8, (uint64_t)v12);
      llvm::json::Value::destroy(v12);
      v9 -= 2;
    }
    while (v9);
  }
  result = llvm::json::OStream::arrayEnd(v8);
  --*(_DWORD *)(a1 + 136);
  return result;
}

llvm::raw_ostream *sub_1C5E31ADC(uint64_t a1, char *a2, unint64_t a3, char *a4, uint64_t a5)
{
  llvm::json::OStream *v8;
  void *v9;
  llvm::raw_ostream *result;
  void *v11[5];

  v11[4] = *(void **)MEMORY[0x1E0C80C00];
  v8 = (llvm::json::OStream *)(a1 + 128);
  llvm::json::OStream::attributeBegin(a1 + 128, a2, a3);
  llvm::json::OStream::arrayBegin(v8);
  for (; a5; --a5)
  {
    v9 = (void *)*a4++;
    LOWORD(v11[0]) = 3;
    v11[1] = v9;
    llvm::json::OStream::value((uint64_t)v8, (uint64_t)v11);
    llvm::json::Value::destroy(v11);
  }
  result = llvm::json::OStream::arrayEnd(v8);
  --*(_DWORD *)(a1 + 136);
  return result;
}

llvm::raw_ostream *sub_1C5E31B9C(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  llvm::json::OStream *v8;
  llvm::raw_ostream *result;
  uint64_t v10;
  llvm::raw_ostream *v11;
  _BOOL4 v12;
  void *v13;
  __int128 v14;
  _QWORD v15[6];

  v15[5] = *MEMORY[0x1E0C80C00];
  v8 = (llvm::json::OStream *)(a1 + 128);
  llvm::json::OStream::attributeBegin(a1 + 128, a2, a3);
  llvm::json::OStream::arrayBegin(v8);
  if (a5)
  {
    v10 = 16 * a5;
    do
    {
      v11 = (llvm::raw_ostream *)llvm::json::OStream::rawValueBegin(v8);
      v12 = *(_BYTE *)(a4 + 12) == 0;
      v13 = v15;
      v14 = xmmword_1C64638D0;
      llvm::APInt::toString(a4, &v13, 0xAu, v12, 0);
      llvm::raw_ostream::write(v11, (const char *)v13, v14);
      if (v13 != v15)
        free(v13);
      --*(_DWORD *)(a1 + 136);
      a4 += 16;
      v10 -= 16;
    }
    while (v10);
  }
  result = llvm::json::OStream::arrayEnd(v8);
  --*(_DWORD *)(a1 + 136);
  return result;
}

void sub_1C5E31CBC(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  uint64_t v3;
  void *v4[5];

  v4[4] = *(void **)MEMORY[0x1E0C80C00];
  v3 = a1 + 128;
  sub_1C4D67324((uint64_t)v4, a2, a3);
  llvm::json::OStream::value(v3, (uint64_t)v4);
  llvm::json::Value::destroy(v4);
}

void sub_1C5E31D28(uint64_t a1, char *a2, unint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  uint64_t v8;
  void *v9[5];

  v9[4] = *(void **)MEMORY[0x1E0C80C00];
  v8 = a1 + 128;
  sub_1C4D67324((uint64_t)v9, a4, a5);
  llvm::json::OStream::attributeBegin(v8, a2, a3);
  llvm::json::OStream::value(v8, (uint64_t)v9);
  --*(_DWORD *)(a1 + 136);
  llvm::json::Value::destroy(v9);
}

char *sub_1C5E31DCC(char *a1)
{
  return sub_1C5E32730(a1, 1);
}

char *sub_1C5E31DD4(uint64_t a1, char *a2, unint64_t a3)
{
  return sub_1C5E327B0(a1, a2, a3, 1u);
}

char *sub_1C5E31DE0(char *a1)
{
  return sub_1C5E32730(a1, 0);
}

char *sub_1C5E31DE8(uint64_t a1, char *a2, unint64_t a3)
{
  return sub_1C5E327B0(a1, a2, a3, 0);
}

llvm::raw_ostream *sub_1C5E31DF4(uint64_t a1, char *a2, unint64_t a3, unsigned __int8 *a4, unint64_t a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  llvm::json::OStream *v14;
  unsigned int v15;
  llvm::raw_ostream *result;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v14 = (llvm::json::OStream *)(a1 + 128);
  llvm::json::OStream::attributeBegin(a1 + 128, a2, a3);
  llvm::json::OStream::objectBegin(v14);
  if (a5)
  {
    sub_1C4D67324((uint64_t)&v17, a4, a5);
    llvm::json::OStream::attributeBegin((uint64_t)v14, "Value", 5uLL);
    llvm::json::OStream::value((uint64_t)v14, (uint64_t)&v17);
    --*(_DWORD *)(a1 + 136);
    llvm::json::Value::destroy(&v17);
  }
  LOWORD(v17) = 3;
  v18 = a9;
  llvm::json::OStream::attributeBegin((uint64_t)v14, "Offset", 6uLL);
  llvm::json::OStream::value((uint64_t)v14, (uint64_t)&v17);
  --*(_DWORD *)(a1 + 136);
  llvm::json::Value::destroy(&v17);
  llvm::json::OStream::attributeBegin((uint64_t)v14, "Bytes", 5uLL);
  llvm::json::OStream::arrayBegin(v14);
  for (; a7; --a7)
  {
    v15 = *a6++;
    LOWORD(v17) = 3;
    v18 = v15;
    llvm::json::OStream::value((uint64_t)v14, (uint64_t)&v17);
    llvm::json::Value::destroy(&v17);
  }
  llvm::json::OStream::arrayEnd(v14);
  --*(_DWORD *)(a1 + 136);
  result = llvm::json::OStream::objectEnd(v14);
  --*(_DWORD *)(a1 + 136);
  return result;
}

llvm::raw_ostream *sub_1C5E31F7C(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  llvm::json::OStream *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *result;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v10 = (llvm::json::OStream *)(a1 + 128);
  llvm::json::OStream::attributeBegin(a1 + 128, a2, a3);
  llvm::json::OStream::objectBegin(v10);
  LOWORD(v14) = 4;
  v15 = a4;
  llvm::json::OStream::attributeBegin((uint64_t)v10, "RawFlags", 8uLL);
  llvm::json::OStream::value((uint64_t)v10, (uint64_t)&v14);
  --*(_DWORD *)(a1 + 136);
  llvm::json::Value::destroy(&v14);
  llvm::json::OStream::attributeBegin((uint64_t)v10, "Flags", 5uLL);
  llvm::json::OStream::arrayBegin(v10);
  if (a6)
  {
    v11 = a5 + 24 * a6;
    do
    {
      llvm::json::OStream::objectBegin(v10);
      sub_1C4D67324((uint64_t)&v14, *(unsigned __int8 **)a5, *(_QWORD *)(a5 + 8));
      llvm::json::OStream::attributeBegin((uint64_t)v10, "Name", 4uLL);
      llvm::json::OStream::value((uint64_t)v10, (uint64_t)&v14);
      --*(_DWORD *)(a1 + 136);
      llvm::json::Value::destroy(&v14);
      v12 = *(_QWORD *)(a5 + 16);
      LOWORD(v14) = 4;
      v15 = v12;
      llvm::json::OStream::attributeBegin((uint64_t)v10, "Value", 5uLL);
      llvm::json::OStream::value((uint64_t)v10, (uint64_t)&v14);
      --*(_DWORD *)(a1 + 136);
      llvm::json::Value::destroy(&v14);
      llvm::json::OStream::objectEnd(v10);
      a5 += 24;
    }
    while (a5 != v11);
  }
  llvm::json::OStream::arrayEnd(v10);
  --*(_DWORD *)(a1 + 136);
  result = llvm::json::OStream::objectEnd(v10);
  --*(_DWORD *)(a1 + 136);
  return result;
}

llvm::raw_ostream *sub_1C5E32138(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  llvm::json::OStream *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *result;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v10 = (llvm::json::OStream *)(a1 + 128);
  llvm::json::OStream::attributeBegin(a1 + 128, a2, a3);
  llvm::json::OStream::objectBegin(v10);
  LOWORD(v14) = 4;
  v15 = a4;
  llvm::json::OStream::attributeBegin((uint64_t)v10, "RawFlags", 8uLL);
  llvm::json::OStream::value((uint64_t)v10, (uint64_t)&v14);
  --*(_DWORD *)(a1 + 136);
  llvm::json::Value::destroy(&v14);
  llvm::json::OStream::attributeBegin((uint64_t)v10, "Flags", 5uLL);
  llvm::json::OStream::arrayBegin(v10);
  if (a6)
  {
    v11 = 8 * a6;
    do
    {
      v12 = *a5++;
      LOWORD(v14) = 4;
      v15 = v12;
      llvm::json::OStream::value((uint64_t)v10, (uint64_t)&v14);
      llvm::json::Value::destroy(&v14);
      v11 -= 8;
    }
    while (v11);
  }
  llvm::json::OStream::arrayEnd(v10);
  --*(_DWORD *)(a1 + 136);
  result = llvm::json::OStream::objectEnd(v10);
  --*(_DWORD *)(a1 + 136);
  return result;
}

llvm::raw_ostream *sub_1C5E3226C(uint64_t a1, char *a2, unint64_t a3, void **a4, uint64_t a5)
{
  llvm::json::OStream *v8;
  uint64_t v9;
  void *v10;
  llvm::raw_ostream *result;
  void *v12[5];

  v12[4] = *(void **)MEMORY[0x1E0C80C00];
  v8 = (llvm::json::OStream *)(a1 + 128);
  llvm::json::OStream::attributeBegin(a1 + 128, a2, a3);
  llvm::json::OStream::arrayBegin(v8);
  if (a5)
  {
    v9 = 8 * a5;
    do
    {
      v10 = *a4++;
      LOWORD(v12[0]) = 4;
      v12[1] = v10;
      llvm::json::OStream::value((uint64_t)v8, (uint64_t)v12);
      llvm::json::Value::destroy(v12);
      v9 -= 8;
    }
    while (v9);
  }
  result = llvm::json::OStream::arrayEnd(v8);
  --*(_DWORD *)(a1 + 136);
  return result;
}

void sub_1C5E32330(uint64_t a1, char *a2, unint64_t a3, void *a4)
{
  uint64_t v5;
  void *v6[5];

  v6[4] = *(void **)MEMORY[0x1E0C80C00];
  v5 = a1 + 128;
  LOWORD(v6[0]) = 4;
  v6[1] = a4;
  llvm::json::OStream::attributeBegin(a1 + 128, a2, a3);
  llvm::json::OStream::value(v5, (uint64_t)v6);
  --*(_DWORD *)(a1 + 136);
  llvm::json::Value::destroy(v6);
}

llvm::raw_ostream *sub_1C5E323B8(uint64_t a1, char *a2, unint64_t a3, unsigned __int8 *a4, unint64_t a5, void *a6)
{
  llvm::json::OStream *v10;
  llvm::raw_ostream *result;
  void *v12[5];

  v12[4] = *(void **)MEMORY[0x1E0C80C00];
  v10 = (llvm::json::OStream *)(a1 + 128);
  llvm::json::OStream::attributeBegin(a1 + 128, a2, a3);
  llvm::json::OStream::objectBegin(v10);
  sub_1C4D67324((uint64_t)v12, a4, a5);
  llvm::json::OStream::attributeBegin((uint64_t)v10, "Value", 5uLL);
  llvm::json::OStream::value((uint64_t)v10, (uint64_t)v12);
  --*(_DWORD *)(a1 + 136);
  llvm::json::Value::destroy(v12);
  LOWORD(v12[0]) = 4;
  v12[1] = a6;
  llvm::json::OStream::attributeBegin((uint64_t)v10, "RawValue", 8uLL);
  llvm::json::OStream::value((uint64_t)v10, (uint64_t)v12);
  --*(_DWORD *)(a1 + 136);
  llvm::json::Value::destroy(v12);
  result = llvm::json::OStream::objectEnd(v10);
  --*(_DWORD *)(a1 + 136);
  return result;
}

llvm::raw_ostream *sub_1C5E324D0(uint64_t a1, char *a2, unint64_t a3, unsigned __int8 *a4, unint64_t a5, void *a6)
{
  llvm::json::OStream *v10;
  llvm::raw_ostream *result;
  void *v12[5];

  v12[4] = *(void **)MEMORY[0x1E0C80C00];
  v10 = (llvm::json::OStream *)(a1 + 128);
  llvm::json::OStream::attributeBegin(a1 + 128, a2, a3);
  llvm::json::OStream::objectBegin(v10);
  sub_1C4D67324((uint64_t)v12, a4, a5);
  llvm::json::OStream::attributeBegin((uint64_t)v10, "SymName", 7uLL);
  llvm::json::OStream::value((uint64_t)v10, (uint64_t)v12);
  --*(_DWORD *)(a1 + 136);
  llvm::json::Value::destroy(v12);
  LOWORD(v12[0]) = 4;
  v12[1] = a6;
  llvm::json::OStream::attributeBegin((uint64_t)v10, "Offset", 6uLL);
  llvm::json::OStream::value((uint64_t)v10, (uint64_t)v12);
  --*(_DWORD *)(a1 + 136);
  llvm::json::Value::destroy(v12);
  result = llvm::json::OStream::objectEnd(v10);
  --*(_DWORD *)(a1 + 136);
  return result;
}

llvm::raw_ostream *sub_1C5E325E8(uint64_t a1, char *a2, unint64_t a3, unsigned __int8 *a4, unint64_t a5, const void *a6, size_t a7)
{
  llvm::json::OStream *v12;
  llvm::raw_ostream *v13;
  void *v14;
  llvm::raw_ostream *result;
  void *v16[5];

  v16[4] = *(void **)MEMORY[0x1E0C80C00];
  v12 = (llvm::json::OStream *)(a1 + 128);
  llvm::json::OStream::attributeBegin(a1 + 128, a2, a3);
  llvm::json::OStream::objectBegin(v12);
  sub_1C4D67324((uint64_t)v16, a4, a5);
  llvm::json::OStream::attributeBegin((uint64_t)v12, "Value", 5uLL);
  llvm::json::OStream::value((uint64_t)v12, (uint64_t)v16);
  --*(_DWORD *)(a1 + 136);
  llvm::json::Value::destroy(v16);
  llvm::json::OStream::attributeBegin((uint64_t)v12, "RawValue", 8uLL);
  v13 = (llvm::raw_ostream *)llvm::json::OStream::rawValueBegin(v12);
  v14 = (void *)*((_QWORD *)v13 + 4);
  if (a7 <= *((_QWORD *)v13 + 3) - (_QWORD)v14)
  {
    if (a7)
    {
      memcpy(v14, a6, a7);
      *((_QWORD *)v13 + 4) += a7;
    }
  }
  else
  {
    llvm::raw_ostream::write(v13, (const char *)a6, a7);
  }
  *(_DWORD *)(a1 + 136) -= 2;
  result = llvm::json::OStream::objectEnd(v12);
  --*(_DWORD *)(a1 + 136);
  return result;
}

char *sub_1C5E32730(char *result, uint64_t a2)
{
  char *v3;
  uint64_t v4;

  v3 = result;
  if ((_DWORD)a2)
  {
    if ((_DWORD)a2 == 1)
      result = (char *)llvm::json::OStream::objectBegin((llvm::json::OStream *)(result + 128));
  }
  else
  {
    result = (char *)llvm::json::OStream::arrayBegin((llvm::json::OStream *)(result + 128));
  }
  v4 = *((unsigned int *)v3 + 14);
  if (v4 >= *((_DWORD *)v3 + 15))
  {
    result = (char *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v3 + 48), (uint64_t)(v3 + 64), v4 + 1, 8);
    LODWORD(v4) = *((_DWORD *)v3 + 14);
  }
  *(_QWORD *)(*((_QWORD *)v3 + 6) + 8 * v4) = a2;
  ++*((_DWORD *)v3 + 14);
  return result;
}

char *sub_1C5E327B0(uint64_t a1, char *a2, unint64_t a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;

  v8 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v8 && *(_DWORD *)(*(_QWORD *)(a1 + 48) + 8 * v8 - 8) == 1)
  {
    v9 = 0x100000000;
  }
  else
  {
    llvm::json::OStream::objectBegin((llvm::json::OStream *)(a1 + 128));
    v9 = 0x200000000;
  }
  llvm::json::OStream::attributeBegin(a1 + 128, a2, a3);
  return sub_1C5E32730((char *)a1, v9 | a4);
}

llvm::raw_ostream *sub_1C5E32834(llvm::raw_ostream *result)
{
  llvm::raw_ostream *v1;
  uint64_t v2;
  int v3;
  int v4;

  v1 = result;
  v2 = *((_QWORD *)result + 6) + 8 * *((unsigned int *)result + 14);
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *(_DWORD *)(v2 - 4);
  if (v3)
  {
    if (v3 == 1)
      result = llvm::json::OStream::objectEnd((llvm::raw_ostream *)((char *)result + 128));
  }
  else
  {
    result = llvm::json::OStream::arrayEnd((llvm::raw_ostream *)((char *)result + 128));
  }
  if ((v4 - 1) <= 1)
  {
    --*((_DWORD *)v1 + 34);
    if (v4 == 2)
      result = llvm::json::OStream::objectEnd((llvm::raw_ostream *)((char *)v1 + 128));
  }
  --*((_DWORD *)v1 + 14);
  return result;
}

_DWORD *llvm::SHA1::hashBlock(_DWORD *this)
{
  int v1;
  unint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  unsigned int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  unsigned int v137;
  int v138;
  unsigned int v139;
  int v140;
  unint64_t v141;
  int v142;
  int v143;
  unsigned int v144;
  int v145;
  unint64_t v146;
  int v147;
  int v148;
  unsigned int v149;
  int v150;
  unint64_t v151;
  int v152;
  int v153;
  unsigned int v154;
  int v155;
  unint64_t v156;
  int v157;
  int v158;
  unsigned int v159;
  int v160;
  unint64_t v161;
  int v162;
  int v163;
  unsigned int v164;
  int v165;
  unint64_t v166;
  int v167;
  int v168;
  int v169;
  unsigned int v170;
  int v171;
  unint64_t v172;
  int v173;
  int v174;
  int v175;
  unsigned int v176;
  int v177;
  unint64_t v178;
  int v179;
  int v180;
  unsigned int v181;
  int v182;
  unsigned int v183;
  int v184;
  unsigned int v185;
  int v186;
  unint64_t v187;
  int v188;
  int v189;
  int v190;
  int v191;
  unint64_t v192;
  unsigned int v193;
  int v194;
  unint64_t v195;
  int v196;
  int v197;
  unsigned int v198;
  unint64_t v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  unint64_t v205;
  int v206;
  int v207;
  int v208;
  unsigned int v209;
  int v210;
  int v211;
  unint64_t v212;
  int v213;
  int v214;
  int v215;
  unsigned int v216;
  unsigned int v217;
  int v218;
  unint64_t v219;
  int v220;
  int v221;
  int v222;
  int v223;
  unint64_t v224;
  int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  int v230;
  unint64_t v231;
  unsigned int v232;
  unsigned int v233;
  int v234;
  unint64_t v235;
  int v236;
  int v237;
  unsigned int v238;
  unint64_t v239;
  int v240;
  int v241;
  int v242;
  int v243;
  unsigned int v244;
  int v245;
  unint64_t v246;
  int v247;
  int v248;
  unsigned int v249;
  int v250;
  unint64_t v251;
  int v252;
  int v253;
  int v254;
  int v255;
  unint64_t v256;
  int v257;
  unsigned int v258;
  int v259;
  int v260;
  int v261;
  int v262;
  unint64_t v263;
  int v264;
  int v265;
  int v266;
  unint64_t v267;
  int v268;
  unsigned int v269;
  int v270;
  int v271;
  int v272;
  unint64_t v273;
  int v274;
  int v275;
  int v276;
  int v277;
  unsigned int v278;
  int v279;
  unint64_t v280;
  int v281;
  int v282;
  int v283;
  unsigned int v284;
  int v285;
  int v286;
  unint64_t v287;
  int v288;
  int v289;
  int v290;
  unsigned int v291;
  int v292;
  int v293;
  unint64_t v294;
  int v295;
  int v296;
  int v297;
  int v298;
  int v299;
  int v300;
  unint64_t v301;
  int v302;
  int v303;
  int v304;
  unsigned int v305;
  int v306;
  unint64_t v307;
  int v308;
  int v309;
  int v310;
  unsigned int v311;
  int v312;
  unint64_t v313;
  int v314;
  int v315;
  int v316;
  int v317;
  int v318;
  unsigned int v319;
  int v320;
  unint64_t v321;
  int v322;
  int v323;
  unsigned int v324;
  int v325;
  unint64_t v326;
  int v327;
  int v328;
  int v329;
  unsigned int v330;
  int v331;
  unint64_t v332;
  int v333;
  int v334;
  int v335;
  int v336;
  int v337;
  unint64_t v338;
  int v339;
  int v340;
  int v341;
  int v342;
  int v343;
  unint64_t v344;
  int v345;
  int v346;
  int v347;
  unsigned int v348;
  int v349;
  int v350;
  int v351;
  int v352;
  unint64_t v353;
  int v354;
  unsigned int v355;
  int v356;
  int v357;
  int v358;
  unsigned int v359;
  int v360;
  int v361;
  int v362;
  int v363;
  unint64_t v364;
  int v365;
  unsigned int v366;
  int v367;
  unint64_t v368;
  int v369;
  int v370;
  int v371;
  unsigned int v372;
  int v373;
  int v374;
  int v375;
  unint64_t v376;
  int v377;
  unsigned int v378;
  int v379;
  unint64_t v380;
  int v381;
  int v382;
  int v383;
  unsigned int v384;
  int v385;
  int v386;
  int v387;
  unint64_t v388;
  int v389;
  unsigned int v390;
  int v391;
  unint64_t v392;
  int v393;
  int v394;
  int v395;
  unsigned int v396;
  int v397;
  int v398;
  int v399;
  unint64_t v400;
  int v401;
  unsigned int v402;
  int v403;
  unint64_t v404;
  int v405;
  int v406;
  int v407;
  unsigned int v408;
  int v409;
  int v410;
  unint64_t v411;
  int v412;
  int v413;
  int v414;
  unint64_t v415;
  int v416;
  int v417;
  unint64_t v418;
  int v419;
  int v420;
  unsigned int v421;
  int v422;
  int v423;
  unint64_t v424;
  int v425;
  int v426;
  int v427;
  int v428;
  int v429;
  int v430;
  int v431;
  int v432;
  int v433;
  int v434;
  int v435;
  int v436;
  int v437;
  int v438;
  int v439;
  int v440;
  int v441;
  int v442;
  int v443;
  int v444;
  int v445;
  int v446;
  int v447;
  int v448;
  int v449;
  int v450;
  int v451;
  int v452;
  int v453;
  int v454;
  int v455;
  int v456;
  int v457;
  int v458;
  int v459;
  int v460;
  int v461;
  int v462;
  int v463;
  int v464;
  int v465;
  int v466;
  int v467;
  int v468;
  int v469;
  int v470;
  int v471;
  int v472;
  int v473;
  int v474;
  int v475;
  int v476;

  HIDWORD(v2) = this[16];
  LODWORD(v2) = HIDWORD(v2);
  v1 = v2 >> 27;
  HIDWORD(v2) = this[17];
  LODWORD(v2) = HIDWORD(v2);
  v3 = v2 >> 2;
  v4 = this[18];
  v475 = HIDWORD(v2);
  v476 = this[20];
  v473 = this[16];
  v474 = this[19];
  v5 = v473 & __ROR4__(HIDWORD(v2), 2);
  v6 = this[1];
  v7 = v1 + v476 + *this + (v4 & HIDWORD(v2) | v474 & ~HIDWORD(v2)) + 1518500249;
  HIDWORD(v2) = v7;
  LODWORD(v2) = v7;
  v8 = v2 >> 27;
  HIDWORD(v2) = v473;
  LODWORD(v2) = v473;
  v9 = v2 >> 2;
  v472 = v4;
  v10 = v474 + v6 + (v5 | v4 & ~v473) + 1518500249 + v8;
  HIDWORD(v2) = v10;
  LODWORD(v2) = v10;
  v11 = v2 >> 27;
  HIDWORD(v2) = v7;
  LODWORD(v2) = v7;
  v12 = v2 >> 2;
  v13 = v7 & __ROR4__(v473, 2) | v3 & ~v7;
  v14 = v10 & __ROR4__(v7, 2);
  v16 = this[2];
  v15 = this[3];
  v17 = v4 + v16 + v13 + 1518500249 + v11;
  HIDWORD(v2) = v17;
  LODWORD(v2) = v17;
  v18 = v2 >> 27;
  HIDWORD(v2) = v10;
  LODWORD(v2) = v10;
  v19 = v2 >> 2;
  v20 = v3 + v15 + (v14 | v9 & ~v10) + 1518500249 + v18;
  HIDWORD(v2) = v20;
  LODWORD(v2) = v20;
  v21 = v2 >> 27;
  HIDWORD(v2) = v17;
  LODWORD(v2) = v17;
  v22 = v2 >> 2;
  v23 = this[4];
  v24 = v9 + v23 + (v17 & __ROR4__(v10, 2) | v12 & ~v17) + 1518500249 + v21;
  HIDWORD(v2) = v24;
  LODWORD(v2) = v24;
  v25 = v2 >> 27;
  HIDWORD(v2) = v20;
  LODWORD(v2) = v20;
  v26 = v2 >> 2;
  v27 = v12 + this[5] + (v20 & __ROR4__(v17, 2) | v19 & ~v20) + 1518500249 + v25;
  HIDWORD(v2) = v27;
  LODWORD(v2) = v27;
  v28 = v2 >> 27;
  HIDWORD(v2) = v24;
  LODWORD(v2) = v24;
  v29 = v2 >> 2;
  v461 = this[6];
  v465 = this[7];
  v30 = v19 + v461 + (v24 & __ROR4__(v20, 2) | v22 & ~v24) + 1518500249 + v28;
  HIDWORD(v2) = v30;
  LODWORD(v2) = v30;
  v31 = v2 >> 27;
  HIDWORD(v2) = v27;
  LODWORD(v2) = v27;
  v32 = v2 >> 2;
  v33 = v465 + v22 + (v27 & __ROR4__(v24, 2) | v26 & ~v27) + 1518500249 + v31;
  HIDWORD(v2) = v33;
  LODWORD(v2) = v33;
  v34 = v2 >> 27;
  HIDWORD(v2) = v30;
  LODWORD(v2) = v30;
  v35 = v2 >> 2;
  v36 = this[8];
  v37 = this[9];
  v38 = v36 + v26 + (v30 & __ROR4__(v27, 2) | v29 & ~v30) + 1518500249 + v34;
  HIDWORD(v2) = v38;
  LODWORD(v2) = v38;
  v39 = v2 >> 27;
  HIDWORD(v2) = v33;
  LODWORD(v2) = v33;
  v40 = v2 >> 2;
  v41 = v37 + v29 + (v33 & __ROR4__(v30, 2) | v32 & ~v33) + 1518500249 + v39;
  HIDWORD(v2) = v41;
  LODWORD(v2) = v41;
  v42 = v2 >> 27;
  HIDWORD(v2) = v38;
  LODWORD(v2) = v38;
  v43 = v2 >> 2;
  v44 = this[10];
  v45 = v44 + v32 + (v38 & __ROR4__(v33, 2) | v35 & ~v38) + 1518500249 + v42;
  HIDWORD(v2) = v45;
  LODWORD(v2) = v45;
  v46 = v2 >> 27;
  HIDWORD(v2) = v41;
  LODWORD(v2) = v41;
  v47 = v2 >> 2;
  v457 = this[11];
  v48 = v457 + v35 + (v41 & __ROR4__(v38, 2) | v40 & ~v41) + 1518500249 + v46;
  HIDWORD(v2) = v48;
  LODWORD(v2) = v48;
  v49 = v2 >> 27;
  HIDWORD(v2) = v45;
  LODWORD(v2) = v45;
  v50 = v2 >> 2;
  v51 = this[12];
  v52 = this[13];
  v53 = v51 + v40 + (v45 & __ROR4__(v41, 2) | v43 & ~v45) + 1518500249 + v49;
  HIDWORD(v2) = v53;
  LODWORD(v2) = v53;
  v54 = v2 >> 27;
  HIDWORD(v2) = v48;
  LODWORD(v2) = v48;
  v55 = v2 >> 2;
  v56 = v52 + v43 + (v48 & __ROR4__(v45, 2) | v47 & ~v48) + 1518500249 + v54;
  HIDWORD(v2) = v56;
  LODWORD(v2) = v56;
  v57 = v2 >> 27;
  HIDWORD(v2) = v53;
  LODWORD(v2) = v53;
  v58 = v2 >> 2;
  v60 = this[14];
  v59 = this[15];
  v61 = v60 + v47 + (v53 & __ROR4__(v48, 2) | v50 & ~v53) + 1518500249 + v57;
  HIDWORD(v2) = v61;
  LODWORD(v2) = v61;
  v62 = v2 >> 27;
  HIDWORD(v2) = v56;
  LODWORD(v2) = v56;
  v63 = v2 >> 2;
  v64 = v59 + v50 + (v56 & __ROR4__(v53, 2) | v55 & ~v56);
  v65 = v16 ^ *this ^ v36 ^ v52;
  HIDWORD(v2) = v65;
  LODWORD(v2) = v65;
  v66 = v2 >> 31;
  v67 = v64 + 1518500249 + v62;
  v68 = v61 & __ROR4__(v56, 2) | v58 & ~v61;
  HIDWORD(v2) = v67;
  LODWORD(v2) = v67;
  v69 = v2 >> 27;
  v70 = v66 + v55;
  HIDWORD(v2) = v61;
  LODWORD(v2) = v61;
  v71 = v2 >> 2;
  v72 = v70 + v68;
  v73 = v15 ^ v6 ^ v37 ^ v60;
  HIDWORD(v2) = v73;
  LODWORD(v2) = v73;
  v74 = v2 >> 31;
  v75 = v72 + 1518500249 + v69;
  HIDWORD(v2) = v75;
  LODWORD(v2) = v75;
  v76 = v2 >> 27;
  v77 = v74 + v58;
  HIDWORD(v2) = v67;
  LODWORD(v2) = v67;
  v78 = v2 >> 2;
  HIDWORD(v2) = v23 ^ v16 ^ v44 ^ v59;
  LODWORD(v2) = HIDWORD(v2);
  v448 = v2 >> 31;
  v79 = HIDWORD(v2);
  v80 = v77 + (v67 & __ROR4__(v61, 2) | v63 & ~v67) + 1518500249 + v76;
  HIDWORD(v2) = v80;
  LODWORD(v2) = v80;
  v81 = this[5];
  v83 = v448 + v63 + (v75 & __ROR4__(v67, 2) | v71 & ~v75) + 1518500249 + (v2 >> 27);
  LODWORD(v2) = v81 ^ v15 ^ v457 ^ __ROR4__(v65, 31);
  v82 = v2;
  HIDWORD(v2) = v2;
  v445 = v2 >> 31;
  v84 = v445 + v71 + (v80 & __ROR4__(v75, 2) | v78 & ~v80);
  HIDWORD(v2) = v83;
  LODWORD(v2) = v83;
  v85 = v2 >> 27;
  HIDWORD(v2) = v80;
  LODWORD(v2) = v80;
  v86 = v2 >> 2;
  v87 = v84 + 1518500249 + v85;
  v88 = v461 ^ v23 ^ v51 ^ __ROR4__(v73, 31);
  HIDWORD(v2) = v88;
  LODWORD(v2) = v88;
  v469 = v2 >> 31;
  v89 = v469 + v78 + (v86 ^ __ROR4__(v75, 2) ^ v83);
  HIDWORD(v2) = v75;
  LODWORD(v2) = v75;
  v90 = v2 >> 2;
  v91 = v89 + 1859775393;
  HIDWORD(v2) = v87;
  LODWORD(v2) = v87;
  v92 = v2 >> 27;
  HIDWORD(v2) = v83;
  LODWORD(v2) = v83;
  v93 = v2 >> 2;
  v94 = v91 + v92;
  v96 = v79;
  LODWORD(v2) = v465 ^ v81 ^ v52 ^ __ROR4__(v79, 31);
  v95 = v2;
  HIDWORD(v2) = v2;
  v442 = v2 >> 31;
  HIDWORD(v2) = v94;
  LODWORD(v2) = v94;
  v97 = v442 + v90 + (v93 ^ __ROR4__(v80, 2) ^ v87) + 1859775393 + (v2 >> 27);
  HIDWORD(v2) = v87;
  LODWORD(v2) = v87;
  v98 = v2 >> 2;
  v99 = v98 ^ __ROR4__(v83, 2);
  LODWORD(v2) = v36 ^ v461 ^ v60 ^ __ROR4__(v82, 31);
  v100 = v2;
  HIDWORD(v2) = v2;
  v434 = v2 >> 31;
  HIDWORD(v2) = v97;
  LODWORD(v2) = v97;
  v101 = v2 >> 27;
  HIDWORD(v2) = v94;
  LODWORD(v2) = v94;
  v102 = v2 >> 2;
  v103 = v434 + v86 + (v99 ^ v94) + 1859775393 + v101;
  LODWORD(v2) = v37 ^ v465 ^ v59 ^ __ROR4__(v88, 31);
  v104 = v2;
  HIDWORD(v2) = v2;
  v429 = v2 >> 31;
  HIDWORD(v2) = v103;
  LODWORD(v2) = v103;
  v105 = v429 + v93 + (v102 ^ __ROR4__(v87, 2) ^ v97) + 1859775393 + (v2 >> 27);
  HIDWORD(v2) = v97;
  LODWORD(v2) = v97;
  v106 = v2 >> 2;
  LODWORD(v2) = v44 ^ v36 ^ __ROR4__(v65, 31) ^ __ROR4__(v95, 31);
  v107 = v2;
  HIDWORD(v2) = v2;
  v108 = v2 >> 31;
  v109 = v108 + v98 + (v106 ^ __ROR4__(v94, 2) ^ v103) + 1859775393;
  HIDWORD(v2) = v105;
  LODWORD(v2) = v105;
  v110 = v2 >> 27;
  HIDWORD(v2) = v103;
  LODWORD(v2) = v103;
  v111 = v2 >> 2;
  v112 = v109 + v110;
  LODWORD(v2) = v457 ^ v37 ^ __ROR4__(v73, 31) ^ __ROR4__(v100, 31);
  v113 = v2;
  HIDWORD(v2) = v2;
  v431 = v2 >> 31;
  HIDWORD(v2) = v112;
  LODWORD(v2) = v112;
  v114 = v431 + v102 + (v111 ^ __ROR4__(v97, 2) ^ v105) + 1859775393 + (v2 >> 27);
  HIDWORD(v2) = v105;
  LODWORD(v2) = v105;
  v115 = v2 >> 2;
  v116 = v96;
  LODWORD(v2) = v51 ^ v44 ^ __ROR4__(v96, 31) ^ __ROR4__(v104, 31);
  v117 = v2;
  HIDWORD(v2) = v2;
  v466 = v2 >> 31;
  v118 = v466 + v106 + (v115 ^ __ROR4__(v103, 2) ^ v112) + 1859775393;
  HIDWORD(v2) = v114;
  LODWORD(v2) = v114;
  v119 = v2 >> 27;
  HIDWORD(v2) = v112;
  LODWORD(v2) = v112;
  v120 = v2 >> 2;
  v121 = v118 + v119;
  LODWORD(v2) = v52 ^ v457 ^ __ROR4__(v82, 31) ^ __ROR4__(v107, 31);
  v122 = v2;
  HIDWORD(v2) = v2;
  v462 = v2 >> 31;
  HIDWORD(v2) = v121;
  LODWORD(v2) = v121;
  v123 = v462 + v111 + (v120 ^ __ROR4__(v105, 2) ^ v114) + 1859775393 + (v2 >> 27);
  HIDWORD(v2) = v114;
  LODWORD(v2) = v114;
  v124 = v2 >> 2;
  v125 = v60 ^ v51 ^ __ROR4__(v88, 31) ^ __ROR4__(v113, 31);
  HIDWORD(v2) = v125;
  LODWORD(v2) = v125;
  v436 = v2 >> 31;
  HIDWORD(v2) = v123;
  LODWORD(v2) = v123;
  v126 = v2 >> 27;
  HIDWORD(v2) = v121;
  LODWORD(v2) = v121;
  v127 = v2 >> 2;
  v128 = v436 + v115 + (v124 ^ __ROR4__(v112, 2) ^ v121) + 1859775393 + v126;
  v129 = v59 ^ v52 ^ __ROR4__(v95, 31) ^ __ROR4__(v117, 31);
  HIDWORD(v2) = v129;
  LODWORD(v2) = v129;
  v130 = v2 >> 31;
  HIDWORD(v2) = v128;
  LODWORD(v2) = v128;
  v131 = v130 + v120 + (v127 ^ __ROR4__(v114, 2) ^ v123) + 1859775393 + (v2 >> 27);
  HIDWORD(v2) = v123;
  LODWORD(v2) = v123;
  v132 = v2 >> 2;
  LODWORD(v2) = v60 ^ __ROR4__(v65, 31) ^ __ROR4__(v100, 31) ^ __ROR4__(v122, 31);
  v133 = v2;
  HIDWORD(v2) = v2;
  v454 = v2 >> 31;
  v458 = v130;
  v134 = v454 + v124 + (v132 ^ __ROR4__(v121, 2) ^ v128) + 1859775393;
  HIDWORD(v2) = v131;
  LODWORD(v2) = v131;
  v135 = v2 >> 27;
  HIDWORD(v2) = v128;
  LODWORD(v2) = v128;
  v136 = v2 >> 2;
  v137 = v134 + v135;
  LODWORD(v2) = v59 ^ __ROR4__(v73, 31) ^ __ROR4__(v104, 31) ^ __ROR4__(v125, 31);
  v138 = v2;
  HIDWORD(v2) = v2;
  v451 = v2 >> 31;
  HIDWORD(v2) = v137;
  LODWORD(v2) = v137;
  v139 = v451 + v127 + (v136 ^ __ROR4__(v123, 2) ^ v131) + 1859775393 + (v2 >> 27);
  v141 = __PAIR64__(v131, __ROR4__(v65, 31));
  v140 = v448 ^ v141;
  LODWORD(v141) = v131;
  v142 = v141 >> 2;
  LODWORD(v141) = v140 ^ __ROR4__(v107, 31) ^ __ROR4__(v129, 31);
  v143 = v141;
  HIDWORD(v141) = v141;
  v449 = v141 >> 31;
  HIDWORD(v141) = v139;
  LODWORD(v141) = v139;
  v144 = v449 + v132 + (v142 ^ __ROR4__(v128, 2) ^ v137) + 1859775393 + (v141 >> 27);
  v146 = __PAIR64__(v137, __ROR4__(v73, 31));
  v145 = v445 ^ v146;
  LODWORD(v146) = v137;
  v147 = v146 >> 2;
  v148 = v145 ^ __ROR4__(v113, 31) ^ __ROR4__(v133, 31);
  HIDWORD(v146) = v148;
  LODWORD(v146) = v148;
  v446 = v146 >> 31;
  HIDWORD(v146) = v144;
  LODWORD(v146) = v144;
  v149 = v446 + v136 + (v147 ^ __ROR4__(v131, 2) ^ v139) + 1859775393 + (v146 >> 27);
  v151 = __PAIR64__(v139, __ROR4__(v116, 31));
  v150 = v469 ^ v151;
  LODWORD(v151) = v139;
  v152 = v151 >> 2;
  v153 = v150 ^ __ROR4__(v117, 31) ^ __ROR4__(v138, 31);
  HIDWORD(v151) = v153;
  LODWORD(v151) = v153;
  v440 = v151 >> 31;
  HIDWORD(v151) = v149;
  LODWORD(v151) = v149;
  v154 = v440 + v142 + (v152 ^ __ROR4__(v137, 2) ^ v144) + 1859775393 + (v151 >> 27);
  v156 = __PAIR64__(v144, __ROR4__(v82, 31));
  v155 = v442 ^ v156;
  LODWORD(v156) = v144;
  v157 = v156 >> 2;
  v158 = v155 ^ __ROR4__(v122, 31) ^ __ROR4__(v143, 31);
  HIDWORD(v156) = v158;
  LODWORD(v156) = v158;
  v438 = v156 >> 31;
  HIDWORD(v156) = v154;
  LODWORD(v156) = v154;
  v159 = v438 + v147 + (v157 ^ __ROR4__(v139, 2) ^ v149) + 1859775393 + (v156 >> 27);
  v161 = __PAIR64__(v149, __ROR4__(v88, 31));
  v160 = v434 ^ v161;
  LODWORD(v161) = v149;
  v162 = v161 >> 2;
  LODWORD(v161) = v160 ^ __ROR4__(v125, 31) ^ __ROR4__(v148, 31);
  v163 = v161;
  HIDWORD(v161) = v161;
  v443 = v161 >> 31;
  HIDWORD(v161) = v159;
  LODWORD(v161) = v159;
  v164 = v443 + v152 + (v162 ^ __ROR4__(v144, 2) ^ v154) + 1859775393 + (v161 >> 27);
  v166 = __PAIR64__(v154, __ROR4__(v95, 31));
  v165 = v429 ^ v166;
  LODWORD(v166) = v154;
  v167 = v166 >> 2;
  LODWORD(v166) = v165 ^ __ROR4__(v129, 31) ^ __ROR4__(v153, 31);
  v168 = v166;
  HIDWORD(v166) = v166;
  v169 = v166 >> 31;
  HIDWORD(v166) = v164;
  LODWORD(v166) = v164;
  v170 = v169 + v157 + (v167 ^ __ROR4__(v149, 2) ^ v159) + 1859775393 + (v166 >> 27);
  v172 = __PAIR64__(v159, __ROR4__(v100, 31));
  v171 = v108 ^ v172;
  LODWORD(v172) = v159;
  v173 = v172 >> 2;
  LODWORD(v172) = v171 ^ __ROR4__(v133, 31) ^ __ROR4__(v158, 31);
  v174 = v172;
  HIDWORD(v172) = v172;
  v175 = v172 >> 31;
  HIDWORD(v172) = v170;
  LODWORD(v172) = v170;
  v176 = v175 + v162 + (v173 ^ __ROR4__(v154, 2) ^ v164) + 1859775393 + (v172 >> 27);
  v178 = __PAIR64__(v164, __ROR4__(v104, 31));
  v177 = v431 ^ v178;
  LODWORD(v178) = v164;
  v179 = v178 >> 2;
  v180 = v177 ^ __ROR4__(v138, 31) ^ __ROR4__(v163, 31);
  HIDWORD(v178) = v180;
  LODWORD(v178) = v180;
  v470 = v178 >> 31;
  HIDWORD(v178) = v176;
  LODWORD(v178) = v176;
  v181 = v470 + v167 + (v179 ^ __ROR4__(v159, 2) ^ v170) + 1859775393 + (v178 >> 27);
  LODWORD(v178) = v466 ^ __ROR4__(v107, 31) ^ __ROR4__(v143, 31) ^ __ROR4__(v168, 31);
  v182 = v178;
  HIDWORD(v178) = v178;
  v467 = v178 >> 31;
  HIDWORD(v178) = v181;
  LODWORD(v178) = v181;
  v183 = v467
       + v173
       + ((v176 | __ROR4__(v170, 2)) & __ROR4__(v164, 2) | v176 & __ROR4__(v170, 2))
       + (v178 >> 27)
       - 1894007588;
  v184 = v462 ^ __ROR4__(v113, 31) ^ __ROR4__(v148, 31) ^ __ROR4__(v174, 31);
  HIDWORD(v178) = v184;
  LODWORD(v178) = v184;
  v463 = v178 >> 31;
  HIDWORD(v178) = v183;
  LODWORD(v178) = v183;
  v185 = v463 + v179 + ((v181 | __ROR4__(v176, 2)) & __ROR4__(v170, 2) | v181 & __ROR4__(v176, 2)) + (v178 >> 27);
  v187 = __PAIR64__(v170, __ROR4__(v117, 31));
  v186 = v436 ^ v187;
  LODWORD(v187) = v170;
  v188 = v187 >> 2;
  v189 = v186 ^ __ROR4__(v153, 31) ^ __ROR4__(v180, 31);
  v190 = v180;
  v192 = __PAIR64__(v189, __ROR4__(v181, 2));
  v191 = v183 & v192;
  LODWORD(v192) = v189;
  v432 = v192 >> 31;
  v185 -= 1894007588;
  HIDWORD(v192) = v185;
  LODWORD(v192) = v185;
  v193 = v432 + v188 + ((v183 | __ROR4__(v181, 2)) & __ROR4__(v176, 2) | v191) + (v192 >> 27);
  v195 = __PAIR64__(v176, __ROR4__(v122, 31));
  v194 = v458 ^ v195;
  LODWORD(v195) = v176;
  v196 = v195 >> 2;
  v197 = v194 ^ __ROR4__(v158, 31) ^ __ROR4__(v182, 31);
  HIDWORD(v195) = v197;
  LODWORD(v195) = v197;
  v459 = v195 >> 31;
  v193 -= 1894007588;
  HIDWORD(v195) = v193;
  LODWORD(v195) = v193;
  v198 = v459 + v196 + ((v185 | __ROR4__(v183, 2)) & __ROR4__(v181, 2) | v185 & __ROR4__(v183, 2)) + (v195 >> 27);
  v199 = __PAIR64__(v181, __ROR4__(v185, 2));
  v200 = (v193 | __ROR4__(v185, 2)) & __ROR4__(v183, 2) | v193 & v199;
  LODWORD(v199) = v181;
  v201 = v199 >> 2;
  v202 = v454 ^ __ROR4__(v125, 31) ^ __ROR4__(v163, 31) ^ __ROR4__(v184, 31);
  HIDWORD(v199) = v202;
  LODWORD(v199) = v202;
  v455 = v199 >> 31;
  v198 -= 1894007588;
  HIDWORD(v199) = v198;
  LODWORD(v199) = v198;
  v203 = v455 + v201 + v200 + (v199 >> 27);
  v205 = __PAIR64__(v183, __ROR4__(v129, 31));
  v204 = v451 ^ v205;
  LODWORD(v205) = v183;
  v206 = v205 >> 2;
  LODWORD(v205) = v204 ^ __ROR4__(v168, 31) ^ __ROR4__(v189, 31);
  HIDWORD(v205) = v205;
  v452 = v205 >> 31;
  v207 = v205;
  v208 = v452 + v206 + ((v198 | __ROR4__(v193, 2)) & __ROR4__(v185, 2) | v198 & __ROR4__(v193, 2));
  v209 = v203 - 1894007588;
  HIDWORD(v205) = v203 - 1894007588;
  LODWORD(v205) = v203 - 1894007588;
  v210 = v208 + (v205 >> 27);
  v212 = __PAIR64__(v185, __ROR4__(v133, 31));
  v211 = v449 ^ v212;
  LODWORD(v212) = v185;
  v213 = v212 >> 2;
  v215 = v197;
  v426 = v197;
  LODWORD(v212) = v211 ^ __ROR4__(v174, 31) ^ __ROR4__(v197, 31);
  v214 = v212;
  HIDWORD(v212) = v212;
  v450 = v212 >> 31;
  v216 = v210 - 1894007588;
  HIDWORD(v212) = v210 - 1894007588;
  LODWORD(v212) = v210 - 1894007588;
  v217 = v450 + v213 + ((v209 | __ROR4__(v198, 2)) & __ROR4__(v193, 2) | v209 & __ROR4__(v198, 2)) + (v212 >> 27);
  v219 = __PAIR64__(v193, __ROR4__(v138, 31));
  v218 = v446 ^ v219;
  LODWORD(v219) = v193;
  v220 = v219 >> 2;
  v217 -= 1894007588;
  LODWORD(v219) = v218 ^ __ROR4__(v190, 31) ^ __ROR4__(v202, 31);
  v221 = v219;
  HIDWORD(v219) = v219;
  v447 = v219 >> 31;
  HIDWORD(v219) = v217;
  LODWORD(v219) = v217;
  v222 = v447
       + v220
       + (((v210 - 1894007588) | __ROR4__(v209, 2)) & __ROR4__(v198, 2) | (v210 - 1894007588) & __ROR4__(v209, 2))
       + (v219 >> 27);
  v224 = __PAIR64__(v198, __ROR4__(v143, 31));
  v223 = v440 ^ v224;
  LODWORD(v224) = v198;
  v225 = v224 >> 2;
  v226 = (v217 | __ROR4__(v210 - 1894007588, 2)) & __ROR4__(v209, 2);
  v227 = v223 ^ __ROR4__(v182, 31);
  LODWORD(v224) = __ROR4__(v207, 31);
  v228 = v227 ^ v224;
  v229 = v207;
  v231 = __PAIR64__(v227 ^ v224, __ROR4__(v216, 2));
  v230 = v217 & v231;
  LODWORD(v231) = v228;
  v441 = v231 >> 31;
  v232 = v222 - 1894007588;
  HIDWORD(v231) = v222 - 1894007588;
  LODWORD(v231) = v222 - 1894007588;
  v233 = v441 + v225 + (v226 | v230) + (v231 >> 27);
  v235 = __PAIR64__(v209, __ROR4__(v148, 31));
  v234 = v438 ^ v235;
  LODWORD(v235) = v209;
  v236 = v235 >> 2;
  LODWORD(v235) = v234 ^ __ROR4__(v184, 31) ^ __ROR4__(v214, 31);
  v237 = v235;
  HIDWORD(v235) = v235;
  v439 = v235 >> 31;
  v233 -= 1894007588;
  HIDWORD(v235) = v233;
  LODWORD(v235) = v233;
  v238 = v439
       + v236
       + (((v222 - 1894007588) | __ROR4__(v217, 2)) & __ROR4__(v216, 2) | (v222 - 1894007588) & __ROR4__(v217, 2))
       + (v235 >> 27);
  v239 = __PAIR64__(v216, __ROR4__(v222 - 1894007588, 2));
  v240 = (v233 | __ROR4__(v222 - 1894007588, 2)) & __ROR4__(v217, 2) | v233 & v239;
  LODWORD(v239) = v216;
  v241 = v239 >> 2;
  v243 = v221;
  LODWORD(v239) = v443 ^ __ROR4__(v153, 31) ^ __ROR4__(v189, 31) ^ __ROR4__(v221, 31);
  v242 = v239;
  HIDWORD(v239) = v239;
  v444 = v239 >> 31;
  v238 -= 1894007588;
  HIDWORD(v239) = v238;
  LODWORD(v239) = v238;
  v244 = v444 + v241 + v240 + (v239 >> 27);
  v246 = __PAIR64__(v217, __ROR4__(v158, 31));
  v245 = v169 ^ v246;
  LODWORD(v246) = v217;
  v247 = v246 >> 2;
  LODWORD(v246) = v245 ^ __ROR4__(v215, 31) ^ __ROR4__(v228, 31);
  v248 = v246;
  HIDWORD(v246) = v246;
  v437 = v246 >> 31;
  v244 -= 1894007588;
  HIDWORD(v246) = v244;
  LODWORD(v246) = v244;
  v249 = v437 + v247 + ((v238 | __ROR4__(v233, 2)) & __ROR4__(v232, 2) | v238 & __ROR4__(v233, 2)) + (v246 >> 27);
  v251 = __PAIR64__(v232, __ROR4__(v163, 31));
  v250 = v175 ^ v251;
  LODWORD(v251) = v232;
  v252 = v251 >> 2;
  v253 = v250 ^ __ROR4__(v202, 31) ^ __ROR4__(v237, 31);
  HIDWORD(v251) = v253;
  LODWORD(v251) = v253;
  v435 = v251 >> 31;
  v249 -= 1894007588;
  HIDWORD(v251) = v249;
  LODWORD(v251) = v249;
  v254 = v435 + v252 + ((v244 | __ROR4__(v238, 2)) & __ROR4__(v233, 2) | v244 & __ROR4__(v238, 2)) + (v251 >> 27);
  v256 = __PAIR64__(v233, __ROR4__(v168, 31));
  v255 = v470 ^ v256;
  LODWORD(v256) = v233;
  v257 = v256 >> 2;
  v258 = v254 - 1894007588;
  v259 = v229;
  LODWORD(v256) = v255 ^ __ROR4__(v229, 31) ^ __ROR4__(v242, 31);
  v260 = v256;
  HIDWORD(v256) = v256;
  v471 = v256 >> 31;
  HIDWORD(v256) = v254 - 1894007588;
  LODWORD(v256) = v254 - 1894007588;
  v261 = v471 + v257 + ((v249 | __ROR4__(v244, 2)) & __ROR4__(v238, 2) | v249 & __ROR4__(v244, 2)) + (v256 >> 27);
  v263 = __PAIR64__(v238, __ROR4__(v174, 31));
  v262 = v467 ^ v263;
  LODWORD(v263) = v238;
  v264 = v263 >> 2;
  v265 = v262 ^ __ROR4__(v214, 31) ^ __ROR4__(v248, 31);
  v267 = __PAIR64__(v265, __ROR4__(v249, 2));
  v266 = v258 & v267;
  LODWORD(v267) = v265;
  v268 = v267 >> 31;
  v269 = v261 - 1894007588;
  HIDWORD(v267) = v261 - 1894007588;
  LODWORD(v267) = v261 - 1894007588;
  v270 = v268 + v264 + ((v258 | __ROR4__(v249, 2)) & __ROR4__(v244, 2) | v266) + (v267 >> 27);
  v271 = ((v261 - 1894007588) | __ROR4__(v258, 2)) & __ROR4__(v249, 2) | (v261 - 1894007588) & __ROR4__(v258, 2);
  v273 = __PAIR64__(v244, __ROR4__(v190, 31));
  v272 = v463 ^ v273;
  LODWORD(v273) = v244;
  v274 = v273 >> 2;
  v275 = v243;
  LODWORD(v273) = v272 ^ __ROR4__(v243, 31) ^ __ROR4__(v253, 31);
  v276 = v273;
  HIDWORD(v273) = v273;
  v464 = v273 >> 31;
  v468 = v268;
  v277 = v464 + v274 + v271;
  v278 = v270 - 1894007588;
  HIDWORD(v273) = v270 - 1894007588;
  LODWORD(v273) = v270 - 1894007588;
  v279 = v277 + (v273 >> 27);
  v280 = __PAIR64__(v249, __ROR4__(v269, 2));
  v281 = ((v270 - 1894007588) | __ROR4__(v269, 2)) & __ROR4__(v258, 2) | (v270 - 1894007588) & v280;
  LODWORD(v280) = v249;
  v282 = v280 >> 2;
  LODWORD(v280) = v432 ^ __ROR4__(v182, 31) ^ __ROR4__(v228, 31) ^ __ROR4__(v260, 31);
  v283 = v280;
  HIDWORD(v280) = v280;
  v433 = v280 >> 31;
  v284 = v279 - 1894007588;
  HIDWORD(v280) = v279 - 1894007588;
  LODWORD(v280) = v279 - 1894007588;
  v285 = v433 + v282 + v281 + (v280 >> 27);
  v287 = __PAIR64__(v258, __ROR4__(v184, 31));
  v286 = v459 ^ v287;
  LODWORD(v287) = v258;
  v288 = v287 >> 2;
  LODWORD(v287) = v286 ^ __ROR4__(v237, 31) ^ __ROR4__(v265, 31);
  v289 = v287;
  HIDWORD(v287) = v287;
  v430 = v287 >> 31;
  v290 = v430 + v288 + ((v284 | __ROR4__(v278, 2)) & __ROR4__(v269, 2) | v284 & __ROR4__(v278, 2));
  v291 = v285 - 1894007588;
  HIDWORD(v287) = v285 - 1894007588;
  LODWORD(v287) = v285 - 1894007588;
  v292 = v290 + (v287 >> 27);
  v294 = __PAIR64__(v269, __ROR4__(v189, 31));
  v293 = v455 ^ v294;
  LODWORD(v294) = v269;
  v295 = v294 >> 2;
  LODWORD(v294) = v293 ^ __ROR4__(v242, 31) ^ __ROR4__(v276, 31);
  v296 = v294;
  HIDWORD(v294) = v294;
  v428 = v294 >> 31;
  v297 = v428 + v295 + ((v291 | __ROR4__(v284, 2)) & __ROR4__(v278, 2) | v291 & __ROR4__(v284, 2));
  v298 = v292 - 1894007588;
  HIDWORD(v294) = v292 - 1894007588;
  LODWORD(v294) = v292 - 1894007588;
  v299 = v297 + (v294 >> 27);
  v301 = __PAIR64__(v278, __ROR4__(v426, 31));
  v300 = v452 ^ v301;
  LODWORD(v301) = v278;
  v302 = v301 >> 2;
  v303 = v299 - 1894007588;
  LODWORD(v301) = v300 ^ __ROR4__(v248, 31) ^ __ROR4__(v283, 31);
  v304 = v301;
  HIDWORD(v301) = v301;
  v427 = v301 >> 31;
  HIDWORD(v301) = v299 - 1894007588;
  LODWORD(v301) = v299 - 1894007588;
  v305 = v427
       + v302
       + ((v298 | __ROR4__(v291, 2)) & __ROR4__(v284, 2) | v298 & __ROR4__(v291, 2))
       + (v301 >> 27)
       - 1894007588;
  v307 = __PAIR64__(v284, __ROR4__(v202, 31));
  v306 = v450 ^ v307;
  LODWORD(v307) = v284;
  v308 = v307 >> 2;
  HIDWORD(v307) = v298;
  LODWORD(v307) = v298;
  v309 = v307 >> 2;
  LODWORD(v307) = v306 ^ __ROR4__(v253, 31) ^ __ROR4__(v289, 31);
  v310 = v307;
  HIDWORD(v307) = v307;
  v453 = v307 >> 31;
  HIDWORD(v307) = v305;
  LODWORD(v307) = v305;
  v311 = v453 + v308 + (v309 ^ __ROR4__(v291, 2) ^ (v299 - 1894007588)) - 899497514 + (v307 >> 27);
  v313 = __PAIR64__(v291, __ROR4__(v259, 31));
  v312 = v447 ^ v313;
  LODWORD(v313) = v291;
  v314 = v313 >> 2;
  HIDWORD(v313) = v303;
  LODWORD(v313) = v303;
  v315 = v313 >> 2;
  v316 = v315 ^ __ROR4__(v298, 2) ^ v305;
  LODWORD(v313) = v312 ^ __ROR4__(v260, 31) ^ __ROR4__(v296, 31);
  v317 = v313;
  HIDWORD(v313) = v313;
  v318 = v313 >> 31;
  HIDWORD(v313) = v311;
  LODWORD(v313) = v311;
  v319 = v318 + v314 + v316 - 899497514 + (v313 >> 27);
  v321 = __PAIR64__(v305, __ROR4__(v214, 31));
  v320 = v441 ^ v321;
  LODWORD(v321) = v305;
  v322 = v321 >> 2;
  v323 = v320 ^ __ROR4__(v265, 31) ^ __ROR4__(v304, 31);
  HIDWORD(v321) = v323;
  LODWORD(v321) = v323;
  v456 = v321 >> 31;
  HIDWORD(v321) = v319;
  LODWORD(v321) = v319;
  v324 = v456 + v309 + (v322 ^ __ROR4__(v303, 2) ^ v311) - 899497514 + (v321 >> 27);
  v326 = __PAIR64__(v311, __ROR4__(v275, 31));
  v325 = v439 ^ v326;
  LODWORD(v326) = v311;
  v327 = v326 >> 2;
  v328 = v327 ^ __ROR4__(v305, 2) ^ v319;
  LODWORD(v326) = v325 ^ __ROR4__(v276, 31) ^ __ROR4__(v310, 31);
  v329 = v326;
  HIDWORD(v326) = v326;
  v460 = v326 >> 31;
  HIDWORD(v326) = v324;
  LODWORD(v326) = v324;
  v330 = v460 + v315 + v328 - 899497514 + (v326 >> 27);
  v332 = __PAIR64__(v319, __ROR4__(v228, 31));
  v331 = v444 ^ v332;
  LODWORD(v332) = v319;
  v333 = v332 >> 2;
  LODWORD(v332) = v331 ^ __ROR4__(v283, 31) ^ __ROR4__(v317, 31);
  v334 = v332;
  HIDWORD(v332) = v332;
  v335 = v332 >> 31;
  HIDWORD(v332) = v330;
  LODWORD(v332) = v330;
  v336 = v335 + v322 + (v333 ^ __ROR4__(v311, 2) ^ v324) - 899497514 + (v332 >> 27);
  v338 = __PAIR64__(v324, __ROR4__(v237, 31));
  v337 = v437 ^ v338;
  LODWORD(v338) = v324;
  v339 = v338 >> 2;
  LODWORD(v338) = v337 ^ __ROR4__(v289, 31) ^ __ROR4__(v323, 31);
  v340 = v338;
  HIDWORD(v338) = v338;
  v341 = v338 >> 31;
  HIDWORD(v338) = v336;
  LODWORD(v338) = v336;
  v342 = v341 + v327 + (v339 ^ __ROR4__(v319, 2) ^ v330) - 899497514 + (v338 >> 27);
  v344 = __PAIR64__(v330, __ROR4__(v242, 31));
  v343 = v435 ^ v344;
  LODWORD(v344) = v330;
  v345 = v344 >> 2;
  LODWORD(v344) = v343 ^ __ROR4__(v296, 31) ^ __ROR4__(v329, 31);
  v346 = v344;
  HIDWORD(v344) = v344;
  v347 = v344 >> 31;
  HIDWORD(v344) = v342;
  LODWORD(v344) = v342;
  v348 = v347 + v333 + (v345 ^ __ROR4__(v324, 2) ^ v336) - 899497514 + (v344 >> 27);
  LODWORD(v344) = v471 ^ __ROR4__(v248, 31) ^ __ROR4__(v304, 31) ^ __ROR4__(v334, 31);
  v349 = v344;
  HIDWORD(v344) = v344;
  v350 = v344 >> 31;
  this[2] = v347;
  this[3] = v350;
  v351 = v350 + v339;
  HIDWORD(v344) = v336;
  LODWORD(v344) = v336;
  v352 = v344 >> 2;
  v353 = __PAIR64__(v348, __ROR4__(v330, 2));
  v354 = v351 + (v352 ^ v353 ^ v342) - 899497514;
  LODWORD(v353) = v348;
  v355 = v354 + (v353 >> 27);
  HIDWORD(v353) = v342;
  LODWORD(v353) = v342;
  v356 = v353 >> 2;
  LODWORD(v353) = v468 ^ __ROR4__(v253, 31) ^ __ROR4__(v310, 31) ^ __ROR4__(v340, 31);
  v357 = v353;
  HIDWORD(v353) = v353;
  v358 = v353 >> 31;
  HIDWORD(v353) = v355;
  LODWORD(v353) = v355;
  v359 = v358 + v345 + (v356 ^ __ROR4__(v336, 2) ^ v348) - 899497514 + (v353 >> 27);
  LODWORD(v353) = v464 ^ __ROR4__(v260, 31) ^ __ROR4__(v317, 31) ^ __ROR4__(v346, 31);
  v360 = v353;
  HIDWORD(v353) = v353;
  v361 = v353 >> 31;
  this[4] = v358;
  this[5] = v361;
  v362 = v361 + v352;
  HIDWORD(v353) = v348;
  LODWORD(v353) = v348;
  v363 = v353 >> 2;
  v364 = __PAIR64__(v359, __ROR4__(v342, 2));
  v365 = v362 + (v363 ^ v364 ^ v355) - 899497514;
  LODWORD(v364) = v359;
  v366 = v365 + (v364 >> 27);
  v368 = __PAIR64__(v355, __ROR4__(v265, 31));
  v367 = v433 ^ v368;
  LODWORD(v368) = v355;
  v369 = v368 >> 2;
  LODWORD(v368) = v367 ^ __ROR4__(v323, 31) ^ __ROR4__(v349, 31);
  v370 = v368;
  HIDWORD(v368) = v368;
  v371 = v368 >> 31;
  HIDWORD(v368) = v366;
  LODWORD(v368) = v366;
  v372 = v371 + v356 + (v369 ^ __ROR4__(v348, 2) ^ v359) - 899497514 + (v368 >> 27);
  v373 = v430 ^ __ROR4__(v276, 31) ^ __ROR4__(v329, 31) ^ __ROR4__(v357, 31);
  HIDWORD(v368) = v373;
  LODWORD(v368) = v373;
  v374 = v368 >> 31;
  this[6] = v371;
  this[7] = v374;
  HIDWORD(v368) = v359;
  LODWORD(v368) = v359;
  v375 = v368 >> 2;
  v376 = __PAIR64__(v372, __ROR4__(v355, 2));
  v377 = v374 + v363 + (v375 ^ v376 ^ v366);
  LODWORD(v376) = v372;
  v378 = v377 - 899497514 + (v376 >> 27);
  v380 = __PAIR64__(v366, __ROR4__(v334, 31));
  v379 = v428 ^ __ROR4__(v283, 31) ^ v380;
  LODWORD(v380) = v366;
  v381 = v380 >> 2;
  v382 = v379 ^ __ROR4__(v360, 31);
  HIDWORD(v380) = v382;
  LODWORD(v380) = v382;
  v383 = v380 >> 31;
  HIDWORD(v380) = v378;
  LODWORD(v380) = v378;
  v384 = v383 + v369 + (v381 ^ __ROR4__(v359, 2) ^ v372) - 899497514 + (v380 >> 27);
  v385 = v427 ^ __ROR4__(v289, 31) ^ __ROR4__(v340, 31) ^ __ROR4__(v370, 31);
  HIDWORD(v380) = v385;
  LODWORD(v380) = v385;
  v386 = v380 >> 31;
  this[8] = v383;
  this[9] = v386;
  HIDWORD(v380) = v372;
  LODWORD(v380) = v372;
  v387 = v380 >> 2;
  v388 = __PAIR64__(v384, __ROR4__(v366, 2));
  v389 = v386 + v375 + (v387 ^ v388 ^ v378) - 899497514;
  LODWORD(v388) = v384;
  v390 = v389 + (v388 >> 27);
  v392 = __PAIR64__(v378, __ROR4__(v346, 31));
  v391 = v453 ^ __ROR4__(v296, 31) ^ v392;
  LODWORD(v392) = v378;
  v393 = v392 >> 2;
  v394 = v391 ^ __ROR4__(v373, 31);
  HIDWORD(v392) = v394;
  LODWORD(v392) = v394;
  v395 = v392 >> 31;
  HIDWORD(v392) = v390;
  LODWORD(v392) = v390;
  v396 = v395 + v381 + (v393 ^ __ROR4__(v372, 2) ^ v384) - 899497514 + (v392 >> 27);
  LODWORD(v392) = v318 ^ __ROR4__(v304, 31) ^ __ROR4__(v349, 31) ^ __ROR4__(v382, 31);
  v397 = v392;
  HIDWORD(v392) = v392;
  v398 = v392 >> 31;
  this[10] = v395;
  this[11] = v398;
  HIDWORD(v392) = v384;
  LODWORD(v392) = v384;
  v399 = v392 >> 2;
  v400 = __PAIR64__(v396, __ROR4__(v378, 2));
  v401 = v398 + v387 + (v399 ^ v400 ^ v390);
  LODWORD(v400) = v396;
  v402 = v401 - 899497514 + (v400 >> 27);
  v404 = __PAIR64__(v390, __ROR4__(v310, 31));
  v403 = v456 ^ v404;
  LODWORD(v404) = v390;
  v405 = v404 >> 2;
  LODWORD(v404) = v403 ^ __ROR4__(v357, 31) ^ __ROR4__(v385, 31);
  v406 = v404;
  HIDWORD(v404) = v404;
  v407 = v404 >> 31;
  HIDWORD(v404) = v402;
  LODWORD(v404) = v402;
  v408 = v407 + v393 + (v405 ^ __ROR4__(v384, 2) ^ v396) - 899497514 + (v404 >> 27);
  LODWORD(v404) = v460 ^ __ROR4__(v317, 31) ^ __ROR4__(v360, 31) ^ __ROR4__(v394, 31);
  HIDWORD(v404) = v404;
  v409 = v404 >> 31;
  this[12] = v407;
  this[13] = v409;
  HIDWORD(v404) = v396;
  LODWORD(v404) = v396;
  v410 = v404 >> 2;
  v411 = __PAIR64__(v408, __ROR4__(v390, 2));
  v412 = v409 + v399 + (v410 ^ v411 ^ v402);
  LODWORD(v411) = v408;
  v413 = v412 - 899497514 + (v411 >> 27);
  v415 = __PAIR64__(v402, __ROR4__(v370, 31));
  v414 = v335 ^ __ROR4__(v323, 31) ^ v415;
  LODWORD(v415) = v402;
  v416 = v415 >> 2;
  LODWORD(v415) = __ROR4__(v397, 31);
  v417 = v414 ^ v415;
  v418 = __PAIR64__(v414 ^ v415, __ROR4__(v396, 2));
  v419 = v416 ^ v418 ^ v408;
  LODWORD(v418) = v417;
  v420 = v418 >> 31;
  HIDWORD(v418) = v413;
  LODWORD(v418) = v413;
  v421 = v420 + v405 + v419 - 899497514 + (v418 >> 27);
  *this = v335;
  this[1] = v341;
  LODWORD(v418) = v341 ^ __ROR4__(v329, 31) ^ __ROR4__(v373, 31) ^ __ROR4__(v406, 31);
  HIDWORD(v418) = v418;
  v422 = v418 >> 31;
  this[14] = v420;
  this[15] = v422;
  HIDWORD(v418) = v408;
  LODWORD(v418) = v408;
  v423 = v418 >> 2;
  v424 = __PAIR64__(v421, __ROR4__(v402, 2));
  v425 = v473 + v422 + v410 + (v423 ^ v424 ^ v413) - 899497514;
  LODWORD(v424) = v421;
  this[16] = v425 + (v424 >> 27);
  this[17] = v421 + v475;
  HIDWORD(v424) = v413;
  LODWORD(v424) = v413;
  this[18] = (v424 >> 2) + v472;
  this[19] = v423 + v474;
  this[20] = v416 + v476;
  return this;
}

_DWORD *llvm::SHA1::addUncounted(_DWORD *this, char a2)
{
  int v2;
  _DWORD *v3;

  *((_BYTE *)this + (*((unsigned __int8 *)this + 88) ^ 3)) = a2;
  v2 = (*((_BYTE *)this + 88))++ + 1;
  if (v2 == 64)
  {
    v3 = this;
    this = llvm::SHA1::hashBlock(this);
    *((_BYTE *)v3 + 88) = 0;
  }
  return this;
}

_DWORD *llvm::SHA1::writebyte(_DWORD *this, char a2)
{
  int v2;
  _DWORD *v3;

  ++this[21];
  *((_BYTE *)this + (*((unsigned __int8 *)this + 88) ^ 3)) = a2;
  v2 = (*((_BYTE *)this + 88))++ + 1;
  if (v2 == 64)
  {
    v3 = this;
    this = llvm::SHA1::hashBlock(this);
    *((_BYTE *)v3 + 88) = 0;
  }
  return this;
}

_DWORD *llvm::SHA1::update(_DWORD *this, _BYTE *a2, unint64_t a3)
{
  unint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  char v10;
  uint64_t i;
  int v12;

  v3 = a3;
  v4 = a2;
  v5 = (uint64_t)this;
  this[21] += a3;
  v6 = *((unsigned __int8 *)this + 88);
  if (*((_BYTE *)this + 88))
  {
    if (64 - v6 >= a3)
      v7 = a3;
    else
      v7 = 64 - v6;
    if (v7)
    {
      v8 = a2;
      v9 = v7;
      do
      {
        v10 = *v8++;
        *(_BYTE *)(v5 + (v6 ^ 3)) = v10;
        LODWORD(v6) = (*(_BYTE *)(v5 + 88))++ + 1;
        if ((_DWORD)v6 == 64)
        {
          this = llvm::SHA1::hashBlock((_DWORD *)v5);
          LOBYTE(v6) = 0;
          *(_BYTE *)(v5 + 88) = 0;
        }
        --v9;
      }
      while (v9);
    }
    v3 -= v7;
    v4 += v7;
  }
  if (v3 >= 0x40)
  {
    do
    {
      for (i = 0; i != 64; i += 4)
        *(_DWORD *)(v5 + i) = bswap32(*(_DWORD *)&v4[i]);
      this = llvm::SHA1::hashBlock((_DWORD *)v5);
      v3 -= 64;
      v4 += 64;
    }
    while (v3 > 0x3F);
  }
  if (v3)
  {
    LOBYTE(v12) = *(_BYTE *)(v5 + 88);
    do
    {
      *(_BYTE *)(v5 + (v12 ^ 3)) = *v4;
      v12 = (*(_BYTE *)(v5 + 88))++ + 1;
      if (v12 == 64)
      {
        this = llvm::SHA1::hashBlock((_DWORD *)v5);
        LOBYTE(v12) = 0;
        *(_BYTE *)(v5 + 88) = 0;
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return this;
}

_DWORD *llvm::SHA1::pad(llvm::SHA1 *this)
{
  int v2;
  int v3;
  unsigned int v4;
  _DWORD *result;

  *((_BYTE *)this + (*((unsigned __int8 *)this + 88) ^ 3)) = 0x80;
  v2 = *((unsigned __int8 *)this + 88);
  LOBYTE(v3) = v2 + 1;
  *((_BYTE *)this + 88) = v2 + 1;
  if (v2 != 55)
  {
    if (v2 == 63)
    {
      llvm::SHA1::hashBlock(this);
      LOBYTE(v3) = 0;
      *((_BYTE *)this + 88) = 0;
    }
    do
    {
      *((_BYTE *)this + (v3 ^ 3)) = 0;
      v3 = (*((_BYTE *)this + 88))++ + 1;
      if (v3 == 64)
      {
        llvm::SHA1::hashBlock(this);
        LOBYTE(v3) = 0;
        *((_BYTE *)this + 88) = 0;
      }
    }
    while (v3 != 56);
  }
  *((_BYTE *)this + 59) = 0;
  *(_WORD *)((char *)this + 57) = 0;
  v4 = *((_DWORD *)this + 21);
  *((_BYTE *)this + 56) = v4 >> 29;
  *((_BYTE *)this + 63) = v4 >> 21;
  *((_BYTE *)this + 62) = v4 >> 13;
  *((_WORD *)this + 30) = __PAIR16__((8 * v4) >> 24, 8 * v4);
  *((_BYTE *)this + 88) = 64;
  result = llvm::SHA1::hashBlock(this);
  *((_BYTE *)this + 88) = 0;
  return result;
}

_DWORD *llvm::SHA1::final(llvm::SHA1 *a1, uint64_t a2)
{
  _DWORD *result;
  uint64_t i;

  result = llvm::SHA1::pad(a1);
  for (i = 0; i != 20; i += 4)
    *(_DWORD *)(a2 + i) = bswap32(*(_DWORD *)((char *)a1 + i + 64));
  return result;
}

__n128 llvm::SHA1::result@<Q0>(llvm::SHA1 *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t i;
  __n128 result;
  __n128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[28];
  __int128 v11;
  int v12;

  v8 = *((_OWORD *)this + 2);
  v9 = *((_OWORD *)this + 3);
  *(_OWORD *)v10 = *((_OWORD *)this + 4);
  *(_OWORD *)&v10[12] = *(_OWORD *)((char *)this + 76);
  v6 = *(__n128 *)this;
  v7 = *((_OWORD *)this + 1);
  llvm::SHA1::pad(this);
  for (i = 0; i != 20; i += 4)
    *(_DWORD *)((char *)&v11 + i) = bswap32(*(_DWORD *)((char *)this + i + 64));
  *(_OWORD *)a2 = v11;
  *(_DWORD *)(a2 + 16) = v12;
  *((_OWORD *)this + 2) = v8;
  *((_OWORD *)this + 3) = v9;
  *((_OWORD *)this + 4) = *(_OWORD *)v10;
  *(_OWORD *)((char *)this + 76) = *(_OWORD *)&v10[12];
  result = v6;
  *(__n128 *)this = v6;
  *((_OWORD *)this + 1) = v7;
  return result;
}

double llvm::SHA1::hash@<D0>(_BYTE *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t i;
  double result;
  _DWORD v6[16];
  __int128 v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  int v11;

  v7 = xmmword_1C85F4BB0;
  v8 = 3285377520;
  v9 = 0;
  llvm::SHA1::update(v6, a1, a2);
  llvm::SHA1::pad((llvm::SHA1 *)v6);
  for (i = 0; i != 5; ++i)
    *(_DWORD *)((char *)&v10 + i * 4) = bswap32(v6[i + 16]);
  result = *(double *)&v10;
  *(_OWORD *)a3 = v10;
  *(_DWORD *)(a3 + 16) = v11;
  return result;
}

llvm::SHA256 *llvm::SHA256::SHA256(llvm::SHA256 *this)
{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)this = v2;
  CC_SHA256_Init((CC_SHA256_CTX *)v2);
  return this;
}

{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)this = v2;
  CC_SHA256_Init((CC_SHA256_CTX *)v2);
  return this;
}

llvm::SHA256 *llvm::SHA256::SHA256(llvm::SHA256 *this, __int128 **a2)
{
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v4 = operator new();
  v5 = *a2;
  v6 = **a2;
  v7 = (*a2)[2];
  *(_OWORD *)(v4 + 16) = (*a2)[1];
  *(_OWORD *)(v4 + 32) = v7;
  *(_OWORD *)v4 = v6;
  v8 = v5[3];
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(v4 + 96) = *((_QWORD *)v5 + 12);
  *(_OWORD *)(v4 + 64) = v9;
  *(_OWORD *)(v4 + 80) = v10;
  *(_OWORD *)(v4 + 48) = v8;
  *(_QWORD *)this = v4;
  return this;
}

{
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v4 = operator new();
  v5 = *a2;
  v6 = **a2;
  v7 = (*a2)[2];
  *(_OWORD *)(v4 + 16) = (*a2)[1];
  *(_OWORD *)(v4 + 32) = v7;
  *(_OWORD *)v4 = v6;
  v8 = v5[3];
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(v4 + 96) = *((_QWORD *)v5 + 12);
  *(_OWORD *)(v4 + 64) = v9;
  *(_OWORD *)(v4 + 80) = v10;
  *(_OWORD *)(v4 + 48) = v8;
  *(_QWORD *)this = v4;
  return this;
}

void llvm::SHA256::~SHA256(llvm::SHA256 *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if (v1)
    MEMORY[0x1CAA32FC0](v1, 0x1000C40ED882C02);
}

{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if (v1)
    MEMORY[0x1CAA32FC0](v1, 0x1000C40ED882C02);
}

__n128 llvm::SHA256::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;

  v2 = *a2;
  v3 = *a1;
  v5 = *(_OWORD *)(*a2 + 64);
  v4 = *(_OWORD *)(*a2 + 80);
  v6 = *(_OWORD *)(*a2 + 48);
  *(_QWORD *)(v3 + 96) = *(_QWORD *)(*a2 + 96);
  *(_OWORD *)(v3 + 64) = v5;
  *(_OWORD *)(v3 + 80) = v4;
  *(_OWORD *)(v3 + 48) = v6;
  result = *(__n128 *)v2;
  v8 = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v3 + 32) = v8;
  *(__n128 *)v3 = result;
  return result;
}

uint64_t llvm::SHA256::init(CC_SHA256_CTX **this)
{
  return CC_SHA256_Init(*this);
}

uint64_t llvm::SHA256::update(CC_SHA256_CTX **a1, const void *a2, CC_LONG a3)
{
  return CC_SHA256_Update(*a1, a2, a3);
}

{
  return CC_SHA256_Update(*a1, a2, a3);
}

uint64_t llvm::SHA256::final@<X0>(CC_SHA256_CTX **this@<X0>, unsigned __int8 *a2@<X8>)
{
  return CC_SHA256_Final(a2, *this);
}

__n128 llvm::SHA256::result@<Q0>(__n128 **this@<X0>, uint64_t a2@<X8>)
{
  __n128 *v2;
  __n128 result;
  __n128 v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  unint64_t v10;

  v2 = *this;
  v8 = (*this)[4];
  v9 = (*this)[5];
  v10 = (*this)[6].n128_u64[0];
  v4 = **this;
  v5 = (*this)[1];
  v6 = (*this)[2];
  v7 = (*this)[3];
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  CC_SHA256_Final((unsigned __int8 *)a2, (CC_SHA256_CTX *)v2);
  v2[4] = v8;
  v2[5] = v9;
  v2[6].n128_u64[0] = v10;
  *v2 = v4;
  v2[1] = v5;
  result = v7;
  v2[2] = v6;
  v2[3] = v7;
  return result;
}

void llvm::SHA256::hash(const void *a1@<X0>, CC_LONG a2@<W1>, unsigned __int8 *a3@<X8>)
{
  uint64_t v6;

  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_QWORD *)(v6 + 96) = 0;
  CC_SHA256_Init((CC_SHA256_CTX *)v6);
  CC_SHA256_Update((CC_SHA256_CTX *)v6, a1, a2);
  CC_SHA256_Final(a3, (CC_SHA256_CTX *)v6);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *llvm::SignpostEmitter::SignpostEmitter(_QWORD *this)
{
  *this = 0;
  return this;
}

{
  *this = 0;
  return this;
}

void llvm::SignpostEmitter::~SignpostEmitter(llvm::SignpostEmitter *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    MEMORY[0x1CAA32FC0](v2, 0xC400A2AC0F1);
}

{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    MEMORY[0x1CAA32FC0](v2, 0xC400A2AC0F1);
}

uint64_t llvm::SignpostEmitter::isEnabled(llvm::SignpostEmitter *this)
{
  return 0;
}

void *llvm::SmallPtrSetImplBase::shrink_and_clear(void **this)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  void *v5;

  free(this[1]);
  v2 = *((_DWORD *)this + 5) - *((_DWORD *)this + 6);
  v3 = 1 << (33 - __clz(v2 - 1));
  *((_DWORD *)this + 5) = 0;
  *((_DWORD *)this + 6) = 0;
  if (v2 <= 0x10)
    v4 = 32;
  else
    v4 = v3;
  *((_DWORD *)this + 4) = v4;
  v5 = malloc_type_malloc(8 * v4, 0x4065EBACuLL);
  if (!v5)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  this[1] = v5;
  return memset(v5, 255, 8 * *((unsigned int *)this + 4));
}

void *sub_1C5E341DC(size_t a1)
{
  void *result;

  result = malloc_type_malloc(a1, 0x4065EBACuLL);
  if (!result && (a1 || (result = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  return result;
}

const void **llvm::SmallPtrSetImplBase::insert_imp_big(llvm::SmallPtrSetImplBase *this, const void *a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  const void **result;
  const void *v9;
  const void **v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v4 = *((_DWORD *)this + 5);
  v5 = *((_DWORD *)this + 4);
  if (3 * v5 <= 4 * (v4 - *((_DWORD *)this + 6)))
  {
    if (v5 >= 0x40)
      v5 *= 2;
    else
      v5 = 128;
  }
  else if (v5 - v4 >= v5 >> 3)
  {
    goto LABEL_3;
  }
  llvm::SmallPtrSetImplBase::Grow(this, v5);
  v5 = *((_DWORD *)this + 4);
LABEL_3:
  v6 = *((_QWORD *)this + 1);
  v7 = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  result = (const void **)(v6 + 8 * v7);
  v9 = *result;
  if (*result == (const void *)-1)
  {
    v10 = 0;
LABEL_15:
    if (v10)
      result = v10;
    if (*result != a2)
    {
      if (*result == (const void *)-2)
        --*((_DWORD *)this + 6);
      else
        ++*((_DWORD *)this + 5);
      *result = a2;
    }
  }
  else
  {
    v10 = 0;
    v11 = 1;
    while (v9 != a2)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v9 == (const void *)-2;
      if (v12)
        v10 = result;
      v13 = v7 + v11++;
      v7 = v13 & (v5 - 1);
      result = (const void **)(v6 + 8 * v7);
      v9 = *result;
      if (*result == (const void *)-1)
        goto LABEL_15;
    }
  }
  return result;
}

void llvm::SmallPtrSetImplBase::Grow(llvm::SmallPtrSetImplBase *this, unsigned int a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;

  v5 = *(uint64_t **)this;
  v4 = (uint64_t *)*((_QWORD *)this + 1);
  v6 = 16;
  if (v4 == *(uint64_t **)this)
    v6 = 20;
  v7 = *(unsigned int *)((char *)this + v6);
  v8 = malloc_type_malloc(8 * a2, 0x4065EBACuLL);
  if (!v8 && (a2 || (v8 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  *((_QWORD *)this + 1) = v8;
  *((_DWORD *)this + 4) = a2;
  memset(v8, 255, 8 * a2);
  if ((_DWORD)v7)
  {
    v9 = v4;
    do
    {
      v10 = *v9;
      if ((unint64_t)*v9 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v11 = *((_DWORD *)this + 4) - 1;
        v12 = *((_QWORD *)this + 1);
        v13 = v11 & ((v10 >> 4) ^ (v10 >> 9));
        v14 = (_QWORD *)(v12 + 8 * v13);
        v15 = *v14;
        if (*v14 == -1)
        {
          v16 = 0;
LABEL_9:
          if (v16)
            v14 = v16;
        }
        else
        {
          v16 = 0;
          v17 = 1;
          while (v15 != v10)
          {
            if (v16)
              v18 = 0;
            else
              v18 = v15 == -2;
            if (v18)
              v16 = v14;
            v19 = v13 + v17++;
            v13 = v19 & v11;
            v14 = (_QWORD *)(v12 + 8 * (v19 & v11));
            v15 = *v14;
            if (*v14 == -1)
              goto LABEL_9;
          }
        }
        *v14 = v10;
      }
      ++v9;
    }
    while (v9 != &v4[v7]);
  }
  if (v4 != v5)
    free(v4);
  *(_QWORD *)((char *)this + 20) = (*((_DWORD *)this + 5) - *((_DWORD *)this + 6));
}

const void **llvm::SmallPtrSetImplBase::FindBucketFor(llvm::SmallPtrSetImplBase *this, const void *a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  const void **result;
  const void *v6;
  const void **v7;
  int v8;
  BOOL v9;
  unsigned int v10;

  v2 = *((_DWORD *)this + 4) - 1;
  v3 = *((_QWORD *)this + 1);
  v4 = v2 & ((a2 >> 4) ^ (a2 >> 9));
  result = (const void **)(v3 + 8 * v4);
  v6 = *result;
  if (*result == (const void *)-1)
  {
    v7 = 0;
LABEL_13:
    if (v7)
      return v7;
  }
  else
  {
    v7 = 0;
    v8 = 1;
    while (v6 != a2)
    {
      if (v7)
        v9 = 0;
      else
        v9 = v6 == (const void *)-2;
      if (v9)
        v7 = result;
      v10 = v4 + v8++;
      v4 = v10 & v2;
      result = (const void **)(v3 + 8 * v4);
      v6 = *result;
      if (*result == (const void *)-1)
        goto LABEL_13;
    }
  }
  return result;
}

llvm::SmallPtrSetImplBase *llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(llvm::SmallPtrSetImplBase *this, const void **__dst, const llvm::SmallPtrSetImplBase *a3)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t v10;

  *(_QWORD *)this = __dst;
  v5 = *((_QWORD *)a3 + 1);
  if (v5 == *(_QWORD *)a3)
  {
    *((_QWORD *)this + 1) = __dst;
  }
  else
  {
    v10 = *((unsigned int *)a3 + 4);
    __dst = (const void **)malloc_type_malloc(8 * v10, 0x4065EBACuLL);
    if (!__dst && ((_DWORD)v10 || (__dst = (const void **)malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    *((_QWORD *)this + 1) = __dst;
    v5 = *(_QWORD *)a3;
  }
  *((_DWORD *)this + 4) = *((_DWORD *)a3 + 4);
  v6 = *((_DWORD *)a3 + 5);
  if (*((_QWORD *)a3 + 1) == v5)
    v7 = *((_DWORD *)a3 + 5);
  else
    v7 = *((_DWORD *)a3 + 4);
  if (v7)
  {
    memmove(__dst, *((const void **)a3 + 1), 8 * v7);
    v6 = *((_DWORD *)a3 + 5);
  }
  v8 = *((_DWORD *)a3 + 6);
  *((_DWORD *)this + 5) = v6;
  *((_DWORD *)this + 6) = v8;
  return this;
}

{
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t v10;

  *(_QWORD *)this = __dst;
  v5 = *((_QWORD *)a3 + 1);
  if (v5 == *(_QWORD *)a3)
  {
    *((_QWORD *)this + 1) = __dst;
  }
  else
  {
    v10 = *((unsigned int *)a3 + 4);
    __dst = (const void **)malloc_type_malloc(8 * v10, 0x4065EBACuLL);
    if (!__dst && ((_DWORD)v10 || (__dst = (const void **)malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    *((_QWORD *)this + 1) = __dst;
    v5 = *(_QWORD *)a3;
  }
  *((_DWORD *)this + 4) = *((_DWORD *)a3 + 4);
  v6 = *((_DWORD *)a3 + 5);
  if (*((_QWORD *)a3 + 1) == v5)
    v7 = *((_DWORD *)a3 + 5);
  else
    v7 = *((_DWORD *)a3 + 4);
  if (v7)
  {
    memmove(__dst, *((const void **)a3 + 1), 8 * v7);
    v6 = *((_DWORD *)a3 + 5);
  }
  v8 = *((_DWORD *)a3 + 6);
  *((_DWORD *)this + 5) = v6;
  *((_DWORD *)this + 6) = v8;
  return this;
}

void **llvm::SmallPtrSetImplBase::CopyHelper(void **this, const llvm::SmallPtrSetImplBase *a2)
{
  void **v3;
  const void *v4;
  int v5;
  unsigned int v6;
  int v7;

  v3 = this;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  v4 = (const void *)*((_QWORD *)a2 + 1);
  v5 = *((_DWORD *)a2 + 5);
  if (v4 == *(const void **)a2)
    v6 = *((_DWORD *)a2 + 5);
  else
    v6 = *((_DWORD *)a2 + 4);
  if (v6)
  {
    this = (void **)memmove(this[1], v4, 8 * v6);
    v5 = *((_DWORD *)a2 + 5);
  }
  v7 = *((_DWORD *)a2 + 6);
  *((_DWORD *)v3 + 5) = v5;
  *((_DWORD *)v3 + 6) = v7;
  return this;
}

uint64_t llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(uint64_t a1, void *__dst, int a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = __dst;
  v8 = *a4;
  v7 = a4[1];
  if (v7 == *a4)
  {
    *(_QWORD *)(a1 + 8) = __dst;
    v9 = *((unsigned int *)a4 + 5);
    if ((_DWORD)v9)
      memmove(__dst, (const void *)a4[1], 8 * v9);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v7;
    a4[1] = v8;
  }
  *(_QWORD *)(a1 + 16) = a4[2];
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a4 + 6);
  *((_DWORD *)a4 + 5) = 0;
  *((_DWORD *)a4 + 6) = 0;
  *((_DWORD *)a4 + 4) = a3;
  return a1;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = __dst;
  v8 = *a4;
  v7 = a4[1];
  if (v7 == *a4)
  {
    *(_QWORD *)(a1 + 8) = __dst;
    v9 = *((unsigned int *)a4 + 5);
    if ((_DWORD)v9)
      memmove(__dst, (const void *)a4[1], 8 * v9);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v7;
    a4[1] = v8;
  }
  *(_QWORD *)(a1 + 16) = a4[2];
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a4 + 6);
  *((_DWORD *)a4 + 5) = 0;
  *((_DWORD *)a4 + 6) = 0;
  *((_DWORD *)a4 + 4) = a3;
  return a1;
}

double llvm::SmallPtrSetImplBase::MoveHelper(uint64_t a1, int a2, double *a3)
{
  uint64_t v6;
  double v7;
  void *v8;
  uint64_t v9;
  double result;

  v7 = *a3;
  v6 = *((_QWORD *)a3 + 1);
  if (v6 == *(_QWORD *)a3)
  {
    v8 = *(void **)a1;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
    v9 = *((unsigned int *)a3 + 5);
    if ((_DWORD)v9)
      memmove(v8, *((const void **)a3 + 1), 8 * v9);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v6;
    a3[1] = v7;
  }
  result = a3[2];
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a3 + 6);
  *((_DWORD *)a3 + 5) = 0;
  *((_DWORD *)a3 + 6) = 0;
  *((_DWORD *)a3 + 4) = a2;
  return result;
}

void *llvm::SmallPtrSetImplBase::CopyFrom(llvm::SmallPtrSetImplBase *this, const llvm::SmallPtrSetImplBase *a2)
{
  void *result;
  void *v5;
  const void *v6;
  const void *v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;

  result = (void *)*((_QWORD *)this + 1);
  v5 = *(void **)this;
  v6 = (const void *)*((_QWORD *)a2 + 1);
  v7 = *(const void **)a2;
  if (v6 == *(const void **)a2)
  {
    if (result != v5)
    {
      free(result);
      result = *(void **)this;
    }
    goto LABEL_4;
  }
  v8 = *((_DWORD *)this + 4);
  v12 = *((unsigned int *)a2 + 4);
  if (v8 != (_DWORD)v12)
  {
    if (result == v5)
      result = sub_1C5E341DC(8 * v12);
    else
      result = sub_1C5E34938(result, 8 * v12);
LABEL_4:
    *((_QWORD *)this + 1) = result;
    v8 = *((_DWORD *)a2 + 4);
    v7 = *(const void **)a2;
    v6 = (const void *)*((_QWORD *)a2 + 1);
  }
  *((_DWORD *)this + 4) = v8;
  v9 = *((_DWORD *)a2 + 5);
  if (v6 == v7)
    v10 = *((_DWORD *)a2 + 5);
  else
    v10 = *((_DWORD *)a2 + 4);
  if (v10)
  {
    result = memmove(result, v6, 8 * v10);
    v9 = *((_DWORD *)a2 + 5);
  }
  v11 = *((_DWORD *)a2 + 6);
  *((_DWORD *)this + 5) = v9;
  *((_DWORD *)this + 6) = v11;
  return result;
}

void *sub_1C5E34938(void *a1, size_t a2)
{
  void *result;

  result = malloc_type_realloc(a1, a2, 0x1DB68EDCuLL);
  if (!result && (a2 || (result = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  return result;
}

double llvm::SmallPtrSetImplBase::MoveFrom(uint64_t a1, int a2, double *a3)
{
  void *v6;
  uint64_t v7;
  double v8;
  void *v9;
  uint64_t v10;
  double result;

  v6 = *(void **)(a1 + 8);
  if (v6 != *(void **)a1)
    free(v6);
  v8 = *a3;
  v7 = *((_QWORD *)a3 + 1);
  if (v7 == *(_QWORD *)a3)
  {
    v9 = *(void **)a1;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1;
    v10 = *((unsigned int *)a3 + 5);
    if ((_DWORD)v10)
      memmove(v9, *((const void **)a3 + 1), 8 * v10);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v7;
    a3[1] = v8;
  }
  result = a3[2];
  *(double *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a3 + 6);
  *((_DWORD *)a3 + 5) = 0;
  *((_DWORD *)a3 + 6) = 0;
  *((_DWORD *)a3 + 4) = a2;
  return result;
}

uint64_t *llvm::SmallPtrSetImplBase::swap(uint64_t *this, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  llvm::SmallPtrSetImplBase *v24;
  int v25;
  int v26;

  if (this != (uint64_t *)a2)
  {
    v3 = this;
    v5 = this;
    this = (uint64_t *)*this;
    v4 = (uint64_t *)v5[1];
    v7 = *a2;
    v6 = a2[1];
    if (v4 == this)
    {
      if (v6 == v7)
      {
        v17 = *((unsigned int *)a2 + 5);
        v18 = *((unsigned int *)v3 + 5);
        if (v17 >= v18)
          v19 = v18;
        else
          v19 = v17;
        if ((_DWORD)v19)
        {
          v20 = 8 * v19;
          do
          {
            v21 = *v4;
            *v4++ = *v6;
            *v6++ = v21;
            v20 -= 8;
          }
          while (v20);
        }
        if (v18 <= v17)
        {
          if (v17 <= v18)
            goto LABEL_23;
          v22 = *a2;
          v23 = (uint64_t)&(*a2)[v17];
          v24 = (llvm::SmallPtrSetImplBase *)v3;
        }
        else
        {
          v22 = (uint64_t *)*v3;
          v23 = *v3 + 8 * v18;
          v24 = (llvm::SmallPtrSetImplBase *)a2;
        }
        this = (uint64_t *)memmove((void *)(*(_QWORD *)v24 + 8 * v19), &v22[v19], v23 - (_QWORD)&v22[v19]);
        goto LABEL_23;
      }
      v9 = *((unsigned int *)v3 + 5);
      if ((_DWORD)v9)
      {
        this = (uint64_t *)memmove(*a2, v4, 8 * v9);
        v7 = *a2;
        v6 = a2[1];
      }
      v10 = *((_DWORD *)a2 + 4);
      *((_DWORD *)a2 + 4) = *((_DWORD *)v3 + 4);
      *((_DWORD *)v3 + 4) = v10;
      v11 = *((_DWORD *)a2 + 5);
      *((_DWORD *)a2 + 5) = *((_DWORD *)v3 + 5);
      *((_DWORD *)v3 + 5) = v11;
      v12 = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = *((_DWORD *)v3 + 6);
      *((_DWORD *)v3 + 6) = v12;
      v3[1] = (uint64_t)v6;
      a2[1] = v7;
    }
    else
    {
      if (v6 != v7)
      {
        v3[1] = (uint64_t)v6;
        a2[1] = v4;
        v8 = *((_DWORD *)v3 + 4);
        *((_DWORD *)v3 + 4) = *((_DWORD *)a2 + 4);
        *((_DWORD *)a2 + 4) = v8;
LABEL_23:
        v25 = *((_DWORD *)v3 + 5);
        *((_DWORD *)v3 + 5) = *((_DWORD *)a2 + 5);
        *((_DWORD *)a2 + 5) = v25;
        v26 = *((_DWORD *)v3 + 6);
        *((_DWORD *)v3 + 6) = *((_DWORD *)a2 + 6);
        *((_DWORD *)a2 + 6) = v26;
        return this;
      }
      v13 = *((unsigned int *)a2 + 5);
      if ((_DWORD)v13)
      {
        memmove(this, a2[1], 8 * v13);
        this = (uint64_t *)*v3;
        v4 = (uint64_t *)v3[1];
      }
      v14 = *((_DWORD *)a2 + 4);
      *((_DWORD *)a2 + 4) = *((_DWORD *)v3 + 4);
      *((_DWORD *)v3 + 4) = v14;
      v15 = *((_DWORD *)v3 + 5);
      *((_DWORD *)v3 + 5) = *((_DWORD *)a2 + 5);
      *((_DWORD *)a2 + 5) = v15;
      v16 = *((_DWORD *)v3 + 6);
      *((_DWORD *)v3 + 6) = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = v16;
      a2[1] = v4;
      v3[1] = (uint64_t)this;
    }
  }
  return this;
}

uint64_t llvm::SmallVectorBase<unsigned int>::SizeTypeMax()
{
  return 0xFFFFFFFFLL;
}

uint64_t llvm::SmallVectorBase<unsigned int>::SmallVectorBase(uint64_t result, uint64_t a2, int a3)
{
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = a3;
  return result;
}

{
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = a3;
  return result;
}

void *llvm::SmallVectorBase<unsigned int>::mallocForGrow(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *result;

  if (HIDWORD(a2))
    sub_1C5E34F74(a2);
  v4 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v4 == -1)
    sub_1C5E35028(0xFFFFFFFFuLL);
  v5 = (2 * v4) | 1;
  if (v5 <= a2)
    v5 = a2;
  if (v5 >= 0xFFFFFFFF)
    v5 = 0xFFFFFFFFLL;
  *a4 = v5;
  v6 = v5 * a3;
  result = malloc_type_malloc(v5 * a3, 0x4065EBACuLL);
  if (!result && (v6 || (result = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  return result;
}

{
  return __ZN4llvm15SmallVectorBaseIjE13mallocForGrowEmmRm(a1, a2, a3, a4);
}

uint64_t llvm::SmallVectorBase<unsigned int>::capacity(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

void *llvm::SmallVectorBase<unsigned int>::grow_pod(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *result;
  void *v12;

  if (HIDWORD(a3))
    sub_1C5E34F74(a3);
  v5 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v5 == -1)
    sub_1C5E35028(0xFFFFFFFFuLL);
  v7 = (2 * v5) | 1;
  if (v7 <= a3)
    v7 = a3;
  if (v7 >= 0xFFFFFFFF)
    v8 = 0xFFFFFFFFLL;
  else
    v8 = v7;
  v9 = *(void **)a1;
  v10 = v8 * a4;
  if (*(_QWORD *)a1 == a2)
  {
    v12 = malloc_type_malloc(v8 * a4, 0x4065EBACuLL);
    if (!v12 && (v10 || (v12 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_20:
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    result = memcpy(v12, *(const void **)a1, *(unsigned int *)(a1 + 8) * a4);
  }
  else
  {
    result = malloc_type_realloc(v9, v8 * a4, 0x1DB68EDCuLL);
    v12 = result;
    if (!result)
    {
      if (v10)
        goto LABEL_20;
      result = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      v12 = result;
      if (!result)
        goto LABEL_20;
    }
  }
  *(_QWORD *)a1 = v12;
  *(_DWORD *)(a1 + 12) = v8;
  return result;
}

{
  return __ZN4llvm15SmallVectorBaseIjE8grow_podEPvmm(a1, a2, a3, a4);
}

uint64_t llvm::SmallVectorBase<unsigned int>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

BOOL llvm::SmallVectorBase<unsigned int>::empty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) == 0;
}

uint64_t llvm::SmallVectorBase<unsigned int>::set_size(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t llvm::SmallVectorBase<unsigned long long>::SizeTypeMax()
{
  return -1;
}

_QWORD *llvm::SmallVectorBase<unsigned long long>::SmallVectorBase(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = 0;
  result[2] = a3;
  return result;
}

{
  *result = a2;
  result[1] = 0;
  result[2] = a3;
  return result;
}

void *llvm::SmallVectorBase<unsigned long long>::mallocForGrow(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *result;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 == -1)
    sub_1C5E35028(0xFFFFFFFFFFFFFFFFLL);
  v5 = (2 * v4) | 1;
  if (v5 <= a2)
    v5 = a2;
  *a4 = v5;
  v6 = v5 * a3;
  result = malloc_type_malloc(v5 * a3, 0x4065EBACuLL);
  if (!result && (v6 || (result = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  return result;
}

uint64_t llvm::SmallVectorBase<unsigned long long>::capacity(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void *llvm::SmallVectorBase<unsigned long long>::grow_pod(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  void *result;
  void *v12;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 == -1)
    sub_1C5E35028(0xFFFFFFFFFFFFFFFFLL);
  v7 = (2 * v4) | 1;
  if (v7 <= a3)
    v8 = a3;
  else
    v8 = v7;
  v9 = *(void **)a1;
  v10 = v8 * a4;
  if (v9 == a2)
  {
    v12 = malloc_type_malloc(v8 * a4, 0x4065EBACuLL);
    if (!v12 && (v10 || (v12 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_16:
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    result = memcpy(v12, *(const void **)a1, *(_QWORD *)(a1 + 8) * a4);
  }
  else
  {
    result = malloc_type_realloc(v9, v8 * a4, 0x1DB68EDCuLL);
    v12 = result;
    if (!result)
    {
      if (v10)
        goto LABEL_16;
      result = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      v12 = result;
      if (!result)
        goto LABEL_16;
    }
  }
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 16) = v8;
  return result;
}

{
  return __ZN4llvm15SmallVectorBaseIyE8grow_podEPvmm(a1, a2, a3, a4);
}

uint64_t llvm::SmallVectorBase<unsigned long long>::size(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

BOOL llvm::SmallVectorBase<unsigned long long>::empty(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) == 0;
}

uint64_t llvm::SmallVectorBase<unsigned long long>::set_size(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 8) = a2;
  return result;
}

void sub_1C5E34F74(unint64_t a1)
{
  std::string v1;
  __int16 v2;
  std::string v3;
  std::string v4;
  std::string v5;
  std::string v6;
  std::string v7;

  std::to_string(&v4, a1);
  sub_1C486A9C4("SmallVector unable to grow. Requested capacity (", &v4, &v5);
  sub_1C5051730(&v5, ") is larger than maximum value for size type (", &v6);
  std::to_string(&v3, 0xFFFFFFFFuLL);
  sub_1C53D3B74(&v6, (uint64_t *)&v3, &v1);
  sub_1C5051730(&v1, ")", &v7);
  std::string::~string(&v1);
  std::string::~string(&v3);
  std::string::~string(&v6);
  std::string::~string(&v5);
  std::string::~string(&v4);
  v2 = 260;
  v1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v7;
  llvm::report_fatal_error((uint64_t)&v1, 1);
}

void sub_1C5E35028(unint64_t a1)
{
  std::string v1;
  __int16 v2;
  std::string v3;

  std::to_string(&v1, a1);
  sub_1C486A9C4("SmallVector capacity unable to grow. Already at maximum size ", &v1, &v3);
  std::string::~string(&v1);
  v2 = 260;
  v1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v3;
  llvm::report_fatal_error((uint64_t)&v1, 1);
}

double llvm::SourceMgr::SourceMgr(llvm::SourceMgr *this)
{
  double result;

  *((_QWORD *)this + 8) = 0;
  result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

{
  double result;

  *((_QWORD *)this + 8) = 0;
  result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

__n128 llvm::SourceMgr::SourceMgr(__n128 *a1, uint64_t a2)
{
  __n128 result;

  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  *a1 = *(__n128 *)a2;
  a1[1].n128_u64[0] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  a1[1].n128_u64[1] = 0;
  a1[2].n128_u64[0] = 0;
  a1[2].n128_u64[1] = 0;
  *(__n128 *)((char *)a1 + 24) = *(__n128 *)(a2 + 24);
  a1[2].n128_u64[1] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  result = *(__n128 *)(a2 + 48);
  a1[3] = result;
  a1[4].n128_u64[0] = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  return result;
}

{
  __n128 result;

  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  *a1 = *(__n128 *)a2;
  a1[1].n128_u64[0] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  a1[1].n128_u64[1] = 0;
  a1[2].n128_u64[0] = 0;
  a1[2].n128_u64[1] = 0;
  *(__n128 *)((char *)a1 + 24) = *(__n128 *)(a2 + 24);
  a1[2].n128_u64[1] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  result = *(__n128 *)(a2 + 48);
  a1[3] = result;
  a1[4].n128_u64[0] = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  return result;
}

char **llvm::SourceMgr::operator=(char **a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v4 = *a1;
  if (*a1)
  {
    v5 = a1[1];
    v6 = v4;
    if (v5 != v4)
    {
      do
        llvm::SourceMgr::SrcBuffer::~SrcBuffer((llvm::SourceMgr::SrcBuffer *)(v5 - 24));
      while (v5 != v4);
      v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(char **)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_1C4D8305C((void **)a1 + 3);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(char **)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  v7 = *(char **)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  v8 = (unsigned int *)a1[8];
  a1[8] = v7;
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
  }
  return a1;
}

double llvm::SourceMgr::SourceMgr(uint64_t a1, _QWORD *a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 64) = *a2;
  *a2 = 0;
  return result;
}

{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 64) = *a2;
  *a2 = 0;
  return result;
}

uint64_t llvm::SourceMgr::setFileSystem(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v3;
  if (result)
  {
    v5 = (unsigned int *)(result + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *llvm::SourceMgr::OpenIncludeFile@<X0>(std::string *this@<X2>, _QWORD *a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  char v8;
  BOOL v9;
  std::string *v10;
  std::string::size_type size;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void **v17;
  char v18;
  int v19;
  size_t v20;
  size_t v21;
  std::string *v22;
  const void *v23;
  char v24;
  BOOL v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  char v31;
  std::string *v32;
  std::string::size_type v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  std::string v38;
  __int16 v39;
  __int128 v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  std::string::operator=(this, (const std::string *)a3);
  v8 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  v9 = v8 < 0;
  if (v8 >= 0)
    v10 = this;
  else
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
  size = v8 & 0x7F;
  if (v9)
    size = this->__r_.__value_.__l.__size_;
  v12 = a2[8];
  v39 = 261;
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  v38.__r_.__value_.__l.__size_ = size;
  if (v12)
    result = llvm::vfs::FileSystem::getBufferForFile(v12, (uint64_t)&v38, -1, 1, 0, 0, a4);
  else
    result = sub_1C5E1F6CC((unsigned __int8 *)&v38, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, a4);
  v14 = -1431655765 * ((a2[4] - a2[3]) >> 3);
  if ((_DWORD)v14)
  {
    v15 = 0;
    v16 = 24 * v14;
    do
    {
      if ((*(_BYTE *)(a4 + 16) & 1) == 0)
        return result;
      v17 = (const void **)(a2[3] + v15);
      v18 = *((_BYTE *)v17 + 23);
      v19 = v18;
      v20 = v18 & 0x7F;
      if (v19 >= 0)
        v21 = v20;
      else
        v21 = (size_t)v17[1];
      sub_1C484371C((uint64_t)&v38, v21 + 1);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &v38;
      else
        v22 = (std::string *)v38.__r_.__value_.__r.__words[0];
      if (v21)
      {
        if (*((char *)v17 + 23) >= 0)
          v23 = v17;
        else
          v23 = *v17;
        memmove(v22, v23, v21);
      }
      *(_WORD *)((char *)&v22->__r_.__value_.__l.__data_ + v21) = 47;
      v24 = *(_BYTE *)(a3 + 23);
      v25 = v24 < 0;
      if (v24 >= 0)
        v26 = (const std::string::value_type *)a3;
      else
        v26 = *(const std::string::value_type **)a3;
      v27 = v24 & 0x7F;
      if (v25)
        v28 = *(_QWORD *)(a3 + 8);
      else
        v28 = v27;
      v29 = std::string::append(&v38, v26, v28);
      v30 = v29->__r_.__value_.__r.__words[0];
      *(_QWORD *)&v40 = v29->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)&v40 + 7) = *(std::string::size_type *)((char *)&v29->__r_.__value_.__r.__words[1] + 7);
      v31 = HIBYTE(v29->__r_.__value_.__r.__words[2]);
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        operator delete(this->__r_.__value_.__l.__data_);
      this->__r_.__value_.__r.__words[0] = v30;
      this->__r_.__value_.__l.__size_ = v40;
      *(std::string::size_type *)((char *)&this->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v40 + 7);
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v31;
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v38.__r_.__value_.__l.__data_);
        v31 = HIBYTE(this->__r_.__value_.__r.__words[2]);
        v30 = this->__r_.__value_.__r.__words[0];
      }
      if (v31 >= 0)
        v32 = this;
      else
        v32 = (std::string *)v30;
      v33 = this->__r_.__value_.__l.__size_;
      if (v31 >= 0)
        v33 = v31 & 0x7F;
      v34 = a2[8];
      v39 = 261;
      v38.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
      v38.__r_.__value_.__l.__size_ = v33;
      if (v34)
        result = llvm::vfs::FileSystem::getBufferForFile(v34, (uint64_t)&v38, -1, 1, 0, 0, (uint64_t)&v40);
      else
        result = sub_1C5E1F6CC((unsigned __int8 *)&v38, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)&v40);
      if (&v40 == (__int128 *)a4)
      {
        if ((v41 & 1) == 0)
          goto LABEL_50;
      }
      else
      {
        v35 = *(_BYTE *)(a4 + 16);
        if ((v35 & 1) == 0)
        {
          result = *(_QWORD **)a4;
          *(_QWORD *)a4 = 0;
          if (result)
          {
            result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
            v35 = *(_BYTE *)(a4 + 16);
          }
        }
        if ((v41 & 1) == 0)
        {
          *(_BYTE *)(a4 + 16) = v35 & 0xFE;
          v36 = v40;
          *(_QWORD *)&v40 = 0;
          *(_QWORD *)a4 = v36;
LABEL_50:
          result = (_QWORD *)v40;
          *(_QWORD *)&v40 = 0;
          if (result)
            result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
          goto LABEL_52;
        }
        *(_BYTE *)(a4 + 16) = v35 | 1;
        v37 = *((_QWORD *)&v40 + 1);
        *(_QWORD *)a4 = v40;
        *(_QWORD *)(a4 + 8) = v37;
      }
LABEL_52:
      v15 += 24;
    }
    while (v16 != v15);
  }
  return result;
}

unint64_t llvm::SourceMgr::SrcBuffer::getPointerForLineNumber(unint64_t **this, unsigned int a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD **v7;
  _QWORD *v8;
  unint64_t result;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;

  v4 = (uint64_t)*this;
  v5 = (*this)[2] - (*this)[1];
  if (v5 > 0xFF)
  {
    if (a2)
      v6 = a2 - 1;
    else
      v6 = 0;
    v7 = this + 1;
    if (v5 >> 16)
    {
      if (HIDWORD(v5))
      {
        v8 = sub_1C5E37310(v7, v4);
        result = (*this)[1];
        if (a2 < 2)
          return result;
        v11 = v8;
        v10 = *v8;
        if (v6 <= (v11[1] - v10) >> 3)
        {
          v12 = *(_QWORD *)(v10 + 8 * (v6 - 1));
LABEL_22:
          result += v12 + 1;
          return result;
        }
      }
      else
      {
        v20 = sub_1C5E371B0(v7, v4);
        result = (*this)[1];
        if (a2 < 2)
          return result;
        v22 = v20;
        v21 = *v20;
        if (v6 <= (v22[1] - v21) >> 2)
        {
          v12 = *(unsigned int *)(v21 + 4 * (v6 - 1));
          goto LABEL_22;
        }
      }
    }
    else
    {
      v17 = sub_1C5E37058(v7, v4);
      result = (*this)[1];
      if (a2 < 2)
        return result;
      v19 = v17;
      v18 = *v17;
      if (v6 <= (v19[1] - v18) >> 1)
      {
        v12 = *(unsigned __int16 *)(v18 + 2 * (v6 - 1));
        goto LABEL_22;
      }
    }
    return 0;
  }
  v13 = sub_1C5E36EF8(this + 1, v4);
  v14 = a2 - 1;
  if (!a2)
    v14 = 0;
  result = (*this)[1];
  if (a2 >= 2)
  {
    v16 = v13;
    v15 = *v13;
    if (v16[1] - v15 >= v14)
    {
      v12 = *(unsigned __int8 *)(v15 + v14 - 1);
      goto LABEL_22;
    }
    return 0;
  }
  return result;
}

__n128 llvm::SourceMgr::SrcBuffer::SrcBuffer(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a2->n128_u64[0] = 0;
  *a1 = result;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[1] = 0;
  return result;
}

{
  __n128 result;

  result = *a2;
  a2->n128_u64[0] = 0;
  *a1 = result;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[1] = 0;
  return result;
}

void llvm::SourceMgr::getFormattedLocationNoOffset(uint64_t *a1@<X0>, char *a2@<X1>, int a3@<W2>, std::string *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  std::string::size_type v16;
  std::string *p_dst;
  uint64_t last_of;
  std::string::size_type v19;
  std::string::size_type v20;
  std::string::size_type v21;
  std::string *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  std::string::size_type v28;
  unsigned int LineAndColumn;
  std::string *p_p;
  std::string::size_type size;
  std::string *v32;
  std::string __p;
  std::string __dst;
  std::string v35;
  _QWORD v36[2];

  v8 = -1431655765 * ((unint64_t)(a1[1] - *a1) >> 3);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = *a1;
    while (*(_QWORD *)(*(_QWORD *)v10 + 8) > (unint64_t)a2
         || *(_QWORD *)(*(_QWORD *)v10 + 16) < (unint64_t)a2)
    {
      ++v9;
      v10 += 24;
      if (v8 == v9)
        goto LABEL_6;
    }
    v11 = v9 + 1;
  }
  else
  {
LABEL_6:
    v11 = 0;
  }
  v12 = *(_QWORD *)(*a1 + 24 * (v11 - 1));
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  v15 = (char *)v13;
  v16 = v14;
  v36[0] = v13;
  v36[1] = v14;
  if (a3)
  {
    if (v13)
    {
      if (v14 <= 0x7FFFFFFFFFFFFFF7)
      {
        if (v14 >= 0x17)
        {
          v23 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v14 | 7) != 0x17)
            v23 = v14 | 7;
          v24 = v23 + 1;
          p_dst = (std::string *)operator new(v23 + 1);
          __dst.__r_.__value_.__l.__size_ = v16;
          __dst.__r_.__value_.__r.__words[2] = v24 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14;
          p_dst = &__dst;
          if (!v14)
            goto LABEL_30;
        }
        memmove(p_dst, v15, v16);
LABEL_30:
        p_dst->__r_.__value_.__s.__data_[v16] = 0;
        goto LABEL_36;
      }
LABEL_49:
      abort();
    }
LABEL_14:
    memset(&__dst, 0, sizeof(__dst));
    goto LABEL_36;
  }
  last_of = llvm::StringRef::find_last_of(v36, "/\\", 2, 0xFFFFFFFFFFFFFFFFLL);
  if (!v15)
    goto LABEL_14;
  if (last_of == v16)
    v19 = 0;
  else
    v19 = last_of + 1;
  if (v16 >= v19)
    v20 = v19;
  else
    v20 = v16;
  v21 = v16 - v20;
  if (v16 - v20 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_49;
  if (v21 >= 0x17)
  {
    v25 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v25 = v21 | 7;
    v26 = v25 + 1;
    v22 = (std::string *)operator new(v25 + 1);
    __dst.__r_.__value_.__l.__size_ = v21;
    __dst.__r_.__value_.__r.__words[2] = v26 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v16 - v20;
    v22 = &__dst;
    if (v16 <= v19)
      goto LABEL_35;
  }
  memmove(v22, &v15[v20], v21);
LABEL_35:
  v22->__r_.__value_.__s.__data_[v21] = 0;
LABEL_36:
  v27 = std::string::append(&__dst, ":");
  v28 = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  LineAndColumn = llvm::SourceMgr::getLineAndColumn(a1, a2, v11);
  std::to_string(&__p, LineAndColumn);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  v32 = std::string::append(&v35, (const std::string::value_type *)p_p, size);
  *a4 = *v32;
  v32->__r_.__value_.__r.__words[0] = 0;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

unint64_t llvm::SourceMgr::FindLocForLineAndColumn(llvm::SourceMgr *this, int a2, unsigned int a3, unsigned int a4)
{
  unint64_t **v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t first_of;
  _QWORD v10[2];

  v5 = (unint64_t **)(*(_QWORD *)this + 24 * (a2 - 1));
  result = llvm::SourceMgr::SrcBuffer::getPointerForLineNumber(v5, a3);
  if (result && a4 >= 2)
  {
    v7 = a4 - 1;
    v8 = result + v7;
    if (result + v7 <= (*v5)[2])
    {
      v10[0] = result;
      v10[1] = v7;
      first_of = llvm::StringRef::find_first_of(v10, "\n\r", 2, 0);
      result = 0;
      if (first_of == -1)
        return v8;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void llvm::SourceMgr::GetMessage(uint64_t *a1@<X0>, char *a2@<X1>, int a3@<W2>, llvm::Twine *a4@<X3>, unint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  char *v11;
  size_t v12;
  int v13;
  int v14;
  size_t v15;
  char *v16;
  void **v17;
  size_t v18;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  size_t v25;
  char *v26;
  int v27;
  int v28;
  unsigned __int8 *v30;
  char *v31;
  int v32;
  unint64_t LineAndColumn;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  BOOL v38;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  size_t v44;
  llvm::Twine *v45;
  int v46;
  void *__p[2];
  char v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD v55[6];

  v55[4] = *MEMORY[0x1E0C80C00];
  v53 = v55;
  v54 = 0x400000000;
  if (a2)
  {
    v21 = -1431655765 * ((unint64_t)(a1[1] - *a1) >> 3);
    v45 = a4;
    if ((_DWORD)v21)
    {
      v22 = 0;
      v23 = *a1;
      while (*(_QWORD *)(*(_QWORD *)v23 + 8) > (unint64_t)a2
           || *(_QWORD *)(*(_QWORD *)v23 + 16) < (unint64_t)a2)
      {
        ++v22;
        v23 += 24;
        if (v21 == v22)
        {
          LODWORD(v21) = 0;
          goto LABEL_19;
        }
      }
      LODWORD(v21) = v22 + 1;
    }
LABEL_19:
    v43 = v21;
    v24 = *(_QWORD **)(*a1 + 24 * (v21 - 1));
    v16 = (char *)(*(uint64_t (**)(_QWORD *))(*v24 + 16))(v24);
    v11 = (char *)v24[1];
    v26 = a2;
    v46 = a3;
    while (v26 != v11)
    {
      v28 = *--v26;
      v27 = v28;
      if (v28 == 13 || v27 == 10)
      {
        v11 = v26 + 1;
        break;
      }
    }
    v30 = (unsigned __int8 *)v24[2];
    v31 = a2;
    if (v30 != (unsigned __int8 *)a2)
    {
      v31 = a2;
      while (1)
      {
        v32 = *v31;
        if (v32 == 10 || v32 == 13)
          break;
        if (++v31 == (char *)v30)
        {
          v31 = (char *)v30;
          break;
        }
      }
    }
    v44 = v25;
    v12 = v31 - v11;
    if (a6)
    {
      v35 = &a5[2 * a6];
      do
      {
        v37 = *a5;
        v36 = a5[1];
        if (*a5)
          v38 = v37 > (unint64_t)v31;
        else
          v38 = 1;
        if (!v38 && v36 >= (unint64_t)v11)
        {
          if (v37 >= (unint64_t)v11)
            v40 = *a5;
          else
            v40 = (int)v11;
          if (v36 <= (unint64_t)v31)
            v41 = a5[1];
          else
            v41 = (int)v31;
          v42 = v54;
          if (v54 >= (unint64_t)HIDWORD(v54))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, (uint64_t)v55, v54 + 1, 8);
            v42 = v54;
          }
          v53[v42] = (v40 - (_DWORD)v11) | ((unint64_t)(v41 - (_DWORD)v11) << 32);
          LODWORD(v54) = v54 + 1;
        }
        a5 += 2;
      }
      while (a5 != v35);
    }
    LineAndColumn = llvm::SourceMgr::getLineAndColumn(a1, a2, v43);
    v13 = LineAndColumn;
    v14 = HIDWORD(LineAndColumn) - 1;
    a3 = v46;
    v15 = v44;
    a4 = v45;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = -1;
    v15 = 9;
    v16 = "<unknown>";
  }
  llvm::Twine::str(a4, __p);
  v17 = (void **)__p[0];
  if (v52 >= 0)
    v17 = __p;
  v18 = v52 & 0x7F;
  if (v52 < 0)
    v18 = (size_t)__p[1];
  llvm::SMDiagnostic::SMDiagnostic(a9, (uint64_t)a1, (uint64_t)a2, v16, v15, v13, v14, a3, v17, v18, v11, v12, v53, v54, a7, a8);
  if (v52 < 0)
    operator delete(__p[0]);
  if (v53 != v55)
    free(v53);
}

void llvm::SMDiagnostic::print(llvm::SMDiagnostic *this, const char *__s, llvm::raw_ostream *a3, int a4, int a5)
{
  int v6;
  size_t v10;
  _WORD *v11;
  char v12;
  const char **v13;
  size_t v14;
  uint64_t v15;
  const char *v16;
  int v17;
  _DWORD *v18;
  const char *v19;
  llvm::raw_ostream *v20;
  size_t v21;
  _BYTE *v22;
  unint64_t v23;
  llvm::raw_ostream *v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unint64_t v28;
  llvm::raw_ostream *v29;
  int v30;
  _WORD *v31;
  char v32;
  const char *v33;
  size_t v34;
  _BYTE *v35;
  _QWORD *v36;
  char v37;
  int v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t i;
  size_t v43;
  std::string *p_b;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int *j;
  std::string *v49;
  unint64_t size;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  size_t v61;
  size_t v62;
  size_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v67;
  uint64_t v68;
  std::string::size_type v69;
  std::string::size_type v70;
  uint64_t v71;
  size_t v72;
  std::string *v73;
  const void *v74;
  int v75;
  uint64_t v76;
  std::string *v77;
  std::string *v78;
  _BYTE *v79;
  std::string *v80;
  std::string *v81;
  std::string::size_type v82;
  char *v83;
  int v84;
  std::string::size_type v85;
  char v86;
  BOOL v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unint64_t v93;
  int v94;
  unint64_t v95;
  _QWORD *v96;
  std::string *v97;
  char v98;
  char *v99;
  std::string *v100;
  char v101;
  char *v102;
  _BYTE *v103;
  std::string::size_type v104;
  uint64_t v105;
  std::string::size_type k;
  std::string::size_type v107;
  _QWORD *v108;
  std::string *v109;
  char v110;
  char *v111;
  std::string *v112;
  std::string *v113;
  char v114;
  char *v115;
  _BYTE *v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  std::string v122;
  std::string __b;
  _QWORD v124[2];

  v6 = a4;
  if (a4 && llvm::WithColor::AutoDetectFunction(a3))
    (*(void (**)(llvm::raw_ostream *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 24))(a3, 8, 1, 0);
  if (__s && *__s)
  {
    v10 = strlen(__s);
    v11 = (_WORD *)*((_QWORD *)a3 + 4);
    if (v10 <= *((_QWORD *)a3 + 3) - (_QWORD)v11)
    {
      if (v10)
      {
        memcpy(v11, __s, v10);
        v11 = (_WORD *)(*((_QWORD *)a3 + 4) + v10);
        *((_QWORD *)a3 + 4) = v11;
      }
    }
    else
    {
      llvm::raw_ostream::write(a3, __s, v10);
      v11 = (_WORD *)*((_QWORD *)a3 + 4);
    }
    if (*((_QWORD *)a3 + 3) - (_QWORD)v11 > 1uLL)
    {
      *v11 = 8250;
      *((_QWORD *)a3 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(a3, ": ", 2uLL);
    }
  }
  v12 = *((_BYTE *)this + 39);
  if (v12 < 0)
  {
    if (!*((_QWORD *)this + 3))
      goto LABEL_44;
  }
  else if (!*((_BYTE *)this + 39))
  {
    goto LABEL_44;
  }
  v13 = (const char **)((char *)this + 16);
  if (v12 >= 0)
    v14 = *((unsigned __int8 *)this + 39);
  else
    v14 = *((_QWORD *)this + 3);
  if (v14 != 1)
    goto LABEL_24;
  v15 = *((unsigned __int8 *)this + 39);
  v16 = (char *)this + 16;
  if ((*((_BYTE *)this + 39) & 0x80) != 0)
  {
    v16 = *v13;
    v15 = *((_QWORD *)this + 3);
  }
  v17 = memcmp(v16, "-", v15 != 0);
  if (v15 != 1 || v17)
  {
LABEL_24:
    if (v12 >= 0)
      v19 = (char *)this + 16;
    else
      v19 = *v13;
    v20 = a3;
    v21 = v14;
    goto LABEL_28;
  }
  v18 = (_DWORD *)*((_QWORD *)a3 + 4);
  if (*((_QWORD *)a3 + 3) - (_QWORD)v18 <= 6uLL)
  {
    v19 = "<stdin>";
    v20 = a3;
    v21 = 7;
LABEL_28:
    llvm::raw_ostream::write(v20, v19, v21);
    goto LABEL_29;
  }
  *(_DWORD *)((char *)v18 + 3) = 1047423332;
  *v18 = 1685353276;
  *((_QWORD *)a3 + 4) += 7;
LABEL_29:
  if (*((_DWORD *)this + 10) != -1)
  {
    v22 = (_BYTE *)*((_QWORD *)a3 + 4);
    if ((unint64_t)v22 >= *((_QWORD *)a3 + 3))
    {
      llvm::raw_ostream::write(a3, 58);
    }
    else
    {
      *((_QWORD *)a3 + 4) = v22 + 1;
      *v22 = 58;
    }
    v23 = *((int *)this + 10);
    if ((v23 & 0x80000000) != 0)
    {
      v23 = -(uint64_t)v23;
      v24 = a3;
      v25 = 1;
    }
    else
    {
      v24 = a3;
      v25 = 0;
    }
    sub_1C5E21910(v24, v23, 0, 0, v25);
    if (*((_DWORD *)this + 11) != -1)
    {
      v26 = (_BYTE *)*((_QWORD *)a3 + 4);
      if ((unint64_t)v26 >= *((_QWORD *)a3 + 3))
      {
        llvm::raw_ostream::write(a3, 58);
      }
      else
      {
        *((_QWORD *)a3 + 4) = v26 + 1;
        *v26 = 58;
      }
      v27 = *((int *)this + 11);
      v28 = v27 + 1;
      if ((int)v27 < -1)
      {
        v28 = -(uint64_t)v28;
        v29 = a3;
        v30 = 1;
      }
      else
      {
        v29 = a3;
        v30 = 0;
      }
      sub_1C5E21910(v29, v28, 0, 0, v30);
    }
  }
  v31 = (_WORD *)*((_QWORD *)a3 + 4);
  if (*((_QWORD *)a3 + 3) - (_QWORD)v31 > 1uLL)
  {
    *v31 = 8250;
    *((_QWORD *)a3 + 4) += 2;
    if (!v6)
      goto LABEL_47;
    goto LABEL_45;
  }
  llvm::raw_ostream::write(a3, ": ", 2uLL);
LABEL_44:
  if (!v6)
    goto LABEL_47;
LABEL_45:
  if (llvm::WithColor::AutoDetectFunction(a3))
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)a3 + 32))(a3);
LABEL_47:
  if (a5)
  {
    switch(*((_DWORD *)this + 12))
    {
      case 0:
        llvm::WithColor::error(a3, "", 0, v6 ^ 1);
        break;
      case 1:
        llvm::WithColor::warning(a3, "", 0, v6 ^ 1);
        break;
      case 2:
        llvm::WithColor::remark(a3, "", 0, v6 ^ 1);
        break;
      case 3:
        llvm::WithColor::note(a3, "", 0, v6 ^ 1);
        break;
      default:
        break;
    }
  }
  if (v6 && llvm::WithColor::AutoDetectFunction(a3))
    (*(void (**)(llvm::raw_ostream *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 24))(a3, 8, 1, 0);
  v32 = *((_BYTE *)this + 79);
  if (v32 >= 0)
    v33 = (char *)this + 56;
  else
    v33 = (const char *)*((_QWORD *)this + 7);
  if (v32 >= 0)
    v34 = v32 & 0x7F;
  else
    v34 = *((_QWORD *)this + 8);
  llvm::raw_ostream::write(a3, v33, v34);
  v35 = (_BYTE *)*((_QWORD *)a3 + 4);
  if ((unint64_t)v35 >= *((_QWORD *)a3 + 3))
  {
    llvm::raw_ostream::write(a3, 10);
    if (!v6)
      goto LABEL_63;
  }
  else
  {
    *((_QWORD *)a3 + 4) = v35 + 1;
    *v35 = 10;
    if (!v6)
      goto LABEL_63;
  }
  if (llvm::WithColor::AutoDetectFunction(a3))
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)a3 + 32))(a3);
LABEL_63:
  if (*((_DWORD *)this + 10) == -1 || *((_DWORD *)this + 11) == -1)
    return;
  v36 = (_QWORD *)((char *)this + 80);
  v37 = *((_BYTE *)this + 103);
  v38 = v37;
  if (v37 >= 0)
    v39 = (char *)this + 80;
  else
    v39 = (char *)*((_QWORD *)this + 10);
  v40 = v37 & 0x7F;
  if (v38 >= 0)
    v41 = v40;
  else
    v41 = *((_QWORD *)this + 11);
  if (!v41)
  {
    v118 = 0;
    v43 = 1;
    *((_BYTE *)&__b.__r_.__value_.__s + 23) = 1;
    p_b = &__b;
LABEL_86:
    memset(p_b, 32, v43);
    goto LABEL_87;
  }
  for (i = 0; i != v41; ++i)
  {
    if (v39[i] < 0)
    {
      sub_1C5E36CE0(a3, (uint64_t)v39, v41);
      return;
    }
  }
  v43 = v41 + 1;
  if (v41 + 1 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v118 = v41;
  if (v43 >= 0x17)
  {
    v45 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v45 = v43 | 7;
    v46 = v45 + 1;
    p_b = (std::string *)operator new(v45 + 1);
    __b.__r_.__value_.__l.__size_ = v43;
    __b.__r_.__value_.__r.__words[2] = v46 | 0x8000000000000000;
    __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    goto LABEL_86;
  }
  *((_BYTE *)&__b.__r_.__value_.__s + 23) = v41 + 1;
  p_b = &__b;
  if (v41 != -1)
    goto LABEL_86;
LABEL_87:
  p_b->__r_.__value_.__s.__data_[v43] = 0;
  v47 = (unsigned int *)*((_QWORD *)this + 13);
  for (j = (unsigned int *)*((_QWORD *)this + 14); v47 != j; v47 += 2)
  {
    v49 = (std::string *)__b.__r_.__value_.__r.__words[0];
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = &__b;
    size = *((_BYTE *)&__b.__r_.__value_.__s + 23) & 0x7F;
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __b.__r_.__value_.__l.__size_;
    if (size >= v47[1])
      size = v47[1];
    v51 = size - *v47;
    if (v51 >= 1)
      memset((char *)v49 + *v47, 126, v51);
  }
  memset(&v122, 0, sizeof(v122));
  v52 = *((unsigned int *)this + 34);
  if (*((char *)this + 103) < 0)
    v53 = *((_QWORD *)this + 11);
  else
    v53 = *((unsigned __int8 *)this + 103);
  v54 = *((int *)this + 11);
  if ((_DWORD)v52)
  {
    v117 = v6;
    v55 = *((_QWORD *)this + 1) - v54;
    v121 = v55 + v53;
    v56 = 40 * v52;
    v57 = *((_QWORD *)this + 16) + 24;
    v119 = 0;
    v120 = v55;
    do
    {
      v58 = *(_QWORD *)(v57 - 8);
      v59 = *(_BYTE *)(v57 + 15);
      v60 = v59;
      if (v59 >= 0)
        v58 = v57 - 8;
      v61 = *(_QWORD *)v57;
      v62 = v59 & 0x7F;
      if (v59 >= 0)
        v63 = v59 & 0x7F;
      else
        v63 = *(_QWORD *)v57;
      v124[0] = v58;
      v124[1] = v63;
      if (llvm::StringRef::find_first_of(v124, "\n\r\t", 3, 0) == -1)
      {
        v64 = *(_QWORD *)(v57 - 24);
        v65 = *(_QWORD *)(v57 - 16);
        if (v121 >= v64 && v55 <= v65)
        {
          if (v55 <= v64)
            v67 = (v64 - v55);
          else
            v67 = 0;
          if (v119 > v67)
            v68 = (v119 + 1);
          else
            v68 = v67;
          v69 = (v68 + v63);
          v70 = *((_BYTE *)&v122.__r_.__value_.__s + 23) & 0x7F;
          if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v70 = v122.__r_.__value_.__l.__size_;
          v119 = (v68 + v63);
          if (v70 < v69)
          {
            v71 = v68;
            std::string::resize(&v122, v69, 32);
            v68 = v71;
            v60 = *(_BYTE *)(v57 + 15);
            v61 = *(_QWORD *)v57;
            v62 = v60 & 0x7F;
          }
          if (v60 >= 0)
            v72 = v62;
          else
            v72 = v61;
          if (v72)
          {
            v73 = &v122;
            if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v73 = (std::string *)v122.__r_.__value_.__r.__words[0];
            if (v60 >= 0)
              v74 = (const void *)(v57 - 8);
            else
              v74 = *(const void **)(v57 - 8);
            memmove((char *)v73 + v68, v74, v72);
          }
          if (v121 <= v65)
            v75 = v121;
          else
            v75 = v65;
          v76 = (v75 - v120);
          v77 = &__b;
          if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v77 = (std::string *)__b.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v76 - v67) >= 1)
            memset((char *)v77 + v67, 126, v76 - v67);
          v55 = v120;
        }
      }
      v57 += 40;
      v56 -= 40;
    }
    while (v56);
    LODWORD(v54) = *((_DWORD *)this + 11);
    v6 = v117;
    v36 = (_QWORD *)((char *)this + 80);
  }
  if (v118 >= v54)
  {
    v80 = &__b;
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v80 = (std::string *)__b.__r_.__value_.__r.__words[0];
    v79 = (char *)v80 + (int)v54;
  }
  else
  {
    v78 = &__b;
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v78 = (std::string *)__b.__r_.__value_.__r.__words[0];
    v79 = (char *)v78 + v118;
  }
  *v79 = 94;
  v81 = &__b;
  if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v81 = (std::string *)__b.__r_.__value_.__r.__words[0];
  v82 = *((_BYTE *)&__b.__r_.__value_.__s + 23) & 0x7F;
  if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v82 = __b.__r_.__value_.__l.__size_;
  v83 = (char *)&v81[-1].__r_.__value_.__r.__words[2] + 7;
  while (v82)
  {
    v84 = v83[v82--];
    if (v84 != 32)
    {
      v85 = v82 + 1;
      goto LABEL_158;
    }
  }
  v85 = 0;
LABEL_158:
  std::string::erase(&__b, v85, 0xFFFFFFFFFFFFFFFFLL);
  v86 = *((_BYTE *)this + 103);
  v87 = v86 < 0;
  if (v86 >= 0)
    v88 = (uint64_t)v36;
  else
    v88 = *((_QWORD *)this + 10);
  v89 = v86 & 0x7F;
  if (v87)
    v90 = *((_QWORD *)this + 11);
  else
    v90 = v89;
  sub_1C5E36CE0(a3, v88, v90);
  if (v6 && llvm::WithColor::AutoDetectFunction(a3))
    (*(void (**)(llvm::raw_ostream *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 24))(a3, 2, 1, 0);
  if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v91 = *((_BYTE *)&__b.__r_.__value_.__s + 23) & 0x7F;
  else
    v91 = __b.__r_.__value_.__r.__words[1];
  v92 = v91;
  if (v91)
  {
    v93 = 0;
    v94 = 0;
    do
    {
      if (*((char *)this + 103) < 0)
        v95 = *((_QWORD *)this + 11);
      else
        v95 = *((unsigned __int8 *)this + 103);
      if (v95 <= v93)
        goto LABEL_187;
      v96 = v36;
      if ((*((_BYTE *)this + 103) & 0x80) != 0)
        v96 = (_QWORD *)*v36;
      if (*((_BYTE *)v96 + v93) == 9)
      {
        do
        {
          if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v97 = &__b;
          else
            v97 = (std::string *)__b.__r_.__value_.__r.__words[0];
          v98 = v97->__r_.__value_.__s.__data_[v93];
          v99 = (char *)*((_QWORD *)a3 + 4);
          if ((unint64_t)v99 >= *((_QWORD *)a3 + 3))
          {
            llvm::raw_ostream::write(a3, v98);
          }
          else
          {
            *((_QWORD *)a3 + 4) = v99 + 1;
            *v99 = v98;
          }
          ++v94;
        }
        while ((v94 & 7) != 0);
      }
      else
      {
LABEL_187:
        if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v100 = &__b;
        else
          v100 = (std::string *)__b.__r_.__value_.__r.__words[0];
        v101 = v100->__r_.__value_.__s.__data_[v93];
        v102 = (char *)*((_QWORD *)a3 + 4);
        if ((unint64_t)v102 >= *((_QWORD *)a3 + 3))
        {
          llvm::raw_ostream::write(a3, v101);
        }
        else
        {
          *((_QWORD *)a3 + 4) = v102 + 1;
          *v102 = v101;
        }
        ++v94;
      }
      ++v93;
    }
    while (v93 != v92);
  }
  v103 = (_BYTE *)*((_QWORD *)a3 + 4);
  if ((unint64_t)v103 < *((_QWORD *)a3 + 3))
  {
    *((_QWORD *)a3 + 4) = v103 + 1;
    *v103 = 10;
    if (!v6)
      goto LABEL_201;
LABEL_199:
    if (llvm::WithColor::AutoDetectFunction(a3))
      (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)a3 + 32))(a3);
    goto LABEL_201;
  }
  llvm::raw_ostream::write(a3, 10);
  if (v6)
    goto LABEL_199;
LABEL_201:
  if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v104 = *((_BYTE *)&v122.__r_.__value_.__s + 23) & 0x7F;
  else
    v104 = v122.__r_.__value_.__l.__size_;
  if (v104)
  {
    v105 = 0;
    for (k = 0; k < v104; ++k)
    {
      if (*((char *)this + 103) < 0)
        v107 = *((_QWORD *)this + 11);
      else
        v107 = *((unsigned __int8 *)this + 103);
      if (k >= v107)
        goto LABEL_227;
      v108 = v36;
      if ((*((_BYTE *)this + 103) & 0x80) != 0)
        v108 = (_QWORD *)*v36;
      if (*((_BYTE *)v108 + k) == 9)
      {
        do
        {
          if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v109 = &v122;
          else
            v109 = (std::string *)v122.__r_.__value_.__r.__words[0];
          v110 = v109->__r_.__value_.__s.__data_[k];
          v111 = (char *)*((_QWORD *)a3 + 4);
          if ((unint64_t)v111 >= *((_QWORD *)a3 + 3))
          {
            llvm::raw_ostream::write(a3, v110);
          }
          else
          {
            *((_QWORD *)a3 + 4) = v111 + 1;
            *v111 = v110;
          }
          if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v112 = &v122;
          else
            v112 = (std::string *)v122.__r_.__value_.__r.__words[0];
          if (v112->__r_.__value_.__s.__data_[k] != 32)
            ++k;
          ++v105;
        }
        while ((v105 & 7) != 0 && k != v104);
      }
      else
      {
LABEL_227:
        if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v113 = &v122;
        else
          v113 = (std::string *)v122.__r_.__value_.__r.__words[0];
        v114 = v113->__r_.__value_.__s.__data_[k];
        v115 = (char *)*((_QWORD *)a3 + 4);
        if ((unint64_t)v115 >= *((_QWORD *)a3 + 3))
        {
          llvm::raw_ostream::write(a3, v114);
        }
        else
        {
          *((_QWORD *)a3 + 4) = v115 + 1;
          *v115 = v114;
        }
        ++v105;
      }
    }
    v116 = (_BYTE *)*((_QWORD *)a3 + 4);
    if ((unint64_t)v116 >= *((_QWORD *)a3 + 3))
    {
      llvm::raw_ostream::write(a3, 10);
    }
    else
    {
      *((_QWORD *)a3 + 4) = v116 + 1;
      *v116 = 10;
    }
  }
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v122.__r_.__value_.__l.__data_);
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__b.__r_.__value_.__l.__data_);
}

void llvm::SourceMgr::PrintMessage(uint64_t *a1, llvm::raw_ostream *a2, char *a3, int a4, llvm::Twine *a5, unint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  _BYTE v13[16];
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *__p;
  void *v21;
  char *v22[23];

  v22[22] = *(char **)MEMORY[0x1E0C80C00];
  llvm::SourceMgr::GetMessage(a1, a3, a4, a5, a6, a7, a9, a10, (uint64_t)v13);
  llvm::SourceMgr::PrintMessage((llvm::SourceMgr *)a1, a2, (const llvm::SMDiagnostic *)v13, a11);
  sub_1C4FAD100(v22);
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  if (v19 < 0)
    operator delete(v18);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14);
}

_QWORD *llvm::SMFixIt::SMFixIt(_QWORD *a1, uint64_t a2, uint64_t a3, llvm::Twine *a4)
{
  *a1 = a2;
  a1[1] = a3;
  llvm::Twine::str(a4, a1 + 2);
  return a1;
}

{
  *a1 = a2;
  a1[1] = a3;
  llvm::Twine::str(a4, a1 + 2);
  return a1;
}

uint64_t llvm::SMDiagnostic::SMDiagnostic(uint64_t a1, uint64_t a2, uint64_t a3, void *__src, size_t __len, int a6, int a7, int a8, void *__srca, size_t __lena, void *a11, size_t a12, const void *a13, unint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v22;
  size_t v23;
  size_t v24;
  void *v25;
  size_t v26;
  size_t v27;
  void *v28;
  size_t v29;
  size_t v30;
  char *v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  __int128 *v36;
  __int128 v37;
  __int128 *v38;
  unint64_t v39;
  __int128 *v40;
  unint64_t v41;
  uint64_t v42;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_42;
  if (__len >= 0x17)
  {
    v23 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v23 = __len | 7;
    v24 = v23 + 1;
    v22 = operator new(v23 + 1);
    *(_QWORD *)(a1 + 24) = __len;
    *(_QWORD *)(a1 + 32) = v24 | 0x8000000000000000;
    *(_QWORD *)(a1 + 16) = v22;
    goto LABEL_8;
  }
  v22 = (void *)(a1 + 16);
  *(_BYTE *)(a1 + 39) = __len;
  if (__len)
LABEL_8:
    memmove(v22, __src, __len);
  *((_BYTE *)v22 + __len) = 0;
  *(_DWORD *)(a1 + 40) = a6;
  *(_DWORD *)(a1 + 44) = a7;
  *(_DWORD *)(a1 + 48) = a8;
  if (__lena > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_42;
  if (__lena >= 0x17)
  {
    v26 = (__lena & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__lena | 7) != 0x17)
      v26 = __lena | 7;
    v27 = v26 + 1;
    v25 = operator new(v26 + 1);
    *(_QWORD *)(a1 + 64) = __lena;
    *(_QWORD *)(a1 + 72) = v27 | 0x8000000000000000;
    *(_QWORD *)(a1 + 56) = v25;
    goto LABEL_16;
  }
  v25 = (void *)(a1 + 56);
  *(_BYTE *)(a1 + 79) = __lena;
  if (__lena)
LABEL_16:
    memmove(v25, __srca, __lena);
  *((_BYTE *)v25 + __lena) = 0;
  if (a12 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_42;
  if (a12 >= 0x17)
  {
    v29 = (a12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a12 | 7) != 0x17)
      v29 = a12 | 7;
    v30 = v29 + 1;
    v28 = operator new(v29 + 1);
    *(_QWORD *)(a1 + 88) = a12;
    *(_QWORD *)(a1 + 96) = v30 | 0x8000000000000000;
    *(_QWORD *)(a1 + 80) = v28;
    goto LABEL_24;
  }
  v28 = (void *)(a1 + 80);
  *(_BYTE *)(a1 + 103) = a12;
  if (a12)
LABEL_24:
    memmove(v28, a11, a12);
  *((_BYTE *)v28 + a12) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  if (!a14)
    goto LABEL_28;
  if (a14 >> 61)
LABEL_42:
    abort();
  v31 = (char *)operator new(8 * a14);
  *(_QWORD *)(a1 + 104) = v31;
  *(_QWORD *)(a1 + 112) = v31;
  *(_QWORD *)(a1 + 120) = &v31[8 * a14];
  memcpy(v31, a13, 8 * a14);
  *(_QWORD *)(a1 + 112) = &v31[8 * a14];
LABEL_28:
  v32 = a1 + 144;
  *(_QWORD *)(a1 + 128) = a1 + 144;
  *(_QWORD *)(a1 + 136) = 0x400000000;
  if (0xCCCCCCCCCCCCCCCDLL * ((40 * a16) >> 3) >= 5)
  {
    sub_1C61C5314(a1 + 128, 0xCCCCCCCCCCCCCCCDLL * ((40 * a16) >> 3));
    v33 = *(_DWORD *)(a1 + 136);
    v32 = *(_QWORD *)(a1 + 128);
    v34 = v33;
    if (!a16)
      goto LABEL_36;
  }
  else
  {
    v33 = 0;
    v34 = 0;
    if (!a16)
      goto LABEL_36;
  }
  v35 = v32 + 40 * v33 + 16;
  v36 = (__int128 *)(a15 + 16);
  do
  {
    *(_OWORD *)(v35 - 16) = *(v36 - 1);
    if (*((char *)v36 + 23) < 0)
    {
      sub_1C47EBC30((_BYTE *)v35, *(void **)v36, *((_QWORD *)v36 + 1));
    }
    else
    {
      v37 = *v36;
      *(_QWORD *)(v35 + 16) = *((_QWORD *)v36 + 2);
      *(_OWORD *)v35 = v37;
    }
    v38 = v36 - 1;
    v35 += 40;
    v36 = (__int128 *)((char *)v36 + 40);
  }
  while ((__int128 *)((char *)v38 + 40) != (__int128 *)(a15 + 40 * a16));
  v34 = *(_DWORD *)(a1 + 136);
  v32 = *(_QWORD *)(a1 + 128);
LABEL_36:
  v39 = v34 - 858993459 * ((40 * a16) >> 3);
  *(_DWORD *)(a1 + 136) = v39;
  v40 = (__int128 *)(v32 + 40 * v39);
  v41 = 126 - 2 * __clz(v39);
  if (v34 == 858993459 * ((40 * a16) >> 3))
    v42 = 0;
  else
    v42 = v41;
  sub_1C5E37470(v32, v40, v42, 1);
  return a1;
}

{
  return llvm::SMDiagnostic::SMDiagnostic(a1, a2, a3, __src, __len, a6, a7, a8, __srca, __lena, a11, a12, a13, a14, a15, a16);
}

llvm::raw_ostream *sub_1C5E36CE0(llvm::raw_ostream *this, uint64_t a2, unint64_t a3)
{
  llvm::raw_ostream *v4;
  unsigned int v6;
  int v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v12;
  char *v13;
  const void *v14;
  char *v15;
  _BYTE *v16;
  unint64_t v17;
  const void *v18;
  size_t v19;
  _BYTE *v20;

  v4 = this;
  if ((_DWORD)a3)
  {
    v6 = 0;
    v7 = 0;
    while (1)
    {
      v8 = v6;
      if (a3 <= v6)
        break;
      v9 = (char *)memchr((void *)(a2 + v6), 9, a3 - v6);
      v10 = &v9[-a2];
      if (!v9 || v10 + 1 == 0)
        break;
      if (a3 >= v8)
        v12 = v8;
      else
        v12 = a3;
      if (v12 <= (unint64_t)v10)
        v13 = &v9[-a2];
      else
        v13 = (char *)v12;
      if (a3 < (unint64_t)v13)
        v13 = (char *)a3;
      v14 = (const void *)(a2 + v12);
      v15 = &v13[-v12];
      this = (llvm::raw_ostream *)*((_QWORD *)v4 + 4);
      if ((unint64_t)&v13[-v12] <= *((_QWORD *)v4 + 3) - (_QWORD)this)
      {
        if (v13 != (char *)v12)
        {
          this = (llvm::raw_ostream *)memcpy(this, v14, (size_t)&v13[-v12]);
          *((_QWORD *)v4 + 4) += v15;
        }
      }
      else
      {
        this = llvm::raw_ostream::write(v4, (const char *)v14, (size_t)&v13[-v12]);
      }
      v7 = v7 - v8 + (_DWORD)v10;
      do
      {
        v16 = (_BYTE *)*((_QWORD *)v4 + 4);
        if ((unint64_t)v16 >= *((_QWORD *)v4 + 3))
        {
          this = llvm::raw_ostream::write(v4, 32);
        }
        else
        {
          *((_QWORD *)v4 + 4) = v16 + 1;
          *v16 = 32;
        }
        ++v7;
      }
      while ((v7 & 7) != 0);
      v6 = (_DWORD)v10 + 1;
      if ((_DWORD)v10 + 1 == (_DWORD)a3)
        goto LABEL_34;
    }
    if (a3 >= v8)
      v17 = v8;
    else
      v17 = a3;
    v18 = (const void *)(a2 + v17);
    v19 = a3 - v17;
    this = (llvm::raw_ostream *)*((_QWORD *)v4 + 4);
    if (a3 - v17 <= *((_QWORD *)v4 + 3) - (_QWORD)this)
    {
      if (a3 > v8)
      {
        this = (llvm::raw_ostream *)memcpy(this, v18, v19);
        *((_QWORD *)v4 + 4) += v19;
      }
    }
    else
    {
      this = llvm::raw_ostream::write(v4, (const char *)v18, v19);
    }
  }
LABEL_34:
  v20 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v20 >= *((_QWORD *)v4 + 3))
    return llvm::raw_ostream::write(v4, 10);
  *((_QWORD *)v4 + 4) = v20 + 1;
  *v20 = 10;
  return this;
}

void sub_1C5E36E88(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        llvm::SourceMgr::SrcBuffer::~SrcBuffer((llvm::SourceMgr::SrcBuffer *)(v4 - 24));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unint64_t *sub_1C5E36EF8(unint64_t **a1, uint64_t a2)
{
  unint64_t *v2;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  _BYTE *v19;
  _BYTE *v20;
  char v21;

  v2 = *a1;
  if (!*a1)
  {
    v2 = (unint64_t *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    *v2 = 0;
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(_QWORD *)(a2 + 16) - v5;
    if (v6)
    {
      v7 = 0;
      v8 = 0;
      if (v6 <= 1)
        v9 = 1;
      else
        v9 = v6;
      do
      {
        if (*(_BYTE *)(v5 + v8) == 10)
        {
          v10 = v2[2];
          if ((unint64_t)v7 >= v10)
          {
            v12 = *v2;
            v13 = &v7[-*v2];
            v14 = (unint64_t)(v13 + 1);
            if ((uint64_t)(v13 + 1) < 0)
              abort();
            v15 = v10 - v12;
            if (2 * v15 > v14)
              v14 = 2 * v15;
            if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
              v16 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v16 = v14;
            if (v16)
              v17 = (char *)operator new(v16);
            else
              v17 = 0;
            v18 = &v13[(_QWORD)v17];
            v19 = &v13[(_QWORD)v17];
            *v19 = v8;
            v11 = v19 + 1;
            if (v7 != (_BYTE *)v12)
            {
              v20 = &v7[~v12];
              do
              {
                v21 = *--v7;
                (v20--)[(_QWORD)v17] = v21;
              }
              while (v7 != (_BYTE *)v12);
              v7 = (_BYTE *)*v2;
              v18 = v17;
            }
            *v2 = (unint64_t)v18;
            v2[1] = (unint64_t)v11;
            v2[2] = (unint64_t)&v17[v16];
            if (v7)
              operator delete(v7);
          }
          else
          {
            *v7 = v8;
            v11 = v7 + 1;
          }
          v2[1] = (unint64_t)v11;
          v7 = v11;
        }
        ++v8;
      }
      while (v8 != v9);
    }
    *a1 = v2;
  }
  return v2;
}

_QWORD *sub_1C5E37058(_QWORD **a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int16 v19;

  v2 = *a1;
  if (!*a1)
  {
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    *v2 = 0;
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(_QWORD *)(a2 + 16) - v5;
    if (v6)
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      if (v6 <= 1)
        v11 = 1;
      else
        v11 = *(_QWORD *)(a2 + 16) - v5;
      do
      {
        if (*(_BYTE *)(v5 + v10) == 10)
        {
          if (v9 >= v8)
          {
            v13 = v9 - v7;
            if (v9 - v7 <= -3)
              abort();
            v14 = v13 >> 1;
            if (v8 - v7 <= (unint64_t)((v13 >> 1) + 1))
              v15 = v14 + 1;
            else
              v15 = v8 - v7;
            if ((unint64_t)(v8 - v7) >= 0x7FFFFFFFFFFFFFFELL)
              v16 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v16 = v15;
            if (v16)
            {
              if (v16 < 0)
                sub_1C4764EE4();
              v17 = (char *)operator new(2 * v16);
            }
            else
            {
              v17 = 0;
            }
            v18 = &v17[2 * v14];
            *(_WORD *)v18 = v10;
            v12 = v18 + 2;
            while (v9 != v7)
            {
              v19 = *((_WORD *)v9 - 1);
              v9 -= 2;
              *((_WORD *)v18 - 1) = v19;
              v18 -= 2;
            }
            v8 = &v17[2 * v16];
            *v2 = v18;
            v2[1] = v12;
            v2[2] = v8;
            if (v7)
              operator delete(v7);
            v7 = v18;
          }
          else
          {
            *(_WORD *)v9 = v10;
            v12 = v9 + 2;
          }
          v2[1] = v12;
          v9 = v12;
        }
        ++v10;
      }
      while (v10 != v11);
    }
    *a1 = v2;
  }
  return v2;
}

_QWORD *sub_1C5E371B0(_QWORD **a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  int v18;

  v2 = *a1;
  if (!*a1)
  {
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    *v2 = 0;
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(_QWORD *)(a2 + 16) - v5;
    if (v6)
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      if (v6 <= 1)
        v11 = 1;
      else
        v11 = *(_QWORD *)(a2 + 16) - v5;
      do
      {
        if (*(_BYTE *)(v5 + v10) == 10)
        {
          if (v9 >= v8)
          {
            v13 = (v9 - v7) >> 2;
            v14 = v13 + 1;
            if ((unint64_t)(v13 + 1) >> 62)
              abort();
            if ((v8 - v7) >> 1 > v14)
              v14 = (v8 - v7) >> 1;
            if ((unint64_t)(v8 - v7) >= 0x7FFFFFFFFFFFFFFCLL)
              v15 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v15 = v14;
            if (v15)
            {
              if (v15 >> 62)
                sub_1C4764EE4();
              v16 = (char *)operator new(4 * v15);
            }
            else
            {
              v16 = 0;
            }
            v17 = &v16[4 * v13];
            *(_DWORD *)v17 = v10;
            v12 = v17 + 4;
            while (v9 != v7)
            {
              v18 = *((_DWORD *)v9 - 1);
              v9 -= 4;
              *((_DWORD *)v17 - 1) = v18;
              v17 -= 4;
            }
            v8 = &v16[4 * v15];
            *v2 = v17;
            v2[1] = v12;
            v2[2] = v8;
            if (v7)
              operator delete(v7);
            v7 = v17;
          }
          else
          {
            *(_DWORD *)v9 = v10;
            v12 = v9 + 4;
          }
          v2[1] = v12;
          v9 = v12;
        }
        ++v10;
      }
      while (v10 != v11);
    }
    *a1 = v2;
  }
  return v2;
}

_QWORD *sub_1C5E37310(_QWORD **a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v2 = *a1;
  if (!*a1)
  {
    v2 = (_QWORD *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    *v2 = 0;
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(_QWORD *)(a2 + 16) - v5;
    if (v6)
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      if (v6 <= 1)
        v11 = 1;
      else
        v11 = *(_QWORD *)(a2 + 16) - v5;
      do
      {
        if (*(_BYTE *)(v5 + v10) == 10)
        {
          if (v9 >= v8)
          {
            v13 = (v9 - v7) >> 3;
            v14 = v13 + 1;
            if ((unint64_t)(v13 + 1) >> 61)
              abort();
            if ((v8 - v7) >> 2 > v14)
              v14 = (v8 - v7) >> 2;
            if ((unint64_t)(v8 - v7) >= 0x7FFFFFFFFFFFFFF8)
              v15 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v15 = v14;
            if (v15)
            {
              if (v15 >> 61)
                sub_1C4764EE4();
              v16 = (char *)operator new(8 * v15);
            }
            else
            {
              v16 = 0;
            }
            v17 = &v16[8 * v13];
            *(_QWORD *)v17 = v10;
            v12 = v17 + 8;
            while (v9 != v7)
            {
              v18 = *((_QWORD *)v9 - 1);
              v9 -= 8;
              *((_QWORD *)v17 - 1) = v18;
              v17 -= 8;
            }
            v8 = &v16[8 * v15];
            *v2 = v17;
            v2[1] = v12;
            v2[2] = v8;
            if (v7)
              operator delete(v7);
            v7 = v17;
          }
          else
          {
            *(_QWORD *)v9 = v10;
            v12 = v9 + 8;
          }
          v2[1] = v12;
          v9 = v12;
        }
        ++v10;
      }
      while (v10 != v11);
    }
    *a1 = v2;
  }
  return v2;
}

void sub_1C5E37470(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  void **v21;
  uint64_t v22;
  unint64_t v23;
  __int128 *v24;
  __int128 *v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  __int128 *v30;
  unint64_t v31;
  __int128 v32;
  int v33;
  __int128 v34;
  BOOL v35;
  __int128 v36;
  uint64_t v37;
  __int128 *v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  __int128 *v43;
  uint64_t v44;
  unint64_t v45;
  __int128 v46;
  __int128 *v47;
  _BOOL4 v48;
  int v49;
  __int128 v50;
  _QWORD *v51;
  uint64_t v52;
  _OWORD *v53;
  _OWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void **v58;
  int v59;
  uint64_t v60;
  __int128 v61;
  int64_t v62;
  __int128 *v63;
  int64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  __int128 *v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  __int128 v78;
  uint64_t v79;
  __int128 *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  int v87;
  __int128 *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  __int128 v94;
  _QWORD *v95;
  void **v96;
  void **v97;
  __int128 v98;
  int v99;
  BOOL v100;
  __int128 v101;
  _QWORD *v102;
  uint64_t v103;
  _OWORD *v104;
  uint64_t v105;
  void **v106;
  BOOL v107;
  int v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  char v112;
  __int128 v113;
  uint64_t v114;
  __int128 *v115;
  __int128 *v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  _QWORD v121[2];
  __int128 v122;
  uint64_t v123;

  LOBYTE(v117) = a4;
  v123 = *MEMORY[0x1E0C80C00];
LABEL_2:
  v115 = a2 - 5;
  v116 = (__int128 *)((char *)a2 - 40);
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = (uint64_t)a2 - v7;
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v7) >> 3);
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (sub_1C6391100(v116, (_QWORD *)a1))
        {
          v118 = *(_OWORD *)a1;
          v111 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v122 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)((char *)&v122 + 7) = *(_QWORD *)(a1 + 31);
          v112 = *(_BYTE *)(a1 + 39);
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_OWORD *)a1 = *v116;
          v113 = *(__int128 *)((char *)a2 - 24);
          *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 - 1);
          *(_OWORD *)(a1 + 16) = v113;
          *v116 = v118;
          *((_QWORD *)a2 - 3) = v111;
          v114 = v122;
          *(_QWORD *)((char *)a2 - 9) = *(_QWORD *)((char *)&v122 + 7);
          *((_QWORD *)a2 - 2) = v114;
          *((_BYTE *)a2 - 1) = v112;
        }
        return;
      case 3:
        sub_1C5E38124((__int128 *)a1, (__int128 *)(a1 + 40), v116);
        return;
      case 4:
        sub_1C5E38668(a1, a1 + 40, a1 + 80, (uint64_t)v116);
        return;
      case 5:
        sub_1C5E38844(a1, a1 + 40, a1 + 80, a1 + 120, (uint64_t)v116);
        return;
      default:
        if (v8 <= 959)
        {
          if ((v117 & 1) != 0)
          {
            if ((__int128 *)a1 != a2)
            {
              v51 = (_QWORD *)(a1 + 40);
              if ((__int128 *)(a1 + 40) != a2)
              {
                v52 = 0;
                v53 = (_OWORD *)a1;
                do
                {
                  v54 = v51;
                  if (sub_1C6391100(v51, v53))
                  {
                    v118 = *v54;
                    v119 = *(_OWORD *)((char *)v53 + 56);
                    v120 = *((_QWORD *)v53 + 9);
                    *((_QWORD *)v53 + 7) = 0;
                    *((_QWORD *)v53 + 8) = 0;
                    *((_QWORD *)v53 + 9) = 0;
                    v55 = v52;
                    do
                    {
                      v56 = v55;
                      v57 = a1 + v55;
                      *(_OWORD *)(v57 + 40) = *(_OWORD *)v57;
                      v58 = (void **)(v57 + 56);
                      if (*(char *)(v57 + 79) < 0)
                        operator delete(*v58);
                      *(_OWORD *)v58 = *(_OWORD *)(v57 + 16);
                      *(_QWORD *)(v57 + 72) = *(_QWORD *)(v57 + 32);
                      *(_BYTE *)(v57 + 39) = 0;
                      *(_BYTE *)(v57 + 16) = 0;
                      if (!v56)
                      {
                        *(_OWORD *)a1 = v118;
                        goto LABEL_77;
                      }
                      v55 = v56 - 40;
                    }
                    while (sub_1C6391100(&v118, (_QWORD *)(v56 - 40 + a1)));
                    v59 = *(char *)(a1 + v55 + 79);
                    *(_OWORD *)(a1 + v56) = v118;
                    if (v59 < 0)
                      operator delete(*(void **)(a1 + v55 + 56));
LABEL_77:
                    v60 = a1 + v56;
                    v61 = v119;
                    *(_QWORD *)(v60 + 32) = v120;
                    *(_OWORD *)(v60 + 16) = v61;
                  }
                  v51 = (_QWORD *)v54 + 5;
                  v52 += 40;
                  v53 = v54;
                }
                while ((_OWORD *)((char *)v54 + 40) != a2);
              }
            }
          }
          else if ((__int128 *)a1 != a2)
          {
            v102 = (_QWORD *)(a1 + 40);
            if ((__int128 *)(a1 + 40) != a2)
            {
              v103 = a1 - 40;
              do
              {
                v104 = v102;
                if (sub_1C6391100(v102, (_QWORD *)a1))
                {
                  v118 = *v104;
                  v119 = *(_OWORD *)(a1 + 56);
                  v120 = *(_QWORD *)(a1 + 72);
                  *(_QWORD *)(a1 + 56) = 0;
                  *(_QWORD *)(a1 + 64) = 0;
                  *(_QWORD *)(a1 + 72) = 0;
                  v105 = v103;
                  do
                  {
                    *(_OWORD *)(v105 + 80) = *(_OWORD *)(v105 + 40);
                    v106 = (void **)(v105 + 96);
                    if (*(char *)(v105 + 119) < 0)
                      operator delete(*v106);
                    *(_OWORD *)v106 = *(_OWORD *)(v105 + 56);
                    *(_QWORD *)(v105 + 112) = *(_QWORD *)(v105 + 72);
                    *(_BYTE *)(v105 + 79) = 0;
                    *(_BYTE *)(v105 + 56) = 0;
                    v107 = sub_1C6391100(&v118, (_QWORD *)v105);
                    v105 -= 40;
                  }
                  while (v107);
                  *(_OWORD *)(v105 + 80) = v118;
                  v108 = *(char *)(v105 + 119);
                  v109 = v105 + 96;
                  if (v108 < 0)
                    operator delete(*(void **)v109);
                  v110 = v119;
                  *(_QWORD *)(v109 + 16) = v120;
                  *(_OWORD *)v109 = v110;
                }
                v102 = (_QWORD *)v104 + 5;
                v103 += 40;
                a1 = (uint64_t)v104;
              }
              while ((_OWORD *)((char *)v104 + 40) != a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if ((__int128 *)a1 != a2)
          {
            v62 = (unint64_t)(v9 - 2) >> 1;
            v63 = &v119;
            v64 = v62;
            do
            {
              v65 = v64;
              if (v62 >= v64)
              {
                v66 = (2 * v64) | 1;
                v67 = a1 + 40 * v66;
                if (2 * v64 + 2 < v9 && sub_1C6391100((_QWORD *)(a1 + 40 * v66), (_QWORD *)(v67 + 40)))
                {
                  v67 += 40;
                  v66 = 2 * v65 + 2;
                }
                v68 = a1 + 40 * v65;
                if (!sub_1C6391100((_QWORD *)v67, (_QWORD *)v68))
                {
                  v118 = *(_OWORD *)v68;
                  v69 = a1 + 40 * v65;
                  v70 = *(_OWORD *)(v69 + 16);
                  *((_QWORD *)v63 + 2) = *(_QWORD *)(v69 + 32);
                  v117 = (uint64_t)v63;
                  *v63 = v70;
                  *(_QWORD *)(v69 + 24) = 0;
                  *(_QWORD *)(v69 + 32) = 0;
                  *(_QWORD *)(v69 + 16) = 0;
                  do
                  {
                    v71 = v67;
                    *(_OWORD *)v68 = *(_OWORD *)v67;
                    v72 = v68 + 16;
                    if (*(char *)(v68 + 39) < 0)
                      operator delete(*(void **)v72);
                    v73 = (__int128 *)(v67 + 16);
                    v74 = *(_OWORD *)(v67 + 16);
                    *(_QWORD *)(v72 + 16) = *(_QWORD *)(v67 + 32);
                    *(_OWORD *)v72 = v74;
                    *(_BYTE *)(v67 + 39) = 0;
                    *(_BYTE *)(v67 + 16) = 0;
                    if (v62 < v66)
                    {
                      *(_OWORD *)v67 = v118;
                      goto LABEL_100;
                    }
                    v75 = (2 * v66) | 1;
                    v67 = a1 + 40 * v75;
                    v76 = 2 * v66 + 2;
                    v116 = (__int128 *)(v71 + 16);
                    if (v76 < v9 && sub_1C6391100((_QWORD *)(a1 + 40 * v75), (_QWORD *)(v67 + 40)))
                    {
                      v67 += 40;
                      v75 = v76;
                    }
                    v68 = v71;
                    v66 = v75;
                  }
                  while (!sub_1C6391100((_QWORD *)v67, &v118));
                  v77 = *(char *)(v71 + 39);
                  *(_OWORD *)v71 = v118;
                  v73 = v116;
                  if (v77 < 0)
                    operator delete(*(void **)v116);
LABEL_100:
                  v63 = (__int128 *)v117;
                  v78 = *(_OWORD *)v117;
                  *((_QWORD *)v73 + 2) = *(_QWORD *)(v117 + 16);
                  *v73 = v78;
                }
              }
              v64 = v65 - 1;
            }
            while (v65);
            do
            {
              v79 = 0;
              v80 = a2;
              v122 = *(_OWORD *)a1;
              v115 = *(__int128 **)(a1 + 16);
              v121[0] = *(_QWORD *)(a1 + 24);
              *(_QWORD *)((char *)v121 + 7) = *(_QWORD *)(a1 + 31);
              LOBYTE(v116) = *(_BYTE *)(a1 + 39);
              *(_QWORD *)(a1 + 24) = 0;
              *(_QWORD *)(a1 + 32) = 0;
              v81 = v9 - 2;
              v117 = v9 - 1;
              if (v9 < 2)
                v81 = v9 - 1;
              v82 = v81 >> 1;
              v83 = a1;
              *(_QWORD *)(a1 + 16) = 0;
              do
              {
                v84 = v83 + 40 * v79 + 40;
                if (2 * v79 + 2 < v9)
                {
                  if (sub_1C6391100((_QWORD *)(v83 + 40 * v79 + 40), (_QWORD *)(v83 + 40 * v79 + 80)))
                  {
                    v84 = v83 + 40 * v79 + 80;
                    v79 = 2 * v79 + 2;
                  }
                  else
                  {
                    v79 = (2 * v79) | 1;
                  }
                  v87 = *(char *)(v83 + 39);
                  *(_OWORD *)v83 = *(_OWORD *)v84;
                  v85 = v83 + 16;
                  if (v87 < 0)
                    operator delete(*(void **)v85);
                }
                else
                {
                  *(_OWORD *)v83 = *(_OWORD *)v84;
                  v85 = v83 + 16;
                  v79 = (2 * v79) | 1;
                }
                v83 = v84;
                v86 = *(_OWORD *)(v84 + 16);
                *(_QWORD *)(v85 + 16) = *(_QWORD *)(v84 + 32);
                *(_OWORD *)v85 = v86;
                *(_BYTE *)(v84 + 39) = 0;
                *(_BYTE *)(v84 + 16) = 0;
              }
              while (v79 <= v82);
              a2 = (__int128 *)((char *)v80 - 40);
              if ((__int128 *)v83 == (__int128 *)((char *)v80 - 40))
              {
                *(_OWORD *)v83 = v122;
                *(_QWORD *)(v83 + 16) = v115;
                *(_QWORD *)(v83 + 24) = v121[0];
                *(_QWORD *)(v83 + 31) = *(_QWORD *)((char *)v121 + 7);
                *(_BYTE *)(v83 + 39) = (_BYTE)v116;
              }
              else
              {
                v88 = (__int128 *)(v83 + 16);
                *(_OWORD *)v83 = *a2;
                v89 = *((_QWORD *)v80 - 1);
                *(_OWORD *)(v83 + 16) = *(__int128 *)((char *)v80 - 24);
                *(_QWORD *)(v83 + 32) = v89;
                *a2 = v122;
                *((_QWORD *)v80 - 3) = v115;
                v90 = v121[0];
                *(_QWORD *)((char *)v80 - 9) = *(_QWORD *)((char *)v121 + 7);
                *((_QWORD *)v80 - 2) = v90;
                *((_BYTE *)v80 - 1) = (_BYTE)v116;
                v91 = v83 - a1 + 40;
                if (v91 >= 41)
                {
                  v92 = (v91 / 0x28uLL - 2) >> 1;
                  v93 = (_QWORD *)(a1 + 40 * v92);
                  if (sub_1C6391100(v93, (_QWORD *)v83))
                  {
                    v118 = *(_OWORD *)v83;
                    v94 = *v88;
                    v120 = *(_QWORD *)(v83 + 32);
                    v119 = v94;
                    *(_QWORD *)(v83 + 24) = 0;
                    *(_QWORD *)(v83 + 32) = 0;
                    *(_QWORD *)v88 = 0;
                    do
                    {
                      v95 = v93;
                      *(_OWORD *)v83 = *(_OWORD *)v93;
                      v96 = (void **)(v83 + 16);
                      if (*(char *)(v83 + 39) < 0)
                        operator delete(*v96);
                      v97 = (void **)(v95 + 2);
                      v98 = *((_OWORD *)v95 + 1);
                      *(_QWORD *)(v83 + 32) = v95[4];
                      *(_OWORD *)v96 = v98;
                      *((_BYTE *)v95 + 39) = 0;
                      *((_BYTE *)v95 + 16) = 0;
                      if (!v92)
                      {
                        *(_OWORD *)v95 = v118;
                        goto LABEL_128;
                      }
                      v92 = (v92 - 1) >> 1;
                      v93 = (_QWORD *)(a1 + 40 * v92);
                      v83 = (uint64_t)v95;
                    }
                    while (sub_1C6391100(v93, &v118));
                    v99 = *((char *)v95 + 39);
                    *(_OWORD *)v95 = v118;
                    if (v99 < 0)
                      operator delete(*v97);
LABEL_128:
                    v101 = v119;
                    v95[4] = v120;
                    *(_OWORD *)v97 = v101;
                  }
                }
              }
              v100 = v9 <= 2;
              v9 = v117;
            }
            while (!v100);
          }
          return;
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = a1 + 40 * ((unint64_t)v9 >> 1);
        if ((unint64_t)v8 < 0x1401)
        {
          sub_1C5E38124((__int128 *)v11, (__int128 *)a1, v116);
        }
        else
        {
          sub_1C5E38124((__int128 *)a1, (__int128 *)v11, v116);
          v12 = 5 * v10;
          v13 = a1 + 8 * v12;
          sub_1C5E38124((__int128 *)(a1 + 40), (__int128 *)(v13 - 40), v115);
          sub_1C5E38124((__int128 *)(a1 + 80), (__int128 *)(a1 + 40 + 8 * v12), (__int128 *)((char *)a2 - 120));
          sub_1C5E38124((__int128 *)(v13 - 40), (__int128 *)v11, (__int128 *)(a1 + 40 + 8 * v12));
          v118 = *(_OWORD *)a1;
          *(_QWORD *)((char *)&v122 + 7) = *(_QWORD *)(a1 + 31);
          v14 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v122 = *(_QWORD *)(a1 + 24);
          v15 = *(_BYTE *)(a1 + 39);
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          v16 = *(_QWORD *)(v13 + 32);
          v17 = *(_OWORD *)(v13 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v11;
          *(_OWORD *)(a1 + 16) = v17;
          *(_QWORD *)(a1 + 32) = v16;
          *(_OWORD *)v11 = v118;
          *(_QWORD *)(v13 + 16) = v14;
          v18 = v122;
          *(_QWORD *)(v13 + 31) = *(_QWORD *)((char *)&v122 + 7);
          *(_QWORD *)(v13 + 24) = v18;
          *(_BYTE *)(v11 + 39) = v15;
        }
        --a3;
        if ((v117 & 1) == 0 && !sub_1C6391100((_QWORD *)(a1 - 40), (_QWORD *)a1))
        {
          v36 = *(_OWORD *)(a1 + 16);
          v118 = *(_OWORD *)a1;
          v37 = *(_QWORD *)(a1 + 32);
          v119 = v36;
          v120 = v37;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          if (sub_1C6391100(&v118, v116))
          {
            v7 = a1;
            do
              v7 += 40;
            while (!sub_1C6391100(&v118, (_QWORD *)v7));
          }
          else
          {
            v47 = (__int128 *)(a1 + 40);
            do
            {
              v7 = (unint64_t)v47;
              if (v47 >= a2)
                break;
              v48 = sub_1C6391100(&v118, v47);
              v47 = (__int128 *)(v7 + 40);
            }
            while (!v48);
          }
          v38 = a2;
          if (v7 < (unint64_t)a2)
          {
            v38 = a2;
            do
              v38 = (__int128 *)((char *)v38 - 40);
            while (sub_1C6391100(&v118, v38));
          }
          while (v7 < (unint64_t)v38)
          {
            v122 = *(_OWORD *)v7;
            v39 = *(_QWORD *)(v7 + 16);
            v121[0] = *(_QWORD *)(v7 + 24);
            *(_QWORD *)((char *)v121 + 7) = *(_QWORD *)(v7 + 31);
            v40 = *(_BYTE *)(v7 + 39);
            *(_QWORD *)(v7 + 24) = 0;
            *(_QWORD *)(v7 + 32) = 0;
            *(_QWORD *)(v7 + 16) = 0;
            *(_OWORD *)v7 = *v38;
            v41 = v38[1];
            *(_QWORD *)(v7 + 32) = *((_QWORD *)v38 + 4);
            *(_OWORD *)(v7 + 16) = v41;
            *v38 = v122;
            v42 = v121[0];
            *((_QWORD *)v38 + 2) = v39;
            *((_QWORD *)v38 + 3) = v42;
            *(_QWORD *)((char *)v38 + 31) = *(_QWORD *)((char *)v121 + 7);
            *((_BYTE *)v38 + 39) = v40;
            do
              v7 += 40;
            while (!sub_1C6391100(&v118, (_QWORD *)v7));
            do
              v38 = (__int128 *)((char *)v38 - 40);
            while (sub_1C6391100(&v118, v38));
          }
          v43 = (__int128 *)(v7 - 40);
          if (v7 - 40 == a1)
          {
            v49 = *(char *)(v7 - 1);
            *(_OWORD *)a1 = v118;
            v45 = v7 - 24;
            if (v49 < 0)
              operator delete(*(void **)v45);
          }
          else
          {
            v44 = a1 + 16;
            *(_OWORD *)a1 = *v43;
            if (*(char *)(a1 + 39) < 0)
              operator delete(*(void **)v44);
            v45 = v7 - 24;
            v46 = *(_OWORD *)(v7 - 24);
            *(_QWORD *)(v44 + 16) = *(_QWORD *)(v7 - 8);
            *(_OWORD *)v44 = v46;
            *(_BYTE *)(v7 - 1) = 0;
            *(_BYTE *)(v7 - 24) = 0;
            *v43 = v118;
          }
          LOBYTE(v117) = 0;
          v50 = v119;
          *(_QWORD *)(v45 + 16) = v120;
          *(_OWORD *)v45 = v50;
          continue;
        }
        v19 = 0;
        v20 = *(_OWORD *)(a1 + 16);
        v118 = *(_OWORD *)a1;
        v21 = (void **)(a1 + 16);
        v22 = *(_QWORD *)(a1 + 32);
        v119 = v20;
        v120 = v22;
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        do
          v19 += 40;
        while (sub_1C6391100((_QWORD *)(v19 + a1), &v118));
        v23 = a1 + v19;
        v24 = a2;
        if (v19 == 40)
        {
          v24 = a2;
          do
          {
            if (v23 >= (unint64_t)v24)
              break;
            v24 = (__int128 *)((char *)v24 - 40);
          }
          while (!sub_1C6391100(v24, &v118));
        }
        else
        {
          do
            v24 = (__int128 *)((char *)v24 - 40);
          while (!sub_1C6391100(v24, &v118));
        }
        v7 = a1 + v19;
        if (v23 < (unint64_t)v24)
        {
          v25 = v24;
          do
          {
            v122 = *(_OWORD *)v7;
            v26 = *(_QWORD *)(v7 + 16);
            v121[0] = *(_QWORD *)(v7 + 24);
            *(_QWORD *)((char *)v121 + 7) = *(_QWORD *)(v7 + 31);
            v27 = *(_BYTE *)(v7 + 39);
            *(_QWORD *)(v7 + 24) = 0;
            *(_QWORD *)(v7 + 32) = 0;
            *(_QWORD *)(v7 + 16) = 0;
            *(_OWORD *)v7 = *v25;
            v28 = v25[1];
            *(_QWORD *)(v7 + 32) = *((_QWORD *)v25 + 4);
            *(_OWORD *)(v7 + 16) = v28;
            *v25 = v122;
            v29 = v121[0];
            *((_QWORD *)v25 + 2) = v26;
            *((_QWORD *)v25 + 3) = v29;
            *(_QWORD *)((char *)v25 + 31) = *(_QWORD *)((char *)v121 + 7);
            *((_BYTE *)v25 + 39) = v27;
            do
              v7 += 40;
            while (sub_1C6391100((_QWORD *)v7, &v118));
            do
              v25 = (__int128 *)((char *)v25 - 40);
            while (!sub_1C6391100(v25, &v118));
          }
          while (v7 < (unint64_t)v25);
        }
        v30 = (__int128 *)(v7 - 40);
        if (v7 - 40 == a1)
        {
          v33 = *(char *)(v7 - 1);
          *(_OWORD *)a1 = v118;
          v31 = v7 - 24;
          if (v33 < 0)
            operator delete(*(void **)v31);
        }
        else
        {
          *(_OWORD *)a1 = *v30;
          if (*(char *)(a1 + 39) < 0)
            operator delete(*v21);
          v31 = v7 - 24;
          v32 = *(_OWORD *)(v7 - 24);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
          *(_OWORD *)v21 = v32;
          *(_BYTE *)(v7 - 1) = 0;
          *(_BYTE *)(v7 - 24) = 0;
          *v30 = v118;
        }
        v34 = v119;
        *(_QWORD *)(v31 + 16) = v120;
        *(_OWORD *)v31 = v34;
        if (v23 < (unint64_t)v24)
        {
LABEL_33:
          sub_1C5E37470(a1, v7 - 40, a3, v117 & 1);
          LOBYTE(v117) = 0;
          continue;
        }
        v35 = sub_1C5E383CC(a1, v7 - 40);
        if (!sub_1C5E383CC(v7, (uint64_t)a2))
        {
          if (v35)
            continue;
          goto LABEL_33;
        }
        a2 = (__int128 *)(v7 - 40);
        if (!v35)
          goto LABEL_2;
        return;
    }
  }
}

BOOL sub_1C5E38124(__int128 *a1, __int128 *a2, __int128 *a3)
{
  BOOL v6;
  _BOOL8 result;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v6 = sub_1C6391100(a2, a1);
  result = sub_1C6391100(a3, a2);
  if (v6)
  {
    v8 = a1 + 1;
    v9 = (_QWORD *)a1 + 3;
    if (result)
    {
      v25 = *a1;
      v10 = *((_QWORD *)a1 + 2);
      *(_QWORD *)&v30 = *v9;
      *(_QWORD *)((char *)&v30 + 7) = *(_QWORD *)((char *)a1 + 31);
      v11 = *((_BYTE *)a1 + 39);
      *((_QWORD *)a1 + 3) = 0;
      *((_QWORD *)a1 + 4) = 0;
      *v8 = 0;
      *a1 = *a3;
      v12 = *((_QWORD *)a3 + 4);
      *(_OWORD *)v8 = a3[1];
      *((_QWORD *)a1 + 4) = v12;
      *a3 = v25;
      *((_QWORD *)a3 + 2) = v10;
      *((_QWORD *)a3 + 3) = v30;
      *(_QWORD *)((char *)a3 + 31) = *(_QWORD *)((char *)&v30 + 7);
      *((_BYTE *)a3 + 39) = v11;
    }
    else
    {
      v26 = *a1;
      v13 = *((_QWORD *)a1 + 2);
      *(_QWORD *)&v31 = *v9;
      *(_QWORD *)((char *)&v31 + 7) = *(_QWORD *)((char *)a1 + 31);
      v14 = *((_BYTE *)a1 + 39);
      *((_QWORD *)a1 + 3) = 0;
      *((_QWORD *)a1 + 4) = 0;
      *v8 = 0;
      *a1 = *a2;
      v15 = *((_QWORD *)a2 + 4);
      *(_OWORD *)v8 = a2[1];
      *((_QWORD *)a1 + 4) = v15;
      *a2 = v26;
      *((_QWORD *)a2 + 2) = v13;
      *((_QWORD *)a2 + 3) = v31;
      *(_QWORD *)((char *)a2 + 31) = *(_QWORD *)((char *)&v31 + 7);
      *((_BYTE *)a2 + 39) = v14;
      result = sub_1C6391100(a3, a2);
      if (result)
      {
        v27 = *a2;
        v16 = *((_QWORD *)a2 + 2);
        *(_QWORD *)&v32 = *((_QWORD *)a2 + 3);
        *(_QWORD *)((char *)&v32 + 7) = *(_QWORD *)((char *)a2 + 31);
        v17 = *((_BYTE *)a2 + 39);
        *((_QWORD *)a2 + 3) = 0;
        *((_QWORD *)a2 + 4) = 0;
        *((_QWORD *)a2 + 2) = 0;
        *a2 = *a3;
        v18 = *((_QWORD *)a3 + 4);
        a2[1] = a3[1];
        *((_QWORD *)a2 + 4) = v18;
        *a3 = v27;
        *((_QWORD *)a3 + 2) = v16;
        *((_QWORD *)a3 + 3) = v32;
        *(_QWORD *)((char *)a3 + 31) = *(_QWORD *)((char *)&v32 + 7);
        *((_BYTE *)a3 + 39) = v17;
      }
    }
  }
  else if (result)
  {
    v28 = *a2;
    v19 = *((_QWORD *)a2 + 2);
    *(_QWORD *)&v33 = *((_QWORD *)a2 + 3);
    *(_QWORD *)((char *)&v33 + 7) = *(_QWORD *)((char *)a2 + 31);
    v20 = *((_BYTE *)a2 + 39);
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 3) = 0;
    *a2 = *a3;
    v21 = *((_QWORD *)a3 + 4);
    a2[1] = a3[1];
    *((_QWORD *)a2 + 4) = v21;
    *a3 = v28;
    *((_QWORD *)a3 + 2) = v19;
    *((_QWORD *)a3 + 3) = v33;
    *(_QWORD *)((char *)a3 + 31) = *(_QWORD *)((char *)&v33 + 7);
    *((_BYTE *)a3 + 39) = v20;
    result = sub_1C6391100(a2, a1);
    if (result)
    {
      v29 = *a1;
      v22 = *((_QWORD *)a1 + 2);
      *(_QWORD *)&v34 = *((_QWORD *)a1 + 3);
      *(_QWORD *)((char *)&v34 + 7) = *(_QWORD *)((char *)a1 + 31);
      v23 = *((_BYTE *)a1 + 39);
      *((_QWORD *)a1 + 3) = 0;
      *((_QWORD *)a1 + 4) = 0;
      *((_QWORD *)a1 + 2) = 0;
      *a1 = *a2;
      v24 = *((_QWORD *)a2 + 4);
      a1[1] = a2[1];
      *((_QWORD *)a1 + 4) = v24;
      *a2 = v29;
      *((_QWORD *)a2 + 2) = v22;
      *((_QWORD *)a2 + 3) = v34;
      *(_QWORD *)((char *)a2 + 31) = *(_QWORD *)((char *)&v34 + 7);
      *((_BYTE *)a2 + 39) = v23;
    }
  }
  return result;
}

BOOL sub_1C5E383CC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];

  v27[2] = *MEMORY[0x1E0C80C00];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v19 = (_OWORD *)(a2 - 40);
      if (!sub_1C6391100((_QWORD *)(a2 - 40), (_QWORD *)a1))
        return 1;
      v24 = *(_OWORD *)a1;
      v20 = *(_QWORD *)(a1 + 16);
      v27[0] = *(_QWORD *)(a1 + 24);
      *(_QWORD *)((char *)v27 + 7) = *(_QWORD *)(a1 + 31);
      v21 = *(_BYTE *)(a1 + 39);
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_OWORD *)a1 = *v19;
      v22 = *(_QWORD *)(a2 - 8);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 - 24);
      *(_QWORD *)(a1 + 32) = v22;
      *v19 = v24;
      v23 = v27[0];
      *(_QWORD *)(a2 - 24) = v20;
      *(_QWORD *)(a2 - 16) = v23;
      *(_QWORD *)(a2 - 9) = *(_QWORD *)((char *)v27 + 7);
      result = 1;
      *(_BYTE *)(a2 - 1) = v21;
      return result;
    case 3uLL:
      sub_1C5E38124((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a2 - 40));
      return 1;
    case 4uLL:
      sub_1C5E38668(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      sub_1C5E38844(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v6 = (_QWORD *)(a1 + 80);
      sub_1C5E38124((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a1 + 80));
      v7 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    if (sub_1C6391100((_QWORD *)v7, v6))
    {
      v10 = *(_OWORD *)(v7 + 16);
      v24 = *(_OWORD *)v7;
      v25 = v10;
      v26 = *(_QWORD *)(v7 + 32);
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)(v7 + 32) = 0;
      v11 = v8;
      do
      {
        v12 = v11;
        v13 = a1 + v11;
        *(_OWORD *)(a1 + v11 + 120) = *(_OWORD *)(a1 + v11 + 80);
        v14 = a1 + v11 + 136;
        if (*(char *)(a1 + v11 + 159) < 0)
          operator delete(*(void **)v14);
        *(_OWORD *)v14 = *(_OWORD *)(v13 + 96);
        *(_QWORD *)(v14 + 16) = *(_QWORD *)(v13 + 112);
        *(_BYTE *)(v13 + 119) = 0;
        *(_BYTE *)(v13 + 96) = 0;
        if (v12 == -80)
        {
          *(_OWORD *)a1 = v24;
          goto LABEL_14;
        }
        v15 = sub_1C6391100(&v24, (_QWORD *)(a1 + v12 + 40));
        v11 = v12 - 40;
      }
      while (v15);
      v16 = a1 + v11;
      v17 = *(char *)(v16 + 159);
      *(_OWORD *)(v16 + 120) = v24;
      if (v17 < 0)
        operator delete(*(void **)(v16 + 136));
LABEL_14:
      v18 = a1 + v12;
      *(_OWORD *)(v18 + 96) = v25;
      *(_QWORD *)(v18 + 112) = v26;
      if (++v9 == 8)
        return v7 + 40 == a2;
    }
    v6 = (_QWORD *)v7;
    v8 += 40;
    result = 1;
    v7 += 40;
    if (v7 == a2)
      return result;
  }
}

BOOL sub_1C5E38668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  sub_1C5E38124((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  result = sub_1C6391100((_QWORD *)a4, (_QWORD *)a3);
  if (result)
  {
    v18 = *(_OWORD *)a3;
    v9 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)&v21 = *(_QWORD *)(a3 + 24);
    *(_QWORD *)((char *)&v21 + 7) = *(_QWORD *)(a3 + 31);
    v10 = *(_BYTE *)(a3 + 39);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    v11 = *(_QWORD *)(a4 + 32);
    *(_OWORD *)(a3 + 16) = *(_OWORD *)(a4 + 16);
    *(_QWORD *)(a3 + 32) = v11;
    *(_OWORD *)a4 = v18;
    *(_QWORD *)(a4 + 16) = v9;
    *(_QWORD *)(a4 + 24) = v21;
    *(_QWORD *)(a4 + 31) = *(_QWORD *)((char *)&v21 + 7);
    *(_BYTE *)(a4 + 39) = v10;
    result = sub_1C6391100((_QWORD *)a3, (_QWORD *)a2);
    if (result)
    {
      v19 = *(_OWORD *)a2;
      v12 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)&v22 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)((char *)&v22 + 7) = *(_QWORD *)(a2 + 31);
      v13 = *(_BYTE *)(a2 + 39);
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      v14 = *(_QWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
      *(_QWORD *)(a2 + 32) = v14;
      *(_OWORD *)a3 = v19;
      *(_QWORD *)(a3 + 16) = v12;
      *(_QWORD *)(a3 + 24) = v22;
      *(_QWORD *)(a3 + 31) = *(_QWORD *)((char *)&v22 + 7);
      *(_BYTE *)(a3 + 39) = v13;
      result = sub_1C6391100((_QWORD *)a2, (_QWORD *)a1);
      if (result)
      {
        v20 = *(_OWORD *)a1;
        v15 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)&v23 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)((char *)&v23 + 7) = *(_QWORD *)(a1 + 31);
        v16 = *(_BYTE *)(a1 + 39);
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v17 = *(_QWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 32) = v17;
        *(_OWORD *)a2 = v20;
        *(_QWORD *)(a2 + 16) = v15;
        *(_QWORD *)(a2 + 24) = v23;
        *(_QWORD *)(a2 + 31) = *(_QWORD *)((char *)&v23 + 7);
        *(_BYTE *)(a2 + 39) = v16;
      }
    }
  }
  return result;
}

BOOL sub_1C5E38844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 result;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  sub_1C5E38668(a1, a2, a3, a4);
  result = sub_1C6391100((_QWORD *)a5, (_QWORD *)a4);
  if (result)
  {
    v23 = *(_OWORD *)a4;
    v11 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)&v27 = *(_QWORD *)(a4 + 24);
    *(_QWORD *)((char *)&v27 + 7) = *(_QWORD *)(a4 + 31);
    v12 = *(_BYTE *)(a4 + 39);
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    v13 = *(_QWORD *)(a5 + 32);
    *(_OWORD *)(a4 + 16) = *(_OWORD *)(a5 + 16);
    *(_QWORD *)(a4 + 32) = v13;
    *(_OWORD *)a5 = v23;
    *(_QWORD *)(a5 + 16) = v11;
    *(_QWORD *)(a5 + 24) = v27;
    *(_QWORD *)(a5 + 31) = *(_QWORD *)((char *)&v27 + 7);
    *(_BYTE *)(a5 + 39) = v12;
    result = sub_1C6391100((_QWORD *)a4, (_QWORD *)a3);
    if (result)
    {
      v24 = *(_OWORD *)a3;
      v14 = *(_QWORD *)(a3 + 16);
      *(_QWORD *)&v28 = *(_QWORD *)(a3 + 24);
      *(_QWORD *)((char *)&v28 + 7) = *(_QWORD *)(a3 + 31);
      v15 = *(_BYTE *)(a3 + 39);
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 32);
      *(_OWORD *)(a3 + 16) = *(_OWORD *)(a4 + 16);
      *(_QWORD *)(a3 + 32) = v16;
      *(_OWORD *)a4 = v24;
      *(_QWORD *)(a4 + 16) = v14;
      *(_QWORD *)(a4 + 24) = v28;
      *(_QWORD *)(a4 + 31) = *(_QWORD *)((char *)&v28 + 7);
      *(_BYTE *)(a4 + 39) = v15;
      result = sub_1C6391100((_QWORD *)a3, (_QWORD *)a2);
      if (result)
      {
        v25 = *(_OWORD *)a2;
        v17 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)&v29 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)((char *)&v29 + 7) = *(_QWORD *)(a2 + 31);
        v18 = *(_BYTE *)(a2 + 39);
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a2 + 32) = 0;
        *(_QWORD *)(a2 + 24) = 0;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        v19 = *(_QWORD *)(a3 + 32);
        *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
        *(_QWORD *)(a2 + 32) = v19;
        *(_OWORD *)a3 = v25;
        *(_QWORD *)(a3 + 16) = v17;
        *(_QWORD *)(a3 + 24) = v29;
        *(_QWORD *)(a3 + 31) = *(_QWORD *)((char *)&v29 + 7);
        *(_BYTE *)(a3 + 39) = v18;
        result = sub_1C6391100((_QWORD *)a2, (_QWORD *)a1);
        if (result)
        {
          v26 = *(_OWORD *)a1;
          v20 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v30 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)((char *)&v30 + 7) = *(_QWORD *)(a1 + 31);
          v21 = *(_BYTE *)(a1 + 39);
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v22 = *(_QWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
          *(_QWORD *)(a1 + 32) = v22;
          *(_OWORD *)a2 = v26;
          *(_QWORD *)(a2 + 16) = v20;
          *(_QWORD *)(a2 + 24) = v30;
          *(_QWORD *)(a2 + 31) = *(_QWORD *)((char *)&v30 + 7);
          *(_BYTE *)(a2 + 39) = v21;
        }
      }
    }
  }
  return result;
}

uint64_t llvm::SpecialCaseList::Matcher::insert(uint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  BOOL v11;
  unsigned __int8 *v12;
  size_t v13;
  size_t v14;
  unsigned int v15;
  int v16;
  size_t v17;
  unsigned __int8 *v18;
  int v19;
  llvm::StringMapImpl *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  int v33;
  uint64_t *i;
  _BOOL8 v35;
  std::string::size_type v36;
  std::string::size_type j;
  char v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  BOOL v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  llvm::Regex *v63;
  llvm::Regex *v64;
  _QWORD *v65;
  int v68;
  unsigned __int8 *__s1;
  _QWORD v70[4];
  __int16 v71;
  _QWORD *v72;
  uint64_t v73;
  const char *v74;
  __int16 v75;
  __int128 v76;
  unint64_t v77;

  v8 = *(unsigned __int8 *)(a2 + 23);
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
      goto LABEL_3;
LABEL_36:
    MEMORY[0x1CAA32ABC](a4, "Supplied regexp was blank");
    return 0;
  }
  if (!*(_BYTE *)(a2 + 23))
    goto LABEL_36;
LABEL_3:
  v9 = *(_QWORD *)a2;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a2 + 8);
  else
    v9 = a2;
  v72 = (_QWORD *)v9;
  v73 = v8;
  if (llvm::StringRef::find_first_of(&v72, "()^$|*+?.[]\\{}", 14, 0) == -1)
  {
    v10 = *(_BYTE *)(a2 + 23);
    v11 = v10 < 0;
    v12 = *(unsigned __int8 **)a2;
    if (v10 >= 0)
      v12 = (unsigned __int8 *)a2;
    __s1 = v12;
    v13 = v10 & 0x7F;
    if (v11)
      v14 = *(_QWORD *)(a2 + 8);
    else
      v14 = v13;
    v15 = *((_DWORD *)a1 + 2);
    if (!v15)
    {
      *((_DWORD *)a1 + 3) = 0;
      *((_DWORD *)a1 + 4) = 0;
      v65 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
      if (!v65)
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      v65[16] = 2;
      *a1 = (uint64_t)v65;
      v15 = 16;
      *((_DWORD *)a1 + 2) = 16;
    }
    v68 = a3;
    v16 = 0;
    if (v14)
    {
      v17 = v14;
      v18 = __s1;
      do
      {
        v19 = *v18++;
        v16 = 33 * v16 + v19;
        --v17;
      }
      while (v17);
    }
    v20 = (llvm::StringMapImpl *)a1;
    v21 = *a1;
    v22 = v15 - 1;
    v23 = *a1 + 8 * v15 + 8;
    v24 = -1;
    v25 = 1;
    v26 = v16;
    while (1)
    {
      v27 = v26 & v22;
      v28 = *(_QWORD *)(v21 + 8 * v27);
      if (!v28)
        break;
      if (v28 == -8)
      {
        if (v24 == -1)
          v24 = v26 & v22;
      }
      else if (*(_DWORD *)(v23 + 4 * v27) == v16
             && v14 == *(_QWORD *)v28
             && (!v14 || !memcmp(__s1, (const void *)(v28 + *((unsigned int *)v20 + 5)), v14)))
      {
        goto LABEL_31;
      }
      v26 = v25 + v27;
      ++v25;
    }
    v29 = v24;
    if (v24 == -1)
    {
      v29 = v27;
      v27 = v27;
    }
    else
    {
      v27 = v24;
    }
    *(_DWORD *)(v23 + 4 * v29) = v16;
    v28 = *(_QWORD *)(v21 + 8 * v27);
LABEL_31:
    if (v28)
    {
      if (v28 != -8)
      {
        v33 = v68;
LABEL_85:
        *(_DWORD *)(v28 + 8) = v33;
        return 1;
      }
      --*((_DWORD *)v20 + 4);
    }
    v30 = (char *)operator new(v14 + 17, (std::align_val_t)8uLL);
    v31 = v30;
    v32 = v30 + 16;
    v33 = v68;
    if (v14)
      memcpy(v30 + 16, __s1, v14);
    v32[v14] = 0;
    *(_QWORD *)v31 = v14;
    *((_DWORD *)v31 + 2) = 0;
    *(_QWORD *)(v21 + 8 * v27) = v31;
    ++*((_DWORD *)v20 + 3);
    for (i = (uint64_t *)(*(_QWORD *)v20 + 8 * llvm::StringMapImpl::RehashTable(v20, v27)); ; ++i)
    {
      v28 = *i;
      if (*i && v28 != -8)
        break;
    }
    goto LABEL_85;
  }
  llvm::TrigramIndex::insert((uint64_t)(a1 + 4), (char *)a2);
  v36 = std::string::find((const std::string *)a2, 42, 0);
  if (v36 != -1)
  {
    for (j = v36; j != -1; j = std::string::find((const std::string *)a2, 42, j + 2))
      std::string::replace((std::string *)a2, j, 1uLL, ".*");
  }
  v38 = *(_BYTE *)(a2 + 23);
  v39 = v38 < 0;
  v40 = *(_QWORD *)a2;
  if (v38 >= 0)
    v40 = a2;
  v41 = v38 & 0x7F;
  if (v39)
    v41 = *(_QWORD *)(a2 + 8);
  v70[0] = "^(";
  v70[2] = v40;
  v70[3] = v41;
  v71 = 1283;
  v72 = v70;
  v74 = ")$";
  v75 = 770;
  llvm::Twine::str((llvm::Twine *)&v72, &v76);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = v76;
  v42 = v77;
  *(_QWORD *)(a2 + 16) = v77;
  v43 = HIBYTE(v42);
  v44 = (v43 & 0x80u) != 0;
  if ((v43 & 0x80u) == 0)
    v45 = (char *)a2;
  else
    v45 = *(char **)a2;
  v46 = v43 & 0x7F;
  if (v44)
    v47 = *(_QWORD *)(a2 + 8);
  else
    v47 = v46;
  llvm::Regex::Regex((uint64_t)&v72, v45, v47, 0);
  v35 = (_DWORD)v73 == 0;
  if ((_DWORD)v73)
  {
    sub_1C5E2A1F8(v73, (uint64_t)v72, a4);
  }
  else
  {
    v48 = operator new();
    v49 = v48;
    *(_QWORD *)v48 = v72;
    *(_DWORD *)(v48 + 8) = v73;
    v72 = 0;
    LODWORD(v73) = 2;
    v51 = (char *)a1[14];
    v50 = a1[15];
    if ((unint64_t)v51 >= v50)
    {
      v52 = (char *)a1[13];
      v53 = (v51 - v52) >> 4;
      v54 = v53 + 1;
      if ((unint64_t)(v53 + 1) >> 60)
        abort();
      v55 = v50 - (_QWORD)v52;
      if (v55 >> 3 > v54)
        v54 = v55 >> 3;
      if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0)
        v56 = 0xFFFFFFFFFFFFFFFLL;
      else
        v56 = v54;
      if (v56 >> 60)
        sub_1C4764EE4();
      v57 = (char *)operator new(16 * v56);
      v58 = &v57[16 * v53];
      v59 = &v57[16 * v56];
      *(_QWORD *)v58 = v49;
      *((_DWORD *)v58 + 2) = a3;
      v60 = v58 + 16;
      if (v51 == v52)
      {
        a1[13] = (uint64_t)v58;
        a1[14] = (uint64_t)v60;
        a1[15] = (uint64_t)v59;
      }
      else
      {
        do
        {
          v61 = *((_QWORD *)v51 - 2);
          v51 -= 16;
          *(_QWORD *)v51 = 0;
          *((_QWORD *)v58 - 2) = v61;
          v58 -= 16;
          *((_DWORD *)v58 + 2) = *((_DWORD *)v51 + 2);
        }
        while (v51 != v52);
        v51 = (char *)a1[13];
        v62 = (char *)a1[14];
        a1[13] = (uint64_t)v58;
        a1[14] = (uint64_t)v60;
        a1[15] = (uint64_t)v59;
        while (v62 != v51)
        {
          v64 = (llvm::Regex *)*((_QWORD *)v62 - 2);
          v62 -= 16;
          v63 = v64;
          *(_QWORD *)v62 = 0;
          if (v64)
          {
            llvm::Regex::~Regex(v63);
            MEMORY[0x1CAA32FC0]();
          }
        }
      }
      if (v51)
        operator delete(v51);
      a1[14] = (uint64_t)v60;
    }
    else
    {
      *(_QWORD *)v51 = v48;
      *((_DWORD *)v51 + 2) = a3;
      a1[14] = (uint64_t)(v51 + 16);
    }
  }
  llvm::Regex::~Regex((llvm::Regex *)&v72);
  return v35;
}

BOOL llvm::SpecialCaseList::createInternal(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _BOOL8 v16;
  std::string v18;
  _QWORD v19[2];
  uint64_t v20;
  __int16 v21;
  _QWORD v22[2];
  const char *v23;
  __int16 v24;
  void *__p[2];
  uint64_t v26;
  std::error_code v27;
  _QWORD v28[2];
  std::string *v29;
  __int16 v30;
  _QWORD v31[4];
  std::error_code v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v31[0] = 0;
  v31[1] = 0;
  v31[2] = 0x1000000000;
  v5 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v9 = *a2;
    while (1)
    {
      v30 = 260;
      v28[0] = v9;
      llvm::vfs::FileSystem::getBufferForFile(a3, (uint64_t)v28, -1, 1, 0, 0, (uint64_t)&v32);
      if ((v33 & 1) != 0)
      {
        v10 = *(_QWORD *)&v32.__val_;
        v27 = v32;
        if (v32.__val_)
        {
          v19[0] = "can't open file '";
          v20 = v5;
          v21 = 1027;
          v22[0] = v19;
          v23 = "': ";
          v24 = 770;
          std::error_code::message(&v18, &v27);
          v11 = v24;
          if ((_BYTE)v24)
          {
            if (v24 == 1)
            {
              v28[0] = &v18;
              v12 = 1;
              v11 = 4;
            }
            else
            {
              if (HIBYTE(v24) != 1)
                v11 = 2;
              v14 = v22;
              if (HIBYTE(v24) == 1)
                v14 = (_QWORD *)v22[0];
              v28[0] = v14;
              v28[1] = v22[1];
              v29 = &v18;
              v12 = 4;
            }
          }
          else
          {
            v12 = 1;
          }
          LOBYTE(v30) = v11;
          HIBYTE(v30) = v12;
          llvm::Twine::str((llvm::Twine *)v28, __p);
          if (*(char *)(a4 + 23) < 0)
            operator delete(*(void **)a4);
          *(_OWORD *)a4 = *(_OWORD *)__p;
          *(_QWORD *)(a4 + 16) = v26;
          HIBYTE(v26) = 0;
          LOBYTE(__p[0]) = 0;
          if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v18.__r_.__value_.__l.__data_);
          v13 = 1;
          goto LABEL_27;
        }
      }
      else
      {
        std::system_category();
        v10 = *(_QWORD *)&v32.__val_;
      }
      __p[0] = 0;
      __p[1] = 0;
      v26 = 0;
      if ((llvm::SpecialCaseList::parse(a1, v10, (uint64_t)v31, (uint64_t)__p) & 1) != 0)
      {
        v13 = 0;
      }
      else
      {
        v19[0] = "error parsing file '";
        v20 = v5;
        v21 = 1027;
        v22[0] = v19;
        v23 = "': ";
        v24 = 770;
        v28[0] = v22;
        v29 = (std::string *)__p;
        v30 = 1026;
        llvm::Twine::str((llvm::Twine *)v28, &v18);
        if (*(char *)(a4 + 23) < 0)
          operator delete(*(void **)a4);
        *(std::string *)a4 = v18;
        v13 = 1;
      }
      if (SHIBYTE(v26) < 0)
        operator delete(__p[0]);
LABEL_27:
      if ((v33 & 1) == 0)
      {
        v15 = *(_QWORD *)&v32.__val_;
        *(_QWORD *)&v32.__val_ = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      }
      v16 = v13 == 0;
      if (!v13)
      {
        v9 += 24;
        v5 += 24;
        if (v9 != v4)
          continue;
      }
      goto LABEL_34;
    }
  }
  v16 = 1;
LABEL_34:
  sub_1C61DF2A0((uint64_t)v31);
  return v16;
}

void ***sub_1C5E3927C(void ***a1)
{
  void **v2;
  void **v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v4 = v2;
    sub_1C5E39EAC(&v4);
    MEMORY[0x1CAA32FC0](v2, 0x20C40960023A9);
  }
  return a1;
}

uint64_t llvm::SpecialCaseList::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v6;
  uint64_t result;
  void **v8[4];

  v6 = (uint64_t *)operator new();
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  v8[0] = 0;
  v8[1] = 0;
  v8[2] = (void **)0x1000000000;
  LOBYTE(a2) = llvm::SpecialCaseList::parse(v6, a1, (uint64_t)v8, a2);
  result = sub_1C61DF2A0((uint64_t)v8);
  if ((a2 & 1) == 0)
  {
    v8[0] = (void **)v6;
    sub_1C5E39EAC(v8);
    result = MEMORY[0x1CAA32FC0](v6, 0x20C40960023A9);
    v6 = 0;
  }
  *a3 = v6;
  return result;
}

uint64_t llvm::SpecialCaseList::createInternal(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[4];

  v5[0] = 0;
  v5[1] = 0;
  v5[2] = 0x1000000000;
  v3 = llvm::SpecialCaseList::parse(a1, a2, (uint64_t)v5, a3);
  sub_1C61DF2A0((uint64_t)v5);
  return v3;
}

void llvm::SpecialCaseList::createOrDie(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  void **v4;
  __int16 v5;
  void *__p[2];
  uint64_t v7;

  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  llvm::SpecialCaseList::create(a1, a2, (uint64_t)__p, a3);
  if (!*a3)
  {
    sub_1C5E3927C((void ***)a3);
    v5 = 260;
    v4 = __p;
    llvm::report_fatal_error((uint64_t)&v4, 1);
  }
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

uint64_t llvm::SpecialCaseList::parse(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  size_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  _BYTE *v23;
  int64_t v24;
  size_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  size_t v28;
  size_t v29;
  unsigned __int8 *v30;
  __int128 *p_dst;
  uint64_t v32;
  uint64_t v33;
  int v34;
  size_t v35;
  char *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  size_t **v51;
  size_t **v52;
  uint64_t *v53;
  char v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t *v65;
  uint64_t *i;
  uint64_t *v67;
  unint64_t v68;
  unint64_t v70;
  uint64_t *v71;
  size_t v72;
  uint64_t *v73;
  size_t v74;
  unsigned __int8 *v75;
  size_t v76;
  const char *v77;
  unsigned __int8 *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  char *__s1;
  __int128 v84;
  unint64_t v85;
  __int16 v86;
  __int128 v87;
  uint64_t v88;
  void *v89[2];
  unint64_t v90;
  void *v91[2];
  uint64_t v92;
  void *__p[2];
  unint64_t v94;
  __int128 __dst;
  unint64_t v96;
  void *v97[2];
  unint64_t v98;
  __int16 v99;
  _QWORD v100[2];
  unint64_t v101;
  size_t v102;
  __int16 v103;
  _QWORD v104[2];
  const char *v105;
  unint64_t v106;
  __int16 v107;
  void *v108;
  uint64_t *v109;
  void **v110;
  char *v111;
  uint64_t *v112;
  void *v113;
  uint64_t v114;
  _QWORD v115[34];

  v115[32] = *MEMORY[0x1E0C80C00];
  v113 = v115;
  v114 = 0x1000000000;
  v6 = (uint64_t *)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8));
  v108 = *(void **)(a2 + 8);
  v109 = v6;
  v7 = 1;
  llvm::StringRef::split((char *)&v108, (uint64_t)&v113, 10, -1, 1);
  if (!(_DWORD)v114)
    goto LABEL_114;
  v79 = a1;
  v8 = (uint64_t *)v113;
  v9 = (uint64_t *)((char *)v113 + 16 * v114);
  v71 = a1 + 2;
  __s1 = "*";
  v10 = 1;
  v11 = 1;
  v81 = a4;
  v73 = v9;
  while (1)
  {
    v12 = (char *)sub_1C534E9D8(v8, " \t\n\v\f\r", 6);
    *v8 = (uint64_t)v12;
    v8[1] = v13;
    if (!v13)
      goto LABEL_88;
    v14 = v12;
    v15 = *v12;
    if (v15 == 35)
      goto LABEL_88;
    v16 = v13;
    if (v15 != 91)
      break;
    if (v12[v13 - 1] != 93)
    {
      v100[0] = "malformed section header on line ";
      v101 = v10;
      v103 = 2051;
      v104[0] = v100;
      v105 = ": ";
      v107 = 770;
      v108 = v104;
      v110 = (void **)v12;
      v111 = (char *)v13;
      LOWORD(v112) = 1282;
      llvm::Twine::str((llvm::Twine *)&v108, v97);
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      v7 = 0;
      *(_OWORD *)a4 = *(_OWORD *)v97;
      v68 = v98;
LABEL_110:
      *(_QWORD *)(a4 + 16) = v68;
      goto LABEL_114;
    }
    v17 = v13 - 1;
    if (v13 - 1 <= 1)
      v17 = 1;
    if (v13 < v17)
      v17 = v13;
    v11 = v17 - 1;
    v97[0] = 0;
    v97[1] = 0;
    v98 = 0;
    __s1 = v12 + 1;
    llvm::Regex::Regex((uint64_t)&__dst, v12 + 1, v17 - 1, 0);
    if (DWORD2(__dst))
    {
      sub_1C5E2A1F8(SDWORD2(__dst), __dst, (uint64_t)v97);
      v100[0] = "malformed regex for section ";
      v101 = (unint64_t)__s1;
      v102 = v11;
      v103 = 1283;
      v104[0] = v100;
      v105 = ": '";
      v107 = 770;
      v108 = v104;
      v110 = v97;
      LOWORD(v112) = 1026;
      llvm::Twine::str((llvm::Twine *)&v108, &v84);
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      *(_OWORD *)a4 = v84;
      *(_QWORD *)(a4 + 16) = v85;
      llvm::Regex::~Regex((llvm::Regex *)&__dst);
      if (SHIBYTE(v98) < 0)
        operator delete(v97[0]);
      v7 = 0;
      goto LABEL_114;
    }
    llvm::Regex::~Regex((llvm::Regex *)&__dst);
LABEL_88:
    v8 += 2;
    ++v10;
    if (v8 == v9)
    {
      v7 = 1;
      goto LABEL_114;
    }
  }
  v18 = llvm::StringRef::find(v8, ":", 1uLL, 0);
  if (v18 == -1)
    goto LABEL_118;
  if (v16 >= v18)
    v19 = v18;
  else
    v19 = v16;
  if (v16 >= v18 + 1)
    v20 = v18 + 1;
  else
    v20 = v16;
  if (v16 <= v18 + 1)
  {
    v16 = v19;
LABEL_118:
    v97[0] = "malformed line ";
    v98 = v10;
    v99 = 2051;
    v100[0] = v97;
    v101 = (unint64_t)": '";
    v103 = 770;
    v104[0] = v100;
    v105 = v14;
    v106 = v16;
    v107 = 1282;
    v108 = v104;
    v110 = (void **)"'";
    LOWORD(v112) = 770;
    llvm::Twine::str((llvm::Twine *)&v108, &v84);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    v7 = 0;
    *(_OWORD *)a4 = v84;
    v68 = v85;
    goto LABEL_110;
  }
  v21 = &v14[v20];
  v22 = v16 - v20;
  v77 = &v14[v20];
  v78 = (unsigned __int8 *)v14;
  v72 = v16 - v20;
  v76 = v19;
  if (v16 == v20)
  {
    v29 = 0;
    v74 = 0;
    v75 = 0;
    HIBYTE(v96) = 0;
    p_dst = &__dst;
  }
  else
  {
    v23 = memchr(&v14[v20], 61, v16 - v20);
    if (v23)
    {
      v24 = v23 - v21;
      if (v22 >= v23 - v21)
        v25 = v23 - v21;
      else
        v25 = v22;
      if (v22 >= v24 + 1)
        v26 = v24 + 1;
      else
        v26 = v22;
      v27 = (unsigned __int8 *)&v21[v26];
      v28 = v22 - v26;
      if (v24 == -1)
        v29 = v22;
      else
        v29 = v25;
      if (v24 == -1)
        v30 = 0;
      else
        v30 = v27;
      if (v24 == -1)
        v28 = 0;
    }
    else
    {
      v30 = 0;
      v28 = 0;
      v29 = v22;
    }
    if (v29 > 0x7FFFFFFFFFFFFFF7)
LABEL_126:
      abort();
    v74 = v28;
    v75 = v30;
    if (v29 >= 0x17)
    {
      v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v29 | 7) != 0x17)
        v32 = v29 | 7;
      v33 = v32 + 1;
      p_dst = (__int128 *)operator new(v32 + 1);
      *((_QWORD *)&__dst + 1) = v29;
      v96 = v33 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v96) = v29;
      p_dst = &__dst;
      if (!v29)
        goto LABEL_48;
    }
    memmove(p_dst, v21, v29);
  }
LABEL_48:
  *((_BYTE *)p_dst + v29) = 0;
  v80 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v80)
  {
    v34 = 0;
    if (v11)
    {
      v35 = v11;
      v36 = __s1;
      do
      {
        v37 = *v36++;
        v34 = 33 * v34 + v37;
        --v35;
      }
      while (v35);
    }
    v38 = *(_QWORD *)a3;
    v39 = *(_QWORD *)a3 + 8 * v80 + 8;
    v40 = *(unsigned int *)(a3 + 20);
    v41 = 1;
    v42 = v34;
    while (1)
    {
      v43 = v42 & (v80 - 1);
      v44 = *(_QWORD **)(v38 + 8 * v43);
      if (v44 != (_QWORD *)-8)
      {
        if (!v44)
          goto LABEL_62;
        if (*(_DWORD *)(v39 + 4 * v43) == v34 && v11 == *v44 && (!v11 || !memcmp(__s1, (char *)v44 + v40, v11)))
          break;
      }
      v42 = v41 + v43;
      ++v41;
    }
    if ((_DWORD)v43 != -1 && (int)v43 != v80)
      goto LABEL_79;
  }
LABEL_62:
  v45 = operator new();
  *(_OWORD *)(v45 + 32) = 0u;
  *(_OWORD *)(v45 + 48) = 0u;
  *(_OWORD *)(v45 + 80) = 0u;
  *(_OWORD *)(v45 + 96) = 0u;
  *(_OWORD *)v45 = 0u;
  *(_OWORD *)(v45 + 16) = 0u;
  *(_OWORD *)(v45 + 112) = 0u;
  *(_OWORD *)(v45 + 64) = 0u;
  *(_DWORD *)(v45 + 20) = 16;
  *(_OWORD *)(v45 + 56) = 0u;
  *(_OWORD *)(v45 + 72) = 0u;
  *(_QWORD *)(v45 + 88) = 0;
  *(_OWORD *)(v45 + 40) = 0u;
  *(_DWORD *)(v45 + 96) = 1065353216;
  sub_1C542C2D4(v45 + 64, 0x100uLL);
  *(_QWORD *)(v45 + 104) = 0;
  *(_QWORD *)(v45 + 112) = 0;
  *(_QWORD *)(v45 + 120) = 0;
  v97[0] = 0;
  v97[1] = 0;
  v98 = 0;
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_126;
  if (v11 >= 0x17)
  {
    v48 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v48 = v11 | 7;
    v49 = v48 + 1;
    v46 = operator new(v48 + 1);
    __p[1] = (void *)v11;
    v94 = v49 | 0x8000000000000000;
    __p[0] = v46;
    v47 = v81;
    goto LABEL_69;
  }
  HIBYTE(v94) = v11;
  v46 = __p;
  v47 = v81;
  if (v11)
LABEL_69:
    memmove(v46, __s1, v11);
  *((_BYTE *)v46 + v11) = 0;
  v50 = llvm::SpecialCaseList::Matcher::insert((uint64_t *)v45, (uint64_t)__p, v10, (uint64_t)v97);
  if (SHIBYTE(v94) < 0)
    operator delete(__p[0]);
  if ((v50 & 1) != 0)
  {
    v56 = 0xCCCCCCCCCCCCCCCDLL * ((v79[1] - *v79) >> 3);
    (*sub_1C6241FF4(a3, (unsigned __int8 *)__s1, v11))[1] = v56;
    v57 = (uint64_t *)v79[1];
    v58 = v79[2];
    if ((unint64_t)v57 >= v58)
    {
      v60 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v57 - *v79) >> 3);
      v61 = v60 + 1;
      if (v60 + 1 > 0x666666666666666)
        goto LABEL_126;
      v62 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v58 - *v79) >> 3);
      if (2 * v62 > v61)
        v61 = 2 * v62;
      if (v62 >= 0x333333333333333)
        v61 = 0x666666666666666;
      v112 = v71;
      if (v61 > 0x666666666666666)
        sub_1C4764EE4();
      v63 = 5 * v61;
      v64 = (char *)operator new(40 * v61);
      v65 = (uint64_t *)&v64[40 * v60];
      v108 = v64;
      v109 = v65;
      *v65 = v45;
      v65[1] = 0;
      v65[2] = 0;
      v65[3] = 0x2800000000;
      v110 = (void **)(v65 + 5);
      v111 = &v64[8 * v63];
      sub_1C6391708(v79, &v108);
      v59 = (_QWORD *)v79[1];
      v67 = v109;
      for (i = (uint64_t *)v110; i != v67; i = sub_1C63915B0(i - 5))
        ;
      if (v108)
        operator delete(v108);
    }
    else
    {
      *v57 = v45;
      v57[1] = 0;
      v59 = v57 + 5;
      v57[2] = 0;
      v57[3] = 0x2800000000;
    }
    v45 = 0;
    v79[1] = (uint64_t)v59;
  }
  else
  {
    v100[0] = "malformed section ";
    v101 = (unint64_t)__s1;
    v102 = v11;
    v103 = 1283;
    v104[0] = v100;
    v105 = ": '";
    v107 = 770;
    v108 = v104;
    v110 = v97;
    LOWORD(v112) = 1026;
    llvm::Twine::str((llvm::Twine *)&v108, &v84);
    if (*(char *)(v47 + 23) < 0)
      operator delete(*(void **)v47);
    *(_OWORD *)v47 = v84;
    *(_QWORD *)(v47 + 16) = v85;
  }
  if (SHIBYTE(v98) < 0)
  {
    operator delete(v97[0]);
    if (!v45)
    {
LABEL_78:
      if (!v50)
        goto LABEL_111;
LABEL_79:
      v51 = sub_1C6241FF4(a3, (unsigned __int8 *)__s1, v11);
      v52 = sub_1C6391774(*v79 + 40 * (*v51)[1] + 8, v78, v76);
      v53 = (uint64_t *)(*sub_1C6391868((uint64_t)(*v52 + 1), v75, v74) + 8);
      v91[0] = 0;
      v91[1] = 0;
      v92 = 0;
      v90 = v96;
      *(_OWORD *)v89 = __dst;
      v54 = llvm::SpecialCaseList::Matcher::insert(v53, (uint64_t)v89, v10, (uint64_t)v91);
      if (SHIBYTE(v90) < 0)
        operator delete(v89[0]);
      a4 = v81;
      v9 = v73;
      if ((v54 & 1) == 0)
      {
        *(_QWORD *)&v84 = "malformed regex in line ";
        v70 = v70 & 0xFFFFFFFF00000000 | v10;
        v85 = v70;
        v86 = 2051;
        v97[0] = &v84;
        v98 = (unint64_t)": '";
        v99 = 770;
        v100[0] = v97;
        v101 = (unint64_t)v77;
        v102 = v72;
        v103 = 1282;
        v104[0] = v100;
        v105 = "': ";
        v107 = 770;
        v108 = v104;
        v110 = v91;
        LOWORD(v112) = 1026;
        llvm::Twine::str((llvm::Twine *)&v108, &v87);
        if (*(char *)(v81 + 23) < 0)
          operator delete(*(void **)v81);
        *(_OWORD *)v81 = v87;
        *(_QWORD *)(v81 + 16) = v88;
      }
      if (SHIBYTE(v92) < 0)
        operator delete(v91[0]);
      if ((v54 & 1) == 0)
        goto LABEL_113;
      goto LABEL_88;
    }
  }
  else if (!v45)
  {
    goto LABEL_78;
  }
  v55 = sub_1C63914CC(v45);
  MEMORY[0x1CAA32FC0](v55, 0x10B0C40A4E19BE4);
  if (v50)
    goto LABEL_79;
LABEL_111:
  if (SHIBYTE(v96) < 0)
    operator delete((void *)__dst);
LABEL_113:
  v7 = 0;
LABEL_114:
  if (v113 != v115)
    free(v113);
  return v7;
}

llvm::Regex *sub_1C5E39E40(llvm::Regex *result, _QWORD *a2)
{
  llvm::Regex *v3;
  _QWORD *v4;
  llvm::Regex *v5;

  v3 = result;
  v4 = (_QWORD *)*((_QWORD *)result + 1);
  while (v4 != a2)
  {
    v5 = (llvm::Regex *)*(v4 - 2);
    v4 -= 2;
    result = v5;
    *v4 = 0;
    if (v5)
    {
      llvm::Regex::~Regex(result);
      result = (llvm::Regex *)MEMORY[0x1CAA32FC0]();
    }
  }
  *((_QWORD *)v3 + 1) = a2;
  return result;
}

void sub_1C5E39EAC(void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = sub_1C63915B0(v4 - 5);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unint64_t llvm::getStableStringHash(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;

  v2 = 0xB0EEF52375EF8302;
  v3 = 0xA0E4E32062FF891CLL;
  v4 = 0x1533771C85ACA6D4;
  v5 = 0xA257D1C9BBAB1C0;
  v6 = &a1[a2 - (a2 & 7)];
  v7 = a2 << 56;
  if (v6 == a1)
  {
    v6 = a1;
  }
  else
  {
    do
    {
      v3 ^= *(_QWORD *)a1;
      v8 = 1;
      do
      {
        v9 = v8;
        v10 = v2 + v5;
        v11 = v10 ^ __ROR8__(v2, 51);
        v12 = v4 + v3;
        v13 = __ROR8__(v3, 48);
        v5 = (v12 ^ v13) + __ROR8__(v10, 32);
        v3 = v5 ^ __ROR8__(v12 ^ v13, 43);
        v14 = v12 + v11;
        v2 = v14 ^ __ROR8__(v11, 47);
        v4 = __ROR8__(v14, 32);
        v8 = 0;
      }
      while ((v9 & 1) != 0);
      v5 ^= *(_QWORD *)a1;
      a1 += 8;
    }
    while (a1 != v6);
  }
  switch(a2 & 7)
  {
    case 1:
      goto LABEL_14;
    case 2:
      goto LABEL_13;
    case 3:
      goto LABEL_12;
    case 4:
      goto LABEL_11;
    case 5:
      goto LABEL_10;
    case 6:
      goto LABEL_9;
    case 7:
      v7 |= (unint64_t)v6[6] << 48;
LABEL_9:
      v7 |= (unint64_t)v6[5] << 40;
LABEL_10:
      v7 |= (unint64_t)v6[4] << 32;
LABEL_11:
      v7 |= (unint64_t)v6[3] << 24;
LABEL_12:
      v7 |= (unint64_t)v6[2] << 16;
LABEL_13:
      v7 |= (unint64_t)v6[1] << 8;
LABEL_14:
      v7 |= *v6;
      break;
    default:
      break;
  }
  v15 = v7 ^ v3;
  v16 = 1;
  do
  {
    v17 = v16;
    v18 = v2 + v5;
    v19 = v18 ^ __ROR8__(v2, 51);
    v20 = v4 + v15;
    v21 = __ROR8__(v15, 48);
    v5 = (v20 ^ v21) + __ROR8__(v18, 32);
    v15 = v5 ^ __ROR8__(v20 ^ v21, 43);
    v22 = v20 + v19;
    v2 = v22 ^ __ROR8__(v19, 47);
    v4 = __ROR8__(v22, 32);
    v16 = 0;
  }
  while ((v17 & 1) != 0);
  v23 = v5 ^ v7;
  v24 = v4 ^ 0xFF;
  v25 = 4;
  do
  {
    v26 = v2 + v23;
    v27 = v26 ^ __ROR8__(v2, 51);
    v28 = v24 + v15;
    v29 = v28 ^ __ROR8__(v15, 48);
    v23 = v29 + __ROR8__(v26, 32);
    v15 = v23 ^ __ROR8__(v29, 43);
    v30 = v28 + v27;
    v2 = v30 ^ __ROR8__(v27, 47);
    v24 = __ROR8__(v30, 32);
    --v25;
  }
  while (v25);
  return v2 ^ v24 ^ __ROR8__(v29, 43);
}

unint64_t llvm::getPointerAuthStringDiscriminator(unsigned __int8 *a1, uint64_t a2)
{
  return llvm::getStableStringHash(a1, a2) % 0xFFFF + 1;
}

uint64_t llvm::AreStatisticsEnabled(llvm *this)
{
  return byte_1ED836D79 & 1 | (byte_1EF8F7308 != 0);
}

void llvm::PrintStatistics(llvm *this, llvm::raw_ostream *a2)
{
  const char ***v4;
  const char ***v5;
  unsigned int v6;
  unsigned int v7;
  const char **v8;
  unint64_t v9;
  char *v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  _DWORD *v17;
  void *v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  uint64_t v22;
  const char ***v23;
  const char ***v24;
  uint64_t *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  const char *v30;
  const char *v31;
  unint64_t v32;
  void *__p;
  const char *v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (!atomic_load(qword_1ED836D98))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836D98, (void *(*)(void))sub_1C5E3B400, (void (*)(void *))sub_1C5E3B474);
  v4 = *(const char ****)qword_1ED836D98[0];
  v5 = *(const char ****)(qword_1ED836D98[0] + 8);
  v32 = qword_1ED836D98[0];
  if (*(const char ****)qword_1ED836D98[0] == v5)
  {
    v7 = 0;
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = *v4;
      v9 = *((unsigned int *)*v4 + 6);
      if ((_DWORD)v9)
      {
        v10 = (char *)&v41;
        do
        {
          *--v10 = (v9 % 0xA) | 0x30;
          v11 = v9 > 9;
          v9 /= 0xAuLL;
        }
        while (v11);
      }
      else
      {
        v40 = 48;
        v10 = &v40;
      }
      sub_1C4E61270(&__p, v10, (char *)&v41, (char *)&v41 - v10);
      v12 = v34;
      if (v36 >= 0)
        v12 = HIBYTE(v36);
      if (v7 <= v12)
        v7 = v12;
      if (SHIBYTE(v36) < 0)
        operator delete(__p);
      v13 = strlen(*v8);
      if (v6 <= v13)
        v6 = v13;
      ++v4;
    }
    while (v4 != v5);
  }
  sub_1C5E3A4FC((const char ****)v32);
  v14 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v14) > 2)
  {
    *(_BYTE *)(v14 + 2) = 61;
    *(_WORD *)v14 = 15677;
    *((_QWORD *)this + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(this, "===", 3uLL);
  }
  v15 = operator new(0x50uLL);
  *(_QWORD *)&v16 = 0x2D2D2D2D2D2D2D2DLL;
  *((_QWORD *)&v16 + 1) = 0x2D2D2D2D2D2D2D2DLL;
  *v15 = v16;
  v15[1] = v16;
  v15[2] = v16;
  v15[3] = v16;
  *(_OWORD *)((char *)v15 + 57) = v16;
  *((_BYTE *)v15 + 73) = 0;
  llvm::raw_ostream::write(this, (const char *)v15, 0x49uLL);
  v17 = (_DWORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v17 > 3uLL)
  {
    *v17 = 171785533;
    v18 = (void *)(*((_QWORD *)this + 4) + 4);
    *((_QWORD *)this + 4) = v18;
  }
  else
  {
    llvm::raw_ostream::write(this, "===\n", 4uLL);
    v18 = (void *)*((_QWORD *)this + 4);
  }
  if (*((_QWORD *)this + 3) - (_QWORD)v18 > 0x36uLL)
  {
    qmemcpy(v18, "                          ... Statistics Collected ...\n", 55);
    v19 = *((_QWORD *)this + 4) + 55;
    *((_QWORD *)this + 4) = v19;
  }
  else
  {
    llvm::raw_ostream::write(this, "                          ... Statistics Collected ...\n", 0x37uLL);
    v19 = *((_QWORD *)this + 4);
  }
  if ((unint64_t)(*((_QWORD *)this + 3) - v19) > 2)
  {
    *(_BYTE *)(v19 + 2) = 61;
    *(_WORD *)v19 = 15677;
    *((_QWORD *)this + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(this, "===", 3uLL);
  }
  v20 = operator new(0x50uLL);
  *(_QWORD *)&v21 = 0x2D2D2D2D2D2D2D2DLL;
  *((_QWORD *)&v21 + 1) = 0x2D2D2D2D2D2D2D2DLL;
  *v20 = v21;
  v20[1] = v21;
  v20[2] = v21;
  v20[3] = v21;
  *(_OWORD *)((char *)v20 + 57) = v21;
  *((_BYTE *)v20 + 73) = 0;
  llvm::raw_ostream::write(this, (const char *)v20, 0x49uLL);
  v22 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v22) > 4)
  {
    *(_BYTE *)(v22 + 4) = 10;
    *(_DWORD *)v22 = 171785533;
    *((_QWORD *)this + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(this, "===\n\n", 5uLL);
  }
  operator delete(v20);
  operator delete(v15);
  v23 = *(const char ****)v32;
  v24 = *(const char ****)(v32 + 8);
  if (*(const char ****)v32 != v24)
  {
    do
    {
      v25 = (uint64_t *)*v23++;
      v26 = *((_DWORD *)v25 + 6);
      v27 = *v25;
      v28 = v25[2];
      __p = &off_1E81A2808;
      v34 = "%*u %-*s - %s\n";
      v35 = v7;
      v36 = v26;
      v37 = v6;
      v38 = v27;
      v39 = v28;
      llvm::raw_ostream::operator<<(this, (uint64_t)&__p);
    }
    while (v23 != v24);
  }
  v29 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v29 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this, 10);
  }
  else
  {
    *((_QWORD *)this + 4) = v29 + 1;
    *v29 = 10;
  }
  v30 = (const char *)*((_QWORD *)this + 4);
  v31 = (const char *)*((_QWORD *)this + 2);
  if (v30 != v31)
  {
    *((_QWORD *)this + 4) = v31;
    llvm::raw_ostream::flush_tied_then_write(this, v31, v30 - v31);
  }
}

void sub_1C5E3A4FC(const char ****a1)
{
  const char ***v1;
  const char ***v2;
  uint64_t v3;
  unint64_t v4;
  const std::nothrow_t *v5;
  unint64_t v6;
  const char ***v7;
  BOOL v8;
  const char ***v9;

  v1 = *a1;
  v2 = a1[1];
  v3 = (char *)v2 - (char *)*a1;
  v4 = v3 >> 3;
  if (v3 < 1025)
  {
LABEL_5:
    sub_1C5E3A8A0(v1, v2, v4, 0, 0);
  }
  else
  {
    v5 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v6 = v3 >> 3;
    while (1)
    {
      v7 = (const char ***)operator new(8 * v6, v5);
      if (v7)
        break;
      v8 = v6 > 1;
      v6 >>= 1;
      if (!v8)
        goto LABEL_5;
    }
    v9 = v7;
    sub_1C5E3A8A0(v1, v2, v4, v7, v6);
    operator delete(v9);
  }
}

void llvm::GetStatistics(const char ***a1@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  const char **v7;
  const char *v8;
  int v9;
  unint64_t v10;
  size_t v11;
  const char **v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  const char **v18;
  const char **v19;
  size_t v20;
  char *v21;
  __int128 v22;
  std::recursive_mutex *v23;
  uint64_t v24;

  if (!atomic_load(qword_1ED836D80))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836D80, (void *(*)(void))sub_1C6246890, (void (*)(void *))sub_1C62468D0);
  v23 = (std::recursive_mutex *)qword_1ED836D80[0];
  std::recursive_mutex::lock((std::recursive_mutex *)qword_1ED836D80[0]);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (!atomic_load(qword_1ED836D98))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836D98, (void *(*)(void))sub_1C5E3B400, (void (*)(void *))sub_1C5E3B474);
  v6 = *(_QWORD *)qword_1ED836D98[0];
  v5 = *(_QWORD *)(qword_1ED836D98[0] + 8);
  if (*(_QWORD *)qword_1ED836D98[0] != v5)
  {
    v7 = a1[1];
    v24 = *(_QWORD *)(qword_1ED836D98[0] + 8);
    do
    {
      v8 = *(const char **)(*(_QWORD *)v6 + 8);
      v9 = *(_DWORD *)(*(_QWORD *)v6 + 24);
      v10 = (unint64_t)a1[2];
      if ((unint64_t)v7 >= v10)
      {
        v12 = *a1;
        v13 = 0xAAAAAAAAAAAAAAABLL * (v7 - *a1);
        v14 = v13 + 1;
        if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)v12) >> 3);
        if (2 * v15 > v14)
          v14 = 2 * v15;
        if (v15 >= 0x555555555555555)
          v16 = 0xAAAAAAAAAAAAAAALL;
        else
          v16 = v14;
        if (v16)
        {
          if (v16 > 0xAAAAAAAAAAAAAAALL)
            sub_1C4764EE4();
          v17 = operator new(24 * v16);
        }
        else
        {
          v17 = 0;
        }
        v19 = (const char **)&v17[6 * v13];
        *v19 = v8;
        if (v8)
          v20 = strlen(v8);
        else
          v20 = 0;
        v19[1] = (const char *)v20;
        v17[6 * v13 + 4] = v9;
        v21 = (char *)&v17[6 * v13];
        if (v7 != v12)
        {
          do
          {
            v22 = *(_OWORD *)(v7 - 3);
            *((_QWORD *)v21 - 1) = *(v7 - 1);
            *(_OWORD *)(v21 - 24) = v22;
            v21 -= 24;
            v7 -= 3;
          }
          while (v7 != v12);
          v7 = *a1;
        }
        v18 = v19 + 3;
        *a1 = (const char **)v21;
        a1[1] = v18;
        a1[2] = (const char **)&v17[6 * v16];
        if (v7)
          operator delete(v7);
        v5 = v24;
      }
      else
      {
        *v7 = v8;
        if (v8)
          v11 = strlen(v8);
        else
          v11 = 0;
        v7[1] = (const char *)v11;
        *((_DWORD *)v7 + 4) = v9;
        v18 = v7 + 3;
      }
      a1[1] = v18;
      v6 += 8;
      v7 = v18;
    }
    while (v6 != v5);
  }
  std::recursive_mutex::unlock(v23);
}

void llvm::ResetStatistics(llvm *this)
{
  uint64_t v2;
  std::recursive_mutex *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  if (!atomic_load(qword_1ED836D98))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836D98, (void *(*)(void))sub_1C5E3B400, (void (*)(void *))sub_1C5E3B474);
  v2 = qword_1ED836D98[0];
  if (!atomic_load(qword_1ED836D80))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836D80, (void *(*)(void))sub_1C6246890, (void (*)(void *))sub_1C62468D0);
  v4 = (std::recursive_mutex *)qword_1ED836D80[0];
  std::recursive_mutex::lock((std::recursive_mutex *)qword_1ED836D80[0]);
  v5 = *(uint64_t **)v2;
  v6 = *(uint64_t **)(v2 + 8);
  if (*(uint64_t **)v2 != v6)
  {
    do
    {
      v7 = *v5++;
      atomic_store(0, (unsigned __int8 *)(v7 + 28));
      atomic_store(0, (unsigned int *)(v7 + 24));
    }
    while (v5 != v6);
    v5 = *(uint64_t **)v2;
  }
  *(_QWORD *)(v2 + 8) = v5;
  std::recursive_mutex::unlock(v4);
}

const char ***sub_1C5E3A8A0(const char ***result, const char ***a2, unint64_t a3, const char ***a4, uint64_t a5)
{
  const char ***v6;
  const char **v7;
  const char **v8;
  const char ***v10;
  uint64_t v11;
  const char ***v12;
  const char **v13;
  const char **v14;
  uint64_t v15;
  const char ***v16;
  const char ***v18;
  unint64_t v19;
  const char ***v20;
  unint64_t v21;
  const char ***v22;
  const char ***v23;
  const char ***v24;
  const char ***v25;
  const char **v26;
  const char **v27;
  const char **v28;
  uint64_t v29;
  char v30;
  const char ***v31;
  uint64_t v32;

  if (a3 < 2)
    return result;
  v6 = result;
  if (a3 == 2)
  {
    v7 = *(a2 - 1);
    v8 = *result;
    result = (const char ***)strcmp(*v7, **result);
    if (!(_DWORD)result)
    {
      result = (const char ***)strcmp(v7[1], v8[1]);
      if (!(_DWORD)result)
        result = (const char ***)strcmp(v7[2], v8[2]);
    }
    if ((result & 0x80000000) != 0)
    {
      *v6 = v7;
      *(a2 - 1) = v8;
    }
    return result;
  }
  if ((uint64_t)a3 <= 128)
  {
    if (result == a2)
      return result;
    v10 = result + 1;
    if (result + 1 == a2)
      return result;
    v11 = 0;
    v12 = result;
    while (1)
    {
      v13 = *v12;
      v12 = v10;
      v14 = *v10;
      result = (const char ***)strcmp(**v10, *v13);
      if ((_DWORD)result || (result = (const char ***)strcmp(v14[1], v13[1]), (_DWORD)result))
      {
        if ((result & 0x80000000) != 0)
          goto LABEL_15;
      }
      else
      {
        result = (const char ***)strcmp(v14[2], v13[2]);
        if ((result & 0x80000000) != 0)
        {
LABEL_15:
          v15 = v11;
          while (1)
          {
            *(const char ***)((char *)v6 + v15 + 8) = v13;
            if (!v15)
              break;
            v13 = *(const char ***)((char *)v6 + v15 - 8);
            result = (const char ***)strcmp(*v14, *v13);
            if (!(_DWORD)result)
            {
              result = (const char ***)strcmp(v14[1], v13[1]);
              if (!(_DWORD)result)
                result = (const char ***)strcmp(v14[2], v13[2]);
            }
            v15 -= 8;
            if ((result & 0x80000000) == 0)
            {
              v16 = (const char ***)((char *)v6 + v15 + 8);
              goto LABEL_23;
            }
          }
          v16 = v6;
LABEL_23:
          *v16 = v14;
        }
      }
      v10 = v12 + 1;
      v11 += 8;
      if (v12 + 1 == a2)
        return result;
    }
  }
  v18 = a4;
  v19 = a3 >> 1;
  v20 = &result[a3 >> 1];
  v21 = a3 >> 1;
  if ((uint64_t)a3 <= a5)
  {
    sub_1C5E3AB68(result, v20, v21, a4);
    v22 = &v18[v19];
    result = sub_1C5E3AB68(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v22);
    v23 = &v18[a3];
    v24 = v22;
    while (v24 != v23)
    {
      v25 = v24;
      v26 = *v24;
      v27 = *v18;
      result = (const char ***)strcmp(**v24, **v18);
      if (!(_DWORD)result)
      {
        result = (const char ***)strcmp(v26[1], v27[1]);
        if (!(_DWORD)result)
          result = (const char ***)strcmp(v26[2], v27[2]);
      }
      if ((int)result < 0)
        v28 = v26;
      else
        v28 = v27;
      v18 += (int)result >= 0;
      v24 = &v25[result >> 31];
      *v6++ = v28;
      if (v18 == v22)
      {
        if (v24 != v23)
        {
          v29 = 0;
          if ((int)result < 0)
            v30 = 1;
          else
            v30 = 2;
          v31 = &v25[v30 & 1];
          do
          {
            v6[v29] = v31[v29];
            ++v29;
          }
          while (&v31[v29] != v23);
        }
        return result;
      }
    }
    if (v18 != v22)
    {
      v32 = 0;
      do
      {
        v6[v32] = v18[v32];
        ++v32;
      }
      while (&v18[v32] != v22);
    }
  }
  else
  {
    sub_1C5E3A8A0(result, v20, v21, a4, a5);
    sub_1C5E3A8A0(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v18, a5);
    return (const char ***)sub_1C5E3AE04((uint64_t)v6, &v6[a3 >> 1], a2, a3 >> 1, a3 - (a3 >> 1), v18, a5);
  }
  return result;
}

const char ***sub_1C5E3AB68(const char ***result, const char ***a2, unint64_t a3, const char ***a4)
{
  const char ***v4;
  const char ***v6;
  const char ***v8;
  const char **v9;
  const char **v10;
  const char **v11;
  const char ***v12;
  uint64_t v13;
  const char ***v14;
  const char ***v15;
  const char **v16;
  const char **v17;
  const char **v18;
  const char ***v19;
  uint64_t v20;
  const char **v21;
  const char **v22;
  const char ***v23;
  const char ***v24;
  const char ***v25;
  const char **v26;
  const char **v27;
  const char **v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  if (a3)
  {
    v4 = a4;
    v6 = result;
    if (a3 == 1)
    {
LABEL_12:
      *v4 = *v6;
      return result;
    }
    if (a3 == 2)
    {
      v8 = a2 - 1;
      v9 = *(a2 - 1);
      v10 = *result;
      result = (const char ***)strcmp(*v9, **result);
      if (!(_DWORD)result)
      {
        result = (const char ***)strcmp(v9[1], v10[1]);
        if (!(_DWORD)result)
          result = (const char ***)strcmp(v9[2], v10[2]);
      }
      if ((int)result >= 0)
        v11 = v10;
      else
        v11 = v9;
      *v4++ = v11;
      if ((int)result >= 0)
        v6 = v8;
      goto LABEL_12;
    }
    if ((uint64_t)a3 > 8)
    {
      v23 = &result[a3 >> 1];
      sub_1C5E3A8A0(result, v23, a3 >> 1, a4, a3 >> 1);
      result = (const char ***)sub_1C5E3A8A0(&v6[a3 >> 1], a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      v24 = &v6[a3 >> 1];
      while (v24 != a2)
      {
        v25 = v24;
        v26 = *v24;
        v27 = *v6;
        result = (const char ***)strcmp(**v24, **v6);
        if (!(_DWORD)result)
        {
          result = (const char ***)strcmp(v26[1], v27[1]);
          if (!(_DWORD)result)
            result = (const char ***)strcmp(v26[2], v27[2]);
        }
        if ((int)result < 0)
          v28 = v26;
        else
          v28 = v27;
        v24 = &v25[result >> 31];
        v6 += (int)result >= 0;
        *v4++ = v28;
        if (v6 == v23)
        {
          if (v24 != a2)
          {
            v29 = 0;
            v30 = (char *)v25 + ((result >> 28) & 8);
            do
            {
              v4[v29] = *(const char ***)&v30[v29 * 8];
              ++v29;
            }
            while (&v30[v29 * 8] != (char *)a2);
          }
          return result;
        }
      }
      if (v6 != v23)
      {
        v31 = 0;
        do
        {
          v4[v31] = v6[v31];
          ++v31;
        }
        while (&v6[v31] != v23);
      }
    }
    else if (result != a2)
    {
      v12 = result + 1;
      *a4 = *result;
      if (result + 1 != a2)
      {
        v13 = 0;
        v14 = a4;
        v15 = a4;
        do
        {
          v17 = *v15++;
          v16 = v17;
          v18 = *v12;
          result = (const char ***)strcmp(**v12, *v17);
          if ((_DWORD)result || (result = (const char ***)strcmp(v18[1], v16[1]), (_DWORD)result))
          {
            if ((result & 0x80000000) != 0)
              goto LABEL_23;
          }
          else
          {
            result = (const char ***)strcmp(v18[2], v16[2]);
            if ((result & 0x80000000) != 0)
            {
LABEL_23:
              v14[1] = v16;
              v19 = v4;
              if (v14 != v4)
              {
                v20 = v13;
                while (1)
                {
                  v21 = *v12;
                  v22 = *(const char ***)((char *)v4 + v20 - 8);
                  result = (const char ***)strcmp(**v12, *v22);
                  if (!(_DWORD)result)
                  {
                    result = (const char ***)strcmp(v21[1], v22[1]);
                    if (!(_DWORD)result)
                      result = (const char ***)strcmp(v21[2], v22[2]);
                  }
                  if ((result & 0x80000000) == 0)
                    break;
                  *(const char ***)((char *)v4 + v20) = v22;
                  v20 -= 8;
                  if (!v20)
                  {
                    v19 = v4;
                    goto LABEL_32;
                  }
                }
                v19 = (const char ***)((char *)v4 + v20);
              }
LABEL_32:
              *v19 = *v12;
              goto LABEL_33;
            }
          }
          *v15 = v18;
LABEL_33:
          ++v12;
          v13 += 8;
          v14 = v15;
        }
        while (v12 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1C5E3AE04(uint64_t result, const char ***a2, const char ***a3, uint64_t a4, uint64_t a5, const char ***a6, uint64_t a7)
{
  const char ***v11;
  uint64_t v12;
  const char **v13;
  const char *v14;
  uint64_t v15;
  const char **v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char ***v22;
  const char ***v23;
  unint64_t v24;
  const char **v25;
  const char *v26;
  const char ***v27;
  const char ***v28;
  const char **v29;
  int v30;
  const char ***v31;
  unint64_t v32;
  const char **v33;
  const char *v34;
  const char ***v35;
  const char **v36;
  int v37;
  uint64_t v38;
  const char ***v39;
  uint64_t v40;
  BOOL v41;
  const char ***v42;
  const char ***v43;
  const char **v44;
  uint64_t v45;
  const char **v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char **v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char ***v55;
  const char **v56;
  const char **v57;
  const char ***v58;
  const char ***v59;
  const char ***v60;
  const char ***v61;
  BOOL v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char ***v68;
  const char ***i;
  const char ***v70;
  const char **v71;
  const char **v72;
  const char **v73;
  uint64_t v74;
  const char ***v75;
  const char **v76;
  const char **v77;
  const char **v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char ***v82;
  const char ***v83;
  const char ***v84;
  const char ***v85;
  const char ***v86;
  const char ***v87;
  uint64_t v88;
  uint64_t v89;

  v89 = a5;
  if (a5)
  {
    v11 = (const char ***)result;
    while (a4 > a7 && v89 > a7)
    {
      if (!a4)
        return result;
      v12 = 0;
      v13 = *a2;
      v14 = **a2;
      v15 = -a4;
      while (1)
      {
        v16 = v11[v12];
        result = strcmp(v14, *v16);
        if (!(_DWORD)result)
        {
          result = strcmp(v13[1], v16[1]);
          if (!(_DWORD)result)
            result = strcmp(v13[2], v16[2]);
        }
        if ((result & 0x80000000) != 0)
          break;
        ++v12;
        if (__CFADD__(v15++, 1))
          return result;
      }
      v18 = -v15;
      v19 = v89;
      v87 = a3;
      v88 = a7;
      v82 = &v11[v12];
      if (-v15 >= v89)
      {
        if (v15 == -1)
        {
          v11[v12] = v13;
          *a2 = v16;
          return result;
        }
        v84 = v11;
        v86 = a6;
        if (v15 > 0)
          v18 = 1 - v15;
        v81 = v18 >> 1;
        v31 = a3;
        v27 = &(&v11[v18 >> 1])[v12];
        v23 = v31;
        if (v31 != a2)
        {
          v32 = v31 - a2;
          v33 = *v27;
          v34 = **v27;
          v23 = a2;
          do
          {
            v35 = &v23[v32 >> 1];
            v36 = *v35;
            v37 = strcmp(**v35, v34);
            if (!v37)
            {
              v37 = strcmp(v36[1], v33[1]);
              if (!v37)
                v37 = strcmp(v36[2], v33[2]);
            }
            if (v37 >= 0)
              v32 >>= 1;
            else
              v32 += ~(v32 >> 1);
            if (v37 < 0)
              v23 = v35 + 1;
          }
          while (v32);
        }
        v19 = v89;
        v22 = a2;
        v21 = v23 - a2;
        v11 = v84;
        a6 = v86;
        v38 = v81;
      }
      else
      {
        if (v89 >= 0)
          v20 = v89;
        else
          v20 = v89 + 1;
        v21 = v20 >> 1;
        v22 = a2;
        v23 = &a2[v20 >> 1];
        if (&v11[v12] == a2)
        {
          v27 = a2;
        }
        else
        {
          v80 = v20 >> 1;
          v83 = v11;
          v85 = a6;
          v24 = ((char *)a2 - (char *)v11 - v12 * 8) >> 3;
          v25 = *v23;
          v26 = **v23;
          v27 = &v11[v12];
          do
          {
            v28 = &v27[v24 >> 1];
            v29 = *v28;
            v30 = strcmp(v26, **v28);
            if (!v30)
            {
              v30 = strcmp(v25[1], v29[1]);
              if (!v30)
                v30 = strcmp(v25[2], v29[2]);
            }
            if (v30 < 0)
            {
              v24 >>= 1;
            }
            else
            {
              v27 = v28 + 1;
              v24 += ~(v24 >> 1);
            }
          }
          while (v24);
          v11 = v83;
          a6 = v85;
          v19 = v89;
          v22 = a2;
          v21 = v80;
        }
        v38 = ((char *)v27 - (char *)v11 - v12 * 8) >> 3;
      }
      v39 = v23;
      if (v27 != v22)
      {
        v39 = v27;
        if (v22 != v23)
        {
          if (v27 + 1 == v22)
          {
            v45 = v21;
            v46 = *v27;
            v47 = (char *)v23 - (char *)v22;
            v48 = v38;
            memmove(v27, v22, (char *)v23 - (char *)v22);
            v38 = v48;
            v39 = (const char ***)((char *)v27 + v47);
            *v39 = v46;
            v21 = v45;
            v19 = v89;
          }
          else if (v22 + 1 == v23)
          {
            v49 = v21;
            v50 = *(v23 - 1);
            v39 = v27 + 1;
            if (v23 - 1 != v27)
            {
              v51 = v38;
              memmove(v27 + 1, v27, (char *)(v23 - 1) - (char *)v27);
              v38 = v51;
            }
            *v27 = v50;
            v19 = v89;
            v21 = v49;
          }
          else
          {
            v40 = v22 - v27;
            if (v40 == v23 - v22)
            {
              v41 = v22 == v23 || v27 == v22;
              if (!v41)
              {
                v42 = v27 + 1;
                v43 = v22 + 1;
                do
                {
                  v44 = *(v42 - 1);
                  *(v42 - 1) = *(v43 - 1);
                  *(v43 - 1) = v44;
                  if (v42 == v22)
                    break;
                  ++v42;
                  v41 = v43++ == v23;
                }
                while (!v41);
              }
              v39 = v22;
            }
            else
            {
              v52 = v23 - v22;
              v53 = v22 - v27;
              do
              {
                v54 = v53;
                v53 = v52;
                v52 = v54 % v52;
              }
              while (v52);
              if (v53)
              {
                v55 = &v27[v53];
                do
                {
                  v57 = *--v55;
                  v56 = v57;
                  v58 = &v55[v40];
                  v59 = v55;
                  do
                  {
                    v60 = v58;
                    *v59 = *v58;
                    v61 = &v58[v40];
                    v62 = __OFSUB__(v40, v23 - v58);
                    v64 = v40 - (v23 - v58);
                    v63 = (v64 < 0) ^ v62;
                    v58 = &v27[v64];
                    if (v63)
                      v58 = v61;
                    v59 = v60;
                  }
                  while (v58 != v55);
                  *v60 = v56;
                }
                while (v55 != v27);
              }
              v39 = &v27[v23 - v22];
            }
          }
        }
      }
      a4 = -(v38 + v15);
      v65 = v19 - v21;
      if (v38 + v21 >= v19 - (v38 + v21) - v15)
      {
        v66 = v38;
        result = sub_1C5E3AE04(v39, v23, v87, -(v38 + v15), v19 - v21, a6, v88);
        v23 = v27;
        v65 = v21;
        a4 = v66;
        a3 = v39;
        v11 = v82;
      }
      else
      {
        result = sub_1C5E3AE04(&v11[v12], v27, v39, v38, v21, a6, v88);
        v11 = v39;
        a3 = v87;
      }
      v89 = v65;
      a2 = v23;
      a7 = v88;
      if (!v65)
        return result;
    }
    if (a4 <= v89)
    {
      if (v11 != a2)
      {
        v74 = 0;
        do
        {
          a6[v74] = v11[v74];
          ++v74;
        }
        while (&v11[v74] != a2);
        if (v74 * 8)
        {
          v75 = a6;
          while (a2 != a3)
          {
            v76 = *a2;
            v77 = *v75;
            result = strcmp(**a2, **v75);
            if (!(_DWORD)result)
            {
              result = strcmp(v76[1], v77[1]);
              if (!(_DWORD)result)
                result = strcmp(v76[2], v77[2]);
            }
            if ((int)result < 0)
              v78 = v76;
            else
              v78 = v77;
            a2 += result >> 31;
            v75 += (int)result >= 0;
            *v11++ = v78;
            if (&a6[v74] == v75)
              return result;
          }
          return (uint64_t)memmove(v11, v75, (char *)a6 - (char *)v75 + v74 * 8);
        }
      }
    }
    else if (a2 != a3)
    {
      v67 = 0;
      do
      {
        a6[v67] = a2[v67];
        ++v67;
      }
      while (&a2[v67] != a3);
      if (v67 * 8)
      {
        v68 = &a6[v67];
        for (i = a3 - 1; ; --i)
        {
          v70 = a2;
          if (a2 == v11)
            break;
          v71 = *(a2 - 1);
          v72 = *(v68 - 1);
          result = strcmp(*v72, *v71);
          if (!(_DWORD)result)
          {
            result = strcmp(v72[1], v71[1]);
            if (!(_DWORD)result)
              result = strcmp(v72[2], v71[2]);
          }
          if ((int)result >= 0)
            v73 = v72;
          else
            v73 = v71;
          if ((int)result < 0)
            v70 = a2 - 1;
          a2 = v70;
          if ((int)result >= 0)
            --v68;
          *i = v73;
          if (v68 == a6)
            return result;
        }
        if (v68 != a6)
        {
          v79 = 0;
          do
          {
            i[v79] = v68[v79 - 1];
            --v79;
          }
          while (&v68[v79] != a6);
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1C5E3B400()
{
  _QWORD *v0;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  v0[2] = 0;
  *v0 = 0;
  if (!atomic_load((unint64_t *)&qword_1ED836E28))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1ED836E28, (void *(*)(void))sub_1C5E477EC, (void (*)(void *))sub_1C5E47824);
  return v0;
}

llvm *sub_1C5E3B474(llvm *result)
{
  llvm *v1;
  void *v2;

  if (result)
  {
    v1 = result;
    if (byte_1EF8F7308 | byte_1ED836D7A)
      llvm::PrintStatistics(result);
    v2 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *((_QWORD *)v1 + 1) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

uint64_t llvm::StrInStrNoCase(uint64_t a1, unint64_t a2, unsigned __int8 *a3, unint64_t a4)
{
  unint64_t v6;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v15[2];

  if (a4 > a2)
    return -1;
  v6 = a2 + 1 - a4;
  if (a2 + 1 == a4)
    return -1;
  v9 = 0;
  while (1)
  {
    v10 = a2 >= v9 ? v9 : a2;
    v11 = (unsigned __int8 *)(a1 + v10);
    v12 = a2 - v10;
    v13 = (unsigned __int8 *)(v12 >= a4 ? a4 : v12);
    v15[0] = v11;
    v15[1] = v13;
    if (a4 <= v12 && !llvm::StringRef::compare_insensitive(v15, a3, a4))
      break;
    if (v6 == ++v9)
      return -1;
  }
  return v9;
}

unint64_t llvm::getToken@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unint64_t first_not_of;
  unint64_t result;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v17[2];

  v17[0] = a1;
  v17[1] = a2;
  first_not_of = llvm::StringRef::find_first_not_of(v17, a3, a4, 0);
  result = llvm::StringRef::find_first_of(v17, a3, a4, first_not_of);
  if (a2 >= first_not_of)
    v12 = first_not_of;
  else
    v12 = a2;
  if (v12 <= result)
    v13 = result;
  else
    v13 = v12;
  if (a2 < v13)
    v13 = a2;
  v14 = a1 + v12;
  v15 = v13 - v12;
  if (a2 >= result)
    v16 = result;
  else
    v16 = a2;
  *a5 = v14;
  a5[1] = v15;
  a5[2] = a1 + v16;
  a5[3] = a2 - v16;
  return result;
}

unint64_t llvm::SplitString(uint64_t a1, unint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  unint64_t first_not_of;
  unint64_t result;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v25 = a1;
  v26 = a2;
  first_not_of = llvm::StringRef::find_first_not_of(&v25, a4, a5, 0);
  result = llvm::StringRef::find_first_of(&v25, a4, a5, first_not_of);
  if (a2 >= first_not_of)
    v12 = first_not_of;
  else
    v12 = a2;
  if (v12 <= result)
    v13 = result;
  else
    v13 = v12;
  if (a2 < v13)
    v13 = a2;
  v14 = v13 - v12;
  if (v13 != v12)
  {
    v15 = a1 + v12;
    if (a2 >= result)
      v16 = result;
    else
      v16 = a2;
    v17 = a1 + v16;
    v18 = a2 - v16;
    v19 = *(_DWORD *)(a3 + 8);
    do
    {
      if (v19 >= *(_DWORD *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v19 + 1, 16);
        v19 = *(_DWORD *)(a3 + 8);
      }
      v20 = (_QWORD *)(*(_QWORD *)a3 + 16 * v19);
      *v20 = v15;
      v20[1] = v14;
      v19 = *(_DWORD *)(a3 + 8) + 1;
      *(_DWORD *)(a3 + 8) = v19;
      v25 = v17;
      v26 = v18;
      v21 = llvm::StringRef::find_first_not_of(&v25, a4, a5, 0);
      result = llvm::StringRef::find_first_of(&v25, a4, a5, v21);
      if (v18 >= v21)
        v22 = v21;
      else
        v22 = v18;
      if (v22 <= result)
        v23 = result;
      else
        v23 = v22;
      if (v18 < v23)
        v23 = v18;
      v15 = v17 + v22;
      if (v18 >= result)
        v24 = result;
      else
        v24 = v18;
      v17 += v24;
      v18 -= v24;
      v14 = v23 - v22;
    }
    while (v23 != v22);
  }
  return result;
}

llvm::raw_ostream *llvm::printEscapedString(llvm::raw_ostream *result, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t v4;
  char *v5;
  unint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  llvm::raw_ostream *v9;
  char v10;
  char v11;
  char *v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;

  if (a2)
  {
    v4 = a2;
    v5 = (char *)result;
    do
    {
      v6 = *v5;
      if (v6 == 92)
      {
        v14 = (_BYTE *)*((_QWORD *)a3 + 4);
        if ((unint64_t)v14 < *((_QWORD *)a3 + 3))
        {
          *((_QWORD *)a3 + 4) = v14 + 1;
          *v14 = 92;
        }
        else
        {
          result = llvm::raw_ostream::write(a3, 92);
        }
        v15 = (_BYTE *)*((_QWORD *)a3 + 4);
        if ((unint64_t)v15 < *((_QWORD *)a3 + 3))
        {
          *((_QWORD *)a3 + 4) = v15 + 1;
          *v15 = 92;
          goto LABEL_9;
        }
        v9 = a3;
        v10 = 92;
      }
      else
      {
        v8 = *((_QWORD *)a3 + 3);
        v7 = (_BYTE *)*((_QWORD *)a3 + 4);
        if ((_DWORD)v6 == 34 || (v6 - 32) > 0x5Eu)
        {
          if ((unint64_t)v7 < v8)
          {
            *((_QWORD *)a3 + 4) = v7 + 1;
            *v7 = 92;
          }
          else
          {
            result = llvm::raw_ostream::write(a3, 92);
          }
          v11 = a0123456789abcd_6[v6 >> 4];
          v12 = (char *)*((_QWORD *)a3 + 4);
          if ((unint64_t)v12 < *((_QWORD *)a3 + 3))
          {
            *((_QWORD *)a3 + 4) = v12 + 1;
            *v12 = v11;
          }
          else
          {
            result = llvm::raw_ostream::write(a3, v11);
          }
          v10 = a0123456789abcd_6[v6 & 0xF];
          v13 = (char *)*((_QWORD *)a3 + 4);
          if ((unint64_t)v13 < *((_QWORD *)a3 + 3))
          {
            *((_QWORD *)a3 + 4) = v13 + 1;
            *v13 = v10;
            goto LABEL_9;
          }
          v9 = a3;
        }
        else
        {
          if ((unint64_t)v7 < v8)
          {
            *((_QWORD *)a3 + 4) = v7 + 1;
            *v7 = v6;
            goto LABEL_9;
          }
          v9 = a3;
          v10 = *v5;
        }
      }
      result = llvm::raw_ostream::write(v9, v10);
LABEL_9:
      ++v5;
      --v4;
    }
    while (v4);
  }
  return result;
}

llvm::raw_ostream *llvm::printHTMLEscaped(llvm::raw_ostream *result, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t v4;
  llvm::raw_ostream *v5;
  unsigned int v6;
  _DWORD *v7;
  llvm::raw_ostream *v8;
  const char *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  _DWORD *v13;
  _BYTE *v14;
  uint64_t v15;
  int v16;

  if (a2)
  {
    v4 = a2;
    v5 = result;
    do
    {
      v6 = *(unsigned __int8 *)v5;
      if (v6 <= 0x26)
      {
        if (v6 == 34)
        {
          v12 = *((_QWORD *)a3 + 4);
          if ((unint64_t)(*((_QWORD *)a3 + 3) - v12) > 5)
          {
            *(_WORD *)(v12 + 4) = 15220;
            v16 = 1869967654;
            goto LABEL_33;
          }
          v8 = a3;
          v9 = "&quot;";
          goto LABEL_20;
        }
        if (v6 != 38)
        {
LABEL_24:
          v14 = (_BYTE *)*((_QWORD *)a3 + 4);
          if ((unint64_t)v14 >= *((_QWORD *)a3 + 3))
          {
            result = llvm::raw_ostream::write(a3, v6);
          }
          else
          {
            *((_QWORD *)a3 + 4) = v14 + 1;
            *v14 = v6;
          }
          goto LABEL_22;
        }
        v10 = *((_QWORD *)a3 + 4);
        if ((unint64_t)(*((_QWORD *)a3 + 3) - v10) > 4)
        {
          *(_BYTE *)(v10 + 4) = 59;
          *(_DWORD *)v10 = 1886216486;
          v15 = *((_QWORD *)a3 + 4) + 5;
LABEL_34:
          *((_QWORD *)a3 + 4) = v15;
          goto LABEL_22;
        }
        v8 = a3;
        v9 = "&amp;";
        v11 = 5;
      }
      else
      {
        switch(v6)
        {
          case '\'':
            v12 = *((_QWORD *)a3 + 4);
            if ((unint64_t)(*((_QWORD *)a3 + 3) - v12) > 5)
            {
              *(_WORD *)(v12 + 4) = 15219;
              v16 = 1869635878;
LABEL_33:
              *(_DWORD *)v12 = v16;
              v15 = *((_QWORD *)a3 + 4) + 6;
              goto LABEL_34;
            }
            v8 = a3;
            v9 = "&apos;";
LABEL_20:
            v11 = 6;
            goto LABEL_21;
          case '<':
            v13 = (_DWORD *)*((_QWORD *)a3 + 4);
            if (*((_QWORD *)a3 + 3) - (_QWORD)v13 > 3uLL)
            {
              *v13 = 997485606;
              goto LABEL_31;
            }
            v8 = a3;
            v9 = "&lt;";
            break;
          case '>':
            v7 = (_DWORD *)*((_QWORD *)a3 + 4);
            if (*((_QWORD *)a3 + 3) - (_QWORD)v7 > 3uLL)
            {
              *v7 = 997484326;
LABEL_31:
              v15 = *((_QWORD *)a3 + 4) + 4;
              goto LABEL_34;
            }
            v8 = a3;
            v9 = "&gt;";
            break;
          default:
            goto LABEL_24;
        }
        v11 = 4;
      }
LABEL_21:
      result = llvm::raw_ostream::write(v8, v9, v11);
LABEL_22:
      v5 = (llvm::raw_ostream *)((char *)v5 + 1);
      --v4;
    }
    while (v4);
  }
  return result;
}

void llvm::convertToSnakeFromCamelCase(char *a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  std::string::value_type v12;
  std::string::value_type v13;

  if (a2)
  {
    v4 = a2;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    std::string::reserve((std::string *)a3, a2);
    v6 = MEMORY[0x1E0C80978];
    while (1)
    {
      v7 = *a1;
      if (*a1 < 0)
      {
        if (__maskrune((char)v7, 0x8000uLL))
        {
LABEL_5:
          v8 = *(_BYTE *)(a3 + 23);
          v9 = v8;
          v10 = v8 & 0x7F;
          if (v9 < 0)
            v10 = *(_QWORD *)(a3 + 8);
          if (v10)
          {
            v11 = v9 >= 0 ? a3 : *(_QWORD *)a3;
            if (*(_BYTE *)(v11 + v10 - 1) != 95)
              std::string::push_back((std::string *)a3, 95);
          }
          if ((v7 - 65) >= 0x1Au)
            v12 = v7;
          else
            v12 = v7 + 32;
          v13 = v12;
          goto LABEL_19;
        }
      }
      else if ((*(_DWORD *)(v6 + 4 * v7 + 60) & 0x8000) != 0)
      {
        goto LABEL_5;
      }
      v13 = v7;
LABEL_19:
      std::string::push_back((std::string *)a3, v13);
      ++a1;
      if (!--v4)
        return;
    }
  }
  *(_BYTE *)(a3 + 23) = 0;
  *(_BYTE *)a3 = 0;
}

void llvm::convertToCamelFromSnakeCase(std::string::value_type *a1@<X0>, std::string::size_type a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  std::string::value_type v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;

  if (!a2)
  {
    *(_BYTE *)(a4 + 23) = 0;
    *(_BYTE *)a4 = 0;
    return;
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  std::string::reserve((std::string *)a4, a2);
  v8 = *a1;
  v9 = *a1;
  if (a3)
  {
    if ((char)v8 < 0)
    {
      v14 = __maskrune((char)v8, 0x1000uLL);
      v9 = *a1;
      if (!v14)
        goto LABEL_7;
    }
    else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v8 + 60) & 0x1000) == 0)
    {
      goto LABEL_7;
    }
    if ((v9 - 97) < 0x1Au)
      v9 -= 32;
  }
LABEL_7:
  std::string::push_back((std::string *)a4, v9);
  if (a2 >= 2)
  {
    v10 = 1;
    v11 = MEMORY[0x1E0C80978];
    do
    {
      v12 = a1[v10];
      if (v10 != a2 - 1 && v12 == 95)
      {
        v13 = a1[v10 + 1];
        if (a1[v10 + 1] < 0)
        {
          if (__maskrune((char)v13, 0x1000uLL))
          {
LABEL_13:
            v12 = a1[v10 + 1];
            if ((v12 - 97) < 0x1A)
              LOBYTE(v12) = v12 - 32;
            ++v10;
            goto LABEL_18;
          }
        }
        else if ((*(_DWORD *)(v11 + 4 * v13 + 60) & 0x1000) != 0)
        {
          goto LABEL_13;
        }
        LOBYTE(v12) = a1[v10];
      }
LABEL_18:
      std::string::push_back((std::string *)a4, v12);
      ++v10;
    }
    while (v10 < a2);
  }
}

uint64_t llvm::StringMapImpl::StringMapImpl(uint64_t this, int a2, int a3)
{
  _QWORD *v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;

  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 20) = a3;
  if (a2)
  {
    v5 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
    v7 = v6 | (v6 >> 8) | ((v6 | (v6 >> 8)) >> 16);
    v8 = v7 + 1;
    v10 = this;
    v9 = sub_1C5074000(v7 + 2, 0xCuLL);
    v4 = v8;
    v3 = v9;
    this = v10;
    v3[v8] = 2;
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  *(_QWORD *)this = v3;
  *(_DWORD *)(this + 8) = v4;
  return this;
}

{
  _QWORD *v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 20) = a3;
  if (a2)
  {
    v9 = this;
    v5 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
    v7 = v6 | (v6 >> 8) | ((v6 | (v6 >> 8)) >> 16);
    v8 = malloc_type_calloc(v7 + 2, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v8)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v3 = v8;
    v4 = v7 + 1;
    v8[(v7 + 1)] = 2;
    this = v9;
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  *(_QWORD *)this = v3;
  *(_DWORD *)(this + 8) = v4;
  return this;
}

uint64_t llvm::StringMapImpl::LookupBucketFor(uint64_t *a1, unsigned __int8 *a2, size_t a3)
{
  unsigned int v6;
  int v7;
  size_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v21;

  v6 = *((_DWORD *)a1 + 2);
  if (!v6)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    v21 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v21)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v21[16] = 2;
    *a1 = (uint64_t)v21;
    v6 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  v7 = 0;
  if (a3)
  {
    v8 = a3;
    v9 = a2;
    do
    {
      v10 = *v9++;
      v7 = 33 * v7 + v10;
      --v8;
    }
    while (v8);
  }
  v11 = *a1;
  v12 = v6 - 1;
  v13 = *a1 + 8 * v6 + 8;
  v14 = -1;
  v15 = 1;
  v16 = v7;
  while (1)
  {
    v17 = v16 & v12;
    v18 = *(_QWORD **)(v11 + 8 * v17);
    if (!v18)
      break;
    if (v18 == (_QWORD *)-8)
    {
      if (v14 == -1)
        v14 = v17;
    }
    else if (*(_DWORD *)(v13 + 4 * v17) == v7
           && a3 == *v18
           && (!a3 || !memcmp(a2, (char *)v18 + *((unsigned int *)a1 + 5), a3)))
    {
      return v17;
    }
    v16 = v15 + v17;
    ++v15;
  }
  v19 = v14;
  if (v14 == -1)
  {
    v19 = v17;
    v17 = v17;
  }
  else
  {
    v17 = v14;
  }
  *(_DWORD *)(v13 + 4 * v19) = v7;
  return v17;
}

uint64_t llvm::StringMapImpl::FindKey(uint64_t *a1, unsigned __int8 *__s1, size_t __n)
{
  uint64_t v3;
  int v7;
  size_t v8;
  unsigned __int8 *v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;

  v3 = *((unsigned int *)a1 + 2);
  if (!(_DWORD)v3)
    return 0xFFFFFFFFLL;
  v7 = 0;
  if (__n)
  {
    v8 = __n;
    v9 = __s1;
    do
    {
      v10 = *v9++;
      v7 = 33 * v7 + v10;
      --v8;
    }
    while (v8);
  }
  v11 = v3 - 1;
  v12 = *a1;
  v13 = *a1 + 8 * v3 + 8;
  v14 = 1;
  v15 = v7;
  while (1)
  {
    v16 = v15 & v11;
    v17 = *(_QWORD **)(v12 + 8 * v16);
    if (v17 != (_QWORD *)-8)
    {
      if (!v17)
        return 0xFFFFFFFFLL;
      if (*(_DWORD *)(v13 + 4 * v16) == v7
        && __n == *v17
        && (!__n || !memcmp(__s1, (char *)v17 + *((unsigned int *)a1 + 5), __n)))
      {
        break;
      }
    }
    v15 = v14 + v16;
    ++v14;
  }
  return v16;
}

int32x2_t llvm::StringMapImpl::RemoveKey(uint64_t *a1, size_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  size_t v6;
  int v7;
  size_t v8;
  unsigned __int8 *v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  int32x2_t result;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v4 = *((unsigned int *)a1 + 5);
    v5 = (char *)a2 + v4;
    v6 = *a2;
    if (*a2)
    {
      v7 = 0;
      v8 = *a2;
      v9 = (unsigned __int8 *)a2 + v4;
      do
      {
        v10 = *v9++;
        v7 = 33 * v7 + v10;
        --v8;
      }
      while (v8);
    }
    else
    {
      v7 = 0;
    }
    v11 = v2 - 1;
    v12 = *a1;
    v13 = *a1 + 8 * v2 + 8;
    v14 = 1;
    v15 = v7;
    while (1)
    {
      v16 = v15 & v11;
      v17 = *(_QWORD **)(v12 + 8 * v16);
      if (v17 != (_QWORD *)-8)
      {
        if (!v17)
          return result;
        if (*(_DWORD *)(v13 + 4 * v16) == v7 && v6 == *v17 && (!v6 || !memcmp(v5, (char *)v17 + v4, v6)))
          break;
      }
      v15 = v14 + v16;
      ++v14;
    }
    *(_QWORD *)(v12 + 8 * (int)v16) = -8;
    result = vadd_s32(*(int32x2_t *)((char *)a1 + 12), (int32x2_t)0x1FFFFFFFFLL);
    *(uint64_t *)((char *)a1 + 12) = (uint64_t)result;
  }
  return result;
}

int32x2_t llvm::StringMapImpl::RemoveKey(uint64_t *a1, unsigned __int8 *__s1, size_t __n)
{
  uint64_t v3;
  int v7;
  size_t v8;
  unsigned __int8 *v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  int32x2_t result;

  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v7 = 0;
    if (__n)
    {
      v8 = __n;
      v9 = __s1;
      do
      {
        v10 = *v9++;
        v7 = 33 * v7 + v10;
        --v8;
      }
      while (v8);
    }
    v11 = v3 - 1;
    v12 = *a1;
    v13 = *a1 + 8 * v3 + 8;
    v14 = 1;
    v15 = v7;
    while (1)
    {
      v16 = v15 & v11;
      v17 = *(_QWORD **)(v12 + 8 * v16);
      if (v17 != (_QWORD *)-8)
      {
        if (!v17)
          return result;
        if (*(_DWORD *)(v13 + 4 * v16) == v7
          && __n == *v17
          && (!__n || !memcmp(__s1, (char *)v17 + *((unsigned int *)a1 + 5), __n)))
        {
          break;
        }
      }
      v15 = v14 + v16;
      ++v14;
    }
    *(_QWORD *)(v12 + 8 * (int)v16) = -8;
    result = vadd_s32(*(int32x2_t *)((char *)a1 + 12), (int32x2_t)0x1FFFFFFFFLL);
    *(uint64_t *)((char *)a1 + 12) = (uint64_t)result;
  }
  return result;
}

uint64_t llvm::StringMapImpl::RehashTable(llvm::StringMapImpl *this, uint64_t a2)
{
  int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;

  v5 = *((_DWORD *)this + 2);
  v4 = *((_DWORD *)this + 3);
  if (3 * v5 < 4 * v4)
  {
    v5 *= 2;
  }
  else if (v5 - (v4 + *((_DWORD *)this + 4)) > v5 >> 3)
  {
    return a2;
  }
  v7 = malloc_type_calloc(v5 + 1, 0xCuLL, 0x6D9A4F0CuLL);
  if (!v7 && (v5 != -1 || (v7 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  v8 = &v7[v5];
  *v8 = 2;
  v9 = v8 + 1;
  v10 = *(_DWORD **)this;
  v11 = *((unsigned int *)this + 2);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = v5 - 1;
    v14 = a2;
    do
    {
      v15 = *(_QWORD *)(*(_QWORD *)this + 8 * v12);
      if (v15)
        v16 = v15 == -8;
      else
        v16 = 1;
      if (!v16)
      {
        v17 = v10[2 * v11 + 2 + v12];
        v18 = v17 & v13;
        if (v7[v18])
        {
          v19 = 1;
          do
          {
            v20 = v18 + v19++;
            v18 = v20 & v13;
          }
          while (v7[v18]);
        }
        v7[v18] = v15;
        *((_DWORD *)v9 + v18) = v17;
        if (v12 == v14)
          a2 = v18;
        else
          a2 = a2;
      }
      ++v12;
    }
    while (v12 != v11);
    v10 = *(_DWORD **)this;
  }
  free(v10);
  *(_QWORD *)this = v7;
  *((_DWORD *)this + 2) = v5;
  *((_DWORD *)this + 4) = 0;
  return a2;
}

_BYTE *llvm::StringSaver::save(uint64_t *a1, const void *a2, size_t a3)
{
  _BYTE *v5;
  _BYTE *v6;

  v5 = (_BYTE *)sub_1C484358C(*a1, a3 + 1, 0);
  v6 = v5;
  if (a3)
    memcpy(v5, a2, a3);
  v6[a3] = 0;
  return v6;
}

_BYTE *llvm::UniqueStringSaver::save(uint64_t a1, _QWORD *a2, size_t a3)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int i;
  unsigned int v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  _BYTE *v20;
  BOOL v21;
  int v22;
  __int128 v23;

  *(_QWORD *)&v23 = a2;
  *((_QWORD *)&v23 + 1) = a3;
  v4 = a1 + 8;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 24);
  if (v6)
  {
    v9 = sub_1C5E3DF4C(a2, (uint64_t)a2 + a3);
    v10 = 0;
    v11 = v6 - 1;
    for (i = 1; ; i = v22 + 1)
    {
      v22 = i;
      v13 = v9 & v11;
      v14 = v5 + 16 * (v9 & v11);
      v15 = *(_BYTE **)v14;
      if (*(_QWORD *)v14 == -1)
      {
        if (a2 == (_QWORD *)-1)
          return v15;
      }
      else if (v15 == (_BYTE *)-2)
      {
        if (a2 == (_QWORD *)-2)
          return v15;
      }
      else if (a3 == *(_QWORD *)(v14 + 8) && (!a3 || !memcmp(a2, *(const void **)v14, a3)))
      {
        return v15;
      }
      if (v15 == (_BYTE *)-1)
        break;
      if (v10)
        v21 = 0;
      else
        v21 = v15 == (_BYTE *)-2;
      if (v21)
        v10 = v5 + 16 * v13;
      v9 = v22 + v13;
    }
    if (v10)
      v17 = v10;
    else
      v17 = v5 + 16 * v13;
  }
  else
  {
    v17 = 0;
  }
  v18 = sub_1C4FAA5F8(v4, (uint64_t)&v23, (uint64_t)&v23, v17);
  *(_OWORD *)v18 = v23;
  v19 = v23;
  v20 = (_BYTE *)sub_1C484358C(*(_QWORD *)a1, *((_QWORD *)&v23 + 1) + 1, 0);
  v15 = v20;
  if (*((_QWORD *)&v19 + 1))
    memcpy(v20, (const void *)v19, *((size_t *)&v19 + 1));
  v15[*((_QWORD *)&v19 + 1)] = 0;
  *(_QWORD *)v18 = v15;
  *(_QWORD *)(v18 + 8) = *((_QWORD *)&v19 + 1);
  return v15;
}

uint64_t llvm::StringRef::compare_insensitive(unsigned __int8 **a1, unsigned __int8 *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 v6;
  int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  int v10;
  unsigned __int8 v11;
  BOOL v12;
  unsigned int v13;

  v3 = (unint64_t)a1[1];
  if (a3 >= v3)
    v4 = (unint64_t)a1[1];
  else
    v4 = a3;
  if (v4)
  {
    v5 = *a1;
    while (1)
    {
      v7 = *v5++;
      v6 = v7;
      v8 = v7 + 32;
      if ((v7 - 65) < 0x1A)
        v6 = v8;
      v10 = *a2++;
      v9 = v10;
      v11 = v10 + 32;
      if ((v10 - 65) < 0x1A)
        v9 = v11;
      if (v6 != v9)
        break;
      if (!--v4)
        goto LABEL_12;
    }
    if (v6 < v9)
      return 0xFFFFFFFFLL;
    else
      return 1;
  }
  else
  {
LABEL_12:
    v12 = v3 == a3;
    if (v3 < a3)
      v13 = -1;
    else
      v13 = 1;
    if (v12)
      return 0;
    else
      return v13;
  }
}

unint64_t llvm::StringRef::find_insensitive(llvm::StringRef *this, int a2, unint64_t a3)
{
  unsigned __int8 v4;
  unint64_t v5;
  unint64_t result;
  uint64_t v7;
  int v8;

  if ((a2 - 65) >= 0x1A)
    v4 = a2;
  else
    v4 = a2 + 32;
  v5 = *((_QWORD *)this + 1);
  if (v5 >= a3)
    result = a3;
  else
    result = *((_QWORD *)this + 1);
  if (v5 == result)
    return -1;
  v7 = *(_QWORD *)this;
  while (1)
  {
    v8 = *(unsigned __int8 *)(v7 + result);
    if ((v8 - 65) < 0x1A)
      LOBYTE(v8) = v8 + 32;
    if (v8 == v4)
      break;
    if (v5 == ++result)
      return -1;
  }
  return result;
}

uint64_t sub_1C5E3C6A8(int a1)
{
  if ((a1 - 65) >= 0x1A)
    return (char)a1;
  else
    return (char)(a1 + 32);
}

uint64_t llvm::StringRef::compare_numeric(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unint64_t v33;

  v5 = a1[1];
  if (a3 >= v5)
    v6 = a1[1];
  else
    v6 = a3;
  if (v6)
  {
    v7 = a2;
    v8 = 0;
    v9 = v6 + 1;
    v10 = *a1;
    v11 = -(uint64_t)v6;
    v12 = a2 + 1;
    v13 = *a1 + 1;
    do
    {
      v14 = *(unsigned __int8 *)(v10 + v8);
      v15 = *(unsigned __int8 *)(v7 + v8);
      if (v14 - 48 > 9 || v15 - 48 > 9)
      {
        v17 = v8;
        if (v14 != v15)
        {
          if (v14 < v15)
            return 0xFFFFFFFFLL;
          else
            return 1;
        }
      }
      else
      {
        v18 = 0;
        v19 = v13;
        v20 = v12;
        do
        {
          if (!(v11 + v8 + v18))
          {
            v17 = v6;
            v27 = v9;
            goto LABEL_33;
          }
          v21 = v8 + v18 + 1;
          v22 = v21 < v5 && *(unsigned __int8 *)(v19 + v8) - 48 < 0xA;
          if (v21 >= a3)
          {
            v25 = 5;
            v24 = 1;
          }
          else
          {
            v23 = (*(_BYTE *)(v20 + v8) - 48);
            v22 ^= v23 < 0xA;
            if (v23 < 0xA)
              v24 = -1;
            else
              v24 = 1;
            v25 = 0;
          }
          if (v22)
            v3 = v24;
          else
            v3 = v3;
          if (v22)
            v26 = 1;
          else
            v26 = v25;
          ++v18;
          ++v20;
          ++v19;
        }
        while (!v26);
        if (v26 != 5)
          return v3;
        v27 = v8 + v18;
        v17 = v27 - 1;
LABEL_33:
        if (v27 != v8)
        {
          v28 = v10;
          v29 = v7;
          v33 = v6;
          v30 = memcmp((const void *)(v10 + v8), (const void *)(v7 + v8), v27 - v8);
          v6 = v33;
          v7 = v29;
          v10 = v28;
          if (v30)
            return (v30 >> 31) | 1u;
        }
      }
      v8 = v17 + 1;
    }
    while (v17 + 1 != v6);
  }
  if (v5 < a3)
    v31 = -1;
  else
    v31 = 1;
  if (v5 == a3)
    return 0;
  else
    return v31;
}

uint64_t sub_1C5E3C880(uint64_t a1, unint64_t a2, unsigned __int8 *a3, unint64_t a4, int a5, unsigned int a6)
{
  uint64_t v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  char v17;
  uint64_t v18;
  unsigned int v19;
  unsigned __int8 *v20;
  unsigned int *v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  uint64_t v31;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a4 + 1 >= 0x41)
  {
    v12 = operator new[]();
    v13 = (char *)v12;
LABEL_4:
    v14 = 2;
    v15 = 1;
    do
    {
      *(_DWORD *)&v13[4 * v15] = v14 - 1;
      v15 = v14;
    }
    while (a4 >= v14++);
    v17 = 0;
    if (a2)
      goto LABEL_7;
LABEL_29:
    v31 = *(unsigned int *)&v13[4 * a4];
    if (!v12)
      return v31;
LABEL_30:
    MEMORY[0x1CAA32F9C](v12, 0x1000C8052888210);
    return v31;
  }
  v12 = 0;
  v13 = &v33;
  if (a4)
    goto LABEL_4;
  v17 = 1;
  if (!a2)
    goto LABEL_29;
LABEL_7:
  v18 = 1;
  while (1)
  {
    *(_DWORD *)v13 = v18;
    if ((v17 & 1) != 0)
    {
      v19 = v18;
    }
    else
    {
      v20 = a3;
      v21 = (unsigned int *)(v13 + 4);
      v22 = a4;
      v23 = v18;
      v24 = v18 - 1;
      v19 = v18;
      do
      {
        v25 = *v21;
        v26 = *v20++;
        v27 = *(unsigned __int8 *)(a1 + v18 - 1) == v26;
        if (a5)
        {
          if (!v27)
            ++v24;
          if (v25 >= v23)
            v28 = v21 - 1;
          else
            v28 = v21;
          v29 = *v28;
          if (v29 + 1 < v24)
            v24 = v29 + 1;
        }
        else if (!v27)
        {
          v30 = v21 - 1;
          if (v25 < v23)
            v30 = v21;
          v24 = *v30 + 1;
        }
        *v21++ = v24;
        if (v24 < v19)
          v19 = v24;
        v23 = v24;
        v24 = v25;
        --v22;
      }
      while (v22);
    }
    if (a6 && v19 > a6)
      break;
    if (++v18 > a2)
      goto LABEL_29;
  }
  v31 = a6 + 1;
  if (v12)
    goto LABEL_30;
  return v31;
}

uint64_t llvm::StringRef::find(uint64_t *a1, char *a2, size_t a3, unint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v10;
  unsigned __int8 *v11;
  size_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  size_t v16;
  int v17;
  uint64_t v18;
  _OWORD v19[14];
  int8x16_t v20;
  int8x16_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a1[1];
  v6 = v5 - a4;
  if (v5 < a4)
    return -1;
  v7 = a4;
  if (!a3)
    return v7;
  if (v6 < a3)
    return -1;
  v10 = *a1;
  v11 = (unsigned __int8 *)(*a1 + a4);
  v12 = a3 - 1;
  if (a3 == 1)
  {
    v13 = memchr((void *)(*a1 + a4), *a2, v6);
    if (v13)
      return (uint64_t)v13 - v10;
    else
      return -1;
  }
  v14 = (unint64_t)&v11[v6 - a3 + 1];
  if (a3 > 0xFF || v6 <= 0xF)
  {
    while (memcmp((const void *)(v10 + v7), a2, a3))
    {
      ++v7;
      result = -1;
      if (v10 + v7 >= v14)
        return result;
    }
    return v7;
  }
  v15 = 0;
  v20 = vdupq_n_s8(a3);
  v21 = v20;
  v19[12] = v20;
  v19[13] = v20;
  v19[10] = v20;
  v19[11] = v20;
  v19[8] = v20;
  v19[9] = v20;
  v19[6] = v20;
  v19[7] = v20;
  v19[4] = v20;
  v19[5] = v20;
  v19[2] = v20;
  v19[3] = v20;
  v16 = a3 - 1;
  v19[0] = v20;
  v19[1] = v20;
  do
    *((_BYTE *)v19 + a2[v15++]) = v16--;
  while (v12 != v15);
  v17 = a2[v12];
  while (1)
  {
    v18 = v11[v12];
    if ((_DWORD)v18 == v17 && !memcmp(v11, a2, v12))
      break;
    v11 += *((unsigned __int8 *)v19 + v18);
    if ((unint64_t)v11 >= v14)
      return -1;
  }
  return (uint64_t)&v11[-v10];
}

uint64_t llvm::StringRef::find_insensitive(_QWORD *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v11;

  v4 = a1[1];
  if (v4 >= a4)
    v5 = a4;
  else
    v5 = a1[1];
  v6 = v4 - v5;
  if (v6 < a3)
    return -1;
  if (!a3)
    return a4;
  v8 = *a1 + v5;
  result = -1;
  do
  {
    v9 = 0;
    while (1)
    {
      v10 = *(unsigned __int8 *)(v8 + v9);
      if ((v10 - 65) < 0x1A)
        LOBYTE(v10) = v10 + 32;
      v11 = *(unsigned __int8 *)(a2 + v9);
      if ((v11 - 65) < 0x1A)
        LOBYTE(v11) = v11 + 32;
      if (v10 != v11)
        break;
      if (a3 == ++v9)
        return a4;
    }
    ++v8;
    --v6;
    ++a4;
  }
  while (v6 >= a3);
  return result;
}

unint64_t llvm::StringRef::rfind_insensitive(llvm::StringRef *this, int a2, unint64_t a3)
{
  unint64_t v3;
  unsigned __int8 v4;
  unint64_t v5;
  int v6;
  BOOL v7;

  if (*((_QWORD *)this + 1) >= a3)
    v3 = a3;
  else
    v3 = *((_QWORD *)this + 1);
  v4 = a2 + 32;
  if ((a2 - 65) >= 0x1A)
    v4 = a2;
  while (v3)
  {
    v5 = v3 - 1;
    v6 = *(unsigned __int8 *)(*(_QWORD *)this + v3 - 1);
    if ((v6 - 65) < 0x1A)
      LOBYTE(v6) = v6 + 32;
    v7 = v6 == v4;
    v3 = v5;
    if (v7)
      return v5;
  }
  return -1;
}

uint64_t llvm::StringRef::rfind(uint64_t *a1, const void *a2, size_t a3)
{
  size_t v3;
  size_t v4;
  size_t v5;
  uint64_t v9;
  size_t v10;

  v3 = a1[1];
  v4 = v3 - a3;
  if (v3 < a3)
    return -1;
  v5 = v4 + 1;
  if (v4 == -1)
    return -1;
  v9 = *a1;
  while (1)
  {
    --v5;
    v10 = v3 >= v4 ? v4 : v3;
    if (a3 <= v3 - v10)
    {
      if (!a3)
        return v4;
      if (!memcmp((const void *)(v9 + v10), a2, a3))
        break;
    }
    if (--v4 == -1)
      return v4;
  }
  return v5;
}

uint64_t llvm::StringRef::rfind_insensitive(uint64_t *a1, unsigned __int8 *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13[2];

  v3 = a1[1];
  v4 = v3 - a3;
  if (v3 < a3 || v4 == -1)
    return -1;
  v8 = *a1;
  do
  {
    if (v3 >= v4)
      v9 = v4;
    else
      v9 = v3;
    v10 = (unsigned __int8 *)(v8 + v9);
    v11 = (unsigned __int8 *)(v3 - v9);
    if ((unint64_t)v11 >= a3)
      v12 = (unsigned __int8 *)a3;
    else
      v12 = v11;
    v13[0] = v10;
    v13[1] = v12;
    if (a3 <= (unint64_t)v11 && !llvm::StringRef::compare_insensitive(v13, a2, a3))
      break;
    --v4;
  }
  while (v4 != -1);
  return v4;
}

uint64_t llvm::StringRef::find_first_of(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  unsigned int v4;
  unint64_t v5;
  __int128 v7;

  for (; a3; --a3)
  {
    v4 = *a2++;
    *(_QWORD *)((char *)&v7 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  v5 = a1[1];
  if (v5 <= a4)
    return -1;
  while (((*(_QWORD *)((char *)&v7 + (((unint64_t)*(unsigned __int8 *)(*a1 + a4) >> 3) & 0x18)) >> *(_BYTE *)(*a1 + a4)) & 1) == 0)
  {
    if (v5 == ++a4)
      return -1;
  }
  return a4;
}

unint64_t llvm::StringRef::find_first_not_of(llvm::StringRef *this, unsigned __int8 a2, unint64_t a3)
{
  unint64_t v3;

  v3 = *((_QWORD *)this + 1);
  if (v3 <= a3)
    return -1;
  while (*(unsigned __int8 *)(*(_QWORD *)this + a3) == a2)
  {
    if (v3 == ++a3)
      return -1;
  }
  return a3;
}

uint64_t llvm::StringRef::find_first_not_of(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  unsigned int v4;
  unint64_t v5;
  __int128 v7;

  for (; a3; --a3)
  {
    v4 = *a2++;
    *(_QWORD *)((char *)&v7 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  v5 = a1[1];
  if (v5 <= a4)
    return -1;
  while (((*(_QWORD *)((char *)&v7 + (((unint64_t)*(unsigned __int8 *)(*a1 + a4) >> 3) & 0x18)) >> *(_BYTE *)(*a1 + a4)) & 1) != 0)
  {
    if (v5 == ++a4)
      return -1;
  }
  return a4;
}

uint64_t llvm::StringRef::find_last_of(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v10;

  for (; a3; --a3)
  {
    v4 = *a2++;
    *(_QWORD *)((char *)&v10 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  if (a1[1] >= a4)
    v5 = a4;
  else
    v5 = a1[1];
  while (v5)
  {
    v6 = v5 - 1;
    v7 = *(unsigned __int8 *)(*a1 + v5 - 1);
    v8 = *(_QWORD *)((char *)&v10 + ((v7 >> 3) & 0x18)) >> v7;
    v5 = v6;
    if ((v8 & 1) != 0)
      return v6;
  }
  return -1;
}

unint64_t llvm::StringRef::find_last_not_of(llvm::StringRef *this, unsigned __int8 a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  int v5;

  if (*((_QWORD *)this + 1) >= a3)
    v3 = a3;
  else
    v3 = *((_QWORD *)this + 1);
  while (v3)
  {
    v4 = v3 - 1;
    v5 = *(unsigned __int8 *)(*(_QWORD *)this + v3-- - 1);
    if (v5 != a2)
      return v4;
  }
  return -1;
}

uint64_t llvm::StringRef::find_last_not_of(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v10;

  for (; a3; --a3)
  {
    v4 = *a2++;
    *(_QWORD *)((char *)&v10 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  if (a1[1] >= a4)
    v5 = a4;
  else
    v5 = a1[1];
  while (v5)
  {
    v6 = v5 - 1;
    v7 = *(unsigned __int8 *)(*a1 + v5 - 1);
    v8 = *(_QWORD *)((char *)&v10 + ((v7 >> 3) & 0x18)) >> v7;
    v5 = v6;
    if ((v8 & 1) == 0)
      return v6;
  }
  return -1;
}

_OWORD *llvm::StringRef::split(_OWORD *result, uint64_t a2, char *a3, size_t a4, int a5, int a6)
{
  int v8;
  unint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  _OWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  __int128 v21;

  v21 = *result;
  if (a5)
  {
    v8 = a5;
    v11 = *((_QWORD *)&v21 + 1);
    do
    {
      result = (_OWORD *)llvm::StringRef::find((uint64_t *)&v21, a3, a4, 0);
      if (result == (_OWORD *)-1)
        break;
      v12 = result;
      v13 = v21;
      if (result || a6)
      {
        if (v11 >= (unint64_t)result)
          v14 = result;
        else
          v14 = (_OWORD *)v11;
        v15 = *(unsigned int *)(a2 + 8);
        if (v15 >= *(unsigned int *)(a2 + 12))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v15 + 1, 16);
          v15 = *(unsigned int *)(a2 + 8);
        }
        v16 = (_QWORD *)(*(_QWORD *)a2 + 16 * v15);
        *v16 = v13;
        v16[1] = v14;
        ++*(_DWORD *)(a2 + 8);
      }
      v17 = (unint64_t)v12 + a4;
      if (v11 < (unint64_t)v12 + a4)
        v17 = v11;
      v11 -= v17;
      *(_QWORD *)&v21 = v13 + v17;
      *((_QWORD *)&v21 + 1) = v11;
      --v8;
    }
    while (v8);
  }
  else
  {
    v11 = *((_QWORD *)&v21 + 1);
  }
  if ((a6 & 1) != 0 || v11)
  {
    v18 = v21;
    v19 = *(unsigned int *)(a2 + 8);
    if (v19 >= *(_DWORD *)(a2 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v19 + 1, 16);
      LODWORD(v19) = *(_DWORD *)(a2 + 8);
    }
    v20 = (_QWORD *)(*(_QWORD *)a2 + 16 * v19);
    *v20 = v18;
    v20[1] = v11;
    ++*(_DWORD *)(a2 + 8);
  }
  return result;
}

char *llvm::StringRef::split(char *result, uint64_t a2, int __c, int a4, int a5)
{
  char *v7;
  size_t v8;
  int v10;
  size_t v11;
  size_t v12;
  unint64_t v13;
  _QWORD *v14;
  size_t v15;
  uint64_t v16;
  _QWORD *v17;

  v7 = *(char **)result;
  v8 = *((_QWORD *)result + 1);
  if (a4 && v8)
  {
    v10 = a4 - 1;
    while (1)
    {
      result = (char *)memchr(v7, __c, v8);
      if (!result)
        break;
      v11 = result - v7;
      if (result - v7 == -1)
        break;
      if (result != v7 || a5)
      {
        if (v8 >= v11)
          v12 = result - v7;
        else
          v12 = v8;
        v13 = *(unsigned int *)(a2 + 8);
        if (v13 >= *(unsigned int *)(a2 + 12))
        {
          result = (char *)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v13 + 1, 16);
          v13 = *(unsigned int *)(a2 + 8);
        }
        v14 = (_QWORD *)(*(_QWORD *)a2 + 16 * v13);
        *v14 = v7;
        v14[1] = v12;
        ++*(_DWORD *)(a2 + 8);
      }
      if (v8 >= v11 + 1)
        v15 = v11 + 1;
      else
        v15 = v8;
      v7 += v15;
      v8 -= v15;
      if (v10)
      {
        --v10;
        if (v8)
          continue;
      }
      goto LABEL_19;
    }
  }
  else
  {
LABEL_19:
    if ((a5 & 1) == 0 && !v8)
      return result;
  }
  v16 = *(unsigned int *)(a2 + 8);
  if (v16 >= *(_DWORD *)(a2 + 12))
  {
    result = (char *)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v16 + 1, 16);
    LODWORD(v16) = *(_DWORD *)(a2 + 8);
  }
  v17 = (_QWORD *)(*(_QWORD *)a2 + 16 * v16);
  *v17 = v7;
  v17[1] = v8;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t llvm::StringRef::count(_QWORD *a1, const void *a2, size_t a3)
{
  unint64_t v5;
  size_t v6;
  size_t v7;
  uint64_t v8;
  unint64_t v11;
  unint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  int v15;

  if (!a3)
    return 0;
  v5 = a1[1];
  v6 = v5 - a3;
  if (v5 < a3)
    return 0;
  v7 = v6 + 1;
  if (v6 == -1)
    return 0;
  v8 = 0;
  v11 = 0;
  do
  {
    if (v5 >= v11)
      v12 = v11;
    else
      v12 = v5;
    if (a3 <= v5 - v12)
    {
      v15 = memcmp((const void *)(*a1 + v12), a2, a3);
      v13 = v15 == 0;
      if (v15)
        v14 = 1;
      else
        v14 = a3;
    }
    else
    {
      v13 = 0;
      v14 = 1;
    }
    v8 += v13;
    v11 += v14;
  }
  while (v11 < v7);
  return v8;
}

uint64_t llvm::consumeUnsignedInteger(llvm *this, llvm::StringRef *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t result;

  if (!(_DWORD)a2)
    LODWORD(a2) = sub_1C5E3D4C0((uint64_t)this);
  v6 = *((_QWORD *)this + 1);
  if (!v6)
    return 1;
  v7 = 0;
  v8 = *(unsigned __int8 **)this;
  *a3 = 0;
  v9 = v6;
  do
  {
    v10 = *v8;
    if ((v10 - 48) >= 0xA)
    {
      if ((v10 - 97) >= 0x1A)
      {
        if ((v10 - 65) > 0x19)
          break;
        v11 = -55;
      }
      else
      {
        v11 = -87;
      }
    }
    else
    {
      v11 = -48;
    }
    v12 = v11 + v10;
    if (v12 >= a2)
      break;
    v13 = v7 * a2 + v12;
    *a3 = v13;
    if (v13 / a2 < v7)
      return 1;
    ++v8;
    v7 = v13;
    --v9;
  }
  while (v9);
  if (v6 == v9)
    return 1;
  result = 0;
  *(_QWORD *)this = v8;
  *((_QWORD *)this + 1) = v9;
  return result;
}

uint64_t sub_1C5E3D4C0(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _WORD *v3;
  _WORD *v4;
  int v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 < 2)
    return 10;
  v3 = *(_WORD **)a1;
  if (**(_WORD **)a1 == 30768 || *v3 == 22576)
  {
    v4 = v3 + 1;
    v2 = 16;
LABEL_14:
    v6 = -2;
    goto LABEL_15;
  }
  if (*v3 == 25136 || *v3 == 16944)
  {
    v4 = v3 + 1;
    v2 = 2;
    goto LABEL_14;
  }
  if (*v3 == 28464)
  {
    v4 = v3 + 1;
    v2 = 8;
    goto LABEL_14;
  }
  if (*(_BYTE *)v3 == 48)
  {
    v5 = *((unsigned __int8 *)v3 + 1);
    v4 = (_WORD *)((char *)v3 + 1);
    if ((v5 - 48) <= 9)
    {
      v2 = 8;
      v6 = -1;
LABEL_15:
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = v1 + v6;
      return v2;
    }
  }
  return 10;
}

double llvm::consumeSignedInteger(llvm *this, llvm::StringRef *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  double result;
  __int128 v25;

  v6 = *((_QWORD *)this + 1);
  if (!v6 || **(_BYTE **)this != 45)
  {
    if ((_DWORD)a2)
    {
      if (!v6)
        return result;
    }
    else
    {
      LODWORD(a2) = sub_1C5E3D4C0((uint64_t)this);
      v6 = *((_QWORD *)this + 1);
      if (!v6)
        return result;
    }
    v16 = 0;
    v17 = *(unsigned __int8 **)this;
    v18 = (unsigned __int8 *)(*(_QWORD *)this + v6);
    v19 = v6;
    while (1)
    {
      v20 = *v17;
      if ((v20 - 48) >= 0xA)
      {
        if ((v20 - 97) >= 0x1A)
        {
          if ((v20 - 65) > 0x19)
          {
LABEL_33:
            v23 = v16;
            v18 = v17;
LABEL_34:
            if (v6 != v19)
            {
              *(_QWORD *)this = v18;
              *((_QWORD *)this + 1) = v19;
              if ((v23 & 0x8000000000000000) == 0)
                *a3 = v23;
            }
            return result;
          }
          v21 = -55;
        }
        else
        {
          v21 = -87;
        }
      }
      else
      {
        v21 = -48;
      }
      v22 = v21 + v20;
      if (v22 >= a2)
        goto LABEL_33;
      v23 = v16 * a2 + v22;
      if (v23 / a2 < v16)
        return result;
      ++v17;
      v16 = v23;
      if (!--v19)
        goto LABEL_34;
    }
  }
  v7 = v6 - 1;
  *(_QWORD *)&v25 = *(_QWORD *)this + 1;
  *((_QWORD *)&v25 + 1) = v7;
  if ((_DWORD)a2)
  {
    if (!v7)
      return result;
  }
  else
  {
    LODWORD(a2) = sub_1C5E3D4C0((uint64_t)&v25);
    v7 = *((_QWORD *)&v25 + 1);
    if (!*((_QWORD *)&v25 + 1))
      return result;
  }
  v8 = 0;
  v9 = (unsigned __int8 *)v25;
  v10 = (unsigned __int8 *)(v25 + v7);
  v11 = v7;
  while (1)
  {
    v12 = *v9;
    if ((v12 - 48) < 0xA)
    {
      v13 = -48;
      goto LABEL_8;
    }
    if ((v12 - 97) < 0x1A)
    {
      v13 = -87;
      goto LABEL_8;
    }
    if ((v12 - 65) > 0x19)
      break;
    v13 = -55;
LABEL_8:
    v14 = v13 + v12;
    if (v14 >= a2)
      break;
    v15 = v8 * a2 + v14;
    if (v15 / a2 < v8)
      return result;
    ++v9;
    v8 = v15;
    if (!--v11)
      goto LABEL_38;
  }
  v15 = v8;
  v10 = v9;
LABEL_38:
  if (v7 != v11)
  {
    *(_QWORD *)&v25 = v10;
    *((_QWORD *)&v25 + 1) = v11;
    if (v15 <= 0x8000000000000000)
    {
      result = *(double *)&v25;
      *(_OWORD *)this = v25;
      *a3 = -(uint64_t)v15;
    }
  }
  return result;
}

uint64_t llvm::getAsUnsignedInteger(unsigned __int8 *a1, uint64_t a2, unsigned int a3, unint64_t *a4)
{
  unint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  _BOOL4 v12;
  _BOOL4 v13;
  unsigned __int8 *v15;
  uint64_t v16;

  v15 = a1;
  v16 = a2;
  if (!a3)
  {
    a3 = sub_1C5E3D4C0((uint64_t)&v15);
    a2 = v16;
  }
  if (a2)
  {
    v5 = 0;
    v6 = v15;
    *a4 = 0;
    v7 = a2;
    while (1)
    {
      v8 = *v6;
      if ((v8 - 48) >= 0xA)
      {
        if ((v8 - 97) >= 0x1A)
        {
          if ((v8 - 65) > 0x19)
          {
LABEL_10:
            v12 = a2 == v7;
            v13 = v7 != 0;
            return v13 | v12;
          }
          v9 = -55;
        }
        else
        {
          v9 = -87;
        }
      }
      else
      {
        v9 = -48;
      }
      v10 = v9 + v8;
      if (v10 >= a3)
        goto LABEL_10;
      v11 = v5 * a3 + v10;
      *a4 = v11;
      if (v11 / a3 < v5)
        break;
      ++v6;
      v5 = v11;
      if (!--v7)
        goto LABEL_10;
    }
    v13 = 1;
  }
  else
  {
    v13 = 0;
  }
  v12 = 1;
  return v13 | v12;
}

uint64_t llvm::getAsSignedInteger(uint64_t a1, uint64_t a2, llvm::StringRef *a3, unint64_t *a4)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = a1;
  v6 = a2;
  llvm::consumeSignedInteger((llvm *)&v5, a3, a4, (uint64_t *)a4);
  if (v6)
    return 1;
  else
    return result;
}

uint64_t llvm::StringRef::getAsInteger(llvm::StringRef *this, unsigned int a2, llvm::APInt *a3)
{
  unsigned int v4;
  uint64_t v5;
  _BYTE *i;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t *v14;
  unint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BOOL4 v33;
  unsigned int v35;
  _QWORD *v36;
  _QWORD *v37;
  int v38;
  __int128 v39;
  _QWORD *v40;
  unsigned int v41;

  v4 = a2;
  v39 = *(_OWORD *)this;
  if (!a2)
    v4 = sub_1C5E3D4C0((uint64_t)&v39);
  v5 = *((_QWORD *)&v39 + 1);
  if (!*((_QWORD *)&v39 + 1))
    return 1;
  for (i = (_BYTE *)v39; *i == 48; ++i)
  {
    if (!--v5)
    {
      if (*((_DWORD *)a3 + 2) >= 0x41u && *(_QWORD *)a3)
        MEMORY[0x1CAA32F9C](*(_QWORD *)a3, 0x1000C8000313F17);
      v7 = 0;
      *(_QWORD *)a3 = 0;
      *((_DWORD *)a3 + 2) = 64;
      return v7;
    }
  }
  v8 = 0;
  do
  {
    v9 = v8;
    v10 = 1 << v8++;
  }
  while (v10 < v4);
  v11 = v9 * v5;
  v12 = *((_DWORD *)a3 + 2);
  if (v9 * v5 >= v12)
  {
    if (v11 > v12)
    {
      llvm::APInt::zext(a3, v9 * v5, (uint64_t)&v40);
      if (*((_DWORD *)a3 + 2) >= 0x41u && *(_QWORD *)a3)
        MEMORY[0x1CAA32F9C](*(_QWORD *)a3, 0x1000C8000313F17);
      *(_QWORD *)a3 = v40;
      v12 = v41;
      *((_DWORD *)a3 + 2) = v41;
    }
  }
  else
  {
    v11 = *((_DWORD *)a3 + 2);
  }
  v13 = 1;
  v38 = 1;
  v37 = 0;
  if (v10 == v4)
  {
    v36 = 0;
    v14 = 0;
    v11 = 1;
  }
  else
  {
    v41 = v11;
    if (v11 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v40, v4, 0);
      v36 = v40;
      v37 = v40;
      v35 = v41;
      v38 = v41;
      v41 = v11;
      llvm::APInt::initSlowCase((llvm::APInt *)&v40, 0, 0);
      v14 = v40;
      v13 = v41;
      v11 = v35;
      v12 = *((_DWORD *)a3 + 2);
    }
    else
    {
      v14 = 0;
      v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
      if (!v11)
        LODWORD(v15) = 0;
      v36 = (_QWORD *)(v15 & v4);
      v37 = v36;
      v38 = v11;
      v13 = v11;
    }
  }
  if (v12 > 0x40)
  {
    **(_QWORD **)a3 = 0;
    bzero((void *)(*(_QWORD *)a3 + 8), ((((unint64_t)v12 + 63) >> 3) - 8) & 0xFFFFFFF8);
  }
  else
  {
    *(_QWORD *)a3 = 0;
  }
  while (1)
  {
    v16 = *i;
    if ((v16 - 48) >= 0xA)
    {
      if ((v16 - 97) >= 0x1A)
      {
        if ((v16 - 65) > 0x19)
          break;
        v17 = -55;
      }
      else
      {
        v17 = -87;
      }
    }
    else
    {
      v17 = -48;
    }
    v18 = (v17 + v16);
    if (v18 >= v4)
      break;
    if (v10 != v4)
    {
      llvm::APInt::operator*((uint64_t)a3, &v37, (uint64_t)&v40);
      if (*((_DWORD *)a3 + 2) >= 0x41u && *(_QWORD *)a3)
        MEMORY[0x1CAA32F9C](*(_QWORD *)a3, 0x1000C8000313F17);
      *(_QWORD *)a3 = v40;
      v23 = v41;
      *((_DWORD *)a3 + 2) = v41;
      if (v13 > 0x40)
      {
        *v14 = v18;
        bzero(v14 + 1, ((((unint64_t)v13 + 63) >> 3) - 8) & 0xFFFFFFF8);
        v23 = *((_DWORD *)a3 + 2);
      }
      else
      {
        v24 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v13;
        if (!v13)
          v24 = 0;
        v14 = (uint64_t *)(v24 & v18);
      }
      if (v23 >= 0x41)
      {
        v26 = 0;
        v27 = *(unint64_t **)a3;
        v28 = ((unint64_t)v23 + 63) >> 6;
        v29 = v14;
        v30 = v28;
        do
        {
          v31 = *v29++;
          v32 = v31 + *v27;
          v33 = v32 + 1 <= *v27;
          if (v26)
          {
            ++v32;
            v26 = v33;
          }
          else
          {
            v26 = v32 < *v27;
          }
          *v27++ = v32;
          --v30;
        }
        while (v30);
        *(_QWORD *)(*(_QWORD *)a3 + 8 * (v28 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v23;
        goto LABEL_55;
      }
      v20 = (unint64_t)v14 + *(_QWORD *)a3;
      v21 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v23;
      v22 = v23 == 0;
      goto LABEL_51;
    }
    sub_1C4888094((uint64_t)a3, v9);
    v19 = *((_DWORD *)a3 + 2);
    if (v19 <= 0x40)
    {
      v20 = *(_QWORD *)a3 | v18;
      v21 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v19;
      v22 = v19 == 0;
LABEL_51:
      if (v22)
        v25 = 0;
      else
        v25 = v21;
      *(_QWORD *)a3 = v25 & v20;
      goto LABEL_55;
    }
    **(_QWORD **)a3 |= v18;
LABEL_55:
    ++i;
    if (!--v5)
    {
      v7 = 0;
      goto LABEL_64;
    }
  }
  v7 = 1;
LABEL_64:
  if (v13 >= 0x41 && v14)
    MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
  if (v11 >= 0x41 && v36)
    MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
  return v7;
}

uint64_t llvm::StringRef::getAsDouble(llvm::StringRef *this, double *a2, int a3)
{
  uint64_t result;
  double v7;
  uint64_t v8;
  char *v9;
  char *v10;
  const llvm::APInt *v11;
  char *v12;
  uint64_t v13;
  int v14;
  char v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  LODWORD(v12) = 64;
  v11 = 0;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v16, &v11);
  v12 = v16;
  v13 = v17;
  v14 = v18;
  v15 = v19 & 0xF;
  llvm::APFloat::convertFromString((uint64_t)&v11, *(unsigned __int8 **)this, *((_QWORD *)this + 1), 1, (uint64_t)&v16);
  if ((v17 & 1) == 0)
  {
    if ((_DWORD)v16)
    {
      result = 1;
      if ((v16 & 0x10) == 0 || !a3)
        goto LABEL_8;
    }
LABEL_7:
    v7 = llvm::APFloat::convertToDouble((llvm::APFloat *)&v11);
    result = 0;
    *a2 = v7;
    goto LABEL_8;
  }
  if (!v16)
    goto LABEL_7;
  v9 = v16;
  sub_1C4D62BD4(&v9, &v10);
  if (v9)
    (*(void (**)(char *))(*(_QWORD *)v9 + 8))(v9);
  result = 1;
LABEL_8:
  if (v12 == (char *)&unk_1C866F1C0)
  {
    v8 = result;
    sub_1C4773C74(&v13);
    return v8;
  }
  if ((*((_DWORD *)v12 + 2) - 64) <= 0xFFFFFF7F && v13)
  {
    v8 = result;
    MEMORY[0x1CAA32F9C](v13, 0x1000C8000313F17);
    return v8;
  }
  return result;
}

unint64_t llvm::hash_value(_QWORD *a1, uint64_t a2)
{
  return sub_1C5E3DF4C(a1, (uint64_t)a1 + a2);
}

unint64_t llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(_QWORD *a1, uint64_t a2)
{
  return sub_1C5E3DF4C(a1, (uint64_t)a1 + a2);
}

_QWORD *sub_1C5E3DEA4(_QWORD *result, char *a2, uint64_t (*a3)(_QWORD), char *a4, uint64_t a5, unint64_t a6)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  if (a6 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v10 = result;
  if (a6 > 0x16)
  {
    v11 = (a6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a6 | 7) != 0x17)
      v11 = a6 | 7;
    v12 = v11 + 1;
    result = operator new(v11 + 1);
    v10[1] = a6;
    v10[2] = v12 | 0x8000000000000000;
    *v10 = result;
    v10 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a6;
  }
  while (a2 != a4)
  {
    v13 = *a2++;
    result = (_QWORD *)a3(v13);
    *(_BYTE *)v10 = (_BYTE)result;
    v10 = (_QWORD *)((char *)v10 + 1);
  }
  *(_BYTE *)v10 = 0;
  return result;
}

unint64_t sub_1C5E3DF4C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  _QWORD *v71;

  v2 = a2;
  v3 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v4 = &unk_1ED7EA000;
  if ((v3 & 1) == 0)
  {
    v71 = a1;
    v67 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v4 = &unk_1ED7EA000;
    v68 = v67;
    v2 = a2;
    a1 = v71;
    if (v68)
    {
      v69 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v69 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v69;
      __cxa_guard_release(&qword_1ED7EAC88);
      v4 = (_QWORD *)&unk_1ED7EA000;
      v2 = a2;
      a1 = v71;
    }
  }
  v5 = v4[400];
  v6 = v2 - (_QWORD)a1;
  if ((unint64_t)(v2 - (_QWORD)a1) <= 0x40)
    return sub_1C49CE808(a1, v6, v5);
  v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v5 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
  v9 = __ROR8__(v5 ^ 0xB492B66FBE98F273, 49);
  v10 = v5 ^ (v5 >> 47);
  v11 = v5 ^ (((0x9DDFEA08EB382D69 * (v10 ^ (0xB492B66FBE98F273 * v5))) ^ v5) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                          * (v10 ^ (0xB492B66FBE98F273
                                                                                                  * v5)));
  v12 = a1[1];
  v13 = a1[6];
  v14 = a1[7];
  v15 = v9 + v5 + v12;
  v17 = a1[4];
  v16 = a1[5];
  v18 = v16 + v9 - 0x4B6D499041670D8DLL * __ROR8__(v13 + v5 - 0x4B6D499041670D8DLL * v5, 42);
  v19 = v10 - 0x622015F714C7D297 * (v8 ^ (v8 >> 47));
  v20 = *a1 - 0x6D8ED9027DD26057 * v5;
  v21 = a1;
  v24 = a1 + 2;
  v22 = a1[2];
  v23 = v24[1];
  v25 = v20 + v12 + v22;
  v26 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v11) ^ ((0x9DDFEA08EB382D69 * v11) >> 47));
  v27 = __ROR8__(v19, 33);
  v28 = (0xB492B66FBE98F273 * __ROR8__(v15, 37)) ^ v26;
  v29 = __ROR8__(v25, 44) + v20 + __ROR8__(v28 + v10 + v20 + v23, 21);
  v30 = 0xB492B66FBE98F273 * v27;
  v31 = v25 + v23;
  v32 = v26 + v17 - 0x4B6D499041670D8DLL * v27;
  v33 = __ROR8__(v16 + v13 + v32, 44) + v32 + __ROR8__(v18 + v22 + v14 + v32, 21);
  v34 = v16 + v13 + v32 + v14;
  v35 = (v6 & 0xFFFFFFFFFFFFFFC0) - 64;
  if ((v6 & 0xFFFFFFFFFFFFFFC0) == 0x40)
  {
    v36 = v28;
  }
  else
  {
    v53 = v21 + 15;
    do
    {
      v54 = *(v53 - 6);
      v55 = __ROR8__(v18 + v30 + v31 + v54, 37);
      v57 = *(v53 - 2);
      v56 = *(v53 - 1);
      v18 = v57 + v31 - 0x4B6D499041670D8DLL * __ROR8__(v29 + v18 + v56, 42);
      v58 = v34 + v28;
      v59 = *(v53 - 7) - 0x4B6D499041670D8DLL * v29;
      v60 = *(v53 - 4);
      v61 = *(v53 - 5);
      v62 = v59 + v54 + v61;
      v36 = (0xB492B66FBE98F273 * v55) ^ v33;
      v30 = 0xB492B66FBE98F273 * __ROR8__(v58, 33);
      v29 = __ROR8__(v62, 44) + v59 + __ROR8__(v36 + v34 + v59 + v60, 21);
      v31 = v62 + v60;
      v63 = v30 + v33 + *(v53 - 3);
      v64 = *v53;
      v53 += 8;
      v65 = __ROR8__(v18 + v61 + v63 + v64, 21);
      v66 = v57 + v56 + v63;
      v33 = __ROR8__(v66, 44) + v63 + v65;
      v34 = v66 + v64;
      v28 = v36;
      v35 -= 64;
    }
    while (v35);
  }
  if ((v6 & 0x3F) != 0)
  {
    v37 = *(_QWORD *)(v2 - 56);
    v38 = *(_QWORD *)(v2 - 16);
    v39 = *(_QWORD *)(v2 - 8);
    v40 = v36 + v34;
    v41 = (0xB492B66FBE98F273 * __ROR8__(v18 + v31 + v30 + v37, 37)) ^ v33;
    v42 = *(_QWORD *)(v2 - 24);
    v18 = v42 + v31 - 0x4B6D499041670D8DLL * __ROR8__(v18 + v29 + v38, 42);
    v43 = v41 + v34;
    v44 = *(_QWORD *)(v2 - 64) - 0x4B6D499041670D8DLL * v29;
    v45 = *(_QWORD *)(v2 - 48);
    v46 = *(_QWORD *)(v2 - 40);
    v47 = v44 + v37 + v45;
    v30 = 0xB492B66FBE98F273 * __ROR8__(v40, 33);
    v29 = __ROR8__(v47, 44) + v44 + __ROR8__(v43 + v44 + v46, 21);
    v31 = v47 + v46;
    v48 = v30 + v33 + *(_QWORD *)(v2 - 32);
    v49 = v42 + v38 + v48;
    v33 = __ROR8__(v49, 44) + v48 + __ROR8__(v18 + v45 + v48 + v39, 21);
    v34 = v49 + v39;
    v36 = v41;
  }
  v50 = 0x9DDFEA08EB382D69
      * (v33 ^ ((0x9DDFEA08EB382D69 * (v29 ^ v33)) >> 47) ^ (0x9DDFEA08EB382D69 * (v29 ^ v33)));
  v51 = v30 - 0x4B6D499041670D8DLL * (v6 ^ (v6 >> 47)) - 0x622015F714C7D297 * (v50 ^ (v50 >> 47));
  v52 = 0x9DDFEA08EB382D69
      * ((v36
        - 0x4B6D499041670D8DLL * (v18 ^ (v18 >> 47))
        - 0x622015F714C7D297
        * ((0x9DDFEA08EB382D69
          * (v34 ^ ((0x9DDFEA08EB382D69 * (v31 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v31 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v34 ^ ((0x9DDFEA08EB382D69 * (v31 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v31 ^ v34)))) >> 47))) ^ v51);
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v51 ^ (v52 >> 47) ^ v52)) ^ ((0x9DDFEA08EB382D69 * (v51 ^ (v52 >> 47) ^ v52)) >> 47));
}

uint64_t llvm::SuffixTree::extend(llvm::SuffixTree *this, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unint64_t inserted;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned int v34;
  int v35;
  int v36;
  int v37;

  v3 = a3;
  if (!(_DWORD)a3)
    return v3;
  v6 = 0;
  v7 = (char *)this + 16;
  v8 = (char *)this + 216;
  v34 = a2 + 2;
  v9 = a2;
  while (1)
  {
    while (1)
    {
      if (*((_DWORD *)this + 59))
      {
        v10 = *((unsigned int *)this + 58);
      }
      else
      {
        *((_DWORD *)this + 58) = a2;
        v10 = v9;
      }
      v11 = *(_DWORD *)(*(_QWORD *)this + 4 * v10);
      v35 = v11;
      v12 = *((_QWORD *)this + 28);
      v13 = *(_DWORD *)(v12 + 16);
      if (!v13)
        goto LABEL_20;
      v14 = v13 - 1;
      v15 = v14 & (37 * v11);
      v16 = *(_DWORD *)(*(_QWORD *)v12 + 16 * v15);
      if (v11 == v16)
        break;
      v26 = 1;
      while (v16 != -1)
      {
        v27 = v15 + v26++;
        v15 = v27 & v14;
        v16 = *(_DWORD *)(*(_QWORD *)v12 + 16 * v15);
        if (v11 == v16)
          goto LABEL_8;
      }
LABEL_20:
      v36 = v11;
      v28 = sub_1C484358C((uint64_t)v7, 64, 3);
      *(_QWORD *)v28 = 0;
      *(_QWORD *)(v28 + 8) = 0;
      *(_DWORD *)(v28 + 16) = 0;
      *(_DWORD *)(v28 + 24) = a2;
      *(_QWORD *)(v28 + 32) = v8;
      *(_DWORD *)(v28 + 40) = -1;
      *(_QWORD *)(v28 + 48) = 0;
      *(_DWORD *)(v28 + 56) = 0;
      inserted = 0;
      *(_QWORD *)(sub_1C514D9B4(v12, &v36) + 8) = v28;
      if (v6)
      {
        v25 = 0;
        inserted = *((_QWORD *)this + 28);
LABEL_22:
        *(_QWORD *)(v6 + 48) = inserted;
        inserted = v25;
      }
LABEL_23:
      v29 = v3 - 1;
      v30 = *((_QWORD *)this + 28);
      if (*(_DWORD *)(v30 + 24) == -1)
      {
        v31 = *((_DWORD *)this + 59);
        if (v31)
        {
          *((_DWORD *)this + 58) = v34 - v3;
          *((_DWORD *)this + 59) = v31 - 1;
        }
      }
      else
      {
        *((_QWORD *)this + 28) = *(_QWORD *)(v30 + 48);
      }
      v3 = (v3 - 1);
      v6 = inserted;
      if (!v29)
        return v3;
    }
LABEL_8:
    v17 = *(_QWORD *)(sub_1C514D9B4(*((_QWORD *)this + 28), &v35) + 8);
    v18 = *(_DWORD *)(v17 + 24);
    if (v18 == -1)
    {
      v19 = 0;
      v20 = *((_DWORD *)this + 59);
      goto LABEL_14;
    }
    v19 = **(_DWORD **)(v17 + 32) - v18 + 1;
    v20 = *((_DWORD *)this + 59);
    if (v20 < v19)
      break;
LABEL_14:
    *((_DWORD *)this + 58) += v19;
    *((_DWORD *)this + 59) = v20 - v19;
    *((_QWORD *)this + 28) = v17;
    if (!(_DWORD)v3)
      return v3;
  }
  v21 = *(_DWORD *)(*(_QWORD *)this + 4 * v9);
  if (*(_DWORD *)(*(_QWORD *)this + 4 * (v20 + v18)) != v21)
  {
    inserted = llvm::SuffixTree::insertInternalNode((uint64_t)this, *((_QWORD *)this + 28), v18, v20 + v18 - 1, v11);
    v37 = v21;
    v23 = sub_1C484358C((uint64_t)v7, 64, 3);
    *(_QWORD *)v23 = 0;
    *(_QWORD *)(v23 + 8) = 0;
    *(_DWORD *)(v23 + 16) = 0;
    *(_DWORD *)(v23 + 24) = a2;
    *(_QWORD *)(v23 + 32) = v8;
    *(_DWORD *)(v23 + 40) = -1;
    *(_QWORD *)(v23 + 48) = 0;
    *(_DWORD *)(v23 + 56) = 0;
    *(_QWORD *)(sub_1C514D9B4(inserted, &v37) + 8) = v23;
    v24 = *(_DWORD *)(v17 + 24) + *((_DWORD *)this + 59);
    *(_DWORD *)(v17 + 24) = v24;
    *(_QWORD *)(sub_1C514D9B4(inserted, (_DWORD *)(*(_QWORD *)this + 4 * v24)) + 8) = v17;
    v25 = inserted;
    if (!v6)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (v6)
  {
    v32 = *((_QWORD *)this + 28);
    if (*(_DWORD *)(v32 + 24) != -1)
      *(_QWORD *)(v6 + 48) = v32;
  }
  *((_DWORD *)this + 59) = v20 + 1;
  return v3;
}

void llvm::SuffixTree::setSuffixIndices(llvm::SuffixTree *this)
{
  uint64_t v1;
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v28;

  v1 = *((_QWORD *)this + 14);
  v2 = (char *)operator new(0x10uLL);
  v3 = v2 + 16;
  *(_QWORD *)v2 = v1;
  *((_DWORD *)v2 + 2) = 0;
  v4 = v2 + 16;
  do
  {
    v5 = *((_QWORD *)v4 - 2);
    v4 -= 16;
    v6 = *((_DWORD *)v4 + 2);
    *(_DWORD *)(v5 + 56) = v6;
    v7 = *(_DWORD *)(v5 + 8);
    v8 = *(unsigned int **)v5;
    v9 = *(unsigned int *)(v5 + 16);
    v10 = *(_QWORD *)v5 + 16 * v9;
    v28 = v5;
    if (v7)
    {
      if (v9)
      {
        v11 = 16 * v9;
        v12 = v8;
        while (*v12 >= 0xFFFFFFFE)
        {
          v12 += 4;
          v11 -= 16;
          if (!v11)
            goto LABEL_7;
        }
      }
      else
      {
        v12 = v8;
      }
    }
    else
    {
LABEL_7:
      v12 = (unsigned int *)v10;
    }
    v13 = &v8[4 * v9];
    if (v12 != v13)
    {
      while (1)
      {
        v14 = *((_QWORD *)v12 + 1);
        v15 = *(_DWORD *)(v14 + 24);
        if (v15 == -1)
          v16 = 0;
        else
          v16 = **(_DWORD **)(v14 + 32) - v15 + 1;
        v17 = v16 + v6;
        if (v4 < v3)
        {
          *(_QWORD *)v4 = v14;
          *((_DWORD *)v4 + 2) = v17;
          v4 += 16;
          goto LABEL_32;
        }
        v18 = (v4 - v2) >> 4;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 60)
          abort();
        if ((v3 - v2) >> 3 > v19)
          v19 = (v3 - v2) >> 3;
        if ((unint64_t)(v3 - v2) >= 0x7FFFFFFFFFFFFFF0)
          v20 = 0xFFFFFFFFFFFFFFFLL;
        else
          v20 = v19;
        if (v20)
        {
          if (v20 >> 60)
            sub_1C4764EE4();
          v21 = (char *)operator new(16 * v20);
        }
        else
        {
          v21 = 0;
        }
        v22 = &v21[16 * v18];
        v3 = &v21[16 * v20];
        *(_QWORD *)v22 = v14;
        *((_DWORD *)v22 + 2) = v17;
        v23 = v22 + 16;
        if (v4 == v2)
        {
          v2 = v4;
        }
        else
        {
          do
          {
            *((_OWORD *)v22 - 1) = *((_OWORD *)v4 - 1);
            v22 -= 16;
            v4 -= 16;
          }
          while (v4 != v2);
          if (!v2)
            goto LABEL_31;
        }
        operator delete(v2);
LABEL_31:
        v2 = v22;
        v4 = v23;
LABEL_32:
        v24 = v12 + 4;
        while (v24 != (unsigned int *)v10)
        {
          v25 = *v24;
          v24 += 4;
          if (v25 <= 0xFFFFFFFD)
          {
            v12 = v24 - 4;
            goto LABEL_37;
          }
        }
        v12 = (unsigned int *)v10;
LABEL_37:
        if (v12 == v13)
        {
          v26 = v28;
          if (!*(_DWORD *)(v28 + 8))
            goto LABEL_41;
          goto LABEL_43;
        }
      }
    }
    v26 = v28;
    if (!v7)
    {
LABEL_41:
      if (*(_DWORD *)(v26 + 24) != -1)
        *(_DWORD *)(v26 + 40) = *((_DWORD *)this + 2) - v6;
    }
LABEL_43:
    ;
  }
  while (v2 != v4);
  if (v2)
    operator delete(v2);
}

unint64_t llvm::SuffixTree::insertLeaf(uint64_t a1, uint64_t a2, int a3, int a4)
{
  unint64_t v7;
  int v9;

  v9 = a4;
  v7 = sub_1C484358C(a1 + 16, 64, 3);
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_DWORD *)(v7 + 16) = 0;
  *(_DWORD *)(v7 + 24) = a3;
  *(_QWORD *)(v7 + 32) = a1 + 216;
  *(_DWORD *)(v7 + 40) = -1;
  *(_QWORD *)(v7 + 48) = 0;
  *(_DWORD *)(v7 + 56) = 0;
  *(_QWORD *)(sub_1C514D9B4(a2, &v9) + 8) = v7;
  return v7;
}

void llvm::SymbolRemappingReader::read(llvm::SymbolRemappingReader *this@<X0>, llvm::MemoryBuffer *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  const void *v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  llvm::Twine *v22;
  const void *v23;
  size_t v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  unint64_t v36;
  const void *v37;
  size_t v38;
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  const void *v47;
  size_t v48;
  size_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  const void *v58;
  size_t v59;
  size_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD v71[4];
  __int16 v72;
  _QWORD v73[4];
  __int16 v74;
  _QWORD v75[2];
  uint64_t v76;
  uint64_t v77;
  __int16 v78;
  _QWORD v79[2];
  const char *v80;
  __int16 v81;
  _QWORD v82[4];
  __int16 v83;
  _QWORD v84[4];
  __int16 v85;
  _QWORD v86[2];
  _BYTE *v87;
  unint64_t v88;
  __int16 v89;
  _QWORD v90[4];
  __int16 v91;
  _QWORD v92[2];
  _BYTE v93[32];
  char v94;
  unsigned int v95;
  uint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD v100[10];

  v100[8] = *MEMORY[0x1E0C80C00];
  llvm::line_iterator::line_iterator((llvm::line_iterator *)v93, a2, 1, 35);
  if (v94)
  {
    while (1)
    {
      if (!v97)
        goto LABEL_41;
      v5 = 0;
      while (*(_BYTE *)(v96 + v5) == 32)
      {
        if (v97 == ++v5)
          goto LABEL_41;
      }
      v6 = v5 >= v97 ? v97 : v5;
      v7 = (_BYTE *)(v96 + v6);
      v8 = v97 - v6;
      v92[0] = v96 + v6;
      v92[1] = v97 - v6;
      if (v97 <= v5 || *v7 == 35)
        goto LABEL_41;
      v98 = v100;
      v99 = 0x400000000;
      llvm::StringRef::split((char *)v92, (uint64_t)&v98, 32, -1, 0);
      if ((_DWORD)v99 != 3)
      {
        v89 = 1283;
        v86[0] = "Expected 'kind mangled_name mangled_name', found '";
        v87 = v7;
        v88 = v8;
        v90[0] = v86;
        v90[2] = "'";
        v91 = 770;
        v12 = (const void *)(*(uint64_t (**)(llvm::MemoryBuffer *))(*(_QWORD *)a2 + 16))(a2);
        v14 = v13;
        v15 = v95;
        v16 = operator new();
        *(_QWORD *)v16 = &off_1E81A2828;
        v17 = (void *)(v16 + 8);
        if (v14 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_78;
        v18 = (_QWORD *)v16;
        if (v14 >= 0x17)
        {
          v19 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v14 | 7) != 0x17)
            v19 = v14 | 7;
          v20 = v19 + 1;
          v17 = operator new(v19 + 1);
          v18[2] = v14;
          v18[3] = v20 | 0x8000000000000000;
          v18[1] = v17;
        }
        else
        {
          *(_BYTE *)(v16 + 31) = v14;
          if (!v14)
            goto LABEL_26;
        }
        memmove(v17, v12, v14);
LABEL_26:
        *((_BYTE *)v17 + v14) = 0;
        v18[4] = v15;
        v21 = v18 + 5;
        v22 = (llvm::Twine *)v90;
LABEL_37:
        llvm::Twine::str(v22, v21);
        v31 = 0;
        *a3 = v18;
        goto LABEL_38;
      }
      v9 = (_QWORD *)*v98;
      v10 = v98[1];
      if (v10 == 8)
      {
        if (*v9 != 0x676E69646F636E65)
        {
LABEL_28:
          v89 = 1283;
          v86[0] = "Invalid kind, expected 'name', 'type', or 'encoding', found '";
          v87 = v9;
          v88 = v10;
          v84[0] = v86;
          v84[2] = "'";
          v85 = 770;
          v23 = (const void *)(*(uint64_t (**)(llvm::MemoryBuffer *))(*(_QWORD *)a2 + 16))(a2);
          v25 = v24;
          v26 = v95;
          v27 = operator new();
          *(_QWORD *)v27 = &off_1E81A2828;
          v28 = (_BYTE *)(v27 + 8);
          if (v25 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_78;
          v18 = (_QWORD *)v27;
          if (v25 >= 0x17)
          {
            v29 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v25 | 7) != 0x17)
              v29 = v25 | 7;
            v30 = v29 + 1;
            v28 = operator new(v29 + 1);
            v18[2] = v25;
            v18[3] = v30 | 0x8000000000000000;
            v18[1] = v28;
          }
          else
          {
            *(_BYTE *)(v27 + 31) = v25;
            if (!v25)
            {
LABEL_36:
              v28[v25] = 0;
              v18[4] = v26;
              v21 = v18 + 5;
              v22 = (llvm::Twine *)v84;
              goto LABEL_37;
            }
          }
          memmove(v28, v23, v25);
          goto LABEL_36;
        }
        v11 = 2;
      }
      else
      {
        if (v10 != 4)
          goto LABEL_28;
        if (*(_DWORD *)v9 == 1701667182)
        {
          v11 = 0;
        }
        else
        {
          if (*(_DWORD *)v9 != 1701869940)
            goto LABEL_28;
          v11 = 1;
        }
      }
      v32 = llvm::ItaniumManglingCanonicalizer::addEquivalence((uint64_t *)this, v11, (char *)v98[2], v98[3], (char *)v98[4], v98[5]);
      if (v32 == 3)
        break;
      if (v32 == 2)
      {
        v78 = 1283;
        v54 = v98[2];
        v55 = v98[3];
        v75[0] = "Could not demangle '";
        v76 = v54;
        v77 = v55;
        v79[0] = v75;
        v80 = "' as a <";
        v81 = 770;
        v56 = (_QWORD *)*v98;
        v57 = v98[1];
        v86[0] = v79;
        v87 = v56;
        v88 = v57;
        v89 = 1282;
        v73[0] = v86;
        v73[2] = ">; invalid mangling?";
        v74 = 770;
        v58 = (const void *)(*(uint64_t (**)(llvm::MemoryBuffer *))(*(_QWORD *)a2 + 16))(a2);
        v60 = v59;
        v61 = v95;
        v62 = operator new();
        *(_QWORD *)v62 = &off_1E81A2828;
        v63 = (void *)(v62 + 8);
        if (v60 > 0x7FFFFFFFFFFFFFF7)
LABEL_78:
          abort();
        v18 = (_QWORD *)v62;
        if (v60 >= 0x17)
        {
          v68 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v60 | 7) != 0x17)
            v68 = v60 | 7;
          v69 = v68 + 1;
          v63 = operator new(v68 + 1);
          v18[2] = v60;
          v18[3] = v69 | 0x8000000000000000;
          v18[1] = v63;
        }
        else
        {
          *(_BYTE *)(v62 + 31) = v60;
          if (!v60)
            goto LABEL_75;
        }
        memmove(v63, v58, v60);
LABEL_75:
        *((_BYTE *)v63 + v60) = 0;
        v18[4] = v61;
        v21 = v18 + 5;
        v22 = (llvm::Twine *)v73;
        goto LABEL_37;
      }
      if (v32 == 1)
      {
        v78 = 1283;
        v33 = v98[2];
        v34 = v98[3];
        v75[0] = "Manglings '";
        v76 = v33;
        v77 = v34;
        v79[0] = v75;
        v80 = "' and '";
        v81 = 770;
        v35 = (_BYTE *)v98[4];
        v36 = v98[5];
        v86[0] = v79;
        v87 = v35;
        v88 = v36;
        v89 = 1282;
        v82[0] = v86;
        v82[2] = "' have both been used in prior remappings. Move this remapping earlier in the file.";
        v83 = 770;
        v37 = (const void *)(*(uint64_t (**)(llvm::MemoryBuffer *))(*(_QWORD *)a2 + 16))(a2);
        v39 = v38;
        v40 = v95;
        v41 = operator new();
        *(_QWORD *)v41 = &off_1E81A2828;
        v42 = (_BYTE *)(v41 + 8);
        if (v39 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_78;
        v18 = (_QWORD *)v41;
        if (v39 >= 0x17)
        {
          v64 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v39 | 7) != 0x17)
            v64 = v39 | 7;
          v65 = v64 + 1;
          v42 = operator new(v64 + 1);
          v18[2] = v39;
          v18[3] = v65 | 0x8000000000000000;
          v18[1] = v42;
        }
        else
        {
          *(_BYTE *)(v41 + 31) = v39;
          if (!v39)
          {
LABEL_65:
            v42[v39] = 0;
            v18[4] = v40;
            v21 = v18 + 5;
            v22 = (llvm::Twine *)v82;
            goto LABEL_37;
          }
        }
        memmove(v42, v37, v39);
        goto LABEL_65;
      }
      v31 = 1;
LABEL_38:
      if (v98 != v100)
        free(v98);
      if (!v31)
        return;
LABEL_41:
      llvm::line_iterator::advance((uint64_t)v93);
      if (!v94)
        goto LABEL_76;
    }
    v78 = 1283;
    v43 = v98[4];
    v44 = v98[5];
    v75[0] = "Could not demangle '";
    v76 = v43;
    v77 = v44;
    v79[0] = v75;
    v80 = "' as a <";
    v81 = 770;
    v45 = (_QWORD *)*v98;
    v46 = v98[1];
    v86[0] = v79;
    v87 = v45;
    v88 = v46;
    v89 = 1282;
    v71[0] = v86;
    v71[2] = ">; invalid mangling?";
    v72 = 770;
    v47 = (const void *)(*(uint64_t (**)(llvm::MemoryBuffer *))(*(_QWORD *)a2 + 16))(a2);
    v49 = v48;
    v50 = v95;
    v51 = operator new();
    *(_QWORD *)v51 = &off_1E81A2828;
    v52 = (void *)(v51 + 8);
    if (v49 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_78;
    v53 = (_QWORD *)v51;
    if (v49 >= 0x17)
    {
      v66 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v49 | 7) != 0x17)
        v66 = v49 | 7;
      v67 = v66 + 1;
      v52 = operator new(v66 + 1);
      v53[2] = v49;
      v53[3] = v67 | 0x8000000000000000;
      v53[1] = v52;
    }
    else
    {
      *(_BYTE *)(v51 + 31) = v49;
      if (!v49)
        goto LABEL_70;
    }
    memmove(v52, v47, v49);
LABEL_70:
    *((_BYTE *)v52 + v49) = 0;
    v53[4] = v50;
    llvm::Twine::str((llvm::Twine *)v71, v53 + 5);
    v31 = 0;
    *a3 = v53;
    goto LABEL_38;
  }
LABEL_76:
  *a3 = 0;
}

uint64_t sub_1C5E3F000(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E81A2828;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

llvm *llvm::CheckBitcodeOutputToConsole(llvm *this, llvm::raw_ostream *a2)
{
  llvm *v2;
  llvm *v3;
  llvm::raw_ostream *v4;
  void *v5;

  v2 = (llvm *)(*(uint64_t (**)(llvm *, llvm::raw_ostream *))(*(_QWORD *)this + 48))(this, a2);
  v3 = v2;
  if ((_DWORD)v2)
  {
    v4 = (llvm::raw_ostream *)llvm::errs(v2);
    v5 = (void *)*((_QWORD *)v4 + 4);
    if (*((_QWORD *)v4 + 3) - (_QWORD)v5 > 0xCEuLL)
    {
      *((_QWORD *)v4 + 4) += 207;
    }
    else
    {
    }
  }
  return v3;
}

void llvm::TarWriter::create(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[4];
  __int16 v19;
  int v20;

  v20 = 0;
  v19 = 261;
  v18[0] = a1;
  v18[1] = a2;
  v11 = llvm::sys::fs::openFile((unsigned __int8 *)v18, &v20, 0, 2, 0, 438);
  if ((_DWORD)v11)
  {
    v12 = v10;
    v19 = 1283;
    v18[0] = "cannot open ";
    v18[2] = a1;
    v18[3] = a2;
    v13 = operator new();
    *(_QWORD *)v13 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v18, (_QWORD *)(v13 + 8));
    *(_QWORD *)(v13 + 32) = v11;
    *(_QWORD *)(v13 + 40) = v12;
    *(_BYTE *)(v13 + 48) = 1;
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v13;
    return;
  }
  v14 = operator new();
  llvm::raw_fd_ostream::raw_fd_ostream(v14, v20, 1, 0, 0);
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a4 >= 0x17)
  {
    v16 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v16 = a4 | 7;
    v17 = v16 + 1;
    v15 = operator new(v16 + 1);
    *(_QWORD *)(v14 + 104) = a4;
    *(_QWORD *)(v14 + 112) = v17 | 0x8000000000000000;
    *(_QWORD *)(v14 + 96) = v15;
  }
  else
  {
    v15 = (void *)(v14 + 96);
    *(_BYTE *)(v14 + 119) = a4;
    if (!a4)
      goto LABEL_11;
  }
  memmove(v15, a3, a4);
LABEL_11:
  *((_BYTE *)v15 + a4) = 0;
  *(_QWORD *)(v14 + 120) = 0;
  *(_QWORD *)(v14 + 128) = 0;
  *(_QWORD *)(v14 + 136) = 0x800000000;
  *(_BYTE *)(a5 + 8) &= ~1u;
  *(_QWORD *)a5 = v14;
}

uint64_t llvm::TarWriter::TarWriter(uint64_t a1, int a2, const void *a3, size_t a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;

  llvm::raw_fd_ostream::raw_fd_ostream(a1, a2, 1, 0, 0);
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a4 >= 0x17)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *(_QWORD *)(a1 + 104) = a4;
    *(_QWORD *)(a1 + 112) = v9 | 0x8000000000000000;
    *(_QWORD *)(a1 + 96) = v7;
  }
  else
  {
    v7 = (void *)(a1 + 96);
    *(_BYTE *)(a1 + 119) = a4;
    if (!a4)
      goto LABEL_9;
  }
  memmove(v7, a3, a4);
LABEL_9:
  *((_BYTE *)v7 + a4) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0x800000000;
  return a1;
}

{
  void *v7;
  uint64_t v8;
  uint64_t v9;

  llvm::raw_fd_ostream::raw_fd_ostream(a1, a2, 1, 0, 0);
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a4 >= 0x17)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *(_QWORD *)(a1 + 104) = a4;
    *(_QWORD *)(a1 + 112) = v9 | 0x8000000000000000;
    *(_QWORD *)(a1 + 96) = v7;
  }
  else
  {
    v7 = (void *)(a1 + 96);
    *(_BYTE *)(a1 + 119) = a4;
    if (!a4)
      goto LABEL_9;
  }
  memmove(v7, a3, a4);
LABEL_9:
  *((_BYTE *)v7 + a4) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0x800000000;
  return a1;
}

void llvm::TarWriter::append(_QWORD *a1, void *a2, size_t a3, const void *a4, size_t a5)
{
  char v10;
  int v11;
  size_t v12;
  size_t v13;
  _BYTE *v14;
  const void *v15;
  const std::string::value_type *p_p;
  std::string::size_type v17;
  std::string *v18;
  std::string::size_type v19;
  unsigned __int8 *v20;
  size_t v21;
  char v22;
  void **v23;
  unint64_t v24;
  size_t v25;
  char *v26;
  llvm::raw_ostream *v27;
  const char *v28;
  size_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  size_t v40;
  int32x4_t v41;
  uint64_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  uint8x16_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  void *v49;
  const char *v50;
  size_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  const char *v60;
  void *v61[2];
  uint64_t v62;
  void *v63;
  size_t v64;
  char v65;
  _QWORD v66[4];
  __int16 v67;
  _QWORD v68[4];
  __int16 v69;
  _QWORD v70[4];
  __int16 v71;
  void *__p;
  uint64_t v73;
  void **v74;
  unint64_t v75;
  __int16 v76;
  _BYTE __src[512];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v10 = *((_BYTE *)a1 + 119);
  v11 = v10;
  v12 = v10 & 0x7F;
  if (v11 >= 0)
    v13 = v12;
  else
    v13 = a1[13];
  v14 = __src;
  sub_1C484371C((uint64_t)__src, v13 + 1);
  if (__src[23] < 0)
    v14 = *(_BYTE **)__src;
  if (v13)
  {
    if (*((char *)a1 + 119) >= 0)
      v15 = a1 + 12;
    else
      v15 = (const void *)a1[12];
    memmove(v14, v15, v13);
  }
  *(_WORD *)&v14[v13] = 47;
  llvm::sys::path::convert_to_slash(a2, a3, 0, (uint64_t)&__p);
  if (SHIBYTE(v74) >= 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if (SHIBYTE(v74) >= 0)
    v17 = HIBYTE(v74) & 0x7F;
  else
    v17 = v73;
  v18 = std::string::append((std::string *)__src, p_p, v17);
  v19 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)v61 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v62 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v74) < 0)
    operator delete(__p);
  if ((__src[23] & 0x80000000) != 0)
    operator delete(*(void **)__src);
  if (v62 >= 0)
    v20 = (unsigned __int8 *)v61;
  else
    v20 = (unsigned __int8 *)v61[0];
  if (v62 >= 0)
    v21 = HIBYTE(v62) & 0x7F;
  else
    v21 = (size_t)v61[1];
  sub_1C4F024D8((llvm::StringMapImpl *)(a1 + 15), v20, v21);
  if ((v22 & 1) != 0)
  {
    if (v62 >= 0)
      v23 = v61;
    else
      v23 = (void **)v61[0];
    if (v62 >= 0)
      v24 = HIBYTE(v62) & 0x7F;
    else
      v24 = (unint64_t)v61[1];
    if (v24 >= 0x64)
    {
      v30 = 138;
      if (v24 < 0x8A)
        v30 = v24;
      v31 = v30 + 1;
      do
      {
        v32 = v31 - 1;
        if (v31 == 1)
          goto LABEL_43;
        v33 = *((unsigned __int8 *)v23 + v31-- - 2);
      }
      while (v33 != 47);
      if (v24 - v32 > 0x63)
      {
LABEL_43:
        v34 = v24 + 7;
        *(_WORD *)&__src[32] = 265;
        *(_DWORD *)__src = v24 + 7;
        llvm::Twine::str((llvm::Twine *)__src, &__p);
        if (SHIBYTE(v74) >= 0)
          v35 = HIBYTE(v74);
        else
          v35 = v73;
        v36 = v34 + v35;
        if ((HIBYTE(v74) & 0x80) != 0)
          operator delete(__p);
        *(_WORD *)&__src[32] = 265;
        *(_DWORD *)__src = v36;
        llvm::Twine::str((llvm::Twine *)__src, &__p);
        v37 = HIBYTE(v74);
        v38 = v73;
        if (SHIBYTE(v74) < 0)
          operator delete(__p);
        if ((v37 & 0x80u) == 0)
          v39 = v37;
        else
          v39 = v38;
        v66[0] = (v34 + v39);
        v66[2] = " ";
        v67 = 777;
        v68[0] = v66;
        v68[2] = "path";
        v68[3] = 4;
        v69 = 1282;
        v70[0] = v68;
        v70[1] = 4;
        v70[2] = "=";
        v71 = 770;
        __p = v70;
        v73 = 4;
        v74 = v23;
        v75 = v24;
        v76 = 1282;
        *(_QWORD *)__src = &__p;
        *(_QWORD *)&__src[8] = 4;
        *(_QWORD *)&__src[16] = "\n";
        *(_WORD *)&__src[32] = 770;
        llvm::Twine::str((llvm::Twine *)__src, &v63);
        memset(__src, 0, sizeof(__src));
        qmemcpy(&__src[257], "ustar", 5);
        v40 = v65 & 0x7F;
        if (v65 < 0)
          v40 = v64;
        *(_WORD *)&__src[263] = 12336;
        snprintf(&__src[124], 0xCuLL, "%011zo", v40);
        v41 = 0uLL;
        v42 = 0;
        qmemcpy(&__src[148], "        x", 9);
        v43 = 0uLL;
        v44 = 0uLL;
        v45 = 0uLL;
        do
        {
          v46 = *(uint8x16_t *)&__src[v42];
          v47 = vmovl_u8(*(uint8x8_t *)v46.i8);
          v48 = vmovl_high_u8(v46);
          v45 = (int32x4_t)vaddw_high_u16((uint32x4_t)v45, v48);
          v44 = (int32x4_t)vaddw_u16((uint32x4_t)v44, *(uint16x4_t *)v48.i8);
          v43 = (int32x4_t)vaddw_high_u16((uint32x4_t)v43, v47);
          v41 = (int32x4_t)vaddw_u16((uint32x4_t)v41, *(uint16x4_t *)v47.i8);
          v42 += 16;
        }
        while (v42 != 512);
        snprintf(&__src[148], 8uLL, "%06o", vaddvq_s32(vaddq_s32(vaddq_s32(v41, v44), vaddq_s32(v43, v45))));
        v49 = (void *)a1[4];
        if (a1[3] - (_QWORD)v49 > 0x1FFuLL)
        {
          memcpy(v49, __src, 0x200uLL);
          a1[4] += 512;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)a1, __src, 0x200uLL);
        }
        if (v65 >= 0)
          v50 = (const char *)&v63;
        else
          v50 = (const char *)v63;
        if (v65 >= 0)
          v51 = v65 & 0x7F;
        else
          v51 = v64;
        llvm::raw_ostream::write((llvm::raw_ostream *)a1, v50, v51);
        v52 = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
        llvm::raw_fd_ostream::seek((llvm::raw_fd_ostream *)a1, (v52 + a1[4] - a1[2] + 511) & 0xFFFFFFFFFFFFFE00);
        if (v65 < 0)
          operator delete(v63);
        v28 = "";
        v27 = (llvm::raw_ostream *)a1;
        v25 = 0;
        v26 = "";
        v29 = 0;
        goto LABEL_69;
      }
      if (v24 >= v32 - 1)
        v25 = v32 - 1;
      else
        v25 = v24;
      if (v24 < v32)
        v32 = v24;
      v26 = (char *)v23 + v32;
      v24 -= v32;
    }
    else
    {
      v25 = 0;
      v26 = (char *)v23;
      v23 = (void **)"";
    }
    v27 = (llvm::raw_ostream *)a1;
    v28 = (const char *)v23;
    v29 = v24;
LABEL_69:
    sub_1C5E3FA10(v27, v28, v25, v26, v29, a5);
    v53 = (void *)a1[4];
    if (a5 <= a1[3] - (_QWORD)v53)
    {
      if (a5)
      {
        memcpy(v53, a4, a5);
        a1[4] += a5;
      }
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a1, (const char *)a4, a5);
    }
    v54 = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
    llvm::raw_fd_ostream::seek((llvm::raw_fd_ostream *)a1, (v54 + a1[4] - a1[2] + 511) & 0xFFFFFFFFFFFFFE00);
    v55 = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
    v56 = a1[2];
    v57 = v55 + a1[4];
    v58 = operator new(0x408uLL);
    bzero(v58, 0x401uLL);
    llvm::raw_ostream::write((llvm::raw_ostream *)a1, (const char *)v58, 0x400uLL);
    operator delete(v58);
    llvm::raw_fd_ostream::seek((llvm::raw_fd_ostream *)a1, v57 - v56);
    v59 = (const char *)a1[4];
    v60 = (const char *)a1[2];
    if (v59 != v60)
    {
      a1[4] = v60;
      llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)a1, v60, v59 - v60);
    }
  }
  if (SHIBYTE(v62) < 0)
    operator delete(v61[0]);
}

llvm::raw_ostream *sub_1C5E3FA10(llvm::raw_ostream *a1, const void *a2, size_t a3, void *__src, size_t __n, uint64_t a6)
{
  int32x4_t v10;
  uint64_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  uint8x16_t v15;
  uint16x8_t v16;
  uint16x8_t v17;
  void *v18;
  llvm::raw_ostream *result;
  _OWORD __dst[32];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  memset(__dst, 0, sizeof(__dst));
  *(_DWORD *)((char *)&__dst[16] + 1) = 1635021685;
  BYTE5(__dst[16]) = 114;
  *(_WORD *)((char *)&__dst[16] + 7) = 12336;
  memcpy(__dst, __src, __n);
  *(_QWORD *)((char *)&__dst[6] + 4) = 0x34363630303030;
  snprintf((char *)&__dst[7] + 12, 0xCuLL, "%011zo", a6);
  memcpy((char *)&__dst[21] + 9, a2, a3);
  v10 = 0uLL;
  v11 = 0;
  *(_QWORD *)((char *)&__dst[9] + 4) = 0x2020202020202020;
  v12 = 0uLL;
  v13 = 0uLL;
  v14 = 0uLL;
  do
  {
    v15 = (uint8x16_t)__dst[v11];
    v16 = vmovl_u8(*(uint8x8_t *)v15.i8);
    v17 = vmovl_high_u8(v15);
    v14 = (int32x4_t)vaddw_high_u16((uint32x4_t)v14, v17);
    v13 = (int32x4_t)vaddw_u16((uint32x4_t)v13, *(uint16x4_t *)v17.i8);
    v12 = (int32x4_t)vaddw_high_u16((uint32x4_t)v12, v16);
    v10 = (int32x4_t)vaddw_u16((uint32x4_t)v10, *(uint16x4_t *)v16.i8);
    ++v11;
  }
  while (v11 != 32);
  snprintf((char *)&__dst[9] + 4, 8uLL, "%06o", vaddvq_s32(vaddq_s32(vaddq_s32(v10, v13), vaddq_s32(v12, v14))));
  v18 = (void *)*((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 3) - (_QWORD)v18 <= 0x1FFuLL)
    return llvm::raw_ostream::write(a1, (const char *)__dst, 0x200uLL);
  result = (llvm::raw_ostream *)memcpy(v18, __dst, 0x200uLL);
  *((_QWORD *)a1 + 4) += 512;
  return result;
}

const char *llvm::AMDGPU::getArchNameAMDGCN(unsigned int a1)
{
  unint64_t v1;
  __int128 *v2;
  unint64_t v3;
  char *v4;
  unsigned int v5;
  __int128 *v6;

  v1 = 52;
  v2 = &xmmword_1E81A2868;
  do
  {
    v3 = v1 >> 1;
    v4 = (char *)v2 + 40 * (v1 >> 1);
    v5 = *((_DWORD *)v4 + 8);
    v6 = (__int128 *)(v4 + 40);
    v1 += ~(v1 >> 1);
    if (v5 < a1)
      v2 = v6;
    else
      v1 = v3;
  }
  while (v1);
  if (v2 == &xmmword_1E81A3088 || v2 == 0)
    return "";
  else
    return (const char *)*((_QWORD *)v2 + 2);
}

const char *llvm::AMDGPU::getArchNameR600(unsigned int a1)
{
  unint64_t v1;
  __int128 *v2;
  unint64_t v3;
  char *v4;
  unsigned int v5;
  __int128 *v6;

  v1 = 26;
  v2 = &xmmword_1E81A3088;
  do
  {
    v3 = v1 >> 1;
    v4 = (char *)v2 + 40 * (v1 >> 1);
    v5 = *((_DWORD *)v4 + 8);
    v6 = (__int128 *)(v4 + 40);
    v1 += ~(v1 >> 1);
    if (v5 < a1)
      v2 = v6;
    else
      v1 = v3;
  }
  while (v1);
  if (v2 == (__int128 *)&off_1E81A3498 || v2 == 0)
    return "";
  else
    return (const char *)*((_QWORD *)v2 + 2);
}

_DWORD *llvm::AMDGPU::fillValidArchListAMDGCN(_DWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  __int128 v5;
  __int128 v6;

  v1 = (uint64_t)result;
  v2 = 0;
  v3 = (uint64_t)(result + 4);
  v4 = result[2];
  do
  {
    v5 = *(__int128 *)((char *)&xmmword_1E81A2868 + v2);
    if (v4 >= *(_DWORD *)(v1 + 12))
    {
      v6 = *(__int128 *)((char *)&xmmword_1E81A2868 + v2);
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(v1, v3, v4 + 1, 16);
      v5 = v6;
      v4 = *(_DWORD *)(v1 + 8);
    }
    *(_OWORD *)(*(_QWORD *)v1 + 16 * v4) = v5;
    v4 = *(_DWORD *)(v1 + 8) + 1;
    *(_DWORD *)(v1 + 8) = v4;
    v2 += 40;
  }
  while (v2 != 2080);
  return result;
}

_DWORD *llvm::AMDGPU::fillValidArchListR600(_DWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  __int128 v5;
  __int128 v6;

  v1 = (uint64_t)result;
  v2 = 0;
  v3 = (uint64_t)(result + 4);
  v4 = result[2];
  do
  {
    v5 = *(__int128 *)((char *)&xmmword_1E81A3088 + v2);
    if (v4 >= *(_DWORD *)(v1 + 12))
    {
      v6 = *(__int128 *)((char *)&xmmword_1E81A3088 + v2);
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(v1, v3, v4 + 1, 16);
      v5 = v6;
      v4 = *(_DWORD *)(v1 + 8);
    }
    *(_OWORD *)(*(_QWORD *)v1 + 16 * v4) = v5;
    v4 = *(_DWORD *)(v1 + 8) + 1;
    *(_DWORD *)(v1 + 8) = v4;
    v2 += 40;
  }
  while (v2 != 1040);
  return result;
}

uint64_t llvm::AMDGPU::getIsaVersion(_DWORD *a1, size_t a2)
{
  int *v4;
  int *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  v4 = &dword_1E81A2888;
  do
  {
    v5 = v4 - 8;
    if (a2 == *((_QWORD *)v4 - 3) && (!a2 || !memcmp(a1, *((const void **)v4 - 4), a2)))
    {
      v6 = 0;
      v8 = 6;
      switch(*v4)
      {
        case 0:
          goto LABEL_6;
        case 32:
          return v6 | v8;
        case 33:
          v6 = 0;
          goto LABEL_17;
        case 34:
          v6 = 0;
LABEL_17:
          v8 = 6;
          return v6 | v8;
        case 40:
          v6 = 0;
          goto LABEL_24;
        case 41:
          v6 = 0;
          goto LABEL_24;
        case 42:
          v6 = 0;
          goto LABEL_24;
        case 43:
          v6 = 0;
          goto LABEL_24;
        case 44:
          v6 = 0;
          goto LABEL_24;
        case 45:
          v6 = 0;
LABEL_24:
          v8 = 7;
          return v6 | v8;
        case 50:
          v6 = 0;
          goto LABEL_30;
        case 51:
          v6 = 0;
          goto LABEL_30;
        case 52:
          v6 = 0;
          goto LABEL_30;
        case 53:
          v6 = 0;
          goto LABEL_30;
        case 54:
          v6 = 0x100000000;
LABEL_30:
          v8 = 8;
          return v6 | v8;
        case 60:
          v6 = 0;
          goto LABEL_40;
        case 61:
          v6 = 0;
          goto LABEL_40;
        case 62:
          v6 = 0;
          goto LABEL_40;
        case 63:
          v6 = 0;
          goto LABEL_40;
        case 64:
          v6 = 0;
          goto LABEL_40;
        case 65:
          v6 = 0;
          v8 = 9;
          return v6 | v8;
        case 66:
          v6 = 0;
          goto LABEL_40;
        case 67:
          v6 = 0;
          goto LABEL_40;
        case 68:
          v6 = 0x400000000;
LABEL_40:
          v8 = 9;
          return v6 | v8;
        case 71:
          v6 = 0x100000000;
          goto LABEL_55;
        case 72:
          v6 = 0x100000000;
          goto LABEL_55;
        case 73:
          v6 = 0x100000000;
          goto LABEL_55;
        case 74:
          v6 = 0x100000000;
          goto LABEL_55;
        case 75:
          v6 = 0x300000000;
          goto LABEL_55;
        case 76:
          v6 = 0x300000000;
          goto LABEL_55;
        case 77:
          v6 = 0x300000000;
          goto LABEL_55;
        case 78:
          v6 = 0x300000000;
          goto LABEL_55;
        case 79:
          v6 = 0x300000000;
          goto LABEL_55;
        case 80:
          v6 = 0x300000000;
          goto LABEL_55;
        case 81:
          v6 = 0x300000000;
LABEL_55:
          v8 = 10;
          break;
        default:
          goto LABEL_11;
      }
      return v6 | v8;
    }
    v4 += 10;
  }
  while (v5 + 10 != (int *)&xmmword_1E81A3088);
LABEL_6:
  if (a2 == 7)
  {
    v6 = 0;
    v7 = (*a1 ^ 0x656E6567 | *(_DWORD *)((char *)a1 + 3) ^ 0x63697265) == 0;
    v8 = 6;
  }
  else
  {
    if (a2 != 11)
    {
LABEL_11:
      v8 = 0;
      v6 = 0;
      return v6 | v8;
    }
    v6 = 0;
    v7 = (*(_QWORD *)a1 ^ 0x2D636972656E6567 | *(_QWORD *)((char *)a1 + 3) ^ 0x6173682D63697265) == 0;
    v8 = 7;
  }
  if (!v7)
    v8 = 0;
  return v6 | v8;
}

uint64_t llvm::RISCV::parseCPUKind(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = 0;
  switch(a2)
  {
    case 7:
      if (*(_DWORD *)a1 != 1635151465 || *(_DWORD *)(a1 + 3) != 1684630625)
        goto LABEL_83;
      v2 = 0x100000000;
      break;
    case 10:
      if (*(_QWORD *)a1 == 0x652D657669666973 && *(_WORD *)(a1 + 8) == 12338)
      {
        v2 = 0x100000007;
      }
      else if (*(_QWORD *)a1 == 0x652D657669666973 && *(_WORD *)(a1 + 8) == 12594)
      {
        v2 = 0x100000008;
      }
      else if (*(_QWORD *)a1 == 0x652D657669666973 && *(_WORD *)(a1 + 8) == 13362)
      {
        v2 = 0x100000009;
      }
      else if (*(_QWORD *)a1 == 0x652D657669666973 && *(_WORD *)(a1 + 8) == 12595)
      {
        v2 = 0x10000000ALL;
      }
      else if (*(_QWORD *)a1 == 0x652D657669666973 && *(_WORD *)(a1 + 8) == 13363)
      {
        v2 = 0x10000000BLL;
      }
      else if (*(_QWORD *)a1 == 0x652D657669666973 && *(_WORD *)(a1 + 8) == 13879)
      {
        v2 = 0x10000000CLL;
      }
      else if (*(_QWORD *)a1 == 0x732D657669666973 && *(_WORD *)(a1 + 8) == 12594)
      {
        v2 = 0x10000000DLL;
      }
      else if (*(_QWORD *)a1 == 0x732D657669666973 && *(_WORD *)(a1 + 8) == 12597)
      {
        v2 = 0x10000000ELL;
      }
      else if (*(_QWORD *)a1 == 0x732D657669666973 && *(_WORD *)(a1 + 8) == 13365)
      {
        v2 = 0x10000000FLL;
      }
      else if (*(_QWORD *)a1 == 0x732D657669666973 && *(_WORD *)(a1 + 8) == 13879)
      {
        v2 = 0x100000010;
      }
      else if (*(_QWORD *)a1 == 0x752D657669666973 && *(_WORD *)(a1 + 8) == 13365)
      {
        v2 = 0x100000011;
      }
      else
      {
        v2 = 0x100000012;
        if (*(_QWORD *)a1 ^ 0x752D657669666973 | *(unsigned __int16 *)(a1 + 8) ^ 0x3437)
          v2 = 0;
      }
      break;
    case 11:
      if (*(_QWORD *)a1 == 0x722D74656B636F72 && *(_QWORD *)(a1 + 3) == 0x323376722D74656BLL)
      {
        v2 = 0x100000003;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x722D74656B636F72 || *(_QWORD *)(a1 + 3) != 0x343676722D74656BLL)
          goto LABEL_83;
        v2 = 0x100000004;
      }
      break;
    case 12:
      if (*(_QWORD *)a1 == 0x2D636972656E6567 && *(_DWORD *)(a1 + 8) == 842233458)
      {
        v2 = 0x100000001;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x2D636972656E6567 || *(_DWORD *)(a1 + 8) != 875984498)
          goto LABEL_83;
        v2 = 0x100000002;
      }
      break;
    case 13:
      if (*(_QWORD *)a1 == 0x372D657669666973 && *(_QWORD *)(a1 + 5) == 0x323376722D372D65)
      {
        v2 = 0x100000005;
      }
      else if (*(_QWORD *)a1 == 0x372D657669666973 && *(_QWORD *)(a1 + 5) == 0x343676722D372D65)
      {
        v2 = 0x100000006;
      }
      else
      {
LABEL_83:
        v2 = 0;
      }
      break;
    default:
      break;
  }
  if ((v2 & 0x300000000) != 0)
    return v2;
  else
    return 0;
}

const char *llvm::RISCV::resolveTuneCPUAlias(const char *result, uint64_t a2, int a3)
{
  const char *v3;

  switch(a2)
  {
    case 6:
      v3 = "rocket-rv32";
      if (a3)
        v3 = "rocket-rv64";
      if (*(_DWORD *)result == 1801678706 && *((_WORD *)result + 2) == 29797)
        return v3;
      break;
    case 15:
      v3 = "sifive-7-rv32";
      if (a3)
        v3 = "sifive-7-rv64";
      if (*(_QWORD *)result == 0x372D657669666973 && *(_QWORD *)(result + 7) == 0x7365697265732D37)
        return v3;
      break;
    case 7:
      v3 = "generic-rv32";
      if (a3)
        v3 = "generic-rv64";
      if (*(_DWORD *)result != 1701733735 || *(_DWORD *)(result + 3) != 1667854949)
        return result;
      return v3;
    default:
      return result;
  }
  return result;
}

uint64_t llvm::RISCV::parseTuneCPUKind(const char *a1, uint64_t a2, int a3)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = llvm::RISCV::resolveTuneCPUAlias(a1, a2, a3);
  v4 = 0;
  switch(v5)
  {
    case 7:
      if (*(_DWORD *)v3 != 1635151465 || *(_DWORD *)(v3 + 3) != 1684630625)
        goto LABEL_83;
      v4 = 0x100000000;
      break;
    case 10:
      if (*(_QWORD *)v3 == 0x652D657669666973 && *((_WORD *)v3 + 4) == 12338)
      {
        v4 = 0x100000007;
      }
      else if (*(_QWORD *)v3 == 0x652D657669666973 && *((_WORD *)v3 + 4) == 12594)
      {
        v4 = 0x100000008;
      }
      else if (*(_QWORD *)v3 == 0x652D657669666973 && *((_WORD *)v3 + 4) == 13362)
      {
        v4 = 0x100000009;
      }
      else if (*(_QWORD *)v3 == 0x652D657669666973 && *((_WORD *)v3 + 4) == 12595)
      {
        v4 = 0x10000000ALL;
      }
      else if (*(_QWORD *)v3 == 0x652D657669666973 && *((_WORD *)v3 + 4) == 13363)
      {
        v4 = 0x10000000BLL;
      }
      else if (*(_QWORD *)v3 == 0x652D657669666973 && *((_WORD *)v3 + 4) == 13879)
      {
        v4 = 0x10000000CLL;
      }
      else if (*(_QWORD *)v3 == 0x732D657669666973 && *((_WORD *)v3 + 4) == 12594)
      {
        v4 = 0x10000000DLL;
      }
      else if (*(_QWORD *)v3 == 0x732D657669666973 && *((_WORD *)v3 + 4) == 12597)
      {
        v4 = 0x10000000ELL;
      }
      else if (*(_QWORD *)v3 == 0x732D657669666973 && *((_WORD *)v3 + 4) == 13365)
      {
        v4 = 0x10000000FLL;
      }
      else if (*(_QWORD *)v3 == 0x732D657669666973 && *((_WORD *)v3 + 4) == 13879)
      {
        v4 = 0x100000010;
      }
      else if (*(_QWORD *)v3 == 0x752D657669666973 && *((_WORD *)v3 + 4) == 13365)
      {
        v4 = 0x100000011;
      }
      else
      {
        v4 = 0x100000012;
        if (*(_QWORD *)v3 ^ 0x752D657669666973 | *((unsigned __int16 *)v3 + 4) ^ 0x3437)
          v4 = 0;
      }
      break;
    case 11:
      if (*(_QWORD *)v3 == 0x722D74656B636F72 && *(_QWORD *)(v3 + 3) == 0x323376722D74656BLL)
      {
        v4 = 0x100000003;
      }
      else
      {
        if (*(_QWORD *)v3 != 0x722D74656B636F72 || *(_QWORD *)(v3 + 3) != 0x343676722D74656BLL)
          goto LABEL_83;
        v4 = 0x100000004;
      }
      break;
    case 12:
      if (*(_QWORD *)v3 == 0x2D636972656E6567 && *((_DWORD *)v3 + 2) == 842233458)
      {
        v4 = 0x100000001;
      }
      else
      {
        if (*(_QWORD *)v3 != 0x2D636972656E6567 || *((_DWORD *)v3 + 2) != 875984498)
          goto LABEL_83;
        v4 = 0x100000002;
      }
      break;
    case 13:
      if (*(_QWORD *)v3 == 0x372D657669666973 && *(_QWORD *)(v3 + 5) == 0x323376722D372D65)
      {
        v4 = 0x100000005;
      }
      else if (*(_QWORD *)v3 == 0x372D657669666973 && *(_QWORD *)(v3 + 5) == 0x343676722D372D65)
      {
        v4 = 0x100000006;
      }
      else
      {
LABEL_83:
        v4 = 0;
      }
      break;
    default:
      break;
  }
  if ((v4 & 0x300000000) != 0)
    return v4;
  else
    return 0;
}

uint64_t llvm::RISCV::fillValidCPUArchList(uint64_t result, int a2)
{
  uint64_t v3;
  uint64_t i;
  char **v5;
  uint64_t v6;

  v3 = result;
  for (i = 0; i != 95; i += 5)
  {
    v5 = &(&off_1E81A3498)[i];
    if (LODWORD((&off_1E81A3498)[i + 2]) && a2 == (*((_BYTE *)v5 + 20) & 4) >> 2)
    {
      v6 = *(unsigned int *)(v3 + 8);
      if (v6 >= *(_DWORD *)(v3 + 12))
      {
        result = sub_1C5979F58(v3, (__int128 *)v5);
      }
      else
      {
        *(_OWORD *)(*(_QWORD *)v3 + 16 * v6) = *(_OWORD *)v5;
        ++*(_DWORD *)(v3 + 8);
      }
    }
  }
  return result;
}

_DWORD *llvm::RISCV::fillValidTuneCPUArchList(_DWORD *result, int a2)
{
  _DWORD *v3;
  uint64_t i;
  char **v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  _QWORD *v11;
  unsigned int v12;
  _QWORD *v13;

  v3 = result;
  for (i = 0; i != 95; i += 5)
  {
    v5 = &(&off_1E81A3498)[i];
    if (LODWORD((&off_1E81A3498)[i + 2]) && a2 == (*((_BYTE *)v5 + 20) & 4) >> 2)
    {
      v6 = v3[2];
      if (v6 >= v3[3])
      {
        result = (_DWORD *)sub_1C5979F58((uint64_t)v3, (__int128 *)v5);
      }
      else
      {
        *(_OWORD *)(*(_QWORD *)v3 + 16 * v6) = *(_OWORD *)v5;
        ++v3[2];
      }
    }
  }
  v8 = v3[2];
  v7 = v3[3];
  if (v8 >= v7)
  {
    result = sub_1C4F76720(v3, (uint64_t)"generic", 7);
    v10 = v3[2];
    v7 = v3[3];
  }
  else
  {
    v9 = (_QWORD *)(*(_QWORD *)v3 + 16 * v8);
    *v9 = "generic";
    v9[1] = 7;
    v10 = v8 + 1;
    v3[2] = v10;
  }
  if (v10 >= v7)
  {
    result = sub_1C4F76720(v3, (uint64_t)"rocket", 6);
    v12 = v3[2];
    v7 = v3[3];
  }
  else
  {
    v11 = (_QWORD *)(*(_QWORD *)v3 + 16 * v10);
    *v11 = "rocket";
    v11[1] = 6;
    v12 = v10 + 1;
    v3[2] = v12;
  }
  if (v12 >= v7)
    return sub_1C4F76720(v3, (uint64_t)"sifive-7-series", 15);
  v13 = (_QWORD *)(*(_QWORD *)v3 + 16 * v12);
  *v13 = "sifive-7-series";
  v13[1] = 15;
  v3[2] = v12 + 1;
  return result;
}

BOOL llvm::RISCV::getCPUFeaturesExceptStdExt(unsigned int a1, const char ***a2)
{
  int v2;
  unint64_t v4;
  const char **v5;
  const char *v6;
  const char **v7;
  const char **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  const char **v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;

  v2 = *((_DWORD *)&off_1E81A3498 + 10 * a1 + 5);
  if (v2)
  {
    v5 = a2[1];
    v4 = (unint64_t)a2[2];
    if ((v2 & 4) != 0)
    {
      if ((unint64_t)v5 < v4)
      {
        v6 = "+64bit";
        goto LABEL_7;
      }
      v14 = *a2;
      v15 = ((char *)v5 - (char *)*a2) >> 4;
      v16 = v15 + 1;
      if (!((unint64_t)(v15 + 1) >> 60))
      {
        v17 = v4 - (_QWORD)v14;
        if (v17 >> 3 > v16)
          v16 = v17 >> 3;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
          v18 = 0xFFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          if (v18 >> 60)
            goto LABEL_39;
          v19 = (char *)operator new(16 * v18);
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[16 * v15];
        v21 = &v19[16 * v18];
        *(_QWORD *)v20 = "+64bit";
        *((_QWORD *)v20 + 1) = 6;
        v7 = (const char **)(v20 + 16);
        if (v5 == v14)
          goto LABEL_34;
        do
        {
          *((_OWORD *)v20 - 1) = *((_OWORD *)v5 - 1);
          v20 -= 16;
          v5 -= 2;
        }
        while (v5 != v14);
LABEL_33:
        v5 = *a2;
LABEL_34:
        *a2 = (const char **)v20;
        a2[1] = v7;
        a2[2] = (const char **)v21;
        if (v5)
          operator delete(v5);
        goto LABEL_36;
      }
    }
    else
    {
      if ((unint64_t)v5 < v4)
      {
        v6 = "-64bit";
LABEL_7:
        *v5 = v6;
        v5[1] = (const char *)6;
        v7 = v5 + 2;
LABEL_36:
        a2[1] = v7;
        return v2 != 0;
      }
      v8 = *a2;
      v9 = ((char *)v5 - (char *)*a2) >> 4;
      v10 = v9 + 1;
      if (!((unint64_t)(v9 + 1) >> 60))
      {
        v11 = v4 - (_QWORD)v8;
        if (v11 >> 3 > v10)
          v10 = v11 >> 3;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
          v12 = 0xFFFFFFFFFFFFFFFLL;
        else
          v12 = v10;
        if (!v12)
        {
          v13 = 0;
          goto LABEL_27;
        }
        if (!(v12 >> 60))
        {
          v13 = (char *)operator new(16 * v12);
LABEL_27:
          v20 = &v13[16 * v9];
          v21 = &v13[16 * v12];
          *(_QWORD *)v20 = "-64bit";
          *((_QWORD *)v20 + 1) = 6;
          v7 = (const char **)(v20 + 16);
          if (v5 == v8)
            goto LABEL_34;
          do
          {
            *((_OWORD *)v20 - 1) = *((_OWORD *)v5 - 1);
            v20 -= 16;
            v5 -= 2;
          }
          while (v5 != v8);
          goto LABEL_33;
        }
LABEL_39:
        sub_1C4764EE4();
      }
    }
    abort();
  }
  return v2 != 0;
}

uint64_t llvm::ARM::parseBranchProtection(_QWORD *a1, uint64_t a2, uint64_t a3, const char **a4)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  const char *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[9];

  v22[8] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v19 = a1;
  *((_QWORD *)&v19 + 1) = a2;
  *(_QWORD *)a3 = "none";
  *(_QWORD *)(a3 + 8) = 4;
  *(_QWORD *)(a3 + 16) = "a_key";
  *(_QWORD *)(a3 + 24) = 5;
  *(_BYTE *)(a3 + 32) = 0;
  if (a2 == 8)
  {
    if (*a1 == 0x647261646E617473)
    {
      *(_QWORD *)a3 = "non-leaf";
      *(_QWORD *)(a3 + 8) = 8;
      v6 = 1;
      *(_BYTE *)(a3 + 32) = 1;
      return v6;
    }
  }
  else if (a2 == 4 && *(_DWORD *)a1 == 1701736302)
  {
    return 1;
  }
  v20 = v22;
  v21 = 0x400000000;
  v6 = 1;
  llvm::StringRef::split(&v19, (uint64_t)&v20, "+", 1uLL, -1, 1);
  v7 = v21;
  if (!(_DWORD)v21)
    goto LABEL_41;
  v8 = 0;
  v9 = v21 - 1;
  while (1)
  {
    v10 = (const char *)sub_1C534E9D8((uint64_t *)v20 + 2 * v8, " \t\n\v\f\r", 6);
    if (v11 != 3)
      break;
    if (*(_WORD *)v10 != 29794 || v10[2] != 105)
      goto LABEL_40;
    *(_BYTE *)(a3 + 32) = 1;
LABEL_36:
    if (++v8 == v7)
    {
      v6 = 1;
      goto LABEL_41;
    }
  }
  if (v11 == 7)
  {
    if (*(_DWORD *)v10 != 761487728 || *(_DWORD *)(v10 + 3) != 1952805421)
      goto LABEL_40;
    *(_QWORD *)a3 = "non-leaf";
    *(_QWORD *)(a3 + 8) = 8;
    if (v8 + 1 != v7)
    {
      v13 = 16 * (v8 + 1);
      do
      {
        v14 = sub_1C534E9D8((uint64_t *)((char *)v20 + v13), " \t\n\v\f\r", 6);
        if (v15 == 5)
        {
          if (*(_DWORD *)v14 != 1701522786 || *(_BYTE *)(v14 + 4) != 121)
            goto LABEL_36;
          *(_QWORD *)(a3 + 16) = "b_key";
          *(_QWORD *)(a3 + 24) = 5;
        }
        else
        {
          if (v15 != 4 || *(_DWORD *)v14 != 1717658988)
            goto LABEL_36;
          *(_QWORD *)a3 = "all";
          *(_QWORD *)(a3 + 8) = 3;
        }
        ++v8;
        v13 += 16;
      }
      while (v9 != v8);
      v8 = v7 - 1;
    }
    goto LABEL_36;
  }
  if (!v11)
  {
    v10 = "<empty>";
    v11 = 7;
  }
LABEL_40:
  v6 = 0;
  *a4 = v10;
  a4[1] = (const char *)v11;
LABEL_41:
  if (v20 != v22)
    free(v20);
  return v6;
}

void llvm::ThreadPool::grow(llvm::ThreadPool *this, int a2)
{
  std::__shared_mutex_base *v4;
  uint64_t v5;
  pthread_t *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t i;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  pthread_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  pthread_t *v20;
  _opaque_pthread_t *v21;
  _QWORD *v22;
  char *v23;
  __int128 v25;

  v4 = (std::__shared_mutex_base *)((char *)this + 24);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)((char *)this + 24));
  v5 = *(_QWORD *)this;
  v6 = (pthread_t *)*((_QWORD *)this + 1);
  v7 = (uint64_t)v6 - *(_QWORD *)this;
  v8 = *((unsigned int *)this + 113);
  if (v8 > v7 >> 3)
  {
    v9 = (int)v8 >= a2 ? a2 : *((_DWORD *)this + 113);
    for (i = (unint64_t)v7 >> 3; v9 > (int)((unint64_t)v7 >> 3); i = (unint64_t)v7 >> 3)
    {
      *(_QWORD *)&v25 = this;
      DWORD2(v25) = i;
      v11 = *((_QWORD *)this + 2);
      if ((unint64_t)v6 >= v11)
      {
        v12 = v7 >> 3;
        v13 = (v7 >> 3) + 1;
        if (v13 >> 61)
          abort();
        v14 = v11 - v5;
        if (v14 >> 2 > v13)
          v13 = v14 >> 2;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          if (v15 >> 61)
            sub_1C4764EE4();
          v16 = (char *)operator new(8 * v15);
        }
        else
        {
          v16 = 0;
        }
        v17 = (pthread_t *)&v16[8 * v12];
        sub_1C5E416D8(v17, &v25);
        v19 = *(_QWORD **)this;
        v18 = (_QWORD *)*((_QWORD *)this + 1);
        if (v18 == *(_QWORD **)this)
        {
          v22 = (_QWORD *)*((_QWORD *)this + 1);
          v20 = v17;
        }
        else
        {
          v20 = v17;
          do
          {
            v21 = (_opaque_pthread_t *)*--v18;
            *v18 = 0;
            *--v20 = v21;
          }
          while (v18 != v19);
          v22 = *(_QWORD **)this;
          v18 = (_QWORD *)*((_QWORD *)this + 1);
        }
        v23 = &v16[8 * v15];
        v6 = v17 + 1;
        *(_QWORD *)this = v20;
        *((_QWORD *)this + 1) = v17 + 1;
        *((_QWORD *)this + 2) = v23;
        while (v18 != v22)
        {
          if (*--v18)
            std::terminate();
        }
        if (v22)
          operator delete(v22);
      }
      else
      {
        sub_1C5E416D8(v6++, &v25);
      }
      *((_QWORD *)this + 1) = v6;
      v5 = *(_QWORD *)this;
      v7 = (uint64_t)v6 - *(_QWORD *)this;
    }
  }
  std::__shared_mutex_base::unlock(v4);
}

uint64_t llvm::ThreadPool::processTasks(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  std::condition_variable *v5;
  int v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t (**v18)(void);
  std::unique_lock<std::mutex>::mutex_type *v19;
  _QWORD *v20;
  int v21;
  _BOOL4 v22;
  _BOOL4 v23;
  _BOOL4 v24;
  std::condition_variable *v25;
  uint64_t v26;
  std::unique_lock<std::mutex> __lk;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = (std::mutex *)(a1 + 248);
  v5 = (std::condition_variable *)(a1 + 312);
  v25 = (std::condition_variable *)(a1 + 360);
  v26 = a1 + 416;
  do
  {
    v30 = 0;
    __lk.__m_ = v4;
    __lk.__owns_ = 1;
    std::mutex::lock(v4);
    while (1)
    {
      v6 = *(unsigned __int8 *)(a1 + 440);
      if (!*(_BYTE *)(a1 + 440))
        goto LABEL_9;
      if (*(_QWORD *)(a1 + 240))
        goto LABEL_13;
      if (a2 && llvm::ThreadPool::workCompletedUnlocked(a1, a2))
        break;
      std::condition_variable::wait(v5, &__lk);
    }
    v6 = 1;
    if (!*(_BYTE *)(a1 + 440))
    {
LABEL_9:
      if (!*(_QWORD *)(a1 + 240))
        goto LABEL_12;
    }
    if (a2 && v6)
    {
LABEL_12:
      v7 = 0;
      v8 = 0;
      goto LABEL_23;
    }
LABEL_13:
    ++*(_DWORD *)(a1 + 408);
    sub_1C48AAFD8(v29, *(_QWORD *)(*(_QWORD *)(a1 + 208) + 8 * (*(_QWORD *)(a1 + 232) / 0x66uLL))+ 40 * (*(_QWORD *)(a1 + 232) % 0x66uLL));
    v9 = *(_QWORD *)(a1 + 232);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 8 * (v9 / 0x66));
    v11 = v9 % 0x66;
    v7 = *(_QWORD *)(v10 + 40 * (v9 % 0x66) + 32);
    v28 = v7;
    if (v7)
    {
      v20 = sub_1C6144C70(v26, &v28);
      ++*((_DWORD *)v20 + 2);
      v9 = *(_QWORD *)(a1 + 232);
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 8 * (v9 / 0x66));
      v11 = v9 % 0x66;
    }
    v12 = (_QWORD *)(v10 + 40 * v11);
    v13 = (_QWORD *)v12[3];
    if (v13 == v12)
    {
      v13 = v12;
      v14 = 4;
      goto LABEL_19;
    }
    if (v13)
    {
      v14 = 5;
LABEL_19:
      (*(void (**)(void))(*v13 + 8 * v14))();
      v9 = *(_QWORD *)(a1 + 232);
    }
    v15 = *(_QWORD *)(a1 + 240) - 1;
    v16 = v9 + 1;
    *(_QWORD *)(a1 + 232) = v16;
    *(_QWORD *)(a1 + 240) = v15;
    if (v16 >= 0xCC)
    {
      operator delete(**(void ***)(a1 + 208));
      *(_QWORD *)(a1 + 208) += 8;
      *(_QWORD *)(a1 + 232) -= 102;
    }
    v8 = 1;
LABEL_23:
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    if (v8)
    {
      if (!v30)
        sub_1C485C2F0();
      (*(void (**)(_QWORD *))(*v30 + 48))(v30);
      std::mutex::lock(v4);
      --*(_DWORD *)(a1 + 408);
      if (v7)
      {
        __lk.__m_ = 0;
        v19 = (sub_1C6144BDC(*(_QWORD *)(a1 + 416), *(_DWORD *)(a1 + 432), v7, &__lk) & 1) != 0
            ? __lk.__m_
            : (std::unique_lock<std::mutex>::mutex_type *)(*(_QWORD *)(a1 + 416) + 16 * *(unsigned int *)(a1 + 432));
        v21 = *(_DWORD *)v19->__m_.__opaque - 1;
        *(_DWORD *)v19->__m_.__opaque = v21;
        if (!v21)
        {
          v19->__m_.__sig = -8192;
          *(int32x2_t *)(a1 + 424) = vadd_s32(*(int32x2_t *)(a1 + 424), (int32x2_t)0x1FFFFFFFFLL);
        }
      }
      v22 = llvm::ThreadPool::workCompletedUnlocked(a1, v7);
      v23 = v22;
      if (v7)
        v24 = v22;
      else
        v24 = 0;
      std::mutex::unlock(v4);
      if (v23)
        std::condition_variable::notify_all(v25);
      if (v24)
        std::condition_variable::notify_all(v5);
    }
    result = (uint64_t)v30;
    if (v30 == v29)
    {
      v18 = (uint64_t (**)(void))(v29[0] + 32);
    }
    else
    {
      if (!v30)
        continue;
      v18 = (uint64_t (**)(void))(*v30 + 40);
    }
    result = (*v18)();
  }
  while ((v8 & 1) != 0);
  return result;
}

void llvm::ThreadPool::wait(uint64_t a1, uint64_t a2)
{
  std::unique_lock<std::mutex> v4;

  if (llvm::ThreadPool::isWorkerThread((llvm::ThreadPool *)a1))
  {
    llvm::ThreadPool::processTasks(a1, a2);
  }
  else
  {
    v4.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 248);
    v4.__owns_ = 1;
    std::mutex::lock((std::mutex *)(a1 + 248));
    if (llvm::ThreadPool::workCompletedUnlocked(a1, a2))
      goto LABEL_6;
    do
      std::condition_variable::wait((std::condition_variable *)(a1 + 360), &v4);
    while (!llvm::ThreadPool::workCompletedUnlocked(a1, a2));
    if (v4.__owns_)
LABEL_6:
      std::mutex::unlock(v4.__m_);
  }
}

BOOL llvm::ThreadPool::isWorkerThread(llvm::ThreadPool *this)
{
  std::__shared_mutex_base *v2;
  pthread_t v3;
  uint64_t v4;
  uint64_t v5;
  _opaque_pthread_t *v6;
  _BOOL8 v7;
  BOOL v8;

  v2 = (std::__shared_mutex_base *)((char *)this + 24);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 24));
  v3 = pthread_self();
  v4 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this == v4)
  {
    v7 = 0;
  }
  else
  {
    v5 = *(_QWORD *)this + 8;
    do
    {
      v6 = *(_opaque_pthread_t **)(v5 - 8);
      v7 = v3 == v6;
      v8 = v3 == v6 || v5 == v4;
      v5 += 8;
    }
    while (!v8);
  }
  std::__shared_mutex_base::unlock_shared(v2);
  return v7;
}

void sub_1C5E41500(char **a1)
{
  char *v2;
  char *i;

  v2 = *a1;
  if (v2)
  {
    for (i = a1[1]; i != v2; i -= 8)
    {
      if (*((_QWORD *)i - 1))
        std::terminate();
    }
    a1[1] = v2;
    operator delete(v2);
  }
}

uint64_t sub_1C5E41540(uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 != v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 / 0x66];
    v7 = (unint64_t)*v6;
    v8 = (unint64_t)*v6 + 40 * (v5 % 0x66);
    v9 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v5) / 0x66] + 40 * ((*(_QWORD *)(a1 + 40) + v5) % 0x66);
    if (v8 == v9)
      goto LABEL_13;
    while (1)
    {
      v10 = *(_QWORD **)(v8 + 24);
      if (v10 == (_QWORD *)v8)
        break;
      if (v10)
      {
        v11 = 5;
LABEL_7:
        (*(void (**)(void))(*v10 + 8 * v11))();
        v7 = (unint64_t)*v6;
      }
      v8 += 40;
      if (v8 - v7 == 4080)
      {
        v12 = (unint64_t)v6[1];
        ++v6;
        v7 = v12;
        v8 = v12;
      }
      if (v8 == v9)
      {
        v2 = *(void ***)(a1 + 8);
        v3 = *(void ***)(a1 + 16);
        goto LABEL_13;
      }
    }
    v10 = (_QWORD *)v8;
    v11 = 4;
    goto LABEL_7;
  }
  v4 = (_QWORD *)(a1 + 40);
  v3 = *(void ***)(a1 + 8);
LABEL_13:
  *v4 = 0;
  v13 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v13 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v14 = v13 >> 3;
  if (v14 == 1)
  {
    v15 = 51;
    goto LABEL_19;
  }
  if (v14 == 2)
  {
    v15 = 102;
LABEL_19:
    *(_QWORD *)(a1 + 32) = v15;
  }
  if (v2 != v3)
  {
    do
    {
      v16 = *v2++;
      operator delete(v16);
    }
    while (v2 != v3);
    v18 = *(_QWORD *)(a1 + 8);
    v17 = *(_QWORD *)(a1 + 16);
    if (v17 != v18)
      *(_QWORD *)(a1 + 16) = v17 + ((v18 - v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

pthread_t sub_1C5E416D8(pthread_t *a1, _OWORD *a2)
{
  _OWORD *v4;
  pthread_t result;

  v4 = (_OWORD *)operator new();
  *v4 = *a2;
  result = llvm::llvm_execute_on_thread_impl((void *(__cdecl *)(void *))sub_1C5E41768, v4, 0x100800000);
  *a1 = result;
  if (!result)
    JUMPOUT(0x1CAA32FC0);
  return result;
}

uint64_t sub_1C5E41768(uint64_t *a1)
{
  llvm::ThreadPool::processTasks(*a1, 0);
  MEMORY[0x1CAA32FC0](a1, 0x1020C403A5D3213);
  return 0;
}

uint64_t llvm::getTimeTraceProfilerInstance(llvm *this)
{
  return *(_QWORD *)off_1EF8EEB50();
}

void llvm::timeTraceProfilerFinishThread(llvm *this)
{
  char **v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  std::mutex::lock(&stru_1EF8EEAC0);
  if (!atomic_load(qword_1EF8F7318))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7318, (void *(*)(void))sub_1C6393560, (void (*)(void *))sub_1C6393590);
  v2 = (char **)qword_1EF8F7318[0];
  v3 = (_QWORD *)off_1EF8EEB50();
  v4 = v3;
  v6 = v2[1];
  v5 = (unint64_t)v2[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = *v2;
    v9 = (v6 - *v2) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_1C4764EE4();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    *(_QWORD *)v14 = *v4;
    v7 = v14 + 8;
    if (v6 != v8)
    {
      do
      {
        v15 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v14 - 1) = v15;
        v14 -= 8;
      }
      while (v6 != v8);
      v6 = *v2;
    }
    *v2 = v14;
    v2[1] = v7;
    v2[2] = &v13[8 * v12];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v6 = *v3;
    v7 = v6 + 8;
  }
  v2[1] = v7;
  *v4 = 0;
  std::mutex::unlock(&stru_1EF8EEAC0);
}

void sub_1C5E41918(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *i;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *j;
  uint64_t v21;
  uint64_t v22;
  size_t **v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *k;
  uint64_t v32;
  uint64_t v33;
  size_t **v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  size_t **v38;
  size_t **v39;
  size_t *v40;
  size_t v41;
  __int128 *p_dst;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  __int128 v55;
  int64x2_t v56;
  char v57;
  void *v58;
  size_t *v59;
  BOOL v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  BOOL v68;
  unsigned __int8 *v69;
  size_t v70;
  size_t v71;
  uint64_t v72;
  char v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t **v79;
  uint64_t **v80;
  uint64_t *v81;
  uint64_t v82;
  void **v83;
  void **v84;
  void *v85;
  int64x2_t v88;
  int64x2_t v89;
  size_t v90;
  uint64_t v91;
  void *__p[2];
  _QWORD v93[2];
  size_t **v94;
  uint64_t v95;
  uint64_t v96;
  __int128 __dst;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  _QWORD v101[20];
  char v102;
  _OWORD v103[2];
  _QWORD *v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  std::mutex::lock(&stru_1EF8EEAC0);
  v99 = v101;
  v101[17] = 0;
  v101[18] = a2;
  v101[16] = 0;
  v101[0] = 0;
  v101[19] = 0;
  v102 = 0;
  v100 = 0x1000000001;
  llvm::json::OStream::objectBegin((llvm::json::OStream *)&v99);
  llvm::json::OStream::attributeBegin((uint64_t)&v99, "traceEvents", 0xBuLL);
  llvm::json::OStream::arrayBegin((llvm::json::OStream *)&v99);
  v4 = *(unsigned int *)(a1 + 1048);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a1 + 1040);
    v6 = v4 << 6;
    do
    {
      sub_1C5E42A64(a1, (llvm::json::OStream *)&v99, v5, *(_QWORD *)(a1 + 9352));
      v5 += 64;
      v6 -= 64;
    }
    while (v6);
  }
  if (!atomic_load(qword_1EF8F7318))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7318, (void *(*)(void))sub_1C6393560, (void (*)(void *))sub_1C6393590);
  v8 = *(uint64_t **)qword_1EF8F7318[0];
  v9 = *(uint64_t **)(qword_1EF8F7318[0] + 8);
  while (v8 != v9)
  {
    v10 = *v8;
    v11 = *(unsigned int *)(*v8 + 1048);
    if ((_DWORD)v11)
    {
      v12 = *(_QWORD *)(v10 + 1040);
      v13 = v11 << 6;
      do
      {
        sub_1C5E42A64(a1, (llvm::json::OStream *)&v99, v12, *(_QWORD *)(v10 + 9352));
        v12 += 64;
        v13 -= 64;
      }
      while (v13);
    }
    ++v8;
  }
  v14 = *(_QWORD *)(a1 + 9352);
  if (!atomic_load(qword_1EF8F7318))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7318, (void *(*)(void))sub_1C6393560, (void (*)(void *))sub_1C6393590);
  for (i = *(uint64_t **)qword_1EF8F7318[0]; i != *(uint64_t **)(qword_1EF8F7318[0] + 8); ++i)
  {
    v17 = *i;
    v18 = *(_QWORD *)(v17 + 9352);
    if (v14 <= v18)
      v14 = v18;
  }
  v94 = 0;
  v95 = 0;
  v96 = 0x1800000000;
  v19 = *(unsigned int *)(a1 + 9256);
  if ((_DWORD)v19)
  {
    for (j = *(uint64_t **)(a1 + 9248); !*j || *j == -8; ++j)
      ;
  }
  else
  {
    j = *(uint64_t **)(a1 + 9248);
  }
  v21 = *(_QWORD *)(a1 + 9248) + 8 * v19;
  if (j != (uint64_t *)v21)
  {
    v22 = *j;
    do
    {
      v88 = *(int64x2_t *)(v22 + 8);
      v23 = sub_1C6393074((uint64_t)&v94, (unsigned __int8 *)(v22 + 24), *(_QWORD *)v22);
      *(int64x2_t *)(*v23 + 1) = vaddq_s64(*(int64x2_t *)(*v23 + 1), v88);
      do
      {
        v24 = j[1];
        ++j;
        v22 = v24;
        if (v24)
          v25 = v22 == -8;
        else
          v25 = 1;
      }
      while (v25);
    }
    while (j != (uint64_t *)v21);
  }
  if (!atomic_load(qword_1EF8F7318))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7318, (void *(*)(void))sub_1C6393560, (void (*)(void *))sub_1C6393590);
  v27 = *(_QWORD *)qword_1EF8F7318[0];
  v28 = *(_QWORD *)(qword_1EF8F7318[0] + 8);
  while (v27 != v28)
  {
    v29 = *(unsigned int *)(*(_QWORD *)v27 + 9256);
    if ((_DWORD)v29)
    {
      for (k = *(uint64_t **)(*(_QWORD *)v27 + 9248); !*k || *k == -8; ++k)
        ;
    }
    else
    {
      k = *(uint64_t **)(*(_QWORD *)v27 + 9248);
    }
    v32 = *(_QWORD *)(*(_QWORD *)v27 + 9248) + 8 * v29;
    if (k != (uint64_t *)v32)
    {
      v33 = *k;
      do
      {
        v89 = *(int64x2_t *)(v33 + 8);
        v34 = sub_1C6393074((uint64_t)&v94, (unsigned __int8 *)(v33 + 24), *(_QWORD *)v33);
        *(int64x2_t *)(*v34 + 1) = vaddq_s64(*(int64x2_t *)(*v34 + 1), v89);
        do
        {
          v35 = k[1];
          ++k;
          v33 = v35;
          if (v35)
            v36 = v33 == -8;
          else
            v36 = 1;
        }
        while (v36);
      }
      while (k != (uint64_t *)v32);
    }
    v27 += 8;
  }
  __p[0] = 0;
  __p[1] = 0;
  v93[0] = 0;
  if (HIDWORD(v95))
  {
    v104 = v93;
    v37 = 5 * HIDWORD(v95);
    __p[0] = operator new(40 * HIDWORD(v95));
    __p[1] = __p[0];
    v93[0] = (char *)__p[0] + 8 * v37;
    memset(v103, 0, sizeof(v103));
    sub_1C51EF1D4((uint64_t)v103);
  }
  v38 = v94;
  if ((_DWORD)v95)
  {
    while (!*v38 || *v38 + 1 == 0)
      ++v38;
  }
  v39 = &v94[v95];
  if (v38 != v39)
  {
    v40 = *v38;
    do
    {
      v41 = *v40;
      if (*v40 >= 0x7FFFFFFFFFFFFFF8)
LABEL_135:
        abort();
      if (v41 >= 0x17)
      {
        v43 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v41 | 7) != 0x17)
          v43 = v41 | 7;
        v44 = v43 + 1;
        p_dst = (__int128 *)operator new(v43 + 1);
        *((_QWORD *)&__dst + 1) = v41;
        v98 = v44 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v98) = *v40;
        p_dst = &__dst;
        if (!v41)
          goto LABEL_64;
      }
      memmove(p_dst, v40 + 3, v41);
LABEL_64:
      *((_BYTE *)p_dst + v41) = 0;
      v45 = v40 + 1;
      v46 = (char *)__p[1];
      v47 = v93[0];
      if (__p[1] >= (void *)v93[0])
      {
        v48 = (char *)__p[0];
        v49 = 0xCCCCCCCCCCCCCCCDLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
        v50 = v49 + 1;
        if (v49 + 1 > 0x666666666666666)
          goto LABEL_135;
        if (0x999999999999999ALL * ((uint64_t)(v93[0] - (unint64_t)__p[0]) >> 3) > v50)
          v50 = 0x999999999999999ALL * ((uint64_t)(v93[0] - (unint64_t)__p[0]) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v93[0] - (unint64_t)__p[0]) >> 3) >= 0x333333333333333)
          v51 = 0x666666666666666;
        else
          v51 = v50;
        *((_QWORD *)&v103[1] + 1) = 0;
        v104 = v93;
        if (v51)
        {
          if (v51 > 0x666666666666666)
            sub_1C4764EE4();
          v52 = (char *)operator new(40 * v51);
        }
        else
        {
          v52 = 0;
        }
        v53 = &v52[8 * (((char *)__p[1] - (char *)__p[0]) >> 3)];
        *(_OWORD *)v53 = __dst;
        *((_QWORD *)v53 + 2) = v98;
        v98 = 0;
        __dst = 0uLL;
        *(_OWORD *)(v53 + 24) = *v45;
        if (v46 == v48)
        {
          v57 = 0;
          v56 = vdupq_n_s64((unint64_t)v46);
          v54 = &v52[40 * v49];
        }
        else
        {
          v54 = &v52[40 * v49];
          do
          {
            v55 = *(_OWORD *)(v46 - 40);
            *((_QWORD *)v54 - 3) = *((_QWORD *)v46 - 3);
            *(_OWORD *)(v54 - 40) = v55;
            *((_QWORD *)v46 - 4) = 0;
            *((_QWORD *)v46 - 3) = 0;
            *((_QWORD *)v46 - 5) = 0;
            *((_OWORD *)v54 - 1) = *((_OWORD *)v46 - 1);
            v54 -= 40;
            v46 -= 40;
          }
          while (v46 != v48);
          v56 = *(int64x2_t *)__p;
          v47 = v93[0];
          v57 = HIBYTE(v98);
        }
        v58 = v53 + 40;
        __p[0] = v54;
        *(int64x2_t *)((char *)v103 + 8) = v56;
        v93[0] = &v52[40 * v51];
        *((_QWORD *)&v103[1] + 1) = v47;
        *(_QWORD *)&v103[0] = v56.i64[0];
        sub_1C51EF1D4((uint64_t)v103);
        __p[1] = v58;
        if (v57 < 0)
          operator delete((void *)__dst);
      }
      else
      {
        *(_OWORD *)__p[1] = __dst;
        *((_QWORD *)v46 + 2) = v98;
        *(_OWORD *)(v46 + 24) = *v45;
        __p[1] = v46 + 40;
      }
      do
      {
        v59 = v38[1];
        ++v38;
        v40 = v59;
        if (v59)
          v60 = v40 + 1 == 0;
        else
          v60 = 1;
      }
      while (v60);
    }
    while (v38 != v39);
  }
  v61 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
  if (__p[1] == __p[0])
    v62 = 0;
  else
    v62 = v61;
  sub_1C5E42DC0((uint64_t)__p[0], (void **)__p[1], v62, 1);
  v63 = __p[0];
  v64 = __p[1];
  if (__p[0] != __p[1])
  {
    v65 = v14 + 1;
    do
    {
      v66 = v63[4] / 1000;
      v90 = 0;
      v91 = v66;
      v67 = *((_BYTE *)v63 + 23);
      v68 = v67 < 0;
      if (v67 >= 0)
        v69 = (unsigned __int8 *)v63;
      else
        v69 = (unsigned __int8 *)*v63;
      v70 = v67 & 0x7F;
      if (v68)
        v71 = v63[1];
      else
        v71 = v70;
      v90 = (*sub_1C6393074((uint64_t)&v94, v69, v71))[1];
      llvm::json::OStream::objectBegin((llvm::json::OStream *)&v99);
      v72 = *(int *)(a1 + 9320);
      LOWORD(v103[0]) = 3;
      *((_QWORD *)&v103[0] + 1) = v72;
      llvm::json::OStream::attributeBegin((uint64_t)&v99, "pid", 3uLL);
      llvm::json::OStream::value((uint64_t)&v99, (uint64_t)v103);
      LODWORD(v100) = v100 - 1;
      llvm::json::Value::destroy((void **)v103);
      LOWORD(v103[0]) = 3;
      *((_QWORD *)&v103[0] + 1) = v65;
      llvm::json::OStream::attributeBegin((uint64_t)&v99, "tid", 3uLL);
      llvm::json::OStream::value((uint64_t)&v99, (uint64_t)v103);
      LODWORD(v100) = v100 - 1;
      llvm::json::Value::destroy((void **)v103);
      sub_1C4D67324((uint64_t)v103, "X", 1uLL);
      llvm::json::OStream::attributeBegin((uint64_t)&v99, "ph", 2uLL);
      llvm::json::OStream::value((uint64_t)&v99, (uint64_t)v103);
      LODWORD(v100) = v100 - 1;
      llvm::json::Value::destroy((void **)v103);
      LOWORD(v103[0]) = 3;
      *((_QWORD *)&v103[0] + 1) = 0;
      llvm::json::OStream::attributeBegin((uint64_t)&v99, "ts", 2uLL);
      llvm::json::OStream::value((uint64_t)&v99, (uint64_t)v103);
      LODWORD(v100) = v100 - 1;
      llvm::json::Value::destroy((void **)v103);
      LOWORD(v103[0]) = 3;
      *((_QWORD *)&v103[0] + 1) = v91;
      llvm::json::OStream::attributeBegin((uint64_t)&v99, "dur", 3uLL);
      llvm::json::OStream::value((uint64_t)&v99, (uint64_t)v103);
      LODWORD(v100) = v100 - 1;
      llvm::json::Value::destroy((void **)v103);
      std::operator+<char>();
      sub_1C4D673F4((uint64_t)v103, (unint64_t)&__dst);
      llvm::json::OStream::attributeBegin((uint64_t)&v99, "name", 4uLL);
      llvm::json::OStream::value((uint64_t)&v99, (uint64_t)v103);
      LODWORD(v100) = v100 - 1;
      llvm::json::Value::destroy((void **)v103);
      if (SHIBYTE(v98) < 0)
        operator delete((void *)__dst);
      *(_QWORD *)&v103[0] = &v99;
      *((_QWORD *)&v103[0] + 1) = &v90;
      *(_QWORD *)&v103[1] = &v91;
      llvm::json::OStream::attributeBegin((uint64_t)&v99, "args", 4uLL);
      llvm::json::OStream::objectBegin((llvm::json::OStream *)&v99);
      sub_1C6393164((uint64_t)v103);
      llvm::json::OStream::objectEnd((llvm::json::OStream *)&v99);
      LODWORD(v100) = v100 - 1;
      llvm::json::OStream::objectEnd((llvm::json::OStream *)&v99);
      v63 += 5;
      ++v65;
    }
    while (v63 != v64);
  }
  v73 = *(_BYTE *)(a1 + 9319);
  v74 = v73;
  if (v73 >= 0)
    v75 = a1 + 9296;
  else
    v75 = *(_QWORD *)(a1 + 9296);
  v76 = v73 & 0x7F;
  if (v74 >= 0)
    v77 = v76;
  else
    v77 = *(_QWORD *)(a1 + 9304);
  sub_1C639301C((llvm::json::OStream *)&v99, a1, (uint64_t)"process_name", *(_QWORD *)(a1 + 9352), v75, v77);
  sub_1C639301C((llvm::json::OStream *)&v99, a1, (uint64_t)"thread_name", *(_QWORD *)(a1 + 9352), *(_QWORD *)(a1 + 9328), *(_QWORD *)(a1 + 9336));
  if (!atomic_load(qword_1EF8F7318))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7318, (void *(*)(void))sub_1C6393560, (void (*)(void *))sub_1C6393590);
  v79 = *(uint64_t ***)qword_1EF8F7318[0];
  v80 = *(uint64_t ***)(qword_1EF8F7318[0] + 8);
  if (*(uint64_t ***)qword_1EF8F7318[0] != v80)
  {
    do
    {
      v81 = *v79++;
      sub_1C639301C((llvm::json::OStream *)&v99, a1, (uint64_t)"thread_name", v81[1169], v81[1166], v81[1167]);
    }
    while (v79 != v80);
  }
  llvm::json::OStream::arrayEnd((llvm::json::OStream *)&v99);
  LODWORD(v100) = v100 - 1;
  v82 = *(_QWORD *)(a1 + 9280);
  LOWORD(v103[0]) = 3;
  *((_QWORD *)&v103[0] + 1) = v82;
  llvm::json::OStream::attributeBegin((uint64_t)&v99, "beginningOfTime", 0xFuLL);
  llvm::json::OStream::value((uint64_t)&v99, (uint64_t)v103);
  LODWORD(v100) = v100 - 1;
  llvm::json::Value::destroy((void **)v103);
  llvm::json::OStream::objectEnd((llvm::json::OStream *)&v99);
  v83 = (void **)__p[0];
  if (__p[0])
  {
    v84 = (void **)__p[1];
    v85 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v84 - 17) < 0)
          operator delete(*(v84 - 5));
        v84 -= 5;
      }
      while (v84 != v83);
      v85 = __p[0];
    }
    __p[1] = v83;
    operator delete(v85);
  }
  sub_1C61A8A20((uint64_t)&v94);
  if (v99 != v101)
    free(v99);
  std::mutex::unlock(&stru_1EF8EEAC0);
}

void llvm::timeTraceProfilerWrite(const void *a1@<X0>, std::string::size_type a2@<X1>, _BYTE *a3@<X2>, std::string::size_type a4@<X3>, _QWORD *a5@<X8>)
{
  char v8;
  std::string *p_dst;
  uint64_t v12;
  uint64_t v13;
  std::string::size_type size;
  std::string *v15;
  std::string *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  void *__p;
  char v25;
  void **p_p;
  __int16 v27;
  std::string v28[4];
  uint64_t v29;
  const std::error_category *v30;
  std::string __dst;
  void *v32[2];
  char v33;
  void **v34;
  uint64_t v35[2];

  if (!a1)
  {
    v8 = 0;
    memset(&__dst, 0, sizeof(__dst));
LABEL_14:
    if (a4 == 1)
    {
      if (*a3 == 45)
      {
        *((_BYTE *)&v28[0].__r_.__value_.__s + 23) = 3;
        LODWORD(v28[0].__r_.__value_.__l.__data_) = 7632239;
        if ((v8 & 0x80) == 0)
          goto LABEL_26;
        goto LABEL_25;
      }
      if (!a3)
        goto LABEL_24;
      *((_BYTE *)&v28[0].__r_.__value_.__s + 23) = 1;
      v15 = v28;
      goto LABEL_49;
    }
    if (!a3)
    {
LABEL_24:
      memset(v28, 0, 24);
      if ((v8 & 0x80) == 0)
      {
LABEL_26:
        __dst = v28[0];
        std::string::append(&__dst, ".time-trace");
        goto LABEL_27;
      }
LABEL_25:
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_26;
    }
    if (a4 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (a4 >= 0x17)
      {
        v22 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a4 | 7) != 0x17)
          v22 = a4 | 7;
        v23 = v22 + 1;
        v15 = (std::string *)operator new(v22 + 1);
        v28[0].__r_.__value_.__l.__size_ = a4;
        v28[0].__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
        v28[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
      }
      else
      {
        *((_BYTE *)&v28[0].__r_.__value_.__s + 23) = a4;
        v15 = v28;
        if (!a4)
        {
LABEL_50:
          v15->__r_.__value_.__s.__data_[a4] = 0;
          if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_26;
          goto LABEL_25;
        }
      }
LABEL_49:
      memmove(v15, a3, a4);
      goto LABEL_50;
    }
LABEL_52:
    abort();
  }
  if (a2 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_52;
  if (a2 >= 0x17)
  {
    v12 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v12 = a2 | 7;
    v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = a2;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = a2;
  p_dst = &__dst;
  if (a2)
LABEL_10:
    memmove(p_dst, a1, a2);
  p_dst->__r_.__value_.__s.__data_[a2] = 0;
  v8 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __dst.__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_14;
LABEL_27:
  LODWORD(v29) = 0;
  v30 = std::system_category();
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &__dst;
  else
    v16 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
  else
    v17 = __dst.__r_.__value_.__l.__size_;
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v28, v16, v17, (uint64_t)&v29, 3);
  if ((_DWORD)v29)
  {
    v18 = v29;
    v19 = (uint64_t)v30;
    std::operator+<char>();
    v27 = 260;
    p_p = &__p;
    llvm::Twine::str((llvm::Twine *)&p_p, v32);
    if (v33 >= 0)
      v20 = v32;
    else
      v20 = (void **)v32[0];
    v35[0] = v18;
    v35[1] = v19;
    v34 = v20;
    sub_1C5DF1730((_BYTE **)&v34, v35, a5);
    if (v33 < 0)
      operator delete(v32[0]);
    if (v25 < 0)
      operator delete(__p);
  }
  else
  {
    v21 = (uint64_t *)off_1EF8EEB50(&off_1EF8EEB50);
    sub_1C5E41918(*v21, (uint64_t)v28);
    *a5 = 0;
  }
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v28);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void llvm::timeTraceProfilerBegin(const void *a1, size_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  __int128 *p_dst;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 __dst;
  unint64_t v12;
  _QWORD v13[2];

  v13[0] = a3;
  v13[1] = a4;
  v6 = *(_QWORD *)off_1EF8EEB50();
  if (v6)
  {
    if (a2 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (a2 >= 0x17)
    {
      v8 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a2 | 7) != 0x17)
        v8 = a2 | 7;
      v9 = v8 + 1;
      p_dst = (__int128 *)operator new(v8 + 1);
      *((_QWORD *)&__dst + 1) = a2;
      v12 = v9 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v12) = a2;
      p_dst = &__dst;
      if (!a2)
      {
LABEL_10:
        *((_BYTE *)p_dst + a2) = 0;
        v10 = v13;
        sub_1C5E426E4(v6, &__dst, (void (*)(void **__return_ptr, uint64_t))sub_1C5E44138, (uint64_t)&v10);
        if (SHIBYTE(v12) < 0)
          operator delete((void *)__dst);
        return;
      }
    }
    memmove(p_dst, a1, a2);
    goto LABEL_10;
  }
}

void sub_1C5E426E4(uint64_t a1, __int128 *a2, void (*a3)(void **__return_ptr, uint64_t), uint64_t a4)
{
  std::chrono::steady_clock::time_point v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  void *__p[2];
  uint64_t v19;
  unint64_t v20;

  v8.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  a3(__p, a4);
  v9 = *(unsigned int *)(a1 + 8);
  if (v9 >= *(_DWORD *)(a1 + 12))
  {
    v20 = 0;
    v13 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 64, &v20);
    v14 = &v13[64 * (unint64_t)*(unsigned int *)(a1 + 8)];
    *(std::chrono::steady_clock::time_point *)v14 = v8;
    *((_QWORD *)v14 + 1) = 0;
    v15 = *((_QWORD *)a2 + 2);
    *((_OWORD *)v14 + 1) = *a2;
    *((_QWORD *)v14 + 4) = v15;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v16 = v19;
    *(_OWORD *)(v14 + 40) = *(_OWORD *)__p;
    *((_QWORD *)v14 + 7) = v16;
    __p[1] = 0;
    v19 = 0;
    __p[0] = 0;
    sub_1C5E43FC4((uint64_t *)a1, (uint64_t)v13);
    v17 = v20;
    if (*(_QWORD *)a1 != a1 + 16)
      free(*(void **)a1);
    *(_QWORD *)a1 = v13;
    ++*(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 12) = v17;
    if (SHIBYTE(v19) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v10 = *(_QWORD *)a1 + (v9 << 6);
    *(std::chrono::steady_clock::time_point *)v10 = v8;
    *(_QWORD *)(v10 + 8) = 0;
    v11 = *a2;
    *(_QWORD *)(v10 + 32) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(v10 + 16) = v11;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v12 = *(_OWORD *)__p;
    *(_QWORD *)(v10 + 56) = v19;
    *(_OWORD *)(v10 + 40) = v12;
    ++*(_DWORD *)(a1 + 8);
  }
}

void llvm::timeTraceProfilerBegin(const void *a1, size_t a2, void (*a3)(void **__return_ptr, uint64_t), uint64_t a4)
{
  uint64_t v8;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  __int128 __dst;
  unint64_t v13;

  v8 = *(_QWORD *)off_1EF8EEB50(&off_1EF8EEB50);
  if (v8)
  {
    if (a2 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (a2 >= 0x17)
    {
      v10 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a2 | 7) != 0x17)
        v10 = a2 | 7;
      v11 = v10 + 1;
      p_dst = (__int128 *)operator new(v10 + 1);
      *((_QWORD *)&__dst + 1) = a2;
      v13 = v11 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v13) = a2;
      p_dst = &__dst;
      if (!a2)
      {
LABEL_10:
        *((_BYTE *)p_dst + a2) = 0;
        sub_1C5E426E4(v8, &__dst, a3, a4);
        if (SHIBYTE(v13) < 0)
          operator delete((void *)__dst);
        return;
      }
    }
    memmove(p_dst, a1, a2);
    goto LABEL_10;
  }
}

char **sub_1C5E42914(char **a1)
{
  char **v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;

  v2 = (char **)a1[1166];
  if (v2 != a1 + 1169)
    free(v2);
  if (*((char *)a1 + 9319) < 0)
    operator delete(a1[1162]);
  sub_1C61A8A20((uint64_t)(a1 + 1156));
  v3 = a1[130];
  v4 = *((unsigned int *)a1 + 262);
  if ((_DWORD)v4)
  {
    v5 = v4 << 6;
    do
    {
      v6 = (void **)&v3[v5];
      if (v3[v5 - 1] < 0)
        operator delete(*(v6 - 3));
      if (*((char *)v6 - 25) < 0)
        operator delete(*(void **)&v3[v5 - 48]);
      v5 -= 64;
    }
    while (v5);
    v3 = a1[130];
  }
  if (v3 != (char *)(a1 + 132))
    free(v3);
  v7 = *a1;
  v8 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v8)
  {
    v9 = v8 << 6;
    do
    {
      v10 = (void **)&v7[v9];
      if (v7[v9 - 1] < 0)
        operator delete(*(v10 - 3));
      if (*((char *)v10 - 25) < 0)
        operator delete(*(void **)&v7[v9 - 48]);
      v9 -= 64;
    }
    while (v9);
    v7 = *a1;
  }
  if (v7 != (char *)(a1 + 2))
    free(v7);
  return a1;
}

uint64_t sub_1C5E42A24(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

llvm::raw_ostream *sub_1C5E42A64(uint64_t a1, llvm::json::OStream *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v14;
  void *__dst[2];
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)a3 / 1000 + *(_QWORD *)(a1 + 9288) / -1000;
  v9 = *(_QWORD *)(a3 + 8) / 1000 + *(_QWORD *)a3 / -1000;
  llvm::json::OStream::objectBegin(a2);
  v10 = *(int *)(a1 + 9320);
  LOWORD(v17) = 3;
  v18 = v10;
  llvm::json::OStream::attributeBegin((uint64_t)a2, "pid", 3uLL);
  llvm::json::OStream::value((uint64_t)a2, (uint64_t)&v17);
  --*((_DWORD *)a2 + 2);
  llvm::json::Value::destroy(&v17);
  LOWORD(v17) = 3;
  v18 = a4;
  llvm::json::OStream::attributeBegin((uint64_t)a2, "tid", 3uLL);
  llvm::json::OStream::value((uint64_t)a2, (uint64_t)&v17);
  --*((_DWORD *)a2 + 2);
  llvm::json::Value::destroy(&v17);
  sub_1C4D67324((uint64_t)&v17, "X", 1uLL);
  llvm::json::OStream::attributeBegin((uint64_t)a2, "ph", 2uLL);
  llvm::json::OStream::value((uint64_t)a2, (uint64_t)&v17);
  --*((_DWORD *)a2 + 2);
  llvm::json::Value::destroy(&v17);
  LOWORD(v17) = 3;
  v18 = v8;
  llvm::json::OStream::attributeBegin((uint64_t)a2, "ts", 2uLL);
  llvm::json::OStream::value((uint64_t)a2, (uint64_t)&v17);
  --*((_DWORD *)a2 + 2);
  llvm::json::Value::destroy(&v17);
  LOWORD(v17) = 3;
  v18 = v9;
  llvm::json::OStream::attributeBegin((uint64_t)a2, "dur", 3uLL);
  llvm::json::OStream::value((uint64_t)a2, (uint64_t)&v17);
  --*((_DWORD *)a2 + 2);
  llvm::json::Value::destroy(&v17);
  if (*(char *)(a3 + 39) < 0)
  {
    sub_1C47EBC30(__p, *(void **)(a3 + 16), *(_QWORD *)(a3 + 24));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a3 + 16);
    v14 = *(_QWORD *)(a3 + 32);
  }
  sub_1C4D673F4((uint64_t)&v17, (unint64_t)__p);
  llvm::json::OStream::attributeBegin((uint64_t)a2, "name", 4uLL);
  llvm::json::OStream::value((uint64_t)a2, (uint64_t)&v17);
  --*((_DWORD *)a2 + 2);
  llvm::json::Value::destroy(&v17);
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
  v11 = *(unsigned __int8 *)(a3 + 63);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a3 + 48);
  if (v11)
  {
    llvm::json::OStream::attributeBegin((uint64_t)a2, "args", 4uLL);
    llvm::json::OStream::objectBegin(a2);
    if (*(char *)(a3 + 63) < 0)
    {
      sub_1C47EBC30(__dst, *(void **)(a3 + 40), *(_QWORD *)(a3 + 48));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)(a3 + 40);
      v16 = *(_QWORD *)(a3 + 56);
    }
    sub_1C4D673F4((uint64_t)&v17, (unint64_t)__dst);
    llvm::json::OStream::attributeBegin((uint64_t)a2, "detail", 6uLL);
    llvm::json::OStream::value((uint64_t)a2, (uint64_t)&v17);
    --*((_DWORD *)a2 + 2);
    llvm::json::Value::destroy(&v17);
    if (SHIBYTE(v16) < 0)
      operator delete(__dst[0]);
    llvm::json::OStream::objectEnd(a2);
    --*((_DWORD *)a2 + 2);
  }
  return llvm::json::OStream::objectEnd(a2);
}

void sub_1C5E42DC0(uint64_t a1, void **a2, uint64_t a3, char a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  __int128 v35;
  BOOL v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  void **v55;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  void **v60;
  uint64_t v61;
  void *v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  void **v66;
  uint64_t v67;
  uint64_t v68;
  int64_t v69;
  int64_t v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void **v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  int v95;
  __int128 v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  __int128 v103;
  void **v105;
  void *v106;
  void *v107;
  char v108;
  void *v109;
  void **v110;
  void **v111;
  void *v112;
  __int128 *v113;
  __int128 *v114;
  __int128 *v115;
  uint64_t v116;
  char v118;
  void *v119;
  void *v120;
  unint64_t v121;
  uint64_t v122;
  void *v123;
  char v124;
  char v125;
  _BYTE v126[15];
  _BYTE v127[15];
  _BYTE v128[15];
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  _BYTE v133[15];
  _BYTE v134[15];
  _BYTE v135[15];
  _BYTE v136[15];
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;

__int128 *sub_1C5E439B0(__int128 *result, __int128 *a2, __int128 *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = (uint64_t *)(a2 + 2);
  v4 = *((_QWORD *)a2 + 4);
  v5 = (uint64_t *)(result + 2);
  v6 = *((_QWORD *)a3 + 4);
  if (*((_QWORD *)result + 4) < v4)
  {
    if (v4 >= v6)
    {
      v19 = *((_QWORD *)result + 2);
      v20 = *result;
      v21 = *((_QWORD *)a2 + 2);
      *result = *a2;
      *((_QWORD *)result + 2) = v21;
      *a2 = v20;
      *((_QWORD *)a2 + 2) = v19;
      v7 = (uint64_t *)a2 + 3;
      v22 = *((_QWORD *)result + 3);
      v23 = *((_QWORD *)result + 4);
      *(__int128 *)((char *)result + 24) = *(__int128 *)((char *)a2 + 24);
      *((_QWORD *)a2 + 3) = v22;
      *((_QWORD *)a2 + 4) = v23;
      if (v23 >= *((_QWORD *)a3 + 4))
        return result;
      v24 = *((_QWORD *)a2 + 2);
      v25 = *a2;
      v26 = *((_QWORD *)a3 + 2);
      *a2 = *a3;
      *((_QWORD *)a2 + 2) = v26;
      *a3 = v25;
      *((_QWORD *)a3 + 2) = v24;
      v11 = (uint64_t *)a3 + 3;
      v5 = (uint64_t *)(a2 + 2);
    }
    else
    {
      v7 = (uint64_t *)result + 3;
      v8 = *((_QWORD *)result + 2);
      v9 = *result;
      v10 = *((_QWORD *)a3 + 2);
      *result = *a3;
      *((_QWORD *)result + 2) = v10;
      *a3 = v9;
      *((_QWORD *)a3 + 2) = v8;
      v11 = (uint64_t *)a3 + 3;
    }
    v3 = (uint64_t *)(a3 + 2);
    goto LABEL_10;
  }
  if (v4 < v6)
  {
    v12 = *((_QWORD *)a2 + 2);
    v13 = *a2;
    v14 = *((_QWORD *)a3 + 2);
    *a2 = *a3;
    *((_QWORD *)a2 + 2) = v14;
    *a3 = v13;
    *((_QWORD *)a3 + 2) = v12;
    v11 = (uint64_t *)a2 + 3;
    v15 = *(__int128 *)((char *)a2 + 24);
    *(__int128 *)((char *)a2 + 24) = *(__int128 *)((char *)a3 + 24);
    *(__int128 *)((char *)a3 + 24) = v15;
    if (*v5 < *((_QWORD *)a2 + 4))
    {
      v16 = *((_QWORD *)result + 2);
      v17 = *result;
      v18 = *((_QWORD *)a2 + 2);
      *result = *a2;
      *((_QWORD *)result + 2) = v18;
      *a2 = v17;
      *((_QWORD *)a2 + 2) = v16;
      v7 = (uint64_t *)result + 3;
LABEL_10:
      v27 = *v7;
      *v7 = *v11;
      *v11 = v27;
      v28 = *v5;
      *v5 = *v3;
      *v3 = v28;
    }
  }
  return result;
}

BOOL sub_1C5E43B10(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _BYTE v24[15];

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_QWORD *)(a1 + 32) < *(_QWORD *)(a2 - 8))
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(_OWORD *)a1;
        v8 = *(_QWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_QWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a2 - 40) = v7;
        *(_QWORD *)(a2 - 24) = v6;
        v9 = *(_OWORD *)(a1 + 24);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 - 16);
        *(_OWORD *)(a2 - 16) = v9;
      }
      return result;
    case 3uLL:
      sub_1C5E439B0((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a2 - 40));
      return 1;
    case 4uLL:
      sub_1C5E43D80(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      sub_1C5E43E7C(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v10 = a1 + 80;
      sub_1C5E439B0((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a1 + 80));
      v11 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(_QWORD *)(v10 + 32);
    v15 = *(_QWORD *)(v11 + 32);
    if (v14 < v15)
    {
      v23 = *(_QWORD *)v11;
      *(_QWORD *)v24 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)&v24[7] = *(_QWORD *)(v11 + 15);
      v22 = *(_BYTE *)(v11 + 23);
      *(_QWORD *)(v11 + 8) = 0;
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)v11 = 0;
      v16 = *(_QWORD *)(v11 + 24);
      v17 = v12;
      while (1)
      {
        v18 = a1 + v17;
        v19 = (void **)(a1 + v17 + 120);
        if (*(char *)(a1 + v17 + 143) < 0)
          operator delete(*v19);
        *(_OWORD *)v19 = *(_OWORD *)(v18 + 80);
        *(_QWORD *)(a1 + v17 + 136) = *(_QWORD *)(v18 + 96);
        *(_BYTE *)(v18 + 103) = 0;
        *(_BYTE *)(v18 + 80) = 0;
        *(_OWORD *)(v18 + 144) = *(_OWORD *)(v18 + 104);
        if (v17 == -80)
          break;
        v20 = *(_QWORD *)(a1 + v17 + 72);
        v17 -= 40;
        if (v20 >= v15)
        {
          v21 = a1 + v17 + 120;
          goto LABEL_14;
        }
      }
      v21 = a1;
LABEL_14:
      if (*(char *)(v21 + 23) < 0)
        operator delete(*(void **)v21);
      *(_QWORD *)v21 = v23;
      *(_QWORD *)(v21 + 8) = *(_QWORD *)v24;
      *(_QWORD *)(v21 + 15) = *(_QWORD *)&v24[7];
      *(_BYTE *)(v21 + 23) = v22;
      *(_QWORD *)(v21 + 24) = v16;
      *(_QWORD *)(v21 + 32) = v15;
      if (++v13 == 8)
        return v11 + 40 == a2;
    }
    v10 = v11;
    v12 += 40;
    v11 += 40;
    if (v11 == a2)
      return 1;
  }
}

__n128 sub_1C5E43D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;

  sub_1C5E439B0((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  if (*(_QWORD *)(a3 + 32) < *(_QWORD *)(a4 + 32))
  {
    v9 = *(_QWORD *)(a3 + 16);
    v10 = *(_OWORD *)a3;
    v11 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v11;
    *(_OWORD *)a4 = v10;
    *(_QWORD *)(a4 + 16) = v9;
    result = *(__n128 *)(a4 + 24);
    v12 = *(_OWORD *)(a3 + 24);
    *(__n128 *)(a3 + 24) = result;
    *(_OWORD *)(a4 + 24) = v12;
    if (*(_QWORD *)(a2 + 32) < *(_QWORD *)(a3 + 32))
    {
      v13 = *(_QWORD *)(a2 + 16);
      v14 = *(_OWORD *)a2;
      v15 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v15;
      *(_OWORD *)a3 = v14;
      *(_QWORD *)(a3 + 16) = v13;
      result = *(__n128 *)(a3 + 24);
      v16 = *(_OWORD *)(a2 + 24);
      *(__n128 *)(a2 + 24) = result;
      *(_OWORD *)(a3 + 24) = v16;
      if (*(_QWORD *)(a1 + 32) < *(_QWORD *)(a2 + 32))
      {
        v17 = *(_QWORD *)(a1 + 16);
        v18 = *(_OWORD *)a1;
        v19 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v19;
        *(_OWORD *)a2 = v18;
        *(_QWORD *)(a2 + 16) = v17;
        result = *(__n128 *)(a2 + 24);
        v20 = *(_OWORD *)(a1 + 24);
        *(__n128 *)(a1 + 24) = result;
        *(_OWORD *)(a2 + 24) = v20;
      }
    }
  }
  return result;
}

__n128 sub_1C5E43E7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;

  result.n128_u64[0] = sub_1C5E43D80(a1, a2, a3, a4).n128_u64[0];
  if (*(_QWORD *)(a4 + 32) < *(_QWORD *)(a5 + 32))
  {
    v11 = *(_QWORD *)(a4 + 16);
    v12 = *(_OWORD *)a4;
    v13 = *(_QWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)(a4 + 16) = v13;
    *(_OWORD *)a5 = v12;
    *(_QWORD *)(a5 + 16) = v11;
    result = *(__n128 *)(a5 + 24);
    v14 = *(_OWORD *)(a4 + 24);
    *(__n128 *)(a4 + 24) = result;
    *(_OWORD *)(a5 + 24) = v14;
    if (*(_QWORD *)(a3 + 32) < *(_QWORD *)(a4 + 32))
    {
      v15 = *(_QWORD *)(a3 + 16);
      v16 = *(_OWORD *)a3;
      v17 = *(_QWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)(a3 + 16) = v17;
      *(_OWORD *)a4 = v16;
      *(_QWORD *)(a4 + 16) = v15;
      result = *(__n128 *)(a4 + 24);
      v18 = *(_OWORD *)(a3 + 24);
      *(__n128 *)(a3 + 24) = result;
      *(_OWORD *)(a4 + 24) = v18;
      if (*(_QWORD *)(a2 + 32) < *(_QWORD *)(a3 + 32))
      {
        v19 = *(_QWORD *)(a2 + 16);
        v20 = *(_OWORD *)a2;
        v21 = *(_QWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)(a2 + 16) = v21;
        *(_OWORD *)a3 = v20;
        *(_QWORD *)(a3 + 16) = v19;
        result = *(__n128 *)(a3 + 24);
        v22 = *(_OWORD *)(a2 + 24);
        *(__n128 *)(a2 + 24) = result;
        *(_OWORD *)(a3 + 24) = v22;
        if (*(_QWORD *)(a1 + 32) < *(_QWORD *)(a2 + 32))
        {
          v23 = *(_QWORD *)(a1 + 16);
          v24 = *(_OWORD *)a1;
          v25 = *(_QWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = v25;
          *(_OWORD *)a2 = v24;
          *(_QWORD *)(a2 + 16) = v23;
          result = *(__n128 *)(a2 + 24);
          v26 = *(_OWORD *)(a1 + 24);
          *(__n128 *)(a1 + 24) = result;
          *(_OWORD *)(a2 + 24) = v26;
        }
      }
    }
  }
  return result;
}

void sub_1C5E43FC4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v4 = *a1 + (v2 << 6);
    v5 = a2 + 40;
    v6 = *a1 + 24;
    do
    {
      *(_OWORD *)(v5 - 40) = *(_OWORD *)(v6 - 24);
      v7 = (_BYTE *)(v5 - 24);
      if (*(char *)(v6 + 15) < 0)
      {
        sub_1C47EBC30(v7, *(void **)(v6 - 8), *(_QWORD *)v6);
      }
      else
      {
        v8 = *(_OWORD *)(v6 - 8);
        *(_QWORD *)(v5 - 8) = *(_QWORD *)(v6 + 8);
        *(_OWORD *)v7 = v8;
      }
      if (*(char *)(v6 + 39) < 0)
      {
        sub_1C47EBC30((_BYTE *)v5, *(void **)(v6 + 16), *(_QWORD *)(v6 + 24));
      }
      else
      {
        v9 = *(_OWORD *)(v6 + 16);
        *(_QWORD *)(v5 + 16) = *(_QWORD *)(v6 + 32);
        *(_OWORD *)v5 = v9;
      }
      v10 = v6 - 24;
      v5 += 64;
      v6 += 64;
    }
    while (v10 + 64 != v4);
    v11 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v11)
    {
      v12 = *a1;
      v13 = v11 << 6;
      do
      {
        v14 = v12 + v13;
        if (*(char *)(v12 + v13 - 1) < 0)
          operator delete(*(void **)(v14 - 24));
        if (*(char *)(v14 - 25) < 0)
          operator delete(*(void **)(v12 + v13 - 48));
        v13 -= 64;
      }
      while (v13);
    }
  }
}

uint64_t sub_1C5E440B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = a1 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_1C47EBC30((_BYTE *)v4, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)v4 = v5;
  }
  v6 = (_BYTE *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    sub_1C47EBC30(v6, *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)v6 = v7;
  }
  return a1;
}

const void ***sub_1C5E44138@<X0>(const void ***result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  size_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = (_QWORD *)a2;
  v3 = (size_t)(*result)[1];
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v4 = **result;
  if (v3 >= 0x17)
  {
    v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v5 = v3 | 7;
    v6 = v5 + 1;
    v7 = operator new(v5 + 1);
    v2[1] = v3;
    v2[2] = v6 | 0x8000000000000000;
    *v2 = v7;
    v2 = v7;
  }
  else
  {
    *(_BYTE *)(a2 + 23) = v3;
    if (!v3)
      goto LABEL_9;
  }
  result = (const void ***)memmove(v2, v4, v3);
LABEL_9:
  *((_BYTE *)v2 + v3) = 0;
  return result;
}

uint64_t sub_1C5E441D0()
{
  return __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE4AB8], &stru_1EF8EEAC0, &dword_1C475E000);
}

void llvm::Timer::~Timer(llvm::Timer *this)
{
  llvm::TimerGroup *v2;

  v2 = (llvm::TimerGroup *)*((_QWORD *)this + 17);
  if (v2)
    llvm::TimerGroup::removeTimer(v2, this);
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
}

double llvm::TimeRecord::getCurrentTime@<D0>(llvm::TimeRecord *this@<X0>, uint64_t a2@<X8>)
{
  size_t MallocUsage;
  pid_t v5;
  int v6;
  uint64_t v7;
  pid_t v8;
  llvm::sys::Process *v9;
  uint64_t v10;
  size_t v12;
  int64x2_t v13;
  double result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  rusage_info_t buffer[31];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v17 = 0;
  if ((_DWORD)this)
  {
    if (!atomic_load(qword_1ED836DB0))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836DB0, (void *(*)(void))sub_1C5E459D0, (void (*)(void *))sub_1C6394640);
    if (*(_BYTE *)(qword_1ED836DB0[0] + 128))
      MallocUsage = llvm::sys::Process::GetMallocUsage(this);
    else
      MallocUsage = 0;
    *(_QWORD *)(a2 + 24) = MallocUsage;
    v5 = getpid();
    v6 = proc_pid_rusage(v5, 4, buffer);
    v7 = v19;
    if (v6)
      v7 = 0;
    *(_QWORD *)(a2 + 32) = v7;
    llvm::sys::Process::GetTimeUsage(&v17, &v16, &v15);
  }
  else
  {
    llvm::sys::Process::GetTimeUsage(&v17, &v16, &v15);
    v8 = getpid();
    v9 = (llvm::sys::Process *)proc_pid_rusage(v8, 4, buffer);
    v10 = v19;
    if ((_DWORD)v9)
      v10 = 0;
    *(_QWORD *)(a2 + 32) = v10;
    if (!atomic_load(qword_1ED836DB0))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836DB0, (void *(*)(void))sub_1C5E459D0, (void (*)(void *))sub_1C6394640);
    if (*(_BYTE *)(qword_1ED836DB0[0] + 128))
      v12 = llvm::sys::Process::GetMallocUsage(v9);
    else
      v12 = 0;
    *(_QWORD *)(a2 + 24) = v12;
  }
  v13.i64[0] = v17;
  v13.i64[1] = v16;
  *(float64x2_t *)a2 = vdivq_f64(vcvtq_f64_s64(v13), (float64x2_t)vdupq_n_s64(0x41CDCD6500000000uLL));
  result = (double)v15 / 1000000000.0;
  *(double *)(a2 + 16) = result;
  return result;
}

double llvm::Timer::clear(llvm::Timer *this)
{
  double result;

  *((_WORD *)this + 64) = 0;
  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  return result;
}

double sub_1C5E443F4(llvm::raw_ostream *a1, double a2, double a3)
{
  uint64_t v3;
  double result;
  _QWORD v5[4];

  if (a3 >= 0.0000001)
  {
    v5[0] = &off_1E81A3850;
    v5[1] = "  %7.4f (%5.1f%%)";
    *(double *)&v5[2] = a2;
    *(double *)&v5[3] = a2 * 100.0 / a3;
    llvm::raw_ostream::operator<<(a1, (uint64_t)v5);
  }
  else
  {
    v3 = *((_QWORD *)a1 + 4);
    if ((unint64_t)(*((_QWORD *)a1 + 3) - v3) > 0x11)
    {
      *(_WORD *)(v3 + 16) = 8224;
      result = *(double *)"        -----     ";
      *(_OWORD *)v3 = *(_OWORD *)"        -----     ";
      *((_QWORD *)a1 + 4) += 18;
    }
    else
    {
      llvm::raw_ostream::write(a1, "        -----     ", 0x12uLL);
    }
  }
  return result;
}

llvm::Timer **llvm::NamedRegionTimer::NamedRegionTimer(llvm::Timer **result, unsigned __int8 *a2, size_t a3, std::string::value_type *a4, std::string::size_type a5, unsigned __int8 *a6, size_t a7, uint64_t a8, char *a9, unint64_t a10, char a11)
{
  uint64_t v12;
  std::recursive_mutex *v14;
  size_t **v15;
  size_t *v16;
  uint64_t v17;
  _QWORD *v18;
  llvm::Timer *v19;
  llvm::Timer **v22;

  if (a11)
  {
    v22 = result;
    if (!atomic_load((unint64_t *)&qword_1ED836E28))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1ED836E28, (void *(*)(void))sub_1C5E477EC, (void (*)(void *))sub_1C5E47824);
    v12 = qword_1ED836E28;
    if (!atomic_load(qword_1ED836E40))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836E40, (void *(*)(void))sub_1C6246890, (void (*)(void *))sub_1C62468D0);
    v14 = (std::recursive_mutex *)qword_1ED836E40[0];
    std::recursive_mutex::lock((std::recursive_mutex *)qword_1ED836E40[0]);
    v15 = sub_1C639453C(v12, a6, a7);
    v16 = *v15;
    if (!(*v15)[1])
    {
      v17 = operator new();
      v16[1] = llvm::TimerGroup::TimerGroup(v17, (char *)a6, a7, a9, a10);
    }
    v18 = sub_1C5E457A8((llvm::StringMapImpl *)(v16 + 2), a2, a3);
    v19 = (llvm::Timer *)(*v18 + 8);
    if (!*(_QWORD *)(*v18 + 144))
      llvm::Timer::init(*v18 + 8, (std::string::value_type *)a2, a3, a4, a5, (llvm::TimerGroup *)v16[1]);
    std::recursive_mutex::unlock(v14);
    *v22 = v19;
    llvm::Timer::startTimer(v19);
    return v22;
  }
  else
  {
    *result = 0;
  }
  return result;
}

{
  return llvm::NamedRegionTimer::NamedRegionTimer(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t llvm::TimerGroup::TimerGroup(uint64_t a1, char *a2, unint64_t a3, char *a4, unint64_t a5, uint64_t a6)
{
  __int128 **v8;
  uint64_t v9;
  size_t **i;
  uint64_t v12;
  size_t *v13;
  size_t v14;
  __int128 *p_dst;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  void *p_p;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  unint64_t v23;
  uint64_t v24;
  size_t *v25;
  BOOL v26;
  __int128 __p;
  unint64_t v29;
  __int128 __dst;
  unint64_t v31;

  v8 = (__int128 **)(llvm::TimerGroup::TimerGroup(a1, a2, a3, a4, a5) + 56);
  sub_1C5E447EC((uint64_t)v8, *(unsigned int *)(a6 + 12));
  v9 = *(unsigned int *)(a6 + 8);
  if ((_DWORD)v9)
  {
    for (i = *(size_t ***)a6; !*i || *i + 1 == 0; ++i)
      ;
  }
  else
  {
    i = *(size_t ***)a6;
  }
  v12 = *(_QWORD *)a6 + 8 * v9;
  if (i != (size_t **)v12)
  {
    v13 = *i;
    while (1)
    {
      v14 = *v13;
      if (*v13 > 0x7FFFFFFFFFFFFFF7)
LABEL_41:
        abort();
      if (v14 >= 0x17)
        break;
      HIBYTE(v31) = *v13;
      p_dst = &__dst;
      if (v14)
        goto LABEL_19;
LABEL_20:
      *((_BYTE *)p_dst + v14) = 0;
      v18 = *v13;
      if (*v13 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_41;
      if (v18 >= 0x17)
      {
        v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v18 | 7) != 0x17)
          v20 = v18 | 7;
        v21 = v20 + 1;
        p_p = operator new(v20 + 1);
        *((_QWORD *)&__p + 1) = v18;
        v29 = v21 | 0x8000000000000000;
        *(_QWORD *)&__p = p_p;
      }
      else
      {
        HIBYTE(v29) = *v13;
        p_p = &__p;
        if (!v18)
          goto LABEL_28;
      }
      memmove(p_p, v13 + 6, v18);
LABEL_28:
      v22 = (__int128 *)(v13 + 1);
      *((_BYTE *)p_p + v18) = 0;
      v23 = *(_QWORD *)(a1 + 64);
      if (v23 >= *(_QWORD *)(a1 + 72))
        v24 = sub_1C5E45EE8(v8, v22, &__dst, &__p);
      else
        v24 = sub_1C5E46054(v23, v22, &__dst, &__p) + 88;
      *(_QWORD *)(a1 + 64) = v24;
      if (SHIBYTE(v29) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v31) < 0)
        operator delete((void *)__dst);
      do
      {
        v25 = i[1];
        ++i;
        v13 = v25;
        if (v25)
          v26 = v13 + 1 == 0;
        else
          v26 = 1;
      }
      while (v26);
      if (i == (size_t **)v12)
        return a1;
    }
    v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v16 = v14 | 7;
    v17 = v16 + 1;
    p_dst = (__int128 *)operator new(v16 + 1);
    *((_QWORD *)&__dst + 1) = v14;
    v31 = v17 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
LABEL_19:
    memmove(p_dst, v13 + 6, v14);
    goto LABEL_20;
  }
  return a1;
}

{
  __int128 **v8;
  uint64_t v9;
  size_t **i;
  uint64_t v12;
  size_t *v13;
  size_t v14;
  __int128 *p_dst;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  void *p_p;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  unint64_t v23;
  uint64_t v24;
  size_t *v25;
  BOOL v26;
  __int128 __p;
  unint64_t v29;
  __int128 __dst;
  unint64_t v31;

  v8 = (__int128 **)(llvm::TimerGroup::TimerGroup(a1, a2, a3, a4, a5) + 56);
  sub_1C5E447EC((uint64_t)v8, *(unsigned int *)(a6 + 12));
  v9 = *(unsigned int *)(a6 + 8);
  if ((_DWORD)v9)
  {
    for (i = *(size_t ***)a6; !*i || *i + 1 == 0; ++i)
      ;
  }
  else
  {
    i = *(size_t ***)a6;
  }
  v12 = *(_QWORD *)a6 + 8 * v9;
  if (i != (size_t **)v12)
  {
    v13 = *i;
    while (1)
    {
      v14 = *v13;
      if (*v13 > 0x7FFFFFFFFFFFFFF7)
LABEL_41:
        abort();
      if (v14 >= 0x17)
        break;
      HIBYTE(v31) = *v13;
      p_dst = &__dst;
      if (v14)
        goto LABEL_19;
LABEL_20:
      *((_BYTE *)p_dst + v14) = 0;
      v18 = *v13;
      if (*v13 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_41;
      if (v18 >= 0x17)
      {
        v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v18 | 7) != 0x17)
          v20 = v18 | 7;
        v21 = v20 + 1;
        p_p = operator new(v20 + 1);
        *((_QWORD *)&__p + 1) = v18;
        v29 = v21 | 0x8000000000000000;
        *(_QWORD *)&__p = p_p;
      }
      else
      {
        HIBYTE(v29) = *v13;
        p_p = &__p;
        if (!v18)
          goto LABEL_28;
      }
      memmove(p_p, v13 + 6, v18);
LABEL_28:
      v22 = (__int128 *)(v13 + 1);
      *((_BYTE *)p_p + v18) = 0;
      v23 = *(_QWORD *)(a1 + 64);
      if (v23 >= *(_QWORD *)(a1 + 72))
        v24 = sub_1C5E45EE8(v8, v22, &__dst, &__p);
      else
        v24 = sub_1C5E46054(v23, v22, &__dst, &__p) + 88;
      *(_QWORD *)(a1 + 64) = v24;
      if (SHIBYTE(v29) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v31) < 0)
        operator delete((void *)__dst);
      do
      {
        v25 = i[1];
        ++i;
        v13 = v25;
        if (v25)
          v26 = v13 + 1 == 0;
        else
          v26 = 1;
      }
      while (v26);
      if (i == (size_t **)v12)
        return a1;
    }
    v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v16 = v14 | 7;
    v17 = v16 + 1;
    p_dst = (__int128 *)operator new(v16 + 1);
    *((_QWORD *)&__dst + 1) = v14;
    v31 = v17 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
LABEL_19:
    memmove(p_dst, v13 + 6, v14);
    goto LABEL_20;
  }
  return a1;
}

void sub_1C5E447EC(uint64_t a1, unint64_t a2)
{
  __int128 *v2;
  __int128 *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  __int128 *v10;

  v2 = *(__int128 **)a1;
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    v4 = *(__int128 **)(a1 + 8);
    v5 = 88 * a2;
    v6 = (char *)operator new(88 * a2);
    v7 = &v6[v5];
    v8 = &v6[(char *)v4 - (char *)v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = (uint64_t)&v6[(char *)v4 - (char *)v2];
      do
      {
        v4 = (__int128 *)((char *)v4 - 88);
        v9 = sub_1C5E45E5C(v9 - 88, v4);
      }
      while (v4 != v2);
      v2 = *(__int128 **)a1;
      v10 = *(__int128 **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v10 != v2)
      {
        if (*((char *)v10 - 1) < 0)
          operator delete(*((void **)v10 - 3));
        if (*((char *)v10 - 25) < 0)
          operator delete(*((void **)v10 - 6));
        v10 = (__int128 *)((char *)v10 - 88);
      }
    }
    if (v2)
      operator delete(v2);
  }
}

void llvm::TimerGroup::~TimerGroup(llvm::TimerGroup *this)
{
  llvm::Timer *i;
  std::recursive_mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  for (i = (llvm::Timer *)*((_QWORD *)this + 6); i; i = (llvm::Timer *)*((_QWORD *)this + 6))
    llvm::TimerGroup::removeTimer(this, i);
  if (!atomic_load(qword_1ED836E40))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836E40, (void *(*)(void))sub_1C6246890, (void (*)(void *))sub_1C62468D0);
  v4 = (std::recursive_mutex *)qword_1ED836E40[0];
  std::recursive_mutex::lock((std::recursive_mutex *)qword_1ED836E40[0]);
  **((_QWORD **)this + 10) = *((_QWORD *)this + 11);
  v5 = *((_QWORD *)this + 11);
  if (v5)
    *(_QWORD *)(v5 + 80) = *((_QWORD *)this + 10);
  std::recursive_mutex::unlock(v4);
  v6 = *((_QWORD *)this + 7);
  if (v6)
  {
    v7 = *((_QWORD *)this + 8);
    v8 = (void *)*((_QWORD *)this + 7);
    if (v7 != v6)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0)
          operator delete(*(void **)(v7 - 24));
        if (*(char *)(v7 - 25) < 0)
          operator delete(*(void **)(v7 - 48));
        v7 -= 88;
      }
      while (v7 != v6);
      v8 = (void *)*((_QWORD *)this + 7);
    }
    *((_QWORD *)this + 8) = v6;
    operator delete(v8);
  }
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void llvm::TimerGroup::PrintQueuedTimers(llvm::TimerGroup *this, llvm::raw_ostream *a2)
{
  uint64_t v5;
  __int128 *v6;
  unint64_t v7;
  std::string *v8;
  uint64_t v9;
  float64x2_t v10;
  int64x2_t v11;
  double v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  llvm::raw_ostream *v20;
  char v21;
  BOOL v22;
  const char *v23;
  size_t v24;
  size_t v25;
  _BYTE *v26;
  uint64_t v27;
  _OWORD *v28;
  __int128 v29;
  _DWORD *v30;
  _BYTE *v32;
  double v33;
  uint64_t v34;
  double v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  BOOL v41;
  const char *v42;
  size_t v43;
  size_t v44;
  _BYTE *v45;
  _DWORD *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t i;
  _QWORD v51[4];
  float64x2_t v52;
  double v53;
  int64x2_t v54;

  if (!atomic_load(qword_1ED836DE0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836DE0, (void *(*)(void))sub_1C5E45D3C, (void (*)(void *))sub_1C6394640);
  if (*(_BYTE *)(qword_1ED836DE0[0] + 128))
  {
    v5 = *((_QWORD *)this + 7);
    v6 = (__int128 *)*((_QWORD *)this + 8);
    v7 = 126 - 2 * __clz(0x2E8BA2E8BA2E8BA3 * (((uint64_t)v6 - v5) >> 3));
    if (v6 == (__int128 *)v5)
      v8 = 0;
    else
      v8 = (std::string *)v7;
    sub_1C5E460D8(v5, v6, v8, 1);
  }
  v9 = *((_QWORD *)this + 7);
  v10 = 0uLL;
  v11 = 0uLL;
  v12 = 0.0;
  while (v9 != *((_QWORD *)this + 8))
  {
    v10 = vaddq_f64(v10, *(float64x2_t *)v9);
    v12 = v12 + *(double *)(v9 + 16);
    v11 = vaddq_s64(*(int64x2_t *)(v9 + 24), v11);
    v9 += 88;
  }
  v52 = v10;
  v53 = v12;
  v54 = v11;
  v13 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v13) > 2)
  {
    *(_BYTE *)(v13 + 2) = 61;
    *(_WORD *)v13 = 15677;
    *((_QWORD *)a2 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(a2, "===", 3uLL);
  }
  v14 = operator new(0x50uLL);
  *(_QWORD *)&v15 = 0x2D2D2D2D2D2D2D2DLL;
  *((_QWORD *)&v15 + 1) = 0x2D2D2D2D2D2D2D2DLL;
  *v14 = v15;
  v14[1] = v15;
  v14[2] = v15;
  v14[3] = v15;
  *(_OWORD *)((char *)v14 + 57) = v15;
  *((_BYTE *)v14 + 73) = 0;
  llvm::raw_ostream::write(a2, (const char *)v14, 0x49uLL);
  v16 = (_DWORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v16 > 3uLL)
  {
    *v16 = 171785533;
    *((_QWORD *)a2 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(a2, "===\n", 4uLL);
  }
  operator delete(v14);
  if (*((char *)this + 47) < 0)
    v17 = *((_QWORD *)this + 4);
  else
    v17 = *((unsigned __int8 *)this + 47);
  v18 = (unint64_t)(80 - v17) >> 1;
  if (v18 <= 0x50)
    v19 = v18;
  else
    v19 = 0;
  v20 = llvm::raw_ostream::indent(a2, v19);
  v21 = *((_BYTE *)this + 47);
  v22 = v21 < 0;
  if (v21 >= 0)
    v23 = (char *)this + 24;
  else
    v23 = (const char *)*((_QWORD *)this + 3);
  v24 = v21 & 0x7F;
  if (v22)
    v25 = *((_QWORD *)this + 4);
  else
    v25 = v24;
  llvm::raw_ostream::write(v20, v23, v25);
  v26 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)v26 >= *((_QWORD *)a2 + 3))
  {
    llvm::raw_ostream::write(a2, 10);
  }
  else
  {
    *((_QWORD *)a2 + 4) = v26 + 1;
    *v26 = 10;
  }
  v27 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v27) > 2)
  {
    *(_BYTE *)(v27 + 2) = 61;
    *(_WORD *)v27 = 15677;
    *((_QWORD *)a2 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(a2, "===", 3uLL);
  }
  v28 = operator new(0x50uLL);
  *(_QWORD *)&v29 = 0x2D2D2D2D2D2D2D2DLL;
  *((_QWORD *)&v29 + 1) = 0x2D2D2D2D2D2D2D2DLL;
  *v28 = v29;
  v28[1] = v29;
  v28[2] = v29;
  v28[3] = v29;
  *(_OWORD *)((char *)v28 + 57) = v29;
  *((_BYTE *)v28 + 73) = 0;
  llvm::raw_ostream::write(a2, (const char *)v28, 0x49uLL);
  v30 = (_DWORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v30 > 3uLL)
  {
    *v30 = 171785533;
    *((_QWORD *)a2 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(a2, "===\n", 4uLL);
  }
  operator delete(v28);
  if (!atomic_load(qword_1ED825CF8))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED825CF8, (void *(*)(void))sub_1C5E45768, (void (*)(void *))sub_1C6394510);
  if ((llvm::TimerGroup *)qword_1ED825CF8[0] != this)
  {
    v51[0] = &off_1E81A3850;
    v51[1] = "  Total Execution Time: %5.4f seconds (%5.4f wall clock)\n";
    *(double *)&v51[2] = v52.f64[1] + v53;
    v51[3] = *(_QWORD *)&v52.f64[0];
    llvm::raw_ostream::operator<<(a2, (uint64_t)v51);
  }
  v32 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)v32 >= *((_QWORD *)a2 + 3))
  {
    llvm::raw_ostream::write(a2, 10);
  }
  else
  {
    *((_QWORD *)a2 + 4) = v32 + 1;
    *v32 = 10;
  }
  v33 = v52.f64[1];
  v34 = *((_QWORD *)a2 + 4);
  if (v52.f64[1] != 0.0)
  {
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v34) > 0x11)
    {
      *(_WORD *)(v34 + 16) = 11565;
      *(_OWORD *)v34 = *(_OWORD *)"   ---User Time---";
      v34 = *((_QWORD *)a2 + 4) + 18;
      *((_QWORD *)a2 + 4) = v34;
    }
    else
    {
      llvm::raw_ostream::write(a2, "   ---User Time---", 0x12uLL);
      v34 = *((_QWORD *)a2 + 4);
    }
  }
  v35 = v53;
  if (v53 != 0.0)
  {
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v34) > 0x11)
    {
      *(_WORD *)(v34 + 16) = 11565;
      *(_OWORD *)v34 = *(_OWORD *)"   --System Time--";
      v34 = *((_QWORD *)a2 + 4) + 18;
      *((_QWORD *)a2 + 4) = v34;
    }
    else
    {
      llvm::raw_ostream::write(a2, "   --System Time--", 0x12uLL);
      v34 = *((_QWORD *)a2 + 4);
    }
  }
  if (v33 + v35 != 0.0)
  {
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v34) > 0x11)
    {
      *(_WORD *)(v34 + 16) = 11565;
      *(_OWORD *)v34 = *(_OWORD *)"   --User+System--";
      v34 = *((_QWORD *)a2 + 4) + 18;
      *((_QWORD *)a2 + 4) = v34;
    }
    else
    {
      llvm::raw_ostream::write(a2, "   --User+System--", 0x12uLL);
      v34 = *((_QWORD *)a2 + 4);
    }
  }
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v34) > 0x11)
  {
    *(_WORD *)(v34 + 16) = 11565;
    *(_OWORD *)v34 = *(_OWORD *)"   ---Wall Time---";
    v36 = (char *)(*((_QWORD *)a2 + 4) + 18);
    *((_QWORD *)a2 + 4) = v36;
  }
  else
  {
    llvm::raw_ostream::write(a2, "   ---Wall Time---", 0x12uLL);
    v36 = (char *)*((_QWORD *)a2 + 4);
  }
  if (v54.i64[0])
  {
    if (*((_QWORD *)a2 + 3) - (_QWORD)v36 > 0xAuLL)
    {
      *(_DWORD *)(v36 + 7) = 757935469;
      *(_QWORD *)v36 = *(_QWORD *)"  ---Mem---";
      v36 = (char *)(*((_QWORD *)a2 + 4) + 11);
      *((_QWORD *)a2 + 4) = v36;
    }
    else
    {
      llvm::raw_ostream::write(a2, "  ---Mem---", 0xBuLL);
      v36 = (char *)*((_QWORD *)a2 + 4);
    }
  }
  if (v54.i64[1])
  {
    if (*((_QWORD *)a2 + 3) - (_QWORD)v36 > 0xCuLL)
    {
      qmemcpy(v36, "  ---Instr---", 13);
      v36 = (char *)(*((_QWORD *)a2 + 4) + 13);
      *((_QWORD *)a2 + 4) = v36;
    }
    else
    {
      llvm::raw_ostream::write(a2, "  ---Instr---", 0xDuLL);
      v36 = (char *)*((_QWORD *)a2 + 4);
    }
  }
  if (*((_QWORD *)a2 + 3) - (_QWORD)v36 > 0xEuLL)
  {
    qmemcpy(v36, "  --- Name ---\n", 15);
    *((_QWORD *)a2 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(a2, "  --- Name ---\n", 0xFuLL);
  }
  v38 = *((_QWORD *)this + 7);
  v37 = *((_QWORD *)this + 8);
  if (v37 != v38)
  {
    v39 = v37 - 24;
    do
    {
      llvm::TimeRecord::print((llvm::TimeRecord *)(v39 - 64), (const llvm::TimeRecord *)&v52, a2);
      v40 = *(_BYTE *)(v39 + 23);
      v41 = v40 < 0;
      if (v40 >= 0)
        v42 = (const char *)v39;
      else
        v42 = *(const char **)v39;
      v43 = v40 & 0x7F;
      if (v41)
        v44 = *(_QWORD *)(v39 + 8);
      else
        v44 = v43;
      llvm::raw_ostream::write(a2, v42, v44);
      v45 = (_BYTE *)*((_QWORD *)a2 + 4);
      if ((unint64_t)v45 >= *((_QWORD *)a2 + 3))
      {
        llvm::raw_ostream::write(a2, 10);
      }
      else
      {
        *((_QWORD *)a2 + 4) = v45 + 1;
        *v45 = 10;
      }
      v39 -= 88;
    }
    while (v39 + 24 != v38);
  }
  llvm::TimeRecord::print((llvm::TimeRecord *)&v52, (const llvm::TimeRecord *)&v52, a2);
  v46 = (_DWORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v46 > 6uLL)
  {
    *(_DWORD *)((char *)v46 + 3) = 168455265;
    *v46 = 1635020628;
    v47 = *((_QWORD *)a2 + 4) + 7;
    *((_QWORD *)a2 + 4) = v47;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Total\n\n", 7uLL);
    v47 = *((_QWORD *)a2 + 4);
  }
  v48 = (const char *)*((_QWORD *)a2 + 2);
  if ((const char *)v47 != v48)
  {
    *((_QWORD *)a2 + 4) = v48;
    llvm::raw_ostream::flush_tied_then_write(a2, v48, v47 - (_QWORD)v48);
  }
  v49 = *((_QWORD *)this + 7);
  for (i = *((_QWORD *)this + 8); i != v49; i -= 88)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
    if (*(char *)(i - 25) < 0)
      operator delete(*(void **)(i - 48));
  }
  *((_QWORD *)this + 8) = v49;
}

uint64_t llvm::TimerGroup::getTimer(uint64_t a1, const void *a2, size_t a3)
{
  std::recursive_mutex *v7;
  uint64_t i;
  char v9;
  const void *v10;
  uint64_t v11;

  if (!atomic_load(qword_1ED836E40))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836E40, (void *(*)(void))sub_1C6246890, (void (*)(void *))sub_1C62468D0);
  v7 = (std::recursive_mutex *)qword_1ED836E40[0];
  std::recursive_mutex::lock((std::recursive_mutex *)qword_1ED836E40[0]);
  for (i = *(_QWORD *)(a1 + 48); i; i = *(_QWORD *)(i + 152))
  {
    v9 = *(_BYTE *)(i + 103);
    if (v9 >= 0)
      v10 = (const void *)(i + 80);
    else
      v10 = *(const void **)(i + 80);
    v11 = *(_QWORD *)(i + 88);
    if (v9 >= 0)
      v11 = v9 & 0x7F;
    if (v11 == a3 && (!a3 || !memcmp(v10, a2, a3)))
      break;
  }
  std::recursive_mutex::unlock(v7);
  return i;
}

uint64_t llvm::getNamedTimer(unsigned __int8 *a1, size_t a2, unsigned __int8 *a3, size_t a4)
{
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  int v13;
  size_t v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v25;
  uint64_t v26;
  int v27;
  size_t v28;
  unsigned __int8 *v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char v37;
  BOOL v38;
  const void *v39;
  uint64_t v40;
  uint64_t Timer;
  uint64_t v42;
  std::recursive_mutex *v44;
  std::recursive_mutex *v45;
  unsigned __int8 *v46;

  if (!atomic_load(qword_1ED836E40))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836E40, (void *(*)(void))sub_1C6246890, (void (*)(void *))sub_1C62468D0);
  v44 = (std::recursive_mutex *)qword_1ED836E40[0];
  std::recursive_mutex::lock((std::recursive_mutex *)qword_1ED836E40[0]);
  if (!atomic_load((unint64_t *)&qword_1ED836E28))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1ED836E28, (void *(*)(void))sub_1C5E477EC, (void (*)(void *))sub_1C5E47824);
  v46 = a3;
  v9 = qword_1ED836E28;
  if (!atomic_load(qword_1ED836E40))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836E40, (void *(*)(void))sub_1C6246890, (void (*)(void *))sub_1C62468D0);
  v11 = qword_1ED836E40[0];
  std::recursive_mutex::lock((std::recursive_mutex *)qword_1ED836E40[0]);
  v12 = *(unsigned int *)(v9 + 8);
  v45 = (std::recursive_mutex *)v11;
  if ((_DWORD)v12)
  {
    v13 = 0;
    if (a2)
    {
      v14 = a2;
      v15 = a1;
      do
      {
        v16 = *v15++;
        v13 = 33 * v13 + v16;
        --v14;
      }
      while (v14);
    }
    v17 = *(_QWORD *)v9;
    v18 = *(_QWORD *)v9 + 8 * v12 + 8;
    v19 = 1;
    v20 = v13;
    while (1)
    {
      v21 = v20 & (v12 - 1);
      v22 = *(_QWORD **)(v17 + 8 * v21);
      if (v22 != (_QWORD *)-8)
      {
        if (!v22)
          goto LABEL_21;
        if (*(_DWORD *)(v18 + 4 * v21) == v13
          && a2 == *v22
          && (!a2 || !memcmp(a1, (char *)v22 + *(unsigned int *)(v9 + 20), a2)))
        {
          break;
        }
      }
      v20 = v19 + v21;
      ++v19;
    }
    if ((_DWORD)v21 != -1)
      v12 = (int)v21;
  }
  else
  {
    v12 = 0;
    v17 = *(_QWORD *)v9;
  }
LABEL_21:
  v23 = (uint64_t *)(v17 + 8 * v12);
  std::recursive_mutex::unlock(v45);
  if (!atomic_load((unint64_t *)&qword_1ED836E28))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1ED836E28, (void *(*)(void))sub_1C5E477EC, (void (*)(void *))sub_1C5E47824);
  if (v23 != (uint64_t *)(*(_QWORD *)qword_1ED836E28 + 8 * *(unsigned int *)(qword_1ED836E28 + 8)))
  {
    v25 = *v23;
    v26 = *(unsigned int *)(*v23 + 24);
    if ((_DWORD)v26)
    {
      v27 = 0;
      if (a4)
      {
        v28 = a4;
        v29 = v46;
        do
        {
          v30 = *v29++;
          v27 = 33 * v27 + v30;
          --v28;
        }
        while (v28);
      }
      v31 = *(_QWORD *)(v25 + 16);
      v32 = 1;
      v33 = v27;
      while (1)
      {
        v34 = v33 & (v26 - 1);
        v35 = *(_QWORD **)(v31 + 8 * v34);
        if (v35 != (_QWORD *)-8)
        {
          if (!v35)
            goto LABEL_47;
          if (*(_DWORD *)(v31 + 8 * v26 + 8 + 4 * v34) == v27
            && a4 == *v35
            && (!a4 || !memcmp(v46, (char *)v35 + *(unsigned int *)(v25 + 36), a4)))
          {
            break;
          }
        }
        v33 = v32 + v34;
        ++v32;
      }
      if ((_DWORD)v34 != -1 && (int)v34 != v26)
      {
        v42 = *(_QWORD *)(v31 + 8 * (int)v34) + 8;
        goto LABEL_48;
      }
    }
    goto LABEL_47;
  }
  v36 = qword_1ED825CF0;
  if (!qword_1ED825CF0)
  {
LABEL_47:
    v42 = 0;
    goto LABEL_48;
  }
  while (1)
  {
    v37 = *(_BYTE *)(v36 + 23);
    v38 = v37 < 0;
    if (v37 >= 0)
      v39 = (const void *)v36;
    else
      v39 = *(const void **)v36;
    v40 = v37 & 0x7F;
    if (v38)
      v40 = *(_QWORD *)(v36 + 8);
    if (v40 == a2 && (!a2 || !memcmp(v39, a1, a2)))
    {
      Timer = llvm::TimerGroup::getTimer(v36, v46, a4);
      if (Timer)
        break;
    }
    v36 = *(_QWORD *)(v36 + 88);
    if (!v36)
      goto LABEL_47;
  }
  v42 = Timer;
LABEL_48:
  std::recursive_mutex::unlock(v44);
  return v42;
}

_QWORD *sub_1C5E456F0()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  return result;
}

uint64_t sub_1C5E45720(uint64_t result)
{
  if (result)
  {
    if (*(char *)(result + 23) < 0)
      operator delete(*(void **)result);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

uint64_t sub_1C5E45768()
{
  uint64_t v0;

  v0 = operator new();
  return llvm::TimerGroup::TimerGroup(v0, "misc", 4uLL, "Miscellaneous Ungrouped Timers", 0x1EuLL);
}

_QWORD *sub_1C5E457A8(llvm::StringMapImpl *a1, unsigned __int8 *a2, size_t __n)
{
  unsigned int v5;
  int v6;
  size_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *i;
  char *v20;
  char *v21;
  char *v22;
  _QWORD *v25;

  v5 = *((_DWORD *)a1 + 2);
  if (!v5)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    v25 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v25)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v25[16] = 2;
    *(_QWORD *)a1 = v25;
    v5 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  v6 = 0;
  if (__n)
  {
    v7 = __n;
    v8 = a2;
    do
    {
      v9 = *v8++;
      v6 = 33 * v6 + v9;
      --v7;
    }
    while (v7);
  }
  v10 = *(_QWORD *)a1;
  v11 = v5 - 1;
  v12 = *(_QWORD *)a1 + 8 * v5 + 8;
  v13 = -1;
  v14 = 1;
  v15 = v6;
  while (1)
  {
    v16 = v15 & v11;
    v17 = *(_QWORD **)(v10 + 8 * v16);
    if (!v17)
      break;
    if (v17 == (_QWORD *)-8)
    {
      if (v13 == -1)
        v13 = v15 & v11;
    }
    else if (*(_DWORD *)(v12 + 4 * v16) == v6
           && __n == *v17
           && (!__n || !memcmp(a2, (char *)v17 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_20;
    }
    v15 = v14 + v16;
    ++v14;
  }
  v18 = v13;
  if (v13 == -1)
  {
    v18 = v16;
    v16 = v16;
  }
  else
  {
    v16 = v13;
  }
  *(_DWORD *)(v12 + 4 * v18) = v6;
  v17 = *(_QWORD **)(v10 + 8 * v16);
LABEL_20:
  i = (_QWORD *)(v10 + 8 * v16);
  if (v17 == (_QWORD *)-8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v17)
  {
    return i;
  }
  v20 = (char *)operator new(__n + 169, (std::align_val_t)8uLL);
  v21 = v20;
  v22 = v20 + 168;
  if (__n)
    memcpy(v20 + 168, a2, __n);
  v22[__n] = 0;
  *(_QWORD *)v21 = __n;
  *(_OWORD *)(v21 + 8) = 0u;
  *(_OWORD *)(v21 + 24) = 0u;
  *(_OWORD *)(v21 + 40) = 0u;
  *(_OWORD *)(v21 + 56) = 0u;
  *(_OWORD *)(v21 + 72) = 0u;
  *(_OWORD *)(v21 + 88) = 0u;
  *(_OWORD *)(v21 + 104) = 0u;
  *(_OWORD *)(v21 + 120) = 0u;
  *(_OWORD *)(v21 + 136) = 0u;
  *(_OWORD *)(v21 + 152) = 0u;
  *i = v21;
  ++*((_DWORD *)a1 + 3);
  for (i = (_QWORD *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v16));
        !*i || *i == -8;
  return i;
}

uint64_t sub_1C5E459D0()
{
  uint64_t v0;
  int v2;
  __int128 v3;

  v0 = operator new();
  *(_QWORD *)&v3 = "Enable -time-passes memory tracking (this may be slow)";
  *((_QWORD *)&v3 + 1) = 54;
  v2 = 1;
  return sub_1C6394654(v0, &v3, &v2);
}

uint64_t sub_1C5E45A24()
{
  uint64_t v0;
  uint64_t v2;
  std::string *v4;
  int v5;
  __int128 v6;
  __int128 v7;

  v0 = operator new();
  *(_QWORD *)&v7 = "filename";
  *((_QWORD *)&v7 + 1) = 8;
  *(_QWORD *)&v6 = "File to append -stats and -timer output to";
  *((_QWORD *)&v6 + 1) = 42;
  v5 = 1;
  if (!atomic_load(qword_1ED836DF8))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836DF8, (void *(*)(void))sub_1C5E456F0, (void (*)(void *))sub_1C5E45720);
  v4 = (std::string *)qword_1ED836DF8[0];
  v2 = sub_1C47AD050(v0, 0, 0);
  *(_QWORD *)(v0 + 152) = 0;
  *(_QWORD *)(v0 + 160) = 0;
  *(_QWORD *)(v0 + 144) = 0;
  *(_BYTE *)(v0 + 168) = 0;
  *(_QWORD *)(v0 + 128) = 0;
  *(_QWORD *)(v0 + 136) = &unk_1E819E950;
  *(_QWORD *)v0 = &unk_1E81A37A0;
  *(_QWORD *)(v0 + 176) = &unk_1E819E970;
  *(_QWORD *)(v0 + 184) = &unk_1E81A3808;
  *(_QWORD *)(v0 + 208) = v0 + 184;
  sub_1C6394728(v2, &v7, &v6, &v5, &v4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)v0);
  return v0;
}

uint64_t sub_1C5E45B44(uint64_t a1, __int16 a2, int a3, int a4, void *__src, size_t __len)
{
  std::string *p_dst;
  size_t v11;
  size_t v12;
  uint64_t v13;
  std::string __p;
  std::string __dst;

  memset(&__p, 0, sizeof(__p));
  if (!__src)
  {
    memset(&__dst, 0, sizeof(__dst));
    goto LABEL_13;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_18;
  if (__len >= 0x17)
  {
    v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v11 = __len | 7;
    v12 = v11 + 1;
    p_dst = (std::string *)operator new(v11 + 1);
    __dst.__r_.__value_.__l.__size_ = __len;
    __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_10:
    memmove(p_dst, __src, __len);
  p_dst->__r_.__value_.__s.__data_[__len] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_13:
  __p = __dst;
  std::string::operator=(*(std::string **)(a1 + 128), &__p);
  *(_WORD *)(a1 + 12) = a2;
  v13 = *(_QWORD *)(a1 + 208);
  if (!v13)
  {
    sub_1C485C2F0();
LABEL_18:
    abort();
  }
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v13 + 48))(v13, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

_QWORD *sub_1C5E45C68(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E81A37A0;
  v2 = (_QWORD *)(a1 + 184);
  v3 = *(_QWORD **)(a1 + 208);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)(a1 + 136) = &off_1E7FA8D20;
  if (*(char *)(a1 + 167) < 0)
    operator delete(*(void **)(a1 + 144));
  return sub_1C47A80D0((_QWORD *)a1);
}

void sub_1C5E45CE4(uint64_t a1)
{
  std::string __str;

  if (*(_BYTE *)(a1 + 168))
  {
    std::string::operator=(*(std::string **)(a1 + 128), (const std::string *)(a1 + 144));
  }
  else
  {
    memset(&__str, 0, sizeof(__str));
    std::string::operator=(*(std::string **)(a1 + 128), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
}

llvm::cl::Option *sub_1C5E45D3C()
{
  llvm::cl::Option *v0;
  int v2;
  char v3;
  char *v4;
  __n128 v5;

  v0 = (llvm::cl::Option *)operator new();
  v5.n128_u64[0] = (unint64_t)"In the report, sort the timers in each group in wall clock time order";
  v5.n128_u64[1] = 69;
  v3 = 1;
  v4 = &v3;
  v2 = 1;
  return sub_1C6394950(v0, &v5, &v4, &v2);
}

__n128 sub_1C5E45DA0(uint64_t a1, __n128 *a2, _BYTE **a3, _WORD *a4)
{
  __n128 result;
  _BYTE *v9;

  llvm::cl::Option::setArgStr(a1, "sort-timers", 0xBuLL);
  result = *a2;
  *(__n128 *)(a1 + 32) = *a2;
  v9 = *a3;
  *(_BYTE *)(a1 + 128) = **a3;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v9;
  *(_WORD *)(a1 + 10) = (32 * (*a4 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  return result;
}

uint64_t sub_1C5E45E1C(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  return a1;
}

uint64_t sub_1C5E45E5C(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  _BYTE *v8;
  __int128 v9;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  v6 = a1 + 40;
  if (*((char *)a2 + 63) < 0)
  {
    sub_1C47EBC30((_BYTE *)v6, *((void **)a2 + 5), *((_QWORD *)a2 + 6));
  }
  else
  {
    v7 = *(__int128 *)((char *)a2 + 40);
    *(_QWORD *)(v6 + 16) = *((_QWORD *)a2 + 7);
    *(_OWORD *)v6 = v7;
  }
  v8 = (_BYTE *)(a1 + 64);
  if (*((char *)a2 + 87) < 0)
  {
    sub_1C47EBC30(v8, *((void **)a2 + 8), *((_QWORD *)a2 + 9));
  }
  else
  {
    v9 = a2[4];
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
    *(_OWORD *)v8 = v9;
  }
  return a1;
}

uint64_t sub_1C5E45EE8(__int128 **a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  __int128 *v17;
  __int128 *v18;

  v4 = 0x2E8BA2E8BA2E8BA3 * (((char *)a1[1] - (char *)*a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL)
    abort();
  if (0x5D1745D1745D1746 * (((char *)a1[2] - (char *)*a1) >> 3) > v5)
    v5 = 0x5D1745D1745D1746 * (((char *)a1[2] - (char *)*a1) >> 3);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (((char *)a1[2] - (char *)*a1) >> 3)) >= 0x1745D1745D1745DLL)
    v10 = 0x2E8BA2E8BA2E8BALL;
  else
    v10 = v5;
  if (v10)
  {
    if (v10 > 0x2E8BA2E8BA2E8BALL)
      sub_1C4764EE4();
    v11 = (char *)operator new(88 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = (uint64_t)&v11[88 * v4];
  v13 = (__int128 *)&v11[88 * v10];
  v14 = sub_1C5E46054(v12, a2, a3, a4);
  v15 = v14 + 88;
  v17 = *a1;
  v16 = a1[1];
  if (v16 == *a1)
  {
    *a1 = (__int128 *)v14;
    a1[1] = (__int128 *)v15;
    a1[2] = v13;
  }
  else
  {
    do
    {
      v16 = (__int128 *)((char *)v16 - 88);
      v14 = sub_1C5E45E5C(v14 - 88, v16);
    }
    while (v16 != v17);
    v16 = *a1;
    v18 = a1[1];
    *a1 = (__int128 *)v14;
    a1[1] = (__int128 *)v15;
    a1[2] = v13;
    while (v18 != v16)
    {
      if (*((char *)v18 - 1) < 0)
        operator delete(*((void **)v18 - 3));
      if (*((char *)v18 - 25) < 0)
        operator delete(*((void **)v18 - 6));
      v18 = (__int128 *)((char *)v18 - 88);
    }
  }
  if (v16)
    operator delete(v16);
  return v15;
}

uint64_t sub_1C5E46054(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  _BYTE *v10;
  __int128 v11;

  v6 = *a2;
  v7 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a1 = v6;
  *(_OWORD *)(a1 + 16) = v7;
  v8 = a1 + 40;
  if (*((char *)a3 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)v8, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v9 = *a3;
    *(_QWORD *)(v8 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v8 = v9;
  }
  v10 = (_BYTE *)(a1 + 64);
  if (*((char *)a4 + 23) < 0)
  {
    sub_1C47EBC30(v10, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v11 = *a4;
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a4 + 2);
    *(_OWORD *)v10 = v11;
  }
  return a1;
}

void sub_1C5E460D8(uint64_t a1, __int128 *a2, std::string *a3, char a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  std::string::size_type v15;
  __int128 v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  __int128 *v20;
  double v21;
  double v22;
  __int128 *v23;
  __int128 v24;
  __int128 v25;
  std::string::size_type v26;
  __int128 v27;
  double v28;
  double v29;
  __int128 *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  BOOL v36;
  double v37;
  unint64_t v38;
  __int128 *v39;
  double v40;
  __int128 v41;
  __int128 v42;
  std::string::size_type v43;
  __int128 v44;
  double v45;
  double v46;
  __int128 *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 *v52;
  __int128 v53;
  __int128 v54;
  std::string::size_type v55;
  __int128 v56;
  __int128 *v57;
  uint64_t v58;
  double *v59;
  double v60;
  double v61;
  __int128 *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  std::string *v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  int64_t v70;
  int64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  std::string *v79;
  std::string *v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 *v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  __int128 v102;
  __int128 v103;
  std::string *v104;
  std::string *v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 *v111;
  std::string *v112;
  double v113;
  double v114;
  std::string *v115;
  std::string *v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 *v120;
  __int128 *v121;
  __int128 *v122;
  __int128 *v123;
  std::string *v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  std::string v129;
  std::string v130;
  __int128 v131;
  __int128 v132;
  std::string::size_type v133;
  std::string v134;
  std::string __p;

void sub_1C5E46D4C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  double v6;
  double v7;
  std::string *v8;
  std::string *v9;
  __int128 v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  std::string v30;
  std::string __p;

  v6 = *(double *)a2;
  v7 = *(double *)a3;
  if (*(double *)a2 >= *(double *)a1)
  {
    if (v7 < v6)
    {
      sub_1C5E45E5C((uint64_t)&v27, (__int128 *)a2);
      v14 = *a3;
      v15 = a3[1];
      *(_QWORD *)(a2 + 32) = *((_QWORD *)a3 + 4);
      *(_OWORD *)a2 = v14;
      *(_OWORD *)(a2 + 16) = v15;
      std::string::operator=((std::string *)(a2 + 40), (const std::string *)((char *)a3 + 40));
      std::string::operator=((std::string *)(a2 + 64), (const std::string *)(a3 + 4));
      v16 = v28;
      *a3 = v27;
      a3[1] = v16;
      *((_QWORD *)a3 + 4) = v29;
      std::string::operator=((std::string *)((char *)a3 + 40), &v30);
      std::string::operator=((std::string *)(a3 + 4), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      if (*(double *)a2 < *(double *)a1)
      {
        sub_1C5E45E5C((uint64_t)&v27, (__int128 *)a1);
        v17 = *(_OWORD *)a2;
        v18 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)a1 = v17;
        *(_OWORD *)(a1 + 16) = v18;
        std::string::operator=((std::string *)(a1 + 40), (const std::string *)(a2 + 40));
        std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
        v19 = v28;
        *(_OWORD *)a2 = v27;
        *(_OWORD *)(a2 + 16) = v19;
        *(_QWORD *)(a2 + 32) = v29;
        std::string::operator=((std::string *)(a2 + 40), &v30);
        v20 = (std::string *)(a2 + 64);
LABEL_18:
        std::string::operator=(v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v30.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    v8 = (std::string *)(a1 + 40);
    v9 = (std::string *)(a1 + 64);
    if (v7 < v6)
    {
      sub_1C5E45E5C((uint64_t)&v27, (__int128 *)a1);
      v10 = *a3;
      v11 = a3[1];
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a3 + 4);
      *(_OWORD *)a1 = v10;
      *(_OWORD *)(a1 + 16) = v11;
      std::string::operator=((std::string *)(a1 + 40), (const std::string *)((char *)a3 + 40));
      v12 = (std::string *)(a3 + 4);
      std::string::operator=(v9, (const std::string *)(a3 + 4));
      v13 = v28;
      *a3 = v27;
      a3[1] = v13;
      *((_QWORD *)a3 + 4) = v29;
      std::string::operator=((std::string *)((char *)a3 + 40), &v30);
LABEL_17:
      v20 = v12;
      goto LABEL_18;
    }
    sub_1C5E45E5C((uint64_t)&v27, (__int128 *)a1);
    v21 = *(_OWORD *)a2;
    v22 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)a1 = v21;
    *(_OWORD *)(a1 + 16) = v22;
    std::string::operator=(v8, (const std::string *)(a2 + 40));
    std::string::operator=(v9, (const std::string *)(a2 + 64));
    v23 = v28;
    *(_OWORD *)a2 = v27;
    *(_OWORD *)(a2 + 16) = v23;
    *(_QWORD *)(a2 + 32) = v29;
    std::string::operator=((std::string *)(a2 + 40), &v30);
    std::string::operator=((std::string *)(a2 + 64), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (*(double *)a3 < *(double *)a2)
    {
      sub_1C5E45E5C((uint64_t)&v27, (__int128 *)a2);
      v24 = *a3;
      v25 = a3[1];
      *(_QWORD *)(a2 + 32) = *((_QWORD *)a3 + 4);
      *(_OWORD *)a2 = v24;
      *(_OWORD *)(a2 + 16) = v25;
      std::string::operator=((std::string *)(a2 + 40), (const std::string *)((char *)a3 + 40));
      v12 = (std::string *)(a3 + 4);
      std::string::operator=((std::string *)(a2 + 64), (const std::string *)(a3 + 4));
      v26 = v28;
      *a3 = v27;
      a3[1] = v26;
      *((_QWORD *)a3 + 4) = v29;
      std::string::operator=((std::string *)((char *)a3 + 40), &v30);
      goto LABEL_17;
    }
  }
}

BOOL sub_1C5E47048(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  double *v10;
  __int128 *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  std::string *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  std::string v24;
  std::string __p;

  v4 = 0x2E8BA2E8BA2E8BA3 * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)((char *)a2 - 88);
      if (*((double *)a2 - 11) < *(double *)a1)
      {
        sub_1C5E45E5C((uint64_t)&v21, (__int128 *)a1);
        v7 = *v6;
        v8 = *(__int128 *)((char *)a2 - 72);
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 - 7);
        *(_OWORD *)a1 = v7;
        *(_OWORD *)(a1 + 16) = v8;
        std::string::operator=((std::string *)(a1 + 40), (const std::string *)a2 - 2);
        std::string::operator=((std::string *)(a1 + 64), (const std::string *)a2 - 1);
        v9 = v22;
        *v6 = v21;
        *(__int128 *)((char *)a2 - 72) = v9;
        *((_QWORD *)a2 - 7) = v23;
        std::string::operator=((std::string *)a2 - 2, &v24);
        std::string::operator=((std::string *)a2 - 1, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v24.__r_.__value_.__l.__data_);
        return 1;
      }
      return result;
    case 3:
      sub_1C5E46D4C(a1, a1 + 88, (__int128 *)((char *)a2 - 88));
      return 1;
    case 4:
      sub_1C5E472FC(a1, a1 + 88, a1 + 176, (__int128 *)((char *)a2 - 88));
      return 1;
    case 5:
      sub_1C5E47524(a1, a1 + 88, a1 + 176, a1 + 264, (__int128 *)((char *)a2 - 88));
      return 1;
    default:
      v10 = (double *)(a1 + 176);
      sub_1C5E46D4C(a1, a1 + 88, (__int128 *)(a1 + 176));
      v11 = (__int128 *)(a1 + 264);
      if ((__int128 *)(a1 + 264) == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if (*(double *)v11 < *v10)
    {
      sub_1C5E45E5C((uint64_t)&v21, v11);
      v14 = v12;
      while (1)
      {
        v15 = a1 + v14;
        v16 = (_OWORD *)(a1 + v14 + 264);
        v17 = *(_OWORD *)(a1 + v14 + 192);
        *v16 = *(_OWORD *)(a1 + v14 + 176);
        v16[1] = v17;
        *(_QWORD *)(a1 + v14 + 296) = *(_QWORD *)(a1 + v14 + 208);
        v18 = (std::string *)(a1 + v14 + 216);
        std::string::operator=((std::string *)(a1 + v14 + 304), v18);
        std::string::operator=((std::string *)(v15 + 328), (const std::string *)(v15 + 240));
        if (v14 == -176)
          break;
        v14 -= 88;
        if (*(double *)&v21 >= *(double *)(v15 + 88))
        {
          v19 = a1 + v14 + 264;
          goto LABEL_15;
        }
      }
      v19 = a1;
LABEL_15:
      v20 = v22;
      *(_OWORD *)v19 = v21;
      *(_OWORD *)(v19 + 16) = v20;
      *(_QWORD *)(v19 + 32) = v23;
      std::string::operator=(v18, &v24);
      std::string::operator=((std::string *)(v15 + 240), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      if (++v13 == 8)
        return (__int128 *)((char *)v11 + 88) == a2;
    }
    v10 = (double *)v11;
    v12 += 88;
    v11 = (__int128 *)((char *)v11 + 88);
    if (v11 == a2)
      return 1;
  }
}

void sub_1C5E472FC(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  std::string v20;
  std::string __p;

  sub_1C5E46D4C(a1, a2, (__int128 *)a3);
  if (*(double *)a4 < *(double *)a3)
  {
    sub_1C5E45E5C((uint64_t)&v17, (__int128 *)a3);
    v8 = *a4;
    v9 = a4[1];
    *(_QWORD *)(a3 + 32) = *((_QWORD *)a4 + 4);
    *(_OWORD *)a3 = v8;
    *(_OWORD *)(a3 + 16) = v9;
    std::string::operator=((std::string *)(a3 + 40), (const std::string *)((char *)a4 + 40));
    std::string::operator=((std::string *)(a3 + 64), (const std::string *)(a4 + 4));
    v10 = v18;
    *a4 = v17;
    a4[1] = v10;
    *((_QWORD *)a4 + 4) = v19;
    std::string::operator=((std::string *)((char *)a4 + 40), &v20);
    std::string::operator=((std::string *)(a4 + 4), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (*(double *)a3 < *(double *)a2)
    {
      sub_1C5E45E5C((uint64_t)&v17, (__int128 *)a2);
      v11 = *(_OWORD *)a3;
      v12 = *(_OWORD *)(a3 + 16);
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
      *(_OWORD *)a2 = v11;
      *(_OWORD *)(a2 + 16) = v12;
      std::string::operator=((std::string *)(a2 + 40), (const std::string *)(a3 + 40));
      std::string::operator=((std::string *)(a2 + 64), (const std::string *)(a3 + 64));
      v13 = v18;
      *(_OWORD *)a3 = v17;
      *(_OWORD *)(a3 + 16) = v13;
      *(_QWORD *)(a3 + 32) = v19;
      std::string::operator=((std::string *)(a3 + 40), &v20);
      std::string::operator=((std::string *)(a3 + 64), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      if (*(double *)a2 < *(double *)a1)
      {
        sub_1C5E45E5C((uint64_t)&v17, (__int128 *)a1);
        v14 = *(_OWORD *)a2;
        v15 = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_OWORD *)a1 = v14;
        *(_OWORD *)(a1 + 16) = v15;
        std::string::operator=((std::string *)(a1 + 40), (const std::string *)(a2 + 40));
        std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
        v16 = v18;
        *(_OWORD *)a2 = v17;
        *(_OWORD *)(a2 + 16) = v16;
        *(_QWORD *)(a2 + 32) = v19;
        std::string::operator=((std::string *)(a2 + 40), &v20);
        std::string::operator=((std::string *)(a2 + 64), &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v20.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1C5E47524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  std::string v25;
  std::string __p;

  sub_1C5E472FC(a1, a2, a3, (__int128 *)a4);
  if (*(double *)a5 < *(double *)a4)
  {
    sub_1C5E45E5C((uint64_t)&v22, (__int128 *)a4);
    v10 = *a5;
    v11 = a5[1];
    *(_QWORD *)(a4 + 32) = *((_QWORD *)a5 + 4);
    *(_OWORD *)a4 = v10;
    *(_OWORD *)(a4 + 16) = v11;
    std::string::operator=((std::string *)(a4 + 40), (const std::string *)((char *)a5 + 40));
    std::string::operator=((std::string *)(a4 + 64), (const std::string *)(a5 + 4));
    v12 = v23;
    *a5 = v22;
    a5[1] = v12;
    *((_QWORD *)a5 + 4) = v24;
    std::string::operator=((std::string *)((char *)a5 + 40), &v25);
    std::string::operator=((std::string *)(a5 + 4), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (*(double *)a4 < *(double *)a3)
    {
      sub_1C5E45E5C((uint64_t)&v22, (__int128 *)a3);
      v13 = *(_OWORD *)a4;
      v14 = *(_OWORD *)(a4 + 16);
      *(_QWORD *)(a3 + 32) = *(_QWORD *)(a4 + 32);
      *(_OWORD *)a3 = v13;
      *(_OWORD *)(a3 + 16) = v14;
      std::string::operator=((std::string *)(a3 + 40), (const std::string *)(a4 + 40));
      std::string::operator=((std::string *)(a3 + 64), (const std::string *)(a4 + 64));
      v15 = v23;
      *(_OWORD *)a4 = v22;
      *(_OWORD *)(a4 + 16) = v15;
      *(_QWORD *)(a4 + 32) = v24;
      std::string::operator=((std::string *)(a4 + 40), &v25);
      std::string::operator=((std::string *)(a4 + 64), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      if (*(double *)a3 < *(double *)a2)
      {
        sub_1C5E45E5C((uint64_t)&v22, (__int128 *)a2);
        v16 = *(_OWORD *)a3;
        v17 = *(_OWORD *)(a3 + 16);
        *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
        *(_OWORD *)a2 = v16;
        *(_OWORD *)(a2 + 16) = v17;
        std::string::operator=((std::string *)(a2 + 40), (const std::string *)(a3 + 40));
        std::string::operator=((std::string *)(a2 + 64), (const std::string *)(a3 + 64));
        v18 = v23;
        *(_OWORD *)a3 = v22;
        *(_OWORD *)(a3 + 16) = v18;
        *(_QWORD *)(a3 + 32) = v24;
        std::string::operator=((std::string *)(a3 + 40), &v25);
        std::string::operator=((std::string *)(a3 + 64), &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v25.__r_.__value_.__l.__data_);
        if (*(double *)a2 < *(double *)a1)
        {
          sub_1C5E45E5C((uint64_t)&v22, (__int128 *)a1);
          v19 = *(_OWORD *)a2;
          v20 = *(_OWORD *)(a2 + 16);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          *(_OWORD *)a1 = v19;
          *(_OWORD *)(a1 + 16) = v20;
          std::string::operator=((std::string *)(a1 + 40), (const std::string *)(a2 + 40));
          std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
          v21 = v23;
          *(_OWORD *)a2 = v22;
          *(_OWORD *)(a2 + 16) = v21;
          *(_QWORD *)(a2 + 32) = v24;
          std::string::operator=((std::string *)(a2 + 40), &v25);
          std::string::operator=((std::string *)(a2 + 64), &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v25.__r_.__value_.__l.__data_);
        }
      }
    }
  }
}

double sub_1C5E477EC()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_DWORD *)(v0 + 20) = 48;
  return result;
}

uint64_t sub_1C5E47824(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *i;
  uint64_t v4;
  uint64_t v5;
  llvm::TimerGroup *v6;
  uint64_t v7;
  BOOL v8;

  if (result)
  {
    v1 = result;
    v2 = *(unsigned int *)(result + 8);
    if ((_DWORD)v2)
    {
      for (i = *(uint64_t **)result; !*i || *i == -8; ++i)
        ;
    }
    else
    {
      i = *(uint64_t **)result;
    }
    v4 = *(_QWORD *)result + 8 * v2;
    if (i != (uint64_t *)v4)
    {
      v5 = *i;
      do
      {
        v6 = *(llvm::TimerGroup **)(v5 + 8);
        if (v6)
        {
          llvm::TimerGroup::~TimerGroup(v6);
          MEMORY[0x1CAA32FC0]();
        }
        do
        {
          v7 = i[1];
          ++i;
          v5 = v7;
          if (v7)
            v8 = v5 == -8;
          else
            v8 = 1;
        }
        while (v8);
      }
      while (i != (uint64_t *)v4);
    }
    sub_1C6394A7C(v1);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

void llvm::ToolOutputFile::CleanupInstaller::~CleanupInstaller(llvm::ToolOutputFile::CleanupInstaller *this)
{
  char v2;
  int v3;
  size_t v4;
  size_t v5;
  size_t v6;
  llvm::ToolOutputFile::CleanupInstaller *v7;
  llvm::ToolOutputFile::CleanupInstaller *v8;
  size_t v9;
  llvm::ToolOutputFile::CleanupInstaller *v10;
  __int16 v11;

  v2 = *((_BYTE *)this + 23);
  v3 = v2;
  v4 = *((_QWORD *)this + 1);
  v5 = v2 & 0x7F;
  if (v3 >= 0)
    v6 = v5;
  else
    v6 = *((_QWORD *)this + 1);
  if (v6 != 1)
    goto LABEL_21;
  v7 = *(llvm::ToolOutputFile::CleanupInstaller **)this;
  if (v3 >= 0)
    v7 = this;
  if (*(_BYTE *)v7 != 45)
  {
LABEL_21:
    if (!*((_BYTE *)this + 24))
    {
      v11 = 260;
      v10 = this;
      llvm::sys::fs::remove((llvm::sys::fs *)&v10, (const llvm::Twine *)1);
      LOBYTE(v3) = *((_BYTE *)this + 23);
      v4 = *((_QWORD *)this + 1);
      v5 = v3 & 0x7F;
    }
    if ((v3 & 0x80u) == 0)
      v8 = this;
    else
      v8 = *(llvm::ToolOutputFile::CleanupInstaller **)this;
    if ((v3 & 0x80u) == 0)
      v9 = v5;
    else
      v9 = v4;
    llvm::sys::DontRemoveFileOnSignal(v8, v9);
    LOBYTE(v3) = *((_BYTE *)this + 23);
  }
  if ((v3 & 0x80) != 0)
    operator delete(*(void **)this);
}

std::string *llvm::ToolOutputFile::ToolOutputFile(std::string *a1, std::string::value_type *a2, std::string::size_type a3)
{
  std::string *v4;
  std::string::value_type *v5;

  v4 = llvm::ToolOutputFile::CleanupInstaller::CleanupInstaller(a1, a2, a3);
  v4[1].__r_.__value_.__s.__data_[8] = 0;
  v5 = &v4[1].__r_.__value_.__s.__data_[8];
  v4[5].__r_.__value_.__s.__data_[8] = 0;
  sub_1C6394CB4((llvm::raw_fd_ostream *)&v4[1].__r_.__value_.__r.__words[1]);
  a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)v5;
  return a1;
}

{
  std::string *v4;
  std::string::value_type *v5;

  v4 = llvm::ToolOutputFile::CleanupInstaller::CleanupInstaller(a1, a2, a3);
  v4[1].__r_.__value_.__s.__data_[8] = 0;
  v5 = &v4[1].__r_.__value_.__s.__data_[8];
  v4[5].__r_.__value_.__s.__data_[8] = 0;
  sub_1C6394CB4((llvm::raw_fd_ostream *)&v4[1].__r_.__value_.__r.__words[1]);
  a1[5].__r_.__value_.__r.__words[2] = (std::string::size_type)v5;
  return a1;
}

void llvm::TrigramIndex::insert(uint64_t a1, char *a2)
{
  char v3;
  BOOL v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  char *v11;
  int v12;
  unsigned int v13;
  _QWORD *i;
  unsigned int v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  _DWORD *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  int v31;
  unsigned int v32;
  uint64_t *v33;
  _QWORD *v34[2];

  if (*(_BYTE *)a1)
    return;
  v34[0] = 0;
  v34[1] = 0;
  v33 = (uint64_t *)v34;
  v32 = 0;
  v3 = a2[23];
  v4 = v3 < 0;
  if (v3 >= 0)
    v5 = a2;
  else
    v5 = *(char **)a2;
  v6 = v3 & 0x7F;
  if (v4)
    v7 = *((_QWORD *)a2 + 1);
  else
    v7 = v6;
  if (!v7)
  {
LABEL_33:
    *(_BYTE *)a1 = 1;
    goto LABEL_50;
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = &v5[v7];
  do
  {
    v12 = *v5;
    if ((v9 & 1) != 0)
    {
      if ((v12 - 49) <= 8)
        goto LABEL_33;
    }
    else
    {
      if (v12 == 92)
      {
        v9 = 1;
        goto LABEL_29;
      }
      if (memchr("()^$|+?[]\\{}", *v5, 0xDuLL))
        goto LABEL_33;
      if ((v12 & 0xFFFFFFFB) == 0x2A)
      {
        v9 = 0;
        v8 = 0;
        v32 = 0;
        goto LABEL_29;
      }
    }
    v13 = (v12 + (v32 << 8)) & 0xFFFFFF;
    v32 = v13;
    if (++v8 >= 3 && *((_DWORD *)sub_1C5E47E00(a1 + 32, v13, &v32) + 8) <= 3u)
    {
      ++v10;
      for (i = v34[0]; i; i = (_QWORD *)*i)
      {
        v15 = *((_DWORD *)i + 7);
        if (v32 >= v15)
        {
          if (v15 >= v32)
            goto LABEL_28;
          ++i;
        }
      }
      v16 = sub_1C5E47E00(a1 + 32, v32, &v32);
      v17 = v16;
      v19 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v20 = *((unsigned int *)v16 + 8);
      if (v20 >= *((unsigned int *)v16 + 9))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v16 + 3), (uint64_t)(v16 + 5), v20 + 1, 8);
        v20 = *((unsigned int *)v17 + 8);
      }
      *(_QWORD *)(v17[3] + 8 * v20) = (v18 - v19) >> 2;
      ++*((_DWORD *)v17 + 8);
      sub_1C4778ED8(&v33, &v32, &v32);
    }
LABEL_28:
    v9 = 0;
LABEL_29:
    ++v5;
  }
  while (v5 != v11);
  if (!v10)
    goto LABEL_33;
  v22 = *(char **)(a1 + 16);
  v21 = *(_QWORD *)(a1 + 24);
  if ((unint64_t)v22 >= v21)
  {
    v24 = *(char **)(a1 + 8);
    v25 = (v22 - v24) >> 2;
    v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 62)
      abort();
    v27 = v21 - (_QWORD)v24;
    if (v27 >> 1 > v26)
      v26 = v27 >> 1;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
      v28 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v28 = v26;
    if (v28)
    {
      if (v28 >> 62)
        sub_1C4764EE4();
      v29 = (char *)operator new(4 * v28);
    }
    else
    {
      v29 = 0;
    }
    v30 = &v29[4 * v25];
    *(_DWORD *)v30 = v10;
    v23 = v30 + 4;
    while (v22 != v24)
    {
      v31 = *((_DWORD *)v22 - 1);
      v22 -= 4;
      *((_DWORD *)v30 - 1) = v31;
      v30 -= 4;
    }
    *(_QWORD *)(a1 + 8) = v30;
    *(_QWORD *)(a1 + 16) = v23;
    *(_QWORD *)(a1 + 24) = &v29[4 * v28];
    if (v24)
      operator delete(v24);
  }
  else
  {
    *(_DWORD *)v22 = v10;
    v23 = v22 + 4;
  }
  *(_QWORD *)(a1 + 16) = v23;
LABEL_50:
  sub_1C47655E8((uint64_t)&v33, v34[0]);
}

BOOL llvm::TrigramIndex::isDefinitelyOut(uint64_t a1, uint64_t a2, unint64_t a3)
{
  BOOL v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  unint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;

  if (!*(_BYTE *)a1)
  {
    v8 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 16);
    v9 = v7 - v8;
    if (v7 == v8)
    {
      v10 = 0;
      if (!a3)
        goto LABEL_18;
    }
    else
    {
      if (v9 < 0)
        abort();
      v10 = operator new(v7 - v8);
      bzero(v10, v9 & 0xFFFFFFFFFFFFFFFCLL);
      if (!a3)
      {
LABEL_18:
        v3 = 1;
        if (!v10)
          return v3;
LABEL_19:
        operator delete(v10);
        return v3;
      }
    }
    v11 = 0;
    v3 = 0;
    v12 = 0;
    v13 = (_QWORD *)(a1 + 32);
    while (1)
    {
      v14 = *(char *)(a2 + v12) + (v11 << 8);
      v11 = v14 & 0xFFFFFF;
      if (v12 >= 2)
      {
        v15 = sub_1C6394D04(v13, v14 & 0xFFFFFF);
        if (v15)
        {
          v16 = *((unsigned int *)v15 + 8);
          if ((_DWORD)v16)
            break;
        }
      }
LABEL_10:
      v3 = ++v12 >= a3;
      if (v12 == a3)
        goto LABEL_18;
    }
    v17 = (uint64_t *)v15[3];
    v18 = 8 * v16;
    while (1)
    {
      v19 = *v17;
      v20 = *((_DWORD *)v10 + *v17) + 1;
      *((_DWORD *)v10 + *v17) = v20;
      if (v20 >= *(_DWORD *)(v8 + 4 * v19))
        goto LABEL_19;
      ++v17;
      v18 -= 8;
      if (!v18)
        goto LABEL_10;
    }
  }
  return 0;
}

_QWORD *sub_1C5E47E00(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x48uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[3] = v10 + 5;
  v10[4] = 0x400000000;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_1C542C2D4(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

char *llvm::Triple::getOSTypeName(llvm::Triple *this)
{
  return off_1E81A3D10[(int)this];
}

uint64_t llvm::Triple::getArchTypeForLLVMName(unsigned __int16 *a1, unint64_t a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  int v7;
  _BOOL4 v8;
  uint64_t v9;
  _BOOL4 v11;
  uint64_t v12;
  _BOOL4 v13;
  int v14;
  uint64_t v15;
  _BOOL4 v18;
  int v20;
  int v23;
  int v26;
  _BOOL4 v28;
  BOOL v29;
  BOOL v30;
  BOOL v43;
  BOOL v44;
  BOOL v49;
  int v50;
  BOOL v63;
  uint64_t v72;
  BOOL v73;
  char v74;
  _BOOL4 v75;
  _BOOL4 v77;

  v4 = sub_1C5E48DC8((uint64_t)a1, a2);
  if (a2 == 7)
  {
    v5 = 0;
    if (*(_DWORD *)a1 ^ 0x63726161 | *(_DWORD *)((char *)a1 + 3) ^ 0x34366863)
      v6 = 0;
    else
      v6 = 0x100000003;
LABEL_5:
    v7 = 0;
    v8 = 0;
    v9 = v6 & 0x100000000;
LABEL_6:
    if (a2 >= 3 && !v9 && *a1 == 28770 && *((_BYTE *)a1 + 2) == 102)
      v6 = v4 | 0x100000000;
    v11 = a2 == 4;
    if (a2 == 4 && (v6 & 0x300000000) == 0)
    {
      if (*(_DWORD *)a1 == 1798846061)
      {
        v6 = 0x10000000FLL;
        goto LABEL_52;
      }
      v11 = 1;
    }
LABEL_18:
    v12 = v6 & 0x300000000;
    v13 = (v6 & 0x300000000) == 0;
    if (!v11 || v12)
    {
      v18 = a2 == 6;
      if (a2 == 6 && !v12)
      {
        if (*(_DWORD *)a1 == 1936746861 && a1[2] == 27749)
        {
          v6 = 0x100000011;
          goto LABEL_343;
        }
        v18 = 1;
      }
      v20 = 0;
      if (!v12 && v18)
      {
        if (*(_DWORD *)a1 == 1936746861 && a1[2] == 13366)
        {
          v6 = 0x100000012;
          goto LABEL_343;
        }
        v20 = 1;
        v13 = 1;
      }
LABEL_53:
      if (v13 && v5 && *(_QWORD *)a1 == 0x6C6534367370696DLL)
      {
        v6 = 0x100000013;
        goto LABEL_343;
      }
      if (v20)
      {
        if (*(_DWORD *)a1 == 879784813 && a1[2] == 12339)
        {
          v6 = 0x100000014;
          goto LABEL_343;
        }
      }
      v23 = v13 & v7;
      if ((v13 & v7) == 1)
      {
        if (*(_DWORD *)a1 == 912486512 && *((_BYTE *)a1 + 4) == 52)
        {
          v6 = 0x100000017;
          goto LABEL_343;
        }
        if (*(_DWORD *)a1 == 862154864 && *((_BYTE *)a1 + 4) == 50)
          goto LABEL_96;
      }
      v26 = v13 && v8;
      if (v13 && v8 && *a1 == 28784 && *((_BYTE *)a1 + 2) == 99)
      {
LABEL_96:
        v6 = 0x100000015;
        goto LABEL_343;
      }
      v28 = a2 == 7 && v13;
      if (v28 && (*(_DWORD *)a1 == 862154864 ? (v29 = *(_DWORD *)((char *)a1 + 3) == 1701589555) : (v29 = 0), v29)
        || v23 && (*(_DWORD *)a1 == 1818456176 ? (v30 = *((_BYTE *)a1 + 4) == 101) : (v30 = 0), v30))
      {
        v6 = 0x100000016;
        goto LABEL_343;
      }
      if (v28)
      {
        if (*(_DWORD *)a1 == 912486512 && *(_DWORD *)((char *)a1 + 3) == 1701590070)
        {
          v6 = 0x100000018;
          goto LABEL_343;
        }
      }
      else if (v13 && v11 && *(_DWORD *)a1 == 808466034)
      {
        v6 = 0x100000019;
        goto LABEL_343;
      }
      if (v20)
      {
        if (*(_DWORD *)a1 == 1734634849 && a1[2] == 28259)
        {
          v6 = 0x10000001ELL;
          goto LABEL_343;
        }
      }
      if (v28)
      {
        if (*(_DWORD *)a1 == 1668508018 && *(_DWORD *)((char *)a1 + 3) == 842233443)
        {
          v6 = 0x10000001FLL;
          goto LABEL_393;
        }
        if (*(_DWORD *)a1 == 1668508018 && *(_DWORD *)((char *)a1 + 3) == 875984483)
        {
          v6 = 0x100000020;
          goto LABEL_393;
        }
        if (*(_DWORD *)a1 == 1635280232 && *(_DWORD *)((char *)a1 + 3) == 1852794721)
        {
          v6 = 0x10000000CLL;
          goto LABEL_343;
        }
      }
      if (v23)
      {
        if (*(_DWORD *)a1 == 1918988403 && *((_BYTE *)a1 + 4) == 99)
        {
          v6 = 0x100000021;
          goto LABEL_343;
        }
      }
      if (v28)
      {
        if (*(_DWORD *)a1 == 1918988403 && *(_DWORD *)((char *)a1 + 3) == 1818583922)
        {
          v6 = 0x100000023;
          goto LABEL_393;
        }
        if (*(_DWORD *)a1 == 1918988403 && *(_DWORD *)((char *)a1 + 3) == 964060018)
        {
          v6 = 0x100000022;
          goto LABEL_393;
        }
      }
      if (v23 && (*(_DWORD *)a1 == 809055091 ? (v43 = *((_BYTE *)a1 + 4) == 120) : (v43 = 0), v43)
        || v28 && (*(_DWORD *)a1 == 1953724787 ? (v44 = *(_DWORD *)((char *)a1 + 3) == 2053989748) : (v44 = 0), v44))
      {
        v6 = 0x100000024;
        goto LABEL_343;
      }
      if (v26)
      {
        if (*a1 == 25460 && *((_BYTE *)a1 + 2) == 101)
        {
          v6 = 0x100000025;
          goto LABEL_343;
        }
      }
      if (v23)
      {
        if (*(_DWORD *)a1 == 1818583924 && *((_BYTE *)a1 + 4) == 101)
        {
          v6 = 0x100000026;
          goto LABEL_343;
        }
        if (*(_DWORD *)a1 == 1836410996 && *((_BYTE *)a1 + 4) == 98)
        {
          v6 = 0x100000027;
          goto LABEL_343;
        }
      }
      if (v28 && *(_DWORD *)a1 == 1836410996 && *(_DWORD *)((char *)a1 + 3) == 1650811501)
      {
        v6 = 0x100000028;
        goto LABEL_343;
      }
      if (v26 && (*a1 == 14456 ? (v49 = *((_BYTE *)a1 + 2) == 54) : (v49 = 0), v49)
        || (v50 = v13 && v11) != 0 && *(_DWORD *)a1 == 909652841)
      {
        v6 = 0x100000029;
        goto LABEL_343;
      }
      if (v20)
      {
        if (*(_DWORD *)a1 == 758528120 && a1[2] == 13366)
        {
          v6 = 0x10000002ALL;
          goto LABEL_343;
        }
      }
      if (v23)
      {
        if (*(_DWORD *)a1 == 1919902584 && *((_BYTE *)a1 + 4) == 101)
        {
          v6 = 0x10000002BLL;
          goto LABEL_343;
        }
        if (*(_DWORD *)a1 == 1953527406 && *((_BYTE *)a1 + 4) == 120)
        {
          v6 = 0x10000002CLL;
          goto LABEL_343;
        }
      }
      if (v28 && *(_DWORD *)a1 == 1953527406 && *(_DWORD *)((char *)a1 + 3) == 875985012)
      {
        v6 = 0x10000002DLL;
        goto LABEL_343;
      }
      if (v20)
      {
        if (*(_DWORD *)a1 == 1818847081 && a1[2] == 12851)
        {
          v6 = 0x10000002ELL;
          goto LABEL_343;
        }
        if (*(_DWORD *)a1 == 1818847081 && a1[2] == 13366)
        {
          v6 = 0x10000002FLL;
          goto LABEL_343;
        }
      }
      if (v23)
      {
        if (*(_DWORD *)a1 == 863136097 && *((_BYTE *)a1 + 4) == 50)
        {
          v6 = 0x100000030;
          goto LABEL_343;
        }
        if (*(_DWORD *)a1 == 913467745 && *((_BYTE *)a1 + 4) == 52)
        {
          v6 = 0x100000031;
          goto LABEL_343;
        }
      }
      if (v50)
      {
        if (*(_DWORD *)a1 == 842229100)
        {
          v6 = 0x100000032;
          goto LABEL_343;
        }
        if (*(_DWORD *)a1 == 875980140)
        {
          v6 = 0x100000033;
          goto LABEL_343;
        }
      }
      if (v23)
      {
        if (*(_DWORD *)a1 == 1768189281 && *((_BYTE *)a1 + 4) == 108)
        {
          v6 = 0x100000034;
          goto LABEL_343;
        }
      }
      if (v28 && *(_DWORD *)a1 == 1768189281 && *(_DWORD *)((char *)a1 + 3) == 875981929)
      {
        v6 = 0x100000035;
        goto LABEL_343;
      }
      if (v23)
      {
        if (*(_DWORD *)a1 == 1767994216 && *((_BYTE *)a1 + 4) == 108)
        {
          v6 = 0x100000036;
          goto LABEL_343;
        }
      }
      if (v28)
      {
        if (*(_DWORD *)a1 == 1767994216 && *(_DWORD *)((char *)a1 + 3) == 875981929)
        {
          v6 = 0x100000037;
          goto LABEL_343;
        }
      }
      else if (v50 && *(_DWORD *)a1 == 1919512691)
      {
        v6 = 0x100000038;
        goto LABEL_343;
      }
      if (v20 && (*(_DWORD *)a1 == 1919512691 ? (v63 = a1[2] == 13366) : (v63 = 0), v63))
      {
        v6 = 0x100000039;
      }
      else
      {
        if (v28)
        {
          if (*(_DWORD *)a1 == 1919512691 && *(_DWORD *)((char *)a1 + 3) == 842233458)
          {
            v6 = 0x10000003ALL;
            goto LABEL_393;
          }
          if (*(_DWORD *)a1 == 1919512691 && *(_DWORD *)((char *)a1 + 3) == 875984498)
          {
            v6 = 0x10000003BLL;
            goto LABEL_393;
          }
          if (*(_DWORD *)a1 == 1768710507 && *(_DWORD *)((char *)a1 + 3) == 1633840489)
          {
            v6 = 0x10000003CLL;
            goto LABEL_343;
          }
        }
        if (v23)
        {
          if (*(_DWORD *)a1 == 1634623852 && *((_BYTE *)a1 + 4) == 105)
          {
            v6 = 0x10000003ELL;
            goto LABEL_343;
          }
          if (*(_DWORD *)a1 == 1986095219 && *((_BYTE *)a1 + 4) == 101)
          {
            v6 = 0x10000003DLL;
            goto LABEL_343;
          }
        }
        if (!v20)
        {
LABEL_322:
          v8 = a2 == 14;
          if (a2 != 14)
            v13 = 0;
          if (v13)
          {
            if (*(_QWORD *)a1 == 0x63737265646E6572 && *(_QWORD *)(a1 + 3) == 0x3233747069726373)
            {
              v6 = 0x100000041;
              goto LABEL_374;
            }
            v8 = 1;
          }
          goto LABEL_344;
        }
        if (*(_DWORD *)a1 != 1836278135 || a1[2] != 12851)
        {
          if (*(_DWORD *)a1 == 1836278135 && a1[2] == 13366)
          {
            v6 = 0x100000040;
            goto LABEL_374;
          }
          goto LABEL_322;
        }
        v6 = 0x10000003FLL;
      }
LABEL_343:
      v8 = a2 == 14;
LABEL_344:
      v72 = v6 & 0xFF00000000;
      if (v8
        && !v72
        && (*(_QWORD *)a1 == 0x63737265646E6572 ? (v73 = *(_QWORD *)(a1 + 3) == 0x3436747069726373) : (v73 = 0), v73))
      {
        v6 = 0x100000042;
      }
      else
      {
        v74 = !v11;
        if (v72)
          v74 = 1;
        if ((v74 & 1) != 0)
        {
          if (a2 == 2 && !v72)
          {
            if (*a1 == 25974)
              v6 = 0x100000043;
            goto LABEL_388;
          }
          v75 = a2 == 11;
          if (a2 == 11 && !v72)
          {
            if (*(_QWORD *)a1 == 0x637261676E6F6F6CLL && *(_QWORD *)((char *)a1 + 3) == 0x323368637261676ELL)
            {
              v6 = 0x10000000DLL;
              goto LABEL_393;
            }
            v75 = 1;
          }
LABEL_375:
          v77 = (v6 & 0xFF00000000) == 0;
          if (v75 && (v6 & 0xFF00000000) == 0)
          {
            if (*(_QWORD *)a1 == 0x637261676E6F6F6CLL && *(_QWORD *)((char *)a1 + 3) == 0x343668637261676ELL)
            {
              v6 = 0x10000000ELL;
              goto LABEL_393;
            }
            v77 = 1;
          }
          goto LABEL_389;
        }
        if (*(_DWORD *)a1 != 813197153)
        {
          switch(*(_DWORD *)a1)
          {
            case 0x31786761:
              v6 = 0x10000001BLL;
              break;
            case 0x32786761:
              v6 = 0x10000001CLL;
              break;
            case 0x33786761:
              v6 = 0x10000001DLL;
              break;
            case 0x796B7363:
              v6 = 0x10000000ALL;
              break;
          }
          v11 = 1;
LABEL_388:
          v77 = (v6 & 0xFF00000000) == 0;
LABEL_389:
          if (v77 && v11 && *(_DWORD *)a1 == 1818851428)
            v6 = 0x10000000BLL;
          goto LABEL_393;
        }
        v6 = 0x10000001ALL;
      }
LABEL_374:
      v75 = a2 == 11;
      goto LABEL_375;
    }
    if (*(_DWORD *)a1 == 1936746861)
      v6 = 0x100000010;
LABEL_52:
    v20 = 0;
    v13 = (v6 & 0x300000000) == 0;
    v11 = 1;
    goto LABEL_53;
  }
  v5 = 0;
  v6 = 0;
  switch(a2)
  {
    case 3uLL:
      v6 = 0x100000006;
      v14 = *a1 ^ 0x7261 | *((unsigned __int8 *)a1 + 2) ^ 0x63;
      if (v14)
        v15 = 0;
      else
        v15 = 0x100000006;
      if (!v14)
      {
        v11 = 0;
        v7 = 0;
        v5 = 0;
        v8 = 1;
        goto LABEL_18;
      }
      if (*a1 == 29281 && *((_BYTE *)a1 + 2) == 109)
      {
        v11 = 0;
        v8 = 0;
        v6 = 0x100000001;
      }
      else
      {
        v7 = 0;
        if (*a1 != 30305 || *((_BYTE *)a1 + 2) != 114)
        {
          v9 = 0;
          v8 = 1;
          v6 = v15;
          v5 = 0;
          goto LABEL_6;
        }
        v6 = 0x100000007;
        v11 = 0;
        v8 = 0;
      }
      goto LABEL_344;
    case 5uLL:
      if (*(_DWORD *)a1 == 913142369 && *((_BYTE *)a1 + 4) == 52)
      {
        v11 = 0;
        v8 = 0;
        v5 = 0;
        v7 = 1;
        v6 = 0x100000003;
        goto LABEL_18;
      }
      v8 = 0;
      if (*(_DWORD *)a1 != 1701671521 || *((_BYTE *)a1 + 4) != 98)
      {
        v9 = 0;
        v6 = 0;
        v7 = 1;
        v5 = 0;
        goto LABEL_6;
      }
      v6 = 0x100000002;
      v11 = 0;
      goto LABEL_344;
    case 8uLL:
      if (*(_QWORD *)a1 != 0x32335F34366D7261)
      {
        v6 = 0;
        v5 = 1;
        goto LABEL_5;
      }
      v11 = 0;
      v8 = 0;
      v6 = 0x100000005;
      goto LABEL_344;
    case 0xAuLL:
      if (*(_QWORD *)a1 == 0x5F34366863726161 && a1[4] == 25954)
      {
        v5 = 0;
        v6 = 0x100000004;
        goto LABEL_5;
      }
      if (*(_QWORD *)a1 != 0x5F34366863726161 || a1[4] != 12851)
      {
        v6 = 0;
        v5 = 0;
        goto LABEL_5;
      }
      v6 = 0x100000005;
      break;
    default:
      goto LABEL_5;
  }
LABEL_393:
  if ((v6 & 0xFF00000000) != 0)
    return v6;
  else
    return 0;
}

uint64_t sub_1C5E48DC8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  int v4;
  BOOL v5;
  int v6;
  int v8;

  if (a2 == 6)
  {
    if (*(_DWORD *)a1 != 1600548962 || *(_WORD *)(a1 + 4) != 25954)
    {
      v4 = *(unsigned __int16 *)(a1 + 4);
      v5 = *(_DWORD *)a1 == 1600548962;
      v6 = 25964;
      goto LABEL_17;
    }
    return 9;
  }
  if (a2 != 5)
  {
    if (a2 != 3)
      return 0;
    v2 = *(_WORD *)a1 == 28770 && *(_BYTE *)(a1 + 2) == 102;
    goto LABEL_20;
  }
  if (*(_DWORD *)a1 == 1701212258 && *(_BYTE *)(a1 + 4) == 98)
    return 9;
  v4 = *(unsigned __int8 *)(a1 + 4);
  v5 = *(_DWORD *)a1 == 1701212258;
  v6 = 108;
LABEL_17:
  v2 = v5 && v4 == v6;
LABEL_20:
  v8 = v2;
  return (8 * v8);
}

uint64_t llvm::Triple::Triple(uint64_t a1, llvm::Twine *a2)
{
  char v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  uint64_t v27;
  int v28;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  _QWORD v40[9];

  v40[8] = *MEMORY[0x1E0C80C00];
  llvm::Twine::str(a2, (_QWORD *)a1);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v38 = v40;
  v39 = 0x400000000;
  v3 = *(_BYTE *)(a1 + 23);
  v4 = v3 < 0;
  v5 = *(_QWORD *)a1;
  if (v3 >= 0)
    v5 = a1;
  v6 = v3 & 0x7F;
  if (v4)
    v6 = *(_QWORD *)(a1 + 8);
  v35 = v5;
  v36 = v6;
  llvm::StringRef::split((char *)&v35, (uint64_t)&v38, 45, 3, 1);
  if (!(_DWORD)v39)
  {
LABEL_45:
    if (*(_DWORD *)(a1 + 44))
      goto LABEL_47;
    goto LABEL_46;
  }
  *(_DWORD *)(a1 + 24) = sub_1C5E49140(*(_QWORD *)v38, *((_QWORD *)v38 + 1), v7, v8, v9, v10, v11, v12);
  *(_DWORD *)(a1 + 28) = sub_1C5E4AF48(*(_QWORD *)v38, *((_QWORD *)v38 + 1));
  v14 = v39;
  if (v39 < 2)
  {
    v19 = *(_QWORD *)v38;
    v20 = *((_QWORD *)v38 + 1);
    v35 = *(_QWORD *)v38;
    v36 = v20;
    v37 = 0;
    if (v20 >= 7)
    {
      if (*(_DWORD *)v19 == 1936746861 && *(_DWORD *)(v19 + 3) == 842231411)
      {
        v30 = 2;
        goto LABEL_40;
      }
      if (*(_DWORD *)v19 != 1936746861 || *(_WORD *)(v19 + 4) != 13366)
      {
        if (v20 < 9)
        {
LABEL_41:
          v31 = sub_1C5E4C56C((uint64_t)&v35, "mips", 4, "mipsel", 6, "mipsr6", 6, v13, "mipsr6el", 8, 1);
          if (*(_BYTE *)(v31 + 20))
            v32 = *(_DWORD *)(v31 + 16);
          else
            v32 = 0;
          *(_DWORD *)(a1 + 40) = v32;
          goto LABEL_45;
        }
        if (*(_QWORD *)v19 != 0x366173697370696DLL || *(_BYTE *)(v19 + 8) != 52)
        {
          v27 = *(_QWORD *)v19;
          v28 = *(unsigned __int8 *)(v19 + 8);
          if (v27 != 0x336173697370696DLL || v28 != 50)
            goto LABEL_41;
          v30 = 1;
          goto LABEL_40;
        }
      }
    }
    else
    {
      if (v20 != 6)
        goto LABEL_41;
      v21 = *(_DWORD *)v19;
      v22 = *(unsigned __int16 *)(v19 + 4);
      if (v21 != 1936746861 || v22 != 13366)
        goto LABEL_41;
    }
    v30 = 3;
LABEL_40:
    LODWORD(v37) = v30;
    BYTE4(v37) = 1;
    goto LABEL_41;
  }
  v15 = v38;
  *(_DWORD *)(a1 + 32) = sub_1C5E4B170(*((unsigned __int16 **)v38 + 2), *((_QWORD *)v38 + 3));
  if (v14 == 2)
    goto LABEL_45;
  *(_DWORD *)(a1 + 36) = sub_1C5E4B3B0(v15[4], v15[5]);
  if (v14 < 4)
    goto LABEL_45;
  v16 = v15[6];
  v17 = v15[7];
  *(_DWORD *)(a1 + 40) = sub_1C5E4BBF4(v16, v17);
  v18 = sub_1C5E4C3BC(v16, v17);
  *(_DWORD *)(a1 + 44) = v18;
  if (v18)
    goto LABEL_47;
LABEL_46:
  sub_1C5E4C5E8(a1);
  *(_DWORD *)(a1 + 44) = v33;
LABEL_47:
  if (v38 != v40)
    free(v38);
  return a1;
}

uint64_t sub_1C5E49140(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  int v40;
  int v43;
  int v46;
  int v59;
  int v64;
  BOOL v65;
  int v66;
  int v72;
  int v75;
  BOOL v76;
  int v77;
  BOOL v83;
  BOOL v84;
  int v103;
  BOOL v104;
  BOOL v106;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  BOOL v118;
  BOOL v119;
  uint64_t result;
  BOOL v130;
  BOOL v132;
  BOOL v134;
  BOOL v136;
  BOOL v138;
  BOOL v140;
  int v144;
  uint64_t v145;
  uint64_t v152;
  uint64_t v153;
  int v163;
  int v164;
  int v165;
  int v166;
  _DWORD *v167;
  unsigned int v168;
  _BYTE *CanonicalArchName;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  int v173;
  int v174;
  unsigned int v175;
  uint64_t v178;
  uint64_t v179;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;

  v181 = a1;
  v182 = a2;
  v183 = 0;
  sub_1C5E4FA9C((uint64_t)&v181, "i386", 4, "i486", 4, "i586", 4, a8, "i686", 4, 41);
  if (!BYTE4(v183))
  {
    switch(v182)
    {
      case 4:
        if (*(_DWORD *)v181 == 909653865 || *(_DWORD *)v181 == 909654121 || *(_DWORD *)v181 == 909654377)
        {
          v40 = 41;
          goto LABEL_343;
        }
        break;
      case 5:
        v64 = *(unsigned __int8 *)(v181 + 4);
        v65 = *(_DWORD *)v181 == 912551265;
        v66 = 52;
        goto LABEL_337;
      case 6:
        v64 = *(unsigned __int16 *)(v181 + 4);
        v65 = *(_DWORD *)v181 == 1597388920;
        v66 = 13366;
        goto LABEL_337;
      case 7:
        v64 = *(_DWORD *)(v181 + 3);
        v65 = *(_DWORD *)v181 == 1597388920;
        v66 = 1748252255;
LABEL_337:
        if (v65 && v64 == v66)
        {
          v40 = 42;
LABEL_343:
          LODWORD(v183) = v40;
          BYTE4(v183) = 1;
        }
        break;
      default:
        break;
    }
  }
  sub_1C5E4FA9C((uint64_t)&v181, "powerpc", 7, "powerpcspe", 10, "ppc", 3, v10, "ppc32", 5, 21);
  if (!BYTE4(v183))
  {
    switch(v182)
    {
      case 3:
        if (*(_WORD *)v181 == 28784 && *(_BYTE *)(v181 + 2) == 117)
          goto LABEL_614;
        if (*(_WORD *)v181 == 29281 && *(_BYTE *)(v181 + 2) == 99)
        {
          v72 = 6;
          goto LABEL_653;
        }
        if (*(_WORD *)v181 == 29281 && *(_BYTE *)(v181 + 2) == 109)
          goto LABEL_634;
        if (*(_WORD *)v181 == 30305 && *(_BYTE *)(v181 + 2) == 114)
        {
          v72 = 7;
          goto LABEL_653;
        }
        break;
      case 4:
        if (*(_DWORD *)v181 == 1798846061)
        {
          v72 = 15;
          goto LABEL_653;
        }
        if (*(_DWORD *)v181 == 1936746861)
        {
          v72 = 16;
          goto LABEL_653;
        }
        break;
      case 5:
        if (*(_DWORD *)v181 == 1818456176 && *(_BYTE *)(v181 + 4) == 101)
          goto LABEL_613;
        if (*(_DWORD *)v181 == 912486512 && *(_BYTE *)(v181 + 4) == 52)
          goto LABEL_614;
        if (*(_DWORD *)v181 == 913142369 && *(_BYTE *)(v181 + 4) == 52)
          goto LABEL_615;
        if (*(_DWORD *)v181 == 1701671521 && *(_BYTE *)(v181 + 4) == 98)
          goto LABEL_636;
        if (*(_DWORD *)v181 == 1836410996 && *(_BYTE *)(v181 + 4) == 98)
        {
          v72 = 39;
          goto LABEL_653;
        }
        break;
      case 6:
        if (*(_DWORD *)v181 == 1633907576 && *(_WORD *)(v181 + 4) == 25964)
        {
LABEL_634:
          v72 = 1;
          goto LABEL_653;
        }
        if (*(_DWORD *)v181 == 913142369 && *(_WORD *)(v181 + 4) == 25908)
          goto LABEL_615;
        if (*(_DWORD *)v181 == 879784813 && *(_WORD *)(v181 + 4) == 12339)
        {
          v72 = 20;
          goto LABEL_653;
        }
        break;
      case 7:
        if (*(_DWORD *)v181 == 862154864 && *(_DWORD *)(v181 + 3) == 1701589555)
          goto LABEL_613;
        if (*(_DWORD *)v181 == 912486512 && *(_DWORD *)(v181 + 3) == 1701590070)
          goto LABEL_570;
        if (*(_DWORD *)v181 == 1668440417 && *(_DWORD *)(v181 + 3) == 875980899)
        {
LABEL_615:
          v72 = 3;
          goto LABEL_653;
        }
        if (*(_DWORD *)v181 == 1836410996 && *(_DWORD *)(v181 + 3) == 1650811501)
        {
          v72 = 40;
          goto LABEL_653;
        }
        break;
      case 8:
        if (*(_QWORD *)v181 == 0x6265656C61637378)
        {
LABEL_636:
          v72 = 2;
          goto LABEL_653;
        }
        if (*(_QWORD *)v181 == 0x32335F34366D7261)
          goto LABEL_603;
        break;
      case 9:
        if (*(_QWORD *)v181 == 0x6C63707265776F70 && *(_BYTE *)(v181 + 8) == 101)
        {
LABEL_613:
          v72 = 22;
          goto LABEL_653;
        }
        if (*(_QWORD *)v181 == 0x3663707265776F70 && *(_BYTE *)(v181 + 8) == 52)
        {
LABEL_614:
          v72 = 23;
          goto LABEL_653;
        }
        break;
      case 10:
        if (*(_QWORD *)v181 == 0x5F34366863726161 && *(_WORD *)(v181 + 8) == 25954)
        {
          v72 = 4;
          goto LABEL_653;
        }
        if (*(_QWORD *)v181 == 0x5F34366863726161 && *(_WORD *)(v181 + 8) == 12851)
        {
LABEL_603:
          v72 = 5;
          goto LABEL_653;
        }
        break;
      case 11:
        if (*(_QWORD *)v181 == 0x3663707265776F70 && *(_QWORD *)(v181 + 3) == 0x656C343663707265)
        {
LABEL_570:
          v72 = 24;
LABEL_653:
          LODWORD(v183) = v72;
          BYTE4(v183) = 1;
        }
        break;
      default:
        break;
    }
  }
  sub_1C5E4FA9C((uint64_t)&v181, "mipseb", 6, "mipsallegrex", 12, "mipsisa32r6", 11, v11, "mipsr6", 6, 16);
  sub_1C5E4FA9C((uint64_t)&v181, "mipsel", 6, "mipsallegrexel", 14, "mipsisa32r6el", 13, v12, "mipsr6el", 8, 17);
  if (!BYTE4(v183))
  {
    if (v182 == 6)
    {
      if (*(_DWORD *)v181 == 1936746861 && *(_WORD *)(v181 + 4) == 13366)
        goto LABEL_214;
    }
    else if (v182 == 8 && *(_QWORD *)v181 == 0x626534367370696DLL)
    {
LABEL_214:
      LODWORD(v183) = 18;
      BYTE4(v183) = 1;
    }
  }
  sub_1C5E4FA9C((uint64_t)&v181, "mipsn32", 7, "mipsisa64r6", 11, "mips64r6", 8, v13, "mipsn32r6", 9, 18);
  if (!BYTE4(v183) && v182 == 8 && *(_QWORD *)v181 == 0x6C6534367370696DLL)
  {
    LODWORD(v183) = 19;
    BYTE4(v183) = 1;
  }
  sub_1C5E4FA9C((uint64_t)&v181, "mipsn32el", 9, "mipsisa64r6el", 13, "mips64r6el", 10, v14, "mipsn32r6el", 11, 19);
  if (!BYTE4(v183))
  {
    switch(v182)
    {
      case 3:
        if (*(_WORD *)v181 == 25460 && *(_BYTE *)(v181 + 2) == 101)
        {
          v43 = 37;
          goto LABEL_665;
        }
        break;
      case 4:
        if (*(_DWORD *)v181 == 808466034)
        {
          v43 = 25;
          goto LABEL_665;
        }
        break;
      case 5:
        if (*(_DWORD *)v181 == 809055091 && *(_BYTE *)(v181 + 4) == 120)
          goto LABEL_635;
        if (*(_DWORD *)v181 == 1918988403 && *(_BYTE *)(v181 + 4) == 99)
        {
          v43 = 33;
          goto LABEL_665;
        }
        if (*(_DWORD *)v181 == 1818583924 && *(_BYTE *)(v181 + 4) == 101)
        {
          v43 = 38;
          goto LABEL_665;
        }
        if (*(_DWORD *)v181 == 1919902584 && *(_BYTE *)(v181 + 4) == 101)
        {
          v43 = 43;
          goto LABEL_665;
        }
        if (*(_DWORD *)v181 == 1953527406 && *(_BYTE *)(v181 + 4) == 120)
        {
          v43 = 44;
          goto LABEL_665;
        }
        break;
      case 6:
        if (*(_DWORD *)v181 == 1734634849 && *(_WORD *)(v181 + 4) == 28259)
        {
          v43 = 30;
          goto LABEL_665;
        }
        if (*(_DWORD *)v181 == 1818847081 && *(_WORD *)(v181 + 4) == 12851)
        {
          v43 = 46;
          goto LABEL_665;
        }
        if (*(_DWORD *)v181 == 1818847081 && *(_WORD *)(v181 + 4) == 13366)
        {
          v43 = 47;
          goto LABEL_665;
        }
        if (*(_DWORD *)v181 == 1597143143 && *(_WORD *)(v181 + 4) == 12385)
          goto LABEL_187;
        break;
      case 7:
        if (*(_DWORD *)v181 == 1668508018 && *(_DWORD *)(v181 + 3) == 842233443)
        {
          v43 = 31;
          goto LABEL_665;
        }
        if (*(_DWORD *)v181 == 1668508018 && *(_DWORD *)(v181 + 3) == 875984483)
        {
          v43 = 32;
          goto LABEL_665;
        }
        if (*(_DWORD *)v181 == 1635280232 && *(_DWORD *)(v181 + 3) == 1852794721)
        {
          v43 = 12;
          goto LABEL_665;
        }
        if (*(_DWORD *)v181 == 1953724787 && *(_DWORD *)(v181 + 3) == 2053989748)
        {
LABEL_635:
          v43 = 36;
          goto LABEL_665;
        }
        if (*(_DWORD *)v181 == 1918988403 && *(_DWORD *)(v181 + 3) == 1818583922)
        {
          v43 = 35;
          goto LABEL_665;
        }
        v83 = *(_DWORD *)v181 == 1918988403 && *(_DWORD *)(v181 + 3) == 964060018;
        if (v83 || (*(_DWORD *)v181 == 1918988403 ? (v84 = *(_DWORD *)(v181 + 3) == 875979634) : (v84 = 0), v84))
        {
          v43 = 34;
          goto LABEL_665;
        }
        if (*(_DWORD *)v181 == 1953527406 && *(_DWORD *)(v181 + 3) == 875985012)
        {
          v43 = 45;
          goto LABEL_665;
        }
        break;
      case 12:
        if (*(_QWORD *)v181 == 0x757067656C707061 && *(_DWORD *)(v181 + 8) == 846751583)
        {
LABEL_187:
          v43 = 26;
        }
        else
        {
          if (*(_QWORD *)v181 != 0x757067656C707061 || *(_DWORD *)(v181 + 8) != 1882482527)
            break;
          v43 = 27;
        }
LABEL_665:
        LODWORD(v183) = v43;
        BYTE4(v183) = 1;
        break;
      default:
        break;
    }
  }
  sub_1C5E4FA9C((uint64_t)&v181, "applegpu_g4g", 12, "applegpu_g5p", 12, "applegpu_g9p", 12, v15, "applegpu_g9g", 12, 27);
  if (BYTE4(v183))
    goto LABEL_14;
  if (v182 != 6)
  {
    if (v182 == 8)
    {
      if (*(_QWORD *)v181 != 0x757067656C707061)
        goto LABEL_14;
    }
    else
    {
      if (v182 != 13)
        goto LABEL_14;
      if (*(_QWORD *)v181 != 0x757067656C707061 || *(_QWORD *)(v181 + 5) != 0x703031675F757067)
        goto LABEL_14;
    }
    v46 = 28;
LABEL_269:
    LODWORD(v183) = v46;
    BYTE4(v183) = 1;
    goto LABEL_14;
  }
  if (*(_DWORD *)v181 == 1600599143 && *(_WORD *)(v181 + 4) == 12385)
  {
    v46 = 27;
    goto LABEL_269;
  }
LABEL_14:
  sub_1C5E4FA9C((uint64_t)&v181, "applegpu_g11p", 13, "applegpu_g11g", 13, "applegpu_g11g_8fstp", 19, v16, "applegpu_g11m", 13, 28);
  if (BYTE4(v183))
    goto LABEL_17;
  if (v182 != 7)
  {
    if (v182 != 13)
      goto LABEL_17;
    if ((*(_QWORD *)v181 != 0x757067656C707061 || *(_QWORD *)(v181 + 5) != 0x703231675F757067)
      && (*(_QWORD *)v181 != 0x757067656C707061 || *(_QWORD *)(v181 + 5) != 0x703331675F757067))
    {
      goto LABEL_17;
    }
LABEL_224:
    LODWORD(v183) = 28;
    BYTE4(v183) = 1;
    goto LABEL_17;
  }
  if (*(_DWORD *)v181 == 1882272103 && *(_DWORD *)(v181 + 3) == 811687792)
    goto LABEL_224;
  if (*(_DWORD *)v181 == 1831940455 && *(_DWORD *)(v181 + 3) == 811687789)
    goto LABEL_224;
  if (*(_DWORD *)v181 == 1731277159 && *(_DWORD *)(v181 + 3) == 811687783)
    goto LABEL_224;
  if (*(_DWORD *)v181 == 1882337639 && *(_DWORD *)(v181 + 3) == 811687792)
    goto LABEL_224;
LABEL_17:
  sub_1C5E4FA9C((uint64_t)&v181, "applegpu_g13g", 13, "applegpu_g13s", 13, "applegpu_g13c", 13, v17, "applegpu_g13d", 13, 28);
  if (!BYTE4(v183) && v182 == 7 && *(_DWORD *)v181 == 1882403175 && *(_DWORD *)(v181 + 3) == 811687792)
  {
    LODWORD(v183) = 28;
    BYTE4(v183) = 1;
  }
  sub_1C5E4FA9C((uint64_t)&v181, "g13g_a0", 7, "g13s_a0", 7, "g13c_a0", 7, v18, "g13d_a0", 7, 28);
  sub_1C5E4FA9C((uint64_t)&v181, "applegpu_g14p", 13, "applegpu_g14g", 13, "applegpu_g14s", 13, v19, "applegpu_g14d", 13, 28);
  sub_1C5E4FA9C((uint64_t)&v181, "g14p_a0", 7, "g14g_a0", 7, "g14s_a0", 7, v20, "g14d_a0", 7, 28);
  if (!BYTE4(v183))
  {
    switch(v182)
    {
      case 6:
        v75 = *(unsigned __int16 *)(v181 + 4);
        v76 = *(_DWORD *)v181 == 1734634849;
        v77 = 30064;
        goto LABEL_312;
      case 7:
        if ((*(_DWORD *)v181 != 1731539303 || *(_DWORD *)(v181 + 3) != 811687783)
          && (*(_DWORD *)v181 != 1731539303 || *(_DWORD *)(v181 + 3) != 811753319)
          && (*(_DWORD *)v181 != 1932865895 || *(_DWORD *)(v181 + 3) != 811687795)
          && (*(_DWORD *)v181 != 1932865895 || *(_DWORD *)(v181 + 3) != 811753331)
          && (*(_DWORD *)v181 != 1882599783 || *(_DWORD *)(v181 + 3) != 811687792)
          && (*(_DWORD *)v181 != 1882599783 || *(_DWORD *)(v181 + 3) != 811753328)
          && (*(_DWORD *)v181 != 1731604839 || *(_DWORD *)(v181 + 3) != 811687783))
        {
          break;
        }
        goto LABEL_169;
      case 13:
        if (*(_QWORD *)v181 == 0x757067656C707061 && *(_QWORD *)(v181 + 5) == 0x703531675F757067)
        {
          v59 = 28;
        }
        else
        {
          v23 = *(_QWORD *)v181 == 0x757067656C707061 && *(_QWORD *)(v181 + 5) == 0x673531675F757067;
          if (v23
            || (*(_QWORD *)v181 == 0x757067656C707061
              ? (v24 = *(_QWORD *)(v181 + 5) == 0x733531675F757067)
              : (v24 = 0),
                v24
             || (*(_QWORD *)v181 == 0x757067656C707061
               ? (v25 = *(_QWORD *)(v181 + 5) == 0x703631675F757067)
               : (v25 = 0),
                 v25
              || (*(_QWORD *)v181 == 0x757067656C707061
                ? (v26 = *(_QWORD *)(v181 + 5) == 0x673631675F757067)
                : (v26 = 0),
                  v26
               || (*(_QWORD *)v181 == 0x757067656C707061
                 ? (v27 = *(_QWORD *)(v181 + 5) == 0x703731675F757067)
                 : (v27 = 0),
                   v27)))))
          {
LABEL_169:
            v59 = 29;
          }
          else
          {
            if ((*(_QWORD *)v181 != 0x675F757067646D61 || *(_QWORD *)(v181 + 5) != 0x3030367866675F75)
              && (*(_QWORD *)v181 != 0x675F757067646D61 || *(_QWORD *)(v181 + 5) != 0x3130377866675F75)
              && (*(_QWORD *)v181 != 0x675F757067646D61 || *(_QWORD *)(v181 + 5) != 0x3430377866675F75)
              && (*(_QWORD *)v181 != 0x675F757067646D61 || *(_QWORD *)(v181 + 5) != 0x3330387866675F75)
              && (*(_QWORD *)v181 != 0x675F757067646D61 || *(_QWORD *)(v181 + 5) != 0x3230387866675F75)
              && (*(_QWORD *)v181 != 0x675F757067646D61 || *(_QWORD *)(v181 + 5) != 0x3030397866675F75)
              && (*(_QWORD *)v181 != 0x675F757067646D61 || *(_QWORD *)(v181 + 5) != 0x3430397866675F75))
            {
              v35 = *(_QWORD *)(v181 + 5);
              v36 = *(_QWORD *)v181 == 0x675F757067646D61;
              v37 = 0x3630397866675F75;
LABEL_349:
              if (!v36 || v35 != v37)
                break;
            }
LABEL_354:
            v59 = 30;
          }
        }
        LODWORD(v183) = v59;
        BYTE4(v183) = 1;
        break;
      case 14:
        v35 = *(_QWORD *)(v181 + 6);
        v36 = *(_QWORD *)v181 == 0x675F757067646D61;
        v37 = 0x303130317866675FLL;
        goto LABEL_349;
      case 17:
        v75 = *(unsigned __int8 *)(v181 + 16);
        v76 = *(_QWORD *)v181 == 0x675F757067646D61 && *(_QWORD *)(v181 + 8) == 0x776E5F3030367866;
        v77 = 104;
LABEL_312:
        if (!v76 || v75 != v77)
          break;
        goto LABEL_354;
      case 19:
        v35 = *(_QWORD *)(v181 + 11);
        v36 = *(_QWORD *)v181 == 0x675F757067646D61 && *(_QWORD *)(v181 + 8) == 0x6E5F303130317866;
        v37 = 0x6367736E5F303130;
        goto LABEL_349;
      default:
        break;
    }
  }
  sub_1C5E4FA9C((uint64_t)&v181, "amdgpu_gfx1011", 14, "amdgpu_gfx1012", 14, "amdgpu_gfx1030", 14, v21, "amdgpu_gfx1032", 14, 30);
  if (BYTE4(v183))
    goto LABEL_379;
  if (v182 <= 17)
  {
    if (v182 != 8)
    {
      if (v182 == 9 && *(_QWORD *)v181 == 0x706761696469766ELL && *(_BYTE *)(v181 + 8) == 117)
      {
        v144 = 45;
        goto LABEL_526;
      }
      goto LABEL_379;
    }
    if (*(_QWORD *)v181 != 0x7570676C65746E69)
      goto LABEL_379;
LABEL_525:
    v144 = 47;
LABEL_526:
    LODWORD(v183) = v144;
    BYTE4(v183) = 1;
    goto LABEL_379;
  }
  if (v182 == 18)
  {
    if (*(_QWORD *)v181 != 0x7570676C65746E69
      || *(_QWORD *)(v181 + 8) != 0x3274675F6C6B735FLL
      || *(_WORD *)(v181 + 16) != 13938)
    {
      v130 = *(_QWORD *)v181 == 0x7570676C65746E69 && *(_QWORD *)(v181 + 8) == 0x3274675F6C6B735FLL;
      if (!v130 || *(_WORD *)(v181 + 16) != 14194)
      {
        v132 = *(_QWORD *)v181 == 0x7570676C65746E69 && *(_QWORD *)(v181 + 8) == 0x3274675F6C626B5FLL;
        if (!v132 || *(_WORD *)(v181 + 16) != 12402)
        {
          v134 = *(_QWORD *)v181 == 0x7570676C65746E69 && *(_QWORD *)(v181 + 8) == 0x3274675F6C626B5FLL;
          if (!v134 || *(_WORD *)(v181 + 16) != 12914)
          {
            v136 = *(_QWORD *)v181 == 0x7570676C65746E69 && *(_QWORD *)(v181 + 8) == 0x3274675F6C626B5FLL;
            if (!v136 || *(_WORD *)(v181 + 16) != 13426)
            {
              v138 = *(_QWORD *)v181 == 0x7570676C65746E69 && *(_QWORD *)(v181 + 8) == 0x3374675F6C626B5FLL;
              if (!v138 || *(_WORD *)(v181 + 16) != 12658)
              {
                v140 = *(_QWORD *)v181 == 0x7570676C65746E69 && *(_QWORD *)(v181 + 8) == 0x3374675F6C626B5FLL;
                if (!v140 || *(_WORD *)(v181 + 16) != 13938)
                  goto LABEL_379;
              }
            }
          }
        }
      }
    }
    goto LABEL_525;
  }
  if (v182 != 19)
  {
    if (v182 != 20)
      goto LABEL_379;
    v104 = *(_QWORD *)v181 == 0x7570676C65746E69 && *(_QWORD *)(v181 + 8) == 0x3678315F6C63695FLL;
    if (!v104 || *(_DWORD *)(v181 + 16) != 930232440)
    {
      v106 = *(_QWORD *)v181 == 0x7570676C65746E69 && *(_QWORD *)(v181 + 8) == 0x3878315F6C63695FLL;
      if (!v106 || *(_DWORD *)(v181 + 16) != 930232440)
        goto LABEL_379;
    }
    goto LABEL_525;
  }
  if (*(_QWORD *)v181 == 0x7570676C65746E69
    && *(_QWORD *)(v181 + 8) == 0x3374675F6C6B735FLL
    && *(_QWORD *)(v181 + 11) == 0x3031723374675F6CLL)
  {
    goto LABEL_525;
  }
LABEL_379:
  sub_1C5E4FA9C((uint64_t)&v181, "nvidiagpu_gk", 12, "nvidiagpu_gm", 12, "nvidiagpu_gp", 12, v103, "nvidiagpu_gv", 12, 45);
  sub_1C5E4FA9C((uint64_t)&v181, "air32", 5, "air32_v16", 9, "air32_v18", 9, v108, "air32_v111", 10, 48);
  if (!BYTE4(v183) && v182 == 9 && *(_QWORD *)v181 == 0x32765F3233726961 && *(_BYTE *)(v181 + 8) == 48)
  {
    LODWORD(v183) = 48;
    BYTE4(v183) = 1;
  }
  sub_1C5E4FB90((uint64_t)&v181, "air32_v21", 9, "air32_v22", 9, "air32_v23", 9, v109, "air32_v24", 9, "air32_v25", 9, "air32_v26", 9, "air32_v27", 9, 48);
  sub_1C5E4FA9C((uint64_t)&v181, "air32_amdgpu", 12, "air32_applegpu", 14, "air32_intelgpu", 14, v110, "air32_nvidiagpu", 15, 48);
  sub_1C5E4FA9C((uint64_t)&v181, "air64", 5, "air64_v16", 9, "air64_v18", 9, v111, "air64_v111", 10, 49);
  if (!BYTE4(v183) && v182 == 9 && *(_QWORD *)v181 == 0x32765F3436726961 && *(_BYTE *)(v181 + 8) == 48)
  {
    LODWORD(v183) = 49;
    BYTE4(v183) = 1;
  }
  sub_1C5E4FB90((uint64_t)&v181, "air64_v21", 9, "air64_v22", 9, "air64_v23", 9, v112, "air64_v24", 9, "air64_v25", 9, "air64_v26", 9, "air64_v27", 9, 49);
  sub_1C5E4FA9C((uint64_t)&v181, "air64_amdgpu", 12, "air64_applegpu", 14, "air64_intelgpu", 14, v113, "air64_nvidiagpu", 15, 49);
  if (BYTE4(v183))
  {
    result = v183;
    if ((_DWORD)v183)
      return result;
  }
  else
  {
    switch(v182)
    {
      case 6:
        if (*(_DWORD *)v181 == 1919512691 && *(_WORD *)(v181 + 4) == 13366)
          return 57;
        if (*(_DWORD *)v181 == 1836278135 && *(_WORD *)(v181 + 4) == 12851)
          return 63;
        if (*(_DWORD *)v181 == 1836278135 && *(_WORD *)(v181 + 4) == 13366)
          return 64;
        goto LABEL_397;
      case 4:
        switch(*(_DWORD *)v181)
        {
          case 0x3233656C:
            return 50;
          case 0x3436656C:
            return 51;
          case 0x72697073:
            return 56;
          case 0x30786761:
            return 26;
          case 0x31786761:
            return 27;
          case 0x32786761:
            return 28;
          case 0x33786761:
            return 29;
          case 0x796B7363:
            return 10;
          case 0x6C697864:
            return 11;
        }
        goto LABEL_397;
      case 5:
        if (*(_DWORD *)v181 == 1768189281 && *(_BYTE *)(v181 + 4) == 108)
          return 52;
        if (*(_DWORD *)v181 == 1767994216 && *(_BYTE *)(v181 + 4) == 108)
          return 54;
        if (*(_DWORD *)v181 == 1634623852 && *(_BYTE *)(v181 + 4) == 105)
          return 62;
        if (*(_DWORD *)v181 == 1986095219 && *(_BYTE *)(v181 + 4) == 101)
          return 61;
        goto LABEL_397;
      case 7:
        v145 = v181;
        if (*(_DWORD *)v181 == 1768189281 && *(_DWORD *)(v181 + 3) == 875981929)
          return 53;
        if (*(_DWORD *)v181 == 1767994216 && *(_DWORD *)(v181 + 3) == 875981929)
          return 55;
        if (*(_DWORD *)v181 == 1919512691 && *(_DWORD *)(v181 + 3) == 842233458)
          return 58;
        if (*(_DWORD *)v181 == 1919512691 && *(_DWORD *)(v181 + 3) == 875984498)
          return 59;
LABEL_544:
        if (*(_DWORD *)v145 == 1768710507 && *(_DWORD *)(v145 + 3) == 1633840489)
          return 60;
        if (v182 == 14)
        {
          if (*(_QWORD *)v145 == 0x63737265646E6572 && *(_QWORD *)(v145 + 6) == 0x3233747069726373)
            return 65;
          v152 = *(_QWORD *)v145;
          v153 = *(_QWORD *)(v145 + 6);
          if (v152 == 0x63737265646E6572 && v153 == 0x3436747069726373)
            return 66;
        }
        else if (v182 == 11)
        {
          if (*(_QWORD *)v145 == 0x637261676E6F6F6CLL && *(_QWORD *)(v145 + 3) == 0x323368637261676ELL)
            return 13;
          v178 = *(_QWORD *)v145;
          v179 = *(_QWORD *)(v145 + 3);
          if (v178 == 0x637261676E6F6F6CLL && v179 == 0x343668637261676ELL)
            return 14;
        }
        goto LABEL_397;
    }
    if ((unint64_t)v182 >= 7)
    {
      v145 = v181;
      goto LABEL_544;
    }
    if (v182 == 2 && *(_WORD *)v181 == 25974)
      return 67;
  }
LABEL_397:
  if (a2 < 3)
    return 0;
  if (*(_WORD *)a1 != 29281 || *(_BYTE *)(a1 + 2) != 109)
  {
    if (a2 < 5
      || (*(_DWORD *)a1 == 1836410996 ? (v118 = *(_BYTE *)(a1 + 4) == 98) : (v118 = 0),
          !v118
       && (a2 < 7 || (*(_DWORD *)a1 == 1668440417 ? (v119 = *(_DWORD *)(a1 + 3) == 875980899) : (v119 = 0), !v119))))
    {
      if (*(_WORD *)a1 == 28770 && *(_BYTE *)(a1 + 2) == 102)
        return sub_1C5E48DC8(a1, a2);
      return 0;
    }
  }
  v163 = llvm::ARM::parseArchISA((unsigned __int16 *)a1, a2);
  v164 = llvm::ARM::parseArchEndian(a1, a2);
  v165 = v164;
  if (v164 == 2)
  {
    v166 = v163 - 1;
    if ((v163 - 1) <= 2)
    {
      v167 = &unk_1C8670A74;
      goto LABEL_618;
    }
LABEL_619:
    v168 = 0;
    goto LABEL_620;
  }
  if (v164 != 1)
    goto LABEL_619;
  v166 = v163 - 1;
  if ((v163 - 1) >= 3)
    goto LABEL_619;
  v167 = &unk_1C8670A68;
LABEL_618:
  v168 = v167[v166];
LABEL_620:
  CanonicalArchName = llvm::ARM::getCanonicalArchName(a1, a2);
  if (!v170)
    return 0;
  v171 = (uint64_t)CanonicalArchName;
  v172 = v170;
  if (v163 == 2 && v170 != 1 && (*(_WORD *)CanonicalArchName == 12918 || *(_WORD *)CanonicalArchName == 13174))
    return 0;
  v173 = llvm::ARM::parseArchProfile((uint64_t)CanonicalArchName, v170);
  v174 = llvm::ARM::parseArchVersion(v171, v172);
  if (v165 == 2)
    v175 = 40;
  else
    v175 = 39;
  if (v174 == 6 && v173 == 3)
    return v175;
  else
    return v168;
}

uint64_t sub_1C5E4AF48(uint64_t a1, unint64_t a2)
{
  _BYTE *CanonicalArchName;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *ArchSynonym;
  size_t v16;
  size_t v17;
  uint64_t v18;
  int *i;
  size_t v20;
  int *v21;
  unint64_t v23;
  unint64_t v24;
  int v26;

  if (a2 < 4)
    goto LABEL_11;
  if (*(_DWORD *)a1 == 1936746861 && (*(_DWORD *)(a1 + a2 - 4) == 1818572402 || *(_WORD *)(a1 + a2 - 2) == 13938))
    return 35;
  if (a2 == 6)
  {
    if (*(_DWORD *)a1 == 913142369 && *(_WORD *)(a1 + 4) == 25908)
      return 31;
    CanonicalArchName = llvm::ARM::getCanonicalArchName(a1, 6uLL);
    if (v6)
      goto LABEL_12;
    goto LABEL_32;
  }
  if (a2 != 10)
  {
LABEL_11:
    CanonicalArchName = llvm::ARM::getCanonicalArchName(a1, a2);
    if (v6)
      goto LABEL_12;
    if (a2 >= 8)
    {
LABEL_19:
      v23 = 0x100000020;
      v24 = a1 + a2;
      if (*(_QWORD *)(a1 + a2 - 8) != 0x3361626D696C616BLL)
      {
        if (*(_QWORD *)(v24 - 8) == 0x3461626D696C616BLL)
        {
          v23 = 0x100000021;
        }
        else
        {
          v23 = 0x100000022;
          if (*(_QWORD *)(v24 - 8) != 0x3561626D696C616BLL)
            v23 = 0;
        }
      }
      goto LABEL_33;
    }
LABEL_32:
    v23 = 0;
LABEL_33:
    if (v23 <= 0x100000000)
      return 0x100000000;
    else
      return v23;
  }
  if (*(_QWORD *)a1 == 0x7363707265776F70 && *(_WORD *)(a1 + 8) == 25968)
    return 36;
  CanonicalArchName = llvm::ARM::getCanonicalArchName(a1, 0xAuLL);
  if (!v6)
    goto LABEL_19;
LABEL_12:
  v7 = llvm::ARM::getCanonicalArchName((uint64_t)CanonicalArchName, v6);
  ArchSynonym = (const void *)llvm::ARM::getArchSynonym((uint64_t)v7, v8, v9, v10, v11, v12, v13, v14);
  v17 = v16;
  v18 = -(uint64_t)v16;
  for (i = &dword_1E819AF68; ; i += 18)
  {
    v20 = *((_QWORD *)i - 7);
    v21 = i - 16;
    if (v20 >= v17 && (!v17 || !memcmp((const void *)(*((_QWORD *)i - 8) + v20 + v18), ArchSynonym, v17)))
      break;
    if (v21 + 18 == (int *)off_1E819BAF8)
      return 0;
  }
  v26 = *i - 6;
  if (v26 > 0x23)
    return 0;
  return dword_1C8670A80[v26];
}

uint64_t sub_1C5E4B170(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;

  switch(a2)
  {
    case 2:
      if (*a1 != 25456)
      {
        v2 = 0x10000000ELL;
        v3 = *a1 == 25967;
        goto LABEL_48;
      }
      v2 = 0x100000002;
      break;
    case 3:
      v2 = 0x100000003;
      if (*a1 != 26995 || *((_BYTE *)a1 + 2) != 101)
      {
        if (*a1 == 29542 && *((_BYTE *)a1 + 2) == 108)
        {
          v2 = 0x100000004;
        }
        else if (*a1 == 25193 && *((_BYTE *)a1 + 2) == 109)
        {
          v2 = 0x100000005;
        }
        else if (*a1 == 28009 && *((_BYTE *)a1 + 2) == 103)
        {
          v2 = 0x100000006;
        }
        else if (*a1 == 29805 && *((_BYTE *)a1 + 2) == 105)
        {
          v2 = 0x100000007;
        }
        else if (*a1 == 29539 && *((_BYTE *)a1 + 2) == 114)
        {
          v2 = 0x100000009;
        }
        else
        {
          if (*a1 != 28001 || *((_BYTE *)a1 + 2) != 100)
            goto LABEL_42;
          v2 = 0x10000000BLL;
        }
      }
      break;
    case 4:
      v2 = 0x100000003;
      if (*(_DWORD *)a1 != 1768252275)
      {
        if (*(_DWORD *)a1 == 1634952557)
        {
          v2 = 0x10000000CLL;
        }
        else
        {
          if (*(_DWORD *)a1 != 1702065523)
            goto LABEL_42;
          v2 = 0x10000000DLL;
        }
      }
      break;
    case 5:
      if (*(_DWORD *)a1 != 1819308129 || *((_BYTE *)a1 + 4) != 101)
        goto LABEL_42;
      v2 = 0x100000001;
      break;
    case 6:
      if (*(_DWORD *)a1 == 1684633198 && a1[2] == 24937)
      {
        v2 = 0x100000008;
      }
      else
      {
        v2 = 0x10000000ALL;
        v3 = (*(_DWORD *)a1 ^ 0x6972796D | a1[2] ^ 0x6461) == 0;
LABEL_48:
        if (!v3)
          v2 = 0;
      }
      break;
    default:
LABEL_42:
      v2 = 0;
      break;
  }
  if ((v2 & 0x300000000) != 0)
    return v2;
  else
    return 0;
}

uint64_t sub_1C5E4B3B0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  int v4;
  _BOOL4 v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  BOOL v10;
  char v12;
  BOOL v13;
  uint64_t v16;
  char v17;
  char v19;
  BOOL v22;
  char v23;
  BOOL v27;
  uint64_t v28;
  BOOL v29;
  BOOL v30;
  uint64_t v35;
  char v36;
  char v38;
  BOOL v39;
  char v40;
  BOOL v44;
  char v45;
  char v48;
  BOOL v54;

  if (a2 < 6)
  {
    v2 = 0;
    v3 = 1;
LABEL_10:
    v6 = a2 < 9;
    goto LABEL_11;
  }
  v4 = *(_DWORD *)a1 ^ 0x6E616E61 | *(unsigned __int16 *)(a1 + 4) ^ 0x7361;
  v8 = v4 == 0;
  v5 = v4 != 0;
  v2 = 0x100000001;
  if (!v8)
    v2 = 0;
  v3 = a2 < 8;
  if (a2 >= 8 && v5 && *(_QWORD *)a1 == 0x69626164756F6C63)
    v2 = 0x100000002;
  if ((v2 & 0xFF00000000) != 0)
    goto LABEL_10;
  if (*(_DWORD *)a1 == 2003984740 && *(_WORD *)(a1 + 4) == 28265)
  {
    v2 = 0x100000003;
    goto LABEL_10;
  }
  if (a2 >= 9)
  {
    if (*(_QWORD *)a1 == 0x6C666E6F67617264 && *(_BYTE *)(a1 + 8) == 121)
    {
      v2 = 0x100000004;
      goto LABEL_271;
    }
    v6 = 0;
    v3 = 0;
  }
  else
  {
    v6 = 1;
  }
LABEL_11:
  v7 = v2 & 0x100000000;
  if (a2 >= 7 && !v7)
  {
    v8 = *(_DWORD *)a1 == 1701147238 && *(_DWORD *)(a1 + 3) == 1685283429;
    if (v8)
    {
      v2 = 0x100000005;
      goto LABEL_271;
    }
    if (*(_DWORD *)a1 == 1751348582 && *(_DWORD *)(a1 + 3) == 1634300776)
    {
      v2 = 0x100000006;
      goto LABEL_50;
    }
  }
  v10 = a2 < 3;
  if (a2 < 3 || v7)
    goto LABEL_28;
  if (*(_WORD *)a1 == 28521 && *(_BYTE *)(a1 + 2) == 115)
  {
    v2 = 0x100000007;
LABEL_50:
    v10 = 0;
    v13 = a2 < 5;
    goto LABEL_51;
  }
  v10 = 0;
LABEL_28:
  if (v7)
    v12 = 1;
  else
    v12 = v3;
  if ((v12 & 1) == 0 && *(_QWORD *)a1 == 0x647362656572666BLL)
  {
    v13 = a2 < 5;
    v2 = 0x100000008;
    goto LABEL_143;
  }
  v13 = a2 < 5;
  if (a2 >= 5 && !v7)
  {
    v13 = 0;
    if (*(_DWORD *)a1 == 1970170220 && *(_BYTE *)(a1 + 4) == 120)
    {
      v2 = 0x100000009;
LABEL_143:
      v30 = a2 < 4;
      goto LABEL_144;
    }
  }
LABEL_51:
  v16 = v2 & 0x100000000;
  v17 = (v2 & 0xFF00000000) != 0 || v10;
  if ((v17 & 1) == 0 && *(_WORD *)a1 == 30316 && *(_BYTE *)(a1 + 2) == 50)
  {
    v2 = 0x10000000ALL;
    goto LABEL_143;
  }
  if (v16)
    v19 = 1;
  else
    v19 = v13;
  if ((v19 & 1) == 0 && *(_DWORD *)a1 == 1868783981 && *(_BYTE *)(a1 + 4) == 115)
  {
    v2 = 0x10000000BLL;
    goto LABEL_143;
  }
  if (a2 >= 6 && !v16 && *(_DWORD *)a1 == 1651795310 && *(_WORD *)(a1 + 4) == 25715)
  {
    v30 = 0;
    v2 = 0x10000000CLL;
    goto LABEL_144;
  }
  v22 = a2 >= 7 && v16 == 0;
  v23 = !v22;
  if (v22)
  {
    if (*(_DWORD *)a1 == 1852141679 && *(_DWORD *)(a1 + 3) == 1685283438)
    {
      v30 = 0;
      v2 = 0x10000000DLL;
      goto LABEL_144;
    }
    if (*(_DWORD *)a1 == 1634496371 && *(_DWORD *)(a1 + 3) == 1936290401)
    {
      v2 = 0x10000000ELL;
      goto LABEL_143;
    }
  }
  if ((v19 & 1) == 0 && *(_DWORD *)a1 == 862873975 && *(_BYTE *)(a1 + 4) == 50)
  {
    v2 = 0x10000000FLL;
    goto LABEL_143;
  }
  if ((v23 & 1) != 0
    || (*(_DWORD *)a1 == 1684957559 ? (v27 = *(_DWORD *)(a1 + 3) == 1937207140) : (v27 = 0), v28 = 0x10000000FLL, !v27))
  {
    if ((v17 & 1) != 0 || (*(_WORD *)a1 == 28538 ? (v29 = *(_BYTE *)(a1 + 2) == 115) : (v29 = 0), !v29))
    {
      if ((v19 & 1) != 0)
        goto LABEL_105;
      if (*(_DWORD *)a1 == 1802068328 && *(_BYTE *)(a1 + 4) == 117)
      {
        v2 = 0x100000011;
      }
      else
      {
        if (*(_DWORD *)a1 != 1768843629 || *(_BYTE *)(a1 + 4) != 120)
        {
          if (*(_DWORD *)a1 == 1835365490 && *(_BYTE *)(a1 + 4) == 115)
          {
            v2 = 0x100000013;
            goto LABEL_271;
          }
LABEL_105:
          v30 = a2 < 4;
          if (a2 >= 4 && !v16)
          {
            if (*(_DWORD *)a1 == 1818452334)
            {
              v2 = 0x100000014;
              goto LABEL_271;
            }
            v30 = 0;
          }
          goto LABEL_144;
        }
        v2 = 0x100000012;
      }
      v13 = 0;
      goto LABEL_143;
    }
    v28 = 0x100000010;
  }
  v30 = a2 < 4;
  v2 = v28;
LABEL_144:
  v35 = v2 & 0x100000000;
  v36 = (v2 & 0xFF00000000) != 0 || v10;
  if ((v36 & 1) == 0 && *(_WORD *)a1 == 26977 && *(_BYTE *)(a1 + 2) == 120)
  {
    v2 = 0x100000015;
    goto LABEL_271;
  }
  if (v35)
    v38 = 1;
  else
    v38 = v30;
  if ((v38 & 1) == 0)
  {
    if (*(_DWORD *)a1 == 1633973603)
    {
      v2 = 0x100000016;
      goto LABEL_271;
    }
    if (*(_DWORD *)a1 == 1818457710)
    {
      v2 = 0x100000017;
      goto LABEL_271;
    }
  }
  v39 = a2 >= 6 && v35 == 0;
  v40 = !v39;
  if (v39 && *(_DWORD *)a1 == 1751412065 && *(_WORD *)(a1 + 4) == 24947)
  {
    v2 = 0x100000018;
    goto LABEL_271;
  }
  if ((v36 & 1) == 0)
  {
    if (*(_WORD *)a1 == 29552 && *(_BYTE *)(a1 + 2) == 52)
    {
      v2 = 0x100000019;
      goto LABEL_271;
    }
    if (*(_WORD *)a1 == 29552 && *(_BYTE *)(a1 + 2) == 53)
    {
      v2 = 0x10000001ALL;
      goto LABEL_271;
    }
  }
  if (v35)
    v3 = 1;
  if (!v3 && *(_QWORD *)a1 == 0x75636D6169666C65)
  {
    v2 = 0x10000001BLL;
    goto LABEL_271;
  }
  if ((v38 & 1) == 0 && *(_DWORD *)a1 == 1936684660)
  {
    v2 = 0x10000001CLL;
    goto LABEL_271;
  }
  v44 = a2 >= 7 && v35 == 0;
  v45 = !v44;
  if (v44 && *(_DWORD *)a1 == 1668571511 && *(_DWORD *)(a1 + 3) == 1936681059)
  {
    v2 = 0x10000001DLL;
    goto LABEL_271;
  }
  if (!v3 && *(_QWORD *)a1 == 0x736F656764697262)
  {
    v2 = 0x10000001ELL;
    goto LABEL_271;
  }
  if (v35)
    v6 = 1;
  if (!v6 && *(_QWORD *)a1 == 0x696B726576697264 && *(_BYTE *)(a1 + 8) == 116)
  {
    v2 = 0x10000001FLL;
    goto LABEL_271;
  }
  if (v35)
    v48 = 1;
  else
    v48 = v13;
  if ((v48 & 1) == 0 && *(_DWORD *)a1 == 1869636979 && *(_BYTE *)(a1 + 4) == 115)
  {
    v2 = 0x100000020;
    goto LABEL_271;
  }
  if ((v38 & 1) == 0 && *(_DWORD *)a1 == 1936683640 || !v3 && *(_QWORD *)a1 == 0x736F6E6F69736976)
  {
    v2 = 0x100000021;
    goto LABEL_271;
  }
  if ((v40 & 1) == 0 && *(_DWORD *)a1 == 1634952557 && *(_WORD *)(a1 + 4) == 25651)
  {
    v2 = 0x100000022;
    goto LABEL_271;
  }
  if ((v45 & 1) == 0 && *(_DWORD *)a1 == 1953394531 && *(_DWORD *)(a1 + 3) == 1768647028)
  {
    v2 = 0x100000023;
    goto LABEL_271;
  }
  if ((v40 & 1) != 0)
    goto LABEL_239;
  if (*(_DWORD *)a1 == 1885629793 && *(_WORD *)(a1 + 4) == 27745)
  {
    v2 = 0x100000024;
    goto LABEL_271;
  }
  if (*(_DWORD *)a1 == 1836213608 && *(_WORD *)(a1 + 4) == 29801)
  {
    v2 = 0x100000025;
  }
  else
  {
    if ((v38 & 1) != 0)
      goto LABEL_245;
LABEL_239:
    if (*(_DWORD *)a1 == 1685222760)
    {
      v2 = 0x100000026;
      goto LABEL_271;
    }
    if (*(_DWORD *)a1 == 1769169271)
    {
      v2 = 0x100000027;
    }
    else
    {
LABEL_245:
      if (a2 >= 0xA
        && !v35
        && (*(_QWORD *)a1 == 0x7470697263736D65 ? (v54 = *(unsigned __int16 *)(a1 + 8) == 28261) : (v54 = 0), v54))
      {
        v2 = 0x100000028;
      }
      else if (a2 >= 0xB
             && !v35
             && !(*(_QWORD *)a1 ^ 0x6F6D726564616873 | *(_QWORD *)(a1 + 3) ^ 0x6C65646F6D726564))
      {
        v2 = 0x100000029;
      }
    }
  }
LABEL_271:
  if ((v2 & 0xFF00000000) != 0)
    return v2;
  else
    return 0;
}

uint64_t sub_1C5E4BBF4(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v6;
  BOOL v8;
  BOOL v10;
  char v11;
  char v16;
  BOOL v18;
  uint64_t v20;
  char v21;
  BOOL v23;
  char v24;
  BOOL v26;
  char v27;
  BOOL v32;
  uint64_t v33;
  BOOL v39;
  uint64_t v41;
  BOOL v42;
  BOOL v43;
  BOOL v44;
  BOOL v45;
  char v46;
  char v47;

  if (a2 >= 6)
  {
    if (*(_DWORD *)a1 ^ 0x69626165 | *(unsigned __int16 *)(a1 + 4) ^ 0x6668)
      v2 = 0;
    else
      v2 = 0x10000000ALL;
  }
  else
  {
    v2 = 0;
  }
  if (a2 >= 4 && !HIDWORD(v2) && *(_DWORD *)a1 == 1768055141)
    v2 = 0x100000009;
  v3 = v2 & 0xFF00000000;
  v4 = (v2 & 0xFF00000000) != 0 || a2 < 9;
  if (!v4 && *(_QWORD *)a1 == 0x336E696261756E67 && *(_BYTE *)(a1 + 8) == 50)
  {
    v2 = 0x100000002;
LABEL_78:
    v8 = 0;
    v6 = 0;
LABEL_86:
    v18 = a2 < 0xA;
    goto LABEL_87;
  }
  v6 = a2 < 8;
  if (a2 >= 8 && !v3 && *(_QWORD *)a1 == 0x3436696261756E67)
  {
    v2 = 0x100000003;
    goto LABEL_78;
  }
  if (!v4 && *(_QWORD *)a1 == 0x6869626165756E67 && *(_BYTE *)(a1 + 8) == 102)
  {
    v2 = 0x100000005;
LABEL_81:
    v8 = 0;
    goto LABEL_86;
  }
  v8 = a2 < 7;
  if (a2 < 7 || v3)
    goto LABEL_33;
  if (*(_DWORD *)a1 == 1702194791 && *(_DWORD *)(a1 + 3) == 1768055141)
  {
    v2 = 0x100000004;
    goto LABEL_81;
  }
  v8 = 0;
LABEL_33:
  v10 = a2 >= 6 && v3 == 0;
  v11 = !v10;
  if (v10 && *(_DWORD *)a1 == 2020961895 && *(_WORD *)(a1 + 4) == 12851)
  {
    v2 = 0x100000006;
    goto LABEL_86;
  }
  if (!v4 && *(_QWORD *)a1 == 0x33706C695F756E67 && *(_BYTE *)(a1 + 8) == 50)
  {
    v2 = 0x100000007;
    goto LABEL_86;
  }
  if ((v11 & 1) == 0 && *(_DWORD *)a1 == 1701080931 && *(_WORD *)(a1 + 4) == 13873)
  {
    v2 = 0x100000008;
    goto LABEL_86;
  }
  if (a2 >= 3 && !v3 && *(_WORD *)a1 == 28263 && *(_BYTE *)(a1 + 2) == 117)
  {
    v2 = 0x100000001;
    goto LABEL_86;
  }
  if (v3)
    v16 = 1;
  else
    v16 = v8;
  if ((v16 & 1) == 0 && *(_DWORD *)a1 == 1919184481 && *(_DWORD *)(a1 + 3) == 1684631410)
  {
    v18 = a2 < 0xA;
    v2 = 0x10000000BLL;
    goto LABEL_203;
  }
  v18 = a2 < 0xA;
  if (a2 >= 0xA && !v3)
  {
    v18 = 0;
    if (*(_QWORD *)a1 == 0x696261656C73756DLL && *(_WORD *)(a1 + 8) == 26216)
    {
      v2 = 0x10000000ELL;
      goto LABEL_203;
    }
    v6 = 0;
  }
LABEL_87:
  v20 = v2 & 0x100000000;
  v21 = (v2 & 0xFF00000000) != 0 || v6;
  if ((v21 & 1) == 0 && *(_QWORD *)a1 == 0x696261656C73756DLL)
  {
    v2 = 0x10000000DLL;
LABEL_203:
    v39 = a2 < 0xD;
    goto LABEL_204;
  }
  if (v20)
    v8 = 1;
  if (!v8 && *(_DWORD *)a1 == 1819506029 && *(_DWORD *)(a1 + 3) == 842233964)
  {
    v2 = 0x10000000FLL;
    goto LABEL_203;
  }
  v23 = a2 >= 4 && v20 == 0;
  v24 = !v23;
  if (!v23)
    goto LABEL_109;
  if (*(_DWORD *)a1 == 1819506029)
  {
    v2 = 0x10000000CLL;
    goto LABEL_203;
  }
  if (*(_DWORD *)a1 == 1668707181)
  {
    v2 = 0x100000010;
    goto LABEL_203;
  }
LABEL_109:
  if (!v8 && *(_DWORD *)a1 == 1851880553 && *(_DWORD *)(a1 + 3) == 1836411246)
  {
    v2 = 0x100000011;
    goto LABEL_203;
  }
  v26 = a2 >= 6 && v20 == 0;
  v27 = !v26;
  if (v26 && *(_DWORD *)a1 == 1852275043 && *(_WORD *)(a1 + 4) == 29557)
  {
    v2 = 0x100000012;
    goto LABEL_203;
  }
  if (!v8 && *(_DWORD *)a1 == 1701998435 && *(_DWORD *)(a1 + 3) == 1919705957)
  {
    v2 = 0x100000013;
    goto LABEL_203;
  }
  if (a2 >= 9 && !v20 && *(_QWORD *)a1 == 0x6F74616C756D6973 && *(_BYTE *)(a1 + 8) == 114)
  {
    v2 = 0x100000014;
    goto LABEL_203;
  }
  if ((v27 & 1) == 0 && *(_DWORD *)a1 == 1633902957 && *(_WORD *)(a1 + 4) == 26978)
  {
    v33 = 0x100000015;
LABEL_196:
    v39 = a2 < 0xD;
    v2 = v33;
    goto LABEL_204;
  }
  if (a2 >= 0xB && !v20)
  {
    v32 = *(_QWORD *)a1 == 0x726F6674696B6975 && *(_QWORD *)(a1 + 3) == 0x63616D726F667469;
    v33 = 0x100000015;
    if (v32)
      goto LABEL_196;
  }
  if (a2 >= 5 && !v20 && *(_DWORD *)a1 == 1702390128 && *(_BYTE *)(a1 + 4) == 108)
  {
    v33 = 0x100000016;
    goto LABEL_196;
  }
  if ((v27 & 1) == 0 && *(_DWORD *)a1 == 1953654134 && *(_WORD *)(a1 + 4) == 30821)
  {
    v2 = 0x100000017;
    goto LABEL_203;
  }
  if ((v21 & 1) == 0 && *(_QWORD *)a1 == 0x797274656D6F6567)
  {
    v2 = 0x100000018;
    goto LABEL_203;
  }
  if ((v24 & 1) == 0 && *(_DWORD *)a1 == 1819047272)
  {
    v2 = 0x100000019;
    goto LABEL_203;
  }
  if ((v27 & 1) == 0 && *(_DWORD *)a1 == 1634561892 && *(_WORD *)(a1 + 4) == 28265)
  {
    v2 = 0x10000001ALL;
    goto LABEL_203;
  }
  if (v8)
    goto LABEL_177;
  if (*(_DWORD *)a1 == 1886220131 && *(_DWORD *)(a1 + 3) == 1702131056)
  {
    v2 = 0x10000001BLL;
    goto LABEL_203;
  }
  if (*(_DWORD *)a1 == 1919052140 && *(_DWORD *)(a1 + 3) == 2037539186)
  {
    v2 = 0x10000001CLL;
    goto LABEL_203;
  }
LABEL_177:
  v39 = a2 < 0xD;
  if (a2 >= 0xD && !v20)
  {
    if (*(_QWORD *)a1 == 0x72656E6567796172 && *(_QWORD *)(a1 + 5) == 0x6E6F69746172656ELL)
    {
      v2 = 0x10000001DLL;
      goto LABEL_251;
    }
    v39 = 0;
  }
LABEL_204:
  v41 = v2 & 0x100000000;
  if (a2 >= 0xC
    && !v41
    && (*(_QWORD *)a1 == 0x6365737265746E69 ? (v42 = *(_DWORD *)(a1 + 8) == 1852795252) : (v42 = 0), v42))
  {
    v2 = 0x10000001ELL;
  }
  else if (a2 >= 6
         && !v41
         && (*(_DWORD *)a1 == 1752788577 ? (v43 = *(unsigned __int16 *)(a1 + 4) == 29801) : (v43 = 0), v43))
  {
    v2 = 0x10000001FLL;
  }
  else
  {
    if (v41)
      v18 = 1;
    if (!v18
      && (*(_QWORD *)a1 == 0x68747365736F6C63 ? (v44 = *(unsigned __int16 *)(a1 + 8) == 29801) : (v44 = 0), v44))
    {
      v2 = 0x100000020;
    }
    else
    {
      v45 = a2 >= 4 && v41 == 0;
      v46 = !v45;
      if (v45 && *(_DWORD *)a1 == 1936943469)
      {
        v2 = 0x100000021;
      }
      else
      {
        if (v41)
          v6 = 1;
        if (!v6 && *(_QWORD *)a1 == 0x656C62616C6C6163)
        {
          v2 = 0x100000022;
        }
        else if ((v46 & 1) == 0 && *(_DWORD *)a1 == 1752393069)
        {
          v2 = 0x100000023;
        }
        else
        {
          if (v41)
            v47 = 1;
          else
            v47 = v39;
          if ((v47 & 1) == 0 && !(*(_QWORD *)a1 ^ 0x636966696C706D61 | *(_QWORD *)(a1 + 5) ^ 0x6E6F697461636966))
            v2 = 0x100000024;
        }
      }
    }
  }
LABEL_251:
  if ((v2 & 0xFF00000000) != 0)
    return v2;
  else
    return 0;
}

uint64_t sub_1C5E4C3BC(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;
  char v6;
  BOOL v7;
  char v8;
  BOOL v9;
  BOOL v10;

  if (a2 >= 5)
  {
    if (*(_DWORD *)(a1 + a2 - 5) ^ 0x666F6378 | *(unsigned __int8 *)(a1 + a2 - 1) ^ 0x66)
      v2 = 0;
    else
      v2 = 0x100000009;
  }
  else
  {
    v2 = 0;
  }
  if (a2 >= 4 && !HIDWORD(v2) && *(_DWORD *)(a1 + a2 - 4) == 1717989219)
    v2 = 0x100000001;
  v3 = v2 & 0x100000000;
  if (a2 >= 3 && !v3 && (*(_WORD *)(a1 + a2 - 3) == 27749 ? (v4 = *(_BYTE *)(a1 + a2 - 1) == 102) : (v4 = 0), v4))
  {
    v2 = 0x100000003;
  }
  else
  {
    v5 = a2 >= 4 && v3 == 0;
    v6 = !v5;
    if (v5 && *(_DWORD *)(a1 + a2 - 4) == 1717989223)
    {
      v2 = 0x100000004;
    }
    else
    {
      v7 = a2 >= 5 && v3 == 0;
      v8 = !v7;
      if (v7 && (*(_DWORD *)(a1 + a2 - 5) == 1751343469 ? (v9 = *(_BYTE *)(a1 + a2 - 1) == 111) : (v9 = 0), v9))
      {
        v2 = 0x100000005;
      }
      else if ((v6 & 1) == 0 && *(_DWORD *)(a1 + a2 - 4) == 1836278135)
      {
        v2 = 0x100000007;
      }
      else if ((v8 & 1) == 0
             && (*(_DWORD *)(a1 + a2 - 5) == 1919512691 ? (v10 = *(_BYTE *)(a1 + a2 - 1) == 118) : (v10 = 0), v10))
      {
        v2 = 0x100000006;
      }
      else if (a2 >= 8 && !v3 && *(_QWORD *)(a1 + a2 - 8) == 0x62696C6C6174656DLL)
      {
        v2 = 0x100000008;
      }
    }
  }
  if ((v2 & 0x300000000) != 0)
    return v2;
  else
    return 0;
}

uint64_t sub_1C5E4C56C(uint64_t a1, const void *a2, uint64_t a3, const void *a4, uint64_t a5, const void *a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, int a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v15 = sub_1C5E4FCD8(a1, a2, a3, a11);
  v16 = sub_1C5E4FCD8(v15, a4, a5, a11);
  v17 = sub_1C5E4FCD8(v16, a6, a7, a11);
  return sub_1C5E4FCD8(v17, a9, a10, a11);
}

void sub_1C5E4C5E8(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1C5E4C618()
{
  return 3;
}

void sub_1C5E4C654()
{
  JUMPOUT(0x1C5E4C648);
}

void sub_1C5E4C66C()
{
  JUMPOUT(0x1C5E4C648);
}

void sub_1C5E4C674()
{
  JUMPOUT(0x1C5E4C648);
}

void sub_1C5E4C67C()
{
  JUMPOUT(0x1C5E4C648);
}

uint64_t sub_1C5E4C684@<X0>(llvm::Triple *a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Triple *a5, uint64_t a6, __int16 a7)
{
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  llvm::Triple *ArchName;
  uint64_t v13;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v7 = *((_DWORD *)a1 + 9);
  v8 = v7 > 0x21;
  v9 = (1 << v7) & 0x3F0000888;
  if (v8 || v9 == 0)
    return sub_1C5E4C618();
  ArchName = llvm::Triple::getArchName(a1);
  a5 = ArchName;
  a6 = v13;
  a7 = 0;
  if (v13 == 17)
  {
    if (*(_QWORD *)ArchName != 0x675F757067646D61
      || *((_QWORD *)ArchName + 1) != 0x776E5F3030367866
      || *((_BYTE *)ArchName + 16) != 104)
    {
      goto LABEL_30;
    }
  }
  else
  {
    if (v13 != 13)
      goto LABEL_30;
    if ((*(_QWORD *)ArchName != 0x675F757067646D61 || *(_QWORD *)((char *)ArchName + 5) != 0x3030367866675F75)
      && (*(_QWORD *)ArchName != 0x675F757067646D61 || *(_QWORD *)((char *)ArchName + 5) != 0x3130377866675F75)
      && (*(_QWORD *)ArchName != 0x675F757067646D61 || *(_QWORD *)((char *)ArchName + 5) != 0x3430377866675F75))
    {
      goto LABEL_30;
    }
  }
  a7 = 257;
LABEL_30:
  v19 = sub_1C534A194((uint64_t)&a5, "amdgpu", 6, "amdgpu_gfx803", 13, "amdgpu_gfx802", 13, 1);
  v20 = sub_1C534A194(v19, "amdgpu_gfx900", 13, "amdgpu_gfx904", 13, "amdgpu_gfx906", 13, 1);
  v21 = sub_1C6395B7C(v20);
  if (*(_BYTE *)(v21 + 17) && *(_BYTE *)(v21 + 16))
    JUMPOUT(0x1C5E4C644);
  return sub_1C5E4C618();
}

void sub_1C5E4C748()
{
  JUMPOUT(0x1C5E4C648);
}

#error "1C5E4C808: call analysis failed (funcsize=37)"

uint64_t llvm::Triple::Triple(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  int v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  __int128 *v23;
  unint64_t v24;
  int v25;
  __int128 *v26;
  unint64_t v27;
  int v28;
  int v29;
  void *v30;
  unsigned __int16 *v31;
  uint64_t v32;
  int v33;
  int v34;
  void *v35;
  __int128 *v36;
  unint64_t v37;
  int v38;
  int v39;
  char v41;
  __int128 *v42;
  int v43;
  uint64_t v44;
  char v45;
  uint64_t *v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v9 = *(unsigned __int8 *)(a2 + 32);
  if (!*(_BYTE *)(a2 + 32))
  {
    LOWORD(v49) = 256;
LABEL_12:
    LOWORD(v52) = 256;
LABEL_24:
    LOWORD(v55) = 256;
LABEL_25:
    LOWORD(v58) = 256;
    goto LABEL_26;
  }
  if (v9 == 1)
  {
    v10 = 45;
    *(_QWORD *)&v47 = 45;
    LOWORD(v49) = 263;
    v9 = 7;
    v11 = 1;
  }
  else
  {
    v11 = 0;
    v12 = *(_BYTE *)(a2 + 33) == 1;
    if (*(_BYTE *)(a2 + 33) != 1)
      v9 = 2;
    *(_QWORD *)&v48 = 45;
    BYTE1(v49) = 7;
    v10 = *(_QWORD *)a2;
    v4 = *(_QWORD *)(a2 + 8);
    if (!v12)
      v10 = a2;
    *(_QWORD *)&v47 = v10;
    *((_QWORD *)&v47 + 1) = v4;
    LOBYTE(v49) = v9;
  }
  if (*((_BYTE *)a3 + 32) == 1)
  {
    v50 = v47;
    v51 = v48;
    v52 = v49;
    LOBYTE(v9) = v49;
    if (!(_BYTE)v49)
      goto LABEL_24;
  }
  else
  {
    if (!*((_BYTE *)a3 + 32))
      goto LABEL_12;
    if (!v11)
    {
      v9 = 2;
      v10 = (uint64_t)&v47;
    }
    v13 = *((unsigned __int8 *)a3 + 33);
    v14 = a3[1];
    if (v13 == 1)
      v15 = *((_BYTE *)a3 + 32);
    else
      v15 = 2;
    if (v13 == 1)
      v16 = (uint64_t *)*a3;
    else
      v16 = a3;
    *(_QWORD *)&v50 = v10;
    *((_QWORD *)&v50 + 1) = v4;
    *(_QWORD *)&v51 = v16;
    *((_QWORD *)&v51 + 1) = v14;
    LOBYTE(v52) = v9;
    BYTE1(v52) = v15;
    if (!v9)
      goto LABEL_24;
  }
  if (BYTE1(v52) == 1)
    v41 = v9;
  else
    v41 = 2;
  v42 = &v50;
  if (BYTE1(v52) == 1)
    v42 = (__int128 *)v50;
  *((_QWORD *)&v53 + 1) = *((_QWORD *)&v50 + 1);
  *(_QWORD *)&v54 = 45;
  BYTE1(v55) = 7;
  *(_QWORD *)&v53 = v42;
  LOBYTE(v55) = v41;
  if (*((_BYTE *)a4 + 32) == 1)
  {
    v56 = v53;
    v57 = v54;
    v58 = v55;
  }
  else
  {
    if (!*((_BYTE *)a4 + 32))
      goto LABEL_25;
    v43 = *((unsigned __int8 *)a4 + 33);
    v44 = a4[1];
    if (v43 == 1)
      v45 = *((_BYTE *)a4 + 32);
    else
      v45 = 2;
    if (v43 == 1)
      v46 = (uint64_t *)*a4;
    else
      v46 = a4;
    *(_QWORD *)&v56 = &v53;
    *((_QWORD *)&v56 + 1) = *((_QWORD *)&v50 + 1);
    *(_QWORD *)&v57 = v46;
    *((_QWORD *)&v57 + 1) = v44;
    LOBYTE(v58) = 2;
    BYTE1(v58) = v45;
  }
LABEL_26:
  llvm::Twine::str((llvm::Twine *)&v56, (_QWORD *)a1);
  llvm::Twine::str((llvm::Twine *)a2, &v56);
  if ((SBYTE7(v57) & 0x80u) == 0)
    v23 = &v56;
  else
    v23 = (__int128 *)v56;
  if ((SBYTE7(v57) & 0x80u) == 0)
    v24 = BYTE7(v57) & 0x7F;
  else
    v24 = *((_QWORD *)&v56 + 1);
  v25 = sub_1C5E49140((uint64_t)v23, v24, v17, v18, v19, v20, v21, v22);
  if (SBYTE7(v57) < 0)
    operator delete((void *)v56);
  *(_DWORD *)(a1 + 24) = v25;
  llvm::Twine::str((llvm::Twine *)a2, &v56);
  if ((SBYTE7(v57) & 0x80u) == 0)
    v26 = &v56;
  else
    v26 = (__int128 *)v56;
  if ((SBYTE7(v57) & 0x80u) == 0)
    v27 = BYTE7(v57) & 0x7F;
  else
    v27 = *((_QWORD *)&v56 + 1);
  v28 = sub_1C5E4AF48((uint64_t)v26, v27);
  if (SBYTE7(v57) < 0)
    operator delete((void *)v56);
  *(_DWORD *)(a1 + 28) = v28;
  llvm::Twine::str((llvm::Twine *)a3, &v56);
  v29 = SBYTE7(v57);
  v30 = (void *)v56;
  if ((SBYTE7(v57) & 0x80u) == 0)
    v31 = (unsigned __int16 *)&v56;
  else
    v31 = (unsigned __int16 *)v56;
  if ((SBYTE7(v57) & 0x80u) == 0)
    v32 = BYTE7(v57);
  else
    v32 = *((_QWORD *)&v56 + 1);
  v33 = sub_1C5E4B170(v31, v32);
  if (v29 < 0)
    operator delete(v30);
  *(_DWORD *)(a1 + 32) = v33;
  llvm::Twine::str((llvm::Twine *)a4, &v56);
  v34 = SBYTE7(v57);
  v35 = (void *)v56;
  if ((SBYTE7(v57) & 0x80u) == 0)
    v36 = &v56;
  else
    v36 = (__int128 *)v56;
  if ((SBYTE7(v57) & 0x80u) == 0)
    v37 = BYTE7(v57);
  else
    v37 = *((_QWORD *)&v56 + 1);
  v38 = sub_1C5E4B3B0((uint64_t)v36, v37);
  if (v34 < 0)
    operator delete(v35);
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 36) = v38;
  sub_1C5E4C5E8(a1);
  *(_DWORD *)(a1 + 44) = v39;
  return a1;
}

uint64_t llvm::Triple::Triple(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  int v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  int v15;
  BOOL v16;
  __int128 *v17;
  int v18;
  uint64_t v19;
  BOOL v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  __int128 *v29;
  unint64_t v30;
  int v31;
  __int128 *v32;
  unint64_t v33;
  int v34;
  int v35;
  void *v36;
  unsigned __int16 *v37;
  uint64_t v38;
  int v39;
  int v40;
  void *v41;
  __int128 *v42;
  unint64_t v43;
  int v44;
  int v45;
  void *v46;
  __int128 *v47;
  unint64_t v48;
  int v49;
  int v50;
  void *v51;
  __int128 *v52;
  unint64_t v53;
  int v54;
  int v55;
  char v57;
  __int128 *v58;
  char v59;
  int v60;
  uint64_t v61;
  char v62;
  uint64_t *v63;
  __int128 *v64;
  int v65;
  uint64_t v66;
  char v67;
  uint64_t *v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;

  v11 = *(unsigned __int8 *)(a2 + 32);
  if (!*(_BYTE *)(a2 + 32))
  {
    LOWORD(v71) = 256;
LABEL_12:
    LOWORD(v74) = 256;
LABEL_27:
    LOWORD(v77) = 256;
LABEL_28:
    LOWORD(v80) = 256;
LABEL_29:
    LOWORD(v83) = 256;
LABEL_30:
    LOWORD(v86) = 256;
    goto LABEL_31;
  }
  if (v11 == 1)
  {
    v12 = 45;
    *(_QWORD *)&v69 = 45;
    LOWORD(v71) = 263;
    v11 = 7;
    v13 = 1;
  }
  else
  {
    v13 = 0;
    v14 = *(_BYTE *)(a2 + 33) == 1;
    if (*(_BYTE *)(a2 + 33) != 1)
      v11 = 2;
    *(_QWORD *)&v70 = 45;
    BYTE1(v71) = 7;
    v12 = *(_QWORD *)a2;
    v5 = *(_QWORD *)(a2 + 8);
    if (!v14)
      v12 = a2;
    *(_QWORD *)&v69 = v12;
    *((_QWORD *)&v69 + 1) = v5;
    LOBYTE(v71) = v11;
  }
  if (*((_BYTE *)a3 + 32) == 1)
  {
    v72 = v69;
    v73 = v70;
    v74 = v71;
    LOBYTE(v15) = v71;
    if (!(_BYTE)v71)
      goto LABEL_27;
  }
  else
  {
    if (!*((_BYTE *)a3 + 32))
      goto LABEL_12;
    v16 = v13 == 0;
    if (v13)
      v15 = v11;
    else
      v15 = 2;
    v17 = &v69;
    if (!v16)
      v17 = (__int128 *)v12;
    v18 = *((unsigned __int8 *)a3 + 33);
    v19 = a3[1];
    v20 = v18 == 1;
    if (v18 == 1)
      v21 = *((_BYTE *)a3 + 32);
    else
      v21 = 2;
    if (v20)
      v22 = (uint64_t *)*a3;
    else
      v22 = a3;
    *(_QWORD *)&v72 = v17;
    *((_QWORD *)&v72 + 1) = v5;
    *(_QWORD *)&v73 = v22;
    *((_QWORD *)&v73 + 1) = v19;
    LOBYTE(v74) = v15;
    BYTE1(v74) = v21;
    if (!v15)
      goto LABEL_27;
  }
  if (BYTE1(v74) == 1)
    v57 = v15;
  else
    v57 = 2;
  if (BYTE1(v74) == 1)
    v58 = (__int128 *)v72;
  else
    v58 = &v72;
  *((_QWORD *)&v75 + 1) = *((_QWORD *)&v72 + 1);
  *(_QWORD *)&v76 = 45;
  BYTE1(v77) = 7;
  *(_QWORD *)&v75 = v58;
  LOBYTE(v77) = v57;
  if (*((_BYTE *)a4 + 32) == 1)
  {
    v78 = v75;
    v79 = v76;
    v80 = v77;
    v59 = v77;
    if (!(_BYTE)v77)
      goto LABEL_29;
  }
  else
  {
    if (!*((_BYTE *)a4 + 32))
      goto LABEL_28;
    v59 = 2;
    v60 = *((unsigned __int8 *)a4 + 33);
    v61 = a4[1];
    if (v60 == 1)
      v62 = *((_BYTE *)a4 + 32);
    else
      v62 = 2;
    if (v60 == 1)
      v63 = (uint64_t *)*a4;
    else
      v63 = a4;
    *(_QWORD *)&v78 = &v75;
    *((_QWORD *)&v78 + 1) = *((_QWORD *)&v72 + 1);
    *(_QWORD *)&v79 = v63;
    *((_QWORD *)&v79 + 1) = v61;
    LOBYTE(v80) = 2;
    BYTE1(v80) = v62;
  }
  if (BYTE1(v80) != 1)
    v59 = 2;
  v64 = &v78;
  if (BYTE1(v80) == 1)
    v64 = (__int128 *)v78;
  *((_QWORD *)&v81 + 1) = *((_QWORD *)&v78 + 1);
  *(_QWORD *)&v82 = 45;
  BYTE1(v83) = 7;
  *(_QWORD *)&v81 = v64;
  LOBYTE(v83) = v59;
  if (*((_BYTE *)a5 + 32) == 1)
  {
    v84 = v81;
    v85 = v82;
    v86 = v83;
  }
  else
  {
    if (!*((_BYTE *)a5 + 32))
      goto LABEL_30;
    v65 = *((unsigned __int8 *)a5 + 33);
    v66 = a5[1];
    if (v65 == 1)
      v67 = *((_BYTE *)a5 + 32);
    else
      v67 = 2;
    if (v65 == 1)
      v68 = (uint64_t *)*a5;
    else
      v68 = a5;
    *(_QWORD *)&v84 = &v81;
    *((_QWORD *)&v84 + 1) = *((_QWORD *)&v78 + 1);
    *(_QWORD *)&v85 = v68;
    *((_QWORD *)&v85 + 1) = v66;
    LOBYTE(v86) = 2;
    BYTE1(v86) = v67;
  }
LABEL_31:
  llvm::Twine::str((llvm::Twine *)&v84, (_QWORD *)a1);
  llvm::Twine::str((llvm::Twine *)a2, &v84);
  if ((SBYTE7(v85) & 0x80u) == 0)
    v29 = &v84;
  else
    v29 = (__int128 *)v84;
  if ((SBYTE7(v85) & 0x80u) == 0)
    v30 = BYTE7(v85) & 0x7F;
  else
    v30 = *((_QWORD *)&v84 + 1);
  v31 = sub_1C5E49140((uint64_t)v29, v30, v23, v24, v25, v26, v27, v28);
  if (SBYTE7(v85) < 0)
    operator delete((void *)v84);
  *(_DWORD *)(a1 + 24) = v31;
  llvm::Twine::str((llvm::Twine *)a2, &v84);
  if ((SBYTE7(v85) & 0x80u) == 0)
    v32 = &v84;
  else
    v32 = (__int128 *)v84;
  if ((SBYTE7(v85) & 0x80u) == 0)
    v33 = BYTE7(v85) & 0x7F;
  else
    v33 = *((_QWORD *)&v84 + 1);
  v34 = sub_1C5E4AF48((uint64_t)v32, v33);
  if (SBYTE7(v85) < 0)
    operator delete((void *)v84);
  *(_DWORD *)(a1 + 28) = v34;
  llvm::Twine::str((llvm::Twine *)a3, &v84);
  v35 = SBYTE7(v85);
  v36 = (void *)v84;
  if ((SBYTE7(v85) & 0x80u) == 0)
    v37 = (unsigned __int16 *)&v84;
  else
    v37 = (unsigned __int16 *)v84;
  if ((SBYTE7(v85) & 0x80u) == 0)
    v38 = BYTE7(v85);
  else
    v38 = *((_QWORD *)&v84 + 1);
  v39 = sub_1C5E4B170(v37, v38);
  if (v35 < 0)
    operator delete(v36);
  *(_DWORD *)(a1 + 32) = v39;
  llvm::Twine::str((llvm::Twine *)a4, &v84);
  v40 = SBYTE7(v85);
  v41 = (void *)v84;
  if ((SBYTE7(v85) & 0x80u) == 0)
    v42 = &v84;
  else
    v42 = (__int128 *)v84;
  if ((SBYTE7(v85) & 0x80u) == 0)
    v43 = BYTE7(v85);
  else
    v43 = *((_QWORD *)&v84 + 1);
  v44 = sub_1C5E4B3B0((uint64_t)v42, v43);
  if (v40 < 0)
    operator delete(v41);
  *(_DWORD *)(a1 + 36) = v44;
  llvm::Twine::str((llvm::Twine *)a5, &v84);
  v45 = SBYTE7(v85);
  v46 = (void *)v84;
  if ((SBYTE7(v85) & 0x80u) == 0)
    v47 = &v84;
  else
    v47 = (__int128 *)v84;
  if ((SBYTE7(v85) & 0x80u) == 0)
    v48 = BYTE7(v85);
  else
    v48 = *((_QWORD *)&v84 + 1);
  v49 = sub_1C5E4BBF4((uint64_t)v47, v48);
  if (v45 < 0)
    operator delete(v46);
  *(_DWORD *)(a1 + 40) = v49;
  llvm::Twine::str((llvm::Twine *)a5, &v84);
  v50 = SBYTE7(v85);
  v51 = (void *)v84;
  if ((SBYTE7(v85) & 0x80u) == 0)
    v52 = &v84;
  else
    v52 = (__int128 *)v84;
  if ((SBYTE7(v85) & 0x80u) == 0)
    v53 = BYTE7(v85);
  else
    v53 = *((_QWORD *)&v84 + 1);
  v54 = sub_1C5E4C3BC((uint64_t)v52, v53);
  if (v50 < 0)
    operator delete(v51);
  *(_DWORD *)(a1 + 44) = v54;
  if (!v54)
  {
    sub_1C5E4C5E8(a1);
    *(_DWORD *)(a1 + 44) = v55;
  }
  return a1;
}

void llvm::Triple::normalize(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  BOOL v26;
  unint64_t v27;
  const char *v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  _BOOL4 v36;
  uint64_t v37;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::string::size_type v44;
  char *v45;
  char *v46;
  const std::string::value_type *v47;
  std::string::size_type v48;
  _BOOL4 v51;
  void **v52;
  uint64_t v53;
  _QWORD *v54;
  std::string *v55;
  unsigned int v56;
  int v57;
  unint64_t v58;
  _QWORD v59[4];
  __int16 v60;
  __int128 v61;
  int64_t v62;
  void *__p[2];
  uint64_t v64;
  _BYTE v65[4];
  _QWORD v66[2];
  void *v67;
  uint64_t v68;
  _QWORD v69[10];

  v69[8] = *MEMORY[0x1E0C80C00];
  v66[0] = a1;
  v66[1] = a2;
  v67 = v69;
  v68 = 0x400000000;
  llvm::StringRef::split((char *)v66, (uint64_t)&v67, 45, -1, 1);
  v55 = a3;
  if (!(_DWORD)v68)
  {
    v14 = 0;
    v13 = 0;
    v10 = 0;
    goto LABEL_7;
  }
  v10 = sub_1C5E49140(*(_QWORD *)v67, *((_QWORD *)v67 + 1), v4, v5, v6, v7, v8, v9);
  v11 = v68;
  if (v68 < 2)
  {
    v14 = 0;
    v13 = 0;
    goto LABEL_7;
  }
  v12 = v67;
  v13 = sub_1C5E4B170(*((unsigned __int16 **)v67 + 2), *((_QWORD *)v67 + 3));
  if (v11 != 2)
  {
    v33 = v12[4];
    v34 = v12[5];
    v35 = sub_1C5E4B3B0(v33, v34);
    if (v34 >= 6)
    {
      v36 = *(_DWORD *)v33 == 2003269987 && *(_WORD *)(v33 + 4) == 28265;
    }
    else
    {
      v36 = 0;
      v58 = 0;
      if (v34 != 5)
        goto LABEL_84;
    }
    v51 = *(_DWORD *)v33 == 1735289197 && *(_BYTE *)(v33 + 4) == 119;
    v58 = __PAIR64__(v36, v51);
LABEL_84:
    if (v11 < 4)
    {
      v14 = 0;
    }
    else
    {
      v14 = sub_1C5E4BBF4(v12[6], v12[7]);
      if (v11 != 4)
      {
        v56 = sub_1C5E4C3BC(v12[8], v12[9]);
LABEL_89:
        v15 = v35;
        goto LABEL_8;
      }
    }
    v56 = 0;
    goto LABEL_89;
  }
  v14 = 0;
LABEL_7:
  v15 = 0;
  v58 = 0;
  v56 = 0;
LABEL_8:
  v16 = 0;
  v65[0] = v10 != 0;
  v65[1] = v13 != 0;
  v57 = v15;
  v65[2] = v15 != 0;
  v65[3] = v14 != 0;
  do
  {
    if (v65[v16])
      v17 = 1;
    else
      v17 = (_DWORD)v68 == 0;
    if (!v17)
    {
      v18 = 0;
      v19 = 0;
      do
      {
        if (v19 > 3 || !v65[v18])
          __asm { BR              X9 }
        v18 = v19 + 1;
        v19 = v18;
      }
      while ((_DWORD)v18 != (_DWORD)v68);
    }
    ++v16;
  }
  while (v16 != 4);
  if ((_DWORD)v68)
  {
    v20 = 16 * v68;
    v21 = (char *)v67 + 8;
    do
    {
      if (!*v21)
      {
        *(v21 - 1) = "unknown";
        *v21 = 7;
      }
      v21 += 2;
      v20 -= 16;
    }
    while (v20);
  }
  __p[0] = 0;
  __p[1] = 0;
  v64 = 0;
  if (v14 != 11)
  {
    if (v13 != 13 || v14 != 4)
      goto LABEL_37;
    v22 = v67;
    v28 = "gnueabihf";
    v29 = 9;
LABEL_36:
    v22[6] = v28;
    v22[7] = v29;
    goto LABEL_37;
  }
  v22 = v67;
  v23 = *((_QWORD *)v67 + 7);
  if (v23 < 0xB)
    goto LABEL_37;
  v24 = (_QWORD *)*((_QWORD *)v67 + 6);
  if (*v24 != 0x6564696F72646E61 || *(_QWORD *)((char *)v24 + 3) != 0x6962616564696F72)
    goto LABEL_37;
  v26 = v23 > 0xB;
  v27 = v23 - 11;
  if (!v26)
  {
    v28 = "android";
    v29 = 7;
    goto LABEL_36;
  }
  v60 = 1283;
  v59[0] = "android";
  v59[2] = (char *)v24 + 11;
  v59[3] = v27;
  llvm::Twine::str((llvm::Twine *)v59, &v61);
  if (SHIBYTE(v64) < 0)
    operator delete(__p[0]);
  v64 = v62;
  *(_OWORD *)__p = v61;
  v52 = __p;
  if (v62 < 0)
    v52 = (void **)v61;
  v53 = HIBYTE(v62) & 0x7F;
  if (v62 < 0)
    v53 = *((_QWORD *)&v61 + 1);
  v54 = v67;
  *((_QWORD *)v67 + 6) = v52;
  v54[7] = v53;
LABEL_37:
  v30 = v57;
  if (v57 != 15)
  {
    if ((v58 & 1) != 0)
    {
      sub_1C53F8EE0((uint64_t)&v67, 4uLL);
      v31 = v67;
      *((_QWORD *)v67 + 4) = "windows";
      v31[5] = 7;
      v31[6] = "gnu";
      v32 = 3;
    }
    else
    {
      if ((v58 & 0x100000000) == 0)
        goto LABEL_50;
      sub_1C53F8EE0((uint64_t)&v67, 4uLL);
      v31 = v67;
      *((_QWORD *)v67 + 4) = "windows";
      v31[5] = 7;
      v31[6] = "cygnus";
      v32 = 6;
    }
LABEL_49:
    v31[7] = v32;
    v30 = v57;
    goto LABEL_50;
  }
  sub_1C53F8EE0((uint64_t)&v67, 4uLL);
  v31 = v67;
  *((_QWORD *)v67 + 4) = "windows";
  v31[5] = 7;
  v30 = 15;
  if (!v14)
  {
    if (v56 <= 1)
    {
      v31[6] = "msvc";
      v31[7] = 4;
      goto LABEL_60;
    }
    v37 = (int)v56 - 2;
    v32 = qword_1C8670B10[v37];
    v31[6] = off_1E81A3F88[(int)v37];
    goto LABEL_49;
  }
LABEL_50:
  v39 = v30 == 15 && v14 != 0;
  if (((v58 | HIDWORD(v58) | v39) & 1) != 0 && v56 > 1)
  {
    sub_1C53F8EE0((uint64_t)&v67, 5uLL);
    v40 = (int)v56 - 2;
    v41 = qword_1C8670B10[v40];
    v31 = v67;
    *((_QWORD *)v67 + 8) = off_1E81A3F88[(int)v40];
    v31[9] = v41;
  }
  else
  {
    v31 = v67;
  }
LABEL_60:
  v42 = v68;
  v55->__r_.__value_.__l.__size_ = 0;
  v55->__r_.__value_.__r.__words[2] = 0;
  v55->__r_.__value_.__r.__words[0] = 0;
  if ((_DWORD)v42)
  {
    v43 = 0;
    v44 = v42 - 1;
    v45 = (char *)&v31[2 * v42];
    do
    {
      v44 += v31[v43 + 1];
      v43 += 2;
    }
    while (2 * v42 != v43);
    std::string::reserve(v55, v44);
    std::string::append(v55, (const std::string::value_type *)*v31, v31[1]);
    if ((_DWORD)v42 != 1)
    {
      v46 = (char *)(v31 + 2);
      do
      {
        std::string::append(v55, "-", 1uLL);
        v47 = *(const std::string::value_type **)v46;
        v48 = *((_QWORD *)v46 + 1);
        v46 += 16;
        std::string::append(v55, v47, v48);
      }
      while (v46 != v45);
    }
  }
  if (SHIBYTE(v64) < 0)
    operator delete(__p[0]);
  if (v67 != v69)
    free(v67);
}

llvm::Triple *llvm::Triple::getArchName(llvm::Triple *this)
{
  char v1;
  BOOL v2;
  llvm::Triple *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];
  char v8;

  v1 = *((_BYTE *)this + 23);
  v2 = v1 < 0;
  if (v1 >= 0)
    v3 = this;
  else
    v3 = *(llvm::Triple **)this;
  v4 = v1 & 0x7F;
  if (v2)
    v5 = *((_QWORD *)this + 1);
  else
    v5 = v4;
  v7[0] = (uint64_t)v3;
  v7[1] = v5;
  v8 = 45;
  llvm::StringRef::find(v7, &v8, 1uLL, 0);
  return v3;
}

uint64_t llvm::Triple::getVendorName(llvm::Triple *this)
{
  char v1;
  BOOL v2;
  llvm::Triple *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[2];
  uint64_t v13[2];

  v1 = *((_BYTE *)this + 23);
  v2 = v1 < 0;
  if (v1 >= 0)
    v3 = this;
  else
    v3 = *(llvm::Triple **)this;
  v4 = v1 & 0x7F;
  if (v2)
    v5 = *((_QWORD *)this + 1);
  else
    v5 = v4;
  v12[0] = (uint64_t)v3;
  v12[1] = v5;
  LOBYTE(v13[0]) = 45;
  v6 = llvm::StringRef::find(v12, (char *)v13, 1uLL, 0);
  v7 = v6 + 1;
  if (v5 < v6 + 1)
    v7 = v5;
  if (v6 == -1)
    v8 = 0;
  else
    v8 = (uint64_t)v3 + v7;
  v9 = v5 - v7;
  if (v6 == -1)
    v10 = 0;
  else
    v10 = v9;
  v13[0] = v8;
  v13[1] = v10;
  LOBYTE(v12[0]) = 45;
  llvm::StringRef::find(v13, (char *)v12, 1uLL, 0);
  return v8;
}

uint64_t llvm::Triple::getOSName(llvm::Triple *this)
{
  char v1;
  BOOL v2;
  llvm::Triple *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17[2];
  uint64_t v18;
  unint64_t v19;

  v1 = *((_BYTE *)this + 23);
  v2 = v1 < 0;
  if (v1 >= 0)
    v3 = this;
  else
    v3 = *(llvm::Triple **)this;
  v4 = v1 & 0x7F;
  if (v2)
    v5 = *((_QWORD *)this + 1);
  else
    v5 = v4;
  v17[0] = (uint64_t)v3;
  v17[1] = v5;
  LOBYTE(v18) = 45;
  v6 = llvm::StringRef::find(v17, (char *)&v18, 1uLL, 0);
  v7 = v6 + 1;
  if (v5 < v6 + 1)
    v7 = v5;
  if (v6 == -1)
    v8 = 0;
  else
    v8 = (uint64_t)v3 + v7;
  v9 = v5 - v7;
  if (v6 == -1)
    v10 = 0;
  else
    v10 = v9;
  v18 = v8;
  v19 = v10;
  LOBYTE(v17[0]) = 45;
  v11 = llvm::StringRef::find(&v18, (char *)v17, 1uLL, 0);
  v12 = v11 + 1;
  if (v10 < v11 + 1)
    v12 = v10;
  if (v11 == -1)
    v13 = 0;
  else
    v13 = v8 + v12;
  v14 = v10 - v12;
  if (v11 == -1)
    v15 = 0;
  else
    v15 = v14;
  v18 = v13;
  v19 = v15;
  LOBYTE(v17[0]) = 45;
  llvm::StringRef::find(&v18, (char *)v17, 1uLL, 0);
  return v13;
}

unint64_t llvm::Triple::getEnvironmentName(llvm::Triple *this)
{
  char v1;
  BOOL v2;
  llvm::Triple *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20[2];
  uint64_t v21;
  unint64_t v22;

  v1 = *((_BYTE *)this + 23);
  v2 = v1 < 0;
  if (v1 >= 0)
    v3 = this;
  else
    v3 = *(llvm::Triple **)this;
  v4 = v1 & 0x7F;
  if (v2)
    v5 = *((_QWORD *)this + 1);
  else
    v5 = v4;
  v20[0] = (uint64_t)v3;
  v20[1] = v5;
  LOBYTE(v21) = 45;
  v6 = llvm::StringRef::find(v20, (char *)&v21, 1uLL, 0);
  v7 = v6 + 1;
  if (v5 < v6 + 1)
    v7 = v5;
  if (v6 == -1)
    v8 = 0;
  else
    v8 = (uint64_t)v3 + v7;
  v9 = v5 - v7;
  if (v6 == -1)
    v10 = 0;
  else
    v10 = v9;
  v21 = v8;
  v22 = v10;
  LOBYTE(v20[0]) = 45;
  v11 = llvm::StringRef::find(&v21, (char *)v20, 1uLL, 0);
  v12 = v11 + 1;
  if (v10 < v11 + 1)
    v12 = v10;
  if (v11 == -1)
    v13 = 0;
  else
    v13 = v8 + v12;
  v14 = v10 - v12;
  if (v11 == -1)
    v15 = 0;
  else
    v15 = v14;
  v21 = v13;
  v22 = v15;
  LOBYTE(v20[0]) = 45;
  v16 = llvm::StringRef::find(&v21, (char *)v20, 1uLL, 0);
  if (v15 >= v16 + 1)
    v17 = v16 + 1;
  else
    v17 = v15;
  v18 = v13 + v17;
  if (v16 == -1)
    return 0;
  return v18;
}

unint64_t llvm::Triple::getOSAndEnvironmentName(llvm::Triple *this)
{
  char v1;
  BOOL v2;
  llvm::Triple *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15[2];
  uint64_t v16[2];

  v1 = *((_BYTE *)this + 23);
  v2 = v1 < 0;
  if (v1 >= 0)
    v3 = this;
  else
    v3 = *(llvm::Triple **)this;
  v4 = v1 & 0x7F;
  if (v2)
    v5 = *((_QWORD *)this + 1);
  else
    v5 = v4;
  v15[0] = (uint64_t)v3;
  v15[1] = v5;
  LOBYTE(v16[0]) = 45;
  v6 = llvm::StringRef::find(v15, (char *)v16, 1uLL, 0);
  v7 = v6 + 1;
  if (v5 < v6 + 1)
    v7 = v5;
  if (v6 == -1)
    v8 = 0;
  else
    v8 = (uint64_t)v3 + v7;
  v9 = v5 - v7;
  if (v6 == -1)
    v10 = 0;
  else
    v10 = v9;
  v16[0] = v8;
  v16[1] = v10;
  LOBYTE(v15[0]) = 45;
  v11 = llvm::StringRef::find(v16, (char *)v15, 1uLL, 0);
  if (v10 >= v11 + 1)
    v12 = v11 + 1;
  else
    v12 = v10;
  v13 = v8 + v12;
  if (v11 == -1)
    return 0;
  return v13;
}

unint64_t llvm::Triple::getEnvironmentVersion(llvm::Triple *this)
{
  _WORD *EnvironmentName;
  unint64_t v3;
  unint64_t v4;
  size_t v5;
  char *EnvironmentTypeName;
  size_t v7;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;

  EnvironmentName = (_WORD *)llvm::Triple::getEnvironmentName(this);
  v4 = v3;
  EnvironmentTypeName = llvm::Triple::getEnvironmentTypeName(*((_DWORD *)this + 10));
  v7 = v5;
  if (v4 >= v5 && (!v5 || !memcmp(EnvironmentName, EnvironmentTypeName, v5)))
  {
    if (v4 >= v7)
      v10 = v7;
    else
      v10 = v4;
    EnvironmentName = (_WORD *)((char *)EnvironmentName + v10);
    v4 -= v10;
  }
  else if (v7 == 11
         && v4 >= 6
         && !(*(_QWORD *)EnvironmentTypeName ^ 0x6C6174616363616DLL | *(_QWORD *)(EnvironmentTypeName + 3) ^ 0x7473796C61746163)
         && *(_DWORD *)EnvironmentName == 1633902957
         && EnvironmentName[2] == 26978)
  {
    EnvironmentName += 3;
    v4 -= 6;
  }
  v12 = 0;
  v13 = 0;
  llvm::VersionTuple::tryParse(&v12, (unsigned __int8 *)EnvironmentName, v4);
  if (v13 >= 0)
    return v12;
  else
    return v12 | 0x8000000000000000;
}

unint64_t llvm::Triple::getOSVersion(llvm::Triple *this)
{
  char *OSName;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  char *OSTypeName;
  size_t v7;
  size_t v8;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  llvm::Triple *ArchName;
  unint64_t v16;
  BOOL v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD v31[2];
  uint64_t AIRVersion;
  uint64_t v33;

  OSName = (char *)llvm::Triple::getOSName(this);
  v4 = v3;
  v5 = *((_DWORD *)this + 9);
  OSTypeName = llvm::Triple::getOSTypeName((llvm::Triple *)v5);
  if (v4 >= v7 && ((v8 = v7) == 0 || !memcmp(OSName, OSTypeName, v7)))
  {
    if (v4 >= v8)
      v12 = v8;
    else
      v12 = v4;
    OSName += v12;
    v4 -= v12;
  }
  else if (v5 == 11 && v4 >= 5 && *(_DWORD *)OSName == 1868783981 && OSName[4] == 115)
  {
    OSName += 5;
    v4 -= 5;
  }
  AIRVersion = 0;
  v33 = 0;
  llvm::VersionTuple::tryParse((unint64_t *)&AIRVersion, (unsigned __int8 *)OSName, v4);
  if (v33 >= 0)
    v13 = AIRVersion;
  else
    v13 = AIRVersion | 0x8000000000000000;
  if (v33 >= 0)
    v14 = v33;
  else
    v14 = v33 & 0x7FFFFFFF | 0x80000000;
  if ((*((_DWORD *)this + 6) & 0xFFFFFFFE) == 0x30 && !(v13 & 0x7FFFFFFFFFFFFFFFLL | v14 & 0x7FFFFFFF7FFFFFFFLL))
  {
    ArchName = llvm::Triple::getArchName(this);
    if (v16 >= 7)
    {
      v17 = *(_DWORD *)ArchName == 863136097 && *(_DWORD *)((char *)ArchName + 3) == 1985950259;
      if (v17
        || (*(_DWORD *)ArchName == 913467745 ? (v18 = *(_DWORD *)((char *)ArchName + 3) == 1985950774) : (v18 = 0), v18))
      {
        AIRVersion = llvm::Triple::getAIRVersion(this);
        v33 = v19;
        v20 = *((_DWORD *)this + 9);
        if (v20 > 27)
        {
          if (v20 != 28)
          {
            if (v20 != 29)
            {
              if (AIRVersion >= 0)
                v13 = 1;
              else
                v13 = (HIDWORD(AIRVersion) & 0x7FFFFFFFu) - 5;
              goto LABEL_69;
            }
            if (!(AIRVersion & 0x7FFFFFFFFFFFFFFFLL ^ 0xB00000001 | v33 & 0x7FFFFFFF7FFFFFFFLL))
            {
              v13 = 3;
              goto LABEL_69;
            }
            v24 = (HIDWORD(AIRVersion) & 0x7FFFFFFF) + 4;
            v27 = AIRVersion >= 0;
            v28 = 4;
LABEL_66:
            if (v27)
              v13 = v28;
            else
              v13 = v24;
            goto LABEL_69;
          }
          v21 = AIRVersion;
          if ((_DWORD)AIRVersion != 1)
            goto LABEL_53;
          v22 = v33 & 0x7FFFFFFF7FFFFFFFLL;
          v23 = AIRVersion & 0x7FFFFFFF00000000;
          goto LABEL_50;
        }
        if (v20 == 7)
        {
          v21 = AIRVersion;
          if ((_DWORD)AIRVersion != 1)
          {
LABEL_53:
            v24 = (HIDWORD(v21) & 0x7FFFFFFF) + 11;
LABEL_65:
            v27 = v21 >= 0;
            v28 = 11;
            goto LABEL_66;
          }
          v22 = v33 & 0x7FFFFFFF7FFFFFFFLL;
          v23 = AIRVersion & 0x7FFFFFFF00000000;
          if (!(AIRVersion & 0x7FFFFFFF00000000 ^ 0x600000000 | v33 & 0x7FFFFFFF7FFFFFFFLL))
          {
            v13 = 8;
            goto LABEL_69;
          }
LABEL_50:
          if (!(v23 ^ 0x800000000 | v22))
          {
            v13 = 9;
            goto LABEL_69;
          }
          if (!(v23 ^ 0xB00000000 | v22))
          {
            v13 = 10;
            goto LABEL_69;
          }
          goto LABEL_53;
        }
        if ((_DWORD)AIRVersion == 1)
        {
          if (!(AIRVersion & 0x7FFFFFFF00000000 ^ 0x800000000 | v33 & 0x7FFFFFFF7FFFFFFFLL))
          {
            v25 = 0xB0000000ALL;
            goto LABEL_78;
          }
          if (!(AIRVersion & 0x7FFFFFFF00000000 ^ 0xB00000000 | v33 & 0x7FFFFFFF7FFFFFFFLL))
          {
            v25 = 0xC0000000ALL;
LABEL_78:
            v13 = v25 & 0xFFFFFFFFFFFFLL | 0x8000000000000000;
            goto LABEL_69;
          }
        }
        v31[0] = 0x8000000300000002;
        v31[1] = 0;
        v26 = sub_1C4F7A4D8(&AIRVersion, v31);
        v21 = AIRVersion;
        if (v26)
        {
          v24 = ((AIRVersion & 0x7FFFFFFF00000000) + 0xD00000000) | 0x800000000000000ALL;
          v27 = AIRVersion >= 0;
          v28 = 0x8000000D0000000ALL;
          goto LABEL_66;
        }
        v24 = (HIDWORD(AIRVersion) & 0x7FFFFFFF) + 8;
        goto LABEL_65;
      }
    }
  }
LABEL_69:
  if ((_DWORD)v13)
    v29 = v13;
  else
    v29 = v13 & 0x7FFFFFFF00000000 | 0x8000000000000001;
  if (*((_DWORD *)this + 9) == 32)
    return v29;
  else
    return v13;
}

uint64_t llvm::Triple::getAIRVersion(llvm::Triple *this)
{
  llvm::Triple *ArchName;
  unint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int isMacOSXVersionLT;
  uint64_t v23;
  llvm::Triple *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t OSVersion;
  uint64_t v29;

  ArchName = llvm::Triple::getArchName(this);
  if (v3 >= 5)
    v4 = 5;
  else
    v4 = v3;
  v5 = (char *)ArchName + v4;
  v6 = v3 - v4;
  if (v6 == 5)
  {
    if (bswap32(*(_DWORD *)v5) == 1601581361 && v5[4] == 49)
      return 0x8000000B00000001;
    goto LABEL_19;
  }
  if (v6 != 4)
    goto LABEL_19;
  result = 0x8000000600000002;
  switch(*(_DWORD *)v5)
  {
    case 0x3631765F:
      return 0x8000000600000001;
    case 0x3831765F:
      return 0x8000000800000001;
    case 0x3032765F:
      v8 = 2;
      return v8 & 0xFFFFFFFFFFFFLL | 0x8000000000000000;
    case 0x3132765F:
      v8 = 0x100000002;
      return v8 & 0xFFFFFFFFFFFFLL | 0x8000000000000000;
    case 0x3232765F:
      v8 = 0x200000002;
      return v8 & 0xFFFFFFFFFFFFLL | 0x8000000000000000;
    case 0x3332765F:
      v8 = 0x300000002;
      return v8 & 0xFFFFFFFFFFFFLL | 0x8000000000000000;
    case 0x3432765F:
      v8 = 0x400000002;
      return v8 & 0xFFFFFFFFFFFFLL | 0x8000000000000000;
    case 0x3532765F:
      v8 = 0x500000002;
      return v8 & 0xFFFFFFFFFFFFLL | 0x8000000000000000;
  }
  if (*(_DWORD *)v5 != 909276767)
  {
    if (*(_DWORD *)v5 == 926053983)
    {
      v8 = 0x700000002;
      return v8 & 0xFFFFFFFFFFFFLL | 0x8000000000000000;
    }
LABEL_19:
    v9 = *((_DWORD *)this + 9);
    if (v9 > 27)
    {
      if (v9 == 28)
      {
        OSVersion = llvm::Triple::getOSVersion(this);
        v29 = v18;
        v26 = 10;
        v27 = 0;
        if ((sub_1C4F7A4D8(&OSVersion, &v26) & 1) != 0)
          goto LABEL_54;
        OSVersion = llvm::Triple::getOSVersion(this);
        v29 = v19;
        v26 = 11;
        v27 = 0;
        if ((sub_1C4F7A4D8(&OSVersion, &v26) & 1) != 0)
          goto LABEL_44;
        OSVersion = llvm::Triple::getOSVersion(this);
        v29 = v23;
        v26 = 12;
        v27 = 0;
        if ((sub_1C4F7A4D8(&OSVersion, &v26) & 1) != 0)
          goto LABEL_57;
        if ((sub_1C63957A4(this, 0xDu, 0, 0) & 1) == 0)
        {
          if ((sub_1C63957A4(this, 0xEu, 0, 0) & 1) == 0)
          {
            if ((sub_1C63957A4(this, 0xFu, 0, 0) & 1) == 0)
            {
              if ((sub_1C63957A4(this, 0x10u, 0, 0) & 1) == 0)
              {
                if ((sub_1C63957A4(this, 0x11u, 0, 0) & 1) == 0)
                {
                  if ((sub_1C63957A4(this, 0x12u, 0, 0) & 1) == 0)
                  {
LABEL_83:
                    v24 = this;
                    v25 = 19;
LABEL_94:
                    isMacOSXVersionLT = sub_1C63957A4(v24, v25, 0, 0);
LABEL_50:
                    if (isMacOSXVersionLT)
                      v10 = 0x8000000700000002;
                    else
                      v10 = 0;
                    goto LABEL_59;
                  }
                  goto LABEL_46;
                }
                goto LABEL_91;
              }
              goto LABEL_89;
            }
            goto LABEL_87;
          }
          goto LABEL_85;
        }
      }
      else
      {
        if (v9 != 29)
        {
          OSVersion = llvm::Triple::getOSVersion(this);
          v29 = v20;
          v26 = 2;
          v27 = 0;
          if ((sub_1C4F7A4D8(&OSVersion, &v26) & 1) == 0)
          {
            OSVersion = llvm::Triple::getOSVersion(this);
            v29 = v21;
            v26 = 3;
            v27 = 0;
            isMacOSXVersionLT = sub_1C4F7A4D8(&OSVersion, &v26);
            goto LABEL_50;
          }
LABEL_46:
          v15 = 0x600000002;
          goto LABEL_58;
        }
        OSVersion = llvm::Triple::getOSVersion(this);
        v29 = v12;
        v26 = 4;
        v27 = 0;
        if ((sub_1C4F7A4D8(&OSVersion, &v26) & 1) != 0)
          goto LABEL_44;
        OSVersion = llvm::Triple::getOSVersion(this);
        v29 = v13;
        v26 = 5;
        v27 = 0;
        if ((sub_1C4F7A4D8(&OSVersion, &v26) & 1) != 0)
          goto LABEL_57;
        OSVersion = llvm::Triple::getOSVersion(this);
        v29 = v14;
        v26 = 6;
        v27 = 0;
        if ((sub_1C4F7A4D8(&OSVersion, &v26) & 1) == 0)
        {
          if ((sub_1C63957A4(this, 7u, 0, 0) & 1) == 0)
          {
            if ((sub_1C63957A4(this, 8u, 0, 0) & 1) == 0)
            {
              if ((sub_1C63957A4(this, 9u, 0, 0) & 1) == 0)
              {
                if ((sub_1C63957A4(this, 0xAu, 0, 0) & 1) == 0)
                {
                  if ((sub_1C63957A4(this, 0xBu, 0, 0) & 1) == 0)
                  {
                    v24 = this;
                    v25 = 12;
                    goto LABEL_94;
                  }
                  goto LABEL_46;
                }
                goto LABEL_91;
              }
LABEL_89:
              v15 = 0x400000002;
              goto LABEL_58;
            }
LABEL_87:
            v15 = 0x300000002;
            goto LABEL_58;
          }
LABEL_85:
          v15 = 0x200000002;
          goto LABEL_58;
        }
      }
    }
    else
    {
      if (v9 == 7)
      {
        v10 = 0x8000000600000002;
        OSVersion = llvm::Triple::getOSVersion(this);
        v29 = v11;
        v26 = 9;
        v27 = 0;
        if ((sub_1C4F7A4D8(&OSVersion, &v26) & 1) != 0)
        {
          v10 = 0x8000000600000001;
          goto LABEL_59;
        }
        OSVersion = llvm::Triple::getOSVersion(this);
        v29 = v16;
        v26 = 10;
        v27 = 0;
        if ((sub_1C4F7A4D8(&OSVersion, &v26) & 1) == 0)
        {
          OSVersion = llvm::Triple::getOSVersion(this);
          v29 = v17;
          v26 = 11;
          v27 = 0;
          if ((sub_1C4F7A4D8(&OSVersion, &v26) & 1) == 0)
          {
            if ((sub_1C63957A4(this, 0xCu, 0, 0) & 1) == 0)
            {
              if ((sub_1C63957A4(this, 0xDu, 0, 0) & 1) == 0)
              {
                if ((sub_1C63957A4(this, 0xEu, 0, 0) & 1) == 0)
                {
                  if ((sub_1C63957A4(this, 0xFu, 0, 0) & 1) == 0)
                  {
                    if ((sub_1C63957A4(this, 0x10u, 0, 0) & 1) == 0)
                    {
                      if ((sub_1C63957A4(this, 0x11u, 0, 0) & 1) == 0)
                      {
                        if ((sub_1C63957A4(this, 0x12u, 0, 0) & 1) == 0)
                          goto LABEL_83;
LABEL_59:
                        if ((v10 & 0xF00000003) != 0)
                          return v10;
                        else
                          return 0x8000000700000002;
                      }
                      goto LABEL_91;
                    }
                    goto LABEL_89;
                  }
                  goto LABEL_87;
                }
                goto LABEL_85;
              }
              goto LABEL_28;
            }
LABEL_57:
            v15 = 2;
            goto LABEL_58;
          }
LABEL_44:
          v10 = 0x8000000B00000001;
          goto LABEL_59;
        }
LABEL_54:
        v10 = 0x8000000800000001;
        goto LABEL_59;
      }
      if ((llvm::Triple::isMacOSXVersionLT(this, 0xAu, 12, 0) & 1) != 0)
        goto LABEL_54;
      if ((llvm::Triple::isMacOSXVersionLT(this, 0xAu, 13, 0) & 1) != 0)
        goto LABEL_44;
      if ((llvm::Triple::isMacOSXVersionLT(this, 0xAu, 14, 0) & 1) != 0)
        goto LABEL_57;
      if ((llvm::Triple::isMacOSXVersionLT(this, 0xAu, 15, 0) & 1) == 0)
      {
        if ((llvm::Triple::isMacOSXVersionLT(this, 0xBu, 0, 0) & 1) == 0)
        {
          if ((llvm::Triple::isMacOSXVersionLT(this, 0xCu, 0, 0) & 1) == 0)
          {
            if ((llvm::Triple::isMacOSXVersionLT(this, 0xDu, 0, 0) & 1) == 0)
            {
              if ((llvm::Triple::isMacOSXVersionLT(this, 0xEu, 0, 0) & 1) == 0)
              {
                if ((llvm::Triple::isMacOSXVersionLT(this, 0xFu, 0, 0) & 1) == 0)
                {
                  isMacOSXVersionLT = llvm::Triple::isMacOSXVersionLT(this, 0x10u, 0, 0);
                  goto LABEL_50;
                }
                goto LABEL_46;
              }
LABEL_91:
              v15 = 0x500000002;
              goto LABEL_58;
            }
            goto LABEL_89;
          }
          goto LABEL_87;
        }
        goto LABEL_85;
      }
    }
LABEL_28:
    v15 = 0x100000002;
LABEL_58:
    v10 = v15 & 0xFFFFFFFFFFFFLL | 0x8000000000000000;
    goto LABEL_59;
  }
  return result;
}

double llvm::Triple::setTriple(uint64_t a1, llvm::Twine *a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  llvm::Triple::Triple((uint64_t)&v4, a2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = v5;
  result = *(double *)&v6;
  *(_OWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  return result;
}

void llvm::Triple::setEnvironment(llvm::Triple *a1, int a2)
{
  int v4;
  int v5;
  char *EnvironmentTypeName;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;
  void *v18[2];
  char v19;

  v4 = *((_DWORD *)a1 + 11);
  sub_1C5E4C5E8((uint64_t)a1);
  if (v4 == v5)
  {
    EnvironmentTypeName = llvm::Triple::getEnvironmentTypeName(a2);
    llvm::Triple::setEnvironmentName(a1, (uint64_t)EnvironmentTypeName, v7);
  }
  else
  {
    v14[0] = llvm::Triple::getEnvironmentTypeName(a2);
    v14[1] = v8;
    v14[2] = "-";
    v15 = 773;
    v9 = *((int *)a1 + 11);
    v10 = qword_1C8670B50[v9];
    v11 = (uint64_t)*(&off_1E81A3FC8 + v9);
    v16[0] = v14;
    v16[2] = v11;
    v16[3] = v10;
    v17 = 1282;
    llvm::Twine::str((llvm::Twine *)v16, v18);
    if (v19 >= 0)
      v12 = v18;
    else
      v12 = (void **)v18[0];
    if (v19 >= 0)
      v13 = v19 & 0x7F;
    else
      v13 = (uint64_t)v18[1];
    llvm::Triple::setEnvironmentName(a1, (uint64_t)v12, v13);
    if (v19 < 0)
      operator delete(v18[0]);
  }
}

void llvm::Triple::setObjectFormat(llvm::Triple *a1, int a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[4];
  __int16 v13;
  void *v14[2];
  char v15;

  v4 = *((_DWORD *)a1 + 10);
  if (v4)
  {
    v10[0] = llvm::Triple::getEnvironmentTypeName(v4);
    v10[1] = v5;
    v10[2] = "-";
    v11 = 773;
    v6 = qword_1C8670B50[a2];
    v7 = (uint64_t)*(&off_1E81A3FC8 + a2);
    v12[0] = v10;
    v12[2] = v7;
    v12[3] = v6;
    v13 = 1282;
    llvm::Twine::str((llvm::Twine *)v12, v14);
    if (v15 >= 0)
      v8 = v14;
    else
      v8 = (void **)v14[0];
    if (v15 >= 0)
      v9 = v15 & 0x7F;
    else
      v9 = (uint64_t)v14[1];
    llvm::Triple::setEnvironmentName(a1, (uint64_t)v8, v9);
    if (v15 < 0)
      operator delete(v14[0]);
  }
  else
  {
    llvm::Triple::setEnvironmentName(a1, (uint64_t)*(&off_1E81A3FC8 + a2), qword_1C8670B50[a2]);
  }
}

BOOL llvm::Triple::isArch64Bit(llvm::Triple *this)
{
  return sub_1C5E4EA90(*((_DWORD *)this + 6)) == 64;
}

uint64_t sub_1C5E4EA90(int a1)
{
  return dword_1C8670BA0[a1];
}

void llvm::Triple::get32BitArchVariant(llvm::Triple *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  uint64_t v5;
  BOOL v6;
  const char *v7;
  const char *v8;

  if (*((char *)this + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)a2, *(void **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)this;
    *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 2);
  }
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)this + 24);
  *(_QWORD *)(a2 + 40) = *((_QWORD *)this + 5);
  v4 = "unknown";
  v5 = 7;
  switch(*((_DWORD *)this + 6))
  {
    case 0:
    case 7:
    case 8:
    case 9:
    case 0x14:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x24:
    case 0x43:
      goto LABEL_38;
    case 3:
      v4 = "arm";
      v5 = 3;
      goto LABEL_38;
    case 4:
      v4 = "armeb";
      goto LABEL_30;
    case 0xE:
      v4 = "loongarch32";
      v5 = 11;
      goto LABEL_38;
    case 0x12:
      v6 = *((_DWORD *)this + 7) == 35;
      if (*((_DWORD *)this + 7) == 35)
        v5 = 11;
      else
        v5 = 4;
      v7 = "mips";
      v8 = "mipsisa32r6";
      goto LABEL_16;
    case 0x13:
      v6 = *((_DWORD *)this + 7) == 35;
      if (*((_DWORD *)this + 7) == 35)
        v5 = 13;
      else
        v5 = 6;
      v7 = "mipsel";
      v8 = "mipsisa32r6el";
LABEL_16:
      if (v6)
        v4 = (char *)v8;
      else
        v4 = (char *)v7;
      goto LABEL_38;
    case 0x17:
      v4 = "powerpc";
      goto LABEL_34;
    case 0x18:
      v4 = "powerpcle";
      v5 = 9;
      goto LABEL_38;
    case 0x20:
      v4 = "riscv32";
      goto LABEL_34;
    case 0x22:
      v4 = "sparc";
      goto LABEL_30;
    case 0x2A:
      v4 = "i386";
      goto LABEL_32;
    case 0x2D:
      v4 = "nvptx";
      goto LABEL_30;
    case 0x2F:
      v4 = "igil32";
      goto LABEL_36;
    case 0x31:
      v4 = "air32";
      goto LABEL_30;
    case 0x33:
      v4 = "le32";
      goto LABEL_32;
    case 0x35:
      v4 = "amdil";
      goto LABEL_30;
    case 0x37:
      v4 = "hsail";
LABEL_30:
      v5 = 5;
      goto LABEL_38;
    case 0x39:
      v4 = "spir";
LABEL_32:
      v5 = 4;
      goto LABEL_38;
    case 0x3B:
      v4 = "spirv32";
LABEL_34:
      v5 = 7;
      goto LABEL_38;
    case 0x40:
      v4 = "wasm32";
LABEL_36:
      v5 = 6;
      goto LABEL_38;
    case 0x42:
      v4 = "renderscript32";
      v5 = 14;
LABEL_38:
      llvm::Triple::setArchName((llvm::Triple *)a2, v4, v5);
      break;
    default:
      return;
  }
}

void llvm::Triple::get64BitArchVariant(llvm::Triple *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  uint64_t v5;
  BOOL v6;
  const char *v7;
  const char *v8;

  if (*((char *)this + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)a2, *(void **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)this;
    *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 2);
  }
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)this + 24);
  *(_QWORD *)(a2 + 40) = *((_QWORD *)this + 5);
  v4 = "unknown";
  v5 = 7;
  switch(*((_DWORD *)this + 6))
  {
    case 0:
    case 6:
    case 7:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xF:
    case 0x14:
    case 0x19:
    case 0x23:
    case 0x25:
    case 0x26:
    case 0x2B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
      goto LABEL_37;
    case 1:
    case 5:
    case 0x27:
      v4 = "aarch64";
      goto LABEL_33;
    case 2:
    case 0x28:
      v4 = "aarch64_be";
      v5 = 10;
      goto LABEL_37;
    case 0xD:
      v4 = "loongarch64";
      goto LABEL_21;
    case 0x10:
      v6 = *((_DWORD *)this + 7) == 35;
      if (*((_DWORD *)this + 7) == 35)
        v5 = 11;
      else
        v5 = 6;
      v7 = "mips64";
      v8 = "mipsisa64r6";
      goto LABEL_16;
    case 0x11:
      v6 = *((_DWORD *)this + 7) == 35;
      if (*((_DWORD *)this + 7) == 35)
        v5 = 13;
      else
        v5 = 8;
      v7 = "mips64el";
      v8 = "mipsisa64r6el";
LABEL_16:
      if (v6)
        v4 = (char *)v8;
      else
        v4 = (char *)v7;
      goto LABEL_37;
    case 0x15:
      v4 = "powerpc64";
      v5 = 9;
      goto LABEL_37;
    case 0x16:
      v4 = "powerpc64le";
LABEL_21:
      v5 = 11;
      goto LABEL_37;
    case 0x1F:
      v4 = "riscv64";
      goto LABEL_33;
    case 0x21:
      v4 = "sparcv9";
      goto LABEL_33;
    case 0x29:
      v4 = "x86_64";
      goto LABEL_35;
    case 0x2C:
      v4 = "nvptx64";
      goto LABEL_33;
    case 0x2E:
      v4 = "igil64";
      goto LABEL_35;
    case 0x30:
      v4 = "air64";
      v5 = 5;
      goto LABEL_37;
    case 0x32:
      v4 = "le64";
      v5 = 4;
      goto LABEL_37;
    case 0x34:
      v4 = "amdil64";
      goto LABEL_33;
    case 0x36:
      v4 = "hsail64";
      goto LABEL_33;
    case 0x38:
      v4 = "spir64";
      goto LABEL_35;
    case 0x3A:
      v4 = "spirv64";
LABEL_33:
      v5 = 7;
      goto LABEL_37;
    case 0x3F:
      v4 = "wasm64";
LABEL_35:
      v5 = 6;
      goto LABEL_37;
    case 0x41:
      v4 = "renderscript64";
      v5 = 14;
LABEL_37:
      llvm::Triple::setArchName((llvm::Triple *)a2, v4, v5);
      break;
    default:
      return;
  }
}

uint64_t llvm::Triple::getBigEndianArchVariant@<X0>(llvm::Triple *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  if (*((char *)this + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)a2, *(void **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)this;
    *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 2);
  }
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)this + 24);
  *(_QWORD *)(a2 + 40) = *((_QWORD *)this + 5);
  result = llvm::Triple::isLittleEndian(this);
  if ((_DWORD)result)
    __asm { BR              X10 }
  return result;
}

void sub_1C5E4EEF0(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  llvm::Triple *v3;

  llvm::Triple::setArchName(v3, a2, a3);
}

void sub_1C5E4EF00(uint64_t a1)
{
  sub_1C5E4EEF0(a1, "bpfeb", 5);
}

void sub_1C5E4EF70(uint64_t a1)
{
  sub_1C5E4EEF0(a1, "tce", 3);
}

void sub_1C5E4EF80(uint64_t a1)
{
  sub_1C5E4EEF0(a1, "aarch64_be", 10);
}

void sub_1C5E4EF90(uint64_t a1)
{
  sub_1C5E4EEF0(a1, "powerpc", 7);
}

void sub_1C5E4EFA0(uint64_t a1)
{
  sub_1C5E4EEF0(a1, "powerpc64", 9);
}

void llvm::Triple::getLittleEndianArchVariant(llvm::Triple *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  char *v5;
  uint64_t v6;
  BOOL v7;
  const char *v8;
  const char *v9;

  if (*((char *)this + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)a2, *(void **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)this;
    *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 2);
  }
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)this + 24);
  *(_QWORD *)(a2 + 40) = *((_QWORD *)this + 5);
  if ((llvm::Triple::isLittleEndian(this) & 1) == 0)
  {
    v4 = *((_DWORD *)this + 6);
    v5 = "unknown";
    v6 = 7;
    switch(v4)
    {
      case 15:
        break;
      case 16:
        v7 = *((_DWORD *)this + 7) == 35;
        if (*((_DWORD *)this + 7) == 35)
          v6 = 13;
        else
          v6 = 6;
        v8 = "mipsel";
        v9 = "mipsisa32r6el";
        goto LABEL_23;
      case 17:
      case 19:
      case 20:
      case 22:
LABEL_28:
        __break(1u);
        return;
      case 18:
        v7 = *((_DWORD *)this + 7) == 35;
        if (*((_DWORD *)this + 7) == 35)
          v6 = 13;
        else
          v6 = 8;
        v8 = "mips64el";
        v9 = "mipsisa64r6el";
LABEL_23:
        if (v7)
          v5 = (char *)v9;
        else
          v5 = (char *)v8;
        break;
      case 21:
        v5 = "powerpcle";
        v6 = 9;
        break;
      case 23:
        v5 = "powerpc64le";
        v6 = 11;
        break;
      default:
        switch(v4)
        {
          case 0:
          case 2:
            goto LABEL_27;
          case 1:
          case 3:
          case 5:
          case 6:
          case 7:
          case 8:
            goto LABEL_28;
          case 4:
            v5 = "aarch64";
LABEL_14:
            v6 = 7;
            goto LABEL_27;
          case 9:
            v5 = "bpfel";
LABEL_18:
            v6 = 5;
            goto LABEL_27;
          default:
            switch(v4)
            {
              case '!':
                v5 = "sparcel";
                goto LABEL_14;
              case '#':
              case '&':
              case '\'':
                goto LABEL_28;
              case '%':
                v5 = "tcele";
                goto LABEL_18;
              default:
                goto LABEL_27;
            }
        }
    }
LABEL_27:
    llvm::Triple::setArchName((llvm::Triple *)a2, v5, v6);
  }
}

void llvm::Triple::getEffectiveMacCatalystVariant(llvm::Triple *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  unint64_t OSVersion;
  uint64_t v6;
  llvm::Triple *ArchName;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  void **v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  void **v26;
  __int16 v27;
  void *__p[2];
  char v29;
  void *v30[2];
  char v31;

  v4 = *((char *)this + 23);
  if (*((_DWORD *)this + 10) != 21)
  {
    if (v4 < 0)
    {
      sub_1C47EBC30((_BYTE *)a2, *(void **)this, *((_QWORD *)this + 1));
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)this;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 2);
    }
    *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)this + 24);
    *(_QWORD *)(a2 + 40) = *((_QWORD *)this + 5);
    return;
  }
  if (v4 < 0)
  {
    sub_1C47EBC30((_BYTE *)a2, *(void **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)this;
    *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 2);
  }
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)this + 24);
  *(_QWORD *)(a2 + 40) = *((_QWORD *)this + 5);
  if ((*((_DWORD *)this + 6) & 0xFFFFFFFE) == 0x30)
  {
    OSVersion = llvm::Triple::getOSVersion(this);
    if (!(OSVersion & 0x7FFFFFFFFFFFFFFFLL | v6 & 0x7FFFFFFF00000000 | v6 & 0x7FFFFFFF))
    {
      ArchName = llvm::Triple::getArchName(this);
      if (v8 >= 5)
        v10 = 5;
      else
        v10 = v8;
      v11 = (char *)ArchName + v10;
      v12 = v8 - v10;
      v24 = v11;
      v25 = v12;
      LOWORD(v26) = 0;
      if (v12 == 5)
      {
        v13 = *(_DWORD *)v11;
        v14 = *((unsigned __int8 *)v11 + 4);
        if (v13 != 825325151 || v14 != 49)
        {
LABEL_27:
          v16 = sub_1C534A1F4((uint64_t)&v24, "_v21", 4, "_v22", 4, "_v23", 4, v9, "_v24", 4, 1);
          v17 = sub_1C6227ED4(v16, "_v25", 4, 1);
          v18 = sub_1C6227ED4(v17, "_v26", 4, 1);
          v19 = sub_1C6227ED4(v18, "_v27", 4, 1);
          if (*(_BYTE *)(v19 + 17) && *(_BYTE *)(v19 + 16))
          {
            llvm::Triple::setOSAndEnvironmentName((llvm::Triple *)a2, (uint64_t)"macosx", 6);
            return;
          }
          goto LABEL_30;
        }
      }
      else if (v12 != 4 || *(_DWORD *)v11 != 909211231 && *(_DWORD *)v11 != 942765663 && *(_DWORD *)v11 != 808613471)
      {
        goto LABEL_27;
      }
      LOWORD(v26) = 257;
      goto LABEL_27;
    }
  }
LABEL_30:
  v20 = llvm::Triple::getOSVersion(this);
  v21 = (v20 - 3) | 0x8000000000000000;
  if (v20 < 0xE)
    v21 = 0x8000000F0000000ALL;
  v24 = (const char *)v21;
  v25 = 0x80000000;
  llvm::VersionTuple::getAsString((llvm::VersionTuple *)&v24, v30);
  v24 = "macosx";
  v25 = 6;
  v26 = v30;
  v27 = 1029;
  llvm::Twine::str((llvm::Twine *)&v24, __p);
  if (v29 >= 0)
    v22 = __p;
  else
    v22 = (void **)__p[0];
  if (v29 >= 0)
    v23 = v29 & 0x7F;
  else
    v23 = (uint64_t)__p[1];
  llvm::Triple::setOSAndEnvironmentName((llvm::Triple *)a2, (uint64_t)v22, v23);
  if (v29 < 0)
    operator delete(__p[0]);
  if (v31 < 0)
    operator delete(v30[0]);
}

unint64_t llvm::Triple::getMacCatalystVersionForOS(int a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v4;

  if (a1 == 11)
  {
    if (*a2 < 0xEu)
    {
      v2 = 0xF0000000ALL;
      return v2 & 0xFFFFFFFFFFFFLL | 0x8000000000000000;
    }
    v4 = (*a2 - 3);
  }
  else
  {
    if (a1 != 7)
      return 0;
    if (*a2 < 0xBu)
    {
      v2 = 13;
      return v2 & 0xFFFFFFFFFFFFLL | 0x8000000000000000;
    }
    v4 = (*a2 + 3);
  }
  return v4 | 0x8000000000000000;
}

BOOL llvm::Triple::isCompatibleWith(llvm::Triple *this, const llvm::Triple *a2)
{
  int v4;
  int v5;
  BOOL v6;
  BOOL v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v13;
  int v14;
  _BOOL8 result;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t AIRVersion;
  uint64_t v28;

  v4 = *((_DWORD *)this + 6);
  v5 = *((_DWORD *)a2 + 6);
  v6 = v4 == 39 && v5 == 1;
  if (v6 || v4 == 1 && v5 == 39 || (v4 == 40 ? (v7 = v5 == 2) : (v7 = 0), v7 || v4 == 2 && v5 == 40))
  {
    v9 = *((_DWORD *)this + 7);
    v8 = *((_DWORD *)this + 8);
    v11 = *((_DWORD *)a2 + 7);
    v10 = *((_DWORD *)a2 + 8);
    if (v8 != 1)
    {
      v16 = v9 == v11 && v8 == v10;
      if (!v16 || *((_DWORD *)this + 9) != *((_DWORD *)a2 + 9) || *((_DWORD *)this + 10) != *((_DWORD *)a2 + 10))
        return 0;
      v13 = *((_DWORD *)this + 11);
      v14 = *((_DWORD *)a2 + 11);
      return v13 == v14;
    }
    if (v9 != v11 || v10 != 1)
      return 0;
LABEL_19:
    v13 = *((_DWORD *)this + 9);
    v14 = *((_DWORD *)a2 + 9);
    return v13 == v14;
  }
  if ((v4 & 0xFFFFFFFE) != 0x30)
  {
    if (*((_DWORD *)this + 8) != 1)
      return sub_1C6395708(this, a2);
    if (v4 != v5)
      return 0;
    result = 0;
    if (*((_DWORD *)this + 7) == *((_DWORD *)a2 + 7) && *((_DWORD *)a2 + 8) == 1)
      goto LABEL_19;
    return result;
  }
  AIRVersion = llvm::Triple::getAIRVersion(this);
  v28 = v17;
  v25 = llvm::Triple::getAIRVersion(a2);
  v26 = v18;
  v24[0] = 0x8000000300000002;
  v24[1] = 0;
  if ((sub_1C4F7A4D8(&AIRVersion, v24) & 1) == 0)
  {
    v23[0] = 0x8000000300000002;
    v23[1] = 0;
    if ((sub_1C4F7A4D8(&v25, v23) & 1) == 0)
    {
      if (*((_DWORD *)this + 6) == *((_DWORD *)a2 + 6) && *((_DWORD *)this + 7) == *((_DWORD *)a2 + 7))
      {
        v13 = *((_DWORD *)this + 8);
        v14 = *((_DWORD *)a2 + 8);
        return v13 == v14;
      }
      return 0;
    }
  }
  v19 = *((_DWORD *)this + 9);
  v20 = *((_DWORD *)a2 + 9);
  if (v19 == 7 && v20 == 28)
  {
    v21 = AIRVersion;
    v22 = v28;
    goto LABEL_43;
  }
  if (v19 == 28 && v20 == 7)
  {
    v21 = v25;
    v22 = v26;
LABEL_43:
    if (!(v21 & 0x7FFFFFFFFFFFFFFFLL ^ 0x800000001 | v22 & 0x7FFFFFFF7FFFFFFFLL))
    {
      if (*((_DWORD *)this + 6) != *((_DWORD *)a2 + 6)
        || *((_DWORD *)this + 7) != *((_DWORD *)a2 + 7)
        || *((_DWORD *)this + 8) != *((_DWORD *)a2 + 8))
      {
        return 0;
      }
LABEL_52:
      v13 = *((_DWORD *)this + 10);
      v14 = *((_DWORD *)a2 + 10);
      return v13 == v14;
    }
  }
  if (*((_DWORD *)this + 6) != *((_DWORD *)a2 + 6) || *((_DWORD *)this + 7) != *((_DWORD *)a2 + 7))
    return 0;
  result = 0;
  if (*((_DWORD *)this + 8) == *((_DWORD *)a2 + 8) && v19 == v20)
    goto LABEL_52;
  return result;
}

_DWORD *llvm::Triple::merge@<X0>(_DWORD *this@<X0>, const llvm::Triple *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  _QWORD v11[2];
  _QWORD v12[2];

  if (this[8] == 1
    && (v5 = (uint64_t)this,
        v12[0] = llvm::Triple::getOSVersion(a2),
        v12[1] = v6,
        v11[0] = llvm::Triple::getOSVersion((llvm::Triple *)v5),
        v11[1] = v7,
        this = (_DWORD *)sub_1C4F7A4D8(v12, v11),
        (_DWORD)this))
  {
    if ((*(char *)(v5 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)a3 = *(_OWORD *)v5;
      v8 = *(_QWORD *)(v5 + 16);
LABEL_7:
      *(_QWORD *)(a3 + 16) = v8;
      return this;
    }
    v9 = *(void **)v5;
    v10 = *(_QWORD *)(v5 + 8);
  }
  else
  {
    if ((*((char *)a2 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)a3 = *(_OWORD *)a2;
      v8 = *((_QWORD *)a2 + 2);
      goto LABEL_7;
    }
    v9 = *(void **)a2;
    v10 = *((_QWORD *)a2 + 1);
  }
  return sub_1C47EBC30((_BYTE *)a3, v9, v10);
}

const char *llvm::Triple::getAIRVersionedArchName(llvm::Triple *this)
{
  uint64_t AIRVersion;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  AIRVersion = llvm::Triple::getAIRVersion(this);
  if (*((_DWORD *)this + 6) == 48)
  {
    if ((_DWORD)AIRVersion == 2)
    {
      v11 = AIRVersion & 0x7FFFFFFF00000000;
      v12 = v3 & 0x7FFFFFFF00000000;
      if (AIRVersion & 0x7FFFFFFF00000000 | v3 & 0x7FFFFFFF00000000 | v3 & 0x7FFFFFFF)
      {
        v13 = v3 & 0x7FFFFFFF;
        if (v12 || v11 ^ 0x100000000 | v13)
        {
          if (v12 || v11 ^ 0x200000000 | v13)
          {
            if (v12 || v11 ^ 0x300000000 | v13)
            {
              if (v12 || v11 ^ 0x400000000 | v13)
              {
                if (v12 || v11 ^ 0x500000000 | v13)
                {
                  result = "air32_v27";
                  if (!v12 && !(v11 ^ 0x600000000 | v13))
                    return "air32_v26";
                }
                else
                {
                  return "air32_v25";
                }
              }
              else
              {
                return "air32_v24";
              }
            }
            else
            {
              return "air32_v23";
            }
          }
          else
          {
            return "air32_v22";
          }
        }
        else
        {
          return "air32_v21";
        }
      }
      else
      {
        return "air32_v20";
      }
    }
    else if ((_DWORD)AIRVersion == 1)
    {
      v4 = AIRVersion & 0x7FFFFFFF00000000;
      v5 = v3 & 0x7FFFFFFF;
      v6 = v3 & 0x7FFFFFFF00000000;
      if ((v3 & 0x7FFFFFFF00000000) != 0 || v4 ^ 0x600000000 | v5)
      {
        if (v6 || v4 ^ 0x800000000 | v5)
        {
          result = "air32_v27";
          if (!v6 && !(v4 ^ 0xB00000000 | v5))
            return "air32_v111";
        }
        else
        {
          return "air32_v18";
        }
      }
      else
      {
        return "air32_v16";
      }
    }
    else
    {
      return "air32_v27";
    }
  }
  else if ((_DWORD)AIRVersion == 2)
  {
    v14 = AIRVersion & 0x7FFFFFFF00000000;
    v15 = v3 & 0x7FFFFFFF00000000;
    if (AIRVersion & 0x7FFFFFFF00000000 | v3 & 0x7FFFFFFF00000000 | v3 & 0x7FFFFFFF)
    {
      v16 = v3 & 0x7FFFFFFF;
      if (v15 || v14 ^ 0x100000000 | v16)
      {
        if (v15 || v14 ^ 0x200000000 | v16)
        {
          if (v15 || v14 ^ 0x300000000 | v16)
          {
            if (v15 || v14 ^ 0x400000000 | v16)
            {
              if (v15 || v14 ^ 0x500000000 | v16)
              {
                result = "air64_v27";
                if (!v15 && !(v14 ^ 0x600000000 | v16))
                  return "air64_v26";
              }
              else
              {
                return "air64_v25";
              }
            }
            else
            {
              return "air64_v24";
            }
          }
          else
          {
            return "air64_v23";
          }
        }
        else
        {
          return "air64_v22";
        }
      }
      else
      {
        return "air64_v21";
      }
    }
    else
    {
      return "air64_v20";
    }
  }
  else if ((_DWORD)AIRVersion == 1)
  {
    v8 = AIRVersion & 0x7FFFFFFF00000000;
    v9 = v3 & 0x7FFFFFFF;
    v10 = v3 & 0x7FFFFFFF00000000;
    if ((v3 & 0x7FFFFFFF00000000) != 0 || v8 ^ 0x600000000 | v9)
    {
      if (v10 || v8 ^ 0x800000000 | v9)
      {
        result = "air64_v27";
        if (!v10 && !(v8 ^ 0xB00000000 | v9))
          return "air64_v111";
      }
      else
      {
        return "air64_v18";
      }
    }
    else
    {
      return "air64_v16";
    }
  }
  else
  {
    return "air64_v27";
  }
  return result;
}

uint64_t sub_1C5E4FA9C(uint64_t a1, const void *a2, uint64_t a3, void *__s2, uint64_t a5, void *a6, uint64_t a7, int a8, void *__s2a, uint64_t a10, int a11)
{
  const void *v16;
  size_t v17;

  if (!*(_BYTE *)(a1 + 20))
  {
    if ((v16 = *(const void **)a1, v17 = *(_QWORD *)(a1 + 8), v17 == a3)
      && (!v17 || !memcmp(*(const void **)a1, a2, *(_QWORD *)(a1 + 8)))
      || v17 == a5 && (!v17 || !memcmp(v16, __s2, v17))
      || v17 == a7 && (!v17 || !memcmp(v16, a6, v17))
      || v17 == a10 && (!v17 || !memcmp(v16, __s2a, v17)))
    {
      *(_DWORD *)(a1 + 16) = a11;
      *(_BYTE *)(a1 + 20) = 1;
    }
  }
  return a1;
}

uint64_t sub_1C5E4FB90(uint64_t a1, const void *a2, uint64_t a3, void *__s2, uint64_t a5, void *a6, uint64_t a7, int a8, const void *a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, int a17)
{
  uint64_t v20;
  void *v21;
  uint64_t v22;
  const void *v24;
  size_t v25;
  int v27;
  void *v28;
  int v29;
  size_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  int v34;
  void *v35;
  const void *v36;
  const void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;

  v20 = a16;
  v21 = a13;
  v22 = a14;
  if (!*(_BYTE *)(a1 + 20))
  {
    v24 = *(const void **)a1;
    v25 = *(_QWORD *)(a1 + 8);
    if (v25 == a3)
    {
      if (!v25)
        goto LABEL_14;
      v35 = __s2;
      v36 = *(const void **)a1;
      v38 = a6;
      v27 = memcmp(*(const void **)a1, a2, *(_QWORD *)(a1 + 8));
      v24 = v36;
      a6 = v38;
      __s2 = v35;
      v21 = a13;
      v20 = a16;
      v22 = a14;
      if (!v27)
        goto LABEL_14;
    }
    if (v25 == a5)
    {
      if (!v25)
        goto LABEL_14;
      v40 = v20;
      v41 = v22;
      v28 = v21;
      v37 = v24;
      v39 = a6;
      v29 = memcmp(v24, __s2, v25);
      v24 = v37;
      a6 = v39;
      v20 = v40;
      v22 = v41;
      v21 = v28;
      if (!v29)
        goto LABEL_14;
    }
    if (v25 == a7)
    {
      if (!v25)
        goto LABEL_14;
      v30 = v25;
      v31 = v22;
      v32 = v21;
      v33 = v20;
      v34 = memcmp(v24, a6, v30);
      v20 = v33;
      v21 = v32;
      v22 = v31;
      if (!v34)
      {
LABEL_14:
        *(_DWORD *)(a1 + 16) = a17;
        *(_BYTE *)(a1 + 20) = 1;
      }
    }
  }
  return sub_1C5E4FA9C(a1, a9, a10, a11, a12, v21, v22, a8, a15, v20, a17);
}

uint64_t sub_1C5E4FCD8(uint64_t a1, const void *a2, uint64_t a3, int a4)
{
  size_t v6;

  if (!*(_BYTE *)(a1 + 20))
  {
    v6 = *(_QWORD *)(a1 + 8);
    if (v6 == a3 && (!v6 || !memcmp(*(const void **)a1, a2, v6)))
    {
      *(_DWORD *)(a1 + 16) = a4;
      *(_BYTE *)(a1 + 20) = 1;
    }
  }
  return a1;
}

void llvm::Twine::str(llvm::Twine *this@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  size_t *v6;
  const void *v7;
  _QWORD *v8;
  int v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const void **v15;
  void *v16;
  __int128 v17;
  _QWORD v18[33];

  v18[32] = *MEMORY[0x1E0C80C00];
  v3 = *((unsigned __int8 *)this + 32);
  if (v3 == 6)
  {
    if (*((_BYTE *)this + 33) == 1)
    {
      sub_1C4DCAF2C(*(_QWORD *)this, a2);
      return;
    }
LABEL_8:
    v16 = v18;
    v6 = (size_t *)&v17;
    v17 = xmmword_1C64638F0;
    goto LABEL_9;
  }
  if (v3 == 4)
  {
    if (*((_BYTE *)this + 33) == 1)
    {
      v4 = *(_QWORD *)this;
      if (*(char *)(*(_QWORD *)this + 23) < 0)
      {
        sub_1C47EBC30(a2, *(void **)v4, *(_QWORD *)(v4 + 8));
      }
      else
      {
        v5 = *(_OWORD *)v4;
        a2[2] = *(_QWORD *)(v4 + 16);
        *(_OWORD *)a2 = v5;
      }
      return;
    }
    goto LABEL_8;
  }
  v9 = *((unsigned __int8 *)this + 33);
  v8 = v18;
  v16 = v18;
  v6 = (size_t *)&v17;
  v17 = xmmword_1C64638F0;
  if (v9 == 1)
  {
    switch(v3)
    {
      case 1:
        goto LABEL_30;
      case 3:
        v7 = *(const void **)this;
        if (!*(_QWORD *)this)
          goto LABEL_30;
        v10 = strlen(*(const char **)this);
        goto LABEL_17;
      case 4:
        v15 = *(const void ***)this;
        if ((*(char *)(*(_QWORD *)this + 23) & 0x80000000) == 0)
        {
          v10 = *(unsigned __int8 *)(*(_QWORD *)this + 23);
          v7 = *(const void **)this;
          goto LABEL_18;
        }
        v7 = *v15;
        v6 = (size_t *)(v15 + 1);
        if (!*v15)
          goto LABEL_30;
        goto LABEL_16;
      case 5:
        v7 = *(const void **)this;
        v6 = (size_t *)((char *)this + 8);
        if (*(_QWORD *)this)
          goto LABEL_16;
        goto LABEL_30;
      default:
        break;
    }
  }
LABEL_9:
  llvm::Twine::toVector((uint64_t)this, (uint64_t)&v16);
  v7 = v16;
  v8 = v16;
  if (v16)
  {
LABEL_16:
    v10 = *v6;
LABEL_17:
    if (v10 >= 0x7FFFFFFFFFFFFFF8)
      abort();
LABEL_18:
    if (v10 >= 0x17)
    {
      v11 = (v10 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v11 = v10 | 7;
      v12 = v11 + 1;
      v13 = operator new(v11 + 1);
      a2[1] = v10;
      a2[2] = v12 | 0x8000000000000000;
      *a2 = v13;
      a2 = v13;
    }
    else
    {
      *((_BYTE *)a2 + 23) = v10;
      if (!v10)
        goto LABEL_25;
    }
    memmove(a2, v7, v10);
LABEL_25:
    *((_BYTE *)a2 + v10) = 0;
    v14 = v16;
    goto LABEL_31;
  }
LABEL_30:
  v14 = v8;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
LABEL_31:
  if (v14 != v18)
    free(v14);
}

void llvm::Twine::toVector(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (**v4)();
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v5 = 0;
  v9 = 0;
  v10 = 0;
  v4 = &off_1E81A7280;
  v12 = a2;
  v11 = 0;
  v7 = 0;
  v8 = 0;
  v6 = 0;
  llvm::Twine::printOneChild(a1, (llvm::raw_ostream *)&v4, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 32));
  llvm::Twine::printOneChild(v3, (llvm::raw_ostream *)&v4, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 33));
  v4 = (uint64_t (**)())off_1E81A6E70;
  if (v11 == 1)
  {
    if (v6)
      MEMORY[0x1CAA32F9C](v6, 0x1000C8077774924);
  }
}

void llvm::Twine::print(llvm::Twine *this, llvm::raw_ostream *a2)
{
  uint64_t v4;

  llvm::Twine::printOneChild((uint64_t)this, a2, *(_QWORD *)this, *((_QWORD *)this + 1), *((_BYTE *)this + 32));
  llvm::Twine::printOneChild(v4, a2, *((_QWORD *)this + 2), *((_QWORD *)this + 3), *((_BYTE *)this + 33));
}

_QWORD *llvm::Twine::toNullTerminatedStringRef(unsigned __int8 *a1, uint64_t a2)
{
  _QWORD *v2;
  unsigned int v3;
  uint64_t v4;

  v2 = (_QWORD *)a2;
  if (a1[33] != 1)
    goto LABEL_7;
  v3 = a1[32];
  if (v3 < 2)
    goto LABEL_7;
  if (v3 == 4)
  {
    v2 = *(_QWORD **)a1;
    if ((*(char *)(*(_QWORD *)a1 + 23) & 0x80000000) == 0)
      return v2;
    return (_QWORD *)*v2;
  }
  if (v3 != 3)
  {
LABEL_7:
    llvm::Twine::toVector((uint64_t)a1, a2);
    v4 = v2[1];
    if ((unint64_t)(v4 + 1) > v2[2])
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v2, v2 + 3, v4 + 1, 1);
      v4 = v2[1];
    }
    *(_BYTE *)(*v2 + v4) = 0;
    return (_QWORD *)*v2;
  }
  v2 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
    strlen(*(const char **)a1);
  return v2;
}

void llvm::Twine::printOneChild(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3, size_t a4, char a5)
{
  uint64_t v7;
  void *v8;
  llvm::raw_ostream *v9;
  const char *v10;
  size_t v11;
  size_t v12;
  void *v13;
  _BYTE *v14;
  unint64_t v15;
  llvm::raw_ostream *v16;
  int v17;
  char v18;
  BOOL v19;
  size_t v20;
  size_t v21;
  const void *v22;
  size_t v23;

  while (2)
  {
    switch(a5)
    {
      case 2:
        a1 = llvm::Twine::printOneChild(a1, a2, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), *(unsigned __int8 *)(a3 + 32));
        a5 = *(_BYTE *)(a3 + 33);
        v7 = a3 + 16;
        a3 = *(_QWORD *)(a3 + 16);
        a4 = *(_QWORD *)(v7 + 8);
        continue;
      case 3:
        if (!a3)
          return;
        v12 = strlen((const char *)a3);
        v13 = (void *)*((_QWORD *)a2 + 4);
        if (v12 > *((_QWORD *)a2 + 3) - (_QWORD)v13)
        {
          v9 = a2;
          v10 = (const char *)a3;
          v11 = v12;
          goto LABEL_8;
        }
        if (!v12)
          return;
        memcpy(v13, (const void *)a3, v12);
        v21 = *((_QWORD *)a2 + 4) + v12;
        goto LABEL_28;
      case 4:
        v18 = *(_BYTE *)(a3 + 23);
        v19 = v18 < 0;
        if (v18 >= 0)
          v10 = (const char *)a3;
        else
          v10 = *(const char **)a3;
        v20 = v18 & 0x7F;
        if (v19)
          v11 = *(_QWORD *)(a3 + 8);
        else
          v11 = v20;
        v9 = a2;
        goto LABEL_8;
      case 5:
        v8 = (void *)*((_QWORD *)a2 + 4);
        if (a4 <= *((_QWORD *)a2 + 3) - (_QWORD)v8)
        {
          if (a4)
          {
            v22 = (const void *)a3;
            v23 = a4;
            memcpy(v8, v22, a4);
            v21 = *((_QWORD *)a2 + 4) + v23;
LABEL_28:
            *((_QWORD *)a2 + 4) = v21;
          }
        }
        else
        {
          v9 = a2;
          v10 = (const char *)a3;
          v11 = a4;
LABEL_8:
          llvm::raw_ostream::write(v9, v10, v11);
        }
        return;
      case 6:
        sub_1C639D338(a3, a2);
        return;
      case 7:
        v14 = (_BYTE *)*((_QWORD *)a2 + 4);
        if ((unint64_t)v14 < *((_QWORD *)a2 + 3))
        {
          *((_QWORD *)a2 + 4) = v14 + 1;
          *v14 = a3;
        }
        else
        {
          llvm::raw_ostream::write(a2, a3);
        }
        return;
      case 8:
        v15 = a3;
        goto LABEL_12;
      case 9:
        v15 = (int)a3;
        if (a3 << 32 < (uint64_t)0xFFFFFFFF00000001)
          goto LABEL_25;
        goto LABEL_12;
      case 10:
      case 12:
        v15 = *(_QWORD *)a3;
        goto LABEL_12;
      case 11:
        v15 = *(_QWORD *)a3;
        if ((*(_QWORD *)a3 & 0x8000000000000000) != 0)
        {
LABEL_25:
          v15 = -(uint64_t)v15;
          v16 = a2;
          v17 = 1;
        }
        else
        {
LABEL_12:
          v16 = a2;
          v17 = 0;
        }
        sub_1C5E21910(v16, v15, 0, 0, v17);
        return;
      case 13:
        llvm::raw_ostream::operator<<(a2, *(_QWORD *)a3);
        return;
      case 14:
        llvm::raw_ostream::write_hex(a2, *(_QWORD *)a3);
        return;
      default:
        return;
    }
  }
}

uint64_t llvm::TypeSize::operator unsigned long long(_DWORD *a1, const char *a2)
{
  _DWORD *v3;

  if (a1[2] == 1)
  {
    v3 = a1;
    a1 = v3;
  }
  return *(_QWORD *)a1;
}

llvm::cl::Option *sub_1C5E503A8()
{
  llvm::cl::Option *v0;
  int v2;
  __n128 v3;
  char v4;
  char *v5;
  int v6;

  v0 = (llvm::cl::Option *)operator new();
  v6 = 1;
  v4 = 0;
  v5 = &v4;
  v3.n128_u64[0] = (unint64_t)"Treat issues where a fixed-width property is requested from a scalable type as a wa"
                                     "rning, instead of an error.";
  v3.n128_u64[1] = 110;
  v2 = 1;
  return sub_1C6395FF0(v0, &v6, &v5, &v3, &v2);
}

BOOL llvm::sys::unicode::isPrintable(llvm::sys::unicode *this)
{
  char *v1;
  unint64_t v2;
  unint64_t v3;
  char *v4;
  unsigned int v5;
  char *v6;

  if (this >> 16 > 0x10)
    return 0;
  v1 = (char *)&unk_1C8670D0C;
  v2 = 548;
  do
  {
    v3 = v2 >> 1;
    v4 = &v1[8 * (v2 >> 1)];
    v5 = *((_DWORD *)v4 + 1);
    v6 = v4 + 8;
    v2 += ~(v2 >> 1);
    if (v5 < this)
      v1 = v6;
    else
      v2 = v3;
  }
  while (v2);
  return v1 == (char *)&unk_1C8671E2C || *(_DWORD *)v1 > this;
}

uint64_t llvm::sys::unicode::columnWidthUTF8(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  unsigned int v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unsigned int v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  unsigned int v25;
  char *v26;
  int v27;
  unsigned int *v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;

  if (a2)
  {
    v4 = 0;
    LODWORD(v5) = 0;
    while (1)
    {
      v6 = a1 + v4;
      v7 = byte_1C866F783[*(unsigned __int8 *)(a1 + v4)];
      if (byte_1C866F783[*(unsigned __int8 *)(a1 + v4)])
      {
        if (v7 == -1)
          return 4294967294;
        v8 = (v7 + 1);
        v4 += v8;
        if (v4 > a2)
          return 4294967294;
        v29 = &v31;
        v30 = v6;
        if (sub_1C5DE6EDC(&v30, (unsigned __int8 *)(v6 + v8), &v29, (unint64_t)&v32, 0, 0))
          return 4294967294;
        if (HIWORD(v31) > 0x10u)
          return 0xFFFFFFFFLL;
        v9 = (char *)&unk_1C8670D0C;
        v10 = 548;
        do
        {
          v11 = v10 >> 1;
          v12 = &v9[8 * (v10 >> 1)];
          v13 = *((_DWORD *)v12 + 1);
          v14 = v12 + 8;
          v10 += ~(v10 >> 1);
          if (v31 > v13)
            v9 = v14;
          else
            v10 = v11;
        }
        while (v10);
        if (v9 != (char *)&unk_1C8671E2C && v31 >= *(_DWORD *)v9)
          return 0xFFFFFFFFLL;
        v15 = (char *)&unk_1C8671E2C;
        v16 = 218;
        do
        {
          v17 = v16 >> 1;
          v18 = &v15[8 * (v16 >> 1)];
          v19 = *((_DWORD *)v18 + 1);
          v20 = v18 + 8;
          v16 += ~(v16 >> 1);
          if (v31 > v19)
            v15 = v20;
          else
            v16 = v17;
        }
        while (v16);
        if (v15 == (char *)&unk_1C86724FC || v31 < *(_DWORD *)v15)
        {
          v21 = (char *)&unk_1C86724FC;
          v22 = 15;
          do
          {
            v23 = v22 >> 1;
            v24 = &v21[8 * (v22 >> 1)];
            v25 = *((_DWORD *)v24 + 1);
            v26 = v24 + 8;
            v22 += ~(v22 >> 1);
            if (v31 > v25)
              v21 = v26;
            else
              v22 = v23;
          }
          while (v22);
          if (v21 == &jpt_1C63964E8)
          {
            v27 = 1;
          }
          else if (v31 < *(_DWORD *)v21)
          {
            v27 = 1;
          }
          else
          {
            v27 = 2;
          }
        }
        else
        {
          v27 = 0;
        }
        v5 = (v27 + v5);
      }
      else
      {
        if (*(unsigned __int8 *)(a1 + v4) - 32 > 0x5E)
          return 0xFFFFFFFFLL;
        v5 = (v5 + 1);
        ++v4;
      }
      if (v4 >= a2)
        return v5;
    }
  }
  return 0;
}

llvm::raw_ostream *llvm::VersionTuple::getAsString@<X0>(llvm::VersionTuple *this@<X0>, _QWORD *a2@<X8>)
{
  llvm::raw_ostream *result;
  void (**v3)(llvm::raw_ostream *__hidden);
  int v4;
  llvm::raw_ostream *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = 0;
  v8 = 0;
  v9 = 0;
  v3 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v11 = a2;
  v10 = 0;
  v6 = 0;
  v7 = 0;
  v5 = 0;
  result = llvm::operator<<((llvm::raw_ostream *)&v3, this);
  v3 = off_1E81A6E70;
  if (v10 == 1)
  {
    result = v5;
    if (v5)
      return (llvm::raw_ostream *)MEMORY[0x1CAA32F9C](v5, 0x1000C8077774924);
  }
  return result;
}

uint64_t llvm::VersionTuple::tryParse(unint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;

  if (!a3)
    return 1;
  v3 = *a2;
  if ((v3 - 58) < 0xFFFFFFF6)
    return 1;
  LODWORD(v5) = v3 - 48;
  if (a3 == 1)
    goto LABEL_16;
  v6 = a2[1];
  if ((v6 - 58) >= 0xFFFFFFF6)
  {
    while (1)
    {
      LODWORD(v5) = v6 + 10 * v5 - 48;
      if (a3 == 2)
        break;
      v6 = a2[2];
      ++a2;
      --a3;
      if ((v6 - 58) < 0xFFFFFFF6)
        goto LABEL_8;
    }
LABEL_16:
    v11 = 0;
    v5 = v5;
    goto LABEL_17;
  }
LABEL_8:
  v4 = 1;
  if (a3 != 2 && v6 == 46)
  {
    v7 = a2[2];
    if ((v7 - 58) < 0xFFFFFFF6)
      return 1;
    v8 = (v7 - 48);
    if (a3 == 3)
    {
LABEL_15:
      v11 = 0;
      v5 = v5 | (unint64_t)(v8 << 32) | 0x8000000000000000;
      goto LABEL_17;
    }
    v9 = 0;
    while (1)
    {
      v10 = a2[v9 + 3];
      if ((v10 - 58) < 0xFFFFFFF6)
        break;
      v8 = (v10 + 10 * v8 - 48);
      if (a3 - 3 == ++v9)
        goto LABEL_15;
    }
    v4 = 1;
    if (a3 - 4 != v9 && v10 == 46)
    {
      v13 = a2[v9 + 4];
      if ((v13 - 58) < 0xFFFFFFF6)
        return 1;
      v14 = v13 - 48;
      if (a3 - 5 == v9)
      {
LABEL_25:
        v5 = v5 | (unint64_t)(v8 << 32) | 0x8000000000000000;
        v11 = v14 | 0x80000000;
        goto LABEL_17;
      }
      while (1)
      {
        v15 = a2[v9 + 5];
        if ((v15 - 58) < 0xFFFFFFF6)
          break;
        v14 = v15 + 10 * v14 - 48;
        if (a3 - 5 == ++v9)
          goto LABEL_25;
      }
      v4 = 1;
      if (a3 - 6 != v9 && v15 == 46)
      {
        v16 = a2[v9 + 6];
        if ((v16 - 58) >= 0xFFFFFFF6)
        {
          v17 = (v16 - 48);
          if (a3 - 7 != v9)
          {
            v18 = a3 - v9 - 7;
            v19 = &a2[v9 + 7];
            do
            {
              v20 = *v19;
              if ((v20 - 58) < 0xFFFFFFF6)
                return 1;
              ++v19;
              v17 = (v20 + 10 * v17 - 48);
            }
            while (--v18);
          }
          v11 = v14 | (unint64_t)(v17 << 32) | 0x8000000080000000;
          v5 = v5 | (unint64_t)(v8 << 32) | 0x8000000000000000;
LABEL_17:
          v4 = 0;
          *a1 = v5;
          a1[1] = v11;
          return v4;
        }
        return 1;
      }
    }
  }
  return v4;
}

uint64_t llvm::vfs::Status::Status(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 24) = *(int *)(a2 + 48);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(unsigned int *)(a2 + 20);
  *(_QWORD *)(a1 + 40) = v5 + 1000 * std::chrono::system_clock::from_time_t(*(_QWORD *)(a2 + 8)).__d_.__rep_;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 40);
  *(_WORD *)(a1 + 72) = 0;
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 24) = *(int *)(a2 + 48);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(unsigned int *)(a2 + 20);
  *(_QWORD *)(a1 + 40) = v5 + 1000 * std::chrono::system_clock::from_time_t(*(_QWORD *)(a2 + 8)).__d_.__rep_;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 40);
  *(_WORD *)(a1 + 72) = 0;
  return a1;
}

uint64_t llvm::vfs::Status::Status(uint64_t a1, llvm::Twine *this, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, int a9, int a10)
{
  llvm::Twine::str(this, (_QWORD *)a1);
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = a5;
  *(_DWORD *)(a1 + 48) = a6;
  *(_DWORD *)(a1 + 52) = a7;
  *(_QWORD *)(a1 + 56) = a8;
  *(_DWORD *)(a1 + 64) = a9;
  *(_DWORD *)(a1 + 68) = a10;
  *(_WORD *)(a1 + 72) = 0;
  return a1;
}

{
  llvm::Twine::str(this, (_QWORD *)a1);
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = a5;
  *(_DWORD *)(a1 + 48) = a6;
  *(_DWORD *)(a1 + 52) = a7;
  *(_QWORD *)(a1 + 56) = a8;
  *(_DWORD *)(a1 + 64) = a9;
  *(_DWORD *)(a1 + 68) = a10;
  *(_WORD *)(a1 + 72) = 0;
  return a1;
}

void llvm::vfs::Status::copyWithNewName(llvm::vfs::Status *this@<X0>, const llvm::sys::fs::file_status *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7 = *((int *)this + 12);
  v8 = *((_QWORD *)this + 7);
  v9 = *((unsigned int *)this + 5);
  v10 = v9 + 1000 * std::chrono::system_clock::from_time_t(*((_QWORD *)this + 1)).__d_.__rep_;
  v11 = *((_QWORD *)this + 4);
  v12 = *((_QWORD *)this + 3);
  v13 = *((_QWORD *)this + 5);
  llvm::Twine::str(a2, (_QWORD *)a3);
  *(_QWORD *)(a3 + 24) = v7;
  *(_QWORD *)(a3 + 32) = v8;
  *(_QWORD *)(a3 + 40) = v10;
  *(_QWORD *)(a3 + 48) = v12;
  *(_QWORD *)(a3 + 56) = v11;
  *(_QWORD *)(a3 + 64) = v13;
  *(_WORD *)(a3 + 72) = 0;
}

BOOL llvm::vfs::Status::isDirectory(llvm::vfs::Status *this)
{
  return *((_DWORD *)this + 16) == 3;
}

BOOL llvm::vfs::Status::isOther(llvm::vfs::Status *this)
{
  return *((_DWORD *)this + 16) > 4u;
}

BOOL llvm::vfs::Status::exists(llvm::vfs::Status *this)
{
  return *((_DWORD *)this + 16) > 1u;
}

BOOL llvm::vfs::Status::isSymlink(llvm::vfs::Status *this)
{
  return *((_DWORD *)this + 16) == 4;
}

BOOL llvm::vfs::Status::isStatusKnown(llvm::vfs::Status *this)
{
  return *((_DWORD *)this + 16) != 0;
}

_QWORD *llvm::vfs::FileSystem::getBufferForFile@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X5>, uint64_t a7@<X8>)
{
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  char v17;
  _QWORD v18[2];
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  result = (*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 24))(v18);
  if ((v19 & 1) != 0)
  {
    v14 = v18[0];
    v15 = v18[1];
  }
  else
  {
    if (!a6)
    {
LABEL_3:
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18[0] + 32))(v18[0], a2, a3, a4, a5);
      goto LABEL_4;
    }
    result = (*(_QWORD *(**)(__int128 *__return_ptr))(*(_QWORD *)v18[0] + 40))(&v16);
    if ((v17 & 1) == 0)
    {
      *a6 = v16;
      goto LABEL_3;
    }
    v15 = *((_QWORD *)&v16 + 1);
    v14 = v16;
  }
  *(_BYTE *)(a7 + 16) |= 1u;
  *(_QWORD *)a7 = v14;
  *(_QWORD *)(a7 + 8) = v15;
LABEL_4:
  if ((v19 & 1) == 0)
  {
    result = (_QWORD *)v18[0];
    v18[0] = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

unint64_t llvm::vfs::FileSystem::makeAbsolute(uint64_t a1, uint64_t a2)
{
  const char *v4;
  unint64_t v5;
  unsigned int v6;
  const char *v8[4];
  __int16 v9;
  void *__p;
  char v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v9 = 261;
  v4 = *(const char **)(a2 + 8);
  v8[0] = *(const char **)a2;
  v8[1] = v4;
  if (llvm::sys::path::is_absolute(v8, 0))
  {
    std::system_category();
    v5 = 0;
    v6 = 0;
  }
  else
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 48))(&__p, a1);
    if ((v12 & 1) != 0)
    {
      v6 = __p;
      v5 = (unint64_t)__p & 0xFFFFFFFF00000000;
    }
    else
    {
      v9 = 260;
      v8[0] = (const char *)&__p;
      llvm::sys::fs::make_absolute((uint64_t)v8, (char **)a2);
      std::system_category();
      v5 = 0;
      v6 = 0;
      if ((v12 & 1) == 0 && v11 < 0)
        operator delete(__p);
    }
  }
  return v6 | v5;
}

BOOL llvm::vfs::FileSystem::exists(uint64_t a1)
{
  char v1;
  unsigned int v2;
  void *__p;
  char v6;
  unsigned int v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(&__p);
  v1 = v8;
  v2 = v7;
  if ((v8 & 1) == 0 && v6 < 0)
    operator delete(__p);
  return (v1 & 1) == 0 && v2 > 1;
}

uint64_t llvm::vfs::OverlayFileSystem::OverlayFileSystem(uint64_t a1, char *a2)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1E81A4060;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  *(_QWORD *)(a1 + 24) = 0x100000000;
  sub_1C5E50E78(a1 + 16, a2);
  return a1;
}

{
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1E81A4060;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  *(_QWORD *)(a1 + 24) = 0x100000000;
  sub_1C5E50E78(a1 + 16, a2);
  return a1;
}

void sub_1C5E50E78(uint64_t a1, char *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v10;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v7 = v4 + 1;
    v8 = v5 + 8 * v4;
    if (v5 <= (unint64_t)a2 && v8 > (unint64_t)a2)
    {
      v10 = &a2[-v5];
      sub_1C6399308(a1, v7);
      v5 = *(_QWORD *)a1;
      a2 = &v10[*(_QWORD *)a1];
    }
    else
    {
      sub_1C6399308(a1, v7);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = *(unsigned int *)(a1 + 8);
  *(_QWORD *)(v5 + 8 * v6) = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 8) = v6 + 1;
}

void llvm::vfs::OverlayFileSystem::pushOverlay(uint64_t a1, char *a2)
{
  unint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v16;
  void **v17;
  __int16 v18;
  void *__p[2];
  char v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = (unint64_t *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(unsigned int *)(a1 + 24);
  v7 = a2;
  if (v6 >= *(_DWORD *)(a1 + 28))
  {
    v13 = v6 + 1;
    v14 = v4 + 8 * v6;
    if (v4 <= (unint64_t)a2 && v14 > (unint64_t)a2)
    {
      v16 = &a2[-v4];
      sub_1C6399308(a1 + 16, v13);
      v4 = *v5;
      v7 = &v16[*v5];
    }
    else
    {
      sub_1C6399308(a1 + 16, v13);
      v4 = *v5;
      v7 = a2;
    }
  }
  v8 = *(unsigned int *)(a1 + 24);
  v9 = *(_QWORD *)v7;
  *(_QWORD *)(v4 + 8 * v8) = v9;
  if (v9)
  {
    v10 = (unsigned int *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    LODWORD(v8) = *(_DWORD *)(a1 + 24);
  }
  *(_DWORD *)(a1 + 24) = v8 + 1;
  v12 = *(_QWORD *)a2;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 48))(__p, a1);
  v18 = 260;
  v17 = __p;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)v12 + 40))(v12, &v17);
  if ((v21 & 1) == 0 && v20 < 0)
    operator delete(__p[0]);
}

const std::error_category *llvm::vfs::OverlayFileSystem::status@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  const std::error_category *result;
  uint64_t v9;
  const std::error_category *v10;

  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    v7 = *(_QWORD *)(a1 + 16) - 8;
    while (1)
    {
      result = (const std::error_category *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v7 + v6) + 16))(*(_QWORD *)(v7 + v6), a2);
      if ((a3[20] & 1) == 0)
        break;
      v9 = *a3;
      v10 = (const std::error_category *)*((_QWORD *)a3 + 1);
      result = std::generic_category();
      if (v10 != result || v9 != 2)
        break;
      if ((a3[20] & 1) == 0 && *((char *)a3 + 23) < 0)
        operator delete(*(void **)a3);
      v6 -= 8;
      if (!v6)
        goto LABEL_13;
    }
  }
  else
  {
LABEL_13:
    result = std::generic_category();
    *((_BYTE *)a3 + 80) |= 1u;
    *(_QWORD *)a3 = 2;
    *((_QWORD *)a3 + 1) = result;
  }
  return result;
}

const std::error_category *llvm::vfs::OverlayFileSystem::openFileForRead@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  const std::error_category *result;
  uint64_t v9;
  const std::error_category *v10;
  uint64_t v12;

  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    v7 = *(_QWORD *)(a1 + 16) - 8;
    while (1)
    {
      result = (const std::error_category *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v7 + v6) + 24))(*(_QWORD *)(v7 + v6), a2);
      if ((a3[4] & 1) == 0)
        break;
      v9 = *a3;
      v10 = (const std::error_category *)*((_QWORD *)a3 + 1);
      result = std::generic_category();
      if (v10 != result || v9 != 2)
        break;
      if ((a3[4] & 1) == 0)
      {
        v12 = *(_QWORD *)a3;
        *(_QWORD *)a3 = 0;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      }
      v6 -= 8;
      if (!v6)
        goto LABEL_13;
    }
  }
  else
  {
LABEL_13:
    result = std::generic_category();
    *((_BYTE *)a3 + 16) |= 1u;
    *(_QWORD *)a3 = 2;
    *((_QWORD *)a3 + 1) = result;
  }
  return result;
}

unint64_t llvm::vfs::OverlayFileSystem::setCurrentWorkingDirectory(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v4 = *(_QWORD **)(a1 + 16);
    v5 = 8 * v2;
    while (1)
    {
      v6 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v4 + 40))(*v4, a2);
      v7 = v6;
      if ((_DWORD)v6)
        break;
      ++v4;
      v5 -= 8;
      if (!v5)
      {
        v8 = v6 & 0xFFFFFFFF00000000;
        goto LABEL_7;
      }
    }
    v8 = v6 & 0xFFFFFFFF00000000;
  }
  else
  {
    v8 = 0;
LABEL_7:
    std::system_category();
    v7 = 0;
  }
  return v7 | v8;
}

uint64_t llvm::vfs::OverlayFileSystem::isLocal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;

  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3)
  {
    v6 = *(_QWORD **)(a1 + 16);
    v7 = 8 * v3;
    while (((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v6 + 72))(*v6, a2) & 1) == 0)
    {
      ++v6;
      v7 -= 8;
      if (!v7)
        goto LABEL_5;
    }
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v6 + 80))(*v6, a2, a3);
  }
  else
  {
LABEL_5:
    std::generic_category();
    return 2;
  }
}

uint64_t llvm::vfs::OverlayFileSystem::getRealPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;

  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3)
  {
    v6 = *(_QWORD **)(a1 + 16);
    v7 = 8 * v3;
    while (((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v6 + 72))(*v6, a2) & 1) == 0)
    {
      ++v6;
      v7 -= 8;
      if (!v7)
        goto LABEL_5;
    }
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v6 + 56))(*v6, a2, a3);
  }
  else
  {
LABEL_5:
    std::generic_category();
    return 2;
  }
}

__n128 llvm::vfs::OverlayFileSystem::printImpl(uint64_t a1, llvm::raw_ostream *this, int a3, int a4)
{
  uint64_t v5;
  int v8;
  _WORD *v9;
  uint64_t v10;
  __n128 result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;

  LODWORD(v5) = a3;
  if (a4)
  {
    v8 = a4;
    do
    {
      v9 = (_WORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v9 > 1uLL)
      {
        *v9 = 8224;
        *((_QWORD *)this + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(this, "  ", 2uLL);
      }
      --v8;
    }
    while (v8);
  }
  v10 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v10) > 0x11)
  {
    *(_WORD *)(v10 + 16) = 2669;
    result = *(__n128 *)"OverlayFileSystem\n";
    *(_OWORD *)v10 = *(_OWORD *)"OverlayFileSystem\n";
    *((_QWORD *)this + 4) += 18;
    if (!(_DWORD)v5)
      return result;
  }
  else
  {
    llvm::raw_ostream::write(this, "OverlayFileSystem\n", 0x12uLL);
    if (!(_DWORD)v5)
      return result;
  }
  if ((_DWORD)v5 == 1)
    v5 = 0;
  else
    v5 = v5;
  v12 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v12)
  {
    v13 = *(_QWORD *)(a1 + 16);
    v14 = v13 + 8 * v12;
    v15 = (a4 + 1);
    do
    {
      v17 = *(unsigned int **)(v14 - 8);
      v14 -= 8;
      v16 = v17;
      if (v17)
      {
        v18 = v16 + 2;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v20 = v16 + 2;
      (*(void (**)(unsigned int *, llvm::raw_ostream *, uint64_t, uint64_t))(*(_QWORD *)v16 + 104))(v16, this, v5, v15);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
        (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
    }
    while (v14 != v13);
  }
  return result;
}

void llvm::vfs::detail::DirIterImpl::~DirIterImpl(void **this)
{
  *this = off_1E81A40E0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

double llvm::vfs::OverlayFileSystem::dir_begin@<D0>(llvm::vfs::OverlayFileSystem *this@<X0>, const llvm::Twine *a2@<X1>, std::error_code *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  unsigned int **v7;
  uint64_t v8;
  unsigned int **v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  const std::error_category *v19;
  double result;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  void *v34[2];
  uint64_t v35;
  char *v36;
  std::__shared_weak_count *v37;
  void *__p[2];
  uint64_t v39;
  double v40[4];
  __int16 v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  std::error_code v44;

  llvm::Twine::str(a2, v34);
  v6 = operator new(0x100uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E81A4668;
  v6[3] = off_1E81A46A0;
  v7 = (unsigned int **)*((_QWORD *)this + 2);
  v8 = *((unsigned int *)this + 6);
  *(_OWORD *)__p = *(_OWORD *)v34;
  v39 = v35;
  v34[0] = 0;
  v34[1] = 0;
  v35 = 0;
  v6[5] = 0;
  v6[6] = 0;
  v6[4] = 0;
  *((_DWORD *)v6 + 14) = 9;
  v6[8] = v6 + 10;
  v6[9] = 0x800000000;
  *((_OWORD *)v6 + 13) = 0u;
  *((_OWORD *)v6 + 14) = 0u;
  *((_DWORD *)v6 + 60) = 0;
  *((_DWORD *)v6 + 61) = 8;
  if (!(_DWORD)v8)
  {
LABEL_21:
    *(_QWORD *)&a3->__val_ = sub_1C5E5CE74((uint64_t)(v6 + 3), 1);
    a3->__cat_ = v19;
    goto LABEL_22;
  }
  v9 = &v7[v8];
  while (1)
  {
    v10 = *v7;
    if (*v7)
    {
      v11 = v10 + 2;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v44.__val_ = 0;
    v44.__cat_ = std::system_category();
    v41 = 260;
    *(_QWORD *)&v40[0] = __p;
    (*(void (**)(uint64_t *__return_ptr, unsigned int *, double *, std::error_code *))(*(_QWORD *)v10 + 32))(&v42, v10, v40, &v44);
    if (v44.__val_)
      break;
    sub_1C5E54400((uint64_t)(v6 + 8), (char *)&v42);
LABEL_11:
    v13 = v43;
    if (v43)
    {
      p_shared_owners = (unint64_t *)&v43->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = v10 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
    if (++v7 == v9)
      goto LABEL_21;
  }
  if (v44.__cat_ == std::generic_category() && v44.__val_ == 2)
    goto LABEL_11;
  *a3 = v44;
  v27 = v43;
  if (v43)
  {
    v28 = (unint64_t *)&v43->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v10 + 2;
  do
  {
    v31 = __ldaxr(v30);
    v32 = v31 - 1;
  }
  while (__stlxr(v32, v30));
  if (!v32)
    (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
LABEL_22:
  if (SHIBYTE(v39) < 0)
    operator delete(__p[0]);
  v36 = (char *)(v6 + 3);
  v37 = (std::__shared_weak_count *)v6;
  sub_1C61D51BC(v40, (uint64_t)&v36);
  v21 = v37;
  if (v37)
  {
    v22 = (unint64_t *)&v37->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (SHIBYTE(v35) < 0)
    operator delete(v34[0]);
  if (a3->__val_)
  {
    v24 = *(std::__shared_weak_count **)&v40[1];
    *a4 = 0;
    a4[1] = 0;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  else
  {
    result = v40[0];
    *(_OWORD *)a4 = *(_OWORD *)v40;
  }
  return result;
}

llvm::vfs::InMemoryFileSystem *llvm::vfs::InMemoryFileSystem::InMemoryFileSystem(llvm::vfs::InMemoryFileSystem *this, char a2)
{
  uint64_t v4;
  unint64_t v5;
  _WORD v7[20];
  void *__p[2];
  char v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  _QWORD v18[2];

  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E81A4108;
  v4 = operator new();
  v7[16] = 257;
  v18[0] = "";
  v18[1] = 0;
  v17 = 0;
  v5 = sub_1C63983E4(&v17, (uint64_t)v18);
  llvm::Twine::str((llvm::Twine *)v7, __p);
  v10 = -1;
  v11 = v5;
  v13 = 0;
  v14 = 0;
  v12 = 0;
  v15 = 0x1FF00000003;
  v16 = 0;
  sub_1C5E5AA04(v4, (uint64_t *)__p);
  *((_QWORD *)this + 2) = v4;
  if (v9 < 0)
    operator delete(__p[0]);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = a2;
  return this;
}

void llvm::vfs::InMemoryFileSystem::~InMemoryFileSystem(void **this)
{
  void *v2;

  *this = off_1E81A4108;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  v2 = this[2];
  this[2] = 0;
  if (v2)
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
}

{
  void *v2;

  *this = off_1E81A4108;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  v2 = this[2];
  this[2] = 0;
  if (v2)
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
}

{
  void *v2;

  *this = off_1E81A4108;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  v2 = this[2];
  this[2] = 0;
  if (v2)
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::vfs::InMemoryFileSystem::toString(llvm::vfs::InMemoryFileSystem *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2), 0);
}

BOOL llvm::vfs::InMemoryFileSystem::addFile(uint64_t a1, uint64_t a2, time_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(size_t *__return_ptr, uint64_t, __int128 *), uint64_t a10)
{
  size_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  void *v21;
  size_t v22;
  uint64_t v23;
  int v24;
  size_t v25;
  unsigned __int8 *v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  size_t v33;
  unsigned int v34;
  uint64_t v36;
  unint64_t v37;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v38;
  size_t v39;
  size_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  _BOOL8 v46;
  uint64_t v47;
  const char *v48;
  size_t v49;
  const void *v50;
  int v52;
  int v53;
  int v54;
  uint64_t *v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  void *v59;
  size_t v61;
  void *__p[2];
  void *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int16 v67;
  size_t v68;
  uint64_t v69[2];
  unsigned __int8 *v70;
  size_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[2];
  void *v75;
  __int128 v76;
  _BYTE v77[128];
  __int128 v78;
  void *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  int v83;
  int v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v75 = v77;
  v76 = xmmword_1C85F20B0;
  llvm::Twine::toVector(a2, (uint64_t)&v75);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 88))(a1, &v75);
  if (*(_BYTE *)(a1 + 48))
    llvm::sys::path::remove_dots((unsigned __int8 **)&v75, 1, 0);
  if (!(_QWORD)v76)
    goto LABEL_64;
  v55 = a4;
  v16 = *(_QWORD *)(a1 + 16);
  llvm::sys::path::begin((unint64_t)v75, v76, 0, (uint64_t)v69);
  v58 = v76;
  v59 = v75;
  if ((a5 & 0xFF00000000) != 0)
    v17 = a5;
  else
    v17 = 0;
  if ((a6 & 0xFF00000000) != 0)
    v18 = a6;
  else
    v18 = 0;
  v56 = v18;
  v57 = v17;
  if ((a7 & 0xFF00000000) != 0)
    v19 = a7;
  else
    v19 = 2;
  if ((a8 & 0xFF00000000) != 0)
    v20 = a8;
  else
    v20 = 511;
  v53 = v20;
  v54 = v19;
  v52 = (unsigned __int16)v20 | 0x1C0;
  do
  {
    while (1)
    {
      v21 = v70;
      v22 = v71;
      v23 = *(unsigned int *)(v16 + 128);
      if ((_DWORD)v23)
      {
        v24 = 0;
        if (v71)
        {
          v25 = v71;
          v26 = v70;
          do
          {
            v27 = *v26++;
            v24 = 33 * v24 + v27;
            --v25;
          }
          while (v25);
        }
        v28 = *(_QWORD *)(v16 + 120);
        v29 = 1;
        v30 = v24;
        while (1)
        {
          v31 = v30 & (v23 - 1);
          v32 = *(_QWORD **)(v28 + 8 * v31);
          if (v32 != (_QWORD *)-8)
          {
            if (!v32)
              goto LABEL_34;
            if (*(_DWORD *)(v28 + 8 * v23 + 8 + 4 * v31) == v24
              && v22 == *v32
              && (!v22 || !memcmp(v21, (char *)v32 + *(unsigned int *)(v16 + 140), v22)))
            {
              break;
            }
          }
          v30 = v29 + v31;
          ++v29;
        }
        if ((_DWORD)v31 != -1 && (int)v31 != v23)
          break;
      }
LABEL_34:
      llvm::sys::path::const_iterator::operator++(v69);
LABEL_35:
      if ((void *)v69[0] == v59 && v72 == v58)
      {
        v41 = v75;
        v42 = v76;
        v43 = *v55;
        *v55 = 0;
        v78 = *(_OWORD *)(v16 + 64);
        v79 = v41;
        *(_QWORD *)&v80 = v42;
        *((_QWORD *)&v80 + 1) = v21;
        *(_QWORD *)&v81 = v22;
        *((_QWORD *)&v81 + 1) = a3;
        *(_QWORD *)&v82 = v43;
        *((_QWORD *)&v82 + 1) = __PAIR64__(v56, v57);
        v83 = v54;
        v84 = v53;
        a9(&v68, a10, &v78);
        v44 = v82;
        *(_QWORD *)&v82 = 0;
        if (v44)
          (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
        sub_1C63975A8(v16, (unsigned __int8 *)v21, v22, &v68);
        v45 = v68;
        v68 = 0;
        if (v45)
          (*(void (**)(size_t))(*(_QWORD *)v45 + 8))(v45);
        goto LABEL_49;
      }
      WORD4(v80) = 261;
      *(_QWORD *)&v78 = v75;
      *((_QWORD *)&v78 + 1) = (_BYTE *)v21 + v22 - (_BYTE *)v75;
      v36 = *(_QWORD *)(v16 + 72);
      v74[0] = v21;
      v74[1] = v22;
      v73 = v36;
      v37 = sub_1C63983E4(&v73, (uint64_t)v74);
      v38 = 1000000000 * (std::chrono::system_clock::from_time_t(a3).__d_.__rep_ / 1000000);
      llvm::Twine::str((llvm::Twine *)&v78, __p);
      *(_QWORD *)&v64 = -1;
      *((_QWORD *)&v64 + 1) = v37;
      *(_QWORD *)&v65 = v38;
      *((_QWORD *)&v65 + 1) = __PAIR64__(v56, v57);
      *(_QWORD *)&v66 = 0;
      DWORD2(v66) = 3;
      HIDWORD(v66) = v52;
      v67 = 0;
      v39 = operator new();
      v78 = *(_OWORD *)__p;
      v79 = v63;
      __p[0] = 0;
      __p[1] = 0;
      v63 = 0;
      v80 = v64;
      v81 = v65;
      v82 = v66;
      LOWORD(v83) = v67;
      sub_1C5E5AA04(v39, (uint64_t *)&v78);
      if (SHIBYTE(v79) < 0)
        operator delete((void *)v78);
      v61 = v39;
      v16 = sub_1C63975A8(v16, (unsigned __int8 *)v21, v22, &v61);
      v40 = v61;
      v61 = 0;
      if (v40)
        (*(void (**)(size_t))(*(_QWORD *)v40 + 8))(v40);
      if (SHIBYTE(v63) < 0)
        operator delete(__p[0]);
    }
    v33 = *(_QWORD *)(*(_QWORD *)(v28 + 8 * (int)v31) + 8);
    llvm::sys::path::const_iterator::operator++(v69);
    if (!v33)
      goto LABEL_35;
    v34 = *(_DWORD *)(v33 + 8);
    v16 = v33;
  }
  while (v34 == 2);
  v46 = 0;
  if ((void *)v69[0] != v59 || v72 != v58)
    goto LABEL_65;
  v47 = *v55;
  if (*v55)
  {
    v48 = *(const char **)(v47 + 8);
    v49 = *(_QWORD *)(v47 + 16) - (_QWORD)v48;
  }
  else
  {
    v49 = 0;
    v48 = "";
  }
  if (v34 != 3)
  {
    if (v34 <= 1)
    {
      (*(void (**)(__int128 *__return_ptr, size_t))(*(_QWORD *)v33 + 32))(&v78, v33);
      goto LABEL_60;
    }
    goto LABEL_64;
  }
  (*(void (**)(__int128 *__return_ptr, _QWORD))(**(_QWORD **)(v33 + 40) + 32))(&v78, *(_QWORD *)(v33 + 40));
LABEL_60:
  if ((v79 & 1) != 0 || (v50 = *(const void **)(v78 + 8), *(_QWORD *)(v78 + 16) - (_QWORD)v50 != v49))
  {
LABEL_64:
    v46 = 0;
    goto LABEL_65;
  }
  if (!v49)
  {
LABEL_49:
    v46 = 1;
    goto LABEL_65;
  }
  v46 = memcmp(v50, v48, v49) == 0;
LABEL_65:
  if (v75 != v77)
    free(v75);
  return v46;
}

BOOL llvm::vfs::InMemoryFileSystem::addLazyFile(uint64_t a1, uint64_t a2, time_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _BOOL8 v9;
  _QWORD v11[2];
  uint64_t v12;

  v12 = 0;
  v11[0] = a4;
  v11[1] = a5;
  v9 = llvm::vfs::InMemoryFileSystem::addFile(a1, a2, a3, &v12, a6, a7, a8, a9, (void (*)(size_t *__return_ptr, uint64_t, __int128 *))sub_1C5E5D734, (uint64_t)v11);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return v9;
}

BOOL llvm::vfs::InMemoryFileSystem::addFileNoOwn(uint64_t a1, uint64_t a2, time_t a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v15;
  _BOOL8 v16;
  char v18;
  _OWORD v19[2];
  char *v20;

  v15 = a4[1];
  v19[0] = *a4;
  v19[1] = v15;
  llvm::MemoryBuffer::getMemBuffer((uint64_t *)v19, &v20);
  v16 = llvm::vfs::InMemoryFileSystem::addFile(a1, a2, a3, (uint64_t *)&v20, a5, a6, a7, a8, (void (*)(size_t *__return_ptr, uint64_t, __int128 *))sub_1C5E5DB08, (uint64_t)&v18);
  if (v20)
    (*(void (**)(char *))(*(_QWORD *)v20 + 8))(v20);
  return v16;
}

BOOL llvm::vfs::InMemoryFileSystem::addHardLink(llvm::vfs::InMemoryFileSystem *this, const llvm::Twine *a2, const llvm::Twine *a3)
{
  _BOOL8 v6;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v10[2];
  char v11;
  _BYTE v12[24];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  sub_1C5E52150((uint64_t)v12, this, *((_QWORD *)this + 2), (uint64_t)a2, 0, 0);
  sub_1C5E52150((uint64_t)v10, this, *((_QWORD *)this + 2), (uint64_t)a3, 0, 0);
  v6 = 0;
  if ((v11 & 1) == 0)
  {
    if ((v12[16] & 1) != 0 && *(_DWORD *)(v10[0] + 8) <= 1u)
    {
      v8 = v10;
      v9 = 0;
      v6 = llvm::vfs::InMemoryFileSystem::addFile((uint64_t)this, (uint64_t)a2, 0, &v9, 0, 0, 0, 0, (void (*)(size_t *__return_ptr, uint64_t, __int128 *))sub_1C5E5DCDC, (uint64_t)&v8);
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

void sub_1C5E52150(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, char a5, unint64_t a6)
{
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  void *v13;
  int v14;
  size_t v15;
  unsigned __int8 *v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned int v26;
  const void *v27;
  uint64_t v28;
  const void *v29;
  char v30;
  int v31;
  const void *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL4 v42;
  uint64_t v43;
  int v44;
  const std::error_category *v45;
  uint64_t v46;
  char v47;
  const std::error_category *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v57[4];
  __int16 v58;
  uint64_t v59[2];
  void *__s1;
  size_t __n;
  uint64_t v62;
  _QWORD v63[2];
  char v64;
  void *v65;
  __int128 v66;
  _BYTE v67[128];
  unsigned __int8 *v68;
  __int128 v69;
  _QWORD v70[18];

  v70[16] = *MEMORY[0x1E0C80C00];
  v68 = (unsigned __int8 *)v70;
  v69 = xmmword_1C85F20B0;
  llvm::Twine::toVector(a4, (uint64_t)&v68);
  (*(void (**)(_BYTE *, unsigned __int8 **))(*(_QWORD *)a2 + 88))(a2, &v68);
  if (a2[48])
    llvm::sys::path::remove_dots(&v68, 1, 0);
  if ((_QWORD)v69)
  {
    v50 = a5;
    v54 = a1;
    llvm::sys::path::begin((unint64_t)v68, v69, 0, (uint64_t)v59);
    v55 = a3;
    v10 = *(_DWORD *)(a3 + 128);
    if (v10)
    {
      v51 = v69;
      v52 = v68;
      v11 = a3;
      v12 = __n;
      while (1)
      {
        v13 = __s1;
        v14 = 0;
        if (v12)
        {
          v15 = v12;
          v16 = (unsigned __int8 *)__s1;
          do
          {
            v17 = *v16++;
            v14 = 33 * v14 + v17;
            --v15;
          }
          while (v15);
        }
        v18 = v10 - 1;
        v19 = *(_QWORD *)(v11 + 120);
        v53 = v10;
        v20 = v19 + 8 * v10 + 8;
        v21 = 1;
        v22 = v14;
        while (1)
        {
          v23 = v22 & v18;
          v24 = *(_QWORD **)(v19 + 8 * v23);
          if (v24 != (_QWORD *)-8)
          {
            if (!v24)
              goto LABEL_61;
            if (*(_DWORD *)(v20 + 4 * v23) == v14
              && v12 == *v24
              && (!v12 || !memcmp(v13, (char *)v24 + *(unsigned int *)(v11 + 140), v12)))
            {
              break;
            }
          }
          v22 = v21 + v23;
          ++v21;
        }
        if ((_DWORD)v23 == -1 || (int)v23 == v53)
          goto LABEL_61;
        v25 = *(_QWORD *)(*(_QWORD *)(v19 + 8 * (int)v23) + 8);
        llvm::sys::path::const_iterator::operator++(v59);
        if (!v25)
          goto LABEL_62;
        v26 = *(_DWORD *)(v25 + 8);
        if (v26 == 4)
          break;
        if (v26 <= 1)
        {
          if ((unsigned __int8 *)v59[0] != v52)
            goto LABEL_62;
          v46 = v54;
          v47 = *(_BYTE *)(v54 + 16);
          if (v62 == v51)
          {
            *(_BYTE *)(v54 + 16) = v47 & 0xFE;
            *(_QWORD *)v54 = v25;
            goto LABEL_66;
          }
          goto LABEL_63;
        }
        v42 = (unsigned __int8 *)v59[0] == v52 && v62 == v51;
        if (v26 == 3)
        {
          if (!v42)
            goto LABEL_62;
          v49 = *(_QWORD *)(v25 + 40);
          *(_BYTE *)(v54 + 16) &= ~1u;
          *(_QWORD *)v54 = v49;
          goto LABEL_66;
        }
        if (v42)
          goto LABEL_69;
        v11 = v25;
LABEL_55:
        v12 = __n;
        v10 = *(_DWORD *)(v11 + 128);
        if (!v10)
          goto LABEL_61;
      }
      if ((unsigned __int8 *)v59[0] == v52 && v62 == v51 && (v50 & 1) == 0)
      {
LABEL_69:
        *(_BYTE *)(v54 + 16) &= ~1u;
        *(_QWORD *)v54 = v25;
        goto LABEL_66;
      }
      if (a6 >= 0x11)
        goto LABEL_62;
      v29 = *(const void **)(v25 + 40);
      v28 = v25 + 40;
      v27 = v29;
      v30 = *(_BYTE *)(v28 + 23);
      v31 = v30;
      if (v30 >= 0)
        v32 = (const void *)v28;
      else
        v32 = v27;
      v33 = v30 & 0x7F;
      if (v31 >= 0)
        v34 = v33;
      else
        v34 = *(_QWORD *)(v28 + 8);
      v65 = v67;
      v66 = xmmword_1C85F20B0;
      if (v34 >= 0x81)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v65, v67, v34, 1);
        v37 = v65;
        v35 = v66;
        v38 = v55;
      }
      else
      {
        v35 = 0;
        v36 = 0;
        v37 = v67;
        v38 = v55;
        if (!v34)
          goto LABEL_34;
      }
      memcpy(&v37[v35], v32, v34);
      v36 = v66;
LABEL_34:
      *(_QWORD *)&v66 = v36 + v34;
      v39 = (*(uint64_t (**)(_BYTE *, void **))(*(_QWORD *)a2 + 88))(a2, &v65);
      if ((_DWORD)v39)
      {
        *(_BYTE *)(v54 + 16) |= 1u;
        *(_QWORD *)v54 = v39;
        *(_QWORD *)(v54 + 8) = v40;
      }
      else
      {
        v58 = 261;
        v57[0] = v65;
        v57[1] = v66;
        sub_1C5E52150(v63, a2, v38, v57, 1, a6 + 1);
        if ((v64 & 1) != 0)
        {
          *(_BYTE *)(v54 + 16) |= 1u;
          v43 = v63[1];
          *(_QWORD *)v54 = v63[0];
          *(_QWORD *)(v54 + 8) = v43;
        }
        else if ((unsigned __int8 *)v59[0] == v52 && v62 == v51)
        {
          *(_BYTE *)(v54 + 16) &= ~1u;
          *(_QWORD *)v54 = v63[0];
        }
        else
        {
          if (*(_DWORD *)(v63[0] + 8) == 2)
          {
            v44 = 2;
            v11 = v63[0];
LABEL_52:
            if (v65 != v67)
              free(v65);
            if (v44 != 2)
              goto LABEL_66;
            goto LABEL_55;
          }
          *(_BYTE *)(v54 + 16) |= 1u;
          v45 = std::generic_category();
          *(_QWORD *)v54 = 2;
          *(_QWORD *)(v54 + 8) = v45;
        }
      }
      v44 = 1;
      goto LABEL_52;
    }
LABEL_61:
    llvm::sys::path::const_iterator::operator++(v59);
LABEL_62:
    v46 = v54;
    v47 = *(_BYTE *)(v54 + 16);
LABEL_63:
    *(_BYTE *)(v46 + 16) = v47 | 1;
    v48 = std::generic_category();
    *(_QWORD *)v46 = 2;
    *(_QWORD *)(v46 + 8) = v48;
  }
  else
  {
    *(_BYTE *)(a1 + 16) &= ~1u;
    *(_QWORD *)a1 = a3;
  }
LABEL_66:
  if (v68 != (unsigned __int8 *)v70)
    free(v68);
}

BOOL llvm::vfs::InMemoryFileSystem::addSymbolicLink(uint64_t a1, uint64_t a2, uint64_t a3, time_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _BOOL8 v14;
  _QWORD v16[2];
  uint64_t v17;
  _QWORD v18[4];
  __int16 v19;
  void *v20;
  __int128 v21;
  _BYTE v22[128];
  void *v23;
  __int128 v24;
  _BYTE v25[128];
  _BYTE v26[24];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  sub_1C5E52150((uint64_t)v26, (_BYTE *)a1, *(_QWORD *)(a1 + 16), a2, 0, 0);
  v14 = 0;
  if ((v26[16] & 1) != 0)
  {
    v23 = v25;
    v24 = xmmword_1C85F20B0;
    v20 = v22;
    v21 = xmmword_1C85F20B0;
    llvm::Twine::toVector(a2, (uint64_t)&v23);
    llvm::Twine::toVector(a3, (uint64_t)&v20);
    v19 = 261;
    v18[0] = v23;
    v18[1] = v24;
    v16[1] = &v20;
    v17 = 0;
    v16[0] = &v23;
    v14 = llvm::vfs::InMemoryFileSystem::addFile(a1, (uint64_t)v18, a4, &v17, a5, a6, 0x100000004, a7, (void (*)(size_t *__return_ptr, uint64_t, __int128 *))sub_1C5E5E0A0, (uint64_t)v16);
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    if (v20 != v22)
      free(v20);
    if (v23 != v25)
      free(v23);
  }
  return v14;
}

void llvm::vfs::InMemoryFileSystem::status(llvm::vfs::InMemoryFileSystem *this@<X0>, const llvm::Twine *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int16 v12;
  _QWORD v13[2];
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  sub_1C5E52150((uint64_t)v13, this, *((_QWORD *)this + 2), (uint64_t)a2, 1, 0);
  if ((v14 & 1) != 0)
  {
    v5 = v13[0];
    v6 = v13[1];
    *(_BYTE *)(a3 + 80) |= 1u;
    *(_QWORD *)a3 = v5;
    *(_QWORD *)(a3 + 8) = v6;
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, const llvm::Twine *))(*(_QWORD *)v13[0] + 16))(&v7, v13[0], a2);
    *(_BYTE *)(a3 + 80) &= ~1u;
    *(_OWORD *)a3 = v7;
    *(_QWORD *)(a3 + 16) = v8;
    *(_OWORD *)(a3 + 24) = v9;
    *(_OWORD *)(a3 + 40) = v10;
    *(_OWORD *)(a3 + 56) = v11;
    *(_WORD *)(a3 + 72) = v12;
  }
}

double llvm::vfs::InMemoryFileSystem::openFileForRead@<D0>(llvm::vfs::InMemoryFileSystem *this@<X0>, const llvm::Twine *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  uint64_t v6;
  BOOL v7;
  const std::error_category *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v14[2];
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  sub_1C5E52150((uint64_t)v14, this, *((_QWORD *)this + 2), (uint64_t)a2, 1, 0);
  if ((v15 & 1) != 0)
  {
    v9 = v14[0];
    v10 = v14[1];
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v9;
    *(_QWORD *)(a3 + 8) = v10;
  }
  else
  {
    v6 = v14[0];
    if (v14[0])
      v7 = *(_DWORD *)(v14[0] + 8) > 1u;
    else
      v7 = 1;
    if (v7)
    {
      v8 = std::generic_category();
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = 22;
      *(_QWORD *)(a3 + 8) = v8;
    }
    else
    {
      v11 = operator new();
      llvm::Twine::str(a2, &v12);
      *(_QWORD *)v11 = off_1E81A4578;
      *(_QWORD *)(v11 + 8) = v6;
      result = *(double *)&v12;
      *(_OWORD *)(v11 + 16) = v12;
      *(_QWORD *)(v11 + 32) = v13;
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v11;
    }
  }
  return result;
}

void llvm::vfs::InMemoryFileSystem::dir_begin(llvm::vfs::InMemoryFileSystem *this@<X0>, const llvm::Twine *a2@<X1>, std::error_code *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  BOOL v8;
  const std::error_category *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  const std::error_category *v14;
  _QWORD *v15;
  unint64_t *p_shared_owners;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  char *v19;
  void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *i;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  char *v30;
  std::__shared_weak_count *v31;
  void *__p;
  __int128 v33;
  char *v34;
  std::__shared_weak_count *v35;
  char *v36;
  std::__shared_weak_count *v37;
  _QWORD v38[2];
  char v39;
  _QWORD v40[3];

  v40[2] = *MEMORY[0x1E0C80C00];
  sub_1C5E52150((uint64_t)v38, this, *((_QWORD *)this + 2), (uint64_t)a2, 1, 0);
  if ((v39 & 1) != 0)
  {
    v14 = (const std::error_category *)v38[1];
    *(_QWORD *)&a3->__val_ = v38[0];
    a3->__cat_ = v14;
    v15 = operator new(0x68uLL);
    v15[1] = 0;
    v15[2] = 0;
    *v15 = &off_1E81A4798;
    *((_OWORD *)v15 + 2) = 0u;
    *((_OWORD *)v15 + 3) = 0u;
    *((_DWORD *)v15 + 14) = 9;
    *((_OWORD *)v15 + 4) = 0u;
    *((_OWORD *)v15 + 5) = 0u;
    v15[12] = 0;
    v37 = (std::__shared_weak_count *)v15;
    v15[3] = off_1E81A47D0;
    v36 = (char *)(v15 + 3);
    sub_1C61D51BC(a4, (uint64_t)&v36);
    v11 = v37;
    if (!v37)
      return;
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    goto LABEL_13;
  }
  v7 = v38[0];
  if (v38[0])
    v8 = *(_DWORD *)(v38[0] + 8) == 2;
  else
    v8 = 0;
  if (!v8)
  {
    v9 = std::generic_category();
    *(_QWORD *)&a3->__val_ = 20;
    a3->__cat_ = v9;
    v10 = operator new(0x68uLL);
    v10[1] = 0;
    v10[2] = 0;
    *v10 = &off_1E81A4798;
    *((_OWORD *)v10 + 2) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *((_DWORD *)v10 + 14) = 9;
    *((_OWORD *)v10 + 4) = 0u;
    *((_OWORD *)v10 + 5) = 0u;
    v10[12] = 0;
    v31 = (std::__shared_weak_count *)v10;
    v10[3] = off_1E81A47D0;
    v30 = (char *)(v10 + 3);
    sub_1C61D51BC(a4, (uint64_t)&v30);
    v11 = v31;
    if (!v31)
      return;
    v12 = (unint64_t *)&v31->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
LABEL_13:
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    return;
  }
  llvm::Twine::str(a2, &__p);
  v17 = operator new(0x68uLL);
  v18 = (std::__shared_weak_count *)v17;
  v17[1] = 0;
  v17[2] = 0;
  *v17 = &off_1E81A4798;
  v17[3] = off_1E81A47D0;
  v19 = (char *)(v17 + 3);
  v20 = __p;
  v40[0] = v33;
  *(_QWORD *)((char *)v40 + 7) = *(_QWORD *)((char *)&v33 + 7);
  v21 = HIBYTE(v33);
  v33 = 0uLL;
  __p = 0;
  v17[5] = 0;
  v17[6] = 0;
  v17[4] = 0;
  *((_DWORD *)v17 + 14) = 9;
  v22 = *(_QWORD *)(v7 + 120);
  v23 = *(unsigned int *)(v7 + 128);
  if ((_DWORD)v23)
  {
    for (i = *(_QWORD **)(v7 + 120); !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = *(_QWORD **)(v7 + 120);
  }
  v17[8] = i;
  v17[9] = v22 + 8 * v23;
  v25 = v40[0];
  v17[10] = v20;
  v17[11] = v25;
  *(_QWORD *)((char *)v17 + 95) = *(_QWORD *)((char *)v40 + 7);
  *((_BYTE *)v17 + 103) = v21;
  sub_1C5E5E710((uint64_t)(v17 + 3));
  v34 = v19;
  v35 = v18;
  sub_1C61D51BC(a4, (uint64_t)&v34);
  v26 = v35;
  if (v35)
  {
    v27 = (unint64_t *)&v35->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (SHIBYTE(v33) < 0)
    operator delete(__p);
}

uint64_t llvm::vfs::InMemoryFileSystem::setCurrentWorkingDirectory(llvm::vfs::InMemoryFileSystem *this, const llvm::Twine *a2)
{
  size_t v3;
  void *v4;
  __int128 *p_dst;
  size_t v6;
  size_t v7;
  void **v8;
  __int128 __dst;
  unint64_t v11;
  void *__src;
  size_t __len[2];
  _QWORD v14[17];

  v14[16] = *MEMORY[0x1E0C80C00];
  __src = v14;
  *(_OWORD *)__len = xmmword_1C85F20B0;
  llvm::Twine::toVector((uint64_t)a2, (uint64_t)&__src);
  (*(void (**)(llvm::vfs::InMemoryFileSystem *, void **))(*(_QWORD *)this + 88))(this, &__src);
  if (*((_BYTE *)this + 48))
    llvm::sys::path::remove_dots((unsigned __int8 **)&__src, 1, 0);
  v3 = __len[0];
  if (__len[0])
  {
    if (__len[0] >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v4 = __src;
    if (__len[0] >= 0x17)
    {
      v6 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len[0] | 7) != 0x17)
        v6 = __len[0] | 7;
      v7 = v6 + 1;
      p_dst = (__int128 *)operator new(v6 + 1);
      *((_QWORD *)&__dst + 1) = v3;
      v11 = v7 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v11) = __len[0];
      p_dst = &__dst;
    }
    memmove(p_dst, v4, v3);
    *((_BYTE *)p_dst + v3) = 0;
    v8 = (void **)((char *)this + 24);
    if (*((char *)this + 47) < 0)
      operator delete(*v8);
    *(_OWORD *)v8 = __dst;
    *((_QWORD *)this + 5) = v11;
  }
  std::system_category();
  if (__src != v14)
    free(__src);
  return 0;
}

unint64_t llvm::vfs::InMemoryFileSystem::getRealPath(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  void *v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  void *__p[2];
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 48))(__p);
  if ((v13 & 1) != 0)
    goto LABEL_7;
  v6 = (void *)(v12 & 0x7F);
  if (v12 < 0)
    v6 = __p[1];
  if (!v6)
  {
LABEL_7:
    v8 = 1;
    std::generic_category();
    LODWORD(v9) = 0;
  }
  else
  {
    llvm::Twine::toVector(a2, (uint64_t)a3);
    v7 = (*(uint64_t (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)a1 + 88))(a1, a3);
    v8 = v7;
    v9 = HIDWORD(v7);
    if (!(_DWORD)v7)
    {
      llvm::sys::path::remove_dots(a3, 1, 0);
      std::system_category();
      v8 = 0;
    }
  }
  if ((v13 & 1) == 0 && v12 < 0)
    operator delete(__p[0]);
  return v8 | ((unint64_t)v9 << 32);
}

uint64_t llvm::vfs::RedirectingFileSystem::RedirectingFileSystem(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  char v4;
  std::string __str;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1E81A4188;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_WORD *)(a1 + 96) = 1;
  *(_BYTE *)(a1 + 98) = 1;
  *(_DWORD *)(a1 + 100) = 0;
  v3 = *(_QWORD *)(a1 + 64);
  if (v3)
  {
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v3 + 48))(&__str);
    v4 = v7;
    if ((v7 & 1) == 0)
    {
      std::string::operator=((std::string *)(a1 + 40), &__str);
      v4 = v7;
    }
    if ((v4 & 1) == 0 && SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  return a1;
}

char *llvm::vfs::RedirectingFileSystem::getCurrentWorkingDirectory@<X0>(char *this@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)(a2 + 24) &= ~1u;
  if (this[63] < 0)
    return (char *)sub_1C47EBC30((_BYTE *)a2, *((void **)this + 5), *((_QWORD *)this + 6));
  *(_OWORD *)a2 = *(_OWORD *)(this + 40);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 7);
  return this;
}

unint64_t llvm::vfs::RedirectingFileSystem::setCurrentWorkingDirectory(llvm::vfs::RedirectingFileSystem *this, const llvm::Twine *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  size_t v8;
  void *v9;
  __int128 *p_dst;
  size_t v11;
  size_t v12;
  void **v13;
  __int128 __dst;
  unint64_t v16;
  void *__src;
  size_t __len[2];
  _QWORD v19[17];

  v19[16] = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(llvm::vfs::RedirectingFileSystem *))(*(_QWORD *)this + 72))(this) & 1) == 0)
  {
    v6 = 2;
    std::generic_category();
    v7 = 0;
    return v7 | v6;
  }
  __src = v19;
  *(_OWORD *)__len = xmmword_1C85F20B0;
  llvm::Twine::toVector((uint64_t)a2, (uint64_t)&__src);
  v4 = (*(uint64_t (**)(llvm::vfs::RedirectingFileSystem *, void **))(*(_QWORD *)this + 88))(this, &__src);
  v5 = v4;
  if (!(_DWORD)v4)
  {
    v8 = __len[0];
    if (__len[0] >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v9 = __src;
    if (__len[0] >= 0x17)
    {
      v11 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len[0] | 7) != 0x17)
        v11 = __len[0] | 7;
      v12 = v11 + 1;
      p_dst = (__int128 *)operator new(v11 + 1);
      *((_QWORD *)&__dst + 1) = v8;
      v16 = v12 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v16) = __len[0];
      p_dst = &__dst;
      if (!__len[0])
        goto LABEL_13;
    }
    memmove(p_dst, v9, v8);
LABEL_13:
    *((_BYTE *)p_dst + v8) = 0;
    v13 = (void **)((char *)this + 40);
    if (*((char *)this + 63) < 0)
      operator delete(*v13);
    *(_OWORD *)v13 = __dst;
    *((_QWORD *)this + 7) = v16;
    std::system_category();
    v6 = 0;
    goto LABEL_16;
  }
  v6 = v4;
LABEL_16:
  v7 = v5 & 0xFFFFFFFF00000000;
  if (__src != v19)
    free(__src);
  return v7 | v6;
}

std::string::size_type llvm::vfs::RedirectingFileSystem::makeAbsolute(uint64_t a1, uint64_t a2)
{
  std::string::size_type v4;
  std::string::size_type v5;
  unsigned int data;
  std::string::size_type v7;
  int v9;
  char is_absolute;
  char v11;
  std::string *p_p;
  std::string::size_type size;
  uint64_t first_of;
  std::string::size_type v15;
  const std::string::value_type *v16;
  std::string *v17;
  std::string *v18;
  std::string::size_type v19;
  std::string v20;
  __int16 v21;
  std::string __p;
  char v23;
  __int16 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v21 = 261;
  v4 = *(_QWORD *)(a2 + 8);
  v20.__r_.__value_.__r.__words[0] = *(_QWORD *)a2;
  v20.__r_.__value_.__l.__size_ = v4;
  if ((llvm::sys::path::is_absolute((const char **)&v20.__r_.__value_.__l.__data_, (const llvm::Twine *)1) & 1) != 0
    || (v24 = 261,
        v5 = *(_QWORD *)(a2 + 8),
        __p.__r_.__value_.__r.__words[0] = *(_QWORD *)a2,
        __p.__r_.__value_.__l.__size_ = v5,
        (llvm::sys::path::is_absolute((const char **)&__p.__r_.__value_.__l.__data_, (const llvm::Twine *)3) & 1) != 0))
  {
    std::system_category();
    data = 0;
    v7 = 0;
  }
  else
  {
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 48))(&__p, a1);
    if ((v23 & 1) != 0)
    {
      data = __p.__r_.__value_.__l.__data_;
      v7 = __p.__r_.__value_.__r.__words[0] & 0xFFFFFFFF00000000;
    }
    else
    {
      v21 = 260;
      v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v9 = 1;
      is_absolute = llvm::sys::path::is_absolute((const char **)&v20.__r_.__value_.__l.__data_, (const llvm::Twine *)1);
      v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((is_absolute & 1) == 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = __p.__r_.__value_.__l.__size_;
        v20.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
        v20.__r_.__value_.__l.__size_ = size;
        v9 = 2;
        first_of = llvm::StringRef::find_first_of(&v20, "/\\", 2, 0);
        if (first_of != -1)
        {
          if (p_p->__r_.__value_.__s.__data_[first_of] == 47)
            v9 = 2;
          else
            v9 = 3;
        }
      }
      if (v11 < 0)
        sub_1C47EBC30(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v20 = __p;
      v15 = *((_BYTE *)&v20.__r_.__value_.__s + 23) & 0x7F;
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v15 = v20.__r_.__value_.__l.__size_;
      if (v9 == 3)
        v16 = "\\";
      else
        v16 = "/";
      if (!v15)
        goto LABEL_31;
      v17 = &v20;
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v17 = (std::string *)v20.__r_.__value_.__r.__words[0];
      if (v17->__r_.__value_.__s.__data_[v15 - 1] != *(unsigned __int8 *)v16)
LABEL_31:
        std::string::append(&v20, v16, 1uLL);
      std::string::append(&v20, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = &v20;
      else
        v18 = (std::string *)v20.__r_.__value_.__r.__words[0];
      v19 = *((_BYTE *)&v20.__r_.__value_.__s + 23) & 0x7F;
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v19 = v20.__r_.__value_.__l.__size_;
      *(_QWORD *)(a2 + 8) = 0;
      sub_1C638DE64((_QWORD *)a2, (char *)v18, (char *)v18 + v19);
      std::system_category();
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      data = 0;
      v7 = 0;
      if ((v23 & 1) == 0 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return v7 | data;
}

void llvm::vfs::RedirectingFileSystem::dir_begin(llvm::vfs::RedirectingFileSystem *this@<X0>, const llvm::Twine *a2@<X1>, std::error_code *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t Canonical;
  const std::error_category *v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  const std::error_category *v20;
  uint64_t v21;
  uint64_t v22;
  const std::error_category *v23;
  const std::error_category *v24;
  uint64_t v25;
  const std::error_category *v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  const std::error_category *v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  size_t v41;
  const void *v42;
  _OWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  char *v48;
  char v49;
  int v50;
  __int128 v51;
  unint64_t *v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t first_of;
  int v58;
  unint64_t *v59;
  unint64_t v60;
  BOOL v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  __int128 v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  char *v80;
  char *v81;
  _QWORD *v82;
  char *v83;
  uint64_t v84;
  const std::error_category *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  __int128 v92;
  char *v93;
  std::__shared_weak_count *v94;
  char *v95;
  std::__shared_weak_count *v96;
  _QWORD *v97;
  std::__shared_weak_count *v98;
  std::error_code v99;
  char v100;
  std::error_code v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  _OWORD __dst[2];
  __int16 v106;
  __int128 __p;
  char v108;
  __int16 v109;
  int v110;
  char v111;
  uint64_t v112;
  void *v113;
  char v114;
  char v115;
  char v116;
  _BYTE __src[24];
  _QWORD v118[33];

  v118[32] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)__src = v118;
  *(_OWORD *)&__src[8] = xmmword_1C64638F0;
  llvm::Twine::toVector((uint64_t)a2, (uint64_t)__src);
  Canonical = llvm::vfs::RedirectingFileSystem::makeCanonical((uint64_t)this, (uint64_t)__src);
  *(_QWORD *)&a3->__val_ = Canonical;
  a3->__cat_ = v9;
  if ((_DWORD)Canonical)
  {
    *a4 = 0;
    a4[1] = 0;
    goto LABEL_49;
  }
  llvm::vfs::RedirectingFileSystem::lookupPath((uint64_t)this, *(unint64_t *)__src, *(unint64_t *)&__src[8], (unsigned int *)&v112);
  v10 = v116;
  if ((v116 & 1) == 0)
  {
    v106 = 261;
    __dst[0] = *(_OWORD *)__src;
    llvm::vfs::RedirectingFileSystem::status((uint64_t)this, (llvm::Twine *)__dst, a2, &v112, (uint64_t)&__p);
    v11 = v111;
    if ((v111 & 1) != 0)
    {
      if (*((_DWORD *)this + 25) != 2)
      {
        v22 = __p;
        v23 = (const std::error_category *)*((_QWORD *)&__p + 1);
        if (!v112 || *(_DWORD *)(v112 + 8) == 1)
        {
          if (std::generic_category() == v23 && v22 == 2)
          {
            (*(void (**)(_QWORD, const llvm::Twine *, std::error_code *))(**((_QWORD **)this + 8) + 32))(*((_QWORD *)this + 8), a2, a3);
            goto LABEL_42;
          }
          v11 = v111;
        }
      }
      if ((v11 & 1) != 0)
      {
        v24 = (const std::error_category *)*((_QWORD *)&__p + 1);
        v25 = __p;
      }
      else
      {
        v24 = std::system_category();
        v25 = 0;
      }
    }
    else
    {
      if (v110 == 3)
      {
        v102 = 0uLL;
        v101.__val_ = 0;
        v101.__cat_ = std::system_category();
        sub_1C5E54384((uint64_t)&v99, &v112);
        v12 = v112;
        if (!v100)
        {
          v92 = *(_OWORD *)(v112 + 40);
          v35 = (char *)operator new(0x68uLL);
          *((_QWORD *)v35 + 1) = 0;
          *((_QWORD *)v35 + 2) = 0;
          *(_QWORD *)v35 = &off_1E81A4858;
          v106 = 261;
          __dst[0] = *(_OWORD *)__src;
          *((_QWORD *)v35 + 5) = 0;
          *((_QWORD *)v35 + 6) = 0;
          *((_DWORD *)v35 + 14) = 9;
          *((_QWORD *)v35 + 3) = &off_1E81A4890;
          *((_QWORD *)v35 + 4) = 0;
          llvm::Twine::str((llvm::Twine *)__dst, (_QWORD *)v35 + 8);
          *(_OWORD *)(v35 + 88) = v92;
          *(_QWORD *)&v101.__val_ = sub_1C5E5EE5C((uint64_t)(v35 + 24), 1);
          v101.__cat_ = v36;
          v95 = v35 + 24;
          v96 = (std::__shared_weak_count *)v35;
          sub_1C61D51BC(__dst, (uint64_t)&v95);
          v37 = __dst[0];
          __dst[0] = 0uLL;
          v102 = v37;
          v38 = v96;
          if (v96)
          {
            p_shared_owners = (unint64_t *)&v96->__shared_owners_;
            do
              v40 = __ldaxr(p_shared_owners);
            while (__stlxr(v40 - 1, p_shared_owners));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
LABEL_11:
          if (v101.__val_)
          {
            if (v101.__cat_ != std::generic_category() || v101.__val_ != 2)
            {
              *a3 = v101;
              *a4 = 0;
              a4[1] = 0;
LABEL_62:
              v32 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
              if (*((_QWORD *)&v102 + 1))
              {
                v33 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
                do
                  v34 = __ldaxr(v33);
                while (__stlxr(v34 - 1, v33));
                if (!v34)
                {
                  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                  std::__shared_weak_count::__release_weak(v32);
                }
              }
              goto LABEL_42;
            }
            v16 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
            v102 = 0uLL;
            if (v16)
            {
              v17 = (unint64_t *)&v16->__shared_owners_;
              do
                v18 = __ldaxr(v17);
              while (__stlxr(v18 - 1, v17));
              if (!v18)
              {
                ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                std::__shared_weak_count::__release_weak(v16);
              }
            }
          }
          if (*((_DWORD *)this + 25) == 2)
          {
            *a3 = v101;
            *(_OWORD *)a4 = v102;
LABEL_42:
            if ((v111 & 1) == 0 && v108 < 0)
              operator delete((void *)__p);
            goto LABEL_45;
          }
          v99.__val_ = 0;
          v99.__cat_ = std::system_category();
          v28 = *((_QWORD *)this + 8);
          v106 = 261;
          __dst[0] = *(_OWORD *)__src;
          (*(void (**)(__int128 *__return_ptr, uint64_t, _OWORD *, std::error_code *))(*(_QWORD *)v28 + 32))(&v103, v28, __dst, &v99);
          if (v99.__val_)
          {
            if (v99.__cat_ != std::generic_category() || v99.__val_ != 2)
            {
              *a3 = v99;
              *a4 = 0;
              a4[1] = 0;
LABEL_56:
              v29 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
              if (*((_QWORD *)&v103 + 1))
              {
                v30 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
                do
                  v31 = __ldaxr(v30);
                while (__stlxr(v31 - 1, v30));
                if (!v31)
                {
                  ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                  std::__shared_weak_count::__release_weak(v29);
                }
              }
              goto LABEL_62;
            }
            v77 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
            v103 = 0uLL;
            if (v77)
            {
              v78 = (unint64_t *)&v77->__shared_owners_;
              do
                v79 = __ldaxr(v78);
              while (__stlxr(v79 - 1, v78));
              if (!v79)
              {
                ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                std::__shared_weak_count::__release_weak(v77);
              }
            }
          }
          *(_QWORD *)&__dst[0] = &__dst[1];
          *((_QWORD *)&__dst[0] + 1) = 0x200000000;
          if (*((_DWORD *)this + 25))
            v80 = (char *)&v102;
          else
            v80 = (char *)&v103;
          if (*((_DWORD *)this + 25))
            v81 = (char *)&v103;
          else
            v81 = (char *)&v102;
          sub_1C5E54400((uint64_t)__dst, v80);
          sub_1C5E54400((uint64_t)__dst, v81);
          v82 = operator new(0x100uLL);
          v82[1] = 0;
          v82[2] = 0;
          *v82 = &off_1E81A4668;
          v83 = *(char **)&__dst[0];
          v84 = DWORD2(__dst[0]);
          v82[5] = 0;
          v82[6] = 0;
          v82[4] = 0;
          *((_DWORD *)v82 + 14) = 9;
          v82[3] = off_1E81A46A0;
          v82[8] = v82 + 10;
          v82[9] = 0x800000000;
          sub_1C639976C((uint64_t)(v82 + 8), v83, &v83[16 * v84]);
          *((_OWORD *)v82 + 13) = 0u;
          *((_OWORD *)v82 + 14) = 0u;
          v82[30] = 0x800000000;
          *(_QWORD *)&a3->__val_ = sub_1C5E5CE74((uint64_t)(v82 + 3), 1);
          a3->__cat_ = v85;
          v93 = (char *)(v82 + 3);
          v94 = (std::__shared_weak_count *)v82;
          sub_1C61D51BC(&v104, (uint64_t)&v93);
          v86 = v94;
          if (v94)
          {
            v87 = (unint64_t *)&v94->__shared_owners_;
            do
              v88 = __ldaxr(v87);
            while (__stlxr(v88 - 1, v87));
            if (!v88)
            {
              ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
              std::__shared_weak_count::__release_weak(v86);
            }
          }
          if (a3->__val_)
          {
            v89 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
            *a4 = 0;
            a4[1] = 0;
            if (v89)
            {
              v90 = (unint64_t *)&v89->__shared_owners_;
              do
                v91 = __ldaxr(v90);
              while (__stlxr(v91 - 1, v90));
              if (!v91)
              {
                ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                std::__shared_weak_count::__release_weak(v89);
              }
            }
          }
          else
          {
            *(_OWORD *)a4 = v104;
          }
          sub_1C63995A8((char **)__dst);
          goto LABEL_56;
        }
        v13 = *((_QWORD *)this + 8);
        v106 = 261;
        __dst[0] = v99;
        (*(void (**)(__int128 *__return_ptr, uint64_t, _OWORD *, std::error_code *))(*(_QWORD *)v13 + 32))(&v103, v13, __dst, &v101);
        v102 = v103;
        v14 = *(_DWORD *)(v12 + 64);
        if (v14)
          v15 = v14 == 1;
        else
          v15 = *((_BYTE *)this + 98) != 0;
        if (v15)
          goto LABEL_11;
        v41 = *(_QWORD *)&__src[8];
        if (*(_QWORD *)&__src[8] >= 0x7FFFFFFFFFFFFFF8uLL)
          abort();
        v42 = *(const void **)__src;
        if (*(_QWORD *)&__src[8] >= 0x17uLL)
        {
          v44 = (*(_QWORD *)&__src[8] & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((*(_QWORD *)&__src[8] | 7) != 0x17)
            v44 = *(_QWORD *)&__src[8] | 7;
          v45 = v44 + 1;
          v43 = operator new(v44 + 1);
          *((_QWORD *)&__dst[0] + 1) = v41;
          *(_QWORD *)&__dst[1] = v45 | 0x8000000000000000;
          *(_QWORD *)&__dst[0] = v43;
        }
        else
        {
          BYTE7(__dst[1]) = __src[8];
          v43 = __dst;
          if (!*(_QWORD *)&__src[8])
            goto LABEL_80;
        }
        memmove(v43, v42, v41);
LABEL_80:
        *((_BYTE *)v43 + v41) = 0;
        v46 = operator new(0x70uLL);
        v47 = v46;
        v46[1] = 0;
        v46[2] = 0;
        *v46 = &off_1E81A47F8;
        *(_QWORD *)&v104 = *((_QWORD *)&__dst[0] + 1);
        v48 = *(char **)&__dst[0];
        *(_QWORD *)((char *)&v104 + 7) = *(_QWORD *)((char *)__dst + 15);
        v49 = BYTE7(__dst[1]);
        v50 = SBYTE7(__dst[1]);
        memset(__dst, 0, 24);
        v51 = v102;
        if (*((_QWORD *)&v102 + 1))
        {
          v52 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
          do
            v53 = __ldxr(v52);
          while (__stxr(v53 + 1, v52));
        }
        v46[8] = v48;
        v46[5] = 0;
        v46[6] = 0;
        *((_DWORD *)v46 + 14) = 9;
        v46[3] = off_1E81A4830;
        v46[4] = 0;
        v46[9] = v104;
        *(_QWORD *)((char *)v46 + 79) = *(_QWORD *)((char *)&v104 + 7);
        *((_BYTE *)v46 + 87) = v50;
        *(_QWORD *)&v104 = 0;
        *(_QWORD *)((char *)&v104 + 7) = 0;
        if (v50 >= 0)
          v54 = (char *)(v46 + 8);
        else
          v54 = v48;
        v55 = v46[9];
        v56 = v49 & 0x7F;
        if (v50 >= 0)
          v55 = v56;
        *(_QWORD *)&v103 = v54;
        *((_QWORD *)&v103 + 1) = v55;
        first_of = llvm::StringRef::find_first_of(&v103, "/\\", 2, 0);
        if (first_of == -1)
        {
          v58 = 0;
        }
        else if (v54[first_of] == 47)
        {
          v58 = 1;
        }
        else
        {
          v58 = 3;
        }
        v47[12] = v51;
        *((_DWORD *)v47 + 22) = v58;
        v47[13] = *((_QWORD *)&v51 + 1);
        if (*((_QWORD *)&v51 + 1))
        {
          v59 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
          do
            v60 = __ldxr(v59);
          while (__stxr(v60 + 1, v59));
        }
        v103 = 0uLL;
        v61 = sub_1C5DF3038(v47 + 12, (uint64_t *)&v103);
        v62 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
        if (*((_QWORD *)&v103 + 1))
        {
          v63 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
          do
            v64 = __ldaxr(v63);
          while (__stlxr(v64 - 1, v63));
          if (!v64)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
        if (!v61)
          sub_1C5E5E9E0((uint64_t)(v47 + 3));
        if (*((_QWORD *)&v51 + 1))
        {
          v65 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v51 + 1) + 16))(*((_QWORD *)&v51 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v51 + 1));
          }
        }
        v97 = v47 + 3;
        v98 = (std::__shared_weak_count *)v47;
        sub_1C61D51BC(&v103, (uint64_t)&v97);
        v67 = v103;
        v103 = 0uLL;
        v68 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
        v102 = v67;
        if (v68)
        {
          v69 = (unint64_t *)&v68->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
          v71 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
          if (*((_QWORD *)&v103 + 1))
          {
            v72 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
            do
              v73 = __ldaxr(v72);
            while (__stlxr(v73 - 1, v72));
            if (!v73)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
          }
        }
        v74 = v98;
        if (v98)
        {
          v75 = (unint64_t *)&v98->__shared_owners_;
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        if (SBYTE7(__dst[1]) < 0)
          operator delete(*(void **)&__dst[0]);
        goto LABEL_11;
      }
      v24 = std::generic_category();
      v25 = 20;
    }
    *(_QWORD *)&a3->__val_ = v25;
    a3->__cat_ = v24;
    *a4 = 0;
    a4[1] = 0;
    goto LABEL_42;
  }
  if (*((_DWORD *)this + 25) != 2)
  {
    v19 = v112;
    v20 = (const std::error_category *)v113;
    if (std::generic_category() == v20 && v19 == 2)
    {
      v21 = *((_QWORD *)this + 8);
      v109 = 261;
      __p = *(_OWORD *)__src;
      (*(void (**)(uint64_t, __int128 *, std::error_code *))(*(_QWORD *)v21 + 32))(v21, &__p, a3);
      goto LABEL_45;
    }
    v10 = v116;
  }
  if ((v10 & 1) != 0)
  {
    v27 = v112;
    v26 = (const std::error_category *)v113;
  }
  else
  {
    v26 = std::system_category();
    v27 = 0;
  }
  *(_QWORD *)&a3->__val_ = v27;
  a3->__cat_ = v26;
  *a4 = 0;
  a4[1] = 0;
LABEL_45:
  if ((v116 & 1) == 0 && v115 && v114 < 0)
    operator delete(v113);
LABEL_49:
  if (*(_QWORD **)__src != v118)
    free(*(void **)__src);
}

uint64_t llvm::vfs::RedirectingFileSystem::lookupPath@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unsigned int *a4@<X8>)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _OWORD v19[3];
  _OWORD v20[3];

  llvm::sys::path::begin(a2, a3, 0, (uint64_t)v20);
  v8 = *(uint64_t **)(a1 + 16);
  v9 = *(uint64_t **)(a1 + 24);
  if (v8 == v9)
  {
    v11 = *((_BYTE *)a4 + 40);
LABEL_8:
    result = (uint64_t)std::generic_category();
    *((_BYTE *)a4 + 40) = v11 | 1;
    *(_QWORD *)a4 = 2;
    *((_QWORD *)a4 + 1) = result;
  }
  else
  {
    while (1)
    {
      v19[0] = v20[0];
      v19[1] = v20[1];
      v19[2] = v20[2];
      *(_QWORD *)&v14 = a2;
      *((_QWORD *)&v14 + 1) = a3;
      v15 = 0;
      v16 = 0;
      v17 = a3;
      v18 = 0;
      result = llvm::vfs::RedirectingFileSystem::lookupPathImpl(a1, (uint64_t)v19, &v14, *v8, a4);
      v11 = *((_BYTE *)a4 + 40);
      if ((v11 & 1) == 0)
        break;
      v12 = *a4;
      v13 = *((_QWORD *)a4 + 1);
      result = (uint64_t)std::generic_category();
      if (v13 != result || v12 != 2)
        break;
      if (++v8 == v9)
        goto LABEL_8;
    }
  }
  return result;
}

void llvm::vfs::RedirectingFileSystem::status(uint64_t a1@<X0>, llvm::Twine *a2@<X1>, llvm::Twine *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  unsigned __int128 v17;
  void *v18;
  void *v19;
  char v20;
  void *v21;
  void *v22;
  size_t v23;
  size_t v24;
  void **v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 *v29;
  uint64_t Canonical;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL4 v37;
  void *v38;
  void *v39;
  char v40;
  char v41;
  void *v42;
  int v43;
  char v44;
  void **v45;
  __int128 v46;
  __int128 v47;
  void *__dst[2];
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int16 v53;
  _QWORD v54[4];
  __int16 v55;
  void *v56[2];
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int16 v61;
  _DWORD v62[2];
  void *__src;
  size_t __len;
  char v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int16 v69;
  void *__p[2];
  unint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int16 v75;
  char v76;
  void *v77[3];
  __int128 v78;
  __int128 v79;
  unsigned __int128 v80;
  __int16 v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  sub_1C5E54384((uint64_t)&__src, a4);
  if (!v65)
  {
    v10 = *a4;
    if (*(char *)(*a4 + 87) < 0)
    {
      sub_1C47EBC30(__p, *(void **)(v10 + 64), *(_QWORD *)(v10 + 72));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v10 + 64);
      v71 = *(_QWORD *)(v10 + 80);
    }
    v72 = *(_OWORD *)(v10 + 88);
    v73 = *(_OWORD *)(v10 + 104);
    v74 = *(_OWORD *)(v10 + 120);
    v75 = *(_WORD *)(v10 + 136);
    v46 = v72;
    v11 = v73;
    v12 = v74;
    v13 = *((_QWORD *)&v73 + 1);
    v14 = *((_QWORD *)&v74 + 1);
    llvm::Twine::str(a2, v77);
    v78 = v46;
    *((_QWORD *)&v79 + 1) = v13;
    v80 = __PAIR128__(v14, v12);
    v81 = 0;
    *(_BYTE *)(a5 + 80) &= ~1u;
    *(_OWORD *)a5 = *(_OWORD *)v77;
    *(void **)(a5 + 16) = v77[2];
    memset(v77, 0, sizeof(v77));
    *(_QWORD *)&v79 = v11;
    v15 = v78;
    v16 = v79;
    v17 = v80;
    *(_WORD *)(a5 + 72) = 0;
    *(_OWORD *)(a5 + 56) = v17;
    *(_OWORD *)(a5 + 40) = v16;
    *(_OWORD *)(a5 + 24) = v15;
    if (SHIBYTE(v71) < 0)
      operator delete(__p[0]);
    return;
  }
  v18 = __src;
  if (!__src)
  {
    v19 = 0;
    v20 = 0;
    __p[0] = 0;
    __p[1] = 0;
    v71 = 0;
    goto LABEL_19;
  }
  v21 = (void *)__len;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v23 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v23 = __len | 7;
    v24 = v23 + 1;
    v22 = operator new(v23 + 1);
    __p[1] = v21;
    v71 = v24 | 0x8000000000000000;
    __p[0] = v22;
  }
  else
  {
    HIBYTE(v71) = __len;
    v22 = __p;
    if (!__len)
      goto LABEL_18;
  }
  memmove(v22, v18, (size_t)v21);
LABEL_18:
  *((_BYTE *)v21 + (_QWORD)v22) = 0;
  v20 = HIBYTE(v71);
  v18 = __p[0];
  v19 = __p[1];
LABEL_19:
  if (v20 >= 0)
    v25 = __p;
  else
    v25 = (void **)v18;
  if (v20 >= 0)
    v26 = v20 & 0x7F;
  else
    v26 = (unint64_t)v19;
  v77[0] = &v78;
  *(_OWORD *)&v77[1] = xmmword_1C64638F0;
  if (v26 >= 0x101)
  {
    v45 = v25;
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v77, &v78, v26, 1);
    v25 = v45;
    v29 = (__int128 *)v77[0];
    v27 = (char *)v77[1];
    goto LABEL_27;
  }
  v27 = 0;
  v28 = 0;
  v29 = &v78;
  if (v26)
  {
LABEL_27:
    memcpy(&v27[(_QWORD)v29], v25, v26);
    v28 = (char *)v77[1];
  }
  v77[1] = &v28[v26];
  if (v20 < 0)
    operator delete(v18);
  Canonical = llvm::vfs::RedirectingFileSystem::makeCanonical(a1, (uint64_t)v77);
  if ((_DWORD)Canonical)
  {
    *(_BYTE *)(a5 + 80) |= 1u;
    *(_QWORD *)a5 = Canonical;
    *(_QWORD *)(a5 + 8) = v31;
  }
  else
  {
    v32 = *(_QWORD *)(a1 + 64);
    WORD4(v58) = 261;
    v56[0] = v77[0];
    v56[1] = v77[1];
    (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)v32 + 16))(__p, v32, v56);
    if ((v76 & 1) != 0)
    {
      sub_1C5057D6C((std::error_category *)a5, (__int128 *)__p);
    }
    else
    {
      v55 = 261;
      v54[0] = __src;
      v54[1] = __len;
      v47 = v72;
      v33 = v73;
      v34 = v74;
      v35 = *((_QWORD *)&v73 + 1);
      v36 = *((_QWORD *)&v74 + 1);
      llvm::Twine::str((llvm::Twine *)v54, v56);
      v37 = 0;
      v58 = v47;
      *((_QWORD *)&v59 + 1) = v35;
      *(_QWORD *)&v60 = v34;
      *((_QWORD *)&v60 + 1) = v36;
      v61 = 0;
      v38 = v56[0];
      v39 = v56[1];
      v62[0] = v57;
      *(_DWORD *)((char *)v62 + 3) = *(_DWORD *)((char *)&v57 + 3);
      v40 = HIBYTE(v57);
      v56[0] = 0;
      v56[1] = 0;
      *(_QWORD *)&v59 = v33;
      v57 = 0;
      v69 = 0;
      v67 = v59;
      v68 = v60;
      v66 = v47;
      v41 = v76;
      if ((v76 & 1) == 0 && SHIBYTE(v71) < 0)
      {
        v42 = v38;
        operator delete(__p[0]);
        v38 = v42;
        v41 = v76;
        v37 = v57 < 0;
      }
      v76 = v41 & 0xFE;
      __p[0] = v38;
      __p[1] = v39;
      LODWORD(v71) = v62[0];
      *(_DWORD *)((char *)&v71 + 3) = *(_DWORD *)((char *)v62 + 3);
      HIBYTE(v71) = v40;
      v72 = v66;
      v73 = v67;
      v74 = v68;
      v75 = v69;
      if (v37)
      {
        operator delete(v56[0]);
        v40 = HIBYTE(v71);
      }
      v43 = *(_DWORD *)(*a4 + 64);
      if (v43)
        v44 = v43 == 1;
      else
        v44 = *(_BYTE *)(a1 + 98) != 0;
      if (v40 < 0)
      {
        sub_1C47EBC30(__dst, __p[0], (unint64_t)__p[1]);
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)__p;
        v49 = v71;
      }
      v50 = v72;
      v51 = v73;
      v52 = v74;
      v53 = v75;
      sub_1C5E5612C((char *)v56, a3, v44, (uint64_t)__dst);
      *(_BYTE *)(a5 + 80) &= ~1u;
      *(_OWORD *)a5 = *(_OWORD *)v56;
      *(_QWORD *)(a5 + 16) = v57;
      v56[0] = 0;
      v56[1] = 0;
      v57 = 0;
      *(_OWORD *)(a5 + 24) = v58;
      *(_OWORD *)(a5 + 40) = v59;
      *(_OWORD *)(a5 + 56) = v60;
      *(_WORD *)(a5 + 72) = v61;
      if (SHIBYTE(v49) < 0)
        operator delete(__dst[0]);
    }
    if ((v76 & 1) == 0 && SHIBYTE(v71) < 0)
      operator delete(__p[0]);
  }
  if (v77[0] != &v78)
    free(v77[0]);
}

uint64_t sub_1C5E54384(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v2 = *a2;
  v3 = *(_DWORD *)(*a2 + 8);
  if (v3 == 2)
  {
    v12 = *(_QWORD *)(v2 + 40);
    v10 = v2 + 40;
    v11 = v12;
    v13 = *(_BYTE *)(v10 + 23);
    v14 = v13;
    if (v13 >= 0)
      v11 = v10;
    v15 = *(_QWORD *)(v10 + 8);
    v16 = v13 & 0x7F;
    if (v14 >= 0)
      v15 = v16;
    *(_QWORD *)result = v11;
    *(_QWORD *)(result + 8) = v15;
  }
  else
  {
    if (v3 != 1)
    {
      v17 = 0;
      *(_BYTE *)result = 0;
      goto LABEL_15;
    }
    v6 = (_QWORD *)a2[1];
    v4 = a2 + 1;
    v5 = v6;
    v7 = *((_BYTE *)v4 + 23);
    v8 = v7;
    if (v7 >= 0)
      v5 = v4;
    v9 = v7 & 0x7F;
    if (v8 < 0)
      v9 = v4[1];
    *(_QWORD *)result = v5;
    *(_QWORD *)(result + 8) = v9;
  }
  v17 = 1;
LABEL_15:
  *(_BYTE *)(result + 16) = v17;
  return result;
}

void sub_1C5E54400(uint64_t a1, char *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v14;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v11 = v4 + 1;
    v12 = v5 + 16 * v4;
    if (v5 <= (unint64_t)a2 && v12 > (unint64_t)a2)
    {
      v14 = &a2[-v5];
      sub_1C6399434(a1, v11);
      v5 = *(_QWORD *)a1;
      a2 = &v14[*(_QWORD *)a1];
    }
    else
    {
      sub_1C6399434(a1, v11);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = *(unsigned int *)(a1 + 8);
  v7 = (_QWORD *)(v5 + 16 * v6);
  v8 = *((_QWORD *)a2 + 1);
  *v7 = *(_QWORD *)a2;
  v7[1] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v6 + 1;
}

double llvm::vfs::RedirectingFileSystem::setExternalContentsPrefixDir(uint64_t a1, const void *a2, size_t a3)
{
  __int128 *p_dst;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  double result;
  __int128 __dst;
  unint64_t v12;

  if (!a2)
  {
    __dst = 0uLL;
    v12 = 0;
    goto LABEL_12;
  }
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a3 >= 0x17)
  {
    v7 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v7 = a3 | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = a3;
    v12 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v12) = a3;
    p_dst = &__dst;
    if (!a3)
      goto LABEL_11;
  }
  memmove(p_dst, a2, a3);
LABEL_11:
  *((_BYTE *)p_dst + a3) = 0;
LABEL_12:
  v9 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*v9);
  result = *(double *)&__dst;
  *(_OWORD *)v9 = __dst;
  *(_QWORD *)(a1 + 88) = v12;
  return result;
}

char *llvm::vfs::RedirectingFileSystem::getExternalContentsPrefixDir(llvm::vfs::RedirectingFileSystem *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *((_QWORD *)this + 9);
  v1 = (char *)this + 72;
  v2 = v3;
  if (v1[23] >= 0)
    return v1;
  return (char *)v2;
}

uint64_t llvm::vfs::RedirectingFileSystem::setFallthrough(uint64_t this, int a2)
{
  int v2;

  if (a2)
    v2 = 0;
  else
    v2 = 2;
  *(_DWORD *)(this + 100) = v2;
  return this;
}

uint64_t llvm::vfs::RedirectingFileSystem::setRedirection(uint64_t result, int a2)
{
  *(_DWORD *)(result + 100) = a2;
  return result;
}

void llvm::vfs::RedirectingFileSystem::getRoots(llvm::vfs::RedirectingFileSystem *this@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t *v18;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 3);
  if (v2 != v3)
  {
    v5 = 0;
    do
    {
      v6 = *(_BYTE *)(*(_QWORD *)v2 + 39);
      if (v6 >= 0)
        v7 = *(_QWORD *)v2 + 16;
      else
        v7 = *(_QWORD *)(*(_QWORD *)v2 + 16);
      if (v6 >= 0)
        v8 = v6 & 0x7F;
      else
        v8 = *(_QWORD *)(*(_QWORD *)v2 + 24);
      v9 = (unint64_t)a2[2];
      if ((unint64_t)v5 >= v9)
      {
        v11 = *a2;
        v12 = ((char *)v5 - (char *)*a2) >> 4;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 60)
          abort();
        v14 = v9 - (_QWORD)v11;
        if (v14 >> 3 > v13)
          v13 = v14 >> 3;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
          v15 = 0xFFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          if (v15 >> 60)
            sub_1C4764EE4();
          v16 = (char *)operator new(16 * v15);
        }
        else
        {
          v16 = 0;
        }
        v17 = (uint64_t *)&v16[16 * v12];
        *v17 = v7;
        v17[1] = v8;
        v18 = v17;
        if (v5 != v11)
        {
          do
          {
            *((_OWORD *)v18 - 1) = *((_OWORD *)v5 - 1);
            v18 -= 2;
            v5 -= 2;
          }
          while (v5 != v11);
          v5 = *a2;
        }
        v10 = v17 + 2;
        *a2 = v18;
        a2[1] = v17 + 2;
        a2[2] = (uint64_t *)&v16[16 * v15];
        if (v5)
          operator delete(v5);
      }
      else
      {
        *v5 = v7;
        v5[1] = v8;
        v10 = v5 + 2;
      }
      a2[1] = v10;
      v2 += 8;
      v5 = v10;
    }
    while (v2 != v3);
  }
}

void llvm::vfs::RedirectingFileSystem::create(_QWORD **a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, _QWORD *a7@<X8>)
{
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned __int8 *v35;
  char *v36;
  uint64_t v37;
  uint64_t i;
  uint64_t *v39;
  llvm::yaml::KeyValueNode *v40;
  uint64_t *j;
  uint64_t v42;
  unint64_t Key;
  unint64_t v44;
  const char *v45;
  const void *v46;
  unint64_t Value;
  llvm::yaml::SequenceNode *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v65;
  uint64_t *v66;
  char v67;
  unint64_t v68;
  const char *v69;
  char v70;
  unint64_t v72;
  unint64_t v74;
  _BYTE *v75;
  int v79;
  unint64_t v80;
  unint64_t v81;
  const char *v82;
  uint64_t v83;
  llvm ***v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88[2];
  _OWORD v89[3];
  __int128 v90;
  uint64_t v91;
  void *v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  _OWORD v96[2];
  __int16 v97;
  const char *v98;
  const void *v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t *v102;
  _QWORD v103[2];
  int v104;
  unint64_t v105;
  void *v106;
  __int128 v107;
  const char *v108;
  uint64_t v109;
  __int16 v110;
  const char *v111;
  uint64_t v112;
  __int16 v113;
  const char *v114;
  uint64_t v115;
  __int16 v116;
  const char *v117;
  uint64_t v118;
  __int16 v119;
  const char *v120;
  uint64_t v121;
  __int16 v122;
  const char *v123;
  uint64_t v124;
  __int16 v125;
  void **v126;
  __int128 v127;
  _QWORD v128[5];

  v128[2] = *MEMORY[0x1E0C80C00];
  v91 = 0;
  v90 = 0u;
  memset(v89, 0, sizeof(v89));
  v13 = *a1;
  v14 = v13[1];
  v15 = v13[2] - v14;
  v16 = (*(uint64_t (**)(_QWORD *))(*v13 + 16))(v13);
  *(_QWORD *)&v85 = v14;
  *((_QWORD *)&v85 + 1) = v15;
  v86 = v16;
  v87 = v17;
  llvm::yaml::Stream::Stream(v88, &v85, (uint64_t)v89, 1, 0);
  *(_QWORD *)&v90 = a2;
  *((_QWORD *)&v90 + 1) = a5;
  v18 = llvm::yaml::Stream::begin((llvm::yaml::Stream *)v88);
  v19 = *v18;
  v20 = *(_QWORD *)(*v18 + 104);
  if (!v20)
  {
    v21 = v18;
    v20 = llvm::yaml::Document::parseBlockNode((llvm::yaml::Scanner ***)*v18);
    *(_QWORD *)(v19 + 104) = v20;
    v19 = *v21;
  }
  if (v19 && v20)
  {
    v84 = (llvm ***)v88;
    v22 = operator new();
    v23 = (_DWORD *)v22;
    v24 = *a6;
    v83 = v24;
    if (v24)
    {
      v25 = (unsigned int *)(v24 + 8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    llvm::vfs::RedirectingFileSystem::RedirectingFileSystem(v22, &v83);
    v27 = v83;
    if (v83)
    {
      v28 = (unsigned int *)(v83 + 8);
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
    if (!a4)
      goto LABEL_28;
    v31 = sub_1C5E7BE8C(a3, a4, 0);
    v32 = 0;
    if (a4 >= v31)
      v33 = v31;
    else
      v33 = a4;
    if (v31 == -1)
      v34 = 0;
    else
      v34 = v33;
    if (v31 == -1)
      v35 = 0;
    else
      v35 = a3;
    v106 = &v108;
    v107 = xmmword_1C64638F0;
    if (v34 >= 0x101)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v106, &v108, v34, 1);
      v32 = v107;
    }
    else if (!v34)
    {
      goto LABEL_26;
    }
    memcpy((char *)v106 + v32, v35, v34);
    v32 = v107;
LABEL_26:
    *(_QWORD *)&v107 = v32 + v34;
    llvm::sys::fs::make_absolute((uint64_t)&v106);
    llvm::vfs::RedirectingFileSystem::setExternalContentsPrefixDir((uint64_t)v23, v106, v107);
    if (v106 != &v108)
      free(v106);
LABEL_28:
    if (*(_DWORD *)(v20 + 32) != 4)
    {
      v106 = "expected mapping node";
      LOWORD(v109) = 259;
      llvm::yaml::Stream::printError(v84, v20, (llvm::Twine *)&v106, 0);
      goto LABEL_147;
    }
    v106 = "version";
    *(_QWORD *)&v107 = 7;
    WORD4(v107) = 1;
    v108 = "case-sensitive";
    v109 = 14;
    v110 = 0;
    v111 = "use-external-names";
    v112 = 18;
    v113 = 0;
    v114 = "overlay-relative";
    v115 = 16;
    v116 = 0;
    v117 = "fallthrough";
    v118 = 11;
    v119 = 0;
    v120 = "redirecting-with";
    v121 = 16;
    v122 = 0;
    v123 = "roots";
    v124 = 5;
    v125 = 1;
    v104 = 16;
    v36 = (char *)operator new(0x180uLL, (std::align_val_t)8uLL);
    v37 = 0;
    v103[0] = v36;
    v103[1] = 0;
    do
    {
      *(_OWORD *)&v36[v37] = xmmword_1C85F6FF0;
      v37 += 24;
    }
    while (v37 != 384);
    for (i = 0; i != 168; i += 24)
      sub_1C6398E18((uint64_t)&v126, (uint64_t)v103, (const void **)((char *)&v106 + i), (__int128 *)((char *)&v107 + i + 8));
    v100 = 0;
    v101 = 0;
    v102 = 0;
    *(_BYTE *)(v20 + 76) = 0;
    llvm::yaml::MappingNode::increment((llvm::yaml::MappingNode *)v20);
    v39 = 0;
    v40 = *(llvm::yaml::KeyValueNode **)(v20 + 80);
    if (!v40)
    {
LABEL_34:
      if (!*((_BYTE *)*v84 + 74) && sub_1C5E5C288(&v84, v20, (uint64_t)v103))
      {
        for (j = v100; j != v39; ++j)
        {
          v42 = *j;
          sub_1C6398BBC((uint64_t)v23, v42, 0);
        }
        v126 = (void **)&v100;
        sub_1C4764BBC(&v126);
        MEMORY[0x1CAA32FB4](v103[0], 8);
        goto LABEL_148;
      }
LABEL_146:
      v126 = (void **)&v100;
      sub_1C4764BBC(&v126);
      MEMORY[0x1CAA32FB4](v103[0], 8);
LABEL_147:
      (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
      v23 = 0;
LABEL_148:
      *a7 = v23;
      goto LABEL_149;
    }
    v39 = 0;
    while (1)
    {
      v126 = (void **)v128;
      v127 = xmmword_1C85FA040;
      v98 = 0;
      v99 = 0;
      Key = llvm::yaml::KeyValueNode::getKey(v40);
      if (sub_1C6398748(&v84, Key, &v98, (uint64_t *)&v126))
      {
        v44 = llvm::yaml::KeyValueNode::getKey(v40);
        v45 = v98;
        v46 = v99;
        if (sub_1C63987BC(&v84, v44, v98, v99, (uint64_t)v103))
          break;
      }
LABEL_135:
      LODWORD(v51) = 0;
LABEL_136:
      if (v126 != v128)
        free(v126);
      if (!(_DWORD)v51)
        goto LABEL_146;
      llvm::yaml::MappingNode::increment((llvm::yaml::MappingNode *)v20);
      v40 = *(llvm::yaml::KeyValueNode **)(v20 + 80);
      if (!v40)
        goto LABEL_34;
    }
    switch((unint64_t)v46)
    {
      case 5uLL:
        if (*(_DWORD *)v45 != 1953460082 || v45[4] != 115)
          goto LABEL_126;
        Value = llvm::yaml::KeyValueNode::getValue(v40);
        if (!Value || (v49 = (llvm::yaml::SequenceNode *)Value, *(_DWORD *)(Value + 32) != 5))
        {
          v80 = llvm::yaml::KeyValueNode::getValue(v40);
          v82 = "expected array";
          goto LABEL_134;
        }
        *(_BYTE *)(Value + 76) = 0;
        while (1)
        {
          llvm::yaml::SequenceNode::increment(v49);
          v50 = *((_QWORD *)v49 + 10);
          if (!v50)
            goto LABEL_130;
          sub_1C5E5AFBC((uint64_t *)v96, &v84, v50, (uint64_t)v23, 1);
          v51 = *(_QWORD *)&v96[0];
          if (!*(_QWORD *)&v96[0])
            goto LABEL_136;
          if (v39 >= v102)
          {
            v52 = v100;
            v53 = v39 - v100;
            v54 = v53 + 1;
            if ((unint64_t)(v53 + 1) >> 61)
              abort();
            v55 = (char *)v102 - (char *)v100;
            if (((char *)v102 - (char *)v100) >> 2 > v54)
              v54 = v55 >> 2;
            if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
              v56 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v56 = v54;
            if (v56)
            {
              if (v56 >> 61)
                sub_1C4764EE4();
              v57 = (char *)operator new(8 * v56);
            }
            else
            {
              v57 = 0;
            }
            v58 = (uint64_t *)&v57[8 * v53];
            *(_QWORD *)&v96[0] = 0;
            *v58 = v51;
            v59 = v58 + 1;
            if (v39 == v52)
            {
              v100 = v58;
              v101 = v58 + 1;
              v102 = (uint64_t *)&v57[8 * v56];
            }
            else
            {
              do
              {
                v60 = *--v39;
                *v39 = 0;
                *--v58 = v60;
              }
              while (v39 != v52);
              v39 = v100;
              v61 = v101;
              v100 = v58;
              v101 = v59;
              v102 = (uint64_t *)&v57[8 * v56];
              while (v61 != v39)
              {
                v63 = *--v61;
                v62 = v63;
                *v61 = 0;
                if (v63)
                  (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
              }
            }
            if (v39)
              operator delete(v39);
            v39 = v59;
          }
          else
          {
            *(_QWORD *)&v96[0] = 0;
            *v39++ = v51;
          }
          v101 = v39;
          if (*(_QWORD *)&v96[0])
            (*(void (**)(_QWORD))(**(_QWORD **)&v96[0] + 8))(*(_QWORD *)&v96[0]);
        }
      case 7uLL:
        if (*(_DWORD *)v45 != 1936876918 || *(_DWORD *)(v45 + 3) != 1852795251)
          goto LABEL_126;
        v95 = 0uLL;
        v92 = &v94;
        v93 = xmmword_1C6612EF0;
        v65 = llvm::yaml::KeyValueNode::getValue(v40);
        if (!sub_1C6398748(&v84, v65, (const char **)&v95, (uint64_t *)&v92))
          goto LABEL_90;
        v105 = 0;
        v96[0] = v95;
        llvm::consumeSignedInteger((llvm *)v96, (llvm::StringRef *)0xA, &v105, v66);
        if ((v67 & 1) != 0 || *((_QWORD *)&v96[0] + 1) || v105 != (int)v105)
        {
          v68 = llvm::yaml::KeyValueNode::getValue(v40);
          v69 = "expected integer";
        }
        else if ((v105 & 0x80000000) != 0)
        {
          v68 = llvm::yaml::KeyValueNode::getValue(v40);
          v69 = "invalid version number";
        }
        else
        {
          if (!(_DWORD)v105)
          {
            v70 = 1;
            goto LABEL_91;
          }
          v68 = llvm::yaml::KeyValueNode::getValue(v40);
          v69 = "version mismatch, expected 0";
        }
        *(_QWORD *)&v96[0] = v69;
        v97 = 259;
        llvm::yaml::Stream::printError(v84, v68, (llvm::Twine *)v96, 0);
LABEL_90:
        v70 = 0;
LABEL_91:
        if (v92 != &v94)
          free(v92);
        if ((v70 & 1) != 0)
          goto LABEL_130;
        goto LABEL_135;
      case 0xBuLL:
        if (*(_QWORD *)v45 != 0x6F7268746C6C6166 || *(_QWORD *)(v45 + 3) != 0x6867756F7268746CLL)
          goto LABEL_126;
        *(_QWORD *)&v96[0] = "redirecting-with";
        *((_QWORD *)&v96[0] + 1) = 16;
        if (*((_BYTE *)sub_1C6399070((uint64_t)v103, (const void **)v96) + 17))
        {
          v80 = llvm::yaml::KeyValueNode::getValue(v40);
LABEL_133:
          v82 = "'fallthrough' and 'redirecting-with' are mutually exclusive";
          goto LABEL_134;
        }
        LOBYTE(v96[0]) = 0;
        v72 = llvm::yaml::KeyValueNode::getValue(v40);
        if (!sub_1C63988C0(&v84, v72, v96))
          goto LABEL_135;
        v23[25] = 2 * (LOBYTE(v96[0]) == 0);
        goto LABEL_130;
      case 0xEuLL:
        if (*(_QWORD *)v45 != 0x6E65732D65736163 || *(_QWORD *)(v45 + 6) != 0x6576697469736E65)
          goto LABEL_126;
        v74 = llvm::yaml::KeyValueNode::getValue(v40);
        v75 = v23 + 24;
        goto LABEL_124;
      case 0x10uLL:
        if (*(_QWORD *)v45 != 0x2D79616C7265766FLL || *((_QWORD *)v45 + 1) != 0x65766974616C6572)
          goto LABEL_126;
        v74 = llvm::yaml::KeyValueNode::getValue(v40);
        v75 = (char *)v23 + 97;
        goto LABEL_124;
      case 0x12uLL:
        if (*(_QWORD *)v45 != 0x657478652D657375
          || *((_QWORD *)v45 + 1) != 0x6D616E2D6C616E72
          || *((_WORD *)v45 + 8) != 29541)
        {
          goto LABEL_126;
        }
        v74 = llvm::yaml::KeyValueNode::getValue(v40);
        v75 = (char *)v23 + 98;
LABEL_124:
        if ((sub_1C63988C0(&v84, v74, v75) & 1) == 0)
          goto LABEL_135;
        goto LABEL_130;
      default:
LABEL_126:
        *(_QWORD *)&v96[0] = "fallthrough";
        *((_QWORD *)&v96[0] + 1) = 11;
        v79 = *((unsigned __int8 *)sub_1C6399070((uint64_t)v103, (const void **)v96) + 17);
        v80 = llvm::yaml::KeyValueNode::getValue(v40);
        if (v79)
          goto LABEL_133;
        v81 = sub_1C6398A84(&v84, v80);
        if (!HIDWORD(v81))
        {
          v80 = llvm::yaml::KeyValueNode::getValue(v40);
          v82 = "expected valid redirect kind";
LABEL_134:
          *(_QWORD *)&v96[0] = v82;
          v97 = 259;
          llvm::yaml::Stream::printError(v84, v80, (llvm::Twine *)v96, 0);
          goto LABEL_135;
        }
        v23[25] = v81;
LABEL_130:
        LODWORD(v51) = 1;
        goto LABEL_136;
    }
  }
  v106 = "expected root node";
  LOWORD(v109) = 259;
  llvm::SourceMgr::PrintMessage((llvm *)v89, 0, 0, (llvm::Twine *)&v106, 0, 0, 0, 0, 1u);
  *a7 = 0;
LABEL_149:
  llvm::yaml::Stream::~Stream((llvm::yaml::Stream *)v88);
  llvm::SourceMgr::~SourceMgr((llvm::SourceMgr *)v89);
}

void llvm::vfs::RedirectingFileSystem::create(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  int v19;
  const void *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  const void *v26;
  uint64_t v27;
  const void *v28;
  char v29;
  int v30;
  const void *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  size_t v37;
  unsigned int v38;
  int v39;
  size_t v40;
  unsigned __int8 *v41;
  int v42;
  unsigned int v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  size_t *v54;
  char *v55;
  unsigned int v56;
  _QWORD **i;
  unsigned __int8 *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v67;
  const void *v69;
  size_t v70;
  uint64_t v71;
  void *v72;
  size_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  char *v82;
  uint64_t v83;
  _QWORD *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int8 *__s1;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102[2];
  void *v103;
  size_t v104;
  uint64_t v105;
  int v106;
  void *v107;
  __int128 v108;
  _BYTE v109[128];
  unsigned __int8 *v110;
  __int128 v111;
  _QWORD v112[18];

  v112[16] = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  v101 = a4;
  v93 = a4;
  v9 = (unsigned int *)(a4 + 8);
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  *a5 = llvm::vfs::RedirectingFileSystem::RedirectingFileSystem(v8, &v101);
  v11 = v101;
  if (v101)
  {
    v12 = (unsigned int *)(v101 + 8);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  *(_BYTE *)(*a5 + 98) = a3;
  v98 = 0;
  v99 = 0;
  v100 = 0x1000000000;
  if (!a2)
    goto LABEL_123;
  v15 = a1 + 48 * a2;
  if (a3)
    v16 = 1;
  else
    v16 = 2;
  v91 = v16;
  do
  {
    v17 = v15 - 48;
    v18 = *(_BYTE *)(v15 - 25);
    v19 = v18;
    if (v18 >= 0)
      v20 = (const void *)(v15 - 48);
    else
      v20 = *(const void **)(v15 - 48);
    v21 = v18 & 0x7F;
    if (v19 >= 0)
      v22 = v21;
    else
      v22 = *(_QWORD *)(v15 - 40);
    v110 = (unsigned __int8 *)v112;
    v111 = xmmword_1C85F20B0;
    if (v22 >= 0x81)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v110, v112, v22, 1);
      v25 = v110;
      v23 = v111;
    }
    else
    {
      v23 = 0;
      v24 = 0;
      v25 = (unsigned __int8 *)v112;
      if (!v22)
        goto LABEL_22;
    }
    memcpy(&v25[v23], v20, v22);
    v24 = v111;
LABEL_22:
    *(_QWORD *)&v111 = v24 + v22;
    v28 = *(const void **)(v15 - 24);
    v27 = v15 - 24;
    v26 = v28;
    v29 = *(_BYTE *)(v27 + 23);
    v30 = v29;
    if (v29 >= 0)
      v31 = (const void *)v27;
    else
      v31 = v26;
    v32 = v29 & 0x7F;
    if (v30 >= 0)
      v33 = v32;
    else
      v33 = *(_QWORD *)(v27 + 8);
    v107 = v109;
    v108 = xmmword_1C85F20B0;
    if (v33 >= 0x81)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v107, v109, v33, 1);
      v36 = v107;
      v34 = v108;
LABEL_30:
      memcpy(&v36[v34], v31, v33);
      v35 = v108;
      goto LABEL_31;
    }
    v34 = 0;
    v35 = 0;
    v36 = v109;
    if (v33)
      goto LABEL_30;
LABEL_31:
    *(_QWORD *)&v108 = v35 + v33;
    (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v93 + 88))(v93, &v110);
    v37 = v111;
    __s1 = v110;
    v38 = v99;
    if (!(_DWORD)v99)
    {
      v99 = 0;
      LODWORD(v100) = 0;
      v84 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
      if (!v84)
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      v84[16] = 2;
      v98 = v84;
      v38 = 16;
      LODWORD(v99) = 16;
    }
    v39 = 0;
    if (v37)
    {
      v40 = v37;
      v41 = __s1;
      do
      {
        v42 = *v41++;
        v39 = 33 * v39 + v42;
        --v40;
      }
      while (v40);
    }
    v94 = v17;
    v95 = v17;
    v43 = v38 - 1;
    v44 = v98;
    v45 = (char *)v98 + 8 * v38 + 8;
    v46 = HIDWORD(v100);
    v47 = -1;
    v48 = 1;
    v49 = v39;
    while (1)
    {
      v50 = v49 & v43;
      v51 = (_QWORD *)v44[v50];
      if (!v51)
        break;
      if (v51 == (_QWORD *)-8)
      {
        if (v47 == -1)
          v47 = v49 & v43;
      }
      else if (*(_DWORD *)&v45[4 * v50] == v39 && v37 == *v51 && (!v37 || !memcmp(__s1, (char *)v51 + v46, v37)))
      {
        goto LABEL_50;
      }
      v49 = v48 + v50;
      ++v48;
    }
    v52 = v47;
    if (v47 == -1)
    {
      v52 = v50;
      v50 = v50;
    }
    else
    {
      v50 = v47;
    }
    *(_DWORD *)&v45[4 * v52] = v39;
    v51 = (_QWORD *)v44[v50];
LABEL_50:
    if (v51 == (_QWORD *)-8)
    {
      LODWORD(v100) = v100 - 1;
    }
    else if (v51)
    {
      goto LABEL_63;
    }
    v53 = operator new(v37 + 17, (std::align_val_t)8uLL);
    v54 = v53;
    v55 = (char *)(v53 + 2);
    if (v37)
      memcpy(v53 + 2, __s1, v37);
    v55[v37] = 0;
    *v54 = v37;
    v54[1] = 0;
    v44[v50] = v54;
    ++HIDWORD(v99);
    v56 = llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&v98, v50);
    for (i = (_QWORD **)((char *)v98 + 8 * v56); ; ++i)
    {
      v51 = *i;
      if (*i && v51 + 1 != 0)
        break;
    }
LABEL_63:
    if (v51[1])
      goto LABEL_103;
    v59 = v110;
    v60 = v111;
    v61 = sub_1C5E7BE8C(v110, v111, 0);
    if (v60 >= v61)
      v62 = v61;
    else
      v62 = v60;
    if (v61 == -1)
      v63 = 0;
    else
      v63 = v62;
    if (v61 == -1)
      v64 = 0;
    else
      v64 = (unint64_t)v59;
    llvm::sys::path::begin(v64, v63, 0, (uint64_t)v102);
    v65 = 0;
    if (v102[0] != v64 || v105 != v63)
    {
      v65 = 0;
      v67 = *a5;
      do
      {
        v65 = sub_1C5E55820(v67, v103, v104, v65);
        llvm::sys::path::const_iterator::operator++(v102);
      }
      while (v102[0] != v64 || v105 != v63);
    }
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v93 + 88))(v93, &v107);
    v103 = 0;
    v104 = 0;
    v102[0] = (uint64_t)v110;
    v102[1] = v111;
    v105 = v111;
    v106 = 0;
    llvm::sys::path::reverse_iterator::operator++((uint64_t)v102);
    v69 = v103;
    v70 = v104;
    v71 = operator new();
    v72 = v107;
    v73 = v108;
    *(_QWORD *)v71 = off_1E81A4608;
    *(_DWORD *)(v71 + 8) = 2;
    if (v70 > 0x7FFFFFFFFFFFFFF7)
LABEL_125:
      abort();
    v74 = v71;
    if (v70 >= 0x17)
    {
      v76 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v70 | 7) != 0x17)
        v76 = v70 | 7;
      v77 = v76 + 1;
      v75 = operator new(v76 + 1);
      *(_QWORD *)(v74 + 24) = v70;
      *(_QWORD *)(v74 + 32) = v77 | 0x8000000000000000;
      *(_QWORD *)(v74 + 16) = v75;
LABEL_90:
      memmove(v75, v69, v70);
      goto LABEL_91;
    }
    v75 = (void *)(v71 + 16);
    *(_BYTE *)(v71 + 39) = v70;
    if (v70)
      goto LABEL_90;
LABEL_91:
    *((_BYTE *)v75 + v70) = 0;
    *(_QWORD *)v74 = &off_1E81A45E8;
    v78 = (void *)(v74 + 40);
    if (v73 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_125;
    if (v73 >= 0x17)
    {
      v79 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v73 | 7) != 0x17)
        v79 = v73 | 7;
      v80 = v79 + 1;
      v78 = operator new(v79 + 1);
      *(_QWORD *)(v74 + 48) = v73;
      *(_QWORD *)(v74 + 56) = v80 | 0x8000000000000000;
      *(_QWORD *)(v74 + 40) = v78;
LABEL_98:
      memmove(v78, v72, v73);
      goto LABEL_99;
    }
    *(_BYTE *)(v74 + 63) = v73;
    if (v73)
      goto LABEL_98;
LABEL_99:
    *((_BYTE *)v78 + v73) = 0;
    *(_DWORD *)(v74 + 64) = v91;
    *(_QWORD *)v74 = &off_1E81A45C8;
    v51[1] = v74;
    v97 = v74;
    v81 = *(uint64_t **)(v65 + 48);
    if ((unint64_t)v81 >= *(_QWORD *)(v65 + 56))
    {
      v82 = sub_1C4D62F9C((char **)(v65 + 40), &v97);
      v83 = v97;
      *(_QWORD *)(v65 + 48) = v82;
      v97 = 0;
      if (v83)
        (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
    }
    else
    {
      *v81 = v74;
      *(_QWORD *)(v65 + 48) = v81 + 1;
      v97 = 0;
    }
LABEL_103:
    if (v107 != v109)
      free(v107);
    if (v110 != (unsigned __int8 *)v112)
      free(v110);
    v15 = v94;
  }
  while (v95 != a1);
  if (!HIDWORD(v99))
  {
LABEL_123:
    v85 = (char *)v98;
    goto LABEL_124;
  }
  v85 = (char *)v98;
  if ((_DWORD)v99)
  {
    v86 = 0;
    v87 = 8 * v99;
    do
    {
      v88 = *(_QWORD *)&v85[v86];
      if (v88 != -8 && v88 != 0)
        MEMORY[0x1CAA32FB4]();
      v86 += 8;
    }
    while (v87 != v86);
  }
LABEL_124:
  free(v85);
}

uint64_t sub_1C5E55820(uint64_t a1, void *__s1, size_t __n, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  char v13;
  const void *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  char v18;
  int v19;
  const void *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v24;
  uint64_t v25;
  void *v26;
  char v27;
  uint64_t v28;
  void *v29;
  size_t v30;
  size_t v31;
  __int128 v32;
  uint64_t *v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v38;
  _BYTE v39[32];
  __int16 v40;
  void *__p;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int16 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int16 v50;
  _QWORD v51[5];

  v51[2] = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    v7 = a4;
    if (*(_DWORD *)(a4 + 8))
      v8 = 0;
    else
      v8 = a4;
    v9 = *(uint64_t **)(v8 + 40);
    v10 = *(uint64_t **)(v8 + 48);
    while (v9 != v10)
    {
      v11 = *v9;
      if (*v9)
        v12 = *(_DWORD *)(*v9 + 8) == 0;
      else
        v12 = 0;
      if (v12)
      {
        v13 = *(_BYTE *)(v11 + 39);
        v14 = v13 >= 0 ? (const void *)(v11 + 16) : *(const void **)(v11 + 16);
        v15 = *(_QWORD *)(v11 + 24);
        if (v13 >= 0)
          v15 = v13 & 0x7F;
        if (__n == v15 && (!__n || !memcmp(__s1, v14, __n)))
          return v11;
      }
      ++v9;
    }
  }
  else
  {
    v16 = *(uint64_t **)(a1 + 16);
    v17 = *(uint64_t **)(a1 + 24);
    while (v16 != v17)
    {
      v11 = *v16;
      v18 = *(_BYTE *)(*v16 + 39);
      v19 = v18;
      if (v18 >= 0)
        v20 = (const void *)(*v16 + 16);
      else
        v20 = *(const void **)(*v16 + 16);
      v21 = v18 & 0x7F;
      if (v19 < 0)
        v21 = *(_QWORD *)(v11 + 24);
      if (__n == v21 && (!__n || !memcmp(__s1, v20, __n)))
        return v11;
      ++v16;
    }
    v7 = 0;
  }
  v40 = 257;
  do
  {
    v22 = __ldaxr((unsigned int *)&unk_1EF8F7330);
    v23 = v22 + 1;
  }
  while (__stlxr(v23, (unsigned int *)&unk_1EF8F7330));
  v24 = 1000 * std::chrono::system_clock::now().__d_.__rep_;
  llvm::Twine::str((llvm::Twine *)v39, &__p);
  *(_QWORD *)&v43 = -1;
  *((_QWORD *)&v43 + 1) = v23;
  *(_QWORD *)&v45 = 0;
  v44 = (unint64_t)v24;
  *((_QWORD *)&v45 + 1) = 0x1FF00000003;
  v46 = 0;
  v25 = operator new();
  v26 = __p;
  v51[0] = v42;
  *(_QWORD *)((char *)v51 + 7) = *(_QWORD *)((char *)&v42 + 7);
  v27 = HIBYTE(v42);
  v42 = 0uLL;
  __p = 0;
  v47 = v43;
  v48 = v44;
  v49 = v45;
  v50 = v46;
  *(_DWORD *)(v25 + 8) = 0;
  if (__n >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v28 = v25;
  if (__n >= 0x17)
  {
    v30 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__n | 7) != 0x17)
      v30 = __n | 7;
    v31 = v30 + 1;
    v29 = operator new(v30 + 1);
    *(_QWORD *)(v28 + 24) = __n;
    *(_QWORD *)(v28 + 32) = v31 | 0x8000000000000000;
    *(_QWORD *)(v28 + 16) = v29;
    goto LABEL_42;
  }
  v29 = (void *)(v25 + 16);
  *(_BYTE *)(v25 + 39) = __n;
  if (__n)
LABEL_42:
    memmove(v29, __s1, __n);
  *((_BYTE *)v29 + __n) = 0;
  v32 = v48;
  *(_OWORD *)(v28 + 88) = v47;
  *(_QWORD *)v28 = &off_1E81A4648;
  *(_QWORD *)(v28 + 40) = 0;
  *(_QWORD *)(v28 + 48) = 0;
  *(_QWORD *)(v28 + 56) = 0;
  *(_QWORD *)(v28 + 64) = v26;
  *(_QWORD *)(v28 + 72) = v51[0];
  *(_QWORD *)(v28 + 79) = *(_QWORD *)((char *)v51 + 7);
  *(_BYTE *)(v28 + 87) = v27;
  *(_OWORD *)(v28 + 104) = v32;
  *(_OWORD *)(v28 + 120) = v49;
  *(_WORD *)(v28 + 136) = v50;
  *(_QWORD *)&v47 = v28;
  if (SHIBYTE(v42) < 0)
  {
    operator delete(__p);
    if (v7)
    {
LABEL_45:
      *(_QWORD *)&v47 = 0;
      v38 = v28;
      v33 = *(uint64_t **)(v7 + 48);
      if ((unint64_t)v33 >= *(_QWORD *)(v7 + 56))
      {
        v34 = sub_1C4D62F9C((char **)(v7 + 40), &v38);
        v36 = v38;
        *(_QWORD *)(v7 + 48) = v34;
        v38 = 0;
        if (v36)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
          v34 = *(char **)(v7 + 48);
        }
      }
      else
      {
        *v33 = v28;
        v34 = (char *)(v33 + 1);
        *(_QWORD *)(v7 + 48) = v34;
        v38 = 0;
      }
      goto LABEL_54;
    }
  }
  else if (v7)
  {
    goto LABEL_45;
  }
  v35 = *(uint64_t **)(a1 + 24);
  if ((unint64_t)v35 >= *(_QWORD *)(a1 + 32))
  {
    v34 = sub_1C4D62F9C((char **)(a1 + 16), (uint64_t *)&v47);
  }
  else
  {
    *(_QWORD *)&v47 = 0;
    *v35 = v28;
    v34 = (char *)(v35 + 1);
  }
  *(_QWORD *)(a1 + 24) = v34;
LABEL_54:
  v11 = *((_QWORD *)v34 - 1);
  if ((_QWORD)v47)
    (*(void (**)(_QWORD))(*(_QWORD *)v47 + 8))(v47);
  return v11;
}

uint64_t llvm::vfs::RedirectingFileSystem::LookupResult::LookupResult(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4)
{
  uint64_t v5;
  uint64_t v9;
  char v10;
  int v11;
  const void *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  _QWORD *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t first_of;
  uint64_t v23;
  size_t v24;
  void *v25;
  __int128 *p_dst;
  size_t v27;
  size_t v28;
  __int128 __dst;
  unint64_t v31;
  _OWORD v32[3];
  _OWORD v33[3];
  void *__src;
  size_t __len[2];
  _QWORD v36[33];

  v36[32] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  v5 = a1 + 8;
  *(_BYTE *)(a1 + 32) = 0;
  if (!a2 || *(_DWORD *)(a2 + 8) != 1)
    return a1;
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_BYTE *)(a2 + 63);
  v11 = v10;
  if (v10 >= 0)
    v12 = (const void *)(a2 + 40);
  else
    v12 = *(const void **)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  v14 = v10 & 0x7F;
  if (v11 >= 0)
    v15 = v14;
  else
    v15 = *(_QWORD *)(a2 + 48);
  __src = v36;
  *(_OWORD *)__len = xmmword_1C64638F0;
  if (v15 >= 0x101)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__src, v36, v15, 1);
    v17 = __src;
    v16 = __len[0];
  }
  else
  {
    v16 = 0;
    if (!v15)
      goto LABEL_13;
    v17 = v36;
  }
  memcpy((char *)v17 + v16, v12, v15);
  v16 = __len[0];
  LOBYTE(v11) = *(_BYTE *)(a2 + 63);
  v9 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  v14 = v11 & 0x7F;
LABEL_13:
  __len[0] = v16 + v15;
  v18 = a3[1];
  v33[0] = *a3;
  v33[1] = v18;
  v33[2] = a3[2];
  v19 = a4[1];
  v32[0] = *a4;
  v32[1] = v19;
  v32[2] = a4[2];
  if ((v11 & 0x80u) == 0)
    v20 = a2 + 40;
  else
    v20 = v9;
  if ((v11 & 0x80u) == 0)
    v21 = v14;
  else
    v21 = v13;
  *(_QWORD *)&__dst = v20;
  *((_QWORD *)&__dst + 1) = v21;
  first_of = llvm::StringRef::find_first_of(&__dst, "/\\", 2, 0);
  if (first_of == -1)
  {
    v23 = 0;
  }
  else if (*(_BYTE *)(v20 + first_of) == 47)
  {
    v23 = 1;
  }
  else
  {
    v23 = 3;
  }
  llvm::sys::path::append((uint64_t *)&__src, (uint64_t)v33, v32, (const llvm::Twine *)v23);
  v24 = __len[0];
  if (__len[0] >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v25 = __src;
  if (__len[0] >= 0x17)
  {
    v27 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len[0] | 7) != 0x17)
      v27 = __len[0] | 7;
    v28 = v27 + 1;
    p_dst = (__int128 *)operator new(v27 + 1);
    *((_QWORD *)&__dst + 1) = v24;
    v31 = v28 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v31) = __len[0];
    p_dst = &__dst;
    if (!__len[0])
      goto LABEL_32;
  }
  memmove(p_dst, v25, v24);
LABEL_32:
  *((_BYTE *)p_dst + v24) = 0;
  if (*(_BYTE *)(a1 + 32))
  {
    if (*(char *)(a1 + 31) < 0)
      operator delete(*(void **)v5);
    *(_OWORD *)v5 = __dst;
    *(_QWORD *)(v5 + 16) = v31;
  }
  else
  {
    *(_OWORD *)v5 = __dst;
    *(_QWORD *)(v5 + 16) = v31;
    *(_BYTE *)(a1 + 32) = 1;
  }
  if (__src != v36)
    free(__src);
  return a1;
}

uint64_t sub_1C5E55E08(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  uint64_t first_of;
  unsigned int v7;
  unint64_t v8;
  unsigned __int8 *v9;
  size_t v10;
  uint64_t v11;
  _QWORD v13[2];

  v13[0] = a2;
  v13[1] = a3;
  first_of = llvm::StringRef::find_first_of(v13, "/\\", 2, 0);
  if (first_of == -1)
  {
    v7 = 0;
  }
  else if (a2[first_of] == 47)
  {
    v7 = 1;
  }
  else
  {
    v7 = 3;
  }
  v9 = llvm::sys::path::remove_leading_dotslash(a2, a3, v7);
  v10 = v8;
  *(_QWORD *)a1 = a1 + 24;
  *(_OWORD *)(a1 + 8) = xmmword_1C64638F0;
  if (v8 >= 0x101)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(a1, (void *)(a1 + 24), v8, 1);
    v11 = *(_QWORD *)(a1 + 8);
    goto LABEL_8;
  }
  v11 = 0;
  if (v8)
  {
LABEL_8:
    memcpy((void *)(*(_QWORD *)a1 + v11), v9, v10);
    v11 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(a1 + 8) = v11 + v10;
  return llvm::sys::path::remove_dots((unsigned __int8 **)a1, 1, v7);
}

uint64_t llvm::vfs::RedirectingFileSystem::lookupPathImpl@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X8>)
{
  char v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t result;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  _OWORD *v19;
  _OWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _BYTE *v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[3];
  _OWORD v33[3];
  _OWORD v34[3];
  _OWORD v35[3];
  _OWORD v36[3];
  _OWORD v37[3];
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  char v41;

  v10 = *(_BYTE *)(a4 + 39);
  v11 = v10;
  v12 = v10 & 0x7F;
  if (v11 >= 0)
    v13 = v12;
  else
    v13 = *(_QWORD *)(a4 + 24);
  if (v13)
  {
    if (v11 >= 0)
      v29 = (_BYTE *)(a4 + 16);
    else
      v29 = *(_BYTE **)(a4 + 16);
    if (!sub_1C6397BE4(*(_BYTE *)(a1 + 96), *(unsigned __int8 **)(a2 + 16), *(_QWORD *)(a2 + 24), v29, v13))
    {
      result = (uint64_t)std::generic_category();
      v28 = *((_BYTE *)a5 + 40) | 1;
LABEL_19:
      *((_BYTE *)a5 + 40) = v28;
      v16 = 2;
      goto LABEL_20;
    }
    llvm::sys::path::const_iterator::operator++((uint64_t *)a2);
    if (*(_QWORD *)a2 == *(_QWORD *)a3 && *(_QWORD *)(a2 + 32) == *((_QWORD *)a3 + 4))
    {
      v30 = *(_OWORD *)(a2 + 16);
      v37[0] = *(_OWORD *)a2;
      v37[1] = v30;
      v37[2] = *(_OWORD *)(a2 + 32);
      v31 = a3[1];
      v36[0] = *a3;
      v36[1] = v31;
      v36[2] = a3[2];
      v19 = v37;
      v20 = v36;
LABEL_9:
      result = llvm::vfs::RedirectingFileSystem::LookupResult::LookupResult((uint64_t)&v38, a4, v19, v20);
      *((_BYTE *)a5 + 40) &= ~1u;
      *(_QWORD *)a5 = v38;
      *((_BYTE *)a5 + 8) = 0;
      *((_BYTE *)a5 + 32) = 0;
      if (v41)
      {
        *(_OWORD *)(a5 + 2) = v39;
        *((_QWORD *)a5 + 3) = v40;
        *((_BYTE *)a5 + 32) = 1;
      }
      return result;
    }
  }
  v14 = *(_DWORD *)(a4 + 8);
  if (v14 == 1)
  {
    v17 = *(_OWORD *)(a2 + 16);
    v35[0] = *(_OWORD *)a2;
    v35[1] = v17;
    v35[2] = *(_OWORD *)(a2 + 32);
    v18 = a3[1];
    v34[0] = *a3;
    v34[1] = v18;
    v34[2] = a3[2];
    v19 = v35;
    v20 = v34;
    goto LABEL_9;
  }
  if (v14 == 2)
  {
    result = (uint64_t)std::generic_category();
    *((_BYTE *)a5 + 40) |= 1u;
    v16 = 20;
LABEL_20:
    *(_QWORD *)a5 = v16;
    *((_QWORD *)a5 + 1) = result;
    return result;
  }
  v22 = *(_QWORD **)(a4 + 40);
  v21 = *(_QWORD **)(a4 + 48);
  if (v22 == v21)
  {
    v25 = *((_BYTE *)a5 + 40);
LABEL_18:
    result = (uint64_t)std::generic_category();
    v28 = v25 | 1;
    goto LABEL_19;
  }
  while (1)
  {
    v23 = *(_OWORD *)(a2 + 16);
    v33[0] = *(_OWORD *)a2;
    v33[1] = v23;
    v33[2] = *(_OWORD *)(a2 + 32);
    v24 = a3[1];
    v32[0] = *a3;
    v32[1] = v24;
    v32[2] = a3[2];
    result = llvm::vfs::RedirectingFileSystem::lookupPathImpl(a1, v33, v32, *v22);
    v25 = *((_BYTE *)a5 + 40);
    if ((v25 & 1) == 0)
      return result;
    v26 = *a5;
    v27 = *((_QWORD *)a5 + 1);
    result = (uint64_t)std::generic_category();
    if (v27 != result || v26 != 2)
      return result;
    if (++v22 == v21)
      goto LABEL_18;
  }
}

void sub_1C5E5612C(char *__dst, llvm::Twine *this, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int16 v19;

  if (*(_BYTE *)(a4 + 73))
  {
    *(_OWORD *)__dst = *(_OWORD *)a4;
    *((_QWORD *)__dst + 2) = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
    *(_OWORD *)(__dst + 24) = *(_OWORD *)(a4 + 24);
    *(_OWORD *)(__dst + 40) = *(_OWORD *)(a4 + 40);
    *(_OWORD *)(__dst + 56) = *(_OWORD *)(a4 + 56);
    *((_WORD *)__dst + 36) = *(_WORD *)(a4 + 72);
  }
  else
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1C47EBC30(__dst, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)a4;
      *((_QWORD *)__dst + 2) = *(_QWORD *)(a4 + 16);
    }
    *(_OWORD *)(__dst + 24) = *(_OWORD *)(a4 + 24);
    *(_OWORD *)(__dst + 40) = *(_OWORD *)(a4 + 40);
    *(_OWORD *)(__dst + 56) = *(_OWORD *)(a4 + 56);
    *((_WORD *)__dst + 36) = *(_WORD *)(a4 + 72);
    if ((a3 & 1) != 0)
    {
      __dst[73] = 1;
    }
    else
    {
      v13 = *(_OWORD *)(__dst + 24);
      v8 = *((_QWORD *)__dst + 5);
      v9 = *((_QWORD *)__dst + 7);
      v10 = *((_QWORD *)__dst + 6);
      v11 = *((_QWORD *)__dst + 8);
      llvm::Twine::str(this, &v14);
      v16 = v13;
      *(_QWORD *)&v17 = v8;
      *((_QWORD *)&v17 + 1) = v10;
      *(_QWORD *)&v18 = v9;
      *((_QWORD *)&v18 + 1) = v11;
      v19 = 0;
      if (__dst[23] < 0)
        operator delete(*(void **)__dst);
      *(_OWORD *)__dst = v14;
      *((_QWORD *)__dst + 2) = v15;
      v12 = v17;
      *(_OWORD *)(__dst + 24) = v16;
      *(_OWORD *)(__dst + 40) = v12;
      *(_OWORD *)(__dst + 56) = v18;
      *((_WORD *)__dst + 36) = v19;
    }
    __dst[72] = 1;
  }
}

void llvm::vfs::RedirectingFileSystem::getExternalStatus(llvm::vfs::RedirectingFileSystem *this@<X0>, const llvm::Twine *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  void *__p[2];
  char v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 8) + 16))(__p);
  if ((v24 & 1) != 0 || v23)
  {
    sub_1C5057D6C((std::error_category *)a3, (__int128 *)__p);
  }
  else
  {
    v10 = v18;
    v6 = v19;
    v7 = v21;
    v8 = v20;
    v9 = v22;
    llvm::Twine::str(a2, &v11);
    v13 = v10;
    *(_QWORD *)&v14 = v6;
    *((_QWORD *)&v14 + 1) = v8;
    *(_QWORD *)&v15 = v7;
    *((_QWORD *)&v15 + 1) = v9;
    *(_BYTE *)(a3 + 80) &= ~1u;
    *(_OWORD *)a3 = v11;
    *(_QWORD *)(a3 + 16) = v12;
    *(_WORD *)(a3 + 72) = 0;
    *(_OWORD *)(a3 + 56) = v15;
    *(_OWORD *)(a3 + 40) = v14;
    *(_OWORD *)(a3 + 24) = v13;
  }
  if ((v24 & 1) == 0 && v17 < 0)
    operator delete(__p[0]);
}

void llvm::vfs::RedirectingFileSystem::status(llvm::vfs::RedirectingFileSystem *this@<X0>, const llvm::Twine *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t Canonical;
  uint64_t v7;
  char v8;
  const std::error_category *v9;
  uint64_t v10;
  uint64_t v11;
  const std::error_category *v12;
  void *v13;
  uint64_t v14;
  __int16 v15;
  void *__p[2];
  char v17;
  __int16 v18;
  char v19;
  uint64_t v20;
  void *v21;
  char v22;
  char v23;
  char v24;
  void *v25;
  __int128 v26;
  _QWORD v27[33];

  v27[32] = *MEMORY[0x1E0C80C00];
  v25 = v27;
  v26 = xmmword_1C64638F0;
  llvm::Twine::toVector((uint64_t)a2, (uint64_t)&v25);
  Canonical = llvm::vfs::RedirectingFileSystem::makeCanonical((uint64_t)this, (uint64_t)&v25);
  if ((_DWORD)Canonical)
  {
    *(_BYTE *)(a3 + 80) |= 1u;
    *(_QWORD *)a3 = Canonical;
    *(_QWORD *)(a3 + 8) = v7;
    goto LABEL_3;
  }
  if (*((_DWORD *)this + 25) == 1)
  {
    v18 = 261;
    __p[0] = v25;
    __p[1] = (void *)v26;
    llvm::vfs::RedirectingFileSystem::getExternalStatus(this, a2, a3);
    if ((*(_BYTE *)(a3 + 80) & 1) == 0)
      goto LABEL_3;
  }
  llvm::vfs::RedirectingFileSystem::lookupPath((uint64_t)this, (unint64_t)v25, v26, (unsigned int *)&v20);
  v8 = v24;
  if ((v24 & 1) != 0)
  {
    if (*((_DWORD *)this + 25))
    {
      v10 = v20;
      v9 = (const std::error_category *)v21;
    }
    else
    {
      v10 = v20;
      v9 = (const std::error_category *)v21;
      if (std::generic_category() == v9 && v10 == 2)
      {
        v18 = 261;
        __p[0] = v25;
        __p[1] = (void *)v26;
        llvm::vfs::RedirectingFileSystem::getExternalStatus(this, a2, a3);
        if ((v8 & 1) != 0)
          goto LABEL_3;
        goto LABEL_20;
      }
    }
    *(_BYTE *)(a3 + 80) |= 1u;
    *(_QWORD *)a3 = v10;
    *(_QWORD *)(a3 + 8) = v9;
    if ((v8 & 1) != 0)
      goto LABEL_3;
LABEL_20:
    if (v23 && v22 < 0)
      operator delete(v21);
    goto LABEL_3;
  }
  v15 = 261;
  v13 = v25;
  v14 = v26;
  llvm::vfs::RedirectingFileSystem::status((uint64_t)this, (llvm::Twine *)&v13, a2, &v20, (uint64_t)__p);
  if ((v19 & 1) != 0
    && !*((_DWORD *)this + 25)
    && ((v11 = LODWORD(__p[0]), v12 = (const std::error_category *)__p[1], !v20) || *(_DWORD *)(v20 + 8) == 1)
    && std::generic_category() == v12
    && v11 == 2)
  {
    v15 = 261;
    v13 = v25;
    v14 = v26;
    llvm::vfs::RedirectingFileSystem::getExternalStatus(this, a2, a3);
  }
  else
  {
    sub_1C5057D6C((std::error_category *)a3, (__int128 *)__p);
  }
  if ((v19 & 1) == 0 && v17 < 0)
    operator delete(__p[0]);
  if ((v24 & 1) == 0)
    goto LABEL_20;
LABEL_3:
  if (v25 != v27)
    free(v25);
}

uint64_t llvm::vfs::RedirectingFileSystem::exists(llvm::vfs::RedirectingFileSystem *this, const llvm::Twine *a2)
{
  uint64_t v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  const std::error_category *v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  char v12;
  size_t v13;
  void **p_dst;
  size_t v15;
  size_t v16;
  void **v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  void *__dst;
  unint64_t v26;
  unint64_t v27;
  __int16 v28;
  void *__src;
  size_t __len;
  char v31;
  void *v32;
  __int128 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  void *__p;
  char v38;
  char v39;
  char v40;
  void *v41;
  __int128 v42;
  _QWORD v43[33];

  v43[32] = *MEMORY[0x1E0C80C00];
  v41 = v43;
  v42 = xmmword_1C64638F0;
  llvm::Twine::toVector((uint64_t)a2, (uint64_t)&v41);
  if (llvm::vfs::RedirectingFileSystem::makeCanonical((uint64_t)this, (uint64_t)&v41))
  {
    v3 = 0;
    goto LABEL_3;
  }
  if (*((_DWORD *)this + 25) == 1)
  {
    v5 = *((_QWORD *)this + 8);
    v35 = 261;
    v32 = v41;
    *(_QWORD *)&v33 = v42;
    if (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v5 + 72))(v5, &v32) & 1) != 0)
    {
      v3 = 1;
      goto LABEL_3;
    }
  }
  llvm::vfs::RedirectingFileSystem::lookupPath((uint64_t)this, (unint64_t)v41, v42, (unsigned int *)&v36);
  v6 = v40;
  if ((v40 & 1) != 0)
  {
    if (*((_DWORD *)this + 25))
    {
      v3 = 0;
    }
    else
    {
      v7 = v36;
      v8 = (const std::error_category *)__p;
      v3 = 0;
      if (std::generic_category() == v8 && v7 == 2)
      {
        v9 = *((_QWORD *)this + 8);
        v35 = 261;
        v32 = v41;
        *(_QWORD *)&v33 = v42;
        v3 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v9 + 72))(v9, &v32);
      }
    }
    goto LABEL_18;
  }
  sub_1C5E54384((uint64_t)&__src, &v36);
  if (v31)
  {
    v10 = __src;
    if (!__src)
    {
      v11 = 0;
      v12 = 0;
      __dst = 0;
      v26 = 0;
      v27 = 0;
      goto LABEL_33;
    }
    v13 = __len;
    if (__len >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (__len >= 0x17)
    {
      v15 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len | 7) != 0x17)
        v15 = __len | 7;
      v16 = v15 + 1;
      p_dst = (void **)operator new(v15 + 1);
      v26 = v13;
      v27 = v16 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v27) = __len;
      p_dst = &__dst;
      if (!__len)
        goto LABEL_32;
    }
    memmove(p_dst, v10, v13);
LABEL_32:
    *((_BYTE *)p_dst + v13) = 0;
    v12 = HIBYTE(v27);
    v10 = __dst;
    v11 = v26;
LABEL_33:
    if (v12 >= 0)
      v17 = &__dst;
    else
      v17 = (void **)v10;
    if (v12 >= 0)
      v18 = v12 & 0x7F;
    else
      v18 = v11;
    v32 = &v34;
    v33 = xmmword_1C64638F0;
    if (v18 >= 0x101)
    {
      v24 = v17;
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v32, &v34, v18, 1);
      v17 = v24;
      v21 = (uint64_t *)v32;
      v19 = v33;
    }
    else
    {
      v19 = 0;
      v20 = 0;
      v21 = &v34;
      if (!v18)
        goto LABEL_42;
    }
    memcpy((char *)v21 + v19, v17, v18);
    v20 = v33;
LABEL_42:
    *(_QWORD *)&v33 = v20 + v18;
    if (v12 < 0)
      operator delete(v10);
    if (llvm::vfs::RedirectingFileSystem::makeCanonical((uint64_t)this, (uint64_t)&v32))
      goto LABEL_45;
    v22 = *((_QWORD *)this + 8);
    v28 = 261;
    __dst = v32;
    v26 = v33;
    if (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v22 + 72))(v22, &__dst) & 1) != 0)
    {
      v3 = 1;
    }
    else
    {
      if (*((_DWORD *)this + 25))
      {
LABEL_45:
        v3 = 0;
        goto LABEL_50;
      }
      v23 = *((_QWORD *)this + 8);
      v28 = 261;
      __dst = v41;
      v26 = v42;
      v3 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v23 + 72))(v23, &__dst);
    }
LABEL_50:
    if (v32 != &v34)
      free(v32);
    goto LABEL_12;
  }
  v3 = 1;
LABEL_12:
  v6 = v40;
LABEL_18:
  if ((v6 & 1) == 0 && v39 && v38 < 0)
    operator delete(__p);
LABEL_3:
  if (v41 != v43)
    free(v41);
  return v3;
}

void llvm::vfs::File::getWithPath(_BYTE *a1@<X0>, llvm::Twine *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  size_t v8;
  int v9;
  void *v10;
  void **v11;
  uint64_t v12;
  void **p_p;
  int v14;
  int v15;
  int v16;
  _BOOL4 v17;
  void *v19[2];
  char v20;
  void *__p;
  size_t __n;
  char v23;
  char v24;
  unsigned __int8 v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if ((a1[16] & 1) != 0)
    goto LABEL_27;
  (*(void (**)(void **__return_ptr))(**(_QWORD **)a1 + 16))(&__p);
  v6 = v25;
  if ((v26 & 1) == 0 && v23 < 0)
    operator delete(__p);
  if (v6)
  {
LABEL_27:
    sub_1C63993D0((std::error_category *)a3, (uint64_t)a1);
    return;
  }
  *(_BYTE *)(a3 + 16) &= ~1u;
  v7 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)a3 = v7;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v7 + 24))(&__p, v7);
  if ((v24 & 1) != 0)
    goto LABEL_32;
  llvm::Twine::str(a2, v19);
  if (v23 >= 0)
    v8 = v23 & 0x7F;
  else
    v8 = __n;
  v9 = v20;
  v10 = (void *)(v20 & 0x7F);
  if (v20 < 0)
    v10 = v19[1];
  if ((void *)v8 == v10)
  {
    if (v20 >= 0)
      v11 = v19;
    else
      v11 = (void **)v19[0];
    if (v23 < 0)
    {
      v17 = memcmp(__p, v11, __n) != 0;
    }
    else
    {
      if ((v23 & 0x7F) == 0)
      {
        v17 = 0;
        if ((v20 & 0x80000000) == 0)
        {
LABEL_30:
          if (!v17)
            goto LABEL_32;
          goto LABEL_31;
        }
        goto LABEL_37;
      }
      v12 = (v23 & 0x7F) - 1;
      p_p = &__p;
      do
      {
        v15 = *(unsigned __int8 *)p_p;
        p_p = (void **)((char *)p_p + 1);
        v14 = v15;
        v16 = *(unsigned __int8 *)v11;
        v11 = (void **)((char *)v11 + 1);
        v17 = v14 != v16;
      }
      while (v14 == v16 && v12-- != 0);
    }
    if ((v9 & 0x80000000) == 0)
      goto LABEL_30;
  }
  else
  {
    v17 = 1;
    if ((v20 & 0x80000000) == 0)
      goto LABEL_30;
  }
LABEL_37:
  operator delete(v19[0]);
  if (v17)
LABEL_31:
    (*(void (**)(uint64_t, llvm::Twine *))(*(_QWORD *)v7 + 56))(v7, a2);
LABEL_32:
  if ((v24 & 1) == 0 && v23 < 0)
    operator delete(__p);
}

void llvm::vfs::RedirectingFileSystem::openFileForRead(llvm::vfs::RedirectingFileSystem *this@<X0>, const llvm::Twine *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t Canonical;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  const std::error_category *v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  size_t v17;
  unint64_t v18;
  __int128 *v19;
  char v20;
  __int128 *p_dst;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  int v36;
  char v37;
  uint64_t v38;
  const std::error_category *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BOOL4 v44;
  __int128 *v45;
  void *v46[2];
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int16 v51;
  void *v52[2];
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int16 v57;
  __int128 v58;
  uint64_t v59;
  __int16 v60;
  __int128 __dst;
  unint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int16 v66;
  char v67;
  _QWORD v68[2];
  char v69;
  _QWORD v70[2];
  char v71;
  _QWORD v72[2];
  char v73;
  _BYTE v74[24];
  uint64_t v75;
  __int16 v76;
  _QWORD v77[2];
  char v78;
  uint64_t v79;
  void *__p;
  char v81;
  char v82;
  char v83;
  _QWORD v84[2];
  char v85;
  _BYTE v86[24];
  _QWORD v87[35];

  v87[32] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v86 = v87;
  *(_OWORD *)&v86[8] = xmmword_1C64638F0;
  llvm::Twine::toVector((uint64_t)a2, (uint64_t)v86);
  Canonical = llvm::vfs::RedirectingFileSystem::makeCanonical((uint64_t)this, (uint64_t)v86);
  if ((_DWORD)Canonical)
  {
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = Canonical;
    *(_QWORD *)(a3 + 8) = v7;
    goto LABEL_3;
  }
  if (*((_DWORD *)this + 25) != 1)
    goto LABEL_11;
  v8 = *((_QWORD *)this + 8);
  v76 = 261;
  *(_QWORD *)v74 = *(_QWORD *)v86;
  *(_QWORD *)&v74[8] = *(_QWORD *)&v86[8];
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)v8 + 24))(v84, v8, v74);
  llvm::vfs::File::getWithPath(v84, a2, a3);
  if ((v85 & 1) == 0)
  {
    v9 = v84[0];
    v84[0] = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  if ((*(_BYTE *)(a3 + 16) & 1) != 0)
  {
LABEL_11:
    llvm::vfs::RedirectingFileSystem::lookupPath((uint64_t)this, *(unint64_t *)v86, *(unint64_t *)&v86[8], (unsigned int *)&v79);
    if ((v83 & 1) == 0)
    {
      sub_1C5E54384((uint64_t)v74, &v79);
      if (!v74[16])
      {
        v10 = (void *)std::generic_category();
        *(_BYTE *)(a3 + 16) |= 1u;
        v11 = 22;
LABEL_25:
        *(_QWORD *)a3 = v11;
        *(_QWORD *)(a3 + 8) = v10;
LABEL_26:
        if ((v83 & 1) == 0 && v82 && v81 < 0)
          operator delete(__p);
        goto LABEL_3;
      }
      sub_1C5E54384((uint64_t)v74, &v79);
      v16 = *(const void **)v74;
      v17 = *(_QWORD *)&v74[8];
      if (!*(_QWORD *)v74)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        __dst = 0uLL;
        v62 = 0;
        goto LABEL_41;
      }
      if (*(_QWORD *)&v74[8] >= 0x7FFFFFFFFFFFFFF8uLL)
        abort();
      if (*(_QWORD *)&v74[8] >= 0x17uLL)
      {
        v22 = (*(_QWORD *)&v74[8] & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((*(_QWORD *)&v74[8] | 7) != 0x17)
          v22 = *(_QWORD *)&v74[8] | 7;
        v23 = v22 + 1;
        p_dst = (__int128 *)operator new(v22 + 1);
        *((_QWORD *)&__dst + 1) = v17;
        v62 = v23 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v62) = v74[8];
        p_dst = &__dst;
        if (!*(_QWORD *)&v74[8])
          goto LABEL_40;
      }
      memmove(p_dst, v16, v17);
LABEL_40:
      *((_BYTE *)p_dst + v17) = 0;
      v20 = HIBYTE(v62);
      v18 = *((_QWORD *)&__dst + 1);
      v19 = (__int128 *)__dst;
LABEL_41:
      if (v20 >= 0)
        v24 = &__dst;
      else
        v24 = v19;
      if (v20 >= 0)
        v25 = v20 & 0x7F;
      else
        v25 = v18;
      *(_QWORD *)v74 = &v75;
      *(_OWORD *)&v74[8] = xmmword_1C64638F0;
      if (v25 >= 0x101)
      {
        v45 = v24;
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v74, &v75, v25, 1);
        v24 = v45;
        v28 = *(uint64_t **)v74;
        v26 = *(_QWORD *)&v74[8];
      }
      else
      {
        v26 = 0;
        v27 = 0;
        v28 = &v75;
        if (!v25)
        {
LABEL_50:
          *(_QWORD *)&v74[8] = v27 + v25;
          if (v20 < 0)
            operator delete(v19);
          v29 = llvm::vfs::RedirectingFileSystem::makeCanonical((uint64_t)this, (uint64_t)v74);
          if ((_DWORD)v29)
          {
            *(_BYTE *)(a3 + 16) |= 1u;
            *(_QWORD *)a3 = v29;
            *(_QWORD *)(a3 + 8) = v30;
          }
          else
          {
            v31 = v79;
            v32 = *((_QWORD *)this + 8);
            WORD4(v63) = 261;
            __dst = *(_OWORD *)v74;
            (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v32 + 24))(v70, v32, &__dst);
            v60 = 261;
            *(_QWORD *)&v58 = v16;
            *((_QWORD *)&v58 + 1) = v17;
            llvm::vfs::File::getWithPath(v70, (llvm::Twine *)&v58, (uint64_t)v72);
            if ((v71 & 1) == 0)
            {
              v33 = v70[0];
              v70[0] = 0;
              if (v33)
                (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
            }
            if ((v73 & 1) != 0)
            {
              v38 = v72[0];
              v39 = (const std::error_category *)v72[1];
              if (!*((_DWORD *)this + 25)
                && (!v79 || *(_DWORD *)(v79 + 8) == 1)
                && std::generic_category() == v39
                && v38 == 2)
              {
                v41 = *((_QWORD *)this + 8);
                WORD4(v63) = 261;
                __dst = *(_OWORD *)v86;
                (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v41 + 24))(v68, v41, &__dst);
                llvm::vfs::File::getWithPath(v68, a2, a3);
                if ((v69 & 1) == 0)
                {
                  v42 = v68[0];
                  v68[0] = 0;
                  if (v42)
                    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
                }
              }
              else
              {
                *(_BYTE *)(a3 + 16) |= 1u;
                *(_QWORD *)a3 = v38;
                *(_QWORD *)(a3 + 8) = v39;
              }
            }
            else
            {
              v34 = v72[0];
              (*(void (**)(__int128 *__return_ptr, _QWORD))(*(_QWORD *)v72[0] + 16))(&__dst, v72[0]);
              v35 = v67;
              if ((v67 & 1) != 0)
              {
                v40 = __dst;
                *(_BYTE *)(a3 + 16) |= 1u;
                *(_OWORD *)a3 = v40;
              }
              else
              {
                v36 = *(_DWORD *)(v31 + 64);
                if (v36)
                  v37 = v36 == 1;
                else
                  v37 = *((_BYTE *)this + 98) != 0;
                if (SHIBYTE(v62) < 0)
                {
                  sub_1C47EBC30(v46, (void *)__dst, *((unint64_t *)&__dst + 1));
                }
                else
                {
                  *(_OWORD *)v46 = __dst;
                  v47 = v62;
                }
                v48 = v63;
                v49 = v64;
                v50 = v65;
                v51 = v66;
                sub_1C5E5612C((char *)v52, a2, v37, (uint64_t)v46);
                if (SHIBYTE(v47) < 0)
                  operator delete(v46[0]);
                v43 = operator new();
                if (SHIBYTE(v53) < 0)
                {
                  sub_1C47EBC30(&v58, v52[0], (unint64_t)v52[1]);
                  v44 = v53 < 0;
                }
                else
                {
                  v44 = 0;
                  v58 = *(_OWORD *)v52;
                  v59 = v53;
                }
                *(_QWORD *)v43 = off_1E81A48B8;
                *(_QWORD *)(v43 + 8) = v34;
                *(_OWORD *)(v43 + 16) = v58;
                *(_QWORD *)(v43 + 32) = v59;
                *(_OWORD *)(v43 + 40) = v54;
                *(_OWORD *)(v43 + 56) = v55;
                *(_OWORD *)(v43 + 72) = v56;
                *(_WORD *)(v43 + 88) = v57;
                *(_BYTE *)(a3 + 16) &= ~1u;
                *(_QWORD *)a3 = v43;
                if (v44)
                  operator delete(v52[0]);
                v34 = 0;
                v35 = v67;
              }
              if ((v35 & 1) == 0 && SHIBYTE(v62) < 0)
                operator delete((void *)__dst);
              if (v34)
                (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
            }
          }
          if (*(uint64_t **)v74 != &v75)
            free(*(void **)v74);
          goto LABEL_26;
        }
      }
      memcpy((char *)v28 + v26, v24, v25);
      v27 = *(_QWORD *)&v74[8];
      goto LABEL_50;
    }
    if (*((_DWORD *)this + 25))
    {
      if ((v83 & 1) == 0)
      {
LABEL_16:
        v10 = (void *)std::system_category();
        v11 = 0;
LABEL_24:
        *(_BYTE *)(a3 + 16) |= 1u;
        goto LABEL_25;
      }
    }
    else
    {
      v12 = v79;
      v13 = (const std::error_category *)__p;
      if (std::generic_category() == v13 && v12 == 2)
      {
        v14 = *((_QWORD *)this + 8);
        v76 = 261;
        *(_QWORD *)v74 = *(_QWORD *)v86;
        *(_QWORD *)&v74[8] = *(_QWORD *)&v86[8];
        (*(void (**)(_QWORD *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)v14 + 24))(v77, v14, v74);
        llvm::vfs::File::getWithPath(v77, a2, a3);
        if ((v78 & 1) == 0)
        {
          v15 = v77[0];
          v77[0] = 0;
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        }
        goto LABEL_26;
      }
      if ((v83 & 1) == 0)
        goto LABEL_16;
    }
    v11 = v79;
    v10 = __p;
    goto LABEL_24;
  }
LABEL_3:
  if (*(_QWORD **)v86 != v87)
    free(*(void **)v86);
}

unint64_t llvm::vfs::RedirectingFileSystem::getRealPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Canonical;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  const std::error_category *v10;
  const std::error_category *v11;
  const std::error_category *v12;
  uint64_t v14;
  const std::error_category *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  char v19;
  void *v20;
  uint64_t v21;
  __int16 v22;
  _DWORD *v23;
  void *__p;
  char v25;
  __int16 v26;
  char v27;
  void *v28;
  __int128 v29;
  _QWORD v30[33];

  v30[32] = *MEMORY[0x1E0C80C00];
  v28 = v30;
  v29 = xmmword_1C64638F0;
  llvm::Twine::toVector(a2, (uint64_t)&v28);
  Canonical = llvm::vfs::RedirectingFileSystem::makeCanonical(a1, (uint64_t)&v28);
  if ((_DWORD)Canonical
    || *(_DWORD *)(a1 + 100) == 1
    && (v8 = *(_QWORD *)(a1 + 64),
        v26 = 261,
        v23 = v28,
        __p = (void *)v29,
        Canonical = (*(uint64_t (**)(uint64_t, _DWORD **, uint64_t))(*(_QWORD *)v8 + 56))(v8, &v23, a3),
        !(_DWORD)Canonical))
  {
    v6 = Canonical & 0xFFFFFFFF00000000;
    goto LABEL_3;
  }
  llvm::vfs::RedirectingFileSystem::lookupPath(a1, (unint64_t)v28, v29, (unsigned int *)&v23);
  if ((v27 & 1) == 0)
  {
    sub_1C5E54384((uint64_t)v18, &v23);
    if (v19)
    {
      v9 = *(_QWORD *)(a1 + 64);
      v22 = 261;
      v20 = (void *)v18[0];
      v21 = v18[1];
      Canonical = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v9 + 56))(v9, &v20, a3);
      v11 = v10;
      if ((_DWORD)Canonical && !*(_DWORD *)(a1 + 100) && (!v23 || v23[2] == 1))
      {
        v12 = std::generic_category();
        if (Canonical == 2 && v12 == v11)
        {
          v14 = *(_QWORD *)(a1 + 64);
          v22 = 261;
          v20 = v28;
          v21 = v29;
          Canonical = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v14 + 56))(v14, &v20, a3);
        }
      }
      goto LABEL_22;
    }
    if (*(_DWORD *)(a1 + 100))
    {
      std::generic_category();
      v6 = 0;
      LODWORD(Canonical) = 22;
      goto LABEL_23;
    }
LABEL_31:
    v16 = *(_QWORD *)(a1 + 64);
    v22 = 261;
    v20 = v28;
    v21 = v29;
    v17 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v16 + 56))(v16, &v20, a3);
    LODWORD(Canonical) = v17;
    v6 = v17 & 0xFFFFFFFF00000000;
    goto LABEL_23;
  }
  if (*(_DWORD *)(a1 + 100))
  {
    Canonical = (uint64_t)v23;
  }
  else
  {
    Canonical = (uint64_t)v23;
    v15 = (const std::error_category *)__p;
    if (std::generic_category() == v15 && Canonical == 2)
      goto LABEL_31;
  }
LABEL_22:
  v6 = Canonical & 0xFFFFFFFF00000000;
LABEL_23:
  if ((v27 & 1) == 0 && (_BYTE)v26 && v25 < 0)
    operator delete(__p);
LABEL_3:
  if (v28 != v30)
    free(v28);
  return v6 | Canonical;
}

_QWORD *llvm::vfs::collectVFSFromYAML(_QWORD **a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18[2];
  _QWORD v19[16];
  uint64_t v20[3];
  char v21;
  char v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  *a1 = 0;
  v15 = *a7;
  v9 = v15;
  v16 = v8;
  *a7 = 0;
  llvm::vfs::RedirectingFileSystem::create(&v16, a2, a3, a4, a6, &v15, &v17);
  if (v9)
  {
    v10 = (unsigned int *)(v9 + 8);
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  result = v16;
  if (v16)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v16 + 8))(v16);
  v14 = v17;
  if (v17)
  {
    llvm::vfs::RedirectingFileSystem::lookupPath(v17, (unint64_t)"/", 1uLL, (unsigned int *)v20);
    if ((v23 & 1) == 0)
    {
      v18[0] = v19;
      v19[0] = "/";
      v19[1] = 1;
      v18[1] = (void *)0x800000001;
      sub_1C5E57594(v20[0], (uint64_t)v18, a5);
      if (v18[0] != v19)
        free(v18[0]);
      if (v22)
      {
        if (v21 < 0)
          operator delete((void *)v20[1]);
      }
    }
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  return result;
}

void sub_1C5E57594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  const void *v24;
  uint64_t v25;
  const void *v26;
  char v27;
  int v28;
  const void *v29;
  size_t v30;
  size_t v31;
  size_t v32;
  size_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *p_p;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  void *v44;
  size_t v45;
  unint64_t v46;
  void *__p;
  size_t v48;
  unint64_t v49;
  char v50;
  void **v51[4];
  __int16 v52;
  _QWORD *v53[4];
  __int16 v54;
  _QWORD *v55[4];
  __int16 v56;
  char *__s;
  __int128 v58;
  _QWORD v59[17];

  v5 = a1;
  v59[16] = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a1 + 8);
  if (v6 == 1)
  {
    __s = (char *)v59;
    v58 = xmmword_1C85F20B0;
    v15 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v15)
    {
      v16 = *(_QWORD *)a2;
      v17 = *(_QWORD *)a2 + 16 * v15;
      do
      {
        LOWORD(v48) = 261;
        v44 = *(void **)v16;
        v45 = *(_QWORD *)(v16 + 8);
        v56 = 257;
        v54 = 257;
        v52 = 257;
        llvm::sys::path::append(&__s, 0, (_QWORD **)&v44, v55, v53, v51);
        v16 += 16;
      }
      while (v16 != v17);
      goto LABEL_24;
    }
  }
  else
  {
    if (!v6)
    {
      v8 = *(uint64_t **)(a1 + 40);
      v7 = *(uint64_t **)(a1 + 48);
      if (v8 != v7)
      {
        v9 = *(_DWORD *)(a2 + 8);
        do
        {
          v10 = *(_BYTE *)(*v8 + 39);
          if (v10 >= 0)
            v11 = *v8 + 16;
          else
            v11 = *(_QWORD *)(*v8 + 16);
          if (v10 >= 0)
            v12 = v10 & 0x7F;
          else
            v12 = *(_QWORD *)(*v8 + 24);
          if (v9 >= *(_DWORD *)(a2 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v9 + 1, 16);
            v9 = *(_DWORD *)(a2 + 8);
          }
          v13 = (uint64_t *)(*(_QWORD *)a2 + 16 * v9);
          *v13 = v11;
          v13[1] = v12;
          ++*(_DWORD *)(a2 + 8);
          v14 = *v8++;
          sub_1C5E57594(v14, a2, a3);
          v9 = *(_DWORD *)(a2 + 8) - 1;
          *(_DWORD *)(a2 + 8) = v9;
        }
        while (v8 != v7);
      }
      return;
    }
    if (v6 != 2)
      v5 = 0;
    __s = (char *)v59;
    v58 = xmmword_1C85F20B0;
    v18 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v18)
    {
      v19 = *(_QWORD *)a2;
      v20 = *(_QWORD *)a2 + 16 * v18;
      do
      {
        LOWORD(v48) = 261;
        v44 = *(void **)v19;
        v45 = *(_QWORD *)(v19 + 8);
        v56 = 257;
        v54 = 257;
        v52 = 257;
        llvm::sys::path::append(&__s, 0, (_QWORD **)&v44, v55, v53, v51);
        v19 += 16;
      }
      while (v19 != v20);
LABEL_24:
      v22 = *((_QWORD *)&v58 + 1);
      v21 = v58;
      goto LABEL_26;
    }
  }
  v21 = 0;
  v22 = 128;
LABEL_26:
  if (v21 + 1 > v22)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__s, v59, v21 + 1, 1);
    v21 = v58;
  }
  __s[v21] = 0;
  v23 = __s;
  v26 = *(const void **)(v5 + 40);
  v25 = v5 + 40;
  v24 = v26;
  v27 = *(_BYTE *)(v25 + 23);
  v28 = v27;
  if (v27 >= 0)
    v29 = (const void *)v25;
  else
    v29 = v24;
  v30 = v27 & 0x7F;
  if (v28 >= 0)
    v31 = v30;
  else
    v31 = *(_QWORD *)(v25 + 8);
  v32 = strlen(__s);
  if (v32 > 0x7FFFFFFFFFFFFFF7)
LABEL_57:
    abort();
  v33 = v32;
  if (v32 >= 0x17)
  {
    v35 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17)
      v35 = v32 | 7;
    v36 = v35 + 1;
    v34 = operator new(v35 + 1);
    v45 = v33;
    v46 = v36 | 0x8000000000000000;
    v44 = v34;
    goto LABEL_41;
  }
  HIBYTE(v46) = v32;
  v34 = &v44;
  if (v32)
LABEL_41:
    memmove(v34, v23, v33);
  *((_BYTE *)v34 + v33) = 0;
  if (v31 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_57;
  if (v31 >= 0x17)
  {
    v38 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17)
      v38 = v31 | 7;
    v39 = v38 + 1;
    p_p = operator new(v38 + 1);
    v48 = v31;
    v49 = v39 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    p_p = &__p;
    HIBYTE(v49) = v31;
    if (!v31)
      goto LABEL_50;
  }
  memmove(p_p, v29, v31);
LABEL_50:
  *((_BYTE *)p_p + v31) = 0;
  v50 = 0;
  v40 = sub_1C5E5C628(a3, (unint64_t)&v44);
  v41 = *(_QWORD *)a3 + 56 * *(unsigned int *)(a3 + 8);
  v42 = *(_OWORD *)v40;
  *(_QWORD *)(v41 + 16) = *(_QWORD *)(v40 + 16);
  *(_OWORD *)v41 = v42;
  *(_QWORD *)(v40 + 8) = 0;
  *(_QWORD *)(v40 + 16) = 0;
  *(_QWORD *)v40 = 0;
  v43 = *(_OWORD *)(v40 + 24);
  *(_QWORD *)(v41 + 40) = *(_QWORD *)(v40 + 40);
  *(_OWORD *)(v41 + 24) = v43;
  *(_QWORD *)(v40 + 32) = 0;
  *(_QWORD *)(v40 + 40) = 0;
  *(_QWORD *)(v40 + 24) = 0;
  *(_BYTE *)(v41 + 48) = *(_BYTE *)(v40 + 48);
  ++*(_DWORD *)(a3 + 8);
  if (SHIBYTE(v49) < 0)
    operator delete(__p);
  if (SHIBYTE(v46) < 0)
    operator delete(v44);
  if (__s != (char *)v59)
    free(__s);
}

char *llvm::vfs::YAMLVFSWriter::addEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  char v7;
  _QWORD v8[2];
  _QWORD v9[2];

  v9[0] = a2;
  v9[1] = a3;
  v8[0] = a4;
  v8[1] = a5;
  v7 = a6;
  return sub_1C6397D84(a1, (uint64_t)v9, (uint64_t)v8, &v7);
}

char *llvm::vfs::YAMLVFSWriter::addDirectoryMapping(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v6;
  _QWORD v7[2];
  _QWORD v8[2];

  v8[0] = a2;
  v8[1] = a3;
  v7[0] = a4;
  v7[1] = a5;
  v6 = 1;
  return sub_1C6397D84(a1, (uint64_t)v8, (uint64_t)v7, &v6);
}

void llvm::vfs::YAMLVFSWriter::write(llvm::vfs::YAMLVFSWriter *this, llvm::raw_ostream *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  char v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  llvm::raw_ostream *v18;
  void *v19;
  void *v20;
  const char *v21;
  size_t v22;
  size_t v23;
  llvm::raw_ostream *v24;
  void *v25;
  void *v26;
  const char *v27;
  size_t v28;
  size_t v29;
  llvm::raw_ostream *v30;
  void *v31;
  void *v32;
  const char *v33;
  size_t v34;
  size_t v35;
  void *v36;
  char v37;
  BOOL v38;
  unsigned __int8 *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _BOOL4 v45;
  char v46;
  int v47;
  unint64_t v48;
  BOOL v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  llvm::raw_ostream *v59;
  _BYTE *v60;
  llvm::raw_ostream *v61;
  _BYTE *v62;
  llvm::raw_ostream *v63;
  _DWORD *v64;
  _WORD *v65;
  uint64_t v66;
  unsigned __int8 *v67;
  uint64_t v68;
  char v69;
  BOOL v70;
  unsigned __int8 *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  char v78;
  char *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  BOOL v83;
  llvm::raw_ostream *v87;
  _BYTE *v88;
  llvm::raw_ostream *v89;
  _WORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  unsigned __int8 *v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  llvm::raw_ostream *v105;
  _WORD *v106;
  unint64_t v107;
  _BOOL4 v108;
  uint64_t v109[4];
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *__s1;
  size_t __n;
  uint64_t v115;
  int v116;
  llvm::raw_ostream *v117;
  void *v118;
  uint64_t v119;
  _QWORD v120[34];

  v120[32] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)this;
  v5 = *((_QWORD *)this + 1);
  v6 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - v4) >> 3));
  if (v5 == v4)
    v7 = 0;
  else
    v7 = v6;
  sub_1C5E5F634(v4, v5, v7, 1);
  v117 = a2;
  v118 = v120;
  v119 = 0x1000000000;
  v9 = *(_QWORD *)this;
  v8 = *((_QWORD *)this + 1);
  v10 = *((unsigned __int16 *)this + 14);
  v11 = *((unsigned __int16 *)this + 12);
  v12 = *((unsigned __int16 *)this + 13);
  v13 = *((_BYTE *)this + 55);
  v14 = v13;
  v15 = v13 & 0x7F;
  if (v14 >= 0)
    LODWORD(v16) = v15;
  else
    v16 = *((_QWORD *)this + 5);
  v17 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v17) > 0x11)
  {
    *(_WORD *)(v17 + 16) = 2604;
    *(_OWORD *)v17 = *(_OWORD *)"{\n  'version': 0,\n";
    *((_QWORD *)a2 + 4) += 18;
  }
  else
  {
    llvm::raw_ostream::write(a2, "{\n  'version': 0,\n", 0x12uLL);
  }
  if (v11 >= 0x100)
  {
    v18 = v117;
    v19 = (void *)*((_QWORD *)v117 + 4);
    if (*((_QWORD *)v117 + 3) - (_QWORD)v19 > 0x14uLL)
    {
      qmemcpy(v19, "  'case-sensitive': '", 21);
      v20 = (void *)(*((_QWORD *)v117 + 4) + 21);
      *((_QWORD *)v117 + 4) = v20;
    }
    else
    {
      llvm::raw_ostream::write(v117, "  'case-sensitive': '", 0x15uLL);
      v20 = (void *)*((_QWORD *)v117 + 4);
    }
    if ((_BYTE)v11)
      v21 = "true";
    else
      v21 = "false";
    if ((_BYTE)v11)
      v22 = 4;
    else
      v22 = 5;
    if (v22 <= *((_QWORD *)v18 + 3) - (_QWORD)v20)
    {
      memcpy(v20, v21, v22);
      v23 = *((_QWORD *)v18 + 4) + v22;
      *((_QWORD *)v18 + 4) = v23;
    }
    else
    {
      llvm::raw_ostream::write(v18, v21, v22);
      v23 = *((_QWORD *)v18 + 4);
    }
    if (*((_QWORD *)v18 + 3) - v23 > 2)
    {
      *(_BYTE *)(v23 + 2) = 10;
      *(_WORD *)v23 = 11303;
      *((_QWORD *)v18 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v18, "',\n", 3uLL);
    }
  }
  if (v10 >= 0x100)
  {
    v24 = v117;
    v25 = (void *)*((_QWORD *)v117 + 4);
    if (*((_QWORD *)v117 + 3) - (_QWORD)v25 > 0x18uLL)
    {
      qmemcpy(v25, "  'use-external-names': '", 25);
      v26 = (void *)(*((_QWORD *)v117 + 4) + 25);
      *((_QWORD *)v117 + 4) = v26;
    }
    else
    {
      llvm::raw_ostream::write(v117, "  'use-external-names': '", 0x19uLL);
      v26 = (void *)*((_QWORD *)v117 + 4);
    }
    if ((_BYTE)v10)
      v27 = "true";
    else
      v27 = "false";
    if ((_BYTE)v10)
      v28 = 4;
    else
      v28 = 5;
    if (v28 <= *((_QWORD *)v24 + 3) - (_QWORD)v26)
    {
      memcpy(v26, v27, v28);
      v29 = *((_QWORD *)v24 + 4) + v28;
      *((_QWORD *)v24 + 4) = v29;
    }
    else
    {
      llvm::raw_ostream::write(v24, v27, v28);
      v29 = *((_QWORD *)v24 + 4);
    }
    if (*((_QWORD *)v24 + 3) - v29 > 2)
    {
      *(_BYTE *)(v29 + 2) = 10;
      *(_WORD *)v29 = 11303;
      *((_QWORD *)v24 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v24, "',\n", 3uLL);
    }
  }
  if (v12 >= 0x100)
  {
    v108 = v12 != 0;
    v30 = v117;
    v31 = (void *)*((_QWORD *)v117 + 4);
    if (*((_QWORD *)v117 + 3) - (_QWORD)v31 > 0x16uLL)
    {
      qmemcpy(v31, "  'overlay-relative': '", 23);
      v32 = (void *)(*((_QWORD *)v117 + 4) + 23);
      *((_QWORD *)v117 + 4) = v32;
    }
    else
    {
      llvm::raw_ostream::write(v117, "  'overlay-relative': '", 0x17uLL);
      v32 = (void *)*((_QWORD *)v117 + 4);
    }
    if ((_BYTE)v12)
      v33 = "true";
    else
      v33 = "false";
    if ((_BYTE)v12)
      v34 = 4;
    else
      v34 = 5;
    if (v34 <= *((_QWORD *)v30 + 3) - (_QWORD)v32)
    {
      memcpy(v32, v33, v34);
      v35 = *((_QWORD *)v30 + 4) + v34;
      *((_QWORD *)v30 + 4) = v35;
    }
    else
    {
      llvm::raw_ostream::write(v30, v33, v34);
      v35 = *((_QWORD *)v30 + 4);
    }
    if (*((_QWORD *)v30 + 3) - v35 > 2)
    {
      *(_BYTE *)(v35 + 2) = 10;
      *(_WORD *)v35 = 11303;
      *((_QWORD *)v30 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v30, "',\n", 3uLL);
    }
  }
  else
  {
    v108 = 0;
  }
  v36 = (void *)*((_QWORD *)v117 + 4);
  if (*((_QWORD *)v117 + 3) - (_QWORD)v36 > 0xCuLL)
  {
    qmemcpy(v36, "  'roots': [\n", 13);
    *((_QWORD *)v117 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(v117, "  'roots': [\n", 0xDuLL);
  }
  if (v8 != v9)
  {
    v37 = *(_BYTE *)(v9 + 23);
    v38 = v37 < 0;
    if (v37 >= 0)
      v39 = (unsigned __int8 *)v9;
    else
      v39 = *(unsigned __int8 **)v9;
    v40 = v37 & 0x7F;
    if (v38)
      v41 = *(_QWORD *)(v9 + 8);
    else
      v41 = v40;
    if (!*(_BYTE *)(v9 + 48))
    {
      v42 = sub_1C5E7BE8C(v39, v41, 0);
      v43 = v41 >= v42 ? v42 : v41;
      v41 = v42 == -1 ? 0 : v43;
      if (v42 == -1)
        v39 = 0;
    }
    v44 = v8 - v9;
    sub_1C5E5C74C((uint64_t)&v117, v39, v41);
    v45 = *(_BYTE *)(v9 + 48) != 0;
    if (!*(_BYTE *)(v9 + 48))
    {
      v46 = *(_BYTE *)(v9 + 47);
      v47 = v46;
      v48 = v46 & 0x7F;
      v49 = v47 < 0;
      if (v47 < 0)
        v48 = *(_QWORD *)(v9 + 32);
      v50 = v16;
      v51 = v9 + 24;
      if (v49)
        v51 = *(_QWORD *)(v9 + 24);
      if (v48 < v16)
        v50 = v48;
      if (!v108)
        v50 = 0;
      v52 = *(_BYTE *)(v9 + 23);
      v53 = v52 < 0;
      v54 = *(_QWORD *)v9;
      v55 = v52 & 0x7F;
      if (v53)
        v55 = *(_QWORD *)(v9 + 8);
      __s1 = 0;
      __n = 0;
      v56 = v48 - v50;
      if (v53)
        v57 = v54;
      else
        v57 = v9;
      v111 = v57;
      v112 = v55;
      v58 = (unsigned __int8 *)(v51 + v50);
      v115 = v55;
      v116 = 0;
      llvm::sys::path::reverse_iterator::operator++((uint64_t)&v111);
      sub_1C5E5C9D8((uint64_t)&v117, (unsigned __int8 *)__s1, __n, v58, v56);
    }
    if (v44 == 56)
    {
LABEL_83:
      while ((_DWORD)v119)
      {
        v59 = v117;
        v60 = (_BYTE *)*((_QWORD *)v117 + 4);
        if (*((_BYTE **)v117 + 3) == v60)
        {
          llvm::raw_ostream::write(v117, "\n", 1uLL);
        }
        else
        {
          *v60 = 10;
          ++*((_QWORD *)v59 + 4);
        }
        sub_1C5E5CCDC((uint64_t)&v117);
      }
      v61 = v117;
      v62 = (_BYTE *)*((_QWORD *)v117 + 4);
      if (*((_BYTE **)v117 + 3) == v62)
      {
        llvm::raw_ostream::write(v117, "\n", 1uLL);
      }
      else
      {
        *v62 = 10;
        ++*((_QWORD *)v61 + 4);
      }
      goto LABEL_91;
    }
    v66 = v9 + 8 * (v44 >> 3);
    v67 = (unsigned __int8 *)(v9 + 56);
    v107 = v16;
    while (1)
    {
      v68 = (uint64_t)v67;
      v69 = *(_BYTE *)(v9 + 79);
      v70 = v69 < 0;
      if (v69 >= 0)
        v71 = v67;
      else
        v71 = *(unsigned __int8 **)(v9 + 56);
      v72 = v69 & 0x7F;
      if (v70)
        v73 = *(_QWORD *)(v9 + 64);
      else
        v73 = v72;
      if (!*(_BYTE *)(v9 + 104))
      {
        v74 = sub_1C5E7BE8C(v71, v73, 0);
        v75 = v73 >= v74 ? v74 : v73;
        v73 = v74 == -1 ? 0 : v75;
        if (v74 == -1)
          v71 = 0;
      }
      v76 = v119;
      v77 = (char *)v118 + 16 * v119;
      if (v73 == *((_QWORD *)v77 - 1) && (!v73 || !memcmp(v71, *((const void **)v77 - 2), v73)))
      {
        if (!v45)
        {
          v105 = v117;
          v106 = (_WORD *)*((_QWORD *)v117 + 4);
          if (*((_QWORD *)v117 + 3) - (_QWORD)v106 > 1uLL)
          {
            v45 = 0;
            *v106 = 2604;
            *((_QWORD *)v105 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v117, ",\n", 2uLL);
            v45 = 0;
          }
          goto LABEL_148;
        }
      }
      else
      {
        v78 = 0;
        if (v76)
        {
          while (1)
          {
            v79 = (char *)v118 + 16 * v76;
            v81 = *((_QWORD *)v79 - 2);
            v80 = *((_QWORD *)v79 - 1);
            llvm::sys::path::begin(v81, v80, 0, (uint64_t)&v111);
            llvm::sys::path::begin((unint64_t)v71, v73, 0, (uint64_t)v109);
            v82 = v115;
            v83 = v111 == v81;
            if (v111 == v81 && v115 == v80)
              break;
            if ((unsigned __int8 *)v109[0] == v71 && v110 == v73)
            {
LABEL_135:
              if (v83 && v82 == v80)
                break;
            }
            else
            {
              while (__n == v109[3] && (!__n || !memcmp(__s1, (const void *)v109[2], __n)))
              {
                llvm::sys::path::const_iterator::operator++(&v111);
                llvm::sys::path::const_iterator::operator++(v109);
                v82 = v115;
                v83 = v111 == v81;
                if (v111 == v81 && v115 == v80)
                  goto LABEL_142;
                if ((unsigned __int8 *)v109[0] == v71 && v110 == v73)
                  goto LABEL_135;
              }
            }
            v87 = v117;
            v88 = (_BYTE *)*((_QWORD *)v117 + 4);
            if (*((_BYTE **)v117 + 3) == v88)
            {
              llvm::raw_ostream::write(v117, "\n", 1uLL);
            }
            else
            {
              *v88 = 10;
              ++*((_QWORD *)v87 + 4);
            }
            sub_1C5E5CCDC((uint64_t)&v117);
            v76 = v119;
            v78 = 1;
            if (!(_DWORD)v119)
              goto LABEL_144;
          }
        }
LABEL_142:
        if ((v78 & 1) != 0 || !v45)
        {
LABEL_144:
          v89 = v117;
          v90 = (_WORD *)*((_QWORD *)v117 + 4);
          if (*((_QWORD *)v117 + 3) - (_QWORD)v90 > 1uLL)
          {
            *v90 = 2604;
            *((_QWORD *)v89 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v117, ",\n", 2uLL);
          }
        }
        sub_1C5E5C74C((uint64_t)&v117, v71, v73);
      }
      v45 = 1;
LABEL_148:
      if (!*(_BYTE *)(v9 + 104))
      {
        v93 = *(_QWORD *)(v9 + 80);
        v92 = v9 + 80;
        v91 = v93;
        v94 = *(_BYTE *)(v92 + 23);
        v95 = v94;
        if (v94 >= 0)
          v91 = v92;
        v96 = v94 & 0x7F;
        if (v95 < 0)
          v96 = *(_QWORD *)(v92 + 8);
        v97 = v107;
        if (v96 < v107)
          v97 = v96;
        if (!v108)
          v97 = 0;
        v98 = (unsigned __int8 *)(v91 + v97);
        v99 = v96 - v97;
        v100 = *(_BYTE *)(v92 - 1);
        v101 = *(_QWORD *)(v92 - 24);
        v102 = *(_QWORD *)(v92 - 16);
        v103 = v100;
        if (v100 >= 0)
          v101 = v68;
        __s1 = 0;
        __n = 0;
        v104 = v100 & 0x7F;
        if (v103 < 0)
          v104 = v102;
        v111 = v101;
        v112 = v104;
        v115 = v104;
        v116 = 0;
        llvm::sys::path::reverse_iterator::operator++((uint64_t)&v111);
        sub_1C5E5C9D8((uint64_t)&v117, (unsigned __int8 *)__s1, __n, v98, v99);
        v45 = 0;
      }
      v67 = (unsigned __int8 *)(v68 + 56);
      v9 = v68;
      if (v68 + 56 == v66)
        goto LABEL_83;
    }
  }
LABEL_91:
  v63 = v117;
  v64 = (_DWORD *)*((_QWORD *)v117 + 4);
  if (*((_QWORD *)v117 + 3) - (_QWORD)v64 > 3uLL)
  {
    *v64 = 173875232;
    v65 = (_WORD *)(*((_QWORD *)v63 + 4) + 4);
    *((_QWORD *)v63 + 4) = v65;
  }
  else
  {
    v63 = llvm::raw_ostream::write(v117, "  ]\n", 4uLL);
    v65 = (_WORD *)*((_QWORD *)v63 + 4);
  }
  if (*((_QWORD *)v63 + 3) - (_QWORD)v65 > 1uLL)
  {
    *v65 = 2685;
    *((_QWORD *)v63 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v63, "}\n", 2uLL);
  }
  if (v118 != v120)
    free(v118);
}

_QWORD *llvm::vfs::recursive_directory_iterator::recursive_directory_iterator(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  BOOL v6;
  BOOL v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  *a1 = a2;
  a1[1] = 0;
  v5 = a1 + 1;
  a1[2] = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(&v27, a2, a3, a4);
  v25 = 0;
  v26 = 0;
  v6 = sub_1C5DF3038(&v27, &v25);
  v7 = v6;
  v8 = v26;
  if (!v26)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v26->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (v7)
      goto LABEL_20;
  }
  else
  {
LABEL_5:
    if (v6)
      goto LABEL_20;
  }
  v11 = (char *)operator new(0x38uLL);
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &off_1E81A4908;
  *(_OWORD *)(v11 + 40) = 0u;
  v12 = (std::__shared_weak_count *)a1[2];
  a1[2] = v11;
  *(_OWORD *)(v11 + 24) = 0u;
  a1[1] = v11 + 24;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = *v5;
  v16 = *(_QWORD **)(*v5 + 8);
  if ((unint64_t)v16 >= *(_QWORD *)(*v5 + 16))
  {
    v20 = sub_1C5E6256C(*v5, v27, (uint64_t)v28);
  }
  else
  {
    *v16 = v27;
    v17 = (uint64_t)v28;
    v16[1] = v28;
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v20 = v16 + 2;
  }
  *(_QWORD *)(v15 + 8) = v20;
LABEL_20:
  v21 = v28;
  if (v28)
  {
    v22 = (unint64_t *)&v28->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  return a1;
}

void llvm::vfs::StatCacheFileSystem::create(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD v30[4];
  __int16 v31;
  uint64_t v32;
  _QWORD v33[4];
  uint64_t v34;
  __int16 v35;
  _QWORD v36[2];
  void *v37[2];
  char v38;
  void **v39;
  uint64_t v40[2];

  v36[0] = 0;
  v36[1] = 0;
  v35 = 0;
  v34 = 0;
  v10 = (uint64_t *)*a1;
  v11 = *v10;
  v12 = v10[2] - v10[1];
  v33[0] = v10[1];
  v33[1] = v12;
  v33[2] = (*(uint64_t (**)(uint64_t *))(v11 + 16))(v10);
  v33[3] = v13;
  llvm::vfs::StatCacheFileSystem::validateCacheFile((uint64_t)v33, v36, (BOOL *)&v35 + 1, (BOOL *)&v35, &v34, v30);
  v14 = v30[0];
  if (v30[0])
  {
    *(_BYTE *)(a5 + 8) |= 1u;
LABEL_12:
    *(_QWORD *)a5 = v14;
    return;
  }
  if (!(_BYTE)v35)
  {
    if (!atomic_load(qword_1ED836B58))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
    v16 = qword_1ED836B58[0];
    v31 = 773;
    v30[0] = a2;
    v30[1] = a3;
    v30[2] = ": Mismatched cache file version";
    llvm::Twine::str((llvm::Twine *)v30, v37);
    if (v38 >= 0)
      v17 = v37;
    else
      v17 = (void **)v37[0];
    v40[0] = 3;
    v40[1] = v16;
    v39 = v17;
    sub_1C5DF1730((_BYTE **)&v39, v40, &v32);
    if (v38 < 0)
      operator delete(v37[0]);
    *(_BYTE *)(a5 + 8) |= 1u;
    v14 = v32;
    goto LABEL_12;
  }
  v18 = operator new();
  v19 = *a4;
  v29 = v19;
  if (v19)
  {
    v20 = (unsigned int *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = llvm::vfs::StatCacheFileSystem::StatCacheFileSystem(v18, a1, &v29, SHIBYTE(v35));
  *(_BYTE *)(a5 + 8) &= ~1u;
  *(_QWORD *)a5 = v22;
  v23 = (unsigned int *)(v22 + 8);
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  v25 = v29;
  if (v29)
  {
    v26 = (unsigned int *)(v29 + 8);
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  }
}

void llvm::vfs::StatCacheFileSystem::status(llvm::vfs::StatCacheFileSystem *this@<X0>, const llvm::Twine *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  _WORD *v18;
  int v19;
  _WORD *v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  BOOL v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v28;
  const std::error_category *v30;
  _OWORD *v31;
  BOOL v32;
  __int128 v33;
  __int128 v34;
  const std::error_category *v35;
  llvm::sys::fs::file_status *v36;
  uint64_t v37;
  _OWORD v38[4];
  __int128 v39;
  _WORD *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int16 v44;
  void *__s1;
  __int128 v46;
  _QWORD v47[26];

  v47[23] = *MEMORY[0x1E0C80C00];
  __s1 = v47;
  v46 = xmmword_1C86726E0;
  llvm::Twine::toVector((uint64_t)a2, (uint64_t)&__s1);
  if (!*((_BYTE *)this + 56))
  {
    v6 = v46;
    if ((_QWORD)v46)
    {
      v7 = (unsigned __int8 *)__s1;
      do
      {
        v8 = *v7;
        if ((v8 - 65) < 0x1A)
          LOBYTE(v8) = v8 + 32;
        *v7++ = v8;
        --v6;
      }
      while (v6);
    }
  }
  llvm::sys::path::remove_dots((unsigned __int8 **)&__s1, 0, 0);
  v9 = v46;
  v10 = *((_QWORD *)this + 5);
  if ((unint64_t)v46 < v10
    || (v11 = (char *)__s1, v10) && memcmp(__s1, *((const void **)this + 4), *((_QWORD *)this + 5)))
  {
    (*(void (**)(_QWORD, const llvm::Twine *))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), a2);
    goto LABEL_44;
  }
  v36 = a2;
  v37 = a3;
  if (v9 >= v10)
    v12 = v10;
  else
    v12 = v9;
  v13 = &v11[v12];
  v14 = v9 - v12;
  v15 = *((_QWORD *)this + 6);
  v16 = sub_1C5E3DF4C(&v11[v12], (uint64_t)&v11[v9]);
  v17 = *(unsigned int *)(*(_QWORD *)(v15 + 8) + 4 * ((*(_DWORD *)v15 - 1) & v16));
  if (!(_DWORD)v17 || (v18 = (_WORD *)(*(_QWORD *)(v15 + 16) + v17), v19 = (unsigned __int16)*v18, !*v18))
  {
LABEL_25:
    llvm::sys::path::begin((unint64_t)v13, v14, 0, (uint64_t)&v39);
    v25 = *((_QWORD *)&v41 + 1);
    v26 = (_QWORD)v39 == (_QWORD)v13;
    if ((char *)v39 == v13 && *((_QWORD *)&v41 + 1) == v14)
    {
      v25 = v14;
      v28 = v37;
    }
    else
    {
      v28 = v37;
      while ((_QWORD)v41 != 2 || *v40 != 11822)
      {
        llvm::sys::path::const_iterator::operator++((uint64_t *)&v39);
        v25 = *((_QWORD *)&v41 + 1);
        v26 = (_QWORD)v39 == (_QWORD)v13;
        if ((char *)v39 == v13 && *((_QWORD *)&v41 + 1) == v14)
        {
          v25 = v14;
          v26 = 1;
          break;
        }
      }
      if (!v26)
      {
LABEL_43:
        (*(void (**)(_QWORD, llvm::sys::fs::file_status *))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), v36);
        goto LABEL_44;
      }
    }
    if (v25 == v14)
    {
      *(_BYTE *)(v28 + 80) |= 1u;
      v30 = std::generic_category();
      *(_QWORD *)v28 = 2;
      *(_QWORD *)(v28 + 8) = v30;
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  v20 = v18 + 1;
  while (1)
  {
    v21 = (unsigned __int16)v20[2];
    v22 = (unsigned __int16)v20[3];
    v23 = v20 + 4;
    v24 = *(_DWORD *)v20 == v16 && v14 == v21;
    if (v24 && (v9 <= v10 || !memcmp(v20 + 4, v13, v14)))
      break;
    v20 = (_WORD *)((char *)v23 + v22 + v21);
    if (!--v19)
      goto LABEL_25;
  }
  v31 = (_OWORD *)((char *)v23 + v14);
  if (*(_DWORD *)((char *)v23 + v14 + 48))
    v32 = 0;
  else
    v32 = *(_QWORD *)((char *)v23 + v14 + 56) == 0;
  if (v32)
  {
    *(_BYTE *)(v37 + 80) |= 1u;
    v35 = std::generic_category();
    *(_QWORD *)v37 = 2;
    *(_QWORD *)(v37 + 8) = v35;
  }
  else
  {
    v33 = v31[1];
    v38[0] = *v31;
    v38[1] = v33;
    v34 = v31[3];
    v38[2] = v31[2];
    v38[3] = v34;
    llvm::vfs::Status::copyWithNewName((llvm::vfs::Status *)v38, v36, (uint64_t)&v39);
    *(_BYTE *)(v37 + 80) &= ~1u;
    *(_OWORD *)v37 = v39;
    *(_QWORD *)(v37 + 16) = v40;
    *(_QWORD *)&v39 = 0;
    *(_OWORD *)(v37 + 24) = v41;
    *(_OWORD *)(v37 + 40) = v42;
    *(_OWORD *)(v37 + 56) = v43;
    *(_WORD *)(v37 + 72) = v44;
  }
LABEL_44:
  if (__s1 != v47)
    free(__s1);
}

uint64_t llvm::vfs::StatCacheFileSystem::StatCacheWriter::StatCacheWriter(uint64_t a1, char *a2, unint64_t a3, __int128 *a4, int a5, uint64_t a6)
{
  char v7;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;

  v7 = a5;
  if (!a5)
  {
    sub_1C5E3DEA4((_QWORD *)a1, a2, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, &a2[a3], (uint64_t)sub_1C5E3C6A8, a3);
    goto LABEL_14;
  }
  if (!a2)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    goto LABEL_14;
  }
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a3 >= 0x17)
  {
    v13 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v13 = a3 | 7;
    v14 = v13 + 1;
    v12 = operator new(v13 + 1);
    *(_QWORD *)(a1 + 8) = a3;
    *(_QWORD *)(a1 + 16) = v14 | 0x8000000000000000;
    *(_QWORD *)a1 = v12;
  }
  else
  {
    *(_BYTE *)(a1 + 23) = a3;
    v12 = (void *)a1;
    if (!a3)
      goto LABEL_13;
  }
  memmove(v12, a2, a3);
LABEL_13:
  *((_BYTE *)v12 + a3) = 0;
LABEL_14:
  *(_BYTE *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = a6;
  v15 = (_QWORD *)operator new();
  v15[1] = 0;
  v15[2] = 0;
  v15[3] = v15 + 5;
  v15[4] = 0x400000000;
  v15[11] = 0;
  v15[9] = v15 + 11;
  v15[10] = 0;
  v15[12] = 0;
  *v15 = 64;
  v16 = malloc_type_calloc(0x40uLL, 0x10uLL, 0x6D9A4F0CuLL);
  if (!v16)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  v15[13] = v16;
  *(_QWORD *)(a1 + 40) = v15;
  *(_QWORD *)(a1 + 48) = a1 + 48;
  *(_QWORD *)(a1 + 56) = a1 + 48;
  *(_QWORD *)(a1 + 64) = 0;
  llvm::vfs::StatCacheFileSystem::StatCacheWriter::addEntry((const void **)a1, a2, a3, a4);
  return a1;
}

void llvm::vfs::StatCacheFileSystem::StatCacheWriter::addEntry(const void **a1, char *a2, unint64_t a3, __int128 *a4)
{
  size_t v5;
  char *p_p;
  char v8;
  BOOL v9;
  const void *v10;
  size_t v11;
  size_t v12;
  size_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  __int128 v32;
  unint64_t v33;
  void *__p;
  size_t v35;
  uint64_t v36;

  v5 = a3;
  p_p = a2;
  __p = 0;
  v35 = 0;
  v36 = 0;
  if (!*((_BYTE *)a1 + 24))
  {
    sub_1C5E3DEA4(&__p, a2, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, &a2[a3], (uint64_t)sub_1C5E3C6A8, a3);
    if (v36 >= 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    if (v36 >= 0)
      v5 = HIBYTE(v36) & 0x7F;
    else
      v5 = v35;
  }
  v8 = *((_BYTE *)a1 + 23);
  v9 = v8 < 0;
  if (v8 >= 0)
    v10 = a1;
  else
    v10 = *a1;
  v11 = v8 & 0x7F;
  if (v9)
    v12 = (size_t)a1[1];
  else
    v12 = v11;
  if (v5 >= v12 && (!v12 || !memcmp(p_p, v10, v12)))
  {
    if (v5 >= v12)
      v13 = v12;
    else
      v13 = v5;
    p_p += v13;
    v5 -= v13;
  }
  if (!p_p)
  {
    v32 = 0uLL;
    v33 = 0;
    goto LABEL_32;
  }
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v5 >= 0x17)
  {
    v15 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v15 = v5 | 7;
    v16 = v15 + 1;
    v14 = (__int128 *)operator new(v15 + 1);
    *((_QWORD *)&v32 + 1) = v5;
    v33 = v16 | 0x8000000000000000;
    *(_QWORD *)&v32 = v14;
  }
  else
  {
    HIBYTE(v33) = v5;
    v14 = &v32;
    if (!v5)
      goto LABEL_31;
  }
  memmove(v14, p_p, v5);
LABEL_31:
  *((_BYTE *)v14 + v5) = 0;
LABEL_32:
  v17 = operator new(0x28uLL);
  v17[4] = v33;
  *((_OWORD *)v17 + 1) = v32;
  v18 = a1[6];
  *v17 = v18;
  v17[1] = a1 + 6;
  v18[1] = v17;
  a1[6] = v17;
  a1[8] = (char *)a1[8] + 1;
  v19 = (unsigned int *)a1[5];
  v21 = *v19;
  v20 = v19[1];
  v22 = *((_BYTE *)v17 + 39);
  if (v22 >= 0)
    v23 = v17 + 2;
  else
    v23 = (_QWORD *)v17[2];
  if (v22 >= 0)
    v24 = v22 & 0x7F;
  else
    v24 = v17[3];
  v19[1] = v20 + 1;
  if (3 * v21 <= 4 * (v20 + 1))
  {
    sub_1C5E626BC(v19, 2 * v21);
    v21 = *v19;
  }
  v25 = *((_QWORD *)v19 + 13);
  v26 = sub_1C484358C((uint64_t)(v19 + 2), 96, 3);
  *(_QWORD *)v26 = v23;
  *(_QWORD *)(v26 + 8) = v24;
  v27 = a4[3];
  v29 = *a4;
  v28 = a4[1];
  *(_OWORD *)(v26 + 48) = a4[2];
  *(_OWORD *)(v26 + 64) = v27;
  *(_OWORD *)(v26 + 16) = v29;
  *(_OWORD *)(v26 + 32) = v28;
  *(_QWORD *)(v26 + 80) = 0;
  v30 = sub_1C5E3DF4C(v23, (uint64_t)v23 + v24);
  *(_DWORD *)(v26 + 88) = v30;
  v31 = v25 + 16 * (v30 & (v21 - 1));
  *(_QWORD *)(v26 + 80) = *(_QWORD *)(v31 + 8);
  ++*(_DWORD *)(v31 + 4);
  *(_QWORD *)(v31 + 8) = v26;
  if (SHIBYTE(v36) < 0)
    operator delete(__p);
}

void llvm::vfs::StatCacheFileSystem::StatCacheWriter::~StatCacheWriter(llvm::vfs::StatCacheFileSystem::StatCacheWriter *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    free(*(void **)(v2 + 104));
    sub_1C4926A50(v2 + 8);
    sub_1C4926AE8(v2 + 8);
    MEMORY[0x1CAA32FC0](v2, 0x10B0C40A77D50BBLL);
  }
  sub_1C5753C70((char *)this + 48);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

uint64_t llvm::vfs::StatCacheFileSystem::StatCacheWriter::writeStatCache(llvm::vfs::StatCacheFileSystem::StatCacheWriter *this, llvm::raw_fd_ostream *a2)
{
  const char *v4;
  llvm::raw_ostream *v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  uint64_t v8;
  const char *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t i;
  llvm::raw_ostream *v19;
  size_t v20;
  llvm::raw_ostream *v21;
  llvm::raw_ostream *v22;
  llvm::raw_ostream *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  llvm::raw_ostream *v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  char v36[4];
  char v37[4];

  *(_DWORD *)v36 = 1;
  if (*((_BYTE *)this + 24))
    v4 = "Stat";
  else
    v4 = "STAT";
  v5 = llvm::raw_ostream::write(a2, v4, 4uLL);
  v6 = llvm::raw_ostream::write(v5, byte_1C8672730, 4uLL);
  v7 = llvm::raw_ostream::write(v6, (const char *)this + 32, 8uLL);
  llvm::raw_ostream::write(v7, v36, 4uLL);
  if (*((char *)this + 23) < 0)
  {
    v9 = *(const char **)this;
    v8 = *((_QWORD *)this + 1);
  }
  else
  {
    v8 = *((unsigned __int8 *)this + 23);
    v9 = (const char *)this;
  }
  llvm::raw_ostream::write(a2, v9, v8 + 1);
  v10 = (unsigned int *)*((_QWORD *)this + 5);
  v11 = v10[1];
  if (v11 >= 3)
  {
    v13 = (4 * v11 / 6uLL) | (4 * v11 / 3uLL);
    v14 = v13 | (v13 >> 2) | ((v13 | (v13 >> 2)) >> 4);
    v12 = (((v14 | (v14 >> 8)) >> 16) | v14 | (v14 >> 8)) + 1;
  }
  else
  {
    v12 = 1;
  }
  if (v12 == *v10 || (sub_1C5E626BC(v10, v12), *v10))
  {
    v15 = 0;
    do
    {
      v16 = *((_QWORD *)v10 + 13) + 16 * v15;
      v17 = (uint64_t *)(v16 + 8);
      if (*(_QWORD *)(v16 + 8))
      {
        *(_DWORD *)v16 = (*(uint64_t (**)(llvm::raw_fd_ostream *))(*(_QWORD *)a2 + 80))(a2)
                       + *((_DWORD *)a2 + 8)
                       - *((_DWORD *)a2 + 4);
        *(_WORD *)v37 = *(_DWORD *)(v16 + 4);
        llvm::raw_ostream::write(a2, v37, 2uLL);
        for (i = *v17; i; i = *(_QWORD *)(i + 80))
        {
          *(_DWORD *)v37 = *(_DWORD *)(i + 88);
          v19 = llvm::raw_ostream::write(a2, v37, 4uLL);
          v20 = *(_QWORD *)(i + 8);
          *(_WORD *)v37 = *(_QWORD *)(i + 8);
          v21 = llvm::raw_ostream::write(v19, v37, 2uLL);
          strcpy(v37, "@");
          v22 = llvm::raw_ostream::write(v21, v37, 2uLL);
          v23 = llvm::raw_ostream::write(v22, *(const char **)i, v20);
          llvm::raw_ostream::write(v23, (const char *)(i + 16), 0x40uLL);
        }
      }
      ++v15;
    }
    while (v15 < *v10);
  }
  v24 = (*(uint64_t (**)(llvm::raw_fd_ostream *))(*(_QWORD *)a2 + 80))(a2);
  v25 = *((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 2) + v24;
  v26 = (*((_DWORD *)a2 + 8) - *((_DWORD *)a2 + 4) + v24);
  v27 = (v26 + 3) & 0x1FFFFFFFCLL;
  v28 = v27 - v25;
  if (v27 != v25)
  {
    v29 = v26 - v27;
    do
    {
      v37[0] = 0;
      llvm::raw_ostream::write(a2, v37, 1uLL);
    }
    while (!__CFADD__(v29++, 1));
  }
  *(_DWORD *)v37 = *v10;
  v31 = llvm::raw_ostream::write(a2, v37, 4uLL);
  *(_DWORD *)v37 = v10[1];
  llvm::raw_ostream::write(v31, v37, 4uLL);
  if (*v10)
  {
    v32 = 0;
    v33 = 0;
    do
    {
      *(_DWORD *)v37 = *(_DWORD *)(*((_QWORD *)v10 + 13) + v32);
      llvm::raw_ostream::write(a2, v37, 4uLL);
      ++v33;
      v32 += 16;
    }
    while (v33 < *v10);
  }
  *(_DWORD *)v37 = v28 + v25;
  v34 = (*(uint64_t (**)(llvm::raw_fd_ostream *))(*(_QWORD *)a2 + 80))(a2)
      + *((_DWORD *)a2 + 8)
      - *((_DWORD *)a2 + 4);
  llvm::raw_fd_ostream::seek(a2, 4);
  llvm::raw_ostream::write(a2, v37, 4uLL);
  return v34;
}

uint64_t llvm::vfs::StatCacheFileSystem::updateValidityToken(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, &v3, 8, 8);
}

char *sub_1C5E59250@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)(a2 + 24) &= ~1u;
  if (result[47] < 0)
    return (char *)sub_1C47EBC30((_BYTE *)a2, *((void **)result + 3), *((_QWORD *)result + 4));
  *(_OWORD *)a2 = *(_OWORD *)(result + 24);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 5);
  return result;
}

uint64_t sub_1C5E59288(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_BYTE *)(a1 + 304))
  {
    sub_1C4FE6ED8(a1, a2);
    sub_1C4FE6ED8(a1 + 152, a2 + 152);
  }
  else
  {
    *(_QWORD *)a1 = a1 + 24;
    v4 = xmmword_1C85F20B0;
    *(_OWORD *)(a1 + 8) = xmmword_1C85F20B0;
    if (*(_QWORD *)(a2 + 8))
    {
      sub_1C4FE6ED8(a1, a2);
      v4 = xmmword_1C85F20B0;
    }
    *(_QWORD *)(a1 + 152) = a1 + 176;
    *(_OWORD *)(a1 + 160) = v4;
    if (*(_QWORD *)(a2 + 160))
      sub_1C4FE6ED8(a1 + 152, a2 + 152);
    *(_BYTE *)(a1 + 304) = 1;
  }
  return a1;
}

uint64_t sub_1C5E59330(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = &off_1E81A43E8;
  if (*(_BYTE *)(a1 + 320))
  {
    v2 = *(void **)(a1 + 168);
    if (v2 != (void *)(a1 + 192))
      free(v2);
    v3 = *(void **)(a1 + 16);
    if (v3 != (void *)(a1 + 40))
      free(v3);
    *(_BYTE *)(a1 + 320) = 0;
  }
  return a1;
}

void sub_1C5E59390(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = &off_1E81A43E8;
  if (*(_BYTE *)(a1 + 320))
  {
    v2 = *(void **)(a1 + 168);
    if (v2 != (void *)(a1 + 192))
      free(v2);
    v3 = *(void **)(a1 + 16);
    if (v3 != (void *)(a1 + 40))
      free(v3);
    *(_BYTE *)(a1 + 320) = 0;
  }
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5E59400(uint64_t a1@<X0>, const llvm::sys::fs::file_status *a2@<X1>, uint64_t a3@<X8>)
{
  const char *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10[9];
  _BYTE v11[44];
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  stat v15;
  void *v16;
  __int128 v17;
  _BYTE v18[256];
  _BYTE v19[24];
  _OWORD v20[3];
  __int16 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v16 = v18;
  v17 = xmmword_1C64638F0;
  memset(v11, 0, sizeof(v11));
  v12 = 0xFFFFLL;
  v13 = 0;
  v14 = 0;
  sub_1C5E5A190((uint64_t)v10, a1, (uint64_t)a2, (uint64_t)&v16);
  *(_QWORD *)v19 = v20;
  *(_OWORD *)&v19[8] = xmmword_1C85F20B0;
  v5 = (const char *)llvm::Twine::toNullTerminatedStringRef(v10, (uint64_t)v19);
  v6 = stat(v5, &v15);
  v7 = sub_1C5E7F828(v6, &v15.st_dev, (uint64_t)v11);
  v9 = v8;
  if (*(_OWORD **)v19 == v20)
  {
    if ((_DWORD)v7)
    {
LABEL_3:
      *(_BYTE *)(a3 + 80) |= 1u;
      *(_QWORD *)a3 = v7;
      *(_QWORD *)(a3 + 8) = v9;
      goto LABEL_6;
    }
  }
  else
  {
    free(*(void **)v19);
    if ((_DWORD)v7)
      goto LABEL_3;
  }
  llvm::vfs::Status::copyWithNewName((llvm::vfs::Status *)v11, a2, (uint64_t)v19);
  *(_BYTE *)(a3 + 80) &= ~1u;
  *(_OWORD *)a3 = *(_OWORD *)v19;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)&v19[16];
  *(_OWORD *)(a3 + 24) = v20[0];
  *(_OWORD *)(a3 + 40) = v20[1];
  *(_OWORD *)(a3 + 56) = v20[2];
  *(_WORD *)(a3 + 72) = v21;
LABEL_6:
  if (v16 != v18)
    free(v16);
}

void sub_1C5E59580(uint64_t a1@<X0>, llvm::Twine *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  int v6;
  void **v7;
  void *v8;
  size_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *__p[2];
  char v18;
  _QWORD *v19;
  _QWORD v20[4];
  __int16 v21;
  _QWORD *v22;
  char v23;
  void *v24;
  __int128 v25;
  _BYTE v26[9];
  void *v27;
  __int128 v28;
  _QWORD v29[33];

  v29[32] = *MEMORY[0x1E0C80C00];
  v27 = v29;
  v28 = xmmword_1C64638F0;
  v24 = v26;
  v25 = xmmword_1C64638F0;
  sub_1C5E5A190((uint64_t)v20, a1, (uint64_t)a2, (uint64_t)&v24);
  llvm::sys::fs::openNativeFileForRead((unsigned __int8 *)v20, 0, &v27, (uint64_t)&v22);
  if ((v23 & 1) != 0)
  {
    v12 = v22;
    v22 = 0;
    v19 = v12;
    v13 = llvm::errorToErrorCode(&v19);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v13;
    *(_QWORD *)(a3 + 8) = v14;
    if (v19)
      (*(void (**)(_QWORD *))(*v19 + 8))(v19);
    goto LABEL_20;
  }
  v5 = operator new();
  v6 = (int)v22;
  llvm::Twine::str(a2, __p);
  v7 = (void **)__p[0];
  v8 = __p[1];
  if (v18 >= 0)
  {
    v7 = __p;
    v8 = (void *)(v18 & 0x7F);
  }
  v10 = v27;
  v9 = v28;
  *(_QWORD *)v5 = &off_1E81A4468;
  *(_DWORD *)(v5 + 8) = v6;
  v21 = 261;
  v20[0] = v7;
  v20[1] = v8;
  llvm::Twine::str((llvm::Twine *)v20, (_QWORD *)(v5 + 16));
  *(_WORD *)(v5 + 88) = 0;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  v11 = (_QWORD *)(v5 + 96);
  if (!v10)
  {
    *v11 = 0;
    *(_QWORD *)(v5 + 104) = 0;
    *(_QWORD *)(v5 + 112) = 0;
    goto LABEL_17;
  }
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v11 = operator new(v15 + 1);
    *(_QWORD *)(v5 + 104) = v9;
    *(_QWORD *)(v5 + 112) = v16 | 0x8000000000000000;
    *(_QWORD *)(v5 + 96) = v11;
  }
  else
  {
    *(_BYTE *)(v5 + 119) = v9;
    if (!v9)
      goto LABEL_16;
  }
  memmove(v11, v10, v9);
LABEL_16:
  *((_BYTE *)v11 + v9) = 0;
LABEL_17:
  *(_BYTE *)(a3 + 16) &= ~1u;
  *(_QWORD *)a3 = v5;
  if (v18 < 0)
    operator delete(__p[0]);
  if ((v23 & 1) != 0)
  {
LABEL_20:
    if (v22)
      (*(void (**)(_QWORD *))(*v22 + 8))(v22);
  }
  if (v24 != v26)
    free(v24);
  if (v27 != v29)
    free(v27);
}

void sub_1C5E597F0(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  char *v6;
  char *v7;
  uint64_t *v8;
  BOOL v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  void *v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  const char *v24[5];
  char *v25;
  std::__shared_weak_count *v26;
  void *__p[3];
  void *v28;
  __int128 v29;
  _BYTE v30[128];
  __int128 v31;
  uint64_t v32;
  int v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v28 = v30;
  v29 = xmmword_1C85F20B0;
  sub_1C5E5A190((uint64_t)v24, a1, a2, (uint64_t)&v28);
  v6 = (char *)operator new(0x58uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E81A44B8;
  *((_QWORD *)v6 + 3) = off_1E81A44F0;
  *((_QWORD *)v6 + 4) = 0;
  *((_QWORD *)v6 + 5) = 0;
  *((_QWORD *)v6 + 6) = 0;
  v7 = v6 + 64;
  *((_DWORD *)v6 + 14) = 9;
  v8 = (uint64_t *)sub_1C61D4808((uint64_t)(v6 + 64), v24, a3, 1);
  v32 = 1;
  v31 = 0uLL;
  v9 = sub_1C5057AF4(v8, (uint64_t *)&v31);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (!v9)
  {
    v13 = *(_QWORD *)v7;
    if (*(char *)(*(_QWORD *)v7 + 31) < 0)
    {
      sub_1C47EBC30(__p, *(void **)(v13 + 8), *(_QWORD *)(v13 + 16));
      v13 = *(_QWORD *)v7;
    }
    else
    {
      v14 = *(_OWORD *)(v13 + 8);
      __p[2] = *(void **)(v13 + 24);
      *(_OWORD *)__p = v14;
    }
    v15 = *(_DWORD *)(v13 + 32);
    if (v15 == 9)
    {
      llvm::sys::fs::directory_entry::status((llvm::sys::fs::directory_entry *)(v13 + 8), (uint64_t)&v31);
      if ((v34 & 1) != 0)
        v15 = 9;
      else
        v15 = v33;
    }
    v16 = __p[0];
    *(void **)&v31 = __p[1];
    *(void **)((char *)&v31 + 7) = *(void **)((char *)&__p[1] + 7);
    v17 = HIBYTE(__p[2]);
    memset(__p, 0, sizeof(__p));
    if (v6[55] < 0)
    {
      operator delete(*((void **)v6 + 4));
      v18 = SHIBYTE(__p[2]);
      v19 = v31;
      *((_QWORD *)v6 + 4) = v16;
      *((_QWORD *)v6 + 5) = v19;
      *(_QWORD *)(v6 + 47) = *(_QWORD *)((char *)&v31 + 7);
      v6[55] = v17;
      *((_DWORD *)v6 + 14) = v15;
      if (v18 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v20 = v31;
      *((_QWORD *)v6 + 4) = v16;
      *((_QWORD *)v6 + 5) = v20;
      *(_QWORD *)(v6 + 47) = *(_QWORD *)((char *)&v31 + 7);
      v6[55] = v17;
      *((_DWORD *)v6 + 14) = v15;
    }
  }
  v25 = v6 + 24;
  v26 = (std::__shared_weak_count *)v6;
  sub_1C61D51BC(a4, (uint64_t)&v25);
  v21 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (v28 != v30)
    free(v28);
}

unint64_t sub_1C5E59A68(uint64_t a1, llvm::sys::fs *a2)
{
  unint64_t is_directory;
  unsigned int v3;
  BOOL *v5;
  __int128 v7;
  char v8;
  void *v9;
  __int128 v10;
  uint64_t v11;
  __int16 v12;
  _BYTE *v13;
  __int128 v14;
  _BYTE v15[128];
  _BYTE *v16;
  __int128 v17;
  _BYTE v18[128];
  _BYTE *v19;
  __int128 v20;
  _BYTE v21[128];
  _QWORD *v22;
  __int128 v23;
  _QWORD v24[18];

  v24[16] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 320))
  {
    is_directory = llvm::sys::fs::set_current_path(a2, a2);
    v3 = is_directory;
    return is_directory & 0xFFFFFFFF00000000 | v3;
  }
  v22 = v24;
  v23 = xmmword_1C85F20B0;
  v19 = v21;
  v20 = xmmword_1C85F20B0;
  v16 = v18;
  v17 = xmmword_1C85F20B0;
  sub_1C5E5A190((uint64_t)&v9, a1, (uint64_t)a2, (uint64_t)&v16);
  llvm::Twine::toVector((uint64_t)&v9, (uint64_t)&v22);
  v8 = 0;
  v12 = 261;
  v9 = v22;
  *(_QWORD *)&v10 = v23;
  is_directory = llvm::sys::fs::is_directory((llvm::sys::fs *)&v9, (const llvm::Twine *)&v8, v5);
  if (!(_DWORD)is_directory)
  {
    if (!v8)
    {
      is_directory = 20;
      std::generic_category();
      v3 = 20;
      goto LABEL_7;
    }
    v12 = 261;
    v9 = v22;
    *(_QWORD *)&v10 = v23;
    is_directory = llvm::sys::fs::real_path((unsigned __int8 *)&v9, &v19, 0);
    if (!(_DWORD)is_directory)
    {
      v9 = &v11;
      v7 = xmmword_1C85F20B0;
      v10 = xmmword_1C85F20B0;
      if ((_QWORD)v23)
      {
        sub_1C50502AC((uint64_t)&v9, (uint64_t)&v22);
        v7 = xmmword_1C85F20B0;
      }
      v13 = v15;
      v14 = v7;
      if ((_QWORD)v20)
        sub_1C50502AC((uint64_t)&v13, (uint64_t)&v19);
      sub_1C5E59288(a1 + 16, (uint64_t)&v9);
      if (v13 != v15)
        free(v13);
      if (v9 != &v11)
        free(v9);
      std::system_category();
      v3 = 0;
      goto LABEL_7;
    }
  }
  v3 = is_directory;
LABEL_7:
  if (v16 != v18)
    free(v16);
  if (v19 != v21)
    free(v19);
  if (v22 != v24)
    free(v22);
  return is_directory & 0xFFFFFFFF00000000 | v3;
}

void sub_1C5E59C98(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  size_t v3;
  const void *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  const void *v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  _BYTE __dst[24];
  _QWORD v18[17];

  v18[16] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 320))
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (v3 <= 0x7FFFFFFFFFFFFFF7)
    {
      v4 = *(const void **)(a1 + 16);
      if (v3 >= 0x17)
      {
        v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v3 | 7) != 0x17)
          v8 = v3 | 7;
        v9 = v8 + 1;
        v5 = operator new(v8 + 1);
        *(_QWORD *)&__dst[8] = v3;
        *(_QWORD *)&__dst[16] = v9 | 0x8000000000000000;
        *(_QWORD *)__dst = v5;
      }
      else
      {
        __dst[23] = *(_QWORD *)(a1 + 24);
        v5 = __dst;
        if (!v3)
          goto LABEL_12;
      }
      memmove(v5, v4, v3);
LABEL_12:
      v5[v3] = 0;
      *(_BYTE *)(a2 + 24) &= ~1u;
      *(_OWORD *)a2 = *(_OWORD *)__dst;
      *(_QWORD *)(a2 + 16) = *(_QWORD *)&__dst[16];
      return;
    }
LABEL_25:
    abort();
  }
  *(_QWORD *)__dst = v18;
  *(_OWORD *)&__dst[8] = xmmword_1C85F20B0;
  v6 = llvm::sys::fs::current_path((uint64_t)__dst);
  if ((_DWORD)v6)
  {
    *(_BYTE *)(a2 + 24) |= 1u;
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    goto LABEL_22;
  }
  v10 = *(_QWORD *)&__dst[8];
  if (*(_QWORD *)&__dst[8] > 0x7FFFFFFFFFFFFFF7uLL)
    goto LABEL_25;
  v11 = *(const void **)__dst;
  if (*(_QWORD *)&__dst[8] >= 0x17uLL)
  {
    v13 = (*(_QWORD *)&__dst[8] & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((*(_QWORD *)&__dst[8] | 7) != 0x17)
      v13 = *(_QWORD *)&__dst[8] | 7;
    v14 = v13 + 1;
    v12 = (__int128 *)operator new(v13 + 1);
    *((_QWORD *)&v15 + 1) = v10;
    v16 = v14 | 0x8000000000000000;
    *(_QWORD *)&v15 = v12;
  }
  else
  {
    HIBYTE(v16) = __dst[8];
    v12 = &v15;
    if (!*(_QWORD *)&__dst[8])
      goto LABEL_21;
  }
  memmove(v12, v11, v10);
LABEL_21:
  *((_BYTE *)v12 + v10) = 0;
  *(_BYTE *)(a2 + 24) &= ~1u;
  *(_OWORD *)a2 = v15;
  *(_QWORD *)(a2 + 16) = v16;
LABEL_22:
  if (*(_QWORD **)__dst != v18)
    free(*(void **)__dst);
}

unint64_t sub_1C5E59E78(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v4;
  unsigned __int8 v6[40];
  void *v7;
  __int128 v8;
  _QWORD v9[33];

  v9[32] = *MEMORY[0x1E0C80C00];
  v7 = v9;
  v8 = xmmword_1C64638F0;
  sub_1C5E5A190((uint64_t)v6, a1, a2, (uint64_t)&v7);
  v4 = llvm::sys::fs::real_path(v6, a3, 0);
  if (v7 != v9)
    free(v7);
  return v4;
}

uint64_t sub_1C5E59F2C(uint64_t a1, uint64_t a2, const llvm::Twine *a3)
{
  BOOL *v4;
  uint64_t is_local;
  _BYTE v7[40];
  void *v8;
  __int128 v9;
  _QWORD v10[33];

  v10[32] = *MEMORY[0x1E0C80C00];
  v8 = v10;
  v9 = xmmword_1C64638F0;
  sub_1C5E5A190((uint64_t)v7, a1, a2, (uint64_t)&v8);
  is_local = llvm::sys::fs::is_local((llvm::sys::fs *)v7, a3, v4);
  if (v8 != v10)
    free(v8);
  return is_local;
}

llvm::raw_ostream *sub_1C5E59FDC(llvm::raw_ostream *result, llvm::raw_ostream *this, uint64_t a3, int a4)
{
  uint64_t v5;
  int v6;
  _WORD *v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  const char *v11;
  llvm::raw_ostream *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = (uint64_t)result;
  if (a4)
  {
    v6 = a4;
    do
    {
      v7 = (_WORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v7 > 1uLL)
      {
        *v7 = 8224;
        *((_QWORD *)this + 4) += 2;
      }
      else
      {
        result = llvm::raw_ostream::write(this, "  ", 2uLL);
      }
      --v6;
    }
    while (v6);
  }
  v8 = (void *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v8 > 0x14uLL)
  {
    qmemcpy(v8, "RealFileSystem using ", 21);
    v9 = *((_QWORD *)this + 4) + 21;
    *((_QWORD *)this + 4) = v9;
  }
  else
  {
    result = llvm::raw_ostream::write(this, "RealFileSystem using ", 0x15uLL);
    v9 = *((_QWORD *)this + 4);
  }
  v10 = *((_QWORD *)this + 3) - v9;
  if (*(_BYTE *)(v5 + 320))
  {
    if (v10 <= 2)
    {
      v11 = "own";
      v12 = this;
      v13 = 3;
LABEL_15:
      result = llvm::raw_ostream::write(v12, v11, v13);
      goto LABEL_16;
    }
    *(_BYTE *)(v9 + 2) = 110;
    *(_WORD *)v9 = 30575;
    v15 = *((_QWORD *)this + 4) + 3;
  }
  else
  {
    if (v10 <= 6)
    {
      v11 = "process";
      v12 = this;
      v13 = 7;
      goto LABEL_15;
    }
    *(_DWORD *)(v9 + 3) = 1936942435;
    *(_DWORD *)v9 = 1668248176;
    v15 = *((_QWORD *)this + 4) + 7;
  }
  *((_QWORD *)this + 4) = v15;
LABEL_16:
  v14 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v14) <= 4)
    return llvm::raw_ostream::write(this, " CWD\n", 5uLL);
  *(_BYTE *)(v14 + 4) = 10;
  *(_DWORD *)v14 = 1146569504;
  *((_QWORD *)this + 4) += 5;
  return result;
}

__n128 sub_1C5E5A190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  __n128 result;
  uint64_t v9;
  __int128 v10;
  _QWORD v11[4];
  __int16 v12;

  if (*(_BYTE *)(a2 + 320))
  {
    llvm::Twine::toVector(a3, a4);
    v12 = 261;
    v7 = *(_QWORD *)(a2 + 176);
    v11[0] = *(_QWORD *)(a2 + 168);
    v11[1] = v7;
    llvm::sys::fs::make_absolute((uint64_t)v11, (char **)a4);
    *(_WORD *)(a1 + 32) = 261;
    v9 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a4;
    *(_QWORD *)(a1 + 8) = v9;
  }
  else
  {
    result = *(__n128 *)a3;
    v10 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a3;
    *(_OWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a3 + 32);
  }
  return result;
}

uint64_t sub_1C5E5A214(uint64_t a1)
{
  llvm::sys::Process *v2;

  *(_QWORD *)a1 = &off_1E81A4468;
  v2 = (llvm::sys::Process *)*(unsigned int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = -1;
  llvm::sys::Process::SafelyCloseFileDescriptor(v2);
  *(_DWORD *)(a1 + 8) = -1;
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1C5E5A274(uint64_t a1)
{
  sub_1C5E5A214(a1);
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5E5A298@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  char v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  __int16 v14;
  _BYTE v15[44];
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  stat v19;

  v4 = a1 + 16;
  if (!*(_DWORD *)(a1 + 80))
  {
    memset(v15, 0, sizeof(v15));
    v16 = 0xFFFFLL;
    v17 = 0;
    v18 = 0;
    v5 = fstat(*(_DWORD *)(a1 + 8), &v19);
    v6 = sub_1C5E7F828(v5, &v19.st_dev, (uint64_t)v15);
    if ((_DWORD)v6)
    {
      *(_BYTE *)(a2 + 80) |= 1u;
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 8) = v7;
      return result;
    }
    v9 = *(_BYTE *)(a1 + 39);
    v10 = v9 < 0;
    v11 = *(_QWORD *)(a1 + 16);
    if (v9 >= 0)
      v11 = v4;
    v12 = v9 & 0x7F;
    if (v10)
      v12 = *(_QWORD *)(a1 + 24);
    v14 = 261;
    v13[0] = v11;
    v13[1] = v12;
    llvm::vfs::Status::copyWithNewName((llvm::vfs::Status *)v15, (const llvm::sys::fs::file_status *)v13, (uint64_t)&v19);
    if (*(char *)(a1 + 39) < 0)
      operator delete(*(void **)v4);
    *(_OWORD *)v4 = *(_OWORD *)&v19.st_dev;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)&v19.st_uid;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)&v19.st_rdev;
    *(_OWORD *)(a1 + 56) = *(_OWORD *)&v19.st_atimespec.tv_nsec;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)&v19.st_mtimespec.tv_nsec;
    *(_WORD *)(a1 + 88) = v19.st_ctimespec.tv_nsec;
  }
  *(_BYTE *)(a2 + 80) &= ~1u;
  if (*(char *)(a1 + 39) < 0)
  {
    sub_1C47EBC30((_BYTE *)a2, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)v4;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v4 + 16);
  }
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 56);
  result = *(__n128 *)(a1 + 72);
  *(__n128 *)(a2 + 56) = result;
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 88);
  return result;
}

double sub_1C5E5A3FC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void **v3;
  unint64_t v4;
  char v5;
  const void *v6;
  int v7;
  size_t v8;
  size_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  __int128 v14;
  unint64_t v15;

  v3 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0)
  {
    v4 = *(_QWORD *)(a1 + 104);
    if (v4)
    {
      sub_1C47EBC30(&v14, *v3, v4);
      goto LABEL_23;
    }
LABEL_6:
    v5 = *(_BYTE *)(a1 + 39);
    if (v5 >= 0)
      v6 = (const void *)(a1 + 16);
    else
      v6 = *(const void **)(a1 + 16);
    if (!v6)
    {
      v14 = 0uLL;
      v15 = 0;
      goto LABEL_23;
    }
    v7 = v5;
    v8 = v5 & 0x7F;
    if (v7 >= 0)
      v9 = v8;
    else
      v9 = *(_QWORD *)(a1 + 24);
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v9 >= 0x17)
    {
      v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v11 = v9 | 7;
      v12 = v11 + 1;
      v10 = (__int128 *)operator new(v11 + 1);
      *((_QWORD *)&v14 + 1) = v9;
      v15 = v12 | 0x8000000000000000;
      *(_QWORD *)&v14 = v10;
    }
    else
    {
      HIBYTE(v15) = v9;
      v10 = &v14;
      if (!v9)
        goto LABEL_22;
    }
    memmove(v10, v6, v9);
LABEL_22:
    *((_BYTE *)v10 + v9) = 0;
    goto LABEL_23;
  }
  if (!*(_BYTE *)(a1 + 119))
    goto LABEL_6;
  v14 = *(_OWORD *)v3;
  v15 = *(_QWORD *)(a1 + 112);
LABEL_23:
  *(_BYTE *)(a2 + 24) &= ~1u;
  result = *(double *)&v14;
  *(_OWORD *)a2 = v14;
  *(_QWORD *)(a2 + 16) = v15;
  return result;
}

void sub_1C5E5A530(uint64_t a1@<X0>, uint64_t a2@<X1>, size_t a3@<X2>, int a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  sub_1C5E1FFD0(*(_DWORD *)(a1 + 8), a2, a3, a3, 0, a4, a5, a6);
}

uint64_t sub_1C5E5A548(uint64_t a1)
{
  llvm::sys::Process *v2;
  uint64_t result;

  v2 = (llvm::sys::Process *)*(unsigned int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = -1;
  result = llvm::sys::Process::SafelyCloseFileDescriptor(v2);
  *(_DWORD *)(a1 + 8) = -1;
  return result;
}

void sub_1C5E5A578(uint64_t a1, llvm::Twine *this)
{
  void **v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int16 v18;
  void *__p[2];
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  llvm::Twine::str(this, __p);
  v4 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 112) = v20;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
  v5 = v26;
  if ((v26 & 1) == 0)
  {
    v12 = v21;
    v6 = v22;
    v7 = v24;
    v8 = v23;
    v9 = v25;
    llvm::Twine::str(this, &v13);
    v15 = v12;
    *(_QWORD *)&v16 = v6;
    *((_QWORD *)&v16 + 1) = v8;
    *(_QWORD *)&v17 = v7;
    *((_QWORD *)&v17 + 1) = v9;
    v18 = 0;
    v10 = (void **)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      operator delete(*v10);
    *(_OWORD *)v10 = v13;
    *(_QWORD *)(a1 + 32) = v14;
    v11 = v16;
    *(_OWORD *)(a1 + 40) = v15;
    *(_OWORD *)(a1 + 56) = v11;
    *(_OWORD *)(a1 + 72) = v17;
    *(_WORD *)(a1 + 88) = v18;
    v5 = v26;
  }
  if ((v5 & 1) == 0 && SHIBYTE(v20) < 0)
    operator delete(__p[0]);
}

void sub_1C5E5A6D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E81A44B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C5E5A6E0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E81A44B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5E5A710(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1C5E5A720(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)a1 = off_1E81A44F0;
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)a1 = off_1E81A40E0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1C5E5A7A0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)a1 = off_1E81A44F0;
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)a1 = off_1E81A40E0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C5E5A830(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  _BOOL4 v4;
  void *v5;
  char v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  char v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p[3];
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  _QWORD v22[5];
  int v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  std::system_category();
  v2 = (uint64_t *)(a1 + 40);
  v3 = llvm::sys::fs::detail::directory_iterator_increment(*(DIR ***)(a1 + 40));
  v20 = 0;
  v19 = 0;
  v21 = 1;
  v4 = sub_1C5057AF4((uint64_t *)(a1 + 40), &v19);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    *(_QWORD *)((char *)v22 + 7) = 0;
    v22[0] = 0;
    v7 = 9;
  }
  else
  {
    v8 = *v2;
    if (*(char *)(*v2 + 31) < 0)
    {
      sub_1C47EBC30(__p, *(void **)(v8 + 8), *(_QWORD *)(v8 + 16));
      v8 = *v2;
    }
    else
    {
      v9 = *(_OWORD *)(v8 + 8);
      __p[2] = *(void **)(v8 + 24);
      *(_OWORD *)__p = v9;
    }
    v7 = *(_DWORD *)(v8 + 32);
    if (v7 == 9)
    {
      llvm::sys::fs::directory_entry::status((llvm::sys::fs::directory_entry *)(v8 + 8), (uint64_t)v22);
      if ((v24 & 1) != 0)
        v7 = 9;
      else
        v7 = v23;
    }
    v5 = __p[0];
    v22[0] = __p[1];
    *(void **)((char *)v22 + 7) = *(void **)((char *)&__p[1] + 7);
    v6 = HIBYTE(__p[2]);
    memset(__p, 0, sizeof(__p));
  }
  if (*(char *)(a1 + 31) < 0)
  {
    operator delete(*(void **)(a1 + 8));
    v11 = SHIBYTE(__p[2]) < 0;
    v12 = v22[0];
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v12;
    *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)v22 + 7);
    *(_BYTE *)(a1 + 31) = v6;
    *(_DWORD *)(a1 + 32) = v7;
    v13 = !v11 || v4;
    if ((v13 & 1) == 0)
      operator delete(__p[0]);
  }
  else
  {
    v10 = v22[0];
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)v22 + 7);
    *(_BYTE *)(a1 + 31) = v6;
    *(_DWORD *)(a1 + 32) = v7;
  }
  v14 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v3;
}

uint64_t sub_1C5E5AA04(uint64_t a1, uint64_t *a2)
{
  char v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  void *v10;
  void *v11;
  size_t v12;
  size_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD v19[2];
  void *__src;
  size_t __len;
  uint64_t v22;
  int v23;

  v4 = *((_BYTE *)a2 + 23);
  v5 = v4 < 0;
  v6 = (uint64_t *)*a2;
  v7 = a2[1];
  *(_QWORD *)a1 = off_1E81A4548;
  *(_DWORD *)(a1 + 8) = 2;
  if (v4 >= 0)
    v6 = a2;
  v8 = v4 & 0x7F;
  if (v5)
    v8 = v7;
  __src = 0;
  __len = 0;
  v19[0] = v6;
  v19[1] = v8;
  v22 = v8;
  v23 = 0;
  llvm::sys::path::reverse_iterator::operator++((uint64_t)v19);
  v9 = __len;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v10 = __src;
  if (__len >= 0x17)
  {
    v12 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v12 = __len | 7;
    v13 = v12 + 1;
    v11 = operator new(v12 + 1);
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v13 | 0x8000000000000000;
    *(_QWORD *)(a1 + 16) = v11;
  }
  else
  {
    v11 = (void *)(a1 + 16);
    *(_BYTE *)(a1 + 39) = __len;
    if (!v9)
      goto LABEL_13;
  }
  memmove(v11, v10, v9);
LABEL_13:
  *((_BYTE *)v11 + v9) = 0;
  *(_QWORD *)a1 = &off_1E81A4518;
  v14 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 56) = a2[2];
  *(_OWORD *)(a1 + 40) = v14;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v15 = *(_OWORD *)(a2 + 3);
  v16 = *(_OWORD *)(a2 + 5);
  v17 = *(_OWORD *)(a2 + 7);
  *(_WORD *)(a1 + 112) = *((_WORD *)a2 + 36);
  *(_OWORD *)(a1 + 80) = v16;
  *(_OWORD *)(a1 + 96) = v17;
  *(_OWORD *)(a1 + 64) = v15;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0x1000000000;
  return a1;
}

void sub_1C5E5AB48(size_t __len@<X1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  int v3;
  size_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *i;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  std::string::size_type v22;
  uint64_t v23;
  BOOL v24;
  void *__b[2];
  uint64_t v26;
  _QWORD v27[4];
  __int16 v28;
  void *__p[2];
  const char *v30;
  __int16 v31;

  v3 = __len;
  v6 = __len;
  if (__len >= 0x17)
  {
    if ((__len | 7) == 0x17)
      v8 = (__len & 0xFFFFFFF8) + 8;
    else
      v8 = __len | 7;
    v7 = (void **)operator new(v8 + 1);
    __b[1] = (void *)v6;
    v26 = v8 - 0x7FFFFFFFFFFFFFFFLL;
    __b[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v26) = __len;
  v7 = __b;
  if ((_DWORD)__len)
LABEL_8:
    memset(v7, 32, v6);
  *((_BYTE *)v7 + v6) = 0;
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_BYTE *)(a2 + 63);
  v11 = v10;
  if (v10 >= 0)
    v9 = a2 + 40;
  v12 = *(_QWORD *)(a2 + 48);
  v13 = v10 & 0x7F;
  if (v11 >= 0)
    v12 = v13;
  v27[0] = __b;
  v27[2] = v9;
  v27[3] = v12;
  v28 = 1284;
  __p[0] = v27;
  v30 = "\n";
  v31 = 770;
  llvm::Twine::str((llvm::Twine *)__p, a3);
  if (SHIBYTE(v26) < 0)
    operator delete(__b[0]);
  v14 = *(_QWORD *)(a2 + 120);
  v15 = *(unsigned int *)(a2 + 128);
  if ((_DWORD)v15)
  {
    for (i = *(uint64_t **)(a2 + 120); !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = *(uint64_t **)(a2 + 120);
  }
  v18 = (uint64_t *)(v14 + 8 * v15);
  if (i != v18)
  {
    v19 = (v3 + 2);
    v20 = *i;
    do
    {
      (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v20 + 8) + 24))(__p, *(_QWORD *)(v20 + 8), v19);
      if (SHIBYTE(v30) >= 0)
        v21 = __p;
      else
        v21 = (void **)__p[0];
      if (SHIBYTE(v30) >= 0)
        v22 = HIBYTE(v30) & 0x7F;
      else
        v22 = (std::string::size_type)__p[1];
      std::string::append(a3, (const std::string::value_type *)v21, v22);
      if (SHIBYTE(v30) < 0)
        operator delete(__p[0]);
      do
      {
        v23 = i[1];
        ++i;
        v20 = v23;
        if (v23)
          v24 = v20 == -8;
        else
          v24 = 1;
      }
      while (v24);
    }
    while (i != v18);
  }
}

uint64_t sub_1C5E5ACFC(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E81A4518;
  sub_1C6136AEC(a1 + 120);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  *(_QWORD *)a1 = off_1E81A4548;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_1C5E5AD58(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81A4578;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1C5E5AD94(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81A4578;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1CAA32FC0);
}

double sub_1C5E5ADE0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double result;
  _QWORD v5[4];
  __int16 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int16 v12;

  v3 = *(_QWORD *)(a1 + 8);
  v6 = 260;
  v5[0] = a1 + 16;
  (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v3 + 16))(&v7, v3, v5);
  *(_BYTE *)(a2 + 80) &= ~1u;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v8;
  *(_OWORD *)(a2 + 24) = v9;
  *(_OWORD *)(a2 + 40) = v10;
  result = *(double *)&v11;
  *(_OWORD *)(a2 + 56) = v11;
  *(_WORD *)(a2 + 72) = v12;
  return result;
}

char *sub_1C5E5AE6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *result;
  uint64_t v8;
  _QWORD v9[4];
  __int16 v10;
  const void ***v11;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 8) + 32))(v12);
  if ((v13 & 1) != 0)
  {
    result = (char *)v12[0];
    v8 = v12[1];
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)(a2 + 8) = v8;
  }
  else
  {
    v4 = *(_QWORD *)(v12[0] + 8);
    v3 = *(_QWORD *)(v12[0] + 16);
    v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v12[0] + 16))(v12[0]);
    v10 = 261;
    v9[0] = v5;
    v9[1] = v6;
    v11 = (const void ***)v9;
    result = sub_1C5E1F380(24, &v11);
    *(_QWORD *)result = &off_1E81A17B0;
    *((_QWORD *)result + 1) = v4;
    *((_QWORD *)result + 2) = v3;
    *(_BYTE *)(a2 + 16) &= ~1u;
  }
  *(_QWORD *)a2 = result;
  return result;
}

uint64_t sub_1C5E5AF4C()
{
  std::system_category();
  return 0;
}

double sub_1C5E5AF68(uint64_t a1, llvm::Twine *this)
{
  void **v3;
  double result;
  __int128 v5;
  uint64_t v6;

  llvm::Twine::str(this, &v5);
  v3 = (void **)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*v3);
  result = *(double *)&v5;
  *(_OWORD *)v3 = v5;
  *(_QWORD *)(a1 + 32) = v6;
  return result;
}

uint64_t sub_1C5E5AFBC(uint64_t *a1, llvm ****a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  llvm ****v6;
  char *v10;
  uint64_t v11;
  uint64_t i;
  llvm::yaml::KeyValueNode *v13;
  uint64_t v14;
  size_t *v15;
  int v16;
  unint64_t v17;
  unint64_t Key;
  int v19;
  unint64_t v20;
  __int128 v21;
  unint64_t Value;
  llvm::yaml::SequenceNode *v23;
  size_t v24;
  llvm ****v25;
  uint64_t v26;
  uint64_t v27;
  size_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  size_t *v34;
  size_t *v35;
  size_t v36;
  size_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  size_t v42;
  uint64_t v43;
  unint64_t v46;
  char v47;
  BOOL v48;
  const void *v49;
  unint64_t v50;
  unint64_t v51;
  size_t v52;
  size_t v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  size_t v61;
  __int128 v62;
  char *v63;
  size_t v64;
  uint64_t v65;
  unint64_t v68;
  llvm ***v69;
  int v70;
  unsigned int v71;
  uint64_t result;
  unsigned __int8 *v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  _BOOL4 v78;
  const void *v80;
  size_t v81;
  uint64_t v82;
  void *v83;
  size_t v84;
  uint64_t v85;
  const void *v86;
  _BYTE *v87;
  unsigned int v88;
  uint64_t v89;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v90;
  uint64_t v91;
  void *v92;
  char v93;
  const void *v94;
  void *v95;
  uint64_t v96;
  void *v97;
  size_t v98;
  const void *v99;
  _BYTE *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  void *v105;
  uint64_t *v106;
  uint64_t v107;
  unint64_t v108;
  __int128 v109;
  size_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t (**v117)();
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  _QWORD *v122;
  __int128 *v123;
  _QWORD *v124;
  unsigned int v125;
  uint64_t v126;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v127;
  uint64_t v128;
  size_t v129;
  const void *v130;
  void *v131;
  char v132;
  void *v133;
  uint64_t v134;
  __int128 *v135;
  _QWORD *v136;
  uint64_t v137;
  unint64_t v138;
  __int128 v139;
  _QWORD *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  unint64_t v144;
  const void *v145;
  int v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t *v149;
  void *v150;
  void *v151;
  char v152;
  __int128 v153;
  _QWORD *v154;
  __int128 v155;
  size_t *v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  __int128 v160;
  _QWORD *v161;
  __int16 v162;
  __int128 v163;
  size_t *v164;
  _QWORD v165[2];
  int v166;
  void **v167;
  __int128 v168;
  const void *v169;
  size_t v170;
  unint64_t v171;
  unsigned int v172;
  _BYTE v173[30];
  __int16 v174;
  size_t __n[2];
  __int128 v176;
  __int128 v177;
  __int16 v178;
  __int128 __src;
  void *__p;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int16 v185;
  void *v186;
  __int128 v187;
  _BYTE v188[9];
  void *v189;
  __int128 __len;
  _WORD v191[128];
  _QWORD v192[2];
  __int16 v193;
  const char *v194;
  uint64_t v195;
  __int16 v196;
  const char *v197;
  uint64_t v198;
  __int16 v199;
  const char *v200;
  uint64_t v201;
  __int16 v202;
  const char *v203;
  uint64_t v204;
  __int16 v205;
  uint64_t v206;

  v6 = a2;
  v206 = *MEMORY[0x1E0C80C00];
  if (!a3 || *(_DWORD *)(a3 + 32) != 4)
  {
    v189 = "expected mapping node for file or directory entry";
    v191[4] = 259;
    result = llvm::yaml::Stream::printError(*a2, a3, (llvm::Twine *)&v189, 0);
    *a1 = 0;
    return result;
  }
  v192[0] = "name";
  v192[1] = 4;
  v193 = 1;
  v194 = "type";
  v195 = 4;
  v196 = 1;
  v197 = "contents";
  v198 = 8;
  v199 = 0;
  v200 = "external-contents";
  v201 = 17;
  v202 = 0;
  v203 = "use-external-name";
  v204 = 17;
  v205 = 0;
  v166 = 8;
  v10 = (char *)operator new(0xC0uLL, (std::align_val_t)8uLL);
  v11 = 0;
  v165[0] = v10;
  v165[1] = 0;
  do
  {
    *(_OWORD *)&v10[v11] = xmmword_1C85F6FF0;
    v11 += 24;
  }
  while (v11 != 192);
  for (i = 0; i != 15; i += 3)
    sub_1C6398E18((uint64_t)&v189, (uint64_t)v165, (const void **)&v192[i], &v192[i + 2]);
  v163 = 0uLL;
  v164 = 0;
  v189 = v191;
  __len = xmmword_1C64638F0;
  v186 = v188;
  v187 = xmmword_1C64638F0;
  *(_BYTE *)(a3 + 76) = 0;
  llvm::yaml::MappingNode::increment((llvm::yaml::MappingNode *)a3);
  v13 = *(llvm::yaml::KeyValueNode **)(a3 + 80);
  if (!v13)
  {
    v69 = *v6;
    if (*((_BYTE *)**v6 + 74))
      goto LABEL_148;
    goto LABEL_176;
  }
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v146 = 0;
  v147 = a4;
  v145 = (const void *)(a4 + 72);
  do
  {
    v153 = 0uLL;
    __p = &v182;
    v181 = xmmword_1C64638F0;
    Key = llvm::yaml::KeyValueNode::getKey(v13);
    if (!sub_1C6398748(v6, Key, (const char **)&v153, (uint64_t *)&__p))
      goto LABEL_10;
    v148 = a1;
    v20 = llvm::yaml::KeyValueNode::getKey(v13);
    v21 = v153;
    if ((sub_1C63987BC(v6, v20, (const void *)v153, *((const void **)&v153 + 1), (uint64_t)v165) & 1) == 0)
      goto LABEL_10;
    __src = 0uLL;
    switch(*((_QWORD *)&v21 + 1))
    {
      case 8:
        if (*(_QWORD *)v21 == 0x73746E65746E6F63)
        {
          if (v16)
            goto LABEL_86;
          Value = llvm::yaml::KeyValueNode::getValue(v13);
          if (!Value || (v23 = (llvm::yaml::SequenceNode *)Value, *(_DWORD *)(Value + 32) != 5))
          {
            v57 = llvm::yaml::KeyValueNode::getValue(v13);
            __n[0] = (size_t)"expected array";
            LOWORD(v177) = 259;
            llvm::yaml::Stream::printError(*v6, v57, (llvm::Twine *)__n, 0);
LABEL_88:
            a1 = v148;
            *v148 = 0;
            v16 = 1;
            goto LABEL_11;
          }
          *(_BYTE *)(Value + 76) = 0;
          llvm::yaml::SequenceNode::increment((llvm::yaml::SequenceNode *)Value);
          if (*((_QWORD *)v23 + 10))
          {
            v144 = v17;
            while (1)
            {
              sub_1C5E5AFBC(__n, v6);
              v24 = __n[0];
              if (!__n[0])
                goto LABEL_88;
              if (v15 >= v164)
                break;
              __n[0] = 0;
              *v15++ = v24;
LABEL_47:
              *((_QWORD *)&v163 + 1) = v15;
              if (__n[0])
                (*(void (**)(size_t))(*(_QWORD *)__n[0] + 8))(__n[0]);
              llvm::yaml::SequenceNode::increment(v23);
              if (!*((_QWORD *)v23 + 10))
                goto LABEL_53;
            }
            v25 = v6;
            v26 = a5;
            v27 = v14;
            v28 = (size_t *)v163;
            v29 = (uint64_t)((uint64_t)v15 - v163) >> 3;
            v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 61)
              goto LABEL_251;
            v31 = (uint64_t)v164 - v163;
            if ((uint64_t)((uint64_t)v164 - v163) >> 2 > v30)
              v30 = v31 >> 2;
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
              v32 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v32 = v30;
            if (v32)
            {
              if (v32 >> 61)
                sub_1C4764EE4();
              v33 = (char *)operator new(8 * v32);
            }
            else
            {
              v33 = 0;
            }
            v34 = (size_t *)&v33[8 * v29];
            __n[0] = 0;
            *v34 = v24;
            v35 = v34 + 1;
            if (v15 == v28)
            {
              *(_QWORD *)&v163 = v34;
              *((_QWORD *)&v163 + 1) = v34 + 1;
              v164 = (size_t *)&v33[8 * v32];
              if (!v15)
                goto LABEL_46;
            }
            else
            {
              do
              {
                v36 = *--v15;
                *v15 = 0;
                *--v34 = v36;
              }
              while (v15 != v28);
              v37 = (size_t *)*((_QWORD *)&v163 + 1);
              v15 = (size_t *)v163;
              *(_QWORD *)&v163 = v34;
              *((_QWORD *)&v163 + 1) = v35;
              v164 = (size_t *)&v33[8 * v32];
              while (v37 != v15)
              {
                v39 = *--v37;
                v38 = v39;
                *v37 = 0;
                if (v39)
                  (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
              }
              if (!v15)
                goto LABEL_46;
            }
            operator delete(v15);
LABEL_46:
            v15 = v35;
            v14 = v27;
            a5 = v26;
            v6 = v25;
            v17 = v144;
            goto LABEL_47;
          }
LABEL_53:
          v19 = 0;
          v16 = 1;
        }
        else
        {
LABEL_96:
          LOBYTE(__n[0]) = 0;
          v60 = llvm::yaml::KeyValueNode::getValue(v13);
          if (!sub_1C63988C0(v6, v60, __n))
            goto LABEL_10;
          v19 = 0;
          if (LOBYTE(__n[0]))
            v14 = 1;
          else
            v14 = 2;
        }
        goto LABEL_54;
      case 0x11:
        if (*(_QWORD *)v21 != 0x6C616E7265747865
          || *(_QWORD *)(v21 + 8) != 0x746E65746E6F632DLL
          || *(_BYTE *)(v21 + 16) != 115)
        {
          goto LABEL_96;
        }
        if (v16)
        {
LABEL_86:
          v56 = llvm::yaml::KeyValueNode::getKey(v13);
          __n[0] = (size_t)"entry already has 'contents' or 'external-contents'";
          LOWORD(v177) = 259;
          llvm::yaml::Stream::printError(*v6, v56, (llvm::Twine *)__n, 0);
LABEL_10:
          *a1 = 0;
LABEL_11:
          v19 = 1;
          break;
        }
        v46 = llvm::yaml::KeyValueNode::getValue(v13);
        if (sub_1C6398748(v6, v46, (const char **)&__src, (uint64_t *)&__p))
        {
          __n[0] = (size_t)&v176 + 8;
          *(_QWORD *)&v176 = 256;
          if (*(_BYTE *)(v147 + 97))
          {
            v47 = *(_BYTE *)(v147 + 95);
            v48 = v47 < 0;
            if (v47 >= 0)
              v49 = v145;
            else
              v49 = *(const void **)(v147 + 72);
            v50 = v47 & 0x7F;
            if (v48)
              v51 = *(_QWORD *)(v147 + 80);
            else
              v51 = v50;
            __n[1] = 0;
            if (v51 >= 0x101)
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)__n, (char *)&v176 + 8, v51, 1);
              v52 = __n[1];
              v54 = (char *)__n[0];
LABEL_84:
              memcpy(&v54[v52], v49, v51);
              v53 = __n[1];
            }
            else
            {
              v52 = 0;
              v53 = 0;
              v54 = (char *)&v176 + 8;
              if (v51)
                goto LABEL_84;
            }
            __n[1] = v53 + v51;
            LOWORD(v171) = 261;
            v168 = __src;
            LOWORD(v158) = 257;
            v174 = 257;
            v162 = 257;
            llvm::sys::path::append(__n, 0, (_QWORD **)&v168, (_QWORD **)&v155, (_QWORD **)v173, (void ***)&v160);
            v55 = __n[1];
LABEL_106:
            sub_1C5E55E08((uint64_t)&v168, (unsigned __int8 *)__n[0], v55);
            sub_1C4FE6ED8((uint64_t)__n, (uint64_t)&v168);
            if ((size_t *)v168 != &v170)
              free((void *)v168);
            v63 = (char *)__n[0];
            v64 = __n[1];
            *(_QWORD *)&__len = 0;
            if (*((_QWORD *)&__len + 1) < __n[1])
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v189, v191, __n[1], 1);
              v65 = __len;
LABEL_110:
              memcpy((char *)v189 + v65, v63, v64);
              v65 = __len;
              v63 = (char *)__n[0];
            }
            else
            {
              v65 = 0;
              if (__n[1])
                goto LABEL_110;
            }
            *(_QWORD *)&__len = v65 + v64;
            if (v63 != (char *)&v176 + 8)
              free(v63);
            v19 = 0;
            v16 = 2;
LABEL_54:
            a1 = v148;
            break;
          }
          v61 = 0;
          v62 = __src;
          __n[1] = 0;
          if (*((_QWORD *)&__src + 1) >= 0x101uLL)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)__n, (char *)&v176 + 8, *((unint64_t *)&__src + 1), 1);
            v61 = __n[1];
            if (*((_QWORD *)&v62 + 1))
            {
LABEL_104:
              memcpy((void *)(__n[0] + v61), (const void *)v62, *((size_t *)&v62 + 1));
              v61 = __n[1];
            }
          }
          else if (*((_QWORD *)&__src + 1))
          {
            goto LABEL_104;
          }
          v55 = v61 + *((_QWORD *)&v62 + 1);
          __n[1] = v61 + *((_QWORD *)&v62 + 1);
          goto LABEL_106;
        }
        *a1 = 0;
        v19 = 1;
        v16 = 2;
        break;
      case 4:
        if (*(_DWORD *)v21 == 1701667182)
        {
          v40 = llvm::yaml::KeyValueNode::getValue(v13);
          if (!sub_1C6398748(v6, v40, (const char **)&__src, (uint64_t *)&__p))
            goto LABEL_10;
          v17 = llvm::yaml::KeyValueNode::getValue(v13);
          sub_1C5E55E08((uint64_t)__n, (unsigned __int8 *)__src, *((unint64_t *)&__src + 1));
          v41 = (char *)__n[0];
          v42 = __n[1];
          *(_QWORD *)&v187 = 0;
          if (*((_QWORD *)&v187 + 1) < __n[1])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v186, v188, __n[1], 1);
            v43 = v187;
LABEL_61:
            memcpy((char *)v186 + v43, v41, v42);
            v43 = v187;
            v41 = (char *)__n[0];
          }
          else
          {
            v43 = 0;
            if (__n[1])
              goto LABEL_61;
          }
          *(_QWORD *)&v187 = v43 + v42;
          if (v41 != (char *)&v176 + 8)
            free(v41);
          v19 = 0;
          goto LABEL_54;
        }
        if (*(_DWORD *)v21 != 1701869940)
          goto LABEL_96;
        v58 = llvm::yaml::KeyValueNode::getValue(v13);
        if (!sub_1C6398748(v6, v58, (const char **)&__src, (uint64_t *)&__p))
          goto LABEL_10;
        if (*((_QWORD *)&__src + 1) == 15)
        {
          if (*(_QWORD *)__src != 0x726F746365726964 || *(_QWORD *)(__src + 7) != 0x70616D65722D7972)
          {
LABEL_127:
            v68 = llvm::yaml::KeyValueNode::getValue(v13);
            __n[0] = (size_t)"unknown value for 'type'";
            LOWORD(v177) = 259;
            llvm::yaml::Stream::printError(*v6, v68, (llvm::Twine *)__n, 0);
            goto LABEL_10;
          }
          v19 = 0;
          v59 = 1;
          goto LABEL_120;
        }
        if (*((_QWORD *)&__src + 1) != 9)
        {
          if (*((_QWORD *)&__src + 1) != 4 || *(_DWORD *)__src != 1701603686)
            goto LABEL_127;
          v19 = 0;
          v59 = 2;
LABEL_120:
          v146 = v59;
          break;
        }
        if (*(_QWORD *)__src != 0x726F746365726964 || *(_BYTE *)(__src + 8) != 121)
          goto LABEL_127;
        v146 = 0;
        v19 = 0;
        break;
      default:
        goto LABEL_96;
    }
    if (__p != &v182)
      free(__p);
    if (v19)
      goto LABEL_149;
    llvm::yaml::MappingNode::increment((llvm::yaml::MappingNode *)a3);
    v13 = *(llvm::yaml::KeyValueNode **)(a3 + 80);
  }
  while (v13);
  v69 = *v6;
  if (*((_BYTE *)**v6 + 74))
    goto LABEL_148;
  if (!v16)
  {
LABEL_176:
    __p = "missing key 'contents' or 'external-contents'";
    WORD4(v182) = 259;
LABEL_248:
    v143 = a3;
    goto LABEL_249;
  }
  if ((sub_1C5E5C288(v6, a3, (uint64_t)v165) & 1) == 0)
    goto LABEL_148;
  if (!v146 && (_DWORD)v14)
  {
    v142 = "'use-external-name' is not supported for 'directory' entries";
LABEL_247:
    __p = v142;
    WORD4(v182) = 259;
    v69 = *v6;
    goto LABEL_248;
  }
  if (v146 == 1 && v16 == 1)
  {
    v142 = "'contents' is not supported for 'directory-remap' entries";
    goto LABEL_247;
  }
  v70 = v14;
  if (!(_DWORD)a5)
  {
    v71 = 0;
    goto LABEL_156;
  }
  WORD4(v182) = 261;
  __p = v186;
  *(_QWORD *)&v181 = v187;
  v71 = 1;
  if ((llvm::sys::path::is_absolute((const char **)&__p, (const llvm::Twine *)1) & 1) != 0
    || (WORD4(v182) = 261,
        __p = v186,
        *(_QWORD *)&v181 = v187,
        v71 = 3,
        (llvm::sys::path::is_absolute((const char **)&__p, (const llvm::Twine *)3) & 1) != 0))
  {
LABEL_156:
    v73 = (unsigned __int8 *)v186;
    v74 = v187;
    llvm::sys::path::root_path((unint64_t)v186, v187, v71);
    while (v74 > v75)
    {
      v76 = v73[v74 - 1];
      v78 = v71 > 1 && v76 == 92;
      if (v76 != 47 && !v78)
        break;
      if (v74 >= v74 - 1)
        --v74;
    }
    *(_QWORD *)&v182 = 0;
    __p = v73;
    v181 = v74;
    *((_QWORD *)&v182 + 1) = v74;
    LODWORD(v183) = v71;
    llvm::sys::path::reverse_iterator::operator++((uint64_t)&__p);
    v80 = (const void *)*((_QWORD *)&v181 + 1);
    v81 = v182;
    *a1 = 0;
    v149 = a1;
    if (v146)
    {
      if (v146 != 1)
      {
        v82 = operator new();
        v83 = v189;
        v84 = __len;
        *(_DWORD *)(v82 + 8) = 2;
        if (v81 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_251;
        v85 = v82;
        v86 = v80;
        v150 = v83;
        if (v81 >= 0x17)
        {
          v101 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v81 | 7) != 0x17)
            v101 = v81 | 7;
          v102 = v101 + 1;
          v87 = operator new(v101 + 1);
          *(_QWORD *)(v85 + 24) = v81;
          *(_QWORD *)(v85 + 32) = v102 | 0x8000000000000000;
          *(_QWORD *)(v85 + 16) = v87;
        }
        else
        {
          v87 = (_BYTE *)(v82 + 16);
          *(_BYTE *)(v82 + 39) = v81;
          if (!v81)
          {
LABEL_191:
            v87[v81] = 0;
            if (v84 <= 0x7FFFFFFFFFFFFFF7)
            {
              if (v84 >= 0x17)
              {
                v115 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v84 | 7) != 0x17)
                  v115 = v84 | 7;
                v116 = v115 + 1;
                v103 = operator new(v115 + 1);
                *(_QWORD *)(v85 + 48) = v84;
                *(_QWORD *)(v85 + 56) = v116 | 0x8000000000000000;
                *(_QWORD *)(v85 + 40) = v103;
              }
              else
              {
                v103 = (void *)(v85 + 40);
                *(_BYTE *)(v85 + 63) = v84;
                if (!v84)
                  goto LABEL_215;
              }
              memmove(v103, v150, v84);
LABEL_215:
              *((_BYTE *)v103 + v84) = 0;
              *(_DWORD *)(v85 + 64) = v70;
              v117 = &off_1E81A45C8;
LABEL_221:
              *(_QWORD *)v85 = v117;
              *v149 = v85;
LABEL_222:
              v120 = sub_1C5E7BE8C(v73, v74, v71);
              if (v74 >= v120)
                v121 = v120;
              else
                v121 = v74;
              if (v120 == -1)
                goto LABEL_149;
              if (!v121)
                goto LABEL_149;
              v169 = 0;
              v170 = 0;
              *(_QWORD *)&v168 = v73;
              *((_QWORD *)&v168 + 1) = v121;
              v171 = v121;
              v172 = v71;
              llvm::sys::path::reverse_iterator::operator++((uint64_t)&v168);
              v159 = 0;
              *(_QWORD *)&v155 = v73;
              *((_QWORD *)&v155 + 1) = v121;
              v157 = 0;
              v158 = 0;
              v156 = (size_t *)v73;
              if (llvm::sys::path::reverse_iterator::operator==((uint64_t)&v168, (uint64_t)&v155))
                goto LABEL_149;
              v122 = (_QWORD *)&v183 + 1;
              v123 = &v181;
              while (1)
              {
                v124 = operator new(8uLL);
                *v149 = 0;
                *(_QWORD *)&v153 = v124;
                *v124 = v85;
                *((_QWORD *)&v153 + 1) = v124 + 1;
                v154 = v124 + 1;
                v174 = 257;
                do
                {
                  v125 = __ldaxr((unsigned int *)&unk_1EF8F7330);
                  v126 = v125 + 1;
                }
                while (__stlxr(v126, (unsigned int *)&unk_1EF8F7330));
                v127 = 1000 * std::chrono::system_clock::now().__d_.__rep_;
                llvm::Twine::str((llvm::Twine *)v173, &__p);
                *(_QWORD *)&v182 = -1;
                *((_QWORD *)&v182 + 1) = v126;
                *(_QWORD *)&v183 = v127;
                *v122 = 0;
                v122[1] = 0;
                *((_QWORD *)&v184 + 1) = 0x1FF00000003;
                v185 = 0;
                v128 = operator new();
                v130 = v169;
                v129 = v170;
                v160 = v153;
                v161 = v154;
                v153 = 0uLL;
                v154 = 0;
                v131 = __p;
                *(_QWORD *)&__src = *(_QWORD *)v123;
                *(_QWORD *)((char *)&__src + 7) = *(_QWORD *)((char *)v123 + 7);
                v132 = HIBYTE(v181);
                v181 = 0uLL;
                __p = 0;
                v178 = v185;
                v176 = v183;
                v177 = v184;
                *(_OWORD *)__n = v182;
                *(_DWORD *)(v128 + 8) = 0;
                if (v129 > 0x7FFFFFFFFFFFFFF7)
                  break;
                v85 = v128;
                if (v129 >= 0x17)
                {
                  v134 = (v129 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v129 | 7) != 0x17)
                    v134 = v129 | 7;
                  v135 = v123;
                  v136 = v122;
                  v137 = v134 + 1;
                  v133 = operator new(v134 + 1);
                  v138 = v137 | 0x8000000000000000;
                  v122 = v136;
                  v123 = v135;
                  *(_QWORD *)(v85 + 24) = v129;
                  *(_QWORD *)(v85 + 32) = v138;
                  *(_QWORD *)(v85 + 16) = v133;
                }
                else
                {
                  v133 = (void *)(v128 + 16);
                  *(_BYTE *)(v128 + 39) = v129;
                  if (!v129)
                    goto LABEL_239;
                }
                memmove(v133, v130, v129);
LABEL_239:
                *((_BYTE *)v133 + v129) = 0;
                *(_OWORD *)(v85 + 40) = v160;
                *(_OWORD *)(v85 + 120) = v177;
                v139 = *(_OWORD *)__n;
                *(_OWORD *)(v85 + 104) = v176;
                *(_QWORD *)v85 = &off_1E81A4648;
                v140 = v161;
                v160 = 0uLL;
                v161 = 0;
                *(_QWORD *)(v85 + 56) = v140;
                *(_QWORD *)(v85 + 64) = v131;
                *(_QWORD *)(v85 + 72) = __src;
                *(_QWORD *)(v85 + 79) = *(_QWORD *)((char *)&__src + 7);
                *(_BYTE *)(v85 + 87) = v132;
                *(_WORD *)(v85 + 136) = v178;
                *(_OWORD *)(v85 + 88) = v139;
                v167 = (void **)&v160;
                sub_1C4764BBC(&v167);
                v141 = *v149;
                *v149 = v85;
                if (v141)
                  (*(void (**)(uint64_t))(*(_QWORD *)v141 + 8))(v141);
                if (SHIBYTE(v181) < 0)
                  operator delete(__p);
                __p = &v153;
                sub_1C4764BBC((void ***)&__p);
                llvm::sys::path::reverse_iterator::operator++((uint64_t)&v168);
                if (llvm::sys::path::reverse_iterator::operator==((uint64_t)&v168, (uint64_t)&v155))
                  goto LABEL_149;
              }
            }
LABEL_251:
            abort();
          }
        }
        memmove(v87, v86, v81);
        goto LABEL_191;
      }
      v96 = operator new();
      v97 = v189;
      v98 = __len;
      *(_DWORD *)(v96 + 8) = 1;
      if (v81 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_251;
      v85 = v96;
      v99 = v80;
      v151 = v97;
      if (v81 >= 0x17)
      {
        v112 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v81 | 7) != 0x17)
          v112 = v81 | 7;
        v113 = v112 + 1;
        v100 = operator new(v112 + 1);
        *(_QWORD *)(v85 + 24) = v81;
        *(_QWORD *)(v85 + 32) = v113 | 0x8000000000000000;
        *(_QWORD *)(v85 + 16) = v100;
      }
      else
      {
        v100 = (_BYTE *)(v96 + 16);
        *(_BYTE *)(v96 + 39) = v81;
        if (!v81)
        {
LABEL_207:
          v100[v81] = 0;
          if (v98 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_251;
          if (v98 >= 0x17)
          {
            v118 = (v98 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v98 | 7) != 0x17)
              v118 = v98 | 7;
            v119 = v118 + 1;
            v114 = operator new(v118 + 1);
            *(_QWORD *)(v85 + 48) = v98;
            *(_QWORD *)(v85 + 56) = v119 | 0x8000000000000000;
            *(_QWORD *)(v85 + 40) = v114;
          }
          else
          {
            v114 = (void *)(v85 + 40);
            *(_BYTE *)(v85 + 63) = v98;
            if (!v98)
              goto LABEL_220;
          }
          memmove(v114, v151, v98);
LABEL_220:
          *((_BYTE *)v114 + v98) = 0;
          *(_DWORD *)(v85 + 64) = v70;
          v117 = &off_1E81A4628;
          goto LABEL_221;
        }
      }
      memmove(v100, v99, v81);
      goto LABEL_207;
    }
    LOWORD(v171) = 257;
    do
    {
      v88 = __ldaxr((unsigned int *)&unk_1EF8F7330);
      v89 = v88 + 1;
    }
    while (__stlxr(v89, (unsigned int *)&unk_1EF8F7330));
    v90 = 1000 * std::chrono::system_clock::now().__d_.__rep_;
    llvm::Twine::str((llvm::Twine *)&v168, &__p);
    *(_QWORD *)&v182 = -1;
    *((_QWORD *)&v182 + 1) = v89;
    *(_QWORD *)&v184 = 0;
    v183 = (unint64_t)v90;
    *((_QWORD *)&v184 + 1) = 0x1FF00000003;
    v185 = 0;
    v91 = operator new();
    v155 = v163;
    v156 = v164;
    v163 = 0uLL;
    v164 = 0;
    v92 = __p;
    *(_QWORD *)v173 = v181;
    *(_QWORD *)&v173[7] = *(_QWORD *)((char *)&v181 + 7);
    v93 = HIBYTE(v181);
    __p = 0;
    v181 = 0uLL;
    v178 = v185;
    v176 = v183;
    v177 = v184;
    *(_OWORD *)__n = v182;
    *(_DWORD *)(v91 + 8) = 0;
    if (v81 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_251;
    v85 = v91;
    v94 = v80;
    if (v81 >= 0x17)
    {
      v104 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v81 | 7) != 0x17)
        v104 = v81 | 7;
      v152 = v93;
      v105 = v92;
      v106 = a1;
      v107 = v104 + 1;
      v95 = operator new(v104 + 1);
      v108 = v107 | 0x8000000000000000;
      a1 = v106;
      v92 = v105;
      v93 = v152;
      *(_QWORD *)(v85 + 24) = v81;
      *(_QWORD *)(v85 + 32) = v108;
      *(_QWORD *)(v85 + 16) = v95;
    }
    else
    {
      v95 = (void *)(v91 + 16);
      *(_BYTE *)(v91 + 39) = v81;
      if (!v81)
        goto LABEL_199;
    }
    memmove(v95, v94, v81);
LABEL_199:
    *((_BYTE *)v95 + v81) = 0;
    *(_OWORD *)(v85 + 40) = v155;
    *(_OWORD *)(v85 + 120) = v177;
    v109 = *(_OWORD *)__n;
    *(_OWORD *)(v85 + 104) = v176;
    *(_QWORD *)v85 = &off_1E81A4648;
    v110 = v156;
    v155 = 0uLL;
    v156 = 0;
    *(_QWORD *)(v85 + 56) = v110;
    *(_QWORD *)(v85 + 64) = v92;
    *(_QWORD *)(v85 + 72) = *(_QWORD *)v173;
    *(_QWORD *)(v85 + 79) = *(_QWORD *)&v173[7];
    *(_BYTE *)(v85 + 87) = v93;
    *(_WORD *)(v85 + 136) = v178;
    *(_OWORD *)(v85 + 88) = v109;
    *(_QWORD *)&v160 = &v155;
    sub_1C4764BBC((void ***)&v160);
    v111 = *a1;
    *a1 = v85;
    if (v111)
      (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
    if (SHIBYTE(v181) < 0)
      operator delete(__p);
    goto LABEL_222;
  }
  if (!llvm::sys::fs::make_absolute((uint64_t)&v186))
  {
    WORD4(v182) = 261;
    __p = v186;
    *(_QWORD *)&v181 = v187;
    if (llvm::sys::path::is_absolute((const char **)&__p, (const llvm::Twine *)1))
      v71 = 1;
    else
      v71 = 3;
    goto LABEL_156;
  }
  __p = "entry with relative path at the root level is not discoverable";
  WORD4(v182) = 259;
  v69 = *v6;
  v143 = v17;
LABEL_249:
  llvm::yaml::Stream::printError(v69, v143, (llvm::Twine *)&__p, 0);
LABEL_148:
  *a1 = 0;
LABEL_149:
  if (v186 != v188)
    free(v186);
  if (v189 != v191)
    free(v189);
  v189 = &v163;
  sub_1C4764BBC((void ***)&v189);
  return MEMORY[0x1CAA32FB4](v165[0], 8);
}

uint64_t sub_1C5E5C288(llvm ****a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;

  v3 = *(unsigned int *)(a3 + 16);
  if (!*(_DWORD *)(a3 + 8))
  {
LABEL_6:
    i = *(_QWORD *)a3 + 24 * v3;
    goto LABEL_8;
  }
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    i = *(_QWORD *)a3;
    do
    {
      if (*(_QWORD *)i < 0xFFFFFFFFFFFFFFFELL)
        goto LABEL_8;
      i += 24;
      v4 -= 24;
    }
    while (v4);
    goto LABEL_6;
  }
  for (i = *(_QWORD *)a3; ; i = *(_QWORD *)a3 + 24 * v3)
  {
LABEL_8:
    if (i == *(_QWORD *)a3 + 24 * v3)
      return 1;
    if (*(_BYTE *)(i + 16) && *(_BYTE *)(i + 17) == 0)
      break;
    v7 = (unint64_t *)(i + 24);
    while (v7 != (unint64_t *)(*(_QWORD *)a3 + 24 * v3))
    {
      v8 = *v7;
      v7 += 3;
      if (v8 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        i = (uint64_t)(v7 - 3);
        goto LABEL_8;
      }
    }
  }
  v10 = *(_QWORD *)i;
  v11 = *(_QWORD *)(i + 8);
  v12[0] = "missing key '";
  v12[2] = v10;
  v12[3] = v11;
  v13 = 1283;
  v14[0] = v12;
  v14[2] = "'";
  v15 = 770;
  llvm::yaml::Stream::printError(*a1, a2, (llvm::Twine *)v14, 0);
  return 0;
}

_OWORD *sub_1C5E5C388(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = xmmword_1C85F6FF0;
        result = (_OWORD *)((char *)result + 24);
        v11 -= 24;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 24 * v3;
      v13 = v4;
      do
      {
        if (*(_QWORD *)v13 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v17 = 0;
          sub_1C6398EB0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (const void **)v13, &v17);
          v14 = v17;
          *v17 = *(_OWORD *)v13;
          *((_WORD *)v14 + 8) = *(_WORD *)(v13 + 16);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 24;
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v15 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v15)
  {
    v16 = 24 * v15;
    do
    {
      *result = xmmword_1C85F6FF0;
      result = (_OWORD *)((char *)result + 24);
      v16 -= 24;
    }
    while (v16);
  }
  return result;
}

uint64_t sub_1C5E5C4D8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81A4608;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1C5E5C514(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81A4608;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5E5C560(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E81A45E8;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  *(_QWORD *)a1 = off_1E81A4608;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_1C5E5C5B8(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &off_1E81A4648;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  v3 = (void **)(a1 + 40);
  sub_1C4764BBC(&v3);
  *(_QWORD *)a1 = off_1E81A4608;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

unint64_t sub_1C5E5C628(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 56 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_1C639917C(a1, v5);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_1C639917C(a1, v5);
    }
  }
  return a2;
}

void sub_1C5E5C690(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = (__int128 *)*a1;
    v4 = *a1 + 56 * v2;
    do
    {
      v5 = *v3;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)v3 + 2);
      *(_OWORD *)a2 = v5;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
      *(_QWORD *)v3 = 0;
      v6 = *(__int128 *)((char *)v3 + 24);
      *(_QWORD *)(a2 + 40) = *((_QWORD *)v3 + 5);
      *(_OWORD *)(a2 + 24) = v6;
      *((_QWORD *)v3 + 4) = 0;
      *((_QWORD *)v3 + 5) = 0;
      *((_QWORD *)v3 + 3) = 0;
      *(_BYTE *)(a2 + 48) = *((_BYTE *)v3 + 48);
      v3 = (__int128 *)((char *)v3 + 56);
      a2 += 56;
    }
    while (v3 != (__int128 *)v4);
    v7 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v7)
    {
      v8 = (__int128 *)*a1;
      v9 = 56 * v7;
      do
      {
        v10 = (uint64_t)v8 + v9;
        if (*((char *)v8 + v9 - 9) < 0)
          operator delete(*(void **)(v10 - 32));
        if (*(char *)(v10 - 33) < 0)
          operator delete(*(void **)(v10 - 56));
        v9 -= 56;
      }
      while (v9);
    }
  }
}

llvm::raw_ostream *sub_1C5E5C74C(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  llvm::raw_ostream *v14;
  _WORD *v15;
  unsigned int v16;
  llvm::raw_ostream *v17;
  void *v18;
  llvm::raw_ostream *v19;
  uint64_t v20;
  void **v21;
  size_t v22;
  uint64_t v23;
  llvm::raw_ostream *result;
  void *v25;
  void *__p[2];
  char v27;

  v6 = (_QWORD *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 16);
  v8 = a2;
  v9 = a3;
  if ((_DWORD)v7)
  {
    v10 = *(_QWORD *)(*v6 + 16 * v7 - 8);
    if (a3 >= v10 + 1)
      v11 = v10 + 1;
    else
      v11 = a3;
    v8 = &a2[v11];
    v9 = a3 - v11;
  }
  if (v7 >= *(_DWORD *)(a1 + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v6, a1 + 24, v7 + 1, 16);
    LODWORD(v7) = *(_DWORD *)(a1 + 16);
  }
  v12 = *(_QWORD *)(a1 + 8) + 16 * v7;
  *(_QWORD *)v12 = a2;
  *(_QWORD *)(v12 + 8) = a3;
  LODWORD(v12) = *(_DWORD *)(a1 + 16) + 1;
  *(_DWORD *)(a1 + 16) = v12;
  v13 = 4 * v12;
  v14 = llvm::raw_ostream::indent(*(llvm::raw_ostream **)a1, 4 * (int)v12);
  v15 = (_WORD *)*((_QWORD *)v14 + 4);
  if (*((_QWORD *)v14 + 3) - (_QWORD)v15 > 1uLL)
  {
    *v15 = 2683;
    *((_QWORD *)v14 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v14, "{\n", 2uLL);
  }
  v16 = v13 | 2;
  v17 = llvm::raw_ostream::indent(*(llvm::raw_ostream **)a1, v16);
  v18 = (void *)*((_QWORD *)v17 + 4);
  if (*((_QWORD *)v17 + 3) - (_QWORD)v18 > 0x14uLL)
  {
    qmemcpy(v18, "'type': 'directory',\n", 21);
    *((_QWORD *)v17 + 4) += 21;
  }
  else
  {
    llvm::raw_ostream::write(v17, "'type': 'directory',\n", 0x15uLL);
  }
  v19 = *(llvm::raw_ostream **)a1;
  llvm::raw_ostream::indent(*(llvm::raw_ostream **)a1, v16);
  v20 = *((_QWORD *)v19 + 4);
  if ((unint64_t)(*((_QWORD *)v19 + 3) - v20) > 8)
  {
    *(_BYTE *)(v20 + 8) = 34;
    *(_QWORD *)v20 = *(_QWORD *)"'name': \"";
    *((_QWORD *)v19 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v19, "'name': \"", 9uLL);
  }
  llvm::yaml::escape(v8, v9, 1, (unint64_t)__p);
  if (v27 >= 0)
    v21 = __p;
  else
    v21 = (void **)__p[0];
  if (v27 >= 0)
    v22 = v27 & 0x7F;
  else
    v22 = (size_t)__p[1];
  llvm::raw_ostream::write(v19, (const char *)v21, v22);
  v23 = *((_QWORD *)v19 + 4);
  if ((unint64_t)(*((_QWORD *)v19 + 3) - v23) > 2)
  {
    *(_BYTE *)(v23 + 2) = 10;
    *(_WORD *)v23 = 11298;
    *((_QWORD *)v19 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v19, "\",\n", 3uLL);
  }
  if (v27 < 0)
    operator delete(__p[0]);
  result = llvm::raw_ostream::indent(*(llvm::raw_ostream **)a1, v16);
  v25 = (void *)*((_QWORD *)result + 4);
  if (*((_QWORD *)result + 3) - (_QWORD)v25 <= 0xDuLL)
    return llvm::raw_ostream::write(result, "'contents': [\n", 0xEuLL);
  qmemcpy(v25, "'contents': [\n", 14);
  *((_QWORD *)result + 4) += 14;
  return result;
}

llvm::raw_ostream *sub_1C5E5C9D8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  int v10;
  unsigned int v11;
  llvm::raw_ostream *v12;
  _WORD *v13;
  unsigned int v14;
  llvm::raw_ostream *v15;
  _OWORD *v16;
  llvm::raw_ostream *v17;
  uint64_t v18;
  const char *p_p;
  size_t v20;
  uint64_t v21;
  llvm::raw_ostream *v22;
  void *v23;
  const char *v24;
  size_t v25;
  _WORD *v26;
  llvm::raw_ostream *result;
  _BYTE *v28;
  void *__p;
  size_t v30;
  char v31;

  v10 = 4 * *(_DWORD *)(a1 + 16);
  v11 = v10 + 4;
  v12 = llvm::raw_ostream::indent(*(llvm::raw_ostream **)a1, v10 + 4);
  v13 = (_WORD *)*((_QWORD *)v12 + 4);
  if (*((_QWORD *)v12 + 3) - (_QWORD)v13 > 1uLL)
  {
    *v13 = 2683;
    *((_QWORD *)v12 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v12, "{\n", 2uLL);
  }
  v14 = v10 + 6;
  v15 = llvm::raw_ostream::indent(*(llvm::raw_ostream **)a1, v14);
  v16 = (_OWORD *)*((_QWORD *)v15 + 4);
  if (*((_QWORD *)v15 + 3) - (_QWORD)v16 > 0xFuLL)
  {
    *v16 = *(_OWORD *)"'type': 'file',\n";
    *((_QWORD *)v15 + 4) += 16;
  }
  else
  {
    llvm::raw_ostream::write(v15, "'type': 'file',\n", 0x10uLL);
  }
  v17 = *(llvm::raw_ostream **)a1;
  llvm::raw_ostream::indent(*(llvm::raw_ostream **)a1, v14);
  v18 = *((_QWORD *)v17 + 4);
  if ((unint64_t)(*((_QWORD *)v17 + 3) - v18) > 8)
  {
    *(_BYTE *)(v18 + 8) = 34;
    *(_QWORD *)v18 = *(_QWORD *)"'name': \"";
    *((_QWORD *)v17 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v17, "'name': \"", 9uLL);
  }
  llvm::yaml::escape(a2, a3, 1, (unint64_t)&__p);
  if (v31 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  if (v31 >= 0)
    v20 = v31 & 0x7F;
  else
    v20 = v30;
  llvm::raw_ostream::write(v17, p_p, v20);
  v21 = *((_QWORD *)v17 + 4);
  if ((unint64_t)(*((_QWORD *)v17 + 3) - v21) > 2)
  {
    *(_BYTE *)(v21 + 2) = 10;
    *(_WORD *)v21 = 11298;
    *((_QWORD *)v17 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v17, "\",\n", 3uLL);
  }
  if (v31 < 0)
    operator delete(__p);
  v22 = *(llvm::raw_ostream **)a1;
  llvm::raw_ostream::indent(*(llvm::raw_ostream **)a1, v14);
  v23 = (void *)*((_QWORD *)v22 + 4);
  if (*((_QWORD *)v22 + 3) - (_QWORD)v23 > 0x15uLL)
  {
    qmemcpy(v23, "'external-contents': \"", 22);
    *((_QWORD *)v22 + 4) += 22;
  }
  else
  {
    llvm::raw_ostream::write(v22, "'external-contents': \"", 0x16uLL);
  }
  llvm::yaml::escape(a4, a5, 1, (unint64_t)&__p);
  if (v31 >= 0)
    v24 = (const char *)&__p;
  else
    v24 = (const char *)__p;
  if (v31 >= 0)
    v25 = v31 & 0x7F;
  else
    v25 = v30;
  llvm::raw_ostream::write(v22, v24, v25);
  v26 = (_WORD *)*((_QWORD *)v22 + 4);
  if (*((_QWORD *)v22 + 3) - (_QWORD)v26 > 1uLL)
  {
    *v26 = 2594;
    *((_QWORD *)v22 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v22, "\"\n", 2uLL);
  }
  if (v31 < 0)
    operator delete(__p);
  result = llvm::raw_ostream::indent(*(llvm::raw_ostream **)a1, v11);
  v28 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v28)
    return llvm::raw_ostream::write(result, "}", 1uLL);
  *v28 = 125;
  ++*((_QWORD *)result + 4);
  return result;
}

llvm::raw_ostream *sub_1C5E5CCDC(uint64_t a1)
{
  unsigned int v2;
  llvm::raw_ostream *v3;
  _WORD *v4;
  llvm::raw_ostream *result;
  _BYTE *v6;

  v2 = 4 * *(_DWORD *)(a1 + 16);
  v3 = llvm::raw_ostream::indent(*(llvm::raw_ostream **)a1, v2 | 2);
  v4 = (_WORD *)*((_QWORD *)v3 + 4);
  if (*((_QWORD *)v3 + 3) - (_QWORD)v4 > 1uLL)
  {
    *v4 = 2653;
    *((_QWORD *)v3 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v3, "]\n", 2uLL);
  }
  result = llvm::raw_ostream::indent(*(llvm::raw_ostream **)a1, v2);
  v6 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v6)
  {
    result = llvm::raw_ostream::write(result, "}", 1uLL);
  }
  else
  {
    *v6 = 125;
    ++*((_QWORD *)result + 4);
  }
  --*(_DWORD *)(a1 + 16);
  return result;
}

uint64_t sub_1C5E5CD94(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void **v7;

  *(_QWORD *)a1 = &off_1E81A4188;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  v2 = *(unsigned int **)(a1 + 64);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  v7 = (void **)(a1 + 16);
  sub_1C4764BBC(&v7);
  return a1;
}

void sub_1C5E5CE24(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E81A4668;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C5E5CE34(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E81A4668;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5E5CE64(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1C5E5CE74(uint64_t a1, int a2)
{
  uint64_t *v4;
  std::string *v5;
  llvm::StringMapImpl *v6;
  _BOOL4 v7;
  _BOOL4 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  BOOL v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _BOOL4 v26;
  _BOOL4 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  const std::error_category *v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  BOOL v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  char v43;
  _QWORD *v45;
  uint64_t v46;
  const std::error_category *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unsigned __int8 *v50;
  size_t v51;
  std::__shared_weak_count *v52;
  int v53;

  v4 = (uint64_t *)(a1 + 184);
  v45 = (_QWORD *)(a1 + 40);
  v5 = (std::string *)(a1 + 8);
  v6 = (llvm::StringMapImpl *)(a1 + 200);
  while (1)
  {
    LODWORD(v46) = 0;
    v47 = std::system_category();
    if ((a2 & 1) == 0)
      sub_1C5DF267C(v4, &v46);
    if ((_DWORD)v46)
      goto LABEL_38;
    v48 = 0;
    v49 = 0;
    v7 = sub_1C5DF3038(v4, &v48);
    v8 = v7;
    v9 = v49;
    if (v49)
    {
      p_shared_owners = (unint64_t *)&v49->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        if (!v8)
          goto LABEL_38;
LABEL_10:
        while (1)
        {
          v12 = *(unsigned int *)(a1 + 48);
          if (!(_DWORD)v12)
            break;
          v13 = *v45 + 16 * v12;
          v15 = *(_QWORD *)(v13 - 16);
          v14 = *(_QWORD *)(v13 - 8);
          if (v14)
          {
            v16 = (unint64_t *)(v14 + 8);
            do
              v17 = __ldxr(v16);
            while (__stxr(v17 + 1, v16));
          }
          v18 = *(std::__shared_weak_count **)(a1 + 192);
          *(_QWORD *)(a1 + 184) = v15;
          *(_QWORD *)(a1 + 192) = v14;
          if (v18)
          {
            v19 = (unint64_t *)&v18->__shared_owners_;
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
          sub_1C639953C((uint64_t)v45);
          v48 = 0;
          v49 = 0;
          v21 = sub_1C5DF3038(v4, &v48);
          v22 = v21;
          v23 = v49;
          if (!v49)
            goto LABEL_23;
          v24 = (unint64_t *)&v49->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
            if (!v22)
              break;
          }
          else
          {
LABEL_23:
            if (!v21)
              break;
          }
        }
        if (a2)
        {
          v48 = 0;
          v49 = 0;
          v26 = sub_1C5DF3038(v4, &v48);
          v27 = v26;
          v28 = v49;
          if (!v49)
            goto LABEL_31;
          v29 = (unint64_t *)&v49->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
            if (v27)
              goto LABEL_32;
          }
          else
          {
LABEL_31:
            if (v26)
            {
LABEL_32:
              v31 = std::generic_category();
              v32 = 2;
LABEL_37:
              v46 = v32;
              v47 = v31;
              goto LABEL_38;
            }
          }
        }
        v31 = std::system_category();
        v32 = 0;
        goto LABEL_37;
      }
    }
    if (v7)
      goto LABEL_10;
LABEL_38:
    v33 = v46;
    if ((_DWORD)v46)
      break;
    v48 = 0;
    v49 = 0;
    v34 = sub_1C5DF3038(v4, &v48);
    v35 = v49;
    if (v49)
    {
      v36 = (unint64_t *)&v49->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    if (v34)
      break;
    v38 = *(_QWORD *)(a1 + 184);
    std::string::operator=(v5, (const std::string *)(v38 + 8));
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v38 + 32);
    v39 = *(_BYTE *)(a1 + 31);
    v40 = v39 < 0;
    v41 = *(_QWORD *)(a1 + 8);
    if (v39 >= 0)
      v41 = (uint64_t)v5;
    v42 = (std::__shared_weak_count *)(v39 & 0x7F);
    if (v40)
      v42 = *(std::__shared_weak_count **)(a1 + 16);
    v50 = 0;
    v51 = 0;
    v48 = v41;
    v49 = v42;
    v52 = v42;
    v53 = 0;
    llvm::sys::path::reverse_iterator::operator++((uint64_t)&v48);
    sub_1C4F024D8(v6, v50, v51);
    if ((v43 & 1) != 0)
      return v33;
  }
  if (*(char *)(a1 + 31) < 0)
    operator delete(v5->__r_.__value_.__l.__data_);
  v5->__r_.__value_.__r.__words[0] = 0;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  *(_DWORD *)(a1 + 32) = 9;
  return v33;
}

uint64_t sub_1C5E5D170(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)a1 = off_1E81A46A0;
  sub_1C4F02264(a1 + 200);
  v2 = *(std::__shared_weak_count **)(a1 + 192);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_1C63995A8((char **)(a1 + 40));
  *(_QWORD *)a1 = off_1E81A40E0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1C5E5D1FC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)a1 = off_1E81A46A0;
  sub_1C4F02264(a1 + 200);
  v2 = *(std::__shared_weak_count **)(a1 + 192);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_1C63995A8((char **)(a1 + 40));
  *(_QWORD *)a1 = off_1E81A40E0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5E5D298(uint64_t a1)
{
  return sub_1C5E5CE74(a1, 0);
}

void sub_1C5E5D2A0(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  uint64_t v9;
  _OWORD v10[3];
  uint64_t v11;
  _QWORD *v12;
  __int128 v13;
  void *__p[2];
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int16 v19;
  _QWORD *v20;
  __int128 __dst;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int16 v26;

  v4 = 0;
  v5 = *(_OWORD *)(a1 + 16);
  v10[0] = *(_OWORD *)a1;
  v10[1] = v5;
  v10[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  v8 = *(_OWORD *)(a1 + 64);
  v11 = v6;
  v12 = v7;
  v13 = v8;
  if (v7)
    v4 = v7[2] - v7[1];
  llvm::vfs::detail::NewInMemoryNodeInfo::makeStatus((llvm::vfs::detail::NewInMemoryNodeInfo *)v10, v4, (uint64_t)__p);
  if (DWORD2(v18) == 3)
  {
    v9 = operator new();
    if (SHIBYTE(v15) < 0)
    {
      sub_1C47EBC30(&__dst, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      __dst = *(_OWORD *)__p;
      v22 = v15;
    }
    v23 = v16;
    v24 = v17;
    v25 = v18;
    v26 = v19;
    sub_1C5E5AA04(v9, (uint64_t *)&__dst);
    if (SHIBYTE(v22) < 0)
      operator delete((void *)__dst);
  }
  else
  {
    v9 = operator new();
    if (SHIBYTE(v15) < 0)
    {
      sub_1C47EBC30(&__dst, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      __dst = *(_OWORD *)__p;
      v22 = v15;
    }
    v23 = v16;
    v24 = v17;
    v25 = v18;
    v26 = v19;
    v20 = v7;
    sub_1C5E5D474(v9, (uint64_t *)&__dst, (uint64_t *)&v20);
    if (v20)
      (*(void (**)(_QWORD *))(*v20 + 8))(v20);
    if (SHIBYTE(v22) < 0)
      operator delete((void *)__dst);
    v7 = 0;
  }
  *a2 = v9;
  if (SHIBYTE(v15) < 0)
  {
    operator delete(__p[0]);
    if (!v7)
      return;
  }
  else if (!v7)
  {
    return;
  }
  (*(void (**)(_QWORD *))(*v7 + 8))(v7);
}

uint64_t sub_1C5E5D474(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  char v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  size_t v12;
  void *v13;
  void *v14;
  size_t v15;
  size_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _QWORD v23[2];
  void *__src;
  size_t __len;
  uint64_t v26;
  int v27;

  v6 = *((_BYTE *)a2 + 23);
  v7 = v6 < 0;
  v8 = (uint64_t *)*a2;
  v9 = a2[1];
  *(_QWORD *)a1 = off_1E81A4548;
  if (v6 >= 0)
    v10 = a2;
  else
    v10 = v8;
  v11 = v6 & 0x7F;
  *(_DWORD *)(a1 + 8) = 0;
  if (v7)
    v11 = v9;
  __src = 0;
  __len = 0;
  v23[0] = v10;
  v23[1] = v11;
  v26 = v11;
  v27 = 0;
  llvm::sys::path::reverse_iterator::operator++((uint64_t)v23);
  v12 = __len;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v13 = __src;
  if (__len >= 0x17)
  {
    v15 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v15 = __len | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v16 | 0x8000000000000000;
    *(_QWORD *)(a1 + 16) = v14;
  }
  else
  {
    v14 = (void *)(a1 + 16);
    *(_BYTE *)(a1 + 39) = __len;
    if (!v12)
      goto LABEL_14;
  }
  memmove(v14, v13, v12);
LABEL_14:
  *((_BYTE *)v14 + v12) = 0;
  *(_QWORD *)a1 = &off_1E81A46C8;
  v17 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 56) = a2[2];
  *(_OWORD *)(a1 + 40) = v17;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v18 = *(_OWORD *)(a2 + 3);
  v19 = *(_OWORD *)(a2 + 5);
  v20 = *(_OWORD *)(a2 + 7);
  *(_WORD *)(a1 + 112) = *((_WORD *)a2 + 36);
  *(_OWORD *)(a1 + 80) = v19;
  *(_OWORD *)(a1 + 96) = v20;
  *(_OWORD *)(a1 + 64) = v18;
  v21 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 120) = v21;
  return a1;
}

void sub_1C5E5D5C0(size_t __len@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X8>)
{
  size_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t v13;
  void *__b[2];
  uint64_t v15;
  _QWORD v16[4];
  __int16 v17;
  _QWORD v18[4];
  __int16 v19;

  v5 = __len;
  if (__len >= 0x17)
  {
    if ((__len | 7) == 0x17)
      v7 = (__len & 0xFFFFFFF8) + 8;
    else
      v7 = __len | 7;
    v6 = (void **)operator new(v7 + 1);
    __b[1] = (void *)v5;
    v15 = v7 - 0x7FFFFFFFFFFFFFFFLL;
    __b[0] = v6;
    goto LABEL_8;
  }
  HIBYTE(v15) = __len;
  v6 = __b;
  if ((_DWORD)__len)
LABEL_8:
    memset(v6, 32, v5);
  *((_BYTE *)v6 + v5) = 0;
  v10 = *(_QWORD *)(a2 + 40);
  v9 = a2 + 40;
  v8 = v10;
  v11 = *(_BYTE *)(v9 + 23);
  v12 = v11;
  if (v11 >= 0)
    v8 = v9;
  v13 = v11 & 0x7F;
  if (v12 < 0)
    v13 = *(_QWORD *)(v9 + 8);
  v16[0] = __b;
  v16[2] = v8;
  v16[3] = v13;
  v17 = 1284;
  v18[0] = v16;
  v18[2] = "\n";
  v19 = 770;
  llvm::Twine::str((llvm::Twine *)v18, a3);
  if (SHIBYTE(v15) < 0)
    operator delete(__b[0]);
}

uint64_t sub_1C5E5D6C4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E81A46C8;
  v2 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  *(_QWORD *)a1 = off_1E81A4548;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1C5E5D734(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  int v12;
  _OWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  void *__p;
  void *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int16 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int16 v27;
  _DWORD v28[2];
  uint64_t v29;
  void *__dst[2];
  _BYTE v31[7];
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int16 v36;

  v5 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v5;
  v13[2] = *(_OWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v14 = v6;
  v15 = v7;
  v16 = *(_OWORD *)(a2 + 64);
  llvm::vfs::detail::NewInMemoryNodeInfo::makeStatus((llvm::vfs::detail::NewInMemoryNodeInfo *)v13, a1[1], (uint64_t)&__p);
  v8 = *a1;
  v9 = operator new();
  v11 = __p;
  v10 = v18;
  v28[0] = v19;
  *(_DWORD *)((char *)v28 + 3) = *(_DWORD *)((char *)&v19 + 3);
  v12 = SHIBYTE(v19);
  __p = 0;
  v18 = 0;
  v19 = 0;
  v27 = v23;
  v24 = v20;
  v25 = v21;
  v26 = v22;
  if (v12 < 0)
  {
    sub_1C47EBC30(__dst, v11, (unint64_t)v10);
  }
  else
  {
    __dst[0] = v11;
    __dst[1] = v10;
    *(_DWORD *)v31 = v28[0];
    *(_DWORD *)&v31[3] = *(_DWORD *)((char *)v28 + 3);
    v32 = v12;
  }
  v33 = v24;
  v34 = v25;
  v35 = v26;
  v36 = v27;
  v29 = 0;
  sub_1C5E5D474(v9, (uint64_t *)__dst, &v29);
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  if (v32 < 0)
    operator delete(__dst[0]);
  *(_QWORD *)v9 = off_1E81A4700;
  *(_QWORD *)(v9 + 128) = v8;
  *(_BYTE *)(v9 + 136) = 0;
  *(_DWORD *)(v9 + 144) = 0;
  *(_QWORD *)(v9 + 152) = std::system_category();
  if (v12 < 0)
    operator delete(v11);
  if (SHIBYTE(v19) < 0)
    operator delete(__p);
  *a3 = v9;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

uint64_t sub_1C5E5D8DC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E81A46C8;
  v2 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  *(_QWORD *)a1 = off_1E81A4548;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1C5E5D94C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E81A46C8;
  v2 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  *(_QWORD *)a1 = off_1E81A4548;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5E5D9CC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD v20[2];
  _QWORD v21[2];
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 136))
  {
    v4 = *(_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 128);
    v6 = *(_BYTE *)(a1 + 63);
    v7 = v6;
    if (v6 >= 0)
      v4 = a1 + 40;
    v8 = *(_QWORD *)(a1 + 48);
    v9 = v6 & 0x7F;
    if (v7 >= 0)
      v8 = v9;
    v20[0] = v4;
    v20[1] = v8;
    v10 = *(_QWORD *)(v5 + 24);
    if (!v10)
    {
      sub_1C485C2F0();
      sub_1C5E5DB08(v18, v19);
      return;
    }
    (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v10 + 48))(v21, v10, v20);
    *(_BYTE *)(a1 + 136) = 1;
    v11 = v22;
    if ((v22 & 1) != 0)
    {
      v14 = v21[1];
      *(_QWORD *)(a1 + 144) = v21[0];
      *(_QWORD *)(a1 + 152) = v14;
    }
    else
    {
      v12 = v21[0];
      v21[0] = 0;
      v13 = *(_QWORD *)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v12;
      if (v13)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        v11 = v22;
      }
      if ((v11 & 1) == 0)
      {
        v15 = v21[0];
        v21[0] = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      }
    }
  }
  if (*(_DWORD *)(a1 + 144))
  {
    v16 = *(_QWORD *)(a1 + 144);
    v17 = *(_QWORD *)(a1 + 152);
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)(a2 + 8) = v17;
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 120);
    *(_BYTE *)(a2 + 16) &= ~1u;
  }
  *(_QWORD *)a2 = v16;
}

void sub_1C5E5DB08(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  uint64_t v9;
  _OWORD v10[3];
  uint64_t v11;
  _QWORD *v12;
  __int128 v13;
  void *__p[2];
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int16 v19;
  _QWORD *v20;
  __int128 __dst;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int16 v26;

  v4 = 0;
  v5 = *(_OWORD *)(a1 + 16);
  v10[0] = *(_OWORD *)a1;
  v10[1] = v5;
  v10[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  v8 = *(_OWORD *)(a1 + 64);
  v11 = v6;
  v12 = v7;
  v13 = v8;
  if (v7)
    v4 = v7[2] - v7[1];
  llvm::vfs::detail::NewInMemoryNodeInfo::makeStatus((llvm::vfs::detail::NewInMemoryNodeInfo *)v10, v4, (uint64_t)__p);
  if (DWORD2(v18) == 3)
  {
    v9 = operator new();
    if (SHIBYTE(v15) < 0)
    {
      sub_1C47EBC30(&__dst, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      __dst = *(_OWORD *)__p;
      v22 = v15;
    }
    v23 = v16;
    v24 = v17;
    v25 = v18;
    v26 = v19;
    sub_1C5E5AA04(v9, (uint64_t *)&__dst);
    if (SHIBYTE(v22) < 0)
      operator delete((void *)__dst);
  }
  else
  {
    v9 = operator new();
    if (SHIBYTE(v15) < 0)
    {
      sub_1C47EBC30(&__dst, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      __dst = *(_OWORD *)__p;
      v22 = v15;
    }
    v23 = v16;
    v24 = v17;
    v25 = v18;
    v26 = v19;
    v20 = v7;
    sub_1C5E5D474(v9, (uint64_t *)&__dst, (uint64_t *)&v20);
    if (v20)
      (*(void (**)(_QWORD *))(*v20 + 8))(v20);
    if (SHIBYTE(v22) < 0)
      operator delete((void *)__dst);
    v7 = 0;
  }
  *a2 = v9;
  if (SHIBYTE(v15) < 0)
  {
    operator delete(__p[0]);
    if (!v7)
      return;
  }
  else if (!v7)
  {
    return;
  }
  (*(void (**)(_QWORD *))(*v7 + 8))(v7);
}

void sub_1C5E5DCDC(uint64_t **a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  size_t v5;
  const void *v6;
  uint64_t v7;
  void **p_dst;
  void **v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  void *v19;
  size_t v20;
  size_t v21;
  void **__dst;
  const void *v23;
  unint64_t v24;
  _QWORD v25[2];
  void *__src;
  size_t __len;
  unint64_t v28;
  int v29;

  v6 = (const void *)a2[2];
  v5 = a2[3];
  v7 = a2[7];
  a2[7] = 0;
  if (!v6)
  {
    v9 = 0;
    v10 = 0;
    __dst = 0;
    v23 = 0;
    v24 = 0;
    goto LABEL_12;
  }
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_29;
  if (v5 >= 0x17)
  {
    v11 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v11 = v5 | 7;
    v12 = v11 + 1;
    p_dst = (void **)operator new(v11 + 1);
    v23 = (const void *)v5;
    v24 = v12 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v24) = v5;
    p_dst = (void **)&__dst;
    if (!v5)
      goto LABEL_11;
  }
  memmove(p_dst, v6, v5);
LABEL_11:
  *((_BYTE *)p_dst + v5) = 0;
  v10 = HIBYTE(v24);
  v9 = __dst;
  v6 = v23;
LABEL_12:
  v13 = **a1;
  v14 = operator new();
  *(_DWORD *)(v14 + 8) = 3;
  v15 = (void **)&__dst;
  if (v10 < 0)
    v15 = v9;
  __src = 0;
  __len = 0;
  v16 = v10 & 0x7F;
  if (v10 < 0)
    v16 = (unint64_t)v6;
  v25[0] = v15;
  v25[1] = v16;
  v28 = v16;
  v29 = 0;
  llvm::sys::path::reverse_iterator::operator++((uint64_t)v25);
  v17 = __len;
  if (__len > 0x7FFFFFFFFFFFFFF7)
LABEL_29:
    abort();
  v18 = __src;
  if (__len >= 0x17)
  {
    v20 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v20 = __len | 7;
    v21 = v20 + 1;
    v19 = operator new(v20 + 1);
    *(_QWORD *)(v14 + 24) = v17;
    *(_QWORD *)(v14 + 32) = v21 | 0x8000000000000000;
    *(_QWORD *)(v14 + 16) = v19;
    goto LABEL_23;
  }
  v19 = (void *)(v14 + 16);
  *(_BYTE *)(v14 + 39) = __len;
  if (v17)
LABEL_23:
    memmove(v19, v18, v17);
  *((_BYTE *)v19 + v17) = 0;
  *(_QWORD *)v14 = off_1E81A4738;
  *(_QWORD *)(v14 + 40) = v13;
  if (SHIBYTE(v24) < 0)
    operator delete(__dst);
  *a3 = v14;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

uint64_t sub_1C5E5DEC0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81A4548;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1C5E5DEFC(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81A4548;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5E5DF48(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
}

void sub_1C5E5DF58(size_t __len@<X1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  std::string::size_type v5;
  std::string *p_b;
  uint64_t v7;
  std::string *v8;
  std::string::size_type v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  void *__p[2];
  char v14;
  std::string __b;
  std::string v16;

  v5 = __len;
  if (__len >= 0x17)
  {
    if ((__len | 7) == 0x17)
      v7 = (__len & 0xFFFFFFF8) + 8;
    else
      v7 = __len | 7;
    p_b = (std::string *)operator new(v7 + 1);
    __b.__r_.__value_.__l.__size_ = v5;
    __b.__r_.__value_.__r.__words[2] = v7 - 0x7FFFFFFFFFFFFFFFLL;
    __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    goto LABEL_8;
  }
  *((_BYTE *)&__b.__r_.__value_.__s + 23) = __len;
  p_b = &__b;
  if ((_DWORD)__len)
LABEL_8:
    memset(p_b, 32, v5);
  p_b->__r_.__value_.__s.__data_[v5] = 0;
  v8 = std::string::append(&__b, "HardLink to -> ");
  v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a2 + 40) + 24))(__p, *(_QWORD *)(a2 + 40), 0);
  if (v14 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if (v14 >= 0)
    v11 = v14 & 0x7F;
  else
    v11 = (std::string::size_type)__p[1];
  v12 = std::string::append(&v16, (const std::string::value_type *)v10, v11);
  *a3 = *v12;
  v12->__r_.__value_.__r.__words[0] = 0;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  if (v14 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__b.__r_.__value_.__l.__data_);
}

uint64_t sub_1C5E5E0A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  const void *v15;
  void *v16;
  unint64_t v17;
  int v18;
  size_t v19;
  const void *v20;
  const void *v21;
  void *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t result;
  void *__src;
  _OWORD v34[3];
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  void *__p;
  unint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int16 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int16 v48;
  _DWORD v49[2];
  _QWORD v50[2];
  const void *v51;
  unint64_t v52;
  uint64_t v53;
  int v54;

  v5 = 0;
  v6 = *(_OWORD *)(a2 + 16);
  v34[0] = *(_OWORD *)a2;
  v34[1] = v6;
  v34[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v35 = v8;
  v36 = v7;
  v37 = *(_OWORD *)(a2 + 64);
  v9 = *(uint64_t **)a1;
  v10 = *(const void ***)(a1 + 8);
  if (v7)
    v5 = *(_QWORD *)(v7 + 16) - *(_QWORD *)(v7 + 8);
  llvm::vfs::detail::NewInMemoryNodeInfo::makeStatus((llvm::vfs::detail::NewInMemoryNodeInfo *)v34, v5, (uint64_t)&__p);
  v11 = operator new();
  v12 = *v9;
  v13 = v9[1];
  v15 = *v10;
  v14 = (size_t)v10[1];
  v16 = __p;
  v17 = v39;
  v49[0] = v40;
  *(_DWORD *)((char *)v49 + 3) = *(_DWORD *)((char *)&v40 + 3);
  v18 = SHIBYTE(v40);
  v39 = 0;
  v40 = 0;
  __p = 0;
  v48 = v44;
  v46 = v42;
  v47 = v43;
  v45 = v41;
  *(_DWORD *)(v11 + 8) = 4;
  v51 = 0;
  v52 = 0;
  v50[0] = v12;
  v50[1] = v13;
  v53 = v13;
  v54 = 0;
  llvm::sys::path::reverse_iterator::operator++((uint64_t)v50);
  v19 = v52;
  if (v52 > 0x7FFFFFFFFFFFFFF7)
LABEL_27:
    abort();
  __src = v16;
  v20 = v15;
  v21 = v51;
  if (v52 >= 0x17)
  {
    v23 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v52 | 7) != 0x17)
      v23 = v52 | 7;
    v24 = a3;
    v25 = v23 + 1;
    v22 = operator new(v23 + 1);
    v26 = v25 | 0x8000000000000000;
    a3 = v24;
    *(_QWORD *)(v11 + 24) = v19;
    *(_QWORD *)(v11 + 32) = v26;
    *(_QWORD *)(v11 + 16) = v22;
    goto LABEL_10;
  }
  v22 = (void *)(v11 + 16);
  *(_BYTE *)(v11 + 39) = v52;
  if (v19)
LABEL_10:
    memmove(v22, v21, v19);
  *((_BYTE *)v22 + v19) = 0;
  *(_QWORD *)v11 = off_1E81A4768;
  v27 = (void *)(v11 + 40);
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_27;
  if (v14 >= 0x17)
  {
    v28 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v28 = v14 | 7;
    v29 = v28 + 1;
    v27 = operator new(v28 + 1);
    *(_QWORD *)(v11 + 48) = v14;
    *(_QWORD *)(v11 + 56) = v29 | 0x8000000000000000;
    *(_QWORD *)(v11 + 40) = v27;
    goto LABEL_18;
  }
  *(_BYTE *)(v11 + 63) = v14;
  if (v14)
LABEL_18:
    memmove(v27, v20, v14);
  *((_BYTE *)v27 + v14) = 0;
  if (v18 < 0)
  {
    sub_1C47EBC30((_BYTE *)(v11 + 64), __src, v17);
    v31 = v46;
    *(_OWORD *)(v11 + 88) = v45;
    *(_OWORD *)(v11 + 104) = v31;
    *(_OWORD *)(v11 + 120) = v47;
    *(_WORD *)(v11 + 136) = v48;
    operator delete(__src);
  }
  else
  {
    v30 = v46;
    *(_OWORD *)(v11 + 88) = v45;
    *(_QWORD *)(v11 + 64) = __src;
    *(_QWORD *)(v11 + 72) = v17;
    *(_DWORD *)(v11 + 80) = v49[0];
    *(_DWORD *)(v11 + 83) = *(_DWORD *)((char *)v49 + 3);
    *(_BYTE *)(v11 + 87) = v18;
    *(_OWORD *)(v11 + 104) = v30;
    *(_OWORD *)(v11 + 120) = v47;
    *(_WORD *)(v11 + 136) = v48;
  }
  if (SHIBYTE(v40) < 0)
    operator delete(__p);
  *a3 = v11;
  result = v36;
  if (v36)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  return result;
}

uint64_t sub_1C5E5E354(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81A4768;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  *(_QWORD *)a1 = off_1E81A4548;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1C5E5E3BC(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81A4768;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  *(_QWORD *)a1 = off_1E81A4548;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5E5E434@<Q0>(llvm::Twine *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  __n128 v9;

  v9 = *(__n128 *)(a2 + 88);
  v4 = *(_QWORD *)(a2 + 104);
  v5 = *(_QWORD *)(a2 + 120);
  v6 = *(_QWORD *)(a2 + 112);
  v7 = *(_QWORD *)(a2 + 128);
  llvm::Twine::str(this, (_QWORD *)a3);
  result = v9;
  *(__n128 *)(a3 + 24) = v9;
  *(_QWORD *)(a3 + 40) = v4;
  *(_QWORD *)(a3 + 48) = v6;
  *(_QWORD *)(a3 + 56) = v5;
  *(_QWORD *)(a3 + 64) = v7;
  *(_WORD *)(a3 + 72) = 0;
  return result;
}

void sub_1C5E5E4A4(size_t __len@<X1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  std::string::size_type v5;
  std::string *p_b;
  uint64_t v7;
  std::string *v8;
  std::string::size_type v9;
  const std::string::value_type *v10;
  uint64_t v11;
  const std::string::value_type *v12;
  char v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string::size_type v17;
  std::string *v18;
  std::string __b;
  std::string v20;

  v5 = __len;
  if (__len >= 0x17)
  {
    if ((__len | 7) == 0x17)
      v7 = (__len & 0xFFFFFFF8) + 8;
    else
      v7 = __len | 7;
    p_b = (std::string *)operator new(v7 + 1);
    __b.__r_.__value_.__l.__size_ = v5;
    __b.__r_.__value_.__r.__words[2] = v7 - 0x7FFFFFFFFFFFFFFFLL;
    __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    goto LABEL_8;
  }
  *((_BYTE *)&__b.__r_.__value_.__s + 23) = __len;
  p_b = &__b;
  if ((_DWORD)__len)
LABEL_8:
    memset(p_b, 32, v5);
  p_b->__r_.__value_.__s.__data_[v5] = 0;
  v8 = std::string::append(&__b, "SymbolicLink to -> ");
  v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v12 = *(const std::string::value_type **)(a2 + 40);
  v11 = a2 + 40;
  v10 = v12;
  v13 = *(_BYTE *)(v11 + 23);
  v14 = v13;
  if (v13 >= 0)
    v15 = (const std::string::value_type *)v11;
  else
    v15 = v10;
  v16 = v13 & 0x7F;
  if (v14 >= 0)
    v17 = v16;
  else
    v17 = *(_QWORD *)(v11 + 8);
  v18 = std::string::append(&v20, v15, v17);
  *a3 = *v18;
  v18->__r_.__value_.__r.__words[0] = 0;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__b.__r_.__value_.__l.__data_);
}

void sub_1C5E5E5C4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E81A4798;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C5E5E5D4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E81A4798;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5E5E604(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1C5E5E614(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81A47D0;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  *(_QWORD *)a1 = off_1E81A40E0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1C5E5E66C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81A47D0;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  *(_QWORD *)a1 = off_1E81A40E0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5E5E6D4(uint64_t a1)
{
  _QWORD *v1;
  BOOL v2;

  v1 = *(_QWORD **)(a1 + 40);
  do
  {
    *(_QWORD *)(a1 + 40) = ++v1;
    if (*v1)
      v2 = *v1 == -8;
    else
      v2 = 1;
  }
  while (v2);
  sub_1C5E5E710(a1);
  std::system_category();
  return 0;
}

void sub_1C5E5E710(uint64_t a1)
{
  uint64_t v2;
  char v3;
  const void *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  void **v18;
  size_t v19;
  void *v20;
  _QWORD *p_dst;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;
  _QWORD *__dst;
  __int128 v28;
  void **v29;
  __int16 v30;
  _QWORD *v31;
  __int16 v32;
  _QWORD *v33;
  __int16 v34;
  __int128 v35;
  __int16 v36;
  void *__src;
  __int128 __len;
  _QWORD v39[33];

  v39[32] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 != *(_QWORD *)(a1 + 48))
  {
    v3 = *(_BYTE *)(a1 + 79);
    if (v3 >= 0)
      v4 = (const void *)(a1 + 56);
    else
      v4 = *(const void **)(a1 + 56);
    if (v3 >= 0)
      v5 = v3 & 0x7F;
    else
      v5 = *(_QWORD *)(a1 + 64);
    __src = v39;
    __len = xmmword_1C64638F0;
    if (v5 >= 0x101)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__src, v39, v5, 1);
      v7 = __src;
      v6 = __len;
    }
    else
    {
      v6 = 0;
      if (!v5)
        goto LABEL_12;
      v7 = v39;
    }
    memcpy((char *)v7 + v6, v4, v5);
    v6 = __len;
    v2 = *(_QWORD *)(a1 + 40);
LABEL_12:
    *(_QWORD *)&__len = v6 + v5;
    v8 = *(_QWORD *)(*(_QWORD *)v2 + 8);
    v11 = *(_QWORD *)(v8 + 16);
    v9 = v8 + 16;
    v10 = v11;
    v12 = *(_BYTE *)(v9 + 23);
    v13 = v12;
    if (v12 >= 0)
      v10 = v9;
    v14 = *(_QWORD *)(v9 + 8);
    v15 = v12 & 0x7F;
    if (v13 >= 0)
      v14 = v15;
    v36 = 261;
    *(_QWORD *)&v35 = v10;
    *((_QWORD *)&v35 + 1) = v14;
    v34 = 257;
    v32 = 257;
    v30 = 257;
    llvm::sys::path::append(&__src, 0, (_QWORD **)&v35, &v33, &v31, &v29);
    v16 = *(int *)(*(_QWORD *)(**(_QWORD **)(a1 + 40) + 8) + 8);
    if (v16 > 4)
      v17 = 9;
    else
      v17 = dword_1C8672738[v16];
    v19 = __len;
    if ((unint64_t)__len >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v20 = __src;
    if ((unint64_t)__len >= 0x17)
    {
      v22 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if (((unint64_t)__len | 7) != 0x17)
        v22 = __len | 7;
      v23 = v22 + 1;
      p_dst = operator new(v22 + 1);
      *(_QWORD *)&v28 = v19;
      *((_QWORD *)&v28 + 1) = v23 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v28) = __len;
      p_dst = &__dst;
      if (!(_QWORD)__len)
        goto LABEL_30;
    }
    memmove(p_dst, v20, v19);
LABEL_30:
    *((_BYTE *)p_dst + v19) = 0;
    v24 = __dst;
    *(_QWORD *)&v35 = v28;
    *(_QWORD *)((char *)&v35 + 7) = *(_QWORD *)((char *)&v28 + 7);
    v25 = HIBYTE(v28);
    if (*(char *)(a1 + 31) < 0)
      operator delete(*(void **)(a1 + 8));
    v26 = v35;
    *(_QWORD *)(a1 + 8) = v24;
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)&v35 + 7);
    *(_BYTE *)(a1 + 31) = v25;
    *(_DWORD *)(a1 + 32) = v17;
    if (__src != v39)
      free(__src);
    return;
  }
  v18 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v18);
  *v18 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 9;
}

void sub_1C5E5E990(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E81A47F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C5E5E9A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E81A47F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5E5E9D0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1C5E5E9E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  char v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t first_of;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  const void *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  const llvm::Twine *v20;
  size_t v21;
  void *v22;
  _QWORD *p_dst;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  char v28;
  uint64_t v29;
  _QWORD *__dst;
  __int128 v31;
  void **v32;
  __int16 v33;
  _QWORD *v34;
  __int16 v35;
  _QWORD *v36;
  __int16 v37;
  __int128 v38;
  __int16 v39;
  void *__src;
  __int128 __len;
  _QWORD v42[2];
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 72);
  v5 = *(void **)(v2 + 8);
  v3 = v2 + 8;
  v4 = v5;
  v6 = *(_BYTE *)(v3 + 23);
  if (v6 >= 0)
    v7 = (void *)v3;
  else
    v7 = v4;
  v8 = *(_QWORD *)(v3 + 8);
  if (v6 >= 0)
    v9 = v6 & 0x7F;
  else
    v9 = v8;
  __src = v7;
  *(_QWORD *)&__len = v9;
  first_of = llvm::StringRef::find_first_of(&__src, "/\\", 2, 0);
  if (first_of == -1)
  {
    v11 = 0;
  }
  else if (*((_BYTE *)v7 + first_of) == 47)
  {
    v11 = 1;
  }
  else
  {
    v11 = 3;
  }
  v42[0] = 0;
  __src = v7;
  __len = v9;
  v42[1] = v9;
  v43 = v11;
  llvm::sys::path::reverse_iterator::operator++((uint64_t)&__src);
  v12 = *((_QWORD *)&__len + 1);
  v13 = v42[0];
  v14 = *(_BYTE *)(a1 + 63);
  if (v14 >= 0)
    v15 = (const void *)(a1 + 40);
  else
    v15 = *(const void **)(a1 + 40);
  if (v14 >= 0)
    v16 = v14 & 0x7F;
  else
    v16 = *(_QWORD *)(a1 + 48);
  __src = v42;
  __len = xmmword_1C85F20B0;
  if (v16 >= 0x81)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__src, v42, v16, 1);
    v19 = __src;
    v17 = __len;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    v19 = v42;
    if (!v16)
      goto LABEL_21;
  }
  memcpy((char *)v19 + v17, v15, v16);
  v18 = __len;
LABEL_21:
  *(_QWORD *)&__len = v18 + v16;
  v20 = (const llvm::Twine *)*(unsigned int *)(a1 + 64);
  v39 = 261;
  *(_QWORD *)&v38 = v12;
  *((_QWORD *)&v38 + 1) = v13;
  v37 = 257;
  v35 = 257;
  v33 = 257;
  llvm::sys::path::append(&__src, v20, (_QWORD **)&v38, &v36, &v34, &v32);
  v21 = __len;
  if ((unint64_t)__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v22 = __src;
  if ((unint64_t)__len >= 0x17)
  {
    v24 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if (((unint64_t)__len | 7) != 0x17)
      v24 = __len | 7;
    v25 = v24 + 1;
    p_dst = operator new(v24 + 1);
    *(_QWORD *)&v31 = v21;
    *((_QWORD *)&v31 + 1) = v25 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_28;
  }
  HIBYTE(v31) = __len;
  p_dst = &__dst;
  if ((_QWORD)__len)
LABEL_28:
    memmove(p_dst, v22, v21);
  *((_BYTE *)p_dst + v21) = 0;
  v26 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 32);
  v27 = __dst;
  *(_QWORD *)&v38 = v31;
  *(_QWORD *)((char *)&v38 + 7) = *(_QWORD *)((char *)&v31 + 7);
  v28 = HIBYTE(v31);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  v29 = v38;
  *(_QWORD *)(a1 + 8) = v27;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)&v38 + 7);
  *(_BYTE *)(a1 + 31) = v28;
  *(_DWORD *)(a1 + 32) = v26;
  if (__src != v42)
    free(__src);
}

uint64_t sub_1C5E5EC54(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)a1 = off_1E81A4830;
  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  *(_QWORD *)a1 = off_1E81A40E0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1C5E5ECE4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)a1 = off_1E81A4830;
  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  *(_QWORD *)a1 = off_1E81A40E0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5E5ED84(uint64_t a1)
{
  BOOL v2;
  BOOL v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void **v7;
  uint64_t v9;
  std::__shared_weak_count *v10;
  _QWORD v11[2];

  LODWORD(v11[0]) = 0;
  v11[1] = std::system_category();
  sub_1C5DF267C((_QWORD *)(a1 + 72), v11);
  if (LODWORD(v11[0]))
    goto LABEL_7;
  v9 = 0;
  v10 = 0;
  v2 = sub_1C5DF3038((uint64_t *)(a1 + 72), &v9);
  v3 = v2;
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (v3)
        goto LABEL_7;
LABEL_12:
      sub_1C5E5E9E0(a1);
      return v11[0];
    }
  }
  if (!v2)
    goto LABEL_12;
LABEL_7:
  v7 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v7);
  *v7 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 9;
  return v11[0];
}

uint64_t sub_1C5E5EE5C(uint64_t a1, char a2)
{
  uint64_t *v3;
  char v4;
  const void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void **v20;
  size_t v21;
  void *v22;
  _QWORD *p_dst;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char v27;
  uint64_t v28;
  _QWORD *__dst;
  __int128 v31;
  void **v32;
  __int16 v33;
  _QWORD *v34;
  __int16 v35;
  _QWORD *v36;
  __int16 v37;
  __int128 v38;
  __int16 v39;
  void *__src;
  __int128 __len;
  _QWORD v42[17];

  v42[16] = *MEMORY[0x1E0C80C00];
  v3 = *(uint64_t **)(a1 + 64);
  if ((a2 & 1) == 0)
    *(_QWORD *)(a1 + 64) = ++v3;
  if (v3 != *(uint64_t **)(a1 + 72))
  {
    v4 = *(_BYTE *)(a1 + 63);
    if (v4 >= 0)
      v5 = (const void *)(a1 + 40);
    else
      v5 = *(const void **)(a1 + 40);
    if (v4 >= 0)
      v6 = v4 & 0x7F;
    else
      v6 = *(_QWORD *)(a1 + 48);
    __src = v42;
    __len = xmmword_1C85F20B0;
    if (v6 >= 0x81)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__src, v42, v6, 1);
      v9 = __src;
      v7 = __len;
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v9 = v42;
      if (!v6)
        goto LABEL_13;
    }
    memcpy((char *)v9 + v7, v5, v6);
    v8 = __len;
    v3 = *(uint64_t **)(a1 + 64);
LABEL_13:
    *(_QWORD *)&__len = v8 + v6;
    v10 = *v3;
    v13 = *(_QWORD *)(v10 + 16);
    v11 = v10 + 16;
    v12 = v13;
    v14 = *(_BYTE *)(v11 + 23);
    v15 = v14;
    if (v14 >= 0)
      v12 = v11;
    v16 = *(_QWORD *)(v11 + 8);
    v17 = v14 & 0x7F;
    if (v15 >= 0)
      v16 = v17;
    v39 = 261;
    *(_QWORD *)&v38 = v12;
    *((_QWORD *)&v38 + 1) = v16;
    v37 = 257;
    v35 = 257;
    v33 = 257;
    llvm::sys::path::append(&__src, 0, (_QWORD **)&v38, &v36, &v34, &v32);
    v18 = *(int *)(**(_QWORD **)(a1 + 64) + 8);
    if (v18 > 2)
      v19 = 9;
    else
      v19 = dword_1C867274C[v18];
    v21 = __len;
    if ((unint64_t)__len >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v22 = __src;
    if ((unint64_t)__len >= 0x17)
    {
      v24 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if (((unint64_t)__len | 7) != 0x17)
        v24 = __len | 7;
      v25 = v24 + 1;
      p_dst = operator new(v24 + 1);
      *(_QWORD *)&v31 = v21;
      *((_QWORD *)&v31 + 1) = v25 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v31) = __len;
      p_dst = &__dst;
      if (!(_QWORD)__len)
        goto LABEL_31;
    }
    memmove(p_dst, v22, v21);
LABEL_31:
    *((_BYTE *)p_dst + v21) = 0;
    v26 = __dst;
    *(_QWORD *)&v38 = v31;
    *(_QWORD *)((char *)&v38 + 7) = *(_QWORD *)((char *)&v31 + 7);
    v27 = HIBYTE(v31);
    if (*(char *)(a1 + 31) < 0)
      operator delete(*(void **)(a1 + 8));
    v28 = v38;
    *(_QWORD *)(a1 + 8) = v26;
    *(_QWORD *)(a1 + 16) = v28;
    *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)&v38 + 7);
    *(_BYTE *)(a1 + 31) = v27;
    *(_DWORD *)(a1 + 32) = v19;
    if (__src != v42)
      free(__src);
    goto LABEL_35;
  }
  v20 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v20);
  *v20 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 9;
LABEL_35:
  std::system_category();
  return 0;
}

uint64_t sub_1C5E5F0F4(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E81A4890;
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  *(_QWORD *)a1 = off_1E81A40E0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_1C5E5F14C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E81A48B8;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1C5E5F1A0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E81A48B8;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5E5F204@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;

  *(_BYTE *)(a2 + 80) &= ~1u;
  if (*(char *)(a1 + 39) < 0)
  {
    sub_1C47EBC30((_BYTE *)a2, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 32);
  }
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 56);
  result = *(__n128 *)(a1 + 72);
  *(__n128 *)(a2 + 56) = result;
  *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 88);
  return result;
}

uint64_t sub_1C5E5F27C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_1C5E5F28C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_1C5E5F29C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
}

double sub_1C5E5F2AC(uint64_t a1, llvm::Twine *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  double result;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int16 v16;

  v2 = a1 + 40;
  v10 = *(_OWORD *)(a1 + 40);
  v3 = a1 + 16;
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 80);
  llvm::Twine::str(this, &v11);
  v13 = v10;
  *(_QWORD *)&v14 = v4;
  *((_QWORD *)&v14 + 1) = v6;
  *(_QWORD *)&v15 = v5;
  *((_QWORD *)&v15 + 1) = v7;
  v16 = 0;
  if (*(char *)(v2 - 1) < 0)
    operator delete(*(void **)v3);
  *(_OWORD *)v3 = v11;
  *(_QWORD *)(v3 + 16) = v12;
  v8 = v14;
  *(_OWORD *)v2 = v13;
  *(_OWORD *)(v2 + 16) = v8;
  result = *(double *)&v15;
  *(_OWORD *)(v2 + 32) = v15;
  *(_WORD *)(v2 + 48) = v16;
  return result;
}

char *sub_1C5E5F36C(void **a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v10;
  _BYTE *v11;
  size_t v12;
  char *v13;
  char v14;
  const void *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  size_t v22;
  char *v23;
  _QWORD *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  char *v30;
  void **v31;
  void **v32;
  __int128 v33;
  __int128 v34;
  void **v35;
  uint64_t v37;

  v4 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    goto LABEL_40;
  if (0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v5)
    v5 = 0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  v10 = (unint64_t)(0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)) >= 0x249249249249249
      ? 0x492492492492492
      : v5;
  if (v10)
  {
    if (v10 > 0x492492492492492)
      sub_1C4764EE4();
    v11 = operator new(56 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = *(_QWORD *)(a2 + 8);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
LABEL_40:
    abort();
  v13 = &v11[56 * v4];
  v14 = *a4;
  v15 = *(const void **)a2;
  if (v12 >= 0x17)
  {
    v17 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v17 = v12 | 7;
    v37 = v4;
    v18 = a3;
    v19 = v14;
    v20 = v17 + 1;
    v16 = (char *)operator new(v17 + 1);
    v21 = v20 | 0x8000000000000000;
    v14 = v19;
    a3 = v18;
    v4 = v37;
    *((_QWORD *)v13 + 1) = v12;
    *((_QWORD *)v13 + 2) = v21;
    *(_QWORD *)v13 = v16;
    goto LABEL_18;
  }
  v13[23] = v12;
  v16 = &v11[56 * v4];
  if (v12)
LABEL_18:
    memmove(v16, v15, v12);
  v16[v12] = 0;
  v22 = *(_QWORD *)(a3 + 8);
  if (v22 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_40;
  v23 = &v11[56 * v4];
  v24 = v23 + 24;
  v25 = *(const void **)a3;
  if (v22 >= 0x17)
  {
    v26 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v26 = v22 | 7;
    v27 = v26 + 1;
    v28 = operator new(v26 + 1);
    v24[1] = v22;
    v24[2] = v27 | 0x8000000000000000;
    *v24 = v28;
    v24 = v28;
    goto LABEL_26;
  }
  v23[47] = v22;
  if (v22)
LABEL_26:
    memmove(v24, v25, v22);
  v29 = &v11[56 * v10];
  *((_BYTE *)v24 + v22) = 0;
  v11[56 * v4 + 48] = v14;
  v30 = v13 + 56;
  v31 = (void **)*a1;
  v32 = (void **)a1[1];
  if (v32 == *a1)
  {
    *a1 = v13;
    a1[1] = v30;
    a1[2] = v29;
  }
  else
  {
    do
    {
      v33 = *(_OWORD *)(v32 - 7);
      *((_QWORD *)v13 - 5) = *(v32 - 5);
      *(_OWORD *)(v13 - 56) = v33;
      *(v32 - 6) = 0;
      *(v32 - 5) = 0;
      *(v32 - 7) = 0;
      v34 = *((_OWORD *)v32 - 2);
      *((_QWORD *)v13 - 2) = *(v32 - 2);
      *((_OWORD *)v13 - 2) = v34;
      *(v32 - 3) = 0;
      *(v32 - 2) = 0;
      *(v32 - 4) = 0;
      *(v13 - 8) = *((_BYTE *)v32 - 8);
      v13 -= 56;
      v32 -= 7;
    }
    while (v32 != v31);
    v32 = (void **)*a1;
    v35 = (void **)a1[1];
    *a1 = v13;
    a1[1] = v30;
    a1[2] = v29;
    while (v35 != v32)
    {
      if (*((char *)v35 - 9) < 0)
        operator delete(*(v35 - 4));
      if (*((char *)v35 - 33) < 0)
        operator delete(*(v35 - 7));
      v35 -= 7;
    }
  }
  if (v32)
    operator delete(v32);
  return v30;
}

void sub_1C5E5F634(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  __int128 v19;
  char v20;
  __int128 v21;
  void *v22;
  uint64_t v23;
  char v24;
  BOOL v25;
  const void *v26;
  size_t v27;
  size_t v28;
  const void *v29;
  size_t v30;
  size_t v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  __int128 v35;
  const void *v36;
  void *v37;
  void **v38;
  _QWORD *v39;
  size_t v40;
  size_t v41;
  int v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  size_t v46;
  const void *v47;
  size_t v48;
  int v49;
  BOOL v50;
  unint64_t v51;
  size_t v52;
  const void *v53;
  size_t v54;
  int v55;
  BOOL v56;
  unint64_t v57;
  const void *v58;
  char v59;
  uint64_t v60;
  void **v61;
  char v62;
  char v63;
  uint64_t v64;
  __int128 v65;
  void **v66;
  void *v67;
  char *v68;
  size_t v69;
  char *v70;
  size_t v71;
  int v72;
  BOOL v73;
  char *v74;
  size_t v75;
  char *v76;
  size_t v77;
  int v78;
  _BOOL4 v79;
  void **v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  void **v84;
  __int128 v85;
  BOOL v86;
  BOOL v87;
  uint64_t v88;
  __int128 v89;
  const void *v90;
  char v91;
  BOOL v92;
  const void *v93;
  size_t v94;
  size_t v95;
  void *v96;
  void **v97;
  size_t v98;
  int v99;
  BOOL v100;
  const void **v101;
  char v102;
  BOOL v103;
  const void *v104;
  size_t v105;
  size_t v106;
  size_t v107;
  int v108;
  BOOL v109;
  unint64_t v110;
  char v111;
  BOOL v112;
  const void *v113;
  size_t v114;
  size_t v115;
  size_t v116;
  int v117;
  BOOL v118;
  unint64_t v119;
  const void **v120;
  char v121;
  BOOL v122;
  const void *v123;
  size_t v124;
  size_t v125;
  size_t v126;
  int v127;
  BOOL v128;
  const void *v129;
  char v130;
  uint64_t v131;
  void **v132;
  char v133;
  char v134;
  uint64_t v135;
  __int128 v136;
  void *v137;
  void **v138;
  _QWORD *v139;
  char v140;
  BOOL v141;
  const void *v142;
  size_t v143;
  size_t v144;
  size_t v145;
  int v146;
  _BOOL4 v147;
  const void **v148;
  char v149;
  BOOL v150;
  const void *v151;
  size_t v152;
  size_t v153;
  size_t v154;
  int v155;
  BOOL v156;
  void **v157;
  void **v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  void **v162;
  __int128 v163;
  char v164;
  int v165;
  const void *v166;
  const void *v167;
  void **v168;
  size_t v169;
  size_t v170;
  size_t v171;
  const void *v172;
  unint64_t v173;
  uint64_t v174;
  const void **v175;
  const void **v176;
  char v177;
  BOOL v178;
  const void *v179;
  size_t v180;
  size_t v181;
  size_t v182;
  const void *v183;
  size_t v184;
  int v185;
  _BOOL4 v186;
  __int128 v187;
  uint64_t v188;
  uint64_t v189;
  void **v190;
  void **v191;
  uint64_t v192;
  char v193;
  const void *v194;
  size_t v195;
  void *v196;
  void **v197;
  size_t v198;
  int v199;
  BOOL v200;
  uint64_t v201;
  void **v202;
  __int128 v203;
  __int128 v204;
  int64_t v205;
  int64_t v206;
  int64_t v207;
  uint64_t v208;
  uint64_t v209;
  char v210;
  int v211;
  const void *v212;
  size_t v213;
  size_t v214;
  size_t v215;
  const void *v216;
  size_t v217;
  int v218;
  _BOOL4 v219;
  uint64_t v220;
  char v221;
  BOOL v222;
  const void *v223;
  size_t v224;
  size_t v225;
  size_t v226;
  const void *v227;
  size_t v228;
  int v229;
  BOOL v230;
  __int128 v231;
  unint64_t v232;
  __int128 v233;
  uint64_t v234;
  __int128 v235;
  void **v236;
  __int128 v237;
  uint64_t v238;
  char v239;
  int v240;
  const void *v241;
  size_t v242;
  size_t v243;
  size_t v244;
  const void *v245;
  size_t v246;
  int v247;
  _BOOL4 v248;
  void **v249;
  void *v250;
  size_t v251;
  const void *v252;
  size_t v253;
  int v254;
  _BOOL4 v255;
  void **v256;
  __int128 v257;
  __int128 v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char v265;
  int v266;
  const void *v267;
  size_t v268;
  size_t v269;
  size_t v270;
  const void *v271;
  size_t v272;
  int v273;
  _BOOL4 v274;
  __int128 v275;
  void **v276;
  __int128 v277;
  void **v278;
  void **v279;
  int v280;
  __int128 v281;
  __int128 v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  char v286;
  BOOL v287;
  const void *v288;
  size_t v289;
  size_t v290;
  size_t v291;
  const void *v292;
  size_t v293;
  int v294;
  _BOOL4 v295;
  __int128 v296;
  __int128 v297;
  uint64_t v298;
  __int128 v299;
  void **v300;
  __int128 v301;
  void **v302;
  void *v303;
  size_t v304;
  const void *v305;
  size_t v306;
  int v307;
  BOOL v308;
  void **v309;
  __int128 v310;
  __int128 v311;
  BOOL v312;
  uint64_t v313;
  _BYTE *v314;
  const void **v315;
  char v316;
  BOOL v317;
  const void *v318;
  size_t v319;
  size_t v320;
  const void **v321;
  size_t v322;
  const void *v323;
  size_t v324;
  int v325;
  _BOOL4 v326;
  __int128 v327;
  _BYTE *v328;
  void **v329;
  void **v330;
  _BYTE *v331;
  char v332;
  int v333;
  _BYTE *v334;
  size_t v335;
  size_t v336;
  void *v337;
  void **v338;
  size_t v339;
  int v340;
  BOOL v341;
  void **v342;
  void **v343;
  __int128 v344;
  __int128 v345;
  size_t v346;
  int v347;
  _BOOL4 v348;
  uint64_t v349;
  void **v350;
  char v351;
  char v352;
  uint64_t v353;
  __int128 v354;
  void *v355;
  _QWORD *v356;
  _QWORD *v357;
  _QWORD *v358;
  void *v360;
  uint64_t v361;
  char v362;
  uint64_t v363;
  char v364;
  uint64_t v365;
  void **v366;
  char v367;
  unint64_t v369;
  _BYTE v370[15];
  _BYTE v371[15];
  _BYTE v372[15];
  __int128 v373;
  _BYTE v374[15];
  _BYTE v375[15];
  _BYTE v376[15];
  _BYTE v377[15];
  void *v378[2];
  const void *v379;
  __int128 __p;
  const void *v381;
  char v382;
  uint64_t v383;

  v383 = *MEMORY[0x1E0C80C00];
LABEL_2:
  v6 = a2;
  v366 = (void **)(a2 - 56);
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = v6 - v7;
    v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - v7) >> 3);
    v369 = v7;
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        v164 = *(_BYTE *)(v7 + 23);
        v165 = v164;
        v166 = *(const void **)v7;
        if (v164 >= 0)
          v167 = (const void *)v7;
        else
          v167 = *(const void **)v7;
        v168 = (void **)(v7 + 8);
        v169 = v164 & 0x7F;
        if (v165 >= 0)
          v170 = v169;
        else
          v170 = *(_QWORD *)(v7 + 8);
        if (*(char *)(a2 - 33) < 0)
        {
          v172 = *(const void **)(a2 - 56);
          v171 = *(_QWORD *)(a2 - 48);
        }
        else
        {
          v171 = *(unsigned __int8 *)(a2 - 33);
          v172 = (const void *)(a2 - 56);
        }
        if (v170 >= v171)
          v346 = v171;
        else
          v346 = v170;
        v347 = memcmp(v172, v167, v346);
        v348 = v171 < v170;
        if (v347)
          v348 = v347 < 0;
        if (v348)
        {
          v378[0] = *v168;
          *(void **)((char *)v378 + 7) = *(void **)((char *)v168 + 7);
          *(_QWORD *)v369 = 0;
          *(_QWORD *)(v369 + 8) = 0;
          *(_QWORD *)(v369 + 16) = 0;
          v350 = (void **)(v369 + 24);
          v349 = *(_QWORD *)(v369 + 24);
          *(_QWORD *)&v377[7] = *(_QWORD *)(v369 + 39);
          *(_QWORD *)v377 = *(_QWORD *)(v369 + 32);
          v351 = *(_BYTE *)(v369 + 47);
          *(_QWORD *)(v369 + 32) = 0;
          *(_QWORD *)(v369 + 40) = 0;
          *(_QWORD *)(v369 + 24) = 0;
          v352 = *(_BYTE *)(v369 + 48);
          v353 = *(_QWORD *)(a2 - 40);
          *(_OWORD *)v369 = *(_OWORD *)v366;
          *(_QWORD *)(v369 + 16) = v353;
          *(_BYTE *)(a2 - 33) = 0;
          *(_BYTE *)(a2 - 56) = 0;
          if (*(char *)(v369 + 47) < 0)
            operator delete(*v350);
          v354 = *(_OWORD *)(a2 - 32);
          *(_QWORD *)(v369 + 40) = *(_QWORD *)(a2 - 16);
          *(_OWORD *)v350 = v354;
          *(_BYTE *)(a2 - 9) = 0;
          *(_BYTE *)(a2 - 32) = 0;
          *(_BYTE *)(v369 + 48) = *(_BYTE *)(a2 - 8);
          if (*(char *)(a2 - 33) < 0)
            operator delete(*v366);
          *(_QWORD *)(a2 - 56) = v166;
          v355 = v378[0];
          *(void **)(a2 - 41) = *(void **)((char *)v378 + 7);
          *(_QWORD *)(a2 - 48) = v355;
          *(_BYTE *)(a2 - 33) = v165;
          if (*(char *)(a2 - 9) < 0)
            operator delete(*(void **)(a2 - 32));
          *(_QWORD *)(a2 - 32) = v349;
          *(_QWORD *)(a2 - 17) = *(_QWORD *)&v377[7];
          *(_QWORD *)(a2 - 24) = *(_QWORD *)v377;
          *(_BYTE *)(a2 - 9) = v351;
          *(_BYTE *)(a2 - 8) = v352;
        }
        return;
      case 3:
        sub_1C5E615DC((char *)v7, (char *)(v7 + 56), (const void **)v366);
        return;
      case 4:
        sub_1C5E620F8((uint64_t *)v7, (uint64_t *)(v7 + 56), (__int128 *)(v7 + 112), (__int128 *)v366);
        return;
      case 5:
        sub_1C5E60FF0((uint64_t *)v7, (__int128 *)(v7 + 56), (uint64_t *)(v7 + 112), (uint64_t *)(v7 + 168), (__int128 *)v366);
        return;
      default:
        if (v8 > 1343)
        {
          if (!a3)
          {
            if (v7 != v6)
            {
              v205 = (unint64_t)(v9 - 2) >> 1;
              v206 = v205;
              do
              {
                v207 = v206;
                if (v205 >= v206)
                {
                  v208 = (2 * v206) | 1;
                  v209 = a1 + 56 * v208;
                  if (2 * v206 + 2 < v9)
                  {
                    v210 = *(_BYTE *)(v209 + 79);
                    v211 = v210;
                    if (v210 >= 0)
                      v212 = (const void *)(v209 + 56);
                    else
                      v212 = *(const void **)(v209 + 56);
                    v213 = v210 & 0x7F;
                    if (v211 >= 0)
                      v214 = v213;
                    else
                      v214 = *(_QWORD *)(v209 + 64);
                    if (*(char *)(v209 + 23) < 0)
                    {
                      v216 = *(const void **)v209;
                      v215 = *(_QWORD *)(v209 + 8);
                    }
                    else
                    {
                      v215 = *(unsigned __int8 *)(v209 + 23);
                      v216 = (const void *)v209;
                    }
                    if (v214 >= v215)
                      v217 = v215;
                    else
                      v217 = v214;
                    v218 = memcmp(v216, v212, v217);
                    v219 = v215 < v214;
                    if (v218)
                      v219 = v218 < 0;
                    if (v219)
                    {
                      v209 += 56;
                      v208 = 2 * v207 + 2;
                    }
                    a1 = v369;
                  }
                  v220 = a1 + 56 * v207;
                  v221 = *(_BYTE *)(v220 + 23);
                  v222 = v221 < 0;
                  if (v221 >= 0)
                    v223 = (const void *)(a1 + 56 * v207);
                  else
                    v223 = *(const void **)v220;
                  v224 = v221 & 0x7F;
                  if (v222)
                    v225 = *(_QWORD *)(v220 + 8);
                  else
                    v225 = v224;
                  if (*(char *)(v209 + 23) < 0)
                  {
                    v227 = *(const void **)v209;
                    v226 = *(_QWORD *)(v209 + 8);
                  }
                  else
                  {
                    v226 = *(unsigned __int8 *)(v209 + 23);
                    v227 = (const void *)v209;
                  }
                  if (v225 >= v226)
                    v228 = v226;
                  else
                    v228 = v225;
                  v229 = memcmp(v227, v223, v228);
                  v230 = v226 < v225;
                  if (v229)
                    v230 = v229 < 0;
                  a1 = v369;
                  if (!v230)
                  {
                    v231 = *(_OWORD *)v220;
                    v379 = *(const void **)(v220 + 16);
                    *(_OWORD *)v378 = v231;
                    *(_QWORD *)(v220 + 8) = 0;
                    *(_QWORD *)(v220 + 16) = 0;
                    *(_QWORD *)v220 = 0;
                    v232 = v369 + 56 * v207;
                    v233 = *(_OWORD *)(v232 + 24);
                    v381 = *(const void **)(v232 + 40);
                    __p = v233;
                    *(_QWORD *)(v232 + 32) = 0;
                    *(_QWORD *)(v232 + 40) = 0;
                    *(_QWORD *)(v232 + 24) = 0;
                    v382 = *(_BYTE *)(v232 + 48);
                    do
                    {
                      v234 = v209;
                      if (*(char *)(v220 + 23) < 0)
                        operator delete(*(void **)v220);
                      v235 = *(_OWORD *)v209;
                      *(_QWORD *)(v220 + 16) = *(_QWORD *)(v209 + 16);
                      *(_OWORD *)v220 = v235;
                      *(_BYTE *)(v209 + 23) = 0;
                      *(_BYTE *)v209 = 0;
                      v236 = (void **)(v220 + 24);
                      if (*(char *)(v220 + 47) < 0)
                        operator delete(*v236);
                      v237 = *(_OWORD *)(v209 + 24);
                      *(_QWORD *)(v220 + 40) = *(_QWORD *)(v209 + 40);
                      *(_OWORD *)v236 = v237;
                      *(_BYTE *)(v209 + 47) = 0;
                      *(_BYTE *)(v209 + 24) = 0;
                      *(_BYTE *)(v220 + 48) = *(_BYTE *)(v209 + 48);
                      if (v205 < v208)
                        break;
                      v238 = (2 * v208) | 1;
                      v209 = a1 + 56 * v238;
                      v208 = 2 * v208 + 2;
                      if (v208 >= v9)
                      {
                        v208 = v238;
                      }
                      else
                      {
                        v239 = *(_BYTE *)(v209 + 79);
                        v240 = v239;
                        if (v239 >= 0)
                          v241 = (const void *)(v209 + 56);
                        else
                          v241 = *(const void **)(v209 + 56);
                        v242 = v239 & 0x7F;
                        if (v240 >= 0)
                          v243 = v242;
                        else
                          v243 = *(_QWORD *)(v209 + 64);
                        if (*(char *)(v209 + 23) < 0)
                        {
                          v245 = *(const void **)v209;
                          v244 = *(_QWORD *)(v209 + 8);
                        }
                        else
                        {
                          v244 = *(unsigned __int8 *)(v209 + 23);
                          v245 = (const void *)(a1 + 56 * v238);
                        }
                        if (v243 >= v244)
                          v246 = v244;
                        else
                          v246 = v243;
                        v247 = memcmp(v245, v241, v246);
                        v248 = v244 < v243;
                        if (v247)
                          v248 = v247 < 0;
                        if (v248)
                          v209 += 56;
                        else
                          v208 = v238;
                        a1 = v369;
                      }
                      if (SHIBYTE(v379) >= 0)
                        v249 = v378;
                      else
                        v249 = (void **)v378[0];
                      if (SHIBYTE(v379) >= 0)
                        v250 = (void *)(HIBYTE(v379) & 0x7F);
                      else
                        v250 = v378[1];
                      if (*(char *)(v209 + 23) < 0)
                      {
                        v252 = *(const void **)v209;
                        v251 = *(_QWORD *)(v209 + 8);
                      }
                      else
                      {
                        v251 = *(unsigned __int8 *)(v209 + 23);
                        v252 = (const void *)v209;
                      }
                      if ((unint64_t)v250 >= v251)
                        v253 = v251;
                      else
                        v253 = (size_t)v250;
                      v254 = memcmp(v252, v249, v253);
                      v255 = v251 < (unint64_t)v250;
                      if (v254)
                        v255 = v254 < 0;
                      v220 = v234;
                    }
                    while (!v255);
                    if (*(char *)(v234 + 23) < 0)
                      operator delete(*(void **)v234);
                    v256 = (void **)(v234 + 24);
                    v257 = *(_OWORD *)v378;
                    *(_QWORD *)(v234 + 16) = v379;
                    *(_OWORD *)v234 = v257;
                    if (*(char *)(v234 + 47) < 0)
                      operator delete(*v256);
                    v258 = __p;
                    *(_QWORD *)(v234 + 40) = v381;
                    *(_OWORD *)v256 = v258;
                    *(_BYTE *)(v234 + 48) = v382;
                  }
                }
                v206 = v207 - 1;
              }
              while (v207);
              v357 = (_QWORD *)(a1 + 24);
              v358 = (_QWORD *)(a1 + 8);
              v356 = (_QWORD *)(a1 + 32);
              do
              {
                v259 = 0;
                v360 = *(void **)a1;
                v260 = a2;
                *(_QWORD *)v376 = *v358;
                *(_QWORD *)&v376[7] = *(_QWORD *)((char *)v358 + 7);
                v362 = *(_BYTE *)(a1 + 23);
                *(_QWORD *)a1 = 0;
                *(_QWORD *)(a1 + 8) = 0;
                *(_QWORD *)(a1 + 16) = 0;
                v365 = *(_QWORD *)(a1 + 24);
                *(_QWORD *)&v372[7] = *(_QWORD *)((char *)v356 + 7);
                *(_QWORD *)v372 = *v356;
                v367 = *(_BYTE *)(a1 + 47);
                v357[1] = 0;
                v357[2] = 0;
                *v357 = 0;
                v261 = a1;
                v364 = *(_BYTE *)(a1 + 48);
                do
                {
                  v262 = v261 + 56 * v259 + 56;
                  v263 = 2 * v259;
                  v259 = (2 * v259) | 1;
                  v264 = v263 + 2;
                  if (v263 + 2 < v9)
                  {
                    v265 = *(_BYTE *)(v262 + 79);
                    v266 = v265;
                    if (v265 >= 0)
                      v267 = (const void *)(v262 + 56);
                    else
                      v267 = *(const void **)(v262 + 56);
                    v268 = v265 & 0x7F;
                    if (v266 >= 0)
                      v269 = v268;
                    else
                      v269 = *(_QWORD *)(v262 + 64);
                    if (*(char *)(v262 + 23) < 0)
                    {
                      v271 = *(const void **)v262;
                      v270 = *(_QWORD *)(v262 + 8);
                    }
                    else
                    {
                      v270 = *(unsigned __int8 *)(v262 + 23);
                      v271 = (const void *)v262;
                    }
                    if (v269 >= v270)
                      v272 = v270;
                    else
                      v272 = v269;
                    v273 = memcmp(v271, v267, v272);
                    v274 = v270 < v269;
                    if (v273)
                      v274 = v273 < 0;
                    if (v274)
                    {
                      v262 += 56;
                      v259 = v264;
                    }
                  }
                  if (*(char *)(v261 + 23) < 0)
                    operator delete(*(void **)v261);
                  v275 = *(_OWORD *)v262;
                  *(_QWORD *)(v261 + 16) = *(_QWORD *)(v262 + 16);
                  *(_OWORD *)v261 = v275;
                  *(_BYTE *)(v262 + 23) = 0;
                  *(_BYTE *)v262 = 0;
                  v276 = (void **)(v261 + 24);
                  if (*(char *)(v261 + 47) < 0)
                    operator delete(*v276);
                  v277 = *(_OWORD *)(v262 + 24);
                  *(_QWORD *)(v261 + 40) = *(_QWORD *)(v262 + 40);
                  *(_OWORD *)v276 = v277;
                  *(_BYTE *)(v262 + 47) = 0;
                  *(_BYTE *)(v262 + 24) = 0;
                  *(_BYTE *)(v261 + 48) = *(_BYTE *)(v262 + 48);
                  v261 = v262;
                }
                while (v259 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
                v278 = (void **)(v262 + 24);
                v279 = (void **)(a2 - 56);
                v280 = *(char *)(v262 + 23);
                a2 -= 56;
                if (v262 == v260 - 56)
                {
                  if (v280 < 0)
                    operator delete(*(void **)v262);
                  *(_QWORD *)v262 = v360;
                  *(_QWORD *)(v262 + 8) = *(_QWORD *)v376;
                  *(_QWORD *)(v262 + 15) = *(_QWORD *)&v376[7];
                  *(_BYTE *)(v262 + 23) = v362;
                  if (*(char *)(v262 + 47) < 0)
                    operator delete(*v278);
                  *(_QWORD *)(v262 + 24) = v365;
                  *(_QWORD *)(v262 + 32) = *(_QWORD *)v372;
                  *(_QWORD *)(v262 + 39) = *(_QWORD *)&v372[7];
                  *(_BYTE *)(v262 + 47) = v367;
                  *(_BYTE *)(v262 + 48) = v364;
                }
                else
                {
                  if (v280 < 0)
                    operator delete(*(void **)v262);
                  v281 = *(_OWORD *)v279;
                  *(_QWORD *)(v262 + 16) = *(_QWORD *)(v260 - 40);
                  *(_OWORD *)v262 = v281;
                  *(_BYTE *)(v260 - 33) = 0;
                  *(_BYTE *)(v260 - 56) = 0;
                  if (*(char *)(v262 + 47) < 0)
                    operator delete(*v278);
                  v282 = *(_OWORD *)(v260 - 32);
                  *(_QWORD *)(v262 + 40) = *(_QWORD *)(v260 - 16);
                  *(_OWORD *)v278 = v282;
                  *(_BYTE *)(v260 - 9) = 0;
                  *(_BYTE *)(v260 - 32) = 0;
                  *(_BYTE *)(v262 + 48) = *(_BYTE *)(v260 - 8);
                  if (*(char *)(v260 - 33) < 0)
                    operator delete(*v279);
                  *(_QWORD *)(v260 - 56) = v360;
                  *(_QWORD *)(v260 - 41) = *(_QWORD *)&v376[7];
                  *(_QWORD *)(v260 - 48) = *(_QWORD *)v376;
                  *(_BYTE *)(v260 - 33) = v362;
                  if (*(char *)(v260 - 9) < 0)
                    operator delete(*(void **)(v260 - 32));
                  *(_QWORD *)(v260 - 32) = v365;
                  *(_QWORD *)(v260 - 17) = *(_QWORD *)&v372[7];
                  *(_QWORD *)(v260 - 24) = *(_QWORD *)v372;
                  *(_BYTE *)(v260 - 9) = v367;
                  *(_BYTE *)(v260 - 8) = v364;
                  v283 = v262 + 56 - v369;
                  if (v283 >= 57)
                  {
                    v284 = (v283 / 0x38uLL - 2) >> 1;
                    v285 = v369 + 56 * v284;
                    v286 = *(_BYTE *)(v262 + 23);
                    v287 = v286 < 0;
                    if (v286 >= 0)
                      v288 = (const void *)v262;
                    else
                      v288 = *(const void **)v262;
                    v289 = v286 & 0x7F;
                    if (v287)
                      v290 = *(_QWORD *)(v262 + 8);
                    else
                      v290 = v289;
                    if (*(char *)(v285 + 23) < 0)
                    {
                      v292 = *(const void **)v285;
                      v291 = *(_QWORD *)(v285 + 8);
                    }
                    else
                    {
                      v291 = *(unsigned __int8 *)(v285 + 23);
                      v292 = (const void *)(v369 + 56 * v284);
                    }
                    if (v290 >= v291)
                      v293 = v291;
                    else
                      v293 = v290;
                    v294 = memcmp(v292, v288, v293);
                    v295 = v291 < v290;
                    if (v294)
                      v295 = v294 < 0;
                    if (v295)
                    {
                      v296 = *(_OWORD *)v262;
                      v379 = *(const void **)(v262 + 16);
                      *(_OWORD *)v378 = v296;
                      *(_QWORD *)(v262 + 8) = 0;
                      *(_QWORD *)(v262 + 16) = 0;
                      *(_QWORD *)v262 = 0;
                      v297 = *(_OWORD *)v278;
                      v381 = *(const void **)(v262 + 40);
                      __p = v297;
                      *(_QWORD *)(v262 + 32) = 0;
                      *(_QWORD *)(v262 + 40) = 0;
                      *v278 = 0;
                      v382 = *(_BYTE *)(v262 + 48);
                      do
                      {
                        v298 = v285;
                        if (*(char *)(v262 + 23) < 0)
                          operator delete(*(void **)v262);
                        v299 = *(_OWORD *)v285;
                        *(_QWORD *)(v262 + 16) = *(_QWORD *)(v285 + 16);
                        *(_OWORD *)v262 = v299;
                        *(_BYTE *)(v285 + 23) = 0;
                        *(_BYTE *)v285 = 0;
                        v300 = (void **)(v262 + 24);
                        if (*(char *)(v262 + 47) < 0)
                          operator delete(*v300);
                        v301 = *(_OWORD *)(v285 + 24);
                        *(_QWORD *)(v262 + 40) = *(_QWORD *)(v285 + 40);
                        *(_OWORD *)v300 = v301;
                        *(_BYTE *)(v285 + 47) = 0;
                        *(_BYTE *)(v285 + 24) = 0;
                        *(_BYTE *)(v262 + 48) = *(_BYTE *)(v285 + 48);
                        if (!v284)
                          break;
                        v284 = (v284 - 1) >> 1;
                        v285 = v369 + 56 * v284;
                        if (SHIBYTE(v379) >= 0)
                          v302 = v378;
                        else
                          v302 = (void **)v378[0];
                        if (SHIBYTE(v379) >= 0)
                          v303 = (void *)(HIBYTE(v379) & 0x7F);
                        else
                          v303 = v378[1];
                        if (*(char *)(v285 + 23) < 0)
                        {
                          v305 = *(const void **)v285;
                          v304 = *(_QWORD *)(v285 + 8);
                        }
                        else
                        {
                          v304 = *(unsigned __int8 *)(v285 + 23);
                          v305 = (const void *)(v369 + 56 * v284);
                        }
                        if ((unint64_t)v303 >= v304)
                          v306 = v304;
                        else
                          v306 = (size_t)v303;
                        v307 = memcmp(v305, v302, v306);
                        v308 = v304 < (unint64_t)v303;
                        if (v307)
                          v308 = v307 < 0;
                        v262 = v298;
                      }
                      while (v308);
                      if (*(char *)(v298 + 23) < 0)
                        operator delete(*(void **)v298);
                      v309 = (void **)(v298 + 24);
                      v310 = *(_OWORD *)v378;
                      *(_QWORD *)(v298 + 16) = v379;
                      *(_OWORD *)v298 = v310;
                      HIBYTE(v379) = 0;
                      LOBYTE(v378[0]) = 0;
                      if (*(char *)(v298 + 47) < 0)
                        operator delete(*v309);
                      v311 = __p;
                      *(_QWORD *)(v298 + 40) = v381;
                      *(_OWORD *)v309 = v311;
                      *(_BYTE *)(v298 + 48) = v382;
                    }
                  }
                }
                v312 = v9-- <= 2;
                a1 = v369;
              }
              while (!v312);
            }
            return;
          }
          v10 = (unint64_t)v9 >> 1;
          v11 = v7 + 56 * ((unint64_t)v9 >> 1);
          if ((unint64_t)v8 < 0x1C01)
          {
            sub_1C5E615DC((char *)v11, (char *)v7, (const void **)v366);
          }
          else
          {
            sub_1C5E615DC((char *)v7, (char *)v11, (const void **)v366);
            v12 = 56 * v10;
            v13 = a1 + 56 * v10;
            sub_1C5E615DC((char *)(a1 + 56), (char *)(v13 - 56), (const void **)(a2 - 112));
            sub_1C5E615DC((char *)(a1 + 112), (char *)(a1 + 56 + v12), (const void **)(a2 - 168));
            sub_1C5E615DC((char *)(v13 - 56), (char *)v11, (const void **)(a1 + 56 + v12));
            v14 = *(void **)a1;
            v378[0] = *(void **)(a1 + 8);
            *(void **)((char *)v378 + 7) = *(void **)(a1 + 15);
            v15 = *(_BYTE *)(a1 + 23);
            *(_QWORD *)a1 = 0;
            *(_QWORD *)(a1 + 8) = 0;
            *(_QWORD *)((char *)&v373 + 7) = *(_QWORD *)(a1 + 39);
            v16 = *(_QWORD *)(a1 + 24);
            *(_QWORD *)&v373 = *(_QWORD *)(a1 + 32);
            v17 = *(_BYTE *)(a1 + 47);
            *(_QWORD *)(a1 + 16) = 0;
            *(_QWORD *)(a1 + 24) = 0;
            *(_QWORD *)(a1 + 32) = 0;
            *(_QWORD *)(a1 + 40) = 0;
            v18 = *(_BYTE *)(a1 + 48);
            v19 = *(_OWORD *)v11;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v11 + 16);
            *(_OWORD *)a1 = v19;
            *(_BYTE *)(v11 + 23) = 0;
            v20 = *(_BYTE *)(v13 + 48);
            v21 = *(_OWORD *)(v13 + 24);
            *(_QWORD *)(a1 + 40) = *(_QWORD *)(v13 + 40);
            *(_OWORD *)(a1 + 24) = v21;
            *(_BYTE *)(v11 + 47) = 0;
            *(_BYTE *)(v13 + 24) = 0;
            *(_BYTE *)(a1 + 48) = v20;
            *(_QWORD *)v11 = v14;
            v22 = v378[0];
            *(void **)(v11 + 15) = *(void **)((char *)v378 + 7);
            *(_QWORD *)(v11 + 8) = v22;
            *(_BYTE *)(v11 + 23) = v15;
            *(_QWORD *)(v13 + 24) = v16;
            *(_QWORD *)(v13 + 39) = *(_QWORD *)((char *)&v373 + 7);
            *(_QWORD *)(v13 + 32) = v373;
            *(_BYTE *)(v11 + 47) = v17;
            *(_BYTE *)(v13 + 48) = v18;
          }
          v23 = a3 - 1;
          if ((a4 & 1) == 0)
          {
            v24 = *(_BYTE *)(a1 + 23);
            v25 = v24 < 0;
            if (v24 >= 0)
              v26 = (const void *)a1;
            else
              v26 = *(const void **)a1;
            v27 = v24 & 0x7F;
            if (v25)
              v28 = *(_QWORD *)(a1 + 8);
            else
              v28 = v27;
            if (*(char *)(a1 - 33) < 0)
            {
              v29 = *(const void **)(a1 - 56);
              v30 = *(_QWORD *)(a1 - 48);
            }
            else
            {
              v29 = (const void *)(a1 - 56);
              v30 = *(unsigned __int8 *)(a1 - 33);
            }
            if (v28 >= v30)
              v31 = v30;
            else
              v31 = v28;
            v32 = memcmp(v29, v26, v31);
            v33 = v30 < v28;
            if (v32)
              v33 = v32 < 0;
            if (!v33)
            {
              v88 = v23;
              v89 = *(_OWORD *)a1;
              v379 = *(const void **)(a1 + 16);
              *(_OWORD *)v378 = v89;
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)a1 = 0;
              v90 = *(const void **)(a1 + 40);
              __p = *(_OWORD *)(a1 + 24);
              v381 = v90;
              *(_QWORD *)(a1 + 32) = 0;
              *(_QWORD *)(a1 + 40) = 0;
              *(_QWORD *)(a1 + 24) = 0;
              v382 = *(_BYTE *)(a1 + 48);
              v91 = *(_BYTE *)(v6 - 33);
              v92 = v91 < 0;
              if (v91 >= 0)
                v93 = (const void *)(a2 - 56);
              else
                v93 = *(const void **)(v6 - 56);
              v94 = v91 & 0x7F;
              if (v92)
                v95 = *(_QWORD *)(v6 - 48);
              else
                v95 = v94;
              if (SHIBYTE(v379) >= 0)
                v96 = (void *)(HIBYTE(v379) & 0x7F);
              else
                v96 = v378[1];
              if (SHIBYTE(v379) >= 0)
                v97 = v378;
              else
                v97 = (void **)v378[0];
              if (v95 >= (unint64_t)v96)
                v98 = (size_t)v96;
              else
                v98 = v95;
              v99 = memcmp(v97, v93, v98);
              v100 = (unint64_t)v96 < v95;
              if (v99)
                v100 = v99 < 0;
              if (v100)
              {
                v101 = (const void **)(a1 + 56);
                do
                {
                  v102 = *((_BYTE *)v101 + 23);
                  v103 = v102 < 0;
                  if (v102 >= 0)
                    v104 = v101;
                  else
                    v104 = *v101;
                  v105 = v102 & 0x7F;
                  if (v103)
                    v106 = (size_t)v101[1];
                  else
                    v106 = v105;
                  if (v106 >= (unint64_t)v96)
                    v107 = (size_t)v96;
                  else
                    v107 = v106;
                  v108 = memcmp(v97, v104, v107);
                  v109 = (unint64_t)v96 < v106;
                  if (v108)
                    v109 = v108 < 0;
                  v101 += 7;
                }
                while (!v109);
                v7 = (unint64_t)(v101 - 7);
              }
              else
              {
                v110 = a1 + 56;
                do
                {
                  v7 = v110;
                  if (v110 >= v6)
                    break;
                  v111 = *(_BYTE *)(v110 + 23);
                  v112 = v111 < 0;
                  if (v111 >= 0)
                    v113 = (const void *)v7;
                  else
                    v113 = *(const void **)v7;
                  v114 = v111 & 0x7F;
                  if (v112)
                    v115 = *(_QWORD *)(v7 + 8);
                  else
                    v115 = v114;
                  if (v115 >= (unint64_t)v96)
                    v116 = (size_t)v96;
                  else
                    v116 = v115;
                  v117 = memcmp(v97, v113, v116);
                  v118 = v117 < 0;
                  if (!v117)
                    v118 = (unint64_t)v96 < v115;
                  v110 = v7 + 56;
                }
                while (!v118);
              }
              v119 = v6;
              if (v7 < v6)
              {
                v120 = (const void **)(a2 - 56);
                do
                {
                  v121 = *((_BYTE *)v120 + 23);
                  v122 = v121 < 0;
                  if (v121 >= 0)
                    v123 = v120;
                  else
                    v123 = *v120;
                  v124 = v121 & 0x7F;
                  if (v122)
                    v125 = (size_t)v120[1];
                  else
                    v125 = v124;
                  if (v125 >= (unint64_t)v96)
                    v126 = (size_t)v96;
                  else
                    v126 = v125;
                  v127 = memcmp(v97, v123, v126);
                  v128 = (unint64_t)v96 < v125;
                  if (v127)
                    v128 = v127 < 0;
                  v120 -= 7;
                }
                while (v128);
                v119 = (unint64_t)(v120 + 7);
                v6 = a2;
              }
              if (v7 < v119)
              {
                v129 = *(const void **)v7;
                do
                {
                  *(_QWORD *)v375 = *(_QWORD *)(v7 + 8);
                  *(_QWORD *)&v375[7] = *(_QWORD *)(v7 + 15);
                  v130 = *(_BYTE *)(v7 + 23);
                  *(_QWORD *)v7 = 0;
                  *(_QWORD *)(v7 + 8) = 0;
                  *(_QWORD *)(v7 + 16) = 0;
                  v132 = (void **)(v7 + 24);
                  v131 = *(_QWORD *)(v7 + 24);
                  *(_QWORD *)&v371[7] = *(_QWORD *)(v7 + 39);
                  *(_QWORD *)v371 = *(_QWORD *)(v7 + 32);
                  v133 = *(_BYTE *)(v7 + 47);
                  *(_QWORD *)(v7 + 32) = 0;
                  *(_QWORD *)(v7 + 40) = 0;
                  *(_QWORD *)(v7 + 24) = 0;
                  v134 = *(_BYTE *)(v7 + 48);
                  v135 = *(_QWORD *)(v119 + 16);
                  *(_OWORD *)v7 = *(_OWORD *)v119;
                  *(_QWORD *)(v7 + 16) = v135;
                  *(_BYTE *)(v119 + 23) = 0;
                  *(_BYTE *)v119 = 0;
                  if (*(char *)(v7 + 47) < 0)
                    operator delete(*v132);
                  v136 = *(_OWORD *)(v119 + 24);
                  *(_QWORD *)(v7 + 40) = *(_QWORD *)(v119 + 40);
                  *(_OWORD *)v132 = v136;
                  *(_BYTE *)(v119 + 47) = 0;
                  *(_BYTE *)(v119 + 24) = 0;
                  *(_BYTE *)(v7 + 48) = *(_BYTE *)(v119 + 48);
                  if (*(char *)(v119 + 23) < 0)
                    operator delete(*(void **)v119);
                  *(_QWORD *)v119 = v129;
                  *(_QWORD *)(v119 + 8) = *(_QWORD *)v375;
                  *(_QWORD *)(v119 + 15) = *(_QWORD *)&v375[7];
                  *(_BYTE *)(v119 + 23) = v130;
                  if (*(char *)(v119 + 47) < 0)
                    operator delete(*(void **)(v119 + 24));
                  *(_QWORD *)(v119 + 24) = v131;
                  *(_QWORD *)(v119 + 32) = *(_QWORD *)v371;
                  *(_QWORD *)(v119 + 39) = *(_QWORD *)&v371[7];
                  *(_BYTE *)(v119 + 47) = v133;
                  *(_BYTE *)(v119 + 48) = v134;
                  if (SHIBYTE(v379) >= 0)
                    v137 = (void *)(HIBYTE(v379) & 0x7F);
                  else
                    v137 = v378[1];
                  if (SHIBYTE(v379) >= 0)
                    v138 = v378;
                  else
                    v138 = (void **)v378[0];
                  v139 = (_QWORD *)(v7 + 56);
                  do
                  {
                    v140 = *((_BYTE *)v139 + 23);
                    v141 = v140 < 0;
                    v129 = (const void *)*v139;
                    if (v140 >= 0)
                      v142 = v139;
                    else
                      v142 = (const void *)*v139;
                    v143 = v140 & 0x7F;
                    if (v141)
                      v144 = v139[1];
                    else
                      v144 = v143;
                    if (v144 >= (unint64_t)v137)
                      v145 = (size_t)v137;
                    else
                      v145 = v144;
                    v146 = memcmp(v138, v142, v145);
                    v147 = (unint64_t)v137 < v144;
                    if (v146)
                      v147 = v146 < 0;
                    v139 += 7;
                  }
                  while (!v147);
                  v7 = (unint64_t)(v139 - 7);
                  v148 = (const void **)(v119 - 56);
                  do
                  {
                    v149 = *((_BYTE *)v148 + 23);
                    v150 = v149 < 0;
                    if (v149 >= 0)
                      v151 = v148;
                    else
                      v151 = *v148;
                    v152 = v149 & 0x7F;
                    if (v150)
                      v153 = (size_t)v148[1];
                    else
                      v153 = v152;
                    if (v153 >= (unint64_t)v137)
                      v154 = (size_t)v137;
                    else
                      v154 = v153;
                    v155 = memcmp(v138, v151, v154);
                    v156 = (unint64_t)v137 < v153;
                    if (v155)
                      v156 = v155 < 0;
                    v148 -= 7;
                  }
                  while (v156);
                  v119 = (unint64_t)(v148 + 7);
                }
                while (v7 < v119);
                v6 = a2;
                a1 = v369;
              }
              v157 = (void **)(v7 - 56);
              a3 = v88;
              if (v7 - 56 != a1)
              {
                if (*(char *)(a1 + 23) < 0)
                  operator delete(*(void **)a1);
                v158 = (void **)(a1 + 24);
                v159 = *(_OWORD *)v157;
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(v7 - 40);
                *(_OWORD *)a1 = v159;
                *(_BYTE *)(v7 - 33) = 0;
                *(_BYTE *)(v7 - 56) = 0;
                if (*(char *)(a1 + 47) < 0)
                  operator delete(*v158);
                v160 = *(_OWORD *)(v7 - 32);
                *(_QWORD *)(a1 + 40) = *(_QWORD *)(v7 - 16);
                *(_OWORD *)v158 = v160;
                *(_BYTE *)(v7 - 9) = 0;
                *(_BYTE *)(v7 - 32) = 0;
                *(_BYTE *)(a1 + 48) = *(_BYTE *)(v7 - 8);
                a3 = v88;
              }
              if (*(char *)(v7 - 33) < 0)
                operator delete(*v157);
              v161 = *(_OWORD *)v378;
              *(_QWORD *)(v7 - 40) = v379;
              *(_OWORD *)v157 = v161;
              HIBYTE(v379) = 0;
              LOBYTE(v378[0]) = 0;
              v162 = (void **)(v7 - 32);
              if (*(char *)(v7 - 9) < 0)
                operator delete(*v162);
              v163 = __p;
              *(_QWORD *)(v7 - 16) = v381;
              *(_OWORD *)v162 = v163;
              HIBYTE(v381) = 0;
              LOBYTE(__p) = 0;
              *(_BYTE *)(v7 - 8) = v382;
              if (SHIBYTE(v381) < 0)
                operator delete((void *)__p);
              if (SHIBYTE(v379) < 0)
                operator delete(v378[0]);
              goto LABEL_119;
            }
          }
          v363 = v23;
          v34 = 0;
          v35 = *(_OWORD *)a1;
          v379 = *(const void **)(a1 + 16);
          *(_OWORD *)v378 = v35;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          v36 = *(const void **)(a1 + 40);
          __p = *(_OWORD *)(a1 + 24);
          v381 = v36;
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 40) = 0;
          *(_QWORD *)(a1 + 24) = 0;
          v382 = *(_BYTE *)(a1 + 48);
          if (SHIBYTE(v379) >= 0)
            v37 = (void *)(HIBYTE(v379) & 0x7F);
          else
            v37 = v378[1];
          v361 = a1 + 24;
          if (SHIBYTE(v379) >= 0)
            v38 = v378;
          else
            v38 = (void **)v378[0];
          do
          {
            v39 = (_QWORD *)(a1 + v34 + 56);
            if (*(char *)(a1 + v34 + 79) < 0)
            {
              v40 = *(_QWORD *)(a1 + v34 + 64);
              v39 = (_QWORD *)*v39;
            }
            else
            {
              v40 = *(unsigned __int8 *)(a1 + v34 + 79);
            }
            if ((unint64_t)v37 >= v40)
              v41 = v40;
            else
              v41 = (size_t)v37;
            v42 = memcmp(v39, v38, v41);
            v43 = v40 < (unint64_t)v37;
            if (v42)
              v43 = v42 < 0;
            v34 += 56;
          }
          while (v43);
          v44 = a1 + v34;
          v45 = a2 - 56;
          if (v34 == 56)
          {
            v45 = a2 - 56;
            while (1)
            {
              v51 = v45 + 56;
              if (v44 >= v45 + 56)
                break;
              if (*(char *)(v45 + 23) < 0)
              {
                v53 = *(const void **)v45;
                v52 = *(_QWORD *)(v45 + 8);
              }
              else
              {
                v52 = *(unsigned __int8 *)(v45 + 23);
                v53 = (const void *)v45;
              }
              if ((unint64_t)v37 >= v52)
                v54 = v52;
              else
                v54 = (size_t)v37;
              v55 = memcmp(v53, v38, v54);
              v56 = v52 < (unint64_t)v37;
              if (v55)
                v56 = v55 < 0;
              v45 -= 56;
              if (v56)
                goto LABEL_62;
            }
          }
          else
          {
            do
            {
              if (*(char *)(v45 + 23) < 0)
              {
                v47 = *(const void **)v45;
                v46 = *(_QWORD *)(v45 + 8);
              }
              else
              {
                v46 = *(unsigned __int8 *)(v45 + 23);
                v47 = (const void *)v45;
              }
              if ((unint64_t)v37 >= v46)
                v48 = v46;
              else
                v48 = (size_t)v37;
              v49 = memcmp(v47, v38, v48);
              v50 = v46 < (unint64_t)v37;
              if (v49)
                v50 = v49 < 0;
              v45 -= 56;
            }
            while (!v50);
LABEL_62:
            v51 = v45 + 56;
          }
          v7 = v44;
          if (v44 >= v51)
          {
            v6 = a2;
          }
          else
          {
            v57 = v51;
            do
            {
              v58 = *(const void **)v7;
              *(_QWORD *)v374 = *(_QWORD *)(v7 + 8);
              *(_QWORD *)&v374[7] = *(_QWORD *)(v7 + 15);
              v59 = *(_BYTE *)(v7 + 23);
              *(_QWORD *)v7 = 0;
              *(_QWORD *)(v7 + 8) = 0;
              *(_QWORD *)(v7 + 16) = 0;
              v61 = (void **)(v7 + 24);
              v60 = *(_QWORD *)(v7 + 24);
              *(_QWORD *)&v370[7] = *(_QWORD *)(v7 + 39);
              *(_QWORD *)v370 = *(_QWORD *)(v7 + 32);
              v62 = *(_BYTE *)(v7 + 47);
              *(_QWORD *)(v7 + 32) = 0;
              *(_QWORD *)(v7 + 40) = 0;
              *(_QWORD *)(v7 + 24) = 0;
              v63 = *(_BYTE *)(v7 + 48);
              v64 = *(_QWORD *)(v57 + 16);
              *(_OWORD *)v7 = *(_OWORD *)v57;
              *(_QWORD *)(v7 + 16) = v64;
              *(_BYTE *)(v57 + 23) = 0;
              *(_BYTE *)v57 = 0;
              if (*(char *)(v7 + 47) < 0)
                operator delete(*v61);
              v65 = *(_OWORD *)(v57 + 24);
              *(_QWORD *)(v7 + 40) = *(_QWORD *)(v57 + 40);
              *(_OWORD *)v61 = v65;
              *(_BYTE *)(v57 + 47) = 0;
              *(_BYTE *)(v57 + 24) = 0;
              *(_BYTE *)(v7 + 48) = *(_BYTE *)(v57 + 48);
              if (*(char *)(v57 + 23) < 0)
                operator delete(*(void **)v57);
              *(_QWORD *)v57 = v58;
              *(_QWORD *)(v57 + 8) = *(_QWORD *)v374;
              *(_QWORD *)(v57 + 15) = *(_QWORD *)&v374[7];
              *(_BYTE *)(v57 + 23) = v59;
              if (*(char *)(v57 + 47) < 0)
                operator delete(*(void **)(v57 + 24));
              *(_QWORD *)(v57 + 24) = v60;
              *(_QWORD *)(v57 + 32) = *(_QWORD *)v370;
              *(_QWORD *)(v57 + 39) = *(_QWORD *)&v370[7];
              *(_BYTE *)(v57 + 47) = v62;
              *(_BYTE *)(v57 + 48) = v63;
              if (SHIBYTE(v379) >= 0)
                v66 = v378;
              else
                v66 = (void **)v378[0];
              if (SHIBYTE(v379) >= 0)
                v67 = (void *)(HIBYTE(v379) & 0x7F);
              else
                v67 = v378[1];
              v68 = (char *)(v7 + 56);
              do
              {
                if (v68[23] < 0)
                {
                  v70 = *(char **)v68;
                  v69 = *((_QWORD *)v68 + 1);
                }
                else
                {
                  v69 = v68[23];
                  v70 = v68;
                }
                if ((unint64_t)v67 >= v69)
                  v71 = v69;
                else
                  v71 = (size_t)v67;
                v72 = memcmp(v70, v66, v71);
                v73 = v69 < (unint64_t)v67;
                if (v72)
                  v73 = v72 < 0;
                v68 += 56;
              }
              while (v73);
              v7 = (unint64_t)(v68 - 56);
              v74 = (char *)(v57 - 56);
              do
              {
                if (v74[23] < 0)
                {
                  v76 = *(char **)v74;
                  v75 = *((_QWORD *)v74 + 1);
                }
                else
                {
                  v75 = v74[23];
                  v76 = v74;
                }
                if ((unint64_t)v67 >= v75)
                  v77 = v75;
                else
                  v77 = (size_t)v67;
                v78 = memcmp(v76, v66, v77);
                v79 = v75 < (unint64_t)v67;
                if (v78)
                  v79 = v78 < 0;
                v74 -= 56;
              }
              while (!v79);
              v57 = (unint64_t)(v74 + 56);
            }
            while (v7 < v57);
            v6 = a2;
            a1 = v369;
          }
          v80 = (void **)(v7 - 56);
          if (v7 - 56 != a1)
          {
            if (*(char *)(a1 + 23) < 0)
              operator delete(*(void **)a1);
            v81 = *(_OWORD *)v80;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v7 - 40);
            *(_OWORD *)a1 = v81;
            *(_BYTE *)(v7 - 33) = 0;
            *(_BYTE *)(v7 - 56) = 0;
            if (*(char *)(a1 + 47) < 0)
              operator delete(*(void **)v361);
            v82 = *(_OWORD *)(v7 - 32);
            *(_QWORD *)(v361 + 16) = *(_QWORD *)(v7 - 16);
            *(_OWORD *)v361 = v82;
            *(_BYTE *)(v7 - 9) = 0;
            *(_BYTE *)(v7 - 32) = 0;
            *(_BYTE *)(a1 + 48) = *(_BYTE *)(v7 - 8);
          }
          if (*(char *)(v7 - 33) < 0)
            operator delete(*v80);
          v83 = *(_OWORD *)v378;
          *(_QWORD *)(v7 - 40) = v379;
          *(_OWORD *)v80 = v83;
          HIBYTE(v379) = 0;
          LOBYTE(v378[0]) = 0;
          v84 = (void **)(v7 - 32);
          if (*(char *)(v7 - 9) < 0)
            operator delete(*v84);
          v85 = __p;
          *(_QWORD *)(v7 - 16) = v381;
          *(_OWORD *)v84 = v85;
          HIBYTE(v381) = 0;
          LOBYTE(__p) = 0;
          *(_BYTE *)(v7 - 8) = v382;
          if (SHIBYTE(v381) < 0)
            operator delete((void *)__p);
          if (SHIBYTE(v379) < 0)
            operator delete(v378[0]);
          v86 = v44 >= v51;
          a3 = v363;
          if (!v86)
            goto LABEL_118;
          v87 = sub_1C5E61C74(a1, v7 - 56);
          if (!sub_1C5E61C74(v7, v6))
          {
            if (v87)
              continue;
LABEL_118:
            sub_1C5E5F634(a1, v7 - 56, v363, a4 & 1);
LABEL_119:
            a4 = 0;
            continue;
          }
          a2 = v7 - 56;
          if (v87)
            return;
          goto LABEL_2;
        }
        if ((a4 & 1) != 0)
        {
          if (v7 != v6)
          {
            v173 = v7 + 56;
            if (v7 + 56 != a2)
            {
              v174 = 0;
              v175 = (const void **)v7;
              do
              {
                v176 = (const void **)v173;
                v177 = *((_BYTE *)v175 + 23);
                v178 = v177 < 0;
                if (v177 >= 0)
                  v179 = v175;
                else
                  v179 = *v175;
                v180 = v177 & 0x7F;
                if (v178)
                  v181 = (size_t)v175[1];
                else
                  v181 = v180;
                if (*((char *)v175 + 79) < 0)
                {
                  v182 = (size_t)v175[8];
                  v183 = *v176;
                }
                else
                {
                  v182 = *((unsigned __int8 *)v175 + 79);
                  v183 = v176;
                }
                if (v181 >= v182)
                  v184 = v182;
                else
                  v184 = v181;
                v185 = memcmp(v183, v179, v184);
                v186 = v182 < v181;
                if (v185)
                  v186 = v185 < 0;
                if (v186)
                {
                  v187 = *(_OWORD *)v176;
                  v379 = v176[2];
                  *(_OWORD *)v378 = v187;
                  v176[1] = 0;
                  v176[2] = 0;
                  *v176 = 0;
                  __p = *((_OWORD *)v175 + 5);
                  v381 = v175[12];
                  v175[11] = 0;
                  v175[12] = 0;
                  v175[10] = 0;
                  v382 = *((_BYTE *)v175 + 104);
                  v188 = v174;
                  while (1)
                  {
                    v189 = v369 + v188;
                    v190 = (void **)(v369 + v188 + 56);
                    if (*(char *)(v369 + v188 + 79) < 0)
                      operator delete(*v190);
                    *(_OWORD *)v190 = *(_OWORD *)v189;
                    *(_QWORD *)(v369 + v188 + 72) = *(_QWORD *)(v189 + 16);
                    *(_BYTE *)(v189 + 23) = 0;
                    *(_BYTE *)v189 = 0;
                    v191 = (void **)(v189 + 80);
                    if (*(char *)(v189 + 103) < 0)
                      operator delete(*v191);
                    v192 = v369 + v188;
                    *(_OWORD *)v191 = *(_OWORD *)(v369 + v188 + 24);
                    *(_QWORD *)(v189 + 96) = *(_QWORD *)(v369 + v188 + 40);
                    *(_BYTE *)(v192 + 47) = 0;
                    *(_BYTE *)(v192 + 24) = 0;
                    *(_BYTE *)(v192 + 104) = *(_BYTE *)(v192 + 48);
                    if (!v188)
                      break;
                    v193 = *(_BYTE *)(v192 - 33);
                    if (v193 >= 0)
                      v194 = (const void *)(v192 - 56);
                    else
                      v194 = *(const void **)(v192 - 56);
                    if (v193 >= 0)
                      v195 = v193 & 0x7F;
                    else
                      v195 = *(_QWORD *)(v192 - 48);
                    if (SHIBYTE(v379) >= 0)
                      v196 = (void *)(HIBYTE(v379) & 0x7F);
                    else
                      v196 = v378[1];
                    if (SHIBYTE(v379) >= 0)
                      v197 = v378;
                    else
                      v197 = (void **)v378[0];
                    if (v195 >= (unint64_t)v196)
                      v198 = (size_t)v196;
                    else
                      v198 = v195;
                    v199 = memcmp(v197, v194, v198);
                    v200 = (unint64_t)v196 < v195;
                    if (v199)
                      v200 = v199 < 0;
                    v188 -= 56;
                    if (!v200)
                    {
                      v201 = v369 + v188 + 56;
                      goto LABEL_296;
                    }
                  }
                  v201 = v369;
LABEL_296:
                  if (*(char *)(v201 + 23) < 0)
                    operator delete(*(void **)v201);
                  v202 = (void **)(v192 + 24);
                  v203 = *(_OWORD *)v378;
                  *(_QWORD *)(v201 + 16) = v379;
                  *(_OWORD *)v201 = v203;
                  HIBYTE(v379) = 0;
                  LOBYTE(v378[0]) = 0;
                  if (*(char *)(v201 + 47) < 0)
                    operator delete(*v202);
                  v204 = __p;
                  *(_QWORD *)(v192 + 40) = v381;
                  *(_OWORD *)v202 = v204;
                  *(_BYTE *)(v201 + 48) = v382;
                }
                v173 = (unint64_t)(v176 + 7);
                v174 += 56;
                v175 = v176;
              }
              while (v176 + 7 != (const void **)a2);
            }
          }
        }
        else if (v7 != v6)
        {
          v313 = v7 + 56;
          if (v7 + 56 != a2)
          {
            v314 = (_BYTE *)(v7 + 104);
            do
            {
              v315 = (const void **)a1;
              a1 = v313;
              v316 = *((_BYTE *)v315 + 23);
              v317 = v316 < 0;
              if (v316 >= 0)
                v318 = v315;
              else
                v318 = *v315;
              v319 = v316 & 0x7F;
              if (v317)
                v320 = (size_t)v315[1];
              else
                v320 = v319;
              v321 = v315;
              if (*((char *)v315 + 79) < 0)
              {
                v322 = (size_t)v315[8];
                v323 = *(const void **)a1;
              }
              else
              {
                v322 = *((unsigned __int8 *)v315 + 79);
                v323 = (const void *)a1;
              }
              if (v320 >= v322)
                v324 = v322;
              else
                v324 = v320;
              v325 = memcmp(v323, v318, v324);
              v326 = v322 < v320;
              if (v325)
                v326 = v325 < 0;
              if (v326)
              {
                v327 = *(_OWORD *)a1;
                v379 = *(const void **)(a1 + 16);
                *(_OWORD *)v378 = v327;
                *(_QWORD *)(a1 + 8) = 0;
                *(_QWORD *)(a1 + 16) = 0;
                *(_QWORD *)a1 = 0;
                __p = *((_OWORD *)v321 + 5);
                v381 = v321[12];
                v321[11] = 0;
                v321[12] = 0;
                v321[10] = 0;
                v382 = *((_BYTE *)v321 + 104);
                v328 = v314;
                do
                {
                  v329 = (void **)(v328 - 48);
                  if ((char)*(v328 - 25) < 0)
                    operator delete(*v329);
                  *(_OWORD *)v329 = *(_OWORD *)(v328 - 104);
                  *((_QWORD *)v328 - 4) = *((_QWORD *)v328 - 11);
                  *(v328 - 81) = 0;
                  *(v328 - 104) = 0;
                  v330 = (void **)(v328 - 24);
                  if ((char)*(v328 - 1) < 0)
                    operator delete(*v330);
                  *(_OWORD *)v330 = *((_OWORD *)v328 - 5);
                  *((_QWORD *)v328 - 1) = *((_QWORD *)v328 - 8);
                  *(v328 - 57) = 0;
                  *(v328 - 80) = 0;
                  v331 = v328 - 56;
                  *v328 = *(v328 - 56);
                  v332 = *(v328 - 137);
                  v333 = v332;
                  if (v332 >= 0)
                    v334 = v328 - 160;
                  else
                    v334 = (_BYTE *)*((_QWORD *)v328 - 20);
                  v335 = v332 & 0x7F;
                  if (v333 >= 0)
                    v336 = v335;
                  else
                    v336 = *((_QWORD *)v328 - 19);
                  if (SHIBYTE(v379) >= 0)
                    v337 = (void *)(HIBYTE(v379) & 0x7F);
                  else
                    v337 = v378[1];
                  if (SHIBYTE(v379) >= 0)
                    v338 = v378;
                  else
                    v338 = (void **)v378[0];
                  if (v336 >= (unint64_t)v337)
                    v339 = (size_t)v337;
                  else
                    v339 = v336;
                  v340 = memcmp(v338, v334, v339);
                  v341 = (unint64_t)v337 < v336;
                  if (v340)
                    v341 = v340 < 0;
                  v328 = v331;
                }
                while (v341);
                v342 = (void **)(v331 - 48);
                if ((char)*(v331 - 25) < 0)
                  operator delete(*v342);
                v343 = (void **)(v331 - 24);
                v344 = *(_OWORD *)v378;
                *((_QWORD *)v331 - 4) = v379;
                *(_OWORD *)v342 = v344;
                HIBYTE(v379) = 0;
                LOBYTE(v378[0]) = 0;
                if ((char)*(v331 - 1) < 0)
                  operator delete(*v343);
                v345 = __p;
                *((_QWORD *)v331 - 1) = v381;
                *(_OWORD *)v343 = v345;
                HIBYTE(v381) = 0;
                LOBYTE(__p) = 0;
                *v331 = v382;
              }
              v313 = a1 + 56;
              v314 += 56;
            }
            while (a1 + 56 != a2);
          }
        }
        return;
    }
  }
}

void sub_1C5E60FF0(uint64_t *a1, __int128 *a2, uint64_t *a3, uint64_t *a4, __int128 *a5)
{
  char v9;
  int v10;
  uint64_t v11;
  const void *v12;
  _QWORD *v13;
  size_t v14;
  size_t v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  void **v21;
  char v22;
  char v23;
  __int128 v24;
  __int128 v25;
  char v26;
  int v27;
  uint64_t v28;
  const void *v29;
  _QWORD *v30;
  size_t v31;
  size_t v32;
  size_t v33;
  const void *v34;
  size_t v35;
  int v36;
  _BOOL4 v37;
  void **v38;
  char v39;
  __int128 v40;
  __int128 v41;
  char v42;
  int v43;
  uint64_t v44;
  __int128 *v45;
  _QWORD *v46;
  size_t v47;
  size_t v48;
  size_t v49;
  const void *v50;
  size_t v51;
  int v52;
  _BOOL4 v53;
  __int128 *v54;
  void **v55;
  char v56;
  char v57;
  __int128 v58;
  __int128 v59;
  char v60;
  int v61;
  uint64_t v62;
  const void *v63;
  size_t v64;
  size_t v65;
  size_t v66;
  __int128 *v67;
  size_t v68;
  int v69;
  _BOOL4 v70;
  uint64_t v71;
  void **v72;
  char v73;
  char v74;
  __int128 *v75;
  __int128 v76;
  __int128 v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  _BYTE v84[15];
  _BYTE v85[15];
  _BYTE v86[15];
  _BYTE v87[15];
  _BYTE v88[15];
  _BYTE v89[15];
  _BYTE v90[15];
  _BYTE v91[15];

  sub_1C5E620F8(a1, (uint64_t *)a2, (__int128 *)a3, (__int128 *)a4);
  v9 = *((_BYTE *)a4 + 23);
  v10 = v9;
  v11 = *a4;
  if (v9 >= 0)
    v12 = a4;
  else
    v12 = (const void *)*a4;
  v13 = a4 + 1;
  v14 = v9 & 0x7F;
  if (v10 >= 0)
    v15 = v14;
  else
    v15 = a4[1];
  v82 = a1;
  if (*((char *)a5 + 23) < 0)
  {
    v17 = *(const void **)a5;
    v16 = *((_QWORD *)a5 + 1);
  }
  else
  {
    v16 = *((unsigned __int8 *)a5 + 23);
    v17 = a5;
  }
  if (v15 >= v16)
    v18 = v16;
  else
    v18 = v15;
  v19 = memcmp(v17, v12, v18);
  v20 = v16 < v15;
  if (v19)
    v20 = v19 < 0;
  if (v20)
  {
    *(_QWORD *)v88 = *v13;
    *(_QWORD *)&v88[7] = *(uint64_t *)((char *)a4 + 15);
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    v21 = (void **)(a4 + 3);
    v79 = a4[3];
    *(_QWORD *)v84 = a4[4];
    *(_QWORD *)&v84[7] = *(uint64_t *)((char *)a4 + 39);
    v22 = *((_BYTE *)a4 + 47);
    a4[5] = 0;
    a4[4] = 0;
    a4[3] = 0;
    v23 = *((_BYTE *)a4 + 48);
    v24 = *a5;
    a4[2] = *((_QWORD *)a5 + 2);
    *(_OWORD *)a4 = v24;
    *((_BYTE *)a5 + 23) = 0;
    *(_BYTE *)a5 = 0;
    if (*((char *)a4 + 47) < 0)
      operator delete(*v21);
    v25 = *(__int128 *)((char *)a5 + 24);
    a4[5] = *((_QWORD *)a5 + 5);
    *(_OWORD *)v21 = v25;
    *((_BYTE *)a5 + 47) = 0;
    *((_BYTE *)a5 + 24) = 0;
    *((_BYTE *)a4 + 48) = *((_BYTE *)a5 + 48);
    if (*((char *)a5 + 23) < 0)
      operator delete(*(void **)a5);
    *(_QWORD *)a5 = v11;
    *((_QWORD *)a5 + 1) = *(_QWORD *)v88;
    *(_QWORD *)((char *)a5 + 15) = *(_QWORD *)&v88[7];
    *((_BYTE *)a5 + 23) = v10;
    if (*((char *)a5 + 47) < 0)
      operator delete(*((void **)a5 + 3));
    *((_QWORD *)a5 + 3) = v79;
    *((_QWORD *)a5 + 4) = *(_QWORD *)v84;
    *(_QWORD *)((char *)a5 + 39) = *(_QWORD *)&v84[7];
    *((_BYTE *)a5 + 47) = v22;
    *((_BYTE *)a5 + 48) = v23;
    v26 = *((_BYTE *)a3 + 23);
    v27 = v26;
    v28 = *a3;
    if (v26 >= 0)
      v29 = a3;
    else
      v29 = (const void *)*a3;
    v30 = a3 + 1;
    v31 = v26 & 0x7F;
    if (v27 >= 0)
      v32 = v31;
    else
      v32 = a3[1];
    if (*((char *)a4 + 23) < 0)
    {
      v34 = (const void *)*a4;
      v33 = a4[1];
    }
    else
    {
      v33 = *((unsigned __int8 *)a4 + 23);
      v34 = a4;
    }
    if (v32 >= v33)
      v35 = v33;
    else
      v35 = v32;
    v36 = memcmp(v34, v29, v35);
    v37 = v33 < v32;
    if (v36)
      v37 = v36 < 0;
    if (v37)
    {
      *(_QWORD *)v89 = *v30;
      *(_QWORD *)&v89[7] = *(uint64_t *)((char *)a3 + 15);
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      v38 = (void **)(a3 + 3);
      v80 = a3[3];
      *(_QWORD *)v85 = a3[4];
      *(_QWORD *)&v85[7] = *(uint64_t *)((char *)a3 + 39);
      v78 = *((_BYTE *)a3 + 47);
      a3[5] = 0;
      a3[4] = 0;
      a3[3] = 0;
      v39 = *((_BYTE *)a3 + 48);
      v40 = *(_OWORD *)a4;
      a3[2] = a4[2];
      *(_OWORD *)a3 = v40;
      *((_BYTE *)a4 + 23) = 0;
      *(_BYTE *)a4 = 0;
      if (*((char *)a3 + 47) < 0)
        operator delete(*v38);
      v41 = *(_OWORD *)v21;
      a3[5] = a4[5];
      *(_OWORD *)v38 = v41;
      *((_BYTE *)a4 + 47) = 0;
      *((_BYTE *)a4 + 24) = 0;
      *((_BYTE *)a3 + 48) = *((_BYTE *)a4 + 48);
      if (*((char *)a4 + 23) < 0)
        operator delete((void *)*a4);
      *a4 = v28;
      *v13 = *(_QWORD *)v89;
      *(uint64_t *)((char *)a4 + 15) = *(_QWORD *)&v89[7];
      *((_BYTE *)a4 + 23) = v27;
      if (*((char *)a4 + 47) < 0)
        operator delete(*v21);
      a4[3] = v80;
      a4[4] = *(_QWORD *)v85;
      *(uint64_t *)((char *)a4 + 39) = *(_QWORD *)&v85[7];
      *((_BYTE *)a4 + 47) = v78;
      *((_BYTE *)a4 + 48) = v39;
      v42 = *((_BYTE *)a2 + 23);
      v43 = v42;
      v44 = *(_QWORD *)a2;
      if (v42 >= 0)
        v45 = a2;
      else
        v45 = *(__int128 **)a2;
      v46 = (_QWORD *)a2 + 1;
      v47 = v42 & 0x7F;
      if (v43 >= 0)
        v48 = v47;
      else
        v48 = *((_QWORD *)a2 + 1);
      if (*((char *)a3 + 23) < 0)
      {
        v50 = (const void *)*a3;
        v49 = a3[1];
      }
      else
      {
        v49 = *((unsigned __int8 *)a3 + 23);
        v50 = a3;
      }
      if (v48 >= v49)
        v51 = v49;
      else
        v51 = v48;
      v52 = memcmp(v50, v45, v51);
      v53 = v49 < v48;
      if (v52)
        v53 = v52 < 0;
      if (v53)
      {
        *(_QWORD *)v90 = *v46;
        *(_QWORD *)&v90[7] = *(_QWORD *)((char *)a2 + 15);
        v54 = a2;
        *((_QWORD *)a2 + 1) = 0;
        *((_QWORD *)a2 + 2) = 0;
        *(_QWORD *)a2 = 0;
        v55 = (void **)a2 + 3;
        v81 = *((_QWORD *)a2 + 3);
        *(_QWORD *)v86 = *((_QWORD *)a2 + 4);
        *(_QWORD *)&v86[7] = *(_QWORD *)((char *)a2 + 39);
        v56 = *((_BYTE *)a2 + 47);
        *((_QWORD *)a2 + 5) = 0;
        *((_QWORD *)a2 + 4) = 0;
        *((_QWORD *)a2 + 3) = 0;
        v57 = *((_BYTE *)a2 + 48);
        v58 = *(_OWORD *)a3;
        *((_QWORD *)a2 + 2) = a3[2];
        *a2 = v58;
        *((_BYTE *)a3 + 23) = 0;
        *(_BYTE *)a3 = 0;
        if (*((char *)a2 + 47) < 0)
        {
          operator delete(*v55);
          v54 = a2;
        }
        v59 = *(_OWORD *)v38;
        *((_QWORD *)a2 + 5) = a3[5];
        *(_OWORD *)v55 = v59;
        *((_BYTE *)a3 + 47) = 0;
        *((_BYTE *)a3 + 24) = 0;
        *((_BYTE *)v54 + 48) = *((_BYTE *)a3 + 48);
        if (*((char *)a3 + 23) < 0)
        {
          operator delete((void *)*a3);
          v54 = a2;
        }
        *a3 = v44;
        *v30 = *(_QWORD *)v90;
        *(uint64_t *)((char *)a3 + 15) = *(_QWORD *)&v90[7];
        *((_BYTE *)a3 + 23) = v43;
        if (*((char *)a3 + 47) < 0)
        {
          operator delete(*v38);
          v54 = a2;
        }
        a3[3] = v81;
        a3[4] = *(_QWORD *)v86;
        *(uint64_t *)((char *)a3 + 39) = *(_QWORD *)&v86[7];
        *((_BYTE *)a3 + 47) = v56;
        *((_BYTE *)a3 + 48) = v57;
        v60 = *((_BYTE *)v82 + 23);
        v61 = v60;
        v62 = *v82;
        if (v60 >= 0)
          v63 = v82;
        else
          v63 = (const void *)*v82;
        v64 = v60 & 0x7F;
        if (v61 >= 0)
          v65 = v64;
        else
          v65 = v82[1];
        if (*((char *)v54 + 23) < 0)
        {
          v67 = v54;
          v54 = *(__int128 **)v54;
          v66 = *((_QWORD *)v67 + 1);
        }
        else
        {
          v66 = *((unsigned __int8 *)v54 + 23);
        }
        if (v65 >= v66)
          v68 = v66;
        else
          v68 = v65;
        v69 = memcmp(v54, v63, v68);
        v70 = v66 < v65;
        if (v69)
          v70 = v69 < 0;
        if (v70)
        {
          *(_QWORD *)v91 = v82[1];
          *(_QWORD *)&v91[7] = *(uint64_t *)((char *)v82 + 15);
          v82[1] = 0;
          v82[2] = 0;
          *v82 = 0;
          v72 = (void **)(v82 + 3);
          v71 = v82[3];
          *(_QWORD *)v87 = v82[4];
          *(_QWORD *)&v87[7] = *(uint64_t *)((char *)v82 + 39);
          v73 = *((_BYTE *)v82 + 47);
          v82[4] = 0;
          v82[5] = 0;
          v82[3] = 0;
          v74 = *((_BYTE *)v82 + 48);
          v75 = a2;
          v76 = *a2;
          v82[2] = *((_QWORD *)a2 + 2);
          *(_OWORD *)v82 = v76;
          *((_BYTE *)a2 + 23) = 0;
          *(_BYTE *)a2 = 0;
          if (*((char *)v82 + 47) < 0)
          {
            operator delete(*v72);
            v75 = a2;
          }
          v77 = *(_OWORD *)v55;
          v82[5] = *((_QWORD *)a2 + 5);
          *(_OWORD *)v72 = v77;
          *((_BYTE *)v75 + 47) = 0;
          *((_BYTE *)v75 + 24) = 0;
          *((_BYTE *)v82 + 48) = *((_BYTE *)v75 + 48);
          if (*((char *)v75 + 23) < 0)
          {
            operator delete(*(void **)a2);
            v75 = a2;
          }
          *(_QWORD *)v75 = v62;
          *v46 = *(_QWORD *)v91;
          *(_QWORD *)((char *)a2 + 15) = *(_QWORD *)&v91[7];
          *((_BYTE *)v75 + 23) = v61;
          if (*((char *)v75 + 47) < 0)
          {
            operator delete(*v55);
            v75 = a2;
          }
          *((_QWORD *)v75 + 3) = v71;
          *((_QWORD *)a2 + 4) = *(_QWORD *)v87;
          *(_QWORD *)((char *)a2 + 39) = *(_QWORD *)&v87[7];
          *((_BYTE *)v75 + 47) = v73;
          *((_BYTE *)v75 + 48) = v74;
        }
      }
    }
  }
}

void sub_1C5E615DC(char *a1, char *__s1, const void **a3)
{
  char v6;
  char *v7;
  _QWORD *v8;
  size_t v9;
  size_t v10;
  int v11;
  size_t v12;
  const void *v13;
  char *v14;
  size_t v15;
  int v16;
  BOOL v17;
  size_t v18;
  const void *v19;
  size_t v20;
  int v21;
  _BOOL4 v22;
  void **v23;
  _QWORD *v24;
  const void *v25;
  char v26;
  char v27;
  __int128 v28;
  __int128 v29;
  size_t v30;
  int v31;
  _BOOL4 v32;
  void **v33;
  char v34;
  char v35;
  __int128 v36;
  __int128 v37;
  char v38;
  int v39;
  char *v40;
  char *v41;
  size_t v42;
  size_t v43;
  size_t v44;
  char *v45;
  const void *v46;
  char v47;
  char v48;
  __int128 v49;
  char v50;
  __int128 v51;
  char *v52;
  char *v53;
  char *v54;
  size_t v55;
  size_t v56;
  const void *v57;
  size_t v58;
  int v59;
  _BOOL4 v60;
  uint64_t v61;
  void **v62;
  char v63;
  char v64;
  __int128 v65;
  __int128 v66;
  size_t v67;
  int v68;
  _BOOL4 v69;
  void **v70;
  const void *v71;
  __int128 v72;
  char *v73;
  char v74;
  const void *v75;
  const void *v76;
  _QWORD *v77;
  _BYTE v78[15];
  _BYTE v79[15];
  _BYTE v80[15];
  _BYTE v81[15];
  _BYTE v82[15];
  _BYTE v83[15];
  _BYTE v84[15];
  _BYTE v85[15];
  _BYTE v86[15];
  _BYTE v87[15];

  v6 = a1[23];
  v73 = *(char **)a1;
  v74 = v6;
  if (v6 >= 0)
    v7 = a1;
  else
    v7 = *(char **)a1;
  v8 = a1 + 8;
  v9 = v6 & 0x7F;
  if (v6 >= 0)
    v10 = v6 & 0x7F;
  else
    v10 = *((_QWORD *)a1 + 1);
  v11 = __s1[23];
  if (v11 < 0)
  {
    v13 = *(const void **)__s1;
    v12 = *((_QWORD *)__s1 + 1);
    v14 = *(char **)__s1;
  }
  else
  {
    v12 = __s1[23];
    v13 = *(const void **)__s1;
    v14 = __s1;
  }
  if (v10 >= v12)
    v15 = v12;
  else
    v15 = v10;
  v16 = memcmp(v14, v7, v15);
  v17 = v12 < v10;
  if (v16)
    v17 = v16 < 0;
  v77 = __s1 + 8;
  v18 = *((unsigned __int8 *)a3 + 23);
  v19 = a3;
  if (v17)
  {
    if ((v18 & 0x80) != 0)
    {
      v19 = *a3;
      v18 = (size_t)a3[1];
    }
    if (v12 >= v18)
      v20 = v18;
    else
      v20 = v12;
    v21 = memcmp(v19, v14, v20);
    v22 = v21 < 0;
    if (!v21)
      v22 = v18 < v12;
    v23 = (void **)(a1 + 24);
    v24 = a1 + 32;
    if (v22)
    {
      *(_QWORD *)v83 = *v8;
      *(_QWORD *)&v83[7] = *(_QWORD *)((char *)v8 + 7);
      *((_QWORD *)a1 + 1) = 0;
      *((_QWORD *)a1 + 2) = 0;
      *(_QWORD *)a1 = 0;
      v25 = (const void *)*((_QWORD *)a1 + 3);
      *(_QWORD *)v78 = *v24;
      *(_QWORD *)&v78[7] = *(_QWORD *)(a1 + 39);
      v26 = a1[47];
      *((_QWORD *)a1 + 4) = 0;
      *((_QWORD *)a1 + 5) = 0;
      *v23 = 0;
      v27 = a1[48];
      v28 = *(_OWORD *)a3;
      *((_QWORD *)a1 + 2) = a3[2];
      *(_OWORD *)a1 = v28;
      *((_BYTE *)a3 + 23) = 0;
      *(_BYTE *)a3 = 0;
      if (a1[47] < 0)
        operator delete(*v23);
      v29 = *(_OWORD *)(a3 + 3);
      *((_QWORD *)a1 + 5) = a3[5];
      *(_OWORD *)v23 = v29;
      *((_BYTE *)a3 + 47) = 0;
      *((_BYTE *)a3 + 24) = 0;
      a1[48] = *((_BYTE *)a3 + 48);
      if (*((char *)a3 + 23) < 0)
        operator delete((void *)*a3);
      *a3 = v73;
      a3[1] = *(const void **)v83;
      *(const void **)((char *)a3 + 15) = *(const void **)&v83[7];
      *((_BYTE *)a3 + 23) = v74;
      if (*((char *)a3 + 47) < 0)
        operator delete((void *)a3[3]);
      a3[3] = v25;
      a3[4] = *(const void **)v78;
      *(const void **)((char *)a3 + 39) = *(const void **)&v78[7];
      *((_BYTE *)a3 + 47) = v26;
      *((_BYTE *)a3 + 48) = v27;
    }
    else
    {
      *(_QWORD *)v85 = *v8;
      *(_QWORD *)&v85[7] = *(_QWORD *)((char *)v8 + 7);
      *((_QWORD *)a1 + 1) = 0;
      *((_QWORD *)a1 + 2) = 0;
      *(_QWORD *)a1 = 0;
      v46 = (const void *)*((_QWORD *)a1 + 3);
      *(_QWORD *)v80 = *v24;
      *(_QWORD *)&v80[7] = *(_QWORD *)(a1 + 39);
      v47 = a1[47];
      *((_QWORD *)a1 + 4) = 0;
      *((_QWORD *)a1 + 5) = 0;
      *v23 = 0;
      v48 = a1[48];
      v49 = *(_OWORD *)__s1;
      *((_QWORD *)a1 + 2) = *((_QWORD *)__s1 + 2);
      *(_OWORD *)a1 = v49;
      __s1[23] = 0;
      *__s1 = 0;
      v50 = v74;
      if (a1[47] < 0)
        operator delete(*v23);
      v51 = *(_OWORD *)(__s1 + 24);
      *((_QWORD *)a1 + 5) = *((_QWORD *)__s1 + 5);
      *(_OWORD *)v23 = v51;
      __s1[47] = 0;
      __s1[24] = 0;
      a1[48] = __s1[48];
      if (__s1[23] < 0)
        operator delete(*(void **)__s1);
      v52 = v73;
      *(_QWORD *)__s1 = v73;
      *v77 = *(_QWORD *)v85;
      *(_QWORD *)(__s1 + 15) = *(_QWORD *)&v85[7];
      __s1[23] = v74;
      if (__s1[47] < 0)
      {
        operator delete(*((void **)__s1 + 3));
        v50 = __s1[23];
        v52 = *(char **)__s1;
        v9 = v50 & 0x7F;
      }
      v76 = v46;
      *((_QWORD *)__s1 + 3) = v46;
      *((_QWORD *)__s1 + 4) = *(_QWORD *)v80;
      *(_QWORD *)(__s1 + 39) = *(_QWORD *)&v80[7];
      __s1[47] = v47;
      __s1[48] = v48;
      v53 = v52;
      if (v50 >= 0)
        v54 = __s1;
      else
        v54 = v52;
      if (v50 >= 0)
        v55 = v9;
      else
        v55 = *((_QWORD *)__s1 + 1);
      if (*((char *)a3 + 23) < 0)
      {
        v57 = *a3;
        v56 = (size_t)a3[1];
      }
      else
      {
        v56 = *((unsigned __int8 *)a3 + 23);
        v57 = a3;
      }
      if (v55 >= v56)
        v67 = v56;
      else
        v67 = v55;
      v68 = memcmp(v57, v54, v67);
      v69 = v56 < v55;
      if (v68)
        v69 = v68 < 0;
      if (v69)
      {
        v70 = (void **)(__s1 + 24);
        *(_QWORD *)v87 = *v77;
        *(_QWORD *)&v87[7] = *(_QWORD *)(__s1 + 15);
        *((_QWORD *)__s1 + 1) = 0;
        *((_QWORD *)__s1 + 2) = 0;
        *(_QWORD *)__s1 = 0;
        *(_QWORD *)v82 = *((_QWORD *)__s1 + 4);
        *(_QWORD *)&v82[7] = *(_QWORD *)(__s1 + 39);
        *((_QWORD *)__s1 + 4) = 0;
        *((_QWORD *)__s1 + 5) = 0;
        *((_QWORD *)__s1 + 3) = 0;
        v71 = a3[2];
        *(_OWORD *)__s1 = *(_OWORD *)a3;
        *((_QWORD *)__s1 + 2) = v71;
        *((_BYTE *)a3 + 23) = 0;
        *(_BYTE *)a3 = 0;
        if (__s1[47] < 0)
          operator delete(*v70);
        v72 = *(_OWORD *)(a3 + 3);
        *((_QWORD *)__s1 + 5) = a3[5];
        *(_OWORD *)v70 = v72;
        *((_BYTE *)a3 + 47) = 0;
        *((_BYTE *)a3 + 24) = 0;
        __s1[48] = *((_BYTE *)a3 + 48);
        if (*((char *)a3 + 23) < 0)
          operator delete((void *)*a3);
        *a3 = v53;
        a3[1] = *(const void **)v87;
        *(const void **)((char *)a3 + 15) = *(const void **)&v87[7];
        *((_BYTE *)a3 + 23) = v50;
        if (*((char *)a3 + 47) < 0)
          operator delete((void *)a3[3]);
        a3[3] = v76;
        a3[4] = *(const void **)v82;
        *(const void **)((char *)a3 + 39) = *(const void **)&v82[7];
        *((_BYTE *)a3 + 47) = v47;
        *((_BYTE *)a3 + 48) = v48;
      }
    }
  }
  else
  {
    if ((v18 & 0x80) != 0)
    {
      v19 = *a3;
      v18 = (size_t)a3[1];
    }
    if (v12 >= v18)
      v30 = v18;
    else
      v30 = v12;
    v31 = memcmp(v19, v14, v30);
    v32 = v18 < v12;
    if (v31)
      v32 = v31 < 0;
    if (v32)
    {
      *(_QWORD *)v84 = *v77;
      *(_QWORD *)&v84[7] = *(_QWORD *)(__s1 + 15);
      *((_QWORD *)__s1 + 1) = 0;
      *((_QWORD *)__s1 + 2) = 0;
      *(_QWORD *)__s1 = 0;
      v33 = (void **)(__s1 + 24);
      v75 = (const void *)*((_QWORD *)__s1 + 3);
      *(_QWORD *)v79 = *((_QWORD *)__s1 + 4);
      *(_QWORD *)&v79[7] = *(_QWORD *)(__s1 + 39);
      v34 = __s1[47];
      *((_QWORD *)__s1 + 5) = 0;
      *((_QWORD *)__s1 + 4) = 0;
      *((_QWORD *)__s1 + 3) = 0;
      v35 = __s1[48];
      v36 = *(_OWORD *)a3;
      *((_QWORD *)__s1 + 2) = a3[2];
      *(_OWORD *)__s1 = v36;
      *((_BYTE *)a3 + 23) = 0;
      *(_BYTE *)a3 = 0;
      if (__s1[47] < 0)
        operator delete(*v33);
      v37 = *(_OWORD *)(a3 + 3);
      *((_QWORD *)__s1 + 5) = a3[5];
      *(_OWORD *)v33 = v37;
      *((_BYTE *)a3 + 47) = 0;
      *((_BYTE *)a3 + 24) = 0;
      __s1[48] = *((_BYTE *)a3 + 48);
      if (*((char *)a3 + 23) < 0)
        operator delete((void *)*a3);
      *a3 = v13;
      a3[1] = *(const void **)v84;
      *(const void **)((char *)a3 + 15) = *(const void **)&v84[7];
      *((_BYTE *)a3 + 23) = v11;
      if (*((char *)a3 + 47) < 0)
        operator delete((void *)a3[3]);
      a3[3] = v75;
      a3[4] = *(const void **)v79;
      *(const void **)((char *)a3 + 39) = *(const void **)&v79[7];
      *((_BYTE *)a3 + 47) = v34;
      *((_BYTE *)a3 + 48) = v35;
      v38 = a1[23];
      v39 = v38;
      v40 = *(char **)a1;
      if (v38 >= 0)
        v41 = a1;
      else
        v41 = *(char **)a1;
      v42 = v38 & 0x7F;
      if (v39 >= 0)
        v43 = v42;
      else
        v43 = *((_QWORD *)a1 + 1);
      if (__s1[23] < 0)
      {
        v45 = *(char **)__s1;
        v44 = *((_QWORD *)__s1 + 1);
      }
      else
      {
        v44 = __s1[23];
        v45 = __s1;
      }
      if (v43 >= v44)
        v58 = v44;
      else
        v58 = v43;
      v59 = memcmp(v45, v41, v58);
      v60 = v44 < v43;
      if (v59)
        v60 = v59 < 0;
      if (v60)
      {
        *(_QWORD *)v86 = *v8;
        *(_QWORD *)&v86[7] = *(_QWORD *)((char *)v8 + 7);
        *((_QWORD *)a1 + 1) = 0;
        *((_QWORD *)a1 + 2) = 0;
        *(_QWORD *)a1 = 0;
        v62 = (void **)(a1 + 24);
        v61 = *((_QWORD *)a1 + 3);
        *(_QWORD *)v81 = *((_QWORD *)a1 + 4);
        *(_QWORD *)&v81[7] = *(_QWORD *)(a1 + 39);
        v63 = a1[47];
        *((_QWORD *)a1 + 4) = 0;
        *((_QWORD *)a1 + 5) = 0;
        *((_QWORD *)a1 + 3) = 0;
        v64 = a1[48];
        v65 = *(_OWORD *)__s1;
        *((_QWORD *)a1 + 2) = *((_QWORD *)__s1 + 2);
        *(_OWORD *)a1 = v65;
        __s1[23] = 0;
        *__s1 = 0;
        if (a1[47] < 0)
          operator delete(*v62);
        v66 = *(_OWORD *)v33;
        *((_QWORD *)a1 + 5) = *((_QWORD *)__s1 + 5);
        *(_OWORD *)v62 = v66;
        __s1[47] = 0;
        __s1[24] = 0;
        a1[48] = __s1[48];
        if (__s1[23] < 0)
          operator delete(*(void **)__s1);
        *(_QWORD *)__s1 = v40;
        *v77 = *(_QWORD *)v86;
        *(_QWORD *)(__s1 + 15) = *(_QWORD *)&v86[7];
        __s1[23] = v39;
        if (__s1[47] < 0)
          operator delete(*v33);
        *((_QWORD *)__s1 + 3) = v61;
        *((_QWORD *)__s1 + 4) = *(_QWORD *)v81;
        *(_QWORD *)(__s1 + 39) = *(_QWORD *)&v81[7];
        __s1[47] = v63;
        __s1[48] = v64;
      }
    }
  }
}

BOOL sub_1C5E61C74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BOOL8 result;
  void **v6;
  char v7;
  int v8;
  const void *v9;
  const void *v10;
  size_t v11;
  size_t v12;
  size_t v13;
  const void *v14;
  const void **v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  BOOL v20;
  const void *v21;
  size_t v22;
  size_t v23;
  size_t v24;
  const void *v25;
  size_t v26;
  int v27;
  _BOOL4 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  const void *v36;
  size_t v37;
  size_t v38;
  __int128 *v39;
  size_t v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  int v46;
  _BOOL4 v47;
  uint64_t v48;
  void **v49;
  char v50;
  char v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  char v61;
  _QWORD v62[3];

  v2 = a2;
  v62[2] = *MEMORY[0x1E0C80C00];
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (void **)(a2 - 56);
      v7 = *(_BYTE *)(a1 + 23);
      v8 = v7;
      v9 = *(const void **)a1;
      if (v7 >= 0)
        v10 = (const void *)a1;
      else
        v10 = *(const void **)a1;
      v11 = v7 & 0x7F;
      if (v8 >= 0)
        v12 = v11;
      else
        v12 = *(_QWORD *)(a1 + 8);
      if (*(char *)(v2 - 33) < 0)
      {
        v14 = *(const void **)(v2 - 56);
        v13 = *(_QWORD *)(v2 - 48);
      }
      else
      {
        v13 = *(unsigned __int8 *)(v2 - 33);
        v14 = (const void *)(v2 - 56);
      }
      if (v12 >= v13)
        v45 = v13;
      else
        v45 = v12;
      v46 = memcmp(v14, v10, v45);
      v47 = v13 < v12;
      if (v46)
        v47 = v46 < 0;
      if (v47)
      {
        *(_QWORD *)&v57 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)((char *)&v57 + 7) = *(_QWORD *)(a1 + 15);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        v49 = (void **)(a1 + 24);
        v48 = *(_QWORD *)(a1 + 24);
        v62[0] = *(_QWORD *)(a1 + 32);
        *(_QWORD *)((char *)v62 + 7) = *(_QWORD *)(a1 + 39);
        v50 = *(_BYTE *)(a1 + 47);
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 40) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        v51 = *(_BYTE *)(a1 + 48);
        v52 = *(_OWORD *)v6;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(v2 - 40);
        *(_OWORD *)a1 = v52;
        *(_BYTE *)(v2 - 33) = 0;
        *(_BYTE *)(v2 - 56) = 0;
        if (*(char *)(a1 + 47) < 0)
          operator delete(*v49);
        v53 = *(_OWORD *)(v2 - 32);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(v2 - 16);
        *(_OWORD *)v49 = v53;
        *(_BYTE *)(v2 - 9) = 0;
        *(_BYTE *)(v2 - 32) = 0;
        *(_BYTE *)(a1 + 48) = *(_BYTE *)(v2 - 8);
        if (*(char *)(v2 - 33) < 0)
          operator delete(*v6);
        v54 = v57;
        *(_QWORD *)(v2 - 56) = v9;
        *(_QWORD *)(v2 - 48) = v54;
        *(_QWORD *)(v2 - 41) = *(_QWORD *)((char *)&v57 + 7);
        *(_BYTE *)(v2 - 33) = v8;
        if (*(char *)(v2 - 9) < 0)
          operator delete(*(void **)(v2 - 32));
        v55 = v62[0];
        *(_QWORD *)(v2 - 32) = v48;
        *(_QWORD *)(v2 - 24) = v55;
        *(_QWORD *)(v2 - 17) = *(_QWORD *)((char *)v62 + 7);
        *(_BYTE *)(v2 - 9) = v50;
        *(_BYTE *)(v2 - 8) = v51;
      }
      return 1;
    case 3:
      sub_1C5E615DC((char *)a1, (char *)(a1 + 56), (const void **)(a2 - 56));
      return 1;
    case 4:
      sub_1C5E620F8((uint64_t *)a1, (uint64_t *)(a1 + 56), (__int128 *)(a1 + 112), (__int128 *)(a2 - 56));
      return 1;
    case 5:
      sub_1C5E60FF0((uint64_t *)a1, (__int128 *)(a1 + 56), (uint64_t *)(a1 + 112), (uint64_t *)(a1 + 168), (__int128 *)(a2 - 56));
      return 1;
    default:
      v15 = (const void **)(a1 + 112);
      sub_1C5E615DC((char *)a1, (char *)(a1 + 56), (const void **)(a1 + 112));
      v16 = a1 + 168;
      if (a1 + 168 == v2)
        return 1;
      v17 = 0;
      v18 = 0;
      v56 = v2;
      break;
  }
  while (1)
  {
    v19 = *((_BYTE *)v15 + 23);
    v20 = v19 < 0;
    if (v19 >= 0)
      v21 = v15;
    else
      v21 = *v15;
    v22 = v19 & 0x7F;
    if (v20)
      v23 = (size_t)v15[1];
    else
      v23 = v22;
    if (*(char *)(v16 + 23) < 0)
    {
      v25 = *(const void **)v16;
      v24 = *(_QWORD *)(v16 + 8);
    }
    else
    {
      v24 = *(unsigned __int8 *)(v16 + 23);
      v25 = (const void *)v16;
    }
    if (v23 >= v24)
      v26 = v24;
    else
      v26 = v23;
    v27 = memcmp(v25, v21, v26);
    v28 = v24 < v23;
    if (v27)
      v28 = v27 < 0;
    if (v28)
    {
      v57 = *(_OWORD *)v16;
      v58 = *(_QWORD *)(v16 + 16);
      *(_QWORD *)v16 = 0;
      *(_QWORD *)(v16 + 8) = 0;
      v29 = *(_OWORD *)(v16 + 24);
      *(_QWORD *)(v16 + 16) = 0;
      *(_QWORD *)(v16 + 24) = 0;
      v59 = v29;
      v60 = *(_QWORD *)(v16 + 40);
      v61 = *(_BYTE *)(v16 + 48);
      v30 = v17;
      *(_QWORD *)(v16 + 32) = 0;
      *(_QWORD *)(v16 + 40) = 0;
      while (1)
      {
        v31 = a1 + v30;
        v32 = (void **)(a1 + v30 + 168);
        if (*(char *)(a1 + v30 + 191) < 0)
          operator delete(*v32);
        *(_OWORD *)v32 = *(_OWORD *)(v31 + 112);
        *(_QWORD *)(a1 + v30 + 184) = *(_QWORD *)(v31 + 128);
        *(_BYTE *)(v31 + 135) = 0;
        *(_BYTE *)(v31 + 112) = 0;
        v33 = v31 + 192;
        if (*(char *)(v31 + 215) < 0)
          operator delete(*(void **)v33);
        v34 = a1 + v30;
        *(_OWORD *)v33 = *(_OWORD *)(a1 + v30 + 136);
        *(_QWORD *)(v33 + 16) = *(_QWORD *)(a1 + v30 + 152);
        *(_BYTE *)(v34 + 159) = 0;
        *(_BYTE *)(v34 + 136) = 0;
        *(_BYTE *)(v34 + 216) = *(_BYTE *)(a1 + v30 + 160);
        if (v30 == -112)
          break;
        v35 = *(_BYTE *)(v34 + 79);
        if (v35 >= 0)
          v36 = (const void *)(v34 + 56);
        else
          v36 = *(const void **)(v34 + 56);
        if (v35 >= 0)
          v37 = v35 & 0x7F;
        else
          v37 = *(_QWORD *)(v34 + 64);
        if (v58 >= 0)
          v38 = HIBYTE(v58) & 0x7F;
        else
          v38 = *((_QWORD *)&v57 + 1);
        if (v58 >= 0)
          v39 = &v57;
        else
          v39 = (__int128 *)v57;
        if (v37 >= v38)
          v40 = v38;
        else
          v40 = v37;
        v41 = memcmp(v39, v36, v40);
        v42 = v38 < v37;
        if (v41)
          v42 = v41 < 0;
        v30 -= 56;
        if (!v42)
        {
          v43 = a1 + v30 + 168;
          goto LABEL_53;
        }
      }
      v43 = a1;
LABEL_53:
      v2 = v56;
      if (*(char *)(v43 + 23) < 0)
        operator delete(*(void **)v43);
      v44 = v34 + 136;
      *(_OWORD *)v43 = v57;
      *(_QWORD *)(v43 + 16) = v58;
      HIBYTE(v58) = 0;
      LOBYTE(v57) = 0;
      if (*(char *)(v43 + 47) < 0)
        operator delete(*(void **)v44);
      *(_OWORD *)v44 = v59;
      *(_QWORD *)(v44 + 16) = v60;
      *(_BYTE *)(v43 + 48) = v61;
      if (++v18 == 8)
        return v16 + 56 == v56;
    }
    v15 = (const void **)v16;
    v17 += 56;
    v16 += 56;
    if (v16 == v2)
      return 1;
  }
}

void sub_1C5E620F8(uint64_t *a1, uint64_t *a2, __int128 *a3, __int128 *a4)
{
  char v8;
  int v9;
  const void *v10;
  const void *v11;
  _QWORD *v12;
  size_t v13;
  size_t v14;
  size_t v15;
  const void *v16;
  size_t v17;
  int v18;
  _BOOL4 v19;
  void **v20;
  char v21;
  __int128 v22;
  __int128 v23;
  char v24;
  int v25;
  uint64_t v26;
  const void *v27;
  size_t v28;
  size_t v29;
  size_t v30;
  const void *v31;
  size_t v32;
  int v33;
  _BOOL4 v34;
  uint64_t v35;
  void **v36;
  char v37;
  __int128 v38;
  __int128 v39;
  char v40;
  int v41;
  uint64_t v42;
  const void *v43;
  size_t v44;
  size_t v45;
  size_t v46;
  const void *v47;
  size_t v48;
  int v49;
  _BOOL4 v50;
  uint64_t v51;
  void **v52;
  char v53;
  char v54;
  __int128 v55;
  __int128 v56;
  char v57;
  char v58;
  char v59;
  uint64_t v60;
  _QWORD *v61;
  _BYTE v62[15];
  _BYTE v63[15];
  _BYTE v64[15];
  _BYTE v65[15];
  _BYTE v66[15];
  _BYTE v67[15];

  sub_1C5E615DC((char *)a1, (char *)a2, (const void **)a3);
  v8 = *((_BYTE *)a3 + 23);
  v9 = v8;
  v10 = *(const void **)a3;
  if (v8 >= 0)
    v11 = a3;
  else
    v11 = *(const void **)a3;
  v12 = (_QWORD *)a3 + 1;
  v13 = v8 & 0x7F;
  if (v9 >= 0)
    v14 = v13;
  else
    v14 = *((_QWORD *)a3 + 1);
  if (*((char *)a4 + 23) < 0)
  {
    v16 = *(const void **)a4;
    v15 = *((_QWORD *)a4 + 1);
  }
  else
  {
    v15 = *((unsigned __int8 *)a4 + 23);
    v16 = a4;
  }
  if (v14 >= v15)
    v17 = v15;
  else
    v17 = v14;
  v18 = memcmp(v16, v11, v17);
  v19 = v15 < v14;
  if (v18)
    v19 = v18 < 0;
  if (v19)
  {
    *(_QWORD *)v65 = *v12;
    *(_QWORD *)&v65[7] = *(_QWORD *)((char *)a3 + 15);
    *((_QWORD *)a3 + 1) = 0;
    *((_QWORD *)a3 + 2) = 0;
    *(_QWORD *)a3 = 0;
    v20 = (void **)a3 + 3;
    v60 = *((_QWORD *)a3 + 3);
    *(_QWORD *)v62 = *((_QWORD *)a3 + 4);
    *(_QWORD *)&v62[7] = *(_QWORD *)((char *)a3 + 39);
    v58 = *((_BYTE *)a3 + 47);
    *((_QWORD *)a3 + 5) = 0;
    *((_QWORD *)a3 + 4) = 0;
    *((_QWORD *)a3 + 3) = 0;
    v21 = *((_BYTE *)a3 + 48);
    v22 = *a4;
    *((_QWORD *)a3 + 2) = *((_QWORD *)a4 + 2);
    *a3 = v22;
    *((_BYTE *)a4 + 23) = 0;
    *(_BYTE *)a4 = 0;
    if (*((char *)a3 + 47) < 0)
      operator delete(*v20);
    v23 = *(__int128 *)((char *)a4 + 24);
    *((_QWORD *)a3 + 5) = *((_QWORD *)a4 + 5);
    *(_OWORD *)v20 = v23;
    *((_BYTE *)a4 + 47) = 0;
    *((_BYTE *)a4 + 24) = 0;
    *((_BYTE *)a3 + 48) = *((_BYTE *)a4 + 48);
    if (*((char *)a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(_QWORD *)a4 = v10;
    *((_QWORD *)a4 + 1) = *(_QWORD *)v65;
    *(_QWORD *)((char *)a4 + 15) = *(_QWORD *)&v65[7];
    *((_BYTE *)a4 + 23) = v9;
    if (*((char *)a4 + 47) < 0)
      operator delete(*((void **)a4 + 3));
    *((_QWORD *)a4 + 3) = v60;
    *((_QWORD *)a4 + 4) = *(_QWORD *)v62;
    *(_QWORD *)((char *)a4 + 39) = *(_QWORD *)&v62[7];
    *((_BYTE *)a4 + 47) = v58;
    *((_BYTE *)a4 + 48) = v21;
    v24 = *((_BYTE *)a2 + 23);
    v25 = v24;
    v26 = *a2;
    if (v24 >= 0)
      v27 = a2;
    else
      v27 = (const void *)*a2;
    v61 = a2 + 1;
    v28 = v24 & 0x7F;
    if (v25 >= 0)
      v29 = v28;
    else
      v29 = a2[1];
    if (*((char *)a3 + 23) < 0)
    {
      v31 = *(const void **)a3;
      v30 = *((_QWORD *)a3 + 1);
    }
    else
    {
      v30 = *((unsigned __int8 *)a3 + 23);
      v31 = a3;
    }
    if (v29 >= v30)
      v32 = v30;
    else
      v32 = v29;
    v33 = memcmp(v31, v27, v32);
    v34 = v30 < v29;
    if (v33)
      v34 = v33 < 0;
    if (v34)
    {
      *(_QWORD *)v66 = *v61;
      *(_QWORD *)&v66[7] = *(uint64_t *)((char *)a2 + 15);
      a2[1] = 0;
      a2[2] = 0;
      *a2 = 0;
      v36 = (void **)(a2 + 3);
      v35 = a2[3];
      *(_QWORD *)v63 = a2[4];
      *(_QWORD *)&v63[7] = *(uint64_t *)((char *)a2 + 39);
      v37 = *((_BYTE *)a2 + 47);
      a2[5] = 0;
      a2[4] = 0;
      a2[3] = 0;
      v57 = *((_BYTE *)a2 + 48);
      v59 = v37;
      v38 = *a3;
      a2[2] = *((_QWORD *)a3 + 2);
      *(_OWORD *)a2 = v38;
      *((_BYTE *)a3 + 23) = 0;
      *(_BYTE *)a3 = 0;
      if (*((char *)a2 + 47) < 0)
        operator delete(*v36);
      v39 = *(_OWORD *)v20;
      a2[5] = *((_QWORD *)a3 + 5);
      *(_OWORD *)v36 = v39;
      *((_BYTE *)a3 + 47) = 0;
      *((_BYTE *)a3 + 24) = 0;
      *((_BYTE *)a2 + 48) = *((_BYTE *)a3 + 48);
      if (*((char *)a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(_QWORD *)a3 = v26;
      *v12 = *(_QWORD *)v66;
      *(_QWORD *)((char *)a3 + 15) = *(_QWORD *)&v66[7];
      *((_BYTE *)a3 + 23) = v25;
      if (*((char *)a3 + 47) < 0)
        operator delete(*v20);
      *((_QWORD *)a3 + 3) = v35;
      *((_QWORD *)a3 + 4) = *(_QWORD *)v63;
      *(_QWORD *)((char *)a3 + 39) = *(_QWORD *)&v63[7];
      *((_BYTE *)a3 + 47) = v59;
      *((_BYTE *)a3 + 48) = v57;
      v40 = *((_BYTE *)a1 + 23);
      v41 = v40;
      v42 = *a1;
      if (v40 >= 0)
        v43 = a1;
      else
        v43 = (const void *)*a1;
      v44 = v40 & 0x7F;
      if (v41 >= 0)
        v45 = v44;
      else
        v45 = a1[1];
      if (*((char *)a2 + 23) < 0)
      {
        v47 = (const void *)*a2;
        v46 = a2[1];
      }
      else
      {
        v46 = *((unsigned __int8 *)a2 + 23);
        v47 = a2;
      }
      if (v45 >= v46)
        v48 = v46;
      else
        v48 = v45;
      v49 = memcmp(v47, v43, v48);
      v50 = v46 < v45;
      if (v49)
        v50 = v49 < 0;
      if (v50)
      {
        *(_QWORD *)v67 = a1[1];
        *(_QWORD *)&v67[7] = *(uint64_t *)((char *)a1 + 15);
        a1[1] = 0;
        a1[2] = 0;
        *a1 = 0;
        v52 = (void **)(a1 + 3);
        v51 = a1[3];
        *(_QWORD *)v64 = a1[4];
        *(_QWORD *)&v64[7] = *(uint64_t *)((char *)a1 + 39);
        v53 = *((_BYTE *)a1 + 47);
        a1[4] = 0;
        a1[5] = 0;
        a1[3] = 0;
        v54 = *((_BYTE *)a1 + 48);
        v55 = *(_OWORD *)a2;
        a1[2] = a2[2];
        *(_OWORD *)a1 = v55;
        *((_BYTE *)a2 + 23) = 0;
        *(_BYTE *)a2 = 0;
        if (*((char *)a1 + 47) < 0)
          operator delete(*v52);
        v56 = *(_OWORD *)v36;
        a1[5] = a2[5];
        *(_OWORD *)v52 = v56;
        *((_BYTE *)a2 + 47) = 0;
        *((_BYTE *)a2 + 24) = 0;
        *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
        if (*((char *)a2 + 23) < 0)
          operator delete((void *)*a2);
        *a2 = v42;
        *v61 = *(_QWORD *)v67;
        *(uint64_t *)((char *)a2 + 15) = *(_QWORD *)&v67[7];
        *((_BYTE *)a2 + 23) = v41;
        if (*((char *)a2 + 47) < 0)
          operator delete(*v36);
        a2[3] = v51;
        a2[4] = *(_QWORD *)v64;
        *(uint64_t *)((char *)a2 + 39) = *(_QWORD *)&v64[7];
        *((_BYTE *)a2 + 47) = v53;
        *((_BYTE *)a2 + 48) = v54;
      }
    }
  }
}

_QWORD *sub_1C5E6256C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  _QWORD *v17;
  __int128 v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = ((uint64_t)v4 - *(_QWORD *)a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    abort();
  v10 = *(_QWORD *)(a1 + 16) - (_QWORD)v3;
  if (v10 >> 3 > v6)
    v6 = v10 >> 3;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
    v11 = 0xFFFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  if (v11)
  {
    if (v11 >> 60)
      sub_1C4764EE4();
    v12 = (char *)operator new(16 * v11);
  }
  else
  {
    v12 = 0;
  }
  v13 = &v12[16 * v5];
  *(_QWORD *)v13 = a2;
  *((_QWORD *)v13 + 1) = a3;
  if (a3)
  {
    v14 = (unint64_t *)(a3 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v3 = *(_QWORD **)a1;
    v4 = *(_QWORD **)(a1 + 8);
  }
  v16 = &v12[16 * v11];
  v17 = v13 + 16;
  if (v4 == v3)
  {
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
  }
  else
  {
    do
    {
      v18 = *((_OWORD *)v4 - 1);
      v4 -= 2;
      *((_OWORD *)v13 - 1) = v18;
      v13 -= 16;
      *v4 = 0;
      v4[1] = 0;
    }
    while (v4 != v3);
    v3 = *(_QWORD **)a1;
    v19 = *(_QWORD **)(a1 + 8);
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    while (v19 != v3)
    {
      v20 = (std::__shared_weak_count *)*(v19 - 1);
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v19 -= 2;
    }
  }
  if (v3)
    operator delete(v3);
  return v17;
}

void sub_1C5E626BC(unsigned int *a1, size_t count)
{
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  char *v10;

  v4 = (char *)malloc_type_calloc(count, 0x10uLL, 0x6D9A4F0CuLL);
  if (!v4 && (count || (v4 = (char *)malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  v5 = *a1;
  v6 = (_QWORD *)*((_QWORD *)a1 + 13);
  if ((_DWORD)v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v8 = v6[2 * i + 1];
      if (v8)
      {
        do
        {
          v9 = *(_QWORD *)(v8 + 80);
          v10 = &v4[16 * ((count - 1) & *(_DWORD *)(v8 + 88))];
          *(_QWORD *)(v8 + 80) = *((_QWORD *)v10 + 1);
          ++*((_DWORD *)v10 + 1);
          *((_QWORD *)v10 + 1) = v8;
          v8 = v9;
        }
        while (v9);
      }
    }
  }
  free(v6);
  *a1 = count;
  *((_QWORD *)a1 + 13) = v4;
}

void llvm::vfs::OutputBackend::createFile(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int16 a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD v8[4];
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];
  _QWORD v16[17];

  v16[16] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v15 = v16;
  *(_OWORD *)&v15[8] = xmmword_1C85F20B0;
  llvm::Twine::toVector(a2, (uint64_t)v15);
  if ((a3 & 0xFF00) != 0 && (a3 & 3) == 2)
  {
    v7 = operator new();
    v12 = 261;
    v10 = *(_OWORD *)v15;
    *(_QWORD *)(v7 + 16) = llvm::vfs::output_category((llvm::vfs *)v7);
    *(_QWORD *)v7 = off_1E81A4C70;
    *(_QWORD *)(v7 + 8) = 2;
    llvm::Twine::str((llvm::Twine *)&v10, (_QWORD *)(v7 + 24));
    *(_QWORD *)v7 = &unk_1E81A4CC0;
    *(_BYTE *)(v7 + 48) = a3;
LABEL_5:
    *(_BYTE *)(a4 + 72) |= 1u;
    *(_QWORD *)a4 = v7;
    goto LABEL_7;
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 16))(&v10, a1, *(_QWORD *)v15, *(_QWORD *)&v15[8], a3);
  v7 = v10;
  if ((BYTE8(v10) & 1) != 0 && (_QWORD)v10)
    goto LABEL_5;
  v9 = 261;
  v8[0] = *(_QWORD *)v15;
  v8[1] = *(_QWORD *)&v15[8];
  llvm::Twine::str((llvm::Twine *)v8, &v10);
  v13 = 0;
  v14 = 0;
  v11 = v7;
  *(_BYTE *)(a4 + 72) &= ~1u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_QWORD *)(a4 + 56) = 0;
  *(_QWORD *)(a4 + 64) = 0;
  sub_1C5E629A8(a4, &v10);
  sub_1C5E62954((uint64_t)&v10);
LABEL_7:
  if (*(_QWORD **)v15 != v16)
    free(*(void **)v15);
}

uint64_t sub_1C5E62954(uint64_t a1)
{
  uint64_t v2;

  llvm::vfs::OutputFile::destroy((__int128 *)a1);
  sub_1C5052E10((_QWORD *)(a1 + 32));
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1C5E629A8(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  sub_1C5E62A2C((_QWORD *)(a1 + 32), (_QWORD *)a2 + 4);
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = 0;
  return a1;
}

_QWORD *sub_1C5E62A2C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  __int128 v5;

  if (a1 != a2)
  {
    sub_1C5052E10(a1);
    a1[3] = 0;
    v4 = a2[3];
    a1[3] = v4;
    if (a2[3] >= 8uLL)
    {
      if ((v4 & 2) != 0 && (v4 & 4) != 0)
      {
        (*(void (**)(_QWORD *, _QWORD *))((v4 & 0xFFFFFFFFFFFFFFF8) + 8))(a1, a2);
      }
      else
      {
        v5 = *(_OWORD *)a2;
        a1[2] = a2[2];
        *(_OWORD *)a1 = v5;
      }
      a2[3] = 0;
    }
  }
  return a1;
}

void llvm::vfs::OnDiskOutputBackend::makeAbsolute(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t absolute;
  uint64_t v7;
  _QWORD *v8;
  _QWORD v9[4];
  __int16 v10;

  v3 = *a1;
  v4 = a1[1];
  v10 = 261;
  v9[0] = v3;
  v9[1] = v4;
  absolute = llvm::sys::fs::make_absolute((uint64_t)a1);
  if ((_DWORD)absolute)
  {
    v7 = v5;
    v8 = (_QWORD *)operator new();
    v8[2] = v7;
    *v8 = off_1E81A4C70;
    v8[1] = absolute;
    llvm::Twine::str((llvm::Twine *)v9, v8 + 3);
  }
  else
  {
    v8 = 0;
  }
  *a2 = v8;
}

void llvm::vfs::OnDiskOutputBackend::createFileImpl(_BYTE *__src@<X1>, size_t __n@<X2>, _BYTE *a3@<X0>, __int16 a4@<W3>, uint64_t a5@<X8>)
{
  void *v7;
  size_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t absolute;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  __darwin_ino64_t v18;
  char v19;
  char *v20;
  void *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  const void *v28;
  int v29;
  const char *v30;
  int v31;
  const std::error_category *v32;
  char *v33;
  char v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  size_t v46;
  size_t v47;
  char v48;
  BOOL v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  size_t v59;
  char v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char *v66;
  char *__srca;
  char *v68;
  char *v69;
  _BYTE v70[8];
  char *v71;
  char *v72;
  __int16 v73;
  _BYTE v74[44];
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  stat v78;
  void *v79;
  __int128 v80;
  _BYTE v81[256];
  char *v82;
  __int128 v83;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;

  v7 = __src;
  v86 = *MEMORY[0x1E0C80C00];
  v79 = v81;
  v80 = xmmword_1C64638F0;
  if (__n == 1 && *__src == 45)
  {
    v10 = 1;
    goto LABEL_10;
  }
  if (__n >= 0x101)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v79, v81, __n, 1);
    v12 = (char *)v79;
    v11 = v80;
    if (!__n)
      goto LABEL_7;
    goto LABEL_6;
  }
  v11 = 0;
  v12 = v81;
  if (__n)
  {
LABEL_6:
    memcpy(&v12[v11], v7, __n);
    v12 = (char *)v79;
    v11 = v80;
  }
LABEL_7:
  *(_QWORD *)&v80 = v11 + __n;
  v85 = 261;
  v82 = v12;
  *(_QWORD *)&v83 = v11 + __n;
  absolute = llvm::sys::fs::make_absolute((uint64_t)&v79);
  if ((_DWORD)absolute)
  {
    v15 = v13;
    v16 = (_QWORD *)operator new();
    v16[2] = v15;
    *v16 = off_1E81A4C70;
    v16[1] = absolute;
    llvm::Twine::str((llvm::Twine *)&v82, v16 + 3);
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v16;
    goto LABEL_105;
  }
  v7 = v79;
  v10 = v80;
LABEL_10:
  v17 = operator new();
  v18 = v17;
  *(_QWORD *)v17 = off_1E81A4BD8;
  v19 = a3[14];
  if ((a4 & 0xFF00) != 0)
    v19 = a4;
  if (a3[13])
    v19 &= ~8u;
  if (a3[12])
    v19 &= ~4u;
  *(_BYTE *)(v17 + 8) = v19;
  v20 = (char *)(v17 + 16);
  if (!v7)
  {
    v22 = 0;
    v23 = 0;
    *(_QWORD *)v20 = 0;
    *(_QWORD *)(v17 + 24) = 0;
    *(_QWORD *)(v17 + 32) = 0;
    goto LABEL_27;
  }
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v10 >= 0x17)
  {
    v24 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v24 = v10 | 7;
    v25 = v24 + 1;
    v21 = operator new(v24 + 1);
    *(_QWORD *)(v18 + 24) = v10;
    *(_QWORD *)(v18 + 32) = v25 | 0x8000000000000000;
    *(_QWORD *)(v18 + 16) = v21;
  }
  else
  {
    *(_BYTE *)(v17 + 39) = v10;
    v21 = (void *)(v17 + 16);
    if (!v10)
      goto LABEL_26;
  }
  memmove(v21, v7, v10);
LABEL_26:
  *((_BYTE *)v21 + v10) = 0;
  v23 = *(unsigned __int8 *)(v18 + 39);
  v22 = *(_QWORD *)(v18 + 24);
LABEL_27:
  *(_BYTE *)(v18 + 72) = 0;
  *(_BYTE *)(v18 + 40) = 0;
  *(_BYTE *)(v18 + 64) = 0;
  *(_BYTE *)(v18 + 176) = 0;
  *(_BYTE *)(v18 + 280) = 0;
  v26 = (_BYTE *)(v18 + 280);
  *(_BYTE *)(v18 + 168) = 0;
  if ((v23 & 0x80u) == 0)
    v27 = v23 & 0x7F;
  else
    v27 = v22;
  if (v27 != 1
    || ((v23 & 0x80) != 0 ? (v28 = *(const void **)v20) : (v22 = v23, v28 = v20),
        (v29 = memcmp(v28, "-", v22 != 0), v22 != 1) || v29))
  {
    v70[0] = 0;
    v70[4] = 0;
    if ((*(_BYTE *)(v18 + 8) & 8) == 0)
      goto LABEL_45;
    memset(v74, 0, sizeof(v74));
    v75 = 0xFFFFLL;
    v76 = 0;
    v77 = 0;
    v73 = 260;
    v72 = v20;
    v82 = (char *)&v84;
    v83 = xmmword_1C85F20B0;
    v30 = (const char *)llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)&v72, (uint64_t)&v82);
    v31 = stat(v30, &v78);
    sub_1C5E7F828(v31, &v78.st_dev, (uint64_t)v74);
    if (v82 != (char *)&v84)
      free(v82);
    if (*(_DWORD *)&v74[40] >= 2u)
    {
      if (*(_DWORD *)&v74[40] != 2)
        *(_BYTE *)(v18 + 8) &= ~8u;
      v85 = 260;
      v82 = v20;
      if (llvm::sys::fs::access((unsigned __int8 *)&v82, 1))
      {
        v32 = std::generic_category();
        v33 = (char *)operator new();
        v85 = 260;
        v82 = v20;
        *((_QWORD *)v33 + 2) = v32;
        *(_QWORD *)v33 = off_1E81A4C70;
        *((_QWORD *)v33 + 1) = 1;
        llvm::Twine::str((llvm::Twine *)&v82, (_QWORD *)v33 + 3);
        v69 = v33;
LABEL_52:
        *(_BYTE *)(a5 + 8) |= 1u;
        *(_QWORD *)a5 = v33;
        if (*v26)
        {
          sub_1C5E63AE4(v18 + 176);
          *v26 = 0;
        }
        if (*(_BYTE *)(v18 + 168))
        {
          llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)(v18 + 72));
          *(_BYTE *)(v18 + 168) = 0;
        }
        if (*(_BYTE *)(v18 + 64))
        {
          if (*(char *)(v18 + 63) < 0)
            operator delete(*(void **)(v18 + 40));
          *(_BYTE *)(v18 + 64) = 0;
        }
        if (*(char *)(v18 + 39) < 0)
          operator delete(*(void **)v20);
        MEMORY[0x1CAA32FC0](v18, 0x10F3C402CA34614);
        goto LABEL_105;
      }
    }
    if ((*(_BYTE *)(v18 + 8) & 8) == 0)
      goto LABEL_45;
    v40 = *(_BYTE *)(v18 + 39);
    v41 = v40 < 0;
    if (v40 >= 0)
      v42 = (uint64_t)v20;
    else
      v42 = *(_QWORD *)(v18 + 16);
    v43 = v40 & 0x7F;
    if (v41)
      v44 = *(_QWORD *)(v18 + 24);
    else
      v44 = v43;
    v45 = llvm::sys::path::extension(v42, v44, 0);
    v47 = v46;
    v48 = *(_BYTE *)(v18 + 39);
    v49 = v48 < 0;
    if (v48 >= 0)
      v50 = v20;
    else
      v50 = *(char **)(v18 + 16);
    v51 = v48 & 0x7F;
    if (v49)
      v51 = *(_QWORD *)(v18 + 24);
    if (v51 >= v51 - v47)
      v52 = v51 - v47;
    else
      v52 = v51;
    v82 = (char *)&v84;
    v83 = xmmword_1C85F20B0;
    __srca = v45;
    if (v52 >= 0x81)
    {
      v68 = v50;
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v82, &v84, v52, 1);
      v50 = v68;
      v54 = v82;
      v53 = v83;
    }
    else
    {
      v53 = 0;
      if (!v52)
      {
        v55 = 128;
LABEL_81:
        v56 = v53 + v52;
        *(_QWORD *)&v83 = v56;
        if (v55 < v56 + 9)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v82, &v84, v56 + 9, 1);
          v56 = v83;
        }
        v57 = &v82[v56];
        *(_QWORD *)v57 = *(_QWORD *)"-%%%%%%%%";
        v57[8] = 37;
        v58 = v83 + 9;
        *(_QWORD *)&v83 = v58;
        if (*((_QWORD *)&v83 + 1) < v58 + v47)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v82, &v84, v58 + v47, 1);
          v58 = v83;
          if (!v47)
            goto LABEL_86;
        }
        else if (!v47)
        {
LABEL_86:
          v59 = v58 + v47;
          *(_QWORD *)&v83 = v59;
          if (*((_QWORD *)&v83 + 1) < v59 + 4)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v82, &v84, v59 + 4, 1);
            v59 = v83;
          }
          *(_DWORD *)&v82[v59] = 1886221358;
          *(_QWORD *)&v83 = v83 + 4;
          v60 = *(_BYTE *)(v18 + 39);
          v61 = v60 < 0;
          if (v60 >= 0)
            v62 = (uint64_t)v20;
          else
            v62 = *(_QWORD *)(v18 + 16);
          v63 = v60 & 0x7F;
          if (v61)
            v64 = *(_QWORD *)(v18 + 24);
          else
            v64 = v63;
          v65 = *(_BYTE *)(v18 + 8);
          *(_QWORD *)&v78.st_dev = &v82;
          v78.st_ino = v18;
          *(_QWORD *)&v78.st_uid = v70;
          sub_1C5E6345C(&v71, v62, v64, v65, (_QWORD *(*)(_QWORD **__return_ptr, uint64_t))sub_1C5E635CC, (uint64_t)&v78);
          if (v82 != (char *)&v84)
            free(v82);
          v66 = v71;
          if (!v71)
          {
            v69 = 0;
LABEL_98:
            LOBYTE(v82) = 1;
            sub_1C6394CB4((llvm::raw_fd_ostream *)(v18 + 72));
            goto LABEL_99;
          }
          v71 = 0;
          *(_QWORD *)&v78.st_dev = v66;
          sub_1C4D62BD4((char **)&v78, &v82);
          if (*(_QWORD *)&v78.st_dev)
            (*(void (**)(_QWORD))(**(_QWORD **)&v78.st_dev + 8))(*(_QWORD *)&v78.st_dev);
          if (v71)
            (*(void (**)(char *))(*(_QWORD *)v71 + 8))(v71);
LABEL_45:
          v34 = *(_BYTE *)(v18 + 39);
          v35 = v34 < 0;
          if (v34 >= 0)
            v36 = (uint64_t)v20;
          else
            v36 = *(_QWORD *)(v18 + 16);
          v37 = v34 & 0x7F;
          if (v35)
            v38 = *(_QWORD *)(v18 + 24);
          else
            v38 = v37;
          v39 = *(_BYTE *)(v18 + 8);
          v82 = (char *)v18;
          *(_QWORD *)&v83 = v70;
          sub_1C5E6345C(&v69, v36, v38, v39, (_QWORD *(*)(_QWORD **__return_ptr, uint64_t))sub_1C5E639C4, (uint64_t)&v82);
          v33 = v69;
          if (v69)
            goto LABEL_52;
          goto LABEL_98;
        }
        memcpy(&v82[v58], __srca, v47);
        v58 = v83;
        goto LABEL_86;
      }
      v54 = (char *)&v84;
    }
    memcpy(&v54[v53], v50, v52);
    v55 = *((_QWORD *)&v83 + 1);
    v53 = v83;
    goto LABEL_81;
  }
  v78.st_dev = 0;
  v78.st_ino = (__darwin_ino64_t)std::system_category();
  sub_1C6399BC4((llvm::raw_fd_ostream *)(v18 + 72), (uint64_t)v20, (uint64_t)&v78);
  if (v78.st_dev)
  {
    v33 = (char *)operator new();
    v85 = 260;
    v82 = v20;
    *(_OWORD *)(v33 + 8) = *(_OWORD *)&v78.st_dev;
    *(_QWORD *)v33 = off_1E81A4C70;
    llvm::Twine::str((llvm::Twine *)&v82, (_QWORD *)v33 + 3);
    goto LABEL_52;
  }
LABEL_99:
  if (!*(_BYTE *)(v18 + 137) && (*(_BYTE *)(v18 + 8) & 1) == 0)
  {
    if (*v26)
      sub_1C5E63AE4(v18 + 176);
    *(_QWORD *)(v18 + 176) = &unk_1E81A70E8;
    *(_DWORD *)(v18 + 184) = 0;
    *(_BYTE *)(v18 + 216) = 0;
    *(_QWORD *)(v18 + 224) = 0;
    *(_DWORD *)(v18 + 232) = 0;
    *(_QWORD *)(v18 + 200) = 0;
    *(_QWORD *)(v18 + 208) = 0;
    *(_QWORD *)(v18 + 192) = 0;
    *(_QWORD *)(v18 + 240) = v18 + 256;
    *(_QWORD *)(v18 + 248) = v18 + 72;
    *(_QWORD *)(v18 + 264) = 0;
    *(_QWORD *)(v18 + 272) = 0;
    *(_QWORD *)(v18 + 256) = v26;
    *(_BYTE *)(v18 + 280) = 1;
  }
  *(_BYTE *)(a5 + 8) &= ~1u;
  *(_QWORD *)a5 = v18;
LABEL_105:
  if (v79 != v81)
    free(v79);
}

uint64_t sub_1C5E63354@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int16 a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  _QWORD v11[4];
  __int16 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17[4];
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v13 = 0u;
  v14 = 0u;
  v15 = 0;
  v16 = 0;
  v6 = *(_QWORD *)(a1 + 16);
  v12 = 261;
  v11[0] = a2;
  v11[1] = a3;
  llvm::vfs::OutputBackend::createFile(v6, (uint64_t)v11, a4, (uint64_t)v17);
  v7 = v18;
  if ((v18 & 1) == 0)
  {
    llvm::vfs::OutputFile::destroy(&v13);
    sub_1C5E629A8((uint64_t)&v13, v17);
    v7 = v18;
    if ((v18 & 1) == 0)
    {
      v8 = 0;
      goto LABEL_7;
    }
  }
  v8 = *(_QWORD *)&v17[0];
  *(_QWORD *)&v17[0] = 0;
  if ((v7 & 1) == 0)
  {
LABEL_7:
    sub_1C5E62954((uint64_t)v17);
    if (!v8)
      goto LABEL_8;
    goto LABEL_5;
  }
  *(_QWORD *)&v17[0] = 0;
  if (!v8)
  {
LABEL_8:
    v8 = *((_QWORD *)&v14 + 1);
    *((_QWORD *)&v14 + 1) = 0;
    v9 = *(_BYTE *)(a5 + 8) & 0xFE;
    goto LABEL_9;
  }
LABEL_5:
  v9 = *(_BYTE *)(a5 + 8) | 1;
LABEL_9:
  *(_BYTE *)(a5 + 8) = v9;
  *(_QWORD *)a5 = v8;
  return sub_1C5E62954((uint64_t)&v13);
}

_QWORD *sub_1C5E6345C(char **a1, uint64_t a2, uint64_t a3, char a4, _QWORD *(*a5)(_QWORD **__return_ptr, uint64_t), uint64_t a6)
{
  _QWORD *result;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[2];
  char v17;
  _QWORD v18[2];
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;

  v18[0] = a2;
  v18[1] = a3;
  v17 = a4;
  v16[0] = a5;
  v16[1] = a6;
  result = a5(&v15, a6);
  v14[0] = &v17;
  v14[1] = v18;
  v14[2] = v16;
  v8 = v15;
  if (!v15)
  {
    *a1 = 0;
    return result;
  }
  v15 = 0;
  if ((*(unsigned int (**)(_QWORD *, void *))(*v8 + 48))(v8, &llvm::ErrorList::ID))
  {
    *a1 = 0;
    v9 = (uint64_t *)v8[1];
    v10 = (uint64_t *)v8[2];
    if (v9 != v10)
    {
      v11 = 0;
      do
      {
        v22 = v11;
        v12 = *v9;
        *v9 = 0;
        v20 = v12;
        sub_1C5E63828(&v21, &v20, (uint64_t)v14);
        sub_1C6174794(&v22, &v21, &v23);
        v11 = v23;
        *a1 = v23;
        v23 = 0;
        if (v21)
          (*(void (**)(char *))(*(_QWORD *)v21 + 8))(v21);
        v13 = v20;
        v20 = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        if (v22)
          (*(void (**)(char *))(*(_QWORD *)v22 + 8))(v22);
        ++v9;
      }
      while (v9 != v10);
    }
  }
  else
  {
    v19 = v8;
    sub_1C5E63828(a1, &v19, (uint64_t)v14);
    v8 = v19;
    if (!v19)
      goto LABEL_16;
  }
  (*(void (**)(_QWORD *))(*v8 + 8))(v8);
LABEL_16:
  result = v15;
  if (v15)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v15 + 8))(v15);
  return result;
}

void sub_1C5E635CC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  size_t v15;
  __int128 *p_dst;
  size_t v17;
  size_t v18;
  void **v19;
  uint64_t v20;
  int v21;
  _QWORD v22[4];
  __int16 v23;
  __int128 __dst;
  unint64_t v25;
  __int16 v26;
  void *__src;
  size_t __len[2];
  _QWORD v29[17];

  v29[16] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  v21 = 0;
  __src = v29;
  *(_OWORD *)__len = xmmword_1C85F20B0;
  v5 = *(uint64_t **)a1;
  v26 = 261;
  v7 = *v5;
  v6 = v5[1];
  *(_QWORD *)&__dst = v7;
  *((_QWORD *)&__dst + 1) = v6;
  v9 = sub_1C5E7D894((uint64_t)&__dst, &v21, &__src, 0, 1, 0, 438);
  if ((_DWORD)v9)
  {
    v10 = v8;
    v11 = *(uint64_t **)a1;
    v12 = (_QWORD *)operator new();
    v26 = 261;
    v13 = v11[1];
    *(_QWORD *)&__dst = *v11;
    *((_QWORD *)&__dst + 1) = v13;
    v23 = 260;
    v22[0] = v4 + 16;
    v12[2] = v10;
    *v12 = off_1E81A4C70;
    v12[1] = v9;
    llvm::Twine::str((llvm::Twine *)v22, v12 + 3);
    *v12 = &off_1E81A4D10;
    llvm::Twine::str((llvm::Twine *)&__dst, v12 + 6);
    goto LABEL_22;
  }
  if ((*(_BYTE *)(v4 + 8) & 4) != 0)
    llvm::sys::RemoveFileOnSignal(__src, __len[0]);
  v14 = __src;
  if (__src)
  {
    v15 = __len[0];
    if (__len[0] >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (__len[0] >= 0x17)
    {
      v17 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len[0] | 7) != 0x17)
        v17 = __len[0] | 7;
      v18 = v17 + 1;
      p_dst = (__int128 *)operator new(v17 + 1);
      *((_QWORD *)&__dst + 1) = v15;
      v25 = v18 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v25) = __len[0];
      p_dst = &__dst;
      if (!__len[0])
        goto LABEL_15;
    }
    memmove(p_dst, v14, v15);
LABEL_15:
    *((_BYTE *)p_dst + v15) = 0;
    goto LABEL_16;
  }
  __dst = 0uLL;
  v25 = 0;
LABEL_16:
  v19 = (void **)(v4 + 40);
  if (*(_BYTE *)(v4 + 64))
  {
    if (*(char *)(v4 + 63) < 0)
      operator delete(*v19);
    *(_OWORD *)v19 = __dst;
    *(_QWORD *)(v4 + 56) = v25;
  }
  else
  {
    *(_OWORD *)v19 = __dst;
    *(_QWORD *)(v4 + 56) = v25;
    *(_BYTE *)(v4 + 64) = 1;
  }
  v12 = 0;
  v20 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)v20 = v21;
  *(_BYTE *)(v20 + 4) = 1;
LABEL_22:
  *a2 = v12;
  if (__src != v29)
    free(__src);
}

uint64_t sub_1C5E63828(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  const std::error_category *v23;
  unsigned __int8 *v24;
  unint64_t v25;
  __int16 v26;

  result = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*a2 + 48))(*a2, &llvm::ECError::ID);
  v7 = *a2;
  *a2 = 0;
  if (!(_DWORD)result)
    goto LABEL_5;
  v8 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  v10 = v9;
  v24 = v8;
  v25 = v9;
  v22 = 2;
  v23 = std::generic_category();
  result = (*(uint64_t (**)(unint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)v10 + 32))(v10, v8, &v22);
  if ((result & 1) == 0)
  {
    result = ((uint64_t (*)(const std::error_category *, unsigned __int8 **, _QWORD))v23->equivalent_0)(v23, &v24, v22);
    if (!(_DWORD)result)
      goto LABEL_5;
  }
  if ((**(_BYTE **)a3 & 0x10) != 0)
  {
    v11 = *(_QWORD *)(a3 + 8);
    v12 = *(unsigned __int8 **)v11;
    v13 = *(_QWORD *)(v11 + 8);
    v14 = sub_1C5E7BE8C(*(unsigned __int8 **)v11, v13, 0);
    if (v13 >= v14)
      v15 = v14;
    else
      v15 = v13;
    if (v14 == -1)
      v16 = 0;
    else
      v16 = v15;
    v26 = 261;
    if (v14 == -1)
      v17 = 0;
    else
      v17 = v12;
    v24 = v17;
    v25 = v16;
    v19 = llvm::sys::fs::create_directories(&v24, 1, 504);
    if ((_DWORD)v19)
    {
      v20 = v18;
      v21 = (_QWORD *)operator new();
      v26 = 261;
      v24 = v17;
      v25 = v16;
      v21[2] = v20;
      *v21 = off_1E81A4C70;
      v21[1] = v19;
      llvm::Twine::str((llvm::Twine *)&v24, v21 + 3);
      *a1 = v21;
    }
    else
    {
      (**(void (***)(_QWORD))(a3 + 16))(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8));
    }
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  else
  {
LABEL_5:
    *a1 = v7;
  }
  return result;
}

void sub_1C5E639C4(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  BOOL v13;
  void *v14;
  size_t v15;
  size_t v16;
  unsigned __int8 v17[32];
  __int16 v18;
  int v19;

  v4 = *a1;
  v19 = 0;
  v5 = *(unsigned __int8 *)(v4 + 8);
  if ((~v5 & 3) != 0)
    v6 = v5 & 1;
  else
    v6 = 3;
  v18 = 260;
  *(_QWORD *)v17 = v4 + 16;
  v8 = llvm::sys::fs::openFile(v17, &v19, 0, 2, v6, 438);
  if ((_DWORD)v8)
  {
    v9 = v7;
    v18 = 260;
    *(_QWORD *)v17 = v4 + 16;
    v10 = (_QWORD *)operator new();
    v10[2] = v9;
    *v10 = off_1E81A4C70;
    v10[1] = v8;
    llvm::Twine::str((llvm::Twine *)v17, v10 + 3);
    *a2 = v10;
  }
  else
  {
    v11 = a1[1];
    *(_DWORD *)v11 = v19;
    *(_BYTE *)(v11 + 4) = 1;
    if ((*(_BYTE *)(v4 + 8) & 4) != 0)
    {
      v12 = *(_BYTE *)(v4 + 39);
      v13 = v12 < 0;
      if (v12 >= 0)
        v14 = (void *)(v4 + 16);
      else
        v14 = *(void **)(v4 + 16);
      v15 = v12 & 0x7F;
      if (v13)
        v16 = *(_QWORD *)(v4 + 24);
      else
        v16 = v15;
      llvm::sys::RemoveFileOnSignal(v14, v16);
    }
    *a2 = 0;
  }
}

uint64_t sub_1C5E63AE4(uint64_t a1)
{
  uint64_t v2;
  llvm::raw_ostream *v3;
  const void *v4;
  size_t v5;
  void *v6;
  void *v7;
  uint64_t v9;

  *(_QWORD *)a1 = &unk_1E81A70E8;
  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(llvm::raw_ostream **)(a1 + 72);
  v4 = *(const void **)v2;
  v5 = *(_QWORD *)(v2 + 8);
  v6 = (void *)*((_QWORD *)v3 + 4);
  if (v5 <= *((_QWORD *)v3 + 3) - (_QWORD)v6)
  {
    if (v5)
    {
      memcpy(v6, v4, v5);
      *((_QWORD *)v3 + 4) += v5;
    }
  }
  else
  {
    llvm::raw_ostream::write(v3, (const char *)v4, v5);
  }
  v7 = *(void **)(a1 + 80);
  if (v7 != (void *)(a1 + 104))
    free(v7);
  *(_QWORD *)a1 = off_1E81A6E70;
  if (*(_DWORD *)(a1 + 56) == 1)
  {
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
      MEMORY[0x1CAA32F9C](v9, 0x1000C8077774924);
  }
  return a1;
}

uint64_t sub_1C5E63BAC@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  if (result)
    ++*(_DWORD *)(result + 8);
  return result;
}

double sub_1C5E63BC4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  *(_QWORD *)(v2 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_DWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 48) = 0;
  *(_QWORD *)v2 = &unk_1E81A4DB0;
  *(_QWORD *)(v2 + 8) = &off_1E81A7068;
  *(_BYTE *)(a1 + 8) &= ~1u;
  *(_QWORD *)a1 = v2;
  return result;
}

void sub_1C5E63C48()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5E63C5C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 16) + 8))(&v11);
  v4 = operator new();
  v5 = v11;
  v11 = 0;
  v6 = *(_QWORD *)(a1 + 48);
  if (!v6)
  {
    *(_QWORD *)(v4 + 16) = v5;
    *(_QWORD *)v4 = &off_1E81A4A20;
LABEL_9:
    *(_QWORD *)(v4 + 48) = 0;
    goto LABEL_10;
  }
  if (v6 == a1 + 24)
  {
    v13 = v12;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 24))(v6, v12);
    v7 = v13;
  }
  else
  {
    v7 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v13 = v7;
  }
  *(_DWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = v5;
  *(_QWORD *)v4 = &off_1E81A4A20;
  if (!v7)
    goto LABEL_9;
  if (v7 != v12)
  {
    *(_QWORD *)(v4 + 48) = v7;
LABEL_10:
    *(_DWORD *)(v4 + 8) = 1;
    goto LABEL_11;
  }
  *(_QWORD *)(v4 + 48) = v4 + 24;
  (*(void (**)(_QWORD *))(v12[0] + 24))(v12);
  v10 = v13;
  ++*(_DWORD *)(v4 + 8);
  if (v10 == v12)
  {
    (*(void (**)(_QWORD *))(v12[0] + 32))(v12);
  }
  else if (v10)
  {
    (*(void (**)(_QWORD *))(*v10 + 40))(v10);
  }
LABEL_11:
  *a2 = v4;
  result = v11;
  if (v11)
  {
    v9 = *(_DWORD *)(v11 + 8) - 1;
    *(_DWORD *)(v11 + 8) = v9;
    if (!v9)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  }
  return result;
}

_QWORD *sub_1C5E63DFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int16 a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  _QWORD *result;
  _QWORD *v12;
  unsigned __int16 v13;
  _QWORD v14[2];

  v14[0] = a2;
  v14[1] = a3;
  v13 = a4;
  v7 = *(_QWORD *)(a1 + 48);
  if (v7)
  {
    if ((*(unsigned int (**)(uint64_t, _QWORD *, unsigned __int16 *))(*(_QWORD *)v7 + 48))(v7, v14, &v13))
    {
      return (_QWORD *)sub_1C5E63354(a1, a2, a3, a4, a5);
    }
    else
    {
      result = (_QWORD *)operator new();
      result[8] = 0;
      *((_OWORD *)result + 1) = 0u;
      *((_OWORD *)result + 2) = 0u;
      *((_OWORD *)result + 3) = 0u;
      *((_DWORD *)result + 16) = 0;
      result[3] = 0;
      result[4] = 0;
      result[5] = 0;
      *((_BYTE *)result + 48) = 0;
      *result = &unk_1E81A4DB0;
      result[1] = &off_1E81A7068;
      *(_BYTE *)(a5 + 8) &= ~1u;
      *(_QWORD *)a5 = result;
    }
  }
  else
  {
    sub_1C485C2F0();
    return sub_1C5E63EEC(v12);
  }
  return result;
}

_QWORD *sub_1C5E63EEC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _DWORD *v5;
  int v6;

  *a1 = &off_1E81A4A20;
  v2 = a1 + 3;
  v3 = (_QWORD *)a1[6];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  *a1 = &off_1E81A4978;
  v5 = (_DWORD *)a1[2];
  if (v5)
  {
    v6 = v5[2] - 1;
    v5[2] = v6;
    if (!v6)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 32))(v5);
  }
  return a1;
}

void sub_1C5E63F78(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _DWORD *v5;
  int v6;

  *a1 = &off_1E81A4A20;
  v2 = a1 + 3;
  v3 = (_QWORD *)a1[6];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *a1 = &off_1E81A4978;
  v5 = (_DWORD *)a1[2];
  if (v5)
  {
    v6 = v5[2] - 1;
    v5[2] = v6;
    if (!v6)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 32))(v5);
  }
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5E64014@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 16) + 8))(&v8);
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 40) + 8))(&v7);
  result = operator new();
  v6 = v7;
  v5 = v8;
  *(_DWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = v6;
  *(_QWORD *)result = &off_1E81A4A58;
  *(_QWORD *)(result + 16) = v5;
  *(_QWORD *)(result + 24) = &unk_1E81A4A90;
  *(_DWORD *)(result + 8) = 1;
  *a2 = result;
  return result;
}

llvm::raw_ostream *sub_1C5E640A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int16 a4@<W3>, uint64_t a5@<X8>)
{
  llvm::raw_ostream *result;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  const char *v27;
  const char *v28;
  _QWORD *v29;
  uint64_t v30;
  llvm::raw_ostream *v31;
  const char *v32;
  const char *v33;
  llvm::raw_ostream **v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  result = (llvm::raw_ostream *)sub_1C5E63354(a1, a2, a3, a4, (uint64_t)&v42);
  v11 = v42;
  if ((v43 & 1) != 0 && v42)
  {
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v11;
    return result;
  }
  sub_1C5E63354(a1 + 24, a2, a3, a4, (uint64_t)&v42);
  v12 = v42;
  if ((v43 & 1) != 0 && v42)
  {
    v39 = v42;
    (*(void (**)(char **__return_ptr, char *))(*(_QWORD *)v11 + 48))(&v38, v11);
    sub_1C624E8DC(&v39, &v38, &v40);
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v40;
    v40 = 0;
    if (v38)
      (*(void (**)(char *))(*(_QWORD *)v38 + 8))(v38);
    if (v39)
      (*(void (**)(char *))(*(_QWORD *)v39 + 8))(v39);
    return (llvm::raw_ostream *)(*(uint64_t (**)(char *))(*(_QWORD *)v11 + 8))(v11);
  }
  if ((*(unsigned int (**)(char *, void *))(*(_QWORD *)v11 + 24))(v11, &llvm::vfs::NullOutputFileImpl::ID))
  {
    (*(void (**)(char **__return_ptr, char *))(*(_QWORD *)v11 + 48))(&v37, v11);
    v13 = v37;
    v37 = 0;
    v41 = v13;
    sub_1C4D62BD4(&v41, &v42);
    if (v41)
      (*(void (**)(char *))(*(_QWORD *)v41 + 8))(v41);
    if (v37)
      (*(void (**)(char *))(*(_QWORD *)v37 + 8))(v37);
    *(_BYTE *)(a5 + 8) &= ~1u;
    *(_QWORD *)a5 = v12;
    return (llvm::raw_ostream *)(*(uint64_t (**)(char *))(*(_QWORD *)v11 + 8))(v11);
  }
  if ((*(unsigned int (**)(char *, void *))(*(_QWORD *)v12 + 24))(v12, &llvm::vfs::NullOutputFileImpl::ID))
  {
    (*(void (**)(char **__return_ptr, char *))(*(_QWORD *)v12 + 48))(&v36, v12);
    v14 = v36;
    v36 = 0;
    v41 = v14;
    sub_1C4D62BD4(&v41, &v42);
    if (v41)
      (*(void (**)(char *))(*(_QWORD *)v41 + 8))(v41);
    if (v36)
      (*(void (**)(char *))(*(_QWORD *)v36 + 8))(v36);
    *(_BYTE *)(a5 + 8) &= ~1u;
    *(_QWORD *)a5 = v11;
    return (llvm::raw_ostream *)(*(uint64_t (**)(char *))(*(_QWORD *)v12 + 8))(v12);
  }
  else
  {
    v15 = operator new();
    *(_DWORD *)(v15 + 16) = 0;
    *(_BYTE *)(v15 + 48) = 0;
    *(_QWORD *)(v15 + 56) = 0;
    *(_DWORD *)(v15 + 64) = 1;
    *(_QWORD *)(v15 + 32) = 0;
    *(_QWORD *)(v15 + 40) = 0;
    *(_QWORD *)(v15 + 24) = 0;
    *(_QWORD *)v15 = &off_1E81A4AC8;
    *(_QWORD *)(v15 + 8) = &unk_1E81A4B58;
    v16 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 56))(v11);
    v17 = *(_QWORD *)(v16 + 16);
    if (*(_DWORD *)(v16 + 56))
      v18 = v17 == 0;
    else
      v18 = 0;
    if (v18)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 88))(v16);
    else
      v19 = *(_QWORD *)(v16 + 24) - v17;
    v20 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 56))(v11);
    v21 = *(_QWORD *)(v20 + 16);
    if (*(_DWORD *)(v20 + 56))
      v22 = v21 == 0;
    else
      v22 = 0;
    if (v22)
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 88))(v20);
    else
      v23 = *(_QWORD *)(v20 + 24) - v21;
    if (v19 <= v23)
      v24 = v23;
    else
      v24 = v19;
    *(_QWORD *)(v15 + 72) = v24;
    *(_QWORD *)(v15 + 80) = v11;
    *(_QWORD *)(v15 + 88) = v12;
    v25 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v11 + 56))(v11);
    v26 = v25;
    v27 = (const char *)v25[4];
    v29 = v25 + 2;
    v28 = (const char *)v25[2];
    v30 = v27 - v28;
    if (v27 != v28)
    {
      v25[4] = v28;
      llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)v25, v28, v30);
    }
    if (*((_DWORD *)v26 + 14) == 1 && *v29)
      MEMORY[0x1CAA32F9C](*v29, 0x1000C8077774924, v30);
    *((_DWORD *)v26 + 14) = 0;
    v29[1] = 0;
    v29[2] = 0;
    *v29 = 0;
    result = (llvm::raw_ostream *)(*(uint64_t (**)(char *))(*(_QWORD *)v12 + 56))(v12);
    v31 = result;
    v32 = (const char *)*((_QWORD *)result + 4);
    v34 = (llvm::raw_ostream **)((char *)result + 16);
    v33 = (const char *)*((_QWORD *)result + 2);
    v35 = v32 - v33;
    if (v32 != v33)
    {
      *((_QWORD *)result + 4) = v33;
      result = (llvm::raw_ostream *)llvm::raw_ostream::flush_tied_then_write(result, v33, v35);
    }
    if (*((_DWORD *)v31 + 14) == 1)
    {
      result = *v34;
      if (*v34)
        result = (llvm::raw_ostream *)MEMORY[0x1CAA32F9C](result, 0x1000C8077774924, v35);
    }
    *((_DWORD *)v31 + 14) = 0;
    v34[1] = 0;
    v34[2] = 0;
    *v34 = 0;
    *(_BYTE *)(a5 + 8) &= ~1u;
    *(_QWORD *)a5 = v15;
  }
  return result;
}

_QWORD *sub_1C5E644C4(_QWORD *a1)
{
  _DWORD *v2;
  int v3;
  _DWORD *v4;
  int v5;

  a1[3] = &off_1E81A4978;
  v2 = (_DWORD *)a1[5];
  if (v2)
  {
    v3 = v2[2] - 1;
    v2[2] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 32))(v2);
  }
  *a1 = &off_1E81A4978;
  v4 = (_DWORD *)a1[2];
  if (v4)
  {
    v5 = v4[2] - 1;
    v4[2] = v5;
    if (!v5)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 32))(v4);
  }
  return a1;
}

void sub_1C5E6453C(_QWORD *a1)
{
  _DWORD *v2;
  int v3;
  _DWORD *v4;
  int v5;

  a1[3] = &off_1E81A4978;
  v2 = (_DWORD *)a1[5];
  if (v2)
  {
    v3 = v2[2] - 1;
    v2[2] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 32))(v2);
  }
  *a1 = &off_1E81A4978;
  v4 = (_DWORD *)a1[2];
  if (v4)
  {
    v5 = v4[2] - 1;
    v4[2] = v5;
    if (!v5)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 32))(v4);
  }
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5E645C4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1C5E64014(a1 - 24, a2);
}

llvm::raw_ostream *sub_1C5E645CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int16 a4@<W3>, uint64_t a5@<X8>)
{
  return sub_1C5E640A8(a1 - 24, a2, a3, a4, a5);
}

_DWORD *sub_1C5E645D8(_QWORD *a1)
{
  _DWORD *v2;
  int v3;
  _DWORD *result;
  int v5;

  *a1 = &off_1E81A4978;
  v2 = (_DWORD *)a1[2];
  if (v2)
  {
    v3 = v2[2] - 1;
    v2[2] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 32))(v2);
  }
  *(a1 - 3) = &off_1E81A4978;
  result = (_DWORD *)*(a1 - 1);
  if (result)
  {
    v5 = result[2] - 1;
    result[2] = v5;
    if (!v5)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 32))(result);
  }
  return result;
}

void sub_1C5E6464C(_QWORD *a1)
{
  _DWORD *v2;
  int v3;
  _DWORD *v4;
  int v5;

  *a1 = &off_1E81A4978;
  v2 = (_DWORD *)a1[2];
  if (v2)
  {
    v3 = v2[2] - 1;
    v2[2] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 32))(v2);
  }
  *(a1 - 3) = &off_1E81A4978;
  v4 = (_DWORD *)*(a1 - 1);
  if (v4)
  {
    v5 = v4[2] - 1;
    v4[2] = v5;
    if (!v5)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 32))(v4);
  }
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5E646E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)(a1 + 8) = off_1E81A6E70;
  if (*(_DWORD *)(a1 + 64) == 1)
  {
    v5 = *(_QWORD *)(a1 + 24);
    if (v5)
      MEMORY[0x1CAA32F9C](v5, 0x1000C8077774924);
  }
  return a1;
}

void sub_1C5E6476C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)(a1 + 8) = off_1E81A6E70;
  if (*(_DWORD *)(a1 + 64) == 1)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4)
      MEMORY[0x1CAA32F9C](v4, 0x1000C8077774924);
  }
  JUMPOUT(0x1CAA32FC0);
}

char *sub_1C5E64808@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v4;
  const char *v5;
  char *result;
  char *v7;
  char *v8;

  v4 = *(const char **)(a1 + 40);
  v5 = *(const char **)(a1 + 24);
  if (v4 != v5)
  {
    *(_QWORD *)(a1 + 40) = v5;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)(a1 + 8), v5, v4 - v5);
  }
  (*(void (**)(char **__return_ptr))(**(_QWORD **)(a1 + 80) + 40))(&v8);
  (*(void (**)(char **__return_ptr))(**(_QWORD **)(a1 + 88) + 40))(&v7);
  sub_1C624E8DC(&v8, &v7, a2);
  if (v7)
    (*(void (**)(char *))(*(_QWORD *)v7 + 8))(v7);
  result = v8;
  if (v8)
    return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

char *sub_1C5E648AC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v4;
  const char *v5;
  char *result;
  char *v7;
  char *v8;

  v4 = *(const char **)(a1 + 40);
  v5 = *(const char **)(a1 + 24);
  if (v4 != v5)
  {
    *(_QWORD *)(a1 + 40) = v5;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)(a1 + 8), v5, v4 - v5);
  }
  (*(void (**)(char **__return_ptr))(**(_QWORD **)(a1 + 80) + 48))(&v8);
  (*(void (**)(char **__return_ptr))(**(_QWORD **)(a1 + 88) + 48))(&v7);
  sub_1C624E8DC(&v8, &v7, a2);
  if (v7)
    (*(void (**)(char *))(*(_QWORD *)v7 + 8))(v7);
  result = v8;
  if (v8)
    return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

uint64_t sub_1C5E64950(uint64_t a1)
{
  return a1 + 8;
}

llvm::raw_ostream *sub_1C5E64958(uint64_t a1, const char *a2, size_t a3)
{
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;

  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 56))(*(_QWORD *)(a1 + 80));
  llvm::raw_ostream::write(v6, a2, a3);
  v7 = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 56))(*(_QWORD *)(a1 + 88));
  return llvm::raw_ostream::write(v7, a2, a3);
}

uint64_t sub_1C5E649B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;

  v8 = *(const char **)(a1 + 40);
  v9 = *(const char **)(a1 + 24);
  if (v8 != v9)
  {
    *(_QWORD *)(a1 + 40) = v9;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)(a1 + 8), v9, v8 - v9);
  }
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 56))(*(_QWORD *)(a1 + 80));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 104))(v10, a2, a3, a4);
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 56))(*(_QWORD *)(a1 + 88));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 104))(v11, a2, a3, a4);
}

uint64_t sub_1C5E64A50(uint64_t a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 56))(*(_QWORD *)(a1 + 80));
  return (*(uint64_t (**)(_QWORD *))(*v1 + 80))(v1) + v1[4] - v1[2];
}

uint64_t sub_1C5E64A98(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_1C5E64AA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 56))(*(_QWORD *)(a1 + 80));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 56))(*(_QWORD *)(a1 + 88));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a2);
}

uint64_t sub_1C5E64AFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 56))(*(_QWORD *)(a1 + 80));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  if ((_DWORD)result)
  {
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 56))(*(_QWORD *)(a1 + 88));
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  }
  return result;
}

uint64_t sub_1C5E64B5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 56))(*(_QWORD *)(a1 + 80));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
  if ((_DWORD)result)
  {
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 56))(*(_QWORD *)(a1 + 88));
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  }
  return result;
}

uint64_t sub_1C5E64BBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(a1 + 48) = a2;
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 56))(*(_QWORD *)(a1 + 80));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(v4, a2);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 56))(*(_QWORD *)(a1 + 88));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 64))(v5, a2);
}

uint64_t sub_1C5E64C1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)a1 = off_1E81A6E70;
  if (*(_DWORD *)(a1 + 56) == 1)
  {
    result = *(_QWORD *)(a1 + 16);
    if (result)
      return MEMORY[0x1CAA32F9C](result, 0x1000C8077774924);
  }
  return result;
}

void sub_1C5E64CA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)a1 = off_1E81A6E70;
  if (*(_DWORD *)(a1 + 56) == 1)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4)
      MEMORY[0x1CAA32F9C](v4, 0x1000C8077774924);
  }
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5E64D40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 56))(*(_QWORD *)(a1 + 72));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 56))(*(_QWORD *)(a1 + 80));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, a2);
}

uint64_t sub_1C5E64D9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 56))(*(_QWORD *)(a1 + 72));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  if ((_DWORD)result)
  {
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 56))(*(_QWORD *)(a1 + 80));
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  }
  return result;
}

uint64_t sub_1C5E64DFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 56))(*(_QWORD *)(a1 + 72));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
  if ((_DWORD)result)
  {
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 56))(*(_QWORD *)(a1 + 80));
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  }
  return result;
}

uint64_t sub_1C5E64E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(a1 + 40) = a2;
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 56))(*(_QWORD *)(a1 + 72));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(v4, a2);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 56))(*(_QWORD *)(a1 + 80));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 64))(v5, a2);
}

llvm::raw_ostream *sub_1C5E64EBC(uint64_t a1, const char *a2, size_t a3)
{
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;

  v6 = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 56))(*(_QWORD *)(a1 + 72));
  llvm::raw_ostream::write(v6, a2, a3);
  v7 = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 56))(*(_QWORD *)(a1 + 80));
  return llvm::raw_ostream::write(v7, a2, a3);
}

uint64_t sub_1C5E64F1C(uint64_t a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 56))(*(_QWORD *)(a1 + 72));
  return (*(uint64_t (**)(_QWORD *))(*v1 + 80))(v1) + v1[4] - v1[2];
}

uint64_t sub_1C5E64F64(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t sub_1C5E64F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C5E649B8(a1 - 8, a2, a3, a4);
}

uint64_t sub_1C5E64F74(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 280))
  {
    sub_1C5E63AE4(a1 + 176);
    *(_BYTE *)(a1 + 280) = 0;
  }
  if (*(_BYTE *)(a1 + 168))
  {
    llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)(a1 + 72));
    *(_BYTE *)(a1 + 168) = 0;
  }
  if (*(_BYTE *)(a1 + 64))
  {
    if (*(char *)(a1 + 63) < 0)
      operator delete(*(void **)(a1 + 40));
    *(_BYTE *)(a1 + 64) = 0;
  }
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1C5E64FE8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 280))
  {
    sub_1C5E63AE4(a1 + 176);
    *(_BYTE *)(a1 + 280) = 0;
  }
  if (*(_BYTE *)(a1 + 168))
  {
    llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)(a1 + 72));
    *(_BYTE *)(a1 + 168) = 0;
  }
  if (*(_BYTE *)(a1 + 64))
  {
    if (*(char *)(a1 + 63) < 0)
      operator delete(*(void **)(a1 + 40));
    *(_BYTE *)(a1 + 64) = 0;
  }
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5E6506C(uint64_t a1@<X0>, const llvm::Twine *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  const void *v8;
  const void *v9;
  size_t v10;
  llvm *v11;
  const std::error_category *v12;
  llvm::raw_ostream *v13;
  void *v14;
  char v15;
  BOOL v16;
  const char *v17;
  size_t v18;
  size_t v19;
  llvm *v20;
  uint64_t v21;
  llvm::raw_ostream *v22;
  _DWORD *v23;
  char v24;
  BOOL v25;
  const char *v26;
  size_t v27;
  size_t v28;
  llvm *v29;
  uint64_t v30;
  llvm::raw_ostream *v31;
  llvm::raw_ostream *v32;
  _WORD *v33;
  std::string *v34;
  size_t size;
  llvm::raw_ostream *v36;
  const llvm::Twine *v37;
  _BYTE *v38;
  const std::error_category *v39;
  uint64_t v40;
  std::error_code v41;
  _QWORD v42[4];
  __int16 v43;
  std::string v44;
  __int16 v45;

  if (*(_BYTE *)(a1 + 280))
  {
    sub_1C5E63AE4(a1 + 176);
    *(_BYTE *)(a1 + 280) = 0;
  }
  if (*(_BYTE *)(a1 + 168))
  {
    llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)(a1 + 72));
    *(_BYTE *)(a1 + 168) = 0;
  }
  if (*(_BYTE *)(a1 + 64))
  {
    v45 = 260;
    v44.__r_.__value_.__r.__words[0] = a1 + 40;
    v43 = 260;
    v42[0] = a1 + 16;
    v11 = (llvm *)llvm::sys::fs::rename((llvm::sys::fs *)&v44, (const llvm::Twine *)v42, a2);
    *(_QWORD *)&v41.__val_ = v11;
    v41.__cat_ = v12;
    if (!(_DWORD)v11)
      goto LABEL_56;
    v13 = (llvm::raw_ostream *)llvm::errs(v11);
    v14 = (void *)*((_QWORD *)v13 + 4);
    if (*((_QWORD *)v13 + 3) - (_QWORD)v14 > 0xEuLL)
    {
      qmemcpy(v14, "Rename failed: ", 15);
      *((_QWORD *)v13 + 4) += 15;
    }
    else
    {
      v13 = llvm::raw_ostream::write(v13, "Rename failed: ", 0xFuLL);
    }
    v15 = *(_BYTE *)(a1 + 63);
    v16 = v15 < 0;
    if (v15 >= 0)
      v17 = (const char *)(a1 + 40);
    else
      v17 = *(const char **)(a1 + 40);
    v18 = v15 & 0x7F;
    if (v16)
      v19 = *(_QWORD *)(a1 + 48);
    else
      v19 = v18;
    llvm::raw_ostream::write(v13, v17, v19);
    v45 = 260;
    v44.__r_.__value_.__r.__words[0] = a1 + 40;
    v20 = (llvm *)llvm::sys::fs::access((unsigned __int8 *)&v44, 0);
    if (!(_DWORD)v20)
    {
      v20 = (llvm *)llvm::errs(v20);
      v21 = *((_QWORD *)v20 + 4);
      if ((unint64_t)(*((_QWORD *)v20 + 3) - v21) > 8)
      {
        *(_BYTE *)(v21 + 8) = 41;
        *(_QWORD *)v21 = *(_QWORD *)" (exists)";
        *((_QWORD *)v20 + 4) += 9;
      }
      else
      {
        v20 = llvm::raw_ostream::write(v20, " (exists)", 9uLL);
      }
    }
    v22 = (llvm::raw_ostream *)llvm::errs(v20);
    v23 = (_DWORD *)*((_QWORD *)v22 + 4);
    if (*((_QWORD *)v22 + 3) - (_QWORD)v23 > 3uLL)
    {
      *v23 = 540945696;
      *((_QWORD *)v22 + 4) += 4;
    }
    else
    {
      v22 = llvm::raw_ostream::write(v22, " -> ", 4uLL);
    }
    v24 = *(_BYTE *)(a1 + 39);
    v25 = v24 < 0;
    if (v24 >= 0)
      v26 = (const char *)(a1 + 16);
    else
      v26 = *(const char **)(a1 + 16);
    v27 = v24 & 0x7F;
    if (v25)
      v28 = *(_QWORD *)(a1 + 24);
    else
      v28 = v27;
    llvm::raw_ostream::write(v22, v26, v28);
    v45 = 260;
    v44.__r_.__value_.__r.__words[0] = a1 + 16;
    v29 = (llvm *)llvm::sys::fs::access((unsigned __int8 *)&v44, 0);
    if (!(_DWORD)v29)
    {
      v29 = (llvm *)llvm::errs(v29);
      v30 = *((_QWORD *)v29 + 4);
      if ((unint64_t)(*((_QWORD *)v29 + 3) - v30) > 8)
      {
        *(_BYTE *)(v30 + 8) = 41;
        *(_QWORD *)v30 = *(_QWORD *)" (exists)";
        *((_QWORD *)v29 + 4) += 9;
      }
      else
      {
        v29 = llvm::raw_ostream::write(v29, " (exists)", 9uLL);
      }
    }
    v31 = (llvm::raw_ostream *)llvm::errs(v29);
    v32 = v31;
    v33 = (_WORD *)*((_QWORD *)v31 + 4);
    if (*((_QWORD *)v31 + 3) - (_QWORD)v33 > 1uLL)
    {
      *v33 = 8250;
      *((_QWORD *)v31 + 4) += 2;
    }
    else
    {
      v32 = llvm::raw_ostream::write(v31, ": ", 2uLL);
    }
    std::error_code::message(&v44, &v41);
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = &v44;
    else
      v34 = (std::string *)v44.__r_.__value_.__r.__words[0];
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v44.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v44.__r_.__value_.__l.__size_;
    v36 = llvm::raw_ostream::write(v32, (const char *)v34, size);
    v38 = (_BYTE *)*((_QWORD *)v36 + 4);
    if (*((_BYTE **)v36 + 3) == v38)
    {
      llvm::raw_ostream::write(v36, "\n", 1uLL);
    }
    else
    {
      *v38 = 10;
      ++*((_QWORD *)v36 + 4);
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    v45 = 260;
    v44.__r_.__value_.__r.__words[0] = a1 + 40;
    v43 = 260;
    v42[0] = a1 + 16;
    *(_QWORD *)&v41.__val_ = llvm::sys::fs::copy_file((llvm::sys::fs *)&v44, (const llvm::Twine *)v42, v37);
    v41.__cat_ = v39;
    v45 = 260;
    v44.__r_.__value_.__r.__words[0] = a1 + 40;
    llvm::sys::fs::remove((llvm::sys::fs *)&v44, (const llvm::Twine *)1);
    if (v41.__val_)
    {
      v40 = operator new();
      v45 = 260;
      v44.__r_.__value_.__r.__words[0] = a1 + 40;
      v43 = 260;
      v42[0] = a1 + 16;
      *(std::error_code *)(v40 + 8) = v41;
      *(_QWORD *)v40 = off_1E81A4C70;
      llvm::Twine::str((llvm::Twine *)v42, (_QWORD *)(v40 + 24));
      *(_QWORD *)v40 = &off_1E81A4D10;
      llvm::Twine::str((llvm::Twine *)&v44, (_QWORD *)(v40 + 48));
    }
    else
    {
LABEL_56:
      v40 = 0;
    }
    *a3 = v40;
  }
  else
  {
    *a3 = 0;
  }
  if ((*(_BYTE *)(a1 + 8) & 4) != 0)
  {
    v5 = a1 + 16;
    v6 = 40;
    if (*(_BYTE *)(a1 + 64))
      v5 = a1 + 40;
    else
      v6 = 16;
    v7 = *(_BYTE *)(v5 + 23);
    v8 = *(const void **)(a1 + v6);
    if (v7 >= 0)
      v9 = (const void *)v5;
    else
      v9 = v8;
    if (v7 >= 0)
      v10 = v7 & 0x7F;
    else
      v10 = *(_QWORD *)(v5 + 8);
    llvm::sys::DontRemoveFileOnSignal(v9, v10);
  }
}

void sub_1C5E65468(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const void **v4;
  char v5;
  size_t v6;
  uint64_t v7;
  const void *v8;
  int v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  size_t v16;
  const void *v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[4];
  __int16 v23;
  _QWORD v24[4];
  __int16 v25;
  const void *v26;
  size_t v27;
  __int16 v28;

  if (*(_BYTE *)(a1 + 280))
  {
    sub_1C5E63AE4(a1 + 176);
    *(_BYTE *)(a1 + 280) = 0;
  }
  if (*(_BYTE *)(a1 + 168))
  {
    llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)(a1 + 72));
    *(_BYTE *)(a1 + 168) = 0;
  }
  v4 = (const void **)(a1 + 16);
  v5 = *(_BYTE *)(a1 + 39);
  if (v5 >= 0)
    v6 = v5 & 0x7F;
  else
    v6 = *(_QWORD *)(a1 + 24);
  if (v6 != 1)
    goto LABEL_32;
  v7 = *(unsigned __int8 *)(a1 + 39);
  v8 = (const void *)(a1 + 16);
  if ((*(_BYTE *)(a1 + 39) & 0x80) != 0)
  {
    v8 = *v4;
    v7 = *(_QWORD *)(a1 + 24);
  }
  v9 = memcmp(v8, "-", v7 != 0);
  if (v7 == 1 && !v9)
  {
    *a2 = 0;
  }
  else
  {
LABEL_32:
    if (*(_BYTE *)(a1 + 64))
    {
      v25 = 260;
      v24[0] = a1 + 40;
      v23 = 260;
      v22[0] = a1 + 16;
      v15 = *(_BYTE *)(a1 + 63);
      v16 = *(_QWORD *)(a1 + 48);
      if (v15 >= 0)
        v17 = (const void *)(a1 + 40);
      else
        v17 = *(const void **)(a1 + 40);
      if (v15 >= 0)
        v18 = v15 & 0x7F;
      else
        v18 = v16;
      v28 = 261;
      v26 = v17;
      v27 = v18;
      v19 = llvm::sys::fs::remove((llvm::sys::fs *)&v26, (const llvm::Twine *)1);
      v21 = v20;
      llvm::sys::DontRemoveFileOnSignal(v17, v18);
      sub_1C6399C20(a2, (llvm::Twine *)v24, (llvm::Twine *)v22, v19, v21);
    }
    else
    {
      v25 = 260;
      v24[0] = a1 + 16;
      if (v5 >= 0)
        v10 = (const void *)(a1 + 16);
      else
        v10 = *v4;
      v28 = 261;
      v26 = v10;
      v27 = v6;
      v11 = llvm::sys::fs::remove((llvm::sys::fs *)&v26, (const llvm::Twine *)1);
      v13 = v12;
      llvm::sys::DontRemoveFileOnSignal(v10, v6);
      if ((_DWORD)v11)
      {
        v14 = (_QWORD *)operator new();
        v14[2] = v13;
        *v14 = off_1E81A4C70;
        v14[1] = v11;
        llvm::Twine::str((llvm::Twine *)v24, v14 + 3);
      }
      else
      {
        v14 = 0;
      }
      *a2 = v14;
    }
  }
}

uint64_t sub_1C5E65640(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 280))
    return a1 + 176;
  else
    return a1 + 72;
}

char *llvm::vfs::OutputConfig::setOpenFlags(char *result, _BYTE *a2)
{
  char v2;
  char v3;
  char v4;

  v2 = *result;
  if ((*a2 & 1) != 0)
  {
    v4 = v2 | 1;
    *result = v4;
    v3 = *a2 & 2 | v4 & 0xFD;
  }
  else
  {
    v3 = v2 & 0xFC;
  }
  *result = v3;
  return result;
}

llvm::raw_ostream *sub_1C5E6568C(uint64_t a1, char *a2, size_t a3, char a4)
{
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  _WORD *v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *result;

  if (**(_BYTE **)a1)
  {
    **(_BYTE **)a1 = 0;
    if ((a4 & 1) != 0)
      goto LABEL_8;
LABEL_6:
    v10 = *(llvm::raw_ostream **)(a1 + 8);
    v11 = (_WORD *)*((_QWORD *)v10 + 4);
    if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 1uLL)
    {
      *v11 = 28494;
      *((_QWORD *)v10 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v10, "No", 2uLL);
    }
    goto LABEL_8;
  }
  v8 = *(llvm::raw_ostream **)(a1 + 8);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (*((_BYTE **)v8 + 3) == v9)
  {
    llvm::raw_ostream::write(v8, ",", 1uLL);
    if ((a4 & 1) != 0)
      goto LABEL_8;
    goto LABEL_6;
  }
  *v9 = 44;
  ++*((_QWORD *)v8 + 4);
  if ((a4 & 1) == 0)
    goto LABEL_6;
LABEL_8:
  v12 = *(llvm::raw_ostream **)(a1 + 8);
  result = (llvm::raw_ostream *)*((_QWORD *)v12 + 4);
  if (a3 > *((_QWORD *)v12 + 3) - (_QWORD)result)
    return llvm::raw_ostream::write(v12, a2, a3);
  if (a3)
  {
    result = (llvm::raw_ostream *)memcpy(result, a2, a3);
    *((_QWORD *)v12 + 4) += a3;
  }
  return result;
}

uint64_t sub_1C5E657A0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81A4C70;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_1C5E657DC(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81A4C70;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5E65828(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81A4C70;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_1C5E65864(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81A4C70;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5E658B0(std::error_category *a1)
{
  std::error_category::~error_category(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5E658D4()
{
  return "llvm.vfs.output";
}

uint64_t sub_1C5E658E0(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))((char *)sub_1C5E658FC + 4 * byte_1C8672758[a2 - 1]))();
}

void sub_1C5E658FC(char *a1@<X8>)
{
  a1[23] = 17;
  strcpy(a1, "output not closed");
}

void sub_1C5E65920(char *a1@<X8>)
{
  a1[23] = 21;
  strcpy(a1, "output already closed");
}

void sub_1C5E65958(char *a1@<X8>)
{
  a1[23] = 14;
  strcpy(a1, "invalid config");
}

uint64_t sub_1C5E65980(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E81A4D10;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  *(_QWORD *)a1 = off_1E81A4C70;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

__int128 *llvm::vfs::OutputFile::destroy(__int128 *this)
{
  llvm::vfs::OutputFile *v1;
  unint64_t v2;
  __int128 *v3;
  __int128 *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int v8;
  _QWORD v9[2];
  char *v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;

  if (*((_QWORD *)this + 3))
  {
    v1 = (llvm::vfs::OutputFile *)this;
    v2 = *((_QWORD *)this + 7);
    v15 = v2;
    if (v2 >= 8)
    {
      v3 = this + 2;
      if ((v2 & 2) != 0 && (v2 & 4) != 0)
      {
        (*(void (**)(__int128 *, __int128 *))((v2 & 0xFFFFFFFFFFFFFFF8) + 8))(&v13, v3);
      }
      else
      {
        v13 = *v3;
        v14 = *((_QWORD *)this + 6);
      }
      *((_QWORD *)v1 + 7) = 0;
    }
    llvm::vfs::OutputFile::discard(v1);
    if (v15 <= 7)
    {
      v9[0] = sub_1C639A25C((char *)v1);
      v9[1] = v5;
      v8 = 1;
      sub_1C639A258(&v10, v9, &v8);
      v7 = v12;
      v12 = 0;
      sub_1C624E8DC(&v10, &v7, &v11);
      llvm::report_fatal_error(&v11);
    }
    if (v12)
    {
      v6 = v12;
      v12 = 0;
      if ((v15 & 2) != 0)
        v4 = &v13;
      else
        v4 = (__int128 *)v13;
      (*(void (**)(__int128 *, char **))(v15 & 0xFFFFFFFFFFFFFFF8))(v4, &v6);
      if (v6)
        (*(void (**)(char *))(*(_QWORD *)v6 + 8))(v6);
      if (v12)
        (*(void (**)(char *))(*(_QWORD *)v12 + 8))(v12);
    }
    return (__int128 *)sub_1C5052E10(&v13);
  }
  return this;
}

void sub_1C5E65B18(_QWORD *a1@<X0>, unsigned int *a2@<X1>, llvm::vfs **a3@<X8>)
{
  llvm::vfs *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  __int16 v10;

  v6 = (llvm::vfs *)operator new();
  v10 = 261;
  v7 = a1[1];
  v9[0] = *a1;
  v9[1] = v7;
  v8 = *a2;
  *((_QWORD *)v6 + 2) = llvm::vfs::output_category(v6);
  *(_QWORD *)v6 = off_1E81A4C70;
  *((_QWORD *)v6 + 1) = v8;
  llvm::Twine::str((llvm::Twine *)v9, (_QWORD *)v6 + 3);
  *a3 = v6;
}

_QWORD *sub_1C5E65BA4(_QWORD *a1, llvm::raw_ostream *this)
{
  const char *v4;
  char *v5;
  BOOL v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;

  *a1 = this;
  v5 = (char *)this + 16;
  v4 = (const char *)*((_QWORD *)this + 2);
  if (*((_DWORD *)v5 + 10))
    v6 = v4 == 0;
  else
    v6 = 0;
  if (v6)
  {
    v7 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)this + 88))(this);
    v4 = (const char *)*((_QWORD *)this + 2);
  }
  else
  {
    v7 = *((_QWORD *)this + 3) - (_QWORD)v4;
  }
  a1[1] = v7;
  v8 = (const char *)*((_QWORD *)this + 4);
  v9 = v8 - v4;
  if (v8 != v4)
  {
    *((_QWORD *)this + 4) = v4;
    llvm::raw_ostream::flush_tied_then_write(this, v4, v9);
  }
  if (*((_DWORD *)this + 14) == 1 && *(_QWORD *)v5)
    MEMORY[0x1CAA32F9C](*(_QWORD *)v5, 0x1000C8077774924, v9);
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = 0;
  return a1;
}

uint64_t sub_1C5E65C60(uint64_t a1)
{
  if (!atomic_load(qword_1ED836E80))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836E80, (void *(*)(void))sub_1C5E6609C, (void (*)(void *))sub_1C639AE44);
  if (!*(_DWORD *)(qword_1ED836E80[0] + 128))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  if (!atomic_load(qword_1ED836E80))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836E80, (void *(*)(void))sub_1C5E6609C, (void (*)(void *))sub_1C639AE44);
  return *(_DWORD *)(qword_1ED836E80[0] + 128) == 1;
}

uint64_t llvm::WithColor::colorsEnabled(llvm::WithColor *this)
{
  int v1;

  v1 = *((_DWORD *)this + 2);
  if (v1)
    return v1 == 1;
  else
    return llvm::WithColor::AutoDetectFunction(*(_QWORD *)this);
}

llvm::raw_ostream *llvm::WithColor::remark(llvm::WithColor *this)
{
  llvm::raw_ostream *v1;

  v1 = (llvm::raw_ostream *)llvm::errs(this);
  return llvm::WithColor::remark(v1, "", 0, 0);
}

llvm::WithColor *llvm::WithColor::resetColor(llvm::WithColor *this)
{
  int v2;

  v2 = *((_DWORD *)this + 2);
  if (v2 != 2 && (v2 == 1 || (llvm::WithColor::AutoDetectFunction(*(_QWORD *)this) & 1) != 0))
    (*(void (**)(_QWORD))(**(_QWORD **)this + 32))(*(_QWORD *)this);
  return this;
}

void llvm::WithColor::~WithColor(llvm::WithColor *this)
{
  int v2;

  v2 = *((_DWORD *)this + 2);
  if (v2 != 2 && (v2 == 1 || (llvm::WithColor::AutoDetectFunction(*(_QWORD *)this) & 1) != 0))
    (*(void (**)(_QWORD))(**(_QWORD **)this + 32))(*(_QWORD *)this);
}

{
  int v2;

  v2 = *((_DWORD *)this + 2);
  if (v2 != 2 && (v2 == 1 || (llvm::WithColor::AutoDetectFunction(*(_QWORD *)this) & 1) != 0))
    (*(void (**)(_QWORD))(**(_QWORD **)this + 32))(*(_QWORD *)this);
}

char *llvm::WithColor::defaultErrorHandler(char *result)
{
  char *v1;
  uint64_t *v2;
  uint64_t *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;

  v1 = *(char **)result;
  *(_QWORD *)result = 0;
  if (v1)
  {
    if ((*(unsigned int (**)(char *, void *))(*(_QWORD *)v1 + 48))(v1, &llvm::ErrorList::ID))
    {
      v2 = (uint64_t *)*((_QWORD *)v1 + 1);
      v3 = (uint64_t *)*((_QWORD *)v1 + 2);
      if (v2 == v3)
      {
        v4 = 0;
      }
      else
      {
        v4 = 0;
        do
        {
          v10 = v4;
          v5 = *v2;
          *v2 = 0;
          v8 = v5;
          sub_1C5E66118(&v9, &v8);
          sub_1C6174794(&v10, &v9, &v11);
          v4 = v11;
          v11 = 0;
          if (v9)
            (*(void (**)(char *))(*(_QWORD *)v9 + 8))(v9);
          v6 = v8;
          v8 = 0;
          if (v6)
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
          if (v10)
            (*(void (**)(char *))(*(_QWORD *)v10 + 8))(v10);
          ++v2;
        }
        while (v2 != v3);
      }
      v7 = v4;
      return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v1 + 8))(v1);
    }
    else
    {
      v11 = v1;
      sub_1C5E66118(&v7, &v11);
      result = v11;
      if (v11)
        return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  else
  {
    v7 = 0;
  }
  return result;
}

char *llvm::WithColor::defaultWarningHandler(char *result)
{
  char *v1;
  uint64_t *v2;
  uint64_t *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;

  v1 = *(char **)result;
  *(_QWORD *)result = 0;
  if (v1)
  {
    if ((*(unsigned int (**)(char *, void *))(*(_QWORD *)v1 + 48))(v1, &llvm::ErrorList::ID))
    {
      v2 = (uint64_t *)*((_QWORD *)v1 + 1);
      v3 = (uint64_t *)*((_QWORD *)v1 + 2);
      if (v2 == v3)
      {
        v4 = 0;
      }
      else
      {
        v4 = 0;
        do
        {
          v10 = v4;
          v5 = *v2;
          *v2 = 0;
          v8 = v5;
          sub_1C5E6621C(&v9, &v8);
          sub_1C6174794(&v10, &v9, &v11);
          v4 = v11;
          v11 = 0;
          if (v9)
            (*(void (**)(char *))(*(_QWORD *)v9 + 8))(v9);
          v6 = v8;
          v8 = 0;
          if (v6)
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
          if (v10)
            (*(void (**)(char *))(*(_QWORD *)v10 + 8))(v10);
          ++v2;
        }
        while (v2 != v3);
      }
      v7 = v4;
      return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v1 + 8))(v1);
    }
    else
    {
      v11 = v1;
      sub_1C5E6621C(&v7, &v11);
      result = v11;
      if (v11)
        return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  else
  {
    v7 = 0;
  }
  return result;
}

uint64_t (*llvm::WithColor::defaultAutoDetectFunction(llvm::WithColor *this))(uint64_t a1)
{
  return sub_1C5E65C60;
}

uint64_t (*llvm::WithColor::setAutoDetectFunction(uint64_t (*result)()))()
{
  llvm::WithColor::AutoDetectFunction[0] = result;
  return result;
}

llvm::cl::Option *sub_1C5E6609C()
{
  llvm *v0;
  int v2;
  int *v3;
  __n128 v4;
  llvm::cl::OptionCategory *v5;

  v0 = (llvm *)operator new();
  llvm::getColorCategory(v0);
  v5 = (llvm::cl::OptionCategory *)&qword_1ED825D18;
  v4.n128_u64[0] = (unint64_t)"Use colors in output (default=autodetect)";
  v4.n128_u64[1] = 41;
  v2 = 0;
  v3 = &v2;
  return sub_1C639AE58(v0, &v5, &v4, &v3);
}

llvm *sub_1C5E66118(_QWORD *a1, _QWORD *a2)
{
  llvm *result;
  uint64_t v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  void **v8;
  size_t v9;
  _BYTE *v10;
  void *__p[2];
  char v12;

  result = (llvm *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*a2 + 48))(*a2, &llvm::ErrorInfoBase::ID);
  v5 = *a2;
  *a2 = 0;
  if ((_DWORD)result)
  {
    v6 = (llvm::raw_ostream *)llvm::errs(result);
    v7 = llvm::WithColor::error(v6, "", 0, 0);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v5 + 24))(__p, v5);
    if (v12 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    if (v12 >= 0)
      v9 = v12 & 0x7F;
    else
      v9 = (size_t)__p[1];
    llvm::raw_ostream::write(v7, (const char *)v8, v9);
    v10 = (_BYTE *)*((_QWORD *)v7 + 4);
    if ((unint64_t)v10 >= *((_QWORD *)v7 + 3))
    {
      llvm::raw_ostream::write(v7, 10);
    }
    else
    {
      *((_QWORD *)v7 + 4) = v10 + 1;
      *v10 = 10;
    }
    if (v12 < 0)
      operator delete(__p[0]);
    *a1 = 0;
    return (llvm *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  else
  {
    *a1 = v5;
  }
  return result;
}

llvm *sub_1C5E6621C(_QWORD *a1, _QWORD *a2)
{
  llvm *result;
  uint64_t v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  void **v8;
  size_t v9;
  _BYTE *v10;
  void *__p[2];
  char v12;

  result = (llvm *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*a2 + 48))(*a2, &llvm::ErrorInfoBase::ID);
  v5 = *a2;
  *a2 = 0;
  if ((_DWORD)result)
  {
    v6 = (llvm::raw_ostream *)llvm::errs(result);
    v7 = llvm::WithColor::warning(v6, "", 0, 0);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v5 + 24))(__p, v5);
    if (v12 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    if (v12 >= 0)
      v9 = v12 & 0x7F;
    else
      v9 = (size_t)__p[1];
    llvm::raw_ostream::write(v7, (const char *)v8, v9);
    v10 = (_BYTE *)*((_QWORD *)v7 + 4);
    if ((unint64_t)v10 >= *((_QWORD *)v7 + 3))
    {
      llvm::raw_ostream::write(v7, 10);
    }
    else
    {
      *((_QWORD *)v7 + 4) = v10 + 1;
      *v10 = 10;
    }
    if (v12 < 0)
      operator delete(__p[0]);
    *a1 = 0;
    return (llvm *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  else
  {
    *a1 = v5;
  }
  return result;
}

uint64_t llvm::X86::parseArchX86(const void *a1, size_t a2, char a3)
{
  int *i;
  int *v7;

  for (i = &dword_1E81A4F18; ; i += 10)
  {
    v7 = i - 4;
    if (*((_QWORD *)i - 1) == a2
      && (!a2 || !memcmp(*((const void **)i - 2), a1, a2))
      && ((*((_BYTE *)i + 13) & 1) != 0 || (a3 & 1) == 0))
    {
      break;
    }
    if (v7 + 10 == (int *)&off_1E81A5C78)
      return 0;
  }
  return *i;
}

uint64_t llvm::X86::fillValidCPUArchList(uint64_t result, char a2)
{
  uint64_t v3;
  uint64_t i;
  __int128 *v5;
  uint64_t v6;

  v3 = result;
  for (i = 0; i != 3440; i += 40)
  {
    v5 = (__int128 *)((char *)&xmmword_1E81A4F08 + i);
    if (*(_QWORD *)((char *)&xmmword_1E81A4F08 + i + 8) && ((*((_BYTE *)v5 + 29) & 1) != 0 || (a2 & 1) == 0))
    {
      v6 = *(unsigned int *)(v3 + 8);
      if (v6 >= *(_DWORD *)(v3 + 12))
      {
        result = sub_1C5979F58(v3, v5);
      }
      else
      {
        *(_OWORD *)(*(_QWORD *)v3 + 16 * v6) = *v5;
        ++*(_DWORD *)(v3 + 8);
      }
    }
  }
  return result;
}

size_t llvm::X86::fillValidTuneCPUList(size_t result, char a2)
{
  uint64_t v3;
  __int128 *v4;
  size_t v5;
  uint64_t v6;
  const void *v7;
  char *v8;
  __int128 *v9;
  uint64_t v10;

  v3 = result;
  v4 = &xmmword_1E81A4F08;
  do
  {
    v5 = *((_QWORD *)v4 + 1);
    if (v5 && ((*((_BYTE *)v4 + 29) & 1) != 0 || (a2 & 1) == 0))
    {
      v6 = 0;
      v7 = *(const void **)v4;
      while (1)
      {
        v8 = (&off_1E81A4EF0)[v6];
        result = v8 ? strlen((&off_1E81A4EF0)[v6]) : 0;
        if (result == v5)
        {
          result = memcmp(v8, v7, v5);
          if (!(_DWORD)result)
            break;
        }
        if (++v6 == 3)
        {
          v9 = &xmmword_1E81A4F08;
          goto LABEL_14;
        }
      }
      v9 = (__int128 *)&(&off_1E81A4EF0)[v6];
LABEL_14:
      if ((char *)v9 - (char *)&off_1E81A4EF0 == 24)
      {
        v10 = *(unsigned int *)(v3 + 8);
        if (v10 >= *(_DWORD *)(v3 + 12))
        {
          result = sub_1C5979F58(v3, v4);
        }
        else
        {
          *(_OWORD *)(*(_QWORD *)v3 + 16 * v10) = *v4;
          ++*(_DWORD *)(v3 + 8);
        }
      }
    }
    v4 = (__int128 *)((char *)v4 + 40);
  }
  while (v4 != (__int128 *)&off_1E81A5C78);
  return result;
}

uint64_t llvm::X86::getFeaturesForCPU(uint64_t __s2, size_t __n, uint64_t a3)
{
  const void *v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  int8x16_t v14;

  v5 = (const void *)__s2;
  v6 = 0;
  v7 = &xmmword_1E81A4F08;
  while (*(_QWORD *)((char *)&xmmword_1E81A4F08 + v6 + 8) != __n)
  {
LABEL_5:
    v7 = (__int128 *)((char *)v7 + 40);
    v6 += 40;
    if (v6 == 3440)
    {
      v7 = (__int128 *)&off_1E81A5C78;
      goto LABEL_8;
    }
  }
  if (__n)
  {
    __s2 = memcmp(*(const void **)((char *)&xmmword_1E81A4F08 + v6), v5, __n);
    if (!(_DWORD)__s2)
      goto LABEL_8;
    goto LABEL_5;
  }
  v7 = (__int128 *)((char *)&xmmword_1E81A4F08 + v6);
LABEL_8:
  v8 = 0;
  v14 = vandq_s8(*(int8x16_t *)((char *)v7 + 24), (int8x16_t)xmmword_1C8672770);
  v9 = &qword_1E81A5C80;
  do
  {
    if ((((unsigned __int32)v14.i32[v8 >> 5] >> v8) & 1) != 0)
    {
      v10 = *v9;
      if (*v9)
      {
        v11 = *(v9 - 1);
        v12 = *(unsigned int *)(a3 + 8);
        if (v12 >= *(unsigned int *)(a3 + 12))
        {
          __s2 = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v12 + 1, 16);
          v12 = *(unsigned int *)(a3 + 8);
        }
        v13 = (_QWORD *)(*(_QWORD *)a3 + 16 * v12);
        *v13 = v11;
        v13[1] = v10;
        ++*(_DWORD *)(a3 + 8);
      }
    }
    ++v8;
    v9 += 4;
  }
  while (v8 != 99);
  return __s2;
}

uint64_t llvm::X86::updateImpliedFeatures(uint64_t __s2, char *__n, int a3, llvm::StringMapImpl *a4)
{
  const void *v7;
  char **v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int32 v13;
  __int32 v14;
  int8x16_t v15;
  int8x16_t *v16;
  uint64_t j;
  uint64_t v18;
  __int32 v19;
  __int32 v20;
  uint64_t v21;
  size_t *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;

  v7 = (const void *)__s2;
  v8 = &off_1E81A5C78;
  while (1)
  {
    if (v8[1] == __n)
    {
      if (!__n)
        break;
      __s2 = memcmp(*v8, v7, (size_t)__n);
      if (!(_DWORD)__s2)
        break;
    }
    v8 += 4;
      return __s2;
  }
  v23 = 0uLL;
  if (!a3)
  {
    v23.i32[((unint64_t)((char *)v8 - (char *)&off_1E81A5C78) >> 10) & 0x7FFFFFF] |= 1 << ((v8
                                                                                                 - &off_1E81A5C78) >> 5);
    while (1)
    {
      v10 = 0;
      v25 = v23;
      do
      {
        v11 = 0;
        v24 = vandq_s8(v23, *(int8x16_t *)&(&off_1E81A5C78)[4 * v10 + 2]);
        while (!v24.i32[v11])
        {
          if (++v11 == 4)
            goto LABEL_19;
        }
        v23.i32[v10 >> 5] |= 1 << v10;
LABEL_19:
        ++v10;
      }
      while (v10 != 99);
      v12 = 0;
      while (1)
      {
        v13 = v25.i32[v12];
        v14 = v23.i32[v12++];
        if (v13 != v14)
          break;
        if (v12 == 4)
          goto LABEL_32;
      }
    }
  }
  for (i = 16; i != 32; i += 4)
  {
    if (*(_DWORD *)((char *)v8 + i))
    {
      v15 = vorrq_s8(*((int8x16_t *)v8 + 1), v23);
      v23 = v15;
      while (1)
      {
        v25 = v23;
        v16 = (int8x16_t *)&xmmword_1E81A68C8;
        for (j = 98; j != -1; --j)
        {
          if ((((unsigned __int32)v23.i32[j >> 5] >> j) & 1) != 0)
          {
            v15 = vorrq_s8(*v16, v15);
            v23 = v15;
          }
          v16 -= 2;
        }
        v18 = 0;
        while (1)
        {
          v19 = v25.i32[v18];
          v20 = v23.i32[v18++];
          if (v19 != v20)
            break;
          if (v18 == 4)
            goto LABEL_32;
        }
      }
    }
  }
LABEL_32:
  v21 = 0;
  v22 = (size_t *)&qword_1E81A5C80;
  do
  {
    if ((((unsigned __int32)v23.i32[v21 >> 5] >> v21) & 1) != 0)
    {
      if (*v22)
      {
        __s2 = (uint64_t)sub_1C4F022D8(a4, (unsigned __int8 *)*(v22 - 1), *v22);
        *(_BYTE *)(*(_QWORD *)__s2 + 8) = a3;
      }
    }
    ++v21;
    v22 += 4;
  }
  while (v21 != 99);
  return __s2;
}

uint64_t llvm::X86::getCpuSupportsMask(unsigned __int16 **a1, uint64_t a2)
{
  uint64_t result;
  unsigned __int16 **v4;
  char v5;
  unsigned __int16 *v6;
  int v13;
  char v14;
  BOOL v16;
  int v19;
  int v20;
  BOOL v22;
  uint64_t v27;
  int v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v35;
  int v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;

  if (a2)
  {
    result = 0;
    v4 = &a1[2 * a2];
    while (2)
    {
      v5 = 0;
      v6 = *a1;
      switch((unint64_t)a1[1])
      {
        case 3uLL:
          if (*v6 == 28013 && *((_BYTE *)v6 + 2) == 120)
          {
            v5 = 1;
          }
          else if (*v6 == 29555 && *((_BYTE *)v6 + 2) == 101)
          {
            v5 = 3;
          }
          else if (*v6 == 30305 && *((_BYTE *)v6 + 2) == 120)
          {
            v5 = 9;
          }
          else if (*v6 == 28536 && *((_BYTE *)v6 + 2) == 112)
          {
            v5 = 13;
          }
          else if (*v6 == 28006 && *((_BYTE *)v6 + 2) == 97)
          {
            v5 = 14;
          }
          else
          {
            if (*v6 != 28002 || *((_BYTE *)v6 + 2) != 105)
            {
              v13 = *v6 ^ 0x6561 | *((unsigned __int8 *)v6 + 2) ^ 0x73;
              v14 = 18;
              goto LABEL_61;
            }
            v5 = 16;
          }
          goto LABEL_120;
        case 4uLL:
          switch(*(_DWORD *)v6)
          {
            case 0x766F6D63:
              v5 = 0;
              break;
            case 0x32657373:
              v5 = 4;
              break;
            case 0x33657373:
              v5 = 5;
              break;
            case 0x32787661:
              v5 = 10;
              break;
            case 0x34616D66:
              v5 = 12;
              break;
            case 0x32696D62:
              v5 = 17;
              break;
            case 0x696E6667:
              v5 = 32;
              break;
            default:
              goto LABEL_115;
          }
          goto LABEL_120;
        case 5uLL:
          if (*(_DWORD *)v6 != 1702065011 || *((_BYTE *)v6 + 4) != 51)
          {
            v13 = *(_DWORD *)v6 ^ 0x34657373 | *((unsigned __int8 *)v6 + 4) ^ 0x61;
            v14 = 11;
            goto LABEL_61;
          }
          v5 = 6;
          goto LABEL_120;
        case 6uLL:
          v16 = *(_DWORD *)v6 == 1668312944 && v6[2] == 29806;
          v5 = 2;
          if (!v16)
          {
            if (*(_DWORD *)v6 == 879063923 && v6[2] == 12590)
            {
              v5 = 7;
            }
            else if (*(_DWORD *)v6 == 879063923 && v6[2] == 12846)
            {
              v5 = 8;
            }
            else
            {
              v19 = *(_DWORD *)v6;
              v20 = v6[2];
              if (v19 != 1835819888 || v20 != 27765)
                goto LABEL_115;
              v5 = 19;
            }
          }
          goto LABEL_120;
        case 7uLL:
          v13 = *(_DWORD *)v6 ^ 0x35787661 | *(_DWORD *)((char *)v6 + 3) ^ 0x66323135;
          v14 = 15;
LABEL_61:
          v22 = v13 == 0;
          goto LABEL_117;
        case 8uLL:
          switch(*(_QWORD *)v6)
          {
            case 0x6C76323135787661:
              v5 = 20;
              break;
            case 0x7762323135787661:
              v5 = 21;
              break;
            case 0x7164323135787661:
              v5 = 22;
              break;
            case 0x6463323135787661:
              v5 = 23;
              break;
            case 0x7265323135787661:
              v5 = 24;
              break;
            case 0x6670323135787661:
              v5 = 25;
              break;
            default:
              goto LABEL_115;
          }
          goto LABEL_120;
        case 0xAuLL:
          if (*(_QWORD *)v6 == 0x6276323135787661 && v6[4] == 26989)
          {
            v5 = 26;
            goto LABEL_120;
          }
          if (*(_QWORD *)v6 == 0x6669323135787661 && v6[4] == 24941)
          {
            v5 = 27;
            goto LABEL_120;
          }
          if (*(_QWORD *)v6 == 0x716C756D6C637076 && v6[4] == 29028)
          {
            v5 = 33;
            goto LABEL_120;
          }
          if (*(_QWORD *)v6 == 0x6E76323135787661 && v6[4] == 26990)
          {
            v5 = 34;
            goto LABEL_120;
          }
          v27 = *(_QWORD *)v6;
          v28 = v6[4];
          if (v27 == 0x6662323135787661 && v28 == 13873)
          {
            v5 = 36;
            goto LABEL_120;
          }
          goto LABEL_115;
        case 0xBuLL:
          v30 = *(_QWORD *)v6;
          v31 = *(_QWORD *)((char *)v6 + 3);
          if (v30 != 0x6276323135787661 || v31 != 0x32696D6276323135)
            goto LABEL_115;
          v5 = 31;
          goto LABEL_120;
        case 0xCuLL:
          if (*(_QWORD *)v6 == 0x7634323135787661 && *((_DWORD *)v6 + 2) == 2003398254)
          {
            v5 = 28;
          }
          else if (*(_QWORD *)v6 == 0x6634323135787661 && *((_DWORD *)v6 + 2) == 1936744813)
          {
            v5 = 29;
          }
          else
          {
            v35 = *(_QWORD *)v6;
            v36 = *((_DWORD *)v6 + 2);
            if (v35 == 0x6962323135787661 && v36 == 1735156084)
              v5 = 35;
            else
LABEL_115:
              v5 = 0;
          }
LABEL_120:
          result |= 1 << v5;
          a1 += 2;
          if (a1 == v4)
            return result;
          continue;
        case 0xFuLL:
          v38 = *(_QWORD *)v6;
          v39 = *(_QWORD *)((char *)v6 + 7);
          if (v38 != 0x7076323135787661 || v39 != 0x7164746E63706F70)
            goto LABEL_115;
          v5 = 30;
          goto LABEL_120;
        case 0x12uLL:
          v41 = *(_QWORD *)v6 ^ 0x7076323135787661 | *((_QWORD *)v6 + 1) ^ 0x65737265746E6932 | v6[8] ^ 0x7463;
          v14 = 37;
          v22 = v41 == 0;
LABEL_117:
          if (v22)
            v5 = v14;
          else
            v5 = 0;
          goto LABEL_120;
        default:
          goto LABEL_120;
      }
    }
  }
  return 0;
}

__int128 *sub_1C5E66F38(const void *a1, size_t a2)
{
  uint64_t v4;
  char **i;
  char *v6;
  size_t v7;

  v4 = 0;
  for (i = &off_1E81A4EF0; ; ++i)
  {
    v6 = (&off_1E81A4EF0)[v4];
    v7 = v6 ? strlen((&off_1E81A4EF0)[v4]) : 0;
    if (v7 == a2)
      break;
LABEL_8:
    if (++v4 == 3)
      return &xmmword_1E81A4F08;
  }
  if (a2)
  {
    if (!memcmp(v6, a1, a2))
      return (__int128 *)i;
    goto LABEL_8;
  }
  return (__int128 *)&(&off_1E81A4EF0)[v4];
}

BOOL llvm::yaml::dumpTokens(uint64_t a1, uint64_t a2, llvm::raw_ostream *a3)
{
  _QWORD *v4;
  llvm::raw_ostream *v5;
  const char *v6;
  uint64_t v7;
  size_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _OWORD *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  size_t v21;
  _BYTE *v22;
  llvm::raw_ostream *v23;
  int v24;
  const char *v25;
  uint64_t v26;
  int v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v35;
  const void *v36;
  size_t v37;
  void *__p;
  char v39;
  _OWORD v40[4];
  uint64_t v41;
  uint64_t v42[45];

  v42[43] = *MEMORY[0x1E0C80C00];
  v41 = 0;
  memset(v40, 0, sizeof(v40));
  llvm::yaml::Scanner::Scanner((uint64_t)v42, a1, a2, (uint64_t)v40, 1, 0);
  while (2)
  {
    llvm::yaml::Scanner::getNext((llvm::yaml::Scanner *)v42, (uint64_t)&v35);
    switch(v35)
    {
      case 1:
        v4 = (_QWORD *)*((_QWORD *)a3 + 4);
        if (*((_QWORD *)a3 + 3) - (_QWORD)v4 <= 0xDuLL)
        {
          v5 = a3;
          v6 = "Stream-Start: ";
          goto LABEL_44;
        }
        v25 = "Stream-Start: ";
        goto LABEL_79;
      case 2:
        v10 = *((_QWORD *)a3 + 4);
        if ((unint64_t)(*((_QWORD *)a3 + 3) - v10) <= 0xB)
        {
          v5 = a3;
          v6 = "Stream-End: ";
          goto LABEL_29;
        }
        *(_DWORD *)(v10 + 8) = 540697710;
        v28 = "Stream-End: ";
        goto LABEL_85;
      case 3:
        v11 = *((_QWORD *)a3 + 4);
        if ((unint64_t)(*((_QWORD *)a3 + 3) - v11) <= 0x12)
        {
          v5 = a3;
          v6 = "Version-Directive: ";
          goto LABEL_35;
        }
        *(_DWORD *)(v11 + 15) = 540697974;
        v29 = "Version-Directive: ";
        goto LABEL_89;
      case 4:
        v12 = (void *)*((_QWORD *)a3 + 4);
        if (*((_QWORD *)a3 + 3) - (_QWORD)v12 <= 0xEuLL)
        {
          v5 = a3;
          v6 = "Tag-Directive: ";
          v8 = 15;
          goto LABEL_54;
        }
        qmemcpy(v12, "Tag-Directive: ", 15);
        v26 = *((_QWORD *)a3 + 4) + 15;
        goto LABEL_101;
      case 5:
        v13 = (_OWORD *)*((_QWORD *)a3 + 4);
        if (*((_QWORD *)a3 + 3) - (_QWORD)v13 <= 0xFuLL)
        {
          v5 = a3;
          v6 = "Document-Start: ";
          v8 = 16;
          goto LABEL_54;
        }
        *v13 = *(_OWORD *)"Document-Start: ";
        v26 = *((_QWORD *)a3 + 4) + 16;
        goto LABEL_101;
      case 6:
        v4 = (_QWORD *)*((_QWORD *)a3 + 4);
        if (*((_QWORD *)a3 + 3) - (_QWORD)v4 <= 0xDuLL)
        {
          v5 = a3;
          v6 = "Document-End: ";
          goto LABEL_44;
        }
        v25 = "Document-End: ";
LABEL_79:
        *v4 = *(_QWORD *)v25;
        v30 = *(_QWORD *)(v25 + 6);
        goto LABEL_94;
      case 7:
        v14 = (void *)*((_QWORD *)a3 + 4);
        if (*((_QWORD *)a3 + 3) - (_QWORD)v14 <= 0xCuLL)
        {
          v5 = a3;
          v6 = "Block-Entry: ";
          v8 = 13;
          goto LABEL_54;
        }
        qmemcpy(v14, "Block-Entry: ", 13);
        v26 = *((_QWORD *)a3 + 4) + 13;
        goto LABEL_101;
      case 8:
        v15 = *((_QWORD *)a3 + 4);
        if ((unint64_t)(*((_QWORD *)a3 + 3) - v15) <= 0xA)
        {
          v5 = a3;
          v6 = "Block-End: ";
          v8 = 11;
          goto LABEL_54;
        }
        *(_DWORD *)(v15 + 7) = 540697710;
        *(_QWORD *)v15 = *(_QWORD *)"Block-End: ";
        v26 = *((_QWORD *)a3 + 4) + 11;
        goto LABEL_101;
      case 9:
        v16 = (void *)*((_QWORD *)a3 + 4);
        if (*((_QWORD *)a3 + 3) - (_QWORD)v16 <= 0x15uLL)
        {
          v5 = a3;
          v6 = "Block-Sequence-Start: ";
          v8 = 22;
          goto LABEL_54;
        }
        qmemcpy(v16, "Block-Sequence-Start: ", 22);
        v26 = *((_QWORD *)a3 + 4) + 22;
        goto LABEL_101;
      case 10:
        v17 = *((_QWORD *)a3 + 4);
        if ((unint64_t)(*((_QWORD *)a3 + 3) - v17) <= 0x14)
        {
          v5 = a3;
          v6 = "Block-Mapping-Start: ";
          goto LABEL_32;
        }
        *(_OWORD *)v17 = *(_OWORD *)"Block-Mapping-Start: ";
        v31 = *(_QWORD *)"-Start: ";
        goto LABEL_87;
      case 11:
        v10 = *((_QWORD *)a3 + 4);
        if ((unint64_t)(*((_QWORD *)a3 + 3) - v10) <= 0xB)
        {
          v5 = a3;
          v6 = "Flow-Entry: ";
LABEL_29:
          v8 = 12;
          goto LABEL_54;
        }
        *(_DWORD *)(v10 + 8) = 540703090;
        v28 = "Flow-Entry: ";
LABEL_85:
        *(_QWORD *)v10 = *(_QWORD *)v28;
        v26 = *((_QWORD *)a3 + 4) + 12;
        goto LABEL_101;
      case 12:
        v17 = *((_QWORD *)a3 + 4);
        if ((unint64_t)(*((_QWORD *)a3 + 3) - v17) <= 0x14)
        {
          v5 = a3;
          v6 = "Flow-Sequence-Start: ";
LABEL_32:
          v8 = 21;
          goto LABEL_54;
        }
        *(_OWORD *)v17 = *(_OWORD *)"Flow-Sequence-Start: ";
        v31 = *(_QWORD *)"-Start: ";
LABEL_87:
        *(_QWORD *)(v17 + 13) = v31;
        v26 = *((_QWORD *)a3 + 4) + 21;
        goto LABEL_101;
      case 13:
        v11 = *((_QWORD *)a3 + 4);
        if ((unint64_t)(*((_QWORD *)a3 + 3) - v11) <= 0x12)
        {
          v5 = a3;
          v6 = "Flow-Sequence-End: ";
LABEL_35:
          v8 = 19;
          goto LABEL_54;
        }
        *(_DWORD *)(v11 + 15) = 540697710;
        v29 = "Flow-Sequence-End: ";
LABEL_89:
        *(_OWORD *)v11 = *(_OWORD *)v29;
        v26 = *((_QWORD *)a3 + 4) + 19;
        goto LABEL_101;
      case 14:
        v18 = *((_QWORD *)a3 + 4);
        if ((unint64_t)(*((_QWORD *)a3 + 3) - v18) <= 0x13)
        {
          v5 = a3;
          v6 = "Flow-Mapping-Start: ";
          v8 = 20;
          goto LABEL_54;
        }
        *(_DWORD *)(v18 + 16) = 540701810;
        *(_OWORD *)v18 = *(_OWORD *)"Flow-Mapping-Start: ";
        v26 = *((_QWORD *)a3 + 4) + 20;
        goto LABEL_101;
      case 15:
        v7 = *((_QWORD *)a3 + 4);
        if ((unint64_t)(*((_QWORD *)a3 + 3) - v7) <= 0x11)
        {
          v5 = a3;
          v6 = "Flow-Mapping-End: ";
          v8 = 18;
          goto LABEL_54;
        }
        *(_WORD *)(v7 + 16) = 8250;
        *(_OWORD *)v7 = *(_OWORD *)"Flow-Mapping-End: ";
        v26 = *((_QWORD *)a3 + 4) + 18;
        goto LABEL_101;
      case 16:
        v19 = *((_QWORD *)a3 + 4);
        if ((unint64_t)(*((_QWORD *)a3 + 3) - v19) <= 4)
        {
          v5 = a3;
          v6 = "Key: ";
          goto LABEL_53;
        }
        *(_BYTE *)(v19 + 4) = 32;
        v32 = 981034315;
        goto LABEL_100;
      case 17:
        v9 = (int *)*((_QWORD *)a3 + 4);
        if (*((_QWORD *)a3 + 3) - (_QWORD)v9 <= 6uLL)
        {
          v5 = a3;
          v6 = "Value: ";
          goto LABEL_47;
        }
        *(int *)((char *)v9 + 3) = 540697973;
        v27 = 1970037078;
        goto LABEL_96;
      case 18:
        v20 = (uint64_t *)*((_QWORD *)a3 + 4);
        if (*((_QWORD *)a3 + 3) - (_QWORD)v20 <= 7uLL)
        {
          v5 = a3;
          v6 = "Scalar: ";
          goto LABEL_50;
        }
        v33 = 0x72616C616353;
        goto LABEL_98;
      case 19:
        v4 = (_QWORD *)*((_QWORD *)a3 + 4);
        if (*((_QWORD *)a3 + 3) - (_QWORD)v4 <= 0xDuLL)
        {
          v5 = a3;
          v6 = "Block Scalar: ";
LABEL_44:
          v8 = 14;
          goto LABEL_54;
        }
        *v4 = *(_QWORD *)"Block Scalar: ";
        v30 = *(_QWORD *)"Scalar: ";
LABEL_94:
        *(_QWORD *)((char *)v4 + 6) = v30;
        v26 = *((_QWORD *)a3 + 4) + 14;
        goto LABEL_101;
      case 20:
        v9 = (int *)*((_QWORD *)a3 + 4);
        if (*((_QWORD *)a3 + 3) - (_QWORD)v9 <= 6uLL)
        {
          v5 = a3;
          v6 = "Alias: ";
LABEL_47:
          v8 = 7;
          goto LABEL_54;
        }
        *(int *)((char *)v9 + 3) = 540701537;
        v27 = 1634298945;
LABEL_96:
        *v9 = v27;
        v26 = *((_QWORD *)a3 + 4) + 7;
        goto LABEL_101;
      case 21:
        v20 = (uint64_t *)*((_QWORD *)a3 + 4);
        if (*((_QWORD *)a3 + 3) - (_QWORD)v20 <= 7uLL)
        {
          v5 = a3;
          v6 = "Anchor: ";
LABEL_50:
          v8 = 8;
          goto LABEL_54;
        }
        v33 = 0x726F68636E41;
LABEL_98:
        *v20 = v33 & 0xFFFFFFFFFFFFLL | 0x203A000000000000;
        v26 = *((_QWORD *)a3 + 4) + 8;
        goto LABEL_101;
      case 22:
        v19 = *((_QWORD *)a3 + 4);
        if ((unint64_t)(*((_QWORD *)a3 + 3) - v19) > 4)
        {
          *(_BYTE *)(v19 + 4) = 32;
          v32 = 979853652;
LABEL_100:
          *(_DWORD *)v19 = v32;
          v26 = *((_QWORD *)a3 + 4) + 5;
LABEL_101:
          *((_QWORD *)a3 + 4) = v26;
        }
        else
        {
          v5 = a3;
          v6 = "Tag: ";
LABEL_53:
          v8 = 5;
LABEL_54:
          llvm::raw_ostream::write(v5, v6, v8);
        }
LABEL_55:
        v21 = v37;
        v22 = (_BYTE *)*((_QWORD *)a3 + 4);
        if (v37 <= *((_QWORD *)a3 + 3) - (_QWORD)v22)
        {
          if (v37)
          {
            memcpy(v22, v36, v37);
            v22 = (_BYTE *)(*((_QWORD *)a3 + 4) + v21);
            *((_QWORD *)a3 + 4) = v22;
          }
          v23 = a3;
        }
        else
        {
          v23 = llvm::raw_ostream::write(a3, (const char *)v36, v37);
          v22 = (_BYTE *)*((_QWORD *)v23 + 4);
        }
        if (*((_BYTE **)v23 + 3) == v22)
        {
          llvm::raw_ostream::write(v23, "\n", 1uLL);
        }
        else
        {
          *v22 = 10;
          ++*((_QWORD *)v23 + 4);
        }
        if (v35 == 2)
          v24 = 3;
        else
          v24 = v35 == 0;
        if ((v39 & 0x80000000) == 0)
        {
          if (v24)
            goto LABEL_102;
          continue;
        }
        operator delete(__p);
        if (!v24)
          continue;
LABEL_102:
        sub_1C639BE38(v42);
        llvm::SourceMgr::~SourceMgr((llvm::SourceMgr *)v40);
        return v24 == 3;
      default:
        goto LABEL_55;
    }
  }
}

void llvm::yaml::Scanner::getNext(llvm::yaml::Scanner *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  _BYTE *v6;
  __int128 v7;
  _QWORD *v8;
  _QWORD *v9;

  v4 = llvm::yaml::Scanner::peekNext(this);
  v5 = *(_OWORD *)v4;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v4 + 16);
  *(_OWORD *)a2 = v5;
  v6 = (_BYTE *)(a2 + 24);
  if (*(char *)(v4 + 47) < 0)
  {
    sub_1C47EBC30(v6, *(void **)(v4 + 24), *(_QWORD *)(v4 + 32));
  }
  else
  {
    v7 = *(_OWORD *)(v4 + 24);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(v4 + 40);
    *(_OWORD *)v6 = v7;
  }
  v9 = (_QWORD *)*((_QWORD *)this + 22);
  v8 = (_QWORD *)((char *)this + 176);
  if (v9 == v8 || (sub_1C5E68668((uint64_t)(v8 - 12)), (_QWORD *)*v8 == v8))
    sub_1C4926A50((uint64_t)(v8 - 12));
}

BOOL llvm::yaml::scanTokens(uint64_t a1, uint64_t a2)
{
  int v2;
  _DWORD v4[6];
  void *__p;
  char v6;
  _OWORD v7[4];
  uint64_t v8;
  uint64_t v9[44];

  v9[43] = *MEMORY[0x1E0C80C00];
  v8 = 0;
  memset(v7, 0, sizeof(v7));
  llvm::yaml::Scanner::Scanner((uint64_t)v9, a1, a2, (uint64_t)v7, 1, 0);
  do
  {
    while (1)
    {
      llvm::yaml::Scanner::getNext((llvm::yaml::Scanner *)v9, (uint64_t)v4);
      v2 = v4[0] == 2 ? 3 : v4[0] == 0;
      if (v6 < 0)
        break;
      if (v2)
        goto LABEL_9;
    }
    operator delete(__p);
  }
  while (!v2);
LABEL_9:
  sub_1C639BE38(v9);
  llvm::SourceMgr::~SourceMgr((llvm::SourceMgr *)v7);
  return v2 == 3;
}

void llvm::yaml::escape(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X8>)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unint64_t v8;
  std::string *v9;
  const std::string::value_type *v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  std::string::size_type v14;
  std::string *p_b;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  std::string *v20;
  std::string::size_type v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *p_p;
  std::string::size_type size;
  unint64_t v28;
  std::string::size_type v29;
  std::string *v30;
  const std::string::value_type *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  unsigned int v36;
  char *v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  const std::string::value_type *v42;
  unint64_t v43;
  unint64_t v44;
  std::string *v45;
  std::string::size_type v46;
  const std::string::value_type *v47;
  std::string::size_type v48;
  std::string *v49;
  std::string::size_type v50;
  std::string *v51;
  std::string::size_type v52;
  int v53;
  std::string::size_type v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  std::string::size_type v60;
  char *v61;
  std::string::size_type v62;
  std::string::size_type v63;
  uint64_t v64;
  std::string *v65;
  std::string::size_type v66;
  std::string::size_type v67;
  std::string::size_type v68;
  unint64_t v69;
  std::string::size_type v70;
  _BYTE *v71;
  char v72;
  std::string::size_type v73;
  std::string::value_type *v74;
  std::string::value_type v75;
  void *v76;
  __int128 v77;
  uint64_t v78;
  std::string __b;
  std::string v80;
  std::string __p;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (!a2)
    return;
  v6 = a1;
  v7 = &a1[a2];
  while (1)
  {
    v8 = *v6;
    if (*v6 <= 0x1Au)
    {
      switch(*v6)
      {
        case 0u:
          v9 = (std::string *)a4;
          v10 = "\\0";
          goto LABEL_19;
        case 7u:
          v9 = (std::string *)a4;
          v10 = "\\a";
          goto LABEL_19;
        case 8u:
          v9 = (std::string *)a4;
          v10 = "\\b";
          goto LABEL_19;
        case 9u:
          v9 = (std::string *)a4;
          v10 = "\\t";
          goto LABEL_19;
        case 0xAu:
          v9 = (std::string *)a4;
          v10 = "\\n";
          goto LABEL_19;
        case 0xBu:
          v9 = (std::string *)a4;
          v10 = "\\v";
          goto LABEL_19;
        case 0xCu:
          v9 = (std::string *)a4;
          v10 = "\\f";
          goto LABEL_19;
        case 0xDu:
          v9 = (std::string *)a4;
          v10 = "\\r";
          goto LABEL_19;
        default:
          goto LABEL_22;
      }
    }
    if ((_DWORD)v8 == 27)
    {
      v9 = (std::string *)a4;
      v10 = "\\e";
      goto LABEL_19;
    }
    if ((_DWORD)v8 == 34)
    {
      v9 = (std::string *)a4;
      v10 = "\\\"";
      goto LABEL_19;
    }
    if ((_DWORD)v8 != 92)
      break;
    v9 = (std::string *)a4;
    v10 = "\\\\";
LABEL_19:
    std::string::append(v9, v10);
LABEL_20:
    if (++v6 == v7)
      return;
  }
LABEL_22:
  if (v8 <= 0x1F)
  {
    v11 = &__p.__r_.__value_.__s.__data_[17];
    if (*v6)
    {
      do
      {
        *--v11 = a0123456789abcd_6[v8 & 0xF];
        v12 = v8 > 0xF;
        v8 >>= 4;
      }
      while (v12);
    }
    else
    {
      __p.__r_.__value_.__s.__data_[16] = 48;
      v11 = &__p.__r_.__value_.__s.__data_[16];
    }
    sub_1C4E61270(&v76, v11, &__p.__r_.__value_.__s.__data_[17], (char *)&__p.__r_.__value_.__r.__words[2] + 1 - v11);
    v13 = HIBYTE(v77) & 0x7F;
    if (v77 < 0)
      v13 = v77;
    v14 = 2 - v13;
    if ((unint64_t)(2 - v13) >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v14 >= 0x17)
    {
      v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v16 = v14 | 7;
      v17 = a3;
      v18 = v16 + 1;
      p_b = (std::string *)operator new(v16 + 1);
      v19 = v18 | 0x8000000000000000;
      a3 = v17;
      __b.__r_.__value_.__l.__size_ = v14;
      __b.__r_.__value_.__r.__words[2] = v19;
      __b.__r_.__value_.__r.__words[0] = (std::string::size_type)p_b;
    }
    else
    {
      *((_BYTE *)&__b.__r_.__value_.__s + 23) = 2 - v13;
      p_b = &__b;
      if (v13 == 2)
        goto LABEL_39;
    }
    memset(p_b, 48, v14);
LABEL_39:
    p_b->__r_.__value_.__s.__data_[v14] = 0;
    v20 = std::string::insert(&__b, 0, "\\x");
    v21 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v80.__r_.__value_.__r.__words[2] = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (v77 >= 0)
      v22 = (const std::string::value_type *)&v76;
    else
      v22 = (const std::string::value_type *)v76;
    if (v77 >= 0)
      v23 = HIBYTE(v77) & 0x7F;
    else
      v23 = v77;
    v24 = std::string::append(&v80, v22, v23);
    v25 = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __p.__r_.__value_.__l.__size_;
    std::string::append((std::string *)a4, (const std::string::value_type *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v80.__r_.__value_.__l.__data_);
    if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__b.__r_.__value_.__l.__data_);
    if (SHIBYTE(v77) < 0)
      operator delete(v76);
    goto LABEL_20;
  }
  if ((v8 & 0x80) == 0)
  {
    std::string::push_back((std::string *)a4, v8);
    goto LABEL_20;
  }
  v28 = sub_1C5E681AC(v6, v7 - v6);
  v29 = HIDWORD(v28);
  if (HIDWORD(v28))
  {
    if ((int)v28 > 8231)
    {
      if ((_DWORD)v28 == 8232)
      {
        v30 = (std::string *)a4;
        v31 = "\\L";
      }
      else
      {
        if ((_DWORD)v28 != 8233)
          goto LABEL_71;
        v30 = (std::string *)a4;
        v31 = "\\P";
      }
    }
    else
    {
      if ((_DWORD)v28 != 133)
      {
        if ((_DWORD)v28 == 160)
        {
          v30 = (std::string *)a4;
          v31 = "\\_";
          goto LABEL_69;
        }
LABEL_71:
        if (WORD1(v28) <= 0x10u && (a3 & 1) == 0)
        {
          v32 = (char *)&unk_1C8670D0C;
          v33 = 548;
          do
          {
            v34 = v33 >> 1;
            v35 = &v32[8 * (v33 >> 1)];
            v36 = *((_DWORD *)v35 + 1);
            v37 = v35 + 8;
            v33 += ~(v33 >> 1);
            if (v36 < v28)
              v32 = v37;
            else
              v33 = v34;
          }
          while (v33);
          if (v32 == (char *)&unk_1C8671E2C || *(_DWORD *)v32 > v28)
          {
            std::string::append((std::string *)a4, (const std::string::value_type *)v6, v29);
            goto LABEL_70;
          }
        }
        v38 = v28;
        if ((_DWORD)v28)
        {
          v39 = &__p.__r_.__value_.__s.__data_[17];
          do
          {
            *--v39 = a0123456789abcd_6[v38 & 0xF];
            v12 = v38 > 0xF;
            v38 >>= 4;
          }
          while (v12);
        }
        else
        {
          __p.__r_.__value_.__s.__data_[16] = 48;
          v39 = &__p.__r_.__value_.__s.__data_[16];
        }
        sub_1C4E61270(&v76, v39, &__p.__r_.__value_.__s.__data_[17], (char *)&__p.__r_.__value_.__r.__words[2] + 1 - v39);
        v40 = HIBYTE(v77) & 0x7F;
        if (v77 < 0)
          v40 = v77;
        if (v40 <= 2)
        {
          v41 = 2 - v40;
          *((_BYTE *)&__b.__r_.__value_.__s + 23) = 2 - v40;
          if (v40 != 2)
            memset(&__b, 48, 2 - v40);
          __b.__r_.__value_.__s.__data_[v41] = 0;
          v42 = "\\x";
          goto LABEL_100;
        }
        if (v40 <= 4)
        {
          v43 = 4 - v40;
          *((_BYTE *)&__b.__r_.__value_.__s + 23) = 4 - v40;
          if (v40 != 4)
            memset(&__b, 48, 4 - v40);
          __b.__r_.__value_.__s.__data_[v43] = 0;
          v42 = "\\u";
          goto LABEL_100;
        }
        if (v40 <= 8)
        {
          v44 = 8 - v40;
          *((_BYTE *)&__b.__r_.__value_.__s + 23) = 8 - v40;
          if (v40 != 8)
            memset(&__b, 48, 8 - v40);
          __b.__r_.__value_.__s.__data_[v44] = 0;
          v42 = "\\U";
LABEL_100:
          v45 = std::string::insert(&__b, 0, v42);
          v46 = v45->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v80.__r_.__value_.__l.__data_ = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
          v80.__r_.__value_.__r.__words[2] = v46;
          v45->__r_.__value_.__l.__size_ = 0;
          v45->__r_.__value_.__r.__words[2] = 0;
          v45->__r_.__value_.__r.__words[0] = 0;
          if (v77 >= 0)
            v47 = (const std::string::value_type *)&v76;
          else
            v47 = (const std::string::value_type *)v76;
          if (v77 >= 0)
            v48 = HIBYTE(v77) & 0x7F;
          else
            v48 = v77;
          v49 = std::string::append(&v80, v47, v48);
          v50 = v49->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v50;
          v49->__r_.__value_.__l.__size_ = 0;
          v49->__r_.__value_.__r.__words[2] = 0;
          v49->__r_.__value_.__r.__words[0] = 0;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v51 = &__p;
          else
            v51 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v52 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
          else
            v52 = __p.__r_.__value_.__l.__size_;
          std::string::append((std::string *)a4, (const std::string::value_type *)v51, v52);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v80.__r_.__value_.__l.__data_);
          if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__b.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v77) < 0)
          operator delete(v76);
        goto LABEL_70;
      }
      v30 = (std::string *)a4;
      v31 = "\\N";
    }
LABEL_69:
    std::string::append(v30, v31);
LABEL_70:
    v6 += (v29 - 1);
    goto LABEL_20;
  }
  v76 = &v78;
  v77 = xmmword_1C6612EF0;
  sub_1C5E6830C((void *)0xFFFD, &v76);
  v53 = *(char *)(a4 + 23);
  v55 = *(_QWORD *)a4;
  v54 = *(_QWORD *)(a4 + 8);
  if (v53 >= 0)
    v56 = a4;
  else
    v56 = *(_QWORD *)a4;
  v57 = *(unsigned __int8 *)(a4 + 23);
  if (v53 >= 0)
    v58 = *(unsigned __int8 *)(a4 + 23);
  else
    v58 = *(_QWORD *)(a4 + 8);
  v59 = v56 + v58;
  v61 = (char *)v76;
  v60 = v77;
  if (v53 < 0)
  {
    if ((_QWORD)v77)
    {
      v62 = v59 - v55;
      if (v55 <= (unint64_t)v76 && v55 + v54 + 1 > (unint64_t)v76)
        goto LABEL_135;
      v63 = (*(_QWORD *)(a4 + 16) & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v63 - v54 >= (unint64_t)v77)
        goto LABEL_147;
LABEL_131:
      std::string::__grow_by((std::string *)a4, v63, v54 + v77 - v63, v54, v62, 0, v77);
      *(_QWORD *)(a4 + 8) = v54 + v60;
      v55 = *(_QWORD *)a4;
LABEL_152:
      v70 = v54 + v60;
      if (*(char *)(a4 + 23) < 0)
        *(_QWORD *)(a4 + 8) = v70;
      else
        *(_BYTE *)(a4 + 23) = v70 & 0x7F;
      *(_BYTE *)(v55 + v70) = 0;
      v71 = (_BYTE *)(v55 + v62);
      do
      {
        v72 = *v61++;
        *v71++ = v72;
        --v60;
      }
      while (v60);
    }
  }
  else if ((_QWORD)v77)
  {
    v62 = v59 - a4;
    if ((unint64_t)v76 < a4 || a4 + v57 + 1 <= (unint64_t)v76)
    {
      v63 = 22;
      v54 = *(unsigned __int8 *)(a4 + 23);
      v55 = a4;
      if (22 - v57 < (unint64_t)v77)
        goto LABEL_131;
LABEL_147:
      if (v54 == v62)
        v54 = v62;
      else
        memmove((void *)(v55 + v62 + v77), (const void *)(v55 + v62), v54 - v62);
      goto LABEL_152;
    }
LABEL_135:
    v64 = 0;
    memset(&__p, 0, sizeof(__p));
    do
      std::string::push_back(&__p, v61[v64++]);
    while (v60 != v64);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v65 = &__p;
    else
      v65 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v66 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      v66 = __p.__r_.__value_.__l.__size_;
    if (*(char *)(a4 + 23) < 0)
    {
      v67 = *(_QWORD *)(a4 + 8);
      v68 = (*(_QWORD *)(a4 + 16) & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v68 - v67 < v60)
        goto LABEL_150;
      v69 = *(_QWORD *)a4;
LABEL_159:
      if (v67 == v62)
        v67 = v62;
      else
        memmove((void *)(v69 + v62 + v60), (const void *)(v69 + v62), v67 - v62);
    }
    else
    {
      v67 = *(unsigned __int8 *)(a4 + 23);
      v68 = 22;
      v69 = a4;
      if (22 - v67 >= v60)
        goto LABEL_159;
LABEL_150:
      std::string::__grow_by((std::string *)a4, v68, v67 + v60 - v68, v67, v62, 0, v60);
      *(_QWORD *)(a4 + 8) = v67 + v60;
      v69 = *(_QWORD *)a4;
    }
    v73 = v67 + v60;
    if (*(char *)(a4 + 23) < 0)
      *(_QWORD *)(a4 + 8) = v73;
    else
      *(_BYTE *)(a4 + 23) = v73 & 0x7F;
    *(_BYTE *)(v69 + v73) = 0;
    if (v66)
    {
      v74 = (std::string::value_type *)(v69 + v62);
      do
      {
        v75 = v65->__r_.__value_.__s.__data_[0];
        v65 = (std::string *)((char *)v65 + 1);
        *v74++ = v75;
        --v66;
      }
      while (v66);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v76 != &v78)
    free(v76);
}

uint64_t sub_1C5E681AC(unsigned __int8 *a1, unint64_t a2)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  int v8;
  char v9;
  char v10;
  char v11;
  int v12;

  if ((uint64_t)a2 < 1)
    goto LABEL_21;
  v2 = (char)*a1;
  if ((v2 & 0x80000000) == 0)
  {
    v3 = *a1;
    v4 = 0x100000000;
    return v4 | v3;
  }
  if (a2 < 2)
    goto LABEL_21;
  if ((v2 & 0xE0) == 0xC0)
  {
    v5 = a1[1];
    if ((v5 & 0xC0) == 0x80)
    {
      v3 = v5 & 0x3F | ((v2 & 0x1F) << 6);
      if (v3 >= 0x80)
      {
        v4 = 0x200000000;
        return v4 | v3;
      }
    }
  }
  if (a2 < 3)
  {
LABEL_21:
    v3 = 0;
    v4 = 0;
    return v4 | v3;
  }
  if ((v2 & 0xF0) == 0xE0)
  {
    v6 = a1[1];
    if ((v6 & 0xC0) == 0x80)
    {
      v7 = a1[2];
      if ((v7 & 0xC0) == 0x80)
      {
        v8 = ((v2 & 0xF) << 12) | ((v6 & 0x3F) << 6);
        v3 = v8 | v7 & 0x3F;
        if (v3 >= 0x800 && (v8 - 57344) <= 0xFFFFF7FF)
        {
          v4 = 0x300000000;
          return v4 | v3;
        }
      }
    }
  }
  v3 = 0;
  if (a2 < 4)
  {
    v4 = 0;
    return v4 | v3;
  }
  v4 = 0;
  if ((v2 & 0xF8) == 0xF0)
  {
    v9 = a1[1];
    if ((v9 & 0xC0) == 0x80)
    {
      v10 = a1[2];
      if ((v10 & 0xC0) == 0x80)
      {
        v11 = a1[3];
        if ((v11 & 0xC0) == 0x80)
        {
          v12 = ((v2 & 7) << 18) | ((v9 & 0x3F) << 12);
          if ((v12 - 1114112) >= 0xFFF00000)
          {
            v3 = v11 & 0x3F | ((v10 & 0x3F) << 6) | v12;
            v4 = 0x400000000;
            return v4 | v3;
          }
        }
      }
    }
    goto LABEL_21;
  }
  return v4 | v3;
}

void *sub_1C5E6830C(void *result, _QWORD *a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;

  v3 = result;
  if (result <= 0x7F)
  {
    v4 = a2[1];
    v5 = v4 + 1;
    if ((unint64_t)(v4 + 1) <= a2[2])
    {
LABEL_3:
      v6 = v3;
LABEL_7:
      *(_BYTE *)(*a2 + v4) = v6;
      ++a2[1];
      return result;
    }
LABEL_19:
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v5, 1);
    v4 = a2[1];
    goto LABEL_3;
  }
  if (result <= 0x7FF)
  {
    v7 = (result >> 6) | 0xFFFFFFC0;
    v6 = result & 0x3F | 0x80;
    v8 = a2[1];
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) <= a2[2])
    {
LABEL_6:
      *(_BYTE *)(*a2 + v8) = v7;
      v10 = a2[1];
      v11 = a2[2];
      v4 = v10 + 1;
      a2[1] = v10 + 1;
      v5 = v10 + 2;
      if (v10 + 2 <= v11)
        goto LABEL_7;
      LOBYTE(v3) = v6;
      goto LABEL_19;
    }
LABEL_12:
    v17 = v7;
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v9, 1);
    LOBYTE(v7) = v17;
    v8 = a2[1];
    goto LABEL_6;
  }
  if (!(result >> 16))
  {
    v12 = (result >> 12) | 0xFFFFFFE0;
    v13 = a2[1];
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) <= a2[2])
      goto LABEL_11;
    goto LABEL_17;
  }
  if (result >> 16 <= 0x10)
  {
    v18 = (result >> 18) | 0xFFFFFFF0;
    v19 = a2[1];
    if ((unint64_t)(v19 + 1) > a2[2])
    {
      result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v19 + 1, 1);
      v19 = a2[1];
    }
    v12 = (v3 >> 12) & 0x3F | 0xFFFFFF80;
    *(_BYTE *)(*a2 + v19) = v18;
    v20 = a2[1];
    v21 = a2[2];
    v13 = v20 + 1;
    a2[1] = v20 + 1;
    v14 = v20 + 2;
    if (v20 + 2 <= v21)
    {
LABEL_11:
      v6 = v3 & 0x3F | 0x80;
      v7 = (v3 >> 6) & 0x3F | 0xFFFFFF80;
      *(_BYTE *)(*a2 + v13) = v12;
      v15 = a2[1];
      v16 = a2[2];
      v8 = v15 + 1;
      a2[1] = v15 + 1;
      v9 = v15 + 2;
      if (v15 + 2 <= v16)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_17:
    v22 = v12;
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v14, 1);
    LOBYTE(v12) = v22;
    v13 = a2[1];
    goto LABEL_11;
  }
  return result;
}

uint64_t llvm::yaml::Scanner::Scanner(uint64_t a1, _OWORD *a2, uint64_t a3, char a4, uint64_t a5)
{
  __int128 v6;
  _OWORD v8[2];

  *(_QWORD *)a1 = a3;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_BYTE *)(a1 + 75) = a4;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 112;
  *(_QWORD *)(a1 + 104) = 0x400000000;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = a1 + 160;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 168) = 1;
  *(_QWORD *)(a1 + 176) = a1 + 176;
  *(_QWORD *)(a1 + 184) = a1 + 176;
  *(_QWORD *)(a1 + 192) = a1 + 208;
  *(_QWORD *)(a1 + 200) = 0x400000000;
  *(_QWORD *)(a1 + 224) = a1 + 240;
  *(_QWORD *)(a1 + 232) = 0x400000000;
  *(_QWORD *)(a1 + 336) = a5;
  v6 = a2[1];
  v8[0] = *a2;
  v8[1] = v6;
  llvm::yaml::Scanner::init(a1, v8);
  return a1;
}

uint64_t llvm::yaml::Scanner::peekNext(llvm::yaml::Scanner *this)
{
  char v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v2 = 0;
  v3 = (uint64_t *)((char *)this + 176);
  while ((v2 & 1) == 0 && (uint64_t *)*v3 != v3 || (llvm::yaml::Scanner::fetchMoreTokens(this) & 1) != 0)
  {
    llvm::yaml::Scanner::removeStaleSimpleKeyCandidates((uint64_t)this);
    v4 = *((_QWORD *)this + 23);
    v5 = *((_QWORD *)this + 28);
    v6 = *((unsigned int *)this + 58);
    if ((_DWORD)v6)
    {
      v7 = 24 * v6;
      v8 = (_QWORD *)*((_QWORD *)this + 28);
      while (*v8 != v4)
      {
        v8 += 3;
        v7 -= 24;
        if (!v7)
        {
          v8 = (_QWORD *)(v5 + 24 * v6);
          break;
        }
      }
    }
    else
    {
      v8 = (_QWORD *)*((_QWORD *)this + 28);
    }
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - v5) >> 3);
    v2 = 1;
    if (v9 == v6)
      return v4 + 16;
  }
  sub_1C5E6D100(v3);
  *((_DWORD *)this + 58) = 0;
  v10 = sub_1C484358C((uint64_t)this + 80, 64, 3);
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  v11 = *((_QWORD *)this + 22);
  *(_QWORD *)v10 = v11;
  *(_QWORD *)(v10 + 8) = v3;
  *(_QWORD *)(v11 + 8) = v10;
  *((_QWORD *)this + 22) = v10;
  v4 = *((_QWORD *)this + 23);
  return v4 + 16;
}

void sub_1C5E68668(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(uint64_t **)(a1 + 104);
  v3 = *v1;
  v2 = (uint64_t *)v1[1];
  *v2 = *v1;
  *(_QWORD *)(v3 + 8) = v2;
  *v1 = 0;
  v1[1] = 0;
  if (*((char *)v1 + 63) < 0)
    operator delete((void *)v1[5]);
}

const char *llvm::yaml::Scanner::skip_nb_char(llvm::yaml::Scanner *this, char *a2)
{
  unint64_t v3;
  int v4;
  unint64_t v5;
  int v6;
  unsigned int v8;
  const char *result;

  v3 = *((_QWORD *)this + 6) - (_QWORD)a2;
  if (!v3)
    return a2;
  v4 = *a2;
  if (v4 == 9 || (v4 - 127) >= 0xFFFFFFA1)
    return a2 + 1;
  if ((v4 & 0x80) == 0)
    return a2;
  v5 = sub_1C5E681AC((unsigned __int8 *)a2, v3);
  v6 = v5;
  if (!HIDWORD(v5) || (_DWORD)v5 == 65279)
    return a2;
  v8 = v5 - 0x10000;
  result = &a2[HIDWORD(v5)];
  if (v8 >= 0x100000 && (v6 - 57344) >> 1 >= 0xFFF && v6 != 133 && (v6 - 160) >> 5 >= 0x6BB)
    return a2;
  return result;
}

const char *llvm::yaml::Scanner::skip_b_break(llvm::yaml::Scanner *this, const char *a2)
{
  const char *v2;
  int v3;

  v2 = (const char *)*((_QWORD *)this + 6);
  if (v2 != a2)
  {
    v3 = *(unsigned __int8 *)a2;
    if (v3 == 10)
    {
      ++a2;
    }
    else if (v3 == 13)
    {
      if (a2 + 1 == v2)
      {
        return (const char *)*((_QWORD *)this + 6);
      }
      else if (a2[1] == 10)
      {
        a2 += 2;
      }
      else
      {
        ++a2;
      }
    }
  }
  return a2;
}

const char *llvm::yaml::Scanner::skip_s_space(const char **this, const char *a2)
{
  if (this[6] != a2 && *a2 == 32)
    ++a2;
  return a2;
}

const char *llvm::yaml::Scanner::skip_s_white(const char **this, const char *a2)
{
  int v2;

  if (this[6] != a2)
  {
    v2 = *(unsigned __int8 *)a2;
    if (v2 == 32 || v2 == 9)
      ++a2;
  }
  return a2;
}

const char *llvm::yaml::Scanner::skip_ns_char(llvm::yaml::Scanner **this, llvm::yaml::Scanner *a2)
{
  int v2;

  if (this[6] == a2)
    return (const char *)a2;
  v2 = *(unsigned __int8 *)a2;
  if (v2 == 9 || v2 == 32)
    return (const char *)a2;
  else
    return llvm::yaml::Scanner::skip_nb_char((llvm::yaml::Scanner *)this, (char *)a2);
}

uint64_t llvm::yaml::Scanner::skip_while (uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t), uint64_t a3, uint64_t a4)
{
  char v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, uint64_t);

  v4 = a3;
  v6 = (_QWORD *)(a1 + (a3 >> 1));
  v7 = a2;
  do
  {
    v8 = a4;
    v9 = a2;
    if ((v4 & 1) != 0)
      v9 = *(uint64_t (**)(_QWORD *, uint64_t))(*v6 + v7);
    a4 = v9(v6, a4);
  }
  while (a4 != v8);
  return v8;
}

uint64_t llvm::yaml::Scanner::advanceWhile(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t), uint64_t a3)
{
  char v3;
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD *, uint64_t);

  v3 = a3;
  result = *(_QWORD *)(a1 + 40);
  v7 = (_QWORD *)(a1 + (a3 >> 1));
  v8 = a2;
  do
  {
    v9 = result;
    v10 = a2;
    if ((v3 & 1) != 0)
      v10 = *(uint64_t (**)(_QWORD *, uint64_t))(*v7 + v8);
    result = v10(v7, result);
  }
  while (result != v9);
  *(_DWORD *)(a1 + 60) += v9 - *(_DWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v9;
  return result;
}

uint64_t llvm::yaml::Scanner::scan_ns_uri_char(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  BOOL v6;
  unsigned __int8 *v8;
  int v9;
  BOOL v10;
  int v11;
  BOOL v12;
  _QWORD v13[2];

  v1 = *(_QWORD *)(this + 40);
  v2 = *(_QWORD *)(this + 48);
  if (v1 != v2)
  {
    v3 = this;
    v4 = (unsigned __int8 *)(v1 + 2);
    do
    {
      v5 = *(v4 - 2);
      v6 = v5 != 37 || (unint64_t)v4 >= v2;
      if (v6
        || ((v9 = *(v4 - 1), (v9 - 48) >= 0xA) ? (v10 = (v9 & 0xFFFFFFDF) - 65 > 0x19) : (v10 = 0),
            v10
         || ((v11 = *v4, (v11 - 48) >= 0xA) ? (v12 = (v11 & 0xFFFFFFDF) - 65 >= 0x1A) : (v12 = 0), v12)))
      {
        if (v5 != 45 && (v5 & 0xFFFFFFDF) - 65 >= 0x1A)
        {
          v13[0] = v4 - 2;
          v13[1] = 1;
          this = llvm::StringRef::find_first_of(v13, "#;/?:@&=+$,_.!~*'()[]", 21, 0);
          if (this == -1)
            break;
        }
      }
      v8 = v4 - 1;
      *(_QWORD *)(v3 + 40) = v4 - 1;
      ++*(_DWORD *)(v3 + 60);
      ++v4;
    }
    while (v8 != (unsigned __int8 *)v2);
  }
  return this;
}

uint64_t llvm::yaml::Scanner::skip(uint64_t this, unsigned int a2)
{
  *(_QWORD *)(this + 40) += a2;
  *(_DWORD *)(this + 60) += a2;
  return this;
}

uint64_t llvm::yaml::Scanner::isBlankOrBreak(const char **this, const char *a2)
{
  unsigned int v2;
  BOOL v3;
  unint64_t v4;

  if (this[6] == a2)
    return 0;
  v2 = *(unsigned __int8 *)a2;
  v3 = v2 > 0x20;
  v4 = (0x100002600uLL >> v2) & 1;
  if (v3)
    return 0;
  else
    return v4;
}

uint64_t llvm::yaml::Scanner::isLineEmpty(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;

  if (!a3)
    return 1;
  while (a2 != *(unsigned __int8 **)(a1 + 48))
  {
    v3 = *a2;
    v4 = v3 > 0x20;
    v5 = (1 << v3) & 0x100002600;
    if (v4 || v5 == 0)
      break;
    ++a2;
    if (!--a3)
      return 1;
  }
  return 0;
}

uint64_t llvm::yaml::Scanner::consumeLineBreakIfPresent(llvm::yaml::Scanner *this)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  int v3;
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 *v6;
  int v8;

  v2 = (unsigned __int8 *)*((_QWORD *)this + 5);
  v1 = (unsigned __int8 *)*((_QWORD *)this + 6);
  if (v1 == v2)
    return 0;
  v3 = *v2;
  if (v3 != 10)
  {
    if (v3 == 13)
    {
      v4 = v2 + 1;
      if (v2 + 1 != v1)
      {
        v5 = v2[1];
        v6 = v2 + 2;
        if (v5 == 10)
          v1 = v6;
        else
          v1 = v4;
      }
      goto LABEL_10;
    }
    return 0;
  }
  v1 = v2 + 1;
LABEL_10:
  v8 = *((_DWORD *)this + 16) + 1;
  *((_DWORD *)this + 15) = 0;
  *((_DWORD *)this + 16) = v8;
  *((_QWORD *)this + 5) = v1;
  return 1;
}

__n128 llvm::yaml::Scanner::saveSimpleKeyCandidate(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __n128 *v9;
  __n128 *v10;
  __n128 result;
  unint64_t v12;
  BOOL v13;
  char *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;

  if (*(_BYTE *)(a1 + 73))
  {
    v15 = a2;
    v16 = a3;
    v18 = a4;
    v7 = *(_QWORD *)(a1 + 224);
    v5 = a1 + 224;
    v6 = v7;
    v17 = *(_QWORD *)(v5 - 160);
    v8 = *(unsigned int *)(v5 + 8);
    v9 = (__n128 *)&v15;
    if (v8 >= *(_DWORD *)(v5 + 12))
    {
      v12 = v8 + 1;
      v13 = v6 + 24 * v8 > (unint64_t)&v15;
      if (v6 <= (unint64_t)&v15 && v13)
      {
        v14 = (char *)&v15 - v6;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v5, a1 + 240, v12, 24);
        v6 = *(_QWORD *)(a1 + 224);
        v9 = (__n128 *)&v14[v6];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v5, a1 + 240, v12, 24);
        v6 = *(_QWORD *)(a1 + 224);
        v9 = (__n128 *)&v15;
      }
    }
    v10 = (__n128 *)(v6 + 24 * *(unsigned int *)(a1 + 232));
    result = *v9;
    v10[1].n128_u64[0] = v9[1].n128_u64[0];
    *v10 = result;
    ++*(_DWORD *)(a1 + 232);
  }
  return result;
}

uint64_t llvm::yaml::Scanner::removeSimpleKeyCandidatesOnFlowLevel(uint64_t this, int a2)
{
  unsigned int v2;

  v2 = *(_DWORD *)(this + 232);
  if (v2)
  {
    if (*(_DWORD *)(*(_QWORD *)(this + 224) + 24 * v2 - 8) == a2)
      *(_DWORD *)(this + 232) = v2 - 1;
  }
  return this;
}

uint64_t llvm::yaml::Scanner::unrollIndent(llvm::yaml::Scanner *this, int a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = 0;
  v11 = 0;
  v12 = 0;
  if (!*((_DWORD *)this + 17) && *((_DWORD *)this + 14) > a2)
  {
    do
    {
      LODWORD(v8) = 8;
      *((_QWORD *)&v8 + 1) = *((_QWORD *)this + 5);
      v9 = 1;
      v4 = (_QWORD *)sub_1C5E6D154((uint64_t)this + 80, &v8);
      v5 = *((_QWORD *)this + 22);
      *v4 = v5;
      v4[1] = (char *)this + 176;
      *(_QWORD *)(v5 + 8) = v4;
      *((_QWORD *)this + 22) = v4;
      v6 = *((unsigned int *)this + 50);
      LODWORD(v5) = *(_DWORD *)(*((_QWORD *)this + 24) + 4 * v6 - 4);
      *((_DWORD *)this + 50) = v6 - 1;
      *((_DWORD *)this + 14) = v5;
    }
    while ((int)v5 > a2);
  }
  return 1;
}

uint64_t llvm::yaml::Scanner::rollIndent(uint64_t a1, int a2, int a3, uint64_t *a4)
{
  int v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  __int128 v14[3];

  if (!*(_DWORD *)(a1 + 68))
  {
    v4 = *(_DWORD *)(a1 + 56);
    if (v4 < a2)
    {
      v6 = *(unsigned int *)(a1 + 200);
      if (v6 >= *(_DWORD *)(a1 + 204))
      {
        v13 = *(_DWORD *)(a1 + 56);
        v12 = a1;
        v10 = a3;
        v11 = a2;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 192, a1 + 208, v6 + 1, 4);
        v4 = v13;
        a3 = v10;
        a2 = v11;
        a1 = v12;
        LODWORD(v6) = *(_DWORD *)(v12 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 192) + 4 * v6) = v4;
      ++*(_DWORD *)(a1 + 200);
      *(_DWORD *)(a1 + 56) = a2;
      LODWORD(v14[0]) = a3;
      *((_QWORD *)&v14[0] + 1) = *(_QWORD *)(a1 + 40);
      memset(&v14[1], 0, 32);
      v7 = (_QWORD *)sub_1C5E6D154(a1 + 80, v14);
      v8 = *a4;
      *v7 = *a4;
      v7[1] = a4;
      *(_QWORD *)(v8 + 8) = v7;
      *a4 = (uint64_t)v7;
    }
  }
  return 1;
}

char *llvm::yaml::Scanner::skipComment(char *this)
{
  char *v1;
  char *v2;
  char *v3;
  int v4;
  BOOL v5;

  v1 = (char *)*((_QWORD *)this + 5);
  if (v1 != *((char **)this + 6) && *v1 == 35)
  {
    v2 = this;
    this = (char *)llvm::yaml::Scanner::skip_nb_char((llvm::yaml::Scanner *)this, *((char **)this + 5));
    if (this != v1)
    {
      v3 = this;
      v4 = *((_DWORD *)v2 + 15) + 1;
      do
      {
        *((_QWORD *)v2 + 5) = v3;
        *((_DWORD *)v2 + 15) = v4;
        this = (char *)llvm::yaml::Scanner::skip_nb_char((llvm::yaml::Scanner *)v2, v3);
        ++v4;
        v5 = this == v3;
        v3 = this;
      }
      while (!v5);
    }
  }
  return this;
}

char *llvm::yaml::Scanner::scanToNextToken(llvm::yaml::Scanner *this)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  int v4;
  char *result;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  int v13;

  v3 = (unsigned __int8 *)*((_QWORD *)this + 5);
  v2 = (unsigned __int8 *)*((_QWORD *)this + 6);
  while (1)
  {
    while (v3 != v2)
    {
      v4 = *v3;
      if (v4 != 32 && v4 != 9)
        break;
      *((_QWORD *)this + 5) = ++v3;
      ++*((_DWORD *)this + 15);
    }
    result = llvm::yaml::Scanner::skipComment((char *)this);
    v7 = (unsigned __int8 *)*((_QWORD *)this + 5);
    v2 = (unsigned __int8 *)*((_QWORD *)this + 6);
    if (v2 == v7)
      break;
    v8 = *v7;
    if (v8 == 10)
    {
      v3 = v7 + 1;
    }
    else
    {
      if (v8 != 13)
        return result;
      v9 = v7 + 1;
      v3 = (unsigned __int8 *)*((_QWORD *)this + 6);
      if (v7 + 1 != v2)
      {
        v10 = v7[1];
        v11 = v7 + 2;
        if (v10 == 10)
          v3 = v11;
        else
          v3 = v9;
      }
    }
    *((_QWORD *)this + 5) = v3;
    v12 = *((_DWORD *)this + 17);
    v13 = *((_DWORD *)this + 16) + 1;
    *((_DWORD *)this + 15) = 0;
    *((_DWORD *)this + 16) = v13;
    if (!v12)
      *((_BYTE *)this + 73) = 1;
  }
  return result;
}

uint64_t llvm::yaml::Scanner::scanStreamStart(llvm::yaml::Scanner *this)
{
  unsigned __int8 *v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *((_BYTE *)this + 72) = 0;
  v2 = (unsigned __int8 *)*((_QWORD *)this + 5);
  v3 = *((_QWORD *)this + 6) - (_QWORD)v2;
  if (!v3)
    goto LABEL_27;
  v4 = 0;
  v5 = *v2;
  if (v5 > 0xFD)
  {
    if (v5 == 254)
    {
      if (v3 < 2 || v2[1] != 255)
        goto LABEL_27;
    }
    else
    {
      if (v5 != 255)
        goto LABEL_28;
      if (v3 < 4)
      {
        if (v3 <= 1 || v2[1] != 254)
          goto LABEL_27;
      }
      else
      {
        if (v2[1] != 254)
          goto LABEL_27;
        if (!v2[2] && !v2[3])
        {
LABEL_20:
          v4 = 4;
          goto LABEL_28;
        }
      }
    }
    v4 = 2;
    goto LABEL_28;
  }
  if (!*v2)
  {
    if (v3 < 4 || v2[1] || v2[2] != 254 || v2[3] != 255)
      goto LABEL_27;
    goto LABEL_20;
  }
  if (v5 == 239)
  {
    if (v3 >= 3 && v2[1] == 187 && v2[2] == 191)
    {
      v4 = 3;
      goto LABEL_28;
    }
LABEL_27:
    v4 = 0;
  }
LABEL_28:
  v12 = 0;
  v13 = 0;
  v14 = 0;
  LODWORD(v10) = 1;
  *((_QWORD *)&v10 + 1) = v2;
  v11 = v4;
  v6 = (_QWORD *)sub_1C5E6D154((uint64_t)this + 80, &v10);
  v8 = *((_QWORD *)this + 22);
  v7 = (_QWORD *)((char *)this + 176);
  *v6 = v8;
  v6[1] = v7;
  *(_QWORD *)(v8 + 8) = v6;
  *v7 = v6;
  *(v7 - 17) += v4;
  return 1;
}

uint64_t llvm::yaml::Scanner::scanStreamEnd(llvm::yaml::Scanner *this)
{
  int v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  __int128 v7[3];

  if (*((_DWORD *)this + 15))
  {
    v2 = *((_DWORD *)this + 16) + 1;
    *((_DWORD *)this + 15) = 0;
    *((_DWORD *)this + 16) = v2;
  }
  llvm::yaml::Scanner::unrollIndent(this, -1);
  *((_DWORD *)this + 58) = 0;
  *((_BYTE *)this + 73) = 0;
  LODWORD(v7[0]) = 2;
  *((_QWORD *)&v7[0] + 1) = *((_QWORD *)this + 5);
  memset(&v7[1], 0, 32);
  v3 = (_QWORD *)sub_1C5E6D154((uint64_t)this + 80, v7);
  v5 = *((_QWORD *)this + 22);
  v4 = (_QWORD *)((char *)this + 176);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  return 1;
}

uint64_t llvm::yaml::Scanner::scanDirective(char **this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  int v7;
  char *v8;
  int v9;
  uint64_t result;
  char *v12;
  int v13;
  char *v15;
  int v16;
  int v17;
  char *v19;
  int v20;
  char *v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  int v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  llvm::yaml::Scanner::unrollIndent((llvm::yaml::Scanner *)this, -1);
  *((_DWORD *)this + 58) = 0;
  *((_BYTE *)this + 73) = 0;
  v2 = this[5];
  llvm::yaml::Scanner::consume((llvm::yaml::Scanner *)this, 0x25u);
  v3 = this[5];
  v4 = this[6];
  v5 = v3;
  while (v4 != v5)
  {
    v6 = v5;
    v7 = *v5;
    if (v7 != 9 && v7 != 32)
    {
      v5 = (char *)llvm::yaml::Scanner::skip_nb_char((llvm::yaml::Scanner *)this, v5);
      if (v5 != v6)
        continue;
    }
    this[5] = v6;
    v8 = (char *)(v6 - v3);
    while (1)
    {
      v9 = *v6;
      if (v9 != 32 && v9 != 9)
        goto LABEL_16;
      if (++v6 == v4)
        goto LABEL_15;
    }
  }
  v8 = (char *)(v4 - v3);
LABEL_15:
  v6 = v4;
LABEL_16:
  this[5] = v6;
  v25 = 0;
  v26 = 0u;
  v27 = 0u;
  v28 = 0;
  if (v8 == (char *)3)
  {
    if (*(_WORD *)v3 == 16724 && v3[2] == 71)
    {
      do
      {
        if (v4 == v6)
        {
LABEL_40:
          v15 = v4;
          goto LABEL_41;
        }
        v15 = v6;
        v16 = *v6;
        if (v16 == 9)
          break;
        if (v16 == 32)
          break;
        v6 = (char *)llvm::yaml::Scanner::skip_nb_char((llvm::yaml::Scanner *)this, v6);
      }
      while (v6 != v15);
      this[5] = v15;
      while (1)
      {
        v17 = *v15;
        if (v17 != 32 && v17 != 9)
          break;
        if (++v15 == v4)
          goto LABEL_40;
      }
LABEL_41:
      this[5] = v15;
      while (v4 != v15)
      {
        v19 = v15;
        v20 = *v15;
        if (v20 != 9 && v20 != 32)
        {
          v15 = (char *)llvm::yaml::Scanner::skip_nb_char((llvm::yaml::Scanner *)this, v15);
          if (v15 != v19)
            continue;
        }
        goto LABEL_50;
      }
      v19 = v4;
LABEL_50:
      this[5] = v19;
      v25 = 4;
      v21 = (char *)(v19 - v2);
      goto LABEL_51;
    }
    return 0;
  }
  result = 0;
  if (v8 != (char *)4)
    return result;
  if (*(_DWORD *)v3 != 1280131417)
    return 0;
  while (v4 != v6)
  {
    v12 = v6;
    v13 = *v6;
    if (v13 != 9 && v13 != 32)
    {
      v6 = (char *)llvm::yaml::Scanner::skip_nb_char((llvm::yaml::Scanner *)this, v6);
      if (v6 != v12)
        continue;
    }
    goto LABEL_48;
  }
  v12 = v4;
LABEL_48:
  this[5] = v12;
  v25 = 3;
  v21 = (char *)(v12 - v2);
LABEL_51:
  *(_QWORD *)&v26 = v2;
  *((_QWORD *)&v26 + 1) = v21;
  v22 = (_QWORD *)sub_1C5E6D154((uint64_t)(this + 10), (__int128 *)&v25);
  v24 = this[22];
  v23 = this + 22;
  *v22 = v24;
  v22[1] = v23;
  *((_QWORD *)v24 + 1) = v22;
  *v23 = v22;
  return 1;
}

uint64_t llvm::yaml::Scanner::scanDocumentIndicator(llvm::yaml::Scanner *this, int a2)
{
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  llvm::yaml::Scanner::unrollIndent(this, -1);
  *((_DWORD *)this + 58) = 0;
  *((_BYTE *)this + 73) = 0;
  if (a2)
    v4 = 5;
  else
    v4 = 6;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  LODWORD(v9) = v4;
  *((_QWORD *)&v9 + 1) = *((_QWORD *)this + 5);
  v10 = 3;
  *((_QWORD *)this + 5) = *((_QWORD *)&v9 + 1) + 3;
  *((_DWORD *)this + 15) += 3;
  v5 = (_QWORD *)sub_1C5E6D154((uint64_t)this + 80, &v9);
  v7 = *((_QWORD *)this + 22);
  v6 = (_QWORD *)((char *)this + 176);
  *v5 = v7;
  v5[1] = v6;
  *(_QWORD *)(v7 + 8) = v5;
  *v6 = v5;
  return 1;
}

uint64_t llvm::yaml::Scanner::scanFlowCollectionStart(llvm::yaml::Scanner *this, int a2)
{
  int v3;
  _QWORD *v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2)
    v3 = 12;
  else
    v3 = 14;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  LODWORD(v7) = v3;
  *((_QWORD *)&v7 + 1) = *((_QWORD *)this + 5);
  v8 = 1;
  *((_QWORD *)this + 5) = *((_QWORD *)&v7 + 1) + 1;
  ++*((_DWORD *)this + 15);
  v4 = (_QWORD *)sub_1C5E6D154((uint64_t)this + 80, &v7);
  v5 = *((_QWORD *)this + 22);
  *v4 = v5;
  v4[1] = (char *)this + 176;
  *(_QWORD *)(v5 + 8) = v4;
  *((_QWORD *)this + 22) = v4;
  llvm::yaml::Scanner::saveSimpleKeyCandidate((uint64_t)this, (uint64_t)v4, *((_DWORD *)this + 15) - 1, 0);
  *((_BYTE *)this + 73) = 1;
  ++*((_DWORD *)this + 17);
  return 1;
}

uint64_t llvm::yaml::Scanner::scanFlowCollectionEnd(llvm::yaml::Scanner *this, int a2)
{
  unsigned int v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *((_DWORD *)this + 58);
  if (v3 && *(_DWORD *)(*((_QWORD *)this + 28) + 24 * v3 - 8) == *((_DWORD *)this + 17))
    *((_DWORD *)this + 58) = v3 - 1;
  *((_BYTE *)this + 73) = 0;
  if (a2)
    v4 = 13;
  else
    v4 = 15;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  LODWORD(v9) = v4;
  *((_QWORD *)&v9 + 1) = *((_QWORD *)this + 5);
  v10 = 1;
  *((_QWORD *)this + 5) = *((_QWORD *)&v9 + 1) + 1;
  ++*((_DWORD *)this + 15);
  v5 = (_QWORD *)sub_1C5E6D154((uint64_t)this + 80, &v9);
  v6 = *((_QWORD *)this + 22);
  *v5 = v6;
  v5[1] = (char *)this + 176;
  *(_QWORD *)(v6 + 8) = v5;
  *((_QWORD *)this + 22) = v5;
  v7 = *((_DWORD *)this + 17);
  if (v7)
    *((_DWORD *)this + 17) = v7 - 1;
  return 1;
}

uint64_t llvm::yaml::Scanner::scanFlowEntry(llvm::yaml::Scanner *this)
{
  unsigned int v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *((_DWORD *)this + 58);
  if (v2 && *(_DWORD *)(*((_QWORD *)this + 28) + 24 * v2 - 8) == *((_DWORD *)this + 17))
    *((_DWORD *)this + 58) = v2 - 1;
  *((_BYTE *)this + 73) = 1;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  LODWORD(v7) = 11;
  *((_QWORD *)&v7 + 1) = *((_QWORD *)this + 5);
  v8 = 1;
  *((_QWORD *)this + 5) = *((_QWORD *)&v7 + 1) + 1;
  ++*((_DWORD *)this + 15);
  v3 = (_QWORD *)sub_1C5E6D154((uint64_t)this + 80, &v7);
  v5 = *((_QWORD *)this + 22);
  v4 = (_QWORD *)((char *)this + 176);
  *v3 = v5;
  v3[1] = v4;
  *(_QWORD *)(v5 + 8) = v3;
  *v4 = v3;
  return 1;
}

uint64_t llvm::yaml::Scanner::scanBlockEntry(llvm::yaml::Scanner *this)
{
  char *v2;
  unsigned int v3;
  _QWORD *v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (char *)this + 176;
  llvm::yaml::Scanner::rollIndent((uint64_t)this, *((_DWORD *)this + 15), 9, (uint64_t *)this + 22);
  v3 = *((_DWORD *)this + 58);
  if (v3 && *(_DWORD *)(*((_QWORD *)this + 28) + 24 * v3 - 8) == *((_DWORD *)this + 17))
    *((_DWORD *)this + 58) = v3 - 1;
  *((_BYTE *)this + 73) = 1;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  LODWORD(v7) = 7;
  *((_QWORD *)&v7 + 1) = *((_QWORD *)this + 5);
  v8 = 1;
  *((_QWORD *)this + 5) = *((_QWORD *)&v7 + 1) + 1;
  ++*((_DWORD *)this + 15);
  v4 = (_QWORD *)sub_1C5E6D154((uint64_t)this + 80, &v7);
  v5 = *((_QWORD *)this + 22);
  *v4 = v5;
  v4[1] = v2;
  *(_QWORD *)(v5 + 8) = v4;
  *((_QWORD *)this + 22) = v4;
  return 1;
}

uint64_t llvm::yaml::Scanner::scanKey(llvm::yaml::Scanner *this)
{
  int v2;
  unsigned int v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *((_DWORD *)this + 17);
  if (!v2)
  {
    llvm::yaml::Scanner::rollIndent((uint64_t)this, *((_DWORD *)this + 15), 10, (uint64_t *)this + 22);
    v2 = *((_DWORD *)this + 17);
  }
  v3 = *((_DWORD *)this + 58);
  if (v3 && *(_DWORD *)(*((_QWORD *)this + 28) + 24 * v3 - 8) == v2)
    *((_DWORD *)this + 58) = v3 - 1;
  *((_BYTE *)this + 73) = v2 == 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  LODWORD(v8) = 16;
  *((_QWORD *)&v8 + 1) = *((_QWORD *)this + 5);
  v9 = 1;
  *((_QWORD *)this + 5) = *((_QWORD *)&v8 + 1) + 1;
  ++*((_DWORD *)this + 15);
  v4 = (_QWORD *)sub_1C5E6D154((uint64_t)this + 80, &v8);
  v6 = *((_QWORD *)this + 22);
  v5 = (_QWORD *)((char *)this + 176);
  *v4 = v6;
  v4[1] = v5;
  *(_QWORD *)(v6 + 8) = v4;
  *v5 = v4;
  return 1;
}

uint64_t llvm::yaml::Scanner::scanValue(llvm::yaml::Scanner *this)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *((_DWORD *)this + 58);
  if (v2)
  {
    v3 = *((_QWORD *)this + 28) + 24 * v2;
    v4 = *(_QWORD *)(v3 - 24);
    v5 = *(_DWORD *)(v3 - 16);
    *((_DWORD *)this + 58) = v2 - 1;
    v18 = 16;
    v21 = 0;
    v22 = 0;
    v20 = 0;
    v19 = *(_OWORD *)(v4 + 24);
    v6 = (uint64_t **)((char *)this + 184);
    v7 = (uint64_t *)((char *)this + 176);
    do
    {
      v8 = *v6;
      v6 = (uint64_t **)(*v6 + 1);
    }
    while (v8 != v7 && v8 != (uint64_t *)v4);
    if (v8 == v7)
    {
      v13 = 0;
      *((_BYTE *)this + 74) = 1;
      return v13;
    }
    v10 = (uint64_t *)sub_1C5E6D154((uint64_t)this + 80, (__int128 *)&v18);
    v11 = *v8;
    *v10 = *v8;
    v10[1] = (uint64_t)v8;
    *(_QWORD *)(v11 + 8) = v10;
    *v8 = (uint64_t)v10;
    llvm::yaml::Scanner::rollIndent((uint64_t)this, v5, 10, v10);
    *((_BYTE *)this + 73) = 0;
  }
  else
  {
    v12 = *((_DWORD *)this + 17);
    if (!v12)
    {
      llvm::yaml::Scanner::rollIndent((uint64_t)this, *((_DWORD *)this + 15), 10, (uint64_t *)this + 22);
      v12 = *((_DWORD *)this + 17);
    }
    *((_BYTE *)this + 73) = v12 == 0;
  }
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v18 = 17;
  v13 = 1;
  *(_QWORD *)&v19 = *((_QWORD *)this + 5);
  *((_QWORD *)&v19 + 1) = 1;
  *((_QWORD *)this + 5) = v19 + 1;
  ++*((_DWORD *)this + 15);
  v14 = (_QWORD *)sub_1C5E6D154((uint64_t)this + 80, (__int128 *)&v18);
  v16 = *((_QWORD *)this + 22);
  v15 = (_QWORD *)((char *)this + 176);
  *v14 = v16;
  v14[1] = v15;
  *(_QWORD *)(v16 + 8) = v14;
  *v15 = v14;
  return v13;
}

uint64_t llvm::yaml::Scanner::scanFlowScalar(llvm::yaml::Scanner *this, int a2)
{
  uint64_t v3;
  int v4;
  char *v5;
  char *i;
  int v7;
  char *v8;
  int v9;
  const char *v10;
  char *v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *((_QWORD *)this + 5);
  v4 = *((_DWORD *)this + 15);
  if (a2)
  {
    v5 = (char *)*((_QWORD *)this + 6);
    for (i = (char *)(v3 + 1); ; ++i)
    {
      *((_QWORD *)this + 5) = i;
      if (i == v5)
        break;
      if (*i == 34 && (*(i - 1) != 92 || !sub_1C5E69A50(v3 + 1, (uint64_t)i)))
      {
        v7 = v4;
        goto LABEL_27;
      }
    }
    goto LABEL_31;
  }
  i = (char *)(v3 + 1);
  *((_QWORD *)this + 5) = v3 + 1;
  v7 = v4 + 1;
  *((_DWORD *)this + 15) = v4 + 1;
  v5 = (char *)*((_QWORD *)this + 6);
  if ((char *)(v3 + 1) == v5)
  {
    v5 = (char *)(v3 + 1);
    goto LABEL_31;
  }
  while (1)
  {
    v8 = i + 1;
    v9 = *i;
    if (i + 1 >= v5)
    {
      if (v9 == 39)
        goto LABEL_27;
    }
    else if (v9 == 39)
    {
      if (*v8 != 39)
        goto LABEL_27;
      i += 2;
      *((_QWORD *)this + 5) = i;
      v7 += 2;
      *((_DWORD *)this + 15) = v7;
      goto LABEL_24;
    }
    v10 = llvm::yaml::Scanner::skip_nb_char(this, i);
    if (v10 == i)
      break;
    if (v10 == v5)
      goto LABEL_27;
    *((_QWORD *)this + 5) = v10;
    *((_DWORD *)this + 15) = ++v7;
    i = (char *)v10;
LABEL_24:
    if (i == v5)
      goto LABEL_31;
  }
  v11 = i + 1;
  if (v9 == 10)
  {
LABEL_23:
    v7 = 0;
    *((_QWORD *)this + 5) = v11;
    v12 = *((_DWORD *)this + 16) + 1;
    *((_DWORD *)this + 15) = 0;
    *((_DWORD *)this + 16) = v12;
    i = v11;
    goto LABEL_24;
  }
  if (v9 == 13)
  {
    v11 = v5;
    if (v8 != v5)
    {
      if (i[1] == 10)
        v11 = i + 2;
      else
        v11 = i + 1;
    }
    goto LABEL_23;
  }
LABEL_27:
  if (i == v5)
  {
LABEL_31:
    *(_QWORD *)&v16 = "Expected quote at end of scalar";
    LOWORD(v19) = 259;
    sub_1C639BA64((uint64_t)this, (llvm::Twine *)&v16, v5);
    return 0;
  }
  *((_QWORD *)this + 5) = i + 1;
  *((_DWORD *)this + 15) = v7 + 1;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  LODWORD(v16) = 18;
  *((_QWORD *)&v16 + 1) = v3;
  v17 = &i[-v3 + 1];
  v13 = (_QWORD *)sub_1C5E6D154((uint64_t)this + 80, &v16);
  v14 = *((_QWORD *)this + 22);
  *v13 = v14;
  v13[1] = (char *)this + 176;
  *(_QWORD *)(v14 + 8) = v13;
  *((_QWORD *)this + 22) = v13;
  llvm::yaml::Scanner::saveSimpleKeyCandidate((uint64_t)this, (uint64_t)v13, v4, 0);
  *((_BYTE *)this + 73) = 0;
  return 1;
}

BOOL sub_1C5E69A50(unint64_t a1, uint64_t a2)
{
  _BYTE *v2;

  v2 = (_BYTE *)(a2 - 1);
  if (a2 - 1 >= a1)
  {
    do
    {
      if (*v2 != 92)
        break;
      --v2;
    }
    while ((unint64_t)v2 >= a1);
  }
  return ((a2 - 1 - (_QWORD)v2) & 0x8000000000000001) == 1;
}

uint64_t llvm::yaml::Scanner::scanPlainScalar(llvm::yaml::Scanner *this)
{
  char *v2;
  char *v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  char *v7;
  unsigned int v8;
  char *v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  const char *v18;
  unsigned int v19;
  char *v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  llvm::yaml::Scanner *v25;
  int v26;
  __int128 v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = (char *)*((_QWORD *)this + 5);
  v3 = (char *)*((_QWORD *)this + 6);
  if (v2 == v3)
    goto LABEL_58;
  v4 = 0;
  v5 = *((_DWORD *)this + 15);
  v6 = *((_DWORD *)this + 14) + 1;
  v26 = v5;
  v7 = (char *)*((_QWORD *)this + 5);
  while (2)
  {
    v8 = *v7;
    if (v8 == 35)
    {
      v9 = v7;
      break;
    }
    v9 = v7;
    if (v7 == v3)
      goto LABEL_54;
    while (v8 > 0x20 || ((1 << v8) & 0x100002600) == 0)
    {
      v10 = *((_DWORD *)this + 17);
      if (v8 == 58 && v10)
      {
        if (v9 + 1 == v3
          || ((v11 = v9[1], v12 = v11 > 0x2C, v13 = (1 << v11) & 0x100100002600, !v12)
            ? (v14 = v13 == 0)
            : (v14 = 1),
              v14))
        {
          *(_QWORD *)&v27 = "Found unexpected ':' while scanning a plain scalar";
          LOWORD(v30) = 259;
          v25 = this;
          v7 = v9;
          goto LABEL_59;
        }
      }
      else if (v8 != 58)
      {
        goto LABEL_23;
      }
      if (v3 != v9 + 1)
      {
        v15 = v9[1];
        v12 = v15 > 0x20;
        v16 = (1 << v15) & 0x100002600;
        if (!v12 && v16 != 0)
          goto LABEL_56;
      }
LABEL_23:
      if (v10
        && (v8 - 44 <= 0x31 && ((1 << (v8 - 44)) & 0x2800000084001) != 0 || v8 == 123 || v8 == 125))
      {
        goto LABEL_56;
      }
      v18 = llvm::yaml::Scanner::skip_nb_char(this, v9);
      if (v18 == v9)
      {
        if (v8 > 0x20 || ((1 << v8) & 0x100002600) == 0)
          goto LABEL_56;
        break;
      }
      *((_QWORD *)this + 5) = v18;
      *((_DWORD *)this + 15) = ++v5;
      if (v18 == v3)
        goto LABEL_54;
      v8 = *(unsigned __int8 *)v18;
      v9 = (char *)v18;
    }
    v7 = v9;
    do
    {
      v19 = *v7;
      if (v19 > 0xC)
      {
        if (v19 == 13)
        {
          v20 = v3;
          if (v7 + 1 != v3)
          {
            if (v7[1] == 10)
              v20 = v7 + 2;
            else
              v20 = v7 + 1;
          }
LABEL_48:
          v5 = 0;
          v21 = *((_DWORD *)this + 16) + 1;
          *((_DWORD *)this + 15) = 0;
          *((_DWORD *)this + 16) = v21;
          v4 = 1;
          goto LABEL_49;
        }
        if (v19 != 32)
          goto LABEL_51;
      }
      else if (v19 != 9)
      {
        if (v19 != 10)
          goto LABEL_51;
        v20 = v7 + 1;
        goto LABEL_48;
      }
      if (v4 && v5 < v6 && v19 == 9)
      {
        *(_QWORD *)&v27 = "Found invalid tab character in indentation";
        LOWORD(v30) = 259;
        v25 = this;
        goto LABEL_59;
      }
      v20 = v7 + 1;
      *((_DWORD *)this + 15) = ++v5;
LABEL_49:
      v7 = v20;
    }
    while (v3 != v20);
    v7 = v3;
LABEL_51:
    if (*((_DWORD *)this + 17) || v5 >= v6)
    {
      *((_QWORD *)this + 5) = v7;
      if (v7 != v3)
        continue;
LABEL_54:
      v9 = v3;
    }
    break;
  }
LABEL_56:
  if (v2 != v9)
  {
    v29 = 0;
    v30 = 0;
    v31 = 0;
    LODWORD(v27) = 18;
    *((_QWORD *)&v27 + 1) = v2;
    v28 = v9 - v2;
    v22 = (_QWORD *)sub_1C5E6D154((uint64_t)this + 80, &v27);
    v23 = *((_QWORD *)this + 22);
    *v22 = v23;
    v22[1] = (char *)this + 176;
    *(_QWORD *)(v23 + 8) = v22;
    *((_QWORD *)this + 22) = v22;
    llvm::yaml::Scanner::saveSimpleKeyCandidate((uint64_t)this, (uint64_t)v22, v26, 0);
    *((_BYTE *)this + 73) = 0;
    return 1;
  }
LABEL_58:
  *(_QWORD *)&v27 = "Got empty plain scalar";
  LOWORD(v30) = 259;
  v25 = this;
  v7 = v2;
LABEL_59:
  sub_1C639BA64((uint64_t)v25, (llvm::Twine *)&v27, v7);
  return 0;
}

uint64_t llvm::yaml::Scanner::scanAliasOrAnchor(llvm::yaml::Scanner *this, int a2)
{
  int v3;
  char *v4;
  char *v5;
  int v6;
  char *v7;
  unsigned int v8;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  const char *v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *((_DWORD *)this + 15);
  v4 = (char *)*((_QWORD *)this + 5);
  v5 = (char *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 5) = v4 + 1;
  *((_DWORD *)this + 15) = v3 + 1;
  if (v4 + 1 == v5)
    goto LABEL_22;
  v6 = v3 + 2;
  v7 = v4 + 1;
  while (1)
  {
    v8 = *v7;
    if (v8 <= 0x3A && ((1 << v8) & 0x400100100000200) != 0)
      break;
    v10 = v8 - 91;
    v11 = v10 > 0x22;
    v12 = (1 << v10) & 0x500000005;
    if (!v11 && v12 != 0)
      break;
    v14 = llvm::yaml::Scanner::skip_nb_char(this, v7);
    if (v14 == v7)
      break;
    *((_QWORD *)this + 5) = v14;
    *((_DWORD *)this + 15) = v6++;
    v7 = (char *)v14;
    if (v14 == v5)
    {
      v7 = v5;
      break;
    }
  }
  if (v4 + 1 == v7)
  {
LABEL_22:
    *(_QWORD *)&v20 = "Got empty alias or anchor";
    LOWORD(v23) = 259;
    sub_1C639BA64((uint64_t)this, (llvm::Twine *)&v20, v4);
    return 0;
  }
  else
  {
    if (a2)
      v15 = 20;
    else
      v15 = 21;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    LODWORD(v20) = v15;
    *((_QWORD *)&v20 + 1) = v4;
    v21 = v7 - v4;
    v16 = (_QWORD *)sub_1C5E6D154((uint64_t)this + 80, &v20);
    v17 = *((_QWORD *)this + 22);
    *v16 = v17;
    v16[1] = (char *)this + 176;
    *(_QWORD *)(v17 + 8) = v16;
    *((_QWORD *)this + 22) = v16;
    llvm::yaml::Scanner::saveSimpleKeyCandidate((uint64_t)this, (uint64_t)v16, v3, 0);
    *((_BYTE *)this + 73) = 0;
    return 1;
  }
}

uint64_t llvm::yaml::Scanner::scanBlockStyleIndicator(llvm::yaml::Scanner *this)
{
  unsigned __int8 *v1;
  int v2;

  v1 = (unsigned __int8 *)*((_QWORD *)this + 5);
  if (v1 != *((unsigned __int8 **)this + 6) && ((v2 = *v1, v2 == 124) || v2 == 62))
  {
    *((_QWORD *)this + 5) = v1 + 1;
    ++*((_DWORD *)this + 15);
  }
  else
  {
    LOBYTE(v2) = 32;
  }
  return (char)v2;
}

uint64_t llvm::yaml::Scanner::scanBlockScalarHeader(llvm::yaml::Scanner *this, char *a2, unsigned int *a3, BOOL *a4)
{
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v15;
  uint64_t result;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = (unsigned __int8 *)*((_QWORD *)this + 5);
  if (v6 != *((unsigned __int8 **)this + 6) && ((v7 = *v6, v7 == 45) || v7 == 43))
  {
    *((_QWORD *)this + 5) = v6 + 1;
    ++*((_DWORD *)this + 15);
  }
  else
  {
    LOBYTE(v7) = 32;
  }
  *a2 = v7;
  v8 = (unsigned __int8 *)*((_QWORD *)this + 5);
  v9 = (unsigned __int8 *)*((_QWORD *)this + 6);
  if (v8 == v9 || (v10 = *v8, (v10 - 49) > 8))
  {
    v11 = 0;
  }
  else
  {
    v11 = v10 - 48;
    *((_QWORD *)this + 5) = ++v8;
    ++*((_DWORD *)this + 15);
  }
  *a3 = v11;
  if (*a2 == 32)
  {
    if (v8 != v9 && ((v12 = *v8, v12 == 45) || v12 == 43))
    {
      *((_QWORD *)this + 5) = v8 + 1;
      ++*((_DWORD *)this + 15);
    }
    else
    {
      LOBYTE(v12) = 32;
    }
    *a2 = v12;
    v8 = (unsigned __int8 *)*((_QWORD *)this + 5);
    v9 = (unsigned __int8 *)*((_QWORD *)this + 6);
  }
  if (v9 == v8)
  {
LABEL_24:
    v8 = v9;
  }
  else
  {
    while (1)
    {
      v13 = *v8;
      if (v13 != 32 && v13 != 9)
        break;
      if (++v8 == v9)
        goto LABEL_24;
    }
  }
  *((_QWORD *)this + 5) = v8;
  llvm::yaml::Scanner::skipComment((char *)this);
  v15 = *((_QWORD *)this + 5);
  if (v15 == *((_QWORD *)this + 6))
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
    LODWORD(v20) = 19;
    *((_QWORD *)&v20 + 1) = v6;
    v21 = v15 - (_QWORD)v6;
    v17 = (_QWORD *)sub_1C5E6D154((uint64_t)this + 80, &v20);
    v19 = *((_QWORD *)this + 22);
    v18 = (_QWORD *)((char *)this + 176);
    *v17 = v19;
    v17[1] = v18;
    *(_QWORD *)(v19 + 8) = v17;
    *v18 = v17;
    result = 1;
    *a4 = 1;
  }
  else if ((llvm::yaml::Scanner::consumeLineBreakIfPresent(this) & 1) != 0)
  {
    return 1;
  }
  else
  {
    *(_QWORD *)&v20 = "Expected a line break after block scalar header";
    LOWORD(v23) = 259;
    sub_1C639BA64((uint64_t)this, (llvm::Twine *)&v20, *((char **)this + 5));
    return 0;
  }
  return result;
}

uint64_t llvm::yaml::Scanner::scanBlockChompingIndicator(llvm::yaml::Scanner *this)
{
  unsigned __int8 *v1;
  int v2;

  v1 = (unsigned __int8 *)*((_QWORD *)this + 5);
  if (v1 != *((unsigned __int8 **)this + 6) && ((v2 = *v1, v2 == 45) || v2 == 43))
  {
    *((_QWORD *)this + 5) = v1 + 1;
    ++*((_DWORD *)this + 15);
  }
  else
  {
    LOBYTE(v2) = 32;
  }
  return (char)v2;
}

uint64_t llvm::yaml::Scanner::scanBlockIndentationIndicator(llvm::yaml::Scanner *this)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;

  v1 = (unsigned __int8 *)*((_QWORD *)this + 5);
  if (v1 == *((unsigned __int8 **)this + 6))
    return 0;
  v2 = *v1;
  if ((v2 - 49) > 8)
    return 0;
  v3 = (v2 - 48);
  *((_QWORD *)this + 5) = v1 + 1;
  ++*((_DWORD *)this + 15);
  return v3;
}

uint64_t llvm::yaml::Scanner::findBlockScalarIndent(llvm::yaml::Scanner *this, unsigned int *a2, unsigned int a3, unsigned int *a4, BOOL *a5)
{
  char *v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  BOOL v16;
  char *v17;
  unsigned int v18;
  int v19;
  uint64_t result;
  const char *v21;
  __int16 v22;

  v10 = 0;
  v11 = 0;
  while (1)
  {
    v12 = (unsigned __int8 *)*((_QWORD *)this + 5);
    v13 = (unsigned __int8 *)*((_QWORD *)this + 6);
    v14 = v12;
    do
    {
      if (v14 == v13)
      {
        v17 = (char *)*((_QWORD *)this + 6);
        goto LABEL_9;
      }
      v15 = *v14++;
      v16 = v15 == 32;
    }
    while (v15 == 32);
    if (v16)
      ++v14;
    v17 = (char *)(v14 - 1);
LABEL_9:
    v18 = *((_DWORD *)this + 15) + (_DWORD)v17 - (_DWORD)v12;
    *((_DWORD *)this + 15) = v18;
    *((_QWORD *)this + 5) = v17;
    if (llvm::yaml::Scanner::skip_nb_char(this, v17) != v17)
      break;
    if (v13 == (unsigned __int8 *)v17)
      goto LABEL_20;
    v19 = *v17;
    if ((v19 == 13 || v19 == 10) && v18 > v11)
    {
      v10 = v17;
      v11 = v18;
    }
    if ((llvm::yaml::Scanner::consumeLineBreakIfPresent(this) & 1) == 0)
      goto LABEL_20;
    ++*a4;
  }
  if (v18 <= a3)
  {
LABEL_20:
    result = 1;
    *a5 = 1;
    return result;
  }
  *a2 = v18;
  if (v11 <= v18)
    return 1;
  v21 = "Leading all-spaces line must be smaller than the block indent";
  v22 = 259;
  sub_1C639BA64((uint64_t)this, (llvm::Twine *)&v21, v10);
  return 0;
}

uint64_t llvm::yaml::Scanner::scanBlockScalarIndent(llvm::yaml::Scanner *this, unsigned int a2, unsigned int a3, BOOL *a4)
{
  unsigned int v8;
  char *v9;
  char *v10;
  uint64_t result;
  const char *v12;
  __int16 v13;

  v8 = *((_DWORD *)this + 15);
  v9 = (char *)*((_QWORD *)this + 5);
  if (v8 < a2)
  {
    v10 = (char *)*((_QWORD *)this + 6);
    while (v9 != v10)
    {
      if (*v9 != 32)
        goto LABEL_8;
      *((_QWORD *)this + 5) = ++v9;
      *((_DWORD *)this + 15) = ++v8;
      if (a2 == v8)
      {
        v8 = a2;
        goto LABEL_8;
      }
    }
    v9 = v10;
  }
LABEL_8:
  if (llvm::yaml::Scanner::skip_nb_char(this, v9) == v9)
    return 1;
  if (v8 <= a3)
  {
LABEL_13:
    result = 1;
    *a4 = 1;
    return result;
  }
  if (v8 >= a2)
    return 1;
  if (v9 != *((char **)this + 6) && *v9 == 35)
    goto LABEL_13;
  v12 = "A text line is less indented than the block scalar";
  v13 = 259;
  sub_1C639BA64((uint64_t)this, (llvm::Twine *)&v12, v9);
  return 0;
}

uint64_t llvm::yaml::Scanner::scanBlockScalar(llvm::yaml::Scanner *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  char *v9;
  char *v10;
  char *v11;
  int v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  char *v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  char *v22;
  unsigned int v23;
  uint64_t v24;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  int64_t v30;
  unint64_t v31;
  BOOL v32;
  unsigned int v33;
  size_t v34;
  uint64_t v35;
  unint64_t v36;
  size_t v37;
  uint64_t v38;
  void *v39;
  __int128 *p_dst;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v47;
  __int128 __dst;
  unint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 __p;
  unint64_t v53;
  unsigned int v54;
  BOOL v55;
  unsigned int v56;
  char v57[2];
  void *__src;
  __int128 v59;
  _QWORD v60[34];

  v60[32] = *MEMORY[0x1E0C80C00];
  *(_WORD *)v57 = 0;
  v56 = 0;
  v55 = 0;
  v2 = 0;
  if (!llvm::yaml::Scanner::scanBlockScalarIndicators(this, &v57[1], v57, &v56, &v55))
    return v2;
  if (v55)
    return 1;
  v3 = v57[1];
  v4 = *((_QWORD *)this + 5);
  v5 = *((_DWORD *)this + 14);
  v6 = v5 & ~(v5 >> 31);
  v54 = 0;
  v7 = v56;
  if (v56)
  {
    v8 = 0;
    __src = v60;
    v59 = xmmword_1C64638F0;
  }
  else
  {
    if (!llvm::yaml::Scanner::findBlockScalarIndent(this, &v56, v5 & ~(v5 >> 31), &v54, &v55))return 0;
    v8 = v54;
    __src = v60;
    v59 = xmmword_1C64638F0;
    if (v55)
    {
LABEL_53:
      if (v8)
        v32 = 0;
      else
        v32 = *((_QWORD *)this + 5) == *((_QWORD *)this + 6);
      if (v32)
        v33 = 1;
      else
        v33 = v8;
      v54 = v33;
      if (v57[0] == 45)
      {
        v33 = 0;
      }
      else if (v57[0] != 43)
      {
        v33 = (_QWORD)v59 != 0;
      }
      v34 = v33;
      v35 = v59;
      v36 = v59 + v33;
      if (v36 > *((_QWORD *)&v59 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__src, v60, v36, 1);
        v35 = v59;
        if (!(_DWORD)v34)
        {
LABEL_67:
          v37 = v35 + v34;
          *(_QWORD *)&v59 = v37;
          if (!*((_DWORD *)this + 17))
            *((_BYTE *)this + 73) = 1;
          __p = 0uLL;
          v53 = 0;
          LODWORD(v50) = 19;
          v38 = *((_QWORD *)this + 5) - v4;
          *((_QWORD *)&v50 + 1) = v4;
          v51 = v38;
          if (v37 >= 0x7FFFFFFFFFFFFFF8)
            abort();
          v39 = __src;
          if (v37 >= 0x17)
          {
            v41 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v37 | 7) != 0x17)
              v41 = v37 | 7;
            v42 = v41 + 1;
            p_dst = (__int128 *)operator new(v41 + 1);
            *((_QWORD *)&__dst + 1) = v37;
            v49 = v42 | 0x8000000000000000;
            *(_QWORD *)&__dst = p_dst;
          }
          else
          {
            HIBYTE(v49) = v37;
            p_dst = &__dst;
            if (!v37)
              goto LABEL_77;
          }
          memmove(p_dst, v39, v37);
LABEL_77:
          *((_BYTE *)p_dst + v37) = 0;
          if (SHIBYTE(v53) < 0)
            operator delete((void *)__p);
          __p = __dst;
          v53 = v49;
          v43 = (_QWORD *)sub_1C5E6D154((uint64_t)this + 80, &v50);
          v45 = *((_QWORD *)this + 22);
          v44 = (_QWORD *)((char *)this + 176);
          *v43 = v45;
          v43[1] = v44;
          *(_QWORD *)(v45 + 8) = v43;
          *v44 = v43;
          if (SHIBYTE(v53) < 0)
            operator delete((void *)__p);
          v2 = 1;
          goto LABEL_82;
        }
      }
      else if (!v33)
      {
        goto LABEL_67;
      }
      memset((char *)__src + v35, 10, v34);
      v35 = v59;
      goto LABEL_67;
    }
    v7 = v56;
  }
  if (llvm::yaml::Scanner::scanBlockScalarIndent(this, v7, v6, &v55))
  {
    v47 = v4;
    while (!v55)
    {
      v9 = (char *)*((_QWORD *)this + 5);
      v10 = v9;
      do
      {
        v11 = v10;
        v10 = (char *)llvm::yaml::Scanner::skip_nb_char(this, v10);
      }
      while (v10 != v11);
      v12 = *((_DWORD *)this + 15);
      *((_QWORD *)this + 5) = v11;
      v13 = v11 - v9;
      *((_DWORD *)this + 15) = v12 + (_DWORD)v11 - (_DWORD)v9;
      if (v11 != v9)
      {
        v14 = v59;
        if (v8 && v3 == 62 && (_QWORD)v59)
        {
          v15 = 0;
          v16 = __src;
          v17 = (char *)*((_QWORD *)this + 6);
          while ((char *)__src + v15 != v17)
          {
            v18 = *((unsigned __int8 *)__src + v15);
            v19 = v18 > 0x20;
            v20 = (1 << v18) & 0x100002600;
            if (v19 || v20 == 0)
              break;
            if ((_QWORD)v59 == ++v15)
              goto LABEL_36;
          }
          if (!--v8)
          {
            v22 = v9;
            while (v22 != v17)
            {
              v23 = *v22;
              v19 = v23 > 0x20;
              v24 = (1 << v23) & 0x100002600;
              if (v19 || v24 == 0)
                break;
              ++v22;
              if (!--v13)
              {
                v26 = 10;
                goto LABEL_33;
              }
            }
            v26 = 32;
LABEL_33:
            if ((unint64_t)(v59 + 1) > *((_QWORD *)&v59 + 1))
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__src, v60, v59 + 1, 1);
              v16 = __src;
              v14 = v59;
            }
            v16[v14] = v26;
            v14 = v59 + 1;
            *(_QWORD *)&v59 = v59 + 1;
          }
        }
LABEL_36:
        v27 = v14 + v8;
        if (v27 > *((_QWORD *)&v59 + 1))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__src, v60, v27, 1);
          v14 = v59;
        }
        if (v8)
        {
          memset((char *)__src + v14, 10, v8);
          v14 = v59;
        }
        v28 = v14 + v8;
        *(_QWORD *)&v59 = v28;
        v29 = (char *)*((_QWORD *)this + 5);
        v30 = v29 - v9;
        v31 = v29 - v9 + v28;
        if (*((_QWORD *)&v59 + 1) < v31)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__src, v60, v31, 1);
          v28 = v59;
        }
        if (v29 != v9)
        {
          memcpy((char *)__src + v28, v9, v29 - v9);
          v28 = v59;
        }
        v8 = 0;
        *(_QWORD *)&v59 = v28 + v30;
        v9 = (char *)*((_QWORD *)this + 5);
      }
      if (v9 == *((char **)this + 6) || !llvm::yaml::Scanner::consumeLineBreakIfPresent(this))
        break;
      ++v8;
      if ((llvm::yaml::Scanner::scanBlockScalarIndent(this, v7, v6, &v55) & 1) == 0)
        goto LABEL_48;
    }
    v4 = v47;
    goto LABEL_53;
  }
LABEL_48:
  v2 = 0;
LABEL_82:
  if (__src != v60)
    free(__src);
  return v2;
}

uint64_t llvm::yaml::Scanner::scanTag(llvm::yaml::Scanner *this)
{
  int v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;
  __int128 v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *((_DWORD *)this + 15);
  v3 = *((_QWORD *)this + 5);
  v4 = (char *)*((_QWORD *)this + 6);
  v5 = (char *)(v3 + 1);
  *((_QWORD *)this + 5) = v3 + 1;
  *((_DWORD *)this + 15) = v2 + 1;
  if ((char *)(v3 + 1) == v4)
    goto LABEL_12;
  v6 = *v5;
  if (v6 > 0x3C)
    goto LABEL_5;
  if (((1 << v6) & 0x100002600) != 0)
    goto LABEL_12;
  if (v6 != 60)
  {
LABEL_5:
    while (v4 != v5)
    {
      v7 = v5;
      v8 = *v5;
      if (v8 != 9 && v8 != 32)
      {
        v5 = (char *)llvm::yaml::Scanner::skip_nb_char(this, v5);
        if (v5 != v7)
          continue;
      }
      goto LABEL_11;
    }
    v7 = v4;
LABEL_11:
    *((_QWORD *)this + 5) = v7;
    v5 = v7;
    goto LABEL_12;
  }
  *((_QWORD *)this + 5) = v3 + 2;
  *((_DWORD *)this + 15) = v2 + 2;
  llvm::yaml::Scanner::scan_ns_uri_char((uint64_t)this);
  result = llvm::yaml::Scanner::consume(this, 0x3Eu);
  if ((_DWORD)result)
  {
    v5 = (char *)*((_QWORD *)this + 5);
LABEL_12:
    v14 = 0;
    v15 = 0;
    v16 = 0;
    LODWORD(v12) = 22;
    *((_QWORD *)&v12 + 1) = v3;
    v13 = &v5[-v3];
    v9 = (_QWORD *)sub_1C5E6D154((uint64_t)this + 80, &v12);
    v10 = *((_QWORD *)this + 22);
    *v9 = v10;
    v9[1] = (char *)this + 176;
    *(_QWORD *)(v10 + 8) = v9;
    *((_QWORD *)this + 22) = v9;
    llvm::yaml::Scanner::saveSimpleKeyCandidate((uint64_t)this, (uint64_t)v9, v2, 0);
    *((_BYTE *)this + 73) = 0;
    return 1;
  }
  return result;
}

uint64_t *llvm::yaml::Stream::Stream(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v12;

  v12 = operator new();
  *a1 = llvm::yaml::Scanner::Scanner(v12, a2, a3, a4, a5, a6);
  a1[1] = 0;
  return a1;
}

{
  uint64_t v12;

  v12 = operator new();
  *a1 = llvm::yaml::Scanner::Scanner(v12, a2, a3, a4, a5, a6);
  a1[1] = 0;
  return a1;
}

uint64_t *llvm::yaml::Stream::begin(llvm::yaml::Stream *this)
{
  uint64_t *v1;
  llvm::yaml::Document *v3;
  uint64_t v5;
  void *__p;
  char v7;

  v1 = (uint64_t *)((char *)this + 8);
  if (*((_QWORD *)this + 1))
    llvm::report_fatal_error((llvm *)"Can only iterate over the stream once", (const char *)1);
  llvm::yaml::Scanner::getNext(*(llvm::yaml::Scanner **)this, (uint64_t)&v5);
  if (v7 < 0)
    operator delete(__p);
  v3 = (llvm::yaml::Document *)operator new();
  llvm::yaml::Document::Document(v3, this);
  sub_1C5AC3DD8(v1, (uint64_t)v3);
  return v1;
}

llvm::yaml::Document **llvm::yaml::Stream::skip(llvm::yaml::Stream *this)
{
  llvm::yaml::Document **result;
  llvm::yaml::Document **i;

  result = (llvm::yaml::Document **)llvm::yaml::Stream::begin(this);
  for (i = result; i; result = i)
  {
    result = (llvm::yaml::Document **)*result;
    if (!result)
      break;
    llvm::yaml::Document::skip((llvm::yaml::Document *)result);
    sub_1C630F42C(&i);
  }
  return result;
}

unint64_t llvm::yaml::Document::skip(llvm::yaml::Document *this)
{
  unint64_t result;
  int v3;
  uint64_t v4;
  void *__p;
  char v6;

  if (*(_BYTE *)(**(_QWORD **)this + 74))
    return 0;
  result = *((_QWORD *)this + 13);
  if (result
    || (result = llvm::yaml::Document::parseBlockNode((llvm::yaml::Scanner ***)this),
        (*((_QWORD *)this + 13) = result) != 0))
  {
    (*(void (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    v3 = *(_DWORD *)llvm::yaml::Scanner::peekNext(**(llvm::yaml::Scanner ***)this);
    if (v3 == 2)
      return 0;
    if (v3 == 6)
    {
      llvm::yaml::Scanner::getNext(**(llvm::yaml::Scanner ***)this, (uint64_t)&v4);
      if (v6 < 0)
        operator delete(__p);
      return llvm::yaml::Document::skip(this);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t llvm::yaml::Node::Node(uint64_t a1, int a2, llvm::yaml::Scanner ****a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;

  *(_QWORD *)a1 = &off_1E81A68E8;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = a4;
  *(_QWORD *)(a1 + 48) = a5;
  *(_QWORD *)(a1 + 56) = a6;
  *(_QWORD *)(a1 + 64) = a7;
  v8 = *(_QWORD *)(llvm::yaml::Scanner::peekNext(***a3) + 8);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v8;
  return a1;
}

{
  uint64_t v8;

  *(_QWORD *)a1 = &off_1E81A68E8;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = a4;
  *(_QWORD *)(a1 + 48) = a5;
  *(_QWORD *)(a1 + 56) = a6;
  *(_QWORD *)(a1 + 64) = a7;
  v8 = *(_QWORD *)(llvm::yaml::Scanner::peekNext(***a3) + 8);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v8;
  return a1;
}

uint64_t llvm::yaml::Node::peekNext(llvm::yaml::Scanner *****this)
{
  return llvm::yaml::Scanner::peekNext(***this[1]);
}

std::string *llvm::yaml::Node::getVerbatimTag@<X0>(std::string *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v2;
  unint64_t v4;
  char *size;
  std::string::size_type v6;
  const char *v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  const void *v14;
  __int128 *p_dst;
  uint64_t v16;
  _QWORD *v17;
  size_t v18;
  const void *v19;
  __int128 *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t **v24;
  uint64_t **v25;
  size_t v26;
  uint64_t *v27;
  __int128 *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  std::string *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 __dst;
  char *v41;
  uint64_t v42;
  __int16 v43;
  char *v44;
  uint64_t v45;

  v2 = this;
  v4 = this[2].__r_.__value_.__r.__words[2];
  if (v4)
  {
    size = (char *)this[2].__r_.__value_.__l.__size_;
    v6 = v4 - 1;
    if (v4 != 1 || *size != 33)
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      v8 = v4;
      *(_QWORD *)(a2 + 16) = 0;
      do
      {
        if (!v8)
          goto LABEL_20;
        v9 = v8 - 1;
        v10 = size[--v8];
      }
      while (v10 != 33);
      if (!v9)
      {
        v11 = *(_QWORD *)this->__r_.__value_.__l.__size_ + 112;
        v44 = "!";
        v45 = 1;
        v12 = sub_1C62B23B8(v11, (uint64_t)&v44);
        v13 = v12[7];
        if (v13 <= 0x7FFFFFFFFFFFFFF7)
        {
          v14 = (const void *)v12[6];
          if (v13 >= 0x17)
          {
            v36 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v13 | 7) != 0x17)
              v36 = v13 | 7;
            v37 = v36 + 1;
            p_dst = (__int128 *)operator new(v36 + 1);
            *((_QWORD *)&__dst + 1) = v13;
            v41 = (char *)(v37 | 0x8000000000000000);
            *(_QWORD *)&__dst = p_dst;
          }
          else
          {
            HIBYTE(v41) = v12[7];
            p_dst = &__dst;
            if (!v13)
              goto LABEL_53;
          }
          memmove(p_dst, v14, v13);
LABEL_53:
          *((_BYTE *)p_dst + v13) = 0;
          if (*(char *)(a2 + 23) < 0)
            operator delete(*(void **)a2);
          *(_OWORD *)a2 = __dst;
          *(_QWORD *)(a2 + 16) = v41;
          v33 = size + 1;
LABEL_63:
          v35 = (std::string *)a2;
          v34 = v6;
          return std::string::append(v35, v33, v34);
        }
LABEL_66:
        abort();
      }
LABEL_20:
      v6 = v4 - 2;
      if (v4 >= 2 && *(_WORD *)size == 8481)
      {
        v16 = *(_QWORD *)this->__r_.__value_.__l.__size_ + 112;
        v44 = "!!";
        v45 = 2;
        v17 = sub_1C62B23B8(v16, (uint64_t)&v44);
        v18 = v17[7];
        if (v18 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_66;
        v19 = (const void *)v17[6];
        if (v18 >= 0x17)
        {
          v38 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v18 | 7) != 0x17)
            v38 = v18 | 7;
          v39 = v38 + 1;
          v20 = (__int128 *)operator new(v38 + 1);
          *((_QWORD *)&__dst + 1) = v18;
          v41 = (char *)(v39 | 0x8000000000000000);
          *(_QWORD *)&__dst = v20;
        }
        else
        {
          HIBYTE(v41) = v17[7];
          v20 = &__dst;
          if (!v18)
            goto LABEL_60;
        }
        memmove(v20, v19, v18);
LABEL_60:
        *((_BYTE *)v20 + v18) = 0;
        if (*(char *)(a2 + 23) < 0)
          operator delete(*(void **)a2);
        *(_OWORD *)a2 = __dst;
        *(_QWORD *)(a2 + 16) = v41;
        v33 = size + 2;
        goto LABEL_63;
      }
      v21 = size - 1;
      v22 = v4;
      do
      {
        v23 = v22;
        if (!v22)
          break;
        --v22;
      }
      while (v21[v23] != 33);
      if (v4 < v23)
        v23 = v4;
      v44 = size;
      v45 = v23;
      v24 = (uint64_t **)sub_1C62B23B8(*(_QWORD *)this->__r_.__value_.__l.__size_ + 112, (uint64_t)&v44);
      v25 = *(uint64_t ***)v2->__r_.__value_.__l.__size_;
      if (v25 + 15 == v24)
      {
        *(_QWORD *)&__dst = "Unknown tag handle ";
        v41 = v44;
        v42 = v45;
        v43 = 1283;
        sub_1C639BA64(**v25, (llvm::Twine *)&__dst, v44);
LABEL_43:
        v31 = v4;
        do
        {
          v32 = v31;
          if (!v31)
            break;
          --v31;
        }
        while (v21[v32] != 33);
        if (v4 < v32)
          v32 = v4;
        v33 = &size[v32];
        v34 = v4 - v32;
        v35 = (std::string *)a2;
        return std::string::append(v35, v33, v34);
      }
      v26 = (size_t)v24[7];
      if (v26 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_66;
      v27 = v24[6];
      if (v26 >= 0x17)
      {
        v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v26 | 7) != 0x17)
          v29 = v26 | 7;
        v30 = v29 + 1;
        v28 = (__int128 *)operator new(v29 + 1);
        *((_QWORD *)&__dst + 1) = v26;
        v41 = (char *)(v30 | 0x8000000000000000);
        *(_QWORD *)&__dst = v28;
      }
      else
      {
        HIBYTE(v41) = v24[7];
        v28 = &__dst;
        if (!v26)
          goto LABEL_40;
      }
      memmove(v28, v27, v26);
LABEL_40:
      *((_BYTE *)v28 + v26) = 0;
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(_OWORD *)a2 = __dst;
      *(_QWORD *)(a2 + 16) = v41;
      goto LABEL_43;
    }
  }
  switch(LODWORD(this[1].__r_.__value_.__r.__words[1]))
  {
    case 0:
      strcpy((char *)a2, "tag:yaml.org,2002:null");
      *(_BYTE *)(a2 + 23) = 22;
      return this;
    case 1:
    case 2:
      v7 = "tag:yaml.org,2002:str";
      goto LABEL_10;
    case 4:
      v7 = "tag:yaml.org,2002:map";
      goto LABEL_10;
    case 5:
      v7 = "tag:yaml.org,2002:seq";
LABEL_10:
      *(_BYTE *)(a2 + 23) = 21;
      *(_OWORD *)a2 = *(_OWORD *)v7;
      *(_QWORD *)(a2 + 13) = *(_QWORD *)(v7 + 13);
      *(_BYTE *)(a2 + 21) = 0;
      break;
    default:
      *(_BYTE *)(a2 + 23) = 0;
      *(_BYTE *)a2 = 0;
      break;
  }
  return this;
}

uint64_t llvm::yaml::Node::setError(uint64_t a1, llvm::Twine *a2, uint64_t a3)
{
  return sub_1C639BA64(****(_QWORD ****)(a1 + 8), a2, *(char **)(a3 + 8));
}

uint64_t llvm::yaml::Document::peekNext(llvm::yaml::Scanner ***this)
{
  return llvm::yaml::Scanner::peekNext(**this);
}

void llvm::yaml::Node::getNext(llvm::yaml::Scanner *****this@<X0>, uint64_t a2@<X8>)
{
  llvm::yaml::Scanner::getNext(***this[1], a2);
}

void llvm::yaml::Document::getNext(llvm::yaml::Scanner ***this@<X0>, uint64_t a2@<X8>)
{
  llvm::yaml::Scanner::getNext(**this, a2);
}

unint64_t llvm::yaml::Node::parseBlockNode(llvm::yaml::Scanner *****this)
{
  return llvm::yaml::Document::parseBlockNode(*this[1]);
}

unint64_t llvm::yaml::Document::parseBlockNode(llvm::yaml::Scanner ***this)
{
  uint64_t v2;
  uint64_t v3;
  std::string *v4;
  __int128 v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::yaml::Scanner **v15;
  unint64_t v16;
  llvm::yaml::Scanner ****v17;
  uint64_t v18;
  unint64_t v19;
  llvm::yaml::Scanner **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  llvm::yaml::Scanner **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  llvm::yaml::Scanner **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  llvm::yaml::Scanner **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  llvm::yaml::Scanner **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  llvm::yaml::Scanner **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  llvm::yaml::Scanner **v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  std::string::size_type size;
  std::string::size_type v57;
  unint64_t v58;
  llvm::yaml::Scanner **v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  llvm::yaml::Scanner **v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  void *v71;
  void *__p;
  uint64_t v73;
  char v74;
  _BYTE v75[24];
  void *v76;
  char v77;
  _BYTE v78[24];
  void *v79;
  char v80;
  _BYTE v81[24];
  void *v82;
  char v83;
  _BYTE v84[24];
  void *v85;
  char v86;
  _BYTE v87[24];
  void *v88;
  char v89;
  _BYTE v90[24];
  void *v91;
  char v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  __int16 v97;
  char v98;
  _BYTE v99[24];
  void *v100;
  char v101;
  __int128 v102;
  uint64_t v103;
  std::string v104;

  v2 = llvm::yaml::Scanner::peekNext(**this);
  v3 = *(_QWORD *)(v2 + 16);
  v102 = *(_OWORD *)v2;
  v103 = v3;
  v4 = &v104;
  if (*(char *)(v2 + 47) < 0)
  {
    sub_1C47EBC30(&v104, *(void **)(v2 + 24), *(_QWORD *)(v2 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(v2 + 24);
    v104.__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 40);
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v5;
  }
  __p = 0;
  v73 = 0;
  v74 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  while ((_DWORD)v102 == 21)
  {
    if (v7 == 21)
    {
      v69 = "Already encountered an anchor for this node!";
      goto LABEL_85;
    }
    llvm::yaml::Scanner::getNext(**this, (uint64_t)&v93);
    v7 = (int)v93;
    v9 = v94;
    v10 = v95;
    if (v11 < 0)
      operator delete(v12);
    v12 = v96;
    v11 = v98;
LABEL_10:
    v13 = llvm::yaml::Scanner::peekNext(**this);
    v14 = *(_QWORD *)(v13 + 16);
    v102 = *(_OWORD *)v13;
    v103 = v14;
    std::string::operator=(&v104, (const std::string *)(v13 + 24));
  }
  switch((int)v102)
  {
    case 0:
      goto LABEL_86;
    case 7:
      v19 = sub_1C484358C((uint64_t)(this + 1), 88, 4);
      v16 = v19;
      v20 = *this;
      v21 = (uint64_t)(*this + 1);
      if (v10)
        v22 = v9 + 1;
      else
        v22 = v9;
      *(_QWORD *)v19 = &off_1E81A68E8;
      *(_QWORD *)(v19 + 8) = v21;
      *(_QWORD *)(v19 + 16) = 0;
      *(_QWORD *)(v19 + 24) = 0;
      *(_DWORD *)(v19 + 32) = 5;
      *(_QWORD *)(v19 + 40) = v22;
      *(_QWORD *)(v19 + 48) = v10 - (v10 != 0);
      *(_QWORD *)(v19 + 56) = v6;
      *(_QWORD *)(v19 + 64) = v73;
      v23 = *(_QWORD *)(llvm::yaml::Scanner::peekNext(**(llvm::yaml::Scanner ***)v20[1]) + 8);
      *(_QWORD *)(v16 + 16) = v23;
      *(_QWORD *)(v16 + 24) = v23;
      *(_QWORD *)v16 = off_1E81A69A8;
      *(_DWORD *)(v16 + 72) = 2;
      goto LABEL_42;
    case 9:
      llvm::yaml::Scanner::getNext(**this, (uint64_t)v90);
      if (v92 < 0)
        operator delete(v91);
      v24 = sub_1C484358C((uint64_t)(this + 1), 88, 4);
      v16 = v24;
      v25 = *this;
      v26 = (uint64_t)(*this + 1);
      if (v10)
        v27 = v9 + 1;
      else
        v27 = v9;
      *(_QWORD *)v24 = &off_1E81A68E8;
      *(_QWORD *)(v24 + 8) = v26;
      *(_QWORD *)(v24 + 16) = 0;
      *(_QWORD *)(v24 + 24) = 0;
      *(_DWORD *)(v24 + 32) = 5;
      *(_QWORD *)(v24 + 40) = v27;
      *(_QWORD *)(v24 + 48) = v10 - (v10 != 0);
      *(_QWORD *)(v24 + 56) = v6;
      *(_QWORD *)(v24 + 64) = v73;
      v28 = *(_QWORD *)(llvm::yaml::Scanner::peekNext(**(llvm::yaml::Scanner ***)v25[1]) + 8);
      *(_QWORD *)(v16 + 16) = v28;
      *(_QWORD *)(v16 + 24) = v28;
      *(_QWORD *)v16 = off_1E81A69A8;
      *(_DWORD *)(v16 + 72) = 0;
      goto LABEL_42;
    case 10:
      llvm::yaml::Scanner::getNext(**this, (uint64_t)v87);
      if (v89 < 0)
        operator delete(v88);
      v29 = sub_1C484358C((uint64_t)(this + 1), 88, 4);
      v16 = v29;
      v30 = *this;
      v31 = (uint64_t)(*this + 1);
      if (v10)
        v32 = v9 + 1;
      else
        v32 = v9;
      *(_QWORD *)v29 = &off_1E81A68E8;
      *(_QWORD *)(v29 + 8) = v31;
      *(_QWORD *)(v29 + 16) = 0;
      *(_QWORD *)(v29 + 24) = 0;
      *(_DWORD *)(v29 + 32) = 4;
      *(_QWORD *)(v29 + 40) = v32;
      *(_QWORD *)(v29 + 48) = v10 - (v10 != 0);
      *(_QWORD *)(v29 + 56) = v6;
      *(_QWORD *)(v29 + 64) = v73;
      v33 = *(_QWORD *)(llvm::yaml::Scanner::peekNext(**(llvm::yaml::Scanner ***)v30[1]) + 8);
      *(_QWORD *)(v16 + 16) = v33;
      *(_QWORD *)(v16 + 24) = v33;
      *(_QWORD *)v16 = off_1E81A6988;
      *(_DWORD *)(v16 + 72) = 0;
      goto LABEL_53;
    case 11:
    case 13:
    case 15:
      v15 = this[13];
      if (v15 && ((_DWORD)v15[4] & 0xFFFFFFFE) == 4)
        goto LABEL_18;
      v69 = "Unexpected token";
      goto LABEL_85;
    case 12:
      llvm::yaml::Scanner::getNext(**this, (uint64_t)v84);
      if (v86 < 0)
        operator delete(v85);
      v34 = sub_1C484358C((uint64_t)(this + 1), 88, 4);
      v16 = v34;
      v35 = *this;
      v36 = (uint64_t)(*this + 1);
      if (v10)
        v37 = v9 + 1;
      else
        v37 = v9;
      *(_QWORD *)v34 = &off_1E81A68E8;
      *(_QWORD *)(v34 + 8) = v36;
      *(_QWORD *)(v34 + 16) = 0;
      *(_QWORD *)(v34 + 24) = 0;
      *(_DWORD *)(v34 + 32) = 5;
      *(_QWORD *)(v34 + 40) = v37;
      *(_QWORD *)(v34 + 48) = v10 - (v10 != 0);
      *(_QWORD *)(v34 + 56) = v6;
      *(_QWORD *)(v34 + 64) = v73;
      v38 = *(_QWORD *)(llvm::yaml::Scanner::peekNext(**(llvm::yaml::Scanner ***)v35[1]) + 8);
      *(_QWORD *)(v16 + 16) = v38;
      *(_QWORD *)(v16 + 24) = v38;
      *(_QWORD *)v16 = off_1E81A69A8;
      *(_DWORD *)(v16 + 72) = 1;
LABEL_42:
      *(_WORD *)(v16 + 76) = 1;
      *(_BYTE *)(v16 + 78) = 1;
      goto LABEL_54;
    case 14:
      llvm::yaml::Scanner::getNext(**this, (uint64_t)v81);
      if (v83 < 0)
        operator delete(v82);
      v39 = sub_1C484358C((uint64_t)(this + 1), 88, 4);
      v16 = v39;
      v40 = *this;
      v41 = (uint64_t)(*this + 1);
      if (v10)
        v42 = v9 + 1;
      else
        v42 = v9;
      *(_QWORD *)v39 = &off_1E81A68E8;
      *(_QWORD *)(v39 + 8) = v41;
      *(_QWORD *)(v39 + 16) = 0;
      *(_QWORD *)(v39 + 24) = 0;
      *(_DWORD *)(v39 + 32) = 4;
      *(_QWORD *)(v39 + 40) = v42;
      *(_QWORD *)(v39 + 48) = v10 - (v10 != 0);
      *(_QWORD *)(v39 + 56) = v6;
      *(_QWORD *)(v39 + 64) = v73;
      v43 = *(_QWORD *)(llvm::yaml::Scanner::peekNext(**(llvm::yaml::Scanner ***)v40[1]) + 8);
      *(_QWORD *)(v16 + 16) = v43;
      *(_QWORD *)(v16 + 24) = v43;
      *(_QWORD *)v16 = off_1E81A6988;
      *(_DWORD *)(v16 + 72) = 1;
      goto LABEL_53;
    case 16:
      v44 = sub_1C484358C((uint64_t)(this + 1), 88, 4);
      v16 = v44;
      v45 = *this;
      v46 = (uint64_t)(*this + 1);
      if (v10)
        v47 = v9 + 1;
      else
        v47 = v9;
      *(_QWORD *)v44 = &off_1E81A68E8;
      *(_QWORD *)(v44 + 8) = v46;
      *(_QWORD *)(v44 + 16) = 0;
      *(_QWORD *)(v44 + 24) = 0;
      *(_DWORD *)(v44 + 32) = 4;
      *(_QWORD *)(v44 + 40) = v47;
      *(_QWORD *)(v44 + 48) = v10 - (v10 != 0);
      *(_QWORD *)(v44 + 56) = v6;
      *(_QWORD *)(v44 + 64) = v73;
      v48 = *(_QWORD *)(llvm::yaml::Scanner::peekNext(**(llvm::yaml::Scanner ***)v45[1]) + 8);
      *(_QWORD *)(v16 + 16) = v48;
      *(_QWORD *)(v16 + 24) = v48;
      *(_QWORD *)v16 = off_1E81A6988;
      *(_DWORD *)(v16 + 72) = 2;
LABEL_53:
      *(_WORD *)(v16 + 76) = 1;
LABEL_54:
      *(_QWORD *)(v16 + 80) = 0;
      goto LABEL_87;
    case 18:
      llvm::yaml::Scanner::getNext(**this, (uint64_t)v78);
      if (v80 < 0)
        operator delete(v79);
      v49 = sub_1C484358C((uint64_t)(this + 1), 88, 4);
      v16 = v49;
      v50 = *this;
      v51 = (uint64_t)(*this + 1);
      if (v10)
        v52 = v9 + 1;
      else
        v52 = v9;
      v53 = v10 - (v10 != 0);
      v54 = *((_QWORD *)&v102 + 1);
      v55 = v103;
      *(_QWORD *)v49 = &off_1E81A68E8;
      *(_QWORD *)(v49 + 8) = v51;
      *(_QWORD *)(v49 + 16) = 0;
      *(_QWORD *)(v49 + 24) = 0;
      *(_DWORD *)(v49 + 32) = 1;
      *(_QWORD *)(v49 + 40) = v52;
      *(_QWORD *)(v49 + 48) = v53;
      *(_QWORD *)(v49 + 56) = v6;
      *(_QWORD *)(v49 + 64) = v73;
      llvm::yaml::Scanner::peekNext(**(llvm::yaml::Scanner ***)v50[1]);
      *(_QWORD *)v16 = &off_1E81A6928;
      *(_QWORD *)(v16 + 72) = v54;
      *(_QWORD *)(v16 + 80) = v55;
      goto LABEL_83;
    case 19:
      llvm::yaml::Scanner::getNext(**this, (uint64_t)v75);
      if (v77 < 0)
        operator delete(v76);
      if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&v104.__r_.__value_.__s + 23) & 0x7F;
      else
        size = v104.__r_.__value_.__l.__size_;
      v57 = size + 1;
      if (size == -1)
      {
        v71 = 0;
      }
      else
      {
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v4 = (std::string *)v104.__r_.__value_.__r.__words[0];
        v71 = (void *)sub_1C484358C((uint64_t)(this + 1), size + 1, 0);
        memmove(v71, v4, size + 1);
      }
      if (v57 >= size)
        v57 = size;
      v64 = sub_1C484358C((uint64_t)(this + 1), 88, 4);
      v16 = v64;
      v65 = *this;
      v66 = (uint64_t)(*this + 1);
      if (v10)
        v67 = v9 + 1;
      else
        v67 = v9;
      v68 = v10 - (v10 != 0);
      v54 = *((_QWORD *)&v102 + 1);
      v55 = v103;
      *(_QWORD *)v64 = &off_1E81A68E8;
      *(_QWORD *)(v64 + 8) = v66;
      *(_QWORD *)(v64 + 16) = 0;
      *(_QWORD *)(v64 + 24) = 0;
      *(_DWORD *)(v64 + 32) = 2;
      *(_QWORD *)(v64 + 40) = v67;
      *(_QWORD *)(v64 + 48) = v68;
      *(_QWORD *)(v64 + 56) = v6;
      *(_QWORD *)(v64 + 64) = v73;
      llvm::yaml::Scanner::peekNext(**(llvm::yaml::Scanner ***)v65[1]);
      *(_QWORD *)v16 = &off_1E81A6948;
      *(_QWORD *)(v16 + 72) = v71;
      *(_QWORD *)(v16 + 80) = v57;
LABEL_83:
      *(_QWORD *)(v16 + 16) = v54;
      *(_QWORD *)(v16 + 24) = v54 + v55;
      goto LABEL_87;
    case 20:
      llvm::yaml::Scanner::getNext(**this, (uint64_t)v99);
      if (v101 < 0)
        operator delete(v100);
      v58 = sub_1C484358C((uint64_t)(this + 1), 88, 4);
      v16 = v58;
      v59 = *this;
      v60 = (uint64_t)(*this + 1);
      if (v103)
        v61 = *((_QWORD *)&v102 + 1) + 1;
      else
        v61 = *((_QWORD *)&v102 + 1);
      v62 = v103 - (v103 != 0);
      *(_QWORD *)v58 = &off_1E81A68E8;
      *(_QWORD *)(v58 + 8) = v60;
      *(_QWORD *)(v58 + 16) = 0;
      *(_QWORD *)(v58 + 24) = 0;
      *(_DWORD *)(v58 + 32) = 6;
      *(_OWORD *)(v58 + 56) = 0u;
      *(_OWORD *)(v58 + 40) = 0u;
      v63 = *(_QWORD *)(llvm::yaml::Scanner::peekNext(**(llvm::yaml::Scanner ***)v59[1]) + 8);
      *(_QWORD *)(v16 + 16) = v63;
      *(_QWORD *)(v16 + 24) = v63;
      *(_QWORD *)v16 = &off_1E81A69C8;
      *(_QWORD *)(v16 + 72) = v61;
      *(_QWORD *)(v16 + 80) = v62;
      goto LABEL_87;
    case 22:
      if (v8 != 22)
      {
        llvm::yaml::Scanner::getNext(**this, (uint64_t)&v93);
        v8 = (int)v93;
        v6 = v94;
        v73 = v95;
        if (v74 < 0)
          operator delete(__p);
        __p = v96;
        v74 = v98;
        goto LABEL_10;
      }
      v69 = "Already encountered a tag for this node!";
LABEL_85:
      v93 = v69;
      v97 = 259;
      sub_1C639BA64((uint64_t)**this, (llvm::Twine *)&v93, *((char **)&v102 + 1));
LABEL_86:
      v16 = 0;
LABEL_87:
      if (v74 < 0)
      {
        operator delete(__p);
        if (v11 < 0)
          goto LABEL_93;
      }
      else
      {
        if ((v11 & 0x80) == 0)
          goto LABEL_89;
LABEL_93:
        operator delete(v12);
      }
LABEL_89:
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v104.__r_.__value_.__l.__data_);
      return v16;
    default:
LABEL_18:
      v16 = sub_1C484358C((uint64_t)(this + 1), 72, 4);
      v17 = (llvm::yaml::Scanner ****)(*this + 1);
      *(_QWORD *)v16 = &off_1E81A68E8;
      *(_QWORD *)(v16 + 8) = v17;
      *(_DWORD *)(v16 + 32) = 0;
      *(_QWORD *)(v16 + 16) = 0;
      *(_QWORD *)(v16 + 24) = 0;
      *(_OWORD *)(v16 + 56) = 0u;
      *(_OWORD *)(v16 + 40) = 0u;
      v18 = *(_QWORD *)(llvm::yaml::Scanner::peekNext(***v17) + 8);
      *(_QWORD *)(v16 + 16) = v18;
      *(_QWORD *)(v16 + 24) = v18;
      *(_QWORD *)v16 = &off_1E81A6908;
      goto LABEL_87;
  }
}

uint64_t llvm::yaml::Node::getAllocator(llvm::yaml::Node *this)
{
  return **((_QWORD **)this + 1) + 8;
}

uint64_t llvm::yaml::Document::setError(uint64_t **a1, llvm::Twine *a2, uint64_t a3)
{
  return sub_1C639BA64(**a1, a2, *(char **)(a3 + 8));
}

uint64_t llvm::yaml::Node::failed(llvm::yaml::Node *this)
{
  return *(unsigned __int8 *)(****((_QWORD ****)this + 1) + 74);
}

uint64_t llvm::yaml::Document::failed(llvm::yaml::Document *this)
{
  return *(unsigned __int8 *)(**(_QWORD **)this + 74);
}

const char *llvm::yaml::ScalarNode::getValue(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t first_of;
  uint64_t v11;
  size_t v12;
  size_t v13;
  size_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v18;
  size_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  size_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];

  v4 = *(unsigned __int8 **)(a1 + 72);
  v5 = *v4;
  if (v5 == 39)
  {
    v11 = *(_QWORD *)(a1 + 80);
    v12 = v11 - 2;
    if (v11)
      ++v4;
    v13 = v11 - (v11 != 0);
    if (v13 >= v12)
      v14 = v12;
    else
      v14 = v13;
    if (v14)
    {
      v15 = memchr(v4, 39, v14);
      v16 = v15 - v4;
      if (v15 && v16 != -1)
      {
        v18 = 0;
        a2[1] = 0;
        if (a2[2] < v14)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v14, 1);
          v18 = a2[1];
        }
        do
        {
          v19 = v14;
          v20 = v4;
          sub_1C59696CC(a2, *a2 + v18, (char *)v4, (char *)&v4[v16]);
          v21 = a2[1];
          if (v21 + 1 > (unint64_t)a2[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v21 + 1, 1);
            v21 = a2[1];
          }
          *(_BYTE *)(*a2 + v21) = 39;
          v18 = a2[1] + 1;
          a2[1] = v18;
          v22 = v16 + 2;
          if (v14 < v16 + 2)
            v22 = v14;
          v4 += v22;
          v14 -= v22;
          if (v19 == v22)
            break;
          v23 = memchr(&v20[v22], 39, v19 - v22);
          if (!v23)
            break;
          v16 = v23 - v4;
        }
        while (v23 - v4 != -1);
        sub_1C59696CC(a2, *a2 + v18, (char *)v4, (char *)&v20[v19]);
        return (const char *)*a2;
      }
    }
  }
  else if (v5 == 34)
  {
    v6 = *(_QWORD *)(a1 + 80);
    v7 = v6 - 2;
    if (v6)
      ++v4;
    v8 = v6 - (v6 != 0);
    if (v8 >= v7)
      v9 = v7;
    else
      v9 = v8;
    v27[0] = v4;
    v27[1] = v9;
    first_of = llvm::StringRef::find_first_of(v27, "\\\r\n", 3, 0);
    if (first_of != -1)
      return llvm::yaml::ScalarNode::unescapeDoubleQuoted(a1, (char *)v4, v9, first_of, a2);
  }
  else
  {
    v24 = *(_QWORD *)(a1 + 80);
    do
    {
      v25 = v24;
      if (!v24)
        break;
      --v24;
    }
    while (v4[v25 - 1] == 32);
  }
  return (const char *)v4;
}

const char *llvm::yaml::ScalarNode::unescapeDoubleQuoted(uint64_t a1, char *__src, unint64_t a3, unint64_t first_of, uint64_t *a5)
{
  unint64_t v7;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  _BOOL8 v18;
  char *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  int v32;
  int v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  int v40;
  int v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  int v47;
  int v48;
  unsigned int v49;
  unint64_t v50;
  _BOOL4 v51;
  _BOOL4 v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  _BOOL4 v56;
  _BOOL4 v57;
  uint64_t v58;
  _BOOL4 v59;
  _BOOL4 v60;
  uint64_t v61;
  uint64_t v63;
  char *v64;
  void *v65;
  const char *v66;
  __int16 v67;
  char *v68;
  unint64_t v69;

  v7 = a3;
  a5[1] = 0;
  if (a5[2] < a3)
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a5, a5 + 3, a3, 1);
  if (first_of == -1)
  {
LABEL_173:
    sub_1C59696CC(a5, *a5 + a5[1], __src, &__src[v7]);
    return (const char *)*a5;
  }
  v65 = a5 + 3;
  while (2)
  {
    sub_1C59696CC(a5, *a5 + a5[1], __src, &__src[first_of]);
    if (v7 >= first_of)
      v10 = first_of;
    else
      v10 = v7;
    v11 = &__src[v10];
    v12 = v7 - v10;
    v68 = &__src[v10];
    v69 = v7 - v10;
    v13 = __src[v10];
    v14 = v13 == 13 || v13 == 10;
    if (v14)
    {
      v15 = a5[1];
      if (v15 + 1 > (unint64_t)a5[2])
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a5, v65, v15 + 1, 1);
        v15 = a5[1];
      }
      *(_BYTE *)(*a5 + v15) = 10;
      ++a5[1];
      if (v12 >= 2)
      {
        v16 = v11[1];
        if (v16 == 13 || v16 == 10)
        {
          --v12;
          v68 = v11 + 1;
          v69 = v12;
          ++v11;
        }
      }
      if (v12)
        __src = v11 + 1;
      else
        __src = v11;
      v7 = v12 - (v12 != 0);
      goto LABEL_132;
    }
    if (v12 == 1)
    {
      v66 = "Unrecognized escape code";
      v67 = 259;
      v63 = ****(_QWORD ****)(a1 + 8);
      v64 = &__src[v10];
      goto LABEL_175;
    }
    v18 = v7 > first_of;
    if (v7 <= first_of)
      v19 = &__src[v10];
    else
      v19 = v11 + 1;
    v20 = v12 - v18;
    v68 = v19;
    v69 = v12 - v18;
    v21 = *v19;
    if (v21 > 91)
    {
      switch(*v19)
      {
        case '\\':
          v22 = a5[1];
          if (v22 + 1 > (unint64_t)a5[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a5, v65, v22 + 1, 1);
            v22 = a5[1];
          }
          v23 = *a5;
          v24 = 92;
          goto LABEL_126;
        case '_':
          v25 = 160;
          goto LABEL_110;
        case 'a':
          v22 = a5[1];
          if (v22 + 1 > (unint64_t)a5[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a5, v65, v22 + 1, 1);
            v22 = a5[1];
          }
          v23 = *a5;
          v24 = 7;
          goto LABEL_126;
        case 'b':
          v28 = a5[1];
          if (v28 + 1 > (unint64_t)a5[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a5, v65, v28 + 1, 1);
            v28 = a5[1];
          }
          *(_BYTE *)(*a5 + v28) = 8;
          goto LABEL_127;
        case 'e':
          v22 = a5[1];
          if (v22 + 1 > (unint64_t)a5[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a5, v65, v22 + 1, 1);
            v22 = a5[1];
          }
          v23 = *a5;
          v24 = 27;
          goto LABEL_126;
        case 'f':
          v22 = a5[1];
          if (v22 + 1 > (unint64_t)a5[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a5, v65, v22 + 1, 1);
            v22 = a5[1];
          }
          v23 = *a5;
          v24 = 12;
          goto LABEL_126;
        case 'n':
          v36 = a5[1];
          if (v36 + 1 > (unint64_t)a5[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a5, v65, v36 + 1, 1);
            v36 = a5[1];
          }
          *(_BYTE *)(*a5 + v36) = 10;
          goto LABEL_127;
        case 'r':
          v22 = a5[1];
          if (v22 + 1 > (unint64_t)a5[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a5, v65, v22 + 1, 1);
            v22 = a5[1];
          }
          v23 = *a5;
          v24 = 13;
          goto LABEL_126;
        case 't':
          goto LABEL_51;
        case 'u':
          if (v20 < 5)
            goto LABEL_128;
          v37 = 0;
          v38 = 0;
          v39 = &__src[v10 + 1 + v18];
          while (2)
          {
            v40 = v39[v37];
            if ((v40 - 48) < 0xA)
            {
              v41 = -48;
              goto LABEL_100;
            }
            if ((v40 - 97) < 0x1A)
            {
              v41 = -87;
              goto LABEL_100;
            }
            if ((v40 - 65) <= 0x19)
            {
              v41 = -55;
LABEL_100:
              v42 = v41 + v40;
              if (v42 > 0xF)
                break;
              v43 = 16 * v38 + v42;
              if (v38 > v43 >> 4)
              {
                v57 = HIDWORD(v43) != 0;
                v56 = 1;
LABEL_164:
                LODWORD(v43) = 0;
                goto LABEL_142;
              }
              ++v37;
              v38 = v43;
              if (v37 == 4)
              {
                v56 = 0;
                v57 = HIDWORD(v43) != 0;
                if (v43 >= 0x100000000)
                  LODWORD(v43) = 0;
                goto LABEL_142;
              }
              continue;
            }
            break;
          }
          v57 = HIDWORD(v38) != 0;
          LODWORD(v43) = 0;
          if (v38 < 0x100000000)
            LODWORD(v43) = v38;
          v14 = v37 == 4;
          v56 = v37 != 4;
          if (!v14)
            goto LABEL_164;
LABEL_142:
          if (v56 || v57)
            v58 = 65533;
          else
            v58 = v43;
          sub_1C5E6830C((void *)v58, a5);
          v54 = v20 >= 4;
          v55 = 4;
LABEL_152:
          if (!v54)
            v55 = v20;
          v19 += v55;
          v20 -= v55;
          v68 = v19;
          v69 = v20;
          break;
        case 'v':
          v22 = a5[1];
          if (v22 + 1 > (unint64_t)a5[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a5, v65, v22 + 1, 1);
            v22 = a5[1];
          }
          v23 = *a5;
          v24 = 11;
          goto LABEL_126;
        case 'x':
          if (v20 < 3)
            goto LABEL_128;
          v29 = 0;
          v30 = 0;
          v31 = &__src[v10 + 1 + v18];
          while (2)
          {
            v32 = v31[v29];
            if ((v32 - 48) < 0xA)
            {
              v33 = -48;
              goto LABEL_69;
            }
            if ((v32 - 97) < 0x1A)
            {
              v33 = -87;
              goto LABEL_69;
            }
            if ((v32 - 65) <= 0x19)
            {
              v33 = -55;
LABEL_69:
              v34 = v33 + v32;
              if (v34 > 0xF)
                break;
              v35 = 16 * v30 + v34;
              if (v30 > v35 >> 4)
              {
                v52 = HIDWORD(v35) != 0;
                v51 = 1;
LABEL_159:
                LODWORD(v35) = 0;
                goto LABEL_136;
              }
              ++v29;
              v30 = v35;
              if (v29 == 2)
              {
                v51 = 0;
                v52 = HIDWORD(v35) != 0;
                if (v35 >= 0x100000000)
                  LODWORD(v35) = 0;
                goto LABEL_136;
              }
              continue;
            }
            break;
          }
          v52 = HIDWORD(v30) != 0;
          LODWORD(v35) = 0;
          if (v30 < 0x100000000)
            LODWORD(v35) = v30;
          v14 = v29 == 2;
          v51 = v29 != 2;
          if (!v14)
            goto LABEL_159;
LABEL_136:
          if (v51 || v52)
            v53 = 65533;
          else
            v53 = v35;
          sub_1C5E6830C((void *)v53, a5);
          v54 = v20 >= 2;
          v55 = 2;
          goto LABEL_152;
        default:
          goto LABEL_176;
      }
      goto LABEL_128;
    }
    if (v21 <= 46)
    {
      if (v21 <= 12)
      {
        if (v21 != 9)
        {
          if (v21 != 10)
            goto LABEL_176;
LABEL_47:
          if (v20 >= 2)
          {
            v26 = v19[1];
            if (v26 == 13 || v26 == 10)
            {
              --v20;
              ++v19;
            }
          }
          goto LABEL_128;
        }
LABEL_51:
        v22 = a5[1];
        if (v22 + 1 > (unint64_t)a5[2])
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a5, v65, v22 + 1, 1);
          v22 = a5[1];
        }
        v23 = *a5;
        v24 = 9;
      }
      else
      {
        switch(v21)
        {
          case 13:
            goto LABEL_47;
          case 32:
            v22 = a5[1];
            if (v22 + 1 > (unint64_t)a5[2])
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a5, v65, v22 + 1, 1);
              v22 = a5[1];
            }
            v23 = *a5;
            v24 = 32;
            break;
          case 34:
            v22 = a5[1];
            if (v22 + 1 > (unint64_t)a5[2])
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a5, v65, v22 + 1, 1);
              v22 = a5[1];
            }
            v23 = *a5;
            v24 = 34;
            break;
          default:
            goto LABEL_176;
        }
      }
      goto LABEL_126;
    }
    switch(*v19)
    {
      case 'L':
        v25 = 8232;
        goto LABEL_110;
      case 'M':
      case 'O':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
        goto LABEL_176;
      case 'N':
        v25 = 133;
        goto LABEL_110;
      case 'P':
        v25 = 8233;
LABEL_110:
        sub_1C5E6830C((void *)v25, a5);
        goto LABEL_128;
      case 'U':
        if (v20 < 9)
          goto LABEL_128;
        v44 = 0;
        v45 = 0;
        v46 = &__src[v10 + 1 + v18];
        while (2)
        {
          v47 = v46[v44];
          if ((v47 - 48) < 0xA)
          {
            v48 = -48;
            goto LABEL_115;
          }
          if ((v47 - 97) < 0x1A)
          {
            v48 = -87;
            goto LABEL_115;
          }
          if ((v47 - 65) <= 0x19)
          {
            v48 = -55;
LABEL_115:
            v49 = v48 + v47;
            if (v49 > 0xF)
              break;
            v50 = 16 * v45 + v49;
            if (v45 > v50 >> 4)
            {
              v60 = HIDWORD(v50) != 0;
              v59 = 1;
LABEL_169:
              LODWORD(v50) = 0;
              goto LABEL_148;
            }
            ++v44;
            v45 = v50;
            if (v44 == 8)
            {
              v59 = 0;
              v60 = HIDWORD(v50) != 0;
              if (v50 >= 0x100000000)
                LODWORD(v50) = 0;
              goto LABEL_148;
            }
            continue;
          }
          break;
        }
        v60 = HIDWORD(v45) != 0;
        LODWORD(v50) = 0;
        if (v45 < 0x100000000)
          LODWORD(v50) = v45;
        v14 = v44 == 8;
        v59 = v44 != 8;
        if (!v14)
          goto LABEL_169;
LABEL_148:
        if (v59 || v60)
          v61 = 65533;
        else
          v61 = v50;
        sub_1C5E6830C((void *)v61, a5);
        v54 = v20 >= 8;
        v55 = 8;
        goto LABEL_152;
      default:
        if (v21 == 47)
        {
          v22 = a5[1];
          if (v22 + 1 > (unint64_t)a5[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a5, v65, v22 + 1, 1);
            v22 = a5[1];
          }
          v23 = *a5;
          v24 = 47;
LABEL_126:
          *(_BYTE *)(v23 + v22) = v24;
LABEL_127:
          ++a5[1];
LABEL_128:
          if (v20)
            __src = v19 + 1;
          else
            __src = v19;
          v7 = v20 - (v20 != 0);
LABEL_132:
          v68 = __src;
          v69 = v7;
          first_of = llvm::StringRef::find_first_of(&v68, "\\\r\n", 3, 0);
          if (first_of == -1)
            goto LABEL_173;
          continue;
        }
        if (v21 == 48)
        {
          v27 = a5[1];
          if (v27 + 1 > (unint64_t)a5[2])
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a5, v65, v27 + 1, 1);
            v27 = a5[1];
          }
          *(_BYTE *)(*a5 + v27) = 0;
          goto LABEL_127;
        }
LABEL_176:
        v66 = "Unrecognized escape code";
        v67 = 259;
        v63 = ****(_QWORD ****)(a1 + 8);
        v64 = v19;
LABEL_175:
        sub_1C639BA64(v63, (llvm::Twine *)&v66, v64);
        return "";
    }
  }
}

unint64_t llvm::yaml::KeyValueNode::getKey(llvm::yaml::KeyValueNode *this)
{
  unint64_t v1;
  int v3;
  BOOL v4;
  int v5;
  llvm::yaml::Scanner ****v7;
  uint64_t v8;
  uint64_t v10;
  void *__p;
  char v12;

  v1 = *((_QWORD *)this + 9);
  if (!v1)
  {
    v3 = *(_DWORD *)llvm::yaml::Scanner::peekNext(****((llvm::yaml::Scanner *****)this + 1));
    if (v3 > 15)
    {
      if (v3 == 17)
        goto LABEL_17;
      if (v3 == 16)
      {
        llvm::yaml::Scanner::getNext(****((llvm::yaml::Scanner *****)this + 1), (uint64_t)&v10);
        if (v12 < 0)
          operator delete(__p);
      }
    }
    else
    {
      if (v3)
        v4 = v3 == 8;
      else
        v4 = 1;
      if (v4)
        goto LABEL_17;
    }
    v5 = *(_DWORD *)llvm::yaml::Scanner::peekNext(****((llvm::yaml::Scanner *****)this + 1));
    if (v5 != 17 && v5 != 8)
    {
      v1 = llvm::yaml::Document::parseBlockNode(**((llvm::yaml::Scanner *****)this + 1));
LABEL_18:
      *((_QWORD *)this + 9) = v1;
      return v1;
    }
LABEL_17:
    v1 = sub_1C484358C(**((_QWORD **)this + 1) + 8, 72, 4);
    v7 = (llvm::yaml::Scanner ****)*((_QWORD *)this + 1);
    *(_QWORD *)v1 = &off_1E81A68E8;
    *(_QWORD *)(v1 + 8) = v7;
    *(_DWORD *)(v1 + 32) = 0;
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)(v1 + 24) = 0;
    *(_OWORD *)(v1 + 56) = 0u;
    *(_OWORD *)(v1 + 40) = 0u;
    v8 = *(_QWORD *)(llvm::yaml::Scanner::peekNext(***v7) + 8);
    *(_QWORD *)(v1 + 16) = v8;
    *(_QWORD *)(v1 + 24) = v8;
    *(_QWORD *)v1 = &off_1E81A6908;
    goto LABEL_18;
  }
  return v1;
}

unint64_t llvm::yaml::KeyValueNode::getValue(llvm::yaml::KeyValueNode *this)
{
  unint64_t v1;
  unint64_t Key;
  llvm::yaml::Scanner ***v4;
  llvm::yaml::Scanner *v5;
  uint64_t v6;
  int v7;
  llvm::yaml::Scanner ****v8;
  uint64_t v9;
  int v11;
  _BYTE v13[24];
  void *__p;
  char v15;
  const char *v16;
  __int16 v17;

  v1 = *((_QWORD *)this + 10);
  if (!v1)
  {
    Key = llvm::yaml::KeyValueNode::getKey(this);
    if (Key)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)Key + 8))(Key);
      v4 = (llvm::yaml::Scanner ***)**((_QWORD **)this + 1);
      v5 = **v4;
      if (*((_BYTE *)v5 + 74))
      {
LABEL_7:
        v1 = sub_1C484358C((uint64_t)(v4 + 1), 72, 4);
        v8 = (llvm::yaml::Scanner ****)*((_QWORD *)this + 1);
        *(_QWORD *)v1 = &off_1E81A68E8;
        *(_QWORD *)(v1 + 8) = v8;
        *(_DWORD *)(v1 + 32) = 0;
        *(_QWORD *)(v1 + 16) = 0;
        *(_QWORD *)(v1 + 24) = 0;
        *(_OWORD *)(v1 + 56) = 0u;
        *(_OWORD *)(v1 + 40) = 0u;
        v9 = *(_QWORD *)(llvm::yaml::Scanner::peekNext(***v8) + 8);
        *(_QWORD *)(v1 + 16) = v9;
        *(_QWORD *)(v1 + 24) = v9;
        *(_QWORD *)v1 = &off_1E81A6908;
LABEL_8:
        *((_QWORD *)this + 10) = v1;
        return v1;
      }
      v6 = llvm::yaml::Scanner::peekNext(v5);
      v7 = *(_DWORD *)v6;
      if (*(_DWORD *)v6 <= 0x11u)
      {
        if (((1 << v7) & 0x18901) != 0)
        {
LABEL_6:
          v4 = (llvm::yaml::Scanner ***)**((_QWORD **)this + 1);
          goto LABEL_7;
        }
        if (v7 == 17)
        {
          llvm::yaml::Scanner::getNext(****((llvm::yaml::Scanner *****)this + 1), (uint64_t)v13);
          if (v15 < 0)
            operator delete(__p);
          v11 = *(_DWORD *)llvm::yaml::Scanner::peekNext(****((llvm::yaml::Scanner *****)this + 1));
          if (v11 != 16 && v11 != 8)
          {
            v1 = llvm::yaml::Document::parseBlockNode(**((llvm::yaml::Scanner *****)this + 1));
            goto LABEL_8;
          }
          goto LABEL_6;
        }
      }
      v16 = "Unexpected token in Key Value.";
      v17 = 259;
    }
    else
    {
      v16 = "Null key in Key Value.";
      v17 = 259;
      v6 = llvm::yaml::Scanner::peekNext(****((llvm::yaml::Scanner *****)this + 1));
    }
    sub_1C639BA64(****((_QWORD ****)this + 1), (llvm::Twine *)&v16, *(char **)(v6 + 8));
    goto LABEL_6;
  }
  return v1;
}

void llvm::yaml::MappingNode::increment(llvm::yaml::MappingNode *this)
{
  llvm::yaml::Scanner *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  unint64_t v6;
  llvm::yaml::Scanner ****v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  _BYTE v11[24];
  void *v12;
  char v13;
  _BYTE v14[24];
  void *__p;
  char v16;
  const char *v17;
  __int16 v18;
  _BYTE v19[24];
  void *v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v2 = (llvm::yaml::Scanner *)****((_QWORD ****)this + 1);
  if (*((_BYTE *)v2 + 74))
    goto LABEL_2;
  if (*((_QWORD *)this + 10))
  {
    sub_1C639BDDC(*((llvm::yaml::KeyValueNode **)this + 10));
    if (*((_DWORD *)this + 18) == 2)
    {
LABEL_2:
      *((_BYTE *)this + 77) = 1;
      *((_QWORD *)this + 10) = 0;
      return;
    }
    v2 = (llvm::yaml::Scanner *)****((_QWORD ****)this + 1);
  }
  v3 = llvm::yaml::Scanner::peekNext(v2);
  v4 = *(_QWORD *)(v3 + 16);
  v22 = *(_OWORD *)v3;
  v23 = v4;
  if (*(char *)(v3 + 47) < 0)
  {
    sub_1C47EBC30(&v24, *(void **)(v3 + 24), *(_QWORD *)(v3 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(v3 + 24);
    v25 = *(_QWORD *)(v3 + 40);
    v24 = v5;
  }
  if ((v22 & 0xFFFFFFFD) == 0x10)
  {
    v6 = sub_1C484358C(**((_QWORD **)this + 1) + 8, 88, 4);
    v7 = (llvm::yaml::Scanner ****)*((_QWORD *)this + 1);
    *(_QWORD *)v6 = &off_1E81A68E8;
    *(_QWORD *)(v6 + 8) = v7;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    *(_DWORD *)(v6 + 32) = 3;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 40) = 0u;
    v8 = *(_QWORD *)(llvm::yaml::Scanner::peekNext(***v7) + 8);
    *(_QWORD *)(v6 + 16) = v8;
    *(_QWORD *)(v6 + 24) = v8;
    *(_QWORD *)v6 = &off_1E81A6968;
    *(_QWORD *)(v6 + 72) = 0;
    *(_QWORD *)(v6 + 80) = 0;
    *((_QWORD *)this + 10) = v6;
    goto LABEL_24;
  }
  if (*((_DWORD *)this + 18))
  {
    if ((_DWORD)v22)
    {
      if ((_DWORD)v22 != 15)
      {
        if ((_DWORD)v22 == 11)
        {
          llvm::yaml::Scanner::getNext(****((llvm::yaml::Scanner *****)this + 1), (uint64_t)v14);
          if (v16 < 0)
            operator delete(__p);
          llvm::yaml::MappingNode::increment(this);
          goto LABEL_24;
        }
        v10 = "Unexpected token. Expected Key, Flow Entry, or Flow Mapping End.";
        goto LABEL_31;
      }
      llvm::yaml::Scanner::getNext(****((llvm::yaml::Scanner *****)this + 1), (uint64_t)v11);
      if (v13 < 0)
      {
        v9 = v12;
        goto LABEL_22;
      }
    }
  }
  else if ((_DWORD)v22)
  {
    if ((_DWORD)v22 != 8)
    {
      v10 = "Unexpected token. Expected Key or Block End";
LABEL_31:
      v17 = v10;
      v18 = 259;
      sub_1C639BA64(****((_QWORD ****)this + 1), (llvm::Twine *)&v17, *((char **)&v22 + 1));
      goto LABEL_23;
    }
    llvm::yaml::Scanner::getNext(****((llvm::yaml::Scanner *****)this + 1), (uint64_t)v19);
    if (v21 < 0)
    {
      v9 = v20;
LABEL_22:
      operator delete(v9);
    }
  }
LABEL_23:
  *((_BYTE *)this + 77) = 1;
  *((_QWORD *)this + 10) = 0;
LABEL_24:
  if (SHIBYTE(v25) < 0)
    operator delete((void *)v24);
}

void llvm::yaml::SequenceNode::increment(llvm::yaml::SequenceNode *this)
{
  llvm::yaml::Scanner *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  int v7;
  void *v8;
  unint64_t v9;
  void *v10;
  unint64_t v11;
  const char *v12;
  _BYTE v13[24];
  void *v14;
  char v15;
  _BYTE v16[24];
  void *v17;
  char v18;
  _BYTE v19[24];
  void *__p;
  char v21;
  const char *v22;
  __int16 v23;
  _BYTE v24[24];
  void *v25;
  char v26;
  _BYTE v27[24];
  void *v28;
  char v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;

  v2 = (llvm::yaml::Scanner *)****((_QWORD ****)this + 1);
  if (*((_BYTE *)v2 + 74))
  {
    *((_BYTE *)this + 77) = 1;
    *((_QWORD *)this + 10) = 0;
    return;
  }
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v3 + 8))(*((_QWORD *)this + 10));
    v2 = (llvm::yaml::Scanner *)****((_QWORD ****)this + 1);
  }
  v4 = llvm::yaml::Scanner::peekNext(v2);
  v5 = *(_QWORD *)(v4 + 16);
  v30 = *(_OWORD *)v4;
  v31 = v5;
  if (*(char *)(v4 + 47) < 0)
  {
    sub_1C47EBC30(&v32, *(void **)(v4 + 24), *(_QWORD *)(v4 + 32));
  }
  else
  {
    v6 = *(_OWORD *)(v4 + 24);
    v33 = *(_QWORD *)(v4 + 40);
    v32 = v6;
  }
  v7 = *((_DWORD *)this + 18);
  switch(v7)
  {
    case 2:
      if ((_DWORD)v30 == 7)
      {
        llvm::yaml::Scanner::getNext(****((llvm::yaml::Scanner *****)this + 1), (uint64_t)v19);
        if ((v21 & 0x80000000) == 0)
          goto LABEL_20;
        v8 = __p;
LABEL_19:
        operator delete(v8);
LABEL_20:
        v9 = llvm::yaml::Document::parseBlockNode(**((llvm::yaml::Scanner *****)this + 1));
        *((_QWORD *)this + 10) = v9;
        if (v9)
          break;
      }
LABEL_39:
      *((_BYTE *)this + 77) = 1;
      *((_QWORD *)this + 10) = 0;
      break;
    case 1:
      switch((int)v30)
      {
        case 0:
          goto LABEL_39;
        case 2:
        case 5:
        case 6:
          v12 = "Could not find closing ]!";
          goto LABEL_38;
        case 11:
          llvm::yaml::Scanner::getNext(****((llvm::yaml::Scanner *****)this + 1), (uint64_t)v16);
          if (v18 < 0)
            operator delete(v17);
          *((_BYTE *)this + 78) = 1;
          llvm::yaml::SequenceNode::increment(this);
          goto LABEL_40;
        case 13:
          llvm::yaml::Scanner::getNext(****((llvm::yaml::Scanner *****)this + 1), (uint64_t)v13);
          if ((v15 & 0x80000000) == 0)
            goto LABEL_39;
          v10 = v14;
          goto LABEL_34;
        default:
          if (!*((_BYTE *)this + 78))
          {
            v12 = "Expected , between entries!";
            goto LABEL_38;
          }
          v11 = llvm::yaml::Document::parseBlockNode(**((llvm::yaml::Scanner *****)this + 1));
          *((_QWORD *)this + 10) = v11;
          if (!v11)
            *((_BYTE *)this + 77) = 1;
          *((_BYTE *)this + 78) = 0;
          break;
      }
      break;
    case 0:
      if ((_DWORD)v30)
      {
        if ((_DWORD)v30 == 8)
        {
          llvm::yaml::Scanner::getNext(****((llvm::yaml::Scanner *****)this + 1), (uint64_t)v24);
          if (v26 < 0)
          {
            v10 = v25;
LABEL_34:
            operator delete(v10);
          }
        }
        else
        {
          if ((_DWORD)v30 == 7)
          {
            llvm::yaml::Scanner::getNext(****((llvm::yaml::Scanner *****)this + 1), (uint64_t)v27);
            if ((v29 & 0x80000000) == 0)
              goto LABEL_20;
            v8 = v28;
            goto LABEL_19;
          }
          v12 = "Unexpected token. Expected Block Entry or Block End.";
LABEL_38:
          v22 = v12;
          v23 = 259;
          sub_1C639BA64(****((_QWORD ****)this + 1), (llvm::Twine *)&v22, *((char **)&v30 + 1));
        }
      }
      goto LABEL_39;
  }
LABEL_40:
  if (SHIBYTE(v33) < 0)
    operator delete((void *)v32);
}

llvm::yaml::Document *llvm::yaml::Document::Document(llvm::yaml::Document *this, llvm::yaml::Stream *a2)
{
  char *v3;
  _OWORD *v4;
  _OWORD *v5;
  _BYTE v7[24];
  void *__p;
  char v9;
  const char *v10;
  uint64_t v11;
  const char **v12;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = (char *)this + 40;
  *((_QWORD *)this + 4) = 0x400000000;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = (char *)this + 88;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 12) = 1;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 14) = (char *)this + 120;
  v3 = (char *)this + 112;
  v10 = "!";
  v11 = 1;
  v12 = &v10;
  v4 = sub_1C639BF20((uint64_t)this + 112, (uint64_t)&v10, (_OWORD **)&v12);
  *((_QWORD *)v4 + 6) = "!";
  *((_QWORD *)v4 + 7) = 1;
  v10 = "!!";
  v11 = 2;
  v12 = &v10;
  v5 = sub_1C639BF20((uint64_t)v3, (uint64_t)&v10, (_OWORD **)&v12);
  *((_QWORD *)v5 + 6) = "tag:yaml.org,2002:";
  *((_QWORD *)v5 + 7) = 18;
  if (llvm::yaml::Document::parseDirectives((llvm::yaml::Scanner ***)this))
    llvm::yaml::Document::expectToken((llvm::yaml::Scanner ***)this, 5);
  if (*(_DWORD *)llvm::yaml::Scanner::peekNext(**(llvm::yaml::Scanner ***)this) == 5)
  {
    llvm::yaml::Scanner::getNext(**(llvm::yaml::Scanner ***)this, (uint64_t)v7);
    if (v9 < 0)
      operator delete(__p);
  }
  return this;
}

uint64_t llvm::yaml::Document::parseDirectives(llvm::yaml::Scanner ***this)
{
  char v2;
  uint64_t v3;
  __int128 v4;
  char v5;
  __int128 v7;
  __int128 __p;
  uint64_t v9;

  v2 = 0;
  do
  {
    while (1)
    {
      v3 = llvm::yaml::Scanner::peekNext(**this);
      v7 = *(_OWORD *)v3;
      if (*(char *)(v3 + 47) < 0)
      {
        sub_1C47EBC30(&__p, *(void **)(v3 + 24), *(_QWORD *)(v3 + 32));
      }
      else
      {
        v4 = *(_OWORD *)(v3 + 24);
        v9 = *(_QWORD *)(v3 + 40);
        __p = v4;
      }
      if ((_DWORD)v7 == 3)
      {
        llvm::yaml::Document::parseYAMLDirective(this);
        goto LABEL_9;
      }
      if ((_DWORD)v7 == 4)
      {
        llvm::yaml::Document::parseTAGDirective(this);
LABEL_9:
        v2 = 1;
        v5 = 1;
        goto LABEL_11;
      }
      v5 = 0;
LABEL_11:
      if (SHIBYTE(v9) < 0)
        break;
      if ((v5 & 1) == 0)
        return v2 & 1;
    }
    operator delete((void *)__p);
  }
  while ((v5 & 1) != 0);
  return v2 & 1;
}

BOOL llvm::yaml::Document::expectToken(llvm::yaml::Scanner ***this, int a2)
{
  int v4;
  const char *v6;
  __int16 v7;
  int v8;
  char *v9;
  void *__p;
  char v11;

  llvm::yaml::Scanner::getNext(**this, (uint64_t)&v8);
  v4 = v8;
  if (v8 != a2)
  {
    v6 = "Unexpected token";
    v7 = 259;
    sub_1C639BA64((uint64_t)**this, (llvm::Twine *)&v6, v9);
  }
  if (v11 < 0)
    operator delete(__p);
  return v4 == a2;
}

void llvm::yaml::Document::parseTAGDirective(llvm::yaml::Scanner ***this)
{
  char *v1;
  unint64_t first_of;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t first_not_of;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  _OWORD *v18;
  _OWORD *v19[2];
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  char v23[8];
  __int128 v24;
  void *__p;
  char v26;

  v1 = (char *)(this + 14);
  llvm::yaml::Scanner::getNext(**this, (uint64_t)v23);
  v22 = v24;
  first_of = llvm::StringRef::find_first_of(&v22, " \t", 2, 0);
  if (*((_QWORD *)&v22 + 1) >= first_of)
    v3 = first_of;
  else
    v3 = *((_QWORD *)&v22 + 1);
  v4 = v22 + v3;
  v5 = *((_QWORD *)&v22 + 1) - v3;
  v20 = v22 + v3;
  v21 = *((_QWORD *)&v22 + 1) - v3;
  first_not_of = llvm::StringRef::find_first_not_of(&v20, " \t", 2, 0);
  if (first_not_of >= v5)
    v7 = v5;
  else
    v7 = first_not_of;
  v8 = v4 + v7;
  v9 = v5 - v7;
  *(_QWORD *)&v22 = v8;
  *((_QWORD *)&v22 + 1) = v9;
  v10 = llvm::StringRef::find_first_of(&v22, " \t", 2, 0);
  if (v9 >= v10)
    v11 = v10;
  else
    v11 = v9;
  v20 = v8;
  v21 = v11;
  v12 = (_OWORD *)(v8 + v11);
  v13 = (_OWORD *)(v9 - v11);
  v19[0] = v12;
  v19[1] = v13;
  v14 = llvm::StringRef::find_first_not_of(v19, " \t", 2, 0);
  if (v14 >= (unint64_t)v13)
    v15 = (char *)v13;
  else
    v15 = (char *)v14;
  v16 = &v15[(_QWORD)v12];
  v17 = (char *)((char *)v13 - v15);
  v19[0] = &v20;
  v18 = sub_1C639BF20((uint64_t)v1, (uint64_t)&v20, v19);
  *((_QWORD *)v18 + 6) = v16;
  *((_QWORD *)v18 + 7) = v17;
  if (v26 < 0)
    operator delete(__p);
}

void llvm::yaml::Document::parseYAMLDirective(llvm::yaml::Scanner ***this)
{
  uint64_t v1;
  void *__p;
  char v3;

  llvm::yaml::Scanner::getNext(**this, (uint64_t)&v1);
  if (v3 < 0)
    operator delete(__p);
}

void sub_1C5E6D100(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t *v4;

  v1 = (uint64_t *)a1[1];
  if (v1 != a1)
  {
    do
    {
      v3 = *v1;
      v4 = (uint64_t *)v1[1];
      *v4 = *v1;
      *(_QWORD *)(v3 + 8) = v4;
      *v1 = 0;
      v1[1] = 0;
      if (*((char *)v1 + 63) < 0)
        operator delete((void *)v1[5]);
      v1 = v4;
    }
    while (v4 != a1);
  }
}

unint64_t sub_1C5E6D154(uint64_t a1, __int128 *a2)
{
  unint64_t v3;
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  v3 = sub_1C484358C(a1, 64, 3);
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  v4 = *a2;
  *(_QWORD *)(v3 + 32) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(v3 + 16) = v4;
  v5 = (_BYTE *)(v3 + 40);
  if (*((char *)a2 + 47) < 0)
  {
    sub_1C47EBC30(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v3 + 56) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v6;
  }
  return v3;
}

_QWORD *llvm::yaml::IO::IO(_QWORD *this, void *a2)
{
  *this = off_1E81A69E8;
  this[1] = a2;
  return this;
}

uint64_t llvm::yaml::IO::setContext(uint64_t this, void *a2)
{
  *(_QWORD *)(this + 8) = a2;
  return this;
}

uint64_t llvm::yaml::Input::Input(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t *v10;
  __int128 v11;
  const std::error_category *v12;
  _OWORD v14[2];

  *(_QWORD *)a1 = &off_1E81A6B00;
  *(_QWORD *)(a1 + 8) = a3;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  v9 = a1 + 16;
  v10 = (uint64_t *)operator new();
  v11 = a2[1];
  v14[0] = *a2;
  v14[1] = v11;
  *(_QWORD *)(a1 + 88) = llvm::yaml::Stream::Stream(v10, v14, v9, 0, a1 + 104);
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  v12 = std::system_category();
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 112) = v12;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 152;
  *(_QWORD *)(a1 + 144) = 0x400000000;
  *(_QWORD *)(a1 + 184) = a1 + 200;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 208) = 1;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 240;
  *(_QWORD *)(a1 + 232) = 0x600000000;
  *(_DWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_WORD *)(a1 + 304) = 0;
  if (a4)
  {
    *(_QWORD *)(a1 + 64) = a4;
    *(_QWORD *)(a1 + 72) = a5;
  }
  *(_QWORD *)(a1 + 216) = llvm::yaml::Stream::begin(*(llvm::yaml::Stream **)(a1 + 88));
  return a1;
}

void llvm::yaml::Input::createHNodes(llvm ****this@<X0>, llvm::yaml::Node *a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  const char *Value;
  size_t v8;
  size_t v9;
  void *v10;
  void *v11;
  size_t v12;
  size_t v13;
  const void *v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  llvm::yaml::Node *v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  llvm::yaml::KeyValueNode *v37;
  unint64_t Key;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  llvm::yaml::Node *v42;
  const char *v43;
  size_t v44;
  size_t v45;
  void *v46;
  void *v47;
  size_t v48;
  uint64_t v49;
  size_t v50;
  size_t v51;
  size_t **v52;
  size_t *v53;
  size_t v54;
  const std::error_category *v55;
  const std::error_category *v56;
  const std::error_category *v57;
  _QWORD *v58;
  uint64_t v59[4];
  __int16 v60;
  void *v61;
  __int128 v62;
  _QWORD v63[18];

  v63[16] = *MEMORY[0x1E0C80C00];
  v61 = v63;
  v62 = xmmword_1C85F20B0;
  v6 = *((_DWORD *)a2 + 8);
  if (a2 && v6 == 1)
  {
    Value = llvm::yaml::ScalarNode::getValue((uint64_t)a2, (uint64_t *)&v61);
    v9 = v62;
    if ((_QWORD)v62)
    {
      v10 = v61;
      v11 = (void *)sub_1C484358C((uint64_t)(this + 15), v62, 0);
      memmove(v11, v10, v9);
      v12 = v9;
    }
    else
    {
      v11 = (void *)Value;
      v12 = v8;
    }
    v16 = (_QWORD *)operator new();
    *v16 = &off_1E81A6D80;
    v16[1] = a2;
    v16[2] = v11;
    v16[3] = v12;
  }
  else if (a2 && v6 == 2)
  {
    v13 = *((_QWORD *)a2 + 10);
    if (v13)
    {
      v14 = (const void *)*((_QWORD *)a2 + 9);
      v15 = (void *)sub_1C484358C((uint64_t)(this + 15), *((_QWORD *)a2 + 10), 0);
      memmove(v15, v14, v13);
    }
    else
    {
      v15 = 0;
    }
    v16 = (_QWORD *)operator new();
    *v16 = &off_1E81A6D80;
    v16[1] = a2;
    v16[2] = v15;
    v16[3] = v13;
  }
  else if (a2 && v6 == 5)
  {
    v16 = (_QWORD *)operator new();
    *v16 = &off_1E81A6DD0;
    v16[1] = a2;
    v16[2] = 0;
    v17 = v16 + 2;
    v16[3] = 0;
    v16[4] = 0;
    *((_BYTE *)a2 + 76) = 0;
    llvm::yaml::SequenceNode::increment(a2);
    v18 = (llvm::yaml::Node *)*((_QWORD *)a2 + 10);
    if (v18)
    {
      v58 = a3;
      v19 = 0;
      while (1)
      {
        llvm::yaml::Input::createHNodes(v59, (llvm::yaml::Input *)this, v18);
        if (*((_DWORD *)this + 26))
          break;
        v20 = v16[4];
        if ((unint64_t)v19 >= v20)
        {
          v23 = (_QWORD *)*v17;
          v24 = ((uint64_t)v19 - *v17) >> 3;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 61)
            abort();
          v26 = v20 - (_QWORD)v23;
          if (v26 >> 2 > v25)
            v25 = v26 >> 2;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
            v27 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          if (v27)
          {
            if (v27 >> 61)
              sub_1C4764EE4();
            v28 = (char *)operator new(8 * v27);
          }
          else
          {
            v28 = 0;
          }
          v29 = (uint64_t *)&v28[8 * v24];
          v30 = &v28[8 * v27];
          v31 = v59[0];
          v59[0] = 0;
          *v29 = v31;
          v22 = v29 + 1;
          if (v19 == v23)
          {
            v16[2] = v29;
            v16[3] = v22;
            v16[4] = v30;
          }
          else
          {
            do
            {
              v32 = *--v19;
              *v19 = 0;
              *--v29 = v32;
            }
            while (v19 != v23);
            v19 = (_QWORD *)v16[2];
            v33 = (_QWORD *)v16[3];
            v16[2] = v29;
            v16[3] = v22;
            v16[4] = v30;
            while (v33 != v19)
            {
              v35 = *--v33;
              v34 = v35;
              *v33 = 0;
              if (v35)
                (*(void (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
            }
          }
          if (v19)
            operator delete(v19);
          v36 = v59[0];
          v16[3] = v22;
          if (v36)
            (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
        }
        else
        {
          *v19 = v59[0];
          v21 = v19 + 1;
          v16[3] = v21;
          v22 = v21;
        }
        llvm::yaml::SequenceNode::increment(a2);
        v18 = (llvm::yaml::Node *)*((_QWORD *)a2 + 10);
        v19 = v22;
        if (!v18)
          goto LABEL_67;
      }
      a3 = v58;
      if (v59[0])
        (*(void (**)(uint64_t))(*(_QWORD *)v59[0] + 16))(v59[0]);
    }
  }
  else if (a2 && v6 == 4)
  {
    v58 = a3;
    v16 = (_QWORD *)operator new();
    *v16 = &off_1E81A6DA8;
    v16[1] = a2;
    v16[2] = 0;
    v16[3] = 0;
    v16[4] = 0x2000000000;
    v16[6] = v16 + 8;
    v16[7] = 0x600000000;
    *((_BYTE *)a2 + 76) = 0;
    llvm::yaml::MappingNode::increment(a2);
    v37 = (llvm::yaml::KeyValueNode *)*((_QWORD *)a2 + 10);
    if (!v37)
      goto LABEL_67;
    while (1)
    {
      Key = llvm::yaml::KeyValueNode::getKey(v37);
      v39 = Key;
      if (Key)
      {
        if (*(_DWORD *)(Key + 32) == 1)
          v40 = Key;
        else
          v40 = 0;
      }
      else
      {
        v40 = 0;
      }
      v41 = llvm::yaml::KeyValueNode::getValue(v37);
      v42 = (llvm::yaml::Node *)v41;
      if (!v40 || !v41)
      {
        if (v40)
        {
          if (v41)
            goto LABEL_67;
        }
        else
        {
          v59[0] = (uint64_t)"Map key must be a scalar";
          v60 = 259;
          llvm::yaml::Stream::printError(this[11], v39, (llvm::Twine *)v59, 0);
          v57 = std::generic_category();
          this[13] = (llvm ***)22;
          this[14] = (llvm ***)v57;
          if (v42)
            goto LABEL_67;
        }
        v59[0] = (uint64_t)"Map value must not be empty";
        v60 = 259;
        llvm::yaml::Stream::printError(this[11], v39, (llvm::Twine *)v59, 0);
        v56 = std::generic_category();
        this[13] = (llvm ***)22;
        this[14] = (llvm ***)v56;
        goto LABEL_67;
      }
      *(_QWORD *)&v62 = 0;
      v43 = llvm::yaml::ScalarNode::getValue(v40, (uint64_t *)&v61);
      v45 = v62;
      if ((_QWORD)v62)
      {
        v46 = v61;
        v47 = (void *)sub_1C484358C((uint64_t)(this + 15), v62, 0);
        memmove(v47, v46, v45);
        v48 = v45;
      }
      else
      {
        v47 = (void *)v43;
        v48 = v44;
      }
      llvm::yaml::Input::createHNodes(v59, (llvm::yaml::Input *)this, v42);
      v49 = v59[0];
      if (*((_DWORD *)this + 26))
        break;
      v51 = *(_QWORD *)(v39 + 16);
      v50 = *(_QWORD *)(v39 + 24);
      v52 = sub_1C639CE80((uint64_t)(v16 + 2), (unsigned __int8 *)v47, v48);
      v53 = *v52;
      v54 = (*v52)[1];
      v53[1] = v49;
      if (v54)
        (*(void (**)(size_t))(*(_QWORD *)v54 + 16))(v54);
      v53[2] = v51;
      v53[3] = v50;
      llvm::yaml::MappingNode::increment(a2);
      v37 = (llvm::yaml::KeyValueNode *)*((_QWORD *)a2 + 10);
      if (!v37)
        goto LABEL_67;
    }
    if (v59[0])
      (*(void (**)(uint64_t))(*(_QWORD *)v59[0] + 16))(v59[0]);
LABEL_67:
    a3 = v58;
  }
  else if (v6)
  {
    v59[0] = (uint64_t)"unknown node kind";
    v60 = 259;
    llvm::yaml::Stream::printError(this[11], (uint64_t)a2, (llvm::Twine *)v59, 0);
    v55 = std::generic_category();
    v16 = 0;
    this[13] = (llvm ***)22;
    this[14] = (llvm ***)v55;
  }
  else
  {
    v16 = (_QWORD *)operator new();
    *v16 = &off_1E81A6D58;
    v16[1] = a2;
  }
  *a3 = v16;
  if (v61 != v63)
    free(v61);
}

BOOL llvm::yaml::Input::mapTag(uint64_t a1, const void *a2, size_t a3, _BOOL8 a4)
{
  uint64_t v4;
  int v8;
  void *v9;
  void **v10;
  void *__p[2];
  char v13;

  v4 = *(_QWORD *)(a1 + 296);
  if (!v4)
    return 0;
  llvm::yaml::Node::getVerbatimTag(*(std::string **)(v4 + 8), (uint64_t)__p);
  v8 = v13;
  v9 = (void *)(v13 & 0x7F);
  if (v13 < 0)
    v9 = __p[1];
  if (!v9)
    goto LABEL_10;
  if ((void *)a3 == v9)
  {
    if (v13 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    a4 = memcmp(a2, v10, a3) == 0;
LABEL_10:
    if (v8 < 0)
      goto LABEL_14;
    return a4;
  }
  a4 = 0;
  if (v13 < 0)
LABEL_14:
    operator delete(__p[0]);
  return a4;
}

void llvm::yaml::Input::beginMapping(llvm::yaml::Input *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!*((_DWORD *)this + 26))
  {
    v1 = *((_QWORD *)this + 37);
    if (v1)
    {
      if (*(_DWORD *)(*(_QWORD *)(v1 + 8) + 32) == 4)
      {
        v2 = *(unsigned int *)(v1 + 56);
        if ((_DWORD)v2)
        {
          v3 = *(_QWORD *)(v1 + 48);
          v4 = 24 * v2;
          do
          {
            if (*(char *)(v3 + v4 - 1) < 0)
              operator delete(*(void **)(v3 + v4 - 24));
            v4 -= 24;
          }
          while (v4);
        }
        *(_DWORD *)(v1 + 56) = 0;
      }
    }
  }
}

void llvm::yaml::Input::keys(llvm::yaml::Input *this@<X0>, char **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t **i;
  uint64_t **v11;
  char *v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t *v27;
  BOOL v28;
  const std::error_category *v30;
  const char *v31;
  __int16 v32;

  v3 = *((_QWORD *)this + 37);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(_DWORD *)(v4 + 32);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v3)
    v6 = v5 == 4;
  else
    v6 = 0;
  if (v6)
  {
    v7 = *(uint64_t ***)(v3 + 16);
    v8 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v8)
    {
      for (i = v7; !*i || *i + 1 == 0; ++i)
        ;
    }
    else
    {
      i = v7;
    }
    v11 = &v7[v8];
    if (i != v11)
    {
      v12 = 0;
      v13 = *i;
      do
      {
        v16 = *v13;
        v14 = v13 + 4;
        v15 = v16;
        v17 = (unint64_t)a2[2];
        if ((unint64_t)v12 >= v17)
        {
          v18 = *a2;
          v19 = (v12 - *a2) >> 4;
          v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 60)
            abort();
          v21 = v17 - (_QWORD)v18;
          if (v21 >> 3 > v20)
            v20 = v21 >> 3;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
            v22 = 0xFFFFFFFFFFFFFFFLL;
          else
            v22 = v20;
          if (v22)
          {
            if (v22 >> 60)
              sub_1C4764EE4();
            v23 = (char *)operator new(16 * v22);
          }
          else
          {
            v23 = 0;
          }
          v24 = &v23[16 * v19];
          *(_QWORD *)v24 = v14;
          *((_QWORD *)v24 + 1) = v15;
          if (v12 == v18)
          {
            v26 = v12;
            v25 = &v23[16 * v19];
          }
          else
          {
            v25 = &v23[16 * v19];
            do
            {
              *((_OWORD *)v25 - 1) = *((_OWORD *)v12 - 1);
              v25 -= 16;
              v12 -= 16;
            }
            while (v12 != v18);
            v26 = *a2;
          }
          v12 = v24 + 16;
          *a2 = v25;
          a2[1] = v24 + 16;
          a2[2] = &v23[16 * v22];
          if (v26)
            operator delete(v26);
        }
        else
        {
          *(_QWORD *)v12 = v14;
          *((_QWORD *)v12 + 1) = v15;
          v12 += 16;
        }
        a2[1] = v12;
        do
        {
          v27 = i[1];
          ++i;
          v13 = v27;
          if (v27)
            v28 = v13 + 1 == 0;
          else
            v28 = 1;
        }
        while (v28);
      }
      while (i != v11);
    }
  }
  else
  {
    v31 = "not a mapping";
    v32 = 259;
    llvm::yaml::Stream::printError(*((llvm ****)this + 11), v4, (llvm::Twine *)&v31, 0);
    v30 = std::generic_category();
    *((_QWORD *)this + 13) = 22;
    *((_QWORD *)this + 14) = v30;
  }
}

const std::error_category *llvm::yaml::Input::setError(llvm ****this, llvm::yaml::Input::HNode *a2, const llvm::Twine *a3)
{
  const std::error_category *result;

  llvm::yaml::Stream::printError(this[11], *((_QWORD *)a2 + 1), a3, 0);
  result = std::generic_category();
  this[13] = (llvm ***)22;
  this[14] = (llvm ***)result;
  return result;
}

uint64_t llvm::yaml::Input::preflightKey(llvm::yaml::Input *this, char *__s, int a3, BOOL a4, BOOL *a5, void **a6)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v12;
  int v13;
  BOOL v14;
  const std::error_category *v15;
  size_t v17;
  void *v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __int128 v24;
  size_t v25;
  size_t v26;
  uint64_t v27;
  int v28;
  const char *v29;
  char v30;
  _QWORD v31[4];
  __int16 v32;
  void *__dst[2];
  const char *v34;
  __int16 v35;

  result = 0;
  *a5 = 0;
  if (*((_DWORD *)this + 26))
    return result;
  v9 = *((_QWORD *)this + 37);
  if (!v9)
  {
    if (a3)
    {
LABEL_11:
      v15 = std::generic_category();
      result = 0;
      *((_QWORD *)this + 13) = 22;
      *((_QWORD *)this + 14) = v15;
      return result;
    }
    return 0;
  }
  v12 = *(_QWORD *)(v9 + 8);
  v13 = *(_DWORD *)(v12 + 32);
  if (v13 != 4)
  {
    if (v13)
      v14 = 0;
    else
      v14 = a3 == 0;
    if (!v14)
    {
      __dst[0] = "not a mapping";
      v35 = 259;
LABEL_18:
      llvm::yaml::Stream::printError(*((llvm ****)this + 11), v12, (llvm::Twine *)__dst, 0);
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  v17 = strlen(__s);
  if (v17 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v18 = (void *)v17;
  if (v17 >= 0x17)
  {
    v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v20 = v17 | 7;
    v21 = v20 + 1;
    v19 = (void **)operator new(v20 + 1);
    __dst[1] = v18;
    v34 = (const char *)(v21 | 0x8000000000000000);
    __dst[0] = v19;
  }
  else
  {
    HIBYTE(v34) = v17;
    v19 = __dst;
    if (!v17)
      goto LABEL_23;
  }
  memcpy(v19, __s, (size_t)v18);
LABEL_23:
  *((_BYTE *)v18 + (_QWORD)v19) = 0;
  v22 = sub_1C4E01890(v9 + 48, (unint64_t)__dst, 1);
  v23 = *(_QWORD *)(v9 + 48) + 24 * *(unsigned int *)(v9 + 56);
  v24 = *(_OWORD *)v22;
  *(_QWORD *)(v23 + 16) = *(_QWORD *)(v22 + 16);
  *(_OWORD *)v23 = v24;
  *(_QWORD *)(v22 + 8) = 0;
  *(_QWORD *)(v22 + 16) = 0;
  *(_QWORD *)v22 = 0;
  ++*(_DWORD *)(v9 + 56);
  if (SHIBYTE(v34) < 0)
    operator delete(__dst[0]);
  if (__s)
    v25 = strlen(__s);
  else
    v25 = 0;
  v26 = (*sub_1C639CE80(v9 + 16, (unsigned __int8 *)__s, v25))[1];
  if (!v26)
  {
    if (a3)
    {
      v27 = *((_QWORD *)this + 37);
      v28 = *__s;
      v29 = "missing required key '";
      if (*__s)
      {
        v31[0] = "missing required key '";
        v31[2] = __s;
        v32 = 771;
        v30 = 2;
      }
      else
      {
        v31[0] = "missing required key '";
        v32 = 259;
        v30 = 3;
      }
      if (v28)
        v29 = (const char *)v31;
      __dst[0] = (void *)v29;
      v34 = "'";
      LOBYTE(v35) = v30;
      HIBYTE(v35) = 3;
      v12 = *(_QWORD *)(v27 + 8);
      goto LABEL_18;
    }
LABEL_9:
    result = 0;
    *a5 = 1;
    return result;
  }
  *a6 = (void *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = v26;
  return 1;
}

uint64_t llvm::yaml::Input::endMapping(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  size_t **i;
  size_t *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  BOOL v12;
  uint64_t v13;
  size_t *v14;
  BOOL v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  size_t *v20;
  size_t v21;
  __int16 v22;
  _QWORD v23[2];
  const char *v24;
  __int16 v25;

  v17 = this;
  if (!*(_DWORD *)(this + 104))
  {
    v1 = *(_QWORD *)(this + 296);
    if (v1)
    {
      if (*(_DWORD *)(*(_QWORD *)(v1 + 8) + 32) == 4)
      {
        v2 = *(unsigned int *)(v1 + 24);
        if ((_DWORD)v2)
        {
          for (i = *(size_t ***)(v1 + 16); !*i || *i + 1 == 0; ++i)
            ;
        }
        else
        {
          i = *(size_t ***)(v1 + 16);
        }
        v18 = *(_QWORD *)(v1 + 16) + 8 * v2;
        if (i != (size_t **)v18)
        {
          v5 = *i;
          do
          {
            v6 = *v5;
            v7 = *(_QWORD *)(v1 + 48);
            v8 = *(unsigned int *)(v1 + 56);
            if ((_DWORD)v8)
            {
              v9 = 24 * v8;
              v10 = *(_QWORD *)(v1 + 48);
              while (1)
              {
                v11 = *(_BYTE *)(v10 + 23);
                v12 = v11 < 0;
                if (v11 >= 0)
                  this = v10;
                else
                  this = *(_QWORD *)v10;
                v13 = v11 & 0x7F;
                if (v12)
                  v13 = *(_QWORD *)(v10 + 8);
                if (v13 == v6)
                {
                  if (!v6)
                    break;
                  this = memcmp((const void *)this, v5 + 4, v6);
                  if (!(_DWORD)this)
                    break;
                }
                v10 += 24;
                v9 -= 24;
                if (!v9)
                {
                  v10 = v7 + 24 * v8;
                  break;
                }
              }
            }
            else
            {
              v10 = *(_QWORD *)(v1 + 48);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v10 - v7) >> 3) == v8)
            {
              v16 = (char **)(v5 + 2);
              if (!*(_BYTE *)(v17 + 305))
              {
                v19[0] = "unknown key '";
                v20 = v5 + 4;
                v21 = v6;
                v22 = 1283;
                v23[0] = v19;
                v24 = "'";
                v25 = 770;
                llvm::yaml::Stream::printError(*(llvm ****)(v17 + 88), v16, (llvm::Twine *)v23, 0);
                this = (uint64_t)std::generic_category();
                *(_QWORD *)(v17 + 104) = 22;
                *(_QWORD *)(v17 + 112) = this;
                return this;
              }
              v19[0] = "unknown key '";
              v20 = v5 + 4;
              v21 = v6;
              v22 = 1283;
              v23[0] = v19;
              v24 = "'";
              v25 = 770;
              this = llvm::yaml::Stream::printError(*(llvm ****)(v17 + 88), v16, (llvm::Twine *)v23, 1);
            }
            do
            {
              v14 = i[1];
              ++i;
              v5 = v14;
              if (v14)
                v15 = v5 + 1 == 0;
              else
                v15 = 1;
            }
            while (v15);
          }
          while (i != (size_t **)v18);
        }
      }
    }
  }
  return this;
}

const std::error_category *llvm::yaml::Input::setError(uint64_t a1, char **a2, llvm::Twine *a3)
{
  const std::error_category *result;

  llvm::yaml::Stream::printError(*(llvm ****)(a1 + 88), a2, a3, 0);
  result = std::generic_category();
  *(_QWORD *)(a1 + 104) = 22;
  *(_QWORD *)(a1 + 112) = result;
  return result;
}

uint64_t llvm::yaml::Input::reportWarning(uint64_t a1, char **a2, llvm::Twine *a3)
{
  return llvm::yaml::Stream::printError(*(llvm ****)(a1 + 88), a2, a3, 1);
}

uint64_t llvm::yaml::Input::beginSequence(llvm::yaml::Input *this)
{
  _QWORD *v1;
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  uint64_t result;
  BOOL v7;
  const std::error_category *v8;
  const char *v9;
  __int16 v10;

  v1 = (_QWORD *)*((_QWORD *)this + 37);
  v2 = v1[1];
  v3 = *(_DWORD *)(v2 + 32);
  if (v1)
    v4 = v3 == 5;
  else
    v4 = 0;
  if (v4)
    return (v1[3] - v1[2]) >> 3;
  if (!v3)
    return 0;
  if (v1)
    v7 = v3 > 2;
  else
    v7 = 1;
  if (!v7)
  {
    if (sub_1C61CFD10((_BYTE *)v1[2], v1[3]))
      return 0;
    v2 = *(_QWORD *)(*((_QWORD *)this + 37) + 8);
  }
  v9 = "not a sequence";
  v10 = 259;
  llvm::yaml::Stream::printError(*((llvm ****)this + 11), v2, (llvm::Twine *)&v9, 0);
  v8 = std::generic_category();
  result = 0;
  *((_QWORD *)this + 13) = 22;
  *((_QWORD *)this + 14) = v8;
  return result;
}

uint64_t llvm::yaml::Input::preflightElement(llvm::yaml::Input *this, unsigned int a2, void **a3)
{
  _QWORD *v3;

  if (*((_DWORD *)this + 26))
    return 0;
  v3 = (_QWORD *)*((_QWORD *)this + 37);
  if (!v3 || *(_DWORD *)(v3[1] + 32) != 5)
    return 0;
  *a3 = v3;
  *((_QWORD *)this + 37) = *(_QWORD *)(v3[2] + 8 * a2);
  return 1;
}

uint64_t llvm::yaml::Input::preflightFlowElement(llvm::yaml::Input *this, unsigned int a2, void **a3)
{
  _QWORD *v3;

  if (*((_DWORD *)this + 26))
    return 0;
  v3 = (_QWORD *)*((_QWORD *)this + 37);
  if (!v3 || *(_DWORD *)(v3[1] + 32) != 5)
    return 0;
  *a3 = v3;
  *((_QWORD *)this + 37) = *(_QWORD *)(v3[2] + 8 * a2);
  return 1;
}

uint64_t llvm::yaml::Input::matchEnumScalar(llvm::yaml::Input *this, const char *__s)
{
  _QWORD *v3;
  size_t v6;
  const void *v7;
  uint64_t result;

  if (*((_BYTE *)this + 304))
    return 0;
  v3 = (_QWORD *)*((_QWORD *)this + 37);
  if (!v3 || (*(_DWORD *)(v3[1] + 32) - 3) < 0xFFFFFFFE)
    return 0;
  v6 = v3[3];
  if (__s)
  {
    v7 = (const void *)v3[2];
    if (v6 == strlen(__s) && (!v6 || !memcmp(v7, __s, v6)))
      goto LABEL_11;
  }
  else if (!v6)
  {
LABEL_11:
    result = 1;
    *((_BYTE *)this + 304) = 1;
    return result;
  }
  return 0;
}

uint64_t llvm::yaml::Input::beginBitSetScalar(llvm::yaml::Input *this, BOOL *a2)
{
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  const std::error_category *v14;
  const char *v15;
  __int16 v16;

  *((_DWORD *)this + 72) = 0;
  *((_DWORD *)this + 58) = 0;
  v4 = (_QWORD *)*((_QWORD *)this + 37);
  v5 = v4[1];
  if (v4)
    v6 = *(_DWORD *)(v5 + 32) == 5;
  else
    v6 = 0;
  if (v6)
  {
    v7 = (_QWORD *)((char *)this + 224);
    v8 = (v4[3] - v4[2]) >> 3;
    *((_DWORD *)this + 72) = v8;
    if ((v8 + 63) < 0x40)
    {
      v12 = 0;
    }
    else
    {
      v9 = (v8 + 63) >> 6;
      if (v9 > *((_DWORD *)this + 59))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 224, (uint64_t)this + 240, v9, 8);
        v10 = *((unsigned int *)this + 58);
        LODWORD(v8) = *((_DWORD *)this + 72);
        v11 = *((_DWORD *)this + 58);
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
      bzero((void *)(*((_QWORD *)this + 28) + 8 * v10), 8 * v9);
      v12 = (v11 + v9);
      *((_DWORD *)this + 58) = v12;
    }
    if ((v8 & 0x3F) != 0)
      *(_QWORD *)(*v7 + 8 * v12 - 8) &= ~(-1 << (v8 & 0x3F));
  }
  else
  {
    v15 = "expected sequence of bit values";
    v16 = 259;
    llvm::yaml::Stream::printError(*((llvm ****)this + 11), v5, (llvm::Twine *)&v15, 0);
    v14 = std::generic_category();
    *((_QWORD *)this + 13) = 22;
    *((_QWORD *)this + 14) = v14;
  }
  *a2 = 1;
  return 1;
}

uint64_t llvm::yaml::Input::bitSetMatch(llvm::yaml::Input *this, const char *__s)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t *v9;
  unsigned int i;
  uint64_t v11;
  BOOL v12;
  size_t v13;
  const void *v14;
  uint64_t v15;
  const std::error_category *v16;
  const std::error_category *v17;
  _QWORD v18[4];
  __int16 v19;

  if (*((_DWORD *)this + 26))
    return 0;
  v5 = (_QWORD *)*((_QWORD *)this + 37);
  v6 = v5[1];
  if (v5)
    v7 = *(_DWORD *)(v6 + 32) == 5;
  else
    v7 = 0;
  if (!v7)
  {
    v18[0] = "expected sequence of bit values";
    v19 = 259;
    llvm::yaml::Stream::printError(*((llvm ****)this + 11), v6, (llvm::Twine *)v18, 0);
    v17 = std::generic_category();
    result = 0;
    *((_QWORD *)this + 13) = 22;
    *((_QWORD *)this + 14) = v17;
    return result;
  }
  v8 = (uint64_t *)v5[2];
  v9 = (uint64_t *)v5[3];
  if (v8 == v9)
    return 0;
  for (i = 0; ; ++i)
  {
    v11 = *v8;
    if (*v8)
      v12 = (*(_DWORD *)(*(_QWORD *)(*v8 + 8) + 32) - 3) >= 0xFFFFFFFE;
    else
      v12 = 0;
    if (!v12)
    {
      v15 = *((_QWORD *)this + 37);
      v18[0] = "unexpected scalar in sequence of bit values";
      v19 = 259;
      llvm::yaml::Stream::printError(*((llvm ****)this + 11), *(_QWORD *)(v15 + 8), (llvm::Twine *)v18, 0);
      v16 = std::generic_category();
      *((_QWORD *)this + 13) = 22;
      *((_QWORD *)this + 14) = v16;
      goto LABEL_21;
    }
    v13 = *(_QWORD *)(v11 + 24);
    if (__s)
      break;
    if (!v13)
      goto LABEL_23;
LABEL_21:
    if (++v8 == v9)
      return 0;
  }
  v14 = *(const void **)(v11 + 16);
  if (v13 != strlen(__s) || v13 && memcmp(v14, __s, v13))
    goto LABEL_21;
LABEL_23:
  result = 1;
  *(_QWORD *)(*((_QWORD *)this + 28) + 8 * (i >> 6)) |= 1 << i;
  return result;
}

const std::error_category *llvm::yaml::Input::scalarString(const std::error_category *result, _OWORD *a2)
{
  std::error_category_vtbl *v3;
  uint64_t v4;
  BOOL v5;
  const std::error_category *v6;
  const char *v7;
  __int16 v8;

  v3 = result[37].__vftable;
  v4 = (uint64_t)v3->~error_category_0;
  if (v3)
    v5 = (*(_DWORD *)(v4 + 32) - 3) >= 0xFFFFFFFE;
  else
    v5 = 0;
  if (v5)
  {
    *a2 = *(_OWORD *)&v3->name;
  }
  else
  {
    v6 = result;
    v7 = "unexpected scalar";
    v8 = 259;
    llvm::yaml::Stream::printError((llvm ***)result[11].__vftable, v4, (llvm::Twine *)&v7, 0);
    result = std::generic_category();
    v6[13].__vftable = (std::error_category_vtbl *)22;
    v6[14].__vftable = (std::error_category_vtbl *)result;
  }
  return result;
}

double llvm::yaml::Input::scalarTag(uint64_t a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;

  llvm::yaml::Node::getVerbatimTag(*(std::string **)(*(_QWORD *)(a1 + 296) + 8), (uint64_t)&v4);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

const std::error_category *llvm::yaml::Input::setError(llvm ****this, llvm::yaml::Node *a2, const llvm::Twine *a3)
{
  const std::error_category *result;

  llvm::yaml::Stream::printError(this[11], (uint64_t)a2, a3, 0);
  result = std::generic_category();
  this[13] = (llvm ***)22;
  this[14] = (llvm ***)result;
  return result;
}

uint64_t llvm::yaml::Input::getNodeKind(llvm::yaml::Input *this)
{
  int v1;
  unsigned int v2;
  unsigned int v3;

  v1 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 37) + 8) + 32);
  v2 = v1 - 1;
  if (v1 == 4)
    v3 = 1;
  else
    v3 = 2;
  if (v2 >= 2)
    return v3;
  else
    return 0;
}

uint64_t llvm::yaml::Input::reportWarning(llvm ****this, llvm::yaml::Input::HNode *a2, const llvm::Twine *a3)
{
  return llvm::yaml::Stream::printError(this[11], *((_QWORD *)a2 + 1), a3, 1);
}

uint64_t llvm::yaml::Input::reportWarning(llvm ****this, llvm::yaml::Node *a2, const llvm::Twine *a3)
{
  return llvm::yaml::Stream::printError(this[11], (uint64_t)a2, a3, 1);
}

double llvm::yaml::Output::Output(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  double result;

  *(_QWORD *)a1 = &off_1E81A6C18;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a1 + 48;
  *(_QWORD *)(a1 + 40) = 0x800000000;
  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  return result;
}

void llvm::yaml::Output::~Output(llvm::yaml::Output *this)
{
  char *v2;

  *(_QWORD *)this = &off_1E81A6C18;
  v2 = (char *)*((_QWORD *)this + 4);
  if (v2 != (char *)this + 48)
    free(v2);
}

{
  char *v2;

  *(_QWORD *)this = &off_1E81A6C18;
  v2 = (char *)*((_QWORD *)this + 4);
  if (v2 != (char *)this + 48)
    free(v2);
}

{
  char *v2;

  *(_QWORD *)this = &off_1E81A6C18;
  v2 = (char *)*((_QWORD *)this + 4);
  if (v2 != (char *)this + 48)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::yaml::Output::mapTag(uint64_t a1, const char *a2, size_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a4)
  {
    v8 = *(unsigned int *)(a1 + 40);
    if (v8 < 2 || (v9 = *(_QWORD *)(a1 + 32) + 4 * v8, *(_DWORD *)(v9 - 8) > 3u))
    {
      llvm::yaml::Output::output(a1, " ", 1uLL);
      llvm::yaml::Output::output(a1, a2, a3);
    }
    else
    {
      if (*(_DWORD *)(v9 - 4) == 4)
        llvm::yaml::Output::newLineCheck((llvm::yaml::Output *)a1, 0);
      else
        llvm::yaml::Output::output(a1, " ", 1uLL);
      llvm::yaml::Output::output(a1, a2, a3);
      v10 = *(_QWORD *)(a1 + 32);
      v11 = *(unsigned int *)(a1 + 40);
      if (*(_DWORD *)(v10 + 4 * v11 - 4) == 4)
      {
        v12 = (v11 - 1);
        *(_DWORD *)(a1 + 40) = v12;
        if (v12 >= *(_DWORD *)(a1 + 44))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 32, a1 + 48, v12 + 1, 4);
          v10 = *(_QWORD *)(a1 + 32);
          LODWORD(v12) = *(_DWORD *)(a1 + 40);
        }
        *(_DWORD *)(v10 + 4 * v12) = 5;
        ++*(_DWORD *)(a1 + 40);
      }
      *(_QWORD *)(a1 + 96) = "\n";
      *(_QWORD *)(a1 + 104) = 1;
    }
  }
  return a4;
}

BOOL llvm::yaml::Output::inSeqAnyElement(unsigned int a1)
{
  return a1 < 2;
}

BOOL llvm::yaml::Output::inFlowSeqAnyElement(int a1)
{
  return (a1 & 0xFFFFFFFE) == 2;
}

llvm::raw_ostream *llvm::yaml::Output::newLineCheck(llvm::yaml::Output *this, char a2)
{
  const char *v4;
  size_t v5;
  _QWORD *v6;
  llvm::raw_ostream *result;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  char v13;
  BOOL v14;
  int v15;
  BOOL v16;

  v4 = (const char *)*((_QWORD *)this + 12);
  v5 = *((_QWORD *)this + 13);
  v6 = (_QWORD *)((char *)this + 96);
  if (v5 != 1 || *v4 != 10)
  {
    result = llvm::yaml::Output::output((uint64_t)this, v4, v5);
    *v6 = 0;
    v6[1] = 0;
    return result;
  }
  result = (llvm::raw_ostream *)*((_QWORD *)this + 2);
  v8 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v8)
  {
    result = llvm::raw_ostream::write(result, "\n", 1uLL);
  }
  else
  {
    *v8 = 10;
    ++*((_QWORD *)result + 4);
  }
  *((_DWORD *)this + 20) = 0;
  *v6 = 0;
  v6[1] = 0;
  v9 = *((unsigned int *)this + 10);
  if ((_DWORD)v9 && (a2 & 1) == 0)
  {
    v10 = v9 - 1;
    v11 = *((_QWORD *)this + 4);
    v12 = *(_DWORD *)(v11 + 4 * v9 - 4);
    if (v12 >= 2)
    {
      if (v9 < 2)
        return result;
      v14 = v12 > 6;
      v15 = (1 << v12) & 0x5C;
      v16 = v14 || v15 == 0;
      if (v16 || *(_DWORD *)(v11 + 4 * v9 - 8) > 1u)
      {
        v13 = 0;
        do
        {
LABEL_21:
          result = llvm::yaml::Output::output((uint64_t)this, "  ", 2uLL);
          --v10;
        }
        while (v10);
        if ((v13 & 1) != 0)
          return llvm::yaml::Output::output((uint64_t)this, "- ", 2uLL);
        return result;
      }
      v10 = v9 - 2;
      if ((_DWORD)v9 != 2)
      {
LABEL_9:
        v13 = 1;
        goto LABEL_21;
      }
    }
    else if ((_DWORD)v9 != 1)
    {
      goto LABEL_9;
    }
    return llvm::yaml::Output::output((uint64_t)this, "- ", 2uLL);
  }
  return result;
}

llvm::raw_ostream *llvm::yaml::Output::output(uint64_t a1, const char *a2, size_t a3)
{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *result;

  *(_DWORD *)(a1 + 80) += a3;
  v4 = *(llvm::raw_ostream **)(a1 + 16);
  result = (llvm::raw_ostream *)*((_QWORD *)v4 + 4);
  if (a3 > *((_QWORD *)v4 + 3) - (_QWORD)result)
    return llvm::raw_ostream::write(v4, a2, a3);
  if (a3)
  {
    result = (llvm::raw_ostream *)memcpy(result, a2, a3);
    *((_QWORD *)v4 + 4) += a3;
  }
  return result;
}

llvm::raw_ostream *llvm::yaml::Output::endMapping(llvm::raw_ostream *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)this;
  v2 = *((unsigned int *)this + 10);
  if (*(_DWORD *)(*((_QWORD *)this + 4) + 4 * v2 - 4) == 4)
  {
    *((_OWORD *)this + 6) = *((_OWORD *)this + 7);
    llvm::yaml::Output::newLineCheck(this, 0);
    this = llvm::yaml::Output::output(v1, "{}", 2uLL);
    *(_QWORD *)(v1 + 96) = "\n";
    *(_QWORD *)(v1 + 104) = 1;
    LODWORD(v2) = *(_DWORD *)(v1 + 40);
  }
  *(_DWORD *)(v1 + 40) = v2 - 1;
  return this;
}

uint64_t llvm::yaml::Output::preflightKey(llvm::yaml::Output *this, const char *__s, char a3, int a4, BOOL *a5, void **a6)
{
  size_t v8;
  size_t v9;

  *a5 = 0;
  *a6 = 0;
  if (a4 && (a3 & 1) == 0 && !*((_BYTE *)this + 95))
    return 0;
  if ((*(_DWORD *)(*((_QWORD *)this + 4) + 4 * *((unsigned int *)this + 10) - 4) & 0xFFFFFFFE) == 6)
  {
    if (__s)
      v8 = strlen(__s);
    else
      v8 = 0;
    llvm::yaml::Output::flowKey((uint64_t)this, __s, v8);
  }
  else
  {
    llvm::yaml::Output::newLineCheck(this, 0);
    if (__s)
      v9 = strlen(__s);
    else
      v9 = 0;
    llvm::yaml::Output::paddedKey((uint64_t)this, __s, v9);
  }
  return 1;
}

llvm::raw_ostream *llvm::yaml::Output::flowKey(uint64_t a1, const char *a2, size_t a3)
{
  int v6;
  int v7;
  int i;

  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * *(unsigned int *)(a1 + 40) - 4) == 7)
    llvm::yaml::Output::output(a1, ", ", 2uLL);
  v6 = *(_DWORD *)(a1 + 24);
  if (v6 && *(_DWORD *)(a1 + 80) > v6)
  {
    llvm::yaml::Output::output(a1, "\n", 1uLL);
    v7 = *(_DWORD *)(a1 + 88);
    if (v7 >= 1)
    {
      for (i = 0; i < v7; ++i)
      {
        llvm::yaml::Output::output(a1, " ", 1uLL);
        v7 = *(_DWORD *)(a1 + 88);
      }
    }
    *(_DWORD *)(a1 + 80) = v7;
    llvm::yaml::Output::output(a1, "  ", 2uLL);
  }
  llvm::yaml::Output::output(a1, a2, a3);
  return llvm::yaml::Output::output(a1, ": ", 2uLL);
}

size_t llvm::yaml::Output::paddedKey(uint64_t a1, const char *a2, size_t a3)
{
  uint64_t v5;
  size_t result;
  const char *v7;

  llvm::yaml::Output::output(a1, a2, a3);
  v5 = 1;
  result = (size_t)llvm::yaml::Output::output(a1, ":", 1uLL);
  if (a3 > 0xF)
  {
    v7 = " ";
  }
  else
  {
    v7 = &asc_1C87713A1[a3];
    result = strlen(v7);
    v5 = result;
  }
  *(_QWORD *)(a1 + 96) = v7;
  *(_QWORD *)(a1 + 104) = v5;
  return result;
}

llvm::raw_ostream *llvm::yaml::Output::beginFlowMapping(llvm::yaml::Output *this)
{
  uint64_t v2;

  v2 = *((unsigned int *)this + 10);
  if (v2 >= *((_DWORD *)this + 11))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 32, (uint64_t)this + 48, v2 + 1, 4);
    LODWORD(v2) = *((_DWORD *)this + 10);
  }
  *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v2) = 6;
  ++*((_DWORD *)this + 10);
  llvm::yaml::Output::newLineCheck(this, 0);
  *((_DWORD *)this + 22) = *((_DWORD *)this + 20);
  return llvm::yaml::Output::output((uint64_t)this, "{ ", 2uLL);
}

llvm::raw_ostream *llvm::yaml::Output::endFlowMapping(llvm::yaml::Output *this)
{
  llvm::raw_ostream *result;
  uint64_t v3;

  --*((_DWORD *)this + 10);
  result = llvm::yaml::Output::output((uint64_t)this, " }", 2uLL);
  v3 = *((unsigned int *)this + 10);
  if (!(_DWORD)v3 || (*(_DWORD *)(*((_QWORD *)this + 4) + 4 * v3 - 4) & 0xFFFFFFFA | 4) != 6)
  {
    *((_QWORD *)this + 12) = "\n";
    *((_QWORD *)this + 13) = 1;
  }
  return result;
}

llvm::raw_ostream *llvm::yaml::Output::outputUpToEndOfLine(uint64_t a1, const char *a2, size_t a3)
{
  llvm::raw_ostream *result;
  uint64_t v5;

  result = llvm::yaml::Output::output(a1, a2, a3);
  v5 = *(unsigned int *)(a1 + 40);
  if (!(_DWORD)v5 || (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v5 - 4) & 0xFFFFFFFA | 4) != 6)
  {
    *(_QWORD *)(a1 + 96) = "\n";
    *(_QWORD *)(a1 + 104) = 1;
  }
  return result;
}

llvm::raw_ostream *llvm::yaml::Output::beginDocuments(llvm::yaml::Output *this)
{
  llvm::raw_ostream *result;
  uint64_t v3;

  result = llvm::yaml::Output::output((uint64_t)this, "---", 3uLL);
  v3 = *((unsigned int *)this + 10);
  if (!(_DWORD)v3 || (*(_DWORD *)(*((_QWORD *)this + 4) + 4 * v3 - 4) & 0xFFFFFFFA | 4) != 6)
  {
    *((_QWORD *)this + 12) = "\n";
    *((_QWORD *)this + 13) = 1;
  }
  return result;
}

uint64_t llvm::yaml::Output::preflightDocument(llvm::yaml::Output *this, int a2)
{
  uint64_t v3;

  if (a2)
  {
    llvm::yaml::Output::output((uint64_t)this, "\n---", 4uLL);
    v3 = *((unsigned int *)this + 10);
    if (!(_DWORD)v3 || (*(_DWORD *)(*((_QWORD *)this + 4) + 4 * v3 - 4) & 0xFFFFFFFA | 4) != 6)
    {
      *((_QWORD *)this + 12) = "\n";
      *((_QWORD *)this + 13) = 1;
    }
  }
  return 1;
}

llvm::raw_ostream *llvm::yaml::Output::endDocuments(llvm::yaml::Output *this)
{
  return llvm::yaml::Output::output((uint64_t)this, "\n...\n", 5uLL);
}

llvm::raw_ostream *llvm::yaml::Output::endSequence(llvm::raw_ostream *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (uint64_t)this;
  v2 = *((unsigned int *)this + 10);
  if (!*(_DWORD *)(*((_QWORD *)this + 4) + 4 * v2 - 4))
  {
    *((_OWORD *)this + 6) = *((_OWORD *)this + 7);
    llvm::yaml::Output::newLineCheck(this, 1);
    this = llvm::yaml::Output::output(v1, "[]", 2uLL);
    *(_QWORD *)(v1 + 96) = "\n";
    *(_QWORD *)(v1 + 104) = 1;
    LODWORD(v2) = *(_DWORD *)(v1 + 40);
  }
  *(_DWORD *)(v1 + 40) = v2 - 1;
  return this;
}

uint64_t llvm::yaml::Output::beginFlowSequence(llvm::yaml::Output *this)
{
  uint64_t v2;

  v2 = *((unsigned int *)this + 10);
  if (v2 >= *((_DWORD *)this + 11))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 32, (uint64_t)this + 48, v2 + 1, 4);
    LODWORD(v2) = *((_DWORD *)this + 10);
  }
  *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v2) = 2;
  ++*((_DWORD *)this + 10);
  llvm::yaml::Output::newLineCheck(this, 0);
  *((_DWORD *)this + 21) = *((_DWORD *)this + 20);
  llvm::yaml::Output::output((uint64_t)this, "[ ", 2uLL);
  *((_BYTE *)this + 93) = 0;
  return 0;
}

llvm::raw_ostream *llvm::yaml::Output::endFlowSequence(llvm::yaml::Output *this)
{
  llvm::raw_ostream *result;
  uint64_t v3;

  --*((_DWORD *)this + 10);
  result = llvm::yaml::Output::output((uint64_t)this, " ]", 2uLL);
  v3 = *((unsigned int *)this + 10);
  if (!(_DWORD)v3 || (*(_DWORD *)(*((_QWORD *)this + 4) + 4 * v3 - 4) & 0xFFFFFFFA | 4) != 6)
  {
    *((_QWORD *)this + 12) = "\n";
    *((_QWORD *)this + 13) = 1;
  }
  return result;
}

uint64_t llvm::yaml::Output::preflightFlowElement(llvm::yaml::Output *this, unsigned int a2, void **a3)
{
  int v5;
  int v6;
  int i;

  if (*((_BYTE *)this + 93))
    llvm::yaml::Output::output((uint64_t)this, ", ", 2uLL);
  v5 = *((_DWORD *)this + 6);
  if (v5 && *((_DWORD *)this + 20) > v5)
  {
    llvm::yaml::Output::output((uint64_t)this, "\n", 1uLL);
    v6 = *((_DWORD *)this + 21);
    if (v6 >= 1)
    {
      for (i = 0; i < v6; ++i)
      {
        llvm::yaml::Output::output((uint64_t)this, " ", 1uLL);
        v6 = *((_DWORD *)this + 21);
      }
    }
    *((_DWORD *)this + 20) = v6;
    llvm::yaml::Output::output((uint64_t)this, "  ", 2uLL);
  }
  *a3 = 0;
  return 1;
}

uint64_t llvm::yaml::Output::matchEnumScalar(llvm::yaml::Output *this, const char *a2, int a3)
{
  size_t v5;
  uint64_t v6;

  if (a3 && !*((_BYTE *)this + 94))
  {
    llvm::yaml::Output::newLineCheck(this, 0);
    if (a2)
      v5 = strlen(a2);
    else
      v5 = 0;
    llvm::yaml::Output::output((uint64_t)this, a2, v5);
    v6 = *((unsigned int *)this + 10);
    if (!(_DWORD)v6 || (*(_DWORD *)(*((_QWORD *)this + 4) + 4 * v6 - 4) & 0xFFFFFFFA | 4) != 6)
    {
      *((_QWORD *)this + 12) = "\n";
      *((_QWORD *)this + 13) = 1;
    }
    *((_BYTE *)this + 94) = 1;
  }
  return 0;
}

uint64_t llvm::yaml::Output::beginBitSetScalar(llvm::yaml::Output *this, BOOL *a2)
{
  llvm::yaml::Output::newLineCheck(this, 0);
  llvm::yaml::Output::output((uint64_t)this, "[ ", 2uLL);
  *((_BYTE *)this + 92) = 0;
  *a2 = 0;
  return 1;
}

uint64_t llvm::yaml::Output::bitSetMatch(llvm::yaml::Output *this, const char *__s, int a3)
{
  size_t v5;

  if (a3)
  {
    if (*((_BYTE *)this + 92))
      llvm::yaml::Output::output((uint64_t)this, ", ", 2uLL);
    if (__s)
      v5 = strlen(__s);
    else
      v5 = 0;
    llvm::yaml::Output::output((uint64_t)this, __s, v5);
    *((_BYTE *)this + 92) = 1;
  }
  return 0;
}

llvm::raw_ostream *llvm::yaml::Output::endBitSetScalar(llvm::yaml::Output *this)
{
  llvm::raw_ostream *result;
  uint64_t v3;

  result = llvm::yaml::Output::output((uint64_t)this, " ]", 2uLL);
  v3 = *((unsigned int *)this + 10);
  if (!(_DWORD)v3 || (*(_DWORD *)(*((_QWORD *)this + 4) + 4 * v3 - 4) & 0xFFFFFFFA | 4) != 6)
  {
    *((_QWORD *)this + 12) = "\n";
    *((_QWORD *)this + 13) = 1;
  }
  return result;
}

llvm::raw_ostream *llvm::yaml::Output::scalarString(uint64_t a1, uint64_t a2, int a3)
{
  size_t v6;
  const char *v7;
  void **v8;
  size_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  llvm::raw_ostream *result;
  uint64_t v17;
  void *__p[2];
  char v19;

  llvm::yaml::Output::newLineCheck((llvm::yaml::Output *)a1, 0);
  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    if (a3)
    {
      if (a3 == 1)
        v7 = "'";
      else
        v7 = "\"";
      llvm::yaml::Output::output(a1, v7, 1uLL);
      if (a3 == 2)
      {
        llvm::yaml::escape(*(unsigned __int8 **)a2, *(_QWORD *)(a2 + 8), 0, (unint64_t)__p);
        if (v19 >= 0)
          v8 = __p;
        else
          v8 = (void **)__p[0];
        if (v19 >= 0)
          v9 = v19 & 0x7F;
        else
          v9 = (size_t)__p[1];
        llvm::yaml::Output::output(a1, (const char *)v8, v9);
        if (v19 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v13 = *(unsigned __int8 **)a2;
        v12 = *(_QWORD *)(a2 + 8);
        if ((_DWORD)v12)
        {
          v14 = 0;
          v15 = 0;
          do
          {
            if (*(_BYTE *)(*(_QWORD *)a2 + v14) == 39)
            {
              llvm::yaml::Output::output(a1, (const char *)&v13[v15], (v14 - v15));
              llvm::yaml::Output::output(a1, "''", 2uLL);
              v15 = ++v14;
            }
            else
            {
              ++v14;
            }
          }
          while (v14 != v12);
        }
        else
        {
          v15 = 0;
        }
        llvm::yaml::Output::output(a1, (const char *)&v13[v15], (v12 - v15));
      }
      v11 = a1;
      v10 = v7;
      v6 = 1;
    }
    else
    {
      v10 = *(const char **)a2;
      v11 = a1;
    }
  }
  else
  {
    v10 = "''";
    v11 = a1;
    v6 = 2;
  }
  result = llvm::yaml::Output::output(v11, v10, v6);
  v17 = *(unsigned int *)(a1 + 40);
  if (!(_DWORD)v17 || (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * v17 - 4) & 0xFFFFFFFA | 4) != 6)
  {
    *(_QWORD *)(a1 + 96) = "\n";
    *(_QWORD *)(a1 + 104) = 1;
  }
  return result;
}

uint64_t llvm::yaml::Output::blockScalarString(llvm::yaml::Output *this, llvm::StringRef *a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  _QWORD v14[4];
  __int16 v15;
  const char *v16;
  size_t v17;
  const void ***v18;

  if (*((_DWORD *)this + 10))
    llvm::yaml::Output::newLineCheck(this, 0);
  llvm::yaml::Output::output((uint64_t)this, " |", 2uLL);
  v4 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    llvm::raw_ostream::write(v4, "\n", 1uLL);
  }
  else
  {
    *v5 = 10;
    ++*((_QWORD *)v4 + 4);
  }
  *((_DWORD *)this + 20) = 0;
  if (*((_DWORD *)this + 10) <= 1u)
    v6 = 1;
  else
    v6 = *((_DWORD *)this + 10);
  v7 = *(_QWORD *)a2;
  v8 = *((_QWORD *)a2 + 1);
  v15 = 261;
  v14[0] = "";
  v14[1] = 0;
  v18 = (const void ***)v14;
  v9 = sub_1C5E1F380(24, &v18);
  *(_QWORD *)v9 = &off_1E81A17B0;
  *((_QWORD *)v9 + 1) = v7;
  *((_QWORD *)v9 + 2) = v7 + v8;
  llvm::line_iterator::line_iterator((llvm::line_iterator *)v14, (const llvm::MemoryBuffer *)v9, 0, 0);
  if ((_BYTE)v15)
  {
    v10 = 0;
    do
    {
      do
      {
        llvm::yaml::Output::output((uint64_t)this, "  ", 2uLL);
        ++v10;
      }
      while (v10 != v6);
      llvm::yaml::Output::output((uint64_t)this, v16, v17);
      v11 = (llvm::raw_ostream *)*((_QWORD *)this + 2);
      v12 = (_BYTE *)*((_QWORD *)v11 + 4);
      if (*((_BYTE **)v11 + 3) == v12)
      {
        llvm::raw_ostream::write(v11, "\n", 1uLL);
      }
      else
      {
        *v12 = 10;
        ++*((_QWORD *)v11 + 4);
      }
      *((_DWORD *)this + 20) = 0;
      llvm::line_iterator::advance((uint64_t)v14);
      v10 = 0;
    }
    while ((_BYTE)v15);
  }
  return (*(uint64_t (**)(char *))(*(_QWORD *)v9 + 8))(v9);
}

llvm::raw_ostream *llvm::yaml::Output::outputNewLine(llvm::yaml::Output *this)
{
  llvm::raw_ostream *result;
  _BYTE *v3;

  result = (llvm::raw_ostream *)*((_QWORD *)this + 2);
  v3 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v3)
  {
    result = llvm::raw_ostream::write(result, "\n", 1uLL);
  }
  else
  {
    *v3 = 10;
    ++*((_QWORD *)result + 4);
  }
  *((_DWORD *)this + 20) = 0;
  return result;
}

llvm::yaml::Output *llvm::yaml::Output::scalarTag(llvm::yaml::Output *result, uint64_t a2)
{
  char v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  BOOL v8;
  const char *v9;
  size_t v10;
  size_t v11;

  v2 = *(_BYTE *)(a2 + 23);
  v3 = v2;
  v4 = v2 & 0x7F;
  if (v3 < 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v6 = (uint64_t)result;
    llvm::yaml::Output::newLineCheck(result, 0);
    v7 = *(_BYTE *)(a2 + 23);
    v8 = v7 < 0;
    if (v7 >= 0)
      v9 = (const char *)a2;
    else
      v9 = *(const char **)a2;
    v10 = v7 & 0x7F;
    if (v8)
      v11 = *(_QWORD *)(a2 + 8);
    else
      v11 = v10;
    llvm::yaml::Output::output(v6, v9, v11);
    return llvm::yaml::Output::output(v6, " ", 1uLL);
  }
  return result;
}

BOOL llvm::yaml::Output::inFlowMapAnyKey(int a1)
{
  return (a1 & 0xFFFFFFFE) == 6;
}

BOOL llvm::yaml::Output::inMapAnyKey(int a1)
{
  return (a1 & 0xFFFFFFFE) == 4;
}

const char *llvm::yaml::ScalarTraits<BOOL,void>::input(char *a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  unsigned __int16 v5;
  const char *result;
  char v7;

  v5 = llvm::yaml::parseBool(a1, a2);
  if (v5 < 0x100u)
    return "invalid BOOLean";
  v7 = v5;
  result = 0;
  *a4 = v7;
  return result;
}

uint64_t llvm::yaml::ScalarTraits<std::string,void>::input(void *__src, size_t __len, uint64_t a3, uint64_t a4)
{
  __int128 *p_dst;
  size_t v8;
  size_t v9;
  __int128 __dst;
  unint64_t v12;

  if (!__src)
  {
    __dst = 0uLL;
    v12 = 0;
    goto LABEL_12;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v8 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v8 = __len | 7;
    v9 = v8 + 1;
    p_dst = (__int128 *)operator new(v8 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v12 = v9 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v12) = __len;
    p_dst = &__dst;
    if (!__len)
      goto LABEL_11;
  }
  memmove(p_dst, __src, __len);
LABEL_11:
  *((_BYTE *)p_dst + __len) = 0;
LABEL_12:
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = __dst;
  *(_QWORD *)(a4 + 16) = v12;
  return 0;
}

llvm::raw_ostream *llvm::yaml::ScalarTraits<signed char,void>::output(char *a1, uint64_t a2, llvm::raw_ostream *a3)
{
  unint64_t v3;

  v3 = *a1;
  if ((v3 & 0x8000000000000000) != 0)
    return sub_1C5E21910(a3, -(uint64_t)v3, 0, 0, 1);
  else
    return sub_1C5E21910(a3, v3, 0, 0, 0);
}

const char *llvm::yaml::ScalarTraits<signed char,void>::input(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char v5;
  char v6;
  const char *result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = 0;
  v9 = a1;
  v10 = a2;
  llvm::consumeSignedInteger((llvm *)&v9, 0, &v8, a4);
  v6 = v5;
  result = "invalid number";
  if ((v6 & 1) == 0 && !v10)
  {
    if (v8 == (char)v8)
    {
      result = 0;
      *(_BYTE *)a4 = v8;
    }
    else
    {
      return "out of range number";
    }
  }
  return result;
}

llvm::raw_ostream *llvm::yaml::ScalarTraits<short,void>::output(__int16 *a1, uint64_t a2, llvm::raw_ostream *a3)
{
  unint64_t v3;

  v3 = *a1;
  if ((v3 & 0x8000000000000000) != 0)
    return sub_1C5E21910(a3, -(uint64_t)v3, 0, 0, 1);
  else
    return sub_1C5E21910(a3, v3, 0, 0, 0);
}

const char *llvm::yaml::ScalarTraits<short,void>::input(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char v5;
  char v6;
  const char *result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = 0;
  v9 = a1;
  v10 = a2;
  llvm::consumeSignedInteger((llvm *)&v9, 0, &v8, a4);
  v6 = v5;
  result = "invalid number";
  if ((v6 & 1) == 0 && !v10)
  {
    if (v8 == (__int16)v8)
    {
      result = 0;
      *(_WORD *)a4 = v8;
    }
    else
    {
      return "out of range number";
    }
  }
  return result;
}

llvm::raw_ostream *llvm::yaml::ScalarTraits<double,void>::output(uint64_t *a1, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t v3;
  _QWORD v5[3];

  v3 = *a1;
  v5[0] = &off_1E7FA8D00;
  v5[1] = "%g";
  v5[2] = v3;
  return llvm::raw_ostream::operator<<(a3, (uint64_t)v5);
}

const char *llvm::yaml::ScalarTraits<double,void>::input(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  _QWORD v5[4];
  __int16 v6;

  v6 = 261;
  v5[0] = a1;
  v5[1] = a2;
  if (sub_1C6386234((unsigned __int8 *)v5, a4))
    return 0;
  else
    return "invalid floating point number";
}

llvm::raw_ostream *llvm::yaml::ScalarTraits<float,void>::output(unsigned int *a1, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t v3;
  _QWORD v5[3];

  v3 = *a1;
  v5[0] = &unk_1E8168F18;
  v5[1] = "%g";
  v5[2] = v3;
  return llvm::raw_ostream::operator<<(a3, (uint64_t)v5);
}

const char *llvm::yaml::ScalarTraits<float,void>::input(uint64_t a1, uint64_t a2, uint64_t a3, float *a4)
{
  const char *v5;
  float v6;
  int v7;
  _QWORD v9[4];
  __int16 v10;
  char *v11;
  void *v12;
  __int128 v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  v10 = 261;
  v9[0] = a1;
  v9[1] = a2;
  v12 = v14;
  v13 = xmmword_1C677F680;
  v5 = (const char *)llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)v9, (uint64_t)&v12);
  v11 = 0;
  v6 = strtof(v5, &v11);
  v7 = *v11;
  if (!*v11)
    *a4 = v6;
  if (v12 != v14)
    free(v12);
  if (v7)
    return "invalid floating point number";
  else
    return 0;
}

llvm::raw_ostream *llvm::yaml::ScalarTraits<llvm::yaml::Hex8,void>::output(unsigned __int8 *a1, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t v3;
  _QWORD v5[3];

  v3 = *a1;
  v5[0] = &unk_1E8145938;
  v5[1] = "0x%hhX";
  v5[2] = v3;
  return llvm::raw_ostream::operator<<(a3, (uint64_t)v5);
}

const char *llvm::yaml::ScalarTraits<llvm::yaml::Hex8,void>::input(unsigned __int8 *a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *i;
  int v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  const char *result;
  unsigned __int8 *v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  v5 = sub_1C5E3D4C0((uint64_t)&v14);
  v6 = v15;
  if (v15)
  {
    v7 = 0;
    for (i = v14; ; ++i)
    {
      v9 = *i;
      if ((v9 - 48) >= 0xA)
      {
        if ((v9 - 97) >= 0x1A)
        {
          if ((v9 - 65) > 0x19)
            return "invalid hex8 number";
          v10 = -55;
        }
        else
        {
          v10 = -87;
        }
      }
      else
      {
        v10 = -48;
      }
      v11 = v10 + v9;
      if (v11 >= v5)
        break;
      v12 = v7 * v5 + v11;
      if (v12 / v5 < v7)
        break;
      v7 = v12;
      if (!--v6)
      {
        if (v12 > 0xFF)
          return "out of range hex8 number";
        result = 0;
        *a4 = v12;
        return result;
      }
    }
  }
  return "invalid hex8 number";
}

llvm::raw_ostream *llvm::yaml::ScalarTraits<llvm::yaml::Hex16,void>::output(unsigned __int16 *a1, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t v3;
  _QWORD v5[3];

  v3 = *a1;
  v5[0] = &unk_1E8169900;
  v5[1] = "0x%hX";
  v5[2] = v3;
  return llvm::raw_ostream::operator<<(a3, (uint64_t)v5);
}

const char *llvm::yaml::ScalarTraits<llvm::yaml::Hex16,void>::input(unsigned __int8 *a1, uint64_t a2, uint64_t a3, _WORD *a4)
{
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *i;
  int v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  const char *result;
  unsigned __int8 *v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  v5 = sub_1C5E3D4C0((uint64_t)&v14);
  v6 = v15;
  if (v15)
  {
    v7 = 0;
    for (i = v14; ; ++i)
    {
      v9 = *i;
      if ((v9 - 48) >= 0xA)
      {
        if ((v9 - 97) >= 0x1A)
        {
          if ((v9 - 65) > 0x19)
            return "invalid hex16 number";
          v10 = -55;
        }
        else
        {
          v10 = -87;
        }
      }
      else
      {
        v10 = -48;
      }
      v11 = v10 + v9;
      if (v11 >= v5)
        break;
      v12 = v7 * v5 + v11;
      if (v12 / v5 < v7)
        break;
      v7 = v12;
      if (!--v6)
      {
        if (v12 >> 16)
          return "out of range hex16 number";
        result = 0;
        *a4 = v12;
        return result;
      }
    }
  }
  return "invalid hex16 number";
}

llvm::raw_ostream *llvm::yaml::ScalarTraits<llvm::yaml::Hex32,void>::output(unsigned int *a1, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t v3;
  _QWORD v5[3];

  v3 = *a1;
  v5[0] = &off_1E8132728;
  v5[1] = "0x%X";
  v5[2] = v3;
  return llvm::raw_ostream::operator<<(a3, (uint64_t)v5);
}

const char *llvm::yaml::ScalarTraits<llvm::yaml::Hex32,void>::input(unsigned __int8 *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *i;
  int v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  const char *result;
  unsigned __int8 *v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  v5 = sub_1C5E3D4C0((uint64_t)&v14);
  v6 = v15;
  if (v15)
  {
    v7 = 0;
    for (i = v14; ; ++i)
    {
      v9 = *i;
      if ((v9 - 48) >= 0xA)
      {
        if ((v9 - 97) >= 0x1A)
        {
          if ((v9 - 65) > 0x19)
            return "invalid hex32 number";
          v10 = -55;
        }
        else
        {
          v10 = -87;
        }
      }
      else
      {
        v10 = -48;
      }
      v11 = v10 + v9;
      if (v11 >= v5)
        break;
      v12 = v7 * v5 + v11;
      if (v12 / v5 < v7)
        break;
      v7 = v12;
      if (!--v6)
      {
        if (HIDWORD(v12))
          return "out of range hex32 number";
        result = 0;
        *a4 = v12;
        return result;
      }
    }
  }
  return "invalid hex32 number";
}

llvm::raw_ostream *llvm::yaml::ScalarTraits<llvm::yaml::Hex64,void>::output(uint64_t *a1, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t v3;
  _QWORD v5[3];

  v3 = *a1;
  v5[0] = &unk_1E8133270;
  v5[1] = "0x%llX";
  v5[2] = v3;
  return llvm::raw_ostream::operator<<(a3, (uint64_t)v5);
}

const char *llvm::yaml::ScalarTraits<llvm::yaml::Hex64,void>::input(unsigned __int8 *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *i;
  int v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  const char *result;
  unsigned __int8 *v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  v5 = sub_1C5E3D4C0((uint64_t)&v14);
  v6 = v15;
  if (v15)
  {
    v7 = 0;
    for (i = v14; ; ++i)
    {
      v9 = *i;
      if ((v9 - 48) >= 0xA)
      {
        if ((v9 - 97) >= 0x1A)
        {
          if ((v9 - 65) > 0x19)
            return "invalid hex64 number";
          v10 = -55;
        }
        else
        {
          v10 = -87;
        }
      }
      else
      {
        v10 = -48;
      }
      v11 = v10 + v9;
      if (v11 >= v5)
        break;
      v12 = v7 * v5 + v11;
      if (v12 / v5 < v7)
        break;
      v7 = v12;
      if (!--v6)
      {
        result = 0;
        *a4 = v12;
        return result;
      }
    }
  }
  return "invalid hex64 number";
}

void llvm::yaml::ScalarTraits<llvm::VersionTuple,void>::output(llvm::VersionTuple *a1, uint64_t a2, llvm::raw_ostream *a3)
{
  void **v4;
  size_t v5;
  void *__p[2];
  char v7;

  llvm::VersionTuple::getAsString(a1, __p);
  if (v7 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v7 >= 0)
    v5 = v7 & 0x7F;
  else
    v5 = (size_t)__p[1];
  llvm::raw_ostream::write(a3, (const char *)v4, v5);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1C5E6FFE8()
{
  JUMPOUT(0x1CAA32FC0);
}

void llvm::raw_os_ostream::~raw_os_ostream(llvm::raw_os_ostream *this)
{
  const char *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E81A6DF8;
  v2 = (const char *)*((_QWORD *)this + 4);
  v3 = (const char *)*((_QWORD *)this + 2);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    *((_QWORD *)this + 4) = v3;
    llvm::raw_ostream::flush_tied_then_write(this, v3, v4);
  }
  *(_QWORD *)this = off_1E81A6E70;
  if (*((_DWORD *)this + 14) == 1)
  {
    v5 = *((_QWORD *)this + 2);
    if (v5)
      MEMORY[0x1CAA32F9C](v5, 0x1000C8077774924, v4);
  }
}

{
  const char *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E81A6DF8;
  v2 = (const char *)*((_QWORD *)this + 4);
  v3 = (const char *)*((_QWORD *)this + 2);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    *((_QWORD *)this + 4) = v3;
    llvm::raw_ostream::flush_tied_then_write(this, v3, v4);
  }
  *(_QWORD *)this = off_1E81A6E70;
  if (*((_DWORD *)this + 14) == 1)
  {
    v5 = *((_QWORD *)this + 2);
    if (v5)
      MEMORY[0x1CAA32F9C](v5, 0x1000C8077774924, v4);
  }
}

{
  const char *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E81A6DF8;
  v2 = (const char *)*((_QWORD *)this + 4);
  v3 = (const char *)*((_QWORD *)this + 2);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    *((_QWORD *)this + 4) = v3;
    llvm::raw_ostream::flush_tied_then_write(this, v3, v4);
  }
  *(_QWORD *)this = off_1E81A6E70;
  if (*((_DWORD *)this + 14) == 1)
  {
    v5 = *((_QWORD *)this + 2);
    if (v5)
      MEMORY[0x1CAA32F9C](v5, 0x1000C8077774924, v4);
  }
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::raw_os_ostream::write_impl(llvm::raw_os_ostream *this, const char *a2)
{
  return std::ostream::write();
}

uint64_t llvm::raw_os_ostream::current_pos(llvm::raw_os_ostream *this)
{
  uint64_t v1;
  _QWORD v3[18];

  v3[17] = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 8) + *(_QWORD *)(**((_QWORD **)this + 8) - 24);
  if ((*(_BYTE *)(v1 + 32) & 5) != 0)
    return -1;
  (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 40) + 32))(v3, *(_QWORD *)(v1 + 40), 0, 1, 16);
  return v3[16];
}

void llvm::raw_ostream::~raw_ostream(llvm::raw_ostream *this)
{
  uint64_t v1;

  *(_QWORD *)this = off_1E81A6E70;
  if (*((_DWORD *)this + 14) == 1)
  {
    v1 = *((_QWORD *)this + 2);
    if (v1)
      MEMORY[0x1CAA32F9C](v1, 0x1000C8077774924);
  }
}

_QWORD *llvm::raw_ostream::SetBuffered(llvm::raw_ostream *this)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)this + 88))(this);
  if (v2)
    return (_QWORD *)sub_1C6174E14(this, v2);
  else
    return sub_1C5E702D0(this);
}

_QWORD *sub_1C5E702D0(_QWORD *this)
{
  _QWORD *v1;
  const char *v2;
  _QWORD *v3;
  const char *v4;
  uint64_t v5;

  v1 = this;
  v3 = this + 2;
  v2 = (const char *)this[2];
  v4 = (const char *)this[4];
  v5 = v4 - v2;
  if (v4 != v2)
  {
    this[4] = v2;
    this = (_QWORD *)llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)this, v2, v5);
  }
  if (*((_DWORD *)v1 + 14) == 1)
  {
    this = (_QWORD *)*v3;
    if (*v3)
      this = (_QWORD *)MEMORY[0x1CAA32F9C](this, 0x1000C8077774924, v5);
  }
  *((_DWORD *)v1 + 14) = 0;
  v3[1] = 0;
  v3[2] = 0;
  *v3 = 0;
  return this;
}

uint64_t llvm::raw_ostream::SetBufferAndMode(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)(result + 56) == 1)
  {
    v4 = *(_QWORD *)(result + 16);
    if (v4)
    {
      v8 = result;
      v7 = a2;
      v6 = a4;
      v5 = a3;
      MEMORY[0x1CAA32F9C](v4, 0x1000C8077774924);
      a3 = v5;
      a2 = v7;
      result = v8;
      a4 = v6;
    }
  }
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = a2 + a3;
  *(_QWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 56) = a4;
  return result;
}

llvm::raw_ostream *llvm::raw_ostream::operator<<(llvm::raw_ostream *a1, unint64_t a2)
{
  sub_1C5E21910(a1, a2, 0, 0, 0);
  return a1;
}

{
  int v3;

  if ((a2 & 0x8000000000000000) != 0)
  {
    a2 = -(uint64_t)a2;
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  sub_1C5E21910(a1, a2, 0, 0, v3);
  return a1;
}

{
  sub_1C5E21910(a1, a2, 0, 0, 0);
  return a1;
}

{
  int v3;

  if ((a2 & 0x8000000000000000) != 0)
  {
    a2 = -(uint64_t)a2;
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  sub_1C5E21910(a1, a2, 0, 0, v3);
  return a1;
}

{
  llvm::write_hex(a1, a2, 3, 0, 0);
  return a1;
}

uint64_t *llvm::raw_ostream::operator<<(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *a1;
  if ((_DWORD)a2 == 9)
    (*(void (**)(uint64_t *))(v3 + 32))(a1);
  else
    (*(void (**)(uint64_t *, uint64_t, _QWORD, _QWORD))(v3 + 24))(a1, a2, 0, 0);
  return a1;
}

llvm::raw_ostream *llvm::raw_ostream::write_uuid(llvm::raw_ostream *this, const unsigned __int8 *a2)
{
  uint64_t i;
  uint64_t v4;
  _BYTE *v5;
  _QWORD v6[3];

  for (i = 0; i != 16; ++i)
  {
    v4 = a2[i];
    v6[0] = &unk_1E8145938;
    v6[1] = "%02X";
    v6[2] = v4;
    this = llvm::raw_ostream::operator<<(this, (uint64_t)v6);
    if ((i & 0x7FFFFFFB) == 3 || (_DWORD)i == 9 || (_DWORD)i == 5)
    {
      v5 = (_BYTE *)*((_QWORD *)this + 4);
      if (*((_BYTE **)this + 3) == v5)
      {
        this = llvm::raw_ostream::write(this, "-", 1uLL);
      }
      else
      {
        *v5 = 45;
        ++*((_QWORD *)this + 4);
      }
    }
  }
  return this;
}

llvm::raw_ostream *llvm::raw_ostream::operator<<(llvm::raw_ostream *a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v9;
  int v10;
  unsigned int v11;
  char *v12;
  __int128 v13;
  _QWORD v14[17];

  v14[16] = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a1 + 3) - *((_QWORD *)a1 + 4);
  if (v4 < 4)
  {
    v7 = 127;
  }
  else
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
    if (v5 < v4)
      v6 = v5;
    else
      v6 = v5 + 1;
    if (v5 >= 0)
      v7 = v6;
    else
      v7 = (2 * v4);
    if (v4 >= v7)
    {
      *((_QWORD *)a1 + 4) += v7;
      return a1;
    }
  }
  v12 = (char *)v14;
  v13 = xmmword_1C85F20B0;
  do
  {
    v9 = v7;
    sub_1C593A164(&v12, v7);
    v10 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 8))(a2, v12, v9);
    if (v10 < v9)
      v11 = v10;
    else
      v11 = v10 + 1;
    if (v10 >= 0)
      v7 = v11;
    else
      v7 = (2 * v9);
  }
  while (v9 < v7);
  llvm::raw_ostream::write(a1, v12, v7);
  if (v12 != (char *)v14)
    free(v12);
  return a1;
}

{
  int v4;
  BOOL v5;
  int v6;
  BOOL v7;
  BOOL v8;
  int v9;
  size_t v10;
  unint64_t v11;
  uint64_t (**v13)();
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int v20;
  char **v21;
  char *v22;
  unint64_t v23[2];
  _QWORD v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 20))
  {
    v4 = *(unsigned __int8 *)(a2 + 22);
    if (*(_BYTE *)(a2 + 22))
      v5 = *(_BYTE *)(a2 + 21) == 0;
    else
      v5 = 0;
    if (v5)
      v6 = 3;
    else
      v6 = 1;
    if (*(_BYTE *)(a2 + 21))
      v7 = v4 == 0;
    else
      v7 = 0;
    if (v7)
      v6 = 0;
    if (*(_BYTE *)(a2 + 21))
      v8 = v4 == 0;
    else
      v8 = 1;
    if (v8)
      v9 = v6;
    else
      v9 = 2;
    llvm::write_hex(a1, *(_QWORD *)a2, v9, *(unsigned int *)(a2 + 16), 1);
  }
  else
  {
    v21 = &v22;
    v22 = (char *)v24;
    *(_OWORD *)v23 = xmmword_1C6612EE0;
    v14 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 1;
    v16 = 0;
    v17 = 0;
    v15 = 0;
    v13 = &off_1E81A7280;
    sub_1C5E702D0(&v13);
    llvm::write_integer((llvm::raw_ostream *)&v13, *(_QWORD *)(a2 + 8), 0, 0);
    v10 = v23[0];
    v11 = *(unsigned int *)(a2 + 16);
    if (v23[0] < v11)
    {
      llvm::raw_ostream::indent(a1, v11 - LODWORD(v23[0]));
      v10 = v23[0];
    }
    llvm::raw_ostream::write(a1, v22, v10);
    v13 = (uint64_t (**)())off_1E81A6E70;
    if (v20 == 1 && v15)
      MEMORY[0x1CAA32F9C](v15, 0x1000C8077774924);
    if (v22 != (char *)v24)
      free(v22);
  }
  return a1;
}

{
  sub_1C639D338(a2, a1);
  return a1;
}

uint64_t llvm::raw_ostream::flush_nonempty(llvm::raw_ostream *this)
{
  const char *v1;
  uint64_t v2;

  v1 = (const char *)*((_QWORD *)this + 2);
  v2 = *((_QWORD *)this + 4) - (_QWORD)v1;
  *((_QWORD *)this + 4) = v1;
  return llvm::raw_ostream::flush_tied_then_write(this, v1, v2);
}

uint64_t llvm::raw_ostream::flush_tied_then_write(llvm::raw_ostream *this, const char *a2, uint64_t a3)
{
  llvm::raw_ostream *v6;
  const char *v7;
  const char *v8;

  v6 = (llvm::raw_ostream *)*((_QWORD *)this + 6);
  if (v6)
  {
    v7 = (const char *)*((_QWORD *)v6 + 4);
    v8 = (const char *)*((_QWORD *)v6 + 2);
    if (v7 != v8)
    {
      *((_QWORD *)v6 + 4) = v8;
      llvm::raw_ostream::flush_tied_then_write(v6, v8, v7 - v8);
    }
  }
  return (*(uint64_t (**)(llvm::raw_ostream *, const char *, uint64_t))(*(_QWORD *)this + 72))(this, a2, a3);
}

llvm::raw_ostream *llvm::raw_ostream::write(llvm::raw_ostream *this, char a2)
{
  char *i;
  unint64_t v5;
  const char *v6;
  uint64_t v7;
  char v9;

  v5 = *((_QWORD *)this + 3);
  for (i = (char *)*((_QWORD *)this + 4); ; i = (char *)*((_QWORD *)this + 4))
  {
    if ((unint64_t)i < v5)
      goto LABEL_10;
    v6 = (const char *)*((_QWORD *)this + 2);
    if (v6)
    {
      *((_QWORD *)this + 4) = v6;
      llvm::raw_ostream::flush_tied_then_write(this, v6, i - v6);
      i = (char *)*((_QWORD *)this + 4);
LABEL_10:
      *((_QWORD *)this + 4) = i + 1;
      *i = a2;
      return this;
    }
    if (!*((_DWORD *)this + 14))
      break;
    v7 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)this + 88))(this);
    if (v7)
      sub_1C6174E14(this, v7);
    else
      sub_1C5E702D0(this);
    v5 = *((_QWORD *)this + 3);
  }
  v9 = a2;
  llvm::raw_ostream::flush_tied_then_write(this, &v9, 1);
  return this;
}

llvm::raw_ostream *llvm::raw_ostream::write(llvm::raw_ostream *this, const char *a2, size_t a3)
{
  size_t v3;
  char *v6;
  uint64_t v7;
  size_t v8;
  char v9;
  const char *v10;
  char *v12;
  const char *v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;

  v3 = a3;
  v7 = *((_QWORD *)this + 3);
  v6 = (char *)*((_QWORD *)this + 4);
  v8 = v7 - (_QWORD)v6;
  if (v7 - (uint64_t)v6 < a3)
  {
    while (1)
    {
      while (1)
      {
        v12 = (char *)*((_QWORD *)this + 2);
        if (!v12)
          break;
        if (v6 == v12)
        {
          v8 *= v3 / v8;
          v3 -= v8;
          llvm::raw_ostream::flush_tied_then_write(this, a2, v8);
          v6 = (char *)*((_QWORD *)this + 4);
          v15 = *((_QWORD *)this + 3) - (_QWORD)v6;
          if (v3 <= v15)
          {
            v10 = &a2[v8];
            switch(v3)
            {
              case 0uLL:
                goto LABEL_10;
              case 1uLL:
                goto LABEL_36;
              case 2uLL:
                goto LABEL_35;
              case 3uLL:
                goto LABEL_34;
              case 4uLL:
                v6[3] = v10[3];
                v6 = (char *)*((_QWORD *)this + 4);
LABEL_34:
                v6[2] = v10[2];
                v6 = (char *)*((_QWORD *)this + 4);
LABEL_35:
                v6[1] = v10[1];
                v6 = (char *)*((_QWORD *)this + 4);
LABEL_36:
                v9 = *v10;
                goto LABEL_7;
              default:
LABEL_9:
                memcpy(v6, v10, v3);
                goto LABEL_10;
            }
          }
        }
        else
        {
          switch(v8)
          {
            case 0uLL:
              break;
            case 1uLL:
              goto LABEL_18;
            case 2uLL:
              goto LABEL_17;
            case 3uLL:
              goto LABEL_16;
            case 4uLL:
              v6[3] = a2[3];
              v6 = (char *)*((_QWORD *)this + 4);
LABEL_16:
              v6[2] = a2[2];
              v6 = (char *)*((_QWORD *)this + 4);
LABEL_17:
              v6[1] = a2[1];
              v6 = (char *)*((_QWORD *)this + 4);
LABEL_18:
              *v6 = *a2;
              break;
            default:
              memcpy(v6, a2, v8);
              break;
          }
          v13 = (const char *)*((_QWORD *)this + 2);
          v14 = *((_QWORD *)this + 4) + v8 - (_QWORD)v13;
          *((_QWORD *)this + 4) = v13;
          llvm::raw_ostream::flush_tied_then_write(this, v13, v14);
          v3 -= v8;
          v6 = (char *)*((_QWORD *)this + 4);
          v15 = *((_QWORD *)this + 3) - (_QWORD)v6;
        }
        a2 += v8;
        v8 = v15;
        if (v15 >= v3)
          goto LABEL_2;
      }
      if (!*((_DWORD *)this + 14))
        break;
      v16 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)this + 88))(this);
      if (v16)
        sub_1C6174E14(this, v16);
      else
        sub_1C5E702D0(this);
      v6 = (char *)*((_QWORD *)this + 4);
      v8 = *((_QWORD *)this + 3) - (_QWORD)v6;
      if (v8 >= v3)
        goto LABEL_2;
    }
    llvm::raw_ostream::flush_tied_then_write(this, a2, v3);
  }
  else
  {
LABEL_2:
    switch(v3)
    {
      case 0uLL:
        goto LABEL_10;
      case 1uLL:
        goto LABEL_6;
      case 2uLL:
        goto LABEL_5;
      case 3uLL:
        goto LABEL_4;
      case 4uLL:
        v6[3] = a2[3];
        v6 = (char *)*((_QWORD *)this + 4);
LABEL_4:
        v6[2] = a2[2];
        v6 = (char *)*((_QWORD *)this + 4);
LABEL_5:
        v6[1] = a2[1];
        v6 = (char *)*((_QWORD *)this + 4);
LABEL_6:
        v9 = *a2;
        break;
      default:
        v10 = a2;
        goto LABEL_9;
    }
LABEL_7:
    *v6 = v9;
LABEL_10:
    *((_QWORD *)this + 4) += v3;
  }
  return this;
}

void **llvm::raw_ostream::copy_to_buffer(void **this, const char *a2, size_t __n)
{
  void **v4;

  v4 = this;
  switch(__n)
  {
    case 0uLL:
      break;
    case 1uLL:
      goto LABEL_5;
    case 2uLL:
      goto LABEL_4;
    case 3uLL:
      goto LABEL_3;
    case 4uLL:
      *((_BYTE *)this[4] + 3) = a2[3];
LABEL_3:
      *((_BYTE *)this[4] + 2) = a2[2];
LABEL_4:
      *((_BYTE *)this[4] + 1) = a2[1];
LABEL_5:
      *(_BYTE *)this[4] = *a2;
      break;
    default:
      this = (void **)memcpy(this[4], a2, __n);
      break;
  }
  v4[4] = (char *)v4[4] + __n;
  return this;
}

llvm::raw_ostream *llvm::raw_ostream::indent(llvm::raw_ostream *this, unsigned int a2)
{
  unsigned int v2;
  size_t v3;

  v2 = a2;
  if (a2 < 0x50)
    return llvm::raw_ostream::write(this, "                                                                                ", a2);
  do
  {
    if (v2 >= 0x4F)
      v3 = 79;
    else
      v3 = v2;
    this = llvm::raw_ostream::write(this, "                                                                                ", v3);
    v2 -= v3;
  }
  while (v2);
  return this;
}

llvm::raw_ostream *llvm::raw_ostream::operator<<(llvm::raw_ostream *this, unsigned __int8 **a2)
{
  unint64_t v3;
  unsigned __int8 *v5;
  _BOOL4 v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _WORD *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  _BYTE *v16;
  _BYTE *v17;
  unint64_t v18;
  unsigned __int8 *i;
  int v20;
  _BYTE *v21;
  unint64_t v22;
  llvm::raw_ostream *v23;
  _BYTE *v24;
  _BYTE *v25;
  int v27;
  unint64_t v28;
  unint64_t v29;

  v3 = (unint64_t)a2[1];
  v29 = v3;
  if (v3)
  {
    v5 = *a2;
    v6 = *((_BYTE *)a2 + 41) == 0;
    v7 = *((unsigned int *)a2 + 9);
    if (*((_BYTE *)a2 + 24))
    {
      v8 = (unint64_t)&a2[2][v3 / v7 * v7];
      v9 = (67 - __clz(v8 - 1)) >> 2;
      if (v9 <= 4)
        v9 = 4;
      if (v8)
        v10 = v9;
      else
        v10 = 4;
      v28 = v10;
    }
    else
    {
      v28 = 0;
    }
    v11 = 0;
    v27 = (v7 + *((unsigned __int8 *)a2 + 40) - 1) / *((unsigned __int8 *)a2 + 40) + 2 * v7 + 2;
    do
    {
      llvm::raw_ostream::indent(this, *((_DWORD *)a2 + 8));
      if (*((_BYTE *)a2 + 24))
      {
        llvm::write_hex(this, (unint64_t)&a2[2][v11], v6, v28, 1);
        v12 = (_WORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v12 > 1uLL)
        {
          *v12 = 8250;
          *((_QWORD *)this + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(this, ": ", 2uLL);
        }
      }
      if (v3 >= *((unsigned int *)a2 + 9))
        v13 = *((unsigned int *)a2 + 9);
      else
        v13 = v3;
      if (v13)
      {
        v14 = 0;
        v15 = 0;
        do
        {
          if (v14 && !(v14 % *((unsigned __int8 *)a2 + 40)))
          {
            ++v15;
            v16 = (_BYTE *)*((_QWORD *)this + 4);
            if (*((_BYTE **)this + 3) == v16)
            {
              llvm::raw_ostream::write(this, " ", 1uLL);
            }
            else
            {
              *v16 = 32;
              ++*((_QWORD *)this + 4);
            }
          }
          llvm::write_hex(this, v5[v14++], v6, 2uLL, 1);
          v15 += 2;
        }
        while (v13 != v14);
      }
      else
      {
        v15 = 0;
      }
      if (*((_BYTE *)a2 + 42))
      {
        llvm::raw_ostream::indent(this, v27 + ~v15);
        v17 = (_BYTE *)*((_QWORD *)this + 4);
        if (*((_BYTE **)this + 3) == v17)
        {
          llvm::raw_ostream::write(this, "|", 1uLL);
        }
        else
        {
          *v17 = 124;
          ++*((_QWORD *)this + 4);
        }
        v18 = v13;
        for (i = v5; v18; --v18)
        {
          v20 = *i;
          v22 = *((_QWORD *)this + 3);
          v21 = (_BYTE *)*((_QWORD *)this + 4);
          if ((v20 - 32) > 0x5E)
          {
            if ((unint64_t)v21 >= v22)
            {
              v23 = this;
              LOBYTE(v20) = 46;
              goto LABEL_38;
            }
            *((_QWORD *)this + 4) = v21 + 1;
            *v21 = 46;
          }
          else
          {
            if ((unint64_t)v21 >= v22)
            {
              v23 = this;
LABEL_38:
              llvm::raw_ostream::write(v23, v20);
              goto LABEL_39;
            }
            *((_QWORD *)this + 4) = v21 + 1;
            *v21 = v20;
          }
LABEL_39:
          ++i;
        }
        v24 = (_BYTE *)*((_QWORD *)this + 4);
        if ((unint64_t)v24 >= *((_QWORD *)this + 3))
        {
          llvm::raw_ostream::write(this, 124);
        }
        else
        {
          *((_QWORD *)this + 4) = v24 + 1;
          *v24 = 124;
        }
      }
      v11 += v13;
      if (v11 < v29)
      {
        v25 = (_BYTE *)*((_QWORD *)this + 4);
        if ((unint64_t)v25 >= *((_QWORD *)this + 3))
        {
          llvm::raw_ostream::write(this, 10);
        }
        else
        {
          *((_QWORD *)this + 4) = v25 + 1;
          *v25 = 10;
        }
      }
      v5 += v13;
      v3 -= v13;
    }
    while (v3);
  }
  return this;
}

llvm::raw_ostream *llvm::raw_ostream::write_zeros(llvm::raw_ostream *this, unsigned int a2)
{
  unsigned int v2;
  size_t v3;

  v2 = a2;
  if (a2 < 0x50)
    return llvm::raw_ostream::write(this, "", a2);
  do
  {
    if (v2 >= 0x4F)
      v3 = 79;
    else
      v3 = v2;
    this = llvm::raw_ostream::write(this, "", v3);
    v2 -= v3;
  }
  while (v2);
  return this;
}

uint64_t llvm::raw_ostream::prepare_colors(llvm::raw_ostream *this)
{
  return *((unsigned __int8 *)this + 40);
}

uint64_t llvm::raw_fd_ostream::raw_fd_ostream(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  int v5;

  v5 = sub_1C5E71274(a2, a3, a4, 0, 2, 0);
  return llvm::raw_fd_ostream::raw_fd_ostream(a1, v5, 1, 0, 0);
}

{
  int v5;

  v5 = sub_1C5E71274(a2, a3, a4, 0, 2, 0);
  return llvm::raw_fd_ostream::raw_fd_ostream(a1, v5, 1, 0, 0);
}

uint64_t llvm::raw_fd_ostream::raw_fd_ostream(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, int a5, char a6, int a7)
{
  int v8;

  v8 = sub_1C5E71274(a2, a3, a4, a5, a6, a7);
  return llvm::raw_fd_ostream::raw_fd_ostream(a1, v8, 1, 0, 0);
}

{
  int v8;

  v8 = sub_1C5E71274(a2, a3, a4, a5, a6, a7);
  return llvm::raw_fd_ostream::raw_fd_ostream(a1, v8, 1, 0, 0);
}

uint64_t llvm::raw_fd_ostream::raw_fd_ostream(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, int a5)
{
  int v6;

  v6 = sub_1C5E71274(a2, a3, a4, a5, 2, 0);
  return llvm::raw_fd_ostream::raw_fd_ostream(a1, v6, 1, 0, 0);
}

{
  int v6;

  v6 = sub_1C5E71274(a2, a3, a4, a5, 2, 0);
  return llvm::raw_fd_ostream::raw_fd_ostream(a1, v6, 1, 0, 0);
}

{
  int v6;

  v6 = sub_1C5E71274(a2, a3, a4, 0, 2, a5);
  return llvm::raw_fd_ostream::raw_fd_ostream(a1, v6, 1, 0, 0);
}

{
  int v6;

  v6 = sub_1C5E71274(a2, a3, a4, 0, 2, a5);
  return llvm::raw_fd_ostream::raw_fd_ostream(a1, v6, 1, 0, 0);
}

uint64_t llvm::raw_fd_ostream::raw_fd_ostream(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, char a5)
{
  int v6;

  v6 = sub_1C5E71274(a2, a3, a4, 0, a5, 0);
  return llvm::raw_fd_ostream::raw_fd_ostream(a1, v6, 1, 0, 0);
}

{
  int v6;

  v6 = sub_1C5E71274(a2, a3, a4, 0, a5, 0);
  return llvm::raw_fd_ostream::raw_fd_ostream(a1, v6, 1, 0, 0);
}

uint64_t sub_1C5E71274(_BYTE *a1, uint64_t a2, uint64_t a3, int a4, char a5, int a6)
{
  const std::error_category *v7;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  __int16 v14;
  unsigned int v15;

  if (a2 == 1 && *a1 == 45)
  {
    v7 = std::system_category();
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = v7;
    std::system_category();
    return 1;
  }
  else
  {
    v15 = 0;
    v14 = 261;
    v13[0] = a1;
    v13[1] = a2;
    if ((a5 & 1) != 0)
      v10 = 3;
    else
      v10 = 2;
    v11 = llvm::sys::fs::openFile((unsigned __int8 *)v13, (int *)&v15, a4, v10, a6, 438);
    *(_QWORD *)a3 = v11;
    *(_QWORD *)(a3 + 8) = v12;
    if ((_DWORD)v11)
      return 0xFFFFFFFFLL;
    else
      return v15;
  }
}

void llvm::raw_fd_ostream::~raw_fd_ostream(llvm::raw_fd_ostream *this)
{
  const char *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::error_code v7;
  std::string v8;
  std::string *v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  _BYTE v13[40];

  *(_QWORD *)this = &off_1E81A6EE8;
  if ((*((_DWORD *)this + 15) & 0x80000000) == 0)
  {
    v2 = (const char *)*((_QWORD *)this + 4);
    v3 = (const char *)*((_QWORD *)this + 2);
    if (v2 != v3)
    {
      *((_QWORD *)this + 4) = v3;
      llvm::raw_ostream::flush_tied_then_write(this, v3, v2 - v3);
    }
    if (*((_BYTE *)this + 64))
    {
      v4 = llvm::sys::Process::SafelyCloseFileDescriptor((llvm::sys::Process *)*((unsigned int *)this + 15));
      if ((_DWORD)v4)
      {
        *((_QWORD *)this + 9) = v4;
        *((_QWORD *)this + 10) = v5;
      }
    }
  }
  if (*((_DWORD *)this + 18))
  {
    v11 = "IO failure on output stream: ";
    v12 = 259;
    v7 = *(std::error_code *)((char *)this + 72);
    std::error_code::message(&v8, &v7);
    v10 = 260;
    v9 = &v8;
    sub_1C6131AAC((uint64_t *)&v11, (uint64_t *)&v9, (uint64_t)v13);
    llvm::report_fatal_error((uint64_t)v13, 0);
  }
  *(_QWORD *)this = off_1E81A6E70;
  if (*((_DWORD *)this + 14) == 1)
  {
    v6 = *((_QWORD *)this + 2);
    if (v6)
      MEMORY[0x1CAA32F9C](v6, 0x1000C8077774924);
  }
}

{
  llvm::raw_fd_ostream::~raw_fd_ostream(this);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::raw_fd_ostream::write_impl(llvm::raw_fd_ostream *this, const char *__buf, unint64_t a3)
{
  unint64_t v3;
  size_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = a3;
  *((_QWORD *)this + 11) += a3;
  while (1)
  {
    v6 = v3 >= 0x7FFFFFFF ? 0x7FFFFFFFLL : v3;
    result = write(*((_DWORD *)this + 15), __buf, v6);
    if (result < 0)
      break;
    __buf += result;
    v3 -= result;
LABEL_10:
    if (!v3)
      return result;
  }
  result = (uint64_t)__error();
  if (*(_DWORD *)result == 4)
    goto LABEL_10;
  result = (uint64_t)__error();
  if (*(_DWORD *)result == 35)
    goto LABEL_10;
  result = (uint64_t)__error();
  if (*(_DWORD *)result == 35)
    goto LABEL_10;
  v8 = *__error();
  result = (uint64_t)std::generic_category();
  *((_QWORD *)this + 9) = v8;
  *((_QWORD *)this + 10) = result;
  return result;
}

uint64_t llvm::raw_fd_ostream::close(llvm::raw_fd_ostream *this)
{
  const char *v2;
  const char *v3;
  uint64_t result;
  uint64_t v5;

  *((_BYTE *)this + 64) = 0;
  v2 = (const char *)*((_QWORD *)this + 4);
  v3 = (const char *)*((_QWORD *)this + 2);
  if (v2 != v3)
  {
    *((_QWORD *)this + 4) = v3;
    llvm::raw_ostream::flush_tied_then_write(this, v3, v2 - v3);
  }
  result = llvm::sys::Process::SafelyCloseFileDescriptor((llvm::sys::Process *)*((unsigned int *)this + 15));
  if ((_DWORD)result)
  {
    *((_QWORD *)this + 9) = result;
    *((_QWORD *)this + 10) = v5;
  }
  *((_DWORD *)this + 15) = -1;
  return result;
}

off_t llvm::raw_fd_ostream::seek(llvm::raw_fd_ostream *this, off_t a2)
{
  const char *v4;
  const char *v5;
  off_t result;
  uint64_t v7;
  const std::error_category *v8;

  v4 = (const char *)*((_QWORD *)this + 4);
  v5 = (const char *)*((_QWORD *)this + 2);
  if (v4 != v5)
  {
    *((_QWORD *)this + 4) = v5;
    llvm::raw_ostream::flush_tied_then_write(this, v5, v4 - v5);
  }
  result = lseek(*((_DWORD *)this + 15), a2, 0);
  *((_QWORD *)this + 11) = result;
  if (result == -1)
  {
    v7 = *__error();
    v8 = std::generic_category();
    *((_QWORD *)this + 9) = v7;
    *((_QWORD *)this + 10) = v8;
    return *((_QWORD *)this + 11);
  }
  return result;
}

off_t llvm::raw_fd_ostream::pwrite_impl(llvm::raw_fd_ostream *this, const char *a2, size_t a3, off_t a4)
{
  off_t v8;
  llvm::raw_ostream *v9;

  v8 = (*(uint64_t (**)(llvm::raw_fd_ostream *))(*(_QWORD *)this + 80))(this)
     + *((_QWORD *)this + 4)
     - *((_QWORD *)this + 2);
  llvm::raw_fd_ostream::seek(this, a4);
  v9 = llvm::raw_ostream::write(this, a2, a3);
  return llvm::raw_fd_ostream::seek(v9, v8);
}

_QWORD *llvm::raw_fd_ostream::tryLockFor@<X0>(llvm::raw_fd_ostream *this@<X0>, const Duration *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;

  result = (_QWORD *)llvm::sys::fs::tryLockFile(*((_DWORD *)this + 15), *(_QWORD *)a2);
  v7 = result;
  if ((_DWORD)result)
  {
    v8 = v6;
    result = (_QWORD *)operator new();
    *result = &off_1E81A0D28;
    result[1] = v7;
    result[2] = v8;
    v9 = *(_BYTE *)(a3 + 8) | 1;
    *(_QWORD *)a3 = result;
  }
  else
  {
    v9 = *(_BYTE *)(a3 + 8) & 0xFE;
    *(_DWORD *)a3 = *((_DWORD *)this + 15);
  }
  *(_BYTE *)(a3 + 8) = v9;
  return result;
}

off_t llvm::raw_fd_ostream::resetFD(llvm::raw_fd_ostream *this, int a2)
{
  off_t result;
  off_t v5;

  if (*((_BYTE *)this + 64))
  {
    llvm::raw_fd_ostream::close(this);
    *((_BYTE *)this + 64) = 1;
  }
  *((_DWORD *)this + 15) = a2;
  if (a2 <= 2)
    *((_BYTE *)this + 64) = 0;
  result = lseek(a2, 0, 1);
  *((_BYTE *)this + 65) = result != -1;
  if (result == -1)
    v5 = 0;
  else
    v5 = result;
  *((_QWORD *)this + 11) = v5;
  return result;
}

void *llvm::errs(llvm *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_1ED836F60);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1ED836F60))
  {
    llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&unk_1ED836F00, 2, 0, 1, 0);
    __cxa_atexit((void (*)(void *))llvm::raw_fd_ostream::~raw_fd_ostream, &unk_1ED836F00, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED836F60);
  }
  return &unk_1ED836F00;
}

uint64_t *llvm::nulls(llvm *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_1ED836FA8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1ED836FA8))
  {
    dword_1ED836F70 = 0;
    qword_1ED836F98 = 0;
    dword_1ED836FA0 = 0;
    qword_1ED836F80 = 0;
    unk_1ED836F88 = 0;
    qword_1ED836F78 = 0;
    byte_1ED836F90 = 0;
    qword_1ED836F68 = (uint64_t)&off_1E81A7068;
    __cxa_atexit((void (*)(void *))llvm::raw_null_ostream::~raw_null_ostream, &qword_1ED836F68, &dword_1C475E000);
    __cxa_guard_release(&qword_1ED836FA8);
  }
  return &qword_1ED836F68;
}

void llvm::raw_null_ostream::~raw_null_ostream(llvm::raw_null_ostream *this)
{
  uint64_t v1;

  *(_QWORD *)this = off_1E81A6E70;
  if (*((_DWORD *)this + 14) == 1)
  {
    v1 = *((_QWORD *)this + 2);
    if (v1)
      MEMORY[0x1CAA32F9C](v1, 0x1000C8077774924);
  }
}

{
  uint64_t v1;

  *(_QWORD *)this = off_1E81A6E70;
  if (*((_DWORD *)this + 14) == 1)
  {
    v1 = *((_QWORD *)this + 2);
    if (v1)
      MEMORY[0x1CAA32F9C](v1, 0x1000C8077774924);
  }
}

{
  uint64_t v1;

  *(_QWORD *)this = off_1E81A6E70;
  if (*((_DWORD *)this + 14) == 1)
  {
    v1 = *((_QWORD *)this + 2);
    if (v1)
      MEMORY[0x1CAA32F9C](v1, 0x1000C8077774924);
  }
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::raw_fd_stream::raw_fd_stream(uint64_t a1, _BYTE *a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  const std::error_category *v7;

  v6 = sub_1C5E71274(a2, a3, (uint64_t)a4, 0, 3, 0);
  llvm::raw_fd_ostream::raw_fd_ostream(a1, v6, 1, 0, 1);
  *(_QWORD *)a1 = &off_1E81A6F68;
  if (!*(_DWORD *)a4 && !*(_BYTE *)(a1 + 66))
  {
    v7 = std::generic_category();
    *a4 = 22;
    a4[1] = v7;
  }
  return a1;
}

std::string *llvm::raw_string_ostream::write_impl(std::string **this, const char *a2, std::string::size_type a3)
{
  return std::string::append(this[8], a2, a3);
}

uint64_t llvm::raw_svector_ostream::current_pos(llvm::raw_svector_ostream *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 8) + 8);
}

_QWORD *llvm::raw_svector_ostream::write_impl(_QWORD *this, const char *a2, size_t __n)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  const char *v7;

  v4 = (_QWORD *)this[8];
  v5 = v4[1];
  v6 = v5 + __n;
  if (v4[2] >= v6 && __n)
    goto LABEL_3;
  if (v4[2] < v6)
  {
    v7 = a2;
    this = llvm::SmallVectorBase<unsigned long long>::grow_pod(this[8], v4 + 3, v6, 1);
    a2 = v7;
    v5 = v4[1];
  }
  if (__n)
  {
LABEL_3:
    this = memcpy((void *)(*v4 + v5), a2, __n);
    v5 = v4[1];
  }
  v4[1] = v5 + __n;
  return this;
}

void llvm::writeToOutput(llvm *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const llvm::Twine *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[4];
  __int16 v16;
  char *v17;
  char *v18;
  char *v19;
  void (**v20)(llvm::raw_ostream *__hidden);
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char v25;
  uint64_t v26;
  int v27;
  _QWORD v28[3];
  char v29;
  int v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (a2 != 9)
  {
    if (a2 == 1 && *(_BYTE *)a1 == 45)
    {
      llvm::outs(a1);
      v10 = *(_QWORD *)(a3 + 24);
      if (v10)
      {
        (*(void (**)(uint64_t, void *))(*(_QWORD *)v10 + 48))(v10, &unk_1ED836E98);
        return;
      }
      goto LABEL_40;
    }
LABEL_16:
    LOWORD(v24) = 773;
    v20 = (void (**)(llvm::raw_ostream *__hidden))a1;
    v21 = a2;
    v22 = ".temp-stream-%%%%%%";
    llvm::sys::fs::TempFile::create((uint64_t)&v20, 511, 0, (uint64_t)v28);
    if ((v31 & 1) != 0)
    {
      LOWORD(v24) = 261;
      v20 = (void (**)(llvm::raw_ostream *__hidden))a1;
      v21 = a2;
      v13 = v28[0];
      v28[0] = 0;
      v15[0] = v13;
      sub_1C61D4644((llvm::Twine *)&v20, 0, 0, v15, a4);
      if (v15[0])
        (*(void (**)(uint64_t))(*(_QWORD *)v15[0] + 8))(v15[0]);
      goto LABEL_27;
    }
    llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v20, v30, 0, 0, 0);
    v11 = *(_QWORD *)(a3 + 24);
    if (v11)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, void (***)(llvm::raw_ostream *__hidden)))(*(_QWORD *)v11 + 48))(v15, v11, &v20);
      if (v15[0])
      {
        llvm::sys::fs::TempFile::discard((llvm::sys::fs::TempFile *)v28, &v19);
        if (v19)
        {
          v17 = v19;
          v18 = (char *)v15[0];
          v15[0] = 0;
          v19 = 0;
          sub_1C624E8DC(&v18, &v17, a4);
          if (v17)
            (*(void (**)(char *))(*(_QWORD *)v17 + 8))(v17);
          if (v18)
            (*(void (**)(char *))(*(_QWORD *)v18 + 8))(v18);
          if (v19)
            (*(void (**)(char *))(*(_QWORD *)v19 + 8))(v19);
          if (v15[0])
            (*(void (**)(uint64_t))(*(_QWORD *)v15[0] + 8))(v15[0]);
        }
        else
        {
          *a4 = v15[0];
        }
      }
      else
      {
        v12 = (const llvm::Twine *)(v24 - v22);
        if (v24 != v22)
        {
          v24 = v22;
          llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v20, v22, (uint64_t)v12);
        }
        v16 = 261;
        v15[0] = (uint64_t)a1;
        v15[1] = a2;
        llvm::sys::fs::TempFile::keep((llvm::sys::fs::TempFile *)v28, (const llvm::Twine *)v15, v12, a4);
      }
      llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v20);
LABEL_27:
      if ((v31 & 1) != 0)
      {
        v14 = v28[0];
        v28[0] = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      }
      else if (v29 < 0)
      {
        operator delete((void *)v28[1]);
      }
      return;
    }
LABEL_40:
    sub_1C485C2F0();
  }
  if (*(_QWORD *)a1 != 0x6C756E2F7665642FLL || *((_BYTE *)a1 + 8) != 108)
    goto LABEL_16;
  LODWORD(v21) = 0;
  v26 = 0;
  v27 = 0;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  v25 = 0;
  v20 = (void (**)(llvm::raw_ostream *__hidden))&off_1E81A7068;
  v9 = *(_QWORD *)(a3 + 24);
  if (!v9)
    goto LABEL_40;
  (*(void (**)(uint64_t, void (***)(llvm::raw_ostream *__hidden)))(*(_QWORD *)v9 + 48))(v9, &v20);
  v20 = off_1E81A6E70;
  if (v27 == 1 && v22)
    MEMORY[0x1CAA32F9C](v22, 0x1000C8077774924);
}

uint64_t sub_1C5E71D20(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 64);
  if (*(char *)(v1 + 23) < 0)
    return *(_QWORD *)(v1 + 8);
  else
    return *(unsigned __int8 *)(v1 + 23);
}

void sub_1C5E71D40(uint64_t a1)
{
  sub_1C5E72030(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5E71D64(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88);
}

void sub_1C5E71D70(llvm::raw_fd_ostream *a1)
{
  llvm::raw_fd_ostream::~raw_fd_ostream(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5E71D94(_QWORD *a1, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  size_t v9;
  unint64_t v10;
  int v11;
  char v12;
  char *v13;
  unint64_t v14;
  char v15;
  char *v16;
  unsigned int v17;
  unsigned int i;
  char v19;
  char *v20;
  char v21;
  char *v22;
  uint64_t (**v23)();
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  int v30;
  char **v31;
  char *v32;
  unint64_t v33[2];
  _QWORD v34[9];

  v34[8] = *MEMORY[0x1E0C80C00];
  if (!a1[2])
  {
    (*(void (**)(void))(*(_QWORD *)*a1 + 24))();
    return;
  }
  v31 = &v32;
  v32 = (char *)v34;
  *(_OWORD *)v33 = xmmword_1C64638C0;
  v24 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 1;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  v23 = &off_1E81A7280;
  sub_1C5E702D0(&v23);
  (*(void (**)(_QWORD, uint64_t (***)(), uint64_t, uint64_t))(*(_QWORD *)*a1 + 24))(*a1, &v23, a3, a4);
  v8 = a1[2];
  v9 = v33[0];
  v10 = v8 - v33[0];
  if (v8 > v33[0])
  {
    v11 = *((_DWORD *)a1 + 2);
    if (v11 == 1)
    {
      if ((v10 >> 1))
      {
        v14 = v10 >> 1;
        do
        {
          v15 = *((_BYTE *)a1 + 24);
          v16 = (char *)*((_QWORD *)a2 + 4);
          if ((unint64_t)v16 >= *((_QWORD *)a2 + 3))
          {
            llvm::raw_ostream::write(a2, v15);
          }
          else
          {
            *((_QWORD *)a2 + 4) = v16 + 1;
            *v16 = v15;
          }
          LODWORD(v14) = v14 - 1;
        }
        while ((_DWORD)v14);
        v9 = v33[0];
      }
      llvm::raw_ostream::write(a2, v32, v9);
      v17 = v10 - (v10 >> 1);
      if (v17)
      {
        for (i = 0; i < v17; ++i)
        {
          v19 = *((_BYTE *)a1 + 24);
          v20 = (char *)*((_QWORD *)a2 + 4);
          if ((unint64_t)v20 >= *((_QWORD *)a2 + 3))
          {
            llvm::raw_ostream::write(a2, v19);
          }
          else
          {
            *((_QWORD *)a2 + 4) = v20 + 1;
            *v20 = v19;
          }
        }
      }
      goto LABEL_33;
    }
    if (!v11)
    {
      llvm::raw_ostream::write(a2, v32, v33[0]);
      for (; (_DWORD)v10; LODWORD(v10) = v10 - 1)
      {
        v12 = *((_BYTE *)a1 + 24);
        v13 = (char *)*((_QWORD *)a2 + 4);
        if ((unint64_t)v13 >= *((_QWORD *)a2 + 3))
        {
          llvm::raw_ostream::write(a2, v12);
        }
        else
        {
          *((_QWORD *)a2 + 4) = v13 + 1;
          *v13 = v12;
        }
      }
      goto LABEL_33;
    }
    if ((_DWORD)v10)
    {
      do
      {
        v21 = *((_BYTE *)a1 + 24);
        v22 = (char *)*((_QWORD *)a2 + 4);
        if ((unint64_t)v22 >= *((_QWORD *)a2 + 3))
        {
          llvm::raw_ostream::write(a2, v21);
        }
        else
        {
          *((_QWORD *)a2 + 4) = v22 + 1;
          *v22 = v21;
        }
        LODWORD(v10) = v10 - 1;
      }
      while ((_DWORD)v10);
      v9 = v33[0];
    }
  }
  llvm::raw_ostream::write(a2, v32, v9);
LABEL_33:
  v23 = (uint64_t (**)())off_1E81A6E70;
  if (v30 == 1 && v25)
    MEMORY[0x1CAA32F9C](v25, 0x1000C8077774924);
  if (v32 != (char *)v34)
    free(v32);
}

uint64_t sub_1C5E72030(uint64_t a1)
{
  uint64_t v2;
  llvm::raw_ostream *v3;
  const void *v4;
  size_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = &off_1E81A7168;
  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(llvm::raw_ostream **)(a1 + 72);
  v4 = *(const void **)v2;
  v5 = *(_QWORD *)(v2 + 8);
  v6 = (void *)*((_QWORD *)v3 + 4);
  if (v5 <= *((_QWORD *)v3 + 3) - (_QWORD)v6)
  {
    if (v5)
    {
      memcpy(v6, v4, v5);
      *((_QWORD *)v3 + 4) += v5;
    }
  }
  else
  {
    llvm::raw_ostream::write(v3, (const char *)v4, v5);
  }
  v7 = *(void **)(a1 + 80);
  if (v7 != (void *)(a1 + 104))
    free(v7);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *(_QWORD *)a1 = off_1E81A6E70;
  if (*(_DWORD *)(a1 + 56) == 1)
  {
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
      MEMORY[0x1CAA32F9C](v9, 0x1000C8077774924);
  }
  return a1;
}

uint64_t sub_1C5E72108(uint64_t a1)
{
  uint64_t v3;

  *(_QWORD *)a1 = &off_1E81A73F8;
  sub_1C5E72370((_QWORD *)a1);
  *(_QWORD *)a1 = off_1E81A6E70;
  if (*(_DWORD *)(a1 + 56) == 1)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
      MEMORY[0x1CAA32F9C](v3, 0x1000C8077774924);
  }
  return a1;
}

void sub_1C5E72174(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E81A73F8;
  sub_1C5E72370((_QWORD *)a1);
  *(_QWORD *)a1 = off_1E81A6E70;
  if (*(_DWORD *)(a1 + 56) == 1)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
      MEMORY[0x1CAA32F9C](v2, 0x1000C8077774924);
  }
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5E721F0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 16))(*(_QWORD *)(a1 + 64));
}

uint64_t sub_1C5E72200(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 48))(*(_QWORD *)(a1 + 64));
}

uint64_t sub_1C5E72210(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 56))(*(_QWORD *)(a1 + 64));
}

uint64_t sub_1C5E72220(uint64_t a1, char a2)
{
  *(_BYTE *)(a1 + 40) = a2;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 64))(*(_QWORD *)(a1 + 64));
}

llvm::raw_ostream *sub_1C5E72234(uint64_t a1, const char *a2, size_t a3)
{
  return llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 64), a2, a3);
}

uint64_t sub_1C5E7223C(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(a1 + 64);
  return (*(uint64_t (**)(_QWORD *))(*v1 + 80))(v1) + v1[4] - v1[2];
}

uint64_t sub_1C5E72278(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_1C5E72280(uint64_t a1)
{
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E81A4E80;
  sub_1C639A4DC((_QWORD *)a1);
  *(_QWORD *)a1 = off_1E81A6E70;
  if (*(_DWORD *)(a1 + 56) == 1)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
      MEMORY[0x1CAA32F9C](v3, 0x1000C8077774924);
  }
  return a1;
}

void sub_1C5E722F0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &unk_1E81A4E80;
  sub_1C639A4DC((_QWORD *)a1);
  *(_QWORD *)a1 = off_1E81A6E70;
  if (*(_DWORD *)(a1 + 56) == 1)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
      MEMORY[0x1CAA32F9C](v2, 0x1000C8077774924);
  }
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5E72370(_QWORD *this)
{
  _QWORD *v1;
  const char *v2;
  _QWORD *v3;
  const char *v4;
  uint64_t v5;

  v1 = this;
  v3 = this + 2;
  v2 = (const char *)this[2];
  v4 = (const char *)this[4];
  v5 = v4 - v2;
  if (v4 != v2)
  {
    this[4] = v2;
    this = (_QWORD *)llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)this, v2, v5);
  }
  if (*((_DWORD *)v1 + 14) == 1)
  {
    this = (_QWORD *)*v3;
    if (*v3)
      this = (_QWORD *)MEMORY[0x1CAA32F9C](this, 0x1000C8077774924, v5);
  }
  *((_DWORD *)v1 + 14) = 0;
  v1[8] = 0;
  v3[1] = 0;
  v3[2] = 0;
  *v3 = 0;
  return this;
}

uint64_t sub_1C5E723E8(uint64_t a1)
{
  uint64_t v3;

  *(_QWORD *)a1 = &off_1E81A73F8;
  sub_1C5E72370((_QWORD *)a1);
  *(_QWORD *)a1 = off_1E81A6E70;
  if (*(_DWORD *)(a1 + 56) == 1)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
      MEMORY[0x1CAA32F9C](v3, 0x1000C8077774924);
  }
  return a1;
}

void sub_1C5E72454(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E81A73F8;
  sub_1C5E72370((_QWORD *)a1);
  *(_QWORD *)a1 = off_1E81A6E70;
  if (*(_DWORD *)(a1 + 56) == 1)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
      MEMORY[0x1CAA32F9C](v2, 0x1000C8077774924);
  }
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm_regcomp(uint64_t a1, char *__s, int a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v7;
  size_t v9;
  unint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  unint64_t v13;
  void *v14;
  _QWORD *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t i;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  void *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  void *ptr;
  __int128 v62;
  uint64_t v63;
  _DWORD *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;

  if ((~a3 & 0x11) == 0)
    return 16;
  v75 = v3;
  v76 = v4;
  v7 = __s;
  if ((a3 & 0x20) != 0)
  {
    v10 = *(_QWORD *)(a1 + 16);
    v9 = v10 - (_QWORD)__s;
    if (v10 < (unint64_t)__s)
      return 16;
  }
  else
  {
    v9 = strlen(__s);
  }
  v11 = malloc_type_malloc(0x18FuLL, 0xE334DFFDuLL);
  if (!v11)
    return 12;
  v12 = v11;
  v63 = 0;
  v60 = 0;
  v62 = 0u;
  v13 = 3 * (v9 >> 1);
  *(_QWORD *)&v62 = v13 + 1;
  v14 = malloc_type_calloc(v13 + 1, 8uLL, 0x100004000313F17uLL);
  ptr = v14;
  if (!v14)
  {
    free(v12);
    return 12;
  }
  v15 = v14;
  v64 = v12;
  v16 = &v7[v9];
  v59.n128_u64[0] = (unint64_t)v7;
  v59.n128_u64[1] = (unint64_t)&v7[v9];
  LODWORD(v60) = 0;
  LODWORD(v63) = 0;
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  v68 = 0u;
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  v73 = 0u;
  v74 = 0u;
  v12[4] = 256;
  *(_QWORD *)(v12 + 5) = 0;
  v17 = v12 + 5;
  *(_QWORD *)(v12 + 7) = 0;
  v12[9] = 0;
  *(_OWORD *)(v12 + 34) = 0u;
  *(_OWORD *)(v12 + 66) = 0u;
  v12[10] = a3 & 0xFFFFFF7F;
  v12[26] = 0;
  *((_QWORD *)v12 + 14) = 0;
  *(_OWORD *)(v12 + 18) = xmmword_1C850F3B0;
  *((_QWORD *)v12 + 11) = v12 + 66;
  *((_QWORD *)v12 + 12) = 0;
  *(_OWORD *)(v12 + 38) = 0u;
  *(_OWORD *)(v12 + 42) = 0u;
  *(_OWORD *)(v12 + 46) = 0u;
  *(_OWORD *)(v12 + 50) = 0u;
  *(_OWORD *)(v12 + 54) = 0u;
  *(_OWORD *)(v12 + 58) = 0u;
  *(_OWORD *)(v12 + 62) = 0u;
  *(_OWORD *)(v12 + 70) = 0u;
  *(_OWORD *)(v12 + 74) = 0u;
  *(_OWORD *)(v12 + 78) = 0u;
  *(_OWORD *)(v12 + 82) = 0u;
  *(_OWORD *)(v12 + 86) = 0u;
  *(_OWORD *)(v12 + 90) = 0u;
  *(_OWORD *)(v12 + 94) = 0u;
  v12[30] = 0;
  if (v13 < 0x7FFFFFFFFFFFFFFFLL)
    goto LABEL_16;
  v18 = v13 + 2;
  if ((uint64_t)(v13 + 2) < 0)
    v18 = v13 + 3;
  v19 = (v18 & 0xFFFFFFFFFFFFFFFELL) + (v18 >> 1);
  if ((uint64_t)(v13 + 1) >= (uint64_t)v19)
  {
LABEL_16:
    v21 = 1;
  }
  else if (v19 >> 61 || (v20 = malloc_type_realloc(v14, 24 * (v18 >> 1), 0x100004000313F17uLL)) == 0)
  {
    v21 = 0;
    LODWORD(v60) = 12;
    v7 = &byte_1EF8F5818;
    v59.n128_u64[0] = (unint64_t)&byte_1EF8F5818;
    v59.n128_u64[1] = (unint64_t)&byte_1EF8F5818;
    v16 = &byte_1EF8F5818;
  }
  else
  {
    ptr = v20;
    *(_QWORD *)&v62 = 0;
    v21 = 1;
    v15 = v20;
  }
  *((_QWORD *)&v62 + 1) = 1;
  *v15 = 0x8000000;
  *((_QWORD *)v12 + 7) = *((_QWORD *)&v62 + 1) - 1;
  if ((a3 & 1) != 0)
  {
    sub_1C5E72C50((uint64_t)&v59, 128);
  }
  else if ((a3 & 0x10) != 0)
  {
    if (v16 - v7 <= 0)
    {
      if (v21)
        LODWORD(v60) = 14;
      v7 = &byte_1EF8F5818;
      v59.n128_u64[0] = (unint64_t)&byte_1EF8F5818;
      v59.n128_u64[1] = (unint64_t)&byte_1EF8F5818;
      v16 = &byte_1EF8F5818;
    }
    if (v16 - v7 >= 1)
    {
      do
      {
        v59.n128_u64[0] = (unint64_t)(v7 + 1);
        sub_1C5E74854(&v59, *v7);
        v7 = (char *)v59.n128_u64[0];
      }
      while ((uint64_t)(v59.n128_u64[1] - v59.n128_u64[0]) > 0);
    }
  }
  else
  {
    sub_1C5E73580((uint64_t)&v59, 128, 128);
  }
  v22 = *((_QWORD *)&v62 + 1);
  if (!(_DWORD)v60)
  {
    if (*((uint64_t *)&v62 + 1) < (uint64_t)v62)
      goto LABEL_37;
    v23 = v62 + 2;
    if ((uint64_t)v62 >= -1)
      v23 = v62 + 1;
    v24 = (v23 & 0xFFFFFFFFFFFFFFFELL) + (v23 >> 1);
    if ((uint64_t)v62 >= (uint64_t)v24)
    {
LABEL_37:
      v25 = 0;
    }
    else
    {
      if (v24 >> 61)
      {
        v25 = 12;
        LODWORD(v60) = 12;
        v59.n128_u64[0] = (unint64_t)&byte_1EF8F5818;
        v59.n128_u64[1] = (unint64_t)&byte_1EF8F5818;
        goto LABEL_39;
      }
      v53 = malloc_type_realloc(ptr, 24 * (v23 >> 1), 0x100004000313F17uLL);
      if (v53)
      {
        ptr = v53;
        *(_QWORD *)&v62 = v24;
        v25 = v60;
      }
      else
      {
        v25 = v60;
        if (!(_DWORD)v60)
        {
          v25 = 12;
          LODWORD(v60) = 12;
        }
        v59.n128_u64[0] = (unint64_t)&byte_1EF8F5818;
        v59.n128_u64[1] = (unint64_t)&byte_1EF8F5818;
      }
    }
    v22 = *((_QWORD *)&v62 + 1);
LABEL_39:
    *((_QWORD *)&v62 + 1) = v22 + 1;
    *((_QWORD *)ptr + v22) = 0x8000000;
    v22 = *((_QWORD *)&v62 + 1);
    *((_QWORD *)v12 + 8) = *((_QWORD *)&v62 + 1) - 1;
    if (!v25)
    {
      v26 = *((_QWORD *)v12 + 11);
      for (i = -128; i != 128; ++i)
      {
        if (!*(_BYTE *)(v26 + i) && *v17 >= 1)
        {
          v28 = (*v17 + 7) >> 3;
          v29 = *((_QWORD *)v12 + 4);
          while (!*(_BYTE *)(v29 + i))
          {
            v29 += (int)v12[4];
            if (!--v28)
              goto LABEL_42;
          }
          v30 = v12[21];
          v12[21] = v30 + 1;
          *(_BYTE *)(v26 + i) = v30;
          if (i <= 126)
          {
            v31 = i;
            do
            {
              ++v31;
              if (!*(_BYTE *)(v26 + v31))
              {
                if (*v17 < 1)
                {
LABEL_56:
                  *(_BYTE *)(v26 + v31) = v30;
                }
                else
                {
                  v32 = (*v17 + 7) >> 3;
                  v33 = *((_QWORD *)v12 + 4);
                  while (*(unsigned __int8 *)(v33 + i) == *(unsigned __int8 *)(v33
                                                                                               + v31))
                  {
                    v33 += (int)v12[4];
                    if (!--v32)
                      goto LABEL_56;
                  }
                }
              }
            }
            while (v31 != 127);
          }
        }
LABEL_42:
        ;
      }
      v22 = *((_QWORD *)&v62 + 1);
    }
    goto LABEL_60;
  }
  *((_QWORD *)v12 + 8) = *((_QWORD *)&v62 + 1) - 1;
LABEL_60:
  *((_QWORD *)v12 + 6) = v22;
  if (v22 >> 61)
  {
    *((_QWORD *)v12 + 1) = ptr;
    LODWORD(v34) = v60;
    if (!(_DWORD)v60)
    {
      LODWORD(v34) = 12;
      LODWORD(v60) = 12;
    }
    v35 = 0;
    v36 = 0;
    v59.n128_u64[0] = (unint64_t)&byte_1EF8F5818;
    v59.n128_u64[1] = (unint64_t)&byte_1EF8F5818;
    goto LABEL_96;
  }
  v37 = (char *)malloc_type_realloc(ptr, 8 * v22, 0x100004000313F17uLL);
  *((_QWORD *)v12 + 1) = v37;
  LODWORD(v34) = v60;
  if (!v37)
  {
    if (!(_DWORD)v60)
    {
      LODWORD(v34) = 12;
      LODWORD(v60) = 12;
    }
    v35 = 0;
    v36 = 0;
    v59.n128_u64[0] = (unint64_t)&byte_1EF8F5818;
    v59.n128_u64[1] = (unint64_t)&byte_1EF8F5818;
    *((_QWORD *)v12 + 1) = ptr;
    goto LABEL_96;
  }
  if ((_DWORD)v60)
    goto LABEL_95;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = (uint64_t *)(v37 + 8);
  v42 = (uint64_t *)(v37 + 8);
  do
  {
    v44 = *v42++;
    LODWORD(v43) = v44;
    v45 = ((unint64_t)(v44 & 0xF8000000) - 0x10000000) >> 27;
    if (v45 > 0xD)
      goto LABEL_79;
    if (((1 << v45) & 0x1880) != 0)
      goto LABEL_82;
    if (((1 << v45) & 0x2200) != 0)
    {
      v42 = v41;
      while (1)
      {
        v42 += v43 & 0x7FFFFFF;
        v43 = *v42;
        v46 = *v42 & 0xF8000000;
        if (v46 == 1610612736)
          break;
        if ((_DWORD)v46 != -2013265920)
        {
          if ((_DWORD)v46 == -1879048192)
            break;
          v12[18] |= 4u;
          goto LABEL_94;
        }
      }
LABEL_79:
      if (v40 > (int)v12[26])
      {
        v12[26] = v40;
        v38 = v39;
      }
      v40 = 0;
      goto LABEL_82;
    }
    if (v45)
      goto LABEL_79;
    if (!v40)
      v39 = v41;
    ++v40;
LABEL_82:
    v41 = v42;
  }
  while ((v43 & 0xF8000000) != 0x8000000);
  v47 = (int)v12[26];
  if ((_DWORD)v47)
  {
    v48 = malloc_type_malloc(v47 + 1, 0x61097D62uLL);
    *((_QWORD *)v12 + 12) = v48;
    if (v48)
    {
      v49 = v12[26];
      if ((int)v49 >= 1)
      {
        do
        {
          do
          {
            v51 = *v38++;
            v50 = v51;
          }
          while ((v51 & 0xF8000000) != 0x10000000);
          *v48++ = v50;
        }
        while (v49-- > 1);
      }
      *v48 = 0;
    }
    else
    {
      v12[26] = 0;
    }
  }
LABEL_94:
  LODWORD(v34) = v60;
  if ((_DWORD)v60)
  {
LABEL_95:
    v35 = 0;
    v36 = 0;
  }
  else
  {
    v34 = 0;
    v36 = 0;
    v54 = (uint64_t *)(*((_QWORD *)v12 + 1) + 8);
    do
    {
      v55 = *v54++;
      v56 = v55 & 0xF8000000;
      if (v34 <= v36)
        v57 = v36;
      else
        v57 = v34;
      v58 = v34 - 1;
      if ((_DWORD)v56 == 1207959552)
        ++v34;
      if ((_DWORD)v56 == 1342177280)
      {
        v34 = v58;
        v36 = v57;
      }
    }
    while (v56 != 0x8000000);
    if (v34)
    {
      LODWORD(v34) = 0;
      v12[18] |= 4u;
    }
    v35 = 1;
  }
LABEL_96:
  *((_QWORD *)v12 + 16) = v36;
  *v12 = 53829;
  *(_QWORD *)(a1 + 8) = *((_QWORD *)v12 + 14);
  *(_QWORD *)(a1 + 24) = v12;
  *(_DWORD *)a1 = 62053;
  if ((v12[18] & 4) != 0)
  {
    if (v35)
    {
      LODWORD(v34) = 15;
      LODWORD(v60) = 15;
    }
    v59.n128_u64[0] = (unint64_t)&byte_1EF8F5818;
    v59.n128_u64[1] = (unint64_t)&byte_1EF8F5818;
  }
  if (!(_DWORD)v34)
    return 0;
  llvm_regfree(a1);
  return v60;
}

void **sub_1C5E72BDC(void **result, uint64_t a2, uint64_t a3)
{
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if (!*((_DWORD *)result + 4))
  {
    v5 = result;
    v7 = (uint64_t)result[4];
    v6 = (uint64_t)result[5];
    if (v6 >= v7)
    {
      v8 = v7 + 2;
      if (v7 >= -1)
        v8 = v7 + 1;
      result = sub_1C5E75050(result, (v8 & 0xFFFFFFFFFFFFFFFELL) + (v8 >> 1));
      v6 = (uint64_t)v5[5];
    }
    v9 = v5[3];
    v5[5] = (void *)(v6 + 1);
    v9[v6] = a3 | a2;
  }
  return result;
}

void sub_1C5E72C50(uint64_t a1, int a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int v9;
  uint64_t v10;
  char *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int32x2_t *v37;
  int32x2_t v38;
  int32x2_t v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unsigned __int8 *v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;

  v4 = 0;
  v5 = 0;
  v73 = 0;
  while (2)
  {
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(char **)a1;
    v8 = *(char **)(a1 + 8);
    if ((uint64_t)&v8[-*(_QWORD *)a1] < 1)
      goto LABEL_143;
    while (1)
    {
      v9 = *v7;
      v10 = *(_QWORD *)(a1 + 40);
      if (v9 == 124 || v9 == a2)
        break;
      v12 = v7 + 1;
      *(_QWORD *)a1 = v7 + 1;
      v13 = *v7;
      if (v13 <= 62)
      {
        switch(*v7)
        {
          case '$':
            if (!*(_DWORD *)(a1 + 16))
            {
              v14 = *(_QWORD *)(a1 + 32);
              v15 = v10;
              if (v10 >= v14)
              {
                v16 = v14 + 2;
                if (v14 >= -1)
                  v16 = v14 + 1;
                sub_1C5E75050((void **)a1, (v16 & 0xFFFFFFFFFFFFFFFELL) + (v16 >> 1));
                v15 = *(_QWORD *)(a1 + 40);
              }
              v17 = *(_QWORD *)(a1 + 24);
              *(_QWORD *)(a1 + 40) = v15 + 1;
              *(_QWORD *)(v17 + 8 * v15) = 0x20000000;
            }
            v18 = *(_QWORD *)(a1 + 56);
            *(_DWORD *)(v18 + 72) |= 2u;
            ++*(_DWORD *)(v18 + 80);
            goto LABEL_72;
          case '(':
            if (v8 - v12 <= 0)
            {
              if (!*(_DWORD *)(a1 + 16))
                *(_DWORD *)(a1 + 16) = 8;
              *(_QWORD *)a1 = &byte_1EF8F5818;
              *(_QWORD *)(a1 + 8) = &byte_1EF8F5818;
            }
            v25 = *(_QWORD *)(a1 + 56);
            v26 = *(_QWORD *)(v25 + 112);
            v27 = v26 + 1;
            *(_QWORD *)(v25 + 112) = v26 + 1;
            if (v26 + 1 <= 9)
              *(_QWORD *)(a1 + 8 * v27 + 64) = v10;
            sub_1C5E72BDC((void **)a1, 1744830464, v26 + 1);
            if ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) < 1 || **(_BYTE **)a1 != 41)
              sub_1C5E72C50(a1, 41);
            if (v27 <= 9)
              *(_QWORD *)(a1 + 8 * v27 + 144) = *(_QWORD *)(a1 + 40);
            sub_1C5E72BDC((void **)a1, 1879048192, v27);
            v28 = *(char **)a1;
            if ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) < 1)
              goto LABEL_47;
            *(_QWORD *)a1 = v28 + 1;
            if (*v28 != 41)
              goto LABEL_47;
            goto LABEL_72;
          case ')':
LABEL_47:
            if (*(_DWORD *)(a1 + 16))
              goto LABEL_50;
            v24 = 8;
            break;
          case '*':
          case '+':
            goto LABEL_32;
          case '.':
            if ((*(_BYTE *)(*(_QWORD *)(a1 + 56) + 40) & 8) != 0)
            {
              *(_QWORD *)a1 = &v74;
              *(_QWORD *)(a1 + 8) = (char *)&v74 + 3;
              v74 = 6097502;
              sub_1C5E73CC4(a1);
              *(_QWORD *)a1 = v12;
              *(_QWORD *)(a1 + 8) = v8;
            }
            else if (!*(_DWORD *)(a1 + 16))
            {
              v29 = *(_QWORD *)(a1 + 32);
              v30 = v10;
              if (v10 >= v29)
              {
                v31 = v29 + 2;
                if (v29 >= -1)
                  v31 = v29 + 1;
                sub_1C5E75050((void **)a1, (v31 & 0xFFFFFFFFFFFFFFFELL) + (v31 >> 1));
                v30 = *(_QWORD *)(a1 + 40);
              }
              v32 = *(_QWORD *)(a1 + 24);
              *(_QWORD *)(a1 + 40) = v30 + 1;
              *(_QWORD *)(v32 + 8 * v30) = 671088640;
            }
            goto LABEL_72;
          default:
            goto LABEL_71;
        }
LABEL_49:
        *(_DWORD *)(a1 + 16) = v24;
        goto LABEL_50;
      }
      if (v13 > 93)
      {
        if (v13 != 94)
        {
          if (v13 == 123)
          {
            if (v8 - v12 >= 1 && *v12 - 48 <= 9)
            {
              if (!*(_DWORD *)(a1 + 16))
                *(_DWORD *)(a1 + 16) = 13;
              *(_QWORD *)a1 = &byte_1EF8F5818;
              *(_QWORD *)(a1 + 8) = &byte_1EF8F5818;
            }
          }
          else if (v13 == 124)
          {
            if (!*(_DWORD *)(a1 + 16))
            {
              v24 = 14;
              goto LABEL_49;
            }
            goto LABEL_50;
          }
LABEL_71:
          sub_1C5E74854((__n128 *)a1, v13);
          goto LABEL_72;
        }
        if (!*(_DWORD *)(a1 + 16))
        {
          v33 = *(_QWORD *)(a1 + 32);
          v34 = v10;
          if (v10 >= v33)
          {
            v35 = v33 + 2;
            if (v33 >= -1)
              v35 = v33 + 1;
            sub_1C5E75050((void **)a1, (v35 & 0xFFFFFFFFFFFFFFFELL) + (v35 >> 1));
            v34 = *(_QWORD *)(a1 + 40);
          }
          v36 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 40) = v34 + 1;
          *(_QWORD *)(v36 + 8 * v34) = 402653184;
        }
        v23 = 0;
        v37 = *(int32x2_t **)(a1 + 56);
        v38 = v37[9];
        v39 = vadd_s32(v38, (int32x2_t)0x100000001);
        v38.i32[0] |= 1u;
        v38.i32[1] = v39.i32[1];
        v37[9] = v38;
      }
      else
      {
        if (v13 == 63)
        {
LABEL_32:
          if (!*(_DWORD *)(a1 + 16))
          {
            v24 = 13;
            goto LABEL_49;
          }
          goto LABEL_50;
        }
        if (v13 == 91)
        {
          sub_1C5E73CC4(a1);
          goto LABEL_72;
        }
        if (v13 != 92)
          goto LABEL_71;
        if (v8 - v12 <= 0)
        {
          if (!*(_DWORD *)(a1 + 16))
            *(_DWORD *)(a1 + 16) = 5;
          *(_QWORD *)(a1 + 8) = &byte_1EF8F5818;
          v12 = &byte_1EF8F5818;
        }
        *(_QWORD *)a1 = v12 + 1;
        v13 = *v12;
        if ((v13 - 49) > 8)
          goto LABEL_71;
        v19 = (v13 - 48);
        v20 = a1 + 8 * v19;
        v22 = *(_QWORD *)(v20 + 144);
        v21 = (uint64_t *)(v20 + 144);
        if (!v22)
        {
          if (!*(_DWORD *)(a1 + 16))
          {
            v24 = 6;
            goto LABEL_49;
          }
LABEL_50:
          *(_QWORD *)a1 = &byte_1EF8F5818;
          *(_QWORD *)(a1 + 8) = &byte_1EF8F5818;
LABEL_72:
          v23 = 1;
          goto LABEL_73;
        }
        sub_1C5E72BDC((void **)a1, 939524096, v19);
        sub_1C5E747EC(a1, *(_QWORD *)(a1 + 8 * v19 + 64) + 1, *v21);
        sub_1C5E72BDC((void **)a1, 0x40000000, v19);
        v23 = 1;
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + 120) = 1;
      }
LABEL_73:
      v7 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v40 = (uint64_t)&v8[-*(_QWORD *)a1];
      if (v40 >= 1)
      {
        if ((v41 = *v7, (v41 - 42) < 2)
          || v41 == 63
          || (v41 == 123 ? (v42 = (unint64_t)v40 >= 2) : (v42 = 0),
              v42 && v7[1] - 48 <= 9))
        {
          *(_QWORD *)a1 = v7 + 1;
          if ((v23 & 1) == 0)
          {
            if (!*(_DWORD *)(a1 + 16))
              *(_DWORD *)(a1 + 16) = 13;
            *(_QWORD *)a1 = &byte_1EF8F5818;
            *(_QWORD *)(a1 + 8) = &byte_1EF8F5818;
          }
          if ((char)v41 > 62)
          {
            if ((char)v41 == 63)
            {
              sub_1C5E73C24((_QWORD *)a1, 2013265920, *(_QWORD *)(a1 + 40) - v10 + 1, v10);
              sub_1C5E72BDC((void **)a1, 0x80000000, *(_QWORD *)(a1 + 40) - v10);
              if (!*(_DWORD *)(a1 + 16))
              {
                v50 = *(_QWORD *)(a1 + 24);
                *(_QWORD *)(v50 + 8 * v10) = *(_QWORD *)(v50 + 8 * v10) & 0xF8000000 | (*(_QWORD *)(a1 + 40) - v10);
                v52 = *(_QWORD *)(a1 + 32);
                v51 = *(_QWORD *)(a1 + 40);
                if (v51 >= v52)
                {
                  v53 = v52 + 2;
                  if (v52 >= -1)
                    v53 = v52 + 1;
                  sub_1C5E75050((void **)a1, (v53 & 0xFFFFFFFFFFFFFFFELL) + (v53 >> 1));
                  v50 = *(_QWORD *)(a1 + 24);
                  v54 = *(_QWORD *)(a1 + 40);
                  v55 = *(_DWORD *)(a1 + 16);
                  *(_QWORD *)(a1 + 40) = v54 + 1;
                  *(_QWORD *)(v50 + 8 * v54) = 2281701376;
                  if (v55)
                    goto LABEL_128;
                }
                else
                {
                  *(_QWORD *)(a1 + 40) = v51 + 1;
                  *(_QWORD *)(v50 + 8 * v51) = 2281701376;
                }
                *(_QWORD *)(v50 + 8 * *(_QWORD *)(a1 + 40) - 8) = *(_QWORD *)(v50 + 8 * *(_QWORD *)(a1 + 40) - 8) & 0xF8000000 | 1;
                v57 = *(_QWORD *)(a1 + 32);
                v56 = *(_QWORD *)(a1 + 40);
                if (v56 >= v57)
                {
                  v58 = v57 + 2;
                  if (v57 >= -1)
                    v58 = v57 + 1;
                  sub_1C5E75050((void **)a1, (v58 & 0xFFFFFFFFFFFFFFFELL) + (v58 >> 1));
                  v50 = *(_QWORD *)(a1 + 24);
                  v56 = *(_QWORD *)(a1 + 40);
                }
                *(_QWORD *)(a1 + 40) = v56 + 1;
                *(_QWORD *)(v50 + 8 * v56) = 2415919106;
              }
            }
            else if ((char)v41 == 123)
            {
              v46 = sub_1C5E74940((uint64_t *)a1);
              v47 = v46;
              v48 = *(char **)a1;
              v49 = v46;
              if ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >= 1)
              {
                v49 = v46;
                if (*v48 == 44)
                {
                  *(_QWORD *)a1 = v48 + 1;
                  if (v48[1] - 48 > 9)
                  {
                    v49 = 256;
                  }
                  else
                  {
                    v49 = sub_1C5E74940((uint64_t *)a1);
                    if (v47 > (int)v49)
                    {
                      if (!*(_DWORD *)(a1 + 16))
                        *(_DWORD *)(a1 + 16) = 10;
                      *(_QWORD *)a1 = &byte_1EF8F5818;
                      *(_QWORD *)(a1 + 8) = &byte_1EF8F5818;
                    }
                  }
                }
              }
              sub_1C5E749D4((void **)a1, v10, v47, v49);
              v60 = *(char **)a1;
              v59 = *(_QWORD *)(a1 + 8);
              if (v59 - *(_QWORD *)a1 >= 1)
              {
                if (*v60 == 125)
                {
                  *(_QWORD *)a1 = v60 + 1;
                  goto LABEL_128;
                }
                v61 = ~(unint64_t)v60 + v59;
                v62 = (unsigned __int8 *)(v60 + 1);
                while (1)
                {
                  *(_QWORD *)a1 = v62;
                  if (v61 <= 0)
                    break;
                  v63 = *v62++;
                  --v61;
                  if (v63 == 125)
                  {
                    if (*(_DWORD *)(a1 + 16))
                      goto LABEL_127;
                    v64 = 10;
                    goto LABEL_126;
                  }
                }
              }
              if (!*(_DWORD *)(a1 + 16))
              {
                v64 = 9;
LABEL_126:
                *(_DWORD *)(a1 + 16) = v64;
              }
LABEL_127:
              *(_QWORD *)a1 = &byte_1EF8F5818;
              *(_QWORD *)(a1 + 8) = &byte_1EF8F5818;
            }
          }
          else if ((char)v41 == 42)
          {
            sub_1C5E73C24((_QWORD *)a1, 1207959552, *(_QWORD *)(a1 + 40) - v10 + 1, v10);
            sub_1C5E72BDC((void **)a1, 1342177280, *(_QWORD *)(a1 + 40) - v10);
            sub_1C5E73C24((_QWORD *)a1, 1476395008, *(_QWORD *)(a1 + 40) - v10 + 1, v10);
            v43 = *(_QWORD *)(a1 + 40) - v10;
            v44 = (void **)a1;
            v45 = 1610612736;
LABEL_100:
            sub_1C5E72BDC(v44, v45, v43);
          }
          else if ((char)v41 == 43)
          {
            sub_1C5E73C24((_QWORD *)a1, 1207959552, *(_QWORD *)(a1 + 40) - v10 + 1, v10);
            v43 = *(_QWORD *)(a1 + 40) - v10;
            v44 = (void **)a1;
            v45 = 1342177280;
            goto LABEL_100;
          }
LABEL_128:
          v7 = *(char **)a1;
          v8 = *(char **)(a1 + 8);
          v65 = (uint64_t)&v8[-*(_QWORD *)a1];
          if (v65 >= 1)
          {
            if ((v66 = *v7, (v66 - 42) < 2)
              || v66 == 63
              || (v66 == 123 ? (v67 = (unint64_t)v65 >= 2) : (v67 = 0),
                  v67 && v7[1] - 48 <= 9))
            {
              if (!*(_DWORD *)(a1 + 16))
                *(_DWORD *)(a1 + 16) = 13;
              *(_QWORD *)a1 = &byte_1EF8F5818;
              *(_QWORD *)(a1 + 8) = &byte_1EF8F5818;
              v7 = &byte_1EF8F5818;
              v8 = &byte_1EF8F5818;
            }
          }
        }
      }
      if (v8 - v7 <= 0)
      {
        v10 = *(_QWORD *)(a1 + 40);
        break;
      }
    }
    if (v10 == v6)
    {
LABEL_143:
      if (!*(_DWORD *)(a1 + 16))
        *(_DWORD *)(a1 + 16) = 14;
      *(_QWORD *)a1 = &byte_1EF8F5818;
      *(_QWORD *)(a1 + 8) = &byte_1EF8F5818;
      v10 = v6;
      v7 = &byte_1EF8F5818;
      v8 = &byte_1EF8F5818;
    }
    if (v8 - v7 >= 1 && *v7 == 124)
    {
      *(_QWORD *)a1 = v7 + 1;
      if ((v5 & 1) != 0)
      {
        v6 = v73;
        v68 = v4;
      }
      else
      {
        sub_1C5E73C24((_QWORD *)a1, 2013265920, v10 - v6 + 1, v6);
        v10 = *(_QWORD *)(a1 + 40);
        v68 = v6;
      }
      sub_1C5E72BDC((void **)a1, 0x80000000, v10 - v6);
      v4 = *(_QWORD *)(a1 + 40);
      v73 = v4 - 1;
      v5 = 1;
      if (!*(_DWORD *)(a1 + 16))
      {
        v69 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(v69 + 8 * v68) = *(_QWORD *)(v69 + 8 * v68) & 0xF8000000 | (v4 - v68);
        v70 = *(_QWORD *)(a1 + 32);
        v4 = *(_QWORD *)(a1 + 40);
        v71 = v4;
        if (v4 >= v70)
        {
          v72 = v70 + 2;
          if (v70 >= -1)
            v72 = v70 + 1;
          sub_1C5E75050((void **)a1, (v72 & 0xFFFFFFFFFFFFFFFELL) + (v72 >> 1));
          v69 = *(_QWORD *)(a1 + 24);
          v71 = *(_QWORD *)(a1 + 40);
        }
        *(_QWORD *)(a1 + 40) = v71 + 1;
        *(_QWORD *)(v69 + 8 * v71) = 2281701376;
      }
      continue;
    }
    break;
  }
  if ((v5 & 1) != 0)
  {
    if (!*(_DWORD *)(a1 + 16))
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v4) = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v4) & 0xF8000000 | (v10 - v4);
      v10 = *(_QWORD *)(a1 + 40);
    }
    sub_1C5E72BDC((void **)a1, 2415919104, v10 - v73);
  }
}

void sub_1C5E73580(uint64_t a1, int a2, int a3)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int32x2_t *v14;
  int32x2_t v15;
  int32x2_t v16;
  int v17;
  char v18;
  uint64_t v19;
  char *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  char *v44;
  uint64_t v45;
  _BYTE *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;

  v4 = *(char **)a1;
  v5 = *(char **)(a1 + 8);
  v6 = (uint64_t)&v5[-*(_QWORD *)a1];
  if (v6 < 1)
    goto LABEL_119;
  v9 = *(_QWORD *)(a1 + 40);
  if (*v4 == 94)
  {
    *(_QWORD *)a1 = ++v4;
    if (!*(_DWORD *)(a1 + 16))
    {
      v10 = *(_QWORD *)(a1 + 32);
      if (v9 >= v10)
      {
        v12 = v10 + 2;
        if (v10 >= -1)
          v12 = v10 + 1;
        sub_1C5E75050((void **)a1, (v12 & 0xFFFFFFFFFFFFFFFELL) + (v12 >> 1));
        v11 = *(_QWORD *)(a1 + 40);
        v4 = *(char **)a1;
        v5 = *(char **)(a1 + 8);
      }
      else
      {
        v11 = v9;
      }
      v13 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 40) = v11 + 1;
      *(_QWORD *)(v13 + 8 * v11) = 402653184;
    }
    v14 = *(int32x2_t **)(a1 + 56);
    v15 = v14[9];
    v16 = vadd_s32(v15, (int32x2_t)0x100000001);
    v15.i32[0] |= 1u;
    v15.i32[1] = v16.i32[1];
    v14[9] = v15;
    v6 = v5 - v4;
    if (v5 - v4 <= 0)
    {
      v49 = *(_QWORD *)(a1 + 40);
      goto LABEL_118;
    }
  }
  v17 = 0;
  v18 = 0;
  while (v6 == 1 || *v4 != a2 || v4[1] != a3)
  {
    v19 = *(_QWORD *)(a1 + 40);
    v20 = v4 + 1;
    *(_QWORD *)a1 = v4 + 1;
    v21 = *v4;
    if (v21 == 92)
    {
      if (v5 - v20 <= 0)
      {
        if (!*(_DWORD *)(a1 + 16))
          *(_DWORD *)(a1 + 16) = 5;
        *(_QWORD *)(a1 + 8) = &byte_1EF8F5818;
        v5 = &byte_1EF8F5818;
        v20 = &byte_1EF8F5818;
      }
      *(_QWORD *)a1 = v20 + 1;
      v21 = *v20++ | 0x100;
    }
    if (v21 > 304)
    {
      if ((v21 - 305) < 9)
      {
        v22 = (v21 & 0xFFFFFEFF) - 48;
        v23 = a1 + 8 * v22;
        v25 = *(_QWORD *)(v23 + 144);
        v24 = (uint64_t *)(v23 + 144);
        if (v25)
        {
          sub_1C5E72BDC((void **)a1, 939524096, (v21 & 0xFFFFFEFF) - 48);
          sub_1C5E747EC(a1, *(_QWORD *)(a1 + 8 * v22 + 64) + 1, *v24);
          sub_1C5E72BDC((void **)a1, 0x40000000, (v21 & 0xFFFFFEFF) - 48);
        }
        else
        {
          if (!*(_DWORD *)(a1 + 16))
            *(_DWORD *)(a1 + 16) = 6;
          *(_QWORD *)a1 = &byte_1EF8F5818;
          *(_QWORD *)(a1 + 8) = &byte_1EF8F5818;
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + 120) = 1;
        goto LABEL_72;
      }
      if (v21 == 379)
      {
        if (!*(_DWORD *)(a1 + 16))
        {
          v36 = 13;
LABEL_64:
          *(_DWORD *)(a1 + 16) = v36;
        }
      }
      else
      {
        if (v21 != 381)
          goto LABEL_70;
LABEL_60:
        if (!*(_DWORD *)(a1 + 16))
        {
          v36 = 8;
          goto LABEL_64;
        }
      }
      *(_QWORD *)a1 = &byte_1EF8F5818;
      *(_QWORD *)(a1 + 8) = &byte_1EF8F5818;
      goto LABEL_72;
    }
    if (v21 <= 90)
    {
      if (v21 == 42)
      {
        if ((v18 & 1) != 0)
        {
          if (!*(_DWORD *)(a1 + 16))
            *(_DWORD *)(a1 + 16) = 13;
          *(_QWORD *)a1 = &byte_1EF8F5818;
          *(_QWORD *)(a1 + 8) = &byte_1EF8F5818;
        }
      }
      else if (v21 == 46)
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 56) + 40) & 8) != 0)
        {
          *(_QWORD *)a1 = &v54;
          *(_QWORD *)(a1 + 8) = (char *)&v54 + 3;
          v54 = 6097502;
          sub_1C5E73CC4(a1);
          *(_QWORD *)a1 = v20;
          *(_QWORD *)(a1 + 8) = v5;
        }
        else if (!*(_DWORD *)(a1 + 16))
        {
          v26 = *(_QWORD *)(a1 + 32);
          v27 = v19;
          if (v19 >= v26)
          {
            v28 = v26 + 2;
            if (v26 >= -1)
              v28 = v26 + 1;
            sub_1C5E75050((void **)a1, (v28 & 0xFFFFFFFFFFFFFFFELL) + (v28 >> 1));
            v27 = *(_QWORD *)(a1 + 40);
          }
          v29 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 40) = v27 + 1;
          *(_QWORD *)(v29 + 8 * v27) = 671088640;
        }
        goto LABEL_72;
      }
LABEL_70:
      sub_1C5E74854((__n128 *)a1, (char)v21);
      goto LABEL_72;
    }
    switch(v21)
    {
      case 91:
        sub_1C5E73CC4(a1);
        break;
      case 296:
        v30 = *(_QWORD *)(a1 + 56);
        v31 = *(_QWORD *)(v30 + 112);
        v32 = v31 + 1;
        *(_QWORD *)(v30 + 112) = v31 + 1;
        if (v31 + 1 <= 9)
          *(_QWORD *)(a1 + 8 * v32 + 64) = v19;
        sub_1C5E72BDC((void **)a1, 1744830464, v31 + 1);
        v33 = *(char **)a1;
        v34 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
        if (v34 >= 1 && (v34 == 1 || *v33 != 92 || v33[1] != 41))
          sub_1C5E73580(a1, 92, 41);
        if (v32 <= 9)
          *(_QWORD *)(a1 + 8 * v32 + 144) = *(_QWORD *)(a1 + 40);
        sub_1C5E72BDC((void **)a1, 1879048192, v32);
        v35 = *(char **)a1;
        if ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) < 2 || *v35 != 92 || v35[1] != 41)
          goto LABEL_60;
        *(_QWORD *)a1 = v35 + 2;
        break;
      case 297:
        goto LABEL_60;
      default:
        goto LABEL_70;
    }
LABEL_72:
    v4 = *(char **)a1;
    v5 = *(char **)(a1 + 8);
    v6 = (uint64_t)&v5[-*(_QWORD *)a1];
    if (v6 >= 1)
    {
      v37 = *v4;
      if (v37 == 42)
      {
        *(_QWORD *)a1 = v4 + 1;
        sub_1C5E73C24((_QWORD *)a1, 1207959552, *(_QWORD *)(a1 + 40) - v19 + 1, v19);
        sub_1C5E72BDC((void **)a1, 1342177280, *(_QWORD *)(a1 + 40) - v19);
        sub_1C5E73C24((_QWORD *)a1, 1476395008, *(_QWORD *)(a1 + 40) - v19 + 1, v19);
        sub_1C5E72BDC((void **)a1, 1610612736, *(_QWORD *)(a1 + 40) - v19);
        v4 = *(char **)a1;
        v5 = *(char **)(a1 + 8);
LABEL_103:
        v17 = 0;
        v6 = v5 - v4;
        goto LABEL_104;
      }
      if ((unint64_t)v6 >= 2 && v37 == 92 && v4[1] == 123)
      {
        *(_QWORD *)a1 = v4 + 2;
        v38 = sub_1C5E74940((uint64_t *)a1);
        v39 = v38;
        v41 = *(char **)a1;
        v40 = *(_QWORD *)(a1 + 8);
        v42 = v38;
        if (v40 - *(_QWORD *)a1 >= 1)
        {
          v42 = v38;
          if (*v41 == 44)
          {
            v43 = (unsigned __int8 *)(v41 + 1);
            *(_QWORD *)a1 = v43;
            if (v40 - (uint64_t)v43 < 1 || *v43 - 48 > 9)
            {
              v42 = 256;
            }
            else
            {
              v42 = sub_1C5E74940((uint64_t *)a1);
              if (v39 > (int)v42)
              {
                if (!*(_DWORD *)(a1 + 16))
                  *(_DWORD *)(a1 + 16) = 10;
                *(_QWORD *)a1 = &byte_1EF8F5818;
                *(_QWORD *)(a1 + 8) = &byte_1EF8F5818;
              }
            }
          }
        }
        sub_1C5E749D4((void **)a1, v19, v39, v42);
        v44 = *(char **)a1;
        v5 = *(char **)(a1 + 8);
        v45 = (uint64_t)&v5[-*(_QWORD *)a1];
        if (v45 <= 1)
        {
          if (v45 == 1)
            goto LABEL_94;
LABEL_99:
          if (!*(_DWORD *)(a1 + 16))
          {
            v47 = 9;
            goto LABEL_101;
          }
        }
        else
        {
          if (*v44 == 92 && v44[1] == 125)
          {
            v4 = v44 + 2;
            *(_QWORD *)a1 = v44 + 2;
            goto LABEL_103;
          }
LABEL_94:
          v46 = v44 + 1;
          while (1)
          {
            if (--v45)
            {
              if (*(v46 - 1) == 92 && *v46 == 125)
                break;
            }
            *(_QWORD *)a1 = v46++;
            if (v45 <= 0)
              goto LABEL_99;
          }
          if (!*(_DWORD *)(a1 + 16))
          {
            v47 = 10;
LABEL_101:
            *(_DWORD *)(a1 + 16) = v47;
          }
        }
        *(_QWORD *)a1 = &byte_1EF8F5818;
        *(_QWORD *)(a1 + 8) = &byte_1EF8F5818;
        v4 = &byte_1EF8F5818;
        v5 = &byte_1EF8F5818;
        goto LABEL_103;
      }
    }
    if (v21 != 36)
      goto LABEL_103;
    v17 = 1;
LABEL_104:
    v18 = 1;
    if (v6 <= 0)
      break;
  }
  v48 = *(_QWORD *)(a1 + 40);
  if (v17)
  {
    v49 = v48 - 1;
    *(_QWORD *)(a1 + 40) = v48 - 1;
    if (!*(_DWORD *)(a1 + 16))
    {
      v50 = *(_QWORD *)(a1 + 32);
      if (v48 > v50)
      {
        v51 = v50 + 2;
        if (v50 >= -1)
          v51 = v50 + 1;
        sub_1C5E75050((void **)a1, (v51 & 0xFFFFFFFFFFFFFFFELL) + (v51 >> 1));
        v49 = *(_QWORD *)(a1 + 40);
      }
      v52 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 40) = v49 + 1;
      *(_QWORD *)(v52 + 8 * v49) = 0x20000000;
      v49 = *(_QWORD *)(a1 + 40);
    }
    v53 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)(v53 + 72) |= 2u;
    ++*(_DWORD *)(v53 + 80);
  }
  else
  {
    v49 = *(_QWORD *)(a1 + 40);
  }
LABEL_118:
  if (v49 == v9)
  {
LABEL_119:
    if (!*(_DWORD *)(a1 + 16))
      *(_DWORD *)(a1 + 16) = 14;
    *(_QWORD *)a1 = &byte_1EF8F5818;
    *(_QWORD *)(a1 + 8) = &byte_1EF8F5818;
  }
}

_QWORD *sub_1C5E73C24(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  if (!*((_DWORD *)result + 4))
  {
    v5 = result;
    v6 = result[5];
    sub_1C5E72BDC((void **)result, a2, a3);
    v7 = 0;
    v8 = v5[3];
    v9 = *(_QWORD *)(v8 + 8 * v6);
    do
    {
      v10 = &v5[v7];
      v11 = v5[v7 + 9];
      if (v11 >= a4)
        v10[9] = v11 + 1;
      v12 = v10[19];
      if (v12 >= a4)
        v10[19] = v12 + 1;
      ++v7;
    }
    while (v7 != 9);
    result = memmove((void *)(v8 + 8 * a4 + 8), (const void *)(v8 + 8 * a4), 8 * (v5[5] + ~a4));
    *(_QWORD *)(v5[3] + 8 * a4) = v9;
  }
  return result;
}

void sub_1C5E73CC4(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  int v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t *v15;
  void **v16;
  char *v17;
  char *v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  size_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  int v38;
  int v39;
  const char *v40;
  uint64_t v41;
  _BYTE *v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  int v51;
  unsigned __int8 v52;
  char *v53;
  int v54;
  size_t v55;
  const char **v56;
  const char *v57;
  unsigned __int8 *v58;
  unsigned __int8 v59;
  unsigned __int8 *v60;
  int v61;
  const char *v62;
  int v63;
  uint64_t v64;
  size_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  const char *v69;
  int v70;
  const char *v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  int v78;
  unsigned int v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  char v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  void **v99;
  _BOOL4 v100;

  v2 = *(const char **)a1;
  if ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >= 6)
  {
    if (!strncmp(*(const char **)a1, "[:<:]]", 6uLL))
    {
      if (!*(_DWORD *)(a1 + 16))
      {
        v29 = *(_QWORD *)(a1 + 32);
        v28 = *(_QWORD *)(a1 + 40);
        if (v28 >= v29)
        {
          v30 = v29 + 2;
          if (v29 >= -1)
            v30 = v29 + 1;
          sub_1C5E75050((void **)a1, (v30 & 0xFFFFFFFFFFFFFFFELL) + (v30 >> 1));
          v28 = *(_QWORD *)(a1 + 40);
          v2 = *(const char **)a1;
        }
        v31 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 40) = v28 + 1;
        v32 = 2550136832;
        goto LABEL_36;
      }
    }
    else
    {
      if (strncmp(v2, "[:>:]]", 6uLL))
        goto LABEL_4;
      if (!*(_DWORD *)(a1 + 16))
      {
        v33 = *(_QWORD *)(a1 + 32);
        v28 = *(_QWORD *)(a1 + 40);
        if (v28 >= v33)
        {
          v34 = v33 + 2;
          if (v33 >= -1)
            v34 = v33 + 1;
          sub_1C5E75050((void **)a1, (v34 & 0xFFFFFFFFFFFFFFFELL) + (v34 >> 1));
          v28 = *(_QWORD *)(a1 + 40);
          v2 = *(const char **)a1;
        }
        v31 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 40) = v28 + 1;
        v32 = 2684354560;
LABEL_36:
        *(_QWORD *)(v31 + 8 * v28) = v32;
      }
    }
    *(_QWORD *)a1 = v2 + 6;
    return;
  }
LABEL_4:
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(unsigned int *)(v3 + 20);
  v5 = *(int *)(v3 + 16);
  *(_DWORD *)(v3 + 20) = v4 + 1;
  v6 = *(_DWORD *)(a1 + 48);
  if ((int)v4 >= v6)
  {
    v21 = (v6 + 8);
    *(_DWORD *)(a1 + 48) = v21;
    if (v6 < -8)
      goto LABEL_21;
    v22 = malloc_type_realloc(*(void **)(v3 + 24), 32 * (v6 + 8), 0x1010040FE74B554uLL);
    v3 = *(_QWORD *)(a1 + 56);
    if (!v22)
      goto LABEL_21;
    v23 = (int)(v21 >> 3) * (uint64_t)(int)v5;
    *(_QWORD *)(v3 + 24) = v22;
    v24 = (char *)malloc_type_realloc(*(void **)(v3 + 32), v23, 0x7F640B19uLL);
    v3 = *(_QWORD *)(a1 + 56);
    if (!v24)
      goto LABEL_21;
    *(_QWORD *)(v3 + 32) = v24;
    if ((int)v4 >= 1)
    {
      v25 = 0;
      v26 = *(_QWORD **)(v3 + 24);
      do
      {
        *v26 = &v24[(v25 >> 3) * (uint64_t)(int)v5];
        v26 += 4;
        ++v25;
      }
      while (v4 != v25);
    }
    bzero(&v24[v23 - v5], v5);
    v3 = *(_QWORD *)(a1 + 56);
  }
  v7 = *(_QWORD *)(v3 + 24);
  if (!v7 || (v8 = *(_QWORD *)(v3 + 32)) == 0)
  {
LABEL_21:
    free(*(void **)(v3 + 24));
    v27 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(v27 + 24) = 0;
    free(*(void **)(v27 + 32));
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 32) = 0;
    if (!*(_DWORD *)(a1 + 16))
      *(_DWORD *)(a1 + 16) = 12;
    *(_QWORD *)a1 = &byte_1EF8F5818;
    *(_QWORD *)(a1 + 8) = &byte_1EF8F5818;
    return;
  }
  v9 = v7 + 32 * (int)v4;
  v10 = v8 + (int)v5 * (uint64_t)((int)v4 / 8);
  *(_QWORD *)v9 = v10;
  v11 = 1;
  v12 = 1 << (v4 & 7);
  *(_BYTE *)(v9 + 8) = v12;
  v13 = (_BYTE *)(v9 + 8);
  *(_BYTE *)(v9 + 9) = 0;
  v14 = (_BYTE *)(v9 + 9);
  *(_QWORD *)(v9 + 16) = 0;
  v15 = (uint64_t *)(v9 + 16);
  *(_QWORD *)(v9 + 24) = 0;
  v16 = (void **)(v9 + 24);
  v18 = *(char **)a1;
  v17 = *(char **)(a1 + 8);
  if ((uint64_t)&v17[-*(_QWORD *)a1] < 1)
    goto LABEL_41;
  v19 = *v18;
  v11 = v19 != 94;
  if (v19 == 94)
  {
    *(_QWORD *)a1 = ++v18;
    if (v17 - v18 < 1)
    {
      v11 = 0;
      goto LABEL_41;
    }
    v19 = *v18;
  }
  if (v19 == 93)
  {
    v20 = 93;
  }
  else
  {
    if (v19 != 45)
      goto LABEL_41;
    v20 = 45;
  }
  *(_QWORD *)a1 = v18 + 1;
  *(_BYTE *)(v10 + v20) |= v12;
  *v14 += v19;
  v18 = *(char **)a1;
  v17 = *(char **)(a1 + 8);
LABEL_41:
  v35 = v17 - v18;
  if (v17 - v18 >= 1)
  {
    do
    {
      v36 = *v18;
      if (v36 == 93)
        break;
      if (v35 >= 2 && v36 == 45)
      {
        if (v18[1] == 93)
        {
          *(_QWORD *)a1 = v18 + 1;
          *(_BYTE *)(*(_QWORD *)v9 + 45) |= *v13;
          *v14 += 45;
          v18 = *(char **)a1;
          v17 = *(char **)(a1 + 8);
          break;
        }
LABEL_79:
        if (!*(_DWORD *)(a1 + 16))
          *(_DWORD *)(a1 + 16) = 11;
        goto LABEL_81;
      }
      if (v36 == 45)
        goto LABEL_79;
      if (v36 != 91 || v35 <= 1)
      {
LABEL_52:
        v38 = sub_1C5E74E58(a1);
        v39 = v38;
        v40 = *(const char **)a1;
        v41 = *(_QWORD *)(a1 + 8);
        if (v41 - *(_QWORD *)a1 < 2
          || *v40 != 45
          || (v42 = v40 + 1, v40[1] == 93)
          || ((*(_QWORD *)a1 = v42, v41 - (uint64_t)v42 < 1) || *v42 != 45
            ? (v38 = sub_1C5E74E58(a1))
            : (*(_QWORD *)a1 = v40 + 2, v38 = 45),
              v39 <= v38))
        {
          do
          {
            *(_BYTE *)(*(_QWORD *)v9 + v39) |= *v13;
            *v14 += v39++;
          }
          while (v38 + 1 != v39);
          v18 = *(char **)a1;
          v17 = *(char **)(a1 + 8);
          goto LABEL_84;
        }
        goto LABEL_79;
      }
      v43 = v18[1];
      if (v43 == 61)
      {
        v50 = v18 + 2;
        *(_QWORD *)a1 = v50;
        if (v17 - v50 <= 0)
        {
          if (!*(_DWORD *)(a1 + 16))
            *(_DWORD *)(a1 + 16) = 7;
          *(_QWORD *)a1 = &byte_1EF8F5818;
          *(_QWORD *)(a1 + 8) = &byte_1EF8F5818;
          v50 = &byte_1EF8F5818;
        }
        v51 = *v50;
        if (v51 == 93 || v51 == 45)
        {
          if (!*(_DWORD *)(a1 + 16))
            *(_DWORD *)(a1 + 16) = 3;
          *(_QWORD *)a1 = &byte_1EF8F5818;
          *(_QWORD *)(a1 + 8) = &byte_1EF8F5818;
        }
        v52 = sub_1C5E74F40(a1, 61);
        *(_BYTE *)(*(_QWORD *)v9 + v52) |= *v13;
        *v14 += v52;
        v53 = *(char **)a1;
        v17 = *(char **)(a1 + 8);
        if ((uint64_t)&v17[-*(_QWORD *)a1] < 1)
        {
          if (!*(_DWORD *)(a1 + 16))
            *(_DWORD *)(a1 + 16) = 7;
          *(_QWORD *)a1 = &byte_1EF8F5818;
          *(_QWORD *)(a1 + 8) = &byte_1EF8F5818;
          v53 = &byte_1EF8F5818;
          v17 = &byte_1EF8F5818;
        }
        if (v17 - v53 > 1 && *v53 == 61 && v53[1] == 93)
          goto LABEL_120;
        if (!*(_DWORD *)(a1 + 16))
        {
          v54 = 3;
LABEL_123:
          *(_DWORD *)(a1 + 16) = v54;
        }
      }
      else
      {
        if (v43 != 58)
          goto LABEL_52;
        v44 = (uint64_t)(v18 + 2);
        *(_QWORD *)a1 = v18 + 2;
        if (v17 - (v18 + 2) <= 0)
        {
          if (!*(_DWORD *)(a1 + 16))
            *(_DWORD *)(a1 + 16) = 7;
          *(_QWORD *)a1 = &byte_1EF8F5818;
          *(_QWORD *)(a1 + 8) = &byte_1EF8F5818;
          v17 = &byte_1EF8F5818;
          v44 = (uint64_t)&byte_1EF8F5818;
        }
        v45 = *(unsigned __int8 *)v44;
        if (v45 == 93 || v45 == 45)
        {
          if (!*(_DWORD *)(a1 + 16))
            *(_DWORD *)(a1 + 16) = 4;
          *(_QWORD *)a1 = &byte_1EF8F5818;
          *(_QWORD *)(a1 + 8) = &byte_1EF8F5818;
          v17 = &byte_1EF8F5818;
          v44 = (uint64_t)&byte_1EF8F5818;
        }
        v100 = v11;
        v99 = v16;
        if ((uint64_t)&v17[-v44] >= 1)
        {
          v46 = -v44;
          v47 = (const char *)(v44 + 1);
          while (1)
          {
            v48 = *((unsigned __int8 *)v47 - 1);
            if (*(v47 - 1) < 0)
            {
              if (!__maskrune(v48, 0x100uLL))
              {
LABEL_105:
                v49 = *(_QWORD *)a1;
                goto LABEL_106;
              }
            }
            else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v48 + 60) & 0x100) == 0)
            {
              goto LABEL_105;
            }
            *(_QWORD *)a1 = v47;
            --v46;
            ++v47;
            if (*(_QWORD *)(a1 + 8) + v46 <= 0)
            {
              v49 = -v46;
              goto LABEL_106;
            }
          }
        }
        v49 = v44;
LABEL_106:
        v55 = v49 - v44;
        v56 = (const char **)&off_1E81A7470;
        v57 = "alnum";
        while (strncmp(v57, (const char *)v44, v55) || v57[v55])
        {
          v57 = v56[1];
          v56 += 3;
          if (!v57)
          {
            v11 = v100;
            if (!*(_DWORD *)(a1 + 16))
              *(_DWORD *)(a1 + 16) = 4;
            *(_QWORD *)a1 = &byte_1EF8F5818;
            *(_QWORD *)(a1 + 8) = &byte_1EF8F5818;
            v16 = v99;
            goto LABEL_113;
          }
        }
        v58 = (unsigned __int8 *)*(v56 - 1);
        v59 = *v58;
        if (*v58)
        {
          v60 = v58 + 1;
          do
          {
            *(_BYTE *)(*(_QWORD *)v9 + v59) |= *v13;
            *v14 += v59;
            v61 = *v60++;
            v59 = v61;
          }
          while (v61);
        }
        v62 = *v56;
        v63 = *(unsigned __int8 *)*v56;
        v11 = v100;
        v16 = v99;
        if (v63)
        {
          do
          {
            v64 = *v15;
            v65 = *v15 + strlen(v62) + 1;
            *v15 = v65;
            v66 = (char *)malloc_type_realloc(*v99, v65, 0xDA2F212AuLL);
            if (v66)
            {
              *v99 = v66;
              if (*v15 - v64 != -1)
              {
                v67 = &v66[v64 - 1];
                v68 = v64 - *v15;
                v69 = v62;
                while (v68)
                {
                  v70 = *(unsigned __int8 *)v69++;
                  *v67++ = v70;
                  ++v68;
                  if (!v70)
                    goto LABEL_140;
                }
                *v67 = 0;
              }
            }
            else
            {
              if (*v99)
                free(*v99);
              *v99 = 0;
              if (!*(_DWORD *)(a1 + 16))
                *(_DWORD *)(a1 + 16) = 12;
              *(_QWORD *)a1 = &byte_1EF8F5818;
              *(_QWORD *)(a1 + 8) = &byte_1EF8F5818;
            }
LABEL_140:
            v71 = &v62[strlen(v62)];
            v72 = *((unsigned __int8 *)v71 + 1);
            v62 = v71 + 1;
          }
          while (v72);
        }
LABEL_113:
        v53 = *(char **)a1;
        v17 = *(char **)(a1 + 8);
        if ((uint64_t)&v17[-*(_QWORD *)a1] < 1)
        {
          if (!*(_DWORD *)(a1 + 16))
            *(_DWORD *)(a1 + 16) = 7;
          *(_QWORD *)a1 = &byte_1EF8F5818;
          *(_QWORD *)(a1 + 8) = &byte_1EF8F5818;
          v53 = &byte_1EF8F5818;
          v17 = &byte_1EF8F5818;
        }
        if (v17 - v53 > 1 && *v53 == 58 && v53[1] == 93)
        {
LABEL_120:
          v18 = v53 + 2;
          *(_QWORD *)a1 = v18;
          goto LABEL_84;
        }
        if (!*(_DWORD *)(a1 + 16))
        {
          v54 = 4;
          goto LABEL_123;
        }
      }
LABEL_81:
      *(_QWORD *)a1 = &byte_1EF8F5818;
      *(_QWORD *)(a1 + 8) = &byte_1EF8F5818;
      v18 = &byte_1EF8F5818;
      v17 = &byte_1EF8F5818;
LABEL_84:
      v35 = v17 - v18;
    }
    while (v17 - v18 > 0);
  }
  if (v17 - v18 < 1 || (*(_QWORD *)a1 = v18 + 1, *v18 != 93))
  {
    if (!*(_DWORD *)(a1 + 16))
      *(_DWORD *)(a1 + 16) = 7;
    *(_QWORD *)a1 = &byte_1EF8F5818;
    *(_QWORD *)(a1 + 8) = &byte_1EF8F5818;
    goto LABEL_180;
  }
  if (*(_DWORD *)(a1 + 16))
  {
LABEL_180:
    sub_1C5E74D68(a1, v9);
    return;
  }
  v73 = *(_QWORD *)(a1 + 56);
  if ((*(_BYTE *)(v73 + 40) & 2) != 0)
  {
    v74 = *(unsigned int *)(v73 + 16);
    if ((int)v74 >= 1)
    {
      v75 = MEMORY[0x1E0C80978];
      while (1)
      {
        v76 = v74 - 1;
        if ((*v13 & *(_BYTE *)(*(_QWORD *)v9 + (v74 - 1))) != 0)
        {
          if (v74 > 0x80)
          {
            if (__maskrune(v74 - 1, 0x100uLL))
            {
LABEL_153:
              v77 = sub_1C5E74DD4(v76);
              if ((_DWORD)v76 != v77)
              {
                *(_BYTE *)(*(_QWORD *)v9 + v77) |= *v13;
                *v14 += v77;
              }
            }
          }
          else if ((*(_DWORD *)(v75 + 4 * v76 + 60) & 0x100) != 0)
          {
            goto LABEL_153;
          }
        }
        v74 = v76;
        if (v76 + 1 <= 1)
        {
          v73 = *(_QWORD *)(a1 + 56);
          break;
        }
      }
    }
  }
  if (!v11)
  {
    v78 = *(_DWORD *)(v73 + 16);
    if (v78 >= 1)
    {
      v79 = v78 + 1;
      do
      {
        v80 = v79 - 2;
        v81 = *(_QWORD *)v9;
        v82 = (v79 - 2);
        v83 = *(unsigned __int8 *)(*(_QWORD *)v9 + v82);
        v84 = *v13;
        if ((v84 & v83) != 0)
        {
          *(_BYTE *)(v81 + v82) = v83 & ~(_BYTE)v84;
          v85 = *v14 - v80;
        }
        else
        {
          *(_BYTE *)(v81 + v82) = v84 | v83;
          v85 = *v14 + v80;
        }
        *v14 = v85;
        --v79;
      }
      while (v79 > 1);
      v73 = *(_QWORD *)(a1 + 56);
    }
    if ((*(_BYTE *)(v73 + 40) & 8) != 0)
    {
      *(_BYTE *)(*(_QWORD *)v9 + 10) &= ~*v13;
      *v14 -= 10;
      v73 = *(_QWORD *)(a1 + 56);
    }
  }
  v86 = *(int *)(v73 + 16);
  if ((_DWORD)v86)
  {
    v87 = 0;
    v88 = 0;
    v89 = *(_QWORD *)v9;
    do
    {
      if ((*(_BYTE *)(v89 + v88) & *v13) != 0)
        ++v87;
      ++v88;
    }
    while (v86 != v88);
    if (v87 == 1)
    {
      v90 = 0;
      v91 = 0;
      while ((*(_BYTE *)(v89 + v91) & *v13) == 0)
      {
        ++v91;
        v90 += 0x1000000;
        if (v86 == v91)
        {
          v92 = 0;
          goto LABEL_196;
        }
      }
      v92 = v90 >> 24;
LABEL_196:
      sub_1C5E74854((__n128 *)a1, v92);
      goto LABEL_180;
    }
  }
  v93 = *(_QWORD *)(v73 + 24);
  v94 = *(int *)(v73 + 20);
  if ((int)v94 < 1)
  {
LABEL_194:
    v97 = v9;
  }
  else
  {
    v95 = v93 + 32 * v94;
    if (v86 <= 1)
      v96 = 1;
    else
      v96 = *(int *)(v73 + 16);
    v97 = *(_QWORD *)(v73 + 24);
    while (1)
    {
      if (v97 != v9 && *(unsigned __int8 *)(v97 + 9) == *v14)
      {
        v98 = 0;
        if ((_DWORD)v86)
        {
          while (((*(_BYTE *)(*(_QWORD *)v97 + v98) & *(_BYTE *)(v97 + 8)) == 0) != ((*(_BYTE *)(*(_QWORD *)v9 + v98) & *v13) != 0))
          {
            if (v96 == ++v98)
            {
              v98 = v96;
              break;
            }
          }
        }
        if (v98 == v86)
          break;
      }
      v97 += 32;
      if (v97 >= v95)
        goto LABEL_194;
    }
    sub_1C5E74D68(a1, v9);
    v93 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 24);
  }
  sub_1C5E72BDC((void **)a1, 805306368, (int)((uint64_t)(v97 - v93) >> 5));
}

uint64_t sub_1C5E747EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = a3 - a2;
  if (a3 != a2)
  {
    sub_1C5E75050((void **)a1, *(_QWORD *)(a1 + 32) + v4);
    memmove((void *)(*(_QWORD *)(a1 + 24) + 8 * *(_QWORD *)(a1 + 40)), (const void *)(*(_QWORD *)(a1 + 24) + 8 * a2), 8 * v4);
    *(_QWORD *)(a1 + 40) += v4;
  }
  return v3;
}

__n128 sub_1C5E74854(__n128 *a1, int a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  unint64_t v8;
  int v9;
  __n128 v10;
  char v11;
  __int16 v12;

  v4 = a1[3].n128_u64[1];
  v5 = *(_QWORD *)(v4 + 88);
  v6 = a2;
  if ((*(_BYTE *)(v4 + 40) & 2) == 0)
    goto LABEL_7;
  if (a2 > 0x7Fu)
  {
    if (!__maskrune(a2, 0x100uLL))
      goto LABEL_7;
  }
  else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * a2 + 60) & 0x100) == 0)
  {
    goto LABEL_7;
  }
  if (sub_1C5E74DD4(a2) != a2)
  {
    v11 = a2;
    v12 = 93;
    v10 = *a1;
    a1->n128_u64[0] = (unint64_t)&v11;
    a1->n128_u64[1] = (unint64_t)&v12 + 1;
    sub_1C5E73CC4(a1);
    result = v10;
    *a1 = v10;
    return result;
  }
LABEL_7:
  sub_1C5E72BDC((void **)a1, 0x10000000, v6);
  if (!*(_BYTE *)(v5 + a2))
  {
    v8 = a1[3].n128_u64[1];
    v9 = *(_DWORD *)(v8 + 84);
    *(_DWORD *)(v8 + 84) = v9 + 1;
    *(_BYTE *)(v5 + a2) = v9;
  }
  return result;
}

uint64_t sub_1C5E74940(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v1 = *a1;
  v2 = a1[1] - *a1;
  if (v2 < 1)
  {
    v4 = 0;
LABEL_12:
    if (!*((_DWORD *)a1 + 4))
      *((_DWORD *)a1 + 4) = 10;
    *a1 = (uint64_t)&byte_1EF8F5818;
    a1[1] = (uint64_t)&byte_1EF8F5818;
    return v4;
  }
  v3 = 0;
  v4 = 0;
  while (1)
  {
    v5 = (char *)(v1 + v3);
    if (*(unsigned __int8 *)(v1 + v3) - 48 > 9 || (int)v4 > 255)
      break;
    *a1 = (uint64_t)(v5 + 1);
    v4 = (*v5 + 10 * v4 - 48);
    ++v3;
    if (v2-- <= 1)
    {
      LODWORD(v3) = 1;
      break;
    }
  }
  if (!(_DWORD)v3 || (int)v4 >= 256)
    goto LABEL_12;
  return v4;
}

void **sub_1C5E749D4(void **result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (*((_DWORD *)result + 4))
    return result;
  v7 = (uint64_t)result;
  while (2)
  {
    if ((_DWORD)a4 == 256)
      v8 = 3;
    else
      v8 = 2;
    if ((int)a4 >= 2)
      v9 = v8;
    else
      v9 = a4;
    while (1)
    {
      v10 = *(_QWORD *)(v7 + 40);
      if (a3 == 256)
        v11 = 3;
      else
        v11 = 2;
      if (a3 < 2)
        v11 = a3;
      v12 = v9 + 8 * v11;
      if (v12 != 19)
        break;
      result = (void **)sub_1C5E747EC(v7, a2, *(_QWORD *)(v7 + 40));
      a2 = (uint64_t)result;
      --a3;
      if (*(_DWORD *)(v7 + 16))
        return result;
    }
    switch(v12)
    {
      case 0:
        *(_QWORD *)(v7 + 40) = a2;
        return result;
      case 1:
      case 2:
      case 3:
        sub_1C5E73C24((_QWORD *)v7, 2013265920, v10 - a2 + 1, a2);
        sub_1C5E749D4(v7, a2 + 1, 1, a4);
        result = sub_1C5E72BDC((void **)v7, 0x80000000, *(_QWORD *)(v7 + 40) - a2);
        if (*(_DWORD *)(v7 + 16))
          return result;
        v22 = *(_QWORD *)(v7 + 24);
        *(_QWORD *)(v22 + 8 * a2) = *(_QWORD *)(v22 + 8 * a2) & 0xF8000000 | (*(_QWORD *)(v7 + 40) - a2);
        v24 = *(_QWORD *)(v7 + 32);
        v23 = *(_QWORD *)(v7 + 40);
        if (v23 < v24)
        {
          *(_QWORD *)(v7 + 40) = v23 + 1;
          *(_QWORD *)(v22 + 8 * v23) = 2281701376;
LABEL_43:
          *(_QWORD *)(v22 + 8 * *(_QWORD *)(v7 + 40) - 8) = *(_QWORD *)(v22 + 8 * *(_QWORD *)(v7 + 40) - 8) & 0xF8000000 | 1;
          v29 = *(_QWORD *)(v7 + 32);
          v28 = *(_QWORD *)(v7 + 40);
          if (v28 >= v29)
          {
            v30 = v29 + 2;
            if (v29 >= -1)
              v30 = v29 + 1;
            result = sub_1C5E75050((void **)v7, (v30 & 0xFFFFFFFFFFFFFFFELL) + (v30 >> 1));
            v22 = *(_QWORD *)(v7 + 24);
            v28 = *(_QWORD *)(v7 + 40);
          }
          *(_QWORD *)(v7 + 40) = v28 + 1;
          *(_QWORD *)(v22 + 8 * v28) = 2415919106;
          return result;
        }
        v25 = v24 + 2;
        if (v24 >= -1)
          v25 = v24 + 1;
        result = sub_1C5E75050((void **)v7, (v25 & 0xFFFFFFFFFFFFFFFELL) + (v25 >> 1));
        v22 = *(_QWORD *)(v7 + 24);
        v26 = *(_QWORD *)(v7 + 40);
        v27 = *(_DWORD *)(v7 + 16);
        *(_QWORD *)(v7 + 40) = v26 + 1;
        *(_QWORD *)(v22 + 8 * v26) = 2281701376;
        if (!v27)
          goto LABEL_43;
        return result;
      case 9:
        return result;
      case 10:
        sub_1C5E73C24((_QWORD *)v7, 2013265920, v10 - a2 + 1, a2);
        sub_1C5E72BDC((void **)v7, 0x80000000, *(_QWORD *)(v7 + 40) - a2);
        if (*(_DWORD *)(v7 + 16))
          goto LABEL_31;
        v13 = *(_QWORD *)(v7 + 24);
        *(_QWORD *)(v13 + 8 * a2) = *(_QWORD *)(v13 + 8 * a2) & 0xF8000000 | (*(_QWORD *)(v7 + 40) - a2);
        v15 = *(_QWORD *)(v7 + 32);
        v14 = *(_QWORD *)(v7 + 40);
        if (v14 >= v15)
        {
          v16 = v15 + 2;
          if (v15 >= -1)
            v16 = v15 + 1;
          sub_1C5E75050((void **)v7, (v16 & 0xFFFFFFFFFFFFFFFELL) + (v16 >> 1));
          v13 = *(_QWORD *)(v7 + 24);
          v17 = *(_QWORD *)(v7 + 40);
          v18 = *(_DWORD *)(v7 + 16);
          *(_QWORD *)(v7 + 40) = v17 + 1;
          *(_QWORD *)(v13 + 8 * v17) = 2281701376;
          if (v18)
            goto LABEL_31;
        }
        else
        {
          *(_QWORD *)(v7 + 40) = v14 + 1;
          *(_QWORD *)(v13 + 8 * v14) = 2281701376;
        }
        *(_QWORD *)(v13 + 8 * *(_QWORD *)(v7 + 40) - 8) = *(_QWORD *)(v13 + 8 * *(_QWORD *)(v7 + 40) - 8) & 0xF8000000 | 1;
        v20 = *(_QWORD *)(v7 + 32);
        v19 = *(_QWORD *)(v7 + 40);
        if (v19 >= v20)
        {
          v21 = v20 + 2;
          if (v20 >= -1)
            v21 = v20 + 1;
          sub_1C5E75050((void **)v7, (v21 & 0xFFFFFFFFFFFFFFFELL) + (v21 >> 1));
          v13 = *(_QWORD *)(v7 + 24);
          v19 = *(_QWORD *)(v7 + 40);
        }
        *(_QWORD *)(v7 + 40) = v19 + 1;
        *(_QWORD *)(v13 + 8 * v19) = 2415919106;
LABEL_31:
        result = (void **)sub_1C5E747EC(v7, a2 + 1, v10 + 1);
        a2 = (uint64_t)result;
        a3 = 1;
        goto LABEL_32;
      case 11:
        sub_1C5E73C24((_QWORD *)v7, 1207959552, v10 - a2 + 1, a2);
        return sub_1C5E72BDC((void **)v7, 1342177280, *(_QWORD *)(v7 + 40) - a2);
      case 18:
        result = (void **)sub_1C5E747EC(v7, a2, *(_QWORD *)(v7 + 40));
        a2 = (uint64_t)result;
        --a3;
LABEL_32:
        a4 = (a4 - 1);
        if (*(_DWORD *)(v7 + 16))
          return result;
        continue;
      default:
        *(_DWORD *)(v7 + 16) = 15;
        *(_QWORD *)v7 = &byte_1EF8F5818;
        *(_QWORD *)(v7 + 8) = &byte_1EF8F5818;
        return result;
    }
  }
}

uint64_t sub_1C5E74D68(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;

  v2 = *(_QWORD *)(result + 56);
  v3 = *(int *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24) + 32 * *(int *)(v2 + 20);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      *(_BYTE *)(*(_QWORD *)a2 + i) &= ~*(_BYTE *)(a2 + 8);
      *(_BYTE *)(a2 + 9) -= i;
    }
  }
  if (v4 - 32 == a2)
    --*(_DWORD *)(*(_QWORD *)(result + 56) + 20);
  return result;
}

uint64_t sub_1C5E74DD4(unsigned __int8 a1)
{
  unsigned __int8 v1;
  __darwin_ct_rune_t v2;
  int v3;
  unsigned __int8 v4;

  v1 = a1;
  v2 = a1;
  if (a1 <= 0x7Fu)
  {
    v3 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * a1 + 60);
    if ((v3 & 0x8000) == 0)
    {
      if ((v3 & 0x1000) == 0)
        return (char)v1;
      goto LABEL_8;
    }
LABEL_6:
    v4 = __tolower(v2);
LABEL_9:
    v1 = v4;
    return (char)v1;
  }
  if (__maskrune(a1, 0x8000uLL))
    goto LABEL_6;
  if (__maskrune(v2, 0x1000uLL))
  {
LABEL_8:
    v4 = __toupper(v2);
    goto LABEL_9;
  }
  return (char)v1;
}

uint64_t sub_1C5E74E58(uint64_t a1)
{
  char *v2;
  char *v3;
  char v4;
  char *v5;

  v2 = *(char **)a1;
  v3 = *(char **)(a1 + 8);
  if ((uint64_t)&v3[-*(_QWORD *)a1] < 1)
  {
    if (!*(_DWORD *)(a1 + 16))
      *(_DWORD *)(a1 + 16) = 7;
    v2 = &byte_1EF8F5818;
    *(_QWORD *)a1 = &byte_1EF8F5818;
    *(_QWORD *)(a1 + 8) = &byte_1EF8F5818;
    v3 = &byte_1EF8F5818;
  }
  if (v3 - v2 > 1 && *v2 == 91 && v2[1] == 46)
  {
    *(_QWORD *)a1 = v2 + 2;
    v4 = sub_1C5E74F40(a1, 46);
    v5 = *(char **)a1;
    if ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) > 1 && *v5 == 46 && v5[1] == 93)
    {
      *(_QWORD *)a1 = v5 + 2;
    }
    else
    {
      if (!*(_DWORD *)(a1 + 16))
        *(_DWORD *)(a1 + 16) = 3;
      *(_QWORD *)a1 = &byte_1EF8F5818;
      *(_QWORD *)(a1 + 8) = &byte_1EF8F5818;
    }
  }
  else
  {
    *(_QWORD *)a1 = v2 + 1;
    return *v2;
  }
  return v4;
}

uint64_t sub_1C5E74F40(uint64_t a1, int a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  int v7;
  char v8;
  const char *v10;
  char **v11;
  char *v12;

  v3 = *(const char **)a1;
  v4 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v4 < 1)
  {
LABEL_7:
    if (!*(_DWORD *)(a1 + 16))
    {
      v7 = 7;
LABEL_9:
      *(_DWORD *)(a1 + 16) = v7;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
    while (v4 - 1 == v6 || v3[v6] != a2 || v3[v6 + 1] != 93)
    {
      *(_QWORD *)a1 = &v3[++v6];
      --v5;
      if (v4 + v5 <= 0)
        goto LABEL_7;
    }
    v10 = "NUL";
    v11 = &off_1E81A75A8;
    do
    {
      if (!strncmp(v10, v3, v6) && strlen(v10) == v6)
        return (char)*((_BYTE *)v11 - 8);
      v12 = *v11;
      v11 += 2;
      v10 = v12;
    }
    while (v12);
    if (v6 == 1)
      return *v3;
    if (!*(_DWORD *)(a1 + 16))
    {
      v7 = 3;
      goto LABEL_9;
    }
  }
  v8 = 0;
  *(_QWORD *)a1 = &byte_1EF8F5818;
  *(_QWORD *)(a1 + 8) = &byte_1EF8F5818;
  return v8;
}

void **sub_1C5E75050(void **result, uint64_t a2)
{
  void **v3;

  if ((uint64_t)result[4] < a2)
  {
    v3 = result;
    if ((unint64_t)a2 >> 61
      || (result = (void **)malloc_type_realloc(result[3], 8 * a2, 0x100004000313F17uLL)) == 0)
    {
      if (!*((_DWORD *)v3 + 4))
        *((_DWORD *)v3 + 4) = 12;
      *v3 = &byte_1EF8F5818;
      v3[1] = &byte_1EF8F5818;
    }
    else
    {
      v3[3] = result;
      v3[4] = (void *)a2;
    }
  }
  return result;
}

size_t llvm_regerror(int a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  const char *v6;
  const char **v7;
  char *v8;
  uint64_t v9;
  const char *v10;
  int *v11;
  int v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  const char *v18;
  size_t v19;
  uint64_t i;
  int v21;
  uint64_t v23;
  char __str[50];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (a1 == 255)
  {
    v6 = *(const char **)(a2 + 16);
    if (strcmp("REG_NOMATCH", v6))
    {
      v7 = (const char **)off_1E81A7BB8;
      v8 = "0";
      while (1)
      {
        v9 = *((unsigned int *)v7 - 2);
        if (!(_DWORD)v9)
          goto LABEL_24;
        v10 = *v7;
        v7 += 3;
        if (!strcmp(v10, v6))
          goto LABEL_21;
      }
    }
    v9 = 1;
LABEL_21:
    v23 = v9;
    v18 = "%d";
LABEL_23:
    v8 = __str;
    snprintf(__str, 0x32uLL, v18, v23);
    goto LABEL_24;
  }
  v11 = &dword_1E81A7B98;
  do
  {
    v13 = *v11;
    v11 += 6;
    v12 = v13;
    if (v13)
      v14 = v12 == (a1 & 0xFFFFFEFF);
    else
      v14 = 1;
  }
  while (!v14);
  if ((a1 & 0x100) == 0)
  {
    v8 = (char *)*((_QWORD *)v11 - 1);
    goto LABEL_24;
  }
  if (!v12)
  {
    v23 = a1 & 0xFFFFFEFF;
    v18 = "REG_0x%x";
    goto LABEL_23;
  }
  v15 = 0;
  v16 = *((_QWORD *)v11 - 2);
  while (v15 != 49)
  {
    v17 = *(unsigned __int8 *)(v16 + v15);
    v8 = __str;
    __str[v15++] = v17;
    if (!v17)
      goto LABEL_24;
  }
  v8 = __str;
  __str[49] = 0;
LABEL_24:
  v19 = strlen(v8);
  if (a4)
  {
    for (i = a4 - 1; i; --i)
    {
      v21 = *v8++;
      *a3++ = v21;
      if (!v21)
        return v19 + 1;
    }
    *a3 = 0;
  }
  return v19 + 1;
}

uint64_t llvm_regexec(uint64_t a1, char *__s, unint64_t a3, _QWORD *a4, char a5)
{
  uint64_t v5;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  size_t v20;
  char *v21;
  char *v22;
  unsigned __int8 *v23;
  char *v24;
  uint64_t v25;
  int v26;
  char *v27;
  char *v28;
  int64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  int v36;
  char *v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  uint64_t v45;
  int v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  unsigned __int8 *v56;
  char *v57;
  uint64_t v58;
  _OWORD *v59;
  _QWORD *v60;
  unint64_t j;
  char *v62;
  unsigned __int8 *v63;
  char *v64;
  uint64_t v65;
  int v66;
  char *v67;
  char *v68;
  int64_t v69;
  char *v70;
  uint64_t v71;
  size_t v72;
  int v73;
  __int128 v74;
  _BYTE *v75;
  char *v76;
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  char *v86;
  int v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  unsigned __int8 *v97;
  char *v98;
  uint64_t v99;
  _OWORD *v100;
  _QWORD *v101;
  unint64_t i;
  int v103;
  uint64_t v104;
  int v105;
  unint64_t v106;
  char *v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *__dst;
  void *__dsta;
  char *v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  void *v119[2];
  __int128 v120;
  __int128 v121;
  void *v122[2];
  void *v123[2];
  __int128 v124;
  char *v125;

  if (*(_DWORD *)a1 != 62053)
    return 2;
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)v5 != 53829 || (*(_BYTE *)(v5 + 72) & 4) != 0)
    return 2;
  v8 = a5 & 7;
  v9 = *(_QWORD *)(v5 + 48);
  if (v9 > 64)
  {
    v120 = 0uLL;
    v121 = 0uLL;
    *(_OWORD *)v119 = 0uLL;
    v18 = *(void **)(v5 + 56);
    v17 = *(_QWORD *)(v5 + 64);
    if ((*(_BYTE *)(v5 + 40) & 4) != 0)
      v19 = 0;
    else
      v19 = a3;
    if ((a5 & 4) != 0)
    {
      v20 = a4[1];
      v21 = &__s[*a4];
    }
    else
    {
      v20 = strlen(__s);
      v21 = __s;
    }
    v62 = &__s[v20];
    if (&__s[v20] < v21)
      return 16;
    v63 = *(unsigned __int8 **)(v5 + 96);
    v112 = v19;
    v117 = &__s[v20];
    v109 = a4;
    if (v63)
    {
      v64 = v21;
      if (v21 < v62)
      {
        __dsta = *(void **)(v5 + 56);
        v105 = v8;
        v65 = v5;
        v66 = *v63;
        v67 = (char *)(__s - v21 + v20);
        v107 = &__s[v20];
        v68 = (char *)(&__s[v20] - v21);
        v64 = v21;
        do
        {
          if (*v64 == v66)
          {
            v69 = *(int *)(v65 + 104);
            if ((uint64_t)v68 >= v69 && !memcmp(v64, v63, v69))
              goto LABEL_146;
          }
          ++v64;
          --v68;
          --v67;
        }
        while (v67);
        v64 = v107;
LABEL_146:
        v5 = v65;
        v18 = __dsta;
        v62 = v117;
        v8 = v105;
      }
      if (v64 == v62)
        return 1;
    }
    v118 = v5;
    LODWORD(v119[0]) = v8;
    *(_QWORD *)&v120 = __s;
    *((_QWORD *)&v120 + 1) = v21;
    v122[0] = 0;
    *(_QWORD *)&v121 = v62;
    v70 = (char *)malloc_type_malloc(4 * v9, 0x2667397EuLL);
    v123[0] = v70;
    if (!v70)
      return 12;
    v71 = (uint64_t)v18 + 1;
    v123[1] = v70;
    v72 = *(_QWORD *)(v5 + 48);
    *(_QWORD *)&v124 = &v70[v72];
    *((_QWORD *)&v124 + 1) = &v70[2 * v72];
    v122[1] = (void *)4;
    v125 = &v70[3 * v72];
    bzero(v125, v72);
    v111 = v5;
LABEL_150:
    if (*((char **)&v120 + 1) == v21)
      v73 = 128;
    else
      v73 = *(v21 - 1);
    v74 = v124;
    v75 = v123[1];
    bzero(v123[1], *(_QWORD *)(v118 + 48));
    v75[v71] = 1;
    sub_1C5E77D64(v118, v71, v17, (uint64_t)v75, 132, (uint64_t)v75);
    memmove((void *)v74, v75, *(_QWORD *)(v118 + 48));
    v76 = 0;
    while (1)
    {
      if (v21 == (char *)v121)
        v77 = 128;
      else
        v77 = *v21;
      v78 = v118;
      if (!memcmp(v75, (const void *)v74, *(_QWORD *)(v118 + 48)))
        v76 = v21;
      if (v73 == 128)
      {
        if (((uint64_t)v119[0] & 1) != 0)
          goto LABEL_162;
      }
      else if (v73 != 10 || (*(_BYTE *)(v78 + 40) & 8) == 0)
      {
LABEL_162:
        v79 = 0;
        v80 = 0;
        v81 = 130;
        goto LABEL_165;
      }
      v80 = *(_DWORD *)(v78 + 76);
      v79 = 129;
      v81 = 131;
LABEL_165:
      if (v77 == 128)
      {
        if (((uint64_t)v119[0] & 2) != 0)
          goto LABEL_168;
      }
      else if (v77 != 10 || (*(_BYTE *)(v78 + 40) & 8) == 0)
      {
LABEL_168:
        v81 = v79;
        goto LABEL_171;
      }
      v80 += *(_DWORD *)(v78 + 80);
LABEL_171:
      if (v80 >= 1)
      {
        v82 = v80 + 1;
        do
        {
          sub_1C5E77D64(v118, v71, v17, (uint64_t)v75, v81, (uint64_t)v75);
          --v82;
        }
        while (v82 > 1);
      }
      if (v81 == 129)
      {
        if (v77 == 128)
        {
          v81 = 129;
        }
        else
        {
LABEL_184:
          if (v77 > 0x7Fu)
            v84 = __maskrune(v77, 0x500uLL);
          else
            v84 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v77 + 60) & 0x500;
          if (v77 == 95 || v84 != 0)
            v81 = 133;
        }
        if (v73 == 128)
          goto LABEL_199;
        v83 = v73;
        goto LABEL_194;
      }
      if (v73 == 128)
        goto LABEL_199;
      v83 = v73;
      if (v73 > 0x7Fu)
      {
        if (__maskrune(v73, 0x500uLL))
          goto LABEL_194;
      }
      else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v73 + 60) & 0x500) != 0)
      {
        goto LABEL_194;
      }
      if (v73 != 95 && v77 != 128)
        goto LABEL_184;
LABEL_194:
      if (v83 > 0x7F)
      {
        if (__maskrune(v83, 0x500uLL))
          goto LABEL_202;
      }
      else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v83 + 60) & 0x500) != 0)
      {
        goto LABEL_202;
      }
      if (v73 != 95)
      {
LABEL_199:
        v86 = v117;
LABEL_200:
        if ((v81 - 133) > 1)
          goto LABEL_205;
        goto LABEL_204;
      }
LABEL_202:
      if (v81 == 130)
      {
        v81 = 134;
        v86 = v117;
      }
      else
      {
        v86 = v117;
        if (v77 == 128)
          goto LABEL_200;
        v87 = v77 > 0x7Fu
            ? __maskrune(v77, 0x500uLL)
            : *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v77 + 60) & 0x500;
        if (v87 || v77 == 95)
          goto LABEL_200;
        v81 = 134;
      }
LABEL_204:
      sub_1C5E77D64(v118, v71, v17, (uint64_t)v75, v81, (uint64_t)v75);
LABEL_205:
      if (v21 == v86 || v75[v17])
      {
        *((_QWORD *)&v121 + 1) = v76;
        if (!v75[v17])
        {
          free(v119[1]);
          free(v122[0]);
          v15 = 1;
          goto LABEL_256;
        }
        if (!v112 && !*(_DWORD *)(v111 + 120))
          goto LABEL_251;
        v88 = sub_1C5E76F5C(&v118, v76, v86, v71, v17);
        if (!v88)
        {
          do
          {
            ++*((_QWORD *)&v121 + 1);
            v89 = sub_1C5E76F5C(&v118, *((char **)&v121 + 1), v86, v71, v17);
          }
          while (!v89);
          v88 = v89;
        }
        if (v112 == 1 && !*(_DWORD *)(v111 + 120))
        {
LABEL_245:
          v98 = &v88[-v120];
          *v109 = *((_QWORD *)&v121 + 1) - v120;
          v109[1] = v98;
          if (v112 >= 2)
          {
            v99 = v118;
            v100 = (char *)v119[1] + 16;
            v101 = v109 + 2;
            for (i = 1; i != v112; ++i)
            {
              if (i <= *(_QWORD *)(v99 + 112))
              {
                *(_OWORD *)v101 = *v100;
              }
              else
              {
                *v101 = -1;
                v101[1] = -1;
              }
              ++v100;
              v101 += 2;
            }
          }
          goto LABEL_251;
        }
        v90 = (char *)v119[1];
        if (!v119[1])
        {
          v90 = (char *)malloc_type_malloc(16 * *(_QWORD *)(v118 + 112) + 16, 0x1000040451B5BE8uLL);
          v119[1] = v90;
          if (!v90)
            goto LABEL_263;
        }
        v91 = *(_QWORD *)(v118 + 112);
        if (v91)
        {
          v92 = v90 + 16;
          if ((unint64_t)(v91 + 1) > 2)
            v93 = v91 + 1;
          else
            v93 = 2;
          memset(v92, 255, 16 * v93 - 16);
        }
        if (!*(_DWORD *)(v111 + 120) && (BYTE1(v119[0]) & 4) == 0)
        {
          v94 = (uint64_t)sub_1C5E772F4(&v118, *((char **)&v121 + 1), v88, v71, v17);
          goto LABEL_240;
        }
        v95 = *(_QWORD *)(v111 + 128);
        v96 = v122[0];
        if (v95 >= 1 && !v122[0])
        {
          v96 = malloc_type_malloc(8 * v95 + 8, 0x10040436913F5uLL);
          v122[0] = v96;
          v95 = *(_QWORD *)(v111 + 128);
        }
        if (v95 >= 1 && !v96)
        {
          free(v119[1]);
LABEL_263:
          v15 = 12;
          goto LABEL_256;
        }
        v97 = (unsigned __int8 *)*((_QWORD *)&v121 + 1);
        do
        {
          v94 = sub_1C5E77808(&v118, v97, (unsigned __int8 *)v88, v71, v17, 0, 0);
LABEL_240:
          if (v94)
            goto LABEL_244;
          v97 = (unsigned __int8 *)*((_QWORD *)&v121 + 1);
          if ((unint64_t)v88 <= *((_QWORD *)&v121 + 1))
            break;
          v88 = sub_1C5E76F5C(&v118, *((char **)&v121 + 1), v88 - 1, v71, v17);
          v97 = (unsigned __int8 *)*((_QWORD *)&v121 + 1);
        }
        while (v88);
        v21 = (char *)(v97 + 1);
        if (v97 == (unsigned __int8 *)v86)
        {
LABEL_244:
          if (v112)
            goto LABEL_245;
LABEL_251:
          if (v119[1])
            free(v119[1]);
          if (v122[0])
            free(v122[0]);
          v15 = 0;
LABEL_256:
          free(v123[0]);
          return v15;
        }
        goto LABEL_150;
      }
      memmove(*((void **)&v74 + 1), v75, *(_QWORD *)(v118 + 48));
      memmove(v75, (const void *)v74, *(_QWORD *)(v118 + 48));
      sub_1C5E77D64(v118, v71, v17, *((uint64_t *)&v74 + 1), v77, (uint64_t)v75);
      ++v21;
      v73 = v77;
    }
  }
  v121 = 0uLL;
  *(_OWORD *)v122 = 0uLL;
  *(_OWORD *)v119 = 0uLL;
  v120 = 0uLL;
  v11 = *(_QWORD *)(v5 + 56);
  v10 = *(_QWORD *)(v5 + 64);
  if ((*(_BYTE *)(v5 + 40) & 4) != 0)
    v12 = 0;
  else
    v12 = a3;
  if ((a5 & 4) != 0)
  {
    v13 = a4[1];
    v14 = &__s[*a4];
  }
  else
  {
    v13 = strlen(__s);
    v14 = __s;
  }
  v22 = &__s[v13];
  if (&__s[v13] < v14)
    return 16;
  v106 = v12;
  v108 = a4;
  v23 = *(unsigned __int8 **)(v5 + 96);
  __dst = &__s[v13];
  if (v23)
  {
    v24 = v14;
    if (v14 < v22)
    {
      v103 = v8;
      v25 = v5;
      v26 = *v23;
      v27 = (char *)(__s - v14 + v13);
      v115 = &__s[v13];
      v28 = (char *)(&__s[v13] - v14);
      v24 = v14;
      while (1)
      {
        if (*v24 == v26)
        {
          v29 = *(int *)(v25 + 104);
          if ((uint64_t)v28 >= v29 && !memcmp(v24, v23, v29))
            break;
        }
        ++v24;
        --v28;
        if (!--v27)
        {
          v24 = v115;
          break;
        }
      }
      v5 = v25;
      v22 = __dst;
      v8 = v103;
    }
    if (v24 == v22)
      return 1;
  }
  v30 = v11 + 1;
  v118 = v5;
  LODWORD(v119[0]) = v8;
  *(_QWORD *)&v120 = __s;
  *((_QWORD *)&v120 + 1) = v14;
  *(_QWORD *)&v121 = v22;
  v104 = 1 << (v11 + 1);
  v110 = v5;
  *(_OWORD *)v123 = 0u;
  v124 = 0u;
LABEL_30:
  if (*((char **)&v120 + 1) == v14)
    v31 = 128;
  else
    v31 = *(v14 - 1);
  v32 = v118;
  v33 = sub_1C5E76D98(v118, v30, v10, v104, 132, v104);
  v34 = 0;
  v35 = v33;
  v116 = v33;
  while (1)
  {
    v36 = v14 == (char *)v121 ? 128 : *v14;
    v37 = v35 == v33 ? v14 : v34;
    if (v31 == 128)
    {
      if (((uint64_t)v119[0] & 1) != 0)
        goto LABEL_43;
    }
    else if (v31 != 10 || (*(_BYTE *)(v32 + 40) & 8) == 0)
    {
LABEL_43:
      v38 = 0;
      v39 = 0;
      v40 = 130;
      goto LABEL_46;
    }
    v39 = *(_DWORD *)(v32 + 76);
    v38 = 129;
    v40 = 131;
LABEL_46:
    if (v36 == 128)
    {
      if (((uint64_t)v119[0] & 2) != 0)
        goto LABEL_49;
    }
    else if (v36 != 10 || (*(_BYTE *)(v32 + 40) & 8) == 0)
    {
LABEL_49:
      v40 = v38;
      goto LABEL_52;
    }
    v39 += *(_DWORD *)(v32 + 80);
LABEL_52:
    if (v39 >= 1)
    {
      v41 = v39 + 1;
      do
      {
        v35 = sub_1C5E76D98(v32, v30, v10, v35, v40, v35);
        --v41;
      }
      while (v41 > 1);
    }
    if (v40 == 129)
    {
      if (v36 == 128)
      {
        v40 = 129;
      }
      else
      {
LABEL_65:
        if (v36 > 0x7Fu)
          v43 = __maskrune(v36, 0x500uLL);
        else
          v43 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v36 + 60) & 0x500;
        if (v36 == 95 || v43 != 0)
          v40 = 133;
      }
      if (v31 == 128)
        goto LABEL_83;
      v42 = v31;
      goto LABEL_75;
    }
    if (v31 == 128)
      goto LABEL_83;
    v42 = v31;
    if (v31 > 0x7Fu)
    {
      if (__maskrune(v31, 0x500uLL))
        goto LABEL_75;
    }
    else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v31 + 60) & 0x500) != 0)
    {
      goto LABEL_75;
    }
    if (v31 != 95 && v36 != 128)
      goto LABEL_65;
LABEL_75:
    if (v42 > 0x7F)
    {
      if (!__maskrune(v42, 0x500uLL))
      {
LABEL_79:
        if (v31 != 95)
          goto LABEL_83;
      }
    }
    else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v42 + 60) & 0x500) == 0)
    {
      goto LABEL_79;
    }
    if (v40 == 130
      || v36 != 128
      && (v36 > 0x7Fu
        ? (v46 = __maskrune(v36, 0x500uLL))
        : (v46 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v36 + 60) & 0x500),
          !v46 && v36 != 95))
    {
      v40 = 134;
LABEL_84:
      v35 = sub_1C5E76D98(v118, v30, v10, v35, v40, v35);
      goto LABEL_85;
    }
LABEL_83:
    if ((v40 - 133) <= 1)
      goto LABEL_84;
LABEL_85:
    v34 = v37;
    v33 = v116;
    v45 = v35 & (1 << v10);
    if (v14 == __dst || v45)
      break;
    v32 = v118;
    v35 = sub_1C5E76D98(v118, v30, v10, v35, v36, v116);
    ++v14;
    v31 = v36;
  }
  *((_QWORD *)&v121 + 1) = v34;
  if (!v45)
  {
    free(v119[1]);
    free(v122[0]);
    return 1;
  }
  if (!v106 && !*(_DWORD *)(v110 + 120))
    goto LABEL_130;
  v47 = sub_1C5E75FD4(&v118, v34, __dst, v30, v10);
  if (!v47)
  {
    do
    {
      ++*((_QWORD *)&v121 + 1);
      v48 = sub_1C5E75FD4(&v118, *((char **)&v121 + 1), __dst, v30, v10);
    }
    while (!v48);
    v47 = v48;
  }
  if (v106 == 1 && !*(_DWORD *)(v110 + 120))
    goto LABEL_124;
  v49 = (char *)v119[1];
  if (!v119[1])
  {
    v49 = (char *)malloc_type_malloc(16 * *(_QWORD *)(v118 + 112) + 16, 0x1000040451B5BE8uLL);
    v119[1] = v49;
    if (!v49)
      return 12;
  }
  v50 = *(_QWORD *)(v118 + 112);
  if (v50)
  {
    v51 = v49 + 16;
    if ((unint64_t)(v50 + 1) > 2)
      v52 = v50 + 1;
    else
      v52 = 2;
    memset(v51, 255, 16 * v52 - 16);
  }
  if (!*(_DWORD *)(v110 + 120) && (BYTE1(v119[0]) & 4) == 0)
  {
    v53 = (uint64_t)sub_1C5E76328(&v118, *((char **)&v121 + 1), v47, v30, v10);
    goto LABEL_119;
  }
  v54 = *(_QWORD *)(v110 + 128);
  v55 = v122[0];
  if (v54 >= 1 && !v122[0])
  {
    v55 = malloc_type_malloc(8 * v54 + 8, 0x10040436913F5uLL);
    v122[0] = v55;
    v54 = *(_QWORD *)(v110 + 128);
  }
  if (v54 >= 1 && !v55)
  {
    free(v119[1]);
    return 12;
  }
  v56 = (unsigned __int8 *)*((_QWORD *)&v121 + 1);
  while (1)
  {
    v53 = sub_1C5E7683C(&v118, v56, (unsigned __int8 *)v47, v30, v10, 0, 0);
LABEL_119:
    if (v53)
      break;
    v56 = (unsigned __int8 *)*((_QWORD *)&v121 + 1);
    if ((unint64_t)v47 > *((_QWORD *)&v121 + 1))
    {
      v47 = sub_1C5E75FD4(&v118, *((char **)&v121 + 1), v47 - 1, v30, v10);
      v56 = (unsigned __int8 *)*((_QWORD *)&v121 + 1);
      if (v47)
        continue;
    }
    v14 = (char *)(v56 + 1);
    if (v56 != (unsigned __int8 *)__dst)
      goto LABEL_30;
    break;
  }
  if (v106)
  {
LABEL_124:
    v57 = &v47[-v120];
    *v108 = *((_QWORD *)&v121 + 1) - v120;
    v108[1] = v57;
    if (v106 >= 2)
    {
      v58 = v118;
      v59 = (char *)v119[1] + 16;
      v60 = v108 + 2;
      for (j = 1; j != v106; ++j)
      {
        if (j <= *(_QWORD *)(v58 + 112))
        {
          *(_OWORD *)v60 = *v59;
        }
        else
        {
          *v60 = -1;
          v60[1] = -1;
        }
        ++v59;
        v60 += 2;
      }
    }
  }
LABEL_130:
  if (v119[1])
    free(v119[1]);
  if (v122[0])
    free(v122[0]);
  return 0;
}

char *sub_1C5E75FD4(uint64_t *a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  char *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unint64_t v21;
  unint64_t v23;

  v7 = a2;
  v23 = a1[12];
  if ((char *)a1[4] == a2)
    v8 = 128;
  else
    v8 = *(a2 - 1);
  v9 = *a1;
  v10 = sub_1C5E76D98(*a1, a4, a5, 1 << a4, 132, 1 << a4);
  v11 = 0;
  v12 = a1;
  while (1)
  {
    v13 = v7 == (char *)v12[5] ? 128 : *v7;
    if (v8 == 128)
    {
      if ((v12[1] & 1) != 0)
        goto LABEL_11;
    }
    else if (v8 != 10 || (*(_BYTE *)(v9 + 40) & 8) == 0)
    {
LABEL_11:
      v14 = 0;
      v15 = 0;
      v16 = 130;
      goto LABEL_14;
    }
    v15 = *(_DWORD *)(v9 + 76);
    v14 = 129;
    v16 = 131;
LABEL_14:
    if (v13 == 128)
    {
      if ((v12[1] & 2) != 0)
        goto LABEL_17;
    }
    else if (v13 != 10 || (*(_BYTE *)(v9 + 40) & 8) == 0)
    {
LABEL_17:
      v16 = v14;
      goto LABEL_20;
    }
    v15 += *(_DWORD *)(v9 + 80);
LABEL_20:
    if (v15 >= 1)
    {
      v17 = v15 + 1;
      do
      {
        v10 = sub_1C5E76D98(v9, a4, a5, v10, v16, v10);
        --v17;
      }
      while (v17 > 1);
    }
    if (v16 == 129)
    {
      v12 = a1;
      if (v13 == 128)
      {
        v16 = 129;
      }
      else
      {
LABEL_33:
        if (v13 > 0x7Fu)
          v19 = __maskrune(v13, 0x500uLL);
        else
          v19 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v13 + 60) & 0x500;
        if (v13 == 95 || v19 != 0)
          v16 = 133;
      }
      if (v8 == 128)
        goto LABEL_51;
      v18 = v8;
      goto LABEL_43;
    }
    v12 = a1;
    if (v8 == 128)
      goto LABEL_51;
    v18 = v8;
    if (v8 > 0x7Fu)
    {
      if (__maskrune(v8, 0x500uLL))
        goto LABEL_43;
    }
    else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v8 + 60) & 0x500) != 0)
    {
      goto LABEL_43;
    }
    if (v8 != 95 && v13 != 128)
      goto LABEL_33;
LABEL_43:
    if (v18 > 0x7F)
    {
      if (__maskrune(v18, 0x500uLL))
        goto LABEL_48;
    }
    else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v18 + 60) & 0x500) != 0)
    {
      goto LABEL_48;
    }
    if (v8 != 95)
      goto LABEL_51;
LABEL_48:
    if (v16 == 130)
    {
      v16 = 134;
      v21 = v23;
    }
    else
    {
      if (v13 == 128)
      {
LABEL_51:
        v21 = v23;
LABEL_52:
        if ((v16 - 133) > 1)
          goto LABEL_54;
        goto LABEL_53;
      }
      v21 = v23;
      if (v13 > 0x7Fu)
      {
        if (__maskrune(v13, 0x500uLL))
          goto LABEL_52;
      }
      else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v13 + 60) & 0x500) != 0)
      {
        goto LABEL_52;
      }
      if (v13 == 95)
        goto LABEL_52;
      v16 = 134;
    }
LABEL_53:
    v10 = sub_1C5E76D98(*v12, a4, a5, v10, v16, v10);
LABEL_54:
    if ((v10 & (1 << a5)) != 0)
      v11 = v7;
    if (v7 == a3 || v10 == v21)
      return v11;
    v9 = *v12;
    v10 = sub_1C5E76D98(*v12, a4, a5, v10, v13, v21);
    ++v7;
    v8 = v13;
  }
}

char *sub_1C5E76328(uint64_t *a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int *v20;
  uint64_t v21;
  char v22;
  int v23;
  unsigned int v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  int *v34;
  uint64_t v35;
  char v36;
  int v37;
  unsigned int v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;

  if (a4 >= a5)
    return a2;
  v7 = a4;
  v51 = a5 - 1;
  do
  {
    v10 = v7;
    v11 = *(_QWORD *)(*a1 + 8);
    v12 = *(_QWORD *)(v11 + 8 * v7);
    v13 = v12 & 0xF8000000;
    if ((v12 & 0xF8000000) == 0x48000000 || v13 == 1476395008)
    {
      v15 = (v12 & 0x7FFFFFF) + v7;
    }
    else
    {
      v16 = v13 != 2013265920 || (v12 & 0xF8000000) == 2415919104;
      v15 = v7;
      if (!v16)
      {
        v17 = *(_QWORD *)(v11 + 8 * v7);
        v15 = v7;
        do
        {
          v15 += v17 & 0x7FFFFFF;
          v17 = *(_QWORD *)(v11 + 8 * v15);
        }
        while ((v17 & 0xF8000000) != 0x90000000);
      }
    }
    v7 = v15 + 1;
    switch(((unint64_t)(v12 & 0xF8000000) - 0x8000000) >> 27)
    {
      case 1uLL:
      case 4uLL:
      case 5uLL:
        ++a2;
        continue;
      case 8uLL:
        v18 = sub_1C5E75FD4(a1, a2, a3, v10, v15 + 1);
        if (sub_1C5E75FD4(a1, v18, a3, v15 + 1, a5) == a3)
        {
LABEL_30:
          v26 = v10 + 1;
          v27 = a2;
          do
          {
            v28 = v27;
            v27 = a2;
            v29 = sub_1C5E75FD4(a1, a2, v18, v26, v15);
            a2 = v29;
          }
          while (v29 && v29 != v27);
          if (v29)
            v30 = v27;
          else
            v30 = v28;
          if (v29)
            v31 = v29;
          else
            v31 = v27;
          sub_1C5E76328(a1, v30, v31, v26, v15);
          a2 = v18;
          continue;
        }
        while (1)
        {
          v19 = v18 - 1;
          if (v7 >= a5)
            goto LABEL_28;
          v20 = (int *)(*(_QWORD *)(*a1 + 8) + 8 * v15 + 8);
          v21 = v51 - v15;
          while (1)
          {
            v23 = *v20;
            v20 += 2;
            v22 = v23;
            v24 = v23 & 0xF8000000;
            if ((v23 & 0xF8000000) != 0x70000000)
              break;
            if (!--v21)
              goto LABEL_28;
          }
          if (v24 != 0x10000000)
            goto LABEL_28;
          v25 = a2;
          if (v19 != a2)
            break;
LABEL_29:
          v18 = sub_1C5E75FD4(a1, a2, v25, v10, v15 + 1);
          if (sub_1C5E75FD4(a1, v18, a3, v15 + 1, a5) == a3)
            goto LABEL_30;
        }
        while (v22 != *v19)
        {
          if (--v19 == a2)
          {
            v25 = a2;
            goto LABEL_29;
          }
        }
LABEL_28:
        v25 = v19;
        goto LABEL_29;
      case 0xAuLL:
        v32 = sub_1C5E75FD4(a1, a2, a3, v10, v15 + 1);
        if (sub_1C5E75FD4(a1, v32, a3, v15 + 1, a5) == a3)
          goto LABEL_53;
        break;
      case 0xCuLL:
        *(_QWORD *)(a1[2] + 16 * (v12 & 0x7FFFFFF)) = &a2[-a1[3]];
        continue;
      case 0xDuLL:
        *(_QWORD *)(a1[2] + 16 * (v12 & 0x7FFFFFF) + 8) = &a2[-a1[3]];
        continue;
      case 0xEuLL:
        v41 = a3;
        do
        {
          v42 = sub_1C5E75FD4(a1, a2, v41, v10, v7);
          v43 = sub_1C5E75FD4(a1, v42, a3, v7, a5);
          v41 = v42 - 1;
        }
        while (v43 != a3);
        v44 = v10 + (*(_QWORD *)(*(_QWORD *)(*a1 + 8) + 8 * v10) & 0x7FFFFFFLL) - 1;
        v45 = v10 + 1;
        while (sub_1C5E75FD4(a1, a2, v42, v45, v44) != v42)
        {
          v46 = *(_QWORD *)(*a1 + 8);
          v47 = *(_QWORD *)(v46 + 8 * (v44 + 1)) & 0x7FFFFFFLL;
          v48 = v47 + v44 + 1;
          v49 = v47 + v44;
          v45 = v44 + 2;
          if ((*(_QWORD *)(v46 + 8 * v48) & 0xF8000000) == 0x88000000)
            v44 = v49;
          else
            v44 = v48;
        }
        sub_1C5E76328(a1, a2, v42, v45, v44);
        a2 = v42;
        continue;
      default:
        continue;
    }
    do
    {
      v33 = v32 - 1;
      if (v7 < a5)
      {
        v34 = (int *)(*(_QWORD *)(*a1 + 8) + 8 * v15 + 8);
        v35 = v51 - v15;
        while (1)
        {
          v37 = *v34;
          v34 += 2;
          v36 = v37;
          v38 = v37 & 0xF8000000;
          if ((v37 & 0xF8000000) != 0x70000000)
            break;
          if (!--v35)
            goto LABEL_51;
        }
        if (v38 == 0x10000000)
        {
          v39 = a2;
          if (v33 == a2)
            goto LABEL_52;
          while (v36 != *v33)
          {
            if (--v33 == a2)
            {
              v39 = a2;
              goto LABEL_52;
            }
          }
        }
      }
LABEL_51:
      v39 = v33;
LABEL_52:
      v32 = sub_1C5E75FD4(a1, a2, v39, v10, v15 + 1);
    }
    while (sub_1C5E75FD4(a1, v32, a3, v15 + 1, a5) != a3);
LABEL_53:
    v40 = v10 + 1;
    if (sub_1C5E75FD4(a1, a2, v32, v40, v15))
      sub_1C5E76328(a1, a2, v32, v40, v15);
    a2 = v32;
  }
  while (v7 < a5);
  return a2;
}

uint64_t sub_1C5E7683C(uint64_t *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  int v34;
  unsigned __int8 *v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  if (a4 >= a5)
  {
LABEL_78:
    if (a2 == a3)
      return (uint64_t)a2;
    else
      return 0;
  }
  v12 = a4;
LABEL_3:
  v14 = v12;
  while (2)
  {
    v15 = *a1;
    v16 = *(_QWORD *)(*a1 + 8);
    v17 = *(_QWORD *)(v16 + 8 * v14);
    switch(((unint64_t)(v17 & 0xF8000000) - 0x10000000) >> 27)
    {
      case 0uLL:
        if (a2 != a3)
        {
          v26 = (char)*a2++;
          if (v26 == (char)v17)
            goto LABEL_70;
        }
        return 0;
      case 1uLL:
        if (a2 == (unsigned __int8 *)a1[4] && (a1[1] & 1) == 0)
          goto LABEL_70;
        if ((unint64_t)a2 >= a1[5])
          return 0;
        v27 = *(a2 - 1);
        goto LABEL_28;
      case 2uLL:
        v28 = (unsigned __int8 *)a1[5];
        if (a2 == v28 && (a1[1] & 2) == 0)
          goto LABEL_70;
        if (a2 >= v28)
          return 0;
        v27 = *a2;
LABEL_28:
        if (v27 != 10 || (*(_BYTE *)(v15 + 40) & 8) == 0)
          return 0;
        goto LABEL_70;
      case 3uLL:
        if (a2 == a3)
          return 0;
        ++a2;
        goto LABEL_70;
      case 4uLL:
        if (a2 == a3)
          return 0;
        v29 = *(_QWORD *)(v15 + 24) + 32 * (v17 & 0x7FFFFFF);
        v30 = *a2++;
        if ((*(_BYTE *)(v29 + 8) & *(_BYTE *)(*(_QWORD *)v29 + v30)) == 0)
          return 0;
        goto LABEL_70;
      case 0xAuLL:
        goto LABEL_70;
      case 0xEuLL:
        ++v14;
        v31 = *(_QWORD *)(v16 + 8 * v14);
        do
        {
          v14 += v31 & 0x7FFFFFF;
          v31 = *(_QWORD *)(v16 + 8 * v14);
        }
        while ((v31 & 0xF8000000) != 0x90000000);
        goto LABEL_70;
      case 0x11uLL:
        v32 = (unsigned __int8 *)a1[4];
        if (a2 == v32 && (a1[1] & 1) == 0
          || (unint64_t)a2 < a1[5] && *(a2 - 1) == 10 && (*(_BYTE *)(v15 + 40) & 8) != 0)
        {
          goto LABEL_58;
        }
        if (a2 <= v32)
          return 0;
        v33 = *(a2 - 1);
        if ((char)*(a2 - 1) < 0)
          v34 = __maskrune(*(a2 - 1), 0x500uLL);
        else
          v34 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v33 + 60) & 0x500;
        result = 0;
        if ((_DWORD)v33 == 95 || v34)
          return result;
LABEL_58:
        if ((unint64_t)a2 >= a1[5])
          return 0;
        v38 = (char)*a2;
        goto LABEL_65;
      case 0x12uLL:
        v35 = (unsigned __int8 *)a1[5];
        if (a2 == v35 && (a1[1] & 2) == 0)
          goto LABEL_63;
        if (a2 >= v35)
          return 0;
        v36 = *a2;
        if ((_DWORD)v36 == 10)
        {
          if ((*(_BYTE *)(v15 + 40) & 8) != 0)
            goto LABEL_63;
LABEL_54:
          v37 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v36 + 60) & 0x500;
          goto LABEL_61;
        }
        if ((v36 & 0x80) == 0)
          goto LABEL_54;
        v37 = __maskrune(*a2, 0x500uLL);
LABEL_61:
        result = 0;
        if ((_DWORD)v36 == 95 || v37)
          return result;
LABEL_63:
        if ((unint64_t)a2 <= a1[4])
          return 0;
        v38 = (char)*(a2 - 1);
LABEL_65:
        v39 = v38;
        v40 = v38 < 0
            ? __maskrune(v38, 0x500uLL)
            : *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v38 + 60) & 0x500;
        if (v39 != 95 && !v40)
          return 0;
LABEL_70:
        ++v14;
        goto LABEL_71;
      default:
        v12 = v14 + 1;
        v18 = ((unint64_t)(v17 & 0xF8000000) - 939524096) >> 27;
        if (v18 == 4)
        {
          result = sub_1C5E7683C(a1, a2, a3, v14 + 1, a5, a6, a7);
          if (result)
            return result;
          v14 = (v17 & 0x7FFFFFF) + v12;
LABEL_71:
          if (v14 >= a5)
            goto LABEL_78;
          continue;
        }
        result = 0;
        switch(v18)
        {
          case 0uLL:
            v20 = v17 & 0x7FFFFFF;
            v21 = a1[2];
            v22 = *(_QWORD *)(v21 + 16 * v20 + 8);
            if (v22 == -1)
              return 0;
            v23 = *(_QWORD *)(v21 + 16 * v20);
            v24 = v22 - v23;
            if (v22 == v23)
            {
              if ((int)a7 > 100)
                return 0;
              a7 = (a7 + 1);
            }
            if (a2 > &a3[-v24] || memcmp(a2, (const void *)(a1[3] + v23), v24))
              return 0;
            do
              v25 = *(_QWORD *)(v16 + 8 * v14++);
            while (v25 != (v20 | 0x40000000));
            a2 += v24;
            goto LABEL_71;
          case 2uLL:
            ++a6;
            *(_QWORD *)(a1[7] + 8 * a6) = a2;
            goto LABEL_77;
          case 3uLL:
            v41 = a1[7];
            if (a2 != *(unsigned __int8 **)(v41 + 8 * a6))
            {
              *(_QWORD *)(v41 + 8 * a6) = a2;
              result = sub_1C5E7683C(a1, a2, a3, v12 - (v17 & 0x7FFFFFF), a5, a6, a7);
              if (result)
                return result;
            }
            --a6;
LABEL_77:
            if (v12 >= a5)
              goto LABEL_78;
            goto LABEL_3;
          case 6uLL:
            v42 = 16 * (v17 & 0x7FFFFFF);
            v43 = a1[2];
            v44 = *(_QWORD *)(v43 + v42);
            *(_QWORD *)(v43 + v42) = &a2[-a1[3]];
            result = sub_1C5E7683C(a1, a2, a3, v12, a5, a6, a7);
            if (!result)
              *(_QWORD *)(a1[2] + v42) = v44;
            return result;
          case 7uLL:
            v45 = v17 & 0x7FFFFFF;
            v46 = a1[2] + 16 * v45;
            v47 = *(_QWORD *)(v46 + 8);
            *(_QWORD *)(v46 + 8) = &a2[-a1[3]];
            result = sub_1C5E7683C(a1, a2, a3, v12, a5, a6, a7);
            if (!result)
              *(_QWORD *)(a1[2] + 16 * v45 + 8) = v47;
            return result;
          case 8uLL:
            v48 = v14 + (v17 & 0x7FFFFFF) - 1;
            result = sub_1C5E7683C(a1, a2, a3, v14 + 1, v48, a6, a7);
            if (result)
              return result;
            break;
          default:
            return result;
        }
        while (1)
        {
          v49 = *(_QWORD *)(*a1 + 8);
          if ((*(_QWORD *)(v49 + 8 * v48) & 0xF8000000) == 0x90000000)
            break;
          v50 = v48 + 2;
          v51 = *(_QWORD *)(v49 + 8 * (v48 + 1)) & 0x7FFFFFFLL;
          v52 = v51 + v48 + 1;
          v53 = v51 + v48;
          if ((*(_QWORD *)(v49 + 8 * v52) & 0xF8000000) == 0x88000000)
            v48 = v53;
          else
            v48 = v52;
          result = sub_1C5E7683C(a1, a2, a3, v50, v48, a6, a7);
          if (result)
            return result;
        }
        return 0;
    }
  }
}

unint64_t sub_1C5E76D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unint64_t a6)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != a3)
  {
    v6 = 1 << a2;
    v7 = *(_QWORD *)(a1 + 8);
    do
    {
      v8 = *(_QWORD *)(v7 + 8 * a2);
      switch(((unint64_t)(v8 & 0xF8000000) - 0x8000000) >> 27)
      {
        case 1uLL:
          v11 = a5 == (char)v8;
          goto LABEL_29;
        case 2uLL:
          v11 = (a5 & 0xFFFFFFFD) == 129;
          goto LABEL_29;
        case 3uLL:
          v11 = (a5 & 0xFFFFFFFE) == 130;
          goto LABEL_29;
        case 4uLL:
          if (a5 <= 127)
            a6 |= 2 * (v6 & a4);
          break;
        case 5uLL:
          if (a5 > 127)
            break;
          v12 = *(_QWORD *)(a1 + 24) + 32 * (v8 & 0x7FFFFFF);
          if ((*(_BYTE *)(v12 + 8) & *(_BYTE *)(*(_QWORD *)v12 + a5)) == 0)
            break;
          v9 = v6 & a4;
LABEL_5:
          a6 |= 2 * v9;
          break;
        case 6uLL:
        case 7uLL:
        case 8uLL:
        case 0xBuLL:
        case 0xCuLL:
        case 0xDuLL:
        case 0x11uLL:
          v9 = a6 & v6;
          goto LABEL_5;
        case 9uLL:
          v13 = a6 | (2 * (a6 & v6));
          v14 = (v6 >> v8) & v13;
          a6 = ((v13 & v6) >> v8) | v13;
          if (v14)
            v15 = 1;
          else
            v15 = (a6 & (v6 >> v8)) == 0;
          if (!v15)
          {
            a2 += ~(unint64_t)(v8 & 0x7FFFFFF);
            v6 = 1 << a2;
          }
          break;
        case 0xAuLL:
        case 0xEuLL:
          a6 |= 2 * (a6 & v6);
          goto LABEL_7;
        case 0xFuLL:
          if ((a6 & v6) == 0)
            break;
          v16 = *(_QWORD *)(v7 + 8 * a2 + 8);
          if ((v16 & 0xF8000000) == 0x90000000)
          {
            LOBYTE(v17) = 1;
          }
          else
          {
            v17 = 1;
            do
            {
              v17 += v16 & 0x7FFFFFF;
              v16 = *(_QWORD *)(v7 + 8 * (v17 + a2));
            }
            while ((v16 & 0xF8000000) != 0x90000000);
          }
          v10 = (a6 & v6) << v17;
          goto LABEL_35;
        case 0x10uLL:
          a6 |= 2 * (a6 & v6);
          v8 &= 0x7FFFFFFu;
          if ((*(_QWORD *)(v7 + 8 * (v8 + a2)) & 0xF8000000) == 0x90000000)
            break;
LABEL_7:
          v10 = (a6 & v6) << v8;
LABEL_35:
          a6 |= v10;
          break;
        case 0x12uLL:
          v11 = a5 == 133;
          goto LABEL_29;
        case 0x13uLL:
          v11 = a5 == 134;
LABEL_29:
          if (v11)
            a6 |= 2 * (v6 & a4);
          break;
        default:
          break;
      }
      ++a2;
      v6 *= 2;
    }
    while (a2 != a3);
  }
  return a6;
}

char *sub_1C5E76F5C(uint64_t *a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  char *v7;
  void *v9;
  int v10;
  char *v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  const void *v22;
  size_t v23;
  int v24;
  void *__dst;
  void *__s2;

  v7 = a2;
  v9 = (void *)a1[10];
  __s2 = (void *)a1[13];
  __dst = (void *)a1[12];
  if ((char *)a1[4] == a2)
    v10 = 128;
  else
    v10 = *(a2 - 1);
  bzero(v9, *(_QWORD *)(*a1 + 48));
  *((_BYTE *)v9 + a4) = 1;
  sub_1C5E77D64(*a1, a4, a5, (uint64_t)v9, 132, (uint64_t)v9);
  v11 = 0;
  while (1)
  {
    v12 = v7 == (char *)a1[5] ? 128 : *v7;
    if (v10 == 128)
    {
      if ((a1[1] & 1) == 0)
      {
        v13 = *a1;
LABEL_14:
        v14 = *(_DWORD *)(v13 + 76);
        v15 = 129;
        v16 = 131;
        goto LABEL_16;
      }
    }
    else if (v10 == 10)
    {
      v13 = *a1;
      if ((*(_BYTE *)(*a1 + 40) & 8) != 0)
        goto LABEL_14;
    }
    v15 = 0;
    v14 = 0;
    v16 = 130;
LABEL_16:
    if (v12 == 128)
    {
      if ((a1[1] & 2) == 0)
      {
        v17 = *a1;
LABEL_22:
        v14 += *(_DWORD *)(v17 + 80);
        goto LABEL_24;
      }
    }
    else if (v12 == 10)
    {
      v17 = *a1;
      if ((*(_BYTE *)(*a1 + 40) & 8) != 0)
        goto LABEL_22;
    }
    v16 = v15;
LABEL_24:
    if (v14 >= 1)
    {
      v18 = v14 + 1;
      do
      {
        sub_1C5E77D64(*a1, a4, a5, (uint64_t)v9, v16, (uint64_t)v9);
        --v18;
      }
      while (v18 > 1);
    }
    if (v16 == 129)
    {
      if (v12 == 128)
      {
        v16 = 129;
      }
      else
      {
LABEL_37:
        if (v12 > 0x7Fu)
          v20 = __maskrune(v12, 0x500uLL);
        else
          v20 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v12 + 60) & 0x500;
        if (v12 == 95 || v20 != 0)
          v16 = 133;
      }
      if (v10 == 128)
        goto LABEL_55;
      v19 = v10;
      goto LABEL_47;
    }
    if (v10 == 128)
      goto LABEL_55;
    v19 = v10;
    if (v10 > 0x7Fu)
    {
      if (__maskrune(v10, 0x500uLL))
        goto LABEL_47;
    }
    else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v10 + 60) & 0x500) != 0)
    {
      goto LABEL_47;
    }
    if (v10 != 95 && v12 != 128)
      goto LABEL_37;
LABEL_47:
    if (v19 > 0x7F)
    {
      if (__maskrune(v19, 0x500uLL))
        goto LABEL_52;
    }
    else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v19 + 60) & 0x500) != 0)
    {
      goto LABEL_52;
    }
    if (v10 != 95)
      goto LABEL_55;
LABEL_52:
    if (v16 == 130)
    {
      v16 = 134;
      v22 = __s2;
    }
    else
    {
      if (v12 == 128)
      {
LABEL_55:
        v22 = __s2;
LABEL_56:
        if ((v16 - 133) > 1)
          goto LABEL_58;
        goto LABEL_57;
      }
      v22 = __s2;
      if (v12 > 0x7Fu)
      {
        if (__maskrune(v12, 0x500uLL))
          goto LABEL_56;
      }
      else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v12 + 60) & 0x500) != 0)
      {
        goto LABEL_56;
      }
      if (v12 == 95)
        goto LABEL_56;
      v16 = 134;
    }
LABEL_57:
    sub_1C5E77D64(*a1, a4, a5, (uint64_t)v9, v16, (uint64_t)v9);
LABEL_58:
    if (*((_BYTE *)v9 + a5))
      v11 = v7;
    v23 = *(_QWORD *)(*a1 + 48);
    v24 = memcmp(v9, v22, v23);
    if (v7 == a3 || !v24)
      return v11;
    memmove(__dst, v9, v23);
    memmove(v9, v22, *(_QWORD *)(*a1 + 48));
    sub_1C5E77D64(*a1, a4, a5, (uint64_t)__dst, v12, (uint64_t)v9);
    ++v7;
    v10 = v12;
  }
}

char *sub_1C5E772F4(uint64_t *a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int *v20;
  uint64_t v21;
  char v22;
  int v23;
  unsigned int v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  int *v34;
  uint64_t v35;
  char v36;
  int v37;
  unsigned int v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;

  if (a4 >= a5)
    return a2;
  v7 = a4;
  v51 = a5 - 1;
  do
  {
    v10 = v7;
    v11 = *(_QWORD *)(*a1 + 8);
    v12 = *(_QWORD *)(v11 + 8 * v7);
    v13 = v12 & 0xF8000000;
    if ((v12 & 0xF8000000) == 0x48000000 || v13 == 1476395008)
    {
      v15 = (v12 & 0x7FFFFFF) + v7;
    }
    else
    {
      v16 = v13 != 2013265920 || (v12 & 0xF8000000) == 2415919104;
      v15 = v7;
      if (!v16)
      {
        v17 = *(_QWORD *)(v11 + 8 * v7);
        v15 = v7;
        do
        {
          v15 += v17 & 0x7FFFFFF;
          v17 = *(_QWORD *)(v11 + 8 * v15);
        }
        while ((v17 & 0xF8000000) != 0x90000000);
      }
    }
    v7 = v15 + 1;
    switch(((unint64_t)(v12 & 0xF8000000) - 0x8000000) >> 27)
    {
      case 1uLL:
      case 4uLL:
      case 5uLL:
        ++a2;
        continue;
      case 8uLL:
        v18 = sub_1C5E76F5C(a1, a2, a3, v10, v15 + 1);
        if (sub_1C5E76F5C(a1, v18, a3, v15 + 1, a5) == a3)
        {
LABEL_30:
          v26 = v10 + 1;
          v27 = a2;
          do
          {
            v28 = v27;
            v27 = a2;
            v29 = sub_1C5E76F5C(a1, a2, v18, v26, v15);
            a2 = v29;
          }
          while (v29 && v29 != v27);
          if (v29)
            v30 = v27;
          else
            v30 = v28;
          if (v29)
            v31 = v29;
          else
            v31 = v27;
          sub_1C5E772F4(a1, v30, v31, v26, v15);
          a2 = v18;
          continue;
        }
        while (1)
        {
          v19 = v18 - 1;
          if (v7 >= a5)
            goto LABEL_28;
          v20 = (int *)(*(_QWORD *)(*a1 + 8) + 8 * v15 + 8);
          v21 = v51 - v15;
          while (1)
          {
            v23 = *v20;
            v20 += 2;
            v22 = v23;
            v24 = v23 & 0xF8000000;
            if ((v23 & 0xF8000000) != 0x70000000)
              break;
            if (!--v21)
              goto LABEL_28;
          }
          if (v24 != 0x10000000)
            goto LABEL_28;
          v25 = a2;
          if (v19 != a2)
            break;
LABEL_29:
          v18 = sub_1C5E76F5C(a1, a2, v25, v10, v15 + 1);
          if (sub_1C5E76F5C(a1, v18, a3, v15 + 1, a5) == a3)
            goto LABEL_30;
        }
        while (v22 != *v19)
        {
          if (--v19 == a2)
          {
            v25 = a2;
            goto LABEL_29;
          }
        }
LABEL_28:
        v25 = v19;
        goto LABEL_29;
      case 0xAuLL:
        v32 = sub_1C5E76F5C(a1, a2, a3, v10, v15 + 1);
        if (sub_1C5E76F5C(a1, v32, a3, v15 + 1, a5) == a3)
          goto LABEL_53;
        break;
      case 0xCuLL:
        *(_QWORD *)(a1[2] + 16 * (v12 & 0x7FFFFFF)) = &a2[-a1[3]];
        continue;
      case 0xDuLL:
        *(_QWORD *)(a1[2] + 16 * (v12 & 0x7FFFFFF) + 8) = &a2[-a1[3]];
        continue;
      case 0xEuLL:
        v41 = a3;
        do
        {
          v42 = sub_1C5E76F5C(a1, a2, v41, v10, v7);
          v43 = sub_1C5E76F5C(a1, v42, a3, v7, a5);
          v41 = v42 - 1;
        }
        while (v43 != a3);
        v44 = v10 + (*(_QWORD *)(*(_QWORD *)(*a1 + 8) + 8 * v10) & 0x7FFFFFFLL) - 1;
        v45 = v10 + 1;
        while (sub_1C5E76F5C(a1, a2, v42, v45, v44) != v42)
        {
          v46 = *(_QWORD *)(*a1 + 8);
          v47 = *(_QWORD *)(v46 + 8 * (v44 + 1)) & 0x7FFFFFFLL;
          v48 = v47 + v44 + 1;
          v49 = v47 + v44;
          v45 = v44 + 2;
          if ((*(_QWORD *)(v46 + 8 * v48) & 0xF8000000) == 0x88000000)
            v44 = v49;
          else
            v44 = v48;
        }
        sub_1C5E772F4(a1, a2, v42, v45, v44);
        a2 = v42;
        continue;
      default:
        continue;
    }
    do
    {
      v33 = v32 - 1;
      if (v7 < a5)
      {
        v34 = (int *)(*(_QWORD *)(*a1 + 8) + 8 * v15 + 8);
        v35 = v51 - v15;
        while (1)
        {
          v37 = *v34;
          v34 += 2;
          v36 = v37;
          v38 = v37 & 0xF8000000;
          if ((v37 & 0xF8000000) != 0x70000000)
            break;
          if (!--v35)
            goto LABEL_51;
        }
        if (v38 == 0x10000000)
        {
          v39 = a2;
          if (v33 == a2)
            goto LABEL_52;
          while (v36 != *v33)
          {
            if (--v33 == a2)
            {
              v39 = a2;
              goto LABEL_52;
            }
          }
        }
      }
LABEL_51:
      v39 = v33;
LABEL_52:
      v32 = sub_1C5E76F5C(a1, a2, v39, v10, v15 + 1);
    }
    while (sub_1C5E76F5C(a1, v32, a3, v15 + 1, a5) != a3);
LABEL_53:
    v40 = v10 + 1;
    if (sub_1C5E76F5C(a1, a2, v32, v40, v15))
      sub_1C5E772F4(a1, a2, v32, v40, v15);
    a2 = v32;
  }
  while (v7 < a5);
  return a2;
}

uint64_t sub_1C5E77808(uint64_t *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  int v34;
  unsigned __int8 *v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  if (a4 >= a5)
  {
LABEL_78:
    if (a2 == a3)
      return (uint64_t)a2;
    else
      return 0;
  }
  v12 = a4;
LABEL_3:
  v14 = v12;
  while (2)
  {
    v15 = *a1;
    v16 = *(_QWORD *)(*a1 + 8);
    v17 = *(_QWORD *)(v16 + 8 * v14);
    switch(((unint64_t)(v17 & 0xF8000000) - 0x10000000) >> 27)
    {
      case 0uLL:
        if (a2 != a3)
        {
          v26 = (char)*a2++;
          if (v26 == (char)v17)
            goto LABEL_70;
        }
        return 0;
      case 1uLL:
        if (a2 == (unsigned __int8 *)a1[4] && (a1[1] & 1) == 0)
          goto LABEL_70;
        if ((unint64_t)a2 >= a1[5])
          return 0;
        v27 = *(a2 - 1);
        goto LABEL_28;
      case 2uLL:
        v28 = (unsigned __int8 *)a1[5];
        if (a2 == v28 && (a1[1] & 2) == 0)
          goto LABEL_70;
        if (a2 >= v28)
          return 0;
        v27 = *a2;
LABEL_28:
        if (v27 != 10 || (*(_BYTE *)(v15 + 40) & 8) == 0)
          return 0;
        goto LABEL_70;
      case 3uLL:
        if (a2 == a3)
          return 0;
        ++a2;
        goto LABEL_70;
      case 4uLL:
        if (a2 == a3)
          return 0;
        v29 = *(_QWORD *)(v15 + 24) + 32 * (v17 & 0x7FFFFFF);
        v30 = *a2++;
        if ((*(_BYTE *)(v29 + 8) & *(_BYTE *)(*(_QWORD *)v29 + v30)) == 0)
          return 0;
        goto LABEL_70;
      case 0xAuLL:
        goto LABEL_70;
      case 0xEuLL:
        ++v14;
        v31 = *(_QWORD *)(v16 + 8 * v14);
        do
        {
          v14 += v31 & 0x7FFFFFF;
          v31 = *(_QWORD *)(v16 + 8 * v14);
        }
        while ((v31 & 0xF8000000) != 0x90000000);
        goto LABEL_70;
      case 0x11uLL:
        v32 = (unsigned __int8 *)a1[4];
        if (a2 == v32 && (a1[1] & 1) == 0
          || (unint64_t)a2 < a1[5] && *(a2 - 1) == 10 && (*(_BYTE *)(v15 + 40) & 8) != 0)
        {
          goto LABEL_58;
        }
        if (a2 <= v32)
          return 0;
        v33 = *(a2 - 1);
        if ((char)*(a2 - 1) < 0)
          v34 = __maskrune(*(a2 - 1), 0x500uLL);
        else
          v34 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v33 + 60) & 0x500;
        result = 0;
        if ((_DWORD)v33 == 95 || v34)
          return result;
LABEL_58:
        if ((unint64_t)a2 >= a1[5])
          return 0;
        v38 = (char)*a2;
        goto LABEL_65;
      case 0x12uLL:
        v35 = (unsigned __int8 *)a1[5];
        if (a2 == v35 && (a1[1] & 2) == 0)
          goto LABEL_63;
        if (a2 >= v35)
          return 0;
        v36 = *a2;
        if ((_DWORD)v36 == 10)
        {
          if ((*(_BYTE *)(v15 + 40) & 8) != 0)
            goto LABEL_63;
LABEL_54:
          v37 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v36 + 60) & 0x500;
          goto LABEL_61;
        }
        if ((v36 & 0x80) == 0)
          goto LABEL_54;
        v37 = __maskrune(*a2, 0x500uLL);
LABEL_61:
        result = 0;
        if ((_DWORD)v36 == 95 || v37)
          return result;
LABEL_63:
        if ((unint64_t)a2 <= a1[4])
          return 0;
        v38 = (char)*(a2 - 1);
LABEL_65:
        v39 = v38;
        v40 = v38 < 0
            ? __maskrune(v38, 0x500uLL)
            : *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v38 + 60) & 0x500;
        if (v39 != 95 && !v40)
          return 0;
LABEL_70:
        ++v14;
        goto LABEL_71;
      default:
        v12 = v14 + 1;
        v18 = ((unint64_t)(v17 & 0xF8000000) - 939524096) >> 27;
        if (v18 == 4)
        {
          result = sub_1C5E77808(a1, a2, a3, v14 + 1, a5, a6, a7);
          if (result)
            return result;
          v14 = (v17 & 0x7FFFFFF) + v12;
LABEL_71:
          if (v14 >= a5)
            goto LABEL_78;
          continue;
        }
        result = 0;
        switch(v18)
        {
          case 0uLL:
            v20 = v17 & 0x7FFFFFF;
            v21 = a1[2];
            v22 = *(_QWORD *)(v21 + 16 * v20 + 8);
            if (v22 == -1)
              return 0;
            v23 = *(_QWORD *)(v21 + 16 * v20);
            v24 = v22 - v23;
            if (v22 == v23)
            {
              if ((int)a7 > 100)
                return 0;
              a7 = (a7 + 1);
            }
            if (a2 > &a3[-v24] || memcmp(a2, (const void *)(a1[3] + v23), v24))
              return 0;
            do
              v25 = *(_QWORD *)(v16 + 8 * v14++);
            while (v25 != (v20 | 0x40000000));
            a2 += v24;
            goto LABEL_71;
          case 2uLL:
            ++a6;
            *(_QWORD *)(a1[7] + 8 * a6) = a2;
            goto LABEL_77;
          case 3uLL:
            v41 = a1[7];
            if (a2 != *(unsigned __int8 **)(v41 + 8 * a6))
            {
              *(_QWORD *)(v41 + 8 * a6) = a2;
              result = sub_1C5E77808(a1, a2, a3, v12 - (v17 & 0x7FFFFFF), a5, a6, a7);
              if (result)
                return result;
            }
            --a6;
LABEL_77:
            if (v12 >= a5)
              goto LABEL_78;
            goto LABEL_3;
          case 6uLL:
            v42 = 16 * (v17 & 0x7FFFFFF);
            v43 = a1[2];
            v44 = *(_QWORD *)(v43 + v42);
            *(_QWORD *)(v43 + v42) = &a2[-a1[3]];
            result = sub_1C5E77808(a1, a2, a3, v12, a5, a6, a7);
            if (!result)
              *(_QWORD *)(a1[2] + v42) = v44;
            return result;
          case 7uLL:
            v45 = v17 & 0x7FFFFFF;
            v46 = a1[2] + 16 * v45;
            v47 = *(_QWORD *)(v46 + 8);
            *(_QWORD *)(v46 + 8) = &a2[-a1[3]];
            result = sub_1C5E77808(a1, a2, a3, v12, a5, a6, a7);
            if (!result)
              *(_QWORD *)(a1[2] + 16 * v45 + 8) = v47;
            return result;
          case 8uLL:
            v48 = v14 + (v17 & 0x7FFFFFF) - 1;
            result = sub_1C5E77808(a1, a2, a3, v14 + 1, v48, a6, a7);
            if (result)
              return result;
            break;
          default:
            return result;
        }
        while (1)
        {
          v49 = *(_QWORD *)(*a1 + 8);
          if ((*(_QWORD *)(v49 + 8 * v48) & 0xF8000000) == 0x90000000)
            break;
          v50 = v48 + 2;
          v51 = *(_QWORD *)(v49 + 8 * (v48 + 1)) & 0x7FFFFFFLL;
          v52 = v51 + v48 + 1;
          v53 = v51 + v48;
          if ((*(_QWORD *)(v49 + 8 * v52) & 0xF8000000) == 0x88000000)
            v48 = v53;
          else
            v48 = v52;
          result = sub_1C5E77808(a1, a2, a3, v50, v48, a6, a7);
          if (result)
            return result;
        }
        return 0;
    }
  }
}

uint64_t sub_1C5E77D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  char v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  if (a2 != a3)
  {
    v7 = a2;
    do
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(_QWORD *)(v8 + 8 * v7);
      switch(((unint64_t)(v9 & 0xF8000000) - 0x8000000) >> 27)
      {
        case 1uLL:
          if (a5 == (char)v9)
            goto LABEL_32;
          break;
        case 2uLL:
          if ((a5 & 0xFFFFFFFD) == 0x81)
            goto LABEL_32;
          break;
        case 3uLL:
          if ((a5 & 0xFFFFFFFE) == 0x82)
            goto LABEL_32;
          break;
        case 4uLL:
          if (a5 <= 127)
            goto LABEL_32;
          break;
        case 5uLL:
          if (a5 <= 127)
          {
            v13 = *(_QWORD *)(a1 + 24) + 32 * (v9 & 0x7FFFFFF);
            if ((*(_BYTE *)(v13 + 8) & *(_BYTE *)(*(_QWORD *)v13 + a5)) != 0)
              goto LABEL_32;
          }
          break;
        case 6uLL:
        case 7uLL:
        case 8uLL:
        case 0xBuLL:
        case 0xCuLL:
        case 0xDuLL:
        case 0x11uLL:
          *(_BYTE *)(a6 + a2 + 1) |= *(_BYTE *)(a6 + a2);
          break;
        case 9uLL:
          v14 = *(_BYTE *)(a6 + a2);
          *(_BYTE *)(a6 + a2 + 1) |= v14;
          v15 = v9 & 0x7FFFFFF;
          v16 = *(unsigned __int8 *)(a6 + a2 - v15);
          v17 = v16 | v14;
          *(_BYTE *)(a6 + a2 - v15) = v17;
          if (v16)
            v18 = 1;
          else
            v18 = v17 == 0;
          if (!v18)
          {
            v7 += ~v15;
            a2 = v7;
          }
          break;
        case 0xAuLL:
        case 0xEuLL:
          v10 = *(_BYTE *)(a6 + a2);
          *(_BYTE *)(a6 + a2 + 1) |= v10;
          v11 = (v9 & 0x7FFFFFF) + a2;
          v12 = *(_BYTE *)(a6 + v11) | v10;
          goto LABEL_7;
        case 0xFuLL:
          if (*(_BYTE *)(a6 + a2))
          {
            v19 = *(_QWORD *)(v8 + 8 * v7 + 8);
            if ((v19 & 0xF8000000) == 0x90000000)
            {
              v20 = 1;
            }
            else
            {
              v20 = 1;
              do
              {
                v20 += v19 & 0x7FFFFFF;
                v19 = *(_QWORD *)(v8 + 8 * (v20 + v7));
              }
              while ((v19 & 0xF8000000) != 0x90000000);
            }
            *(_BYTE *)(a6 + v20 + a2) |= *(_BYTE *)(a6 + a2);
          }
          break;
        case 0x10uLL:
          v21 = *(_BYTE *)(a6 + a2);
          *(_BYTE *)(a6 + a2 + 1) |= v21;
          v22 = v9 & 0x7FFFFFF;
          if ((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v22 + v7)) & 0xF8000000) != 0x90000000)
          {
            v11 = v22 + a2;
            v12 = *(_BYTE *)(a6 + v11) | v21;
LABEL_7:
            *(_BYTE *)(a6 + v11) = v12;
          }
          break;
        case 0x12uLL:
          if (a5 != 133)
            break;
          goto LABEL_32;
        case 0x13uLL:
          if (a5 == 134)
LABEL_32:
            *(_BYTE *)(a2 + a6 + 1) |= *(_BYTE *)(a4 + a2);
          break;
        default:
          break;
      }
      ++v7;
      ++a2;
    }
    while (v7 != a3);
  }
  return a6;
}

void llvm::sys::MemoryFence(llvm::sys *this)
{
  __dmb(0xBu);
}

uint64_t llvm::sys::CompareAndSwap(llvm::sys *this, volatile unsigned int *a2, int a3)
{
  uint64_t result;

  while (1)
  {
    result = __ldaxr((unsigned int *)this);
    if ((_DWORD)result != a3)
      break;
    if (!__stlxr(a2, (unsigned int *)this))
      return result;
  }
  __clrex();
  return result;
}

uint64_t llvm::SearchForAddressOfSpecialSymbol(llvm *this, const char *a2)
{
  return 0;
}

void llvm::sys::DynamicLibrary::AddSymbol(unsigned __int8 *a1, size_t a2, uint64_t a3)
{
  unint64_t v6;
  llvm::StringMapImpl *v8;
  unsigned int v9;
  int v10;
  size_t v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  std::recursive_mutex *v24;
  _QWORD *v25;
  size_t *v26;
  char *v27;
  _QWORD **i;
  _QWORD *v30;
  std::recursive_mutex *v31;
  uint64_t v32;

  if (!atomic_load(qword_1EF8F7358))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7358, (void *(*)(void))sub_1C6246890, (void (*)(void *))sub_1C62468D0);
  v6 = qword_1EF8F7358[0];
  std::recursive_mutex::lock((std::recursive_mutex *)qword_1EF8F7358[0]);
  if (!atomic_load((unint64_t *)&qword_1EF8F5828))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EF8F5828, (void *(*)(void))sub_1C5E78820, (void (*)(void *))sub_1C5E78854);
  v8 = (llvm::StringMapImpl *)qword_1EF8F5828;
  v9 = *(_DWORD *)(qword_1EF8F5828 + 8);
  if (!v9)
  {
    *(_DWORD *)(qword_1EF8F5828 + 12) = 0;
    *((_DWORD *)v8 + 4) = 0;
    v30 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v30)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v30[16] = 2;
    *(_QWORD *)v8 = v30;
    v9 = 16;
    *((_DWORD *)v8 + 2) = 16;
  }
  v31 = (std::recursive_mutex *)v6;
  v32 = a3;
  v10 = 0;
  if (a2)
  {
    v11 = a2;
    v12 = a1;
    do
    {
      v13 = *v12++;
      v10 = 33 * v10 + v13;
      --v11;
    }
    while (v11);
  }
  v14 = *(_QWORD *)v8;
  v15 = v9 - 1;
  v16 = *(_QWORD *)v8 + 8 * v9 + 8;
  v17 = -1;
  v18 = 1;
  v19 = v10;
  while (1)
  {
    v20 = v19 & v15;
    v21 = *(_QWORD **)(v14 + 8 * v20);
    if (!v21)
      break;
    if (v21 == (_QWORD *)-8)
    {
      if (v17 == -1)
        v17 = v19 & v15;
    }
    else if (*(_DWORD *)(v16 + 4 * v20) == v10
           && a2 == *v21
           && (!a2 || !memcmp(a1, (char *)v21 + *((unsigned int *)v8 + 5), a2)))
    {
      goto LABEL_24;
    }
    v19 = v18 + v20;
    ++v18;
  }
  v22 = v17;
  if (v17 == -1)
  {
    v22 = v20;
    v20 = v20;
  }
  else
  {
    v20 = v17;
  }
  *(_DWORD *)(v16 + 4 * v22) = v10;
  v21 = *(_QWORD **)(v14 + 8 * v20);
LABEL_24:
  if (v21 == (_QWORD *)-8)
  {
    --*((_DWORD *)v8 + 4);
    v24 = v31;
    v23 = v32;
  }
  else
  {
    v24 = v31;
    v23 = v32;
    if (v21)
      goto LABEL_37;
  }
  v25 = operator new(a2 + 17, (std::align_val_t)8uLL);
  v26 = v25;
  v27 = (char *)(v25 + 2);
  if (a2)
    memcpy(v25 + 2, a1, a2);
  v27[a2] = 0;
  *v26 = a2;
  v26[1] = 0;
  *(_QWORD *)(v14 + 8 * v20) = v26;
  ++*((_DWORD *)v8 + 3);
  for (i = (_QWORD **)(*(_QWORD *)v8 + 8 * llvm::StringMapImpl::RehashTable(v8, v20)); ; ++i)
  {
    v21 = *i;
    if (*i && v21 + 1 != 0)
      break;
  }
LABEL_37:
  v21[1] = v23;
  std::recursive_mutex::unlock(v24);
}

uint64_t sub_1C5E7823C(uint64_t a1, void *__handle, char a3, int a4)
{
  void **v6;
  void **v7;
  void **v8;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void *v19;

  if ((a3 & 1) != 0)
  {
    v19 = *(void **)(a1 + 24);
    if (v19)
    {
      if (a4)
      {
        dlclose(v19);
        v19 = *(void **)(a1 + 24);
      }
      if (v19 == __handle)
        return 0;
    }
    *(_QWORD *)(a1 + 24) = __handle;
  }
  else
  {
    v6 = *(void ***)a1;
    v7 = *(void ***)(a1 + 8);
    v8 = *(void ***)a1;
    if (*(void ***)a1 != v7)
    {
      v8 = *(void ***)a1;
      while (*v8 != __handle)
      {
        if (++v8 == v7)
        {
          v8 = *(void ***)(a1 + 8);
          break;
        }
      }
    }
    if (v8 != v7)
    {
      if (a4)
        dlclose(__handle);
      return 0;
    }
    v10 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v7 >= v10)
    {
      v12 = v7 - v6;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61)
        abort();
      v14 = v10 - (_QWORD)v6;
      if (v14 >> 2 > v13)
        v13 = v14 >> 2;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        if (v15 >> 61)
          sub_1C4764EE4();
        v16 = (char *)operator new(8 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = &v16[8 * v12];
      *(_QWORD *)v17 = __handle;
      v11 = v17 + 8;
      if (v6 != v7)
      {
        do
        {
          v18 = (uint64_t)*--v7;
          *((_QWORD *)v17 - 1) = v18;
          v17 -= 8;
        }
        while (v7 != v6);
        v6 = *(void ***)a1;
      }
      *(_QWORD *)a1 = v17;
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = &v16[8 * v15];
      if (v6)
        operator delete(v6);
    }
    else
    {
      *v7 = __handle;
      v11 = v7 + 1;
    }
    *(_QWORD *)(a1 + 8) = v11;
  }
  return 1;
}

void *llvm::sys::DynamicLibrary::addPermanentLibrary(void *a1, uint64_t a2)
{
  std::recursive_mutex *v5;

  if (!atomic_load(qword_1EF8F7358))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7358, (void *(*)(void))sub_1C6246890, (void (*)(void *))sub_1C62468D0);
  v5 = (std::recursive_mutex *)qword_1EF8F7358[0];
  std::recursive_mutex::lock((std::recursive_mutex *)qword_1EF8F7358[0]);
  if (!atomic_load(qword_1EF8F7370))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7370, (void *(*)(void))sub_1C639E2E0, (void (*)(void *))sub_1C639E310);
  if ((sub_1C5E7823C(qword_1EF8F7370[0], a1, 0, 0) & 1) == 0)
    MEMORY[0x1CAA32ABC](a2, "Library already loaded");
  std::recursive_mutex::unlock(v5);
  return a1;
}

void *llvm::sys::DynamicLibrary::SearchForAddressOfSymbol(llvm::sys::DynamicLibrary *this, const char *a2)
{
  std::recursive_mutex *v4;
  _QWORD **v7;
  uint64_t v8;
  size_t v9;
  unsigned int v10;
  size_t v11;
  uint64_t v12;
  int v13;
  char v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void *v25;
  unint64_t v28;
  char v29;
  void *v30;
  uint64_t v32;
  unsigned int v33;
  std::recursive_mutex *v34;

  if (!atomic_load(qword_1EF8F7358))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7358, (void *(*)(void))sub_1C6246890, (void (*)(void *))sub_1C62468D0);
  v4 = (std::recursive_mutex *)qword_1EF8F7358[0];
  std::recursive_mutex::lock((std::recursive_mutex *)qword_1EF8F7358[0]);
  if (!atomic_load((unint64_t *)&qword_1EF8F5828))
    goto LABEL_29;
  if (!atomic_load((unint64_t *)&qword_1EF8F5828))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EF8F5828, (void *(*)(void))sub_1C5E78820, (void (*)(void *))sub_1C5E78854);
  v7 = (_QWORD **)&unk_1EF8F5000;
  v8 = qword_1EF8F5828;
  v34 = v4;
  if (!this)
  {
    v13 = 0;
    v10 = *(_DWORD *)(qword_1EF8F5828 + 8);
    if (v10)
    {
      v11 = 0;
LABEL_14:
      v14 = 1;
      goto LABEL_15;
    }
    v33 = 0;
LABEL_24:
    v16 = *(_QWORD *)v8;
    v22 = v33;
    goto LABEL_25;
  }
  v9 = strlen((const char *)this);
  v10 = *(_DWORD *)(qword_1EF8F5828 + 8);
  if (!v10)
  {
    v33 = 0;
    goto LABEL_24;
  }
  v11 = v9;
  if (!v9)
  {
    v13 = 0;
    goto LABEL_14;
  }
  v12 = 0;
  v13 = 0;
  do
    v13 = 33 * v13 + *((unsigned __int8 *)this + v12++);
  while (v9 != v12);
  v14 = 0;
LABEL_15:
  v15 = v10 - 1;
  v16 = *(_QWORD *)qword_1EF8F5828;
  v32 = v10;
  v33 = v10;
  v17 = *(_QWORD *)qword_1EF8F5828 + 8 * v10 + 8;
  v18 = 1;
  v19 = v13;
  while (1)
  {
    v20 = v19 & v15;
    v21 = *(_QWORD **)(v16 + 8 * v20);
    if (v21 != (_QWORD *)-8)
    {
      if (!v21)
      {
        v4 = v34;
        v7 = (_QWORD **)&unk_1EF8F5000;
        goto LABEL_24;
      }
      if (*(_DWORD *)(v17 + 4 * v20) == v13
        && v11 == *v21
        && ((v14 & 1) != 0 || !memcmp(this, (char *)v21 + *(unsigned int *)(v8 + 20), v11)))
      {
        break;
      }
    }
    v19 = v18 + v20;
    ++v18;
  }
  v22 = (int)v20;
  if ((_DWORD)v20 == -1)
    v22 = v32;
  v4 = v34;
  v7 = (_QWORD **)&unk_1EF8F5000;
LABEL_25:
  v23 = v16 + 8 * v22;
  if (!atomic_load((unint64_t *)&qword_1EF8F5828))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EF8F5828, (void *(*)(void))sub_1C5E78820, (void (*)(void *))sub_1C5E78854);
  if (v23 == *v7[261] + 8 * *((unsigned int *)v7[261] + 2))
  {
LABEL_29:
    if (atomic_load(qword_1EF8F7370))
    {
      if (!atomic_load(qword_1EF8F7370))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7370, (void *(*)(void))sub_1C639E2E0, (void (*)(void *))sub_1C639E310);
      v28 = qword_1EF8F7370[0];
      v29 = llvm::sys::DynamicLibrary::SearchOrder;
      if ((llvm::sys::DynamicLibrary::SearchOrder & 1) == 0)
      {
        v30 = *(void **)(qword_1EF8F7370[0] + 24);
        if (v30)
          goto LABEL_34;
      }
      v25 = sub_1C5E787B0((void ***)qword_1EF8F7370[0], (char *)this, llvm::sys::DynamicLibrary::SearchOrder);
      if (v25)
        goto LABEL_40;
      v30 = *(void **)(v28 + 24);
      if (v30)
      {
LABEL_34:
        v25 = dlsym(v30, (const char *)this);
        if (v25)
          goto LABEL_40;
        if ((v29 & 2) != 0)
        {
          v25 = sub_1C5E787B0((void ***)v28, (char *)this, v29);
          goto LABEL_40;
        }
      }
    }
    v25 = 0;
    goto LABEL_40;
  }
  v25 = *(void **)(*(_QWORD *)v23 + 8);
LABEL_40:
  std::recursive_mutex::unlock(v4);
  return v25;
}

BOOL LLVMLoadLibraryPermanently(const char *a1)
{
  return llvm::sys::DynamicLibrary::getPermanentLibrary(a1, 0) == &llvm::sys::DynamicLibrary::Invalid;
}

void LLVMAddSymbol(char *__s, uint64_t a2)
{
  size_t v4;

  if (__s)
    v4 = strlen(__s);
  else
    v4 = 0;
  llvm::sys::DynamicLibrary::AddSymbol((unsigned __int8 *)__s, v4, a2);
}

void *sub_1C5E787B0(void ***a1, char *__symbol, char a3)
{
  void **i;
  void **v5;
  void *v6;
  void *result;
  void **v8;
  void **v9;

  if ((a3 & 4) != 0)
  {
    v8 = *a1;
    v9 = a1[1];
    while (v8 != v9)
    {
      result = dlsym(*v8, __symbol);
      if (result)
        return result;
      ++v8;
    }
  }
  else
  {
    v5 = *a1;
    for (i = a1[1]; i != v5; --i)
    {
      v6 = *(i - 1);
      result = dlsym(v6, __symbol);
      if (result)
        return result;
    }
  }
  return 0;
}

_QWORD *sub_1C5E78820()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = 0;
  result[1] = 0;
  result[2] = 0x1000000000;
  return result;
}

uint64_t sub_1C5E78854(uint64_t result)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v1 = (void **)result;
    if (*(_DWORD *)(result + 12))
    {
      v2 = *(unsigned int *)(result + 8);
      if ((_DWORD)v2)
      {
        v3 = 0;
        v4 = 8 * v2;
        do
        {
          v5 = *(_QWORD *)((char *)*v1 + v3);
          if (v5 != -8 && v5 != 0)
            MEMORY[0x1CAA32FB4]();
          v3 += 8;
        }
        while (v4 != v3);
      }
    }
    free(*v1);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

uint64_t llvm::sys::StrError@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  char __strerrbuf[2000];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  result = *__error();
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if ((_DWORD)result)
  {
    __strerrbuf[0] = 0;
    strerror_r(result, __strerrbuf, 0x7CFuLL);
    return MEMORY[0x1CAA32ABC](a1, __strerrbuf);
  }
  return result;
}

uint64_t llvm::sys::StrError@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  char __strerrbuf[2000];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if ((_DWORD)this)
  {
    __strerrbuf[0] = 0;
    strerror_r(this, __strerrbuf, 0x7CFuLL);
    return MEMORY[0x1CAA32ABC](a2, __strerrbuf);
  }
  return this;
}

void llvm::sys::getDefaultTargetTriple(uint64_t a1@<X8>)
{
  std::string __p;

  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  sub_1C5E78A0C(&__p, a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1C5E78A0C(std::string *__s@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::string *v5;
  uint64_t size;
  char *v7;
  std::string *v8;
  char *v9;
  utsname *p_p;
  std::string::size_type v12;
  void *v13;
  std::string *v14;
  char *v15;
  std::string *v16;
  char *v17;
  utsname *v19;
  std::string::size_type v20;
  int v21;
  std::string *v22;
  uint64_t v23;
  std::string v24;
  void *v25[2];
  uint64_t v26;
  __int16 v27;
  int v28;
  utsname __p;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = HIBYTE(__s->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
  {
    v5 = (std::string *)__s->__r_.__value_.__r.__words[0];
    size = __s->__r_.__value_.__l.__size_;
  }
  else
  {
    v5 = __s;
    size = HIBYTE(__s->__r_.__value_.__r.__words[2]);
  }
  if (size >= 7)
  {
    v7 = (char *)v5 + size;
    v8 = v5;
    do
    {
      v9 = (char *)memchr(v8, 45, size - 6);
      if (!v9)
        break;
      if (*(_DWORD *)v9 == 1918985261 && *(_DWORD *)(v9 + 3) == 1852405618)
      {
        if (v9 == v7 || v9 - (char *)v5 == -1)
          break;
        std::string::resize(__s, v9 - (char *)v5 + 7, 0);
        sub_1C5E7A844(&__p);
        if (__p.sysname[23] >= 0)
          p_p = &__p;
        else
          p_p = *(utsname **)__p.sysname;
        if (__p.sysname[23] >= 0)
          v12 = __p.sysname[23] & 0x7F;
        else
          v12 = *(_QWORD *)&__p.sysname[8];
        std::string::append(__s, p_p->sysname, v12);
        if (__p.sysname[23] < 0)
        {
          v13 = *(void **)__p.sysname;
          goto LABEL_52;
        }
        goto LABEL_53;
      }
      v8 = (std::string *)(v9 + 1);
      size = v7 - (char *)v8;
    }
    while (v7 - (char *)v8 >= 7);
  }
  if ((v4 & 0x80) != 0)
  {
    v14 = (std::string *)__s->__r_.__value_.__r.__words[0];
    v4 = __s->__r_.__value_.__l.__size_;
  }
  else
  {
    v14 = __s;
  }
  if (v4 >= 6)
  {
    v15 = (char *)v14 + v4;
    v16 = v14;
    do
    {
      v17 = (char *)memchr(v16, 45, v4 - 5);
      if (!v17)
        break;
      if (*(_DWORD *)v17 == 1667329325 && *((_WORD *)v17 + 2) == 29551)
      {
        if (v17 != v15 && v17 - (char *)v14 != -1)
        {
          std::string::resize(__s, v17 - (char *)v14, 0);
          std::string::append(__s, "-darwin");
          sub_1C5E7A844(&__p);
          v19 = __p.sysname[23] >= 0 ? &__p : *(utsname **)__p.sysname;
          v20 = __p.sysname[23] >= 0 ? __p.sysname[23] & 0x7F : *(_QWORD *)&__p.sysname[8];
          std::string::append(__s, v19->sysname, v20);
          if (__p.sysname[23] < 0)
            operator delete(*(void **)__p.sysname);
        }
        break;
      }
      v16 = (std::string *)(v17 + 1);
      v4 = v15 - (char *)v16;
    }
    while (v15 - (char *)v16 >= 6);
  }
  v25[0] = "x86_64-apple-darwin10.0";
  v27 = 259;
  llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)v25);
  v21 = *(_DWORD *)&__p.sysname[36];
  if (__p.sysname[23] < 0)
    operator delete(*(void **)__p.sysname);
  if (v21 != 21)
    goto LABEL_53;
  *(_WORD *)&__p.sysname[32] = 260;
  *(_QWORD *)__p.sysname = __s;
  llvm::Triple::Triple((uint64_t)v25, (llvm::Twine *)&__p);
  if (v28 != 21 || llvm::Triple::getOSVersion((llvm::Triple *)v25) || uname(&__p) == -1)
  {
    if (SHIBYTE(v26) < 0)
    {
      v13 = v25[0];
LABEL_52:
      operator delete(v13);
    }
LABEL_53:
    *(_OWORD *)a2 = *(_OWORD *)&__s->__r_.__value_.__l.__data_;
    *(_QWORD *)(a2 + 16) = *((_QWORD *)&__s->__r_.__value_.__l + 2);
    __s->__r_.__value_.__l.__size_ = 0;
    __s->__r_.__value_.__r.__words[2] = 0;
    __s->__r_.__value_.__r.__words[0] = 0;
    return;
  }
  *((_BYTE *)&v24.__r_.__value_.__s + 23) = 3;
  LOWORD(v24.__r_.__value_.__l.__data_) = *(_WORD *)"aix";
  *(_WORD *)&v24.__r_.__value_.__s.__data_[2] = aAix[2];
  std::string::append(&v24, __p.version);
  std::string::push_back(&v24, 46);
  std::string::append(&v24, __p.release);
  std::string::append(&v24, ".0.0");
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &v24;
  else
    v22 = (std::string *)v24.__r_.__value_.__r.__words[0];
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = *((_BYTE *)&v24.__r_.__value_.__s + 23) & 0x7F;
  else
    v23 = v24.__r_.__value_.__l.__size_;
  llvm::Triple::setOSName((llvm::Triple *)v25, (uint64_t)v22, v23);
  if (SHIBYTE(v26) < 0)
  {
    sub_1C47EBC30((_BYTE *)a2, v25[0], (unint64_t)v25[1]);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)v25;
    *(_QWORD *)(a2 + 16) = v26;
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26) < 0)
    operator delete(v25[0]);
}

const char *llvm::sys::detail::getHostCPUNameForPowerPC(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  const char *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v12;
  char *i;
  char v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  int v20;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unint64_t v33;
  int v34;
  int v35;
  unint64_t v36;
  int v37;

  if (a2 < 1)
    return "generic";
  v2 = (unint64_t)&a1[a2];
  v3 = &a1[a2];
  v4 = "generic";
  while (1)
  {
    v5 = *a1 == 10 ? a1 + 1 : a1;
    if ((unint64_t)v5 < v2)
      break;
    v6 = v5;
LABEL_19:
    if ((unint64_t)v6 < v2)
    {
      v9 = v3 - v6;
      while (*v6 != 10)
      {
        ++v6;
        if (!--v9)
        {
          v6 = v3;
          break;
        }
      }
    }
    a1 = v6;
    if ((unint64_t)v6 >= v2)
      return v4;
  }
  v6 = v5;
  if (*v5 != 99)
    goto LABEL_19;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >= v2)
    goto LABEL_19;
  if (*v6 != 112)
    goto LABEL_19;
  v6 = v5 + 2;
  if ((unint64_t)(v5 + 2) >= v2)
    goto LABEL_19;
  if (*v6 != 117)
    goto LABEL_19;
  v6 = v5 + 3;
  if ((unint64_t)(v5 + 3) >= v2)
    goto LABEL_19;
  v7 = (uint64_t)&a1[(*a1 == 10) + 4];
  while (1)
  {
    v8 = *v6;
    if (v8 != 9 && v8 != 32)
      break;
    ++v6;
    ++v7;
    if ((unint64_t)v6 >= v2)
    {
LABEL_17:
      v6 = v3;
      goto LABEL_19;
    }
  }
  if (v8 != 58)
    goto LABEL_19;
  if ((unint64_t)++v6 >= v2)
    goto LABEL_19;
  while (1)
  {
    v10 = *v6;
    if (v10 != 9 && v10 != 32)
      break;
    ++v6;
    ++v7;
    if ((unint64_t)v6 >= v2)
      goto LABEL_17;
  }
  v12 = v6;
  if ((unint64_t)v6 < v2)
  {
    for (i = (char *)(v6 + 1); ; ++i)
    {
      if (v10 <= 0x2Cu && ((1 << v10) & 0x100100000600) != 0)
      {
        v12 = (unsigned __int8 *)(i - 1);
        goto LABEL_41;
      }
      if ((unint64_t)i >= v2)
        break;
      v14 = *i;
      LOBYTE(v10) = v14;
    }
    v12 = v3;
  }
LABEL_41:
  v4 = "generic";
  switch((unint64_t)&v12[-v7])
  {
    case 2uLL:
      if (*(_WORD *)v6 == 13383)
      {
        v4 = "g4";
      }
      else
      {
        if (*(_WORD *)v6 == 13639)
          goto LABEL_107;
        if (bswap32(*(unsigned __int16 *)v6) >> 16 == 16690)
          v4 = "a2";
      }
      break;
    case 3uLL:
      v15 = bswap32(*(unsigned __int16 *)v6) >> 16;
      if (v15 == 13872)
      {
        v16 = v6[2] - 52;
      }
      else if (v15 >> 4 < 0x363)
      {
        v16 = -1;
      }
      else
      {
        v16 = 1;
      }
      if (!v16)
        v4 = "604";
      break;
    case 4uLL:
      if (*(_DWORD *)v6 == 1697919030)
      {
        v4 = "604e";
      }
      else if (*(_DWORD *)v6 == 808465463 || *(_DWORD *)v6 == 808530999 || *(_DWORD *)v6 == 926168119)
      {
        v4 = "7400";
      }
      else
      {
        v17 = bswap32(*(_DWORD *)v6);
        v18 = v17 >= 0x37343535;
        v19 = v17 > 0x37343535;
        v20 = !v18;
        if (v19 == v20)
          v4 = "7450";
      }
      break;
    case 6uLL:
      if (*(_DWORD *)v6 == 1163349840 && *((_WORD *)v6 + 2) == 13394)
        goto LABEL_92;
      if (*(_DWORD *)v6 == 1163349840 && *((_WORD *)v6 + 2) == 13650)
      {
LABEL_107:
        v4 = "g5";
      }
      else if (*(_DWORD *)v6 == 1163349840 && *((_WORD *)v6 + 2) == 13906)
      {
        v4 = "pwr6";
      }
      else if (*(_DWORD *)v6 == 1163349840 && *((_WORD *)v6 + 2) == 14162)
      {
        v4 = "pwr7";
      }
      else
      {
        if (*(_DWORD *)v6 == 1163349840 && *((_WORD *)v6 + 2) == 14418)
          goto LABEL_105;
        v26 = 1347376965;
        v27 = bswap32(*(_DWORD *)v6);
        if (v27 == 1347376965 && (v27 = bswap32(*((unsigned __int16 *)v6 + 2)) >> 16, v26 = 21049, v27 == 21049))
        {
          v28 = 0;
        }
        else if (v27 < v26)
        {
          v28 = -1;
        }
        else
        {
          v28 = 1;
        }
        if (!v28)
          v4 = "pwr9";
      }
      break;
    case 7uLL:
      if (*(_DWORD *)v6 == 1163349840 && *(_DWORD *)(v6 + 3) == 1161318981)
        goto LABEL_105;
      v30 = 1347376965;
      v31 = bswap32(*(_DWORD *)v6);
      if (v31 == 1347376965 && (v30 = 1163014448, v31 = bswap32(*(_DWORD *)(v6 + 3)), v31 == 1163014448))
      {
        v32 = 0;
      }
      else if (v31 < v30)
      {
        v32 = -1;
      }
      else
      {
        v32 = 1;
      }
      if (!v32)
        v4 = "pwr10";
      break;
    case 8uLL:
      if (*(_QWORD *)v6 == 0x5846303739435050
        || ((v33 = bswap64(*(_QWORD *)v6), v18 = v33 >= 0x5050433937304D50, v34 = v33 > 0x5050433937304D50, v18)
          ? (v35 = 0)
          : (v35 = 1),
            v34 == v35))
      {
LABEL_92:
        v4 = "970";
      }
      break;
    case 9uLL:
      v36 = bswap64(*(_QWORD *)v6);
      if (v36 == 0x504F574552384E56)
      {
        v37 = v6[8] - 76;
      }
      else if (v36 < 0x504F574552384E56)
      {
        v37 = -1;
      }
      else
      {
        v37 = 1;
      }
      if (!v37)
LABEL_105:
        v4 = "pwr8";
      break;
    default:
      break;
  }
  strlen(v4);
  return v4;
}

const char *llvm::sys::detail::getHostCPUNameForARM(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t first_not_of;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  unsigned int v21;
  int v22;
  char *v23;
  BOOL v24;
  int v25;
  int v26;
  BOOL v27;
  unsigned int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  BOOL v59;
  int v60;
  int v61;
  int v62;
  const char *v63;
  BOOL v65;
  BOOL v66;
  BOOL v67;
  BOOL v68;
  BOOL v69;
  unsigned int v74;
  int v75;
  int v77;
  char *v78;
  __int128 *v79;
  unint64_t v80;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unsigned int v85;
  unint64_t v86;
  unint64_t v87;
  unsigned __int8 *v88;
  int v89;
  int v90;
  unsigned int v91;
  unint64_t v92;
  _BOOL4 v93;
  int v94;
  __int128 *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int v100;
  unint64_t v101;
  unint64_t v102;
  unsigned __int8 *v103;
  int v104;
  int v105;
  unsigned int v106;
  unint64_t v107;
  _BOOL4 v108;
  int v109;
  const char *v110;
  uint64_t v111;
  char *v112;
  _DWORD *v113;
  unint64_t v114;
  char *v115;
  unint64_t v116;
  __int128 v117;
  __int128 v118;
  unsigned __int8 *v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  _QWORD v123[66];

  v123[64] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v118 = a1;
  *((_QWORD *)&v118 + 1) = a2;
  v121 = v123;
  v122 = 0x2000000000;
  llvm::StringRef::split(&v118, (uint64_t)&v121, "\n", 1uLL, -1, 1);
  v2 = v122;
  v3 = v121;
  if (!(_DWORD)v122)
    goto LABEL_35;
  v111 = v122;
  v113 = 0;
  v114 = 0;
  v4 = 0;
  v5 = 0;
  v115 = 0;
  v116 = 0;
  v112 = (char *)v121;
  v6 = v121;
  do
  {
    v7 = v6[1];
    v8 = v7 - 15;
    if (v7 >= 0xF)
    {
      v9 = (_QWORD *)*v6;
      if (*(_QWORD *)*v6 == 0x6C706D6920555043 && *(_QWORD *)(*v6 + 7) == 0x7265746E656D656CLL)
      {
        v119 = (unsigned __int8 *)v9 + 15;
        v120 = v7 - 15;
        first_not_of = llvm::StringRef::find_first_not_of(&v119, "\t :", 3, 0);
        if (first_not_of >= v8)
          v12 = v7 - 15;
        else
          v12 = first_not_of;
        v113 = (_DWORD *)((char *)v9 + v12 + 15);
        v114 = v8 - v12;
      }
    }
    else
    {
      if (v7 < 8)
        goto LABEL_25;
      v9 = (_QWORD *)*v6;
    }
    if (*v9 == 0x6572617764726148)
    {
      v119 = (unsigned __int8 *)(v9 + 1);
      v120 = v7 - 8;
      v13 = llvm::StringRef::find_first_not_of(&v119, "\t :", 3, 0);
      if (v13 >= v7 - 8)
        v14 = v7 - 8;
      else
        v14 = v13;
      v5 = (char *)v9 + v14 + 8;
      v4 = v7 - 8 - v14;
    }
    if (*v9 == 0x7472617020555043)
    {
      v15 = v7 - 8;
      v119 = (unsigned __int8 *)(v9 + 1);
      v120 = v15;
      v16 = llvm::StringRef::find_first_not_of(&v119, "\t :", 3, 0);
      if (v16 >= v15)
        v17 = v15;
      else
        v17 = v16;
      v115 = (char *)v9 + v17 + 8;
      v116 = v15 - v17;
    }
LABEL_25:
    v6 += 2;
    --v2;
  }
  while (v2);
  if (v114 != 4)
  {
    v18 = "generic";
    goto LABEL_37;
  }
  v3 = v112;
  switch(*v113)
  {
    case 0x31347830:
      if (v4 >= 7)
      {
        v23 = &v5[v4];
        v24 = *(_DWORD *)&v5[v4 - 7] == 944591693 && *(_DWORD *)&v5[v4 - 4] == 876165432;
        if (v24
          || ((v25 = *(_DWORD *)(v23 - 7), v26 = *((_DWORD *)v23 - 1), v25 == 944591693)
            ? (v27 = v26 == 909719864)
            : (v27 = 0),
              v27))
        {
          v18 = "cortex-a53";
          goto LABEL_239;
        }
      }
      v18 = "generic";
      if (v116 != 5)
        goto LABEL_238;
      if (*(_DWORD *)v115 == 842627120 && v115[4] == 54)
      {
        v18 = "arm926ej-s";
      }
      else if (*(_DWORD *)v115 == 811759664 && v115[4] == 50)
      {
        v18 = "mpcore";
      }
      else if (*(_DWORD *)v115 == 862091312 && v115[4] == 54)
      {
        v18 = "arm1136j-s";
      }
      else if (*(_DWORD *)v115 == 895645744 && v115[4] == 54)
      {
        v18 = "arm1156t2-s";
      }
      else if (*(_DWORD *)v115 == 929200176 && v115[4] == 54)
      {
        v18 = "arm1176jz-s";
      }
      else if (*(_DWORD *)v115 == 811825200 && v115[4] == 56)
      {
        v18 = "cortex-a8";
      }
      else if (*(_DWORD *)v115 == 811825200 && v115[4] == 57)
      {
        v18 = "cortex-a9";
      }
      else if (*(_DWORD *)v115 == 811825200 && v115[4] == 102)
      {
        v18 = "cortex-a15";
      }
      else if (*(_DWORD *)v115 == 845379632 && v115[4] == 48)
      {
        v18 = "cortex-m0";
      }
      else if (*(_DWORD *)v115 == 845379632 && v115[4] == 51)
      {
        v18 = "cortex-m3";
      }
      else if (*(_DWORD *)v115 == 845379632 && v115[4] == 52)
      {
        v18 = "cortex-m4";
      }
      else if (*(_DWORD *)v115 == 845445168 && v115[4] == 50)
      {
        v18 = "cortex-m55";
      }
      else if (*(_DWORD *)v115 == 811890736 && v115[4] == 50)
      {
        v18 = "cortex-a34";
      }
      else
      {
        if (*(_DWORD *)v115 != 811890736 || v115[4] != 52)
        {
          if (*(_DWORD *)v115 == 811890736 && v115[4] == 51)
          {
            v18 = "cortex-a53";
            goto LABEL_347;
          }
          if (*(_DWORD *)v115 == 811890736 && v115[4] == 55)
          {
            v18 = "cortex-a57";
            goto LABEL_347;
          }
          if (*(_DWORD *)v115 == 811890736 && v115[4] == 56)
          {
            v18 = "cortex-a72";
            goto LABEL_347;
          }
          if (*(_DWORD *)v115 == 811890736 && v115[4] == 57)
          {
            v18 = "cortex-a73";
            goto LABEL_347;
          }
          if (*(_DWORD *)v115 == 811890736 && v115[4] == 97)
          {
            v18 = "cortex-a75";
            goto LABEL_347;
          }
          if (*(_DWORD *)v115 != 811890736 || v115[4] != 98)
          {
            if (*(_DWORD *)v115 == 811890736 && v115[4] == 100)
            {
              v18 = "cortex-a77";
            }
            else if (*(_DWORD *)v115 == 878999600 && v115[4] == 49)
            {
              v18 = "cortex-a78";
            }
            else if (*(_DWORD *)v115 == 878999600 && v115[4] == 52)
            {
              v18 = "cortex-x1";
            }
            else if (*(_DWORD *)v115 == 878999600 && v115[4] == 99)
            {
              v18 = "cortex-x1c";
            }
            else if (*(_DWORD *)v115 == 811890736 && v115[4] == 99)
            {
              v18 = "neoverse-n1";
            }
            else
            {
              v53 = bswap32(*(_DWORD *)v115);
              if (v53 == 813196340)
              {
                v54 = v115[4] - 57;
              }
              else if (v53 < 0x30786434)
              {
                v54 = -1;
              }
              else
              {
                v54 = 1;
              }
              if (v54)
              {
                v109 = *(_DWORD *)v115 ^ 0x34647830 | v115[4] ^ 0x30;
                v110 = "neoverse-v1";
LABEL_328:
                if (!v109)
                  v18 = v110;
                goto LABEL_347;
              }
              v18 = "neoverse-n2";
            }
LABEL_347:
            v3 = v112;
            goto LABEL_238;
          }
LABEL_320:
          v18 = "cortex-a76";
          goto LABEL_347;
        }
        v18 = "cortex-a35";
      }
LABEL_238:
      strlen(v18);
      goto LABEL_239;
    case 0x32347830:
    case 0x33347830:
      switch(v116)
      {
        case 4uLL:
          if (*(_DWORD *)v115 != 1717663792)
          {
            v58 = bswap32(*(_DWORD *)v115);
            v59 = v58 >= 0x30786131;
            v60 = v58 > 0x30786131;
            v61 = !v59;
            if (v60 != v61)
              goto LABEL_237;
            goto LABEL_242;
          }
          break;
        case 6uLL:
          v55 = 813183029;
          v56 = bswap32(*(_DWORD *)v115);
          if (v56 == 813183029 && (v56 = bswap32(*((unsigned __int16 *)v115 + 2)) >> 16, v55 = 12598, v56 == 12598))
          {
            v57 = 0;
          }
          else if (v56 < v55)
          {
            v57 = -1;
          }
          else
          {
            v57 = 1;
          }
          if (v57)
            goto LABEL_237;
          break;
        case 5uLL:
          if ((*(_DWORD *)v115 != 825587760 || v115[4] != 54) && (*(_DWORD *)v115 != 1630566448 || v115[4] != 102))
          {
            v21 = bswap32(*(_DWORD *)v115);
            if (v21 == 813183073)
            {
              v22 = v115[4] - 49;
            }
            else if (v21 < 0x30783061)
            {
              v22 = -1;
            }
            else
            {
              v22 = 1;
            }
            if (v22)
              goto LABEL_237;
LABEL_242:
            v18 = "thunderxt88";
            goto LABEL_238;
          }
          break;
        default:
LABEL_237:
          v18 = "generic";
          goto LABEL_238;
      }
      v18 = "thunderx2t99";
      goto LABEL_238;
    case 0x36347830:
      v18 = "generic";
      if (v116 != 5)
        goto LABEL_238;
      v62 = *(_DWORD *)v115 ^ 0x30307830 | v115[4] ^ 0x31;
      v63 = "a64fx";
LABEL_185:
      if (!v62)
        v18 = v63;
      goto LABEL_238;
    case 0x65347830:
      v18 = "generic";
      if (v116 != 5)
        goto LABEL_238;
      v62 = *(_DWORD *)v115 ^ 0x30307830 | v115[4] ^ 0x34;
      v63 = "carmel";
      goto LABEL_185;
    case 0x38347830:
      v18 = "generic";
      if (v116 != 5)
        goto LABEL_238;
      v62 = *(_DWORD *)v115 ^ 0x30647830 | v115[4] ^ 0x31;
      v63 = "tsv110";
      goto LABEL_185;
    case 0x31357830:
      v18 = "generic";
      if (v116 == 5)
      {
        if (*(_DWORD *)v115 == 909146160 && v115[4] == 102)
        {
          v18 = "krait";
        }
        else
        {
          v65 = *(_DWORD *)v115 == 808613936 && v115[4] == 49;
          if (v65
            || (*(_DWORD *)v115 == 808613936 ? (v66 = v115[4] == 53) : (v66 = 0),
                v66 || (*(_DWORD *)v115 == 825391152 ? (v67 = v115[4] == 49) : (v67 = 0), v67)))
          {
            v18 = "kryo";
          }
          else
          {
            v68 = *(_DWORD *)v115 == 809007152 && v115[4] == 48;
            if (v68 || (*(_DWORD *)v115 == 809007152 ? (v69 = v115[4] == 49) : (v69 = 0), v69))
            {
              v18 = "cortex-a73";
            }
            else
            {
              if ((*(_DWORD *)v115 != 809007152 || v115[4] != 50) && (*(_DWORD *)v115 != 809007152 || v115[4] != 51))
              {
                if ((*(_DWORD *)v115 != 809007152 || v115[4] != 52) && (*(_DWORD *)v115 != 809007152 || v115[4] != 53))
                {
                  v74 = bswap32(*(_DWORD *)v115);
                  if (v74 == 813196080)
                  {
                    v75 = v115[4] - 48;
                  }
                  else if (v74 < 0x30786330)
                  {
                    v75 = -1;
                  }
                  else
                  {
                    v75 = 1;
                  }
                  if (v75)
                  {
                    v109 = *(_DWORD *)v115 ^ 0x30637830 | v115[4] ^ 0x31;
                    v110 = "saphira";
                    goto LABEL_328;
                  }
                  v18 = "falkor";
                  goto LABEL_347;
                }
                goto LABEL_320;
              }
              v18 = "cortex-a75";
            }
          }
        }
      }
      goto LABEL_238;
  }
  if (*v113 != 859142192)
  {
LABEL_35:
    v18 = "generic";
    goto LABEL_239;
  }
  v77 = 0;
  v78 = &v112[16 * v111];
  v79 = (__int128 *)v112;
  while (2)
  {
    v117 = *v79;
    v80 = *((_QWORD *)&v117 + 1) - 11;
    if (*((_QWORD *)&v117 + 1) < 0xBuLL)
      goto LABEL_274;
    if (*(_QWORD *)v117 != 0x6972617620555043 || *(_QWORD *)(v117 + 3) != 0x746E616972617620)
      goto LABEL_274;
    v82 = v117 + 11;
    *(_QWORD *)&v117 = v117 + 11;
    *((_QWORD *)&v117 + 1) -= 11;
    v83 = llvm::StringRef::find_first_not_of(&v117, "\t :", 3, 0);
    if (v83 >= v80)
      v84 = v80;
    else
      v84 = v83;
    v119 = (unsigned __int8 *)(v82 + v84);
    v120 = v80 - v84;
    v85 = sub_1C5E3D4C0((uint64_t)&v119);
    v86 = v120;
    if (!v120)
    {
      LODWORD(v92) = 0;
      v93 = 1;
      goto LABEL_272;
    }
    v87 = 0;
    v88 = v119;
    while (2)
    {
      v89 = *v88;
      if ((v89 - 48) < 0xA)
      {
        v90 = -48;
LABEL_257:
        v91 = v90 + v89;
        if (v91 >= v85)
        {
          v92 = v87;
          goto LABEL_269;
        }
        v92 = v87 * v85 + v91;
        if (v92 / v85 < v87)
        {
          v93 = 1;
          goto LABEL_270;
        }
        ++v88;
        v87 = v92;
        if (!--v86)
          goto LABEL_269;
        continue;
      }
      break;
    }
    if ((v89 - 97) < 0x1A)
    {
      v90 = -87;
      goto LABEL_257;
    }
    if ((v89 - 65) <= 0x19)
    {
      v90 = -55;
      goto LABEL_257;
    }
    v92 = v87;
LABEL_269:
    v93 = v86 != 0;
LABEL_270:
    if (HIDWORD(v92))
      LODWORD(v92) = v77;
LABEL_272:
    if (!v93)
      v77 = v92;
LABEL_274:
    if (++v79 != (__int128 *)v78)
      continue;
    break;
  }
  v94 = 0;
  v95 = (__int128 *)v112;
  while (2)
  {
    v117 = *v95;
    v96 = *((_QWORD *)&v117 + 1) - 8;
    if (*((_QWORD *)&v117 + 1) < 8uLL || *(_QWORD *)v117 != 0x7472617020555043)
      goto LABEL_302;
    v97 = v117 + 8;
    *(_QWORD *)&v117 = v117 + 8;
    *((_QWORD *)&v117 + 1) -= 8;
    v98 = llvm::StringRef::find_first_not_of(&v117, "\t :", 3, 0);
    if (v98 >= v96)
      v99 = v96;
    else
      v99 = v98;
    v119 = (unsigned __int8 *)(v97 + v99);
    v120 = v96 - v99;
    v100 = sub_1C5E3D4C0((uint64_t)&v119);
    v101 = v120;
    if (!v120)
    {
      LODWORD(v107) = 0;
      v108 = 1;
      goto LABEL_300;
    }
    v102 = 0;
    v103 = v119;
    while (2)
    {
      v104 = *v103;
      if ((v104 - 48) < 0xA)
      {
        v105 = -48;
LABEL_285:
        v106 = v105 + v104;
        if (v106 >= v100)
        {
          v107 = v102;
          goto LABEL_297;
        }
        v107 = v102 * v100 + v106;
        if (v107 / v100 < v102)
        {
          v108 = 1;
          goto LABEL_298;
        }
        ++v103;
        v102 = v107;
        if (!--v101)
          goto LABEL_297;
        continue;
      }
      break;
    }
    if ((v104 - 97) < 0x1A)
    {
      v105 = -87;
      goto LABEL_285;
    }
    if ((v104 - 65) <= 0x19)
    {
      v105 = -55;
      goto LABEL_285;
    }
    v107 = v102;
LABEL_297:
    v108 = v101 != 0;
LABEL_298:
    if (HIDWORD(v107))
      LODWORD(v107) = v94;
LABEL_300:
    if (!v108)
      v94 = v107;
LABEL_302:
    if (++v95 != (__int128 *)v78)
      continue;
    break;
  }
  if ((v94 | (v77 << 12)) == 0x1003)
    v18 = "exynos-m4";
  else
    v18 = "exynos-m3";
LABEL_37:
  v3 = v112;
LABEL_239:
  if (v3 != v123)
    free(v3);
  return v18;
}

const char *llvm::sys::detail::getHostCPUNameForS390x(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  size_t *v3;
  unint64_t v4;
  _QWORD *v5;
  _BYTE *v6;
  int64_t v7;
  uint64_t v9;
  uint64_t *v10;
  const char *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  BOOL v28;
  char v29;
  const char *v31;
  _QWORD v32[2];
  __int128 v33;
  void *v34;
  uint64_t v35;
  _BYTE v36[512];
  void *v37;
  uint64_t v38;
  _QWORD v39[65];

  v39[64] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v33 = a1;
  *((_QWORD *)&v33 + 1) = a2;
  v37 = v39;
  v38 = 0x2000000000;
  llvm::StringRef::split(&v33, (uint64_t)&v37, "\n", 1uLL, -1, 1);
  v34 = v36;
  v35 = 0x2000000000;
  v2 = v38;
  if (!(_DWORD)v38)
    goto LABEL_51;
  v3 = (size_t *)((char *)v37 + 8);
  while (1)
  {
    v4 = *v3;
    if (*v3 >= 8)
    {
      v5 = (_QWORD *)*(v3 - 1);
      if (*v5 == 0x7365727574616566)
      {
        v6 = memchr((void *)*(v3 - 1), 58, *v3);
        v7 = v6 - (_BYTE *)v5;
        if (v6 && v7 != -1)
          break;
      }
    }
    v3 += 2;
    if (!--v2)
      goto LABEL_11;
  }
  v25 = v4 >= v7 + 1 ? v7 + 1 : v4;
  v32[0] = (char *)v5 + v25;
  v32[1] = v4 - v25;
  llvm::StringRef::split((char *)v32, (uint64_t)&v34, 32, -1, 1);
  v26 = v35;
  if ((_DWORD)v35)
  {
    LOBYTE(v2) = 0;
    v27 = (char *)v34 + 8;
    do
    {
      v28 = *v27 == 2 && *(_WORD *)*(v27 - 1) == 30838;
      LOBYTE(v2) = v28 | v2;
      v27 += 2;
      --v26;
    }
    while (v26);
  }
  else
  {
    LOBYTE(v2) = 0;
  }
LABEL_11:
  v9 = v38;
  if (!(_DWORD)v38)
    goto LABEL_51;
  v10 = (uint64_t *)v37;
  v11 = "generic";
  do
  {
    v12 = v10[1];
    if (v12 >= 0xA)
    {
      v13 = (_QWORD *)*v10;
      if (*(_QWORD *)*v10 == 0x6F737365636F7270 && *(_WORD *)(*v10 + 8) == 8306)
        break;
    }
    v10 += 2;
    --v9;
  }
  while (v9);
  v15 = llvm::StringRef::find(v10, "machine = ", 0xAuLL, 0);
  if (v15 == -1 || (v12 >= v15 + 10 ? (v16 = v15 + 10) : (v16 = v12), v12 == v16))
  {
LABEL_51:
    v11 = "generic";
  }
  else
  {
    v17 = 0;
    v18 = (unsigned __int8 *)v13 + v16;
    v19 = v16 - v12;
    v11 = "generic";
    do
    {
      v20 = *v18;
      if ((v20 - 48) >= 0xA)
      {
        if ((v20 - 97) >= 0x1A)
        {
          if ((v20 - 65) > 0x19)
            goto LABEL_52;
          v21 = -55;
        }
        else
        {
          v21 = -87;
        }
      }
      else
      {
        v21 = -48;
      }
      v22 = v21 + v20;
      if (v22 > 9)
        goto LABEL_52;
      v23 = 10 * v17 + v22;
      if (v17 > v23 / 0xA)
        goto LABEL_52;
      ++v18;
      v17 = v23;
    }
    while (!__CFADD__(v19++, 1));
    if (HIDWORD(v23))
      goto LABEL_51;
    if ((int)v23 <= 2826)
    {
      v29 = v23 - 16;
      if ((v23 - 2064) <= 0x22)
      {
        if (((1 << v29) & 0x140500005) != 0)
          goto LABEL_51;
        if (((1 << v29) & 0x600000000) != 0)
        {
          v11 = "z10";
          goto LABEL_52;
        }
      }
      if ((v23 - 2817) < 2)
      {
        v11 = "z196";
        goto LABEL_52;
      }
      goto LABEL_74;
    }
    if ((int)v23 > 3905)
    {
      if ((v23 - 3906) < 2)
      {
        v31 = "z14";
      }
      else
      {
        if ((v23 - 8561) >= 2)
        {
LABEL_74:
          if ((v2 & 1) != 0)
            v11 = "arch14";
          else
            v11 = "zEC12";
          goto LABEL_52;
        }
        v31 = "z15";
      }
    }
    else
    {
      if ((v23 - 2827) < 2)
      {
        v11 = "zEC12";
        goto LABEL_52;
      }
      if ((v23 - 2964) >= 2)
        goto LABEL_74;
      v31 = "z13";
    }
    if ((v2 & 1) != 0)
      v11 = v31;
    else
      v11 = "zEC12";
  }
LABEL_52:
  if (v34 != v36)
    free(v34);
  if (v37 != v39)
    free(v37);
  return v11;
}

const char *llvm::sys::detail::getHostCPUNameForBPF(llvm::sys::detail *this)
{
  return "generic";
}

const char *llvm::sys::getHostCPUName(llvm::sys *this)
{
  size_t v2;
  int v3;

  v3 = 0;
  v2 = 4;
  sysctlbyname("hw.cpufamily", &v3, &v2, 0, 0);
  if (v3 <= 506291072)
  {
    if (v3 > 131287966)
    {
      if (v3 != 131287967)
        return "apple-m1";
      return "apple-a12";
    }
    else
    {
      if (v3 != -1829029944)
      {
        if (v3 == -400654602)
          return "apple-a11";
        return "apple-m1";
      }
      return "apple-a9";
    }
  }
  else if (v3 <= 933271105)
  {
    if (v3 != 506291073)
    {
      if (v3 == 747742334)
        return "apple-a8";
      return "apple-m1";
    }
    return "swift";
  }
  else
  {
    switch(v3)
    {
      case 1741614739:
        return "apple-a10";
      case 1176831186:
        return "apple-a13";
      case 933271106:
        return "apple-a7";
      default:
        return "apple-m1";
    }
  }
}

uint64_t llvm::sys::getHostCPUFeatures()
{
  return 0;
}

void llvm::sys::getProcessTriple(uint64_t a1@<X8>)
{
  void **v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  std::string __p;
  void *v10[2];
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  std::string __s;
  void *v15[2];
  char v16;

  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&__s.__r_.__value_.__r.__words[1] = xmmword_1C640C6A0;
  strcpy(__s.__r_.__value_.__l.__data_, "x86_64-apple-darwin10.0");
  sub_1C5E78A0C(&__s, (uint64_t)v15);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if (v16 >= 0)
    v3 = v15;
  else
    v3 = (void **)v15[0];
  if (v16 >= 0)
    v4 = v16 & 0x7F;
  else
    v4 = (uint64_t)v15[1];
  llvm::Triple::normalize((uint64_t)v3, v4, &__p);
  WORD4(v7) = 260;
  *(_QWORD *)&v5 = &__p;
  llvm::Triple::Triple((uint64_t)v10, (llvm::Twine *)&v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (sub_1C5E4EA90(v12) == 32)
  {
    llvm::Triple::get64BitArchVariant((llvm::Triple *)v10, (uint64_t)&v5);
    if (SHIBYTE(v11) < 0)
      operator delete(v10[0]);
    *(_OWORD *)v10 = v5;
    v11 = v6;
    v12 = v7;
    v13 = v8;
  }
  if (SHIBYTE(v11) < 0)
  {
    sub_1C47EBC30((_BYTE *)a1, v10[0], (unint64_t)v10[1]);
    if (SHIBYTE(v11) < 0)
      operator delete(v10[0]);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)v10;
    *(_QWORD *)(a1 + 16) = v11;
  }
  if (v16 < 0)
    operator delete(v15[0]);
}

size_t sub_1C5E7A844(_BYTE *a1)
{
  size_t result;
  size_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  utsname v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  result = uname(&v7);
  if ((_DWORD)result)
  {
    a1[23] = 0;
    *a1 = 0;
    return result;
  }
  result = strlen(v7.release);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v3 = result;
  if (result >= 0x17)
  {
    v4 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v4 = result | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *((_QWORD *)a1 + 1) = v3;
    *((_QWORD *)a1 + 2) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
    a1 = v6;
  }
  else
  {
    a1[23] = result;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memcpy(a1, v7.release, v3);
LABEL_11:
  a1[v3] = 0;
  return result;
}

uint64_t llvm::sys::Memory::protectMappedMemory(uint64_t a1, int a2)
{
  unsigned __int8 v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  size_t v11;
  unsigned int v12;
  int v14;
  llvm::sys::fs::mapped_file_region *v15;

  v3 = atomic_load((unsigned __int8 *)&qword_1ED825D50);
  if ((v3 & 1) == 0)
  {
    v14 = a2;
    v15 = (llvm::sys::fs::mapped_file_region *)__cxa_guard_acquire(&qword_1ED825D50);
    a2 = v14;
    if ((_DWORD)v15)
    {
      byte_1ED825D38 = 63 - __clz(llvm::sys::fs::mapped_file_region::alignment(v15));
      __cxa_guard_release(&qword_1ED825D50);
      a2 = v14;
    }
  }
  v4 = *(void **)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_17;
  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    goto LABEL_17;
  if (a2)
  {
    v6 = dword_1C8672AA8[(char)(((a2 & 0x7000000u) - 0x1000000) >> 24)];
    v7 = (uint64_t)v4 + (-1 << byte_1ED825D38) + (1 << byte_1ED825D38);
    v8 = -(1 << byte_1ED825D38);
    v9 = (void *)(v7 & v8);
    v10 = ((unint64_t)v4 + v5 + (1 << byte_1ED825D38) - 1) & v8;
    if ((a2 & 0x4000000) != 0)
    {
      v11 = v10 - (_QWORD)v9;
      if (((((a2 & 0x7000000u) - 0x1000000) >> 24) & 0xFFFFFFFD) != 1)
      {
        if (!mprotect((void *)(v7 & v8), v10 - (_QWORD)v9, v6))
        {
          sys_icache_invalidate(*(void **)a1, *(_QWORD *)(a1 + 8));
LABEL_17:
          std::system_category();
          return 0;
        }
        goto LABEL_14;
      }
      if (mprotect((void *)(v7 & v8), v10 - (_QWORD)v9, v6 | 1))
      {
LABEL_14:
        v12 = *__error();
        goto LABEL_15;
      }
      sys_icache_invalidate(*(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      v11 = v10 - (_QWORD)v9;
    }
    if (!mprotect(v9, v11, v6))
      goto LABEL_17;
    goto LABEL_14;
  }
  v12 = 22;
LABEL_15:
  std::generic_category();
  return v12;
}

unint64_t llvm::sys::path::begin@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned __int8 *v5;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  _BOOL4 v13;
  BOOL v14;
  int v15;
  BOOL v16;
  _BOOL4 v17;
  unint64_t v18;
  BOOL v20;
  uint64_t v21;
  char *v22;
  _QWORD v23[2];

  v5 = (unsigned __int8 *)result;
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = a2;
  v23[0] = result;
  v23[1] = a2;
  if (!a2)
  {
    v10 = 0;
    goto LABEL_50;
  }
  if (a3 >= 2 && a2 != 1)
  {
    v8 = *(char *)result;
    v9 = *(unsigned __int8 *)result;
    if (v8 < 0)
    {
      result = __maskrune(v9, 0x100uLL);
      if (!(_DWORD)result)
        goto LABEL_11;
    }
    else
    {
      result = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v9 + 60) & 0x100;
      if (!(_DWORD)result)
        goto LABEL_11;
    }
    if (v5[1] == 58)
    {
      v10 = 2;
      goto LABEL_50;
    }
  }
LABEL_11:
  v11 = *v5;
  if (a2 >= 3)
  {
    v12 = a3 > 1 && v11 == 92;
    v13 = v12;
    v14 = v11 != 47 && !v13;
    if (!v14 && v11 == v5[1])
    {
      v15 = v5[2];
      v16 = a3 > 1 && v15 == 92;
      v17 = v16;
      if (v15 != 47 && !v17)
      {
        v18 = 2;
LABEL_41:
        if (a3 <= 1)
          v21 = 1;
        else
          v21 = 2;
        if (a3 <= 1)
          v22 = "/";
        else
          v22 = "\\/";
        result = llvm::StringRef::find_first_of(v23, (unsigned __int8 *)v22, v21, v18);
        if (a2 >= result)
          v10 = result;
        else
          v10 = a2;
        goto LABEL_50;
      }
    }
  }
  v20 = a3 > 1 && v11 == 92;
  v10 = 1;
  if (v11 != 47 && !v20)
  {
    v18 = 0;
    goto LABEL_41;
  }
LABEL_50:
  *(_QWORD *)(a4 + 16) = v5;
  *(_QWORD *)(a4 + 24) = v10;
  *(_QWORD *)(a4 + 32) = 0;
  *(_DWORD *)(a4 + 40) = a3;
  return result;
}

uint64_t llvm::sys::path::end@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 40) = 0;
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = a2;
  *(_QWORD *)(a3 + 32) = a2;
  return result;
}

uint64_t *llvm::sys::path::const_iterator::operator++(uint64_t *a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  int v7;
  BOOL v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v15;
  char *v16;
  unint64_t first_of;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  const char *v21;
  _BOOL8 v22;
  int v24;
  BOOL v25;
  _BOOL4 v26;

  v2 = a1 + 2;
  v3 = a1[3];
  v4 = a1[4] + v3;
  a1[4] = v4;
  v5 = a1[1];
  if (v4 == v5)
  {
    *v2 = 0;
    a1[3] = 0;
    return a1;
  }
  v10 = v3 >= 3
     && ((v6 = (unsigned __int8 *)a1[2], v7 = *v6, v7 == 47)
      || (v7 == 92 ? (v8 = *((_DWORD *)a1 + 10) >= 2u) : (v8 = 0), v8))
     && v6[1] == v7
     && (v9 = v6[2], v9 != 47)
     && (v9 != 92 || *((_DWORD *)a1 + 10) < 2u);
  v11 = *a1;
  v12 = *(unsigned __int8 *)(*a1 + v4);
  if (v12 != 47)
  {
    v13 = *((_DWORD *)a1 + 10);
    if (v12 != 92 || v13 < 2)
      goto LABEL_18;
  }
  if (!v10)
  {
    v13 = *((_DWORD *)a1 + 10);
    if (!v3 || v13 <= 1 || *(_BYTE *)(*v2 + v3 - 1) != 58)
    {
      while (1)
      {
        v24 = *(unsigned __int8 *)(v11 + v4);
        v25 = v13 > 1 && v24 == 92;
        v26 = v25;
        if (v24 != 47 && !v26)
          break;
        a1[4] = ++v4;
        if (v5 == v4)
        {
          if (v3 != 1 || (v4 = v5, *(_BYTE *)*v2 != 47))
          {
            a1[4] = v5 - 1;
            v21 = ".";
            v22 = 1;
            goto LABEL_38;
          }
          break;
        }
      }
LABEL_18:
      if (v13 <= 1)
        v15 = 1;
      else
        v15 = 2;
      if (v13 <= 1)
        v16 = "/";
      else
        v16 = "\\/";
      first_of = llvm::StringRef::find_first_of(a1, (unsigned __int8 *)v16, v15, v4);
      if (v5 >= v4)
        v18 = v4;
      else
        v18 = v5;
      if (v18 <= first_of)
        v19 = first_of;
      else
        v19 = v18;
      if (v5 < v19)
        v19 = v5;
      a1[2] = v11 + v18;
      a1[3] = v19 - v18;
      return a1;
    }
  }
  if (v5 >= v4)
    v20 = v4;
  else
    v20 = a1[1];
  v21 = (const char *)(v11 + v20);
  v22 = v5 > v4;
LABEL_38:
  a1[2] = (uint64_t)v21;
  a1[3] = v22;
  return a1;
}

BOOL llvm::sys::path::is_separator(llvm::sys::path *this, unsigned int a2)
{
  _BOOL4 v3;

  v3 = (_DWORD)this == 92 && a2 > 1;
  return (_DWORD)this == 47 || v3;
}

BOOL llvm::sys::path::const_iterator::operator==(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[4] == a2[4];
}

uint64_t llvm::sys::path::rbegin@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = a2;
  *(_QWORD *)(a4 + 32) = a2;
  *(_DWORD *)(a4 + 40) = a3;
  return llvm::sys::path::reverse_iterator::operator++(a4);
}

uint64_t llvm::sys::path::reverse_iterator::operator++(uint64_t a1)
{
  unsigned __int8 *v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  _BOOL4 v11;
  BOOL v13;
  int v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v2 = *(unsigned __int8 **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 40);
  v5 = sub_1C5E7AF84(*(unsigned __int8 **)a1, v3, v4);
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
  {
    v7 = v5 + 1;
    v8 = *(_QWORD *)(a1 + 32);
    while (v7 != v8)
    {
      v9 = v2[v8 - 1];
      v11 = v4 > 1 && v9 == 92;
      if (v9 != 47 && !v11)
      {
        v7 = v8;
        break;
      }
      if (!--v8)
        goto LABEL_15;
    }
  }
  else
  {
LABEL_15:
    v7 = 0;
  }
  if (v3)
    v13 = v6 == v3;
  else
    v13 = 0;
  if (v13
    && ((v14 = v2[v3 - 1], v14 == 47) || v4 >= 2 && v14 == 92)
    && (v5 != -1 ? (v15 = v7 - 1 > v5) : (v15 = 1), v15))
  {
    *(_QWORD *)(a1 + 32) = v3 - 1;
    *(_QWORD *)(a1 + 16) = ".";
    *(_QWORD *)(a1 + 24) = 1;
  }
  else
  {
    if (v3 >= v7)
      v16 = v7;
    else
      v16 = v3;
    v17 = sub_1C5E7B08C(v2, v16, v4);
    if (v3 >= v17)
      v18 = v17;
    else
      v18 = v3;
    if (v18 <= v7)
      v19 = v7;
    else
      v19 = v18;
    if (v3 < v19)
      v19 = v3;
    *(_QWORD *)(a1 + 16) = &v2[v18];
    *(_QWORD *)(a1 + 24) = v19 - v18;
    *(_QWORD *)(a1 + 32) = v17;
  }
  return a1;
}

uint64_t llvm::sys::path::rend@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)(a3 + 40) = 0;
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = a2;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 16) = result;
  return result;
}

uint64_t sub_1C5E7AF84(unsigned __int8 *a1, unint64_t a2, unsigned int a3)
{
  int v3;
  uint64_t v4;
  int v5;
  _BOOL4 v7;
  BOOL v8;
  int v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  char *v14;
  BOOL v16;
  _QWORD v18[2];

  v18[0] = a1;
  v18[1] = a2;
  if (a3 >= 2 && a2 >= 3 && a1[1] == 58)
  {
    v3 = a1[2];
    v4 = 2;
    if (v3 == 47 || v3 == 92)
      return v4;
  }
  if (a2 < 4)
  {
    if (!a2)
      return -1;
    v5 = *a1;
  }
  else
  {
    v5 = *a1;
    v7 = a3 > 1 && v5 == 92;
    v8 = v5 != 47 && !v7;
    if (!v8 && v5 == a1[1])
    {
      v9 = a1[2];
      v10 = a3 > 1 && v9 == 92;
      v11 = v10;
      if (v9 != 47 && !v11)
      {
        v12 = a3 > 1;
        if (a3 <= 1)
          v13 = 1;
        else
          v13 = 2;
        if (v12)
          v14 = "\\/";
        else
          v14 = "/";
        return llvm::StringRef::find_first_of(v18, (unsigned __int8 *)v14, v13, 2uLL);
      }
    }
  }
  v4 = 0;
  v16 = a3 > 1 && v5 == 92;
  if (v5 != 47 && !v16)
    return -1;
  return v4;
}

unint64_t sub_1C5E7B08C(unsigned __int8 *a1, unint64_t a2, unsigned int a3)
{
  unint64_t v6;
  int v7;
  uint64_t v8;
  char *v9;
  uint64_t last_of;
  unint64_t v11;
  int v12;
  int v13;
  BOOL v14;
  BOOL v15;
  _QWORD v17[2];

  v17[0] = a1;
  v17[1] = a2;
  if (a2)
  {
    v6 = a2 - 1;
    v7 = a1[a2 - 1];
    if (v7 == 47 || a3 >= 2 && v7 == 92)
      return v6;
  }
  else
  {
    v6 = -1;
  }
  if (a3 <= 1)
    v8 = 1;
  else
    v8 = 2;
  if (a3 <= 1)
    v9 = "/";
  else
    v9 = "\\/";
  last_of = llvm::StringRef::find_last_of(v17, (unsigned __int8 *)v9, v8, v6);
  if (a3 >= 2 && last_of == -1)
  {
    if (a2 >= a2 - 2)
      v11 = a2 - 2;
    else
      v11 = a2;
    while (v11)
    {
      last_of = v11 - 1;
      v12 = a1[--v11];
      if (v12 == 58)
        goto LABEL_20;
    }
    return 0;
  }
LABEL_20:
  if (last_of == -1)
    return 0;
  if (last_of != 1)
    return last_of + 1;
  v6 = 0;
  v13 = *a1;
  v14 = a3 > 1 && v13 == 92;
  v15 = v14;
  if (v13 != 47 && !v15)
    return last_of + 1;
  return v6;
}

BOOL llvm::sys::path::reverse_iterator::operator==(uint64_t a1, uint64_t a2)
{
  size_t v2;

  if (*(_QWORD *)a1 == *(_QWORD *)a2
    && (v2 = *(_QWORD *)(a1 + 24), v2 == *(_QWORD *)(a2 + 24))
    && (!v2 || !memcmp(*(const void **)(a1 + 16), *(const void **)(a2 + 16), v2)))
  {
    return *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
  }
  else
  {
    return 0;
  }
}

unint64_t llvm::sys::path::root_path(unint64_t a1, unint64_t a2, unsigned int a3)
{
  unint64_t v5;
  int v7;
  _BOOL4 v8;
  _BOOL4 v9;
  int v10;
  BOOL v11;
  _BOOL4 v12;
  int v14;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v5 = a1;
  llvm::sys::path::begin(a1, a2, a3, (uint64_t)&v21);
  v18 = v21;
  v19 = v22;
  v20 = v23;
  if ((_QWORD)v21 == v5 && (_QWORD)v23 == a2)
    return 0;
  if (*((_QWORD *)&v22 + 1) < 3uLL)
  {
    v8 = 0;
  }
  else
  {
    v7 = *(unsigned __int8 *)v22;
    if (v7 == 47 || (v8 = 0, a3 >= 2) && v7 == 92)
      v8 = *(unsigned __int8 *)(v22 + 1) == v7;
  }
  v9 = 0;
  if (a3 >= 2 && *((_QWORD *)&v22 + 1))
    v9 = *(unsigned __int8 *)(v22 + *((_QWORD *)&v22 + 1) - 1) == 58;
  if (v8 || v9)
  {
    llvm::sys::path::const_iterator::operator++((uint64_t *)&v18);
    if ((_QWORD)v18 == v5 && (_QWORD)v20 == a2)
      return v22;
    v10 = *(unsigned __int8 *)v19;
    v11 = a3 > 1 && v10 == 92;
    v12 = v11;
    if (v10 != 47 && !v12)
      return v22;
  }
  else
  {
    v14 = *(unsigned __int8 *)v22;
    if (a3 > 1 && v14 == 92 || v14 == 47)
      return v22;
    else
      return 0;
  }
  return v5;
}

unsigned __int8 *llvm::sys::path::root_name(unint64_t a1, unint64_t a2, unsigned int a3)
{
  int v7;
  _BOOL4 v8;
  _BOOL4 v9;
  uint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  uint64_t v14;

  llvm::sys::path::begin(a1, a2, a3, (uint64_t)&v11);
  if (v11 == a1 && v14 == a2)
    return 0;
  if (v13 < 3)
  {
    v8 = 0;
  }
  else
  {
    v7 = *v12;
    if (v7 == 47 || (v8 = 0, a3 >= 2) && v7 == 92)
      v8 = v12[1] == v7;
  }
  v9 = 0;
  if (a3 >= 2)
  {
    if (v13)
      v9 = v12[v13 - 1] == 58;
  }
  if (!v8 && !v9)
    return 0;
  else
    return v12;
}

uint64_t llvm::sys::path::root_directory(unint64_t a1, unint64_t a2, unsigned int a3)
{
  int v7;
  _BOOL4 v8;
  _BOOL4 v9;
  uint64_t result;
  int v11;
  BOOL v12;
  int v13;
  BOOL v14;
  int v15;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  llvm::sys::path::begin(a1, a2, a3, (uint64_t)&v21);
  v18 = v21;
  v19 = v22;
  v20 = v23;
  if ((_QWORD)v21 == a1 && (_QWORD)v23 == a2)
    return 0;
  if (*((_QWORD *)&v22 + 1) < 3uLL)
  {
    v8 = 0;
  }
  else
  {
    v7 = *(unsigned __int8 *)v22;
    if (v7 == 47 || (v8 = 0, a3 >= 2) && v7 == 92)
      v8 = *(unsigned __int8 *)(v22 + 1) == v7;
  }
  v9 = 0;
  if (a3 >= 2 && *((_QWORD *)&v22 + 1))
    v9 = *(unsigned __int8 *)(v22 + *((_QWORD *)&v22 + 1) - 1) == 58;
  if (!v8 && !v9
    || (llvm::sys::path::const_iterator::operator++((uint64_t *)&v18), (_QWORD)v18 == a1) && (_QWORD)v20 == a2
    || ((result = v19, v11 = *(unsigned __int8 *)v19, a3 > 1) ? (v12 = v11 == 92) : (v12 = 0),
        !v12 ? (v13 = 0) : (v13 = 1),
        v11 != 47 ? (v14 = v13 == 0) : (v14 = 0),
        v14))
  {
    if (!v8)
    {
      v15 = *(unsigned __int8 *)v22;
      if (a3 > 1 && v15 == 92 || v15 == 47)
        return v22;
      else
        return 0;
    }
    return 0;
  }
  return result;
}

unint64_t llvm::sys::path::relative_path(unint64_t a1, unint64_t a2, unsigned int a3)
{
  unint64_t v5;
  unint64_t v6;

  llvm::sys::path::root_path(a1, a2, a3);
  if (a2 >= v5)
    v6 = v5;
  else
    v6 = a2;
  return a1 + v6;
}

void llvm::sys::path::append(_QWORD *a1, const llvm::Twine *a2, _QWORD **a3, _QWORD **a4, _QWORD **a5, void ***a6)
{
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  const char *v14;
  size_t v15;
  char v16;
  const char **v17;
  unsigned int v18;
  size_t v19;
  const char *v20;
  char v21;
  const char **v22;
  unsigned int v23;
  size_t v24;
  const char *v25;
  char v26;
  const char **v27;
  unsigned int v28;
  size_t v29;
  void **v30;
  char v31;
  void ***v32;
  const char **v33;
  uint64_t v34;
  const char *v35;
  int v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  int v42;
  BOOL v43;
  unint64_t first_not_of;
  unint64_t v45;
  unsigned __int8 *v46;
  unint64_t v47;
  const char *v48;
  size_t v49;
  unint64_t v50;
  const char *v51;
  int v52;
  BOOL has_root_name;
  void *v54;
  char v55;
  unsigned __int8 *v56;
  uint64_t v57;
  const char *v58[4];
  __int16 v59;
  void *v60;
  uint64_t v61;
  _BYTE v62[64];
  void *v63;
  __int128 v64;
  _BYTE v65[32];
  void *v66;
  __int128 v67;
  _BYTE v68[32];
  char *v69;
  __int128 v70;
  _BYTE v71[32];
  char *v72;
  __int128 v73;
  _QWORD v74[6];

  v74[4] = *MEMORY[0x1E0C80C00];
  v72 = (char *)v74;
  v73 = xmmword_1C677F680;
  v69 = v71;
  v70 = xmmword_1C677F680;
  v66 = v68;
  v67 = xmmword_1C677F680;
  v63 = v65;
  v64 = xmmword_1C677F680;
  v60 = v62;
  v61 = 0x400000000;
  v11 = *((unsigned __int8 *)a3 + 32);
  if (v11 < 2)
  {
    v12 = 0;
    goto LABEL_19;
  }
  if (*((_BYTE *)a3 + 33) != 1)
  {
LABEL_17:
    llvm::Twine::toVector((uint64_t)a3, (uint64_t)&v72);
    v14 = v72;
    v15 = v73;
    v13 = v61;
    goto LABEL_18;
  }
  if (v11 == 3)
  {
    v14 = (const char *)*a3;
    if (*a3)
      v15 = strlen((const char *)*a3);
    else
      v15 = 0;
    v13 = 0;
    goto LABEL_18;
  }
  if (v11 != 5)
  {
    if (v11 == 4)
    {
      v13 = 0;
      v16 = *((_BYTE *)*a3 + 23);
      if (v16 >= 0)
        v14 = (const char *)*a3;
      else
        v14 = (const char *)**a3;
      if (v16 >= 0)
        v15 = v16 & 0x7F;
      else
        v15 = (*a3)[1];
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  v13 = 0;
  v14 = (const char *)*a3;
  v15 = (size_t)a3[1];
LABEL_18:
  v17 = (const char **)((char *)v60 + 16 * v13);
  *v17 = v14;
  v17[1] = (const char *)v15;
  v12 = v61 + 1;
  LODWORD(v61) = v61 + 1;
LABEL_19:
  v18 = *((unsigned __int8 *)a4 + 32);
  if (v18 < 2)
    goto LABEL_37;
  if (*((_BYTE *)a4 + 33) != 1)
  {
LABEL_33:
    llvm::Twine::toVector((uint64_t)a4, (uint64_t)&v69);
    v20 = v69;
    v19 = v70;
    v12 = v61;
    goto LABEL_34;
  }
  if (v18 == 3)
  {
    v20 = (const char *)*a4;
    if (*a4)
      v19 = strlen((const char *)*a4);
    else
      v19 = 0;
    goto LABEL_34;
  }
  if (v18 != 5)
  {
    if (v18 == 4)
    {
      v21 = *((_BYTE *)*a4 + 23);
      if (v21 >= 0)
        v20 = (const char *)*a4;
      else
        v20 = (const char *)**a4;
      if (v21 >= 0)
        v19 = v21 & 0x7F;
      else
        v19 = (*a4)[1];
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  v20 = (const char *)*a4;
  v19 = (size_t)a4[1];
LABEL_34:
  if (v12 >= HIDWORD(v61))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, (uint64_t)v62, v12 + 1, 16);
    v12 = v61;
  }
  v22 = (const char **)((char *)v60 + 16 * v12);
  *v22 = v20;
  v22[1] = (const char *)v19;
  v12 = v61 + 1;
  LODWORD(v61) = v61 + 1;
LABEL_37:
  v23 = *((unsigned __int8 *)a5 + 32);
  if (v23 < 2)
    goto LABEL_55;
  if (*((_BYTE *)a5 + 33) != 1)
  {
LABEL_51:
    llvm::Twine::toVector((uint64_t)a5, (uint64_t)&v66);
    v25 = (const char *)v66;
    v24 = v67;
    v12 = v61;
    goto LABEL_52;
  }
  if (v23 == 3)
  {
    v25 = (const char *)*a5;
    if (*a5)
      v24 = strlen((const char *)*a5);
    else
      v24 = 0;
    goto LABEL_52;
  }
  if (v23 != 5)
  {
    if (v23 == 4)
    {
      v26 = *((_BYTE *)*a5 + 23);
      if (v26 >= 0)
        v25 = (const char *)*a5;
      else
        v25 = (const char *)**a5;
      if (v26 >= 0)
        v24 = v26 & 0x7F;
      else
        v24 = (*a5)[1];
      goto LABEL_52;
    }
    goto LABEL_51;
  }
  v25 = (const char *)*a5;
  v24 = (size_t)a5[1];
LABEL_52:
  if (v12 >= HIDWORD(v61))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, (uint64_t)v62, v12 + 1, 16);
    v12 = v61;
  }
  v27 = (const char **)((char *)v60 + 16 * v12);
  *v27 = v25;
  v27[1] = (const char *)v24;
  v12 = v61 + 1;
  LODWORD(v61) = v61 + 1;
LABEL_55:
  v28 = *((unsigned __int8 *)a6 + 32);
  if (v28 >= 2)
  {
    if (*((_BYTE *)a6 + 33) == 1)
    {
      switch(v28)
      {
        case 3u:
          v30 = *a6;
          if (*a6)
            v29 = strlen((const char *)*a6);
          else
            v29 = 0;
          goto LABEL_70;
        case 5u:
          v30 = *a6;
          v29 = (size_t)a6[1];
LABEL_70:
          if (v12 >= HIDWORD(v61))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, (uint64_t)v62, v12 + 1, 16);
            v12 = v61;
          }
          v32 = (void ***)((char *)v60 + 16 * v12);
          *v32 = v30;
          v32[1] = (void **)v29;
          v12 = v61 + 1;
          LODWORD(v61) = v61 + 1;
          goto LABEL_73;
        case 4u:
          v31 = *((_BYTE *)*a6 + 23);
          if (v31 >= 0)
            v30 = *a6;
          else
            v30 = (void **)**a6;
          if (v31 >= 0)
            v29 = v31 & 0x7F;
          else
            v29 = (size_t)(*a6)[1];
          goto LABEL_70;
      }
    }
    llvm::Twine::toVector((uint64_t)a6, (uint64_t)&v63);
    v30 = (void **)v63;
    v29 = v64;
    v12 = v61;
    goto LABEL_70;
  }
LABEL_73:
  v33 = (const char **)v60;
  if (!v12)
    goto LABEL_120;
  if (a2 <= 1)
    v34 = 1;
  else
    v34 = 2;
  v35 = "/";
  if (a2 > 1)
    v35 = "\\/";
  v56 = (unsigned __int8 *)v35;
  v57 = v34;
  v54 = a1 + 3;
  if (a2 <= 1)
    v36 = 1;
  else
    v36 = (int)a2;
  if (v36 == 3)
    v37 = 92;
  else
    v37 = 47;
  v55 = v37;
  v38 = a1[1];
  v39 = 16 * v12;
  do
  {
    if (!v38
      || ((v40 = *(unsigned __int8 *)(v38 + *a1 - 1), a2 > 1) ? (v41 = v40 == 92) : (v41 = 0),
          !v41 ? (v42 = 0) : (v42 = 1),
          v40 != 47 ? (v43 = v42 == 0) : (v43 = 0),
          v43))
    {
      v51 = v33[1];
      if (!v51 || (v52 = *(unsigned __int8 *)*v33, v52 != 47) && (a2 < 2 || v52 != 92))
      {
        if (v38)
        {
          v59 = 261;
          v58[0] = *v33;
          v58[1] = v51;
          has_root_name = llvm::sys::path::has_root_name(v58, a2);
          v38 = a1[1];
          if (!has_root_name)
          {
            if ((unint64_t)(v38 + 1) > a1[2])
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, v54, v38 + 1, 1);
              v38 = a1[1];
            }
            *(_BYTE *)(*a1 + v38) = v55;
            v38 = a1[1] + 1;
            a1[1] = v38;
          }
        }
      }
      v48 = *v33;
      v49 = (size_t)v33[1];
      if (a1[2] >= v49 + v38)
      {
        if (!v49)
          goto LABEL_116;
LABEL_115:
        memcpy((void *)(*a1 + v38), v48, v49);
        v38 = a1[1];
        goto LABEL_116;
      }
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, v54, v49 + v38, 1);
      v38 = a1[1];
      if (v49)
        goto LABEL_115;
    }
    else
    {
      first_not_of = llvm::StringRef::find_first_not_of(v33, v56, v57, 0);
      v45 = first_not_of;
      v46 = (unsigned __int8 *)v33[1];
      if ((unint64_t)v46 >= first_not_of)
        v47 = first_not_of;
      else
        v47 = (unint64_t)v33[1];
      v48 = &(*v33)[v47];
      v49 = (size_t)&v46[-v47];
      v50 = (unint64_t)&v46[v38 - v47];
      if (a1[2] < v50)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, v54, v50, 1);
        v38 = a1[1];
      }
      if ((unint64_t)v46 > v45)
        goto LABEL_115;
    }
LABEL_116:
    v38 += v49;
    a1[1] = v38;
    v33 += 2;
    v39 -= 16;
  }
  while (v39);
  v33 = (const char **)v60;
LABEL_120:
  if (v33 != (const char **)v62)
    free(v33);
  if (v63 != v65)
    free(v63);
  if (v66 != v68)
    free(v66);
  if (v69 != v71)
    free(v69);
  if (v72 != (char *)v74)
    free(v72);
}

BOOL llvm::sys::path::has_root_name(const char **this, const llvm::Twine *a2)
{
  unsigned int v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  void *v9;
  __int128 v10;
  _QWORD v11[17];

  v2 = a2;
  v11[16] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = xmmword_1C85F20B0;
  if (*((_BYTE *)this + 33) == 1)
  {
    v3 = 0;
    v4 = 0;
    switch(*((_BYTE *)this + 32))
    {
      case 1:
        break;
      case 3:
        v4 = (void *)*this;
        if (*this)
          v3 = strlen(*this);
        else
          v3 = 0;
        break;
      case 4:
        v8 = (*this)[23];
        if (v8 >= 0)
          v4 = (void *)*this;
        else
          v4 = *(void **)*this;
        if (v8 >= 0)
          v3 = v8 & 0x7F;
        else
          v3 = *((_QWORD *)*this + 1);
        break;
      case 5:
        v4 = (void *)*this;
        v3 = (unint64_t)this[1];
        break;
      default:
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    llvm::Twine::toVector((uint64_t)this, (uint64_t)&v9);
    v4 = v9;
    v3 = v10;
  }
  llvm::sys::path::root_name((unint64_t)v4, v3, v2);
  v6 = v5;
  if (v9 != v11)
    free(v9);
  return v6 != 0;
}

void llvm::sys::path::append(_QWORD *a1, _QWORD **a2, _QWORD **a3, _QWORD **a4, void ***a5)
{
  llvm::sys::path::append(a1, 0, a2, a3, a4, a5);
}

uint64_t *llvm::sys::path::append(uint64_t *result, uint64_t a2, _QWORD *a3, const llvm::Twine *a4)
{
  uint64_t *v7;
  _QWORD *v8;
  void **v9;
  __int16 v10;
  _QWORD *v11;
  __int16 v12;
  _QWORD *v13;
  __int16 v14;
  _QWORD *v15[4];
  __int16 v16;

  v7 = result;
  while (*(_QWORD *)a2 != *a3 || *(_QWORD *)(a2 + 32) != a3[4])
  {
    v16 = 261;
    v8 = *(_QWORD **)(a2 + 24);
    v15[0] = *(_QWORD **)(a2 + 16);
    v15[1] = v8;
    v14 = 257;
    v12 = 257;
    v10 = 257;
    llvm::sys::path::append(v7, a4, v15, &v13, &v11, &v9);
    result = llvm::sys::path::const_iterator::operator++((uint64_t *)a2);
  }
  return result;
}

unsigned __int8 *llvm::sys::path::parent_path(unsigned __int8 *a1, unint64_t a2, unsigned int a3)
{
  if (sub_1C5E7BE8C(a1, a2, a3) == -1)
    return 0;
  else
    return a1;
}

unint64_t sub_1C5E7BE8C(unsigned __int8 *a1, unint64_t a2, unsigned int a3)
{
  unint64_t v6;
  unint64_t v7;
  int v8;
  _BOOL4 v10;
  int v11;
  unint64_t i;
  int v13;
  BOOL v14;
  _BOOL4 v15;
  int v17;

  v6 = sub_1C5E7B08C(a1, a2, a3);
  v7 = v6;
  if (a2)
  {
    v8 = a1[v6];
    v10 = a3 > 1 && v8 == 92;
    v11 = v8 == 47 || v10;
  }
  else
  {
    v11 = 0;
  }
  for (i = sub_1C5E7AF84(a1, a2, a3); v7; --v7)
  {
    if (i != -1 && v7 <= i)
      break;
    v13 = a1[v7 - 1];
    v14 = a3 > 1 && v13 == 92;
    v15 = v14;
    if (v13 != 47 && !v15)
      break;
  }
  if (v7 == i)
    v17 = v11;
  else
    v17 = 1;
  if (v17)
    return v7;
  else
    return i + 1;
}

uint64_t llvm::sys::path::replace_path_prefix(const void **a1, unsigned __int8 *a2, size_t __len, void *__src, uint64_t a5, unsigned int a6)
{
  char *v10;
  size_t v11;
  unsigned __int8 *v12;
  size_t v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  size_t v23;
  _QWORD v24[4];
  __int16 v25;
  void *v26;
  __int128 v27;
  _QWORD v28[33];

  v28[32] = *MEMORY[0x1E0C80C00];
  if (!(__len | a5))
    return 0;
  v10 = (char *)*a1;
  v11 = (size_t)a1[1];
  if (a6 < 2)
  {
    if (__len && v11 >= __len)
    {
      if (!memcmp(*a1, a2, __len))
        goto LABEL_33;
    }
    else if (v11 >= __len)
    {
      goto LABEL_33;
    }
    return 0;
  }
  if (v11 < __len)
    return 0;
  if (__len)
  {
    v12 = (unsigned __int8 *)*a1;
    v13 = __len;
    do
    {
      v15 = *v12++;
      v14 = v15;
      v16 = v15 == 47 || v14 == 92;
      v17 = v16;
      v19 = *a2++;
      v18 = v19;
      v20 = v19 == 47 || v18 == 92;
      v21 = v20;
      if (v17 != v21)
        return 0;
      if (v14 != 47 && v14 != 92)
      {
        if ((v14 - 65) < 0x1A)
          LOBYTE(v14) = v14 + 32;
        if ((v18 - 65) < 0x1A)
          LOBYTE(v18) = v18 + 32;
        if (v14 != v18)
          return 0;
      }
    }
    while (--v13);
  }
LABEL_33:
  if (__len == a5)
  {
    if (a5)
      memmove(v10, __src, __len);
  }
  else
  {
    v26 = v28;
    if (v11 >= __len)
      v23 = __len;
    else
      v23 = v11;
    v27 = xmmword_1C64638F0;
    v24[0] = __src;
    v24[1] = a5;
    v24[2] = &v10[v23];
    v24[3] = v11 - v23;
    v25 = 1285;
    llvm::Twine::toVector((uint64_t)v24, (uint64_t)&v26);
    sub_1C5DF216C(a1, &v26);
    if (v26 != v28)
      free(v26);
  }
  return 1;
}

passwd *llvm::sys::path::home_directory(_QWORD *a1)
{
  char *pw_dir;
  size_t v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  passwd *result;
  uid_t v8;

  pw_dir = getenv("HOME");
  if (pw_dir)
    goto LABEL_2;
  v8 = getuid();
  result = getpwuid(v8);
  if (result)
  {
    pw_dir = result->pw_dir;
    if (!pw_dir)
      return 0;
LABEL_2:
    a1[1] = 0;
    v3 = strlen(pw_dir);
    v4 = v3;
    if (a1[2] < v3)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, a1 + 3, v3, 1);
      v5 = a1[1];
    }
    else
    {
      v5 = 0;
      v6 = 0;
      if (!v3)
      {
LABEL_5:
        a1[1] = v6 + v4;
        return (passwd *)1;
      }
    }
    memcpy((void *)(*a1 + v5), pw_dir, v4);
    v6 = a1[1];
    goto LABEL_5;
  }
  return result;
}

void *llvm::sys::path::convert_to_slash@<X0>(void *result@<X0>, size_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  const void *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v5 = result;
  v6 = (_QWORD *)a4;
  if (a3 <= 1)
  {
    if (a2 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (a2 >= 0x17)
      {
        v8 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a2 | 7) != 0x17)
          v8 = a2 | 7;
        v9 = v8 + 1;
        v10 = operator new(v8 + 1);
        v6[1] = a2;
        v6[2] = v9 | 0x8000000000000000;
        *v6 = v10;
        v6 = v10;
      }
      else
      {
        *(_BYTE *)(a4 + 23) = a2;
        if (!a2)
          goto LABEL_15;
      }
      result = memmove(v6, v5, a2);
LABEL_15:
      *((_BYTE *)v6 + a2) = 0;
      return result;
    }
LABEL_31:
    abort();
  }
  if (result)
  {
    if (a2 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_31;
    if (a2 >= 0x17)
    {
      v14 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a2 | 7) != 0x17)
        v14 = a2 | 7;
      v15 = v14 + 1;
      v7 = operator new(v14 + 1);
      v6[1] = a2;
      v6[2] = v15 | 0x8000000000000000;
      *v6 = v7;
    }
    else
    {
      *(_BYTE *)(a4 + 23) = a2;
      v7 = (void *)a4;
      if (!a2)
        goto LABEL_21;
    }
    result = memmove(v7, v5, a2);
LABEL_21:
    *((_BYTE *)v7 + a2) = 0;
    v13 = *((_BYTE *)v6 + 23);
    v12 = (_BYTE *)*v6;
    v11 = v6[1];
    goto LABEL_22;
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
  *v6 = 0;
  v6[1] = 0;
  v6[2] = 0;
LABEL_22:
  v16 = v13;
  if (v13 >= 0)
    v12 = v6;
  v17 = v13 & 0x7F;
  if (v16 < 0)
    v17 = v11;
  for (; v17; --v17)
  {
    if (*v12 == 92)
      *v12 = 47;
    ++v12;
  }
  return result;
}

uint64_t llvm::sys::path::filename(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD v4[2];
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = 0;
  v4[0] = a1;
  v4[1] = a2;
  v7 = a2;
  v8 = a3;
  llvm::sys::path::reverse_iterator::operator++((uint64_t)v4);
  return v5;
}

uint64_t llvm::sys::path::stem(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = 0;
  v6[0] = a1;
  v6[1] = a2;
  v9 = a2;
  v10 = a3;
  llvm::sys::path::reverse_iterator::operator++((uint64_t)v6);
  result = v7;
  v4 = v8;
  do
  {
    if (!v4)
      break;
    v5 = *(unsigned __int8 *)(v7 + v4-- - 1);
  }
  while (v5 != 46);
  return result;
}

char *llvm::sys::path::extension(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  _QWORD v7[2];
  _WORD *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = 0;
  v7[0] = a1;
  v7[1] = a2;
  v10 = a2;
  v11 = a3;
  llvm::sys::path::reverse_iterator::operator++((uint64_t)v7);
  v3 = v9;
  do
  {
    if (!v3)
      return 0;
    v4 = v3 - 1;
    v5 = *((unsigned __int8 *)v8 + --v3);
  }
  while (v5 != 46);
  if (v9 == 2)
  {
    if (*v8 == 11822)
      return 0;
  }
  else if (v9 == 1 && *(_BYTE *)v8 == 46)
  {
    return 0;
  }
  if (v9 < v4)
    v4 = v9;
  return (char *)v8 + v4;
}

const char *llvm::sys::path::get_separator(llvm::sys::path *this)
{
  int v1;

  if (this <= 1)
    v1 = 1;
  else
    v1 = (int)this;
  if (v1 == 3)
    return "\\";
  else
    return "/";
}

BOOL llvm::sys::path::has_root_directory(const char **this, const llvm::Twine *a2)
{
  unsigned int v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  void *v9;
  __int128 v10;
  _QWORD v11[17];

  v2 = a2;
  v11[16] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = xmmword_1C85F20B0;
  if (*((_BYTE *)this + 33) == 1)
  {
    v3 = 0;
    v4 = 0;
    switch(*((_BYTE *)this + 32))
    {
      case 1:
        break;
      case 3:
        v4 = (void *)*this;
        if (*this)
          v3 = strlen(*this);
        else
          v3 = 0;
        break;
      case 4:
        v8 = (*this)[23];
        if (v8 >= 0)
          v4 = (void *)*this;
        else
          v4 = *(void **)*this;
        if (v8 >= 0)
          v3 = v8 & 0x7F;
        else
          v3 = *((_QWORD *)*this + 1);
        break;
      case 5:
        v4 = (void *)*this;
        v3 = (unint64_t)this[1];
        break;
      default:
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    llvm::Twine::toVector((uint64_t)this, (uint64_t)&v9);
    v4 = v9;
    v3 = v10;
  }
  llvm::sys::path::root_directory((unint64_t)v4, v3, v2);
  v6 = v5;
  if (v9 != v11)
    free(v9);
  return v6 != 0;
}

BOOL llvm::sys::path::has_root_path(const char **this, const llvm::Twine *a2)
{
  unsigned int v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  void *v9;
  __int128 v10;
  _QWORD v11[17];

  v2 = a2;
  v11[16] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = xmmword_1C85F20B0;
  if (*((_BYTE *)this + 33) == 1)
  {
    v3 = 0;
    v4 = 0;
    switch(*((_BYTE *)this + 32))
    {
      case 1:
        break;
      case 3:
        v4 = (void *)*this;
        if (*this)
          v3 = strlen(*this);
        else
          v3 = 0;
        break;
      case 4:
        v8 = (*this)[23];
        if (v8 >= 0)
          v4 = (void *)*this;
        else
          v4 = *(void **)*this;
        if (v8 >= 0)
          v3 = v8 & 0x7F;
        else
          v3 = *((_QWORD *)*this + 1);
        break;
      case 5:
        v4 = (void *)*this;
        v3 = (unint64_t)this[1];
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    llvm::Twine::toVector((uint64_t)this, (uint64_t)&v9);
    v4 = v9;
    v3 = v10;
  }
  llvm::sys::path::root_path((unint64_t)v4, v3, v2);
  v6 = v5;
  if (v9 != v11)
    free(v9);
  return v6 != 0;
}

BOOL llvm::sys::path::has_relative_path(const char **this, const llvm::Twine *a2)
{
  unsigned int v2;
  unint64_t v3;
  void *v4;
  unint64_t v5;
  unint64_t v6;
  char v8;
  void *v9;
  __int128 v10;
  _QWORD v11[17];

  v2 = a2;
  v11[16] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = xmmword_1C85F20B0;
  if (*((_BYTE *)this + 33) == 1)
  {
    v3 = 0;
    v4 = 0;
    switch(*((_BYTE *)this + 32))
    {
      case 1:
        break;
      case 3:
        v4 = (void *)*this;
        if (*this)
          v3 = strlen(*this);
        else
          v3 = 0;
        break;
      case 4:
        v8 = (*this)[23];
        if (v8 >= 0)
          v4 = (void *)*this;
        else
          v4 = *(void **)*this;
        if (v8 >= 0)
          v3 = v8 & 0x7F;
        else
          v3 = *((_QWORD *)*this + 1);
        break;
      case 5:
        v4 = (void *)*this;
        v3 = (unint64_t)this[1];
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    llvm::Twine::toVector((uint64_t)this, (uint64_t)&v9);
    v4 = v9;
    v3 = v10;
  }
  llvm::sys::path::root_path((unint64_t)v4, v3, v2);
  v6 = v5;
  if (v9 != v11)
    free(v9);
  return v3 > v6;
}

BOOL llvm::sys::path::has_filename(const char **this, const llvm::Twine *a2)
{
  int v2;
  size_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  const char *v9;
  char v10;
  _QWORD v11[3];
  uint64_t v12;
  size_t v13;
  int v14;
  _QWORD *v15;
  __int128 v16;
  _QWORD v17[17];

  v2 = (int)a2;
  v17[16] = *MEMORY[0x1E0C80C00];
  v15 = v17;
  v16 = xmmword_1C85F20B0;
  if (*((_BYTE *)this + 33) == 1)
  {
    v4 = 0;
    v5 = 0;
    v6 = v17;
    switch(*((_BYTE *)this + 32))
    {
      case 1:
        break;
      case 3:
        v5 = *this;
        if (*this)
          v4 = strlen(*this);
        else
          v4 = 0;
        goto LABEL_6;
      case 4:
        v9 = *this;
        v10 = v9[23];
        if (v10 >= 0)
          v5 = v9;
        else
          v5 = *(const char **)v9;
        if (v10 >= 0)
          v4 = v10 & 0x7F;
        else
          v4 = *((_QWORD *)v9 + 1);
        goto LABEL_6;
      case 5:
        v5 = *this;
        v4 = (size_t)this[1];
LABEL_6:
        v6 = v17;
        break;
      default:
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    llvm::Twine::toVector((uint64_t)this, (uint64_t)&v15);
    v6 = v15;
    v4 = v16;
    v5 = (const char *)v15;
  }
  v11[2] = 0;
  v12 = 0;
  v11[0] = v5;
  v11[1] = v4;
  v13 = v4;
  v14 = v2;
  llvm::sys::path::reverse_iterator::operator++((uint64_t)v11);
  v7 = v12;
  if (v6 != v17)
    free(v6);
  return v7 != 0;
}

BOOL llvm::sys::path::has_parent_path(const char **this, const llvm::Twine *a2)
{
  unsigned int v2;
  unint64_t v3;
  char *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  char v10;
  _QWORD *v11;
  __int128 v12;
  _QWORD v13[17];

  v2 = a2;
  v13[16] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = xmmword_1C85F20B0;
  if (*((_BYTE *)this + 33) == 1)
  {
    v3 = 0;
    v4 = 0;
    v5 = v13;
    switch(*((_BYTE *)this + 32))
    {
      case 1:
        break;
      case 3:
        v4 = (char *)*this;
        if (*this)
          v3 = strlen(*this);
        else
          v3 = 0;
        goto LABEL_6;
      case 4:
        v10 = (*this)[23];
        if (v10 >= 0)
          v4 = (char *)*this;
        else
          v4 = *(char **)*this;
        if (v10 >= 0)
          v3 = v10 & 0x7F;
        else
          v3 = *((_QWORD *)*this + 1);
        goto LABEL_6;
      case 5:
        v4 = (char *)*this;
        v3 = (unint64_t)this[1];
LABEL_6:
        v5 = v13;
        break;
      default:
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    llvm::Twine::toVector((uint64_t)this, (uint64_t)&v11);
    v5 = v11;
    v3 = v12;
    v4 = (char *)v11;
  }
  v6 = sub_1C5E7BE8C((unsigned __int8 *)v4, v3, v2);
  if (v5 != v13)
    free(v5);
  if (v3 >= v6)
    v7 = v6;
  else
    v7 = v3;
  return v6 != -1 && v7 != 0;
}

BOOL llvm::sys::path::has_stem(const char **this, const llvm::Twine *a2)
{
  int v2;
  uint64_t v3;
  const char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  _QWORD *v10;
  __int128 v11;
  _QWORD v12[17];

  v2 = (int)a2;
  v12[16] = *MEMORY[0x1E0C80C00];
  v10 = v12;
  v11 = xmmword_1C85F20B0;
  if (*((_BYTE *)this + 33) == 1)
  {
    v3 = 0;
    v4 = 0;
    v5 = v12;
    switch(*((_BYTE *)this + 32))
    {
      case 1:
        break;
      case 3:
        v4 = *this;
        if (*this)
          v3 = strlen(*this);
        else
          v3 = 0;
        goto LABEL_6;
      case 4:
        v9 = (*this)[23];
        if (v9 >= 0)
          v4 = *this;
        else
          v4 = *(const char **)*this;
        if (v9 >= 0)
          v3 = v9 & 0x7F;
        else
          v3 = *((_QWORD *)*this + 1);
        goto LABEL_6;
      case 5:
        v4 = *this;
        v3 = (uint64_t)this[1];
LABEL_6:
        v5 = v12;
        break;
      default:
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    llvm::Twine::toVector((uint64_t)this, (uint64_t)&v10);
    v5 = v10;
    v3 = v11;
    v4 = (const char *)v10;
  }
  llvm::sys::path::stem((uint64_t)v4, v3, v2);
  v7 = v6;
  if (v5 != v12)
    free(v5);
  return v7 != 0;
}

uint64_t llvm::sys::path::is_absolute(const char **this, const llvm::Twine *a2)
{
  size_t v3;
  const char *v4;
  _BOOL4 has_root_directory;
  _BOOL4 has_root_name;
  char v8;
  _BOOL4 v9;
  _BOOL4 v10;
  const char *v11;
  size_t v12;
  __int16 v13;
  void *v14;
  __int128 v15;
  _QWORD v16[17];

  v16[16] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = xmmword_1C85F20B0;
  if (*((_BYTE *)this + 33) == 1)
  {
    v3 = 0;
    v4 = 0;
    switch(*((_BYTE *)this + 32))
    {
      case 1:
        break;
      case 3:
        v4 = *this;
        if (*this)
          v3 = strlen(*this);
        else
          v3 = 0;
        break;
      case 4:
        v8 = (*this)[23];
        if (v8 >= 0)
          v4 = *this;
        else
          v4 = *(const char **)*this;
        if (v8 >= 0)
          v3 = v8 & 0x7F;
        else
          v3 = *((_QWORD *)*this + 1);
        break;
      case 5:
        v4 = *this;
        v3 = (size_t)this[1];
        break;
      default:
        goto LABEL_11;
    }
  }
  else
  {
LABEL_11:
    llvm::Twine::toVector((uint64_t)this, (uint64_t)&v14);
    v4 = (const char *)v14;
    v3 = v15;
  }
  v13 = 261;
  v11 = v4;
  v12 = v3;
  has_root_directory = llvm::sys::path::has_root_directory(&v11, a2);
  if (a2 >= 2)
  {
    v13 = 261;
    v11 = v4;
    v12 = v3;
    v9 = has_root_directory;
    has_root_name = llvm::sys::path::has_root_name(&v11, a2);
    has_root_directory = v9;
  }
  else
  {
    has_root_name = 1;
  }
  if (v14 != v16)
  {
    v10 = has_root_directory;
    free(v14);
    has_root_directory = v10;
  }
  return has_root_directory & has_root_name;
}

uint64_t llvm::sys::path::is_absolute_gnu(const char **this, const llvm::Twine *a2)
{
  unsigned int v2;
  int v4;
  _QWORD *v5;
  const char *v6;
  size_t v7;
  int v8;
  uint64_t v9;
  const char *v10;
  char v11;
  size_t v12;
  _QWORD *v14;
  __int128 v15;
  _QWORD v16[17];

  v2 = a2;
  v16[16] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = xmmword_1C85F20B0;
  if (*((_BYTE *)this + 33) == 1)
  {
    v4 = *((unsigned __int8 *)this + 32) - 1;
    v5 = v16;
    switch(v4)
    {
      case 0:
        goto LABEL_24;
      case 2:
        v6 = *this;
        if (!*this)
        {
          v5 = v16;
          goto LABEL_24;
        }
        v7 = strlen(*this);
LABEL_6:
        v5 = v16;
        if (!v7)
          goto LABEL_24;
        goto LABEL_9;
      case 3:
        v10 = *this;
        v11 = v10[23];
        v12 = *((_QWORD *)v10 + 1);
        if (v11 >= 0)
          v6 = v10;
        else
          v6 = *(const char **)v10;
        v7 = v11 & 0x7F;
        if (v11 < 0)
          v7 = v12;
        goto LABEL_6;
      case 4:
        v6 = *this;
        v7 = (size_t)this[1];
        goto LABEL_6;
      default:
        break;
    }
  }
  llvm::Twine::toVector((uint64_t)this, (uint64_t)&v14);
  v5 = v14;
  v7 = v15;
  v6 = (const char *)v14;
  if ((_QWORD)v15)
  {
LABEL_9:
    v8 = *(unsigned __int8 *)v6;
    if (v8 == 47 || v2 >= 2 && v8 == 92 || v2 >= 2 && v7 >= 2 && *v6 && v6[1] == 58)
    {
      v9 = 1;
      goto LABEL_25;
    }
  }
LABEL_24:
  v9 = 0;
LABEL_25:
  if (v5 != v16)
    free(v5);
  return v9;
}

unsigned __int8 *llvm::sys::path::remove_leading_dotslash(unsigned __int8 *result, unint64_t a2, unsigned int a3)
{
  int v3;
  unsigned __int8 *v4;
  int v5;
  BOOL v6;
  _BOOL4 v7;
  unint64_t v9;
  BOOL v10;
  _BOOL4 v11;

  if (a2 >= 3)
  {
    v3 = *result;
    v4 = result;
    while (v3 == 46)
    {
      v5 = v4[1];
      v6 = a3 > 1 && v5 == 92;
      v7 = v6;
      if (v5 != 47 && !v7)
        break;
      result = v4 + 2;
      v9 = a2 - 2;
      while (1)
      {
        v3 = *result;
        v10 = a3 > 1 && v3 == 92;
        v11 = v10;
        if (v3 != 47 && !v11)
          break;
        ++result;
        if (!--v9)
          return &v4[a2];
      }
      v4 = result;
      a2 = v9;
      if (v9 <= 2)
        return result;
    }
    return v4;
  }
  return result;
}

uint64_t llvm::sys::path::remove_dots(unsigned __int8 **a1, int a2, unsigned int a3)
{
  unsigned int v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  int v17;
  _BYTE *v18;
  uint64_t first_of;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  BOOL v26;
  BOOL v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  unsigned int v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  const void *v37;
  size_t v38;
  uint64_t v39;
  char *v41;
  char *v42;
  size_t v43;
  const void *v44;
  uint64_t v45;
  void *__src;
  _QWORD *v47;
  unsigned __int8 *v48;
  unint64_t v49;
  void *v50;
  __int128 v51;
  _BYTE v52[256];
  void *v53;
  uint64_t v54;
  _QWORD v55[34];

  v55[32] = *MEMORY[0x1E0C80C00];
  if (a3 <= 1)
    v6 = 1;
  else
    v6 = a3;
  v7 = *a1;
  v8 = (unint64_t)a1[1];
  v48 = v7;
  v49 = v8;
  v53 = v55;
  v54 = 0x1000000000;
  v9 = llvm::sys::path::root_path((unint64_t)v7, v8, v6);
  v11 = v10;
  if (v10)
  {
    if (v8 >= v10)
      v12 = v10;
    else
      v12 = v8;
    v7 += v12;
    v8 -= v12;
    v48 = v7;
    v49 = v8;
  }
  if (!v8)
  {
    v39 = 0;
    goto LABEL_73;
  }
  __src = (void *)v9;
  v47 = a1;
  v13 = 0;
  v14 = a3 > 1;
  if (a3 <= 1)
    v15 = 1;
  else
    v15 = 2;
  if (v14)
    v16 = "\\/";
  else
    v16 = "/";
  if (v6 == 3)
    v17 = 92;
  else
    v17 = 47;
  do
  {
    while (1)
    {
      v18 = v7;
      first_of = llvm::StringRef::find_first_of(&v48, (unsigned __int8 *)v16, v15, 0);
      v20 = first_of == -1 ? v8 : first_of;
      v21 = v8 >= v20 ? v20 : v8;
      v22 = v8 - v21;
      v7 += v21;
      v48 = v7;
      v49 = v8 - v21;
      if (v8 > v20)
        break;
      v8 -= v21;
      if (v21)
        goto LABEL_35;
LABEL_37:
      v13 = 1;
      if (!v8)
        goto LABEL_58;
    }
    v24 = *v7++;
    v23 = v24;
    v8 = v22 - 1;
    v48 = v7;
    v49 = v22 - 1;
    v26 = v22 == 1 || v23 != v17;
    v13 |= v26;
    if (!v21)
      goto LABEL_37;
LABEL_35:
    if (v21 == 1)
    {
      if (*v18 == 46)
        goto LABEL_37;
LABEL_44:
      v28 = v54;
      if (v54 >= (unint64_t)HIDWORD(v54))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, (uint64_t)v55, v54 + 1, 16);
        v28 = v54;
      }
      v29 = (char *)v53 + 16 * v28;
      *v29 = v18;
      v29[1] = v21;
      v30 = v54 + 1;
      goto LABEL_47;
    }
    v27 = v21 != 2 || a2 == 0;
    if (v27 || *(_WORD *)v18 != 11822)
      goto LABEL_44;
    v31 = v54;
    if (!(_DWORD)v54
      || (v32 = (char *)v53 + 16 * v54, *((_QWORD *)v32 - 1) == 2) && **((_WORD **)v32 - 2) == 11822)
    {
      if (v11)
        goto LABEL_37;
      if (v54 >= HIDWORD(v54))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v53, (uint64_t)v55, v54 + 1, 16);
        v31 = v54;
      }
      v33 = (char *)v53 + 16 * v31;
      *v33 = v18;
      v33[1] = 2;
      v30 = v54 + 1;
    }
    else
    {
      v30 = v54 - 1;
    }
    v13 = 1;
LABEL_47:
    LODWORD(v54) = v30;
  }
  while (v8);
LABEL_58:
  if ((v13 & 1) == 0)
  {
    v39 = 0;
    goto LABEL_73;
  }
  v50 = v52;
  v51 = xmmword_1C64638F0;
  if (v11 >= 0x101)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v50, v52, v11, 1);
    v34 = v51;
  }
  else
  {
    v34 = 0;
  }
  if (v11)
  {
    memcpy((char *)v50 + v34, __src, v11);
    v34 = v51;
  }
  v35 = v34 + v11;
  *(_QWORD *)&v51 = v35;
  if ((_DWORD)v54)
  {
    v37 = *(const void **)v53;
    v36 = *((_QWORD *)v53 + 1);
    if (*((_QWORD *)&v51 + 1) < v36 + v35)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v50, v52, v36 + v35, 1);
      v35 = v51;
      if (v36)
      {
LABEL_66:
        memcpy((char *)v50 + v35, v37, v36);
        v35 = v51;
      }
    }
    else if (v36)
    {
      goto LABEL_66;
    }
    v38 = v35 + v36;
    *(_QWORD *)&v51 = v38;
    if ((_DWORD)v54 != 1)
    {
      v41 = (char *)v53 + 16 * v54;
      v42 = (char *)v53 + 16;
      while (1)
      {
        v44 = *(const void **)v42;
        v43 = *((_QWORD *)v42 + 1);
        if (v38 + 1 > *((_QWORD *)&v51 + 1))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v50, v52, v38 + 1, 1);
          v38 = v51;
        }
        *((_BYTE *)v50 + v38) = v17;
        v45 = v51 + 1;
        *(_QWORD *)&v51 = v45;
        if (*((_QWORD *)&v51 + 1) < v45 + v43)
          break;
        if (v43)
          goto LABEL_81;
LABEL_82:
        v38 = v45 + v43;
        *(_QWORD *)&v51 = v38;
        v42 += 16;
        if (v42 == v41)
          goto LABEL_68;
      }
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v50, v52, v45 + v43, 1);
      v45 = v51;
      if (!v43)
        goto LABEL_82;
LABEL_81:
      memcpy((char *)v50 + v45, v44, v43);
      v45 = v51;
      goto LABEL_82;
    }
  }
LABEL_68:
  sub_1C5DF216C(v47, &v50);
  if (v50 != v52)
    free(v50);
  v39 = 1;
LABEL_73:
  if (v53 != v55)
    free(v53);
  return v39;
}

uint64_t llvm::sys::fs::getUniqueID(unsigned __int8 *a1, _QWORD *a2)
{
  const char *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  stat v11;
  void *v12;
  __int128 v13;
  _QWORD v14[17];

  v14[16] = *MEMORY[0x1E0C80C00];
  v9 = 0;
  v10 = 0;
  v12 = v14;
  v13 = xmmword_1C85F20B0;
  v3 = (const char *)llvm::Twine::toNullTerminatedStringRef(a1, (uint64_t)&v12);
  v4 = stat(v3, &v11);
  v5 = sub_1C5E7F828(v4, &v11.st_dev, (uint64_t)&v8);
  if (v12 != v14)
    free(v12);
  if (!(_DWORD)v5)
  {
    v6 = v10;
    *a2 = v9;
    a2[1] = v6;
    std::system_category();
    return 0;
  }
  return v5;
}

uint64_t llvm::sys::fs::status(llvm::sys::fs *this, const llvm::Twine *a2, llvm::sys::fs::file_status *a3)
{
  int v3;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  int v9[36];
  void *v10;
  __int128 v11;
  _QWORD v12[17];

  v3 = (int)a3;
  v12[16] = *MEMORY[0x1E0C80C00];
  v10 = v12;
  v11 = xmmword_1C85F20B0;
  v5 = llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)this, (uint64_t)&v10);
  if (v3)
    v6 = MEMORY[0x1E0C854D8](v5, v9);
  else
    v6 = MEMORY[0x1E0C83C40](v5, v9);
  v7 = sub_1C5E7F828(v6, v9, (uint64_t)a2);
  if (v10 != v12)
    free(v10);
  return v7;
}

uint64_t llvm::sys::fs::file_status::getUniqueID(llvm::sys::fs::file_status *this)
{
  return *((int *)this + 12);
}

void llvm::sys::fs::createUniquePath(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  __int16 v9;
  _QWORD *v10;
  __int16 v11;
  _QWORD *v12;
  __int16 v13;
  _QWORD *v14[4];
  __int16 v15;
  void *v16;
  __int128 v17;
  _WORD v18[64];
  _QWORD *v19;
  __int128 v20;
  _QWORD v21[17];

  v21[16] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v20 = xmmword_1C85F20B0;
  llvm::Twine::toVector(a1, (uint64_t)&v19);
  if (a3)
  {
    v18[4] = 261;
    v16 = v19;
    *(_QWORD *)&v17 = v20;
    if ((llvm::sys::path::is_absolute((const char **)&v16, 0) & 1) == 0)
    {
      v16 = v18;
      v17 = xmmword_1C85F20B0;
      llvm::sys::path::system_temp_directory(1, &v16);
      v15 = 261;
      v14[0] = v19;
      v14[1] = (_QWORD *)v20;
      v13 = 257;
      v11 = 257;
      v9 = 257;
      llvm::sys::path::append(&v16, 0, v14, &v12, &v10, &v8);
      sub_1C5DF216C(&v19, &v16);
      if (v16 != v18)
        free(v16);
    }
  }
  sub_1C50502AC((uint64_t)a2, (uint64_t)&v19);
  v5 = a2[1];
  if ((unint64_t)(v5 + 1) > a2[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v5 + 1, 1);
    v5 = a2[1];
  }
  *(_BYTE *)(*a2 + v5) = 0;
  v6 = v20;
  if ((_DWORD)v20)
  {
    v7 = 0;
    do
    {
      if (*((_BYTE *)v19 + v7) == 37)
        *(_BYTE *)(*a2 + v7) = a0123456789abcd_5[arc4random() & 0xF];
      ++v7;
    }
    while (v6 != v7);
  }
  if (v19 != v21)
    free(v19);
}

unint64_t llvm::sys::path::system_temp_directory(int a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;

  a2[1] = 0;
  if (a1)
  {
    v4 = 0;
    while (1)
    {
      v5 = getenv(off_1E81A7D30[v4]);
      if (v5)
        break;
      if (++v4 == 4)
        goto LABEL_5;
    }
    v10 = v5;
    result = strlen(v5);
    v11 = result;
    if (a2[2] < result)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, result, 1);
      v12 = a2[1];
    }
    else
    {
      v12 = 0;
      v13 = 0;
      if (!result)
      {
LABEL_12:
        v9 = v13 + v11;
        goto LABEL_13;
      }
    }
    result = (unint64_t)memcpy((void *)(*a2 + v12), v10, v11);
    v13 = a2[1];
    goto LABEL_12;
  }
LABEL_5:
  result = sub_1C5E80994(a1, (uint64_t)a2);
  if ((result & 1) != 0)
    return result;
  v7 = a2[1];
  if (a2[2] < (unint64_t)(v7 + 9))
  {
    result = (unint64_t)llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v7 + 9, 1);
    v7 = a2[1];
  }
  v8 = *a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)"/var/tmp/";
  *(_BYTE *)(v8 + 8) = 47;
  v9 = a2[1] + 9;
LABEL_13:
  a2[1] = v9;
  return result;
}

unint64_t sub_1C5E7D894(uint64_t a1, int *a2, _QWORD *a3, int a4, int a5, int a6, uint64_t a7)
{
  int v14;
  _BYTE *v15;
  char v16;
  uint64_t directory;
  const std::error_category *v18;
  _BYTE *v19;
  char v20;
  const std::error_category *v21;
  const std::error_category *v22;
  const std::error_category *v23;
  _BYTE *v24;
  char v25;
  const std::error_category *v26;
  const std::error_category *v27;
  unint64_t v28;
  unsigned __int8 v30[32];
  char v31;
  char v32;

  std::system_category();
  v14 = 129;
  while (1)
  {
    llvm::sys::fs::createUniquePath(a1, a3, a4);
    if (!a5)
      break;
    if (a5 == 2)
    {
      v15 = (_BYTE *)*a3;
      v16 = 1;
      v32 = 1;
      if (*v15)
      {
        *(_QWORD *)v30 = v15;
        v16 = 3;
      }
      v31 = v16;
      directory = llvm::sys::fs::access(v30, 0);
      if (std::generic_category() == v18 && (_DWORD)directory == 2)
        goto LABEL_24;
      if ((_DWORD)directory)
        goto LABEL_23;
    }
    else
    {
      v24 = (_BYTE *)*a3;
      v25 = 1;
      v32 = 1;
      if (*v24)
      {
        *(_QWORD *)v30 = v24;
        v25 = 3;
      }
      v31 = v25;
      directory = llvm::sys::fs::openFile(v30, a2, 1, 3, a6, a7);
      if (!(_DWORD)directory)
        goto LABEL_24;
      v22 = v26;
      v27 = std::generic_category();
      if ((_DWORD)directory != 17 || v27 != v22)
      {
        v23 = std::generic_category();
        if ((_DWORD)directory != 13)
          goto LABEL_23;
LABEL_21:
        if (v23 != v22)
          goto LABEL_23;
      }
    }
    if (--v14 <= 1)
    {
LABEL_23:
      v28 = directory & 0xFFFFFFFF00000000;
      return v28 | directory;
    }
  }
  v19 = (_BYTE *)*a3;
  v20 = 1;
  v32 = 1;
  if (*v19)
  {
    *(_QWORD *)v30 = v19;
    v20 = 3;
  }
  v31 = v20;
  directory = llvm::sys::fs::create_directory(v30, 0, 0x1F8u);
  if ((_DWORD)directory)
  {
    v22 = v21;
    v23 = std::generic_category();
    if ((_DWORD)directory != 17)
      goto LABEL_23;
    goto LABEL_21;
  }
LABEL_24:
  std::system_category();
  LODWORD(directory) = 0;
  v28 = 0;
  return v28 | directory;
}

unint64_t sub_1C5E7DA50(uint64_t *a1, __int128 *a2, uint64_t a3, int *a4, _QWORD *a5, int a6, int a7)
{
  const char *v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t *v15;
  __int16 v16;
  __int128 *v17;
  _QWORD *v18;
  char v19;
  unint64_t v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  __int16 v30;
  _QWORD *v31;
  char v32;
  char v33;
  void *v34;
  __int128 v35;
  _QWORD v36[17];

  v11 = "-%%%%%%.";
  v36[16] = *MEMORY[0x1E0C80C00];
  if (!a3)
    v11 = "-%%%%%%";
  v12 = *((unsigned __int8 *)a1 + 32);
  if (v12 == 1)
  {
    if (*v11)
      v12 = 3;
    else
      v12 = 1;
    *(_QWORD *)&v23 = v11;
    LOBYTE(v25) = v12;
    v13 = 1;
    goto LABEL_15;
  }
  if (!*((_BYTE *)a1 + 32))
  {
    LOWORD(v25) = 256;
    goto LABEL_18;
  }
  if (*v11)
  {
    v14 = a1[1];
    if (*((_BYTE *)a1 + 33) == 1)
    {
      v15 = (uint64_t *)*a1;
    }
    else
    {
      v12 = 2;
      v15 = a1;
    }
    *(_QWORD *)&v23 = v15;
    *((_QWORD *)&v23 + 1) = v14;
    *(_QWORD *)&v24 = v11;
    LOBYTE(v25) = v12;
    v13 = 3;
LABEL_15:
    BYTE1(v25) = v13;
    goto LABEL_16;
  }
  v22 = *((_OWORD *)a1 + 1);
  v23 = *(_OWORD *)a1;
  v24 = v22;
  v25 = a1[4];
  v12 = v25;
LABEL_16:
  if (v12 == 1)
  {
    v26 = a2;
    v27 = a3;
    v16 = 261;
    goto LABEL_20;
  }
  if (!v12)
  {
LABEL_18:
    v16 = 256;
LABEL_20:
    v30 = v16;
    goto LABEL_26;
  }
  if (BYTE1(v25) != 1)
    LOBYTE(v12) = 2;
  v17 = &v23;
  if (BYTE1(v25) == 1)
    v17 = (__int128 *)v23;
  v26 = v17;
  v27 = *((_QWORD *)&v23 + 1);
  v28 = a2;
  v29 = a3;
  LOBYTE(v30) = v12;
  HIBYTE(v30) = 5;
LABEL_26:
  v34 = v36;
  v35 = xmmword_1C85F20B0;
  v18 = llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)&v26, (uint64_t)&v34);
  v19 = 1;
  v33 = 1;
  if (*(_BYTE *)v18)
  {
    v31 = v18;
    v19 = 3;
  }
  v32 = v19;
  v20 = sub_1C5E7D894((uint64_t)&v31, a4, a5, 1, a6, a7, 384);
  if (v34 != v36)
    free(v34);
  return v20;
}

unint64_t llvm::sys::fs::getPotentiallyUniqueFileName(uint64_t a1, _QWORD *a2)
{
  int v3;

  return sub_1C5E7D894(a1, &v3, a2, 0, 2, 0, 0);
}

unint64_t llvm::sys::fs::getPotentiallyUniqueTempFileName(uint64_t *a1, __int128 *a2, uint64_t a3, _QWORD *a4)
{
  int v5;

  return sub_1C5E7DA50(a1, a2, a3, &v5, a4, 2, 0);
}

void llvm::sys::fs::make_absolute(uint64_t a1, char **a2)
{
  unint64_t v4;
  char *v5;
  BOOL has_root_directory;
  BOOL has_root_name;
  BOOL v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  const char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const char *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  void **v23[4];
  __int16 v24;
  _QWORD *v25[4];
  __int16 v26;
  _QWORD *v27[4];
  __int16 v28;
  _QWORD *v29[4];
  __int16 v30;
  void *v31;
  __int128 v32;
  _WORD v33[64];
  char *v34;
  __int128 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v4 = (unint64_t)a2[1];
  v37 = 261;
  v34 = v5;
  *(_QWORD *)&v35 = v4;
  has_root_directory = llvm::sys::path::has_root_directory((const char **)&v34, 0);
  v37 = 261;
  v34 = v5;
  *(_QWORD *)&v35 = v4;
  has_root_name = llvm::sys::path::has_root_name((const char **)&v34, 0);
  if (!has_root_directory)
  {
    v8 = has_root_name;
    v34 = (char *)&v36;
    v35 = xmmword_1C85F20B0;
    llvm::Twine::toVector(a1, (uint64_t)&v34);
    if (v8)
    {
      v22 = llvm::sys::path::root_name((unint64_t)v5, v4, 0);
      v10 = v9;
      v11 = (_QWORD *)llvm::sys::path::root_directory((unint64_t)v34, v35, 0);
      v13 = v12;
      v14 = v34;
      v15 = v35;
      llvm::sys::path::root_path((unint64_t)v34, v35, 0);
      if (v15 >= v16)
        v17 = v16;
      else
        v17 = v15;
      v18 = &v14[v17];
      v19 = (_QWORD *)(v15 - v17);
      llvm::sys::path::root_path((unint64_t)v5, v4, 0);
      v32 = xmmword_1C85F20B0;
      v31 = v33;
      if (v4 >= v20)
        v21 = v20;
      else
        v21 = v4;
      v30 = 261;
      v29[0] = v22;
      v29[1] = v10;
      v28 = 261;
      v27[0] = v11;
      v27[1] = v13;
      v26 = 261;
      v25[0] = v18;
      v25[1] = v19;
      v24 = 261;
      v23[0] = (void **)&v5[v21];
      v23[1] = (void **)(v4 - v21);
      llvm::sys::path::append(&v31, 0, v29, v27, v25, v23);
      sub_1C5DF216C(a2, &v31);
      if (v31 != v33)
        free(v31);
    }
    else
    {
      v33[4] = 261;
      v31 = v5;
      *(_QWORD *)&v32 = v4;
      v30 = 257;
      v28 = 257;
      v26 = 257;
      llvm::sys::path::append(&v34, 0, (_QWORD **)&v31, v29, v27, (void ***)v25);
      sub_1C5DF216C(a2, &v34);
    }
    if (v34 != (char *)&v36)
      free(v34);
  }
}

unint64_t llvm::sys::fs::make_absolute(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  __int16 v9;
  void *v10;
  __int128 v11;
  _WORD v12[64];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12[4] = 261;
  v2 = *(_QWORD *)(a1 + 8);
  v10 = *(void **)a1;
  *(_QWORD *)&v11 = v2;
  if (llvm::sys::path::is_absolute((const char **)&v10, 0))
  {
    std::system_category();
    v3 = 0;
    v4 = 0;
  }
  else
  {
    v10 = v12;
    v11 = xmmword_1C85F20B0;
    v6 = llvm::sys::fs::current_path((uint64_t)&v10);
    v7 = v6;
    if ((_DWORD)v6)
    {
      v4 = v6;
    }
    else
    {
      v9 = 261;
      v8[0] = v10;
      v8[1] = v11;
      llvm::sys::fs::make_absolute((uint64_t)v8, (char **)a1);
      std::system_category();
      v4 = 0;
    }
    v3 = v7 & 0xFFFFFFFF00000000;
    if (v10 != v12)
      free(v10);
  }
  return v4 | v3;
}

uint64_t llvm::sys::fs::current_path(uint64_t a1)
{
  char *v2;
  const char *v3;
  char v4;
  char v5;
  const char *v6;
  int v7;
  int v8;
  const char *v9;
  int v10;
  int v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  size_t v16;
  size_t v17;
  uint64_t v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  char v22;
  char v23;
  char *v24;
  char v25;
  char v26;
  _BYTE v27[48];
  int v28;
  uint64_t v29;
  _BYTE v30[48];
  int v31;
  uint64_t v32;
  stat v33;
  _QWORD *v34;
  __int128 v35;
  _QWORD v36[17];

  v36[16] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = 0;
  v2 = getenv("PWD");
  v31 = 0;
  v32 = 0;
  v28 = 0;
  v29 = 0;
  if (v2)
  {
    v3 = v2;
    v4 = 1;
    v26 = 1;
    if (*v2)
    {
      v24 = v2;
      v4 = 3;
    }
    v25 = v4;
    if (llvm::sys::path::is_absolute((const char **)&v24, 0))
    {
      v5 = 1;
      v23 = 1;
      if (*v3)
      {
        v21 = v3;
        v5 = 3;
      }
      v22 = v5;
      v34 = v36;
      v35 = xmmword_1C85F20B0;
      v6 = (const char *)llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)&v21, (uint64_t)&v34);
      v7 = stat(v6, &v33);
      v8 = sub_1C5E7F828(v7, &v33.st_dev, (uint64_t)v30);
      if (v34 != v36)
        free(v34);
      if (!v8)
      {
        v19 = ".";
        v20 = 259;
        v34 = v36;
        v35 = xmmword_1C85F20B0;
        v9 = (const char *)llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)&v19, (uint64_t)&v34);
        v10 = stat(v9, &v33);
        v11 = sub_1C5E7F828(v10, &v33.st_dev, (uint64_t)v27);
        if (v34 != v36)
          free(v34);
        if (!v11 && v31 == v28 && v32 == v29)
        {
          v16 = strlen(v3);
          v17 = v16;
          v18 = *(_QWORD *)(a1 + 8);
          if (*(_QWORD *)(a1 + 16) < v18 + v16)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod(a1, (void *)(a1 + 24), v18 + v16, 1);
            v18 = *(_QWORD *)(a1 + 8);
            if (!v17)
            {
LABEL_26:
              *(_QWORD *)(a1 + 8) = v18 + v17;
LABEL_18:
              std::system_category();
              return 0;
            }
          }
          else if (!v16)
          {
            goto LABEL_26;
          }
          memcpy((void *)(*(_QWORD *)a1 + v18), v3, v17);
          v18 = *(_QWORD *)(a1 + 8);
          goto LABEL_26;
        }
      }
    }
  }
  v12 = (_QWORD *)a1;
  v13 = 1024;
  while (1)
  {
    sub_1C5050254(v12, v13);
    if (getcwd(*(char **)a1, *(_QWORD *)(a1 + 8)))
    {
      *(_QWORD *)(a1 + 8) = strlen(*(const char **)a1);
      goto LABEL_18;
    }
    if (*__error() != 12)
      break;
    v13 = 2 * *(_QWORD *)(a1 + 16);
    v12 = (_QWORD *)a1;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v14 = *__error();
  std::generic_category();
  return v14;
}

uint64_t llvm::sys::fs::create_directories(unsigned __int8 **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unsigned __int8 *v6;
  uint64_t directory;
  const std::error_category *v8;
  unint64_t v9;
  unint64_t v10;
  signed __int8 v12;
  unsigned __int8 *v13;
  unint64_t v14;
  __int16 v15;
  void *v16;
  __int128 v17;
  _QWORD v18[17];

  v18[16] = *MEMORY[0x1E0C80C00];
  v16 = v18;
  v17 = xmmword_1C85F20B0;
  if (*((_BYTE *)a1 + 33) == 1)
  {
    v5 = 0;
    v6 = 0;
    switch(*((_BYTE *)a1 + 32))
    {
      case 1:
        break;
      case 3:
        v6 = *a1;
        if (*a1)
          v5 = strlen((const char *)*a1);
        else
          v5 = 0;
        break;
      case 4:
        v12 = (*a1)[23];
        if (v12 >= 0)
          v6 = *a1;
        else
          v6 = *(unsigned __int8 **)*a1;
        if (v12 >= 0)
          v5 = v12 & 0x7F;
        else
          v5 = *((_QWORD *)*a1 + 1);
        break;
      case 5:
        v6 = *a1;
        v5 = (unint64_t)a1[1];
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    llvm::Twine::toVector((uint64_t)a1, (uint64_t)&v16);
    v6 = (unsigned __int8 *)v16;
    v5 = v17;
  }
  v15 = 261;
  v13 = v6;
  v14 = v5;
  directory = llvm::sys::fs::create_directory((unsigned __int8 *)&v13, a2, a3);
  if (std::generic_category() == v8 && directory == 2)
  {
    v9 = sub_1C5E7BE8C(v6, v5, 0);
    v10 = v5 >= v9 ? v9 : v5;
    if (v9 != -1)
    {
      if (v10)
      {
        v15 = 261;
        v13 = v6;
        v14 = v10;
        directory = llvm::sys::fs::create_directories(&v13, a2, a3);
        if (!(_DWORD)directory)
        {
          v15 = 261;
          v13 = v6;
          v14 = v5;
          directory = llvm::sys::fs::create_directory((unsigned __int8 *)&v13, a2, a3);
        }
      }
    }
  }
  if (v16 != v18)
    free(v16);
  return directory;
}

uint64_t llvm::sys::fs::create_directory(unsigned __int8 *a1, char a2, mode_t a3)
{
  const char *v5;
  uint64_t v6;
  void *v8;
  __int128 v9;
  _QWORD v10[17];

  v10[16] = *MEMORY[0x1E0C80C00];
  v8 = v10;
  v9 = xmmword_1C85F20B0;
  v5 = (const char *)llvm::Twine::toNullTerminatedStringRef(a1, (uint64_t)&v8);
  if (mkdir(v5, a3) != -1 || *__error() == 17 && (a2 & 1) != 0)
  {
    std::system_category();
    v6 = 0;
  }
  else
  {
    v6 = *__error();
    std::generic_category();
  }
  if (v8 != v10)
    free(v8);
  return v6;
}

unint64_t llvm::sys::fs::copy_file(llvm::sys::fs *this, const llvm::Twine *a2)
{
  int v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  int v6;
  void *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v14;

  v2 = (int)a2;
  v14 = 0;
  v3 = llvm::sys::fs::openFileForRead((unsigned __int8 *)this, &v14, 0, 0);
  v4 = v3;
  if ((_DWORD)v3)
  {
    v5 = v3 & 0xFFFFFFFF00000000;
  }
  else
  {
    v6 = v14;
    v7 = (void *)operator new[]();
    v8 = read(v6, v7, 0x1000uLL);
    v9 = v8;
    if (v8 < 1)
    {
      v12 = 0;
    }
    else
    {
      v10 = v8;
      while (1)
      {
        v11 = write(v2, v7, v10);
        v12 = v11;
        if (v11 < 0)
          break;
        v10 -= v11;
        if (!v10)
        {
          v9 = read(v6, v7, 0x1000uLL);
          v10 = v9;
          if (v9 < 1)
            goto LABEL_11;
        }
      }
      v9 = v10;
    }
LABEL_11:
    MEMORY[0x1CAA32F9C](v7, 0x1000C8077774924);
    if ((v12 | v9) < 0)
    {
      v4 = *__error();
      std::generic_category();
    }
    else
    {
      std::system_category();
      v4 = 0;
    }
    close(v6);
    v5 = 0;
  }
  return v5 | v4;
}

unint64_t llvm::sys::fs::openFileForRead(unsigned __int8 *a1, int *a2, int a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  char __s[1024];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6 = llvm::sys::fs::openFile(a1, a2, 2, 1, a3, 438);
  v7 = v6;
  if (!(_DWORD)v6)
  {
    if (!a4)
      goto LABEL_9;
    a4[1] = 0;
    if (fcntl(*a2, 50, __s) == -1)
      goto LABEL_9;
    v9 = strlen(__s);
    v10 = v9;
    v11 = a4[1];
    if (a4[2] < v11 + v9)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a4, a4 + 3, v11 + v9, 1);
      v11 = a4[1];
      if (!v10)
        goto LABEL_8;
    }
    else if (!v9)
    {
LABEL_8:
      a4[1] = v11 + v10;
LABEL_9:
      std::system_category();
      v8 = 0;
      return v8 | v7;
    }
    memcpy((void *)(*a4 + v11), __s, v10);
    v11 = a4[1];
    goto LABEL_8;
  }
  v8 = v6 & 0xFFFFFFFF00000000;
  return v8 | v7;
}

void llvm::sys::fs::md5_contents(llvm::sys::fs *this@<X0>, uint64_t a2@<X8>)
{
  int v2;
  void *v4;
  int v5;
  uint64_t v6;
  const std::error_category *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (int)this;
  v10 = *MEMORY[0x1E0C80C00];
  v8 = xmmword_1C85F4BB0;
  v9 = 0;
  v4 = operator new(0x1000uLL);
  bzero(v4, 0x1000uLL);
  v5 = read(v2, v4, 0x1000uLL);
  if (v5 >= 1)
  {
    do
    {
      llvm::MD5::update((int *)&v8, (int *)v4, v5);
      v5 = read(v2, v4, 0x1000uLL);
    }
    while (v5 > 0);
  }
  if (v5 < 0)
  {
    v6 = *__error();
    v7 = std::generic_category();
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
  }
  else
  {
    llvm::MD5::final((int *)&v8, (int *)a2);
    *(_BYTE *)(a2 + 16) &= ~1u;
  }
  operator delete(v4);
}

unint64_t llvm::sys::fs::md5_contents@<X0>(llvm::sys::fs *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  uint64_t v5;
  int v6;
  llvm::sys::fs *v7;

  LODWORD(v7) = 0;
  result = llvm::sys::fs::openFileForRead((unsigned __int8 *)this, (int *)&v7, 0, 0);
  if ((_DWORD)result)
  {
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
  }
  else
  {
    v6 = (int)v7;
    llvm::sys::fs::md5_contents((llvm::sys::fs *)v7, a2);
    return close(v6);
  }
  return result;
}

BOOL llvm::sys::fs::status_known(uint64_t a1)
{
  return *(_DWORD *)(a1 + 40) != 0;
}

uint64_t llvm::sys::fs::get_file_type(llvm::sys::fs *this, const llvm::Twine *a2)
{
  _OWORD v3[4];

  memset(v3, 0, 44);
  if (llvm::sys::fs::status(this, (const llvm::Twine *)v3, a2))
    return 0;
  else
    return DWORD2(v3[2]);
}

BOOL llvm::sys::fs::is_directory(uint64_t a1)
{
  return *(_DWORD *)(a1 + 40) == 3;
}

BOOL llvm::sys::fs::is_symlink_file(uint64_t a1)
{
  return *(_DWORD *)(a1 + 40) == 4;
}

unint64_t llvm::sys::fs::is_symlink_file(llvm::sys::fs *this, const llvm::Twine *a2, BOOL *a3)
{
  const char *v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  _OWORD v9[4];
  stat v10;
  void *v11;
  __int128 v12;
  _QWORD v13[17];

  v13[16] = *MEMORY[0x1E0C80C00];
  memset(v9, 0, 44);
  v11 = v13;
  v12 = xmmword_1C85F20B0;
  v4 = (const char *)llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)this, (uint64_t)&v11);
  v5 = lstat(v4, &v10);
  v6 = sub_1C5E7F828(v5, &v10.st_dev, (uint64_t)v9);
  if (v11 != v13)
    free(v11);
  if ((_DWORD)v6)
  {
    v7 = v6;
  }
  else
  {
    *(_BYTE *)a2 = DWORD2(v9[2]) == 4;
    std::system_category();
    v7 = 0;
  }
  return v6 & 0xFFFFFFFF00000000 | v7;
}

BOOL llvm::sys::fs::is_other(uint64_t a1)
{
  return *(_DWORD *)(a1 + 40) > 3u;
}

unint64_t llvm::sys::fs::is_other(llvm::sys::fs *this, const llvm::Twine *a2, BOOL *a3)
{
  const char *v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  _OWORD v9[4];
  stat v10;
  void *v11;
  __int128 v12;
  _QWORD v13[17];

  v13[16] = *MEMORY[0x1E0C80C00];
  memset(v9, 0, 44);
  v11 = v13;
  v12 = xmmword_1C85F20B0;
  v4 = (const char *)llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)this, (uint64_t)&v11);
  v5 = stat(v4, &v10);
  v6 = sub_1C5E7F828(v5, &v10.st_dev, (uint64_t)v9);
  if (v11 != v13)
    free(v11);
  if ((_DWORD)v6)
  {
    v7 = v6;
  }
  else
  {
    *(_BYTE *)a2 = DWORD2(v9[2]) > 3;
    std::system_category();
    v7 = 0;
  }
  return v6 & 0xFFFFFFFF00000000 | v7;
}

void llvm::sys::fs::directory_entry::replace_filename(uint64_t a1, _QWORD **a2, int a3, __int128 *a4)
{
  char v8;
  BOOL v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  size_t v18;
  void *v19;
  __int128 *p_dst;
  size_t v21;
  size_t v22;
  __int128 v23;
  __int128 v24;
  void **v25;
  __int16 v26;
  _QWORD *v27;
  __int16 v28;
  __int128 __dst;
  unint64_t v30;
  __int16 v31;
  void *__src;
  size_t __len[2];
  _QWORD v34[17];

  v34[16] = *MEMORY[0x1E0C80C00];
  v8 = *(_BYTE *)(a1 + 23);
  v9 = v8 < 0;
  if (v8 >= 0)
    v10 = (unsigned __int8 *)a1;
  else
    v10 = *(unsigned __int8 **)a1;
  v11 = v8 & 0x7F;
  if (v9)
    v12 = *(_QWORD *)(a1 + 8);
  else
    v12 = v11;
  v13 = sub_1C5E7BE8C(v10, v12, 0);
  v14 = 0;
  if (v12 >= v13)
    v15 = v13;
  else
    v15 = v12;
  if (v13 == -1)
    v16 = 0;
  else
    v16 = v15;
  if (v13 == -1)
    v17 = 0;
  else
    v17 = v10;
  __src = v34;
  *(_OWORD *)__len = xmmword_1C85F20B0;
  if (v16 >= 0x81)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__src, v34, v16, 1);
    v14 = __len[0];
  }
  else if (!v16)
  {
    goto LABEL_19;
  }
  memcpy((char *)__src + v14, v17, v16);
  v14 = __len[0];
LABEL_19:
  __len[0] = v14 + v16;
  v31 = 257;
  v28 = 257;
  v26 = 257;
  llvm::sys::path::append(&__src, 0, a2, (_QWORD **)&__dst, &v27, &v25);
  v18 = __len[0];
  if (__len[0] >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v19 = __src;
  if (__len[0] >= 0x17)
  {
    v21 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len[0] | 7) != 0x17)
      v21 = __len[0] | 7;
    v22 = v21 + 1;
    p_dst = (__int128 *)operator new(v21 + 1);
    *((_QWORD *)&__dst + 1) = v18;
    v30 = v22 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_26;
  }
  HIBYTE(v30) = __len[0];
  p_dst = &__dst;
  if (__len[0])
LABEL_26:
    memmove(p_dst, v19, v18);
  *((_BYTE *)p_dst + v18) = 0;
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(_OWORD *)a1 = __dst;
  *(_QWORD *)(a1 + 16) = v30;
  *(_DWORD *)(a1 + 24) = a3;
  v23 = *a4;
  v24 = a4[2];
  *(_OWORD *)(a1 + 48) = a4[1];
  *(_OWORD *)(a1 + 64) = v24;
  *(_OWORD *)(a1 + 32) = v23;
  if (__src != v34)
    free(__src);
}

void llvm::sys::fs::getPermissions(llvm::sys::fs *this@<X0>, uint64_t a2@<X8>)
{
  const char *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  int v12;
  stat v13;
  void *v14;
  __int128 v15;
  _QWORD v16[17];

  v16[16] = *MEMORY[0x1E0C80C00];
  v12 = 0xFFFF;
  v14 = v16;
  v15 = xmmword_1C85F20B0;
  v4 = (const char *)llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)this, (uint64_t)&v14);
  v5 = stat(v4, &v13);
  v6 = sub_1C5E7F828(v5, &v13.st_dev, (uint64_t)&v11);
  v8 = v7;
  if (v14 != v16)
    free(v14);
  v9 = *(_BYTE *)(a2 + 16);
  if ((_DWORD)v6)
  {
    v10 = v9 | 1;
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v8;
  }
  else
  {
    v10 = v9 & 0xFE;
    *(_DWORD *)a2 = v12;
  }
  *(_BYTE *)(a2 + 16) = v10;
}

uint64_t llvm::sys::fs::mapped_file_region::const_data(llvm::sys::fs::mapped_file_region *this)
{
  return *((_QWORD *)this + 1);
}

_QWORD *llvm::sys::fs::readNativeFile@<X0>(int a1@<W0>, void *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  size_t v7;
  _QWORD *result;
  uint64_t v9;
  const std::error_category *v10;
  const std::error_category *v11;
  char v12;

  if (a3 >= 0x7FFFFFFF)
    v7 = 0x7FFFFFFFLL;
  else
    v7 = a3;
  do
  {
    *__error() = 0;
    result = (_QWORD *)read(a1, a2, v7);
    if (result != (_QWORD *)-1)
    {
      v12 = *(_BYTE *)(a4 + 8) & 0xFE;
      goto LABEL_10;
    }
  }
  while (*__error() == 4);
  v9 = *__error();
  v10 = std::generic_category();
  if ((_DWORD)v9)
  {
    v11 = v10;
    result = (_QWORD *)operator new();
    *result = &off_1E81A0D28;
    result[1] = v9;
    result[2] = v11;
  }
  else
  {
    result = 0;
  }
  v12 = *(_BYTE *)(a4 + 8) | 1;
LABEL_10:
  *(_BYTE *)(a4 + 8) = v12;
  *(_QWORD *)a4 = result;
  return result;
}

unint64_t llvm::sys::fs::getExecutable@<X0>(llvm::sys::fs *this@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;
  const char *dli_fname;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  Dl_info __s;

  result = dladdr(this, &__s);
  if (!(_DWORD)result)
  {
    a2[23] = 0;
    *a2 = 0;
    return result;
  }
  dli_fname = __s.dli_fname;
  result = strlen(__s.dli_fname);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v6 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    *((_QWORD *)a2 + 1) = v6;
    *((_QWORD *)a2 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)a2 = v9;
    a2 = v9;
  }
  else
  {
    a2[23] = result;
    if (!result)
      goto LABEL_11;
  }
  result = (unint64_t)memmove(a2, dli_fname, v6);
LABEL_11:
  a2[v6] = 0;
  return result;
}

uint64_t llvm::sys::fs::basic_file_status::getLastModificationTime(llvm::sys::fs::basic_file_status *this)
{
  uint64_t v1;

  v1 = *((unsigned int *)this + 5);
  return v1 + 1000 * std::chrono::system_clock::from_time_t(*((_QWORD *)this + 1)).__d_.__rep_;
}

uint64_t llvm::sys::fs::file_status::getLinkCount(llvm::sys::fs::file_status *this)
{
  return *((unsigned __int16 *)this + 26);
}

uint64_t llvm::sys::fs::disk_space@<X0>(llvm::sys::fs *this@<X0>, uint64_t a2@<X8>)
{
  void **v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void *__p[2];
  char v11;
  statfs v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  llvm::Twine::str(this, __p);
  if (v11 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  v5 = statfs((const char *)v4, &v12);
  v6 = v5;
  if (v11 < 0)
  {
    operator delete(__p[0]);
    if (v6)
      goto LABEL_6;
LABEL_8:
    v7 = v12.f_blocks * v12.f_bsize;
    result = v12.f_bfree * v12.f_bsize;
    v9 = v12.f_bavail * v12.f_bsize;
    *(_BYTE *)(a2 + 24) &= ~1u;
    *(_QWORD *)(a2 + 16) = v9;
    goto LABEL_9;
  }
  if (!v5)
    goto LABEL_8;
LABEL_6:
  v7 = *__error();
  result = (uint64_t)std::generic_category();
  *(_BYTE *)(a2 + 24) |= 1u;
LABEL_9:
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = result;
  return result;
}

uint64_t llvm::sys::fs::create_hard_link(llvm::sys::fs *this, const llvm::Twine *a2, const llvm::Twine *a3)
{
  const char *v4;
  const char *v5;
  uint64_t v6;
  void *v8;
  __int128 v9;
  _BYTE v10[128];
  void *v11;
  __int128 v12;
  _QWORD v13[17];

  v13[16] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = xmmword_1C85F20B0;
  v8 = v10;
  v9 = xmmword_1C85F20B0;
  v4 = (const char *)llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)a2, (uint64_t)&v11);
  v5 = (const char *)llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)this, (uint64_t)&v8);
  if (link(v5, v4) == -1)
  {
    v6 = *__error();
    std::generic_category();
  }
  else
  {
    std::system_category();
    v6 = 0;
  }
  if (v8 != v10)
    free(v8);
  if (v11 != v13)
    free(v11);
  return v6;
}

uint64_t llvm::sys::fs::remove(llvm::sys::fs *this, const llvm::Twine *a2)
{
  char v2;
  const std::__fs::filesystem::path *v3;
  std::error_code *v4;
  unsigned int v5;
  int v6;
  stat v8;
  void *v9;
  __int128 v10;
  _QWORD v11[17];

  v2 = (char)a2;
  v11[16] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = xmmword_1C85F20B0;
  v3 = (const std::__fs::filesystem::path *)llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)this, (uint64_t)&v9);
  if (lstat((const char *)v3, &v8))
  {
    if (*__error() != 2 || (v2 & 1) == 0)
      goto LABEL_4;
LABEL_11:
    std::system_category();
    v5 = 0;
    goto LABEL_14;
  }
  v6 = v8.st_mode & 0xF000;
  if (v6 != 0x4000 && v6 != 0x8000 && v6 != 40960)
  {
    v5 = 1;
    goto LABEL_13;
  }
  if (remove(v3, v4) != -1 || *__error() == 2 && (v2 & 1) != 0)
    goto LABEL_11;
LABEL_4:
  v5 = *__error();
LABEL_13:
  std::generic_category();
LABEL_14:
  if (v9 != v11)
    free(v9);
  return v5;
}

uint64_t llvm::sys::fs::is_local(llvm::sys::fs *this, const llvm::Twine *a2, BOOL *a3)
{
  void **v4;
  int v5;
  int v6;
  uint64_t v7;
  void *__p[2];
  char v10;
  statfs v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  llvm::Twine::str(this, __p);
  if (v10 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  v5 = statfs((const char *)v4, &v11);
  v6 = v5;
  if (v10 < 0)
  {
    operator delete(__p[0]);
    if (v6)
      goto LABEL_6;
LABEL_8:
    *(_BYTE *)a2 = (v11.f_flags & 0x1000) != 0;
    std::system_category();
    return 0;
  }
  if (!v5)
    goto LABEL_8;
LABEL_6:
  v7 = *__error();
  std::generic_category();
  return v7;
}

uint64_t llvm::sys::fs::is_local(llvm::sys::fs *this, BOOL *a2, BOOL *a3)
{
  uint64_t v4;
  statfs v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (fstatfs((int)this, &v6))
  {
    v4 = *__error();
    std::generic_category();
  }
  else
  {
    *a2 = (v6.f_flags & 0x1000) != 0;
    std::system_category();
    return 0;
  }
  return v4;
}

uint64_t llvm::sys::fs::access(unsigned __int8 *a1, int a2)
{
  const char *v3;
  const char *v4;
  uint64_t v5;
  stat v7;
  void *v8;
  __int128 v9;
  _QWORD v10[17];

  v10[16] = *MEMORY[0x1E0C80C00];
  v8 = v10;
  v9 = xmmword_1C85F20B0;
  v3 = (const char *)llvm::Twine::toNullTerminatedStringRef(a1, (uint64_t)&v8);
  v4 = v3;
  if (a2)
  {
    if (a2 == 2)
    {
      if (access(v3, 5) != -1)
      {
        if (stat(v4, &v7) || (v7.st_mode & 0xF000) != 0x8000)
        {
          std::generic_category();
          v5 = 13;
          goto LABEL_11;
        }
        goto LABEL_9;
      }
      goto LABEL_10;
    }
    a2 = 2;
  }
  if (access(v3, a2) != -1)
  {
LABEL_9:
    std::system_category();
    v5 = 0;
    goto LABEL_11;
  }
LABEL_10:
  v5 = *__error();
  std::generic_category();
LABEL_11:
  if (v8 != v10)
    free(v8);
  return v5;
}

BOOL llvm::sys::fs::can_execute(llvm::sys::fs *this, const llvm::Twine *a2)
{
  return llvm::sys::fs::access((unsigned __int8 *)this, 2) == 0;
}

BOOL llvm::sys::fs::equivalent(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48) && *(_QWORD *)(a1 + 56) == *(_QWORD *)(a2 + 56);
}

void sub_1C5E7F55C(uint64_t *a1)
{
  uint64_t v1;
  _BYTE *v3;
  _BYTE *v4;
  unint64_t v5;
  unint64_t v6;
  size_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  const char *v14;
  passwd *v15;
  passwd *v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  unint64_t v20;
  _QWORD *v21;
  const char *pw_dir;
  size_t v23;
  size_t v24;
  uint64_t v25;
  void **v26;
  __int16 v27;
  _QWORD *v28;
  __int16 v29;
  _QWORD *v30;
  __int16 v31;
  _QWORD *v32[4];
  __int16 v33;
  _QWORD __dst[2];
  int64_t v35;
  void *v36;
  __int128 v37;
  _QWORD v38[18];

  v38[16] = *MEMORY[0x1E0C80C00];
  v1 = a1[1];
  if (v1)
  {
    v3 = (_BYTE *)*a1;
    if (*(_BYTE *)*a1 == 126)
    {
      v4 = v3 + 1;
      v5 = v1 - 1;
      if (v1 == 1)
      {
LABEL_7:
        v6 = -1;
      }
      else
      {
        v6 = 0;
        while (v4[v6] != 47)
        {
          if (v5 == ++v6)
            goto LABEL_7;
        }
      }
      if (v5 >= v6)
        v7 = v6;
      else
        v7 = v1 - 1;
      if (v5 >= v7 + 1)
        v8 = v7 + 1;
      else
        v8 = v1 - 1;
      v36 = v38;
      v37 = xmmword_1C85F20B0;
      if (!v7)
      {
        if (llvm::sys::path::home_directory(&v36))
        {
          *(_BYTE *)*a1 = *(_BYTE *)v36;
          sub_1C61D49FC(a1, *a1 + 1, (char *)v36 + 1, (char *)v36 + v37);
        }
        goto LABEL_37;
      }
      if (v7 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (v7 >= 0x17)
      {
        v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v7 | 7) != 0x17)
          v10 = v7 | 7;
        v11 = v10 + 1;
        v9 = operator new(v10 + 1);
        __dst[1] = v7;
        v35 = v11 | 0x8000000000000000;
        __dst[0] = v9;
      }
      else
      {
        HIBYTE(v35) = v7;
        v9 = __dst;
      }
      memmove(v9, v3 + 1, v7);
      *((_BYTE *)v9 + v7) = 0;
      v12 = SHIBYTE(v35);
      v13 = (void *)__dst[0];
      if (v35 >= 0)
        v14 = (const char *)__dst;
      else
        v14 = (const char *)__dst[0];
      v15 = getpwnam(v14);
      if (!v15)
      {
LABEL_35:
        if (v12 < 0)
          operator delete(v13);
LABEL_37:
        if (v36 != v38)
          free(v36);
        return;
      }
      v16 = v15;
      v17 = 0;
      v18 = &v4[v8];
      v19 = &v3[v1];
      *(_QWORD *)&v37 = 0;
      v20 = v19 - &v4[v8];
      if (*((_QWORD *)&v37 + 1) < v20)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v36, v38, v20, 1);
        v17 = v37;
      }
      if (v18 != v19)
      {
        memcpy((char *)v36 + v17, v18, v20);
        v17 = v37;
      }
      v21 = (_QWORD *)(v17 + v20);
      *(_QWORD *)&v37 = v17 + v20;
      a1[1] = 0;
      pw_dir = v16->pw_dir;
      v23 = strlen(pw_dir);
      v24 = v23;
      if (a1[2] < v23)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, a1 + 3, v23, 1);
        v25 = a1[1];
      }
      else
      {
        v25 = 0;
        if (!v23)
        {
LABEL_34:
          a1[1] = v25 + v24;
          v33 = 261;
          v32[0] = v36;
          v32[1] = v21;
          v31 = 257;
          v29 = 257;
          v27 = 257;
          llvm::sys::path::append(a1, 0, v32, &v30, &v28, &v26);
          goto LABEL_35;
        }
      }
      memcpy((void *)(*a1 + v25), pw_dir, v24);
      v25 = a1[1];
      v21 = (_QWORD *)v37;
      goto LABEL_34;
    }
  }
}

uint64_t sub_1C5E7F828(int a1, int *a2, uint64_t a3)
{
  uint64_t v4;
  const std::error_category *v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a1)
  {
    v4 = *__error();
    v5 = std::generic_category();
    if (v5 == std::generic_category() && (_DWORD)v4 == 2)
    {
      *(_QWORD *)(a3 + 32) = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_QWORD *)(a3 + 40) = 0xFFFF00000001;
      *(_DWORD *)(a3 + 48) = 0;
      *(_WORD *)(a3 + 52) = 0;
      *(_QWORD *)(a3 + 56) = 0;
      return 2;
    }
    else
    {
      *(_OWORD *)(a3 + 28) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_QWORD *)(a3 + 44) = 0xFFFFLL;
      *(_WORD *)(a3 + 52) = 0;
      *(_QWORD *)(a3 + 56) = 0;
    }
  }
  else
  {
    v7 = *((_QWORD *)a2 + 5);
    v8 = *((_QWORD *)a2 + 7);
    v9 = *((unsigned __int16 *)a2 + 2);
    v10 = v9 & 0xFFF;
    v11 = sub_1C5E81168(v9);
    v12 = *a2;
    v13 = *((_WORD *)a2 + 3);
    v14 = *((_QWORD *)a2 + 1);
    v15 = *((_QWORD *)a2 + 6);
    v16 = *((_QWORD *)a2 + 12);
    v17 = *((_QWORD *)a2 + 2);
    *(_QWORD *)a3 = *((_QWORD *)a2 + 4);
    *(_QWORD *)(a3 + 8) = v15;
    *(_DWORD *)(a3 + 16) = v7;
    *(_DWORD *)(a3 + 20) = v8;
    *(_QWORD *)(a3 + 24) = v17;
    *(_QWORD *)(a3 + 32) = v16;
    *(_DWORD *)(a3 + 40) = v11;
    *(_DWORD *)(a3 + 44) = v10;
    *(_DWORD *)(a3 + 48) = v12;
    *(_WORD *)(a3 + 52) = v13;
    *(_QWORD *)(a3 + 56) = v14;
    std::system_category();
    return 0;
  }
  return v4;
}

uint64_t llvm::sys::fs::status(llvm::sys::fs *this, uint64_t a2, llvm::sys::fs::file_status *a3)
{
  int v4;
  stat v6;

  v4 = fstat((int)this, &v6);
  return sub_1C5E7F828(v4, &v6.st_dev, a2);
}

uint64_t llvm::sys::fs::getUmask(llvm::sys::fs *this)
{
  uint64_t v1;

  v1 = umask(0);
  umask(v1);
  return v1;
}

uint64_t llvm::sys::fs::setPermissions(unsigned __int8 *a1, mode_t a2)
{
  const char *v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  _QWORD v8[17];

  v8[16] = *MEMORY[0x1E0C80C00];
  v6 = v8;
  v7 = xmmword_1C85F20B0;
  v3 = (const char *)llvm::Twine::toNullTerminatedStringRef(a1, (uint64_t)&v6);
  if (chmod(v3, a2))
  {
    v4 = *__error();
    std::generic_category();
  }
  else
  {
    std::system_category();
    v4 = 0;
  }
  if (v6 != v8)
    free(v6);
  return v4;
}

uint64_t llvm::sys::fs::setPermissions(int a1, mode_t a2)
{
  uint64_t v2;

  if (fchmod(a1, a2))
  {
    v2 = *__error();
    std::generic_category();
  }
  else
  {
    std::system_category();
    return 0;
  }
  return v2;
}

uint64_t llvm::sys::fs::setLastAccessAndModificationTime(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::chrono::system_clock::time_point v8;
  timespec __t;
  time_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  __t.tv_sec = a2 / 1000;
  __t.tv_sec = std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)&__t);
  __t.tv_nsec = a2 % 1000000000;
  v8.__d_.__rep_ = a3 / 1000;
  v10 = std::chrono::system_clock::to_time_t(&v8);
  v11 = a3 % 1000000000;
  if (futimens(a1, &__t))
  {
    v6 = *__error();
    std::generic_category();
  }
  else
  {
    std::system_category();
    return 0;
  }
  return v6;
}

uint64_t llvm::sys::fs::mapped_file_region::init(size_t *a1, int a2, off_t a3, int a4)
{
  int v6;
  int v7;
  int v8;
  void *v9;
  uint64_t v11;

  if (a4 == 1)
    v6 = 65;
  else
    v6 = 66;
  if (a4)
    v7 = 3;
  else
    v7 = 1;
  if (a4)
    v8 = v6;
  else
    v8 = 24642;
  v9 = mmap(0, *a1, v7, v8, a2, a3);
  a1[1] = (size_t)v9;
  if (v9 == (void *)-1)
  {
    v11 = *__error();
    std::generic_category();
    return v11;
  }
  else
  {
    std::system_category();
    return 0;
  }
}

uint64_t llvm::sys::fs::mapped_file_region::mapped_file_region(uint64_t a1, int a2, int a3, uint64_t a4, off_t a5, uint64_t *a6)
{
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = a4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = a3;
  v8 = llvm::sys::fs::mapped_file_region::init((size_t *)a1, a2, a5, a3);
  *a6 = v8;
  a6[1] = v9;
  if ((_DWORD)v8)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
  return a1;
}

{
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = a4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = a3;
  v8 = llvm::sys::fs::mapped_file_region::init((size_t *)a1, a2, a5, a3);
  *a6 = v8;
  a6[1] = v9;
  if ((_DWORD)v8)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
  return a1;
}

void *llvm::sys::fs::mapped_file_region::unmapImpl(llvm::sys::fs::mapped_file_region *this)
{
  void *result;

  result = (void *)*((_QWORD *)this + 1);
  if (result)
    return (void *)munmap(result, *(_QWORD *)this);
  return result;
}

uint64_t llvm::sys::fs::mapped_file_region::sync(void **this)
{
  uint64_t v1;

  if (msync(this[1], (size_t)*this, 16))
  {
    v1 = *__error();
    std::generic_category();
  }
  else
  {
    std::system_category();
    return 0;
  }
  return v1;
}

unint64_t llvm::sys::fs::detail::directory_iterator_construct(uint64_t a1, void *__src, size_t __n, char a4)
{
  uint64_t v8;
  size_t v9;
  DIR *v10;
  void **v11;
  __int128 v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  __int128 v17;
  uint64_t v18;
  _BYTE v19[56];
  void **v20;
  __int16 v21;
  _QWORD *v22;
  __int16 v23;
  _QWORD *v24[4];
  __int16 v25;
  char *v26;
  __int128 v27;
  _QWORD v28[17];

  v28[16] = *MEMORY[0x1E0C80C00];
  v26 = (char *)v28;
  v27 = xmmword_1C85F20B0;
  if (__n < 0x81)
  {
    v8 = 0;
    if (!__n)
      goto LABEL_4;
    goto LABEL_3;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v26, v28, __n, 1);
  v8 = v27;
  if (__n)
  {
LABEL_3:
    memcpy(&v26[v8], __src, __n);
    v8 = v27;
  }
LABEL_4:
  v9 = v8 + __n;
  *(_QWORD *)&v27 = v9;
  if (v9 + 1 > *((_QWORD *)&v27 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v26, v28, v9 + 1, 1);
    v9 = v27;
  }
  v26[v9] = 0;
  v10 = opendir(v26);
  if (v10)
  {
    *(_QWORD *)a1 = v10;
    *(_QWORD *)&v17 = ".";
    *(_WORD *)&v19[8] = 259;
    v25 = 257;
    v23 = 257;
    v21 = 257;
    llvm::sys::path::append(&v26, 0, (_QWORD **)&v17, v24, &v22, &v20);
    v25 = 261;
    v24[0] = v26;
    v24[1] = (_QWORD *)v27;
    llvm::Twine::str((llvm::Twine *)v24, &v17);
    *(_DWORD *)v19 = 9;
    v19[4] = a4;
    memset(&v19[8], 0, 44);
    *(_DWORD *)&v19[52] = 0xFFFF;
    v11 = (void **)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      operator delete(*v11);
    *(_OWORD *)v11 = v17;
    *(_QWORD *)(a1 + 24) = v18;
    v12 = *(_OWORD *)&v19[16];
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v19;
    *(_OWORD *)(a1 + 48) = v12;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)&v19[32];
    *(_QWORD *)(a1 + 80) = *(_QWORD *)&v19[48];
    v13 = llvm::sys::fs::detail::directory_iterator_increment((DIR **)a1);
    v14 = v13;
    v15 = v13 & 0xFFFFFFFF00000000;
  }
  else
  {
    v14 = *__error();
    std::generic_category();
    v15 = 0;
  }
  if (v26 != (char *)v28)
    free(v26);
  return v15 | v14;
}

unint64_t llvm::sys::fs::detail::directory_iterator_increment(DIR **a1)
{
  dirent *v2;
  dirent *v3;
  char *d_name;
  _QWORD *v5;
  int v6;
  unsigned int v7;
  unint64_t v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13[2];
  __int128 v14;
  _QWORD *v15[4];
  __int16 v16;

  *__error() = 0;
  v2 = readdir(*a1);
  if (!v2)
  {
    if (!*__error())
    {
      v12 = llvm::sys::fs::detail::directory_iterator_destruct((uint64_t)a1);
      v8 = v12 & 0xFFFFFFFF00000000;
      v7 = v12;
      return v8 | v7;
    }
    v7 = *__error();
    std::generic_category();
    goto LABEL_5;
  }
  v3 = v2;
  d_name = v2->d_name;
  v5 = (_QWORD *)strlen(v2->d_name);
  if (v5 == (_QWORD *)2)
  {
    if (*d_name != 46)
      goto LABEL_4;
    v10 = v3->d_name[1];
LABEL_10:
    if (v10 == 46)
    {
      v11 = llvm::sys::fs::detail::directory_iterator_increment(a1);
      v7 = v11;
      v8 = v11 & 0xFFFFFFFF00000000;
      return v8 | v7;
    }
    goto LABEL_4;
  }
  if (v5 == (_QWORD *)1)
  {
    v10 = *d_name;
    goto LABEL_10;
  }
LABEL_4:
  v16 = 261;
  v15[0] = d_name;
  v15[1] = v5;
  v6 = sub_1C5E81168((v3->d_type & 0xF) << 12);
  v14 = 0u;
  memset(v13, 0, sizeof(v13));
  HIDWORD(v14) = 0xFFFF;
  llvm::sys::fs::directory_entry::replace_filename((uint64_t)(a1 + 1), v15, v6, v13);
  std::system_category();
  v7 = 0;
LABEL_5:
  v8 = 0;
  return v8 | v7;
}

uint64_t llvm::sys::fs::detail::directory_iterator_destruct(uint64_t a1)
{
  DIR *v2;
  void **v3;

  v2 = *(DIR **)a1;
  if (v2)
    closedir(v2);
  *(_QWORD *)a1 = 0;
  v3 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v3);
  *v3 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 9;
  *(_BYTE *)(a1 + 36) = 1;
  *(_OWORD *)(a1 + 37) = 0u;
  *(_OWORD *)(a1 + 53) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_DWORD *)(a1 + 84) = 0xFFFF;
  std::system_category();
  return 0;
}

uint64_t llvm::sys::fs::directory_entry::status@<X0>(llvm::sys::fs::directory_entry *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  __int128 v5;
  llvm::sys::fs::directory_entry *v6;
  __int16 v7;
  _BYTE v8[48];

  memset(v8, 0, 44);
  *(_DWORD *)&v8[44] = 0xFFFF;
  v7 = 260;
  v6 = this;
  result = llvm::sys::fs::status((llvm::sys::fs *)&v6, (const llvm::Twine *)v8, (llvm::sys::fs::file_status *)*((unsigned __int8 *)this + 28));
  if ((_DWORD)result)
  {
    *(_BYTE *)(a2 + 48) |= 1u;
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v4;
  }
  else
  {
    *(_BYTE *)(a2 + 48) &= ~1u;
    v5 = *(_OWORD *)&v8[16];
    *(_OWORD *)a2 = *(_OWORD *)v8;
    *(_OWORD *)(a2 + 16) = v5;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)&v8[32];
  }
  return result;
}

uint64_t llvm::sys::fs::openFile(unsigned __int8 *a1, int *a2, int a3, int a4, int a5, uint64_t a6)
{
  int v9;
  int v10;
  int v12;
  int v13;
  int v14;
  const char *v15;
  int v16;
  int v17;
  uint64_t v18;
  void *v20;
  __int128 v21;
  _QWORD v22[17];

  v22[16] = *MEMORY[0x1E0C80C00];
  v9 = 2 * (a4 == 3);
  if (a4 == 2)
    v9 = 1;
  if (a4 == 1)
    v9 = 0;
  v10 = a5 & 4;
  if ((a5 & 4) != 0)
    a3 = 3;
  v12 = v9 | 0xA00;
  v13 = v9 | 0x600;
  if (a3 == 3)
    v9 |= 0x200u;
  if (!a3)
    v9 = v13;
  if (a3 == 1)
    v14 = v12;
  else
    v14 = v9;
  v20 = v22;
  v21 = xmmword_1C85F20B0;
  v15 = (const char *)llvm::Twine::toNullTerminatedStringRef(a1, (uint64_t)&v20);
  v16 = v14 | ((a5 << 20) & 0x1000000 | (2 * v10)) ^ 0x1000000;
  while (1)
  {
    *__error() = 0;
    v17 = open(v15, v16, a6);
    if (v17 != -1)
      break;
    if (*__error() != 4)
    {
      *a2 = -1;
      goto LABEL_24;
    }
  }
  *a2 = v17;
  if ((v17 & 0x80000000) == 0)
  {
    std::system_category();
    v18 = 0;
    goto LABEL_19;
  }
LABEL_24:
  v18 = *__error();
  std::generic_category();
LABEL_19:
  if (v20 != v22)
    free(v20);
  return v18;
}

uint64_t llvm::sys::fs::getRealPathFromHandle(int a1, _QWORD *a2)
{
  size_t v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  char __s[1024];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (fcntl(a1, 50, __s) == -1)
  {
    v6 = *__error();
    std::generic_category();
    return v6;
  }
  v3 = strlen(__s);
  v4 = v3;
  v5 = a2[1];
  if (a2[2] < v5 + v3)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v5 + v3, 1);
    v5 = a2[1];
    if (!v4)
      goto LABEL_5;
    goto LABEL_4;
  }
  if (v3)
  {
LABEL_4:
    memcpy((void *)(*a2 + v5), __s, v4);
    v5 = a2[1];
  }
LABEL_5:
  a2[1] = v5 + v4;
  std::system_category();
  return 0;
}

_QWORD *llvm::sys::fs::openNativeFileForRead@<X0>(unsigned __int8 *a1@<X0>, int a2@<W1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;

  v9 = 0;
  result = (_QWORD *)llvm::sys::fs::openFileForRead(a1, &v9, a2, a3);
  v7 = result;
  if ((_DWORD)result)
  {
    v8 = v6;
    result = (_QWORD *)operator new();
    *result = &off_1E81A0D28;
    result[1] = v7;
    result[2] = v8;
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = result;
  }
  else
  {
    *(_BYTE *)(a4 + 8) &= ~1u;
    *(_DWORD *)a4 = v9;
  }
  return result;
}

uint64_t llvm::sys::fs::getStdoutHandle(llvm::sys::fs *this)
{
  return 1;
}

uint64_t llvm::sys::fs::getStderrHandle(llvm::sys::fs *this)
{
  return 2;
}

_QWORD *llvm::sys::fs::readNativeFileSlice@<X0>(int a1@<W0>, void *a2@<X1>, unint64_t a3@<X2>, off_t a4@<X3>, uint64_t a5@<X8>)
{
  size_t v9;
  _QWORD *result;
  uint64_t v11;
  const std::error_category *v12;
  const std::error_category *v13;
  char v14;

  if (a3 >= 0x7FFFFFFF)
    v9 = 0x7FFFFFFFLL;
  else
    v9 = a3;
  do
  {
    *__error() = 0;
    result = (_QWORD *)pread(a1, a2, v9, a4);
    if (result != (_QWORD *)-1)
    {
      v14 = *(_BYTE *)(a5 + 8) & 0xFE;
      goto LABEL_10;
    }
  }
  while (*__error() == 4);
  v11 = *__error();
  v12 = std::generic_category();
  if ((_DWORD)v11)
  {
    v13 = v12;
    result = (_QWORD *)operator new();
    *result = &off_1E81A0D28;
    result[1] = v11;
    result[2] = v13;
  }
  else
  {
    result = 0;
  }
  v14 = *(_BYTE *)(a5 + 8) | 1;
LABEL_10:
  *(_BYTE *)(a5 + 8) = v14;
  *(_QWORD *)a5 = result;
  return result;
}

uint64_t llvm::sys::fs::tryLockFile(int a1, uint64_t a2)
{
  std::chrono::steady_clock::time_point v3;
  unsigned int v4;
  _QWORD v6[3];

  v3.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * a2;
  while (1)
  {
    v6[1] = 0;
    v6[2] = 0x300000000;
    v6[0] = 0;
    if (fcntl(a1, 8, v6) != -1)
      break;
    v4 = *__error();
    if (v4 != 13 && v4 != 35)
      goto LABEL_7;
    usleep(0x3E8u);
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v3.__d_.__rep_)
    {
      v4 = 77;
LABEL_7:
      std::generic_category();
      return v4;
    }
  }
  std::system_category();
  return 0;
}

uint64_t llvm::sys::fs::closeFile(llvm::sys::fs *this, int *a2)
{
  llvm::sys::Process *v2;

  v2 = (llvm::sys::Process *)*(unsigned int *)this;
  *(_DWORD *)this = -1;
  return llvm::sys::Process::SafelyCloseFileDescriptor(v2);
}

unint64_t llvm::sys::fs::remove_directories(const char **this, const llvm::Twine *a2)
{
  void **v4;
  unint64_t v5;
  const std::error_category *v6;
  const std::error_category *v7;
  const std::error_category *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  void **v18;
  __int16 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  char v22;
  DIR **v23;
  std::__shared_weak_count *v24;
  unint64_t v25;
  const std::error_category *v26;
  unint64_t v27;
  int v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  LODWORD(v25) = 0;
  v26 = std::system_category();
  sub_1C61D4808((uint64_t)&v23, this, &v25, 0);
  v20 = 0;
  v21 = 0;
  v22 = 1;
  if (sub_1C5057AF4((uint64_t *)&v23, &v20))
  {
LABEL_13:
    std::system_category();
    v9 = 0;
    LODWORD(v5) = 0;
    goto LABEL_17;
  }
  while (1)
  {
    v4 = (void **)(v23 + 1);
    llvm::sys::fs::directory_entry::status((llvm::sys::fs::directory_entry *)(v23 + 1), (uint64_t)&v27);
    if ((v29 & 1) != 0)
      break;
    if (v28 == 3)
    {
      v5 = sub_1C5E81190(v4, (uint64_t)a2);
      v25 = v5;
      v26 = v6;
      if ((_DWORD)v5)
      {
        if ((a2 & 1) == 0)
          goto LABEL_16;
      }
    }
    v19 = 260;
    v18 = v4;
    v5 = llvm::sys::fs::remove((llvm::sys::fs *)&v18, (const llvm::Twine *)1);
    v25 = v5;
    v26 = v7;
    if ((_DWORD)v5)
    {
      if ((a2 & 1) == 0)
        goto LABEL_16;
    }
LABEL_10:
    v5 = llvm::sys::fs::detail::directory_iterator_increment(v23);
    v25 = v5;
    v26 = v8;
    if ((_DWORD)v5 && (a2 & 1) == 0)
      goto LABEL_16;
    if (sub_1C5057AF4((uint64_t *)&v23, &v20))
      goto LABEL_13;
  }
  if ((a2 & 1) != 0)
    goto LABEL_10;
  v5 = v27;
LABEL_16:
  v9 = v5 & 0xFFFFFFFF00000000;
LABEL_17:
  v10 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v24;
  if (!v24)
    goto LABEL_26;
  v14 = (unint64_t *)&v24->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (!(_DWORD)v5)
      goto LABEL_28;
LABEL_27:
    if ((_DWORD)a2)
      goto LABEL_28;
  }
  else
  {
LABEL_26:
    if ((_DWORD)v5)
      goto LABEL_27;
LABEL_28:
    v16 = llvm::sys::fs::remove((llvm::sys::fs *)this, (const llvm::Twine *)1);
    if (!(_DWORD)v16 || (a2 & 1) != 0)
    {
      std::system_category();
      v9 = 0;
      LODWORD(v5) = 0;
    }
    else
    {
      v9 = v16 & 0xFFFFFFFF00000000;
      LODWORD(v5) = v16;
    }
  }
  return v9 | v5;
}

uint64_t llvm::sys::fs::changeFileOwnership(llvm::sys::fs *this, uid_t a2, gid_t a3)
{
  int v5;
  int v6;
  uint64_t v7;

  v5 = (int)this;
  while (1)
  {
    *__error() = 0;
    v6 = fchown(v5, a2, a3);
    if (v6 != -1)
      break;
    if (*__error() != 4)
      goto LABEL_7;
  }
  if ((v6 & 0x80000000) == 0)
  {
    std::system_category();
    return 0;
  }
LABEL_7:
  v7 = *__error();
  std::generic_category();
  return v7;
}

passwd *llvm::sys::path::user_config_directory(_QWORD *a1)
{
  passwd *result;
  void **v3;
  __int16 v4;
  _QWORD *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  const char *v9;
  __int16 v10;

  if (llvm::sys::path::home_directory(a1))
  {
    v9 = "Library";
    v10 = 259;
    v7 = "Preferences";
    v8 = 259;
  }
  else
  {
    result = llvm::sys::path::home_directory(a1);
    if (!(_DWORD)result)
      return result;
    v9 = ".config";
    v10 = 259;
    v8 = 257;
  }
  v6 = 257;
  v4 = 257;
  llvm::sys::path::append(a1, 0, (_QWORD **)&v9, (_QWORD **)&v7, &v5, &v3);
  return (passwd *)1;
}

size_t sub_1C5E80994(int a1, uint64_t a2)
{
  int v3;
  size_t result;
  size_t v5;
  size_t v6;
  size_t v7;

  if (a1)
    v3 = 65537;
  else
    v3 = 65538;
  result = confstr(v3, 0, 0);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)(a2 + 8);
    while (1)
    {
      if (v6 == v5)
      {
        v5 = v6;
      }
      else
      {
        if (v6 <= v5)
        {
          if (*(_QWORD *)(a2 + 16) < v5)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod(a2, (void *)(a2 + 24), v5, 1);
            v6 = *(_QWORD *)(a2 + 8);
          }
          if (v5 != v6)
            bzero((void *)(*(_QWORD *)a2 + v6), v5 - v6);
        }
        *(_QWORD *)(a2 + 8) = v5;
      }
      v5 = confstr(v3, *(char **)a2, v5);
      result = v5 != 0;
      if (!v5)
        break;
      v6 = *(_QWORD *)(a2 + 8);
      if (v5 == v6)
      {
        v7 = v5 - 1;
        goto LABEL_18;
      }
    }
    v7 = 0;
LABEL_18:
    *(_QWORD *)(a2 + 8) = v7;
  }
  return result;
}

uint64_t llvm::sys::fs::copy_file(llvm::sys::fs *this, const llvm::Twine *a2, const llvm::Twine *a3)
{
  void **v4;
  void **v5;
  unsigned int v6;
  void **v8;
  void **v9;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;

  llvm::Twine::str(this, v13);
  llvm::Twine::str(a2, __p);
  if (v14 >= 0)
    v4 = v13;
  else
    v4 = (void **)v13[0];
  if (v12 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if (clonefile((const char *)v4, (const char *)v5, 0))
  {
    v6 = *__error();
    if (v6 > 0x2D || ((1 << v6) & 0x200000060000) == 0)
      goto LABEL_20;
    if (v14 >= 0)
      v8 = v13;
    else
      v8 = (void **)v13[0];
    if (v12 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    if (copyfile((const char *)v8, (const char *)v9, 0, 8u))
    {
      v6 = *__error();
LABEL_20:
      std::generic_category();
      goto LABEL_22;
    }
  }
  std::system_category();
  v6 = 0;
LABEL_22:
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  return v6;
}

uint64_t llvm::sys::fs::TempFile::TempFile(uint64_t a1, const void *a2, size_t a3, int a4)
{
  void *v4;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = 0;
  v4 = (void *)(a1 + 8);
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a3 >= 0x17)
  {
    v9 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v9 = a3 | 7;
    v10 = v9 + 1;
    v4 = operator new(v9 + 1);
    *(_QWORD *)(a1 + 16) = a3;
    *(_QWORD *)(a1 + 24) = v10 | 0x8000000000000000;
    *(_QWORD *)(a1 + 8) = v4;
  }
  else
  {
    *(_BYTE *)(a1 + 31) = a3;
    if (!a3)
      goto LABEL_9;
  }
  memmove(v4, a2, a3);
LABEL_9:
  *((_BYTE *)v4 + a3) = 0;
  *(_DWORD *)(a1 + 32) = a4;
  return a1;
}

{
  void *v4;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = 0;
  v4 = (void *)(a1 + 8);
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a3 >= 0x17)
  {
    v9 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v9 = a3 | 7;
    v10 = v9 + 1;
    v4 = operator new(v9 + 1);
    *(_QWORD *)(a1 + 16) = a3;
    *(_QWORD *)(a1 + 24) = v10 | 0x8000000000000000;
    *(_QWORD *)(a1 + 8) = v4;
  }
  else
  {
    *(_BYTE *)(a1 + 31) = a3;
    if (!a3)
      goto LABEL_9;
  }
  memmove(v4, a2, a3);
LABEL_9:
  *((_BYTE *)v4 + a3) = 0;
  *(_DWORD *)(a1 + 32) = a4;
  return a1;
}

__n128 llvm::sys::fs::TempFile::TempFile(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = -1;
  result = *(__n128 *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(__n128 *)(a1 + 8) = result;
  *(_BYTE *)(a2 + 31) = 0;
  *(_BYTE *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)a2 = 1;
  *(_DWORD *)(a2 + 32) = -1;
  return result;
}

{
  __n128 result;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = -1;
  result = *(__n128 *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(__n128 *)(a1 + 8) = result;
  *(_BYTE *)(a2 + 31) = 0;
  *(_BYTE *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)a2 = 1;
  *(_DWORD *)(a2 + 32) = -1;
  return result;
}

uint64_t llvm::sys::fs::TempFile::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)v4);
  v5 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)v4 = v5;
  *(_BYTE *)(a2 + 31) = 0;
  *(_BYTE *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)a2 = 1;
  *(_DWORD *)(a2 + 32) = -1;
  return a1;
}

void llvm::sys::fs::TempFile::~TempFile(void **this)
{
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

_QWORD *llvm::sys::fs::TempFile::keep@<X0>(llvm::sys::fs::TempFile *this@<X0>, _QWORD *a2@<X8>)
{
  char v4;
  char *v5;
  int v6;
  char *v7;
  size_t v8;
  size_t v9;
  _QWORD *result;
  uint64_t v11;
  const std::error_category *v12;
  const std::error_category *v13;

  *(_BYTE *)this = 1;
  v4 = *((_BYTE *)this + 31);
  v5 = (char *)this + 8;
  v6 = v4;
  if (v4 >= 0)
    v7 = (char *)this + 8;
  else
    v7 = (char *)*((_QWORD *)this + 1);
  v8 = v4 & 0x7F;
  if (v6 >= 0)
    v9 = v8;
  else
    v9 = *((_QWORD *)this + 2);
  llvm::sys::DontRemoveFileOnSignal(v7, v9);
  MEMORY[0x1CAA32ABC](v5, &unk_1C8771E0B);
  if (close(*((_DWORD *)this + 8)) == -1)
  {
    v11 = *__error();
    v12 = std::generic_category();
    if ((_DWORD)v11)
    {
      v13 = v12;
      result = (_QWORD *)operator new();
      *result = &off_1E81A0D28;
      result[1] = v11;
      result[2] = v13;
    }
    else
    {
      result = 0;
    }
  }
  else
  {
    result = 0;
    *((_DWORD *)this + 8) = -1;
  }
  *a2 = result;
  return result;
}

void llvm::sys::fs::TempFile::create(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  void *v10;
  int v11;
  __int128 *p_p;
  uint64_t v13;
  uint64_t v14;
  const std::error_category *v15;
  _QWORD *v16;
  char *v17;
  _BYTE v18[8];
  __int128 __p;
  unint64_t v20;
  int v21;
  int v22;
  char *v23;
  char *v24;
  void *v25;
  __int128 v26;
  _QWORD v27[17];

  v27[16] = *MEMORY[0x1E0C80C00];
  v22 = 0;
  v25 = v27;
  v26 = xmmword_1C85F20B0;
  v6 = sub_1C5E7D894(a1, &v22, &v25, 0, 1, a3 | 8u, a2);
  if ((_DWORD)v6)
  {
    v7 = v5;
    v8 = (_QWORD *)operator new();
    *v8 = &off_1E81A0D28;
    v8[1] = v6;
    v8[2] = v7;
    *(_BYTE *)(a4 + 40) |= 1u;
    *(_QWORD *)a4 = v8;
    goto LABEL_13;
  }
  v10 = v25;
  v9 = v26;
  v11 = v22;
  v18[0] = 0;
  if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if ((unint64_t)v26 >= 0x17)
  {
    v13 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if (((unint64_t)v26 | 7) != 0x17)
      v13 = v26 | 7;
    v14 = v13 + 1;
    p_p = (__int128 *)operator new(v13 + 1);
    *((_QWORD *)&__p + 1) = v9;
    v20 = v14 | 0x8000000000000000;
    *(_QWORD *)&__p = p_p;
    goto LABEL_10;
  }
  HIBYTE(v20) = v26;
  p_p = &__p;
  if ((_QWORD)v26)
LABEL_10:
    memmove(p_p, v10, v9);
  *((_BYTE *)p_p + v9) = 0;
  v21 = v11;
  if (llvm::sys::RemoveFileOnSignal(v25, v26))
  {
    llvm::sys::fs::TempFile::discard((llvm::sys::fs::TempFile *)v18, &v17);
    v23 = v17;
    sub_1C4D62BD4(&v23, &v24);
    if (v23)
      (*(void (**)(char *))(*(_QWORD *)v23 + 8))(v23);
    v15 = std::generic_category();
    v16 = (_QWORD *)operator new();
    *v16 = &off_1E81A0D28;
    v16[1] = 1;
    v16[2] = v15;
    *(_BYTE *)(a4 + 40) |= 1u;
    *(_QWORD *)a4 = v16;
    if (SHIBYTE(v20) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 40) &= ~1u;
    *(_BYTE *)a4 = 0;
    *(_OWORD *)(a4 + 8) = __p;
    *(_QWORD *)(a4 + 24) = v20;
    *(_DWORD *)(a4 + 32) = v11;
  }
LABEL_13:
  if (v25 != v27)
    free(v25);
}

uint64_t sub_1C5E81168(unsigned int a1)
{
  unsigned int v1;

  v1 = (a1 >> 12) ^ 8;
  if (v1 == 15)
    return 9;
  else
    return dword_1C8672B08[v1];
}

unint64_t sub_1C5E81190(void **a1, uint64_t a2)
{
  char *v4;
  DIR **v5;
  char v6;
  BOOL v7;
  void *v8;
  size_t v9;
  size_t v10;
  DIR **v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  DIR **v22;
  __int16 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  char v26;
  DIR **v27;
  std::__shared_weak_count *v28;
  char v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  std::system_category();
  v29 = 0;
  v4 = (char *)operator new(0x70uLL);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E813FB00;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 7) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *((_DWORD *)v4 + 14) = 9;
  v4[60] = 1;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *(_OWORD *)(v4 + 92) = 0u;
  *((_DWORD *)v4 + 27) = 0xFFFF;
  v28 = (std::__shared_weak_count *)v4;
  *(_OWORD *)(v4 + 24) = 0u;
  v5 = (DIR **)(v4 + 24);
  v27 = v5;
  v6 = *((_BYTE *)a1 + 23);
  v7 = v6 < 0;
  if (v6 >= 0)
    v8 = a1;
  else
    v8 = *a1;
  v9 = v6 & 0x7F;
  if (v7)
    v10 = (size_t)a1[1];
  else
    v10 = v9;
  llvm::sys::fs::detail::directory_iterator_construct((uint64_t)v5, v8, v10, 0);
  v24 = 0;
  v25 = 0;
  v26 = 1;
  if (sub_1C5057AF4((uint64_t *)&v27, &v24))
  {
LABEL_19:
    std::system_category();
    v14 = 0;
    v13 = 0;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v27 + 1;
    llvm::sys::fs::directory_entry::status((llvm::sys::fs::directory_entry *)(v27 + 1), (uint64_t)&v30);
    if ((v32 & 1) != 0)
      break;
    if (v31 == 3)
    {
      v12 = sub_1C5E81190(v11, a2);
      v13 = v12;
      if ((_DWORD)v12)
      {
        if ((a2 & 1) == 0)
          goto LABEL_22;
      }
    }
    v23 = 260;
    v22 = v11;
    v12 = llvm::sys::fs::remove((llvm::sys::fs *)&v22, (const llvm::Twine *)1);
    v13 = v12;
    if ((_DWORD)v12)
    {
      if ((a2 & 1) == 0)
        goto LABEL_22;
    }
LABEL_16:
    v12 = llvm::sys::fs::detail::directory_iterator_increment(v27);
    v13 = v12;
    if ((_DWORD)v12 && (a2 & 1) == 0)
      goto LABEL_22;
    if (sub_1C5057AF4((uint64_t *)&v27, &v24))
      goto LABEL_19;
  }
  if ((a2 & 1) != 0)
    goto LABEL_16;
  v12 = v30;
  v13 = v30;
LABEL_22:
  v14 = v12 & 0xFFFFFFFF00000000;
LABEL_23:
  v15 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v28;
  if (v28)
  {
    v19 = (unint64_t *)&v28->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v13 | v14;
}

void llvm::sys::Process::FindInEnvPath(const void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, _BYTE *a6@<X8>)
{
  llvm::sys::Process::FindInEnvPath(a1, a2, a3, a4, 0, 0, a5, a6);
}

void llvm::sys::Process::FindInEnvPath(const void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, _BYTE *a8@<X8>)
{
  void **v13;
  unint64_t v14;
  size_t v15;
  BOOL *v16;
  const void **v17;
  unint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t *v21;
  char v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _WORD *v27;
  unsigned int v28;
  _WORD *v29;
  uint64_t v30;
  size_t v31;
  __int128 *p_dst;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  const void **v39;
  void **v40;
  __int16 v41;
  _QWORD *v42;
  __int16 v43;
  _QWORD *v44[4];
  __int16 v45;
  char __s[2];
  void *__p[2];
  char v48;
  char v49;
  __int128 __dst;
  unint64_t v51;
  __int16 v52;
  _BYTE __src[24];
  _WORD v54[64];
  const void **v55;
  uint64_t v56;
  _QWORD v57[18];

  v57[16] = *MEMORY[0x1E0C80C00];
  *a8 = 0;
  a8[24] = 0;
  llvm::sys::Process::GetEnv(a1, a2, (uint64_t)__p);
  if (v49)
  {
    __s[0] = a7;
    __s[1] = 0;
    v55 = (const void **)v57;
    v56 = 0x800000000;
    if (v48 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if (v48 >= 0)
      v14 = v48 & 0x7F;
    else
      v14 = (unint64_t)__p[1];
    v15 = strlen(__s);
    llvm::SplitString((uint64_t)v13, v14, (uint64_t)&v55, (unsigned __int8 *)__s, v15);
    v17 = v55;
    if ((_DWORD)v56)
    {
      v39 = &v55[2 * v56];
      v36 = a8;
      v37 = 24 * a6;
      v35 = a6;
      while (1)
      {
        v18 = (unint64_t)v17[1];
        if (!v18)
          goto LABEL_40;
        v19 = *v17;
        if (a6)
        {
          v20 = v37;
          v21 = a5;
          do
          {
            v22 = *((_BYTE *)v21 + 23);
            v23 = v22 < 0;
            v24 = (uint64_t *)*v21;
            if (v22 >= 0)
              v24 = v21;
            v25 = v22 & 0x7F;
            if (v23)
              v25 = v21[1];
            v54[4] = 261;
            *(_QWORD *)__src = v24;
            *(_QWORD *)&__src[8] = v25;
            v52 = 261;
            *(_QWORD *)&__dst = v19;
            *((_QWORD *)&__dst + 1) = v18;
            LOBYTE(v44[0]) = 0;
            if (!llvm::sys::fs::equivalent((llvm::sys::fs *)__src, (const llvm::Twine *)&__dst, (const llvm::Twine *)v44, v16))
            {
              if (LOBYTE(v44[0]))
                goto LABEL_40;
            }
            v21 += 3;
            v20 -= 24;
          }
          while (v20);
        }
        *(_QWORD *)__src = v54;
        *(_OWORD *)&__src[8] = xmmword_1C85F20B0;
        if (v18 >= 0x81)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)__src, v54, v18, 1);
          v26 = *(_QWORD *)&__src[8];
          v27 = *(_WORD **)__src;
        }
        else
        {
          v26 = 0;
          v27 = v54;
        }
        memcpy((char *)v27 + v26, v19, v18);
        *(_QWORD *)&__src[8] += v18;
        v52 = 261;
        *(_QWORD *)&__dst = a3;
        *((_QWORD *)&__dst + 1) = a4;
        v45 = 257;
        v43 = 257;
        v41 = 257;
        llvm::sys::path::append(__src, 0, (_QWORD **)&__dst, v44, &v42, &v40);
        v52 = 261;
        __dst = *(_OWORD *)__src;
        v28 = llvm::sys::fs::access((unsigned __int8 *)&__dst, 0);
        v29 = *(_WORD **)__src;
        v30 = v28;
        if (!v28)
          break;
LABEL_37:
        if (v29 != v54)
          free(v29);
        if (!v30)
        {
LABEL_43:
          v17 = v55;
          goto LABEL_44;
        }
LABEL_40:
        v17 += 2;
        if (v17 == v39)
          goto LABEL_43;
      }
      v31 = *(_QWORD *)&__src[8];
      if (*(_QWORD *)&__src[8] >= 0x7FFFFFFFFFFFFFF8uLL)
        abort();
      if (*(_QWORD *)&__src[8] >= 0x17uLL)
      {
        v33 = (*(_QWORD *)&__src[8] & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((*(_QWORD *)&__src[8] | 7) != 0x17)
          v33 = *(_QWORD *)&__src[8] | 7;
        v34 = v33 + 1;
        p_dst = (__int128 *)operator new(v33 + 1);
        *((_QWORD *)&__dst + 1) = v31;
        v51 = v34 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v51) = __src[8];
        p_dst = &__dst;
        if (!*(_QWORD *)&__src[8])
          goto LABEL_31;
      }
      memmove(p_dst, v29, v31);
LABEL_31:
      *((_BYTE *)p_dst + v31) = 0;
      if (v36[24])
      {
        a6 = v35;
        if ((char)v36[23] < 0)
          operator delete(*(void **)v36);
        *(_OWORD *)v36 = __dst;
        *((_QWORD *)v36 + 2) = v51;
      }
      else
      {
        *(_OWORD *)v36 = __dst;
        *((_QWORD *)v36 + 2) = v51;
        v36[24] = 1;
        a6 = v35;
      }
      v29 = *(_WORD **)__src;
      goto LABEL_37;
    }
LABEL_44:
    if (v17 != v57)
      free(v17);
    if (v49)
    {
      if (v48 < 0)
        operator delete(__p[0]);
    }
  }
}

double llvm::sys::Process::GetEnv@<D0>(const void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v6;
  char v7;
  const char *p_dst;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  double result;
  char *v13;
  size_t v14;
  size_t v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  void **__dst;
  size_t v22;
  int64_t v23;

  if (!a1)
  {
    v7 = 0;
    __dst = 0;
    v22 = 0;
    p_dst = (const char *)&__dst;
    v23 = 0;
    goto LABEL_14;
  }
  if (a2 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_27;
  if (a2 >= 0x17)
  {
    v9 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v9 = a2 | 7;
    v10 = v9 + 1;
    v6 = (void **)operator new(v9 + 1);
    v22 = a2;
    v23 = v10 | 0x8000000000000000;
    __dst = v6;
    goto LABEL_10;
  }
  HIBYTE(v23) = a2;
  v6 = (void **)&__dst;
  if (a2)
LABEL_10:
    memmove(v6, a1, a2);
  *((_BYTE *)v6 + a2) = 0;
  v7 = HIBYTE(v23);
  if (v23 >= 0)
    p_dst = (const char *)&__dst;
  else
    p_dst = (const char *)__dst;
LABEL_14:
  v11 = getenv(p_dst);
  if (!v11)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    if ((v7 & 0x80) == 0)
      return result;
LABEL_20:
    operator delete(__dst);
    return result;
  }
  v13 = v11;
  v14 = strlen(v11);
  if (v14 > 0x7FFFFFFFFFFFFFF7)
LABEL_27:
    abort();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    v16 = (__int128 *)operator new(v17 + 1);
    *((_QWORD *)&v19 + 1) = v15;
    v20 = v18 | 0x8000000000000000;
    *(_QWORD *)&v19 = v16;
    goto LABEL_24;
  }
  HIBYTE(v20) = v14;
  v16 = &v19;
  if (v14)
LABEL_24:
    memmove(v16, v13, v15);
  *((_BYTE *)v16 + v15) = 0;
  result = *(double *)&v19;
  *(_OWORD *)a3 = v19;
  *(_QWORD *)(a3 + 16) = v20;
  *(_BYTE *)(a3 + 24) = 1;
  if (v23 < 0)
    goto LABEL_20;
  return result;
}

uint64_t llvm::sys::Process::AreCoreFilesPrevented(llvm::sys::Process *this)
{
  return 1;
}

void llvm::sys::Process::getPageSize(uint64_t a1@<X8>)
{
  unsigned __int8 v3;
  int v4;
  llvm *v5;
  uint64_t v6;
  std::error_code v7;

  v3 = atomic_load((unsigned __int8 *)&qword_1ED836FB8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1ED836FB8))
  {
    dword_1ED836FB0 = getpagesize();
    __cxa_guard_release(&qword_1ED836FB8);
  }
  v4 = dword_1ED836FB0;
  if (dword_1ED836FB0 == -1)
  {
    v5 = (llvm *)*__error();
    *(_QWORD *)&v7.__val_ = std::generic_category();
    llvm::errorCodeToError(v5, v7, &v6);
    *(_BYTE *)(a1 + 8) |= 1u;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_BYTE *)(a1 + 8) &= ~1u;
    *(_DWORD *)a1 = v4;
  }
}

uint64_t llvm::sys::Process::GetTimeUsage(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  __darwin_time_t v6;
  rusage v7;

  *a1 = 1000 * std::chrono::system_clock::now().__d_.__rep_;
  result = getrusage(0, &v7);
  v6 = v7.ru_stime.tv_usec + 1000000 * v7.ru_stime.tv_sec;
  *a2 = 1000 * (v7.ru_utime.tv_usec + 1000000 * v7.ru_utime.tv_sec);
  *a3 = 1000 * v6;
  return result;
}

void (__cdecl *llvm::sys::Process::PreventCoreFiles(llvm::sys::Process *this))(int)
{
  task_t *v1;
  BOOL v2;
  int v3;
  void (__cdecl *v4)(int);
  mach_msg_type_number_t masksCnt;
  rlimit v7;
  thread_state_flavor_t old_flavors[14];
  exception_behavior_t old_behaviors[14];
  exception_handler_t old_handlers[14];
  exception_mask_t masks[14];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7.rlim_cur = 0;
  v7.rlim_max = 0;
  setrlimit(4, &v7);
  masksCnt = 0;
  v1 = (task_t *)MEMORY[0x1E0C83DA0];
  if (task_get_exception_ports(*MEMORY[0x1E0C83DA0], 0x1BFEu, masks, &masksCnt, old_handlers, old_behaviors, old_flavors))
  {
    v2 = 1;
  }
  else
  {
    v2 = masksCnt == 0;
  }
  if (!v2)
  {
    v3 = 0;
    do
    {
      task_set_exception_ports(*v1, masks[v3], 0, old_behaviors[v3], old_flavors[v3]);
      ++v3;
    }
    while (v3 != masksCnt);
  }
  v4 = (void (__cdecl *)(int))MEMORY[0x1E0C80F80];
  signal(6, (void (__cdecl *)(int))MEMORY[0x1E0C80F80]);
  signal(4, v4);
  signal(8, v4);
  signal(11, v4);
  return signal(10, v4);
}

uint64_t llvm::sys::Process::FixupStandardFileDescriptors(llvm::sys::Process *this)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  stat v9;

  v1 = 0;
  v2 = 0;
  v3 = -1;
  while (2)
  {
    v4 = dword_1C8672B44[v1];
    *__error() = 0;
    while (1)
    {
      *__error() = 0;
      v5 = fstat(v4, &v9);
      if (v5 != -1)
        break;
      if (*__error() != 4)
        goto LABEL_7;
    }
    if (v5 < 0)
    {
LABEL_7:
      if (*__error() != 9)
        goto LABEL_21;
    }
    if (!*__error())
      goto LABEL_17;
    if (v3 < 0)
    {
      while (1)
      {
        *__error() = 0;
        v6 = open("/dev/null", 2);
        if (v6 != -1)
          break;
        if (*__error() != 4)
        {
          v3 = -1;
          goto LABEL_21;
        }
      }
      v3 = v6;
      if (v6 < 0)
        goto LABEL_21;
    }
    if (v3 == v4)
    {
      v2 = 1;
      v3 = v4;
      goto LABEL_17;
    }
    if (dup2(v3, v4) < 0)
    {
LABEL_21:
      v7 = *__error();
      std::generic_category();
      if (v2)
        return v7;
      goto LABEL_22;
    }
LABEL_17:
    if (++v1 != 3)
      continue;
    break;
  }
  std::system_category();
  v7 = 0;
  if (!v2)
  {
LABEL_22:
    if ((v3 & 0x80000000) == 0)
      close(v3);
  }
  return v7;
}

uint64_t llvm::sys::Process::SafelyCloseFileDescriptor(llvm::sys::Process *this)
{
  int v1;
  int v2;
  unsigned int v3;
  sigset_t v5;
  sigset_t v6;

  v1 = (int)this;
  v5 = -1;
  v6 = -1;
  v2 = pthread_sigmask(3, &v6, &v5);
  if (!v2)
  {
    if (close(v1) < 0)
    {
      v3 = *__error();
      v2 = pthread_sigmask(3, &v5, 0);
      if (v3)
        goto LABEL_5;
    }
    else
    {
      v2 = pthread_sigmask(3, &v5, 0);
    }
  }
  v3 = v2;
LABEL_5:
  std::generic_category();
  return v3;
}

BOOL llvm::sys::Process::StandardInIsUserInput(llvm::sys::Process *this)
{
  return isatty(0) != 0;
}

BOOL llvm::sys::Process::StandardOutIsDisplayed(llvm::sys::Process *this)
{
  return isatty(1) != 0;
}

uint64_t llvm::sys::Process::StandardOutColumns(llvm::sys::Process *this)
{
  uint64_t result;
  char *v2;

  result = isatty(1);
  if ((_DWORD)result)
  {
    v2 = getenv("COLUMNS");
    if (!v2)
      return 0;
    result = atoi(v2);
    if ((int)result <= 0)
      return 0;
  }
  return result;
}

uint64_t llvm::sys::Process::StandardErrColumns(llvm::sys::Process *this)
{
  uint64_t result;
  char *v2;

  result = isatty(2);
  if ((_DWORD)result)
  {
    v2 = getenv("COLUMNS");
    if (!v2)
      return 0;
    result = atoi(v2);
    if ((int)result <= 0)
      return 0;
  }
  return result;
}

char *checkTerminalEnvironmentForColors(void)
{
  char *result;
  char *v1;
  size_t v2;
  unsigned int v3;
  BOOL v4;
  BOOL v9;

  result = getenv("TERM");
  if (!result)
    return result;
  v1 = result;
  v2 = strlen(result);
  if (v2 == 6)
  {
    if (*(_DWORD *)v1 ^ 0x77677963 | *((unsigned __int16 *)v1 + 2) ^ 0x6E69)
      v3 = 0;
    else
      v3 = 257;
    goto LABEL_16;
  }
  if (v2 == 5)
  {
    if (*(_DWORD *)v1 ^ 0x756E696C | v1[4] ^ 0x78)
      v3 = 0;
    else
      v3 = 257;
LABEL_23:
    v4 = v2 < 5;
    if (v2 >= 5 && v3 <= 0xFF)
    {
      v4 = 0;
      if (v1[4] == 109 && *(_DWORD *)v1 == 1919251576)
        v3 = 257;
    }
    if (!v4 && v3 <= 0xFF)
    {
      v4 = 0;
      if (v1[4] == 48 && *(_DWORD *)v1 == 808547446)
        v3 = 257;
    }
    goto LABEL_37;
  }
  if (v2 != 4)
  {
    v3 = 0;
LABEL_16:
    if (v2 >= 6 && v3 <= 0xFF && *((_WORD *)v1 + 2) == 28261 && *(_DWORD *)v1 == 1701995379)
      v3 = 257;
    goto LABEL_23;
  }
  if (*(_DWORD *)v1 == 1769172577)
    v3 = 257;
  else
    v3 = 0;
  v4 = 1;
LABEL_37:
  if (v2 >= 4 && v3 <= 0xFF && *(_DWORD *)v1 == 1953921138)
    v3 = 257;
  if (v3 > 0xFF)
    v4 = 1;
  if (!v4 && v1[v2 - 1] == 114 && *(_DWORD *)&v1[v2 - 5] == 1869377379)
    v3 = 257;
  if ((_BYTE)v3)
    v9 = v3 >> 8 == 0;
  else
    v9 = 1;
  return (char *)!v9;
}

char *llvm::sys::Process::StandardOutHasColors(llvm::sys::Process *this)
{
  char *result;

  result = (char *)isatty(1);
  if ((_DWORD)result)
    return checkTerminalEnvironmentForColors();
  return result;
}

_DWORD *llvm::sys::ProcessInfo::ProcessInfo(_DWORD *this)
{
  *this = 0;
  this[2] = 0;
  return this;
}

{
  *this = 0;
  this[2] = 0;
  return this;
}

BOOL sub_1C5E81FD4(pid_t *a1, const void *a2, std::string::size_type a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, uint64_t a8, unsigned int a9, uint64_t a10)
{
  const void **v18;
  char *const *v19;
  char **v20;
  const void *v21;
  const std::string::value_type *v22;
  char v23;
  pid_t v24;
  _BOOL8 v25;
  uint64_t v26;
  const void **v27;
  uint64_t v28;
  size_t v29;
  const void *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  const std::string::value_type *v39;
  std::string::size_type v40;
  std::string::size_type v41;
  std::string *v42;
  std::string::size_type v43;
  std::string *v44;
  std::string::size_type v45;
  char v46;
  uint64_t v47;
  size_t v48;
  posix_spawn_file_actions_t *v49;
  unsigned int v50;
  char *const *v51;
  uint64_t v52;
  size_t v53;
  const void *v54;
  const void **v55;
  const char *v56;
  uint64_t v57;
  pid_t v59;
  uint64_t i;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  int v70;
  char **v71;
  pid_t *v72;
  char **__p;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  posix_spawn_file_actions_t v80;
  _BYTE __dst[24];
  _BYTE v82[32];
  __int128 v83;
  __int128 v84;
  _QWORD v85[2];
  std::string v86;
  uint64_t v87;
  __int16 v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD v91[2];
  const void *v92[3];
  _BYTE v93[15];
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v88 = 261;
  v86.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v86.__r_.__value_.__l.__size_ = a3;
  if (llvm::sys::fs::access((unsigned __int8 *)&v86, 0))
  {
    if (!a10)
      return 0;
    v82[23] = 12;
    strcpy(v82, "Executable \"");
    if (!a2)
    {
      v21 = 0;
      v22 = 0;
      v23 = 0;
      memset(v92, 0, sizeof(v92));
LABEL_46:
      v38 = v23 < 0;
      if (v23 >= 0)
        v39 = (const std::string::value_type *)v92;
      else
        v39 = v22;
      v40 = v23 & 0x7F;
      if (v38)
        v41 = (std::string::size_type)v21;
      else
        v41 = v40;
      v42 = std::string::append((std::string *)v82, v39, v41);
      v43 = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v86.__r_.__value_.__l.__data_ = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      v86.__r_.__value_.__r.__words[2] = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      __dst[23] = 16;
      strcpy(__dst, "\" doesn't exist!");
      v44 = std::string::append(&v86, __dst, 0x10uLL);
      v45 = v44->__r_.__value_.__r.__words[0];
      *(_QWORD *)v93 = v44->__r_.__value_.__l.__size_;
      *(_QWORD *)&v93[7] = *(std::string::size_type *)((char *)&v44->__r_.__value_.__r.__words[1] + 7);
      v46 = HIBYTE(v44->__r_.__value_.__r.__words[2]);
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a10 + 23) < 0)
        operator delete(*(void **)a10);
      v47 = *(_QWORD *)v93;
      *(_QWORD *)a10 = v45;
      *(_QWORD *)(a10 + 8) = v47;
      *(_QWORD *)(a10 + 15) = *(_QWORD *)&v93[7];
      *(_BYTE *)(a10 + 23) = v46;
      if ((__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v86.__r_.__value_.__l.__data_);
      if (SHIBYTE(v92[2]) < 0)
        operator delete((void *)v92[0]);
      if ((v82[23] & 0x80000000) != 0)
        operator delete(*(void **)v82);
      return 0;
    }
    if (a3 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (a3 >= 0x17)
      {
        v36 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a3 | 7) != 0x17)
          v36 = a3 | 7;
        v37 = v36 + 1;
        v18 = (const void **)operator new(v36 + 1);
        v92[1] = (const void *)a3;
        v92[2] = (const void *)(v37 | 0x8000000000000000);
        v92[0] = v18;
      }
      else
      {
        HIBYTE(v92[2]) = a3;
        v18 = v92;
        if (!a3)
          goto LABEL_45;
      }
      memmove(v18, a2, a3);
LABEL_45:
      *((_BYTE *)v18 + a3) = 0;
      v23 = HIBYTE(v92[2]);
      v21 = v92[1];
      v22 = (const std::string::value_type *)v92[0];
      goto LABEL_46;
    }
LABEL_73:
    abort();
  }
  v72 = a1;
  *(_OWORD *)&v86.__r_.__value_.__l.__data_ = 0uLL;
  v86.__r_.__value_.__r.__words[2] = (std::string::size_type)&v88;
  v87 = 0x400000000;
  v89 = v91;
  v90 = 0;
  v91[0] = 0;
  v91[1] = 1;
  *(_QWORD *)v93 = &v86;
  sub_1C5E83430((char **)v82, a4, a5, (uint64_t *)v93);
  v19 = *(char *const **)v82;
  if (*(_BYTE *)(a6 + 16))
  {
    sub_1C5E83430((char **)v82, *(_QWORD *)a6, *(_QWORD *)(a6 + 8), (uint64_t *)v93);
    v20 = *(char ***)v82;
  }
  else
  {
    v20 = 0;
  }
  __p = (char **)v19;
  if (a9)
  {
    v24 = fork();
    if (v24)
    {
      if (v24 != -1)
      {
        *a1 = v24;
        a1[1] = v24;
        v25 = 1;
        goto LABEL_108;
      }
      v82[23] = 13;
      strcpy(v82, "Couldn't fork");
      sub_1C5E8327C(a10, (const void **)v82, 0xFFFFFFFFLL);
LABEL_16:
      v25 = 0;
      goto LABEL_108;
    }
    if (a8)
    {
      v78 = *a7;
      v79 = *((_QWORD *)a7 + 2);
      v25 = 0;
      if ((sub_1C5E83718((uint64_t)&v78, 0, a10) & 1) != 0)
        goto LABEL_108;
      v76 = *(__int128 *)((char *)a7 + 24);
      v77 = *((_QWORD *)a7 + 5);
      if ((sub_1C5E83718((uint64_t)&v76, 1, a10) & 1) != 0)
        goto LABEL_16;
      if (*((_BYTE *)a7 + 40)
        && *((_BYTE *)a7 + 64)
        && (v48 = *((_QWORD *)a7 + 4), v48 == *((_QWORD *)a7 + 7))
        && (!v48 || !memcmp(*((const void **)a7 + 3), *((const void **)a7 + 6), v48)))
      {
        if (dup2(1, 2) == -1)
        {
          v65 = (char *)operator new(0x20uLL);
          *(_QWORD *)v82 = v65;
          *(_OWORD *)&v82[8] = xmmword_1C6613090;
          strcpy(v65, "Can't redirect stderr to stdout");
          sub_1C5E8327C(a10, (const void **)v82, 0xFFFFFFFFLL);
          operator delete(v65);
          goto LABEL_16;
        }
      }
      else
      {
        v74 = a7[3];
        v75 = *((_QWORD *)a7 + 8);
        if ((sub_1C5E83718((uint64_t)&v74, 2, a10) & 1) != 0)
          goto LABEL_16;
      }
    }
    getrlimit(2, (rlimit *)v82);
    *(_QWORD *)v82 = (unint64_t)a9 << 20;
    setrlimit(2, (const rlimit *)v82);
    getrlimit(5, (rlimit *)v82);
    *(_QWORD *)v82 = (unint64_t)a9 << 20;
    setrlimit(5, (const rlimit *)v82);
    if (a3 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_73;
    if (a3 >= 0x17)
    {
      v67 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v67 = a3 | 7;
      v68 = v67 + 1;
      v66 = operator new(v67 + 1);
      *(_QWORD *)&v82[8] = a3;
      *(_QWORD *)&v82[16] = v68 | 0x8000000000000000;
      *(_QWORD *)v82 = v66;
    }
    else
    {
      v82[23] = a3;
      v66 = v82;
      if (!a3)
      {
LABEL_126:
        v66[a3] = 0;
        if (v82[23] >= 0)
          v69 = v82;
        else
          v69 = *(const char **)v82;
        if (v20)
          execve(v69, __p, v20);
        else
          execv(v69, __p);
        if (*__error() == 2)
          v70 = 127;
        else
          v70 = 126;
        _exit(v70);
      }
    }
    memmove(v66, a2, a3);
    goto LABEL_126;
  }
  v80 = 0;
  v85[0] = 0;
  v83 = 0u;
  v84 = 0u;
  memset(v82, 0, sizeof(v82));
  v71 = v20;
  if (!a8)
  {
    v49 = 0;
    goto LABEL_76;
  }
  v26 = 0;
  memset(v92, 0, sizeof(v92));
  v27 = v92;
  do
  {
    v28 = (uint64_t)a7 + v26;
    if (!*((_BYTE *)a7 + v26 + 16))
      goto LABEL_31;
    v29 = *(_QWORD *)(v28 + 8);
    if (v29 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_73;
    v30 = *(const void **)v28;
    if (v29 >= 0x17)
    {
      v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v29 | 7) != 0x17)
        v32 = v29 | 7;
      v33 = v32 + 1;
      v31 = operator new(v32 + 1);
      *(_QWORD *)&__dst[8] = v29;
      *(_QWORD *)&__dst[16] = v33 | 0x8000000000000000;
      *(_QWORD *)__dst = v31;
    }
    else
    {
      __dst[23] = *(_QWORD *)(v28 + 8);
      v31 = __dst;
      if (!v29)
        goto LABEL_28;
    }
    memmove(v31, v30, v29);
LABEL_28:
    v31[v29] = 0;
    v34 = &v82[v26];
    if ((char)v82[v26 + 23] < 0)
      operator delete(*(void **)v34);
    *(_OWORD *)v34 = *(_OWORD *)__dst;
    *((_QWORD *)v34 + 2) = *(_QWORD *)&__dst[16];
    *v27 = v34;
LABEL_31:
    v26 += 24;
    ++v27;
  }
  while (v26 != 72);
  posix_spawn_file_actions_init(&v80);
  if ((sub_1C5E8363C((uint64_t)v92[0], 0, a10, &v80) & 1) != 0
    || (sub_1C5E8363C((uint64_t)v92[1], 1, a10, &v80) & 1) != 0)
  {
    goto LABEL_40;
  }
  if (*((_BYTE *)a7 + 40)
    && *((_BYTE *)a7 + 64)
    && (v35 = *((_QWORD *)a7 + 4), v35 == *((_QWORD *)a7 + 7))
    && (!v35 || !memcmp(*((const void **)a7 + 3), *((const void **)a7 + 6), v35)))
  {
    v62 = posix_spawn_file_actions_adddup2(&v80, 1, 2);
    if ((_DWORD)v62)
    {
      v63 = v62;
      v64 = (char *)operator new(0x20uLL);
      *(_QWORD *)__dst = v64;
      *(_OWORD *)&__dst[8] = xmmword_1C6613090;
      strcpy(v64, "Can't redirect stderr to stdout");
      sub_1C5E8327C(a10, (const void **)__dst, v63);
      operator delete(v64);
      goto LABEL_40;
    }
  }
  else if ((sub_1C5E8363C((uint64_t)v92[2], 2, a10, &v80) & 1) != 0)
  {
LABEL_40:
    v25 = 0;
    goto LABEL_103;
  }
  v49 = &v80;
  v20 = v71;
LABEL_76:
  v50 = 0;
  if (v20)
    v51 = v20;
  else
    v51 = (char *const *)*MEMORY[0x1E0C831D0];
  v52 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((a3 | 7) != 0x17)
    v52 = a3 | 7;
  v53 = v52 + 1;
  v54 = (const void *)((v52 + 1) | 0x8000000000000000);
  while (2)
  {
    *(_DWORD *)__dst = 0;
    if (a2)
    {
      if (a3 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_73;
      if (a3 >= 0x17)
      {
        v55 = (const void **)operator new(v53);
        v92[1] = (const void *)a3;
        v92[2] = v54;
        v92[0] = v55;
      }
      else
      {
        HIBYTE(v92[2]) = a3;
        v55 = v92;
        if (!a3)
          goto LABEL_90;
      }
      memmove(v55, a2, a3);
LABEL_90:
      *((_BYTE *)v55 + a3) = 0;
      if (SHIBYTE(v92[2]) >= 0)
        v56 = (const char *)v92;
      else
        v56 = (const char *)v92[0];
    }
    else
    {
      memset(v92, 0, sizeof(v92));
      v56 = (const char *)v92;
    }
    v57 = posix_spawn((pid_t *)__dst, v56, v49, 0, v19, v51);
    if (SHIBYTE(v92[2]) < 0)
      operator delete((void *)v92[0]);
    if ((_DWORD)v57 == 4 && v50++ < 7)
      continue;
    break;
  }
  if (v49)
    posix_spawn_file_actions_destroy(v49);
  v25 = (_DWORD)v57 == 0;
  if ((_DWORD)v57)
  {
    HIBYTE(v92[2]) = 18;
    strcpy((char *)v92, "posix_spawn failed");
    sub_1C5E8327C(a10, v92, v57);
  }
  else
  {
    v59 = *(_DWORD *)__dst;
    *v72 = *(_DWORD *)__dst;
    v72[1] = v59;
  }
LABEL_103:
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v85[i]) < 0)
      operator delete((void *)v85[i - 2]);
  }
  v20 = v71;
LABEL_108:
  if (v20)
    operator delete(v20);
  if (__p)
    operator delete(__p);
  sub_1C4926AE8((uint64_t)&v86);
  return v25;
}

uint64_t llvm::sys::Wait(pid_t *a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5)
{
  pid_t v9;
  int v10;
  unsigned int v11;
  pid_t v12;
  unsigned int v13;
  __darwin_time_t v14;
  uint64_t ru_maxrss;
  int v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v21;
  uint64_t v22;
  rusage v23;
  int v24;
  sigaction v25;
  sigaction v26;
  char __strerrbuf[2000];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v9 = *a1;
  if ((a3 & 1) != 0)
  {
    v10 = 0;
    v11 = 0;
  }
  else
  {
    v11 = a2;
    if (a2)
    {
      v26.__sigaction_u.__sa_handler = (void (__cdecl *)(int))nullsub_1418;
      *(_QWORD *)&v26.sa_mask = 0;
      sigaction(14, &v26, &v25);
      alarm(v11);
      v10 = 0;
    }
    else
    {
      v10 = 1;
    }
  }
  v24 = 0;
  if (a5 && *(_BYTE *)(a5 + 24))
    *(_BYTE *)(a5 + 24) = 0;
  while (1)
  {
    v12 = wait4(v9, &v24, v10, &v23);
    v13 = v12;
    if (!a3 || v12 != -1)
      break;
    if (*__error() != 4)
    {
      v13 = -1;
      if (*a1 == -1)
        goto LABEL_21;
      goto LABEL_16;
    }
  }
  if (v12 == *a1)
    goto LABEL_21;
  if (!v12)
    return v13;
LABEL_16:
  if (v11 && *__error() == 4)
  {
    kill(*a1, 9);
    alarm(0);
    sigaction(14, &v25, 0);
    if (wait(&v24) == v9)
    {
      __strerrbuf[23] = 15;
      strcpy(__strerrbuf, "Child timed out");
      sub_1C5E8327C(a4, (const void **)__strerrbuf, 0);
    }
    else
    {
      v19 = (char *)operator new(0x28uLL);
      *(_QWORD *)__strerrbuf = v19;
      *(_OWORD *)&__strerrbuf[8] = xmmword_1C85F4380;
      strcpy(v19, "Child timed out but wouldn't die");
      sub_1C5E8327C(a4, (const void **)__strerrbuf, 0xFFFFFFFFLL);
      operator delete(v19);
    }
    return v13;
  }
  if (*__error() != 4)
  {
    v18 = (char *)operator new(0x20uLL);
    *(_QWORD *)__strerrbuf = v18;
    *(_OWORD *)&__strerrbuf[8] = xmmword_1C6613090;
    strcpy(v18, "Error waiting for child process");
    sub_1C5E8327C(a4, (const void **)__strerrbuf, 0xFFFFFFFFLL);
    operator delete(v18);
    return v13;
  }
LABEL_21:
  if (v11 && (a3 & 1) == 0)
  {
    alarm(0);
    sigaction(14, &v25, 0);
  }
  if (a5)
  {
    v14 = v23.ru_utime.tv_usec + 1000000 * v23.ru_utime.tv_sec;
    ru_maxrss = v23.ru_maxrss;
    v16 = *(unsigned __int8 *)(a5 + 24);
    *(_QWORD *)a5 = v14 + 1000000 * v23.ru_stime.tv_sec + v23.ru_stime.tv_usec;
    *(_QWORD *)(a5 + 8) = v14;
    *(_QWORD *)(a5 + 16) = ru_maxrss;
    if (!v16)
      *(_BYTE *)(a5 + 24) = 1;
  }
  if ((v24 & 0x7F) != 0x7F)
  {
    if ((v24 & 0x7F) != 0)
    {
      if (a4)
      {
        v17 = strsignal(v24 & 0x7F);
        MEMORY[0x1CAA32ABC](a4, v17);
        if ((v24 & 0x80) != 0)
          std::string::append((std::string *)a4, " (core dumped)");
      }
    }
    else if (BYTE1(v24) == 126)
    {
      if (a4)
        MEMORY[0x1CAA32ABC](a4, "Program could not be executed");
    }
    else if (BYTE1(v24) == 127 && a4)
    {
      v21 = 0uLL;
      v22 = 0;
      __strerrbuf[0] = 0;
      strerror_r(2, __strerrbuf, 0x7CFuLL);
      MEMORY[0x1CAA32ABC](&v21, __strerrbuf);
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      *(_OWORD *)a4 = v21;
      *(_QWORD *)(a4 + 16) = v22;
    }
  }
  return v13;
}

uint64_t llvm::sys::ExecuteNoWait(const void *a1, std::string::size_type a2, uint64_t a3, uint64_t a4, __int128 *a5, __int128 *a6, uint64_t a7, unsigned int a8, uint64_t a9, _BYTE *a10)
{
  BOOL v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  LODWORD(v14) = 0;
  v15 = 0;
  if (a10)
    *a10 = 0;
  v12 = *a5;
  v13 = *((_QWORD *)a5 + 2);
  v10 = sub_1C5E81FD4((pid_t *)&v14, a1, a2, a3, a4, (uint64_t)&v12, a6, a7, a8, a9);
  if (a10 && !v10)
    *a10 = 1;
  return v14;
}

uint64_t llvm::sys::commandLineFitsWithinSystemLimits(uint64_t a1, uint64_t a2, const char **a3, unint64_t a4)
{
  uint64_t v8;
  const char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x1E0C80C00];
  v15 = v17;
  v16 = 0x800000000;
  if (a4 < 9)
  {
    if (!a4)
    {
      v11 = 0;
      v10 = v17;
      goto LABEL_6;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, (uint64_t)v17, a4, 16);
  }
  v8 = 8 * a4;
  do
  {
    v9 = *a3++;
    v14 = v9;
    sub_1C54BEEDC((uint64_t)&v15, &v14);
    v8 -= 8;
  }
  while (v8);
  v10 = v15;
  v11 = v16;
LABEL_6:
  v12 = llvm::sys::commandLineFitsWithinSystemLimits(a1, a2, (uint64_t)v10, v11);
  if (v15 != v17)
    free(v15);
  return v12;
}

uint64_t llvm::sys::commandLineFitsWithinSystemLimits(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v7 = atomic_load((unsigned __int8 *)&qword_1ED825D60);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1ED825D60))
  {
    qword_1ED825D58 = sysconf(1);
    __cxa_guard_release(&qword_1ED825D60);
  }
  if (qword_1ED825D58 >= 0)
    v8 = qword_1ED825D58;
  else
    v8 = qword_1ED825D58 + 1;
  v9 = v8 >> 1;
  if (qword_1ED825D58 >= 0x20000)
    v9 = 0x10000;
  if (qword_1ED825D58 == -1 || !a4)
    return 1;
  v10 = a2 + 1;
  v11 = (unint64_t *)(a3 + 8);
  v12 = 16 * a4;
  while (1)
  {
    v14 = *v11;
    v11 += 2;
    v13 = v14;
    if (v14 >> 17)
      break;
    v10 += v13 + 1;
    if (v10 > v9)
      break;
    v12 -= 16;
    if (!v12)
      return 1;
  }
  return 0;
}

double llvm::sys::findProgramByName@<D0>(void *__s@<X0>, size_t __n@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  size_t v7;
  _BYTE *v9;
  __int128 *v10;
  uint64_t v11;
  unint64_t v12;
  const void *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  double result;
  _BYTE *v20;
  uint64_t v21;
  size_t v22;
  size_t v23;
  __int128 *p_dst;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  size_t v29;
  const std::error_category *v30;
  uint64_t v31;
  uint64_t v32;
  void **v34;
  __int16 v35;
  _QWORD *v36;
  __int16 v37;
  _QWORD *v38;
  __int16 v39;
  __int128 __dst;
  unint64_t v41;
  __int16 v42;
  void *__src;
  __int128 __len;
  _BYTE v45[128];
  __int128 v46;
  _QWORD v47[34];

  v7 = __n;
  v47[32] = *MEMORY[0x1E0C80C00];
  if (__n)
  {
    v9 = memchr(__s, 47, __n);
    if (v9)
    {
      if (v9 - (_BYTE *)__s != -1)
      {
        if (v7 > 0x7FFFFFFFFFFFFFF7)
LABEL_44:
          abort();
        if (v7 >= 0x17)
        {
          v31 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v7 | 7) != 0x17)
            v31 = v7 | 7;
          v32 = v31 + 1;
          v10 = (__int128 *)operator new(v31 + 1);
          *((_QWORD *)&v46 + 1) = v7;
          v47[0] = v32 | 0x8000000000000000;
          *(_QWORD *)&v46 = v10;
        }
        else
        {
          HIBYTE(v47[0]) = v7;
          v10 = &v46;
        }
        memmove(v10, __s, v7);
        *((_BYTE *)v10 + v7) = 0;
        *(_BYTE *)(a5 + 24) &= ~1u;
        result = *(double *)&v46;
        *(_OWORD *)a5 = v46;
        *(_QWORD *)(a5 + 16) = v47[0];
        return result;
      }
    }
  }
  *(_QWORD *)&v46 = v47;
  *((_QWORD *)&v46 + 1) = 0x1000000000;
  if (a4)
  {
    v11 = a3 + 16 * a4;
    goto LABEL_9;
  }
  v27 = getenv("PATH");
  if (v27)
  {
    v28 = (uint64_t)v27;
    v29 = strlen(v27);
    llvm::SplitString(v28, v29, (uint64_t)&v46, ":", 1);
    if (DWORD2(v46))
    {
      a3 = v46;
      v11 = v46 + 16 * DWORD2(v46);
      while (1)
      {
LABEL_9:
        v12 = *(_QWORD *)(a3 + 8);
        if (!v12)
          goto LABEL_30;
        v13 = *(const void **)a3;
        __src = v45;
        __len = xmmword_1C85F20B0;
        if (v12 >= 0x81)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__src, v45, v12, 1);
          v15 = __src;
          v14 = __len;
        }
        else
        {
          v14 = 0;
          v15 = v45;
        }
        memcpy(&v15[v14], v13, v12);
        *(_QWORD *)&__len = __len + v12;
        v42 = 261;
        *(_QWORD *)&__dst = __s;
        *((_QWORD *)&__dst + 1) = v7;
        v39 = 257;
        v37 = 257;
        v35 = 257;
        llvm::sys::path::append(&__src, 0, (_QWORD **)&__dst, &v38, &v36, &v34);
        v16 = __len;
        if ((unint64_t)(__len + 1) > *((_QWORD *)&__len + 1))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__src, v45, __len + 1, 1);
          v16 = __len;
        }
        *((_BYTE *)__src + v16) = 0;
        v42 = 257;
        if (*(_BYTE *)__src)
        {
          *(_QWORD *)&__dst = __src;
          v17 = 3;
        }
        else
        {
          v17 = 1;
        }
        LOBYTE(v42) = v17;
        v18 = llvm::sys::fs::access((unsigned __int8 *)&__dst, 2);
        v20 = __src;
        v21 = v18;
        if (!v18)
          break;
LABEL_27:
        if (v20 != v45)
          free(v20);
        if (!v21)
          goto LABEL_37;
LABEL_30:
        a3 += 16;
        if (a3 == v11)
          goto LABEL_36;
      }
      v22 = __len;
      if ((unint64_t)__len > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_44;
      v23 = v7;
      if ((unint64_t)__len >= 0x17)
      {
        v25 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
        if (((unint64_t)__len | 7) != 0x17)
          v25 = __len | 7;
        v26 = v25 + 1;
        p_dst = (__int128 *)operator new(v25 + 1);
        *((_QWORD *)&__dst + 1) = v22;
        v41 = v26 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v41) = __len;
        p_dst = &__dst;
        if (!(_QWORD)__len)
          goto LABEL_26;
      }
      memmove(p_dst, v20, v22);
LABEL_26:
      *((_BYTE *)p_dst + v22) = 0;
      *(_BYTE *)(a5 + 24) &= ~1u;
      result = *(double *)&__dst;
      *(_OWORD *)a5 = __dst;
      *(_QWORD *)(a5 + 16) = v41;
      v20 = __src;
      v7 = v23;
      goto LABEL_27;
    }
  }
LABEL_36:
  *(_BYTE *)(a5 + 24) |= 1u;
  v30 = std::generic_category();
  *(_QWORD *)a5 = 2;
  *(_QWORD *)(a5 + 8) = v30;
LABEL_37:
  if ((_QWORD *)v46 != v47)
    free((void *)v46);
  return result;
}

void sub_1C5E8327C(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v3;
  char v6;
  int v7;
  size_t v8;
  size_t v9;
  std::string *v10;
  const void *v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  char v16;
  uint64_t v17;
  void *__p[2];
  char v19;
  std::string v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v3 = a3;
    if ((_DWORD)a3 == -1)
      v3 = *__error();
    v6 = *((_BYTE *)a2 + 23);
    v7 = v6;
    v8 = v6 & 0x7F;
    if (v7 >= 0)
      v9 = v8;
    else
      v9 = (size_t)a2[1];
    v10 = &v20;
    sub_1C484371C((uint64_t)&v20, v9 + 2);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v10 = (std::string *)v20.__r_.__value_.__r.__words[0];
    if (v9)
    {
      if (*((char *)a2 + 23) >= 0)
        v11 = a2;
      else
        v11 = *a2;
      memmove(v10, v11, v9);
    }
    strcpy((char *)v10 + v9, ": ");
    llvm::sys::StrError(v3, __p);
    if (v19 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if (v19 >= 0)
      v13 = v19 & 0x7F;
    else
      v13 = (std::string::size_type)__p[1];
    v14 = std::string::append(&v20, (const std::string::value_type *)v12, v13);
    v15 = v14->__r_.__value_.__r.__words[0];
    v21[0] = v14->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v21 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
    v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v17 = v21[0];
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 15) = *(_QWORD *)((char *)v21 + 7);
    *(_BYTE *)(a1 + 23) = v16;
    if (v19 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
  }
}

uint64_t llvm::sys::ChangeStdinToBinary(llvm::sys *this)
{
  std::system_category();
  return 0;
}

uint64_t llvm::sys::ChangeStdoutToBinary(llvm::sys *this)
{
  std::system_category();
  return 0;
}

void sub_1C5E83430(char **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  size_t v9;
  const void *v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    v6 = a2;
    v7 = 0;
    v8 = a2 + 16 * a3;
    do
    {
      v10 = *(const void **)v6;
      v9 = *(_QWORD *)(v6 + 8);
      v11 = (_BYTE *)sub_1C484358C(*a4, v9 + 1, 0);
      v12 = v11;
      if (v9)
        memcpy(v11, v10, v9);
      v12[v9] = 0;
      v13 = (unint64_t)a1[2];
      if ((unint64_t)v7 >= v13)
      {
        v14 = *a1;
        v15 = (v7 - *a1) >> 3;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61)
          goto LABEL_44;
        v17 = v13 - (_QWORD)v14;
        if (v17 >> 2 > v16)
          v16 = v17 >> 2;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          if (v18 >> 61)
            goto LABEL_45;
          v19 = (char *)operator new(8 * v18);
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[8 * v15];
        *(_QWORD *)v20 = v12;
        v21 = v20 + 8;
        if (v7 != v14)
        {
          do
          {
            v22 = *((_QWORD *)v7 - 1);
            v7 -= 8;
            *((_QWORD *)v20 - 1) = v22;
            v20 -= 8;
          }
          while (v7 != v14);
          v7 = *a1;
        }
        *a1 = v20;
        a1[1] = v21;
        a1[2] = &v19[8 * v18];
        if (v7)
          operator delete(v7);
        v7 = v21;
      }
      else
      {
        *(_QWORD *)v7 = v12;
        v7 += 8;
      }
      a1[1] = v7;
      v6 += 16;
    }
    while (v6 != v8);
    v23 = (unint64_t)a1[2];
    if ((unint64_t)v7 < v23)
    {
      *(_QWORD *)v7 = 0;
      v24 = v7 + 8;
      goto LABEL_43;
    }
    v25 = *a1;
  }
  else
  {
    v25 = 0;
    v7 = 0;
    v23 = 0;
  }
  v26 = (v7 - v25) >> 3;
  v27 = v26 + 1;
  if ((unint64_t)(v26 + 1) >> 61)
LABEL_44:
    abort();
  v28 = v23 - (_QWORD)v25;
  if (v28 >> 2 > v27)
    v27 = v28 >> 2;
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
    v29 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v29 = v27;
  if (v29)
  {
    if (v29 >> 61)
LABEL_45:
      sub_1C4764EE4();
    v30 = (char *)operator new(8 * v29);
  }
  else
  {
    v30 = 0;
  }
  v31 = &v30[8 * v26];
  *(_QWORD *)v31 = 0;
  v24 = v31 + 8;
  if (v7 != v25)
  {
    do
    {
      v32 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v31 - 1) = v32;
      v31 -= 8;
    }
    while (v7 != v25);
    v25 = *a1;
  }
  *a1 = v31;
  a1[1] = v24;
  a1[2] = &v30[8 * v29];
  if (v25)
    operator delete(v25);
LABEL_43:
  a1[1] = v24;
}

uint64_t sub_1C5E8363C(uint64_t result, int a2, uint64_t a3, posix_spawn_file_actions_t *a4)
{
  const char *v5;
  int v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  __int128 v10;

  if (result)
  {
    if (*(char *)(result + 23) < 0)
    {
      if (*(_QWORD *)(result + 8))
        v5 = *(const char **)result;
      else
        v5 = "/dev/null";
    }
    else if (*(_BYTE *)(result + 23))
    {
      v5 = (const char *)result;
    }
    else
    {
      v5 = "/dev/null";
    }
    if (a2)
      v6 = 513;
    else
      v6 = 0;
    result = posix_spawn_file_actions_addopen(a4, a2, v5, v6, 0x1B6u);
    if ((_DWORD)result)
    {
      v7 = result;
      v8 = operator new(0x28uLL);
      v9 = v8;
      v10 = xmmword_1C8662E90;
      strcpy((char *)v8, "Cannot posix_spawn_file_actions_addopen");
      sub_1C5E8327C(a3, &v9, v7);
      operator delete(v8);
      return 1;
    }
  }
  return result;
}

uint64_t sub_1C5E83718(uint64_t a1, int a2, uint64_t a3)
{
  std::string::size_type v5;
  const void *v6;
  std::string *p_dst;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  int v12;
  int v13;
  std::string *v14;
  std::string::size_type v15;
  const std::string::value_type *v16;
  std::string *v17;
  std::string v19;
  std::string v20;
  std::string __dst;
  std::string v22;

  if (!*(_BYTE *)(a1 + 16))
    return 0;
  memset(&v22, 0, sizeof(v22));
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v6 = *(const void **)a1;
    if (v5 >= 0x17)
    {
      v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v9 = v5 | 7;
      v10 = v9 + 1;
      p_dst = (std::string *)operator new(v9 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(a1 + 8);
      p_dst = &__dst;
    }
    memmove(p_dst, v6, v5);
    p_dst->__r_.__value_.__s.__data_[v5] = 0;
    v22 = __dst;
  }
  else
  {
    MEMORY[0x1CAA32ABC](&v22, "/dev/null");
  }
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v22;
  else
    v11 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if (a2)
    v12 = open((const char *)v11, 513, 438);
  else
    v12 = open((const char *)v11, 0, 438);
  if (v12 == -1)
  {
    std::operator+<char>();
    v14 = std::string::append(&v19, "' for ");
    v15 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (a2)
      v16 = "output";
    else
      v16 = "input";
    v17 = std::string::append(&v20, v16);
    __dst = *v17;
    v17->__r_.__value_.__r.__words[0] = 0;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    sub_1C5E8327C(a3, (const void **)&__dst.__r_.__value_.__l.__data_, 0xFFFFFFFFLL);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = v12;
    if (dup2(v12, a2) != -1)
    {
      close(v13);
      v8 = 0;
      goto LABEL_32;
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 11;
    strcpy((char *)&__dst, "Cannot dup2");
    sub_1C5E8327C(a3, (const void **)&__dst.__r_.__value_.__l.__data_, 0xFFFFFFFFLL);
    close(v13);
  }
  v8 = 1;
LABEL_32:
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  return v8;
}

uint64_t llvm::sys::RunSignalHandlers(llvm::sys *this)
{
  uint64_t *v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t result;

  v1 = &qword_1EF8F7560;
  do
  {
    v2 = (unsigned int *)(v1 + 2);
    while (1)
    {
      v3 = __ldaxr(v2);
      if (v3 != 2)
        break;
      if (!__stlxr(3u, v2))
      {
        result = ((uint64_t (*)(uint64_t))*v1)(v1[1]);
        *v1 = 0;
        v1[1] = 0;
        atomic_store(0, (unsigned int *)v1 + 4);
        goto LABEL_7;
      }
    }
    __clrex();
LABEL_7:
    v1 += 3;
  }
  while (v1 != (uint64_t *)&unk_1EF8F7620);
  return result;
}

uint64_t sub_1C5E839DC(unsigned __int8 *a1, unint64_t a2, uint64_t a3, int a4)
{
  const std::error_category *v7;
  char *v8;
  char *v9;
  size_t v10;
  char *v11;
  void **v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  char v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25[2];
  void *__p;
  unint64_t v27;
  __int16 *v28;
  uint64_t v29;
  __int16 v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD v33[2];
  void *v34[2];
  char v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v25[0] = (uint64_t)a1;
  v25[1] = a2;
  if (byte_1EF8F5840
    || getenv("LLVM_DISABLE_SYMBOLIZATION")
    || llvm::StringRef::find(v25, "llvm-symbolizer", 0xFuLL, 0) != -1)
  {
    return 0;
  }
  v7 = std::system_category();
  v36 = -1;
  v34[0] = 0;
  v34[1] = (void *)v7;
  v8 = getenv("LLVM_SYMBOLIZER_PATH");
  if (v8)
  {
    v9 = v8;
    v10 = strlen(v8);
    v11 = v9;
    v12 = 0;
    v13 = 0;
  }
  else
  {
    if (!a2)
      goto LABEL_18;
    v14 = sub_1C5E7BE8C(a1, a2, 0);
    v15 = a2 >= v14 ? v14 : a2;
    if (v14 == -1)
    {
      v15 = 0;
      v16 = 0;
    }
    else
    {
      v16 = a1;
    }
    v22 = v16;
    v23 = v15;
    if (!v15)
      goto LABEL_18;
    v11 = "llvm-symbolizer";
    v12 = &v22;
    v10 = 15;
    v13 = 1;
  }
  llvm::sys::findProgramByName(v11, v10, (uint64_t)v12, v13, (uint64_t)&__p);
  sub_1C5E84858((uint64_t)v34, (uint64_t *)&__p);
  if ((v29 & 1) == 0 && SHIBYTE(v28) < 0)
    operator delete(__p);
LABEL_18:
  v17 = v36;
  if ((v36 & 1) != 0)
  {
    llvm::sys::findProgramByName("llvm-symbolizer", 0xFuLL, 0, 0, (uint64_t)&__p);
    sub_1C5E84858((uint64_t)v34, (uint64_t *)&__p);
    if ((v29 & 1) == 0 && SHIBYTE(v28) < 0)
      operator delete(__p);
    v17 = v36;
  }
  if ((v17 & 1) != 0)
    goto LABEL_38;
  v30 = 261;
  __p = a1;
  v27 = a2;
  if (!llvm::sys::fs::access((unsigned __int8 *)&__p, 0))
  {
    if (a2 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_43;
    if (a2 >= 0x17)
    {
      v19 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a2 | 7) != 0x17)
        v19 = a2 | 7;
      v20 = v19 + 1;
      v18 = operator new(v19 + 1);
      v23 = a2;
      v24 = v20 | 0x8000000000000000;
      v22 = v18;
    }
    else
    {
      HIBYTE(v24) = a2;
      v18 = &v22;
      if (!a2)
        goto LABEL_33;
    }
    memmove(v18, a1, a2);
LABEL_33:
    *((_BYTE *)v18 + a2) = 0;
    goto LABEL_34;
  }
  llvm::sys::fs::getMainExecutable((uint64_t)&v22);
LABEL_34:
  __p = 0;
  v27 = 0;
  v28 = &v30;
  v29 = 0x400000000;
  v31 = v33;
  v32 = 0;
  v33[0] = 0;
  v33[1] = 1;
  if (a4 < 0)
LABEL_43:
    abort();
  sub_1C4926AE8((uint64_t)&__p);
  if (SHIBYTE(v24) < 0)
    operator delete(v22);
  v17 = v36;
LABEL_38:
  if ((v17 & 1) == 0 && v35 < 0)
    operator delete(v34[0]);
  return 0;
}

uint64_t llvm::sys::unregisterHandlers(llvm::sys *this)
{
  uint64_t v1;
  uint64_t i;
  uint64_t result;
  unsigned int v4;

  v1 = atomic_load((unsigned int *)&unk_1EF8F7620);
  if ((_DWORD)v1)
  {
    for (i = 0; i != v1; ++i)
    {
      result = sigaction(*((_DWORD *)&unk_1EF8F7398 + 6 * i + 4), (const sigaction *)((char *)&unk_1EF8F7398 + 24 * i), 0);
      do
        v4 = __ldaxr((unsigned int *)&unk_1EF8F7620);
      while (__stlxr(v4 - 1, (unsigned int *)&unk_1EF8F7620));
    }
  }
  return result;
}

__int32 *llvm::sys::CleanupOnSignal(llvm::sys *this)
{
  __int32 v1;
  __int32 *v2;
  int *v3;
  __int32 *result;
  int *v5;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int v8;
  __int32 *v9;
  __int32 v10;
  uint64_t (*v11)(void);

  v1 = (int)this;
  v2 = wmemchr(&dword_1C8672CC8, (__int32)this, 2uLL);
  v3 = dword_1C8672CD0;
  if (v2)
    v3 = v2;
  if ((char *)v3 - (char *)&dword_1C8672CC8 == 8)
  {
    llvm::sys::RunInterruptHandlers((llvm::sys *)v2);
    result = wmemchr(dword_1C8672CD0, v1, 4uLL);
    v5 = &dword_1C8672CE0;
    if (result)
      v5 = result;
    if (v1 != 13 && (char *)v5 - (char *)dword_1C8672CD0 == 16)
    {
      v6 = &qword_1EF8F7560;
      do
      {
        v7 = (unsigned int *)(v6 + 2);
        while (1)
        {
          v8 = __ldaxr(v7);
          if (v8 != 2)
            break;
          if (!__stlxr(3u, v7))
          {
            result = (__int32 *)((uint64_t (*)(uint64_t))*v6)(v6[1]);
            *v6 = 0;
            v6[1] = 0;
            atomic_store(0, (unsigned int *)v6 + 4);
            goto LABEL_14;
          }
        }
        __clrex();
LABEL_14:
        v6 += 3;
      }
      while (v6 != (uint64_t *)&unk_1EF8F7620);
    }
  }
  else
  {
    result = __error();
    v9 = result;
    v10 = *result;
    v11 = (uint64_t (*)(void))atomic_load(&qword_1EF8F7628);
    if (v11)
      result = (__int32 *)v11();
    *v9 = v10;
  }
  return result;
}

int *sub_1C5E83E08()
{
  int *result;
  int *v1;
  int v2;
  uint64_t (*v3)(void);

  result = __error();
  v1 = result;
  v2 = *result;
  v3 = (uint64_t (*)(void))atomic_load(&qword_1EF8F7628);
  if (v3)
    result = (int *)v3();
  *v1 = v2;
  return result;
}

void llvm::sys::RunInterruptHandlers(llvm::sys *this)
{
  unint64_t v1;
  unint64_t *v2;
  const char *v3;
  stat v4;

  do
    v1 = __ldaxr(&qword_1EF8F7630);
  while (__stlxr(0, &qword_1EF8F7630));
  if (v1)
  {
    v2 = (unint64_t *)v1;
    do
    {
      do
        v3 = (const char *)__ldaxr(v2);
      while (__stlxr(0, v2));
      if (v3 && !stat(v3, &v4) && (v4.st_mode & 0xF000) == 0x8000)
      {
        unlink(v3);
        do
          __ldaxr(v2);
        while (__stlxr((unint64_t)v3, v2));
      }
      v2 = (unint64_t *)atomic_load(v2 + 1);
    }
    while (v2);
  }
  do
    __ldaxr(&qword_1EF8F7630);
  while (__stlxr(v1, &qword_1EF8F7630));
}

void llvm::sys::SetInterruptFunction(llvm::sys *this, void (*a2)(void))
{
  do
    __ldaxr(&qword_1ED825D80);
  while (__stlxr((unint64_t)this, &qword_1ED825D80));
  sub_1C5E83EFC();
}

void sub_1C5E83EFC()
{
  std::recursive_mutex *v1;
  int *v3;
  int v4;
  unsigned int v5;
  sigaction *v6;
  unsigned int v7;
  int *v8;
  int v9;
  unsigned int v10;
  sigaction *v11;
  unsigned int v12;
  unsigned int v14;
  sigaction *v15;
  unsigned int v16;
  int *v17;
  int v18;
  unsigned int v19;
  sigaction *v20;
  unsigned int v21;
  sigaction v22;

  if (!atomic_load(qword_1ED825D90))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED825D90, (void *(*)(void))sub_1C6246890, (void (*)(void *))sub_1C62468D0);
  v1 = (std::recursive_mutex *)qword_1ED825D90[0];
  std::recursive_mutex::lock((std::recursive_mutex *)qword_1ED825D90[0]);
  if (!atomic_load((unsigned int *)&unk_1EF8F7620))
  {
    v3 = dword_1C8672CD0;
    do
    {
      v4 = *v3;
      v5 = atomic_load((unsigned int *)&unk_1EF8F7620);
      v22.__sigaction_u.__sa_handler = (void (__cdecl *)(int))sub_1C5E84560;
      *(_QWORD *)&v22.sa_mask = 0x1500000000;
      v6 = (sigaction *)((char *)&unk_1EF8F7398 + 24 * v5);
      sigaction(v4, &v22, v6);
      LODWORD(v6[1].__sigaction_u.__sa_handler) = v4;
      do
        v7 = __ldaxr((unsigned int *)&unk_1EF8F7620);
      while (__stlxr(v7 + 1, (unsigned int *)&unk_1EF8F7620));
      ++v3;
    }
    while (v3 != &dword_1C8672CE0);
    v8 = &dword_1C8672CE0;
    do
    {
      v9 = *v8;
      v10 = atomic_load((unsigned int *)&unk_1EF8F7620);
      v22.__sigaction_u.__sa_handler = (void (__cdecl *)(int))sub_1C5E84560;
      *(_QWORD *)&v22.sa_mask = 0x1500000000;
      v11 = (sigaction *)((char *)&unk_1EF8F7398 + 24 * v10);
      sigaction(v9, &v22, v11);
      LODWORD(v11[1].__sigaction_u.__sa_handler) = v9;
      do
        v12 = __ldaxr((unsigned int *)&unk_1EF8F7620);
      while (__stlxr(v12 + 1, (unsigned int *)&unk_1EF8F7620));
      ++v8;
    }
    while (v8 != (int *)&llvm::thread::DefaultStackSize);
    if (atomic_load(&qword_1ED825D88))
    {
      v14 = atomic_load((unsigned int *)&unk_1EF8F7620);
      v22.__sigaction_u.__sa_handler = (void (__cdecl *)(int))sub_1C5E84560;
      *(_QWORD *)&v22.sa_mask = 0x1500000000;
      v15 = (sigaction *)((char *)&unk_1EF8F7398 + 24 * v14);
      sigaction(13, &v22, v15);
      LODWORD(v15[1].__sigaction_u.__sa_handler) = 13;
      do
        v16 = __ldaxr((unsigned int *)&unk_1EF8F7620);
      while (__stlxr(v16 + 1, (unsigned int *)&unk_1EF8F7620));
    }
    v17 = &dword_1C8672CC8;
    do
    {
      v18 = *v17;
      v19 = atomic_load((unsigned int *)&unk_1EF8F7620);
      v22.__sigaction_u.__sa_handler = (void (__cdecl *)(int))sub_1C5E83E08;
      *(_QWORD *)&v22.sa_mask = 0x100000000;
      v20 = (sigaction *)((char *)&unk_1EF8F7398 + 24 * v19);
      sigaction(v18, &v22, v20);
      LODWORD(v20[1].__sigaction_u.__sa_handler) = v18;
      do
        v21 = __ldaxr((unsigned int *)&unk_1EF8F7620);
      while (__stlxr(v21 + 1, (unsigned int *)&unk_1EF8F7620));
      ++v17;
    }
    while (v17 != dword_1C8672CD0);
  }
  std::recursive_mutex::unlock(v1);
}

void llvm::sys::SetInfoSignalFunction(llvm::sys *this, void (*a2)(void))
{
  do
    __ldaxr(&qword_1EF8F7628);
  while (__stlxr((unint64_t)this, &qword_1EF8F7628));
  sub_1C5E83EFC();
}

uint64_t llvm::sys::RemoveFileOnSignal(void *__src, size_t __len)
{
  void **p_dst;
  const char *v6;
  size_t v7;
  size_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  void **__dst;
  size_t v14;
  int64_t v15;

  if (!atomic_load((unint64_t *)&qword_1EF8F7548))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EF8F7548, (void *(*)(void))sub_1C5E848EC, (void (*)(void *))sub_1C5E84900);
  if (__src)
  {
    if (__len >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (__len >= 0x17)
    {
      v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len | 7) != 0x17)
        v7 = __len | 7;
      v8 = v7 + 1;
      p_dst = (void **)operator new(v7 + 1);
      v14 = __len;
      v15 = v8 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v15) = __len;
      p_dst = (void **)&__dst;
      if (!__len)
      {
LABEL_13:
        *((_BYTE *)p_dst + __len) = 0;
        if (v15 >= 0)
          v6 = (const char *)&__dst;
        else
          v6 = (const char *)__dst;
        goto LABEL_16;
      }
    }
    memmove(p_dst, __src, __len);
    goto LABEL_13;
  }
  __dst = 0;
  v14 = 0;
  v6 = (const char *)&__dst;
  v15 = 0;
LABEL_16:
  v9 = (_QWORD *)operator new();
  *v9 = strdup(v6);
  v9[1] = 0;
  do
  {
    v10 = __ldaxr(&qword_1EF8F7630);
    if (v10)
    {
      while (1)
      {
        __clrex();
        v11 = (unint64_t *)(v10 + 8);
        while (1)
        {
          v10 = __ldaxr(v11);
          if (v10)
            break;
          if (!__stlxr((unint64_t)v9, v11))
            goto LABEL_25;
        }
      }
    }
  }
  while (__stlxr((unint64_t)v9, &qword_1EF8F7630));
LABEL_25:
  if (SHIBYTE(v15) < 0)
    operator delete(__dst);
  sub_1C5E83EFC();
  return 0;
}

void llvm::sys::DontRemoveFileOnSignal(const void *a1, size_t a2)
{
  void **p_dst;
  uint64_t v5;
  uint64_t v6;
  std::recursive_mutex *v8;
  unint64_t *i;
  unint64_t *v10;
  const char *v11;
  size_t v12;
  size_t v13;
  size_t v14;
  size_t v15;
  void **v16;
  size_t v17;
  void *v19;
  void **__dst;
  size_t v21;
  int64_t v22;

  if (a1)
  {
    if (a2 >= 0x7FFFFFFFFFFFFFF8)
LABEL_40:
      abort();
    if (a2 >= 0x17)
    {
      v5 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a2 | 7) != 0x17)
        v5 = a2 | 7;
      v6 = v5 + 1;
      p_dst = (void **)operator new(v5 + 1);
      v21 = a2;
      v22 = v6 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v22) = a2;
      p_dst = (void **)&__dst;
      if (!a2)
        goto LABEL_11;
    }
    memmove(p_dst, a1, a2);
LABEL_11:
    *((_BYTE *)p_dst + a2) = 0;
    goto LABEL_12;
  }
  __dst = 0;
  v21 = 0;
  v22 = 0;
LABEL_12:
  if (!atomic_load(qword_1EF8F5858))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F5858, (void *(*)(void))sub_1C6246890, (void (*)(void *))sub_1C62468D0);
  v8 = (std::recursive_mutex *)qword_1EF8F5858[0];
  std::recursive_mutex::lock((std::recursive_mutex *)qword_1EF8F5858[0]);
  for (i = (unint64_t *)&unk_1EF8F7630; ; i = v10 + 1)
  {
    v10 = (unint64_t *)atomic_load(i);
    if (!v10)
      break;
    v11 = (const char *)atomic_load(v10);
    if (v11)
    {
      v12 = strlen(v11);
      v13 = HIBYTE(v22);
      v14 = v22 >= 0 ? HIBYTE(v22) & 0x7F : v21;
      if (v12 == v14)
      {
        v15 = v12;
        if (v22 < 0)
        {
          if (v12 == -1)
            goto LABEL_40;
          v16 = __dst;
          v13 = v21;
        }
        else
        {
          if (v12 == -1)
            goto LABEL_40;
          v16 = (void **)&__dst;
        }
        if (v13 >= v15)
          v17 = v15;
        else
          v17 = v13;
        if (!memcmp(v16, v11, v17) && v13 == v15)
        {
          do
            v19 = (void *)__ldaxr(v10);
          while (__stlxr(0, v10));
          if (v19)
            free(v19);
        }
      }
    }
  }
  std::recursive_mutex::unlock(v8);
  if (SHIBYTE(v22) < 0)
    operator delete(__dst);
}

void llvm::sys::AddSignalHandler(llvm::sys *this, void (*a2)(void *), void *a3)
{
  uint64_t *v3;
  unsigned int *v4;

  v3 = &qword_1EF8F7560;
LABEL_2:
  v4 = (unsigned int *)(v3 + 2);
  do
  {
    if (__ldaxr(v4))
    {
      __clrex();
      v3 += 3;
      if (v3 == (uint64_t *)&unk_1EF8F7620)
        llvm::report_fatal_error((llvm *)"too many signal callbacks already registered", (const char *)1);
      goto LABEL_2;
    }
  }
  while (__stlxr(1u, v4));
  *v3 = (uint64_t)this;
  v3[1] = (uint64_t)a2;
  atomic_store(2u, (unsigned int *)v3 + 4);
  sub_1C5E83EFC();
}

void llvm::sys::PrintStackTraceOnErrorSignal(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  unsigned int *v3;

  qword_1EF8F5848 = a1;
  unk_1EF8F5850 = a2;
  v2 = &qword_1EF8F7560;
LABEL_2:
  v3 = (unsigned int *)(v2 + 2);
  do
  {
    if (__ldaxr(v3))
    {
      __clrex();
      v2 += 3;
      if (v2 == (uint64_t *)&unk_1EF8F7620)
        llvm::report_fatal_error((llvm *)"too many signal callbacks already registered", (const char *)1);
      goto LABEL_2;
    }
  }
  while (__stlxr(1u, v3));
  *v2 = (uint64_t)llvm::errs;
  v2[1] = 0;
  atomic_store(2u, (unsigned int *)v2 + 4);
  sub_1C5E83EFC();
}

__int32 *sub_1C5E84560(__int32 a1)
{
  uint64_t v2;
  uint64_t i;
  unsigned int v4;
  llvm::sys *v5;
  uint64_t (*v6)(void);
  __int32 *result;
  int *v8;
  uint64_t *v9;
  unsigned int *v10;
  unsigned int v11;
  sigset_t v12;

  v2 = atomic_load((unsigned int *)&unk_1EF8F7620);
  if ((_DWORD)v2)
  {
    for (i = 0; i != v2; ++i)
    {
      sigaction(*((_DWORD *)&unk_1EF8F7398 + 6 * i + 4), (const sigaction *)((char *)&unk_1EF8F7398 + 24 * i), 0);
      do
        v4 = __ldaxr((unsigned int *)&unk_1EF8F7620);
      while (__stlxr(v4 - 1, (unsigned int *)&unk_1EF8F7620));
    }
  }
  v12 = -1;
  v5 = (llvm::sys *)sigprocmask(2, &v12, 0);
  llvm::sys::RunInterruptHandlers(v5);
  if (a1 == 13)
  {
    do
      v6 = (uint64_t (*)(void))__ldaxr(&qword_1ED825D88);
    while (__stlxr(0, &qword_1ED825D88));
    if (v6)
      return (__int32 *)v6();
  }
  result = wmemchr(dword_1C8672CD0, a1, 4uLL);
  v8 = &dword_1C8672CE0;
  if (result)
    v8 = result;
  if ((char *)v8 - (char *)dword_1C8672CD0 != 16)
  {
    do
      v6 = (uint64_t (*)(void))__ldaxr(&qword_1ED825D80);
    while (__stlxr(0, &qword_1ED825D80));
    if (!v6)
      return (__int32 *)raise(a1);
    return (__int32 *)v6();
  }
  if (a1 == 13)
    return (__int32 *)raise(a1);
  v9 = &qword_1EF8F7560;
  do
  {
    v10 = (unsigned int *)(v9 + 2);
    while (1)
    {
      v11 = __ldaxr(v10);
      if (v11 != 2)
        break;
      if (!__stlxr(3u, v10))
      {
        result = (__int32 *)((uint64_t (*)(uint64_t))*v9)(v9[1]);
        *v9 = 0;
        v9[1] = 0;
        atomic_store(0, (unsigned int *)v9 + 4);
        goto LABEL_19;
      }
    }
    __clrex();
LABEL_19:
    v9 += 3;
  }
  while (v9 != (uint64_t *)&unk_1EF8F7620);
  return result;
}

llvm::cl::Option *sub_1C5E846D4()
{
  llvm::cl::Option *v0;
  int v2;
  char *v3;
  __int128 v4;

  v0 = (llvm::cl::Option *)operator new();
  *(_QWORD *)&v4 = "Disable symbolizing crash backtraces.";
  *((_QWORD *)&v4 + 1) = 37;
  v3 = &byte_1EF8F5840;
  v2 = 1;
  return sub_1C639FF74(v0, &v4, &v3, &v2);
}

uint64_t sub_1C5E84738()
{
  uint64_t v0;
  uint64_t v2;
  int v4;
  std::string *v5;
  __int128 v6;
  __int128 v7;

  v0 = operator new();
  *(_QWORD *)&v7 = "directory";
  *((_QWORD *)&v7 + 1) = 9;
  *(_QWORD *)&v6 = "Directory for crash diagnostic files.";
  *((_QWORD *)&v6 + 1) = 37;
  if (!atomic_load((unint64_t *)&qword_1ED825D68))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1ED825D68, (void *(*)(void))sub_1C5E456F0, (void (*)(void *))sub_1C5E45720);
  v5 = (std::string *)qword_1ED825D68;
  v4 = 1;
  v2 = sub_1C47AD050(v0, 0, 0);
  *(_QWORD *)(v0 + 152) = 0;
  *(_QWORD *)(v0 + 160) = 0;
  *(_QWORD *)(v0 + 144) = 0;
  *(_BYTE *)(v0 + 168) = 0;
  *(_QWORD *)(v0 + 128) = 0;
  *(_QWORD *)(v0 + 136) = &unk_1E819E950;
  *(_QWORD *)v0 = &unk_1E81A37A0;
  *(_QWORD *)(v0 + 176) = &unk_1E819E970;
  *(_QWORD *)(v0 + 184) = &unk_1E81A3808;
  *(_QWORD *)(v0 + 208) = v0 + 184;
  sub_1C63A0088(v2, &v7, &v6, &v5, &v4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)v0);
  return v0;
}

void sub_1C5E84858(uint64_t a1, uint64_t *a2)
{
  char v4;
  __int128 v5;
  const std::error_category *v6;
  uint64_t v7;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *(_BYTE *)(a1 + 24);
    if ((v4 & 1) == 0 && *(char *)(a1 + 23) < 0)
    {
      operator delete(*(void **)a1);
      v4 = *(_BYTE *)(a1 + 24);
    }
    if ((a2[3] & 1) != 0)
    {
      *(_BYTE *)(a1 + 24) = v4 | 1;
      if ((a2[3] & 1) != 0)
      {
        v7 = *a2;
        v6 = (const std::error_category *)a2[1];
      }
      else
      {
        v6 = std::system_category();
        v7 = 0;
      }
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v6;
    }
    else
    {
      *(_BYTE *)(a1 + 24) = v4 & 0xFE;
      v5 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_OWORD *)a1 = v5;
      a2[1] = 0;
      a2[2] = 0;
      *a2 = 0;
    }
  }
}

uint64_t sub_1C5E848EC()
{
  return operator new();
}

uint64_t sub_1C5E84900(uint64_t result)
{
  unint64_t *v1;
  unint64_t *v2;

  if (result)
  {
    do
      v1 = (unint64_t *)__ldaxr(&qword_1EF8F7630);
    while (__stlxr(0, &qword_1EF8F7630));
    if (v1)
    {
      v2 = sub_1C5E84964(v1);
      MEMORY[0x1CAA32FC0](v2, 0x30C40EEE2E2AFLL);
    }
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

unint64_t *sub_1C5E84964(unint64_t *a1)
{
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = a1 + 1;
  do
    v3 = __ldaxr(v2);
  while (__stlxr(0, v2));
  if (v3)
  {
    v4 = sub_1C5E84964();
    MEMORY[0x1CAA32FC0](v4, 0x30C40EEE2E2AFLL);
  }
  do
    v5 = (void *)__ldaxr(a1);
  while (__stlxr(0, a1));
  if (v5)
    free(v5);
  return a1;
}

llvm::sys::ThreadLocalImpl *llvm::sys::ThreadLocalImpl::ThreadLocalImpl(llvm::sys::ThreadLocalImpl *this)
{
  *(_QWORD *)this = &off_1E81A7D60;
  *((_QWORD *)this + 1) = 0;
  pthread_key_create((pthread_key_t *)this + 1, 0);
  return this;
}

{
  *(_QWORD *)this = &off_1E81A7D60;
  *((_QWORD *)this + 1) = 0;
  pthread_key_create((pthread_key_t *)this + 1, 0);
  return this;
}

uint64_t llvm::sys::ThreadLocalImpl::removeInstance(llvm::sys::ThreadLocalImpl *this)
{
  return pthread_setspecific(*((_QWORD *)this + 1), 0);
}

uint64_t llvm::llvm_is_multithreaded(llvm *this)
{
  return 1;
}

uint64_t llvm::ThreadPoolStrategy::compute_thread_count(llvm::ThreadPoolStrategy *this)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;

  if (*((_BYTE *)this + 4))
  {
    LODWORD(result) = std::thread::hardware_concurrency();
    if (result <= 1)
      LODWORD(result) = 1;
  }
  else
  {
    LODWORD(result) = llvm::sys::getHostNumPhysicalCores(this);
  }
  if ((int)result <= 1)
    result = 1;
  else
    result = result;
  v3 = *(_DWORD *)this;
  if (*(_DWORD *)this)
  {
    if (v3 >= result)
      v4 = result;
    else
      v4 = *(_DWORD *)this;
    if (*((_BYTE *)this + 5))
      return v4;
    else
      return v3;
  }
  return result;
}

uint64_t computeHostNumHardwareThreads(void)
{
  uint64_t result;

  LODWORD(result) = std::thread::hardware_concurrency();
  if (result <= 1)
    return 1;
  else
    return result;
}

void sub_1C5E84A88(char *__s, uint64_t a2)
{
  std::string v3;
  __int16 v4;
  _QWORD v5[3];

  memset(v5, 0, sizeof(v5));
  sub_1C53D3BC8(&v3, __s);
  sub_1C5E8327C((uint64_t)v5, (const void **)&v3.__r_.__value_.__l.__data_, a2);
  std::string::~string(&v3);
  v4 = 260;
  v3.__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
  llvm::report_fatal_error((uint64_t)&v3, 1);
}

uint64_t llvm::llvm_thread_detach_impl(_opaque_pthread_t *this, _opaque_pthread_t *a2)
{
  uint64_t result;

  result = pthread_detach(this);
  if ((_DWORD)result)
    sub_1C5E84A88("pthread_detach failed", result);
  return result;
}

uint64_t llvm::get_max_thread_name_length(llvm *this)
{
  return 64;
}

void llvm::set_thread_name(llvm *this, const llvm::Twine *a2)
{
  const char *v2;
  unint64_t v3;
  unint64_t v4;
  const char *v5;
  void *v6;
  __int128 v7;
  _QWORD v8[9];

  v8[8] = *MEMORY[0x1E0C80C00];
  v6 = v8;
  v7 = xmmword_1C64638C0;
  v2 = (const char *)llvm::Twine::toNullTerminatedStringRef((unsigned __int8 *)this, (uint64_t)&v6);
  v4 = v3 - 63;
  if (v3 < v3 - 63)
    v4 = v3;
  v5 = &v2[v4];
  if (v3 > 0x3F)
    v2 = v5;
  pthread_setname_np(v2);
  if (v6 != v8)
    free(v6);
}

BOOL llvm::set_thread_priority(int a1)
{
  return setpriority(3, 0, (a1 == 0) << 12) == 0;
}

uint64_t llvm::get_cpus(llvm *this)
{
  return 1;
}

unint64_t llvm::get_threadpool_strategy(unsigned __int8 *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  _BOOL4 v12;
  unsigned int v13;
  unsigned int v14;

  if (!a2)
  {
    v10 = a3 >> 8;
    v11 = a3;
    return v11 | (unint64_t)(v10 << 8);
  }
  if (a2 == 3 && *(_WORD *)a1 == 27745 && a1[2] == 108)
  {
    v11 = 0;
    v10 = 0x1000000;
    return v11 | (unint64_t)(v10 << 8);
  }
  v4 = 0;
  v5 = a2;
  while (1)
  {
    v6 = *a1;
    if ((v6 - 48) < 0xA)
    {
      v7 = -48;
      goto LABEL_10;
    }
    if ((v6 - 97) < 0x1A)
    {
      v7 = -87;
      goto LABEL_10;
    }
    if ((v6 - 65) > 0x19)
      break;
    v7 = -55;
LABEL_10:
    v8 = v7 + v6;
    if (v8 > 9)
      break;
    v9 = 10 * v4 + v8;
    if (v4 > v9 / 0xA)
    {
      v11 = 0;
      v10 = 0;
      return v11 | (unint64_t)(v10 << 8);
    }
    ++a1;
    v4 = v9;
    if (!--v5)
      goto LABEL_22;
  }
  v9 = v4;
LABEL_22:
  v11 = 0;
  v12 = v5 != 0;
  v13 = 0;
  if (v9 < 0x100000000)
    v13 = v9;
  if (v12)
    v14 = 0;
  else
    v14 = v13;
  if (HIDWORD(v9))
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    if (!v12)
    {
      v10 = (v14 >> 8) | 0x1000000;
      if (v14)
        v11 = v14;
      else
        v11 = a3;
      if (!v14)
        v10 = a3 >> 8;
    }
  }
  return v11 | (unint64_t)(v10 << 8);
}

llvm::sys::Watchdog *llvm::sys::Watchdog::Watchdog(llvm::sys::Watchdog *this, unsigned int a2)
{
  alarm(a2);
  return this;
}

{
  alarm(a2);
  return this;
}

void llvm::sys::Watchdog::~Watchdog(llvm::sys::Watchdog *this)
{
  alarm(0);
}

{
  alarm(0);
}

void llvm::initializeTarget(llvm *this, llvm::PassRegistry *a2)
{
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)this);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)this);
}

void LLVMInitializeTarget(uint64_t a1)
{
  llvm::initializeTargetLibraryInfoWrapperPassPass(a1);
  llvm::initializeTargetTransformInfoWrapperPassPass(a1);
}

uint64_t LLVMGetModuleDataLayout(uint64_t a1)
{
  return a1 + 272;
}

uint64_t LLVMSetModuleDataLayout(uint64_t a1, uint64_t a2)
{
  return sub_1C48815D8(a1 + 272, a2);
}

uint64_t LLVMCreateTargetData(const char *a1)
{
  uint64_t v2;
  size_t v3;

  v2 = operator new();
  if (a1)
    v3 = strlen(a1);
  else
    v3 = 0;
  *(_WORD *)(v2 + 8) = 0;
  *(_WORD *)(v2 + 20) = 0;
  *(_QWORD *)(v2 + 32) = v2 + 56;
  *(_OWORD *)(v2 + 40) = xmmword_1C6464ED0;
  *(_QWORD *)(v2 + 64) = v2 + 80;
  *(_QWORD *)(v2 + 72) = 0x1000000000;
  *(_QWORD *)(v2 + 208) = 0;
  *(_QWORD *)(v2 + 216) = 0;
  *(_QWORD *)(v2 + 224) = 0;
  *(_QWORD *)(v2 + 232) = v2 + 248;
  *(_QWORD *)(v2 + 240) = 0x800000000;
  *(_QWORD *)(v2 + 376) = 0;
  *(_QWORD *)(v2 + 384) = v2 + 400;
  *(_QWORD *)(v2 + 392) = 0x800000000;
  llvm::DataLayout::reset(v2, a1, v3);
  return v2;
}

llvm::DataLayout *LLVMDisposeTargetData(llvm::DataLayout *result)
{
  if (result)
  {
    llvm::DataLayout::~DataLayout(result);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

uint64_t LLVMAddTargetLibraryInfo(const llvm::TargetLibraryInfoImpl *a1, uint64_t a2)
{
  llvm::TargetLibraryInfoWrapperPass *v4;

  v4 = (llvm::TargetLibraryInfoWrapperPass *)operator new();
  llvm::TargetLibraryInfoWrapperPass::TargetLibraryInfoWrapperPass(v4, a1);
  return (*(uint64_t (**)(uint64_t, llvm::TargetLibraryInfoWrapperPass *))(*(_QWORD *)a2 + 16))(a2, v4);
}

char *LLVMCopyStringRepOfTargetData(uint64_t a1)
{
  int v1;
  void *v2;
  const char *v3;
  char *v4;
  __int128 v6;
  uint64_t v7;

  if (*(char *)(a1 + 231) < 0)
  {
    sub_1C47EBC30(&v6, *(void **)(a1 + 208), *(_QWORD *)(a1 + 216));
  }
  else
  {
    v6 = *(_OWORD *)(a1 + 208);
    v7 = *(_QWORD *)(a1 + 224);
  }
  v1 = SHIBYTE(v7);
  v2 = (void *)v6;
  if (v7 >= 0)
    v3 = (const char *)&v6;
  else
    v3 = (const char *)v6;
  v4 = strdup(v3);
  if (v1 < 0)
    operator delete(v2);
  return v4;
}

BOOL LLVMByteOrder(_BYTE *a1)
{
  return *a1 == 0;
}

unint64_t LLVMPointerSize(uint64_t a1)
{
  return ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 232) + 4) + 7) >> 3;
}

_QWORD *LLVMIntPtrType(llvm::DataLayout *this)
{
  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  return llvm::DataLayout::getIntPtrType(this, (llvm::LLVMContext *)qword_1EF8F7038[0], 0);
}

_QWORD *LLVMIntPtrTypeForAS(llvm::DataLayout *this, unsigned int a2)
{
  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  return llvm::DataLayout::getIntPtrType(this, (llvm::LLVMContext *)qword_1EF8F7038[0], a2);
}

_QWORD *LLVMIntPtrTypeInContext(llvm::LLVMContext *a1, llvm::DataLayout *this)
{
  return llvm::DataLayout::getIntPtrType(this, a1, 0);
}

_QWORD *LLVMIntPtrTypeForASInContext(llvm::LLVMContext *a1, llvm::DataLayout *this, unsigned int a3)
{
  return llvm::DataLayout::getIntPtrType(this, a1, a3);
}

void LLVMSizeOfTypeInBits(uint64_t a1, uint64_t a2)
{
  const char *v2;

  sub_1C4768AD0(a1, a2);
  if ((_DWORD)v2 == 1)
}

unint64_t LLVMStoreSizeOfType(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const char *v3;
  uint64_t v5;

  sub_1C4768AD0(a1, a2);
  if ((_DWORD)v3 == 1)
  {
    v5 = v2;
    v2 = v5;
  }
  return (unint64_t)(v2 + 7) >> 3;
}

uint64_t LLVMABISizeOfType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  BOOL v7;
  char v8;
  const char *v9;
  char v11;

  sub_1C4768AD0(a1, a2);
  v5 = (unint64_t)(v4 + 7) >> 3;
  v7 = v6 == 1;
  llvm::DataLayout::getAlignment(a1, a2);
  if (v7)
  {
    v11 = v8;
    v8 = v11;
  }
  return ((1 << v8) + v5 - 1) & -(1 << v8);
}

uint64_t LLVMABIAlignmentOfType(uint64_t a1, uint64_t a2)
{
  char v2;

  llvm::DataLayout::getAlignment(a1, a2);
  return 1 << v2;
}

uint64_t LLVMCallFrameAlignmentOfType(uint64_t a1, uint64_t a2)
{
  char v2;

  llvm::DataLayout::getAlignment(a1, a2);
  return 1 << v2;
}

uint64_t LLVMPreferredAlignmentOfType(uint64_t a1, uint64_t a2)
{
  char v2;

  llvm::DataLayout::getAlignment(a1, a2);
  return 1 << v2;
}

uint64_t LLVMPreferredAlignmentOfGlobal(llvm::DataLayout *a1, const llvm::GlobalVariable *a2)
{
  return 1 << llvm::DataLayout::getPreferredAlign(a1, a2);
}

unint64_t LLVMElementAtOffset(llvm::DataLayout *a1, llvm::StructType *a2, unint64_t a3)
{
  llvm::StructLayout *StructLayout;
  int v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;

  StructLayout = llvm::DataLayout::getStructLayout(a1, a2);
  v5 = *((_DWORD *)StructLayout + 3);
  v6 = v5 & 0x7FFFFFFF;
  if ((v5 & 0x7FFFFFFF) != 0)
  {
    v7 = (char *)StructLayout + 16;
    do
    {
      v8 = v6 >> 1;
      v9 = &v7[8 * (v6 >> 1)];
      v11 = *(_QWORD *)v9;
      v10 = v9 + 8;
      v6 += ~(v6 >> 1);
      if (v11 > a3)
        v6 = v8;
      else
        v7 = v10;
    }
    while (v6);
  }
  else
  {
    v7 = (char *)StructLayout + 16;
  }
  return (unint64_t)(v7 - ((char *)StructLayout + 16) - 8) >> 3;
}

uint64_t LLVMOffsetOfElement(llvm::DataLayout *a1, llvm::StructType *a2, unsigned int a3)
{
  return *((_QWORD *)llvm::DataLayout::getStructLayout(a1, a2) + a3 + 2);
}

_QWORD *llvm::TargetIntrinsicInfo::TargetIntrinsicInfo(_QWORD *this)
{
  *this = off_1E81A7D80;
  return this;
}

double llvm::TargetLoweringObjectFile::Initialize(llvm::TargetLoweringObjectFile *this, llvm::MCContext *a2, const llvm::TargetMachine *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  double result;

  v6 = (_QWORD *)*((_QWORD *)this + 117);
  if (v6)
  {
    MEMORY[0x1CAA32FB4](*v6, 8);
    MEMORY[0x1CAA32FC0](v6, 0x1020C405AF6BDC9);
  }
  v7 = (_QWORD *)operator new();
  v7[1] = 0;
  v7[2] = 0;
  *v7 = 0;
  *((_QWORD *)this + 117) = v7;
  llvm::MCObjectFileInfo::initMCObjectFileInfo(this, a2, *((_DWORD *)a3 + 136) == 1, *((_DWORD *)a3 + 137) == 4);
  result = 0.0;
  *(_OWORD *)((char *)this + 948) = xmmword_1C850F3B0;
  *((_QWORD *)this + 123) = a3;
  return result;
}

void llvm::TargetLoweringObjectFile::emitCGProfileMetadata(llvm::TargetLoweringObjectFile *this, llvm::MCStreamer *a2, llvm::Module *a3)
{
  uint64_t v5;
  uint64_t NamedMetadata;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  __int128 v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t UniqueInteger;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37[4];
  __int16 v38;
  void *v39;
  uint64_t v40;
  _QWORD v41[25];

  v41[24] = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)this + 105);
  v39 = v41;
  v40 = 0x800000000;
  v37[0] = (uint64_t)"llvm.module.flags";
  v38 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata((uint64_t)a3, (uint64_t)v37);
  if (NamedMetadata)
  {
    v7 = NamedMetadata;
    v8 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = 8 * v8;
      do
      {
        v11 = *(_QWORD *)(**(_QWORD **)(v7 + 48) + v9);
        v36 = 0;
        v34 = 0;
        v35 = 0;
        if (llvm::Module::isValidModuleFlag(v11, &v36, &v35, &v34))
        {
          LODWORD(v37[0]) = v36;
          v37[1] = v35;
          v37[2] = v34;
          v12 = sub_1C4926708((uint64_t)&v39, (unint64_t)v37, 1);
          v13 = (char *)v39 + 24 * v40;
          v14 = *(_OWORD *)v12;
          *((_QWORD *)v13 + 2) = *(_QWORD *)(v12 + 16);
          *(_OWORD *)v13 = v14;
          LODWORD(v40) = v40 + 1;
        }
        v9 += 8;
      }
      while (v10 != v9);
    }
  }
  v15 = v39;
  if ((_DWORD)v40)
  {
    v16 = 0;
    while (1)
    {
      v17 = *(_QWORD *)(*(_QWORD *)((char *)v39 + v16 + 8) + 8);
      if (*(_QWORD *)v17 == 10)
      {
        v18 = *(_QWORD *)(v17 + 24);
        v19 = *(unsigned __int16 *)(v17 + 32);
        if (v18 == 0x69666F7250204743 && v19 == 25964)
          break;
      }
      v16 += 24;
      if (24 * v40 == v16)
        goto LABEL_18;
    }
    v21 = *(_QWORD *)((char *)v39 + v16 + 16);
    if (v21)
    {
      v37[0] = (uint64_t)this;
      v22 = *(unsigned int *)(v21 + 8);
      if ((_DWORD)v22)
      {
        v23 = -8 * v22;
        do
        {
          v24 = *(_QWORD *)(v21 + v23);
          v25 = sub_1C5E85684(v37, v24 - 8 * *(unsigned int *)(v24 + 8));
          v26 = sub_1C5E85684(v37, v24 + 8 - 8 * *(unsigned int *)(v24 + 8));
          if (v25)
            v27 = v26 == 0;
          else
            v27 = 1;
          if (!v27)
          {
            v28 = v26;
            UniqueInteger = llvm::Constant::getUniqueInteger(*(llvm::Constant **)(*(_QWORD *)(v24
                                                                                            - 8
                                                                                            * *(unsigned int *)(v24 + 8)
                                                                                            + 16)
                                                                                + 128));
            if (*(_DWORD *)(UniqueInteger + 8) >= 0x41u)
              v30 = *(uint64_t **)UniqueInteger;
            else
              v30 = (uint64_t *)UniqueInteger;
            v31 = *v30;
            v32 = llvm::MCSymbolRefExpr::create(v25, 0, v5, 0);
            v33 = llvm::MCSymbolRefExpr::create(v28, 0, v5, 0);
            (*(void (**)(llvm::MCStreamer *, unint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 1144))(a2, v32, v33, v31);
          }
          v23 += 8;
        }
        while (v23);
        v15 = v39;
      }
    }
  }
LABEL_18:
  if (v15 != v41)
    free(v15);
}

unint64_t sub_1C5E85684(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  llvm::Value *v3;

  if (*(_QWORD *)a2
    && (v2 = *a1,
        v3 = llvm::Value::stripPointerCasts(*(llvm::Value **)(*(_QWORD *)a2 + 128)),
        (*((_DWORD *)v3 + 8) & 0x300) != 0x100))
  {
    return llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(v2 + 984), v3);
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::TargetLoweringObjectFile::getKindForGlobal(llvm::TargetLoweringObjectFile *this, const llvm::GlobalObject *a2, const llvm::TargetMachine *a3)
{
  BOOL v3;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  llvm::TargetLoweringObjectFile **v12;
  llvm::TargetLoweringObjectFile *v13;
  llvm::TargetLoweringObjectFile *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  __int16 v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  llvm::TargetLoweringObjectFile **v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  unsigned __int8 *v28;
  unsigned int v29;
  llvm::TargetLoweringObjectFile **v30;
  llvm::TargetLoweringObjectFile *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;
  BOOL v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  const char *v45;
  uint64_t v46;
  unint64_t v47;
  __int128 v48;
  llvm::TargetLoweringObjectFile *v49;

  if (*((_BYTE *)this + 16))
    v3 = *((_BYTE *)this + 16) == 22;
  else
    v3 = 1;
  if (v3)
    return 2;
  if ((*((_BYTE *)this + 34) & 0x40) == 0)
    goto LABEL_18;
  v7 = ***(_QWORD ***)this;
  v49 = this;
  v8 = *(_DWORD *)(v7 + 2520);
  if (!v8)
  {
    v30 = 0;
LABEL_61:
    v12 = (llvm::TargetLoweringObjectFile **)sub_1C53D65B8(v7 + 2504, (uint64_t)&v49, (uint64_t *)&v49, v30);
    v31 = v49;
    v12[1] = 0;
    v12[2] = 0;
    *v12 = v31;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v7 + 2504);
  v10 = v8 - 1;
  v11 = v10 & ((this >> 4) ^ (this >> 9));
  v12 = (llvm::TargetLoweringObjectFile **)(v9 + 24 * v11);
  v13 = *v12;
  if (*v12 != this)
  {
    v24 = 0;
    v25 = 1;
    while (v13 != (llvm::TargetLoweringObjectFile *)-4096)
    {
      if (v24)
        v26 = 0;
      else
        v26 = v13 == (llvm::TargetLoweringObjectFile *)-8192;
      if (v26)
        v24 = v12;
      v27 = v11 + v25++;
      v11 = v27 & v10;
      v12 = (llvm::TargetLoweringObjectFile **)(v9 + 24 * v11);
      v13 = *v12;
      if (*v12 == this)
        goto LABEL_10;
    }
    if (v24)
      v30 = v24;
    else
      v30 = v12;
    goto LABEL_61;
  }
LABEL_10:
  if (v12[2] == (llvm::TargetLoweringObjectFile *)24)
  {
    v14 = v12[1];
    v15 = *(_QWORD *)v14;
    v16 = *((_QWORD *)v14 + 1);
    v17 = *((_QWORD *)v14 + 2);
    v18 = v15 == 0x5F3174666977732ELL && v16 == 0x6B6E696C6F747561;
    if (v18 && v17 == 0x73656972746E655FLL)
      return 0;
  }
LABEL_18:
  if ((*((_DWORD *)this + 8) & 0x1C00) != 0)
  {
    if (!sub_1C5E85F2C(*((_QWORD *)this - 4))
      || (*((_BYTE *)this + 80) & 1) != 0
      || (*((_DWORD *)this + 8) & 0x400000) != 0)
    {
      return 13;
    }
    v20 = *((_WORD *)a2 + 510);
    v21 = 13;
    if ((*((_DWORD *)this + 8) & 0xFu) - 7 >= 2)
      v22 = 12;
    else
      v22 = 14;
    goto LABEL_37;
  }
  if ((*((_DWORD *)this + 8) & 0xF) == 0xA)
    return 18;
  if (sub_1C5E85F2C(*((_QWORD *)this - 4)))
  {
    if ((*((_BYTE *)this + 80) & 1) == 0)
    {
      if ((*((_DWORD *)this + 8) & 0x400000) == 0)
      {
        v20 = *((_WORD *)a2 + 510);
        v21 = 19;
        if ((*((_DWORD *)this + 8) & 0xF) != 0)
          v23 = 15;
        else
          v23 = 17;
        if ((*((_DWORD *)this + 8) & 0xFu) - 7 >= 2)
          v22 = v23;
        else
          v22 = 16;
LABEL_37:
        if ((v20 & 0x100) != 0)
          return v21;
        else
          return v22;
      }
      return 19;
    }
  }
  else if ((*((_BYTE *)this + 80) & 1) == 0)
  {
    return 19;
  }
  v28 = (unsigned __int8 *)*((_QWORD *)this - 4);
  if (llvm::Constant::getRelocationInfo((llvm::Constant *)v28))
  {
    v29 = *((_DWORD *)a2 + 136);
    if (v29 >= 6 || ((0x39u >> v29) & 1) == 0)
    {
      if (llvm::Constant::getRelocationInfo((llvm::Constant *)v28) == 2)
        return 20;
      else
        return 4;
    }
    return 4;
  }
  if ((*((_DWORD *)this + 8) & 0xC0) != 0x80)
    return 4;
  v32 = *(_QWORD *)v28;
  if (!*(_QWORD *)v28
    || *(_BYTE *)(v32 + 8) != 17
    || (v33 = *(_QWORD *)(v32 + 24)) == 0
    || *(_DWORD *)(v33 + 8) != 13
    || ((v34 = *(_DWORD *)(v33 + 8) >> 8, v35 = v34 > 0x20, v36 = (1 << v34) & 0x100010100, !v35)
      ? (v37 = v36 == 0)
      : (v37 = 1),
        v37))
  {
LABEL_87:
    v46 = sub_1C4E3D148(*((_QWORD *)this + 5) + 272, *(_QWORD *)v28);
    if ((_DWORD)v45 == 1)
    *((_QWORD *)&v48 + 1) = v46;
    *(_QWORD *)&v48 = v46 - 4;
    v47 = v48 >> 2;
    if (v47 < 8)
      return dword_1C8672D58[v47];
    return 4;
  }
  v38 = v28[16];
  if ((v38 & 0xFE) == 0xE)
  {
    v39 = *(_DWORD *)(v32 + 32) - 1;
    llvm::ConstantDataSequential::getElementAsInteger((llvm::ConstantDataSequential *)v28);
    if (v40)
      goto LABEL_87;
    if (v39)
    {
      v41 = 0;
      do
      {
        llvm::ConstantDataSequential::getElementAsInteger((llvm::ConstantDataSequential *)v28);
        if (!v42)
          goto LABEL_87;
      }
      while (v39 != ++v41);
    }
  }
  else if (v38 != 13 || *(_QWORD *)(v32 + 32) != 1)
  {
    goto LABEL_87;
  }
  v43 = *(_DWORD *)(v33 + 8) >> 8;
  if (v43 == 16)
    v44 = 6;
  else
    v44 = 7;
  if (v43 == 8)
    return 5;
  else
    return v44;
}

uint64_t llvm::TargetLoweringObjectFile::SectionForGlobal(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned __int8 v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int i;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  BOOL v25;
  int v27;
  uint64_t *v28;
  int v30;
  unint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;

  if ((*(_BYTE *)(a2 + 34) & 0x40) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 112))(a1, a2, a3, a4);
  v8 = *(unsigned __int8 *)(a2 + 16);
  if (v8 == 3)
  {
    v9 = *(_QWORD *)(a2 + 72);
    if (v9)
    {
      v27 = a3;
      v32 = "bss-section";
      v33 = 11;
      v28 = (uint64_t *)(v9 + 24);
      v34 = 0;
      if (sub_1C5331A1C((uint64_t *)(v9 + 24), (uint64_t)&v32, &v34) && (v27 - 15) < 3)
        return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 112))(a1, a2, a3, a4);
      v32 = "data-section";
      v33 = 12;
      v34 = 0;
      if (sub_1C5331A1C(v28, (uint64_t)&v32, &v34))
      {
        if (v27 == 19)
          return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 112))(a1, a2, a3, a4);
      }
      v32 = "relro-section";
      v33 = 13;
      v34 = 0;
      if (sub_1C5331A1C(v28, (uint64_t)&v32, &v34))
      {
        if (v27 == 20)
          return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 112))(a1, a2, a3, a4);
      }
      v32 = "rodata-section";
      v33 = 14;
      v34 = 0;
      if (sub_1C5331A1C(v28, (uint64_t)&v32, &v34))
      {
        if ((v27 & 0xFC) == 4 || (v27 & 0xFC) == 8)
          return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 112))(a1, a2, a3, a4);
      }
    }
    v8 = *(unsigned __int8 *)(a2 + 16);
  }
  if (!v8)
  {
    v11 = *(_QWORD *)(a2 + 112);
    if (v11)
    {
      if (*(_DWORD *)(v11 + 8))
      {
        v12 = *(_QWORD *)(v11 + 40);
        if (v12)
        {
          v13 = *(_DWORD *)(v12 + 40);
          if (v13)
          {
            v14 = *(_QWORD *)(v12 + 24);
            v15 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
            v16 = &unk_1ED7EA000;
            if ((v15 & 1) == 0)
            {
              v30 = __cxa_guard_acquire(&qword_1ED7EAC88);
              v16 = &unk_1ED7EA000;
              if (v30)
              {
                v31 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override)
                  v31 = 0xFF51AFD7ED558CCDLL;
                qword_1ED7EAC80 = v31;
                __cxa_guard_release(&qword_1ED7EAC88);
                v16 = (_QWORD *)&unk_1ED7EA000;
              }
            }
            v17 = v16[400];
            v18 = __ROR8__(v17 ^ 0xF54B982192FEA167, 30);
            v19 = 0x9DDFEA08EB382D69
                * ((v17 + 0x18EB4DAABB32FA18) ^ ((0x9DDFEA08EB382D69
                                                  * ((v18 - 0x1A1B69534B932F1) ^ (v17 + 0x18EB4DAABB32FA18))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v18 - 0x1A1B69534B932F1) ^ (v17 + 0x18EB4DAABB32FA18))));
            v20 = -348639895 * ((v19 >> 47) ^ v19);
            for (i = 1; ; ++i)
            {
              v22 = v20 & (v13 - 1);
              v23 = v14 + 24 * v22;
              v24 = *(_QWORD **)v23;
              if (*(_QWORD *)v23 == -1)
              {
                if ("implicit-section-name" == (char *)-1)
                  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 112))(a1, a2, a3, a4);
              }
              else if (v24 == (_QWORD *)-2)
              {
                if ("implicit-section-name" == (char *)-2)
                  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 112))(a1, a2, a3, a4);
              }
              else if (*(_QWORD *)(v23 + 8) == 21)
              {
                v25 = *v24 == 0x746963696C706D69 && v24[1] == 0x6E6F69746365732DLL;
                if (v25 && *(_QWORD *)((char *)v24 + 13) == 0x656D616E2D6E6F69)
                  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 112))(a1, a2, a3, a4);
              }
              if (v24 == (_QWORD *)-1)
                return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 248))(a1, a2, a3, a4);
              v20 = i + v22;
            }
          }
        }
      }
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 248))(a1, a2, a3, a4);
}

uint64_t llvm::TargetLoweringObjectFile::SectionForGlobal(llvm::TargetLoweringObjectFile *this, const llvm::GlobalObject *a2, const llvm::TargetMachine *a3)
{
  unsigned int KindForGlobal;

  KindForGlobal = llvm::TargetLoweringObjectFile::getKindForGlobal(a2, a3, a3);
  return llvm::TargetLoweringObjectFile::SectionForGlobal((uint64_t)this, (uint64_t)a2, KindForGlobal, (uint64_t)a3);
}

unint64_t llvm::TargetLoweringObjectFile::getTTypeReference(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t TempSymbol;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  const char *v14;
  __int16 v15;

  if ((a3 & 0x70) != 0)
  {
    if ((a3 & 0x70) != 0x10)
      llvm::report_fatal_error((llvm *)"We do not support this DWARF encoding yet!", (const char *)1);
    v7 = *(_QWORD *)(a1 + 840);
    v14 = "tmp";
    v15 = 259;
    TempSymbol = llvm::MCContext::createTempSymbol(v7, (uint64_t)&v14, 1);
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)a4 + 192))(a4, TempSymbol, 0);
    v9 = *(_QWORD *)(a1 + 840);
    v10 = sub_1C484358C(v9 + 192, 24, 3);
    v11 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 152) + 18) << 16;
    *(_BYTE *)v10 = 2;
    *(_DWORD *)(v10 + 1) = v11 | (*(unsigned __int8 *)(v10 + 4) << 24);
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 16) = TempSymbol;
    v12 = sub_1C484358C(*(_QWORD *)(a1 + 840) + 192, 32, 3);
    *(_BYTE *)v12 = 0;
    *(_DWORD *)(v12 + 1) = (*(unsigned __int8 *)(v12 + 4) << 24) | 0x12;
    *(_QWORD *)(v12 + 8) = 0;
    *(_QWORD *)(v12 + 16) = a2;
    *(_QWORD *)(v12 + 24) = v10;
    return v12;
  }
  return a2;
}

uint64_t sub_1C5E85F2C(uint64_t a1)
{
  int v2;
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  if ((llvm::Constant::isNullValue((llvm::Constant *)a1) & 1) != 0)
    return 1;
  v2 = *(unsigned __int8 *)(a1 + 16);
  if ((v2 - 11) < 2)
    return 1;
  if ((v2 - 8) > 2)
    return 0;
  v4 = *(_DWORD *)(a1 + 20);
  if ((v4 & 0x40000000) != 0)
  {
    v6 = *(uint64_t **)(a1 - 8);
    v5 = v4 & 0x7FFFFFF;
    if (!v5)
      return 1;
  }
  else
  {
    v5 = v4 & 0x7FFFFFF;
    v6 = (uint64_t *)(a1 - 32 * v5);
    if (!v5)
      return 1;
  }
  v7 = 32 * v5 - 32;
  do
  {
    v8 = *v6;
    v6 += 4;
    result = sub_1C5E85F2C(v8);
    if ((_DWORD)result)
      v9 = v7 == 0;
    else
      v9 = 1;
    v7 -= 32;
  }
  while (!v9);
  return result;
}

uint64_t llvm::TargetMachine::TargetMachine(uint64_t a1, uint64_t a2, const void *a3, unint64_t a4, __int128 *a5, const void *a6, size_t a7, int a8, void *__src, size_t __len, __int128 *a11)
{
  _BYTE *v15;
  __int128 v16;
  __int128 v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  size_t v22;
  size_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  _BYTE *v29;
  __int128 *v30;
  __int128 v31;
  __int128 v32;
  _BYTE *v33;
  __int128 *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  _BYTE *v41;
  __int128 v42;
  __int128 v43;
  _BYTE *v44;
  __int128 v45;

  *(_QWORD *)a1 = &off_1E81A7F18;
  *(_QWORD *)(a1 + 8) = a2;
  *(_WORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 72;
  *(_OWORD *)(a1 + 56) = xmmword_1C6464ED0;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)(a1 + 88) = 0x1000000000;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = a1 + 264;
  *(_QWORD *)(a1 + 256) = 0x800000000;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = a1 + 416;
  *(_QWORD *)(a1 + 408) = 0x800000000;
  llvm::DataLayout::reset(a1 + 16, a3, a4);
  v15 = (_BYTE *)(a1 + 448);
  if (*((char *)a5 + 23) < 0)
  {
    sub_1C47EBC30(v15, *(void **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v16 = *a5;
    *(_QWORD *)(a1 + 464) = *((_QWORD *)a5 + 2);
    *(_OWORD *)v15 = v16;
  }
  v17 = *(__int128 *)((char *)a5 + 24);
  *(_QWORD *)(a1 + 488) = *((_QWORD *)a5 + 5);
  *(_OWORD *)(a1 + 472) = v17;
  if (a7 > 0x7FFFFFFFFFFFFFF7)
LABEL_39:
    abort();
  if (a7 >= 0x17)
  {
    v19 = (a7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a7 | 7) != 0x17)
      v19 = a7 | 7;
    v20 = v19 + 1;
    v18 = operator new(v19 + 1);
    *(_QWORD *)(a1 + 504) = a7;
    *(_QWORD *)(a1 + 512) = v20 | 0x8000000000000000;
    *(_QWORD *)(a1 + 496) = v18;
    goto LABEL_11;
  }
  v18 = (void *)(a1 + 496);
  *(_BYTE *)(a1 + 519) = a7;
  if (a7)
LABEL_11:
    memmove(v18, a6, a7);
  *((_BYTE *)v18 + a7) = 0;
  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_39;
  if (__len >= 0x17)
  {
    v22 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v22 = __len | 7;
    v23 = v22 + 1;
    v21 = operator new(v22 + 1);
    *(_QWORD *)(a1 + 520) = v21;
    *(_QWORD *)(a1 + 536) = v23 | 0x8000000000000000;
    *(_QWORD *)(a1 + 528) = __len;
    goto LABEL_19;
  }
  v21 = (void *)(a1 + 520);
  *(_BYTE *)(a1 + 543) = __len;
  if (__len)
LABEL_19:
    memmove(v21, __src, __len);
  *((_BYTE *)v21 + __len) = 0;
  *(_QWORD *)(a1 + 544) = 0x100000000;
  *(_DWORD *)(a1 + 552) = 2;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_BYTE *)(a1 + 592) &= 0xFCu;
  *(_BYTE *)(a1 + 600) = 0;
  *(_BYTE *)(a1 + 696) = 0;
  v24 = *a11;
  v25 = a11[1];
  *(_QWORD *)(a1 + 736) = *((_QWORD *)a11 + 4);
  *(_OWORD *)(a1 + 704) = v24;
  *(_OWORD *)(a1 + 720) = v25;
  v26 = *((_QWORD *)a11 + 6);
  *(_QWORD *)(a1 + 744) = *((_QWORD *)a11 + 5);
  *(_QWORD *)(a1 + 752) = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  *(_WORD *)(a1 + 760) = *((_WORD *)a11 + 28);
  v29 = (_BYTE *)(a1 + 768);
  v30 = a11 + 4;
  if (*((char *)a11 + 87) < 0)
  {
    sub_1C47EBC30(v29, *((void **)a11 + 8), *((_QWORD *)a11 + 9));
  }
  else
  {
    v31 = *v30;
    *(_QWORD *)(a1 + 784) = *((_QWORD *)a11 + 10);
    *(_OWORD *)v29 = v31;
  }
  v32 = *(__int128 *)((char *)a11 + 88);
  *(_OWORD *)(a1 + 808) = *(__int128 *)((char *)a11 + 104);
  *(_OWORD *)(a1 + 792) = v32;
  sub_1C4843224(a1 + 824, (uint64_t *)a11 + 15);
  v33 = (_BYTE *)(a1 + 984);
  v34 = (__int128 *)((char *)a11 + 280);
  if (*((char *)a11 + 303) < 0)
  {
    sub_1C47EBC30(v33, *((void **)a11 + 35), *((_QWORD *)a11 + 36));
  }
  else
  {
    v35 = *v34;
    *(_QWORD *)(a1 + 1000) = *((_QWORD *)a11 + 37);
    *(_OWORD *)v33 = v35;
  }
  v36 = *a11;
  v37 = a11[1];
  *(_QWORD *)(a1 + 1040) = *((_QWORD *)a11 + 4);
  *(_OWORD *)(a1 + 1008) = v36;
  *(_OWORD *)(a1 + 1024) = v37;
  v38 = *((_QWORD *)a11 + 6);
  *(_QWORD *)(a1 + 1048) = *((_QWORD *)a11 + 5);
  *(_QWORD *)(a1 + 1056) = v38;
  if (v38)
  {
    v39 = (unint64_t *)(v38 + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  *(_WORD *)(a1 + 1064) = *((_WORD *)a11 + 28);
  v41 = (_BYTE *)(a1 + 1072);
  if (*((char *)a11 + 87) < 0)
  {
    sub_1C47EBC30(v41, *((void **)a11 + 8), *((_QWORD *)a11 + 9));
  }
  else
  {
    v42 = *v30;
    *(_QWORD *)(a1 + 1088) = *((_QWORD *)a11 + 10);
    *(_OWORD *)v41 = v42;
  }
  v43 = *(__int128 *)((char *)a11 + 88);
  *(_OWORD *)(a1 + 1112) = *(__int128 *)((char *)a11 + 104);
  *(_OWORD *)(a1 + 1096) = v43;
  sub_1C4843224(a1 + 1128, (uint64_t *)a11 + 15);
  v44 = (_BYTE *)(a1 + 1288);
  if (*((char *)a11 + 303) < 0)
  {
    sub_1C47EBC30(v44, *((void **)a11 + 35), *((_QWORD *)a11 + 36));
  }
  else
  {
    v45 = *v34;
    *(_QWORD *)(a1 + 1304) = *((_QWORD *)a11 + 37);
    *(_OWORD *)v44 = v45;
  }
  return a1;
}

{
  return llvm::TargetMachine::TargetMachine(a1, a2, a3, a4, a5, a6, a7, a8, __src, __len, a11);
}

void llvm::TargetMachine::~TargetMachine(llvm::TargetMachine *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = &off_1E81A7F18;
  sub_1C48433E8((uint64_t)this + 1008);
  sub_1C48433E8((uint64_t)this + 704);
  if (*((_BYTE *)this + 696))
  {
    v2 = (unsigned int *)*((_QWORD *)this + 86);
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
    if (*((char *)this + 671) < 0)
      operator delete(*((void **)this + 81));
    if (*((char *)this + 647) < 0)
      operator delete(*((void **)this + 78));
    if (*((char *)this + 623) < 0)
      operator delete(*((void **)this + 75));
    *((_BYTE *)this + 696) = 0;
  }
  v6 = *((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v7)
    MEMORY[0x1CAA32FC0](v7, 0x10F0C40CB53E019);
  v8 = *((_QWORD *)this + 71);
  *((_QWORD *)this + 71) = 0;
  if (v8)
  {
    v10 = sub_1C61E6B14(v8);
    MEMORY[0x1CAA32FC0](v10, 0x10F0C4031312594);
  }
  v9 = *((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (*((char *)this + 543) < 0)
    operator delete(*((void **)this + 65));
  if (*((char *)this + 519) < 0)
    operator delete(*((void **)this + 62));
  if (*((char *)this + 471) < 0)
    operator delete(*((void **)this + 56));
  llvm::DataLayout::~DataLayout((llvm::TargetMachine *)((char *)this + 16));
}

{
  llvm::TargetMachine::~TargetMachine(this);
  JUMPOUT(0x1CAA32FC0);
}

BOOL llvm::TargetMachine::isPositionIndependent(llvm::TargetMachine *this)
{
  return *((_DWORD *)this + 136) == 1;
}

uint64_t llvm::TargetMachine::getRelocationModel(llvm::TargetMachine *this)
{
  return *((unsigned int *)this + 136);
}

void llvm::TargetMachine::resetTargetOptions(llvm::TargetMachine *this, const llvm::Function *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned __int8 v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned __int8 v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  _QWORD *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unsigned __int8 v47;
  unint64_t v48;
  unsigned int v49;
  int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  _QWORD *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  unsigned __int8 v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  int v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  _QWORD *v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  unsigned __int8 v74;
  uint64_t v75;
  unint64_t v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  _QWORD *v81;
  __int16 v82;
  _WORD *v83;
  BOOL v84;
  uint64_t FnAttribute;
  BOOL v87;
  uint64_t v88;
  _BOOL4 v89;
  BOOL v90;
  uint64_t v91;
  int v92;
  BOOL v93;
  uint64_t v94;
  int v95;
  BOOL v96;
  BOOL v97;
  uint64_t v98;
  __int16 v99;
  BOOL v100;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  unsigned __int8 v106;
  uint64_t v107;
  unint64_t v108;
  unsigned int v109;
  int j;
  unsigned int v111;
  uint64_t v112;
  _QWORD *v113;
  BOOL v114;
  uint64_t v116;
  unint64_t v117;
  int v118;
  unint64_t v119;
  int v120;
  unint64_t v121;
  int v122;
  unint64_t v123;
  int v124;
  unint64_t v125;
  int v126;
  unint64_t v127;
  int v128;
  int v129;
  unint64_t v130;
  int v131;
  int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;

  v4 = *((_QWORD *)a2 + 14);
  if (!v4 || !*(_DWORD *)(v4 + 8) || (v5 = *(_QWORD *)(v4 + 40)) == 0 || (v6 = *(_DWORD *)(v5 + 40)) == 0)
  {
LABEL_10:
    v16 = *((_BYTE *)this + 704) & 1;
    goto LABEL_11;
  }
  v7 = *(_QWORD *)(v5 + 24);
  v8 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v117 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v117 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v117;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v9 = __ROR8__(qword_1ED7EAC80 ^ 0x37F3ADE50F0F0E7DLL, 30);
  v10 = 0x9DDFEA08EB382D69
      * ((qword_1ED7EAC80 - 0x6F5514752119C389) ^ ((0x9DDFEA08EB382D69
                                                    * ((v9 - 0x502DF391098191ELL) ^ (qword_1ED7EAC80
                                                                                   - 0x6F5514752119C389))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v9 - 0x502DF391098191ELL) ^ (qword_1ED7EAC80 - 0x6F5514752119C389))));
  v11 = -348639895 * ((v10 >> 47) ^ v10);
  for (i = 1; ; ++i)
  {
    v13 = v11 & (v6 - 1);
    v14 = (uint64_t *)(v7 + 24 * v13);
    v15 = *v14;
    if (*v14 == -1)
    {
      if ("less-precise-fpmad" == (char *)-1)
        goto LABEL_76;
      goto LABEL_9;
    }
    if (v15 != -2)
      break;
    if ("less-precise-fpmad" == (char *)-2)
      goto LABEL_76;
LABEL_9:
    if (v15 == -1)
      goto LABEL_10;
    v11 = i + v13;
  }
  if (v14[1] != 18)
    goto LABEL_9;
  v84 = *(_QWORD *)v15 == 0x6572702D7373656CLL && *(_QWORD *)(v15 + 8) == 0x6D70662D65736963;
  if (!v84 || *(_WORD *)(v15 + 16) != 25697)
    goto LABEL_9;
LABEL_76:
  FnAttribute = llvm::Function::getFnAttribute((uint64_t)a2, "less-precise-fpmad", 0x12uLL);
  v16 = FnAttribute
     && *(_DWORD *)(FnAttribute + 16) == 4
     && *(_DWORD *)(FnAttribute + *(unsigned int *)(FnAttribute + 12) + 25) == 1702195828;
LABEL_11:
  *((_BYTE *)this + 1008) = *((_BYTE *)this + 1008) & 0xFE | v16;
  v17 = *((_QWORD *)a2 + 14);
  if (!v17 || !*(_DWORD *)(v17 + 8) || (v18 = *(_QWORD *)(v17 + 40)) == 0 || (v19 = *(_DWORD *)(v18 + 40)) == 0)
  {
LABEL_20:
    v29 = *((_WORD *)this + 510) & 0xFFFE | *((_WORD *)this + 358) & 1;
    goto LABEL_21;
  }
  v20 = *(_QWORD *)(v18 + 24);
  v21 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v21 & 1) == 0)
  {
    v133 = v19;
    v118 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v19 = v133;
    if (v118)
    {
      v119 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v119 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v119;
      __cxa_guard_release(&qword_1ED7EAC88);
      v19 = v133;
    }
  }
  v22 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xFEC0C4B7E4C7DBB4)) ^ ((0x9DDFEA08EB382D69
                                                                             * (qword_1ED7EAC80 ^ 0xFEC0C4B7E4C7DBB4)) >> 47) ^ 0x98EDA1D185B4B5C1);
  v23 = (-348639895 * ((v22 >> 47) ^ v22)) ^ 0x2D70662D;
  v24 = v19 - 1;
  v25 = 1;
  while (2)
  {
    v26 = v23 & v24;
    v27 = v20 + 24 * v26;
    v28 = *(_QWORD **)v27;
    if (*(_QWORD *)v27 == -1)
    {
      if ("unsafe-fp-math" == (char *)-1)
        break;
      goto LABEL_19;
    }
    if (v28 == (_QWORD *)-2)
    {
      if ("unsafe-fp-math" == (char *)-2)
        break;
      goto LABEL_19;
    }
    if (*(_QWORD *)(v27 + 8) != 14
      || (*v28 == 0x662D656661736E75 ? (v87 = *(_QWORD *)((char *)v28 + 6) == 0x6874616D2D70662DLL) : (v87 = 0), !v87))
    {
LABEL_19:
      if (v28 == (_QWORD *)-1)
        goto LABEL_20;
      v23 = v25 + v26;
      ++v25;
      continue;
    }
    break;
  }
  v88 = llvm::Function::getFnAttribute((uint64_t)a2, "unsafe-fp-math", 0xEuLL);
  v89 = v88 && *(_DWORD *)(v88 + 16) == 4 && *(_DWORD *)(v88 + *(unsigned int *)(v88 + 12) + 25) == 1702195828;
  v29 = *((_WORD *)this + 510) & 0xFFFE | v89;
LABEL_21:
  *((_WORD *)this + 510) = v29;
  v30 = *((_QWORD *)a2 + 14);
  if (!v30 || !*(_DWORD *)(v30 + 8) || (v31 = *(_QWORD *)(v30 + 40)) == 0 || (v32 = *(_DWORD *)(v31 + 40)) == 0)
  {
LABEL_31:
    v42 = v29 & 0xFFFFFFFD | (2 * ((*((unsigned __int16 *)this + 358) >> 1) & 1));
    goto LABEL_32;
  }
  v33 = *(_QWORD *)(v31 + 24);
  v34 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v34 & 1) == 0)
  {
    v134 = v33;
    v131 = v32;
    v120 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v32 = v131;
    v33 = v134;
    if (v120)
    {
      v121 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v121 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v121;
      __cxa_guard_release(&qword_1ED7EAC88);
      v32 = v131;
      v33 = v134;
    }
  }
  v35 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xE10BB686ABF7358ELL)) ^ ((0x9DDFEA08EB382D69
                                                                             * (qword_1ED7EAC80 ^ 0xE10BB686ABF7358ELL)) >> 47) ^ 0xCC78D0E8C2DA5AE0);
  v36 = (-348639895 * ((v35 >> 47) ^ v35)) ^ 0x2D70662D;
  v37 = v32 - 1;
  v38 = 1;
  while (2)
  {
    v39 = v36 & v37;
    v40 = v33 + 24 * v39;
    v41 = *(_QWORD **)v40;
    if (*(_QWORD *)v40 == -1)
    {
      if ("no-infs-fp-math" == (char *)-1)
        break;
      goto LABEL_29;
    }
    if (v41 == (_QWORD *)-2)
    {
      if ("no-infs-fp-math" == (char *)-2)
        break;
      goto LABEL_29;
    }
    if (*(_QWORD *)(v40 + 8) != 15
      || (*v41 == 0x2D73666E692D6F6ELL ? (v90 = *(_QWORD *)((char *)v41 + 7) == 0x6874616D2D70662DLL) : (v90 = 0), !v90))
    {
LABEL_29:
      if (v41 == (_QWORD *)-1)
      {
        v29 = *((unsigned __int16 *)this + 510);
        goto LABEL_31;
      }
      v36 = v38 + v39;
      ++v38;
      continue;
    }
    break;
  }
  v91 = llvm::Function::getFnAttribute((uint64_t)a2, "no-infs-fp-math", 0xFuLL);
  if (v91 && *(_DWORD *)(v91 + 16) == 4)
    v92 = 2 * (*(_DWORD *)(v91 + *(unsigned int *)(v91 + 12) + 25) == 1702195828);
  else
    v92 = 0;
  v42 = *((_WORD *)this + 510) & 0xFFFD | v92;
LABEL_32:
  *((_WORD *)this + 510) = v42;
  v43 = *((_QWORD *)a2 + 14);
  if (!v43 || !*(_DWORD *)(v43 + 8) || (v44 = *(_QWORD *)(v43 + 40)) == 0 || (v45 = *(_DWORD *)(v44 + 40)) == 0)
  {
LABEL_42:
    v55 = v42 & 0xFFFFFFFB | (4 * ((*((unsigned __int16 *)this + 358) >> 2) & 1));
    goto LABEL_43;
  }
  v46 = *(_QWORD *)(v44 + 24);
  v47 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v47 & 1) == 0)
  {
    v135 = v46;
    v132 = v45;
    v122 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v45 = v132;
    v46 = v135;
    if (v122)
    {
      v123 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v123 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v123;
      __cxa_guard_release(&qword_1ED7EAC88);
      v45 = v132;
      v46 = v135;
    }
  }
  v48 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xE10BBE89ACF7358ELL)) ^ ((0x9DDFEA08EB382D69
                                                                             * (qword_1ED7EAC80 ^ 0xE10BBE89ACF7358ELL)) >> 47) ^ 0xCC78D0E8C2DA5AE0);
  v49 = (-348639895 * ((v48 >> 47) ^ v48)) ^ 0x2D70662D;
  v50 = v45 - 1;
  v51 = 1;
  while (2)
  {
    v52 = v49 & v50;
    v53 = v46 + 24 * v52;
    v54 = *(_QWORD **)v53;
    if (*(_QWORD *)v53 == -1)
    {
      if ("no-nans-fp-math" == (char *)-1)
        break;
      goto LABEL_40;
    }
    if (v54 == (_QWORD *)-2)
    {
      if ("no-nans-fp-math" == (char *)-2)
        break;
      goto LABEL_40;
    }
    if (*(_QWORD *)(v53 + 8) != 15
      || (*v54 == 0x2D736E616E2D6F6ELL ? (v93 = *(_QWORD *)((char *)v54 + 7) == 0x6874616D2D70662DLL) : (v93 = 0), !v93))
    {
LABEL_40:
      if (v54 == (_QWORD *)-1)
      {
        v42 = *((unsigned __int16 *)this + 510);
        goto LABEL_42;
      }
      v49 = v51 + v52;
      ++v51;
      continue;
    }
    break;
  }
  v94 = llvm::Function::getFnAttribute((uint64_t)a2, "no-nans-fp-math", 0xFuLL);
  if (v94 && *(_DWORD *)(v94 + 16) == 4)
    v95 = 4 * (*(_DWORD *)(v94 + *(unsigned int *)(v94 + 12) + 25) == 1702195828);
  else
    v95 = 0;
  v55 = *((_WORD *)this + 510) & 0xFFFB | v95;
LABEL_43:
  *((_WORD *)this + 510) = v55;
  v56 = *((_QWORD *)a2 + 14);
  if (!v56 || !*(_DWORD *)(v56 + 8) || (v57 = *(_QWORD *)(v56 + 40)) == 0 || (v58 = *(_DWORD *)(v57 + 40)) == 0)
  {
LABEL_53:
    v69 = v55 & 0xFFFFFFEF | (16 * ((*((unsigned __int16 *)this + 358) >> 4) & 1));
    goto LABEL_54;
  }
  v59 = *(_QWORD *)(v57 + 24);
  v60 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v60 & 1) == 0)
  {
    v136 = *(_DWORD *)(v57 + 40);
    v124 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v58 = v136;
    if (v124)
    {
      v125 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v125 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v125;
      __cxa_guard_release(&qword_1ED7EAC88);
      v58 = v136;
    }
  }
  v61 = __ROR8__(qword_1ED7EAC80 ^ 0xFC9BC67DB8AC7E3, 30);
  v62 = 0x9DDFEA08EB382D69
      * ((qword_1ED7EAC80 - 0x102CBA84B1F06A04) ^ ((0x9DDFEA08EB382D69
                                                    * ((v61 + 0x4E390F61D0A552DLL) ^ (qword_1ED7EAC80
                                                                                    - 0x102CBA84B1F06A04))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v61 + 0x4E390F61D0A552DLL) ^ (qword_1ED7EAC80 - 0x102CBA84B1F06A04))));
  v63 = -348639895 * ((v62 >> 47) ^ v62);
  v64 = v58 - 1;
  v65 = 1;
  while (2)
  {
    v66 = v63 & v64;
    v67 = v59 + 24 * v66;
    v68 = *(_QWORD **)v67;
    if (*(_QWORD *)v67 == -1)
    {
      if ("no-signed-zeros-fp-math" == (char *)-1)
        break;
      goto LABEL_51;
    }
    if (v68 == (_QWORD *)-2)
    {
      if ("no-signed-zeros-fp-math" == (char *)-2)
        break;
      goto LABEL_51;
    }
    if (*(_QWORD *)(v67 + 8) != 23
      || (*v68 == 0x656E6769732D6F6ELL ? (v96 = v68[1] == 0x2D736F72657A2D64) : (v96 = 0),
          v96 ? (v97 = *(_QWORD *)((char *)v68 + 15) == 0x6874616D2D70662DLL) : (v97 = 0),
          !v97))
    {
LABEL_51:
      if (v68 == (_QWORD *)-1)
      {
        v55 = *((unsigned __int16 *)this + 510);
        goto LABEL_53;
      }
      v63 = v65 + v66;
      ++v65;
      continue;
    }
    break;
  }
  v98 = llvm::Function::getFnAttribute((uint64_t)a2, "no-signed-zeros-fp-math", 0x17uLL);
  if (v98 && *(_DWORD *)(v98 + 16) == 4)
    v99 = 16 * (*(_DWORD *)(v98 + *(unsigned int *)(v98 + 12) + 25) == 1702195828);
  else
    v99 = 0;
  LOWORD(v69) = *((_WORD *)this + 510) & 0xFFEF | v99;
LABEL_54:
  *((_WORD *)this + 510) = v69;
  v70 = *((_QWORD *)a2 + 14);
  if (!v70 || !*(_DWORD *)(v70 + 8) || (v71 = *(_QWORD *)(v70 + 40)) == 0 || (v72 = *(_DWORD *)(v71 + 40)) == 0)
  {
LABEL_64:
    v82 = *((_WORD *)this + 358) & 0x20;
    v83 = (_WORD *)((char *)this + 1020);
    goto LABEL_65;
  }
  v73 = *(_QWORD *)(v71 + 24);
  v74 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v74 & 1) == 0)
  {
    v137 = *(_QWORD *)(v71 + 24);
    v126 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v73 = v137;
    if (v126)
    {
      v127 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v127 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v127;
      __cxa_guard_release(&qword_1ED7EAC88);
      v73 = v137;
    }
  }
  v75 = __ROR8__(qword_1ED7EAC80 ^ 0xFC9BC67DB8AC7E3, 30);
  v76 = 0x9DDFEA08EB382D69
      * ((qword_1ED7EAC80 - 0x49BE07A926BA825ELL) ^ ((0x9DDFEA08EB382D69
                                                    * ((v75 + 0x23F44D17BE4D1E1) ^ (qword_1ED7EAC80
                                                                                    - 0x49BE07A926BA825ELL))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v75 + 0x23F44D17BE4D1E1) ^ (qword_1ED7EAC80 - 0x49BE07A926BA825ELL))));
  v77 = -348639895 * ((v76 >> 47) ^ v76);
  v78 = 1;
  while (2)
  {
    v79 = v77 & (v72 - 1);
    v80 = v73 + 24 * v79;
    v81 = *(_QWORD **)v80;
    if (*(_QWORD *)v80 == -1)
    {
      if ("approx-func-fp-math" == (char *)-1)
        goto LABEL_132;
      goto LABEL_62;
    }
    if (v81 == (_QWORD *)-2)
    {
      if ("approx-func-fp-math" == (char *)-2)
        goto LABEL_132;
LABEL_62:
      if (v81 != (_QWORD *)-1)
      {
        v77 = v78 + v79;
        ++v78;
        continue;
      }
      LOWORD(v69) = *((_WORD *)this + 510);
      goto LABEL_64;
    }
    break;
  }
  if (*(_QWORD *)(v80 + 8) != 19)
    goto LABEL_62;
  v100 = *v81 == 0x662D786F72707061 && v81[1] == 0x6D2D70662D636E75;
  if (!v100 || *(_QWORD *)((char *)v81 + 11) != 0x6874616D2D70662DLL)
    goto LABEL_62;
LABEL_132:
  v102 = *((_QWORD *)a2 + 14);
  if (!v102)
    goto LABEL_141;
  if (!*(_DWORD *)(v102 + 8))
    goto LABEL_141;
  v103 = *(_QWORD *)(v102 + 40);
  if (!v103)
    goto LABEL_141;
  v104 = *(_DWORD *)(v103 + 40);
  if (!v104)
    goto LABEL_141;
  v105 = *(_QWORD *)(v103 + 24);
  v106 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v106 & 1) == 0)
  {
    v128 = v104;
    v129 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v104 = v128;
    if (v129)
    {
      v130 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v130 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v130;
      __cxa_guard_release(&qword_1ED7EAC88);
      v104 = v128;
    }
  }
  v107 = __ROR8__(qword_1ED7EAC80 ^ 0xFC9BC67DB8AC7E3, 30);
  v108 = 0x9DDFEA08EB382D69
       * ((qword_1ED7EAC80 - 0x49BE07A926BA825ELL) ^ ((0x9DDFEA08EB382D69
                                                     * ((v107 + 0x23F44D17BE4D1E1) ^ (qword_1ED7EAC80
                                                                                      - 0x49BE07A926BA825ELL))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v107 + 0x23F44D17BE4D1E1) ^ (qword_1ED7EAC80 - 0x49BE07A926BA825ELL))));
  v109 = -348639895 * ((v108 >> 47) ^ v108);
  for (j = 1; ; ++j)
  {
    v111 = v109 & (v104 - 1);
    v112 = v105 + 24 * v111;
    v113 = *(_QWORD **)v112;
    if (*(_QWORD *)v112 == -1)
    {
      if ("approx-func-fp-math" == (char *)-1)
        goto LABEL_168;
      goto LABEL_140;
    }
    if (v113 != (_QWORD *)-2)
      break;
    if ("approx-func-fp-math" == (char *)-2)
      goto LABEL_168;
LABEL_140:
    if (v113 == (_QWORD *)-1)
      goto LABEL_141;
    v109 = j + v111;
  }
  if (*(_QWORD *)(v112 + 8) != 19)
    goto LABEL_140;
  v114 = *v113 == 0x662D786F72707061 && v113[1] == 0x6D2D70662D636E75;
  if (!v114 || *(_QWORD *)((char *)v113 + 11) != 0x6874616D2D70662DLL)
    goto LABEL_140;
LABEL_168:
  v116 = *(_QWORD *)(v112 + 16);
  if (!v116 || *(_DWORD *)(v116 + 16) != 4)
  {
LABEL_141:
    v82 = 0;
    goto LABEL_142;
  }
  v82 = 32 * (*(_DWORD *)(v116 + *(unsigned int *)(v116 + 12) + 25) == 1702195828);
LABEL_142:
  v83 = (_WORD *)((char *)this + 1020);
  LOWORD(v69) = *((_WORD *)this + 510);
LABEL_65:
  *v83 = v69 & 0xFFDF | v82;
}

uint64_t llvm::TargetMachine::getCodeModel(llvm::TargetMachine *this)
{
  return *((unsigned int *)this + 137);
}

BOOL llvm::TargetMachine::useEmulatedTLS(llvm::TargetMachine *this)
{
  unsigned int v1;
  int v2;
  int v3;
  _BOOL4 v4;

  v1 = *((_DWORD *)this + 260);
  if ((v1 & 0x40000) != 0)
    return (v1 >> 17) & 1;
  v2 = *((_DWORD *)this + 122);
  if (v2 == 11)
    return 1;
  v3 = *((_DWORD *)this + 121);
  v4 = v2 == 18;
  if (v3 != 15)
    v4 = 0;
  return v3 == 13 || v4;
}

uint64_t llvm::TargetMachine::getTLSModel(llvm::TargetMachine *this, llvm::Module **a2)
{
  int PIELevel;
  int v5;
  const llvm::Module *v6;
  unsigned int shouldAssumeDSOLocal;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;

  PIELevel = llvm::Module::getPIELevel(a2[5]);
  v5 = *((_DWORD *)this + 136);
  shouldAssumeDSOLocal = llvm::TargetMachine::shouldAssumeDSOLocal(this, v6, (const llvm::GlobalValue *)a2);
  v8 = ((*((_DWORD *)a2 + 8) >> 10) & 7) - 1;
  if (shouldAssumeDSOLocal)
    v9 = 3;
  else
    v9 = 2;
  if (PIELevel)
    v10 = 0;
  else
    v10 = v5 == 1;
  if (v10)
    v9 = shouldAssumeDSOLocal;
  if (v8 <= v9)
    return v9;
  else
    return v8;
}

uint64_t llvm::TargetMachine::getOptLevel(llvm::TargetMachine *this)
{
  return *((unsigned int *)this + 138);
}

unint64_t llvm::TargetMachine::getSymbol(llvm::TargetMachine *this, const llvm::GlobalValue *a2)
{
  _QWORD *v4;
  uint64_t v5;
  llvm::Mangler *v6;
  uint64_t v7;
  unint64_t Symbol;
  uint64_t v10;
  _QWORD v11[2];
  uint64_t v12;
  __int16 v13;
  int v14;
  void *v15;
  __int128 v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)(*(uint64_t (**)(llvm::TargetMachine *))(*(_QWORD *)this + 24))(this);
  v5 = (*(uint64_t (**)(_QWORD *, const llvm::GlobalValue *, llvm::TargetMachine *))(*v4 + 232))(v4, a2, this);
  if (v5)
    return v5;
  v15 = v17;
  v16 = xmmword_1C85F20B0;
  if ((*((_DWORD *)a2 + 8) & 0xF) == 8)
  {
    v10 = (*(uint64_t (**)(llvm::TargetMachine *))(*(_QWORD *)this + 24))(this);
    (*(void (**)(uint64_t, void **, const llvm::GlobalValue *, llvm::TargetMachine *))(*(_QWORD *)v10 + 80))(v10, &v15, a2, this);
  }
  else
  {
    v6 = (llvm::Mangler *)v4[117];
    sub_1C613932C((uint64_t)v11, (uint64_t)&v15);
    llvm::Mangler::getNameWithPrefix(v6, (llvm::raw_ostream *)v11, a2, 0);
    v11[0] = off_1E81A6E70;
    if (v14 == 1 && v12)
      MEMORY[0x1CAA32F9C](v12, 0x1000C8077774924);
  }
  v7 = v4[105];
  v13 = 261;
  v11[0] = v15;
  v11[1] = v16;
  Symbol = llvm::MCContext::getOrCreateSymbol(v7, (uint64_t)v11);
  if (v15 != v17)
    free(v15);
  return Symbol;
}

unint64_t llvm::TargetMachine::parseBinutilsVersion(_DWORD *a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  int v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  _BYTE *v10;
  unint64_t v11;
  unint64_t v12;

  v10 = a1;
  v11 = a2;
  if (a2 == 4 && *a1 == 1701736302)
  {
    v7 = 0x7FFFFFFF00000000;
    v6 = 0x7FFFFFFF;
    return v7 | v6;
  }
  v12 = 0;
  llvm::consumeSignedInteger((llvm *)&v10, (llvm::StringRef *)0xA, &v12, a4);
  if (v5 || (v6 = v12, v12 != (int)v12))
  {
    v6 = 0;
LABEL_6:
    v7 = 0;
    return v7 | v6;
  }
  v7 = v11;
  if (!v11)
    return v7 | v6;
  if (*v10 != 46)
    goto LABEL_6;
  ++v10;
  --v11;
  v12 = 0;
  llvm::consumeSignedInteger((llvm *)&v10, (llvm::StringRef *)0xA, &v12, v4);
  if (v12 == (int)v12)
    v7 = v12 << 32;
  else
    v7 = 0;
  if (v8)
    v7 = 0;
  return v7 | v6;
}

void sub_1C5E874F8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5E8750C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E81A7FC0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C5E87540(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E81A7FC0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C5E8755C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8));
}

uint64_t LLVMGetFirstTarget()
{
  return qword_1ED834A00;
}

uint64_t LLVMGetNextTarget(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t LLVMGetTargetFromName(char *__s)
{
  size_t v2;
  uint64_t i;
  const void *v4;
  size_t v5;

  if (__s)
    v2 = strlen(__s);
  else
    v2 = 0;
  for (i = qword_1ED834A00; i; i = *(_QWORD *)i)
  {
    v4 = *(const void **)(i + 16);
    if (v4)
      v5 = strlen(*(const char **)(i + 16));
    else
      v5 = 0;
    if (v5 == v2 && (!v2 || !memcmp(v4, __s, v2)))
      break;
  }
  return i;
}

uint64_t LLVMGetTargetFromTriple(const char *a1, uint64_t **a2, char **a3)
{
  size_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void **v13;
  void *__p[2];
  unint64_t v16;
  void *v17[2];
  uint64_t v18;

  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  v6 = strlen(a1);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    __p[1] = v7;
    v16 = v10 | 0x8000000000000000;
    __p[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(v16) = v6;
  v8 = __p;
  if (v6)
LABEL_8:
    memcpy(v8, a1, (size_t)v7);
  *((_BYTE *)v7 + (_QWORD)v8) = 0;
  v11 = llvm::TargetRegistry::lookupTarget((std::string::size_type)__p, (uint64_t)v17);
  *a2 = v11;
  if (SHIBYTE(v16) < 0)
  {
    operator delete(__p[0]);
    if (*a2)
      goto LABEL_11;
  }
  else if (v11)
  {
LABEL_11:
    v12 = 0;
    goto LABEL_19;
  }
  if (a3)
  {
    if (v18 >= 0)
      v13 = v17;
    else
      v13 = (void **)v17[0];
    *a3 = strdup((const char *)v13);
  }
  v12 = 1;
LABEL_19:
  if (SHIBYTE(v18) < 0)
    operator delete(v17[0]);
  return v12;
}

uint64_t LLVMGetTargetName(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t LLVMGetTargetDescription(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t LLVMTargetHasJIT(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

BOOL LLVMTargetHasTargetMachine(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96) != 0;
}

BOOL LLVMTargetHasAsmBackend(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104) != 0;
}

uint64_t LLVMCreateTargetMachine(uint64_t a1, char *__s, const char *a3, const char *a4, unsigned int a5, int a6, unsigned int a7)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  size_t v16;
  size_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v25;
  _BYTE v27[4];
  int v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  __int16 v37;
  void *v38[2];
  __int128 v39;
  __int128 v40;
  int v41;
  int v42;
  __int16 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[32];
  __int128 __p;
  uint64_t v54;
  void **v55;

  LODWORD(v10) = a6 - 1;
  v11 = (a6 - 1) < 6;
  if ((a6 - 1) >= 6)
    v10 = 0;
  else
    v10 = v10;
  v25 = v10;
  v12 = 0;
  v13 = a7;
  v14 = a7;
  switch(a7)
  {
    case 0u:
      break;
    case 1u:
      v13 = 0;
      v14 = 0;
      v12 = 1;
      break;
    case 2u:
      v12 = 0;
      v14 = 0;
      v13 = 0x100000000;
      break;
    case 4u:
      v12 = 0;
      v13 = 0x100000000;
      v14 = 2;
      break;
    case 5u:
      v12 = 0;
      v13 = 0x100000000;
      v14 = 3;
      break;
    case 6u:
      v12 = 0;
      v13 = 0x100000000;
      v14 = 4;
      break;
    default:
      v12 = 0;
      v13 = 0x100000000;
      v14 = 1;
      break;
  }
  v27[0] = 0;
  if (a5 >= 4)
    v15 = 2;
  else
    v15 = a5;
  v28 = 0;
  v29 = 0;
  v30 = 1024;
  v31 = 0x100000001;
  v32 = 0;
  v33 = 0x3000000000;
  v34 = 4;
  *(_OWORD *)v38 = 0u;
  v39 = 0u;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v40 = xmmword_1C677F4F0;
  v41 = -65536;
  v42 = 0;
  v43 = 4096;
  v44 = 2;
  __p = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  memset(v52, 0, sizeof(v52));
  v54 = 0;
  if (__s)
  {
    v16 = strlen(__s);
    if (a3)
    {
LABEL_16:
      v17 = strlen(a3);
      goto LABEL_19;
    }
  }
  else
  {
    v16 = 0;
    if (a3)
      goto LABEL_16;
  }
  v17 = 0;
LABEL_19:
  v18 = v11 << 32;
  if (a4)
    v19 = strlen(a4);
  else
    v19 = 0;
  v20 = sub_1C4D7B2D4(a1, (uint64_t)__s, v16, (uint64_t)a3, v17, (uint64_t)a4, v19, (uint64_t)v27, v18 | v25, v14 | v13, v15, v12);
  if (SHIBYTE(v54) < 0)
    operator delete((void *)__p);
  v55 = (void **)&v52[8];
  sub_1C4765410(&v55);
  if (SHIBYTE(v50) < 0)
    operator delete(*((void **)&v49 + 1));
  if (SBYTE7(v49) < 0)
    operator delete((void *)v48);
  if (SHIBYTE(v47) < 0)
    operator delete(*((void **)&v46 + 1));
  if (SBYTE7(v46) < 0)
    operator delete((void *)v45);
  if (SBYTE7(v39) < 0)
    operator delete(v38[0]);
  v21 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  return v20;
}

uint64_t LLVMDisposeTargetMachine(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t LLVMGetTargetMachineTarget(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

char *LLVMGetTargetMachineTriple(uint64_t a1)
{
  int v1;
  void *v2;
  const char *v3;
  char *v4;
  __int128 v6;
  uint64_t v7;

  if (*(char *)(a1 + 471) < 0)
  {
    sub_1C47EBC30(&v6, *(void **)(a1 + 448), *(_QWORD *)(a1 + 456));
  }
  else
  {
    v6 = *(_OWORD *)(a1 + 448);
    v7 = *(_QWORD *)(a1 + 464);
  }
  v1 = SHIBYTE(v7);
  v2 = (void *)v6;
  if (v7 >= 0)
    v3 = (const char *)&v6;
  else
    v3 = (const char *)v6;
  v4 = strdup(v3);
  if (v1 < 0)
    operator delete(v2);
  return v4;
}

char *LLVMGetTargetMachineCPU(uint64_t a1)
{
  char v1;
  const void *v2;
  size_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void *v8;
  const char *v9;
  char *v10;
  _QWORD __dst[2];
  int64_t v13;

  v1 = *(_BYTE *)(a1 + 519);
  if (v1 >= 0)
    v2 = (const void *)(a1 + 496);
  else
    v2 = *(const void **)(a1 + 496);
  if (v1 >= 0)
    v3 = v1 & 0x7F;
  else
    v3 = *(_QWORD *)(a1 + 504);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v3 >= 0x17)
  {
    v5 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v5 = v3 | 7;
    v6 = v5 + 1;
    v4 = operator new(v5 + 1);
    __dst[1] = v3;
    v13 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_14;
  }
  HIBYTE(v13) = v3;
  v4 = __dst;
  if (v3)
LABEL_14:
    memmove(v4, v2, v3);
  *((_BYTE *)v4 + v3) = 0;
  v7 = SHIBYTE(v13);
  v8 = (void *)__dst[0];
  if (v13 >= 0)
    v9 = (const char *)__dst;
  else
    v9 = (const char *)__dst[0];
  v10 = strdup(v9);
  if (v7 < 0)
    operator delete(v8);
  return v10;
}

char *LLVMGetTargetMachineFeatureString(uint64_t a1)
{
  char v1;
  int v2;
  const void *v3;
  size_t v4;
  size_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void *v10;
  const char *v11;
  char *v12;
  _QWORD __dst[2];
  int64_t v15;

  v1 = *(_BYTE *)(a1 + 543);
  v2 = v1;
  if (v1 >= 0)
    v3 = (const void *)(a1 + 520);
  else
    v3 = *(const void **)(a1 + 520);
  v4 = v1 & 0x7F;
  if (v2 >= 0)
    v5 = v4;
  else
    v5 = *(_QWORD *)(a1 + 528);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v5 >= 0x17)
  {
    v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v7 = v5 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = v5;
    v15 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_14;
  }
  HIBYTE(v15) = v5;
  v6 = __dst;
  if (v5)
LABEL_14:
    memmove(v6, v3, v5);
  *((_BYTE *)v6 + v5) = 0;
  v9 = SHIBYTE(v15);
  v10 = (void *)__dst[0];
  if (v15 >= 0)
    v11 = (const char *)__dst;
  else
    v11 = (const char *)__dst[0];
  v12 = strdup(v11);
  if (v9 < 0)
    operator delete(v10);
  return v12;
}

uint64_t LLVMSetTargetMachineAsmVerbosity(uint64_t result, int a2)
{
  *(_WORD *)(result + 1128) = *(_WORD *)(result + 1128) & 0xF7FF | ((a2 != 0) << 11);
  return result;
}

uint64_t LLVMCreateTargetDataLayout(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_WORD *)(v2 + 8) = 0;
  *(_WORD *)(v2 + 20) = 0;
  *(_QWORD *)(v2 + 32) = v2 + 56;
  *(_OWORD *)(v2 + 40) = xmmword_1C6464ED0;
  *(_QWORD *)(v2 + 64) = v2 + 80;
  *(_QWORD *)(v2 + 72) = 0x1000000000;
  *(_QWORD *)(v2 + 208) = 0;
  *(_QWORD *)(v2 + 216) = 0;
  *(_QWORD *)(v2 + 224) = 0;
  *(_QWORD *)(v2 + 232) = v2 + 248;
  *(_QWORD *)(v2 + 240) = 0x800000000;
  *(_QWORD *)(v2 + 376) = 0;
  *(_QWORD *)(v2 + 384) = v2 + 400;
  *(_QWORD *)(v2 + 392) = 0x800000000;
  sub_1C48815D8(v2, a1 + 16);
  return v2;
}

uint64_t LLVMTargetMachineEmitToFile(uint64_t a1, llvm::Module *a2, char *a3, int a4, char **a5)
{
  size_t v10;
  int v11;
  void *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  std::string v17;
  _BYTE v18[16];
  char *v19;
  char *v20;
  std::error_code v21;

  v21.__val_ = 0;
  v21.__cat_ = std::system_category();
  if (a3)
    v10 = strlen(a3);
  else
    v10 = 0;
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v18, a3, v10, (uint64_t)&v21, 0);
  if (v21.__val_)
  {
    std::error_code::message(&v17, &v21);
    v11 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
    v12 = (void *)v17.__r_.__value_.__r.__words[0];
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v17;
    else
      v13 = (std::string *)v17.__r_.__value_.__r.__words[0];
    *a5 = strdup((const char *)v13);
    if (v11 < 0)
      operator delete(v12);
    v14 = 1;
  }
  else
  {
    v14 = sub_1C5E87E48(a1, a2, (llvm::raw_ostream *)v18, a4, a5);
    v15 = v20 - v19;
    if (v20 != v19)
    {
      v20 = v19;
      llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)v18, v19, v15);
    }
  }
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v18);
  return v14;
}

uint64_t sub_1C5E87E48(uint64_t a1, llvm::Module *a2, llvm::raw_ostream *a3, int a4, char **a5)
{
  int v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  _QWORD v17[2];
  uint64_t v18;
  void (**v19)(llvm::legacy::PassManager *__hidden);
  llvm::legacy::PassManagerImpl *v20;
  _BYTE v21[8];
  __int16 v22;
  __int16 v23;
  _QWORD *v24;
  __int128 v25;
  _QWORD v26[3];
  _BYTE v27[152];
  _QWORD *v28;
  uint64_t v29;
  _QWORD v30[19];
  _QWORD v31[5];

  v31[4] = *MEMORY[0x1E0C80C00];
  llvm::legacy::PassManager::PassManager((llvm::legacy::PassManager *)&v19);
  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  v22 = 0;
  v23 = 0;
  v24 = v26;
  v25 = xmmword_1C6464ED0;
  v26[1] = v27;
  v26[2] = 0x1000000000;
  memset(&v27[128], 0, 24);
  v28 = v30;
  v29 = 0x800000000;
  v30[16] = 0;
  v30[17] = v31;
  v30[18] = 0x800000000;
  sub_1C48815D8((uint64_t)v21, a1 + 16);
  sub_1C48815D8((uint64_t)a2 + 272, (uint64_t)v21);
  llvm::DataLayout::~DataLayout((llvm::DataLayout *)v21);
  if (((*(uint64_t (**)(uint64_t, void (***)(llvm::legacy::PassManager *__hidden), llvm::raw_ostream *, _QWORD, BOOL, uint64_t, _QWORD))(*(_QWORD *)a1 + 120))(a1, &v19, a3, 0, a4 != 0, 1, 0) & 1) != 0)
  {
    MEMORY[0x1CAA32ABC](v17, "TargetMachine can't emit a file of this type");
    v10 = SHIBYTE(v18);
    v11 = (void *)v17[0];
    if (v18 >= 0)
      v12 = (const char *)v17;
    else
      v12 = (const char *)v17[0];
    *a5 = strdup(v12);
    if (v10 < 0)
      operator delete(v11);
    v13 = 1;
  }
  else
  {
    llvm::legacy::PassManagerImpl::run(v20, a2);
    v14 = (const char *)*((_QWORD *)a3 + 4);
    v15 = (const char *)*((_QWORD *)a3 + 2);
    if (v14 != v15)
    {
      *((_QWORD *)a3 + 4) = v15;
      llvm::raw_ostream::flush_tied_then_write(a3, v15, v14 - v15);
    }
    v13 = 0;
  }
  v19 = &off_1E81682B8;
  if (v20)
    (*(void (**)(llvm::legacy::PassManagerImpl *))(*(_QWORD *)v20 + 8))(v20);
  return v13;
}

uint64_t LLVMTargetMachineEmitToMemoryBuffer(uint64_t a1, llvm::Module *a2, int a3, char **a4, uint64_t *a5)
{
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;
  int v14;
  uint64_t v15;
  void *v16[3];
  uint64_t v17;

  v16[1] = 0;
  v16[2] = 0;
  v16[0] = &v17;
  sub_1C613932C((uint64_t)v12, (uint64_t)v16);
  v10 = sub_1C5E87E48(a1, a2, (llvm::raw_ostream *)v12, a3, a4);
  *a5 = LLVMCreateMemoryBufferWithMemoryRangeCopy(*(const void **)v15, *(_QWORD *)(v15 + 8), "");
  v12[0] = off_1E81A6E70;
  if (v14 == 1 && v13)
    MEMORY[0x1CAA32F9C](v13, 0x1000C8077774924);
  if (v16[0] != &v17)
    free(v16[0]);
  return v10;
}

char *LLVMGetDefaultTargetTriple()
{
  int v0;
  void *v1;
  const char *v2;
  char *v3;
  _QWORD v5[2];
  char v6;

  llvm::sys::getDefaultTargetTriple((uint64_t)v5);
  v0 = v6;
  v1 = (void *)v5[0];
  if (v6 >= 0)
    v2 = (const char *)v5;
  else
    v2 = (const char *)v5[0];
  v3 = strdup(v2);
  if (v0 < 0)
    operator delete(v1);
  return v3;
}

char *LLVMNormalizeTargetTriple(char *__s)
{
  size_t v2;
  int v3;
  void *v4;
  std::string *v5;
  char *v6;
  std::string v8;

  if (__s)
    v2 = strlen(__s);
  else
    v2 = 0;
  llvm::Triple::normalize((uint64_t)__s, v2, &v8);
  v3 = SHIBYTE(v8.__r_.__value_.__r.__words[2]);
  v4 = (void *)v8.__r_.__value_.__r.__words[0];
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v8;
  else
    v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
  v6 = strdup((const char *)v5);
  if (v3 < 0)
    operator delete(v4);
  return v6;
}

char *LLVMGetHostCPUName(llvm::sys *a1)
{
  const char *HostCPUName;

  HostCPUName = llvm::sys::getHostCPUName(a1);
  return strdup(HostCPUName);
}

char *LLVMGetHostCPUFeatures()
{
  int v0;
  void *v1;
  std::string *v2;
  char *v3;
  std::string v5;
  void **v6[4];
  std::string *v7;
  std::string *v8;
  uint64_t v9;

  v7 = 0;
  v8 = 0;
  v9 = 0;
  llvm::SubtargetFeatures::Split((unint64_t *)&v7, (uint64_t)"", 0);
  v6[0] = 0;
  v6[1] = 0;
  v6[2] = (void **)0x1000000000;
  sub_1C5021A04(v7, v8, ",", 1uLL, &v5);
  v0 = SHIBYTE(v5.__r_.__value_.__r.__words[2]);
  v1 = (void *)v5.__r_.__value_.__r.__words[0];
  if ((v5.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v2 = &v5;
  else
    v2 = (std::string *)v5.__r_.__value_.__r.__words[0];
  v3 = strdup((const char *)v2);
  if (v0 < 0)
    operator delete(v1);
  sub_1C4F02264((uint64_t)v6);
  v6[0] = (void **)&v7;
  sub_1C4765410(v6);
  return v3;
}

uint64_t LLVMAddAnalysisPasses(llvm::TargetMachine *a1, uint64_t a2)
{
  uint64_t TargetTransformInfoWrapperPass;
  uint64_t result;
  uint64_t (**v5)(void);
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  llvm::TargetMachine::getTargetIRAnalysis(a1, (uint64_t)v6);
  TargetTransformInfoWrapperPass = llvm::createTargetTransformInfoWrapperPass(v6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, TargetTransformInfoWrapperPass);
  result = (uint64_t)v7;
  if (v7 == v6)
  {
    v5 = (uint64_t (**)(void))(v6[0] + 32);
  }
  else
  {
    if (!v7)
      return result;
    v5 = (uint64_t (**)(void))(*v7 + 40);
  }
  return (*v5)();
}

uint64_t llvm::MachO::getArchitectureFromCpuType(llvm::MachO *this, int a2)
{
  int v2;

  v2 = a2 & 0xFFFFFF;
  if ((_DWORD)this == 7 && v2 == 3)
  {
    LOBYTE(v2) = 0;
  }
  else if ((_DWORD)this == 16777223 && v2 == 3)
  {
    LOBYTE(v2) = 1;
  }
  else if ((_DWORD)this == 16777223 && v2 == 8)
  {
    LOBYTE(v2) = 2;
  }
  else if ((_DWORD)this == 12 && v2 == 5)
  {
    LOBYTE(v2) = 3;
  }
  else if ((_DWORD)this == 12 && v2 == 6)
  {
    LOBYTE(v2) = 4;
  }
  else if ((_DWORD)this == 12 && v2 == 7)
  {
    LOBYTE(v2) = 5;
  }
  else if ((_DWORD)this == 12 && v2 == 9)
  {
    LOBYTE(v2) = 6;
  }
  else if ((_DWORD)this == 12 && v2 == 11)
  {
    LOBYTE(v2) = 7;
  }
  else if ((_DWORD)this == 12 && v2 == 12)
  {
    LOBYTE(v2) = 8;
  }
  else if ((_DWORD)this == 12 && v2 == 14)
  {
    LOBYTE(v2) = 9;
  }
  else if ((_DWORD)this == 12 && v2 == 15)
  {
    LOBYTE(v2) = 10;
  }
  else if ((_DWORD)this == 12 && v2 == 16)
  {
    LOBYTE(v2) = 11;
  }
  else if ((_DWORD)this != 16777228 || v2)
  {
    if ((_DWORD)this == 16777228 && v2 == 2)
    {
      LOBYTE(v2) = 13;
    }
    else if ((_DWORD)this == 33554444 && v2 == 1)
    {
      LOBYTE(v2) = 14;
    }
    else if ((_DWORD)this == 16777228 && v2 == 1)
    {
      LOBYTE(v2) = 15;
    }
    else if ((_DWORD)this == 16777235 && v2 == 32)
    {
      LOBYTE(v2) = 16;
    }
    else if ((_DWORD)this != 16777235 || v2 != 17)
    {
      if ((_DWORD)this == 16777235 && v2 == 49)
      {
        LOBYTE(v2) = 18;
      }
      else if ((_DWORD)this == 16777235 && v2 == 65)
      {
        LOBYTE(v2) = 19;
      }
      else if ((_DWORD)this == 16777235 && v2 == 81)
      {
        LOBYTE(v2) = 20;
      }
      else if ((_DWORD)this == 16777235 && v2 == 97)
      {
        LOBYTE(v2) = 21;
      }
      else if ((_DWORD)this == 16777235 && v2 == 34)
      {
        LOBYTE(v2) = 22;
      }
      else if ((_DWORD)this == 16777235 && v2 == 114)
      {
        LOBYTE(v2) = 23;
      }
      else if ((_DWORD)this == 16777235 && v2 == 82)
      {
        LOBYTE(v2) = 24;
      }
      else if ((_DWORD)this == 16777235 && v2 == 146)
      {
        LOBYTE(v2) = 25;
      }
      else if ((_DWORD)this == 16777235 && v2 == 1602)
      {
        LOBYTE(v2) = 26;
      }
      else if ((_DWORD)this == 16777235 && v2 == 210)
      {
        LOBYTE(v2) = 27;
      }
      else if ((_DWORD)this == 16777235 && v2 == 290)
      {
        LOBYTE(v2) = 28;
      }
      else if ((_DWORD)this == 16777235 && v2 == 322)
      {
        LOBYTE(v2) = 29;
      }
      else if ((_DWORD)this == 16777235 && v2 == 530)
      {
        LOBYTE(v2) = 30;
      }
      else if ((_DWORD)this == 16777235 && v2 == 562)
      {
        LOBYTE(v2) = 31;
      }
      else if ((_DWORD)this == 16777235 && v2 == 594)
      {
        LOBYTE(v2) = 32;
      }
      else if ((_DWORD)this == 16777235 && v2 == 370)
      {
        LOBYTE(v2) = 33;
      }
      else if ((_DWORD)this == 16777235 && v2 == 402)
      {
        LOBYTE(v2) = 34;
      }
      else if ((_DWORD)this == 16777235 && v2 == 434)
      {
        LOBYTE(v2) = 35;
      }
      else if ((_DWORD)this == 16777235 && v2 == 498)
      {
        LOBYTE(v2) = 36;
      }
      else if ((_DWORD)this == 16777235 && v2 == 610)
      {
        LOBYTE(v2) = 37;
      }
      else if ((_DWORD)this == 16777235 && v2 == 275)
      {
        LOBYTE(v2) = 38;
      }
      else if ((_DWORD)this == 16777235 && v2 == 419)
      {
        LOBYTE(v2) = 39;
      }
      else if ((_DWORD)this == 16777235 && v2 == 435)
      {
        LOBYTE(v2) = 40;
      }
      else if ((_DWORD)this == 16777235 && v2 == 403)
      {
        LOBYTE(v2) = 41;
      }
      else if ((_DWORD)this == 16777235 && v2 == 323)
      {
        LOBYTE(v2) = 42;
      }
      else if ((_DWORD)this == 16777236 && v2 == 4000)
      {
        LOBYTE(v2) = 43;
      }
      else if ((_DWORD)this == 16777236 && v2 == 4001)
      {
        LOBYTE(v2) = 44;
      }
      else if ((_DWORD)this == 16777236 && v2 == 4002)
      {
        LOBYTE(v2) = 45;
      }
      else if ((_DWORD)this == 16777236 && v2 == 4003)
      {
        LOBYTE(v2) = 46;
      }
      else if ((_DWORD)this == 16777236 && v2 == 4004)
      {
        LOBYTE(v2) = 47;
      }
      else if ((_DWORD)this == 16777236 && v2 == 4005)
      {
        LOBYTE(v2) = 48;
      }
      else if ((_DWORD)this == 16777236 && v2 == 5000)
      {
        LOBYTE(v2) = 49;
      }
      else if ((_DWORD)this == 16777236 && v2 == 5001)
      {
        LOBYTE(v2) = 50;
      }
      else if ((_DWORD)this == 16777236 && v2 == 5002)
      {
        LOBYTE(v2) = 51;
      }
      else if ((_DWORD)this == 16777236 && v2 == 6000)
      {
        LOBYTE(v2) = 52;
      }
      else if ((_DWORD)this == 16777236 && v2 == 6001)
      {
        LOBYTE(v2) = 53;
      }
      else if ((_DWORD)this == 16777236 && v2 == 6002)
      {
        LOBYTE(v2) = 54;
      }
      else if ((_DWORD)this == 16777236 && v2 == 6003)
      {
        LOBYTE(v2) = 55;
      }
      else if ((_DWORD)this == 16777236 && v2 == 6004)
      {
        LOBYTE(v2) = 56;
      }
      else if ((_DWORD)this == 16777236 && v2 == 6005)
      {
        LOBYTE(v2) = 57;
      }
      else if ((_DWORD)this == 16777237 && v2 == 590342)
      {
        LOBYTE(v2) = 58;
      }
      else if ((_DWORD)this == 16777237 && v2 == 590343)
      {
        LOBYTE(v2) = 59;
      }
      else if ((_DWORD)this == 16777237 && v2 == 590602)
      {
        LOBYTE(v2) = 60;
      }
      else if ((_DWORD)this == 16777237 && v2 == 9765376)
      {
        LOBYTE(v2) = 61;
      }
      else if ((_DWORD)this == 16777237 && v2 == 9765378)
      {
        LOBYTE(v2) = 62;
      }
      else if ((_DWORD)this == 16777237 && v2 == 9765380)
      {
        LOBYTE(v2) = 63;
      }
      else if ((_DWORD)this == 16777237 && v2 == 9765633)
      {
        LOBYTE(v2) = 64;
      }
      else if ((_DWORD)this == 16777237 && v2 == 9765638)
      {
        LOBYTE(v2) = 65;
      }
      else if ((_DWORD)this == 16777237 && v2 == 1115655)
      {
        LOBYTE(v2) = 66;
      }
      else if ((_DWORD)this == 16777237 && v2 == 1116167)
      {
        LOBYTE(v2) = 67;
      }
      else if ((_DWORD)this == 16777238 && v2 == 1)
      {
        LOBYTE(v2) = 68;
      }
      else if ((_DWORD)this == 16777238 && v2 == 2)
      {
        LOBYTE(v2) = 69;
      }
      else if ((_DWORD)this == 16777238 && v2 == 3)
      {
        LOBYTE(v2) = 70;
      }
      else if ((_DWORD)this == 16777238 && v2 == 4)
      {
        LOBYTE(v2) = 71;
      }
      else if ((_DWORD)this == 23 && v2 == 1)
      {
        LOBYTE(v2) = 72;
      }
      else if ((_DWORD)this == 23 && v2 == 2)
      {
        LOBYTE(v2) = 73;
      }
      else if ((_DWORD)this == 23 && v2 == 3)
      {
        LOBYTE(v2) = 74;
      }
      else if ((_DWORD)this == 23 && v2 == 4)
      {
        LOBYTE(v2) = 75;
      }
      else if ((_DWORD)this == 23 && v2 == 5)
      {
        LOBYTE(v2) = 76;
      }
      else if ((_DWORD)this == 23 && v2 == 6)
      {
        LOBYTE(v2) = 77;
      }
      else if ((_DWORD)this == 23 && v2 == 7)
      {
        LOBYTE(v2) = 78;
      }
      else if ((_DWORD)this == 23 && v2 == 8)
      {
        LOBYTE(v2) = 79;
      }
      else if ((_DWORD)this == 23 && v2 == 9)
      {
        LOBYTE(v2) = 80;
      }
      else if ((_DWORD)this == 23 && v2 == 10)
      {
        LOBYTE(v2) = 81;
      }
      else if ((_DWORD)this == 23 && v2 == 11)
      {
        LOBYTE(v2) = 82;
      }
      else if ((_DWORD)this == 16777239 && v2 == 1)
      {
        LOBYTE(v2) = 83;
      }
      else if ((_DWORD)this == 16777239 && v2 == 2)
      {
        LOBYTE(v2) = 84;
      }
      else if ((_DWORD)this == 16777239 && v2 == 3)
      {
        LOBYTE(v2) = 85;
      }
      else if ((_DWORD)this == 16777239 && v2 == 4)
      {
        LOBYTE(v2) = 86;
      }
      else if ((_DWORD)this == 16777239 && v2 == 5)
      {
        LOBYTE(v2) = 87;
      }
      else if ((_DWORD)this == 16777239 && v2 == 6)
      {
        LOBYTE(v2) = 88;
      }
      else if ((_DWORD)this == 16777239 && v2 == 7)
      {
        LOBYTE(v2) = 89;
      }
      else if ((_DWORD)this == 16777239 && v2 == 8)
      {
        LOBYTE(v2) = 90;
      }
      else if ((_DWORD)this == 16777239 && v2 == 9)
      {
        LOBYTE(v2) = 91;
      }
      else if ((_DWORD)this == 16777239 && v2 == 10)
      {
        LOBYTE(v2) = 92;
      }
      else if ((_DWORD)this == 16777239 && v2 == 11)
      {
        LOBYTE(v2) = 93;
      }
      else if ((_DWORD)this == 7 && v2 == 4)
      {
        LOBYTE(v2) = 94;
      }
      else if ((_DWORD)this == 7 && v2 == 5)
      {
        LOBYTE(v2) = 95;
      }
      else if ((_DWORD)this == 16777235 && v2 == 16)
      {
        LOBYTE(v2) = 96;
      }
      else if ((_DWORD)this == 16777235 && v2 == 33)
      {
        LOBYTE(v2) = 97;
      }
      else if ((_DWORD)this != 16777235 || v2 != 98)
      {
        if ((_DWORD)this == 16777235 && v2 == 66)
        {
          LOBYTE(v2) = 99;
        }
        else if ((_DWORD)this == 16777235 && v2 == 130)
        {
          LOBYTE(v2) = 100;
        }
        else if ((_DWORD)this == 16777235 && v2 == 194)
        {
          LOBYTE(v2) = 101;
        }
        else if ((_DWORD)this == 16777235 && v2 == 274)
        {
          LOBYTE(v2) = 102;
        }
        else if ((_DWORD)this == 16777235 && v2 == 306)
        {
          LOBYTE(v2) = 103;
        }
        else if ((_DWORD)this == 16777235 && v2 == 514)
        {
          LOBYTE(v2) = 104;
        }
        else if ((_DWORD)this == 16777235 && v2 == 546)
        {
          LOBYTE(v2) = 105;
        }
        else if ((_DWORD)this == 16777235 && v2 == 578)
        {
          LOBYTE(v2) = 106;
        }
        else if ((_DWORD)this == 16777235 && v2 == 354)
        {
          LOBYTE(v2) = 107;
        }
        else if ((_DWORD)this == 16777235 && v2 == 386)
        {
          LOBYTE(v2) = 108;
        }
        else if ((_DWORD)this == 16777235 && v2 == 418)
        {
          LOBYTE(v2) = 109;
        }
        else if ((_DWORD)this == 16777235 && v2 == 482)
        {
          LOBYTE(v2) = 110;
        }
        else if ((_DWORD)this == 16777235 && v2 == 67)
        {
          LOBYTE(v2) = 111;
        }
        else if ((_DWORD)this == 16777235 && v2 == 83)
        {
          LOBYTE(v2) = 112;
        }
        else if ((_DWORD)this == 16777235 && v2 == 99)
        {
          LOBYTE(v2) = 113;
        }
        else if ((_DWORD)this == 16777235 && v2 == 115)
        {
          LOBYTE(v2) = 114;
        }
        else if ((_DWORD)this == 16777235 && v2 == 227)
        {
          LOBYTE(v2) = 115;
        }
        else if ((_DWORD)this == 16777235 && v2 == 243)
        {
          LOBYTE(v2) = 116;
        }
        else if (v2 == 259 && (_DWORD)this == 16777235)
        {
          LOBYTE(v2) = 117;
        }
        else
        {
          LOBYTE(v2) = 118;
        }
      }
    }
  }
  else
  {
    LOBYTE(v2) = 12;
  }
  return v2;
}

uint64_t llvm::MachO::getImplementationFromCpuType(llvm::MachO *this, int a2)
{
  uint64_t v2;

  v2 = a2 & 0xFFFFFF | ((_QWORD)this << 32);
  if (v2 > 0x1000013000000E2)
  {
    if (v2 <= 0x1000013000001A1)
    {
      if (v2 > 0x100001300000141)
      {
        if (v2 <= 0x100001300000171)
        {
          switch(v2)
          {
            case 0x100001300000142:
              return 29;
            case 0x100001300000143:
              return 56;
            case 0x100001300000162:
              return 36;
          }
        }
        else if (v2 > 0x100001300000191)
        {
          if (v2 == 0x100001300000192)
            return 39;
          if (v2 == 0x100001300000193)
            return 55;
        }
        else
        {
          if (v2 == 0x100001300000172)
            return 37;
          if (v2 == 0x100001300000182)
            return 38;
        }
      }
      else if (v2 <= 0x100001300000111)
      {
        switch(v2)
        {
          case 0x1000013000000E3:
            return 51;
          case 0x1000013000000F3:
            return 52;
          case 0x100001300000103:
            return 54;
        }
      }
      else if (v2 > 0x100001300000121)
      {
        if (v2 == 0x100001300000122)
          return 27;
        if (v2 == 0x100001300000132)
          return 28;
      }
      else
      {
        if (v2 == 0x100001300000112)
          return 26;
        if (v2 == 0x100001300000113)
          return 47;
      }
    }
    else if (v2 <= 0x100001300000211)
    {
      if (v2 <= 0x1000013000001B2)
      {
        switch(v2)
        {
          case 0x1000013000001A2:
            return 40;
          case 0x1000013000001A3:
            return 50;
          case 0x1000013000001B2:
            return 41;
        }
      }
      else if (v2 > 0x1000013000001F1)
      {
        if (v2 == 0x1000013000001F2)
          return 43;
        if (v2 == 0x100001300000202)
          return 30;
      }
      else
      {
        if (v2 == 0x1000013000001B3)
          return 53;
        if (v2 == 0x1000013000001E2)
          return 42;
      }
    }
    else if (v2 > 0x100001300000251)
    {
      if (v2 > 0x100001300000641)
      {
        if (v2 == 0x100001300000642)
          return 23;
        if (v2 == 0x200000C00000001)
          return 7;
      }
      else
      {
        if (v2 == 0x100001300000252)
          return 35;
        if (v2 == 0x100001300000262)
          return 44;
      }
    }
    else if (v2 > 0x100001300000231)
    {
      if (v2 == 0x100001300000232)
        return 33;
      if (v2 == 0x100001300000242)
        return 34;
    }
    else
    {
      if (v2 == 0x100001300000212)
        return 31;
      if (v2 == 0x100001300000222)
        return 32;
    }
    return 57;
  }
  if (v2 <= 0x100001300000041)
  {
    if (v2 > 0x10000130000000FLL)
    {
      if (v2 <= 0x100001300000020)
      {
        switch(v2)
        {
          case 0x100001300000010:
            return 8;
          case 0x100001300000011:
            return 10;
          case 0x100001300000020:
            return 9;
        }
      }
      else if (v2 > 0x100001300000030)
      {
        if (v2 == 0x100001300000031)
          return 12;
        if (v2 == 0x100001300000041)
          return 13;
      }
      else
      {
        if (v2 == 0x100001300000021)
          return 11;
        if (v2 == 0x100001300000022)
          return 16;
      }
    }
    else if (v2 <= 0x100000700000002)
    {
      switch(v2)
      {
        case 0x700000003:
          return 0;
        case 0x700000004:
          return 1;
        case 0x700000005:
          return 2;
      }
    }
    else if (v2 > 0x100000BFFFFFFFFLL)
    {
      if (v2 == 0x100000C00000000)
        return 5;
      if (v2 == 0x100000C00000002)
        return 6;
    }
    else
    {
      if (v2 == 0x100000700000003)
        return 3;
      if (v2 == 0x100000700000008)
        return 4;
    }
    return 57;
  }
  if (v2 > 0x100001300000062)
  {
    if (v2 <= 0x100001300000081)
    {
      switch(v2)
      {
        case 0x100001300000063:
          return 48;
        case 0x100001300000072:
          return 18;
        case 0x100001300000073:
          return 49;
      }
    }
    else if (v2 > 0x1000013000000C1)
    {
      if (v2 == 0x1000013000000C2)
        return 24;
      if (v2 == 0x1000013000000D2)
        return 25;
    }
    else
    {
      if (v2 == 0x100001300000082)
        return 21;
      if (v2 == 0x100001300000092)
        return 22;
    }
    return 57;
  }
  if (v2 <= 0x100001300000051)
  {
    switch(v2)
    {
      case 0x100001300000042:
        return 19;
      case 0x100001300000043:
        return 45;
      case 0x100001300000051:
        return 14;
    }
    return 57;
  }
  if (v2 <= 0x100001300000060)
  {
    if (v2 == 0x100001300000052)
      return 20;
    if (v2 == 0x100001300000053)
      return 46;
    return 57;
  }
  if (v2 == 0x100001300000061)
    return 15;
  else
    return 17;
}

uint64_t llvm::MachO::getArchitectureFromName(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;

  switch(a2)
  {
    case 4:
      switch(*(_DWORD *)a1)
      {
        case 0x36383369:
          v2 = 0;
          break;
        case 0x36383469:
          v2 = 94;
          break;
        case 0x36383569:
          v2 = 95;
          break;
        default:
          goto LABEL_522;
      }
      break;
    case 5:
      if (*(_DWORD *)a1 == 1986884193 && *(_BYTE *)(a1 + 4) == 54)
      {
        v2 = 4;
      }
      else if (*(_DWORD *)a1 == 1986884193 && *(_BYTE *)(a1 + 4) == 53)
      {
        v2 = 5;
      }
      else if (*(_DWORD *)a1 == 1986884193 && *(_BYTE *)(a1 + 4) == 55)
      {
        v2 = 6;
      }
      else
      {
        if (*(_DWORD *)a1 != 913142369 || *(_BYTE *)(a1 + 4) != 52)
          goto LABEL_522;
        v2 = 12;
      }
      break;
    case 6:
      if (*(_DWORD *)a1 == 1597388920 && *(_WORD *)(a1 + 4) == 13366)
      {
        v2 = 1;
      }
      else if (*(_DWORD *)a1 == 1986884193 && *(_WORD *)(a1 + 4) == 29748)
      {
        v2 = 3;
      }
      else if (*(_DWORD *)a1 == 1986884193 && *(_WORD *)(a1 + 4) == 29495)
      {
        v2 = 7;
      }
      else if (*(_DWORD *)a1 == 1986884193 && *(_WORD *)(a1 + 4) == 27447)
      {
        v2 = 8;
      }
      else if (*(_DWORD *)a1 == 1986884193 && *(_WORD *)(a1 + 4) == 27958)
      {
        v2 = 9;
      }
      else if (*(_DWORD *)a1 == 1986884193 && *(_WORD *)(a1 + 4) == 27959)
      {
        v2 = 10;
      }
      else if (*(_DWORD *)a1 == 913142369 && *(_WORD *)(a1 + 4) == 25908)
      {
        v2 = 13;
      }
      else if (*(_DWORD *)a1 == 1597143143 && *(_WORD *)(a1 + 4) == 12385)
      {
        v2 = 96;
      }
      else
      {
        if (*(_DWORD *)a1 != 1600599143 || *(_WORD *)(a1 + 4) != 12385)
          goto LABEL_522;
        v2 = 97;
      }
      break;
    case 7:
      if (*(_DWORD *)a1 == 1597388920 && *(_DWORD *)(a1 + 3) == 1748252255)
      {
        v2 = 2;
      }
      else if (*(_DWORD *)a1 == 1986884193 && *(_DWORD *)(a1 + 3) == 1835349878)
      {
        v2 = 11;
      }
      else if (*(_DWORD *)a1 == 913142369 && *(_DWORD *)(a1 + 3) == 947270710)
      {
        v2 = 15;
      }
      else if (*(_DWORD *)a1 == 1882272103 && *(_DWORD *)(a1 + 3) == 811687792)
      {
        v2 = 98;
      }
      else if (*(_DWORD *)a1 == 1831940455 && *(_DWORD *)(a1 + 3) == 811687789)
      {
        v2 = 99;
      }
      else if (*(_DWORD *)a1 == 1731277159 && *(_DWORD *)(a1 + 3) == 811687783)
      {
        v2 = 100;
      }
      else if (*(_DWORD *)a1 == 1882337639 && *(_DWORD *)(a1 + 3) == 811687792)
      {
        v2 = 101;
      }
      else if (*(_DWORD *)a1 == 1882403175 && *(_DWORD *)(a1 + 3) == 811687792)
      {
        v2 = 102;
      }
      else if (*(_DWORD *)a1 == 1731408231 && *(_DWORD *)(a1 + 3) == 811687783)
      {
        v2 = 103;
      }
      else if (*(_DWORD *)a1 == 1932734823 && *(_DWORD *)(a1 + 3) == 811687795)
      {
        v2 = 104;
      }
      else if (*(_DWORD *)a1 == 1664299367 && *(_DWORD *)(a1 + 3) == 811687779)
      {
        v2 = 105;
      }
      else if (*(_DWORD *)a1 == 1681076583 && *(_DWORD *)(a1 + 3) == 811687780)
      {
        v2 = 106;
      }
      else if (*(_DWORD *)a1 == 1882468711 && *(_DWORD *)(a1 + 3) == 811687792)
      {
        v2 = 107;
      }
      else if (*(_DWORD *)a1 == 1731473767 && *(_DWORD *)(a1 + 3) == 811687783)
      {
        v2 = 108;
      }
      else if (*(_DWORD *)a1 == 1932800359 && *(_DWORD *)(a1 + 3) == 811687795)
      {
        v2 = 109;
      }
      else if (*(_DWORD *)a1 == 1681142119 && *(_DWORD *)(a1 + 3) == 811687780)
      {
        v2 = 110;
      }
      else if (*(_DWORD *)a1 == 1731539303 && *(_DWORD *)(a1 + 3) == 811687783)
      {
        v2 = 111;
      }
      else if (*(_DWORD *)a1 == 1731539303 && *(_DWORD *)(a1 + 3) == 811753319)
      {
        v2 = 112;
      }
      else if (*(_DWORD *)a1 == 1932865895 && *(_DWORD *)(a1 + 3) == 811687795)
      {
        v2 = 113;
      }
      else if (*(_DWORD *)a1 == 1932865895 && *(_DWORD *)(a1 + 3) == 811753331)
      {
        v2 = 114;
      }
      else if (*(_DWORD *)a1 == 1882599783 && *(_DWORD *)(a1 + 3) == 811687792)
      {
        v2 = 115;
      }
      else if (*(_DWORD *)a1 == 1882599783 && *(_DWORD *)(a1 + 3) == 811753328)
      {
        v2 = 116;
      }
      else if (*(_DWORD *)a1 ^ 0x67363167 | *(_DWORD *)(a1 + 3) ^ 0x30615F67)
      {
        v2 = 118;
      }
      else
      {
        v2 = 117;
      }
      break;
    case 8:
      if (*(_QWORD *)a1 != 0x32335F34366D7261)
        goto LABEL_522;
      v2 = 14;
      break;
    case 9:
      if (*(_QWORD *)a1 == 0x31765F3233726961 && *(_BYTE *)(a1 + 8) == 54)
      {
        v2 = 72;
      }
      else if (*(_QWORD *)a1 == 0x31765F3233726961 && *(_BYTE *)(a1 + 8) == 56)
      {
        v2 = 73;
      }
      else if (*(_QWORD *)a1 == 0x32765F3233726961 && *(_BYTE *)(a1 + 8) == 48)
      {
        v2 = 75;
      }
      else if (*(_QWORD *)a1 == 0x32765F3233726961 && *(_BYTE *)(a1 + 8) == 49)
      {
        v2 = 76;
      }
      else if (*(_QWORD *)a1 == 0x32765F3233726961 && *(_BYTE *)(a1 + 8) == 50)
      {
        v2 = 77;
      }
      else if (*(_QWORD *)a1 == 0x32765F3233726961 && *(_BYTE *)(a1 + 8) == 51)
      {
        v2 = 78;
      }
      else if (*(_QWORD *)a1 == 0x32765F3233726961 && *(_BYTE *)(a1 + 8) == 52)
      {
        v2 = 79;
      }
      else if (*(_QWORD *)a1 == 0x32765F3233726961 && *(_BYTE *)(a1 + 8) == 53)
      {
        v2 = 80;
      }
      else if (*(_QWORD *)a1 == 0x32765F3233726961 && *(_BYTE *)(a1 + 8) == 54)
      {
        v2 = 81;
      }
      else if (*(_QWORD *)a1 == 0x32765F3233726961 && *(_BYTE *)(a1 + 8) == 55)
      {
        v2 = 82;
      }
      else if (*(_QWORD *)a1 == 0x31765F3436726961 && *(_BYTE *)(a1 + 8) == 54)
      {
        v2 = 83;
      }
      else if (*(_QWORD *)a1 == 0x31765F3436726961 && *(_BYTE *)(a1 + 8) == 56)
      {
        v2 = 84;
      }
      else if (*(_QWORD *)a1 == 0x32765F3436726961 && *(_BYTE *)(a1 + 8) == 48)
      {
        v2 = 86;
      }
      else if (*(_QWORD *)a1 == 0x32765F3436726961 && *(_BYTE *)(a1 + 8) == 49)
      {
        v2 = 87;
      }
      else if (*(_QWORD *)a1 == 0x32765F3436726961 && *(_BYTE *)(a1 + 8) == 50)
      {
        v2 = 88;
      }
      else if (*(_QWORD *)a1 == 0x32765F3436726961 && *(_BYTE *)(a1 + 8) == 51)
      {
        v2 = 89;
      }
      else if (*(_QWORD *)a1 == 0x32765F3436726961 && *(_BYTE *)(a1 + 8) == 52)
      {
        v2 = 90;
      }
      else if (*(_QWORD *)a1 == 0x32765F3436726961 && *(_BYTE *)(a1 + 8) == 53)
      {
        v2 = 91;
      }
      else if (*(_QWORD *)a1 == 0x32765F3436726961 && *(_BYTE *)(a1 + 8) == 54)
      {
        v2 = 92;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x32765F3436726961 || *(_BYTE *)(a1 + 8) != 55)
          goto LABEL_522;
        v2 = 93;
      }
      break;
    case 10:
      if (*(_QWORD *)a1 == 0x31765F3233726961 && *(_WORD *)(a1 + 8) == 12593)
      {
        v2 = 74;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x31765F3436726961 || *(_WORD *)(a1 + 8) != 12593)
          goto LABEL_522;
        v2 = 85;
      }
      break;
    case 12:
      if (*(_QWORD *)a1 == 0x757067656C707061 && *(_DWORD *)(a1 + 8) == 846751583)
      {
        v2 = 16;
      }
      else if (*(_QWORD *)a1 == 0x757067656C707061 && *(_DWORD *)(a1 + 8) == 1882482527)
      {
        v2 = 17;
      }
      else if (*(_QWORD *)a1 == 0x757067656C707061 && *(_DWORD *)(a1 + 8) == 1731487583)
      {
        v2 = 18;
      }
      else if (*(_QWORD *)a1 == 0x757067656C707061 && *(_DWORD *)(a1 + 8) == 1882548063)
      {
        v2 = 19;
      }
      else if (*(_QWORD *)a1 == 0x757067656C707061 && *(_DWORD *)(a1 + 8) == 1882810207)
      {
        v2 = 20;
      }
      else if (*(_QWORD *)a1 == 0x757067656C707061 && *(_DWORD *)(a1 + 8) == 1731815263)
      {
        v2 = 21;
      }
      else if (*(_QWORD *)a1 == 0x706761696469766ELL && *(_DWORD *)(a1 + 8) == 1801936757)
      {
        v2 = 68;
      }
      else if (*(_QWORD *)a1 == 0x706761696469766ELL && *(_DWORD *)(a1 + 8) == 1835491189)
      {
        v2 = 69;
      }
      else if (*(_QWORD *)a1 == 0x706761696469766ELL && *(_DWORD *)(a1 + 8) == 1885822837)
      {
        v2 = 70;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x706761696469766ELL || *(_DWORD *)(a1 + 8) != 1986486133)
          goto LABEL_522;
        v2 = 71;
      }
      break;
    case 13:
      if (*(_QWORD *)a1 == 0x757067656C707061 && *(_QWORD *)(a1 + 5) == 0x703031675F757067)
      {
        v2 = 22;
      }
      else if (*(_QWORD *)a1 == 0x757067656C707061 && *(_QWORD *)(a1 + 5) == 0x703131675F757067)
      {
        v2 = 23;
      }
      else if (*(_QWORD *)a1 == 0x757067656C707061 && *(_QWORD *)(a1 + 5) == 0x6D3131675F757067)
      {
        v2 = 24;
      }
      else if (*(_QWORD *)a1 == 0x757067656C707061 && *(_QWORD *)(a1 + 5) == 0x673131675F757067)
      {
        v2 = 25;
      }
      else if (*(_QWORD *)a1 == 0x757067656C707061 && *(_QWORD *)(a1 + 5) == 0x703231675F757067)
      {
        v2 = 27;
      }
      else if (*(_QWORD *)a1 == 0x757067656C707061 && *(_QWORD *)(a1 + 5) == 0x703331675F757067)
      {
        v2 = 28;
      }
      else if (*(_QWORD *)a1 == 0x757067656C707061 && *(_QWORD *)(a1 + 5) == 0x673331675F757067)
      {
        v2 = 29;
      }
      else if (*(_QWORD *)a1 == 0x757067656C707061 && *(_QWORD *)(a1 + 5) == 0x733331675F757067)
      {
        v2 = 30;
      }
      else if (*(_QWORD *)a1 == 0x757067656C707061 && *(_QWORD *)(a1 + 5) == 0x633331675F757067)
      {
        v2 = 31;
      }
      else if (*(_QWORD *)a1 == 0x757067656C707061 && *(_QWORD *)(a1 + 5) == 0x643331675F757067)
      {
        v2 = 32;
      }
      else if (*(_QWORD *)a1 == 0x757067656C707061 && *(_QWORD *)(a1 + 5) == 0x703431675F757067)
      {
        v2 = 33;
      }
      else if (*(_QWORD *)a1 == 0x757067656C707061 && *(_QWORD *)(a1 + 5) == 0x673431675F757067)
      {
        v2 = 34;
      }
      else if (*(_QWORD *)a1 == 0x757067656C707061 && *(_QWORD *)(a1 + 5) == 0x733431675F757067)
      {
        v2 = 35;
      }
      else if (*(_QWORD *)a1 == 0x757067656C707061 && *(_QWORD *)(a1 + 5) == 0x643431675F757067)
      {
        v2 = 36;
      }
      else if (*(_QWORD *)a1 == 0x757067656C707061 && *(_QWORD *)(a1 + 5) == 0x703531675F757067)
      {
        v2 = 37;
      }
      else if (*(_QWORD *)a1 == 0x757067656C707061 && *(_QWORD *)(a1 + 5) == 0x673531675F757067)
      {
        v2 = 38;
      }
      else if (*(_QWORD *)a1 == 0x757067656C707061 && *(_QWORD *)(a1 + 5) == 0x733531675F757067)
      {
        v2 = 39;
      }
      else if (*(_QWORD *)a1 == 0x757067656C707061 && *(_QWORD *)(a1 + 5) == 0x703631675F757067)
      {
        v2 = 40;
      }
      else if (*(_QWORD *)a1 == 0x757067656C707061 && *(_QWORD *)(a1 + 5) == 0x673631675F757067)
      {
        v2 = 41;
      }
      else if (*(_QWORD *)a1 == 0x757067656C707061 && *(_QWORD *)(a1 + 5) == 0x703731675F757067)
      {
        v2 = 42;
      }
      else if (*(_QWORD *)a1 == 0x675F757067646D61 && *(_QWORD *)(a1 + 5) == 0x3030367866675F75)
      {
        v2 = 43;
      }
      else if (*(_QWORD *)a1 == 0x675F757067646D61 && *(_QWORD *)(a1 + 5) == 0x3130377866675F75)
      {
        v2 = 45;
      }
      else if (*(_QWORD *)a1 == 0x675F757067646D61 && *(_QWORD *)(a1 + 5) == 0x3430377866675F75)
      {
        v2 = 46;
      }
      else if (*(_QWORD *)a1 == 0x675F757067646D61 && *(_QWORD *)(a1 + 5) == 0x3330387866675F75)
      {
        v2 = 47;
      }
      else if (*(_QWORD *)a1 == 0x675F757067646D61 && *(_QWORD *)(a1 + 5) == 0x3230387866675F75)
      {
        v2 = 48;
      }
      else if (*(_QWORD *)a1 == 0x675F757067646D61 && *(_QWORD *)(a1 + 5) == 0x3030397866675F75)
      {
        v2 = 49;
      }
      else if (*(_QWORD *)a1 == 0x675F757067646D61 && *(_QWORD *)(a1 + 5) == 0x3430397866675F75)
      {
        v2 = 50;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x675F757067646D61 || *(_QWORD *)(a1 + 5) != 0x3630397866675F75)
          goto LABEL_522;
        v2 = 51;
      }
      break;
    case 14:
      if (*(_QWORD *)a1 == 0x675F757067646D61 && *(_QWORD *)(a1 + 6) == 0x303130317866675FLL)
      {
        v2 = 53;
      }
      else if (*(_QWORD *)a1 == 0x675F757067646D61 && *(_QWORD *)(a1 + 6) == 0x313130317866675FLL)
      {
        v2 = 54;
      }
      else if (*(_QWORD *)a1 == 0x675F757067646D61 && *(_QWORD *)(a1 + 6) == 0x323130317866675FLL)
      {
        v2 = 55;
      }
      else if (*(_QWORD *)a1 == 0x675F757067646D61 && *(_QWORD *)(a1 + 6) == 0x303330317866675FLL)
      {
        v2 = 56;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x675F757067646D61 || *(_QWORD *)(a1 + 6) != 0x323330317866675FLL)
          goto LABEL_522;
        v2 = 57;
      }
      break;
    case 17:
      if (*(_QWORD *)a1 != 0x675F757067646D61
        || *(_QWORD *)(a1 + 8) != 0x776E5F3030367866
        || *(_BYTE *)(a1 + 16) != 104)
      {
        goto LABEL_522;
      }
      v2 = 44;
      break;
    case 18:
      if (*(_QWORD *)a1 == 0x7570676C65746E69
        && *(_QWORD *)(a1 + 8) == 0x3274675F6C6B735FLL
        && *(_WORD *)(a1 + 16) == 13938)
      {
        v2 = 58;
      }
      else if (*(_QWORD *)a1 == 0x7570676C65746E69
             && *(_QWORD *)(a1 + 8) == 0x3274675F6C6B735FLL
             && *(_WORD *)(a1 + 16) == 14194)
      {
        v2 = 59;
      }
      else if (*(_QWORD *)a1 == 0x7570676C65746E69
             && *(_QWORD *)(a1 + 8) == 0x3274675F6C626B5FLL
             && *(_WORD *)(a1 + 16) == 12402)
      {
        v2 = 61;
      }
      else if (*(_QWORD *)a1 == 0x7570676C65746E69
             && *(_QWORD *)(a1 + 8) == 0x3274675F6C626B5FLL
             && *(_WORD *)(a1 + 16) == 12914)
      {
        v2 = 62;
      }
      else if (*(_QWORD *)a1 == 0x7570676C65746E69
             && *(_QWORD *)(a1 + 8) == 0x3274675F6C626B5FLL
             && *(_WORD *)(a1 + 16) == 13426)
      {
        v2 = 63;
      }
      else if (*(_QWORD *)a1 == 0x7570676C65746E69
             && *(_QWORD *)(a1 + 8) == 0x3374675F6C626B5FLL
             && *(_WORD *)(a1 + 16) == 12658)
      {
        v2 = 64;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x7570676C65746E69
          || *(_QWORD *)(a1 + 8) != 0x3374675F6C626B5FLL
          || *(_WORD *)(a1 + 16) != 13938)
        {
          goto LABEL_522;
        }
        v2 = 65;
      }
      break;
    case 19:
      if (*(_QWORD *)a1 == 0x757067656C707061
        && *(_QWORD *)(a1 + 8) == 0x66385F673131675FLL
        && *(_QWORD *)(a1 + 11) == 0x70747366385F6731)
      {
        v2 = 26;
      }
      else if (*(_QWORD *)a1 == 0x675F757067646D61
             && *(_QWORD *)(a1 + 8) == 0x6E5F303130317866
             && *(_QWORD *)(a1 + 11) == 0x6367736E5F303130)
      {
        v2 = 52;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x7570676C65746E69
          || *(_QWORD *)(a1 + 8) != 0x3374675F6C6B735FLL
          || *(_QWORD *)(a1 + 11) != 0x3031723374675F6CLL)
        {
          goto LABEL_522;
        }
        v2 = 60;
      }
      break;
    case 20:
      if (*(_QWORD *)a1 == 0x7570676C65746E69
        && *(_QWORD *)(a1 + 8) == 0x3678315F6C63695FLL
        && *(_DWORD *)(a1 + 16) == 930232440)
      {
        v2 = 66;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x7570676C65746E69
          || *(_QWORD *)(a1 + 8) != 0x3878315F6C63695FLL
          || *(_DWORD *)(a1 + 16) != 930232440)
        {
          goto LABEL_522;
        }
        v2 = 67;
      }
      break;
    default:
LABEL_522:
      v2 = 118;
      break;
  }
  return v2;
}

const char *llvm::MachO::getArchitectureName(unsigned int a1)
{
  if (a1 > 0x76)
    return "unknown";
  else
    return off_1E81A7FF8[(char)a1];
}

uint64_t llvm::MachO::getArchitectureFromImplementation(unsigned int a1)
{
  if (a1 > 0x39)
    return 118;
  else
    return byte_1C8673208[a1];
}

uint64_t llvm::MachO::getImplementationFromName(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  switch(a2)
  {
    case 4:
      switch(*(_DWORD *)a1)
      {
        case 0x36383369:
          v2 = 0x100000000;
          break;
        case 0x36383469:
          v2 = 0x100000001;
          break;
        case 0x36383569:
          v2 = 0x100000002;
          break;
        default:
          goto LABEL_5;
      }
      goto LABEL_213;
    case 5:
      v3 = 0x100000005;
      v4 = (*(_DWORD *)a1 ^ 0x766D7261 | *(unsigned __int8 *)(a1 + 4) ^ 0x38) == 0;
      goto LABEL_210;
    case 6:
      if (*(_DWORD *)a1 == 758528120 && *(_WORD *)(a1 + 4) == 13366)
      {
        v2 = 0x100000003;
      }
      else if (*(_DWORD *)a1 == 758282343 && *(_WORD *)(a1 + 4) == 12385)
      {
        v2 = 0x100000008;
      }
      else if (*(_DWORD *)a1 == 758282343 && *(_WORD *)(a1 + 4) == 12386)
      {
        v2 = 0x100000009;
      }
      else if (*(_DWORD *)a1 == 1601188967 && *(_WORD *)(a1 + 4) == 12642)
      {
        v2 = 0x10000000ALL;
      }
      else if (*(_DWORD *)a1 == 761738343 && *(_WORD *)(a1 + 4) == 12385)
      {
        v2 = 0x10000000BLL;
      }
      else if (*(_DWORD *)a1 == 761738343 && *(_WORD *)(a1 + 4) == 12641)
      {
        v2 = 0x10000000CLL;
      }
      else if (*(_DWORD *)a1 == 762328423 && *(_WORD *)(a1 + 4) == 12387)
      {
        v2 = 0x10000000DLL;
      }
      else if (*(_DWORD *)a1 == 1601190247 && *(_WORD *)(a1 + 4) == 12385)
      {
        v2 = 0x10000000ELL;
      }
      else if (*(_DWORD *)a1 == 761739623 && *(_WORD *)(a1 + 4) == 12385)
      {
        v2 = 0x10000000FLL;
      }
      else
      {
LABEL_5:
        v2 = 0;
      }
LABEL_213:
      if ((v2 & 0x300000000) != 0)
        return v2;
      else
        return 57;
    case 7:
      if (*(_DWORD *)a1 == 2004050280 && *(_DWORD *)(a1 + 3) == 1819043191)
      {
        v2 = 0x100000004;
      }
      else if (*(_DWORD *)a1 == 1882206567 && *(_DWORD *)(a1 + 3) == 811740528)
      {
        v2 = 0x100000010;
      }
      else if (*(_DWORD *)a1 == 1882272103 && *(_DWORD *)(a1 + 3) == 811674992)
      {
        v2 = 0x100000011;
      }
      else if (*(_DWORD *)a1 == 1882272103 && *(_DWORD *)(a1 + 3) == 811740528)
      {
        v2 = 0x100000012;
      }
      else if (*(_DWORD *)a1 == 1831940455 && *(_DWORD *)(a1 + 3) == 811674989)
      {
        v2 = 0x100000013;
      }
      else if (*(_DWORD *)a1 == 1831940455 && *(_DWORD *)(a1 + 3) == 811740525)
      {
        v2 = 0x100000014;
      }
      else if (*(_DWORD *)a1 == 1731277159 && *(_DWORD *)(a1 + 3) == 811674983)
      {
        v2 = 0x100000015;
      }
      else if (*(_DWORD *)a1 == 1731277159 && *(_DWORD *)(a1 + 3) == 811740519)
      {
        v2 = 0x100000016;
      }
      else if (*(_DWORD *)a1 == 1882337639 && *(_DWORD *)(a1 + 3) == 811674992)
      {
        v2 = 0x100000018;
      }
      else if (*(_DWORD *)a1 == 1882337639 && *(_DWORD *)(a1 + 3) == 811740528)
      {
        v2 = 0x100000019;
      }
      else if (*(_DWORD *)a1 == 1882403175 && *(_DWORD *)(a1 + 3) == 811674992)
      {
        v2 = 0x10000001ALL;
      }
      else if (*(_DWORD *)a1 == 1882403175 && *(_DWORD *)(a1 + 3) == 811740528)
      {
        v2 = 0x10000001BLL;
      }
      else if (*(_DWORD *)a1 == 1731408231 && *(_DWORD *)(a1 + 3) == 811674983)
      {
        v2 = 0x10000001CLL;
      }
      else if (*(_DWORD *)a1 == 1731408231 && *(_DWORD *)(a1 + 3) == 811740519)
      {
        v2 = 0x10000001DLL;
      }
      else if (*(_DWORD *)a1 == 1932734823 && *(_DWORD *)(a1 + 3) == 811674995)
      {
        v2 = 0x10000001ELL;
      }
      else if (*(_DWORD *)a1 == 1932734823 && *(_DWORD *)(a1 + 3) == 811740531)
      {
        v2 = 0x10000001FLL;
      }
      else if (*(_DWORD *)a1 == 1664299367 && *(_DWORD *)(a1 + 3) == 811674979)
      {
        v2 = 0x100000020;
      }
      else if (*(_DWORD *)a1 == 1664299367 && *(_DWORD *)(a1 + 3) == 811740515)
      {
        v2 = 0x100000021;
      }
      else if (*(_DWORD *)a1 == 1681076583 && *(_DWORD *)(a1 + 3) == 811674980)
      {
        v2 = 0x100000022;
      }
      else if (*(_DWORD *)a1 == 1681076583 && *(_DWORD *)(a1 + 3) == 811740516)
      {
        v2 = 0x100000023;
      }
      else if (*(_DWORD *)a1 == 1882468711 && *(_DWORD *)(a1 + 3) == 811674992)
      {
        v2 = 0x100000024;
      }
      else if (*(_DWORD *)a1 == 1882468711 && *(_DWORD *)(a1 + 3) == 811740528)
      {
        v2 = 0x100000025;
      }
      else if (*(_DWORD *)a1 == 1731473767 && *(_DWORD *)(a1 + 3) == 811674983)
      {
        v2 = 0x100000026;
      }
      else if (*(_DWORD *)a1 == 1731473767 && *(_DWORD *)(a1 + 3) == 811740519)
      {
        v2 = 0x100000027;
      }
      else if (*(_DWORD *)a1 == 1932800359 && *(_DWORD *)(a1 + 3) == 811674995)
      {
        v2 = 0x100000028;
      }
      else if (*(_DWORD *)a1 == 1932800359 && *(_DWORD *)(a1 + 3) == 811740531)
      {
        v2 = 0x100000029;
      }
      else if (*(_DWORD *)a1 == 1681142119 && *(_DWORD *)(a1 + 3) == 811674980)
      {
        v2 = 0x10000002ALL;
      }
      else if (*(_DWORD *)a1 == 1681142119 && *(_DWORD *)(a1 + 3) == 811740516)
      {
        v2 = 0x10000002BLL;
      }
      else if (*(_DWORD *)a1 == 1882534247 && *(_DWORD *)(a1 + 3) == 811740528)
      {
        v2 = 0x10000002CLL;
      }
      else if (*(_DWORD *)a1 == 1731539303 && *(_DWORD *)(a1 + 3) == 811674983)
      {
        v2 = 0x10000002DLL;
      }
      else if (*(_DWORD *)a1 == 1731539303 && *(_DWORD *)(a1 + 3) == 811740519)
      {
        v2 = 0x10000002ELL;
      }
      else if (*(_DWORD *)a1 == 1731539303 && *(_DWORD *)(a1 + 3) == 811806055)
      {
        v2 = 0x10000002FLL;
      }
      else if (*(_DWORD *)a1 == 1932865895 && *(_DWORD *)(a1 + 3) == 811674995)
      {
        v2 = 0x100000030;
      }
      else if (*(_DWORD *)a1 == 1932865895 && *(_DWORD *)(a1 + 3) == 811740531)
      {
        v2 = 0x100000031;
      }
      else if (*(_DWORD *)a1 == 1932865895 && *(_DWORD *)(a1 + 3) == 828517747)
      {
        v2 = 0x100000032;
      }
      else if (*(_DWORD *)a1 == 1882599783 && *(_DWORD *)(a1 + 3) == 811674992)
      {
        v2 = 0x100000033;
      }
      else if (*(_DWORD *)a1 == 1882599783 && *(_DWORD *)(a1 + 3) == 811740528)
      {
        v2 = 0x100000034;
      }
      else if (*(_DWORD *)a1 == 1882599783 && *(_DWORD *)(a1 + 3) == 828517744)
      {
        v2 = 0x100000035;
      }
      else if (*(_DWORD *)a1 == 1731604839 && *(_DWORD *)(a1 + 3) == 811674983)
      {
        v2 = 0x100000036;
      }
      else if (*(_DWORD *)a1 == 1731604839 && *(_DWORD *)(a1 + 3) == 811740519)
      {
        v2 = 0x100000037;
      }
      else
      {
        v2 = 0x100000038;
        if (*(_DWORD *)a1 ^ 0x70373167 | *(_DWORD *)(a1 + 3) ^ 0x30612D70)
          v2 = 0;
      }
      goto LABEL_213;
    case 8:
      v3 = 0x100000007;
      v4 = *(_QWORD *)a1 == 0x34732D656C707061;
      goto LABEL_210;
    case 9:
      v3 = 0x100000006;
      v4 = (*(_QWORD *)a1 ^ 0x31612D656C707061 | *(unsigned __int8 *)(a1 + 8) ^ 0x32) == 0;
LABEL_210:
      if (v4)
        v2 = v3;
      else
        v2 = 0;
      goto LABEL_213;
    default:
      goto LABEL_5;
  }
}

const char *llvm::MachO::getImplementationName(unsigned int a1)
{
  if (a1 > 0x39)
    return "unknown";
  else
    return off_1E81A83B0[a1];
}

BOOL llvm::MachO::isValidImplementationForArchitecture(int a1, unsigned int a2)
{
  _BOOL8 result;
  unsigned int v5;
  BOOL v6;

  if (llvm::MachO::getArchitectureFromImplementation(a2) == a1)
    return 1;
  result = 0;
  switch(a1)
  {
    case 0:
      v5 = a2 - 1;
      goto LABEL_25;
    case 1:
      v6 = a2 == 4;
      goto LABEL_27;
    case 12:
      v6 = a2 == 6;
      goto LABEL_27;
    case 16:
      v6 = a2 == 8;
      goto LABEL_27;
    case 18:
      v6 = a2 == 11;
      goto LABEL_27;
    case 23:
      v6 = a2 == 17;
      goto LABEL_27;
    case 24:
      v6 = a2 == 19;
      goto LABEL_27;
    case 25:
      v6 = a2 == 21;
      goto LABEL_27;
    case 27:
      v6 = a2 == 24;
      goto LABEL_27;
    case 28:
      v6 = a2 == 26;
      goto LABEL_27;
    case 29:
      v6 = a2 == 28;
      goto LABEL_27;
    case 30:
      v6 = a2 == 30;
      goto LABEL_27;
    case 31:
      v6 = a2 == 32;
      goto LABEL_27;
    case 32:
      v6 = a2 == 34;
      goto LABEL_27;
    case 33:
      v6 = a2 == 36;
      goto LABEL_27;
    case 34:
      v6 = a2 == 38;
      goto LABEL_27;
    case 35:
      v6 = a2 == 40;
      goto LABEL_27;
    case 36:
      v6 = a2 == 42;
      goto LABEL_27;
    case 38:
      v5 = a2 - 45;
      goto LABEL_25;
    case 39:
      v6 = (a2 & 0xFFFFFFFE) == 48;
      goto LABEL_27;
    case 40:
      v5 = a2 - 51;
LABEL_25:
      result = v5 < 2;
      break;
    case 41:
      v6 = a2 == 54;
LABEL_27:
      result = v6;
      break;
    default:
      return result;
  }
  return result;
}

void llvm::MachO::getImplementationsForArch(int a1@<W0>, char **a2@<X8>)
{
  _BOOL4 isValidImplementationForArchitecture;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  int v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  int v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  int v55;
  unint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  int v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  int v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  int v85;
  unint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  int v95;
  unint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  int v105;
  unint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  int v115;
  unint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  int v125;
  unint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  char *v134;
  int v135;
  unint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  char *v144;
  int v145;
  unint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  char *v154;
  int v155;
  unint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  char *v163;
  char *v164;
  int v165;
  unint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  char *v173;
  char *v174;
  int v175;
  unint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  char *v183;
  char *v184;
  int v185;
  unint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  char *v193;
  char *v194;
  int v195;
  unint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  char *v203;
  char *v204;
  int v205;
  unint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  char *v213;
  char *v214;
  int v215;
  unint64_t v216;
  char *v217;
  char *v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t v222;
  char *v223;
  char *v224;
  int v225;
  unint64_t v226;
  char *v227;
  char *v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t v232;
  char *v233;
  char *v234;
  int v235;
  unint64_t v236;
  char *v237;
  char *v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  char *v243;
  char *v244;
  int v245;
  unint64_t v246;
  char *v247;
  char *v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  char *v253;
  char *v254;
  int v255;
  unint64_t v256;
  char *v257;
  char *v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  char *v263;
  char *v264;
  int v265;
  unint64_t v266;
  char *v267;
  char *v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  unint64_t v272;
  char *v273;
  char *v274;
  int v275;
  unint64_t v276;
  char *v277;
  char *v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  unint64_t v282;
  char *v283;
  char *v284;
  int v285;
  unint64_t v286;
  char *v287;
  char *v288;
  uint64_t v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t v292;
  char *v293;
  char *v294;
  int v295;
  unint64_t v296;
  char *v297;
  char *v298;
  uint64_t v299;
  unint64_t v300;
  uint64_t v301;
  unint64_t v302;
  char *v303;
  char *v304;
  int v305;
  unint64_t v306;
  char *v307;
  char *v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  unint64_t v312;
  char *v313;
  char *v314;
  int v315;
  unint64_t v316;
  char *v317;
  char *v318;
  uint64_t v319;
  unint64_t v320;
  uint64_t v321;
  unint64_t v322;
  char *v323;
  char *v324;
  int v325;
  unint64_t v326;
  char *v327;
  char *v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  unint64_t v332;
  char *v333;
  char *v334;
  int v335;
  unint64_t v336;
  char *v337;
  char *v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  unint64_t v342;
  char *v343;
  char *v344;
  int v345;
  unint64_t v346;
  char *v347;
  char *v348;
  uint64_t v349;
  unint64_t v350;
  uint64_t v351;
  unint64_t v352;
  char *v353;
  char *v354;
  int v355;
  unint64_t v356;
  char *v357;
  char *v358;
  uint64_t v359;
  unint64_t v360;
  uint64_t v361;
  unint64_t v362;
  char *v363;
  char *v364;
  int v365;
  unint64_t v366;
  char *v367;
  char *v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t v371;
  unint64_t v372;
  char *v373;
  char *v374;
  int v375;
  unint64_t v376;
  char *v377;
  char *v378;
  uint64_t v379;
  unint64_t v380;
  uint64_t v381;
  unint64_t v382;
  char *v383;
  char *v384;
  int v385;
  unint64_t v386;
  char *v387;
  char *v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  unint64_t v392;
  char *v393;
  char *v394;
  int v395;
  unint64_t v396;
  char *v397;
  char *v398;
  uint64_t v399;
  unint64_t v400;
  uint64_t v401;
  unint64_t v402;
  char *v403;
  char *v404;
  int v405;
  unint64_t v406;
  char *v407;
  char *v408;
  uint64_t v409;
  unint64_t v410;
  uint64_t v411;
  unint64_t v412;
  char *v413;
  char *v414;
  int v415;
  unint64_t v416;
  char *v417;
  char *v418;
  uint64_t v419;
  unint64_t v420;
  uint64_t v421;
  unint64_t v422;
  char *v423;
  char *v424;
  int v425;
  unint64_t v426;
  char *v427;
  char *v428;
  uint64_t v429;
  unint64_t v430;
  uint64_t v431;
  unint64_t v432;
  char *v433;
  char *v434;
  int v435;
  unint64_t v436;
  char *v437;
  char *v438;
  uint64_t v439;
  unint64_t v440;
  uint64_t v441;
  unint64_t v442;
  char *v443;
  char *v444;
  int v445;
  unint64_t v446;
  char *v447;
  char *v448;
  uint64_t v449;
  unint64_t v450;
  uint64_t v451;
  unint64_t v452;
  char *v453;
  char *v454;
  int v455;
  unint64_t v456;
  char *v457;
  char *v458;
  uint64_t v459;
  unint64_t v460;
  uint64_t v461;
  unint64_t v462;
  char *v463;
  char *v464;
  int v465;
  unint64_t v466;
  char *v467;
  char *v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  unint64_t v472;
  char *v473;
  char *v474;
  int v475;
  unint64_t v476;
  char *v477;
  char *v478;
  uint64_t v479;
  unint64_t v480;
  uint64_t v481;
  unint64_t v482;
  char *v483;
  char *v484;
  int v485;
  unint64_t v486;
  char *v487;
  char *v488;
  uint64_t v489;
  unint64_t v490;
  uint64_t v491;
  unint64_t v492;
  char *v493;
  char *v494;
  int v495;
  unint64_t v496;
  char *v497;
  char *v498;
  uint64_t v499;
  unint64_t v500;
  uint64_t v501;
  unint64_t v502;
  char *v503;
  char *v504;
  int v505;
  unint64_t v506;
  char *v507;
  char *v508;
  uint64_t v509;
  unint64_t v510;
  uint64_t v511;
  unint64_t v512;
  char *v513;
  char *v514;
  int v515;
  unint64_t v516;
  char *v517;
  char *v518;
  uint64_t v519;
  unint64_t v520;
  uint64_t v521;
  unint64_t v522;
  char *v523;
  char *v524;
  int v525;
  unint64_t v526;
  char *v527;
  char *v528;
  uint64_t v529;
  unint64_t v530;
  uint64_t v531;
  unint64_t v532;
  char *v533;
  char *v534;
  int v535;
  unint64_t v536;
  char *v537;
  char *v538;
  uint64_t v539;
  unint64_t v540;
  uint64_t v541;
  unint64_t v542;
  char *v543;
  char *v544;
  int v545;
  unint64_t v546;
  char *v547;
  char *v548;
  uint64_t v549;
  unint64_t v550;
  uint64_t v551;
  unint64_t v552;
  char *v553;
  char *v554;
  int v555;
  unint64_t v556;
  char *v557;
  char *v558;
  uint64_t v559;
  unint64_t v560;
  uint64_t v561;
  unint64_t v562;
  char *v563;
  char *v564;
  int v565;

  isValidImplementationForArchitecture = llvm::MachO::isValidImplementationForArchitecture(a1, 0);
  v5 = 0;
  v6 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (isValidImplementationForArchitecture)
  {
    v5 = (char *)operator new(4uLL);
    *(_DWORD *)v5 = 0;
    v6 = v5 + 4;
    a2[1] = v5 + 4;
    a2[2] = v5 + 4;
    *a2 = v5;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 1u))
  {
    v7 = v6 - v5;
    v8 = (v6 - v5) >> 2;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62)
      goto LABEL_1066;
    if (v7 >> 1 > v9)
      v9 = v7 >> 1;
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL)
      v10 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
    {
      if (v10 >> 62)
        goto LABEL_1067;
      v11 = (char *)operator new(4 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[4 * v8];
    v14 = &v11[4 * v10];
    *(_DWORD *)v13 = 1;
    v12 = v13 + 4;
    if (v6 != v5)
    {
      v15 = (v6 - v5 - 4) & 0xFFFFFFFFFFFFFFFCLL;
      v13 = &v11[v7 - v15 - 4];
      memcpy(v13, &v6[-v15 - 4], v15 + 4);
    }
    *a2 = v13;
    a2[1] = v12;
    a2[2] = v14;
    if (v5)
      operator delete(v5);
    a2[1] = v12;
  }
  else
  {
    v12 = v6;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 2u))
  {
    v16 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v16)
    {
      v18 = *a2;
      v19 = (v12 - *a2) >> 2;
      v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 62)
        goto LABEL_1066;
      v21 = v16 - (_QWORD)v18;
      if (v21 >> 1 > v20)
        v20 = v21 >> 1;
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
        v22 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v22 = v20;
      if (v22)
      {
        if (v22 >> 62)
          goto LABEL_1067;
        v23 = (char *)operator new(4 * v22);
      }
      else
      {
        v23 = 0;
      }
      v24 = &v23[4 * v19];
      *(_DWORD *)v24 = 2;
      v17 = v24 + 4;
      while (v12 != v18)
      {
        v25 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v24 - 1) = v25;
        v24 -= 4;
      }
      *a2 = v24;
      a2[1] = v17;
      a2[2] = &v23[4 * v22];
      if (v18)
        operator delete(v18);
    }
    else
    {
      *(_DWORD *)v12 = 2;
      v17 = v12 + 4;
    }
    a2[1] = v17;
    v12 = v17;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 3u))
  {
    v26 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v26)
    {
      v28 = *a2;
      v29 = (v12 - *a2) >> 2;
      v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 62)
        goto LABEL_1066;
      v31 = v26 - (_QWORD)v28;
      if (v31 >> 1 > v30)
        v30 = v31 >> 1;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
        v32 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v32 = v30;
      if (v32)
      {
        if (v32 >> 62)
          goto LABEL_1067;
        v33 = (char *)operator new(4 * v32);
      }
      else
      {
        v33 = 0;
      }
      v34 = &v33[4 * v29];
      *(_DWORD *)v34 = 3;
      v27 = v34 + 4;
      while (v12 != v28)
      {
        v35 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v34 - 1) = v35;
        v34 -= 4;
      }
      *a2 = v34;
      a2[1] = v27;
      a2[2] = &v33[4 * v32];
      if (v28)
        operator delete(v28);
    }
    else
    {
      *(_DWORD *)v12 = 3;
      v27 = v12 + 4;
    }
    a2[1] = v27;
    v12 = v27;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 4u))
  {
    v36 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v36)
    {
      v38 = *a2;
      v39 = (v12 - *a2) >> 2;
      v40 = v39 + 1;
      if ((unint64_t)(v39 + 1) >> 62)
        goto LABEL_1066;
      v41 = v36 - (_QWORD)v38;
      if (v41 >> 1 > v40)
        v40 = v41 >> 1;
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
        v42 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v42 = v40;
      if (v42)
      {
        if (v42 >> 62)
          goto LABEL_1067;
        v43 = (char *)operator new(4 * v42);
      }
      else
      {
        v43 = 0;
      }
      v44 = &v43[4 * v39];
      *(_DWORD *)v44 = 4;
      v37 = v44 + 4;
      while (v12 != v38)
      {
        v45 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v44 - 1) = v45;
        v44 -= 4;
      }
      *a2 = v44;
      a2[1] = v37;
      a2[2] = &v43[4 * v42];
      if (v38)
        operator delete(v38);
    }
    else
    {
      *(_DWORD *)v12 = 4;
      v37 = v12 + 4;
    }
    a2[1] = v37;
    v12 = v37;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 5u))
  {
    v46 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v46)
    {
      v48 = *a2;
      v49 = (v12 - *a2) >> 2;
      v50 = v49 + 1;
      if ((unint64_t)(v49 + 1) >> 62)
        goto LABEL_1066;
      v51 = v46 - (_QWORD)v48;
      if (v51 >> 1 > v50)
        v50 = v51 >> 1;
      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
        v52 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v52 = v50;
      if (v52)
      {
        if (v52 >> 62)
          goto LABEL_1067;
        v53 = (char *)operator new(4 * v52);
      }
      else
      {
        v53 = 0;
      }
      v54 = &v53[4 * v49];
      *(_DWORD *)v54 = 5;
      v47 = v54 + 4;
      while (v12 != v48)
      {
        v55 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v54 - 1) = v55;
        v54 -= 4;
      }
      *a2 = v54;
      a2[1] = v47;
      a2[2] = &v53[4 * v52];
      if (v48)
        operator delete(v48);
    }
    else
    {
      *(_DWORD *)v12 = 5;
      v47 = v12 + 4;
    }
    a2[1] = v47;
    v12 = v47;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 6u))
  {
    v56 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v56)
    {
      v58 = *a2;
      v59 = (v12 - *a2) >> 2;
      v60 = v59 + 1;
      if ((unint64_t)(v59 + 1) >> 62)
        goto LABEL_1066;
      v61 = v56 - (_QWORD)v58;
      if (v61 >> 1 > v60)
        v60 = v61 >> 1;
      if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
        v62 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v62 = v60;
      if (v62)
      {
        if (v62 >> 62)
          goto LABEL_1067;
        v63 = (char *)operator new(4 * v62);
      }
      else
      {
        v63 = 0;
      }
      v64 = &v63[4 * v59];
      *(_DWORD *)v64 = 6;
      v57 = v64 + 4;
      while (v12 != v58)
      {
        v65 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v64 - 1) = v65;
        v64 -= 4;
      }
      *a2 = v64;
      a2[1] = v57;
      a2[2] = &v63[4 * v62];
      if (v58)
        operator delete(v58);
    }
    else
    {
      *(_DWORD *)v12 = 6;
      v57 = v12 + 4;
    }
    a2[1] = v57;
    v12 = v57;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 7u))
  {
    v66 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v66)
    {
      v68 = *a2;
      v69 = (v12 - *a2) >> 2;
      v70 = v69 + 1;
      if ((unint64_t)(v69 + 1) >> 62)
        goto LABEL_1066;
      v71 = v66 - (_QWORD)v68;
      if (v71 >> 1 > v70)
        v70 = v71 >> 1;
      if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL)
        v72 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v72 = v70;
      if (v72)
      {
        if (v72 >> 62)
          goto LABEL_1067;
        v73 = (char *)operator new(4 * v72);
      }
      else
      {
        v73 = 0;
      }
      v74 = &v73[4 * v69];
      *(_DWORD *)v74 = 7;
      v67 = v74 + 4;
      while (v12 != v68)
      {
        v75 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v74 - 1) = v75;
        v74 -= 4;
      }
      *a2 = v74;
      a2[1] = v67;
      a2[2] = &v73[4 * v72];
      if (v68)
        operator delete(v68);
    }
    else
    {
      *(_DWORD *)v12 = 7;
      v67 = v12 + 4;
    }
    a2[1] = v67;
    v12 = v67;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 8u))
  {
    v76 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v76)
    {
      v78 = *a2;
      v79 = (v12 - *a2) >> 2;
      v80 = v79 + 1;
      if ((unint64_t)(v79 + 1) >> 62)
        goto LABEL_1066;
      v81 = v76 - (_QWORD)v78;
      if (v81 >> 1 > v80)
        v80 = v81 >> 1;
      if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL)
        v82 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v82 = v80;
      if (v82)
      {
        if (v82 >> 62)
          goto LABEL_1067;
        v83 = (char *)operator new(4 * v82);
      }
      else
      {
        v83 = 0;
      }
      v84 = &v83[4 * v79];
      *(_DWORD *)v84 = 8;
      v77 = v84 + 4;
      while (v12 != v78)
      {
        v85 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v84 - 1) = v85;
        v84 -= 4;
      }
      *a2 = v84;
      a2[1] = v77;
      a2[2] = &v83[4 * v82];
      if (v78)
        operator delete(v78);
    }
    else
    {
      *(_DWORD *)v12 = 8;
      v77 = v12 + 4;
    }
    a2[1] = v77;
    v12 = v77;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 9u))
  {
    v86 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v86)
    {
      v88 = *a2;
      v89 = (v12 - *a2) >> 2;
      v90 = v89 + 1;
      if ((unint64_t)(v89 + 1) >> 62)
        goto LABEL_1066;
      v91 = v86 - (_QWORD)v88;
      if (v91 >> 1 > v90)
        v90 = v91 >> 1;
      if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL)
        v92 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v92 = v90;
      if (v92)
      {
        if (v92 >> 62)
          goto LABEL_1067;
        v93 = (char *)operator new(4 * v92);
      }
      else
      {
        v93 = 0;
      }
      v94 = &v93[4 * v89];
      *(_DWORD *)v94 = 9;
      v87 = v94 + 4;
      while (v12 != v88)
      {
        v95 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v94 - 1) = v95;
        v94 -= 4;
      }
      *a2 = v94;
      a2[1] = v87;
      a2[2] = &v93[4 * v92];
      if (v88)
        operator delete(v88);
    }
    else
    {
      *(_DWORD *)v12 = 9;
      v87 = v12 + 4;
    }
    a2[1] = v87;
    v12 = v87;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0xAu))
  {
    v96 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v96)
    {
      v98 = *a2;
      v99 = (v12 - *a2) >> 2;
      v100 = v99 + 1;
      if ((unint64_t)(v99 + 1) >> 62)
        goto LABEL_1066;
      v101 = v96 - (_QWORD)v98;
      if (v101 >> 1 > v100)
        v100 = v101 >> 1;
      if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL)
        v102 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v102 = v100;
      if (v102)
      {
        if (v102 >> 62)
          goto LABEL_1067;
        v103 = (char *)operator new(4 * v102);
      }
      else
      {
        v103 = 0;
      }
      v104 = &v103[4 * v99];
      *(_DWORD *)v104 = 10;
      v97 = v104 + 4;
      while (v12 != v98)
      {
        v105 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v104 - 1) = v105;
        v104 -= 4;
      }
      *a2 = v104;
      a2[1] = v97;
      a2[2] = &v103[4 * v102];
      if (v98)
        operator delete(v98);
    }
    else
    {
      *(_DWORD *)v12 = 10;
      v97 = v12 + 4;
    }
    a2[1] = v97;
    v12 = v97;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0xBu))
  {
    v106 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v106)
    {
      v108 = *a2;
      v109 = (v12 - *a2) >> 2;
      v110 = v109 + 1;
      if ((unint64_t)(v109 + 1) >> 62)
        goto LABEL_1066;
      v111 = v106 - (_QWORD)v108;
      if (v111 >> 1 > v110)
        v110 = v111 >> 1;
      if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFFCLL)
        v112 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v112 = v110;
      if (v112)
      {
        if (v112 >> 62)
          goto LABEL_1067;
        v113 = (char *)operator new(4 * v112);
      }
      else
      {
        v113 = 0;
      }
      v114 = &v113[4 * v109];
      *(_DWORD *)v114 = 11;
      v107 = v114 + 4;
      while (v12 != v108)
      {
        v115 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v114 - 1) = v115;
        v114 -= 4;
      }
      *a2 = v114;
      a2[1] = v107;
      a2[2] = &v113[4 * v112];
      if (v108)
        operator delete(v108);
    }
    else
    {
      *(_DWORD *)v12 = 11;
      v107 = v12 + 4;
    }
    a2[1] = v107;
    v12 = v107;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0xCu))
  {
    v116 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v116)
    {
      v118 = *a2;
      v119 = (v12 - *a2) >> 2;
      v120 = v119 + 1;
      if ((unint64_t)(v119 + 1) >> 62)
        goto LABEL_1066;
      v121 = v116 - (_QWORD)v118;
      if (v121 >> 1 > v120)
        v120 = v121 >> 1;
      if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFFCLL)
        v122 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v122 = v120;
      if (v122)
      {
        if (v122 >> 62)
          goto LABEL_1067;
        v123 = (char *)operator new(4 * v122);
      }
      else
      {
        v123 = 0;
      }
      v124 = &v123[4 * v119];
      *(_DWORD *)v124 = 12;
      v117 = v124 + 4;
      while (v12 != v118)
      {
        v125 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v124 - 1) = v125;
        v124 -= 4;
      }
      *a2 = v124;
      a2[1] = v117;
      a2[2] = &v123[4 * v122];
      if (v118)
        operator delete(v118);
    }
    else
    {
      *(_DWORD *)v12 = 12;
      v117 = v12 + 4;
    }
    a2[1] = v117;
    v12 = v117;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0xDu))
  {
    v126 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v126)
    {
      v128 = *a2;
      v129 = (v12 - *a2) >> 2;
      v130 = v129 + 1;
      if ((unint64_t)(v129 + 1) >> 62)
        goto LABEL_1066;
      v131 = v126 - (_QWORD)v128;
      if (v131 >> 1 > v130)
        v130 = v131 >> 1;
      if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFFCLL)
        v132 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v132 = v130;
      if (v132)
      {
        if (v132 >> 62)
          goto LABEL_1067;
        v133 = (char *)operator new(4 * v132);
      }
      else
      {
        v133 = 0;
      }
      v134 = &v133[4 * v129];
      *(_DWORD *)v134 = 13;
      v127 = v134 + 4;
      while (v12 != v128)
      {
        v135 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v134 - 1) = v135;
        v134 -= 4;
      }
      *a2 = v134;
      a2[1] = v127;
      a2[2] = &v133[4 * v132];
      if (v128)
        operator delete(v128);
    }
    else
    {
      *(_DWORD *)v12 = 13;
      v127 = v12 + 4;
    }
    a2[1] = v127;
    v12 = v127;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0xEu))
  {
    v136 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v136)
    {
      v138 = *a2;
      v139 = (v12 - *a2) >> 2;
      v140 = v139 + 1;
      if ((unint64_t)(v139 + 1) >> 62)
        goto LABEL_1066;
      v141 = v136 - (_QWORD)v138;
      if (v141 >> 1 > v140)
        v140 = v141 >> 1;
      if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL)
        v142 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v142 = v140;
      if (v142)
      {
        if (v142 >> 62)
          goto LABEL_1067;
        v143 = (char *)operator new(4 * v142);
      }
      else
      {
        v143 = 0;
      }
      v144 = &v143[4 * v139];
      *(_DWORD *)v144 = 14;
      v137 = v144 + 4;
      while (v12 != v138)
      {
        v145 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v144 - 1) = v145;
        v144 -= 4;
      }
      *a2 = v144;
      a2[1] = v137;
      a2[2] = &v143[4 * v142];
      if (v138)
        operator delete(v138);
    }
    else
    {
      *(_DWORD *)v12 = 14;
      v137 = v12 + 4;
    }
    a2[1] = v137;
    v12 = v137;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0xFu))
  {
    v146 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v146)
    {
      v148 = *a2;
      v149 = (v12 - *a2) >> 2;
      v150 = v149 + 1;
      if ((unint64_t)(v149 + 1) >> 62)
        goto LABEL_1066;
      v151 = v146 - (_QWORD)v148;
      if (v151 >> 1 > v150)
        v150 = v151 >> 1;
      if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFFCLL)
        v152 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v152 = v150;
      if (v152)
      {
        if (v152 >> 62)
          goto LABEL_1067;
        v153 = (char *)operator new(4 * v152);
      }
      else
      {
        v153 = 0;
      }
      v154 = &v153[4 * v149];
      *(_DWORD *)v154 = 15;
      v147 = v154 + 4;
      while (v12 != v148)
      {
        v155 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v154 - 1) = v155;
        v154 -= 4;
      }
      *a2 = v154;
      a2[1] = v147;
      a2[2] = &v153[4 * v152];
      if (v148)
        operator delete(v148);
    }
    else
    {
      *(_DWORD *)v12 = 15;
      v147 = v12 + 4;
    }
    a2[1] = v147;
    v12 = v147;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x10u))
  {
    v156 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v156)
    {
      v158 = *a2;
      v159 = (v12 - *a2) >> 2;
      v160 = v159 + 1;
      if ((unint64_t)(v159 + 1) >> 62)
        goto LABEL_1066;
      v161 = v156 - (_QWORD)v158;
      if (v161 >> 1 > v160)
        v160 = v161 >> 1;
      if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFFCLL)
        v162 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v162 = v160;
      if (v162)
      {
        if (v162 >> 62)
          goto LABEL_1067;
        v163 = (char *)operator new(4 * v162);
      }
      else
      {
        v163 = 0;
      }
      v164 = &v163[4 * v159];
      *(_DWORD *)v164 = 16;
      v157 = v164 + 4;
      while (v12 != v158)
      {
        v165 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v164 - 1) = v165;
        v164 -= 4;
      }
      *a2 = v164;
      a2[1] = v157;
      a2[2] = &v163[4 * v162];
      if (v158)
        operator delete(v158);
    }
    else
    {
      *(_DWORD *)v12 = 16;
      v157 = v12 + 4;
    }
    a2[1] = v157;
    v12 = v157;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x11u))
  {
    v166 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v166)
    {
      v168 = *a2;
      v169 = (v12 - *a2) >> 2;
      v170 = v169 + 1;
      if ((unint64_t)(v169 + 1) >> 62)
        goto LABEL_1066;
      v171 = v166 - (_QWORD)v168;
      if (v171 >> 1 > v170)
        v170 = v171 >> 1;
      if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFFCLL)
        v172 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v172 = v170;
      if (v172)
      {
        if (v172 >> 62)
          goto LABEL_1067;
        v173 = (char *)operator new(4 * v172);
      }
      else
      {
        v173 = 0;
      }
      v174 = &v173[4 * v169];
      *(_DWORD *)v174 = 17;
      v167 = v174 + 4;
      while (v12 != v168)
      {
        v175 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v174 - 1) = v175;
        v174 -= 4;
      }
      *a2 = v174;
      a2[1] = v167;
      a2[2] = &v173[4 * v172];
      if (v168)
        operator delete(v168);
    }
    else
    {
      *(_DWORD *)v12 = 17;
      v167 = v12 + 4;
    }
    a2[1] = v167;
    v12 = v167;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x12u))
  {
    v176 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v176)
    {
      v178 = *a2;
      v179 = (v12 - *a2) >> 2;
      v180 = v179 + 1;
      if ((unint64_t)(v179 + 1) >> 62)
        goto LABEL_1066;
      v181 = v176 - (_QWORD)v178;
      if (v181 >> 1 > v180)
        v180 = v181 >> 1;
      if ((unint64_t)v181 >= 0x7FFFFFFFFFFFFFFCLL)
        v182 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v182 = v180;
      if (v182)
      {
        if (v182 >> 62)
          goto LABEL_1067;
        v183 = (char *)operator new(4 * v182);
      }
      else
      {
        v183 = 0;
      }
      v184 = &v183[4 * v179];
      *(_DWORD *)v184 = 18;
      v177 = v184 + 4;
      while (v12 != v178)
      {
        v185 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v184 - 1) = v185;
        v184 -= 4;
      }
      *a2 = v184;
      a2[1] = v177;
      a2[2] = &v183[4 * v182];
      if (v178)
        operator delete(v178);
    }
    else
    {
      *(_DWORD *)v12 = 18;
      v177 = v12 + 4;
    }
    a2[1] = v177;
    v12 = v177;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x13u))
  {
    v186 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v186)
    {
      v188 = *a2;
      v189 = (v12 - *a2) >> 2;
      v190 = v189 + 1;
      if ((unint64_t)(v189 + 1) >> 62)
        goto LABEL_1066;
      v191 = v186 - (_QWORD)v188;
      if (v191 >> 1 > v190)
        v190 = v191 >> 1;
      if ((unint64_t)v191 >= 0x7FFFFFFFFFFFFFFCLL)
        v192 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v192 = v190;
      if (v192)
      {
        if (v192 >> 62)
          goto LABEL_1067;
        v193 = (char *)operator new(4 * v192);
      }
      else
      {
        v193 = 0;
      }
      v194 = &v193[4 * v189];
      *(_DWORD *)v194 = 19;
      v187 = v194 + 4;
      while (v12 != v188)
      {
        v195 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v194 - 1) = v195;
        v194 -= 4;
      }
      *a2 = v194;
      a2[1] = v187;
      a2[2] = &v193[4 * v192];
      if (v188)
        operator delete(v188);
    }
    else
    {
      *(_DWORD *)v12 = 19;
      v187 = v12 + 4;
    }
    a2[1] = v187;
    v12 = v187;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x14u))
  {
    v196 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v196)
    {
      v198 = *a2;
      v199 = (v12 - *a2) >> 2;
      v200 = v199 + 1;
      if ((unint64_t)(v199 + 1) >> 62)
        goto LABEL_1066;
      v201 = v196 - (_QWORD)v198;
      if (v201 >> 1 > v200)
        v200 = v201 >> 1;
      if ((unint64_t)v201 >= 0x7FFFFFFFFFFFFFFCLL)
        v202 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v202 = v200;
      if (v202)
      {
        if (v202 >> 62)
          goto LABEL_1067;
        v203 = (char *)operator new(4 * v202);
      }
      else
      {
        v203 = 0;
      }
      v204 = &v203[4 * v199];
      *(_DWORD *)v204 = 20;
      v197 = v204 + 4;
      while (v12 != v198)
      {
        v205 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v204 - 1) = v205;
        v204 -= 4;
      }
      *a2 = v204;
      a2[1] = v197;
      a2[2] = &v203[4 * v202];
      if (v198)
        operator delete(v198);
    }
    else
    {
      *(_DWORD *)v12 = 20;
      v197 = v12 + 4;
    }
    a2[1] = v197;
    v12 = v197;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x15u))
  {
    v206 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v206)
    {
      v208 = *a2;
      v209 = (v12 - *a2) >> 2;
      v210 = v209 + 1;
      if ((unint64_t)(v209 + 1) >> 62)
        goto LABEL_1066;
      v211 = v206 - (_QWORD)v208;
      if (v211 >> 1 > v210)
        v210 = v211 >> 1;
      if ((unint64_t)v211 >= 0x7FFFFFFFFFFFFFFCLL)
        v212 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v212 = v210;
      if (v212)
      {
        if (v212 >> 62)
          goto LABEL_1067;
        v213 = (char *)operator new(4 * v212);
      }
      else
      {
        v213 = 0;
      }
      v214 = &v213[4 * v209];
      *(_DWORD *)v214 = 21;
      v207 = v214 + 4;
      while (v12 != v208)
      {
        v215 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v214 - 1) = v215;
        v214 -= 4;
      }
      *a2 = v214;
      a2[1] = v207;
      a2[2] = &v213[4 * v212];
      if (v208)
        operator delete(v208);
    }
    else
    {
      *(_DWORD *)v12 = 21;
      v207 = v12 + 4;
    }
    a2[1] = v207;
    v12 = v207;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x16u))
  {
    v216 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v216)
    {
      v218 = *a2;
      v219 = (v12 - *a2) >> 2;
      v220 = v219 + 1;
      if ((unint64_t)(v219 + 1) >> 62)
        goto LABEL_1066;
      v221 = v216 - (_QWORD)v218;
      if (v221 >> 1 > v220)
        v220 = v221 >> 1;
      if ((unint64_t)v221 >= 0x7FFFFFFFFFFFFFFCLL)
        v222 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v222 = v220;
      if (v222)
      {
        if (v222 >> 62)
          goto LABEL_1067;
        v223 = (char *)operator new(4 * v222);
      }
      else
      {
        v223 = 0;
      }
      v224 = &v223[4 * v219];
      *(_DWORD *)v224 = 22;
      v217 = v224 + 4;
      while (v12 != v218)
      {
        v225 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v224 - 1) = v225;
        v224 -= 4;
      }
      *a2 = v224;
      a2[1] = v217;
      a2[2] = &v223[4 * v222];
      if (v218)
        operator delete(v218);
    }
    else
    {
      *(_DWORD *)v12 = 22;
      v217 = v12 + 4;
    }
    a2[1] = v217;
    v12 = v217;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x17u))
  {
    v226 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v226)
    {
      v228 = *a2;
      v229 = (v12 - *a2) >> 2;
      v230 = v229 + 1;
      if ((unint64_t)(v229 + 1) >> 62)
        goto LABEL_1066;
      v231 = v226 - (_QWORD)v228;
      if (v231 >> 1 > v230)
        v230 = v231 >> 1;
      if ((unint64_t)v231 >= 0x7FFFFFFFFFFFFFFCLL)
        v232 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v232 = v230;
      if (v232)
      {
        if (v232 >> 62)
          goto LABEL_1067;
        v233 = (char *)operator new(4 * v232);
      }
      else
      {
        v233 = 0;
      }
      v234 = &v233[4 * v229];
      *(_DWORD *)v234 = 23;
      v227 = v234 + 4;
      while (v12 != v228)
      {
        v235 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v234 - 1) = v235;
        v234 -= 4;
      }
      *a2 = v234;
      a2[1] = v227;
      a2[2] = &v233[4 * v232];
      if (v228)
        operator delete(v228);
    }
    else
    {
      *(_DWORD *)v12 = 23;
      v227 = v12 + 4;
    }
    a2[1] = v227;
    v12 = v227;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x18u))
  {
    v236 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v236)
    {
      v238 = *a2;
      v239 = (v12 - *a2) >> 2;
      v240 = v239 + 1;
      if ((unint64_t)(v239 + 1) >> 62)
        goto LABEL_1066;
      v241 = v236 - (_QWORD)v238;
      if (v241 >> 1 > v240)
        v240 = v241 >> 1;
      if ((unint64_t)v241 >= 0x7FFFFFFFFFFFFFFCLL)
        v242 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v242 = v240;
      if (v242)
      {
        if (v242 >> 62)
          goto LABEL_1067;
        v243 = (char *)operator new(4 * v242);
      }
      else
      {
        v243 = 0;
      }
      v244 = &v243[4 * v239];
      *(_DWORD *)v244 = 24;
      v237 = v244 + 4;
      while (v12 != v238)
      {
        v245 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v244 - 1) = v245;
        v244 -= 4;
      }
      *a2 = v244;
      a2[1] = v237;
      a2[2] = &v243[4 * v242];
      if (v238)
        operator delete(v238);
    }
    else
    {
      *(_DWORD *)v12 = 24;
      v237 = v12 + 4;
    }
    a2[1] = v237;
    v12 = v237;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x19u))
  {
    v246 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v246)
    {
      v248 = *a2;
      v249 = (v12 - *a2) >> 2;
      v250 = v249 + 1;
      if ((unint64_t)(v249 + 1) >> 62)
        goto LABEL_1066;
      v251 = v246 - (_QWORD)v248;
      if (v251 >> 1 > v250)
        v250 = v251 >> 1;
      if ((unint64_t)v251 >= 0x7FFFFFFFFFFFFFFCLL)
        v252 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v252 = v250;
      if (v252)
      {
        if (v252 >> 62)
          goto LABEL_1067;
        v253 = (char *)operator new(4 * v252);
      }
      else
      {
        v253 = 0;
      }
      v254 = &v253[4 * v249];
      *(_DWORD *)v254 = 25;
      v247 = v254 + 4;
      while (v12 != v248)
      {
        v255 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v254 - 1) = v255;
        v254 -= 4;
      }
      *a2 = v254;
      a2[1] = v247;
      a2[2] = &v253[4 * v252];
      if (v248)
        operator delete(v248);
    }
    else
    {
      *(_DWORD *)v12 = 25;
      v247 = v12 + 4;
    }
    a2[1] = v247;
    v12 = v247;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x1Au))
  {
    v256 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v256)
    {
      v258 = *a2;
      v259 = (v12 - *a2) >> 2;
      v260 = v259 + 1;
      if ((unint64_t)(v259 + 1) >> 62)
        goto LABEL_1066;
      v261 = v256 - (_QWORD)v258;
      if (v261 >> 1 > v260)
        v260 = v261 >> 1;
      if ((unint64_t)v261 >= 0x7FFFFFFFFFFFFFFCLL)
        v262 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v262 = v260;
      if (v262)
      {
        if (v262 >> 62)
          goto LABEL_1067;
        v263 = (char *)operator new(4 * v262);
      }
      else
      {
        v263 = 0;
      }
      v264 = &v263[4 * v259];
      *(_DWORD *)v264 = 26;
      v257 = v264 + 4;
      while (v12 != v258)
      {
        v265 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v264 - 1) = v265;
        v264 -= 4;
      }
      *a2 = v264;
      a2[1] = v257;
      a2[2] = &v263[4 * v262];
      if (v258)
        operator delete(v258);
    }
    else
    {
      *(_DWORD *)v12 = 26;
      v257 = v12 + 4;
    }
    a2[1] = v257;
    v12 = v257;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x1Bu))
  {
    v266 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v266)
    {
      v268 = *a2;
      v269 = (v12 - *a2) >> 2;
      v270 = v269 + 1;
      if ((unint64_t)(v269 + 1) >> 62)
        goto LABEL_1066;
      v271 = v266 - (_QWORD)v268;
      if (v271 >> 1 > v270)
        v270 = v271 >> 1;
      if ((unint64_t)v271 >= 0x7FFFFFFFFFFFFFFCLL)
        v272 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v272 = v270;
      if (v272)
      {
        if (v272 >> 62)
          goto LABEL_1067;
        v273 = (char *)operator new(4 * v272);
      }
      else
      {
        v273 = 0;
      }
      v274 = &v273[4 * v269];
      *(_DWORD *)v274 = 27;
      v267 = v274 + 4;
      while (v12 != v268)
      {
        v275 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v274 - 1) = v275;
        v274 -= 4;
      }
      *a2 = v274;
      a2[1] = v267;
      a2[2] = &v273[4 * v272];
      if (v268)
        operator delete(v268);
    }
    else
    {
      *(_DWORD *)v12 = 27;
      v267 = v12 + 4;
    }
    a2[1] = v267;
    v12 = v267;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x1Cu))
  {
    v276 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v276)
    {
      v278 = *a2;
      v279 = (v12 - *a2) >> 2;
      v280 = v279 + 1;
      if ((unint64_t)(v279 + 1) >> 62)
        goto LABEL_1066;
      v281 = v276 - (_QWORD)v278;
      if (v281 >> 1 > v280)
        v280 = v281 >> 1;
      if ((unint64_t)v281 >= 0x7FFFFFFFFFFFFFFCLL)
        v282 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v282 = v280;
      if (v282)
      {
        if (v282 >> 62)
          goto LABEL_1067;
        v283 = (char *)operator new(4 * v282);
      }
      else
      {
        v283 = 0;
      }
      v284 = &v283[4 * v279];
      *(_DWORD *)v284 = 28;
      v277 = v284 + 4;
      while (v12 != v278)
      {
        v285 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v284 - 1) = v285;
        v284 -= 4;
      }
      *a2 = v284;
      a2[1] = v277;
      a2[2] = &v283[4 * v282];
      if (v278)
        operator delete(v278);
    }
    else
    {
      *(_DWORD *)v12 = 28;
      v277 = v12 + 4;
    }
    a2[1] = v277;
    v12 = v277;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x1Du))
  {
    v286 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v286)
    {
      v288 = *a2;
      v289 = (v12 - *a2) >> 2;
      v290 = v289 + 1;
      if ((unint64_t)(v289 + 1) >> 62)
        goto LABEL_1066;
      v291 = v286 - (_QWORD)v288;
      if (v291 >> 1 > v290)
        v290 = v291 >> 1;
      if ((unint64_t)v291 >= 0x7FFFFFFFFFFFFFFCLL)
        v292 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v292 = v290;
      if (v292)
      {
        if (v292 >> 62)
          goto LABEL_1067;
        v293 = (char *)operator new(4 * v292);
      }
      else
      {
        v293 = 0;
      }
      v294 = &v293[4 * v289];
      *(_DWORD *)v294 = 29;
      v287 = v294 + 4;
      while (v12 != v288)
      {
        v295 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v294 - 1) = v295;
        v294 -= 4;
      }
      *a2 = v294;
      a2[1] = v287;
      a2[2] = &v293[4 * v292];
      if (v288)
        operator delete(v288);
    }
    else
    {
      *(_DWORD *)v12 = 29;
      v287 = v12 + 4;
    }
    a2[1] = v287;
    v12 = v287;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x1Eu))
  {
    v296 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v296)
    {
      v298 = *a2;
      v299 = (v12 - *a2) >> 2;
      v300 = v299 + 1;
      if ((unint64_t)(v299 + 1) >> 62)
        goto LABEL_1066;
      v301 = v296 - (_QWORD)v298;
      if (v301 >> 1 > v300)
        v300 = v301 >> 1;
      if ((unint64_t)v301 >= 0x7FFFFFFFFFFFFFFCLL)
        v302 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v302 = v300;
      if (v302)
      {
        if (v302 >> 62)
          goto LABEL_1067;
        v303 = (char *)operator new(4 * v302);
      }
      else
      {
        v303 = 0;
      }
      v304 = &v303[4 * v299];
      *(_DWORD *)v304 = 30;
      v297 = v304 + 4;
      while (v12 != v298)
      {
        v305 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v304 - 1) = v305;
        v304 -= 4;
      }
      *a2 = v304;
      a2[1] = v297;
      a2[2] = &v303[4 * v302];
      if (v298)
        operator delete(v298);
    }
    else
    {
      *(_DWORD *)v12 = 30;
      v297 = v12 + 4;
    }
    a2[1] = v297;
    v12 = v297;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x1Fu))
  {
    v306 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v306)
    {
      v308 = *a2;
      v309 = (v12 - *a2) >> 2;
      v310 = v309 + 1;
      if ((unint64_t)(v309 + 1) >> 62)
        goto LABEL_1066;
      v311 = v306 - (_QWORD)v308;
      if (v311 >> 1 > v310)
        v310 = v311 >> 1;
      if ((unint64_t)v311 >= 0x7FFFFFFFFFFFFFFCLL)
        v312 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v312 = v310;
      if (v312)
      {
        if (v312 >> 62)
          goto LABEL_1067;
        v313 = (char *)operator new(4 * v312);
      }
      else
      {
        v313 = 0;
      }
      v314 = &v313[4 * v309];
      *(_DWORD *)v314 = 31;
      v307 = v314 + 4;
      while (v12 != v308)
      {
        v315 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v314 - 1) = v315;
        v314 -= 4;
      }
      *a2 = v314;
      a2[1] = v307;
      a2[2] = &v313[4 * v312];
      if (v308)
        operator delete(v308);
    }
    else
    {
      *(_DWORD *)v12 = 31;
      v307 = v12 + 4;
    }
    a2[1] = v307;
    v12 = v307;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x20u))
  {
    v316 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v316)
    {
      v318 = *a2;
      v319 = (v12 - *a2) >> 2;
      v320 = v319 + 1;
      if ((unint64_t)(v319 + 1) >> 62)
        goto LABEL_1066;
      v321 = v316 - (_QWORD)v318;
      if (v321 >> 1 > v320)
        v320 = v321 >> 1;
      if ((unint64_t)v321 >= 0x7FFFFFFFFFFFFFFCLL)
        v322 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v322 = v320;
      if (v322)
      {
        if (v322 >> 62)
          goto LABEL_1067;
        v323 = (char *)operator new(4 * v322);
      }
      else
      {
        v323 = 0;
      }
      v324 = &v323[4 * v319];
      *(_DWORD *)v324 = 32;
      v317 = v324 + 4;
      while (v12 != v318)
      {
        v325 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v324 - 1) = v325;
        v324 -= 4;
      }
      *a2 = v324;
      a2[1] = v317;
      a2[2] = &v323[4 * v322];
      if (v318)
        operator delete(v318);
    }
    else
    {
      *(_DWORD *)v12 = 32;
      v317 = v12 + 4;
    }
    a2[1] = v317;
    v12 = v317;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x21u))
  {
    v326 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v326)
    {
      v328 = *a2;
      v329 = (v12 - *a2) >> 2;
      v330 = v329 + 1;
      if ((unint64_t)(v329 + 1) >> 62)
        goto LABEL_1066;
      v331 = v326 - (_QWORD)v328;
      if (v331 >> 1 > v330)
        v330 = v331 >> 1;
      if ((unint64_t)v331 >= 0x7FFFFFFFFFFFFFFCLL)
        v332 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v332 = v330;
      if (v332)
      {
        if (v332 >> 62)
          goto LABEL_1067;
        v333 = (char *)operator new(4 * v332);
      }
      else
      {
        v333 = 0;
      }
      v334 = &v333[4 * v329];
      *(_DWORD *)v334 = 33;
      v327 = v334 + 4;
      while (v12 != v328)
      {
        v335 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v334 - 1) = v335;
        v334 -= 4;
      }
      *a2 = v334;
      a2[1] = v327;
      a2[2] = &v333[4 * v332];
      if (v328)
        operator delete(v328);
    }
    else
    {
      *(_DWORD *)v12 = 33;
      v327 = v12 + 4;
    }
    a2[1] = v327;
    v12 = v327;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x22u))
  {
    v336 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v336)
    {
      v338 = *a2;
      v339 = (v12 - *a2) >> 2;
      v340 = v339 + 1;
      if ((unint64_t)(v339 + 1) >> 62)
        goto LABEL_1066;
      v341 = v336 - (_QWORD)v338;
      if (v341 >> 1 > v340)
        v340 = v341 >> 1;
      if ((unint64_t)v341 >= 0x7FFFFFFFFFFFFFFCLL)
        v342 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v342 = v340;
      if (v342)
      {
        if (v342 >> 62)
          goto LABEL_1067;
        v343 = (char *)operator new(4 * v342);
      }
      else
      {
        v343 = 0;
      }
      v344 = &v343[4 * v339];
      *(_DWORD *)v344 = 34;
      v337 = v344 + 4;
      while (v12 != v338)
      {
        v345 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v344 - 1) = v345;
        v344 -= 4;
      }
      *a2 = v344;
      a2[1] = v337;
      a2[2] = &v343[4 * v342];
      if (v338)
        operator delete(v338);
    }
    else
    {
      *(_DWORD *)v12 = 34;
      v337 = v12 + 4;
    }
    a2[1] = v337;
    v12 = v337;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x23u))
  {
    v346 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v346)
    {
      v348 = *a2;
      v349 = (v12 - *a2) >> 2;
      v350 = v349 + 1;
      if ((unint64_t)(v349 + 1) >> 62)
        goto LABEL_1066;
      v351 = v346 - (_QWORD)v348;
      if (v351 >> 1 > v350)
        v350 = v351 >> 1;
      if ((unint64_t)v351 >= 0x7FFFFFFFFFFFFFFCLL)
        v352 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v352 = v350;
      if (v352)
      {
        if (v352 >> 62)
          goto LABEL_1067;
        v353 = (char *)operator new(4 * v352);
      }
      else
      {
        v353 = 0;
      }
      v354 = &v353[4 * v349];
      *(_DWORD *)v354 = 35;
      v347 = v354 + 4;
      while (v12 != v348)
      {
        v355 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v354 - 1) = v355;
        v354 -= 4;
      }
      *a2 = v354;
      a2[1] = v347;
      a2[2] = &v353[4 * v352];
      if (v348)
        operator delete(v348);
    }
    else
    {
      *(_DWORD *)v12 = 35;
      v347 = v12 + 4;
    }
    a2[1] = v347;
    v12 = v347;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x24u))
  {
    v356 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v356)
    {
      v358 = *a2;
      v359 = (v12 - *a2) >> 2;
      v360 = v359 + 1;
      if ((unint64_t)(v359 + 1) >> 62)
        goto LABEL_1066;
      v361 = v356 - (_QWORD)v358;
      if (v361 >> 1 > v360)
        v360 = v361 >> 1;
      if ((unint64_t)v361 >= 0x7FFFFFFFFFFFFFFCLL)
        v362 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v362 = v360;
      if (v362)
      {
        if (v362 >> 62)
          goto LABEL_1067;
        v363 = (char *)operator new(4 * v362);
      }
      else
      {
        v363 = 0;
      }
      v364 = &v363[4 * v359];
      *(_DWORD *)v364 = 36;
      v357 = v364 + 4;
      while (v12 != v358)
      {
        v365 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v364 - 1) = v365;
        v364 -= 4;
      }
      *a2 = v364;
      a2[1] = v357;
      a2[2] = &v363[4 * v362];
      if (v358)
        operator delete(v358);
    }
    else
    {
      *(_DWORD *)v12 = 36;
      v357 = v12 + 4;
    }
    a2[1] = v357;
    v12 = v357;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x25u))
  {
    v366 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v366)
    {
      v368 = *a2;
      v369 = (v12 - *a2) >> 2;
      v370 = v369 + 1;
      if ((unint64_t)(v369 + 1) >> 62)
        goto LABEL_1066;
      v371 = v366 - (_QWORD)v368;
      if (v371 >> 1 > v370)
        v370 = v371 >> 1;
      if ((unint64_t)v371 >= 0x7FFFFFFFFFFFFFFCLL)
        v372 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v372 = v370;
      if (v372)
      {
        if (v372 >> 62)
          goto LABEL_1067;
        v373 = (char *)operator new(4 * v372);
      }
      else
      {
        v373 = 0;
      }
      v374 = &v373[4 * v369];
      *(_DWORD *)v374 = 37;
      v367 = v374 + 4;
      while (v12 != v368)
      {
        v375 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v374 - 1) = v375;
        v374 -= 4;
      }
      *a2 = v374;
      a2[1] = v367;
      a2[2] = &v373[4 * v372];
      if (v368)
        operator delete(v368);
    }
    else
    {
      *(_DWORD *)v12 = 37;
      v367 = v12 + 4;
    }
    a2[1] = v367;
    v12 = v367;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x26u))
  {
    v376 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v376)
    {
      v378 = *a2;
      v379 = (v12 - *a2) >> 2;
      v380 = v379 + 1;
      if ((unint64_t)(v379 + 1) >> 62)
        goto LABEL_1066;
      v381 = v376 - (_QWORD)v378;
      if (v381 >> 1 > v380)
        v380 = v381 >> 1;
      if ((unint64_t)v381 >= 0x7FFFFFFFFFFFFFFCLL)
        v382 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v382 = v380;
      if (v382)
      {
        if (v382 >> 62)
          goto LABEL_1067;
        v383 = (char *)operator new(4 * v382);
      }
      else
      {
        v383 = 0;
      }
      v384 = &v383[4 * v379];
      *(_DWORD *)v384 = 38;
      v377 = v384 + 4;
      while (v12 != v378)
      {
        v385 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v384 - 1) = v385;
        v384 -= 4;
      }
      *a2 = v384;
      a2[1] = v377;
      a2[2] = &v383[4 * v382];
      if (v378)
        operator delete(v378);
    }
    else
    {
      *(_DWORD *)v12 = 38;
      v377 = v12 + 4;
    }
    a2[1] = v377;
    v12 = v377;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x27u))
  {
    v386 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v386)
    {
      v388 = *a2;
      v389 = (v12 - *a2) >> 2;
      v390 = v389 + 1;
      if ((unint64_t)(v389 + 1) >> 62)
        goto LABEL_1066;
      v391 = v386 - (_QWORD)v388;
      if (v391 >> 1 > v390)
        v390 = v391 >> 1;
      if ((unint64_t)v391 >= 0x7FFFFFFFFFFFFFFCLL)
        v392 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v392 = v390;
      if (v392)
      {
        if (v392 >> 62)
          goto LABEL_1067;
        v393 = (char *)operator new(4 * v392);
      }
      else
      {
        v393 = 0;
      }
      v394 = &v393[4 * v389];
      *(_DWORD *)v394 = 39;
      v387 = v394 + 4;
      while (v12 != v388)
      {
        v395 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v394 - 1) = v395;
        v394 -= 4;
      }
      *a2 = v394;
      a2[1] = v387;
      a2[2] = &v393[4 * v392];
      if (v388)
        operator delete(v388);
    }
    else
    {
      *(_DWORD *)v12 = 39;
      v387 = v12 + 4;
    }
    a2[1] = v387;
    v12 = v387;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x28u))
  {
    v396 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v396)
    {
      v398 = *a2;
      v399 = (v12 - *a2) >> 2;
      v400 = v399 + 1;
      if ((unint64_t)(v399 + 1) >> 62)
        goto LABEL_1066;
      v401 = v396 - (_QWORD)v398;
      if (v401 >> 1 > v400)
        v400 = v401 >> 1;
      if ((unint64_t)v401 >= 0x7FFFFFFFFFFFFFFCLL)
        v402 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v402 = v400;
      if (v402)
      {
        if (v402 >> 62)
          goto LABEL_1067;
        v403 = (char *)operator new(4 * v402);
      }
      else
      {
        v403 = 0;
      }
      v404 = &v403[4 * v399];
      *(_DWORD *)v404 = 40;
      v397 = v404 + 4;
      while (v12 != v398)
      {
        v405 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v404 - 1) = v405;
        v404 -= 4;
      }
      *a2 = v404;
      a2[1] = v397;
      a2[2] = &v403[4 * v402];
      if (v398)
        operator delete(v398);
    }
    else
    {
      *(_DWORD *)v12 = 40;
      v397 = v12 + 4;
    }
    a2[1] = v397;
    v12 = v397;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x29u))
  {
    v406 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v406)
    {
      v408 = *a2;
      v409 = (v12 - *a2) >> 2;
      v410 = v409 + 1;
      if ((unint64_t)(v409 + 1) >> 62)
        goto LABEL_1066;
      v411 = v406 - (_QWORD)v408;
      if (v411 >> 1 > v410)
        v410 = v411 >> 1;
      if ((unint64_t)v411 >= 0x7FFFFFFFFFFFFFFCLL)
        v412 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v412 = v410;
      if (v412)
      {
        if (v412 >> 62)
          goto LABEL_1067;
        v413 = (char *)operator new(4 * v412);
      }
      else
      {
        v413 = 0;
      }
      v414 = &v413[4 * v409];
      *(_DWORD *)v414 = 41;
      v407 = v414 + 4;
      while (v12 != v408)
      {
        v415 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v414 - 1) = v415;
        v414 -= 4;
      }
      *a2 = v414;
      a2[1] = v407;
      a2[2] = &v413[4 * v412];
      if (v408)
        operator delete(v408);
    }
    else
    {
      *(_DWORD *)v12 = 41;
      v407 = v12 + 4;
    }
    a2[1] = v407;
    v12 = v407;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x2Au))
  {
    v416 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v416)
    {
      v418 = *a2;
      v419 = (v12 - *a2) >> 2;
      v420 = v419 + 1;
      if ((unint64_t)(v419 + 1) >> 62)
        goto LABEL_1066;
      v421 = v416 - (_QWORD)v418;
      if (v421 >> 1 > v420)
        v420 = v421 >> 1;
      if ((unint64_t)v421 >= 0x7FFFFFFFFFFFFFFCLL)
        v422 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v422 = v420;
      if (v422)
      {
        if (v422 >> 62)
          goto LABEL_1067;
        v423 = (char *)operator new(4 * v422);
      }
      else
      {
        v423 = 0;
      }
      v424 = &v423[4 * v419];
      *(_DWORD *)v424 = 42;
      v417 = v424 + 4;
      while (v12 != v418)
      {
        v425 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v424 - 1) = v425;
        v424 -= 4;
      }
      *a2 = v424;
      a2[1] = v417;
      a2[2] = &v423[4 * v422];
      if (v418)
        operator delete(v418);
    }
    else
    {
      *(_DWORD *)v12 = 42;
      v417 = v12 + 4;
    }
    a2[1] = v417;
    v12 = v417;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x2Bu))
  {
    v426 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v426)
    {
      v428 = *a2;
      v429 = (v12 - *a2) >> 2;
      v430 = v429 + 1;
      if ((unint64_t)(v429 + 1) >> 62)
        goto LABEL_1066;
      v431 = v426 - (_QWORD)v428;
      if (v431 >> 1 > v430)
        v430 = v431 >> 1;
      if ((unint64_t)v431 >= 0x7FFFFFFFFFFFFFFCLL)
        v432 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v432 = v430;
      if (v432)
      {
        if (v432 >> 62)
          goto LABEL_1067;
        v433 = (char *)operator new(4 * v432);
      }
      else
      {
        v433 = 0;
      }
      v434 = &v433[4 * v429];
      *(_DWORD *)v434 = 43;
      v427 = v434 + 4;
      while (v12 != v428)
      {
        v435 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v434 - 1) = v435;
        v434 -= 4;
      }
      *a2 = v434;
      a2[1] = v427;
      a2[2] = &v433[4 * v432];
      if (v428)
        operator delete(v428);
    }
    else
    {
      *(_DWORD *)v12 = 43;
      v427 = v12 + 4;
    }
    a2[1] = v427;
    v12 = v427;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x2Cu))
  {
    v436 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v436)
    {
      v438 = *a2;
      v439 = (v12 - *a2) >> 2;
      v440 = v439 + 1;
      if ((unint64_t)(v439 + 1) >> 62)
        goto LABEL_1066;
      v441 = v436 - (_QWORD)v438;
      if (v441 >> 1 > v440)
        v440 = v441 >> 1;
      if ((unint64_t)v441 >= 0x7FFFFFFFFFFFFFFCLL)
        v442 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v442 = v440;
      if (v442)
      {
        if (v442 >> 62)
          goto LABEL_1067;
        v443 = (char *)operator new(4 * v442);
      }
      else
      {
        v443 = 0;
      }
      v444 = &v443[4 * v439];
      *(_DWORD *)v444 = 44;
      v437 = v444 + 4;
      while (v12 != v438)
      {
        v445 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v444 - 1) = v445;
        v444 -= 4;
      }
      *a2 = v444;
      a2[1] = v437;
      a2[2] = &v443[4 * v442];
      if (v438)
        operator delete(v438);
    }
    else
    {
      *(_DWORD *)v12 = 44;
      v437 = v12 + 4;
    }
    a2[1] = v437;
    v12 = v437;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x2Du))
  {
    v446 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v446)
    {
      v448 = *a2;
      v449 = (v12 - *a2) >> 2;
      v450 = v449 + 1;
      if ((unint64_t)(v449 + 1) >> 62)
        goto LABEL_1066;
      v451 = v446 - (_QWORD)v448;
      if (v451 >> 1 > v450)
        v450 = v451 >> 1;
      if ((unint64_t)v451 >= 0x7FFFFFFFFFFFFFFCLL)
        v452 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v452 = v450;
      if (v452)
      {
        if (v452 >> 62)
          goto LABEL_1067;
        v453 = (char *)operator new(4 * v452);
      }
      else
      {
        v453 = 0;
      }
      v454 = &v453[4 * v449];
      *(_DWORD *)v454 = 45;
      v447 = v454 + 4;
      while (v12 != v448)
      {
        v455 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v454 - 1) = v455;
        v454 -= 4;
      }
      *a2 = v454;
      a2[1] = v447;
      a2[2] = &v453[4 * v452];
      if (v448)
        operator delete(v448);
    }
    else
    {
      *(_DWORD *)v12 = 45;
      v447 = v12 + 4;
    }
    a2[1] = v447;
    v12 = v447;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x2Eu))
  {
    v456 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v456)
    {
      v458 = *a2;
      v459 = (v12 - *a2) >> 2;
      v460 = v459 + 1;
      if ((unint64_t)(v459 + 1) >> 62)
        goto LABEL_1066;
      v461 = v456 - (_QWORD)v458;
      if (v461 >> 1 > v460)
        v460 = v461 >> 1;
      if ((unint64_t)v461 >= 0x7FFFFFFFFFFFFFFCLL)
        v462 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v462 = v460;
      if (v462)
      {
        if (v462 >> 62)
          goto LABEL_1067;
        v463 = (char *)operator new(4 * v462);
      }
      else
      {
        v463 = 0;
      }
      v464 = &v463[4 * v459];
      *(_DWORD *)v464 = 46;
      v457 = v464 + 4;
      while (v12 != v458)
      {
        v465 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v464 - 1) = v465;
        v464 -= 4;
      }
      *a2 = v464;
      a2[1] = v457;
      a2[2] = &v463[4 * v462];
      if (v458)
        operator delete(v458);
    }
    else
    {
      *(_DWORD *)v12 = 46;
      v457 = v12 + 4;
    }
    a2[1] = v457;
    v12 = v457;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x2Fu))
  {
    v466 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v466)
    {
      v468 = *a2;
      v469 = (v12 - *a2) >> 2;
      v470 = v469 + 1;
      if ((unint64_t)(v469 + 1) >> 62)
        goto LABEL_1066;
      v471 = v466 - (_QWORD)v468;
      if (v471 >> 1 > v470)
        v470 = v471 >> 1;
      if ((unint64_t)v471 >= 0x7FFFFFFFFFFFFFFCLL)
        v472 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v472 = v470;
      if (v472)
      {
        if (v472 >> 62)
          goto LABEL_1067;
        v473 = (char *)operator new(4 * v472);
      }
      else
      {
        v473 = 0;
      }
      v474 = &v473[4 * v469];
      *(_DWORD *)v474 = 47;
      v467 = v474 + 4;
      while (v12 != v468)
      {
        v475 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v474 - 1) = v475;
        v474 -= 4;
      }
      *a2 = v474;
      a2[1] = v467;
      a2[2] = &v473[4 * v472];
      if (v468)
        operator delete(v468);
    }
    else
    {
      *(_DWORD *)v12 = 47;
      v467 = v12 + 4;
    }
    a2[1] = v467;
    v12 = v467;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x30u))
  {
    v476 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v476)
    {
      v478 = *a2;
      v479 = (v12 - *a2) >> 2;
      v480 = v479 + 1;
      if ((unint64_t)(v479 + 1) >> 62)
        goto LABEL_1066;
      v481 = v476 - (_QWORD)v478;
      if (v481 >> 1 > v480)
        v480 = v481 >> 1;
      if ((unint64_t)v481 >= 0x7FFFFFFFFFFFFFFCLL)
        v482 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v482 = v480;
      if (v482)
      {
        if (v482 >> 62)
          goto LABEL_1067;
        v483 = (char *)operator new(4 * v482);
      }
      else
      {
        v483 = 0;
      }
      v484 = &v483[4 * v479];
      *(_DWORD *)v484 = 48;
      v477 = v484 + 4;
      while (v12 != v478)
      {
        v485 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v484 - 1) = v485;
        v484 -= 4;
      }
      *a2 = v484;
      a2[1] = v477;
      a2[2] = &v483[4 * v482];
      if (v478)
        operator delete(v478);
    }
    else
    {
      *(_DWORD *)v12 = 48;
      v477 = v12 + 4;
    }
    a2[1] = v477;
    v12 = v477;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x31u))
  {
    v486 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v486)
    {
      v488 = *a2;
      v489 = (v12 - *a2) >> 2;
      v490 = v489 + 1;
      if ((unint64_t)(v489 + 1) >> 62)
        goto LABEL_1066;
      v491 = v486 - (_QWORD)v488;
      if (v491 >> 1 > v490)
        v490 = v491 >> 1;
      if ((unint64_t)v491 >= 0x7FFFFFFFFFFFFFFCLL)
        v492 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v492 = v490;
      if (v492)
      {
        if (v492 >> 62)
          goto LABEL_1067;
        v493 = (char *)operator new(4 * v492);
      }
      else
      {
        v493 = 0;
      }
      v494 = &v493[4 * v489];
      *(_DWORD *)v494 = 49;
      v487 = v494 + 4;
      while (v12 != v488)
      {
        v495 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v494 - 1) = v495;
        v494 -= 4;
      }
      *a2 = v494;
      a2[1] = v487;
      a2[2] = &v493[4 * v492];
      if (v488)
        operator delete(v488);
    }
    else
    {
      *(_DWORD *)v12 = 49;
      v487 = v12 + 4;
    }
    a2[1] = v487;
    v12 = v487;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x32u))
  {
    v496 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v496)
    {
      v498 = *a2;
      v499 = (v12 - *a2) >> 2;
      v500 = v499 + 1;
      if ((unint64_t)(v499 + 1) >> 62)
        goto LABEL_1066;
      v501 = v496 - (_QWORD)v498;
      if (v501 >> 1 > v500)
        v500 = v501 >> 1;
      if ((unint64_t)v501 >= 0x7FFFFFFFFFFFFFFCLL)
        v502 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v502 = v500;
      if (v502)
      {
        if (v502 >> 62)
          goto LABEL_1067;
        v503 = (char *)operator new(4 * v502);
      }
      else
      {
        v503 = 0;
      }
      v504 = &v503[4 * v499];
      *(_DWORD *)v504 = 50;
      v497 = v504 + 4;
      while (v12 != v498)
      {
        v505 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v504 - 1) = v505;
        v504 -= 4;
      }
      *a2 = v504;
      a2[1] = v497;
      a2[2] = &v503[4 * v502];
      if (v498)
        operator delete(v498);
    }
    else
    {
      *(_DWORD *)v12 = 50;
      v497 = v12 + 4;
    }
    a2[1] = v497;
    v12 = v497;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x33u))
  {
    v506 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v506)
    {
      v508 = *a2;
      v509 = (v12 - *a2) >> 2;
      v510 = v509 + 1;
      if ((unint64_t)(v509 + 1) >> 62)
        goto LABEL_1066;
      v511 = v506 - (_QWORD)v508;
      if (v511 >> 1 > v510)
        v510 = v511 >> 1;
      if ((unint64_t)v511 >= 0x7FFFFFFFFFFFFFFCLL)
        v512 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v512 = v510;
      if (v512)
      {
        if (v512 >> 62)
          goto LABEL_1067;
        v513 = (char *)operator new(4 * v512);
      }
      else
      {
        v513 = 0;
      }
      v514 = &v513[4 * v509];
      *(_DWORD *)v514 = 51;
      v507 = v514 + 4;
      while (v12 != v508)
      {
        v515 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v514 - 1) = v515;
        v514 -= 4;
      }
      *a2 = v514;
      a2[1] = v507;
      a2[2] = &v513[4 * v512];
      if (v508)
        operator delete(v508);
    }
    else
    {
      *(_DWORD *)v12 = 51;
      v507 = v12 + 4;
    }
    a2[1] = v507;
    v12 = v507;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x34u))
  {
    v516 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v516)
    {
      v518 = *a2;
      v519 = (v12 - *a2) >> 2;
      v520 = v519 + 1;
      if ((unint64_t)(v519 + 1) >> 62)
        goto LABEL_1066;
      v521 = v516 - (_QWORD)v518;
      if (v521 >> 1 > v520)
        v520 = v521 >> 1;
      if ((unint64_t)v521 >= 0x7FFFFFFFFFFFFFFCLL)
        v522 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v522 = v520;
      if (v522)
      {
        if (v522 >> 62)
          goto LABEL_1067;
        v523 = (char *)operator new(4 * v522);
      }
      else
      {
        v523 = 0;
      }
      v524 = &v523[4 * v519];
      *(_DWORD *)v524 = 52;
      v517 = v524 + 4;
      while (v12 != v518)
      {
        v525 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v524 - 1) = v525;
        v524 -= 4;
      }
      *a2 = v524;
      a2[1] = v517;
      a2[2] = &v523[4 * v522];
      if (v518)
        operator delete(v518);
    }
    else
    {
      *(_DWORD *)v12 = 52;
      v517 = v12 + 4;
    }
    a2[1] = v517;
    v12 = v517;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x35u))
  {
    v526 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v526)
    {
      v528 = *a2;
      v529 = (v12 - *a2) >> 2;
      v530 = v529 + 1;
      if ((unint64_t)(v529 + 1) >> 62)
        goto LABEL_1066;
      v531 = v526 - (_QWORD)v528;
      if (v531 >> 1 > v530)
        v530 = v531 >> 1;
      if ((unint64_t)v531 >= 0x7FFFFFFFFFFFFFFCLL)
        v532 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v532 = v530;
      if (v532)
      {
        if (v532 >> 62)
          goto LABEL_1067;
        v533 = (char *)operator new(4 * v532);
      }
      else
      {
        v533 = 0;
      }
      v534 = &v533[4 * v529];
      *(_DWORD *)v534 = 53;
      v527 = v534 + 4;
      while (v12 != v528)
      {
        v535 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v534 - 1) = v535;
        v534 -= 4;
      }
      *a2 = v534;
      a2[1] = v527;
      a2[2] = &v533[4 * v532];
      if (v528)
        operator delete(v528);
    }
    else
    {
      *(_DWORD *)v12 = 53;
      v527 = v12 + 4;
    }
    a2[1] = v527;
    v12 = v527;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x36u))
  {
    v536 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v536)
    {
      v538 = *a2;
      v539 = (v12 - *a2) >> 2;
      v540 = v539 + 1;
      if ((unint64_t)(v539 + 1) >> 62)
        goto LABEL_1066;
      v541 = v536 - (_QWORD)v538;
      if (v541 >> 1 > v540)
        v540 = v541 >> 1;
      if ((unint64_t)v541 >= 0x7FFFFFFFFFFFFFFCLL)
        v542 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v542 = v540;
      if (v542)
      {
        if (v542 >> 62)
          goto LABEL_1067;
        v543 = (char *)operator new(4 * v542);
      }
      else
      {
        v543 = 0;
      }
      v544 = &v543[4 * v539];
      *(_DWORD *)v544 = 54;
      v537 = v544 + 4;
      while (v12 != v538)
      {
        v545 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v544 - 1) = v545;
        v544 -= 4;
      }
      *a2 = v544;
      a2[1] = v537;
      a2[2] = &v543[4 * v542];
      if (v538)
        operator delete(v538);
    }
    else
    {
      *(_DWORD *)v12 = 54;
      v537 = v12 + 4;
    }
    a2[1] = v537;
    v12 = v537;
  }
  if (llvm::MachO::isValidImplementationForArchitecture(a1, 0x37u))
  {
    v546 = (unint64_t)a2[2];
    if ((unint64_t)v12 >= v546)
    {
      v548 = *a2;
      v549 = (v12 - *a2) >> 2;
      v550 = v549 + 1;
      if ((unint64_t)(v549 + 1) >> 62)
        goto LABEL_1066;
      v551 = v546 - (_QWORD)v548;
      if (v551 >> 1 > v550)
        v550 = v551 >> 1;
      if ((unint64_t)v551 >= 0x7FFFFFFFFFFFFFFCLL)
        v552 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v552 = v550;
      if (v552)
      {
        if (v552 >> 62)
          goto LABEL_1067;
        v553 = (char *)operator new(4 * v552);
      }
      else
      {
        v553 = 0;
      }
      v554 = &v553[4 * v549];
      *(_DWORD *)v554 = 55;
      v547 = v554 + 4;
      while (v12 != v548)
      {
        v555 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v554 - 1) = v555;
        v554 -= 4;
      }
      *a2 = v554;
      a2[1] = v547;
      a2[2] = &v553[4 * v552];
      if (v548)
        operator delete(v548);
    }
    else
    {
      *(_DWORD *)v12 = 55;
      v547 = v12 + 4;
    }
    a2[1] = v547;
    v12 = v547;
  }
  if (!llvm::MachO::isValidImplementationForArchitecture(a1, 0x38u))
    return;
  v556 = (unint64_t)a2[2];
  if ((unint64_t)v12 >= v556)
  {
    v558 = *a2;
    v559 = (v12 - *a2) >> 2;
    v560 = v559 + 1;
    if (!((unint64_t)(v559 + 1) >> 62))
    {
      v561 = v556 - (_QWORD)v558;
      if (v561 >> 1 > v560)
        v560 = v561 >> 1;
      if ((unint64_t)v561 >= 0x7FFFFFFFFFFFFFFCLL)
        v562 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v562 = v560;
      if (!v562)
      {
        v563 = 0;
LABEL_1059:
        v564 = &v563[4 * v559];
        *(_DWORD *)v564 = 56;
        v557 = v564 + 4;
        while (v12 != v558)
        {
          v565 = *((_DWORD *)v12 - 1);
          v12 -= 4;
          *((_DWORD *)v564 - 1) = v565;
          v564 -= 4;
        }
        *a2 = v564;
        a2[1] = v557;
        a2[2] = &v563[4 * v562];
        if (v558)
          operator delete(v558);
        goto LABEL_1064;
      }
      if (!(v562 >> 62))
      {
        v563 = (char *)operator new(4 * v562);
        goto LABEL_1059;
      }
LABEL_1067:
      sub_1C4764EE4();
    }
LABEL_1066:
    abort();
  }
  *(_DWORD *)v12 = 56;
  v557 = v12 + 4;
LABEL_1064:
  a2[1] = v557;
}

