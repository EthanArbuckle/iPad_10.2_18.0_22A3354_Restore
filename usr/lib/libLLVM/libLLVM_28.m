uint64_t llvm::ConstantExpr::handleOperandChangeImpl(llvm::ConstantExpr *this, llvm::Value *a2, llvm::Value *a3)
{
  int v6;
  uint64_t v7;
  llvm::Constant *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  llvm::ConstantExpr *v12;
  llvm::Value *v13;
  _BYTE *v14;
  uint64_t v15;
  int v16;
  __int16 v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int8 v25;
  _QWORD *v26;
  uint64_t v27;
  __int16 v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  llvm::ConstantExpr *v49;
  int v51;
  unint64_t v52;
  _QWORD *v53;
  int v54;
  unint64_t v55;
  int v56;
  int32x2_t *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  char v62;
  __int16 v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  llvm::ConstantExpr *v67;
  uint64_t *v68[3];
  void *v69;
  uint64_t v70;
  _BYTE v71[64];
  _BYTE v72[40];
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v69 = v71;
  v70 = 0x800000000;
  v6 = *((_DWORD *)this + 5);
  v7 = v6 & 0x7FFFFFF;
  if ((v6 & 0x7FFFFFF) != 0)
  {
    LODWORD(v8) = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = this;
    do
    {
      if (*((llvm::Value **)v12 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)) == a2)
      {
        ++v11;
        v10 = v9;
        v13 = a3;
      }
      else
      {
        v13 = (llvm::Value *)*((_QWORD *)v12 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
      }
      if (v8 >= HIDWORD(v70))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, (uint64_t)v71, v8 + 1, 8);
        LODWORD(v8) = v70;
      }
      *((_QWORD *)v69 + v8) = v13;
      v8 = (llvm::Constant *)(v70 + 1);
      LODWORD(v70) = v70 + 1;
      ++v9;
      v12 = (llvm::ConstantExpr *)((char *)v12 + 32);
    }
    while (v7 != v9);
    v14 = v69;
  }
  else
  {
    v8 = 0;
    v11 = 0;
    v10 = 0;
    v14 = v71;
  }
  v15 = llvm::ConstantExpr::getWithOperands((uint64_t)this, (uint64_t)v14, v8, *(llvm::Constant **)this, (llvm::Type *)1, 0);
  if (!v15)
  {
    v16 = *((unsigned __int16 *)this + 9);
    if ((v16 - 53) > 1)
      v17 = 0;
    else
      v17 = *((_WORD *)this + 12);
    v63 = v17;
    v64 = *(_QWORD *)this;
    v62 = *((_WORD *)this + 9);
    if ((v16 & 0xFFFE) == 0x40)
    {
      v18 = 0;
      v19 = 0;
      v58 = 0;
      v20 = (_QWORD *)*((_QWORD *)this + 3);
      v21 = *((unsigned int *)this + 8);
    }
    else if (v16 == 34)
    {
      v18 = 0;
      v19 = 0;
      v21 = 0;
      v20 = 0;
      v58 = *((_QWORD *)this + 3);
    }
    else if (v16 == 63)
    {
      v21 = 0;
      v20 = 0;
      v58 = 0;
      v18 = (_QWORD *)*((_QWORD *)this + 3);
      v19 = *((unsigned int *)this + 8);
    }
    else
    {
      v18 = 0;
      v19 = 0;
      v21 = 0;
      v20 = 0;
      v58 = 0;
    }
    v57 = ***(int32x2_t ****)this;
    v56 = *((unsigned __int8 *)this + 17) >> 1;
    v65 = v70;
    v66 = v69;
    v22 = sub_1C53831BC(v69, (uint64_t)v69 + 8 * v70);
    v59 = v20;
    v60 = v21;
    v23 = sub_1C4F5AB38(v20, (uint64_t)v20 + 4 * v21);
    v61 = v18;
    v24 = sub_1C517D118(v18, (uint64_t)v18 + 4 * v19);
    memset(v72, 0, 36);
    v25 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    v26 = &unk_1ED7EA000;
    if ((v25 & 1) == 0)
    {
      v51 = __cxa_guard_acquire(&qword_1ED7EAC88);
      v26 = &unk_1ED7EA000;
      if (v51)
      {
        v52 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v52 = 0xFF51AFD7ED558CCDLL;
        qword_1ED7EAC80 = v52;
        __cxa_guard_release(&qword_1ED7EAC88);
        v26 = (_QWORD *)&unk_1ED7EA000;
      }
    }
    v27 = v26[400];
    v29 = v62;
    v28 = v63;
    v72[0] = v62;
    v30 = v56;
    v72[1] = v56;
    *(_WORD *)&v72[2] = v63;
    *(_QWORD *)&v72[4] = v22;
    *(_QWORD *)&v72[12] = v23;
    *(_QWORD *)&v72[20] = v24;
    *(_QWORD *)&v72[28] = v58;
    v31 = *(_QWORD *)v72 - 0x3C5A37A36834CED9 * v24 - 0x7CAFD2FAA76D1684;
    v32 = __ROR8__(v31 + *(_QWORD *)&v72[24], 52);
    v33 = v31 + *(_QWORD *)&v72[8];
    v34 = __ROR8__(v33, 7);
    v35 = v33 + *(_QWORD *)&v72[16];
    v36 = v34
        + __ROR8__(*(_QWORD *)v72 - 0x3C5A37A36834CED9 * v24 - 0x7CAFD2FAA76D1684, 37)
        + v32
        + __ROR8__(v35, 31);
    v37 = *(_QWORD *)&v72[16] + v22 + v23;
    v38 = __ROR8__(v37, 7);
    v39 = v37 + v24;
    v40 = v35
        + *(_QWORD *)&v72[24]
        + __ROR8__(*(_QWORD *)&v72[16] + v22, 37)
        + __ROR8__(*(_QWORD *)&v72[16] + v22 + v58, 52)
        + v38
        + __ROR8__(v39, 31);
    v41 = (0xC3A5C85C97CB3127 * (v39 + v58 + v36) - 0x651E95C4D06FBFB1 * v40) ^ ((0xC3A5C85C97CB3127
                                                                                    * (v39 + v58 + v36)
                                                                                    - 0x651E95C4D06FBFB1 * v40) >> 47);
    v42 = 797982799 * (((((0xC3A5C85C97CB3127 * v41) ^ v27) + v36) >> 47) ^ (((-1748291289 * v41) ^ v27) + v36));
    *(_DWORD *)&v72[8] = 0;
    *(_QWORD *)v72 = 0;
    LOBYTE(v27) = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    v43 = v30;
    if ((v27 & 1) == 0)
    {
      v53 = v26;
      v54 = __cxa_guard_acquire(&qword_1ED7EAC88);
      v26 = v53;
      v29 = v62;
      v28 = v63;
      if (v54)
      {
        v55 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v55 = 0xFF51AFD7ED558CCDLL;
        v53[400] = v55;
        __cxa_guard_release(&qword_1ED7EAC88);
        v26 = v53;
        v29 = v62;
        v28 = v63;
      }
    }
    v44 = v26[400];
    *(_DWORD *)&v72[4] = HIDWORD(v64);
    *(_DWORD *)&v72[8] = v42;
    v45 = __ROR8__(*(_QWORD *)&v72[4] + 12, 12);
    *(_DWORD *)v72 = (-348639895
                    * ((((0x9DDFEA08EB382D69
                                      * (v45 ^ ((0x9DDFEA08EB382D69 * (v44 ^ v64 ^ v45)) >> 47) ^ (0x9DDFEA08EB382D69 * (v44 ^ v64 ^ v45)))) >> 32) >> 15) ^ (-348639895 * (v45 ^ (((0x9DDFEA08EB382D69 * (v44 ^ v64 ^ v45)) >> 32) >> 15) ^ (-348639895 * (v44 ^ v64 ^ v45)))))) ^ HIDWORD(v64);
    *(_QWORD *)&v72[8] = v64;
    v72[16] = v29;
    v72[17] = v43;
    *(_WORD *)&v72[18] = v28;
    *(_QWORD *)&v72[24] = v66;
    *(_QWORD *)&v72[32] = v65;
    v73 = v59;
    v74 = v60;
    v75 = v61;
    v76 = v19;
    v77 = v58;
    v68[0] = 0;
    if (!sub_1C53853E8(*(_QWORD *)&v57[189], v57[191].i32[0], (uint64_t)v72, v68)
      || v68[0] == (uint64_t *)(*(_QWORD *)&v57[189] + 8 * v57[191].u32[0]))
    {
      sub_1C537FC54(v57 + 189, (uint64_t *)this);
      if (v11 == 1)
      {
        LLVMSetArgOperand_0((uint64_t)this, v10, (uint64_t)a3);
      }
      else
      {
        v46 = *((_DWORD *)this + 5);
        v47 = v46 & 0x7FFFFFF;
        if ((v46 & 0x7FFFFFF) != 0)
        {
          v48 = 0;
          v49 = this;
          do
          {
            if (*((llvm::Value **)v49 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)) == a2)
              LLVMSetArgOperand_0((uint64_t)this, v48, (uint64_t)a3);
            ++v48;
            v49 = (llvm::ConstantExpr *)((char *)v49 + 32);
          }
          while (v47 != v48);
        }
      }
      v67 = this;
      sub_1C5385610((uint64_t)v68, (uint64_t)&v57[189], (uint64_t *)&v67, (uint64_t)v72);
      v15 = 0;
    }
    else
    {
      v15 = *v68[0];
    }
  }
  if (v69 != v71)
    free(v69);
  return v15;
}

llvm::Value **llvm::ConstantArray::handleOperandChangeImpl(llvm::ConstantArray *this, llvm::Value *a2, llvm::Value *a3)
{
  int v6;
  uint64_t v7;
  llvm::Value **v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  char v14;
  llvm::Value *v15;
  llvm::Type *v16;
  uint64_t v17;
  llvm::Value **Impl;
  void *v20;
  uint64_t v21;
  _QWORD v22[9];

  v22[8] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x800000000;
  v6 = *((_DWORD *)this + 5);
  if ((v6 & 0x7FFFFFFu) >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, (uint64_t)v22, v6 & 0x7FFFFFF, 8);
    v6 = *((_DWORD *)this + 5);
  }
  if ((v6 & 0x40000000) != 0)
  {
    v8 = (llvm::Value **)*((_QWORD *)this - 1);
    v7 = v6 & 0x7FFFFFF;
    if ((_DWORD)v7)
      goto LABEL_5;
LABEL_15:
    v10 = 0;
    v11 = 0;
    goto LABEL_16;
  }
  v7 = v6 & 0x7FFFFFF;
  v8 = (llvm::Value **)((char *)this - 32 * v7);
  if (!(_DWORD)v7)
    goto LABEL_15;
LABEL_5:
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = v21;
  v13 = 32 * v7;
  v14 = 1;
  do
  {
    if (*v8 == a2)
    {
      ++v11;
      v10 = v9;
      v15 = a3;
    }
    else
    {
      v15 = *v8;
    }
    if (v12 >= HIDWORD(v21))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, (uint64_t)v22, v12 + 1, 8);
      v12 = v21;
    }
    *((_QWORD *)v20 + v12) = v15;
    v12 = v21 + 1;
    LODWORD(v21) = v21 + 1;
    v14 &= v15 == a3;
    v8 += 4;
    ++v9;
    v13 -= 32;
  }
  while (v13);
  if ((v14 & 1) != 0)
  {
LABEL_16:
    if (llvm::Constant::isNullValue(a3))
    {
      v17 = (uint64_t)llvm::ConstantAggregateZero::get(*(llvm::ConstantAggregateZero **)this, v16);
    }
    else
    {
      if (*((unsigned __int8 *)a3 + 16) - 11 >= 2)
      {
        v12 = v21;
        goto LABEL_22;
      }
      v17 = llvm::UndefValue::get(*(llvm::UndefValue **)this, v16);
    }
LABEL_20:
    Impl = (llvm::Value **)v17;
    goto LABEL_23;
  }
LABEL_22:
  Impl = llvm::ConstantArray::getImpl(*(llvm::PoisonValue **)this, (llvm::Type *)v20, v12);
  if (!Impl)
  {
    v17 = sub_1C6229D64(***(_QWORD ***)this + 1240, v20, v21, (uint64_t)this, (uint64_t)a2, (uint64_t)a3, v11, v10);
    goto LABEL_20;
  }
LABEL_23:
  if (v20 != v22)
    free(v20);
  return Impl;
}

uint64_t llvm::ConstantVector::handleOperandChangeImpl(llvm::ConstantVector *this, llvm::Value *a2, llvm::Value *a3)
{
  int v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  llvm::ConstantVector *v12;
  uint64_t v13;
  llvm::Value *v14;
  uint64_t Impl;
  void *v17;
  uint64_t v18;
  _QWORD v19[9];

  v19[8] = *MEMORY[0x1E0C80C00];
  v17 = v19;
  v18 = 0x800000000;
  v6 = *((_DWORD *)this + 5);
  v7 = v6 & 0x7FFFFFF;
  if ((v6 & 0x7FFFFFFu) >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, (uint64_t)v19, v7, 8);
    v8 = v18;
    LODWORD(v7) = *((_DWORD *)this + 5) & 0x7FFFFFF;
    if ((_DWORD)v7)
      goto LABEL_3;
LABEL_12:
    v11 = 0;
    v10 = 0;
    goto LABEL_13;
  }
  v8 = 0;
  if (!(_DWORD)v7)
    goto LABEL_12;
LABEL_3:
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = this;
  v13 = v7;
  do
  {
    if (*((llvm::Value **)v12 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)) == a2)
    {
      ++v11;
      v10 = v9;
      v14 = a3;
    }
    else
    {
      v14 = (llvm::Value *)*((_QWORD *)v12 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
    }
    if (v8 >= HIDWORD(v18))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, (uint64_t)v19, v8 + 1, 8);
      v8 = v18;
    }
    *((_QWORD *)v17 + v8) = v14;
    v8 = v18 + 1;
    LODWORD(v18) = v18 + 1;
    ++v9;
    v12 = (llvm::ConstantVector *)((char *)v12 + 32);
  }
  while (v13 != v9);
LABEL_13:
  Impl = (uint64_t)llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v17, (llvm::Type *)v8);
  if (!Impl)
    Impl = sub_1C622A01C(***(_QWORD ***)this + 1288, v17, v18, (uint64_t)this, (uint64_t)a2, (uint64_t)a3, v11, v10);
  if (v17 != v19)
    free(v17);
  return Impl;
}

char *llvm::ConstantExpr::getAsInstruction(llvm::ConstantExpr *this, llvm::Instruction *a2)
{
  int v4;
  uint64_t v5;
  char *v6;
  _QWORD **v7;
  int v8;
  uint64_t v9;
  char *v10;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::GetElementPtrInst *TypeAtIndex;
  uint64_t *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  int v25;
  char *v26;
  llvm::Value *v27;
  uint64_t v28;
  unsigned int v29;
  char *v30;
  llvm::Type **v31;
  uint64_t v32;
  uint64_t v33;
  llvm::Type *v34;
  _DWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t *v44;
  unsigned int *v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t *v62;
  uint64_t v63;
  llvm::Value *v64;
  unsigned int v65;
  unsigned int v66;
  unint64_t v67;
  BOOL v68;
  int v69;
  int v71;
  uint64_t v72;
  char v74;
  char *v75;
  llvm::Value *v76;
  uint64_t v77;
  unsigned int v78;
  char *v79;
  llvm::Type **v80;
  uint64_t v81;
  uint64_t v82;
  llvm::Type *v83;
  char *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  llvm::Type **v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  char **v98;
  char *v99;
  uint64_t v100;
  char **v101;
  char *v102;
  uint64_t v103;
  llvm::ValueSymbolTable *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  llvm::ValueSymbolTable *v109;
  uint64_t v110;
  llvm::ValueSymbolTable *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t **v114;
  uint64_t v115;
  uint64_t ***v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t **v121;
  uint64_t v122;
  uint64_t ***v123;
  uint64_t v124;
  char *v125;
  char *v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  char *v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  _BYTE v135[32];
  __int16 v136;
  char v137;
  void *v138;
  uint64_t v139;
  _QWORD v140[5];

  v140[4] = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)this + 5);
  if ((v4 & 0x40000000) != 0)
  {
    v6 = (char *)*((_QWORD *)this - 1);
    v5 = v4 & 0x7FFFFFF;
  }
  else
  {
    v5 = v4 & 0x7FFFFFF;
    v6 = (char *)this - 32 * v5;
  }
  v138 = v140;
  v139 = 0x400000000;
  sub_1C509DA3C((uint64_t)&v138, v6, &v6[32 * v5]);
  v7 = (_QWORD **)v138;
  v8 = *((unsigned __int16 *)this + 9);
  switch(*((_WORD *)this + 9))
  {
    case 0xC:
      v40 = *(uint64_t **)v138;
      v136 = 257;
      v9 = llvm::UnaryOperator::Create(v8, v40, (uint64_t)v135, (uint64_t)a2);
      goto LABEL_6;
    case 0x22:
      v18 = 24;
      if (*((_BYTE *)this + 16) == 62)
        v18 = 64;
      TypeAtIndex = *(llvm::GetElementPtrInst **)((char *)this + v18);
      v20 = *(uint64_t **)v138;
      v21 = *((_BYTE *)this + 17);
      v134 = v139;
      v22 = v139 - 1;
      v23 = v139;
      v24 = 32 * v139 + 80;
      v25 = v139 & 0x7FFFFFF;
      if ((v21 & 2) == 0)
      {
        v136 = 257;
        v26 = (char *)operator new(v24);
        v10 = &v26[32 * v23];
        *((_DWORD *)v10 + 5) = *((_DWORD *)v10 + 5) & 0x38000000 | v25;
        if ((_DWORD)v23)
        {
          do
          {
            *(_QWORD *)v26 = 0;
            *((_QWORD *)v26 + 1) = 0;
            *((_QWORD *)v26 + 2) = 0;
            *((_QWORD *)v26 + 3) = v10;
            v26 += 32;
          }
          while (v26 != v10);
        }
        sub_1C4774650(TypeAtIndex, v20, (llvm::Value *)(v7 + 1), v22);
        *(_QWORD *)v10 = v28;
        *((_QWORD *)v10 + 1) = 0;
        v29 = *((_DWORD *)v10 + 5) & 0xC0000000 | v25;
        *((_DWORD *)v10 + 4) = 62;
        *((_DWORD *)v10 + 5) = v29;
        *(_OWORD *)(v10 + 24) = 0u;
        v30 = v10 + 24;
        *(_OWORD *)(v10 + 40) = 0u;
        *((_DWORD *)v10 + 14) = 0;
        if (a2)
        {
          v97 = *((_QWORD *)a2 + 5);
          v98 = (char **)((char *)a2 + 24);
          *((_QWORD *)v10 + 5) = v97;
          *(_WORD *)(v97 + 18) &= ~0x8000u;
          if ((v10[23] & 0x10) != 0)
          {
            v108 = *(_QWORD *)(v97 + 56);
            if (v108)
            {
              v109 = *(llvm::ValueSymbolTable **)(v108 + 104);
              if (v109)
                llvm::ValueSymbolTable::reinsertValue(v109, (llvm::Value *)v10);
            }
          }
          v99 = *v98;
          *((_QWORD *)v10 + 3) = *v98;
          *((_QWORD *)v10 + 4) = v98;
          *((_QWORD *)v99 + 1) = v30;
          *v98 = v30;
        }
        *((_QWORD *)v10 + 8) = TypeAtIndex;
        if (v22)
        {
          v31 = (llvm::Type **)(v7 + 2);
          v32 = v134;
          v33 = 8 * v134 - 16;
          do
          {
            if (!v33)
              break;
            v34 = *v31++;
            TypeAtIndex = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(TypeAtIndex, v34, v27);
            v33 -= 8;
          }
          while (TypeAtIndex);
        }
        else
        {
          v32 = v134;
        }
        *((_QWORD *)v10 + 9) = TypeAtIndex;
        v112 = *((_DWORD *)v10 + 5) & 0x7FFFFFF;
        v113 = -v112;
        v114 = (uint64_t **)&v10[-32 * v112];
        if (*v114)
        {
          v126 = &v10[32 * v113];
          v128 = (_QWORD *)*((_QWORD *)v126 + 2);
          v127 = v126 + 16;
          *v128 = *(v127 - 1);
          v129 = *(v127 - 1);
          if (v129)
            *(_QWORD *)(v129 + 16) = *v127;
        }
        *v114 = v20;
        if (v20)
        {
          v117 = v20[1];
          v116 = (uint64_t ***)(v20 + 1);
          v115 = v117;
          v118 = &v10[32 * v113];
          *((_QWORD *)v118 + 1) = v117;
          if (v117)
            *(_QWORD *)(v115 + 16) = v118 + 8;
          *((_QWORD *)v118 + 2) = v116;
          *v116 = v114;
        }
        sub_1C5382FD4((uint64_t)&v137, (uint64_t *)v7 + 1, (uint64_t *)&v7[v32], (uint64_t)&v10[-32 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF) + 32]);
        goto LABEL_96;
      }
      v136 = 257;
      v75 = (char *)operator new(v24);
      v10 = &v75[32 * v23];
      *((_DWORD *)v10 + 5) = *((_DWORD *)v10 + 5) & 0x38000000 | v25;
      if ((_DWORD)v23)
      {
        do
        {
          *(_QWORD *)v75 = 0;
          *((_QWORD *)v75 + 1) = 0;
          *((_QWORD *)v75 + 2) = 0;
          *((_QWORD *)v75 + 3) = v10;
          v75 += 32;
        }
        while (v75 != v10);
      }
      sub_1C4774650(TypeAtIndex, v20, (llvm::Value *)(v7 + 1), v22);
      *(_QWORD *)v10 = v77;
      *((_QWORD *)v10 + 1) = 0;
      v78 = *((_DWORD *)v10 + 5) & 0xC0000000 | v25;
      *((_DWORD *)v10 + 4) = 62;
      *((_DWORD *)v10 + 5) = v78;
      *(_OWORD *)(v10 + 24) = 0u;
      v79 = v10 + 24;
      *(_OWORD *)(v10 + 40) = 0u;
      *((_DWORD *)v10 + 14) = 0;
      if (a2)
      {
        v100 = *((_QWORD *)a2 + 5);
        v101 = (char **)((char *)a2 + 24);
        *((_QWORD *)v10 + 5) = v100;
        *(_WORD *)(v100 + 18) &= ~0x8000u;
        if ((v10[23] & 0x10) != 0)
        {
          v110 = *(_QWORD *)(v100 + 56);
          if (v110)
          {
            v111 = *(llvm::ValueSymbolTable **)(v110 + 104);
            if (v111)
              llvm::ValueSymbolTable::reinsertValue(v111, (llvm::Value *)v10);
          }
        }
        v102 = *v101;
        *((_QWORD *)v10 + 3) = *v101;
        *((_QWORD *)v10 + 4) = v101;
        *((_QWORD *)v102 + 1) = v79;
        *v101 = v79;
      }
      *((_QWORD *)v10 + 8) = TypeAtIndex;
      if (v22)
      {
        v80 = (llvm::Type **)(v7 + 2);
        v81 = v134;
        v82 = 8 * v134 - 16;
        do
        {
          if (!v82)
            break;
          v83 = *v80++;
          TypeAtIndex = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(TypeAtIndex, v83, v76);
          v82 -= 8;
        }
        while (TypeAtIndex);
      }
      else
      {
        v81 = v134;
      }
      *((_QWORD *)v10 + 9) = TypeAtIndex;
      v119 = *((_DWORD *)v10 + 5) & 0x7FFFFFF;
      v120 = -v119;
      v121 = (uint64_t **)&v10[-32 * v119];
      if (*v121)
      {
        v130 = &v10[32 * v120];
        v132 = (_QWORD *)*((_QWORD *)v130 + 2);
        v131 = v130 + 16;
        *v132 = *(v131 - 1);
        v133 = *(v131 - 1);
        if (v133)
          *(_QWORD *)(v133 + 16) = *v131;
      }
      *v121 = v20;
      if (v20)
      {
        v124 = v20[1];
        v123 = (uint64_t ***)(v20 + 1);
        v122 = v124;
        v125 = &v10[32 * v120];
        *((_QWORD *)v125 + 1) = v124;
        if (v124)
          *(_QWORD *)(v122 + 16) = v125 + 8;
        *((_QWORD *)v125 + 2) = v123;
        *v123 = v121;
      }
      sub_1C5382FD4((uint64_t)&v137, (uint64_t *)v7 + 1, (uint64_t *)&v7[v81], (uint64_t)&v10[-32 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF) + 32]);
      llvm::Value::setName((uint64_t ***)v10, (uint64_t)v135);
      v74 = v10[17] | 2;
LABEL_104:
      v10[17] = v74;
      goto LABEL_7;
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
      v136 = 257;
      llvm::CastInst::Create(v8);
      goto LABEL_6;
    case 0x35:
    case 0x36:
      v12 = *((_WORD *)this + 12);
      v13 = *(_QWORD *)v138;
      v14 = *((_QWORD *)v138 + 1);
      v136 = 257;
      v9 = (uint64_t)llvm::CmpInst::Create(v8, v12, v13, v14, (uint64_t)v135, (uint64_t)a2);
      goto LABEL_6;
    case 0x39:
      v15 = *(_QWORD *)v138;
      v16 = (uint64_t *)*((_QWORD *)v138 + 1);
      v17 = *((_QWORD *)v138 + 2);
      v136 = 257;
      v9 = (uint64_t)sub_1C4FC8748(v15, v16, v17, (uint64_t)v135, (uint64_t)a2, 0);
      goto LABEL_6;
    case 0x3D:
      v41 = *(uint64_t **)v138;
      v42 = *((_QWORD *)v138 + 1);
      v136 = 257;
      v43 = operator new(0x80uLL);
      v43[21] = v43[21] & 0x38000000 | 2;
      v10 = (char *)(v43 + 16);
      *(_QWORD *)v43 = 0;
      *((_QWORD *)v43 + 1) = 0;
      *((_QWORD *)v43 + 2) = 0;
      *((_QWORD *)v43 + 3) = v43 + 16;
      *((_QWORD *)v43 + 4) = 0;
      *((_QWORD *)v43 + 5) = 0;
      *((_QWORD *)v43 + 6) = 0;
      *((_QWORD *)v43 + 7) = v43 + 16;
      llvm::ExtractElementInst::ExtractElementInst((uint64_t)(v43 + 16), v41, v42, (uint64_t)v135, (uint64_t)a2);
      goto LABEL_7;
    case 0x3E:
      v56 = *(uint64_t **)v138;
      v57 = *((_QWORD *)v138 + 1);
      v58 = *((_QWORD *)v138 + 2);
      v136 = 257;
      v59 = operator new(0xA0uLL);
      v60 = 0;
      v10 = (char *)(v59 + 24);
      v59[29] = v59[29] & 0x38000000 | 3;
      do
      {
        v61 = &v59[v60];
        *v61 = 0;
        v61[1] = 0;
        v61[2] = 0;
        v61[3] = v10;
        v60 += 8;
      }
      while (v60 != 24);
      llvm::InsertElementInst::InsertElementInst((uint64_t)(v59 + 24), v56, v57, v58, (uint64_t)v135, (uint64_t)a2);
      goto LABEL_7;
    case 0x3F:
      v35 = operator new(0xA8uLL);
      v35[21] = v35[21] & 0x38000000 | 2;
      v10 = (char *)(v35 + 16);
      *(_QWORD *)v35 = 0;
      *((_QWORD *)v35 + 1) = 0;
      *((_QWORD *)v35 + 2) = 0;
      *((_QWORD *)v35 + 3) = v35 + 16;
      *((_QWORD *)v35 + 4) = 0;
      *((_QWORD *)v35 + 5) = 0;
      *((_QWORD *)v35 + 6) = 0;
      *((_QWORD *)v35 + 7) = v35 + 16;
      v36 = *v7;
      v37 = (uint64_t)v7[1];
      v38 = (void *)*((_QWORD *)this + 3);
      v39 = *((unsigned int *)this + 8);
      v136 = 257;
      llvm::ShuffleVectorInst::ShuffleVectorInst((_BYTE **)v35 + 8, v36, v37, v38, v39, (uint64_t)v135, (uint64_t)a2);
      goto LABEL_7;
    case 0x40:
      v44 = *(uint64_t **)v138;
      v45 = (unsigned int *)*((_QWORD *)this + 3);
      v46 = *((unsigned int *)this + 8);
      v136 = 257;
      v47 = (char *)operator new(0x80uLL);
      v48 = v47;
      v10 = v47 + 32;
      *((_DWORD *)v47 + 13) = *((_DWORD *)v47 + 13) & 0x38000000 | 1;
      *(_QWORD *)v47 = 0;
      *((_QWORD *)v47 + 1) = 0;
      *((_QWORD *)v47 + 2) = 0;
      *((_QWORD *)v47 + 3) = v47 + 32;
      v49 = *v44;
      if (!(_DWORD)v46)
      {
        v54 = *v44;
        goto LABEL_60;
      }
      v50 = 4 * v46;
      v51 = v45;
      break;
    case 0x41:
      v90 = *(llvm::Type ***)v138;
      v91 = *((_QWORD *)v138 + 1);
      v92 = (void *)*((_QWORD *)this + 3);
      v93 = *((unsigned int *)this + 8);
      v136 = 257;
      v9 = (uint64_t)sub_1C61BD4C4(v90, v91, v92, v93, (uint64_t)v135, a2);
LABEL_6:
      v10 = (char *)v9;
      goto LABEL_7;
    default:
      v62 = *(uint64_t **)v138;
      v63 = *((_QWORD *)v138 + 1);
      v136 = 257;
      v64 = llvm::BinaryOperator::Create(v8, v62, v63, (uint64_t)v135, (uint64_t)a2);
      v10 = (char *)v64;
      v65 = *((unsigned __int8 *)v64 + 16);
      HIDWORD(v67) = v65 - 41;
      LODWORD(v67) = v65 - 41;
      v66 = v67 >> 1;
      v68 = v66 > 6;
      v69 = (1 << v66) & 0x47;
      if (!v68 && v69 != 0)
      {
        v71 = *((_BYTE *)v64 + 17) & 0xFD | (2 * ((*((unsigned __int8 *)this + 17) >> 1) & 1));
        *((_BYTE *)v64 + 17) = v71;
        *((_BYTE *)v64 + 17) = v71 & 0xFB | *((_BYTE *)this + 17) & 4;
      }
      v68 = v65 > 0x37;
      v72 = (1 << v65) & 0xC1800000000000;
      if (v68 || v72 == 0)
        goto LABEL_7;
      v74 = *((_BYTE *)v64 + 17) & 0xFD | *((_BYTE *)this + 17) & 2;
      goto LABEL_104;
  }
  while (1)
  {
    v52 = *v51;
    v53 = *(unsigned __int8 *)(v49 + 8);
    if (!v49 || v53 != 17)
      break;
    if (*(_QWORD *)(v49 + 32) <= v52)
      goto LABEL_88;
    v55 = (uint64_t *)(v49 + 24);
LABEL_34:
    v49 = *v55;
    ++v51;
    v54 = v49;
    v50 -= 4;
    if (!v50)
      goto LABEL_60;
  }
  v54 = 0;
  if (!v49 || v53 != 16)
    goto LABEL_60;
  if (v52 < *(_DWORD *)(v49 + 12))
  {
    v55 = (uint64_t *)(*(_QWORD *)(v49 + 16) + 8 * v52);
    goto LABEL_34;
  }
LABEL_88:
  v54 = 0;
LABEL_60:
  *(_OWORD *)(v47 + 56) = 0u;
  v84 = v47 + 56;
  *((_QWORD *)v47 + 4) = v54;
  *((_QWORD *)v47 + 5) = 0;
  *((_QWORD *)v47 + 6) = 0x10000005CLL;
  *(_OWORD *)(v47 + 72) = 0u;
  *((_DWORD *)v47 + 22) = 0;
  if (a2)
  {
    v94 = *((_QWORD *)a2 + 5);
    v95 = (uint64_t *)((char *)a2 + 24);
    *((_QWORD *)v47 + 9) = v94;
    *(_WORD *)(v94 + 18) &= ~0x8000u;
    if ((v47[55] & 0x10) != 0
      && (v103 = *(_QWORD *)(v94 + 56)) != 0
      && (v104 = *(llvm::ValueSymbolTable **)(v103 + 104)) != 0)
    {
      llvm::ValueSymbolTable::reinsertValue(v104, (llvm::Value *)v10);
      v105 = *(_QWORD *)v48;
      v106 = *v95;
      *((_QWORD *)v48 + 7) = *v95;
      *((_QWORD *)v48 + 8) = v95;
      *(_QWORD *)(v106 + 8) = v84;
      *v95 = (uint64_t)v84;
      if (v105)
      {
        **((_QWORD **)v48 + 2) = *((_QWORD *)v48 + 1);
        v107 = *((_QWORD *)v48 + 1);
        if (v107)
          *(_QWORD *)(v107 + 16) = *((_QWORD *)v48 + 2);
      }
    }
    else
    {
      v96 = *v95;
      *((_QWORD *)v48 + 7) = *v95;
      *((_QWORD *)v48 + 8) = v95;
      *(_QWORD *)(v96 + 8) = v84;
      *v95 = (uint64_t)v84;
    }
  }
  *(_QWORD *)v48 = v44;
  v87 = v44[1];
  v86 = v44 + 1;
  v85 = v87;
  *((_QWORD *)v48 + 1) = v87;
  if (v87)
    *(_QWORD *)(v85 + 16) = v48 + 8;
  *((_QWORD *)v48 + 2) = v86;
  *v86 = v48;
  *((_QWORD *)v48 + 12) = v48 + 112;
  *((_QWORD *)v48 + 13) = 0x400000000;
  if (v46 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v48 + 96), (uint64_t)(v48 + 112), v46, 4);
    v88 = *((unsigned int *)v48 + 26);
LABEL_66:
    memcpy((void *)(*((_QWORD *)v48 + 12) + 4 * v88), v45, 4 * v46);
    v89 = *((_DWORD *)v48 + 26);
  }
  else
  {
    if ((_DWORD)v46)
    {
      v88 = 0;
      goto LABEL_66;
    }
    v89 = 0;
  }
  *((_DWORD *)v48 + 26) = v89 + v46;
LABEL_96:
  llvm::Value::setName((uint64_t ***)v10, (uint64_t)v135);
LABEL_7:
  if (v138 != v140)
    free(v138);
  return v10;
}

void sub_1C5381EF4(llvm::detail::DoubleAPFloat *this, int a2)
{
  uint64_t v2;
  char v3;
  int v4;
  _QWORD *v5;

  v2 = *((_QWORD *)this + 1);
  if ((_UNKNOWN *)v2 == &unk_1C866F1C0)
  {
    llvm::detail::DoubleAPFloat::makeZero((llvm::detail::DoubleAPFloat *)((char *)this + 8), a2);
  }
  else
  {
    if (a2)
      v3 = 11;
    else
      v3 = 3;
    *((_BYTE *)this + 28) = *((_BYTE *)this + 28) & 0xF0 | v3;
    v4 = *(_DWORD *)(v2 + 8);
    *((_DWORD *)this + 6) = *(_DWORD *)(v2 + 4) - 1;
    if ((v4 - 64) < 0xFFFFFF80)
    {
      v5 = (_QWORD *)*((_QWORD *)this + 2);
      *v5 = 0;
      bzero(v5 + 1, 8 * (((v4 + 64) >> 6) - 2) + 8);
    }
    else
    {
      *((_QWORD *)this + 2) = 0;
    }
  }
}

llvm::detail::IEEEFloat *sub_1C5381F74(llvm::detail::IEEEFloat *a1, void *a2, const llvm::APInt **a3)
{
  if (a2 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::DoubleAPFloat(a1, (uint64_t)&unk_1C866F1C0, (uint64_t)a3);
  else
    llvm::detail::IEEEFloat::initFromAPInt(a1, a2, a3);
  return a1;
}

BOOL sub_1C5381FC0(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 33) & 0x1C) != 0;
}

BOOL sub_1C5381FD0(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 32) & 0x300) == 256;
}

BOOL sub_1C5381FE4(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 16) - 11 < 2;
}

BOOL sub_1C5381FF8(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 16) == 12;
}

uint64_t sub_1C5382008(uint64_t *a1, llvm *this, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  const void *v11;
  int i;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  const void *v18;
  int v19;
  BOOL v20;
  uint64_t result;
  int v22;

  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    v14 = 0;
    result = 0;
    goto LABEL_19;
  }
  v6 = *a1;
  v7 = llvm::hash_value(this, this);
  v8 = 0;
  v9 = v4 - 1;
  v10 = *((unsigned int *)this + 2);
  v11 = *(const void **)this;
  for (i = 1; ; ++i)
  {
    v13 = v7 & v9;
    v14 = v6 + 24 * (v7 & v9);
    v15 = *(_DWORD *)(v14 + 8);
    if ((_DWORD)v10 == v15)
    {
      if (v10 > 0x40)
      {
        v22 = i;
        v16 = v6;
        v17 = a3;
        v18 = v11;
        v19 = memcmp(v11, *(const void **)v14, ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8);
        v11 = v18;
        a3 = v17;
        v6 = v16;
        i = v22;
        if (!v19)
        {
LABEL_15:
          result = 1;
          goto LABEL_19;
        }
      }
      else if (v11 == *(const void **)v14)
      {
        goto LABEL_15;
      }
    }
    if (v15)
    {
      v20 = 0;
      goto LABEL_10;
    }
    if (!*(_QWORD *)v14)
      break;
    v20 = *(_QWORD *)v14 == 1;
LABEL_10:
    if (v20 && v8 == 0)
      v8 = v14;
    v7 = v13 + i;
  }
  result = 0;
  if (v8)
    v14 = v8;
LABEL_19:
  *a3 = v14;
  return result;
}

uint64_t sub_1C5382148(uint64_t a1, uint64_t a2, llvm *a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  uint64_t v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_8;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_8:
    sub_1C53821F8(a1, v7);
    v9 = 0;
    sub_1C5382008((uint64_t *)a1, a3, &v9);
    a4 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)(a4 + 8) || *(_QWORD *)a4)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

char *sub_1C53821F8(uint64_t a1, int a2)
{
  unsigned int v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C53822C4(a1, v4, &v4[3 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    v12 = result + 8;
    do
    {
      *v12 = 0;
      *((_QWORD *)v12 - 1) = 0;
      v12 += 6;
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

void sub_1C53822C4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  llvm::ValueHandleBase *v12;
  _QWORD *v13;
  uint64_t v14;

  *(_QWORD *)(a1 + 8) = 0;
  v5 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v5)
  {
    v6 = 24 * v5;
    v7 = (_DWORD *)(*(_QWORD *)a1 + 8);
    do
    {
      *v7 = 0;
      *((_QWORD *)v7 - 1) = 0;
      v7 += 6;
      v6 -= 24;
    }
    while (v6);
  }
  if (a2 != a3)
  {
    v8 = a2 + 2;
    do
    {
      v9 = v8 - 2;
      if (*((_DWORD *)v8 - 2) || *v9 >= 2uLL)
      {
        v14 = 0;
        sub_1C5382008((uint64_t *)a1, (llvm *)(v8 - 2), &v14);
        v10 = v14;
        if (*(_DWORD *)(v14 + 8) >= 0x41u && *(_QWORD *)v14)
          MEMORY[0x1CAA32F9C](*(_QWORD *)v14, 0x1000C8000313F17);
        *(_QWORD *)v10 = *(v8 - 2);
        *(_DWORD *)(v10 + 8) = *((_DWORD *)v8 - 2);
        *((_DWORD *)v8 - 2) = 0;
        v11 = *v8;
        *v8 = 0;
        *(_QWORD *)(v10 + 16) = v11;
        ++*(_DWORD *)(a1 + 8);
        v12 = (llvm::ValueHandleBase *)*v8;
        *v8 = 0;
        if (v12)
        {
          sub_1C5382408((int)v8, v12);
          if (*((_DWORD *)v8 - 2) >= 0x41u)
          {
            if (*v9)
              MEMORY[0x1CAA32F9C](*v9, 0x1000C8000313F17);
          }
        }
      }
      v13 = v8 + 1;
      v8 += 3;
    }
    while (v13 != a3);
  }
}

void sub_1C5382408(int a1, llvm::ValueHandleBase *this)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  char *v7;
  _QWORD **v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int32x2_t *v18;
  int32x2_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::ValueHandleBase *v23;
  int v24;
  int v25;
  uint64_t v26;
  int32x2_t **v27;
  int32x2_t *v28;
  __int32 v29;
  int32x2_t v30;
  __int32 v31;
  unsigned int v32;
  uint64_t v33;
  llvm::ValueHandleBase *v34;
  int v35;
  unsigned int v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unsigned __int8 *v41;

  if (!this)
    return;
  if (*((_DWORD *)this + 8) >= 0x41u)
  {
    v3 = *((_QWORD *)this + 3);
    if (v3)
      MEMORY[0x1CAA32F9C](v3, 0x1000C8000313F17);
  }
  if ((*((_BYTE *)this + 17) & 1) != 0)
    llvm::ValueHandleBase::ValueIsDeleted(this, this);
  v4 = *((_DWORD *)this + 5);
  if ((v4 & 0x8000000) != 0)
  {
    v18 = ***(int32x2_t ****)this;
    v19 = v18[49];
    v20 = v18[51].u32[0];
    if ((_DWORD)v20)
    {
      LODWORD(v21) = (v20 - 1) & ((this >> 4) ^ (this >> 9));
      v22 = *(_QWORD *)&v19 + 16 * v21;
      v23 = *(llvm::ValueHandleBase **)v22;
      if (*(llvm::ValueHandleBase **)v22 == this)
      {
LABEL_33:
        if (v22 != *(_QWORD *)&v19 + 16 * v20)
        {
          v26 = *(_QWORD *)(v22 + 8);
          *(_QWORD *)v22 = -8192;
          v18[50] = vadd_s32(v18[50], (int32x2_t)0x1FFFFFFFFLL);
          llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v26 + 8), 0);
          if (v26)
          {
            if ((*(_BYTE *)(v26 + 24) & 1) == 0)
              MEMORY[0x1CAA32FB4](*(_QWORD *)(v26 + 32), 8);
            MEMORY[0x1CAA32FC0](v26, 0x1020C4072C728BCLL);
          }
        }
        v4 = *((_DWORD *)this + 5);
        if ((v4 & 0x20000000) == 0)
          goto LABEL_9;
LABEL_39:
        v27 = **(int32x2_t ****)this;
        v28 = *v27;
        v29 = (*v27)[312].i32[0];
        if (v29)
        {
          v30 = v28[310];
          v31 = v29 - 1;
          v32 = v31 & ((this >> 4) ^ (this >> 9));
          v33 = *(_QWORD *)&v30 + 40 * v32;
          v34 = *(llvm::ValueHandleBase **)v33;
          if (*(llvm::ValueHandleBase **)v33 == this)
          {
LABEL_44:
            v37 = *(char **)(v33 + 8);
            v38 = *(unsigned int *)(v33 + 16);
            if ((_DWORD)v38)
            {
              v39 = v37 - 8;
              v40 = 16 * v38;
              do
              {
                v41 = *(unsigned __int8 **)&v39[v40];
                if (v41)
                  llvm::MetadataTracking::untrack((uint64_t)&v39[v40], v41);
                v40 -= 16;
              }
              while (v40);
              v37 = *(char **)(v33 + 8);
            }
            if (v37 != (char *)(v33 + 24))
              free(v37);
            *(_QWORD *)v33 = -8192;
            v28[311] = vadd_s32(v28[311], (int32x2_t)0x1FFFFFFFFLL);
            v4 = *((_DWORD *)this + 5);
          }
          else
          {
            v35 = 1;
            while (v34 != (llvm::ValueHandleBase *)-4096)
            {
              v36 = v32 + v35++;
              v32 = v36 & v31;
              v33 = *(_QWORD *)&v30 + 40 * v32;
              v34 = *(llvm::ValueHandleBase **)v33;
              if (*(llvm::ValueHandleBase **)v33 == this)
                goto LABEL_44;
            }
          }
        }
        *((_DWORD *)this + 5) = v4 & 0xDFFFFFFF;
        goto LABEL_9;
      }
      v24 = 1;
      while (v23 != (llvm::ValueHandleBase *)-4096)
      {
        v25 = v21 + v24++;
        v21 = v25 & (v20 - 1);
        v23 = *(llvm::ValueHandleBase **)(*(_QWORD *)&v19 + 16 * v21);
        if (v23 == this)
        {
          v22 = *(_QWORD *)&v19 + 16 * v21;
          goto LABEL_33;
        }
      }
    }
    v22 = *(_QWORD *)&v19 + 16 * v20;
    goto LABEL_33;
  }
  if ((v4 & 0x20000000) != 0)
    goto LABEL_39;
LABEL_9:
  llvm::Value::destroyValueName((uint64_t)this);
  v5 = *((_DWORD *)this + 5);
  if ((v5 & 0x40000000) != 0)
  {
    v13 = (char *)*((_QWORD *)this - 1);
    v12 = (char *)this - 8;
    v11 = v13;
    v14 = v5 & 0x7FFFFFF;
    if ((_DWORD)v14)
    {
      v15 = 32 * v14;
      do
      {
        v16 = &v11[v15];
        if (*(_QWORD *)&v11[v15 - 32])
        {
          **((_QWORD **)v16 - 2) = *((_QWORD *)v16 - 3);
          v17 = *((_QWORD *)v16 - 3);
          if (v17)
            *(_QWORD *)(v17 + 16) = *((_QWORD *)v16 - 2);
        }
        v15 -= 32;
      }
      while (v15);
    }
    operator delete(v11);
    v7 = v12;
  }
  else
  {
    v6 = v5 & 0x7FFFFFF;
    v7 = (char *)this - 32 * v6;
    if ((_DWORD)v6)
    {
      v8 = (_QWORD **)((char *)this - 16);
      v9 = -32 * v6;
      do
      {
        if (*(v8 - 2))
        {
          **v8 = *(v8 - 1);
          v10 = (uint64_t)*(v8 - 1);
          if (v10)
            *(_QWORD *)(v10 + 16) = *v8;
        }
        v8 -= 4;
        v9 += 32;
      }
      while (v9);
    }
    if (v5 < 0)
      v7 = &v7[-*((_QWORD *)v7 - 1) - 8];
  }
  operator delete(v7);
}

uint64_t sub_1C53826DC(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  int v4;
  uint64_t v6;
  const llvm::detail::DoubleAPFloat *v7;
  llvm::detail *v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[8];
  _DWORD *v20;
  uint64_t v21;
  int v22;
  char v23;
  _BYTE v24[8];
  _DWORD *v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    result = 0;
    *a3 = 0;
    return result;
  }
  v6 = *a1;
  v28 = 2;
  v27 = -1;
  v25 = &unk_1C866F210;
  v26 = 1;
  llvm::detail::IEEEFloat::normalize((llvm::APInt *)&v25, 1, 0);
  v23 = 2;
  v22 = -1;
  v20 = &unk_1C866F210;
  v21 = 2;
  llvm::detail::IEEEFloat::normalize((llvm::APInt *)&v20, 1, 0);
  v8 = (llvm::detail *)(a2 + 8);
  if (*(_UNKNOWN **)(a2 + 8) == &unk_1C866F1C0)
    v9 = llvm::detail::hash_value(v8, v7);
  else
    v9 = llvm::detail::hash_value(v8, v7);
  v10 = v4 - 1;
  v11 = v10 & v9;
  v12 = v6 + 40 * (v10 & v9);
  if ((sub_1C47ECB98(a2, v12) & 1) != 0)
  {
    result = 1;
  }
  else
  {
    v14 = 0;
    v15 = 1;
    while (!sub_1C47ECB98(v12, (uint64_t)v24))
    {
      if ((sub_1C47ECB98(v12, (uint64_t)v19) & (v14 == 0)) != 0)
        v14 = v12;
      v11 = (v11 + v15) & v10;
      v12 = v6 + 40 * v11;
      v16 = sub_1C47ECB98(a2, v12);
      result = 1;
      ++v15;
      if (v16)
        goto LABEL_6;
    }
    result = 0;
    if (v14)
      v12 = v14;
  }
LABEL_6:
  *a3 = v12;
  if (v20 == (_DWORD *)&unk_1C866F1C0)
  {
    v17 = result;
    sub_1C4773C74(&v21);
LABEL_23:
    result = v17;
    goto LABEL_8;
  }
  if ((v20[2] - 64) <= 0xFFFFFF7F && v21)
  {
    v17 = result;
    MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
    goto LABEL_23;
  }
LABEL_8:
  if (v25 == (_DWORD *)&unk_1C866F1C0)
  {
    v18 = result;
    sub_1C4773C74(&v26);
    return v18;
  }
  if ((v25[2] - 64) <= 0xFFFFFF7F && v26)
  {
    v18 = result;
    MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
    return v18;
  }
  return result;
}

uint64_t sub_1C5382950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C5382AC4(a1, v7);
  v10 = 0;
  sub_1C53826DC((uint64_t *)a1, a3, &v10);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  v14 = 2;
  v13 = -1;
  v11 = &unk_1C866F210;
  v12 = 1;
  llvm::detail::IEEEFloat::normalize((llvm::APInt *)&v11, 1, 0);
  if ((sub_1C47ECB98(a4, (uint64_t)&v10) & 1) == 0)
    --*(_DWORD *)(a1 + 12);
  if (v11 == (_DWORD *)&unk_1C866F1C0)
  {
    sub_1C4773C74(&v12);
  }
  else if ((v11[2] - 64) <= 0xFFFFFF7F && v12)
  {
    MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
  }
  return a4;
}

uint64_t *sub_1C5382AC4(uint64_t a1, int a2)
{
  unsigned int v3;
  llvm::Value **v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(llvm::Value ***)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = operator new(40 * v8, (std::align_val_t)8uLL);
  if (v4)
  {
    sub_1C5382D8C(a1, v4, &v4[5 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  return sub_1C5382B68((uint64_t *)a1);
}

uint64_t *sub_1C5382B68(uint64_t *a1)
{
  uint64_t *result;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  char v7;
  char v8;
  int v9;
  _BOOL4 v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  a1[1] = 0;
  v23 = 2;
  v22 = -1;
  v20 = &unk_1C866F210;
  v21 = 1;
  result = (uint64_t *)llvm::detail::IEEEFloat::normalize((llvm::APInt *)&v20, 1, 0);
  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v4 + 40 * v3;
    do
    {
      result = (uint64_t *)(v4 + 8);
      v6 = v20;
      if (v20 == (_DWORD *)&unk_1C866F1C0)
      {
        v18 = v5;
        result = (uint64_t *)llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)result, (const llvm::detail::DoubleAPFloat *)&v20);
        v5 = v18;
      }
      else
      {
        *result = (uint64_t)v20;
        if ((v6[2] + 64) >= 0x80)
        {
          v19 = v5;
          result = (uint64_t *)operator new[]();
          v5 = v19;
          *(_QWORD *)(v4 + 16) = result;
        }
        v7 = *(_BYTE *)(v4 + 28) & 0xF7 | v23 & 8;
        *(_BYTE *)(v4 + 28) = v7;
        v8 = v23;
        v9 = v23 & 7;
        *(_BYTE *)(v4 + 28) = v7 & 0xF8 | v23 & 7;
        *(_DWORD *)(v4 + 24) = v22;
        v11 = (v8 & 6) != 0 && v9 != 3;
        if (v9 == 1 || v11)
        {
          v13 = *(unsigned int *)(*(_QWORD *)(v4 + 8) + 8);
          v14 = (_QWORD *)(v4 + 16);
          if ((v13 - 64) <= 0xFFFFFF7F)
            v14 = (_QWORD *)*v14;
          if ((v20[2] - 64) >= 0xFFFFFF80)
            v15 = &v21;
          else
            v15 = (uint64_t *)v21;
          if (v13 <= 0xFFFFFFBF)
          {
            v16 = (unint64_t)(v13 + 64) >> 6;
            do
            {
              v17 = *v15++;
              *v14++ = v17;
              --v16;
            }
            while (v16);
          }
        }
      }
      v4 += 40;
    }
    while (v4 != v5);
  }
  if (v20 == (_DWORD *)&unk_1C866F1C0)
    return sub_1C4773C74(&v21);
  if ((v20[2] - 64) <= 0xFFFFFF7F)
  {
    result = (uint64_t *)v21;
    if (v21)
      return (uint64_t *)MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
  }
  return result;
}

void sub_1C5382D8C(uint64_t a1, llvm::Value **a2, llvm::Value **a3)
{
  llvm::Value **v6;
  uint64_t v7;
  llvm::Value *v8;
  uint64_t v9;
  llvm::Value **v10;
  uint64_t v11;
  uint64_t v12;
  char v13[8];
  _DWORD *v14;
  uint64_t v15;
  int v16;
  char v17;
  char v18[8];
  _DWORD *v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  sub_1C5382B68((uint64_t *)a1);
  v22 = 2;
  v21 = -1;
  v19 = &unk_1C866F210;
  v20 = 1;
  llvm::detail::IEEEFloat::normalize((llvm::APInt *)&v19, 1, 0);
  v17 = 2;
  v16 = -1;
  v14 = &unk_1C866F210;
  v15 = 2;
  llvm::detail::IEEEFloat::normalize((llvm::APInt *)&v14, 1, 0);
  if (a2 != a3)
  {
    v6 = a2 + 4;
    do
    {
      if ((sub_1C47ECB98((uint64_t)(v6 - 4), (uint64_t)v18) & 1) == 0
        && (sub_1C47ECB98((uint64_t)(v6 - 4), (uint64_t)v13) & 1) == 0)
      {
        v12 = 0;
        sub_1C53826DC((uint64_t *)a1, (uint64_t)(v6 - 4), &v12);
        v7 = v12;
        sub_1C48552C0(v12 + 8, (uint64_t)(v6 - 3));
        v8 = *v6;
        *v6 = 0;
        *(_QWORD *)(v7 + 32) = v8;
        ++*(_DWORD *)(a1 + 8);
        sub_1C5379324(v6, 0);
      }
      v9 = (uint64_t)*(v6 - 3);
      if ((_UNKNOWN *)v9 == &unk_1C866F1C0)
      {
        sub_1C4773C74((uint64_t *)v6 - 2);
      }
      else if ((*(_DWORD *)(v9 + 8) - 64) <= 0xFFFFFF7F)
      {
        v11 = (uint64_t)*(v6 - 2);
        if (v11)
          MEMORY[0x1CAA32F9C](v11, 0x1000C8000313F17);
      }
      v10 = v6 + 1;
      v6 += 5;
    }
    while (v10 != a3);
  }
  if (v14 == (_DWORD *)&unk_1C866F1C0)
  {
    sub_1C4773C74(&v15);
  }
  else if ((v14[2] - 64) <= 0xFFFFFF7F && v15)
  {
    MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
  }
  if (v19 == (_DWORD *)&unk_1C866F1C0)
  {
    sub_1C4773C74(&v20);
  }
  else if ((v19[2] - 64) <= 0xFFFFFF7F)
  {
    if (v20)
      MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
  }
}

uint64_t *sub_1C5382FD4(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *result;
  _QWORD **v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  if (a2 == a3)
    return a2;
  result = a3;
  v5 = (_QWORD **)(a4 + 8);
  do
  {
    v6 = v5 - 1;
    v7 = *a2;
    if (*(v5 - 1))
    {
      *v5[1] = *v5;
      if (*v5)
        (*v5)[2] = v5[1];
    }
    *v6 = v7;
    if (v7)
    {
      v10 = *(_QWORD **)(v7 + 8);
      v8 = (_QWORD *)(v7 + 8);
      v9 = v10;
      *v5 = v10;
      if (v10)
        v9[2] = v5;
      v5[1] = v8;
      *v8 = v6;
    }
    ++a2;
    v5 += 4;
  }
  while (a2 != a3);
  return result;
}

unint64_t sub_1C5383050(uint64_t *a1, int *a2)
{
  int *v2;
  uint64_t *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v7;
  unint64_t v8;
  _OWORD v11[4];
  _OWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = a2;
  v3 = a1;
  v15 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  v4 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v5 = &unk_1ED7EA000;
  if ((v4 & 1) == 0)
  {
    v7 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v5 = &unk_1ED7EA000;
    v3 = a1;
    v2 = a2;
    if (v7)
    {
      v8 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v8 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v8;
      __cxa_guard_release(&qword_1ED7EAC88);
      v5 = (_QWORD *)&unk_1ED7EA000;
      v3 = a1;
      v2 = a2;
    }
  }
  v14 = v5[400];
  return sub_1C5383144((char *)v11, 0, v11, (char *)v12, v3, v2);
}

unint64_t sub_1C5383144(char *a1, uint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, int *a6)
{
  _QWORD *v9;
  char *v10;
  uint64_t v12;
  int v13[2];

  v12 = a2;
  v9 = sub_1C50FDB34(a1, &v12, a3, (unint64_t)a4, *a5);
  *(_QWORD *)v13 = v12;
  v10 = (char *)sub_1C4ED49B0(a1, (uint64_t *)v13, v9, (unint64_t)a4, *a6);
  return sub_1C4E37BA0(a1, *(uint64_t *)v13, v10, a4);
}

unint64_t sub_1C53831BC(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  _QWORD *v70;

  v2 = a2;
  v3 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v4 = &unk_1ED7EA000;
  if ((v3 & 1) == 0)
  {
    v70 = a1;
    v66 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v4 = &unk_1ED7EA000;
    v67 = v66;
    v2 = a2;
    a1 = v70;
    if (v67)
    {
      v68 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v68 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v68;
      __cxa_guard_release(&qword_1ED7EAC88);
      v4 = (_QWORD *)&unk_1ED7EA000;
      v2 = a2;
      a1 = v70;
    }
  }
  v5 = v4[400];
  v6 = v2 - (_QWORD)a1;
  if ((unint64_t)(v2 - (_QWORD)a1) <= 0x40)
    return sub_1C49CE808(a1, v6, v5);
  v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v5 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
  v9 = __ROR8__(v5 ^ 0xB492B66FBE98F273, 49);
  v10 = v5 ^ (v5 >> 47);
  v11 = v5 ^ (((0x9DDFEA08EB382D69 * (v10 ^ (0xB492B66FBE98F273 * v5))) ^ v5) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                          * (v10 ^ (0xB492B66FBE98F273
                                                                                                  * v5)));
  v12 = a1[1];
  v13 = a1[6];
  v14 = a1[7];
  v15 = v9 + v5 + v12;
  v16 = a1[5];
  v17 = v16 + v9 - 0x4B6D499041670D8DLL * __ROR8__(v13 + v5 - 0x4B6D499041670D8DLL * v5, 42);
  v18 = v10 - 0x622015F714C7D297 * (v8 ^ (v8 >> 47));
  v19 = *a1 - 0x6D8ED9027DD26057 * v5;
  v20 = a1[2];
  v21 = a1[3];
  v22 = v19 + v12 + v20;
  v23 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v11) ^ ((0x9DDFEA08EB382D69 * v11) >> 47));
  v24 = __ROR8__(v18, 33);
  v25 = (0xB492B66FBE98F273 * __ROR8__(v15, 37)) ^ v23;
  v26 = __ROR8__(v22, 44) + v19 + __ROR8__(v25 + v10 + v19 + v21, 21);
  v27 = 0xB492B66FBE98F273 * v24;
  v28 = v22 + v21;
  v29 = v23 + a1[4] - 0x4B6D499041670D8DLL * v24;
  v30 = __ROR8__(v16 + v13 + v29, 44) + v29 + __ROR8__(v17 + v20 + v14 + v29, 21);
  v31 = v16 + v13 + v29 + v14;
  v32 = (v6 & 0xFFFFFFFFFFFFFFC0) - 64;
  if ((v6 & 0xFFFFFFFFFFFFFFC0) == 0x40)
  {
    v43 = v25;
  }
  else
  {
    v33 = a1 + 15;
    do
    {
      v34 = *(v33 - 6);
      v35 = __ROR8__(v17 + v27 + v28 + v34, 37);
      v37 = *(v33 - 2);
      v36 = *(v33 - 1);
      v17 = v37 + v28 - 0x4B6D499041670D8DLL * __ROR8__(v26 + v17 + v36, 42);
      v38 = v31 + v25;
      v39 = *(v33 - 7) - 0x4B6D499041670D8DLL * v26;
      v40 = *(v33 - 4);
      v41 = *(v33 - 5);
      v42 = v39 + v34 + v41;
      v43 = (0xB492B66FBE98F273 * v35) ^ v30;
      v27 = 0xB492B66FBE98F273 * __ROR8__(v38, 33);
      v26 = __ROR8__(v42, 44) + v39 + __ROR8__(v43 + v31 + v39 + v40, 21);
      v28 = v42 + v40;
      v44 = v27 + v30 + *(v33 - 3);
      v45 = *v33;
      v33 += 8;
      v46 = __ROR8__(v17 + v41 + v44 + v45, 21);
      v47 = v37 + v36 + v44;
      v30 = __ROR8__(v47, 44) + v44 + v46;
      v31 = v47 + v45;
      v25 = v43;
      v32 -= 64;
    }
    while (v32);
  }
  if ((v6 & 0x3F) != 0)
  {
    v48 = *(_QWORD *)(v2 - 56);
    v49 = *(_QWORD *)(v2 - 16);
    v50 = *(_QWORD *)(v2 - 8);
    v51 = v43 + v31;
    v52 = (0xB492B66FBE98F273 * __ROR8__(v17 + v28 + v27 + v48, 37)) ^ v30;
    v54 = *(_QWORD *)(v2 - 32);
    v53 = *(_QWORD *)(v2 - 24);
    v17 = v53 + v28 - 0x4B6D499041670D8DLL * __ROR8__(v17 + v26 + v49, 42);
    v55 = v52 + v31;
    v56 = *(_QWORD *)(v2 - 64) - 0x4B6D499041670D8DLL * v26;
    v59 = v2 - 48;
    v57 = *(_QWORD *)(v2 - 48);
    v58 = *(_QWORD *)(v59 + 8);
    v60 = v56 + v48 + v57;
    v27 = 0xB492B66FBE98F273 * __ROR8__(v51, 33);
    v26 = __ROR8__(v60, 44) + v56 + __ROR8__(v55 + v56 + v58, 21);
    v28 = v60 + v58;
    v61 = v27 + v30 + v54;
    v62 = v53 + v49 + v61;
    v30 = __ROR8__(v62, 44) + v61 + __ROR8__(v17 + v57 + v61 + v50, 21);
    v31 = v62 + v50;
    v43 = v52;
  }
  v63 = 0x9DDFEA08EB382D69
      * (v30 ^ ((0x9DDFEA08EB382D69 * (v26 ^ v30)) >> 47) ^ (0x9DDFEA08EB382D69 * (v26 ^ v30)));
  v64 = v27 - 0x4B6D499041670D8DLL * (v6 ^ (v6 >> 47)) - 0x622015F714C7D297 * (v63 ^ (v63 >> 47));
  v65 = 0x9DDFEA08EB382D69
      * ((v43
        - 0x4B6D499041670D8DLL * (v17 ^ (v17 >> 47))
        - 0x622015F714C7D297
        * ((0x9DDFEA08EB382D69
          * (v31 ^ ((0x9DDFEA08EB382D69 * (v28 ^ v31)) >> 47) ^ (0x9DDFEA08EB382D69 * (v28 ^ v31)))) ^ ((0x9DDFEA08EB382D69 * (v31 ^ ((0x9DDFEA08EB382D69 * (v28 ^ v31)) >> 47) ^ (0x9DDFEA08EB382D69 * (v28 ^ v31)))) >> 47))) ^ v64);
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v64 ^ (v65 >> 47) ^ v65)) ^ ((0x9DDFEA08EB382D69 * (v64 ^ (v65 >> 47) ^ v65)) >> 47));
}

uint64_t sub_1C5383578(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  BOOL v12;
  int v13;
  _BOOL4 v14;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v5 = *a1;
    v6 = (_QWORD *)(a2 + 8);
    v7 = v4 - 1;
    v8 = *(_DWORD *)a2 & (v4 - 1);
    v9 = (uint64_t *)(*a1 + 8 * v8);
    if (sub_1C5383650((_QWORD *)(a2 + 8), *v9))
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (*v9 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = *v9 == -8192;
        if (v12)
          v10 = v9;
        v13 = v11 + 1;
        v8 = (v8 + v11) & v7;
        v9 = (uint64_t *)(v5 + 8 * v8);
        v14 = sub_1C5383650(v6, *v9);
        v11 = v13;
        if (v14)
          goto LABEL_11;
      }
      result = 0;
      if (v10)
        v9 = v10;
    }
  }
  else
  {
    v9 = 0;
    result = 0;
  }
  *a3 = v9;
  return result;
}

BOOL sub_1C5383650(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;

  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
    return 0;
  if (*a1 != *(_QWORD *)a2)
    return 0;
  v3 = a1[2];
  if (v3 != (*(_DWORD *)(a2 + 20) & 0x7FFFFFF))
    return 0;
  if (!a1[2])
    return 1;
  v4 = (uint64_t *)a1[1];
  v5 = (uint64_t *)(a2 - 32 * v3);
  v6 = a1[2] - 1;
  do
  {
    v8 = *v4++;
    v7 = v8;
    v10 = *v5;
    v5 += 4;
    v9 = v10;
    v12 = v6-- != 0;
    result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

uint64_t sub_1C53836C8@<X0>(unint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t *v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;

  v12 = 0;
  result = sub_1C5383578((uint64_t *)a1, a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C5383754(a1, (uint64_t)a2, a3, v12);
    v9 = (uint64_t *)result;
    *(_QWORD *)result = *a2;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

uint64_t *sub_1C5383754(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v6;
  unsigned int v7;
  uint64_t *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C5383804(a1, v7);
  v9 = 0;
  sub_1C5383578((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C5383804(unint64_t a1, int a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(unint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C53838BC(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

unint64_t sub_1C53838BC(unint64_t result, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  int v17;
  BOOL v18;
  unsigned int v19;

  v4 = a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      result = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v9 = *(_QWORD *)v5;
        v10 = *(_DWORD *)(v5 + 16);
        result = sub_1C53839B8(result);
        v11 = v10 - 1;
        v12 = *v4;
        v13 = result & (v10 - 1);
        v14 = (unint64_t *)(v9 + 8 * v13);
        v15 = *v14;
        if (*v4 != *v14)
        {
          v16 = 0;
          v17 = 1;
          while (v15 != -4096)
          {
            if (v16)
              v18 = 0;
            else
              v18 = v15 == -8192;
            if (v18)
              v16 = v14;
            v19 = v13 + v17++;
            v13 = v19 & v11;
            v14 = (unint64_t *)(v9 + 8 * (v19 & v11));
            v15 = *v14;
            if (v12 == *v14)
              goto LABEL_18;
          }
          if (v16)
            v14 = v16;
        }
LABEL_18:
        *v14 = v12;
        ++*(_DWORD *)(v5 + 8);
      }
      ++v4;
    }
    while (v4 != a3);
  }
  return result;
}

unint64_t sub_1C53839B8(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v11[3];
  int v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[33];

  v15[32] = *MEMORY[0x1E0C80C00];
  v13 = v15;
  v14 = 0x2000000000;
  v1 = *(_QWORD *)a1;
  v2 = *(_DWORD *)(a1 + 20);
  v3 = v2 & 0x7FFFFFF;
  if ((v2 & 0x7FFFFFF) != 0)
  {
    LODWORD(v5) = 0;
    v6 = a1;
    do
    {
      v7 = *(_QWORD *)(v6 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
      if (v5 >= HIDWORD(v14))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, (uint64_t)v15, v5 + 1, 8);
        LODWORD(v5) = v14;
      }
      *((_QWORD *)v13 + v5) = v7;
      v5 = (v14 + 1);
      LODWORD(v14) = v14 + 1;
      v6 += 32;
      --v3;
    }
    while (v3);
    v8 = v13;
  }
  else
  {
    v5 = 0;
    v8 = v15;
  }
  v11[0] = v1;
  v11[1] = (uint64_t)v8;
  v11[2] = v5;
  v12 = sub_1C53831BC(v8, (uint64_t)&v8[v5]);
  v9 = sub_1C5383050(v11, &v12);
  if (v13 != v15)
    free(v13);
  return v9;
}

uint64_t sub_1C5383AFC(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  BOOL v12;
  int v13;
  _BOOL4 v14;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v5 = *a1;
    v6 = (_QWORD *)(a2 + 8);
    v7 = v4 - 1;
    v8 = *(_DWORD *)a2 & (v4 - 1);
    v9 = (uint64_t *)(*a1 + 8 * v8);
    if (sub_1C5383BD4((_QWORD *)(a2 + 8), *v9))
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (*v9 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = *v9 == -8192;
        if (v12)
          v10 = v9;
        v13 = v11 + 1;
        v8 = (v8 + v11) & v7;
        v9 = (uint64_t *)(v5 + 8 * v8);
        v14 = sub_1C5383BD4(v6, *v9);
        v11 = v13;
        if (v14)
          goto LABEL_11;
      }
      result = 0;
      if (v10)
        v9 = v10;
    }
  }
  else
  {
    v9 = 0;
    result = 0;
  }
  *a3 = v9;
  return result;
}

BOOL sub_1C5383BD4(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;

  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
    return 0;
  if (*a1 != *(_QWORD *)a2)
    return 0;
  v3 = a1[2];
  if (v3 != (*(_DWORD *)(a2 + 20) & 0x7FFFFFF))
    return 0;
  if (!a1[2])
    return 1;
  v4 = (uint64_t *)a1[1];
  v5 = (uint64_t *)(a2 - 32 * v3);
  v6 = a1[2] - 1;
  do
  {
    v8 = *v4++;
    v7 = v8;
    v10 = *v5;
    v5 += 4;
    v9 = v10;
    v12 = v6-- != 0;
    result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

uint64_t sub_1C5383C4C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t *v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;

  v12 = 0;
  result = sub_1C5383AFC((uint64_t *)a1, a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C5383CD8(a1, (uint64_t)a2, a3, v12);
    v9 = (uint64_t *)result;
    *(_QWORD *)result = *a2;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

uint64_t *sub_1C5383CD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v6;
  unsigned int v7;
  uint64_t *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C5383D88(a1, v7);
  v9 = 0;
  sub_1C5383AFC((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C5383D88(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = &v4[v3];
      v13 = v4;
      do
      {
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v14 = *(uint64_t **)a1;
          v15 = *(_DWORD *)(a1 + 16);
          v16 = sub_1C5383F10(*v13);
          v17 = v15 - 1;
          v18 = *v13;
          v19 = v16 & (v15 - 1);
          v20 = &v14[v19];
          v21 = *v20;
          if (*v13 != *v20)
          {
            v22 = 0;
            v23 = 1;
            while (v21 != -4096)
            {
              if (v22)
                v24 = 0;
              else
                v24 = v21 == -8192;
              if (v24)
                v22 = v20;
              v25 = v19 + v23++;
              v19 = v25 & v17;
              v20 = &v14[v25 & v17];
              v21 = *v20;
              if (v18 == *v20)
                goto LABEL_23;
            }
            if (v22)
              v20 = v22;
          }
LABEL_23:
          *v20 = v18;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v13;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v26 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v26)
  {
    v27 = 8 * v26;
    do
    {
      *result++ = -4096;
      v27 -= 8;
    }
    while (v27);
  }
  return result;
}

unint64_t sub_1C5383F10(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[3];
  int v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[33];

  v19[32] = *MEMORY[0x1E0C80C00];
  v17 = v19;
  v18 = 0x2000000000;
  v1 = *(_QWORD *)a1;
  v2 = *(_DWORD *)(a1 + 20);
  v3 = v2 & 0x7FFFFFF;
  if ((v2 & 0x7FFFFFF) != 0)
  {
    LODWORD(v4) = 0;
    v5 = a1;
    do
    {
      v6 = *(_QWORD *)(v5 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
      if (v4 >= HIDWORD(v18))
      {
        v13 = v5;
        v14 = a1;
        v11 = v3;
        v12 = v1;
        v10 = *(_QWORD *)(v5 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, (uint64_t)v19, v4 + 1, 8);
        v6 = v10;
        v3 = v11;
        v1 = v12;
        v5 = v13;
        a1 = v14;
        LODWORD(v4) = v18;
      }
      *((_QWORD *)v17 + v4) = v6;
      v4 = (v18 + 1);
      LODWORD(v18) = v18 + 1;
      v5 += 32;
      --v3;
    }
    while (v3);
    v7 = v17;
  }
  else
  {
    v4 = 0;
    v7 = v19;
  }
  v15[0] = v1;
  v15[1] = (uint64_t)v7;
  v15[2] = v4;
  v16 = sub_1C53831BC(v7, (uint64_t)&v7[v4]);
  result = sub_1C5383050(v15, &v16);
  if (v17 != v19)
  {
    v9 = result;
    free(v17);
    return v9;
  }
  return result;
}

unint64_t sub_1C5384050(_QWORD *a1, _DWORD *a2)
{
  unsigned __int8 v2;
  _QWORD *v3;
  int v5;
  int v6;
  unint64_t v7;
  _DWORD *v8;
  _QWORD *v9;
  _OWORD __src[4];
  _OWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  memset(__src, 0, sizeof(__src));
  v2 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v3 = &unk_1ED7EA000;
  if ((v2 & 1) == 0)
  {
    v8 = a2;
    v9 = a1;
    v5 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v3 = &unk_1ED7EA000;
    v6 = v5;
    a2 = v8;
    a1 = v9;
    if (v6)
    {
      v7 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v7 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v7;
      __cxa_guard_release(&qword_1ED7EAC88);
      v3 = (_QWORD *)&unk_1ED7EA000;
      a2 = v8;
      a1 = v9;
    }
  }
  v13 = v3[400];
  *(_QWORD *)&__src[0] = *a1;
  DWORD2(__src[0]) = *a2;
  return sub_1C4E37BA0((char *)__src, 0, (char *)((unint64_t)__src | 0xC), (char *)v11);
}

uint64_t sub_1C5384154(uint64_t a1, int a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v4;
  unsigned int v5;
  int v6;
  int i;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t result;

  if (!a2)
  {
    v9 = 0;
    result = 0;
    goto LABEL_22;
  }
  v4 = 0;
  v5 = *(_DWORD *)a3;
  v6 = a2 - 1;
  for (i = 1; ; ++i)
  {
    v8 = v5 & v6;
    v9 = (uint64_t *)(a1 + 8 * (v5 & v6));
    v10 = *v9;
    if (*v9 == -8192)
      goto LABEL_12;
    if (v10 == -4096)
      break;
    if (*(_QWORD *)(a3 + 8) == *(_QWORD *)v10)
    {
      v11 = *(_QWORD *)(a3 + 24);
      if (v11 == (*(_DWORD *)(v10 + 20) & 0x7FFFFFF))
      {
        v12 = *(_QWORD *)(a3 + 24);
        if (!*(_QWORD *)(a3 + 24))
        {
LABEL_18:
          result = 1;
          goto LABEL_22;
        }
        v13 = *(_QWORD **)(a3 + 16);
        v14 = (_QWORD *)(v10 - 32 * v11);
        while (*v13 == *v14)
        {
          v14 += 4;
          ++v13;
          if (!--v12)
            goto LABEL_18;
        }
      }
    }
LABEL_12:
    if (v4)
      v15 = 0;
    else
      v15 = v10 == -8192;
    if (v15)
      v4 = (uint64_t *)(a1 + 8 * v8);
    v5 = v8 + i;
  }
  result = 0;
  if (v4)
    v9 = v4;
LABEL_22:
  *a4 = v9;
  return result;
}

uint64_t *sub_1C5384228@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  int i;
  unsigned int v12;
  uint64_t *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  char v20;
  uint64_t *v21;

  v7 = *(_DWORD *)(a1 + 16);
  if (v7)
  {
    v8 = 0;
    v9 = *(_QWORD *)a1;
    v10 = *(_DWORD *)a3;
    for (i = 1; ; ++i)
    {
      v12 = v10 & (v7 - 1);
      result = (uint64_t *)(v9 + 8 * v12);
      v14 = *result;
      if (*result != -8192)
      {
        if (v14 == -4096)
        {
          if (v8)
            v21 = v8;
          else
            v21 = (uint64_t *)(v9 + 8 * v12);
          goto LABEL_23;
        }
        if (*(_QWORD *)(a3 + 8) == *(_QWORD *)v14)
        {
          v15 = *(_QWORD *)(a3 + 24);
          if (v15 == (*(_DWORD *)(v14 + 20) & 0x7FFFFFF))
          {
            v16 = *(_QWORD *)(a3 + 24);
            if (!*(_QWORD *)(a3 + 24))
            {
LABEL_18:
              v20 = 0;
              goto LABEL_24;
            }
            v17 = *(_QWORD **)(a3 + 16);
            v18 = (_QWORD *)(v14 - 32 * v15);
            while (*v17 == *v18)
            {
              v18 += 4;
              ++v17;
              if (!--v16)
                goto LABEL_18;
            }
          }
        }
      }
      if (v8)
        v19 = 0;
      else
        v19 = v14 == -8192;
      if (v19)
        v8 = (uint64_t *)(v9 + 8 * v12);
      v10 = v12 + i;
    }
  }
  v21 = 0;
LABEL_23:
  result = sub_1C538434C(a1, (uint64_t)a2, a3, v21);
  *result = *a2;
  v9 = *(_QWORD *)a1;
  v7 = *(_DWORD *)(a1 + 16);
  v20 = 1;
LABEL_24:
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v9 + 8 * v7;
  *(_BYTE *)(a4 + 16) = v20;
  return result;
}

uint64_t *sub_1C538434C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v6;
  unsigned int v7;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int i;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t *v21;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C53844D0(a1, v7);
      v21 = 0;
      sub_1C5384154(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a3, &v21);
      a4 = v21;
    }
    goto LABEL_4;
  }
  sub_1C53844D0(a1, 2 * v7);
  v9 = *(_DWORD *)(a1 + 16);
  if (!v9)
  {
    a4 = 0;
    goto LABEL_4;
  }
  v10 = 0;
  v11 = *(_DWORD *)a3;
  v12 = v9 - 1;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v12;
    a4 = (uint64_t *)(*(_QWORD *)a1 + 8 * v14);
    v15 = *a4;
    if (*a4 == -8192)
      goto LABEL_18;
    if (v15 == -4096)
      break;
    if (*(_QWORD *)(a3 + 8) == *(_QWORD *)v15)
    {
      v16 = *(_QWORD *)(a3 + 24);
      if (v16 == (*(_DWORD *)(v15 + 20) & 0x7FFFFFF))
      {
        v17 = *(_QWORD *)(a3 + 24);
        if (!*(_QWORD *)(a3 + 24))
          goto LABEL_4;
        v18 = *(_QWORD **)(a3 + 16);
        v19 = (_QWORD *)(v15 - 32 * v16);
        while (*v18 == *v19)
        {
          v19 += 4;
          ++v18;
          if (!--v17)
            goto LABEL_4;
        }
      }
    }
LABEL_18:
    if (v10)
      v20 = 0;
    else
      v20 = v15 == -8192;
    if (v20)
      v10 = *(_QWORD *)a1 + 8 * v14;
    v11 = v14 + i;
  }
  if (v10)
    a4 = (uint64_t *)v10;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C53844D0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t **v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t **v14;
  int v15;
  int v16;
  int v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t **v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t ***)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = &v4[v3];
      v13 = v4;
      do
      {
        if (((unint64_t)*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v14 = *(uint64_t ***)a1;
          v15 = *(_DWORD *)(a1 + 16);
          v16 = sub_1C5384658(*v13);
          v17 = v15 - 1;
          v18 = *v13;
          v19 = v16 & (v15 - 1);
          v20 = &v14[v19];
          v21 = *v20;
          if (*v13 != *v20)
          {
            v22 = 0;
            v23 = 1;
            while (v21 != (uint64_t *)-4096)
            {
              if (v22)
                v24 = 0;
              else
                v24 = v21 == (uint64_t *)-8192;
              if (v24)
                v22 = v20;
              v25 = v19 + v23++;
              v19 = v25 & v17;
              v20 = &v14[v25 & v17];
              v21 = *v20;
              if (v18 == *v20)
                goto LABEL_23;
            }
            if (v22)
              v20 = v22;
          }
LABEL_23:
          *v20 = v18;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v13;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v26 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v26)
  {
    v27 = 8 * v26;
    do
    {
      *result++ = -4096;
      v27 -= 8;
    }
    while (v27);
  }
  return result;
}

uint64_t sub_1C5384658(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  unsigned __int8 v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  _QWORD v27[35];

  v27[34] = *MEMORY[0x1E0C80C00];
  v25 = v27;
  v26 = 0x2000000000;
  v1 = *a1;
  v2 = *((_DWORD *)a1 + 5) & 0x7FFFFFF;
  if ((_DWORD)v2)
  {
    LODWORD(v3) = 0;
    v4 = a1;
    do
    {
      v5 = v4[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)];
      if (v3 >= HIDWORD(v26))
      {
        v21 = v4[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)];
        v23 = a1;
        v19 = v4;
        v20 = v2;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, (uint64_t)v27, v3 + 1, 8);
        v2 = v20;
        v5 = v21;
        v4 = v19;
        a1 = v23;
        LODWORD(v3) = v26;
      }
      *((_QWORD *)v25 + v3) = v5;
      v3 = (v26 + 1);
      LODWORD(v26) = v26 + 1;
      v4 += 4;
      --v2;
    }
    while (v2);
    v6 = v25;
  }
  else
  {
    v3 = 0;
    v6 = v27;
  }
  v7 = sub_1C53831BC(v6, (uint64_t)&v6[v3]);
  memset(&v27[32], 0, 12);
  v8 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v9 = &unk_1ED7EA000;
  if ((v8 & 1) == 0)
  {
    v22 = v7;
    v15 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v9 = &unk_1ED7EA000;
    v16 = v15;
    v7 = v22;
    if (v16)
    {
      v17 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v17 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v17;
      __cxa_guard_release(&qword_1ED7EAC88);
      v9 = (_QWORD *)&unk_1ED7EA000;
      v7 = v22;
    }
  }
  v10 = v9[400];
  v27[32] = v1;
  LODWORD(v27[33]) = v7;
  v11 = *(_QWORD *)((char *)&v27[32] + 4);
  if (v25 != v27)
  {
    v24 = *(_QWORD *)((char *)&v27[32] + 4);
    v18 = v10;
    free(v25);
    v10 = v18;
    v11 = v24;
  }
  v12 = 0x9DDFEA08EB382D69 * (v10 ^ v1 ^ __ROR8__(v11 + 12, 12));
  v13 = __ROR8__(v11 + 12, 12) ^ (v12 >> 47);
  return (-348639895
        * ((((0x9DDFEA08EB382D69 * (v13 ^ v12)) >> 32) >> 15) ^ (-348639895
                                                                               * (v13 ^ v12)))) ^ v11;
}

uint64_t *sub_1C5384860(uint64_t a1, uint64_t *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  BOOL v12;
  unsigned int v13;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v11 = 0;
LABEL_9:
    v6 = sub_1C538491C(a1, (uint64_t)a2, a2, v11);
    *v6 = *a2;
    v6[1] = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  v6 = (uint64_t *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v9 = 0;
    v10 = 1;
    while (v7 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v7 == -8192;
      if (v12)
        v9 = v6;
      v13 = v5 + v10++;
      v5 = v13 & v4;
      v6 = (uint64_t *)(*(_QWORD *)a1 + 16 * (v13 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v9)
      v11 = v9;
    else
      v11 = v6;
    goto LABEL_9;
  }
  return v6;
}

uint64_t *sub_1C538491C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C5384A50(a1, v7);
      v17 = 0;
      sub_1C500AA94(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a3, &v17);
      a4 = v17;
    }
LABEL_4:
    v8 = *a4;
    goto LABEL_5;
  }
  sub_1C5384A50(a1, 2 * v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (uint64_t *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (uint64_t *)(*(_QWORD *)a1 + 16 * v11);
      v12 = *a4;
      if (v8 == *a4)
        goto LABEL_5;
    }
    if (v13)
      a4 = v13;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C5384A50(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C622A17C(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C5384B08(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C5384B64(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C5384C00((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_1C5384B64(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v9)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v9 = v7;
        v13 = v6 + v10++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 16 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_7;
      }
      result = 0;
      if (v9)
        v7 = v9;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C5384C00(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C5384CB0(a1, v7);
  v9 = 0;
  sub_1C5384B64((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C5384CB0(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C622A308(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C5384D68(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C622A4EC(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C5384E20(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C5384F50(a1, v7);
      v17 = 0;
      sub_1C4850EC8((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    v8 = *a4;
    goto LABEL_5;
  }
  sub_1C5384F50(a1, 2 * v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
      v12 = *a4;
      if (v8 == *a4)
        goto LABEL_5;
    }
    if (v13)
      a4 = v13;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C5384F50(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm::Value *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm::Value **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C5385008(a1, v4, (llvm::Value *)((char *)v4 + 16 * v3));
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5385008(uint64_t result, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  llvm::Value *v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _DWORD *v17;
  llvm::Value *v18;
  llvm::Value *v19;
  uint64_t v20;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD **)result;
    v5 = 16 * v3;
    do
    {
      *v4 = -4096;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  for (; a2 != a3; a2 = (llvm::Value *)((char *)a2 + 16))
  {
    v6 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v7 = *(_DWORD *)(result + 16) - 1;
      v8 = v7 & ((v6 >> 4) ^ (v6 >> 9));
      v9 = (_QWORD *)(*(_QWORD *)result + 16 * v8);
      v10 = *v9;
      if (v6 != *v9)
      {
        v13 = 0;
        v14 = 1;
        while (v10 != -4096)
        {
          if (v13)
            v15 = 0;
          else
            v15 = v10 == -8192;
          if (v15)
            v13 = v9;
          v16 = v8 + v14++;
          v8 = v16 & v7;
          v9 = (_QWORD *)(*(_QWORD *)result + 16 * (v16 & v7));
          v10 = *v9;
          if (v6 == *v9)
            goto LABEL_7;
        }
        if (v13)
          v9 = v13;
      }
LABEL_7:
      *v9 = v6;
      v11 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
      v9[1] = v11;
      ++*(_DWORD *)(result + 8);
      v12 = (llvm::Value *)*((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
      if (v12)
      {
        v19 = a3;
        v20 = result;
        v18 = a2;
        llvm::Value::~Value(v12, a2);
        llvm::User::operator delete(v17);
        a3 = v19;
        result = v20;
        a2 = v18;
      }
    }
  }
  return result;
}

uint64_t *sub_1C5385134(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C5385268(a1, v7);
      v17 = 0;
      sub_1C4F763D4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a3, &v17);
      a4 = v17;
    }
LABEL_4:
    v8 = *a4;
    goto LABEL_5;
  }
  sub_1C5385268(a1, 2 * v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (uint64_t *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (uint64_t *)(*(_QWORD *)a1 + 16 * v11);
      v12 = *a4;
      if (v8 == *a4)
        goto LABEL_5;
    }
    if (v13)
      a4 = v13;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C5385268(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C622A5B8(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

_OWORD *sub_1C5385320(uint64_t a1, int a2)
{
  unsigned int v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  int64x2_t v12;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C622A7A0(a1, v4, &v4[3 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *result = v12;
      result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C53853E8(uint64_t a1, int a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v7;
  unsigned int v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t result;

  if (a2)
  {
    v7 = 0;
    v8 = *(_DWORD *)a3;
    v9 = a2 - 1;
    for (i = 1; ; ++i)
    {
      v11 = v8 & v9;
      v12 = (uint64_t *)(a1 + 8 * (v8 & v9));
      v13 = (_QWORD *)*v12;
      if (*v12 == -4096)
        break;
      if (v13 != (_QWORD *)-8192)
      {
        if (*(_QWORD *)(a3 + 8) == *v13 && sub_1C53854C4((unsigned __int8 *)(a3 + 16), *v12))
        {
          result = 1;
          goto LABEL_16;
        }
        if (v13 == (_QWORD *)-4096)
          break;
      }
      if (v7)
        v14 = 0;
      else
        v14 = v13 == (_QWORD *)-8192;
      if (v14)
        v7 = (uint64_t *)(a1 + 8 * v11);
      v8 = v11 + i;
    }
    result = 0;
    if (v7)
      v12 = v7;
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_16:
  *a4 = v12;
  return result;
}

BOOL sub_1C53854C4(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v17;

  v2 = *(unsigned __int16 *)(a2 + 18);
  if (v2 != *a1)
    return 0;
  if (a1[1] != *(unsigned __int8 *)(a2 + 17) >> 1)
    return 0;
  v5 = *((_QWORD *)a1 + 2);
  if (v5 != (*(_DWORD *)(a2 + 20) & 0x7FFFFFF))
    return 0;
  v6 = (v2 - 53) > 1 ? 0 : *(unsigned __int16 *)(a2 + 24);
  if (v6 != *((unsigned __int16 *)a1 + 1))
    return 0;
  v7 = *((_QWORD *)a1 + 2);
  if (*((_QWORD *)a1 + 2))
  {
    v8 = (_QWORD *)*((_QWORD *)a1 + 1);
    v9 = (_QWORD *)(a2 - 32 * v5);
    while (*v8 == *v9)
    {
      ++v8;
      v9 += 4;
      if (!--v7)
        goto LABEL_12;
    }
    return 0;
  }
LABEL_12:
  v10 = *((_QWORD *)a1 + 4);
  if ((v2 & 0xFFFE) == 0x40)
  {
    v11 = *(const void **)(a2 + 24);
    v12 = *(unsigned int *)(a2 + 32);
  }
  else
  {
    v12 = 0;
    v11 = 0;
  }
  if (v10 != v12 || memcmp(*((const void **)a1 + 3), v11, 4 * v10))
    return 0;
  v13 = *((_QWORD *)a1 + 6);
  if (v2 == 63)
  {
    v14 = *(const void **)(a2 + 24);
    v15 = *(unsigned int *)(a2 + 32);
  }
  else
  {
    v15 = 0;
    v14 = 0;
  }
  if (v13 != v15 || memcmp(*((const void **)a1 + 5), v14, 4 * v13))
    return 0;
  if (v2 == 34)
    v17 = *(_QWORD *)(a2 + 24);
  else
    v17 = 0;
  return *((_QWORD *)a1 + 7) == v17;
}

uint64_t *sub_1C5385610(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int i;
  unsigned int v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t *result;
  BOOL v18;
  uint64_t *v19;
  char v20;

  v5 = a3;
  v7 = a1;
  v8 = *(_DWORD *)(a2 + 16);
  if (v8)
  {
    v9 = 0;
    v10 = *(_QWORD *)a2;
    v11 = *(_DWORD *)a4;
    v12 = v8 - 1;
    for (i = 1; ; ++i)
    {
      v14 = v11 & v12;
      v15 = (uint64_t *)(v10 + 8 * (v11 & v12));
      v16 = (_QWORD *)*v15;
      if (*v15 == -4096)
        break;
      if (v16 != (_QWORD *)-8192)
      {
        if (*(_QWORD *)(a4 + 8) == *v16)
        {
          result = (uint64_t *)sub_1C53854C4((unsigned __int8 *)(a4 + 16), *v15);
          if ((result & 1) != 0)
          {
            v20 = 0;
            v7 = a1;
            goto LABEL_19;
          }
        }
        if (v16 == (_QWORD *)-4096)
          break;
      }
      if (v9)
        v18 = 0;
      else
        v18 = v16 == (_QWORD *)-8192;
      if (v18)
        v9 = (uint64_t *)(v10 + 8 * v14);
      v11 = v14 + i;
    }
    if (v9)
      v19 = v9;
    else
      v19 = (uint64_t *)(v10 + 8 * v14);
    v5 = a3;
    v7 = a1;
  }
  else
  {
    v19 = 0;
  }
  result = sub_1C5385734(a2, a4, v19);
  v15 = result;
  *result = *v5;
  v10 = *(_QWORD *)a2;
  v8 = *(_DWORD *)(a2 + 16);
  v20 = 1;
LABEL_19:
  *(_QWORD *)v7 = v15;
  *(_QWORD *)(v7 + 8) = v10 + 8 * v8;
  *(_BYTE *)(v7 + 16) = v20;
  return result;
}

uint64_t *sub_1C5385734(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v5;
  unsigned int v6;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int i;
  unsigned int v15;
  _QWORD *v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  int j;
  unsigned int v23;
  _QWORD *v24;
  BOOL v25;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    sub_1C53858F8(a1, 2 * v6);
    v9 = *(_DWORD *)(a1 + 16);
    if (v9)
    {
      v10 = 0;
      v11 = *(_QWORD *)a1;
      v12 = *(_DWORD *)a2;
      v13 = v9 - 1;
      for (i = 1; ; ++i)
      {
        v15 = v12 & v13;
        a3 = (uint64_t *)(v11 + 8 * (v12 & v13));
        v16 = (_QWORD *)*a3;
        if (*a3 == -4096)
          break;
        if (v16 != (_QWORD *)-8192)
        {
          if (*(_QWORD *)(a2 + 8) == *v16 && sub_1C53854C4((unsigned __int8 *)(a2 + 16), *a3))
            goto LABEL_3;
          if (v16 == (_QWORD *)-4096)
            goto LABEL_32;
        }
        if (v10)
          v17 = 0;
        else
          v17 = v16 == (_QWORD *)-8192;
        if (v17)
          v10 = (uint64_t *)(v11 + 8 * v15);
        v12 = v15 + i;
      }
      goto LABEL_32;
    }
LABEL_35:
    a3 = 0;
    goto LABEL_3;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    goto LABEL_3;
  sub_1C53858F8(a1, v6);
  v18 = *(_DWORD *)(a1 + 16);
  if (!v18)
    goto LABEL_35;
  v10 = 0;
  v19 = *(_QWORD *)a1;
  v20 = *(_DWORD *)a2;
  v21 = v18 - 1;
  for (j = 1; ; ++j)
  {
    v23 = v20 & v21;
    a3 = (uint64_t *)(v19 + 8 * (v20 & v21));
    v24 = (_QWORD *)*a3;
    if (*a3 == -4096)
      break;
    if (v24 != (_QWORD *)-8192)
    {
      if (*(_QWORD *)(a2 + 8) == *v24 && sub_1C53854C4((unsigned __int8 *)(a2 + 16), *a3))
        goto LABEL_3;
      if (v24 == (_QWORD *)-4096)
        break;
    }
    if (v10)
      v25 = 0;
    else
      v25 = v24 == (_QWORD *)-8192;
    if (v25)
      v10 = (uint64_t *)(v19 + 8 * v23);
    v20 = v23 + j;
  }
LABEL_32:
  if (v10)
    a3 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C53858F8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t **v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t **v14;
  int v15;
  int v16;
  int v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t **v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t ***)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = &v4[v3];
      v13 = v4;
      do
      {
        if (((unint64_t)*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v14 = *(uint64_t ***)a1;
          v15 = *(_DWORD *)(a1 + 16);
          v16 = sub_1C5385A80(*v13);
          v17 = v15 - 1;
          v18 = *v13;
          v19 = v16 & (v15 - 1);
          v20 = &v14[v19];
          v21 = *v20;
          if (*v13 != *v20)
          {
            v22 = 0;
            v23 = 1;
            while (v21 != (uint64_t *)-4096)
            {
              if (v22)
                v24 = 0;
              else
                v24 = v21 == (uint64_t *)-8192;
              if (v24)
                v22 = v20;
              v25 = v19 + v23++;
              v19 = v25 & v17;
              v20 = &v14[v25 & v17];
              v21 = *v20;
              if (v18 == *v20)
                goto LABEL_23;
            }
            if (v22)
              v20 = v22;
          }
LABEL_23:
          *v20 = v18;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v13;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v26 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v26)
  {
    v27 = 8 * v26;
    do
    {
      *result++ = -4096;
      v27 -= 8;
    }
    while (v27);
  }
  return result;
}

unint64_t sub_1C5385A80(uint64_t *a1)
{
  _QWORD *v2;
  int v3;
  __int16 v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD v52[40];

  v52[37] = *MEMORY[0x1E0C80C00];
  v2 = v52;
  v50 = v52;
  v51 = 0x2000000000;
  v3 = *((unsigned __int16 *)a1 + 9);
  if ((v3 - 53) > 1)
    v4 = 0;
  else
    v4 = *((_WORD *)a1 + 12);
  v48 = v4;
  if ((v3 & 0xFFFE) == 0x40)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = (_QWORD *)a1[3];
    v9 = *((unsigned int *)a1 + 8);
  }
  else if (v3 == 34)
  {
    v5 = 0;
    v6 = 0;
    v9 = 0;
    v8 = 0;
    v7 = a1[3];
  }
  else if (v3 == 63)
  {
    v9 = 0;
    v8 = 0;
    v7 = 0;
    v5 = (_QWORD *)a1[3];
    v6 = *((unsigned int *)a1 + 8);
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v9 = 0;
    v8 = 0;
    v7 = 0;
  }
  v49 = *a1;
  v10 = *((_WORD *)a1 + 9);
  v11 = *((unsigned __int8 *)a1 + 17);
  v12 = *((_DWORD *)a1 + 5);
  v13 = v12 & 0x7FFFFFF;
  if ((v12 & 0x7FFFFFF) != 0)
  {
    v47 = v9;
    v14 = *((_WORD *)a1 + 9);
    v15 = v6;
    LODWORD(v16) = 0;
    v17 = a1;
    do
    {
      v18 = v17[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)];
      if (v16 >= HIDWORD(v51))
      {
        v46 = v2;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, (uint64_t)v2, v16 + 1, 8);
        v2 = v46;
        LODWORD(v16) = v51;
      }
      v50[v16] = v18;
      v16 = (v51 + 1);
      LODWORD(v51) = v51 + 1;
      v17 += 4;
      --v13;
    }
    while (v13);
    v19 = v2;
    v20 = v50;
    v6 = v15;
    v10 = v14;
    v9 = v47;
  }
  else
  {
    v16 = 0;
    v19 = v52;
    v20 = v52;
  }
  v21 = v11 >> 1;
  v22 = sub_1C53831BC(v20, (uint64_t)&v20[v16]);
  v23 = sub_1C4F5AB38(v8, (uint64_t)v8 + 4 * v9);
  v24 = sub_1C517D118(v5, (uint64_t)v5 + 4 * v6);
  memset(&v52[32], 0, 36);
  v25 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v44 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v44 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v44;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  LOBYTE(v52[32]) = v10;
  BYTE1(v52[32]) = v21;
  WORD1(v52[32]) = v48;
  *(_QWORD *)((char *)&v52[32] + 4) = v22;
  *(_QWORD *)((char *)&v52[33] + 4) = v23;
  *(_QWORD *)((char *)&v52[34] + 4) = v24;
  *(_QWORD *)((char *)&v52[35] + 4) = v7;
  v26 = v52[32] - 0x3C5A37A36834CED9 * v24 - 0x7CAFD2FAA76D1684;
  v27 = __ROR8__(v26 + v52[35], 52);
  v28 = v26 + v52[33];
  v29 = __ROR8__(v28, 7);
  v30 = v28 + v52[34];
  v31 = v29 + __ROR8__(v52[32] - 0x3C5A37A36834CED9 * v24 - 0x7CAFD2FAA76D1684, 37) + v27 + __ROR8__(v30, 31);
  v32 = v23 + v22 + v52[34];
  v33 = __ROR8__(v32, 7);
  v34 = v32 + v24;
  v35 = v30 + v52[35] + __ROR8__(v22 + v52[34], 37) + __ROR8__(v22 + v52[34] + v7, 52) + v33 + __ROR8__(v34, 31);
  v36 = (0xC3A5C85C97CB3127 * (v31 + v7 + v34) - 0x651E95C4D06FBFB1 * v35) ^ ((0xC3A5C85C97CB3127
                                                                                 * (v31 + v7 + v34)
                                                                                 - 0x651E95C4D06FBFB1 * v35) >> 47);
  v37 = 797982799
      * (((((0xC3A5C85C97CB3127 * v36) ^ qword_1ED7EAC80) + v31) >> 47) ^ (((-1748291289 * v36) ^ qword_1ED7EAC80)
                                                                           + v31));
  LODWORD(v52[33]) = 0;
  v52[32] = 0;
  v38 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v38 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v45 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v45 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v45;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v39 = qword_1ED7EAC80;
  v52[32] = v49;
  LODWORD(v52[33]) = v37;
  v40 = *(_QWORD *)((char *)&v52[32] + 4);
  if (v50 != v19)
    free(v50);
  v41 = __ROR8__(v40 + 12, 12);
  v42 = 0x9DDFEA08EB382D69
      * (v41 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v49 ^ v41)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v49 ^ v41)));
  return (-348639895 * ((v42 >> 47) ^ v42)) ^ v40;
}

void sub_1C5385EA8(llvm::Value *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  char *v5;
  _QWORD **v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v2 = *((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = 0;
  if (v2)
  {
    sub_1C5385EA8(v2);
    v3 = *(_DWORD *)(v2 + 20);
    if ((v3 & 0x40000000) != 0)
    {
      v11 = *(char **)(v2 - 8);
      v10 = (char *)(v2 - 8);
      v9 = v11;
      v12 = v3 & 0x7FFFFFF;
      if ((_DWORD)v12)
      {
        v13 = 32 * v12;
        do
        {
          v14 = &v9[v13];
          if (*(_QWORD *)&v9[v13 - 32])
          {
            **((_QWORD **)v14 - 2) = *((_QWORD *)v14 - 3);
            v15 = *((_QWORD *)v14 - 3);
            if (v15)
              *(_QWORD *)(v15 + 16) = *((_QWORD *)v14 - 2);
          }
          v13 -= 32;
        }
        while (v13);
      }
      operator delete(v9);
      v5 = v10;
    }
    else
    {
      v4 = v3 & 0x7FFFFFF;
      v5 = (char *)(v2 - 32 * v4);
      if ((_DWORD)v4)
      {
        v6 = (_QWORD **)(v2 - 16);
        v7 = -32 * v4;
        do
        {
          if (*(v6 - 2))
          {
            **v6 = *(v6 - 1);
            v8 = (uint64_t)*(v6 - 1);
            if (v8)
              *(_QWORD *)(v8 + 16) = *v6;
          }
          v6 -= 4;
          v7 += 32;
        }
        while (v7);
      }
      if (v3 < 0)
        v5 = &v5[-*((_QWORD *)v5 - 1) - 8];
    }
    operator delete(v5);
  }
  llvm::Value::~Value(a1);
}

void sub_1C5385F80(uint64_t a1)
{
  llvm::Value *v1;
  int v2;
  uint64_t v3;
  char *v4;
  _QWORD **v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  v1 = *(llvm::Value **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v1)
  {
    sub_1C5385EA8(v1);
    v2 = *((_DWORD *)v1 + 5);
    if ((v2 & 0x40000000) != 0)
    {
      v10 = (char *)*((_QWORD *)v1 - 1);
      v9 = (char *)v1 - 8;
      v8 = v10;
      v11 = v2 & 0x7FFFFFF;
      if ((_DWORD)v11)
      {
        v12 = 32 * v11;
        do
        {
          v13 = &v8[v12];
          if (*(_QWORD *)&v8[v12 - 32])
          {
            **((_QWORD **)v13 - 2) = *((_QWORD *)v13 - 3);
            v14 = *((_QWORD *)v13 - 3);
            if (v14)
              *(_QWORD *)(v14 + 16) = *((_QWORD *)v13 - 2);
          }
          v12 -= 32;
        }
        while (v12);
      }
      operator delete(v8);
      v4 = v9;
    }
    else
    {
      v3 = v2 & 0x7FFFFFF;
      v4 = (char *)v1 - 32 * v3;
      if ((_DWORD)v3)
      {
        v5 = (_QWORD **)((char *)v1 - 16);
        v6 = -32 * v3;
        do
        {
          if (*(v5 - 2))
          {
            **v5 = *(v5 - 1);
            v7 = (uint64_t)*(v5 - 1);
            if (v7)
              *(_QWORD *)(v7 + 16) = *v5;
          }
          v5 -= 4;
          v6 += 32;
        }
        while (v6);
      }
      if (v2 < 0)
        v4 = &v4[-*((_QWORD *)v4 - 1) - 8];
    }
    operator delete(v4);
  }
  JUMPOUT(0x1CAA32FB4);
}

size_t *sub_1C538606C(size_t *result, unint64_t a2, int __c)
{
  size_t *v5;
  void *v6;
  int v7;
  size_t v8;
  unint64_t v9;
  size_t v10;

  v5 = result;
  if (result[2] < a2)
  {
    result[1] = 0;
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)result, result + 3, a2, 1);
    v6 = (void *)*v5;
    v7 = __c;
    v8 = a2;
LABEL_10:
    result = (size_t *)memset(v6, v7, v8);
    goto LABEL_11;
  }
  v9 = result[1];
  if (v9 >= a2)
    v10 = a2;
  else
    v10 = result[1];
  if (v10)
  {
    result = (size_t *)memset((void *)*result, __c, v10);
    v9 = v5[1];
  }
  v8 = a2 - v9;
  if (a2 > v9)
  {
    v6 = (void *)(*v5 + v9);
    v7 = __c;
    goto LABEL_10;
  }
LABEL_11:
  v5[1] = a2;
  return result;
}

llvm::LLVMContext *LLVMContextCreate()
{
  llvm::LLVMContext *v0;

  v0 = (llvm::LLVMContext *)operator new();
  return llvm::LLVMContext::LLVMContext(v0);
}

unint64_t LLVMGetGlobalContext()
{
  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  return qword_1EF8F7038[0];
}

uint64_t *LLVMContextSetDiagnosticHandler(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *result;
  *(_QWORD *)(*(_QWORD *)(*result + 72) + 16) = a2;
  *(_QWORD *)(*(_QWORD *)(v3 + 72) + 8) = a3;
  *(_BYTE *)(v3 + 80) = 0;
  return result;
}

uint64_t LLVMContextGetDiagnosticHandler(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 16);
}

uint64_t LLVMContextGetDiagnosticContext(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 8);
}

uint64_t *LLVMContextSetYieldCallback(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *result;
  *(_QWORD *)(v3 + 136) = a2;
  *(_QWORD *)(v3 + 144) = a3;
  return result;
}

uint64_t LLVMContextShouldDiscardValueNames(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)a1 + 2664);
}

uint64_t LLVMContextSetDiscardValueNames(uint64_t result, int a2)
{
  *(_BYTE *)(*(_QWORD *)result + 2664) = a2 != 0;
  return result;
}

llvm::LLVMContextImpl **LLVMContextDispose(llvm::LLVMContextImpl **result, llvm::Value *a2)
{
  if (result)
  {
    llvm::LLVMContext::~LLVMContext(result, a2);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

uint64_t LLVMGetMDKindIDInContext(uint64_t *a1, unsigned __int8 *a2, unsigned int a3)
{
  return llvm::LLVMContext::getMDKindID(a1, a2, a3);
}

uint64_t LLVMGetMDKindID(unsigned __int8 *a1, unsigned int a2)
{
  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  return llvm::LLVMContext::getMDKindID((uint64_t *)qword_1EF8F7038[0], a1, a2);
}

uint64_t LLVMGetLastEnumAttributeKind()
{
  return 81;
}

unint64_t LLVMCreateEnumAttribute(uint64_t *a1, int a2, uint64_t a3)
{
  if (a2 == 73 || a2 == 69)
    return llvm::Attribute::get(a1, a2, 0);
  else
    return llvm::Attribute::get(a1, a2, a3);
}

uint64_t LLVMGetEnumAttributeKind(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 12);
  return result;
}

uint64_t LLVMGetEnumAttributeValue(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 8))
      return *(_QWORD *)(result + 16);
    else
      return 0;
  }
  return result;
}

uint64_t LLVMGetTypeAttributeValue(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 16);
  return result;
}

unsigned int *LLVMCreateStringAttribute(uint64_t *a1, unsigned __int8 *a2, unsigned int a3, unsigned __int8 *a4, unsigned int a5)
{
  return llvm::Attribute::get(a1, a2, a3, a4, a5);
}

uint64_t LLVMGetStringAttributeKind(uint64_t result, _DWORD *a2)
{
  uint64_t v2;

  v2 = result;
  if (result)
  {
    result += 24;
    LODWORD(v2) = *(_DWORD *)(v2 + 12);
  }
  *a2 = v2;
  return result;
}

uint64_t LLVMGetStringAttributeValue(uint64_t result, _DWORD *a2)
{
  int v2;

  if (result)
  {
    v2 = *(_DWORD *)(result + 16);
    result += *(unsigned int *)(result + 12) + 25;
  }
  else
  {
    v2 = 0;
  }
  *a2 = v2;
  return result;
}

BOOL LLVMIsEnumAttribute(_BOOL8 result)
{
  if (result)
    return !*(_BYTE *)(result + 8) || *(unsigned __int8 *)(result + 8) == 1;
  return result;
}

BOOL LLVMIsStringAttribute(_BOOL8 result)
{
  if (result)
    return *(unsigned __int8 *)(result + 8) == 2;
  return result;
}

BOOL LLVMIsTypeAttribute(_BOOL8 result)
{
  if (result)
    return *(unsigned __int8 *)(result + 8) == 3;
  return result;
}

char *LLVMGetDiagInfoDescription(uint64_t a1)
{
  uint64_t v1;
  char v2;
  const char *v3;
  char *v4;
  _QWORD v6[2];
  void (**v7)(llvm::raw_ostream *__hidden);
  int v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  int v14;
  void **v15;
  void *v16[2];
  uint64_t v17;

  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  v8 = 0;
  v12 = 0;
  v13 = 0;
  v7 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v15 = v16;
  v14 = 0;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  v6[0] = &unk_1E814E990;
  v6[1] = &v7;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 24))(a1, v6);
  v1 = v11 - v9;
  if (v11 != v9)
  {
    v11 = v9;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v7, v9, v1);
  }
  v2 = HIBYTE(v17);
  if (v17 >= 0)
    v3 = (const char *)v16;
  else
    v3 = (const char *)v16[0];
  v4 = strdup(v3);
  v7 = off_1E81A6E70;
  if (v14 == 1 && v9)
  {
    MEMORY[0x1CAA32F9C](v9, 0x1000C8077774924);
    v2 = HIBYTE(v17);
  }
  if (v2 < 0)
    operator delete(v16[0]);
  return v4;
}

uint64_t LLVMGetDiagInfoSeverity(uint64_t a1)
{
  unsigned int v1;

  v1 = *(char *)(a1 + 12);
  if (v1 - 1 >= 3)
    return 0;
  else
    return v1;
}

uint64_t LLVMModuleCreateWithName(const char *a1)
{
  uint64_t v2;
  size_t v3;

  v2 = operator new();
  if (a1)
    v3 = strlen(a1);
  else
    v3 = 0;
  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  return llvm::Module::Module(v2, a1, v3, qword_1EF8F7038[0]);
}

uint64_t LLVMModuleCreateWithNameInContext(const char *a1, uint64_t a2)
{
  uint64_t v4;
  size_t v5;

  v4 = operator new();
  if (a1)
    v5 = strlen(a1);
  else
    v5 = 0;
  return llvm::Module::Module(v4, a1, v5, a2);
}

llvm::Module *LLVMDisposeModule(llvm::Module *result)
{
  if (result)
  {
    llvm::Module::~Module(result);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

uint64_t LLVMGetModuleIdentifier(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*(char *)(a1 + 191) < 0)
    v2 = *(_QWORD *)(a1 + 176);
  else
    v2 = *(unsigned __int8 *)(a1 + 191);
  v3 = a1 + 168;
  *a2 = v2;
  if (*(char *)(a1 + 191) < 0)
    return *(_QWORD *)v3;
  return v3;
}

double LLVMSetModuleIdentifier(uint64_t a1, void *__src, size_t __n)
{
  __int128 *p_dst;
  size_t v7;
  size_t v8;
  void **v9;
  double result;
  __int128 __dst;
  unint64_t v12;

  if (__n >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__n >= 0x17)
  {
    v7 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__n | 7) != 0x17)
      v7 = __n | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = __n;
    v12 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v12) = __n;
  p_dst = &__dst;
  if (__n)
LABEL_8:
    memcpy(p_dst, __src, __n);
  *((_BYTE *)p_dst + __n) = 0;
  v9 = (void **)(a1 + 168);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*v9);
  result = *(double *)&__dst;
  *(_OWORD *)v9 = __dst;
  *(_QWORD *)(a1 + 184) = v12;
  return result;
}

uint64_t LLVMGetSourceFileName(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*(char *)(a1 + 215) < 0)
    v2 = *(_QWORD *)(a1 + 200);
  else
    v2 = *(unsigned __int8 *)(a1 + 215);
  v3 = a1 + 192;
  *a2 = v2;
  if (*(char *)(a1 + 215) < 0)
    return *(_QWORD *)v3;
  return v3;
}

uint64_t LLVMGetDataLayoutStr(uint64_t a1)
{
  uint64_t result;

  result = a1 + 480;
  if (*(char *)(a1 + 503) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t LLVMGetDataLayout(uint64_t a1)
{
  uint64_t result;

  result = a1 + 480;
  if (*(char *)(a1 + 503) < 0)
    return *(_QWORD *)result;
  return result;
}

void LLVMSetDataLayout(uint64_t a1, char *__s)
{
  size_t v4;

  if (__s)
    v4 = strlen(__s);
  else
    v4 = 0;
  llvm::DataLayout::reset(a1 + 272, __s, v4);
}

uint64_t LLVMGetTarget(uint64_t a1)
{
  uint64_t result;

  result = a1 + 216;
  if (*(char *)(a1 + 239) < 0)
    return *(_QWORD *)result;
  return result;
}

double LLVMSetTarget(uint64_t a1, char *__s)
{
  size_t v4;

  if (__s)
    v4 = strlen(__s);
  else
    v4 = 0;
  return sub_1C4D828E4(a1, __s, v4);
}

char *LLVMCopyModuleFlagsMetadata(uint64_t a1, _QWORD *a2)
{
  uint64_t NamedMetadata;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  __int128 v11;
  int v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD v26[4];
  __int16 v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[25];

  v30[24] = *MEMORY[0x1E0C80C00];
  v28 = v30;
  v29 = 0x800000000;
  v26[0] = "llvm.module.flags";
  v27 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(a1, (uint64_t)v26);
  if (NamedMetadata)
  {
    v4 = NamedMetadata;
    v5 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = 8 * v5;
      do
      {
        v8 = *(_QWORD *)(**(_QWORD **)(v4 + 48) + v6);
        v25 = 0;
        v23 = 0;
        v24 = 0;
        if (llvm::Module::isValidModuleFlag(v8, &v25, &v24, &v23))
        {
          LODWORD(v26[0]) = v25;
          v26[1] = v24;
          v26[2] = v23;
          v9 = sub_1C4926708((uint64_t)&v28, (unint64_t)v26, 1);
          v10 = (char *)v28 + 24 * v29;
          v11 = *(_OWORD *)v9;
          *((_QWORD *)v10 + 2) = *(_QWORD *)(v9 + 16);
          *(_OWORD *)v10 = v11;
          LODWORD(v29) = v29 + 1;
        }
        v6 += 8;
      }
      while (v7 != v6);
    }
  }
  v12 = v29;
  v13 = (char *)malloc_type_malloc(32 * v29, 0x4065EBACuLL);
  if (!v13 && (v12 || (v13 = (char *)malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  v14 = v29;
  v15 = v28;
  if ((_DWORD)v29)
  {
    v16 = v13 + 16;
    v17 = (char *)v28 + 16;
    v18 = v29;
    do
    {
      *((_DWORD *)v16 - 4) = *((_DWORD *)v17 - 4) - 1;
      v19 = *(uint64_t **)(*(v17 - 1) + 8);
      v20 = *v19;
      *(v16 - 1) = v19 + 3;
      *v16 = v20;
      v21 = *v17;
      v17 += 3;
      v16[1] = v21;
      v16 += 4;
      --v18;
    }
    while (v18);
  }
  else
  {
    v14 = 0;
  }
  *a2 = v14;
  if (v15 != v30)
    free(v15);
  return v13;
}

uint64_t LLVMModuleFlagEntriesGetFlagBehavior(uint64_t a1, unsigned int a2)
{
  return *(unsigned int *)(a1 + 32 * a2);
}

uint64_t LLVMModuleFlagEntriesGetKey(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;

  v3 = a1 + 32 * a2;
  result = *(_QWORD *)(v3 + 8);
  *a3 = *(_QWORD *)(v3 + 16);
  return result;
}

uint64_t LLVMModuleFlagEntriesGetMetadata(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 32 * a2 + 24);
}

_QWORD *LLVMAddModuleFlag(uint64_t **a1, int a2, unsigned __int8 *a3, size_t a4, uint64_t a5)
{
  return llvm::Module::addModuleFlag(a1, (llvm::Type *)(a2 + 1), a3, a4, a5);
}

_QWORD *LLVMDumpModule(llvm *a1)
{
  llvm::raw_ostream *v2;

  v2 = (llvm::raw_ostream *)llvm::errs(a1);
  return llvm::Module::print((const std::string *)a1, v2, 0, 0, 1);
}

uint64_t LLVMPrintModuleToFile(const std::string *a1, char *a2, char **a3)
{
  size_t v6;
  int v7;
  void *v8;
  std::string *v9;
  uint64_t v10;
  std::string *v12;
  int v13;
  std::string *v14;
  std::error_code v15;
  std::string v16;
  std::string v17;
  _BYTE v18[72];
  std::error_code v19;
  std::error_code v20;

  v20.__val_ = 0;
  v20.__cat_ = std::system_category();
  if (a2)
    v6 = strlen(a2);
  else
    v6 = 0;
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v18, a2, v6, (uint64_t)&v20, 3);
  if (v20.__val_)
  {
    std::error_code::message(&v17, &v20);
    v7 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
    v8 = (void *)v17.__r_.__value_.__r.__words[0];
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v17;
    else
      v9 = (std::string *)v17.__r_.__value_.__r.__words[0];
    *a3 = strdup((const char *)v9);
    if ((v7 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
  llvm::Module::print(a1, (llvm::raw_ostream *)v18, 0, 0, 0);
  llvm::raw_fd_ostream::close((llvm::raw_fd_ostream *)v18);
  if (!v19.__val_)
  {
    v10 = 0;
    goto LABEL_11;
  }
  v15 = v19;
  std::error_code::message(&v16, &v15);
  v12 = std::string::insert(&v16, 0, "Error printing to file: ");
  v17 = *v12;
  v12->__r_.__value_.__r.__words[0] = 0;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v13 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
  v8 = (void *)v17.__r_.__value_.__r.__words[0];
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v17;
  else
    v14 = (std::string *)v17.__r_.__value_.__r.__words[0];
  *a3 = strdup((const char *)v14);
  if (v13 < 0)
LABEL_9:
    operator delete(v8);
LABEL_10:
  v10 = 1;
LABEL_11:
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v18);
  return v10;
}

char *LLVMPrintModuleToString(const std::string *a1)
{
  uint64_t v1;
  char v2;
  const char *v3;
  char *v4;
  void (**v6)(llvm::raw_ostream *__hidden);
  int v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  int v13;
  void **v14;
  void *v15[2];
  uint64_t v16;

  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  v7 = 0;
  v11 = 0;
  v12 = 0;
  v6 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v14 = v15;
  v13 = 0;
  v9 = 0;
  v10 = 0;
  v8 = 0;
  llvm::Module::print(a1, (llvm::raw_ostream *)&v6, 0, 0, 0);
  v1 = v10 - v8;
  if (v10 != v8)
  {
    v10 = v8;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v6, v8, v1);
  }
  v2 = HIBYTE(v16);
  if (v16 >= 0)
    v3 = (const char *)v15;
  else
    v3 = (const char *)v15[0];
  v4 = strdup(v3);
  v6 = off_1E81A6E70;
  if (v13 == 1 && v8)
  {
    MEMORY[0x1CAA32F9C](v8, 0x1000C8077774924);
    v2 = HIBYTE(v16);
  }
  if (v2 < 0)
    operator delete(v15[0]);
  return v4;
}

void LLVMSetModuleInlineAsm(uint64_t a1, char *__s)
{
  size_t v4;

  if (__s)
    v4 = strlen(__s);
  else
    v4 = 0;
  LLVMSetModuleInlineAsm2_0(a1, __s, v4);
}

uint64_t LLVMGetModuleInlineAsm(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*(char *)(a1 + 111) < 0)
    v2 = *(_QWORD *)(a1 + 96);
  else
    v2 = *(unsigned __int8 *)(a1 + 111);
  v3 = a1 + 88;
  *a2 = v2;
  if (*(char *)(a1 + 111) < 0)
    return *(_QWORD *)v3;
  return v3;
}

uint64_t LLVMGetInlineAsm(llvm::PointerType *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, int a9)
{
  return llvm::InlineAsm::get(a1, a2, a3, a4, a5, a6 != 0, a7 != 0, a8 == 1, a9 != 0);
}

uint64_t LLVMGetModuleContext(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t LLVMGetTypeKind(uint64_t a1)
{
  return *(unsigned int *)((char *)&unk_1C85FD304 + ((uint64_t)((unint64_t)*(unsigned int *)(a1 + 8) << 56) >> 54));
}

uint64_t LLVMTypeIsSized(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 8);
  if (v1 > 0x11)
    goto LABEL_6;
  v2 = 1;
  if (((1 << v1) & 0xAC7F) == 0)
  {
    if (((1 << v1) & 0x30000) != 0)
      return llvm::Type::isSizedDerivedType(a1, 0);
LABEL_6:
    if ((v1 & 0xFE) != 0x12 && v1 != 21)
      return 0;
    return llvm::Type::isSizedDerivedType(a1, 0);
  }
  return v2;
}

uint64_t LLVMGetTypeContext(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t LLVMDumpType(llvm *a1)
{
  llvm::raw_ostream *v2;

  v2 = (llvm::raw_ostream *)llvm::errs(a1);
  return llvm::Type::print(a1, v2, 1, 0);
}

char *LLVMPrintTypeToString(llvm::Type *a1)
{
  uint64_t v1;
  char v2;
  const char *v3;
  char *v4;
  void (**v6)(llvm::raw_ostream *__hidden);
  int v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  int v13;
  void **v14;
  void *v15[2];
  uint64_t v16;

  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  v7 = 0;
  v11 = 0;
  v12 = 0;
  v6 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v14 = v15;
  v13 = 0;
  v9 = 0;
  v10 = 0;
  v8 = 0;
  if (a1)
    llvm::Type::print(a1, (llvm::raw_ostream *)&v6, 0, 0);
  else
    llvm::raw_ostream::write((llvm::raw_ostream *)&v6, "Printing <null> Type", 0x14uLL);
  v1 = v10 - v8;
  if (v10 != v8)
  {
    v10 = v8;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v6, v8, v1);
  }
  v2 = HIBYTE(v16);
  if (v16 >= 0)
    v3 = (const char *)v15;
  else
    v3 = (const char *)v15[0];
  v4 = strdup(v3);
  v6 = off_1E81A6E70;
  if (v13 == 1 && v8)
  {
    MEMORY[0x1CAA32F9C](v8, 0x1000C8077774924);
    v2 = HIBYTE(v16);
  }
  if (v2 < 0)
    operator delete(v15[0]);
  return v4;
}

uint64_t LLVMInt1TypeInContext(_QWORD *a1)
{
  return *a1 + 1888;
}

uint64_t LLVMInt8TypeInContext(_QWORD *a1)
{
  return *a1 + 1912;
}

uint64_t LLVMInt16TypeInContext(_QWORD *a1)
{
  return *a1 + 1936;
}

uint64_t LLVMInt32TypeInContext(_QWORD *a1)
{
  return *a1 + 1960;
}

uint64_t LLVMInt64TypeInContext(_QWORD *a1)
{
  return *a1 + 1984;
}

uint64_t LLVMInt128TypeInContext(_QWORD *a1)
{
  return *a1 + 2008;
}

_QWORD *LLVMIntTypeInContext(_QWORD *a1, int a2)
{
  _QWORD *result;
  _DWORD *v4;
  int v5;
  int v6;

  v6 = a2;
  if (a2 <= 63)
  {
    if (a2 <= 31)
    {
      switch(a2)
      {
        case 16:
          return (_QWORD *)(*a1 + 1936);
        case 8:
          return (_QWORD *)(*a1 + 1912);
        case 1:
          return (_QWORD *)(*a1 + 1888);
      }
    }
    else if (a2 == 32)
    {
      return (_QWORD *)(*a1 + 1960);
    }
  }
  else
  {
    if (a2 == 64)
      return (_QWORD *)(*a1 + 1984);
    if (a2 == 128)
      return (_QWORD *)(*a1 + 2008);
  }
  v4 = sub_1C5270984(*a1 + 2168, &v6);
  result = (_QWORD *)*((_QWORD *)v4 + 1);
  if (!result)
  {
    result = (_QWORD *)sub_1C484358C(*a1 + 2040, 24, 3);
    v5 = v6;
    *result = a1;
    result[2] = 0;
    result[1] = (v5 << 8) | 0xDu;
    *((_QWORD *)v4 + 1) = result;
  }
  return result;
}

uint64_t LLVMInt1Type()
{
  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  return *(_QWORD *)qword_1EF8F7038[0] + 1888;
}

uint64_t LLVMInt8Type()
{
  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  return *(_QWORD *)qword_1EF8F7038[0] + 1912;
}

uint64_t LLVMInt16Type()
{
  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  return *(_QWORD *)qword_1EF8F7038[0] + 1936;
}

uint64_t LLVMInt32Type()
{
  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  return *(_QWORD *)qword_1EF8F7038[0] + 1960;
}

uint64_t LLVMInt64Type()
{
  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  return *(_QWORD *)qword_1EF8F7038[0] + 1984;
}

uint64_t LLVMInt128Type()
{
  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  return *(_QWORD *)qword_1EF8F7038[0] + 2008;
}

_QWORD *LLVMIntType(int a1)
{
  _QWORD *v3;
  _QWORD *result;
  _DWORD *v5;
  int v6;
  int v7;

  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  v3 = (_QWORD *)qword_1EF8F7038[0];
  v7 = a1;
  if (a1 <= 63)
  {
    if (a1 <= 31)
    {
      switch(a1)
      {
        case 16:
          return (_QWORD *)(*(_QWORD *)qword_1EF8F7038[0] + 1936);
        case 8:
          return (_QWORD *)(*(_QWORD *)qword_1EF8F7038[0] + 1912);
        case 1:
          return (_QWORD *)(*(_QWORD *)qword_1EF8F7038[0] + 1888);
      }
    }
    else if (a1 == 32)
    {
      return (_QWORD *)(*(_QWORD *)qword_1EF8F7038[0] + 1960);
    }
  }
  else
  {
    if (a1 == 64)
      return (_QWORD *)(*(_QWORD *)qword_1EF8F7038[0] + 1984);
    if (a1 == 128)
      return (_QWORD *)(*(_QWORD *)qword_1EF8F7038[0] + 2008);
  }
  v5 = sub_1C5270984(*(_QWORD *)qword_1EF8F7038[0] + 2168, &v7);
  result = (_QWORD *)*((_QWORD *)v5 + 1);
  if (!result)
  {
    result = (_QWORD *)sub_1C484358C(*v3 + 2040, 24, 3);
    v6 = v7;
    *result = v3;
    result[2] = 0;
    result[1] = (v6 << 8) | 0xDu;
    *((_QWORD *)v5 + 1) = result;
  }
  return result;
}

uint64_t LLVMGetIntTypeWidth(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) >> 8;
}

uint64_t LLVMHalfTypeInContext(_QWORD *a1)
{
  return *a1 + 1624;
}

uint64_t LLVMBFloatTypeInContext(_QWORD *a1)
{
  return *a1 + 1648;
}

uint64_t LLVMFloatTypeInContext(_QWORD *a1)
{
  return *a1 + 1672;
}

uint64_t LLVMDoubleTypeInContext(_QWORD *a1)
{
  return *a1 + 1696;
}

uint64_t LLVMX86FP80TypeInContext(_QWORD *a1)
{
  return *a1 + 1768;
}

uint64_t LLVMFP128TypeInContext(_QWORD *a1)
{
  return *a1 + 1792;
}

uint64_t LLVMPPCFP128TypeInContext(_QWORD *a1)
{
  return *a1 + 1816;
}

uint64_t LLVMX86MMXTypeInContext(_QWORD *a1)
{
  return *a1 + 1840;
}

uint64_t LLVMX86AMXTypeInContext(_QWORD *a1)
{
  return *a1 + 1864;
}

uint64_t LLVMHalfType()
{
  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  return *(_QWORD *)qword_1EF8F7038[0] + 1624;
}

uint64_t LLVMBFloatType()
{
  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  return *(_QWORD *)qword_1EF8F7038[0] + 1648;
}

uint64_t LLVMFloatType()
{
  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  return *(_QWORD *)qword_1EF8F7038[0] + 1672;
}

uint64_t LLVMDoubleType()
{
  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  return *(_QWORD *)qword_1EF8F7038[0] + 1696;
}

uint64_t LLVMX86FP80Type()
{
  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  return *(_QWORD *)qword_1EF8F7038[0] + 1768;
}

uint64_t LLVMFP128Type()
{
  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  return *(_QWORD *)qword_1EF8F7038[0] + 1792;
}

uint64_t LLVMPPCFP128Type()
{
  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  return *(_QWORD *)qword_1EF8F7038[0] + 1816;
}

uint64_t LLVMX86MMXType()
{
  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  return *(_QWORD *)qword_1EF8F7038[0] + 1840;
}

uint64_t LLVMX86AMXType()
{
  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  return *(_QWORD *)qword_1EF8F7038[0] + 1864;
}

unint64_t LLVMFunctionType(uint64_t **a1, uint64_t *a2, unsigned int a3, int a4)
{
  return llvm::FunctionType::get(a1, a2, a3, a4 != 0);
}

BOOL LLVMIsFunctionVarArg(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) > 0xFFu;
}

uint64_t LLVMGetReturnType(uint64_t a1)
{
  return **(_QWORD **)(a1 + 16);
}

uint64_t LLVMCountParamTypes(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 12) - 1);
}

uint64_t LLVMGetParamTypes(uint64_t result, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  if (8 * *(unsigned int *)(result + 12) != 8)
  {
    v2 = (uint64_t *)(*(_QWORD *)(result + 16) + 8);
    v3 = 8 * ((8 * *(unsigned int *)(result + 12) - 8) >> 3);
    do
    {
      v4 = *v2++;
      *a2++ = v4;
      v3 -= 8;
    }
    while (v3);
  }
  return result;
}

unint64_t LLVMStructTypeInContext(uint64_t *a1, uint64_t a2, unsigned int a3, int a4)
{
  return llvm::StructType::get(a1, a2, a3, a4 != 0);
}

unint64_t LLVMStructType(uint64_t a1, unsigned int a2, int a3)
{
  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  return llvm::StructType::get((uint64_t *)qword_1EF8F7038[0], a1, a2, a3 != 0);
}

unint64_t LLVMStructCreateNamed(_QWORD *a1, char *__s)
{
  size_t v4;

  if (__s)
    v4 = strlen(__s);
  else
    v4 = 0;
  return llvm::StructType::create(a1, (unsigned __int8 *)__s, v4);
}

uint64_t LLVMGetStructName(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
    return v1 + 16;
  else
    return 0;
}

unint64_t LLVMStructSetBody(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  return llvm::StructType::setBody(a1, a2, a3, a4 != 0);
}

uint64_t LLVMCountStructElementTypes(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t LLVMGetStructElementTypes(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(result + 16);
    v4 = 8 * v2;
    do
    {
      v5 = *v3++;
      *a2++ = v5;
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

uint64_t LLVMStructGetTypeAtIndex(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2);
}

uint64_t LLVMIsPackedStruct(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 8) >> 9) & 1;
}

BOOL LLVMIsOpaqueStruct(uint64_t a1)
{
  return ((*(_DWORD *)(a1 + 8) >> 8) & 1) == 0;
}

uint64_t LLVMIsLiteralStruct(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 8) >> 10) & 1;
}

uint64_t LLVMGetTypeByName(uint64_t **a1, char *__s)
{
  uint64_t *v3;
  size_t v4;

  v3 = *a1;
  if (__s)
    v4 = strlen(__s);
  else
    v4 = 0;
  return llvm::StructType::getTypeByName(v3, (unsigned __int8 *)__s, v4);
}

uint64_t LLVMGetTypeByName2(uint64_t *a1, char *__s)
{
  size_t v4;

  if (__s)
    v4 = strlen(__s);
  else
    v4 = 0;
  return llvm::StructType::getTypeByName(a1, (unsigned __int8 *)__s, v4);
}

uint64_t LLVMGetSubtypes(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(unsigned int *)(result + 12);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(result + 16);
    v4 = 8 * v2;
    do
    {
      v5 = *v3++;
      *a2++ = v5;
      v4 -= 8;
    }
    while (v4);
  }
  return result;
}

double LLVMArrayType(llvm::ArrayType *a1, unsigned int a2)
{
  return llvm::ArrayType::get(a1, (llvm::Type *)a2);
}

uint64_t LLVMGetElementType(uint64_t a1)
{
  uint64_t v1;

  if (a1 && *(_BYTE *)(a1 + 8) == 15)
    v1 = *(_QWORD *)(a1 + 16);
  else
    v1 = a1 + 24;
  return *(_QWORD *)v1;
}

uint64_t LLVMGetNumContainedTypes(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t LLVMGetArrayLength(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t LLVMGetPointerAddressSpace(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) >> 8;
}

uint64_t LLVMGetVectorSize(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t LLVMVoidTypeInContext(_QWORD *a1)
{
  return *a1 + 1576;
}

uint64_t LLVMLabelTypeInContext(_QWORD *a1)
{
  return *a1 + 1600;
}

uint64_t LLVMTokenTypeInContext(_QWORD *a1)
{
  return *a1 + 1744;
}

uint64_t LLVMMetadataTypeInContext(_QWORD *a1)
{
  return *a1 + 1720;
}

uint64_t LLVMVoidType()
{
  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  return *(_QWORD *)qword_1EF8F7038[0] + 1576;
}

uint64_t LLVMLabelType()
{
  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  return *(_QWORD *)qword_1EF8F7038[0] + 1600;
}

uint64_t LLVMTargetExtTypeInContext(_QWORD *a1, char *__s, uint64_t *a3, unsigned int a4, int *a5, unsigned int a6)
{
  size_t v12;

  if (__s)
    v12 = strlen(__s);
  else
    v12 = 0;
  return llvm::TargetExtType::get(a1, __s, v12, a3, a4, a5, a6);
}

uint64_t LLVMTypeOf(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t LLVMGetValueKind(uint64_t a1)
{
  unint64_t v1;

  v1 = *(char *)(a1 + 16);
  if (v1 > 0x1C)
    return 24;
  else
    return dword_1C85FD35C[v1];
}

char *LLVMGetValueName2(uint64_t ***a1, _QWORD *a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ****v7;
  uint64_t ***v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ****v16;
  uint64_t ***v17;
  int v18;
  int v19;

  v2 = a1 >> 4;
  if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
  {
    v3 = ***a1;
    v4 = *(_QWORD *)(v3 + 152);
    v5 = *(unsigned int *)(v3 + 168);
    if ((_DWORD)v5)
    {
      LODWORD(v6) = (v5 - 1) & (v2 ^ (a1 >> 9));
      v7 = (uint64_t ****)(v4 + 16 * v6);
      v8 = *v7;
      if (*v7 == a1)
      {
LABEL_9:
        v11 = (uint64_t)*v7[1];
        goto LABEL_10;
      }
      v9 = 1;
      while (v8 != (uint64_t ***)-4096)
      {
        v10 = v6 + v9++;
        v6 = v10 & (v5 - 1);
        v8 = *(uint64_t ****)(v4 + 16 * v6);
        if (v8 == a1)
        {
          v7 = (uint64_t ****)(v4 + 16 * v6);
          goto LABEL_9;
        }
      }
    }
    v7 = (uint64_t ****)(v4 + 16 * v5);
    goto LABEL_9;
  }
  v11 = 0;
LABEL_10:
  *a2 = v11;
  if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
  {
    v12 = ***a1;
    v13 = *(_QWORD *)(v12 + 152);
    v14 = *(unsigned int *)(v12 + 168);
    if ((_DWORD)v14)
    {
      LODWORD(v15) = (v14 - 1) & (v2 ^ (a1 >> 9));
      v16 = (uint64_t ****)(v13 + 16 * v15);
      v17 = *v16;
      if (*v16 == a1)
        return (char *)(v16[1] + 2);
      v18 = 1;
      while (v17 != (uint64_t ***)-4096)
      {
        v19 = v15 + v18++;
        v15 = v19 & (v14 - 1);
        v17 = *(uint64_t ****)(v13 + 16 * v15);
        if (v17 == a1)
        {
          v16 = (uint64_t ****)(v13 + 16 * v15);
          return (char *)(v16[1] + 2);
        }
      }
    }
    v16 = (uint64_t ****)(v13 + 16 * v14);
    return (char *)(v16[1] + 2);
  }
  return &byte_1C871356D;
}

void LLVMSetValueName2(uint64_t ***a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[4];
  __int16 v4;

  v4 = 261;
  v3[0] = a2;
  v3[1] = a3;
  llvm::Value::setName(a1, (uint64_t)v3);
}

char *LLVMGetValueName(uint64_t ***a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ****v5;
  uint64_t ***v6;
  int v7;
  int v8;

  if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
  {
    v1 = ***a1;
    v2 = *(_QWORD *)(v1 + 152);
    v3 = *(unsigned int *)(v1 + 168);
    if ((_DWORD)v3)
    {
      LODWORD(v4) = (v3 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      v5 = (uint64_t ****)(v2 + 16 * v4);
      v6 = *v5;
      if (*v5 == a1)
        return (char *)(v5[1] + 2);
      v7 = 1;
      while (v6 != (uint64_t ***)-4096)
      {
        v8 = v4 + v7++;
        v4 = v8 & (v3 - 1);
        v6 = *(uint64_t ****)(v2 + 16 * v4);
        if (v6 == a1)
        {
          v5 = (uint64_t ****)(v2 + 16 * v4);
          return (char *)(v5[1] + 2);
        }
      }
    }
    v5 = (uint64_t ****)(v2 + 16 * v3);
    return (char *)(v5[1] + 2);
  }
  return &byte_1C871356D;
}

void LLVMSetValueName(uint64_t ***a1, _BYTE *a2)
{
  char v2;
  _BYTE *v3;
  char v4;
  char v5;

  v2 = 1;
  v5 = 1;
  if (*a2)
  {
    v3 = a2;
    v2 = 3;
  }
  v4 = v2;
  llvm::Value::setName(a1, (uint64_t)&v3);
}

void LLVMDumpValue(llvm *a1)
{
  llvm::raw_ostream *v2;

  v2 = (llvm::raw_ostream *)llvm::errs(a1);
  llvm::Value::print(a1, v2, 1);
}

char *LLVMPrintValueToString(llvm::Value *a1)
{
  uint64_t v1;
  char v2;
  const char *v3;
  char *v4;
  void (**v6)(llvm::raw_ostream *__hidden);
  int v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  int v13;
  void **v14;
  void *v15[2];
  uint64_t v16;

  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  v7 = 0;
  v11 = 0;
  v12 = 0;
  v6 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v14 = v15;
  v13 = 0;
  v9 = 0;
  v10 = 0;
  v8 = 0;
  if (a1)
    llvm::Value::print(a1, (llvm::raw_ostream *)&v6, 0);
  else
    llvm::raw_ostream::write((llvm::raw_ostream *)&v6, "Printing <null> Value", 0x15uLL);
  v1 = v10 - v8;
  if (v10 != v8)
  {
    v10 = v8;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v6, v8, v1);
  }
  v2 = HIBYTE(v16);
  if (v16 >= 0)
    v3 = (const char *)v15;
  else
    v3 = (const char *)v15[0];
  v4 = strdup(v3);
  v6 = off_1E81A6E70;
  if (v13 == 1 && v8)
  {
    MEMORY[0x1CAA32F9C](v8, 0x1000C8077774924);
    v2 = HIBYTE(v16);
  }
  if (v2 < 0)
    operator delete(v15[0]);
  return v4;
}

void LLVMReplaceAllUsesWith(llvm::ValueAsMetadata *a1, llvm::Value *a2)
{
  llvm::Value::doRAUW(a1, a2, (llvm::Value *)1);
}

uint64_t LLVMHasMetadata(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 48))
    return 1;
  else
    return (*(_DWORD *)(a1 + 20) >> 29) & 1;
}

uint64_t LLVMGetMetadata(uint64_t ***a1, int a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t ****v10;
  uint64_t ***v11;
  uint64_t ****v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 **v17;
  uint64_t v18;
  uint64_t ****v20;
  uint64_t v21;
  uint64_t ***v22;

  v4 = (unsigned __int8 *)a1[6];
  if (!v4 && (*((_BYTE *)a1 + 23) & 0x20) == 0)
    return 0;
  if (a2)
  {
    if ((*((_BYTE *)a1 + 23) & 0x20) == 0)
      return 0;
    v5 = ***a1;
    v22 = a1;
    v6 = *(_DWORD *)(v5 + 2496);
    if (v6)
    {
      v7 = *(_QWORD *)(v5 + 2480);
      v8 = v6 - 1;
      v9 = v8 & ((a1 >> 4) ^ (a1 >> 9));
      v10 = (uint64_t ****)(v7 + 40 * v9);
      v11 = *v10;
      if (*v10 == a1)
      {
LABEL_15:
        v16 = *((unsigned int *)v10 + 4);
        if (!(_DWORD)v16)
          return 0;
        v17 = (unsigned __int8 **)(v10[1] + 1);
        v18 = 16 * v16;
        while (*((_DWORD *)v17 - 2) != a2)
        {
          v17 += 2;
          v18 -= 16;
          if (!v18)
            return 0;
        }
        v4 = *v17;
        goto LABEL_21;
      }
      v12 = 0;
      v13 = 1;
      while (v11 != (uint64_t ***)-4096)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v11 == (uint64_t ***)-8192;
        if (v14)
          v12 = v10;
        v15 = v9 + v13++;
        v9 = v15 & v8;
        v10 = (uint64_t ****)(v7 + 40 * v9);
        v11 = *v10;
        if (*v10 == a1)
          goto LABEL_15;
      }
      if (v12)
        v20 = v12;
      else
        v20 = v10;
    }
    else
    {
      v20 = 0;
    }
    v10 = (uint64_t ****)sub_1C541AB24(v5 + 2480, (uint64_t)&v22, (uint64_t *)&v22, v20);
    v21 = (uint64_t)v22;
    v10[3] = 0;
    v10[4] = 0;
    *v10 = (uint64_t ***)v21;
    v10[1] = (uint64_t ***)(v10 + 3);
    v10[2] = (uint64_t ***)0x100000000;
    goto LABEL_15;
  }
LABEL_21:
  if (v4)
    return llvm::MetadataAsValue::get(**a1, v4);
  return 0;
}

void LLVMSetMetadata(uint64_t a1, int a2, uint64_t a3)
{
  unsigned __int8 *v5;
  llvm::MDNode *v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;

  if (a3)
  {
    v5 = sub_1C5387FE8(a3);
    if (v5)
    {
      v6 = (llvm::MDNode *)v5;
      if (!a2)
      {
        v9 = v5;
        llvm::MetadataTracking::track((uint64_t)&v9, v5, 2);
        goto LABEL_12;
      }
LABEL_10:
      llvm::Value::setMetadata((llvm::Value *)a1, a2, v6);
      return;
    }
  }
  if (!*(_QWORD *)(a1 + 48) && (*(_BYTE *)(a1 + 23) & 0x20) == 0)
    return;
  if (a2)
  {
    v6 = 0;
    goto LABEL_10;
  }
  v9 = 0;
LABEL_12:
  v7 = (unsigned __int8 **)(a1 + 48);
  if (&v9 == v7)
  {
    if (v9)
      llvm::MetadataTracking::untrack((uint64_t)&v9, v9);
  }
  else
  {
    if (*v7)
      llvm::MetadataTracking::untrack((uint64_t)v7, *v7);
    v8 = v9;
    *v7 = v9;
    if (v8)
      llvm::MetadataTracking::retrack((uint64_t)&v9, v8, (uint64_t)v7);
  }
}

unsigned __int8 *sub_1C5387FE8(uint64_t a1)
{
  unsigned __int8 *result;
  unsigned __int8 *v3;

  result = *(unsigned __int8 **)(a1 + 24);
  v3 = result;
  if (*result - 4 >= 0x1F)
    return (unsigned __int8 *)llvm::MDTuple::getImpl(**(uint64_t ***)a1, &v3, 1, 0, 1);
  return result;
}

char *LLVMInstructionGetAllMetadataOtherThanDebugLoc(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = &v4;
  v4 = a1;
  return sub_1C5388070(a2, (void (*)(uint64_t, void **))sub_1C53923D8, (uint64_t)&v3);
}

char *sub_1C5388070(_QWORD *a1, void (*a2)(uint64_t, void **), uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v13;
  uint64_t v14;
  _QWORD v15[17];

  v15[16] = *MEMORY[0x1E0C80C00];
  v13 = v15;
  v14 = 0x800000000;
  a2(a3, &v13);
  v4 = v14;
  v5 = (char *)malloc_type_malloc(16 * v14, 0x4065EBACuLL);
  if (!v5 && (v4 || (v5 = (char *)malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  v6 = v14;
  v7 = v13;
  if ((_DWORD)v14)
  {
    v8 = v5 + 8;
    v9 = (char *)v13 + 8;
    v10 = v14;
    do
    {
      *((_DWORD *)v8 - 2) = *((_DWORD *)v9 - 2);
      v11 = *v9;
      v9 += 2;
      *v8 = v11;
      v8 += 2;
      --v10;
    }
    while (v10);
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  if (v7 != v15)
    free(v7);
  return v5;
}

uint64_t LLVMIsAArgument(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 21)
      return 0;
  }
  return result;
}

uint64_t LLVMIsABasicBlock(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 22)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAInlineAsm(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 24)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAUser(uint64_t result)
{
  if (result)
  {
    if (*(unsigned __int8 *)(result + 16) - 28 >= 0xFFFFFFF9)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAConstant(uint64_t result)
{
  if (result)
  {
    if (*(unsigned __int8 *)(result + 16) >= 0x15u)
      return 0;
  }
  return result;
}

uint64_t LLVMIsABlockAddress(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 4)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAConstantAggregateZero(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 13)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAConstantArray(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 8)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAConstantDataSequential(uint64_t result)
{
  if (result)
  {
    if ((*(_BYTE *)(result + 16) & 0xFE) != 0xE)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAConstantDataArray(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 14)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAConstantDataVector(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 15)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAConstantExpr(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 5)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAConstantFP(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 17)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAConstantInt(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 16)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAConstantPointerNull(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 19)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAConstantStruct(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 9)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAConstantTokenNone(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 20)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAConstantVector(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 10)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAGlobalValue(uint64_t result)
{
  if (result)
  {
    if (*(unsigned __int8 *)(result + 16) >= 4u)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAGlobalAlias(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 1)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAGlobalObject(uint64_t result)
{
  unsigned int v1;

  if (result)
  {
    v1 = *(unsigned __int8 *)(result + 16);
    if (v1 > 3 || v1 == 1)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAFunction(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16))
      return 0;
  }
  return result;
}

uint64_t LLVMIsAGlobalVariable(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 3)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAGlobalIFunc(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 2)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAUndefValue(uint64_t result)
{
  if (result)
  {
    if (*(unsigned __int8 *)(result + 16) - 11 >= 2)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAPoisonValue(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 12)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAInstruction(uint64_t result)
{
  if (result)
  {
    if (*(unsigned __int8 *)(result + 16) <= 0x1Bu)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAUnaryOperator(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 40)
      return 0;
  }
  return result;
}

uint64_t LLVMIsABinaryOperator(uint64_t result)
{
  unsigned int v1;

  if (result)
  {
    v1 = *(unsigned __int8 *)(result + 16);
    if (v1 - 41 >= 0x12 || v1 <= 0x1B)
      return 0;
  }
  return result;
}

uint64_t LLVMIsACallInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 84)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAIntrinsicInst(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    if (*(_BYTE *)(result + 16) == 84
      && (v1 = *(_QWORD *)(result - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(result + 72))
    {
      if ((*(_BYTE *)(v1 + 33) & 0x20) == 0)
        return 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsADbgInfoIntrinsic(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    if (sub_1C4D99D08(result))
      return v1;
    else
      return 0;
  }
  return result;
}

uint64_t LLVMIsADbgVariableIntrinsic(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    if (sub_1C53923FC(result))
      return v1;
    else
      return 0;
  }
  return result;
}

uint64_t LLVMIsADbgDeclareInst(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    if (sub_1C5021D50(result))
      return v1;
    else
      return 0;
  }
  return result;
}

uint64_t LLVMIsADbgLabelInst(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    if (sub_1C5392454(result))
      return v1;
    else
      return 0;
  }
  return result;
}

uint64_t LLVMIsAMemIntrinsic(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    if (sub_1C4DE85D0(result))
      return v1;
    else
      return 0;
  }
  return result;
}

uint64_t LLVMIsAMemCpyInst(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    if (sub_1C53924A0(result))
      return v1;
    else
      return 0;
  }
  return result;
}

uint64_t LLVMIsAMemMoveInst(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    if (sub_1C53924F4(result))
      return v1;
    else
      return 0;
  }
  return result;
}

uint64_t LLVMIsAMemSetInst(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    if (sub_1C5392540(result))
      return v1;
    else
      return 0;
  }
  return result;
}

uint64_t LLVMIsACmpInst(uint64_t result)
{
  unsigned int v1;

  if (result)
  {
    v1 = *(unsigned __int8 *)(result + 16);
    if (v1 - 81 >= 2 || v1 <= 0x1B)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAFCmpInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 82)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAICmpInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 81)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAExtractElementInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 89)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAGetElementPtrInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 62)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAInsertElementInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 90)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAInsertValueInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 93)
      return 0;
  }
  return result;
}

uint64_t LLVMIsALandingPadInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 94)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAPHINode(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 83)
      return 0;
  }
  return result;
}

uint64_t LLVMIsASelectInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 85)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAShuffleVectorInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 91)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAStoreInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 61)
      return 0;
  }
  return result;
}

uint64_t LLVMIsABranchInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 30)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAIndirectBrInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 32)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAInvokeInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 33)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAReturnInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 29)
      return 0;
  }
  return result;
}

uint64_t LLVMIsASwitchInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 31)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAUnreachableInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 35)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAResumeInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 34)
      return 0;
  }
  return result;
}

uint64_t LLVMIsACleanupReturnInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 36)
      return 0;
  }
  return result;
}

uint64_t LLVMIsACatchReturnInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 37)
      return 0;
  }
  return result;
}

uint64_t LLVMIsACatchSwitchInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 38)
      return 0;
  }
  return result;
}

uint64_t LLVMIsACallBrInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 39)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAFuncletPadInst(uint64_t result)
{
  unsigned int v1;

  if (result)
  {
    v1 = *(unsigned __int8 *)(result + 16);
    if (v1 - 79 >= 2 || v1 <= 0x1B)
      return 0;
  }
  return result;
}

uint64_t LLVMIsACatchPadInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 80)
      return 0;
  }
  return result;
}

uint64_t LLVMIsACleanupPadInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 79)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAUnaryInstruction(uint64_t result)
{
  unsigned int v1;

  if (result)
  {
    v1 = *(unsigned __int8 *)(result + 16);
    if (v1 < 0x1C)
    {
      return 0;
    }
    else if ((v1 - 40 > 0x34 || ((1 << (v1 - 40)) & 0x11000000180001) == 0) && v1 - 66 >= 0xD)
    {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMIsAAllocaInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 59)
      return 0;
  }
  return result;
}

uint64_t LLVMIsACastInst(uint64_t result)
{
  unsigned int v1;

  if (result)
  {
    v1 = *(unsigned __int8 *)(result + 16);
    if (v1 - 66 >= 0xD || v1 <= 0x1B)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAAddrSpaceCastInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 78)
      return 0;
  }
  return result;
}

uint64_t LLVMIsABitCastInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 77)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAFPExtInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 74)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAFPToSIInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 70)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAFPToUIInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 69)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAFPTruncInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 73)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAIntToPtrInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 76)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAPtrToIntInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 75)
      return 0;
  }
  return result;
}

uint64_t LLVMIsASExtInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 68)
      return 0;
  }
  return result;
}

uint64_t LLVMIsASIToFPInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 72)
      return 0;
  }
  return result;
}

uint64_t LLVMIsATruncInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 66)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAUIToFPInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 71)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAZExtInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 67)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAExtractValueInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 92)
      return 0;
  }
  return result;
}

uint64_t LLVMIsALoadInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 60)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAVAArgInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 88)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAFreezeInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 95)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAAtomicCmpXchgInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 64)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAAtomicRMWInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 65)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAFenceInst(uint64_t result)
{
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 63)
      return 0;
  }
  return result;
}

uint64_t LLVMIsAMDNode(uint64_t result)
{
  int v1;
  unsigned int v2;
  unsigned int v3;

  if (!result || *(_BYTE *)(result + 16) != 23)
    return 0;
  v1 = **(unsigned __int8 **)(result + 24);
  v2 = v1 - 4;
  v3 = v1 - 1;
  if (v2 >= 0x1F && v3 >= 2)
    return 0;
  return result;
}

uint64_t LLVMIsAMDString(uint64_t result)
{
  if (!result || *(_BYTE *)(result + 16) != 23 || **(_BYTE **)(result + 24))
    return 0;
  return result;
}

uint64_t LLVMGetFirstUse(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t LLVMGetNextUse(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t LLVMGetUser(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t LLVMGetUsedValue(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t LLVMGetOperand(uint64_t a1, unsigned int a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  int v5;
  uint64_t v6;

  if (a1 && *(_BYTE *)(a1 + 16) == 23)
  {
    v2 = *(unsigned __int8 **)(a1 + 24);
    if (*v2 - 3 >= 0xFFFFFFFE)
    {
      return *((_QWORD *)v2 + 16);
    }
    else
    {
      v3 = *(_QWORD *)&v2[8 * a2 + -8 * *((unsigned int *)v2 + 2)];
      if (v3)
      {
        if (*(_BYTE *)v3 == 1)
          return *(_QWORD *)(v3 + 128);
        else
          return llvm::MetadataAsValue::get(**(uint64_t ***)a1, (unsigned __int8 *)v3);
      }
      else
      {
        return 0;
      }
    }
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 20);
    if ((v5 & 0x40000000) != 0)
      v6 = *(_QWORD *)(a1 - 8);
    else
      v6 = a1 - 32 * (v5 & 0x7FFFFFF);
    return *(_QWORD *)(v6 + 32 * a2);
  }
}

uint64_t LLVMGetOperandUse(uint64_t a1, unsigned int a2)
{
  int v2;
  uint64_t v3;

  v2 = *(_DWORD *)(a1 + 20);
  if ((v2 & 0x40000000) != 0)
    v3 = *(_QWORD *)(a1 - 8);
  else
    v3 = a1 - 32 * (v2 & 0x7FFFFFF);
  return v3 + 32 * a2;
}

uint64_t LLVMSetOperand(uint64_t result, unsigned int a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_DWORD *)(result + 20);
  if ((v3 & 0x40000000) != 0)
    v4 = *(_QWORD *)(result - 8);
  else
    v4 = result - 32 * (v3 & 0x7FFFFFF);
  v5 = v4 + 32 * a2;
  if (*(_QWORD *)v5)
  {
    **(_QWORD **)(v5 + 16) = *(_QWORD *)(v5 + 8);
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      *(_QWORD *)(v6 + 16) = *(_QWORD *)(v5 + 16);
  }
  *(_QWORD *)v5 = a3;
  if (a3)
  {
    v9 = *(_QWORD *)(a3 + 8);
    v7 = (_QWORD *)(a3 + 8);
    v8 = v9;
    v10 = v4 + 32 * a2;
    *(_QWORD *)(v10 + 8) = v9;
    if (v9)
      *(_QWORD *)(v8 + 16) = v10 + 8;
    *(_QWORD *)(v10 + 16) = v7;
    *v7 = v5;
  }
  return result;
}

uint64_t LLVMGetNumOperands(uint64_t a1)
{
  unsigned __int8 *v1;

  if (*(_BYTE *)(a1 + 16) != 23)
    return *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
  v1 = *(unsigned __int8 **)(a1 + 24);
  if (*v1 - 1 >= 2)
    return *((unsigned int *)v1 + 2);
  else
    return 1;
}

uint64_t LLVMGetMDNodeNumOperands(uint64_t a1)
{
  unsigned __int8 *v1;

  v1 = *(unsigned __int8 **)(a1 + 24);
  if (*v1 - 1 >= 2)
    return *((unsigned int *)v1 + 2);
  else
    return 1;
}

BOOL LLVMIsConstant(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16) < 0x15u;
}

uint64_t LLVMIsNull(llvm::Constant *this)
{
  uint64_t result;

  result = 0;
  if (this)
  {
    if (*((unsigned __int8 *)this + 16) <= 0x14u)
      return llvm::Constant::isNullValue(this);
  }
  return result;
}

BOOL LLVMIsUndef(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16) - 11 < 2;
}

BOOL LLVMIsPoison(uint64_t a1)
{
  return *(_BYTE *)(a1 + 16) == 12;
}

uint64_t LLVMMDNodeInContext2(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  return llvm::MDTuple::getImpl(a1, a2, a3, 0, 1);
}

uint64_t LLVMMDStringInContext(uint64_t *a1, unsigned __int8 *a2, unsigned int a3)
{
  unsigned __int8 *v4;

  v4 = (unsigned __int8 *)llvm::MDString::get(a1, a2, a3);
  return llvm::MetadataAsValue::get(a1, v4);
}

uint64_t LLVMMDString(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t *v5;
  unsigned __int8 *v6;

  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  v5 = (uint64_t *)qword_1EF8F7038[0];
  v6 = (unsigned __int8 *)llvm::MDString::get((uint64_t *)qword_1EF8F7038[0], a1, a2);
  return llvm::MetadataAsValue::get(v5, v6);
}

uint64_t LLVMMDNodeInContext(uint64_t *a1, llvm::Value *a2, unsigned int a3)
{
  llvm::Value *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned __int8 *Impl;
  uint64_t v13;
  void *v15;
  uint64_t v16;
  _QWORD v17[9];

  v17[8] = *MEMORY[0x1E0C80C00];
  v15 = v17;
  v16 = 0x800000000;
  if (a3)
  {
    v5 = a2;
    LODWORD(v6) = 0;
    v7 = 8 * a3;
    while (1)
    {
      v8 = *(_QWORD *)v5;
      if (*(_QWORD *)v5)
      {
        v9 = *(unsigned __int8 *)(v8 + 16);
        if (v9 <= 0x14)
        {
          v10 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v8, a2);
          LODWORD(v6) = v16;
        }
        else
        {
          if (v9 != 23)
          {
            Impl = (unsigned __int8 *)llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v8, a2);
            goto LABEL_15;
          }
          v10 = *(_QWORD **)(v8 + 24);
        }
      }
      else
      {
        v10 = 0;
      }
      if (v6 >= HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, (uint64_t)v17, v6 + 1, 8);
        LODWORD(v6) = v16;
      }
      *((_QWORD *)v15 + v6) = v10;
      v6 = (v16 + 1);
      LODWORD(v16) = v16 + 1;
      v5 = (llvm::Value *)((char *)v5 + 8);
      v7 -= 8;
      if (!v7)
      {
        v11 = v15;
        goto LABEL_14;
      }
    }
  }
  v6 = 0;
  v11 = v17;
LABEL_14:
  Impl = (unsigned __int8 *)llvm::MDTuple::getImpl(a1, v11, v6, 0, 1);
LABEL_15:
  v13 = llvm::MetadataAsValue::get(a1, Impl);
  if (v15 != v17)
    free(v15);
  return v13;
}

uint64_t LLVMMDNode(llvm::Value *a1, unsigned int a2)
{
  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  return LLVMMDNodeInContext((uint64_t *)qword_1EF8F7038[0], a1, a2);
}

_QWORD *LLVMValueAsMetadata(uint64_t a1, llvm::Value *a2)
{
  unsigned int v2;

  v2 = *(unsigned __int8 *)(a1 + 16);
  if ((!a1 || v2 > 0x14) && a1 && v2 == 23)
    return *(_QWORD **)(a1 + 24);
  else
    return llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)a1, a2);
}

_DWORD *LLVMGetMDString(uint64_t a1, _DWORD *a2)
{
  _DWORD *result;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;

  result = 0;
  v4 = 0;
  if (a1 && *(_BYTE *)(a1 + 16) == 23)
  {
    v5 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)v5)
    {
      v4 = 0;
      result = 0;
    }
    else
    {
      v6 = *(int **)(v5 + 8);
      v7 = *v6;
      result = v6 + 6;
      v4 = v7;
    }
  }
  *a2 = v4;
  return result;
}

uint64_t LLVMGetFirstNamedMetadata(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 80) == a1 + 72)
    return 0;
  else
    return *(_QWORD *)(a1 + 80);
}

uint64_t LLVMGetLastNamedMetadata(uint64_t a1)
{
  if (a1 + 72 == *(_QWORD *)(a1 + 80))
    return 0;
  else
    return *(_QWORD *)(a1 + 72);
}

uint64_t LLVMGetNextNamedMetadata(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a1 + 40) + 72)
    return 0;
  else
    return *(_QWORD *)(a1 + 8);
}

uint64_t LLVMGetPreviousNamedMetadata(_QWORD *a1)
{
  if (*(_QWORD **)(a1[5] + 80) == a1)
    return 0;
  else
    return *a1;
}

uint64_t LLVMGetNamedMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[4];
  __int16 v5;

  v5 = 261;
  v4[0] = a2;
  v4[1] = a3;
  return llvm::Module::getNamedMetadata(a1, (uint64_t)v4);
}

uint64_t LLVMGetNamedMetadataName(uint64_t a1, _QWORD *a2)
{
  char v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_BYTE *)(a1 + 39);
  v3 = v2;
  v4 = v2 & 0x7F;
  if (v3 < 0)
    v4 = *(_QWORD *)(a1 + 24);
  *a2 = v4;
  v5 = *(char *)(a1 + 39);
  v8 = *(_QWORD *)(a1 + 16);
  result = a1 + 16;
  v7 = v8;
  if (v5 < 0)
    return v7;
  return result;
}

uint64_t LLVMGetMDNodeOperands(uint64_t result, uint64_t *a2)
{
  uint64_t *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a2;
  v3 = *(unsigned __int8 **)(result + 24);
  if (*v3 - 3 >= 0xFFFFFFFE)
  {
    *a2 = *((_QWORD *)v3 + 16);
  }
  else
  {
    v4 = *((unsigned int *)v3 + 2);
    if ((_DWORD)v4)
    {
      v5 = **(uint64_t ***)result;
      v6 = *(_QWORD *)(result + 24);
      do
      {
        v7 = *(_QWORD *)(v6 - 8 * *((unsigned int *)v3 + 2));
        if (v7)
        {
          if (*(_BYTE *)v7 == 1)
            result = *(_QWORD *)(v7 + 128);
          else
            result = llvm::MetadataAsValue::get(v5, (unsigned __int8 *)v7);
        }
        else
        {
          result = 0;
        }
        *v2++ = result;
        v6 += 8;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

uint64_t LLVMGetNamedMetadataNumOperands(uint64_t a1, _BYTE *a2)
{
  char v2;
  uint64_t result;
  _BYTE *v4;
  char v5;
  char v6;

  v2 = 1;
  v6 = 1;
  if (*a2)
  {
    v4 = a2;
    v2 = 3;
  }
  v5 = v2;
  result = llvm::Module::getNamedMetadata(a1, (uint64_t)&v4);
  if (result)
    return *(unsigned int *)(*(_QWORD *)(result + 48) + 8);
  return result;
}

uint64_t LLVMGetNamedMetadataOperands(uint64_t **a1, _BYTE *a2, uint64_t a3)
{
  char v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  _BYTE *v11;
  char v12;
  char v13;

  v5 = 1;
  v13 = 1;
  if (*a2)
  {
    v11 = a2;
    v5 = 3;
  }
  v12 = v5;
  result = llvm::Module::getNamedMetadata((uint64_t)a1, (uint64_t)&v11);
  if (result)
  {
    v7 = result;
    v8 = *(_QWORD *)(result + 48);
    if (*(_DWORD *)(v8 + 8))
    {
      v9 = 0;
      v10 = *a1;
      do
      {
        result = llvm::MetadataAsValue::get(v10, *(unsigned __int8 **)(*(_QWORD *)v8 + 8 * v9));
        *(_QWORD *)(a3 + 8 * v9++) = result;
        v8 = *(_QWORD *)(v7 + 48);
      }
      while (v9 < *(unsigned int *)(v8 + 8));
    }
  }
  return result;
}

_QWORD *LLVMAddNamedMetadataOperand(uint64_t a1, char *__s, uint64_t a3)
{
  size_t v6;
  _QWORD *result;
  _QWORD *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;

  if (__s)
    v6 = strlen(__s);
  else
    v6 = 0;
  result = (_QWORD *)llvm::Module::getOrInsertNamedMetadata(a1, (unsigned __int8 *)__s, v6);
  if (a3)
  {
    v8 = result;
    if (result)
    {
      v9 = sub_1C5387FE8(a3);
      v13 = v9;
      v10 = v8[6];
      v11 = *(unsigned int *)(v10 + 8);
      if (v11 >= *(_DWORD *)(v10 + 12))
      {
        return (_QWORD *)sub_1C5419FD8(v8[6], &v13);
      }
      else
      {
        v12 = v9;
        result = (_QWORD *)(*(_QWORD *)v10 + 8 * v11);
        *result = v12;
        if (v12)
        {
          result = (_QWORD *)llvm::MetadataTracking::track((uint64_t)result, v12, 2);
          LODWORD(v11) = *(_DWORD *)(v10 + 8);
        }
        *(_DWORD *)(v10 + 8) = v11 + 1;
      }
    }
  }
  return result;
}

const char *LLVMGetDebugLocDirectory(unsigned int *a1, _DWORD *a2)
{
  unsigned int v3;
  _QWORD **v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  const char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int **v21;
  unsigned int *v22;
  unsigned int **v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int **v31;
  unsigned int *v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[2];

  v35[1] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  v3 = *((unsigned __int8 *)a1 + 16);
  if (a1 && v3 >= 0x1C)
  {
    v4 = (_QWORD **)*((_QWORD *)a1 + 6);
    if (!v4)
      goto LABEL_42;
    v5 = v4[-*((unsigned int *)v4 + 2)];
LABEL_6:
    if (*(_BYTE *)v5 != 15)
    {
      v5 = (_QWORD *)v5[-*((unsigned int *)v5 + 2)];
      if (!v5)
      {
        v9 = 0;
        v8 = "";
        goto LABEL_43;
      }
    }
    v6 = v5[-*((unsigned int *)v5 + 2) + 1];
    if (v6)
    {
      v7 = *(_QWORD **)(v6 + 8);
      v10 = *v7;
      v8 = (const char *)(v7 + 3);
      v9 = v10;
LABEL_43:
      *a2 = v9;
      return v8;
    }
LABEL_42:
    v9 = 0;
    v8 = 0;
    goto LABEL_43;
  }
  if (a1 && v3 == 3)
  {
    v33 = v35;
    v34 = 0x100000000;
    llvm::GlobalVariable::getDebugInfo(a1, (uint64_t)&v33);
    if ((_DWORD)v34)
    {
      v11 = *(_QWORD *)(*(_QWORD *)v33 - 8 * *(unsigned int *)(*(_QWORD *)v33 + 8));
      if (v11)
      {
        v12 = *(_QWORD *)(v11 - 8 * *(unsigned int *)(v11 + 8) + 16);
        if (!v12)
        {
          v9 = 0;
          v8 = "";
LABEL_37:
          if (v33 != v35)
            free(v33);
          goto LABEL_43;
        }
        v13 = *(_QWORD *)(v12 - 8 * *(unsigned int *)(v12 + 8) + 8);
        if (v13)
        {
          v14 = *(_QWORD **)(v13 + 8);
          v15 = *v14;
          v8 = (const char *)(v14 + 3);
          v9 = v15;
          goto LABEL_37;
        }
      }
    }
    v9 = 0;
    v8 = 0;
    goto LABEL_37;
  }
  v8 = 0;
  if (a1 && !*((_BYTE *)a1 + 16))
  {
    if ((*((_BYTE *)a1 + 23) & 0x20) == 0)
      goto LABEL_42;
    v16 = ***(_QWORD ***)a1;
    v33 = a1;
    v17 = *(_DWORD *)(v16 + 2496);
    if (v17)
    {
      v18 = *(_QWORD *)(v16 + 2480);
      v19 = v17 - 1;
      v20 = (v17 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      v21 = (unsigned int **)(v18 + 40 * v20);
      v22 = *v21;
      if (*v21 == a1)
      {
LABEL_31:
        v27 = *((unsigned int *)v21 + 4);
        if (!(_DWORD)v27)
          goto LABEL_42;
        v28 = v21[1] + 2;
        v29 = 16 * v27;
        v9 = 0;
        v8 = 0;
        while (*((_DWORD *)v28 - 2))
        {
          v28 += 2;
          v29 -= 16;
          if (!v29)
            goto LABEL_43;
        }
        v5 = (_QWORD *)*v28;
        if (!v5)
          goto LABEL_42;
        goto LABEL_6;
      }
      v23 = 0;
      v24 = 1;
      while (v22 != (unsigned int *)-4096)
      {
        if (v23)
          v25 = 0;
        else
          v25 = v22 == (unsigned int *)-8192;
        if (v25)
          v23 = v21;
        v26 = v20 + v24++;
        v20 = v26 & v19;
        v21 = (unsigned int **)(v18 + 40 * (v26 & v19));
        v22 = *v21;
        if (*v21 == a1)
          goto LABEL_31;
      }
      if (v23)
        v31 = v23;
      else
        v31 = v21;
    }
    else
    {
      v31 = 0;
    }
    v21 = (unsigned int **)sub_1C541AB24(v16 + 2480, (uint64_t)&v33, (uint64_t *)&v33, v31);
    v32 = (unsigned int *)v33;
    v21[3] = 0;
    v21[4] = 0;
    *v21 = v32;
    v21[1] = (unsigned int *)(v21 + 3);
    v21[2] = (unsigned int *)0x100000000;
    goto LABEL_31;
  }
  return v8;
}

const char *LLVMGetDebugLocFilename(unsigned int *a1, _DWORD *a2)
{
  unsigned int v3;
  _QWORD **v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  const char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int **v21;
  unsigned int *v22;
  unsigned int **v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int **v31;
  unsigned int *v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[2];

  v35[1] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  v3 = *((unsigned __int8 *)a1 + 16);
  if (a1 && v3 >= 0x1C)
  {
    v4 = (_QWORD **)*((_QWORD *)a1 + 6);
    if (!v4)
      goto LABEL_42;
    v5 = v4[-*((unsigned int *)v4 + 2)];
LABEL_6:
    if (*(_BYTE *)v5 != 15)
    {
      v5 = (_QWORD *)v5[-*((unsigned int *)v5 + 2)];
      if (!v5)
      {
        v9 = 0;
        v8 = "";
        goto LABEL_43;
      }
    }
    v6 = v5[-*((unsigned int *)v5 + 2)];
    if (v6)
    {
      v7 = *(_QWORD **)(v6 + 8);
      v10 = *v7;
      v8 = (const char *)(v7 + 3);
      v9 = v10;
LABEL_43:
      *a2 = v9;
      return v8;
    }
LABEL_42:
    v9 = 0;
    v8 = 0;
    goto LABEL_43;
  }
  if (a1 && v3 == 3)
  {
    v33 = v35;
    v34 = 0x100000000;
    llvm::GlobalVariable::getDebugInfo(a1, (uint64_t)&v33);
    if ((_DWORD)v34)
    {
      v11 = *(_QWORD *)(*(_QWORD *)v33 - 8 * *(unsigned int *)(*(_QWORD *)v33 + 8));
      if (v11)
      {
        v12 = *(_QWORD *)(v11 - 8 * *(unsigned int *)(v11 + 8) + 16);
        if (!v12)
        {
          v9 = 0;
          v8 = "";
LABEL_37:
          if (v33 != v35)
            free(v33);
          goto LABEL_43;
        }
        v13 = *(_QWORD *)(v12 - 8 * *(unsigned int *)(v12 + 8));
        if (v13)
        {
          v14 = *(_QWORD **)(v13 + 8);
          v15 = *v14;
          v8 = (const char *)(v14 + 3);
          v9 = v15;
          goto LABEL_37;
        }
      }
    }
    v9 = 0;
    v8 = 0;
    goto LABEL_37;
  }
  v8 = 0;
  if (a1 && !*((_BYTE *)a1 + 16))
  {
    if ((*((_BYTE *)a1 + 23) & 0x20) == 0)
      goto LABEL_42;
    v16 = ***(_QWORD ***)a1;
    v33 = a1;
    v17 = *(_DWORD *)(v16 + 2496);
    if (v17)
    {
      v18 = *(_QWORD *)(v16 + 2480);
      v19 = v17 - 1;
      v20 = (v17 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      v21 = (unsigned int **)(v18 + 40 * v20);
      v22 = *v21;
      if (*v21 == a1)
      {
LABEL_31:
        v27 = *((unsigned int *)v21 + 4);
        if (!(_DWORD)v27)
          goto LABEL_42;
        v28 = v21[1] + 2;
        v29 = 16 * v27;
        v9 = 0;
        v8 = 0;
        while (*((_DWORD *)v28 - 2))
        {
          v28 += 2;
          v29 -= 16;
          if (!v29)
            goto LABEL_43;
        }
        v5 = (_QWORD *)*v28;
        if (!v5)
          goto LABEL_42;
        goto LABEL_6;
      }
      v23 = 0;
      v24 = 1;
      while (v22 != (unsigned int *)-4096)
      {
        if (v23)
          v25 = 0;
        else
          v25 = v22 == (unsigned int *)-8192;
        if (v25)
          v23 = v21;
        v26 = v20 + v24++;
        v20 = v26 & v19;
        v21 = (unsigned int **)(v18 + 40 * (v26 & v19));
        v22 = *v21;
        if (*v21 == a1)
          goto LABEL_31;
      }
      if (v23)
        v31 = v23;
      else
        v31 = v21;
    }
    else
    {
      v31 = 0;
    }
    v21 = (unsigned int **)sub_1C541AB24(v16 + 2480, (uint64_t)&v33, (uint64_t *)&v33, v31);
    v32 = (unsigned int *)v33;
    v21[3] = 0;
    v21[4] = 0;
    *v21 = v32;
    v21[1] = (unsigned int *)(v21 + 3);
    v21[2] = (unsigned int *)0x100000000;
    goto LABEL_31;
  }
  return v8;
}

uint64_t LLVMGetDebugLocLine(uint64_t ***a1)
{
  unsigned int v1;
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t ****v10;
  uint64_t ***v11;
  uint64_t ****v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ****v21;
  uint64_t ***v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v1 = *((unsigned __int8 *)a1 + 16);
  if (a1 && v1 >= 0x1C)
  {
    v2 = a1[6];
    if (v2)
      return *((unsigned int *)v2 + 1);
    return 0;
  }
  if (!a1 || v1 != 3)
  {
    v3 = 0xFFFFFFFFLL;
    if (!a1 || *((_BYTE *)a1 + 16))
      return v3;
    if ((*((_BYTE *)a1 + 23) & 0x20) == 0)
      return 0;
    v5 = ***a1;
    v23 = a1;
    v6 = *(_DWORD *)(v5 + 2496);
    if (v6)
    {
      v7 = *(_QWORD *)(v5 + 2480);
      v8 = v6 - 1;
      v9 = (v6 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      v10 = (uint64_t ****)(v7 + 40 * v9);
      v11 = *v10;
      if (*v10 == a1)
      {
LABEL_23:
        v16 = *((unsigned int *)v10 + 4);
        if ((_DWORD)v16)
        {
          v17 = v10[1] + 1;
          v18 = 16 * v16;
          v3 = 0;
          while (*((_DWORD *)v17 - 2))
          {
            v17 += 2;
            v18 -= 16;
            if (!v18)
              return v3;
          }
          v19 = *v17;
          if (v19)
            return *(unsigned int *)(v19 + 24);
        }
        return 0;
      }
      v12 = 0;
      v13 = 1;
      while (v11 != (uint64_t ***)-4096)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v11 == (uint64_t ***)-8192;
        if (v14)
          v12 = v10;
        v15 = v9 + v13++;
        v9 = v15 & v8;
        v10 = (uint64_t ****)(v7 + 40 * (v15 & v8));
        v11 = *v10;
        if (*v10 == a1)
          goto LABEL_23;
      }
      if (v12)
        v21 = v12;
      else
        v21 = v10;
    }
    else
    {
      v21 = 0;
    }
    v10 = (uint64_t ****)sub_1C541AB24(v5 + 2480, (uint64_t)&v23, (uint64_t *)&v23, v21);
    v22 = (uint64_t ***)v23;
    v10[3] = 0;
    v10[4] = 0;
    *v10 = v22;
    v10[1] = (uint64_t ***)(v10 + 3);
    v10[2] = (uint64_t ***)0x100000000;
    goto LABEL_23;
  }
  v23 = v25;
  v24 = 0x100000000;
  llvm::GlobalVariable::getDebugInfo((unsigned int *)a1, (uint64_t)&v23);
  if ((_DWORD)v24 && (v4 = *(_QWORD *)(*(_QWORD *)v23 - 8 * *(unsigned int *)(*(_QWORD *)v23 + 8))) != 0)
    v3 = *(unsigned int *)(v4 + 24);
  else
    v3 = 0;
  if (v23 != v25)
    free(v23);
  return v3;
}

uint64_t LLVMGetDebugLocColumn(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = 0;
  if (a1 && *(unsigned __int8 *)(a1 + 16) >= 0x1Cu)
  {
    v3 = *(_QWORD *)(a1 + 48);
    if (v3)
      return *(unsigned __int16 *)(v3 + 2);
    else
      return 0;
  }
  return result;
}

llvm::ValueHandleBase *LLVMConstInt(uint64_t a1, uint64_t a2, const llvm::APInt *a3)
{
  llvm::ConstantInt *v4;
  unint64_t v5;
  unint64_t v6;
  llvm::ValueHandleBase *result;
  llvm::ConstantInt *v8;
  llvm::ValueHandleBase *v9;
  unint64_t v10;
  unsigned int v11;

  v4 = *(llvm::ConstantInt **)a1;
  v5 = *(unsigned int *)(a1 + 8);
  v11 = v5 >> 8;
  if (v5 >> 8 > 0x40)
  {
    v8 = v4;
    llvm::APInt::initSlowCase((llvm::APInt *)&v10, a2, (_DWORD)a3 != 0);
    v4 = v8;
  }
  else
  {
    if (v5 <= 0xFF)
      v6 = 0;
    else
      v6 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v5);
    v10 = v6 & a2;
  }
  result = llvm::ConstantInt::get(v4, (llvm::LLVMContext *)&v10, a3);
  if (v11 >= 0x41)
  {
    if (v10)
    {
      v9 = result;
      MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
      return v9;
    }
  }
  return result;
}

llvm::ValueHandleBase *LLVMConstIntOfArbitraryPrecision(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  llvm::ConstantInt *v3;
  const llvm::APInt *v4;
  llvm::ValueHandleBase *v5;
  uint64_t v7;
  unsigned int v8;

  v3 = *(llvm::ConstantInt **)a1;
  v8 = *(_DWORD *)(a1 + 8) >> 8;
  llvm::APInt::initFromArray((unsigned int *)&v7, a3, a2);
  v5 = llvm::ConstantInt::get(v3, (llvm::LLVMContext *)&v7, v4);
  if (v8 >= 0x41 && v7)
    MEMORY[0x1CAA32F9C](v7, 0x1000C8000313F17);
  return v5;
}

llvm::ValueHandleBase *LLVMConstIntOfString(uint64_t a1, char *__s, unsigned int a3)
{
  size_t v6;

  if (__s)
    v6 = strlen(__s);
  else
    v6 = 0;
  return llvm::ConstantInt::get(a1, __s, v6, a3);
}

llvm::ValueHandleBase *LLVMConstIntOfStringAndSize(uint64_t a1, char *a2, unsigned int a3, unsigned int a4)
{
  return llvm::ConstantInt::get(a1, a2, a3, a4);
}

void *LLVMConstRealOfString(uint64_t a1, char *__s)
{
  size_t v4;

  if (__s)
    v4 = strlen(__s);
  else
    v4 = 0;
  return llvm::ConstantFP::get(a1, (unsigned __int8 *)__s, v4);
}

void *LLVMConstRealOfStringAndSize(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  return llvm::ConstantFP::get(a1, a2, a3);
}

uint64_t *LLVMConstIntGetZExtValue(uint64_t a1)
{
  uint64_t *v1;

  v1 = (uint64_t *)(a1 + 24);
  if (*(_DWORD *)(a1 + 32) >= 0x41u)
    v1 = (uint64_t *)*v1;
  return (uint64_t *)*v1;
}

uint64_t LLVMConstIntGetSExtValue(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(a1 + 32);
  if (v1 > 0x40)
    return **(_QWORD **)(a1 + 24);
  else
    return (uint64_t)(*(_QWORD *)(a1 + 24) << -(char)v1) >> -(char)v1;
}

double LLVMConstRealGetDouble(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  double result;
  uint64_t v16;
  double v17;
  unsigned __int8 v18;
  _BYTE v19[8];
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(*(_QWORD *)a1 + 8) & 0xFC) == 0)
  {
    *a2 = 0;
    return llvm::APFloat::convertToDouble((llvm::APFloat *)(a1 + 24));
  }
  v18 = 0;
  v3 = *(_QWORD *)(a1 + 32);
  if ((_UNKNOWN *)v3 == &unk_1C866F1C0)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v20, (const llvm::detail::DoubleAPFloat *)(a1 + 32));
  }
  else
  {
    v20 = *(_QWORD *)(a1 + 32);
    v4 = *(unsigned int *)(v3 + 8);
    if ((v4 + 64) >= 0x80)
    {
      v16 = a1;
      v4 = operator new[]();
      a1 = v16;
      v21 = v4;
    }
    v5 = *(_BYTE *)(a1 + 52);
    v6 = v5 & 7;
    v23 = v5 & 0xF;
    v22 = *(_DWORD *)(a1 + 48);
    v8 = (v5 & 6) != 0 && v6 != 3;
    if (v6 == 1 || v8)
    {
      v9 = *(unsigned int *)(v3 + 8);
      if ((v9 - 64) > 0xFFFFFF7F)
        v4 = (uint64_t)&v21;
      v12 = *(uint64_t **)(a1 + 40);
      v10 = (uint64_t *)(a1 + 40);
      v11 = v12;
      if ((*(_DWORD *)(*(v10 - 1) + 8) - 64) >= 0xFFFFFF80)
        v11 = v10;
      if (v9 <= 0xFFFFFFBF)
      {
        v13 = (unint64_t)(v9 + 64) >> 6;
        do
        {
          v14 = *v11++;
          *(_QWORD *)v4 = v14;
          v4 += 8;
          --v13;
        }
        while (v13);
      }
    }
  }
  llvm::APFloat::convert((uint64_t)v19, &unk_1C866F198, 1, &v18);
  *a2 = v18;
  result = llvm::APFloat::convertToDouble((llvm::APFloat *)v19);
  if ((_UNKNOWN *)v20 == &unk_1C866F1C0)
  {
    v17 = result;
    sub_1C4773C74(&v21);
    return v17;
  }
  if ((*(_DWORD *)(v20 + 8) - 64) <= 0xFFFFFF7F && v21)
  {
    v17 = result;
    MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
    return v17;
  }
  return result;
}

llvm::Value **LLVMConstStringInContext(uint64_t a1, char *a2, unsigned int a3, int a4)
{
  return llvm::ConstantDataArray::getString(a1, a2, (llvm::Type *)a3, a4 == 0);
}

llvm::Value **LLVMConstString(char *a1, unsigned int a2, int a3)
{
  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  return llvm::ConstantDataArray::getString(qword_1EF8F7038[0], a1, (llvm::Type *)a2, a3 == 0);
}

BOOL LLVMIsConstantString(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)a1 + 8) == 17 && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 8) == 2061;
}

uint64_t LLVMGetAsString(llvm::ConstantDataSequential *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;

  result = llvm::ConstantDataSequential::getRawDataValues(a1);
  *a2 = v4;
  return result;
}

llvm::Value **LLVMConstArray(llvm::ArrayType *a1, llvm::Type *a2, unsigned int a3)
{
  uint64_t v4;
  llvm::PoisonValue *v5;

  v4 = a3;
  llvm::ArrayType::get(a1, (llvm::Type *)a3);
  return llvm::ConstantArray::get(v5, a2, v4);
}

llvm::UndefValue *LLVMConstStructInContext(uint64_t *a1, llvm::Type *a2, unsigned int a3, int a4)
{
  uint64_t v5;
  llvm::ConstantAggregateZero *TypeForElements;

  v5 = a3;
  TypeForElements = (llvm::ConstantAggregateZero *)llvm::ConstantStruct::getTypeForElements(a1, (uint64_t)a2, a3, a4 != 0);
  return llvm::ConstantStruct::get(TypeForElements, a2, v5);
}

llvm::UndefValue *LLVMConstStruct(llvm::Type *a1, unsigned int a2, int a3)
{
  llvm::ConstantAggregateZero *TypeForElements;

  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  TypeForElements = (llvm::ConstantAggregateZero *)llvm::ConstantStruct::getTypeForElements((uint64_t *)qword_1EF8F7038[0], (uint64_t)a1, a2, a3 != 0);
  return llvm::ConstantStruct::get(TypeForElements, a1, a2);
}

llvm::UndefValue *LLVMConstNamedStruct(llvm::ConstantAggregateZero *a1, llvm::Type *a2, unsigned int a3)
{
  return llvm::ConstantStruct::get(a1, a2, a3);
}

llvm::UndefValue *LLVMConstVector(llvm::FixedVectorType ***a1, llvm::Type *a2)
{
  uint64_t v4;
  llvm::UndefValue *result;
  _QWORD **v6;

  v4 = a2;
  result = llvm::ConstantVector::getImpl(a1, (llvm::Type *)a2);
  if (!result)
  {
    llvm::FixedVectorType::get(**a1, a2);
    return (llvm::UndefValue *)sub_1C537B3A4(**v6 + 1288, (uint64_t)v6, a1, v4);
  }
  return result;
}

uint64_t LLVMGetConstOpcode(uint64_t a1)
{
  return sub_1C5389FE0(*(unsigned __int16 *)(a1 + 18));
}

uint64_t sub_1C5389FE0(int a1)
{
  return dword_1C85FD3D0[a1 - 1];
}

llvm::ValueHandleBase *LLVMConstNeg(llvm::Constant *a1, llvm::Type *a2)
{
  uint64_t v3;
  unsigned int v4;
  llvm::Constant *Zero;
  llvm::Constant *v6;
  llvm::Constant *v7;
  llvm::ValueHandleBase *result;
  _QWORD **v9;
  uint64_t v10;
  _WORD v11[4];
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)a1;
  if ((*(_DWORD *)(v3 + 8) & 0xFE) == 0x12)
    v4 = *(unsigned __int8 *)(**(_QWORD **)(v3 + 16) + 8);
  else
    v4 = *(_DWORD *)(v3 + 8);
  if (v4 <= 6)
    Zero = llvm::ConstantFP::getZero((llvm::ConstantFP *)v3, (llvm::Type *)1);
  else
    Zero = (llvm::Constant *)llvm::Constant::getNullValue((llvm::Constant *)v3, a2);
  v7 = Zero;
  result = llvm::ConstantFoldBinaryInstruction((llvm *)0xF, Zero, a1, v6);
  if (!result)
  {
    v9 = *(_QWORD ***)v7;
    if (*(_QWORD *)v7)
    {
      v17[0] = v7;
      v17[1] = a1;
      v10 = **v9 + 1512;
      v11[0] = 15;
      v11[1] = 0;
      v12 = v17;
      v13 = 2;
      v14 = 0u;
      v15 = 0u;
      v16 = 0;
      return (llvm::ValueHandleBase *)sub_1C537D4FC(v10, (uint64_t)v9, (unsigned __int8 *)v11);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

llvm::ValueHandleBase *LLVMConstNSWNeg(llvm::Constant *a1, llvm::Type *a2)
{
  uint64_t v3;
  unsigned int v4;
  llvm::Constant *Zero;
  llvm::Constant *v6;
  llvm::Constant *v7;
  llvm::ValueHandleBase *result;
  _QWORD **v9;
  uint64_t v10;
  _WORD v11[4];
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)a1;
  if ((*(_DWORD *)(v3 + 8) & 0xFE) == 0x12)
    v4 = *(unsigned __int8 *)(**(_QWORD **)(v3 + 16) + 8);
  else
    v4 = *(_DWORD *)(v3 + 8);
  if (v4 <= 6)
    Zero = llvm::ConstantFP::getZero((llvm::ConstantFP *)v3, (llvm::Type *)1);
  else
    Zero = (llvm::Constant *)llvm::Constant::getNullValue((llvm::Constant *)v3, a2);
  v7 = Zero;
  result = llvm::ConstantFoldBinaryInstruction((llvm *)0xF, Zero, a1, v6);
  if (!result)
  {
    v9 = *(_QWORD ***)v7;
    if (*(_QWORD *)v7)
    {
      v17[0] = v7;
      v17[1] = a1;
      v10 = **v9 + 1512;
      v11[0] = 527;
      v11[1] = 0;
      v12 = v17;
      v13 = 2;
      v14 = 0u;
      v15 = 0u;
      v16 = 0;
      return (llvm::ValueHandleBase *)sub_1C537D4FC(v10, (uint64_t)v9, (unsigned __int8 *)v11);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

llvm::ValueHandleBase *LLVMConstNUWNeg(llvm::Constant *a1, llvm::Type *a2)
{
  uint64_t v3;
  unsigned int v4;
  llvm::Constant *Zero;
  llvm::Constant *v6;
  llvm::Constant *v7;
  llvm::ValueHandleBase *result;
  _QWORD **v9;
  uint64_t v10;
  _WORD v11[4];
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)a1;
  if ((*(_DWORD *)(v3 + 8) & 0xFE) == 0x12)
    v4 = *(unsigned __int8 *)(**(_QWORD **)(v3 + 16) + 8);
  else
    v4 = *(_DWORD *)(v3 + 8);
  if (v4 <= 6)
    Zero = llvm::ConstantFP::getZero((llvm::ConstantFP *)v3, (llvm::Type *)1);
  else
    Zero = (llvm::Constant *)llvm::Constant::getNullValue((llvm::Constant *)v3, a2);
  v7 = Zero;
  result = llvm::ConstantFoldBinaryInstruction((llvm *)0xF, Zero, a1, v6);
  if (!result)
  {
    v9 = *(_QWORD ***)v7;
    if (*(_QWORD *)v7)
    {
      v17[0] = v7;
      v17[1] = a1;
      v10 = **v9 + 1512;
      v11[0] = 271;
      v11[1] = 0;
      v12 = v17;
      v13 = 2;
      v14 = 0u;
      v15 = 0u;
      v16 = 0;
      return (llvm::ValueHandleBase *)sub_1C537D4FC(v10, (uint64_t)v9, (unsigned __int8 *)v11);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t LLVMConstFNeg(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Type *a5)
{
  return llvm::ConstantExpr::get((llvm::ConstantExpr *)0xC, a1, 0, 0, a5);
}

llvm::ValueHandleBase *LLVMConstAdd(llvm::ConstantExpr *a1, llvm::Constant *a2)
{
  return llvm::ConstantExpr::getAdd(a1, a2, 0, 0);
}

llvm::ValueHandleBase *LLVMConstNSWAdd(llvm::ConstantExpr *a1, llvm::Constant *a2)
{
  return llvm::ConstantExpr::getAdd(a1, a2, 0, (llvm::Constant *)1);
}

llvm::ValueHandleBase *LLVMConstNUWAdd(llvm::ConstantExpr *a1, llvm::Constant *a2)
{
  return llvm::ConstantExpr::getAdd(a1, a2, (llvm::Constant *)1, 0);
}

llvm::ValueHandleBase *LLVMConstSub(llvm::ConstantExpr *a1, llvm::Constant *a2)
{
  return llvm::ConstantExpr::getSub(a1, a2, 0, 0);
}

llvm::ValueHandleBase *LLVMConstNSWSub(llvm::ConstantExpr *a1, llvm::Constant *a2)
{
  return llvm::ConstantExpr::getSub(a1, a2, 0, (llvm::Constant *)1);
}

llvm::ValueHandleBase *LLVMConstNUWSub(llvm::ConstantExpr *a1, llvm::Constant *a2)
{
  return llvm::ConstantExpr::getSub(a1, a2, (llvm::Constant *)1, 0);
}

llvm::ValueHandleBase *LLVMConstMul(llvm::ConstantExpr *a1, llvm::Constant *a2)
{
  return llvm::ConstantExpr::getMul(a1, a2, 0, 0);
}

llvm::ValueHandleBase *LLVMConstNSWMul(llvm::ConstantExpr *a1, llvm::Constant *a2)
{
  return llvm::ConstantExpr::getMul(a1, a2, 0, (llvm::Constant *)1);
}

llvm::ValueHandleBase *LLVMConstNUWMul(llvm::ConstantExpr *a1, llvm::Constant *a2)
{
  return llvm::ConstantExpr::getMul(a1, a2, (llvm::Constant *)1, 0);
}

llvm::ValueHandleBase *LLVMConstUDiv(llvm::ConstantExpr *a1, llvm::Constant *a2, uint64_t a3, llvm::Constant *a4)
{
  return llvm::ConstantExpr::getUDiv(a1, a2, 0, a4);
}

llvm::ValueHandleBase *LLVMConstExactUDiv(llvm::ConstantExpr *a1, llvm::Constant *a2, uint64_t a3, llvm::Constant *a4)
{
  return llvm::ConstantExpr::getUDiv(a1, a2, (llvm::Constant *)1, a4);
}

llvm::ValueHandleBase *LLVMConstSDiv(llvm::ConstantExpr *a1, llvm::Constant *a2, uint64_t a3, llvm::Constant *a4)
{
  return llvm::ConstantExpr::getSDiv(a1, a2, 0, a4);
}

llvm::ValueHandleBase *LLVMConstExactSDiv(llvm::ConstantExpr *a1, llvm::Constant *a2, uint64_t a3, llvm::Constant *a4)
{
  return llvm::ConstantExpr::getSDiv(a1, a2, (llvm::Constant *)1, a4);
}

llvm::ValueHandleBase *LLVMConstFRem(llvm::Constant *a1, llvm::Constant *a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm::Type *a6)
{
  return llvm::ConstantExpr::get((llvm::ConstantExpr *)0x18, a1, a2, 0, 0, a6);
}

llvm::UndefValue *LLVMConstICmp(unsigned __int16 a1, unsigned __int8 *a2, llvm::Constant *a3)
{
  return llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)a1, a2, a3, 0);
}

uint64_t LLVMConstFCmp(unsigned __int16 a1, uint64_t ***a2, llvm::Constant *a3)
{
  return llvm::ConstantExpr::getFCmp((llvm::ConstantExpr *)a1, a2, a3, 0);
}

llvm::ValueHandleBase *LLVMConstShl(llvm::ConstantExpr *a1, llvm::Constant *a2)
{
  return llvm::ConstantExpr::getShl(a1, a2, 0, 0);
}

uint64_t LLVMConstLShr(llvm::ConstantExpr *a1, llvm::Constant *a2, uint64_t a3, llvm::Constant *a4)
{
  return llvm::ConstantExpr::getLShr(a1, a2, 0, a4);
}

llvm::ValueHandleBase *LLVMConstAShr(llvm::Constant *a1, llvm::Constant *a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm::Type *a6)
{
  return llvm::ConstantExpr::get((llvm::ConstantExpr *)0x1B, a1, a2, 0, 0, a6);
}

uint64_t LLVMConstGEP(uint64_t *a1, llvm::Value *a2, unsigned int a3)
{
  uint64_t v3;

  v3 = *a1;
  if ((*(_DWORD *)(*a1 + 8) & 0xFE) == 0x12)
    v3 = **(_QWORD **)(v3 + 16);
  return llvm::ConstantExpr::getGetElementPtr(**(llvm::GetElementPtrInst ***)(v3 + 16), a1, a2, a3, 0, 0, 0);
}

uint64_t LLVMConstGEP2(llvm::GetElementPtrInst *a1, uint64_t *a2, llvm::Value *a3, unsigned int a4)
{
  return llvm::ConstantExpr::getGetElementPtr(a1, a2, a3, a4, 0, 0, 0);
}

uint64_t LLVMConstInBoundsGEP(uint64_t *a1, llvm::Value *a2, unsigned int a3)
{
  uint64_t v3;

  v3 = *a1;
  if ((*(_DWORD *)(*a1 + 8) & 0xFE) == 0x12)
    v3 = **(_QWORD **)(v3 + 16);
  return llvm::ConstantExpr::getGetElementPtr(**(llvm::GetElementPtrInst ***)(v3 + 16), a1, a2, a3, 1, 0, 0);
}

uint64_t LLVMConstInBoundsGEP2(llvm::GetElementPtrInst *a1, uint64_t *a2, llvm::Value *a3, unsigned int a4)
{
  return llvm::ConstantExpr::getGetElementPtr(a1, a2, a3, a4, 1, 0, 0);
}

llvm::UndefValue *LLVMConstTrunc(uint64_t a1, llvm::Constant *a2)
{
  return sub_1C537D3B8((llvm *)0x26, a1, a2, 0);
}

llvm::UndefValue *LLVMConstSExt(uint64_t a1, llvm::Constant *a2)
{
  return sub_1C537D3B8((llvm *)0x28, a1, a2, 0);
}

llvm::UndefValue *LLVMConstZExt(uint64_t a1, llvm::Constant *a2)
{
  return sub_1C537D3B8((llvm *)0x27, a1, a2, 0);
}

llvm::UndefValue *LLVMConstFPTrunc(uint64_t a1, llvm::Constant *a2)
{
  return sub_1C537D3B8((llvm *)0x2D, a1, a2, 0);
}

llvm::UndefValue *LLVMConstFPExt(uint64_t a1, llvm::Constant *a2)
{
  return sub_1C537D3B8((llvm *)0x2E, a1, a2, 0);
}

llvm::UndefValue *LLVMConstUIToFP(uint64_t a1, llvm::Constant *a2)
{
  return sub_1C537D3B8((llvm *)0x2B, a1, a2, 0);
}

llvm::UndefValue *LLVMConstSIToFP(uint64_t a1, llvm::Constant *a2)
{
  return sub_1C537D3B8((llvm *)0x2C, a1, a2, 0);
}

llvm::UndefValue *LLVMConstFPToUI(uint64_t a1, llvm::Constant *a2)
{
  return sub_1C537D3B8((llvm *)0x29, a1, a2, 0);
}

llvm::UndefValue *LLVMConstFPToSI(uint64_t a1, llvm::Constant *a2)
{
  return sub_1C537D3B8((llvm *)0x2A, a1, a2, 0);
}

llvm::UndefValue *LLVMConstPtrToInt(uint64_t a1, llvm::Constant *a2)
{
  return sub_1C537D3B8((llvm *)0x2F, a1, a2, 0);
}

llvm::UndefValue *LLVMConstIntToPtr(uint64_t a1, llvm::Constant *a2)
{
  return sub_1C537D3B8((llvm *)0x30, a1, a2, 0);
}

llvm::UndefValue *LLVMConstBitCast(llvm::UndefValue *result, llvm::Constant *a2)
{
  if (*(llvm::Constant **)result != a2)
    return sub_1C537D3B8((llvm *)0x31, (uint64_t)result, a2, 0);
  return result;
}

uint64_t LLVMConstAddrSpaceCast(llvm::ConstantExpr *a1, llvm::Constant ***a2)
{
  return llvm::ConstantExpr::getAddrSpaceCast(a1, a2, 0);
}

uint64_t LLVMConstIntCast(llvm::ConstantExpr *a1, llvm::Type ***a2, int a3)
{
  return llvm::ConstantExpr::getIntegerCast(a1, a2, (llvm::Type *)(a3 != 0));
}

llvm::Constant *LLVMConstSelect(llvm::ConstantExpr *a1, llvm::PoisonValue **a2, llvm::PoisonValue **a3, uint64_t a4, llvm::Type *a5)
{
  return llvm::ConstantExpr::getSelect(a1, a2, a3, 0, a5);
}

llvm::UndefValue *LLVMConstExtractElement(llvm *a1, llvm::Constant *a2, llvm::Constant *a3)
{
  llvm::UndefValue *result;
  _QWORD **v6;
  uint64_t v7;
  uint64_t v8;
  _WORD v9[4];
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  result = llvm::ConstantFoldExtractElementInstruction(a1, a2, a3);
  if (!result)
  {
    v6 = *(_QWORD ***)a1;
    v7 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    if (v7)
    {
      v15[0] = a1;
      v15[1] = a2;
      v8 = **v6 + 1512;
      v9[0] = 61;
      v9[1] = 0;
      v10 = v15;
      v11 = 2;
      v12 = 0u;
      v13 = 0u;
      v14 = 0;
      return (llvm::UndefValue *)sub_1C537D4FC(v8, v7, (unsigned __int8 *)v9);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

llvm *LLVMConstInsertElement(llvm::ConstantExpr *a1, llvm::Constant *a2, llvm::Constant *a3, uint64_t a4, llvm::Type *a5)
{
  return llvm::ConstantExpr::getInsertElement(a1, a2, a3, 0, a5);
}

llvm::UndefValue *LLVMConstShuffleVector(llvm *a1, llvm *a2, llvm::ConstantDataSequential *a3)
{
  llvm::UndefValue *ShuffleVector;
  void *v7;
  uint64_t v8;
  _QWORD v9[9];

  v9[8] = *MEMORY[0x1E0C80C00];
  v7 = v9;
  v8 = 0x1000000000;
  llvm::ShuffleVectorInst::getShuffleMask(a3, (uint64_t)&v7);
  ShuffleVector = llvm::ConstantExpr::getShuffleVector(a1, a2, (int *)v7, v8, 0);
  if (v7 != v9)
    free(v7);
  return ShuffleVector;
}

llvm::UndefValue *LLVMConstExtractValue(llvm::UndefValue *a1, unsigned int *a2, unsigned int a3)
{
  return llvm::ConstantExpr::getExtractValue(a1, a2, a3, 0);
}

void *LLVMConstInsertValue(llvm::Constant *a1, uint64_t *a2, _DWORD *a3, unsigned int a4)
{
  return llvm::ConstantExpr::getInsertValue(a1, a2, a3, a4, 0);
}

uint64_t LLVMConstInlineAsm(unsigned __int8 *a1, char *__s, char *a3, int a4, int a5)
{
  int v10;
  size_t v11;
  size_t v12;
  llvm::PointerType *v13;

  v10 = a1[8];
  if (__s)
  {
    v11 = strlen(__s);
    if (a3)
      goto LABEL_3;
  }
  else
  {
    v11 = 0;
    if (a3)
    {
LABEL_3:
      v12 = strlen(a3);
      goto LABEL_6;
    }
  }
  v12 = 0;
LABEL_6:
  if (v10 == 14)
    v13 = (llvm::PointerType *)a1;
  else
    v13 = 0;
  return llvm::InlineAsm::get(v13, (uint64_t)__s, v11, (uint64_t)a3, v12, a4 != 0, a5 != 0, 0, 0);
}

uint64_t LLVMGetGlobalParent(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

BOOL LLVMIsDeclaration(uint64_t a1)
{
  if (a1 && *(_BYTE *)(a1 + 16) == 3)
  {
    return (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) == 0;
  }
  else
  {
    if (*(_BYTE *)(a1 + 16) || *(_QWORD *)(a1 + 72) != a1 + 72)
      return 0;
    return (*(_BYTE *)(a1 + 34) & 0x80) == 0;
  }
}

uint64_t LLVMGetLinkage(uint64_t a1)
{
  return dword_1C85FD4DC[*(_DWORD *)(a1 + 32) & 0xF];
}

uint64_t LLVMSetLinkage(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  char v8;
  int v9;

  v2 = result;
  switch(a2)
  {
    case 0:
      v5 = *(_DWORD *)(result + 32);
      v6 = v5 & 0xFFFFFFF0;
      goto LABEL_10;
    case 1:
      v5 = *(_DWORD *)(result + 32);
      v6 = v5 & 0xFFFFFFF0 | 1;
      goto LABEL_10;
    case 2:
      v5 = *(_DWORD *)(result + 32);
      v6 = v5 & 0xFFFFFFF0 | 2;
      goto LABEL_10;
    case 3:
      v5 = *(_DWORD *)(result + 32);
      v6 = v5 & 0xFFFFFFF0 | 3;
      goto LABEL_10;
    case 5:
      v5 = *(_DWORD *)(result + 32);
      v6 = v5 & 0xFFFFFFF0 | 4;
      goto LABEL_10;
    case 6:
      v7 = *(_DWORD *)(result + 32);
      v8 = 5;
      goto LABEL_14;
    case 7:
      v5 = *(_DWORD *)(result + 32);
      v6 = v5 & 0xFFFFFFF0 | 6;
LABEL_10:
      *(_DWORD *)(result + 32) = v6;
      if ((v5 & 0x30) == 0)
        return result;
      goto LABEL_15;
    case 8:
      v3 = *(_DWORD *)(result + 32) & 0xFFFFFFC7;
      v4 = 16391;
      goto LABEL_18;
    case 9:
    case 15:
    case 16:
      v3 = *(_DWORD *)(result + 32) & 0xFFFFFFC0;
      v4 = 16392;
LABEL_18:
      v9 = v3 | v4;
      goto LABEL_19;
    case 12:
      v7 = *(_DWORD *)(result + 32);
      v8 = 9;
      goto LABEL_14;
    case 14:
      v7 = *(_DWORD *)(result + 32);
      v8 = 10;
LABEL_14:
      *(_DWORD *)(result + 32) = v7 & 0xFFFFFFF0 | v8 & 0xF;
      if ((v7 & 0x30) != 0)
      {
LABEL_15:
        result = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)result);
        if ((result & 1) == 0)
        {
          v9 = *(_DWORD *)(v2 + 32) | 0x4000;
LABEL_19:
          *(_DWORD *)(v2 + 32) = v9;
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *LLVMSetSection(_QWORD *result, char *__s)
{
  char *v2;
  uint64_t v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v2 = __s;
  v3 = (uint64_t)result;
  if (__s)
  {
    result = (_QWORD *)strlen(__s);
    v4 = (size_t)result;
  }
  else
  {
    v4 = 0;
  }
  if ((*(_BYTE *)(v3 + 34) & 0x40) != 0 || v4)
  {
    if (v4)
    {
      v2 = llvm::UniqueStringSaver::save(***(_QWORD ***)v3 + 2136, v2, v4);
      v6 = v5;
    }
    else
    {
      v6 = 0;
    }
    v7 = ***(_QWORD ***)v3;
    v19 = v3;
    v8 = *(_DWORD *)(v7 + 2520);
    if (v8)
    {
      v9 = *(_QWORD *)(v7 + 2504);
      v10 = v8 - 1;
      v11 = v10 & ((v3 >> 4) ^ (v3 >> 9));
      result = (_QWORD *)(v9 + 24 * v11);
      v12 = *result;
      if (*result == v3)
      {
LABEL_10:
        result[1] = v2;
        result[2] = v6;
        *(_DWORD *)(v3 + 32) = *(_DWORD *)(v3 + 32) & 0xFFBFFFFF | ((v6 != 0) << 22);
        return result;
      }
      v13 = 0;
      v14 = 1;
      while (v12 != -4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v12 == -8192;
        if (v15)
          v13 = result;
        v16 = v11 + v14++;
        v11 = v16 & v10;
        result = (_QWORD *)(v9 + 24 * v11);
        v12 = *result;
        if (*result == v3)
          goto LABEL_10;
      }
      if (v13)
        v17 = v13;
      else
        v17 = result;
    }
    else
    {
      v17 = 0;
    }
    result = sub_1C53D65B8(v7 + 2504, (uint64_t)&v19, &v19, v17);
    v18 = v19;
    result[1] = 0;
    result[2] = 0;
    *result = v18;
    goto LABEL_10;
  }
  return result;
}

uint64_t LLVMGetVisibility(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 32) >> 4) & 3;
}

uint64_t LLVMSetVisibility(uint64_t result, char a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;

  v2 = result;
  v3 = *(_DWORD *)(result + 32) & 0xF;
  v4 = *(_DWORD *)(result + 32) & 0xFFFFFFCF | (16 * (a2 & 3));
  *(_DWORD *)(result + 32) = v4;
  if ((v3 - 7) < 2)
    goto LABEL_6;
  if (16 * (a2 & 3))
  {
    result = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)result);
    if ((result & 1) == 0)
    {
      v4 = *(_DWORD *)(v2 + 32);
LABEL_6:
      *(_DWORD *)(v2 + 32) = v4 | 0x4000;
    }
  }
  return result;
}

uint64_t LLVMGetDLLStorageClass(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 32) >> 8) & 3;
}

uint64_t LLVMSetDLLStorageClass(uint64_t result, char a2)
{
  *(_DWORD *)(result + 32) = *(_DWORD *)(result + 32) & 0xFFFFFCFF | ((a2 & 3) << 8);
  return result;
}

uint64_t LLVMGetUnnamedAddress(uint64_t a1)
{
  return *(_DWORD *)(a1 + 32) >> 6;
}

uint64_t LLVMSetUnnamedAddress(uint64_t result, int a2)
{
  unsigned int v2;

  if (a2 == 2)
  {
    v2 = *(_DWORD *)(result + 32) & 0xFFFFFF3F | 0x80;
  }
  else if (a2 == 1)
  {
    v2 = *(_DWORD *)(result + 32) & 0xFFFFFF3F | 0x40;
  }
  else
  {
    if (a2)
      return result;
    v2 = *(_DWORD *)(result + 32) & 0xFFFFFF3F;
  }
  *(_DWORD *)(result + 32) = v2;
  return result;
}

BOOL LLVMHasUnnamedAddr(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 32) & 0xC0) == 128;
}

uint64_t LLVMSetUnnamedAddr(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = *(_DWORD *)(result + 32) & 0xFFFFFF3F | ((a2 != 0) << 7);
  return result;
}

uint64_t LLVMGlobalGetValueType(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t LLVMGetAlignment(uint64_t result)
{
  unsigned int v1;
  unint64_t v2;
  char v4;
  BOOL v5;
  char v6;
  uint64_t v7;

  v1 = *(unsigned __int8 *)(result + 16);
  switch(*(_BYTE *)(result + 16))
  {
    case ';':
      return 1 << *(_WORD *)(result + 18);
    case '<':
    case '=':
      v2 = (unint64_t)*(unsigned __int16 *)(result + 18) >> 1;
      return 1 << v2;
    case '>':
    case '?':
    case '@':
      goto LABEL_12;
    case 'A':
      LOBYTE(v2) = *(_BYTE *)(result + 19);
      return 1 << v2;
    default:
      if (v1 > 3 || v1 == 1)
      {
LABEL_12:
        if (v1 == 64)
          v2 = result;
        else
          v2 = 0;
        if (v2)
        {
          LOBYTE(v2) = *(_BYTE *)(v2 + 19);
          return 1 << v2;
        }
      }
      else
      {
        v4 = *(_WORD *)(result + 34);
        v5 = (v4 & 0x3F) == 0;
        v6 = (v4 & 0x3F) - 1;
        if (v5)
          v6 = 0;
        v7 = 1 << v6;
        if (v5)
          return 0;
        else
          return v7;
      }
      return result;
  }
}

uint64_t LLVMSetAlignment(uint64_t result, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t v5;
  int v6;
  uint64_t v7;

  v2 = *(unsigned __int8 *)(result + 16);
  switch(*(_BYTE *)(result + 16))
  {
    case ';':
      LOWORD(v3) = *(_WORD *)(result + 18) & 0xFFC0 | (63 - __clz(a2));
      goto LABEL_19;
    case '<':
    case '=':
      LOWORD(v3) = *(_WORD *)(result + 18) & 0xFF81 | (2 * (63 - __clz(a2)));
      goto LABEL_19;
    case '>':
    case '?':
    case '@':
      goto LABEL_13;
    case 'A':
      v3 = *(_WORD *)(result + 18) & 0xC0FF | ((63 - __clz(a2)) << 8);
LABEL_19:
      *(_WORD *)(result + 18) = v3;
      break;
    default:
      if (v2 > 3 || v2 == 1)
      {
LABEL_13:
        if (v2 == 64)
          v7 = result;
        else
          v7 = 0;
        *(_WORD *)(v7 + 18) = *(_WORD *)(v7 + 18) & 0xC0FF | ((63 - (unsigned __int16)__clz(a2)) << 8);
      }
      else
      {
        v5 = __clz(a2) ^ 0x13F;
        if (!a2)
          v5 = 0;
        if (v5 >= 0x100)
          v6 = ((v5 & 0x3F) << 16) + 0x10000;
        else
          v6 = 0;
        *(_DWORD *)(result + 32) = *(_DWORD *)(result + 32) & 0xFFC0FFFF | v6;
      }
      break;
  }
  return result;
}

char *LLVMGlobalCopyAllMetadata(uint64_t a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = &v4;
  v4 = a1;
  return sub_1C5388070(a2, (void (*)(uint64_t, void **))sub_1C539258C, (uint64_t)&v3);
}

uint64_t LLVMValueMetadataEntriesGetKind(uint64_t a1, unsigned int a2)
{
  return *(unsigned int *)(a1 + 16 * a2);
}

uint64_t LLVMValueMetadataEntriesGetMetadata(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16 * a2 + 8);
}

void LLVMGlobalEraseMetadata(uint64_t a1, int a2)
{
  uint64_t v2;
  _QWORD *v4;
  int v5;
  int32x2_t **v6;
  int32x2_t *v7;
  __int32 v8;
  int32x2_t v9;
  __int32 v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v22;

  if ((*(_BYTE *)(a1 + 23) & 0x20) != 0)
  {
    v2 = ***(_QWORD ***)a1 + 2480;
    v22 = a1;
    v4 = sub_1C541AA4C(v2, &v22);
    llvm::MDAttachments::erase((llvm::MDAttachments *)(v4 + 1), a2);
    if (!*((_DWORD *)v4 + 4))
    {
      v5 = *(_DWORD *)(a1 + 20);
      if ((v5 & 0x20000000) != 0)
      {
        v6 = **(int32x2_t ****)a1;
        v7 = *v6;
        v8 = (*v6)[312].i32[0];
        if (v8)
        {
          v9 = v7[310];
          v10 = v8 - 1;
          v11 = v10 & ((a1 >> 4) ^ (a1 >> 9));
          v12 = *(_QWORD *)&v9 + 40 * v11;
          v13 = *(_QWORD *)v12;
          if (*(_QWORD *)v12 == a1)
          {
LABEL_10:
            v16 = *(char **)(v12 + 8);
            v17 = *(unsigned int *)(v12 + 16);
            if ((_DWORD)v17)
            {
              v18 = v16 - 8;
              v19 = 16 * v17;
              do
              {
                v20 = *(unsigned __int8 **)&v18[v19];
                if (v20)
                  llvm::MetadataTracking::untrack((uint64_t)&v18[v19], v20);
                v19 -= 16;
              }
              while (v19);
              v16 = *(char **)(v12 + 8);
            }
            if (v16 != (char *)(v12 + 24))
              free(v16);
            *(_QWORD *)v12 = -8192;
            v7[311] = vadd_s32(v7[311], (int32x2_t)0x1FFFFFFFFLL);
            v5 = *(_DWORD *)(a1 + 20);
          }
          else
          {
            v14 = 1;
            while (v13 != -4096)
            {
              v15 = v11 + v14++;
              v11 = v15 & v10;
              v12 = *(_QWORD *)&v9 + 40 * v11;
              v13 = *(_QWORD *)v12;
              if (*(_QWORD *)v12 == a1)
                goto LABEL_10;
            }
          }
        }
        *(_DWORD *)(a1 + 20) = v5 & 0xDFFFFFFF;
      }
    }
  }
}

void LLVMGlobalClearMetadata(uint64_t a1)
{
  int v1;
  int32x2_t **v3;
  int32x2_t *v4;
  __int32 v5;
  int32x2_t v6;
  __int32 v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unsigned __int8 *v17;

  v1 = *(_DWORD *)(a1 + 20);
  if ((v1 & 0x20000000) != 0)
  {
    v3 = **(int32x2_t ****)a1;
    v4 = *v3;
    v5 = (*v3)[312].i32[0];
    if (v5)
    {
      v6 = v4[310];
      v7 = v5 - 1;
      v8 = v7 & ((a1 >> 4) ^ (a1 >> 9));
      v9 = *(_QWORD *)&v6 + 40 * v8;
      v10 = *(_QWORD *)v9;
      if (*(_QWORD *)v9 == a1)
      {
LABEL_7:
        v13 = *(char **)(v9 + 8);
        v14 = *(unsigned int *)(v9 + 16);
        if ((_DWORD)v14)
        {
          v15 = v13 - 8;
          v16 = 16 * v14;
          do
          {
            v17 = *(unsigned __int8 **)&v15[v16];
            if (v17)
              llvm::MetadataTracking::untrack((uint64_t)&v15[v16], v17);
            v16 -= 16;
          }
          while (v16);
          v13 = *(char **)(v9 + 8);
        }
        if (v13 != (char *)(v9 + 24))
          free(v13);
        *(_QWORD *)v9 = -8192;
        v4[311] = vadd_s32(v4[311], (int32x2_t)0x1FFFFFFFFLL);
        v1 = *(_DWORD *)(a1 + 20);
      }
      else
      {
        v11 = 1;
        while (v10 != -4096)
        {
          v12 = v8 + v11++;
          v8 = v12 & v7;
          v9 = *(_QWORD *)&v6 + 40 * v8;
          v10 = *(_QWORD *)v9;
          if (*(_QWORD *)v9 == a1)
            goto LABEL_7;
        }
      }
    }
    *(_DWORD *)(a1 + 20) = v1 & 0xDFFFFFFF;
  }
}

uint64_t LLVMAddGlobal(uint64_t a1, llvm::PointerType *a2, _BYTE *a3)
{
  _DWORD *v6;
  uint64_t v7;
  char v8;
  _BYTE *v10;
  char v11;
  char v12;

  v6 = operator new(0x78uLL);
  v7 = (uint64_t)(v6 + 8);
  v6[13] = v6[13] & 0x38000000 | 1;
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *((_QWORD *)v6 + 3) = v6 + 8;
  v8 = 1;
  v12 = 1;
  if (*a3)
  {
    v10 = a3;
    v8 = 3;
  }
  v11 = v8;
  return llvm::GlobalVariable::GlobalVariable(v7, a1, a2, 0, 0, 0, (uint64_t)&v10, 0, 0, 0, 0);
}

uint64_t LLVMAddGlobalInAddressSpace(uint64_t a1, llvm::PointerType *a2, _BYTE *a3, unsigned int a4)
{
  _DWORD *v8;
  uint64_t v9;
  char v10;
  _BYTE *v12;
  char v13;
  char v14;

  v8 = operator new(0x78uLL);
  v9 = (uint64_t)(v8 + 8);
  v8[13] = v8[13] & 0x38000000 | 1;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *((_QWORD *)v8 + 3) = v8 + 8;
  v10 = 1;
  v14 = 1;
  if (*a3)
  {
    v12 = a3;
    v10 = 3;
  }
  v13 = v10;
  return llvm::GlobalVariable::GlobalVariable(v9, a1, a2, 0, 0, 0, (uint64_t)&v12, 0, 0, a4 | 0x100000000, 0);
}

uint64_t LLVMGetNamedGlobal(uint64_t a1, char *__s)
{
  size_t v4;
  uint64_t result;

  if (__s)
    v4 = strlen(__s);
  else
    v4 = 0;
  result = sub_1C4FB7E80(*(uint64_t **)(a1 + 112), (unsigned __int8 *)__s, v4);
  if (!result || *(_BYTE *)(result + 16) != 3)
    return 0;
  return result;
}

uint64_t LLVMGetFirstGlobal(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
    v2 = v1 == a1 + 8;
  else
    v2 = 1;
  if (v2)
    return 0;
  else
    return v1 - 56;
}

uint64_t LLVMGetLastGlobal(uint64_t a1)
{
  uint64_t v1;

  if (a1 + 8 == *(_QWORD *)(a1 + 16))
    return 0;
  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
    return v1 - 56;
  else
    return 0;
}

uint64_t LLVMGetNextGlobal(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + 56;
  if (!a1)
    v1 = 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2 == *(_QWORD *)(a1 + 40) + 8 || v2 == 0)
    return 0;
  else
    return v2 - 56;
}

uint64_t LLVMGetPreviousGlobal(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(a1 + 56);
  if (!a1)
    v1 = 0;
  if (v1 == *(uint64_t **)(*(_QWORD *)(a1 + 40) + 16))
    return 0;
  v2 = *v1;
  if (v2)
    return v2 - 56;
  else
    return 0;
}

uint64_t LLVMGetInitializer(uint64_t a1)
{
  if (a1 && *(_BYTE *)(a1 + 16) == 3)
  {
    if ((*(_DWORD *)(a1 + 20) & 0x7FFFFFF) == 0)
      return 0;
  }
  else if (!*(_BYTE *)(a1 + 16) && *(_QWORD *)(a1 + 72) == a1 + 72 && (*(_BYTE *)(a1 + 34) & 0x80) == 0)
  {
    return 0;
  }
  return *(_QWORD *)(a1 - 32);
}

BOOL LLVMIsThreadLocal(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 33) & 0x1C) != 0;
}

uint64_t LLVMSetThreadLocal(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = *(_DWORD *)(result + 32) & 0xFFFFE3FF | ((a2 != 0) << 10);
  return result;
}

uint64_t LLVMIsGlobalConstant(uint64_t a1)
{
  return *(_BYTE *)(a1 + 80) & 1;
}

uint64_t LLVMSetGlobalConstant(uint64_t result, int a2)
{
  *(_BYTE *)(result + 80) = *(_BYTE *)(result + 80) & 0xFE | (a2 != 0);
  return result;
}

uint64_t LLVMGetThreadLocalMode(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 32) >> 10) & 7;
}

uint64_t LLVMSetThreadLocalMode(uint64_t result, int a2)
{
  unsigned int v2;

  switch(a2)
  {
    case 0:
      v2 = *(_DWORD *)(result + 32) & 0xFFFFE3FF;
      goto LABEL_7;
    case 1:
      v2 = *(_DWORD *)(result + 32) & 0xFFFFE3FF | 0x400;
      goto LABEL_7;
    case 2:
      v2 = *(_DWORD *)(result + 32) & 0xFFFFE3FF | 0x800;
      goto LABEL_7;
    case 3:
      v2 = *(_DWORD *)(result + 32) & 0xFFFFE3FF | 0xC00;
      goto LABEL_7;
    case 4:
      v2 = *(_DWORD *)(result + 32) & 0xFFFFE3FF | 0x1000;
LABEL_7:
      *(_DWORD *)(result + 32) = v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t LLVMIsExternallyInitialized(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 80) >> 1) & 1;
}

uint64_t LLVMSetExternallyInitialized(uint64_t result, int a2)
{
  *(_BYTE *)(result + 80) = *(_BYTE *)(result + 80) & 0xFD | (2 * (a2 != 0));
  return result;
}

uint64_t LLVMAddAlias(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  llvm::PointerType *v5;
  unsigned int v6;
  char v7;
  _BYTE *v9;
  char v10;
  char v11;

  v5 = **(llvm::PointerType ***)(a2 + 16);
  v6 = *(_DWORD *)(a2 + 8);
  v7 = 1;
  v11 = 1;
  if (*a4)
  {
    v9 = a4;
    v7 = 3;
  }
  v10 = v7;
  return llvm::GlobalAlias::create(v5, (llvm::Type *)(v6 >> 8), 0, (uint64_t)&v9, a3, a1);
}

uint64_t LLVMAddAlias2(uint64_t a1, llvm::PointerType *a2, llvm::Type *a3, uint64_t a4, _BYTE *a5)
{
  char v5;
  _BYTE *v7;
  char v8;
  char v9;

  v5 = 1;
  v9 = 1;
  if (*a5)
  {
    v7 = a5;
    v5 = 3;
  }
  v8 = v5;
  return llvm::GlobalAlias::create(a2, a3, 0, (uint64_t)&v7, a4, a1);
}

uint64_t LLVMGetNamedGlobalAlias(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  uint64_t result;

  result = sub_1C4FB7E80(*(uint64_t **)(a1 + 112), a2, a3);
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 1)
      return 0;
  }
  return result;
}

uint64_t LLVMGetFirstGlobalAlias(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;

  v1 = *(_QWORD *)(a1 + 48);
  if (v1)
    v2 = v1 == a1 + 40;
  else
    v2 = 1;
  if (v2)
    return 0;
  else
    return v1 - 48;
}

uint64_t LLVMGetLastGlobalAlias(uint64_t a1)
{
  uint64_t v1;

  if (a1 + 40 == *(_QWORD *)(a1 + 48))
    return 0;
  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
    return v1 - 48;
  else
    return 0;
}

uint64_t LLVMGetNextGlobalAlias(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + 48;
  if (!a1)
    v1 = 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2 == *(_QWORD *)(a1 + 40) + 40 || v2 == 0)
    return 0;
  else
    return v2 - 48;
}

uint64_t LLVMGetPreviousGlobalAlias(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(a1 + 48);
  if (!a1)
    v1 = 0;
  if (v1 == *(uint64_t **)(*(_QWORD *)(a1 + 40) + 48))
    return 0;
  v2 = *v1;
  if (v2)
    return v2 - 48;
  else
    return 0;
}

uint64_t LLVMAliasGetAliasee(uint64_t a1)
{
  return *(_QWORD *)(a1 - 32);
}

uint64_t *LLVMAddFunction(uint64_t a1, _BYTE *a2, llvm::PointerType *a3)
{
  char v5;
  void *v6;
  _BYTE *v8;
  char v9;
  char v10;

  v5 = 1;
  v10 = 1;
  if (*a2)
  {
    v8 = a2;
    v5 = 3;
  }
  v9 = v5;
  v6 = operator new(0x80uLL);
  *((_DWORD *)v6 + 7) = *((_DWORD *)v6 + 7) & 0x38000000 | 0x40000000;
  *(_QWORD *)v6 = 0;
  return llvm::Function::Function((uint64_t *)v6 + 1, a3, 0, (llvm::Type *)0xFFFFFFFFLL, (uint64_t)&v8, a1);
}

uint64_t LLVMGetNamedFunction(uint64_t a1, char *__s)
{
  size_t v4;
  uint64_t result;

  if (__s)
    v4 = strlen(__s);
  else
    v4 = 0;
  result = sub_1C4FB7E80(*(uint64_t **)(a1 + 112), (unsigned __int8 *)__s, v4);
  if (result)
  {
    if (*(_BYTE *)(result + 16))
      return 0;
  }
  return result;
}

uint64_t LLVMGetFirstFunction(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
    v2 = v1 == a1 + 24;
  else
    v2 = 1;
  if (v2)
    return 0;
  else
    return v1 - 56;
}

uint64_t LLVMGetLastFunction(uint64_t a1)
{
  uint64_t v1;

  if (a1 + 24 == *(_QWORD *)(a1 + 32))
    return 0;
  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
    return v1 - 56;
  else
    return 0;
}

uint64_t LLVMGetNextFunction(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + 56;
  if (!a1)
    v1 = 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2 == *(_QWORD *)(a1 + 40) + 24 || v2 == 0)
    return 0;
  else
    return v2 - 56;
}

uint64_t LLVMGetPreviousFunction(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(a1 + 56);
  if (!a1)
    v1 = 0;
  if (v1 == *(uint64_t **)(*(_QWORD *)(a1 + 40) + 32))
    return 0;
  v2 = *v1;
  if (v2)
    return v2 - 56;
  else
    return 0;
}

uint64_t LLVMHasPersonalityFn(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 18) >> 3) & 1;
}

uint64_t LLVMGetPersonalityFn(uint64_t a1)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(a1 + 20);
  if ((v1 & 0x40000000) != 0)
    v2 = *(_QWORD *)(a1 - 8);
  else
    v2 = a1 - 32 * (v1 & 0x7FFFFFF);
  return *(_QWORD *)v2;
}

_QWORD *LLVMSetPersonalityFn(uint64_t a1, uint64_t a2)
{
  __int16 v3;
  _QWORD *result;

  v3 = a2 != 0;
  result = sub_1C53D1F60((_QWORD *)a1, a2);
  *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xFFF7 | (8 * v3);
  return result;
}

uint64_t LLVMGetIntrinsicID(uint64_t a1)
{
  uint64_t result;

  result = 0;
  if (a1)
  {
    if (!*(_BYTE *)(a1 + 16))
      return *(unsigned int *)(a1 + 36);
  }
  return result;
}

char *LLVMIntrinsicGetName(int a1, size_t *a2)
{
  char *v3;
  size_t v4;

  v3 = off_1E814EB28[a1];
  if (v3)
    v4 = strlen(off_1E814EB28[a1]);
  else
    v4 = 0;
  *a2 = v4;
  return v3;
}

char *LLVMIntrinsicCopyOverloadedName(int a1, uint64_t *a2, uint64_t a3, std::string::size_type *a4, uint64_t a5, uint64_t a6, std::string *a7, uint64_t a8)
{
  int v9;
  std::string::size_type size;
  std::string *v11;
  std::string *v12;
  char *v13;
  std::string v15;

  sub_1C53CF274(a1, a2, a3, 0, 0, a6, a7, a8, &v15);
  v9 = SHIBYTE(v15.__r_.__value_.__r.__words[2]);
  size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v15.__r_.__value_.__l.__size_;
  *a4 = size;
  if (v9 >= 0)
    v12 = &v15;
  else
    v12 = v11;
  v13 = strdup((const char *)v12);
  if (v9 < 0)
    operator delete(v11);
  return v13;
}

char *LLVMIntrinsicCopyOverloadedName2(uint64_t *a1, int a2, uint64_t *a3, uint64_t a4, std::string::size_type *a5, uint64_t a6, std::string *a7, uint64_t a8)
{
  int v9;
  std::string::size_type size;
  std::string *v11;
  std::string *v12;
  char *v13;
  std::string v15;

  sub_1C53CF274(a2, a3, a4, a1, 0, a6, a7, a8, &v15);
  v9 = SHIBYTE(v15.__r_.__value_.__r.__words[2]);
  size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v15.__r_.__value_.__l.__size_;
  *a5 = size;
  if (v9 >= 0)
    v12 = &v15;
  else
    v12 = v11;
  v13 = strdup((const char *)v12);
  if (v9 < 0)
    operator delete(v11);
  return v13;
}

uint64_t LLVMIntrinsicIsOverloaded(unsigned int a1)
{
  return (byte_1C860FB7B[(unint64_t)a1 >> 3] >> (a1 & 7)) & 1;
}

uint64_t LLVMGetFunctionCallConv(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 18) >> 4) & 0x3FF;
}

uint64_t LLVMSetFunctionCallConv(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 18) = *(_WORD *)(result + 18) & 0xC00F | (16 * a2);
  return result;
}

char *LLVMGetGC(llvm::Function *a1)
{
  char *result;

  if ((*((_WORD *)a1 + 9) & 0x4000) == 0)
    return 0;
  result = (char *)llvm::LLVMContext::getGC(**(llvm::LLVMContext ***)a1, a1);
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

void LLVMSetGC(llvm::Function *this, char *__s)
{
  size_t v4;
  void *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *__dst[2];
  unint64_t v10;

  if (!__s)
  {
    llvm::Function::clearGC((uint64_t)this);
    return;
  }
  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = v5;
    v10 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_10;
  }
  HIBYTE(v10) = v4;
  v6 = __dst;
  if (v4)
LABEL_10:
    memcpy(v6, __s, (size_t)v5);
  *((_BYTE *)v5 + (_QWORD)v6) = 0;
  llvm::Function::setGC((uint64_t)this, (uint64_t)__dst);
  if (SHIBYTE(v10) < 0)
    operator delete(__dst[0]);
}

uint64_t LLVMAddAttributeAtIndex(llvm::LLVMContext ***a1, int a2, uint64_t a3)
{
  uint64_t result;

  result = llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(a1 + 14), **a1, a2, a3);
  a1[14] = (llvm::LLVMContext **)result;
  return result;
}

uint64_t LLVMGetAttributeCountAtIndex(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 112);
  if (v2
    && (a2 + 1) < *(_DWORD *)(v2 + 8)
    && (v3 = *(_QWORD *)(v2 + 8 * (a2 + 1) + 40)) != 0)
  {
    return *(unsigned int *)(v3 + 8);
  }
  else
  {
    return 0;
  }
}

uint64_t LLVMGetAttributesAtIndex(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(result + 112);
  if (v3)
  {
    if ((a2 + 1) < *(_DWORD *)(v3 + 8))
    {
      v4 = *(_QWORD *)(v3 + 8 * (a2 + 1) + 40);
      if (v4)
      {
        v5 = *(unsigned int *)(v4 + 8);
        if ((_DWORD)v5)
        {
          v6 = (uint64_t *)(v4 + 48);
          v7 = 8 * v5;
          do
          {
            v8 = *v6++;
            *a3++ = v8;
            v7 -= 8;
          }
          while (v7);
        }
      }
    }
  }
  return result;
}

uint64_t LLVMGetEnumAttributeAtIndex(uint64_t a1, int a2, int a3)
{
  return llvm::AttributeList::getAttributeAtIndex((uint64_t *)(a1 + 112), a2, a3);
}

uint64_t LLVMGetStringAttributeAtIndex(uint64_t a1, int a2, _QWORD *a3, unsigned int a4)
{
  return llvm::Function::getAttributeAtIndex(a1, a2, a3, a4);
}

uint64_t LLVMRemoveEnumAttributeAtIndex(uint64_t a1, int a2, int a3)
{
  uint64_t result;

  result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(a1 + 112), **(uint64_t ***)a1, a2, a3);
  *(_QWORD *)(a1 + 112) = result;
  return result;
}

uint64_t LLVMRemoveStringAttributeAtIndex(uint64_t a1, int a2, _QWORD *a3, unsigned int a4)
{
  uint64_t result;

  result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(a1 + 112), **(uint64_t ***)a1, a2, a3, a4);
  *(_QWORD *)(a1 + 112) = result;
  return result;
}

uint64_t **LLVMAddTargetDependentFunctionAttr(uint64_t ***a1, char *__s, char *a3)
{
  uint64_t *v6;
  size_t v7;
  size_t v8;
  unsigned int *v9;
  uint64_t **result;

  v6 = **a1;
  if (!__s)
  {
    v7 = 0;
    if (a3)
      goto LABEL_3;
LABEL_5:
    v8 = 0;
    goto LABEL_6;
  }
  v7 = strlen(__s);
  if (!a3)
    goto LABEL_5;
LABEL_3:
  v8 = strlen(a3);
LABEL_6:
  v9 = llvm::Attribute::get(v6, (unsigned __int8 *)__s, v7, (unsigned __int8 *)a3, v8);
  result = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(a1 + 14), (llvm::LLVMContext *)**a1, -1, (uint64_t)v9);
  a1[14] = result;
  return result;
}

uint64_t LLVMCountParams(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

void LLVMGetParams(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*(_WORD *)(a1 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)a1);
    v4 = *(_QWORD *)(a1 + 88);
    if ((*(_WORD *)(a1 + 18) & 1) != 0)
    {
      v7 = *(_QWORD *)(a1 + 88);
      llvm::Function::BuildLazyArguments((llvm::Function *)a1);
      v4 = v7;
      v5 = *(_QWORD *)(a1 + 88);
      goto LABEL_4;
    }
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 88);
  }
  v5 = v4;
LABEL_4:
  v6 = v5 + 40 * *(_QWORD *)(a1 + 96);
  while (v4 != v6)
  {
    *a2++ = v4;
    v4 += 40;
  }
}

uint64_t LLVMGetParam(uint64_t a1, unsigned int a2)
{
  if ((*(_WORD *)(a1 + 18) & 1) != 0)
    llvm::Function::BuildLazyArguments((llvm::Function *)a1);
  return *(_QWORD *)(a1 + 88) + 40 * a2;
}

uint64_t LLVMGetParamParent(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t LLVMGetFirstParam(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if ((*(_WORD *)(a1 + 18) & 1) == 0)
  {
    v2 = *(_QWORD *)(a1 + 88);
LABEL_4:
    v3 = v2;
    goto LABEL_6;
  }
  llvm::Function::BuildLazyArguments((llvm::Function *)a1);
  v2 = *(_QWORD *)(a1 + 88);
  if ((*(_WORD *)(a1 + 18) & 1) == 0)
    goto LABEL_4;
  llvm::Function::BuildLazyArguments((llvm::Function *)a1);
  v3 = *(_QWORD *)(a1 + 88);
LABEL_6:
  if (v2 == v3 + 40 * *(_QWORD *)(a1 + 96))
    return 0;
  else
    return v2;
}

uint64_t LLVMGetLastParam(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_WORD *)(a1 + 18) & 1) == 0)
  {
    v2 = *(_QWORD *)(a1 + 88);
    v3 = *(_QWORD *)(a1 + 96);
LABEL_4:
    v4 = v2;
    goto LABEL_6;
  }
  llvm::Function::BuildLazyArguments((llvm::Function *)a1);
  v2 = *(_QWORD *)(a1 + 88);
  v3 = *(_QWORD *)(a1 + 96);
  if ((*(_WORD *)(a1 + 18) & 1) == 0)
    goto LABEL_4;
  llvm::Function::BuildLazyArguments((llvm::Function *)a1);
  v4 = *(_QWORD *)(a1 + 88);
LABEL_6:
  v5 = v2 + 40 * v3;
  if (v5 == v4)
    return 0;
  else
    return v5 - 40;
}

uint64_t LLVMGetNextParam(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = (*(_DWORD *)(a1 + 32) + 1);
  if (*(_QWORD *)(v1 + 96) <= v2)
    return 0;
  if ((*(_WORD *)(v1 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 24));
    LODWORD(v2) = *(_DWORD *)(a1 + 32) + 1;
  }
  return *(_QWORD *)(v1 + 88) + 40 * v2;
}

uint64_t LLVMGetPreviousParam(uint64_t a1)
{
  int v1;
  uint64_t v3;

  v1 = *(_DWORD *)(a1 + 32);
  if (!v1)
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if ((*(_WORD *)(v3 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 24));
    v1 = *(_DWORD *)(a1 + 32);
  }
  return *(_QWORD *)(v3 + 88) + 40 * (v1 - 1);
}

uint64_t LLVMSetParamAlignment(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;

  v3 = llvm::Attribute::get(**(uint64_t ***)a1, 74, 1 << (63 - __clz(a2)));
  v4 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 32);
  result = llvm::AttributeList::addParamAttribute((_QWORD *)(v4 + 112), **(uint64_t ***)v4, &v6, 1, v3);
  *(_QWORD *)(v4 + 112) = result;
  return result;
}

uint64_t LLVMAddGlobalIFunc(uint64_t a1, uint64_t a2, uint64_t a3, llvm::PointerType *a4, llvm::Type *a5, uint64_t a6)
{
  _QWORD v7[4];
  __int16 v8;

  v8 = 261;
  v7[0] = a2;
  v7[1] = a3;
  return llvm::GlobalIFunc::create(a4, a5, 0, (uint64_t)v7, a6, a1);
}

uint64_t LLVMGetNamedGlobalIFunc(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  uint64_t result;

  result = sub_1C4FB7E80(*(uint64_t **)(a1 + 112), a2, a3);
  if (result)
  {
    if (*(_BYTE *)(result + 16) != 2)
      return 0;
  }
  return result;
}

uint64_t LLVMGetFirstGlobalIFunc(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
    v2 = v1 == a1 + 56;
  else
    v2 = 1;
  if (v2)
    return 0;
  else
    return v1 - 56;
}

uint64_t LLVMGetLastGlobalIFunc(uint64_t a1)
{
  uint64_t v1;

  if (a1 + 56 == *(_QWORD *)(a1 + 64))
    return 0;
  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
    return v1 - 56;
  else
    return 0;
}

uint64_t LLVMGetNextGlobalIFunc(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + 56;
  if (!a1)
    v1 = 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2 == *(_QWORD *)(a1 + 40) + 56 || v2 == 0)
    return 0;
  else
    return v2 - 56;
}

uint64_t LLVMGetPreviousGlobalIFunc(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(a1 + 56);
  if (!a1)
    v1 = 0;
  if (v1 == *(uint64_t **)(*(_QWORD *)(a1 + 40) + 64))
    return 0;
  v2 = *v1;
  if (v2)
    return v2 - 56;
  else
    return 0;
}

uint64_t LLVMGetGlobalIFuncResolver(uint64_t a1)
{
  return *(_QWORD *)(a1 - 32);
}

uint64_t LLVMSetGlobalIFuncResolver(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)(result - 32);
  if (*(_QWORD *)(result - 32))
  {
    **(_QWORD **)(result - 16) = *(_QWORD *)(result - 24);
    v3 = *(_QWORD *)(result - 24);
    if (v3)
      *(_QWORD *)(v3 + 16) = *(_QWORD *)(result - 16);
  }
  *v2 = a2;
  if (a2)
  {
    v6 = *(_QWORD *)(a2 + 8);
    v4 = (_QWORD *)(a2 + 8);
    v5 = v6;
    *(_QWORD *)(result - 24) = v6;
    if (v6)
      *(_QWORD *)(v5 + 16) = result - 24;
    *(_QWORD *)(result - 16) = v4;
    *v4 = v2;
  }
  return result;
}

uint64_t LLVMEraseGlobalIFunc(uint64_t a1)
{
  return sub_1C6239CEC(*(_QWORD *)(a1 + 40) + 56, a1 + 56);
}

void LLVMRemoveGlobalIFunc(llvm::Value *this)
{
  uint64_t v2;
  _QWORD *v3;

  llvm::SymbolTableListTraits<llvm::GlobalIFunc>::removeNodeFromList(*((_QWORD *)this + 5) + 56, this);
  v2 = *((_QWORD *)this + 7);
  v3 = (_QWORD *)*((_QWORD *)this + 8);
  *v3 = v2;
  *(_QWORD *)(v2 + 8) = v3;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
}

BOOL LLVMValueIsBasicBlock(uint64_t a1)
{
  return *(_BYTE *)(a1 + 16) == 22;
}

char *LLVMGetBasicBlockName(uint64_t ***a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ****v5;
  uint64_t ***v6;
  int v7;
  int v8;

  if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
  {
    v1 = ***a1;
    v2 = *(_QWORD *)(v1 + 152);
    v3 = *(unsigned int *)(v1 + 168);
    if ((_DWORD)v3)
    {
      LODWORD(v4) = (v3 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      v5 = (uint64_t ****)(v2 + 16 * v4);
      v6 = *v5;
      if (*v5 == a1)
        return (char *)(v5[1] + 2);
      v7 = 1;
      while (v6 != (uint64_t ***)-4096)
      {
        v8 = v4 + v7++;
        v4 = v8 & (v3 - 1);
        v6 = *(uint64_t ****)(v2 + 16 * v4);
        if (v6 == a1)
        {
          v5 = (uint64_t ****)(v2 + 16 * v4);
          return (char *)(v5[1] + 2);
        }
      }
    }
    v5 = (uint64_t ****)(v2 + 16 * v3);
    return (char *)(v5[1] + 2);
  }
  return &byte_1C871356D;
}

uint64_t LLVMGetBasicBlockParent(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t LLVMGetBasicBlockTerminator(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1 == a1 + 40)
    return 0;
  if (v1)
    v2 = v1 - 24;
  else
    v2 = 0;
  if (*(unsigned __int8 *)(v2 + 16) - 29 >= 0xB)
    return 0;
  else
    return v2;
}

uint64_t LLVMCountBasicBlocks(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = result + 72;
  LODWORD(result) = -1;
  v2 = v1;
  do
  {
    v2 = *(_QWORD *)(v2 + 8);
    result = (result + 1);
  }
  while (v2 != v1);
  return result;
}

uint64_t LLVMGetBasicBlocks(uint64_t result, _QWORD *a2)
{
  uint64_t i;
  uint64_t v3;

  for (i = *(_QWORD *)(result + 80); i != result + 72; i = *(_QWORD *)(i + 8))
  {
    v3 = i - 24;
    if (!i)
      v3 = 0;
    *a2++ = v3;
  }
  return result;
}

uint64_t LLVMGetEntryBasicBlock(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
    return v1 - 24;
  else
    return 0;
}

uint64_t LLVMGetFirstBasicBlock(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;

  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
    v2 = v1 == a1 + 72;
  else
    v2 = 1;
  if (v2)
    return 0;
  else
    return v1 - 24;
}

uint64_t LLVMGetLastBasicBlock(uint64_t a1)
{
  uint64_t v1;

  if (a1 + 72 == *(_QWORD *)(a1 + 80))
    return 0;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
    return v1 - 24;
  else
    return 0;
}

uint64_t LLVMGetNextBasicBlock(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + 24;
  if (!a1)
    v1 = 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2 == *(_QWORD *)(a1 + 56) + 72 || v2 == 0)
    return 0;
  else
    return v2 - 24;
}

uint64_t LLVMGetPreviousBasicBlock(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(a1 + 24);
  if (!a1)
    v1 = 0;
  if (v1 == *(uint64_t **)(*(_QWORD *)(a1 + 56) + 80))
    return 0;
  v2 = *v1;
  if (v2)
    return v2 - 24;
  else
    return 0;
}

uint64_t LLVMCreateBasicBlockInContext(_QWORD *a1, _BYTE *a2)
{
  char v3;
  uint64_t v4;
  unsigned int v5;
  _BYTE *v7;
  char v8;
  char v9;

  v3 = 1;
  v9 = 1;
  if (*a2)
  {
    v7 = a2;
    v3 = 3;
  }
  v8 = v3;
  v4 = operator new();
  *(_QWORD *)v4 = *a1 + 1600;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = *(_DWORD *)(v4 + 20) & 0xC0000000;
  *(_DWORD *)(v4 + 16) = 22;
  *(_DWORD *)(v4 + 20) = v5;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = v4 + 40;
  *(_QWORD *)(v4 + 48) = v4 + 40;
  *(_QWORD *)(v4 + 56) = 0;
  llvm::Value::setName((uint64_t ***)v4, (uint64_t)&v7);
  return v4;
}

_QWORD *LLVMInsertExistingBasicBlockAfterInsertBlock(uint64_t a1, _QWORD *a2)
{
  return sub_1C538C368((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) + 72), *(_QWORD *)(a1 + 48) + 24, a2);
}

_QWORD *sub_1C538C368(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;

  if ((_QWORD *)*a1 == a1)
    v4 = (uint64_t *)a1[1];
  else
    v4 = *(uint64_t **)(a2 + 8);
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)a1, a3);
  v5 = *v4;
  a3[3] = *v4;
  a3[4] = v4;
  v6 = a3 + 3;
  *(_QWORD *)(v5 + 8) = v6;
  *v4 = (uint64_t)v6;
  return v6;
}

void LLVMAppendExistingBasicBlock(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;

  v2 = a2;
  v4 = a1 + 72;
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(a1 + 72, a2);
  v5 = *(_QWORD *)(a1 + 72);
  v2[3] = v5;
  v2[4] = v4;
  v2 += 3;
  *(_QWORD *)(v5 + 8) = v2;
  *(_QWORD *)(a1 + 72) = v2;
}

uint64_t LLVMAppendBasicBlockInContext(_QWORD *a1, uint64_t a2, _BYTE *a3)
{
  char v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v11;
  char v12;
  char v13;

  v5 = 1;
  v13 = 1;
  if (*a3)
  {
    v11 = a3;
    v5 = 3;
  }
  v12 = v5;
  v6 = operator new();
  *(_QWORD *)v6 = *a1 + 1600;
  *(_QWORD *)(v6 + 8) = 0;
  v7 = *(_DWORD *)(v6 + 20) & 0xC0000000;
  *(_QWORD *)(v6 + 24) = 0;
  v8 = v6 + 24;
  *(_DWORD *)(v6 + 16) = 22;
  *(_DWORD *)(v6 + 20) = v7;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = v6 + 40;
  *(_QWORD *)(v6 + 48) = v6 + 40;
  *(_QWORD *)(v6 + 56) = 0;
  if (a2)
  {
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(a2 + 72, (_QWORD *)v6);
    v9 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(v6 + 24) = v9;
    *(_QWORD *)(v6 + 32) = a2 + 72;
    *(_QWORD *)(v9 + 8) = v8;
    *(_QWORD *)(a2 + 72) = v8;
  }
  llvm::Value::setName((uint64_t ***)v6, (uint64_t)&v11);
  return v6;
}

uint64_t LLVMAppendBasicBlock(uint64_t a1, _BYTE *a2)
{
  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  return LLVMAppendBasicBlockInContext((_QWORD *)qword_1EF8F7038[0], a1, a2);
}

uint64_t LLVMInsertBasicBlockInContext(_QWORD *a1, uint64_t a2, _BYTE *a3)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _BYTE *v13;
  char v14;
  char v15;

  v5 = 1;
  v15 = 1;
  if (*a3)
  {
    v13 = a3;
    v5 = 3;
  }
  v14 = v5;
  v6 = *(_QWORD *)(a2 + 56);
  v7 = operator new();
  *(_QWORD *)v7 = *a1 + 1600;
  *(_QWORD *)(v7 + 8) = 0;
  v8 = *(_DWORD *)(v7 + 20) & 0xC0000000;
  *(_QWORD *)(v7 + 24) = 0;
  v9 = v7 + 24;
  *(_DWORD *)(v7 + 16) = 22;
  *(_DWORD *)(v7 + 20) = v8;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = v7 + 40;
  *(_QWORD *)(v7 + 48) = v7 + 40;
  *(_QWORD *)(v7 + 56) = 0;
  if (v6)
  {
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v6 + 72, (_QWORD *)v7);
    v11 = *(_QWORD *)(a2 + 24);
    v10 = (uint64_t *)(a2 + 24);
    *(_QWORD *)(v7 + 24) = v11;
    *(_QWORD *)(v7 + 32) = v10;
    *(_QWORD *)(v11 + 8) = v9;
    *v10 = v9;
  }
  llvm::Value::setName((uint64_t ***)v7, (uint64_t)&v13);
  return v7;
}

uint64_t LLVMInsertBasicBlock(uint64_t a1, _BYTE *a2)
{
  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  return LLVMInsertBasicBlockInContext((_QWORD *)qword_1EF8F7038[0], a1, a2);
}

void LLVMMoveBasicBlockBefore(uint64_t a1, uint64_t a2)
{
  sub_1C4FCEAA0(*(_QWORD *)(a2 + 56) + 72, (uint64_t *)(a2 + 24), *(_QWORD *)(a1 + 56) + 72, (uint64_t *)(a1 + 24));
}

void LLVMMoveBasicBlockAfter(uint64_t a1, uint64_t a2)
{
  sub_1C4FCEAA0(*(_QWORD *)(a2 + 56) + 72, *(uint64_t **)(a2 + 32), *(_QWORD *)(a1 + 56) + 72, (uint64_t *)(a1 + 24));
}

uint64_t LLVMGetInstructionParent(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t LLVMGetFirstInstruction(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;

  v1 = *(_QWORD *)(a1 + 48);
  if (v1)
    v2 = v1 == a1 + 40;
  else
    v2 = 1;
  if (v2)
    return 0;
  else
    return v1 - 24;
}

uint64_t LLVMGetLastInstruction(uint64_t a1)
{
  uint64_t v1;

  if (a1 + 40 == *(_QWORD *)(a1 + 48))
    return 0;
  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
    return v1 - 24;
  else
    return 0;
}

uint64_t LLVMGetNextInstruction(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + 24;
  if (!a1)
    v1 = 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2 == *(_QWORD *)(a1 + 40) + 40 || v2 == 0)
    return 0;
  else
    return v2 - 24;
}

uint64_t LLVMGetPreviousInstruction(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(a1 + 24);
  if (!a1)
    v1 = 0;
  if (v1 == *(uint64_t **)(*(_QWORD *)(a1 + 40) + 48))
    return 0;
  v2 = *v1;
  if (v2)
    return v2 - 24;
  else
    return 0;
}

void LLVMInstructionRemoveFromParent(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(a1 + 40) + 40, (uint64_t ***)a1);
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 32);
  *v3 = v2;
  *(_QWORD *)(v2 + 8) = v3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
}

void LLVMInstructionEraseFromParent(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(a1 + 40) + 40, (uint64_t ***)a1);
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 32);
  *v3 = v2;
  *(_QWORD *)(v2 + 8) = v3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  llvm::Value::deleteValue((llvm::Value *)a1);
}

uint64_t LLVMGetICmpPredicate(uint64_t a1)
{
  int v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v1 == 81)
    return *(_WORD *)(a1 + 18) & 0x3F;
  v2 = 0;
  if (a1 && v1 == 5)
  {
    if (*(_WORD *)(a1 + 18) == 53)
      return *(unsigned __int16 *)(a1 + 24);
    else
      return 0;
  }
  return v2;
}

uint64_t LLVMGetFCmpPredicate(uint64_t a1)
{
  int v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v1 == 82)
    return *(_WORD *)(a1 + 18) & 0x3F;
  v2 = 0;
  if (a1 && v1 == 5)
  {
    if (*(_WORD *)(a1 + 18) == 54)
      return *(unsigned __int16 *)(a1 + 24);
    else
      return 0;
  }
  return v2;
}

uint64_t LLVMGetInstructionOpcode(uint64_t a1)
{
  unsigned int v1;

  if (a1 && (v1 = *(unsigned __int8 *)(a1 + 16), v1 >= 0x1C))
    return sub_1C5389FE0(v1 - 28);
  else
    return 0;
}

void LLVMInstructionClone(unsigned __int8 *a1)
{
  if (a1)
  {
    if (a1[16] >= 0x1Cu)
      llvm::Instruction::clone((llvm::Instruction *)a1);
  }
}

uint64_t LLVMIsATerminatorInst(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 - 29 >= 0xB)
    v2 = 0;
  else
    v2 = a1;
  if (v1 < 0x1C || a1 == 0)
    return 0;
  else
    return v2;
}

unint64_t LLVMGetNumArgOperands(uint64_t a1)
{
  unsigned int v1;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (a1)
  {
    if (v1 >= 0x1C && v1 - 81 >= 0xFFFFFFFE)
      return (*(_DWORD *)(a1 + 20) & 0x7FFFFFFu) - 1;
  }
  if (v1 == 84)
  {
    v4 = 0;
  }
  else if (v1 == 39)
  {
    v4 = (*(_DWORD *)(a1 + 80) + 1);
  }
  else
  {
    v4 = 2;
  }
  v5 = 0;
  v6 = *(_DWORD *)(a1 + 20);
  v7 = -(uint64_t)(v6 & 0x7FFFFFF);
  if (v6 < 0)
  {
    v8 = a1 - 32 * (v6 & 0x7FFFFFF);
    v9 = *(_QWORD *)(v8 - 8);
    if ((v9 & 0xFFFFFFFF0) != 0)
      v5 = *(_DWORD *)(v8 - 12) - *(_DWORD *)(v8 - v9);
    else
      v5 = 0;
  }
  return (-32 * v4 + 32 * (unint64_t)-v5 - 32 * v7 - 32) >> 5;
}

uint64_t LLVMGetInstructionCallConv(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 18) >> 2) & 0x3FF;
}

uint64_t LLVMSetInstructionCallConv(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 18) = *(_WORD *)(result + 18) & 0xF003 | (4 * a2);
  return result;
}

uint64_t LLVMSetInstrParamAlignment(uint64_t ***a1, int a2, unsigned int a3)
{
  unint64_t v5;
  uint64_t result;

  v5 = llvm::Attribute::get(**a1, 74, 1 << (63 - __clz(a3)));
  result = llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(a1 + 8), (llvm::LLVMContext *)**a1, a2, v5);
  a1[8] = (uint64_t **)result;
  return result;
}

uint64_t LLVMAddCallSiteAttribute(llvm::LLVMContext ***a1, int a2, uint64_t a3)
{
  uint64_t result;

  result = llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(a1 + 8), **a1, a2, a3);
  a1[8] = (llvm::LLVMContext **)result;
  return result;
}

uint64_t LLVMGetCallSiteAttributeCount(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2
    && (a2 + 1) < *(_DWORD *)(v2 + 8)
    && (v3 = *(_QWORD *)(v2 + 8 * (a2 + 1) + 40)) != 0)
  {
    return *(unsigned int *)(v3 + 8);
  }
  else
  {
    return 0;
  }
}

uint64_t LLVMGetCallSiteAttributes(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(result + 64);
  if (v3)
  {
    if ((a2 + 1) < *(_DWORD *)(v3 + 8))
    {
      v4 = *(_QWORD *)(v3 + 8 * (a2 + 1) + 40);
      if (v4)
      {
        v5 = *(unsigned int *)(v4 + 8);
        if ((_DWORD)v5)
        {
          v6 = (uint64_t *)(v4 + 48);
          v7 = 8 * v5;
          do
          {
            v8 = *v6++;
            *a3++ = v8;
            v7 -= 8;
          }
          while (v7);
        }
      }
    }
  }
  return result;
}

uint64_t LLVMGetCallSiteEnumAttribute(uint64_t a1, int a2, int a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 64);
  return llvm::AttributeList::getAttributeAtIndex(&v4, a2, a3);
}

uint64_t LLVMGetCallSiteStringAttribute(uint64_t a1, int a2, _QWORD *a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  size_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int i;
  int v14;
  uint64_t v15;
  const void *v16;

  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
  {
    if ((a2 + 1) < *(_DWORD *)(v4 + 8))
    {
      v5 = *(_QWORD *)(v4 + 8 * (a2 + 1) + 40);
      if (v5)
      {
        v6 = *(_DWORD *)(v5 + 40);
        if (v6)
        {
          v9 = a4;
          v10 = *(_QWORD *)(v5 + 24);
          v11 = sub_1C5E3DF4C(a3, (uint64_t)a3 + a4);
          v12 = v6 - 1;
          for (i = 1; ; ++i)
          {
            v14 = v11 & v12;
            v15 = v10 + 24 * (v11 & v12);
            v16 = *(const void **)v15;
            if (*(_QWORD *)v15 == -1)
            {
              if (a3 == (_QWORD *)-1)
                return *(_QWORD *)(v15 + 16);
            }
            else if (v16 == (const void *)-2)
            {
              if (a3 == (_QWORD *)-2)
                return *(_QWORD *)(v15 + 16);
            }
            else if (*(_QWORD *)(v15 + 8) == v9 && (!a4 || !memcmp(a3, *(const void **)v15, v9)))
            {
              return *(_QWORD *)(v15 + 16);
            }
            if (v16 == (const void *)-1)
              return 0;
            v11 = i + v14;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t LLVMRemoveCallSiteEnumAttribute(uint64_t a1, int a2, int a3)
{
  uint64_t result;

  result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(a1 + 64), **(uint64_t ***)a1, a2, a3);
  *(_QWORD *)(a1 + 64) = result;
  return result;
}

uint64_t LLVMRemoveCallSiteStringAttribute(uint64_t a1, int a2, _QWORD *a3, unsigned int a4)
{
  uint64_t result;

  result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(a1 + 64), **(uint64_t ***)a1, a2, a3, a4);
  *(_QWORD *)(a1 + 64) = result;
  return result;
}

uint64_t LLVMGetCalledValue(uint64_t a1)
{
  return *(_QWORD *)(a1 - 32);
}

uint64_t LLVMGetCalledFunctionType(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

BOOL LLVMIsTailCall(uint64_t a1)
{
  return (*(_WORD *)(a1 + 18) & 3u) - 1 < 2;
}

uint64_t LLVMSetTailCall(uint64_t result, int a2)
{
  *(_WORD *)(result + 18) = *(_WORD *)(result + 18) & 0xFFFC | (a2 != 0);
  return result;
}

uint64_t LLVMGetNormalDest(uint64_t a1)
{
  return *(_QWORD *)(a1 - 96);
}

uint64_t LLVMGetUnwindDest(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v4;
  uint64_t v5;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v1 == 36)
  {
    if ((*(_WORD *)(a1 + 18) & 1) != 0)
    {
      v2 = *(_DWORD *)(a1 + 20);
      goto LABEL_11;
    }
    return 0;
  }
  if (a1 && v1 == 38)
  {
    if ((*(_WORD *)(a1 + 18) & 1) != 0)
    {
      v2 = *(_DWORD *)(a1 + 20);
      if ((v2 & 0x40000000) != 0)
      {
        v5 = *(_QWORD *)(a1 - 8);
        goto LABEL_12;
      }
LABEL_11:
      v5 = a1 - 32 * (v2 & 0x7FFFFFF);
LABEL_12:
      v4 = v5 + 32;
      return *(_QWORD *)v4;
    }
    return 0;
  }
  v4 = a1 - 64;
  return *(_QWORD *)v4;
}

uint64_t LLVMSetNormalDest(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)(result - 96);
  if (*(_QWORD *)(result - 96))
  {
    **(_QWORD **)(result - 80) = *(_QWORD *)(result - 88);
    v3 = *(_QWORD *)(result - 88);
    if (v3)
      *(_QWORD *)(v3 + 16) = *(_QWORD *)(result - 80);
  }
  *v2 = a2;
  if (a2)
  {
    v6 = *(_QWORD *)(a2 + 8);
    v4 = (_QWORD *)(a2 + 8);
    v5 = v6;
    *(_QWORD *)(result - 88) = v6;
    if (v6)
      *(_QWORD *)(v5 + 16) = result - 88;
    *(_QWORD *)(result - 80) = v4;
    *v4 = v2;
  }
  return result;
}

uint64_t LLVMSetUnwindDest(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(unsigned __int8 *)(result + 16);
  if (result && v2 == 36)
    return sub_1C622AB8C(result, a2);
  if (result && v2 == 38)
  {
    v3 = *(_DWORD *)(result + 20);
    if ((v3 & 0x40000000) != 0)
      v4 = *(_QWORD *)(result - 8);
    else
      v4 = result - 32 * (v3 & 0x7FFFFFF);
    v10 = (uint64_t *)(v4 + 32);
    if (*(_QWORD *)(v4 + 32))
    {
      **(_QWORD **)(v4 + 48) = *(_QWORD *)(v4 + 40);
      v11 = *(_QWORD *)(v4 + 40);
      if (v11)
        *(_QWORD *)(v11 + 16) = *(_QWORD *)(v4 + 48);
    }
    *v10 = a2;
    if (a2)
    {
      v14 = *(_QWORD *)(a2 + 8);
      v12 = (uint64_t **)(a2 + 8);
      v13 = v14;
      *(_QWORD *)(v4 + 40) = v14;
      if (v14)
        *(_QWORD *)(v13 + 16) = v4 + 40;
      *(_QWORD *)(v4 + 48) = v12;
      *v12 = v10;
    }
  }
  else
  {
    v5 = (uint64_t *)(result - 64);
    if (*(_QWORD *)(result - 64))
    {
      **(_QWORD **)(result - 48) = *(_QWORD *)(result - 56);
      v6 = *(_QWORD *)(result - 56);
      if (v6)
        *(_QWORD *)(v6 + 16) = *(_QWORD *)(result - 48);
    }
    *v5 = a2;
    if (a2)
    {
      v9 = *(_QWORD *)(a2 + 8);
      v7 = (uint64_t **)(a2 + 8);
      v8 = v9;
      *(_QWORD *)(result - 56) = v9;
      if (v9)
        *(_QWORD *)(v8 + 16) = result - 56;
      *(_QWORD *)(result - 48) = v7;
      *v7 = v5;
    }
  }
  return result;
}

uint64_t LLVMGetNumSuccessors(uint64_t a1)
{
  int v1;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 != 30)
    return ((uint64_t (*)(_QWORD))((char *)&locret_1C538CE30 + 4 * byte_1C85FD2B4[v1 - 29]))(0);
  if ((*(_DWORD *)(a1 + 20) & 0x7FFFFFF) == 3)
    return 2;
  return 1;
}

uint64_t sub_1C538CE54@<X0>(uint64_t a1@<X8>)
{
  return (*(_DWORD *)(a1 + 20) >> 1) & 0x3FFFFFF;
}

uint64_t sub_1C538CE64@<X0>(uint64_t a1@<X8>)
{
  return (*(_DWORD *)(a1 + 20) & 0x7FFFFFFu) - 1;
}

uint64_t sub_1C538CE74()
{
  return 2;
}

uint64_t sub_1C538CE7C@<X0>(uint64_t a1@<X8>)
{
  return *(_WORD *)(a1 + 18) & 1;
}

uint64_t sub_1C538CE88()
{
  return 1;
}

uint64_t sub_1C538CE90@<X0>(uint64_t a1@<X8>)
{
  return (*(_DWORD *)(a1 + 80) + 1);
}

BOOL LLVMIsConditional(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) == 3;
}

uint64_t LLVMGetCondition(uint64_t a1)
{
  return *(_QWORD *)(a1 - 96);
}

uint64_t LLVMSetCondition(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)(result - 96);
  if (*(_QWORD *)(result - 96))
  {
    **(_QWORD **)(result - 80) = *(_QWORD *)(result - 88);
    v3 = *(_QWORD *)(result - 88);
    if (v3)
      *(_QWORD *)(v3 + 16) = *(_QWORD *)(result - 80);
  }
  *v2 = a2;
  if (a2)
  {
    v6 = *(_QWORD *)(a2 + 8);
    v4 = (_QWORD *)(a2 + 8);
    v5 = v6;
    *(_QWORD *)(result - 88) = v6;
    if (v6)
      *(_QWORD *)(v5 + 16) = result - 88;
    *(_QWORD *)(result - 80) = v4;
    *v4 = v2;
  }
  return result;
}

uint64_t LLVMGetSwitchDefaultDest(uint64_t a1)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(a1 + 20);
  if ((v1 & 0x40000000) != 0)
    v2 = *(_QWORD *)(a1 - 8);
  else
    v2 = a1 - 32 * (v1 & 0x7FFFFFF);
  return *(_QWORD *)(v2 + 32);
}

uint64_t LLVMGetAllocatedType(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t LLVMIsInBounds(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 17) >> 1) & 1;
}

uint64_t LLVMSetIsInBounds(uint64_t result, int a2)
{
  *(_BYTE *)(result + 17) = *(_BYTE *)(result + 17) & 0xFD | (2 * (a2 != 0));
  return result;
}

uint64_t LLVMGetGEPSourceElementType(uint64_t a1)
{
  BOOL v1;
  uint64_t v2;

  v1 = *(_BYTE *)(a1 + 16) != 62 || a1 == 0;
  v2 = 64;
  if (v1)
    v2 = 24;
  return *(_QWORD *)(a1 + v2);
}

llvm::PHINode *LLVMAddIncoming(llvm::PHINode *this, uint64_t *a2, uint64_t *a3, unsigned int a4)
{
  llvm::PHINode *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a4)
  {
    v6 = this;
    v7 = a4;
    do
    {
      v9 = *a2++;
      v8 = v9;
      v10 = *a3++;
      this = (llvm::PHINode *)sub_1C477667C(v6, v8, v10);
      --v7;
    }
    while (v7);
  }
  return this;
}

uint64_t LLVMCountIncoming(uint64_t a1)
{
  return *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
}

uint64_t LLVMGetIncomingValue(uint64_t a1, unsigned int a2)
{
  int v2;
  uint64_t v3;

  v2 = *(_DWORD *)(a1 + 20);
  if ((v2 & 0x40000000) != 0)
    v3 = *(_QWORD *)(a1 - 8);
  else
    v3 = a1 - 32 * (v2 & 0x7FFFFFF);
  return *(_QWORD *)(v3 + 32 * a2);
}

uint64_t LLVMGetIncomingBlock(uint64_t a1, unsigned int a2)
{
  int v2;
  uint64_t v3;

  v2 = *(_DWORD *)(a1 + 20);
  if ((v2 & 0x40000000) != 0)
    v3 = *(_QWORD *)(a1 - 8);
  else
    v3 = a1 - 32 * (v2 & 0x7FFFFFF);
  return *(_QWORD *)(v3 + 32 * *(unsigned int *)(a1 + 60) + 8 * a2);
}

uint64_t LLVMGetNumIndices(uint64_t result)
{
  unsigned int v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(result + 16);
  if (v1 > 0x5B)
  {
    if (v1 == 92 || v1 == 93)
      return *(unsigned int *)(result + 72);
    goto LABEL_10;
  }
  if (v1 != 5)
  {
    if (v1 != 62)
      goto LABEL_10;
    return (*(_DWORD *)(result + 20) & 0x7FFFFFFu) - 1;
  }
  if (*(_WORD *)(result + 18) == 34)
    return (*(_DWORD *)(result + 20) & 0x7FFFFFFu) - 1;
LABEL_10:
  if (v1 == 5)
    v2 = result;
  else
    v2 = 0;
  if (v2)
    return *(unsigned int *)(v2 + 32);
  return result;
}

uint64_t LLVMGetIndices(uint64_t result)
{
  int v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(result + 16);
  if (result && v1 == 92 || result && v1 == 93)
    return *(_QWORD *)(result + 64);
  if (v1 == 5)
    v2 = result;
  else
    v2 = 0;
  if (v2)
    return *(_QWORD *)(v2 + 24);
  return result;
}

double LLVMCreateBuilderInContext(uint64_t a1)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  *(_QWORD *)v2 = v2 + 16;
  *(_QWORD *)&result = 0x200000000;
  *(_QWORD *)(v2 + 120) = &unk_1E8167888;
  *(_QWORD *)(v2 + 8) = 0x200000000;
  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = v2 + 120;
  *(_QWORD *)(v2 + 128) = &unk_1E8167A08;
  *(_QWORD *)(v2 + 80) = v2 + 128;
  *(_QWORD *)(v2 + 88) = 0;
  *(_DWORD *)(v2 + 96) = 0;
  *(_WORD *)(v2 + 100) = 512;
  *(_BYTE *)(v2 + 102) = 7;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 112) = 0;
  return result;
}

double LLVMCreateBuilder()
{
  unint64_t v1;
  uint64_t v2;
  double result;

  if (!atomic_load(qword_1EF8F7038))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7038, (void *(*)(void))sub_1C5392384, (void (*)(void *))sub_1C53923AC);
  v1 = qword_1EF8F7038[0];
  v2 = operator new();
  *(_QWORD *)v2 = v2 + 16;
  *(_QWORD *)&result = 0x200000000;
  *(_QWORD *)(v2 + 120) = &unk_1E8167888;
  *(_QWORD *)(v2 + 8) = 0x200000000;
  *(_QWORD *)(v2 + 64) = v1;
  *(_QWORD *)(v2 + 72) = v2 + 120;
  *(_QWORD *)(v2 + 128) = &unk_1E8167A08;
  *(_QWORD *)(v2 + 80) = v2 + 128;
  *(_QWORD *)(v2 + 88) = 0;
  *(_DWORD *)(v2 + 96) = 0;
  *(_WORD *)(v2 + 100) = 512;
  *(_BYTE *)(v2 + 102) = 7;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 112) = 0;
  return result;
}

uint64_t LLVMPositionBuilder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a3)
    v3 = a3 + 24;
  else
    v3 = a2 + 40;
  return sub_1C4D8AE2C(a1, a2, v3);
}

uint64_t LLVMPositionBuilderBefore(uint64_t a1, uint64_t a2)
{
  return sub_1C4D8AE2C(a1, *(_QWORD *)(a2 + 40), a2 + 24);
}

uint64_t LLVMPositionBuilderAtEnd(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = a2;
  *(_QWORD *)(result + 56) = a2 + 40;
  return result;
}

uint64_t LLVMGetInsertBlock(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t LLVMClearInsertionPosition(uint64_t result)
{
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  return result;
}

void LLVMInsertIntoBuilder(uint64_t *a1, unsigned __int8 **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 **v7;
  int v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  _WORD v11[20];
  unsigned __int8 *v12;

  v11[16] = 257;
  (*(void (**)(uint64_t, unsigned __int8 **, _WORD *, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], a2, v11, a1[6], a1[7]);
  v4 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v4)
  {
    v5 = *a1;
    v6 = *a1 + 16 * v4;
    v7 = a2 + 6;
    do
    {
      v8 = *(_DWORD *)v5;
      v9 = *(unsigned __int8 **)(v5 + 8);
      if (v9)
      {
        if (!v8)
        {
          v12 = *(unsigned __int8 **)(v5 + 8);
          llvm::MetadataTracking::track((uint64_t)&v12, v9, 2);
LABEL_14:
          if (&v12 == v7)
          {
            if (v12)
              llvm::MetadataTracking::untrack((uint64_t)&v12, v12);
          }
          else
          {
            if (*v7)
              llvm::MetadataTracking::untrack((uint64_t)(a2 + 6), *v7);
            v10 = v12;
            *v7 = v12;
            if (v10)
              llvm::MetadataTracking::retrack((uint64_t)&v12, v10, (uint64_t)(a2 + 6));
          }
          goto LABEL_11;
        }
      }
      else
      {
        if (!*v7 && (*((_BYTE *)a2 + 23) & 0x20) == 0)
          goto LABEL_11;
        if (!v8)
        {
          v12 = 0;
          goto LABEL_14;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)a2, v8, (llvm::MDNode *)v9);
LABEL_11:
      v5 += 16;
    }
    while (v5 != v6);
  }
}

void LLVMInsertIntoBuilderWithName(uint64_t *a1, unsigned __int8 **a2, _BYTE *a3)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 **v9;
  int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  _BYTE *v13;
  char v14;
  char v15;
  unsigned __int8 *v16;

  v5 = 1;
  v15 = 1;
  if (*a3)
  {
    v13 = a3;
    v5 = 3;
  }
  v14 = v5;
  (*(void (**)(uint64_t, unsigned __int8 **, _BYTE **, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], a2, &v13, a1[6], a1[7]);
  v6 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v6)
  {
    v7 = *a1;
    v8 = *a1 + 16 * v6;
    v9 = a2 + 6;
    do
    {
      v10 = *(_DWORD *)v7;
      v11 = *(unsigned __int8 **)(v7 + 8);
      if (v11)
      {
        if (!v10)
        {
          v16 = *(unsigned __int8 **)(v7 + 8);
          llvm::MetadataTracking::track((uint64_t)&v16, v11, 2);
LABEL_16:
          if (&v16 == v9)
          {
            if (v16)
              llvm::MetadataTracking::untrack((uint64_t)&v16, v16);
          }
          else
          {
            if (*v9)
              llvm::MetadataTracking::untrack((uint64_t)(a2 + 6), *v9);
            v12 = v16;
            *v9 = v16;
            if (v12)
              llvm::MetadataTracking::retrack((uint64_t)&v16, v12, (uint64_t)(a2 + 6));
          }
          goto LABEL_13;
        }
      }
      else
      {
        if (!*v9 && (*((_BYTE *)a2 + 23) & 0x20) == 0)
          goto LABEL_13;
        if (!v10)
        {
          v16 = 0;
          goto LABEL_16;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)a2, v10, (llvm::MDNode *)v11);
LABEL_13:
      v7 += 16;
    }
    while (v7 != v8);
  }
}

void **LLVMDisposeBuilder(void **result)
{
  if (result)
  {
    if (*result != result + 2)
      free(*result);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

unsigned __int8 *LLVMGetCurrentDebugLocation2(unsigned int *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v3;

  llvm::IRBuilderBase::getCurrentDebugLocation(a1, &v3);
  v1 = v3;
  if (v3)
    llvm::MetadataTracking::untrack((uint64_t)&v3, v3);
  return v1;
}

uint64_t LLVMSetCurrentDebugLocation2(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;

  v2 = result;
  if (a2)
  {
    v12 = a2;
    llvm::MetadataTracking::track((uint64_t)&v12, a2, 2);
    result = sub_1C4774EF4(v2, 0, (uint64_t)v12);
    if (v12)
      return llvm::MetadataTracking::untrack((uint64_t)&v12, v12);
  }
  else
  {
    v3 = *(_QWORD *)result;
    v4 = *(unsigned int *)(result + 8);
    if ((_DWORD)v4)
    {
      v6 = 0;
      v5 = v3 + 16 * v4;
      v7 = 16 * v4;
      v8 = 16 * v4 - 16;
      while (*(_DWORD *)(v3 + v6))
      {
        v6 += 16;
        if (v7 == v6)
          goto LABEL_6;
      }
      v5 = v3 + v6;
      if (v8 != v6)
      {
        v9 = (_QWORD *)(v5 + 24);
        v10 = v7 - v6 - 16;
        do
        {
          v11 = *((_DWORD *)v9 - 2);
          if (v11)
          {
            *(_DWORD *)v5 = v11;
            *(_QWORD *)(v5 + 8) = *v9;
            v5 += 16;
          }
          v9 += 2;
          v10 -= 16;
        }
        while (v10);
      }
    }
    else
    {
      v5 = *(_QWORD *)result;
    }
LABEL_6:
    *(_DWORD *)(result + 8) = (unint64_t)(v5 - v3) >> 4;
  }
  return result;
}

uint64_t LLVMSetCurrentDebugLocation(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t result;
  unsigned __int8 *v6;

  if (a2)
  {
    v3 = *(unsigned __int8 **)(a2 + 24);
    v6 = v3;
    if (v3)
    {
      llvm::MetadataTracking::track((uint64_t)&v6, v3, 2);
      v4 = v6;
    }
    else
    {
      v4 = 0;
    }
  }
  else
  {
    v4 = 0;
    v6 = 0;
  }
  result = sub_1C4774EF4(a1, 0, (uint64_t)v4);
  if (v6)
    return llvm::MetadataTracking::untrack((uint64_t)&v6, v6);
  return result;
}

uint64_t LLVMGetCurrentDebugLocation(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  unsigned __int8 *v4;

  v1 = *(uint64_t **)(a1 + 64);
  llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)a1, &v4);
  v2 = llvm::MetadataAsValue::get(v1, v4);
  if (v4)
    llvm::MetadataTracking::untrack((uint64_t)&v4, v4);
  return v2;
}

void LLVMAddMetadataToInst(uint64_t *a1, unsigned __int8 **a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 **v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v4 = *a1;
    v5 = *a1 + 16 * v2;
    v6 = a2 + 6;
    do
    {
      v7 = *(_DWORD *)v4;
      v8 = *(unsigned __int8 **)(v4 + 8);
      if (v8)
      {
        if (!v7)
        {
          v10 = *(unsigned __int8 **)(v4 + 8);
          llvm::MetadataTracking::track((uint64_t)&v10, v8, 2);
LABEL_13:
          if (&v10 == v6)
          {
            if (v10)
              llvm::MetadataTracking::untrack((uint64_t)&v10, v10);
          }
          else
          {
            if (*v6)
              llvm::MetadataTracking::untrack((uint64_t)v6, *v6);
            v9 = v10;
            *v6 = v10;
            if (v9)
              llvm::MetadataTracking::retrack((uint64_t)&v10, v9, (uint64_t)v6);
          }
          goto LABEL_10;
        }
      }
      else
      {
        if (!*v6 && (*((_BYTE *)a2 + 23) & 0x20) == 0)
          goto LABEL_10;
        if (!v7)
        {
          v10 = 0;
          goto LABEL_13;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)a2, v7, (llvm::MDNode *)v8);
LABEL_10:
      v4 += 16;
    }
    while (v4 != v5);
  }
}

uint64_t LLVMBuilderSetDefaultFPMathTag(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 88) = a2;
  return result;
}

uint64_t LLVMBuilderGetDefaultFPMathTag(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88);
}

unsigned __int8 **sub_1C538D7E4(uint64_t *a1, llvm::Value *a2)
{
  llvm::LLVMContext *v4;
  _BOOL8 v5;
  size_t v6;
  llvm::ReturnInst *v7;
  llvm::ReturnInst *v8;
  char v10[32];
  __int16 v11;

  v4 = (llvm::LLVMContext *)a1[8];
  v5 = a2 != 0;
  if (a2)
    v6 = 96;
  else
    v6 = 64;
  v7 = (llvm::ReturnInst *)operator new(v6);
  v8 = (llvm::ReturnInst *)((char *)v7 + 32 * v5);
  *((_DWORD *)v8 + 5) = *((_DWORD *)v8 + 5) & 0x38000000 | v5;
  if (a2)
  {
    do
    {
      *(_QWORD *)v7 = 0;
      *((_QWORD *)v7 + 1) = 0;
      *((_QWORD *)v7 + 2) = 0;
      *((_QWORD *)v7 + 3) = v8;
      v7 = (llvm::ReturnInst *)((char *)v7 + 32);
    }
    while (v7 != v8);
  }
  llvm::ReturnInst::ReturnInst(v8, v4, a2, 0);
  v11 = 257;
  return sub_1C4867F8C(a1, (unsigned __int8 **)v8, (uint64_t)v10);
}

unsigned __int8 **LLVMBuildAggregateRet(uint64_t *a1, llvm::Type *a2, int a3)
{
  llvm::Value *v6;
  unsigned int v7;
  uint64_t v8;
  llvm::LLVMContext *v9;
  _BOOL8 v10;
  size_t v11;
  llvm::ReturnInst *v12;
  llvm::ReturnInst *v13;
  _QWORD v15[4];
  __int16 v16;
  unsigned int v17;

  v6 = llvm::UndefValue::get(**(llvm::UndefValue ***)(*(_QWORD *)(*(_QWORD *)(a1[6] + 56) + 24) + 16), a2);
  v17 = 0;
  if (a3)
  {
    v7 = 0;
    do
    {
      v8 = *((_QWORD *)a2 + v7);
      v15[0] = "mrv";
      v16 = 259;
      v6 = (llvm::Value *)sub_1C506D788((uint64_t)a1, (uint64_t)v6, v8, &v17, 1, (uint64_t)v15);
      v7 = v17 + 1;
      v17 = v7;
    }
    while (v7 != a3);
  }
  v9 = (llvm::LLVMContext *)a1[8];
  v10 = v6 != 0;
  if (v6)
    v11 = 96;
  else
    v11 = 64;
  v12 = (llvm::ReturnInst *)operator new(v11);
  v13 = (llvm::ReturnInst *)((char *)v12 + 32 * v10);
  *((_DWORD *)v13 + 5) = *((_DWORD *)v13 + 5) & 0x38000000 | v10;
  if (v6)
  {
    do
    {
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = 0;
      *((_QWORD *)v12 + 2) = 0;
      *((_QWORD *)v12 + 3) = v13;
      v12 = (llvm::ReturnInst *)((char *)v12 + 32);
    }
    while (v12 != v13);
  }
  llvm::ReturnInst::ReturnInst(v13, v9, v6, 0);
  v16 = 257;
  return sub_1C4867F8C(a1, (unsigned __int8 **)v13, (uint64_t)v15);
}

unsigned __int8 **LLVMBuildBr(uint64_t *a1, uint64_t a2)
{
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE v8[32];
  __int16 v9;

  v4 = (char *)operator new(0x60uLL);
  *((_DWORD *)v4 + 13) = *((_DWORD *)v4 + 13) & 0x38000000 | 1;
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 4) = ***(_QWORD ***)a2 + 1576;
  *((_QWORD *)v4 + 3) = v4 + 32;
  *((_QWORD *)v4 + 5) = 0;
  v4[48] = 30;
  v4[49] = 0;
  *((_WORD *)v4 + 25) = 0;
  *((_DWORD *)v4 + 13) = 1;
  *((_DWORD *)v4 + 22) = 0;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  v5 = (_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v4 = a2;
  *((_QWORD *)v4 + 1) = v6;
  if (v6)
    *(_QWORD *)(v6 + 16) = v4 + 8;
  *((_QWORD *)v4 + 2) = v5;
  *v5 = v4;
  v9 = 257;
  return sub_1C4867F8C(a1, (unsigned __int8 **)v4 + 4, (uint64_t)v8);
}

unsigned __int8 **LLVMBuildCondBr(uint64_t *a1, llvm::Value *a2, llvm::BasicBlock *a3, llvm::BasicBlock *a4)
{
  char *v8;
  uint64_t v9;
  unsigned __int8 **v10;
  char *v11;
  char v13[32];
  __int16 v14;

  v8 = (char *)operator new(0xA0uLL);
  v9 = 0;
  v10 = (unsigned __int8 **)(v8 + 96);
  *((_DWORD *)v8 + 29) = *((_DWORD *)v8 + 29) & 0x38000000 | 3;
  do
  {
    v11 = &v8[v9];
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = 0;
    *((_QWORD *)v11 + 3) = v10;
    v9 += 32;
  }
  while (v9 != 96);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v8 + 96), a3, a4, a2, 0);
  v14 = 257;
  return sub_1C4867F8C(a1, v10, (uint64_t)v13);
}

unsigned __int8 **LLVMBuildSwitch(uint64_t *a1, _QWORD ***a2, uint64_t a3, int a4)
{
  char *v8;
  unsigned __int8 **v9;
  _BYTE v11[32];
  __int16 v12;

  v8 = (char *)operator new(0x48uLL);
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = ***a2 + 1576;
  *((_QWORD *)v8 + 2) = 0;
  v9 = (unsigned __int8 **)(v8 + 8);
  v8[24] = 31;
  v8[25] = 0;
  *((_WORD *)v8 + 13) = 0;
  *((_DWORD *)v8 + 7) = 0x40000000;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_DWORD *)v8 + 16) = 0;
  llvm::SwitchInst::init((uint64_t)(v8 + 8), (uint64_t)a2, a3, 2 * a4 + 2);
  v12 = 257;
  return sub_1C4867F8C(a1, v9, (uint64_t)v11);
}

unsigned __int8 **LLVMBuildIndirectBr(uint64_t *a1, llvm::Value *a2, int a3)
{
  char *v6;
  unsigned __int8 **v7;
  _BYTE v9[32];
  __int16 v10;

  v6 = (char *)operator new(0x48uLL);
  v7 = (unsigned __int8 **)(v6 + 8);
  *((_DWORD *)v6 + 7) = *((_DWORD *)v6 + 7) & 0x38000000 | 0x40000000;
  *(_QWORD *)v6 = 0;
  llvm::IndirectBrInst::IndirectBrInst((llvm::IndirectBrInst *)(v6 + 8), a2, a3, 0);
  v10 = 257;
  return sub_1C5391E84(a1, v7, (uint64_t)v9);
}

unsigned __int8 **LLVMBuildInvoke(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  uint64_t v9;
  char v10;
  _BYTE *v12;
  char v13;
  char v14;

  v9 = **(_QWORD **)(*(_QWORD *)a2 + 16);
  v10 = 1;
  v14 = 1;
  if (*a7)
  {
    v12 = a7;
    v10 = 3;
  }
  v13 = v10;
  return sub_1C622ABE4(a1, v9, a2, a5, a6, a3, a4, (uint64_t)&v12);
}

unsigned __int8 **LLVMBuildInvoke2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5, uint64_t a6, uint64_t a7, _BYTE *a8)
{
  char v8;
  _BYTE *v10;
  char v11;
  char v12;

  v8 = 1;
  v12 = 1;
  if (*a8)
  {
    v10 = a8;
    v8 = 3;
  }
  v11 = v8;
  return sub_1C622ABE4(a1, a2, a3, a6, a7, a4, a5, (uint64_t)&v10);
}

unsigned __int8 **LLVMBuildLandingPad(uint64_t *a1, llvm::LandingPadInst *a2, uint64_t a3, llvm::Type *a4, llvm::Instruction *a5)
{
  uint64_t v9;
  char v10;
  unsigned __int8 **v11;
  llvm::Instruction *v13;
  char v14;
  char v15;
  _BYTE v16[32];
  __int16 v17;

  if (a3)
  {
    v9 = *(_QWORD *)(a1[6] + 56);
    sub_1C53D1F60((_QWORD *)v9, a3);
    *(_WORD *)(v9 + 18) |= 8u;
  }
  v10 = 1;
  v15 = 1;
  if (*(_BYTE *)a5)
  {
    v13 = a5;
    v10 = 3;
  }
  v14 = v10;
  v17 = 257;
  v11 = (unsigned __int8 **)llvm::LandingPadInst::Create(a2, a4, (const llvm::Twine *)v16, 0, a5);
  sub_1C61D76F0(a1, v11, (uint64_t)&v13);
  return v11;
}

llvm::Instruction *LLVMBuildCatchPad(uint64_t *a1, llvm::Type **a2, uint64_t *a3, unsigned int a4, _BYTE *a5)
{
  char v5;
  _BYTE *v7;
  char v8;
  char v9;

  v5 = 1;
  v9 = 1;
  if (*a5)
  {
    v7 = a5;
    v5 = 3;
  }
  v8 = v5;
  return sub_1C622AC80(a1, a2, a3, a4, (uint64_t)&v7);
}

llvm::Instruction *LLVMBuildCleanupPad(uint64_t a1, llvm::Type **NullValue, uint64_t *a3, unsigned int a4, _BYTE *a5)
{
  char v9;
  _BYTE *v11;
  char v12;
  char v13;

  if (!NullValue)
    NullValue = llvm::Constant::getNullValue((llvm::Constant *)(**(_QWORD **)(a1 + 64) + 1744), 0);
  v9 = 1;
  v13 = 1;
  if (*a5)
  {
    v11 = a5;
    v9 = 3;
  }
  v12 = v9;
  return sub_1C622AD1C((uint64_t *)a1, NullValue, a3, a4, (uint64_t)&v11);
}

unsigned __int8 **LLVMBuildResume(uint64_t *a1, llvm::Value *a2)
{
  char *v4;
  unsigned __int8 **v5;
  _BYTE v7[32];
  __int16 v8;

  v4 = (char *)operator new(0x60uLL);
  *((_DWORD *)v4 + 13) = *((_DWORD *)v4 + 13) & 0x38000000 | 1;
  v5 = (unsigned __int8 **)(v4 + 32);
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = v4 + 32;
  llvm::ResumeInst::ResumeInst((llvm::ResumeInst *)(v4 + 32), a2, 0);
  v8 = 257;
  sub_1C61D76F0(a1, v5, (uint64_t)v7);
  return v5;
}

unsigned __int8 **LLVMBuildCatchSwitch(uint64_t a1, llvm::Type **a2, llvm::BasicBlock *a3, int a4, _BYTE *a5)
{
  llvm::Type **NullValue;
  char v10;
  char *v11;
  unsigned __int8 **v12;
  _BYTE *v14;
  char v15;
  char v16;
  _BYTE v17[32];
  __int16 v18;

  NullValue = a2;
  if (!a2)
    NullValue = llvm::Constant::getNullValue((llvm::Constant *)(**(_QWORD **)(a1 + 64) + 1744), 0);
  v10 = 1;
  v16 = 1;
  if (*a5)
  {
    v14 = a5;
    v10 = 3;
  }
  v15 = v10;
  v18 = 257;
  v11 = (char *)operator new(0x48uLL);
  v12 = (unsigned __int8 **)(v11 + 8);
  *((_DWORD *)v11 + 7) = *((_DWORD *)v11 + 7) & 0x38000000 | 0x40000000;
  *(_QWORD *)v11 = 0;
  llvm::CatchSwitchInst::CatchSwitchInst((llvm::CatchSwitchInst *)(v11 + 8), NullValue, a3, a4, (const llvm::Twine *)v17, 0);
  sub_1C61D76F0((uint64_t *)a1, v12, (uint64_t)&v14);
  return v12;
}

unsigned __int8 **LLVMBuildCatchRet(uint64_t *a1, llvm::Value *a2, llvm::BasicBlock *a3)
{
  char *v6;
  unsigned __int8 **v7;
  _BYTE v9[32];
  __int16 v10;

  v6 = (char *)operator new(0x80uLL);
  *((_DWORD *)v6 + 21) = *((_DWORD *)v6 + 21) & 0x38000000 | 2;
  v7 = (unsigned __int8 **)(v6 + 64);
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *((_QWORD *)v6 + 3) = v6 + 64;
  *((_QWORD *)v6 + 4) = 0;
  *((_QWORD *)v6 + 5) = 0;
  *((_QWORD *)v6 + 6) = 0;
  *((_QWORD *)v6 + 7) = v6 + 64;
  llvm::CatchReturnInst::CatchReturnInst((llvm::CatchReturnInst *)(v6 + 64), a2, a3, 0);
  v10 = 257;
  sub_1C61D76F0(a1, v7, (uint64_t)v9);
  return v7;
}

uint64_t LLVMGetNumClauses(uint64_t a1)
{
  return *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
}

uint64_t LLVMGetClause(uint64_t a1, unsigned int a2)
{
  int v2;
  uint64_t v3;

  v2 = *(_DWORD *)(a1 + 20);
  if ((v2 & 0x40000000) != 0)
    v3 = *(_QWORD *)(a1 - 8);
  else
    v3 = a1 - 32 * (v2 & 0x7FFFFFF);
  return *(_QWORD *)(v3 + 32 * a2);
}

uint64_t LLVMIsCleanup(uint64_t a1)
{
  return *(_WORD *)(a1 + 18) & 1;
}

uint64_t LLVMSetCleanup(uint64_t result, int a2)
{
  *(_WORD *)(result + 18) = *(_WORD *)(result + 18) & 0xFFFE | (a2 != 0);
  return result;
}

uint64_t LLVMGetNumHandlers(uint64_t a1)
{
  int v1;

  if ((*(_WORD *)(a1 + 18) & 1) != 0)
    v1 = -2;
  else
    v1 = -1;
  return v1 + (*(_DWORD *)(a1 + 20) & 0x7FFFFFFu);
}

uint64_t LLVMGetHandlers(uint64_t result, _QWORD *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_DWORD *)(result + 20);
  if ((v2 & 0x40000000) != 0)
  {
    v4 = *(_QWORD *)(result - 8);
    v3 = v2 & 0x7FFFFFF;
  }
  else
  {
    v3 = v2 & 0x7FFFFFF;
    v4 = result - 32 * v3;
  }
  v5 = 1;
  if ((*(_WORD *)(result + 18) & 1) != 0)
    v5 = 2;
  if (v5 != v3)
  {
    v6 = (uint64_t *)(v4 + 32 * v5);
    v7 = 32 * v3 - 32 * v5;
    do
    {
      v8 = *v6;
      v6 += 4;
      *a2++ = v8;
      v7 -= 32;
    }
    while (v7);
  }
  return result;
}

uint64_t LLVMGetParentCatchSwitch(uint64_t a1)
{
  return *(_QWORD *)(a1 - 32);
}

uint64_t LLVMSetParentCatchSwitch(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)(result - 32);
  if (*(_QWORD *)(result - 32))
  {
    **(_QWORD **)(result - 16) = *(_QWORD *)(result - 24);
    v3 = *(_QWORD *)(result - 24);
    if (v3)
      *(_QWORD *)(v3 + 16) = *(_QWORD *)(result - 16);
  }
  *v2 = a2;
  if (a2)
  {
    v6 = *(_QWORD *)(a2 + 8);
    v4 = (_QWORD *)(a2 + 8);
    v5 = v6;
    *(_QWORD *)(result - 24) = v6;
    if (v6)
      *(_QWORD *)(v5 + 16) = result - 24;
    *(_QWORD *)(result - 16) = v4;
    *v4 = v2;
  }
  return result;
}

uint64_t LLVMGetArgOperand(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * a2);
}

uint64_t LLVMBuildAdd(uint64_t a1, _QWORD *a2, uint64_t a3, _BYTE *a4)
{
  char v7;
  uint64_t result;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _BYTE *v18;
  char v19;
  char v20;
  _BYTE v21[32];
  __int16 v22;

  v7 = 1;
  v20 = 1;
  if (*a4)
  {
    v18 = a4;
    v7 = 3;
  }
  v19 = v7;
  result = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a2, a3, 0, 0);
  if (!result)
  {
    v22 = 257;
    v9 = (char *)operator new(0x80uLL);
    *((_QWORD *)v9 + 8) = *a2;
    v10 = (uint64_t)(v9 + 64);
    *((_QWORD *)v9 + 3) = v9 + 64;
    *((_QWORD *)v9 + 5) = 0;
    v11 = v9 + 40;
    *((_QWORD *)v9 + 6) = 0;
    *((_QWORD *)v9 + 7) = v9 + 64;
    *((_QWORD *)v9 + 9) = 0;
    *((_QWORD *)v9 + 10) = 0x200000029;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *((_DWORD *)v9 + 30) = 0;
    *(_QWORD *)v9 = a2;
    v14 = a2[1];
    v13 = a2 + 1;
    v12 = v14;
    *((_QWORD *)v9 + 1) = v14;
    if (v14)
      *(_QWORD *)(v12 + 16) = v9 + 8;
    *((_QWORD *)v9 + 2) = v13;
    *v13 = v9;
    *((_QWORD *)v9 + 4) = a3;
    if (a3)
    {
      v17 = *(_QWORD *)(a3 + 8);
      v16 = (_QWORD *)(a3 + 8);
      v15 = v17;
      *v11 = v17;
      if (v17)
        *(_QWORD *)(v15 + 16) = v11;
      *((_QWORD *)v9 + 6) = v16;
      *v16 = v9 + 32;
    }
    llvm::Value::setName((uint64_t ***)v9 + 8, (uint64_t)v21);
    return sub_1C4773754((uint64_t *)a1, v10, (uint64_t)&v18);
  }
  return result;
}

uint64_t LLVMBuildNSWAdd(uint64_t a1, _QWORD *a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C538E314(a1, a2, a3, (uint64_t)&v6);
}

uint64_t sub_1C538E314(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _BYTE v18[32];
  __int16 v19;

  result = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a2, a3, 0, 1);
  if (!result)
  {
    v19 = 257;
    v9 = (char *)operator new(0x80uLL);
    *((_QWORD *)v9 + 8) = *a2;
    v10 = (uint64_t)(v9 + 64);
    *((_QWORD *)v9 + 3) = v9 + 64;
    *((_QWORD *)v9 + 5) = 0;
    v11 = v9 + 40;
    *((_QWORD *)v9 + 6) = 0;
    *((_QWORD *)v9 + 7) = v9 + 64;
    *((_QWORD *)v9 + 9) = 0;
    *((_QWORD *)v9 + 10) = 0x200000029;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *((_DWORD *)v9 + 30) = 0;
    *(_QWORD *)v9 = a2;
    v14 = a2[1];
    v13 = a2 + 1;
    v12 = v14;
    *((_QWORD *)v9 + 1) = v14;
    if (v14)
      *(_QWORD *)(v12 + 16) = v9 + 8;
    *((_QWORD *)v9 + 2) = v13;
    *v13 = v9;
    *((_QWORD *)v9 + 4) = a3;
    if (a3)
    {
      v17 = *(_QWORD *)(a3 + 8);
      v16 = (_QWORD *)(a3 + 8);
      v15 = v17;
      *v11 = v17;
      if (v17)
        *(_QWORD *)(v15 + 16) = v11;
      *((_QWORD *)v9 + 6) = v16;
      *v16 = v9 + 32;
    }
    llvm::Value::setName((uint64_t ***)v9 + 8, (uint64_t)v18);
    result = sub_1C4773754((uint64_t *)a1, v10, a4);
    *(_BYTE *)(result + 17) |= 4u;
  }
  return result;
}

uint64_t LLVMBuildNUWAdd(uint64_t a1, _QWORD *a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C622AE3C(a1, a2, a3, (uint64_t)&v6);
}

uint64_t LLVMBuildFAdd(uint64_t a1, uint64_t *a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C534554C(a1, a2, a3, (uint64_t)&v6, 0);
}

uint64_t LLVMBuildSub(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C47733F8(a1, a2, a3, (uint64_t)&v6, 0, 0);
}

uint64_t LLVMBuildNSWSub(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C47733F8(a1, a2, a3, (uint64_t)&v6, 0, 1);
}

uint64_t LLVMBuildNUWSub(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C47733F8(a1, a2, a3, (uint64_t)&v6, 1, 0);
}

uint64_t LLVMBuildFSub(uint64_t a1, uint64_t *a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C477265C(a1, a2, a3, (uint64_t)&v6, 0);
}

uint64_t LLVMBuildMul(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C4EC4040(a1, a2, a3, (uint64_t)&v6, 0, 0);
}

uint64_t LLVMBuildNSWMul(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C4EC4040(a1, a2, a3, (uint64_t)&v6, 0, 1);
}

uint64_t LLVMBuildNUWMul(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C4EC4040(a1, a2, a3, (uint64_t)&v6, 1, 0);
}

uint64_t LLVMBuildFMul(uint64_t a1, uint64_t *a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C4772428(a1, a2, a3, (uint64_t)&v6, 0);
}

uint64_t LLVMBuildUDiv(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C538E6F8(a1, a2, a3, (uint64_t)&v6, 0);
}

uint64_t sub_1C538E6F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  char *v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned __int8 *v40[4];
  __int16 v41;

  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    v9 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 104))(*(_QWORD *)(a1 + 72), a2, a3, a5);
    if (v9)
      v10 = v9[16] >= 0x1Cu;
    else
      v10 = 0;
    if (v10)
    {
      (*(void (**)(_QWORD, unsigned __int8 *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v9, a4, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
      v11 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v11)
      {
        v12 = *(_QWORD *)a1;
        v13 = *(_QWORD *)a1 + 16 * v11;
        v14 = (unsigned __int8 **)(v9 + 48);
        do
        {
          v15 = *(_DWORD *)v12;
          v16 = *(unsigned __int8 **)(v12 + 8);
          if (v16)
          {
            if (!v15)
            {
              v40[0] = *(unsigned __int8 **)(v12 + 8);
              llvm::MetadataTracking::track((uint64_t)v40, v16, 2);
LABEL_22:
              if (v40 == v14)
              {
                if (v40[0])
                  llvm::MetadataTracking::untrack((uint64_t)v40, v40[0]);
              }
              else
              {
                if (*v14)
                  llvm::MetadataTracking::untrack((uint64_t)(v9 + 48), *v14);
                v17 = v40[0];
                *v14 = v40[0];
                if (v17)
                  llvm::MetadataTracking::retrack((uint64_t)v40, v17, (uint64_t)(v9 + 48));
              }
              goto LABEL_19;
            }
          }
          else
          {
            if (!*v14 && (v9[23] & 0x20) == 0)
              goto LABEL_19;
            if (!v15)
            {
              v40[0] = 0;
              goto LABEL_22;
            }
          }
          llvm::Value::setMetadata((llvm::Value *)v9, v15, (llvm::MDNode *)v16);
LABEL_19:
          v12 += 16;
        }
        while (v12 != v13);
      }
    }
  }
  else
  {
    if ((a5 & 1) != 0)
    {
      v41 = 257;
      v18 = (char *)operator new(0x80uLL);
      v19 = v18;
      *((_QWORD *)v18 + 8) = *(_QWORD *)a2;
      v20 = v18 + 64;
      *((_QWORD *)v18 + 3) = v18 + 64;
      *((_QWORD *)v18 + 5) = 0;
      v21 = v18 + 40;
      *((_QWORD *)v18 + 6) = 0;
      *((_QWORD *)v18 + 7) = v18 + 64;
      *((_QWORD *)v18 + 9) = 0;
      *((_QWORD *)v18 + 10) = 0x20000002FLL;
      *(_OWORD *)(v18 + 88) = 0u;
      *(_OWORD *)(v18 + 104) = 0u;
      *((_DWORD *)v18 + 30) = 0;
      *(_QWORD *)v18 = a2;
      v24 = *(_QWORD *)(a2 + 8);
      v23 = (_QWORD *)(a2 + 8);
      v22 = v24;
      *((_QWORD *)v18 + 1) = v24;
      if (v24)
        *(_QWORD *)(v22 + 16) = v18 + 8;
      *((_QWORD *)v18 + 2) = v23;
      *v23 = v18;
      *((_QWORD *)v18 + 4) = a3;
      if (a3)
      {
        v27 = *(_QWORD *)(a3 + 8);
        v26 = (_QWORD *)(a3 + 8);
        v25 = v27;
        *v21 = v27;
        if (v27)
          *(_QWORD *)(v25 + 16) = v21;
        *((_QWORD *)v18 + 6) = v26;
        *v26 = v18 + 32;
      }
      llvm::Value::setName((uint64_t ***)v18 + 8, (uint64_t)v40);
      v19[81] |= 2u;
      v28 = (uint64_t *)a1;
      v29 = (uint64_t)v20;
    }
    else
    {
      v41 = 257;
      v30 = (char *)operator new(0x80uLL);
      *((_QWORD *)v30 + 8) = *(_QWORD *)a2;
      v31 = v30 + 64;
      *((_QWORD *)v30 + 3) = v30 + 64;
      *((_QWORD *)v30 + 5) = 0;
      v32 = v30 + 40;
      *((_QWORD *)v30 + 6) = 0;
      *((_QWORD *)v30 + 7) = v30 + 64;
      *((_QWORD *)v30 + 9) = 0;
      *((_QWORD *)v30 + 10) = 0x20000002FLL;
      *(_OWORD *)(v30 + 88) = 0u;
      *(_OWORD *)(v30 + 104) = 0u;
      *((_DWORD *)v30 + 30) = 0;
      *(_QWORD *)v30 = a2;
      v35 = *(_QWORD *)(a2 + 8);
      v34 = (_QWORD *)(a2 + 8);
      v33 = v35;
      *((_QWORD *)v30 + 1) = v35;
      if (v35)
        *(_QWORD *)(v33 + 16) = v30 + 8;
      *((_QWORD *)v30 + 2) = v34;
      *v34 = v30;
      *((_QWORD *)v30 + 4) = a3;
      if (a3)
      {
        v38 = *(_QWORD *)(a3 + 8);
        v37 = (_QWORD *)(a3 + 8);
        v36 = v38;
        *v32 = v38;
        if (v38)
          *(_QWORD *)(v36 + 16) = v32;
        *((_QWORD *)v30 + 6) = v37;
        *v37 = v30 + 32;
      }
      llvm::Value::setName((uint64_t ***)v30 + 8, (uint64_t)v40);
      v28 = (uint64_t *)a1;
      v29 = (uint64_t)v31;
    }
    return sub_1C4773754(v28, v29, a4);
  }
  return (uint64_t)v9;
}

uint64_t LLVMBuildExactUDiv(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C538E6F8(a1, a2, a3, (uint64_t)&v6, 1);
}

uint64_t LLVMBuildSDiv(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C538EA44(a1, a2, a3, (uint64_t)&v6, 0);
}

uint64_t sub_1C538EA44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  char *v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned __int8 *v40[4];
  __int16 v41;

  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    v9 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 112))(*(_QWORD *)(a1 + 72), a2, a3, a5);
    if (v9)
      v10 = v9[16] >= 0x1Cu;
    else
      v10 = 0;
    if (v10)
    {
      (*(void (**)(_QWORD, unsigned __int8 *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v9, a4, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
      v11 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v11)
      {
        v12 = *(_QWORD *)a1;
        v13 = *(_QWORD *)a1 + 16 * v11;
        v14 = (unsigned __int8 **)(v9 + 48);
        do
        {
          v15 = *(_DWORD *)v12;
          v16 = *(unsigned __int8 **)(v12 + 8);
          if (v16)
          {
            if (!v15)
            {
              v40[0] = *(unsigned __int8 **)(v12 + 8);
              llvm::MetadataTracking::track((uint64_t)v40, v16, 2);
LABEL_22:
              if (v40 == v14)
              {
                if (v40[0])
                  llvm::MetadataTracking::untrack((uint64_t)v40, v40[0]);
              }
              else
              {
                if (*v14)
                  llvm::MetadataTracking::untrack((uint64_t)(v9 + 48), *v14);
                v17 = v40[0];
                *v14 = v40[0];
                if (v17)
                  llvm::MetadataTracking::retrack((uint64_t)v40, v17, (uint64_t)(v9 + 48));
              }
              goto LABEL_19;
            }
          }
          else
          {
            if (!*v14 && (v9[23] & 0x20) == 0)
              goto LABEL_19;
            if (!v15)
            {
              v40[0] = 0;
              goto LABEL_22;
            }
          }
          llvm::Value::setMetadata((llvm::Value *)v9, v15, (llvm::MDNode *)v16);
LABEL_19:
          v12 += 16;
        }
        while (v12 != v13);
      }
    }
  }
  else
  {
    if ((a5 & 1) != 0)
    {
      v41 = 257;
      v18 = (char *)operator new(0x80uLL);
      v19 = v18;
      *((_QWORD *)v18 + 8) = *(_QWORD *)a2;
      v20 = v18 + 64;
      *((_QWORD *)v18 + 3) = v18 + 64;
      *((_QWORD *)v18 + 5) = 0;
      v21 = v18 + 40;
      *((_QWORD *)v18 + 6) = 0;
      *((_QWORD *)v18 + 7) = v18 + 64;
      *((_QWORD *)v18 + 9) = 0;
      *((_QWORD *)v18 + 10) = 0x200000030;
      *(_OWORD *)(v18 + 88) = 0u;
      *(_OWORD *)(v18 + 104) = 0u;
      *((_DWORD *)v18 + 30) = 0;
      *(_QWORD *)v18 = a2;
      v24 = *(_QWORD *)(a2 + 8);
      v23 = (_QWORD *)(a2 + 8);
      v22 = v24;
      *((_QWORD *)v18 + 1) = v24;
      if (v24)
        *(_QWORD *)(v22 + 16) = v18 + 8;
      *((_QWORD *)v18 + 2) = v23;
      *v23 = v18;
      *((_QWORD *)v18 + 4) = a3;
      if (a3)
      {
        v27 = *(_QWORD *)(a3 + 8);
        v26 = (_QWORD *)(a3 + 8);
        v25 = v27;
        *v21 = v27;
        if (v27)
          *(_QWORD *)(v25 + 16) = v21;
        *((_QWORD *)v18 + 6) = v26;
        *v26 = v18 + 32;
      }
      llvm::Value::setName((uint64_t ***)v18 + 8, (uint64_t)v40);
      v19[81] |= 2u;
      v28 = (uint64_t *)a1;
      v29 = (uint64_t)v20;
    }
    else
    {
      v41 = 257;
      v30 = (char *)operator new(0x80uLL);
      *((_QWORD *)v30 + 8) = *(_QWORD *)a2;
      v31 = v30 + 64;
      *((_QWORD *)v30 + 3) = v30 + 64;
      *((_QWORD *)v30 + 5) = 0;
      v32 = v30 + 40;
      *((_QWORD *)v30 + 6) = 0;
      *((_QWORD *)v30 + 7) = v30 + 64;
      *((_QWORD *)v30 + 9) = 0;
      *((_QWORD *)v30 + 10) = 0x200000030;
      *(_OWORD *)(v30 + 88) = 0u;
      *(_OWORD *)(v30 + 104) = 0u;
      *((_DWORD *)v30 + 30) = 0;
      *(_QWORD *)v30 = a2;
      v35 = *(_QWORD *)(a2 + 8);
      v34 = (_QWORD *)(a2 + 8);
      v33 = v35;
      *((_QWORD *)v30 + 1) = v35;
      if (v35)
        *(_QWORD *)(v33 + 16) = v30 + 8;
      *((_QWORD *)v30 + 2) = v34;
      *v34 = v30;
      *((_QWORD *)v30 + 4) = a3;
      if (a3)
      {
        v38 = *(_QWORD *)(a3 + 8);
        v37 = (_QWORD *)(a3 + 8);
        v36 = v38;
        *v32 = v38;
        if (v38)
          *(_QWORD *)(v36 + 16) = v32;
        *((_QWORD *)v30 + 6) = v37;
        *v37 = v30 + 32;
      }
      llvm::Value::setName((uint64_t ***)v30 + 8, (uint64_t)v40);
      v28 = (uint64_t *)a1;
      v29 = (uint64_t)v31;
    }
    return sub_1C4773754(v28, v29, a4);
  }
  return (uint64_t)v9;
}

uint64_t LLVMBuildExactSDiv(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C538EA44(a1, a2, a3, (uint64_t)&v6, 1);
}

uint64_t LLVMBuildFDiv(uint64_t a1, uint64_t *a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C47721F8(a1, a2, a3, (uint64_t)&v6, 0);
}

unsigned __int8 *LLVMBuildURem(uint64_t *a1, _QWORD *a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C538EDCC(a1, a2, a3, (uint64_t)&v6);
}

unsigned __int8 *sub_1C538EDCC(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *result;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _BYTE v18[32];
  __int16 v19;

  result = sub_1C477422C(a1, 22, (uint64_t)a2, a3, a4);
  if (!result)
  {
    v19 = 257;
    v9 = (char *)operator new(0x80uLL);
    *((_QWORD *)v9 + 8) = *a2;
    v10 = (uint64_t)(v9 + 64);
    *((_QWORD *)v9 + 3) = v9 + 64;
    *((_QWORD *)v9 + 5) = 0;
    v11 = v9 + 40;
    *((_QWORD *)v9 + 6) = 0;
    *((_QWORD *)v9 + 7) = v9 + 64;
    *((_QWORD *)v9 + 9) = 0;
    *((_QWORD *)v9 + 10) = 0x200000032;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *((_DWORD *)v9 + 30) = 0;
    *(_QWORD *)v9 = a2;
    v14 = a2[1];
    v13 = a2 + 1;
    v12 = v14;
    *((_QWORD *)v9 + 1) = v14;
    if (v14)
      *(_QWORD *)(v12 + 16) = v9 + 8;
    *((_QWORD *)v9 + 2) = v13;
    *v13 = v9;
    *((_QWORD *)v9 + 4) = a3;
    if (a3)
    {
      v17 = *(_QWORD *)(a3 + 8);
      v16 = (_QWORD *)(a3 + 8);
      v15 = v17;
      *v11 = v17;
      if (v17)
        *(_QWORD *)(v15 + 16) = v11;
      *((_QWORD *)v9 + 6) = v16;
      *v16 = v9 + 32;
    }
    llvm::Value::setName((uint64_t ***)v9 + 8, (uint64_t)v18);
    return (unsigned __int8 *)sub_1C4773754(a1, v10, a4);
  }
  return result;
}

unsigned __int8 *LLVMBuildSRem(uint64_t *a1, _QWORD *a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C622AECC(a1, a2, a3, (uint64_t)&v6);
}

unsigned __int8 *LLVMBuildFRem(uint64_t a1, uint64_t *a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C622AF4C(a1, a2, a3, (uint64_t)&v6);
}

uint64_t LLVMBuildShl(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C506E874(a1, a2, a3, (uint64_t)&v6, 0, 0);
}

uint64_t LLVMBuildLShr(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C506ED1C(a1, a2, a3, (uint64_t)&v6, 0);
}

uint64_t LLVMBuildAShr(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C534E5D8(a1, a2, a3, (uint64_t)&v6, 0);
}

uint64_t LLVMBuildAnd(uint64_t a1, _QWORD *a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C4D89BCC(a1, a2, a3, (uint64_t)&v6);
}

uint64_t LLVMBuildOr(uint64_t a1, _QWORD *a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C4773594(a1, a2, a3, (uint64_t)&v6);
}

unsigned __int8 *LLVMBuildXor(uint64_t *a1, _QWORD *a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C506EC1C(a1, a2, a3, (uint64_t)&v6);
}

unsigned __int8 *LLVMBuildBinOp(uint64_t a1, int a2, _QWORD *a3, uint64_t a4, _BYTE *a5)
{
  char v8;
  uint64_t v9;
  _BYTE *v11;
  char v12;
  char v13;

  v8 = 1;
  v13 = 1;
  if (*a5)
  {
    v11 = a5;
    v8 = 3;
  }
  v9 = sub_1C538F130(a2);
  v12 = v8;
  return sub_1C4773860(a1, v9, a3, a4, (uint64_t)&v11, 0);
}

uint64_t sub_1C538F130(int a1)
{
  return ((uint64_t (*)())((char *)nullsub_837 + 4 * byte_1C85FD2BF[a1 - 1]))();
}

uint64_t sub_1C538F150()
{
  return 59;
}

uint64_t sub_1C538F158()
{
  return 63;
}

uint64_t sub_1C538F160()
{
  return 64;
}

uint64_t sub_1C538F168()
{
  return 56;
}

uint64_t sub_1C538F170()
{
  return 35;
}

uint64_t sub_1C538F178()
{
  return 67;
}

uint64_t sub_1C538F180()
{
  return 24;
}

uint64_t sub_1C538F188()
{
  return 25;
}

uint64_t sub_1C538F190()
{
  return 29;
}

uint64_t sub_1C538F198()
{
  return 30;
}

uint64_t sub_1C538F1A0()
{
  return 33;
}

uint64_t sub_1C538F1A8()
{
  return 34;
}

uint64_t sub_1C538F1B0()
{
  return 44;
}

uint64_t sub_1C538F1B8()
{
  return 45;
}

uint64_t sub_1C538F1C0()
{
  return 46;
}

uint64_t sub_1C538F1C8()
{
  return 47;
}

uint64_t sub_1C538F1D0()
{
  return 60;
}

uint64_t sub_1C538F1D8()
{
  return 6;
}

uint64_t sub_1C538F1E0()
{
  return 15;
}

uint64_t sub_1C538F1E8()
{
  return 18;
}

uint64_t sub_1C538F1F0()
{
  return 19;
}

uint64_t sub_1C538F1F8()
{
  return 20;
}

uint64_t sub_1C538F200()
{
  return 22;
}

uint64_t sub_1C538F208()
{
  return 23;
}

uint64_t sub_1C538F210()
{
  return 26;
}

uint64_t sub_1C538F218()
{
  return 43;
}

uint64_t sub_1C538F220()
{
  return 53;
}

uint64_t sub_1C538F228()
{
  return 57;
}

uint64_t sub_1C538F230()
{
  return 61;
}

uint64_t sub_1C538F238()
{
  return 62;
}

uint64_t sub_1C538F240()
{
  return 50;
}

uint64_t sub_1C538F248()
{
  return 9;
}

uint64_t sub_1C538F250()
{
  return 10;
}

uint64_t sub_1C538F258()
{
  return 12;
}

uint64_t sub_1C538F260()
{
  return 13;
}

uint64_t sub_1C538F268()
{
  return 14;
}

uint64_t sub_1C538F270()
{
  return 16;
}

uint64_t sub_1C538F278()
{
  return 17;
}

uint64_t sub_1C538F280()
{
  return 21;
}

uint64_t sub_1C538F288()
{
  return 27;
}

uint64_t sub_1C538F290()
{
  return 28;
}

uint64_t sub_1C538F298()
{
  return 31;
}

uint64_t sub_1C538F2A0()
{
  return 32;
}

uint64_t sub_1C538F2A8()
{
  return 40;
}

uint64_t sub_1C538F2B0()
{
  return 41;
}

uint64_t sub_1C538F2B8()
{
  return 42;
}

uint64_t sub_1C538F2C0()
{
  return 54;
}

uint64_t sub_1C538F2C8()
{
  return 58;
}

uint64_t sub_1C538F2D0()
{
  return 66;
}

uint64_t sub_1C538F2D8()
{
  return 8;
}

uint64_t sub_1C538F2E0()
{
  return 52;
}

uint64_t sub_1C538F2E8()
{
  return 51;
}

uint64_t sub_1C538F2F0()
{
  return 11;
}

uint64_t sub_1C538F2F8()
{
  return 38;
}

uint64_t sub_1C538F300()
{
  return 39;
}

uint64_t sub_1C538F308()
{
  return 48;
}

uint64_t sub_1C538F310()
{
  return 49;
}

uint64_t sub_1C538F318()
{
  return 55;
}

uint64_t sub_1C538F320()
{
  return 36;
}

uint64_t sub_1C538F328()
{
  return 37;
}

uint64_t sub_1C538F330()
{
  return 65;
}

unsigned __int8 *LLVMBuildNeg(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  char v3;
  _BYTE *v5;
  char v6;
  char v7;

  v3 = 1;
  v7 = 1;
  if (*a3)
  {
    v5 = a3;
    v3 = 3;
  }
  v6 = v3;
  return sub_1C5346748(a1, a2, (uint64_t)&v5, 0, 0);
}

unsigned __int8 *LLVMBuildNSWNeg(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  char v3;
  _BYTE *v5;
  char v6;
  char v7;

  v3 = 1;
  v7 = 1;
  if (*a3)
  {
    v5 = a3;
    v3 = 3;
  }
  v6 = v3;
  return sub_1C5346748(a1, a2, (uint64_t)&v5, 0, 1);
}

unsigned __int8 *LLVMBuildNUWNeg(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  char v3;
  _BYTE *v5;
  char v6;
  char v7;

  v3 = 1;
  v7 = 1;
  if (*a3)
  {
    v5 = a3;
    v3 = 3;
  }
  v6 = v3;
  return sub_1C5346748(a1, a2, (uint64_t)&v5, 1, 0);
}

unsigned __int8 *LLVMBuildFNeg(uint64_t *a1, uint64_t a2, _BYTE *a3)
{
  char v3;
  _BYTE *v5;
  char v6;
  char v7;

  v3 = 1;
  v7 = 1;
  if (*a3)
  {
    v5 = a3;
    v3 = 3;
  }
  v6 = v3;
  return sub_1C4772890(a1, a2, (uint64_t)&v5, 0);
}

uint64_t LLVMBuildNot(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  char v3;
  _BYTE *v5;
  char v6;
  char v7;

  v3 = 1;
  v7 = 1;
  if (*a3)
  {
    v5 = a3;
    v3 = 3;
  }
  v6 = v3;
  return sub_1C506EAA0(a1, a2, (uint64_t)&v5);
}

unsigned __int8 **LLVMBuildMalloc(uint64_t *a1, llvm::ConstantExpr *a2, _BYTE *a3)
{
  llvm::Type ***v6;
  llvm::Type **SizeOf;
  llvm::Type *v8;
  llvm::ConstantExpr *TruncOrBitCast;
  uint64_t v10;
  unsigned __int8 **v11;
  char v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 **v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  _QWORD v21[4];
  __int16 v22;
  unsigned __int8 *v23;

  v6 = (llvm::Type ***)(***(_QWORD ***)a1[6] + 1960);
  SizeOf = (llvm::Type **)llvm::ConstantExpr::getSizeOf(a2, a2);
  TruncOrBitCast = llvm::ConstantExpr::getTruncOrBitCast(SizeOf, v6, v8);
  v10 = a1[6];
  v22 = 257;
  v11 = (unsigned __int8 **)sub_1C53E59EC(0, v10, v6, a2, (uint64_t)TruncOrBitCast, 0, 0, 0, 0, (uint64_t)v21);
  v12 = 1;
  HIBYTE(v22) = 1;
  if (*a3)
  {
    v21[0] = a3;
    v12 = 3;
  }
  LOBYTE(v22) = v12;
  (*(void (**)(uint64_t, unsigned __int8 **, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v11, v21, a1[6], a1[7]);
  v13 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v13)
  {
    v15 = *a1;
    v16 = *a1 + 16 * v13;
    v17 = v11 + 6;
    do
    {
      v18 = *(_DWORD *)v15;
      v19 = *(unsigned __int8 **)(v15 + 8);
      if (v19)
      {
        if (!v18)
        {
          v23 = *(unsigned __int8 **)(v15 + 8);
          llvm::MetadataTracking::track((uint64_t)&v23, v19, 2);
LABEL_16:
          if (&v23 == v17)
          {
            if (v23)
              llvm::MetadataTracking::untrack((uint64_t)&v23, v23);
          }
          else
          {
            if (*v17)
              llvm::MetadataTracking::untrack((uint64_t)(v11 + 6), *v17);
            v20 = v23;
            *v17 = v23;
            if (v20)
              llvm::MetadataTracking::retrack((uint64_t)&v23, v20, (uint64_t)(v11 + 6));
          }
          goto LABEL_13;
        }
      }
      else
      {
        if (!*v17 && (*((_BYTE *)v11 + 23) & 0x20) == 0)
          goto LABEL_13;
        if (!v18)
        {
          v23 = 0;
          goto LABEL_16;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v11, v18, (llvm::MDNode *)v19);
LABEL_13:
      v15 += 16;
    }
    while (v15 != v16);
  }
  return v11;
}

unsigned __int8 **LLVMBuildArrayMalloc(uint64_t *a1, llvm::ConstantExpr *a2, llvm::ConstantInt **a3, _BYTE *a4)
{
  llvm::Type ***v8;
  llvm::Type **SizeOf;
  llvm::Type *v10;
  llvm::ConstantExpr *TruncOrBitCast;
  uint64_t v12;
  unsigned __int8 **v13;
  char v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 **v19;
  int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  _QWORD v23[4];
  __int16 v24;
  unsigned __int8 *v25;

  v8 = (llvm::Type ***)(***(_QWORD ***)a1[6] + 1960);
  SizeOf = (llvm::Type **)llvm::ConstantExpr::getSizeOf(a2, a2);
  TruncOrBitCast = llvm::ConstantExpr::getTruncOrBitCast(SizeOf, v8, v10);
  v12 = a1[6];
  v24 = 257;
  v13 = (unsigned __int8 **)sub_1C53E59EC(0, v12, v8, a2, (uint64_t)TruncOrBitCast, a3, 0, 0, 0, (uint64_t)v23);
  v14 = 1;
  HIBYTE(v24) = 1;
  if (*a4)
  {
    v23[0] = a4;
    v14 = 3;
  }
  LOBYTE(v24) = v14;
  (*(void (**)(uint64_t, unsigned __int8 **, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v13, v23, a1[6], a1[7]);
  v15 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v15)
  {
    v17 = *a1;
    v18 = *a1 + 16 * v15;
    v19 = v13 + 6;
    do
    {
      v20 = *(_DWORD *)v17;
      v21 = *(unsigned __int8 **)(v17 + 8);
      if (v21)
      {
        if (!v20)
        {
          v25 = *(unsigned __int8 **)(v17 + 8);
          llvm::MetadataTracking::track((uint64_t)&v25, v21, 2);
LABEL_16:
          if (&v25 == v19)
          {
            if (v25)
              llvm::MetadataTracking::untrack((uint64_t)&v25, v25);
          }
          else
          {
            if (*v19)
              llvm::MetadataTracking::untrack((uint64_t)(v13 + 6), *v19);
            v22 = v25;
            *v19 = v25;
            if (v22)
              llvm::MetadataTracking::retrack((uint64_t)&v25, v22, (uint64_t)(v13 + 6));
          }
          goto LABEL_13;
        }
      }
      else
      {
        if (!*v19 && (*((_BYTE *)v13 + 23) & 0x20) == 0)
          goto LABEL_13;
        if (!v20)
        {
          v25 = 0;
          goto LABEL_16;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v13, v20, (llvm::MDNode *)v21);
LABEL_13:
      v17 += 16;
    }
    while (v17 != v18);
  }
  return v13;
}

llvm::Value *LLVMBuildMemSet(uint64_t a1, llvm::Value *a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  unint64_t v5;
  __int16 v6;

  v5 = __clz(a5) ^ 0x13F;
  if (a5)
    v6 = v5;
  else
    v6 = 0;
  return llvm::IRBuilderBase::CreateMemSet(a1, a2, a3, a4, v6, 0, 0, 0, 0);
}

llvm::Value *LLVMBuildMemCpy(uint64_t a1, llvm::Value *a2, unsigned int a3, llvm::Value *a4, unsigned int a5, uint64_t *a6)
{
  __int16 v8;
  unint64_t v9;
  __int16 v10;
  __int16 v11;

  v8 = __clz(a5);
  v9 = __clz(a3) ^ 0x13F;
  if (a3)
    v10 = v9;
  else
    v10 = 0;
  if (a5)
    v11 = v8 ^ 0x13F;
  else
    v11 = 0;
  return llvm::IRBuilderBase::CreateMemTransferInst(a1, 194, a2, v10, a4, v11, a6, 0, 0, 0, 0, 0);
}

llvm::Value *LLVMBuildMemMove(uint64_t a1, llvm::Value *a2, unsigned int a3, llvm::Value *a4, unsigned int a5, uint64_t *a6)
{
  __int16 v6;
  unint64_t v7;
  __int16 v8;
  __int16 v9;

  v6 = __clz(a5);
  v7 = __clz(a3) ^ 0x13F;
  if (a3)
    v8 = v7;
  else
    v8 = 0;
  if (a5)
    v9 = v6 ^ 0x13F;
  else
    v9 = 0;
  return llvm::IRBuilderBase::CreateMemMove(a1, a2, v8, a4, v9, a6, 0, 0, 0, 0);
}

unsigned __int8 **LLVMBuildAlloca(uint64_t *a1, llvm::PointerType *a2, _BYTE *a3)
{
  char v3;
  _BYTE *v5;
  char v6;
  char v7;

  v3 = 1;
  v7 = 1;
  if (*a3)
  {
    v5 = a3;
    v3 = 3;
  }
  v6 = v3;
  return sub_1C486A5CC(a1, a2, 0, (uint64_t)&v5);
}

unsigned __int8 **LLVMBuildArrayAlloca(uint64_t *a1, llvm::PointerType *a2, llvm::ValueHandleBase *a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C486A5CC(a1, a2, a3, (uint64_t)&v6);
}

unsigned __int8 **LLVMBuildFree(uint64_t *a1, _QWORD *a2)
{
  unsigned __int8 **v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 **v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  _WORD v12[20];
  unsigned __int8 *v13;

  v3 = (unsigned __int8 **)sub_1C53E61FC(a2, 0, 0, 0, a1[6]);
  v12[16] = 257;
  (*(void (**)(uint64_t, unsigned __int8 **, _WORD *, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v3, v12, a1[6], a1[7]);
  v4 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v4)
  {
    v6 = *a1;
    v7 = *a1 + 16 * v4;
    v8 = v3 + 6;
    do
    {
      v9 = *(_DWORD *)v6;
      v10 = *(unsigned __int8 **)(v6 + 8);
      if (v10)
      {
        if (!v9)
        {
          v13 = *(unsigned __int8 **)(v6 + 8);
          llvm::MetadataTracking::track((uint64_t)&v13, v10, 2);
LABEL_14:
          if (&v13 == v8)
          {
            if (v13)
              llvm::MetadataTracking::untrack((uint64_t)&v13, v13);
          }
          else
          {
            if (*v8)
              llvm::MetadataTracking::untrack((uint64_t)(v3 + 6), *v8);
            v11 = v13;
            *v8 = v13;
            if (v11)
              llvm::MetadataTracking::retrack((uint64_t)&v13, v11, (uint64_t)(v3 + 6));
          }
          goto LABEL_11;
        }
      }
      else
      {
        if (!*v8 && (*((_BYTE *)v3 + 23) & 0x20) == 0)
          goto LABEL_11;
        if (!v9)
        {
          v13 = 0;
          goto LABEL_14;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v3, v9, (llvm::MDNode *)v10);
LABEL_11:
      v6 += 16;
    }
    while (v6 != v7);
  }
  return v3;
}

llvm::Value *LLVMBuildLoad(uint64_t *a1, _QWORD *a2, _BYTE *a3)
{
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  char *v9;
  char *v10;
  llvm::Value *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 **v18;
  int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  _BYTE *v23;
  char v24;
  char v25;
  _BYTE v26[32];
  __int16 v27;
  unsigned __int8 *v28;

  v5 = **(_QWORD **)(*a2 + 16);
  v25 = 1;
  if (*a3)
  {
    v23 = a3;
    v6 = 3;
  }
  else
  {
    v6 = 1;
  }
  v24 = v6;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(a1[6] + 56) + 40) + 272, v5);
  v8 = v7;
  v9 = (char *)operator new(0x60uLL);
  v10 = v9;
  v11 = (llvm::Value *)(v9 + 32);
  v27 = 257;
  *((_QWORD *)v9 + 3) = v9 + 32;
  *((_QWORD *)v9 + 4) = v5;
  *((_QWORD *)v9 + 5) = 0;
  *((_WORD *)v9 + 24) = 60;
  *((_DWORD *)v9 + 13) = 1;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *((_DWORD *)v9 + 22) = 0;
  v12 = a2 + 1;
  v13 = a2[1];
  *(_QWORD *)v9 = a2;
  *((_QWORD *)v9 + 1) = v13;
  if (v13)
    *(_QWORD *)(v13 + 16) = v9 + 8;
  *((_QWORD *)v9 + 2) = v12;
  *v12 = v9;
  *((_WORD *)v9 + 25) = 2 * (v8 & 0x3F);
  v9[92] = 1;
  llvm::Value::setName((uint64_t ***)v9 + 4, (uint64_t)v26);
  (*(void (**)(uint64_t, llvm::Value *, _BYTE **, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v11, &v23, a1[6], a1[7]);
  v14 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v14)
  {
    v16 = *a1;
    v17 = *a1 + 16 * v14;
    v18 = (unsigned __int8 **)(v10 + 80);
    do
    {
      v19 = *(_DWORD *)v16;
      v20 = *(unsigned __int8 **)(v16 + 8);
      if (v20)
      {
        if (!v19)
        {
          v28 = *(unsigned __int8 **)(v16 + 8);
          llvm::MetadataTracking::track((uint64_t)&v28, v20, 2);
          v21 = *v18;
          goto LABEL_19;
        }
      }
      else
      {
        v21 = *v18;
        if (!*v18 && (v10[55] & 0x20) == 0)
          goto LABEL_16;
        if (!v19)
        {
          v28 = 0;
LABEL_19:
          if (v21)
            llvm::MetadataTracking::untrack((uint64_t)(v10 + 80), v21);
          v22 = v28;
          *v18 = v28;
          if (v22)
            llvm::MetadataTracking::retrack((uint64_t)&v28, v22, (uint64_t)(v10 + 80));
          goto LABEL_16;
        }
      }
      llvm::Value::setMetadata(v11, *(_DWORD *)v16, (llvm::MDNode *)v20);
LABEL_16:
      v16 += 16;
    }
    while (v16 != v17);
  }
  return v11;
}

llvm::Value *LLVMBuildLoad2(uint64_t *a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  char v7;
  char v8;
  char v9;
  char *v10;
  char *v11;
  llvm::Value *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 **v20;
  int v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  _BYTE *v25;
  char v26;
  char v27;
  _BYTE v28[32];
  __int16 v29;
  unsigned __int8 *v30;

  v27 = 1;
  if (*a4)
  {
    v25 = a4;
    v7 = 3;
  }
  else
  {
    v7 = 1;
  }
  v26 = v7;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(a1[6] + 56) + 40) + 272, a2);
  v9 = v8;
  v10 = (char *)operator new(0x60uLL);
  v11 = v10;
  v12 = (llvm::Value *)(v10 + 32);
  *((_QWORD *)v10 + 2) = 0;
  *((_QWORD *)v10 + 3) = v10 + 32;
  v29 = 257;
  *((_QWORD *)v10 + 4) = a2;
  *((_QWORD *)v10 + 5) = 0;
  *((_WORD *)v10 + 24) = 60;
  *((_DWORD *)v10 + 13) = 1;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 22) = 0;
  *(_QWORD *)v10 = a3;
  *((_QWORD *)v10 + 1) = 0;
  if (a3)
  {
    v15 = *(_QWORD *)(a3 + 8);
    v14 = (_QWORD *)(a3 + 8);
    v13 = v15;
    *((_QWORD *)v10 + 1) = v15;
    if (v15)
      *(_QWORD *)(v13 + 16) = v10 + 8;
    *((_QWORD *)v10 + 2) = v14;
    *v14 = v10;
  }
  *((_WORD *)v10 + 25) = 2 * (v9 & 0x3F);
  v10[92] = 1;
  llvm::Value::setName((uint64_t ***)v10 + 4, (uint64_t)v28);
  (*(void (**)(uint64_t, llvm::Value *, _BYTE **, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v12, &v25, a1[6], a1[7]);
  v16 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v16)
  {
    v18 = *a1;
    v19 = *a1 + 16 * v16;
    v20 = (unsigned __int8 **)(v11 + 80);
    do
    {
      v21 = *(_DWORD *)v18;
      v22 = *(unsigned __int8 **)(v18 + 8);
      if (v22)
      {
        if (!v21)
        {
          v30 = *(unsigned __int8 **)(v18 + 8);
          llvm::MetadataTracking::track((uint64_t)&v30, v22, 2);
          v23 = *v20;
          goto LABEL_21;
        }
      }
      else
      {
        v23 = *v20;
        if (!*v20 && (v11[55] & 0x20) == 0)
          goto LABEL_18;
        if (!v21)
        {
          v30 = 0;
LABEL_21:
          if (v23)
            llvm::MetadataTracking::untrack((uint64_t)(v11 + 80), v23);
          v24 = v30;
          *v20 = v30;
          if (v24)
            llvm::MetadataTracking::retrack((uint64_t)&v30, v24, (uint64_t)(v11 + 80));
          goto LABEL_18;
        }
      }
      llvm::Value::setMetadata(v12, *(_DWORD *)v18, (llvm::MDNode *)v22);
LABEL_18:
      v18 += 16;
    }
    while (v18 != v19);
  }
  return v12;
}

llvm::Value *LLVMBuildStore(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v6;
  char v7;
  char *v8;
  char *v9;
  llvm::Value *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 **v20;
  int v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  _WORD v25[20];
  unsigned __int8 *v26;

  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(a1[6] + 56) + 40) + 272, *a2);
  v7 = v6;
  v8 = (char *)operator new(0x80uLL);
  v9 = v8;
  *((_DWORD *)v8 + 21) = *((_DWORD *)v8 + 21) & 0x38000000 | 2;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 2) = 0;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 5) = 0;
  *((_QWORD *)v8 + 6) = 0;
  *((_QWORD *)v8 + 4) = 0;
  *((_QWORD *)v8 + 8) = **(_QWORD **)*a2 + 1576;
  v10 = (llvm::Value *)(v8 + 64);
  *((_QWORD *)v8 + 3) = v8 + 64;
  *((_QWORD *)v8 + 7) = v8 + 64;
  *((_QWORD *)v8 + 9) = 0;
  v8[80] = 61;
  v8[81] = 0;
  *((_DWORD *)v8 + 21) = 2;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *((_DWORD *)v8 + 30) = 0;
  v11 = a2 + 1;
  v12 = a2[1];
  *(_QWORD *)v8 = a2;
  *((_QWORD *)v8 + 1) = v12;
  if (v12)
    *(_QWORD *)(v12 + 16) = v8 + 8;
  *((_QWORD *)v8 + 2) = v11;
  *v11 = v8;
  *((_QWORD *)v8 + 4) = a3;
  if (a3)
  {
    v15 = *(_QWORD *)(a3 + 8);
    v14 = (_QWORD *)(a3 + 8);
    v13 = v15;
    *((_QWORD *)v8 + 5) = v15;
    if (v15)
      *(_QWORD *)(v13 + 16) = v8 + 40;
    *((_QWORD *)v8 + 6) = v14;
    *v14 = v8 + 32;
  }
  *((_WORD *)v8 + 41) = 2 * (v7 & 0x3F);
  v8[124] = 1;
  v25[16] = 257;
  (*(void (**)(uint64_t, llvm::Value *, _WORD *, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v10, v25, a1[6], a1[7]);
  v16 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v16)
  {
    v18 = *a1;
    v19 = *a1 + 16 * v16;
    v20 = (unsigned __int8 **)(v9 + 112);
    do
    {
      v21 = *(_DWORD *)v18;
      v22 = *(unsigned __int8 **)(v18 + 8);
      if (v22)
      {
        if (!v21)
        {
          v26 = *(unsigned __int8 **)(v18 + 8);
          llvm::MetadataTracking::track((uint64_t)&v26, v22, 2);
          v23 = *v20;
          goto LABEL_20;
        }
      }
      else
      {
        v23 = *v20;
        if (!*v20 && (v9[87] & 0x20) == 0)
          goto LABEL_17;
        if (!v21)
        {
          v26 = 0;
LABEL_20:
          if (v23)
            llvm::MetadataTracking::untrack((uint64_t)(v9 + 112), v23);
          v24 = v26;
          *v20 = v26;
          if (v24)
            llvm::MetadataTracking::retrack((uint64_t)&v26, v24, (uint64_t)(v9 + 112));
          goto LABEL_17;
        }
      }
      llvm::Value::setMetadata(v10, *(_DWORD *)v18, (llvm::MDNode *)v22);
LABEL_17:
      v18 += 16;
    }
    while (v18 != v19);
  }
  return v10;
}

unsigned __int8 **LLVMBuildFence(uint64_t a1, __int16 a2, int a3, _BYTE *a4)
{
  char v6;
  BOOL v7;
  char *v8;
  _BYTE *v10;
  char v11;
  char v12;

  v6 = 1;
  v12 = 1;
  if (*a4)
  {
    v10 = a4;
    v6 = 3;
  }
  v7 = a3 == 0;
  v11 = v6;
  v8 = (char *)operator new(0x40uLL);
  *(_QWORD *)v8 = **(_QWORD **)(a1 + 64) + 1576;
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 63;
  *(_OWORD *)(v8 + 17) = 0u;
  *(_OWORD *)(v8 + 44) = 0u;
  *(_OWORD *)(v8 + 33) = 0u;
  *((_WORD *)v8 + 9) = a2;
  v8[60] = v7;
  return sub_1C61D76F0((uint64_t *)a1, (unsigned __int8 **)v8, (uint64_t)&v10);
}

uint64_t LLVMBuildGEP(uint64_t *a1, uint64_t *a2, llvm::Value *a3, unsigned int a4, _BYTE *a5)
{
  uint64_t v7;
  llvm::GetElementPtrInst *v8;
  char v9;
  _BYTE *v11;
  char v12;
  char v13;

  v7 = *a2;
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12)
    v7 = **(_QWORD **)(v7 + 16);
  v8 = **(llvm::GetElementPtrInst ***)(v7 + 16);
  v9 = 1;
  v13 = 1;
  if (*a5)
  {
    v11 = a5;
    v9 = 3;
  }
  v12 = v9;
  return sub_1C509D7B0(a1, v8, a2, a3, a4, (uint64_t)&v11);
}

uint64_t LLVMBuildGEP2(uint64_t *a1, llvm::GetElementPtrInst *a2, uint64_t *a3, llvm::Value *a4, unsigned int a5, _BYTE *a6)
{
  char v6;
  _BYTE *v8;
  char v9;
  char v10;

  v6 = 1;
  v10 = 1;
  if (*a6)
  {
    v8 = a6;
    v6 = 3;
  }
  v9 = v6;
  return sub_1C509D7B0(a1, a2, a3, a4, a5, (uint64_t)&v8);
}

uint64_t LLVMBuildInBoundsGEP(uint64_t *a1, uint64_t *a2, llvm::Value *a3, unsigned int a4, _BYTE *a5)
{
  uint64_t v7;
  llvm::GetElementPtrInst *v8;
  char v9;
  _BYTE *v11;
  char v12;
  char v13;

  v7 = *a2;
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12)
    v7 = **(_QWORD **)(v7 + 16);
  v8 = **(llvm::GetElementPtrInst ***)(v7 + 16);
  v9 = 1;
  v13 = 1;
  if (*a5)
  {
    v11 = a5;
    v9 = 3;
  }
  v12 = v9;
  return sub_1C53901A0(a1, v8, a2, a3, a4, (uint64_t)&v11);
}

uint64_t sub_1C53901A0(uint64_t *a1, llvm::GetElementPtrInst *a2, uint64_t *a3, llvm::Value *a4, uint64_t a5, uint64_t a6)
{
  llvm::GetElementPtrInst *TypeAtIndex;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unsigned int v16;
  llvm::Value *v17;
  uint64_t v18;
  unsigned int v19;
  llvm::Type **v20;
  uint64_t v21;
  llvm::Type *v22;
  uint64_t **v23;
  uint64_t v24;
  uint64_t ***v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _WORD v40[20];
  unsigned __int8 *v41;

  TypeAtIndex = a2;
  v12 = (*(uint64_t (**)(uint64_t, llvm::GetElementPtrInst *, uint64_t *, llvm::Value *, uint64_t, uint64_t))(*(_QWORD *)a1[9] + 48))(a1[9], a2, a3, a4, a5, 1);
  if (v12)
    return v12;
  v13 = (a5 + 1);
  v40[16] = 257;
  v14 = operator new(32 * v13 + 80);
  v15 = &v14[4 * v13];
  v16 = v13 & 0x7FFFFFF;
  *((_DWORD *)v15 + 5) = *((_DWORD *)v15 + 5) & 0x38000000 | v13 & 0x7FFFFFF;
  if ((_DWORD)a5 != -1)
  {
    do
    {
      *v14 = 0;
      v14[1] = 0;
      v14[2] = 0;
      v14[3] = v15;
      v14 += 4;
    }
    while (v14 != v15);
  }
  sub_1C4774650(TypeAtIndex, a3, a4, a5);
  *v15 = v18;
  v15[1] = 0;
  v19 = *((_DWORD *)v15 + 5) & 0xC0000000 | v16;
  *((_DWORD *)v15 + 4) = 62;
  *((_DWORD *)v15 + 5) = v19;
  *(_OWORD *)(v15 + 3) = 0u;
  *(_OWORD *)(v15 + 5) = 0u;
  *((_DWORD *)v15 + 14) = 0;
  v15[8] = TypeAtIndex;
  if (a5)
  {
    v20 = (llvm::Type **)((char *)a4 + 8);
    v21 = 8 * a5 - 8;
    do
    {
      if (!v21)
        break;
      v22 = *v20++;
      TypeAtIndex = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(TypeAtIndex, v22, v17);
      v21 -= 8;
    }
    while (TypeAtIndex);
    v16 = *((_DWORD *)v15 + 5) & 0x7FFFFFF;
  }
  v15[9] = TypeAtIndex;
  v23 = (uint64_t **)&v15[-4 * v16];
  if (*v23)
  {
    v36 = &v15[-4 * v16];
    v38 = (_QWORD *)v36[2];
    v37 = v36 + 2;
    *v38 = *(v37 - 1);
    v39 = *(v37 - 1);
    if (v39)
      *(_QWORD *)(v39 + 16) = *v37;
  }
  *v23 = a3;
  if (a3)
  {
    v26 = a3[1];
    v25 = (uint64_t ***)(a3 + 1);
    v24 = v26;
    v27 = &v15[-4 * v16];
    v27[1] = v26;
    if (v26)
      *(_QWORD *)(v24 + 16) = v27 + 1;
    v27[2] = v25;
    *v25 = v23;
  }
  sub_1C5382FD4((uint64_t)&v41, (uint64_t *)a4, (uint64_t *)a4 + a5, (uint64_t)&v15[-4 * (*((_DWORD *)v15 + 5) & 0x7FFFFFF) + 4]);
  llvm::Value::setName((uint64_t ***)v15, (uint64_t)v40);
  *((_BYTE *)v15 + 17) |= 2u;
  (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v15, a6, a1[6], a1[7]);
  v28 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v28)
  {
    v30 = *a1;
    v31 = *a1 + 16 * v28;
    do
    {
      v32 = *(_DWORD *)v30;
      v33 = *(unsigned __int8 **)(v30 + 8);
      if (v33)
      {
        if (!v32)
        {
          v41 = *(unsigned __int8 **)(v30 + 8);
          llvm::MetadataTracking::track((uint64_t)&v41, v33, 2);
          v34 = (unsigned __int8 *)v15[6];
          goto LABEL_28;
        }
      }
      else
      {
        v34 = (unsigned __int8 *)v15[6];
        if (!v34 && (*((_BYTE *)v15 + 23) & 0x20) == 0)
          goto LABEL_24;
        if (!v32)
        {
          v41 = 0;
LABEL_28:
          if (v34)
            llvm::MetadataTracking::untrack((uint64_t)(v15 + 6), v34);
          v35 = v41;
          v15[6] = v41;
          if (v35)
            llvm::MetadataTracking::retrack((uint64_t)&v41, v35, (uint64_t)(v15 + 6));
          goto LABEL_24;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v15, *(_DWORD *)v30, (llvm::MDNode *)v33);
LABEL_24:
      v30 += 16;
    }
    while (v30 != v31);
  }
  return (uint64_t)v15;
}

uint64_t LLVMBuildInBoundsGEP2(uint64_t *a1, llvm::GetElementPtrInst *a2, uint64_t *a3, llvm::Value *a4, unsigned int a5, _BYTE *a6)
{
  char v6;
  _BYTE *v8;
  char v9;
  char v10;

  v6 = 1;
  v10 = 1;
  if (*a6)
  {
    v8 = a6;
    v6 = 3;
  }
  v9 = v6;
  return sub_1C53901A0(a1, a2, a3, a4, a5, (uint64_t)&v8);
}

uint64_t ***LLVMBuildStructGEP(uint64_t *a1, uint64_t **a2, unsigned int a3, _BYTE *a4)
{
  uint64_t *v6;
  llvm::GetElementPtrInst *v7;
  char v8;
  _BYTE *v10;
  char v11;
  char v12;

  v6 = *a2;
  if (((*a2)[1] & 0xFE) == 0x12)
    v6 = *(uint64_t **)v6[2];
  v7 = *(llvm::GetElementPtrInst **)v6[2];
  v8 = 1;
  v12 = 1;
  if (*a4)
  {
    v10 = a4;
    v8 = 3;
  }
  v11 = v8;
  return sub_1C5391F90(a1, v7, a2, 0, a3, (uint64_t)&v10);
}

uint64_t ***LLVMBuildStructGEP2(uint64_t *a1, llvm::GetElementPtrInst *a2, uint64_t **a3, unsigned int a4, _BYTE *a5)
{
  char v5;
  _BYTE *v7;
  char v8;
  char v9;

  v5 = 1;
  v9 = 1;
  if (*a5)
  {
    v7 = a5;
    v5 = 3;
  }
  v8 = v5;
  return sub_1C5391F90(a1, a2, a3, 0, a4, (uint64_t)&v7);
}

char *LLVMBuildGlobalString(uint64_t a1, char *__s, _BYTE *a3)
{
  llvm::Type *v6;
  char v7;
  _BYTE *v9;
  char v10;
  char v11;

  if (__s)
    v6 = (llvm::Type *)strlen(__s);
  else
    v6 = 0;
  v7 = 1;
  v11 = 1;
  if (*a3)
  {
    v9 = a3;
    v7 = 3;
  }
  v10 = v7;
  return llvm::IRBuilderBase::CreateGlobalString(a1, __s, v6, (uint64_t)&v9, 0, 0);
}

uint64_t LLVMBuildGlobalStringPtr(uint64_t a1, char *__s, _BYTE *a3)
{
  llvm::Type *v6;
  char v7;
  _BYTE *v9;
  char v10;
  char v11;

  if (__s)
    v6 = (llvm::Type *)strlen(__s);
  else
    v6 = 0;
  v7 = 1;
  v11 = 1;
  if (*a3)
  {
    v9 = a3;
    v7 = 3;
  }
  v10 = v7;
  return sub_1C62147C4(a1, __s, v6, (uint64_t)&v9, 0, 0);
}

uint64_t LLVMGetVolatile(uint64_t a1)
{
  return *(_WORD *)(a1 + 18) & 1;
}

uint64_t LLVMSetVolatile(uint64_t result, int a2)
{
  *(_WORD *)(result + 18) = *(_WORD *)(result + 18) & 0xFFFE | (a2 != 0);
  return result;
}

uint64_t LLVMGetWeak(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 18) >> 1) & 1;
}

uint64_t LLVMSetWeak(uint64_t result, int a2)
{
  *(_WORD *)(result + 18) = *(_WORD *)(result + 18) & 0xFFFD | (2 * (a2 != 0));
  return result;
}

uint64_t LLVMGetOrdering(uint64_t a1)
{
  int v1;
  int v2;
  unsigned int v3;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v1 == 60)
  {
    v2 = *(unsigned __int16 *)(a1 + 18) >> 7;
  }
  else
  {
    v3 = *(unsigned __int16 *)(a1 + 18);
    if (a1 && v1 == 61)
      v2 = v3 >> 7;
    else
      v2 = v3 >> 1;
  }
  return v2 & 7;
}

uint64_t LLVMSetOrdering(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 18) = *(_WORD *)(result + 18) & 0xFC7F | (a2 << 7);
  return result;
}

uint64_t LLVMGetAtomicRMWBinOp(uint64_t a1)
{
  return *(_WORD *)(a1 + 18) >> 4;
}

uint64_t LLVMSetAtomicRMWBinOp(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 18) = *(_WORD *)(result + 18) & 0xFF0F | (16 * a2);
  return result;
}

unsigned __int8 *LLVMBuildTrunc(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C4773E38(a1, 38, a2, a3, (uint64_t)&v6);
}

unsigned __int8 *LLVMBuildZExt(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C4773E38(a1, 39, a2, a3, (uint64_t)&v6);
}

unsigned __int8 *LLVMBuildSExt(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C4773E38(a1, 40, a2, a3, (uint64_t)&v6);
}

unsigned __int8 *LLVMBuildFPToUI(uint64_t a1, uint64_t *a2, uint64_t *a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C5390814(a1, a2, a3, (uint64_t)&v6);
}

unsigned __int8 *sub_1C5390814(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (*(_BYTE *)(a1 + 100))
    return (unsigned __int8 *)llvm::IRBuilderBase::CreateConstrainedFPCast(a1, 93, a2, a3, 0, a4, 0, 0, 0);
  else
    return sub_1C4773E38((uint64_t *)a1, 41, (unsigned __int8 *)a2, (uint64_t)a3, a4);
}

unsigned __int8 *LLVMBuildFPToSI(uint64_t a1, uint64_t *a2, uint64_t *a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C53908A8(a1, a2, a3, (uint64_t)&v6);
}

unsigned __int8 *sub_1C53908A8(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (*(_BYTE *)(a1 + 100))
    return (unsigned __int8 *)llvm::IRBuilderBase::CreateConstrainedFPCast(a1, 92, a2, a3, 0, a4, 0, 0, 0);
  else
    return sub_1C4773E38((uint64_t *)a1, 42, (unsigned __int8 *)a2, (uint64_t)a3, a4);
}

unsigned __int8 *LLVMBuildUIToFP(uint64_t a1, uint64_t *a2, uint64_t *a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C5345CE4(a1, a2, a3, (uint64_t)&v6);
}

unsigned __int8 *LLVMBuildSIToFP(uint64_t a1, uint64_t *a2, uint64_t *a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C4773B3C(a1, a2, a3, (uint64_t)&v6);
}

unsigned __int8 *LLVMBuildFPTrunc(uint64_t a1, uint64_t *a2, uint64_t *a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C4773A70(a1, a2, a3, (uint64_t)&v6);
}

unsigned __int8 *LLVMBuildFPExt(uint64_t a1, uint64_t *a2, uint64_t *a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C47721A0(a1, a2, a3, (uint64_t)&v6);
}

unsigned __int8 *LLVMBuildPtrToInt(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C4773E38(a1, 47, a2, a3, (uint64_t)&v6);
}

unsigned __int8 *LLVMBuildIntToPtr(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C4773E38(a1, 48, a2, a3, (uint64_t)&v6);
}

unsigned __int8 *LLVMBuildBitCast(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C4773E38(a1, 49, a2, a3, (uint64_t)&v6);
}

unsigned __int8 *LLVMBuildAddrSpaceCast(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C4773E38(a1, 50, a2, a3, (uint64_t)&v6);
}

unsigned __int8 *LLVMBuildZExtOrBitCast(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C509CA90(a1, a2, a3, (uint64_t)&v6);
}

unsigned __int8 *LLVMBuildSExtOrBitCast(uint64_t *a1, unsigned __int8 *a2, llvm::Type ***a3, _BYTE *a4, llvm::Instruction *a5)
{
  unsigned __int8 *SExtOrBitCast;
  char v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 **v20;
  int v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  _QWORD v24[4];
  char v25;
  char v26;
  unsigned __int8 *v27[4];
  __int16 v28;
  unsigned __int8 *v29;

  SExtOrBitCast = a2;
  v7 = 1;
  v26 = 1;
  if (*a4)
  {
    v24[0] = a4;
    v7 = 3;
  }
  v25 = v7;
  if (*(llvm::Type ****)a2 != a3)
  {
    if (a2[16] <= 0x14u)
    {
      SExtOrBitCast = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, unsigned __int8 *, llvm::Type ***))(*(_QWORD *)a1[9] + 296))(a1[9], a2, a3);
      if (SExtOrBitCast)
        v8 = SExtOrBitCast[16] >= 0x1Cu;
      else
        v8 = 0;
      if (!v8)
        return SExtOrBitCast;
      (*(void (**)(uint64_t, unsigned __int8 *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], SExtOrBitCast, v24, a1[6], a1[7]);
      v9 = *((unsigned int *)a1 + 2);
      if (!(_DWORD)v9)
        return SExtOrBitCast;
      v18 = *a1;
      v19 = *a1 + 16 * v9;
      v20 = (unsigned __int8 **)(SExtOrBitCast + 48);
      while (1)
      {
        v21 = *(_DWORD *)v18;
        v22 = *(unsigned __int8 **)(v18 + 8);
        if (v22)
        {
          if (!v21)
          {
            v27[0] = *(unsigned __int8 **)(v18 + 8);
            llvm::MetadataTracking::track((uint64_t)v27, v22, 2);
LABEL_42:
            if (v27 == v20)
            {
              if (v27[0])
                llvm::MetadataTracking::untrack((uint64_t)v27, v27[0]);
            }
            else
            {
              if (*v20)
                llvm::MetadataTracking::untrack((uint64_t)(SExtOrBitCast + 48), *v20);
              v23 = v27[0];
              *v20 = v27[0];
              if (v23)
                llvm::MetadataTracking::retrack((uint64_t)v27, v23, (uint64_t)(SExtOrBitCast + 48));
            }
            goto LABEL_39;
          }
        }
        else
        {
          if (!*v20 && (SExtOrBitCast[23] & 0x20) == 0)
            goto LABEL_39;
          if (!v21)
          {
            v27[0] = 0;
            goto LABEL_42;
          }
        }
        llvm::Value::setMetadata((llvm::Value *)SExtOrBitCast, v21, (llvm::MDNode *)v22);
LABEL_39:
        v18 += 16;
        if (v18 == v19)
          return SExtOrBitCast;
      }
    }
    v28 = 257;
    SExtOrBitCast = (unsigned __int8 *)llvm::CastInst::CreateSExtOrBitCast((llvm::CastInst *)a2, a3, (llvm::Type *)v27, 0, a5);
    (*(void (**)(uint64_t, unsigned __int8 *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], SExtOrBitCast, v24, a1[6], a1[7]);
    v11 = *((unsigned int *)a1 + 2);
    if (!(_DWORD)v11)
      return SExtOrBitCast;
    v12 = *a1;
    v13 = *a1 + 16 * v11;
    v14 = (unsigned __int8 **)(SExtOrBitCast + 48);
    do
    {
      v15 = *(_DWORD *)v12;
      v16 = *(unsigned __int8 **)(v12 + 8);
      if (v16)
      {
        if (!v15)
        {
          v29 = *(unsigned __int8 **)(v12 + 8);
          llvm::MetadataTracking::track((uint64_t)&v29, v16, 2);
LABEL_24:
          if (&v29 == v14)
          {
            if (v29)
              llvm::MetadataTracking::untrack((uint64_t)&v29, v29);
          }
          else
          {
            if (*v14)
              llvm::MetadataTracking::untrack((uint64_t)(SExtOrBitCast + 48), *v14);
            v17 = v29;
            *v14 = v29;
            if (v17)
              llvm::MetadataTracking::retrack((uint64_t)&v29, v17, (uint64_t)(SExtOrBitCast + 48));
          }
          goto LABEL_21;
        }
      }
      else
      {
        if (!*v14 && (SExtOrBitCast[23] & 0x20) == 0)
          goto LABEL_21;
        if (!v15)
        {
          v29 = 0;
          goto LABEL_24;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)SExtOrBitCast, v15, (llvm::MDNode *)v16);
LABEL_21:
      v12 += 16;
    }
    while (v12 != v13);
  }
  return SExtOrBitCast;
}

unsigned __int8 *LLVMBuildTruncOrBitCast(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C5390E08(a1, a2, a3, (uint64_t)&v6);
}

unsigned __int8 *sub_1C5390E08(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *TruncOrBitCast;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 **v10;
  int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 **v19;
  int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23[4];
  __int16 v24;
  unsigned __int8 *v25;

  TruncOrBitCast = a2;
  if (*(_QWORD *)a2 == a3)
    return TruncOrBitCast;
  if (a2[16] <= 0x14u)
  {
    TruncOrBitCast = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)a1[9] + 304))(a1[9], a2, a3);
    if (TruncOrBitCast)
      v14 = TruncOrBitCast[16] >= 0x1Cu;
    else
      v14 = 0;
    if (!v14)
      return TruncOrBitCast;
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], TruncOrBitCast, a4, a1[6], a1[7]);
    v15 = *((unsigned int *)a1 + 2);
    if (!(_DWORD)v15)
      return TruncOrBitCast;
    v17 = *a1;
    v18 = *a1 + 16 * v15;
    v19 = (unsigned __int8 **)(TruncOrBitCast + 48);
    while (1)
    {
      v20 = *(_DWORD *)v17;
      v21 = *(unsigned __int8 **)(v17 + 8);
      if (v21)
      {
        if (!v20)
        {
          v23[0] = *(unsigned __int8 **)(v17 + 8);
          llvm::MetadataTracking::track((uint64_t)v23, v21, 2);
LABEL_40:
          if (v23 == v19)
          {
            if (v23[0])
              llvm::MetadataTracking::untrack((uint64_t)v23, v23[0]);
          }
          else
          {
            if (*v19)
              llvm::MetadataTracking::untrack((uint64_t)(TruncOrBitCast + 48), *v19);
            v22 = v23[0];
            *v19 = v23[0];
            if (v22)
              llvm::MetadataTracking::retrack((uint64_t)v23, v22, (uint64_t)(TruncOrBitCast + 48));
          }
          goto LABEL_37;
        }
      }
      else
      {
        if (!*v19 && (TruncOrBitCast[23] & 0x20) == 0)
          goto LABEL_37;
        if (!v20)
        {
          v23[0] = 0;
          goto LABEL_40;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)TruncOrBitCast, v20, (llvm::MDNode *)v21);
LABEL_37:
      v17 += 16;
      if (v17 == v18)
        return TruncOrBitCast;
    }
  }
  v24 = 257;
  TruncOrBitCast = (unsigned __int8 *)llvm::CastInst::CreateTruncOrBitCast((uint64_t *)a2, a3, (uint64_t)v23, 0);
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], TruncOrBitCast, a4, a1[6], a1[7]);
  v7 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v7)
  {
    v8 = *a1;
    v9 = *a1 + 16 * v7;
    v10 = (unsigned __int8 **)(TruncOrBitCast + 48);
    do
    {
      v11 = *(_DWORD *)v8;
      v12 = *(unsigned __int8 **)(v8 + 8);
      if (v12)
      {
        if (!v11)
        {
          v25 = *(unsigned __int8 **)(v8 + 8);
          llvm::MetadataTracking::track((uint64_t)&v25, v12, 2);
LABEL_15:
          if (&v25 == v10)
          {
            if (v25)
              llvm::MetadataTracking::untrack((uint64_t)&v25, v25);
          }
          else
          {
            if (*v10)
              llvm::MetadataTracking::untrack((uint64_t)(TruncOrBitCast + 48), *v10);
            v13 = v25;
            *v10 = v25;
            if (v13)
              llvm::MetadataTracking::retrack((uint64_t)&v25, v13, (uint64_t)(TruncOrBitCast + 48));
          }
          goto LABEL_12;
        }
      }
      else
      {
        if (!*v10 && (TruncOrBitCast[23] & 0x20) == 0)
          goto LABEL_12;
        if (!v11)
        {
          v25 = 0;
          goto LABEL_15;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)TruncOrBitCast, v11, (llvm::MDNode *)v12);
LABEL_12:
      v8 += 16;
    }
    while (v8 != v9);
  }
  return TruncOrBitCast;
}

unsigned __int8 *LLVMBuildCast(uint64_t *a1, int a2, unsigned __int8 *a3, uint64_t a4, _BYTE *a5)
{
  char v8;
  uint64_t v9;
  _BYTE *v11;
  char v12;
  char v13;

  v8 = 1;
  v13 = 1;
  if (*a5)
  {
    v11 = a5;
    v8 = 3;
  }
  v9 = sub_1C538F130(a2);
  v12 = v8;
  return sub_1C4773E38(a1, v9, a3, a4, (uint64_t)&v11);
}

unsigned __int8 *LLVMBuildPointerCast(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C5098D9C(a1, a2, a3, (uint64_t)&v6);
}

unsigned __int8 *LLVMBuildIntCast2(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, int a4, _BYTE *a5)
{
  char v5;
  _BYTE *v7;
  char v8;
  char v9;

  v5 = 1;
  v9 = 1;
  if (*a5)
  {
    v7 = a5;
    v5 = 3;
  }
  v8 = v5;
  return sub_1C4D8D514(a1, a2, a3, a4 != 0, (uint64_t)&v7);
}

unsigned __int8 *LLVMBuildIntCast(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C4D8D514(a1, a2, a3, 1, (uint64_t)&v6);
}

unsigned __int8 *LLVMBuildFPCast(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, _BYTE *a4)
{
  unsigned __int8 *v4;
  char v6;
  BOOL v7;
  uint64_t v8;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 **v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 **v20;
  int v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  _QWORD v24[4];
  char v25;
  char v26;
  unsigned __int8 *v27[4];
  __int16 v28;
  unsigned __int8 *v29;

  v4 = a2;
  v6 = 1;
  v26 = 1;
  if (*a4)
  {
    v24[0] = a4;
    v6 = 3;
  }
  v25 = v6;
  if (*(_QWORD *)a2 != a3)
  {
    if (a2[16] <= 0x14u)
    {
      v4 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)a1[9] + 256))(a1[9], a2, a3);
      if (v4)
        v7 = v4[16] >= 0x1Cu;
      else
        v7 = 0;
      if (!v7)
        return v4;
      (*(void (**)(uint64_t, unsigned __int8 *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v4, v24, a1[6], a1[7]);
      v8 = *((unsigned int *)a1 + 2);
      if (!(_DWORD)v8)
        return v4;
      v18 = *a1;
      v19 = *a1 + 16 * v8;
      v20 = (unsigned __int8 **)(v4 + 48);
      while (1)
      {
        v21 = *(_DWORD *)v18;
        v22 = *(unsigned __int8 **)(v18 + 8);
        if (v22)
        {
          if (!v21)
          {
            v27[0] = *(unsigned __int8 **)(v18 + 8);
            llvm::MetadataTracking::track((uint64_t)v27, v22, 2);
LABEL_42:
            if (v27 == v20)
            {
              if (v27[0])
                llvm::MetadataTracking::untrack((uint64_t)v27, v27[0]);
            }
            else
            {
              if (*v20)
                llvm::MetadataTracking::untrack((uint64_t)(v4 + 48), *v20);
              v23 = v27[0];
              *v20 = v27[0];
              if (v23)
                llvm::MetadataTracking::retrack((uint64_t)v27, v23, (uint64_t)(v4 + 48));
            }
            goto LABEL_39;
          }
        }
        else
        {
          if (!*v20 && (v4[23] & 0x20) == 0)
            goto LABEL_39;
          if (!v21)
          {
            v27[0] = 0;
            goto LABEL_42;
          }
        }
        llvm::Value::setMetadata((llvm::Value *)v4, v21, (llvm::MDNode *)v22);
LABEL_39:
        v18 += 16;
        if (v18 == v19)
          return v4;
      }
    }
    v28 = 257;
    llvm::CastInst::CreateFPCast((uint64_t *)a2, a3);
    v4 = v10;
    (*(void (**)(uint64_t, unsigned __int8 *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v10, v24, a1[6], a1[7]);
    v11 = *((unsigned int *)a1 + 2);
    if (!(_DWORD)v11)
      return v4;
    v12 = *a1;
    v13 = *a1 + 16 * v11;
    v14 = (unsigned __int8 **)(v4 + 48);
    do
    {
      v15 = *(_DWORD *)v12;
      v16 = *(unsigned __int8 **)(v12 + 8);
      if (v16)
      {
        if (!v15)
        {
          v29 = *(unsigned __int8 **)(v12 + 8);
          llvm::MetadataTracking::track((uint64_t)&v29, v16, 2);
LABEL_24:
          if (&v29 == v14)
          {
            if (v29)
              llvm::MetadataTracking::untrack((uint64_t)&v29, v29);
          }
          else
          {
            if (*v14)
              llvm::MetadataTracking::untrack((uint64_t)(v4 + 48), *v14);
            v17 = v29;
            *v14 = v29;
            if (v17)
              llvm::MetadataTracking::retrack((uint64_t)&v29, v17, (uint64_t)(v4 + 48));
          }
          goto LABEL_21;
        }
      }
      else
      {
        if (!*v14 && (v4[23] & 0x20) == 0)
          goto LABEL_21;
        if (!v15)
        {
          v29 = 0;
          goto LABEL_24;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v4, v15, (llvm::MDNode *)v16);
LABEL_21:
      v12 += 16;
    }
    while (v12 != v13);
  }
  return v4;
}

uint64_t LLVMBuildICmp(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  char v5;
  _BYTE *v7;
  char v8;
  char v9;

  v5 = 1;
  v9 = 1;
  if (*a5)
  {
    v7 = a5;
    v5 = 3;
  }
  v8 = v5;
  return sub_1C4774B48(a1, a2, a3, a4, (uint64_t)&v7);
}

uint64_t LLVMBuildFCmp(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, _BYTE *a5)
{
  char v5;
  _BYTE *v7;
  char v8;
  char v9;

  v5 = 1;
  v9 = 1;
  if (*a5)
  {
    v7 = a5;
    v5 = 3;
  }
  v8 = v5;
  return llvm::IRBuilderBase::CreateFCmpHelper(a1, a2, a3, a4, (uint64_t)&v7, 0, 0);
}

uint64_t LLVMBuildPhi(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  char v3;
  _BYTE *v5;
  char v6;
  char v7;

  v3 = 1;
  v7 = 1;
  if (*a3)
  {
    v5 = a3;
    v3 = 3;
  }
  v6 = v3;
  return sub_1C4867E94(a1, a2, 0, (uint64_t)&v5);
}

uint64_t LLVMBuildCall(uint64_t *a1, uint64_t a2, uint64_t *a3, unsigned int a4, _BYTE *a5)
{
  uint64_t **v7;
  char v8;
  _BYTE *v10;
  char v11;
  char v12;

  v7 = **(uint64_t ****)(*(_QWORD *)a2 + 16);
  v8 = 1;
  v12 = 1;
  if (*a5)
  {
    v10 = a5;
    v8 = 3;
  }
  v11 = v8;
  return sub_1C4774778(a1, v7, a2, a3, a4, (uint64_t)&v10, 0);
}

uint64_t LLVMBuildCall2(uint64_t *a1, uint64_t **a2, uint64_t a3, uint64_t *a4, unsigned int a5, _BYTE *a6)
{
  char v6;
  _BYTE *v8;
  char v9;
  char v10;

  v6 = 1;
  v10 = 1;
  if (*a6)
  {
    v8 = a6;
    v6 = 3;
  }
  v9 = v6;
  return sub_1C4774778(a1, a2, a3, a4, a5, (uint64_t)&v8, 0);
}

llvm::Value *LLVMBuildSelect(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, _BYTE *a5)
{
  char v5;
  _BYTE *v7;
  char v8;
  char v9;

  v5 = 1;
  v9 = 1;
  if (*a5)
  {
    v7 = a5;
    v5 = 3;
  }
  v8 = v5;
  return llvm::IRBuilderBase::CreateSelect(a1, a2, a3, a4, (uint64_t)&v7, 0);
}

unsigned __int8 **LLVMBuildVAArg(uint64_t *a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C622B02C(a1, a2, a3, (uint64_t)&v6);
}

unsigned __int8 *LLVMBuildExtractElement(uint64_t *a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;

  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C4772EE0(a1, a2, a3, (uint64_t)&v6);
}

unsigned __int8 *LLVMBuildInsertElement(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  char v5;
  _BYTE *v7;
  char v8;
  char v9;

  v5 = 1;
  v9 = 1;
  if (*a5)
  {
    v7 = a5;
    v5 = 3;
  }
  v8 = v5;
  return sub_1C4773154(a1, a2, a3, a4, (uint64_t)&v7);
}

uint64_t LLVMBuildShuffleVector(uint64_t a1, uint64_t a2, uint64_t a3, llvm::ConstantDataSequential *a4, _BYTE *a5)
{
  char v5;
  _BYTE *v7;
  char v8;
  char v9;

  v5 = 1;
  v9 = 1;
  if (*a5)
  {
    v7 = a5;
    v5 = 3;
  }
  v8 = v5;
  return sub_1C6139D2C(a1, a2, a3, a4, (uint64_t)&v7);
}

uint64_t LLVMBuildExtractValue(uint64_t a1, uint64_t *a2, unsigned int a3, _BYTE *a4)
{
  char v4;
  _BYTE *v6;
  char v7;
  char v8;
  unsigned int v9;

  v9 = a3;
  v4 = 1;
  v8 = 1;
  if (*a4)
  {
    v6 = a4;
    v4 = 3;
  }
  v7 = v4;
  return sub_1C506DBC4(a1, a2, &v9, 1, (uint64_t)&v6);
}

uint64_t LLVMBuildInsertValue(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _BYTE *a5)
{
  char v5;
  _BYTE *v7;
  char v8;
  char v9;
  int v10;

  v10 = a4;
  v5 = 1;
  v9 = 1;
  if (*a5)
  {
    v7 = a5;
    v5 = 3;
  }
  v8 = v5;
  return sub_1C506D788(a1, a2, a3, &v10, 1, (uint64_t)&v7);
}

unsigned __int8 **LLVMBuildFreeze(uint64_t *a1, _QWORD *a2, _BYTE *a3)
{
  char v5;
  char *v6;
  unsigned __int8 **v7;
  _BYTE *v9;
  char v10;
  char v11;
  _BYTE v12[32];
  __int16 v13;

  v5 = 1;
  v11 = 1;
  if (*a3)
  {
    v9 = a3;
    v5 = 3;
  }
  v10 = v5;
  v6 = (char *)operator new(0x60uLL);
  *((_DWORD *)v6 + 13) = *((_DWORD *)v6 + 13) & 0x38000000 | 1;
  v7 = (unsigned __int8 **)(v6 + 32);
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *((_QWORD *)v6 + 3) = v6 + 32;
  v13 = 257;
  llvm::FreezeInst::FreezeInst((uint64_t)(v6 + 32), a2, (uint64_t)v12, 0);
  return sub_1C4867F8C(a1, v7, (uint64_t)&v9);
}

uint64_t LLVMBuildIsNull(uint64_t a1, llvm::Constant **a2, _BYTE *a3)
{
  char v5;
  llvm::Value **NullValue;
  _BYTE *v8;
  char v9;
  char v10;

  v5 = 1;
  v10 = 1;
  if (*a3)
  {
    v8 = a3;
    v5 = 3;
  }
  v9 = v5;
  NullValue = llvm::Constant::getNullValue(*a2, (llvm::Type *)a2);
  return sub_1C4774B48(a1, 32, (uint64_t)a2, (uint64_t)NullValue, (uint64_t)&v8);
}

uint64_t LLVMBuildIsNotNull(uint64_t a1, llvm::Constant **a2, _BYTE *a3)
{
  char v5;
  llvm::Value **NullValue;
  _BYTE *v8;
  char v9;
  char v10;

  v5 = 1;
  v10 = 1;
  if (*a3)
  {
    v8 = a3;
    v5 = 3;
  }
  v9 = v5;
  NullValue = llvm::Constant::getNullValue(*a2, (llvm::Type *)a2);
  return sub_1C4774B48(a1, 33, (uint64_t)a2, (uint64_t)NullValue, (uint64_t)&v8);
}

uint64_t LLVMBuildPtrDiff(llvm::IRBuilderBase *a1, llvm::Value *a2, llvm::Value *a3, _BYTE *a4)
{
  llvm::Type *v6;
  char v7;
  _BYTE *v9;
  char v10;
  char v11;

  v6 = **(llvm::Type ***)(*(_QWORD *)a2 + 16);
  v7 = 1;
  v11 = 1;
  if (*a4)
  {
    v9 = a4;
    v7 = 3;
  }
  v10 = v7;
  return llvm::IRBuilderBase::CreatePtrDiff(a1, v6, a2, a3, (const llvm::Twine *)&v9);
}

uint64_t LLVMBuildPtrDiff2(llvm::IRBuilderBase *a1, llvm::Type *a2, llvm::Value *a3, llvm::Value *a4, _BYTE *a5)
{
  char v5;
  _BYTE *v7;
  char v8;
  char v9;

  v5 = 1;
  v9 = 1;
  if (*a5)
  {
    v7 = a5;
    v5 = 3;
  }
  v8 = v5;
  return llvm::IRBuilderBase::CreatePtrDiff(a1, a2, a3, a4, (const llvm::Twine *)&v7);
}

unsigned __int8 **LLVMBuildAtomicRMW(uint64_t *a1, __int16 a2, uint64_t a3, uint64_t *a4, __int16 a5, int a6)
{
  return sub_1C61D775C(a1, a2, a3, a4, 0, a5, a6 == 0);
}

unsigned __int8 **LLVMBuildAtomicCmpXchg(uint64_t *a1, uint64_t a2, uint64_t ***a3, uint64_t *a4, __int16 a5, __int16 a6, int a7)
{
  return sub_1C61D75CC(a1, a2, a3, a4, 0, a5, a6, a7 == 0);
}

uint64_t LLVMGetNumMaskElements(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t LLVMGetMaskValue(uint64_t a1, unsigned int a2)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * a2);
}

uint64_t LLVMGetUndefMaskElem()
{
  return 0xFFFFFFFFLL;
}

BOOL LLVMIsAtomicSingleThread(uint64_t a1)
{
  return *(_BYTE *)(a1 + 60) == 0;
}

uint64_t LLVMSetAtomicSingleThread(uint64_t result, int a2)
{
  *(_BYTE *)(result + 60) = a2 == 0;
  return result;
}

uint64_t LLVMGetCmpXchgSuccessOrdering(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 18) >> 2) & 7;
}

uint64_t LLVMSetCmpXchgSuccessOrdering(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 18) = *(_WORD *)(result + 18) & 0xFFE3 | (4 * a2);
  return result;
}

uint64_t LLVMGetCmpXchgFailureOrdering(uint64_t a1)
{
  return *(_WORD *)(a1 + 18) >> 5;
}

uint64_t LLVMSetCmpXchgFailureOrdering(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 18) = *(_WORD *)(result + 18) & 0xFF1F | (32 * a2);
  return result;
}

llvm::Module *LLVMDisposeModuleProvider(llvm::Module *result)
{
  if (result)
  {
    llvm::Module::~Module(result);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

uint64_t LLVMCreateMemoryBufferWithContentsOfFile(_BYTE *a1, _QWORD *a2, char **a3)
{
  char v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  void *v9;
  std::string *v10;
  std::error_code v11;
  std::string v12;
  char v13;
  char v14;
  std::error_code v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = 1;
  v14 = 1;
  if (*a1)
  {
    v12.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
    v5 = 3;
  }
  v13 = v5;
  sub_1C5E1F6CC((unsigned __int8 *)&v12, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)&v15);
  if ((v16 & 1) == 0)
  {
    std::system_category();
    result = 0;
    v7 = *(_QWORD *)&v15.__val_;
LABEL_13:
    *a2 = v7;
    return result;
  }
  v7 = *(_QWORD *)&v15.__val_;
  v11 = v15;
  if (!v15.__val_)
  {
    result = 0;
    goto LABEL_13;
  }
  std::error_code::message(&v12, &v11);
  v8 = SHIBYTE(v12.__r_.__value_.__r.__words[2]);
  v9 = (void *)v12.__r_.__value_.__r.__words[0];
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v12;
  else
    v10 = (std::string *)v12.__r_.__value_.__r.__words[0];
  *a3 = strdup((const char *)v10);
  if (v8 < 0)
    operator delete(v9);
  return 1;
}

uint64_t LLVMCreateMemoryBufferWithSTDIN(_QWORD *a1, char **a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  void *v7;
  std::string *v8;
  std::string v9;
  std::error_code v10;
  std::error_code v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  llvm::MemoryBuffer::getSTDIN((uint64_t)&v11);
  if ((v12 & 1) == 0)
  {
    std::system_category();
    result = 0;
    v5 = *(_QWORD *)&v11.__val_;
LABEL_11:
    *a1 = v5;
    return result;
  }
  v5 = *(_QWORD *)&v11.__val_;
  v10 = v11;
  if (!v11.__val_)
  {
    result = 0;
    goto LABEL_11;
  }
  std::error_code::message(&v9, &v10);
  v6 = SHIBYTE(v9.__r_.__value_.__r.__words[2]);
  v7 = (void *)v9.__r_.__value_.__r.__words[0];
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v9;
  else
    v8 = (std::string *)v9.__r_.__value_.__r.__words[0];
  *a2 = strdup((const char *)v8);
  if (v6 < 0)
    operator delete(v7);
  return 1;
}

char *LLVMCreateMemoryBufferWithMemoryRange(uint64_t a1, uint64_t a2, char *__s)
{
  size_t v6;
  char *result;
  _QWORD v8[4];
  __int16 v9;
  const void ***v10;

  if (__s)
    v6 = strlen(__s);
  else
    v6 = 0;
  v9 = 261;
  v8[0] = __s;
  v8[1] = v6;
  v10 = (const void ***)v8;
  result = sub_1C5E1F380(24, &v10);
  *(_QWORD *)result = &off_1E81A17B0;
  *((_QWORD *)result + 1) = a1;
  *((_QWORD *)result + 2) = a1 + a2;
  return result;
}

uint64_t LLVMCreateMemoryBufferWithMemoryRangeCopy(const void *a1, size_t a2, char *__s)
{
  size_t v6;
  _QWORD v8[4];
  __int16 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (__s)
    v6 = strlen(__s);
  else
    v6 = 0;
  v9 = 261;
  v8[0] = __s;
  v8[1] = v6;
  sub_1C5E1F4D0(a1, a2, (uint64_t)v8, (uint64_t)&v10);
  if ((v11 & 1) != 0)
    return 0;
  else
    return v10;
}

uint64_t LLVMGetBufferStart(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t LLVMGetBufferSize(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
}

uint64_t LLVMDisposeMemoryBuffer(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unint64_t LLVMGetGlobalPassRegistry()
{
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  return qword_1ED830BC0[0];
}

llvm::legacy::PassManager *LLVMCreatePassManager()
{
  llvm::legacy::PassManager *v0;

  v0 = (llvm::legacy::PassManager *)operator new();
  return llvm::legacy::PassManager::PassManager(v0);
}

llvm::legacy::FunctionPassManager *LLVMCreateFunctionPassManagerForModule(llvm::Module *a1)
{
  llvm::legacy::FunctionPassManager *v2;

  v2 = (llvm::legacy::FunctionPassManager *)operator new();
  return llvm::legacy::FunctionPassManager::FunctionPassManager(v2, a1);
}

llvm::legacy::FunctionPassManager *LLVMCreateFunctionPassManager(llvm::Module *a1)
{
  llvm::legacy::FunctionPassManager *v2;

  v2 = (llvm::legacy::FunctionPassManager *)operator new();
  return llvm::legacy::FunctionPassManager::FunctionPassManager(v2, a1);
}

uint64_t LLVMRunPassManager(uint64_t a1, llvm::Module *a2)
{
  return llvm::legacy::PassManagerImpl::run(*(llvm::legacy::PassManagerImpl **)(a1 + 8), a2);
}

uint64_t LLVMInitializeFunctionPassManager(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t LLVMRunFunctionPassManager(llvm::legacy::FunctionPassManagerImpl **a1, llvm::Module **a2)
{
  return llvm::legacy::FunctionPassManager::run(a1, a2);
}

uint64_t LLVMFinalizeFunctionPassManager(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t LLVMDisposePassManager(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t LLVMStartMultithreaded()
{
  return 1;
}

uint64_t LLVMIsMultithreaded()
{
  return 1;
}

unsigned __int8 **sub_1C5391E84(uint64_t *a1, unsigned __int8 **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 **v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v13;

  (*(void (**)(uint64_t, unsigned __int8 **, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], a2, a3, a1[6], a1[7]);
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = *a1;
    v7 = *a1 + 16 * v5;
    v8 = a2 + 6;
    do
    {
      v9 = *(_DWORD *)v6;
      v10 = *(unsigned __int8 **)(v6 + 8);
      if (v10)
      {
        if (!v9)
        {
          v13 = *(unsigned __int8 **)(v6 + 8);
          llvm::MetadataTracking::track((uint64_t)&v13, v10, 2);
LABEL_13:
          if (&v13 == v8)
          {
            if (v13)
              llvm::MetadataTracking::untrack((uint64_t)&v13, v13);
          }
          else
          {
            if (*v8)
              llvm::MetadataTracking::untrack((uint64_t)(a2 + 6), *v8);
            v11 = v13;
            *v8 = v13;
            if (v11)
              llvm::MetadataTracking::retrack((uint64_t)&v13, v11, (uint64_t)(a2 + 6));
          }
          goto LABEL_10;
        }
      }
      else
      {
        if (!*v8 && (*((_BYTE *)a2 + 23) & 0x20) == 0)
          goto LABEL_10;
        if (!v9)
        {
          v13 = 0;
          goto LABEL_13;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)a2, v9, (llvm::MDNode *)v10);
LABEL_10:
      v6 += 16;
    }
    while (v6 != v7);
  }
  return a2;
}

uint64_t ***sub_1C5391F90(uint64_t *a1, llvm::GetElementPtrInst *TypeAtIndex, uint64_t **a3, unsigned int a4, unsigned int a5, uint64_t a6)
{
  uint64_t v11;
  llvm::ConstantInt *v12;
  unint64_t v13;
  int v14;
  const llvm::APInt *v15;
  llvm::ValueHandleBase *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::ConstantInt *v19;
  unsigned int v20;
  unint64_t v21;
  llvm::ValueHandleBase *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t ***v27;
  char *v28;
  llvm::Value *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t ***v35;
  uint64_t **v36;
  uint64_t **v37;
  uint64_t **v38;
  uint64_t ***v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  uint64_t ***v48;
  _QWORD *v49;
  uint64_t **v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int v53;
  __int16 v54;
  unsigned __int8 *v55;
  uint64_t v56[2];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)a1[8];
  v12 = *(llvm::ConstantInt **)(v11 + 1960);
  v13 = *(unsigned int *)(v11 + 1968);
  v53 = v13 >> 8;
  if (v13 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v52, a4, 0);
  }
  else
  {
    if (v13 <= 0xFF)
      v14 = 0;
    else
      v14 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v13);
    v52 = v14 & a4;
  }
  v16 = llvm::ConstantInt::get(v12, (llvm::LLVMContext *)&v52, (const llvm::APInt *)a3);
  if (v53 >= 0x41 && v52)
    MEMORY[0x1CAA32F9C](v52, 0x1000C8000313F17);
  v56[0] = (uint64_t)v16;
  v17 = *(_QWORD *)a1[8];
  v18 = a5;
  v19 = *(llvm::ConstantInt **)(v17 + 1960);
  v20 = *(_DWORD *)(v17 + 1968);
  v53 = v20 >> 8;
  if (v20 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v52, v18, 0);
  }
  else
  {
    if (v20 <= 0xFF)
      v21 = 0;
    else
      v21 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v20);
    v52 = v21 & v18;
  }
  v22 = llvm::ConstantInt::get(v19, (llvm::LLVMContext *)&v52, v15);
  if (v53 >= 0x41 && v52)
    MEMORY[0x1CAA32F9C](v52, 0x1000C8000313F17);
  v56[1] = (uint64_t)v22;
  v23 = (*(uint64_t (**)(uint64_t, llvm::GetElementPtrInst *, uint64_t **, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)a1[9] + 48))(a1[9], TypeAtIndex, a3, v56, 2, 1);
  if (v23)
    return (uint64_t ***)v23;
  v54 = 257;
  v24 = (char *)operator new(0xB0uLL);
  v25 = v24;
  v26 = 0;
  v27 = (uint64_t ***)(v24 + 96);
  *((_DWORD *)v24 + 29) = *((_DWORD *)v24 + 29) & 0x38000000 | 3;
  do
  {
    v28 = &v24[v26];
    *(_QWORD *)v28 = 0;
    *((_QWORD *)v28 + 1) = 0;
    *((_QWORD *)v28 + 2) = 0;
    *((_QWORD *)v28 + 3) = v27;
    v26 += 32;
  }
  while (v26 != 96);
  sub_1C4774650(TypeAtIndex, (uint64_t *)a3, (llvm::Value *)v56, 2);
  *((_QWORD *)v25 + 12) = v30;
  *((_QWORD *)v25 + 13) = 0;
  v31 = *((_DWORD *)v25 + 29) & 0xC0000000 | 3;
  *((_DWORD *)v25 + 28) = 62;
  *((_DWORD *)v25 + 29) = v31;
  *(_OWORD *)(v25 + 120) = 0u;
  *(_OWORD *)(v25 + 136) = 0u;
  *((_DWORD *)v25 + 38) = 0;
  *((_QWORD *)v25 + 20) = TypeAtIndex;
  v32 = 1;
  do
  {
    if (v32 == 2)
      break;
    TypeAtIndex = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(TypeAtIndex, (llvm::Type *)v56[v32++], v29);
  }
  while (TypeAtIndex);
  *((_QWORD *)v25 + 21) = TypeAtIndex;
  v33 = *((_DWORD *)v25 + 29) & 0x7FFFFFF;
  v34 = -v33;
  v35 = &v27[-4 * v33];
  if (*v35)
  {
    v48 = &v27[4 * v34];
    v50 = v48[2];
    v49 = v48 + 2;
    *v50 = (uint64_t *)*(v49 - 1);
    v51 = *(v49 - 1);
    if (v51)
      *(_QWORD *)(v51 + 16) = *v49;
  }
  *v35 = a3;
  if (a3)
  {
    v38 = (uint64_t **)a3[1];
    v37 = a3 + 1;
    v36 = v38;
    v39 = &v27[4 * v34];
    v39[1] = v38;
    if (v38)
      v36[2] = (uint64_t *)(v39 + 1);
    v39[2] = v37;
    *v37 = (uint64_t *)v35;
  }
  sub_1C5382FD4((uint64_t)&v55, v56, &v57, (uint64_t)&v27[-4 * (*((_DWORD *)v25 + 29) & 0x7FFFFFF) + 4]);
  llvm::Value::setName(v27, (uint64_t)&v52);
  v25[113] |= 2u;
  (*(void (**)(uint64_t, uint64_t ***, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v27, a6, a1[6], a1[7]);
  v40 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v40)
  {
    v42 = *a1;
    v43 = *a1 + 16 * v40;
    do
    {
      v44 = *(_DWORD *)v42;
      v45 = *(unsigned __int8 **)(v42 + 8);
      if (v45)
      {
        if (!v44)
        {
          v55 = *(unsigned __int8 **)(v42 + 8);
          llvm::MetadataTracking::track((uint64_t)&v55, v45, 2);
          v46 = (unsigned __int8 *)*((_QWORD *)v25 + 18);
          goto LABEL_36;
        }
      }
      else
      {
        v46 = (unsigned __int8 *)*((_QWORD *)v25 + 18);
        if (!v46 && (v25[119] & 0x20) == 0)
          goto LABEL_33;
        if (!v44)
        {
          v55 = 0;
LABEL_36:
          if (v46)
            llvm::MetadataTracking::untrack((uint64_t)(v25 + 144), v46);
          v47 = v55;
          *((_QWORD *)v25 + 18) = v55;
          if (v47)
            llvm::MetadataTracking::retrack((uint64_t)&v55, v47, (uint64_t)(v25 + 144));
          goto LABEL_33;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v27, *(_DWORD *)v42, (llvm::MDNode *)v45);
LABEL_33:
      v42 += 16;
    }
    while (v42 != v43);
  }
  return v27;
}

llvm::LLVMContext *sub_1C5392384()
{
  llvm::LLVMContext *v0;

  v0 = (llvm::LLVMContext *)operator new();
  return llvm::LLVMContext::LLVMContext(v0);
}

llvm::LLVMContextImpl **sub_1C53923AC(llvm::LLVMContextImpl **result, llvm::Value *a2)
{
  if (result)
  {
    llvm::LLVMContext::~LLVMContext(result, a2);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

void sub_1C53923D8(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)(a2 + 8) = 0;
  v2 = **a1;
  if (*(_QWORD *)(v2 + 48) || (*(_BYTE *)(v2 + 23) & 0x20) != 0)
    llvm::Instruction::getAllMetadataImpl(v2, a2);
}

unint64_t sub_1C53923FC(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  if (*(_BYTE *)(a1 + 16) == 84
    && (v1 = *(_QWORD *)(a1 - 32)) != 0
    && !*(_BYTE *)(v1 + 16)
    && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
    && (*(_BYTE *)(v1 + 33) & 0x20) != 0
    && (v2 = *(_DWORD *)(v1 + 36), v2 <= 0x3A))
  {
    return (0x580000000000000uLL >> v2) & 1;
  }
  else
  {
    return 0;
  }
}

BOOL sub_1C5392454(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 57;
}

BOOL sub_1C53924A0(uint64_t a1)
{
  uint64_t v1;
  int v3;

  if (*(_BYTE *)(a1 + 16) != 84)
    return 0;
  v1 = *(_QWORD *)(a1 - 32);
  if (!v1 || *(_BYTE *)(v1 + 16) || *(_QWORD *)(v1 + 24) != *(_QWORD *)(a1 + 72) || (*(_BYTE *)(v1 + 33) & 0x20) == 0)
    return 0;
  v3 = *(_DWORD *)(v1 + 36);
  return v3 == 194 || v3 == 196;
}

BOOL sub_1C53924F4(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 197;
}

BOOL sub_1C5392540(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 199;
}

void sub_1C539258C(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;

  *(_DWORD *)(a2 + 8) = 0;
  v2 = **a1;
  if (v2)
    v3 = *(unsigned __int8 *)(v2 + 16) >= 0x1Cu;
  else
    v3 = 0;
  if (v3)
  {
    if (*(_QWORD *)(v2 + 48) || (*(_BYTE *)(v2 + 23) & 0x20) != 0)
      llvm::Instruction::getAllMetadataImpl(v2, a2);
  }
  else
  {
    llvm::Value::getAllMetadata((_BYTE *)v2, a2);
  }
}

uint64_t llvm::DIBuilder::DIBuilder(uint64_t a1, _QWORD *a2, char a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t *v33;
  const void *v34;
  int64_t v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  unsigned __int8 **v42;
  uint64_t v43;
  unsigned __int8 *v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unsigned __int8 **v49;
  uint64_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  _QWORD *v58;
  _QWORD v59[2];
  int v60;
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[2];
  int v66;
  char *v67;
  char *v68;
  char *v69;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = *a2;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 56) = a1 + 72;
  v5 = (_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 64) = 0x400000000;
  *(_QWORD *)(a1 + 104) = a1 + 120;
  v6 = (_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 112) = 0x400000000;
  *(_QWORD *)(a1 + 152) = a1 + 168;
  *(_QWORD *)(a1 + 160) = 0x400000000;
  v7 = a1 + 216;
  *(_QWORD *)(a1 + 200) = a1 + 216;
  v8 = (_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 248) = a1 + 264;
  v9 = (_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 208) = 0x400000000;
  *(_QWORD *)(a1 + 256) = 0x400000000;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = a1 + 360;
  *(_QWORD *)(a1 + 352) = 0x400000000;
  *(_BYTE *)(a1 + 392) = a3;
  *(_DWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 440) = 0;
  if (!a4)
    return a1;
  v10 = *(unsigned int *)(a4 + 8);
  v11 = *(_QWORD *)(a4 - 8 * v10 + 32);
  if (v11)
  {
    v12 = *(unsigned int *)(v11 + 8);
    *(_DWORD *)(a1 + 64) = 0;
    if ((_DWORD)v12)
    {
      v45 = (v12 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      v14 = v12;
      if (v45 >= 4)
      {
        v58 = (_QWORD *)(a1 + 56);
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 56, a1 + 72, v45 + 1, 8);
        v5 = v58;
        v46 = *(unsigned int *)(a1 + 64);
        v13 = *(_DWORD *)(a1 + 64);
      }
      else
      {
        v46 = 0;
        v13 = 0;
      }
      v47 = (_QWORD *)(*v5 + 8 * v46);
      v48 = -8 * v12;
      do
      {
        *v47++ = *(_QWORD *)(v11 + v48);
        v48 += 8;
      }
      while (v48);
    }
    else
    {
      v13 = 0;
      v14 = 0;
    }
    *(_DWORD *)(a1 + 64) = v13 + v14;
    a4 = *(_QWORD *)(a1 + 16);
    v15 = -(uint64_t)*(unsigned int *)(a4 + 8);
  }
  else
  {
    v15 = -v10;
  }
  v16 = *(_QWORD *)(a4 + 8 * v15 + 40);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 + 8);
    v18 = *(unsigned int *)(a1 + 112);
    if ((_DWORD)v18)
    {
      v52 = 8 * v18;
      v53 = *(_QWORD *)(a1 + 104) - 8;
      do
      {
        v54 = *(unsigned __int8 **)(v53 + v52);
        if (v54)
          llvm::MetadataTracking::untrack(v53 + v52, v54);
        v52 -= 8;
      }
      while (v52);
    }
    *(_DWORD *)(a1 + 112) = 0;
    if ((_DWORD)v17)
      v19 = ((v17 - 1) & 0x1FFFFFFFFFFFFFFFLL) + 1;
    else
      v19 = 0;
    if (v19 > *(unsigned int *)(a1 + 116))
    {
      sub_1C622D900((uint64_t)v6, v19);
      v20 = *(unsigned int *)(a1 + 112);
      v21 = *(_DWORD *)(a1 + 112);
      if (!(_DWORD)v17)
        goto LABEL_14;
    }
    else
    {
      v20 = 0;
      v21 = 0;
      if (!(_DWORD)v17)
      {
LABEL_14:
        *(_DWORD *)(a1 + 112) = v21 + v19;
        a4 = *(_QWORD *)(a1 + 16);
        v15 = -(uint64_t)*(unsigned int *)(a4 + 8);
        goto LABEL_15;
      }
    }
    v49 = (unsigned __int8 **)(*v6 + 8 * v20);
    v50 = -8 * v17;
    do
    {
      v51 = *(unsigned __int8 **)(v16 + v50);
      *v49 = v51;
      if (v51)
        llvm::MetadataTracking::track((uint64_t)v49, v51, 2);
      ++v49;
      v50 += 8;
    }
    while (v50);
    v21 = *(_DWORD *)(a1 + 112);
    goto LABEL_14;
  }
LABEL_15:
  v22 = *(_QWORD *)(a4 + 8 * v15 + 48);
  if (v22)
  {
    v23 = 0;
    v24 = *(unsigned int *)(v22 + 8);
    *(_DWORD *)(a1 + 208) = 0;
    if ((_DWORD)v24)
    {
      v37 = (v24 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v37 >= *(unsigned int *)(a1 + 212))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v8, v7, v37 + 1, 8);
        v38 = *(unsigned int *)(a1 + 208);
        v39 = *(_DWORD *)(a1 + 208);
      }
      else
      {
        v38 = 0;
        v39 = 0;
      }
      v40 = (_QWORD *)(*v8 + 8 * v38);
      v41 = -8 * v24;
      do
      {
        *v40++ = *(_QWORD *)(v22 + v41);
        v41 += 8;
      }
      while (v41);
      v23 = v39 + v24;
    }
    *(_DWORD *)(a1 + 208) = v23;
    a4 = *(_QWORD *)(a1 + 16);
    v15 = -(uint64_t)*(unsigned int *)(a4 + 8);
  }
  v25 = *(_QWORD *)(a4 + 8 * v15 + 56);
  if (!v25)
    goto LABEL_26;
  v26 = *(unsigned int *)(v25 + 8);
  v27 = *(unsigned int *)(a1 + 256);
  if ((_DWORD)v27)
  {
    v55 = 8 * v27;
    v56 = *(_QWORD *)(a1 + 248) - 8;
    do
    {
      v57 = *(unsigned __int8 **)(v56 + v55);
      if (v57)
        llvm::MetadataTracking::untrack(v56 + v55, v57);
      v55 -= 8;
    }
    while (v55);
  }
  *(_DWORD *)(a1 + 256) = 0;
  if ((_DWORD)v26)
    v28 = ((v26 - 1) & 0x1FFFFFFFFFFFFFFFLL) + 1;
  else
    v28 = 0;
  if (v28 > *(unsigned int *)(a1 + 260))
  {
    sub_1C622D900((uint64_t)v9, v28);
    v29 = *(unsigned int *)(a1 + 256);
    v30 = *(_DWORD *)(a1 + 256);
    if (!(_DWORD)v26)
      goto LABEL_25;
LABEL_38:
    v42 = (unsigned __int8 **)(*v9 + 8 * v29);
    v43 = -8 * v26;
    do
    {
      v44 = *(unsigned __int8 **)(v25 + v43);
      *v42 = v44;
      if (v44)
        llvm::MetadataTracking::track((uint64_t)v42, v44, 2);
      ++v42;
      v43 += 8;
    }
    while (v43);
    v30 = *(_DWORD *)(a1 + 256);
    goto LABEL_25;
  }
  v29 = 0;
  v30 = 0;
  if ((_DWORD)v26)
    goto LABEL_38;
LABEL_25:
  *(_DWORD *)(a1 + 256) = v30 + v28;
  a4 = *(_QWORD *)(a1 + 16);
  v15 = -(uint64_t)*(unsigned int *)(a4 + 8);
LABEL_26:
  v31 = *(_QWORD *)(a4 + 8 * v15 + 64);
  if (v31)
  {
    v33 = (uint64_t *)(v31 - 8 * *(unsigned int *)(v31 + 8));
    v59[0] = 0;
    v59[1] = 0;
    v60 = 0;
    v62 = 0;
    v63 = 0;
    v61 = 0;
    sub_1C622DA08((uint64_t)v59, v33, (uint64_t *)v31);
    v64 = 0;
    v65[0] = 0;
    v66 = 0;
    v65[1] = 0;
    sub_1C4DFE328((uint64_t)v65, (uint64_t)v59);
    v67 = 0;
    v68 = 0;
    v69 = 0;
    v34 = v61;
    v35 = v62 - v61;
    if (v62 != v61)
    {
      if (v35 < 0)
        abort();
      v67 = (char *)operator new(v62 - v61);
      v68 = v67;
      v36 = &v67[8 * (v35 >> 3)];
      v69 = v36;
      memmove(v67, v34, v35);
      v68 = v36;
    }
    sub_1C622B0CC(a1 + 296, &v64);
    sub_1C6176BF8(v65);
    sub_1C6176BF8(v59);
  }
  return a1;
}

uint64_t llvm::DIBuilder::trackIfUnresolved(uint64_t this, llvm::MDNode *a2)
{
  unsigned __int8 *v2;

  v2 = (unsigned __int8 *)a2;
  if (a2 && ((*((_BYTE *)a2 + 1) & 0x7F) == 2 || *((_DWORD *)a2 + 3)))
    return sub_1C622B174(this + 344, &v2);
  return this;
}

void llvm::DIBuilder::finalize(llvm::DIBuilder *this)
{
  llvm::MDNode *v1;
  uint64_t v3;
  llvm::Metadata *Impl;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  llvm::DISubprogram *v9;
  uint64_t v10;
  llvm::MDNode *v11;
  llvm::Metadata *v12;
  uint64_t v13;
  llvm::DISubprogram **v14;
  llvm::DISubprogram **v15;
  llvm::DISubprogram *v16;
  llvm::DISubprogram **v17;
  uint64_t v18;
  uint64_t v19;
  llvm::MDNode *v20;
  llvm::Metadata *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  llvm::MDNode *v30;
  llvm::MDNode *v31;
  uint64_t v32;
  llvm::MDNode *v33;
  llvm::Metadata *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  llvm::MDNode *v43;
  uint64_t *v44;
  char *v45;
  llvm::Metadata *v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  int v50;
  _BYTE v51[128];
  void *v52;
  uint64_t v53;
  _BYTE v54[128];
  llvm::DISubprogram **v55;
  uint64_t v56;
  _QWORD v57[17];

  v57[16] = *MEMORY[0x1E0C80C00];
  v1 = (llvm::MDNode *)*((_QWORD *)this + 2);
  if (v1)
  {
    v3 = *((unsigned int *)this + 16);
    if ((_DWORD)v3)
    {
      Impl = (llvm::Metadata *)llvm::MDTuple::getImpl(*((uint64_t **)this + 1), *((_QWORD **)this + 7), v3, 0, 1);
      llvm::MDNode::replaceOperandWith(v1, 4, Impl);
    }
    v55 = (llvm::DISubprogram **)v57;
    v56 = 0x1000000000;
    v47 = v51;
    v48 = v51;
    v49 = 16;
    v50 = 0;
    v5 = *((unsigned int *)this + 28);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = 8 * v5;
      do
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v47, *(_QWORD *)(*((_QWORD *)this + 13) + v6));
        if (v8)
        {
          v9 = *(llvm::DISubprogram **)(*((_QWORD *)this + 13) + v6);
          v10 = v56;
          if (v56 >= (unint64_t)HIDWORD(v56))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, (uint64_t)v57, v56 + 1, 8);
            v10 = v56;
          }
          v55[v10] = v9;
          LODWORD(v56) = v56 + 1;
        }
        v6 += 8;
      }
      while (v7 != v6);
      if ((_DWORD)v56)
      {
        v11 = (llvm::MDNode *)*((_QWORD *)this + 2);
        v12 = (llvm::Metadata *)llvm::MDTuple::getImpl(*((uint64_t **)this + 1), v55, v56, 0, 1);
        llvm::MDNode::replaceOperandWith(v11, 5, v12);
      }
    }
    v13 = llvm::MDTuple::getImpl(*((uint64_t **)this + 1), *((_QWORD **)this + 19), *((unsigned int *)this + 40), 0, 1);
    v14 = (llvm::DISubprogram **)v13;
    if (v13)
      v15 = (llvm::DISubprogram **)(v13 - 8 * *(unsigned int *)(v13 + 8));
    else
      v15 = 0;
    while (v15 != v14)
    {
      v16 = *v15++;
      llvm::DIBuilder::finalizeSubprogram(this, v16);
    }
    if ((_DWORD)v56)
    {
      v17 = v55;
      v18 = 8 * v56;
      do
      {
        if (*(_BYTE *)*v17 == 17)
          llvm::DIBuilder::finalizeSubprogram(this, *v17);
        ++v17;
        v18 -= 8;
      }
      while (v18);
    }
    v19 = *((unsigned int *)this + 52);
    if ((_DWORD)v19)
    {
      v20 = (llvm::MDNode *)*((_QWORD *)this + 2);
      v21 = (llvm::Metadata *)llvm::MDTuple::getImpl(*((uint64_t **)this + 1), *((_QWORD **)this + 25), v19, 0, 1);
      llvm::MDNode::replaceOperandWith(v20, 6, v21);
    }
    v22 = *((unsigned int *)this + 64);
    if ((_DWORD)v22)
    {
      v44 = (uint64_t *)*((_QWORD *)this + 1);
      v43 = (llvm::MDNode *)*((_QWORD *)this + 2);
      v45 = (char *)*((_QWORD *)this + 31);
      v52 = v54;
      v53 = 0x1000000000;
      sub_1C6177054((unsigned int *)&v52, v45, &v45[8 * v22]);
      v46 = (llvm::Metadata *)llvm::MDTuple::getImpl(v44, v52, v53, 0, 1);
      llvm::MDNode::replaceOperandWith(v43, 7, v46);
      if (v52 != v54)
        free(v52);
    }
    v23 = (uint64_t *)*((_QWORD *)this + 40);
    v24 = (uint64_t *)*((_QWORD *)this + 41);
    while (v23 != v24)
    {
      v25 = *v23;
      if (*v23)
      {
        v26 = (uint64_t *)*((_QWORD *)this + 1);
        v27 = *(_DWORD *)(v25 + 24);
        v28 = *(_QWORD *)(v25 - 8 * *(unsigned int *)(v25 + 8));
        v29 = llvm::MDTuple::getImpl(v26, (_QWORD *)v23[4], (v23[5] - v23[4]) >> 3, 0, 1);
        v30 = llvm::DIMacroFile::getImpl(v26, 3u, v27, v28, v29, 0, 1);
        if ((llvm::MDNode *)v25 == v30)
        {
          llvm::MDNode::replaceWithUniquedImpl((llvm::MDNode *)v25);
        }
        else
        {
          v32 = *(_QWORD *)(v25 + 16);
          if ((v32 & 4) != 0)
            llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v32 & 0xFFFFFFFFFFFFFFF8), v30);
          llvm::MDNode::deleteTemporary((llvm::MDNode *)v25, v31);
        }
      }
      else
      {
        v33 = (llvm::MDNode *)*((_QWORD *)this + 2);
        v34 = (llvm::Metadata *)llvm::MDTuple::getImpl(*((uint64_t **)this + 1), (_QWORD *)v23[4], (v23[5] - v23[4]) >> 3, 0, 1);
        llvm::MDNode::replaceOperandWith(v33, 8, v34);
      }
      v23 += 7;
    }
    v35 = *((unsigned int *)this + 88);
    if ((_DWORD)v35)
    {
      v36 = (uint64_t *)*((_QWORD *)this + 43);
      v37 = 8 * v35;
      do
      {
        v38 = *v36;
        if (*v36 && ((*(_BYTE *)(v38 + 1) & 0x7F) == 2 || *(_DWORD *)(v38 + 12)))
          llvm::MDNode::resolveCycles((unsigned __int8 *)v38);
        ++v36;
        v37 -= 8;
      }
      while (v37);
      v39 = *((unsigned int *)this + 88);
      if ((_DWORD)v39)
      {
        v40 = 8 * v39;
        v41 = *((_QWORD *)this + 43) - 8;
        do
        {
          v42 = *(unsigned __int8 **)(v41 + v40);
          if (v42)
            llvm::MetadataTracking::untrack(v41 + v40, v42);
          v40 -= 8;
        }
        while (v40);
      }
    }
    *((_DWORD *)this + 88) = 0;
    *((_BYTE *)this + 392) = 0;
    if (v48 != v47)
      free(v48);
    if (v55 != v57)
      free(v55);
  }
}

uint64_t llvm::DIBuilder::getOrCreateMacroArray(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return llvm::MDTuple::getImpl(*(uint64_t **)(a1 + 8), a2, a3, 0, 1);
}

unsigned __int8 *sub_1C5392E84(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unsigned __int8 *a7, size_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int v16;
  _QWORD *v17;
  unsigned __int8 *result;
  unsigned __int8 *v19;

  v16 = *(_DWORD *)(*a1 + 1000);
  if (a8)
    v17 = llvm::MDString::get(a1, a7, a8);
  else
    v17 = 0;
  result = (unsigned __int8 *)llvm::DIImportedEntity::getImpl(a1, a2, a3, a4, a5, a6, (uint64_t)v17, a9, 0, 1);
  v19 = result;
  if (v16 < *(_DWORD *)(*a1 + 1000))
  {
    sub_1C622B174(a10, &v19);
    return v19;
  }
  return result;
}

unsigned __int8 *llvm::DIBuilder::createImportedModule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  return sub_1C5392E84(*(uint64_t **)(a1 + 8), 58, a2, a3, a4, a5, 0, 0, a6, a1 + 248);
}

{
  return sub_1C5392E84(*(uint64_t **)(a1 + 8), 58, a2, a3, a4, a5, 0, 0, a6, a1 + 248);
}

{
  return sub_1C5392E84(*(uint64_t **)(a1 + 8), 58, a2, a3, a4, a5, 0, 0, a6, a1 + 248);
}

BOOL sub_1C5392FEC(_QWORD *a1, uint64_t *a2)
{
  int v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  char v17[16];
  unsigned __int8 v18;

  sub_1C622DAA0((uint64_t)v17, (uint64_t)a1, a2);
  v4 = v18;
  if (v18)
  {
    v6 = (uint64_t *)a1[4];
    v5 = a1[5];
    if ((unint64_t)v6 >= v5)
    {
      v8 = (_QWORD *)a1[3];
      v9 = v6 - v8;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61)
        abort();
      v11 = v5 - (_QWORD)v8;
      if (v11 >> 2 > v10)
        v10 = v11 >> 2;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 61)
          sub_1C4764EE4();
        v13 = (char *)operator new(8 * v12);
      }
      else
      {
        v13 = 0;
      }
      v14 = (uint64_t *)&v13[8 * v9];
      *v14 = *a2;
      v7 = v14 + 1;
      if (v6 != v8)
      {
        do
        {
          v15 = *--v6;
          *--v14 = v15;
        }
        while (v6 != v8);
        v6 = (uint64_t *)a1[3];
      }
      a1[3] = v14;
      a1[4] = v7;
      a1[5] = &v13[8 * v12];
      if (v6)
        operator delete(v6);
    }
    else
    {
      *v6 = *a2;
      v7 = v6 + 1;
    }
    a1[4] = v7;
  }
  return v4 != 0;
}

llvm::MDNode *llvm::DIBuilder::createTempMacroFile(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  llvm::MDNode *Impl;
  uint64_t v7;
  _QWORD *v8;
  const void *v9;
  int64_t v10;
  char *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[2];
  int v18;
  char *v19;
  char *v20;
  char *v21;

  Impl = llvm::DIMacroFile::getImpl(*(_QWORD **)(a1 + 8), 3u, a3, a4, 0, 2, 1);
  v7 = a1 + 296;
  v16 = a2;
  v8 = (_QWORD *)sub_1C622B5AC(v7, &v16);
  *(_QWORD *)&v13 = Impl;
  sub_1C5392FEC(v8, (uint64_t *)&v13);
  v14 = 0u;
  v15 = 0u;
  v13 = 0u;
  v17[0] = 0;
  v17[1] = 0;
  v16 = (uint64_t)Impl;
  v18 = 0;
  sub_1C4DFE328((uint64_t)v17, (uint64_t)&v13);
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v9 = (const void *)*((_QWORD *)&v14 + 1);
  v10 = v15 - *((_QWORD *)&v14 + 1);
  if ((_QWORD)v15 != *((_QWORD *)&v14 + 1))
  {
    if (v10 < 0)
      abort();
    v19 = (char *)operator new(v15 - *((_QWORD *)&v14 + 1));
    v20 = v19;
    v11 = &v19[8 * (v10 >> 3)];
    v21 = v11;
    memmove(v19, v9, v10);
    v20 = v11;
  }
  sub_1C622B0CC(v7, &v16);
  sub_1C6176BF8(v17);
  sub_1C6176BF8(&v13);
  return Impl;
}

llvm::MDNode *llvm::DIBuilder::createEnumerator(uint64_t a1, unsigned __int8 *a2, size_t a3, uint64_t a4, int a5)
{
  uint64_t *v6;
  _QWORD *v7;
  llvm::MDNode *Impl;
  uint64_t v10;
  unsigned int v11;

  v6 = *(uint64_t **)(a1 + 8);
  v11 = 64;
  v10 = a4;
  if (a3)
    v7 = llvm::MDString::get(v6, a2, a3);
  else
    v7 = 0;
  Impl = llvm::DIEnumerator::getImpl(v6, (uint64_t)&v10, a5, v7, 0, 1);
  if (v11 >= 0x41 && v10)
    MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
  return Impl;
}

llvm::MDNode *llvm::DIBuilder::createStringType(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v5;

  v5 = *(_QWORD **)(a1 + 8);
  if (a3)
    a3 = llvm::MDString::get(*(uint64_t **)(a1 + 8), a2, (size_t)a3);
  return llvm::DIStringType::getImpl(v5, 18, (uint64_t)a3, 0, 0, 0, a4, 0, 0, 0, 1);
}

llvm::MDNode *llvm::DIBuilder::createStringType(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;

  v7 = *(_QWORD **)(a1 + 8);
  if (a3)
    a3 = llvm::MDString::get(*(uint64_t **)(a1 + 8), a2, (size_t)a3);
  return llvm::DIStringType::getImpl(v7, 18, (uint64_t)a3, a4, 0, a5, 0, 0, 0, 0, 1);
}

{
  _QWORD *v7;

  v7 = *(_QWORD **)(a1 + 8);
  if (a3)
    a3 = llvm::MDString::get(*(uint64_t **)(a1 + 8), a2, (size_t)a3);
  return llvm::DIStringType::getImpl(v7, 18, (uint64_t)a3, 0, a4, a5, 0, 0, 0, 0, 1);
}

uint64_t llvm::DIBuilder::createFriend(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return llvm::DIDerivedType::getImpl(*(uint64_t **)(a1 + 8), 42, 0, 0, 0, a2, a3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1);
}

uint64_t llvm::DIBuilder::createVariantMemberType(uint64_t a1, llvm::Value *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, uint64_t a7, int a8, uint64_t a9, llvm::ValueAsMetadata *a10, int a11, uint64_t a12)
{
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;

  if (a2)
  {
    if (*(_BYTE *)a2 == 16)
      v16 = 0;
    else
      v16 = (uint64_t)a2;
  }
  else
  {
    v16 = 0;
  }
  v17 = *(uint64_t **)(a1 + 8);
  if (a10)
    v18 = llvm::ValueAsMetadata::get(a10, a2);
  else
    v18 = 0;
  if (a4)
    v19 = llvm::MDString::get(v17, a3, a4);
  else
    v19 = 0;
  return llvm::DIDerivedType::getImpl(v17, 13, (uint64_t)v19, a5, a6, v16, a12, a7, a8, a9, 0, 0, a11, (uint64_t)v18, 0, 0, 1);
}

uint64_t llvm::DIBuilder::createClassType(uint64_t a1, _BYTE *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, uint64_t a9, unsigned int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned __int8 *a15, size_t a16)
{
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v22;

  v17 = *(uint64_t **)(a1 + 8);
  if (a2)
  {
    if (*a2 == 16)
      v18 = 0;
    else
      v18 = (uint64_t)a2;
  }
  else
  {
    v18 = 0;
  }
  v19 = sub_1C5394528(v17, 19, a3, a4, a5, a6, v18, a11, a7, a8, a9, a10, a12, 0, a13, a14, a15, a16, 0,
          0,
          0,
          0,
          0,
          0,
          0,
          1);
  v20 = v19;
  v22 = (unsigned __int8 *)v19;
  if (v19 && ((*(_BYTE *)(v19 + 1) & 0x7F) == 2 || *(_DWORD *)(v19 + 12)))
    sub_1C622B174(a1 + 344, &v22);
  return v20;
}

uint64_t llvm::DIBuilder::createUnionType(uint64_t a1, _BYTE *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, int a11, unsigned __int8 *a12, size_t a13)
{
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v19;

  v14 = *(uint64_t **)(a1 + 8);
  if (a2)
  {
    if (*a2 == 16)
      v15 = 0;
    else
      v15 = (uint64_t)a2;
  }
  else
  {
    v15 = 0;
  }
  v16 = sub_1C5394528(v14, 23, a3, a4, a5, a6, v15, 0, a7, a8, 0, a9, a10, a11, 0, 0, a12, a13, 0,
          0,
          0,
          0,
          0,
          0,
          0,
          1);
  v17 = v16;
  v19 = (unsigned __int8 *)v16;
  if (v16 && ((*(_BYTE *)(v16 + 1) & 0x7F) == 2 || *(_DWORD *)(v16 + 12)))
    sub_1C622B174(a1 + 344, &v19);
  return v17;
}

uint64_t llvm::DIBuilder::createVariantPart(uint64_t a1, _BYTE *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, unint64_t a10, uint64_t a11, unsigned __int8 *a12, size_t a13)
{
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v19;

  v14 = *(uint64_t **)(a1 + 8);
  if (a2)
  {
    if (*a2 == 16)
      v15 = 0;
    else
      v15 = (uint64_t)a2;
  }
  else
  {
    v15 = 0;
  }
  v16 = sub_1C5394528(v14, 51, a3, a4, a5, a6, v15, 0, a7, a8, 0, a9, a11, 0, 0, 0, a12, a13, a10,
          0,
          0,
          0,
          0,
          0,
          0,
          1);
  v17 = v16;
  v19 = (unsigned __int8 *)v16;
  if (v16 && ((*(_BYTE *)(v16 + 1) & 0x7F) == 2 || *(_DWORD *)(v16 + 12)))
    sub_1C622B174(a1 + 344, &v19);
  return v17;
}

uint64_t llvm::DIBuilder::createSetType(uint64_t a1, _BYTE *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t Impl;
  uint64_t v18;
  unsigned __int8 *v20;

  v14 = *(uint64_t **)(a1 + 8);
  if (a2)
  {
    if (*a2 == 16)
      v15 = 0;
    else
      v15 = (uint64_t)a2;
    if (a4)
      goto LABEL_6;
LABEL_8:
    v16 = 0;
    goto LABEL_9;
  }
  v15 = 0;
  if (!a4)
    goto LABEL_8;
LABEL_6:
  v16 = llvm::MDString::get(*(uint64_t **)(a1 + 8), a3, a4);
LABEL_9:
  Impl = llvm::DIDerivedType::getImpl(v14, 32, (uint64_t)v16, a5, a6, v15, a9, a7, a8, 0, 0, 0, 0, 0, 0, 0, 1);
  v18 = Impl;
  v20 = (unsigned __int8 *)Impl;
  if (Impl && ((*(_BYTE *)(Impl + 1) & 0x7F) == 2 || *(_DWORD *)(Impl + 12)))
    sub_1C622B174(a1 + 344, &v20);
  return v18;
}

uint64_t llvm::DIBuilder::createArrayType(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t Impl;
  uint64_t v11;
  unsigned __int8 *v13;

  Impl = llvm::DICompositeType::getImpl(*(uint64_t **)(a1 + 8), 1, 0, 0, 0, 0, a4, a2, a3, 0, 0, a5, 0, 0, 0, 0, 0, a6 & 0xFFFFFFFFFFFFFFF8, a7 & 0xFFFFFFFFFFFFFFF8,
           a8 & 0xFFFFFFFFFFFFFFF8,
           a9 & 0xFFFFFFFFFFFFFFF8,
           0,
           0,
           1);
  v11 = Impl;
  v13 = (unsigned __int8 *)Impl;
  if (Impl && ((*(_BYTE *)(Impl + 1) & 0x7F) == 2 || *(_DWORD *)(Impl + 12)))
    sub_1C622B174(a1 + 344, &v13);
  return v11;
}

llvm::MDNode *llvm::DIBuilder::createArtificialSubprogram(llvm::DIBuilder *this, llvm::DISubprogram *a2)
{
  int v2;
  llvm::MDNode *v3;
  llvm::MDNode *v4;
  llvm::MDNode *v5;
  llvm::MDNode *v7;

  v2 = *((_DWORD *)this + 10) | 0x40;
  sub_1C5394690(this, (uint64_t *)&v7);
  v3 = v7;
  *((_DWORD *)v7 + 10) = v2;
  v7 = 0;
  llvm::MDNode::dropReplaceableUses((uint64_t)v3);
  llvm::MDNode::storeDistinctInContext(v3);
  v5 = v7;
  v7 = 0;
  if (v5)
    llvm::MDNode::deleteTemporary(v5, v4);
  return v3;
}

llvm::MDNode *llvm::DIBuilder::createArtificialType(llvm::MDNode *result)
{
  int v1;
  int v2;
  llvm::MDNode *v3;

  v1 = *((_DWORD *)result + 7);
  if ((v1 & 0x40) == 0)
  {
    v2 = v1 | 0x40;
    llvm::MDNode::clone(result);
    *((_DWORD *)v3 + 7) = v2;
    return llvm::MDNode::replaceWithUniquedImpl(v3);
  }
  return result;
}

llvm::MDNode *llvm::DIBuilder::getOrCreateSubrange(llvm::DIBuilder *this, uint64_t a2, const llvm::APInt *a3)
{
  llvm::ValueHandleBase *Signed;
  llvm::Value *v6;
  _QWORD *v7;
  const llvm::APInt *v8;
  llvm::ValueHandleBase *v9;
  llvm::Value *v10;
  _QWORD *v11;

  Signed = llvm::ConstantInt::getSigned((llvm::ConstantInt **)(**((_QWORD **)this + 1) + 1984), a2, a3);
  v7 = llvm::ValueAsMetadata::get(Signed, v6);
  v9 = llvm::ConstantInt::getSigned((llvm::ConstantInt **)(**((_QWORD **)this + 1) + 1984), (uint64_t)a3, v8);
  v11 = llvm::ValueAsMetadata::get(v9, v10);
  return llvm::DISubrange::getImpl(*((_QWORD **)this + 1), (uint64_t)v11, (uint64_t)v7, 0, 0, 0, 1);
}

llvm::MDNode *llvm::DIBuilder::getOrCreateSubrange(llvm::DIBuilder *this, uint64_t a2, llvm::Metadata *a3)
{
  llvm::ValueHandleBase *Signed;
  llvm::Value *v6;
  _QWORD *v7;

  Signed = llvm::ConstantInt::getSigned((llvm::ConstantInt **)(**((_QWORD **)this + 1) + 1984), a2, a3);
  v7 = llvm::ValueAsMetadata::get(Signed, v6);
  return llvm::DISubrange::getImpl(*((_QWORD **)this + 1), (uint64_t)a3, (uint64_t)v7, 0, 0, 0, 1);
}

llvm::MDNode *llvm::DIBuilder::getOrCreateGenericSubrange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return llvm::DIGenericSubrange::getImpl(*(_QWORD **)(a1 + 8), a2 & 0xFFFFFFFFFFFFFFF8, a3 & 0xFFFFFFFFFFFFFFF8, a4 & 0xFFFFFFFFFFFFFFF8, a5 & 0xFFFFFFFFFFFFFFF8, 0, 1);
}

unsigned __int8 *sub_1C5393B20(uint64_t *a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4, size_t a5, int a6, uint64_t a7, int a8, uint64_t a9, unsigned __int8 a10, int a11, int a12, uint64_t a13)
{
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  _QWORD *v21;
  uint64_t v22;
  unsigned __int8 *Impl;
  int v25;
  _QWORD *v26;
  unsigned __int8 *v28;
  unsigned __int8 *v29;

  v15 = a6;
  v16 = a3;
  if (a3)
  {
    if (*a3 == 16)
      v17 = 0;
    else
      v17 = (uint64_t)a3;
  }
  else
  {
    v17 = 0;
  }
  v18 = a10;
  if (a5)
  {
    v19 = a1;
    v21 = llvm::MDString::get(a1, a4, a5);
    v15 = a6;
    v18 = a10;
    v22 = (uint64_t)v21;
    a1 = v19;
  }
  else
  {
    v22 = 0;
  }
  Impl = (unsigned __int8 *)llvm::DILocalVariable::getImpl(a1, v17, v22, a7, a8, a9, v15, a11, a12, a13, 0, 1);
  v29 = Impl;
  if (v18)
  {
    if (v16)
    {
      v25 = *v16;
      if ((v25 - 17) > 2)
      {
        v16 = 0;
      }
      else
      {
        while ((v25 & 0xFE) == 0x12)
        {
          v16 = *(unsigned __int8 **)&v16[-8 * *((unsigned int *)v16 + 2) + 8];
          LOBYTE(v25) = *v16;
        }
      }
    }
    v28 = v16;
    v26 = sub_1C622DB2C(a2, (uint64_t *)&v28);
    sub_1C622C55C((uint64_t)(v26 + 1), &v29);
  }
  return Impl;
}

llvm::MDNode *llvm::DIBuilder::createCommonBlock(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, size_t a5, uint64_t a6, int a7)
{
  _QWORD *v11;
  _QWORD *v12;

  v11 = *(_QWORD **)(a1 + 8);
  if (a5)
    v12 = llvm::MDString::get(*(uint64_t **)(a1 + 8), a4, a5);
  else
    v12 = 0;
  return llvm::DICommonBlock::getImpl(v11, a2, a3, (uint64_t)v12, a6, a7, 0, 1);
}

uint64_t llvm::DIBuilder::insertLabel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = a4;
  if (a4)
    a4 = *(_QWORD *)(a4 + 40);
  return llvm::DIBuilder::insertLabel(a1, a2, a3, a4, v4);
}

{
  return llvm::DIBuilder::insertLabel(a1, a2, a3, a4, 0);
}

uint64_t llvm::DIBuilder::insertDbgValueIntrinsic(uint64_t a1, llvm::ValueAsMetadata *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return llvm::DIBuilder::insertDbgValueIntrinsic(a1, a2, a3, a4, a5, a6, 0);
}

{
  uint64_t v6;

  v6 = a6;
  if (a6)
    a6 = *(_QWORD *)(a6 + 40);
  return llvm::DIBuilder::insertDbgValueIntrinsic(a1, a2, a3, a4, a5, a6, v6);
}

uint64_t llvm::DIBuilder::insertDbgAddrIntrinsic(uint64_t a1, llvm::ValueAsMetadata *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  v6 = a6;
  if (a6)
    a6 = *(_QWORD *)(a6 + 40);
  return llvm::DIBuilder::insertDbgAddrIntrinsic(a1, a2, a3, a4, a5, a6, v6);
}

{
  return llvm::DIBuilder::insertDbgAddrIntrinsic(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t llvm::DIBuilder::insertDbgAddrIntrinsic(uint64_t a1, llvm::ValueAsMetadata *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  llvm::Value *Declaration;

  Declaration = *(llvm::Value **)(a1 + 48);
  if (!Declaration)
  {
    Declaration = (llvm::Value *)llvm::Intrinsic::getDeclaration(*(uint64_t **)a1, 55, 0, 0);
    *(_QWORD *)(a1 + 48) = Declaration;
  }
  return llvm::DIBuilder::insertDbgIntrinsic(a1, Declaration, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_1C5393D9C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t result;
  unsigned __int8 *v10;
  unsigned __int8 *v11;

  if (a4)
  {
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a4 + 40);
    *(_QWORD *)(a1 + 56) = a4 + 24;
    v6 = *(unsigned __int8 **)(a4 + 48);
    v11 = v6;
    if (v6)
    {
      llvm::MetadataTracking::track((uint64_t)&v11, v6, 2);
      v7 = v11;
    }
    else
    {
      v7 = 0;
    }
    sub_1C4774EF4(a1, 0, (uint64_t)v7);
    if (v11)
      llvm::MetadataTracking::untrack((uint64_t)&v11, v11);
  }
  else if (a3)
  {
    *(_QWORD *)(a1 + 48) = a3;
    *(_QWORD *)(a1 + 56) = a3 + 40;
  }
  v10 = a2;
  if (a2)
  {
    llvm::MetadataTracking::track((uint64_t)&v10, a2, 2);
    v8 = v10;
  }
  else
  {
    v8 = 0;
  }
  result = sub_1C4774EF4(a1, 0, (uint64_t)v8);
  if (v10)
    return llvm::MetadataTracking::untrack((uint64_t)&v10, v10);
  return result;
}

void llvm::DIBuilder::replaceVTableHolder(uint64_t a1, unsigned __int8 **a2, uint64_t a3)
{
  unsigned __int8 *v6;
  llvm::MDNode *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;

  v6 = *a2;
  v14 = v6;
  if (v6)
  {
    llvm::MetadataTracking::track((uint64_t)&v14, v6, 2);
    v7 = (llvm::MDNode *)v14;
  }
  else
  {
    v7 = 0;
  }
  llvm::MDNode::replaceOperandWith(v7, 5, (llvm::Metadata *)a3);
  v8 = v14;
  *a2 = v14;
  if (v8)
  {
    llvm::MetadataTracking::untrack((uint64_t)&v14, v8);
    v9 = *a2;
  }
  else
  {
    v9 = 0;
  }
  if (v9 == (unsigned __int8 *)a3 && (*(_BYTE *)(a3 + 1) & 0x7F) != 2 && !*(_DWORD *)(a3 + 12))
  {
    v10 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v10)
    {
      v11 = a1 + 344;
      v12 = -8 * v10;
      do
      {
        v13 = *(unsigned __int8 **)(a3 + v12);
        if (v13)
        {
          if (*v13 - 4 <= 0x1E)
          {
            v14 = *(unsigned __int8 **)(a3 + v12);
            if ((v13[1] & 0x7F) == 2 || *((_DWORD *)v13 + 3))
              sub_1C622B174(v11, &v14);
          }
        }
        v12 += 8;
      }
      while (v12);
    }
  }
}

uint64_t llvm::DIBuilder::replaceArrays(uint64_t a1, unsigned __int8 **a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *v8;
  uint64_t result;
  unsigned __int8 *v10;

  v8 = *a2;
  v10 = v8;
  if (v8)
  {
    llvm::MetadataTracking::track((uint64_t)&v10, v8, 2);
    v8 = v10;
  }
  if (a3)
  {
    llvm::MDNode::replaceOperandWith((llvm::MDNode *)v8, 4, (llvm::Metadata *)a3);
    v8 = v10;
  }
  if (a4)
  {
    llvm::MDNode::replaceOperandWith((llvm::MDNode *)v8, 6, (llvm::Metadata *)a4);
    v8 = v10;
  }
  *a2 = v8;
  result = llvm::MetadataTracking::untrack((uint64_t)&v10, v8);
  if (((*a2)[1] & 0x7F) != 2 && !*((_DWORD *)*a2 + 3))
  {
    if (a3 && ((v10 = (unsigned __int8 *)a3, (*(_BYTE *)(a3 + 1) & 0x7F) == 2) || *(_DWORD *)(a3 + 12)))
    {
      result = sub_1C622B174(a1 + 344, &v10);
      if (!a4)
        return result;
    }
    else if (!a4)
    {
      return result;
    }
    v10 = (unsigned __int8 *)a4;
    if ((*(_BYTE *)(a4 + 1) & 0x7F) == 2 || *(_DWORD *)(a4 + 12))
      return sub_1C622B174(a1 + 344, &v10);
  }
  return result;
}

char *sub_1C5394078(uint64_t *a1, int a2, uint64_t a3, unsigned __int8 *a4, size_t a5, char a6, unsigned __int8 *a7, _QWORD *a8, int a9, unsigned __int8 *a10, size_t a11, int a12, unint64_t a13, unint64_t a14, __int128 a15, uint64_t a16, uint64_t a17, char a18, char a19, int a20,char a21,unsigned __int8 *a22,size_t a23,unsigned __int8 *a24,size_t a25,int a26)
{
  _QWORD *v26;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;

  v26 = a8;
  v29 = (_QWORD *)a11;
  if (a5)
  {
    v30 = llvm::MDString::get(a1, a4, a5);
    if (!v26)
      goto LABEL_4;
    goto LABEL_3;
  }
  v30 = 0;
  if (a8)
LABEL_3:
    v26 = llvm::MDString::get(a1, a7, (size_t)v26);
LABEL_4:
  if (a11)
    v29 = llvm::MDString::get(a1, a10, a11);
  if (!a23)
  {
    v31 = 0;
    if (a25)
      goto LABEL_8;
LABEL_12:
    v32 = 0;
    return llvm::DICompileUnit::getImpl((uint64_t)a1, a2, a3, (uint64_t)v30, a6, (uint64_t)v26, a9, (uint64_t)v29, a12, __PAIR128__(a14, a13), a15, a16, a17, a18, a19, a20, a21, (uint64_t)v31, (uint64_t)v32,
             a26);
  }
  v31 = llvm::MDString::get(a1, a22, a23);
  if (!a25)
    goto LABEL_12;
LABEL_8:
  v32 = llvm::MDString::get(a1, a24, a25);
  return llvm::DICompileUnit::getImpl((uint64_t)a1, a2, a3, (uint64_t)v30, a6, (uint64_t)v26, a9, (uint64_t)v29, a12, __PAIR128__(a14, a13), a15, a16, a17, a18, a19, a20, a21, (uint64_t)v31, (uint64_t)v32,
           a26);
}

llvm::MDNode *sub_1C5394260(uint64_t *a1, unsigned __int8 *a2, _QWORD *a3, unsigned __int8 *a4, _QWORD *a5, uint64_t a6, uint64_t a7, int a8, unsigned __int8 a9)
{
  _QWORD *v9;
  _QWORD *v13;
  size_t v17;
  char v18;
  int v19;
  unsigned int v20;
  size_t v21;
  _QWORD *v22;
  uint64_t v23;
  __int128 v26;
  char v27;

  v13 = a3;
  if (*(_BYTE *)(a6 + 24))
  {
    v17 = *(_QWORD *)(a6 + 16);
    if (v17)
      v9 = llvm::MDString::get(a1, *(unsigned __int8 **)(a6 + 8), v17);
    else
      v9 = 0;
    v20 = *(_DWORD *)a6 & 0xFFFFFF00;
    v19 = *(_DWORD *)a6;
    v18 = 1;
    if (v13)
      goto LABEL_8;
  }
  else
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    if (a3)
LABEL_8:
      v13 = llvm::MDString::get(a1, a2, (size_t)v13);
  }
  if (a5)
    a5 = llvm::MDString::get(a1, a4, (size_t)a5);
  LODWORD(v26) = v20 | v19;
  *((_QWORD *)&v26 + 1) = v9;
  v27 = v18;
  if (*(_BYTE *)(a7 + 16))
  {
    v21 = *(_QWORD *)(a7 + 8);
    if (v21)
      v22 = llvm::MDString::get(a1, *(unsigned __int8 **)a7, v21);
    else
      v22 = 0;
    v23 = 1;
  }
  else
  {
    v23 = 0;
    v22 = 0;
  }
  return llvm::DIFile::getImpl(a1, (uint64_t)v13, (uint64_t)a5, &v26, (uint64_t)v22, v23, a8, a9);
}

llvm::MDNode *sub_1C53943A4(uint64_t *a1, unsigned int a2, unsigned int a3, unsigned __int8 *a4, size_t a5, unsigned __int8 *a6, size_t a7, int a8, unsigned __int8 a9)
{
  _QWORD *v15;
  _QWORD *v16;

  if (!a5)
  {
    v15 = 0;
    if (a7)
      goto LABEL_3;
LABEL_5:
    v16 = 0;
    return llvm::DIMacro::getImpl(a1, a2, a3, (unint64_t)v15, (unint64_t)v16, a8, a9);
  }
  v15 = llvm::MDString::get(a1, a4, a5);
  if (!a7)
    goto LABEL_5;
LABEL_3:
  v16 = llvm::MDString::get(a1, a6, a7);
  return llvm::DIMacro::getImpl(a1, a2, a3, (unint64_t)v15, (unint64_t)v16, a8, a9);
}

unsigned int *sub_1C5394448(uint64_t *a1, unsigned __int8 *a2, size_t a3, uint64_t a4, int a5, unsigned __int8 *a6, _QWORD *a7, uint64_t a8, unsigned __int8 *a9, size_t a10, int a11, uint64_t a12, int a13, char a14)
{
  _QWORD *v14;
  _QWORD *v17;
  _QWORD *v18;

  v14 = a7;
  if (a3)
  {
    v17 = llvm::MDString::get(a1, a2, a3);
    if (!v14)
      goto LABEL_4;
    goto LABEL_3;
  }
  v17 = 0;
  if (a7)
LABEL_3:
    v14 = llvm::MDString::get(a1, a6, (size_t)v14);
LABEL_4:
  if (a10)
    v18 = llvm::MDString::get(a1, a9, a10);
  else
    v18 = 0;
  return llvm::DIObjCProperty::getImpl(a1, (uint64_t)v17, a4, a5, (uint64_t)v14, (uint64_t)v18, a11, a12, a13, a14);
}

uint64_t sub_1C5394528(uint64_t *a1, int a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, uint64_t a11, unsigned int a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, unsigned __int8 *a17, size_t a18, unint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,char a26)
{
  unsigned __int8 *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;

  v27 = a17;
  if (!a4)
  {
    v29 = 0;
    if (a18)
      goto LABEL_3;
LABEL_5:
    v30 = 0;
    return llvm::DICompositeType::getImpl(a1, a2, v29, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, (uint64_t)v30, a19, a20, a21,
             a22,
             a23,
             a24,
             a25,
             a26);
  }
  v28 = llvm::MDString::get(a1, a3, a4);
  v27 = a17;
  v29 = (uint64_t)v28;
  if (!a18)
    goto LABEL_5;
LABEL_3:
  v30 = llvm::MDString::get(a1, v27, a18);
  return llvm::DICompositeType::getImpl(a1, a2, v29, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, (uint64_t)v30, a19, a20, a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

uint64_t sub_1C5394690@<X0>(_BYTE *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  size_t v16;
  size_t v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  size_t v35;
  uint64_t result;
  uint64_t v37;
  _QWORD *v38;
  size_t v39;

  v4 = *((_QWORD *)a1 + 2);
  v5 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 4) != 0)
    v5 = (uint64_t *)*v5;
  v6 = *((unsigned int *)a1 + 2);
  v7 = &a1[-8 * v6];
  v8 = *((_QWORD *)v7 + 2);
  if (v8)
  {
    v9 = *(_QWORD **)(v8 + 8);
    v12 = *v9;
    v10 = (unsigned __int8 *)(v9 + 3);
    v11 = v12;
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  v13 = *((_QWORD *)v7 + 3);
  if (v13)
  {
    v14 = *(_QWORD **)(v13 + 8);
    v17 = *v14;
    v15 = (unsigned __int8 *)(v14 + 3);
    v16 = v17;
  }
  else
  {
    v16 = 0;
    v15 = 0;
  }
  v18 = (void *)*((_QWORD *)v7 + 1);
  v19 = a1;
  if (*a1 != 15)
    v19 = *(void **)v7;
  v20 = (void *)*((_QWORD *)v7 + 4);
  v21 = *((_DWORD *)a1 + 6);
  v22 = *((_DWORD *)a1 + 7);
  if (v6 <= 8)
  {
    v23 = 0;
    v24 = *((_DWORD *)a1 + 8);
    v25 = *((_DWORD *)a1 + 9);
    v27 = *((_DWORD *)a1 + 10);
    v26 = *((_DWORD *)a1 + 11);
    v28 = *((_QWORD *)v7 + 5);
    goto LABEL_17;
  }
  v23 = *((_QWORD *)v7 + 8);
  v24 = *((_DWORD *)a1 + 8);
  v25 = *((_DWORD *)a1 + 9);
  v27 = *((_DWORD *)a1 + 10);
  v26 = *((_DWORD *)a1 + 11);
  v28 = *((_QWORD *)v7 + 5);
  if ((_DWORD)v6 == 9)
  {
LABEL_17:
    v33 = 0;
    v29 = 0;
    v32 = 0;
    v34 = 0;
    v35 = 0;
    v30 = *((_QWORD *)v7 + 6);
    v31 = *((_QWORD *)v7 + 7);
    goto LABEL_20;
  }
  v29 = *((_QWORD *)v7 + 9);
  v30 = *((_QWORD *)v7 + 6);
  v31 = *((_QWORD *)v7 + 7);
  if (v6 < 0xB)
  {
    v33 = 0;
    v32 = 0;
  }
  else
  {
    v32 = *((_QWORD *)v7 + 10);
    if ((_DWORD)v6 == 11)
    {
      v33 = 0;
    }
    else
    {
      v33 = *((_QWORD *)v7 + 11);
      if (v6 >= 0xD)
      {
        v37 = *((_QWORD *)v7 + 12);
        if (v37)
        {
          v38 = *(_QWORD **)(v37 + 8);
          v39 = *v38;
          v34 = (unsigned __int8 *)(v38 + 3);
          v35 = v39;
          goto LABEL_20;
        }
      }
    }
  }
  v34 = 0;
  v35 = 0;
LABEL_20:
  result = sub_1C539490C(v5, v18, v10, v11, v15, v16, v19, v21, v20, v22, v23, __SPAIR64__(v25, v24), __SPAIR64__(v26, v27), v28, v29, v30, v31, v32, v33,
             v34,
             v35,
             2,
             1);
  *a2 = result;
  return result;
}

llvm::MDNode *sub_1C539481C(uint64_t *a1, uint64_t a2, unsigned __int8 *a3, size_t a4, unsigned __int8 *a5, size_t a6, uint64_t a7, int a8, uint64_t a9, char a10, char a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, int a16, char a17)
{
  unsigned __int8 *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;

  if (!a4)
  {
    v21 = 0;
    if (a6)
      goto LABEL_3;
LABEL_5:
    v22 = 0;
    return llvm::DIGlobalVariable::getImpl(a1, a2, v21, (uint64_t)v22, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  }
  v19 = a5;
  v20 = llvm::MDString::get(a1, a3, a4);
  a5 = v19;
  v21 = (uint64_t)v20;
  if (!a6)
    goto LABEL_5;
LABEL_3:
  v22 = llvm::MDString::get(a1, a5, a6);
  return llvm::DIGlobalVariable::getImpl(a1, a2, v21, (uint64_t)v22, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

uint64_t sub_1C539490C(uint64_t *a1, void *a2, unsigned __int8 *a3, size_t a4, unsigned __int8 *a5, size_t a6, void *a7, int a8, void *a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unsigned __int8 *a20,size_t a21,int a22,char a23)
{
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;

  if (a4)
  {
    v26 = llvm::MDString::get(a1, a3, a4);
    if (a6)
      goto LABEL_3;
LABEL_6:
    v27 = 0;
    if (a21)
      goto LABEL_4;
LABEL_7:
    v28 = 0;
    return llvm::DISubprogram::getImpl(a1, a2, (uint64_t)v26, v27, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, (uint64_t)v28, a22,
             a23);
  }
  v26 = 0;
  if (!a6)
    goto LABEL_6;
LABEL_3:
  v27 = llvm::MDString::get(a1, a5, a6);
  if (!a21)
    goto LABEL_7;
LABEL_4:
  v28 = llvm::MDString::get(a1, a20, a21);
  return llvm::DISubprogram::getImpl(a1, a2, (uint64_t)v26, v27, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, (uint64_t)v28, a22,
           a23);
}

llvm::MDNode *sub_1C5394A8C(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, size_t a5, unsigned __int8 *a6, _QWORD *a7, uint64_t a8, unsigned __int8 *a9, size_t a10, unsigned __int8 *a11, size_t a12, int a13, char a14, int a15, char a16)
{
  _QWORD *v16;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;

  v16 = a7;
  if (a5)
  {
    v19 = llvm::MDString::get(a1, a4, a5);
    if (!v16)
      goto LABEL_4;
    goto LABEL_3;
  }
  v19 = 0;
  if (a7)
LABEL_3:
    v16 = llvm::MDString::get(a1, a6, (size_t)v16);
LABEL_4:
  if (!a10)
  {
    v20 = 0;
    if (a12)
      goto LABEL_6;
LABEL_10:
    v21 = 0;
    return llvm::DIModule::getImpl(a1, a2, a3, (uint64_t)v19, (uint64_t)v16, (uint64_t)v20, (uint64_t)v21, a13, a14, a15, a16);
  }
  v20 = llvm::MDString::get(a1, a9, a10);
  if (!a12)
    goto LABEL_10;
LABEL_6:
  v21 = llvm::MDString::get(a1, a11, a12);
  return llvm::DIModule::getImpl(a1, a2, a3, (uint64_t)v19, (uint64_t)v16, (uint64_t)v20, (uint64_t)v21, a13, a14, a15, a16);
}

__n128 sub_1C5394B9C(__n128 *a1, char **a2, _WORD *a3)
{
  __n128 result;
  char *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED804448, "use-dbg-addr", 0xCuLL);
  result = *a1;
  xmmword_1ED804468 = (__int128)*a1;
  v7 = *a2;
  byte_1ED8044C8 = **a2;
  byte_1ED8044D9 = 1;
  byte_1ED8044D8 = *v7;
  word_1ED804452 = (32 * (*a3 & 3)) | word_1ED804452 & 0xFF9F;
  return result;
}

void sub_1C5394C20(void **a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *v5 = *a2;
    v6 = v5 + 7;
    sub_1C6182CAC((uint64_t)(v5 + 1), (uint64_t)(a2 + 1));
    goto LABEL_19;
  }
  v7 = 0x6DB6DB6DB6DB6DB7 * (((char *)v5 - (_BYTE *)*a1) >> 3);
  v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) > 0x492492492492492)
    abort();
  v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4 - (_QWORD)*a1) >> 3);
  if (2 * v9 > v8)
    v8 = 2 * v9;
  if (v9 >= 0x249249249249249)
    v10 = 0x492492492492492;
  else
    v10 = v8;
  if (v10)
  {
    if (v10 > 0x492492492492492)
      sub_1C4764EE4();
    v11 = (char *)operator new(56 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[56 * v7];
  v13 = &v11[56 * v10];
  *(_QWORD *)v12 = *a2;
  v6 = v12 + 56;
  sub_1C6182CAC((uint64_t)(v12 + 8), (uint64_t)(a2 + 1));
  v15 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v12;
    a1[1] = v6;
    a1[2] = v13;
    if (!v14)
      goto LABEL_19;
    goto LABEL_18;
  }
  do
  {
    v16 = *((_QWORD *)v14 - 7);
    v14 -= 56;
    *((_QWORD *)v12 - 7) = v16;
    v12 -= 56;
    sub_1C6182CAC((uint64_t)(v12 + 8), (uint64_t)(v14 + 8));
  }
  while (v14 != v15);
  v14 = (char *)*a1;
  v17 = (char *)a1[1];
  *a1 = v12;
  a1[1] = v6;
  a1[2] = v13;
  if (v17 != v14)
  {
    do
    {
      v18 = v17 - 56;
      sub_1C6176BF8((_QWORD *)v17 - 6);
      v17 = v18;
    }
    while (v18 != v14);
  }
  if (v14)
LABEL_18:
    operator delete(v14);
LABEL_19:
  a1[1] = v6;
}

uint64_t sub_1C5394DA4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C5394E30(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C5394EC4(a2, a3, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    v8 = 1;
  }
  v9 = *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_1C5394E30(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 8 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v12 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(a1 + 8 * (v11 & v4));
        v7 = *v6;
        v12 = 1;
        if (*v6 == a3)
          goto LABEL_14;
      }
      v12 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v12 = 0;
  }
LABEL_14:
  *a4 = v6;
  return v12;
}

_QWORD *sub_1C5394EC4(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C5394F78(a1, v6);
  v8 = 0;
  sub_1C5394E30(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C5394F78(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C5395030(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5395030(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C5394E30(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v10);
      *v10 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

_QWORD *sub_1C53950D4(uint64_t a1, int a2)
{
  uint64_t v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C622DC54((char **)a1, (uint64_t)v4, (uint64_t)&v4[32 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 32 * v10;
    do
    {
      *result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C539518C(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 **v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  char *v13;
  char *v14;
  unsigned __int8 **v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  char *v24;
  uint64_t v25;
  unsigned __int8 **v26;
  unsigned __int8 **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unsigned __int8 *v32;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v5 = *(unsigned int *)(a2 + 8);
      v6 = *(unsigned int *)(a1 + 8);
      if (v6 >= v5)
      {
        v9 = *(char **)a1;
        if ((_DWORD)v5)
        {
          v10 = 0;
          do
          {
            if (v4 != v9)
            {
              v11 = *(unsigned __int8 **)&v9[v10];
              if (v11)
                llvm::MetadataTracking::untrack((uint64_t)&v9[v10], v11);
              *(_QWORD *)&v9[v10] = *(_QWORD *)&v4[v10];
              v12 = *(unsigned __int8 **)&v4[v10];
              if (v12)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v4[v10], v12, (uint64_t)&v9[v10]);
                *(_QWORD *)&v4[v10] = 0;
              }
            }
            v10 += 8;
          }
          while (8 * v5 != v10);
          v6 = *(unsigned int *)(a1 + 8);
          v13 = &v9[v10];
          v9 = *(char **)a1;
        }
        else
        {
          v13 = *(char **)a1;
        }
        v14 = &v9[8 * v6];
        if (v14 != v13)
        {
          v15 = (unsigned __int8 **)(v14 - 8);
          do
          {
            if (*v15)
              llvm::MetadataTracking::untrack((uint64_t)v15, *v15);
          }
          while (v15-- != (unsigned __int8 **)v13);
        }
        *(_DWORD *)(a1 + 8) = v5;
        v17 = *(unsigned int *)(a2 + 8);
        if ((_DWORD)v17)
        {
          v18 = 8 * v17;
          v19 = *(_QWORD *)a2 - 8;
          do
          {
            v20 = *(unsigned __int8 **)(v19 + v18);
            if (v20)
              llvm::MetadataTracking::untrack(v19 + v18, v20);
            v18 -= 8;
          }
          while (v18);
        }
        goto LABEL_55;
      }
      if (*(_DWORD *)(a1 + 12) < v5)
      {
        if ((_DWORD)v6)
        {
          v21 = 8 * v6;
          v22 = *(_QWORD *)a1 - 8;
          do
          {
            v23 = *(unsigned __int8 **)(v22 + v21);
            if (v23)
              llvm::MetadataTracking::untrack(v22 + v21, v23);
            v21 -= 8;
          }
          while (v21);
        }
        *(_DWORD *)(a1 + 8) = 0;
        sub_1C622D900(a1, v5);
      }
      else if ((_DWORD)v6)
      {
        v7 = *(unsigned __int8 ***)a1;
        v8 = 8 * v6;
        do
        {
          if (v4 != (char *)v7)
          {
            if (*v7)
              llvm::MetadataTracking::untrack((uint64_t)v7, *v7);
            *v7 = *(unsigned __int8 **)v4;
            if (*(_QWORD *)v4)
            {
              llvm::MetadataTracking::retrack((uint64_t)v4, *(unsigned __int8 **)v4, (uint64_t)v7);
              *(_QWORD *)v4 = 0;
            }
          }
          v4 += 8;
          ++v7;
          v8 -= 8;
        }
        while (v8);
        goto LABEL_44;
      }
      v6 = 0;
LABEL_44:
      v24 = *(char **)a2;
      v25 = *(unsigned int *)(a2 + 8);
      if (v6 != v25)
      {
        v26 = (unsigned __int8 **)(*(_QWORD *)a1 + 8 * v6);
        v27 = (unsigned __int8 **)&v24[8 * v6];
        v28 = 8 * v25 - 8 * v6;
        do
        {
          *v26 = *v27;
          if (*v27)
          {
            llvm::MetadataTracking::retrack((uint64_t)v27, *v27, (uint64_t)v26);
            *v27 = 0;
          }
          ++v27;
          ++v26;
          v28 -= 8;
        }
        while (v28);
        v24 = *(char **)a2;
      }
      *(_DWORD *)(a1 + 8) = v5;
      v29 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v29)
      {
        v30 = 8 * v29;
        v31 = v24 - 8;
        do
        {
          v32 = *(unsigned __int8 **)&v31[v30];
          if (v32)
            llvm::MetadataTracking::untrack((uint64_t)&v31[v30], v32);
          v30 -= 8;
        }
        while (v30);
      }
LABEL_55:
      *(_DWORD *)(a2 + 8) = 0;
      return a1;
    }
    sub_1C622DD3C((char **)a1, (char **)a2);
  }
  return a1;
}

uint64_t sub_1C5395410()
{
  int v1;
  char v2;
  char *v3;
  __n128 v4;

  v4.n128_u64[0] = (unint64_t)"Use llvm.dbg.addr for all local variables";
  v4.n128_u64[1] = 41;
  v2 = 0;
  v3 = &v2;
  v1 = 1;
  sub_1C622D85C(&v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED804448, &dword_1C475E000);
}

llvm::StructLayout *llvm::StructLayout::StructLayout(llvm::StructLayout *this, llvm::StructType *a2, const llvm::DataLayout *a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  char v17;
  char v18;

  *((_BYTE *)this + 8) = 0;
  *(_QWORD *)this = 0;
  *((_BYTE *)this + 9) &= ~1u;
  v5 = *((_DWORD *)a2 + 3) & 0x7FFFFFFF;
  *((_DWORD *)this + 3) = *((_DWORD *)this + 3) & 0x80000000 | v5;
  if ((_DWORD)v5)
  {
    v8 = 0;
    v9 = 0;
    v10 = 8 * v5;
    do
    {
      v11 = *(_QWORD *)(*((_QWORD *)a2 + 2) + v8);
      if ((*((_BYTE *)a2 + 9) & 2) != 0)
      {
        v12 = 0;
      }
      else
      {
        llvm::DataLayout::getAlignment((uint64_t)a3, *(_QWORD *)(*((_QWORD *)a2 + 2) + v8));
        v9 = *(_QWORD *)this;
      }
      v13 = v12;
      if ((v9 & ~(-1 << v12)) != 0)
      {
        *((_BYTE *)this + 9) |= 1u;
        v9 = (v9 + (1 << v12) - 1) & -(1 << v12);
        *(_QWORD *)this = v9;
      }
      if (v12 <= *((unsigned __int8 *)this + 8))
        v13 = *((_BYTE *)this + 8);
      *((_BYTE *)this + 8) = v13;
      *(_QWORD *)((char *)this + v8 + 16) = v9;
      sub_1C4768AD0((uint64_t)a3, v11);
      v15 = (unint64_t)(v14 + 7) >> 3;
      v3 = v3 & 0xFFFFFFFF00000000 | (v16 == 1);
      llvm::DataLayout::getAlignment((uint64_t)a3, v11);
      v9 = (((1 << v17) + v15 - 1) & -(1 << v17)) + *(_QWORD *)this;
      *(_QWORD *)this = v9;
      v8 += 8;
    }
    while (v10 != v8);
    v18 = *((_BYTE *)this + 8);
  }
  else
  {
    v9 = 0;
    v18 = 0;
  }
  if ((v9 & ~(-1 << v18)) != 0)
  {
    *((_BYTE *)this + 9) |= 1u;
    *(_QWORD *)this = (v9 + (1 << v18) - 1) & -(1 << v18);
  }
  return this;
}

void llvm::DataLayout::getABITypeAlign(uint64_t this, uint64_t a2)
{
  llvm::DataLayout::getAlignment(this, a2);
}

unint64_t llvm::StructLayout::getElementContainingOffset(llvm::StructLayout *this, unint64_t a2)
{
  int v2;
  unint64_t v3;
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;

  v2 = *((_DWORD *)this + 3);
  v3 = v2 & 0x7FFFFFFF;
  if ((v2 & 0x7FFFFFFF) != 0)
  {
    v4 = (char *)this + 16;
    do
    {
      v5 = v3 >> 1;
      v6 = &v4[8 * (v3 >> 1)];
      v8 = *(_QWORD *)v6;
      v7 = v6 + 8;
      v3 += ~(v3 >> 1);
      if (v8 > a2)
        v3 = v5;
      else
        v4 = v7;
    }
    while (v3);
  }
  else
  {
    v4 = (char *)this + 16;
  }
  return (unint64_t)(v4 - ((char *)this + 16) - 8) >> 3;
}

unint64_t llvm::LayoutAlignElem::get(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3, int a4)
{
  return ((unint64_t)a2 << 32) & 0xFFFF00FFFFFFFFFFLL | ((unint64_t)a3 << 40) | a1 | (a4 << 8);
}

BOOL llvm::LayoutAlignElem::operator==(_BYTE *a1, uint64_t a2)
{
  if (*(_DWORD *)a2 != *a1 || a1[4] != *(_BYTE *)(a2 + 4))
    return 0;
  return (*(_DWORD *)a2 ^ *(_DWORD *)a1) < 0x100 && a1[5] == *(_BYTE *)(a2 + 5);
}

unint64_t llvm::PointerAlignElem::getInBits(uint64_t a1, unsigned __int8 a2, unsigned __int8 a3, uint64_t a4)
{
  return ((unint64_t)a3 << 8) | (a4 << 32) | a2;
}

BOOL llvm::PointerAlignElem::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2
      && *((_DWORD *)a1 + 2) == *((_DWORD *)a2 + 2)
      && a1[1] == a2[1]
      && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1)
      && *((_DWORD *)a1 + 3) == *((_DWORD *)a2 + 3);
}

const char *llvm::DataLayout::getManglingComponent(_DWORD *a1)
{
  int v1;
  const char *v4;
  const char *v5;
  BOOL v6;

  v1 = a1[11];
  if (v1 == 4)
    return "-m:l";
  if (v1 == 5 || v1 == 8)
    return "-m:o";
  if (v1 == 1 && a1[9] == 15)
  {
    v4 = "-m:w";
    v5 = "-m:x";
    v6 = a1[6] == 41;
  }
  else
  {
    v4 = "-m:e";
    v5 = "-m:a";
    v6 = v1 == 9;
  }
  if (v6)
    return v5;
  else
    return v4;
}

void llvm::DataLayout::reset(uint64_t a1, const void *a2, unint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 240) = 0;
  v6 = *(_QWORD *)(a1 + 376);
  if (v6)
  {
    v9 = *(_QWORD *)v6;
    v10 = *(unsigned int *)(v6 + 16);
    v11 = *(_QWORD *)v6 + 16 * v10;
    if (*(_DWORD *)(v6 + 8))
    {
      if ((_DWORD)v10)
      {
        v12 = 16 * v10;
        v13 = *(_QWORD *)v6;
        while (*(_QWORD *)v13 == -4096 || *(_QWORD *)v13 == -8192)
        {
          v13 += 16;
          v12 -= 16;
          if (!v12)
            goto LABEL_35;
        }
      }
      else
      {
        v13 = *(_QWORD *)v6;
      }
    }
    else
    {
LABEL_35:
      v13 = *(_QWORD *)v6 + 16 * v10;
    }
    v14 = v9 + 16 * v10;
    if (v13 != v14)
    {
      do
      {
        free(*(void **)(v13 + 8));
        v15 = v13 + 16;
        v13 = v11;
        if (v15 != v11)
        {
          v13 = v15;
          while (*(_QWORD *)v13 == -4096 || *(_QWORD *)v13 == -8192)
          {
            v13 += 16;
            if (v13 == v11)
            {
              v13 = v11;
              break;
            }
          }
        }
      }
      while (v13 != v14);
      v9 = *(_QWORD *)v6;
    }
    MEMORY[0x1CAA32FB4](v9, 8);
    MEMORY[0x1CAA32FC0](v6, 0x1020C405AF6BDC9);
  }
  *(_QWORD *)(a1 + 376) = 0;
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  if (*(_BYTE *)(a1 + 9))
    *(_BYTE *)(a1 + 9) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  if (*(_BYTE *)(a1 + 21))
    *(_BYTE *)(a1 + 21) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v7 = &dword_1C85FD588;
  *(_DWORD *)(a1 + 392) = 0;
  do
  {
    llvm::DataLayout::setAlignment(a1, *v7, *((_BYTE *)v7 + 4), *((_BYTE *)v7 + 5), *v7 >> 8, &v19);
    if ((_QWORD)v19)
    {
      v18 = v19;
      *(_QWORD *)&v19 = 0;
      v16 = &v18;
      goto LABEL_33;
    }
    v7 += 2;
  }
  while (v7 != (int *)&jpt_1C5399A50);
  v8 = *(_QWORD *)(a1 + 232);
  if (!*(_DWORD *)(a1 + 240) || *(_DWORD *)(v8 + 8))
  {
    v19 = xmmword_1C85FD510;
    sub_1C5398E8C((unsigned int *)(a1 + 232), v8, &v19);
  }
  else
  {
    *(_WORD *)v8 = 771;
    *(_DWORD *)(v8 + 4) = 64;
    *(_DWORD *)(v8 + 12) = 64;
  }
  llvm::DataLayout::parseSpecifier(a1, a2, a3, &v19);
  if ((_QWORD)v19)
  {
    v17 = v19;
    *(_QWORD *)&v19 = 0;
    v16 = &v17;
LABEL_33:
    llvm::report_fatal_error(v16);
  }
}

uint64_t llvm::DataLayout::clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = this;
  *(_QWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 72) = 0;
  *(_DWORD *)(this + 240) = 0;
  v2 = *(_QWORD *)(this + 376);
  if (v2)
  {
    v3 = *(_QWORD *)v2;
    v4 = *(unsigned int *)(v2 + 16);
    v5 = *(_QWORD *)v2 + 16 * v4;
    if (*(_DWORD *)(v2 + 8))
    {
      if ((_DWORD)v4)
      {
        v6 = 16 * v4;
        v7 = *(_QWORD *)v2;
        while (*(_QWORD *)v7 == -4096 || *(_QWORD *)v7 == -8192)
        {
          v7 += 16;
          v6 -= 16;
          if (!v6)
            goto LABEL_20;
        }
      }
      else
      {
        v7 = *(_QWORD *)v2;
      }
    }
    else
    {
LABEL_20:
      v7 = *(_QWORD *)v2 + 16 * v4;
    }
    v8 = v3 + 16 * v4;
    if (v7 != v8)
    {
      do
      {
        free(*(void **)(v7 + 8));
        v9 = v7 + 16;
        v7 = v5;
        if (v9 != v5)
        {
          v7 = v9;
          while (*(_QWORD *)v7 == -4096 || *(_QWORD *)v7 == -8192)
          {
            v7 += 16;
            if (v7 == v5)
            {
              v7 = v5;
              break;
            }
          }
        }
      }
      while (v7 != v8);
      v3 = *(_QWORD *)v2;
    }
    MEMORY[0x1CAA32FB4](v3, 8);
    this = MEMORY[0x1CAA32FC0](v2, 0x1020C405AF6BDC9);
  }
  *(_QWORD *)(v1 + 376) = 0;
  return this;
}

void llvm::DataLayout::setAlignment(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned __int8 a3@<W2>, unsigned __int8 a4@<W3>, unsigned int a5@<W4>, _QWORD *a6@<X8>)
{
  const char *v7;
  uint64_t v9;
  void **v10;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  unsigned int v20;
  BOOL v21;
  _DWORD *v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  _WORD *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  __int16 v30;
  void *__p[2];
  char v32;
  void **v33;
  uint64_t v34[2];

  if (HIBYTE(a5))
  {
    v7 = "Invalid bit width, must be a 24bit integer";
    goto LABEL_5;
  }
  if (a4 < a3)
  {
    v7 = "Preferred alignment cannot be less than the ABI alignment";
LABEL_5:
    v29 = v7;
    v30 = 259;
    if (!atomic_load(qword_1ED836B58))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
    v9 = qword_1ED836B58[0];
    llvm::Twine::str((llvm::Twine *)&v29, __p);
    if (v32 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    v34[0] = 3;
    v34[1] = v9;
    v33 = v10;
    sub_1C5DF1730((_BYTE **)&v33, v34, a6);
    if (v32 < 0)
      operator delete(__p[0]);
    return;
  }
  v14 = *(_DWORD **)(a1 + 64);
  v12 = a1 + 64;
  v13 = v14;
  v15 = *(unsigned int *)(v12 + 8);
  v16 = v14;
  if ((_DWORD)v15)
  {
    v16 = v13;
    v17 = *(unsigned int *)(v12 + 8);
    do
    {
      v18 = v17 >> 1;
      v19 = &v16[2 * (v17 >> 1)];
      v20 = *v19;
      if (v20 < a2 || (v20 <= a2 ? (v21 = *v19 >> 8 >= a5) : (v21 = 1), !v21))
      {
        v16 = v19 + 2;
        v18 = v17 + ~v18;
      }
      v17 = v18;
    }
    while (v18);
  }
  v22 = &v13[2 * v15];
  if (v16 != v22 && (a2 == *v16 ? (v23 = *v16 >> 8 == a5) : (v23 = 0), v23))
  {
    *((_BYTE *)v16 + 4) = a3;
    *((_BYTE *)v16 + 5) = a4;
  }
  else
  {
    v24 = ((unint64_t)a3 << 32) & 0xFFFF00FFFFFFFFFFLL | ((unint64_t)a4 << 40) | a2 | (a5 << 8);
    if (v16 == v22)
    {
      if (v15 >= *(_DWORD *)(a1 + 76))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v12, a1 + 80, v15 + 1, 8);
        v13 = *(_DWORD **)(a1 + 64);
        v15 = *(unsigned int *)(a1 + 72);
      }
      *(_QWORD *)&v13[2 * v15] = v24;
      ++*(_DWORD *)(a1 + 72);
    }
    else
    {
      v25 = ((char *)v16 - (char *)v13) >> 3;
      if (v15 >= *(_DWORD *)(a1 + 76))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v12, a1 + 80, v15 + 1, 8);
        v13 = *(_DWORD **)(a1 + 64);
        v15 = *(unsigned int *)(a1 + 72);
      }
      v26 = &v13[2 * v25];
      *(_QWORD *)&v13[2 * v15] = *(_QWORD *)&v13[2 * v15 - 2];
      v27 = *(unsigned int *)(a1 + 72);
      v28 = *(_QWORD *)(a1 + 64) + 8 * v27;
      if ((_WORD *)(v28 - 8) != v26)
      {
        memmove(v26 + 4, v26, v28 - 8 - (_QWORD)v26 - 2);
        LODWORD(v27) = *(_DWORD *)(a1 + 72);
      }
      *(_DWORD *)(a1 + 72) = v27 + 1;
      v26[2] = WORD2(v24);
      *(_DWORD *)v26 = v24;
    }
  }
  *a6 = 0;
}

void llvm::DataLayout::setPointerAlignmentInBits(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned __int8 a3@<W2>, unsigned __int8 a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  __int128 v19[2];
  __int16 v20;

  if (a4 < a3)
  {
    *(_QWORD *)&v19[0] = "Preferred alignment cannot be less than the ABI alignment";
    v20 = 259;
    if (!atomic_load(qword_1ED836B58))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
    sub_1C50516B4(3, qword_1ED836B58[0], (llvm::Twine *)v19, a7);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 232);
    v8 = (unsigned int *)(a1 + 232);
    v9 = v10;
    v11 = v8[2];
    if ((_DWORD)v11)
    {
      v12 = v9;
      v13 = v8[2];
      do
      {
        v14 = v13 >> 1;
        v15 = v12 + 16 * (v13 >> 1);
        v16 = *(_DWORD *)(v15 + 8);
        v17 = v15 + 16;
        v13 += ~(v13 >> 1);
        if (v16 < a2)
          v12 = v17;
        else
          v13 = v14;
      }
      while (v13);
    }
    else
    {
      v12 = v9;
    }
    if (v12 == v9 + 16 * v11 || *(_DWORD *)(v12 + 8) != a2)
    {
      *(_QWORD *)&v19[0] = ((unint64_t)a4 << 8) | (a5 << 32) | a3;
      *((_QWORD *)&v19[0] + 1) = a2 | (unint64_t)(a6 << 32);
      sub_1C5398E8C(v8, v12, v19);
    }
    else
    {
      *(_BYTE *)v12 = a3;
      *(_BYTE *)(v12 + 1) = a4;
      *(_DWORD *)(v12 + 4) = a5;
      *(_DWORD *)(v12 + 12) = a6;
    }
    *a7 = 0;
  }
}

void llvm::DataLayout::parseSpecifier(uint64_t a1@<X0>, const void *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  size_t v5;
  __int128 *p_dst;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  __int32 v17;
  unint64_t v18;
  signed int v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  __int8 v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint8x8_t v29;
  int v30;
  __int16 v31;
  int8x8_t v32;
  unint64_t v33;
  char v34;
  uint8x8_t v35;
  unsigned int v36;
  unsigned int v37;
  int8x8_t v38;
  uint8x8_t v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  int v44;
  int v45;
  unint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  int8x8_t v50;
  unint64_t v51;
  uint8x8_t v52;
  uint64_t v53;
  unsigned int v54;
  uint8x8_t v55;
  BOOL v56;
  _BOOL8 v57;
  uint8x8_t v58;
  int v59;
  __int16 v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v72;
  void **v73;
  const char *v74;
  const char *v75;
  unint64_t v77;
  void **v79;
  int8x8_t v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  __int128 v85;
  __int128 v86;
  __int128 __dst;
  unint64_t v88;
  __int16 v89;
  void *v90[2];
  char v91;
  void **v92;
  uint64_t v93;
  unint64_t v94;

  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = a3;
  if (a3 >= 0x17)
  {
    v9 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v9 = a3 | 7;
    v10 = v9 + 1;
    p_dst = (__int128 *)operator new(v9 + 1);
    *((_QWORD *)&__dst + 1) = v5;
    v88 = v10 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v88) = a3;
  p_dst = &__dst;
  if (a3)
LABEL_8:
    memmove(p_dst, a2, v5);
  *((_BYTE *)p_dst + v5) = 0;
  v11 = (void **)(a1 + 208);
  if (*(char *)(a1 + 231) < 0)
    operator delete(*v11);
  *(_OWORD *)v11 = __dst;
  *(_QWORD *)(a1 + 224) = v88;
  if (!v5)
  {
LABEL_168:
    *a4 = 0;
    return;
  }
  v12 = 0uLL;
  v13 = &unk_1ED836000;
  while (2)
  {
    v85 = v12;
    v86 = v12;
    sub_1C5396B48(a4, (uint64_t)a2, v5, 45, (uint64_t *)&v85);
    if (*a4)
      return;
    v5 = *((_QWORD *)&v86 + 1);
    a2 = (const void *)v86;
    sub_1C5396B48(a4, v85, *((unint64_t *)&v85 + 1), 58, (uint64_t *)&v85);
    if (*a4)
      return;
    v14 = *((_QWORD *)&v85 + 1);
    if (*((_QWORD *)&v85 + 1) == 2)
    {
      v15 = (unsigned __int8 *)v85;
      if (*(_WORD *)v85 == 26990)
      {
        v16 = *((_QWORD *)&v86 + 1);
        while (1)
        {
          sub_1C5396B48(a4, v86, v16, 58, (uint64_t *)&v85);
          if (*a4)
            break;
          v80.i32[0] = 0;
          sub_1C5396C94(a4, (unsigned __int8 *)v85, *((uint64_t *)&v85 + 1), &v80);
          if (*a4)
            break;
          v17 = v80.i32[0];
          if (!v80.i32[0])
          {
            v74 = "Address space 0 can never be non-integral";
            goto LABEL_195;
          }
          v18 = *(unsigned int *)(a1 + 392);
          if (v18 >= *(unsigned int *)(a1 + 396))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 384, a1 + 400, v18 + 1, 4);
            v18 = *(unsigned int *)(a1 + 392);
          }
          *(_DWORD *)(*(_QWORD *)(a1 + 384) + 4 * v18) = v17;
          ++*(_DWORD *)(a1 + 392);
          v16 = *((_QWORD *)&v86 + 1);
          if (!*((_QWORD *)&v86 + 1))
            goto LABEL_158;
        }
        return;
      }
    }
    else
    {
      v15 = (unsigned __int8 *)v85;
    }
    v19 = (char)*v15;
    v20 = *((_QWORD *)&v85 + 1) != 0;
    if (*((_QWORD *)&v85 + 1))
      v21 = v15 + 1;
    else
      v21 = v15;
    v22 = *((_QWORD *)&v85 + 1) - v20;
    *(_QWORD *)&v85 = v21;
    *((_QWORD *)&v85 + 1) -= v20;
    if (v19 <= 96)
    {
      switch(v19)
      {
        case 'A':
          v27 = a4;
          v28 = a1 + 4;
          goto LABEL_95;
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_182;
        case 'E':
          *(_BYTE *)a1 = 1;
          goto LABEL_158;
        case 'F':
          v44 = (char)*v21;
          if (v44 == 105)
          {
            v45 = 0;
          }
          else
          {
            if (v44 != 110)
            {
              v74 = "Unknown function pointer alignment type in datalayout string";
              goto LABEL_195;
            }
            v45 = 1;
          }
          *(_DWORD *)(a1 + 24) = v45;
          v56 = v14 == v20;
          v57 = v14 != v20;
          if (!v56)
            ++v21;
          *(_QWORD *)&v85 = v21;
          *((_QWORD *)&v85 + 1) = v22 - v57;
          v80 = 0;
          sub_1C5396EE4(a4, v21, v22 - v57, (unint64_t *)&v80);
          if (*a4)
            return;
          if (v80)
          {
            v58 = (uint8x8_t)vcnt_s8(v80);
            v58.i16[0] = vaddlv_u8(v58);
            if (v58.u32[0] >= 2uLL)
              goto LABEL_177;
          }
          v59 = __clz(*(_QWORD *)&v80) ^ 0x3F | 0x100;
          if (v80)
            v60 = v59;
          else
            v60 = 0;
          *(_WORD *)(a1 + 20) = v60;
          break;
        case 'G':
          v27 = a4;
          v28 = a1 + 16;
          goto LABEL_95;
        default:
          if (v19 == 80)
          {
            v27 = a4;
            v28 = a1 + 12;
LABEL_95:
            sub_1C53970F8(v27, v21, v22, v28);
            if (*a4)
              return;
          }
          else
          {
            if (v19 != 83)
            {
LABEL_182:
              v74 = "Unknown specifier in datalayout string";
              goto LABEL_195;
            }
            v80 = 0;
            sub_1C5396EE4(a4, v21, v22, (unint64_t *)&v80);
            if (*a4)
              return;
            if (v80)
            {
              v29 = (uint8x8_t)vcnt_s8(v80);
              v29.i16[0] = vaddlv_u8(v29);
              if (v29.u32[0] >= 2uLL)
              {
LABEL_177:
                v74 = "Alignment is neither 0 nor a power of 2";
                goto LABEL_195;
              }
            }
            v30 = __clz(*(_QWORD *)&v80) ^ 0x3F | 0x100;
            if (v80)
              v31 = v30;
            else
              v31 = 0;
            *(_WORD *)(a1 + 8) = v31;
          }
          goto LABEL_158;
      }
      goto LABEL_158;
    }
    switch(v19)
    {
      case 'a':
      case 'f':
      case 'i':
      case 'v':
        v80.i32[0] = 0;
        if (v14 == v20)
        {
          v23 = 0;
          v24 = v19 == 97;
        }
        else
        {
          sub_1C5396C94(a4, v21, v22, &v80);
          if (*a4)
            return;
          v23 = v80.i32[0];
          v24 = v19 == 97;
          if (v19 == 97 && v80.i32[0])
          {
            v74 = "Sized aggregate specification in datalayout string";
            goto LABEL_195;
          }
        }
        if (!*((_QWORD *)&v86 + 1))
        {
          v74 = "Missing alignment specification in datalayout string";
          goto LABEL_195;
        }
        sub_1C5396B48(a4, v86, *((unint64_t *)&v86 + 1), 58, (uint64_t *)&v85);
        if (*a4)
          return;
        v84 = 0;
        sub_1C5396DF0(a4, (unsigned __int8 *)v85, *((uint64_t *)&v85 + 1), &v84);
        if (*a4)
          return;
        v33 = v84;
        if (v84)
          v34 = 1;
        else
          v34 = v24;
        if ((v34 & 1) == 0)
        {
          v75 = "ABI alignment specification must be >0 for non-aggregate types";
          goto LABEL_191;
        }
        if (v84 >= 0x10000)
        {
          v75 = "Invalid ABI alignment, must be a 16bit integer";
          goto LABEL_191;
        }
        v32.i32[0] = v84;
        v35 = (uint8x8_t)vcnt_s8(v32);
        v35.i16[0] = vaddlv_u8(v35);
        v36 = v35.i32[0];
        if (v84 && v35.i32[0] >= 2u)
        {
          v75 = "Invalid ABI alignment, must be a power of 2";
          goto LABEL_191;
        }
        v83 = v84;
        v37 = v84;
        if (!*((_QWORD *)&v86 + 1))
          goto LABEL_69;
        sub_1C5396B48(a4, v86, *((unint64_t *)&v86 + 1), 58, (uint64_t *)&v85);
        if (*a4)
          return;
        sub_1C5396DF0(a4, (unsigned __int8 *)v85, *((uint64_t *)&v85 + 1), &v83);
        if (*a4)
          return;
        v37 = v83;
        if (HIWORD(v83))
        {
          v75 = "Invalid preferred alignment, must be a 16bit integer";
          goto LABEL_191;
        }
        v38.i32[0] = v83;
        v39 = (uint8x8_t)vcnt_s8(v38);
        v39.i16[0] = vaddlv_u8(v39);
        v36 = v39.i32[0];
LABEL_69:
        if (v37 && v36 >= 2)
        {
          v75 = "Invalid preferred alignment, must be a power of 2";
          goto LABEL_191;
        }
        v40 = 63 - __clz(v33);
        v41 = 63 - __clz(v37);
        if ((_DWORD)v33)
          v42 = v40;
        else
          v42 = 0;
        if (v37)
          v43 = v41;
        else
          v43 = 0;
        llvm::DataLayout::setAlignment(a1, v19, v42, v43, v23, a4);
        if (*a4)
          return;
        v13 = (_QWORD *)&unk_1ED836000;
        goto LABEL_158;
      case 'e':
        *(_BYTE *)a1 = 0;
        goto LABEL_158;
      case 'm':
        if (v14 != v20)
        {
          v74 = "Unexpected trailing characters after mangling specifier in datalayout string";
          goto LABEL_195;
        }
        if (*((_QWORD *)&v86 + 1) == 1)
        {
          v47 = *(char *)v86;
          if (v47 <= 108)
          {
            if (v47 == 97)
            {
              v48 = 7;
LABEL_157:
              *(_DWORD *)(a1 + 28) = v48;
              goto LABEL_158;
            }
            if (v47 != 101)
            {
              if (v47 != 108)
                goto LABEL_194;
              v48 = 5;
              goto LABEL_157;
            }
            v61 = 1;
            goto LABEL_155;
          }
          if (v47 <= 118)
          {
            if (v47 == 109)
            {
              v48 = 6;
            }
            else
            {
              if (v47 != 111)
                goto LABEL_194;
              v48 = 2;
            }
            goto LABEL_157;
          }
          if (v47 == 119)
          {
            v61 = 3;
            goto LABEL_155;
          }
          if (v47 == 120)
          {
            v61 = 4;
LABEL_155:
            *(_DWORD *)(a1 + 28) = v61;
            goto LABEL_158;
          }
LABEL_194:
          v74 = "Unknown mangling in datalayout string";
        }
        else if (*((_QWORD *)&v86 + 1))
        {
          v74 = "Unknown mangling specifier in datalayout string";
        }
        else
        {
          v74 = "Expected mangling specifier in datalayout string";
        }
LABEL_195:
        *(_QWORD *)&__dst = v74;
        v89 = 259;
        if (!atomic_load(qword_1ED836B58))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
        v77 = v13[363];
        goto LABEL_198;
      case 'n':
        while (2)
        {
          v80.i32[0] = 0;
          sub_1C5396C94(a4, (unsigned __int8 *)v85, *((uint64_t *)&v85 + 1), &v80);
          if (*a4)
            return;
          v25 = v80.i8[0];
          if (!v80.i32[0])
          {
            v74 = "Zero width native integer type in datalayout string";
            goto LABEL_195;
          }
          v26 = *(_QWORD *)(a1 + 40);
          if ((unint64_t)(v26 + 1) > *(_QWORD *)(a1 + 48))
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod(a1 + 32, (void *)(a1 + 56), v26 + 1, 1);
            v26 = *(_QWORD *)(a1 + 40);
          }
          *(_BYTE *)(*(_QWORD *)(a1 + 32) + v26) = v25;
          ++*(_QWORD *)(a1 + 40);
          if (*((_QWORD *)&v86 + 1))
          {
            sub_1C5396B48(a4, v86, *((unint64_t *)&v86 + 1), 58, (uint64_t *)&v85);
            if (*a4)
              return;
            continue;
          }
          goto LABEL_158;
        }
      case 'p':
        v80.i32[0] = 0;
        if (v14 == v20)
        {
          v46 = 0;
        }
        else
        {
          sub_1C5396C94(a4, v21, v22, &v80);
          if (*a4)
            return;
          v46 = v80.u32[0];
          if (v80.i8[3])
          {
            v74 = "Invalid address space, must be a 24bit integer";
            goto LABEL_195;
          }
        }
        if (!*((_QWORD *)&v86 + 1))
        {
          v74 = "Missing size specification for pointer in datalayout string";
          goto LABEL_195;
        }
        sub_1C5396B48(a4, v86, *((unint64_t *)&v86 + 1), 58, (uint64_t *)&v85);
        if (*a4)
          return;
        v84 = 0;
        sub_1C5396C94(a4, (unsigned __int8 *)v85, *((uint64_t *)&v85 + 1), &v84);
        if (*a4)
          return;
        v49 = v84;
        if (!v84)
        {
          v74 = "Invalid pointer size of 0 bytes";
          goto LABEL_195;
        }
        if (!*((_QWORD *)&v86 + 1))
        {
          v74 = "Missing alignment specification for pointer in datalayout string";
          goto LABEL_195;
        }
        sub_1C5396B48(a4, v86, *((unint64_t *)&v86 + 1), 58, (uint64_t *)&v85);
        if (*a4)
          return;
        v83 = 0;
        sub_1C5396DF0(a4, (unsigned __int8 *)v85, *((uint64_t *)&v85 + 1), &v83);
        if (*a4)
          return;
        v51 = v83;
        v50.i32[0] = v83;
        v52 = (uint8x8_t)vcnt_s8(v50);
        v52.i16[0] = vaddlv_u8(v52);
        if (v52.i32[0] != 1)
        {
          v75 = "Pointer ABI alignment must be a power of 2";
          goto LABEL_191;
        }
        v81 = v83;
        v82 = v49;
        v53 = v49;
        v54 = v83;
        if (!*((_QWORD *)&v86 + 1))
          goto LABEL_134;
        sub_1C5396B48(a4, v86, *((unint64_t *)&v86 + 1), 58, (uint64_t *)&v85);
        if (*a4)
          return;
        sub_1C5396DF0(a4, (unsigned __int8 *)v85, *((uint64_t *)&v85 + 1), &v81);
        if (*a4)
          return;
        v54 = v81;
        v55 = (uint8x8_t)vcnt_s8((int8x8_t)v81);
        v55.i16[0] = vaddlv_u8(v55);
        if (v55.i32[0] == 1)
        {
          if (*((_QWORD *)&v86 + 1))
          {
            sub_1C5396B48(a4, v86, *((unint64_t *)&v86 + 1), 58, (uint64_t *)&v85);
            if (*a4)
              return;
            sub_1C5396C94(a4, (unsigned __int8 *)v85, *((uint64_t *)&v85 + 1), &v82);
            if (*a4)
              return;
            v53 = v82;
            if (!v82)
            {
              v75 = "Invalid index size of 0 bytes";
              goto LABEL_191;
            }
          }
          else
          {
            v53 = v49;
          }
LABEL_134:
          v62 = (63 - __clz(v51));
          v63 = (63 - __clz(v54));
          if (!(_DWORD)v51)
            v62 = 0;
          if (!v54)
            v63 = 0;
          if (v63 < v62)
          {
            *(_QWORD *)&__dst = "Preferred alignment cannot be less than the ABI alignment";
            v89 = 259;
            if (!atomic_load(qword_1ED836B58))
              llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
            v72 = qword_1ED836B58[0];
            llvm::Twine::str((llvm::Twine *)&__dst, v90);
            v73 = v90;
            if (v91 < 0)
              v73 = (void **)v90[0];
            v93 = 3;
            v94 = v72;
            v92 = v73;
            sub_1C5DF1730((_BYTE **)&v92, &v93, a4);
            if (v91 < 0)
              operator delete(v90[0]);
            if (*a4)
              return;
          }
          else
          {
            v64 = *(unsigned int *)(a1 + 240);
            if ((_DWORD)v64)
            {
              v65 = *(_QWORD *)(a1 + 232);
              v66 = *(unsigned int *)(a1 + 240);
              do
              {
                v67 = v66 >> 1;
                v68 = v65 + 16 * (v66 >> 1);
                v69 = *(unsigned int *)(v68 + 8);
                v70 = v68 + 16;
                v66 += ~(v66 >> 1);
                if (v69 < v46)
                  v65 = v70;
                else
                  v66 = v67;
              }
              while (v66);
            }
            else
            {
              v65 = *(_QWORD *)(a1 + 232);
            }
            if (v65 == *(_QWORD *)(a1 + 232) + 16 * v64 || *(_DWORD *)(v65 + 8) != v46)
            {
              *(_QWORD *)&__dst = (v49 << 32) | (v63 << 8) | v62;
              *((_QWORD *)&__dst + 1) = v46 | (v53 << 32);
              sub_1C5398E8C((unsigned int *)(a1 + 232), v65, &__dst);
            }
            else
            {
              *(_BYTE *)v65 = v62;
              *(_BYTE *)(v65 + 1) = v63;
              *(_DWORD *)(v65 + 4) = v49;
              *(_DWORD *)(v65 + 12) = v53;
            }
            *a4 = 0;
          }
          v13 = (_QWORD *)&unk_1ED836000;
LABEL_158:
          v12 = 0uLL;
          if (!v5)
            goto LABEL_168;
          continue;
        }
        v75 = "Pointer preferred alignment must be a power of 2";
LABEL_191:
        *(_QWORD *)&__dst = v75;
        v89 = 259;
        if (!atomic_load(qword_1ED836B58))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
        v77 = qword_1ED836B58[0];
LABEL_198:
        llvm::Twine::str((llvm::Twine *)&__dst, v90);
        if (v91 >= 0)
          v79 = v90;
        else
          v79 = (void **)v90[0];
        v93 = 3;
        v94 = v77;
        v92 = v79;
        sub_1C5DF1730((_BYTE **)&v92, &v93, a4);
        if (v91 < 0)
          operator delete(v90[0]);
        return;
      case 's':
        goto LABEL_158;
      default:
        goto LABEL_182;
    }
  }
}

void llvm::DataLayout::parse(const void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  __int16 v9;
  __int16 v10;
  _QWORD *v11;
  __int128 v12;
  _QWORD v13[3];
  _BYTE v14[152];
  _QWORD *v15;
  uint64_t v16;
  _QWORD v17[19];
  _QWORD v18[5];

  v18[4] = *MEMORY[0x1E0C80C00];
  v9 = 0;
  v10 = 0;
  v11 = v13;
  v12 = xmmword_1C6464ED0;
  v13[1] = v14;
  v13[2] = 0x1000000000;
  memset(&v14[128], 0, 24);
  v15 = v17;
  v16 = 0x800000000;
  v17[16] = 0;
  v17[17] = v18;
  v17[18] = 0x800000000;
  llvm::DataLayout::reset((uint64_t)v8, "", 0);
  llvm::DataLayout::parseSpecifier((uint64_t)v8, a1, a2, &v7);
  v6 = v7;
  if (v7)
  {
    *(_BYTE *)(a3 + 432) |= 1u;
    *(_QWORD *)a3 = v6;
  }
  else
  {
    *(_BYTE *)(a3 + 432) &= ~1u;
    *(_WORD *)(a3 + 8) = 0;
    *(_WORD *)(a3 + 20) = 0;
    *(_QWORD *)(a3 + 32) = a3 + 56;
    *(_OWORD *)(a3 + 40) = xmmword_1C6464ED0;
    *(_QWORD *)(a3 + 64) = a3 + 80;
    *(_QWORD *)(a3 + 72) = 0x1000000000;
    *(_QWORD *)(a3 + 208) = 0;
    *(_QWORD *)(a3 + 216) = 0;
    *(_QWORD *)(a3 + 224) = 0;
    *(_QWORD *)(a3 + 232) = a3 + 248;
    *(_QWORD *)(a3 + 240) = 0x800000000;
    *(_QWORD *)(a3 + 376) = 0;
    *(_QWORD *)(a3 + 384) = a3 + 400;
    *(_QWORD *)(a3 + 392) = 0x800000000;
    sub_1C48815D8(a3, (uint64_t)v8);
  }
  llvm::DataLayout::~DataLayout((llvm::DataLayout *)v8);
}

void sub_1C5396B48(_QWORD *a1, uint64_t a2, unint64_t a3, char a4, uint64_t *a5)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const char *v12;
  uint64_t v14;
  void **v15;
  char v16[32];
  __int16 v17;
  uint64_t v18[2];
  void *__p[2];
  char v20;
  void **v21;
  uint64_t v22[2];

  v18[0] = a2;
  v18[1] = a3;
  v16[0] = a4;
  v9 = llvm::StringRef::find(v18, v16, 1uLL, 0);
  if (v9 == -1)
  {
    *a5 = a2;
    a5[1] = a3;
    a5[2] = 0;
    a5[3] = 0;
    goto LABEL_21;
  }
  if (a3 >= v9)
    v10 = v9;
  else
    v10 = a3;
  if (a3 >= v9 + 1)
    v11 = v9 + 1;
  else
    v11 = a3;
  *a5 = a2;
  a5[1] = v10;
  a5[2] = a2 + v11;
  a5[3] = a3 - v11;
  if (a3 <= v9 + 1)
  {
    if (a3 > v9)
    {
      v12 = "Trailing separator in datalayout string";
      goto LABEL_14;
    }
LABEL_21:
    *a1 = 0;
    return;
  }
  if (v10)
    goto LABEL_21;
  v12 = "Expected token before separator in datalayout string";
LABEL_14:
  *(_QWORD *)v16 = v12;
  v17 = 259;
  if (!atomic_load(qword_1ED836B58))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
  v14 = qword_1ED836B58[0];
  llvm::Twine::str((llvm::Twine *)v16, __p);
  if (v20 >= 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  v22[0] = 3;
  v22[1] = v14;
  v21 = v15;
  sub_1C5DF1730((_BYTE **)&v21, v22, a1);
  if (v20 < 0)
    operator delete(__p[0]);
}

void sub_1C5396C94(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v11;
  void **v12;
  const char *v13;
  __int16 v14;
  void *__p[2];
  char v16;
  void **v17;
  uint64_t v18[2];

  if (a3)
  {
    v5 = 0;
    while (1)
    {
      v6 = *a2;
      if ((v6 - 48) >= 0xA)
      {
        if ((v6 - 97) >= 0x1A)
        {
          if ((v6 - 65) > 0x19)
            break;
          v7 = -55;
        }
        else
        {
          v7 = -87;
        }
      }
      else
      {
        v7 = -48;
      }
      v8 = v7 + v6;
      if (v8 > 9)
        break;
      v9 = 10 * v5 + v8;
      if (v5 > v9 / 0xA)
        break;
      ++a2;
      v5 = v9;
      if (!--a3)
      {
        if (HIDWORD(v9))
          break;
        *a4 = v9;
        *a1 = 0;
        return;
      }
    }
  }
  v13 = "not a number, or does not fit in an unsigned int";
  v14 = 259;
  if (!atomic_load(qword_1ED836B58))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
  v11 = qword_1ED836B58[0];
  llvm::Twine::str((llvm::Twine *)&v13, __p);
  if (v16 >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  v18[0] = 3;
  v18[1] = v11;
  v17 = v12;
  sub_1C5DF1730((_BYTE **)&v17, v18, a1);
  if (v16 < 0)
    operator delete(__p[0]);
}

void sub_1C5396DF0(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v7;
  void **v8;
  const char *v9;
  __int16 v10;
  void *__p[2];
  char v12;
  void **v13;
  uint64_t v14[2];

  sub_1C5396C94(a1, a2, a3, a4);
  if (!*a1)
  {
    if ((*a4 & 7) != 0)
    {
      v9 = "number of bits must be a byte width multiple";
      v10 = 259;
      if (!atomic_load(qword_1ED836B58))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
      v7 = qword_1ED836B58[0];
      llvm::Twine::str((llvm::Twine *)&v9, __p);
      if (v12 >= 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      v14[0] = 3;
      v14[1] = v7;
      v13 = v8;
      sub_1C5DF1730((_BYTE **)&v13, v14, a1);
      if (v12 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *a4 >>= 3;
      *a1 = 0;
    }
  }
}

void sub_1C5396EE4(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, unint64_t *a4)
{
  unint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v12;
  void **v13;
  unint64_t v15;
  void **v16;
  _QWORD v17[4];
  __int16 v18;
  void *__p[2];
  char v20;
  void **v21;
  uint64_t v22;
  unint64_t v23;

  if (a3)
  {
    v6 = 0;
    while (1)
    {
      v7 = *a2;
      if ((v7 - 48) >= 0xA)
      {
        if ((v7 - 97) >= 0x1A)
        {
          if ((v7 - 65) > 0x19)
            break;
          v8 = -55;
        }
        else
        {
          v8 = -87;
        }
      }
      else
      {
        v8 = -48;
      }
      v9 = v8 + v7;
      if (v9 > 9)
        break;
      v10 = 10 * v6 + v9;
      if (v6 > v10 / 0xA)
        break;
      ++a2;
      v6 = v10;
      if (!--a3)
      {
        *a4 = v10;
        *a1 = 0;
        goto LABEL_13;
      }
    }
  }
  v17[0] = "not a number, or does not fit in an unsigned int";
  v18 = 259;
  if (!atomic_load(qword_1ED836B58))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
  v15 = qword_1ED836B58[0];
  llvm::Twine::str((llvm::Twine *)v17, __p);
  if (v20 >= 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  v22 = 3;
  v23 = v15;
  v21 = v16;
  sub_1C5DF1730((_BYTE **)&v21, &v22, a1);
  if (v20 < 0)
    operator delete(__p[0]);
  if (!*a1)
  {
    v10 = *a4;
LABEL_13:
    if ((v10 & 7) != 0)
    {
      v17[0] = "number of bits must be a byte width multiple";
      v18 = 259;
      if (!atomic_load(qword_1ED836B58))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
      v12 = qword_1ED836B58[0];
      llvm::Twine::str((llvm::Twine *)v17, __p);
      if (v20 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      v22 = 3;
      v23 = v12;
      v21 = v13;
      sub_1C5DF1730((_BYTE **)&v21, &v22, a1);
      if (v20 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *a4 = v10 >> 3;
      *a1 = 0;
    }
  }
}

void sub_1C53970F8(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  void **v8;
  const char *v9;
  __int16 v10;
  void *__p[2];
  char v12;
  void **v13;
  uint64_t v14[2];

  sub_1C5396C94(a1, a2, a3, (_DWORD *)a4);
  if (!*a1)
  {
    if (*(_BYTE *)(a4 + 3))
    {
      v9 = "Invalid address space, must be a 24-bit integer";
      v10 = 259;
      if (!atomic_load(qword_1ED836B58))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
      v7 = qword_1ED836B58[0];
      llvm::Twine::str((llvm::Twine *)&v9, __p);
      if (v12 >= 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      v14[0] = 3;
      v14[1] = v7;
      v13 = v8;
      sub_1C5DF1730((_BYTE **)&v13, v14, a1);
      if (v12 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *a1 = 0;
    }
  }
}

llvm::DataLayout *llvm::DataLayout::DataLayout(llvm::DataLayout *this, const llvm::Module *a2)
{
  *((_WORD *)this + 4) = 0;
  *((_WORD *)this + 10) = 0;
  *((_QWORD *)this + 4) = (char *)this + 56;
  *(_OWORD *)((char *)this + 40) = xmmword_1C6464ED0;
  *((_QWORD *)this + 8) = (char *)this + 80;
  *((_QWORD *)this + 9) = 0x1000000000;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = (char *)this + 248;
  *((_QWORD *)this + 30) = 0x800000000;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = (char *)this + 400;
  *((_QWORD *)this + 49) = 0x800000000;
  sub_1C48815D8((uint64_t)this, (uint64_t)a2 + 272);
  return this;
}

uint64_t llvm::DataLayout::init(llvm::DataLayout *this, const llvm::Module *a2)
{
  return sub_1C48815D8((uint64_t)this, (uint64_t)a2 + 272);
}

uint64_t llvm::DataLayout::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v4;
  BOOL v5;
  size_t v6;

  if (*a1 != *a2 || *((_DWORD *)a1 + 1) != *((_DWORD *)a2 + 1))
    return 0;
  v4 = a2[9];
  if (a1[9])
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
  {
    if ((a1[9] == 0) == (v4 != 0))
      return 0;
  }
  else if (a1[8] != a2[8])
  {
    return 0;
  }
  if (*((_DWORD *)a1 + 3) != *((_DWORD *)a2 + 3) || *((_DWORD *)a1 + 4) != *((_DWORD *)a2 + 4))
    return 0;
  if (a1[21] && a2[21])
  {
    if (a1[20] != a2[20])
      return 0;
  }
  else if ((a1[21] == 0) == (a2[21] != 0))
  {
    return 0;
  }
  if (*((_DWORD *)a1 + 6) == *((_DWORD *)a2 + 6) && *((_DWORD *)a1 + 7) == *((_DWORD *)a2 + 7))
  {
    v6 = *((_QWORD *)a1 + 5);
    if (v6 == *((_QWORD *)a2 + 5)
      && !memcmp(*((const void **)a1 + 4), *((const void **)a2 + 4), v6)
      && sub_1C53973A4((uint64_t *)a1 + 8, (uint64_t *)a2 + 8))
    {
      return sub_1C539741C((unsigned __int8 **)a1 + 29, (unsigned __int8 **)a2 + 29);
    }
  }
  return 0;
}

uint64_t sub_1C53973A4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2 == *((_DWORD *)a2 + 2))
  {
    if (!(_DWORD)v2)
      return 1;
    v3 = *a1;
    v4 = *a1 + 8 * v2;
    for (i = *a2;
          *(_DWORD *)i == *(_BYTE *)v3 && *(unsigned __int8 *)(v3 + 4) == *(unsigned __int8 *)(i + 4);
          i += 8)
    {
      if ((*(_DWORD *)i ^ *(_DWORD *)v3) > 0xFF
        || *(unsigned __int8 *)(v3 + 5) != *(unsigned __int8 *)(i + 5))
      {
        break;
      }
      v3 += 8;
      if (v3 == v4)
        return 1;
    }
  }
  return 0;
}

uint64_t sub_1C539741C(unsigned __int8 **a1, unsigned __int8 **a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned __int8 *i;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2 == *((_DWORD *)a2 + 2))
  {
    if (!(_DWORD)v2)
      return 1;
    v3 = *a1;
    v4 = (uint64_t)&(*a1)[16 * v2];
    for (i = *a2;
          *v3 == *i
       && *((_DWORD *)v3 + 2) == *((_DWORD *)i + 2)
       && v3[1] == i[1]
       && *((_DWORD *)v3 + 1) == *((_DWORD *)i + 1)
       && *((_DWORD *)v3 + 3) == *((_DWORD *)i + 3);
          i += 16)
    {
      v3 += 16;
      if (v3 == (unsigned __int8 *)v4)
        return 1;
    }
  }
  return 0;
}

_DWORD *llvm::DataLayout::findAlignmentLowerBound(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _DWORD *result;
  unint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  unsigned int v8;
  BOOL v9;

  result = *(_DWORD **)(a1 + 64);
  v5 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v5)
  {
    do
    {
      v6 = v5 >> 1;
      v7 = &result[2 * (v5 >> 1)];
      v8 = *v7;
      if (v8 < a2 || (v8 <= a2 ? (v9 = *v7 >> 8 >= a3) : (v9 = 1), !v9))
      {
        result = v7 + 2;
        v6 = v5 + ~v6;
      }
      v5 = v6;
    }
    while (v6);
  }
  return result;
}

uint64_t llvm::DataLayout::getPointerAlignElem(llvm::DataLayout *this, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 29);
  if (!a2)
    return v2;
  v3 = *((unsigned int *)this + 60);
  result = *((_QWORD *)this + 29);
  if ((_DWORD)v3)
  {
    result = v2;
    v5 = v3;
    do
    {
      v6 = v5 >> 1;
      v7 = result + 16 * (v5 >> 1);
      v8 = *(_DWORD *)(v7 + 8);
      v9 = v7 + 16;
      v5 += ~(v5 >> 1);
      if (v8 < a2)
        result = v9;
      else
        v5 = v6;
    }
    while (v5);
  }
  if (result == v2 + 16 * v3 || *(_DWORD *)(result + 8) != a2)
    return v2;
  return result;
}

uint64_t llvm::DataLayout::getIntegerAlignment(llvm::DataLayout *this, unsigned int a2, int a3)
{
  uint64_t v3;
  _BYTE *v4;
  unint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;

  v3 = *((unsigned int *)this + 18);
  if ((_DWORD)v3)
  {
    v4 = (_BYTE *)*((_QWORD *)this + 8);
    v5 = *((unsigned int *)this + 18);
    do
    {
      v6 = v5 >> 1;
      v7 = &v4[8 * (v5 >> 1)];
      v8 = *v7;
      if (v8 < 0x69 || (v8 == 105 ? (v9 = *v7 >> 8 >= a2) : (v9 = 1), !v9))
      {
        v4 = v7 + 2;
        v6 = v5 + ~v6;
      }
      v5 = v6;
    }
    while (v6);
  }
  else
  {
    v4 = (_BYTE *)*((_QWORD *)this + 8);
  }
  if (v4 == (_BYTE *)(*((_QWORD *)this + 8) + 8 * v3) || *v4 != 105)
    v4 -= 8;
  v10 = 4;
  if (!a3)
    v10 = 5;
  return v4[v10];
}

void llvm::DataLayout::~DataLayout(llvm::DataLayout *this)
{
  uint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_DWORD *)this + 60) = 0;
  v2 = *((_QWORD *)this + 47);
  if (v2)
  {
    v7 = *(_QWORD *)v2;
    v8 = *(unsigned int *)(v2 + 16);
    v9 = *(_QWORD *)v2 + 16 * v8;
    if (*(_DWORD *)(v2 + 8))
    {
      if ((_DWORD)v8)
      {
        v10 = 16 * v8;
        v11 = *(_QWORD *)v2;
        while (*(_QWORD *)v11 == -4096 || *(_QWORD *)v11 == -8192)
        {
          v11 += 16;
          v10 -= 16;
          if (!v10)
            goto LABEL_30;
        }
      }
      else
      {
        v11 = *(_QWORD *)v2;
      }
    }
    else
    {
LABEL_30:
      v11 = *(_QWORD *)v2 + 16 * v8;
    }
    v12 = v7 + 16 * v8;
    if (v11 != v12)
    {
      do
      {
        free(*(void **)(v11 + 8));
        v13 = v11 + 16;
        v11 = v9;
        if (v13 != v9)
        {
          v11 = v13;
          while (*(_QWORD *)v11 == -4096 || *(_QWORD *)v11 == -8192)
          {
            v11 += 16;
            if (v11 == v9)
            {
              v11 = v9;
              break;
            }
          }
        }
      }
      while (v11 != v12);
      v7 = *(_QWORD *)v2;
    }
    MEMORY[0x1CAA32FB4](v7, 8);
    MEMORY[0x1CAA32FC0](v2, 0x1020C405AF6BDC9);
  }
  *((_QWORD *)this + 47) = 0;
  v3 = (char *)*((_QWORD *)this + 48);
  if (v3 != (char *)this + 400)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 29);
  if (v4 != (char *)this + 248)
    free(v4);
  if (*((char *)this + 231) < 0)
    operator delete(*((void **)this + 26));
  v5 = (char *)*((_QWORD *)this + 8);
  if (v5 != (char *)this + 80)
    free(v5);
  v6 = (char *)*((_QWORD *)this + 4);
  if (v6 != (char *)this + 56)
    free(v6);
}

llvm::StructLayout *llvm::DataLayout::getStructLayout(llvm::DataLayout *this, llvm::StructType *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  llvm::StructType **v9;
  llvm::StructType *v10;
  llvm::StructLayout *result;
  llvm::StructType **v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  llvm::StructLayout *v16;
  llvm::StructType **v17;
  llvm::StructType *v18;

  v4 = *((_QWORD *)this + 47);
  if (v4)
  {
    v5 = *(_QWORD *)v4;
    v6 = *(_DWORD *)(v4 + 16);
    v18 = a2;
    if (v6)
    {
      v7 = v6 - 1;
      v8 = v7 & ((a2 >> 4) ^ (a2 >> 9));
      v9 = (llvm::StructType **)(v5 + 16 * v8);
      v10 = *v9;
      if (*v9 == a2)
        goto LABEL_4;
      v12 = 0;
      v13 = 1;
      while (v10 != (llvm::StructType *)-4096)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v10 == (llvm::StructType *)-8192;
        if (v14)
          v12 = v9;
        v15 = v8 + v13++;
        v8 = v15 & v7;
        v9 = (llvm::StructType **)(v5 + 16 * v8);
        v10 = *v9;
        if (*v9 == a2)
          goto LABEL_4;
      }
      if (v12)
        v17 = v12;
      else
        v17 = v9;
    }
    else
    {
      v17 = 0;
    }
  }
  else
  {
    v4 = operator new();
    v17 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)v4 = 0;
    *((_QWORD *)this + 47) = v4;
    v18 = a2;
  }
  v9 = (llvm::StructType **)sub_1C5398D5C(v4, (uint64_t)&v18, (uint64_t *)&v18, v17);
  *v9 = v18;
  v9[1] = 0;
LABEL_4:
  result = v9[1];
  if (!result)
  {
    v16 = (llvm::StructLayout *)malloc_type_malloc(8 * *((unsigned int *)a2 + 3) + 16, 0x4065EBACuLL);
    if (!v16)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v9[1] = v16;
    return llvm::StructLayout::StructLayout(v16, a2, this);
  }
  return result;
}

uint64_t llvm::DataLayout::getPointerABIAlignment(llvm::DataLayout *this, unsigned int a2)
{
  uint64_t v2;
  _DWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  unsigned int v7;
  _DWORD *v8;

  if (!a2)
    goto LABEL_10;
  v2 = *((unsigned int *)this + 60);
  v3 = (_DWORD *)*((_QWORD *)this + 29);
  if ((_DWORD)v2)
  {
    v3 = (_DWORD *)*((_QWORD *)this + 29);
    v4 = *((unsigned int *)this + 60);
    do
    {
      v5 = v4 >> 1;
      v6 = &v3[4 * (v4 >> 1)];
      v7 = v6[2];
      v8 = v6 + 4;
      v4 += ~(v4 >> 1);
      if (v7 < a2)
        v3 = v8;
      else
        v4 = v5;
    }
    while (v4);
  }
  if (v3 == (_DWORD *)(*((_QWORD *)this + 29) + 16 * v2) || v3[2] != a2)
LABEL_10:
    v3 = (_DWORD *)*((_QWORD *)this + 29);
  return *(unsigned __int8 *)v3;
}

uint64_t llvm::DataLayout::getPointerPrefAlignment(llvm::DataLayout *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    goto LABEL_10;
  v2 = *((unsigned int *)this + 60);
  v3 = *((_QWORD *)this + 29);
  if ((_DWORD)v2)
  {
    v3 = *((_QWORD *)this + 29);
    v4 = *((unsigned int *)this + 60);
    do
    {
      v5 = v4 >> 1;
      v6 = v3 + 16 * (v4 >> 1);
      v7 = *(_DWORD *)(v6 + 8);
      v8 = v6 + 16;
      v4 += ~(v4 >> 1);
      if (v7 < a2)
        v3 = v8;
      else
        v4 = v5;
    }
    while (v4);
  }
  if (v3 == *((_QWORD *)this + 29) + 16 * v2 || *(_DWORD *)(v3 + 8) != a2)
LABEL_10:
    v3 = *((_QWORD *)this + 29);
  return *(unsigned __int8 *)(v3 + 1);
}

unint64_t llvm::DataLayout::getPointerSize(llvm::DataLayout *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    goto LABEL_10;
  v2 = *((unsigned int *)this + 60);
  v3 = *((_QWORD *)this + 29);
  if ((_DWORD)v2)
  {
    v3 = *((_QWORD *)this + 29);
    v4 = *((unsigned int *)this + 60);
    do
    {
      v5 = v4 >> 1;
      v6 = v3 + 16 * (v4 >> 1);
      v7 = *(_DWORD *)(v6 + 8);
      v8 = v6 + 16;
      v4 += ~(v4 >> 1);
      if (v7 < a2)
        v3 = v8;
      else
        v4 = v5;
    }
    while (v4);
  }
  if (v3 == *((_QWORD *)this + 29) + 16 * v2 || *(_DWORD *)(v3 + 8) != a2)
LABEL_10:
    v3 = *((_QWORD *)this + 29);
  return ((unint64_t)*(unsigned int *)(v3 + 4) + 7) >> 3;
}

uint64_t llvm::DataLayout::getMaxIndexSize(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unint64_t v7;

  v1 = *(unsigned int *)(this + 240);
  if (!(_DWORD)v1)
    return 0;
  v2 = this;
  LODWORD(this) = 0;
  v3 = *(_QWORD *)(v2 + 232);
  v4 = 16 * v1;
  v5 = (unsigned int *)(v3 + 4);
  do
  {
    v6 = *v5;
    v5 += 4;
    v7 = ((unint64_t)v6 + 7) >> 3;
    if (this <= v7)
      this = v7;
    else
      this = this;
    v4 -= 16;
  }
  while (v4);
  return this;
}

uint64_t llvm::DataLayout::getPointerTypeSizeInBits(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  v2 = *(_DWORD *)(a2 + 8);
  if ((v2 & 0xFE) == 0x12)
    v2 = *(_DWORD *)(**(_QWORD **)(a2 + 16) + 8);
  if (v2 < 0x100)
    goto LABEL_12;
  v3 = v2 >> 8;
  v4 = *(unsigned int *)(a1 + 240);
  v5 = *(_QWORD *)(a1 + 232);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a1 + 232);
    v6 = *(unsigned int *)(a1 + 240);
    do
    {
      v7 = v6 >> 1;
      v8 = v5 + 16 * (v6 >> 1);
      v9 = *(_DWORD *)(v8 + 8);
      v10 = v8 + 16;
      v6 += ~(v6 >> 1);
      if (v9 < v3)
        v5 = v10;
      else
        v6 = v7;
    }
    while (v6);
  }
  if (v5 == *(_QWORD *)(a1 + 232) + 16 * v4 || *(_DWORD *)(v5 + 8) != v3)
LABEL_12:
    v5 = *(_QWORD *)(a1 + 232);
  return *(unsigned int *)(v5 + 4);
}

unint64_t llvm::DataLayout::getIndexSize(llvm::DataLayout *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    goto LABEL_10;
  v2 = *((unsigned int *)this + 60);
  v3 = *((_QWORD *)this + 29);
  if ((_DWORD)v2)
  {
    v3 = *((_QWORD *)this + 29);
    v4 = *((unsigned int *)this + 60);
    do
    {
      v5 = v4 >> 1;
      v6 = v3 + 16 * (v4 >> 1);
      v7 = *(_DWORD *)(v6 + 8);
      v8 = v6 + 16;
      v4 += ~(v4 >> 1);
      if (v7 < a2)
        v3 = v8;
      else
        v4 = v5;
    }
    while (v4);
  }
  if (v3 == *((_QWORD *)this + 29) + 16 * v2 || *(_DWORD *)(v3 + 8) != a2)
LABEL_10:
    v3 = *((_QWORD *)this + 29);
  return ((unint64_t)*(unsigned int *)(v3 + 12) + 7) >> 3;
}

uint64_t llvm::DataLayout::getIndexTypeSizeInBits(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  v2 = *(_DWORD *)(a2 + 8);
  if ((v2 & 0xFE) == 0x12)
    v2 = *(_DWORD *)(**(_QWORD **)(a2 + 16) + 8);
  if (v2 < 0x100)
    goto LABEL_12;
  v3 = v2 >> 8;
  v4 = *(unsigned int *)(a1 + 240);
  v5 = *(_QWORD *)(a1 + 232);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a1 + 232);
    v6 = *(unsigned int *)(a1 + 240);
    do
    {
      v7 = v6 >> 1;
      v8 = v5 + 16 * (v6 >> 1);
      v9 = *(_DWORD *)(v8 + 8);
      v10 = v8 + 16;
      v6 += ~(v6 >> 1);
      if (v9 < v3)
        v5 = v10;
      else
        v6 = v7;
    }
    while (v6);
  }
  if (v5 == *(_QWORD *)(a1 + 232) + 16 * v4 || *(_DWORD *)(v5 + 8) != v3)
LABEL_12:
    v5 = *(_QWORD *)(a1 + 232);
  return *(unsigned int *)(v5 + 12);
}

void llvm::DataLayout::getAlignment(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

void sub_1C5397C14()
{
  JUMPOUT(0x1C5397BFCLL);
}

void sub_1C5397C1C()
{
  llvm::TargetExtType *v0;

  llvm::TargetExtType::getLayoutType(v0);
  JUMPOUT(0x1C5397BFCLL);
}

uint64_t sub_1C5397C2C()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  _DWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  unsigned int v9;
  BOOL v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  sub_1C4768AD0(v1, v2);
  v4 = *(unsigned int *)(v1 + 72);
  if ((_DWORD)v4)
  {
    v5 = *(_DWORD **)(v1 + 64);
    v6 = *(unsigned int *)(v1 + 72);
    do
    {
      v7 = v6 >> 1;
      v8 = &v5[2 * (v6 >> 1)];
      v9 = *v8;
      if (v9 < 0x66 || (v9 == 102 ? (v10 = *v8 >> 8 >= v3) : (v10 = 1), !v10))
      {
        v5 = v8 + 2;
        v7 = v6 + ~v7;
      }
      v6 = v7;
    }
    while (v7);
  }
  else
  {
    v5 = *(_DWORD **)(v1 + 64);
  }
  if (v5 != (_DWORD *)(*(_QWORD *)(v1 + 64) + 8 * v4)
    && (*v5 == 102 ? (v11 = *v5 >> 8 == v3) : (v11 = 0), v11))
  {
    v15 = 4;
    if (!v0)
      v15 = 5;
    return *((unsigned __int8 *)v5 + v15);
  }
  else
  {
    v12 = v3 >> 3;
    if (v3 >> 3)
    {
      v13 = (v12 - 1) | ((v12 - 1) >> 1) | (((v12 - 1) | ((v12 - 1) >> 1)) >> 2);
      v14 = v13 | (v13 >> 4) | ((v13 | (v13 >> 4)) >> 8);
      v12 = (v14 | (v14 >> 16)) + 1;
    }
    return 63 - __clz(v12);
  }
}

void sub_1C5397DD0()
{
  unsigned int v0;
  int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;

  v3 = v0 >> 8;
  if (v1)
  {
    if (v0 >= 0x100 && *(_DWORD *)(v2 + 240))
    {
      v4 = *(_QWORD *)(v2 + 232);
      v5 = *(unsigned int *)(v2 + 240);
      do
      {
        v6 = v5 >> 1;
        v7 = v4 + 16 * (v5 >> 1);
        v8 = *(_DWORD *)(v7 + 8);
        v9 = v7 + 16;
        v5 += ~(v5 >> 1);
        if (v8 < v3)
          v4 = v9;
        else
          v5 = v6;
      }
      while (v5);
    }
  }
  else if (v0 >= 0x100 && *(_DWORD *)(v2 + 240))
  {
    v10 = *(_QWORD *)(v2 + 232);
    v11 = *(unsigned int *)(v2 + 240);
    do
    {
      v12 = v11 >> 1;
      v13 = v10 + 16 * (v11 >> 1);
      v14 = *(_DWORD *)(v13 + 8);
      v15 = v13 + 16;
      v11 += ~(v11 >> 1);
      if (v14 < v3)
        v10 = v15;
      else
        v11 = v12;
    }
    while (v11);
  }
  JUMPOUT(0x1C5397DBCLL);
}

uint64_t llvm::DataLayout::getABITypeAlignment(uint64_t a1, uint64_t a2)
{
  char v2;

  llvm::DataLayout::getAlignment(a1, a2);
  return 1 << v2;
}

uint64_t llvm::DataLayout::getPrefTypeAlignment(uint64_t a1, uint64_t a2)
{
  char v2;

  llvm::DataLayout::getAlignment(a1, a2);
  return 1 << v2;
}

void llvm::DataLayout::getPrefTypeAlign(uint64_t a1, uint64_t a2)
{
  llvm::DataLayout::getAlignment(a1, a2);
}

_QWORD *llvm::DataLayout::getIntPtrType(llvm::DataLayout *this, llvm::LLVMContext *a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  _QWORD *result;
  _DWORD *v13;
  int v14;
  int v15;

  if (!a3)
    goto LABEL_10;
  v4 = *((unsigned int *)this + 60);
  v5 = *((_QWORD *)this + 29);
  if ((_DWORD)v4)
  {
    v5 = *((_QWORD *)this + 29);
    v6 = *((unsigned int *)this + 60);
    do
    {
      v7 = v6 >> 1;
      v8 = v5 + 16 * (v6 >> 1);
      v9 = *(_DWORD *)(v8 + 8);
      v10 = v8 + 16;
      v6 += ~(v6 >> 1);
      if (v9 < a3)
        v5 = v10;
      else
        v6 = v7;
    }
    while (v6);
  }
  if (v5 == *((_QWORD *)this + 29) + 16 * v4 || *(_DWORD *)(v5 + 8) != a3)
LABEL_10:
    v5 = *((_QWORD *)this + 29);
  v11 = *(_DWORD *)(v5 + 4);
  v15 = v11;
  if (v11 <= 63)
  {
    if (v11 <= 31)
    {
      switch(v11)
      {
        case 16:
          return (_QWORD *)(*(_QWORD *)a2 + 1936);
        case 8:
          return (_QWORD *)(*(_QWORD *)a2 + 1912);
        case 1:
          return (_QWORD *)(*(_QWORD *)a2 + 1888);
      }
    }
    else if (v11 == 32)
    {
      return (_QWORD *)(*(_QWORD *)a2 + 1960);
    }
  }
  else
  {
    if (v11 == 64)
      return (_QWORD *)(*(_QWORD *)a2 + 1984);
    if (v11 == 128)
      return (_QWORD *)(*(_QWORD *)a2 + 2008);
  }
  v13 = sub_1C5270984(*(_QWORD *)a2 + 2168, &v15);
  result = (_QWORD *)*((_QWORD *)v13 + 1);
  if (!result)
  {
    result = (_QWORD *)sub_1C484358C(*(_QWORD *)a2 + 2040, 24, 3);
    v14 = v15;
    *result = a2;
    result[2] = 0;
    result[1] = (v14 << 8) | 0xDu;
    *((_QWORD *)v13 + 1) = result;
  }
  return result;
}

double llvm::DataLayout::getIntPtrType(llvm::DataLayout *this, llvm::Type *a2)
{
  int PointerTypeSizeInBits;
  double result;
  _QWORD *v5;
  unint64_t v6;
  llvm::Type *v7;
  _DWORD *v8;
  int v9;
  int v10;

  PointerTypeSizeInBits = llvm::DataLayout::getPointerTypeSizeInBits((uint64_t)this, (uint64_t)a2);
  v5 = *(_QWORD **)a2;
  v10 = PointerTypeSizeInBits;
  if (PointerTypeSizeInBits <= 63)
  {
    if (PointerTypeSizeInBits <= 31)
    {
      switch(PointerTypeSizeInBits)
      {
        case 16:
          v6 = *v5 + 1936;
          goto LABEL_9;
        case 8:
          v6 = *v5 + 1912;
          goto LABEL_9;
        case 1:
          v6 = *v5 + 1888;
          goto LABEL_9;
      }
    }
    else if (PointerTypeSizeInBits == 32)
    {
      v6 = *v5 + 1960;
      goto LABEL_9;
    }
  }
  else
  {
    if (PointerTypeSizeInBits == 64)
    {
      v6 = *v5 + 1984;
      goto LABEL_9;
    }
    if (PointerTypeSizeInBits == 128)
    {
      v6 = *v5 + 2008;
      goto LABEL_9;
    }
  }
  v8 = sub_1C5270984(*v5 + 2168, &v10);
  v6 = *((_QWORD *)v8 + 1);
  if (!v6)
  {
    v6 = sub_1C484358C(*v5 + 2040, 24, 3);
    v9 = v10;
    *(_QWORD *)v6 = v5;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 8) = (v9 << 8) | 0xDu;
    *((_QWORD *)v8 + 1) = v6;
  }
LABEL_9:
  if ((*((_DWORD *)a2 + 2) & 0xFE) == 0x12)
  {
    v7 = (llvm::Type *)*((unsigned int *)a2 + 8);
    if (*((_DWORD *)a2 + 2) == 19)
      return llvm::ScalableVectorType::get((uint64_t **)v6, v7);
    else
      return llvm::FixedVectorType::get((llvm::FixedVectorType *)v6, v7);
  }
  return result;
}

uint64_t llvm::DataLayout::getLargestLegalIntTypeSizeInBits(llvm::DataLayout *this)
{
  unsigned __int8 *v1;
  unint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 v9;
  unsigned int v10;
  BOOL v11;

  v1 = (unsigned __int8 *)*((_QWORD *)this + 4);
  v2 = *((_QWORD *)this + 5);
  v3 = &v1[v2];
  if (v2 >= 2)
  {
    v6 = v1 + 1;
    v5 = *v1;
    v7 = v2 - 1;
    v8 = v1 + 1;
    do
    {
      v10 = *v8++;
      v9 = v10;
      v11 = v5 >= v10;
      if (v5 <= v10)
        v5 = v9;
      if (!v11)
        v1 = v6;
      v6 = v8;
      --v7;
    }
    while (v7);
  }
  if (v1 == v3)
    return 0;
  else
    return *v1;
}

double llvm::DataLayout::getIndexType(llvm::DataLayout *this, llvm::Type *a2)
{
  int IndexTypeSizeInBits;
  double result;
  _QWORD *v5;
  unint64_t v6;
  llvm::Type *v7;
  _DWORD *v8;
  int v9;
  int v10;

  IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)this, (uint64_t)a2);
  v5 = *(_QWORD **)a2;
  v10 = IndexTypeSizeInBits;
  if (IndexTypeSizeInBits <= 63)
  {
    if (IndexTypeSizeInBits <= 31)
    {
      switch(IndexTypeSizeInBits)
      {
        case 16:
          v6 = *v5 + 1936;
          goto LABEL_9;
        case 8:
          v6 = *v5 + 1912;
          goto LABEL_9;
        case 1:
          v6 = *v5 + 1888;
          goto LABEL_9;
      }
    }
    else if (IndexTypeSizeInBits == 32)
    {
      v6 = *v5 + 1960;
      goto LABEL_9;
    }
  }
  else
  {
    if (IndexTypeSizeInBits == 64)
    {
      v6 = *v5 + 1984;
      goto LABEL_9;
    }
    if (IndexTypeSizeInBits == 128)
    {
      v6 = *v5 + 2008;
      goto LABEL_9;
    }
  }
  v8 = sub_1C5270984(*v5 + 2168, &v10);
  v6 = *((_QWORD *)v8 + 1);
  if (!v6)
  {
    v6 = sub_1C484358C(*v5 + 2040, 24, 3);
    v9 = v10;
    *(_QWORD *)v6 = v5;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 8) = (v9 << 8) | 0xDu;
    *((_QWORD *)v8 + 1) = v6;
  }
LABEL_9:
  if ((*((_DWORD *)a2 + 2) & 0xFE) == 0x12)
  {
    v7 = (llvm::Type *)*((unsigned int *)a2 + 8);
    if (*((_DWORD *)a2 + 2) == 19)
      return llvm::ScalableVectorType::get((uint64_t **)v6, v7);
    else
      return llvm::FixedVectorType::get((llvm::FixedVectorType *)v6, v7);
  }
  return result;
}

uint64_t llvm::DataLayout::getIndexedOffsetInType(llvm::DataLayout *this, uint64_t a2, llvm::UndefValue **a3, uint64_t a4)
{
  uint64_t v5;
  llvm::UndefValue **v6;
  llvm::UndefValue *AggregateElement;
  llvm::StructType *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  const char *v17;
  unint64_t v19;
  uint64_t v20;
  llvm::UndefValue **v21;
  uint64_t v22;

  v21 = a3;
  v22 = a2 | 4;
  if (a4)
  {
    v5 = 0;
    v6 = &a3[a4];
    while (1)
    {
      AggregateElement = *a3;
      v8 = (llvm::StructType *)(v22 & 0xFFFFFFFFFFFFFFF8);
      v9 = (unsigned int *)((char *)*a3 + 24);
      v10 = *((_DWORD *)*a3 + 8);
      if ((v22 & 4) == 0)
      {
        if (v8)
          break;
      }
      if (v10 <= 0x40)
      {
        v13 = *(unsigned int **)v9;
        v14 = (uint64_t)((_QWORD)v13 << -(char)v10) >> -(char)v10;
        if (!v14)
          goto LABEL_24;
LABEL_12:
        if ((v22 & 4) == 0 || !v8)
        {
          if (*((_BYTE *)AggregateElement + 16) != 16)
          {
            v19 = v22 & 0xFFFFFFFFFFFFFFF8;
            AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, 0);
            v8 = (llvm::StructType *)v19;
            v10 = *((_DWORD *)AggregateElement + 8);
            v13 = (unsigned int *)*((_QWORD *)AggregateElement + 3);
          }
          if (v10 >= 0x41)
            v15 = v13;
          else
            v15 = (unsigned int *)((char *)AggregateElement + 24);
          v8 = *(llvm::StructType **)(*((_QWORD *)v8 + 2) + 8 * *v15);
        }
        v16 = sub_1C4E3D148((uint64_t)this, (uint64_t)v8);
        if ((_DWORD)v17 == 1)
        {
          v20 = v16;
          v16 = v20;
        }
        v12 = v16 * v14;
LABEL_23:
        v5 += v12;
        goto LABEL_24;
      }
      v13 = *(unsigned int **)v9;
      v14 = *(_QWORD *)v13;
      if (*(_QWORD *)v13)
        goto LABEL_12;
LABEL_24:
      sub_1C4843D7C((uint64_t)&v21);
      a3 = v21;
      if (v21 == v6)
        return v5;
    }
    if (v10 >= 0x41)
      v9 = *(unsigned int **)v9;
    v11 = *v9;
    v12 = *((_QWORD *)llvm::DataLayout::getStructLayout(this, v8) + v11 + 2);
    goto LABEL_23;
  }
  return 0;
}

void llvm::DataLayout::getGEPIndexForOffset(llvm::DataLayout *this@<X0>, llvm::Type **a2@<X1>, llvm::APInt *a3@<X2>, uint64_t a4@<X8>)
{
  llvm::StructType *v7;
  int v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  llvm::StructLayout *StructLayout;
  llvm::APInt *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  llvm::Type *v23;
  unint64_t v24;
  int v25;
  llvm::Type *v26;
  unsigned int v27;
  uint64_t v28;
  int v29;

  v7 = *a2;
  v8 = *((unsigned __int8 *)*a2 + 8);
  if (*a2)
    v9 = v8 == 17;
  else
    v9 = 0;
  if (v9)
  {
    v23 = (llvm::Type *)*((_QWORD *)v7 + 3);
    *a2 = v23;
    v24 = sub_1C4E3D148((uint64_t)this, (uint64_t)v23);
    goto LABEL_26;
  }
  if (v7)
    v10 = (v8 & 0xFE) == 18;
  else
    v10 = 0;
  if (v10)
  {
    v26 = (llvm::Type *)*((_QWORD *)v7 + 3);
    *a2 = v26;
    sub_1C4768AD0((uint64_t)this, (uint64_t)v26);
    if ((v27 & 7) != 0)
      goto LABEL_29;
    v24 = v27 >> 3;
    v25 = 0;
LABEL_26:
    sub_1C53987BC(a3, v24, v25, (llvm::APInt *)&v28);
    *(_DWORD *)(a4 + 8) = v29;
    *(_QWORD *)a4 = v28;
LABEL_27:
    *(_BYTE *)(a4 + 16) = 1;
    return;
  }
  if (v7)
    v11 = v8 == 16;
  else
    v11 = 0;
  if (v11)
  {
    StructLayout = llvm::DataLayout::getStructLayout(this, *a2);
    v13 = *((_DWORD *)a3 + 2) >= 0x41u ? *(llvm::APInt **)a3 : a3;
    v14 = *(_QWORD *)v13;
    if (*(_QWORD *)v13 < *(_QWORD *)StructLayout)
    {
      v15 = (char *)StructLayout + 16;
      v16 = (char *)StructLayout + 16;
      v17 = *((_DWORD *)StructLayout + 3) & 0x7FFFFFFF;
      if ((_DWORD)v17)
      {
        v16 = (char *)StructLayout + 16;
        do
        {
          v18 = v17 >> 1;
          v19 = &v16[8 * (v17 >> 1)];
          v21 = *(_QWORD *)v19;
          v20 = v19 + 8;
          v17 += ~(v17 >> 1);
          if (v21 > v14)
            v17 = v18;
          else
            v16 = v20;
        }
        while (v17);
      }
      v22 = ((unint64_t)(v16 - v15 - 8) >> 3);
      llvm::APInt::operator-=((uint64_t)a3, *(_QWORD *)&v15[8 * v22]);
      *a2 = *(llvm::Type **)(*((_QWORD *)v7 + 2) + 8 * v22);
      *(_DWORD *)(a4 + 8) = 32;
      *(_QWORD *)a4 = v22;
      goto LABEL_27;
    }
  }
LABEL_29:
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 16) = 0;
}

void sub_1C53987BC(llvm::APInt *this@<X2>, unint64_t a2@<X0>, int a3@<W1>, llvm::APInt *a4@<X8>)
{
  unsigned int v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  char *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  char v19;
  llvm::APInt *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BOOL4 v28;
  unint64_t v29;
  _QWORD *v30;

  v5 = *((_DWORD *)this + 2);
  if (a3 == 1 || !a2)
  {
    *((_DWORD *)a4 + 2) = v5;
    if (v5 > 0x40)
    {
      llvm::APInt::initSlowCase(a4, 0, 0);
      return;
    }
    goto LABEL_14;
  }
  if (v5 - 1 <= 0x3F && 0xFFFFFFFFFFFFFFFFLL >> (1 - v5) < a2)
  {
    *((_DWORD *)a4 + 2) = v5;
LABEL_14:
    *(_QWORD *)a4 = 0;
    return;
  }
  llvm::APInt::sdiv(this, a2, a4);
  v9 = *((unsigned int *)a4 + 2);
  if (v9 > 0x40)
  {
    v13 = (char *)operator new[]();
    memcpy(v13, *(const void **)a4, ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8);
    v30 = v13;
    v14 = (unint64_t)(v9 + 63) >> 6;
    llvm::APInt::tcMultiplyPart((llvm::APInt *)v13, (unint64_t *)v13, (const unint64_t *)a2, 0, v14, v14, 0);
    v11 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
    v12 = (unint64_t *)&v13[8 * (v14 - 1)];
    v10 = *v12;
  }
  else
  {
    v10 = *(_QWORD *)a4 * a2;
    v30 = (_QWORD *)v10;
    v11 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
    if (!(_DWORD)v9)
      v11 = 0;
    v12 = (unint64_t *)&v30;
  }
  *v12 = v10 & v11;
  v15 = v30;
  v16 = *((unsigned int *)this + 2);
  if (v16 >= 0x41)
  {
    v21 = 0;
    v22 = *(unint64_t **)this;
    v23 = (unint64_t)(v16 + 63) >> 6;
    v24 = v30;
    v25 = v23;
    do
    {
      v26 = *v24++;
      v27 = *v22 - v26;
      v28 = *v22 < v26;
      v29 = *v22 + ~v26;
      if (v21)
      {
        v21 = v29 >= *v22;
      }
      else
      {
        v29 = v27;
        v21 = v28;
      }
      *v22++ = v29;
      --v25;
    }
    while (v25);
    *(_QWORD *)(*(_QWORD *)this + 8 * (v23 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v16;
  }
  else
  {
    if ((_DWORD)v16)
      v17 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v16;
    else
      v17 = 0;
    *(_QWORD *)this = v17 & (*(_QWORD *)this - (_QWORD)v30);
  }
  if (v9 >= 0x41 && v15)
    MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
  v18 = *((_DWORD *)this + 2);
  v19 = v18 - 1;
  if (v18 >= 0x41)
    v20 = (llvm::APInt *)(*(_QWORD *)this + 8 * ((v18 - 1) >> 6));
  else
    v20 = this;
  if (((*(_QWORD *)v20 >> v19) & 1) != 0)
  {
    llvm::APInt::operator--((uint64_t)a4);
    llvm::APInt::operator+=((uint64_t)this, a2);
  }
}

void llvm::DataLayout::getGEPIndicesForOffset(llvm::DataLayout *this@<X0>, llvm::Type **a2@<X1>, llvm::APInt *a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v8;
  int v9;
  unsigned int v10;
  llvm::APInt *v11;
  uint64_t v12;
  unsigned int v13;
  char v14;

  *a4 = a4 + 2;
  a4[1] = 0x300000000;
  v8 = sub_1C4E3D148((uint64_t)this, (uint64_t)*a2);
  sub_1C53987BC(a3, v8, v9, (llvm::APInt *)&v12);
  sub_1C4DF5F58((uint64_t)a4, (unint64_t)&v12);
LABEL_2:
  if (v13 >= 0x41 && v12)
    MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
  while (1)
  {
    v10 = *((_DWORD *)a3 + 2);
    if (v10 < 0x41 || v10 - llvm::APInt::countLeadingZerosSlowCase(a3) <= 0x40)
    {
      v11 = *(llvm::APInt **)a3;
      if (v10 < 0x41)
        v11 = a3;
      if (!*(_QWORD *)v11)
        break;
    }
    llvm::DataLayout::getGEPIndexForOffset(this, a2, a3, (uint64_t)&v12);
    if (!v14)
      break;
    sub_1C5398B48((uint64_t)a4, (unint64_t)&v12);
    if (v14)
      goto LABEL_2;
  }
}

void sub_1C5398B48(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v9 = v4 + 1;
    v10 = v5 + 16 * v4;
    if (v5 <= a2 && v10 > a2)
    {
      v12 = a2 - v5;
      sub_1C4DF5FEC(a1, v9);
      v5 = *(_QWORD *)a1;
      a2 = *(_QWORD *)a1 + v12;
    }
    else
    {
      sub_1C4DF5FEC(a1, v9);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = v5 + 16 * *(unsigned int *)(a1 + 8);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v6 + 8) = v7;
  if (v7 > 0x40)
  {
    v8 = (void *)operator new[]();
    *(_QWORD *)v6 = v8;
    memcpy(v8, *(const void **)a2, (((unint64_t)*(unsigned int *)(v6 + 8) + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)v6 = *(_QWORD *)a2;
  }
  ++*(_DWORD *)(a1 + 8);
}

uint64_t llvm::DataLayout::getPreferredAlign(llvm::DataLayout *this, const llvm::GlobalVariable *a2)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  BOOL v11;
  char v12;
  const char *v13;
  unint64_t v14;
  unint64_t v15;

  v4 = *((_DWORD *)a2 + 8);
  v5 = (HIWORD(v4) & 0x3F) - 1;
  v6 = HIWORD(v4) & 0x3F;
  if (v6)
    v7 = v5;
  else
    v7 = 0;
  if ((v4 & 0x400000) != 0 && v6)
    return v7;
  v8 = *((_QWORD *)a2 + 3);
  llvm::DataLayout::getAlignment((uint64_t)this, v8);
  v7 = v9;
  if (v6)
  {
    v7 = v5;
    if (v5 < v9)
    {
      llvm::DataLayout::getAlignment((uint64_t)this, v8);
      if (v5 <= v10)
        v7 = v10;
      else
        v7 = v5;
    }
  }
  if (*((_BYTE *)a2 + 16))
  {
    if (*((_BYTE *)a2 + 16) == 3)
    {
      v11 = (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0;
      goto LABEL_18;
    }
  }
  else if (*((const llvm::GlobalVariable **)a2 + 9) == (const llvm::GlobalVariable *)((char *)a2 + 72))
  {
    v11 = (*((_BYTE *)a2 + 34) & 0x80) == 0;
LABEL_18:
    v12 = v11;
    if (v6)
      return v7;
    goto LABEL_22;
  }
  v12 = 0;
  if (v6)
    return v7;
LABEL_22:
  if ((v12 & 1) == 0 && v7 <= 3u)
  {
    sub_1C4768AD0((uint64_t)this, v8);
    v15 = v14;
    if ((_DWORD)v13 == 1)
    if (v15 <= 0x80)
      return v7;
    else
      return 4;
  }
  return v7;
}

_QWORD *sub_1C5398D5C(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C4ECA920(a1, v7);
      v17 = 0;
      sub_1C4850EC8((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    v8 = *a4;
    goto LABEL_5;
  }
  sub_1C4ECA920(a1, 2 * v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
      v12 = *a4;
      if (v8 == *a4)
        goto LABEL_5;
    }
    if (v13)
      a4 = v13;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

unsigned int *sub_1C5398E8C(unsigned int *result, uint64_t a2, __int128 *a3)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  v4 = result;
  v5 = *(_QWORD *)result;
  v6 = result[2];
  if (*(_QWORD *)result + 16 * v6 == a2)
  {
    v11 = *a3;
    if (v6 >= result[3])
    {
      v12 = *a3;
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6 + 1, 16);
      v11 = v12;
      v5 = *(_QWORD *)v4;
      v6 = v4[2];
    }
    *(_OWORD *)(v5 + 16 * v6) = v11;
    ++v4[2];
  }
  else
  {
    v7 = (a2 - v5) >> 4;
    if (v6 >= result[3])
    {
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6 + 1, 16);
      v5 = *(_QWORD *)v4;
      v6 = v4[2];
    }
    v8 = (__int128 *)(v5 + 16 * v7);
    *(_OWORD *)(v5 + 16 * v6) = *(_OWORD *)(v5 + 16 * v6 - 16);
    v9 = v4[2];
    v10 = *(_QWORD *)v4 + 16 * v9 - 16;
    if ((__int128 *)v10 != v8)
    {
      result = (unsigned int *)memmove(v8 + 1, v8, v10 - (_QWORD)v8);
      LODWORD(v9) = v4[2];
    }
    v4[2] = v9 + 1;
    *v8 = *a3;
  }
  return result;
}

uint64_t llvm::FindDbgAddrUses@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t ***v4;
  uint64_t i;
  uint64_t v6;
  BOOL v7;

  if ((*(_BYTE *)(this + 23) & 8) != 0
    && (v4 = (uint64_t ***)this, (this = llvm::ValueAsMetadata::getIfExists((uint64_t ***)this)) != 0))
  {
    this = llvm::MetadataAsValue::getIfExists(**v4, (unsigned __int8 *)this);
    *a2 = 0;
    if (this)
    {
      for (i = *(_QWORD *)(this + 8); i; i = *(_QWORD *)(i + 8))
      {
        v6 = *(_QWORD *)(i + 24);
        this = sub_1C53923FC(v6);
        if (v6)
          v7 = (_DWORD)this == 0;
        else
          v7 = 1;
        if (!v7 && *(_DWORD *)(*(_QWORD *)(v6 - 32) + 36) != 58)
          this = sub_1C619116C((uint64_t)a2, v6);
      }
    }
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

_QWORD *llvm::FindDbgDeclareUses@<X0>(llvm *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v8;

  *a2 = 0;
  v4 = (uint64_t *)&v8;
  llvm::FindDbgAddrUses((uint64_t)this, &v8);
  if ((v8 & 4) != 0)
  {
    v4 = *(uint64_t **)(v8 & 0xFFFFFFFFFFFFFFF8);
    v5 = &v4[*(unsigned int *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8)];
  }
  else
  {
    v5 = (uint64_t *)(&v8 + (v8 > 7));
  }
  while (v4 != v5)
  {
    v6 = *v4;
    if (*v4)
    {
      if (*(_DWORD *)(*(_QWORD *)(v6 - 32) + 36) == 56)
        sub_1C619116C((uint64_t)a2, v6);
    }
    ++v4;
  }
  return sub_1C4DDA878(&v8);
}

void llvm::findDbgValues(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *IfExists;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  _BOOL4 v9;
  BOOL v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 **v13;
  uint64_t v14;
  uint64_t j;
  uint64_t v16;
  _BOOL4 v17;
  BOOL v18;
  char v19;
  unint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  int v24;
  _BYTE v25[32];
  void *v26;
  unsigned int v27;
  _QWORD v28[7];

  v28[6] = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a2 + 23) & 8) != 0)
  {
    v21 = v25;
    v22 = v25;
    v23 = 4;
    v24 = 0;
    IfExists = (unsigned __int8 *)llvm::ValueAsMetadata::getIfExists((uint64_t ***)a2);
    if (IfExists)
    {
      v5 = IfExists;
      v6 = llvm::MetadataAsValue::getIfExists(**(uint64_t ***)a2, IfExists);
      if (v6)
      {
        for (i = *(_QWORD *)(v6 + 8); i; i = *(_QWORD *)(i + 8))
        {
          v8 = *(_QWORD *)(i + 24);
          v9 = sub_1C50A0300(v8);
          if (v8)
            v10 = !v9;
          else
            v10 = 1;
          if (!v10)
          {
            v11 = *(unsigned int *)(a1 + 8);
            if (v11 >= *(unsigned int *)(a1 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v11 + 1, 8);
              v11 = *(unsigned int *)(a1 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
            ++*(_DWORD *)(a1 + 8);
          }
        }
      }
      llvm::ReplaceableMetadataImpl::getAllArgListUsers((llvm::ReplaceableMetadataImpl *)(v5 + 8), (uint64_t)&v26);
      v12 = (unsigned __int8 **)v26;
      if (v27)
      {
        v13 = (unsigned __int8 **)((char *)v26 + 8 * v27);
        do
        {
          v14 = llvm::MetadataAsValue::getIfExists(**(uint64_t ***)a2, *v12);
          if (v14)
          {
            for (j = *(_QWORD *)(v14 + 8); j; j = *(_QWORD *)(j + 8))
            {
              v16 = *(_QWORD *)(j + 24);
              v17 = sub_1C50A0300(v16);
              if (v16)
                v18 = !v17;
              else
                v18 = 1;
              if (!v18)
              {
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v21, v16);
                if (v19)
                {
                  v20 = *(unsigned int *)(a1 + 8);
                  if (v20 >= *(unsigned int *)(a1 + 12))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v20 + 1, 8);
                    v20 = *(unsigned int *)(a1 + 8);
                  }
                  *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v16;
                  ++*(_DWORD *)(a1 + 8);
                }
              }
            }
          }
          ++v12;
        }
        while (v12 != v13);
        v12 = (unsigned __int8 **)v26;
      }
      if (v12 != v28)
        free(v12);
    }
    if (v22 != v21)
      free(v22);
  }
}

void llvm::findDbgUsers(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *IfExists;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  int v9;
  BOOL v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 **v13;
  uint64_t v14;
  uint64_t j;
  uint64_t v16;
  int v17;
  BOOL v18;
  char v19;
  unint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  int v24;
  _BYTE v25[32];
  void *v26;
  unsigned int v27;
  _QWORD v28[7];

  v28[6] = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a2 + 23) & 8) != 0)
  {
    v21 = v25;
    v22 = v25;
    v23 = 4;
    v24 = 0;
    IfExists = (unsigned __int8 *)llvm::ValueAsMetadata::getIfExists((uint64_t ***)a2);
    if (IfExists)
    {
      v5 = IfExists;
      v6 = llvm::MetadataAsValue::getIfExists(**(uint64_t ***)a2, IfExists);
      if (v6)
      {
        for (i = *(_QWORD *)(v6 + 8); i; i = *(_QWORD *)(i + 8))
        {
          v8 = *(_QWORD *)(i + 24);
          v9 = sub_1C53923FC(v8);
          if (v8)
            v10 = v9 == 0;
          else
            v10 = 1;
          if (!v10)
          {
            v11 = *(unsigned int *)(a1 + 8);
            if (v11 >= *(unsigned int *)(a1 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v11 + 1, 8);
              v11 = *(unsigned int *)(a1 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
            ++*(_DWORD *)(a1 + 8);
          }
        }
      }
      llvm::ReplaceableMetadataImpl::getAllArgListUsers((llvm::ReplaceableMetadataImpl *)(v5 + 8), (uint64_t)&v26);
      v12 = (unsigned __int8 **)v26;
      if (v27)
      {
        v13 = (unsigned __int8 **)((char *)v26 + 8 * v27);
        do
        {
          v14 = llvm::MetadataAsValue::getIfExists(**(uint64_t ***)a2, *v12);
          if (v14)
          {
            for (j = *(_QWORD *)(v14 + 8); j; j = *(_QWORD *)(j + 8))
            {
              v16 = *(_QWORD *)(j + 24);
              v17 = sub_1C53923FC(v16);
              if (v16)
                v18 = v17 == 0;
              else
                v18 = 1;
              if (!v18)
              {
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v21, v16);
                if (v19)
                {
                  v20 = *(unsigned int *)(a1 + 8);
                  if (v20 >= *(unsigned int *)(a1 + 12))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v20 + 1, 8);
                    v20 = *(unsigned int *)(a1 + 8);
                  }
                  *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v16;
                  ++*(_DWORD *)(a1 + 8);
                }
              }
            }
          }
          ++v12;
        }
        while (v12 != v13);
        v12 = (unsigned __int8 **)v26;
      }
      if (v12 != v28)
        free(v12);
    }
    if (v22 != v21)
      free(v22);
  }
}

unsigned __int8 *llvm::getDISubprogram(unsigned __int8 *this, const llvm::MDNode *a2)
{
  int v2;

  if (this)
  {
    v2 = *this;
    if ((v2 - 17) > 2)
    {
      return 0;
    }
    else
    {
      while ((v2 & 0xFE) == 0x12)
      {
        this = *(unsigned __int8 **)&this[-8 * *((unsigned int *)this + 2) + 8];
        LOBYTE(v2) = *this;
      }
    }
  }
  return this;
}

void *llvm::DebugInfoFinder::reset(llvm::DebugInfoFinder *this)
{
  void *result;
  uint64_t v3;
  unsigned int v5;
  int v6;
  unsigned int v7;
  void *v8;

  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_DWORD *)this + 42) = 0;
  *((_DWORD *)this + 62) = 0;
  *((_DWORD *)this + 82) = 0;
  result = (void *)*((_QWORD *)this + 51);
  if (result == *((void **)this + 50))
    goto LABEL_2;
  v3 = *((unsigned int *)this + 104);
  if (v3 < 0x21 || 4 * (*((_DWORD *)this + 105) - *((_DWORD *)this + 106)) >= v3)
  {
    result = memset(result, 255, 8 * v3);
LABEL_2:
    *(_QWORD *)((char *)this + 420) = 0;
    return result;
  }
  free(result);
  v5 = *((_DWORD *)this + 105) - *((_DWORD *)this + 106);
  v6 = 1 << (33 - __clz(v5 - 1));
  if (v5 <= 0x10)
    v7 = 32;
  else
    v7 = v6;
  *((_DWORD *)this + 104) = v7;
  *(_QWORD *)((char *)this + 420) = 0;
  v8 = malloc_type_malloc(8 * v7, 0x4065EBACuLL);
  if (!v8)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  *((_QWORD *)this + 51) = v8;
  return memset(v8, 255, 8 * *((unsigned int *)this + 104));
}

_QWORD *llvm::DebugInfoFinder::processModule(llvm::DebugInfoFinder *this, const llvm::Module *a2)
{
  _QWORD *result;
  const llvm::Module *v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  const llvm::Module **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  llvm::DILocation **v24;
  _QWORD *v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;

  result = (_QWORD *)sub_1C5174BF0((uint64_t)a2, &v43);
  v41 = v43;
  v42 = v44;
  v6 = v45;
  if ((_DWORD)v44 != v45)
  {
    do
    {
      v36 = llvm::Module::debug_compile_units_iterator::operator*((unsigned int *)&v41);
      result = (_QWORD *)llvm::DebugInfoFinder::processCompileUnit(this, v36);
      v37 = v42;
      v34 = (v42 + 1);
      LODWORD(v42) = v42 + 1;
      if (v41)
      {
        v38 = *(uint64_t **)(v41 + 48);
        v39 = *((unsigned int *)v38 + 2);
        if (v34 < v39)
        {
          v40 = *v38;
          if (!*(_DWORD *)(*(_QWORD *)(v40 + 8 * v34) + 36))
          {
            v31 = (uint64_t *)(v40 + 8 * v34 + 8);
            v32 = ~v34 + v39;
            v33 = v37 + 2;
            do
            {
              LODWORD(v34) = v33;
              if (!v32)
                break;
              v35 = *v31++;
              --v32;
              ++v33;
            }
            while (!*(_DWORD *)(v35 + 36));
            LODWORD(v42) = v34;
          }
        }
      }
    }
    while ((_DWORD)v34 != v6);
  }
  v7 = (char *)a2 + 24;
  v8 = *((_QWORD *)a2 + 4);
  if ((char *)v8 != v7)
  {
    while (1)
    {
      v9 = v8 ? v8 - 56 : 0;
      if ((*(_BYTE *)(v9 + 23) & 0x20) != 0)
        break;
LABEL_13:
      v19 = v9 + 72;
      for (i = *(_QWORD *)(v9 + 80); i != v19; i = *(_QWORD *)(i + 8))
      {
        v21 = i - 24;
        if (!i)
          v21 = 0;
        v22 = v21 + 40;
        for (j = *(_QWORD *)(v21 + 48); j != v22; j = *(_QWORD *)(j + 8))
        {
          if (j)
            v24 = (llvm::DILocation **)(j - 24);
          else
            v24 = 0;
          result = (_QWORD *)llvm::DebugInfoFinder::processInstruction(this, v5, v24);
        }
      }
      v8 = *(_QWORD *)(v8 + 8);
      if ((char *)v8 == v7)
        return result;
    }
    v10 = ***(_QWORD ***)v9;
    v43 = v9;
    v11 = *(_DWORD *)(v10 + 2496);
    if (v11)
    {
      v12 = *(_QWORD *)(v10 + 2480);
      v13 = v11 - 1;
      v14 = v13 & ((v9 >> 4) ^ (v9 >> 9));
      result = (_QWORD *)(v12 + 40 * v14);
      v15 = *result;
      if (*result == v9)
        goto LABEL_9;
      v25 = 0;
      v26 = 1;
      while (v15 != -4096)
      {
        if (v25)
          v27 = 0;
        else
          v27 = v15 == -8192;
        if (v27)
          v25 = result;
        v28 = v14 + v26++;
        v14 = v28 & v13;
        result = (_QWORD *)(v12 + 40 * v14);
        v15 = *result;
        if (*result == v9)
          goto LABEL_9;
      }
      if (v25)
        v29 = v25;
      else
        v29 = result;
    }
    else
    {
      v29 = 0;
    }
    result = sub_1C541AB24(v10 + 2480, (uint64_t)&v43, &v43, v29);
    v30 = v43;
    result[4] = 0;
    result[3] = 0;
    *result = v30;
    result[1] = result + 3;
    result[2] = 0x100000000;
LABEL_9:
    v16 = *((unsigned int *)result + 4);
    if ((_DWORD)v16)
    {
      v17 = (const llvm::Module **)(result[1] + 8);
      v18 = 16 * v16;
      while (*((_DWORD *)v17 - 2))
      {
        v17 += 2;
        v18 -= 16;
        if (!v18)
          goto LABEL_13;
      }
      v5 = *v17;
      if (*v17)
        result = (_QWORD *)llvm::DebugInfoFinder::processSubprogram(this, v5);
    }
    goto LABEL_13;
  }
  return result;
}

uint64_t llvm::DebugInfoFinder::processCompileUnit(llvm::DebugInfoFinder *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::DISubprogram **v15;
  llvm::DISubprogram *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;

  result = llvm::DebugInfoFinder::addCompileUnit((uint64_t)a1, a2);
  if ((_DWORD)result)
  {
    v5 = *(unsigned int *)(a2 + 8);
    v6 = *(_QWORD *)(a2 - 8 * v5 + 48);
    if (v6)
      v7 = (uint64_t *)(v6 - 8 * *(unsigned int *)(v6 + 8));
    else
      v7 = 0;
    if (v7 != (uint64_t *)v6)
    {
      do
      {
        v8 = *v7;
        result = llvm::DebugInfoFinder::addGlobalVariable((uint64_t)a1, *v7);
        if ((_DWORD)result)
        {
          v9 = *(_QWORD *)(v8 - 8 * *(unsigned int *)(v8 + 8));
          llvm::DebugInfoFinder::processScope(a1, *(llvm::DIScope **)(v9 - 8 * *(unsigned int *)(v9 + 8)));
          result = llvm::DebugInfoFinder::processType(a1, *(_QWORD *)(v9 - 8 * *(unsigned int *)(v9 + 8) + 24));
        }
        ++v7;
      }
      while (v7 != (uint64_t *)v6);
      v5 = *(unsigned int *)(a2 + 8);
    }
    v10 = -v5;
    v11 = *(_QWORD *)(a2 + 8 * v10 + 32);
    if (v11)
      v12 = (uint64_t *)(v11 - 8 * *(unsigned int *)(v11 + 8));
    else
      v12 = 0;
    if (v12 != (uint64_t *)v11)
    {
      do
      {
        v13 = *v12++;
        result = llvm::DebugInfoFinder::processType(a1, v13);
      }
      while (v12 != (uint64_t *)v11);
      v10 = -(uint64_t)*(unsigned int *)(a2 + 8);
    }
    v14 = *(_QWORD *)(a2 + 8 * v10 + 40);
    if (v14)
      v15 = (llvm::DISubprogram **)(v14 - 8 * *(unsigned int *)(v14 + 8));
    else
      v15 = 0;
    if (v15 != (llvm::DISubprogram **)v14)
    {
      do
      {
        v16 = *v15;
        v17 = *(unsigned __int8 *)*v15;
        if ((v17 - 11) < 4 || v17 == 33)
          result = llvm::DebugInfoFinder::processType(a1, (uint64_t)v16);
        else
          result = llvm::DebugInfoFinder::processSubprogram(a1, v16);
        ++v15;
      }
      while (v15 != (llvm::DISubprogram **)v14);
      v10 = -(uint64_t)*(unsigned int *)(a2 + 8);
    }
    v18 = *(_QWORD *)(a2 + 8 * v10 + 56);
    if (v18)
      v19 = v18 - 8 * *(unsigned int *)(v18 + 8);
    else
      v19 = 0;
    for (; v19 != v18; v19 += 8)
    {
      v20 = *(unsigned int **)(*(_QWORD *)v19 - 8 * *(unsigned int *)(*(_QWORD *)v19 + 8) + 8);
      switch(*(_BYTE *)v20)
      {
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
          goto LABEL_31;
        case 0xF:
        case 0x10:
        case 0x12:
        case 0x13:
          continue;
        case 0x11:
          result = llvm::DebugInfoFinder::processSubprogram(a1, (llvm::DISubprogram *)v20);
          break;
        case 0x14:
        case 0x15:
          result = (uint64_t)llvm::DebugInfoFinder::processScope(a1, *(llvm::DIScope **)&v20[-2 * v20[2] + 2]);
          break;
        default:
          if (*(_BYTE *)v20 == 33)
LABEL_31:
            result = llvm::DebugInfoFinder::processType(a1, (uint64_t)v20);
          break;
      }
    }
  }
  return result;
}

uint64_t llvm::DebugInfoFinder::processSubprogram(llvm::DebugInfoFinder *this, llvm::DISubprogram *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = llvm::DebugInfoFinder::addSubprogram(this, a2);
  if ((_DWORD)result)
  {
    llvm::DebugInfoFinder::processScope(this, ((llvm::DIScope **)a2 - *((unsigned int *)a2 + 2))[1]);
    llvm::DebugInfoFinder::processCompileUnit(this, ((_QWORD *)a2 - *((unsigned int *)a2 + 2))[5]);
    result = llvm::DebugInfoFinder::processType(this, ((_QWORD *)a2 - *((unsigned int *)a2 + 2))[4]);
    v5 = *((unsigned int *)a2 + 2);
    if (v5 >= 0xA)
    {
      v6 = ((_QWORD *)a2 - v5)[9];
      if (v6)
      {
        v7 = *(unsigned int *)(v6 + 8);
        if ((_DWORD)v7)
        {
          v8 = -8 * v7;
          do
          {
            v9 = *(_QWORD *)(v6 + v8);
            if ((*(_BYTE *)v9 & 0xFE) == 0x16)
              result = llvm::DebugInfoFinder::processType(this, *(_QWORD *)(v9 - 8 * *(unsigned int *)(v9 + 8) + 8));
            v8 += 8;
          }
          while (v8);
        }
      }
    }
  }
  return result;
}

uint64_t llvm::DebugInfoFinder::processInstruction(llvm::DebugInfoFinder *this, const llvm::Module *a2, llvm::DILocation **a3)
{
  uint64_t result;
  const llvm::Module *v6;
  llvm::DILocation *v7;
  const llvm::Module *v8;
  llvm::DILocation *v9;

  result = sub_1C53923FC((uint64_t)a3);
  if ((_DWORD)result)
    result = (uint64_t)llvm::DebugInfoFinder::processVariable(this, v6, (const llvm::DbgVariableIntrinsic *)a3);
  v7 = a3[6];
  v9 = v7;
  if (v7)
  {
    result = llvm::MetadataTracking::track((uint64_t)&v9, (unsigned __int8 *)v7, 2);
    if (v9)
    {
      result = (uint64_t)llvm::DebugInfoFinder::processLocation(this, v8, v9);
      if (v9)
        return llvm::MetadataTracking::untrack((uint64_t)&v9, (unsigned __int8 *)v9);
    }
  }
  return result;
}

BOOL llvm::DebugInfoFinder::addGlobalVariable(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;

  sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 400), a2);
  v5 = v4;
  if (v4)
  {
    v6 = *(unsigned int *)(a1 + 168);
    if (v6 >= *(_DWORD *)(a1 + 172))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 160, a1 + 176, v6 + 1, 8);
      LODWORD(v6) = *(_DWORD *)(a1 + 168);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v6) = a2;
    ++*(_DWORD *)(a1 + 168);
  }
  return v5 != 0;
}

llvm::DebugInfoFinder *llvm::DebugInfoFinder::processScope(llvm::DebugInfoFinder *this, llvm::DIScope *a2)
{
  unsigned int *v2;
  llvm::DebugInfoFinder *v3;
  unsigned int v4;

  if (a2)
  {
    v2 = (unsigned int *)a2;
    v3 = this;
    while (1)
    {
      v4 = *(unsigned __int8 *)v2;
      if (v4 > 0xF)
      {
        switch(v4)
        {
          case 0x11u:
            return (llvm::DebugInfoFinder *)llvm::DebugInfoFinder::processSubprogram(v3, (llvm::DISubprogram *)v2);
          case 0x21u:
            return (llvm::DebugInfoFinder *)llvm::DebugInfoFinder::processType(v3, (uint64_t)v2);
          case 0x10u:
            return (llvm::DebugInfoFinder *)llvm::DebugInfoFinder::addCompileUnit((uint64_t)v3, (uint64_t)v2);
        }
      }
      else if (v4 - 11 < 4)
      {
        return (llvm::DebugInfoFinder *)llvm::DebugInfoFinder::processType(v3, (uint64_t)v2);
      }
      this = (llvm::DebugInfoFinder *)llvm::DebugInfoFinder::addScope(v3, (llvm::DIScope *)v2);
      if ((_DWORD)this)
      {
        if (*(unsigned __int8 *)v2 - 18 <= 3)
        {
          v2 = *(unsigned int **)&v2[-2 * v2[2] + 2];
          if (v2)
            continue;
        }
      }
      return this;
    }
  }
  return this;
}

uint64_t llvm::DebugInfoFinder::processType(llvm::DebugInfoFinder *a1, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  llvm::DISubprogram **v9;
  uint64_t v10;
  llvm::DISubprogram *v11;
  int v12;

  v2 = (unsigned __int8 *)a2;
  result = llvm::DebugInfoFinder::addType((uint64_t)a1, a2);
  if (!(_DWORD)result)
    return result;
  while (1)
  {
    result = llvm::DebugInfoFinder::processScope(a1, *(llvm::DIScope **)&v2[-8 * *((unsigned int *)v2 + 2) + 8]);
    v5 = *v2;
    if (v5 != 12)
      break;
    v2 = *(unsigned __int8 **)&v2[-8 * *((unsigned int *)v2 + 2) + 24];
    result = llvm::DebugInfoFinder::addType((uint64_t)a1, (uint64_t)v2);
    if ((result & 1) == 0)
      return result;
  }
  if (v5 == 13)
  {
    result = llvm::DebugInfoFinder::processType(a1, *(_QWORD *)&v2[-8 * *((unsigned int *)v2 + 2) + 24]);
    v8 = *(_QWORD *)&v2[-8 * *((unsigned int *)v2 + 2) + 32];
    if (v8)
      v9 = (llvm::DISubprogram **)(v8 - 8 * *(unsigned int *)(v8 + 8));
    else
      v9 = 0;
    while (1)
    {
      if (v9 == (llvm::DISubprogram **)v8)
        return result;
      v11 = *v9;
      v12 = *(unsigned __int8 *)*v9;
      if ((v12 - 11) < 4)
        goto LABEL_20;
      if (v12 != 17)
        break;
      result = llvm::DebugInfoFinder::processSubprogram(a1, v11);
LABEL_21:
      ++v9;
    }
    if (v12 != 33)
      goto LABEL_21;
LABEL_20:
    result = llvm::DebugInfoFinder::processType(a1, v11);
    goto LABEL_21;
  }
  if (v5 == 14)
  {
    v6 = *(_QWORD *)&v2[-8 * *((unsigned int *)v2 + 2) + 24];
    if (v6)
      v7 = (uint64_t *)(v6 - 8 * *(unsigned int *)(v6 + 8));
    else
      v7 = 0;
    while (v7 != (uint64_t *)v6)
    {
      v10 = *v7++;
      result = llvm::DebugInfoFinder::processType(a1, v10);
    }
  }
  return result;
}

void llvm::updateLoopMetadataDebugLocations(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  llvm::MDNode *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  if ((*(_BYTE *)(a1 + 23) & 0x20) == 0)
    return;
  v6 = ***(_QWORD ***)a1;
  v23 = a1;
  v7 = *(_DWORD *)(v6 + 2496);
  if (v7)
  {
    v8 = *(_QWORD *)(v6 + 2480);
    v9 = v7 - 1;
    v10 = v9 & ((a1 >> 4) ^ (a1 >> 9));
    v11 = (_QWORD *)(v8 + 40 * v10);
    v12 = *v11;
    if (*v11 == a1)
      goto LABEL_5;
    v16 = 0;
    v17 = 1;
    while (v12 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v12 == -8192;
      if (v18)
        v16 = v11;
      v19 = v10 + v17++;
      v10 = v19 & v9;
      v11 = (_QWORD *)(v8 + 40 * v10);
      v12 = *v11;
      if (*v11 == a1)
        goto LABEL_5;
    }
    if (v16)
      v21 = v16;
    else
      v21 = v11;
  }
  else
  {
    v21 = 0;
  }
  v11 = sub_1C541AB24(v6 + 2480, (uint64_t)&v23, &v23, v21);
  v22 = v23;
  v11[3] = 0;
  v11[4] = 0;
  *v11 = v22;
  v11[1] = v11 + 3;
  v11[2] = 0x100000000;
LABEL_5:
  v13 = *((unsigned int *)v11 + 4);
  if ((_DWORD)v13)
  {
    v14 = (uint64_t *)(v11[1] + 8);
    v15 = 16 * v13;
    while (*((_DWORD *)v14 - 2) != 18)
    {
      v14 += 2;
      v15 -= 16;
      if (!v15)
        return;
    }
    if (*v14)
    {
      v20 = sub_1C5399FD8(*v14, a2, a3);
      if ((unint64_t)v20 | *(_QWORD *)(a1 + 48) || (*(_BYTE *)(a1 + 23) & 0x20) != 0)
        llvm::Value::setMetadata((llvm::Value *)a1, 18, v20);
    }
  }
}

llvm::MDNode *sub_1C5399FD8(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  unint64_t v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  llvm::MDNode *Impl;
  void *v16;
  uint64_t v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x1E0C80C00];
  v16 = v18;
  v18[0] = 0;
  v17 = 0x400000001;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= 2)
  {
    v7 = 1;
    while (*(_QWORD *)(a1 - 8 * v4 + 8 * v7))
    {
      v8 = a2(a3);
      if (v8)
      {
        v9 = v8;
        v10 = v17;
        if (v17 >= (unint64_t)HIDWORD(v17))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v16, (uint64_t)v18, v17 + 1, 8);
          v10 = v17;
        }
        *((_QWORD *)v16 + v10) = v9;
LABEL_11:
        LODWORD(v17) = v17 + 1;
      }
      ++v7;
      v4 = *(unsigned int *)(a1 + 8);
      if (v7 >= v4)
        goto LABEL_13;
    }
    v11 = v17;
    if (v17 >= (unint64_t)HIDWORD(v17))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v16, (uint64_t)v18, v17 + 1, 8);
      v11 = v17;
    }
    *((_QWORD *)v16 + v11) = 0;
    goto LABEL_11;
  }
LABEL_13:
  v12 = *(_QWORD *)(a1 + 16);
  v13 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFF8);
  if ((v12 & 4) != 0)
    v13 = (uint64_t *)*v13;
  Impl = (llvm::MDNode *)llvm::MDTuple::getImpl(v13, v16, v17, 1, 1);
  llvm::MDNode::replaceOperandWith(Impl, 0, Impl);
  if (v16 != v18)
    free(v16);
  return Impl;
}

uint64_t llvm::stripDebugInfo(llvm *this, llvm::Function *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  llvm **v8;
  llvm *v9;
  llvm **v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  char *v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t ***v23;
  uint64_t ***v24;
  uint64_t **v25;
  uint64_t **v26;
  unsigned __int8 *v27;
  unsigned __int8 **v28;
  unsigned __int8 *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  _QWORD *v35;
  _QWORD ***v36;
  _QWORD *v37;
  int v38;
  BOOL v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int **v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int *v48;
  _QWORD *v49;
  uint64_t v50;
  int v51;
  int v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  llvm **v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned __int8 *v64;
  uint64_t v65[2];
  int v66;
  _QWORD *v67;
  _BYTE *v68;
  _BYTE *v69;
  uint64_t v70;
  int v71;
  _BYTE v72[64];
  llvm *v73;
  llvm *v74;
  uint64_t v75;
  int v76;
  _BYTE v77[72];

  if ((*((_BYTE *)this + 23) & 0x20) == 0)
    goto LABEL_19;
  v3 = ***(_QWORD ***)this;
  v73 = this;
  v4 = *(_DWORD *)(v3 + 2496);
  if (!v4)
  {
    v61 = 0;
LABEL_100:
    v8 = (llvm **)sub_1C541AB24(v3 + 2480, (uint64_t)&v73, (uint64_t *)&v73, v61);
    v62 = (uint64_t)v73;
    v8[3] = 0;
    v8[4] = 0;
    *v8 = (llvm *)v62;
    v8[1] = (llvm *)(v8 + 3);
    v8[2] = (llvm *)0x100000000;
    goto LABEL_12;
  }
  v5 = *(_QWORD *)(v3 + 2480);
  v6 = v4 - 1;
  v7 = v6 & ((this >> 4) ^ (this >> 9));
  v8 = (llvm **)(v5 + 40 * v7);
  v9 = *v8;
  if (*v8 != this)
  {
    v10 = 0;
    v11 = 1;
    while (v9 != (llvm *)-4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v9 == (llvm *)-8192;
      if (v12)
        v10 = v8;
      v13 = v7 + v11++;
      v7 = v13 & v6;
      v8 = (llvm **)(v5 + 40 * v7);
      v9 = *v8;
      if (*v8 == this)
        goto LABEL_12;
    }
    if (v10)
      v61 = v10;
    else
      v61 = v8;
    goto LABEL_100;
  }
LABEL_12:
  v14 = *((unsigned int *)v8 + 4);
  if ((_DWORD)v14)
  {
    v15 = (_QWORD *)((char *)v8[1] + 8);
    v16 = 16 * v14;
    v17 = 0;
    while (*((_DWORD *)v15 - 2))
    {
      v15 += 2;
      v16 -= 16;
      if (!v16)
        goto LABEL_20;
    }
    if (*v15)
    {
      llvm::Value::setMetadata(this, 0, 0);
      v17 = 1;
      goto LABEL_20;
    }
  }
LABEL_19:
  v17 = 0;
LABEL_20:
  v18 = (char *)this + 72;
  v65[0] = 0;
  v65[1] = 0;
  v66 = 0;
  v19 = (char *)*((_QWORD *)this + 10);
  if (v19 == (char *)this + 72)
  {
    v59 = 0;
    goto LABEL_96;
  }
  do
  {
    v20 = v19 - 24;
    if (!v19)
      v20 = 0;
    v21 = v20 + 40;
    v22 = (_QWORD *)*((_QWORD *)v20 + 6);
    while (v22 != v21)
    {
      v23 = (uint64_t ***)(v22 - 3);
      v12 = v22 == 0;
      v22 = (_QWORD *)v22[1];
      if (v12)
        v24 = 0;
      else
        v24 = v23;
      if (sub_1C4D99D08((uint64_t)v24))
      {
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v24[5] + 5), v24);
        v25 = v24[3];
        v26 = v24[4];
        *v26 = (uint64_t *)v25;
        v25[1] = (uint64_t *)v26;
        v24[3] = 0;
        v24[4] = 0;
        llvm::Value::deleteValue((llvm::Value *)v24);
        v17 = 1;
      }
      else
      {
        v28 = (unsigned __int8 **)(v24 + 6);
        v27 = (unsigned __int8 *)v24[6];
        if (v27)
        {
          v64 = 0;
          if (&v64 == v28)
          {
            v63 = 0;
            v17 = 1;
            goto LABEL_36;
          }
          llvm::MetadataTracking::untrack((uint64_t)(v24 + 6), v27);
          v29 = v64;
          *v28 = v64;
          if (v29)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v64, v29, (uint64_t)(v24 + 6));
            v63 = 0;
            v64 = 0;
            v17 = 1;
            if (*v28)
              goto LABEL_36;
          }
          else
          {
            v63 = 0;
            v17 = 1;
          }
        }
        else
        {
          v63 = 0;
        }
        if ((*((_BYTE *)v24 + 23) & 0x20) == 0)
          goto LABEL_90;
LABEL_36:
        if ((*((_BYTE *)v24 + 23) & 0x20) == 0)
          goto LABEL_90;
        v30 = ***v24;
        v73 = (llvm *)v24;
        v31 = *(_DWORD *)(v30 + 2496);
        if (!v31)
        {
          v49 = 0;
LABEL_62:
          v35 = sub_1C541AB24(v30 + 2480, (uint64_t)&v73, (uint64_t *)&v73, v49);
          v50 = (uint64_t)v73;
          v35[4] = 0;
          v35[3] = 0;
          *v35 = v50;
          v35[1] = v35 + 3;
          v35[2] = 0x100000000;
          goto LABEL_47;
        }
        v32 = *(_QWORD *)(v30 + 2480);
        v33 = v31 - 1;
        v34 = v33 & ((v24 >> 4) ^ (v24 >> 9));
        v35 = (_QWORD *)(v32 + 40 * v34);
        v36 = (_QWORD ***)*v35;
        if ((uint64_t ***)*v35 != v24)
        {
          v37 = 0;
          v38 = 1;
          while (v36 != (_QWORD ***)-4096)
          {
            if (v37)
              v39 = 0;
            else
              v39 = v36 == (_QWORD ***)-8192;
            if (v39)
              v37 = v35;
            v40 = v34 + v38++;
            v34 = v40 & v33;
            v35 = (_QWORD *)(v32 + 40 * v34);
            v36 = (_QWORD ***)*v35;
            if ((uint64_t ***)*v35 == v24)
              goto LABEL_47;
          }
          if (v37)
            v49 = v37;
          else
            v49 = v35;
          goto LABEL_62;
        }
LABEL_47:
        v41 = *((unsigned int *)v35 + 4);
        if ((_DWORD)v41)
        {
          v42 = (unsigned int **)(v35[1] + 8);
          v43 = 16 * v41;
          while (*((_DWORD *)v42 - 2) != 18)
          {
            v42 += 2;
            v43 -= 16;
            if (!v43)
              goto LABEL_90;
          }
          v44 = *v42;
          v63 = v44;
          if (v44)
          {
            if (v66)
            {
              v45 = (v66 - 1) & ((v44 >> 4) ^ (v44 >> 9));
              v46 = *(unsigned int **)(v65[0] + 16 * v45);
              if (v44 == v46)
              {
LABEL_57:
                v47 = *(unsigned int **)(v65[0] + 16 * v45 + 8);
                if (v47)
                {
                  v48 = v44;
                  v44 = v47;
LABEL_85:
                  if (v44 != v48 && (v44 || *v28 || (*((_BYTE *)v24 + 23) & 0x20) != 0))
                    llvm::Value::setMetadata((llvm::Value *)v24, 18, (llvm::MDNode *)v44);
                  goto LABEL_90;
                }
              }
              else
              {
                v51 = 1;
                while (v46 != (unsigned int *)-4096)
                {
                  v52 = v45 + v51++;
                  v45 = v52 & (v66 - 1);
                  v46 = *(unsigned int **)(v65[0] + 16 * v45);
                  if (v44 == v46)
                    goto LABEL_57;
                }
              }
            }
            v73 = (llvm *)v77;
            v74 = (llvm *)v77;
            v75 = 8;
            v76 = 0;
            v68 = v72;
            v69 = v72;
            v70 = 8;
            v71 = 0;
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v73, (uint64_t)v44);
            if (v53)
            {
              v54 = v44[2];
              if (&v44[-2 * v54 + 2] != v44)
              {
                v55 = 0;
                v56 = 8 - 8 * v54;
                do
                {
                  v55 += sub_1C539C7F8((llvm::SmallPtrSetImplBase *)&v73, &v68, *(unsigned __int8 **)((char *)v44 + v56));
                  v56 += 8;
                }
                while (v56);
                if (v55)
                {
                  v57 = 8 - 8 * v44[2];
                  while (v57)
                  {
                    v58 = sub_1C539C7F8((llvm::SmallPtrSetImplBase *)&v73, &v68, *(unsigned __int8 **)((char *)v44 + v57));
                    v57 += 8;
                    if ((v58 & 1) == 0)
                    {
                      v67 = &v68;
                      v44 = (unsigned int *)sub_1C5399FD8((uint64_t)v44, (uint64_t (*)(uint64_t))sub_1C539C8DC, (uint64_t)&v67);
                      goto LABEL_79;
                    }
                  }
                  v44 = 0;
LABEL_79:
                  v18 = (char *)this + 72;
                }
                else
                {
                  v18 = (char *)this + 72;
                }
              }
            }
            if (v69 != v68)
              free(v69);
            if (v74 != v73)
              free(v74);
            sub_1C539D284(v65, &v63)[1] = v44;
            v48 = v63;
            goto LABEL_85;
          }
        }
LABEL_90:
        if ((*((_BYTE *)v24 + 23) & 0x20) != 0)
          llvm::Instruction::setMetadata((uint64_t)v24, "heapallocsite", 0xDuLL, 0);
      }
    }
    v19 = (char *)*((_QWORD *)v19 + 1);
  }
  while (v19 != v18);
  v59 = v65[0];
LABEL_96:
  MEMORY[0x1CAA32FB4](v59, 8);
  return v17 & 1;
}

uint64_t llvm::StripDebugInfo(llvm *this, llvm::Module *a2)
{
  char *v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  char *v7;
  char v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *i;
  llvm *v14;
  char *v15;
  uint64_t j;
  uint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  llvm::Value *v26;
  int v27;
  char *v28;
  uint64_t v29;
  _BOOL4 v30;
  uint64_t v31;

  v3 = (char *)this + 72;
  v4 = *((_QWORD *)this + 10);
  if ((char *)v4 == v3)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      v6 = *(uint64_t **)(v4 + 16);
      v7 = *(char **)(v4 + 8);
      v8 = *(_BYTE *)(v4 + 39);
      v9 = v8;
      if (v8 >= 0)
        v6 = (uint64_t *)(v4 + 16);
      v10 = *(_QWORD *)(v4 + 24);
      v11 = v8 & 0x7F;
      if (v9 >= 0)
        v10 = v11;
      if (v10 >= 9)
      {
        v12 = *v6 == 0x6762642E6D766C6CLL && *((_BYTE *)v6 + 8) == 46;
        if (v12
          || v10 == 9
          && ((v21 = *v6, v22 = *((unsigned __int8 *)v6 + 8), v21 == 0x6F63672E6D766C6CLL)
            ? (v23 = v22 == 118)
            : (v23 = 0),
              v23))
        {
          llvm::NamedMDNode::eraseFromParent((llvm::Module **)v4);
        }
      }
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v7 != v3);
  }
  for (i = (_QWORD *)*((_QWORD *)this + 4); i != (_QWORD *)((char *)this + 24); i = (_QWORD *)i[1])
  {
    if (i)
      v14 = (llvm *)(i - 7);
    else
      v14 = 0;
    v5 |= llvm::stripDebugInfo(v14, a2);
  }
  v15 = (char *)this + 8;
  for (j = *((_QWORD *)this + 2); (char *)j != v15; j = *(_QWORD *)(j + 8))
  {
    v17 = j - 56;
    if (!j)
      v17 = 0;
    if ((*(_BYTE *)(v17 + 23) & 0x20) != 0)
    {
      v28 = v15;
      v29 = j;
      v27 = v5;
      v24 = ***(_QWORD ***)v17 + 2480;
      v26 = (llvm::Value *)v17;
      v31 = v17;
      v25 = sub_1C541AA4C(v24, &v31);
      v30 = llvm::MDAttachments::erase((llvm::MDAttachments *)(v25 + 1), 0);
      if (!*((_DWORD *)v25 + 4))
        llvm::Value::clearMetadata(v26);
      v18 = v30;
      v5 = v27;
      v15 = v28;
      j = v29;
    }
    else
    {
      v18 = 0;
    }
    v5 |= v18;
  }
  v19 = *((_QWORD *)this + 20);
  if (v19)
    (*(void (**)(uint64_t, llvm::Module *))(*(_QWORD *)v19 + 40))(v19, a2);
  return v5 & 1;
}

uint64_t llvm::stripNonLineTableDebugInfo(uint64_t **this, llvm::Module *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t **i;
  uint64_t **j;
  llvm::Value *v9;
  uint64_t *v10;
  uint64_t Impl;
  llvm *v12;
  char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  char **v19;
  char *v20;
  char **v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t k;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned __int8 **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t **v43;
  uint64_t v44;
  _BYTE *v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  unsigned __int8 **v53;
  unsigned __int8 *v54;
  unsigned __int8 **v55;
  int v56;
  BOOL v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  llvm::MDNode *v62;
  unsigned __int8 **v63;
  unsigned __int8 *v64;
  char **v65;
  char *v66;
  BOOL v67;
  llvm::MDNode *v68;
  uint64_t m;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  _BYTE *v77;
  unsigned __int8 **v78;
  uint64_t v79;
  unsigned __int8 *v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 **v83;
  uint64_t v84;
  llvm::Function *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  llvm::Function *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  llvm::Function *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  llvm::Function *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  char *v106;
  llvm *v107;
  char *v108;
  void **v109;
  unsigned __int8 *v110;
  uint64_t *v111;
  unsigned __int8 *v112;
  uint64_t v113[2];
  unsigned int v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  unsigned __int8 v119;
  unsigned __int8 *v120;
  void *v121;
  uint64_t **v122;
  _QWORD v123[10];

  v123[8] = *MEMORY[0x1E0C80C00];
  v119 = 0;
  v3 = sub_1C4FB7E80(this[14], "llvm.dbg.addr", 0xDuLL);
  if (v3)
  {
    v86 = (llvm::Function *)v3;
    if (!*(_BYTE *)(v3 + 16))
    {
      while (1)
      {
        v87 = *((_QWORD *)v86 + 1);
        if (!v87)
          break;
        v88 = *(_QWORD *)(v87 + 24);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v88 + 40) + 40, (uint64_t ***)v88);
        v89 = *(_QWORD *)(v88 + 24);
        v90 = *(_QWORD **)(v88 + 32);
        *v90 = v89;
        *(_QWORD *)(v89 + 8) = v90;
        *(_QWORD *)(v88 + 24) = 0;
        *(_QWORD *)(v88 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v88);
      }
      llvm::Function::eraseFromParent(v86);
      v119 = 1;
    }
  }
  v4 = sub_1C4FB7E80(this[14], "llvm.dbg.declare", 0x10uLL);
  if (v4)
  {
    v91 = (llvm::Function *)v4;
    if (!*(_BYTE *)(v4 + 16))
    {
      while (1)
      {
        v92 = *((_QWORD *)v91 + 1);
        if (!v92)
          break;
        v93 = *(_QWORD *)(v92 + 24);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v93 + 40) + 40, (uint64_t ***)v93);
        v94 = *(_QWORD *)(v93 + 24);
        v95 = *(_QWORD **)(v93 + 32);
        *v95 = v94;
        *(_QWORD *)(v94 + 8) = v95;
        *(_QWORD *)(v93 + 24) = 0;
        *(_QWORD *)(v93 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v93);
      }
      llvm::Function::eraseFromParent(v91);
      v119 = 1;
    }
  }
  v5 = sub_1C4FB7E80(this[14], "llvm.dbg.label", 0xEuLL);
  if (v5)
  {
    v96 = (llvm::Function *)v5;
    if (!*(_BYTE *)(v5 + 16))
    {
      while (1)
      {
        v97 = *((_QWORD *)v96 + 1);
        if (!v97)
          break;
        v98 = *(_QWORD *)(v97 + 24);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v98 + 40) + 40, (uint64_t ***)v98);
        v99 = *(_QWORD *)(v98 + 24);
        v100 = *(_QWORD **)(v98 + 32);
        *v100 = v99;
        *(_QWORD *)(v99 + 8) = v100;
        *(_QWORD *)(v98 + 24) = 0;
        *(_QWORD *)(v98 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v98);
      }
      llvm::Function::eraseFromParent(v96);
      v119 = 1;
    }
  }
  v6 = sub_1C4FB7E80(this[14], "llvm.dbg.value", 0xEuLL);
  if (v6)
  {
    v101 = (llvm::Function *)v6;
    if (!*(_BYTE *)(v6 + 16))
    {
      while (1)
      {
        v102 = *((_QWORD *)v101 + 1);
        if (!v102)
          break;
        v103 = *(_QWORD *)(v102 + 24);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v103 + 40) + 40, (uint64_t ***)v103);
        v104 = *(_QWORD *)(v103 + 24);
        v105 = *(_QWORD **)(v103 + 32);
        *v105 = v104;
        *(_QWORD *)(v104 + 8) = v105;
        *(_QWORD *)(v103 + 24) = 0;
        *(_QWORD *)(v103 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v103);
      }
      llvm::Function::eraseFromParent(v101);
      v119 = 1;
    }
  }
  for (i = (uint64_t **)this[10]; i != this + 9; i = (uint64_t **)i[1])
    ;
  v106 = (char *)(this + 9);
  for (j = (uint64_t **)this[2]; j != this + 1; j = (uint64_t **)j[1])
  {
    if (j)
      v9 = (llvm::Value *)(j - 7);
    else
      v9 = 0;
    llvm::Value::eraseMetadata(v9, 0);
  }
  v10 = *this;
  v113[0] = 0;
  v113[1] = 0;
  v114 = 0;
  Impl = llvm::MDTuple::getImpl(v10, 0, 0, 0, 1);
  v116 = 0;
  v117 = 0;
  v115 = llvm::DISubroutineType::getImpl(v10, 0, 0, Impl, 0, 1);
  v118 = 0;
  v111 = v113;
  v112 = &v119;
  v12 = (llvm *)this[4];
  if (v12 != (llvm *)(this + 3))
  {
    while (1)
    {
      v107 = v12;
      v13 = v12 ? (char *)v12 - 56 : 0;
      if ((v13[23] & 0x20) != 0)
        break;
LABEL_35:
      v29 = v13 + 72;
      v30 = *((_QWORD *)v13 + 10);
      v108 = v13 + 72;
      while ((char *)v30 != v29)
      {
        v31 = v30 - 24;
        if (!v30)
          v31 = 0;
        v32 = v31 + 40;
        for (k = *(_QWORD *)(v31 + 48); k != v32; k = *(_QWORD *)(k + 8))
        {
          if (k)
            v34 = (unsigned __int8 *)(k - 24);
          else
            v34 = 0;
          v121 = &v111;
          v122 = this;
          v36 = (unsigned __int8 **)(v34 + 48);
          v35 = *((_QWORD *)v34 + 6);
          if (!v35)
            goto LABEL_66;
          v37 = *(unsigned int *)(v35 + 8);
          if ((_DWORD)v37 == 2)
            v38 = *(_QWORD *)(v35 - 8);
          else
            v38 = 0;
          v39 = (uint64_t *)(v35 - 8 * v37);
          v40 = *v39;
          if (*v39)
          {
            sub_1C539B278((uint64_t)v111, *v39);
            v41 = (_BYTE *)sub_1C539D218((uint64_t)v111, v40);
            v42 = (uint64_t)v41;
            if (v41)
            {
              switch(*v41)
              {
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 0xA:
                case 0xB:
                case 0xC:
                case 0xD:
                case 0xE:
                case 0xF:
                case 0x10:
                case 0x11:
                case 0x12:
                case 0x13:
                case 0x14:
                case 0x15:
                case 0x16:
                case 0x17:
                case 0x18:
                case 0x19:
                case 0x1A:
                case 0x1B:
                case 0x1C:
                case 0x1D:
                case 0x1E:
                case 0x1F:
                case 0x20:
                case 0x21:
                case 0x22:
                  break;
                default:
                  v42 = 0;
                  break;
              }
            }
            *v112 |= v42 != v40;
            v43 = (uint64_t **)v121;
            if (v38)
            {
LABEL_55:
              sub_1C539B278((uint64_t)*v43, v38);
              v45 = (_BYTE *)sub_1C539D218((uint64_t)*v43, v38);
              v44 = (uint64_t)v45;
              if (v45)
              {
                switch(*v45)
                {
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                  case 8:
                  case 9:
                  case 0xA:
                  case 0xB:
                  case 0xC:
                  case 0xD:
                  case 0xE:
                  case 0xF:
                  case 0x10:
                  case 0x11:
                  case 0x12:
                  case 0x13:
                  case 0x14:
                  case 0x15:
                  case 0x16:
                  case 0x17:
                  case 0x18:
                  case 0x19:
                  case 0x1A:
                  case 0x1B:
                  case 0x1C:
                  case 0x1D:
                  case 0x1E:
                  case 0x1F:
                  case 0x20:
                  case 0x21:
                  case 0x22:
                    break;
                  default:
                    v44 = 0;
                    break;
                }
              }
              *(_BYTE *)v43[1] |= v44 != v38;
              goto LABEL_59;
            }
          }
          else
          {
            v42 = 0;
            v43 = &v111;
            if (v38)
              goto LABEL_55;
          }
          v44 = 0;
LABEL_59:
          v46 = (unsigned __int8 *)llvm::DILocation::getImpl(*v122, *((_DWORD *)*v36 + 1), *((unsigned __int16 *)*v36 + 1), v42, v44, 0, 0, 1);
          v110 = v46;
          if (v46)
            llvm::MetadataTracking::track((uint64_t)&v110, v46, 2);
          if (&v110 == v36)
          {
            if (v110)
              llvm::MetadataTracking::untrack((uint64_t)&v110, v110);
          }
          else
          {
            if (*v36)
              llvm::MetadataTracking::untrack((uint64_t)(v34 + 48), *v36);
            v47 = v110;
            *v36 = v110;
            if (v47)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v110, v47, (uint64_t)(v34 + 48));
              v110 = 0;
            }
          }
LABEL_66:
          v109 = &v121;
          if ((v34[23] & 0x20) == 0)
            goto LABEL_67;
          v48 = ***(_QWORD ***)v34;
          v120 = v34;
          v49 = *(_DWORD *)(v48 + 2496);
          if (v49)
          {
            v50 = *(_QWORD *)(v48 + 2480);
            v51 = v49 - 1;
            v52 = v51 & ((v34 >> 4) ^ (v34 >> 9));
            v53 = (unsigned __int8 **)(v50 + 40 * v52);
            v54 = *v53;
            if (*v53 == v34)
              goto LABEL_80;
            v55 = 0;
            v56 = 1;
            while (v54 != (unsigned __int8 *)-4096)
            {
              if (v55)
                v57 = 0;
              else
                v57 = v54 == (unsigned __int8 *)-8192;
              if (v57)
                v55 = v53;
              v58 = v52 + v56++;
              v52 = v58 & v51;
              v53 = (unsigned __int8 **)(v50 + 40 * v52);
              v54 = *v53;
              if (*v53 == v34)
                goto LABEL_80;
            }
            if (v55)
              v63 = v55;
            else
              v63 = v53;
          }
          else
          {
            v63 = 0;
          }
          v53 = (unsigned __int8 **)sub_1C541AB24(v48 + 2480, (uint64_t)&v120, (uint64_t *)&v120, v63);
          v64 = v120;
          v53[4] = 0;
          v53[3] = 0;
          *v53 = v64;
          v53[1] = (unsigned __int8 *)(v53 + 3);
          v53[2] = (unsigned __int8 *)0x100000000;
LABEL_80:
          v59 = *((unsigned int *)v53 + 4);
          if ((_DWORD)v59)
          {
            v60 = (uint64_t *)(v53[1] + 8);
            v61 = 16 * v59;
            while (*((_DWORD *)v60 - 2) != 18)
            {
              v60 += 2;
              v61 -= 16;
              if (!v61)
                goto LABEL_67;
            }
            if (*v60)
            {
              v62 = sub_1C5399FD8(*v60, (uint64_t (*)(uint64_t))sub_1C539D390, (uint64_t)&v109);
              if (v62 || *v36 || (v34[23] & 0x20) != 0)
                llvm::Value::setMetadata((llvm::Value *)v34, 18, v62);
            }
          }
LABEL_67:
          if ((v34[23] & 0x20) != 0)
            llvm::Instruction::setMetadata((uint64_t)v34, "heapallocsite", 0xDuLL, 0);
        }
        v30 = *(_QWORD *)(v30 + 8);
        v29 = v108;
      }
      v12 = (llvm *)*((_QWORD *)v107 + 1);
      if (v12 == (llvm *)(this + 3))
        goto LABEL_113;
    }
    v14 = ***(_QWORD ***)v13;
    v121 = v13;
    v15 = *(_DWORD *)(v14 + 2496);
    if (v15)
    {
      v16 = *(_QWORD *)(v14 + 2480);
      v17 = v15 - 1;
      v18 = v17 & ((v13 >> 4) ^ (v13 >> 9));
      v19 = (char **)(v16 + 40 * v18);
      v20 = *v19;
      if (*v19 == v13)
        goto LABEL_29;
      v21 = 0;
      v22 = 1;
      while (v20 != (char *)-4096)
      {
        if (v21)
          v23 = 0;
        else
          v23 = v20 == (char *)-8192;
        if (v23)
          v21 = v19;
        v24 = v18 + v22++;
        v18 = v24 & v17;
        v19 = (char **)(v16 + 40 * v18);
        v20 = *v19;
        if (*v19 == v13)
          goto LABEL_29;
      }
      if (v21)
        v65 = v21;
      else
        v65 = v19;
    }
    else
    {
      v65 = 0;
    }
    v19 = (char **)sub_1C541AB24(v14 + 2480, (uint64_t)&v121, (uint64_t *)&v121, v65);
    v66 = (char *)v121;
    v19[4] = 0;
    v19[3] = 0;
    *v19 = v66;
    v19[1] = (char *)(v19 + 3);
    v19[2] = (char *)0x100000000;
LABEL_29:
    v25 = *((unsigned int *)v19 + 4);
    if ((_DWORD)v25)
    {
      v26 = (uint64_t *)(v19[1] + 8);
      v27 = 16 * v25;
      while (*((_DWORD *)v26 - 2))
      {
        v26 += 2;
        v27 -= 16;
        if (!v27)
          goto LABEL_35;
      }
      v28 = *v26;
      if (*v26)
      {
        sub_1C539B278((uint64_t)v113, *v26);
        v121 = 0;
        if (sub_1C6144BDC(v113[0], v114, v28, &v121))
          v67 = v121 == (void *)(v113[0] + 16 * v114);
        else
          v67 = 1;
        v68 = (llvm::MDNode *)v28;
        if (v67 || (v68 = (llvm::MDNode *)*((_QWORD *)v121 + 1)) != 0)
        {
          switch(*(_BYTE *)v68)
          {
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
            case 0xD:
            case 0xE:
            case 0xF:
            case 0x10:
            case 0x11:
            case 0x12:
            case 0x13:
            case 0x14:
            case 0x15:
            case 0x16:
            case 0x17:
            case 0x18:
            case 0x19:
            case 0x1A:
            case 0x1B:
            case 0x1C:
            case 0x1D:
            case 0x1E:
            case 0x1F:
            case 0x20:
            case 0x21:
            case 0x22:
              break;
            default:
              v68 = 0;
              break;
          }
        }
        v119 |= v28 != (_QWORD)v68;
        llvm::Value::setMetadata((llvm::Value *)v13, 0, v68);
      }
    }
    goto LABEL_35;
  }
LABEL_113:
  for (m = (uint64_t)this[10]; (char *)m != v106; m = *(_QWORD *)(m + 8))
  {
    v121 = v123;
    v122 = (uint64_t **)0x800000000;
    v70 = *(unsigned int *)(*(_QWORD *)(m + 48) + 8);
    if ((_DWORD)v70)
    {
      v71 = 0;
      v72 = 0;
      v73 = 8 * v70;
      do
      {
        v74 = **(_QWORD **)(m + 48);
        v75 = *(_QWORD *)(v74 + v71);
        if (v75)
        {
          sub_1C539B278((uint64_t)v111, *(_QWORD *)(v74 + v71));
          v76 = (_BYTE *)sub_1C539D218((uint64_t)v111, v75);
          v77 = v76;
          if (v76)
          {
            switch(*v76)
            {
              case 4:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
              case 0xA:
              case 0xB:
              case 0xC:
              case 0xD:
              case 0xE:
              case 0xF:
              case 0x10:
              case 0x11:
              case 0x12:
              case 0x13:
              case 0x14:
              case 0x15:
              case 0x16:
              case 0x17:
              case 0x18:
              case 0x19:
              case 0x1A:
              case 0x1B:
              case 0x1C:
              case 0x1D:
              case 0x1E:
              case 0x1F:
              case 0x20:
              case 0x21:
              case 0x22:
                break;
              default:
                v77 = 0;
                break;
            }
          }
          *v112 |= v77 != (_BYTE *)v75;
          v72 = v122;
        }
        else
        {
          v77 = 0;
        }
        if (v72 >= HIDWORD(v122))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, (uint64_t)v123, v72 + 1, 8);
          v72 = v122;
        }
        *((_QWORD *)v121 + v72) = v77;
        v72 = (_DWORD)v122 + 1;
        LODWORD(v122) = (_DWORD)v122 + 1;
        v71 += 8;
      }
      while (v73 != v71);
    }
    if (v119)
    {
      llvm::NamedMDNode::clearOperands(m);
      if ((_DWORD)v122)
      {
        v78 = (unsigned __int8 **)v121;
        v79 = 8 * v122;
        do
        {
          v80 = *v78;
          if (*v78)
          {
            v120 = *v78;
            v81 = *(_QWORD *)(m + 48);
            v82 = *(unsigned int *)(v81 + 8);
            if (v82 >= *(_DWORD *)(v81 + 12))
            {
              sub_1C5419FD8(*(_QWORD *)(m + 48), &v120);
            }
            else
            {
              v83 = (unsigned __int8 **)(*(_QWORD *)v81 + 8 * v82);
              *v83 = v80;
              llvm::MetadataTracking::track((uint64_t)v83, v80, 2);
              ++*(_DWORD *)(v81 + 8);
            }
          }
          ++v78;
          v79 -= 8;
        }
        while (v79);
      }
    }
    if (v121 != v123)
      free(v121);
  }
  v84 = v119;
  MEMORY[0x1CAA32FB4](v116, 8);
  MEMORY[0x1CAA32FB4](v113[0], 8);
  return v84;
}

void sub_1C539B278(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  unsigned int v12;
  _BYTE *v13;
  unsigned int v14;
  _BYTE *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[17];

  v25[16] = *MEMORY[0x1E0C80C00];
  if ((sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v23) & 1) == 0)
  {
    v4 = 0;
    v23 = v25;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v25[0] = a2;
    v24 = 0x1000000001;
    v5 = 1;
    while (1)
    {
      while (1)
      {
        v6 = *((_QWORD *)v23 + v5 - 1);
        v22 = 0;
        v7 = v21;
        if ((sub_1C539D0CC(v4, v21, v6, &v22) & 1) == 0)
          break;
        v4 = v19;
        sub_1C539C93C(a1, (unsigned __int8 *)v6);
        v5 = v24 - 1;
        LODWORD(v24) = v5;
        if (!v5)
        {
LABEL_33:
          MEMORY[0x1CAA32FB4](v4, 8);
          if (v23 != v25)
            free(v23);
          return;
        }
      }
      if (4 * (int)v20 + 4 >= 3 * v7)
      {
        v8 = 2 * v7;
      }
      else
      {
        if (v7 + ~(_DWORD)v20 - HIDWORD(v20) > v7 >> 3)
          goto LABEL_9;
        v8 = v7;
      }
      sub_1C539D160((uint64_t)&v19, v8);
      v22 = 0;
      sub_1C539D0CC(v19, v21, v6, &v22);
LABEL_9:
      LODWORD(v20) = v20 + 1;
      if (*v22 != -4096)
        --HIDWORD(v20);
      *v22 = v6;
      v4 = v19;
      v9 = *(unsigned int *)(v6 + 8);
      if ((_DWORD)v9)
      {
        v10 = (uint64_t *)(v6 - 8 * v9);
        v11 = v21;
        v12 = v21 - 1;
        while (1)
        {
          v13 = (_BYTE *)*v10;
          if (*v10 && *v13 - 4 <= 0x1E)
          {
            if (!v11)
              goto LABEL_23;
            v14 = v12 & ((v13 >> 4) ^ (v13 >> 9));
            v15 = *(_BYTE **)(v4 + 8 * v14);
            if (v13 != v15)
              break;
          }
LABEL_17:
          if (++v10 == (uint64_t *)v6)
            goto LABEL_30;
        }
        v16 = 1;
        while (v15 != (_BYTE *)-4096)
        {
          v17 = v14 + v16++;
          v14 = v17 & v12;
          v15 = *(_BYTE **)(v4 + 8 * v14);
          if (v13 == v15)
            goto LABEL_17;
        }
LABEL_23:
        if ((sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *v10, &v22) & 1) == 0
          && (*(_BYTE *)v6 != 17 || *(_BYTE **)(v6 + 56 - 8 * *(unsigned int *)(v6 + 8)) != v13)
          && *v13 != 16)
        {
          v18 = v24;
          if (v24 >= (unint64_t)HIDWORD(v24))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, (uint64_t)v25, v24 + 1, 8);
            v18 = v24;
          }
          *((_QWORD *)v23 + v18) = v13;
          LODWORD(v24) = v24 + 1;
        }
        goto LABEL_17;
      }
LABEL_30:
      v5 = v24;
      if (!(_DWORD)v24)
        goto LABEL_33;
    }
  }
}

uint64_t llvm::getDebugMetadataVersionFromModule(llvm *this, const llvm::Module *a2)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;

  result = llvm::Module::getModuleFlag((uint64_t)this, "Debug Info Version", 0x12uLL);
  if (result)
  {
    if (*(_BYTE *)result == 1 && (v3 = *(_QWORD *)(result + 128), *(_BYTE *)(v3 + 16) == 16))
    {
      v4 = (unsigned int *)(v3 + 24);
      if (*(_DWORD *)(v3 + 32) >= 0x41u)
        v4 = *(unsigned int **)v4;
      return *v4;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unsigned __int8 *llvm::Instruction::applyMergedLocation(llvm::Instruction *this, const llvm::DILocation *a2, const llvm::DILocation *a3)
{
  unsigned __int8 *result;
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  result = (unsigned __int8 *)llvm::DILocation::getMergedLocation(a2, a3, a3);
  v7 = result;
  if (result)
    result = (unsigned __int8 *)llvm::MetadataTracking::track((uint64_t)&v7, result, 2);
  v5 = (unsigned __int8 **)((char *)this + 48);
  if (&v7 == v5)
  {
    if (v7)
      return (unsigned __int8 *)llvm::MetadataTracking::untrack((uint64_t)&v7, v7);
  }
  else
  {
    if (*v5)
      result = (unsigned __int8 *)llvm::MetadataTracking::untrack((uint64_t)v5, *v5);
    v6 = v7;
    *v5 = v7;
    if (v6)
      return (unsigned __int8 *)llvm::MetadataTracking::retrack((uint64_t)&v7, v6, (uint64_t)v5);
  }
  return result;
}

unsigned __int8 **llvm::Instruction::dropLocation(unsigned __int8 **this)
{
  unsigned int v1;
  BOOL v2;
  uint64_t v3;
  llvm::Function *Function;
  uint64_t Subprogram;
  unsigned __int8 *Impl;
  unsigned __int8 *v8;
  unsigned __int8 **v9;
  unsigned __int8 **v10;
  uint64_t ***v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;

  if (!this[6])
    return this;
  v10 = this + 6;
  v11 = (uint64_t ***)this;
  v1 = *((unsigned __int8 *)this + 16) - 33;
  v2 = v1 > 0x33;
  v3 = (1 << v1) & 0x8000000000041;
  if (v2 || v3 == 0)
  {
    v14 = 0;
    this = sub_1C49264C4(v10, &v14);
    v8 = v14;
    if (!v14)
      return this;
    v9 = &v14;
    return (unsigned __int8 **)llvm::MetadataTracking::untrack((uint64_t)v9, v8);
  }
  Function = (llvm::Function *)llvm::Instruction::getFunction((llvm::Instruction *)this);
  Subprogram = llvm::Function::getSubprogram(Function);
  if (!Subprogram)
  {
    v12 = 0;
    this = sub_1C49264C4(v10, &v12);
    v8 = v12;
    if (!v12)
      return this;
    v9 = &v12;
    return (unsigned __int8 **)llvm::MetadataTracking::untrack((uint64_t)v9, v8);
  }
  Impl = (unsigned __int8 *)llvm::DILocation::getImpl(**v11, 0, 0, Subprogram, 0, 0, 0, 1);
  v13 = Impl;
  if (Impl)
    llvm::MetadataTracking::track((uint64_t)&v13, Impl, 2);
  this = sub_1C49264C4(v10, &v13);
  v8 = v13;
  if (v13)
  {
    v9 = &v13;
    return (unsigned __int8 **)llvm::MetadataTracking::untrack((uint64_t)v9, v8);
  }
  return this;
}

uint64_t LLVMDebugMetadataVersion()
{
  return 3;
}

uint64_t LLVMCreateDIBuilderDisallowUnresolved(_QWORD *a1)
{
  uint64_t v2;

  v2 = operator new();
  return llvm::DIBuilder::DIBuilder(v2, a1, 0, 0);
}

uint64_t LLVMCreateDIBuilder(_QWORD *a1)
{
  uint64_t v2;

  v2 = operator new();
  return llvm::DIBuilder::DIBuilder(v2, a1, 1, 0);
}

uint64_t LLVMStripModuleDebugInfo(llvm *a1, llvm::Module *a2)
{
  return llvm::StripDebugInfo(a1, a2);
}

uint64_t LLVMDisposeDIBuilder(uint64_t result)
{
  if (result)
  {
    sub_1C50F023C(result);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

uint64_t LLVMDIBuilderCreateCompileUnit(uint64_t a1, int a2, uint64_t a3, unsigned __int8 *a4, size_t a5, int a6, unsigned __int8 *a7, _QWORD *a8, int a9, unsigned __int8 *a10, size_t a11, int a12, unsigned int a13, int a14, int a15, unsigned __int8 *a16, size_t a17, unsigned __int8 *a18, size_t a19)
{
  return llvm::DIBuilder::createCompileUnit(a1, dword_1C85FD6D0[a2], a3, a4, a5, a6 != 0, a7, a8, a9, a10, a11, a12, a13, a14 != 0, a15 != 0, 0, 0, a16, a17,
           a18,
           a19);
}

llvm::MDNode *LLVMDIBuilderCreateFile(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, unsigned __int8 *a4, _QWORD *a5)
{
  uint64_t *v5;
  _BYTE v7[24];
  _BYTE v8[32];

  v5 = *(uint64_t **)(a1 + 8);
  v8[0] = 0;
  v8[24] = 0;
  v7[0] = 0;
  v7[16] = 0;
  return sub_1C5394260(v5, a2, a3, a4, a5, (uint64_t)v8, (uint64_t)v7, 0, 1u);
}

llvm::MDNode *LLVMDIBuilderCreateModule(uint64_t a1, _BYTE *a2, unsigned __int8 *a3, size_t a4, unsigned __int8 *a5, _QWORD *a6, unsigned __int8 *a7, size_t a8, unsigned __int8 *a9, size_t a10)
{
  uint64_t *v14;
  uint64_t v15;

  v14 = *(uint64_t **)(a1 + 8);
  if (a2)
  {
    if (*a2 == 16)
      v15 = 0;
    else
      v15 = (uint64_t)a2;
  }
  else
  {
    v15 = 0;
  }
  return sub_1C5394A8C(v14, 0, v15, a3, a4, a5, a6, a8, a7, a8, a9, a10, 0, 0, 0, 1);
}

llvm::MDNode *LLVMDIBuilderCreateNameSpace(uint64_t a1, _BYTE *a2, unsigned __int8 *a3, size_t a4, int a5)
{
  return llvm::DIBuilder::createNameSpace(a1, a2, a3, a4, a5 != 0);
}

uint64_t LLVMDIBuilderCreateFunction(uint64_t a1, _BYTE *a2, unsigned __int8 *a3, size_t a4, unsigned __int8 *a5, size_t a6, void *a7, int a8, void *a9, int a10, int a11, int a12, unsigned int a13, int a14)
{
  return llvm::DIBuilder::createFunction(a1, a2, a3, a4, a5, a6, a7, a8, a9, a12, a13, (4 * (a10 != 0)) | (8 * (a11 != 0)) | (16 * (a14 != 0)), 0, 0, 0, 0, "", 0);
}

llvm::MDNode *LLVMDIBuilderCreateLexicalBlock(uint64_t a1, _BYTE *a2, uint64_t a3, int a4, unsigned int a5)
{
  _QWORD *v5;

  v5 = *(_QWORD **)(a1 + 8);
  if (a2 && *a2 == 16)
    a2 = 0;
  return llvm::DILexicalBlock::getImpl(v5, (uint64_t)a2, a3, a4, a5, 1, 1);
}

llvm::MDNode *LLVMDIBuilderCreateLexicalBlockFile(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return llvm::DILexicalBlockFile::getImpl(*(_QWORD **)(a1 + 8), a2, a3, a4, 0, 1);
}

unsigned __int8 *LLVMDIBuilderCreateImportedModuleFromNamespace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_1C5392E84(*(uint64_t **)(a1 + 8), 58, a2, a3, a4, a5, 0, 0, 0, a1 + 248);
}

unsigned __int8 *LLVMDIBuilderCreateImportedModuleFromAlias(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, _QWORD *a6, unsigned int a7)
{
  uint64_t Impl;

  if (a7)
    Impl = llvm::MDTuple::getImpl(*(uint64_t **)(a1 + 8), a6, a7, 0, 1);
  else
    Impl = 0;
  return sub_1C5392E84(*(uint64_t **)(a1 + 8), 58, a2, a3, a4, a5, 0, 0, Impl, a1 + 248);
}

unsigned __int8 *LLVMDIBuilderCreateImportedModuleFromModule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, _QWORD *a6, unsigned int a7)
{
  uint64_t Impl;

  if (a7)
    Impl = llvm::MDTuple::getImpl(*(uint64_t **)(a1 + 8), a6, a7, 0, 1);
  else
    Impl = 0;
  return sub_1C5392E84(*(uint64_t **)(a1 + 8), 58, a2, a3, a4, a5, 0, 0, Impl, a1 + 248);
}

unsigned __int8 *LLVMDIBuilderCreateImportedDeclaration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned __int8 *a6, size_t a7, _QWORD *a8, unsigned int a9)
{
  uint64_t Impl;

  if (a9)
    Impl = llvm::MDTuple::getImpl(*(uint64_t **)(a1 + 8), a8, a9, 0, 1);
  else
    Impl = 0;
  return sub_1C5392E84(*(uint64_t **)(a1 + 8), 8, a2, a3, a4, a5, a6, a7, Impl, a1 + 248);
}

uint64_t LLVMDIBuilderCreateDebugLocation(uint64_t *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  return llvm::DILocation::getImpl(a1, a2, a3, a4, a5, 0, 0, 1);
}

uint64_t LLVMDILocationGetLine(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

uint64_t LLVMDILocationGetColumn(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 2);
}

uint64_t LLVMDILocationGetScope(uint64_t a1)
{
  return *(_QWORD *)(a1 - 8 * *(unsigned int *)(a1 + 8));
}

uint64_t LLVMDILocationGetInlinedAt(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) == 2)
    return *(_QWORD *)(a1 - 8);
  else
    return 0;
}

uint64_t LLVMDIScopeGetFile(uint64_t result)
{
  if (*(_BYTE *)result != 15)
    return *(_QWORD *)(result - 8 * *(unsigned int *)(result + 8));
  return result;
}

_DWORD *LLVMDIFileGetDirectory(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  int *v3;
  _DWORD *result;
  int v5;

  v2 = *(_QWORD *)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8);
  if (v2)
  {
    v3 = *(int **)(v2 + 8);
    v5 = *v3;
    result = v3 + 6;
    LODWORD(v2) = v5;
  }
  else
  {
    result = 0;
  }
  *a2 = v2;
  return result;
}

_DWORD *LLVMDIFileGetFilename(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  int *v3;
  _DWORD *result;
  int v5;

  v2 = *(_QWORD *)(a1 - 8 * *(unsigned int *)(a1 + 8));
  if (v2)
  {
    v3 = *(int **)(v2 + 8);
    v5 = *v3;
    result = v3 + 6;
    LODWORD(v2) = v5;
  }
  else
  {
    result = 0;
  }
  *a2 = v2;
  return result;
}

const char *LLVMDIFileGetSource(uint64_t a1, _DWORD *a2)
{
  int v2;
  _DWORD *v3;
  const char *result;
  int v5;

  v2 = *(unsigned __int8 *)(a1 + 56);
  if (*(_BYTE *)(a1 + 56))
  {
    v3 = *(_DWORD **)(*(_QWORD *)(a1 + 48) + 8);
    v5 = *v3;
    result = (const char *)(v3 + 6);
    v2 = v5;
  }
  else
  {
    result = "";
  }
  *a2 = v2;
  return result;
}

llvm::MDNode *LLVMDIBuilderCreateEnumerator(uint64_t a1, unsigned __int8 *a2, size_t a3, uint64_t a4, int a5)
{
  return llvm::DIBuilder::createEnumerator(a1, a2, a3, a4, a5 != 0);
}

uint64_t LLVMDIBuilderCreateEnumerationType(uint64_t a1, _BYTE *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, _QWORD *a9, unsigned int a10, uint64_t a11)
{
  uint64_t Impl;

  Impl = llvm::MDTuple::getImpl(*(uint64_t **)(a1 + 8), a9, a10, 0, 1);
  return llvm::DIBuilder::createEnumerationType(a1, a2, a3, a4, a5, a6, a7, a8, Impl, a11, "", 0, 0);
}

uint64_t LLVMDIBuilderCreateUnionType(uint64_t a1, _BYTE *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, _QWORD *a10, unsigned int a11, int a12, unsigned __int8 *a13, size_t a14)
{
  uint64_t Impl;

  Impl = llvm::MDTuple::getImpl(*(uint64_t **)(a1 + 8), a10, a11, 0, 1);
  return llvm::DIBuilder::createUnionType(a1, a2, a3, a4, a5, a6, a7, a8, a9, Impl, a12, a13, a14);
}

uint64_t LLVMDIBuilderCreateArrayType(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, _QWORD *a5, unsigned int a6)
{
  uint64_t Impl;

  Impl = llvm::MDTuple::getImpl(*(uint64_t **)(a1 + 8), a5, a6, 0, 1);
  return llvm::DIBuilder::createArrayType(a1, a2, a3, a4, Impl, 0, 0, 0, 0);
}

uint64_t LLVMDIBuilderCreateVectorType(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, _QWORD *a5, unsigned int a6)
{
  uint64_t Impl;

  Impl = llvm::MDTuple::getImpl(*(uint64_t **)(a1 + 8), a5, a6, 0, 1);
  return llvm::DIBuilder::createVectorType(a1, a2, a3, a4, Impl);
}

uint64_t LLVMDIBuilderCreatePointerType(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, unsigned __int8 *a6, size_t a7)
{
  return llvm::DIBuilder::createPointerType(a1, a2, a3, a4, a5 | 0x100000000, a6, a7, 0);
}

uint64_t LLVMDIBuilderCreateStructType(uint64_t a1, _BYTE *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, unsigned int a9, uint64_t a10, _QWORD *a11, unsigned int a12, int a13, uint64_t a14, unsigned __int8 *a15, size_t a16)
{
  uint64_t Impl;

  Impl = llvm::MDTuple::getImpl(*(uint64_t **)(a1 + 8), a11, a12, 0, 1);
  return llvm::DIBuilder::createStructType(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, Impl, a13, a14, a15, a16);
}

uint64_t LLVMDIBuilderCreateMemberType(uint64_t a1, _BYTE *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, uint64_t a7, int a8, uint64_t a9, int a10, uint64_t a11)
{
  return llvm::DIBuilder::createMemberType(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0);
}

llvm::MDNode *LLVMDIBuilderCreateUnspecifiedType(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  return sub_1C622B7A4(*(uint64_t **)(a1 + 8), 59, a2, a3);
}

uint64_t LLVMDIBuilderCreateStaticMemberType(uint64_t a1, llvm::Value *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, uint64_t a7, int a8, llvm::ValueAsMetadata *a9, int a10)
{
  return llvm::DIBuilder::createStaticMemberType(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t LLVMDIBuilderCreateObjCIVar(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, _BYTE *a4, int a5, uint64_t a6, int a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11)
{
  return llvm::DIBuilder::createObjCIVar(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

unsigned int *LLVMDIBuilderCreateObjCProperty(uint64_t a1, unsigned __int8 *a2, size_t a3, uint64_t a4, int a5, unsigned __int8 *a6, _QWORD *a7, unsigned __int8 *a8, size_t a9, int a10, uint64_t a11)
{
  return sub_1C5394448(*(uint64_t **)(a1 + 8), a2, a3, a4, a5, a6, a7, (uint64_t)a8, a8, a9, a10, a11, 0, 1);
}

llvm::MDNode *LLVMDIBuilderCreateObjectPointerType(uint64_t a1, llvm::MDNode *a2)
{
  return llvm::DIBuilder::createObjectPointerType(a2);
}

uint64_t LLVMDIBuilderCreateTypedef(uint64_t a1, uint64_t a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, _BYTE *a7, int a8)
{
  return llvm::DIBuilder::createTypedef(a1, a2, a3, a4, a5, a6, a7, a8, 0);
}

uint64_t LLVMDIBuilderCreateForwardDecl(uint64_t a1, int a2, unsigned __int8 *a3, size_t a4, _BYTE *a5, uint64_t a6, int a7, int a8, uint64_t a9, unsigned int a10, unsigned __int8 *a11, size_t a12)
{
  return llvm::DIBuilder::createForwardDecl(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t LLVMDIBuilderCreateReplaceableCompositeType(uint64_t a1, int a2, unsigned __int8 *a3, size_t a4, _BYTE *a5, uint64_t a6, int a7, int a8, uint64_t a9, unsigned int a10, unsigned int a11, unsigned __int8 *a12, size_t a13)
{
  return llvm::DIBuilder::createReplaceableCompositeType(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, 0);
}

uint64_t LLVMDIBuilderCreateReferenceType(uint64_t a1, int a2, uint64_t a3)
{
  return llvm::DIBuilder::createReferenceType(a1, a2, a3, 0, 0, 0);
}

llvm::MDNode *LLVMDIBuilderCreateNullPtrType(uint64_t a1)
{
  return sub_1C622B7A4(*(uint64_t **)(a1 + 8), 59, "decltype(nullptr)", 0x11uLL);
}

uint64_t LLVMDIBuilderCreateMemberPointerType(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, int a6)
{
  return llvm::DIBuilder::createMemberPointerType(a1, a2, a3, a5, a4, a6);
}

uint64_t LLVMDIBuilderCreateBitFieldMemberType(uint64_t a1, _BYTE *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, llvm::IntegerType *a9, int a10, uint64_t a11)
{
  return llvm::DIBuilder::createBitFieldMemberType(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0);
}

uint64_t LLVMDIBuilderCreateClassType(uint64_t a1, _BYTE *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, uint64_t a9, unsigned int a10, uint64_t a11, _QWORD *a12, unsigned int a13, uint64_t a14, uint64_t a15, unsigned __int8 *a16, size_t a17)
{
  uint64_t Impl;

  Impl = llvm::MDTuple::getImpl(*(uint64_t **)(a1 + 8), a12, a13, 0, 1);
  return llvm::DIBuilder::createClassType(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, Impl, a14, a15, a16, a17);
}

llvm::MDNode *LLVMDIBuilderCreateArtificialType(uint64_t a1, llvm::MDNode *a2)
{
  return llvm::DIBuilder::createArtificialType(a2);
}

_QWORD *LLVMDITypeGetName(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *result;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 - 8 * *(unsigned int *)(a1 + 8) + 16);
  if (v2)
  {
    v3 = *(uint64_t **)(v2 + 8);
    v5 = *v3;
    result = v3 + 3;
    v2 = v5;
  }
  else
  {
    result = 0;
  }
  *a2 = v2;
  return result;
}

uint64_t LLVMDITypeGetSizeInBits(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t LLVMDITypeGetOffsetInBits(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t LLVMDITypeGetAlignInBits(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t LLVMDITypeGetLine(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t LLVMDITypeGetFlags(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

char *LLVMDIBuilderCreateSubroutineType(uint64_t a1, uint64_t a2, _BYTE **a3, unsigned int a4, int a5)
{
  uint64_t TypeArray;

  TypeArray = llvm::DIBuilder::getOrCreateTypeArray(a1, a3, a4);
  return llvm::DISubroutineType::getImpl(*(_QWORD **)(a1 + 8), a5, 0, TypeArray, 0, 1);
}

llvm::MDNode *LLVMDIBuilderCreateExpression(uint64_t a1, const void *a2, uint64_t a3)
{
  return llvm::DIExpression::getImpl(*(_QWORD **)(a1 + 8), a2, a3, 0, 1);
}

llvm::MDNode *LLVMDIBuilderCreateConstantValueExpression(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD v4[4];

  v4[3] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 8);
  v4[0] = 16;
  v4[1] = a2;
  v4[2] = 159;
  return llvm::DIExpression::getImpl(v2, v4, 3, 0, 1);
}

llvm::MDNode *LLVMDIBuilderCreateGlobalVariableExpression(uint64_t a1, uint64_t a2, unsigned __int8 *a3, size_t a4, unsigned __int8 *a5, size_t a6, uint64_t a7, int a8, uint64_t a9, int a10, llvm::MDNode *a11, uint64_t a12, int a13)
{
  return llvm::DIBuilder::createGlobalVariableExpression(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10 != 0, 1, a11, a12, 0, a13, 0);
}

uint64_t LLVMDIGlobalVariableExpressionGetVariable(uint64_t a1)
{
  return *(_QWORD *)(a1 - 8 * *(unsigned int *)(a1 + 8));
}

uint64_t LLVMDIGlobalVariableExpressionGetExpression(uint64_t a1)
{
  return *(_QWORD *)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8);
}

uint64_t LLVMDIVariableGetFile(uint64_t a1)
{
  return *(_QWORD *)(a1 - 8 * *(unsigned int *)(a1 + 8) + 16);
}

uint64_t LLVMDIVariableGetScope(uint64_t a1)
{
  return *(_QWORD *)(a1 - 8 * *(unsigned int *)(a1 + 8));
}

uint64_t LLVMDIVariableGetLine(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t LLVMTemporaryMDNode(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  return llvm::MDTuple::getImpl(a1, a2, a3, 2, 1);
}

void LLVMMetadataReplaceAllUsesWith(llvm::MDNode *a1, llvm::Metadata *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)a1 + 2);
  if ((v3 & 4) != 0)
    llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v3 & 0xFFFFFFFFFFFFFFF8), a2);
  llvm::MDNode::deleteTemporary(a1, a2);
}

llvm::MDNode *LLVMDIBuilderCreateTempGlobalVariableFwdDecl(uint64_t a1, uint64_t a2, unsigned __int8 *a3, size_t a4, unsigned __int8 *a5, size_t a6, uint64_t a7, int a8, uint64_t a9, int a10, uint64_t a11, int a12)
{
  return sub_1C539481C(*(uint64_t **)(a1 + 8), a2, a3, a4, a5, a6, a7, a8, a9, a10 != 0, 0, a11, 0, a12, 0, 2, 1);
}

uint64_t LLVMDIBuilderInsertDeclareBefore(uint64_t a1, llvm::ValueAsMetadata *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return llvm::DIBuilder::insertDeclare(a1, a2, a3, a4, a5, *(_QWORD *)(a6 + 40), a6);
}

uint64_t LLVMDIBuilderInsertDbgValueBefore(uint64_t a1, llvm::ValueAsMetadata *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  v6 = a6;
  if (a6)
    a6 = *(_QWORD *)(a6 + 40);
  return llvm::DIBuilder::insertDbgValueIntrinsic(a1, a2, a3, a4, a5, a6, v6);
}

uint64_t LLVMDIBuilderInsertDbgValueAtEnd(uint64_t a1, llvm::ValueAsMetadata *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return llvm::DIBuilder::insertDbgValueIntrinsic(a1, a2, a3, a4, a5, a6, 0);
}

unsigned __int8 *LLVMDIBuilderCreateAutoVariable(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, size_t a4, uint64_t a5, int a6, uint64_t a7, int a8, int a9, int a10)
{
  return sub_1C5393B20(*(uint64_t **)(a1 + 8), a1 + 400, a2, a3, a4, 0, a5, a6, a7, a8 != 0, a9, a10, 0);
}

unsigned __int8 *LLVMDIBuilderCreateParameterVariable(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, size_t a4, int a5, uint64_t a6, int a7, uint64_t a8, int a9, int a10)
{
  return sub_1C5393B20(*(uint64_t **)(a1 + 8), a1 + 400, a2, a3, a4, a5, a6, a7, a8, a9 != 0, a10, 0, 0);
}

uint64_t LLVMDIBuilderGetOrCreateArray(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return llvm::MDTuple::getImpl(*(uint64_t **)(a1 + 8), a2, a3, 0, 1);
}

uint64_t LLVMGetSubprogram(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  if ((*(_BYTE *)(a1 + 23) & 0x20) == 0)
    return 0;
  v1 = ***(_QWORD ***)a1;
  v18 = a1;
  v2 = *(_DWORD *)(v1 + 2496);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 2480);
    v4 = v2 - 1;
    v5 = (v2 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    v6 = (_QWORD *)(v3 + 40 * v5);
    v7 = *v6;
    if (*v6 == a1)
      goto LABEL_12;
    v8 = 0;
    v9 = 1;
    while (v7 != -4096)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -8192;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (_QWORD *)(v3 + 40 * (v11 & v4));
      v7 = *v6;
      if (*v6 == a1)
        goto LABEL_12;
    }
    if (v8)
      v16 = v8;
    else
      v16 = v6;
  }
  else
  {
    v16 = 0;
  }
  v6 = sub_1C541AB24(v1 + 2480, (uint64_t)&v18, &v18, v16);
  v17 = v18;
  v6[3] = 0;
  v6[4] = 0;
  *v6 = v17;
  v6[1] = v6 + 3;
  v6[2] = 0x100000000;
LABEL_12:
  v12 = *((unsigned int *)v6 + 4);
  if (!(_DWORD)v12)
    return 0;
  v13 = v6[1] + 8;
  v14 = 16 * v12;
  result = 0;
  while (*(_DWORD *)(v13 - 8))
  {
    v13 += 16;
    v14 -= 16;
    if (!v14)
      return result;
  }
  return *(_QWORD *)v13;
}

void LLVMSetSubprogram(llvm::Value *a1, llvm::MDNode *a2)
{
  llvm::Value::setMetadata(a1, 0, a2);
}

uint64_t LLVMDISubprogramGetLine(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t LLVMInstructionGetDebugLoc(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t LLVMInstructionSetDebugLoc(uint64_t result, unsigned __int8 *a2)
{
  unsigned __int8 **v2;
  unsigned __int8 *v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;

  v2 = (unsigned __int8 **)(result + 48);
  if (a2)
  {
    v6 = a2;
    result = llvm::MetadataTracking::track((uint64_t)&v6, a2, 2);
    if (&v6 == v2)
    {
      if (v6)
        return llvm::MetadataTracking::untrack((uint64_t)&v6, v6);
    }
    else
    {
      if (*v2)
        result = llvm::MetadataTracking::untrack((uint64_t)v2, *v2);
      v3 = v6;
      *v2 = v6;
      if (v3)
      {
        v4 = &v6;
        return llvm::MetadataTracking::retrack((uint64_t)v4, v3, (uint64_t)v2);
      }
    }
  }
  else
  {
    v5 = 0;
    if (&v5 != v2)
    {
      if (*v2)
      {
        result = llvm::MetadataTracking::untrack(result + 48, *v2);
        v3 = v5;
        *v2 = v5;
        if (v3)
        {
          v4 = &v5;
          return llvm::MetadataTracking::retrack((uint64_t)v4, v3, (uint64_t)v2);
        }
      }
      else
      {
        *v2 = 0;
      }
    }
  }
  return result;
}

uint64_t LLVMGetMetadataKind(char *a1)
{
  unint64_t v1;

  v1 = *a1;
  if (v1 > 0x22)
    return 8;
  else
    return dword_1C85FD770[v1];
}

uint64_t sub_1C539C7F8(llvm::SmallPtrSetImplBase *a1, _QWORD *a2, unsigned __int8 *a3)
{
  int v4;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;

  if (!a3)
    return 0;
  v4 = *a3;
  if (v4 == 5)
    return 1;
  if (v4 != 4 && (v4 - 6) >= 0x1D)
    return 0;
  v7 = sub_1C477672C((uint64_t)a2, (uint64_t)a3);
  v8 = a2[1];
  v9 = v8 == *a2 ? (unsigned int *)((char *)a2 + 20) : (unsigned int *)(a2 + 2);
  if (v7 != (_QWORD *)(v8 + 8 * *v9))
    return 1;
  sub_1C4774094(a1, (uint64_t)a3);
  if (v11)
  {
    v12 = *((unsigned int *)a3 + 2);
    if ((_DWORD)v12)
    {
      v13 = -8 * v12;
      while (1)
      {
        result = sub_1C539C7F8(a1, a2, *(_QWORD *)&a3[v13]);
        if ((_DWORD)result)
          break;
        v13 += 8;
        if (!v13)
          return result;
      }
      sub_1C4774094((llvm::SmallPtrSetImplBase *)a2, (uint64_t)a3);
      return 1;
    }
  }
  return 0;
}

_BYTE *sub_1C539C8DC(uint64_t *a1, _BYTE *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  if (*a2 == 5)
    return 0;
  v4 = (_QWORD *)*a1;
  v5 = sub_1C477672C(*a1, (uint64_t)a2);
  v6 = v4[1];
  v7 = 16;
  if (v6 == *v4)
    v7 = 20;
  if (v5 == (_QWORD *)(v6 + 8 * *(unsigned int *)((char *)v4 + v7)))
    return a2;
  else
    return 0;
}

uint64_t sub_1C539C93C(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result;
  void *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  size_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  void *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  size_t v27;
  uint64_t v28;
  _QWORD *v29;
  unsigned __int8 *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  size_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  size_t v42;
  unsigned __int8 *v43;
  _QWORD *v44;
  _QWORD *v45;
  unsigned __int8 *v46;
  size_t v47;
  _QWORD *v48;
  size_t v49;
  uint64_t Impl;
  _QWORD *v51;
  size_t v52;
  uint64_t v53;
  size_t v54;
  const void *v55;
  size_t *v56;
  size_t v57;
  unsigned __int8 *v58;
  size_t v59;
  size_t *v60;
  size_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  size_t v66;
  unsigned __int8 *v67;
  size_t *v68;
  size_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  size_t v72;
  uint64_t v73;
  _QWORD *v74;
  size_t *v75;
  size_t v76;
  uint64_t *v77;
  uint64_t v78;
  _QWORD *v79;
  size_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  void *v95;
  size_t v96;
  _QWORD v97[3];
  void *v98;
  _OWORD v99[4];
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  result = sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (uint64_t)a2, &v98);
  if ((result & 1) == 0)
  {
    if (a2)
    {
      v6 = *a2;
      v5 = a2;
      switch(*a2)
      {
        case 0xEu:
          v5 = *(void **)(a1 + 24);
          break;
        case 0xFu:
          break;
        case 0x10u:
          if (*((_QWORD *)a2 + 5))
            goto LABEL_3;
          v8 = sub_1C539D218(a1, *(_QWORD *)&a2[-8 * *((unsigned int *)a2 + 2)]);
          v9 = *((_QWORD *)a2 + 2);
          v10 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFF8);
          if ((v9 & 4) != 0)
            v10 = (uint64_t *)*v10;
          v11 = &a2[-8 * *((unsigned int *)a2 + 2)];
          v12 = *((_QWORD *)v11 + 1);
          if (v12)
          {
            v26 = *(_QWORD **)(v12 + 8);
            v27 = *v26;
            v14 = (unsigned __int8 *)(v26 + 3);
            v13 = v27;
          }
          else
          {
            v13 = 0;
            v14 = 0;
          }
          v28 = *((_QWORD *)v11 + 2);
          if (v28)
          {
            v44 = *(_QWORD **)(v28 + 8);
            v45 = (_QWORD *)*v44;
            v30 = (unsigned __int8 *)(v44 + 3);
            v29 = v45;
          }
          else
          {
            v29 = 0;
            v30 = 0;
          }
          v46 = (unsigned __int8 *)*((_QWORD *)v11 + 3);
          if (v46)
          {
            v56 = (size_t *)*((_QWORD *)v46 + 1);
            v57 = *v56;
            v46 = (unsigned __int8 *)(v56 + 3);
            v47 = v57;
          }
          else
          {
            v47 = 0;
          }
          v58 = (unsigned __int8 *)*((_QWORD *)v11 + 9);
          if (v58)
          {
            v68 = (size_t *)*((_QWORD *)v58 + 1);
            v69 = *v68;
            v58 = (unsigned __int8 *)(v68 + 3);
            v59 = v69;
          }
          else
          {
            v59 = 0;
          }
          v70 = *((_QWORD *)v11 + 8);
          v71 = (unsigned __int8 *)*((_QWORD *)v11 + 10);
          if (v71)
          {
            v75 = (size_t *)*((_QWORD *)v71 + 1);
            v76 = *v75;
            v71 = (unsigned __int8 *)(v75 + 3);
            v72 = v76;
          }
          else
          {
            v72 = 0;
          }
          Impl = (uint64_t)sub_1C5394078(v10, *((_DWORD *)a2 + 6), v8, v14, v13, a2[28] != 0, v30, v29, *((_DWORD *)a2 + 8), v46, v47, 2, 0, 0, 0, v70, *((_QWORD *)a2 + 5), a2[48] != 0, a2[49] != 0,
                            *((_DWORD *)a2 + 13),
                            a2[56] != 0,
                            v58,
                            v59,
                            v71,
                            v72,
                            1);
          goto LABEL_75;
        case 0x11u:
          sub_1C539C93C(a1, *(_QWORD *)&a2[-8 * *((unsigned int *)a2 + 2) + 40]);
          v15 = (uint64_t)a2;
          if (*a2 != 15)
            v15 = *(_QWORD *)&a2[-8 * *((unsigned int *)a2 + 2)];
          v16 = (void *)sub_1C539D218(a1, v15);
          v17 = &a2[-8 * *((unsigned int *)a2 + 2)];
          v18 = *((_QWORD *)v17 + 2);
          if (v18 && **(_QWORD **)(v18 + 8))
          {
            v21 = 0;
            v20 = "";
          }
          else
          {
            v19 = *((_QWORD *)v17 + 3);
            if (v19)
            {
              v24 = *(_QWORD **)(v19 + 8);
              v25 = *v24;
              v20 = (unsigned __int8 *)(v24 + 3);
              v21 = v25;
            }
            else
            {
              v20 = 0;
              v21 = 0;
            }
          }
          v31 = (void *)sub_1C539D218(a1, *((_QWORD *)v17 + 4));
          v32 = *((unsigned int *)a2 + 2);
          if (v32 < 9)
            v33 = 0;
          else
            v33 = *(_QWORD *)&a2[-8 * v32 + 64];
          v34 = sub_1C539D218(a1, v33);
          v35 = sub_1C539D218(a1, *(_QWORD *)&a2[-8 * *((unsigned int *)a2 + 2) + 40]);
          v36 = *((_QWORD *)a2 + 2);
          v37 = (uint64_t *)(v36 & 0xFFFFFFFFFFFFFFF8);
          if ((a2[1] & 0x7F) == 1)
          {
            if ((v36 & 4) != 0)
              v37 = (uint64_t *)*v37;
            v38 = *(_QWORD *)&a2[-8 * *((unsigned int *)a2 + 2) + 16];
            if (v38)
            {
              v48 = *(_QWORD **)(v38 + 8);
              v49 = *v48;
              v40 = (unsigned __int8 *)(v48 + 3);
              v39 = v49;
            }
            else
            {
              v39 = 0;
              v40 = 0;
            }
            Impl = sub_1C539490C(v37, v16, v40, v39, v20, v21, v16, *((_DWORD *)a2 + 6), v31, *((_DWORD *)a2 + 7), v34, *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5), v35, 0, 0, 0, 0, 0,
                     "",
                     0,
                     1,
                     1);
          }
          else
          {
            if ((v36 & 4) != 0)
              v37 = (uint64_t *)*v37;
            v41 = *(_QWORD *)&a2[-8 * *((unsigned int *)a2 + 2) + 16];
            if (v41)
            {
              v51 = *(_QWORD **)(v41 + 8);
              v52 = *v51;
              v43 = (unsigned __int8 *)(v51 + 3);
              v42 = v52;
            }
            else
            {
              v42 = 0;
              v43 = 0;
            }
            v95 = v31;
            v96 = v21;
            v5 = (void *)sub_1C539490C(v37, v16, v43, v42, v20, v21, v16, *((_DWORD *)a2 + 6), v31, *((_DWORD *)a2 + 7), v34, *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5), v35, 0, 0, 0, 0, 0,
                           "",
                           0,
                           0,
                           1);
            v53 = *(_QWORD *)&a2[-8 * *((unsigned int *)a2 + 2) + 24];
            if (v53)
            {
              v60 = *(size_t **)(v53 + 8);
              v61 = *v60;
              v55 = v60 + 3;
              v54 = v61;
            }
            else
            {
              v54 = 0;
              v55 = 0;
            }
            v62 = *(_QWORD *)(a1 + 32);
            v98 = 0;
            if (!sub_1C617A1AC(v62, *(_DWORD *)(a1 + 48), (uint64_t)v5, &v98)
              || v98 == (void *)(*(_QWORD *)(a1 + 32) + 24 * *(unsigned int *)(a1 + 48)))
            {
              v73 = *(_QWORD *)&a2[-8 * *((unsigned int *)a2 + 2) + 24];
              if (v73)
              {
                v77 = *(uint64_t **)(v73 + 8);
                v78 = *v77;
                v74 = v77 + 3;
                v73 = v78;
              }
              else
              {
                v74 = 0;
              }
              v98 = v5;
              *(_QWORD *)&v99[0] = v74;
              *((_QWORD *)&v99[0] + 1) = v73;
              sub_1C6225784((uint64_t)v97, a1 + 32, (uint64_t *)&v98, v99);
              break;
            }
            if (*((_QWORD *)v98 + 2) == v54 && (!v54 || !memcmp(*((const void **)v98 + 1), v55, v54)))
              break;
            v63 = *((_QWORD *)a2 + 2);
            v64 = (uint64_t *)(v63 & 0xFFFFFFFFFFFFFFF8);
            if ((v63 & 4) != 0)
              v64 = (uint64_t *)*v64;
            v65 = *(_QWORD *)&a2[-8 * *((unsigned int *)a2 + 2) + 16];
            if (v65)
            {
              v79 = *(_QWORD **)(v65 + 8);
              v80 = *v79;
              v67 = (unsigned __int8 *)(v79 + 3);
              v66 = v80;
            }
            else
            {
              v66 = 0;
              v67 = 0;
            }
            Impl = sub_1C539490C(v64, v16, v67, v66, v20, v96, v16, *((_DWORD *)a2 + 6), v95, *((_DWORD *)a2 + 7), v34, *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5), v35, 0, 0, 0, 0, 0,
                     "",
                     0,
                     1,
                     1);
          }
          goto LABEL_75;
        default:
          if ((v6 & 0xFE) == 0x12)
          {
            v7 = (_BYTE *)sub_1C539D218(a1, *(_QWORD *)&a2[-8 * *((unsigned int *)a2 + 2) + 8]);
            v5 = v7;
            if (v7)
            {
              switch(*v7)
              {
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 0xA:
                case 0xB:
                case 0xC:
                case 0xD:
                case 0xE:
                case 0xF:
                case 0x10:
                case 0x11:
                case 0x12:
                case 0x13:
                case 0x14:
                case 0x15:
                case 0x16:
                case 0x17:
                case 0x18:
                case 0x19:
                case 0x1A:
                case 0x1B:
                case 0x1C:
                case 0x1D:
                case 0x1E:
                case 0x1F:
                case 0x20:
                case 0x21:
                case 0x22:
                  goto LABEL_4;
                default:
                  goto LABEL_3;
              }
            }
          }
          else
          {
            if (v6 > 0x22)
              goto LABEL_76;
            if (((1 << v6) & 0x69FFC7F00) != 0)
              goto LABEL_3;
            if (v6 == 5)
            {
              v22 = sub_1C539D218(a1, *(_QWORD *)&a2[-8 * *((unsigned int *)a2 + 2)]);
              if (*((_DWORD *)a2 + 2) == 2)
                v23 = *((_QWORD *)a2 - 1);
              else
                v23 = 0;
              v84 = sub_1C539D218(a1, v23);
              v85 = *((_QWORD *)a2 + 2);
              v86 = (uint64_t *)(v85 & 0xFFFFFFFFFFFFFFF8);
              if ((a2[1] & 0x7F) == 1)
              {
                if ((v85 & 4) != 0)
                  v86 = (uint64_t *)*v86;
                v87 = *((_DWORD *)a2 + 1);
                v88 = *((unsigned __int16 *)a2 + 1);
                v89 = v22;
                v90 = 1;
              }
              else
              {
                if ((v85 & 4) != 0)
                  v86 = (uint64_t *)*v86;
                v87 = *((_DWORD *)a2 + 1);
                v88 = *((unsigned __int16 *)a2 + 1);
                v89 = v22;
                v90 = 0;
              }
              Impl = llvm::DILocation::getImpl(v86, v87, v88, v89, v84, 0, v90, 1);
LABEL_75:
              v5 = (void *)Impl;
            }
            else
            {
LABEL_76:
              v98 = (char *)v99 + 8;
              *(_QWORD *)&v99[0] = 0x800000000;
              v81 = *((unsigned int *)a2 + 2);
              if (v81 >= 9)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, (uint64_t)v99 + 8, v81, 8);
                LODWORD(v81) = *((_DWORD *)a2 + 2);
              }
              if ((_DWORD)v81)
              {
                v91 = -8 * v81;
                do
                {
                  v92 = *(_QWORD *)&a2[v91];
                  if (v92)
                  {
                    v97[0] = 0;
                    if (sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v92, v97))
                      v93 = v97[0] == *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
                    else
                      v93 = 1;
                    if (!v93)
                      v92 = *(_QWORD *)(v97[0] + 8);
                    v94 = LODWORD(v99[0]);
                    if (LODWORD(v99[0]) >= (unint64_t)DWORD1(v99[0]))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, (uint64_t)v99 + 8, LODWORD(v99[0]) + 1, 8);
                      v94 = LODWORD(v99[0]);
                    }
                    *((_QWORD *)v98 + v94) = v92;
                    ++LODWORD(v99[0]);
                  }
                  v91 += 8;
                }
                while (v91);
              }
              v82 = *((_QWORD *)a2 + 2);
              v83 = (uint64_t *)(v82 & 0xFFFFFFFFFFFFFFF8);
              if ((v82 & 4) != 0)
                v83 = (uint64_t *)*v83;
              v5 = (void *)llvm::MDTuple::getImpl(v83, v98, LODWORD(v99[0]), 0, 1);
              if (v98 != (char *)v99 + 8)
                free(v98);
            }
          }
          break;
      }
    }
    else
    {
LABEL_3:
      v5 = 0;
    }
LABEL_4:
    v98 = a2;
    result = (uint64_t)sub_1C61B6040((uint64_t *)a1, &v98);
    *(_QWORD *)(result + 8) = v5;
  }
  return result;
}

uint64_t sub_1C539D0CC(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 8 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v10 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v8 = v6;
        v13 = v5 + v9++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 8 * (v13 & v4));
        v7 = *v6;
        v10 = 1;
        if (*v6 == a3)
          goto LABEL_7;
      }
      v10 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v10 = 0;
  }
LABEL_7:
  *a4 = v6;
  return v10;
}

_QWORD *sub_1C539D160(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C622E0E8(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C539D218(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v5;
  uint64_t v6;

  v2 = a2;
  if (a2)
  {
    v6 = 0;
    if (sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v6))
      v5 = v6 == *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
    else
      v5 = 1;
    if (!v5)
      return *(_QWORD *)(v6 + 8);
  }
  return v2;
}

_QWORD *sub_1C539D284(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4DA97DC(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C539D2E0((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C539D2E0(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4E58334(a1, v7);
  v9 = 0;
  sub_1C4DA97DC((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

unsigned __int8 *sub_1C539D390(uint64_t **a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned __int8 *Impl;
  unsigned __int8 *v14;
  unsigned __int8 *v15;

  v2 = a2;
  if (!a2 || *a2 != 5)
    return v2;
  v3 = *a1;
  v14 = a2;
  llvm::MetadataTracking::track((uint64_t)&v14, a2, 2);
  v4 = *((unsigned int *)v14 + 2);
  v5 = *(_QWORD *)&v14[-8 * v4];
  if ((_DWORD)v4 == 2)
    v6 = *((_QWORD *)v14 - 1);
  else
    v6 = 0;
  v7 = *v3;
  if (v5)
  {
    sub_1C539B278(*(_QWORD *)v7, *(_QWORD *)&v14[-8 * v4]);
    v8 = (_BYTE *)sub_1C539D218(*(_QWORD *)v7, v5);
    v9 = (uint64_t)v8;
    if (v8)
    {
      switch(*v8)
      {
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0xE:
        case 0xF:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1C:
        case 0x1D:
        case 0x1E:
        case 0x1F:
        case 0x20:
        case 0x21:
        case 0x22:
          break;
        default:
          v9 = 0;
          break;
      }
    }
    **(_BYTE **)(v7 + 8) |= v9 != v5;
    v7 = *v3;
    if (v6)
      goto LABEL_13;
  }
  else
  {
    v9 = 0;
    if (v6)
    {
LABEL_13:
      sub_1C539B278(*(_QWORD *)v7, v6);
      v11 = (_BYTE *)sub_1C539D218(*(_QWORD *)v7, v6);
      v10 = (uint64_t)v11;
      if (v11)
      {
        switch(*v11)
        {
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
          case 0xE:
          case 0xF:
          case 0x10:
          case 0x11:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x1C:
          case 0x1D:
          case 0x1E:
          case 0x1F:
          case 0x20:
          case 0x21:
          case 0x22:
            break;
          default:
            v10 = 0;
            break;
        }
      }
      **(_BYTE **)(v7 + 8) |= v10 != v6;
      goto LABEL_17;
    }
  }
  v10 = 0;
LABEL_17:
  Impl = (unsigned __int8 *)llvm::DILocation::getImpl(*(uint64_t **)v3[1], *((_DWORD *)v14 + 1), *((unsigned __int16 *)v14 + 1), v9, v10, 0, 0, 1);
  v15 = Impl;
  if (Impl)
  {
    llvm::MetadataTracking::track((uint64_t)&v15, Impl, 2);
    v2 = v15;
    if (v15)
      llvm::MetadataTracking::untrack((uint64_t)&v15, v15);
  }
  else
  {
    v2 = 0;
  }
  if (v14)
    llvm::MetadataTracking::untrack((uint64_t)&v14, v14);
  return v2;
}

uint64_t llvm::DILocation::DILocation(uint64_t this, uint64_t a2, char a3, int a4, __int16 a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  __int16 v9;
  int v10;
  int v12;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  char *v19;
  unsigned __int8 **v20;
  char v21;
  unint64_t v22;
  char v23;

  v8 = a8;
  v9 = a5;
  v10 = a4;
  *(_BYTE *)this = 5;
  v12 = a3 & 0x7F;
  *(_BYTE *)(this + 1) = a3 & 0x7F;
  *(_WORD *)(this + 2) = 0;
  *(_DWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 8) = a7;
  *(_DWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 16) = a2;
  if (a7)
  {
    v16 = 0;
    v17 = 8 * a7;
    do
    {
      v18 = *(unsigned __int8 **)(a6 + 8 * v16);
      v19 = (char *)(this - 8 * *(unsigned int *)(this + 8));
      v20 = (unsigned __int8 **)&v19[8 * v16];
      v21 = *(_BYTE *)(this + 1);
      if (*v20)
        llvm::MetadataTracking::untrack((uint64_t)&v19[8 * v16], *v20);
      *v20 = v18;
      if (v18)
      {
        if ((v21 & 0x7F) != 0)
          v22 = 2;
        else
          v22 = this | 2;
        llvm::MetadataTracking::track((uint64_t)v20, v18, v22);
      }
      ++v16;
      v17 -= 8;
    }
    while (v17);
    v12 = *(_BYTE *)(this + 1) & 0x7F;
    v8 = a8;
    v9 = a5;
    v10 = a4;
  }
  if (!v12)
  {
    llvm::MDNode::countUnresolvedOperands(this);
    LOBYTE(v12) = *(_BYTE *)(this + 1) & 0x7F;
  }
  *(_DWORD *)(this + 4) = v10;
  *(_WORD *)(this + 2) = v9;
  if (v8)
    v23 = 0x80;
  else
    v23 = 0;
  *(_BYTE *)(this + 1) = v12 | v23;
  return this;
}

{
  int v8;
  __int16 v9;
  int v10;
  int v12;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  char *v19;
  unsigned __int8 **v20;
  char v21;
  unint64_t v22;
  char v23;

  v8 = a8;
  v9 = a5;
  v10 = a4;
  *(_BYTE *)this = 5;
  v12 = a3 & 0x7F;
  *(_BYTE *)(this + 1) = a3 & 0x7F;
  *(_WORD *)(this + 2) = 0;
  *(_DWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 8) = a7;
  *(_DWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 16) = a2;
  if (a7)
  {
    v16 = 0;
    v17 = 8 * a7;
    do
    {
      v18 = *(unsigned __int8 **)(a6 + 8 * v16);
      v19 = (char *)(this - 8 * *(unsigned int *)(this + 8));
      v20 = (unsigned __int8 **)&v19[8 * v16];
      v21 = *(_BYTE *)(this + 1);
      if (*v20)
        llvm::MetadataTracking::untrack((uint64_t)&v19[8 * v16], *v20);
      *v20 = v18;
      if (v18)
      {
        if ((v21 & 0x7F) != 0)
          v22 = 2;
        else
          v22 = this | 2;
        llvm::MetadataTracking::track((uint64_t)v20, v18, v22);
      }
      ++v16;
      v17 -= 8;
    }
    while (v17);
    v12 = *(_BYTE *)(this + 1) & 0x7F;
    v8 = a8;
    v9 = a5;
    v10 = a4;
  }
  if (!v12)
  {
    llvm::MDNode::countUnresolvedOperands(this);
    LOBYTE(v12) = *(_BYTE *)(this + 1) & 0x7F;
  }
  *(_DWORD *)(this + 4) = v10;
  *(_WORD *)(this + 2) = v9;
  if (v8)
    v23 = 0x80;
  else
    v23 = 0;
  *(_BYTE *)(this + 1) = v12 | v23;
  return this;
}

uint64_t llvm::DILocation::getImpl(uint64_t *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8)
{
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  int i;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unsigned __int8 **v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unsigned __int8 *v39;
  uint64_t v40;
  unsigned __int8 **v41;
  char v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  int v54;
  unsigned __int8 v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  int v64;
  BOOL v65;
  unsigned int v66;
  uint64_t *v67;
  uint64_t *v68;
  int v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unint64_t v75;
  int v76;
  unsigned int v77;
  unsigned __int16 v78;
  uint64_t v79;
  int v80;
  uint64_t v81[9];

  v11 = a1;
  v81[8] = *MEMORY[0x1E0C80C00];
  if (HIWORD(a3))
    v12 = 0;
  else
    v12 = a3;
  v13 = &unk_1ED7EA000;
  if (!a7)
  {
    v16 = *a1;
    v17 = *(_DWORD *)(*a1 + 480);
    if (v17)
    {
      v18 = *(_QWORD *)(v16 + 464);
      memset(&v81[1], 0, 17);
      v19 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
      if ((v19 & 1) == 0)
      {
        v72 = a5;
        v73 = a4;
        v80 = a8;
        v79 = v12;
        v74 = __cxa_guard_acquire(&qword_1ED7EAC88);
        v12 = v79;
        v13 = &unk_1ED7EA000;
        a8 = v80;
        a4 = v73;
        a5 = v72;
        if (v74)
        {
          v75 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override)
            v75 = 0xFF51AFD7ED558CCDLL;
          qword_1ED7EAC80 = v75;
          __cxa_guard_release(&qword_1ED7EAC88);
          v12 = v79;
          v13 = (_QWORD *)&unk_1ED7EA000;
          a8 = v80;
          a4 = v73;
          a5 = v72;
        }
      }
      v20 = v13[400];
      v81[1] = a4;
      v81[2] = a5;
      LOBYTE(v81[3]) = a6;
      v21 = __ROR8__(0xB492B66FBE98F273 * (a2 | (unint64_t)(v12 << 32)) - a4, 43)
          - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)&v81[1] + 1)
          + __ROR8__((0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)&v81[2] + 1)) ^ v20, 30);
      v22 = __ROR8__(a4 ^ 0xC949D7C7509E6557, 20);
      v23 = 0x9DDFEA08EB382D69
          * ((v22
            + v20
            - 0x4B6D499041670D8DLL * (a2 | (unint64_t)(v12 << 32))
            - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)&v81[2] + 1)
            + 25) ^ ((0x9DDFEA08EB382D69
                    * (v21 ^ (v22
                            + v20
                            - 0x4B6D499041670D8DLL * (a2 | (unint64_t)(v12 << 32))
                            - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)&v81[2] + 1)
                            + 25))) >> 47) ^ (0x9DDFEA08EB382D69
                                            * (v21 ^ (v22
                                                    + v20
                                                    - 0x4B6D499041670D8DLL * (a2 | (unint64_t)(v12 << 32))
                                                    - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)&v81[2] + 1)
                                                    + 25))));
      v24 = -348639895 * ((v23 >> 47) ^ v23);
      for (i = 1; ; ++i)
      {
        v26 = v24 & (v17 - 1);
        v27 = *(_QWORD *)(v18 + 8 * v26);
        if (v27 == -4096)
          break;
        if (v27 != -8192 && *(_DWORD *)(v27 + 4) == a2 && (_DWORD)v12 == *(unsigned __int16 *)(v27 + 2))
        {
          v28 = *(unsigned int *)(v27 + 8);
          v29 = (_QWORD *)(v27 - 8 * v28);
          if (*v29 == a4)
          {
            v30 = (_DWORD)v28 == 2 ? v29[1] : 0;
            if (v30 == a5 && a6 == *(unsigned __int8 *)(v27 + 1) >> 7)
            {
              v31 = v18 + 8 * v26;
              v32 = *(_QWORD *)(v16 + 464) + 8 * *(unsigned int *)(v16 + 480);
              if (v31 == v32)
                v33 = 0;
              else
                v33 = *(_QWORD *)(v18 + 8 * v26);
              if (v31 == v32)
              {
                v11 = a1;
                if ((a8 & 1) != 0)
                  goto LABEL_5;
              }
              return v33;
            }
          }
        }
        v24 = i + v26;
      }
    }
    v11 = a1;
    if (!a8)
      return 0;
  }
LABEL_5:
  v81[1] = (uint64_t)&v81[3];
  v81[3] = a4;
  v81[2] = 0x200000001;
  v78 = v12;
  v77 = a2;
  if (a5)
  {
    v81[4] = a5;
    LODWORD(v81[2]) = 2;
    v14 = 16;
  }
  else
  {
    v14 = 8;
  }
  v34 = (char *)operator new(v14 + 24);
  bzero(v34, v14);
  v33 = (uint64_t)&v34[v14];
  v35 = (unsigned __int8 **)v81[1];
  v36 = LODWORD(v81[2]);
  *(_BYTE *)v33 = 5;
  *(_BYTE *)(v33 + 1) = a7 & 0x7F;
  *(_WORD *)(v33 + 2) = 0;
  *(_DWORD *)(v33 + 4) = 0;
  *(_QWORD *)(v33 + 8) = v36;
  *(_QWORD *)(v33 + 16) = v11;
  v76 = a6;
  v37 = 8 * v36;
  v38 = &v34[v14];
  do
  {
    v39 = *v35;
    v40 = *(unsigned int *)(v33 + 8);
    v41 = (unsigned __int8 **)&v38[-8 * v40];
    v42 = *(_BYTE *)(v33 + 1);
    if (*v41)
      llvm::MetadataTracking::untrack((uint64_t)&v38[-8 * v40], *v41);
    *v41 = v39;
    if (v39)
    {
      if ((v42 & 0x7F) != 0)
        v43 = 2;
      else
        v43 = v33 | 2;
      llvm::MetadataTracking::track((uint64_t)v41, v39, v43);
    }
    ++v35;
    v38 += 8;
    v37 -= 8;
  }
  while (v37);
  v44 = *(_BYTE *)(v33 + 1) & 0x7F;
  if (!v44)
  {
    llvm::MDNode::countUnresolvedOperands(v33);
    v44 = *(_BYTE *)(v33 + 1) & 0x7F;
  }
  *(_DWORD *)(v33 + 4) = v77;
  *(_WORD *)(v33 + 2) = v78;
  if (v76)
    v45 = -128;
  else
    v45 = 0;
  *(_BYTE *)(v33 + 1) = v44 | v45;
  v46 = *v11;
  v81[0] = v33;
  if (a7)
  {
    if (a7 == 1)
      llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v33);
    goto LABEL_62;
  }
  v47 = *(_DWORD *)(v46 + 480);
  if (v47)
  {
    v48 = *(unsigned int *)(v33 + 8);
    v49 = (uint64_t *)(v33 - 8 * v48);
    v50 = *v49;
    if ((_DWORD)v48 == 2)
      v51 = v49[1];
    else
      v51 = 0;
    v52 = &unk_1ED7EA000;
    v53 = *(_QWORD *)(v46 + 464);
    v54 = (v45 >> 7) & 1;
    memset(&v81[5], 0, 17);
    v55 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v55 & 1) == 0)
    {
      v70 = __cxa_guard_acquire(&qword_1ED7EAC88);
      v52 = &unk_1ED7EA000;
      if (v70)
      {
        v71 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v71 = 0xFF51AFD7ED558CCDLL;
        qword_1ED7EAC80 = v71;
        __cxa_guard_release(&qword_1ED7EAC88);
        v52 = (_QWORD *)&unk_1ED7EA000;
      }
    }
    v56 = v52[400];
    v81[5] = v50;
    v81[6] = v51;
    LOBYTE(v81[7]) = v54;
    v57 = __ROR8__((0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)&v81[6] + 1)) ^ v56, 30);
    v58 = __ROR8__(v50 ^ 0xC949D7C7509E6557, 20)
        + v56
        - 0x4B6D499041670D8DLL * (v77 | ((unint64_t)v78 << 32))
        - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)&v81[6] + 1)
        + 25;
    v59 = 0x9DDFEA08EB382D69
        * ((__ROR8__(0xB492B66FBE98F273 * (v77 | ((unint64_t)v78 << 32)) - v50, 43)
          - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)&v81[5] + 1)
          + v57) ^ v58);
    v60 = (-348639895
         * ((((0x9DDFEA08EB382D69 * (v58 ^ (v59 >> 47) ^ v59)) >> 32) >> 15) ^ (-348639895
                                                                                              * (v58 ^ (v59 >> 47) ^ v59)))) & (v47 - 1);
    v61 = (uint64_t *)(v53 + 8 * v60);
    v62 = *v61;
    if (v33 == *v61)
      goto LABEL_62;
    v63 = 0;
    v64 = 1;
    while (v62 != -4096)
    {
      if (v63)
        v65 = 0;
      else
        v65 = v62 == -8192;
      if (v65)
        v63 = v61;
      v66 = v60 + v64++;
      v60 = v66 & (v47 - 1);
      v61 = (uint64_t *)(v53 + 8 * v60);
      v62 = *v61;
      if (v33 == *v61)
        goto LABEL_62;
    }
    if (v63)
      v67 = v63;
    else
      v67 = v61;
  }
  else
  {
    v67 = 0;
  }
  v68 = sub_1C53A76B8(v46 + 464, (uint64_t)v81, v81, v67);
  *v68 = v81[0];
  v33 = v81[0];
LABEL_62:
  if ((uint64_t *)v81[1] != &v81[3])
    free((void *)v81[1]);
  return v33;
}

llvm::DILocation *llvm::DILocation::getMergedLocations(llvm::DILocation **a1, uint64_t a2, const llvm::DILocation *a3)
{
  llvm::DILocation *MergedLocation;
  const llvm::DILocation **v4;
  uint64_t i;
  const llvm::DILocation *v6;
  uint64_t v7;

  if (a2 == 1)
    return *a1;
  if (!a2)
    return 0;
  v4 = a1 + 1;
  MergedLocation = *a1;
  for (i = 8 * a2 - 8; i; i -= 8)
  {
    v6 = *v4++;
    MergedLocation = llvm::DILocation::getMergedLocation(MergedLocation, v6, a3);
    v7 = 0;
    if (!MergedLocation)
      return (llvm::DILocation *)v7;
  }
  return MergedLocation;
}

llvm::DILocation *llvm::DILocation::getMergedLocation(llvm::DILocation *this, const llvm::DILocation *a2, const llvm::DILocation *a3)
{
  uint64_t Impl;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  llvm::DIScope *Scope;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  llvm::DIScope **v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  llvm::DIScope *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  __int128 v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  int v43;
  _BYTE v44[64];
  void *v45;
  uint64_t v46;
  _BYTE v47[80];
  _QWORD **v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;

  Impl = 0;
  v51 = *MEMORY[0x1E0C80C00];
  if (!this || !a2)
    return (llvm::DILocation *)Impl;
  if (this == a2)
    return this;
  v40 = v44;
  v41 = v44;
  v42 = 8;
  v43 = 0;
  v6 = *((_DWORD *)this + 2);
  if (v6 == 2)
  {
    v7 = *((_QWORD *)this - 1);
    if (v7)
    {
      do
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v40, v7);
        if (*(_DWORD *)(v7 + 8) != 2)
          break;
        v7 = *(_QWORD *)(v7 - 8);
      }
      while (v7);
      v6 = *((_DWORD *)this + 2);
    }
    else
    {
      v6 = 2;
    }
  }
  v8 = 0;
  v45 = v47;
  v46 = 0x500000000;
  v49 = 0;
  v50 = 0;
  v48 = &v49;
  v9 = (char *)this - 8 * v6;
  Scope = *(llvm::DIScope **)v9;
  if (v6 == 2)
    v8 = *((_QWORD *)v9 + 1);
  if (Scope)
  {
    while (1)
    {
      *(_QWORD *)&v39 = Scope;
      *((_QWORD *)&v39 + 1) = v8;
      if (v50)
        goto LABEL_15;
      v11 = (char *)v45;
      v12 = v46;
      if ((_DWORD)v46)
      {
        v13 = 16 * v46;
        v14 = (char *)v45 + 8;
        while ((llvm::DIScope *)*(v14 - 1) != Scope || *v14 != v8)
        {
          v14 += 2;
          v13 -= 16;
          if (!v13)
            goto LABEL_25;
        }
        if (v13)
          goto LABEL_29;
LABEL_25:
        if (v46 >= 5)
          break;
      }
      if (v46 >= HIDWORD(v46))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, (uint64_t)v47, v46 + 1, 16);
        v11 = (char *)v45;
        v12 = v46;
      }
      v16 = (llvm::DIScope **)&v11[16 * v12];
      *v16 = Scope;
      v16[1] = (llvm::DIScope *)v8;
      LODWORD(v46) = v46 + 1;
LABEL_29:
      Scope = (llvm::DIScope *)llvm::DIScope::getScope(Scope);
      if (Scope || !v8)
        goto LABEL_33;
      v17 = *(unsigned int *)(v8 + 8);
      v18 = v8 - 8 * v17;
      Scope = *(llvm::DIScope **)v18;
      if ((_DWORD)v17 == 2)
      {
        v8 = *(_QWORD *)(v18 + 8);
LABEL_33:
        if (!Scope)
          goto LABEL_38;
      }
      else
      {
        v8 = 0;
        if (!Scope)
          goto LABEL_38;
      }
    }
    do
    {
      sub_1C53A7DFC((uint64_t *)&v48, *((_QWORD *)v45 + 2 * v12 - 2), *((_QWORD *)v45 + 2 * v12 - 1), (_OWORD *)v45 + v12 - 1);
      LODWORD(v12) = v46 - 1;
      LODWORD(v46) = v46 - 1;
    }
    while ((_DWORD)v46);
LABEL_15:
    sub_1C53A7DFC((uint64_t *)&v48, (unint64_t)Scope, v8, &v39);
    goto LABEL_29;
  }
LABEL_38:
  v19 = *((unsigned int *)a2 + 2);
  v20 = (char *)a2 - 8 * v19;
  v21 = *(llvm::DIScope **)v20;
  if ((_DWORD)v19 == 2)
  {
    v22 = *((_QWORD *)v20 + 1);
    if (!v21)
    {
LABEL_70:
      v21 = (llvm::DIScope *)*((_QWORD *)this - *((unsigned int *)this + 2));
      goto LABEL_71;
    }
  }
  else
  {
    v22 = 0;
    if (!v21)
      goto LABEL_70;
  }
  v24 = v49;
  v23 = v50;
  v25 = v46;
  v26 = 16 * v46;
  v27 = (char *)v45 + 8;
  while (v23)
  {
    if (v24)
    {
      v28 = v24;
      while (1)
      {
        v29 = v28[4];
        if (v29 <= (unint64_t)v21)
        {
          if (v29 < (unint64_t)v21)
            goto LABEL_50;
          v30 = v28[5];
          if (v30 <= v22)
            break;
        }
LABEL_51:
        v28 = (_QWORD *)*v28;
        if (!v28)
          goto LABEL_62;
      }
      if (v30 >= v22)
        goto LABEL_69;
LABEL_50:
      ++v28;
      goto LABEL_51;
    }
LABEL_62:
    v21 = (llvm::DIScope *)llvm::DIScope::getScope(v21);
    if (!v21 && v22)
    {
      v34 = *(unsigned int *)(v22 + 8);
      v35 = v22 - 8 * v34;
      v21 = *(llvm::DIScope **)v35;
      if ((_DWORD)v34 == 2)
        v22 = *(_QWORD *)(v35 + 8);
      else
        v22 = 0;
    }
    if (!v21)
      goto LABEL_70;
  }
  if (!v25)
    goto LABEL_62;
  v31 = v27;
  v32 = v26;
  while ((llvm::DIScope *)*(v31 - 1) != v21 || *v31 != v22)
  {
    v31 += 2;
    v32 -= 16;
    if (!v32)
      goto LABEL_62;
  }
  if (!v32)
    goto LABEL_62;
LABEL_69:
  if (*(unsigned __int8 *)v21 - 17 >= 3)
    goto LABEL_70;
LABEL_71:
  v36 = *((_QWORD *)a2 + 2);
  v37 = (uint64_t *)(v36 & 0xFFFFFFFFFFFFFFF8);
  if ((v36 & 4) != 0)
    v37 = (uint64_t *)*v37;
  Impl = llvm::DILocation::getImpl(v37, 0, 0, (uint64_t)v21, v22, 0, 0, 1);
  sub_1C6143384(v49);
  if (v45 != v47)
    free(v45);
  if (v41 != v40)
    free(v41);
  return (llvm::DILocation *)Impl;
}

uint64_t llvm::DIScope::getScope(llvm::DIScope *this)
{
  int v1;
  uint64_t v2;
  unsigned int v3;

  v1 = *(unsigned __int8 *)this;
  if ((v1 - 11) < 4 || v1 == 17 || v1 == 33 || (v1 & 0xFE) == 0x12)
    goto LABEL_8;
  if (v1 == 31)
  {
    v2 = *((unsigned int *)this + 2);
    return *((_QWORD *)this - v2);
  }
  if (v1 == 21 || v1 == 20)
  {
LABEL_8:
    v3 = *((_DWORD *)this + 2);
    this = (llvm::DIScope *)((char *)this + 8);
    v2 = v3;
    return *((_QWORD *)this - v2);
  }
  return 0;
}

uint64_t llvm::DINode::getTag(llvm::DINode *this)
{
  return *((unsigned __int16 *)this + 1);
}

uint64_t llvm::DINode::getFlag(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  int v3;
  uint64_t v12;
  char v46;
  char v47;
  char v52;

  v2 = 0;
  v3 = 1;
  switch(a2)
  {
    case 10:
      if (*(_QWORD *)a1 != 0x655A67616C464944 || *(_WORD *)(a1 + 8) != 28530)
        goto LABEL_6;
      v2 = 0x100000000;
      goto LABEL_218;
    case 11:
LABEL_36:
      if (*(_QWORD *)a1 != 0x685467616C464944 || *(_QWORD *)(a1 + 3) != 0x6B6E75685467616CLL)
        goto LABEL_172;
      v12 = 0x2000000;
      goto LABEL_217;
    case 12:
      if (*(_QWORD *)a1 == 0x755067616C464944 && *(_DWORD *)(a1 + 8) == 1667853410)
      {
        v2 = 0x100000003;
        goto LABEL_218;
      }
      if (*(_QWORD *)a1 == 0x655667616C464944 && *(_DWORD *)(a1 + 8) == 1919906915)
      {
        v2 = 0x100000800;
        goto LABEL_218;
      }
      goto LABEL_172;
    case 13:
      if (*(_QWORD *)a1 == 0x725067616C464944 && *(_QWORD *)(a1 + 5) == 0x6574617669725067)
      {
        v3 = 0;
        v2 = 0x100000001;
        goto LABEL_173;
      }
      if (*(_QWORD *)a1 == 0x774667616C464944 && *(_QWORD *)(a1 + 5) == 0x6C63654464774667)
      {
        v2 = 0x100000004;
        goto LABEL_218;
      }
      if (*(_QWORD *)a1 == 0x695667616C464944 && *(_QWORD *)(a1 + 5) == 0x6C61757472695667)
      {
        v2 = 0x100000020;
        goto LABEL_218;
      }
      goto LABEL_172;
    case 14:
      if (*(_QWORD *)a1 == 0x784567616C464944 && *(_QWORD *)(a1 + 6) == 0x746963696C707845)
      {
        v2 = 0x100000080;
        goto LABEL_218;
      }
      v2 = 0;
      v3 = 1;
      switch(a2)
      {
        case 11:
          goto LABEL_36;
        case 14:
          if (*(_QWORD *)a1 == 0x694267616C464944 && *(_QWORD *)(a1 + 6) == 0x646C656946746942)
          {
            v2 = 0x100080000;
            goto LABEL_218;
          }
          if (*(_QWORD *)a1 == 0x6F4E67616C464944 && *(_QWORD *)(a1 + 6) == 0x6E72757465526F4ELL)
          {
            v2 = 0x100100000;
            goto LABEL_218;
          }
          break;
        case 15:
          goto LABEL_46;
        case 16:
          goto LABEL_65;
        default:
          goto LABEL_173;
      }
      goto LABEL_172;
    case 15:
      if (*(_QWORD *)a1 == 0x725067616C464944 && *(_QWORD *)(a1 + 7) == 0x6465746365746F72)
      {
        v12 = 2;
        goto LABEL_217;
      }
LABEL_46:
      if (*(_QWORD *)a1 == 0x6E4567616C464944 && *(_QWORD *)(a1 + 7) == 0x7373616C436D756ELL)
      {
        v2 = 0x101000000;
        goto LABEL_218;
      }
      goto LABEL_172;
    case 16:
      if (*(_QWORD *)a1 == 0x704167616C464944 && *(_QWORD *)(a1 + 8) == 0x6B636F6C42656C70)
      {
        v2 = 0x100000008;
        goto LABEL_218;
      }
      if (*(_QWORD *)a1 == 0x724167616C464944 && *(_QWORD *)(a1 + 8) == 0x6C61696369666974)
      {
        v2 = 0x100000040;
        goto LABEL_218;
      }
      if (*(_QWORD *)a1 == 0x725067616C464944 && *(_QWORD *)(a1 + 8) == 0x64657079746F746FLL)
      {
        v2 = 0x100000100;
        goto LABEL_218;
      }
      if (a2 != 16)
        goto LABEL_172;
LABEL_65:
      if (*(_QWORD *)a1 != 0x6F4E67616C464944 || *(_QWORD *)(a1 + 8) != 0x6C6169766972546ELL)
      {
LABEL_6:
        v2 = 0;
        goto LABEL_218;
      }
      v12 = 0x4000000;
      goto LABEL_217;
    case 18:
      if (*(_QWORD *)a1 == 0x655267616C464944
        && *(_QWORD *)(a1 + 8) == 0x6942646576726573
        && *(_WORD *)(a1 + 16) == 13428)
      {
        v2 = 0x100000010;
        goto LABEL_218;
      }
      if (*(_QWORD *)a1 == 0x745367616C464944
        && *(_QWORD *)(a1 + 8) == 0x626D654D63697461
        && *(_WORD *)(a1 + 16) == 29285)
      {
        v2 = 0x100001000;
        goto LABEL_218;
      }
      goto LABEL_172;
    case 19:
      if (*(_QWORD *)a1 == 0x624F67616C464944
        && *(_QWORD *)(a1 + 8) == 0x6E696F507463656ALL
        && *(_QWORD *)(a1 + 11) == 0x7265746E696F5074)
      {
        v2 = 0x100000400;
      }
      else if (*(_QWORD *)a1 ^ 0x784567616C464944 | *(_QWORD *)(a1 + 8) ^ 0x626D795374726F70 | *(_QWORD *)(a1 + 11) ^ 0x736C6F626D795374)
      {
        v2 = 0;
      }
      else
      {
        v2 = 0x100008000;
      }
      goto LABEL_218;
    case 21:
      v2 = 0x100002000;
      if (*(_QWORD *)a1 == 0x564C67616C464944
        && *(_QWORD *)(a1 + 8) == 0x6566655265756C61
        && *(_QWORD *)(a1 + 13) == 0x65636E6572656665)
      {
        goto LABEL_218;
      }
      if (*(_QWORD *)a1 == 0x565267616C464944
        && *(_QWORD *)(a1 + 8) == 0x6566655265756C61
        && *(_QWORD *)(a1 + 13) == 0x65636E6572656665)
      {
        v2 = 0x100004000;
        goto LABEL_218;
      }
      if (*(_QWORD *)a1 == 0x795467616C464944
        && *(_QWORD *)(a1 + 8) == 0x7942737361506570
        && *(_QWORD *)(a1 + 13) == 0x65756C6156794273)
      {
        v2 = 0x100400000;
        goto LABEL_218;
      }
      goto LABEL_172;
    case 23:
      if (*(_QWORD *)a1 == 0x624F67616C464944
        && *(_QWORD *)(a1 + 8) == 0x437373616C43636ALL
        && *(_QWORD *)(a1 + 15) == 0x6574656C706D6F43)
      {
        v2 = 0x100000200;
        goto LABEL_218;
      }
      if (*(_QWORD *)a1 == 0x695367616C464944
        && *(_QWORD *)(a1 + 8) == 0x65686E49656C676ELL
        && *(_QWORD *)(a1 + 15) == 0x65636E6174697265)
      {
        v2 = 0x100010000;
        goto LABEL_218;
      }
      if (*(_QWORD *)a1 == 0x6E4967616C464944
        && *(_QWORD *)(a1 + 8) == 0x64656375646F7274
        && *(_QWORD *)(a1 + 15) == 0x6C61757472695664)
      {
        v2 = 0x100040000;
        goto LABEL_218;
      }
      goto LABEL_172;
    case 24:
      if (*(_QWORD *)a1 != 0x695667616C464944
        || *(_QWORD *)(a1 + 8) != 0x686E496C61757472
        || *(_QWORD *)(a1 + 16) != 0x65636E6174697265)
      {
        goto LABEL_172;
      }
      v2 = 0x100030000;
      goto LABEL_218;
    case 25:
      if (*(_QWORD *)a1 == 0x754D67616C464944
        && *(_QWORD *)(a1 + 8) == 0x6E49656C7069746CLL
        && *(_QWORD *)(a1 + 16) == 0x636E617469726568
        && *(_BYTE *)(a1 + 24) == 101)
      {
        v2 = 0x100020000;
        goto LABEL_218;
      }
      if (*(_QWORD *)a1 == 0x795467616C464944
        && *(_QWORD *)(a1 + 8) == 0x7942737361506570
        && *(_QWORD *)(a1 + 16) == 0x636E657265666552
        && *(_BYTE *)(a1 + 24) == 101)
      {
        v2 = 0x100800000;
        goto LABEL_218;
      }
LABEL_172:
      v2 = 0;
      v3 = 1;
LABEL_173:
      if (a2 == 15 && v3)
      {
        if (*(_QWORD *)a1 != 0x694267616C464944 || *(_QWORD *)(a1 + 7) != 0x6E6169646E456769)
          goto LABEL_218;
        v12 = 0x8000000;
LABEL_217:
        v2 = v12 & 0xFFFF0000FFFFFFFFLL | 0x100000000;
        goto LABEL_218;
      }
      v46 = v3 ^ 1;
      if (a2 == 18)
        v47 = v3 ^ 1;
      else
        v47 = 1;
      if ((v47 & 1) != 0)
      {
        if (a2 != 23)
          v46 = 1;
        if ((v46 & 1) != 0)
        {
          v52 = v3 ^ 1;
          if (a2 != 25)
            v52 = 1;
          if ((v52 & 1) == 0
            && !(*(_QWORD *)a1 ^ 0x6E4967616C464944 | *(_QWORD *)(a1 + 8) ^ 0x6956746365726964 | *(_QWORD *)(a1 + 16) ^ 0x7361426C61757472 | *(unsigned __int8 *)(a1 + 24) ^ 0x65))
          {
            v2 = 0x100000024;
          }
        }
        else if (*(_QWORD *)a1 == 0x6C4167616C464944
               && *(_QWORD *)(a1 + 8) == 0x6544736C6C61436CLL
               && *(_QWORD *)(a1 + 15) == 0x6465626972637365)
        {
          v12 = 0x20000000;
          goto LABEL_217;
        }
      }
      else if (*(_QWORD *)a1 == 0x694C67616C464944
             && *(_QWORD *)(a1 + 8) == 0x69646E45656C7474
             && *(_WORD *)(a1 + 16) == 28257)
      {
        v12 = 0x10000000;
        goto LABEL_217;
      }
LABEL_218:
      if ((v2 & 0x300000000) != 0)
        return v2;
      else
        return 0;
    default:
      goto LABEL_173;
  }
}

const char *llvm::DINode::getFlagString(int a1)
{
  const char *result;

  if (a1 == 256)
    return "DIFlagPrototyped";
  if (a1 > 0x7FFFFFF)
  {
    switch(a1)
    {
      case 0x20000000:
        return "DIFlagAllCallsDescribed";
      case 0x8000000:
        return "DIFlagBigEndian";
      case 0x10000000:
        return "DIFlagLittleEndian";
    }
    return (const char *)&unk_1C86BF3B6;
  }
  if (a1 > 127)
  {
    if (a1 <= 4095)
    {
      if (a1 > 2047)
      {
        if (a1 == 2048)
          return "DIFlagVector";
      }
      else
      {
        switch(a1)
        {
          case 1024:
            return "DIFlagObjectPointer";
          case 128:
            return "DIFlagExplicit";
          case 512:
            return "DIFlagObjcClassComplete";
        }
      }
    }
    else if (a1 >= 0x8000)
    {
      if (a1 >= 0x800000)
      {
        if (a1 <= 0x3FFFFFF)
        {
          switch(a1)
          {
            case 0x800000:
              return "DIFlagTypePassByReference";
            case 0x1000000:
              return "DIFlagEnumClass";
            case 0x2000000:
              return "DIFlagThunk";
          }
        }
        else if (a1 == 0x4000000)
        {
          return "DIFlagNonTrivial";
        }
      }
      else if (a1 < 0x100000)
      {
        if (a1 < 196608)
        {
          switch(a1)
          {
            case 0x8000:
              return "DIFlagExportSymbols";
            case 0x10000:
              return "DIFlagSingleInheritance";
            case 0x20000:
              return "DIFlagMultipleInheritance";
          }
        }
        else
        {
          switch(a1)
          {
            case 0x80000:
              return "DIFlagBitField";
            case 0x30000:
              return "DIFlagVirtualInheritance";
            case 0x40000:
              return "DIFlagIntroducedVirtual";
          }
        }
      }
      else
      {
        if (a1 == 0x400000)
          return "DIFlagTypePassByValue";
        if (a1 == 0x100000)
          return "DIFlagNoReturn";
      }
    }
    else
    {
      switch(a1)
      {
        case 0x1000:
          return "DIFlagStaticMember";
        case 0x2000:
          return "DIFlagLValueReference";
        case 0x4000:
          return "DIFlagRValueReference";
      }
    }
    return (const char *)&unk_1C86BF3B6;
  }
  if (a1 > 63)
  {
    if (a1 == 64)
      return "DIFlagArtificial";
    return (const char *)&unk_1C86BF3B6;
  }
  result = "DIFlagZero";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      return "DIFlagPrivate";
    case 2:
      return "DIFlagProtected";
    case 3:
      return "DIFlagPublic";
    case 4:
      return "DIFlagFwdDecl";
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return (const char *)&unk_1C86BF3B6;
    case 8:
      return "DIFlagAppleBlock";
    case 16:
      return "DIFlagReservedBit4";
    default:
      if (a1 == 32)
        return "DIFlagVirtual";
      if (a1 != 36)
        return (const char *)&unk_1C86BF3B6;
      result = "DIFlagIndirectVirtualBase";
      break;
  }
  return result;
}

uint64_t llvm::DINode::splitFlags(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  int v143;
  uint64_t v144;

  v2 = result & 3;
  if ((result & 3) != 0)
  {
    if (v2 == 1)
    {
      v13 = *(_DWORD *)(a2 + 8);
      v14 = *(_DWORD *)(a2 + 12);
      v15 = 1;
    }
    else
    {
      v13 = *(_DWORD *)(a2 + 8);
      v14 = *(_DWORD *)(a2 + 12);
      if (v2 == 2)
        v15 = 2;
      else
        v15 = 3;
    }
    if (v13 >= v14)
    {
      v127 = result;
      v128 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v13 + 1, 4);
      a2 = v128;
      LODWORD(result) = v127;
      v13 = *(_DWORD *)(v128 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v13) = v15;
    ++*(_DWORD *)(a2 + 8);
    result = (v2 ^ 0x3FFFFFFF) & result;
  }
  v3 = result & 0x30000;
  if ((result & 0x30000) != 0)
  {
    v32 = a2;
    v33 = result;
    v34 = result & 0x30000;
    if (v3 == 0x20000)
    {
      v35 = *(_DWORD *)(a2 + 8);
      v36 = *(_DWORD *)(a2 + 12);
      v37 = 0x20000;
    }
    else if (v3 == 0x10000)
    {
      v35 = *(_DWORD *)(a2 + 8);
      v36 = *(_DWORD *)(a2 + 12);
      v37 = 0x10000;
    }
    else
    {
      v35 = *(_DWORD *)(a2 + 8);
      v36 = *(_DWORD *)(a2 + 12);
      v37 = 196608;
    }
    if (v35 >= v36)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v35 + 1, 4);
      v35 = *(_DWORD *)(v32 + 8);
    }
    a2 = v32;
    *(_DWORD *)(*(_QWORD *)v32 + 4 * v35) = v37;
    ++*(_DWORD *)(v32 + 8);
    result = (v34 ^ 0x3FFFFFFF) & v33;
  }
  if ((~(_DWORD)result & 0x24) == 0)
  {
    v38 = result & 0x3FFFFFDB;
    v39 = *(unsigned int *)(a2 + 8);
    v40 = a2;
    if (v39 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v39 + 1, 4);
      LODWORD(v39) = *(_DWORD *)(v40 + 8);
    }
    a2 = v40;
    *(_DWORD *)(*(_QWORD *)v40 + 4 * v39) = 36;
    ++*(_DWORD *)(v40 + 8);
    result = v38;
  }
  if ((result & 1) != 0)
  {
    v41 = result;
    v42 = *(unsigned int *)(a2 + 8);
    v43 = a2;
    if (v42 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v42 + 1, 4);
      LODWORD(v42) = *(_DWORD *)(v43 + 8);
    }
    a2 = v43;
    *(_DWORD *)(*(_QWORD *)v43 + 4 * v42) = 1;
    ++*(_DWORD *)(v43 + 8);
    result = v41 & 0x3FFFFFFE;
  }
  if ((result & 2) != 0)
  {
    v44 = result;
    v45 = result & 2;
    v46 = *(unsigned int *)(a2 + 8);
    v47 = a2;
    if (v46 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v46 + 1, 4);
      LODWORD(v46) = *(_DWORD *)(v47 + 8);
    }
    a2 = v47;
    *(_DWORD *)(*(_QWORD *)v47 + 4 * v46) = v45;
    ++*(_DWORD *)(v47 + 8);
    result = (v45 ^ 0x3FFFFFFF) & v44;
  }
  v4 = result & 3;
  if ((result & 3) != 0)
  {
    v48 = result;
    v49 = *(unsigned int *)(a2 + 8);
    v50 = a2;
    if (v49 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v49 + 1, 4);
      LODWORD(v49) = *(_DWORD *)(v50 + 8);
    }
    a2 = v50;
    *(_DWORD *)(*(_QWORD *)v50 + 4 * v49) = v4;
    ++*(_DWORD *)(v50 + 8);
    result = (v4 ^ 0x3FFFFFFF) & v48;
  }
  if ((result & 4) != 0)
  {
    v24 = result & 4;
    v25 = *(unsigned int *)(a2 + 8);
    if (v25 >= *(_DWORD *)(a2 + 12))
    {
      v137 = result;
      v138 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v25 + 1, 4);
      a2 = v138;
      LODWORD(result) = v137;
      LODWORD(v25) = *(_DWORD *)(v138 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v25) = v24;
    ++*(_DWORD *)(a2 + 8);
    result = (v24 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 8) != 0)
  {
    v51 = result;
    v52 = result & 8;
    v53 = *(unsigned int *)(a2 + 8);
    v54 = a2;
    if (v53 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v53 + 1, 4);
      LODWORD(v53) = *(_DWORD *)(v54 + 8);
    }
    a2 = v54;
    *(_DWORD *)(*(_QWORD *)v54 + 4 * v53) = v52;
    ++*(_DWORD *)(v54 + 8);
    result = (v52 ^ 0x3FFFFFFF) & v51;
  }
  if ((result & 0x10) != 0)
  {
    v55 = result;
    v56 = result & 0x10;
    v57 = *(unsigned int *)(a2 + 8);
    v58 = a2;
    if (v57 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v57 + 1, 4);
      LODWORD(v57) = *(_DWORD *)(v58 + 8);
    }
    a2 = v58;
    *(_DWORD *)(*(_QWORD *)v58 + 4 * v57) = v56;
    ++*(_DWORD *)(v58 + 8);
    result = (v56 ^ 0x3FFFFFFF) & v55;
  }
  if ((result & 0x20) != 0)
  {
    v59 = result;
    v60 = result & 0x20;
    v61 = *(unsigned int *)(a2 + 8);
    v62 = a2;
    if (v61 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v61 + 1, 4);
      LODWORD(v61) = *(_DWORD *)(v62 + 8);
    }
    a2 = v62;
    *(_DWORD *)(*(_QWORD *)v62 + 4 * v61) = v60;
    ++*(_DWORD *)(v62 + 8);
    result = (v60 ^ 0x3FFFFFFF) & v59;
  }
  if ((result & 0x40) != 0)
  {
    v11 = result & 0x40;
    v12 = *(unsigned int *)(a2 + 8);
    if (v12 >= *(_DWORD *)(a2 + 12))
    {
      v125 = result;
      v126 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v12 + 1, 4);
      a2 = v126;
      LODWORD(result) = v125;
      LODWORD(v12) = *(_DWORD *)(v126 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v12) = v11;
    ++*(_DWORD *)(a2 + 8);
    result = (v11 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x80) != 0)
  {
    v28 = result & 0x80;
    v29 = *(unsigned int *)(a2 + 8);
    if (v29 >= *(_DWORD *)(a2 + 12))
    {
      v141 = result;
      v142 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v29 + 1, 4);
      a2 = v142;
      LODWORD(result) = v141;
      LODWORD(v29) = *(_DWORD *)(v142 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v29) = v28;
    ++*(_DWORD *)(a2 + 8);
    result = (v28 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x100) != 0)
  {
    v5 = result & 0x100;
    v6 = *(unsigned int *)(a2 + 8);
    if (v6 >= *(_DWORD *)(a2 + 12))
    {
      v121 = result;
      v122 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v6 + 1, 4);
      a2 = v122;
      LODWORD(result) = v121;
      LODWORD(v6) = *(_DWORD *)(v122 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v6) = v5;
    ++*(_DWORD *)(a2 + 8);
    result = (v5 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x200) != 0)
  {
    v63 = result;
    v64 = result & 0x200;
    v65 = *(unsigned int *)(a2 + 8);
    v66 = a2;
    if (v65 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v65 + 1, 4);
      LODWORD(v65) = *(_DWORD *)(v66 + 8);
    }
    a2 = v66;
    *(_DWORD *)(*(_QWORD *)v66 + 4 * v65) = v64;
    ++*(_DWORD *)(v66 + 8);
    result = (v64 ^ 0x3FFFFFFF) & v63;
  }
  if ((result & 0x400) != 0)
  {
    v18 = result & 0x400;
    v19 = *(unsigned int *)(a2 + 8);
    if (v19 >= *(_DWORD *)(a2 + 12))
    {
      v131 = result;
      v132 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v19 + 1, 4);
      a2 = v132;
      LODWORD(result) = v131;
      LODWORD(v19) = *(_DWORD *)(v132 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v19) = v18;
    ++*(_DWORD *)(a2 + 8);
    result = (v18 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x800) != 0)
  {
    v20 = result & 0x800;
    v21 = *(unsigned int *)(a2 + 8);
    if (v21 >= *(_DWORD *)(a2 + 12))
    {
      v133 = result;
      v134 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v21 + 1, 4);
      a2 = v134;
      LODWORD(result) = v133;
      LODWORD(v21) = *(_DWORD *)(v134 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v21) = v20;
    ++*(_DWORD *)(a2 + 8);
    result = (v20 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x1000) != 0)
  {
    v16 = result & 0x1000;
    v17 = *(unsigned int *)(a2 + 8);
    if (v17 >= *(_DWORD *)(a2 + 12))
    {
      v129 = result;
      v130 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v17 + 1, 4);
      a2 = v130;
      LODWORD(result) = v129;
      LODWORD(v17) = *(_DWORD *)(v130 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v17) = v16;
    ++*(_DWORD *)(a2 + 8);
    result = (v16 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x2000) != 0)
  {
    v67 = result;
    v68 = result & 0x2000;
    v69 = *(unsigned int *)(a2 + 8);
    v70 = a2;
    if (v69 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v69 + 1, 4);
      LODWORD(v69) = *(_DWORD *)(v70 + 8);
    }
    a2 = v70;
    *(_DWORD *)(*(_QWORD *)v70 + 4 * v69) = v68;
    ++*(_DWORD *)(v70 + 8);
    result = (v68 ^ 0x3FFFFFFF) & v67;
  }
  if ((result & 0x4000) != 0)
  {
    v71 = result;
    v72 = result & 0x4000;
    v73 = *(unsigned int *)(a2 + 8);
    v74 = a2;
    if (v73 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v73 + 1, 4);
      LODWORD(v73) = *(_DWORD *)(v74 + 8);
    }
    a2 = v74;
    *(_DWORD *)(*(_QWORD *)v74 + 4 * v73) = v72;
    ++*(_DWORD *)(v74 + 8);
    result = (v72 ^ 0x3FFFFFFF) & v71;
  }
  if ((result & 0x8000) != 0)
  {
    v75 = result;
    v76 = result & 0x8000;
    v77 = *(unsigned int *)(a2 + 8);
    v78 = a2;
    if (v77 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v77 + 1, 4);
      LODWORD(v77) = *(_DWORD *)(v78 + 8);
    }
    a2 = v78;
    *(_DWORD *)(*(_QWORD *)v78 + 4 * v77) = v76;
    ++*(_DWORD *)(v78 + 8);
    result = (v76 ^ 0x3FFFFFFF) & v75;
  }
  if ((result & 0x10000) != 0)
  {
    v79 = result;
    v80 = result & 0x10000;
    v81 = *(unsigned int *)(a2 + 8);
    v82 = a2;
    if (v81 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v81 + 1, 4);
      LODWORD(v81) = *(_DWORD *)(v82 + 8);
    }
    a2 = v82;
    *(_DWORD *)(*(_QWORD *)v82 + 4 * v81) = v80;
    ++*(_DWORD *)(v82 + 8);
    result = (v80 ^ 0x3FFFFFFF) & v79;
  }
  if ((result & 0x20000) != 0)
  {
    v83 = result;
    v84 = result & 0x20000;
    v85 = *(unsigned int *)(a2 + 8);
    v86 = a2;
    if (v85 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v85 + 1, 4);
      LODWORD(v85) = *(_DWORD *)(v86 + 8);
    }
    a2 = v86;
    *(_DWORD *)(*(_QWORD *)v86 + 4 * v85) = v84;
    ++*(_DWORD *)(v86 + 8);
    result = (v84 ^ 0x3FFFFFFF) & v83;
  }
  v7 = result & 0x30000;
  if ((result & 0x30000) != 0)
  {
    v87 = result;
    v88 = *(unsigned int *)(a2 + 8);
    v89 = a2;
    if (v88 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v88 + 1, 4);
      LODWORD(v88) = *(_DWORD *)(v89 + 8);
    }
    a2 = v89;
    *(_DWORD *)(*(_QWORD *)v89 + 4 * v88) = v7;
    ++*(_DWORD *)(v89 + 8);
    result = (v7 ^ 0x3FFFFFFF) & v87;
  }
  if ((result & 0x40000) != 0)
  {
    v90 = result;
    v91 = result & 0x40000;
    v92 = *(unsigned int *)(a2 + 8);
    v93 = a2;
    if (v92 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v92 + 1, 4);
      LODWORD(v92) = *(_DWORD *)(v93 + 8);
    }
    a2 = v93;
    *(_DWORD *)(*(_QWORD *)v93 + 4 * v92) = v91;
    ++*(_DWORD *)(v93 + 8);
    result = (v91 ^ 0x3FFFFFFF) & v90;
  }
  if ((result & 0x80000) != 0)
  {
    v30 = result & 0x80000;
    v31 = *(unsigned int *)(a2 + 8);
    if (v31 >= *(_DWORD *)(a2 + 12))
    {
      v143 = result;
      v144 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v31 + 1, 4);
      a2 = v144;
      LODWORD(result) = v143;
      LODWORD(v31) = *(_DWORD *)(v144 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v31) = v30;
    ++*(_DWORD *)(a2 + 8);
    result = (v30 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x100000) != 0)
  {
    v94 = result;
    v95 = result & 0x100000;
    v96 = *(unsigned int *)(a2 + 8);
    v97 = a2;
    if (v96 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v96 + 1, 4);
      LODWORD(v96) = *(_DWORD *)(v97 + 8);
    }
    a2 = v97;
    *(_DWORD *)(*(_QWORD *)v97 + 4 * v96) = v95;
    ++*(_DWORD *)(v97 + 8);
    result = (v95 ^ 0x3FFFFFFF) & v94;
  }
  if ((result & 0x400000) != 0)
  {
    v22 = result & 0x400000;
    v23 = *(unsigned int *)(a2 + 8);
    if (v23 >= *(_DWORD *)(a2 + 12))
    {
      v135 = result;
      v136 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v23 + 1, 4);
      a2 = v136;
      LODWORD(result) = v135;
      LODWORD(v23) = *(_DWORD *)(v136 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v23) = v22;
    ++*(_DWORD *)(a2 + 8);
    result = (v22 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x800000) != 0)
  {
    v98 = result;
    v99 = result & 0x800000;
    v100 = *(unsigned int *)(a2 + 8);
    v101 = a2;
    if (v100 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v100 + 1, 4);
      LODWORD(v100) = *(_DWORD *)(v101 + 8);
    }
    a2 = v101;
    *(_DWORD *)(*(_QWORD *)v101 + 4 * v100) = v99;
    ++*(_DWORD *)(v101 + 8);
    result = (v99 ^ 0x3FFFFFFF) & v98;
  }
  if ((result & 0x1000000) != 0)
  {
    v102 = result;
    v103 = result & 0x1000000;
    v104 = *(unsigned int *)(a2 + 8);
    v105 = a2;
    if (v104 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v104 + 1, 4);
      LODWORD(v104) = *(_DWORD *)(v105 + 8);
    }
    a2 = v105;
    *(_DWORD *)(*(_QWORD *)v105 + 4 * v104) = v103;
    ++*(_DWORD *)(v105 + 8);
    result = (v103 ^ 0x3FFFFFFF) & v102;
  }
  if ((result & 0x2000000) != 0)
  {
    v106 = result;
    v107 = result & 0x2000000;
    v108 = *(unsigned int *)(a2 + 8);
    v109 = a2;
    if (v108 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v108 + 1, 4);
      LODWORD(v108) = *(_DWORD *)(v109 + 8);
    }
    a2 = v109;
    *(_DWORD *)(*(_QWORD *)v109 + 4 * v108) = v107;
    ++*(_DWORD *)(v109 + 8);
    result = (v107 ^ 0x3FFFFFFF) & v106;
  }
  if ((result & 0x4000000) != 0)
  {
    v26 = result & 0x4000000;
    v27 = *(unsigned int *)(a2 + 8);
    if (v27 >= *(_DWORD *)(a2 + 12))
    {
      v139 = result;
      v140 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v27 + 1, 4);
      a2 = v140;
      LODWORD(result) = v139;
      LODWORD(v27) = *(_DWORD *)(v140 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v27) = v26;
    ++*(_DWORD *)(a2 + 8);
    result = (v26 ^ 0x3FFFFFFF) & result;
  }
  if ((result & 0x8000000) != 0)
  {
    v110 = result;
    v111 = result & 0x8000000;
    v112 = *(unsigned int *)(a2 + 8);
    v113 = a2;
    if (v112 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v112 + 1, 4);
      LODWORD(v112) = *(_DWORD *)(v113 + 8);
    }
    a2 = v113;
    *(_DWORD *)(*(_QWORD *)v113 + 4 * v112) = v111;
    ++*(_DWORD *)(v113 + 8);
    result = (v111 ^ 0x3FFFFFFF) & v110;
  }
  if ((result & 0x10000000) != 0)
  {
    v114 = result;
    v115 = result & 0x10000000;
    v116 = *(unsigned int *)(a2 + 8);
    v117 = a2;
    if (v116 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v116 + 1, 4);
      LODWORD(v116) = *(_DWORD *)(v117 + 8);
    }
    a2 = v117;
    *(_DWORD *)(*(_QWORD *)v117 + 4 * v116) = v115;
    ++*(_DWORD *)(v117 + 8);
    result = (v115 ^ 0x3FFFFFFF) & v114;
  }
  if ((result & 0x20000000) != 0)
  {
    v9 = result & 0x20000000;
    v10 = *(unsigned int *)(a2 + 8);
    if (v10 >= *(_DWORD *)(a2 + 12))
    {
      v123 = result;
      v124 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v10 + 1, 4);
      a2 = v124;
      LODWORD(result) = v123;
      LODWORD(v10) = *(_DWORD *)(v124 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v10) = v9;
    ++*(_DWORD *)(a2 + 8);
    result = (v9 ^ 0x3FFFFFFF) & result;
  }
  v8 = result & 0x24;
  if ((result & 0x24) != 0)
  {
    v118 = result;
    v119 = *(unsigned int *)(a2 + 8);
    v120 = a2;
    if (v119 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v119 + 1, 4);
      LODWORD(v119) = *(_DWORD *)(v120 + 8);
    }
    *(_DWORD *)(*(_QWORD *)v120 + 4 * v119) = v8;
    ++*(_DWORD *)(v120 + 8);
    return (v8 ^ 0x3FFFFFFF) & v118;
  }
  return result;
}

void *llvm::DIScope::getName(llvm::DIScope *this)
{
  int v2;
  void *result;
  uint64_t v4;

  v2 = *(unsigned __int8 *)this;
  result = &unk_1C86BF3B6;
  switch(v2)
  {
    case 11:
    case 12:
    case 13:
    case 14:
    case 17:
    case 20:
    case 21:
      goto LABEL_2;
    case 15:
    case 16:
    case 18:
    case 19:
      return result;
    default:
      if (v2 == 31 || v2 == 33)
      {
LABEL_2:
        v4 = ((_QWORD *)this - *((unsigned int *)this + 2))[2];
        if (v4)
          result = (void *)(*(_QWORD *)(v4 + 8) + 24);
        else
          result = 0;
      }
      break;
  }
  return result;
}

llvm::MDNode *llvm::GenericDINode::getImpl(uint64_t *a1, int a2, unsigned __int8 *a3, _QWORD *a4, uint64_t a5, int a6, int a7)
{
  uint64_t v14;
  int v15;
  llvm::MDNode *result;
  BOOL v17;
  uint64_t v18;
  unsigned __int8 **v19;
  unsigned __int8 **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned __int8 **v27;
  uint64_t v28;
  char v29;
  int v30;
  _QWORD v31[4];
  int v32;
  int v33;
  unsigned __int8 *v34;
  llvm::MDNode **v35;

  if (a6)
  {
    v30 = 0;
    goto LABEL_11;
  }
  v31[0] = a4;
  v31[1] = a5;
  v31[2] = 0;
  v31[3] = 0;
  v32 = sub_1C53831BC(a4, (uint64_t)&a4[a5]);
  v33 = a2;
  v34 = a3;
  v35 = 0;
  v14 = *a1;
  v15 = sub_1C622FFBC((uint64_t *)(*a1 + 536), (uint64_t)v31, (uint64_t **)&v35);
  result = 0;
  if (v15)
    v17 = v35 == (llvm::MDNode **)(*(_QWORD *)(v14 + 536) + 8 * *(unsigned int *)(v14 + 552));
  else
    v17 = 1;
  if (!v17)
    result = *v35;
  if (!result && a7)
  {
    v30 = v32;
LABEL_11:
    v18 = (a5 + 1);
    v19 = (unsigned __int8 **)operator new(8 * v18 + 24);
    v20 = v19;
    if ((_DWORD)a5 != -1)
      bzero(v19, 8 * v18);
    v21 = (uint64_t)&v20[v18];
    *(_BYTE *)v21 = 8;
    *(_BYTE *)(v21 + 1) = a6 & 0x7F;
    *(_WORD *)(v21 + 2) = 0;
    *(_DWORD *)(v21 + 4) = 0;
    *(_QWORD *)(v21 + 8) = v18;
    *(_QWORD *)(v21 + 16) = a1;
    if (*v20)
      llvm::MetadataTracking::untrack((uint64_t)v20, *v20);
    *v20 = a3;
    if (a3)
    {
      if ((a6 & 0x7F) != 0)
        v22 = 2;
      else
        v22 = v21 | 2;
      llvm::MetadataTracking::track((uint64_t)v20, a3, v22);
    }
    if (a5)
    {
      v23 = 0;
      v24 = 8 * a5;
      do
      {
        v25 = (unsigned __int8 *)a4[v23];
        v26 = v21 - 8 * *(unsigned int *)(v21 + 8);
        v27 = (unsigned __int8 **)(v26 + 8 * (v23 + 1));
        v29 = *(_BYTE *)(v21 + 1);
        if (*v27)
          llvm::MetadataTracking::untrack(v26 + 8 * (v23 + 1), *v27);
        *v27 = v25;
        if (v25)
        {
          if ((v29 & 0x7F) != 0)
            v28 = 2;
          else
            v28 = v21 | 2;
          llvm::MetadataTracking::track((uint64_t)v27, v25, v28);
        }
        ++v23;
        v24 -= 8;
      }
      while (v24);
    }
    if ((*(_BYTE *)(v21 + 1) & 0x7F) == 0)
      llvm::MDNode::countUnresolvedOperands(v21);
    *(_WORD *)(v21 + 2) = a2;
    *(_DWORD *)(v21 + 4) = v30;
    return sub_1C622E32C((llvm::MDNode *)v21, a6, *a1 + 536);
  }
  return result;
}

uint64_t llvm::DISubrange::DISubrange(uint64_t this, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  int v6;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  char *v11;
  unsigned __int8 **v12;
  char v13;
  unint64_t v14;

  *(_BYTE *)this = 9;
  v6 = a3 & 0x7F;
  *(_BYTE *)(this + 1) = a3 & 0x7F;
  *(_WORD *)(this + 2) = 0;
  *(_DWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 8) = a5;
  *(_DWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 16) = a2;
  if (a5)
  {
    v8 = 0;
    v9 = 8 * a5;
    do
    {
      v10 = *(unsigned __int8 **)(a4 + 8 * v8);
      v11 = (char *)(this - 8 * *(unsigned int *)(this + 8));
      v12 = (unsigned __int8 **)&v11[8 * v8];
      v13 = *(_BYTE *)(this + 1);
      if (*v12)
        llvm::MetadataTracking::untrack((uint64_t)&v11[8 * v8], *v12);
      *v12 = v10;
      if (v10)
      {
        if ((v13 & 0x7F) != 0)
          v14 = 2;
        else
          v14 = this | 2;
        llvm::MetadataTracking::track((uint64_t)v12, v10, v14);
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
    v6 = *(_BYTE *)(this + 1) & 0x7F;
  }
  if (!v6)
    llvm::MDNode::countUnresolvedOperands(this);
  *(_WORD *)(this + 2) = 33;
  return this;
}

{
  int v6;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  char *v11;
  unsigned __int8 **v12;
  char v13;
  unint64_t v14;

  *(_BYTE *)this = 9;
  v6 = a3 & 0x7F;
  *(_BYTE *)(this + 1) = a3 & 0x7F;
  *(_WORD *)(this + 2) = 0;
  *(_DWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 8) = a5;
  *(_DWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 16) = a2;
  if (a5)
  {
    v8 = 0;
    v9 = 8 * a5;
    do
    {
      v10 = *(unsigned __int8 **)(a4 + 8 * v8);
      v11 = (char *)(this - 8 * *(unsigned int *)(this + 8));
      v12 = (unsigned __int8 **)&v11[8 * v8];
      v13 = *(_BYTE *)(this + 1);
      if (*v12)
        llvm::MetadataTracking::untrack((uint64_t)&v11[8 * v8], *v12);
      *v12 = v10;
      if (v10)
      {
        if ((v13 & 0x7F) != 0)
          v14 = 2;
        else
          v14 = this | 2;
        llvm::MetadataTracking::track((uint64_t)v12, v10, v14);
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
    v6 = *(_BYTE *)(this + 1) & 0x7F;
  }
  if (!v6)
    llvm::MDNode::countUnresolvedOperands(this);
  *(_WORD *)(this + 2) = 33;
  return this;
}

llvm::MDNode *llvm::DISubrange::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v14;
  uint64_t *v15;
  int v16;
  llvm::MDNode *result;
  BOOL v18;
  char *v19;
  uint64_t v20;
  llvm::MDNode *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  unsigned __int8 *v28;
  uint64_t v29;
  llvm::MDNode **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (a6)
    goto LABEL_9;
  v14 = *a1;
  v15 = (uint64_t *)(*a1 + 560);
  v31 = a2;
  v32 = a3;
  v33 = a4;
  v34 = a5;
  v30 = 0;
  v16 = sub_1C6230500(v15, &v31, (uint64_t **)&v30);
  result = 0;
  if (v16)
    v18 = v30 == (llvm::MDNode **)(*(_QWORD *)(v14 + 560) + 8 * *(unsigned int *)(v14 + 576));
  else
    v18 = 1;
  if (!v18)
    result = *v30;
  if (!result && a7)
  {
LABEL_9:
    v31 = a2;
    v32 = a3;
    v33 = a4;
    v34 = a5;
    v19 = (char *)operator new(0x38uLL);
    v20 = 0;
    v19[32] = 9;
    v21 = (llvm::MDNode *)(v19 + 32);
    *(_OWORD *)v19 = 0u;
    *((_OWORD *)v19 + 1) = 0u;
    v19[33] = a6 & 0x7F;
    *((_WORD *)v19 + 17) = 0;
    *(_QWORD *)(v19 + 36) = 0x400000000;
    *((_DWORD *)v19 + 11) = 0;
    *((_QWORD *)v19 + 6) = a1;
    do
    {
      v22 = *(unsigned __int8 **)((char *)&v31 + v20);
      v23 = *((unsigned int *)v19 + 10);
      v24 = v20 - 8 * v23;
      v25 = (uint64_t)v21 + v24;
      v26 = (char *)v21 - 8 * v23;
      v27 = v19[33];
      v28 = *(unsigned __int8 **)&v26[v20];
      if (v28)
        llvm::MetadataTracking::untrack((uint64_t)v21 + v24, v28);
      *(_QWORD *)&v26[v20] = v22;
      if (v22)
      {
        if ((v27 & 0x7F) != 0)
          v29 = 2;
        else
          v29 = (unint64_t)(v19 + 32) | 2;
        llvm::MetadataTracking::track(v25, v22, v29);
      }
      v20 += 8;
    }
    while (v20 != 32);
    if ((v19[33] & 0x7F) == 0)
      llvm::MDNode::countUnresolvedOperands((uint64_t)v21);
    *((_WORD *)v19 + 17) = 33;
    return sub_1C622E49C(v21, a6, *a1 + 560);
  }
  return result;
}

unint64_t llvm::DISubrange::getCount(llvm::DISubrange *this)
{
  unint64_t v1;
  int v2;

  v1 = *((_QWORD *)this - *((unsigned int *)this + 2));
  if (!v1)
    return 0;
  v2 = *(unsigned __int8 *)v1;
  if (v2 == 1)
    return *(_QWORD *)(v1 + 128) & 0xFFFFFFFFFFFFFFF9;
  if ((v2 & 0xFE) == 0x18)
    return v1 & 0xFFFFFFFFFFFFFFF9 | 2;
  if (v2 == 6)
    return v1 & 0xFFFFFFFFFFFFFFF9 | 4;
  else
    return 0;
}

uint64_t llvm::DIGenericSubrange::DIGenericSubrange(uint64_t this, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  int v6;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  char *v11;
  unsigned __int8 **v12;
  char v13;
  unint64_t v14;

  *(_BYTE *)this = 34;
  v6 = a3 & 0x7F;
  *(_BYTE *)(this + 1) = a3 & 0x7F;
  *(_WORD *)(this + 2) = 0;
  *(_DWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 8) = a5;
  *(_DWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 16) = a2;
  if (a5)
  {
    v8 = 0;
    v9 = 8 * a5;
    do
    {
      v10 = *(unsigned __int8 **)(a4 + 8 * v8);
      v11 = (char *)(this - 8 * *(unsigned int *)(this + 8));
      v12 = (unsigned __int8 **)&v11[8 * v8];
      v13 = *(_BYTE *)(this + 1);
      if (*v12)
        llvm::MetadataTracking::untrack((uint64_t)&v11[8 * v8], *v12);
      *v12 = v10;
      if (v10)
      {
        if ((v13 & 0x7F) != 0)
          v14 = 2;
        else
          v14 = this | 2;
        llvm::MetadataTracking::track((uint64_t)v12, v10, v14);
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
    v6 = *(_BYTE *)(this + 1) & 0x7F;
  }
  if (!v6)
    llvm::MDNode::countUnresolvedOperands(this);
  *(_WORD *)(this + 2) = 69;
  return this;
}

{
  int v6;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  char *v11;
  unsigned __int8 **v12;
  char v13;
  unint64_t v14;

  *(_BYTE *)this = 34;
  v6 = a3 & 0x7F;
  *(_BYTE *)(this + 1) = a3 & 0x7F;
  *(_WORD *)(this + 2) = 0;
  *(_DWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 8) = a5;
  *(_DWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 16) = a2;
  if (a5)
  {
    v8 = 0;
    v9 = 8 * a5;
    do
    {
      v10 = *(unsigned __int8 **)(a4 + 8 * v8);
      v11 = (char *)(this - 8 * *(unsigned int *)(this + 8));
      v12 = (unsigned __int8 **)&v11[8 * v8];
      v13 = *(_BYTE *)(this + 1);
      if (*v12)
        llvm::MetadataTracking::untrack((uint64_t)&v11[8 * v8], *v12);
      *v12 = v10;
      if (v10)
      {
        if ((v13 & 0x7F) != 0)
          v14 = 2;
        else
          v14 = this | 2;
        llvm::MetadataTracking::track((uint64_t)v12, v10, v14);
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
    v6 = *(_BYTE *)(this + 1) & 0x7F;
  }
  if (!v6)
    llvm::MDNode::countUnresolvedOperands(this);
  *(_WORD *)(this + 2) = 69;
  return this;
}

llvm::MDNode *llvm::DIGenericSubrange::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v14;
  uint64_t *v15;
  int v16;
  llvm::MDNode *result;
  BOOL v18;
  char *v19;
  uint64_t v20;
  llvm::MDNode *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  unsigned __int8 *v28;
  uint64_t v29;
  llvm::MDNode **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (a6)
    goto LABEL_9;
  v14 = *a1;
  v15 = (uint64_t *)(*a1 + 1136);
  v31 = a2;
  v32 = a3;
  v33 = a4;
  v34 = a5;
  v30 = 0;
  v16 = sub_1C53A814C(v15, &v31, (uint64_t **)&v30);
  result = 0;
  if (v16)
    v18 = v30 == (llvm::MDNode **)(*(_QWORD *)(v14 + 1136) + 8 * *(unsigned int *)(v14 + 1152));
  else
    v18 = 1;
  if (!v18)
    result = *v30;
  if (!result && a7)
  {
LABEL_9:
    v31 = a2;
    v32 = a3;
    v33 = a4;
    v34 = a5;
    v19 = (char *)operator new(0x38uLL);
    v20 = 0;
    v19[32] = 34;
    v21 = (llvm::MDNode *)(v19 + 32);
    *(_OWORD *)v19 = 0u;
    *((_OWORD *)v19 + 1) = 0u;
    v19[33] = a6 & 0x7F;
    *((_WORD *)v19 + 17) = 0;
    *(_QWORD *)(v19 + 36) = 0x400000000;
    *((_DWORD *)v19 + 11) = 0;
    *((_QWORD *)v19 + 6) = a1;
    do
    {
      v22 = *(unsigned __int8 **)((char *)&v31 + v20);
      v23 = *((unsigned int *)v19 + 10);
      v24 = v20 - 8 * v23;
      v25 = (uint64_t)v21 + v24;
      v26 = (char *)v21 - 8 * v23;
      v27 = v19[33];
      v28 = *(unsigned __int8 **)&v26[v20];
      if (v28)
        llvm::MetadataTracking::untrack((uint64_t)v21 + v24, v28);
      *(_QWORD *)&v26[v20] = v22;
      if (v22)
      {
        if ((v27 & 0x7F) != 0)
          v29 = 2;
        else
          v29 = (unint64_t)(v19 + 32) | 2;
        llvm::MetadataTracking::track(v25, v22, v29);
      }
      v20 += 8;
    }
    while (v20 != 32);
    if ((v19[33] & 0x7F) == 0)
      llvm::MDNode::countUnresolvedOperands((uint64_t)v21);
    *((_WORD *)v19 + 17) = 69;
    return sub_1C622E60C(v21, a6, *a1 + 1136);
  }
  return result;
}

llvm::MDNode *llvm::DIEnumerator::getImpl(_QWORD *a1, uint64_t a2, int a3, void *a4, int a5, int a6)
{
  int v8;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  llvm::MDNode *v19;
  uint64_t *v23;
  void *v24;
  unsigned int v25;
  void *v26;
  char v27;
  uint64_t v28;

  v8 = a3;
  v28 = *MEMORY[0x1E0C80C00];
  if (a5)
    goto LABEL_16;
  v11 = *a1;
  v12 = (uint64_t *)(*a1 + 584);
  v13 = *(unsigned int *)(a2 + 8);
  if (v13 > 0x40)
  {
    v15 = (void *)operator new[]();
    memcpy(v15, *(const void **)a2, ((unint64_t)(v13 + 63) >> 3) & 0x3FFFFFF8);
    v25 = v13;
    v14 = (void *)operator new[]();
    v8 = a3;
    memcpy(v14, v15, ((unint64_t)(v13 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v14 = *(void **)a2;
    v25 = *(_DWORD *)(a2 + 8);
    v15 = v14;
  }
  v23 = 0;
  v24 = v14;
  v26 = a4;
  v27 = v8;
  v16 = sub_1C6230E30(v12, (llvm *)&v24, &v23);
  v17 = 0;
  if (v16 && v23 != (uint64_t *)(*(_QWORD *)(v11 + 584) + 8 * *(unsigned int *)(v11 + 600)))
    v17 = *v23;
  if (v25 >= 0x41 && v24)
    MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
  if (v13 >= 0x41 && v15)
    MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
  if (!v17 && a6)
  {
LABEL_16:
    v24 = a4;
    v18 = operator new(0x30uLL);
    *v18 = 0;
    v19 = (llvm::MDNode *)llvm::DIEnumerator::DIEnumerator((uint64_t)(v18 + 1), (uint64_t)a1, a5, a2, v8, (uint64_t)&v24, 1);
    return sub_1C622E7EC(v19, a5, *a1 + 584);
  }
  return (llvm::MDNode *)v17;
}

llvm::MDNode *llvm::DIBasicType::getImpl(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, char a9)
{
  __int16 v15;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  llvm::MDNode *result;
  _QWORD *v21;
  uint64_t v22;
  llvm::MDNode *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  unsigned __int8 *v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  int v34;
  int v35;
  llvm::MDNode **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;

  v15 = a2;
  v43 = *MEMORY[0x1E0C80C00];
  if (a8)
    goto LABEL_7;
  v17 = *a1;
  v18 = (uint64_t *)(*a1 + 608);
  LODWORD(v37) = a2;
  v38 = a3;
  v39 = a4;
  v40 = a5;
  v41 = a6;
  v42 = a7;
  v36 = 0;
  v19 = sub_1C6231274(v18, (uint64_t)&v37, (uint64_t **)&v36);
  result = 0;
  if (v19 && v36 != (llvm::MDNode **)(*(_QWORD *)(v17 + 608) + 8 * *(unsigned int *)(v17 + 624)))
    result = *v36;
  if (!result && a9)
  {
LABEL_7:
    v32 = v15;
    v33 = a4;
    v34 = a5;
    v35 = a6;
    v37 = 0;
    v38 = 0;
    v39 = a3;
    v21 = operator new(0x50uLL);
    v22 = 0;
    v21[1] = 0;
    v21[2] = 0;
    *((_BYTE *)v21 + 24) = 11;
    v23 = (llvm::MDNode *)(v21 + 3);
    *v21 = 0;
    *((_BYTE *)v21 + 25) = a8 & 0x7F;
    *((_WORD *)v21 + 13) = 0;
    *(_QWORD *)((char *)v21 + 28) = 0x300000000;
    *((_DWORD *)v21 + 9) = 0;
    v21[5] = a1;
    do
    {
      v24 = *(unsigned __int8 **)((char *)&v37 + v22);
      v25 = *((unsigned int *)v21 + 8);
      v26 = v22 - 8 * v25;
      v27 = (uint64_t)v23 + v26;
      v28 = (char *)v23 - 8 * v25;
      v29 = *((_BYTE *)v21 + 25);
      v30 = *(unsigned __int8 **)&v28[v22];
      if (v30)
        llvm::MetadataTracking::untrack((uint64_t)v23 + v26, v30);
      *(_QWORD *)&v28[v22] = v24;
      if (v24)
      {
        if ((v29 & 0x7F) != 0)
          v31 = 2;
        else
          v31 = (unint64_t)(v21 + 3) | 2;
        llvm::MetadataTracking::track(v27, v24, v31);
      }
      v22 += 8;
    }
    while (v22 != 24);
    if ((*((_BYTE *)v21 + 25) & 0x7F) == 0)
      llvm::MDNode::countUnresolvedOperands((uint64_t)v23);
    *((_WORD *)v21 + 13) = v32;
    *((_DWORD *)v21 + 12) = 0;
    *((_DWORD *)v21 + 13) = a7;
    v21[7] = v33;
    v21[8] = 0;
    *((_DWORD *)v21 + 18) = v34;
    *((_DWORD *)v21 + 19) = v35;
    return sub_1C622E848(v23, a8, *a1 + 608);
  }
  return result;
}

llvm::MDNode *llvm::DIStringType::getImpl(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, int a9, int a10, char a11)
{
  uint64_t v18;
  uint64_t *v19;
  int v20;
  llvm::MDNode *result;
  char *v22;
  uint64_t v23;
  llvm::MDNode *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char v30;
  unsigned __int8 *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  __int16 v35;
  llvm::MDNode **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;

  v35 = a2;
  v45 = *MEMORY[0x1E0C80C00];
  if (a10)
    goto LABEL_7;
  v18 = *a1;
  v19 = (uint64_t *)(*a1 + 1112);
  LODWORD(v37) = a2;
  v38 = a3;
  v39 = a4;
  v40 = a5;
  v41 = a6;
  v42 = a7;
  v43 = a8;
  v44 = a9;
  v36 = 0;
  v20 = sub_1C6231750(v19, (uint64_t)&v37, (uint64_t **)&v36);
  result = 0;
  if (v20 && v36 != (llvm::MDNode **)(*(_QWORD *)(v18 + 1112) + 8 * *(unsigned int *)(v18 + 1128)))
    result = *v36;
  if (!result && a11)
  {
LABEL_7:
    v34 = a7;
    v37 = 0;
    v38 = 0;
    v39 = a3;
    v40 = a4;
    v41 = a5;
    v42 = a6;
    v22 = (char *)operator new(0x68uLL);
    v23 = 0;
    *(_OWORD *)v22 = 0u;
    *((_OWORD *)v22 + 1) = 0u;
    v22[48] = 33;
    v24 = (llvm::MDNode *)(v22 + 48);
    *((_OWORD *)v22 + 2) = 0u;
    v22[49] = a10 & 0x7F;
    *((_WORD *)v22 + 25) = 0;
    *(_QWORD *)(v22 + 52) = 0x600000000;
    *((_DWORD *)v22 + 15) = 0;
    v33 = a1;
    *((_QWORD *)v22 + 8) = a1;
    do
    {
      v25 = *(unsigned __int8 **)((char *)&v37 + v23);
      v26 = *((unsigned int *)v22 + 14);
      v27 = v23 - 8 * v26;
      v28 = (uint64_t)v24 + v27;
      v29 = (char *)v24 - 8 * v26;
      v30 = v22[49];
      v31 = *(unsigned __int8 **)&v29[v23];
      if (v31)
        llvm::MetadataTracking::untrack((uint64_t)v24 + v27, v31);
      *(_QWORD *)&v29[v23] = v25;
      if (v25)
      {
        if ((v30 & 0x7F) != 0)
          v32 = 2;
        else
          v32 = (unint64_t)(v22 + 48) | 2;
        llvm::MetadataTracking::track(v28, v25, v32);
      }
      v23 += 8;
    }
    while (v23 != 48);
    if ((v22[49] & 0x7F) == 0)
      llvm::MDNode::countUnresolvedOperands((uint64_t)v24);
    *((_WORD *)v22 + 25) = v35;
    *((_QWORD *)v22 + 9) = 0;
    *((_QWORD *)v22 + 10) = v34;
    *((_QWORD *)v22 + 11) = 0;
    *((_DWORD *)v22 + 24) = a8;
    *((_DWORD *)v22 + 25) = a9;
    return sub_1C622E8D0(v24, a10, *v33 + 1112);
  }
  return result;
}

uint64_t llvm::DIDerivedType::getVBPtrOffset(llvm::DIDerivedType *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;

  v1 = ((_QWORD *)this - *((unsigned int *)this + 2))[4];
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 128);
  if (!v2 || *(_BYTE *)(v2 + 16) != 16)
    return 0;
  v3 = (unsigned int *)(v2 + 24);
  if (*(_DWORD *)(v2 + 32) >= 0x41u)
    v3 = *(unsigned int **)v3;
  return *v3;
}

uint64_t llvm::DIDerivedType::getConstant(llvm::DIDerivedType *this)
{
  uint64_t v1;

  v1 = ((_QWORD *)this - *((unsigned int *)this + 2))[4];
  if (v1)
    return *(_QWORD *)(v1 + 128);
  else
    return 0;
}

uint64_t llvm::DIDerivedType::getImpl(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, int a16, char a17)
{
  uint64_t v22;
  uint64_t *v23;
  llvm::MDNode *v24;
  char *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v37;
  __int16 v38;
  char *v41;
  uint64_t *v42[3];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v38 = a2;
  v57 = *MEMORY[0x1E0C80C00];
  if (a16)
    goto LABEL_7;
  v22 = *a1;
  v23 = (uint64_t *)(*a1 + 632);
  LODWORD(v43) = a2;
  v44 = a3;
  v45 = a4;
  LODWORD(v46) = a5;
  v47 = a6;
  v48 = a7;
  v49 = a8;
  v50 = a10;
  v51 = a9;
  v52 = a11;
  v53 = a12;
  v54 = a13;
  v55 = a14;
  v56 = a15;
  v42[0] = 0;
  v24 = 0;
  if (sub_1C53A8820(v23, (uint64_t)&v43, v42)
    && v42[0] != (uint64_t *)(*(_QWORD *)(v22 + 632) + 8 * *(unsigned int *)(v22 + 648)))
  {
    v24 = (llvm::MDNode *)*v42[0];
  }
  if (!v24 && a17)
  {
LABEL_7:
    v43 = a4;
    v44 = a6;
    v45 = a3;
    v46 = a7;
    v47 = a14;
    v48 = a15;
    v25 = (char *)operator new(0x70uLL);
    v26 = 0;
    *(_OWORD *)v25 = 0u;
    *((_OWORD *)v25 + 1) = 0u;
    v25[48] = 12;
    v24 = (llvm::MDNode *)(v25 + 48);
    *((_OWORD *)v25 + 2) = 0u;
    v25[49] = a16 & 0x7F;
    *((_WORD *)v25 + 25) = 0;
    *(_QWORD *)(v25 + 52) = 0x600000000;
    *((_DWORD *)v25 + 15) = 0;
    v37 = a1;
    *((_QWORD *)v25 + 8) = a1;
    do
    {
      v27 = *(unsigned __int8 **)((char *)&v43 + v26);
      v28 = *((unsigned int *)v25 + 14);
      v29 = v26 - 8 * v28;
      v30 = (uint64_t)v24 + v29;
      v31 = (char *)v24 - 8 * v28;
      v32 = v25[49];
      v33 = *(unsigned __int8 **)&v31[v26];
      if (v33)
        llvm::MetadataTracking::untrack((uint64_t)v24 + v29, v33);
      *(_QWORD *)&v31[v26] = v27;
      if (v27)
      {
        if ((v32 & 0x7F) != 0)
          v34 = 2;
        else
          v34 = (unint64_t)(v25 + 48) | 2;
        llvm::MetadataTracking::track(v30, v27, v34);
      }
      v26 += 8;
    }
    while (v26 != 48);
    if ((v25[49] & 0x7F) == 0)
      llvm::MDNode::countUnresolvedOperands((uint64_t)v24);
    *((_WORD *)v25 + 25) = v38;
    *((_DWORD *)v25 + 18) = a5;
    *((_DWORD *)v25 + 19) = a13;
    *((_DWORD *)v25 + 24) = a9;
    *((_QWORD *)v25 + 10) = a8;
    *((_QWORD *)v25 + 11) = a10;
    *(_QWORD *)(v25 + 100) = a11;
    if ((a12 & 0xFF00000000) != 0)
      *((_DWORD *)v25 + 13) = a12;
    v35 = *v37;
    v41 = v25 + 48;
    if (a16)
    {
      if (a16 == 1)
        llvm::MDNode::storeDistinctInContext(v24);
    }
    else
    {
      sub_1C53A8EF8(v35 + 632, (uint64_t *)&v41, (uint64_t)v42);
      return (uint64_t)v41;
    }
  }
  return (uint64_t)v24;
}

uint64_t llvm::DICompositeType::getImpl(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10, unsigned int a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,char a24)
{
  uint64_t *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  llvm::MDNode *v35;
  uint64_t *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v52;
  char *v55;
  uint64_t *v56[3];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v52 = a2;
  v26 = a1;
  v27 = a23;
  v29 = a21;
  v28 = a22;
  v31 = a19;
  v30 = a20;
  v77 = *MEMORY[0x1E0C80C00];
  if (a23)
    goto LABEL_2;
  v50 = a7;
  v48 = *a1;
  v47 = (uint64_t *)(*a1 + 656);
  LODWORD(v57) = a2;
  v58 = a3;
  v59 = a4;
  LODWORD(v60) = a5;
  v49 = a6;
  v61 = a6;
  v62 = a7;
  v63 = a8;
  v64 = a10;
  v65 = __PAIR64__(a11, a9);
  v66 = a12;
  LODWORD(v67) = a13;
  v68 = a14;
  v69 = a15;
  v70 = a16;
  v71 = a17;
  v72 = a18;
  v73 = a19;
  v74 = a20;
  v75 = a21;
  v76 = a22;
  v56[0] = 0;
  v35 = 0;
  if (sub_1C6231D64(v47, (uint64_t)&v57, v56)
    && v56[0] != (uint64_t *)(*(_QWORD *)(v48 + 656) + 8 * *(unsigned int *)(v48 + 672)))
  {
    v35 = (llvm::MDNode *)*v56[0];
  }
  a7 = v50;
  v26 = a1;
  v30 = a20;
  v29 = a21;
  v31 = a19;
  a6 = v49;
  if (!v35)
  {
    v28 = a22;
    v27 = 0;
    if (a24)
    {
LABEL_2:
      v57 = a4;
      v58 = a6;
      v59 = a3;
      v60 = a7;
      v61 = a12;
      v62 = a14;
      v63 = a15;
      v64 = a16;
      v65 = a17;
      v66 = a18;
      v67 = v31;
      v68 = v30;
      v69 = v29;
      v70 = v28;
      v32 = v26;
      v33 = (char *)operator new(0xA8uLL);
      v34 = 0;
      *(_OWORD *)v33 = 0u;
      *((_OWORD *)v33 + 1) = 0u;
      *((_OWORD *)v33 + 2) = 0u;
      *((_OWORD *)v33 + 3) = 0u;
      *((_OWORD *)v33 + 4) = 0u;
      *((_OWORD *)v33 + 5) = 0u;
      v33[112] = 13;
      v35 = (llvm::MDNode *)(v33 + 112);
      *((_OWORD *)v33 + 6) = 0u;
      v33[113] = v27 & 0x7F;
      *((_WORD *)v33 + 57) = 0;
      *(_QWORD *)(v33 + 116) = 0xE00000000;
      *((_DWORD *)v33 + 31) = 0;
      v36 = v32;
      *((_QWORD *)v33 + 16) = v32;
      do
      {
        v37 = *(unsigned __int8 **)((char *)&v57 + v34);
        v38 = *((unsigned int *)v33 + 30);
        v39 = v34 - 8 * v38;
        v40 = (uint64_t)v35 + v39;
        v41 = (char *)v35 - 8 * v38;
        v42 = v33[113];
        v43 = *(unsigned __int8 **)&v41[v34];
        if (v43)
          llvm::MetadataTracking::untrack((uint64_t)v35 + v39, v43);
        *(_QWORD *)&v41[v34] = v37;
        if (v37)
        {
          if ((v42 & 0x7F) != 0)
            v44 = 2;
          else
            v44 = (unint64_t)(v33 + 112) | 2;
          llvm::MetadataTracking::track(v40, v37, v44);
        }
        v34 += 8;
      }
      while (v34 != 112);
      if ((v33[113] & 0x7F) == 0)
        llvm::MDNode::countUnresolvedOperands((uint64_t)v35);
      *((_WORD *)v33 + 57) = v52;
      *((_DWORD *)v33 + 34) = a5;
      *((_DWORD *)v33 + 35) = a11;
      *((_QWORD *)v33 + 18) = a8;
      *((_QWORD *)v33 + 19) = a10;
      *((_DWORD *)v33 + 40) = a9;
      *((_DWORD *)v33 + 41) = a13;
      v45 = *v36;
      v55 = v33 + 112;
      if (a23)
      {
        if (a23 == 1)
          llvm::MDNode::storeDistinctInContext(v35);
      }
      else
      {
        sub_1C6231E5C(v45 + 656, (uint64_t *)&v55, (uint64_t)v56);
        return (uint64_t)v55;
      }
    }
  }
  return (uint64_t)v35;
}

uint64_t llvm::DICompositeType::buildODRType(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, uint64_t a11, unsigned int a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t result;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 **v39;
  unsigned __int8 *v40;
  char v41;
  uint64_t v42;
  uint64_t v43[16];

  v43[14] = *MEMORY[0x1E0C80C00];
  v22 = *a1;
  if (!*(_BYTE *)(*a1 + 1184))
    return 0;
  v43[0] = a2;
  v32 = sub_1C6180A54(v22 + 1160, v43);
  result = v32[1];
  if (!result)
  {
    result = llvm::DICompositeType::getImpl(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a2, a17, a18, a19,
               a20,
               a21,
               a22,
               1,
               1);
    v32[1] = result;
    return result;
  }
  if (*(unsigned __int16 *)(result + 2) != a3)
    return 0;
  if ((a12 & 4) == 0 && (*(_DWORD *)(result + 28) & 4) != 0)
  {
    *(_WORD *)(result + 2) = a3;
    *(_DWORD *)(result + 24) = a6;
    *(_DWORD *)(result + 28) = a12;
    *(_DWORD *)(result + 48) = a10;
    *(_DWORD *)(result + 52) = a14;
    *(_QWORD *)(result + 32) = a9;
    *(_QWORD *)(result + 40) = a11;
    v43[0] = a5;
    v43[1] = a7;
    v43[2] = a4;
    v43[3] = a8;
    v43[4] = a13;
    v43[5] = a15;
    v43[6] = a16;
    v43[7] = a2;
    v43[8] = a17;
    v43[9] = a18;
    v43[10] = a19;
    v43[11] = a20;
    v43[12] = a21;
    v43[13] = a22;
    v33 = *(unsigned int *)(result + 8);
    if ((_DWORD)v33)
    {
      v34 = 0;
      v35 = 8 * v33;
      do
      {
        v36 = (unsigned __int8 *)v43[v34 / 8];
        v37 = v32[1];
        v38 = v37 - 8 * *(unsigned int *)(v37 + 8);
        v39 = (unsigned __int8 **)(v38 + v34);
        v40 = *(unsigned __int8 **)(v38 + v34);
        if (v36 != v40)
        {
          v41 = *(_BYTE *)(v37 + 1);
          if (v40)
            llvm::MetadataTracking::untrack(v38 + v34, v40);
          *v39 = v36;
          if (v36)
          {
            if ((v41 & 0x7F) != 0)
              v42 = 2;
            else
              v42 = v37 | 2;
            llvm::MetadataTracking::track((uint64_t)v39, v36, v42);
          }
        }
        v34 += 8;
      }
      while (v35 != v34);
      return v32[1];
    }
  }
  return result;
}

uint64_t llvm::DICompositeType::getODRType(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, uint64_t a11, unsigned int a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t result;
  _QWORD *v32;
  uint64_t v33;

  v22 = *a1;
  if (!*(_BYTE *)(*a1 + 1184))
    return 0;
  v33 = a2;
  v32 = sub_1C6180A54(v22 + 1160, &v33);
  result = v32[1];
  if (!result)
  {
    result = llvm::DICompositeType::getImpl(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a2, a17, a18, a19,
               a20,
               a21,
               a22,
               1,
               1);
    v32[1] = result;
    return result;
  }
  if (*(unsigned __int16 *)(result + 2) != a3)
    return 0;
  return result;
}

uint64_t llvm::DICompositeType::getODRTypeIfExists(llvm::DICompositeType *this, llvm::LLVMContext *a2, llvm::MDString *a3)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;

  v3 = *(_QWORD *)this;
  if (!*(_BYTE *)(*(_QWORD *)this + 1184))
    return 0;
  v6 = 0;
  v5 = sub_1C6144BDC(*(_QWORD *)(v3 + 1160), *(_DWORD *)(v3 + 1176), (uint64_t)a2, &v6);
  result = 0;
  if (v5)
    return *(_QWORD *)(v6 + 8);
  return result;
}

uint64_t llvm::DISubroutineType::DISubroutineType(uint64_t this, uint64_t a2, char a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  int v10;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  char *v15;
  unsigned __int8 **v16;
  char v17;
  unint64_t v18;

  *(_BYTE *)this = 14;
  v10 = a3 & 0x7F;
  *(_BYTE *)(this + 1) = a3 & 0x7F;
  *(_WORD *)(this + 2) = 0;
  *(_DWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 8) = a7;
  *(_DWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 16) = a2;
  if (a7)
  {
    v12 = 0;
    v13 = 8 * a7;
    do
    {
      v14 = *(unsigned __int8 **)(a6 + 8 * v12);
      v15 = (char *)(this - 8 * *(unsigned int *)(this + 8));
      v16 = (unsigned __int8 **)&v15[8 * v12];
      v17 = *(_BYTE *)(this + 1);
      if (*v16)
        llvm::MetadataTracking::untrack((uint64_t)&v15[8 * v12], *v16);
      *v16 = v14;
      if (v14)
      {
        if ((v17 & 0x7F) != 0)
          v18 = 2;
        else
          v18 = this | 2;
        llvm::MetadataTracking::track((uint64_t)v16, v14, v18);
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
    v10 = *(_BYTE *)(this + 1) & 0x7F;
  }
  if (!v10)
    llvm::MDNode::countUnresolvedOperands(this);
  *(_WORD *)(this + 2) = 21;
  *(_DWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 28) = a4;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 48) = 0;
  *(_BYTE *)(this + 52) = a5;
  return this;
}

{
  int v10;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  char *v15;
  unsigned __int8 **v16;
  char v17;
  unint64_t v18;

  *(_BYTE *)this = 14;
  v10 = a3 & 0x7F;
  *(_BYTE *)(this + 1) = a3 & 0x7F;
  *(_WORD *)(this + 2) = 0;
  *(_DWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 8) = a7;
  *(_DWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 16) = a2;
  if (a7)
  {
    v12 = 0;
    v13 = 8 * a7;
    do
    {
      v14 = *(unsigned __int8 **)(a6 + 8 * v12);
      v15 = (char *)(this - 8 * *(unsigned int *)(this + 8));
      v16 = (unsigned __int8 **)&v15[8 * v12];
      v17 = *(_BYTE *)(this + 1);
      if (*v16)
        llvm::MetadataTracking::untrack((uint64_t)&v15[8 * v12], *v16);
      *v16 = v14;
      if (v14)
      {
        if ((v17 & 0x7F) != 0)
          v18 = 2;
        else
          v18 = this | 2;
        llvm::MetadataTracking::track((uint64_t)v16, v14, v18);
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
    v10 = *(_BYTE *)(this + 1) & 0x7F;
  }
  if (!v10)
    llvm::MDNode::countUnresolvedOperands(this);
  *(_WORD *)(this + 2) = 21;
  *(_DWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 28) = a4;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_DWORD *)(this + 48) = 0;
  *(_BYTE *)(this + 52) = a5;
  return this;
}

char *llvm::DISubroutineType::getImpl(_QWORD *a1, int a2, char a3, uint64_t a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t *v13;
  int v14;
  char *result;
  BOOL v16;
  char *v17;
  uint64_t v18;
  llvm::MDNode *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char v25;
  unsigned __int8 *v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  char v30;
  char **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (a5)
    goto LABEL_9;
  v12 = *a1;
  v13 = (uint64_t *)(*a1 + 680);
  LODWORD(v32) = a2;
  BYTE4(v32) = a3;
  v33 = a4;
  v31 = 0;
  v14 = sub_1C53A977C(v13, (uint64_t)&v32, (uint64_t **)&v31);
  result = 0;
  if (v14)
    v16 = v31 == (char **)(*(_QWORD *)(v12 + 680) + 8 * *(unsigned int *)(v12 + 696));
  else
    v16 = 1;
  if (!v16)
    result = *v31;
  if (!result && a6)
  {
LABEL_9:
    v28 = a2;
    v30 = a3;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = a4;
    v17 = (char *)operator new(0x58uLL);
    v18 = 0;
    v17[32] = 14;
    v19 = (llvm::MDNode *)(v17 + 32);
    *(_OWORD *)v17 = 0u;
    *((_OWORD *)v17 + 1) = 0u;
    v17[33] = a5 & 0x7F;
    *((_WORD *)v17 + 17) = 0;
    *(_QWORD *)(v17 + 36) = 0x400000000;
    *((_DWORD *)v17 + 11) = 0;
    v29 = a1;
    *((_QWORD *)v17 + 6) = a1;
    do
    {
      v20 = *(unsigned __int8 **)((char *)&v32 + v18);
      v21 = *((unsigned int *)v17 + 10);
      v22 = v18 - 8 * v21;
      v23 = (uint64_t)v19 + v22;
      v24 = (char *)v19 - 8 * v21;
      v25 = v17[33];
      v26 = *(unsigned __int8 **)&v24[v18];
      if (v26)
        llvm::MetadataTracking::untrack((uint64_t)v19 + v22, v26);
      *(_QWORD *)&v24[v18] = v20;
      if (v20)
      {
        if ((v25 & 0x7F) != 0)
          v27 = 2;
        else
          v27 = (unint64_t)(v17 + 32) | 2;
        llvm::MetadataTracking::track(v23, v20, v27);
      }
      v18 += 8;
    }
    while (v18 != 32);
    if ((v17[33] & 0x7F) == 0)
      llvm::MDNode::countUnresolvedOperands((uint64_t)v19);
    *((_WORD *)v17 + 17) = 21;
    *((_DWORD *)v17 + 14) = 0;
    *((_DWORD *)v17 + 15) = v28;
    *((_QWORD *)v17 + 8) = 0;
    *((_QWORD *)v17 + 9) = 0;
    *((_DWORD *)v17 + 20) = 0;
    v17[84] = v30;
    result = v17 + 32;
    sub_1C53A1C30(v19, a5, *v29 + 680);
  }
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_1C53A1C30(llvm::MDNode *a1, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  _BYTE v4[31];

  if (a2)
  {
    if (a2 == 1)
      llvm::MDNode::storeDistinctInContext(a1);
  }
  else
  {
    sub_1C53A9A04(a3, (uint64_t *)&v3, (uint64_t)v4);
  }
}

uint64_t llvm::DIFile::DIFile(uint64_t this, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int v12;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  char *v18;
  unsigned __int8 **v19;
  char v20;
  unint64_t v21;
  uint64_t v22;

  v8 = a6;
  v9 = a5;
  *(_BYTE *)this = 15;
  v12 = a3 & 0x7F;
  *(_BYTE *)(this + 1) = a3 & 0x7F;
  *(_WORD *)(this + 2) = 0;
  *(_DWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 8) = a8;
  *(_DWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 16) = a2;
  if (a8)
  {
    v15 = 0;
    v16 = 8 * a8;
    do
    {
      v17 = *(unsigned __int8 **)(a7 + 8 * v15);
      v18 = (char *)(this - 8 * *(unsigned int *)(this + 8));
      v19 = (unsigned __int8 **)&v18[8 * v15];
      v20 = *(_BYTE *)(this + 1);
      if (*v19)
        llvm::MetadataTracking::untrack((uint64_t)&v18[8 * v15], *v19);
      *v19 = v17;
      if (v17)
      {
        if ((v20 & 0x7F) != 0)
          v21 = 2;
        else
          v21 = this | 2;
        llvm::MetadataTracking::track((uint64_t)v19, v17, v21);
      }
      ++v15;
      v16 -= 8;
    }
    while (v16);
    v12 = *(_BYTE *)(this + 1) & 0x7F;
    v8 = a6;
    v9 = a5;
  }
  if (!v12)
    llvm::MDNode::countUnresolvedOperands(this);
  *(_WORD *)(this + 2) = 41;
  v22 = *(_QWORD *)(a4 + 16);
  *(_OWORD *)(this + 24) = *(_OWORD *)a4;
  *(_QWORD *)(this + 40) = v22;
  *(_QWORD *)(this + 48) = v9;
  *(_QWORD *)(this + 56) = v8;
  return this;
}

{
  uint64_t v8;
  uint64_t v9;
  int v12;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  char *v18;
  unsigned __int8 **v19;
  char v20;
  unint64_t v21;
  uint64_t v22;

  v8 = a6;
  v9 = a5;
  *(_BYTE *)this = 15;
  v12 = a3 & 0x7F;
  *(_BYTE *)(this + 1) = a3 & 0x7F;
  *(_WORD *)(this + 2) = 0;
  *(_DWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 8) = a8;
  *(_DWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 16) = a2;
  if (a8)
  {
    v15 = 0;
    v16 = 8 * a8;
    do
    {
      v17 = *(unsigned __int8 **)(a7 + 8 * v15);
      v18 = (char *)(this - 8 * *(unsigned int *)(this + 8));
      v19 = (unsigned __int8 **)&v18[8 * v15];
      v20 = *(_BYTE *)(this + 1);
      if (*v19)
        llvm::MetadataTracking::untrack((uint64_t)&v18[8 * v15], *v19);
      *v19 = v17;
      if (v17)
      {
        if ((v20 & 0x7F) != 0)
          v21 = 2;
        else
          v21 = this | 2;
        llvm::MetadataTracking::track((uint64_t)v19, v17, v21);
      }
      ++v15;
      v16 -= 8;
    }
    while (v16);
    v12 = *(_BYTE *)(this + 1) & 0x7F;
    v8 = a6;
    v9 = a5;
  }
  if (!v12)
    llvm::MDNode::countUnresolvedOperands(this);
  *(_WORD *)(this + 2) = 41;
  v22 = *(_QWORD *)(a4 + 16);
  *(_OWORD *)(this + 24) = *(_OWORD *)a4;
  *(_QWORD *)(this + 40) = v22;
  *(_QWORD *)(this + 48) = v9;
  *(_QWORD *)(this + 56) = v8;
  return this;
}

uint64_t llvm::DIFile::getChecksumKind(uint64_t a1, uint64_t a2)
{
  if (a2 == 10)
  {
    if (*(_QWORD *)a1 == 0x324148535F4B5343 && *(_WORD *)(a1 + 8) == 13877)
      return 0x100000003;
    return 0;
  }
  if (a2 != 8)
  {
    if (a2 == 7 && *(_DWORD *)a1 == 1598772035 && *(_DWORD *)(a1 + 3) == 893668703)
      return 0x100000001;
    return 0;
  }
  if (*(_QWORD *)a1 != 0x314148535F4B5343)
    return 0;
  return 0x100000002;
}

llvm::MDNode *llvm::DIFile::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  llvm::MDNode *result;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  llvm::MDNode *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v36;
  uint64_t v37;
  llvm::MDNode **v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (a7)
    goto LABEL_7;
  v15 = *a1;
  v16 = (uint64_t *)(*a1 + 704);
  v41 = *a4;
  v17 = *((_QWORD *)a4 + 2);
  v39 = a2;
  v40 = a3;
  v42 = v17;
  v43 = a5;
  v44 = a6;
  v38 = 0;
  v18 = sub_1C53A9D8C(v16, (uint64_t)&v39, (uint64_t **)&v38);
  result = 0;
  if (v18 && v38 != (llvm::MDNode **)(*(_QWORD *)(v15 + 704) + 8 * *(unsigned int *)(v15 + 720)))
    result = *v38;
  if (!result && a8)
  {
LABEL_7:
    v39 = a2;
    v40 = a3;
    if (*((_BYTE *)a4 + 16))
      v20 = *((_QWORD *)a4 + 1);
    else
      v20 = 0;
    v33 = a5;
    v34 = a6;
    if ((_BYTE)a6)
      v21 = a5;
    else
      v21 = 0;
    *(_QWORD *)&v41 = v20;
    *((_QWORD *)&v41 + 1) = v21;
    v22 = (char *)operator new(0x60uLL);
    v23 = 0;
    *(_OWORD *)v22 = 0u;
    *((_OWORD *)v22 + 1) = 0u;
    v22[32] = 15;
    v24 = (llvm::MDNode *)(v22 + 32);
    v36 = *a4;
    v37 = *((_QWORD *)a4 + 2);
    v22[33] = a7 & 0x7F;
    *((_WORD *)v22 + 17) = 0;
    *(_QWORD *)(v22 + 36) = 0x400000000;
    *((_DWORD *)v22 + 11) = 0;
    *((_QWORD *)v22 + 6) = a1;
    do
    {
      v25 = *(unsigned __int8 **)((char *)&v39 + v23);
      v26 = *((unsigned int *)v22 + 10);
      v27 = v23 - 8 * v26;
      v28 = (uint64_t)v24 + v27;
      v29 = (char *)v24 - 8 * v26;
      v30 = v22[33];
      v31 = *(unsigned __int8 **)&v29[v23];
      if (v31)
        llvm::MetadataTracking::untrack((uint64_t)v24 + v27, v31);
      *(_QWORD *)&v29[v23] = v25;
      if (v25)
      {
        if ((v30 & 0x7F) != 0)
          v32 = 2;
        else
          v32 = (unint64_t)(v22 + 32) | 2;
        llvm::MetadataTracking::track(v28, v25, v32);
      }
      v23 += 8;
    }
    while (v23 != 32);
    if ((v22[33] & 0x7F) == 0)
      llvm::MDNode::countUnresolvedOperands((uint64_t)v24);
    *((_WORD *)v22 + 17) = 41;
    *(_OWORD *)(v22 + 56) = v36;
    *((_QWORD *)v22 + 9) = v37;
    *((_QWORD *)v22 + 10) = v33;
    *((_QWORD *)v22 + 11) = v34;
    return sub_1C53A2180(v24, a7, *a1 + 704);
  }
  return result;
}

llvm::MDNode *sub_1C53A2180(llvm::MDNode *result, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v4;
  _BYTE v5[31];

  v4 = result;
  if (a2)
  {
    if (a2 == 1)
    {
      v3 = result;
      llvm::MDNode::storeDistinctInContext(result);
      return v3;
    }
  }
  else
  {
    sub_1C53AA140(a3, (uint64_t *)&v4, (uint64_t)v5);
    return v4;
  }
  return result;
}

uint64_t llvm::DICompileUnit::DICompileUnit(uint64_t this, uint64_t a2, char a3, int a4, char a5, int a6, int a7, uint64_t a8, char a9, char a10, int a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  int v15;
  int v16;
  char v17;
  int v18;
  int v20;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  char *v26;
  unsigned __int8 **v27;
  char v28;
  unint64_t v29;

  v14 = a8;
  v15 = a7;
  v16 = a6;
  v17 = a5;
  v18 = a4;
  *(_BYTE *)this = 16;
  v20 = a3 & 0x7F;
  *(_BYTE *)(this + 1) = a3 & 0x7F;
  *(_WORD *)(this + 2) = 0;
  *(_DWORD *)(this + 4) = 0;
  *(_QWORD *)(this + 8) = a14;
  *(_QWORD *)(this + 16) = a2;
  if (a14)
  {
    v23 = 0;
    v24 = 8 * a14;
    do
    {
      v25 = *(unsigned __int8 **)(a13 + 8 * v23);
      v26 = (char *)(this - 8 * *(unsigned int *)(this + 8));
      v27 = (unsigned __int8 **)&v26[8 * v23];
      v28 = *(_BYTE *)(this + 1);
      if (*v27)
        llvm::MetadataTracking::untrack((uint64_t)&v26[8 * v23], *v27);
      *v27 = v25;
      if (v25)
      {
        if ((v28 & 0x7F) != 0)
          v29 = 2;
        else
          v29 = this | 2;
        llvm::MetadataTracking::track((uint64_t)v27, v25, v29);
      }
      ++v23;
      v24 -= 8;
    }
    while (v24);
    v20 = *(_BYTE *)(this + 1) & 0x7F;
    v14 = a8;
    v15 = a7;
    v17 = a5;
    v16 = a6;
    v18 = a4;
  }
  if (!v20)
    llvm::MDNode::countUnresolvedOperands(this);
  *(_WORD *)(this + 2) = 17;
  *(_DWORD *)(this + 24) = v18;
  *(_BYTE *)(this + 28) = v17;
  *(_DWORD *)(this + 32) = v16;
  *(_DWORD *)(this + 36) = v15;
  *(_QWORD *)(this + 40) = v14;
  *(_BYTE *)(this + 48) = a9;
  *(_BYTE *)(this + 49) = a10;
  *(_DWORD *)(this + 52) = a11;
  *(_BYTE *)(this + 56) = a12;
  return this;
}

{
  uint64_t v14;
  int v15;
  int v16;
  char v17;
  int v18;
  int v20;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  char *v26;
  unsigned __int8 **v27;
  char v28;
  unint64_t v29;

  v14 = a8;
  v15 = a7;
  v16 = a6;
  v17 = a5;
  v18 = a4;
  *(_BYTE *)this = 16;
  v20 = a3 & 0x7F;
  *(_BYTE *)(this + 1) = a3 & 0x7F;
  *(_WORD *)(this + 2) = 0;
  *(_DWORD *)(this + 4) = 0;
  *(_QWORD *)(this + 8) = a14;
  *(_QWORD *)(this + 16) = a2;
  if (a14)
  {
    v23 = 0;
    v24 = 8 * a14;
    do
    {
      v25 = *(unsigned __int8 **)(a13 + 8 * v23);
      v26 = (char *)(this - 8 * *(unsigned int *)(this + 8));
      v27 = (unsigned __int8 **)&v26[8 * v23];
      v28 = *(_BYTE *)(this + 1);
      if (*v27)
        llvm::MetadataTracking::untrack((uint64_t)&v26[8 * v23], *v27);
      *v27 = v25;
      if (v25)
      {
        if ((v28 & 0x7F) != 0)
          v29 = 2;
        else
          v29 = this | 2;
        llvm::MetadataTracking::track((uint64_t)v27, v25, v29);
      }
      ++v23;
      v24 -= 8;
    }
    while (v24);
    v20 = *(_BYTE *)(this + 1) & 0x7F;
    v14 = a8;
    v15 = a7;
    v17 = a5;
    v16 = a6;
    v18 = a4;
  }
  if (!v20)
    llvm::MDNode::countUnresolvedOperands(this);
  *(_WORD *)(this + 2) = 17;
  *(_DWORD *)(this + 24) = v18;
  *(_BYTE *)(this + 28) = v17;
  *(_DWORD *)(this + 32) = v16;
  *(_DWORD *)(this + 36) = v15;
  *(_QWORD *)(this + 40) = v14;
  *(_BYTE *)(this + 48) = a9;
  *(_BYTE *)(this + 49) = a10;
  *(_DWORD *)(this + 52) = a11;
  *(_BYTE *)(this + 56) = a12;
  return this;
}

char *llvm::DICompileUnit::getImpl(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, int a7, uint64_t a8, int a9, __int128 a10, __int128 a11, uint64_t a12, uint64_t a13, char a14, char a15, int a16, char a17, uint64_t a18, uint64_t a19, int a20)
{
  char *v21;
  uint64_t v22;
  llvm::MDNode *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  unsigned __int8 *v30;
  uint64_t v31;
  _QWORD v36[4];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v36[0] = a3;
  v36[1] = a4;
  v36[2] = a6;
  v36[3] = a8;
  v37 = a10;
  v38 = a11;
  v39 = a12;
  v40 = a18;
  v41 = a19;
  v21 = (char *)operator new(0x98uLL);
  v22 = 0;
  *(_OWORD *)v21 = 0u;
  *((_OWORD *)v21 + 1) = 0u;
  *((_OWORD *)v21 + 2) = 0u;
  *((_OWORD *)v21 + 3) = 0u;
  *((_OWORD *)v21 + 4) = 0u;
  v21[88] = 16;
  v23 = (llvm::MDNode *)(v21 + 88);
  *((_QWORD *)v21 + 10) = 0;
  v21[89] = a20 & 0x7F;
  *((_WORD *)v21 + 45) = 0;
  *(_QWORD *)(v21 + 92) = 0xB00000000;
  *((_QWORD *)v21 + 13) = a1;
  *((_DWORD *)v21 + 25) = 0;
  do
  {
    v24 = (unsigned __int8 *)v36[v22];
    v25 = *((unsigned int *)v21 + 24);
    v26 = v22 * 8 - 8 * v25;
    v27 = (uint64_t)v23 + v26;
    v28 = (char *)v23 - 8 * v25;
    v29 = v21[89];
    v30 = *(unsigned __int8 **)&v28[v22 * 8];
    if (v30)
      llvm::MetadataTracking::untrack((uint64_t)v23 + v26, v30);
    *(_QWORD *)&v28[v22 * 8] = v24;
    if (v24)
    {
      if ((v29 & 0x7F) != 0)
        v31 = 2;
      else
        v31 = (unint64_t)(v21 + 88) | 2;
      llvm::MetadataTracking::track(v27, v24, v31);
    }
    ++v22;
  }
  while (v22 != 11);
  if ((v21[89] & 0x7F) == 0)
    llvm::MDNode::countUnresolvedOperands((uint64_t)v23);
  *((_WORD *)v21 + 45) = 17;
  *((_DWORD *)v21 + 28) = a2;
  v21[116] = a5;
  *((_DWORD *)v21 + 30) = a7;
  *((_DWORD *)v21 + 31) = a9;
  *((_QWORD *)v21 + 16) = a13;
  v21[136] = a14;
  v21[137] = a15;
  *((_DWORD *)v21 + 35) = a16;
  v21[144] = a17;
  if (a20 == 1)
    llvm::MDNode::storeDistinctInContext(v23);
  return v21 + 88;
}

uint64_t llvm::DICompileUnit::getEmissionKind(int *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v12;
  int v13;
  uint64_t v15;
  uint64_t v16;

  result = 0;
  if (a2 <= 13)
  {
    if (a2 == 7)
    {
      v12 = *a1;
      v13 = *(int *)((char *)a1 + 3);
      if (v12 == 1698983758 && v13 == 1735746149)
        return 0x100000000;
    }
    else
    {
      if (a2 != 9)
        return result;
      v4 = *(_QWORD *)a1;
      v5 = *((unsigned __int8 *)a1 + 8);
      if (v4 == 0x756265446C6C7546 && v5 == 103)
        return 0x100000001;
    }
    return 0;
  }
  if (a2 != 14)
  {
    if (a2 != 19)
      return result;
    v7 = *(_QWORD *)a1;
    v8 = *((_QWORD *)a1 + 1);
    v9 = *(_QWORD *)((char *)a1 + 11);
    if (v7 == 0x7269446775626544 && v8 == 0x4F73657669746365 && v9 == 0x796C6E4F73657669)
      return 0x100000003;
    return 0;
  }
  v15 = *(_QWORD *)a1;
  v16 = *(_QWORD *)((char *)a1 + 6);
  if (v15 != 0x6C626154656E694CLL || v16 != 0x796C6E4F73656C62)
    return 0;
  return 0x100000002;
}

uint64_t llvm::DICompileUnit::getNameTableKind(uint64_t a1, uint64_t a2)
{
  if (a2 == 3)
  {
    if (*(_WORD *)a1 == 20039 && *(_BYTE *)(a1 + 2) == 85)
      return 0x100000001;
    return 0;
  }
  if (a2 != 4)
  {
    if (a2 == 7 && *(_DWORD *)a1 == 1634100548 && *(_DWORD *)(a1 + 3) == 1953264993)
      return 0x100000000;
    return 0;
  }
  if (*(_DWORD *)a1 != 1701736270)
    return 0;
  return 0x100000002;
}

char *llvm::DICompileUnit::emissionKindString(unsigned int a1)
{
  if (a1 > 3)
    return 0;
  else
    return off_1E814E380[a1];
}

uint64_t llvm::DISubprogram::DISubprogram(uint64_t this, uint64_t a2, char a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10, uint64_t a11)
{
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v17;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  char *v23;
  unsigned __int8 **v24;
  char v25;
  unint64_t v26;

  v11 = a8;
  v12 = a7;
  v13 = a6;
  v14 = a5;
  v15 = a4;
  *(_BYTE *)this = 17;
  v17 = a3 & 0x7F;
  *(_BYTE *)(this + 1) = a3 & 0x7F;
  *(_WORD *)(this + 2) = 0;
  *(_DWORD *)(this + 4) = 0;
  *(_QWORD *)(this + 8) = a11;
  *(_QWORD *)(this + 16) = a2;
  if (a11)
  {
    v20 = 0;
    v21 = 8 * a11;
    do
    {
      v22 = *(unsigned __int8 **)(a10 + 8 * v20);
      v23 = (char *)(this - 8 * *(unsigned int *)(this + 8));
      v24 = (unsigned __int8 **)&v23[8 * v20];
      v25 = *(_BYTE *)(this + 1);
      if (*v24)
        llvm::MetadataTracking::untrack((uint64_t)&v23[8 * v20], *v24);
      *v24 = v22;
      if (v22)
      {
        if ((v25 & 0x7F) != 0)
          v26 = 2;
        else
          v26 = this | 2;
        llvm::MetadataTracking::track((uint64_t)v24, v22, v26);
      }
      ++v20;
      v21 -= 8;
    }
    while (v21);
    v17 = *(_BYTE *)(this + 1) & 0x7F;
    v11 = a8;
    v12 = a7;
    v14 = a5;
    v13 = a6;
    v15 = a4;
  }
  if (!v17)
    llvm::MDNode::countUnresolvedOperands(this);
  *(_WORD *)(this + 2) = 46;
  *(_DWORD *)(this + 24) = v15;
  *(_DWORD *)(this + 28) = v14;
  *(_DWORD *)(this + 32) = v13;
  *(_DWORD *)(this + 36) = v12;
  *(_DWORD *)(this + 40) = v11;
  *(_DWORD *)(this + 44) = a9;
  return this;
}

{
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v17;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  char *v23;
  unsigned __int8 **v24;
  char v25;
  unint64_t v26;

  v11 = a8;
  v12 = a7;
  v13 = a6;
  v14 = a5;
  v15 = a4;
  *(_BYTE *)this = 17;
  v17 = a3 & 0x7F;
  *(_BYTE *)(this + 1) = a3 & 0x7F;
  *(_WORD *)(this + 2) = 0;
  *(_DWORD *)(this + 4) = 0;
  *(_QWORD *)(this + 8) = a11;
  *(_QWORD *)(this + 16) = a2;
  if (a11)
  {
    v20 = 0;
    v21 = 8 * a11;
    do
    {
      v22 = *(unsigned __int8 **)(a10 + 8 * v20);
      v23 = (char *)(this - 8 * *(unsigned int *)(this + 8));
      v24 = (unsigned __int8 **)&v23[8 * v20];
      v25 = *(_BYTE *)(this + 1);
      if (*v24)
        llvm::MetadataTracking::untrack((uint64_t)&v23[8 * v20], *v24);
      *v24 = v22;
      if (v22)
      {
        if ((v25 & 0x7F) != 0)
          v26 = 2;
        else
          v26 = this | 2;
        llvm::MetadataTracking::track((uint64_t)v24, v22, v26);
      }
      ++v20;
      v21 -= 8;
    }
    while (v21);
    v17 = *(_BYTE *)(this + 1) & 0x7F;
    v11 = a8;
    v12 = a7;
    v14 = a5;
    v13 = a6;
    v15 = a4;
  }
  if (!v17)
    llvm::MDNode::countUnresolvedOperands(this);
  *(_WORD *)(this + 2) = 46;
  *(_DWORD *)(this + 24) = v15;
  *(_DWORD *)(this + 28) = v14;
  *(_DWORD *)(this + 32) = v13;
  *(_DWORD *)(this + 36) = v12;
  *(_DWORD *)(this + 40) = v11;
  *(_DWORD *)(this + 44) = a9;
  return this;
}

uint64_t llvm::DILocalScope::getSubprogram(uint64_t this)
{
  while ((*(_BYTE *)this & 0xFE) == 0x12)
    this = *(_QWORD *)(this - 8 * *(unsigned int *)(this + 8) + 8);
  return this;
}

uint64_t llvm::DILocalScope::getNonLexicalBlockFileScope(uint64_t this)
{
  while (*(_BYTE *)this == 19)
    this = *(_QWORD *)(this - 8 * *(unsigned int *)(this + 8) + 8);
  return this;
}

unsigned __int8 *llvm::DILocalScope::cloneScopeForSubprogram(llvm::DIScope *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  llvm::DIScope *Scope;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  llvm::MDNode *v13;
  llvm::MDNode *v14;
  uint64_t v15;
  unsigned __int8 **v16;
  char v17;
  uint64_t v18;
  llvm::MDNode *v19;
  llvm::MDNode *v20;
  llvm::MDNode *v21;
  llvm::DIScope *v23;
  llvm::MDNode *v24;
  void *v25;
  uint64_t v26;
  _QWORD v27[7];

  v27[6] = *MEMORY[0x1E0C80C00];
  v25 = v27;
  v26 = 0x600000000;
  if (*(_BYTE *)a1 != 17)
  {
    Scope = a1;
    while (1)
    {
      v23 = Scope;
      v24 = 0;
      if (sub_1C47AD1C0(a4, &v23, &v24))
      {
        if (v24 != (llvm::MDNode *)(*(_QWORD *)a4 + 16 * *(unsigned int *)(a4 + 16)))
          break;
      }
      v7 = v26;
      if (v26 >= (unint64_t)HIDWORD(v26))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, (uint64_t)v27, v26 + 1, 8);
        v7 = v26;
      }
      *((_QWORD *)v25 + v7) = Scope;
      v8 = v26 + 1;
      LODWORD(v26) = v26 + 1;
      Scope = (llvm::DIScope *)llvm::DIScope::getScope(Scope);
      if (*(_BYTE *)Scope == 17)
      {
        v9 = 0;
        goto LABEL_10;
      }
    }
    v9 = (unsigned __int8 *)*((_QWORD *)v24 + 1);
    v8 = v26;
LABEL_10:
    if (v9)
      a2 = v9;
    v10 = v25;
    if (v8)
    {
      v11 = 8 * v8;
      v12 = (char *)v25 - 8;
      do
      {
        v13 = *(llvm::MDNode **)&v12[v11];
        llvm::MDNode::clone(v13);
        v14 = v24;
        v15 = *((unsigned int *)v24 + 2);
        v16 = (unsigned __int8 **)((char *)v24 - 8 * v15 + 8);
        v17 = *((_BYTE *)v24 + 1);
        if (*v16)
          llvm::MetadataTracking::untrack((uint64_t)v24 - 8 * v15 + 8, *v16);
        *v16 = a2;
        if (a2)
        {
          if ((v17 & 0x7F) != 0)
            v18 = 2;
          else
            v18 = (unint64_t)v14 | 2;
          llvm::MetadataTracking::track((uint64_t)v16, a2, v18);
        }
        v19 = v24;
        v24 = 0;
        a2 = (unsigned __int8 *)llvm::MDNode::replaceWithUniquedImpl(v19);
        v23 = v13;
        sub_1C53AA4C0(a4, (uint64_t *)&v23)[1] = a2;
        v21 = v24;
        v24 = 0;
        if (v21)
          llvm::MDNode::deleteTemporary(v21, v20);
        v11 -= 8;
      }
      while (v11);
      v10 = v25;
    }
    if (v10 != v27)
      free(v10);
  }
  return a2;
}

uint64_t llvm::DISubprogram::getFlag(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _BOOL4 v3;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v2 = 0;
  v3 = 1;
  switch(a2)
  {
    case 12:
      if (*(_QWORD *)a1 == 0x67616C4650534944 && *(_DWORD *)(a1 + 8) == 1869768026)
      {
        v2 = 0x100000000;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x67616C4650534944 || *(_DWORD *)(a1 + 8) != 1701999952)
          goto LABEL_36;
        v2 = 0x100000020;
      }
      goto LABEL_74;
    case 15:
      v2 = 0x100000001;
      if (*(_QWORD *)a1 ^ 0x67616C4650534944 | *(_QWORD *)(a1 + 7) ^ 0x6C61757472695667)
        v2 = 0;
      goto LABEL_45;
    case 17:
      if (*(_QWORD *)a1 == 0x67616C4650534944
        && *(_QWORD *)(a1 + 8) == 0x657A696D6974704FLL
        && *(_BYTE *)(a1 + 16) == 100)
      {
        v2 = 0x100000010;
      }
      else if (*(_QWORD *)a1 == 0x67616C4650534944
             && *(_QWORD *)(a1 + 8) == 0x61746E656D656C45
             && *(_BYTE *)(a1 + 16) == 108)
      {
        v2 = 0x100000040;
      }
      else if (*(_QWORD *)a1 == 0x67616C4650534944
             && *(_QWORD *)(a1 + 8) == 0x7669737275636552
             && *(_BYTE *)(a1 + 16) == 101)
      {
        v2 = 0x100000080;
      }
      else
      {
LABEL_36:
        v2 = 0;
      }
      goto LABEL_74;
    case 18:
      if (*(_QWORD *)a1 == 0x67616C4650534944
        && *(_QWORD *)(a1 + 8) == 0x6974696E69666544
        && *(_WORD *)(a1 + 16) == 28271)
      {
        v2 = 0x100000008;
        goto LABEL_74;
      }
      v2 = 0;
LABEL_45:
      v3 = HIDWORD(v2) == 0;
LABEL_46:
      if (a2 == 15 && v3)
      {
        v14 = *(_QWORD *)a1 ^ 0x67616C4650534944 | *(_QWORD *)(a1 + 7) ^ 0x646574656C654467;
        v15 = 0x100000200;
        goto LABEL_53;
      }
      v16 = !v3;
      if (a2 != 18)
        v16 = 1;
      if ((v16 & 1) == 0)
      {
        v14 = *(_QWORD *)a1 ^ 0x67616C4650534944 | *(_QWORD *)(a1 + 8) ^ 0x65726944436A624FLL | *(unsigned __int16 *)(a1 + 16) ^ 0x7463;
        v15 = 0x100000800;
LABEL_53:
        if (!v14)
          v2 = v15;
      }
LABEL_74:
      if ((v2 & 0x300000000) != 0)
        return v2;
      else
        return 0;
    case 19:
      v2 = 0x100000002;
      if (*(_QWORD *)a1 != 0x67616C4650534944
        || *(_QWORD *)(a1 + 8) != 0x7472695665727550
        || *(_QWORD *)(a1 + 11) != 0x6C61757472695665)
      {
        v2 = 0x100000004;
        if (*(_QWORD *)a1 ^ 0x67616C4650534944 | *(_QWORD *)(a1 + 8) ^ 0x556F546C61636F4CLL | *(_QWORD *)(a1 + 11) ^ 0x74696E556F546C61)
          v2 = 0;
      }
      goto LABEL_74;
    case 22:
      if (*(_QWORD *)a1 ^ 0x67616C4650534944 | *(_QWORD *)(a1 + 8) ^ 0x706275536E69614DLL | *(_QWORD *)(a1 + 14) ^ 0x6D6172676F727062)
        v2 = 0;
      else
        v2 = 0x100000100;
      goto LABEL_74;
    default:
      goto LABEL_46;
  }
}

const char *llvm::DISubprogram::getFlagString(int a1)
{
  const char *result;
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;

  result = (const char *)&unk_1C86BF3B6;
  if (a1 > 15)
  {
    if (a1 > 31)
    {
      v3 = "DISPFlagMainSubprogram";
      v4 = "DISPFlagDeleted";
      v5 = "DISPFlagObjCDirect";
      if (a1 != 2048)
        v5 = (const char *)&unk_1C86BF3B6;
      if (a1 != 512)
        v4 = v5;
      if (a1 != 256)
        v3 = v4;
      v6 = "DISPFlagPure";
      v7 = "DISPFlagElemental";
      v8 = "DISPFlagRecursive";
      if (a1 != 128)
        v8 = (const char *)&unk_1C86BF3B6;
      if (a1 != 64)
        v7 = v8;
      if (a1 != 32)
        v6 = v7;
      if (a1 <= 255)
        return v6;
      else
        return v3;
    }
    else if (a1 == 16)
    {
      return "DISPFlagOptimized";
    }
  }
  else
  {
    switch(a1)
    {
      case 0:
        result = "DISPFlagZero";
        break;
      case 1:
        result = "DISPFlagVirtual";
        break;
      case 2:
        result = "DISPFlagPureVirtual";
        break;
      case 4:
        result = "DISPFlagLocalToUnit";
        break;
      case 8:
        result = "DISPFlagDefinition";
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t llvm::DISubprogram::splitFlags(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;

  if ((result & 1) != 0)
  {
    v8 = result;
    v9 = *(unsigned int *)(a2 + 8);
    v10 = a2;
    if (v9 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v9 + 1, 4);
      LODWORD(v9) = *(_DWORD *)(v10 + 8);
    }
    a2 = v10;
    *(_DWORD *)(*(_QWORD *)v10 + 4 * v9) = 1;
    ++*(_DWORD *)(v10 + 8);
    result = v8 & 0xFFE;
  }
  if ((result & 2) != 0)
  {
    v11 = result;
    v12 = result & 2;
    v13 = *(unsigned int *)(a2 + 8);
    v14 = a2;
    if (v13 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v13 + 1, 4);
      LODWORD(v13) = *(_DWORD *)(v14 + 8);
    }
    a2 = v14;
    *(_DWORD *)(*(_QWORD *)v14 + 4 * v13) = v12;
    ++*(_DWORD *)(v14 + 8);
    result = (v12 ^ 0xFFF) & v11;
  }
  if ((result & 4) != 0)
  {
    v6 = result & 4;
    v7 = *(unsigned int *)(a2 + 8);
    if (v7 >= *(_DWORD *)(a2 + 12))
    {
      v43 = result;
      v44 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v7 + 1, 4);
      a2 = v44;
      LODWORD(result) = v43;
      LODWORD(v7) = *(_DWORD *)(v44 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v7) = v6;
    ++*(_DWORD *)(a2 + 8);
    result = (v6 ^ 0xFFF) & result;
  }
  if ((result & 8) != 0)
  {
    v2 = result & 8;
    v3 = *(unsigned int *)(a2 + 8);
    if (v3 >= *(_DWORD *)(a2 + 12))
    {
      v41 = result;
      v42 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v3 + 1, 4);
      a2 = v42;
      LODWORD(result) = v41;
      LODWORD(v3) = *(_DWORD *)(v42 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v3) = v2;
    ++*(_DWORD *)(a2 + 8);
    result = (v2 ^ 0xFFF) & result;
  }
  if ((result & 0x10) != 0)
  {
    v4 = result & 0x10;
    v5 = *(unsigned int *)(a2 + 8);
    if (v5 >= *(_DWORD *)(a2 + 12))
    {
      v15 = result;
      v16 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v5 + 1, 4);
      a2 = v16;
      LODWORD(result) = v15;
      LODWORD(v5) = *(_DWORD *)(v16 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v5) = v4;
    ++*(_DWORD *)(a2 + 8);
    result = (v4 ^ 0xFFF) & result;
  }
  if ((result & 0x20) != 0)
  {
    v17 = result;
    v18 = result & 0x20;
    v19 = *(unsigned int *)(a2 + 8);
    v20 = a2;
    if (v19 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v19 + 1, 4);
      LODWORD(v19) = *(_DWORD *)(v20 + 8);
    }
    a2 = v20;
    *(_DWORD *)(*(_QWORD *)v20 + 4 * v19) = v18;
    ++*(_DWORD *)(v20 + 8);
    result = (v18 ^ 0xFFF) & v17;
  }
  if ((result & 0x40) != 0)
  {
    v21 = result;
    v22 = result & 0x40;
    v23 = *(unsigned int *)(a2 + 8);
    v24 = a2;
    if (v23 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v23 + 1, 4);
      LODWORD(v23) = *(_DWORD *)(v24 + 8);
    }
    a2 = v24;
    *(_DWORD *)(*(_QWORD *)v24 + 4 * v23) = v22;
    ++*(_DWORD *)(v24 + 8);
    result = (v22 ^ 0xFFF) & v21;
  }
  if ((result & 0x80) != 0)
  {
    v25 = result;
    v26 = result & 0x80;
    v27 = *(unsigned int *)(a2 + 8);
    v28 = a2;
    if (v27 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v27 + 1, 4);
      LODWORD(v27) = *(_DWORD *)(v28 + 8);
    }
    a2 = v28;
    *(_DWORD *)(*(_QWORD *)v28 + 4 * v27) = v26;
    ++*(_DWORD *)(v28 + 8);
    result = (v26 ^ 0xFFF) & v25;
  }
  if ((result & 0x100) != 0)
  {
    v29 = result;
    v30 = result & 0x100;
    v31 = *(unsigned int *)(a2 + 8);
    v32 = a2;
    if (v31 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v31 + 1, 4);
      LODWORD(v31) = *(_DWORD *)(v32 + 8);
    }
    a2 = v32;
    *(_DWORD *)(*(_QWORD *)v32 + 4 * v31) = v30;
    ++*(_DWORD *)(v32 + 8);
    result = (v30 ^ 0xFFF) & v29;
  }
  if ((result & 0x200) != 0)
  {
    v33 = result;
    v34 = result & 0x200;
    v35 = *(unsigned int *)(a2 + 8);
    v36 = a2;
    if (v35 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v35 + 1, 4);
      LODWORD(v35) = *(_DWORD *)(v36 + 8);
    }
    a2 = v36;
    *(_DWORD *)(*(_QWORD *)v36 + 4 * v35) = v34;
    ++*(_DWORD *)(v36 + 8);
    result = (v34 ^ 0xFFF) & v33;
  }
  if ((result & 0x800) != 0)
  {
    v37 = result;
    v38 = result & 0x800;
    v39 = *(unsigned int *)(a2 + 8);
    v40 = a2;
    if (v39 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v39 + 1, 4);
      LODWORD(v39) = *(_DWORD *)(v40 + 8);
    }
    *(_DWORD *)(*(_QWORD *)v40 + 4 * v39) = v38;
    ++*(_DWORD *)(v40 + 8);
    return (v38 ^ 0xFFF) & v37;
  }
  return result;
}

uint64_t llvm::DISubprogram::getImpl(_QWORD *a1, void *a2, uint64_t a3, void *a4, void *a5, int a6, void *a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, char a20)
{
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  size_t v30;
  int v31;
  int v32;
  void *v33;
  unsigned __int8 **v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unsigned __int8 **v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  void *v47;
  void *v48;
  uint64_t v52;
  uint64_t *v53[3];
  void *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v23 = a1;
  v24 = a16;
  v25 = a13;
  v26 = a9;
  v71 = *MEMORY[0x1E0C80C00];
  if (a19)
    goto LABEL_7;
  v27 = *a1;
  v28 = (uint64_t *)(*a1 + 728);
  v54 = a2;
  v55 = a3;
  v47 = a4;
  v48 = a7;
  v56 = a4;
  v57 = a5;
  LODWORD(v58) = a6;
  v59 = a7;
  LODWORD(v60) = a8;
  v61 = a9;
  v62 = a10;
  v63 = a11;
  v64 = a12;
  v65 = a13;
  v66 = a14;
  v67 = a15;
  v68 = a16;
  v69 = a17;
  v70 = a18;
  v53[0] = 0;
  v29 = 0;
  if (sub_1C53AA6A8(v28, (uint64_t)&v54, v53)
    && v53[0] != (uint64_t *)(*(_QWORD *)(v27 + 728) + 8 * *(unsigned int *)(v27 + 744)))
  {
    v29 = *v53[0];
  }
  v25 = a13;
  v23 = a1;
  v26 = a9;
  v24 = a16;
  a4 = v47;
  a7 = v48;
  if (!v29)
  {
    if (a20)
    {
LABEL_7:
      v54 = &v56;
      v56 = a5;
      v57 = a2;
      v58 = a3;
      v59 = a4;
      v60 = a7;
      v61 = a12;
      v62 = a14;
      v63 = a15;
      v64 = v26;
      v65 = v25;
      v66 = v24;
      v67 = a17;
      v68 = a18;
      v55 = 0xD0000000DLL;
      if (a18)
      {
        v30 = 104;
        v31 = a19;
      }
      else
      {
        LODWORD(v55) = 12;
        v31 = a19;
        if (a17)
        {
          v30 = 96;
        }
        else
        {
          LODWORD(v55) = 11;
          if (v24)
          {
            v30 = 88;
          }
          else
          {
            LODWORD(v55) = 10;
            if (v25)
            {
              v30 = 80;
            }
            else
            {
              if (v26)
                v32 = 9;
              else
                v32 = 8;
              LODWORD(v55) = v32;
              v30 = (8 * v32);
            }
          }
        }
      }
      v33 = operator new(v30 + 48);
      bzero(v33, v30);
      v29 = (uint64_t)v33 + v30;
      v34 = (unsigned __int8 **)v54;
      v35 = v55;
      *(_BYTE *)v29 = 17;
      v36 = v31 & 0x7F;
      *(_BYTE *)(v29 + 1) = v31 & 0x7F;
      *(_WORD *)(v29 + 2) = 0;
      *(_DWORD *)(v29 + 4) = 0;
      *(_QWORD *)(v29 + 8) = v35;
      *(_QWORD *)(v29 + 16) = v23;
      if ((_DWORD)v35)
      {
        v37 = v23;
        v38 = 8 * v35;
        v39 = v29;
        do
        {
          v40 = *v34;
          v41 = *(unsigned int *)(v29 + 8);
          v42 = (unsigned __int8 **)(v39 - 8 * v41);
          v43 = *(_BYTE *)(v29 + 1);
          if (*v42)
            llvm::MetadataTracking::untrack(v39 - 8 * v41, *v42);
          *v42 = v40;
          if (v40)
          {
            if ((v43 & 0x7F) != 0)
              v44 = 2;
            else
              v44 = v29 | 2;
            llvm::MetadataTracking::track((uint64_t)v42, v40, v44);
          }
          ++v34;
          v39 += 8;
          v38 -= 8;
        }
        while (v38);
        v36 = *(_BYTE *)(v29 + 1) & 0x7F;
        v23 = v37;
      }
      if (!v36)
        llvm::MDNode::countUnresolvedOperands(v29);
      *(_WORD *)(v29 + 2) = 46;
      *(_DWORD *)(v29 + 24) = a6;
      *(_DWORD *)(v29 + 28) = a8;
      *(_QWORD *)(v29 + 32) = a10;
      *(_QWORD *)(v29 + 40) = a11;
      v45 = *v23;
      v52 = v29;
      if (v31 == 1)
      {
        llvm::MDNode::storeDistinctInContext((llvm::MDNode *)v29);
      }
      else if (!v31)
      {
        sub_1C53AAC90(v45 + 728, &v52, (uint64_t)v53);
        v29 = v52;
      }
      if (v54 != &v56)
        free(v54);
    }
  }
  return v29;
}

BOOL llvm::DISubprogram::describes(llvm::DISubprogram *this, const llvm::Function *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  const llvm::Function **v8;
  const llvm::Function *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  llvm::DISubprogram *v13;
  const llvm::Function **v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  const llvm::Function **v19;
  const llvm::Function *v20;
  const llvm::Function *v21;

  if ((*((_BYTE *)a2 + 23) & 0x20) == 0)
    goto LABEL_9;
  v3 = ***(_QWORD ***)a2;
  v21 = a2;
  v4 = *(_DWORD *)(v3 + 2496);
  if (v4)
  {
    v5 = *(_QWORD *)(v3 + 2480);
    v6 = v4 - 1;
    v7 = v6 & ((a2 >> 4) ^ (a2 >> 9));
    v8 = (const llvm::Function **)(v5 + 40 * v7);
    v9 = *v8;
    if (*v8 == a2)
      goto LABEL_4;
    v15 = 0;
    v16 = 1;
    while (v9 != (const llvm::Function *)-4096)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v9 == (const llvm::Function *)-8192;
      if (v17)
        v15 = v8;
      v18 = v7 + v16++;
      v7 = v18 & v6;
      v8 = (const llvm::Function **)(v5 + 40 * v7);
      v9 = *v8;
      if (*v8 == a2)
        goto LABEL_4;
    }
    if (v15)
      v19 = v15;
    else
      v19 = v8;
  }
  else
  {
    v19 = 0;
  }
  v8 = (const llvm::Function **)sub_1C541AB24(v3 + 2480, (uint64_t)&v21, (uint64_t *)&v21, v19);
  v20 = v21;
  v8[3] = 0;
  v8[4] = 0;
  *v8 = v20;
  v8[1] = (const llvm::Function *)(v8 + 3);
  v8[2] = (const llvm::Function *)0x100000000;
LABEL_4:
  v10 = *((unsigned int *)v8 + 4);
  if (!(_DWORD)v10)
  {
LABEL_9:
    v13 = 0;
    return v13 == this;
  }
  v11 = (_QWORD *)((char *)v8[1] + 8);
  v12 = 16 * v10;
  while (*((_DWORD *)v11 - 2))
  {
    v13 = 0;
    v11 += 2;
    v12 -= 16;
    if (!v12)
      return v13 == this;
  }
  v13 = (llvm::DISubprogram *)*v11;
  return v13 == this;
}

uint64_t llvm::DILexicalBlockBase::DILexicalBlockBase(uint64_t this, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  int v7;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  char *v12;
  unsigned __int8 **v13;
  char v14;
  unint64_t v15;

  *(_BYTE *)this = a3;
  v7 = a4 & 0x7F;
  *(_BYTE *)(this + 1) = a4 & 0x7F;
  *(_WORD *)(this + 2) = 0;
  *(_DWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 8) = a6;
  *(_DWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 16) = a2;
  if (a6)
  {
    v9 = 0;
    v10 = 8 * a6;
    do
    {
      v11 = *(unsigned __int8 **)(a5 + 8 * v9);
      v12 = (char *)(this - 8 * *(unsigned int *)(this + 8));
      v13 = (unsigned __int8 **)&v12[8 * v9];
      v14 = *(_BYTE *)(this + 1);
      if (*v13)
        llvm::MetadataTracking::untrack((uint64_t)&v12[8 * v9], *v13);
      *v13 = v11;
      if (v11)
      {
        if ((v14 & 0x7F) != 0)
          v15 = 2;
        else
          v15 = this | 2;
        llvm::MetadataTracking::track((uint64_t)v13, v11, v15);
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
    v7 = *(_BYTE *)(this + 1) & 0x7F;
  }
  if (!v7)
    llvm::MDNode::countUnresolvedOperands(this);
  *(_WORD *)(this + 2) = 11;
  return this;
}

{
  int v7;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  char *v12;
  unsigned __int8 **v13;
  char v14;
  unint64_t v15;

  *(_BYTE *)this = a3;
  v7 = a4 & 0x7F;
  *(_BYTE *)(this + 1) = a4 & 0x7F;
  *(_WORD *)(this + 2) = 0;
  *(_DWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 8) = a6;
  *(_DWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 16) = a2;
  if (a6)
  {
    v9 = 0;
    v10 = 8 * a6;
    do
    {
      v11 = *(unsigned __int8 **)(a5 + 8 * v9);
      v12 = (char *)(this - 8 * *(unsigned int *)(this + 8));
      v13 = (unsigned __int8 **)&v12[8 * v9];
      v14 = *(_BYTE *)(this + 1);
      if (*v13)
        llvm::MetadataTracking::untrack((uint64_t)&v12[8 * v9], *v13);
      *v13 = v11;
      if (v11)
      {
        if ((v14 & 0x7F) != 0)
          v15 = 2;
        else
          v15 = this | 2;
        llvm::MetadataTracking::track((uint64_t)v13, v11, v15);
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
    v7 = *(_BYTE *)(this + 1) & 0x7F;
  }
  if (!v7)
    llvm::MDNode::countUnresolvedOperands(this);
  *(_WORD *)(this + 2) = 11;
  return this;
}

llvm::MDNode *llvm::DILexicalBlock::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, int a6, int a7)
{
  unsigned int v12;
  char *v13;
  uint64_t v14;
  llvm::MDNode *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  unsigned __int8 *v22;
  uint64_t v23;
  llvm::MDNode *result;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  BOOL v29;
  __int16 v30;
  _QWORD *v31;
  int v32;
  llvm::MDNode **v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (HIWORD(a5))
    v12 = 0;
  else
    v12 = a5;
  if (a6)
    goto LABEL_5;
  v26 = *a1;
  v27 = (uint64_t *)(*a1 + 752);
  v34 = a2;
  v35 = a3;
  v36 = a4;
  v37 = v12;
  v33 = 0;
  v28 = sub_1C6232130(v27, (uint64_t)&v34, (uint64_t **)&v33);
  result = 0;
  if (v28)
    v29 = v33 == (llvm::MDNode **)(*(_QWORD *)(v26 + 752) + 8 * *(unsigned int *)(v26 + 768));
  else
    v29 = 1;
  if (!v29)
    result = *v33;
  if (!result && a7)
  {
LABEL_5:
    v30 = v12;
    v32 = a4;
    v34 = a3;
    v35 = a2;
    v13 = (char *)operator new(0x30uLL);
    v14 = 0;
    v13[16] = 18;
    v15 = (llvm::MDNode *)(v13 + 16);
    *(_QWORD *)v13 = 0;
    *((_QWORD *)v13 + 1) = 0;
    v13[17] = a6 & 0x7F;
    *((_WORD *)v13 + 9) = 0;
    *(_QWORD *)(v13 + 20) = 0x200000000;
    *((_DWORD *)v13 + 7) = 0;
    v31 = a1;
    *((_QWORD *)v13 + 4) = a1;
    do
    {
      v16 = *(unsigned __int8 **)((char *)&v34 + v14);
      v17 = *((unsigned int *)v13 + 6);
      v18 = v14 - 8 * v17;
      v19 = (uint64_t)v15 + v18;
      v20 = (char *)v15 - 8 * v17;
      v21 = v13[17];
      v22 = *(unsigned __int8 **)&v20[v14];
      if (v22)
        llvm::MetadataTracking::untrack((uint64_t)v15 + v18, v22);
      *(_QWORD *)&v20[v14] = v16;
      if (v16)
      {
        if ((v21 & 0x7F) != 0)
          v23 = 2;
        else
          v23 = (unint64_t)(v13 + 16) | 2;
        llvm::MetadataTracking::track(v19, v16, v23);
      }
      v14 += 8;
    }
    while (v14 != 16);
    if ((v13[17] & 0x7F) == 0)
      llvm::MDNode::countUnresolvedOperands((uint64_t)v15);
    *((_WORD *)v13 + 9) = 11;
    *((_DWORD *)v13 + 10) = v32;
    *((_WORD *)v13 + 22) = v30;
    return sub_1C53A3DB8(v15, a6, *v31 + 752);
  }
  return result;
}

llvm::MDNode *sub_1C53A3DB8(llvm::MDNode *this, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v5;
  _BYTE v6[31];

  v3 = this;
  v5 = this;
  if (a2 == 1)
  {
    llvm::MDNode::storeDistinctInContext(this);
  }
  else if (!a2)
  {
    sub_1C62322D4(a3, (uint64_t *)&v5, (uint64_t)v6);
    return v5;
  }
  return v3;
}

llvm::MDNode *llvm::DILexicalBlockFile::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t *v13;
  int v14;
  llvm::MDNode *result;
  BOOL v16;
  char *v17;
  uint64_t v18;
  llvm::MDNode *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char v25;
  unsigned __int8 *v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  llvm::MDNode **v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a5)
    goto LABEL_9;
  v12 = *a1;
  v13 = (uint64_t *)(*a1 + 776);
  v31 = a2;
  v32 = a3;
  v33 = a4;
  v30 = 0;
  v14 = sub_1C53AB290(v13, (uint64_t)&v31, (uint64_t **)&v30);
  result = 0;
  if (v14)
    v16 = v30 == (llvm::MDNode **)(*(_QWORD *)(v12 + 776) + 8 * *(unsigned int *)(v12 + 792));
  else
    v16 = 1;
  if (!v16)
    result = *v30;
  if (!result && a6)
  {
LABEL_9:
    v29 = a4;
    v31 = a3;
    v32 = a2;
    v17 = (char *)operator new(0x30uLL);
    v18 = 0;
    v17[16] = 19;
    v19 = (llvm::MDNode *)(v17 + 16);
    *(_QWORD *)v17 = 0;
    *((_QWORD *)v17 + 1) = 0;
    v17[17] = a5 & 0x7F;
    *((_WORD *)v17 + 9) = 0;
    *(_QWORD *)(v17 + 20) = 0x200000000;
    *((_DWORD *)v17 + 7) = 0;
    v28 = a1;
    *((_QWORD *)v17 + 4) = a1;
    do
    {
      v20 = *(unsigned __int8 **)((char *)&v31 + v18);
      v21 = *((unsigned int *)v17 + 6);
      v22 = v18 - 8 * v21;
      v23 = (uint64_t)v19 + v22;
      v24 = (char *)v19 - 8 * v21;
      v25 = v17[17];
      v26 = *(unsigned __int8 **)&v24[v18];
      if (v26)
        llvm::MetadataTracking::untrack((uint64_t)v19 + v22, v26);
      *(_QWORD *)&v24[v18] = v20;
      if (v20)
      {
        if ((v25 & 0x7F) != 0)
          v27 = 2;
        else
          v27 = (unint64_t)(v17 + 16) | 2;
        llvm::MetadataTracking::track(v23, v20, v27);
      }
      v18 += 8;
    }
    while (v18 != 16);
    if ((v17[17] & 0x7F) == 0)
      llvm::MDNode::countUnresolvedOperands((uint64_t)v19);
    *((_WORD *)v17 + 9) = 11;
    *((_DWORD *)v17 + 10) = v29;
    return sub_1C53A3FD4(v19, a5, *v28 + 776);
  }
  return result;
}

llvm::MDNode *sub_1C53A3FD4(llvm::MDNode *result, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v4;
  _BYTE v5[31];

  v4 = result;
  if (a2)
  {
    if (a2 == 1)
    {
      v3 = result;
      llvm::MDNode::storeDistinctInContext(result);
      return v3;
    }
  }
  else
  {
    sub_1C53AB49C(a3, (uint64_t *)&v4, (uint64_t)v5);
    return v4;
  }
  return result;
}

uint64_t llvm::DINamespace::DINamespace(uint64_t this, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  int v8;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  char *v13;
  unsigned __int8 **v14;
  char v15;
  unint64_t v16;

  *(_BYTE *)this = 20;
  v8 = a3 & 0x7F;
  *(_BYTE *)(this + 1) = a3 & 0x7F;
  *(_WORD *)(this + 2) = 0;
  *(_DWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 8) = a6;
  *(_DWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 16) = a2;
  if (a6)
  {
    v10 = 0;
    v11 = 8 * a6;
    do
    {
      v12 = *(unsigned __int8 **)(a5 + 8 * v10);
      v13 = (char *)(this - 8 * *(unsigned int *)(this + 8));
      v14 = (unsigned __int8 **)&v13[8 * v10];
      v15 = *(_BYTE *)(this + 1);
      if (*v14)
        llvm::MetadataTracking::untrack((uint64_t)&v13[8 * v10], *v14);
      *v14 = v12;
      if (v12)
      {
        if ((v15 & 0x7F) != 0)
          v16 = 2;
        else
          v16 = this | 2;
        llvm::MetadataTracking::track((uint64_t)v14, v12, v16);
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
    v8 = *(_BYTE *)(this + 1) & 0x7F;
  }
  if (!v8)
    llvm::MDNode::countUnresolvedOperands(this);
  *(_WORD *)(this + 2) = 57;
  *(_BYTE *)(this + 24) = *(_BYTE *)(this + 24) & 0xFE | a4;
  return this;
}

{
  int v8;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  char *v13;
  unsigned __int8 **v14;
  char v15;
  unint64_t v16;

  *(_BYTE *)this = 20;
  v8 = a3 & 0x7F;
  *(_BYTE *)(this + 1) = a3 & 0x7F;
  *(_WORD *)(this + 2) = 0;
  *(_DWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 8) = a6;
  *(_DWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 16) = a2;
  if (a6)
  {
    v10 = 0;
    v11 = 8 * a6;
    do
    {
      v12 = *(unsigned __int8 **)(a5 + 8 * v10);
      v13 = (char *)(this - 8 * *(unsigned int *)(this + 8));
      v14 = (unsigned __int8 **)&v13[8 * v10];
      v15 = *(_BYTE *)(this + 1);
      if (*v14)
        llvm::MetadataTracking::untrack((uint64_t)&v13[8 * v10], *v14);
      *v14 = v12;
      if (v12)
      {
        if ((v15 & 0x7F) != 0)
          v16 = 2;
        else
          v16 = this | 2;
        llvm::MetadataTracking::track((uint64_t)v14, v12, v16);
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
    v8 = *(_BYTE *)(this + 1) & 0x7F;
  }
  if (!v8)
    llvm::MDNode::countUnresolvedOperands(this);
  *(_WORD *)(this + 2) = 57;
  *(_BYTE *)(this + 24) = *(_BYTE *)(this + 24) & 0xFE | a4;
  return this;
}

llvm::MDNode *llvm::DINamespace::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t *v13;
  int v14;
  llvm::MDNode *result;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  llvm::MDNode *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char v25;
  unsigned __int8 *v26;
  uint64_t v27;
  _QWORD *v28;
  char v29;
  llvm::MDNode **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a5)
    goto LABEL_9;
  v12 = *a1;
  v13 = (uint64_t *)(*a1 + 800);
  v31 = a2;
  v32 = a3;
  LOBYTE(v33) = a4;
  v30 = 0;
  v14 = sub_1C6232570(v13, (uint64_t)&v31, (uint64_t **)&v30);
  result = 0;
  if (v14)
    v16 = v30 == (llvm::MDNode **)(*(_QWORD *)(v12 + 800) + 8 * *(unsigned int *)(v12 + 816));
  else
    v16 = 1;
  if (!v16)
    result = *v30;
  if (!result && a6)
  {
LABEL_9:
    v29 = a4;
    v31 = 0;
    v32 = a2;
    v33 = a3;
    v17 = operator new(0x38uLL);
    v18 = 0;
    v17[1] = 0;
    v17[2] = 0;
    *((_BYTE *)v17 + 24) = 20;
    v19 = (llvm::MDNode *)(v17 + 3);
    *v17 = 0;
    *((_BYTE *)v17 + 25) = a5 & 0x7F;
    *((_WORD *)v17 + 13) = 0;
    *(_QWORD *)((char *)v17 + 28) = 0x300000000;
    *((_DWORD *)v17 + 9) = 0;
    v28 = a1;
    v17[5] = a1;
    do
    {
      v20 = *(unsigned __int8 **)((char *)&v31 + v18);
      v21 = *((unsigned int *)v17 + 8);
      v22 = v18 - 8 * v21;
      v23 = (uint64_t)v19 + v22;
      v24 = (char *)v19 - 8 * v21;
      v25 = *((_BYTE *)v17 + 25);
      v26 = *(unsigned __int8 **)&v24[v18];
      if (v26)
        llvm::MetadataTracking::untrack((uint64_t)v19 + v22, v26);
      *(_QWORD *)&v24[v18] = v20;
      if (v20)
      {
        if ((v25 & 0x7F) != 0)
          v27 = 2;
        else
          v27 = (unint64_t)(v17 + 3) | 2;
        llvm::MetadataTracking::track(v23, v20, v27);
      }
      v18 += 8;
    }
    while (v18 != 24);
    if ((*((_BYTE *)v17 + 25) & 0x7F) == 0)
      llvm::MDNode::countUnresolvedOperands((uint64_t)v19);
    *((_WORD *)v17 + 13) = 57;
    *((_BYTE *)v17 + 48) = v17[6] & 0xFE | v29;
    return sub_1C622EA20(v19, a5, *v28 + 800);
  }
  return result;
}

uint64_t llvm::DICommonBlock::DICommonBlock(uint64_t this, uint64_t a2, char a3, int a4, uint64_t a5, uint64_t a6)
{
  int v8;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  char *v13;
  unsigned __int8 **v14;
  char v15;
  unint64_t v16;

  *(_BYTE *)this = 31;
  v8 = a3 & 0x7F;
  *(_BYTE *)(this + 1) = a3 & 0x7F;
  *(_WORD *)(this + 2) = 0;
  *(_DWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 8) = a6;
  *(_DWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 16) = a2;
  if (a6)
  {
    v10 = 0;
    v11 = 8 * a6;
    do
    {
      v12 = *(unsigned __int8 **)(a5 + 8 * v10);
      v13 = (char *)(this - 8 * *(unsigned int *)(this + 8));
      v14 = (unsigned __int8 **)&v13[8 * v10];
      v15 = *(_BYTE *)(this + 1);
      if (*v14)
        llvm::MetadataTracking::untrack((uint64_t)&v13[8 * v10], *v14);
      *v14 = v12;
      if (v12)
      {
        if ((v15 & 0x7F) != 0)
          v16 = 2;
        else
          v16 = this | 2;
        llvm::MetadataTracking::track((uint64_t)v14, v12, v16);
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
    v8 = *(_BYTE *)(this + 1) & 0x7F;
  }
  if (!v8)
    llvm::MDNode::countUnresolvedOperands(this);
  *(_WORD *)(this + 2) = 26;
  *(_DWORD *)(this + 24) = a4;
  return this;
}

{
  int v8;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  char *v13;
  unsigned __int8 **v14;
  char v15;
  unint64_t v16;

  *(_BYTE *)this = 31;
  v8 = a3 & 0x7F;
  *(_BYTE *)(this + 1) = a3 & 0x7F;
  *(_WORD *)(this + 2) = 0;
  *(_DWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 8) = a6;
  *(_DWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 16) = a2;
  if (a6)
  {
    v10 = 0;
    v11 = 8 * a6;
    do
    {
      v12 = *(unsigned __int8 **)(a5 + 8 * v10);
      v13 = (char *)(this - 8 * *(unsigned int *)(this + 8));
      v14 = (unsigned __int8 **)&v13[8 * v10];
      v15 = *(_BYTE *)(this + 1);
      if (*v14)
        llvm::MetadataTracking::untrack((uint64_t)&v13[8 * v10], *v14);
      *v14 = v12;
      if (v12)
      {
        if ((v15 & 0x7F) != 0)
          v16 = 2;
        else
          v16 = this | 2;
        llvm::MetadataTracking::track((uint64_t)v14, v12, v16);
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
    v8 = *(_BYTE *)(this + 1) & 0x7F;
  }
  if (!v8)
    llvm::MDNode::countUnresolvedOperands(this);
  *(_WORD *)(this + 2) = 26;
  *(_DWORD *)(this + 24) = a4;
  return this;
}

llvm::MDNode *llvm::DICommonBlock::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8)
{
  uint64_t v16;
  uint64_t *v17;
  int v18;
  llvm::MDNode *result;
  BOOL v20;
  char *v21;
  uint64_t v22;
  llvm::MDNode *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  unsigned __int8 *v29;
  uint64_t v30;
  llvm::MDNode **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (a7)
    goto LABEL_9;
  v16 = *a1;
  v17 = (uint64_t *)(*a1 + 1064);
  v32 = a2;
  v33 = a3;
  v34 = a4;
  v35 = a5;
  v36 = a6;
  v31 = 0;
  v18 = sub_1C53AB998(v17, (uint64_t)&v32, (uint64_t **)&v31);
  result = 0;
  if (v18)
    v20 = v31 == (llvm::MDNode **)(*(_QWORD *)(v16 + 1064) + 8 * *(unsigned int *)(v16 + 1080));
  else
    v20 = 1;
  if (!v20)
    result = *v31;
  if (!result && a8)
  {
LABEL_9:
    v32 = a2;
    v33 = a3;
    v34 = a4;
    v35 = a5;
    v21 = (char *)operator new(0x40uLL);
    v22 = 0;
    v21[32] = 31;
    v23 = (llvm::MDNode *)(v21 + 32);
    *(_OWORD *)v21 = 0u;
    *((_OWORD *)v21 + 1) = 0u;
    v21[33] = a7 & 0x7F;
    *((_WORD *)v21 + 17) = 0;
    *(_QWORD *)(v21 + 36) = 0x400000000;
    *((_DWORD *)v21 + 11) = 0;
    *((_QWORD *)v21 + 6) = a1;
    do
    {
      v24 = *(unsigned __int8 **)((char *)&v32 + v22);
      v25 = *((unsigned int *)v21 + 10);
      v26 = (uint64_t)v23 + v22 - 8 * v25;
      v27 = (char *)v23 - 8 * v25;
      v28 = v21[33];
      v29 = *(unsigned __int8 **)&v27[v22];
      if (v29)
        llvm::MetadataTracking::untrack((uint64_t)v23 + v22 - 8 * v25, v29);
      *(_QWORD *)&v27[v22] = v24;
      if (v24)
      {
        if ((v28 & 0x7F) != 0)
          v30 = 2;
        else
          v30 = (unint64_t)(v21 + 32) | 2;
        llvm::MetadataTracking::track(v26, v24, v30);
      }
      v22 += 8;
    }
    while (v22 != 32);
    if ((v21[33] & 0x7F) == 0)
      llvm::MDNode::countUnresolvedOperands((uint64_t)v23);
    *((_WORD *)v21 + 17) = 26;
    *((_DWORD *)v21 + 14) = a6;
    return sub_1C622EA7C(v23, a7, *a1 + 1064);
  }
  return result;
}

uint64_t llvm::DIModule::DIModule(uint64_t this, uint64_t a2, char a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  int v10;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  char *v15;
  unsigned __int8 **v16;
  char v17;
  unint64_t v18;

  *(_BYTE *)this = 21;
  v10 = a3 & 0x7F;
  *(_BYTE *)(this + 1) = a3 & 0x7F;
  *(_WORD *)(this + 2) = 0;
  *(_DWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 8) = a7;
  *(_DWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 16) = a2;
  if (a7)
  {
    v12 = 0;
    v13 = 8 * a7;
    do
    {
      v14 = *(unsigned __int8 **)(a6 + 8 * v12);
      v15 = (char *)(this - 8 * *(unsigned int *)(this + 8));
      v16 = (unsigned __int8 **)&v15[8 * v12];
      v17 = *(_BYTE *)(this + 1);
      if (*v16)
        llvm::MetadataTracking::untrack((uint64_t)&v15[8 * v12], *v16);
      *v16 = v14;
      if (v14)
      {
        if ((v17 & 0x7F) != 0)
          v18 = 2;
        else
          v18 = this | 2;
        llvm::MetadataTracking::track((uint64_t)v16, v14, v18);
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
    v10 = *(_BYTE *)(this + 1) & 0x7F;
  }
  if (!v10)
    llvm::MDNode::countUnresolvedOperands(this);
  *(_WORD *)(this + 2) = 30;
  *(_DWORD *)(this + 24) = a4;
  *(_BYTE *)(this + 28) = a5;
  return this;
}

{
  int v10;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  char *v15;
  unsigned __int8 **v16;
  char v17;
  unint64_t v18;

  *(_BYTE *)this = 21;
  v10 = a3 & 0x7F;
  *(_BYTE *)(this + 1) = a3 & 0x7F;
  *(_WORD *)(this + 2) = 0;
  *(_DWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 8) = a7;
  *(_DWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 16) = a2;
  if (a7)
  {
    v12 = 0;
    v13 = 8 * a7;
    do
    {
      v14 = *(unsigned __int8 **)(a6 + 8 * v12);
      v15 = (char *)(this - 8 * *(unsigned int *)(this + 8));
      v16 = (unsigned __int8 **)&v15[8 * v12];
      v17 = *(_BYTE *)(this + 1);
      if (*v16)
        llvm::MetadataTracking::untrack((uint64_t)&v15[8 * v12], *v16);
      *v16 = v14;
      if (v14)
      {
        if ((v17 & 0x7F) != 0)
          v18 = 2;
        else
          v18 = this | 2;
        llvm::MetadataTracking::track((uint64_t)v16, v14, v18);
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
    v10 = *(_BYTE *)(this + 1) & 0x7F;
  }
  if (!v10)
    llvm::MDNode::countUnresolvedOperands(this);
  *(_WORD *)(this + 2) = 30;
  *(_DWORD *)(this + 24) = a4;
  *(_BYTE *)(this + 28) = a5;
  return this;
}

llvm::MDNode *llvm::DIModule::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, char a9, int a10, char a11)
{
  uint64_t v19;
  uint64_t *v20;
  int v21;
  llvm::MDNode *result;
  char *v23;
  uint64_t v24;
  llvm::MDNode *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char v31;
  unsigned __int8 *v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  llvm::MDNode **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (a10)
    goto LABEL_7;
  v19 = *a1;
  v20 = (uint64_t *)(*a1 + 824);
  v37 = a2;
  v38 = a3;
  v39 = a4;
  v40 = a5;
  v41 = a6;
  v42 = a7;
  v43 = a8;
  v44 = a9;
  v36 = 0;
  v21 = sub_1C53ABBB8(v20, &v37, (uint64_t **)&v36);
  result = 0;
  if (v21 && v36 != (llvm::MDNode **)(*(_QWORD *)(v19 + 824) + 8 * *(unsigned int *)(v19 + 840)))
    result = *v36;
  if (!result && a11)
  {
LABEL_7:
    v35 = a8;
    v37 = a2;
    v38 = a3;
    v39 = a4;
    v40 = a5;
    v41 = a6;
    v42 = a7;
    v23 = (char *)operator new(0x50uLL);
    v24 = 0;
    *(_OWORD *)v23 = 0u;
    *((_OWORD *)v23 + 1) = 0u;
    v23[48] = 21;
    v25 = (llvm::MDNode *)(v23 + 48);
    *((_OWORD *)v23 + 2) = 0u;
    v23[49] = a10 & 0x7F;
    *((_WORD *)v23 + 25) = 0;
    *(_QWORD *)(v23 + 52) = 0x600000000;
    *((_DWORD *)v23 + 15) = 0;
    v34 = a1;
    *((_QWORD *)v23 + 8) = a1;
    do
    {
      v26 = *(unsigned __int8 **)((char *)&v37 + v24);
      v27 = *((unsigned int *)v23 + 14);
      v28 = v24 - 8 * v27;
      v29 = (uint64_t)v25 + v28;
      v30 = (char *)v25 - 8 * v27;
      v31 = v23[49];
      v32 = *(unsigned __int8 **)&v30[v24];
      if (v32)
        llvm::MetadataTracking::untrack((uint64_t)v25 + v28, v32);
      *(_QWORD *)&v30[v24] = v26;
      if (v26)
      {
        if ((v31 & 0x7F) != 0)
          v33 = 2;
        else
          v33 = (unint64_t)(v23 + 48) | 2;
        llvm::MetadataTracking::track(v29, v26, v33);
      }
      v24 += 8;
    }
    while (v24 != 48);
    if ((v23[49] & 0x7F) == 0)
      llvm::MDNode::countUnresolvedOperands((uint64_t)v25);
    *((_WORD *)v23 + 25) = 30;
    *((_DWORD *)v23 + 18) = v35;
    v23[76] = a9;
    return sub_1C53A4B58(v25, a10, *v34 + 824);
  }
  return result;
}

llvm::MDNode *sub_1C53A4B58(llvm::MDNode *result, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v4;
  _BYTE v5[31];

  v4 = result;
  if (a2)
  {
    if (a2 == 1)
    {
      v3 = result;
      llvm::MDNode::storeDistinctInContext(result);
      return v3;
    }
  }
  else
  {
    sub_1C53ABE4C(a3, (uint64_t *)&v4, (uint64_t)v5);
    return v4;
  }
  return result;
}

uint64_t llvm::DITemplateTypeParameter::DITemplateTypeParameter(uint64_t this, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  int v8;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  char *v13;
  unsigned __int8 **v14;
  char v15;
  unint64_t v16;

  *(_BYTE *)this = 22;
  v8 = a3 & 0x7F;
  *(_BYTE *)(this + 1) = a3 & 0x7F;
  *(_WORD *)(this + 2) = 0;
  *(_DWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 8) = a6;
  *(_DWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 16) = a2;
  if (a6)
  {
    v10 = 0;
    v11 = 8 * a6;
    do
    {
      v12 = *(unsigned __int8 **)(a5 + 8 * v10);
      v13 = (char *)(this - 8 * *(unsigned int *)(this + 8));
      v14 = (unsigned __int8 **)&v13[8 * v10];
      v15 = *(_BYTE *)(this + 1);
      if (*v14)
        llvm::MetadataTracking::untrack((uint64_t)&v13[8 * v10], *v14);
      *v14 = v12;
      if (v12)
      {
        if ((v15 & 0x7F) != 0)
          v16 = 2;
        else
          v16 = this | 2;
        llvm::MetadataTracking::track((uint64_t)v14, v12, v16);
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
    v8 = *(_BYTE *)(this + 1) & 0x7F;
  }
  if (!v8)
    llvm::MDNode::countUnresolvedOperands(this);
  *(_WORD *)(this + 2) = 47;
  *(_BYTE *)(this + 24) = a4;
  return this;
}

{
  int v8;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  char *v13;
  unsigned __int8 **v14;
  char v15;
  unint64_t v16;

  *(_BYTE *)this = 22;
  v8 = a3 & 0x7F;
  *(_BYTE *)(this + 1) = a3 & 0x7F;
  *(_WORD *)(this + 2) = 0;
  *(_DWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 8) = a6;
  *(_DWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 16) = a2;
  if (a6)
  {
    v10 = 0;
    v11 = 8 * a6;
    do
    {
      v12 = *(unsigned __int8 **)(a5 + 8 * v10);
      v13 = (char *)(this - 8 * *(unsigned int *)(this + 8));
      v14 = (unsigned __int8 **)&v13[8 * v10];
      v15 = *(_BYTE *)(this + 1);
      if (*v14)
        llvm::MetadataTracking::untrack((uint64_t)&v13[8 * v10], *v14);
      *v14 = v12;
      if (v12)
      {
        if ((v15 & 0x7F) != 0)
          v16 = 2;
        else
          v16 = this | 2;
        llvm::MetadataTracking::track((uint64_t)v14, v12, v16);
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
    v8 = *(_BYTE *)(this + 1) & 0x7F;
  }
  if (!v8)
    llvm::MDNode::countUnresolvedOperands(this);
  *(_WORD *)(this + 2) = 47;
  *(_BYTE *)(this + 24) = a4;
  return this;
}

llvm::MDNode *llvm::DITemplateTypeParameter::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, char a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t *v13;
  int v14;
  llvm::MDNode *result;
  BOOL v16;
  char *v17;
  uint64_t v18;
  llvm::MDNode *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char v25;
  unsigned __int8 *v26;
  uint64_t v27;
  _QWORD *v28;
  char v29;
  llvm::MDNode **v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a5)
    goto LABEL_9;
  v12 = *a1;
  v13 = (uint64_t *)(*a1 + 848);
  v31 = a2;
  v32 = a3;
  v33 = a4;
  v30 = 0;
  v14 = sub_1C6232D98(v13, (uint64_t)&v31, (uint64_t **)&v30);
  result = 0;
  if (v14)
    v16 = v30 == (llvm::MDNode **)(*(_QWORD *)(v12 + 848) + 8 * *(unsigned int *)(v12 + 864));
  else
    v16 = 1;
  if (!v16)
    result = *v30;
  if (!result && a6)
  {
LABEL_9:
    v29 = a4;
    v31 = a2;
    v32 = a3;
    v17 = (char *)operator new(0x30uLL);
    v18 = 0;
    v17[16] = 22;
    v19 = (llvm::MDNode *)(v17 + 16);
    *(_QWORD *)v17 = 0;
    *((_QWORD *)v17 + 1) = 0;
    v17[17] = a5 & 0x7F;
    *((_WORD *)v17 + 9) = 0;
    *(_QWORD *)(v17 + 20) = 0x200000000;
    *((_DWORD *)v17 + 7) = 0;
    v28 = a1;
    *((_QWORD *)v17 + 4) = a1;
    do
    {
      v20 = *(unsigned __int8 **)((char *)&v31 + v18);
      v21 = *((unsigned int *)v17 + 6);
      v22 = v18 - 8 * v21;
      v23 = (uint64_t)v19 + v22;
      v24 = (char *)v19 - 8 * v21;
      v25 = v17[17];
      v26 = *(unsigned __int8 **)&v24[v18];
      if (v26)
        llvm::MetadataTracking::untrack((uint64_t)v19 + v22, v26);
      *(_QWORD *)&v24[v18] = v20;
      if (v20)
      {
        if ((v25 & 0x7F) != 0)
          v27 = 2;
        else
          v27 = (unint64_t)(v17 + 16) | 2;
        llvm::MetadataTracking::track(v23, v20, v27);
      }
      v18 += 8;
    }
    while (v18 != 16);
    if ((v17[17] & 0x7F) == 0)
      llvm::MDNode::countUnresolvedOperands((uint64_t)v19);
    *((_WORD *)v17 + 9) = 47;
    v17[40] = v29;
    return sub_1C622EADC(v19, a5, *v28 + 848);
  }
  return result;
}

llvm::MDNode *llvm::DITemplateValueParameter::getImpl(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, int a7, int a8)
{
  __int16 v13;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  llvm::MDNode *result;
  BOOL v20;
  _QWORD *v21;
  uint64_t v22;
  llvm::MDNode *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  unsigned __int8 *v29;
  uint64_t v30;
  char v31;
  llvm::MDNode **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;

  v13 = a2;
  v38 = *MEMORY[0x1E0C80C00];
  if (a7)
    goto LABEL_9;
  v16 = *a1;
  v17 = (uint64_t *)(*a1 + 872);
  LODWORD(v33) = a2;
  v34 = a3;
  v35 = a4;
  v36 = a5;
  v37 = a6;
  v32 = 0;
  v18 = sub_1C53AC2E0(v17, (uint64_t)&v33, (uint64_t **)&v32);
  result = 0;
  if (v18)
    v20 = v32 == (llvm::MDNode **)(*(_QWORD *)(v16 + 872) + 8 * *(unsigned int *)(v16 + 888));
  else
    v20 = 1;
  if (!v20)
    result = *v32;
  if (!result && a8)
  {
LABEL_9:
    v31 = a5;
    v33 = a3;
    v34 = a4;
    v35 = a6;
    v21 = operator new(0x38uLL);
    v22 = 0;
    v21[1] = 0;
    v21[2] = 0;
    *((_BYTE *)v21 + 24) = 23;
    v23 = (llvm::MDNode *)(v21 + 3);
    *v21 = 0;
    *((_BYTE *)v21 + 25) = a7 & 0x7F;
    *((_WORD *)v21 + 13) = 0;
    *(_QWORD *)((char *)v21 + 28) = 0x300000000;
    *((_DWORD *)v21 + 9) = 0;
    v21[5] = a1;
    do
    {
      v24 = *(unsigned __int8 **)((char *)&v33 + v22);
      v25 = *((unsigned int *)v21 + 8);
      v26 = (uint64_t)v23 + v22 - 8 * v25;
      v27 = (char *)v23 - 8 * v25;
      v28 = *((_BYTE *)v21 + 25);
      v29 = *(unsigned __int8 **)&v27[v22];
      if (v29)
        llvm::MetadataTracking::untrack((uint64_t)v23 + v22 - 8 * v25, v29);
      *(_QWORD *)&v27[v22] = v24;
      if (v24)
      {
        if ((v28 & 0x7F) != 0)
          v30 = 2;
        else
          v30 = (unint64_t)(v21 + 3) | 2;
        llvm::MetadataTracking::track(v26, v24, v30);
      }
      v22 += 8;
    }
    while (v22 != 24);
    if ((*((_BYTE *)v21 + 25) & 0x7F) == 0)
      llvm::MDNode::countUnresolvedOperands((uint64_t)v23);
    *((_WORD *)v21 + 13) = v13;
    *((_BYTE *)v21 + 48) = v31;
    return sub_1C622EB38(v23, a7, *a1 + 872);
  }
  return result;
}

llvm::MDNode *llvm::DIGlobalVariable::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, char a8, char a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, int a14, char a15)
{
  _QWORD *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  llvm::MDNode *result;
  char *v27;
  uint64_t v28;
  llvm::MDNode *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char v35;
  unsigned __int8 *v36;
  uint64_t v37;
  int v38;
  llvm::MDNode **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;

  v20 = a1;
  v21 = a14;
  v22 = a12;
  v54 = *MEMORY[0x1E0C80C00];
  if (a14)
    goto LABEL_7;
  v23 = *a1;
  v24 = (uint64_t *)(*a1 + 896);
  v43 = a2;
  v44 = a3;
  v45 = a4;
  v46 = a5;
  LODWORD(v47) = a6;
  v48 = a7;
  LOBYTE(v49) = a8;
  BYTE1(v49) = a9;
  v50 = a10;
  v51 = a11;
  v52 = a12;
  v53 = a13;
  v42 = 0;
  v25 = sub_1C62334E0(v24, (uint64_t)&v43, (uint64_t **)&v42);
  result = 0;
  if (v25 && v42 != (llvm::MDNode **)(*(_QWORD *)(v23 + 896) + 8 * *(unsigned int *)(v23 + 912)))
    result = *v42;
  v20 = a1;
  if (!result)
  {
    v22 = a12;
    v21 = 0;
    if (a15)
    {
LABEL_7:
      v38 = v22;
      v43 = a2;
      v44 = a3;
      v45 = a5;
      v46 = a7;
      v47 = a3;
      v48 = a4;
      v49 = a10;
      v50 = a11;
      v51 = a13;
      v27 = (char *)operator new(0x70uLL);
      v28 = 0;
      *(_OWORD *)v27 = 0u;
      *((_OWORD *)v27 + 1) = 0u;
      *((_OWORD *)v27 + 2) = 0u;
      *((_OWORD *)v27 + 3) = 0u;
      v27[72] = 24;
      v29 = (llvm::MDNode *)(v27 + 72);
      *((_QWORD *)v27 + 8) = 0;
      v27[73] = v21 & 0x7F;
      *((_WORD *)v27 + 37) = 0;
      *(_QWORD *)(v27 + 76) = 0x900000000;
      *((_DWORD *)v27 + 21) = 0;
      *((_QWORD *)v27 + 11) = v20;
      do
      {
        v30 = *(unsigned __int8 **)((char *)&v43 + v28);
        v31 = *((unsigned int *)v27 + 20);
        v32 = v28 - 8 * v31;
        v33 = (uint64_t)v29 + v32;
        v34 = (char *)v29 - 8 * v31;
        v35 = v27[73];
        v36 = *(unsigned __int8 **)&v34[v28];
        if (v36)
          llvm::MetadataTracking::untrack((uint64_t)v29 + v32, v36);
        *(_QWORD *)&v34[v28] = v30;
        if (v30)
        {
          if ((v35 & 0x7F) != 0)
            v37 = 2;
          else
            v37 = (unint64_t)(v27 + 72) | 2;
          llvm::MetadataTracking::track(v33, v30, v37);
        }
        v28 += 8;
      }
      while (v28 != 72);
      if ((v27[73] & 0x7F) == 0)
        llvm::MDNode::countUnresolvedOperands((uint64_t)v29);
      *((_WORD *)v27 + 37) = 52;
      *((_DWORD *)v27 + 24) = a6;
      *((_DWORD *)v27 + 25) = v38;
      v27[104] = a8;
      v27[105] = a9;
      return sub_1C622EB94(v29, v21, *a1 + 896);
    }
  }
  return result;
}

llvm::MDNode *llvm::DILocalVariable::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8, int a9, uint64_t a10, int a11, char a12)
{
  __int16 v13;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  llvm::MDNode *result;
  char *v23;
  uint64_t v24;
  llvm::MDNode *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char v31;
  unsigned __int8 *v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  llvm::MDNode **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;

  v13 = a7;
  v47 = *MEMORY[0x1E0C80C00];
  if (a11)
    goto LABEL_7;
  v19 = *a1;
  v20 = (uint64_t *)(*a1 + 920);
  v38 = a2;
  v39 = a3;
  v40 = a4;
  LODWORD(v41) = a5;
  v42 = a6;
  v43 = a7;
  v44 = a8;
  v45 = a9;
  v46 = a10;
  v37 = 0;
  v21 = sub_1C53AC690(v20, (uint64_t)&v38, (uint64_t **)&v37);
  result = 0;
  if (v21 && v37 != (llvm::MDNode **)(*(_QWORD *)(v19 + 920) + 8 * *(unsigned int *)(v19 + 936)))
    result = *v37;
  if (!result && a12)
  {
LABEL_7:
    v35 = a8;
    v38 = a2;
    v39 = a3;
    v40 = a4;
    v41 = a6;
    v42 = a10;
    v23 = (char *)operator new(0x50uLL);
    v24 = 0;
    *(_OWORD *)v23 = 0u;
    *((_OWORD *)v23 + 1) = 0u;
    v23[40] = 25;
    v25 = (llvm::MDNode *)(v23 + 40);
    *((_QWORD *)v23 + 4) = 0;
    v23[41] = a11 & 0x7F;
    *((_WORD *)v23 + 21) = 0;
    *(_QWORD *)(v23 + 44) = 0x500000000;
    *((_DWORD *)v23 + 13) = 0;
    v34 = a1;
    *((_QWORD *)v23 + 7) = a1;
    do
    {
      v26 = *(unsigned __int8 **)((char *)&v38 + v24);
      v27 = *((unsigned int *)v23 + 12);
      v28 = v24 - 8 * v27;
      v29 = (uint64_t)v25 + v28;
      v30 = (char *)v25 - 8 * v27;
      v31 = v23[41];
      v32 = *(unsigned __int8 **)&v30[v24];
      if (v32)
        llvm::MetadataTracking::untrack((uint64_t)v25 + v28, v32);
      *(_QWORD *)&v30[v24] = v26;
      if (v26)
      {
        if ((v31 & 0x7F) != 0)
          v33 = 2;
        else
          v33 = (unint64_t)(v23 + 40) | 2;
        llvm::MetadataTracking::track(v29, v26, v33);
      }
      v24 += 8;
    }
    while (v24 != 40);
    if ((v23[41] & 0x7F) == 0)
      llvm::MDNode::countUnresolvedOperands((uint64_t)v25);
    *((_WORD *)v23 + 21) = 52;
    *((_DWORD *)v23 + 16) = a5;
    *((_DWORD *)v23 + 17) = a9;
    *((_WORD *)v23 + 36) = v13;
    *((_DWORD *)v23 + 19) = v35;
    return sub_1C53A5560(v25, a11, *v34 + 920);
  }
  return result;
}

llvm::MDNode *sub_1C53A5560(llvm::MDNode *result, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v4;
  _BYTE v5[31];

  v4 = result;
  if (a2)
  {
    if (a2 == 1)
    {
      v3 = result;
      llvm::MDNode::storeDistinctInContext(result);
      return v3;
    }
  }
  else
  {
    sub_1C53ACB58(a3, (uint64_t *)&v4, (uint64_t)v5);
    return v4;
  }
  return result;
}

uint64_t llvm::DIVariable::DIVariable(uint64_t this, uint64_t a2, char a3, char a4, int a5, uint64_t a6, uint64_t a7, int a8)
{
  int v11;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  char *v16;
  unsigned __int8 **v17;
  char v18;
  unint64_t v19;

  *(_BYTE *)this = a3;
  v11 = a4 & 0x7F;
  *(_BYTE *)(this + 1) = a4 & 0x7F;
  *(_WORD *)(this + 2) = 0;
  *(_DWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 8) = a7;
  *(_DWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 16) = a2;
  if (a7)
  {
    v13 = 0;
    v14 = 8 * a7;
    do
    {
      v15 = *(unsigned __int8 **)(a6 + 8 * v13);
      v16 = (char *)(this - 8 * *(unsigned int *)(this + 8));
      v17 = (unsigned __int8 **)&v16[8 * v13];
      v18 = *(_BYTE *)(this + 1);
      if (*v17)
        llvm::MetadataTracking::untrack((uint64_t)&v16[8 * v13], *v17);
      *v17 = v15;
      if (v15)
      {
        if ((v18 & 0x7F) != 0)
          v19 = 2;
        else
          v19 = this | 2;
        llvm::MetadataTracking::track((uint64_t)v17, v15, v19);
      }
      ++v13;
      v14 -= 8;
    }
    while (v14);
    v11 = *(_BYTE *)(this + 1) & 0x7F;
  }
  if (!v11)
    llvm::MDNode::countUnresolvedOperands(this);
  *(_WORD *)(this + 2) = 52;
  *(_DWORD *)(this + 24) = a5;
  *(_DWORD *)(this + 28) = a8;
  return this;
}

{
  int v11;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  char *v16;
  unsigned __int8 **v17;
  char v18;
  unint64_t v19;

  *(_BYTE *)this = a3;
  v11 = a4 & 0x7F;
  *(_BYTE *)(this + 1) = a4 & 0x7F;
  *(_WORD *)(this + 2) = 0;
  *(_DWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 8) = a7;
  *(_DWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 16) = a2;
  if (a7)
  {
    v13 = 0;
    v14 = 8 * a7;
    do
    {
      v15 = *(unsigned __int8 **)(a6 + 8 * v13);
      v16 = (char *)(this - 8 * *(unsigned int *)(this + 8));
      v17 = (unsigned __int8 **)&v16[8 * v13];
      v18 = *(_BYTE *)(this + 1);
      if (*v17)
        llvm::MetadataTracking::untrack((uint64_t)&v16[8 * v13], *v17);
      *v17 = v15;
      if (v15)
      {
        if ((v18 & 0x7F) != 0)
          v19 = 2;
        else
          v19 = this | 2;
        llvm::MetadataTracking::track((uint64_t)v17, v15, v19);
      }
      ++v13;
      v14 -= 8;
    }
    while (v14);
    v11 = *(_BYTE *)(this + 1) & 0x7F;
  }
  if (!v11)
    llvm::MDNode::countUnresolvedOperands(this);
  *(_WORD *)(this + 2) = 52;
  *(_DWORD *)(this + 24) = a5;
  *(_DWORD *)(this + 28) = a8;
  return this;
}

unint64_t llvm::DIVariable::getSizeInBits(llvm::DIVariable *this)
{
  char *i;
  unint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  for (i = (char *)this - 8 * *((unsigned int *)this + 2); ; i = (char *)(v2 - 8 * *(unsigned int *)(v2 + 8)))
  {
    v2 = *((_QWORD *)i + 3);
    if (!v2)
      goto LABEL_9;
    v3 = *(unsigned __int8 *)v2;
    if ((v3 - 11) >= 4 && v3 != 33)
    {
LABEL_8:
      v2 = 0;
LABEL_9:
      v5 = 0;
      return v5 | v2;
    }
    v4 = *(_QWORD *)(v2 + 32);
    if (v4)
      break;
    if (v3 != 12)
      goto LABEL_8;
  }
  v2 = v4 & 0xFFFFFFFFFFFFFF00;
  v5 = v4;
  return v5 | v2;
}

uint64_t llvm::DILabel::DILabel(uint64_t this, uint64_t a2, char a3, int a4, uint64_t a5, uint64_t a6)
{
  int v8;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  char *v13;
  unsigned __int8 **v14;
  char v15;
  unint64_t v16;

  *(_BYTE *)this = 26;
  v8 = a3 & 0x7F;
  *(_BYTE *)(this + 1) = a3 & 0x7F;
  *(_WORD *)(this + 2) = 0;
  *(_DWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 8) = a6;
  *(_DWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 16) = a2;
  if (a6)
  {
    v10 = 0;
    v11 = 8 * a6;
    do
    {
      v12 = *(unsigned __int8 **)(a5 + 8 * v10);
      v13 = (char *)(this - 8 * *(unsigned int *)(this + 8));
      v14 = (unsigned __int8 **)&v13[8 * v10];
      v15 = *(_BYTE *)(this + 1);
      if (*v14)
        llvm::MetadataTracking::untrack((uint64_t)&v13[8 * v10], *v14);
      *v14 = v12;
      if (v12)
      {
        if ((v15 & 0x7F) != 0)
          v16 = 2;
        else
          v16 = this | 2;
        llvm::MetadataTracking::track((uint64_t)v14, v12, v16);
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
    v8 = *(_BYTE *)(this + 1) & 0x7F;
  }
  if (!v8)
    llvm::MDNode::countUnresolvedOperands(this);
  *(_WORD *)(this + 2) = 10;
  *(_DWORD *)(this + 24) = a4;
  return this;
}

{
  int v8;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  char *v13;
  unsigned __int8 **v14;
  char v15;
  unint64_t v16;

  *(_BYTE *)this = 26;
  v8 = a3 & 0x7F;
  *(_BYTE *)(this + 1) = a3 & 0x7F;
  *(_WORD *)(this + 2) = 0;
  *(_DWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 8) = a6;
  *(_DWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 16) = a2;
  if (a6)
  {
    v10 = 0;
    v11 = 8 * a6;
    do
    {
      v12 = *(unsigned __int8 **)(a5 + 8 * v10);
      v13 = (char *)(this - 8 * *(unsigned int *)(this + 8));
      v14 = (unsigned __int8 **)&v13[8 * v10];
      v15 = *(_BYTE *)(this + 1);
      if (*v14)
        llvm::MetadataTracking::untrack((uint64_t)&v13[8 * v10], *v14);
      *v14 = v12;
      if (v12)
      {
        if ((v15 & 0x7F) != 0)
          v16 = 2;
        else
          v16 = this | 2;
        llvm::MetadataTracking::track((uint64_t)v14, v12, v16);
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
    v8 = *(_BYTE *)(this + 1) & 0x7F;
  }
  if (!v8)
    llvm::MDNode::countUnresolvedOperands(this);
  *(_WORD *)(this + 2) = 10;
  *(_DWORD *)(this + 24) = a4;
  return this;
}

llvm::MDNode *llvm::DILabel::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v14;
  uint64_t *v15;
  int v16;
  llvm::MDNode *result;
  BOOL v18;
  _QWORD *v19;
  uint64_t v20;
  llvm::MDNode *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;
  unsigned __int8 *v27;
  uint64_t v28;
  llvm::MDNode **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a6)
    goto LABEL_9;
  v14 = *a1;
  v15 = (uint64_t *)(*a1 + 944);
  v30 = a2;
  v31 = a3;
  v32 = a4;
  v33 = a5;
  v29 = 0;
  v16 = sub_1C53ACF1C(v15, (uint64_t)&v30, (uint64_t **)&v29);
  result = 0;
  if (v16)
    v18 = v29 == (llvm::MDNode **)(*(_QWORD *)(v14 + 944) + 8 * *(unsigned int *)(v14 + 960));
  else
    v18 = 1;
  if (!v18)
    result = *v29;
  if (!result && a7)
  {
LABEL_9:
    v30 = a2;
    v31 = a3;
    v32 = a4;
    v19 = operator new(0x38uLL);
    v20 = 0;
    v19[1] = 0;
    v19[2] = 0;
    *((_BYTE *)v19 + 24) = 26;
    v21 = (llvm::MDNode *)(v19 + 3);
    *v19 = 0;
    *((_BYTE *)v19 + 25) = a6 & 0x7F;
    *((_WORD *)v19 + 13) = 0;
    *(_QWORD *)((char *)v19 + 28) = 0x300000000;
    *((_DWORD *)v19 + 9) = 0;
    v19[5] = a1;
    do
    {
      v22 = *(unsigned __int8 **)((char *)&v30 + v20);
      v23 = *((unsigned int *)v19 + 8);
      v24 = (uint64_t)v21 + v20 - 8 * v23;
      v25 = (char *)v21 - 8 * v23;
      v26 = *((_BYTE *)v19 + 25);
      v27 = *(unsigned __int8 **)&v25[v20];
      if (v27)
        llvm::MetadataTracking::untrack((uint64_t)v21 + v20 - 8 * v23, v27);
      *(_QWORD *)&v25[v20] = v22;
      if (v22)
      {
        if ((v26 & 0x7F) != 0)
          v28 = 2;
        else
          v28 = (unint64_t)(v19 + 3) | 2;
        llvm::MetadataTracking::track(v24, v22, v28);
      }
      v20 += 8;
    }
    while (v20 != 24);
    if ((*((_BYTE *)v19 + 25) & 0x7F) == 0)
      llvm::MDNode::countUnresolvedOperands((uint64_t)v21);
    *((_WORD *)v19 + 13) = 10;
    *((_DWORD *)v19 + 12) = a5;
    return sub_1C622EBF4(v21, a6, *a1 + 944);
  }
  return result;
}

llvm::MDNode *llvm::DIExpression::getImpl(_QWORD *a1, const void *a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t *v11;
  int v12;
  llvm::MDNode *result;
  BOOL v14;
  _QWORD *v15;
  llvm::MDNode *v16;
  _QWORD v17[2];
  llvm::MDNode **v18;

  if (a4)
    goto LABEL_9;
  v10 = *a1;
  v11 = (uint64_t *)(*a1 + 488);
  v17[0] = a2;
  v17[1] = a3;
  v18 = 0;
  v12 = sub_1C53AD0D0(v11, (uint64_t)v17, (uint64_t **)&v18);
  result = 0;
  if (v12)
    v14 = v18 == (llvm::MDNode **)(*(_QWORD *)(v10 + 488) + 8 * *(unsigned int *)(v10 + 504));
  else
    v14 = 1;
  if (!v14)
    result = *v18;
  if (!result && a5)
  {
LABEL_9:
    v15 = operator new(0x30uLL);
    v16 = (llvm::MDNode *)v15;
    *(_BYTE *)v15 = 6;
    *(_QWORD *)((char *)v15 + 2) = 0;
    v15[1] = 0;
    v15[2] = a1;
    *((_BYTE *)v15 + 1) = a4 & 0x7F;
    if ((a4 & 0x7F) == 0)
      llvm::MDNode::countUnresolvedOperands((uint64_t)v15);
    *((_QWORD *)v16 + 4) = 0;
    *((_QWORD *)v16 + 5) = 0;
    *((_QWORD *)v16 + 3) = 0;
    sub_1C4DFE394((_QWORD *)v16 + 3, a2, (uint64_t)a2 + 8 * a3, (8 * a3) >> 3);
    return sub_1C622EC54(v16, a4, *a1 + 488);
  }
  return result;
}

BOOL llvm::DIExpression::isEntryValue(llvm::DIExpression *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)*((_QWORD *)this + 3);
  return ((*((_QWORD *)this + 4) - (_QWORD)v1) & 0x7FFFFFFF8) != 0 && *v1 == 4099;
}

uint64_t llvm::DIExpression::ExprOperand::getSize(uint64_t **this)
{
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  uint64_t result;

  v1 = **this;
  if ((unint64_t)(v1 - 112) < 0x20)
    return 2;
  if (v1 <= 143)
  {
    v2 = (unint64_t)v1 > 0x23;
    v3 = (1 << v1) & 0x800030000;
    if (!v2 && v3 != 0)
      return 2;
    return 1;
  }
  result = 3;
  if (v1 > 147)
  {
    if ((unint64_t)(v1 - 4096) <= 5)
    {
      if (((1 << v1) & 0x2C) != 0)
        return 2;
      if (((1 << v1) & 3) != 0)
        return result;
    }
    if (v1 != 148)
      return 1;
    return 2;
  }
  if (v1 == 144)
    return 2;
  if (v1 != 146)
    return 1;
  return result;
}

BOOL llvm::DIExpression::isValid(llvm::DIExpression *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v10;
  uint64_t *v11;

  v1 = (uint64_t *)*((_QWORD *)this + 3);
  v2 = (uint64_t *)*((_QWORD *)this + 4);
  v11 = v1;
  if (v2 == v1)
    return 1;
  v3 = v1;
  v4 = v1;
  while (1)
  {
    v5 = &v4[llvm::DIExpression::ExprOperand::getSize(&v11)];
    if (v5 > v2)
      return 0;
    v6 = *v4;
    if ((unint64_t)(*v4 - 80) < 0x40)
      return 1;
    if (v6 <= 0x30)
    {
      if (((1 << v6) & 0x100FF7D170040) != 0)
        goto LABEL_7;
      if (v6 == 22)
      {
        if ((((char *)v2 - (char *)v1) & 0x7FFFFFFF8) == 8)
          return 0;
        goto LABEL_7;
      }
    }
    if (v6 - 144 > 0xF)
      break;
    if (((1 << (v6 + 112)) & 0x95) != 0)
      goto LABEL_7;
    if (v6 != 159)
      break;
    if (v5 != v2)
    {
      v10 = v3;
      if (v3[llvm::DIExpression::ExprOperand::getSize(&v10)] != 4096)
        return 0;
    }
LABEL_7:
    v11 = v5;
    v3 = v5;
    v4 = v5;
    if (v5 == v2)
      return 1;
  }
  v7 = v6 - 4096;
  if (v7 > 5)
    return 0;
  if (((1 << v7) & 0x36) != 0)
    goto LABEL_7;
  if (v7)
  {
    if (v4 != v1)
      return 0;
    return v1[1] == 1;
  }
  else
  {
    return v5 == v2;
  }
}

BOOL llvm::DIExpression::isComplex(llvm::DIExpression *this)
{
  _BOOL8 result;
  uint64_t *v3;
  uint64_t *v4;
  char *v5;
  uint64_t *v6;
  uint64_t *v7;

  result = llvm::DIExpression::isValid(this);
  if (result)
  {
    v5 = (char *)this + 24;
    v4 = (uint64_t *)*((_QWORD *)this + 3);
    v3 = (uint64_t *)*((_QWORD *)v5 + 1);
    if ((((char *)v3 - (char *)v4) & 0x7FFFFFFF8) == 0)
      return 0;
    v7 = v4;
    if (v3 == v4)
    {
      return 0;
    }
    else
    {
      v6 = v3;
      while ((*v4 | 2) == 0x1002)
      {
        v4 += llvm::DIExpression::ExprOperand::getSize(&v7);
        v7 = v4;
        if (v4 == v6)
          return 0;
      }
      return 1;
    }
  }
  return result;
}

int8x16_t llvm::DIExpression::getFragmentInfo@<Q0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, int8x16_t *a3@<X8>)
{
  uint64_t *v5;
  int8x16_t result;
  uint64_t *v7;

  v7 = a1;
  if (a1 == a2)
  {
LABEL_5:
    a3->i8[0] = 0;
    a3[1].i8[0] = 0;
  }
  else
  {
    v5 = a1;
    while (*v5 != 4096)
    {
      v5 += llvm::DIExpression::ExprOperand::getSize(&v7);
      v7 = v5;
      if (v5 == a2)
        goto LABEL_5;
    }
    result = vextq_s8(*(int8x16_t *)(v5 + 1), *(int8x16_t *)(v5 + 1), 8uLL);
    *a3 = result;
    a3[1].i8[0] = 1;
  }
  return result;
}

BOOL llvm::DIExpression::hasAllLocationOps(llvm::DIExpression *this, unsigned int a2)
{
  __int128 v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  unsigned int v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t *v16;
  int v17;
  unsigned int v18;
  unint64_t *v19;
  unint64_t *v20;
  BOOL v21;
  _OWORD *v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  _BOOL8 v26;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  _OWORD v31[2];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v30 = 1;
  *(_QWORD *)&v3 = -1;
  *((_QWORD *)&v3 + 1) = -1;
  v31[0] = v3;
  v31[1] = v3;
  v4 = (uint64_t *)*((_QWORD *)this + 3);
  v5 = (uint64_t *)*((_QWORD *)this + 4);
  v28 = v4;
  if (v5 == v4)
  {
    v9 = 1;
    if (a2)
      goto LABEL_17;
LABEL_54:
    v26 = 1;
    if ((v9 & 1) != 0)
      return v26;
LABEL_55:
    MEMORY[0x1CAA32FB4](*(_QWORD *)&v31[0], 8);
    return v26;
  }
  do
  {
    if (*v4 != 4101)
      goto LABEL_12;
    v6 = v4[1];
    v29 = 0;
    if ((sub_1C53AD2DC((uint64_t)&v30, v6, &v29) & 1) != 0)
      goto LABEL_12;
    v7 = v30 >> 1;
    if ((v30 & 1) != 0)
      v8 = 4;
    else
      v8 = DWORD2(v31[0]);
    if (4 * v7 + 4 >= 3 * v8)
    {
      v8 *= 2;
LABEL_15:
      sub_1C53AD388((uint64_t)&v30, v8);
      v29 = 0;
      sub_1C53AD2DC((uint64_t)&v30, v6, &v29);
      goto LABEL_9;
    }
    if (v8 + ~v7 - HIDWORD(v30) <= v8 >> 3)
      goto LABEL_15;
LABEL_9:
    LODWORD(v30) = v30 + 2;
    if (*v29 != -1)
      --HIDWORD(v30);
    *v29 = v6;
LABEL_12:
    v4 += llvm::DIExpression::ExprOperand::getSize(&v28);
    v28 = v4;
  }
  while (v4 != v5);
  v9 = v30;
  if (!a2)
    goto LABEL_54;
LABEL_17:
  v10 = 0;
  v11 = a2;
  if (v9)
    v12 = v31;
  else
    v12 = *(_OWORD **)&v31[0];
  if (v9)
    v13 = 4;
  else
    v13 = DWORD2(v31[0]);
  v14 = (unint64_t *)v12 + v13;
  v15 = (unint64_t *)(*(_QWORD *)&v31[0] + 8 * DWORD2(v31[0]));
  if ((v9 & 1) != 0)
  {
    v15 = (unint64_t *)&v32;
    v16 = (unint64_t *)v31;
  }
  else
  {
    v16 = *(unint64_t **)&v31[0];
  }
  do
  {
    v17 = v9;
    v18 = DWORD2(v31[0]);
    v19 = v14;
    v20 = v14;
    if (v9 >= 2)
    {
      if (v9 & 1 | DWORD2(v31[0]))
      {
        v19 = v16;
        while (*v19 >= 0xFFFFFFFFFFFFFFFELL)
        {
          if (++v19 == v15)
          {
            v17 = v9 & 1;
            v18 = DWORD2(v31[0]);
            v19 = v15;
            goto LABEL_34;
          }
        }
        v17 = v9 & 1;
        v18 = DWORD2(v31[0]);
LABEL_34:
        v20 = v15;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        v19 = *(unint64_t **)&v31[0];
        v20 = *(unint64_t **)&v31[0];
      }
    }
    v21 = v17 == 0;
    if (v17)
      v22 = v31;
    else
      v22 = *(_OWORD **)&v31[0];
    if (!v21)
      v18 = 4;
    v23 = (unint64_t *)v22 + v18;
    if (v19 != v23)
    {
      while (*v19 != v10)
      {
        v24 = v19 + 1;
        while (v24 != v20)
        {
          v25 = *v24++;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v19 = v24 - 1;
            goto LABEL_47;
          }
        }
        v19 = v20;
LABEL_47:
        if (v19 == v23)
        {
          v26 = 0;
          goto LABEL_51;
        }
      }
    }
    v26 = v19 != v23;
    if (v19 == v23)
      break;
    ++v10;
  }
  while (v10 != v11);
LABEL_51:
  if ((v9 & 1) == 0)
    goto LABEL_55;
  return v26;
}

llvm::MDNode *llvm::DIExpression::prependOpcodes(_QWORD *a1, unsigned int *a2, char a3, int a4)
{
  uint64_t v7;
  unsigned int v8;
  char v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  int Size;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v18;
  uint64_t *i;

  v7 = a2[2];
  if (a4)
  {
    if (v7 >= a2[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a2, (uint64_t)(a2 + 4), v7 + 1, 8);
      LODWORD(v7) = a2[2];
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = 4099;
    v8 = a2[3];
    v7 = a2[2] + 1;
    a2[2] = v7;
    if (v7 >= v8)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a2, (uint64_t)(a2 + 4), v7 + 1, 8);
      LODWORD(v7) = a2[2];
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = 1;
    LODWORD(v7) = a2[2] + 1;
    a2[2] = v7;
  }
  if ((_DWORD)v7)
    v9 = a3;
  else
    v9 = 0;
  v10 = (uint64_t *)a1[3];
  v11 = (uint64_t *)a1[4];
  for (i = v10; v10 != v11; i = v10)
  {
    v18 = v10;
    if ((v9 & 1) == 0 || *v10 == 159)
    {
      v9 = 0;
    }
    else if (*v10 == 4096)
    {
      v12 = a2[2];
      if (v12 >= a2[3])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a2, (uint64_t)(a2 + 4), v12 + 1, 8);
        v12 = a2[2];
      }
      v9 = 0;
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v12) = 159;
      ++a2[2];
    }
    else
    {
      v9 = 1;
    }
    Size = llvm::DIExpression::ExprOperand::getSize(&v18);
    sub_1C4DFE610(a2, v10, &v10[Size]);
    v10 += llvm::DIExpression::ExprOperand::getSize(&i);
  }
  if ((v9 & 1) != 0)
  {
    v14 = a2[2];
    if (v14 >= a2[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a2, (uint64_t)(a2 + 4), v14 + 1, 8);
      LODWORD(v14) = a2[2];
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v14) = 159;
    ++a2[2];
  }
  v15 = a1[2];
  v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF8);
  if ((v15 & 4) != 0)
    v16 = (_QWORD *)*v16;
  return llvm::DIExpression::getImpl(v16, *(const void **)a2, a2[2], 0, 1);
}

llvm::DIExpression *llvm::DIExpression::constantFold(llvm::DIExpression *this, const void **a2)
{
  uint64_t v4;
  void *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  unsigned int Size;
  uint64_t v15;
  _QWORD *v16;
  const llvm::APInt *v17;
  llvm::MDNode *Impl;
  uint64_t v19;
  llvm::ConstantInt *v20;
  void *v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t *v25;
  void *__src;
  unsigned int v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[9];

  v30[8] = *MEMORY[0x1E0C80C00];
  v4 = *((unsigned int *)a2 + 8);
  v27 = v4;
  if (v4 > 0x40)
  {
    v6 = ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8;
    v5 = (void *)operator new[]();
    memcpy(v5, a2[3], v6);
  }
  else
  {
    v5 = (void *)a2[3];
  }
  __src = v5;
  v28 = v30;
  v29 = 0x800000000;
  v7 = *((_QWORD *)this + 3);
  v8 = *((_QWORD *)this + 4);
  v25 = (uint64_t *)v7;
  if (v8 == v7)
    goto LABEL_32;
  v9 = 0;
  v10 = 1;
  do
  {
    v24 = (uint64_t *)v7;
    if (*(_QWORD *)v7 != 4097)
    {
      if ((v9 & 1) == 0)
        goto LABEL_32;
LABEL_12:
      Size = llvm::DIExpression::ExprOperand::getSize(&v24);
      sub_1C4DFE610((unsigned int *)&v28, (_BYTE *)v7, (_BYTE *)(v7 + 8 * Size));
      v10 = 0;
      goto LABEL_23;
    }
    if ((v10 & 1) == 0)
      goto LABEL_12;
    if (*(_QWORD *)(v7 + 16) == 5)
    {
      v11 = *(_DWORD *)(v7 + 8);
      v12 = v27;
      v13 = v27 > v11;
      if (v27 >= v11)
        goto LABEL_15;
      llvm::APInt::sext((llvm::APInt *)&__src, v11, (llvm::APInt *)&v22);
    }
    else
    {
      v11 = *(_DWORD *)(v7 + 8);
      v12 = v27;
      v13 = v27 > v11;
      if (v27 >= v11)
      {
LABEL_15:
        if (v13)
        {
          llvm::APInt::trunc((llvm::APInt *)&__src, v11, (llvm::APInt *)&v22);
        }
        else
        {
          v23 = v12;
          if (v12 > 0x40)
          {
            v22 = (void *)operator new[]();
            memcpy(v22, __src, (((unint64_t)v23 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v22 = __src;
          }
        }
        goto LABEL_19;
      }
      llvm::APInt::zext((llvm::APInt *)&__src, v11, (uint64_t)&v22);
    }
LABEL_19:
    if (v27 >= 0x41 && __src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
    __src = v22;
    v27 = v23;
    v9 = 1;
    v10 = 1;
LABEL_23:
    v7 += 8 * llvm::DIExpression::ExprOperand::getSize(&v25);
    v25 = (uint64_t *)v7;
  }
  while (v7 != v8);
  if ((v9 & 1) != 0)
  {
    v15 = *((_QWORD *)this + 2);
    v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF8);
    if ((v15 & 4) != 0)
      v16 = (_QWORD *)*v16;
    Impl = llvm::DIExpression::getImpl(v16, v28, v29, 0, 1);
    v19 = *((_QWORD *)this + 2);
    v20 = (llvm::ConstantInt *)(v19 & 0xFFFFFFFFFFFFFFF8);
    if ((v19 & 4) != 0)
      v20 = *(llvm::ConstantInt **)v20;
    llvm::ConstantInt::get(v20, (llvm::LLVMContext *)&__src, v17);
    this = Impl;
  }
LABEL_32:
  if (v28 != v30)
    free(v28);
  if (v27 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  return this;
}

unint64_t llvm::DIExpression::getNumLocationOperands(llvm::DIExpression *this)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v6;

  v1 = (uint64_t *)*((_QWORD *)this + 3);
  v2 = (uint64_t *)*((_QWORD *)this + 4);
  v6 = v1;
  if (v2 == v1)
    return 0;
  v3 = 0;
  do
  {
    if (*v1 == 4101)
    {
      v4 = v1[1];
      if (v3 <= v4 + 1)
        v3 = v4 + 1;
    }
    v1 += llvm::DIExpression::ExprOperand::getSize(&v6);
    v6 = v1;
  }
  while (v1 != v2);
  return v3;
}

llvm::MDNode *llvm::DIGlobalVariableExpression::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t *v11;
  int v12;
  llvm::MDNode *result;
  BOOL v14;
  char *v15;
  uint64_t v16;
  llvm::MDNode *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  unsigned __int8 *v24;
  uint64_t v25;
  llvm::MDNode **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (a4)
    goto LABEL_9;
  v10 = *a1;
  v11 = (uint64_t *)(*a1 + 512);
  v27 = a2;
  v28 = a3;
  v26 = 0;
  v12 = sub_1C62343A0(v11, &v27, (uint64_t **)&v26);
  result = 0;
  if (v12)
    v14 = v26 == (llvm::MDNode **)(*(_QWORD *)(v10 + 512) + 8 * *(unsigned int *)(v10 + 528));
  else
    v14 = 1;
  if (!v14)
    result = *v26;
  if (!result && a5)
  {
LABEL_9:
    v27 = a2;
    v28 = a3;
    v15 = (char *)operator new(0x28uLL);
    v16 = 0;
    v15[16] = 7;
    v17 = (llvm::MDNode *)(v15 + 16);
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    v15[17] = a4 & 0x7F;
    *((_WORD *)v15 + 9) = 0;
    *(_QWORD *)(v15 + 20) = 0x200000000;
    *((_DWORD *)v15 + 7) = 0;
    *((_QWORD *)v15 + 4) = a1;
    do
    {
      v18 = *(unsigned __int8 **)((char *)&v27 + v16);
      v19 = *((unsigned int *)v15 + 6);
      v20 = v16 - 8 * v19;
      v21 = (uint64_t)v17 + v20;
      v22 = (char *)v17 - 8 * v19;
      v23 = v15[17];
      v24 = *(unsigned __int8 **)&v22[v16];
      if (v24)
        llvm::MetadataTracking::untrack((uint64_t)v17 + v20, v24);
      *(_QWORD *)&v22[v16] = v18;
      if (v18)
      {
        if ((v23 & 0x7F) != 0)
          v25 = 2;
        else
          v25 = (unint64_t)(v15 + 16) | 2;
        llvm::MetadataTracking::track(v21, v18, v25);
      }
      v16 += 8;
    }
    while (v16 != 16);
    if ((v15[17] & 0x7F) == 0)
      llvm::MDNode::countUnresolvedOperands((uint64_t)v17);
    return sub_1C622FBE0(v17, a4, *a1 + 512);
  }
  return result;
}

uint64_t llvm::DIObjCProperty::DIObjCProperty(uint64_t this, uint64_t a2, char a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  int v10;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  char *v15;
  unsigned __int8 **v16;
  char v17;
  unint64_t v18;

  *(_BYTE *)this = 27;
  v10 = a3 & 0x7F;
  *(_BYTE *)(this + 1) = a3 & 0x7F;
  *(_WORD *)(this + 2) = 0;
  *(_DWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 8) = a7;
  *(_DWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 16) = a2;
  if (a7)
  {
    v12 = 0;
    v13 = 8 * a7;
    do
    {
      v14 = *(unsigned __int8 **)(a6 + 8 * v12);
      v15 = (char *)(this - 8 * *(unsigned int *)(this + 8));
      v16 = (unsigned __int8 **)&v15[8 * v12];
      v17 = *(_BYTE *)(this + 1);
      if (*v16)
        llvm::MetadataTracking::untrack((uint64_t)&v15[8 * v12], *v16);
      *v16 = v14;
      if (v14)
      {
        if ((v17 & 0x7F) != 0)
          v18 = 2;
        else
          v18 = this | 2;
        llvm::MetadataTracking::track((uint64_t)v16, v14, v18);
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
    v10 = *(_BYTE *)(this + 1) & 0x7F;
  }
  if (!v10)
    llvm::MDNode::countUnresolvedOperands(this);
  *(_WORD *)(this + 2) = 16896;
  *(_DWORD *)(this + 24) = a4;
  *(_DWORD *)(this + 28) = a5;
  return this;
}

{
  int v10;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  char *v15;
  unsigned __int8 **v16;
  char v17;
  unint64_t v18;

  *(_BYTE *)this = 27;
  v10 = a3 & 0x7F;
  *(_BYTE *)(this + 1) = a3 & 0x7F;
  *(_WORD *)(this + 2) = 0;
  *(_DWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 8) = a7;
  *(_DWORD *)(this + 12) = 0;
  *(_QWORD *)(this + 16) = a2;
  if (a7)
  {
    v12 = 0;
    v13 = 8 * a7;
    do
    {
      v14 = *(unsigned __int8 **)(a6 + 8 * v12);
      v15 = (char *)(this - 8 * *(unsigned int *)(this + 8));
      v16 = (unsigned __int8 **)&v15[8 * v12];
      v17 = *(_BYTE *)(this + 1);
      if (*v16)
        llvm::MetadataTracking::untrack((uint64_t)&v15[8 * v12], *v16);
      *v16 = v14;
      if (v14)
      {
        if ((v17 & 0x7F) != 0)
          v18 = 2;
        else
          v18 = this | 2;
        llvm::MetadataTracking::track((uint64_t)v16, v14, v18);
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
    v10 = *(_BYTE *)(this + 1) & 0x7F;
  }
  if (!v10)
    llvm::MDNode::countUnresolvedOperands(this);
  *(_WORD *)(this + 2) = 16896;
  *(_DWORD *)(this + 24) = a4;
  *(_DWORD *)(this + 28) = a5;
  return this;
}

unsigned int *llvm::DIObjCProperty::getImpl(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, int a9, char a10)
{
  uint64_t v18;
  uint64_t *v19;
  int v20;
  unsigned int *result;
  char *v22;
  uint64_t v23;
  llvm::MDNode *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char v30;
  unsigned __int8 *v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (a9)
    goto LABEL_7;
  v18 = *a1;
  v19 = (uint64_t *)(*a1 + 968);
  v36 = a2;
  v37 = a3;
  LODWORD(v38) = a4;
  v39 = a5;
  v40 = a6;
  v41 = a7;
  v42 = a8;
  v35 = 0;
  v20 = sub_1C623474C(v19, (uint64_t)&v36, &v35);
  result = 0;
  if (v20 && v35 != (unsigned int **)(*(_QWORD *)(v18 + 968) + 8 * *(unsigned int *)(v18 + 984)))
    result = *v35;
  if (!result && a10)
  {
LABEL_7:
    v33 = a4;
    v34 = a7;
    v36 = a2;
    v37 = a3;
    v38 = a5;
    v39 = a6;
    v40 = a8;
    v22 = (char *)operator new(0x48uLL);
    v23 = 0;
    *(_OWORD *)v22 = 0u;
    *((_OWORD *)v22 + 1) = 0u;
    v22[40] = 27;
    v24 = (llvm::MDNode *)(v22 + 40);
    *((_QWORD *)v22 + 4) = 0;
    v22[41] = a9 & 0x7F;
    *((_WORD *)v22 + 21) = 0;
    *(_QWORD *)(v22 + 44) = 0x500000000;
    *((_DWORD *)v22 + 13) = 0;
    *((_QWORD *)v22 + 7) = a1;
    do
    {
      v25 = *(unsigned __int8 **)((char *)&v36 + v23);
      v26 = *((unsigned int *)v22 + 12);
      v27 = v23 - 8 * v26;
      v28 = (uint64_t)v24 + v27;
      v29 = (char *)v24 - 8 * v26;
      v30 = v22[41];
      v31 = *(unsigned __int8 **)&v29[v23];
      if (v31)
        llvm::MetadataTracking::untrack((uint64_t)v24 + v27, v31);
      *(_QWORD *)&v29[v23] = v25;
      if (v25)
      {
        if ((v30 & 0x7F) != 0)
          v32 = 2;
        else
          v32 = (unint64_t)(v22 + 40) | 2;
        llvm::MetadataTracking::track(v28, v25, v32);
      }
      v23 += 8;
    }
    while (v23 != 40);
    if ((v22[41] & 0x7F) == 0)
      llvm::MDNode::countUnresolvedOperands((uint64_t)v24);
    *((_WORD *)v22 + 21) = 16896;
    *((_DWORD *)v22 + 16) = v33;
    *((_DWORD *)v22 + 17) = v34;
    return sub_1C622FC3C(v24, a9, *a1 + 968);
  }
  return result;
}

llvm::MDNode *llvm::DIImportedEntity::getImpl(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, int a9, char a10)
{
  __int16 v16;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  llvm::MDNode *result;
  char *v22;
  uint64_t v23;
  llvm::MDNode *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char v30;
  unsigned __int8 *v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  llvm::MDNode **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v16 = a2;
  v43 = *MEMORY[0x1E0C80C00];
  if (a9)
    goto LABEL_7;
  v18 = *a1;
  v19 = (uint64_t *)(*a1 + 992);
  LODWORD(v36) = a2;
  v37 = a3;
  v38 = a4;
  v39 = a5;
  LODWORD(v40) = a6;
  v41 = a7;
  v42 = a8;
  v35 = 0;
  v20 = sub_1C53AD708(v19, (uint64_t)&v36, (uint64_t **)&v35);
  result = 0;
  if (v20 && v35 != (llvm::MDNode **)(*(_QWORD *)(v18 + 992) + 8 * *(unsigned int *)(v18 + 1008)))
    result = *v35;
  if (!result && a10)
  {
LABEL_7:
    v34 = a6;
    v36 = a3;
    v37 = a4;
    v38 = a7;
    v39 = a5;
    v40 = a8;
    v22 = (char *)operator new(0x48uLL);
    v23 = 0;
    *(_OWORD *)v22 = 0u;
    *((_OWORD *)v22 + 1) = 0u;
    v22[40] = 28;
    v24 = (llvm::MDNode *)(v22 + 40);
    *((_QWORD *)v22 + 4) = 0;
    v22[41] = a9 & 0x7F;
    *((_WORD *)v22 + 21) = 0;
    *(_QWORD *)(v22 + 44) = 0x500000000;
    *((_DWORD *)v22 + 13) = 0;
    v33 = a1;
    *((_QWORD *)v22 + 7) = a1;
    do
    {
      v25 = *(unsigned __int8 **)((char *)&v36 + v23);
      v26 = *((unsigned int *)v22 + 12);
      v27 = v23 - 8 * v26;
      v28 = (uint64_t)v24 + v27;
      v29 = (char *)v24 - 8 * v26;
      v30 = v22[41];
      v31 = *(unsigned __int8 **)&v29[v23];
      if (v31)
        llvm::MetadataTracking::untrack((uint64_t)v24 + v27, v31);
      *(_QWORD *)&v29[v23] = v25;
      if (v25)
      {
        if ((v30 & 0x7F) != 0)
          v32 = 2;
        else
          v32 = (unint64_t)(v22 + 40) | 2;
        llvm::MetadataTracking::track(v28, v25, v32);
      }
      v23 += 8;
    }
    while (v23 != 40);
    if ((v22[41] & 0x7F) == 0)
      llvm::MDNode::countUnresolvedOperands((uint64_t)v24);
    *((_WORD *)v22 + 21) = v16;
    *((_DWORD *)v22 + 16) = v34;
    return sub_1C53A6F00(v24, a9, *v33 + 992);
  }
  return result;
}

llvm::MDNode *sub_1C53A6F00(llvm::MDNode *result, int a2, uint64_t a3)
{
  llvm::MDNode *v3;
  llvm::MDNode *v4;
  _BYTE v5[31];

  v4 = result;
  if (a2)
  {
    if (a2 == 1)
    {
      v3 = result;
      llvm::MDNode::storeDistinctInContext(result);
      return v3;
    }
  }
  else
  {
    sub_1C53AD9E0(a3, (uint64_t *)&v4, (uint64_t)v5);
    return v4;
  }
  return result;
}

llvm::MDNode *llvm::DIMacro::getImpl(_QWORD *a1, unsigned int a2, unsigned int a3, unint64_t a4, unint64_t a5, int a6, int a7)
{
  __int16 v11;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  llvm::MDNode *result;
  BOOL v18;
  char *v19;
  uint64_t v20;
  llvm::MDNode *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  unsigned __int8 *v28;
  uint64_t v29;
  __int16 v30;
  _QWORD *v31;
  unsigned int v32;
  llvm::MDNode **v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;

  v11 = a2;
  v37 = *MEMORY[0x1E0C80C00];
  if (a6)
    goto LABEL_9;
  v14 = *a1;
  v15 = (uint64_t *)(*a1 + 1016);
  v34 = __PAIR64__(a3, a2);
  v35 = a4;
  v36 = a5;
  v33 = 0;
  v16 = sub_1C6234EF4(v15, (uint64_t)&v34, (uint64_t **)&v33);
  result = 0;
  if (v16)
    v18 = v33 == (llvm::MDNode **)(*(_QWORD *)(v14 + 1016) + 8 * *(unsigned int *)(v14 + 1032));
  else
    v18 = 1;
  if (!v18)
    result = *v33;
  if (!result && a7)
  {
LABEL_9:
    v30 = v11;
    v32 = a3;
    v34 = a4;
    v35 = a5;
    v19 = (char *)operator new(0x30uLL);
    v20 = 0;
    v19[16] = 29;
    v21 = (llvm::MDNode *)(v19 + 16);
    *(_QWORD *)v19 = 0;
    *((_QWORD *)v19 + 1) = 0;
    v19[17] = a6 & 0x7F;
    *((_WORD *)v19 + 9) = 0;
    *(_QWORD *)(v19 + 20) = 0x200000000;
    *((_DWORD *)v19 + 7) = 0;
    v31 = a1;
    *((_QWORD *)v19 + 4) = a1;
    do
    {
      v22 = *(unsigned __int8 **)((char *)&v34 + v20);
      v23 = *((unsigned int *)v19 + 6);
      v24 = v20 - 8 * v23;
      v25 = (uint64_t)v21 + v24;
      v26 = (char *)v21 - 8 * v23;
      v27 = v19[17];
      v28 = *(unsigned __int8 **)&v26[v20];
      if (v28)
        llvm::MetadataTracking::untrack((uint64_t)v21 + v24, v28);
      *(_QWORD *)&v26[v20] = v22;
      if (v22)
      {
        if ((v27 & 0x7F) != 0)
          v29 = 2;
        else
          v29 = (unint64_t)(v19 + 16) | 2;
        llvm::MetadataTracking::track(v25, v22, v29);
      }
      v20 += 8;
    }
    while (v20 != 16);
    if ((v19[17] & 0x7F) == 0)
      llvm::MDNode::countUnresolvedOperands((uint64_t)v21);
    *((_WORD *)v19 + 9) = v30;
    *((_DWORD *)v19 + 10) = v32;
    return sub_1C622FC9C(v21, a6, *v31 + 1016);
  }
  return result;
}

llvm::MDNode *llvm::DIMacroFile::getImpl(_QWORD *a1, unsigned int a2, unsigned int a3, unint64_t a4, unint64_t a5, int a6, int a7)
{
  __int16 v11;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  llvm::MDNode *result;
  BOOL v18;
  char *v19;
  uint64_t v20;
  llvm::MDNode *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  unsigned __int8 *v28;
  uint64_t v29;
  __int16 v30;
  _QWORD *v31;
  unsigned int v32;
  llvm::MDNode **v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;

  v11 = a2;
  v37 = *MEMORY[0x1E0C80C00];
  if (a6)
    goto LABEL_9;
  v14 = *a1;
  v15 = (uint64_t *)(*a1 + 1040);
  v34 = __PAIR64__(a3, a2);
  v35 = a4;
  v36 = a5;
  v33 = 0;
  v16 = sub_1C6234EF4(v15, (uint64_t)&v34, (uint64_t **)&v33);
  result = 0;
  if (v16)
    v18 = v33 == (llvm::MDNode **)(*(_QWORD *)(v14 + 1040) + 8 * *(unsigned int *)(v14 + 1056));
  else
    v18 = 1;
  if (!v18)
    result = *v33;
  if (!result && a7)
  {
LABEL_9:
    v30 = v11;
    v32 = a3;
    v34 = a4;
    v35 = a5;
    v19 = (char *)operator new(0x30uLL);
    v20 = 0;
    v19[16] = 30;
    v21 = (llvm::MDNode *)(v19 + 16);
    *(_QWORD *)v19 = 0;
    *((_QWORD *)v19 + 1) = 0;
    v19[17] = a6 & 0x7F;
    *((_WORD *)v19 + 9) = 0;
    *(_QWORD *)(v19 + 20) = 0x200000000;
    *((_DWORD *)v19 + 7) = 0;
    v31 = a1;
    *((_QWORD *)v19 + 4) = a1;
    do
    {
      v22 = *(unsigned __int8 **)((char *)&v34 + v20);
      v23 = *((unsigned int *)v19 + 6);
      v24 = v20 - 8 * v23;
      v25 = (uint64_t)v21 + v24;
      v26 = (char *)v21 - 8 * v23;
      v27 = v19[17];
      v28 = *(unsigned __int8 **)&v26[v20];
      if (v28)
        llvm::MetadataTracking::untrack((uint64_t)v21 + v24, v28);
      *(_QWORD *)&v26[v20] = v22;
      if (v22)
      {
        if ((v27 & 0x7F) != 0)
          v29 = 2;
        else
          v29 = (unint64_t)(v19 + 16) | 2;
        llvm::MetadataTracking::track(v25, v22, v29);
      }
      v20 += 8;
    }
    while (v20 != 16);
    if ((v19[17] & 0x7F) == 0)
      llvm::MDNode::countUnresolvedOperands((uint64_t)v21);
    *((_WORD *)v19 + 9) = v30;
    *((_DWORD *)v19 + 10) = v32;
    return sub_1C622FC9C(v21, a6, *v31 + 1040);
  }
  return result;
}

llvm::MDNode *llvm::DIArgList::getImpl(_QWORD *a1, _BYTE *a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t *v11;
  int v12;
  llvm::MDNode *result;
  void *v15;
  llvm::MDNode *v16;
  _QWORD v17[2];
  llvm::MDNode **v18;

  if (a4)
    goto LABEL_9;
  v10 = *a1;
  v11 = (uint64_t *)(*a1 + 1088);
  v17[0] = a2;
  v17[1] = a3;
  v18 = 0;
  v12 = sub_1C53ADDB0(v11, (uint64_t)v17, (uint64_t **)&v18);
  result = 0;
  if (v12 && v18 != (llvm::MDNode **)(*(_QWORD *)(v10 + 1088) + 8 * *(unsigned int *)(v10 + 1104)))
    result = *v18;
  if (!result && a5)
  {
LABEL_9:
    v15 = operator new(0x48uLL);
    v16 = (llvm::MDNode *)sub_1C622FF0C((uint64_t)v15, (uint64_t)a1, a4, a2, a3);
    return sub_1C622FCFC(v16, a4, *a1 + 1088);
  }
  return result;
}

uint64_t llvm::DIArgList::track(uint64_t this)
{
  uint64_t v1;
  unsigned __int8 **v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned int *)(this + 32);
  if ((_DWORD)v1)
  {
    v2 = *(unsigned __int8 ***)(this + 24);
    v3 = this | 2;
    v4 = 8 * v1;
    do
    {
      if (*v2)
        this = llvm::MetadataTracking::track((uint64_t)v2, *v2, v3);
      ++v2;
      v4 -= 8;
    }
    while (v4);
  }
  return this;
}

unint64_t sub_1C53A73F8(_DWORD *a1, _DWORD *a2, _QWORD *a3, _QWORD *a4, _BYTE *a5)
{
  unsigned __int8 v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  int v10;
  int v11;
  unint64_t v12;
  _QWORD *v13;
  _DWORD *v14;
  _BYTE *v15;
  _QWORD *v16;
  _DWORD *v17;
  _OWORD __src[4];
  _OWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  memset(__src, 0, sizeof(__src));
  v5 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v6 = &unk_1ED7EA000;
  if ((v5 & 1) == 0)
  {
    v16 = a3;
    v17 = a1;
    v14 = a2;
    v15 = a5;
    v13 = a4;
    v10 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v6 = &unk_1ED7EA000;
    a4 = v13;
    a2 = v14;
    a5 = v15;
    a3 = v16;
    v11 = v10;
    a1 = v17;
    if (v11)
    {
      v12 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v12 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v12;
      __cxa_guard_release(&qword_1ED7EAC88);
      v6 = (_QWORD *)&unk_1ED7EA000;
      a3 = v16;
      a1 = v17;
      a4 = v13;
      a2 = v14;
      a5 = v15;
    }
  }
  v21 = v6[400];
  v7 = *a2;
  LODWORD(__src[0]) = *a1;
  DWORD1(__src[0]) = v7;
  v8 = *a4;
  *((_QWORD *)&__src[0] + 1) = *a3;
  *(_QWORD *)&__src[1] = v8;
  BYTE8(__src[1]) = *a5;
  return sub_1C4E37BA0((char *)__src, 0, (char *)&__src[1] + 9, (char *)v19);
}

unint64_t sub_1C53A7528(char *a1, uint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, char *a6)
{
  _BYTE *v9;
  char *v10;
  uint64_t v12;
  int v13[2];

  v12 = a2;
  v9 = sub_1C50FDB34(a1, &v12, a3, (unint64_t)a4, *a5);
  *(_QWORD *)v13 = v12;
  v10 = sub_1C4ED4714(a1, (uint64_t *)v13, v9, (unint64_t)a4, *a6);
  return sub_1C4E37BA0(a1, *(uint64_t *)v13, v10, a4);
}

uint64_t sub_1C53A75A0(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t result;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[8];

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = *a2;
    v8 = *(unsigned int *)(*a2 + 8);
    v21 = *(_DWORD *)(*a2 + 4);
    v22 = *(unsigned __int16 *)(v7 + 2);
    v9 = (uint64_t *)(v7 - 8 * v8);
    v23 = *v9;
    if ((_DWORD)v8 == 2)
      v10 = v9[1];
    else
      v10 = 0;
    v24 = v10;
    v25[0] = *(_BYTE *)(v7 + 1) >> 7;
    v11 = sub_1C53A73F8(&v21, &v22, &v23, &v24, v25);
    v12 = v4 - 1;
    v13 = (v4 - 1) & v11;
    v14 = (_QWORD *)(v6 + 8 * v13);
    v15 = *v14;
    if (*a2 == *v14)
    {
LABEL_13:
      result = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      while (v15 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v15 == -8192;
        if (v18)
          v16 = v14;
        v19 = v13 + v17++;
        v13 = v19 & v12;
        v14 = (_QWORD *)(v6 + 8 * (v19 & v12));
        v15 = *v14;
        if (*a2 == *v14)
          goto LABEL_13;
      }
      result = 0;
      if (v16)
        v14 = v16;
    }
  }
  else
  {
    v14 = 0;
    result = 0;
  }
  *a3 = v14;
  return result;
}

uint64_t *sub_1C53A76B8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned __int8 v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  int v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  _QWORD v42[4];

  v42[3] = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C53A79AC(a1, v7);
      v42[0] = 0;
      sub_1C53A75A0((uint64_t *)a1, a3, v42);
      a4 = (uint64_t *)v42[0];
    }
LABEL_4:
    v8 = *a4;
    goto LABEL_5;
  }
  sub_1C53A79AC(a1, 2 * v7);
  v10 = *(unsigned __int16 *)(*a3 + 2);
  v12 = *(unsigned int *)(*a3 + 4);
  v11 = *(unsigned int *)(*a3 + 8);
  v13 = (uint64_t *)(*a3 - 8 * v11);
  v14 = *v13;
  if ((_DWORD)v11 == 2)
    v15 = v13[1];
  else
    v15 = 0;
  v16 = *(_QWORD *)a1;
  v17 = *(_DWORD *)(a1 + 16);
  v18 = *(unsigned __int8 *)(*a3 + 1) >> 7;
  memset(v42, 0, 17);
  v19 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v20 = &unk_1ED7EA000;
  if ((v19 & 1) == 0)
  {
    v38 = v16;
    v39 = v14;
    v35 = v17;
    v36 = v10;
    v37 = v15;
    v40 = v12;
    v41 = v18;
    v33 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v20 = &unk_1ED7EA000;
    LOBYTE(v18) = v41;
    v10 = v36;
    v15 = v37;
    v14 = v39;
    v12 = v40;
    v17 = v35;
    v16 = v38;
    if (v33)
    {
      v34 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v34 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v34;
      __cxa_guard_release(&qword_1ED7EAC88);
      v20 = (_QWORD *)&unk_1ED7EA000;
      LOBYTE(v18) = v41;
      v10 = v36;
      v15 = v37;
      v14 = v39;
      v12 = v40;
      v17 = v35;
      v16 = v38;
    }
  }
  v21 = v20[400];
  v42[0] = v14;
  v42[1] = v15;
  LOBYTE(v42[2]) = v18;
  v22 = 0xB492B66FBE98F273 * (v12 | (v10 << 32));
  v23 = __ROR8__(v22 - v14, 43)
      - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)v42 + 1)
      + __ROR8__((0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)&v42[1] + 1)) ^ v21, 30);
  v24 = __ROR8__(v14 ^ 0xC949D7C7509E6557, 20)
      + v21
      + v22
      - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)&v42[1] + 1)
      + 25;
  v25 = 0x9DDFEA08EB382D69
      * (v24 ^ ((0x9DDFEA08EB382D69 * (v23 ^ v24)) >> 47) ^ (0x9DDFEA08EB382D69 * (v23 ^ v24)));
  LODWORD(v22) = -348639895 * ((v25 >> 47) ^ v25);
  v26 = v17 - 1;
  v27 = v22 & (v17 - 1);
  v8 = *a3;
  a4 = (uint64_t *)(v16 + 8 * v27);
  v28 = *a4;
  if (*a3 != *a4)
  {
    v29 = 0;
    v30 = 1;
    while (v28 != -4096)
    {
      if (v29)
        v31 = 0;
      else
        v31 = v28 == -8192;
      if (v31)
        v29 = a4;
      v32 = v27 + v30++;
      v27 = v32 & v26;
      a4 = (uint64_t *)(v16 + 8 * v27);
      v28 = *a4;
      if (v8 == *a4)
        goto LABEL_5;
    }
    if (v29)
      a4 = v29;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C53A79AC(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C53A7A64(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C53A7A64(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned __int8 v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  int v33;
  int v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[17];

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD **)result;
    v5 = 8 * v3;
    do
    {
      *v4++ = -4096;
      v5 -= 8;
    }
    while (v5);
  }
  if (a2 != a3)
  {
    v6 = &unk_1ED7EA000;
    do
    {
      v7 = *a2;
      if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v8 = *(unsigned int *)(v7 + 8);
        v9 = (uint64_t *)(v7 - 8 * v8);
        if ((_DWORD)v8 == 2)
          v10 = v9[1];
        else
          v10 = 0;
        v11 = *(_QWORD **)result;
        v12 = *(_DWORD *)(result + 16);
        v13 = *(unsigned int *)(v7 + 4);
        v14 = *(unsigned __int16 *)(v7 + 2);
        v15 = *v9;
        v16 = *(unsigned __int8 *)(v7 + 1);
        v17 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
        if ((v17 & 1) == 0)
        {
          v37 = a3;
          v38 = result;
          v36 = a2;
          v39 = *(_QWORD **)result;
          v40 = *(_DWORD *)(result + 16);
          v41 = v15;
          v42 = v10;
          v43 = v13;
          v33 = __cxa_guard_acquire(&qword_1ED7EAC88);
          v10 = v42;
          v13 = v43;
          v15 = v41;
          v12 = v40;
          v11 = v39;
          v6 = &unk_1ED7EA000;
          a2 = v36;
          a3 = v37;
          v34 = v33;
          result = v38;
          if (v34)
          {
            v35 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override)
              v35 = 0xFF51AFD7ED558CCDLL;
            qword_1ED7EAC80 = v35;
            __cxa_guard_release(&qword_1ED7EAC88);
            v10 = v42;
            v13 = v43;
            v15 = v41;
            v12 = v40;
            v11 = v39;
            v6 = (_QWORD *)&unk_1ED7EA000;
            a3 = v37;
            result = v38;
            a2 = v36;
          }
        }
        v18 = v16 >> 7;
        v19 = v6[400];
        *(_QWORD *)v44 = v15;
        *(_QWORD *)&v44[8] = v10;
        v44[16] = v18;
        v20 = 0xB492B66FBE98F273 * (v13 | (v14 << 32));
        v21 = __ROR8__(v20 - v15, 43)
            - 0x3C5A37A36834CED9 * *(_QWORD *)&v44[1]
            + __ROR8__((0x9AE16A3B2F90404FLL * *(_QWORD *)&v44[9]) ^ v19, 30);
        v22 = __ROR8__(v15 ^ 0xC949D7C7509E6557, 20) + v19 + v20 - 0x9AE16A3B2F90404FLL * *(_QWORD *)&v44[9] + 25;
        v23 = 0x9DDFEA08EB382D69
            * (v22 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v22)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v22)));
        v24 = v12 - 1;
        v25 = (-348639895 * ((v23 >> 47) ^ v23)) & (v12 - 1);
        v26 = *a2;
        v27 = &v11[v25];
        v28 = *v27;
        if (*a2 != *v27)
        {
          v29 = 0;
          v30 = 1;
          while (v28 != -4096)
          {
            if (v29)
              v31 = 0;
            else
              v31 = v28 == -8192;
            if (v31)
              v29 = v27;
            v32 = v25 + v30++;
            v25 = v32 & v24;
            v27 = &v11[v32 & v24];
            v28 = *v27;
            if (v26 == *v27)
              goto LABEL_22;
          }
          if (v29)
            v27 = v29;
        }
LABEL_22:
        *v27 = v26;
        ++*(_DWORD *)(result + 8);
      }
      ++a2;
    }
    while (a2 != a3);
  }
  return result;
}

uint64_t *sub_1C53A7DFC(uint64_t *result, unint64_t a2, unint64_t a3, _OWORD *a4)
{
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  uint64_t v12;

  v5 = result;
  v7 = result + 1;
  v6 = (_QWORD *)result[1];
  if (!v6)
  {
    v8 = result + 1;
    goto LABEL_12;
  }
  do
  {
    while (1)
    {
      v8 = v6;
      v9 = v6[4];
      if (v9 <= a2)
        break;
LABEL_3:
      v6 = (_QWORD *)*v8;
      v7 = v8;
      if (!*v8)
        goto LABEL_12;
    }
    if (v9 >= a2)
    {
      v10 = v8[5];
      if (v10 > a3)
        goto LABEL_3;
      if (v10 >= a3)
        return result;
    }
    v6 = (_QWORD *)v8[1];
  }
  while (v6);
  v7 = v8 + 1;
LABEL_12:
  v11 = operator new(0x30uLL);
  v11[2] = *a4;
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = v8;
  *v7 = v11;
  v12 = *(_QWORD *)*v5;
  if (v12)
  {
    *v5 = v12;
    v11 = (_OWORD *)*v7;
  }
  result = sub_1C4768E74((uint64_t *)v5[1], (uint64_t *)v11);
  ++v5[2];
  return result;
}

unint64_t sub_1C53A7ECC(uint64_t a1)
{
  uint64_t v1;
  int v3;
  int v4;
  uint64_t v5;
  int v6;

  v1 = *(_QWORD *)(a1 - 8 * *(unsigned int *)(a1 + 8));
  v3 = *(_DWORD *)(a1 + 4);
  v4 = *(unsigned __int16 *)(a1 + 2);
  v5 = v1;
  v6 = v3;
  return sub_1C62300F8(&v6, &v4, &v5);
}

_QWORD *sub_1C53A7F24(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6230454(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

unint64_t sub_1C53A7FDC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  _OWORD v9[4];
  _OWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  memset(v9, 0, sizeof(v9));
  v12 = sub_1C4D9B584();
  return sub_1C623065C((char *)v9, 0, v9, (char *)v10, a1, a2, a3, a4);
}

_QWORD *sub_1C53A8094(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6230A40(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C53A814C(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  int v11;
  int i;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;

  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    v5 = 0;
    result = 0;
    goto LABEL_3;
  }
  v8 = *a1;
  v9 = sub_1C6230AEC(a2);
  v10 = 0;
  v11 = v4 - 1;
  for (i = 1; ; ++i)
  {
    v13 = v9 & v11;
    v5 = (uint64_t *)(v8 + 8 * (v9 & v11));
    v14 = *v5;
    if (*v5 == -8192)
      goto LABEL_10;
    if (v14 == -4096)
      break;
    v15 = (_QWORD *)(v14 - 8 * *(unsigned int *)(v14 + 8));
    if (*a2 == *v15 && a2[1] == v15[1] && a2[2] == v15[2] && a2[3] == v15[3])
    {
      result = 1;
      goto LABEL_3;
    }
LABEL_10:
    if (v10)
      v16 = 0;
    else
      v16 = v14 == -8192;
    if (v16)
      v10 = (uint64_t *)(v8 + 8 * v13);
    v9 = v13 + i;
  }
  result = 0;
  if (v10)
    v5 = v10;
LABEL_3:
  *a3 = v5;
  return result;
}

_QWORD *sub_1C53A8238(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6230D84(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

unint64_t sub_1C53A82F0(llvm *this, uint64_t *a2)
{
  uint64_t *v2;
  llvm *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v7;
  unint64_t v8;
  _OWORD v11[4];
  _OWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = a2;
  v3 = this;
  v15 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  v4 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v5 = &unk_1ED7EA000;
  if ((v4 & 1) == 0)
  {
    v7 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v5 = &unk_1ED7EA000;
    v3 = this;
    v2 = a2;
    if (v7)
    {
      v8 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v8 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v8;
      __cxa_guard_release(&qword_1ED7EAC88);
      v5 = (_QWORD *)&unk_1ED7EA000;
      v3 = this;
      v2 = a2;
    }
  }
  v14 = v5[400];
  return sub_1C53A83E4((char *)v11, 0, v11, (char *)v12, v3, v2);
}

unint64_t sub_1C53A83E4(char *a1, const llvm::APInt *a2, _QWORD *a3, char *a4, llvm *this, uint64_t *a6)
{
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  const llvm::APInt *v14;
  int v15[2];

  v14 = a2;
  v10 = llvm::hash_value(this, a2);
  v11 = sub_1C4E37644(a1, (uint64_t *)&v14, a3, (unint64_t)a4, v10);
  *(_QWORD *)v15 = v14;
  v12 = (char *)sub_1C50FDB34(a1, (uint64_t *)v15, v11, (unint64_t)a4, *a6);
  return sub_1C4E37BA0(a1, *(uint64_t *)v15, v12, a4);
}

uint64_t sub_1C53A8474(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t result;
  BOOL v15;
  unsigned int v16;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = sub_1C6231040(*a2);
    v8 = v4 - 1;
    v9 = v7 & (v4 - 1);
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
LABEL_14:
      result = 1;
    }
    else
    {
      v12 = 0;
      v13 = 1;
      while (v11 != -4096)
      {
        if (v12)
          v15 = 0;
        else
          v15 = v11 == -8192;
        if (v15)
          v12 = v10;
        v16 = v9 + v13++;
        v9 = v16 & v8;
        v10 = (_QWORD *)(v6 + 8 * (v16 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_14;
      }
      result = 0;
      if (v12)
        v10 = v12;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
  *a3 = v10;
  return result;
}

_QWORD *sub_1C53A852C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62311D0(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

unint64_t sub_1C53A85E4(_DWORD *a1, uint64_t *a2, uint64_t *a3, int *a4, int *a5)
{
  _OWORD v11[4];
  _OWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  v14 = sub_1C4D9B584();
  LODWORD(v11[0]) = *a1;
  return sub_1C6231360((char *)v11, 0, (_OWORD *)((char *)v11 + 4), (char *)v12, a2, a3, a4, a5);
}

_QWORD *sub_1C53A86B0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62316A4(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C53A8768(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6231BA0(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C53A8820(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  BOOL v12;
  int v13;
  _BOOL4 v14;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = v4 - 1;
    v8 = sub_1C53A8960(a2) & (v4 - 1);
    v9 = (uint64_t *)(v6 + 8 * v8);
    if (sub_1C53A88FC(a2, *v9))
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (*v9 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = *v9 == -8192;
        if (v12)
          v10 = v9;
        v13 = v11 + 1;
        v8 = (v8 + v11) & v7;
        v9 = (uint64_t *)(v6 + 8 * v8);
        v14 = sub_1C53A88FC(a2, *v9);
        v11 = v13;
        if (v14)
          goto LABEL_11;
      }
      result = 0;
      if (v10)
        v9 = v10;
    }
  }
  else
  {
    v9 = 0;
    result = 0;
  }
  *a3 = v9;
  return result;
}

BOOL sub_1C53A88FC(uint64_t a1, uint64_t a2)
{
  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
    return 0;
  if (sub_1C53A8E8C(*(_DWORD *)a1, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 8), a2))
    return 1;
  return sub_1C53A8D40(a1, a2);
}

unint64_t sub_1C53A8960(uint64_t a1)
{
  uint64_t v2;

  if (*(_DWORD *)a1 == 13
    && *(_QWORD *)(a1 + 8)
    && (v2 = *(_QWORD *)(a1 + 32)) != 0
    && *(_BYTE *)v2 == 13
    && *(_QWORD *)(v2 - 8 * *(unsigned int *)(v2 + 8) + 56))
  {
    return sub_1C53A89D8((uint64_t *)(a1 + 8), (uint64_t *)(a1 + 32));
  }
  else
  {
    return sub_1C53A8ACC((_DWORD *)a1, (uint64_t *)(a1 + 8), (uint64_t *)(a1 + 16), (int *)(a1 + 24), (uint64_t *)(a1 + 32), (uint64_t *)(a1 + 40), (int *)(a1 + 84));
  }
}

unint64_t sub_1C53A89D8(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  int v7;
  unint64_t v8;
  _OWORD v11[4];
  _OWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = a2;
  v3 = a1;
  v15 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  v4 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v5 = &unk_1ED7EA000;
  if ((v4 & 1) == 0)
  {
    v7 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v5 = &unk_1ED7EA000;
    v3 = a1;
    v2 = a2;
    if (v7)
    {
      v8 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v8 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v8;
      __cxa_guard_release(&qword_1ED7EAC88);
      v5 = (_QWORD *)&unk_1ED7EA000;
      v3 = a1;
      v2 = a2;
    }
  }
  v14 = v5[400];
  return sub_1C517D0A0((char *)v11, 0, v11, (char *)v12, v3, v2);
}

unint64_t sub_1C53A8ACC(_DWORD *a1, uint64_t *a2, uint64_t *a3, int *a4, uint64_t *a5, uint64_t *a6, int *a7)
{
  int *v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned __int8 v11;
  _QWORD *v12;
  int v14;
  int v15;
  unint64_t v16;
  int *v19;
  uint64_t *v20;
  uint64_t *v22;
  _DWORD *v23;
  _OWORD v24[4];
  _OWORD v25[3];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v28 = *MEMORY[0x1E0C80C00];
  v26 = 0;
  memset(v25, 0, sizeof(v25));
  memset(v24, 0, sizeof(v24));
  v11 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v12 = &unk_1ED7EA000;
  if ((v11 & 1) == 0)
  {
    v22 = a6;
    v23 = a1;
    v20 = a5;
    v19 = a7;
    v14 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v12 = &unk_1ED7EA000;
    v10 = a2;
    a7 = v19;
    v9 = a3;
    a6 = v22;
    v8 = a4;
    a5 = v20;
    v15 = v14;
    a1 = v23;
    if (v15)
    {
      v16 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v16 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v16;
      __cxa_guard_release(&qword_1ED7EAC88);
      v12 = (_QWORD *)&unk_1ED7EA000;
      a6 = v22;
      a1 = v23;
      v10 = a2;
      a7 = v19;
      a5 = v20;
      v9 = a3;
      v8 = a4;
    }
  }
  v27 = v12[400];
  LODWORD(v24[0]) = *a1;
  return sub_1C53A8C0C((char *)v24, 0, (_OWORD *)((char *)v24 + 4), (char *)v25, v10, v9, v8, a5, a6, a7);
}

unint64_t sub_1C53A8C0C(char *a1, uint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, uint64_t *a6, int *a7, uint64_t *a8, uint64_t *a9, int *a10)
{
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;

  v18 = a2;
  v15 = sub_1C50FDB34(a1, &v18, a3, (unint64_t)a4, *a5);
  v19 = v18;
  v16 = sub_1C50FDB34(a1, &v19, v15, (unint64_t)a4, *a6);
  return sub_1C53A8CB0(a1, v19, v16, a4, a7, a8, a9, a10);
}

unint64_t sub_1C53A8CB0(char *a1, uint64_t a2, _DWORD *a3, char *a4, int *a5, uint64_t *a6, uint64_t *a7, int *a8)
{
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;

  v16 = a2;
  v13 = sub_1C4ED49B0(a1, &v16, a3, (unint64_t)a4, *a5);
  v17 = v16;
  v14 = sub_1C50FDB34(a1, &v17, v13, (unint64_t)a4, *a6);
  return sub_1C5383144(a1, v17, v14, a4, a7, a8);
}

BOOL sub_1C53A8D40(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned __int16 *)(a2 + 2);
  if (*(_DWORD *)a1 != v2)
    return 0;
  v3 = (uint64_t *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  if (*(_QWORD *)(a1 + 8) != v3[2])
    return 0;
  v4 = a2;
  if (*(_BYTE *)a2 != 15)
    v4 = *v3;
  if (*(_QWORD *)(a1 + 16) != v4
    || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)
    || *(_QWORD *)(a1 + 32) != v3[1]
    || *(_QWORD *)(a1 + 40) != v3[3]
    || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 32)
    || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 48)
    || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 40))
  {
    return 0;
  }
  v5 = *(_QWORD *)(a2 + 52);
  v6 = v5 & 0xFF00000000;
  if (*(_BYTE *)(a1 + 72) && v6)
  {
    if (*(_DWORD *)(a1 + 68) != (_DWORD)v5)
      return 0;
  }
  else if ((*(_BYTE *)(a1 + 72) == 0) == (v6 != 0))
  {
    return 0;
  }
  if (v2 != 17152)
  {
    if (!*(_BYTE *)(a1 + 80))
      goto LABEL_22;
    return 0;
  }
  if (!*(_BYTE *)(a1 + 80) || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 4))
    return 0;
LABEL_22:
  if (*(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 28) || *(_QWORD *)(a1 + 88) != v3[4])
    return 0;
  return *(_QWORD *)(a1 + 96) == v3[5];
}

BOOL sub_1C53A8E8C(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 result;
  uint64_t v6;

  result = 0;
  if (a2 && a1 == 13 && a3)
  {
    if (*(_BYTE *)a2 == 13
      && *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 56)
      && *(_WORD *)(a4 + 2) == 13
      && (v6 = a4 - 8 * *(unsigned int *)(a4 + 8), *(_QWORD *)(v6 + 16) == a3))
    {
      return *(_QWORD *)(v6 + 8) == a2;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C53A8EF8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t *v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;

  v10 = 0;
  result = sub_1C6231C4C((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C53A9018(a1, (uint64_t)a2, a2, v10);
    v7 = (uint64_t *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

__n128 sub_1C53A8F7C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;

  *(_DWORD *)a1 = *(unsigned __int16 *)(a2 + 2);
  v2 = (uint64_t *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = v2[2];
  v3 = a2;
  if (*(_BYTE *)a2 != 15)
    v3 = *v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v4 = v2[1];
  v5 = v2[3];
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 68) = *(_QWORD *)(a2 + 52);
  if (*(_WORD *)(a2 + 2) == 17152)
    v6 = *(unsigned int *)(a2 + 4) | 0x100000000;
  else
    v6 = 0;
  *(_QWORD *)(a1 + 76) = v6;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 28);
  result = *(__n128 *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32);
  *(__n128 *)(a1 + 88) = result;
  return result;
}

uint64_t *sub_1C53A9018(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v6;
  unsigned int v7;
  uint64_t *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C53A90C8(a1, v7);
  v9 = 0;
  sub_1C6231C4C((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C53A90C8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C53A9180(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C53A9180(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C6231C4C((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

unint64_t sub_1C53A9224(uint64_t *a1, uint64_t *a2, int *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t *v8;
  int *v9;
  uint64_t *v10;
  uint64_t *v11;
  unsigned __int8 v12;
  _QWORD *v13;
  int v15;
  unint64_t v16;
  uint64_t *v18;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v24;
  _OWORD v25[4];
  _OWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v11 = a1;
  v29 = *MEMORY[0x1E0C80C00];
  v27 = 0;
  memset(v26, 0, sizeof(v26));
  memset(v25, 0, sizeof(v25));
  v12 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v13 = &unk_1ED7EA000;
  if ((v12 & 1) == 0)
  {
    v18 = a5;
    v22 = a6;
    v24 = a7;
    v21 = a8;
    v15 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v13 = &unk_1ED7EA000;
    a8 = v21;
    a6 = v22;
    v10 = a2;
    a7 = v24;
    a5 = v18;
    v11 = a1;
    v9 = a3;
    v8 = a4;
    if (v15)
    {
      v16 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v16 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v16;
      __cxa_guard_release(&qword_1ED7EAC88);
      v13 = (_QWORD *)&unk_1ED7EA000;
      a8 = v21;
      a6 = v22;
      v10 = a2;
      a7 = v24;
      a5 = v18;
      v11 = a1;
      v9 = a3;
      v8 = a4;
    }
  }
  v28 = v13[400];
  return sub_1C53A9370((char *)v25, 0, v25, (char *)v26, v11, v10, v9, v8, a5, a6, a7, a8);
}

unint64_t sub_1C53A9370(char *a1, uint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, uint64_t *a6, int *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12)
{
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;

  v20 = a2;
  v17 = sub_1C50FDB34(a1, &v20, a3, (unint64_t)a4, *a5);
  v21 = v20;
  v18 = sub_1C50FDB34(a1, &v21, v17, (unint64_t)a4, *a6);
  return sub_1C53A9424(a1, v21, v18, a4, a7, a8, a9, a10, a11, a12);
}

unint64_t sub_1C53A9424(char *a1, uint64_t a2, _DWORD *a3, char *a4, int *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;

  v18 = a2;
  v15 = sub_1C4ED49B0(a1, &v18, a3, (unint64_t)a4, *a5);
  v19 = v18;
  v16 = sub_1C50FDB34(a1, &v19, v15, (unint64_t)a4, *a6);
  return sub_1C623065C(a1, v19, v16, a4, a7, a8, a9, a10);
}

BOOL sub_1C53A94C8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  if (*(_DWORD *)a1 != *(unsigned __int16 *)(a2 + 2))
    return 0;
  v2 = (uint64_t *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  if (*(_QWORD *)(a1 + 8) != v2[2])
    return 0;
  v3 = a2;
  if (*(_BYTE *)a2 != 15)
    v3 = *v2;
  return *(_QWORD *)(a1 + 16) == v3
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(_QWORD *)(a1 + 32) == v2[1]
      && *(_QWORD *)(a1 + 40) == v2[3]
      && *(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 32)
      && *(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 48)
      && *(_QWORD *)(a1 + 56) == *(_QWORD *)(a2 + 40)
      && *(_DWORD *)(a1 + 68) == *(_DWORD *)(a2 + 28)
      && *(_QWORD *)(a1 + 72) == v2[4]
      && *(_DWORD *)(a1 + 80) == *(_DWORD *)(a2 + 52)
      && *(_QWORD *)(a1 + 88) == v2[5]
      && *(_QWORD *)(a1 + 96) == v2[6]
      && *(_QWORD *)(a1 + 104) == v2[7]
      && *(_QWORD *)(a1 + 112) == v2[8]
      && *(_QWORD *)(a1 + 120) == v2[9]
      && *(_QWORD *)(a1 + 128) == v2[10]
      && *(_QWORD *)(a1 + 136) == v2[11]
      && *(_QWORD *)(a1 + 144) == v2[12]
      && *(_QWORD *)(a1 + 152) == v2[13];
}

__n128 sub_1C53A963C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __n128 result;

  *(_DWORD *)a1 = *(unsigned __int16 *)(a2 + 2);
  v2 = (uint64_t *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = v2[2];
  v3 = a2;
  if (*(_BYTE *)a2 != 15)
    v3 = *v2;
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v5 = v2[3];
  v6 = v2[4];
  *(_QWORD *)(a1 + 32) = v2[1];
  *(_QWORD *)(a1 + 40) = v5;
  v7 = *(_OWORD *)(a2 + 32);
  LODWORD(v5) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 68) = v4;
  *(_OWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 72) = v6;
  *(_DWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(v2 + 5);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(v2 + 7);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(v2 + 9);
  result = *(__n128 *)(v2 + 11);
  *(__n128 *)(a1 + 136) = result;
  *(_QWORD *)(a1 + 152) = v2[13];
  return result;
}

_QWORD *sub_1C53A96C4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6232084(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C53A977C(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  unsigned __int8 *v7;
  _QWORD *v8;
  int v9;
  uint64_t *v10;
  unsigned int v11;
  int i;
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  BOOL v16;
  unsigned int v17;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = (unsigned __int8 *)(a2 + 4);
    v8 = (_QWORD *)(a2 + 8);
    v9 = sub_1C53A987C((_DWORD *)a2, (char *)(a2 + 4), (uint64_t *)(a2 + 8));
    v10 = 0;
    v11 = (v4 - 1) & v9;
    for (i = 1; ; ++i)
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if (*v13 == -4096)
        break;
      if (v14 != -8192)
      {
        if (*(_DWORD *)a2 == *(_DWORD *)(v14 + 28)
          && *v7 == *(unsigned __int8 *)(v14 + 52)
          && *v8 == *(_QWORD *)(v14 - 8 * *(unsigned int *)(v14 + 8) + 24))
        {
          result = 1;
          goto LABEL_11;
        }
        if (v14 == -4096)
          break;
      }
      if (v10)
        v16 = 0;
      else
        v16 = v14 == -8192;
      if (v16)
        v10 = (uint64_t *)(v6 + 8 * v11);
      v17 = v11 + i;
      v11 = v17 & (v4 - 1);
    }
    result = 0;
    if (v10)
      v13 = v10;
  }
  else
  {
    v13 = 0;
    result = 0;
  }
LABEL_11:
  *a3 = v13;
  return result;
}

unint64_t sub_1C53A987C(_DWORD *a1, char *a2, uint64_t *a3)
{
  uint64_t *v3;
  char *v4;
  unsigned __int8 v5;
  _QWORD *v6;
  int v8;
  int v9;
  unint64_t v10;
  _DWORD *v13;
  _OWORD v14[4];
  _OWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = a2;
  v18 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  memset(v14, 0, sizeof(v14));
  v5 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v6 = &unk_1ED7EA000;
  if ((v5 & 1) == 0)
  {
    v13 = a1;
    v8 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v6 = &unk_1ED7EA000;
    v4 = a2;
    v3 = a3;
    v9 = v8;
    a1 = v13;
    if (v9)
    {
      v10 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v10 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v10;
      __cxa_guard_release(&qword_1ED7EAC88);
      v6 = (_QWORD *)&unk_1ED7EA000;
      v3 = a3;
      a1 = v13;
      v4 = a2;
    }
  }
  v17 = v6[400];
  LODWORD(v14[0]) = *a1;
  return sub_1C53A998C((char *)v14, 0, (_BYTE *)v14 + 4, (char *)v15, v4, v3);
}

unint64_t sub_1C53A998C(char *a1, uint64_t a2, _BYTE *a3, char *a4, char *a5, uint64_t *a6)
{
  _BYTE *v9;
  char *v10;
  uint64_t v12;
  int v13[2];

  v12 = a2;
  v9 = sub_1C4ED4714(a1, &v12, a3, (unint64_t)a4, *a5);
  *(_QWORD *)v13 = v12;
  v10 = (char *)sub_1C50FDB34(a1, (uint64_t *)v13, v9, (unint64_t)a4, *a6);
  return sub_1C4E37BA0(a1, *(uint64_t *)v13, v10, a4);
}

uint64_t sub_1C53A9A04@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C53A9A88((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C53A9B80(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C53A9A88(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t result;
  BOOL v16;
  unsigned int v17;
  int v18;
  char v19[4];
  uint64_t v20;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = *a2;
    v18 = *(_DWORD *)(*a2 + 28);
    v19[0] = *(_BYTE *)(v7 + 52);
    v20 = *(_QWORD *)(v7 - 8 * *(unsigned int *)(v7 + 8) + 24);
    v8 = sub_1C53A987C(&v18, v19, &v20);
    v9 = v4 - 1;
    v10 = (v4 - 1) & v8;
    v11 = (_QWORD *)(v6 + 8 * v10);
    v12 = *v11;
    if (*a2 == *v11)
    {
      result = 1;
    }
    else
    {
      v13 = 0;
      v14 = 1;
      result = 1;
      while (v12 != -4096)
      {
        if (v13)
          v16 = 0;
        else
          v16 = v12 == -8192;
        if (v16)
          v13 = v11;
        v17 = v10 + v14++;
        v10 = v17 & v9;
        v11 = (_QWORD *)(v6 + 8 * (v17 & v9));
        v12 = *v11;
        if (*a2 == *v11)
          goto LABEL_7;
      }
      result = 0;
      if (v13)
        v11 = v13;
    }
  }
  else
  {
    v11 = 0;
    result = 0;
  }
LABEL_7:
  *a3 = v11;
  return result;
}

_QWORD *sub_1C53A9B80(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C53A9C30(a1, v7);
  v9 = 0;
  sub_1C53A9A88((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C53A9C30(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C53A9CE8(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C53A9CE8(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C53A9A88((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C53A9D8C(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t result;
  BOOL v15;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = sub_1C53A9E64(a2);
    v8 = 0;
    v9 = v4 - 1;
    for (i = 1; ; ++i)
    {
      v11 = v7 & v9;
      v12 = (uint64_t *)(v6 + 8 * (v7 & v9));
      v13 = *v12;
      if (*v12 != -4096 && v13 != -8192)
      {
        if (sub_1C53AA07C(a2, v13))
        {
          result = 1;
          goto LABEL_7;
        }
        v13 = *v12;
      }
      if (v13 == -4096)
        break;
      if (v8)
        v15 = 0;
      else
        v15 = v13 == -8192;
      if (v15)
        v8 = (uint64_t *)(v6 + 8 * v11);
      v7 = v11 + i;
    }
    result = 0;
    if (v8)
      v12 = v8;
  }
  else
  {
    v12 = 0;
    result = 0;
  }
LABEL_7:
  *a3 = v12;
  return result;
}

unint64_t sub_1C53A9E64(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v1 = *(unsigned __int8 *)(a1 + 32);
  if (*(_BYTE *)(a1 + 32))
  {
    v1 = *(_DWORD *)(a1 + 16);
    v2 = *(_QWORD *)(a1 + 24);
  }
  else
  {
    v2 = 0;
  }
  v7 = v1;
  v6 = v2;
  if (*(_BYTE *)(a1 + 48))
    v3 = *(_QWORD *)(a1 + 40);
  else
    v3 = 0;
  v5 = v3;
  return sub_1C53A9EC8((_QWORD *)a1, (uint64_t *)(a1 + 8), &v7, &v6, &v5);
}

unint64_t sub_1C53A9EC8(_QWORD *a1, uint64_t *a2, int *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *v6;
  int *v7;
  uint64_t *v8;
  unsigned __int8 v9;
  _QWORD *v10;
  uint64_t v11;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t *v18;
  _QWORD *v20;
  _OWORD v21[4];
  _OWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = a4;
  v7 = a3;
  v8 = a2;
  v25 = *MEMORY[0x1E0C80C00];
  v23 = 0;
  memset(v22, 0, sizeof(v22));
  memset(v21, 0, sizeof(v21));
  v9 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v10 = &unk_1ED7EA000;
  if ((v9 & 1) == 0)
  {
    v20 = a1;
    v18 = a5;
    v13 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v10 = &unk_1ED7EA000;
    v6 = a4;
    v8 = a2;
    a5 = v18;
    v7 = a3;
    v14 = v13;
    a1 = v20;
    if (v14)
    {
      v15 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v15 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v15;
      __cxa_guard_release(&qword_1ED7EAC88);
      v10 = (_QWORD *)&unk_1ED7EA000;
      v7 = a3;
      a1 = v20;
      v6 = a4;
      v8 = a2;
      a5 = v18;
    }
  }
  v11 = *a1;
  v24 = v10[400];
  *(_QWORD *)&v21[0] = v11;
  return sub_1C53A9FEC((char *)v21, 0, (_QWORD *)v21 + 1, (char *)v22, v8, v7, v6, a5);
}

unint64_t sub_1C53A9FEC(char *a1, uint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, int *a6, uint64_t *a7, uint64_t *a8)
{
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;

  v16 = a2;
  v13 = sub_1C50FDB34(a1, &v16, a3, (unint64_t)a4, *a5);
  v17 = v16;
  v14 = sub_1C4ED49B0(a1, &v17, v13, (unint64_t)a4, *a6);
  return sub_1C517D0A0(a1, v17, v14, a4, a7, a8);
}

BOOL sub_1C53AA07C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int v5;
  BOOL v6;

  v2 = (_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  if (*(_QWORD *)a1 != *v2 || *(_QWORD *)(a1 + 8) != v2[1])
    return 0;
  v5 = *(unsigned __int8 *)(a2 + 40);
  if (*(_BYTE *)(a1 + 32))
    v6 = v5 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    v3 = 0;
    if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 24) || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 32))
      return v3;
    goto LABEL_14;
  }
  if ((v5 != 0) == (*(_BYTE *)(a1 + 32) == 0))
    return 0;
LABEL_14:
  if (*(_BYTE *)(a1 + 48) && *(_BYTE *)(a2 + 56))
    return *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 48);
  else
    return (*(_BYTE *)(a1 + 48) == 0) ^ (*(_BYTE *)(a2 + 56) != 0);
}

uint64_t sub_1C53AA140@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C53AA1C4((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C53AA2B4(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C53AA1C4(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t result;
  BOOL v18;
  unsigned int v19;
  _OWORD v20[2];
  uint64_t v21;
  __int128 v22;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = *a2;
    v8 = *(_QWORD *)(*a2 + 40);
    v9 = *(_OWORD *)(*a2 + 24);
    v20[0] = *(_OWORD *)(*a2 - 8 * *(unsigned int *)(*a2 + 8));
    v20[1] = v9;
    v21 = v8;
    v22 = *(_OWORD *)(v7 + 48);
    v10 = sub_1C53A9E64((uint64_t)v20);
    v11 = v4 - 1;
    v12 = v10 & (v4 - 1);
    v13 = (_QWORD *)(v6 + 8 * v12);
    v14 = *v13;
    if (*a2 == *v13)
    {
      result = 1;
    }
    else
    {
      v15 = 0;
      v16 = 1;
      result = 1;
      while (v14 != -4096)
      {
        if (v15)
          v18 = 0;
        else
          v18 = v14 == -8192;
        if (v18)
          v15 = v13;
        v19 = v12 + v16++;
        v12 = v19 & v11;
        v13 = (_QWORD *)(v6 + 8 * (v19 & v11));
        v14 = *v13;
        if (*a2 == *v13)
          goto LABEL_7;
      }
      result = 0;
      if (v15)
        v13 = v15;
    }
  }
  else
  {
    v13 = 0;
    result = 0;
  }
LABEL_7:
  *a3 = v13;
  return result;
}

_QWORD *sub_1C53AA2B4(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C53AA364(a1, v7);
  v9 = 0;
  sub_1C53AA1C4((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C53AA364(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C53AA41C(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C53AA41C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C53AA1C4((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

_QWORD *sub_1C53AA4C0(uint64_t a1, uint64_t *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  _QWORD *v13;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v13 = 0;
LABEL_15:
    v6 = sub_1C53AA578(a1, (uint64_t)a2, a2, v13);
    *v6 = *a2;
    v6[1] = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != -4096)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -8192;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v11 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v13 = v8;
    else
      v13 = v6;
    goto LABEL_15;
  }
  return v6;
}

_QWORD *sub_1C53AA578(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C47AD304(a1, v7);
      v17 = 0;
      sub_1C47AD1C0(a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    v8 = *a4;
    goto LABEL_5;
  }
  sub_1C47AD304(a1, 2 * v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
      v12 = *a4;
      if (v8 == *a4)
        goto LABEL_5;
    }
    if (v13)
      a4 = v13;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C53AA6A8(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  BOOL v12;
  int v13;
  _BOOL4 v14;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = v4 - 1;
    v8 = sub_1C53AA848(a2) & (v4 - 1);
    v9 = (uint64_t *)(v6 + 8 * v8);
    if (sub_1C53AA784(a2, *v9))
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (*v9 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = *v9 == -8192;
        if (v12)
          v10 = v9;
        v13 = v11 + 1;
        v8 = (v8 + v11) & v7;
        v9 = (uint64_t *)(v6 + 8 * v8);
        v14 = sub_1C53AA784(a2, *v9);
        v11 = v13;
        if (v14)
          goto LABEL_11;
      }
      result = 0;
      if (v10)
        v9 = v10;
    }
  }
  else
  {
    v9 = 0;
    result = 0;
  }
  *a3 = v9;
  return result;
}

BOOL sub_1C53AA784(uint64_t a1, uint64_t a2)
{
  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
    return 0;
  if (sub_1C53AAC08((*(_DWORD *)(a1 + 76) >> 3) & 1, *(_QWORD *)a1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 88), a2))
    return 1;
  return sub_1C53AAA64(a1, a2);
}

BOOL sub_1C53AA7F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  if (a1 == a2)
    return 1;
  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
    return 0;
  v3 = *(unsigned int *)(a1 + 8);
  v4 = (uint64_t *)(a1 - 8 * v3);
  if (v3 < 0xA)
    v5 = 0;
  else
    v5 = v4[9];
  return sub_1C53AAC08((*(_DWORD *)(a1 + 44) >> 3) & 1, v4[1], v4[3], v5, a2);
}

unint64_t sub_1C53AA848(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;

  if ((*(_BYTE *)(a1 + 76) & 8) == 0
    && (v2 = (uint64_t *)(a1 + 16), *(_QWORD *)(a1 + 16))
    && (v3 = *(_QWORD *)a1) != 0
    && *(_BYTE *)v3 == 13
    && *(_QWORD *)(v3 - 8 * *(unsigned int *)(v3 + 8) + 56))
  {
    return sub_1C53A89D8(v2, (uint64_t *)a1);
  }
  else
  {
    return sub_1C53AA8B0((_QWORD *)(a1 + 8), (uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 40), (int *)(a1 + 32));
  }
}

unint64_t sub_1C53AA8B0(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, int *a5)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned __int8 v9;
  _QWORD *v10;
  uint64_t v11;
  int v13;
  int v14;
  unint64_t v15;
  int *v18;
  _QWORD *v20;
  _OWORD v21[4];
  _OWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = a4;
  v7 = a3;
  v8 = a2;
  v25 = *MEMORY[0x1E0C80C00];
  v23 = 0;
  memset(v22, 0, sizeof(v22));
  memset(v21, 0, sizeof(v21));
  v9 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v10 = &unk_1ED7EA000;
  if ((v9 & 1) == 0)
  {
    v20 = a1;
    v18 = a5;
    v13 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v10 = &unk_1ED7EA000;
    v6 = a4;
    v8 = a2;
    a5 = v18;
    v7 = a3;
    v14 = v13;
    a1 = v20;
    if (v14)
    {
      v15 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v15 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v15;
      __cxa_guard_release(&qword_1ED7EAC88);
      v10 = (_QWORD *)&unk_1ED7EA000;
      v7 = a3;
      a1 = v20;
      v6 = a4;
      v8 = a2;
      a5 = v18;
    }
  }
  v11 = *a1;
  v24 = v10[400];
  *(_QWORD *)&v21[0] = v11;
  return sub_1C53AA9D4((char *)v21, 0, (_QWORD *)v21 + 1, (char *)v22, v8, v7, v6, a5);
}

unint64_t sub_1C53AA9D4(char *a1, uint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, int *a8)
{
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;

  v16 = a2;
  v13 = sub_1C50FDB34(a1, &v16, a3, (unint64_t)a4, *a5);
  v17 = v16;
  v14 = sub_1C50FDB34(a1, &v17, v13, (unint64_t)a4, *a6);
  return sub_1C5383144(a1, v17, v14, a4, a7, a8);
}

BOOL sub_1C53AAA64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = *(unsigned int *)(a2 + 8);
  v3 = (uint64_t *)(a2 - 8 * v2);
  if (*(_QWORD *)a1 != v3[1] || *(_QWORD *)(a1 + 8) != v3[2] || *(_QWORD *)(a1 + 16) != v3[3])
    return 0;
  v4 = a2;
  if (*(_BYTE *)a2 != 15)
    v4 = *v3;
  if (*(_QWORD *)(a1 + 24) != v4
    || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 24)
    || *(_QWORD *)(a1 + 40) != v3[4]
    || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 28))
  {
    return 0;
  }
  v5 = v2 < 9 ? 0 : v3[8];
  if (*(_QWORD *)(a1 + 56) != v5
    || *(_DWORD *)(a1 + 64) != *(_DWORD *)(a2 + 32)
    || *(_DWORD *)(a1 + 68) != *(_DWORD *)(a2 + 36)
    || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 40)
    || *(_DWORD *)(a1 + 76) != *(_DWORD *)(a2 + 44)
    || *(_QWORD *)(a1 + 80) != v3[5])
  {
    return 0;
  }
  v6 = v2 < 0xA ? 0 : v3[9];
  if (*(_QWORD *)(a1 + 88) != v6 || *(_QWORD *)(a1 + 96) != v3[6] || *(_QWORD *)(a1 + 104) != v3[7])
    return 0;
  v7 = v2 < 0xB ? 0 : v3[10];
  if (*(_QWORD *)(a1 + 112) != v7)
    return 0;
  v8 = v2 < 0xC ? 0 : v3[11];
  if (*(_QWORD *)(a1 + 120) != v8)
    return 0;
  if (v2 < 0xD)
    v10 = 0;
  else
    v10 = v3[12];
  return *(_QWORD *)(a1 + 128) == v10;
}

BOOL sub_1C53AAC08(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 result;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  result = 0;
  if (a2 && !a1 && a3)
  {
    if (*(_BYTE *)a2 == 13
      && *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 56)
      && !((*(_BYTE *)(a5 + 44) & 8) >> 3)
      && (v7 = *(unsigned int *)(a5 + 8), v8 = (_QWORD *)(a5 - 8 * v7), v8[1] == a2)
      && v8[3] == a3)
    {
      if (v7 < 0xA)
        v9 = 0;
      else
        v9 = v8[9];
      return v9 == a4;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C53AAC90@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t *v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;

  v10 = 0;
  result = sub_1C53AAD14((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C53AAEF8(a1, (uint64_t)a2, a2, v10);
    v7 = (uint64_t *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C53AAD14(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t result;
  uint64_t *v11;
  int v12;
  BOOL v13;
  int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  uint64_t *v17;
  _BYTE v18[136];

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    sub_1C53AAE14((uint64_t)v18, *a2);
    v7 = v4 - 1;
    v8 = sub_1C53AA848((uint64_t)v18) & (v4 - 1);
    v9 = (uint64_t *)(v6 + 8 * v8);
    if (sub_1C53AA7F0(*a2, *v9))
    {
      result = 1;
    }
    else
    {
      v11 = 0;
      v12 = 1;
      while (*v9 != -4096)
      {
        if (v11)
          v13 = 0;
        else
          v13 = *v9 == -8192;
        if (v13)
          v11 = v9;
        v17 = v11;
        v14 = v12 + 1;
        v8 = (v8 + v12) & v7;
        v9 = (uint64_t *)(v6 + 8 * v8);
        v15 = sub_1C53AA7F0(*a2, *v9);
        v11 = v17;
        v16 = v15;
        result = 1;
        v12 = v14;
        if (v16)
          goto LABEL_5;
      }
      result = 0;
      if (v11)
        v9 = v11;
    }
  }
  else
  {
    v9 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v9;
  return result;
}

uint64_t sub_1C53AAE14(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = *(unsigned int *)(a2 + 8);
  v3 = (uint64_t *)(a2 - 8 * v2);
  *(_OWORD *)result = *(_OWORD *)(v3 + 1);
  *(_QWORD *)(result + 16) = v3[3];
  v4 = a2;
  if (*(_BYTE *)a2 != 15)
    v4 = *v3;
  *(_QWORD *)(result + 24) = v4;
  v5 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(result + 40) = v3[4];
  *(_DWORD *)(result + 48) = v5;
  if (v2 < 9)
    v6 = 0;
  else
    v6 = v3[8];
  *(_QWORD *)(result + 56) = v6;
  *(_OWORD *)(result + 64) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(result + 80) = v3[5];
  if (v2 <= 9)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 96) = *((_OWORD *)v3 + 3);
    goto LABEL_12;
  }
  *(_QWORD *)(result + 88) = v3[9];
  *(_OWORD *)(result + 96) = *((_OWORD *)v3 + 3);
  if ((_DWORD)v2 == 10)
  {
LABEL_12:
    *(_QWORD *)(result + 112) = 0;
    v7 = (_QWORD *)(result + 120);
    goto LABEL_13;
  }
  *(_QWORD *)(result + 112) = v3[10];
  v7 = (_QWORD *)(result + 120);
  if (v2 <= 0xB)
  {
LABEL_13:
    v8 = 0;
    *v7 = 0;
    goto LABEL_14;
  }
  *v7 = v3[11];
  if ((_DWORD)v2 == 12)
    v8 = 0;
  else
    v8 = v3[12];
LABEL_14:
  *(_QWORD *)(result + 128) = v8;
  return result;
}

uint64_t *sub_1C53AAEF8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v6;
  unsigned int v7;
  uint64_t *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C53AAFA8(a1, v7);
  v9 = 0;
  sub_1C53AAD14((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C53AAFA8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C53AB060(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C53AB060(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C53AAD14((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

BOOL sub_1C53AB104(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
    return 0;
  v2 = (uint64_t *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  if (*(_QWORD *)a1 != v2[1])
    return 0;
  v3 = a2;
  if (*(_BYTE *)a2 != 15)
    v3 = *v2;
  return *(_QWORD *)(a1 + 8) == v3
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 24)
      && *(_DWORD *)(a1 + 20) == *(unsigned __int16 *)(a2 + 28);
}

unint64_t sub_1C53AB174(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  v1 = (uint64_t *)(a1 - 8 * *(unsigned int *)(a1 + 8));
  v5 = v1[1];
  v2 = a1;
  if (*(_BYTE *)a1 != 15)
    v2 = *v1;
  v6 = v2;
  v3 = *(unsigned __int16 *)(a1 + 28);
  v7 = *(_DWORD *)(a1 + 24);
  v8 = v3;
  return sub_1C623221C(&v5, &v6, &v7, &v8);
}

_QWORD *sub_1C53AB1D8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62324C4(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C53AB290(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  unsigned int v9;
  int i;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  unsigned int v16;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    v11 = 0;
    result = 0;
    goto LABEL_21;
  }
  v6 = *a1;
  v7 = sub_1C53AB38C((_QWORD *)a2, (uint64_t *)(a2 + 8), (int *)(a2 + 16));
  v8 = 0;
  v9 = (v4 - 1) & v7;
  for (i = 1; ; ++i)
  {
    v11 = (uint64_t *)(v6 + 8 * v9);
    v12 = *v11;
    if (*v11 == -8192)
      goto LABEL_9;
    if (v12 == -4096)
      break;
    v13 = (uint64_t *)(v12 - 8 * *(unsigned int *)(v12 + 8));
    if (*(_QWORD *)a2 == v13[1])
    {
      v14 = *v11;
      if (*(_BYTE *)v12 != 15)
        v14 = *v13;
      if (*(_QWORD *)(a2 + 8) == v14 && *(_DWORD *)(a2 + 16) == *(_DWORD *)(v12 + 24))
      {
        result = 1;
        goto LABEL_21;
      }
    }
LABEL_9:
    if (v8)
      v15 = 0;
    else
      v15 = v12 == -8192;
    if (v15)
      v8 = (uint64_t *)(v6 + 8 * v9);
    v16 = v9 + i;
    v9 = v16 & (v4 - 1);
  }
  result = 0;
  if (v8)
    v11 = v8;
LABEL_21:
  *a3 = v11;
  return result;
}

unint64_t sub_1C53AB38C(_QWORD *a1, uint64_t *a2, int *a3)
{
  int *v3;
  uint64_t *v4;
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t v7;
  int v9;
  int v10;
  unint64_t v11;
  _QWORD *v14;
  _OWORD v15[4];
  _OWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = a3;
  v4 = a2;
  v19 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  memset(v15, 0, sizeof(v15));
  v5 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v6 = &unk_1ED7EA000;
  if ((v5 & 1) == 0)
  {
    v14 = a1;
    v9 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v6 = &unk_1ED7EA000;
    v4 = a2;
    v3 = a3;
    v10 = v9;
    a1 = v14;
    if (v10)
    {
      v11 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v11 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v11;
      __cxa_guard_release(&qword_1ED7EAC88);
      v6 = (_QWORD *)&unk_1ED7EA000;
      v3 = a3;
      a1 = v14;
      v4 = a2;
    }
  }
  v7 = *a1;
  v18 = v6[400];
  *(_QWORD *)&v15[0] = v7;
  return sub_1C5383144((char *)v15, 0, (_QWORD *)v15 + 1, (char *)v16, v4, v3);
}

uint64_t sub_1C53AB49C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C53AB520((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C53AB634(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C53AB520(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = sub_1C53AB5D8(*a2);
    v8 = v4 - 1;
    v9 = v7 & (v4 - 1);
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v12 = 0;
      v13 = 1;
      while (v11 != -4096)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v11 == -8192;
        if (v14)
          v12 = v10;
        v15 = v9 + v13++;
        v9 = v15 & v8;
        v10 = (_QWORD *)(v6 + 8 * (v15 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_11;
      }
      result = 0;
      if (v12)
        v10 = v12;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
  *a3 = v10;
  return result;
}

unint64_t sub_1C53AB5D8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v1 = (uint64_t *)(a1 - 8 * *(unsigned int *)(a1 + 8));
  v4 = v1[1];
  v2 = a1;
  if (*(_BYTE *)a1 != 15)
    v2 = *v1;
  v5 = v2;
  v6 = *(_DWORD *)(a1 + 24);
  return sub_1C53AB38C(&v4, &v5, &v6);
}

_QWORD *sub_1C53AB634(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C53AB6E4(a1, v7);
  v9 = 0;
  sub_1C53AB520((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C53AB6E4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C53AB79C(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C53AB79C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C53AB520((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

unint64_t sub_1C53AB840(uint64_t *a1, uint64_t *a2)
{
  _OWORD v5[4];
  _OWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  memset(v6, 0, sizeof(v6));
  memset(v5, 0, sizeof(v5));
  v8 = sub_1C4D9B584();
  return sub_1C517D0A0((char *)v5, 0, v5, (char *)v6, a1, a2);
}

_QWORD *sub_1C53AB8E0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6232894(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C53AB998(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t *v11;
  int v12;
  BOOL v13;
  int v14;
  _BOOL4 v15;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v8 = *a1;
    v9 = v4 - 1;
    v10 = (v4 - 1) & sub_1C6232940((uint64_t *)a2, (uint64_t *)(a2 + 8), (uint64_t *)(a2 + 16), (uint64_t *)(a2 + 24), (int *)(a2 + 32));
    v5 = (uint64_t *)(v8 + 8 * v10);
    if (sub_1C53ABA90(a2, *v5))
    {
      result = 1;
    }
    else
    {
      v11 = 0;
      v12 = 1;
      while (*v5 != -4096)
      {
        if (v11)
          v13 = 0;
        else
          v13 = *v5 == -8192;
        if (v13)
          v11 = v5;
        v14 = v12 + 1;
        v10 = (v10 + v12) & v9;
        v5 = (uint64_t *)(v8 + 8 * v10);
        v15 = sub_1C53ABA90(a2, *v5);
        result = 1;
        v12 = v14;
        if (v15)
          goto LABEL_3;
      }
      result = 0;
      if (v11)
        v5 = v11;
    }
  }
  else
  {
    v5 = 0;
    result = 0;
  }
LABEL_3:
  *a3 = v5;
  return result;
}

BOOL sub_1C53ABA90(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  if ((a2 | 0x1000) != 0xFFFFFFFFFFFFF000
    && (v2 = (_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8)), *(_QWORD *)a1 == *v2)
    && *(_QWORD *)(a1 + 8) == v2[1]
    && *(_QWORD *)(a1 + 16) == v2[2]
    && *(_QWORD *)(a1 + 24) == v2[3])
  {
    return *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 24);
  }
  else
  {
    return 0;
  }
}

_QWORD *sub_1C53ABB00(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6232C48(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C53ABBB8(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  unsigned int v9;
  int i;
  uint64_t *v11;
  uint64_t v12;
  uint64_t result;
  BOOL v14;
  unsigned int v15;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = 0;
    v8 = v4 - 1;
    v9 = v8 & sub_1C53ABCA0(a2 + 1, a2 + 2, a2 + 3, a2 + 4);
    for (i = 1; ; ++i)
    {
      v11 = (uint64_t *)(v6 + 8 * v9);
      v12 = *v11;
      if (*v11 != -4096 && v12 != -8192)
      {
        if (sub_1C53ABDA8((uint64_t)a2, v12))
        {
          result = 1;
          goto LABEL_7;
        }
        v12 = *v11;
      }
      if (v12 == -4096)
        break;
      if (v7)
        v14 = 0;
      else
        v14 = v12 == -8192;
      if (v14)
        v7 = (uint64_t *)(v6 + 8 * v9);
      v15 = v9 + i;
      v9 = v15 & v8;
    }
    result = 0;
    if (v7)
      v11 = v7;
  }
  else
  {
    v11 = 0;
    result = 0;
  }
LABEL_7:
  *a3 = v11;
  return result;
}

unint64_t sub_1C53ABCA0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned __int8 v8;
  _QWORD *v9;
  int v11;
  unint64_t v12;
  _OWORD v17[4];
  _OWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = a4;
  v5 = a3;
  v6 = a2;
  v7 = a1;
  v21 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  memset(v17, 0, sizeof(v17));
  v8 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v9 = &unk_1ED7EA000;
  if ((v8 & 1) == 0)
  {
    v11 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v9 = &unk_1ED7EA000;
    v5 = a3;
    v7 = a1;
    v4 = a4;
    v6 = a2;
    if (v11)
    {
      v12 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v12 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v12;
      __cxa_guard_release(&qword_1ED7EAC88);
      v9 = (_QWORD *)&unk_1ED7EA000;
      v5 = a3;
      v7 = a1;
      v4 = a4;
      v6 = a2;
    }
  }
  v20 = v9[400];
  return sub_1C623065C((char *)v17, 0, v17, (char *)v18, v7, v6, v5, v4);
}

BOOL sub_1C53ABDA8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  if (*(_QWORD *)(a1 + 8) != v2[1]
    || *(_QWORD *)(a1 + 16) != v2[2]
    || *(_QWORD *)(a1 + 24) != v2[3]
    || *(_QWORD *)(a1 + 32) != v2[4]
    || *(_QWORD *)(a1 + 40) != v2[5])
  {
    return 0;
  }
  v3 = a2;
  if (*(_BYTE *)a2 != 15)
    v3 = *v2;
  return *(_QWORD *)a1 == v3
      && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 24)
      && *(unsigned __int8 *)(a1 + 52) == *(unsigned __int8 *)(a2 + 28);
}

uint64_t sub_1C53ABE4C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C53ABED0((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C53AC00C(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C53ABED0(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t result;
  BOOL v15;
  unsigned int v16;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = sub_1C53ABF90(*a2);
    v8 = v4 - 1;
    v9 = v7 & (v4 - 1);
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v12 = 0;
      v13 = 1;
      result = 1;
      while (v11 != -4096)
      {
        if (v12)
          v15 = 0;
        else
          v15 = v11 == -8192;
        if (v15)
          v12 = v10;
        v16 = v9 + v13++;
        v9 = v16 & v8;
        v10 = (_QWORD *)(v6 + 8 * (v16 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_7;
      }
      result = 0;
      if (v12)
        v10 = v12;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_7:
  *a3 = v10;
  return result;
}

unint64_t sub_1C53ABF90(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  int v7;
  char v8;

  v1 = a1 - 8 * *(unsigned int *)(a1 + 8);
  v2 = *(_OWORD *)(v1 + 24);
  v4 = *(_OWORD *)(v1 + 8);
  v5 = v2;
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_DWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 28);
  return sub_1C53ABCA0((uint64_t *)&v4, (uint64_t *)&v4 + 1, (uint64_t *)&v5, (uint64_t *)&v5 + 1);
}

_QWORD *sub_1C53AC00C(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C53AC0BC(a1, v7);
  v9 = 0;
  sub_1C53ABED0((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C53AC0BC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6232CF4(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

unint64_t sub_1C53AC174(uint64_t *a1, uint64_t *a2, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _OWORD v10[7];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  memset(v10, 0, sizeof(v10));
  v6 = sub_1C4D9B584();
  v7 = *a1;
  v11 = v6;
  v9 = v7;
  return sub_1C53A7528((char *)&v9, 0, v10, (char *)&v10[3] + 8, a2, a3);
}

_QWORD *sub_1C53AC228(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62330BC(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C53AC2E0(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t result;
  uint64_t *v11;
  int v12;
  BOOL v13;
  int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  uint64_t *v17;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = v4 - 1;
    v8 = (v4 - 1) & sub_1C53AC454((_DWORD *)a2, (uint64_t *)(a2 + 8), (uint64_t *)(a2 + 16), (char *)(a2 + 24), (uint64_t *)(a2 + 32));
    v9 = (uint64_t *)(v6 + 8 * v8);
    if (sub_1C53AC3E4(a2, *v9))
    {
      result = 1;
    }
    else
    {
      v11 = 0;
      v12 = 1;
      while (*v9 != -4096)
      {
        if (v11)
          v13 = 0;
        else
          v13 = *v9 == -8192;
        if (v13)
          v11 = v9;
        v17 = v11;
        v14 = v12 + 1;
        v8 = (v8 + v12) & v7;
        v9 = (uint64_t *)(v6 + 8 * v8);
        v15 = sub_1C53AC3E4(a2, *v9);
        v11 = v17;
        v16 = v15;
        result = 1;
        v12 = v14;
        if (v16)
          goto LABEL_5;
      }
      result = 0;
      if (v11)
        v9 = v11;
    }
  }
  else
  {
    v9 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v9;
  return result;
}

BOOL sub_1C53AC3E4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  if ((a2 | 0x1000) != 0xFFFFFFFFFFFFF000
    && *(_DWORD *)a1 == *(unsigned __int16 *)(a2 + 2)
    && (v2 = (_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8)), *(_QWORD *)(a1 + 8) == *v2)
    && *(_QWORD *)(a1 + 16) == v2[1]
    && *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    return *(_QWORD *)(a1 + 32) == v2[2];
  }
  else
  {
    return 0;
  }
}

unint64_t sub_1C53AC454(_DWORD *a1, uint64_t *a2, uint64_t *a3, char *a4, uint64_t *a5)
{
  _OWORD v11[4];
  _OWORD v12[3];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  v14 = sub_1C4D9B584();
  LODWORD(v11[0]) = *a1;
  return sub_1C6233168((char *)v11, 0, (_OWORD *)((char *)v11 + 4), (char *)v12, a2, a3, a4, a5);
}

_QWORD *sub_1C53AC520(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6233434(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C53AC5D8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6233CC8(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C53AC690(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  unsigned int v9;
  int i;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  unsigned int v14;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = 0;
    v8 = v4 - 1;
    v9 = v8 & sub_1C53AC780((uint64_t *)a2, (uint64_t *)(a2 + 8), (uint64_t *)(a2 + 16), (int *)(a2 + 24), (uint64_t *)(a2 + 32), (int *)(a2 + 40), (int *)(a2 + 44), (uint64_t *)(a2 + 56));
    for (i = 1; ; ++i)
    {
      v11 = (uint64_t *)(v6 + 8 * v9);
      v12 = *v11;
      if ((*v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (sub_1C53ACAB4(a2, v12))
        {
          result = 1;
          goto LABEL_15;
        }
        v12 = *v11;
      }
      if (v12 == -4096)
        break;
      if (v7)
        v13 = 0;
      else
        v13 = v12 == -8192;
      if (v13)
        v7 = (uint64_t *)(v6 + 8 * v9);
      v14 = v9 + i;
      v9 = v14 & v8;
    }
    result = 0;
    if (v7)
      v11 = v7;
  }
  else
  {
    v11 = 0;
    result = 0;
  }
LABEL_15:
  *a3 = v11;
  return result;
}

unint64_t sub_1C53AC780(uint64_t *a1, uint64_t *a2, uint64_t *a3, int *a4, uint64_t *a5, int *a6, int *a7, uint64_t *a8)
{
  int *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  unsigned __int8 v12;
  _QWORD *v13;
  int v15;
  unint64_t v16;
  uint64_t *v18;
  uint64_t *v21;
  int *v22;
  int *v24;
  _OWORD v25[4];
  _OWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v11 = a1;
  v29 = *MEMORY[0x1E0C80C00];
  v27 = 0;
  memset(v26, 0, sizeof(v26));
  memset(v25, 0, sizeof(v25));
  v12 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v13 = &unk_1ED7EA000;
  if ((v12 & 1) == 0)
  {
    v18 = a5;
    v22 = a6;
    v24 = a7;
    v21 = a8;
    v15 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v13 = &unk_1ED7EA000;
    a8 = v21;
    a6 = v22;
    v10 = a2;
    a7 = v24;
    a5 = v18;
    v11 = a1;
    v9 = a3;
    v8 = a4;
    if (v15)
    {
      v16 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v16 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v16;
      __cxa_guard_release(&qword_1ED7EAC88);
      v13 = (_QWORD *)&unk_1ED7EA000;
      a8 = v21;
      a6 = v22;
      v10 = a2;
      a7 = v24;
      a5 = v18;
      v11 = a1;
      v9 = a3;
      v8 = a4;
    }
  }
  v28 = v13[400];
  return sub_1C53AC8CC((char *)v25, 0, v25, (char *)v26, v11, v10, v9, v8, a5, a6, a7, a8);
}

unint64_t sub_1C53AC8CC(char *a1, uint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, int *a8, uint64_t *a9, int *a10, int *a11, uint64_t *a12)
{
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;

  v20 = a2;
  v17 = sub_1C50FDB34(a1, &v20, a3, (unint64_t)a4, *a5);
  v21 = v20;
  v18 = sub_1C50FDB34(a1, &v21, v17, (unint64_t)a4, *a6);
  return sub_1C53AC980(a1, v21, v18, a4, a7, a8, a9, a10, a11, a12);
}

unint64_t sub_1C53AC980(char *a1, uint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, int *a6, uint64_t *a7, int *a8, int *a9, uint64_t *a10)
{
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;

  v18 = a2;
  v15 = sub_1C50FDB34(a1, &v18, a3, (unint64_t)a4, *a5);
  v19 = v18;
  v16 = sub_1C4ED49B0(a1, &v19, v15, (unint64_t)a4, *a6);
  return sub_1C53ACA24(a1, v19, v16, a4, a7, a8, a9, a10);
}

unint64_t sub_1C53ACA24(char *a1, uint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, int *a6, int *a7, uint64_t *a8)
{
  _QWORD *v13;
  _DWORD *v14;
  uint64_t v16;
  uint64_t v17;

  v16 = a2;
  v13 = sub_1C50FDB34(a1, &v16, a3, (unint64_t)a4, *a5);
  v17 = v16;
  v14 = sub_1C4ED49B0(a1, &v17, v13, (unint64_t)a4, *a6);
  return sub_1C50FDABC(a1, v17, v14, a4, a7, a8);
}

BOOL sub_1C53ACAB4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
  return *(_QWORD *)a1 == *v2
      && *(_QWORD *)(a1 + 8) == v2[1]
      && *(_QWORD *)(a1 + 16) == v2[2]
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(_QWORD *)(a1 + 32) == v2[3]
      && *(_DWORD *)(a1 + 40) == *(unsigned __int16 *)(a2 + 32)
      && *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 36)
      && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 28)
      && *(_QWORD *)(a1 + 56) == v2[4];
}

uint64_t sub_1C53ACB58@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C53ACBDC((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C53ACD10(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C53ACBDC(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = sub_1C53ACC94(*a2);
    v8 = v4 - 1;
    v9 = v7 & (v4 - 1);
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v12 = 0;
      v13 = 1;
      while (v11 != -4096)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v11 == -8192;
        if (v14)
          v12 = v10;
        v15 = v9 + v13++;
        v9 = v15 & v8;
        v10 = (_QWORD *)(v6 + 8 * (v15 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_11;
      }
      result = 0;
      if (v12)
        v10 = v12;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
  *a3 = v10;
  return result;
}

unint64_t sub_1C53ACC94(uint64_t a1)
{
  __int128 *v1;
  uint64_t v2;
  int v3;
  __int128 v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10[3];
  uint64_t v11;

  v1 = (__int128 *)(a1 - 8 * *(unsigned int *)(a1 + 8));
  v5 = *v1;
  v2 = *((_QWORD *)v1 + 3);
  v6 = *((_QWORD *)v1 + 2);
  v3 = *(_DWORD *)(a1 + 28);
  v7 = *(_DWORD *)(a1 + 24);
  v8 = v2;
  LODWORD(v2) = *(_DWORD *)(a1 + 36);
  v9 = *(unsigned __int16 *)(a1 + 32);
  v10[0] = v2;
  v10[1] = v3;
  v11 = *((_QWORD *)v1 + 4);
  return sub_1C53AC780((uint64_t *)&v5, (uint64_t *)&v5 + 1, &v6, &v7, &v8, &v9, v10, &v11);
}

_QWORD *sub_1C53ACD10(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C53ACDC0(a1, v7);
  v9 = 0;
  sub_1C53ACBDC((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C53ACDC0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C53ACE78(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C53ACE78(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C53ACBDC((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C53ACF1C(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  unsigned int v11;
  int i;
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;
  unsigned int v16;

  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    v5 = 0;
    result = 0;
    goto LABEL_3;
  }
  v8 = *a1;
  v9 = sub_1C6233D74((uint64_t *)a2, (uint64_t *)(a2 + 8), (int *)(a2 + 24));
  v10 = 0;
  v11 = (v4 - 1) & v9;
  for (i = 1; ; ++i)
  {
    v5 = (uint64_t *)(v8 + 8 * v11);
    v13 = *v5;
    if (*v5 == -8192)
      goto LABEL_10;
    if (v13 == -4096)
      break;
    v14 = (_QWORD *)(v13 - 8 * *(unsigned int *)(v13 + 8));
    if (*(_QWORD *)a2 == *v14
      && *(_QWORD *)(a2 + 8) == v14[1]
      && *(_QWORD *)(a2 + 16) == v14[2]
      && *(_DWORD *)(a2 + 24) == *(_DWORD *)(v13 + 24))
    {
      result = 1;
      goto LABEL_3;
    }
LABEL_10:
    if (v10)
      v15 = 0;
    else
      v15 = v13 == -8192;
    if (v15)
      v10 = (uint64_t *)(v8 + 8 * v11);
    v16 = v11 + i;
    v11 = v16 & (v4 - 1);
  }
  result = 0;
  if (v10)
    v5 = v10;
LABEL_3:
  *a3 = v5;
  return result;
}

_QWORD *sub_1C53AD018(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6234050(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C53AD0D0(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t result;
  uint64_t *v11;
  int v12;
  BOOL v13;
  int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  uint64_t *v17;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = v4 - 1;
    v8 = (v4 - 1) & sub_1C517D118(*(_QWORD **)a2, *(_QWORD *)a2 + 8 * *(_QWORD *)(a2 + 8));
    v9 = (uint64_t *)(v6 + 8 * v8);
    if (sub_1C53AD1C8(a2, *v9))
    {
      result = 1;
    }
    else
    {
      v11 = 0;
      v12 = 1;
      while (*v9 != -4096)
      {
        if (v11)
          v13 = 0;
        else
          v13 = *v9 == -8192;
        if (v13)
          v11 = v9;
        v17 = v11;
        v14 = v12 + 1;
        v8 = (v8 + v12) & v7;
        v9 = (uint64_t *)(v6 + 8 * v8);
        v15 = sub_1C53AD1C8(a2, *v9);
        v11 = v17;
        v16 = v15;
        result = 1;
        v12 = v14;
        if (v16)
          goto LABEL_5;
      }
      result = 0;
      if (v11)
        v9 = v11;
    }
  }
  else
  {
    v9 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v9;
  return result;
}

BOOL sub_1C53AD1C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;

  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
    return 0;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(const void **)(a2 + 24);
  return v4 == (uint64_t)(*(_QWORD *)(a2 + 32) - (_QWORD)v5) >> 3 && memcmp(*(const void **)a1, v5, 8 * v4) == 0;
}

_QWORD *sub_1C53AD224(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62342F4(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C53AD2DC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & (37 * a2);
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -1)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -2;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t sub_1C53AD388(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C53AD4EC(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 40; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if (v10 <= 0xFFFFFFFFFFFFFFFDLL)
      *v8++ = v10;
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C53AD4EC(a1, v14, v8);
}

uint64_t sub_1C53AD4EC(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  uint64_t v10;
  uint64_t *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (void *)(result + 8);
    v9 = 32;
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(void **)(result + 8);
    v9 = 8 * v7;
  }
  result = (uint64_t)memset(v8, 255, v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((unint64_t)*a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v11 = 0;
      result = sub_1C53AD2DC((uint64_t)v5, v10, &v11);
      *v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

_QWORD *sub_1C53AD598(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62346A0(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C53AD650(uint64_t a1, int a2)
{
  uint64_t v3;
  unsigned int **v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(unsigned int ***)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6234D20(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C53AD708(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  unsigned int v9;
  int i;
  uint64_t *v11;
  uint64_t v12;
  uint64_t result;
  BOOL v14;
  unsigned int v15;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = 0;
    v8 = v4 - 1;
    v9 = v8 & sub_1C53AD7FC((_DWORD *)a2, (uint64_t *)(a2 + 8), (uint64_t *)(a2 + 16), (uint64_t *)(a2 + 24), (int *)(a2 + 32), (uint64_t *)(a2 + 40), (uint64_t *)(a2 + 48));
    for (i = 1; ; ++i)
    {
      v11 = (uint64_t *)(v6 + 8 * v9);
      v12 = *v11;
      if (*v11 != -4096 && v12 != -8192)
      {
        if (sub_1C6234DCC(a2, v12))
        {
          result = 1;
          goto LABEL_7;
        }
        v12 = *v11;
      }
      if (v12 == -4096)
        break;
      if (v7)
        v14 = 0;
      else
        v14 = v12 == -8192;
      if (v14)
        v7 = (uint64_t *)(v6 + 8 * v9);
      v15 = v9 + i;
      v9 = v15 & v8;
    }
    result = 0;
    if (v7)
      v11 = v7;
  }
  else
  {
    v11 = 0;
    result = 0;
  }
LABEL_7:
  *a3 = v11;
  return result;
}

unint64_t sub_1C53AD7FC(_DWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, int *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned __int8 v11;
  _QWORD *v12;
  int v14;
  int v15;
  unint64_t v16;
  uint64_t *v19;
  int *v20;
  uint64_t *v22;
  _DWORD *v23;
  _OWORD v24[4];
  _OWORD v25[3];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v28 = *MEMORY[0x1E0C80C00];
  v26 = 0;
  memset(v25, 0, sizeof(v25));
  memset(v24, 0, sizeof(v24));
  v11 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v12 = &unk_1ED7EA000;
  if ((v11 & 1) == 0)
  {
    v22 = a6;
    v23 = a1;
    v20 = a5;
    v19 = a7;
    v14 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v12 = &unk_1ED7EA000;
    v10 = a2;
    a7 = v19;
    v9 = a3;
    a6 = v22;
    v8 = a4;
    a5 = v20;
    v15 = v14;
    a1 = v23;
    if (v15)
    {
      v16 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v16 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v16;
      __cxa_guard_release(&qword_1ED7EAC88);
      v12 = (_QWORD *)&unk_1ED7EA000;
      a6 = v22;
      a1 = v23;
      v10 = a2;
      a7 = v19;
      a5 = v20;
      v9 = a3;
      v8 = a4;
    }
  }
  v27 = v12[400];
  LODWORD(v24[0]) = *a1;
  return sub_1C53AD93C((char *)v24, 0, (_OWORD *)((char *)v24 + 4), (char *)v25, v10, v9, v8, a5, a6, a7);
}

unint64_t sub_1C53AD93C(char *a1, uint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, int *a8, uint64_t *a9, uint64_t *a10)
{
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;

  v18 = a2;
  v15 = sub_1C50FDB34(a1, &v18, a3, (unint64_t)a4, *a5);
  v19 = v18;
  v16 = sub_1C50FDB34(a1, &v19, v15, (unint64_t)a4, *a6);
  return sub_1C53A9FEC(a1, v19, v16, a4, a7, a8, a9, a10);
}

uint64_t sub_1C53AD9E0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C53ADA64((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C53ADB90(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C53ADA64(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t result;
  BOOL v15;
  unsigned int v16;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = sub_1C53ADB24(*a2);
    v8 = v4 - 1;
    v9 = v7 & (v4 - 1);
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (*a2 == *v10)
    {
      result = 1;
    }
    else
    {
      v12 = 0;
      v13 = 1;
      result = 1;
      while (v11 != -4096)
      {
        if (v12)
          v15 = 0;
        else
          v15 = v11 == -8192;
        if (v15)
          v12 = v10;
        v16 = v9 + v13++;
        v9 = v16 & v8;
        v10 = (_QWORD *)(v6 + 8 * (v16 & v8));
        v11 = *v10;
        if (*a2 == *v10)
          goto LABEL_7;
      }
      result = 0;
      if (v12)
        v10 = v12;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_7:
  *a3 = v10;
  return result;
}

unint64_t sub_1C53ADB24(uint64_t a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  int v5;
  __int128 v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(unsigned __int16 *)(a1 + 2);
  v1 = (__int128 *)(a1 - 8 * *(unsigned int *)(a1 + 8));
  v6 = *v1;
  v2 = *((_QWORD *)v1 + 2);
  v7 = *((_QWORD *)v1 + 3);
  v8 = *(_DWORD *)(a1 + 24);
  v3 = *((_QWORD *)v1 + 4);
  v9 = v2;
  v10 = v3;
  return sub_1C53AD7FC(&v5, (uint64_t *)&v6, (uint64_t *)&v6 + 1, &v7, &v8, &v9, &v10);
}

_QWORD *sub_1C53ADB90(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C53ADC40(a1, v7);
  v9 = 0;
  sub_1C53ADA64((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C53ADC40(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6234E50(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C53ADCF8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6235384(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C53ADDB0(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v8;
  uint64_t *v9;
  unsigned int v10;
  const void *v11;
  uint64_t v12;
  int i;
  uint64_t v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  const void *v18;

  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    v5 = 0;
    result = 0;
    goto LABEL_3;
  }
  v8 = *a1;
  v9 = 0;
  v10 = (v4 - 1) & sub_1C6193EA0(*(_QWORD **)a2, *(_QWORD *)a2 + 8 * *(_QWORD *)(a2 + 8));
  v11 = *(const void **)a2;
  v12 = *(_QWORD *)(a2 + 8);
  for (i = 1; ; ++i)
  {
    v5 = (uint64_t *)(v8 + 8 * v10);
    v14 = *v5;
    if (*v5 == -8192)
      goto LABEL_9;
    if (v14 == -4096)
      break;
    if (v12 == *(_DWORD *)(v14 + 32))
    {
      v18 = v11;
      v15 = memcmp(v11, *(const void **)(v14 + 24), 8 * v12);
      v11 = v18;
      if (!v15)
      {
        result = 1;
        goto LABEL_3;
      }
    }
LABEL_9:
    if (v9)
      v16 = 0;
    else
      v16 = v14 == -8192;
    if (v16)
      v9 = (uint64_t *)(v8 + 8 * v10);
    v17 = v10 + i;
    v10 = v17 & (v4 - 1);
  }
  result = 0;
  if (v9)
    v5 = v9;
LABEL_3:
  *a3 = v5;
  return result;
}

_QWORD *sub_1C53ADEB8(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C623562C(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C53ADF70()
{
  __n128 v1;
  int v2;
  char v3;
  char *v4;
  int v5;

  v5 = 1;
  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Enable adding flow sensitive discriminators";
  v1.n128_u64[1] = 43;
  sub_1C6199F14((llvm::cl::Option *)&llvm::EnableFSDiscriminator, "enable-fs-discriminator", &v5, &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::EnableFSDiscriminator, &dword_1C475E000);
}

llvm::DebugLoc *llvm::DebugLoc::DebugLoc(llvm::DebugLoc *this, const llvm::DILocation *a2)
{
  *(_QWORD *)this = a2;
  if (a2)
    llvm::MetadataTracking::track((uint64_t)this, (unsigned __int8 *)a2, 2);
  return this;
}

{
  *(_QWORD *)this = a2;
  if (a2)
    llvm::MetadataTracking::track((uint64_t)this, (unsigned __int8 *)a2, 2);
  return this;
}

llvm::DebugLoc *llvm::DebugLoc::DebugLoc(llvm::DebugLoc *this, const llvm::MDNode *a2)
{
  *(_QWORD *)this = a2;
  if (a2)
    llvm::MetadataTracking::track((uint64_t)this, (unsigned __int8 *)a2, 2);
  return this;
}

{
  *(_QWORD *)this = a2;
  if (a2)
    llvm::MetadataTracking::track((uint64_t)this, (unsigned __int8 *)a2, 2);
  return this;
}

uint64_t llvm::DebugLoc::get(llvm::DebugLoc *this)
{
  return *(_QWORD *)this;
}

uint64_t llvm::DebugLoc::getLine(llvm::DebugLoc *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 4);
}

uint64_t llvm::DebugLoc::getCol(llvm::DebugLoc *this)
{
  return *(unsigned __int16 *)(*(_QWORD *)this + 2);
}

uint64_t llvm::DebugLoc::getScope(llvm::DebugLoc *this)
{
  return *(_QWORD *)(*(_QWORD *)this - 8 * *(unsigned int *)(*(_QWORD *)this + 8));
}

uint64_t llvm::DebugLoc::getInlinedAt(llvm::DebugLoc *this)
{
  if (*(_DWORD *)(*(_QWORD *)this + 8) == 2)
    return *(_QWORD *)(*(_QWORD *)this - 8);
  else
    return 0;
}

uint64_t llvm::DebugLoc::getInlinedAtScope(llvm::DebugLoc *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)this;
  do
  {
    v2 = v1;
    v3 = *(unsigned int *)(v1 + 8);
    if ((_DWORD)v3 != 2)
      break;
    v1 = *(_QWORD *)(v1 - 8);
  }
  while (v1);
  return *(_QWORD *)(v2 - 8 * v3);
}

uint64_t llvm::DebugLoc::setImplicitCode(uint64_t this, int a2)
{
  char v2;

  if (*(_QWORD *)this)
  {
    if (a2)
      v2 = 0x80;
    else
      v2 = 0;
    *(_BYTE *)(*(_QWORD *)this + 1) = v2 & 0x80 | *(_BYTE *)(*(_QWORD *)this + 1) & 0x7F;
  }
  return this;
}

unsigned __int8 *llvm::DebugLoc::get@<X0>(unsigned __int8 *this@<X0>, const llvm::MDNode *a2@<X3>, const llvm::MDNode *a3@<X4>, unsigned int a4@<W1>, uint64_t a5@<X2>, unsigned __int8 **a6@<X8>)
{
  int v6;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;

  v6 = (int)a3;
  if (a5)
  {
    v11 = this;
    v12 = *(_QWORD *)(a5 + 16);
    v13 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFF8);
    if ((v12 & 4) != 0)
      v13 = (uint64_t *)*v13;
    this = (unsigned __int8 *)llvm::DILocation::getImpl(v13, v11, a4, a5, (uint64_t)a2, v6, 0, 1);
    *a6 = this;
    if (this)
      return (unsigned __int8 *)llvm::MetadataTracking::track((uint64_t)a6, this, 2);
  }
  else
  {
    *a6 = 0;
  }
  return this;
}

void llvm::DebugLoc::replaceInlinedAtSubprogram(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, unsigned __int8 **a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *Impl;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[7];

  v22[6] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x600000000;
  v9 = *a1;
  if (!*a1)
  {
    v11 = 0;
LABEL_10:
    v12 = *((_QWORD *)v20 + v11 - 1);
    LODWORD(v21) = v11 - 1;
    v13 = llvm::DILocalScope::cloneScopeForSubprogram(*(llvm::DIScope **)(v12 - 8 * *(unsigned int *)(v12 + 8)), a2, (uint64_t)a3, a4);
    Impl = (unsigned __int8 *)llvm::DILocation::getImpl(a3, *(_DWORD *)(v12 + 4), *(unsigned __int16 *)(v12 + 2), (uint64_t)v13, 0, 0, 0, 1);
    v19 = v12;
    sub_1C53AA4C0(a4, &v19)[1] = Impl;
    goto LABEL_11;
  }
  while (1)
  {
    v18 = v9;
    v19 = 0;
    if (sub_1C47AD1C0(a4, &v18, &v19))
    {
      if (v19 != *(_QWORD *)a4 + 16 * *(unsigned int *)(a4 + 16))
        break;
    }
    v10 = v21;
    if (v21 >= (unint64_t)HIDWORD(v21))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, (uint64_t)v22, v21 + 1, 8);
      v10 = v21;
    }
    *((_QWORD *)v20 + v10) = v9;
    v11 = v21 + 1;
    LODWORD(v21) = v21 + 1;
    if (*(_DWORD *)(v9 + 8) == 2)
    {
      v9 = *(_QWORD *)(v9 - 8);
      if (v9)
        continue;
    }
    goto LABEL_10;
  }
  Impl = *(unsigned __int8 **)(v19 + 8);
  if (!Impl)
  {
    v11 = v21;
    goto LABEL_10;
  }
LABEL_11:
  if ((_DWORD)v21)
  {
    v15 = 8 * v21;
    v16 = (char *)v20 - 8;
    do
    {
      v17 = *(_QWORD *)&v16[v15];
      Impl = (unsigned __int8 *)llvm::DILocation::getImpl(a3, *(_DWORD *)(v17 + 4), *(unsigned __int16 *)(v17 + 2), *(_QWORD *)(v17 - 8 * *(unsigned int *)(v17 + 8)), (uint64_t)Impl, 0, 0, 1);
      v19 = v17;
      sub_1C53AA4C0(a4, &v19)[1] = Impl;
      v15 -= 8;
    }
    while (v15);
  }
  *a5 = Impl;
  if (Impl)
    llvm::MetadataTracking::track((uint64_t)a5, Impl, 2);
  if (v20 != v22)
    free(v20);
}

void llvm::DebugLoc::appendInlinedAt(uint64_t a1@<X0>, unsigned __int8 *Impl@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, unsigned __int8 **a5@<X8>)
{
  uint64_t v7;
  _QWORD *v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[4];

  v18[3] = *MEMORY[0x1E0C80C00];
  v16 = v18;
  v17 = 0x300000000;
  if (*(_DWORD *)(*(_QWORD *)a1 + 8) == 2)
  {
    v7 = *(_QWORD *)(*(_QWORD *)a1 - 8);
    if (v7)
    {
      while (1)
      {
        v15 = v7;
        v10 = sub_1C53AA4C0(a4, &v15);
        v11 = v17;
        if (v10[1])
          break;
        if (v17 >= HIDWORD(v17))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v16, (uint64_t)v18, v17 + 1, 8);
          v11 = v17;
        }
        *((_QWORD *)v16 + v11) = v7;
        v11 = v17 + 1;
        LODWORD(v17) = v17 + 1;
        if (*(_DWORD *)(v7 + 8) == 2)
        {
          v7 = *(_QWORD *)(v7 - 8);
          if (v7)
            continue;
        }
        goto LABEL_10;
      }
      Impl = (unsigned __int8 *)v10[1];
LABEL_10:
      if (v11)
      {
        v12 = 8 * v11;
        v13 = (char *)v16 - 8;
        do
        {
          v14 = *(_QWORD *)&v13[v12];
          Impl = (unsigned __int8 *)llvm::DILocation::getImpl(a3, *(_DWORD *)(v14 + 4), *(unsigned __int16 *)(v14 + 2), *(_QWORD *)(v14 - 8 * *(unsigned int *)(v14 + 8)), (uint64_t)Impl, 0, 1, 1);
          v15 = v14;
          sub_1C53AA4C0(a4, &v15)[1] = Impl;
          v12 -= 8;
        }
        while (v12);
      }
    }
  }
  *a5 = Impl;
  if (Impl)
    llvm::MetadataTracking::track((uint64_t)a5, Impl, 2);
  if (v16 != v18)
    free(v16);
}

const char *sub_1C53AE5A0(uint64_t a1)
{
  uint64_t v1;

  if (*(_BYTE *)a1 != 15)
  {
    a1 = *(_QWORD *)(a1 - 8 * *(unsigned int *)(a1 + 8));
    if (!a1)
      return "";
  }
  v1 = *(_QWORD *)(a1 - 8 * *(unsigned int *)(a1 + 8));
  if (v1)
    return (const char *)(*(_QWORD *)(v1 + 8) + 24);
  else
    return 0;
}

uint64_t sub_1C53AE5F4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

_QWORD *sub_1C53AE64C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E814E3F8;
  v2 = a1 + 19;
  v3 = (_QWORD *)a1[22];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return sub_1C47A80D0(a1);
}

uint64_t llvm::DiagnosticHandler::isAnalysisRemarkEnabled(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t result;

  result = qword_1EF8F7070;
  if (qword_1EF8F7070)
    return llvm::Regex::match(qword_1EF8F7070, a2, a3, 0, 0);
  return result;
}

uint64_t llvm::DiagnosticHandler::isMissedOptRemarkEnabled(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t result;

  result = qword_1EF8F7060;
  if (qword_1EF8F7060)
    return llvm::Regex::match(qword_1EF8F7060, a2, a3, 0, 0);
  return result;
}

uint64_t llvm::DiagnosticHandler::isPassedOptRemarkEnabled(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t result;

  result = qword_1EF8F7050;
  if (qword_1EF8F7050)
    return llvm::Regex::match(qword_1EF8F7050, a2, a3, 0, 0);
  return result;
}

BOOL llvm::DiagnosticHandler::isAnyRemarkEnabled(llvm::DiagnosticHandler *this)
{
  return qword_1EF8F7050 | qword_1EF8F7060 || qword_1EF8F7070 != 0;
}

void sub_1C53AE730()
{
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C53AE744(uint64_t a1, uint64_t a2)
{
  void (*v2)(uint64_t, _QWORD);

  v2 = *(void (**)(uint64_t, _QWORD))(a1 + 16);
  if (v2)
    v2(a2, *(_QWORD *)(a1 + 8));
  return v2 != 0;
}

uint64_t sub_1C53AE77C(uint64_t a1, __int16 a2, int a3, int a4, void *__src, size_t __len)
{
  __int128 *p_dst;
  size_t v11;
  size_t v12;
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t **v17;
  uint64_t *v18;
  char *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  int v24;
  void *__p[2];
  unint64_t v26;
  uint64_t v27[4];
  __int16 v28;
  const char *v29;
  __int16 v30;
  void **v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  uint64_t v35[5];
  uint64_t v36[5];
  __int128 __dst;
  int64_t v38;
  _QWORD v39[3];

  __p[0] = 0;
  __p[1] = 0;
  v26 = 0;
  if (!__src)
  {
    __dst = 0uLL;
    v38 = 0;
    goto LABEL_13;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_32;
  if (__len >= 0x17)
  {
    v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v11 = __len | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v38 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_10;
  }
  HIBYTE(v38) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_10:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  if (SHIBYTE(v26) < 0)
    operator delete(__p[0]);
LABEL_13:
  v26 = v38;
  *(_OWORD *)__p = __dst;
  v13 = SHIBYTE(v38);
  if (v38 >= 0)
    v14 = (void *)(HIBYTE(v26) & 0x7F);
  else
    v14 = __p[1];
  if (v14)
  {
    v17 = *(uint64_t ***)(a1 + 128);
    v18 = (uint64_t *)operator new(0x28uLL);
    v18[1] = 0;
    v18[2] = 0;
    *v18 = (uint64_t)&off_1E814E460;
    if (v13 >= 0)
      v19 = (char *)__p;
    else
      v19 = (char *)__p[0];
    v20 = llvm::Regex::Regex((uint64_t)(v18 + 3), v19, (uint64_t)v14, 0);
    v21 = (std::__shared_weak_count *)v17[1];
    *v17 = (uint64_t *)v20;
    v17[1] = v18;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    memset(v39, 0, sizeof(v39));
    v24 = *((_DWORD *)*v17 + 2);
    if (v24)
    {
      sub_1C5E2A1F8(v24, **v17, (uint64_t)v39);
      v33 = "Invalid regular expression '";
      v34 = 259;
      v32 = 260;
      v31 = __p;
      sub_1C6131AAC((uint64_t *)&v33, (uint64_t *)&v31, (uint64_t)v35);
      v29 = "' in -pass-remarks: ";
      v30 = 259;
      sub_1C6131AAC(v35, (uint64_t *)&v29, (uint64_t)v36);
      v28 = 260;
      v27[0] = (uint64_t)v39;
      sub_1C6131AAC(v36, v27, (uint64_t)&__dst);
      llvm::report_fatal_error((uint64_t)&__dst, 0);
    }
  }
  *(_WORD *)(a1 + 12) = a2;
  v15 = *(_QWORD *)(a1 + 176);
  if (!v15)
  {
    sub_1C485C2F0();
LABEL_32:
    abort();
  }
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v15 + 48))(v15, __p);
  if (SHIBYTE(v26) < 0)
    operator delete(__p[0]);
  return 0;
}

uint64_t sub_1C53AE9CC()
{
  return 2;
}

void sub_1C53AE9D4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E814E3F8;
  v2 = a1 + 19;
  v3 = (_QWORD *)a1[22];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      sub_1C47A80D0(a1);
      JUMPOUT(0x1CAA32FC0);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
  goto LABEL_6;
}

uint64_t sub_1C53AEA44(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 144, a1);
}

llvm::raw_ostream *sub_1C53AEA50(uint64_t a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::basic_parser_impl *)(a1 + 144), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C53AEA60(llvm::raw_ostream *result, int a2, int a3)
{
  if (a3)
    return llvm::cl::basic_parser_impl::printOptionNoValue((llvm::raw_ostream *)((char *)result + 144), result, a2);
  return result;
}

void sub_1C53AEA7C(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD **)(a1 + 128);
  v2 = (std::__shared_weak_count *)v1[1];
  *v1 = 0;
  v1[1] = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t sub_1C53AEAE0()
{
  return 0;
}

void sub_1C53AEAEC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C53AEB00()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E814E4B8;
  return result;
}

void sub_1C53AEB24(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E814E4B8;
}

uint64_t sub_1C53AEB40(uint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4, char a5, _QWORD *a6, _WORD *a7, _WORD *a8)
{
  uint64_t v10;
  __int16 v11;
  __int16 v12;
  llvm::raw_ostream *v13;
  const char *v14;
  __int16 v15;

  v10 = result;
  *(_QWORD *)(result + 48) = a2;
  *(_QWORD *)(result + 56) = a3;
  *(_OWORD *)(result + 32) = *a4;
  v11 = *(_WORD *)(result + 10) & 0xFF9F | (32 * (a5 & 3));
  *(_WORD *)(result + 10) = v11;
  if (*(_QWORD *)(result + 128))
  {
    v14 = "cl::location(x) specified more than once!";
    v15 = 259;
    v13 = (llvm::raw_ostream *)llvm::errs((llvm *)result);
    result = llvm::cl::Option::error((_QWORD *)v10, (llvm::Twine *)&v14, 0, 0, v13);
    v11 = *(_WORD *)(v10 + 10);
  }
  else
  {
    *(_QWORD *)(result + 128) = *a6;
  }
  v12 = v11 & 0xFFE7 | (8 * (*a7 & 3));
  *(_WORD *)(v10 + 10) = v12;
  *(_WORD *)(v10 + 10) = v12 & 0xFFF8 | *a8 & 7;
  return result;
}

uint64_t sub_1C53AEBEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v4;
  int v5;
  uint64_t *v6;
  __int128 v7;

  __cxa_atexit((void (*)(void *))sub_1C53AE5F4, &qword_1EF8F7050, &dword_1C475E000);
  __cxa_atexit((void (*)(void *))sub_1C53AE5F4, &qword_1EF8F7060, &dword_1C475E000);
  __cxa_atexit((void (*)(void *))sub_1C53AE5F4, &qword_1EF8F7070, &dword_1C475E000);
  *(_QWORD *)&v7 = "Enable optimization remarks from passes whose name match the given regular expression";
  *((_QWORD *)&v7 + 1) = 85;
  v6 = &qword_1EF8F7050;
  v4 = 1;
  v5 = 2;
  v0 = sub_1C47AD050((uint64_t)qword_1ED804508, 0, 0);
  qword_1ED804588 = 0;
  unk_1ED804590 = &off_1E814E498;
  qword_1ED804508[0] = (uint64_t)&off_1E814E3F8;
  qword_1ED804598 = (uint64_t)&unk_1E819E970;
  qword_1ED8045A0 = (uint64_t)&off_1E814E4B8;
  qword_1ED8045B8 = (uint64_t)&qword_1ED8045A0;
  llvm::cl::Option::setArgStr(v0, "pass-remarks", 0xCuLL);
  sub_1C53AEB40((uint64_t)qword_1ED804508, (uint64_t)"pattern", 7, &v7, 1, &v6, &v5, &v4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED804508);
  __cxa_atexit((void (*)(void *))sub_1C53AE64C, qword_1ED804508, &dword_1C475E000);
  *(_QWORD *)&v7 = "Enable missed optimization remarks from passes whose name match the given regular expression";
  *((_QWORD *)&v7 + 1) = 92;
  v6 = &qword_1EF8F7060;
  v4 = 1;
  v5 = 2;
  v1 = sub_1C47AD050((uint64_t)qword_1ED8045C0, 0, 0);
  qword_1ED804640 = 0;
  unk_1ED804648 = &off_1E814E498;
  qword_1ED8045C0[0] = (uint64_t)&off_1E814E3F8;
  qword_1ED804650 = (uint64_t)&unk_1E819E970;
  qword_1ED804658[0] = &off_1E814E4B8;
  qword_1ED804670 = (uint64_t)qword_1ED804658;
  llvm::cl::Option::setArgStr(v1, "pass-remarks-missed", 0x13uLL);
  sub_1C53AEB40((uint64_t)qword_1ED8045C0, (uint64_t)"pattern", 7, &v7, 1, &v6, &v5, &v4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED8045C0);
  __cxa_atexit((void (*)(void *))sub_1C53AE64C, qword_1ED8045C0, &dword_1C475E000);
  *(_QWORD *)&v7 = "Enable optimization analysis remarks from passes whose name match the given regular expression";
  *((_QWORD *)&v7 + 1) = 94;
  v6 = &qword_1EF8F7070;
  v4 = 1;
  v5 = 2;
  v2 = sub_1C47AD050((uint64_t)qword_1ED804678, 0, 0);
  qword_1ED8046F8 = 0;
  unk_1ED804700 = &off_1E814E498;
  qword_1ED804678[0] = (uint64_t)&off_1E814E3F8;
  qword_1ED804708 = (uint64_t)&unk_1E819E970;
  qword_1ED804710 = (uint64_t)&off_1E814E4B8;
  qword_1ED804728 = (uint64_t)&qword_1ED804710;
  llvm::cl::Option::setArgStr(v2, "pass-remarks-analysis", 0x15uLL);
  sub_1C53AEB40((uint64_t)qword_1ED804678, (uint64_t)"pattern", 7, &v7, 1, &v6, &v5, &v4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED804678);
  return __cxa_atexit((void (*)(void *))sub_1C53AE64C, qword_1ED804678, &dword_1C475E000);
}

uint64_t llvm::getNextAvailablePluginDiagnosticKind(llvm *this)
{
  unsigned int v1;
  uint64_t result;

  do
  {
    v1 = __ldaxr((unsigned int *)&unk_1ED7EAEB8);
    result = v1 + 1;
  }
  while (__stlxr(result, (unsigned int *)&unk_1ED7EAEB8));
  return result;
}

uint64_t llvm::DiagnosticInfoInlineAsm::DiagnosticInfoInlineAsm(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t MetadataImpl;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = a4;
  *(_QWORD *)a1 = &off_1E814E960;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a2;
  if (*(_QWORD *)(a2 + 48) || (*(_BYTE *)(a2 + 23) & 0x20) != 0)
  {
    MetadataImpl = llvm::Instruction::getMetadataImpl((uint64_t ***)a2, "srcloc", 6uLL);
    if (MetadataImpl)
    {
      v6 = *(unsigned int *)(MetadataImpl + 8);
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)(MetadataImpl - 8 * v6);
        if (*(_BYTE *)v7 == 1)
        {
          v8 = *(_QWORD *)(v7 + 128);
          if (*(_BYTE *)(v8 + 16) == 16)
          {
            v9 = (_QWORD *)(v8 + 24);
            if (*(_DWORD *)(v8 + 32) >= 0x41u)
              v9 = (_QWORD *)*v9;
            *(_QWORD *)(a1 + 16) = *v9;
          }
        }
      }
    }
  }
  return a1;
}

uint64_t llvm::DiagnosticLocation::DiagnosticLocation(uint64_t this, const llvm::DebugLoc *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;

  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  v2 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v3 = *(_QWORD *)(v2 - 8 * *(unsigned int *)(v2 + 8));
    if (*(_BYTE *)v3 != 15)
      v3 = *(_QWORD *)(v3 - 8 * *(unsigned int *)(v3 + 8));
    *(_QWORD *)this = v3;
    v4 = *(_DWORD *)(v2 + 4);
    v5 = *(unsigned __int16 *)(v2 + 2);
    *(_DWORD *)(this + 8) = v4;
    *(_DWORD *)(this + 12) = v5;
  }
  return this;
}

_QWORD *llvm::DiagnosticLocation::DiagnosticLocation(_QWORD *result, uint64_t a2)
{
  uint64_t v2;

  *result = 0;
  result[1] = 0;
  if (a2)
  {
    v2 = a2;
    if (*(_BYTE *)a2 != 15)
      v2 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
    *result = v2;
    *((_DWORD *)result + 2) = *(_DWORD *)(a2 + 28);
  }
  return result;
}

{
  uint64_t v2;

  *result = 0;
  result[1] = 0;
  if (a2)
  {
    v2 = a2;
    if (*(_BYTE *)a2 != 15)
      v2 = *(_QWORD *)(a2 - 8 * *(unsigned int *)(a2 + 8));
    *result = v2;
    *((_DWORD *)result + 2) = *(_DWORD *)(a2 + 28);
  }
  return result;
}

void llvm::DiagnosticLocation::getAbsolutePath(llvm::DiagnosticLocation *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  size_t v6;
  const char *v7;
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  unsigned __int8 *v17;
  unint64_t v18;
  size_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void **v24;
  __int16 v25;
  _QWORD *v26;
  __int16 v27;
  _QWORD *v28[4];
  __int16 v29;
  _QWORD *v30[4];
  __int16 v31;
  char *v32;
  __int128 v33;
  _WORD v34[64];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)this - 8 * *(unsigned int *)(*(_QWORD *)this + 8));
  if (v4)
  {
    v5 = *(_QWORD **)(v4 + 8);
    v8 = *v5;
    v7 = (const char *)(v5 + 3);
    v6 = v8;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v34[4] = 261;
  v32 = (char *)v7;
  *(_QWORD *)&v33 = v6;
  if (llvm::sys::path::is_absolute((const char **)&v32, 0))
  {
    if (v6 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v6 >= 0x17)
      {
        v13 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v6 | 7) != 0x17)
          v13 = v6 | 7;
        v14 = v13 + 1;
        v15 = operator new(v13 + 1);
        a2[1] = v6;
        a2[2] = v14 | 0x8000000000000000;
        *a2 = v15;
        a2 = v15;
      }
      else
      {
        *((_BYTE *)a2 + 23) = v6;
        if (!v6)
          goto LABEL_15;
      }
      memmove(a2, v7, v6);
LABEL_15:
      *((_BYTE *)a2 + v6) = 0;
      return;
    }
LABEL_31:
    abort();
  }
  v32 = (char *)v34;
  v33 = xmmword_1C85F20B0;
  v9 = *(_QWORD **)(*(_QWORD *)this - 8 * *(unsigned int *)(*(_QWORD *)this + 8) + 8);
  if (v9)
  {
    v10 = (_QWORD *)v9[1];
    v12 = (_QWORD *)*v10;
    v11 = v10 + 3;
    v9 = v12;
  }
  else
  {
    v11 = 0;
  }
  v31 = 261;
  v30[0] = v11;
  v30[1] = v9;
  v29 = 261;
  v28[0] = v7;
  v28[1] = (_QWORD *)v6;
  v27 = 257;
  v25 = 257;
  llvm::sys::path::append(&v32, 0, v30, v28, &v26, &v24);
  v16 = v32;
  v17 = llvm::sys::path::remove_leading_dotslash((unsigned __int8 *)v32, v33, 0);
  if (!v17)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    goto LABEL_28;
  }
  v19 = v18;
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_31;
  v20 = v17;
  if (v18 >= 0x17)
  {
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v23 = operator new(v21 + 1);
    a2[1] = v19;
    a2[2] = v22 | 0x8000000000000000;
    *a2 = v23;
    a2 = v23;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v18;
    if (!v18)
      goto LABEL_27;
  }
  memmove(a2, v20, v19);
LABEL_27:
  *((_BYTE *)a2 + v19) = 0;
  v16 = v32;
LABEL_28:
  if (v16 != (char *)v34)
    free(v16);
}

uint64_t llvm::DiagnosticInfoOptimizationBase::Argument::Argument(uint64_t a1, const void *a2, size_t a3, _BYTE *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  _BYTE *v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _BYTE *v38;
  int v39;
  int v40;
  const char *OpcodeName;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  int v45;
  _BOOL8 v46;
  uint64_t *v47;
  size_t v48;
  __int128 *p_dst;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v53;
  uint64_t v54;
  __int128 __dst;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  int v61;
  uint64_t v62;

  if (a3 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_81;
  if (a3 >= 0x17)
  {
    v9 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v9 = a3 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *(_QWORD *)(a1 + 8) = a3;
    *(_QWORD *)(a1 + 16) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
  }
  else
  {
    *(_BYTE *)(a1 + 23) = a3;
    v8 = (void *)a1;
    if (!a3)
      goto LABEL_9;
  }
  memmove(v8, a2, a3);
LABEL_9:
  *((_BYTE *)v8 + a3) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  v11 = (void **)(a1 + 24);
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  v12 = a4 >> 4;
  if (!a4 || a4[16])
  {
    if (!a4 || a4[16] < 0x1Cu)
      goto LABEL_39;
    v27 = *((_QWORD *)a4 + 6);
    if (v27)
    {
      v28 = *(_QWORD *)(v27 - 8 * *(unsigned int *)(v27 + 8));
      if (*(_BYTE *)v28 != 15)
        v28 = *(_QWORD *)(v28 - 8 * *(unsigned int *)(v28 + 8));
      v29 = *(_DWORD *)(v27 + 4);
      LODWORD(v27) = *(unsigned __int16 *)(v27 + 2);
    }
    else
    {
      v28 = 0;
      v29 = 0;
    }
    goto LABEL_38;
  }
  if ((a4[23] & 0x20) == 0)
    goto LABEL_39;
  v13 = ***(_QWORD ***)a4;
  *(_QWORD *)&__dst = a4;
  v14 = *(_DWORD *)(v13 + 2496);
  if (!v14)
  {
    v53 = 0;
LABEL_76:
    v18 = sub_1C541AB24(v13 + 2480, (uint64_t)&__dst, (uint64_t *)&__dst, v53);
    v54 = __dst;
    v18[3] = 0;
    v18[4] = 0;
    *v18 = v54;
    v18[1] = v18 + 3;
    v18[2] = 0x100000000;
    goto LABEL_22;
  }
  v15 = *(_QWORD *)(v13 + 2480);
  v16 = v14 - 1;
  v17 = v16 & (v12 ^ (a4 >> 9));
  v18 = (_QWORD *)(v15 + 40 * v17);
  v19 = (_BYTE *)*v18;
  if ((_BYTE *)*v18 != a4)
  {
    v20 = 0;
    v21 = 1;
    while (v19 != (_BYTE *)-4096)
    {
      if (v20)
        v22 = 0;
      else
        v22 = v19 == (_BYTE *)-8192;
      if (v22)
        v20 = v18;
      v23 = v17 + v21++;
      v17 = v23 & v16;
      v18 = (_QWORD *)(v15 + 40 * v17);
      v19 = (_BYTE *)*v18;
      if ((_BYTE *)*v18 == a4)
        goto LABEL_22;
    }
    if (v20)
      v53 = v20;
    else
      v53 = v18;
    goto LABEL_76;
  }
LABEL_22:
  v24 = *((unsigned int *)v18 + 4);
  if ((_DWORD)v24)
  {
    v25 = (_QWORD *)(v18[1] + 8);
    v26 = 16 * v24;
    while (*((_DWORD *)v25 - 2))
    {
      v25 += 2;
      v26 -= 16;
      if (!v26)
        goto LABEL_39;
    }
    v30 = *v25;
    if (*v25)
    {
      v28 = *v25;
      if (*(_BYTE *)v30 != 15)
        v28 = *(_QWORD *)(v30 - 8 * *(unsigned int *)(v30 + 8));
      LODWORD(v27) = 0;
      v29 = *(_DWORD *)(v30 + 28);
LABEL_38:
      *(_QWORD *)(a1 + 48) = v28;
      *(_DWORD *)(a1 + 56) = v29;
      *(_DWORD *)(a1 + 60) = v27;
    }
  }
LABEL_39:
  v31 = a4[16];
  if (v31 >= 4 && v31 != 21)
  {
    if (v31 <= 0x14)
    {
      DWORD2(__dst) = 0;
      v59 = 0;
      v60 = 0;
      *(_QWORD *)&__dst = &unk_1E81A7208;
      v62 = a1 + 24;
      v61 = 0;
      v57 = 0;
      v58 = 0;
      v56 = 0;
      llvm::Value::printAsOperand((llvm::Value *)a4, (llvm::raw_ostream *)&__dst, 0, 0);
      *(_QWORD *)&__dst = off_1E81A6E70;
      if (v61 == 1 && v56)
        MEMORY[0x1CAA32F9C](v56, 0x1000C8077774924);
    }
    else if (a4 && v31 >= 0x1C)
    {
      OpcodeName = llvm::Instruction::getOpcodeName((llvm::Instruction *)(v31 - 28));
      MEMORY[0x1CAA32ABC](a1 + 24, OpcodeName);
    }
    return a1;
  }
  if ((a4[23] & 0x10) == 0)
    goto LABEL_64;
  v33 = ***(_QWORD ***)a4;
  v34 = *(_QWORD *)(v33 + 152);
  v35 = *(unsigned int *)(v33 + 168);
  if ((_DWORD)v35)
  {
    LODWORD(v36) = (v35 - 1) & (v12 ^ (a4 >> 9));
    v37 = (_QWORD *)(v34 + 16 * v36);
    v38 = (_BYTE *)*v37;
    if ((_BYTE *)*v37 == a4)
      goto LABEL_56;
    v39 = 1;
    while (v38 != (_BYTE *)-4096)
    {
      v40 = v36 + v39++;
      v36 = v40 & (v35 - 1);
      v38 = *(_BYTE **)(v34 + 16 * v36);
      if (v38 == a4)
      {
        v37 = (_QWORD *)(v34 + 16 * v36);
        goto LABEL_56;
      }
    }
  }
  v37 = (_QWORD *)(v34 + 16 * v35);
LABEL_56:
  v42 = (uint64_t *)v37[1];
  v43 = *v42;
  if (!*v42)
  {
LABEL_64:
    v48 = 0;
    HIBYTE(v56) = 0;
    p_dst = &__dst;
    goto LABEL_69;
  }
  v45 = *((unsigned __int8 *)v42 + 16);
  v44 = v42 + 2;
  v46 = v45 == 1;
  if (v45 == 1)
    v47 = (uint64_t *)((char *)v44 + 1);
  else
    v47 = v44;
  v48 = v43 - v46;
  if ((unint64_t)(v43 - v46) > 0x7FFFFFFFFFFFFFF7)
LABEL_81:
    abort();
  if (v48 >= 0x17)
  {
    v50 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v48 | 7) != 0x17)
      v50 = v48 | 7;
    v51 = v50 + 1;
    p_dst = (__int128 *)operator new(v50 + 1);
    *((_QWORD *)&__dst + 1) = v48;
    v56 = v51 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v56) = v43 - v46;
    p_dst = &__dst;
    if (!v48)
      goto LABEL_69;
  }
  memmove(p_dst, v47, v48);
LABEL_69:
  *((_BYTE *)p_dst + v48) = 0;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v11);
  *(_OWORD *)v11 = __dst;
  *(_QWORD *)(a1 + 40) = v56;
  return a1;
}

uint64_t llvm::DiagnosticInfoOptimizationBase::Argument::Argument(uint64_t a1, const void *a2, size_t a3, llvm::Type *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void (**v12)(llvm::raw_ostream *__hidden);
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a3 >= 0x17)
  {
    v9 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v9 = a3 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *(_QWORD *)(a1 + 8) = a3;
    *(_QWORD *)(a1 + 16) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
  }
  else
  {
    *(_BYTE *)(a1 + 23) = a3;
    v8 = (void *)a1;
    if (!a3)
      goto LABEL_9;
  }
  memmove(v8, a2, a3);
LABEL_9:
  *((_BYTE *)v8 + a3) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  v13 = 0;
  v17 = 0;
  v18 = 0;
  v12 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v20 = a1 + 24;
  v19 = 0;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  llvm::Type::print(a4, (llvm::raw_ostream *)&v12, 0, 0);
  v12 = off_1E81A6E70;
  if (v19 == 1 && v14)
    MEMORY[0x1CAA32F9C](v14, 0x1000C8077774924);
  return a1;
}

_QWORD *llvm::DiagnosticInfoOptimizationBase::Argument::Argument(_QWORD *__dst, void *__src, size_t __len, void *a4, size_t a5)
{
  void *v10;
  size_t v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_21;
  if (__len >= 0x17)
  {
    v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v11 = __len | 7;
    v12 = v11 + 1;
    v10 = operator new(v11 + 1);
    __dst[1] = __len;
    __dst[2] = v12 | 0x8000000000000000;
    *__dst = v10;
    goto LABEL_8;
  }
  *((_BYTE *)__dst + 23) = __len;
  v10 = __dst;
  if (__len)
LABEL_8:
    memmove(v10, __src, __len);
  *((_BYTE *)v10 + __len) = 0;
  v13 = __dst + 3;
  if (a4)
  {
    if (a5 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (a5 >= 0x17)
      {
        v14 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a5 | 7) != 0x17)
          v14 = a5 | 7;
        v15 = v14 + 1;
        v13 = operator new(v14 + 1);
        __dst[4] = a5;
        __dst[5] = v15 | 0x8000000000000000;
        __dst[3] = v13;
      }
      else
      {
        *((_BYTE *)__dst + 47) = a5;
        if (!a5)
          goto LABEL_19;
      }
      memmove(v13, a4, a5);
LABEL_19:
      *((_BYTE *)v13 + a5) = 0;
      goto LABEL_20;
    }
LABEL_21:
    abort();
  }
  *v13 = 0;
  __dst[4] = 0;
  __dst[5] = 0;
LABEL_20:
  __dst[6] = 0;
  __dst[7] = 0;
  return __dst;
}

_QWORD *llvm::DiagnosticInfoOptimizationBase::Argument::Argument(_QWORD *a1, const void *a2, size_t a3, int a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  _BYTE v18[20];
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a3 >= 0x17)
  {
    v9 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v9 = a3 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    a1[1] = a3;
    a1[2] = v10 | 0x8000000000000000;
    *a1 = v8;
    goto LABEL_8;
  }
  *((_BYTE *)a1 + 23) = a3;
  v8 = a1;
  if (a3)
LABEL_8:
    memmove(v8, a2, a3);
  *((_BYTE *)v8 + a3) = 0;
  v11 = a4;
  if (a4 < 0)
  {
    v14 = 0;
    v15 = -(uint64_t)a4;
    do
    {
      *(&v19 + v14--) = (v15 % 0xA) | 0x30;
      v13 = v15 > 9;
      v15 /= 0xAuLL;
    }
    while (v13);
    v18[v14 + 20] = 45;
    v12 = &v18[v14 + 20];
    v16 = (char *)(1 - v14);
  }
  else
  {
    if (a4)
    {
      v12 = (char *)&v20;
      do
      {
        *--v12 = (v11 % 0xA) | 0x30;
        v13 = v11 > 9;
        v11 /= 0xAuLL;
      }
      while (v13);
    }
    else
    {
      v12 = &v19;
      v19 = 48;
    }
    v16 = (char *)((char *)&v20 - v12);
  }
  sub_1C4E61270(a1 + 3, v12, (char *)&v20, (unint64_t)v16);
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  _BYTE v18[20];
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a3 >= 0x17)
  {
    v9 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v9 = a3 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    a1[1] = a3;
    a1[2] = v10 | 0x8000000000000000;
    *a1 = v8;
    goto LABEL_8;
  }
  *((_BYTE *)a1 + 23) = a3;
  v8 = a1;
  if (a3)
LABEL_8:
    memmove(v8, a2, a3);
  *((_BYTE *)v8 + a3) = 0;
  v11 = a4;
  if (a4 < 0)
  {
    v14 = 0;
    v15 = -(uint64_t)a4;
    do
    {
      *(&v19 + v14--) = (v15 % 0xA) | 0x30;
      v13 = v15 > 9;
      v15 /= 0xAuLL;
    }
    while (v13);
    v18[v14 + 20] = 45;
    v12 = &v18[v14 + 20];
    v16 = (char *)(1 - v14);
  }
  else
  {
    if (a4)
    {
      v12 = (char *)&v20;
      do
      {
        *--v12 = (v11 % 0xA) | 0x30;
        v13 = v11 > 9;
        v11 /= 0xAuLL;
      }
      while (v13);
    }
    else
    {
      v12 = &v19;
      v19 = 48;
    }
    v16 = (char *)((char *)&v20 - v12);
  }
  sub_1C4E61270(a1 + 3, v12, (char *)&v20, (unint64_t)v16);
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

_QWORD *sub_1C53AFA6C@<X0>(unint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  _BYTE v10[20];
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if ((a1 & 0x8000000000000000) != 0)
  {
    v6 = 0;
    v7 = -(uint64_t)a1;
    do
    {
      *(&v11 + v6--) = (v7 % 0xA) | 0x30;
      v5 = v7 > 9;
      v7 /= 0xAuLL;
    }
    while (v5);
    v10[v6 + 20] = 45;
    v4 = &v10[v6 + 20];
    v8 = (char *)(1 - v6);
  }
  else
  {
    if (a1)
    {
      v4 = (char *)&v12;
      do
      {
        *--v4 = (a1 % 0xA) | 0x30;
        v5 = a1 > 9;
        a1 /= 0xAuLL;
      }
      while (v5);
    }
    else
    {
      v4 = &v11;
      v11 = 48;
    }
    v8 = (char *)((char *)&v12 - v4);
  }
  return sub_1C4E61270(a2, v4, (char *)&v12, (unint64_t)v8);
}

_QWORD *llvm::DiagnosticInfoOptimizationBase::Argument::Argument(_QWORD *a1, const void *a2, size_t a3, float a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  float v11;

  v11 = a4;
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a3 >= 0x17)
  {
    v8 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v8 = a3 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    a1[1] = a3;
    a1[2] = v9 | 0x8000000000000000;
    *a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = a3;
    v7 = a1;
    if (!a3)
      goto LABEL_9;
  }
  memmove(v7, a2, a3);
LABEL_9:
  *((_BYTE *)v7 + a3) = 0;
  sub_1C53AFDD0(&v11, (uint64_t)(a1 + 3));
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

void sub_1C53AFDD0(float *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  void (**v4)(llvm::raw_ostream *__hidden);
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  void **v12;
  void *v13[2];
  uint64_t v14;

  v13[0] = 0;
  v13[1] = 0;
  v14 = 0;
  v5 = 0;
  v9 = 0;
  v10 = 0;
  v4 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v12 = v13;
  v11 = 0;
  v7 = 0;
  v8 = 0;
  v6 = 0;
  llvm::write_double((llvm::raw_ostream *)&v4, 0, 0, 0, *a1);
  if (*((char *)v12 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)a2, *v12, (unint64_t)v12[1]);
  }
  else
  {
    v3 = *(_OWORD *)v12;
    *(_QWORD *)(a2 + 16) = v12[2];
    *(_OWORD *)a2 = v3;
  }
  v4 = off_1E81A6E70;
  if (v11 == 1 && v6)
    MEMORY[0x1CAA32F9C](v6, 0x1000C8077774924);
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
}

_QWORD *llvm::DiagnosticInfoOptimizationBase::Argument::Argument(_QWORD *a1, const void *a2, size_t a3, unint64_t a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  _BYTE v17[20];
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a3 >= 0x17)
  {
    v9 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v9 = a3 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    a1[1] = a3;
    a1[2] = v10 | 0x8000000000000000;
    *a1 = v8;
    goto LABEL_8;
  }
  *((_BYTE *)a1 + 23) = a3;
  v8 = a1;
  if (a3)
LABEL_8:
    memmove(v8, a2, a3);
  *((_BYTE *)v8 + a3) = 0;
  if ((a4 & 0x8000000000000000) != 0)
  {
    v13 = 0;
    v14 = -(uint64_t)a4;
    do
    {
      *(&v18 + v13--) = (v14 % 0xA) | 0x30;
      v12 = v14 > 9;
      v14 /= 0xAuLL;
    }
    while (v12);
    v17[v13 + 20] = 45;
    v11 = &v17[v13 + 20];
    v15 = (char *)(1 - v13);
  }
  else
  {
    if (a4)
    {
      v11 = (char *)&v19;
      do
      {
        *--v11 = (a4 % 0xA) | 0x30;
        v12 = a4 > 9;
        a4 /= 0xAuLL;
      }
      while (v12);
    }
    else
    {
      v11 = &v18;
      v18 = 48;
    }
    v15 = (char *)((char *)&v19 - v11);
  }
  sub_1C4E61270(a1 + 3, v11, (char *)&v19, (unint64_t)v15);
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  _BYTE v17[20];
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a3 >= 0x17)
  {
    v9 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v9 = a3 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    a1[1] = a3;
    a1[2] = v10 | 0x8000000000000000;
    *a1 = v8;
    goto LABEL_8;
  }
  *((_BYTE *)a1 + 23) = a3;
  v8 = a1;
  if (a3)
LABEL_8:
    memmove(v8, a2, a3);
  *((_BYTE *)v8 + a3) = 0;
  if ((a4 & 0x8000000000000000) != 0)
  {
    v13 = 0;
    v14 = -(uint64_t)a4;
    do
    {
      *(&v18 + v13--) = (v14 % 0xA) | 0x30;
      v12 = v14 > 9;
      v14 /= 0xAuLL;
    }
    while (v12);
    v17[v13 + 20] = 45;
    v11 = &v17[v13 + 20];
    v15 = (char *)(1 - v13);
  }
  else
  {
    if (a4)
    {
      v11 = (char *)&v19;
      do
      {
        *--v11 = (a4 % 0xA) | 0x30;
        v12 = a4 > 9;
        a4 /= 0xAuLL;
      }
      while (v12);
    }
    else
    {
      v11 = &v18;
      v18 = 48;
    }
    v15 = (char *)((char *)&v19 - v11);
  }
  sub_1C4E61270(a1 + 3, v11, (char *)&v19, (unint64_t)v15);
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  _BYTE v17[20];
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a3 >= 0x17)
  {
    v9 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v9 = a3 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    a1[1] = a3;
    a1[2] = v10 | 0x8000000000000000;
    *a1 = v8;
    goto LABEL_8;
  }
  *((_BYTE *)a1 + 23) = a3;
  v8 = a1;
  if (a3)
LABEL_8:
    memmove(v8, a2, a3);
  *((_BYTE *)v8 + a3) = 0;
  if ((a4 & 0x8000000000000000) != 0)
  {
    v13 = 0;
    v14 = -(uint64_t)a4;
    do
    {
      *(&v18 + v13--) = (v14 % 0xA) | 0x30;
      v12 = v14 > 9;
      v14 /= 0xAuLL;
    }
    while (v12);
    v17[v13 + 20] = 45;
    v11 = &v17[v13 + 20];
    v15 = (char *)(1 - v13);
  }
  else
  {
    if (a4)
    {
      v11 = (char *)&v19;
      do
      {
        *--v11 = (a4 % 0xA) | 0x30;
        v12 = a4 > 9;
        a4 /= 0xAuLL;
      }
      while (v12);
    }
    else
    {
      v11 = &v18;
      v18 = 48;
    }
    v15 = (char *)((char *)&v19 - v11);
  }
  sub_1C4E61270(a1 + 3, v11, (char *)&v19, (unint64_t)v15);
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

char *llvm::DiagnosticInfoOptimizationBase::Argument::Argument(char *__dst, void *__src, size_t __len, unint64_t a4)
{
  void *v8;
  size_t v9;
  size_t v10;
  void (**v12)(llvm::raw_ostream *__hidden);
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  char *v20;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v9 = __len | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *((_QWORD *)__dst + 1) = __len;
    *((_QWORD *)__dst + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)__dst = v8;
    goto LABEL_8;
  }
  __dst[23] = __len;
  v8 = __dst;
  if (__len)
LABEL_8:
    memmove(v8, __src, __len);
  *((_BYTE *)v8 + __len) = 0;
  *(_OWORD *)(__dst + 24) = 0u;
  *((_QWORD *)__dst + 7) = 0;
  *(_OWORD *)(__dst + 40) = 0u;
  v13 = 0;
  v17 = 0;
  v18 = 0;
  v12 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v20 = __dst + 24;
  v19 = 0;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  if (HIDWORD(a4) == 1)
    llvm::raw_ostream::write((llvm::raw_ostream *)&v12, "vscale x ", 9uLL);
  sub_1C5E21910((llvm::raw_ostream *)&v12, a4, 0, 0, 0);
  v12 = off_1E81A6E70;
  if (v19 == 1 && v14)
    MEMORY[0x1CAA32F9C](v14, 0x1000C8077774924);
  return __dst;
}

uint64_t llvm::DiagnosticInfoOptimizationBase::Argument::Argument(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void (**v12)(llvm::raw_ostream *__hidden);
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD v21[2];

  v21[0] = a4;
  v21[1] = a5;
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a3 >= 0x17)
  {
    v9 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v9 = a3 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *(_QWORD *)(a1 + 8) = a3;
    *(_QWORD *)(a1 + 16) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
  }
  else
  {
    *(_BYTE *)(a1 + 23) = a3;
    v8 = (void *)a1;
    if (!a3)
      goto LABEL_9;
  }
  memmove(v8, a2, a3);
LABEL_9:
  *((_BYTE *)v8 + a3) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  v13 = 0;
  v17 = 0;
  v18 = 0;
  v12 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v20 = a1 + 24;
  v19 = 0;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  llvm::InstructionCost::print((llvm::InstructionCost *)v21, (llvm::raw_ostream *)&v12);
  v12 = off_1E81A6E70;
  if (v19 == 1 && v14)
    MEMORY[0x1CAA32F9C](v14, 0x1000C8077774924);
  return a1;
}

uint64_t llvm::DiagnosticInfoOptimizationBase::Argument::Argument(uint64_t a1, const void *a2, size_t a3, const llvm::DebugLoc *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[4];
  __int16 v22;
  _QWORD v23[4];
  __int16 v24;
  _QWORD v25[4];
  __int16 v26;
  _QWORD v27[4];
  __int16 v28;
  __int128 v29;
  uint64_t v30;

  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a3 >= 0x17)
  {
    v9 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v9 = a3 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *(_QWORD *)(a1 + 8) = a3;
    *(_QWORD *)(a1 + 16) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
    goto LABEL_8;
  }
  *(_BYTE *)(a1 + 23) = a3;
  v8 = (void *)a1;
  if (a3)
LABEL_8:
    memmove(v8, a2, a3);
  *((_BYTE *)v8 + a3) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v11 = (void **)(a1 + 24);
  *(_QWORD *)(a1 + 40) = 0;
  llvm::DiagnosticLocation::DiagnosticLocation(a1 + 48, a4);
  v12 = *(_QWORD *)a4;
  if (*(_QWORD *)a4)
  {
    v13 = *(_QWORD *)(v12 - 8 * *(unsigned int *)(v12 + 8));
    if (*(_BYTE *)v13 == 15 || (v13 = *(_QWORD *)(v13 - 8 * *(unsigned int *)(v13 + 8))) != 0)
    {
      v14 = *(const char **)(v13 - 8 * *(unsigned int *)(v13 + 8));
      if (v14)
      {
        v15 = (_QWORD *)*((_QWORD *)v14 + 1);
        v17 = *v15;
        v14 = (const char *)(v15 + 3);
        v16 = v17;
      }
      else
      {
        v16 = 0;
      }
    }
    else
    {
      v16 = 0;
      v14 = "";
    }
    v22 = 773;
    v21[0] = v14;
    v21[1] = v16;
    v21[2] = ":";
    v18 = *(unsigned int *)(v12 + 4);
    v23[0] = v21;
    v23[2] = v18;
    v24 = 2050;
    v25[0] = v23;
    v25[2] = ":";
    v26 = 770;
    v19 = *(unsigned __int16 *)(v12 + 2);
    v27[0] = v25;
    v27[2] = v19;
    v28 = 2050;
    llvm::Twine::str((llvm::Twine *)v27, &v29);
    if (*(char *)(a1 + 47) < 0)
      operator delete(*v11);
    *(_OWORD *)v11 = v29;
    *(_QWORD *)(a1 + 40) = v30;
  }
  else
  {
    MEMORY[0x1CAA32ABC](a1 + 24, "<UNKNOWN LOCATION>");
  }
  return a1;
}

void llvm::DiagnosticInfoOptimizationBase::print(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;

  llvm::DiagnosticInfoWithLocationBase::getLocationStr((llvm::DiagnosticInfoWithLocationBase *)a1, v10);
  v4 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a2 + 56))(a2, v10);
  v5 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v4 + 48))(v4, ": ");
  llvm::DiagnosticInfoOptimizationBase::getMsg((llvm::DiagnosticInfoOptimizationBase *)a1, (uint64_t)__p);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 56))(v5, __p);
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  if (*(_BYTE *)(a1 + 72))
  {
    v6 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 48))(a2, " (hotness: ");
    v7 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 80))(v6, *(_QWORD *)(a1 + 64));
    (*(void (**)(uint64_t, const char *))(*(_QWORD *)v7 + 48))(v7, ")");
  }
}

void llvm::DiagnosticInfoOptimizationBase::getMsg(llvm::DiagnosticInfoOptimizationBase *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  BOOL v7;
  const char *v8;
  size_t v9;
  size_t v10;
  void **v11;
  __int128 v12;
  void (**v13)(llvm::raw_ostream *__hidden);
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int v20;
  void **v21;
  void *v22[2];
  uint64_t v23;

  v22[0] = 0;
  v22[1] = 0;
  v23 = 0;
  v14 = 0;
  v18 = 0;
  v19 = 0;
  v13 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v21 = v22;
  v20 = 0;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  v3 = *((int *)this + 89);
  if ((_DWORD)v3 == -1)
  {
    v3 = *((unsigned int *)this + 22);
    if (*((_DWORD *)this + 22))
    {
LABEL_3:
      v4 = v3 << 6;
      v5 = *((_QWORD *)this + 10) + 24;
      do
      {
        v6 = *(_BYTE *)(v5 + 23);
        v7 = v6 < 0;
        if (v6 >= 0)
          v8 = (const char *)v5;
        else
          v8 = *(const char **)v5;
        v9 = v6 & 0x7F;
        if (v7)
          v10 = *(_QWORD *)(v5 + 8);
        else
          v10 = v9;
        llvm::raw_ostream::write((llvm::raw_ostream *)&v13, v8, v10);
        v5 += 64;
        v4 -= 64;
      }
      while (v4);
      v11 = v21;
      goto LABEL_14;
    }
  }
  else if (*((_DWORD *)this + 89))
  {
    goto LABEL_3;
  }
  v11 = v22;
LABEL_14:
  if (*((char *)v11 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)a2, *v11, (unint64_t)v11[1]);
  }
  else
  {
    v12 = *(_OWORD *)v11;
    *(_QWORD *)(a2 + 16) = v11[2];
    *(_OWORD *)a2 = v12;
  }
  v13 = off_1E81A6E70;
  if (v20 == 1 && v15)
    MEMORY[0x1CAA32F9C](v15, 0x1000C8077774924);
  if (SHIBYTE(v23) < 0)
    operator delete(v22[0]);
}

double llvm::OptimizationRemark::OptimizationRemark(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t a6)
{
  uint64_t v6;
  double result;

  v6 = *(_QWORD *)(a6 + 56);
  *(_DWORD *)(a1 + 8) = 9;
  *(_BYTE *)(a1 + 12) = 2;
  *(_QWORD *)a1 = &off_1E814E760;
  *(_QWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *a5;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a4;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)&result = 0x400000000;
  *(_QWORD *)(a1 + 88) = 0x400000000;
  *(_BYTE *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = -1;
  *(_QWORD *)(a1 + 360) = a6;
  *(_QWORD *)a1 = &off_1E814E500;
  return result;
}

{
  uint64_t v6;
  double result;

  v6 = *(_QWORD *)(a6 + 56);
  *(_DWORD *)(a1 + 8) = 9;
  *(_BYTE *)(a1 + 12) = 2;
  *(_QWORD *)a1 = &off_1E814E760;
  *(_QWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *a5;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a4;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)&result = 0x400000000;
  *(_QWORD *)(a1 + 88) = 0x400000000;
  *(_BYTE *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = -1;
  *(_QWORD *)(a1 + 360) = a6;
  *(_QWORD *)a1 = &off_1E814E500;
  return result;
}

double llvm::OptimizationRemark::OptimizationRemark(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  double result;

  v5 = *(_QWORD *)(a5 + 40);
  v6 = *(_QWORD *)(a5 + 48);
  v7 = *(_QWORD *)(v5 + 56);
  if (v6)
  {
    v8 = *(_QWORD *)(v6 - 8 * *(unsigned int *)(v6 + 8));
    if (*(_BYTE *)v8 != 15)
      v8 = *(_QWORD *)(v8 - 8 * *(unsigned int *)(v8 + 8));
    v9 = *(_DWORD *)(v6 + 4);
    LODWORD(v6) = *(unsigned __int16 *)(v6 + 2);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  *(_DWORD *)(a1 + 8) = 9;
  *(_BYTE *)(a1 + 12) = 2;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v6;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a4;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)&result = 0x400000000;
  *(_QWORD *)(a1 + 88) = 0x400000000;
  *(_BYTE *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = -1;
  *(_QWORD *)(a1 + 360) = v5;
  *(_QWORD *)a1 = &off_1E814E500;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  double result;

  v5 = *(_QWORD *)(a5 + 40);
  v6 = *(_QWORD *)(a5 + 48);
  v7 = *(_QWORD *)(v5 + 56);
  if (v6)
  {
    v8 = *(_QWORD *)(v6 - 8 * *(unsigned int *)(v6 + 8));
    if (*(_BYTE *)v8 != 15)
      v8 = *(_QWORD *)(v8 - 8 * *(unsigned int *)(v8 + 8));
    v9 = *(_DWORD *)(v6 + 4);
    LODWORD(v6) = *(unsigned __int16 *)(v6 + 2);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  *(_DWORD *)(a1 + 8) = 9;
  *(_BYTE *)(a1 + 12) = 2;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v6;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a4;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)&result = 0x400000000;
  *(_QWORD *)(a1 + 88) = 0x400000000;
  *(_BYTE *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = -1;
  *(_QWORD *)(a1 + 360) = v5;
  *(_QWORD *)a1 = &off_1E814E500;
  return result;
}

uint64_t llvm::OptimizationRemark::OptimizationRemark(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  if ((*(_BYTE *)(a5 + 23) & 0x20) == 0)
    goto LABEL_17;
  v10 = ***(_QWORD ***)a5;
  v31 = a5;
  v11 = *(_DWORD *)(v10 + 2496);
  if (v11)
  {
    v12 = *(_QWORD *)(v10 + 2480);
    v13 = v11 - 1;
    v14 = v13 & ((a5 >> 4) ^ (a5 >> 9));
    v15 = (_QWORD *)(v12 + 40 * v14);
    v16 = *v15;
    if (*v15 == a5)
      goto LABEL_12;
    v17 = 0;
    v18 = 1;
    while (v16 != -4096)
    {
      if (v17)
        v19 = 0;
      else
        v19 = v16 == -8192;
      if (v19)
        v17 = v15;
      v20 = v14 + v18++;
      v14 = v20 & v13;
      v15 = (_QWORD *)(v12 + 40 * v14);
      v16 = *v15;
      if (*v15 == a5)
        goto LABEL_12;
    }
    if (v17)
      v29 = v17;
    else
      v29 = v15;
  }
  else
  {
    v29 = 0;
  }
  v15 = sub_1C541AB24(v10 + 2480, (uint64_t)&v31, &v31, v29);
  v30 = v31;
  v15[3] = 0;
  v15[4] = 0;
  *v15 = v30;
  v15[1] = v15 + 3;
  v15[2] = 0x100000000;
LABEL_12:
  v21 = *((unsigned int *)v15 + 4);
  if (!(_DWORD)v21)
  {
LABEL_17:
    LODWORD(v24) = 0;
LABEL_18:
    v25 = 0;
    goto LABEL_19;
  }
  v22 = (_QWORD *)(v15[1] + 8);
  v23 = 16 * v21;
  LODWORD(v24) = 0;
  while (*((_DWORD *)v22 - 2))
  {
    v25 = 0;
    v22 += 2;
    v23 -= 16;
    if (!v23)
      goto LABEL_19;
  }
  v24 = *v22;
  if (!*v22)
    goto LABEL_18;
  v25 = *v22;
  if (*(_BYTE *)v24 != 15)
    v25 = *(_QWORD *)(v24 - 8 * *(unsigned int *)(v24 + 8));
  LODWORD(v24) = *(_DWORD *)(v24 + 28);
LABEL_19:
  if (*(_QWORD *)(a5 + 72) == a5 + 72)
  {
    v27 = 0;
  }
  else
  {
    v26 = *(_QWORD *)(a5 + 80);
    if (v26)
      v27 = v26 - 24;
    else
      v27 = 0;
  }
  *(_DWORD *)(a1 + 8) = 9;
  *(_BYTE *)(a1 + 12) = 2;
  *(_QWORD *)(a1 + 16) = a5;
  *(_QWORD *)(a1 + 24) = v25;
  *(_DWORD *)(a1 + 32) = v24;
  *(_DWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a4;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)(a1 + 88) = 0x400000000;
  *(_BYTE *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = -1;
  *(_QWORD *)(a1 + 360) = v27;
  *(_QWORD *)a1 = &off_1E814E500;
  return a1;
}

double llvm::OptimizationRemarkMissed::OptimizationRemarkMissed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t a6)
{
  uint64_t v6;
  double result;

  v6 = *(_QWORD *)(a6 + 56);
  *(_DWORD *)(a1 + 8) = 10;
  *(_BYTE *)(a1 + 12) = 2;
  *(_QWORD *)a1 = &off_1E814E760;
  *(_QWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *a5;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a4;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)&result = 0x400000000;
  *(_QWORD *)(a1 + 88) = 0x400000000;
  *(_BYTE *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = -1;
  *(_QWORD *)(a1 + 360) = a6;
  *(_QWORD *)a1 = &off_1E814E538;
  return result;
}

{
  uint64_t v6;
  double result;

  v6 = *(_QWORD *)(a6 + 56);
  *(_DWORD *)(a1 + 8) = 10;
  *(_BYTE *)(a1 + 12) = 2;
  *(_QWORD *)a1 = &off_1E814E760;
  *(_QWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *a5;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a4;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)&result = 0x400000000;
  *(_QWORD *)(a1 + 88) = 0x400000000;
  *(_BYTE *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = -1;
  *(_QWORD *)(a1 + 360) = a6;
  *(_QWORD *)a1 = &off_1E814E538;
  return result;
}

double llvm::OptimizationRemarkMissed::OptimizationRemarkMissed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  double result;

  v5 = *(_QWORD *)(a5 + 40);
  v6 = *(_QWORD *)(a5 + 48);
  v7 = *(_QWORD *)(v5 + 56);
  if (v6)
  {
    v8 = *(_QWORD *)(v6 - 8 * *(unsigned int *)(v6 + 8));
    if (*(_BYTE *)v8 != 15)
      v8 = *(_QWORD *)(v8 - 8 * *(unsigned int *)(v8 + 8));
    v9 = *(_DWORD *)(v6 + 4);
    LODWORD(v6) = *(unsigned __int16 *)(v6 + 2);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  *(_DWORD *)(a1 + 8) = 10;
  *(_BYTE *)(a1 + 12) = 2;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v6;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a4;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)&result = 0x400000000;
  *(_QWORD *)(a1 + 88) = 0x400000000;
  *(_BYTE *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = -1;
  *(_QWORD *)(a1 + 360) = v5;
  *(_QWORD *)a1 = &off_1E814E538;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  double result;

  v5 = *(_QWORD *)(a5 + 40);
  v6 = *(_QWORD *)(a5 + 48);
  v7 = *(_QWORD *)(v5 + 56);
  if (v6)
  {
    v8 = *(_QWORD *)(v6 - 8 * *(unsigned int *)(v6 + 8));
    if (*(_BYTE *)v8 != 15)
      v8 = *(_QWORD *)(v8 - 8 * *(unsigned int *)(v8 + 8));
    v9 = *(_DWORD *)(v6 + 4);
    LODWORD(v6) = *(unsigned __int16 *)(v6 + 2);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  *(_DWORD *)(a1 + 8) = 10;
  *(_BYTE *)(a1 + 12) = 2;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v6;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a4;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)&result = 0x400000000;
  *(_QWORD *)(a1 + 88) = 0x400000000;
  *(_BYTE *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = -1;
  *(_QWORD *)(a1 + 360) = v5;
  *(_QWORD *)a1 = &off_1E814E538;
  return result;
}

uint64_t llvm::OptimizationRemarkMissed::OptimizationRemarkMissed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  if ((*(_BYTE *)(a5 + 23) & 0x20) == 0)
    goto LABEL_17;
  v10 = ***(_QWORD ***)a5;
  v31 = a5;
  v11 = *(_DWORD *)(v10 + 2496);
  if (v11)
  {
    v12 = *(_QWORD *)(v10 + 2480);
    v13 = v11 - 1;
    v14 = v13 & ((a5 >> 4) ^ (a5 >> 9));
    v15 = (_QWORD *)(v12 + 40 * v14);
    v16 = *v15;
    if (*v15 == a5)
      goto LABEL_12;
    v17 = 0;
    v18 = 1;
    while (v16 != -4096)
    {
      if (v17)
        v19 = 0;
      else
        v19 = v16 == -8192;
      if (v19)
        v17 = v15;
      v20 = v14 + v18++;
      v14 = v20 & v13;
      v15 = (_QWORD *)(v12 + 40 * v14);
      v16 = *v15;
      if (*v15 == a5)
        goto LABEL_12;
    }
    if (v17)
      v29 = v17;
    else
      v29 = v15;
  }
  else
  {
    v29 = 0;
  }
  v15 = sub_1C541AB24(v10 + 2480, (uint64_t)&v31, &v31, v29);
  v30 = v31;
  v15[3] = 0;
  v15[4] = 0;
  *v15 = v30;
  v15[1] = v15 + 3;
  v15[2] = 0x100000000;
LABEL_12:
  v21 = *((unsigned int *)v15 + 4);
  if (!(_DWORD)v21)
  {
LABEL_17:
    LODWORD(v24) = 0;
LABEL_18:
    v25 = 0;
    goto LABEL_19;
  }
  v22 = (_QWORD *)(v15[1] + 8);
  v23 = 16 * v21;
  LODWORD(v24) = 0;
  while (*((_DWORD *)v22 - 2))
  {
    v25 = 0;
    v22 += 2;
    v23 -= 16;
    if (!v23)
      goto LABEL_19;
  }
  v24 = *v22;
  if (!*v22)
    goto LABEL_18;
  v25 = *v22;
  if (*(_BYTE *)v24 != 15)
    v25 = *(_QWORD *)(v24 - 8 * *(unsigned int *)(v24 + 8));
  LODWORD(v24) = *(_DWORD *)(v24 + 28);
LABEL_19:
  if (*(_QWORD *)(a5 + 72) == a5 + 72)
  {
    v27 = 0;
  }
  else
  {
    v26 = *(_QWORD *)(a5 + 80);
    if (v26)
      v27 = v26 - 24;
    else
      v27 = 0;
  }
  *(_DWORD *)(a1 + 8) = 10;
  *(_BYTE *)(a1 + 12) = 2;
  *(_QWORD *)(a1 + 16) = a5;
  *(_QWORD *)(a1 + 24) = v25;
  *(_DWORD *)(a1 + 32) = v24;
  *(_DWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a4;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)(a1 + 88) = 0x400000000;
  *(_BYTE *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = -1;
  *(_QWORD *)(a1 + 360) = v27;
  *(_QWORD *)a1 = &off_1E814E538;
  return a1;
}

double llvm::OptimizationRemarkAnalysis::OptimizationRemarkAnalysis(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t a6)
{
  uint64_t v6;
  double result;

  v6 = *(_QWORD *)(a6 + 56);
  *(_DWORD *)(a1 + 8) = 11;
  *(_BYTE *)(a1 + 12) = 2;
  *(_QWORD *)a1 = &off_1E814E760;
  *(_QWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *a5;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a4;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)&result = 0x400000000;
  *(_QWORD *)(a1 + 88) = 0x400000000;
  *(_BYTE *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = -1;
  *(_QWORD *)(a1 + 360) = a6;
  *(_QWORD *)a1 = &off_1E814E570;
  return result;
}

{
  uint64_t v6;
  double result;

  v6 = *(_QWORD *)(a6 + 56);
  *(_DWORD *)(a1 + 8) = 11;
  *(_BYTE *)(a1 + 12) = 2;
  *(_QWORD *)a1 = &off_1E814E760;
  *(_QWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *a5;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a4;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)&result = 0x400000000;
  *(_QWORD *)(a1 + 88) = 0x400000000;
  *(_BYTE *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = -1;
  *(_QWORD *)(a1 + 360) = a6;
  *(_QWORD *)a1 = &off_1E814E570;
  return result;
}

double llvm::OptimizationRemarkAnalysis::OptimizationRemarkAnalysis(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  double result;

  v5 = *(_QWORD *)(a5 + 40);
  v6 = *(_QWORD *)(a5 + 48);
  v7 = *(_QWORD *)(v5 + 56);
  if (v6)
  {
    v8 = *(_QWORD *)(v6 - 8 * *(unsigned int *)(v6 + 8));
    if (*(_BYTE *)v8 != 15)
      v8 = *(_QWORD *)(v8 - 8 * *(unsigned int *)(v8 + 8));
    v9 = *(_DWORD *)(v6 + 4);
    LODWORD(v6) = *(unsigned __int16 *)(v6 + 2);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  *(_DWORD *)(a1 + 8) = 11;
  *(_BYTE *)(a1 + 12) = 2;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v6;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a4;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)&result = 0x400000000;
  *(_QWORD *)(a1 + 88) = 0x400000000;
  *(_BYTE *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = -1;
  *(_QWORD *)(a1 + 360) = v5;
  *(_QWORD *)a1 = &off_1E814E570;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  double result;

  v5 = *(_QWORD *)(a5 + 40);
  v6 = *(_QWORD *)(a5 + 48);
  v7 = *(_QWORD *)(v5 + 56);
  if (v6)
  {
    v8 = *(_QWORD *)(v6 - 8 * *(unsigned int *)(v6 + 8));
    if (*(_BYTE *)v8 != 15)
      v8 = *(_QWORD *)(v8 - 8 * *(unsigned int *)(v8 + 8));
    v9 = *(_DWORD *)(v6 + 4);
    LODWORD(v6) = *(unsigned __int16 *)(v6 + 2);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  *(_DWORD *)(a1 + 8) = 11;
  *(_BYTE *)(a1 + 12) = 2;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v6;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a4;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)&result = 0x400000000;
  *(_QWORD *)(a1 + 88) = 0x400000000;
  *(_BYTE *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = -1;
  *(_QWORD *)(a1 + 360) = v5;
  *(_QWORD *)a1 = &off_1E814E570;
  return result;
}

double llvm::OptimizationRemarkAnalysis::OptimizationRemarkAnalysis(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, _OWORD *a6, uint64_t a7)
{
  uint64_t v7;
  double result;

  v7 = *(_QWORD *)(a7 + 56);
  *(_DWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 12) = 2;
  *(_QWORD *)a1 = &off_1E814E760;
  *(_QWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 24) = *a6;
  *(_QWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = a4;
  *(_QWORD *)(a1 + 56) = a5;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)&result = 0x400000000;
  *(_QWORD *)(a1 + 88) = 0x400000000;
  *(_BYTE *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = -1;
  *(_QWORD *)(a1 + 360) = a7;
  *(_QWORD *)a1 = &off_1E814E570;
  return result;
}

{
  uint64_t v7;
  double result;

  v7 = *(_QWORD *)(a7 + 56);
  *(_DWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 12) = 2;
  *(_QWORD *)a1 = &off_1E814E760;
  *(_QWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 24) = *a6;
  *(_QWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = a4;
  *(_QWORD *)(a1 + 56) = a5;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)&result = 0x400000000;
  *(_QWORD *)(a1 + 88) = 0x400000000;
  *(_BYTE *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = -1;
  *(_QWORD *)(a1 + 360) = a7;
  *(_QWORD *)a1 = &off_1E814E570;
  return result;
}

uint64_t llvm::OptimizationRemarkAnalysis::OptimizationRemarkAnalysis(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  if ((*(_BYTE *)(a5 + 23) & 0x20) == 0)
    goto LABEL_17;
  v10 = ***(_QWORD ***)a5;
  v31 = a5;
  v11 = *(_DWORD *)(v10 + 2496);
  if (v11)
  {
    v12 = *(_QWORD *)(v10 + 2480);
    v13 = v11 - 1;
    v14 = v13 & ((a5 >> 4) ^ (a5 >> 9));
    v15 = (_QWORD *)(v12 + 40 * v14);
    v16 = *v15;
    if (*v15 == a5)
      goto LABEL_12;
    v17 = 0;
    v18 = 1;
    while (v16 != -4096)
    {
      if (v17)
        v19 = 0;
      else
        v19 = v16 == -8192;
      if (v19)
        v17 = v15;
      v20 = v14 + v18++;
      v14 = v20 & v13;
      v15 = (_QWORD *)(v12 + 40 * v14);
      v16 = *v15;
      if (*v15 == a5)
        goto LABEL_12;
    }
    if (v17)
      v29 = v17;
    else
      v29 = v15;
  }
  else
  {
    v29 = 0;
  }
  v15 = sub_1C541AB24(v10 + 2480, (uint64_t)&v31, &v31, v29);
  v30 = v31;
  v15[3] = 0;
  v15[4] = 0;
  *v15 = v30;
  v15[1] = v15 + 3;
  v15[2] = 0x100000000;
LABEL_12:
  v21 = *((unsigned int *)v15 + 4);
  if (!(_DWORD)v21)
  {
LABEL_17:
    LODWORD(v24) = 0;
LABEL_18:
    v25 = 0;
    goto LABEL_19;
  }
  v22 = (_QWORD *)(v15[1] + 8);
  v23 = 16 * v21;
  LODWORD(v24) = 0;
  while (*((_DWORD *)v22 - 2))
  {
    v25 = 0;
    v22 += 2;
    v23 -= 16;
    if (!v23)
      goto LABEL_19;
  }
  v24 = *v22;
  if (!*v22)
    goto LABEL_18;
  v25 = *v22;
  if (*(_BYTE *)v24 != 15)
    v25 = *(_QWORD *)(v24 - 8 * *(unsigned int *)(v24 + 8));
  LODWORD(v24) = *(_DWORD *)(v24 + 28);
LABEL_19:
  if (*(_QWORD *)(a5 + 72) == a5 + 72)
  {
    v27 = 0;
  }
  else
  {
    v26 = *(_QWORD *)(a5 + 80);
    if (v26)
      v27 = v26 - 24;
    else
      v27 = 0;
  }
  *(_DWORD *)(a1 + 8) = 11;
  *(_BYTE *)(a1 + 12) = 2;
  *(_QWORD *)(a1 + 16) = a5;
  *(_QWORD *)(a1 + 24) = v25;
  *(_DWORD *)(a1 + 32) = v24;
  *(_DWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a4;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)(a1 + 88) = 0x400000000;
  *(_BYTE *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = -1;
  *(_QWORD *)(a1 + 360) = v27;
  *(_QWORD *)a1 = &off_1E814E570;
  return a1;
}

uint64_t llvm::DiagnosticInfoMIRParser::print(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 152))(a2, *(_QWORD *)(a1 + 16));
}

double llvm::DiagnosticInfoOptimizationFailure::DiagnosticInfoOptimizationFailure(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, uint64_t a6)
{
  uint64_t v6;
  double result;

  v6 = *(_QWORD *)(a6 + 56);
  *(_DWORD *)(a1 + 8) = 14;
  *(_BYTE *)(a1 + 12) = 1;
  *(_QWORD *)a1 = &off_1E814E760;
  *(_QWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *a5;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a4;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)&result = 0x400000000;
  *(_QWORD *)(a1 + 88) = 0x400000000;
  *(_BYTE *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = -1;
  *(_QWORD *)(a1 + 360) = a6;
  *(_QWORD *)a1 = &off_1E814E5A8;
  return result;
}

{
  uint64_t v6;
  double result;

  v6 = *(_QWORD *)(a6 + 56);
  *(_DWORD *)(a1 + 8) = 14;
  *(_BYTE *)(a1 + 12) = 1;
  *(_QWORD *)a1 = &off_1E814E760;
  *(_QWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *a5;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a4;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)&result = 0x400000000;
  *(_QWORD *)(a1 + 88) = 0x400000000;
  *(_BYTE *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 356) = -1;
  *(_QWORD *)(a1 + 360) = a6;
  *(_QWORD *)a1 = &off_1E814E5A8;
  return result;
}

void llvm::DiagnosticInfoUnsupported::print(uint64_t a1, uint64_t a2)
{
  void **v4;
  size_t v5;
  char *v6;
  uint64_t ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ****v12;
  uint64_t ***v13;
  int v14;
  int v15;
  uint64_t ***v16;
  const char *v17;
  size_t v18;
  size_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p[2];
  char v26;
  void (**v27)(llvm::raw_ostream *__hidden);
  int v28;
  char *v29;
  unint64_t v30;
  char *v31;
  char v32;
  uint64_t v33;
  int v34;
  void **v35;
  void *v36[2];
  uint64_t v37;

  v36[0] = 0;
  v36[1] = 0;
  v37 = 0;
  v28 = 0;
  v32 = 0;
  v33 = 0;
  v27 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v35 = v36;
  v34 = 0;
  v30 = 0;
  v31 = 0;
  v29 = 0;
  llvm::DiagnosticInfoWithLocationBase::getLocationStr((llvm::DiagnosticInfoWithLocationBase *)a1, __p);
  if (v26 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v26 >= 0)
    v5 = v26 & 0x7F;
  else
    v5 = (size_t)__p[1];
  llvm::raw_ostream::write((llvm::raw_ostream *)&v27, (const char *)v4, v5);
  v6 = v31;
  if (v30 - (unint64_t)v31 > 0xD)
  {
    *(_QWORD *)v31 = *(_QWORD *)": in function ";
    *(_QWORD *)(v6 + 6) = *(_QWORD *)"unction ";
    v31 += 14;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v27, ": in function ", 0xEuLL);
  }
  v7 = *(uint64_t ****)(a1 + 16);
  if ((*((_BYTE *)v7 + 23) & 0x10) == 0)
    goto LABEL_19;
  v8 = ***v7;
  v9 = *(_QWORD *)(v8 + 152);
  v10 = *(unsigned int *)(v8 + 168);
  if ((_DWORD)v10)
  {
    LODWORD(v11) = (v10 - 1) & ((v7 >> 4) ^ (v7 >> 9));
    v12 = (uint64_t ****)(v9 + 16 * v11);
    v13 = *v12;
    if (*v12 == v7)
      goto LABEL_17;
    v14 = 1;
    while (v13 != (uint64_t ***)-4096)
    {
      v15 = v11 + v14++;
      v11 = v15 & (v10 - 1);
      v13 = *(uint64_t ****)(v9 + 16 * v11);
      if (v13 == v7)
      {
        v12 = (uint64_t ****)(v9 + 16 * v11);
        goto LABEL_17;
      }
    }
  }
  v12 = (uint64_t ****)(v9 + 16 * v10);
LABEL_17:
  v16 = v12[1];
  v19 = (size_t)*v16;
  v17 = (const char *)(v16 + 2);
  v18 = v19;
  v20 = v31;
  if (v19 > v30 - (unint64_t)v31)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v27, v17, v18);
LABEL_19:
    v20 = v31;
    goto LABEL_22;
  }
  if (v18)
  {
    memcpy(v31, v17, v18);
    v20 = &v31[v18];
    v31 += v18;
  }
LABEL_22:
  if ((unint64_t)v20 >= v30)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v27, 32);
  }
  else
  {
    v31 = v20 + 1;
    *v20 = 32;
  }
  v21 = llvm::Type::print(*(llvm::Type **)(*(_QWORD *)(a1 + 16) + 24), (llvm::raw_ostream *)&v27, 0, 0);
  if (v30 - (unint64_t)v31 > 1)
  {
    *(_WORD *)v31 = 8250;
    v31 += 2;
  }
  else
  {
    v21 = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)&v27, ": ", 2uLL);
  }
  llvm::Twine::printOneChild(v21, (llvm::raw_ostream *)&v27, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 72));
  llvm::Twine::printOneChild(v22, (llvm::raw_ostream *)&v27, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 73));
  v23 = v31;
  if ((unint64_t)v31 >= v30)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v27, 10);
  }
  else
  {
    ++v31;
    *v23 = 10;
  }
  if (v26 < 0)
    operator delete(__p[0]);
  v24 = v31 - v29;
  if (v31 != v29)
  {
    v31 = v29;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v27, v29, v24);
  }
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a2 + 56))(a2, v36, v24);
  v27 = off_1E81A6E70;
  if (v34 == 1 && v29)
    MEMORY[0x1CAA32F9C](v29, 0x1000C8077774924);
  if (SHIBYTE(v37) < 0)
    operator delete(v36[0]);
}

uint64_t llvm::DiagnosticInfoOptimizationBase::insert(uint64_t a1, const void *a2, const void *a3)
{
  const void *v4[2];

  v4[0] = a2;
  v4[1] = a3;
  return sub_1C53B17B4(a1 + 80, v4);
}

uint64_t sub_1C53B17B4(uint64_t a1, const void **a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  size_t v6;
  const void *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 < *(_DWORD *)(a1 + 12))
  {
    v4 = *(_QWORD *)a1;
    v5 = (char *)(*(_QWORD *)a1 + (v3 << 6));
    v7 = *a2;
    v6 = (size_t)a2[1];
    v5[23] = 6;
    strcpy(v5, "String");
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v8 = v5 + 24;
    if (v6 >= 0x17)
    {
      v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v9 = v6 | 7;
      v10 = v9 + 1;
      v11 = operator new(v9 + 1);
      v8[1] = v6;
      v8[2] = v10 | 0x8000000000000000;
      *v8 = v11;
      v8 = v11;
    }
    else
    {
      v5[47] = v6;
      if (!v6)
        goto LABEL_10;
    }
    memmove(v8, v7, v6);
LABEL_10:
    *((_BYTE *)v8 + v6) = 0;
    v12 = v4 + (v3 << 6);
    *(_QWORD *)(v12 + 48) = 0;
    *(_QWORD *)(v12 + 56) = 0;
    v13 = (*(_DWORD *)(a1 + 8) + 1);
    *(_DWORD *)(a1 + 8) = v13;
    return *(_QWORD *)a1 + (v13 << 6) - 64;
  }
  return sub_1C6236990(a1, (uint64_t)a2);
}

double llvm::DiagnosticInfoOptimizationBase::insert(uint64_t a1, __int128 *a2)
{
  double result;

  *(_QWORD *)&result = sub_1C53B18D0(a1 + 80, a2).n128_u64[0];
  return result;
}

__n128 sub_1C53B18D0(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v10 = v4 + 1;
    v11 = v5 + (v4 << 6);
    if (v5 <= (unint64_t)a2 && v11 > (unint64_t)a2)
    {
      v13 = (uint64_t)a2 - v5;
      sub_1C61999BC(a1, v10);
      v5 = *(_QWORD *)a1;
      a2 = (__int128 *)(*(_QWORD *)a1 + v13);
    }
    else
    {
      sub_1C61999BC(a1, v10);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = v5 + ((unint64_t)*(unsigned int *)(a1 + 8) << 6);
  v7 = *a2;
  *(_QWORD *)(v6 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v6 = v7;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v8 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(v6 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)(v6 + 24) = v8;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  result = (__n128)a2[3];
  *(__n128 *)(v6 + 48) = result;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t llvm::DiagnosticInfoMisExpect::DiagnosticInfoMisExpect(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56);
  if (v3)
  {
    v5 = *(_QWORD *)(v3 - 8 * *(unsigned int *)(v3 + 8));
    if (*(_BYTE *)v5 != 15)
      v5 = *(_QWORD *)(v5 - 8 * *(unsigned int *)(v5 + 8));
    v6 = *(_DWORD *)(v3 + 4);
    LODWORD(v3) = *(unsigned __int16 *)(v3 + 2);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  *(_DWORD *)(result + 8) = 25;
  *(_BYTE *)(result + 12) = 1;
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = v5;
  *(_DWORD *)(result + 32) = v6;
  *(_DWORD *)(result + 36) = v3;
  *(_QWORD *)result = &off_1E814E5E0;
  *(_QWORD *)(result + 40) = a3;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v3 = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56);
  if (v3)
  {
    v5 = *(_QWORD *)(v3 - 8 * *(unsigned int *)(v3 + 8));
    if (*(_BYTE *)v5 != 15)
      v5 = *(_QWORD *)(v5 - 8 * *(unsigned int *)(v5 + 8));
    v6 = *(_DWORD *)(v3 + 4);
    LODWORD(v3) = *(unsigned __int16 *)(v3 + 2);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  *(_DWORD *)(result + 8) = 25;
  *(_BYTE *)(result + 12) = 1;
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = v5;
  *(_DWORD *)(result + 32) = v6;
  *(_DWORD *)(result + 36) = v3;
  *(_QWORD *)result = &off_1E814E5E0;
  *(_QWORD *)(result + 40) = a3;
  return result;
}

void llvm::DiagnosticInfoMisExpect::print(llvm::DiagnosticInfoWithLocationBase *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *__p[2];
  char v7;

  llvm::DiagnosticInfoWithLocationBase::getLocationStr(a1, __p);
  v4 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a2 + 56))(a2, __p);
  v5 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v4 + 48))(v4, ": ");
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 128))(v5, *((_QWORD *)a1 + 5));
  if (v7 < 0)
    operator delete(__p[0]);
}

uint64_t llvm::diagnoseDontCall(uint64_t this, const llvm::CallInst *a2)
{
  uint64_t **v2;
  char v3;
  char v4;
  size_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  char *v12;
  int v13;
  int i;
  int v15;
  char **v16;
  char *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  int j;
  int v26;
  uint64_t v27;
  const void *v28;
  uint64_t v29;
  uint64_t MetadataImpl;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t ***v38;
  uint64_t **v39;
  int v40;
  int v41;
  uint64_t **v42;
  uint64_t *v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t (**v52)(llvm::DiagnosticInfo *__hidden);
  int v53;
  char v54;
  char *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;

  v49 = this;
  v2 = *(uint64_t ***)(this - 32);
  if (!v2 || *((_BYTE *)v2 + 16) || v2[3] != *(uint64_t **)(this + 72))
    return this;
  v3 = 0;
  v48 = (v2 >> 4) ^ (v2 >> 9);
  v51 = *(_QWORD *)(this - 32);
  do
  {
    v4 = v3;
    if ((v3 & 1) != 0)
      v5 = 13;
    else
      v5 = 14;
    v6 = v2[14];
    if (!v6)
      goto LABEL_67;
    if (!*((_DWORD *)v6 + 2))
      goto LABEL_67;
    v7 = v6[5];
    if (!v7)
      goto LABEL_67;
    v8 = *(_DWORD *)(v7 + 40);
    if (!v8)
      goto LABEL_67;
    v9 = *(_QWORD *)(v7 + 24);
    v10 = "ntcall-error" == 0;
    if ((v4 & 1) != 0)
      v11 = "ontcall-warn" == 0;
    else
      v11 = "dontcall-error" == (char *)-1;
    if ((v4 & 1) != 0)
      v12 = "dontcall-warn";
    else
      v12 = "dontcall-error";
    if ((v4 & 1) != 0)
      v10 = "dontcall-warn" == (char *)-2;
    v50 = v10;
    this = sub_1C5E3DF4C(v12, (uint64_t)&v12[v5]);
    v13 = v8 - 1;
    for (i = 1; ; ++i)
    {
      v15 = this & v13;
      v16 = (char **)(v9 + 24 * (this & v13));
      v17 = *v16;
      if (*v16 == (char *)-1)
      {
        if (v11)
          goto LABEL_31;
        goto LABEL_24;
      }
      if (v17 != (char *)-2)
        break;
      if (v50)
        goto LABEL_31;
LABEL_24:
      v18 = v17 + 1 == 0;
      v2 = (uint64_t **)v51;
      if (v18)
        goto LABEL_67;
      this = (i + v15);
    }
    if ((char *)v5 != v16[1])
      goto LABEL_24;
    this = memcmp(v12, v17, v5);
    if ((_DWORD)this)
      goto LABEL_24;
LABEL_31:
    v2 = (uint64_t **)v51;
    v19 = *(_QWORD *)(v51 + 112);
    if (v19 && *(_DWORD *)(v19 + 8) && (v20 = *(_QWORD *)(v19 + 40)) != 0 && (v21 = *(_DWORD *)(v20 + 40)) != 0)
    {
      v22 = *(_QWORD *)(v20 + 24);
      v23 = sub_1C5E3DF4C(v12, (uint64_t)&v12[v5]);
      v24 = v21 - 1;
      for (j = 1; ; ++j)
      {
        v26 = v23 & v24;
        v27 = v22 + 24 * (v23 & v24);
        v28 = *(const void **)v27;
        if (*(_QWORD *)v27 == -1)
        {
          if (v11)
            goto LABEL_45;
        }
        else if (v28 == (const void *)-2)
        {
          if (v50)
            goto LABEL_45;
        }
        else if (v5 == *(_QWORD *)(v27 + 8) && !memcmp(v12, *(const void **)v27, v5))
        {
LABEL_45:
          v29 = *(_QWORD *)(v27 + 16);
          goto LABEL_47;
        }
        if (v28 == (const void *)-1)
          break;
        v23 = j + v26;
      }
      v29 = 0;
LABEL_47:
      v2 = (uint64_t **)v51;
    }
    else
    {
      v29 = 0;
    }
    if ((*(_QWORD *)(v49 + 48) || (*(_BYTE *)(v49 + 23) & 0x20) != 0)
      && (MetadataImpl = llvm::Instruction::getMetadataImpl((uint64_t ***)v49, "srcloc", 6uLL)) != 0)
    {
      v31 = *(_QWORD *)(*(_QWORD *)(MetadataImpl - 8 * *(unsigned int *)(MetadataImpl + 8)) + 128);
      v32 = (_QWORD *)(v31 + 24);
      if (*(_DWORD *)(v31 + 32) >= 0x41u)
        v32 = (_QWORD *)*v32;
      v33 = *(_DWORD *)v32;
    }
    else
    {
      v33 = 0;
    }
    if ((*((_BYTE *)v2 + 23) & 0x10) != 0)
    {
      v34 = *(_QWORD *)**v2;
      v35 = *(_QWORD *)(v34 + 152);
      v36 = *(unsigned int *)(v34 + 168);
      if (!(_DWORD)v36)
        goto LABEL_63;
      LODWORD(v37) = (v36 - 1) & v48;
      v38 = (uint64_t ***)(v35 + 16 * v37);
      v39 = *v38;
      if (*v38 != v2)
      {
        v40 = 1;
        while (v39 != (uint64_t **)-4096)
        {
          v41 = v37 + v40++;
          v37 = v41 & (v36 - 1);
          v39 = *(uint64_t ***)(v35 + 16 * v37);
          if (v39 == v2)
          {
            v38 = (uint64_t ***)(v35 + 16 * v37);
            goto LABEL_64;
          }
        }
LABEL_63:
        v38 = (uint64_t ***)(v35 + 16 * v36);
      }
LABEL_64:
      v42 = v38[1];
      v45 = *v42;
      v44 = (char *)(v42 + 2);
      v43 = v45;
      if (v29)
      {
LABEL_65:
        v46 = *(unsigned int *)(v29 + 16);
        v47 = v29 + *(unsigned int *)(v29 + 12) + 25;
        goto LABEL_66;
      }
    }
    else
    {
      v43 = 0;
      v44 = &byte_1C871356D;
      if (v29)
        goto LABEL_65;
    }
    v47 = 0;
    v46 = 0;
LABEL_66:
    v53 = 24;
    v54 = v4;
    v52 = &off_1E814E930;
    v55 = v44;
    v56 = v43;
    v57 = v47;
    v58 = v46;
    v59 = v33;
    this = llvm::LLVMContext::diagnose(**v2, (const llvm::DiagnosticInfo *)&v52);
LABEL_67:
    v3 = 1;
  }
  while ((v4 & 1) == 0);
  return this;
}

void sub_1C53B1DDC()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C53B1DF0(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;

  *(_QWORD *)a1 = &off_1E814E790;
  v2 = *(char **)(a1 + 80);
  v3 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v3)
  {
    v4 = v3 << 6;
    do
    {
      v5 = (void **)&v2[v4];
      if (v2[v4 - 17] < 0)
        operator delete(*(v5 - 5));
      if (*((char *)v5 - 41) < 0)
        operator delete(*(v5 - 8));
      v4 -= 64;
    }
    while (v4);
    v2 = *(char **)(a1 + 80);
  }
  if (v2 != (char *)(a1 + 96))
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C53B1E8C()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C53B1EA4()
{
  JUMPOUT(0x1CAA32FC0);
}

BOOL llvm::BasicBlockEdge::isSingleEdge(llvm::BasicBlockEdge *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(*(_QWORD *)this + 40);
  if (v2 == *(_QWORD *)this + 40)
  {
    v4 = 0;
  }
  else
  {
    if (v2)
      v3 = v2 - 24;
    else
      v3 = 0;
    if (*(unsigned __int8 *)(v3 + 16) - 29 >= 0xB)
      v4 = 0;
    else
      v4 = v3;
  }
  v5 = *(unsigned __int8 *)(v4 + 16);
  if (v5 != 30)
    __asm { BR              X10 }
  if ((*(_DWORD *)(v4 + 20) & 0x7FFFFFF) == 3)
    v6 = 2;
  else
    v6 = 1;
  v7 = llvm::Instruction::getSuccessor((llvm::Instruction *)v4, 0) == *((_QWORD *)this + 1);
  v8 = 1;
  do
  {
    v9 = v8;
    if (v6 == v8)
      break;
    if (llvm::Instruction::getSuccessor((llvm::Instruction *)v4, v8) == *((_QWORD *)this + 1))
      ++v7;
    v8 = v9 + 1;
  }
  while (v7 < 2);
  return v9 >= v6;
}

void sub_1C53B1FAC()
{
  uint64_t v0;

  if (((*(_DWORD *)(v0 + 20) >> 1) & 0x3FFFFFF) == 0)
    JUMPOUT(0x1C53B1F78);
  JUMPOUT(0x1C53B1F24);
}

void sub_1C53B1FC0()
{
  JUMPOUT(0x1C53B1FB4);
}

void sub_1C53B1FD0()
{
  JUMPOUT(0x1C53B1FB4);
}

void sub_1C53B1FDC()
{
  JUMPOUT(0x1C53B1F24);
}

void sub_1C53B1FE4()
{
  JUMPOUT(0x1C53B1FB4);
}

double llvm::DomTreeNodeBase<llvm::BasicBlock>::DomTreeNodeBase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  double result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  if (a3)
    v3 = *(_DWORD *)(a3 + 16) + 1;
  else
    v3 = 0;
  *(_DWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)(a1 + 32) = 0x400000000;
  result = NAN;
  *(_QWORD *)(a1 + 72) = -1;
  return result;
}

{
  int v3;
  double result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  if (a3)
    v3 = *(_DWORD *)(a3 + 16) + 1;
  else
    v3 = 0;
  *(_DWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)(a1 + 32) = 0x400000000;
  result = NAN;
  *(_QWORD *)(a1 + 72) = -1;
  return result;
}

uint64_t llvm::DomTreeNodeBase<llvm::BasicBlock>::begin(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

{
  return *(_QWORD *)(a1 + 24);
}

uint64_t llvm::DomTreeNodeBase<llvm::BasicBlock>::end(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) + 8 * *(unsigned int *)(a1 + 32);
}

{
  return *(_QWORD *)(a1 + 24) + 8 * *(unsigned int *)(a1 + 32);
}

uint64_t llvm::DomTreeNodeBase<llvm::BasicBlock>::back(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) + 8 * *(unsigned int *)(a1 + 32) - 8;
}

{
  return *(_QWORD *)(a1 + 24) + 8 * *(unsigned int *)(a1 + 32) - 8;
}

uint64_t llvm::DomTreeNodeBase<llvm::BasicBlock>::children(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

{
  return *(_QWORD *)(a1 + 24);
}

uint64_t llvm::DomTreeNodeBase<llvm::BasicBlock>::getBlock(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t llvm::DomTreeNodeBase<llvm::BasicBlock>::getIDom(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t llvm::DomTreeNodeBase<llvm::BasicBlock>::getLevel(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

_DWORD *llvm::DomTreeNodeBase<llvm::BasicBlock>::addChild@<X0>(_DWORD *result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _DWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = result;
  v6 = *a2;
  v7 = result[8];
  if (v7 >= result[9])
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(result + 6), (uint64_t)(result + 10), v7 + 1, 8);
    LODWORD(v7) = v4[8];
  }
  *(_QWORD *)(*((_QWORD *)v4 + 3) + 8 * v7) = v6;
  ++v4[8];
  v8 = *a2;
  *a2 = 0;
  *a3 = v8;
  return result;
}

BOOL llvm::DomTreeNodeBase<llvm::BasicBlock>::isLeaf(uint64_t a1)
{
  return *(_DWORD *)(a1 + 32) == 0;
}

uint64_t llvm::DomTreeNodeBase<llvm::BasicBlock>::getNumChildren(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t llvm::DomTreeNodeBase<llvm::BasicBlock>::clearAllChildren(uint64_t result)
{
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t llvm::DomTreeNodeBase<llvm::BasicBlock>::compare(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t **v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t *v14;
  _QWORD *v15;
  _BOOL8 v16;
  BOOL v17;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];

  v2 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 32) || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
    return 1;
  v19 = v23;
  v20 = v23;
  v21 = 4;
  v22 = 0;
  if (!(_DWORD)v2)
    return 0;
  v4 = *(uint64_t ***)(a2 + 24);
  v5 = 8 * v2;
  do
  {
    v6 = *v4++;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v19, *v6);
    v5 -= 8;
  }
  while (v5);
  v7 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v7)
  {
    v8 = *(uint64_t ***)(a1 + 24);
    v9 = 8 * v7 - 8;
    do
    {
      v10 = *v8++;
      v11 = sub_1C477672C((uint64_t)&v19, *v10);
      v13 = v19;
      v12 = v20;
      v14 = (uint64_t *)((char *)&v21 + 4);
      if (v20 != v19)
        v14 = &v21;
      v15 = &v20[8 * *(unsigned int *)v14];
      v16 = v11 == v15;
      v17 = v11 == v15 || v9 == 0;
      v9 -= 8;
    }
    while (!v17);
  }
  else
  {
    v16 = 0;
    v13 = v19;
    v12 = v20;
  }
  if (v12 != v13)
    free(v12);
  return v16;
}

{
  return __ZNK4llvm15DomTreeNodeBaseINS_10BasicBlockEE7compareEPKS2_(a1, a2);
}

void llvm::DomTreeNodeBase<llvm::BasicBlock>::setIDom(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 != a2)
  {
    v5 = *(_QWORD **)(v2 + 24);
    v6 = *(unsigned int *)(v2 + 32);
    v7 = &v5[v6];
    if ((_DWORD)v6)
    {
      v8 = 8 * v6;
      while (*v5 != a1)
      {
        ++v5;
        v8 -= 8;
        if (!v8)
        {
          v5 = v7;
          break;
        }
      }
    }
    if (v7 != v5 + 1)
    {
      memmove(v5, v5 + 1, (char *)v7 - (char *)(v5 + 1));
      LODWORD(v6) = *(_DWORD *)(v2 + 32);
    }
    *(_DWORD *)(v2 + 32) = v6 - 1;
    *(_QWORD *)(a1 + 8) = a2;
    v9 = *(unsigned int *)(a2 + 32);
    if (v9 >= *(_DWORD *)(a2 + 36))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, a2 + 40, v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 32);
    }
    *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * v9) = a1;
    ++*(_DWORD *)(a2 + 32);
    llvm::DomTreeNodeBase<llvm::BasicBlock>::UpdateLevel(a1);
  }
}

void llvm::DomTreeNodeBase<llvm::BasicBlock>::UpdateLevel(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD v10[65];

  v10[64] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(*(_QWORD *)(a1 + 8) + 16) + 1)
  {
    v7 = v10;
    v9 = 64;
    v10[0] = a1;
    v1 = 1;
    do
    {
      v2 = *((_QWORD *)v7 + --v1);
      v8 = v1;
      *(_DWORD *)(v2 + 16) = *(_DWORD *)(*(_QWORD *)(v2 + 8) + 16) + 1;
      v3 = *(unsigned int *)(v2 + 32);
      if ((_DWORD)v3)
      {
        v4 = *(uint64_t **)(v2 + 24);
        v5 = 8 * v3;
        do
        {
          v6 = *v4;
          if (*(_DWORD *)(*v4 + 16) != *(_DWORD *)(*(_QWORD *)(*v4 + 8) + 16) + 1)
          {
            if (v1 >= v9)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v7, (uint64_t)v10, v1 + 1, 8);
              v1 = v8;
            }
            *((_QWORD *)v7 + v1) = v6;
            v1 = ++v8;
          }
          ++v4;
          v5 -= 8;
        }
        while (v5);
      }
    }
    while (v1);
    if (v7 != v10)
      free(v7);
  }
}

{
  __ZN4llvm15DomTreeNodeBaseINS_10BasicBlockEE11UpdateLevelEv(a1);
}

uint64_t llvm::DomTreeNodeBase<llvm::BasicBlock>::getDFSNumIn(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t llvm::DomTreeNodeBase<llvm::BasicBlock>::getDFSNumOut(uint64_t a1)
{
  return *(unsigned int *)(a1 + 76);
}

BOOL llvm::DomTreeNodeBase<llvm::BasicBlock>::DominatedBy(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 72) >= *(_DWORD *)(a2 + 72) && *(_DWORD *)(a1 + 76) <= *(_DWORD *)(a2 + 76);
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::DominatorTreeBase(uint64_t a1, uint64_t a2)
{
  void *v4;
  unsigned int v5;
  const void *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v13;
  uint64_t v14;

  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x100000000;
  if (a1 != a2)
  {
    v5 = *(_DWORD *)(a2 + 8);
    if (v5)
    {
      v6 = *(const void **)a2;
      if (*(_QWORD *)a2 != a2 + 16)
      {
        *(_QWORD *)a1 = v6;
        v13 = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a1 + 8) = v5;
        *(_DWORD *)(a1 + 12) = v13;
        *(_QWORD *)a2 = a2 + 16;
        *(_DWORD *)(a2 + 12) = 0;
        goto LABEL_8;
      }
      if (v5 >= 2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, *(unsigned int *)(a2 + 8), 8);
        v14 = *(unsigned int *)(a2 + 8);
        if (!(_DWORD)v14)
          goto LABEL_7;
        v6 = *(const void **)a2;
        v4 = *(void **)a1;
        v7 = 8 * v14;
      }
      else
      {
        v7 = 8;
      }
      memcpy(v4, v6, v7);
LABEL_7:
      *(_DWORD *)(a1 + 8) = v5;
LABEL_8:
      *(_DWORD *)(a2 + 8) = 0;
    }
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  v9 = *(_QWORD *)(a2 + 24);
  v8 = a2 + 24;
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)v8 = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 + 8);
  *(_DWORD *)(v8 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(v8 + 12);
  *(_DWORD *)(v8 + 12) = v10;
  v11 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(v8 + 16);
  *(_DWORD *)(v8 + 16) = v11;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(v8 + 24);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(v8 + 40);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(v8 + 44);
  sub_1C4EF5C94((uint64_t *)v8);
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  return a1;
}

{
  return __ZN4llvm17DominatorTreeBaseINS_10BasicBlockELb0EEC2EOS2_(a1, a2);
}

uint64_t *llvm::DominatorTreeBase<llvm::BasicBlock,false>::wipe(uint64_t *a1)
{
  uint64_t *result;

  result = sub_1C4EF5C94(a1 + 3);
  a1[6] = 0;
  a1[7] = 0;
  return result;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v11;
  uint64_t v12;

  if (a1 != a2)
  {
    v4 = *(const void **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      v11 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v11);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v6 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = a2 + 16;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_10;
    }
    v6 = (_DWORD *)(a2 + 8);
    v5 = *(unsigned int *)(a2 + 8);
    v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v5)
    {
      if ((_DWORD)v5)
        memmove(*(void **)a1, v4, 8 * v5);
      goto LABEL_9;
    }
    if (*(_DWORD *)(a1 + 12) < v5)
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 8);
    }
    else if ((_DWORD)v7)
    {
      v12 = *(unsigned int *)(a1 + 8);
      memmove(*(void **)a1, v4, 8 * v7);
      v8 = v12;
LABEL_7:
      v9 = *v6;
      if (v8 != v9)
        memcpy((void *)(*(_QWORD *)a1 + 8 * v8), (const void *)(*(_QWORD *)a2 + 8 * v8), *(_QWORD *)a2 + 8 * v9 - (*(_QWORD *)a2 + 8 * v8));
LABEL_9:
      *(_DWORD *)(a1 + 8) = v5;
LABEL_10:
      *v6 = 0;
      goto LABEL_11;
    }
    v8 = 0;
    goto LABEL_7;
  }
LABEL_11:
  sub_1C514F874((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  sub_1C4EF5C94((uint64_t *)(a2 + 24));
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return a1;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::root_begin(uint64_t a1)
{
  return *(_QWORD *)a1;
}

{
  return *(_QWORD *)a1;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::root_end(uint64_t a1)
{
  return *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 8);
}

{
  return *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 8);
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::root_size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::roots(uint64_t a1)
{
  return *(_QWORD *)a1;
}

{
  return *(_QWORD *)a1;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::isPostDominator()
{
  return 0;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::compare(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;
  _QWORD *v19;
  uint64_t result;

  if (*(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
    return 1;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4 != *(_DWORD *)(a2 + 8))
    return 1;
  if (!sub_1C5151CDC(*(char **)a1, (char *)(*(_QWORD *)a1 + 8 * v4), *(_QWORD **)a2))
    return 1;
  v5 = *(_DWORD *)(a1 + 32);
  if (v5 != *(_DWORD *)(a2 + 32))
    return 1;
  v6 = *(_QWORD **)(a1 + 24);
  v7 = *(unsigned int *)(a1 + 40);
  v8 = &v6[2 * v7];
  if (v5)
  {
    if ((_DWORD)v7)
    {
      v9 = 16 * v7;
      v10 = v6;
      while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v10 += 2;
        v9 -= 16;
        if (!v9)
          goto LABEL_10;
      }
    }
    else
    {
      v10 = v6;
    }
  }
  else
  {
LABEL_10:
    v10 = &v6[2 * v7];
  }
  v11 = &v6[2 * v7];
  if (v10 != v11)
  {
    while (1)
    {
      v12 = *(_QWORD *)(a2 + 24);
      v13 = *(unsigned int *)(a2 + 40);
      if ((_DWORD)v13)
      {
        LODWORD(v14) = ((*v10 >> 4) ^ (*v10 >> 9)) & (v13 - 1);
        v15 = (uint64_t *)(v12 + 16 * v14);
        v16 = *v15;
        if (*v10 == *v15)
          goto LABEL_20;
        v17 = 1;
        while (v16 != -4096)
        {
          v18 = v14 + v17++;
          v14 = v18 & (v13 - 1);
          v16 = *(_QWORD *)(v12 + 16 * v14);
          if (*v10 == v16)
          {
            v15 = (uint64_t *)(v12 + 16 * v14);
            goto LABEL_20;
          }
        }
      }
      v15 = (uint64_t *)(v12 + 16 * v13);
LABEL_20:
      if (v15 == (uint64_t *)(v12 + 16 * v13)
        || (llvm::DomTreeNodeBase<llvm::BasicBlock>::compare(v10[1], v15[1]) & 1) != 0)
      {
        return 1;
      }
      v19 = v10 + 2;
      v10 = v8;
      if (v19 != v8)
      {
        v10 = v19;
        while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v10 += 2;
          if (v10 == v8)
          {
            v10 = v8;
            break;
          }
        }
      }
      result = 0;
      if (v10 == v11)
        return result;
    }
  }
  return 0;
}

{
  return __ZNK4llvm17DominatorTreeBaseINS_10BasicBlockELb0EE7compareERKS2_(a1, a2);
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::getNode(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      goto LABEL_3;
    v8 = 1;
    while (v6 != -4096)
    {
      v9 = v4 + v8++;
      v4 = v9 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_3;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_3:
  if (v5 == (uint64_t *)(v2 + 16 * v3))
    return 0;
  else
    return v5[1];
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      goto LABEL_8;
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if (v5 == (uint64_t *)(v2 + 16 * v3))
    return 0;
  else
    return v5[1];
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::getRootNode(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

{
  return *(_QWORD *)(a1 + 48);
}

void llvm::DominatorTreeBase<llvm::BasicBlock,false>::getDescendants(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  unsigned int v17;
  int v18;
  _QWORD v19[9];

  v19[8] = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a3 + 8) = 0;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(unsigned int *)(a1 + 40);
  if (!(_DWORD)v5)
  {
LABEL_7:
    v7 = (uint64_t *)(v4 + 16 * v5);
    goto LABEL_8;
  }
  LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (uint64_t *)(v4 + 16 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 1;
    while (v8 != -4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v5 - 1);
      v8 = *(_QWORD *)(v4 + 16 * v6);
      if (v8 == a2)
      {
        v7 = (uint64_t *)(v4 + 16 * v6);
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v7 != (uint64_t *)(v4 + 16 * v5))
  {
    v11 = v7[1];
    if (v11)
    {
      v16 = v19;
      v18 = 8;
      v19[0] = v11;
      v12 = 1;
      do
      {
        v13 = (uint64_t *)*((_QWORD *)v16 + v12 - 1);
        v17 = v12 - 1;
        v14 = *v13;
        v15 = *(unsigned int *)(a3 + 8);
        if (v15 >= *(unsigned int *)(a3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v15 + 1, 8);
          v15 = *(unsigned int *)(a3 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v15) = v14;
        ++*(_DWORD *)(a3 + 8);
        sub_1C6236E8C((uint64_t)&v16, (char *)v13[3], (char *)(v13[3] + 8 * *((unsigned int *)v13 + 8)));
        v12 = v17;
      }
      while (v17);
      if (v16 != v19)
        free(v16);
    }
  }
}

{
  __ZNK4llvm17DominatorTreeBaseINS_10BasicBlockELb0EE14getDescendantsEPS1_RNS_15SmallVectorImplIS3_EE(a1, a2, a3);
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  result = 0;
  if (a2 != a3)
  {
    if (a2)
    {
      v6 = a3;
      if (a3)
      {
        if (*(_QWORD *)(a3 + 8) == a2)
          return 1;
        if (*(_QWORD *)(a2 + 8) == a3)
          return 0;
        v7 = *(_DWORD *)(a2 + 16);
        if (v7 >= *(_DWORD *)(a3 + 16))
          return 0;
        if (*(_BYTE *)(a1 + 64))
        {
LABEL_8:
          if (*(_DWORD *)(v6 + 72) >= *(_DWORD *)(a2 + 72))
            return *(_DWORD *)(v6 + 76) <= *(_DWORD *)(a2 + 76);
          return 0;
        }
        v8 = *(_DWORD *)(a1 + 68) + 1;
        *(_DWORD *)(a1 + 68) = v8;
        if (v8 > 0x20)
        {
          llvm::DominatorTreeBase<llvm::BasicBlock,false>::updateDFSNumbers(a1);
          goto LABEL_8;
        }
        do
        {
          v9 = v6;
          v6 = *(_QWORD *)(v6 + 8);
        }
        while (v6 && *(_DWORD *)(v6 + 16) >= v7);
        return v9 == a2;
      }
    }
  }
  return result;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _BOOL4 v6;
  unsigned int v8;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;

  v3 = a3;
  v6 = a3 != a2 && a3 != 0;
  if (!v6 || a2 == 0)
  {
    if (v6)
    {
      if (!a2)
        return 0;
      if (*(_QWORD *)(a3 + 8) != a2)
      {
        if (*(_QWORD *)(a2 + 8) != a3)
        {
          v12 = *(_DWORD *)(a2 + 16);
          if (v12 < *(_DWORD *)(a3 + 16))
          {
            if (*(_BYTE *)(a1 + 64))
              goto LABEL_15;
            v13 = *(_DWORD *)(a1 + 68) + 1;
            *(_DWORD *)(a1 + 68) = v13;
            if (v13 <= 0x20)
            {
              do
              {
                v11 = v3;
                v3 = *(_QWORD *)(v3 + 8);
              }
              while (v3 && *(_DWORD *)(v3 + 16) >= v12);
              return v11 == a2;
            }
LABEL_33:
            llvm::DominatorTreeBase<llvm::BasicBlock,false>::updateDFSNumbers(a1);
LABEL_15:
            if (*(_DWORD *)(v3 + 72) >= *(_DWORD *)(a2 + 72))
              return *(_DWORD *)(v3 + 76) <= *(_DWORD *)(a2 + 76);
          }
        }
        return 0;
      }
    }
  }
  else if (*(_QWORD *)(a3 + 8) != a2)
  {
    if (*(_QWORD *)(a2 + 8) != a3)
    {
      v8 = *(_DWORD *)(a2 + 16);
      if (v8 < *(_DWORD *)(a3 + 16))
      {
        if (*(_BYTE *)(a1 + 64))
          goto LABEL_15;
        v10 = *(_DWORD *)(a1 + 68) + 1;
        *(_DWORD *)(a1 + 68) = v10;
        if (v10 <= 0x20)
        {
          do
          {
            v11 = v3;
            v3 = *(_QWORD *)(v3 + 8);
          }
          while (v3 && *(_DWORD *)(v3 + 16) >= v8);
          return v11 == a2;
        }
        goto LABEL_33;
      }
    }
    return 0;
  }
  return 1;
}

BOOL llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;

  if (a2 == a3)
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = (uint64_t *)(v3 + 16 * v5);
    v7 = *v6;
    if (*v6 == a2)
      goto LABEL_10;
    v8 = 1;
    while (v7 != -4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(_QWORD *)(v3 + 16 * v5);
      if (v7 == a2)
      {
        v6 = (uint64_t *)(v3 + 16 * v5);
        goto LABEL_10;
      }
    }
  }
  v6 = (uint64_t *)(v3 + 16 * v4);
LABEL_10:
  v11 = (uint64_t *)(v3 + 16 * v4);
  if (v6 == v11)
  {
    v12 = 0;
    if (!(_DWORD)v4)
      return 1;
  }
  else
  {
    v12 = v6[1];
    if (!(_DWORD)v4)
      return 1;
  }
  v13 = v4 - 1;
  LODWORD(v4) = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  v14 = (uint64_t *)(v3 + 16 * v4);
  v15 = *v14;
  if (*v14 != a3)
  {
    v16 = 1;
    while (v15 != -4096)
    {
      v17 = v4 + v16++;
      v4 = v17 & v13;
      v15 = *(_QWORD *)(v3 + 16 * v4);
      if (v15 == a3)
      {
        v14 = (uint64_t *)(v3 + 16 * v4);
        goto LABEL_19;
      }
    }
    return 1;
  }
LABEL_19:
  if (v14 == v11)
    return 1;
  v18 = v14[1];
  if (v18 == v12 || v18 == 0)
    return 1;
  if (!v12)
    return 0;
  if (*(_QWORD *)(v18 + 8) == v12)
    return 1;
  if (*(_QWORD *)(v12 + 8) == v18)
    return 0;
  v20 = *(_DWORD *)(v12 + 16);
  if (v20 >= *(_DWORD *)(v18 + 16))
    return 0;
  if (*(_BYTE *)(a1 + 64))
    goto LABEL_29;
  v21 = *(_DWORD *)(a1 + 68) + 1;
  *(_DWORD *)(a1 + 68) = v21;
  if (v21 > 0x20)
  {
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::updateDFSNumbers(a1);
LABEL_29:
    if (*(_DWORD *)(v18 + 72) >= *(_DWORD *)(v12 + 72))
      return *(_DWORD *)(v18 + 76) <= *(_DWORD *)(v12 + 76);
    return 0;
  }
  do
  {
    v22 = v18;
    v18 = *(_QWORD *)(v18 + 8);
  }
  while (v18 && *(_DWORD *)(v18 + 16) >= v20);
  return v22 == v12;
}

{
  return __ZNK4llvm17DominatorTreeBaseINS_10BasicBlockELb0EE17properlyDominatesEPKS1_S4_(a1, a2, a3);
}

BOOL llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      return v5 != (uint64_t *)(v2 + 16 * v3) && v5[1] != 0;
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        return v5 != (uint64_t *)(v2 + 16 * v3) && v5[1] != 0;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
  return v5 != (uint64_t *)(v2 + 16 * v3) && v5[1] != 0;
}

{
  return a2 != 0;
}

{
  return __ZNK4llvm17DominatorTreeBaseINS_10BasicBlockELb0EE20isReachableFromEntryEPKS1_(a1, a2);
}

void llvm::DominatorTreeBase<llvm::BasicBlock,false>::updateDFSNumbers(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  void *v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD v18[65];

  v18[64] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 64))
  {
    *(_DWORD *)(a1 + 68) = 0;
  }
  else
  {
    v15 = v18;
    v17 = 32;
    v2 = *(_QWORD *)(a1 + 48);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      v18[0] = *(_QWORD *)(a1 + 48);
      v18[1] = v3;
      v4 = 1;
      v16 = 1;
      *(_DWORD *)(v2 + 72) = 0;
      v5 = 1;
      do
      {
        v6 = (char *)v15;
        v7 = v5;
        v8 = (char *)v15 + 16 * v5;
        v10 = *((_QWORD *)v8 - 2);
        v9 = (uint64_t *)*((_QWORD *)v8 - 1);
        if (v9 == (uint64_t *)(*(_QWORD *)(v10 + 24) + 8 * *(unsigned int *)(v10 + 32)))
        {
          *(_DWORD *)(v10 + 76) = v4;
          v5 = v7 - 1;
          v16 = v7 - 1;
        }
        else
        {
          v11 = *v9;
          *((_QWORD *)v8 - 1) = v9 + 1;
          v12 = *(_QWORD *)(v11 + 24);
          if (v7 >= v17)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, (uint64_t)v18, v7 + 1, 16);
            v6 = (char *)v15;
            v7 = v16;
          }
          v13 = &v6[16 * v7];
          *(_QWORD *)v13 = v11;
          *((_QWORD *)v13 + 1) = v12;
          v5 = ++v16;
          *(_DWORD *)(v11 + 72) = v4;
        }
        ++v4;
      }
      while (v5);
      v14 = v15;
      *(_DWORD *)(a1 + 68) = 0;
      *(_BYTE *)(a1 + 64) = 1;
      if (v14 != v18)
        free(v14);
    }
  }
}

{
  __ZNK4llvm17DominatorTreeBaseINS_10BasicBlockELb0EE16updateDFSNumbersEv(a1);
}

BOOL llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominatedBySlowTreeWalk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  do
  {
    v3 = a3;
    a3 = *(_QWORD *)(a3 + 8);
  }
  while (a3 && *(_DWORD *)(a3 + 16) >= *(_DWORD *)(a2 + 16));
  return v3 == a2;
}

BOOL llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;

  if (a2 == a3)
    return 1;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = (uint64_t *)(v3 + 16 * v5);
    v7 = *v6;
    if (*v6 == a2)
      goto LABEL_10;
    v8 = 1;
    while (v7 != -4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(_QWORD *)(v3 + 16 * v5);
      if (v7 == a2)
      {
        v6 = (uint64_t *)(v3 + 16 * v5);
        goto LABEL_10;
      }
    }
  }
  v6 = (uint64_t *)(v3 + 16 * v4);
LABEL_10:
  v11 = (uint64_t *)(v3 + 16 * v4);
  if (v6 == v11)
  {
    v12 = 0;
    if (!(_DWORD)v4)
      return 1;
  }
  else
  {
    v12 = v6[1];
    if (!(_DWORD)v4)
      return 1;
  }
  v13 = v4 - 1;
  LODWORD(v4) = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  v14 = (uint64_t *)(v3 + 16 * v4);
  v15 = *v14;
  if (*v14 != a3)
  {
    v16 = 1;
    while (v15 != -4096)
    {
      v17 = v4 + v16++;
      v4 = v17 & v13;
      v15 = *(_QWORD *)(v3 + 16 * v4);
      if (v15 == a3)
      {
        v14 = (uint64_t *)(v3 + 16 * v4);
        goto LABEL_19;
      }
    }
    return 1;
  }
LABEL_19:
  if (v14 == v11)
    return 1;
  v18 = v14[1];
  if (v18 == v12 || v18 == 0)
    return 1;
  if (!v12)
    return 0;
  if (*(_QWORD *)(v18 + 8) == v12)
    return 1;
  if (*(_QWORD *)(v12 + 8) == v18)
    return 0;
  v20 = *(_DWORD *)(v12 + 16);
  if (v20 >= *(_DWORD *)(v18 + 16))
    return 0;
  if (*(_BYTE *)(a1 + 64))
    goto LABEL_29;
  v21 = *(_DWORD *)(a1 + 68) + 1;
  *(_DWORD *)(a1 + 68) = v21;
  if (v21 > 0x20)
  {
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::updateDFSNumbers(a1);
LABEL_29:
    if (*(_DWORD *)(v18 + 72) >= *(_DWORD *)(v12 + 72))
      return *(_DWORD *)(v18 + 76) <= *(_DWORD *)(v12 + 76);
    return 0;
  }
  do
  {
    v22 = v18;
    v18 = *(_QWORD *)(v18 + 8);
  }
  while (v18 && *(_DWORD *)(v18 + 16) >= v20);
  return v22 == v12;
}

{
  return __ZNK4llvm17DominatorTreeBaseINS_10BasicBlockELb0EE9dominatesEPKS1_S4_(a1, a2, a3);
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::getRoot(uint64_t a1)
{
  return **(_QWORD **)a1;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t *v13;
  _DWORD *v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  _DWORD *v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  _DWORD *v24;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 80);
  if (v3)
    v4 = v3 - 24;
  else
    v4 = 0;
  if (v4 == a2 || v4 == a3)
    return v4;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v7)
  {
    LODWORD(v8) = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v9 = (uint64_t *)(v6 + 16 * v8);
    v10 = *v9;
    if (*v9 == a2)
      goto LABEL_15;
    v11 = 1;
    while (v10 != -4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v7 - 1);
      v10 = *(_QWORD *)(v6 + 16 * v8);
      if (v10 == a2)
      {
        v9 = (uint64_t *)(v6 + 16 * v8);
        goto LABEL_15;
      }
    }
  }
  v9 = (uint64_t *)(v6 + 16 * v7);
LABEL_15:
  v13 = (uint64_t *)(v6 + 16 * v7);
  if (v9 == v13)
  {
    v14 = 0;
    if (!(_DWORD)v7)
      goto LABEL_26;
  }
  else
  {
    v14 = (_DWORD *)v9[1];
    if (!(_DWORD)v7)
      goto LABEL_26;
  }
  v15 = v7 - 1;
  LODWORD(v7) = (v7 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  v16 = (uint64_t *)(v6 + 16 * v7);
  v17 = *v16;
  if (*v16 != a3)
  {
    v18 = 1;
    while (v17 != -4096)
    {
      v19 = v7 + v18++;
      v7 = v19 & v15;
      v17 = *(_QWORD *)(v6 + 16 * v7);
      if (v17 == a3)
      {
        v16 = (uint64_t *)(v6 + 16 * v7);
        goto LABEL_24;
      }
    }
    goto LABEL_26;
  }
LABEL_24:
  if (v16 == v13)
  {
LABEL_26:
    v20 = 0;
    goto LABEL_27;
  }
  v20 = (_DWORD *)v16[1];
LABEL_27:
  if (v14 == v20)
  {
    v20 = v14;
  }
  else
  {
    do
    {
      v21 = v14[4];
      v22 = v20[4];
      v23 = v21 >= v22;
      if (v21 >= v22)
        v24 = v14;
      else
        v24 = v20;
      if (!v23)
        v20 = v14;
      v14 = (_DWORD *)*((_QWORD *)v24 + 1);
    }
    while (v14 != v20);
  }
  return *(_QWORD *)v20;
}

{
  return __ZNK4llvm17DominatorTreeBaseINS_10BasicBlockELb0EE26findNearestCommonDominatorEPS1_S3_(a1, a2, a3);
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::isVirtualRoot()
{
  return 0;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::applyUpdates(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  _BYTE v5[296];
  uint64_t v6;
  void *v7;
  _QWORD v8[9];

  v8[8] = *MEMORY[0x1E0C80C00];
  sub_1C4E25D14((uint64_t)v5, a2, a3, 1u);
  llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(a1, (uint64_t)v5, 0);
  if (v7 != v8)
    free(v7);
  sub_1C4E28CA4((uint64_t)&v6);
  return sub_1C4E28CA4((uint64_t)v5);
}

void llvm::DominatorTreeBase<llvm::BasicBlock,false>::applyUpdates(uint64_t a1, _BYTE *a2, uint64_t a3, unint64_t *a4, uint64_t a5)
{
  _BYTE v8[296];
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _BYTE v14[48];
  _BYTE v15[296];
  uint64_t v16;
  void *v17;
  _QWORD v18[9];

  v18[8] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v12 = v14;
    v13 = 0x300000000;
    sub_1C612E234((unsigned int *)&v12, a2, &a2[16 * a3]);
    sub_1C4EE568C((unsigned int *)&v12, (uint64_t)v12 + 16 * v13, a4, &a4[2 * a5]);
    sub_1C4E25D14((uint64_t)v15, (unint64_t *)v12, v13, 1u);
    sub_1C4E25D14((uint64_t)v8, a4, a5, 0);
    llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(a1, (uint64_t)v15, (uint64_t)v8);
    if (v10 != &v11)
      free(v10);
    sub_1C4E28CA4((uint64_t)&v9);
    sub_1C4E28CA4((uint64_t)v8);
    if (v17 != v18)
      free(v17);
    sub_1C4E28CA4((uint64_t)&v16);
    sub_1C4E28CA4((uint64_t)v15);
    if (v12 != v14)
      free(v12);
  }
  else
  {
    sub_1C4E25D14((uint64_t)v15, a4, a5, 0);
    llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(a1, (uint64_t)v15, (uint64_t)v15);
    sub_1C4EE41BC((uint64_t)v15);
  }
}

{
  __ZN4llvm17DominatorTreeBaseINS_10BasicBlockELb0EE12applyUpdatesENS_8ArrayRefINS_3cfg6UpdateIPS1_EEEES8_(a1, a2, a3, a4, a5);
}

void llvm::DominatorTreeBase<llvm::BasicBlock,false>::insertEdge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C53BAD9C(a1, 0, a2, a3);
}

void llvm::DomTreeBuilder::InsertEdge<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C53BAD9C(a1, 0, a2, a3);
}

void llvm::DominatorTreeBase<llvm::BasicBlock,false>::deleteEdge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C53BB778(a1, 0, a2, a3);
}

void llvm::DomTreeBuilder::DeleteEdge<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C53BB778(a1, 0, a2, a3);
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::addNewBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    v6 = (uint64_t *)(v3 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
      goto LABEL_8;
    v8 = 1;
    while (v7 != -4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(_QWORD *)(v3 + 16 * v5);
      if (v7 == a3)
      {
        v6 = (uint64_t *)(v3 + 16 * v5);
        goto LABEL_8;
      }
    }
  }
  v6 = (uint64_t *)(v3 + 16 * v4);
LABEL_8:
  if (v6 == (uint64_t *)(v3 + 16 * v4))
    v10 = 0;
  else
    v10 = v6[1];
  *(_BYTE *)(a1 + 64) = 0;
  return llvm::DominatorTreeBase<llvm::BasicBlock,false>::createChild(a1, a2, v10);
}

{
  return __ZN4llvm17DominatorTreeBaseINS_10BasicBlockELb0EE11addNewBlockEPS1_S3_(a1, a2, a3);
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::createChild(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v25;
  void *v26;
  uint64_t v27;

  v27 = a2;
  v6 = operator new();
  v7 = v6;
  *(_QWORD *)v6 = a2;
  *(_QWORD *)(v6 + 8) = a3;
  if (a3)
    v8 = *(_DWORD *)(a3 + 16) + 1;
  else
    v8 = 0;
  *(_DWORD *)(v6 + 16) = v8;
  *(_QWORD *)(v6 + 24) = v6 + 40;
  *(_QWORD *)(v6 + 32) = 0x400000000;
  *(_QWORD *)(v6 + 72) = -1;
  v9 = *(unsigned int *)(a3 + 32);
  if (v9 >= *(_DWORD *)(a3 + 36))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 24, a3 + 40, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a3 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8 * v9) = v7;
  ++*(_DWORD *)(a3 + 32);
  v12 = *(_QWORD *)(a1 + 24);
  v11 = a1 + 24;
  v10 = v12;
  v13 = *(_DWORD *)(v11 + 16);
  if (v13)
  {
    v14 = v13 - 1;
    v15 = v14 & ((a2 >> 4) ^ (a2 >> 9));
    v16 = (_QWORD *)(v10 + 16 * v15);
    v17 = *v16;
    if (*v16 == a2)
      goto LABEL_20;
    v18 = 0;
    v19 = 1;
    while (v17 != -4096)
    {
      if (v18)
        v20 = 0;
      else
        v20 = v17 == -8192;
      if (v20)
        v18 = v16;
      v21 = v15 + v19++;
      v15 = v21 & v14;
      v16 = (_QWORD *)(v10 + 16 * v15);
      v17 = *v16;
      if (*v16 == a2)
        goto LABEL_20;
    }
    if (v18)
      v22 = v18;
    else
      v22 = v16;
  }
  else
  {
    v22 = 0;
  }
  v16 = sub_1C52A334C(v11, (uint64_t)&v27, &v27, v22);
  *v16 = v27;
  v16[1] = 0;
LABEL_20:
  v23 = v16[1];
  v16[1] = v7;
  if (v23)
  {
    v25 = v16;
    v26 = *(void **)(v23 + 24);
    if (v26 != (void *)(v23 + 40))
      free(v26);
    MEMORY[0x1CAA32FC0](v23, 0x10A0C40528A66C4);
    return v25[1];
  }
  return v7;
}

{
  return __ZN4llvm17DominatorTreeBaseINS_10BasicBlockELb0EE11createChildEPS1_PNS_15DomTreeNodeBaseIS1_EE(a1, a2, a3);
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::createNode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v20;
  void *v21;
  uint64_t v22;

  v22 = a2;
  v4 = operator new();
  *(_QWORD *)v4 = a2;
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = v4 + 40;
  *(_QWORD *)(v4 + 32) = 0x400000000;
  *(_QWORD *)(v4 + 72) = -1;
  v7 = *(_QWORD *)(a1 + 24);
  v6 = a1 + 24;
  v5 = v7;
  v8 = *(_DWORD *)(v6 + 16);
  if (v8)
  {
    v9 = v8 - 1;
    v10 = v9 & ((a2 >> 4) ^ (a2 >> 9));
    v11 = (_QWORD *)(v5 + 16 * v10);
    v12 = *v11;
    if (*v11 == a2)
      goto LABEL_16;
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = v11;
      v16 = v10 + v14++;
      v10 = v16 & v9;
      v11 = (_QWORD *)(v5 + 16 * v10);
      v12 = *v11;
      if (*v11 == a2)
        goto LABEL_16;
    }
    if (v13)
      v17 = v13;
    else
      v17 = v11;
  }
  else
  {
    v17 = 0;
  }
  v11 = sub_1C52A334C(v6, (uint64_t)&v22, &v22, v17);
  *v11 = v22;
  v11[1] = 0;
LABEL_16:
  v18 = v11[1];
  v11[1] = v4;
  if (v18)
  {
    v20 = v11;
    v21 = *(void **)(v18 + 24);
    if (v21 != (void *)(v18 + 40))
      free(v21);
    MEMORY[0x1CAA32FC0](v18, 0x10A0C40528A66C4);
    return v20[1];
  }
  return v4;
}

{
  return __ZN4llvm17DominatorTreeBaseINS_10BasicBlockELb0EE10createNodeEPS1_(a1, a2);
}

_DWORD *llvm::DominatorTreeBase<llvm::BasicBlock,false>::addRoot(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;

  v3 = result;
  v4 = result[2];
  if (v4 >= result[3])
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v4 + 1, 8);
    LODWORD(v4) = v3[2];
  }
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = a2;
  ++v3[2];
  return result;
}

void llvm::DominatorTreeBase<llvm::BasicBlock,false>::changeImmediateDominator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)(a1 + 64) = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 != a3)
  {
    v6 = *(_QWORD **)(v3 + 24);
    v7 = *(unsigned int *)(v3 + 32);
    v8 = &v6[v7];
    if ((_DWORD)v7)
    {
      v9 = 8 * v7;
      while (*v6 != a2)
      {
        ++v6;
        v9 -= 8;
        if (!v9)
        {
          v6 = v8;
          break;
        }
      }
    }
    if (v8 != v6 + 1)
    {
      memmove(v6, v6 + 1, (char *)v8 - (char *)(v6 + 1));
      LODWORD(v7) = *(_DWORD *)(v3 + 32);
    }
    *(_DWORD *)(v3 + 32) = v7 - 1;
    *(_QWORD *)(a2 + 8) = a3;
    v10 = *(unsigned int *)(a3 + 32);
    if (v10 >= *(_DWORD *)(a3 + 36))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 24, a3 + 40, v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a3 + 32);
    }
    *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8 * v10) = a2;
    ++*(_DWORD *)(a3 + 32);
    llvm::DomTreeNodeBase<llvm::BasicBlock>::UpdateLevel(a2);
  }
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = (uint64_t *)(v3 + 16 * v5);
    v7 = *v6;
    if (*v6 == a2)
      goto LABEL_8;
    v8 = 1;
    while (v7 != -4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(_QWORD *)(v3 + 16 * v5);
      if (v7 == a2)
      {
        v6 = (uint64_t *)(v3 + 16 * v5);
        goto LABEL_8;
      }
    }
  }
  v6 = (uint64_t *)(v3 + 16 * v4);
LABEL_8:
  v10 = (uint64_t *)(v3 + 16 * v4);
  if (v6 == v10)
  {
    v11 = 0;
    if (!(_DWORD)v4)
      goto LABEL_19;
  }
  else
  {
    v11 = v6[1];
    if (!(_DWORD)v4)
      goto LABEL_19;
  }
  v12 = v4 - 1;
  LODWORD(v4) = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  v13 = (uint64_t *)(v3 + 16 * v4);
  v14 = *v13;
  if (*v13 == a3)
  {
LABEL_17:
    if (v13 != v10)
    {
      v17 = v13[1];
      goto LABEL_20;
    }
  }
  else
  {
    v15 = 1;
    while (v14 != -4096)
    {
      v16 = v4 + v15++;
      v4 = v16 & v12;
      v14 = *(_QWORD *)(v3 + 16 * v4);
      if (v14 == a3)
      {
        v13 = (uint64_t *)(v3 + 16 * v4);
        goto LABEL_17;
      }
    }
  }
LABEL_19:
  v17 = 0;
LABEL_20:
  *(_BYTE *)(a1 + 64) = 0;
  v18 = *(_QWORD *)(v11 + 8);
  if (v18 != v17)
  {
    v19 = *(_QWORD **)(v18 + 24);
    v20 = *(unsigned int *)(v18 + 32);
    v21 = &v19[v20];
    if ((_DWORD)v20)
    {
      v22 = 8 * v20;
      while (*v19 != v11)
      {
        ++v19;
        v22 -= 8;
        if (!v22)
        {
          v19 = v21;
          break;
        }
      }
    }
    if (v21 != v19 + 1)
    {
      memmove(v19, v19 + 1, (char *)v21 - (char *)(v19 + 1));
      LODWORD(v20) = *(_DWORD *)(v18 + 32);
    }
    *(_DWORD *)(v18 + 32) = v20 - 1;
    *(_QWORD *)(v11 + 8) = v17;
    v23 = *(unsigned int *)(v17 + 32);
    if (v23 >= *(_DWORD *)(v17 + 36))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v17 + 24, v17 + 40, v23 + 1, 8);
      LODWORD(v23) = *(_DWORD *)(v17 + 32);
    }
    *(_QWORD *)(*(_QWORD *)(v17 + 24) + 8 * v23) = v11;
    ++*(_DWORD *)(v17 + 32);
    llvm::DomTreeNodeBase<llvm::BasicBlock>::UpdateLevel(v11);
  }
}

{
  __ZN4llvm17DominatorTreeBaseINS_10BasicBlockELb0EE24changeImmediateDominatorEPS1_S3_(a1, a2, a3);
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::eraseNode(int32x2_t *a1, uint64_t a2)
{
  int32x2_t v2;
  int32x2_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;

  v17 = a2;
  v3 = a1 + 3;
  v2 = a1[3];
  v4 = a1[5].u32[0];
  if ((_DWORD)v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = (uint64_t *)(*(_QWORD *)&v2 + 16 * v5);
    v7 = *v6;
    if (*v6 == a2)
      goto LABEL_8;
    v8 = 1;
    while (v7 != -4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(_QWORD *)(*(_QWORD *)&v2 + 16 * v5);
      if (v7 == a2)
      {
        v6 = (uint64_t *)(*(_QWORD *)&v2 + 16 * v5);
        goto LABEL_8;
      }
    }
  }
  v6 = (uint64_t *)(*(_QWORD *)&v2 + 16 * v4);
LABEL_8:
  if (v6 == (uint64_t *)(*(_QWORD *)&v2 + 16 * v4))
    v10 = 0;
  else
    v10 = v6[1];
  a1[8].i8[0] = 0;
  v11 = *(_QWORD *)(v10 + 8);
  if (v11)
  {
    v12 = *(_QWORD **)(v11 + 24);
    v13 = *(unsigned int *)(v11 + 32);
    v14 = &v12[v13];
    if ((_DWORD)v13)
    {
      v15 = 8 * v13;
      while (*v12 != v10)
      {
        ++v12;
        v15 -= 8;
        if (!v15)
        {
          v12 = v14;
          break;
        }
      }
    }
    if (v14 != v12 + 1)
    {
      memmove(v12, v12 + 1, (char *)v14 - (char *)(v12 + 1));
      LODWORD(v13) = *(_DWORD *)(v11 + 32);
    }
    *(_DWORD *)(v11 + 32) = v13 - 1;
  }
  return sub_1C4867FFC(v3, &v17);
}

{
  return __ZN4llvm17DominatorTreeBaseINS_10BasicBlockELb0EE9eraseNodeEPS1_(a1, a2);
}

void sub_1C53B3EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  llvm::Instruction *v6;
  uint64_t Successor;
  uint64_t i;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  int v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v23;
  uint64_t NearestCommonDominator;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  _QWORD v44[5];

  v44[4] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 40);
  if (v4 == a2 + 40)
  {
    v6 = 0;
  }
  else
  {
    if (v4)
      v5 = (unsigned __int8 *)(v4 - 24);
    else
      v5 = 0;
    if (v5[16] - 29 >= 0xB)
      v6 = 0;
    else
      v6 = (llvm::Instruction *)v5;
  }
  Successor = llvm::Instruction::getSuccessor(v6, 0);
  for (i = *(_QWORD *)(a2 + 8); i; i = *(_QWORD *)(i + 8))
  {
    v9 = *(_QWORD *)(i + 24);
    v10 = *(unsigned __int8 *)(v9 + 16);
    if (v9)
      v11 = v10 >= 0x1C;
    else
      v11 = 0;
    if (v11 && v10 - 29 < 0xB)
      break;
  }
  v42 = v44;
  v43 = 0x400000000;
  sub_1C4DBBCC0((unsigned int *)&v42, i, 0);
  v13 = *(_QWORD *)(Successor + 8);
  if (v13)
  {
    while (1)
    {
      v14 = *(_QWORD *)(v13 + 24);
      v15 = *(unsigned __int8 *)(v14 + 16);
      v16 = v14 && v15 >= 0x1C;
      if (v16 && v15 - 29 <= 0xA)
        break;
      v13 = *(_QWORD *)(v13 + 8);
      if (!v13)
        goto LABEL_29;
    }
LABEL_43:
    v23 = *(_QWORD *)(v14 + 40);
    if (v23 != a2
      && !llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(a1, Successor, *(_QWORD *)(v14 + 40))
      && llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(a1, v23))
    {
      v18 = 0;
      goto LABEL_30;
    }
    while (1)
    {
      v13 = *(_QWORD *)(v13 + 8);
      if (!v13)
        break;
      v14 = *(_QWORD *)(v13 + 24);
      v20 = *(unsigned __int8 *)(v14 + 16);
      if (v14)
        v21 = v20 >= 0x1C;
      else
        v21 = 0;
      if (v21 && v20 - 29 < 0xB)
        goto LABEL_43;
    }
  }
LABEL_29:
  v18 = 1;
LABEL_30:
  if ((_DWORD)v43)
  {
    v19 = 0;
    while (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(a1, *((_QWORD *)v42 + v19)))
    {
      if (++v19 >= (unint64_t)v43)
        goto LABEL_65;
    }
    NearestCommonDominator = *((_QWORD *)v42 + v19);
    if (NearestCommonDominator)
    {
      if (v43 > (int)v19 + 1)
      {
        v25 = v19 + 1;
        do
        {
          if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(a1, *((_QWORD *)v42 + v25)))
            NearestCommonDominator = llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator(a1, NearestCommonDominator, *((_QWORD *)v42 + v25));
          ++v25;
        }
        while (v25 < v43);
      }
      v26 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::addNewBlock(a1, a2, NearestCommonDominator);
      if (v18)
      {
        v27 = v26;
        v28 = *(_QWORD *)(a1 + 24);
        v29 = *(unsigned int *)(a1 + 40);
        if ((_DWORD)v29)
        {
          LODWORD(v30) = (v29 - 1) & ((Successor >> 4) ^ (Successor >> 9));
          v31 = (uint64_t *)(v28 + 16 * v30);
          v32 = *v31;
          if (Successor == *v31)
            goto LABEL_61;
          v33 = 1;
          while (v32 != -4096)
          {
            v34 = v30 + v33++;
            v30 = v34 & (v29 - 1);
            v32 = *(_QWORD *)(v28 + 16 * v30);
            if (Successor == v32)
            {
              v31 = (uint64_t *)(v28 + 16 * v30);
              goto LABEL_61;
            }
          }
        }
        v31 = (uint64_t *)(v28 + 16 * v29);
LABEL_61:
        if (v31 == (uint64_t *)(v28 + 16 * v29))
          v35 = 0;
        else
          v35 = v31[1];
        *(_BYTE *)(a1 + 64) = 0;
        v36 = *(_QWORD *)(v35 + 8);
        if (v36 != v26)
        {
          v37 = *(_QWORD **)(v36 + 24);
          v38 = *(unsigned int *)(v36 + 32);
          v39 = &v37[v38];
          if ((_DWORD)v38)
          {
            v40 = 8 * v38;
            while (*v37 != v35)
            {
              ++v37;
              v40 -= 8;
              if (!v40)
              {
                v37 = v39;
                break;
              }
            }
          }
          if (v39 != v37 + 1)
          {
            memmove(v37, v37 + 1, (char *)v39 - (char *)(v37 + 1));
            LODWORD(v38) = *(_DWORD *)(v36 + 32);
          }
          *(_DWORD *)(v36 + 32) = v38 - 1;
          *(_QWORD *)(v35 + 8) = v27;
          v41 = *(unsigned int *)(v27 + 32);
          if (v41 >= *(_DWORD *)(v27 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v27 + 24, v27 + 40, v41 + 1, 8);
            LODWORD(v41) = *(_DWORD *)(v27 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v27 + 24) + 8 * v41) = v35;
          ++*(_DWORD *)(v27 + 32);
          llvm::DomTreeNodeBase<llvm::BasicBlock>::UpdateLevel(v35);
        }
      }
    }
  }
LABEL_65:
  if (v42 != v44)
    free(v42);
}

void llvm::DominatorTreeBase<llvm::BasicBlock,false>::recalculate(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 56) = a2;
  sub_1C53BA620(a1, 0);
}

void llvm::DomTreeBuilder::Calculate<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(uint64_t a1)
{
  sub_1C53BA620(a1, 0);
}

{
  __ZN4llvm14DomTreeBuilder9CalculateINS_17DominatorTreeBaseINS_10BasicBlockELb0EEEEEvRT_(a1);
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,false>::recalculate(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  *(_QWORD *)(a1 + 56) = a2;
  return llvm::DomTreeBuilder::CalculateWithUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(a1, a3, a4);
}

uint64_t llvm::DomTreeBuilder::CalculateWithUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  _BYTE v5[8];
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[296];
  uint64_t v10;
  void *v11;
  unsigned int v12;
  _QWORD v13[9];

  v13[8] = *MEMORY[0x1E0C80C00];
  sub_1C4E25D14((uint64_t)v9, a2, a3, 1u);
  v5[0] = 0;
  v6 = v9;
  v7 = 0;
  v8 = v12;
  sub_1C53BA620(a1, (uint64_t)v5);
  if (v11 != v13)
    free(v11);
  sub_1C4E28CA4((uint64_t)&v10);
  return sub_1C4E28CA4((uint64_t)v9);
}

{
  return __ZN4llvm14DomTreeBuilder20CalculateWithUpdatesINS_17DominatorTreeBaseINS_10BasicBlockELb0EEEEEvRT_NS_8ArrayRefINS5_10UpdateTypeEEE(a1, a2, a3);
}

uint64_t llvm::DomTreeBuilder::Verify<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(uint64_t **a1, int a2)
{
  llvm::Value **v4;
  uint64_t *v5;
  llvm *v6;
  char v7;
  unsigned int *v8;
  llvm *v9;
  uint64_t *v10;
  int v11;
  llvm::Value *v12;
  void *v13;
  const char *v14;
  size_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  llvm::raw_ostream *v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  llvm::raw_ostream *v32;
  void *v33;
  uint64_t v34;
  llvm::raw_ostream *v35;
  llvm *v36;
  llvm::raw_ostream *v37;
  void *v38;
  llvm::raw_ostream *v39;
  llvm *v40;
  llvm::raw_ostream *v41;
  const char *v42;
  const char *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  BOOL v50;
  BOOL v51;
  int v52;
  llvm::raw_ostream *v53;
  void *v54;
  llvm::raw_ostream *v55;
  uint64_t v56;
  uint64_t v57;
  llvm::Value **v58;
  uint64_t v59;
  llvm::Value *v60;
  llvm::raw_ostream *v61;
  _DWORD *v62;
  _WORD *v63;
  llvm::raw_ostream *v64;
  uint64_t v65;
  llvm::Value **v66;
  uint64_t v67;
  llvm::Value *v68;
  llvm::raw_ostream *v69;
  _DWORD *v70;
  _WORD *v71;
  llvm::raw_ostream *v72;
  _BYTE *v73;
  llvm::raw_ostream *v74;
  const char *v75;
  const char *v76;
  uint64_t v77;
  int v78;
  uint64_t *v79;
  uint64_t v80;
  llvm::Value **v81;
  unsigned int v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  int v87;
  llvm::Value *v88;
  unsigned int v89;
  llvm::Value *v90;
  int v91;
  llvm::Value **v92;
  llvm::Value **v93;
  unsigned int v94;
  llvm::Value *v95;
  uint64_t v96;
  llvm::Value **v97;
  llvm::Value *v98;
  int v99;
  int v100;
  unsigned int v101;
  uint64_t *v102;
  uint64_t v103;
  llvm::raw_ostream *v104;
  llvm::raw_ostream *v105;
  void *v106;
  _DWORD *v107;
  void *v108;
  const char *v109;
  llvm::raw_ostream *v110;
  size_t v111;
  llvm::raw_ostream *v112;
  uint64_t v113;
  void *v114;
  const char *v115;
  uint64_t *v116;
  uint64_t v117;
  llvm::Value *v118;
  uint64_t v119;
  int v120;
  llvm::Value **v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  int v126;
  int v127;
  uint64_t v128;
  llvm::raw_ostream *v129;
  void *v130;
  const char *v131;
  size_t v132;
  llvm *v133;
  _BYTE *v134;
  uint64_t v135;
  uint64_t v136;
  _BYTE *v137;
  unint64_t v138;
  uint64_t v139;
  unsigned int *v140;
  uint64_t v141;
  unsigned int **v142;
  int v143;
  unsigned int *v144;
  int v145;
  int v146;
  uint64_t *v147;
  uint64_t v148;
  llvm *v149;
  uint64_t v150;
  llvm *v151;
  llvm *v152;
  uint64_t v153;
  llvm::Value *v154;
  uint64_t v155;
  int v156;
  unsigned int v157;
  uint64_t *v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  unsigned int v162;
  unsigned int v163;
  uint64_t *v164;
  int v165;
  BOOL v166;
  unsigned int v167;
  unsigned int v168;
  uint64_t v169;
  unsigned int v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t *v173;
  int v174;
  BOOL v175;
  unsigned int v176;
  uint64_t *v177;
  char *v178;
  llvm::Value **v179;
  char *v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  char *v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  unsigned int v192;
  uint64_t *v193;
  uint64_t v194;
  _QWORD *v195;
  unint64_t v196;
  _DWORD *v197;
  unint64_t v198;
  unsigned int v200;
  uint64_t v201;
  uint64_t *v202;
  int v203;
  BOOL v204;
  unsigned int v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t *v209;
  uint64_t *v210;
  uint64_t *v211;
  uint64_t v212;
  llvm::Value ***v213;
  llvm::Value ***v214;
  int v215;
  llvm::Value **v216;
  llvm::Value *v217;
  unsigned int v218;
  llvm::Value *v219;
  int v220;
  unsigned int v221;
  llvm *v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t *v227;
  llvm::raw_ostream *v228;
  llvm::raw_ostream *v229;
  uint64_t v230;
  _DWORD *v231;
  void *v232;
  void *v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  _QWORD **v238;
  llvm::Value **v239;
  llvm::Value *v240;
  uint64_t v241;
  int v242;
  unsigned int v243;
  uint64_t *v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  unsigned int v248;
  unsigned int v249;
  uint64_t *v250;
  int v251;
  BOOL v252;
  unsigned int v253;
  unsigned int v254;
  uint64_t v255;
  unsigned int v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t *v259;
  int v260;
  BOOL v261;
  unsigned int v262;
  uint64_t *v263;
  char *v264;
  llvm::Value **v265;
  char *v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  unint64_t v270;
  char *v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t *v274;
  uint64_t *v275;
  uint64_t v276;
  uint64_t v277;
  unsigned int v278;
  uint64_t *v279;
  uint64_t *v280;
  uint64_t v281;
  _QWORD *v282;
  unint64_t v283;
  _DWORD *v284;
  unint64_t v285;
  unsigned int v287;
  uint64_t v288;
  uint64_t *v289;
  int v290;
  BOOL v291;
  unsigned int v292;
  uint64_t *v293;
  uint64_t v294;
  uint64_t *v295;
  uint64_t *v296;
  llvm *v297;
  uint64_t v298;
  llvm::Value ***v299;
  llvm::Value ***v300;
  int v301;
  llvm::Value **v302;
  unsigned int v303;
  llvm::Value *v304;
  int v305;
  unsigned int v306;
  uint64_t *v307;
  llvm::raw_ostream *v308;
  uint64_t v309;
  _DWORD *v310;
  void *v311;
  _DWORD *v312;
  llvm::raw_ostream *v313;
  uint64_t v314;
  uint64_t v315;
  _OWORD *v316;
  _DWORD *v317;
  uint64_t v318;
  unint64_t v319;
  llvm::raw_ostream *v320;
  void *v321;
  void *v322;
  _WORD *v323;
  uint64_t v324;
  void *v325;
  _QWORD **v326;
  unsigned int *v327;
  uint64_t *v328;
  llvm *v329;
  uint64_t *v330;
  uint64_t *v331;
  _QWORD **v332;
  uint64_t v333;
  uint64_t v334;
  llvm::Value **v335;
  int v336;
  int v337;
  int v338;
  void *__p;
  llvm::Value **v340;
  char *v341;
  uint64_t v342[2];
  unsigned int v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  void *v348;
  uint64_t p_src;
  _QWORD v350[8];
  void *__src;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  int v356;
  uint64_t v357;
  uint64_t *v358;
  char v359;
  int v360;
  uint64_t v361;

  v361 = *MEMORY[0x1E0C80C00];
  v4 = (llvm::Value **)operator new(8uLL);
  __p = v4;
  *v4 = 0;
  v340 = v4 + 1;
  v341 = (char *)(v4 + 1);
  v344 = 0;
  v342[0] = 0;
  v342[1] = 0;
  v343 = 0;
  __src = &v353;
  v352 = 0x100000000;
  v360 = 0;
  v354 = 0;
  v355 = 0;
  v356 = 0;
  v359 = 0;
  v5 = a1[7];
  v357 = 0;
  v358 = v5;
  sub_1C53BA620((uint64_t)&__src, 0);
  v6 = (llvm *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::compare((uint64_t)a1, (uint64_t)&__src);
  v7 = (char)v6;
  if ((_DWORD)v6)
  {
    v32 = (llvm::raw_ostream *)llvm::errs(v6);
    v33 = (void *)*((_QWORD *)v32 + 4);
    if (*((_QWORD *)v32 + 3) - (_QWORD)v33 > 0x37uLL)
    {
      qmemcpy(v33, "DominatorTree is different than a freshly computed one!\n", 56);
      v34 = *((_QWORD *)v32 + 4) + 56;
      *((_QWORD *)v32 + 4) = v34;
    }
    else
    {
      v32 = llvm::raw_ostream::write(v32, "DominatorTree is different than a freshly computed one!\n", 0x38uLL);
      v34 = *((_QWORD *)v32 + 4);
    }
    if ((unint64_t)(*((_QWORD *)v32 + 3) - v34) > 9)
    {
      *(_WORD *)(v34 + 8) = 2618;
      *(_QWORD *)v34 = *(_QWORD *)"\tCurrent:\n";
      *((_QWORD *)v32 + 4) += 10;
    }
    else
    {
      v32 = llvm::raw_ostream::write(v32, "\tCurrent:\n", 0xAuLL);
    }
    v35 = (llvm::raw_ostream *)llvm::errs(v32);
    v36 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::print((uint64_t)a1, v35);
    v37 = (llvm::raw_ostream *)llvm::errs(v36);
    v38 = (void *)*((_QWORD *)v37 + 4);
    if (*((_QWORD *)v37 + 3) - (_QWORD)v38 > 0x18uLL)
    {
      qmemcpy(v38, "\n\tFreshly computed tree:\n", 25);
      *((_QWORD *)v37 + 4) += 25;
    }
    else
    {
      v37 = llvm::raw_ostream::write(v37, "\n\tFreshly computed tree:\n", 0x19uLL);
    }
    v39 = (llvm::raw_ostream *)llvm::errs(v37);
    v40 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::print((uint64_t)&__src, v39);
    v41 = (llvm::raw_ostream *)llvm::errs(v40);
    v42 = (const char *)*((_QWORD *)v41 + 4);
    v43 = (const char *)*((_QWORD *)v41 + 2);
    if (v42 != v43)
    {
      *((_QWORD *)v41 + 4) = v43;
      llvm::raw_ostream::flush_tied_then_write(v41, v43, v42 - v43);
    }
  }
  sub_1C4DC4E38(&v354);
  v9 = (llvm *)__src;
  if (__src != &v353)
    free(__src);
  if ((v7 & 1) != 0)
    goto LABEL_21;
  v10 = a1[7];
  v11 = *((_DWORD *)a1 + 2);
  if (!v10 && v11)
  {
    v12 = (llvm::Value *)llvm::errs(v9);
    v13 = (void *)*((_QWORD *)v12 + 4);
    if (*((_QWORD *)v12 + 3) - (_QWORD)v13 <= 0x21uLL)
    {
      v14 = "Tree has no parent but has roots!\n";
      v15 = 34;
      goto LABEL_18;
    }
    qmemcpy(v13, "Tree has no parent but has roots!\n", 34);
    v85 = *((_QWORD *)v12 + 4) + 34;
LABEL_147:
    *((_QWORD *)v12 + 4) = v85;
    goto LABEL_19;
  }
  if (!v11)
  {
    v12 = (llvm::Value *)llvm::errs(v9);
    v21 = (void *)*((_QWORD *)v12 + 4);
    if (*((_QWORD *)v12 + 3) - (_QWORD)v21 <= 0x19uLL)
    {
      v14 = "Tree doesn't have a root!\n";
      v15 = 26;
      goto LABEL_18;
    }
    qmemcpy(v21, "Tree doesn't have a root!\n", 26);
    v85 = *((_QWORD *)v12 + 4) + 26;
    goto LABEL_147;
  }
  v16 = *a1;
  v17 = **a1;
  v18 = v10[10];
  if (v18)
    v19 = v18 - 24;
  else
    v19 = 0;
  if (v17 != v19)
  {
    v12 = (llvm::Value *)llvm::errs(v9);
    v20 = (void *)*((_QWORD *)v12 + 4);
    if (*((_QWORD *)v12 + 3) - (_QWORD)v20 <= 0x2BuLL)
    {
      v14 = "Tree's root is not its parent's entry node!\n";
      v15 = 44;
      goto LABEL_18;
    }
    qmemcpy(v20, "Tree's root is not its parent's entry node!\n", 44);
    v85 = *((_QWORD *)v12 + 4) + 44;
    goto LABEL_147;
  }
  v336 = a2;
  v348 = v350;
  v350[0] = v17;
  p_src = 0x100000001;
  if (v11 != 1)
    goto LABEL_54;
  __src = &v355;
  v352 = (uint64_t)&v355;
  v353 = 4;
  LODWORD(v354) = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&__src, *v16);
  v44 = (uint64_t *)v348;
  v45 = 8 * p_src - 8;
  do
  {
    v46 = *v44++;
    v47 = (char *)sub_1C477672C((uint64_t)&__src, v46);
    v9 = (llvm *)v352;
    v48 = (uint64_t *)((char *)&v353 + 4);
    if ((void *)v352 != __src)
      v48 = &v353;
    v49 = (char *)(v352 + 8 * *(unsigned int *)v48);
    v50 = v47 != v49;
    v51 = v47 == v49 || v45 == 0;
    v45 -= 8;
  }
  while (!v51);
  if ((void *)v352 != __src)
    free((void *)v352);
  if (v50)
  {
    v52 = 1;
  }
  else
  {
LABEL_54:
    v53 = (llvm::raw_ostream *)llvm::errs(v9);
    v54 = (void *)*((_QWORD *)v53 + 4);
    if (*((_QWORD *)v53 + 3) - (_QWORD)v54 > 0x34uLL)
    {
      qmemcpy(v54, "Tree has different roots than freshly computed ones!\n", 53);
      *((_QWORD *)v53 + 4) += 53;
    }
    else
    {
      v53 = llvm::raw_ostream::write(v53, "Tree has different roots than freshly computed ones!\n", 0x35uLL);
    }
    v55 = (llvm::raw_ostream *)llvm::errs(v53);
    v56 = *((_QWORD *)v55 + 4);
    if ((unint64_t)(*((_QWORD *)v55 + 3) - v56) > 0xB)
    {
      *(_DWORD *)(v56 + 8) = 540701556;
      *(_QWORD *)v56 = *(_QWORD *)"\tPDT roots: ";
      *((_QWORD *)v55 + 4) += 12;
    }
    else
    {
      v55 = llvm::raw_ostream::write(v55, "\tPDT roots: ", 0xCuLL);
    }
    v57 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v57)
    {
      v58 = (llvm::Value **)*a1;
      v59 = 8 * v57;
      do
      {
        v60 = *v58;
        v55 = (llvm::raw_ostream *)llvm::errs(v55);
        v61 = v55;
        if (v60)
        {
          v55 = (llvm::raw_ostream *)llvm::Value::printAsOperand(v60, v55, 0, 0);
        }
        else
        {
          v62 = (_DWORD *)*((_QWORD *)v55 + 4);
          if (*((_QWORD *)v55 + 3) - (_QWORD)v62 > 6uLL)
          {
            *(_DWORD *)((char *)v62 + 3) = 1920233580;
            *v62 = 1819047278;
            *((_QWORD *)v55 + 4) += 7;
          }
          else
          {
            v55 = llvm::raw_ostream::write(v55, "nullptr", 7uLL);
          }
        }
        v63 = (_WORD *)*((_QWORD *)v61 + 4);
        if (*((_QWORD *)v61 + 3) - (_QWORD)v63 > 1uLL)
        {
          *v63 = 8236;
          *((_QWORD *)v61 + 4) += 2;
        }
        else
        {
          v55 = llvm::raw_ostream::write(v61, ", ", 2uLL);
        }
        ++v58;
        v59 -= 8;
      }
      while (v59);
    }
    v64 = (llvm::raw_ostream *)llvm::errs(v55);
    v65 = *((_QWORD *)v64 + 4);
    if ((unint64_t)(*((_QWORD *)v64 + 3) - v65) > 0x11)
    {
      *(_WORD *)(v65 + 16) = 8250;
      *(_OWORD *)v65 = *(_OWORD *)"\n\tComputed roots: ";
      *((_QWORD *)v64 + 4) += 18;
    }
    else
    {
      v64 = llvm::raw_ostream::write(v64, "\n\tComputed roots: ", 0x12uLL);
    }
    if ((_DWORD)p_src)
    {
      v66 = (llvm::Value **)v348;
      v67 = 8 * p_src;
      do
      {
        v68 = *v66;
        v64 = (llvm::raw_ostream *)llvm::errs(v64);
        v69 = v64;
        if (v68)
        {
          v64 = (llvm::raw_ostream *)llvm::Value::printAsOperand(v68, v64, 0, 0);
        }
        else
        {
          v70 = (_DWORD *)*((_QWORD *)v64 + 4);
          if (*((_QWORD *)v64 + 3) - (_QWORD)v70 > 6uLL)
          {
            *(_DWORD *)((char *)v70 + 3) = 1920233580;
            *v70 = 1819047278;
            *((_QWORD *)v64 + 4) += 7;
          }
          else
          {
            v64 = llvm::raw_ostream::write(v64, "nullptr", 7uLL);
          }
        }
        v71 = (_WORD *)*((_QWORD *)v69 + 4);
        if (*((_QWORD *)v69 + 3) - (_QWORD)v71 > 1uLL)
        {
          *v71 = 8236;
          *((_QWORD *)v69 + 4) += 2;
        }
        else
        {
          v64 = llvm::raw_ostream::write(v69, ", ", 2uLL);
        }
        ++v66;
        v67 -= 8;
      }
      while (v67);
    }
    v72 = (llvm::raw_ostream *)llvm::errs(v64);
    v73 = (_BYTE *)*((_QWORD *)v72 + 4);
    if (*((_BYTE **)v72 + 3) == v73)
    {
      v72 = llvm::raw_ostream::write(v72, "\n", 1uLL);
    }
    else
    {
      *v73 = 10;
      ++*((_QWORD *)v72 + 4);
    }
    v74 = (llvm::raw_ostream *)llvm::errs(v72);
    v75 = (const char *)*((_QWORD *)v74 + 4);
    v76 = (const char *)*((_QWORD *)v74 + 2);
    v8 = (unsigned int *)(v75 - v76);
    if (v75 != v76)
    {
      *((_QWORD *)v74 + 4) = v76;
      llvm::raw_ostream::flush_tied_then_write(v74, v76, (uint64_t)v8);
    }
    v52 = 0;
  }
  if (v348 != v350)
    free(v348);
  if (!v52)
    goto LABEL_21;
  __src = 0;
  sub_1C53C4ED0((char **)&__p, &__src, &v352);
  sub_1C53C6C3C((uint64_t)v342);
  v77 = sub_1C53BF2F0((uint64_t)&__p, **a1, 0, (unsigned int (*)(uint64_t, uint64_t))sub_1C53BE55C, 0, 0);
  v78 = *((_DWORD *)a1 + 8);
  v79 = a1[3];
  v80 = *((unsigned int *)a1 + 10);
  v81 = (llvm::Value **)&v79[2 * v80];
  v82 = *((_DWORD *)a1 + 10);
  v83 = (uint64_t *)v81;
  if (v78)
  {
    if ((_DWORD)v80)
    {
      v84 = 16 * v80;
      v83 = a1[3];
      while ((*v83 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v83 += 2;
        v84 -= 16;
        if (!v84)
        {
          v82 = *((_DWORD *)a1 + 10);
          v83 = &v79[2 * v80];
          goto LABEL_101;
        }
      }
      v82 = *((_DWORD *)a1 + 10);
    }
    else
    {
      v82 = 0;
      v83 = a1[3];
    }
  }
LABEL_101:
  v86 = &v79[2 * v82];
  if (v83 != v86)
  {
    v87 = v343 - 1;
    while (1)
    {
      v88 = *(llvm::Value **)v83[1];
      if (!v343)
        goto LABEL_132;
      v89 = ((v88 >> 4) ^ (v88 >> 9)) & v87;
      v90 = *(llvm::Value **)(v342[0] + 72 * v89);
      if (v88 != v90)
        break;
LABEL_108:
      v92 = (llvm::Value **)(v83 + 2);
      v83 = &v79[2 * v80];
      if (v92 != v81)
      {
        v83 = (uint64_t *)v92;
        while ((*v83 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v83 += 2;
          if (v83 == (uint64_t *)v81)
          {
            v83 = &v79[2 * v80];
            break;
          }
        }
      }
      if (v83 == v86)
        goto LABEL_114;
    }
    v77 = 1;
    while (v90 != (llvm::Value *)-4096)
    {
      v91 = v89 + v77;
      v77 = (v77 + 1);
      v89 = v91 & v87;
      v90 = *(llvm::Value **)(v342[0] + 72 * v89);
      if (v88 == v90)
        goto LABEL_108;
    }
LABEL_132:
    v104 = (llvm::raw_ostream *)llvm::errs((llvm *)v77);
    v105 = v104;
    v106 = (void *)*((_QWORD *)v104 + 4);
    if (*((_QWORD *)v104 + 3) - (_QWORD)v106 > 0xCuLL)
    {
      qmemcpy(v106, "DomTree node ", 13);
      *((_QWORD *)v104 + 4) += 13;
      if (!v88)
      {
LABEL_134:
        v107 = (_DWORD *)*((_QWORD *)v105 + 4);
        if (*((_QWORD *)v105 + 3) - (_QWORD)v107 > 6uLL)
        {
          *(_DWORD *)((char *)v107 + 3) = 1920233580;
          *v107 = 1819047278;
          *((_QWORD *)v105 + 4) += 7;
        }
        else
        {
          v104 = llvm::raw_ostream::write(v105, "nullptr", 7uLL);
        }
        goto LABEL_136;
      }
    }
    else
    {
      v104 = llvm::raw_ostream::write(v104, "DomTree node ", 0xDuLL);
      if (!v88)
        goto LABEL_134;
    }
    v104 = (llvm::raw_ostream *)llvm::Value::printAsOperand(v88, v105, 0, 0);
LABEL_136:
    v108 = (void *)*((_QWORD *)v105 + 4);
    if (*((_QWORD *)v105 + 3) - (_QWORD)v108 > 0x17uLL)
    {
      qmemcpy(v108, " not found by DFS walk!\n", 24);
      v234 = *((_QWORD *)v105 + 4) + 24;
      goto LABEL_365;
    }
    v109 = " not found by DFS walk!\n";
    v110 = v105;
    v111 = 24;
    goto LABEL_142;
  }
LABEL_114:
  v93 = (llvm::Value **)__p;
  if (__p != v340)
  {
    v94 = v80 - 1;
    while (1)
    {
      v95 = *v93;
      if (*v93)
      {
        if (!(_DWORD)v80)
          break;
        LODWORD(v96) = ((v95 >> 4) ^ (v95 >> 9)) & v94;
        v97 = (llvm::Value **)&v79[2 * v96];
        v98 = *v97;
        if (v95 != *v97)
        {
          v99 = 1;
          do
          {
            if (v98 == (llvm::Value *)-4096)
              goto LABEL_138;
            v100 = v96 + v99++;
            v96 = v100 & v94;
            v98 = (llvm::Value *)v79[2 * v96];
          }
          while (v95 != v98);
          v97 = (llvm::Value **)&v79[2 * v96];
        }
        if (v97 == v81 || !v97[1])
          break;
      }
      if (++v93 == v340)
        goto LABEL_126;
    }
LABEL_138:
    v112 = (llvm::raw_ostream *)llvm::errs((llvm *)v77);
    v105 = v112;
    v113 = *((_QWORD *)v112 + 4);
    if ((unint64_t)(*((_QWORD *)v112 + 3) - v113) > 8)
    {
      *(_BYTE *)(v113 + 8) = 32;
      *(_QWORD *)v113 = *(_QWORD *)"CFG node ";
      *((_QWORD *)v112 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(v112, "CFG node ", 9uLL);
    }
    v104 = (llvm::raw_ostream *)llvm::Value::printAsOperand(v95, v105, 0, 0);
    v114 = (void *)*((_QWORD *)v105 + 4);
    if (*((_QWORD *)v105 + 3) - (_QWORD)v114 > 0x1AuLL)
    {
      qmemcpy(v114, " not found in the DomTree!\n", 27);
      v234 = *((_QWORD *)v105 + 4) + 27;
      goto LABEL_365;
    }
    v109 = " not found in the DomTree!\n";
    v110 = v105;
    v111 = 27;
LABEL_142:
    v104 = llvm::raw_ostream::write(v110, v109, v111);
    goto LABEL_143;
  }
LABEL_126:
  v101 = *((_DWORD *)a1 + 10);
  v102 = &v79[2 * v80];
  if (v78)
  {
    if ((_DWORD)v80)
    {
      v103 = 16 * v80;
      v102 = a1[3];
      while ((*v102 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v102 += 2;
        v103 -= 16;
        if (!v103)
        {
          v101 = *((_DWORD *)a1 + 10);
          v102 = &v79[2 * v80];
          goto LABEL_153;
        }
      }
      v101 = *((_DWORD *)a1 + 10);
    }
    else
    {
      v101 = 0;
      v102 = a1[3];
    }
  }
LABEL_153:
  v116 = &v79[2 * v101];
LABEL_154:
  while (v102 != v116)
  {
    v117 = v102[1];
    v118 = *(llvm::Value **)v117;
    if (*(_QWORD *)v117)
    {
      v119 = *(_QWORD *)(v117 + 8);
      v120 = *(_DWORD *)(v117 + 16);
      if (v119)
      {
        if (v120 != *(_DWORD *)(v119 + 16) + 1)
        {
          v313 = (llvm::raw_ostream *)llvm::errs((llvm *)v77);
          v105 = v313;
          v314 = *((_QWORD *)v313 + 4);
          if ((unint64_t)(*((_QWORD *)v313 + 3) - v314) > 4)
          {
            *(_BYTE *)(v314 + 4) = 32;
            *(_DWORD *)v314 = 1701080910;
            *((_QWORD *)v313 + 4) += 5;
          }
          else
          {
            llvm::raw_ostream::write(v313, "Node ", 5uLL);
          }
          llvm::Value::printAsOperand(v118, v105, 0, 0);
          v315 = *((_QWORD *)v105 + 4);
          if ((unint64_t)(*((_QWORD *)v105 + 3) - v315) > 0xA)
          {
            *(_DWORD *)(v315 + 7) = 543974774;
            *(_QWORD *)v315 = *(_QWORD *)" has level ";
            *((_QWORD *)v105 + 4) += 11;
          }
          else
          {
            llvm::raw_ostream::write(v105, " has level ", 0xBuLL);
          }
          sub_1C5E21910(v105, *(unsigned int *)(v117 + 16), 0, 0, 0);
          v316 = (_OWORD *)*((_QWORD *)v105 + 4);
          if (*((_QWORD *)v105 + 3) - (_QWORD)v316 > 0xFuLL)
          {
            *v316 = *(_OWORD *)" while its IDom ";
            *((_QWORD *)v105 + 4) += 16;
          }
          else
          {
            llvm::raw_ostream::write(v105, " while its IDom ", 0x10uLL);
          }
          if (*(_QWORD *)v119)
          {
            llvm::Value::printAsOperand(*(llvm::Value **)v119, v105, 0, 0);
          }
          else
          {
            v317 = (_DWORD *)*((_QWORD *)v105 + 4);
            if (*((_QWORD *)v105 + 3) - (_QWORD)v317 > 6uLL)
            {
              *(_DWORD *)((char *)v317 + 3) = 1920233580;
              *v317 = 1819047278;
              *((_QWORD *)v105 + 4) += 7;
            }
            else
            {
              llvm::raw_ostream::write(v105, "nullptr", 7uLL);
            }
          }
          v318 = *((_QWORD *)v105 + 4);
          if ((unint64_t)(*((_QWORD *)v105 + 3) - v318) > 0xA)
          {
            *(_DWORD *)(v318 + 7) = 543974774;
            *(_QWORD *)v318 = *(_QWORD *)" has level ";
            *((_QWORD *)v105 + 4) += 11;
          }
          else
          {
            llvm::raw_ostream::write(v105, " has level ", 0xBuLL);
          }
          v319 = *(unsigned int *)(v119 + 16);
          goto LABEL_514;
        }
      }
      else if (v120)
      {
        v320 = (llvm::raw_ostream *)llvm::errs((llvm *)v77);
        v105 = v320;
        v321 = (void *)*((_QWORD *)v320 + 4);
        if (*((_QWORD *)v320 + 3) - (_QWORD)v321 > 0x14uLL)
        {
          qmemcpy(v321, "Node without an IDom ", 21);
          *((_QWORD *)v320 + 4) += 21;
        }
        else
        {
          llvm::raw_ostream::write(v320, "Node without an IDom ", 0x15uLL);
        }
        llvm::Value::printAsOperand(v118, v105, 0, 0);
        v322 = (void *)*((_QWORD *)v105 + 4);
        if (*((_QWORD *)v105 + 3) - (_QWORD)v322 > 0x14uLL)
        {
          qmemcpy(v322, " has a nonzero level ", 21);
          *((_QWORD *)v105 + 4) += 21;
        }
        else
        {
          llvm::raw_ostream::write(v105, " has a nonzero level ", 0x15uLL);
        }
        v319 = *(unsigned int *)(v117 + 16);
LABEL_514:
        v104 = sub_1C5E21910(v105, v319, 0, 0, 0);
        v323 = (_WORD *)*((_QWORD *)v105 + 4);
        if (*((_QWORD *)v105 + 3) - (_QWORD)v323 <= 1uLL)
        {
          v109 = "!\n";
          v110 = v105;
          v111 = 2;
          goto LABEL_142;
        }
        *v323 = 2593;
        v234 = *((_QWORD *)v105 + 4) + 2;
LABEL_365:
        *((_QWORD *)v105 + 4) = v234;
        goto LABEL_143;
      }
    }
    v121 = (llvm::Value **)(v102 + 2);
    v102 = &v79[2 * v80];
    if (v121 != v81)
    {
      v102 = (uint64_t *)v121;
      while ((*v102 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v102 += 2;
        if (v102 == (uint64_t *)v81)
        {
          v102 = &v79[2 * v80];
          goto LABEL_154;
        }
      }
    }
  }
  if (!*((_BYTE *)a1 + 64) || !a1[7])
    goto LABEL_215;
  if (!(_DWORD)v80)
    goto LABEL_177;
  v122 = **a1;
  LODWORD(v123) = ((v122 >> 4) ^ (v122 >> 9)) & (v80 - 1);
  v124 = &v79[2 * v123];
  v125 = *v124;
  if (v122 != *v124)
  {
    v126 = 1;
    while (v125 != -4096)
    {
      v127 = v123 + v126++;
      v123 = v127 & (v80 - 1);
      v125 = v79[2 * v123];
      if (v122 == v125)
      {
        v124 = &v79[2 * v123];
        goto LABEL_178;
      }
    }
LABEL_177:
    v124 = &v79[2 * v80];
  }
LABEL_178:
  v128 = v124[1];
  if (*(_DWORD *)(v128 + 72))
  {
    v129 = (llvm::raw_ostream *)llvm::errs((llvm *)v77);
    v130 = (void *)*((_QWORD *)v129 + 4);
    if (*((_QWORD *)v129 + 3) - (_QWORD)v130 <= 0x27uLL)
    {
      v131 = "DFSIn number for the tree root is not:\n\t";
      v132 = 40;
      goto LABEL_181;
    }
    qmemcpy(v130, "DFSIn number for the tree root is not:\n\t", 40);
    v324 = *((_QWORD *)v129 + 4) + 40;
    goto LABEL_517;
  }
  if (v78)
  {
    if ((_DWORD)v80)
    {
      v135 = 16 * v80;
      while ((*v79 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v79 += 2;
        v135 -= 16;
        if (!v135)
          goto LABEL_215;
      }
    }
    if (v79 != (uint64_t *)v81)
    {
      while (1)
      {
        v128 = v79[1];
        v136 = *(unsigned int *)(v128 + 32);
        if (!(_DWORD)v136)
        {
          if (*(_DWORD *)(v128 + 72) + 1 == *(_DWORD *)(v128 + 76))
            goto LABEL_194;
          v129 = (llvm::raw_ostream *)llvm::errs((llvm *)v77);
          v325 = (void *)*((_QWORD *)v129 + 4);
          if (*((_QWORD *)v129 + 3) - (_QWORD)v325 <= 0x2AuLL)
          {
            v131 = "Tree leaf should have DFSOut = DFSIn + 1:\n\t";
            v132 = 43;
LABEL_181:
            llvm::raw_ostream::write(v129, v131, v132);
LABEL_182:
            v133 = sub_1C53C7270((unsigned int *)v128);
            v104 = (llvm::raw_ostream *)llvm::errs(v133);
            v134 = (_BYTE *)*((_QWORD *)v104 + 4);
            if ((unint64_t)v134 >= *((_QWORD *)v104 + 3))
            {
              v104 = llvm::raw_ostream::write(v104, 10);
            }
            else
            {
              *((_QWORD *)v104 + 4) = v134 + 1;
              *v134 = 10;
            }
LABEL_143:
            v22 = (llvm::raw_ostream *)llvm::errs(v104);
            v115 = (const char *)*((_QWORD *)v22 + 4);
            v24 = (const char *)*((_QWORD *)v22 + 2);
            if (v115 != v24)
            {
              v8 = (unsigned int *)(v115 - v24);
              goto LABEL_20;
            }
            goto LABEL_21;
          }
          qmemcpy(v325, "Tree leaf should have DFSOut = DFSIn + 1:\n\t", 43);
          v324 = *((_QWORD *)v129 + 4) + 43;
LABEL_517:
          *((_QWORD *)v129 + 4) = v324;
          goto LABEL_182;
        }
        v137 = *(_BYTE **)(v128 + 24);
        __src = &v353;
        v352 = 0x800000000;
        sub_1C618A450((unsigned int *)&__src, v137, &v137[8 * v136]);
        v138 = 126 - 2 * __clz(v352);
        v139 = (_DWORD)v352 ? v138 : 0;
        sub_1C53C7610((uint64_t *)__src, (uint64_t *)__src + v352, v139, 1);
        v348 = (void *)v128;
        p_src = (uint64_t)&__src;
        v8 = *(unsigned int **)__src;
        if (*(_DWORD *)(*(_QWORD *)__src + 72) != *(_DWORD *)(v128 + 72) + 1)
          break;
        v140 = (unsigned int *)*((_QWORD *)__src + v352 - 1);
        if (v140[19] + 1 != *(_DWORD *)(v128 + 76))
          goto LABEL_208;
        v141 = v352 - 1;
        v142 = (unsigned int **)((char *)__src + 8);
        while (v141)
        {
          v140 = v8;
          v143 = v8[19] + 1;
          v144 = *v142++;
          v8 = v144;
          --v141;
          if (v143 != v144[18])
            goto LABEL_209;
        }
        v145 = 1;
LABEL_210:
        v77 = (uint64_t)__src;
        if (__src != &v353)
          free(__src);
        if (!v145)
          goto LABEL_21;
        do
        {
LABEL_194:
          v79 += 2;
          if (v79 == (uint64_t *)v81)
            goto LABEL_215;
        }
        while ((*v79 | 0x1000) == 0xFFFFFFFFFFFFF000);
        if (v79 == (uint64_t *)v81)
          goto LABEL_215;
      }
      v140 = *(unsigned int **)__src;
LABEL_208:
      v8 = 0;
LABEL_209:
      sub_1C53C73D8((llvm *)&v348, v140, v8);
      v145 = 0;
      goto LABEL_210;
    }
  }
LABEL_215:
  v146 = v336;
  if ((v336 - 1) > 1)
    goto LABEL_486;
  v147 = a1[3];
  v148 = *((unsigned int *)a1 + 10);
  v149 = (llvm *)&v147[2 * v148];
  if (*((_DWORD *)a1 + 8))
  {
    if ((_DWORD)v148)
    {
      v150 = 16 * v148;
      v151 = (llvm *)a1[3];
      while ((*(_QWORD *)v151 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v151 = (llvm *)((char *)v151 + 16);
        v150 -= 16;
        if (!v150)
          goto LABEL_221;
      }
    }
    else
    {
      v151 = (llvm *)a1[3];
    }
  }
  else
  {
LABEL_221:
    v151 = (llvm *)&v147[2 * v148];
  }
  v152 = (llvm *)&v147[2 * v148];
  if (v151 != v152)
  {
    v329 = (llvm *)&v147[2 * v148];
    while (1)
    {
      v153 = *((_QWORD *)v151 + 1);
      v154 = *(llvm::Value **)v153;
      if (!*(_QWORD *)v153 || !*(_DWORD *)(v153 + 32))
        goto LABEL_334;
      v333 = *((_QWORD *)v151 + 1);
      __src = 0;
      sub_1C53C4ED0((char **)&__p, &__src, &v352);
      sub_1C53C6C3C((uint64_t)v342);
      v155 = **a1;
      v347 = v155;
      __src = &v353;
      v353 = v155;
      v352 = 0x4000000001;
      if (!v343)
        goto LABEL_241;
      v156 = v343 - 1;
      v157 = (v343 - 1) & ((v155 >> 4) ^ (v155 >> 9));
      v158 = (uint64_t *)(v342[0] + 72 * v157);
      v159 = *v158;
      if (*v158 == v155)
        break;
      v160 = 1;
      v161 = *v158;
      v162 = v156 & ((v155 >> 4) ^ (v155 >> 9));
      do
      {
        if (v161 == -4096)
          goto LABEL_241;
        v163 = v162 + v160++;
        v162 = v163 & v156;
        v161 = *(_QWORD *)(v342[0] + 72 * v162);
      }
      while (v161 != v155);
      v164 = 0;
      v165 = 1;
      while (v159 != -4096)
      {
        if (v164)
          v166 = 0;
        else
          v166 = v159 == -8192;
        if (v166)
          v164 = v158;
        v167 = v157 + v165++;
        v157 = v167 & v156;
        v158 = (uint64_t *)(v342[0] + 72 * v157);
        v159 = *v158;
        if (*v158 == v155)
          goto LABEL_240;
      }
      if (v164)
        v210 = v164;
      else
        v210 = v158;
      v211 = sub_1C53BF8A4((uint64_t)v342, &v347, v210);
      *v211 = v155;
      *(_OWORD *)(v211 + 5) = 0u;
      *(_OWORD *)(v211 + 3) = 0u;
      *(_OWORD *)(v211 + 1) = 0u;
      *(_OWORD *)(v211 + 7) = 0u;
      v211[5] = (uint64_t)(v211 + 7);
      *((_DWORD *)v211 + 13) = 2;
      v168 = v352;
      if ((_DWORD)v352)
        goto LABEL_242;
LABEL_323:
      if (__src != &v353)
        free(__src);
      v212 = *(unsigned int *)(v333 + 32);
      v152 = v329;
      v149 = v329;
      if ((_DWORD)v212)
      {
        v213 = *(llvm::Value ****)(v333 + 24);
        v214 = &v213[v212];
        v215 = v343 - 1;
        do
        {
          if (v343)
          {
            v216 = *v213;
            v217 = **v213;
            v218 = ((v217 >> 4) ^ (v217 >> 9)) & v215;
            v219 = *(llvm::Value **)(v342[0] + 72 * v218);
            if (v217 == v219)
            {
LABEL_347:
              v228 = (llvm::raw_ostream *)llvm::errs(v329);
              v229 = v228;
              v230 = *((_QWORD *)v228 + 4);
              if ((unint64_t)(*((_QWORD *)v228 + 3) - v230) > 5)
              {
                *(_WORD *)(v230 + 4) = 8292;
                *(_DWORD *)v230 = 1818847299;
                *((_QWORD *)v228 + 4) += 6;
              }
              else
              {
                llvm::raw_ostream::write(v228, "Child ", 6uLL);
              }
              if (*v216)
              {
                llvm::Value::printAsOperand(*v216, v229, 0, 0);
              }
              else
              {
                v231 = (_DWORD *)*((_QWORD *)v229 + 4);
                if (*((_QWORD *)v229 + 3) - (_QWORD)v231 > 6uLL)
                {
                  *(_DWORD *)((char *)v231 + 3) = 1920233580;
                  *v231 = 1819047278;
                  *((_QWORD *)v229 + 4) += 7;
                }
                else
                {
                  llvm::raw_ostream::write(v229, "nullptr", 7uLL);
                }
              }
              v232 = (void *)*((_QWORD *)v229 + 4);
              if (*((_QWORD *)v229 + 3) - (_QWORD)v232 > 0x1BuLL)
              {
                qmemcpy(v232, " reachable after its parent ", 28);
                *((_QWORD *)v229 + 4) += 28;
              }
              else
              {
                llvm::raw_ostream::write(v229, " reachable after its parent ", 0x1CuLL);
              }
              v12 = v154;
              goto LABEL_356;
            }
            v220 = 1;
            while (v219 != (llvm::Value *)-4096)
            {
              v221 = v218 + v220++;
              v218 = v221 & v215;
              v219 = *(llvm::Value **)(v342[0] + 72 * v218);
              if (v217 == v219)
                goto LABEL_347;
            }
          }
          ++v213;
        }
        while (v213 != v214);
      }
LABEL_334:
      v222 = (llvm *)((char *)v151 + 16);
      v151 = v149;
      if (v222 != v149)
      {
        v151 = v222;
        while ((*(_QWORD *)v151 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v151 = (llvm *)((char *)v151 + 16);
          if (v151 == v149)
          {
            v151 = v149;
            break;
          }
        }
      }
      if (v151 == v152)
        goto LABEL_340;
    }
LABEL_240:
    *(_DWORD *)(v342[0] + 72 * v157 + 12) = 0;
LABEL_241:
    v168 = 1;
LABEL_242:
    v337 = 0;
    while (2)
    {
      v169 = *((_QWORD *)__src + v168 - 1);
      LODWORD(v352) = v168 - 1;
      v346 = v169;
      if (!v343)
      {
        v177 = 0;
        goto LABEL_257;
      }
      v170 = (v343 - 1) & ((v169 >> 4) ^ (v169 >> 9));
      v171 = (uint64_t *)(v342[0] + 72 * v170);
      v172 = *v171;
      if (v169 != *v171)
      {
        v173 = 0;
        v174 = 1;
        while (v172 != -4096)
        {
          if (v173)
            v175 = 0;
          else
            v175 = v172 == -8192;
          if (v175)
            v173 = v171;
          v176 = v170 + v174++;
          v170 = v176 & (v343 - 1);
          v171 = (uint64_t *)(v342[0] + 72 * v170);
          v172 = *v171;
          if (v169 == *v171)
            goto LABEL_258;
        }
        if (v173)
          v177 = v173;
        else
          v177 = v171;
LABEL_257:
        v171 = sub_1C53BF8A4((uint64_t)v342, &v346, v177);
        *v171 = v169;
        *(_OWORD *)(v171 + 5) = 0u;
        *(_OWORD *)(v171 + 1) = 0u;
        *(_OWORD *)(v171 + 3) = 0u;
        *(_OWORD *)(v171 + 7) = 0u;
        v171[5] = (uint64_t)(v171 + 7);
        *((_DWORD *)v171 + 13) = 2;
      }
LABEL_258:
      if (!*((_DWORD *)v171 + 2))
      {
        *((_DWORD *)v171 + 4) = ++v337;
        *((_DWORD *)v171 + 2) = v337;
        v171[3] = v169;
        v178 = (char *)v340;
        if (v340 >= (llvm::Value **)v341)
        {
          v180 = (char *)__p;
          v181 = ((char *)v340 - (_BYTE *)__p) >> 3;
          v182 = v181 + 1;
          if ((unint64_t)(v181 + 1) >> 61)
LABEL_539:
            abort();
          v183 = v341 - (_BYTE *)__p;
          if ((v341 - (_BYTE *)__p) >> 2 > v182)
            v182 = v183 >> 2;
          if ((unint64_t)v183 >= 0x7FFFFFFFFFFFFFF8)
            v184 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v184 = v182;
          if (v184)
          {
            if (v184 >> 61)
LABEL_540:
              sub_1C4764EE4();
            v185 = (char *)operator new(8 * v184);
          }
          else
          {
            v185 = 0;
          }
          v186 = (uint64_t *)&v185[8 * v181];
          *v186 = v169;
          v179 = (llvm::Value **)(v186 + 1);
          if (v178 != v180)
          {
            do
            {
              v187 = *((_QWORD *)v178 - 1);
              v178 -= 8;
              *--v186 = v187;
            }
            while (v178 != v180);
            v178 = (char *)__p;
          }
          __p = v186;
          v340 = v179;
          v341 = &v185[8 * v184];
          if (v178)
            operator delete(v178);
        }
        else
        {
          *v340 = (llvm::Value *)v169;
          v179 = (llvm::Value **)(v178 + 8);
        }
        v340 = v179;
        if (v344)
          sub_1C4ED7A6C(*(int **)(v344 + 8), v346, (uint64_t)&v348);
        else
          sub_1C53BFC54((char **)&v348, v346);
        v188 = (uint64_t *)v348;
        v189 = (uint64_t *)((char *)v348 + 8 * p_src);
        if ((_DWORD)p_src)
        {
          while (1)
          {
            v190 = *v188;
            v345 = v190;
            v191 = v342[0];
            v192 = v343;
            v193 = sub_1C4F4C0E0(v342[0], v343, v190);
            if ((uint64_t *)(v191 + 72 * v192) == v193)
            {
              v194 = v346;
            }
            else
            {
              v194 = v346;
              if (*((_DWORD *)v193 + 2))
              {
                if (v190 != v346)
                {
                  v195 = v193 + 5;
                  v197 = v193 + 6;
                  v196 = *((unsigned int *)v193 + 12);
                  v198 = *((unsigned int *)v193 + 13);
                  goto LABEL_307;
                }
                goto LABEL_310;
              }
            }
            if ((llvm::Value *)v190 != v154 && v194 != (_QWORD)v154)
            {
              if (!v192)
              {
                v206 = 0;
                goto LABEL_303;
              }
              v200 = (v192 - 1) & ((v190 >> 4) ^ (v190 >> 9));
              v193 = (uint64_t *)(v191 + 72 * v200);
              v201 = *v193;
              if (v190 != *v193)
              {
                v202 = 0;
                v203 = 1;
                while (v201 != -4096)
                {
                  if (v202)
                    v204 = 0;
                  else
                    v204 = v201 == -8192;
                  if (v204)
                    v202 = v193;
                  v205 = v200 + v203++;
                  v200 = v205 & (v192 - 1);
                  v193 = (uint64_t *)(v191 + 72 * v200);
                  v201 = *v193;
                  if (v190 == *v193)
                    goto LABEL_304;
                }
                if (v202)
                  v206 = v202;
                else
                  v206 = v193;
LABEL_303:
                v193 = sub_1C53BF8A4((uint64_t)v342, &v345, v206);
                *v193 = v190;
                *(_OWORD *)(v193 + 5) = 0u;
                *(_OWORD *)(v193 + 1) = 0u;
                *(_OWORD *)(v193 + 3) = 0u;
                *(_OWORD *)(v193 + 7) = 0u;
                v193[5] = (uint64_t)(v193 + 7);
                *((_DWORD *)v193 + 13) = 2;
              }
LABEL_304:
              v207 = v352;
              if (v352 >= (unint64_t)HIDWORD(v352))
              {
                v209 = v193;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v353, v352 + 1, 8);
                v193 = v209;
                v207 = v352;
              }
              *((_QWORD *)__src + v207) = v190;
              LODWORD(v352) = v352 + 1;
              v197 = v193 + 6;
              v196 = *((unsigned int *)v193 + 12);
              *((_DWORD *)v193 + 3) = v337;
              v195 = v193 + 5;
              v198 = *((unsigned int *)v193 + 13);
LABEL_307:
              if (v196 >= v198)
              {
                v208 = v193;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v195, (uint64_t)(v193 + 7), v196 + 1, 8);
                v196 = *((unsigned int *)v208 + 12);
              }
              *(_QWORD *)(*v195 + 8 * v196) = v194;
              ++*v197;
            }
LABEL_310:
            if (++v188 == v189)
            {
              v188 = (uint64_t *)v348;
              break;
            }
          }
        }
        if (v188 != v350)
          free(v188);
        v146 = v336;
      }
      v168 = v352;
      if (!(_DWORD)v352)
        goto LABEL_323;
      continue;
    }
  }
LABEL_340:
  if (v146 != 2)
    goto LABEL_486;
  v223 = a1[3];
  v224 = *((unsigned int *)a1 + 10);
  v225 = &v223[2 * v224];
  if (*((_DWORD *)a1 + 8))
  {
    if ((_DWORD)v224)
    {
      v226 = 16 * v224;
      v227 = a1[3];
      while ((*v227 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v227 += 2;
        v226 -= 16;
        if (!v226)
          goto LABEL_346;
      }
    }
    else
    {
      v227 = a1[3];
    }
  }
  else
  {
LABEL_346:
    v227 = &v223[2 * v224];
  }
  v235 = &v223[2 * v224];
  if (v227 == v235)
  {
LABEL_486:
    v25 = 1;
    goto LABEL_22;
  }
  v8 = (unsigned int *)&v352;
  while (1)
  {
    v236 = v227[1];
    if (*(_QWORD *)v236)
    {
      v237 = *(unsigned int *)(v236 + 32);
      if ((_DWORD)v237)
        break;
    }
LABEL_479:
    v307 = v227 + 2;
    v227 = v225;
    if (v307 != v225)
    {
      v227 = v307;
      while ((*v227 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v227 += 2;
        if (v227 == v225)
        {
          v227 = v225;
          break;
        }
      }
    }
    v25 = 1;
    if (v227 == v235)
      goto LABEL_22;
  }
  v238 = *(_QWORD ***)(v236 + 24);
  v326 = &v238[v237];
  v327 = v8;
  v330 = v227;
  v331 = v225;
  v328 = v235;
  v334 = v227[1];
  while (2)
  {
    v332 = v238;
    v239 = (llvm::Value **)*v238;
    __src = 0;
    sub_1C53C4ED0((char **)&__p, &__src, v8);
    sub_1C53C6C3C((uint64_t)v342);
    v335 = v239;
    v240 = *v239;
    v241 = **a1;
    v347 = v241;
    __src = &v353;
    v353 = v241;
    v352 = 0x4000000001;
    if (v343)
    {
      v242 = v343 - 1;
      v243 = (v343 - 1) & ((v241 >> 4) ^ (v241 >> 9));
      v244 = (uint64_t *)(v342[0] + 72 * v243);
      v245 = *v244;
      if (*v244 == v241)
      {
LABEL_385:
        *(_DWORD *)(v342[0] + 72 * v243 + 12) = 0;
      }
      else
      {
        v246 = 1;
        v247 = *v244;
        v248 = v242 & ((v241 >> 4) ^ (v241 >> 9));
        while (v247 != -4096)
        {
          v249 = v248 + v246++;
          v248 = v249 & v242;
          v247 = *(_QWORD *)(v342[0] + 72 * v248);
          if (v247 == v241)
          {
            v250 = 0;
            v251 = 1;
            while (v245 != -4096)
            {
              if (v250)
                v252 = 0;
              else
                v252 = v245 == -8192;
              if (v252)
                v250 = v244;
              v253 = v243 + v251++;
              v243 = v253 & v242;
              v244 = (uint64_t *)(v342[0] + 72 * v243);
              v245 = *v244;
              if (*v244 == v241)
                goto LABEL_385;
            }
            if (v250)
              v295 = v250;
            else
              v295 = v244;
            v296 = sub_1C53BF8A4((uint64_t)v342, &v347, v295);
            *v296 = v241;
            *(_OWORD *)(v296 + 5) = 0u;
            *(_OWORD *)(v296 + 3) = 0u;
            *(_OWORD *)(v296 + 1) = 0u;
            *(_OWORD *)(v296 + 7) = 0u;
            v296[5] = (uint64_t)(v296 + 7);
            *((_DWORD *)v296 + 13) = 2;
            v254 = v352;
            if (!(_DWORD)v352)
              goto LABEL_467;
            goto LABEL_387;
          }
        }
      }
    }
    v254 = 1;
LABEL_387:
    v338 = 0;
    do
    {
      v255 = *((_QWORD *)__src + v254 - 1);
      LODWORD(v352) = v254 - 1;
      v346 = v255;
      if (!v343)
      {
        v263 = 0;
LABEL_402:
        v257 = sub_1C53BF8A4((uint64_t)v342, &v346, v263);
        *v257 = v255;
        *(_OWORD *)(v257 + 5) = 0u;
        *(_OWORD *)(v257 + 1) = 0u;
        *(_OWORD *)(v257 + 3) = 0u;
        *(_OWORD *)(v257 + 7) = 0u;
        v257[5] = (uint64_t)(v257 + 7);
        *((_DWORD *)v257 + 13) = 2;
        goto LABEL_403;
      }
      v256 = (v343 - 1) & ((v255 >> 4) ^ (v255 >> 9));
      v257 = (uint64_t *)(v342[0] + 72 * v256);
      v258 = *v257;
      if (v255 != *v257)
      {
        v259 = 0;
        v260 = 1;
        while (v258 != -4096)
        {
          if (v259)
            v261 = 0;
          else
            v261 = v258 == -8192;
          if (v261)
            v259 = v257;
          v262 = v256 + v260++;
          v256 = v262 & (v343 - 1);
          v257 = (uint64_t *)(v342[0] + 72 * v256);
          v258 = *v257;
          if (v255 == *v257)
            goto LABEL_403;
        }
        if (v259)
          v263 = v259;
        else
          v263 = v257;
        goto LABEL_402;
      }
LABEL_403:
      if (*((_DWORD *)v257 + 2))
        goto LABEL_460;
      *((_DWORD *)v257 + 4) = ++v338;
      *((_DWORD *)v257 + 2) = v338;
      v257[3] = v255;
      v264 = (char *)v340;
      if (v340 >= (llvm::Value **)v341)
      {
        v266 = (char *)__p;
        v267 = ((char *)v340 - (_BYTE *)__p) >> 3;
        v268 = v267 + 1;
        if ((unint64_t)(v267 + 1) >> 61)
          goto LABEL_539;
        v269 = v341 - (_BYTE *)__p;
        if ((v341 - (_BYTE *)__p) >> 2 > v268)
          v268 = v269 >> 2;
        if ((unint64_t)v269 >= 0x7FFFFFFFFFFFFFF8)
          v270 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v270 = v268;
        if (v270)
        {
          if (v270 >> 61)
            goto LABEL_540;
          v271 = (char *)operator new(8 * v270);
        }
        else
        {
          v271 = 0;
        }
        v272 = (uint64_t *)&v271[8 * v267];
        *v272 = v255;
        v265 = (llvm::Value **)(v272 + 1);
        if (v264 != v266)
        {
          do
          {
            v273 = *((_QWORD *)v264 - 1);
            v264 -= 8;
            *--v272 = v273;
          }
          while (v264 != v266);
          v264 = (char *)__p;
        }
        __p = v272;
        v340 = v265;
        v341 = &v271[8 * v270];
        if (v264)
          operator delete(v264);
      }
      else
      {
        *v340 = (llvm::Value *)v255;
        v265 = (llvm::Value **)(v264 + 8);
      }
      v340 = v265;
      if (v344)
        sub_1C4ED7A6C(*(int **)(v344 + 8), v346, (uint64_t)&v348);
      else
        sub_1C53BFC54((char **)&v348, v346);
      v274 = (uint64_t *)v348;
      v275 = (uint64_t *)((char *)v348 + 8 * p_src);
      if (!(_DWORD)p_src)
        goto LABEL_458;
      do
      {
        v276 = *v274;
        v345 = v276;
        v277 = v342[0];
        v278 = v343;
        v279 = sub_1C4F4C0E0(v342[0], v343, v276);
        if ((uint64_t *)(v277 + 72 * v278) == v279)
        {
          v281 = v346;
        }
        else
        {
          v280 = v279;
          v281 = v346;
          if (*((_DWORD *)v279 + 2))
          {
            if (v276 == v346)
              goto LABEL_455;
            v282 = v279 + 5;
            v284 = v279 + 6;
            v283 = *((unsigned int *)v279 + 12);
            v285 = *((unsigned int *)v279 + 13);
            goto LABEL_452;
          }
        }
        if ((llvm::Value *)v276 == v240 || v281 == (_QWORD)v240)
          goto LABEL_455;
        if (!v278)
        {
          v293 = 0;
LABEL_448:
          v280 = sub_1C53BF8A4((uint64_t)v342, &v345, v293);
          *v280 = v276;
          *(_OWORD *)(v280 + 5) = 0u;
          *(_OWORD *)(v280 + 1) = 0u;
          *(_OWORD *)(v280 + 3) = 0u;
          *(_OWORD *)(v280 + 7) = 0u;
          v280[5] = (uint64_t)(v280 + 7);
          *((_DWORD *)v280 + 13) = 2;
          goto LABEL_449;
        }
        v287 = (v278 - 1) & ((v276 >> 4) ^ (v276 >> 9));
        v280 = (uint64_t *)(v277 + 72 * v287);
        v288 = *v280;
        if (v276 != *v280)
        {
          v289 = 0;
          v290 = 1;
          while (v288 != -4096)
          {
            if (v289)
              v291 = 0;
            else
              v291 = v288 == -8192;
            if (v291)
              v289 = v280;
            v292 = v287 + v290++;
            v287 = v292 & (v278 - 1);
            v280 = (uint64_t *)(v277 + 72 * v287);
            v288 = *v280;
            if (v276 == *v280)
              goto LABEL_449;
          }
          if (v289)
            v293 = v289;
          else
            v293 = v280;
          goto LABEL_448;
        }
LABEL_449:
        v294 = v352;
        if (v352 >= (unint64_t)HIDWORD(v352))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v353, v352 + 1, 8);
          v294 = v352;
        }
        *((_QWORD *)__src + v294) = v276;
        LODWORD(v352) = v352 + 1;
        v284 = v280 + 6;
        v283 = *((unsigned int *)v280 + 12);
        *((_DWORD *)v280 + 3) = v338;
        v282 = v280 + 5;
        v285 = *((unsigned int *)v280 + 13);
LABEL_452:
        if (v283 >= v285)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v282, (uint64_t)(v280 + 7), v283 + 1, 8);
          v283 = *((unsigned int *)v280 + 12);
        }
        *(_QWORD *)(*v282 + 8 * v283) = v281;
        ++*v284;
LABEL_455:
        ++v274;
      }
      while (v274 != v275);
      v274 = (uint64_t *)v348;
LABEL_458:
      if (v274 != v350)
        free(v274);
LABEL_460:
      v254 = v352;
    }
    while ((_DWORD)v352);
LABEL_467:
    v297 = (llvm *)__src;
    if (__src != &v353)
      free(__src);
    v298 = *(unsigned int *)(v334 + 32);
    if (!(_DWORD)v298)
    {
LABEL_478:
      v225 = v331;
      v238 = v332 + 1;
      v8 = v327;
      v235 = v328;
      v227 = v330;
      if (v332 + 1 != v326)
        continue;
      goto LABEL_479;
    }
    break;
  }
  v299 = *(llvm::Value ****)(v334 + 24);
  v300 = &v299[v298];
  v301 = v343 - 1;
  while (1)
  {
    v302 = *v299;
    if (*v299 != v335)
    {
      if (!v343)
        goto LABEL_487;
      v303 = ((*v302 >> 4) ^ (*v302 >> 9)) & v301;
      v304 = *(llvm::Value **)(v342[0] + 72 * v303);
      if (*v302 != v304)
        break;
    }
LABEL_477:
    if (++v299 == v300)
      goto LABEL_478;
  }
  v305 = 1;
  while (v304 != (llvm::Value *)-4096)
  {
    v306 = v303 + v305++;
    v303 = v306 & v301;
    v304 = *(llvm::Value **)(v342[0] + 72 * v303);
    if (*v302 == v304)
      goto LABEL_477;
  }
LABEL_487:
  v308 = (llvm::raw_ostream *)llvm::errs(v297);
  v229 = v308;
  v309 = *((_QWORD *)v308 + 4);
  if ((unint64_t)(*((_QWORD *)v308 + 3) - v309) > 4)
  {
    *(_BYTE *)(v309 + 4) = 32;
    *(_DWORD *)v309 = 1701080910;
    *((_QWORD *)v308 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(v308, "Node ", 5uLL);
  }
  if (*v302)
  {
    llvm::Value::printAsOperand(*v302, v229, 0, 0);
  }
  else
  {
    v310 = (_DWORD *)*((_QWORD *)v229 + 4);
    if (*((_QWORD *)v229 + 3) - (_QWORD)v310 > 6uLL)
    {
      *(_DWORD *)((char *)v310 + 3) = 1920233580;
      *v310 = 1819047278;
      *((_QWORD *)v229 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v229, "nullptr", 7uLL);
    }
  }
  v311 = (void *)*((_QWORD *)v229 + 4);
  if (*((_QWORD *)v229 + 3) - (_QWORD)v311 > 0x1FuLL)
  {
    qmemcpy(v311, " not reachable when its sibling ", 32);
    *((_QWORD *)v229 + 4) += 32;
  }
  else
  {
    llvm::raw_ostream::write(v229, " not reachable when its sibling ", 0x20uLL);
  }
  v12 = *v335;
  if (*v335)
  {
LABEL_356:
    v12 = (llvm::Value *)llvm::Value::printAsOperand(v12, v229, 0, 0);
    goto LABEL_357;
  }
  v312 = (_DWORD *)*((_QWORD *)v229 + 4);
  if (*((_QWORD *)v229 + 3) - (_QWORD)v312 > 6uLL)
  {
    *(_DWORD *)((char *)v312 + 3) = 1920233580;
    *v312 = 1819047278;
    *((_QWORD *)v229 + 4) += 7;
  }
  else
  {
    v12 = llvm::raw_ostream::write(v229, "nullptr", 7uLL);
  }
LABEL_357:
  v233 = (void *)*((_QWORD *)v229 + 4);
  if (*((_QWORD *)v229 + 3) - (_QWORD)v233 > 0xCuLL)
  {
    qmemcpy(v233, " is removed!\n", 13);
    *((_QWORD *)v229 + 4) += 13;
  }
  else
  {
    v14 = " is removed!\n";
    v12 = v229;
    v15 = 13;
LABEL_18:
    v12 = llvm::raw_ostream::write(v12, v14, v15);
  }
LABEL_19:
  v22 = (llvm::raw_ostream *)llvm::errs(v12);
  v23 = (const char *)*((_QWORD *)v22 + 4);
  v24 = (const char *)*((_QWORD *)v22 + 2);
  v8 = (unsigned int *)(v23 - v24);
  if (v23 != v24)
  {
LABEL_20:
    *((_QWORD *)v22 + 4) = v24;
    llvm::raw_ostream::flush_tied_then_write(v22, v24, (uint64_t)v8);
  }
LABEL_21:
  v25 = 0;
LABEL_22:
  v26 = v342[0];
  if (v343)
  {
    v27 = 72 * v343;
    v28 = v342[0] + 56;
    do
    {
      v29 = *(_QWORD *)(v28 - 56);
      if (v29 != -4096 && v29 != -8192)
      {
        v30 = *(void **)(v28 - 16);
        if ((void *)v28 != v30)
          free(v30);
      }
      v28 += 72;
      v27 -= 72;
    }
    while (v27);
    v26 = v342[0];
  }
  MEMORY[0x1CAA32FB4](v26, 8, v8);
  if (__p)
  {
    v340 = (llvm::Value **)__p;
    operator delete(__p);
  }
  return v25;
}

{
  return __ZN4llvm14DomTreeBuilder6VerifyINS_17DominatorTreeBaseINS_10BasicBlockELb0EEEEEbRKT_NS5_17VerificationLevelE(a1, a2);
}

uint64_t *llvm::DominatorTreeBase<llvm::BasicBlock,false>::reset(uint64_t a1)
{
  uint64_t *result;

  result = sub_1C4EF5C94((uint64_t *)(a1 + 24));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  return result;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::DominatorTreeBase(uint64_t a1, uint64_t a2)
{
  void *v4;
  unsigned int v5;
  const void *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v13;

  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x400000000;
  if (a1 != a2)
  {
    v5 = *(_DWORD *)(a2 + 8);
    if (v5)
    {
      v6 = *(const void **)a2;
      if (*(_QWORD *)a2 != a2 + 16)
      {
        *(_QWORD *)a1 = v6;
        v13 = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a1 + 8) = v5;
        *(_DWORD *)(a1 + 12) = v13;
        *(_QWORD *)a2 = a2 + 16;
        *(_DWORD *)(a2 + 12) = 0;
        goto LABEL_8;
      }
      if (v5 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, *(unsigned int *)(a2 + 8), 8);
        v7 = *(_DWORD *)(a2 + 8);
        if (!v7)
          goto LABEL_7;
        v6 = *(const void **)a2;
        v4 = *(void **)a1;
      }
      else
      {
        v7 = *(_DWORD *)(a2 + 8);
      }
      memcpy(v4, v6, 8 * v7);
LABEL_7:
      *(_DWORD *)(a1 + 8) = v5;
LABEL_8:
      *(_DWORD *)(a2 + 8) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  v9 = *(_QWORD *)(a2 + 48);
  v8 = a2 + 48;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)v8 = 0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(v8 + 8);
  *(_DWORD *)(v8 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 60);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(v8 + 12);
  *(_DWORD *)(v8 + 12) = v10;
  v11 = *(_DWORD *)(a1 + 64);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(v8 + 16);
  *(_DWORD *)(v8 + 16) = v11;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(v8 + 24);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(v8 + 40);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(v8 + 44);
  sub_1C4EF5C94((uint64_t *)v8);
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  return a1;
}

{
  return __ZN4llvm17DominatorTreeBaseINS_10BasicBlockELb1EEC2EOS2_(a1, a2);
}

uint64_t *llvm::DominatorTreeBase<llvm::BasicBlock,true>::wipe(uint64_t *a1)
{
  uint64_t *result;

  result = sub_1C4EF5C94(a1 + 6);
  a1[9] = 0;
  a1[10] = 0;
  return result;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v11;
  uint64_t v12;

  if (a1 != a2)
  {
    v4 = *(const void **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      v11 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v11);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v6 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = a2 + 16;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_10;
    }
    v6 = (_DWORD *)(a2 + 8);
    v5 = *(unsigned int *)(a2 + 8);
    v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v5)
    {
      if ((_DWORD)v5)
        memmove(*(void **)a1, v4, 8 * v5);
      goto LABEL_9;
    }
    if (*(_DWORD *)(a1 + 12) < v5)
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 8);
    }
    else if ((_DWORD)v7)
    {
      v12 = *(unsigned int *)(a1 + 8);
      memmove(*(void **)a1, v4, 8 * v7);
      v8 = v12;
LABEL_7:
      v9 = *v6;
      if (v8 != v9)
        memcpy((void *)(*(_QWORD *)a1 + 8 * v8), (const void *)(*(_QWORD *)a2 + 8 * v8), *(_QWORD *)a2 + 8 * v9 - (*(_QWORD *)a2 + 8 * v8));
LABEL_9:
      *(_DWORD *)(a1 + 8) = v5;
LABEL_10:
      *v6 = 0;
      goto LABEL_11;
    }
    v8 = 0;
    goto LABEL_7;
  }
LABEL_11:
  sub_1C514F874((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  sub_1C4EF5C94((uint64_t *)(a2 + 48));
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  return a1;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::root_begin(uint64_t a1)
{
  return *(_QWORD *)a1;
}

{
  return *(_QWORD *)a1;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::root_end(uint64_t a1)
{
  return *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 8);
}

{
  return *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 8);
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::root_size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::roots(uint64_t a1)
{
  return *(_QWORD *)a1;
}

{
  return *(_QWORD *)a1;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::isPostDominator()
{
  return 1;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::compare(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;
  _QWORD *v19;
  uint64_t result;

  if (*(_QWORD *)(a1 + 80) != *(_QWORD *)(a2 + 80))
    return 1;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4 != *(_DWORD *)(a2 + 8))
    return 1;
  if (!sub_1C5151CDC(*(char **)a1, (char *)(*(_QWORD *)a1 + 8 * v4), *(_QWORD **)a2))
    return 1;
  v5 = *(_DWORD *)(a1 + 56);
  if (v5 != *(_DWORD *)(a2 + 56))
    return 1;
  v6 = *(_QWORD **)(a1 + 48);
  v7 = *(unsigned int *)(a1 + 64);
  v8 = &v6[2 * v7];
  if (v5)
  {
    if ((_DWORD)v7)
    {
      v9 = 16 * v7;
      v10 = v6;
      while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v10 += 2;
        v9 -= 16;
        if (!v9)
          goto LABEL_10;
      }
    }
    else
    {
      v10 = v6;
    }
  }
  else
  {
LABEL_10:
    v10 = &v6[2 * v7];
  }
  v11 = &v6[2 * v7];
  if (v10 != v11)
  {
    while (1)
    {
      v12 = *(_QWORD *)(a2 + 48);
      v13 = *(unsigned int *)(a2 + 64);
      if ((_DWORD)v13)
      {
        LODWORD(v14) = ((*v10 >> 4) ^ (*v10 >> 9)) & (v13 - 1);
        v15 = (uint64_t *)(v12 + 16 * v14);
        v16 = *v15;
        if (*v10 == *v15)
          goto LABEL_20;
        v17 = 1;
        while (v16 != -4096)
        {
          v18 = v14 + v17++;
          v14 = v18 & (v13 - 1);
          v16 = *(_QWORD *)(v12 + 16 * v14);
          if (*v10 == v16)
          {
            v15 = (uint64_t *)(v12 + 16 * v14);
            goto LABEL_20;
          }
        }
      }
      v15 = (uint64_t *)(v12 + 16 * v13);
LABEL_20:
      if (v15 == (uint64_t *)(v12 + 16 * v13)
        || (llvm::DomTreeNodeBase<llvm::BasicBlock>::compare(v10[1], v15[1]) & 1) != 0)
      {
        return 1;
      }
      v19 = v10 + 2;
      v10 = v8;
      if (v19 != v8)
      {
        v10 = v19;
        while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v10 += 2;
          if (v10 == v8)
          {
            v10 = v8;
            break;
          }
        }
      }
      result = 0;
      if (v10 == v11)
        return result;
    }
  }
  return 0;
}

{
  return __ZNK4llvm17DominatorTreeBaseINS_10BasicBlockELb1EE7compareERKS2_(a1, a2);
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::getNode(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(unsigned int *)(a1 + 64);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      goto LABEL_3;
    v8 = 1;
    while (v6 != -4096)
    {
      v9 = v4 + v8++;
      v4 = v9 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_3;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_3:
  if (v5 == (uint64_t *)(v2 + 16 * v3))
    return 0;
  else
    return v5[1];
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = a2;
  if (sub_1C4850EC8((uint64_t *)(a1 + 48), &v8, &v7))
  {
    v3 = v7;
    v4 = *(_QWORD *)(a1 + 48);
    v5 = *(unsigned int *)(a1 + 64);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 48);
    v5 = *(unsigned int *)(a1 + 64);
    v3 = v4 + 16 * v5;
  }
  if (v3 == v4 + 16 * v5)
    return 0;
  else
    return *(_QWORD *)(v3 + 8);
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::getRootNode(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

{
  return *(_QWORD *)(a1 + 72);
}

void llvm::DominatorTreeBase<llvm::BasicBlock,true>::getDescendants(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned int v15;
  int v16;
  _QWORD v17[9];

  v17[8] = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a3 + 8) = 0;
  v13 = 0;
  v14 = a2;
  if (sub_1C4850EC8((uint64_t *)(a1 + 48), &v14, &v13))
  {
    v5 = v13;
    v6 = *(_QWORD *)(a1 + 48);
    v7 = *(unsigned int *)(a1 + 64);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 48);
    v7 = *(unsigned int *)(a1 + 64);
    v5 = v6 + 16 * v7;
  }
  if (v5 != v6 + 16 * v7)
  {
    v8 = *(_QWORD *)(v5 + 8);
    if (v8)
    {
      v14 = v17;
      v16 = 8;
      v17[0] = v8;
      v9 = 1;
      do
      {
        v10 = (uint64_t *)*((_QWORD *)v14 + v9 - 1);
        v15 = v9 - 1;
        v11 = *v10;
        v12 = *(unsigned int *)(a3 + 8);
        if (v12 >= *(unsigned int *)(a3 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v12 + 1, 8);
          v12 = *(unsigned int *)(a3 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = v11;
        ++*(_DWORD *)(a3 + 8);
        sub_1C6236E8C((uint64_t)&v14, (char *)v10[3], (char *)(v10[3] + 8 * *((unsigned int *)v10 + 8)));
        v9 = v15;
      }
      while (v15);
      if (v14 != v17)
        free(v14);
    }
  }
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::properlyDominates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  result = 0;
  if (a2 == a3)
    return result;
  if (!a2)
    return result;
  v6 = a3;
  if (!a3)
    return result;
  if (*(_QWORD *)(a3 + 8) == a2)
    return 1;
  if (*(_QWORD *)(a2 + 8) == a3)
    return 0;
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 >= *(_DWORD *)(a3 + 16))
    return 0;
  if (!*(_BYTE *)(a1 + 88))
  {
    v8 = *(_DWORD *)(a1 + 92) + 1;
    *(_DWORD *)(a1 + 92) = v8;
    if (v8 <= 0x20)
    {
      do
      {
        v9 = v6;
        v6 = *(_QWORD *)(v6 + 8);
      }
      while (v6 && *(_DWORD *)(v6 + 16) >= v7);
      return v9 == a2;
    }
    llvm::DominatorTreeBase<llvm::BasicBlock,true>::updateDFSNumbers(a1);
  }
  if (*(_DWORD *)(v6 + 72) < *(_DWORD *)(a2 + 72))
    return 0;
  return *(_DWORD *)(v6 + 76) <= *(_DWORD *)(a2 + 76);
}

BOOL llvm::DominatorTreeBase<llvm::BasicBlock,true>::dominates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _BOOL4 v6;
  unsigned int v8;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;

  v3 = a3;
  v6 = a3 != a2 && a3 != 0;
  if (v6 && a2 != 0)
  {
    if (*(_QWORD *)(a3 + 8) != a2)
    {
      if (*(_QWORD *)(a2 + 8) == a3)
        return 0;
      v8 = *(_DWORD *)(a2 + 16);
      if (v8 >= *(_DWORD *)(a3 + 16))
        return 0;
      if (!*(_BYTE *)(a1 + 88))
      {
        v10 = *(_DWORD *)(a1 + 92) + 1;
        *(_DWORD *)(a1 + 92) = v10;
        if (v10 <= 0x20)
        {
          do
          {
            v11 = v3;
            v3 = *(_QWORD *)(v3 + 8);
          }
          while (v3 && *(_DWORD *)(v3 + 16) >= v8);
          return v11 == a2;
        }
LABEL_31:
        llvm::DominatorTreeBase<llvm::BasicBlock,true>::updateDFSNumbers(a1);
        goto LABEL_32;
      }
      goto LABEL_32;
    }
    return 1;
  }
  if (!v6)
    return 1;
  if (!a2)
    return 0;
  if (*(_QWORD *)(a3 + 8) == a2)
    return 1;
  if (*(_QWORD *)(a2 + 8) == a3)
    return 0;
  v12 = *(_DWORD *)(a2 + 16);
  if (v12 >= *(_DWORD *)(a3 + 16))
    return 0;
  if (!*(_BYTE *)(a1 + 88))
  {
    v13 = *(_DWORD *)(a1 + 92) + 1;
    *(_DWORD *)(a1 + 92) = v13;
    if (v13 <= 0x20)
    {
      do
      {
        v11 = v3;
        v3 = *(_QWORD *)(v3 + 8);
      }
      while (v3 && *(_DWORD *)(v3 + 16) >= v12);
      return v11 == a2;
    }
    goto LABEL_31;
  }
LABEL_32:
  if (*(_DWORD *)(v3 + 72) < *(_DWORD *)(a2 + 72))
    return 0;
  return *(_DWORD *)(v3 + 76) <= *(_DWORD *)(a2 + 76);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[7];

  if (a2 == a3)
    return 1;
  v22[5] = v3;
  v22[6] = v4;
  v7 = (uint64_t *)(a1 + 48);
  v21 = 0;
  v22[0] = a2;
  if (sub_1C4850EC8((uint64_t *)(a1 + 48), v22, &v21))
  {
    v8 = v21;
    v9 = *(_QWORD *)(a1 + 48);
    v10 = *(unsigned int *)(a1 + 64);
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 48);
    v10 = *(unsigned int *)(a1 + 64);
    v8 = v9 + 16 * v10;
  }
  if (v8 == v9 + 16 * v10)
    v12 = 0;
  else
    v12 = *(_QWORD *)(v8 + 8);
  v21 = 0;
  v22[0] = a3;
  if (sub_1C4850EC8(v7, v22, &v21))
  {
    v13 = v21;
    v14 = *(_QWORD *)(a1 + 48);
    v15 = *(unsigned int *)(a1 + 64);
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 48);
    v15 = *(unsigned int *)(a1 + 64);
    v13 = v14 + 16 * v15;
  }
  if (v13 == v14 + 16 * v15)
    return 1;
  v16 = *(_QWORD *)(v13 + 8);
  if (v16 == v12 || v16 == 0)
    return 1;
  if (!v12)
    return 0;
  if (*(_QWORD *)(v16 + 8) == v12)
    return 1;
  if (*(_QWORD *)(v12 + 8) == v16)
    return 0;
  v18 = *(_DWORD *)(v12 + 16);
  if (v18 >= *(_DWORD *)(v16 + 16))
    return 0;
  if (*(_BYTE *)(a1 + 88))
  {
LABEL_30:
    if (*(_DWORD *)(v16 + 72) >= *(_DWORD *)(v12 + 72))
      return *(_DWORD *)(v16 + 76) <= *(_DWORD *)(v12 + 76);
    return 0;
  }
  v19 = *(_DWORD *)(a1 + 92) + 1;
  *(_DWORD *)(a1 + 92) = v19;
  if (v19 > 0x20)
  {
    llvm::DominatorTreeBase<llvm::BasicBlock,true>::updateDFSNumbers(a1);
    goto LABEL_30;
  }
  do
  {
    v20 = v16;
    v16 = *(_QWORD *)(v16 + 8);
  }
  while (v16 && *(_DWORD *)(v16 + 16) >= v18);
  return v20 == v12;
}

{
  return __ZNK4llvm17DominatorTreeBaseINS_10BasicBlockELb1EE9dominatesEPKS1_S4_(a1, a2, a3);
}

BOOL llvm::DominatorTreeBase<llvm::BasicBlock,true>::properlyDominates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[7];

  if (a2 == a3)
    return 0;
  v22[5] = v3;
  v22[6] = v4;
  v7 = (uint64_t *)(a1 + 48);
  v21 = 0;
  v22[0] = a2;
  if (sub_1C4850EC8((uint64_t *)(a1 + 48), v22, &v21))
  {
    v8 = v21;
    v9 = *(_QWORD *)(a1 + 48);
    v10 = *(unsigned int *)(a1 + 64);
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 48);
    v10 = *(unsigned int *)(a1 + 64);
    v8 = v9 + 16 * v10;
  }
  if (v8 == v9 + 16 * v10)
    v12 = 0;
  else
    v12 = *(_QWORD *)(v8 + 8);
  v21 = 0;
  v22[0] = a3;
  if (sub_1C4850EC8(v7, v22, &v21))
  {
    v13 = v21;
    v14 = *(_QWORD *)(a1 + 48);
    v15 = *(unsigned int *)(a1 + 64);
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 48);
    v15 = *(unsigned int *)(a1 + 64);
    v13 = v14 + 16 * v15;
  }
  if (v13 == v14 + 16 * v15)
    return 1;
  v16 = *(_QWORD *)(v13 + 8);
  if (v16 == v12 || v16 == 0)
    return 1;
  if (!v12)
    return 0;
  if (*(_QWORD *)(v16 + 8) == v12)
    return 1;
  if (*(_QWORD *)(v12 + 8) == v16)
    return 0;
  v18 = *(_DWORD *)(v12 + 16);
  if (v18 >= *(_DWORD *)(v16 + 16))
    return 0;
  if (*(_BYTE *)(a1 + 88))
  {
LABEL_30:
    if (*(_DWORD *)(v16 + 72) >= *(_DWORD *)(v12 + 72))
      return *(_DWORD *)(v16 + 76) <= *(_DWORD *)(v12 + 76);
    return 0;
  }
  v19 = *(_DWORD *)(a1 + 92) + 1;
  *(_DWORD *)(a1 + 92) = v19;
  if (v19 > 0x20)
  {
    llvm::DominatorTreeBase<llvm::BasicBlock,true>::updateDFSNumbers(a1);
    goto LABEL_30;
  }
  do
  {
    v20 = v16;
    v16 = *(_QWORD *)(v16 + 8);
  }
  while (v16 && *(_DWORD *)(v16 + 16) >= v18);
  return v20 == v12;
}

BOOL llvm::DominatorTreeBase<llvm::BasicBlock,true>::isReachableFromEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = a2;
  if (sub_1C4850EC8((uint64_t *)(a1 + 48), &v8, &v7))
  {
    v3 = v7;
    v4 = *(_QWORD *)(a1 + 48);
    v5 = *(unsigned int *)(a1 + 64);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 48);
    v5 = *(unsigned int *)(a1 + 64);
    v3 = v4 + 16 * v5;
  }
  return v3 != v4 + 16 * v5 && *(_QWORD *)(v3 + 8) != 0;
}

{
  return a2 != 0;
}

{
  return __ZNK4llvm17DominatorTreeBaseINS_10BasicBlockELb1EE20isReachableFromEntryEPKS1_(a1, a2);
}

void llvm::DominatorTreeBase<llvm::BasicBlock,true>::updateDFSNumbers(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  void *v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD v18[65];

  v18[64] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 88))
  {
    *(_DWORD *)(a1 + 92) = 0;
  }
  else
  {
    v15 = v18;
    v17 = 32;
    v2 = *(_QWORD *)(a1 + 72);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      v18[0] = *(_QWORD *)(a1 + 72);
      v18[1] = v3;
      v4 = 1;
      v16 = 1;
      *(_DWORD *)(v2 + 72) = 0;
      v5 = 1;
      do
      {
        v6 = (char *)v15;
        v7 = v5;
        v8 = (char *)v15 + 16 * v5;
        v10 = *((_QWORD *)v8 - 2);
        v9 = (uint64_t *)*((_QWORD *)v8 - 1);
        if (v9 == (uint64_t *)(*(_QWORD *)(v10 + 24) + 8 * *(unsigned int *)(v10 + 32)))
        {
          *(_DWORD *)(v10 + 76) = v4;
          v5 = v7 - 1;
          v16 = v7 - 1;
        }
        else
        {
          v11 = *v9;
          *((_QWORD *)v8 - 1) = v9 + 1;
          v12 = *(_QWORD *)(v11 + 24);
          if (v7 >= v17)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, (uint64_t)v18, v7 + 1, 16);
            v6 = (char *)v15;
            v7 = v16;
          }
          v13 = &v6[16 * v7];
          *(_QWORD *)v13 = v11;
          *((_QWORD *)v13 + 1) = v12;
          v5 = ++v16;
          *(_DWORD *)(v11 + 72) = v4;
        }
        ++v4;
      }
      while (v5);
      v14 = v15;
      *(_DWORD *)(a1 + 92) = 0;
      *(_BYTE *)(a1 + 88) = 1;
      if (v14 != v18)
        free(v14);
    }
  }
}

{
  __ZNK4llvm17DominatorTreeBaseINS_10BasicBlockELb1EE16updateDFSNumbersEv(a1);
}

BOOL llvm::DominatorTreeBase<llvm::BasicBlock,true>::dominatedBySlowTreeWalk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  do
  {
    v3 = a3;
    a3 = *(_QWORD *)(a3 + 8);
  }
  while (a3 && *(_DWORD *)(a3 + 16) >= *(_DWORD *)(a2 + 16));
  return v3 == a2;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::getRoot(uint64_t a1)
{
  return **(_QWORD **)a1;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::findNearestCommonDominator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  _DWORD *v17;
  uint64_t v19;
  uint64_t v20;

  v5 = (uint64_t *)(a1 + 48);
  v19 = 0;
  v20 = a2;
  if (sub_1C4850EC8((uint64_t *)(a1 + 48), &v20, &v19))
  {
    v6 = v19;
    v7 = *(_QWORD *)(a1 + 48);
    v8 = *(unsigned int *)(a1 + 64);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 48);
    v8 = *(unsigned int *)(a1 + 64);
    v6 = v7 + 16 * v8;
  }
  if (v6 == v7 + 16 * v8)
    v9 = 0;
  else
    v9 = *(_DWORD **)(v6 + 8);
  v19 = 0;
  v20 = a3;
  if (sub_1C4850EC8(v5, &v20, &v19))
  {
    v10 = v19;
    v11 = *(_QWORD *)(a1 + 48);
    v12 = *(unsigned int *)(a1 + 64);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 48);
    v12 = *(unsigned int *)(a1 + 64);
    v10 = v11 + 16 * v12;
  }
  if (v10 == v11 + 16 * v12)
    v13 = 0;
  else
    v13 = *(_DWORD **)(v10 + 8);
  if (v9 == v13)
  {
    v13 = v9;
  }
  else
  {
    do
    {
      v14 = v9[4];
      v15 = v13[4];
      v16 = v14 >= v15;
      if (v14 >= v15)
        v17 = v9;
      else
        v17 = v13;
      if (!v16)
        v13 = v9;
      v9 = (_DWORD *)*((_QWORD *)v17 + 1);
    }
    while (v9 != v13);
  }
  return *(_QWORD *)v13;
}

{
  return __ZNK4llvm17DominatorTreeBaseINS_10BasicBlockELb1EE26findNearestCommonDominatorEPS1_S3_(a1, a2, a3);
}

BOOL llvm::DominatorTreeBase<llvm::BasicBlock,true>::isVirtualRoot(uint64_t a1, _QWORD *a2)
{
  return *a2 == 0;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::applyUpdates(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  _BYTE v5[296];
  uint64_t v6;
  void *v7;
  _QWORD v8[9];

  v8[8] = *MEMORY[0x1E0C80C00];
  sub_1C4E28D78((uint64_t)v5, a2, a3, 1u);
  llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,true>>(a1, (uint64_t)v5, 0);
  if (v7 != v8)
    free(v7);
  sub_1C4E295E8((uint64_t)&v6);
  return sub_1C4E295E8((uint64_t)v5);
}

void llvm::DominatorTreeBase<llvm::BasicBlock,true>::applyUpdates(uint64_t a1, _BYTE *a2, uint64_t a3, unint64_t *a4, uint64_t a5)
{
  _BYTE v8[296];
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _BYTE v14[48];
  _BYTE v15[296];
  _BYTE v16[304];
  void *v17;
  _QWORD v18[9];

  v18[8] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v12 = v14;
    v13 = 0x300000000;
    sub_1C612E234((unsigned int *)&v12, a2, &a2[16 * a3]);
    sub_1C4EE568C((unsigned int *)&v12, (uint64_t)v12 + 16 * v13, a4, &a4[2 * a5]);
    sub_1C4E28D78((uint64_t)v15, (unint64_t *)v12, v13, 1u);
    sub_1C4E28D78((uint64_t)v8, a4, a5, 0);
    llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,true>>(a1, (uint64_t)v15, (uint64_t)v8);
    if (v10 != &v11)
      free(v10);
    sub_1C4E295E8((uint64_t)&v9);
    sub_1C4E295E8((uint64_t)v8);
    if (v17 != v18)
      free(v17);
    sub_1C4E295E8((uint64_t)v16);
    sub_1C4E295E8((uint64_t)v15);
    if (v12 != v14)
      free(v12);
  }
  else
  {
    sub_1C4E28D78((uint64_t)v15, a4, a5, 0);
    llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,true>>(a1, (uint64_t)v15, (uint64_t)v15);
    if (v17 != v18)
      free(v17);
    sub_1C4E295E8((uint64_t)v16);
    sub_1C4E295E8((uint64_t)v15);
  }
}

void llvm::DominatorTreeBase<llvm::BasicBlock,true>::insertEdge(uint64_t a1, void *a2, void *a3)
{
  sub_1C53BB550(a1, 0, a3, a2);
}

void llvm::DomTreeBuilder::InsertEdge<llvm::DominatorTreeBase<llvm::BasicBlock,true>>(uint64_t a1, void *a2, void *a3)
{
  sub_1C53BB550(a1, 0, a3, a2);
}

void llvm::DominatorTreeBase<llvm::BasicBlock,true>::deleteEdge(uint64_t a1, void *a2, void *a3)
{
  sub_1C53BCE84(a1, 0, a3, a2);
}

void llvm::DomTreeBuilder::DeleteEdge<llvm::DominatorTreeBase<llvm::BasicBlock,true>>(uint64_t a1, void *a2, void *a3)
{
  sub_1C53BCE84(a1, 0, a3, a2);
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::addNewBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = a3;
  if (sub_1C4850EC8((uint64_t *)(a1 + 48), &v11, &v10))
  {
    v5 = v10;
    v6 = *(_QWORD *)(a1 + 48);
    v7 = *(unsigned int *)(a1 + 64);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 48);
    v7 = *(unsigned int *)(a1 + 64);
    v5 = v6 + 16 * v7;
  }
  if (v5 == v6 + 16 * v7)
    v8 = 0;
  else
    v8 = *(_QWORD *)(v5 + 8);
  *(_BYTE *)(a1 + 88) = 0;
  return llvm::DominatorTreeBase<llvm::BasicBlock,true>::createChild(a1, a2, v8);
}

{
  return __ZN4llvm17DominatorTreeBaseINS_10BasicBlockELb1EE11addNewBlockEPS1_S3_(a1, a2, a3);
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::createChild(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v25;
  void *v26;
  uint64_t v27;

  v27 = a2;
  v6 = operator new();
  v7 = v6;
  *(_QWORD *)v6 = a2;
  *(_QWORD *)(v6 + 8) = a3;
  if (a3)
    v8 = *(_DWORD *)(a3 + 16) + 1;
  else
    v8 = 0;
  *(_DWORD *)(v6 + 16) = v8;
  *(_QWORD *)(v6 + 24) = v6 + 40;
  *(_QWORD *)(v6 + 32) = 0x400000000;
  *(_QWORD *)(v6 + 72) = -1;
  v9 = *(unsigned int *)(a3 + 32);
  if (v9 >= *(_DWORD *)(a3 + 36))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 24, a3 + 40, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a3 + 32);
  }
  *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8 * v9) = v7;
  ++*(_DWORD *)(a3 + 32);
  v12 = *(_QWORD *)(a1 + 48);
  v11 = a1 + 48;
  v10 = v12;
  v13 = *(_DWORD *)(v11 + 16);
  if (v13)
  {
    v14 = v13 - 1;
    v15 = v14 & ((a2 >> 4) ^ (a2 >> 9));
    v16 = (_QWORD *)(v10 + 16 * v15);
    v17 = *v16;
    if (*v16 == a2)
      goto LABEL_20;
    v18 = 0;
    v19 = 1;
    while (v17 != -4096)
    {
      if (v18)
        v20 = 0;
      else
        v20 = v17 == -8192;
      if (v20)
        v18 = v16;
      v21 = v15 + v19++;
      v15 = v21 & v14;
      v16 = (_QWORD *)(v10 + 16 * v15);
      v17 = *v16;
      if (*v16 == a2)
        goto LABEL_20;
    }
    if (v18)
      v22 = v18;
    else
      v22 = v16;
  }
  else
  {
    v22 = 0;
  }
  v16 = sub_1C52A334C(v11, (uint64_t)&v27, &v27, v22);
  *v16 = v27;
  v16[1] = 0;
LABEL_20:
  v23 = v16[1];
  v16[1] = v7;
  if (v23)
  {
    v25 = v16;
    v26 = *(void **)(v23 + 24);
    if (v26 != (void *)(v23 + 40))
      free(v26);
    MEMORY[0x1CAA32FC0](v23, 0x10A0C40528A66C4);
    return v25[1];
  }
  return v7;
}

{
  return __ZN4llvm17DominatorTreeBaseINS_10BasicBlockELb1EE11createChildEPS1_PNS_15DomTreeNodeBaseIS1_EE(a1, a2, a3);
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::setNewRoot(uint64_t a1, uint64_t a2)
{
  uint64_t Node;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  BOOL v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v31;

  *(_BYTE *)(a1 + 88) = 0;
  Node = llvm::DominatorTreeBase<llvm::BasicBlock,true>::createNode(a1, a2);
  if (!*(_DWORD *)(a1 + 8))
  {
    if (*(_DWORD *)(a1 + 12))
    {
      v16 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, 1uLL, 8);
      v16 = *(unsigned int *)(a1 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v16) = a2;
    ++*(_DWORD *)(a1 + 8);
    goto LABEL_44;
  }
  v5 = **(_QWORD **)a1;
  v31 = v5;
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_DWORD *)(a1 + 64);
  if (v7)
  {
    v8 = v7 - 1;
    v9 = ((v5 >> 4) ^ (v5 >> 9)) & (v7 - 1);
    v10 = (_QWORD *)(v6 + 16 * v9);
    v11 = *v10;
    if (v5 == *v10)
    {
      v18 = v10 + 1;
      goto LABEL_23;
    }
    v12 = 0;
    v13 = 1;
    while (v11 != -4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == -8192;
      if (v14)
        v12 = v10;
      v15 = v9 + v13++;
      LODWORD(v9) = v15 & v8;
      v10 = (_QWORD *)(v6 + 16 * v9);
      v11 = *v10;
      if (v5 == *v10)
        goto LABEL_20;
    }
    if (v12)
      v17 = v12;
    else
      v17 = v10;
  }
  else
  {
    v17 = 0;
  }
  v10 = sub_1C52A334C(a1 + 48, (uint64_t)&v31, &v31, v17);
  *v10 = v31;
  v10[1] = 0;
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_DWORD *)(a1 + 64);
LABEL_20:
  v18 = v10 + 1;
  if (!v7)
  {
    v25 = 0;
LABEL_36:
    v19 = sub_1C52A334C(a1 + 48, (uint64_t)&v31, &v31, v25);
    *v19 = v31;
    v19[1] = 0;
    goto LABEL_37;
  }
  v5 = v31;
  v8 = v7 - 1;
  v9 = ((v31 >> 4) ^ (v31 >> 9)) & (v7 - 1);
LABEL_23:
  v19 = (_QWORD *)(v6 + 16 * v9);
  v20 = *v19;
  if (v5 != *v19)
  {
    v21 = 0;
    v22 = 1;
    while (v20 != -4096)
    {
      if (v21)
        v23 = 0;
      else
        v23 = v20 == -8192;
      if (v23)
        v21 = v19;
      v24 = v9 + v22++;
      LODWORD(v9) = v24 & v8;
      v19 = (_QWORD *)(v6 + 16 * v9);
      v20 = *v19;
      if (v5 == *v19)
        goto LABEL_37;
    }
    if (v21)
      v25 = v21;
    else
      v25 = v19;
    goto LABEL_36;
  }
LABEL_37:
  v26 = v19[1];
  v19[1] = 0;
  v27 = *(unsigned int *)(Node + 32);
  if (v27 >= *(_DWORD *)(Node + 36))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(Node + 24, Node + 40, v27 + 1, 8);
    LODWORD(v27) = *(_DWORD *)(Node + 32);
  }
  *(_QWORD *)(*(_QWORD *)(Node + 24) + 8 * v27) = v26;
  ++*(_DWORD *)(Node + 32);
  v28 = *v18;
  *v18 = v26;
  if (v28)
  {
    v29 = *(void **)(v28 + 24);
    if (v29 != (void *)(v28 + 40))
      free(v29);
    MEMORY[0x1CAA32FC0](v28, 0x10A0C40528A66C4);
    v26 = *v18;
  }
  *(_QWORD *)(v26 + 8) = Node;
  llvm::DomTreeNodeBase<llvm::BasicBlock>::UpdateLevel(*v18);
  **(_QWORD **)a1 = a2;
LABEL_44:
  *(_QWORD *)(a1 + 72) = Node;
  return Node;
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::createNode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v20;
  void *v21;
  uint64_t v22;

  v22 = a2;
  v4 = operator new();
  *(_QWORD *)v4 = a2;
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = v4 + 40;
  *(_QWORD *)(v4 + 32) = 0x400000000;
  *(_QWORD *)(v4 + 72) = -1;
  v7 = *(_QWORD *)(a1 + 48);
  v6 = a1 + 48;
  v5 = v7;
  v8 = *(_DWORD *)(v6 + 16);
  if (v8)
  {
    v9 = v8 - 1;
    v10 = v9 & ((a2 >> 4) ^ (a2 >> 9));
    v11 = (_QWORD *)(v5 + 16 * v10);
    v12 = *v11;
    if (*v11 == a2)
      goto LABEL_16;
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = v11;
      v16 = v10 + v14++;
      v10 = v16 & v9;
      v11 = (_QWORD *)(v5 + 16 * v10);
      v12 = *v11;
      if (*v11 == a2)
        goto LABEL_16;
    }
    if (v13)
      v17 = v13;
    else
      v17 = v11;
  }
  else
  {
    v17 = 0;
  }
  v11 = sub_1C52A334C(v6, (uint64_t)&v22, &v22, v17);
  *v11 = v22;
  v11[1] = 0;
LABEL_16:
  v18 = v11[1];
  v11[1] = v4;
  if (v18)
  {
    v20 = v11;
    v21 = *(void **)(v18 + 24);
    if (v21 != (void *)(v18 + 40))
      free(v21);
    MEMORY[0x1CAA32FC0](v18, 0x10A0C40528A66C4);
    return v20[1];
  }
  return v4;
}

{
  return __ZN4llvm17DominatorTreeBaseINS_10BasicBlockELb1EE10createNodeEPS1_(a1, a2);
}

_DWORD *llvm::DominatorTreeBase<llvm::BasicBlock,true>::addRoot(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;

  v3 = result;
  v4 = result[2];
  if (v4 >= result[3])
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v4 + 1, 8);
    LODWORD(v4) = v3[2];
  }
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = a2;
  ++v3[2];
  return result;
}

void llvm::DominatorTreeBase<llvm::BasicBlock,true>::changeImmediateDominator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)(a1 + 88) = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 != a3)
  {
    v6 = *(_QWORD **)(v3 + 24);
    v7 = *(unsigned int *)(v3 + 32);
    v8 = &v6[v7];
    if ((_DWORD)v7)
    {
      v9 = 8 * v7;
      while (*v6 != a2)
      {
        ++v6;
        v9 -= 8;
        if (!v9)
        {
          v6 = v8;
          break;
        }
      }
    }
    if (v8 != v6 + 1)
    {
      memmove(v6, v6 + 1, (char *)v8 - (char *)(v6 + 1));
      LODWORD(v7) = *(_DWORD *)(v3 + 32);
    }
    *(_DWORD *)(v3 + 32) = v7 - 1;
    *(_QWORD *)(a2 + 8) = a3;
    v10 = *(unsigned int *)(a3 + 32);
    if (v10 >= *(_DWORD *)(a3 + 36))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 24, a3 + 40, v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a3 + 32);
    }
    *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8 * v10) = a2;
    ++*(_DWORD *)(a3 + 32);
    llvm::DomTreeNodeBase<llvm::BasicBlock>::UpdateLevel(a2);
  }
}

{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = (uint64_t *)(a1 + 48);
  v20 = 0;
  v21 = a2;
  if (sub_1C4850EC8((uint64_t *)(a1 + 48), &v21, &v20))
  {
    v6 = v20;
    v7 = *(_QWORD *)(a1 + 48);
    v8 = *(unsigned int *)(a1 + 64);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 48);
    v8 = *(unsigned int *)(a1 + 64);
    v6 = v7 + 16 * v8;
  }
  if (v6 == v7 + 16 * v8)
    v9 = 0;
  else
    v9 = *(_QWORD *)(v6 + 8);
  v20 = 0;
  v21 = a3;
  if (sub_1C4850EC8(v5, &v21, &v20))
  {
    v10 = v20;
    v11 = *(_QWORD *)(a1 + 48);
    v12 = *(unsigned int *)(a1 + 64);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 48);
    v12 = *(unsigned int *)(a1 + 64);
    v10 = v11 + 16 * v12;
  }
  if (v10 == v11 + 16 * v12)
    v13 = 0;
  else
    v13 = *(_QWORD *)(v10 + 8);
  *(_BYTE *)(a1 + 88) = 0;
  v14 = *(_QWORD *)(v9 + 8);
  if (v14 != v13)
  {
    v15 = *(_QWORD **)(v14 + 24);
    v16 = *(unsigned int *)(v14 + 32);
    v17 = &v15[v16];
    if ((_DWORD)v16)
    {
      v18 = 8 * v16;
      while (*v15 != v9)
      {
        ++v15;
        v18 -= 8;
        if (!v18)
        {
          v15 = v17;
          break;
        }
      }
    }
    if (v17 != v15 + 1)
    {
      memmove(v15, v15 + 1, (char *)v17 - (char *)(v15 + 1));
      LODWORD(v16) = *(_DWORD *)(v14 + 32);
    }
    *(_DWORD *)(v14 + 32) = v16 - 1;
    *(_QWORD *)(v9 + 8) = v13;
    v19 = *(unsigned int *)(v13 + 32);
    if (v19 >= *(_DWORD *)(v13 + 36))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v13 + 24, v13 + 40, v19 + 1, 8);
      LODWORD(v19) = *(_DWORD *)(v13 + 32);
    }
    *(_QWORD *)(*(_QWORD *)(v13 + 24) + 8 * v19) = v9;
    ++*(_DWORD *)(v13 + 32);
    llvm::DomTreeNodeBase<llvm::BasicBlock>::UpdateLevel(v9);
  }
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::eraseNode(int32x2_t *a1, uint64_t a2)
{
  int32x2_t *v3;
  uint64_t v4;
  int32x2_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = a2;
  v22 = 0;
  v3 = a1 + 6;
  v23 = a2;
  if (sub_1C4850EC8((uint64_t *)&a1[6], &v23, &v22))
  {
    v4 = v22;
    v5 = a1[6];
    v6 = a1[8].u32[0];
  }
  else
  {
    v5 = a1[6];
    v6 = a1[8].u32[0];
    v4 = *(_QWORD *)&v5 + 16 * v6;
  }
  if (v4 == *(_QWORD *)&v5 + 16 * v6)
    v7 = 0;
  else
    v7 = *(_QWORD *)(v4 + 8);
  a1[11].i8[0] = 0;
  v8 = *(_QWORD *)(v7 + 8);
  if (v8)
  {
    v9 = *(_QWORD **)(v8 + 24);
    v10 = *(unsigned int *)(v8 + 32);
    v11 = &v9[v10];
    if ((_DWORD)v10)
    {
      v12 = 8 * v10;
      while (*v9 != v7)
      {
        ++v9;
        v12 -= 8;
        if (!v12)
        {
          v9 = v11;
          break;
        }
      }
    }
    if (v11 != v9 + 1)
    {
      memmove(v9, v9 + 1, (char *)v11 - (char *)(v9 + 1));
      LODWORD(v10) = *(_DWORD *)(v8 + 32);
    }
    *(_DWORD *)(v8 + 32) = v10 - 1;
  }
  result = sub_1C4867FFC(v3, &v21);
  v14 = (_QWORD *)*a1;
  v15 = a1[1].u32[0];
  v16 = *(_QWORD *)a1 + 8 * v15;
  v17 = (_QWORD *)*a1;
  if ((_DWORD)v15)
  {
    v18 = 8 * v15;
    v17 = (_QWORD *)*a1;
    while (*v17 != v21)
    {
      ++v17;
      v18 -= 8;
      if (!v18)
      {
        v17 = (_QWORD *)(*(_QWORD *)a1 + 8 * v15);
        break;
      }
    }
  }
  v19 = v17 - v14;
  if (v19 != v15)
  {
    v20 = v14[v19];
    v14[v19] = *(_QWORD *)(v16 - 8);
    *(_QWORD *)(v16 - 8) = v20;
    a1[1].i32[0] = v15 - 1;
  }
  return result;
}

{
  return __ZN4llvm17DominatorTreeBaseINS_10BasicBlockELb1EE9eraseNodeEPS1_(a1, a2);
}

void llvm::DominatorTreeBase<llvm::BasicBlock,true>::splitBlock(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t Successor;
  uint64_t v25;
  uint64_t v26;
  uint64_t NearestCommonDominator;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  _QWORD v45[5];

  v45[4] = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t *)(a2 + 8);
  do
  {
    v5 = *v4;
    v6 = *(_QWORD *)(v5 + 24);
    v7 = *(unsigned __int8 *)(v6 + 16);
    v4 = (uint64_t *)(v5 + 8);
    if (v6)
      v8 = v7 >= 0x1C;
    else
      v8 = 0;
  }
  while (!v8 || v7 - 29 > 0xA);
  v10 = *(_QWORD *)(v6 + 40);
  v11 = *(_QWORD *)(a2 + 40);
  if (v11 == a2 + 40)
  {
LABEL_22:
    v14 = 0;
    v19 = 0;
    v43 = v45;
    HIDWORD(v44) = 4;
    goto LABEL_23;
  }
  v12 = v11 - 24;
  if (v11)
    v13 = v11 - 24;
  else
    v13 = 0;
  if (*(_BYTE *)(v13 + 16) == 30)
  {
    if ((*(_DWORD *)(v13 + 20) & 0x7FFFFFF) == 3)
      v14 = 2;
    else
      v14 = 1;
LABEL_17:
    v15 = v45;
    v43 = v45;
    v44 = 0x400000000;
    if (v14)
      goto LABEL_18;
    goto LABEL_91;
  }
  v14 = 0;
  switch(*(_BYTE *)(v13 + 16))
  {
    case 0x1D:
    case 0x22:
    case 0x23:
      goto LABEL_17;
    case 0x1E:
LABEL_80:
      __break(1u);
      goto LABEL_81;
    case 0x1F:
      v14 = (*(_DWORD *)(v13 + 20) >> 1) & 0x3FFFFFF;
      break;
    case 0x20:
    case 0x26:
LABEL_81:
      v14 = (*(_DWORD *)(v13 + 20) & 0x7FFFFFF) - 1;
      break;
    case 0x21:
      v14 = 2;
      goto LABEL_17;
    case 0x24:
      v14 = *(_WORD *)(v13 + 18) & 1;
      goto LABEL_17;
    case 0x25:
      v14 = 1;
      goto LABEL_17;
    case 0x27:
      v14 = *(_DWORD *)(v13 + 80) + 1;
      break;
    default:
      goto LABEL_22;
  }
  v43 = v45;
  v44 = 0x400000000;
  if (v14 < 5)
  {
    v15 = v45;
    if (v14)
    {
LABEL_18:
      v16 = 0;
      goto LABEL_19;
    }
LABEL_91:
    v19 = 0;
    goto LABEL_23;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, (uint64_t)v45, v14, 8);
  v16 = v44;
  v15 = v43;
LABEL_19:
  v17 = 0;
  v18 = &v15[v16];
  do
  {
    v18[v17] = llvm::Instruction::getSuccessor((llvm::Instruction *)v12, v17);
    ++v17;
  }
  while (v14 != (_DWORD)v17);
  v19 = v44;
LABEL_23:
  v13 = (v19 + v14);
  LODWORD(v44) = v13;
  v20 = *(_QWORD *)(v10 + 40);
  if (v20 == v10 + 40)
  {
LABEL_37:
    v21 = 1;
  }
  else
  {
    if (v20)
      v12 = v20 - 24;
    else
      v12 = 0;
    v21 = 1;
    if (*(_BYTE *)(v12 + 16) != 30)
    {
      v22 = 2;
      switch(*(_BYTE *)(v12 + 16))
      {
        case 0x1D:
        case 0x22:
        case 0x23:
          goto LABEL_40;
        case 0x1E:
          goto LABEL_80;
        case 0x1F:
          v22 = (*(_DWORD *)(v12 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_68;
        case 0x20:
        case 0x26:
          v22 = (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_68;
        case 0x21:
          goto LABEL_31;
        case 0x24:
          v22 = *(_WORD *)(v12 + 18) & 1;
          goto LABEL_68;
        case 0x25:
          v22 = 1;
          goto LABEL_31;
        case 0x27:
          v22 = *(_DWORD *)(v12 + 80) + 1;
LABEL_68:
          if (!v22)
            goto LABEL_40;
          goto LABEL_31;
        default:
          goto LABEL_37;
      }
    }
    if ((*(_DWORD *)(v12 + 20) & 0x7FFFFFF) == 3)
      v22 = 2;
    else
      v22 = 1;
LABEL_31:
    v23 = 0;
    while (1)
    {
      Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v12, v23);
      if (Successor != a2)
      {
        v25 = Successor;
        if (!llvm::DominatorTreeBase<llvm::BasicBlock,true>::dominates(a1, v10, Successor)
          && llvm::DominatorTreeBase<llvm::BasicBlock,true>::isReachableFromEntry(a1, v25))
        {
          break;
        }
      }
      if (v22 == ++v23)
      {
        v21 = 1;
        goto LABEL_39;
      }
    }
    v21 = 0;
LABEL_39:
    LODWORD(v13) = v44;
  }
LABEL_40:
  if ((_DWORD)v13)
  {
    v26 = 0;
    while (!llvm::DominatorTreeBase<llvm::BasicBlock,true>::isReachableFromEntry(a1, *((_QWORD *)v43 + v26)))
    {
      if (++v26 >= (unint64_t)v44)
        goto LABEL_59;
    }
    NearestCommonDominator = *((_QWORD *)v43 + v26);
    if (NearestCommonDominator)
    {
      if (v44 > (int)v26 + 1)
      {
        v28 = v26 + 1;
        do
        {
          if (llvm::DominatorTreeBase<llvm::BasicBlock,true>::isReachableFromEntry(a1, *((_QWORD *)v43 + v28)))
            NearestCommonDominator = llvm::DominatorTreeBase<llvm::BasicBlock,true>::findNearestCommonDominator(a1, NearestCommonDominator, *((_QWORD *)v43 + v28));
          ++v28;
        }
        while (v28 < v44);
      }
      v29 = llvm::DominatorTreeBase<llvm::BasicBlock,true>::addNewBlock(a1, a2, NearestCommonDominator);
      if (v21)
      {
        v30 = v29;
        v41 = 0;
        v42 = v10;
        if (sub_1C4850EC8((uint64_t *)(a1 + 48), &v42, &v41))
        {
          v31 = v41;
          v32 = *(_QWORD *)(a1 + 48);
          v33 = *(unsigned int *)(a1 + 64);
        }
        else
        {
          v32 = *(_QWORD *)(a1 + 48);
          v33 = *(unsigned int *)(a1 + 64);
          v31 = v32 + 16 * v33;
        }
        v34 = v31 == v32 + 16 * v33 ? 0 : *(_QWORD *)(v31 + 8);
        *(_BYTE *)(a1 + 88) = 0;
        v35 = *(_QWORD *)(v34 + 8);
        if (v35 != v30)
        {
          v36 = *(_QWORD **)(v35 + 24);
          v37 = *(unsigned int *)(v35 + 32);
          v38 = &v36[v37];
          if ((_DWORD)v37)
          {
            v39 = 8 * v37;
            while (*v36 != v34)
            {
              ++v36;
              v39 -= 8;
              if (!v39)
              {
                v36 = v38;
                break;
              }
            }
          }
          if (v38 != v36 + 1)
          {
            memmove(v36, v36 + 1, (char *)v38 - (char *)(v36 + 1));
            LODWORD(v37) = *(_DWORD *)(v35 + 32);
          }
          *(_DWORD *)(v35 + 32) = v37 - 1;
          *(_QWORD *)(v34 + 8) = v30;
          v40 = *(unsigned int *)(v30 + 32);
          if (v40 >= *(_DWORD *)(v30 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v30 + 24, v30 + 40, v40 + 1, 8);
            LODWORD(v40) = *(_DWORD *)(v30 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v30 + 24) + 8 * v40) = v34;
          ++*(_DWORD *)(v30 + 32);
          llvm::DomTreeNodeBase<llvm::BasicBlock>::UpdateLevel(v34);
        }
      }
    }
  }
LABEL_59:
  if (v43 != v45)
    free(v43);
}

void llvm::DominatorTreeBase<llvm::BasicBlock,true>::recalculate(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 80) = a2;
  sub_1C53BA93C(a1, 0);
}

void llvm::DomTreeBuilder::Calculate<llvm::DominatorTreeBase<llvm::BasicBlock,true>>(uint64_t a1)
{
  sub_1C53BA93C(a1, 0);
}

{
  __ZN4llvm14DomTreeBuilder9CalculateINS_17DominatorTreeBaseINS_10BasicBlockELb1EEEEEvRT_(a1);
}

uint64_t llvm::DominatorTreeBase<llvm::BasicBlock,true>::recalculate(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  _BYTE v6[8];
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[296];
  uint64_t v11;
  void *v12;
  unsigned int v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 80) = a2;
  sub_1C4E28D78((uint64_t)v10, a3, a4, 1u);
  v6[0] = 0;
  v7 = v10;
  v8 = 0;
  v9 = v13;
  sub_1C53BA93C(a1, (uint64_t)v6);
  if (v12 != v14)
    free(v12);
  sub_1C4E295E8((uint64_t)&v11);
  return sub_1C4E295E8((uint64_t)v10);
}

uint64_t llvm::DomTreeBuilder::Verify<llvm::DominatorTreeBase<llvm::BasicBlock,true>>(uint64_t a1, int a2)
{
  void **v4;
  uint64_t v5;
  llvm *v6;
  char v7;
  uint64_t v8;
  llvm *v9;
  llvm *v10;
  void *v11;
  const char *v12;
  size_t v13;
  llvm::raw_ostream *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  llvm::raw_ostream *v24;
  _DWORD *v25;
  void *v26;
  uint64_t v27;
  llvm::raw_ostream *v28;
  llvm *v29;
  llvm::raw_ostream *v30;
  void *v31;
  llvm::raw_ostream *v32;
  llvm *v33;
  llvm::raw_ostream *v34;
  const char *v35;
  const char *v36;
  _BOOL8 v37;
  _BOOL4 v38;
  llvm::raw_ostream *v39;
  void *v40;
  llvm::raw_ostream *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  llvm::Value *v46;
  llvm::raw_ostream *v47;
  _DWORD *v48;
  _WORD *v49;
  llvm::raw_ostream *v50;
  uint64_t v51;
  llvm::Value **v52;
  uint64_t v53;
  llvm::Value *v54;
  llvm::raw_ostream *v55;
  _DWORD *v56;
  _WORD *v57;
  llvm::raw_ostream *v58;
  _BYTE *v59;
  llvm::raw_ostream *v60;
  const char *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  unsigned int v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  int v77;
  llvm::Value *v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  _QWORD *v82;
  void **v83;
  void **v84;
  llvm::Value *v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  llvm::raw_ostream *v89;
  llvm::raw_ostream *v90;
  void *v91;
  llvm::raw_ostream *v92;
  void *v93;
  const char *v94;
  llvm::raw_ostream *v95;
  size_t v96;
  const char *v97;
  _QWORD *v98;
  uint64_t v99;
  llvm::Value *v100;
  uint64_t v101;
  int v102;
  _QWORD *v103;
  llvm *v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  llvm::raw_ostream *v110;
  void *v111;
  const char *v112;
  size_t v113;
  llvm *v114;
  _BYTE *v115;
  uint64_t v116;
  uint64_t v117;
  _BYTE *v118;
  unint64_t v119;
  uint64_t v120;
  unsigned int *v121;
  uint64_t v122;
  uint64_t *v123;
  int v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  llvm *v130;
  uint64_t v131;
  llvm *v132;
  llvm *v133;
  uint64_t v134;
  llvm *v135;
  uint64_t v136;
  uint64_t *v137;
  int v138;
  uint64_t v139;
  int v140;
  unsigned int v141;
  uint64_t *v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  uint64_t *v148;
  int v149;
  BOOL v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t *v153;
  uint64_t *v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t *v159;
  int v160;
  BOOL v161;
  unsigned int v162;
  uint64_t *v163;
  char *v164;
  void **v165;
  char *v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  char *v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t v182;
  _QWORD *v183;
  unint64_t v184;
  _DWORD *v185;
  unint64_t v186;
  unsigned int v188;
  uint64_t v189;
  uint64_t *v190;
  int v191;
  BOOL v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  llvm::Value ***v196;
  llvm::Value ***v197;
  int v198;
  llvm::Value **v199;
  llvm::Value *v200;
  unsigned int v201;
  llvm::Value *v202;
  int v203;
  unsigned int v204;
  llvm *v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  _QWORD *v210;
  llvm::raw_ostream *v211;
  llvm::raw_ostream *v212;
  uint64_t v213;
  _DWORD *v214;
  void *v215;
  void *v216;
  llvm::raw_ostream *v217;
  uint64_t v218;
  void *v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD **v224;
  llvm::Value **v225;
  llvm::Value *v226;
  llvm *v227;
  uint64_t v228;
  uint64_t *v229;
  int v230;
  uint64_t v231;
  int v232;
  unsigned int v233;
  uint64_t *v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  unsigned int v238;
  unsigned int v239;
  uint64_t *v240;
  int v241;
  BOOL v242;
  unsigned int v243;
  unsigned int v244;
  uint64_t *v245;
  uint64_t *v246;
  uint64_t v247;
  unsigned int v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t *v251;
  int v252;
  BOOL v253;
  unsigned int v254;
  uint64_t *v255;
  char *v256;
  void **v257;
  char *v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  char *v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t v269;
  unsigned int v270;
  uint64_t *v271;
  uint64_t *v272;
  uint64_t v273;
  _QWORD *v274;
  unint64_t v275;
  _DWORD *v276;
  unint64_t v277;
  unsigned int v279;
  uint64_t v280;
  uint64_t *v281;
  int v282;
  BOOL v283;
  unsigned int v284;
  uint64_t *v285;
  uint64_t v286;
  uint64_t v287;
  llvm::Value ***v288;
  llvm::Value ***v289;
  int v290;
  llvm::Value **v291;
  unsigned int v292;
  llvm::Value *v293;
  int v294;
  unsigned int v295;
  _QWORD *v296;
  llvm::raw_ostream *v297;
  uint64_t v298;
  _DWORD *v299;
  void *v300;
  _DWORD *v301;
  llvm::raw_ostream *v302;
  uint64_t v303;
  uint64_t v304;
  _OWORD *v305;
  _DWORD *v306;
  uint64_t v307;
  unint64_t v308;
  llvm::raw_ostream *v309;
  void *v310;
  void *v311;
  _WORD *v312;
  uint64_t v313;
  void *v314;
  _QWORD **v315;
  uint64_t v316;
  llvm *v317;
  _QWORD *v318;
  _QWORD *v319;
  _QWORD *v320;
  uint64_t v321;
  _QWORD **v322;
  llvm *v323;
  uint64_t v324;
  uint64_t v325;
  llvm::Value **v326;
  uint64_t *v327;
  uint64_t v328;
  uint64_t *v329;
  uint64_t v330;
  int v331;
  void *__p;
  void **v333;
  char *v334;
  uint64_t v335[2];
  unsigned int v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  void *v341;
  void **p_src;
  _BYTE v343[64];
  void *__src;
  uint64_t v345;
  _QWORD v346[4];
  uint64_t v347[2];
  int v348;
  uint64_t v349;
  uint64_t v350;
  char v351;
  int v352;
  uint64_t v353;

  v353 = *MEMORY[0x1E0C80C00];
  v4 = (void **)operator new(8uLL);
  __p = v4;
  *v4 = 0;
  v333 = v4 + 1;
  v334 = (char *)(v4 + 1);
  v337 = 0;
  v335[0] = 0;
  v335[1] = 0;
  v336 = 0;
  __src = v346;
  v345 = 0x400000000;
  v352 = 0;
  v347[0] = 0;
  v347[1] = 0;
  v348 = 0;
  v351 = 0;
  v5 = *(_QWORD *)(a1 + 80);
  v349 = 0;
  v350 = v5;
  sub_1C53BA93C((uint64_t)&__src, 0);
  v6 = (llvm *)llvm::DominatorTreeBase<llvm::BasicBlock,true>::compare(a1, (uint64_t)&__src);
  v7 = (char)v6;
  if ((_DWORD)v6)
  {
    v24 = (llvm::raw_ostream *)llvm::errs(v6);
    v25 = (_DWORD *)*((_QWORD *)v24 + 4);
    if (*((_QWORD *)v24 + 3) - (_QWORD)v25 > 3uLL)
    {
      *v25 = 1953722192;
      v26 = (void *)(*((_QWORD *)v24 + 4) + 4);
      *((_QWORD *)v24 + 4) = v26;
    }
    else
    {
      v24 = llvm::raw_ostream::write(v24, "Post", 4uLL);
      v26 = (void *)*((_QWORD *)v24 + 4);
    }
    if (*((_QWORD *)v24 + 3) - (_QWORD)v26 > 0x37uLL)
    {
      qmemcpy(v26, "DominatorTree is different than a freshly computed one!\n", 56);
      v27 = *((_QWORD *)v24 + 4) + 56;
      *((_QWORD *)v24 + 4) = v27;
    }
    else
    {
      v24 = llvm::raw_ostream::write(v24, "DominatorTree is different than a freshly computed one!\n", 0x38uLL);
      v27 = *((_QWORD *)v24 + 4);
    }
    if ((unint64_t)(*((_QWORD *)v24 + 3) - v27) > 9)
    {
      *(_WORD *)(v27 + 8) = 2618;
      *(_QWORD *)v27 = *(_QWORD *)"\tCurrent:\n";
      *((_QWORD *)v24 + 4) += 10;
    }
    else
    {
      v24 = llvm::raw_ostream::write(v24, "\tCurrent:\n", 0xAuLL);
    }
    v28 = (llvm::raw_ostream *)llvm::errs(v24);
    v29 = llvm::DominatorTreeBase<llvm::BasicBlock,true>::print(a1, v28);
    v30 = (llvm::raw_ostream *)llvm::errs(v29);
    v31 = (void *)*((_QWORD *)v30 + 4);
    if (*((_QWORD *)v30 + 3) - (_QWORD)v31 > 0x18uLL)
    {
      qmemcpy(v31, "\n\tFreshly computed tree:\n", 25);
      *((_QWORD *)v30 + 4) += 25;
    }
    else
    {
      v30 = llvm::raw_ostream::write(v30, "\n\tFreshly computed tree:\n", 0x19uLL);
    }
    v32 = (llvm::raw_ostream *)llvm::errs(v30);
    v33 = llvm::DominatorTreeBase<llvm::BasicBlock,true>::print((uint64_t)&__src, v32);
    v34 = (llvm::raw_ostream *)llvm::errs(v33);
    v35 = (const char *)*((_QWORD *)v34 + 4);
    v36 = (const char *)*((_QWORD *)v34 + 2);
    if (v35 != v36)
    {
      *((_QWORD *)v34 + 4) = v36;
      llvm::raw_ostream::flush_tied_then_write(v34, v36, v35 - v36);
    }
  }
  sub_1C4DC4E38(v347);
  v9 = (llvm *)__src;
  if (__src != v346)
    free(__src);
  if ((v7 & 1) != 0)
    goto LABEL_12;
  if (!*(_QWORD *)(a1 + 80) && *(_DWORD *)(a1 + 8))
  {
    v10 = (llvm *)llvm::errs(v9);
    v11 = (void *)*((_QWORD *)v10 + 4);
    if (*((_QWORD *)v10 + 3) - (_QWORD)v11 <= 0x21uLL)
    {
      v12 = "Tree has no parent but has roots!\n";
      v13 = 34;
      goto LABEL_9;
    }
    qmemcpy(v11, "Tree has no parent but has roots!\n", 34);
    *((_QWORD *)v10 + 4) += 34;
LABEL_10:
    v14 = (llvm::raw_ostream *)llvm::errs(v10);
    v15 = (const char *)*((_QWORD *)v14 + 4);
    v16 = (const char *)*((_QWORD *)v14 + 2);
    v8 = v15 - v16;
    if (v15 != v16)
    {
LABEL_11:
      *((_QWORD *)v14 + 4) = v16;
      llvm::raw_ostream::flush_tied_then_write(v14, v16, v8);
    }
    goto LABEL_12;
  }
  sub_1C53C0A54(a1, 0, (uint64_t)&__src);
  v37 = sub_1C61ED220(*(uint64_t **)a1, *(_DWORD *)(a1 + 8), (uint64_t)&__src);
  v38 = v37;
  v330 = a1;
  v331 = a2;
  if (!v37)
  {
    v39 = (llvm::raw_ostream *)llvm::errs((llvm *)v37);
    v40 = (void *)*((_QWORD *)v39 + 4);
    if (*((_QWORD *)v39 + 3) - (_QWORD)v40 > 0x34uLL)
    {
      qmemcpy(v40, "Tree has different roots than freshly computed ones!\n", 53);
      *((_QWORD *)v39 + 4) += 53;
    }
    else
    {
      v39 = llvm::raw_ostream::write(v39, "Tree has different roots than freshly computed ones!\n", 0x35uLL);
    }
    v41 = (llvm::raw_ostream *)llvm::errs(v39);
    v42 = *((_QWORD *)v41 + 4);
    if ((unint64_t)(*((_QWORD *)v41 + 3) - v42) > 0xB)
    {
      *(_DWORD *)(v42 + 8) = 540701556;
      *(_QWORD *)v42 = *(_QWORD *)"\tPDT roots: ";
      *((_QWORD *)v41 + 4) += 12;
    }
    else
    {
      v41 = llvm::raw_ostream::write(v41, "\tPDT roots: ", 0xCuLL);
    }
    v43 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v43)
    {
      v44 = *(uint64_t **)a1;
      v45 = 8 * v43;
      do
      {
        v46 = (llvm::Value *)*v44;
        v41 = (llvm::raw_ostream *)llvm::errs(v41);
        v47 = v41;
        if (v46)
        {
          v41 = (llvm::raw_ostream *)llvm::Value::printAsOperand(v46, v41, 0, 0);
        }
        else
        {
          v48 = (_DWORD *)*((_QWORD *)v41 + 4);
          if (*((_QWORD *)v41 + 3) - (_QWORD)v48 > 6uLL)
          {
            *(_DWORD *)((char *)v48 + 3) = 1920233580;
            *v48 = 1819047278;
            *((_QWORD *)v41 + 4) += 7;
          }
          else
          {
            v41 = llvm::raw_ostream::write(v41, "nullptr", 7uLL);
          }
        }
        v49 = (_WORD *)*((_QWORD *)v47 + 4);
        if (*((_QWORD *)v47 + 3) - (_QWORD)v49 > 1uLL)
        {
          *v49 = 8236;
          *((_QWORD *)v47 + 4) += 2;
        }
        else
        {
          v41 = llvm::raw_ostream::write(v47, ", ", 2uLL);
        }
        ++v44;
        v45 -= 8;
      }
      while (v45);
    }
    v50 = (llvm::raw_ostream *)llvm::errs(v41);
    v51 = *((_QWORD *)v50 + 4);
    if ((unint64_t)(*((_QWORD *)v50 + 3) - v51) > 0x11)
    {
      *(_WORD *)(v51 + 16) = 8250;
      *(_OWORD *)v51 = *(_OWORD *)"\n\tComputed roots: ";
      *((_QWORD *)v50 + 4) += 18;
    }
    else
    {
      v50 = llvm::raw_ostream::write(v50, "\n\tComputed roots: ", 0x12uLL);
    }
    if ((_DWORD)v345)
    {
      v52 = (llvm::Value **)__src;
      v53 = 8 * v345;
      do
      {
        v54 = *v52;
        v50 = (llvm::raw_ostream *)llvm::errs(v50);
        v55 = v50;
        if (v54)
        {
          v50 = (llvm::raw_ostream *)llvm::Value::printAsOperand(v54, v50, 0, 0);
        }
        else
        {
          v56 = (_DWORD *)*((_QWORD *)v50 + 4);
          if (*((_QWORD *)v50 + 3) - (_QWORD)v56 > 6uLL)
          {
            *(_DWORD *)((char *)v56 + 3) = 1920233580;
            *v56 = 1819047278;
            *((_QWORD *)v50 + 4) += 7;
          }
          else
          {
            v50 = llvm::raw_ostream::write(v50, "nullptr", 7uLL);
          }
        }
        v57 = (_WORD *)*((_QWORD *)v55 + 4);
        if (*((_QWORD *)v55 + 3) - (_QWORD)v57 > 1uLL)
        {
          *v57 = 8236;
          *((_QWORD *)v55 + 4) += 2;
        }
        else
        {
          v50 = llvm::raw_ostream::write(v55, ", ", 2uLL);
        }
        ++v52;
        v53 -= 8;
      }
      while (v53);
    }
    v58 = (llvm::raw_ostream *)llvm::errs(v50);
    v59 = (_BYTE *)*((_QWORD *)v58 + 4);
    if (*((_BYTE **)v58 + 3) == v59)
    {
      v58 = llvm::raw_ostream::write(v58, "\n", 1uLL);
    }
    else
    {
      *v59 = 10;
      ++*((_QWORD *)v58 + 4);
    }
    a1 = v330;
    a2 = v331;
    v60 = (llvm::raw_ostream *)llvm::errs(v58);
    v61 = (const char *)*((_QWORD *)v60 + 4);
    v62 = (const char *)*((_QWORD *)v60 + 2);
    v8 = v61 - v62;
    if (v61 != v62)
    {
      *((_QWORD *)v60 + 4) = v62;
      llvm::raw_ostream::flush_tied_then_write(v60, v62, v8);
    }
  }
  if (__src != v346)
    free(__src);
  if (!v38)
    goto LABEL_12;
  __src = 0;
  sub_1C53C4ED0((char **)&__p, &__src, &v345);
  sub_1C53C4E10((uint64_t)v335);
  sub_1C53C203C((char **)&__p);
  v64 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v64)
  {
    v65 = *(uint64_t **)a1;
    v66 = 8 * v64;
    v8 = 1;
    do
    {
      v67 = *v65++;
      v63 = sub_1C53C21E0((uint64_t)&__p, v67, v8, (unsigned int (*)(uint64_t, uint64_t))sub_1C53C12D0, 0, 0);
      v8 = v63;
      v66 -= 8;
    }
    while (v66);
  }
  v68 = *(_QWORD **)(a1 + 48);
  v69 = *(_DWORD *)(a1 + 56);
  v70 = *(unsigned int *)(a1 + 64);
  LODWORD(v71) = v70;
  v72 = &v68[2 * v70];
  v73 = *(_DWORD *)(a1 + 64);
  v74 = v72;
  if (v69)
  {
    if ((_DWORD)v70)
    {
      v75 = 16 * v70;
      v74 = *(_QWORD **)(a1 + 48);
      while ((*v74 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v74 += 2;
        v75 -= 16;
        if (!v75)
        {
          v73 = *(_DWORD *)(a1 + 64);
          v74 = &v68[2 * v70];
          goto LABEL_84;
        }
      }
      v73 = *(_DWORD *)(a1 + 64);
    }
    else
    {
      v73 = 0;
      v74 = *(_QWORD **)(a1 + 48);
    }
  }
LABEL_84:
  v76 = &v68[2 * v73];
  if (v74 != v76)
  {
    v77 = v336 - 1;
    v63 = 72;
    while (1)
    {
      v78 = *(llvm::Value **)v74[1];
      if (v78)
      {
        if (!v336)
          goto LABEL_111;
        v79 = v77 & ((v78 >> 4) ^ (v78 >> 9));
        v8 = *(_QWORD *)(v335[0] + 72 * v79);
        if (v78 != (llvm::Value *)v8)
          break;
      }
LABEL_92:
      v82 = v74 + 2;
      v74 = &v68[2 * v70];
      if (v82 != v72)
      {
        v74 = v82;
        while ((*v74 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v74 += 2;
          if (v74 == v72)
          {
            v74 = &v68[2 * v70];
            break;
          }
        }
      }
      if (v74 == v76)
        goto LABEL_98;
    }
    v80 = 1;
    while (v8 != -4096)
    {
      v81 = v79 + v80++;
      v79 = v81 & v77;
      v8 = *(_QWORD *)(v335[0] + 72 * v79);
      if (v78 == (llvm::Value *)v8)
        goto LABEL_92;
    }
LABEL_111:
    v89 = (llvm::raw_ostream *)llvm::errs((llvm *)0x48);
    v90 = v89;
    v91 = (void *)*((_QWORD *)v89 + 4);
    if (*((_QWORD *)v89 + 3) - (_QWORD)v91 > 0xCuLL)
    {
      qmemcpy(v91, "DomTree node ", 13);
      *((_QWORD *)v89 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(v89, "DomTree node ", 0xDuLL);
    }
    v92 = (llvm::raw_ostream *)llvm::Value::printAsOperand(v78, v90, 0, 0);
    v93 = (void *)*((_QWORD *)v90 + 4);
    if (*((_QWORD *)v90 + 3) - (_QWORD)v93 > 0x17uLL)
    {
      qmemcpy(v93, " not found by DFS walk!\n", 24);
      v220 = *((_QWORD *)v90 + 4) + 24;
      goto LABEL_333;
    }
    v94 = " not found by DFS walk!\n";
    v95 = v90;
    v96 = 24;
LABEL_115:
    v92 = llvm::raw_ostream::write(v95, v94, v96);
    goto LABEL_116;
  }
LABEL_98:
  v83 = (void **)__p;
  v84 = v333;
  if (__p == v333)
    goto LABEL_105;
  do
  {
    v85 = (llvm::Value *)*v83;
    if (*v83)
    {
      __src = *v83;
      v341 = 0;
      v63 = sub_1C4850EC8((uint64_t *)(a1 + 48), &__src, &v341);
      if (!(_DWORD)v63
        || (v68 = *(_QWORD **)(a1 + 48), v71 = *(unsigned int *)(a1 + 64), v341 == &v68[2 * v71])
        || !*((_QWORD *)v341 + 1))
      {
        v217 = (llvm::raw_ostream *)llvm::errs((llvm *)v63);
        v90 = v217;
        v218 = *((_QWORD *)v217 + 4);
        if ((unint64_t)(*((_QWORD *)v217 + 3) - v218) > 8)
        {
          *(_BYTE *)(v218 + 8) = 32;
          *(_QWORD *)v218 = *(_QWORD *)"CFG node ";
          *((_QWORD *)v217 + 4) += 9;
        }
        else
        {
          llvm::raw_ostream::write(v217, "CFG node ", 9uLL);
        }
        v92 = (llvm::raw_ostream *)llvm::Value::printAsOperand(v85, v90, 0, 0);
        v219 = (void *)*((_QWORD *)v90 + 4);
        if (*((_QWORD *)v90 + 3) - (_QWORD)v219 > 0x1AuLL)
        {
          qmemcpy(v219, " not found in the DomTree!\n", 27);
          v220 = *((_QWORD *)v90 + 4) + 27;
          goto LABEL_333;
        }
        v94 = " not found in the DomTree!\n";
        v95 = v90;
        v96 = 27;
        goto LABEL_115;
      }
    }
    ++v83;
  }
  while (v83 != v84);
  v69 = *(_DWORD *)(a1 + 56);
  v70 = v71;
LABEL_105:
  v86 = &v68[2 * v70];
  if (v69)
  {
    if ((_DWORD)v71)
    {
      v87 = 16 * v70;
      v88 = v68;
      while ((*v88 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v88 += 2;
        v87 -= 16;
        if (!v87)
          goto LABEL_110;
      }
    }
    else
    {
      v88 = v68;
    }
  }
  else
  {
LABEL_110:
    v88 = v86;
  }
  v98 = &v68[2 * v71];
LABEL_120:
  while (v88 != v98)
  {
    v99 = v88[1];
    v100 = *(llvm::Value **)v99;
    if (*(_QWORD *)v99)
    {
      v101 = *(_QWORD *)(v99 + 8);
      v102 = *(_DWORD *)(v99 + 16);
      if (v101)
      {
        if (v102 != *(_DWORD *)(v101 + 16) + 1)
        {
          v302 = (llvm::raw_ostream *)llvm::errs((llvm *)v63);
          v90 = v302;
          v303 = *((_QWORD *)v302 + 4);
          if ((unint64_t)(*((_QWORD *)v302 + 3) - v303) > 4)
          {
            *(_BYTE *)(v303 + 4) = 32;
            *(_DWORD *)v303 = 1701080910;
            *((_QWORD *)v302 + 4) += 5;
          }
          else
          {
            llvm::raw_ostream::write(v302, "Node ", 5uLL);
          }
          llvm::Value::printAsOperand(v100, v90, 0, 0);
          v304 = *((_QWORD *)v90 + 4);
          if ((unint64_t)(*((_QWORD *)v90 + 3) - v304) > 0xA)
          {
            *(_DWORD *)(v304 + 7) = 543974774;
            *(_QWORD *)v304 = *(_QWORD *)" has level ";
            *((_QWORD *)v90 + 4) += 11;
          }
          else
          {
            llvm::raw_ostream::write(v90, " has level ", 0xBuLL);
          }
          sub_1C5E21910(v90, *(unsigned int *)(v99 + 16), 0, 0, 0);
          v305 = (_OWORD *)*((_QWORD *)v90 + 4);
          if (*((_QWORD *)v90 + 3) - (_QWORD)v305 > 0xFuLL)
          {
            *v305 = *(_OWORD *)" while its IDom ";
            *((_QWORD *)v90 + 4) += 16;
          }
          else
          {
            llvm::raw_ostream::write(v90, " while its IDom ", 0x10uLL);
          }
          if (*(_QWORD *)v101)
          {
            llvm::Value::printAsOperand(*(llvm::Value **)v101, v90, 0, 0);
          }
          else
          {
            v306 = (_DWORD *)*((_QWORD *)v90 + 4);
            if (*((_QWORD *)v90 + 3) - (_QWORD)v306 > 6uLL)
            {
              *(_DWORD *)((char *)v306 + 3) = 1920233580;
              *v306 = 1819047278;
              *((_QWORD *)v90 + 4) += 7;
            }
            else
            {
              llvm::raw_ostream::write(v90, "nullptr", 7uLL);
            }
          }
          v307 = *((_QWORD *)v90 + 4);
          if ((unint64_t)(*((_QWORD *)v90 + 3) - v307) > 0xA)
          {
            *(_DWORD *)(v307 + 7) = 543974774;
            *(_QWORD *)v307 = *(_QWORD *)" has level ";
            *((_QWORD *)v90 + 4) += 11;
          }
          else
          {
            llvm::raw_ostream::write(v90, " has level ", 0xBuLL);
          }
          v308 = *(unsigned int *)(v101 + 16);
          goto LABEL_485;
        }
      }
      else if (v102)
      {
        v309 = (llvm::raw_ostream *)llvm::errs((llvm *)v63);
        v90 = v309;
        v310 = (void *)*((_QWORD *)v309 + 4);
        if (*((_QWORD *)v309 + 3) - (_QWORD)v310 > 0x14uLL)
        {
          qmemcpy(v310, "Node without an IDom ", 21);
          *((_QWORD *)v309 + 4) += 21;
        }
        else
        {
          llvm::raw_ostream::write(v309, "Node without an IDom ", 0x15uLL);
        }
        llvm::Value::printAsOperand(v100, v90, 0, 0);
        v311 = (void *)*((_QWORD *)v90 + 4);
        if (*((_QWORD *)v90 + 3) - (_QWORD)v311 > 0x14uLL)
        {
          qmemcpy(v311, " has a nonzero level ", 21);
          *((_QWORD *)v90 + 4) += 21;
        }
        else
        {
          llvm::raw_ostream::write(v90, " has a nonzero level ", 0x15uLL);
        }
        v308 = *(unsigned int *)(v99 + 16);
LABEL_485:
        v92 = sub_1C5E21910(v90, v308, 0, 0, 0);
        v312 = (_WORD *)*((_QWORD *)v90 + 4);
        if (*((_QWORD *)v90 + 3) - (_QWORD)v312 <= 1uLL)
        {
          v94 = "!\n";
          v95 = v90;
          v96 = 2;
          goto LABEL_115;
        }
        *v312 = 2593;
        v220 = *((_QWORD *)v90 + 4) + 2;
LABEL_333:
        *((_QWORD *)v90 + 4) = v220;
        goto LABEL_116;
      }
    }
    v103 = v88 + 2;
    v88 = v86;
    if (v103 != v86)
    {
      v88 = v103;
      while ((*v88 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v88 += 2;
        if (v88 == v86)
        {
          v88 = v86;
          goto LABEL_120;
        }
      }
    }
  }
  if (!*(_BYTE *)(a1 + 88) || !*(_QWORD *)(v330 + 80))
    goto LABEL_176;
  __src = 0;
  v341 = 0;
  v104 = (llvm *)sub_1C4850EC8((uint64_t *)(a1 + 48), &__src, &v341);
  v105 = v341;
  v106 = *(_QWORD **)(v330 + 48);
  v107 = *(unsigned int *)(v330 + 64);
  v108 = &v106[2 * v107];
  if (!(_DWORD)v104)
    v105 = &v106[2 * v107];
  v109 = v105[1];
  if (*(_DWORD *)(v109 + 72))
  {
    v110 = (llvm::raw_ostream *)llvm::errs(v104);
    v111 = (void *)*((_QWORD *)v110 + 4);
    if (*((_QWORD *)v110 + 3) - (_QWORD)v111 <= 0x27uLL)
    {
      v112 = "DFSIn number for the tree root is not:\n\t";
      v113 = 40;
      goto LABEL_138;
    }
    qmemcpy(v111, "DFSIn number for the tree root is not:\n\t", 40);
    v313 = *((_QWORD *)v110 + 4) + 40;
    goto LABEL_488;
  }
  if (!*(_DWORD *)(v330 + 56))
    goto LABEL_176;
  if ((_DWORD)v107)
  {
    v116 = 16 * v107;
    while ((*v106 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v106 += 2;
      v116 -= 16;
      if (!v116)
        goto LABEL_176;
    }
  }
  if (v106 == v108)
  {
LABEL_176:
    if ((a2 - 1) > 1)
      goto LABEL_457;
    v127 = v330;
    v128 = *(_QWORD *)(v330 + 48);
    v129 = *(unsigned int *)(v330 + 64);
    v130 = (llvm *)(v128 + 16 * v129);
    if (*(_DWORD *)(v330 + 56))
    {
      if ((_DWORD)v129)
      {
        v131 = 16 * v129;
        v132 = *(llvm **)(v330 + 48);
        while ((*(_QWORD *)v132 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v132 = (llvm *)((char *)v132 + 16);
          v131 -= 16;
          if (!v131)
            goto LABEL_182;
        }
      }
      else
      {
        v132 = *(llvm **)(v330 + 48);
      }
    }
    else
    {
LABEL_182:
      v132 = (llvm *)(v128 + 16 * v129);
    }
    v133 = (llvm *)(v128 + 16 * v129);
    if (v132 != v133)
    {
      v317 = (llvm *)(v128 + 16 * v129);
      do
      {
        v134 = *((_QWORD *)v132 + 1);
        v135 = *(llvm **)v134;
        if (*(_QWORD *)v134 && *(_DWORD *)(v134 + 32))
        {
          v321 = *((_QWORD *)v132 + 1);
          v323 = v132;
          __src = 0;
          sub_1C53C4ED0((char **)&__p, &__src, &v345);
          sub_1C53C4E10((uint64_t)v335);
          sub_1C53C203C((char **)&__p);
          v136 = *(unsigned int *)(v127 + 8);
          if ((_DWORD)v136)
          {
            v325 = *(_QWORD *)v330 + 8 * v136;
            v137 = *(uint64_t **)v330;
            v138 = 1;
            do
            {
              v327 = v137;
              v139 = *v137;
              v340 = v139;
              __src = v346;
              v346[0] = v139;
              v345 = 0x4000000001;
              if (!v336)
                goto LABEL_204;
              v140 = v336 - 1;
              v141 = (v336 - 1) & ((v139 >> 4) ^ (v139 >> 9));
              v142 = (uint64_t *)(v335[0] + 72 * v141);
              v143 = *v142;
              if (*v142 == v139)
              {
LABEL_203:
                *(_DWORD *)(v335[0] + 72 * v141 + 12) = 0;
LABEL_204:
                v152 = 1;
                goto LABEL_210;
              }
              v144 = 1;
              v145 = *v142;
              v146 = v140 & ((v139 >> 4) ^ (v139 >> 9));
              do
              {
                if (v145 == -4096)
                  goto LABEL_204;
                v147 = v146 + v144++;
                v146 = v147 & v140;
                v145 = *(_QWORD *)(v335[0] + 72 * v146);
              }
              while (v145 != v139);
              v148 = 0;
              v149 = 1;
              while (v143 != -4096)
              {
                if (v148)
                  v150 = 0;
                else
                  v150 = v143 == -8192;
                if (v150)
                  v148 = v142;
                v151 = v141 + v149++;
                v141 = v151 & v140;
                v142 = (uint64_t *)(v335[0] + 72 * v141);
                v143 = *v142;
                if (*v142 == v139)
                  goto LABEL_203;
              }
              if (v148)
                v153 = v148;
              else
                v153 = v142;
              v154 = sub_1C53C2DB0((uint64_t)v335, &v340, v153);
              *v154 = v139;
              *(_OWORD *)(v154 + 5) = 0u;
              *(_OWORD *)(v154 + 3) = 0u;
              *(_OWORD *)(v154 + 1) = 0u;
              *(_OWORD *)(v154 + 7) = 0u;
              v154[5] = (uint64_t)(v154 + 7);
              *((_DWORD *)v154 + 13) = 2;
              while (1)
              {
                v152 = v345;
                if (!(_DWORD)v345)
                  break;
LABEL_210:
                v155 = *((_QWORD *)__src + v152 - 1);
                LODWORD(v345) = v152 - 1;
                v339 = v155;
                if (!v336)
                {
                  v163 = 0;
LABEL_224:
                  v157 = sub_1C53C2DB0((uint64_t)v335, &v339, v163);
                  *v157 = v155;
                  *(_OWORD *)(v157 + 5) = 0u;
                  *(_OWORD *)(v157 + 1) = 0u;
                  *(_OWORD *)(v157 + 3) = 0u;
                  *(_OWORD *)(v157 + 7) = 0u;
                  v157[5] = (uint64_t)(v157 + 7);
                  *((_DWORD *)v157 + 13) = 2;
                  goto LABEL_225;
                }
                v156 = (v336 - 1) & ((v155 >> 4) ^ (v155 >> 9));
                v157 = (uint64_t *)(v335[0] + 72 * v156);
                v158 = *v157;
                if (v155 != *v157)
                {
                  v159 = 0;
                  v160 = 1;
                  while (v158 != -4096)
                  {
                    if (v159)
                      v161 = 0;
                    else
                      v161 = v158 == -8192;
                    if (v161)
                      v159 = v157;
                    v162 = v156 + v160++;
                    v156 = v162 & (v336 - 1);
                    v157 = (uint64_t *)(v335[0] + 72 * v156);
                    v158 = *v157;
                    if (v155 == *v157)
                      goto LABEL_225;
                  }
                  if (v159)
                    v163 = v159;
                  else
                    v163 = v157;
                  goto LABEL_224;
                }
LABEL_225:
                if (!*((_DWORD *)v157 + 2))
                {
                  *((_DWORD *)v157 + 4) = ++v138;
                  *((_DWORD *)v157 + 2) = v138;
                  v157[3] = v155;
                  v164 = (char *)v333;
                  if (v333 >= (void **)v334)
                  {
                    v166 = (char *)__p;
                    v167 = ((char *)v333 - (_BYTE *)__p) >> 3;
                    v168 = v167 + 1;
                    if ((unint64_t)(v167 + 1) >> 61)
LABEL_511:
                      abort();
                    v169 = v334 - (_BYTE *)__p;
                    if ((v334 - (_BYTE *)__p) >> 2 > v168)
                      v168 = v169 >> 2;
                    if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFF8)
                      v170 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v170 = v168;
                    if (v170)
                    {
                      if (v170 >> 61)
LABEL_513:
                        sub_1C4764EE4();
                      v171 = (char *)operator new(8 * v170);
                    }
                    else
                    {
                      v171 = 0;
                    }
                    v172 = (uint64_t *)&v171[8 * v167];
                    *v172 = v155;
                    v165 = (void **)(v172 + 1);
                    if (v164 != v166)
                    {
                      do
                      {
                        v173 = *((_QWORD *)v164 - 1);
                        v164 -= 8;
                        *--v172 = v173;
                      }
                      while (v164 != v166);
                      v164 = (char *)__p;
                    }
                    __p = v172;
                    v333 = v165;
                    v334 = &v171[8 * v170];
                    if (v164)
                      operator delete(v164);
                  }
                  else
                  {
                    *v333 = (void *)v155;
                    v165 = (void **)(v164 + 8);
                  }
                  v333 = v165;
                  if (v337)
                    sub_1C53C36D0(*(_QWORD *)(v337 + 8), v339, (unsigned int *)&v341);
                  else
                    sub_1C53C38C8((unsigned int *)&v341, *(_QWORD *)(v339 + 8));
                  v174 = (uint64_t *)v341;
                  v175 = (uint64_t *)((char *)v341 + 8 * p_src);
                  if ((_DWORD)p_src)
                  {
                    while (1)
                    {
                      v177 = *v174;
                      v338 = v177;
                      v178 = v335[0];
                      v179 = v336;
                      v180 = sub_1C4F4C0E0(v335[0], v336, v177);
                      if ((uint64_t *)(v178 + 72 * v179) == v180)
                      {
                        v182 = v339;
                      }
                      else
                      {
                        v181 = v180;
                        v182 = v339;
                        if (*((_DWORD *)v180 + 2))
                        {
                          if (v177 != v339)
                          {
                            v183 = v180 + 5;
                            v185 = v180 + 6;
                            v184 = *((unsigned int *)v180 + 12);
                            v186 = *((unsigned int *)v180 + 13);
                            goto LABEL_280;
                          }
                          goto LABEL_283;
                        }
                      }
                      if ((llvm *)v177 != v135 && v182 != (_QWORD)v135)
                      {
                        if (!v179)
                        {
                          v176 = 0;
                          goto LABEL_276;
                        }
                        v188 = (v179 - 1) & ((v177 >> 4) ^ (v177 >> 9));
                        v181 = (uint64_t *)(v178 + 72 * v188);
                        v189 = *v181;
                        if (v177 != *v181)
                        {
                          v190 = 0;
                          v191 = 1;
                          while (v189 != -4096)
                          {
                            if (v190)
                              v192 = 0;
                            else
                              v192 = v189 == -8192;
                            if (v192)
                              v190 = v181;
                            v193 = v188 + v191++;
                            v188 = v193 & (v179 - 1);
                            v181 = (uint64_t *)(v178 + 72 * v188);
                            v189 = *v181;
                            if (v177 == *v181)
                              goto LABEL_277;
                          }
                          if (v190)
                            v176 = v190;
                          else
                            v176 = v181;
LABEL_276:
                          v181 = sub_1C53C2DB0((uint64_t)v335, &v338, v176);
                          *v181 = v177;
                          *(_OWORD *)(v181 + 5) = 0u;
                          *(_OWORD *)(v181 + 1) = 0u;
                          *(_OWORD *)(v181 + 3) = 0u;
                          *(_OWORD *)(v181 + 7) = 0u;
                          v181[5] = (uint64_t)(v181 + 7);
                          *((_DWORD *)v181 + 13) = 2;
                        }
LABEL_277:
                        v194 = v345;
                        if (v345 >= (unint64_t)HIDWORD(v345))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v346, v345 + 1, 8);
                          v194 = v345;
                        }
                        *((_QWORD *)__src + v194) = v177;
                        LODWORD(v345) = v345 + 1;
                        v185 = v181 + 6;
                        v184 = *((unsigned int *)v181 + 12);
                        *((_DWORD *)v181 + 3) = v138;
                        v183 = v181 + 5;
                        v186 = *((unsigned int *)v181 + 13);
LABEL_280:
                        if (v184 >= v186)
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v183, (uint64_t)(v181 + 7), v184 + 1, 8);
                          v184 = *((unsigned int *)v181 + 12);
                        }
                        *(_QWORD *)(*v183 + 8 * v184) = v182;
                        ++*v185;
                      }
LABEL_283:
                      if (++v174 == v175)
                      {
                        v174 = (uint64_t *)v341;
                        break;
                      }
                    }
                  }
                  if (v174 != (uint64_t *)v343)
                    free(v174);
                  a2 = v331;
                }
              }
              if (__src != v346)
                free(__src);
              v137 = v327 + 1;
            }
            while (v327 + 1 != (uint64_t *)v325);
          }
          v132 = v323;
          v195 = *(unsigned int *)(v321 + 32);
          v127 = v330;
          v133 = v317;
          v130 = v317;
          if ((_DWORD)v195)
          {
            v196 = *(llvm::Value ****)(v321 + 24);
            v197 = &v196[v195];
            v198 = v336 - 1;
            do
            {
              if (v336)
              {
                v199 = *v196;
                v200 = **v196;
                v201 = ((v200 >> 4) ^ (v200 >> 9)) & v198;
                v202 = *(llvm::Value **)(v335[0] + 72 * v201);
                if (v200 == v202)
                {
LABEL_311:
                  v211 = (llvm::raw_ostream *)llvm::errs(v323);
                  v212 = v211;
                  v213 = *((_QWORD *)v211 + 4);
                  if ((unint64_t)(*((_QWORD *)v211 + 3) - v213) > 5)
                  {
                    *(_WORD *)(v213 + 4) = 8292;
                    *(_DWORD *)v213 = 1818847299;
                    *((_QWORD *)v211 + 4) += 6;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v211, "Child ", 6uLL);
                  }
                  if (*v199)
                  {
                    llvm::Value::printAsOperand(*v199, v212, 0, 0);
                  }
                  else
                  {
                    v214 = (_DWORD *)*((_QWORD *)v212 + 4);
                    if (*((_QWORD *)v212 + 3) - (_QWORD)v214 > 6uLL)
                    {
                      *(_DWORD *)((char *)v214 + 3) = 1920233580;
                      *v214 = 1819047278;
                      *((_QWORD *)v212 + 4) += 7;
                    }
                    else
                    {
                      llvm::raw_ostream::write(v212, "nullptr", 7uLL);
                    }
                  }
                  v215 = (void *)*((_QWORD *)v212 + 4);
                  if (*((_QWORD *)v212 + 3) - (_QWORD)v215 > 0x1BuLL)
                  {
                    qmemcpy(v215, " reachable after its parent ", 28);
                    *((_QWORD *)v212 + 4) += 28;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v212, " reachable after its parent ", 0x1CuLL);
                  }
                  v10 = v135;
                  goto LABEL_320;
                }
                v203 = 1;
                while (v202 != (llvm::Value *)-4096)
                {
                  v204 = v201 + v203++;
                  v201 = v204 & v198;
                  v202 = *(llvm::Value **)(v335[0] + 72 * v201);
                  if (v200 == v202)
                    goto LABEL_311;
                }
              }
              ++v196;
            }
            while (v196 != v197);
          }
        }
        v205 = (llvm *)((char *)v132 + 16);
        v132 = v130;
        if (v205 != v130)
        {
          v132 = v205;
          while ((*(_QWORD *)v132 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v132 = (llvm *)((char *)v132 + 16);
            if (v132 == v130)
            {
              v132 = v130;
              break;
            }
          }
        }
      }
      while (v132 != v133);
    }
    if (a2 != 2)
      goto LABEL_457;
    v206 = *(_QWORD *)(v127 + 48);
    v207 = *(unsigned int *)(v127 + 64);
    v208 = (_QWORD *)(v206 + 16 * v207);
    if (*(_DWORD *)(v127 + 56))
    {
      if ((_DWORD)v207)
      {
        v209 = 16 * v207;
        v210 = *(_QWORD **)(v127 + 48);
        while ((*v210 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v210 += 2;
          v209 -= 16;
          if (!v209)
            goto LABEL_310;
        }
      }
      else
      {
        v210 = *(_QWORD **)(v127 + 48);
      }
    }
    else
    {
LABEL_310:
      v210 = (_QWORD *)(v206 + 16 * v207);
    }
    v221 = (_QWORD *)(v206 + 16 * v207);
    if (v210 == v221)
    {
LABEL_457:
      v17 = 1;
      goto LABEL_13;
    }
    v8 = (uint64_t)&v345;
    while (1)
    {
      v222 = v210[1];
      if (*(_QWORD *)v222)
      {
        v223 = *(unsigned int *)(v222 + 32);
        if ((_DWORD)v223)
          break;
      }
LABEL_450:
      v296 = v210 + 2;
      v210 = v208;
      if (v296 != v208)
      {
        v210 = v296;
        while ((*v210 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v210 += 2;
          if (v210 == v208)
          {
            v210 = v208;
            break;
          }
        }
      }
      v17 = 1;
      if (v210 == v221)
        goto LABEL_13;
    }
    v224 = *(_QWORD ***)(v222 + 24);
    v315 = &v224[v223];
    v316 = v8;
    v319 = v210;
    v320 = v208;
    v318 = v221;
    v324 = v210[1];
    while (1)
    {
      v322 = v224;
      v225 = (llvm::Value **)*v224;
      __src = 0;
      sub_1C53C4ED0((char **)&__p, &__src, (_BYTE *)v8);
      sub_1C53C4E10((uint64_t)v335);
      v326 = v225;
      v226 = *v225;
      sub_1C53C203C((char **)&__p);
      v228 = *(unsigned int *)(v127 + 8);
      if ((_DWORD)v228)
        break;
LABEL_440:
      v287 = *(unsigned int *)(v324 + 32);
      if ((_DWORD)v287)
      {
        v288 = *(llvm::Value ****)(v324 + 24);
        v289 = &v288[v287];
        v290 = v336 - 1;
        while (1)
        {
          v291 = *v288;
          if (*v288 != v326)
          {
            if (!v336)
              goto LABEL_458;
            v292 = ((*v291 >> 4) ^ (*v291 >> 9)) & v290;
            v293 = *(llvm::Value **)(v335[0] + 72 * v292);
            if (*v291 != v293)
              break;
          }
LABEL_448:
          if (++v288 == v289)
            goto LABEL_449;
        }
        v294 = 1;
        while (v293 != (llvm::Value *)-4096)
        {
          v295 = v292 + v294++;
          v292 = v295 & v290;
          v293 = *(llvm::Value **)(v335[0] + 72 * v292);
          if (*v291 == v293)
            goto LABEL_448;
        }
LABEL_458:
        v297 = (llvm::raw_ostream *)llvm::errs(v227);
        v212 = v297;
        v298 = *((_QWORD *)v297 + 4);
        if ((unint64_t)(*((_QWORD *)v297 + 3) - v298) > 4)
        {
          *(_BYTE *)(v298 + 4) = 32;
          *(_DWORD *)v298 = 1701080910;
          *((_QWORD *)v297 + 4) += 5;
        }
        else
        {
          llvm::raw_ostream::write(v297, "Node ", 5uLL);
        }
        if (*v291)
        {
          llvm::Value::printAsOperand(*v291, v212, 0, 0);
        }
        else
        {
          v299 = (_DWORD *)*((_QWORD *)v212 + 4);
          if (*((_QWORD *)v212 + 3) - (_QWORD)v299 > 6uLL)
          {
            *(_DWORD *)((char *)v299 + 3) = 1920233580;
            *v299 = 1819047278;
            *((_QWORD *)v212 + 4) += 7;
          }
          else
          {
            llvm::raw_ostream::write(v212, "nullptr", 7uLL);
          }
        }
        v300 = (void *)*((_QWORD *)v212 + 4);
        if (*((_QWORD *)v212 + 3) - (_QWORD)v300 > 0x1FuLL)
        {
          qmemcpy(v300, " not reachable when its sibling ", 32);
          *((_QWORD *)v212 + 4) += 32;
        }
        else
        {
          llvm::raw_ostream::write(v212, " not reachable when its sibling ", 0x20uLL);
        }
        v10 = *v326;
        if (!*v326)
        {
          v301 = (_DWORD *)*((_QWORD *)v212 + 4);
          if (*((_QWORD *)v212 + 3) - (_QWORD)v301 > 6uLL)
          {
            *(_DWORD *)((char *)v301 + 3) = 1920233580;
            *v301 = 1819047278;
            *((_QWORD *)v212 + 4) += 7;
          }
          else
          {
            v10 = llvm::raw_ostream::write(v212, "nullptr", 7uLL);
          }
LABEL_321:
          v216 = (void *)*((_QWORD *)v212 + 4);
          if (*((_QWORD *)v212 + 3) - (_QWORD)v216 > 0xCuLL)
          {
            qmemcpy(v216, " is removed!\n", 13);
            *((_QWORD *)v212 + 4) += 13;
          }
          else
          {
            v12 = " is removed!\n";
            v10 = v212;
            v13 = 13;
LABEL_9:
            v10 = llvm::raw_ostream::write(v10, v12, v13);
          }
          goto LABEL_10;
        }
LABEL_320:
        v10 = (llvm *)llvm::Value::printAsOperand(v10, v212, 0, 0);
        goto LABEL_321;
      }
LABEL_449:
      v208 = v320;
      v224 = v322 + 1;
      v8 = v316;
      v221 = v318;
      v210 = v319;
      if (v322 + 1 == v315)
        goto LABEL_450;
    }
    v328 = *(_QWORD *)v127 + 8 * v228;
    v229 = *(uint64_t **)v127;
    v230 = 1;
LABEL_342:
    v329 = v229;
    v231 = *v229;
    v340 = v231;
    __src = v346;
    v346[0] = v231;
    v345 = 0x4000000001;
    if (v336)
    {
      v232 = v336 - 1;
      v233 = (v336 - 1) & ((v231 >> 4) ^ (v231 >> 9));
      v234 = (uint64_t *)(v335[0] + 72 * v233);
      v235 = *v234;
      if (*v234 != v231)
      {
        v236 = 1;
        v237 = *v234;
        v238 = v232 & ((v231 >> 4) ^ (v231 >> 9));
        do
        {
          if (v237 == -4096)
            goto LABEL_356;
          v239 = v238 + v236++;
          v238 = v239 & v232;
          v237 = *(_QWORD *)(v335[0] + 72 * v238);
        }
        while (v237 != v231);
        v240 = 0;
        v241 = 1;
        while (v235 != -4096)
        {
          if (v240)
            v242 = 0;
          else
            v242 = v235 == -8192;
          if (v242)
            v240 = v234;
          v243 = v233 + v241++;
          v233 = v243 & v232;
          v234 = (uint64_t *)(v335[0] + 72 * v233);
          v235 = *v234;
          if (*v234 == v231)
            goto LABEL_355;
        }
        if (v240)
          v245 = v240;
        else
          v245 = v234;
        v246 = sub_1C53C2DB0((uint64_t)v335, &v340, v245);
        *v246 = v231;
        *(_OWORD *)(v246 + 5) = 0u;
        *(_OWORD *)(v246 + 3) = 0u;
        *(_OWORD *)(v246 + 1) = 0u;
        *(_OWORD *)(v246 + 7) = 0u;
        v246[5] = (uint64_t)(v246 + 7);
        *((_DWORD *)v246 + 13) = 2;
        while (1)
        {
          v244 = v345;
          if (!(_DWORD)v345)
          {
            v227 = (llvm *)__src;
            if (__src != v346)
              free(__src);
            v229 = v329 + 1;
            if (v329 + 1 == (uint64_t *)v328)
              goto LABEL_440;
            goto LABEL_342;
          }
LABEL_362:
          v247 = *((_QWORD *)__src + v244 - 1);
          LODWORD(v345) = v244 - 1;
          v339 = v247;
          if (!v336)
            break;
          v248 = (v336 - 1) & ((v247 >> 4) ^ (v247 >> 9));
          v249 = (uint64_t *)(v335[0] + 72 * v248);
          v250 = *v249;
          if (v247 != *v249)
          {
            v251 = 0;
            v252 = 1;
            while (v250 != -4096)
            {
              if (v251)
                v253 = 0;
              else
                v253 = v250 == -8192;
              if (v253)
                v251 = v249;
              v254 = v248 + v252++;
              v248 = v254 & (v336 - 1);
              v249 = (uint64_t *)(v335[0] + 72 * v248);
              v250 = *v249;
              if (v247 == *v249)
                goto LABEL_377;
            }
            if (v251)
              v255 = v251;
            else
              v255 = v249;
            goto LABEL_376;
          }
LABEL_377:
          if (!*((_DWORD *)v249 + 2))
          {
            *((_DWORD *)v249 + 4) = ++v230;
            *((_DWORD *)v249 + 2) = v230;
            v249[3] = v247;
            v256 = (char *)v333;
            if (v333 >= (void **)v334)
            {
              v258 = (char *)__p;
              v259 = ((char *)v333 - (_BYTE *)__p) >> 3;
              v260 = v259 + 1;
              if ((unint64_t)(v259 + 1) >> 61)
                goto LABEL_511;
              v261 = v334 - (_BYTE *)__p;
              if ((v334 - (_BYTE *)__p) >> 2 > v260)
                v260 = v261 >> 2;
              if ((unint64_t)v261 >= 0x7FFFFFFFFFFFFFF8)
                v262 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v262 = v260;
              if (v262)
              {
                if (v262 >> 61)
                  goto LABEL_513;
                v263 = (char *)operator new(8 * v262);
              }
              else
              {
                v263 = 0;
              }
              v264 = (uint64_t *)&v263[8 * v259];
              *v264 = v247;
              v257 = (void **)(v264 + 1);
              if (v256 != v258)
              {
                do
                {
                  v265 = *((_QWORD *)v256 - 1);
                  v256 -= 8;
                  *--v264 = v265;
                }
                while (v256 != v258);
                v256 = (char *)__p;
              }
              __p = v264;
              v333 = v257;
              v334 = &v263[8 * v262];
              if (v256)
                operator delete(v256);
            }
            else
            {
              *v333 = (void *)v247;
              v257 = (void **)(v256 + 8);
            }
            v333 = v257;
            if (v337)
              sub_1C53C36D0(*(_QWORD *)(v337 + 8), v339, (unsigned int *)&v341);
            else
              sub_1C53C38C8((unsigned int *)&v341, *(_QWORD *)(v339 + 8));
            v266 = (uint64_t *)v341;
            v267 = (uint64_t *)((char *)v341 + 8 * p_src);
            if ((_DWORD)p_src)
            {
              while (1)
              {
                v268 = *v266;
                v338 = v268;
                v269 = v335[0];
                v270 = v336;
                v271 = sub_1C4F4C0E0(v335[0], v336, v268);
                if ((uint64_t *)(v269 + 72 * v270) == v271)
                {
                  v273 = v339;
                }
                else
                {
                  v272 = v271;
                  v273 = v339;
                  if (*((_DWORD *)v271 + 2))
                  {
                    if (v268 != v339)
                    {
                      v274 = v271 + 5;
                      v276 = v271 + 6;
                      v275 = *((unsigned int *)v271 + 12);
                      v277 = *((unsigned int *)v271 + 13);
                      goto LABEL_426;
                    }
                    goto LABEL_429;
                  }
                }
                if ((llvm::Value *)v268 != v226 && v273 != (_QWORD)v226)
                {
                  if (!v270)
                  {
                    v285 = 0;
                    goto LABEL_422;
                  }
                  v279 = (v270 - 1) & ((v268 >> 4) ^ (v268 >> 9));
                  v272 = (uint64_t *)(v269 + 72 * v279);
                  v280 = *v272;
                  if (v268 != *v272)
                  {
                    v281 = 0;
                    v282 = 1;
                    while (v280 != -4096)
                    {
                      if (v281)
                        v283 = 0;
                      else
                        v283 = v280 == -8192;
                      if (v283)
                        v281 = v272;
                      v284 = v279 + v282++;
                      v279 = v284 & (v270 - 1);
                      v272 = (uint64_t *)(v269 + 72 * v279);
                      v280 = *v272;
                      if (v268 == *v272)
                        goto LABEL_423;
                    }
                    if (v281)
                      v285 = v281;
                    else
                      v285 = v272;
LABEL_422:
                    v272 = sub_1C53C2DB0((uint64_t)v335, &v338, v285);
                    *v272 = v268;
                    *(_OWORD *)(v272 + 5) = 0u;
                    *(_OWORD *)(v272 + 1) = 0u;
                    *(_OWORD *)(v272 + 3) = 0u;
                    *(_OWORD *)(v272 + 7) = 0u;
                    v272[5] = (uint64_t)(v272 + 7);
                    *((_DWORD *)v272 + 13) = 2;
                  }
LABEL_423:
                  v286 = v345;
                  if (v345 >= (unint64_t)HIDWORD(v345))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v346, v345 + 1, 8);
                    v286 = v345;
                  }
                  *((_QWORD *)__src + v286) = v268;
                  LODWORD(v345) = v345 + 1;
                  v276 = v272 + 6;
                  v275 = *((unsigned int *)v272 + 12);
                  *((_DWORD *)v272 + 3) = v230;
                  v274 = v272 + 5;
                  v277 = *((unsigned int *)v272 + 13);
LABEL_426:
                  if (v275 >= v277)
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v274, (uint64_t)(v272 + 7), v275 + 1, 8);
                    v275 = *((unsigned int *)v272 + 12);
                  }
                  *(_QWORD *)(*v274 + 8 * v275) = v273;
                  ++*v276;
                }
LABEL_429:
                if (++v266 == v267)
                {
                  v266 = (uint64_t *)v341;
                  break;
                }
              }
            }
            if (v266 != (uint64_t *)v343)
              free(v266);
            v127 = v330;
          }
        }
        v255 = 0;
LABEL_376:
        v249 = sub_1C53C2DB0((uint64_t)v335, &v339, v255);
        *v249 = v247;
        *(_OWORD *)(v249 + 5) = 0u;
        *(_OWORD *)(v249 + 1) = 0u;
        *(_OWORD *)(v249 + 3) = 0u;
        *(_OWORD *)(v249 + 7) = 0u;
        v249[5] = (uint64_t)(v249 + 7);
        *((_DWORD *)v249 + 13) = 2;
        goto LABEL_377;
      }
LABEL_355:
      *(_DWORD *)(v335[0] + 72 * v233 + 12) = 0;
    }
LABEL_356:
    v244 = 1;
    goto LABEL_362;
  }
  while (2)
  {
    v109 = v106[1];
    v117 = *(unsigned int *)(v109 + 32);
    if ((_DWORD)v117)
    {
      v118 = *(_BYTE **)(v109 + 24);
      __src = v346;
      v345 = 0x800000000;
      sub_1C618A450((unsigned int *)&__src, v118, &v118[8 * v117]);
      v119 = 126 - 2 * __clz(v345);
      if ((_DWORD)v345)
        v120 = v119;
      else
        v120 = 0;
      sub_1C53C7E18((uint64_t *)__src, (uint64_t *)__src + v345, v120, 1);
      v341 = (void *)v109;
      p_src = &__src;
      v8 = *(_QWORD *)__src;
      if (*(_DWORD *)(*(_QWORD *)__src + 72) == *(_DWORD *)(v109 + 72) + 1)
      {
        v121 = (unsigned int *)*((_QWORD *)__src + v345 - 1);
        if (v121[19] + 1 == *(_DWORD *)(v109 + 76))
        {
          v122 = v345 - 1;
          v123 = (uint64_t *)((char *)__src + 8);
          while (v122)
          {
            v121 = (unsigned int *)v8;
            v124 = *(_DWORD *)(v8 + 76) + 1;
            v125 = *v123++;
            v8 = v125;
            --v122;
            if (v124 != *(_DWORD *)(v125 + 72))
              goto LABEL_170;
          }
          v126 = 1;
          goto LABEL_171;
        }
      }
      else
      {
        v121 = *(unsigned int **)__src;
      }
      v8 = 0;
LABEL_170:
      sub_1C53C73D8((llvm *)&v341, v121, (unsigned int *)v8);
      v126 = 0;
LABEL_171:
      v104 = (llvm *)__src;
      if (__src != v346)
        free(__src);
      a2 = v331;
      if (!v126)
        goto LABEL_12;
      do
      {
LABEL_155:
        v106 += 2;
        if (v106 == v108)
          goto LABEL_176;
      }
      while ((*v106 | 0x1000) == 0xFFFFFFFFFFFFF000);
      if (v106 == v108)
        goto LABEL_176;
      continue;
    }
    break;
  }
  if (*(_DWORD *)(v109 + 72) + 1 == *(_DWORD *)(v109 + 76))
    goto LABEL_155;
  v110 = (llvm::raw_ostream *)llvm::errs(v104);
  v314 = (void *)*((_QWORD *)v110 + 4);
  if (*((_QWORD *)v110 + 3) - (_QWORD)v314 > 0x2AuLL)
  {
    qmemcpy(v314, "Tree leaf should have DFSOut = DFSIn + 1:\n\t", 43);
    v313 = *((_QWORD *)v110 + 4) + 43;
LABEL_488:
    *((_QWORD *)v110 + 4) = v313;
    goto LABEL_139;
  }
  v112 = "Tree leaf should have DFSOut = DFSIn + 1:\n\t";
  v113 = 43;
LABEL_138:
  llvm::raw_ostream::write(v110, v112, v113);
LABEL_139:
  v114 = sub_1C53C7270((unsigned int *)v109);
  v92 = (llvm::raw_ostream *)llvm::errs(v114);
  v115 = (_BYTE *)*((_QWORD *)v92 + 4);
  if ((unint64_t)v115 >= *((_QWORD *)v92 + 3))
  {
    v92 = llvm::raw_ostream::write(v92, 10);
  }
  else
  {
    *((_QWORD *)v92 + 4) = v115 + 1;
    *v115 = 10;
  }
LABEL_116:
  v14 = (llvm::raw_ostream *)llvm::errs(v92);
  v97 = (const char *)*((_QWORD *)v14 + 4);
  v16 = (const char *)*((_QWORD *)v14 + 2);
  if (v97 != v16)
  {
    v8 = v97 - v16;
    goto LABEL_11;
  }
LABEL_12:
  v17 = 0;
LABEL_13:
  v18 = v335[0];
  if (v336)
  {
    v19 = 72 * v336;
    v20 = v335[0] + 56;
    do
    {
      v21 = *(_QWORD *)(v20 - 56);
      if (v21 != -4096 && v21 != -8192)
      {
        v22 = *(void **)(v20 - 16);
        if ((void *)v20 != v22)
          free(v22);
      }
      v20 += 72;
      v19 -= 72;
    }
    while (v19);
    v18 = v335[0];
  }
  MEMORY[0x1CAA32FB4](v18, 8, v8);
  if (__p)
  {
    v333 = (void **)__p;
    operator delete(__p);
  }
  return v17;
}

{
  return __ZN4llvm14DomTreeBuilder6VerifyINS_17DominatorTreeBaseINS_10BasicBlockELb1EEEEEbRKT_NS5_17VerificationLevelE(a1, a2);
}

uint64_t *llvm::DominatorTreeBase<llvm::BasicBlock,true>::reset(uint64_t a1)
{
  uint64_t *result;

  result = sub_1C4EF5C94((uint64_t *)(a1 + 48));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  return result;
}

_QWORD *llvm::cfg::Update<llvm::BasicBlock *>::Update(_QWORD *result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  *result = a3;
  result[1] = a4 & 0xFFFFFFFFFFFFFFFBLL | (4 * a2);
  return result;
}

{
  *result = a3;
  result[1] = a4 & 0xFFFFFFFFFFFFFFFBLL | (4 * a2);
  return result;
}

uint64_t llvm::cfg::Update<llvm::BasicBlock *>::getKind(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 2) & 1;
}

uint64_t llvm::cfg::Update<llvm::BasicBlock *>::getFrom(uint64_t a1)
{
  return *(_QWORD *)a1;
}

unint64_t llvm::cfg::Update<llvm::BasicBlock *>::getTo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8;
}

BOOL llvm::cfg::Update<llvm::BasicBlock *>::operator==(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void sub_1C53BA620(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t *Node;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  void *__p;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[2];

  v32[1] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 56);
  sub_1C4EF5C94((uint64_t *)(a1 + 24));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v4;
  if (a2)
  {
    v5 = *(_QWORD *)(a2 + 16);
    if (v5)
    {
      sub_1C6237560(*(_QWORD *)(a2 + 8), v5);
      v4 = *(_QWORD *)(a1 + 56);
      v6 = a2;
    }
    else
    {
      v6 = 0;
    }
    v7 = operator new(8uLL);
    __p = v7;
    *v7 = 0;
    v24 = v7 + 1;
    v25 = v7 + 1;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = v6;
    v30 = v32;
    v8 = *(_QWORD *)(v4 + 80);
    if (v8)
      v9 = v8 - 24;
    else
      v9 = 0;
    v32[0] = v9;
    v31 = 0x100000001;
    if (&v30 == (void **)a1)
    {
LABEL_14:
      sub_1C53BF2F0((uint64_t)&__p, **(_QWORD **)a1, 0, (unsigned int (*)(uint64_t, uint64_t))sub_1C53BE55C, 0, 0);
      sub_1C53BE564((uint64_t *)&__p, a1, 0);
      *(_BYTE *)a2 = 1;
      goto LABEL_25;
    }
    if (*(_DWORD *)(a1 + 8))
    {
      **(_QWORD **)a1 = v9;
    }
    else
    {
      if (*(_DWORD *)(a1 + 12))
      {
        v10 = 8;
        v11 = v32;
LABEL_11:
        memcpy(*(void **)a1, v11, v10);
        goto LABEL_12;
      }
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, 1uLL, 8);
      if ((_DWORD)v31)
      {
        v11 = v30;
        v10 = 8 * v31;
        goto LABEL_11;
      }
    }
LABEL_12:
    *(_DWORD *)(a1 + 8) = 1;
    LODWORD(v31) = 0;
    if (v30 != v32)
      free(v30);
    goto LABEL_14;
  }
  v12 = operator new(8uLL);
  __p = v12;
  *v12 = 0;
  v24 = v12 + 1;
  v25 = v12 + 1;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = v32;
  v13 = *(_QWORD *)(v4 + 80);
  if (v13)
    v14 = v13 - 24;
  else
    v14 = 0;
  v32[0] = v14;
  v31 = 0x100000001;
  if (&v30 != (void **)a1)
  {
    if (*(_DWORD *)(a1 + 12))
    {
      v15 = 1;
      v16 = v32;
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, 1uLL, 8);
      v15 = v31;
      v16 = v30;
      if (!(_DWORD)v31)
      {
LABEL_22:
        *(_DWORD *)(a1 + 8) = 1;
        LODWORD(v31) = 0;
        if (v16 != v32)
          free(v16);
        goto LABEL_24;
      }
    }
    memcpy(*(void **)a1, v16, 8 * v15);
    v16 = v30;
    goto LABEL_22;
  }
LABEL_24:
  sub_1C53BF2F0((uint64_t)&__p, **(_QWORD **)a1, 0, (unsigned int (*)(uint64_t, uint64_t))sub_1C53BE55C, 0, 0);
  sub_1C53BE564((uint64_t *)&__p, a1, 0);
LABEL_25:
  if (*(_DWORD *)(a1 + 8))
  {
    Node = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::createNode(a1, **(_QWORD **)a1);
    *(_QWORD *)(a1 + 48) = Node;
    sub_1C53BF0B0((uint64_t)&__p, a1, Node);
  }
  v18 = v26;
  if (v28)
  {
    v19 = 72 * v28;
    v20 = (_QWORD *)(v26 + 56);
    do
    {
      v21 = *(v20 - 7);
      if (v21 != -4096 && v21 != -8192)
      {
        v22 = (_QWORD *)*(v20 - 2);
        if (v20 != v22)
          free(v22);
      }
      v20 += 9;
      v19 -= 72;
    }
    while (v19);
    v18 = v26;
  }
  MEMORY[0x1CAA32FB4](v18, 8);
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
}

void sub_1C53BA93C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *Node;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  void *__p;
  void *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  void *__src;
  uint64_t v43;
  _QWORD v44[5];

  v44[4] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 80);
  sub_1C4EF5C94((uint64_t *)(a1 + 48));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 92) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = v4;
  if (a2)
  {
    v5 = *(_QWORD *)(a2 + 16);
    if (v5)
    {
      sub_1C6237848(*(_QWORD *)(a2 + 8), v5);
      v6 = a2;
    }
    else
    {
      v6 = 0;
    }
    v7 = operator new(8uLL);
    __p = v7;
    *v7 = 0;
    v36 = v7 + 1;
    v37 = v7 + 1;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = v6;
    sub_1C53C0A54(a1, v6, (uint64_t)&__src);
    v8 = __src;
    if (&__src == (void **)a1)
      goto LABEL_14;
    if (__src != v44)
    {
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(*(void **)a1);
        v8 = __src;
      }
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v43;
      __src = v44;
      HIDWORD(v43) = 0;
      goto LABEL_13;
    }
    v9 = v43;
    v10 = *(unsigned int *)(a1 + 8);
    if (v10 >= v43)
    {
      if ((_DWORD)v43)
        memmove(*(void **)a1, __src, 8 * v43);
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) < v43)
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v9, 8);
    }
    else if ((_DWORD)v10)
    {
      v33 = *(unsigned int *)(a1 + 8);
      memmove(*(void **)a1, __src, 8 * v10);
      v11 = v33;
LABEL_10:
      if (v11 != v43)
        memcpy((void *)(*(_QWORD *)a1 + 8 * v11), (char *)__src + 8 * v11, 8 * v43 - 8 * v11);
LABEL_12:
      *(_DWORD *)(a1 + 8) = v9;
LABEL_13:
      LODWORD(v43) = 0;
      v8 = __src;
LABEL_14:
      if (v8 != v44)
        free(v8);
      sub_1C53C203C((char **)&__p);
      v12 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v12)
      {
        v13 = *(uint64_t **)a1;
        v14 = 8 * v12;
        v15 = 1;
        do
        {
          v16 = *v13++;
          v15 = sub_1C53C21E0((uint64_t)&__p, v16, v15, (unsigned int (*)(uint64_t, uint64_t))sub_1C53C12D0, 0, 0);
          v14 -= 8;
        }
        while (v14);
      }
      sub_1C53C12D8((uint64_t *)&__p, a1, 0);
      *(_BYTE *)a2 = 1;
      goto LABEL_36;
    }
    v11 = 0;
    goto LABEL_10;
  }
  v17 = operator new(8uLL);
  __p = v17;
  *v17 = 0;
  v36 = v17 + 1;
  v37 = v17 + 1;
  v41 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  sub_1C53C0A54(a1, 0, (uint64_t)&__src);
  v18 = __src;
  if (&__src != (void **)a1)
  {
    if (__src != v44)
    {
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(*(void **)a1);
        v18 = __src;
      }
      *(_QWORD *)a1 = v18;
      *(_QWORD *)(a1 + 8) = v43;
      __src = v44;
      HIDWORD(v43) = 0;
      goto LABEL_29;
    }
    v19 = v43;
    v20 = *(unsigned int *)(a1 + 8);
    if (v20 >= v43)
    {
      if ((_DWORD)v43)
        memmove(*(void **)a1, v44, 8 * v43);
      goto LABEL_28;
    }
    if (*(_DWORD *)(a1 + 12) < v43)
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v19, 8);
    }
    else if ((_DWORD)v20)
    {
      v34 = *(unsigned int *)(a1 + 8);
      memmove(*(void **)a1, v44, 8 * v20);
      v21 = v34;
LABEL_26:
      if (v21 != v43)
        memcpy((void *)(*(_QWORD *)a1 + 8 * v21), (char *)__src + 8 * v21, 8 * v43 - 8 * v21);
LABEL_28:
      *(_DWORD *)(a1 + 8) = v19;
LABEL_29:
      LODWORD(v43) = 0;
      v18 = __src;
      goto LABEL_30;
    }
    v21 = 0;
    goto LABEL_26;
  }
LABEL_30:
  if (v18 != v44)
    free(v18);
  sub_1C53C203C((char **)&__p);
  v22 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v22)
  {
    v23 = *(uint64_t **)a1;
    v24 = 8 * v22;
    v25 = 1;
    do
    {
      v26 = *v23++;
      v25 = sub_1C53C21E0((uint64_t)&__p, v26, v25, (unsigned int (*)(uint64_t, uint64_t))sub_1C53C12D0, 0, 0);
      v24 -= 8;
    }
    while (v24);
  }
  sub_1C53C12D8((uint64_t *)&__p, a1, 0);
LABEL_36:
  if (*(_DWORD *)(a1 + 8))
  {
    Node = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,true>::createNode(a1, 0);
    *(_QWORD *)(a1 + 72) = Node;
    sub_1C53C1DFC((uint64_t)&__p, a1, Node);
  }
  v28 = v38;
  if (v40)
  {
    v29 = 72 * v40;
    v30 = (_QWORD *)(v38 + 56);
    do
    {
      v31 = *(v30 - 7);
      if (v31 != -4096 && v31 != -8192)
      {
        v32 = (_QWORD *)*(v30 - 2);
        if (v30 != v32)
          free(v32);
      }
      v30 += 9;
      v29 -= 72;
    }
    while (v29);
    v28 = v38;
  }
  MEMORY[0x1CAA32FB4](v28, 8);
  if (__p)
  {
    v36 = __p;
    operator delete(__p);
  }
}

void sub_1C53BAD9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  char *v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  int v73;
  BOOL v74;
  unsigned int v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t *v91;
  void *__p;
  char *v94;
  char *v95;
  uint64_t v96[2];
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  _BYTE v103[128];
  void *v104;
  unsigned int v105;
  uint64_t v106;
  void *v107;
  unsigned int v108;
  unsigned int v109;
  _QWORD v110[66];

  v110[64] = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4)
  {
    v7 = *(_QWORD *)(a1 + 24);
    v8 = v4 - 1;
    LODWORD(v9) = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    v10 = (uint64_t *)(v7 + 16 * v9);
    v11 = *v10;
    if (*v10 != a3)
    {
      v12 = 1;
      do
      {
        if (v11 == -4096)
          return;
        v13 = v9 + v12++;
        v9 = v13 & v8;
        v11 = *(_QWORD *)(v7 + 16 * v9);
      }
      while (v11 != a3);
      v10 = (uint64_t *)(v7 + 16 * v9);
    }
    v14 = (uint64_t *)(v7 + 16 * v4);
    if (v10 != v14)
    {
      v15 = (uint64_t *)v10[1];
      if (v15)
      {
        *(_BYTE *)(a1 + 64) = 0;
        LODWORD(v16) = v8 & ((a4 >> 4) ^ (a4 >> 9));
        v17 = (uint64_t *)(v7 + 16 * v16);
        v18 = *v17;
        if (*v17 != a4)
        {
          v19 = 1;
          do
          {
            if (v18 == -4096)
              goto LABEL_17;
            v20 = v16 + v19++;
            v16 = v20 & v8;
            v18 = *(_QWORD *)(v7 + 16 * v16);
          }
          while (v18 != a4);
          v17 = (uint64_t *)(v7 + 16 * v16);
        }
        if (v17 != v14)
        {
          v21 = v17[1];
          if (v21)
          {
            sub_1C53C5060(a1, a2, *v15, v21);
            return;
          }
        }
LABEL_17:
        v91 = v15;
        v101 = v103;
        v102 = 0x800000000;
        v22 = (char *)operator new(8uLL);
        v23 = 0;
        __p = v22;
        *(_QWORD *)v22 = 0;
        v94 = v22 + 8;
        v95 = v22 + 8;
        v96[0] = 0;
        v96[1] = 0;
        v97 = 0;
        v98 = a2;
        v24 = 1;
        v109 = 64;
        v110[0] = a4;
        v107 = v110;
        while (1)
        {
          v25 = *((_QWORD *)v107 + v24 - 1);
          v108 = v24 - 1;
          v100 = v25;
          if (!v97)
            break;
          v26 = (v97 - 1) & ((v25 >> 4) ^ (v25 >> 9));
          v27 = (uint64_t *)(v96[0] + 72 * v26);
          v28 = *v27;
          if (v25 != *v27)
          {
            v29 = 0;
            v30 = 1;
            while (v28 != -4096)
            {
              if (v29)
                v31 = 0;
              else
                v31 = v28 == -8192;
              if (v31)
                v29 = v27;
              v32 = v26 + v30++;
              v26 = v32 & (v97 - 1);
              v27 = (uint64_t *)(v96[0] + 72 * v26);
              v28 = *v27;
              if (v25 == *v27)
                goto LABEL_33;
            }
            if (v29)
              v33 = v29;
            else
              v33 = v27;
            goto LABEL_32;
          }
LABEL_33:
          if (!*((_DWORD *)v27 + 2))
          {
            *((_DWORD *)v27 + 4) = ++v23;
            *((_DWORD *)v27 + 2) = v23;
            v27[3] = v25;
            v34 = v94;
            if (v94 >= v95)
            {
              v36 = (char *)__p;
              v37 = (v94 - (_BYTE *)__p) >> 3;
              v38 = v37 + 1;
              if ((unint64_t)(v37 + 1) >> 61)
                abort();
              v39 = v95 - (_BYTE *)__p;
              if ((v95 - (_BYTE *)__p) >> 2 > v38)
                v38 = v39 >> 2;
              if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
                v40 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v40 = v38;
              if (v40)
              {
                if (v40 >> 61)
                  sub_1C4764EE4();
                v41 = (char *)operator new(8 * v40);
              }
              else
              {
                v41 = 0;
              }
              v42 = (uint64_t *)&v41[8 * v37];
              *v42 = v25;
              v35 = (char *)(v42 + 1);
              if (v34 != v36)
              {
                do
                {
                  v43 = *((_QWORD *)v34 - 1);
                  v34 -= 8;
                  *--v42 = v43;
                }
                while (v34 != v36);
                v34 = (char *)__p;
              }
              __p = v42;
              v95 = &v41[8 * v40];
              if (v34)
                operator delete(v34);
            }
            else
            {
              *(_QWORD *)v94 = v25;
              v35 = v34 + 8;
            }
            v94 = v35;
            if (v98)
              sub_1C4ED7A6C(*(int **)(v98 + 8), v100, (uint64_t)&v104);
            else
              sub_1C53BFC54((char **)&v104, v100);
            v44 = (uint64_t *)v104;
            v45 = (uint64_t *)((char *)v104 + 8 * v105);
            if (v105)
            {
              while (1)
              {
                v46 = *v44;
                v99 = v46;
                v47 = v96[0];
                v48 = v97;
                v49 = sub_1C4F4C0E0(v96[0], v97, v46);
                if ((uint64_t *)(v47 + 72 * v48) == v49)
                  break;
                v50 = v49;
                v51 = v100;
                if (!*((_DWORD *)v49 + 2))
                  goto LABEL_62;
                if (v46 != v100)
                {
                  v53 = v49 + 6;
                  v52 = *((unsigned int *)v49 + 12);
                  v54 = v49 + 5;
                  if (v52 >= *((unsigned int *)v49 + 13))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v49 + 5), (uint64_t)(v49 + 7), v52 + 1, 8);
                    v52 = *((unsigned int *)v50 + 12);
                  }
                  v55 = *v54;
                  goto LABEL_94;
                }
LABEL_96:
                if (++v44 == v45)
                {
                  v44 = (uint64_t *)v104;
                  goto LABEL_99;
                }
              }
              v51 = v100;
LABEL_62:
              v56 = *(_QWORD *)(a1 + 24);
              v57 = *(unsigned int *)(a1 + 40);
              v58 = v46 >> 4;
              if ((_DWORD)v57)
              {
                LODWORD(v59) = (v57 - 1) & (v58 ^ (v46 >> 9));
                v60 = (uint64_t *)(v56 + 16 * v59);
                v61 = *v60;
                if (*v60 != v46)
                {
                  v62 = 1;
                  while (v61 != -4096)
                  {
                    v63 = v59 + v62++;
                    v59 = v63 & (v57 - 1);
                    v61 = *(_QWORD *)(v56 + 16 * v59);
                    if (v61 == v46)
                    {
                      v60 = (uint64_t *)(v56 + 16 * v59);
                      goto LABEL_69;
                    }
                  }
                  goto LABEL_68;
                }
              }
              else
              {
LABEL_68:
                v60 = (uint64_t *)(v56 + 16 * v57);
              }
LABEL_69:
              if (v60 != (uint64_t *)(v56 + 16 * v57))
              {
                v64 = v60[1];
                if (v64)
                {
                  v65 = v102;
                  if (v102 >= (unint64_t)HIDWORD(v102))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v101, (uint64_t)v103, v102 + 1, 16);
                    v65 = v102;
                  }
                  v66 = (uint64_t *)((char *)v101 + 16 * v65);
                  *v66 = v51;
                  v66[1] = v64;
                  v53 = &v102;
                  goto LABEL_95;
                }
              }
              if (v48)
              {
                v67 = v58 ^ (v46 >> 9);
                v68 = v48 - 1;
                v69 = v67 & (v48 - 1);
                v70 = (uint64_t *)(v47 + 72 * v69);
                v71 = *v70;
                if (v46 != *v70)
                {
                  v72 = 0;
                  v73 = 1;
                  while (v71 != -4096)
                  {
                    if (v72)
                      v74 = 0;
                    else
                      v74 = v71 == -8192;
                    if (v74)
                      v72 = v70;
                    v75 = v69 + v73++;
                    v69 = v75 & v68;
                    v70 = (uint64_t *)(v47 + 72 * v69);
                    v71 = *v70;
                    if (v46 == *v70)
                      goto LABEL_89;
                  }
                  if (v72)
                    v76 = v72;
                  else
                    v76 = v70;
LABEL_88:
                  v70 = sub_1C53BF8A4((uint64_t)v96, &v99, v76);
                  *v70 = v46;
                  *(_OWORD *)(v70 + 5) = 0u;
                  *(_OWORD *)(v70 + 1) = 0u;
                  *(_OWORD *)(v70 + 3) = 0u;
                  *(_OWORD *)(v70 + 7) = 0u;
                  v70[5] = (uint64_t)(v70 + 7);
                  *((_DWORD *)v70 + 13) = 2;
                }
LABEL_89:
                v77 = v108;
                if (v108 >= (unint64_t)v109)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v107, (uint64_t)v110, v108 + 1, 8);
                  v77 = v108;
                }
                *((_QWORD *)v107 + v77) = v46;
                ++v108;
                v53 = v70 + 6;
                v52 = *((unsigned int *)v70 + 12);
                *((_DWORD *)v70 + 3) = v23;
                if (v52 >= *((unsigned int *)v70 + 13))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v70 + 5), (uint64_t)(v70 + 7), v52 + 1, 8);
                  v52 = *((unsigned int *)v70 + 12);
                }
                v55 = v70[5];
LABEL_94:
                *(_QWORD *)(v55 + 8 * v52) = v51;
LABEL_95:
                ++*(_DWORD *)v53;
                goto LABEL_96;
              }
              v76 = 0;
              goto LABEL_88;
            }
LABEL_99:
            if (v44 != &v106)
              free(v44);
          }
          v24 = v108;
          if (!v108)
          {
            if (v107 != v110)
              free(v107);
            sub_1C53BE564((uint64_t *)&__p, a1, 0);
            sub_1C53BF0B0((uint64_t)&__p, a1, v91);
            v78 = v96[0];
            if (v97)
            {
              v79 = v96[0] + 56;
              v80 = 72 * v97;
              do
              {
                v81 = *(_QWORD *)(v79 - 56);
                if (v81 != -4096 && v81 != -8192)
                {
                  v82 = *(void **)(v79 - 16);
                  if ((void *)v79 != v82)
                    free(v82);
                }
                v79 += 72;
                v80 -= 72;
              }
              while (v80);
              v78 = v96[0];
            }
            MEMORY[0x1CAA32FB4](v78, 8);
            if (__p)
            {
              v94 = (char *)__p;
              operator delete(__p);
            }
            v83 = (char *)v101;
            if ((_DWORD)v102)
            {
              v84 = (char *)v101 + 16 * v102;
              do
              {
                v85 = *(_QWORD *)(a1 + 24);
                v86 = *(_DWORD *)(a1 + 40) - 1;
                LODWORD(v87) = ((*(_QWORD *)v83 >> 4) ^ (*(_QWORD *)v83 >> 9)) & v86;
                v88 = v85 + 16 * v87;
                if (*(_QWORD *)v83 != *(_QWORD *)v88)
                {
                  v89 = 1;
                  do
                  {
                    v90 = v87 + v89++;
                    v87 = v90 & v86;
                  }
                  while (*(_QWORD *)v83 != *(_QWORD *)(v85 + 16 * v87));
                  v88 = v85 + 16 * v87;
                }
                sub_1C53C5060(a1, a2, **(_QWORD **)(v88 + 8), *((_QWORD *)v83 + 1));
                v83 += 16;
              }
              while (v83 != v84);
              v83 = (char *)v101;
            }
            if (v83 != v103)
              free(v83);
            return;
          }
        }
        v33 = 0;
LABEL_32:
        v27 = sub_1C53BF8A4((uint64_t)v96, &v100, v33);
        *v27 = v25;
        *(_OWORD *)(v27 + 5) = 0u;
        *(_OWORD *)(v27 + 1) = 0u;
        *(_OWORD *)(v27 + 3) = 0u;
        *(_OWORD *)(v27 + 7) = 0u;
        v27[5] = (uint64_t)(v27 + 7);
        *((_DWORD *)v27 + 13) = 2;
        goto LABEL_33;
      }
    }
  }
}

void sub_1C53BB550(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t *v8;
  uint64_t *Child;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  char *v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[17];

  v23[16] = *MEMORY[0x1E0C80C00];
  v8 = (uint64_t *)(a1 + 48);
  v20 = 0;
  v21 = a3;
  if (!sub_1C4850EC8((uint64_t *)(a1 + 48), &v21, &v20)
    || v20 == *(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64)
    || (Child = *(uint64_t **)(v20 + 8)) == 0)
  {
    v20 = 0;
    v21 = 0;
    v10 = sub_1C4850EC8(v8, &v21, &v20);
    v11 = 0;
    if (v10 && v20 != *(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64))
      v11 = *(_QWORD *)(v20 + 8);
    Child = (uint64_t *)llvm::DominatorTreeBase<llvm::BasicBlock,true>::createChild(a1, (uint64_t)a3, v11);
    v12 = *(unsigned int *)(a1 + 8);
    if (v12 >= *(_DWORD *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v12 + 1, 8);
      LODWORD(v12) = *(_DWORD *)(a1 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = a3;
    ++*(_DWORD *)(a1 + 8);
  }
  *(_BYTE *)(a1 + 88) = 0;
  v20 = 0;
  v21 = a4;
  if (sub_1C4850EC8(v8, &v21, &v20)
    && v20 != *(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64)
    && (v13 = *(_QWORD *)(v20 + 8)) != 0)
  {
    sub_1C53C5A50(a1, a2, Child, v13);
  }
  else
  {
    v21 = v23;
    v22 = 0x800000000;
    sub_1C62379D8(a1, a2, (uint64_t)a4, Child, (uint64_t)&v21);
    v14 = (uint64_t *)v21;
    if ((_DWORD)v22)
    {
      v15 = (char *)v21 + 16 * v22;
      do
      {
        v16 = *v14;
        v19 = 0;
        v20 = v16;
        v17 = sub_1C4850EC8(v8, &v20, &v19);
        v18 = 0;
        if (v17 && v19 != *(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64))
          v18 = *(uint64_t **)(v19 + 8);
        sub_1C53C5A50(a1, a2, v18, v14[1]);
        v14 += 2;
      }
      while (v14 != (uint64_t *)v15);
      v14 = (uint64_t *)v21;
    }
    if (v14 != v23)
      free(v14);
  }
}

void sub_1C53BB778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int32x2_t *v5;
  uint64_t v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t NearestCommonDominator;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  unsigned int v45;
  char *v46;
  int v47;
  unsigned int v48;
  void *v49;
  unsigned int v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  int v54;
  BOOL v55;
  unsigned int v56;
  uint64_t *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  void **v68;
  void **v69;
  void *v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t *v73;
  uint64_t *v74;
  void *v75;
  _QWORD *v76;
  unint64_t v77;
  _DWORD *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  void **v84;
  void *v85;
  int v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t *v90;
  int v91;
  BOOL v92;
  unsigned int v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t i;
  uint64_t v102;
  unsigned int v103;
  BOOL v104;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  int v119;
  int v120;
  unsigned int v121;
  char *v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t *v129;
  int v130;
  BOOL v131;
  unsigned int v132;
  uint64_t *v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t *v154;
  _QWORD *v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  int v163;
  int v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t *v170;
  int v171;
  BOOL v172;
  unsigned int v173;
  char *v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  _QWORD *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  int v188;
  int v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  int v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  int v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  unsigned int v215;
  uint64_t *v216;
  uint64_t v217;
  int v218;
  unsigned int v219;
  uint64_t *v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  unsigned int v224;
  unsigned int v225;
  uint64_t *v226;
  int v227;
  BOOL v228;
  unsigned int v229;
  unsigned int v230;
  int v231;
  uint64_t v232;
  unsigned int v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t *v236;
  int v237;
  BOOL v238;
  unsigned int v239;
  uint64_t *v240;
  char *v241;
  char *v242;
  char *v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  char *v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t *v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t v255;
  unsigned int v256;
  uint64_t *v257;
  uint64_t *v258;
  uint64_t v259;
  _QWORD *v260;
  unint64_t v261;
  _DWORD *v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unsigned int v266;
  uint64_t v267;
  uint64_t *v268;
  uint64_t v269;
  int v270;
  int v271;
  uint64_t v272;
  unsigned int v273;
  uint64_t v274;
  uint64_t *v275;
  int v276;
  BOOL v277;
  unsigned int v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  void *v284;
  uint64_t *v285;
  uint64_t *v286;
  uint64_t *v287;
  uint64_t v288;
  uint64_t v289;
  unsigned int v290;
  void *v291;
  char *v292;
  char *v293;
  uint64_t v294[2];
  unsigned int v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  void *v299;
  void *v300;
  uint64_t v301;
  _BYTE v302[128];
  void *__p;
  char *v304;
  char *v305;
  uint64_t v306[2];
  unsigned int v307;
  uint64_t v308;
  void *__src;
  uint64_t v310;
  _QWORD v311[66];

  v311[64] = *MEMORY[0x1E0C80C00];
  v5 = (int32x2_t *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = *(unsigned int *)(a1 + 40);
  if (!(_DWORD)v6)
    return;
  v9 = v6 - 1;
  LODWORD(v10) = (v6 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  v11 = (uint64_t *)(v4 + 16 * v10);
  v12 = *v11;
  if (*v11 != a3)
  {
    v13 = 1;
    do
    {
      if (v12 == -4096)
        return;
      v14 = v10 + v13++;
      v10 = v14 & v9;
      v12 = *(_QWORD *)(v4 + 16 * v10);
    }
    while (v12 != a3);
    v11 = (uint64_t *)(v4 + 16 * v10);
  }
  v15 = (uint64_t *)(v4 + 16 * v6);
  if (v11 == v15)
    return;
  v16 = (uint64_t *)v11[1];
  if (!v16)
    return;
  LODWORD(v17) = v9 & ((a4 >> 4) ^ (a4 >> 9));
  v18 = (uint64_t *)(v4 + 16 * v17);
  v19 = *v18;
  if (*v18 != a4)
  {
    v20 = 1;
    do
    {
      if (v19 == -4096)
        return;
      v21 = v17 + v20++;
      v17 = v21 & v9;
      v19 = *(_QWORD *)(v4 + 16 * v17);
    }
    while (v19 != a4);
    v18 = (uint64_t *)(v4 + 16 * v17);
  }
  if (v18 == v15)
    return;
  v22 = v18[1];
  if (!v22)
    return;
  NearestCommonDominator = llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator(a1, a3, a4);
  v24 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v24)
  {
    v25 = *(_QWORD *)(a1 + 24);
    LODWORD(v26) = ((NearestCommonDominator >> 4) ^ (NearestCommonDominator >> 9)) & (v24 - 1);
    v27 = (uint64_t *)(v25 + 16 * v26);
    v28 = *v27;
    if (NearestCommonDominator == *v27)
    {
LABEL_22:
      if (v27 != (uint64_t *)(v25 + 16 * v24))
      {
        v31 = v27[1];
        goto LABEL_25;
      }
    }
    else
    {
      v29 = 1;
      while (v28 != -4096)
      {
        v30 = v26 + v29++;
        v26 = v30 & (v24 - 1);
        v28 = *(_QWORD *)(v25 + 16 * v26);
        if (NearestCommonDominator == v28)
        {
          v27 = (uint64_t *)(v25 + 16 * v26);
          goto LABEL_22;
        }
      }
    }
    v31 = 0;
LABEL_25:
    if (v22 == v31)
      return;
  }
  *(_BYTE *)(a1 + 64) = 0;
  if (v16 != *(uint64_t **)(v22 + 8))
    goto LABEL_27;
  v42 = *(_QWORD *)v22;
  if (a2)
  {
    sub_1C4EE28E8(*(_QWORD *)(a2 + 8), *(_QWORD *)v22, (uint64_t)&__src);
    v43 = (uint64_t *)__src;
    LODWORD(v44) = v310;
  }
  else
  {
    for (i = *(_QWORD *)(v42 + 8); i; i = *(_QWORD *)(i + 8))
    {
      v102 = *(_QWORD *)(i + 24);
      v103 = *(unsigned __int8 *)(v102 + 16);
      if (v102)
        v104 = v103 >= 0x1C;
      else
        v104 = 0;
      if (v104 && v103 - 29 < 0xB)
        break;
    }
    __src = v311;
    v310 = 0x800000000;
    sub_1C4DBBCC0((unsigned int *)&__src, i, 0);
    v43 = (uint64_t *)__src;
    v106 = __src;
    if ((_DWORD)v310)
    {
      v107 = 8 * v310;
      v106 = __src;
      while (*v106)
      {
        ++v106;
        v107 -= 8;
        if (!v107)
        {
          v106 = (char *)__src + 8 * v310;
          break;
        }
      }
    }
    v108 = ((char *)v106 - (_BYTE *)__src) >> 3;
    v109 = v106 + 1;
    if (v108 != v310 && v109 != (_QWORD *)((char *)__src + 8 * v310))
    {
      v111 = 8 * v310 - 8 * v108 - 8;
      do
      {
        if (*v109)
          *v106++ = *v109;
        ++v109;
        v111 -= 8;
      }
      while (v111);
      v43 = (uint64_t *)__src;
    }
    v44 = (unint64_t)((char *)v106 - (char *)v43) >> 3;
    LODWORD(v310) = v44;
  }
  if (!(_DWORD)v44)
    goto LABEL_169;
  v112 = &v43[v44];
  do
  {
    v113 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v113)
    {
      v114 = *v43;
      v115 = *(_QWORD *)(a1 + 24);
      LODWORD(v116) = ((*v43 >> 4) ^ (*v43 >> 9)) & (v113 - 1);
      v117 = (uint64_t *)(v115 + 16 * v116);
      v118 = *v117;
      if (*v43 != *v117)
      {
        v119 = 1;
        do
        {
          if (v118 == -4096)
            goto LABEL_167;
          v120 = v116 + v119++;
          v116 = v120 & (v113 - 1);
          v118 = *(_QWORD *)(v115 + 16 * v116);
        }
        while (v114 != v118);
        v117 = (uint64_t *)(v115 + 16 * v116);
      }
      if (v117 != (uint64_t *)(v115 + 16 * v113)
        && v117[1]
        && llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator(a1, v42, v114) != v42)
      {
        if (__src != v311)
          free(__src);
LABEL_27:
        v32 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator(a1, *v16, *(_QWORD *)v22);
        v33 = v32;
        v34 = *(unsigned int *)(a1 + 40);
        if (!(_DWORD)v34)
          goto LABEL_37;
        v35 = *(_QWORD *)(a1 + 24);
        LODWORD(v36) = ((v32 >> 4) ^ (v32 >> 9)) & (v34 - 1);
        v37 = (uint64_t *)(v35 + 16 * v36);
        v38 = *v37;
        if (v32 != *v37)
        {
          v39 = 1;
          do
          {
            if (v38 == -4096)
              goto LABEL_37;
            v40 = v36 + v39++;
            v36 = v40 & (v34 - 1);
            v38 = *(_QWORD *)(v35 + 16 * v36);
          }
          while (v32 != v38);
          v37 = (uint64_t *)(v35 + 16 * v36);
        }
        if (v37 == (uint64_t *)(v35 + 16 * v34))
LABEL_37:
          v41 = 0;
        else
          v41 = v37[1];
        if (!*(_QWORD *)(v41 + 8))
        {
          sub_1C53BA620(a1, a2);
          return;
        }
        v287 = *(uint64_t **)(v41 + 8);
        v45 = *(_DWORD *)(v41 + 16);
        v46 = (char *)operator new(8uLL);
        v47 = 0;
        __p = v46;
        *(_QWORD *)v46 = 0;
        v304 = v46 + 8;
        v305 = v46 + 8;
        v306[0] = 0;
        v306[1] = 0;
        v307 = 0;
        v308 = a2;
        v48 = 1;
        HIDWORD(v310) = 64;
        v311[0] = v33;
        __src = v311;
LABEL_40:
        v49 = (void *)*((_QWORD *)__src + v48 - 1);
        LODWORD(v310) = v48 - 1;
        v291 = v49;
        if (v307)
        {
          v50 = (v307 - 1) & ((v49 >> 4) ^ (v49 >> 9));
          v51 = (uint64_t *)(v306[0] + 72 * v50);
          v52 = *v51;
          if (v49 == (void *)*v51)
          {
LABEL_55:
            if (*((_DWORD *)v51 + 2))
              goto LABEL_115;
            *((_DWORD *)v51 + 4) = ++v47;
            *((_DWORD *)v51 + 2) = v47;
            v51[3] = (uint64_t)v49;
            v58 = v304;
            if (v304 >= v305)
            {
              v60 = (char *)__p;
              v61 = (v304 - (_BYTE *)__p) >> 3;
              v62 = v61 + 1;
              if ((unint64_t)(v61 + 1) >> 61)
                goto LABEL_428;
              v63 = v305 - (_BYTE *)__p;
              if ((v305 - (_BYTE *)__p) >> 2 > v62)
                v62 = v63 >> 2;
              if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
                v64 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v64 = v62;
              if (v64)
              {
                if (v64 >> 61)
                  goto LABEL_429;
                v65 = (char *)operator new(8 * v64);
              }
              else
              {
                v65 = 0;
              }
              v66 = &v65[8 * v61];
              *(_QWORD *)v66 = v49;
              v59 = v66 + 8;
              if (v58 != v60)
              {
                do
                {
                  v67 = *((_QWORD *)v58 - 1);
                  v58 -= 8;
                  *((_QWORD *)v66 - 1) = v67;
                  v66 -= 8;
                }
                while (v58 != v60);
                v58 = (char *)__p;
              }
              __p = v66;
              v305 = &v65[8 * v64];
              if (v58)
                operator delete(v58);
            }
            else
            {
              *(_QWORD *)v304 = v49;
              v59 = v58 + 8;
            }
            v304 = v59;
            if (v308)
              sub_1C4ED7A6C(*(int **)(v308 + 8), (uint64_t)v291, (uint64_t)&v300);
            else
              sub_1C53BFC54((char **)&v300, (uint64_t)v291);
            v68 = (void **)v300;
            v69 = (void **)((char *)v300 + 8 * v301);
            if (!(_DWORD)v301)
              goto LABEL_113;
            while (1)
            {
              v70 = *v68;
              v299 = v70;
              v71 = v306[0];
              v72 = v307;
              v73 = sub_1C4F4C0E0(v306[0], v307, (uint64_t)v70);
              if ((uint64_t *)(v71 + 72 * v72) != v73)
              {
                v74 = v73;
                if (*((_DWORD *)v73 + 2))
                {
                  v75 = v291;
                  if (v70 != v291)
                  {
                    v76 = v73 + 5;
                    v78 = v73 + 6;
                    v77 = *((unsigned int *)v73 + 12);
                    v79 = *((unsigned int *)v73 + 13);
                    goto LABEL_107;
                  }
                  goto LABEL_110;
                }
              }
              v80 = *(_QWORD *)(a1 + 24);
              v81 = *(unsigned int *)(a1 + 40);
              v82 = v70 >> 4;
              if ((_DWORD)v81)
              {
                LODWORD(v83) = (v81 - 1) & (v82 ^ (v70 >> 9));
                v84 = (void **)(v80 + 16 * v83);
                v85 = *v84;
                if (v70 == *v84)
                  goto LABEL_88;
                v86 = 1;
                while (v85 != (void *)-4096)
                {
                  v87 = v83 + v86++;
                  v83 = v87 & (v81 - 1);
                  v85 = *(void **)(v80 + 16 * v83);
                  if (v70 == v85)
                  {
                    v84 = (void **)(v80 + 16 * v83);
                    goto LABEL_88;
                  }
                }
              }
              v84 = (void **)(v80 + 16 * v81);
LABEL_88:
              if (*((_DWORD *)v84[1] + 4) > v45)
              {
                if (!v72)
                {
                  v94 = 0;
                  goto LABEL_103;
                }
                v88 = (v72 - 1) & (v82 ^ (v70 >> 9));
                v74 = (uint64_t *)(v71 + 72 * v88);
                v89 = *v74;
                if (v70 != (void *)*v74)
                {
                  v90 = 0;
                  v91 = 1;
                  while (v89 != -4096)
                  {
                    if (v90)
                      v92 = 0;
                    else
                      v92 = v89 == -8192;
                    if (v92)
                      v90 = v74;
                    v93 = v88 + v91++;
                    v88 = v93 & (v72 - 1);
                    v74 = (uint64_t *)(v71 + 72 * v88);
                    v89 = *v74;
                    if (v70 == (void *)*v74)
                      goto LABEL_104;
                  }
                  if (v90)
                    v94 = v90;
                  else
                    v94 = v74;
LABEL_103:
                  v74 = sub_1C53BF8A4((uint64_t)v306, (uint64_t *)&v299, v94);
                  *v74 = (uint64_t)v70;
                  *(_OWORD *)(v74 + 5) = 0u;
                  *(_OWORD *)(v74 + 1) = 0u;
                  *(_OWORD *)(v74 + 3) = 0u;
                  *(_OWORD *)(v74 + 7) = 0u;
                  v74[5] = (uint64_t)(v74 + 7);
                  *((_DWORD *)v74 + 13) = 2;
                }
LABEL_104:
                v95 = v310;
                if (v310 >= (unint64_t)HIDWORD(v310))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v311, v310 + 1, 8);
                  v95 = v310;
                }
                *((_QWORD *)__src + v95) = v70;
                v78 = v74 + 6;
                v77 = *((unsigned int *)v74 + 12);
                LODWORD(v310) = v310 + 1;
                *((_DWORD *)v74 + 3) = v47;
                v76 = v74 + 5;
                v75 = v291;
                v79 = *((unsigned int *)v74 + 13);
LABEL_107:
                if (v77 >= v79)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v76, (uint64_t)(v74 + 7), v77 + 1, 8);
                  v77 = *((unsigned int *)v74 + 12);
                }
                *(_QWORD *)(*v76 + 8 * v77) = v75;
                ++*v78;
              }
LABEL_110:
              if (++v68 == v69)
              {
                v68 = (void **)v300;
LABEL_113:
                if (v68 != (void **)v302)
                  free(v68);
LABEL_115:
                v48 = v310;
                if (!(_DWORD)v310)
                {
                  if (__src != v311)
                    free(__src);
                  sub_1C53BE564((uint64_t *)&__p, a1, v45);
                  sub_1C53C68B4((uint64_t *)&__p, a1, *v287);
                  v96 = v306[0];
                  if (v307)
                  {
                    v97 = v306[0] + 56;
                    v98 = 72 * v307;
                    do
                    {
                      v99 = *(_QWORD *)(v97 - 56);
                      if (v99 != -4096 && v99 != -8192)
                      {
                        v100 = *(void **)(v97 - 16);
                        if ((void *)v97 != v100)
                          free(v100);
                      }
                      v97 += 72;
                      v98 -= 72;
                    }
                    while (v98);
                    v96 = v306[0];
                  }
                  MEMORY[0x1CAA32FB4](v96, 8);
                  if (__p)
                  {
                    v304 = (char *)__p;
                    operator delete(__p);
                  }
                  return;
                }
                goto LABEL_40;
              }
            }
          }
          v53 = 0;
          v54 = 1;
          while (v52 != -4096)
          {
            if (v53)
              v55 = 0;
            else
              v55 = v52 == -8192;
            if (v55)
              v53 = v51;
            v56 = v50 + v54++;
            v50 = v56 & (v307 - 1);
            v51 = (uint64_t *)(v306[0] + 72 * v50);
            v52 = *v51;
            if (v49 == (void *)*v51)
              goto LABEL_55;
          }
          if (v53)
            v57 = v53;
          else
            v57 = v51;
        }
        else
        {
          v57 = 0;
        }
        v51 = sub_1C53BF8A4((uint64_t)v306, (uint64_t *)&v291, v57);
        *v51 = (uint64_t)v49;
        *(_OWORD *)(v51 + 5) = 0u;
        *(_OWORD *)(v51 + 1) = 0u;
        *(_OWORD *)(v51 + 3) = 0u;
        *(_OWORD *)(v51 + 7) = 0u;
        v51[5] = (uint64_t)(v51 + 7);
        *((_DWORD *)v51 + 13) = 2;
        goto LABEL_55;
      }
    }
LABEL_167:
    ++v43;
  }
  while (v43 != v112);
  v43 = (uint64_t *)__src;
LABEL_169:
  if (v43 != v311)
    free(v43);
  v300 = v302;
  v301 = 0x1000000000;
  v121 = *(_DWORD *)(v22 + 16);
  v122 = (char *)operator new(8uLL);
  v290 = 0;
  v291 = v122;
  *(_QWORD *)v122 = 0;
  v292 = v122 + 8;
  v293 = v122 + 8;
  v289 = a2;
  v294[0] = 0;
  v294[1] = 0;
  v295 = 0;
  v296 = a2;
  v123 = *(_QWORD *)v22;
  __src = v311;
  HIDWORD(v310) = 64;
  v311[0] = v123;
  v124 = 1;
  v288 = v22;
  while (2)
  {
    v125 = *((_QWORD *)__src + v124 - 1);
    LODWORD(v310) = v124 - 1;
    v299 = (void *)v125;
    if (!v295)
    {
      v133 = 0;
      goto LABEL_186;
    }
    v126 = (v295 - 1) & ((v125 >> 4) ^ (v125 >> 9));
    v127 = (uint64_t *)(v294[0] + 72 * v126);
    v128 = *v127;
    if (v125 != *v127)
    {
      v129 = 0;
      v130 = 1;
      while (v128 != -4096)
      {
        if (v129)
          v131 = 0;
        else
          v131 = v128 == -8192;
        if (v131)
          v129 = v127;
        v132 = v126 + v130++;
        v126 = v132 & (v295 - 1);
        v127 = (uint64_t *)(v294[0] + 72 * v126);
        v128 = *v127;
        if (v125 == *v127)
          goto LABEL_187;
      }
      if (v129)
        v133 = v129;
      else
        v133 = v127;
LABEL_186:
      v127 = sub_1C53BF8A4((uint64_t)v294, (uint64_t *)&v299, v133);
      *v127 = v125;
      *(_OWORD *)(v127 + 5) = 0u;
      *(_OWORD *)(v127 + 1) = 0u;
      *(_OWORD *)(v127 + 3) = 0u;
      *(_OWORD *)(v127 + 7) = 0u;
      v127[5] = (uint64_t)(v127 + 7);
      *((_DWORD *)v127 + 13) = 2;
    }
LABEL_187:
    if (!*((_DWORD *)v127 + 2))
    {
      *((_DWORD *)v127 + 4) = v290 + 1;
      *((_DWORD *)v127 + 2) = v290 + 1;
      v127[3] = v125;
      v134 = v292;
      ++v290;
      if (v292 >= v293)
      {
        v136 = (char *)v291;
        v137 = (v292 - (_BYTE *)v291) >> 3;
        v138 = v137 + 1;
        if ((unint64_t)(v137 + 1) >> 61)
LABEL_428:
          abort();
        v139 = v293 - (_BYTE *)v291;
        if ((v293 - (_BYTE *)v291) >> 2 > v138)
          v138 = v139 >> 2;
        if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8)
          v140 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v140 = v138;
        if (v140)
        {
          if (v140 >> 61)
LABEL_429:
            sub_1C4764EE4();
          v141 = (char *)operator new(8 * v140);
        }
        else
        {
          v141 = 0;
        }
        v142 = (uint64_t *)&v141[8 * v137];
        *v142 = v125;
        v135 = (char *)(v142 + 1);
        if (v134 != v136)
        {
          do
          {
            v143 = *((_QWORD *)v134 - 1);
            v134 -= 8;
            *--v142 = v143;
          }
          while (v134 != v136);
          v134 = (char *)v291;
        }
        v291 = v142;
        v293 = &v141[8 * v140];
        if (v134)
          operator delete(v134);
      }
      else
      {
        *(_QWORD *)v292 = v125;
        v135 = v134 + 8;
      }
      v292 = v135;
      if (v296)
        sub_1C4ED7A6C(*(int **)(v296 + 8), (uint64_t)v299, (uint64_t)&__p);
      else
        sub_1C53BFC54((char **)&__p, (uint64_t)v299);
      v144 = (uint64_t *)__p;
      v145 = (uint64_t *)((char *)__p + 8 * v304);
      if (!(_DWORD)v304)
      {
LABEL_257:
        if (v144 != (uint64_t *)&v305)
          free(v144);
        v22 = v288;
        a2 = v289;
        goto LABEL_260;
      }
      while (2)
      {
        v147 = *v144;
        v298 = v147;
        v148 = v294[0];
        v149 = v295;
        v150 = sub_1C4F4C0E0(v294[0], v295, v147);
        if ((uint64_t *)(v148 + 72 * v149) != v150)
        {
          v151 = v150;
          if (*((_DWORD *)v150 + 2))
          {
            v152 = (uint64_t)v299;
            if ((void *)v147 != v299)
            {
              v154 = v150 + 6;
              v153 = *((unsigned int *)v150 + 12);
              v155 = v150 + 5;
              if (v153 >= *((unsigned int *)v150 + 13))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v150 + 5), (uint64_t)(v150 + 7), v153 + 1, 8);
                v153 = *((unsigned int *)v151 + 12);
              }
              v156 = (uint64_t *)(*v155 + 8 * v153);
              v147 = v152;
              goto LABEL_254;
            }
LABEL_255:
            if (++v144 == v145)
            {
              v144 = (uint64_t *)__p;
              goto LABEL_257;
            }
            continue;
          }
        }
        break;
      }
      v157 = *(_QWORD *)(a1 + 24);
      v158 = *(unsigned int *)(a1 + 40);
      v159 = v147 >> 4;
      if ((_DWORD)v158)
      {
        LODWORD(v160) = (v158 - 1) & (v159 ^ (v147 >> 9));
        v161 = (uint64_t *)(v157 + 16 * v160);
        v162 = *v161;
        if (*v161 != v147)
        {
          v163 = 1;
          while (v162 != -4096)
          {
            v164 = v160 + v163++;
            v160 = v164 & (v158 - 1);
            v162 = *(_QWORD *)(v157 + 16 * v160);
            if (v162 == v147)
            {
              v161 = (uint64_t *)(v157 + 16 * v160);
              goto LABEL_224;
            }
          }
          goto LABEL_223;
        }
      }
      else
      {
LABEL_223:
        v161 = (uint64_t *)(v157 + 16 * v158);
      }
LABEL_224:
      if (*(_DWORD *)(v161[1] + 16) <= v121)
      {
        v174 = (char *)v300;
        v175 = v301;
        v176 = (char *)v300;
        if ((_DWORD)v301)
        {
          v177 = 8 * v301;
          v176 = (char *)v300;
          while (*(_QWORD *)v176 != v147)
          {
            v176 += 8;
            v177 -= 8;
            if (!v177)
            {
              v176 = (char *)v300 + 8 * v301;
              break;
            }
          }
        }
        if (v301 != (v176 - (_BYTE *)v300) >> 3)
          goto LABEL_255;
        if (v301 >= HIDWORD(v301))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v300, (uint64_t)v302, v301 + 1, 8);
          v174 = (char *)v300;
          v175 = v301;
        }
        v156 = (uint64_t *)&v174[8 * v175];
        v154 = &v301;
      }
      else
      {
        if (!v149)
        {
          v146 = 0;
          goto LABEL_248;
        }
        v165 = v159 ^ (v147 >> 9);
        v166 = v149 - 1;
        v167 = v165 & (v149 - 1);
        v168 = (uint64_t *)(v148 + 72 * v167);
        v169 = *v168;
        if (v147 != *v168)
        {
          v170 = 0;
          v171 = 1;
          while (v169 != -4096)
          {
            if (v170)
              v172 = 0;
            else
              v172 = v169 == -8192;
            if (v172)
              v170 = v168;
            v173 = v167 + v171++;
            v167 = v173 & v166;
            v168 = (uint64_t *)(v148 + 72 * v167);
            v169 = *v168;
            if (v147 == *v168)
              goto LABEL_249;
          }
          if (v170)
            v146 = v170;
          else
            v146 = v168;
LABEL_248:
          v168 = sub_1C53BF8A4((uint64_t)v294, &v298, v146);
          *v168 = v147;
          *(_OWORD *)(v168 + 5) = 0u;
          *(_OWORD *)(v168 + 1) = 0u;
          *(_OWORD *)(v168 + 3) = 0u;
          *(_OWORD *)(v168 + 7) = 0u;
          v168[5] = (uint64_t)(v168 + 7);
          *((_DWORD *)v168 + 13) = 2;
        }
LABEL_249:
        v178 = v310;
        if (v310 >= (unint64_t)HIDWORD(v310))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v311, v310 + 1, 8);
          v178 = v310;
        }
        *((_QWORD *)__src + v178) = v147;
        v154 = v168 + 6;
        v179 = *((unsigned int *)v168 + 12);
        LODWORD(v310) = v310 + 1;
        *((_DWORD *)v168 + 3) = v290;
        v147 = (uint64_t)v299;
        if (v179 >= *((unsigned int *)v168 + 13))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v168 + 5), (uint64_t)(v168 + 7), v179 + 1, 8);
          v179 = *((unsigned int *)v168 + 12);
        }
        v156 = (uint64_t *)(v168[5] + 8 * v179);
      }
LABEL_254:
      *v156 = v147;
      ++*(_DWORD *)v154;
      goto LABEL_255;
    }
LABEL_260:
    v124 = v310;
    if ((_DWORD)v310)
      continue;
    break;
  }
  if (__src != v311)
    free(__src);
  if ((_DWORD)v301)
  {
    v180 = v300;
    v181 = (char *)v300 + 8 * v301;
    v182 = *(_QWORD *)(a1 + 24);
    LODWORD(v183) = *(_DWORD *)(a1 + 40);
    v184 = v22;
    while (1)
    {
      if ((_DWORD)v183)
      {
        LODWORD(v185) = ((*v180 >> 4) ^ (*v180 >> 9)) & (v183 - 1);
        v186 = (uint64_t *)(v182 + 16 * v185);
        v187 = *v186;
        if (*v180 == *v186)
          goto LABEL_274;
        v188 = 1;
        while (v187 != -4096)
        {
          v189 = v185 + v188++;
          v185 = v189 & (v183 - 1);
          v187 = *(_QWORD *)(v182 + 16 * v185);
          if (*v180 == v187)
          {
            v186 = (uint64_t *)(v182 + 16 * v185);
            goto LABEL_274;
          }
        }
      }
      v186 = (uint64_t *)(v182 + 16 * v183);
LABEL_274:
      v190 = (uint64_t *)v186[1];
      v191 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator(a1, *v190, *(_QWORD *)v22);
      v182 = *(_QWORD *)(a1 + 24);
      v183 = *(unsigned int *)(a1 + 40);
      if ((_DWORD)v183)
      {
        LODWORD(v192) = ((v191 >> 4) ^ (v191 >> 9)) & (v183 - 1);
        v193 = (uint64_t *)(v182 + 16 * v192);
        v194 = *v193;
        if (v191 == *v193)
        {
LABEL_280:
          if (v193 != (uint64_t *)(v182 + 16 * v183))
          {
            v197 = v193[1];
            goto LABEL_283;
          }
        }
        else
        {
          v195 = 1;
          while (v194 != -4096)
          {
            v196 = v192 + v195++;
            v192 = v196 & (v183 - 1);
            v194 = *(_QWORD *)(v182 + 16 * v192);
            if (v191 == v194)
            {
              v193 = (uint64_t *)(v182 + 16 * v192);
              goto LABEL_280;
            }
          }
        }
      }
      v197 = 0;
LABEL_283:
      if ((uint64_t *)v197 != v190 && *(_DWORD *)(v197 + 16) < *(_DWORD *)(v184 + 16))
        v184 = v197;
      if (++v180 == (_QWORD *)v181)
        goto LABEL_289;
    }
  }
  v184 = v22;
LABEL_289:
  if (!*(_QWORD *)(v184 + 8))
  {
    sub_1C53BA620(a1, a2);
    goto LABEL_408;
  }
  if (v290)
  {
    v198 = v290;
    v199 = v291;
    while (1)
    {
      v200 = *(unsigned int *)(a1 + 40);
      if (!(_DWORD)v200)
        goto LABEL_300;
      v201 = v199[v198];
      v202 = *(_QWORD *)(a1 + 24);
      LODWORD(v203) = ((v201 >> 4) ^ (v201 >> 9)) & (v200 - 1);
      v204 = (uint64_t *)(v202 + 16 * v203);
      v205 = *v204;
      if (v201 != *v204)
        break;
LABEL_298:
      if (v204 == (uint64_t *)(v202 + 16 * v200))
        goto LABEL_300;
      v208 = v204[1];
LABEL_301:
      v209 = *(_QWORD *)(v208 + 8);
      v210 = *(uint64_t **)(v209 + 24);
      v211 = *(unsigned int *)(v209 + 32);
      v212 = &v210[v211];
      if ((_DWORD)v211)
      {
        v213 = 8 * v211;
        while (*v210 != v208)
        {
          ++v210;
          v213 -= 8;
          if (!v213)
          {
            v210 = v212;
            break;
          }
        }
      }
      v214 = *v210;
      *v210 = *(v212 - 1);
      *(v212 - 1) = v214;
      *(_DWORD *)(v209 + 32) = v211 - 1;
      __src = *(void **)v208;
      sub_1C4867FFC(v5, &__src);
      if (!(_DWORD)--v198)
        goto LABEL_307;
    }
    v206 = 1;
    while (v205 != -4096)
    {
      v207 = v203 + v206++;
      v203 = v207 & (v200 - 1);
      v205 = *(_QWORD *)(v202 + 16 * v203);
      if (v201 == v205)
      {
        v204 = (uint64_t *)(v202 + 16 * v203);
        goto LABEL_298;
      }
    }
LABEL_300:
    v208 = 0;
    goto LABEL_301;
  }
LABEL_307:
  if (v184 == v22)
    goto LABEL_408;
  v215 = *(_DWORD *)(v184 + 16);
  v216 = *(uint64_t **)(v184 + 8);
  __src = 0;
  sub_1C53C4ED0((char **)&v291, &__src, &v310);
  sub_1C53C6C3C((uint64_t)v294);
  v217 = *(_QWORD *)v184;
  v299 = (void *)v217;
  __src = v311;
  v311[0] = v217;
  v310 = 0x4000000001;
  if (v295)
  {
    v218 = v295 - 1;
    v219 = (v295 - 1) & ((v217 >> 4) ^ (v217 >> 9));
    v220 = (uint64_t *)(v294[0] + 72 * v219);
    v221 = *v220;
    if (*v220 == v217)
    {
LABEL_321:
      *(_DWORD *)(v294[0] + 72 * v219 + 12) = 0;
    }
    else
    {
      v222 = 1;
      v223 = *v220;
      v224 = v218 & ((v217 >> 4) ^ (v217 >> 9));
      while (v223 != -4096)
      {
        v225 = v224 + v222++;
        v224 = v225 & v218;
        v223 = *(_QWORD *)(v294[0] + 72 * v224);
        if (v223 == v217)
        {
          v226 = 0;
          v227 = 1;
          while (v221 != -4096)
          {
            if (v226)
              v228 = 0;
            else
              v228 = v221 == -8192;
            if (v228)
              v226 = v220;
            v229 = v219 + v227++;
            v219 = v229 & v218;
            v220 = (uint64_t *)(v294[0] + 72 * v219);
            v221 = *v220;
            if (*v220 == v217)
              goto LABEL_321;
          }
          if (v226)
            v285 = v226;
          else
            v285 = v220;
          v286 = sub_1C53BF8A4((uint64_t)v294, (uint64_t *)&v299, v285);
          *v286 = v217;
          *(_OWORD *)(v286 + 5) = 0u;
          *(_OWORD *)(v286 + 3) = 0u;
          *(_OWORD *)(v286 + 1) = 0u;
          *(_OWORD *)(v286 + 7) = 0u;
          v286[5] = (uint64_t)(v286 + 7);
          *((_DWORD *)v286 + 13) = 2;
          v230 = v310;
          if (!(_DWORD)v310)
            goto LABEL_404;
          goto LABEL_323;
        }
      }
    }
  }
  v230 = 1;
LABEL_323:
  v231 = 0;
  do
  {
    v232 = *((_QWORD *)__src + v230 - 1);
    LODWORD(v310) = v230 - 1;
    v298 = v232;
    if (!v295)
    {
      v240 = 0;
LABEL_338:
      v234 = sub_1C53BF8A4((uint64_t)v294, &v298, v240);
      *v234 = v232;
      *(_OWORD *)(v234 + 5) = 0u;
      *(_OWORD *)(v234 + 1) = 0u;
      *(_OWORD *)(v234 + 3) = 0u;
      *(_OWORD *)(v234 + 7) = 0u;
      v234[5] = (uint64_t)(v234 + 7);
      *((_DWORD *)v234 + 13) = 2;
      goto LABEL_339;
    }
    v233 = (v295 - 1) & ((v232 >> 4) ^ (v232 >> 9));
    v234 = (uint64_t *)(v294[0] + 72 * v233);
    v235 = *v234;
    if (v232 != *v234)
    {
      v236 = 0;
      v237 = 1;
      while (v235 != -4096)
      {
        if (v236)
          v238 = 0;
        else
          v238 = v235 == -8192;
        if (v238)
          v236 = v234;
        v239 = v233 + v237++;
        v233 = v239 & (v295 - 1);
        v234 = (uint64_t *)(v294[0] + 72 * v233);
        v235 = *v234;
        if (v232 == *v234)
          goto LABEL_339;
      }
      if (v236)
        v240 = v236;
      else
        v240 = v234;
      goto LABEL_338;
    }
LABEL_339:
    if (*((_DWORD *)v234 + 2))
      goto LABEL_403;
    *((_DWORD *)v234 + 4) = ++v231;
    *((_DWORD *)v234 + 2) = v231;
    v234[3] = v232;
    v241 = v292;
    if (v292 >= v293)
    {
      v243 = (char *)v291;
      v244 = (v292 - (_BYTE *)v291) >> 3;
      v245 = v244 + 1;
      if ((unint64_t)(v244 + 1) >> 61)
        goto LABEL_428;
      v246 = v293 - (_BYTE *)v291;
      if ((v293 - (_BYTE *)v291) >> 2 > v245)
        v245 = v246 >> 2;
      if ((unint64_t)v246 >= 0x7FFFFFFFFFFFFFF8)
        v247 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v247 = v245;
      if (v247)
      {
        if (v247 >> 61)
          goto LABEL_429;
        v248 = (char *)operator new(8 * v247);
      }
      else
      {
        v248 = 0;
      }
      v249 = (uint64_t *)&v248[8 * v244];
      *v249 = v232;
      v242 = (char *)(v249 + 1);
      if (v241 != v243)
      {
        do
        {
          v250 = *((_QWORD *)v241 - 1);
          v241 -= 8;
          *--v249 = v250;
        }
        while (v241 != v243);
        v241 = (char *)v291;
      }
      v291 = v249;
      v293 = &v248[8 * v247];
      if (v241)
        operator delete(v241);
    }
    else
    {
      *(_QWORD *)v292 = v232;
      v242 = v241 + 8;
    }
    v292 = v242;
    if (v296)
      sub_1C4ED7A6C(*(int **)(v296 + 8), v298, (uint64_t)&__p);
    else
      sub_1C53BFC54((char **)&__p, v298);
    v251 = (uint64_t *)__p;
    v252 = (uint64_t *)((char *)__p + 8 * v304);
    if (!(_DWORD)v304)
      goto LABEL_401;
    do
    {
      v254 = *v251;
      v297 = v254;
      v255 = v294[0];
      v256 = v295;
      v257 = sub_1C4F4C0E0(v294[0], v295, v254);
      if ((uint64_t *)(v255 + 72 * v256) != v257)
      {
        v258 = v257;
        if (*((_DWORD *)v257 + 2))
        {
          v259 = v298;
          if (v254 == v298)
            goto LABEL_399;
          v260 = v257 + 5;
          v262 = v257 + 6;
          v261 = *((unsigned int *)v257 + 12);
          v263 = *((unsigned int *)v257 + 13);
          goto LABEL_396;
        }
      }
      v264 = *(_QWORD *)(a1 + 24);
      v265 = *(unsigned int *)(a1 + 40);
      v266 = v254 >> 4;
      if (!(_DWORD)v265)
        goto LABEL_374;
      LODWORD(v267) = (v265 - 1) & (v266 ^ (v254 >> 9));
      v268 = (uint64_t *)(v264 + 16 * v267);
      v269 = *v268;
      if (*v268 != v254)
      {
        v270 = 1;
        while (v269 != -4096)
        {
          v271 = v267 + v270++;
          v267 = v271 & (v265 - 1);
          v269 = *(_QWORD *)(v264 + 16 * v267);
          if (v269 == v254)
          {
            v268 = (uint64_t *)(v264 + 16 * v267);
            goto LABEL_375;
          }
        }
LABEL_374:
        v268 = (uint64_t *)(v264 + 16 * v265);
      }
LABEL_375:
      if (v268 == (uint64_t *)(v264 + 16 * v265))
        goto LABEL_399;
      v272 = v268[1];
      if (!v272 || *(_DWORD *)(v272 + 16) <= v215)
        goto LABEL_399;
      if (!v256)
      {
        v253 = 0;
LABEL_392:
        v258 = sub_1C53BF8A4((uint64_t)v294, &v297, v253);
        *v258 = v254;
        *(_OWORD *)(v258 + 5) = 0u;
        *(_OWORD *)(v258 + 1) = 0u;
        *(_OWORD *)(v258 + 3) = 0u;
        *(_OWORD *)(v258 + 7) = 0u;
        v258[5] = (uint64_t)(v258 + 7);
        *((_DWORD *)v258 + 13) = 2;
        goto LABEL_393;
      }
      v273 = (v256 - 1) & (v266 ^ (v254 >> 9));
      v258 = (uint64_t *)(v255 + 72 * v273);
      v274 = *v258;
      if (v254 != *v258)
      {
        v275 = 0;
        v276 = 1;
        while (v274 != -4096)
        {
          if (v275)
            v277 = 0;
          else
            v277 = v274 == -8192;
          if (v277)
            v275 = v258;
          v278 = v273 + v276++;
          v273 = v278 & (v256 - 1);
          v258 = (uint64_t *)(v255 + 72 * v273);
          v274 = *v258;
          if (v254 == *v258)
            goto LABEL_393;
        }
        if (v275)
          v253 = v275;
        else
          v253 = v258;
        goto LABEL_392;
      }
LABEL_393:
      v279 = v310;
      if (v310 >= (unint64_t)HIDWORD(v310))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v311, v310 + 1, 8);
        v279 = v310;
      }
      *((_QWORD *)__src + v279) = v254;
      v262 = v258 + 6;
      v261 = *((unsigned int *)v258 + 12);
      LODWORD(v310) = v310 + 1;
      *((_DWORD *)v258 + 3) = v231;
      v260 = v258 + 5;
      v259 = v298;
      v263 = *((unsigned int *)v258 + 13);
LABEL_396:
      if (v261 >= v263)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v260, (uint64_t)(v258 + 7), v261 + 1, 8);
        v261 = *((unsigned int *)v258 + 12);
      }
      *(_QWORD *)(*v260 + 8 * v261) = v259;
      ++*v262;
LABEL_399:
      ++v251;
    }
    while (v251 != v252);
    v251 = (uint64_t *)__p;
LABEL_401:
    if (v251 != (uint64_t *)&v305)
      free(v251);
LABEL_403:
    v230 = v310;
  }
  while ((_DWORD)v310);
LABEL_404:
  if (__src != v311)
    free(__src);
  sub_1C53BE564((uint64_t *)&v291, a1, v215);
  sub_1C53C68B4((uint64_t *)&v291, a1, *v216);
LABEL_408:
  v280 = v294[0];
  if (v295)
  {
    v281 = v294[0] + 56;
    v282 = 72 * v295;
    do
    {
      v283 = *(_QWORD *)(v281 - 56);
      if (v283 != -4096 && v283 != -8192)
      {
        v284 = *(void **)(v281 - 16);
        if ((void *)v281 != v284)
          free(v284);
      }
      v281 += 72;
      v282 -= 72;
    }
    while (v282);
    v280 = v294[0];
  }
  MEMORY[0x1CAA32FB4](v280, 8);
  if (v291)
  {
    v292 = (char *)v291;
    operator delete(v291);
  }
  if (v300 != v302)
    free(v300);
}

void sub_1C53BCE84(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t *v8;
  uint64_t *v9;
  void *v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  char *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  _DWORD *v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t *v51;
  int v52;
  BOOL v53;
  unsigned int v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t *v59;
  unsigned int v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  int v64;
  BOOL v65;
  unsigned int v66;
  uint64_t v67;
  void **v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t *v90;
  int v91;
  BOOL v92;
  unsigned int v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t *v104;
  void *__p;
  char *v106;
  char *v107;
  uint64_t v108[2];
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  unsigned int v116;
  uint64_t v117;
  void *NearestCommonDominator;
  unsigned int v119;
  unsigned int v120;
  _QWORD v121[66];

  v121[64] = *MEMORY[0x1E0C80C00];
  NearestCommonDominator = a3;
  v115 = 0;
  v104 = (uint64_t *)(a1 + 48);
  if (sub_1C4850EC8((uint64_t *)(a1 + 48), &NearestCommonDominator, &v115))
  {
    if (v115 != (void *)(*(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64)))
    {
      v8 = (uint64_t *)*((_QWORD *)v115 + 1);
      if (v8)
      {
        NearestCommonDominator = a4;
        v115 = 0;
        if (sub_1C4850EC8(v104, &NearestCommonDominator, &v115))
        {
          if (v115 != (void *)(*(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64)))
          {
            v9 = (uint64_t *)*((_QWORD *)v115 + 1);
            if (v9)
            {
              NearestCommonDominator = (void *)llvm::DominatorTreeBase<llvm::BasicBlock,true>::findNearestCommonDominator(a1, (uint64_t)a3, (uint64_t)a4);
              v115 = 0;
              if (sub_1C4850EC8(v104, &NearestCommonDominator, &v115)
                && v115 != (void *)(*(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64))
                && v9 == *((uint64_t **)v115 + 1))
              {
                goto LABEL_138;
              }
              *(_BYTE *)(a1 + 88) = 0;
              if (v8 != (uint64_t *)v9[1])
                goto LABEL_11;
              v67 = *v9;
              if (a2)
                sub_1C53C3160((uint64_t)&NearestCommonDominator, *(_QWORD *)(a2 + 8), *v9);
              else
                sub_1C53C3404((char **)&NearestCommonDominator, *v9);
              v68 = (void **)NearestCommonDominator;
              if (v119)
              {
                v69 = a2;
                v70 = 8 * v119;
                while (1)
                {
                  v71 = *v68;
                  v115 = *v68;
                  __p = 0;
                  if (sub_1C4850EC8(v104, &v115, &__p))
                  {
                    if (__p != (void *)(*(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64))
                      && *((_QWORD *)__p + 1)
                      && llvm::DominatorTreeBase<llvm::BasicBlock,true>::findNearestCommonDominator(a1, v67, (uint64_t)v71) != v67)
                    {
                      break;
                    }
                  }
                  ++v68;
                  v70 -= 8;
                  if (!v70)
                  {
                    v68 = (void **)NearestCommonDominator;
                    a2 = v69;
                    goto LABEL_115;
                  }
                }
                if (NearestCommonDominator != v121)
                  free(NearestCommonDominator);
                a2 = v69;
LABEL_11:
                v103 = a2;
                v10 = (void *)llvm::DominatorTreeBase<llvm::BasicBlock,true>::findNearestCommonDominator(a1, *v8, *v9);
                NearestCommonDominator = v10;
                v115 = 0;
                v11 = sub_1C4850EC8(v104, &NearestCommonDominator, &v115);
                v12 = 0;
                if (v11 && v115 != (void *)(*(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64)))
                  v12 = *((_QWORD *)v115 + 1);
                if (!*(_QWORD *)(v12 + 8))
                {
                  a2 = v103;
                  sub_1C53BA93C(a1, v103);
                  goto LABEL_138;
                }
                v102 = *(uint64_t **)(v12 + 8);
                v13 = *(_DWORD *)(v12 + 16);
                v14 = (char *)operator new(8uLL);
                v15 = 0;
                __p = v14;
                *(_QWORD *)v14 = 0;
                v106 = v14 + 8;
                v107 = v14 + 8;
                v108[0] = 0;
                v108[1] = 0;
                v109 = 0;
                v110 = v103;
                v16 = 1;
                v120 = 64;
                v121[0] = v10;
                NearestCommonDominator = v121;
                while (1)
                {
                  v17 = *((_QWORD *)NearestCommonDominator + v16 - 1);
                  v119 = v16 - 1;
                  v112 = v17;
                  if (!v109)
                    break;
                  v18 = (v109 - 1) & ((v17 >> 4) ^ (v17 >> 9));
                  v19 = (uint64_t *)(v108[0] + 72 * v18);
                  v20 = *v19;
                  if (v17 != *v19)
                  {
                    v21 = 0;
                    v22 = 1;
                    while (v20 != -4096)
                    {
                      if (v21)
                        v23 = 0;
                      else
                        v23 = v20 == -8192;
                      if (v23)
                        v21 = v19;
                      v24 = v18 + v22++;
                      v18 = v24 & (v109 - 1);
                      v19 = (uint64_t *)(v108[0] + 72 * v18);
                      v20 = *v19;
                      if (v17 == *v19)
                        goto LABEL_31;
                    }
                    if (v21)
                      v25 = v21;
                    else
                      v25 = v19;
                    goto LABEL_30;
                  }
LABEL_31:
                  if (!*((_DWORD *)v19 + 2))
                  {
                    *((_DWORD *)v19 + 4) = ++v15;
                    *((_DWORD *)v19 + 2) = v15;
                    v19[3] = v17;
                    v26 = v106;
                    if (v106 >= v107)
                    {
                      v28 = (char *)__p;
                      v29 = (v106 - (_BYTE *)__p) >> 3;
                      v30 = v29 + 1;
                      if ((unint64_t)(v29 + 1) >> 61)
                        abort();
                      v31 = v107 - (_BYTE *)__p;
                      if ((v107 - (_BYTE *)__p) >> 2 > v30)
                        v30 = v31 >> 2;
                      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
                        v32 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v32 = v30;
                      if (v32)
                      {
                        if (v32 >> 61)
                          sub_1C4764EE4();
                        v33 = (char *)operator new(8 * v32);
                      }
                      else
                      {
                        v33 = 0;
                      }
                      v34 = (uint64_t *)&v33[8 * v29];
                      *v34 = v17;
                      v27 = (char *)(v34 + 1);
                      if (v26 != v28)
                      {
                        do
                        {
                          v35 = *((_QWORD *)v26 - 1);
                          v26 -= 8;
                          *--v34 = v35;
                        }
                        while (v26 != v28);
                        v26 = (char *)__p;
                      }
                      __p = v34;
                      v107 = &v33[8 * v32];
                      if (v26)
                        operator delete(v26);
                    }
                    else
                    {
                      *(_QWORD *)v106 = v17;
                      v27 = v26 + 8;
                    }
                    v106 = v27;
                    if (v110)
                      sub_1C53C36D0(*(_QWORD *)(v110 + 8), v112, (unsigned int *)&v115);
                    else
                      sub_1C53C38C8((unsigned int *)&v115, *(_QWORD *)(v112 + 8));
                    v36 = (uint64_t *)v115;
                    v37 = (uint64_t *)((char *)v115 + 8 * v116);
                    if (v116)
                    {
                      while (1)
                      {
                        v38 = *v36;
                        v111 = v38;
                        v39 = v108[0];
                        v40 = v109;
                        v41 = sub_1C4F4C0E0(v108[0], v109, v38);
                        if ((uint64_t *)(v39 + 72 * v40) == v41 || (v42 = v41, !*((_DWORD *)v41 + 2)))
                        {
                          v113 = 0;
                          v114 = v38;
                          if (sub_1C4850EC8(v104, &v114, &v113))
                            v48 = v113;
                          else
                            v48 = *(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
                          if (*(_DWORD *)(*(_QWORD *)(v48 + 8) + 16) > v13)
                          {
                            if (!v109)
                            {
                              v55 = 0;
                              goto LABEL_75;
                            }
                            v49 = (v109 - 1) & ((v38 >> 4) ^ (v38 >> 9));
                            v42 = (uint64_t *)(v108[0] + 72 * v49);
                            v50 = *v42;
                            if (v38 != *v42)
                            {
                              v51 = 0;
                              v52 = 1;
                              while (v50 != -4096)
                              {
                                if (v51)
                                  v53 = 0;
                                else
                                  v53 = v50 == -8192;
                                if (v53)
                                  v51 = v42;
                                v54 = v49 + v52++;
                                v49 = v54 & (v109 - 1);
                                v42 = (uint64_t *)(v108[0] + 72 * v49);
                                v50 = *v42;
                                if (v38 == *v42)
                                  goto LABEL_76;
                              }
                              if (v51)
                                v55 = v51;
                              else
                                v55 = v42;
LABEL_75:
                              v42 = sub_1C53C2DB0((uint64_t)v108, &v111, v55);
                              *v42 = v38;
                              *(_OWORD *)(v42 + 5) = 0u;
                              *(_OWORD *)(v42 + 1) = 0u;
                              *(_OWORD *)(v42 + 3) = 0u;
                              *(_OWORD *)(v42 + 7) = 0u;
                              v42[5] = (uint64_t)(v42 + 7);
                              *((_DWORD *)v42 + 13) = 2;
                            }
LABEL_76:
                            v56 = v119;
                            if (v119 >= (unint64_t)v120)
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&NearestCommonDominator, (uint64_t)v121, v119 + 1, 8);
                              v56 = v119;
                            }
                            *((_QWORD *)NearestCommonDominator + v56) = v38;
                            v46 = v42 + 6;
                            v45 = *((unsigned int *)v42 + 12);
                            ++v119;
                            *((_DWORD *)v42 + 3) = v15;
                            v44 = v42 + 5;
                            v43 = v112;
                            v47 = *((unsigned int *)v42 + 13);
LABEL_79:
                            if (v45 >= v47)
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v44, (uint64_t)(v42 + 7), v45 + 1, 8);
                              v45 = *((unsigned int *)v42 + 12);
                            }
                            *(_QWORD *)(*v44 + 8 * v45) = v43;
                            ++*v46;
                          }
                        }
                        else
                        {
                          v43 = v112;
                          if (v38 != v112)
                          {
                            v44 = v41 + 5;
                            v46 = v41 + 6;
                            v45 = *((unsigned int *)v41 + 12);
                            v47 = *((unsigned int *)v41 + 13);
                            goto LABEL_79;
                          }
                        }
                        if (++v36 == v37)
                        {
                          v36 = (uint64_t *)v115;
                          break;
                        }
                      }
                    }
                    if (v36 != &v117)
                      free(v36);
                  }
                  v16 = v119;
                  if (!v119)
                  {
                    if (NearestCommonDominator != v121)
                      free(NearestCommonDominator);
                    sub_1C53C12D8((uint64_t *)&__p, a1, v13);
                    v57 = *v102;
                    v58 = __p;
                    v59 = (uint64_t *)((char *)__p + 8);
                    if (!v109)
                    {
                      v76 = 0;
                      goto LABEL_126;
                    }
                    v60 = ((*v59 >> 4) ^ (*v59 >> 9)) & (v109 - 1);
                    v61 = (uint64_t *)(v108[0] + 72 * v60);
                    v62 = *v61;
                    if (*v59 != *v61)
                    {
                      v63 = 0;
                      v64 = 1;
                      while (v62 != -4096)
                      {
                        if (v63)
                          v65 = 0;
                        else
                          v65 = v62 == -8192;
                        if (v65)
                          v63 = v61;
                        v66 = v60 + v64++;
                        v60 = v66 & (v109 - 1);
                        v61 = (uint64_t *)(v108[0] + 72 * v60);
                        v62 = *v61;
                        if (*v59 == *v61)
                          goto LABEL_127;
                      }
                      if (v63)
                        v76 = v63;
                      else
                        v76 = v61;
LABEL_126:
                      v61 = sub_1C53C2DB0((uint64_t)v108, (uint64_t *)__p + 1, v76);
                      *v61 = *v59;
                      *(_OWORD *)(v61 + 5) = 0u;
                      *(_OWORD *)(v61 + 3) = 0u;
                      *(_OWORD *)(v61 + 1) = 0u;
                      *(_OWORD *)(v61 + 7) = 0u;
                      v61[5] = (uint64_t)(v61 + 7);
                      *((_DWORD *)v61 + 13) = 2;
                      v58 = __p;
                    }
LABEL_127:
                    v61[4] = v57;
                    v77 = v106 - v58;
                    if (v77 == 8)
                    {
LABEL_128:
                      v78 = v108[0];
                      if (v109)
                      {
                        v79 = v108[0] + 56;
                        v80 = 72 * v109;
                        a2 = v103;
                        do
                        {
                          v81 = *(_QWORD *)(v79 - 56);
                          if (v81 != -4096 && v81 != -8192)
                          {
                            v82 = *(void **)(v79 - 16);
                            if ((void *)v79 != v82)
                              free(v82);
                          }
                          v79 += 72;
                          v80 -= 72;
                        }
                        while (v80);
                        v78 = v108[0];
                      }
                      else
                      {
                        a2 = v103;
                      }
                      MEMORY[0x1CAA32FB4](v78, 8);
                      if (__p)
                      {
                        v106 = (char *)__p;
                        operator delete(__p);
                      }
                      goto LABEL_138;
                    }
                    v83 = v77 >> 3;
                    v84 = 1;
                    while (2)
                    {
                      v85 = (void *)*((_QWORD *)__p + v84);
                      v114 = (uint64_t)v85;
                      v115 = 0;
                      NearestCommonDominator = v85;
                      v86 = 0;
                      if (sub_1C4850EC8(v104, &NearestCommonDominator, &v115)
                        && v115 != (void *)(*(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64)))
                      {
                        v86 = *((_QWORD *)v115 + 1);
                      }
                      if (v109)
                      {
                        v87 = (v109 - 1) & ((v85 >> 4) ^ (v85 >> 9));
                        v88 = (uint64_t *)(v108[0] + 72 * v87);
                        v89 = *v88;
                        if (v85 != (void *)*v88)
                        {
                          v90 = 0;
                          v91 = 1;
                          while (v89 != -4096)
                          {
                            if (v90)
                              v92 = 0;
                            else
                              v92 = v89 == -8192;
                            if (v92)
                              v90 = v88;
                            v93 = v87 + v91++;
                            v87 = v93 & (v109 - 1);
                            v88 = (uint64_t *)(v108[0] + 72 * v87);
                            v89 = *v88;
                            if (v85 == (void *)*v88)
                              goto LABEL_159;
                          }
                          if (v90)
                            v94 = v90;
                          else
                            v94 = v88;
LABEL_158:
                          v88 = sub_1C53C2DB0((uint64_t)v108, &v114, v94);
                          *v88 = (uint64_t)v85;
                          *(_OWORD *)(v88 + 5) = 0u;
                          *(_OWORD *)(v88 + 1) = 0u;
                          *(_OWORD *)(v88 + 3) = 0u;
                          *(_OWORD *)(v88 + 7) = 0u;
                          v88[5] = (uint64_t)(v88 + 7);
                          *((_DWORD *)v88 + 13) = 2;
                        }
LABEL_159:
                        NearestCommonDominator = (void *)v88[4];
                        v115 = 0;
                        v95 = 0;
                        if (sub_1C4850EC8(v104, &NearestCommonDominator, &v115)
                          && v115 != (void *)(*(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64)))
                        {
                          v95 = *((_QWORD *)v115 + 1);
                        }
                        v96 = *(_QWORD *)(v86 + 8);
                        if (v96 != v95)
                        {
                          v97 = *(_QWORD **)(v96 + 24);
                          v98 = *(unsigned int *)(v96 + 32);
                          v99 = &v97[v98];
                          if ((_DWORD)v98)
                          {
                            v100 = 8 * v98;
                            while (*v97 != v86)
                            {
                              ++v97;
                              v100 -= 8;
                              if (!v100)
                              {
                                v97 = v99;
                                break;
                              }
                            }
                          }
                          if (v99 != v97 + 1)
                          {
                            memmove(v97, v97 + 1, (char *)v99 - (char *)(v97 + 1));
                            LODWORD(v98) = *(_DWORD *)(v96 + 32);
                          }
                          *(_DWORD *)(v96 + 32) = v98 - 1;
                          *(_QWORD *)(v86 + 8) = v95;
                          v101 = *(unsigned int *)(v95 + 32);
                          if (v101 >= *(unsigned int *)(v95 + 36))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod(v95 + 24, v95 + 40, v101 + 1, 8);
                            v101 = *(unsigned int *)(v95 + 32);
                          }
                          *(_QWORD *)(*(_QWORD *)(v95 + 24) + 8 * v101) = v86;
                          ++*(_DWORD *)(v95 + 32);
                          llvm::DomTreeNodeBase<llvm::BasicBlock>::UpdateLevel(v86);
                        }
                        if (++v84 == v83)
                          goto LABEL_128;
                        continue;
                      }
                      break;
                    }
                    v94 = 0;
                    goto LABEL_158;
                  }
                }
                v25 = 0;
LABEL_30:
                v19 = sub_1C53C2DB0((uint64_t)v108, &v112, v25);
                *v19 = v17;
                *(_OWORD *)(v19 + 5) = 0u;
                *(_OWORD *)(v19 + 1) = 0u;
                *(_OWORD *)(v19 + 3) = 0u;
                *(_OWORD *)(v19 + 7) = 0u;
                v19[5] = (uint64_t)(v19 + 7);
                *((_DWORD *)v19 + 13) = 2;
                goto LABEL_31;
              }
LABEL_115:
              if (v68 != v121)
                free(v68);
              v72 = *v9;
              v73 = *(unsigned int *)(a1 + 8);
              if (v73 >= *(_DWORD *)(a1 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v73 + 1, 8);
                LODWORD(v73) = *(_DWORD *)(a1 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v73) = v72;
              ++*(_DWORD *)(a1 + 8);
              NearestCommonDominator = 0;
              v115 = 0;
              v74 = sub_1C4850EC8(v104, &NearestCommonDominator, &v115);
              v75 = 0;
              if (v74 && v115 != (void *)(*(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64)))
                v75 = (uint64_t *)*((_QWORD *)v115 + 1);
              sub_1C53C5A50(a1, a2, v75, (uint64_t)v9);
LABEL_138:
              sub_1C53C67A0(a1, a2);
            }
          }
        }
      }
    }
  }
}

void llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unsigned int v6;
  _BOOL4 v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18[8];
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v3 = *(unsigned int *)(a2 + 608);
  if (!(_DWORD)v3)
    return;
  if ((_DWORD)v3 == 1)
  {
    v15 = sub_1C53C6CF8(a2);
    if (a3)
    {
      v18[0] = 0;
      v19 = a3;
      v20 = a3;
      v21 = *(unsigned int *)(a3 + 608);
      v17 = v14 & 0xFFFFFFFFFFFFFFF8;
      if ((v14 & 4) != 0)
        sub_1C53BB778(a1, (uint64_t)v18, v15, v17);
      else
        sub_1C53BAD9C(a1, (uint64_t)v18, v15, v17);
    }
    else
    {
      v16 = v14 & 0xFFFFFFFFFFFFFFF8;
      if ((v14 & 4) != 0)
        sub_1C53BB778(a1, 0, v15, v16);
      else
        sub_1C53BAD9C(a1, 0, v15, v16);
    }
    return;
  }
  v18[0] = 0;
  v19 = a2;
  v20 = a3;
  v21 = v3;
  v6 = *(_DWORD *)(a1 + 32);
  if (v6 > 0x64)
  {
    if (v3 <= v6 / 0x28)
      goto LABEL_5;
LABEL_18:
    sub_1C53BA620(a1, (uint64_t)v18);
    v3 = v21;
    v7 = v18[0] == 0;
    goto LABEL_6;
  }
  if (v3 > v6)
    goto LABEL_18;
LABEL_5:
  v7 = 1;
LABEL_6:
  if (v3 && v7)
  {
    v8 = 1;
    do
    {
      v9 = sub_1C53C6CF8(v19);
      v11 = v10 & 0xFFFFFFFFFFFFFFF8;
      if ((v10 & 4) != 0)
        sub_1C53BB778(a1, (uint64_t)v18, v9, v11);
      else
        sub_1C53BAD9C(a1, (uint64_t)v18, v9, v11);
    }
    while (v8++ < v21 && v18[0] == 0);
  }
}

void llvm::DomTreeBuilder::ApplyUpdates<llvm::DominatorTreeBase<llvm::BasicBlock,true>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unsigned int v6;
  _BOOL4 v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  char v18[8];
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v5 = *(unsigned int *)(a2 + 608);
  if ((_DWORD)v5 == 1)
  {
    v15 = (void *)sub_1C53C70F0(a2);
    if (a3)
    {
      v18[0] = 0;
      v19 = a3;
      v20 = a3;
      v21 = *(unsigned int *)(a3 + 608);
      v17 = (void *)(v14 & 0xFFFFFFFFFFFFFFF8);
      if ((v14 & 4) != 0)
        sub_1C53BCE84(a1, (uint64_t)v18, v15, v17);
      else
        sub_1C53BB550(a1, (uint64_t)v18, v15, v17);
    }
    else
    {
      v16 = (void *)(v14 & 0xFFFFFFFFFFFFFFF8);
      if ((v14 & 4) != 0)
        sub_1C53BCE84(a1, 0, v15, v16);
      else
        sub_1C53BB550(a1, 0, v15, v16);
    }
    return;
  }
  if (!(_DWORD)v5)
    return;
  v18[0] = 0;
  v19 = a2;
  v20 = a3;
  v21 = v5;
  v6 = *(_DWORD *)(a1 + 56);
  if (v6 > 0x64)
  {
    if (v5 <= v6 / 0x28)
      goto LABEL_5;
LABEL_20:
    sub_1C53BA93C(a1, (uint64_t)v18);
    v5 = v21;
    v7 = v18[0] == 0;
    goto LABEL_6;
  }
  if (v5 > v6)
    goto LABEL_20;
LABEL_5:
  v7 = 1;
LABEL_6:
  if (v5 && v7)
  {
    v8 = 1;
    do
    {
      v9 = (void *)sub_1C53C70F0(v19);
      v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFF8);
      if ((v10 & 4) != 0)
        sub_1C53BCE84(a1, (uint64_t)v18, v9, v11);
      else
        sub_1C53BB550(a1, (uint64_t)v18, v9, v11);
    }
    while (v8++ < v21 && v18[0] == 0);
  }
}

BOOL llvm::DominatorTree::invalidate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  _QWORD v8[2];
  BOOL v9;

  v8[0] = a3;
  v8[1] = &llvm::DominatorTreeAnalysis::Key;
  v4 = sub_1C477672C(a3 + 48, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
  v5 = *(_QWORD *)(a3 + 56);
  if (v5 == *(_QWORD *)(a3 + 48))
    v6 = (unsigned int *)(a3 + 68);
  else
    v6 = (unsigned int *)(a3 + 64);
  v9 = v4 != (_QWORD *)(v5 + 8 * *v6);
  return !sub_1C4DAA35C((uint64_t)v8) && !sub_1C4DAA3F8((uint64_t)v8) && !sub_1C4DAA49C((uint64_t)v8);
}

BOOL llvm::DominatorTree::dominates(llvm::DominatorTree *this, const llvm::BasicBlock *a2, const llvm::Use *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = *((_QWORD *)a3 + 3);
  if (!v3 || *(_BYTE *)(v3 + 16) != 83)
    return llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates((uint64_t)this, (uint64_t)a2, *(_QWORD *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 20);
  if ((v4 & 0x40000000) != 0)
    v5 = *(_QWORD *)(v3 - 8);
  else
    v5 = v3 - 32 * (v4 & 0x7FFFFFF);
  return llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)this, (uint64_t)a2, *(_QWORD *)(v5 + 32 * *(unsigned int *)(v3 + 60) + 8 * (((unint64_t)a3 - v5) >> 5)));
}

BOOL llvm::DominatorTree::dominates(llvm::DominatorTree *this, const llvm::Value *a2, const llvm::Instruction *a3)
{
  _BOOL8 result;
  const llvm::BasicBlock *v7;
  uint64_t v8;
  _BOOL4 isReachableFromEntry;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  result = 1;
  if (a2 && *((unsigned __int8 *)a2 + 16) >= 0x1Cu)
  {
    v7 = (const llvm::BasicBlock *)*((_QWORD *)a3 + 5);
    v8 = *((_QWORD *)a2 + 5);
    if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry((uint64_t)this, (uint64_t)v7))
    {
      isReachableFromEntry = llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry((uint64_t)this, v8);
      result = 0;
      if (a2 != a3 && isReachableFromEntry)
      {
        v10 = *((unsigned __int8 *)a2 + 16);
        if (v10 == 33 || v10 == 39 || *((_BYTE *)a3 + 16) == 83)
        {
          return llvm::DominatorTree::dominates(this, a2, v7);
        }
        else if ((const llvm::BasicBlock *)v8 == v7)
        {
          v11 = *((_QWORD *)a2 + 5);
          v12 = *(__int16 *)(v11 + 18);
          if ((v12 & 0x80000000) == 0)
          {
            v13 = *(_QWORD *)(v11 + 48);
            if (v13 != v11 + 40)
            {
              v14 = 0;
              do
              {
                v15 = v13 - 24;
                if (!v13)
                  v15 = 0;
                *(_DWORD *)(v15 + 56) = v14++;
                v13 = *(_QWORD *)(v13 + 8);
              }
              while (v13 != v11 + 40);
            }
            *(_WORD *)(v11 + 18) = v12 | 0x8000;
          }
          return *((_DWORD *)a2 + 14) < *((_DWORD *)a3 + 14);
        }
        else
        {
          return llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)this, v8, (uint64_t)v7);
        }
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

BOOL llvm::DominatorTree::dominates(llvm::DominatorTree *this, const llvm::Instruction *a2, const llvm::BasicBlock *a3)
{
  const llvm::BasicBlock *v6;
  int v9;
  uint64_t v10;
  _QWORD v11[2];

  v6 = (const llvm::BasicBlock *)*((_QWORD *)a2 + 5);
  if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry((uint64_t)this, (uint64_t)a3))
    return 1;
  if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry((uint64_t)this, (uint64_t)v6) || v6 == a3)
    return 0;
  v9 = *((unsigned __int8 *)a2 + 16);
  if (v9 == 39)
  {
    v10 = *((_QWORD *)a2 - 4 * *((unsigned int *)a2 + 20) - 8);
  }
  else
  {
    if (v9 != 33)
      return llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)this, (uint64_t)v6, (uint64_t)a3);
    v10 = *((_QWORD *)a2 - 12);
  }
  v11[0] = v6;
  v11[1] = v10;
  return llvm::DominatorTree::dominates(this, (const llvm::BasicBlockEdge *)v11, a3);
}

BOOL llvm::DominatorTree::dominates(llvm::DominatorTree *this, const llvm::BasicBlockEdge *a2, const llvm::BasicBlock *a3)
{
  llvm::BasicBlock *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  int v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;

  v5 = *(_QWORD *)a2;
  v4 = (llvm::BasicBlock *)*((_QWORD *)a2 + 1);
  result = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)this, (uint64_t)v4, (uint64_t)a3);
  if (!result)
    return result;
  if (llvm::BasicBlock::getSinglePredecessor(v4))
    return 1;
  v7 = *((_QWORD *)v4 + 1);
  if (!v7)
    return 1;
  while (1)
  {
    v8 = *(_QWORD *)(v7 + 24);
    v9 = *(unsigned __int8 *)(v8 + 16);
    v10 = v8 && v9 >= 0x1C;
    if (v10 && v9 - 29 <= 0xA)
      break;
    v7 = *(_QWORD *)(v7 + 8);
    if (!v7)
      return 1;
  }
  v12 = 0;
LABEL_16:
  v13 = *(_QWORD *)(v8 + 40);
  if (v13 == v5)
  {
    if (v12)
      return 0;
    v12 = 1;
LABEL_21:
    while (1)
    {
      v7 = *(_QWORD *)(v7 + 8);
      if (!v7)
        return 1;
      v8 = *(_QWORD *)(v7 + 24);
      v14 = *(unsigned __int8 *)(v8 + 16);
      if (v8)
        v15 = v14 >= 0x1C;
      else
        v15 = 0;
      if (v15 && v14 - 29 < 0xB)
        goto LABEL_16;
    }
  }
  result = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)this, (uint64_t)v4, v13);
  if (result)
    goto LABEL_21;
  return result;
}

BOOL llvm::DominatorTree::dominates(llvm::DominatorTree *this, const llvm::BasicBlockEdge *a2, const llvm::Use *a3)
{
  uint64_t v3;
  const llvm::BasicBlock **v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *((_QWORD *)a3 + 3);
  v4 = (const llvm::BasicBlock **)(v3 + 40);
  if (!v3 || *(_BYTE *)(v3 + 16) != 83)
    return llvm::DominatorTree::dominates(this, a2, *v4);
  v5 = *(_DWORD *)(v3 + 20);
  if (*(_QWORD *)(v3 + 40) != *((_QWORD *)a2 + 1)
    || ((v5 & 0x40000000) != 0 ? (v6 = *(_QWORD *)(v3 - 8)) : (v6 = v3 - 32 * (v5 & 0x7FFFFFF)),
        *(_QWORD *)(v6 + 32 * *(unsigned int *)(v3 + 60) + 8 * (((unint64_t)a3 - v6) >> 5)) != *(_QWORD *)a2))
  {
    if ((v5 & 0x40000000) != 0)
      v7 = *(_QWORD *)(v3 - 8);
    else
      v7 = v3 - 32 * (v5 & 0x7FFFFFF);
    v4 = (const llvm::BasicBlock **)(v7
                                   + 32 * *(unsigned int *)(v3 + 60)
                                   + 8 * (((unint64_t)a3 - v7) >> 5));
    return llvm::DominatorTree::dominates(this, a2, *v4);
  }
  return 1;
}

BOOL llvm::DominatorTree::dominates(llvm::DominatorTree *this, const llvm::Value *a2, const llvm::Use *a3)
{
  _BOOL8 result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD v20[2];

  result = 1;
  if (a2 && *((unsigned __int8 *)a2 + 16) >= 0x1Cu)
  {
    v7 = *((_QWORD *)a3 + 3);
    if (v7 && *(_BYTE *)(v7 + 16) == 83)
    {
      v8 = *(_DWORD *)(v7 + 20);
      if ((v8 & 0x40000000) != 0)
        v9 = *(_QWORD *)(v7 - 8);
      else
        v9 = v7 - 32 * (v8 & 0x7FFFFFF);
      v10 = (uint64_t *)(v9 + 32 * *(unsigned int *)(v7 + 60) + 8 * (((unint64_t)a3 - v9) >> 5));
    }
    else
    {
      v10 = (uint64_t *)(v7 + 40);
    }
    v11 = *((_QWORD *)a2 + 5);
    v12 = *v10;
    if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry((uint64_t)this, *v10))
      return 1;
    result = llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry((uint64_t)this, v11);
    if (!(_DWORD)result)
      return result;
    v13 = *((unsigned __int8 *)a2 + 16);
    if (v13 == 39)
    {
      v14 = *((_QWORD *)a2 - 4 * *((unsigned int *)a2 + 20) - 8);
      goto LABEL_16;
    }
    if (v13 == 33)
    {
      v14 = *((_QWORD *)a2 - 12);
LABEL_16:
      v20[0] = v11;
      v20[1] = v14;
      return llvm::DominatorTree::dominates(this, (const llvm::BasicBlockEdge *)v20, a3);
    }
    if (v11 != v12)
      return llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates((uint64_t)this, v11, v12);
    if (*(_BYTE *)(v7 + 16) != 83)
    {
      v15 = *((_QWORD *)a2 + 5);
      v16 = *(__int16 *)(v15 + 18);
      if ((v16 & 0x80000000) == 0)
      {
        v17 = *(_QWORD *)(v15 + 48);
        if (v17 != v15 + 40)
        {
          v18 = 0;
          do
          {
            v19 = v17 - 24;
            if (!v17)
              v19 = 0;
            *(_DWORD *)(v19 + 56) = v18++;
            v17 = *(_QWORD *)(v17 + 8);
          }
          while (v17 != v15 + 40);
        }
        *(_WORD *)(v15 + 18) = v16 | 0x8000;
      }
      return *((_DWORD *)a2 + 14) < *(_DWORD *)(v7 + 56);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

BOOL llvm::DominatorTree::isReachableFromEntry(llvm::DominatorTree *this, const llvm::Use *a2)
{
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  int v6;
  uint64_t v7;
  uint64_t *v8;

  v2 = *((_QWORD *)a2 + 3);
  v3 = *(unsigned __int8 *)(v2 + 16);
  if (v2)
    v4 = v3 >= 0x1C;
  else
    v4 = 0;
  if (!v4)
    return 1;
  if (v3 == 83)
  {
    v6 = *(_DWORD *)(v2 + 20);
    if ((v6 & 0x40000000) != 0)
      v7 = *(_QWORD *)(v2 - 8);
    else
      v7 = v2 - 32 * (v6 & 0x7FFFFFF);
    v8 = (uint64_t *)(v7 + 32 * *(unsigned int *)(v2 + 60) + 8 * (((unint64_t)a2 - v7) >> 5));
  }
  else
  {
    v8 = (uint64_t *)(v2 + 40);
  }
  return llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry((uint64_t)this, *v8);
}

BOOL llvm::DominatorTree::dominates(llvm::DominatorTree *this, const llvm::BasicBlock **a2, const llvm::BasicBlock **a3)
{
  const llvm::BasicBlock *v4;

  v4 = *a3;
  return *a2 == v4 && a2[1] == a3[1] || llvm::DominatorTree::dominates(this, (const llvm::BasicBlockEdge *)a2, v4);
}

void llvm::DominatorTreeAnalysis::run(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x100000000;
  *(_DWORD *)(a2 + 68) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = a1;
  sub_1C53BA620(a2, 0);
}

_QWORD *llvm::DominatorTreePrinterPass::DominatorTreePrinterPass(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

void llvm::initializeDominatorTreeWrapperPassPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED830690);
  if (v1 != -1)
  {
    v4[0] = sub_1C53BE370;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED830690, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C53BE370(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Dominator Tree Construction";
  *(_QWORD *)(v2 + 8) = 27;
  *(_QWORD *)(v2 + 16) = "domtree";
  *(_QWORD *)(v2 + 24) = 7;
  *(_QWORD *)(v2 + 32) = &llvm::DominatorTreeWrapperPass::ID;
  *(_WORD *)(v2 + 40) = 257;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::DominatorTreeWrapperPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::DominatorTreeWrapperPass::runOnFunction(llvm::DominatorTreeWrapperPass *this, llvm::Function *a2)
{
  *((_QWORD *)this + 11) = a2;
  sub_1C53BA620((uint64_t)this + 32, 0);
  return 0;
}

uint64_t *sub_1C53BE42C(uint64_t a1)
{
  uint64_t *result;

  result = sub_1C4EF5C94((uint64_t *)(a1 + 56));
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 100) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  return result;
}

void sub_1C53BE460(uint64_t *a1)
{
  uint64_t *v2;

  *a1 = (uint64_t)&off_1E814EA40;
  sub_1C4DC4E38(a1 + 7);
  v2 = (uint64_t *)a1[4];
  if (v2 != a1 + 6)
    free(v2);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

_QWORD *sub_1C53BE4A4(uint64_t a1, uint64_t *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  _QWORD *v12;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v12 = 0;
LABEL_15:
    v6 = sub_1C52A334C(a1, (uint64_t)a2, a2, v12);
    *v6 = *a2;
    v6[1] = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != -4096)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -8192;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v11 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v12 = v8;
    else
      v12 = v6;
    goto LABEL_15;
  }
  return v6;
}

uint64_t sub_1C53BE55C()
{
  return 1;
}

void sub_1C53BE564(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  BOOL v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t *v56;
  int v57;
  BOOL v58;
  unsigned int v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  int v70;
  BOOL v71;
  unsigned int v72;
  uint64_t *v73;
  unsigned int v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  int v78;
  uint64_t v79;
  int v80;
  unsigned int v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  int v85;
  BOOL v86;
  unsigned int v87;
  uint64_t *v88;
  uint64_t *v89;
  int v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t *v96;
  int v97;
  BOOL v98;
  unsigned int v99;
  uint64_t *v100;
  uint64_t *v101;
  unsigned int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  unsigned int v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t *v110;
  int v111;
  BOOL v112;
  unsigned int v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  int v120;
  unsigned int v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t *v125;
  int v126;
  BOOL v127;
  unsigned int v128;
  uint64_t *v129;
  unsigned int v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t *v133;
  int v134;
  BOOL v135;
  unsigned int v136;
  uint64_t *v137;
  unsigned int v138;
  uint64_t *v139;
  uint64_t *v140;
  uint64_t v141;
  int v142;
  unsigned int v143;
  uint64_t v144;
  int v145;
  unsigned int v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t *v149;
  int v150;
  BOOL v151;
  unsigned int v152;
  uint64_t *v153;
  int v154;
  uint64_t v155;
  int v156;
  unsigned int v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t *v160;
  int v161;
  BOOL v162;
  unsigned int v163;
  uint64_t *v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  uint64_t v174;
  _QWORD v175[34];

  v175[32] = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v165 = a1[1] - *a1;
  v166 = v165 >> 3;
  if ((v165 >> 3) >= 2)
  {
    v6 = 1;
    while (1)
    {
      v173 = 0;
      v7 = *(void **)(v5 + 8 * v6);
      v173 = v7;
      v8 = *((_DWORD *)a1 + 10);
      if (!v8)
        break;
      v9 = a1[3];
      v10 = v8 - 1;
      v11 = ((v7 >> 4) ^ (v7 >> 9)) & v10;
      v12 = (uint64_t *)(v9 + 72 * v11);
      v13 = *v12;
      if (v7 != (void *)*v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -4096)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -8192;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = (uint64_t *)(v9 + 72 * v11);
          v13 = *v12;
          if (v7 == (void *)*v12)
            goto LABEL_18;
        }
        if (v14)
          v18 = v14;
        else
          v18 = v12;
        goto LABEL_17;
      }
LABEL_18:
      v12[4] = *(_QWORD *)(v5 + 8 * *((unsigned int *)v12 + 3));
      if (++v6 == (v165 >> 3))
        goto LABEL_21;
    }
    v18 = 0;
LABEL_17:
    v12 = sub_1C53BF8A4((uint64_t)(a1 + 3), (uint64_t *)&v173, v18);
    *v12 = (uint64_t)v7;
    *(_OWORD *)(v12 + 5) = 0u;
    *(_OWORD *)(v12 + 3) = 0u;
    *(_OWORD *)(v12 + 1) = 0u;
    *(_OWORD *)(v12 + 7) = 0u;
    v12[5] = (uint64_t)(v12 + 7);
    *((_DWORD *)v12 + 13) = 2;
    v5 = *a1;
    goto LABEL_18;
  }
LABEL_21:
  v173 = v175;
  v174 = 0x2000000000;
  v19 = (v166 - 1);
  if (v19 < 2)
    goto LABEL_225;
  v170 = (uint64_t)(a1 + 3);
  v20 = v165 >> 3;
  do
  {
    v167 = v19;
    v21 = *(_QWORD *)(*a1 + 8 * v19);
    v171 = v21;
    v22 = *((_DWORD *)a1 + 10);
    v169 = v20;
    if (v22)
    {
      v23 = a1[3];
      v24 = v22 - 1;
      v25 = ((v21 >> 4) ^ (v21 >> 9)) & v24;
      v26 = (uint64_t *)(v23 + 72 * v25);
      v27 = *v26;
      if (v21 == *v26)
        goto LABEL_38;
      v28 = 0;
      v29 = 1;
      while (v27 != -4096)
      {
        if (v28)
          v30 = 0;
        else
          v30 = v27 == -8192;
        if (v30)
          v28 = v26;
        v31 = v25 + v29++;
        v25 = v31 & v24;
        v26 = (uint64_t *)(v23 + 72 * v25);
        v27 = *v26;
        if (v21 == *v26)
          goto LABEL_38;
      }
      if (v28)
        v32 = v28;
      else
        v32 = v26;
    }
    else
    {
      v32 = 0;
    }
    v26 = sub_1C53BF8A4(v170, &v171, v32);
    *v26 = v21;
    *(_OWORD *)(v26 + 5) = 0u;
    *(_OWORD *)(v26 + 1) = 0u;
    *(_OWORD *)(v26 + 3) = 0u;
    *(_OWORD *)(v26 + 7) = 0u;
    v26[5] = (uint64_t)(v26 + 7);
    *((_DWORD *)v26 + 13) = 2;
    v20 = v169;
LABEL_38:
    *((_DWORD *)v26 + 4) = *((_DWORD *)v26 + 3);
    v33 = *((unsigned int *)v26 + 12);
    if ((_DWORD)v33)
    {
      v34 = (uint64_t *)v26[5];
      v35 = &v34[v33];
      while (1)
      {
        v36 = *((_DWORD *)a1 + 10);
        if (v36)
        {
          v37 = *v34;
          v38 = a1[3];
          v39 = (*v34 >> 4) ^ (*v34 >> 9);
          v40 = v36 - 1;
          v41 = v39 & v40;
          v42 = (uint64_t *)(v38 + 72 * (v39 & v40));
          v43 = *v42;
          if (*v34 != *v42)
          {
            v44 = 1;
            v45 = *v42;
            v46 = v39 & v40;
            while (v45 != -4096)
            {
              v47 = v46 + v44++;
              v46 = v47 & v40;
              v45 = *(_QWORD *)(v38 + 72 * v46);
              if (v37 == v45)
                goto LABEL_45;
            }
            goto LABEL_87;
          }
LABEL_45:
          v48 = *(unsigned int *)(a2 + 40);
          if (!(_DWORD)v48)
            break;
          v49 = *(_QWORD *)(a2 + 24);
          LODWORD(v50) = (v48 - 1) & v39;
          v51 = (uint64_t *)(v49 + 16 * v50);
          v52 = *v51;
          if (v37 != *v51)
          {
            v53 = 1;
            do
            {
              if (v52 == -4096)
                goto LABEL_54;
              v54 = v50 + v53++;
              v50 = v54 & (v48 - 1);
              v52 = *(_QWORD *)(v49 + 16 * v50);
            }
            while (v37 != v52);
            v51 = (uint64_t *)(v49 + 16 * v50);
          }
          if (v51 == (uint64_t *)(v49 + 16 * v48))
            break;
          v55 = v51[1];
          if (!v55 || *(_DWORD *)(v55 + 16) >= a3)
            break;
        }
LABEL_87:
        if (++v34 == v35)
          goto LABEL_149;
      }
LABEL_54:
      v172 = *v34;
      if (v37 != v43)
      {
        v56 = 0;
        v57 = 1;
        while (v43 != -4096)
        {
          if (v56)
            v58 = 0;
          else
            v58 = v43 == -8192;
          if (v58)
            v56 = v42;
          v59 = v41 + v57++;
          v41 = v59 & v40;
          v42 = (uint64_t *)(v38 + 72 * v41);
          v43 = *v42;
          if (*v42 == v37)
            goto LABEL_68;
        }
        if (v56)
          v60 = v56;
        else
          v60 = v42;
        v42 = sub_1C53BF8A4(v170, &v172, v60);
        v20 = v169;
        *v42 = v37;
        *(_OWORD *)(v42 + 5) = 0u;
        *(_OWORD *)(v42 + 1) = 0u;
        *(_OWORD *)(v42 + 3) = 0u;
        *(_OWORD *)(v42 + 7) = 0u;
        v42[5] = (uint64_t)(v42 + 7);
        *((_DWORD *)v42 + 13) = 2;
      }
LABEL_68:
      if (*((_DWORD *)v42 + 3) < v20)
      {
        v61 = v42 + 3;
LABEL_70:
        v62 = *v61;
        v172 = *v61;
        v63 = *((_DWORD *)a1 + 10);
        if (v63)
        {
          v64 = a1[3];
          v65 = v63 - 1;
          v66 = v65 & ((v62 >> 4) ^ (v62 >> 9));
          v67 = (uint64_t *)(v64 + 72 * v66);
          v68 = *v67;
          if (v62 == *v67)
            goto LABEL_85;
          v69 = 0;
          v70 = 1;
          while (v68 != -4096)
          {
            if (v69)
              v71 = 0;
            else
              v71 = v68 == -8192;
            if (v71)
              v69 = v67;
            v72 = v66 + v70++;
            v66 = v72 & v65;
            v67 = (uint64_t *)(v64 + 72 * v66);
            v68 = *v67;
            if (v62 == *v67)
              goto LABEL_85;
          }
          if (v69)
            v73 = v69;
          else
            v73 = v67;
        }
        else
        {
          v73 = 0;
        }
        v67 = sub_1C53BF8A4(v170, &v172, v73);
        *v67 = v62;
        *(_OWORD *)(v67 + 5) = 0u;
        *(_OWORD *)(v67 + 1) = 0u;
        *(_OWORD *)(v67 + 3) = 0u;
        *(_OWORD *)(v67 + 7) = 0u;
        v67[5] = (uint64_t)(v67 + 7);
        *((_DWORD *)v67 + 13) = 2;
        v20 = v169;
LABEL_85:
        v74 = *((_DWORD *)v67 + 4);
        if (v74 < *((_DWORD *)v26 + 4))
          *((_DWORD *)v26 + 4) = v74;
        goto LABEL_87;
      }
      v75 = v42 + 1;
      while (1)
      {
        v76 = v174;
        if (v174 >= (unint64_t)HIDWORD(v174))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v173, (uint64_t)v175, v174 + 1, 8);
          v20 = v169;
          v76 = v174;
        }
        *((_QWORD *)v173 + v76) = v75;
        LODWORD(v174) = v174 + 1;
        v77 = (uint64_t *)(*a1 + 8 * *((unsigned int *)v75 + 1));
        v78 = *((_DWORD *)a1 + 10);
        if (!v78)
          break;
        v79 = a1[3];
        v80 = v78 - 1;
        v81 = ((*v77 >> 4) ^ (*v77 >> 9)) & v80;
        v82 = (uint64_t *)(v79 + 72 * v81);
        v83 = *v82;
        if (*v77 != *v82)
        {
          v84 = 0;
          v85 = 1;
          while (v83 != -4096)
          {
            if (v84)
              v86 = 0;
            else
              v86 = v83 == -8192;
            if (v86)
              v84 = v82;
            v87 = v81 + v85++;
            v81 = v87 & v80;
            v82 = (uint64_t *)(v79 + 72 * v81);
            v83 = *v82;
            if (*v77 == *v82)
              goto LABEL_107;
          }
          if (v84)
            v88 = v84;
          else
            v88 = v82;
          goto LABEL_106;
        }
LABEL_107:
        v75 = v82 + 1;
        if (*((_DWORD *)v82 + 3) < v20)
        {
          v89 = v82 + 3;
          v90 = *((_DWORD *)a1 + 10);
          if (!v90)
          {
            v100 = 0;
            goto LABEL_124;
          }
          v91 = a1[3];
          v92 = v90 - 1;
          v93 = ((*v89 >> 4) ^ (*v89 >> 9)) & v92;
          v94 = (uint64_t *)(v91 + 72 * v93);
          v95 = *v94;
          if (*v89 != *v94)
          {
            v96 = 0;
            v97 = 1;
            while (v95 != -4096)
            {
              if (v96)
                v98 = 0;
              else
                v98 = v95 == -8192;
              if (v98)
                v96 = v94;
              v99 = v93 + v97++;
              v93 = v99 & v92;
              v94 = (uint64_t *)(v91 + 72 * v93);
              v95 = *v94;
              if (*v89 == *v94)
                goto LABEL_125;
            }
            if (v96)
              v100 = v96;
            else
              v100 = v94;
LABEL_124:
            v94 = sub_1C53BF8A4(v170, v89, v100);
            *v94 = *v89;
            *(_OWORD *)(v94 + 5) = 0u;
            *(_OWORD *)(v94 + 3) = 0u;
            *(_OWORD *)(v94 + 1) = 0u;
            *(_OWORD *)(v94 + 7) = 0u;
            v94[5] = (uint64_t)(v94 + 7);
            *((_DWORD *)v94 + 13) = 2;
            v20 = v169;
          }
LABEL_125:
          v101 = v94 + 1;
          v102 = v174;
          while (2)
          {
            v103 = *((_QWORD *)v173 + v102 - 1);
            LODWORD(v174) = v102 - 1;
            *(_DWORD *)(v103 + 4) = *((_DWORD *)v75 + 1);
            v61 = (uint64_t *)(v103 + 16);
            v104 = *((_DWORD *)a1 + 10);
            if (v104)
            {
              v105 = a1[3];
              v106 = v104 - 1;
              v107 = ((*v61 >> 4) ^ (*v61 >> 9)) & v106;
              v108 = (uint64_t *)(v105 + 72 * v107);
              v109 = *v108;
              if (*v61 != *v108)
              {
                v110 = 0;
                v111 = 1;
                while (v109 != -4096)
                {
                  if (v110)
                    v112 = 0;
                  else
                    v112 = v109 == -8192;
                  if (v112)
                    v110 = v108;
                  v113 = v107 + v111++;
                  v107 = v113 & v106;
                  v108 = (uint64_t *)(v105 + 72 * v107);
                  v109 = *v108;
                  if (*v61 == *v108)
                    goto LABEL_141;
                }
                if (v110)
                  v114 = v110;
                else
                  v114 = v108;
LABEL_140:
                v108 = sub_1C53BF8A4(v170, (uint64_t *)(v103 + 16), v114);
                *v108 = *v61;
                *(_OWORD *)(v108 + 5) = 0u;
                *(_OWORD *)(v108 + 3) = 0u;
                *(_OWORD *)(v108 + 1) = 0u;
                *(_OWORD *)(v108 + 7) = 0u;
                v108[5] = (uint64_t)(v108 + 7);
                *((_DWORD *)v108 + 13) = 2;
                v20 = v169;
              }
LABEL_141:
              if (*((_DWORD *)v101 + 2) >= *((_DWORD *)v108 + 4))
                v101 = v108 + 1;
              else
                *v61 = v75[2];
              v102 = v174;
              v75 = (uint64_t *)v103;
              if (!(_DWORD)v174)
                goto LABEL_70;
              continue;
            }
            break;
          }
          v114 = 0;
          goto LABEL_140;
        }
      }
      v88 = 0;
LABEL_106:
      v82 = sub_1C53BF8A4(v170, v77, v88);
      *v82 = *v77;
      *(_OWORD *)(v82 + 5) = 0u;
      *(_OWORD *)(v82 + 3) = 0u;
      *(_OWORD *)(v82 + 1) = 0u;
      *(_OWORD *)(v82 + 7) = 0u;
      v82[5] = (uint64_t)(v82 + 7);
      *((_DWORD *)v82 + 13) = 2;
      v20 = v169;
      goto LABEL_107;
    }
LABEL_149:
    v20 = v167;
    v19 = v167 - 1;
  }
  while (((v167 - 1) & 0xFFFFFFFELL) != 0);
  if (v166 < 3)
    goto LABEL_225;
  v115 = 2;
  while (2)
  {
    v116 = *a1;
    v117 = *(_QWORD *)(*a1 + 8 * v115);
    v172 = v117;
    v118 = *((_DWORD *)a1 + 10);
    if (v118)
    {
      v119 = a1[3];
      v120 = v118 - 1;
      v121 = ((v117 >> 4) ^ (v117 >> 9)) & (v118 - 1);
      v122 = (uint64_t *)(v119 + 72 * v121);
      v123 = *v122;
      if (v117 == *v122)
      {
        v124 = (uint64_t *)(v116 + 8 * *((unsigned int *)v122 + 4));
        goto LABEL_172;
      }
      v125 = 0;
      v126 = 1;
      while (v123 != -4096)
      {
        if (v125)
          v127 = 0;
        else
          v127 = v123 == -8192;
        if (v127)
          v125 = v122;
        v128 = v121 + v126++;
        v121 = v128 & v120;
        v122 = (uint64_t *)(v119 + 72 * v121);
        v123 = *v122;
        if (v117 == *v122)
          goto LABEL_170;
      }
      if (v125)
        v129 = v125;
      else
        v129 = v122;
    }
    else
    {
      v129 = 0;
    }
    v122 = sub_1C53BF8A4(v170, &v172, v129);
    *v122 = v117;
    *(_OWORD *)(v122 + 5) = 0u;
    *(_OWORD *)(v122 + 3) = 0u;
    *(_OWORD *)(v122 + 7) = 0u;
    *(_OWORD *)(v122 + 1) = 0u;
    v122[5] = (uint64_t)(v122 + 7);
    *((_DWORD *)v122 + 13) = 2;
    v116 = *a1;
    v119 = a1[3];
    v118 = *((_DWORD *)a1 + 10);
LABEL_170:
    v124 = (uint64_t *)(v116 + 8 * *((unsigned int *)v122 + 4));
    if (!v118)
    {
      v137 = 0;
      goto LABEL_185;
    }
    v120 = v118 - 1;
LABEL_172:
    v130 = ((*v124 >> 4) ^ (*v124 >> 9)) & v120;
    v131 = (uint64_t *)(v119 + 72 * v130);
    v132 = *v131;
    if (*v124 != *v131)
    {
      v133 = 0;
      v134 = 1;
      while (v132 != -4096)
      {
        if (v133)
          v135 = 0;
        else
          v135 = v132 == -8192;
        if (v135)
          v133 = v131;
        v136 = v130 + v134++;
        v130 = v136 & v120;
        v131 = (uint64_t *)(v119 + 72 * v130);
        v132 = *v131;
        if (*v124 == *v131)
          goto LABEL_186;
      }
      if (v133)
        v137 = v133;
      else
        v137 = v131;
LABEL_185:
      v131 = sub_1C53BF8A4(v170, v124, v137);
      *v131 = *v124;
      *(_OWORD *)(v131 + 5) = 0u;
      *(_OWORD *)(v131 + 3) = 0u;
      *(_OWORD *)(v131 + 1) = 0u;
      *(_OWORD *)(v131 + 7) = 0u;
      v131[5] = (uint64_t)(v131 + 7);
      *((_DWORD *)v131 + 13) = 2;
    }
LABEL_186:
    v138 = *((_DWORD *)v131 + 2);
    v139 = v122 + 4;
    v140 = v122 + 4;
    while (2)
    {
      v141 = *v140;
      v171 = v141;
      v142 = *((_DWORD *)a1 + 10);
      v143 = v141 >> 4;
      if (!v142)
      {
        v153 = 0;
        goto LABEL_201;
      }
      v144 = a1[3];
      v145 = v142 - 1;
      v146 = (v143 ^ (v141 >> 9)) & v145;
      v147 = (uint64_t *)(v144 + 72 * v146);
      v148 = *v147;
      if (v141 != *v147)
      {
        v149 = 0;
        v150 = 1;
        while (v148 != -4096)
        {
          if (v149)
            v151 = 0;
          else
            v151 = v148 == -8192;
          if (v151)
            v149 = v147;
          v152 = v146 + v150++;
          v146 = v152 & v145;
          v147 = (uint64_t *)(v144 + 72 * v146);
          v148 = *v147;
          if (v141 == *v147)
            goto LABEL_202;
        }
        if (v149)
          v153 = v149;
        else
          v153 = v147;
LABEL_201:
        v147 = sub_1C53BF8A4(v170, &v171, v153);
        *v147 = v141;
        *(_OWORD *)(v147 + 5) = 0u;
        *(_OWORD *)(v147 + 1) = 0u;
        *(_OWORD *)(v147 + 3) = 0u;
        *(_OWORD *)(v147 + 7) = 0u;
        v147[5] = (uint64_t)(v147 + 7);
        *((_DWORD *)v147 + 13) = 2;
      }
LABEL_202:
      if (*((_DWORD *)v147 + 2) > v138)
      {
        v154 = *((_DWORD *)a1 + 10);
        if (v154)
        {
          v155 = a1[3];
          v156 = v154 - 1;
          v157 = v156 & (v143 ^ (v141 >> 9));
          v158 = (uint64_t *)(v155 + 72 * v157);
          v159 = *v158;
          if (v141 != *v158)
          {
            v160 = 0;
            v161 = 1;
            while (v159 != -4096)
            {
              if (v160)
                v162 = 0;
              else
                v162 = v159 == -8192;
              if (v162)
                v160 = v158;
              v163 = v157 + v161++;
              v157 = v163 & v156;
              v158 = (uint64_t *)(v155 + 72 * v157);
              v159 = *v158;
              if (v141 == *v158)
                goto LABEL_218;
            }
            if (v160)
              v164 = v160;
            else
              v164 = v158;
LABEL_217:
            v158 = sub_1C53BF8A4(v170, &v171, v164);
            *v158 = v141;
            *(_OWORD *)(v158 + 5) = 0u;
            *(_OWORD *)(v158 + 1) = 0u;
            *(_OWORD *)(v158 + 3) = 0u;
            *(_OWORD *)(v158 + 7) = 0u;
            v158[5] = (uint64_t)(v158 + 7);
            *((_DWORD *)v158 + 13) = 2;
          }
LABEL_218:
          v140 = v158 + 4;
          continue;
        }
        v164 = 0;
        goto LABEL_217;
      }
      break;
    }
    *v139 = v141;
    if (++v115 != (v165 >> 3))
      continue;
    break;
  }
LABEL_225:
  if (v173 != v175)
    free(v173);
}

uint64_t sub_1C53BF0B0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v5 = *a3;
  v8 = *(_QWORD *)(a1 + 24);
  result = a1 + 24;
  v7 = v8;
  v9 = *(_QWORD *)a1;
  v10 = (_QWORD *)(*(_QWORD *)a1 + 8);
  v11 = *(_DWORD *)(a1 + 40);
  if (v11)
  {
    v12 = v11 - 1;
    v13 = ((*v10 >> 4) ^ (*v10 >> 9)) & (v11 - 1);
    v14 = (uint64_t *)(v7 + 72 * v13);
    v15 = *v14;
    if (*v10 == *v14)
      goto LABEL_16;
    v16 = 0;
    v17 = 1;
    while (v15 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == -8192;
      if (v18)
        v16 = v14;
      v19 = v13 + v17++;
      v13 = v19 & v12;
      v14 = (uint64_t *)(v7 + 72 * (v19 & v12));
      v15 = *v14;
      if (*v10 == *v14)
        goto LABEL_16;
    }
    if (v16)
      v20 = v16;
    else
      v20 = v14;
  }
  else
  {
    v20 = 0;
  }
  result = (uint64_t)sub_1C53BF8A4(result, (uint64_t *)(*(_QWORD *)a1 + 8), v20);
  v14 = (uint64_t *)result;
  *(_QWORD *)result = *v10;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_QWORD *)(result + 40) = result + 56;
  *(_DWORD *)(result + 52) = 2;
  v9 = *(_QWORD *)a1;
LABEL_16:
  v14[4] = v5;
  v21 = *(_QWORD *)(a1 + 8) - v9;
  if (v21 != 8)
  {
    v22 = v21 >> 3;
    v23 = 1;
    while (1)
    {
      v40 = 0;
      v24 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v23);
      v40 = v24;
      v25 = *(_DWORD *)(a2 + 40);
      if (!v25)
        break;
      v26 = *(_QWORD *)(a2 + 24);
      v27 = v25 - 1;
      v28 = ((v24 >> 4) ^ (v24 >> 9)) & v27;
      result = v26 + 16 * v28;
      v29 = *(_QWORD *)result;
      if (v24 != *(_QWORD *)result)
      {
        v30 = 0;
        v31 = 1;
        while (v29 != -4096)
        {
          if (v30)
            v32 = 0;
          else
            v32 = v29 == -8192;
          if (v32)
            v30 = (_QWORD *)result;
          v33 = v28 + v31++;
          v28 = v33 & v27;
          result = v26 + 16 * v28;
          v29 = *(_QWORD *)result;
          if (v24 == *(_QWORD *)result)
            goto LABEL_33;
        }
        if (v30)
          v34 = v30;
        else
          v34 = (_QWORD *)result;
        goto LABEL_32;
      }
LABEL_33:
      if (!*(_QWORD *)(result + 8))
      {
        v35 = *(_QWORD *)(a1 + 24);
        v36 = *(_DWORD *)(a1 + 40);
        v37 = sub_1C4F4C0E0(v35, v36, v40);
        if ((uint64_t *)(v35 + 72 * v36) == v37)
          v38 = 0;
        else
          v38 = v37[4];
        v39 = sub_1C53C0954(a1, v38, a2);
        result = llvm::DominatorTreeBase<llvm::BasicBlock,false>::createChild(a2, v40, v39);
      }
      if (++v23 == v22)
        return result;
    }
    v34 = 0;
LABEL_32:
    result = (uint64_t)sub_1C52A334C(a2 + 24, (uint64_t)&v40, &v40, v34);
    *(_QWORD *)result = v40;
    *(_QWORD *)(result + 8) = 0;
    goto LABEL_33;
  }
  return result;
}

uint64_t sub_1C53BF2F0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int (*a4)(uint64_t, uint64_t), int a5, uint64_t a6)
{
  uint64_t v9;
  int v10;
  int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t *v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  _DWORD *v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t *v68;
  int v69;
  BOOL v70;
  unsigned int v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  unsigned int v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  _QWORD v87[66];

  v87[64] = *MEMORY[0x1E0C80C00];
  v80 = a2;
  v85 = v87;
  v87[0] = a2;
  v86 = 0x4000000001;
  v9 = *(_QWORD *)(a1 + 24);
  v77 = a1 + 24;
  v10 = *(_DWORD *)(a1 + 40);
  if (!v10)
    goto LABEL_15;
  v13 = v10 - 1;
  v14 = (v10 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v15 = (uint64_t *)(v9 + 72 * v14);
  v16 = *v15;
  if (*v15 == a2)
  {
LABEL_14:
    *(_DWORD *)(v9 + 72 * v14 + 12) = a5;
LABEL_15:
    v25 = 1;
    goto LABEL_16;
  }
  v17 = 1;
  v18 = *v15;
  v19 = v13 & ((a2 >> 4) ^ (a2 >> 9));
  do
  {
    if (v18 == -4096)
      goto LABEL_15;
    v20 = v19 + v17++;
    v19 = v20 & v13;
    v18 = *(_QWORD *)(v9 + 72 * v19);
  }
  while (v18 != a2);
  v21 = 0;
  v22 = 1;
  while (v16 != -4096)
  {
    if (v21)
      v23 = 0;
    else
      v23 = v16 == -8192;
    if (v23)
      v21 = v15;
    v24 = v14 + v22++;
    v14 = v24 & v13;
    v15 = (uint64_t *)(v9 + 72 * v14);
    v16 = *v15;
    if (*v15 == a2)
      goto LABEL_14;
  }
  if (v21)
    v74 = v21;
  else
    v74 = v15;
  v75 = sub_1C53BF8A4(v77, &v80, v74);
  *v75 = a2;
  *(_OWORD *)(v75 + 5) = 0u;
  *(_OWORD *)(v75 + 3) = 0u;
  *(_OWORD *)(v75 + 7) = 0u;
  *(_OWORD *)(v75 + 1) = 0u;
  v75[5] = (uint64_t)(v75 + 7);
  *((_DWORD *)v75 + 13) = 2;
  v25 = v86;
  *((_DWORD *)v75 + 3) = a5;
  if (v25)
  {
    do
    {
LABEL_16:
      v26 = *((_QWORD *)v85 + v25 - 1);
      LODWORD(v86) = v25 - 1;
      v79 = v26;
      v27 = *(_DWORD *)(a1 + 40);
      if (v27)
      {
        v28 = *(_QWORD *)(a1 + 24);
        v29 = v27 - 1;
        v30 = v29 & ((v26 >> 4) ^ (v26 >> 9));
        v31 = (uint64_t *)(v28 + 72 * v30);
        v32 = *v31;
        if (v26 == *v31)
          goto LABEL_31;
        v33 = 0;
        v34 = 1;
        while (v32 != -4096)
        {
          if (v33)
            v35 = 0;
          else
            v35 = v32 == -8192;
          if (v35)
            v33 = v31;
          v36 = v30 + v34++;
          v30 = v36 & v29;
          v31 = (uint64_t *)(v28 + 72 * v30);
          v32 = *v31;
          if (v26 == *v31)
            goto LABEL_31;
        }
        if (v33)
          v37 = v33;
        else
          v37 = v31;
      }
      else
      {
        v37 = 0;
      }
      v31 = sub_1C53BF8A4(v77, &v79, v37);
      *v31 = v26;
      *(_OWORD *)(v31 + 5) = 0u;
      *(_OWORD *)(v31 + 1) = 0u;
      *(_OWORD *)(v31 + 3) = 0u;
      *(_OWORD *)(v31 + 7) = 0u;
      v31[5] = (uint64_t)(v31 + 7);
      *((_DWORD *)v31 + 13) = 2;
LABEL_31:
      if (!*((_DWORD *)v31 + 2))
      {
        a3 = (a3 + 1);
        *((_DWORD *)v31 + 4) = a3;
        *((_DWORD *)v31 + 2) = a3;
        v31[3] = v26;
        v39 = *(uint64_t **)(a1 + 8);
        v38 = *(_QWORD *)(a1 + 16);
        if ((unint64_t)v39 >= v38)
        {
          v41 = *(uint64_t **)a1;
          v42 = ((uint64_t)v39 - *(_QWORD *)a1) >> 3;
          v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 61)
            abort();
          v44 = v38 - (_QWORD)v41;
          if (v44 >> 2 > v43)
            v43 = v44 >> 2;
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
            v45 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v45 = v43;
          if (v45)
          {
            if (v45 >> 61)
              sub_1C4764EE4();
            v46 = (char *)operator new(8 * v45);
          }
          else
          {
            v46 = 0;
          }
          v47 = (uint64_t *)&v46[8 * v42];
          *v47 = v26;
          v40 = v47 + 1;
          if (v39 != v41)
          {
            do
            {
              v48 = *--v39;
              *--v47 = v48;
            }
            while (v39 != v41);
            v39 = *(uint64_t **)a1;
          }
          *(_QWORD *)a1 = v47;
          *(_QWORD *)(a1 + 8) = v40;
          *(_QWORD *)(a1 + 16) = &v46[8 * v45];
          if (v39)
            operator delete(v39);
        }
        else
        {
          *v39 = v26;
          v40 = v39 + 1;
        }
        *(_QWORD *)(a1 + 8) = v40;
        v49 = *(_QWORD *)(a1 + 48);
        if (v49)
          sub_1C4ED7A6C(*(int **)(v49 + 8), v79, (uint64_t)&v82);
        else
          sub_1C53BFC54((char **)&v82, v79);
        v50 = v83;
        if (a6 && v83 >= 2uLL)
        {
          v81 = a6;
          sub_1C53BFDE8((uint64_t)v82, (uint64_t *)v82 + v83, &v81, 126 - 2 * __clz(v83), 1);
          v50 = v83;
        }
        v51 = (uint64_t *)v82;
        v52 = (uint64_t *)((char *)v82 + 8 * v50);
        if (v50)
        {
          while (1)
          {
            v53 = *v51;
            v81 = v53;
            v54 = *(_QWORD *)(a1 + 24);
            v55 = *(_DWORD *)(a1 + 40);
            v56 = sub_1C4F4C0E0(v54, v55, v53);
            if ((uint64_t *)(v54 + 72 * v55) == v56)
            {
              v58 = v79;
            }
            else
            {
              v57 = v56;
              v58 = v79;
              if (*((_DWORD *)v56 + 2))
              {
                if (v53 != v79)
                {
                  v59 = v56 + 5;
                  v61 = v56 + 6;
                  v60 = *((unsigned int *)v56 + 12);
                  v62 = *((unsigned int *)v56 + 13);
                  goto LABEL_80;
                }
                goto LABEL_83;
              }
            }
            if (a4(v58, v53))
            {
              v63 = *(_DWORD *)(a1 + 40);
              if (!v63)
              {
                v72 = 0;
                goto LABEL_76;
              }
              v64 = *(_QWORD *)(a1 + 24);
              v65 = v63 - 1;
              v66 = v65 & ((v53 >> 4) ^ (v53 >> 9));
              v57 = (uint64_t *)(v64 + 72 * v66);
              v67 = *v57;
              if (v53 != *v57)
              {
                v68 = 0;
                v69 = 1;
                while (v67 != -4096)
                {
                  if (v68)
                    v70 = 0;
                  else
                    v70 = v67 == -8192;
                  if (v70)
                    v68 = v57;
                  v71 = v66 + v69++;
                  v66 = v71 & v65;
                  v57 = (uint64_t *)(v64 + 72 * v66);
                  v67 = *v57;
                  if (v53 == *v57)
                    goto LABEL_77;
                }
                if (v68)
                  v72 = v68;
                else
                  v72 = v57;
LABEL_76:
                v57 = sub_1C53BF8A4(v77, &v81, v72);
                *v57 = v53;
                *(_OWORD *)(v57 + 5) = 0u;
                *(_OWORD *)(v57 + 1) = 0u;
                *(_OWORD *)(v57 + 3) = 0u;
                *(_OWORD *)(v57 + 7) = 0u;
                v57[5] = (uint64_t)(v57 + 7);
                *((_DWORD *)v57 + 13) = 2;
              }
LABEL_77:
              v73 = v86;
              if (v86 >= (unint64_t)HIDWORD(v86))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, (uint64_t)v87, v86 + 1, 8);
                v73 = v86;
              }
              *((_QWORD *)v85 + v73) = v53;
              LODWORD(v86) = v86 + 1;
              v61 = v57 + 6;
              v60 = *((unsigned int *)v57 + 12);
              *((_DWORD *)v57 + 3) = a3;
              v59 = v57 + 5;
              v62 = *((unsigned int *)v57 + 13);
LABEL_80:
              if (v60 >= v62)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v59, (uint64_t)(v57 + 7), v60 + 1, 8);
                v60 = *((unsigned int *)v57 + 12);
              }
              *(_QWORD *)(*v59 + 8 * v60) = v58;
              ++*v61;
            }
LABEL_83:
            if (++v51 == v52)
            {
              v51 = (uint64_t *)v82;
              break;
            }
          }
        }
        if (v51 != &v84)
          free(v51);
      }
      v25 = v86;
    }
    while ((_DWORD)v86);
  }
  if (v85 != v87)
    free(v85);
  return a3;
}

uint64_t *sub_1C53BF8A4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t *v16;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    {
      sub_1C53BF9DC((uint64_t *)a1, v6);
      v16 = 0;
      sub_1C519A9D4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v16);
      a3 = v16;
    }
LABEL_4:
    v7 = *a3;
    goto LABEL_5;
  }
  sub_1C53BF9DC((uint64_t *)a1, 2 * v6);
  v7 = *a2;
  v9 = *(_DWORD *)(a1 + 16) - 1;
  v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & v9;
  a3 = (uint64_t *)(*(_QWORD *)a1 + 72 * v10);
  v11 = *a3;
  if (*a2 != *a3)
  {
    v12 = 0;
    v13 = 1;
    while (v11 != -4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == -8192;
      if (v14)
        v12 = a3;
      v15 = v10 + v13++;
      v10 = v15 & v9;
      a3 = (uint64_t *)(*(_QWORD *)a1 + 72 * v10);
      v11 = *a3;
      if (v7 == *a3)
        goto LABEL_5;
    }
    if (v12)
      a3 = v12;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C53BF9DC(uint64_t *a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;

  v3 = *((_DWORD *)a1 + 4);
  v4 = (uint64_t *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(72 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 72 * v10;
      do
      {
        *result = -4096;
        result += 9;
        v11 -= 72;
      }
      while (v11);
    }
    if (!v3)
LABEL_43:
      JUMPOUT(0x1CAA32FB4);
    v12 = &v4[9 * v3];
    v13 = v4;
    while (1)
    {
      v14 = *v13;
      if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        break;
LABEL_33:
      v13 += 9;
      if (v13 == v12)
        goto LABEL_43;
    }
    v15 = *((_DWORD *)a1 + 4) - 1;
    v16 = v15 & ((v14 >> 4) ^ (v14 >> 9));
    v17 = *a1 + 72 * v16;
    v18 = *(_QWORD *)v17;
    if (v14 != *(_QWORD *)v17)
    {
      v19 = 0;
      v20 = 1;
      while (v18 != -4096)
      {
        if (v19)
          v21 = 0;
        else
          v21 = v18 == -8192;
        if (v21)
          v19 = v17;
        v22 = v16 + v20++;
        v16 = v22 & v15;
        v17 = *a1 + 72 * v16;
        v18 = *(_QWORD *)v17;
        if (v14 == *(_QWORD *)v17)
          goto LABEL_23;
      }
      if (v19)
        v17 = v19;
    }
LABEL_23:
    *(_QWORD *)v17 = v14;
    v23 = (void *)(v17 + 56);
    v24 = *(_OWORD *)(v13 + 1);
    v25 = *(_OWORD *)(v13 + 3);
    *(_QWORD *)(v17 + 40) = v17 + 56;
    *(_OWORD *)(v17 + 8) = v24;
    *(_OWORD *)(v17 + 24) = v25;
    *(_QWORD *)(v17 + 48) = 0x200000000;
    v26 = *((unsigned int *)v13 + 12);
    if (!(_DWORD)v26 || (uint64_t *)v17 == v13)
    {
LABEL_31:
      ++*((_DWORD *)a1 + 2);
      v29 = (uint64_t *)v13[5];
      if (v29 != v13 + 7)
        free(v29);
      goto LABEL_33;
    }
    v27 = (uint64_t *)v13[5];
    if (v27 != v13 + 7)
    {
      *(_QWORD *)(v17 + 40) = v27;
      v30 = *((_DWORD *)v13 + 13);
      *(_DWORD *)(v17 + 48) = v26;
      *(_DWORD *)(v17 + 52) = v30;
      v13[5] = (uint64_t)(v13 + 7);
      *((_DWORD *)v13 + 13) = 0;
      goto LABEL_30;
    }
    if (v26 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v17 + 40, v17 + 56, v26, 8);
      v28 = *((unsigned int *)v13 + 12);
      if (!(_DWORD)v28)
        goto LABEL_29;
      v27 = (uint64_t *)v13[5];
      v23 = *(void **)(v17 + 40);
    }
    else
    {
      v28 = *((unsigned int *)v13 + 12);
    }
    memcpy(v23, v27, 8 * v28);
LABEL_29:
    *(_DWORD *)(v17 + 48) = v26;
LABEL_30:
    *((_DWORD *)v13 + 12) = 0;
    goto LABEL_31;
  }
  a1[1] = 0;
  v31 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v31)
  {
    v32 = 72 * v31;
    do
    {
      *result = -4096;
      result += 9;
      v32 -= 72;
    }
    while (v32);
  }
  return result;
}

uint64_t sub_1C53BFC54(char **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  _QWORD v18[4];
  _QWORD v19[4];

  v3 = *(_QWORD *)(a2 + 40);
  if (v3 == a2 + 40)
  {
LABEL_27:
    v4 = 0;
    v5 = 0;
    v8 = 0;
  }
  else
  {
    v4 = v3 - 24;
    if (v3)
      v5 = v3 - 24;
    else
      v5 = 0;
    v6 = *(unsigned __int8 *)(v5 + 16);
    v7 = v6 - 29;
    if (v6 == 30)
    {
      if ((*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 3)
        LODWORD(v8) = 2;
      else
        LODWORD(v8) = 1;
    }
    else
    {
      LODWORD(v8) = 0;
      switch(v7)
      {
        case 0:
        case 5:
        case 6:
          goto LABEL_9;
        case 1:
          __break(1u);
          break;
        case 2:
          LODWORD(v8) = (*(_DWORD *)(v5 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_9;
        case 3:
        case 9:
          break;
        case 4:
          LODWORD(v8) = 2;
          goto LABEL_9;
        case 7:
          LODWORD(v8) = *(_WORD *)(v5 + 18) & 1;
          goto LABEL_9;
        case 8:
          LODWORD(v8) = 1;
          goto LABEL_9;
        case 10:
          LODWORD(v8) = *(_DWORD *)(v5 + 80) + 1;
          goto LABEL_9;
        default:
          goto LABEL_27;
      }
      LODWORD(v8) = (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) - 1;
    }
LABEL_9:
    v8 = v8;
  }
  *a1 = (char *)(a1 + 2);
  a1[1] = (char *)0x800000000;
  v19[0] = v4;
  v19[1] = v8;
  v19[2] = v4;
  v19[3] = v8;
  v18[0] = v5;
  v18[1] = 0;
  v18[2] = v5;
  v18[3] = 0;
  result = sub_1C4ED7D94((uint64_t)a1, (uint64_t)v19, (uint64_t)v18);
  v10 = *a1;
  v11 = *((unsigned int *)a1 + 2);
  v12 = *a1;
  if ((_DWORD)v11)
  {
    v13 = 8 * v11;
    v12 = *a1;
    while (*(_QWORD *)v12)
    {
      v12 += 8;
      v13 -= 8;
      if (!v13)
      {
        v12 = &(*a1)[8 * v11];
        break;
      }
    }
  }
  v14 = (v12 - v10) >> 3;
  v15 = v12 + 8;
  if (v14 != v11 && v15 != &(*a1)[8 * v11])
  {
    v17 = 8 * v11 - 8 * v14 - 8;
    do
    {
      if (*(_QWORD *)v15)
      {
        *(_QWORD *)v12 = *(_QWORD *)v15;
        v12 += 8;
      }
      v15 += 8;
      v17 -= 8;
    }
    while (v17);
    v10 = *a1;
  }
  *((_DWORD *)a1 + 2) = (unint64_t)(v12 - v10) >> 3;
  return result;
}

uint64_t sub_1C53BFDE8(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  BOOL v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  BOOL v41;
  char v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  int64_t v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = a2;
  v10 = a2 - 1;
  v11 = v8;
  while (2)
  {
    v8 = v11;
    v12 = (char *)v9 - (char *)v11;
    v13 = v9 - v11;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = sub_1C62377A8(a3, *(a2 - 1), *v11);
        if ((_DWORD)result)
        {
          v80 = *v11;
          *v11 = *(a2 - 1);
          *(a2 - 1) = v80;
        }
        return result;
      case 3:
        return sub_1C53C0538(v11, v11 + 1, v10, a3);
      case 4:
        return sub_1C53C07C4(v11, v11 + 1, v11 + 2, v10, a3);
      case 5:
        return sub_1C53C0878(v11, v11 + 1, v11 + 2, v11 + 3, v10, a3);
      default:
        if (v12 <= 191)
        {
          v40 = v11 + 1;
          v41 = v11 == v9 || v40 == v9;
          v42 = v41;
          if ((a5 & 1) != 0)
          {
            if ((v42 & 1) == 0)
            {
              v43 = 0;
              v44 = v11;
              do
              {
                v46 = *v44;
                v45 = v44[1];
                v44 = v40;
                result = sub_1C62377A8(a3, v45, v46);
                if ((_DWORD)result)
                {
                  v47 = *v44;
                  v48 = v43;
                  while (1)
                  {
                    *(uint64_t *)((char *)v11 + v48 + 8) = *(uint64_t *)((char *)v11 + v48);
                    if (!v48)
                      break;
                    result = sub_1C62377A8(a3, v47, *(uint64_t *)((char *)v11 + v48 - 8));
                    v48 -= 8;
                    if ((result & 1) == 0)
                    {
                      v49 = (uint64_t *)((char *)v11 + v48 + 8);
                      goto LABEL_73;
                    }
                  }
                  v49 = v11;
LABEL_73:
                  *v49 = v47;
                }
                v40 = v44 + 1;
                v43 += 8;
              }
              while (v44 + 1 != a2);
            }
          }
          else if ((v42 & 1) == 0)
          {
            do
            {
              v75 = *v8;
              v74 = v8[1];
              v8 = v40;
              result = sub_1C62377A8(a3, v74, v75);
              if ((_DWORD)result)
              {
                v76 = *v8;
                v77 = v8;
                do
                {
                  v78 = v77;
                  v79 = *--v77;
                  *v78 = v79;
                  result = sub_1C62377A8(a3, v76, *(v78 - 2));
                }
                while ((result & 1) != 0);
                *v77 = v76;
              }
              v40 = v8 + 1;
            }
            while (v8 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v11 != v9)
          {
            v50 = (unint64_t)(v13 - 2) >> 1;
            v51 = v50;
            do
            {
              v52 = v51;
              if (v50 >= v51)
              {
                v53 = (2 * v51) | 1;
                v54 = &v8[v53];
                if (2 * v51 + 2 < v13 && sub_1C62377A8(a3, *v54, v54[1]))
                {
                  ++v54;
                  v53 = 2 * v52 + 2;
                }
                v55 = &v8[v52];
                result = sub_1C62377A8(a3, *v54, *v55);
                if ((result & 1) == 0)
                {
                  v81 = *v55;
                  do
                  {
                    v56 = v54;
                    *v55 = *v54;
                    if (v50 < v53)
                      break;
                    v57 = (2 * v53) | 1;
                    v54 = &v8[v57];
                    v58 = 2 * v53 + 2;
                    if (v58 < v13 && sub_1C62377A8(a3, *v54, v54[1]))
                    {
                      ++v54;
                      v57 = v58;
                    }
                    result = sub_1C62377A8(a3, *v54, v81);
                    v55 = v56;
                    v53 = v57;
                  }
                  while (!(_DWORD)result);
                  *v56 = v81;
                }
              }
              v51 = v52 - 1;
            }
            while (v52);
            do
            {
              v59 = 0;
              v60 = *v8;
              v61 = v13 - 2;
              if (v13 < 2)
                v61 = v13 - 1;
              v62 = v61 >> 1;
              v63 = v8;
              do
              {
                v64 = &v63[v59 + 1];
                v65 = (2 * v59) | 1;
                v66 = 2 * v59 + 2;
                if (v66 < v13)
                {
                  result = sub_1C62377A8(a3, *v64, v63[v59 + 2]);
                  if ((_DWORD)result)
                  {
                    ++v64;
                    v65 = v66;
                  }
                }
                *v63 = *v64;
                v63 = v64;
                v59 = v65;
              }
              while (v65 <= v62);
              v67 = a2 - 1;
              v41 = v64 == --a2;
              if (v41)
              {
                *v64 = v60;
              }
              else
              {
                *v64 = *v67;
                *v67 = v60;
                v68 = (char *)v64 - (char *)v8 + 8;
                if (v68 >= 9)
                {
                  v69 = (((unint64_t)v68 >> 3) - 2) >> 1;
                  v70 = &v8[v69];
                  result = sub_1C62377A8(a3, *v70, *v64);
                  if ((_DWORD)result)
                  {
                    v71 = *v64;
                    do
                    {
                      v72 = v70;
                      *v64 = *v70;
                      if (!v69)
                        break;
                      v69 = (v69 - 1) >> 1;
                      v70 = &v8[v69];
                      result = sub_1C62377A8(a3, *v70, v71);
                      v64 = v72;
                    }
                    while ((result & 1) != 0);
                    *v72 = v71;
                  }
                }
              }
            }
            while (v13-- > 2);
          }
          return result;
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = &v11[(unint64_t)v13 >> 1];
        if ((unint64_t)v12 < 0x401)
        {
          sub_1C53C0538(&v8[(unint64_t)v13 >> 1], v8, v10, a3);
        }
        else
        {
          sub_1C53C0538(v8, &v8[(unint64_t)v13 >> 1], v10, a3);
          sub_1C53C0538(v8 + 1, v15 - 1, a2 - 2, a3);
          sub_1C53C0538(v8 + 2, &v8[v14 + 1], a2 - 3, a3);
          sub_1C53C0538(v15 - 1, &v8[(unint64_t)v13 >> 1], &v8[v14 + 1], a3);
          v16 = *v8;
          *v8 = *v15;
          *v15 = v16;
        }
        --a4;
        if ((a5 & 1) == 0 && !sub_1C62377A8(a3, *(v8 - 1), *v8))
        {
          v31 = *v8;
          result = sub_1C62377A8(a3, *v8, *v10);
          if ((result & 1) != 0)
          {
            v11 = v8;
            do
            {
              v32 = v11[1];
              ++v11;
              result = sub_1C62377A8(a3, v31, v32);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v39 = v8 + 1;
            do
            {
              v11 = v39;
              if (v39 >= v9)
                break;
              ++v39;
              result = sub_1C62377A8(a3, v31, *v11);
            }
            while (!(_DWORD)result);
          }
          v33 = v9;
          if (v11 < v9)
          {
            v33 = v9;
            do
            {
              v34 = *--v33;
              result = sub_1C62377A8(a3, v31, v34);
            }
            while ((result & 1) != 0);
          }
          while (v11 < v33)
          {
            v35 = *v11;
            *v11 = *v33;
            *v33 = v35;
            do
            {
              v36 = v11[1];
              ++v11;
            }
            while (!sub_1C62377A8(a3, v31, v36));
            do
            {
              v37 = *--v33;
              result = sub_1C62377A8(a3, v31, v37);
            }
            while ((result & 1) != 0);
          }
          v38 = v11 - 1;
          if (v11 - 1 != v8)
            *v8 = *v38;
          a5 = 0;
          *v38 = v31;
          continue;
        }
        v17 = 0;
        v18 = *v8;
        while (sub_1C62377A8(a3, v8[++v17], v18))
          ;
        v20 = &v8[v17];
        if (v17 == 1)
        {
          v9 = a2;
          do
          {
            if (v20 >= v9)
              break;
            v30 = *--v9;
          }
          while (!sub_1C62377A8(a3, v30, v18));
        }
        else
        {
          do
            v21 = *--v9;
          while (!sub_1C62377A8(a3, v21, v18));
        }
        if (v20 >= v9)
        {
          v27 = v20 - 1;
        }
        else
        {
          v22 = &v8[v17];
          v23 = v9;
          do
          {
            v24 = *v22;
            *v22 = *v23;
            *v23 = v24;
            do
            {
              v25 = v22[1];
              ++v22;
            }
            while (sub_1C62377A8(a3, v25, v18));
            do
              v26 = *--v23;
            while (!sub_1C62377A8(a3, v26, v18));
          }
          while (v22 < v23);
          v27 = v22 - 1;
        }
        if (v27 != v8)
          *v8 = *v27;
        *v27 = v18;
        v28 = v20 >= v9;
        v9 = a2;
        if (!v28)
        {
LABEL_28:
          result = sub_1C53BFDE8(v8, v27, a3, a4, a5 & 1);
          a5 = 0;
          v11 = v27 + 1;
          continue;
        }
        v29 = sub_1C53C061C(v8, v27, a3);
        v11 = v27 + 1;
        result = sub_1C53C061C(v27 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_28;
        }
        a2 = v27;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1C53C0538(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL v8;
  _BOOL8 result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = sub_1C62377A8(a4, *a2, *a1);
  result = sub_1C62377A8(a4, *a3, *a2);
  if (v8)
  {
    v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      result = sub_1C62377A8(a4, *a3, v10);
      if (result)
      {
        v11 = *a2;
        *a2 = *a3;
        *a3 = v11;
      }
    }
  }
  else if (result)
  {
    v12 = *a2;
    *a2 = *a3;
    *a3 = v12;
    result = sub_1C62377A8(a4, *a2, *a1);
    if (result)
    {
      v13 = *a1;
      *a1 = *a2;
      *a2 = v13;
    }
  }
  return result;
}

BOOL sub_1C53C061C(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sub_1C62377A8(a3, *(a2 - 1), *a1))
      {
        v16 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v16;
      }
      return 1;
    case 3:
      sub_1C53C0538(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1C53C07C4(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1C53C0878(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C53C0538(a1, a1 + 1, a1 + 2, a3);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    if (sub_1C62377A8(a3, *v9, *v8))
    {
      v12 = *v9;
      v13 = v10;
      while (1)
      {
        v14 = (char *)a1 + v13;
        *(uint64_t *)((char *)a1 + v13 + 24) = *(uint64_t *)((char *)a1 + v13 + 16);
        if (v13 == -16)
          break;
        v13 -= 8;
        if (!sub_1C62377A8(a3, v12, *((_QWORD *)v14 + 1)))
        {
          v15 = (uint64_t *)((char *)a1 + v13 + 24);
          goto LABEL_11;
        }
      }
      v15 = a1;
LABEL_11:
      *v15 = v12;
      if (++v11 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v10 += 8;
    result = 1;
    if (++v9 == a2)
      return result;
  }
}

BOOL sub_1C53C07C4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_1C53C0538(a1, a2, a3, a5);
  result = sub_1C62377A8(a5, *a4, *a3);
  if (result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = sub_1C62377A8(a5, *a3, *a2);
    if (result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = sub_1C62377A8(a5, *a2, *a1);
      if (result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

BOOL sub_1C53C0878(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  _BOOL8 result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_1C53C07C4(a1, a2, a3, a4, a6);
  result = sub_1C62377A8(a6, *a5, *a4);
  if (result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = sub_1C62377A8(a6, *a4, *a3);
    if (result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = sub_1C62377A8(a6, *a3, *a2);
      if (result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = sub_1C62377A8(a6, *a2, *a1);
        if (result)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C53C0954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(unsigned int *)(a3 + 40);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)(a3 + 24);
    LODWORD(v8) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v9 = (uint64_t *)(v7 + 16 * v8);
    v10 = *v9;
    if (*v9 == a2)
    {
LABEL_7:
      if (v9 != (uint64_t *)(v7 + 16 * v6))
      {
        result = v9[1];
        if (result)
          return result;
      }
    }
    else
    {
      v11 = 1;
      while (v10 != -4096)
      {
        v12 = v8 + v11++;
        v8 = v12 & (v6 - 1);
        v10 = *(_QWORD *)(v7 + 16 * v8);
        if (v10 == a2)
        {
          v9 = (uint64_t *)(v7 + 16 * v8);
          goto LABEL_7;
        }
      }
    }
  }
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_DWORD *)(a1 + 40);
  v16 = sub_1C4F4C0E0(v14, v15, a2);
  if ((uint64_t *)(v14 + 72 * v15) == v16)
    v17 = 0;
  else
    v17 = v16[4];
  v18 = sub_1C53C0954(a1, v17, a3);
  return llvm::DominatorTreeBase<llvm::BasicBlock,false>::createChild(a3, a2, v18);
}

void sub_1C53C0A54(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)();
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  unsigned int v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  int v55;
  BOOL v56;
  unsigned int v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  int v61;
  _QWORD *v62;
  int v63;
  int v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  int v70;
  int v71;
  _QWORD *v72;
  unsigned int v73;
  _QWORD *v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t (*v88)();
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *__p;
  char *v96;
  _QWORD *v97;
  uint64_t v98;
  int32x2_t v99;
  unsigned int v100;
  uint64_t v101;
  void *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD v105[2];
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  void *__src;
  unsigned int v110;
  _QWORD v111[10];

  v111[8] = *MEMORY[0x1E0C80C00];
  v93 = a3 + 16;
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x400000000;
  v6 = (char *)operator new(8uLL);
  __p = v6;
  *(_QWORD *)v6 = 0;
  v96 = v6 + 8;
  v97 = v6 + 8;
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v101 = a2;
  sub_1C53C203C((char **)&__p);
  v94 = a1;
  v7 = *(_QWORD *)(a1 + 80);
  v8 = v7 + 72;
  v9 = *(_QWORD *)(v7 + 80);
  if (v9 == v7 + 72)
    goto LABEL_17;
  v10 = 1;
  v11 = 1;
  do
  {
    if (v9)
      v12 = v9 - 24;
    else
      v12 = 0;
    if (a2)
      sub_1C53C3160((uint64_t)&__src, *(_QWORD *)(a2 + 8), v12);
    else
      sub_1C53C3404((char **)&__src, v12);
    v13 = v110;
    if (__src != v111)
      free(__src);
    if (!v13)
    {
      v14 = *(unsigned int *)(a3 + 8);
      if (v14 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v93, v14 + 1, 8);
        v14 = *(unsigned int *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v14) = v12;
      ++*(_DWORD *)(a3 + 8);
      v11 = sub_1C53C21E0((uint64_t)&__p, v12, v11, (unsigned int (*)(uint64_t, uint64_t))sub_1C53C12D0, 1, 0);
    }
    v9 = *(_QWORD *)(v9 + 8);
    ++v10;
  }
  while (v9 != v8);
  if (v10 == (_DWORD)v11)
    goto LABEL_17;
  LOBYTE(v102) = 0;
  LOBYTE(v105[0]) = 0;
  v20 = *(_QWORD *)(a1 + 80);
  v21 = v20 + 72;
  v22 = *(_QWORD *)(v20 + 80);
  if (v22 != v20 + 72)
  {
    v23 = sub_1C53C12D0;
    while (1)
    {
      if (v22)
        v24 = v22 - 24;
      else
        v24 = 0;
      if (!v100)
        goto LABEL_42;
      v25 = ((v24 >> 4) ^ (v24 >> 9)) & (v100 - 1);
      v26 = *(_QWORD *)(v98 + 72 * v25);
      if (v24 != v26)
        break;
LABEL_36:
      v22 = *(_QWORD *)(v22 + 8);
      if (v22 == v21)
      {
        if (LOBYTE(v105[0]))
          MEMORY[0x1CAA32FB4](v102, 8);
        goto LABEL_106;
      }
    }
    v27 = 1;
    while (v26 != -4096)
    {
      v28 = v25 + v27++;
      v25 = v28 & (v100 - 1);
      v26 = *(_QWORD *)(v98 + 72 * v25);
      if (v24 == v26)
        goto LABEL_36;
    }
LABEL_42:
    if (LOBYTE(v105[0]))
    {
LABEL_43:
      v29 = sub_1C53C2798((uint64_t)&__p, v24, v11, v11, (uint64_t)&v102);
      v30 = *((_QWORD *)__p + v29);
      v31 = *(unsigned int *)(a3 + 8);
      if (v31 >= *(unsigned int *)(a3 + 12))
      {
        v83 = *((_QWORD *)__p + v29);
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v93, v31 + 1, 8);
        v30 = v83;
        v31 = *(unsigned int *)(a3 + 8);
      }
      v32 = v29;
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v31) = v30;
      ++*(_DWORD *)(a3 + 8);
      if (v29 > v11)
      {
        do
        {
          if (v100)
          {
            v33 = *((_QWORD *)__p + v32);
            v34 = ((v33 >> 4) ^ (v33 >> 9)) & (v100 - 1);
            v35 = (uint64_t *)(v98 + 72 * v34);
            v36 = *v35;
            if (*v35 == v33)
            {
LABEL_51:
              v39 = (uint64_t *)v35[5];
              if (v39 != v35 + 7)
              {
                v88 = v23;
                v89 = v21;
                v90 = v30;
                free(v39);
                v30 = v90;
                v21 = v89;
                v23 = v88;
              }
              *v35 = -8192;
              v99 = vadd_s32(v99, (int32x2_t)0x1FFFFFFFFLL);
            }
            else
            {
              v37 = 1;
              while (v36 != -4096)
              {
                v38 = v34 + v37++;
                v34 = v38 & (v100 - 1);
                v35 = (uint64_t *)(v98 + 72 * v34);
                v36 = *v35;
                if (*v35 == v33)
                  goto LABEL_51;
              }
            }
          }
          v96 -= 8;
          --v32;
        }
        while (v11 < v32);
      }
      v11 = sub_1C53C21E0((uint64_t)&__p, v30, v11, (unsigned int (*)(uint64_t, uint64_t))v23, 1, 0);
      goto LABEL_36;
    }
    v92 = v24;
    LOBYTE(v105[0]) = 1;
    v102 = 0;
    v103 = 0;
    LODWORD(v104) = 0;
    MEMORY[0x1CAA32FB4](0, 8);
    v40 = *(_QWORD *)(v94 + 80);
    v41 = v40 + 72;
    v42 = *(_QWORD *)(v40 + 80);
    if (v42 == v40 + 72)
    {
LABEL_90:
      v60 = v40 + 72;
      v24 = v92;
      v23 = sub_1C53C12D0;
      if (v41 != v60)
      {
        v61 = 0;
        v62 = v102;
        v63 = (int)v104;
        v64 = (_DWORD)v104 - 1;
        v65 = (char *)v102 + 16 * v104;
        do
        {
          v66 = v41 - 24;
          if (!v41)
            v66 = 0;
          ++v61;
          if (v63)
          {
            LODWORD(v67) = ((v66 >> 4) ^ (v66 >> 9)) & v64;
            v68 = (char *)&v62[2 * v67];
            v69 = *(_QWORD *)v68;
            if (v66 == *(_QWORD *)v68)
            {
LABEL_96:
              if (v68 != v65)
                *((_DWORD *)v68 + 2) = v61;
            }
            else
            {
              v70 = 1;
              while (v69 != -4096)
              {
                v71 = v67 + v70++;
                v67 = v71 & v64;
                v69 = v62[2 * v67];
                if (v66 == v69)
                {
                  v68 = (char *)&v62[2 * v67];
                  goto LABEL_96;
                }
              }
            }
          }
          v41 = *(_QWORD *)(v41 + 8);
        }
        while (v41 != v60);
      }
      goto LABEL_43;
    }
LABEL_57:
    if (v42)
      v43 = v42 - 24;
    else
      v43 = 0;
    if (v100)
    {
      v44 = ((v43 >> 4) ^ (v43 >> 9)) & (v100 - 1);
      v45 = *(_QWORD *)(v98 + 72 * v44);
      if (v43 == v45)
        goto LABEL_88;
      v46 = 1;
      while (v45 != -4096)
      {
        v47 = v44 + v46++;
        v44 = v47 & (v100 - 1);
        v45 = *(_QWORD *)(v98 + 72 * v44);
        if (v43 == v45)
          goto LABEL_88;
      }
    }
    if (v101)
      sub_1C53C3160((uint64_t)&__src, *(_QWORD *)(v101 + 8), v43);
    else
      sub_1C53C3404((char **)&__src, v43);
    v48 = (uint64_t *)__src;
    v49 = (uint64_t *)((char *)__src + 8 * v110);
    if (!v110)
      goto LABEL_86;
    while (1)
    {
      v108 = 0;
      v50 = *v48;
      v108 = *v48;
      if (!(_DWORD)v104)
        break;
      v51 = ((_DWORD)v104 - 1) & ((v50 >> 4) ^ (v50 >> 9));
      v52 = (char *)v102 + 16 * v51;
      v53 = *v52;
      if (v50 != *v52)
      {
        v54 = 0;
        v55 = 1;
        while (v53 != -4096)
        {
          if (v54)
            v56 = 0;
          else
            v56 = v53 == -8192;
          if (v56)
            v54 = v52;
          v57 = v51 + v55++;
          v51 = v57 & ((_DWORD)v104 - 1);
          v52 = (char *)v102 + 16 * v51;
          v53 = *v52;
          if (v50 == *v52)
            goto LABEL_71;
        }
        if (v54)
          v58 = v54;
        else
          v58 = v52;
        goto LABEL_85;
      }
LABEL_71:
      if (++v48 == v49)
      {
        v48 = (uint64_t *)__src;
LABEL_86:
        if (v48 != v111)
          free(v48);
LABEL_88:
        v42 = *(_QWORD *)(v42 + 8);
        if (v42 == v41)
        {
          v40 = *(_QWORD *)(v94 + 80);
          v41 = *(_QWORD *)(v40 + 80);
          goto LABEL_90;
        }
        goto LABEL_57;
      }
    }
    v58 = 0;
LABEL_85:
    v59 = sub_1C4DE3FA0((uint64_t)&v102, (uint64_t)&v108, &v108, v58);
    *v59 = v108;
    *((_DWORD *)v59 + 2) = 0;
    goto LABEL_71;
  }
LABEL_106:
  v72 = operator new(8uLL);
  v102 = v72;
  *v72 = 0;
  v103 = v72 + 1;
  v104 = v72 + 1;
  v105[0] = 0;
  v105[1] = 0;
  v106 = 0;
  v107 = a2;
  if (*(_DWORD *)(a3 + 8))
  {
    v73 = 0;
    do
    {
      v74 = *(_QWORD **)a3;
      if (a2)
        sub_1C53C3160((uint64_t)&__src, *(_QWORD *)(a2 + 8), *(_QWORD *)(*(_QWORD *)a3 + 8 * v73));
      else
        sub_1C53C3404((char **)&__src, *(_QWORD *)(*(_QWORD *)a3 + 8 * v73));
      v75 = v110;
      if (__src != v111)
        free(__src);
      if (v75)
      {
        __src = 0;
        sub_1C53C4ED0((char **)&v102, &__src, &v110);
        sub_1C53C4E10((uint64_t)v105);
        v76 = sub_1C53C2798((uint64_t)&v102, v74[v73], 0, 0, 0);
        v77 = *(unsigned int *)(a3 + 8);
        if (v76 >= 2)
        {
          v84 = *(_QWORD *)a3 + 8 * v77;
          v85 = 2;
          while (1)
          {
            v86 = *(_QWORD **)a3;
            if ((_DWORD)v77)
            {
              v87 = 8 * v77;
              v86 = *(_QWORD **)a3;
              while (*v86 != *((_QWORD *)v102 + v85))
              {
                ++v86;
                v87 -= 8;
                if (!v87)
                {
                  v86 = (_QWORD *)(*(_QWORD *)a3 + 8 * v77);
                  break;
                }
              }
            }
            if (v77 != ((uint64_t)v86 - *(_QWORD *)a3) >> 3)
              break;
            if (++v85 > v76)
              goto LABEL_114;
          }
          v91 = v74[v73];
          v74[v73] = *(_QWORD *)(v84 - 8);
          *(_QWORD *)(v84 - 8) = v91;
          LODWORD(v77) = v77 - 1;
          *(_DWORD *)(a3 + 8) = v77;
          --v73;
        }
      }
      else
      {
        LODWORD(v77) = *(_DWORD *)(a3 + 8);
      }
LABEL_114:
      ++v73;
    }
    while (v77 > v73);
    v78 = v105[0];
    if (v106)
    {
      v79 = 0;
      v80 = 72 * v106;
      do
      {
        v81 = *(_QWORD *)(v78 + v79);
        if (v81 != -4096 && v81 != -8192)
        {
          v82 = *(void **)(v78 + v79 + 40);
          if ((void *)(v78 + v79 + 56) != v82)
            free(v82);
        }
        v79 += 72;
      }
      while (v80 != v79);
    }
  }
  else
  {
    v78 = 0;
  }
  MEMORY[0x1CAA32FB4](v78, 8);
  if (v102)
    operator delete(v102);
LABEL_17:
  v15 = v98;
  if (v100)
  {
    v16 = 72 * v100;
    v17 = (_QWORD *)(v98 + 56);
    do
    {
      v18 = *(v17 - 7);
      if (v18 != -4096 && v18 != -8192)
      {
        v19 = (_QWORD *)*(v17 - 2);
        if (v17 != v19)
          free(v19);
      }
      v17 += 9;
      v16 -= 72;
    }
    while (v16);
    v15 = v98;
  }
  MEMORY[0x1CAA32FB4](v15, 8);
  if (__p)
  {
    v96 = (char *)__p;
    operator delete(__p);
  }
}

uint64_t sub_1C53C12D0()
{
  return 1;
}

void sub_1C53C12D8(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  int v54;
  BOOL v55;
  unsigned int v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  int v67;
  BOOL v68;
  unsigned int v69;
  uint64_t *v70;
  unsigned int v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t *v74;
  int v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  int v82;
  BOOL v83;
  unsigned int v84;
  uint64_t *v85;
  uint64_t *v86;
  int v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t *v93;
  int v94;
  BOOL v95;
  unsigned int v96;
  uint64_t *v97;
  uint64_t *v98;
  unsigned int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t *v107;
  int v108;
  BOOL v109;
  unsigned int v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  unsigned int v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t *v121;
  int v122;
  BOOL v123;
  unsigned int v124;
  uint64_t *v125;
  uint64_t *v126;
  unsigned int v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t *v130;
  int v131;
  BOOL v132;
  unsigned int v133;
  uint64_t *v134;
  unsigned int v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t v138;
  int v139;
  unsigned int v140;
  uint64_t v141;
  int v142;
  unsigned int v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t *v146;
  int v147;
  BOOL v148;
  unsigned int v149;
  uint64_t *v150;
  int v151;
  uint64_t v152;
  int v153;
  unsigned int v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t *v157;
  int v158;
  BOOL v159;
  unsigned int v160;
  uint64_t *v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  _QWORD v173[34];

  v173[32] = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = a1[1] - *a1;
  if ((v5 >> 3) >= 2)
  {
    v6 = 1;
    while (1)
    {
      v171 = 0;
      v7 = *(void **)(v4 + 8 * v6);
      v171 = v7;
      v8 = *((_DWORD *)a1 + 10);
      if (!v8)
        break;
      v9 = a1[3];
      v10 = v8 - 1;
      v11 = ((v7 >> 4) ^ (v7 >> 9)) & v10;
      v12 = (uint64_t *)(v9 + 72 * v11);
      v13 = *v12;
      if (v7 != (void *)*v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -4096)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -8192;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = (uint64_t *)(v9 + 72 * v11);
          v13 = *v12;
          if (v7 == (void *)*v12)
            goto LABEL_18;
        }
        if (v14)
          v18 = v14;
        else
          v18 = v12;
        goto LABEL_17;
      }
LABEL_18:
      v12[4] = *(_QWORD *)(v4 + 8 * *((unsigned int *)v12 + 3));
      if (++v6 == (v5 >> 3))
        goto LABEL_21;
    }
    v18 = 0;
LABEL_17:
    v12 = sub_1C53C2DB0((uint64_t)(a1 + 3), (uint64_t *)&v171, v18);
    *v12 = (uint64_t)v7;
    *(_OWORD *)(v12 + 5) = 0u;
    *(_OWORD *)(v12 + 3) = 0u;
    *(_OWORD *)(v12 + 1) = 0u;
    *(_OWORD *)(v12 + 7) = 0u;
    v12[5] = (uint64_t)(v12 + 7);
    *((_DWORD *)v12 + 13) = 2;
    v4 = *a1;
    goto LABEL_18;
  }
LABEL_21:
  v171 = v173;
  v172 = 0x2000000000;
  v19 = (v5 >> 3) - 1;
  if (v19 < 2)
    goto LABEL_222;
  v20 = a2;
  v167 = (uint64_t)(a1 + 3);
  v162 = v5 >> 3;
  v163 = v5;
  v21 = v5 >> 3;
  do
  {
    v164 = v19;
    v22 = *(_QWORD *)(*a1 + 8 * v19);
    v168 = v22;
    v23 = *((_DWORD *)a1 + 10);
    if (v23)
    {
      v24 = a1[3];
      v25 = v23 - 1;
      v26 = ((v22 >> 4) ^ (v22 >> 9)) & v25;
      v27 = (uint64_t *)(v24 + 72 * v26);
      v28 = *v27;
      if (v22 == *v27)
        goto LABEL_38;
      v29 = 0;
      v30 = 1;
      while (v28 != -4096)
      {
        if (v29)
          v31 = 0;
        else
          v31 = v28 == -8192;
        if (v31)
          v29 = v27;
        v32 = v26 + v30++;
        v26 = v32 & v25;
        v27 = (uint64_t *)(v24 + 72 * v26);
        v28 = *v27;
        if (v22 == *v27)
          goto LABEL_38;
      }
      if (v29)
        v33 = v29;
      else
        v33 = v27;
    }
    else
    {
      v33 = 0;
    }
    v27 = sub_1C53C2DB0(v167, &v168, v33);
    *v27 = v22;
    *(_OWORD *)(v27 + 5) = 0u;
    *(_OWORD *)(v27 + 1) = 0u;
    *(_OWORD *)(v27 + 3) = 0u;
    *(_OWORD *)(v27 + 7) = 0u;
    v27[5] = (uint64_t)(v27 + 7);
    *((_DWORD *)v27 + 13) = 2;
LABEL_38:
    *((_DWORD *)v27 + 4) = *((_DWORD *)v27 + 3);
    v34 = *((unsigned int *)v27 + 12);
    if ((_DWORD)v34)
    {
      v35 = (uint64_t *)v27[5];
      v36 = &v35[v34];
      while (1)
      {
        v37 = *((_DWORD *)a1 + 10);
        if (v37)
        {
          v38 = *v35;
          v39 = a1[3];
          v40 = v37 - 1;
          v41 = ((*v35 >> 4) ^ (*v35 >> 9)) & v40;
          v42 = *(_QWORD *)(v39 + 72 * v41);
          if (*v35 != v42)
          {
            v43 = 1;
            while (v42 != -4096)
            {
              v44 = v41 + v43++;
              v41 = v44 & v40;
              v42 = *(_QWORD *)(v39 + 72 * v41);
              if (v38 == v42)
                goto LABEL_45;
            }
            goto LABEL_83;
          }
LABEL_45:
          v169 = 0;
          v170 = v38;
          if (!sub_1C4850EC8((uint64_t *)(a2 + 48), &v170, &v169))
            break;
          if (v169 == *(_QWORD *)(v20 + 48) + 16 * *(unsigned int *)(v20 + 64))
            break;
          v45 = *(_QWORD *)(v169 + 8);
          if (!v45 || *(_DWORD *)(v45 + 16) >= a3)
            break;
        }
LABEL_83:
        if (++v35 == v36)
          goto LABEL_146;
      }
      v46 = *v35;
      v170 = *v35;
      v47 = *((_DWORD *)a1 + 10);
      if (v47)
      {
        v48 = a1[3];
        v49 = v47 - 1;
        v50 = v49 & ((v46 >> 4) ^ (v46 >> 9));
        v51 = (uint64_t *)(v48 + 72 * v50);
        v52 = *v51;
        if (*v51 == v46)
        {
LABEL_64:
          if (*((_DWORD *)v51 + 3) < v21)
          {
            v58 = v51 + 3;
LABEL_66:
            v59 = *v58;
            v170 = *v58;
            v60 = *((_DWORD *)a1 + 10);
            if (v60)
            {
              v61 = a1[3];
              v62 = v60 - 1;
              v63 = v62 & ((v59 >> 4) ^ (v59 >> 9));
              v64 = (uint64_t *)(v61 + 72 * v63);
              v65 = *v64;
              if (v59 == *v64)
                goto LABEL_81;
              v66 = 0;
              v67 = 1;
              while (v65 != -4096)
              {
                if (v66)
                  v68 = 0;
                else
                  v68 = v65 == -8192;
                if (v68)
                  v66 = v64;
                v69 = v63 + v67++;
                v63 = v69 & v62;
                v64 = (uint64_t *)(v61 + 72 * v63);
                v65 = *v64;
                if (v59 == *v64)
                  goto LABEL_81;
              }
              if (v66)
                v70 = v66;
              else
                v70 = v64;
            }
            else
            {
              v70 = 0;
            }
            v64 = sub_1C53C2DB0(v167, &v170, v70);
            *v64 = v59;
            *(_OWORD *)(v64 + 5) = 0u;
            *(_OWORD *)(v64 + 1) = 0u;
            *(_OWORD *)(v64 + 3) = 0u;
            *(_OWORD *)(v64 + 7) = 0u;
            v64[5] = (uint64_t)(v64 + 7);
            *((_DWORD *)v64 + 13) = 2;
LABEL_81:
            v71 = *((_DWORD *)v64 + 4);
            if (v71 < *((_DWORD *)v27 + 4))
              *((_DWORD *)v27 + 4) = v71;
            goto LABEL_83;
          }
          v72 = v51 + 1;
          while (1)
          {
            v73 = v172;
            if (v172 >= (unint64_t)HIDWORD(v172))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v171, (uint64_t)v173, v172 + 1, 8);
              v73 = v172;
            }
            *((_QWORD *)v171 + v73) = v72;
            LODWORD(v172) = v172 + 1;
            v74 = (uint64_t *)(*a1 + 8 * *((unsigned int *)v72 + 1));
            v75 = *((_DWORD *)a1 + 10);
            if (!v75)
              break;
            v76 = a1[3];
            v77 = v75 - 1;
            v78 = ((*v74 >> 4) ^ (*v74 >> 9)) & v77;
            v79 = (uint64_t *)(v76 + 72 * v78);
            v80 = *v79;
            if (*v74 != *v79)
            {
              v81 = 0;
              v82 = 1;
              while (v80 != -4096)
              {
                if (v81)
                  v83 = 0;
                else
                  v83 = v80 == -8192;
                if (v83)
                  v81 = v79;
                v84 = v78 + v82++;
                v78 = v84 & v77;
                v79 = (uint64_t *)(v76 + 72 * v78);
                v80 = *v79;
                if (*v74 == *v79)
                  goto LABEL_103;
              }
              if (v81)
                v85 = v81;
              else
                v85 = v79;
              goto LABEL_102;
            }
LABEL_103:
            v72 = v79 + 1;
            if (*((_DWORD *)v79 + 3) < v21)
            {
              v86 = v79 + 3;
              v87 = *((_DWORD *)a1 + 10);
              if (!v87)
              {
                v97 = 0;
                goto LABEL_120;
              }
              v88 = a1[3];
              v89 = v87 - 1;
              v90 = ((*v86 >> 4) ^ (*v86 >> 9)) & v89;
              v91 = (uint64_t *)(v88 + 72 * v90);
              v92 = *v91;
              if (*v86 != *v91)
              {
                v93 = 0;
                v94 = 1;
                while (v92 != -4096)
                {
                  if (v93)
                    v95 = 0;
                  else
                    v95 = v92 == -8192;
                  if (v95)
                    v93 = v91;
                  v96 = v90 + v94++;
                  v90 = v96 & v89;
                  v91 = (uint64_t *)(v88 + 72 * v90);
                  v92 = *v91;
                  if (*v86 == *v91)
                    goto LABEL_121;
                }
                if (v93)
                  v97 = v93;
                else
                  v97 = v91;
LABEL_120:
                v91 = sub_1C53C2DB0(v167, v86, v97);
                *v91 = *v86;
                *(_OWORD *)(v91 + 5) = 0u;
                *(_OWORD *)(v91 + 3) = 0u;
                *(_OWORD *)(v91 + 1) = 0u;
                *(_OWORD *)(v91 + 7) = 0u;
                v91[5] = (uint64_t)(v91 + 7);
                *((_DWORD *)v91 + 13) = 2;
              }
LABEL_121:
              v98 = v91 + 1;
              v99 = v172;
              while (2)
              {
                v100 = *((_QWORD *)v171 + v99 - 1);
                LODWORD(v172) = v99 - 1;
                *(_DWORD *)(v100 + 4) = *((_DWORD *)v72 + 1);
                v58 = (uint64_t *)(v100 + 16);
                v101 = *((_DWORD *)a1 + 10);
                if (v101)
                {
                  v102 = a1[3];
                  v103 = v101 - 1;
                  v104 = ((*v58 >> 4) ^ (*v58 >> 9)) & v103;
                  v105 = (uint64_t *)(v102 + 72 * v104);
                  v106 = *v105;
                  if (*v58 != *v105)
                  {
                    v107 = 0;
                    v108 = 1;
                    while (v106 != -4096)
                    {
                      if (v107)
                        v109 = 0;
                      else
                        v109 = v106 == -8192;
                      if (v109)
                        v107 = v105;
                      v110 = v104 + v108++;
                      v104 = v110 & v103;
                      v105 = (uint64_t *)(v102 + 72 * v104);
                      v106 = *v105;
                      if (*v58 == *v105)
                        goto LABEL_137;
                    }
                    if (v107)
                      v111 = v107;
                    else
                      v111 = v105;
LABEL_136:
                    v105 = sub_1C53C2DB0(v167, (uint64_t *)(v100 + 16), v111);
                    *v105 = *v58;
                    *(_OWORD *)(v105 + 5) = 0u;
                    *(_OWORD *)(v105 + 3) = 0u;
                    *(_OWORD *)(v105 + 1) = 0u;
                    *(_OWORD *)(v105 + 7) = 0u;
                    v105[5] = (uint64_t)(v105 + 7);
                    *((_DWORD *)v105 + 13) = 2;
                  }
LABEL_137:
                  if (*((_DWORD *)v98 + 2) >= *((_DWORD *)v105 + 4))
                    v98 = v105 + 1;
                  else
                    *v58 = v72[2];
                  v99 = v172;
                  v72 = (uint64_t *)v100;
                  v20 = a2;
                  if (!(_DWORD)v172)
                    goto LABEL_66;
                  continue;
                }
                break;
              }
              v111 = 0;
              goto LABEL_136;
            }
          }
          v85 = 0;
LABEL_102:
          v79 = sub_1C53C2DB0(v167, v74, v85);
          *v79 = *v74;
          *(_OWORD *)(v79 + 5) = 0u;
          *(_OWORD *)(v79 + 3) = 0u;
          *(_OWORD *)(v79 + 1) = 0u;
          *(_OWORD *)(v79 + 7) = 0u;
          v79[5] = (uint64_t)(v79 + 7);
          *((_DWORD *)v79 + 13) = 2;
          goto LABEL_103;
        }
        v53 = 0;
        v54 = 1;
        while (v52 != -4096)
        {
          if (v53)
            v55 = 0;
          else
            v55 = v52 == -8192;
          if (v55)
            v53 = v51;
          v56 = v50 + v54++;
          v50 = v56 & v49;
          v51 = (uint64_t *)(v48 + 72 * v50);
          v52 = *v51;
          if (*v51 == v46)
            goto LABEL_64;
        }
        if (v53)
          v57 = v53;
        else
          v57 = v51;
      }
      else
      {
        v57 = 0;
      }
      v51 = sub_1C53C2DB0(v167, &v170, v57);
      *v51 = v46;
      *(_OWORD *)(v51 + 5) = 0u;
      *(_OWORD *)(v51 + 1) = 0u;
      *(_OWORD *)(v51 + 3) = 0u;
      *(_OWORD *)(v51 + 7) = 0u;
      v51[5] = (uint64_t)(v51 + 7);
      *((_DWORD *)v51 + 13) = 2;
      goto LABEL_64;
    }
LABEL_146:
    LODWORD(v21) = v164;
    v19 = v164 - 1;
  }
  while (((v164 - 1) & 0xFFFFFFFELL) != 0);
  if (v162 < 3)
    goto LABEL_222;
  v112 = 2;
  while (2)
  {
    v113 = *a1;
    v114 = *(_QWORD *)(*a1 + 8 * v112);
    v170 = v114;
    v115 = *((_DWORD *)a1 + 10);
    if (!v115)
    {
      v126 = 0;
      goto LABEL_166;
    }
    v116 = a1[3];
    v117 = v115 - 1;
    v118 = ((v114 >> 4) ^ (v114 >> 9)) & (v115 - 1);
    v119 = (uint64_t *)(v116 + 72 * v118);
    v120 = *v119;
    if (v114 == *v119)
    {
      v125 = (uint64_t *)(v113 + 8 * *((unsigned int *)v119 + 4));
      goto LABEL_169;
    }
    v121 = 0;
    v122 = 1;
    while (v120 != -4096)
    {
      if (v121)
        v123 = 0;
      else
        v123 = v120 == -8192;
      if (v123)
        v121 = v119;
      v124 = v118 + v122++;
      v118 = v124 & v117;
      v119 = (uint64_t *)(v116 + 72 * v118);
      v120 = *v119;
      if (v114 == *v119)
        goto LABEL_167;
    }
    if (v121)
      v126 = v121;
    else
      v126 = v119;
LABEL_166:
    v119 = sub_1C53C2DB0(v167, &v170, v126);
    *v119 = v114;
    *(_OWORD *)(v119 + 5) = 0u;
    *(_OWORD *)(v119 + 3) = 0u;
    *(_OWORD *)(v119 + 7) = 0u;
    *(_OWORD *)(v119 + 1) = 0u;
    v119[5] = (uint64_t)(v119 + 7);
    *((_DWORD *)v119 + 13) = 2;
    v113 = *a1;
    v116 = a1[3];
    v115 = *((_DWORD *)a1 + 10);
LABEL_167:
    v125 = (uint64_t *)(v113 + 8 * *((unsigned int *)v119 + 4));
    if (!v115)
    {
      v134 = 0;
      goto LABEL_182;
    }
    v117 = v115 - 1;
LABEL_169:
    v127 = ((*v125 >> 4) ^ (*v125 >> 9)) & v117;
    v128 = (uint64_t *)(v116 + 72 * v127);
    v129 = *v128;
    if (*v125 != *v128)
    {
      v130 = 0;
      v131 = 1;
      while (v129 != -4096)
      {
        if (v130)
          v132 = 0;
        else
          v132 = v129 == -8192;
        if (v132)
          v130 = v128;
        v133 = v127 + v131++;
        v127 = v133 & v117;
        v128 = (uint64_t *)(v116 + 72 * v127);
        v129 = *v128;
        if (*v125 == *v128)
          goto LABEL_183;
      }
      if (v130)
        v134 = v130;
      else
        v134 = v128;
LABEL_182:
      v128 = sub_1C53C2DB0(v167, v125, v134);
      *v128 = *v125;
      *(_OWORD *)(v128 + 5) = 0u;
      *(_OWORD *)(v128 + 3) = 0u;
      *(_OWORD *)(v128 + 1) = 0u;
      *(_OWORD *)(v128 + 7) = 0u;
      v128[5] = (uint64_t)(v128 + 7);
      *((_DWORD *)v128 + 13) = 2;
    }
LABEL_183:
    v135 = *((_DWORD *)v128 + 2);
    v136 = v119 + 4;
    v137 = v119 + 4;
    while (2)
    {
      v138 = *v137;
      v169 = v138;
      v139 = *((_DWORD *)a1 + 10);
      v140 = v138 >> 4;
      if (!v139)
      {
        v150 = 0;
        goto LABEL_198;
      }
      v141 = a1[3];
      v142 = v139 - 1;
      v143 = (v140 ^ (v138 >> 9)) & v142;
      v144 = (uint64_t *)(v141 + 72 * v143);
      v145 = *v144;
      if (v138 != *v144)
      {
        v146 = 0;
        v147 = 1;
        while (v145 != -4096)
        {
          if (v146)
            v148 = 0;
          else
            v148 = v145 == -8192;
          if (v148)
            v146 = v144;
          v149 = v143 + v147++;
          v143 = v149 & v142;
          v144 = (uint64_t *)(v141 + 72 * v143);
          v145 = *v144;
          if (v138 == *v144)
            goto LABEL_199;
        }
        if (v146)
          v150 = v146;
        else
          v150 = v144;
LABEL_198:
        v144 = sub_1C53C2DB0(v167, &v169, v150);
        *v144 = v138;
        *(_OWORD *)(v144 + 5) = 0u;
        *(_OWORD *)(v144 + 1) = 0u;
        *(_OWORD *)(v144 + 3) = 0u;
        *(_OWORD *)(v144 + 7) = 0u;
        v144[5] = (uint64_t)(v144 + 7);
        *((_DWORD *)v144 + 13) = 2;
      }
LABEL_199:
      if (*((_DWORD *)v144 + 2) > v135)
      {
        v151 = *((_DWORD *)a1 + 10);
        if (v151)
        {
          v152 = a1[3];
          v153 = v151 - 1;
          v154 = v153 & (v140 ^ (v138 >> 9));
          v155 = (uint64_t *)(v152 + 72 * v154);
          v156 = *v155;
          if (v138 != *v155)
          {
            v157 = 0;
            v158 = 1;
            while (v156 != -4096)
            {
              if (v157)
                v159 = 0;
              else
                v159 = v156 == -8192;
              if (v159)
                v157 = v155;
              v160 = v154 + v158++;
              v154 = v160 & v153;
              v155 = (uint64_t *)(v152 + 72 * v154);
              v156 = *v155;
              if (v138 == *v155)
                goto LABEL_215;
            }
            if (v157)
              v161 = v157;
            else
              v161 = v155;
LABEL_214:
            v155 = sub_1C53C2DB0(v167, &v169, v161);
            *v155 = v138;
            *(_OWORD *)(v155 + 5) = 0u;
            *(_OWORD *)(v155 + 1) = 0u;
            *(_OWORD *)(v155 + 3) = 0u;
            *(_OWORD *)(v155 + 7) = 0u;
            v155[5] = (uint64_t)(v155 + 7);
            *((_DWORD *)v155 + 13) = 2;
          }
LABEL_215:
          v137 = v155 + 4;
          continue;
        }
        v161 = 0;
        goto LABEL_214;
      }
      break;
    }
    *v136 = v138;
    if (++v112 != (v163 >> 3))
      continue;
    break;
  }
LABEL_222:
  if (v171 != v173)
    free(v171);
}

uint64_t sub_1C53C1DFC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v5 = *a3;
  v8 = *(_QWORD *)(a1 + 24);
  result = a1 + 24;
  v7 = v8;
  v9 = *(_QWORD *)a1;
  v10 = (_QWORD *)(*(_QWORD *)a1 + 8);
  v11 = *(_DWORD *)(a1 + 40);
  if (v11)
  {
    v12 = v11 - 1;
    v13 = ((*v10 >> 4) ^ (*v10 >> 9)) & (v11 - 1);
    v14 = (uint64_t *)(v7 + 72 * v13);
    v15 = *v14;
    if (*v10 == *v14)
      goto LABEL_16;
    v16 = 0;
    v17 = 1;
    while (v15 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == -8192;
      if (v18)
        v16 = v14;
      v19 = v13 + v17++;
      v13 = v19 & v12;
      v14 = (uint64_t *)(v7 + 72 * (v19 & v12));
      v15 = *v14;
      if (*v10 == *v14)
        goto LABEL_16;
    }
    if (v16)
      v20 = v16;
    else
      v20 = v14;
  }
  else
  {
    v20 = 0;
  }
  result = (uint64_t)sub_1C53C2DB0(result, (uint64_t *)(*(_QWORD *)a1 + 8), v20);
  v14 = (uint64_t *)result;
  *(_QWORD *)result = *v10;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_QWORD *)(result + 40) = result + 56;
  *(_DWORD *)(result + 52) = 2;
  v9 = *(_QWORD *)a1;
LABEL_16:
  v14[4] = v5;
  v21 = *(_QWORD *)(a1 + 8) - v9;
  if (v21 != 8)
  {
    v22 = v21 >> 3;
    v23 = 1;
    while (1)
    {
      v40 = 0;
      v24 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v23);
      v40 = v24;
      v25 = *(_DWORD *)(a2 + 64);
      if (!v25)
        break;
      v26 = *(_QWORD *)(a2 + 48);
      v27 = v25 - 1;
      v28 = ((v24 >> 4) ^ (v24 >> 9)) & v27;
      result = v26 + 16 * v28;
      v29 = *(_QWORD *)result;
      if (v24 != *(_QWORD *)result)
      {
        v30 = 0;
        v31 = 1;
        while (v29 != -4096)
        {
          if (v30)
            v32 = 0;
          else
            v32 = v29 == -8192;
          if (v32)
            v30 = (_QWORD *)result;
          v33 = v28 + v31++;
          v28 = v33 & v27;
          result = v26 + 16 * v28;
          v29 = *(_QWORD *)result;
          if (v24 == *(_QWORD *)result)
            goto LABEL_33;
        }
        if (v30)
          v34 = v30;
        else
          v34 = (_QWORD *)result;
        goto LABEL_32;
      }
LABEL_33:
      if (!*(_QWORD *)(result + 8))
      {
        v35 = *(_QWORD *)(a1 + 24);
        v36 = *(_DWORD *)(a1 + 40);
        v37 = sub_1C4F4C0E0(v35, v36, v40);
        if ((uint64_t *)(v35 + 72 * v36) == v37)
          v38 = 0;
        else
          v38 = v37[4];
        v39 = sub_1C53C4F9C(a1, v38, a2);
        result = llvm::DominatorTreeBase<llvm::BasicBlock,true>::createChild(a2, v40, v39);
      }
      if (++v23 == v22)
        return result;
    }
    v34 = 0;
LABEL_32:
    result = (uint64_t)sub_1C52A334C(a2 + 48, (uint64_t)&v40, &v40, v34);
    *(_QWORD *)result = v40;
    *(_QWORD *)(result + 8) = 0;
    goto LABEL_33;
  }
  return result;
}

void sub_1C53C203C(char **a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  unsigned int v9;
  int v10;
  uint64_t *v11;
  BOOL v12;
  int v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v4 = (uint64_t *)a1[3];
  v2 = (uint64_t)(a1 + 3);
  v3 = v4;
  v26 = 0;
  v5 = *(_DWORD *)(v2 + 16);
  if (v5)
  {
    v6 = *v3;
    if (!*v3)
    {
      v11 = v3;
      goto LABEL_13;
    }
    v7 = 0;
    v8 = 0;
    v9 = v5 - 1;
    v10 = 1;
    v11 = v3;
    while (v6 != -4096)
    {
      if (v8)
        v12 = 0;
      else
        v12 = v6 == -8192;
      if (v12)
        v8 = v11;
      v13 = v7 + v10++;
      v7 = v13 & v9;
      v11 = &v3[9 * (v13 & v9)];
      v6 = *v11;
      if (!*v11)
        goto LABEL_13;
    }
    if (v8)
      v25 = v8;
    else
      v25 = v11;
  }
  else
  {
    v25 = 0;
  }
  v11 = sub_1C53C2DB0(v2, &v26, v25);
  *((_OWORD *)v11 + 2) = 0u;
  *((_OWORD *)v11 + 3) = 0u;
  *(_OWORD *)v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  v11[8] = 0;
  v11[5] = (uint64_t)(v11 + 7);
  *((_DWORD *)v11 + 13) = 2;
LABEL_13:
  *((_DWORD *)v11 + 4) = 1;
  *((_DWORD *)v11 + 2) = 1;
  v11[3] = 0;
  v15 = a1[1];
  v14 = (unint64_t)a1[2];
  if ((unint64_t)v15 < v14)
  {
    *(_QWORD *)v15 = 0;
    v23 = v15 + 8;
  }
  else
  {
    v16 = *a1;
    v17 = (v15 - *a1) >> 3;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61)
      abort();
    v19 = v14 - (_QWORD)v16;
    if (v19 >> 2 > v18)
      v18 = v19 >> 2;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 61)
        sub_1C4764EE4();
      v21 = (char *)operator new(8 * v20);
    }
    else
    {
      v21 = 0;
    }
    v22 = &v21[8 * v17];
    *(_QWORD *)v22 = 0;
    v23 = v22 + 8;
    if (v15 != v16)
    {
      do
      {
        v24 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *((_QWORD *)v22 - 1) = v24;
        v22 -= 8;
      }
      while (v15 != v16);
      v15 = *a1;
    }
    *a1 = v22;
    a1[1] = v23;
    a1[2] = &v21[8 * v20];
    if (v15)
      operator delete(v15);
  }
  a1[1] = v23;
}

uint64_t sub_1C53C21E0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int (*a4)(uint64_t, uint64_t), int a5, uint64_t a6)
{
  uint64_t v9;
  int v10;
  int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t *v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  _DWORD *v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t *v68;
  int v69;
  BOOL v70;
  unsigned int v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  unsigned int v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  _QWORD v87[66];

  v87[64] = *MEMORY[0x1E0C80C00];
  v80 = a2;
  v85 = v87;
  v87[0] = a2;
  v86 = 0x4000000001;
  v9 = *(_QWORD *)(a1 + 24);
  v78 = a1 + 24;
  v10 = *(_DWORD *)(a1 + 40);
  if (!v10)
    goto LABEL_15;
  v13 = v10 - 1;
  v14 = (v10 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v15 = (uint64_t *)(v9 + 72 * v14);
  v16 = *v15;
  if (*v15 == a2)
  {
LABEL_14:
    *(_DWORD *)(v9 + 72 * v14 + 12) = a5;
LABEL_15:
    v25 = 1;
    goto LABEL_16;
  }
  v17 = 1;
  v18 = *v15;
  v19 = v13 & ((a2 >> 4) ^ (a2 >> 9));
  do
  {
    if (v18 == -4096)
      goto LABEL_15;
    v20 = v19 + v17++;
    v19 = v20 & v13;
    v18 = *(_QWORD *)(v9 + 72 * v19);
  }
  while (v18 != a2);
  v21 = 0;
  v22 = 1;
  while (v16 != -4096)
  {
    if (v21)
      v23 = 0;
    else
      v23 = v16 == -8192;
    if (v23)
      v21 = v15;
    v24 = v14 + v22++;
    v14 = v24 & v13;
    v15 = (uint64_t *)(v9 + 72 * v14);
    v16 = *v15;
    if (*v15 == a2)
      goto LABEL_14;
  }
  if (v21)
    v74 = v21;
  else
    v74 = v15;
  v75 = sub_1C53C2DB0(v78, &v80, v74);
  *v75 = a2;
  *(_OWORD *)(v75 + 5) = 0u;
  *(_OWORD *)(v75 + 3) = 0u;
  *(_OWORD *)(v75 + 7) = 0u;
  *(_OWORD *)(v75 + 1) = 0u;
  v75[5] = (uint64_t)(v75 + 7);
  *((_DWORD *)v75 + 13) = 2;
  v25 = v86;
  *((_DWORD *)v75 + 3) = a5;
  if (v25)
  {
    do
    {
LABEL_16:
      v26 = *((_QWORD *)v85 + v25 - 1);
      LODWORD(v86) = v25 - 1;
      v79 = v26;
      v27 = *(_DWORD *)(a1 + 40);
      if (v27)
      {
        v28 = *(_QWORD *)(a1 + 24);
        v29 = v27 - 1;
        v30 = v29 & ((v26 >> 4) ^ (v26 >> 9));
        v31 = (uint64_t *)(v28 + 72 * v30);
        v32 = *v31;
        if (v26 == *v31)
          goto LABEL_31;
        v33 = 0;
        v34 = 1;
        while (v32 != -4096)
        {
          if (v33)
            v35 = 0;
          else
            v35 = v32 == -8192;
          if (v35)
            v33 = v31;
          v36 = v30 + v34++;
          v30 = v36 & v29;
          v31 = (uint64_t *)(v28 + 72 * v30);
          v32 = *v31;
          if (v26 == *v31)
            goto LABEL_31;
        }
        if (v33)
          v37 = v33;
        else
          v37 = v31;
      }
      else
      {
        v37 = 0;
      }
      v31 = sub_1C53C2DB0(v78, &v79, v37);
      *v31 = v26;
      *(_OWORD *)(v31 + 5) = 0u;
      *(_OWORD *)(v31 + 1) = 0u;
      *(_OWORD *)(v31 + 3) = 0u;
      *(_OWORD *)(v31 + 7) = 0u;
      v31[5] = (uint64_t)(v31 + 7);
      *((_DWORD *)v31 + 13) = 2;
LABEL_31:
      if (!*((_DWORD *)v31 + 2))
      {
        a3 = (a3 + 1);
        *((_DWORD *)v31 + 4) = a3;
        *((_DWORD *)v31 + 2) = a3;
        v31[3] = v26;
        v39 = *(uint64_t **)(a1 + 8);
        v38 = *(_QWORD *)(a1 + 16);
        if ((unint64_t)v39 >= v38)
        {
          v41 = *(uint64_t **)a1;
          v42 = ((uint64_t)v39 - *(_QWORD *)a1) >> 3;
          v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 61)
            abort();
          v44 = v38 - (_QWORD)v41;
          if (v44 >> 2 > v43)
            v43 = v44 >> 2;
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
            v45 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v45 = v43;
          if (v45)
          {
            if (v45 >> 61)
              sub_1C4764EE4();
            v46 = (char *)operator new(8 * v45);
          }
          else
          {
            v46 = 0;
          }
          v47 = (uint64_t *)&v46[8 * v42];
          *v47 = v26;
          v40 = v47 + 1;
          if (v39 != v41)
          {
            do
            {
              v48 = *--v39;
              *--v47 = v48;
            }
            while (v39 != v41);
            v39 = *(uint64_t **)a1;
          }
          *(_QWORD *)a1 = v47;
          *(_QWORD *)(a1 + 8) = v40;
          *(_QWORD *)(a1 + 16) = &v46[8 * v45];
          if (v39)
            operator delete(v39);
        }
        else
        {
          *v39 = v26;
          v40 = v39 + 1;
        }
        *(_QWORD *)(a1 + 8) = v40;
        v49 = *(_QWORD *)(a1 + 48);
        if (v49)
          sub_1C53C36D0(*(_QWORD *)(v49 + 8), v79, (unsigned int *)&v82);
        else
          sub_1C53C38C8((unsigned int *)&v82, *(_QWORD *)(v79 + 8));
        v50 = v83;
        if (a6 && v83 >= 2uLL)
        {
          v81 = a6;
          sub_1C53C39AC((uint64_t)v82, (uint64_t *)v82 + v83, &v81, 126 - 2 * __clz(v83), 1);
          v50 = v83;
        }
        v51 = (uint64_t *)v82;
        v52 = (uint64_t *)((char *)v82 + 8 * v50);
        if (v50)
        {
          while (1)
          {
            v53 = *v51;
            v81 = v53;
            v54 = *(_QWORD *)(a1 + 24);
            v55 = *(_DWORD *)(a1 + 40);
            v56 = sub_1C4F4C0E0(v54, v55, v53);
            if ((uint64_t *)(v54 + 72 * v55) == v56)
            {
              v58 = v79;
            }
            else
            {
              v57 = v56;
              v58 = v79;
              if (*((_DWORD *)v56 + 2))
              {
                if (v53 != v79)
                {
                  v59 = v56 + 5;
                  v61 = v56 + 6;
                  v60 = *((unsigned int *)v56 + 12);
                  v62 = *((unsigned int *)v56 + 13);
                  goto LABEL_80;
                }
                goto LABEL_83;
              }
            }
            if (a4(v58, v53))
            {
              v63 = *(_DWORD *)(a1 + 40);
              if (!v63)
              {
                v72 = 0;
                goto LABEL_76;
              }
              v64 = *(_QWORD *)(a1 + 24);
              v65 = v63 - 1;
              v66 = v65 & ((v53 >> 4) ^ (v53 >> 9));
              v57 = (uint64_t *)(v64 + 72 * v66);
              v67 = *v57;
              if (v53 != *v57)
              {
                v68 = 0;
                v69 = 1;
                while (v67 != -4096)
                {
                  if (v68)
                    v70 = 0;
                  else
                    v70 = v67 == -8192;
                  if (v70)
                    v68 = v57;
                  v71 = v66 + v69++;
                  v66 = v71 & v65;
                  v57 = (uint64_t *)(v64 + 72 * v66);
                  v67 = *v57;
                  if (v53 == *v57)
                    goto LABEL_77;
                }
                if (v68)
                  v72 = v68;
                else
                  v72 = v57;
LABEL_76:
                v57 = sub_1C53C2DB0(v78, &v81, v72);
                *v57 = v53;
                *(_OWORD *)(v57 + 5) = 0u;
                *(_OWORD *)(v57 + 1) = 0u;
                *(_OWORD *)(v57 + 3) = 0u;
                *(_OWORD *)(v57 + 7) = 0u;
                v57[5] = (uint64_t)(v57 + 7);
                *((_DWORD *)v57 + 13) = 2;
              }
LABEL_77:
              v73 = v86;
              if (v86 >= (unint64_t)HIDWORD(v86))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, (uint64_t)v87, v86 + 1, 8);
                v73 = v86;
              }
              *((_QWORD *)v85 + v73) = v53;
              LODWORD(v86) = v86 + 1;
              v61 = v57 + 6;
              v60 = *((unsigned int *)v57 + 12);
              *((_DWORD *)v57 + 3) = a3;
              v59 = v57 + 5;
              v62 = *((unsigned int *)v57 + 13);
LABEL_80:
              if (v60 >= v62)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v59, (uint64_t)(v57 + 7), v60 + 1, 8);
                v60 = *((unsigned int *)v57 + 12);
              }
              *(_QWORD *)(*v59 + 8 * v60) = v58;
              ++*v61;
            }
LABEL_83:
            if (++v51 == v52)
            {
              v51 = (uint64_t *)v82;
              break;
            }
          }
        }
        if (v51 != &v84)
          free(v51);
      }
      v25 = v86;
    }
    while ((_DWORD)v86);
  }
  if (v85 != v87)
    free(v85);
  return a3;
}

uint64_t sub_1C53C2798(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v7;
  int v8;
  int v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  BOOL v33;
  unsigned int v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  _DWORD *v59;
  unint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t *v63;
  int v64;
  BOOL v65;
  unsigned int v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  unsigned int v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  _QWORD v82[66];

  v82[64] = *MEMORY[0x1E0C80C00];
  v75 = a2;
  v80 = v82;
  v82[0] = a2;
  v81 = 0x4000000001;
  v7 = *(_QWORD *)(a1 + 24);
  v73 = a1 + 24;
  v8 = *(_DWORD *)(a1 + 40);
  if (!v8)
    goto LABEL_15;
  v11 = v8 - 1;
  v12 = (v8 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v13 = (uint64_t *)(v7 + 72 * v12);
  v14 = *v13;
  if (*v13 == a2)
  {
LABEL_14:
    *(_DWORD *)(v7 + 72 * v12 + 12) = a4;
LABEL_15:
    v23 = 1;
    goto LABEL_16;
  }
  v15 = 1;
  v16 = *v13;
  v17 = v11 & ((a2 >> 4) ^ (a2 >> 9));
  do
  {
    if (v16 == -4096)
      goto LABEL_15;
    v18 = v17 + v15++;
    v17 = v18 & v11;
    v16 = *(_QWORD *)(v7 + 72 * v17);
  }
  while (v16 != a2);
  v19 = 0;
  v20 = 1;
  while (v14 != -4096)
  {
    if (v19)
      v21 = 0;
    else
      v21 = v14 == -8192;
    if (v21)
      v19 = v13;
    v22 = v12 + v20++;
    v12 = v22 & v11;
    v13 = (uint64_t *)(v7 + 72 * v12);
    v14 = *v13;
    if (*v13 == a2)
      goto LABEL_14;
  }
  if (v19)
    v69 = v19;
  else
    v69 = v13;
  v70 = sub_1C53C2DB0(v73, &v75, v69);
  *v70 = a2;
  *(_OWORD *)(v70 + 5) = 0u;
  *(_OWORD *)(v70 + 3) = 0u;
  *(_OWORD *)(v70 + 7) = 0u;
  *(_OWORD *)(v70 + 1) = 0u;
  v70[5] = (uint64_t)(v70 + 7);
  *((_DWORD *)v70 + 13) = 2;
  v23 = v81;
  *((_DWORD *)v70 + 3) = a4;
  if (v23)
  {
    do
    {
LABEL_16:
      v24 = *((_QWORD *)v80 + v23 - 1);
      LODWORD(v81) = v23 - 1;
      v74 = v24;
      v25 = *(_DWORD *)(a1 + 40);
      if (v25)
      {
        v26 = *(_QWORD *)(a1 + 24);
        v27 = v25 - 1;
        v28 = v27 & ((v24 >> 4) ^ (v24 >> 9));
        v29 = (uint64_t *)(v26 + 72 * v28);
        v30 = *v29;
        if (v24 == *v29)
          goto LABEL_31;
        v31 = 0;
        v32 = 1;
        while (v30 != -4096)
        {
          if (v31)
            v33 = 0;
          else
            v33 = v30 == -8192;
          if (v33)
            v31 = v29;
          v34 = v28 + v32++;
          v28 = v34 & v27;
          v29 = (uint64_t *)(v26 + 72 * v28);
          v30 = *v29;
          if (v24 == *v29)
            goto LABEL_31;
        }
        if (v31)
          v35 = v31;
        else
          v35 = v29;
      }
      else
      {
        v35 = 0;
      }
      v29 = sub_1C53C2DB0(v73, &v74, v35);
      *v29 = v24;
      *(_OWORD *)(v29 + 5) = 0u;
      *(_OWORD *)(v29 + 1) = 0u;
      *(_OWORD *)(v29 + 3) = 0u;
      *(_OWORD *)(v29 + 7) = 0u;
      v29[5] = (uint64_t)(v29 + 7);
      *((_DWORD *)v29 + 13) = 2;
LABEL_31:
      if (!*((_DWORD *)v29 + 2))
      {
        a3 = (a3 + 1);
        *((_DWORD *)v29 + 4) = a3;
        *((_DWORD *)v29 + 2) = a3;
        v29[3] = v24;
        v37 = *(uint64_t **)(a1 + 8);
        v36 = *(_QWORD *)(a1 + 16);
        if ((unint64_t)v37 >= v36)
        {
          v39 = *(uint64_t **)a1;
          v40 = ((uint64_t)v37 - *(_QWORD *)a1) >> 3;
          v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 61)
            abort();
          v42 = v36 - (_QWORD)v39;
          if (v42 >> 2 > v41)
            v41 = v42 >> 2;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
            v43 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v43 = v41;
          if (v43)
          {
            if (v43 >> 61)
              sub_1C4764EE4();
            v44 = (char *)operator new(8 * v43);
          }
          else
          {
            v44 = 0;
          }
          v45 = (uint64_t *)&v44[8 * v40];
          *v45 = v24;
          v38 = v45 + 1;
          if (v37 != v39)
          {
            do
            {
              v46 = *--v37;
              *--v45 = v46;
            }
            while (v37 != v39);
            v37 = *(uint64_t **)a1;
          }
          *(_QWORD *)a1 = v45;
          *(_QWORD *)(a1 + 8) = v38;
          *(_QWORD *)(a1 + 16) = &v44[8 * v43];
          if (v37)
            operator delete(v37);
        }
        else
        {
          *v37 = v24;
          v38 = v37 + 1;
        }
        *(_QWORD *)(a1 + 8) = v38;
        v47 = *(_QWORD *)(a1 + 48);
        if (v47)
          sub_1C53C3160((uint64_t)&v77, *(_QWORD *)(v47 + 8), v74);
        else
          sub_1C53C3404((char **)&v77, v74);
        v48 = v78;
        if (a5 && v78 >= 2uLL)
        {
          v76 = a5;
          sub_1C53C42A4((uint64_t)v77, (uint64_t *)v77 + v78, &v76, 126 - 2 * __clz(v78), 1);
          v48 = v78;
        }
        v49 = (uint64_t *)v77;
        v50 = (uint64_t *)((char *)v77 + 8 * v48);
        if (v48)
        {
          while (1)
          {
            v51 = *v49;
            v76 = v51;
            v52 = *(_QWORD *)(a1 + 24);
            v53 = *(_DWORD *)(a1 + 40);
            v54 = sub_1C4F4C0E0(v52, v53, v51);
            if ((uint64_t *)(v52 + 72 * v53) == v54)
              break;
            v55 = v54;
            if (!*((_DWORD *)v54 + 2))
              break;
            v56 = v74;
            if (v51 != v74)
            {
              v57 = v54 + 5;
              v59 = v54 + 6;
              v58 = *((unsigned int *)v54 + 12);
              v60 = *((unsigned int *)v54 + 13);
LABEL_78:
              if (v58 >= v60)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v57, (uint64_t)(v55 + 7), v58 + 1, 8);
                v58 = *((unsigned int *)v55 + 12);
              }
              *(_QWORD *)(*v57 + 8 * v58) = v56;
              ++*v59;
            }
            if (++v49 == v50)
            {
              v49 = (uint64_t *)v77;
              goto LABEL_84;
            }
          }
          if (v53)
          {
            v61 = ((v51 >> 4) ^ (v51 >> 9)) & (v53 - 1);
            v55 = (uint64_t *)(v52 + 72 * v61);
            v62 = *v55;
            if (v51 != *v55)
            {
              v63 = 0;
              v64 = 1;
              while (v62 != -4096)
              {
                if (v63)
                  v65 = 0;
                else
                  v65 = v62 == -8192;
                if (v65)
                  v63 = v55;
                v66 = v61 + v64++;
                v61 = v66 & (v53 - 1);
                v55 = (uint64_t *)(v52 + 72 * v61);
                v62 = *v55;
                if (v51 == *v55)
                  goto LABEL_75;
              }
              if (v63)
                v67 = v63;
              else
                v67 = v55;
LABEL_74:
              v55 = sub_1C53C2DB0(v73, &v76, v67);
              *v55 = v51;
              *(_OWORD *)(v55 + 5) = 0u;
              *(_OWORD *)(v55 + 1) = 0u;
              *(_OWORD *)(v55 + 3) = 0u;
              *(_OWORD *)(v55 + 7) = 0u;
              v55[5] = (uint64_t)(v55 + 7);
              *((_DWORD *)v55 + 13) = 2;
            }
LABEL_75:
            v68 = v81;
            if (v81 >= (unint64_t)HIDWORD(v81))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, (uint64_t)v82, v81 + 1, 8);
              v68 = v81;
            }
            *((_QWORD *)v80 + v68) = v51;
            v59 = v55 + 6;
            v58 = *((unsigned int *)v55 + 12);
            LODWORD(v81) = v81 + 1;
            *((_DWORD *)v55 + 3) = a3;
            v57 = v55 + 5;
            v56 = v74;
            v60 = *((unsigned int *)v55 + 13);
            goto LABEL_78;
          }
          v67 = 0;
          goto LABEL_74;
        }
LABEL_84:
        if (v49 != &v79)
          free(v49);
      }
      v23 = v81;
    }
    while ((_DWORD)v81);
  }
  if (v80 != v82)
    free(v80);
  return a3;
}

uint64_t sub_1C53C2D30(uint64_t result, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(result + 72 * v5);
    v7 = *v6;
    if (*v6 != a3)
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(result + 72 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_11;
      }
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
  }
LABEL_11:
  *a4 = v6;
  return result;
}

uint64_t *sub_1C53C2DB0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t *v16;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    {
      sub_1C53C2EE8((uint64_t *)a1, v6);
      v16 = 0;
      sub_1C53C2D30(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v16);
      a3 = v16;
    }
LABEL_4:
    v7 = *a3;
    goto LABEL_5;
  }
  sub_1C53C2EE8((uint64_t *)a1, 2 * v6);
  v7 = *a2;
  v9 = *(_DWORD *)(a1 + 16) - 1;
  v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & v9;
  a3 = (uint64_t *)(*(_QWORD *)a1 + 72 * v10);
  v11 = *a3;
  if (*a2 != *a3)
  {
    v12 = 0;
    v13 = 1;
    while (v11 != -4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == -8192;
      if (v14)
        v12 = a3;
      v15 = v10 + v13++;
      v10 = v15 & v9;
      a3 = (uint64_t *)(*(_QWORD *)a1 + 72 * v10);
      v11 = *a3;
      if (v7 == *a3)
        goto LABEL_5;
    }
    if (v12)
      a3 = v12;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C53C2EE8(uint64_t *a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;

  v3 = *((_DWORD *)a1 + 4);
  v4 = (uint64_t *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(72 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 72 * v10;
      do
      {
        *result = -4096;
        result += 9;
        v11 -= 72;
      }
      while (v11);
    }
    if (!v3)
LABEL_43:
      JUMPOUT(0x1CAA32FB4);
    v12 = &v4[9 * v3];
    v13 = v4;
    while (1)
    {
      v14 = *v13;
      if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        break;
LABEL_33:
      v13 += 9;
      if (v13 == v12)
        goto LABEL_43;
    }
    v15 = *((_DWORD *)a1 + 4) - 1;
    v16 = v15 & ((v14 >> 4) ^ (v14 >> 9));
    v17 = *a1 + 72 * v16;
    v18 = *(_QWORD *)v17;
    if (v14 != *(_QWORD *)v17)
    {
      v19 = 0;
      v20 = 1;
      while (v18 != -4096)
      {
        if (v19)
          v21 = 0;
        else
          v21 = v18 == -8192;
        if (v21)
          v19 = v17;
        v22 = v16 + v20++;
        v16 = v22 & v15;
        v17 = *a1 + 72 * v16;
        v18 = *(_QWORD *)v17;
        if (v14 == *(_QWORD *)v17)
          goto LABEL_23;
      }
      if (v19)
        v17 = v19;
    }
LABEL_23:
    *(_QWORD *)v17 = v14;
    v23 = (void *)(v17 + 56);
    v24 = *(_OWORD *)(v13 + 1);
    v25 = *(_OWORD *)(v13 + 3);
    *(_QWORD *)(v17 + 40) = v17 + 56;
    *(_OWORD *)(v17 + 8) = v24;
    *(_OWORD *)(v17 + 24) = v25;
    *(_QWORD *)(v17 + 48) = 0x200000000;
    v26 = *((unsigned int *)v13 + 12);
    if (!(_DWORD)v26 || (uint64_t *)v17 == v13)
    {
LABEL_31:
      ++*((_DWORD *)a1 + 2);
      v29 = (uint64_t *)v13[5];
      if (v29 != v13 + 7)
        free(v29);
      goto LABEL_33;
    }
    v27 = (uint64_t *)v13[5];
    if (v27 != v13 + 7)
    {
      *(_QWORD *)(v17 + 40) = v27;
      v30 = *((_DWORD *)v13 + 13);
      *(_DWORD *)(v17 + 48) = v26;
      *(_DWORD *)(v17 + 52) = v30;
      v13[5] = (uint64_t)(v13 + 7);
      *((_DWORD *)v13 + 13) = 0;
      goto LABEL_30;
    }
    if (v26 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v17 + 40, v17 + 56, v26, 8);
      v28 = *((unsigned int *)v13 + 12);
      if (!(_DWORD)v28)
        goto LABEL_29;
      v27 = (uint64_t *)v13[5];
      v23 = *(void **)(v17 + 40);
    }
    else
    {
      v28 = *((unsigned int *)v13 + 12);
    }
    memcpy(v23, v27, 8 * v28);
LABEL_29:
    *(_DWORD *)(v17 + 48) = v26;
LABEL_30:
    *((_DWORD *)v13 + 12) = 0;
    goto LABEL_31;
  }
  a1[1] = 0;
  v31 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v31)
  {
    v32 = 72 * v31;
    do
    {
      *result = -4096;
      result += 9;
      v32 -= 72;
    }
    while (v32);
  }
  return result;
}

_BYTE *sub_1C53C3160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  _BYTE *result;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD v36[4];
  _QWORD v37[4];

  v6 = *(_QWORD *)(a3 + 40);
  if (v6 == a3 + 40)
  {
LABEL_48:
    v7 = 0;
    v8 = 0;
    v11 = 0;
  }
  else
  {
    v7 = v6 - 24;
    if (v6)
      v8 = v6 - 24;
    else
      v8 = 0;
    v9 = *(unsigned __int8 *)(v8 + 16);
    v10 = v9 - 29;
    if (v9 == 30)
    {
      if ((*(_DWORD *)(v8 + 20) & 0x7FFFFFF) == 3)
        LODWORD(v11) = 2;
      else
        LODWORD(v11) = 1;
    }
    else
    {
      LODWORD(v11) = 0;
      switch(v10)
      {
        case 0:
        case 5:
        case 6:
          goto LABEL_9;
        case 1:
          __break(1u);
          break;
        case 2:
          LODWORD(v11) = (*(_DWORD *)(v8 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_9;
        case 3:
        case 9:
          break;
        case 4:
          LODWORD(v11) = 2;
          goto LABEL_9;
        case 7:
          LODWORD(v11) = *(_WORD *)(v8 + 18) & 1;
          goto LABEL_9;
        case 8:
          LODWORD(v11) = 1;
          goto LABEL_9;
        case 10:
          LODWORD(v11) = *(_DWORD *)(v8 + 80) + 1;
          goto LABEL_9;
        default:
          goto LABEL_48;
      }
      LODWORD(v11) = (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) - 1;
    }
LABEL_9:
    v11 = v11;
  }
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x800000000;
  v37[0] = v7;
  v37[1] = v11;
  v37[2] = v7;
  v37[3] = v11;
  v36[0] = v8;
  v36[1] = 0;
  v36[2] = v8;
  v36[3] = 0;
  sub_1C4ED7D94(a1, (uint64_t)v37, (uint64_t)v36);
  v12 = *(char **)a1;
  v13 = *(unsigned int *)(a1 + 8);
  v14 = *(char **)a1;
  if ((_DWORD)v13)
  {
    v15 = 8 * v13;
    v14 = *(char **)a1;
    while (*(_QWORD *)v14)
    {
      v14 += 8;
      v15 -= 8;
      if (!v15)
      {
        v14 = (char *)(*(_QWORD *)a1 + 8 * v13);
        break;
      }
    }
  }
  v16 = (v14 - v12) >> 3;
  v17 = v14 + 8;
  if (v16 != v13 && v17 != (_QWORD *)(*(_QWORD *)a1 + 8 * v13))
  {
    v19 = 8 * v13 - 8 * v16 - 8;
    do
    {
      if (*v17)
      {
        *(_QWORD *)v14 = *v17;
        v14 += 8;
      }
      ++v17;
      v19 -= 8;
    }
    while (v19);
    v12 = *(char **)a1;
  }
  *(_DWORD *)(a1 + 8) = (unint64_t)(v14 - v12) >> 3;
  result = (_BYTE *)sub_1C53C3598(a2 + 296, a3);
  if ((*(_BYTE *)(a2 + 296) & 1) != 0)
  {
    v21 = a2 + 304;
    v22 = 4;
  }
  else
  {
    v21 = *(_QWORD *)(a2 + 304);
    v22 = *(_DWORD *)(a2 + 312);
  }
  if ((_BYTE *)(v21 + 72 * v22) != result)
  {
    v23 = *((unsigned int *)result + 4);
    v24 = *(unsigned int *)(a1 + 8);
    v25 = *(char **)a1;
    if ((_DWORD)v23)
    {
      v26 = (uint64_t *)*((_QWORD *)result + 1);
      v27 = &v26[v23];
      do
      {
        v28 = *v26;
        v29 = 8 * v24;
        v30 = v25;
        v31 = &v25[8 * v24];
        if (v24)
        {
          v32 = 8 * v24;
          v30 = v25;
          while (*(_QWORD *)v30 != v28)
          {
            v30 += 8;
            v32 -= 8;
            if (!v32)
            {
              v30 = &v25[8 * v24];
              break;
            }
          }
        }
        v33 = (v30 - v25) >> 3;
        if (v33 != v24)
        {
          v34 = v30 + 8;
          if (v30 + 8 != v31)
          {
            v35 = v29 - 8 * v33 - 8;
            do
            {
              if (*v34 != v28)
              {
                *(_QWORD *)v30 = *v34;
                v30 += 8;
              }
              ++v34;
              v35 -= 8;
            }
            while (v35);
            v25 = *(char **)a1;
          }
        }
        v24 = ((unint64_t)(v30 - v25) >> 3);
        ++v26;
      }
      while (v26 != v27);
      *(_DWORD *)(a1 + 8) = v24;
    }
    return sub_1C4ECC4B8((unsigned int *)a1, (uint64_t)&v25[8 * v24], *((_BYTE **)result + 5), (_BYTE *)(*((_QWORD *)result + 5) + 8 * *((unsigned int *)result + 12)));
  }
  return result;
}

uint64_t sub_1C53C3404(char **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  _QWORD v18[4];
  _QWORD v19[4];

  v3 = *(_QWORD *)(a2 + 40);
  if (v3 == a2 + 40)
  {
LABEL_27:
    v4 = 0;
    v5 = 0;
    v8 = 0;
  }
  else
  {
    v4 = v3 - 24;
    if (v3)
      v5 = v3 - 24;
    else
      v5 = 0;
    v6 = *(unsigned __int8 *)(v5 + 16);
    v7 = v6 - 29;
    if (v6 == 30)
    {
      if ((*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 3)
        LODWORD(v8) = 2;
      else
        LODWORD(v8) = 1;
    }
    else
    {
      LODWORD(v8) = 0;
      switch(v7)
      {
        case 0:
        case 5:
        case 6:
          goto LABEL_9;
        case 1:
          __break(1u);
          break;
        case 2:
          LODWORD(v8) = (*(_DWORD *)(v5 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_9;
        case 3:
        case 9:
          break;
        case 4:
          LODWORD(v8) = 2;
          goto LABEL_9;
        case 7:
          LODWORD(v8) = *(_WORD *)(v5 + 18) & 1;
          goto LABEL_9;
        case 8:
          LODWORD(v8) = 1;
          goto LABEL_9;
        case 10:
          LODWORD(v8) = *(_DWORD *)(v5 + 80) + 1;
          goto LABEL_9;
        default:
          goto LABEL_27;
      }
      LODWORD(v8) = (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) - 1;
    }
LABEL_9:
    v8 = v8;
  }
  *a1 = (char *)(a1 + 2);
  a1[1] = (char *)0x800000000;
  v19[0] = v4;
  v19[1] = v8;
  v19[2] = v4;
  v19[3] = v8;
  v18[0] = v5;
  v18[1] = 0;
  v18[2] = v5;
  v18[3] = 0;
  result = sub_1C4ED7D94((uint64_t)a1, (uint64_t)v19, (uint64_t)v18);
  v10 = *a1;
  v11 = *((unsigned int *)a1 + 2);
  v12 = *a1;
  if ((_DWORD)v11)
  {
    v13 = 8 * v11;
    v12 = *a1;
    while (*(_QWORD *)v12)
    {
      v12 += 8;
      v13 -= 8;
      if (!v13)
      {
        v12 = &(*a1)[8 * v11];
        break;
      }
    }
  }
  v14 = (v12 - v10) >> 3;
  v15 = v12 + 8;
  if (v14 != v11 && v15 != &(*a1)[8 * v11])
  {
    v17 = 8 * v11 - 8 * v14 - 8;
    do
    {
      if (*(_QWORD *)v15)
      {
        *(_QWORD *)v12 = *(_QWORD *)v15;
        v12 += 8;
      }
      v15 += 8;
      v17 -= 8;
    }
    while (v17);
    v10 = *a1;
  }
  *((_DWORD *)a1 + 2) = (unint64_t)(v12 - v10) >> 3;
  return result;
}

uint64_t sub_1C53C3598(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = a2;
  if (sub_1C53C3624(a1, &v7, &v6))
    return v6;
  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *(_DWORD *)(a1 + 16);
  }
  return v3 + 72 * v4;
}

uint64_t sub_1C53C3624(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 72 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_13:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 72 * (v12 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_13;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

_BYTE *sub_1C53C36D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  _BYTE *result;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;

  v3 = a2;
  do
  {
    a2 = *(_QWORD *)(a2 + 8);
    if (!a2)
      break;
    v6 = *(_QWORD *)(a2 + 24);
    v7 = *(unsigned __int8 *)(v6 + 16);
    v8 = v6 && v7 >= 0x1C;
  }
  while (!v8 || v7 - 29 >= 0xB);
  *(_QWORD *)a3 = a3 + 4;
  *((_QWORD *)a3 + 1) = 0x800000000;
  sub_1C4DBBCC0(a3, a2, 0);
  v10 = *(char **)a3;
  v11 = a3[2];
  v12 = *(char **)a3;
  if ((_DWORD)v11)
  {
    v13 = 8 * v11;
    v12 = *(char **)a3;
    while (*(_QWORD *)v12)
    {
      v12 += 8;
      v13 -= 8;
      if (!v13)
      {
        v12 = (char *)(*(_QWORD *)a3 + 8 * v11);
        break;
      }
    }
  }
  v14 = (v12 - v10) >> 3;
  v15 = v12 + 8;
  if (v14 != v11 && v15 != (_QWORD *)(*(_QWORD *)a3 + 8 * v11))
  {
    v17 = 8 * v11 - 8 * v14 - 8;
    do
    {
      if (*v15)
      {
        *(_QWORD *)v12 = *v15;
        v12 += 8;
      }
      ++v15;
      v17 -= 8;
    }
    while (v17);
    v10 = *(char **)a3;
  }
  a3[2] = (unint64_t)(v12 - v10) >> 3;
  result = (_BYTE *)sub_1C53C3598(a1, v3);
  v19 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v20 = 4;
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 8);
    v20 = *(_DWORD *)(a1 + 16);
  }
  if ((_BYTE *)(v19 + 72 * v20) != result)
  {
    v21 = *((unsigned int *)result + 4);
    v22 = a3[2];
    v23 = *(char **)a3;
    if ((_DWORD)v21)
    {
      v24 = (uint64_t *)*((_QWORD *)result + 1);
      v25 = &v24[v21];
      do
      {
        v26 = *v24;
        v27 = 8 * v22;
        v28 = v23;
        v29 = &v23[8 * v22];
        if (v22)
        {
          v30 = 8 * v22;
          v28 = v23;
          while (*(_QWORD *)v28 != v26)
          {
            v28 += 8;
            v30 -= 8;
            if (!v30)
            {
              v28 = &v23[8 * v22];
              break;
            }
          }
        }
        v31 = (v28 - v23) >> 3;
        if (v31 != v22)
        {
          v32 = v28 + 8;
          if (v28 + 8 != v29)
          {
            v33 = v27 - 8 * v31 - 8;
            do
            {
              if (*v32 != v26)
              {
                *(_QWORD *)v28 = *v32;
                v28 += 8;
              }
              ++v32;
              v33 -= 8;
            }
            while (v33);
            v23 = *(char **)a3;
          }
        }
        v22 = ((unint64_t)(v28 - v23) >> 3);
        ++v24;
      }
      while (v24 != v25);
      a3[2] = v22;
    }
    return sub_1C4ECC4B8(a3, (uint64_t)&v23[8 * v22], *((_BYTE **)result + 5), (_BYTE *)(*((_QWORD *)result + 5) + 8 * *((unsigned int *)result + 12)));
  }
  return result;
}

unsigned int *sub_1C53C38C8(unsigned int *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  unsigned int *result;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  for (; a2; a2 = *(_QWORD *)(a2 + 8))
  {
    v3 = *(_QWORD *)(a2 + 24);
    v4 = *(unsigned __int8 *)(v3 + 16);
    if (v3)
      v5 = v4 >= 0x1C;
    else
      v5 = 0;
    if (v5 && v4 - 29 < 0xB)
      break;
  }
  *(_QWORD *)a1 = a1 + 4;
  *((_QWORD *)a1 + 1) = 0x800000000;
  result = sub_1C4DBBCC0(a1, a2, 0);
  v8 = *(char **)a1;
  v9 = a1[2];
  v10 = *(char **)a1;
  if ((_DWORD)v9)
  {
    v11 = 8 * v9;
    v10 = *(char **)a1;
    while (*(_QWORD *)v10)
    {
      v10 += 8;
      v11 -= 8;
      if (!v11)
      {
        v10 = (char *)(*(_QWORD *)a1 + 8 * v9);
        break;
      }
    }
  }
  v12 = (v10 - v8) >> 3;
  v13 = v10 + 8;
  if (v12 != v9 && v13 != (_QWORD *)(*(_QWORD *)a1 + 8 * v9))
  {
    v15 = 8 * v9 - 8 * v12 - 8;
    do
    {
      if (*v13)
      {
        *(_QWORD *)v10 = *v13;
        v10 += 8;
      }
      ++v13;
      v15 -= 8;
    }
    while (v15);
    v8 = *(char **)a1;
  }
  a1[2] = (unint64_t)(v10 - v8) >> 3;
  return result;
}

uint64_t sub_1C53C39AC(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  BOOL v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  BOOL v41;
  char v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  int64_t v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = a2;
  v10 = a2 - 1;
  v11 = v8;
  while (2)
  {
    v8 = v11;
    v12 = (char *)v9 - (char *)v11;
    v13 = v9 - v11;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = sub_1C62377A8(a3, *(a2 - 1), *v11);
        if ((_DWORD)result)
        {
          v80 = *v11;
          *v11 = *(a2 - 1);
          *(a2 - 1) = v80;
        }
        return result;
      case 3:
        return sub_1C53C0538(v11, v11 + 1, v10, a3);
      case 4:
        return sub_1C53C07C4(v11, v11 + 1, v11 + 2, v10, a3);
      case 5:
        return sub_1C53C0878(v11, v11 + 1, v11 + 2, v11 + 3, v10, a3);
      default:
        if (v12 <= 191)
        {
          v40 = v11 + 1;
          v41 = v11 == v9 || v40 == v9;
          v42 = v41;
          if ((a5 & 1) != 0)
          {
            if ((v42 & 1) == 0)
            {
              v43 = 0;
              v44 = v11;
              do
              {
                v46 = *v44;
                v45 = v44[1];
                v44 = v40;
                result = sub_1C62377A8(a3, v45, v46);
                if ((_DWORD)result)
                {
                  v47 = *v44;
                  v48 = v43;
                  while (1)
                  {
                    *(uint64_t *)((char *)v11 + v48 + 8) = *(uint64_t *)((char *)v11 + v48);
                    if (!v48)
                      break;
                    result = sub_1C62377A8(a3, v47, *(uint64_t *)((char *)v11 + v48 - 8));
                    v48 -= 8;
                    if ((result & 1) == 0)
                    {
                      v49 = (uint64_t *)((char *)v11 + v48 + 8);
                      goto LABEL_73;
                    }
                  }
                  v49 = v11;
LABEL_73:
                  *v49 = v47;
                }
                v40 = v44 + 1;
                v43 += 8;
              }
              while (v44 + 1 != a2);
            }
          }
          else if ((v42 & 1) == 0)
          {
            do
            {
              v75 = *v8;
              v74 = v8[1];
              v8 = v40;
              result = sub_1C62377A8(a3, v74, v75);
              if ((_DWORD)result)
              {
                v76 = *v8;
                v77 = v8;
                do
                {
                  v78 = v77;
                  v79 = *--v77;
                  *v78 = v79;
                  result = sub_1C62377A8(a3, v76, *(v78 - 2));
                }
                while ((result & 1) != 0);
                *v77 = v76;
              }
              v40 = v8 + 1;
            }
            while (v8 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v11 != v9)
          {
            v50 = (unint64_t)(v13 - 2) >> 1;
            v51 = v50;
            do
            {
              v52 = v51;
              if (v50 >= v51)
              {
                v53 = (2 * v51) | 1;
                v54 = &v8[v53];
                if (2 * v51 + 2 < v13 && sub_1C62377A8(a3, *v54, v54[1]))
                {
                  ++v54;
                  v53 = 2 * v52 + 2;
                }
                v55 = &v8[v52];
                result = sub_1C62377A8(a3, *v54, *v55);
                if ((result & 1) == 0)
                {
                  v81 = *v55;
                  do
                  {
                    v56 = v54;
                    *v55 = *v54;
                    if (v50 < v53)
                      break;
                    v57 = (2 * v53) | 1;
                    v54 = &v8[v57];
                    v58 = 2 * v53 + 2;
                    if (v58 < v13 && sub_1C62377A8(a3, *v54, v54[1]))
                    {
                      ++v54;
                      v57 = v58;
                    }
                    result = sub_1C62377A8(a3, *v54, v81);
                    v55 = v56;
                    v53 = v57;
                  }
                  while (!(_DWORD)result);
                  *v56 = v81;
                }
              }
              v51 = v52 - 1;
            }
            while (v52);
            do
            {
              v59 = 0;
              v60 = *v8;
              v61 = v13 - 2;
              if (v13 < 2)
                v61 = v13 - 1;
              v62 = v61 >> 1;
              v63 = v8;
              do
              {
                v64 = &v63[v59 + 1];
                v65 = (2 * v59) | 1;
                v66 = 2 * v59 + 2;
                if (v66 < v13)
                {
                  result = sub_1C62377A8(a3, *v64, v63[v59 + 2]);
                  if ((_DWORD)result)
                  {
                    ++v64;
                    v65 = v66;
                  }
                }
                *v63 = *v64;
                v63 = v64;
                v59 = v65;
              }
              while (v65 <= v62);
              v67 = a2 - 1;
              v41 = v64 == --a2;
              if (v41)
              {
                *v64 = v60;
              }
              else
              {
                *v64 = *v67;
                *v67 = v60;
                v68 = (char *)v64 - (char *)v8 + 8;
                if (v68 >= 9)
                {
                  v69 = (((unint64_t)v68 >> 3) - 2) >> 1;
                  v70 = &v8[v69];
                  result = sub_1C62377A8(a3, *v70, *v64);
                  if ((_DWORD)result)
                  {
                    v71 = *v64;
                    do
                    {
                      v72 = v70;
                      *v64 = *v70;
                      if (!v69)
                        break;
                      v69 = (v69 - 1) >> 1;
                      v70 = &v8[v69];
                      result = sub_1C62377A8(a3, *v70, v71);
                      v64 = v72;
                    }
                    while ((result & 1) != 0);
                    *v72 = v71;
                  }
                }
              }
            }
            while (v13-- > 2);
          }
          return result;
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = &v11[(unint64_t)v13 >> 1];
        if ((unint64_t)v12 < 0x401)
        {
          sub_1C53C0538(&v8[(unint64_t)v13 >> 1], v8, v10, a3);
        }
        else
        {
          sub_1C53C0538(v8, &v8[(unint64_t)v13 >> 1], v10, a3);
          sub_1C53C0538(v8 + 1, v15 - 1, a2 - 2, a3);
          sub_1C53C0538(v8 + 2, &v8[v14 + 1], a2 - 3, a3);
          sub_1C53C0538(v15 - 1, &v8[(unint64_t)v13 >> 1], &v8[v14 + 1], a3);
          v16 = *v8;
          *v8 = *v15;
          *v15 = v16;
        }
        --a4;
        if ((a5 & 1) == 0 && !sub_1C62377A8(a3, *(v8 - 1), *v8))
        {
          v31 = *v8;
          result = sub_1C62377A8(a3, *v8, *v10);
          if ((result & 1) != 0)
          {
            v11 = v8;
            do
            {
              v32 = v11[1];
              ++v11;
              result = sub_1C62377A8(a3, v31, v32);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v39 = v8 + 1;
            do
            {
              v11 = v39;
              if (v39 >= v9)
                break;
              ++v39;
              result = sub_1C62377A8(a3, v31, *v11);
            }
            while (!(_DWORD)result);
          }
          v33 = v9;
          if (v11 < v9)
          {
            v33 = v9;
            do
            {
              v34 = *--v33;
              result = sub_1C62377A8(a3, v31, v34);
            }
            while ((result & 1) != 0);
          }
          while (v11 < v33)
          {
            v35 = *v11;
            *v11 = *v33;
            *v33 = v35;
            do
            {
              v36 = v11[1];
              ++v11;
            }
            while (!sub_1C62377A8(a3, v31, v36));
            do
            {
              v37 = *--v33;
              result = sub_1C62377A8(a3, v31, v37);
            }
            while ((result & 1) != 0);
          }
          v38 = v11 - 1;
          if (v11 - 1 != v8)
            *v8 = *v38;
          a5 = 0;
          *v38 = v31;
          continue;
        }
        v17 = 0;
        v18 = *v8;
        while (sub_1C62377A8(a3, v8[++v17], v18))
          ;
        v20 = &v8[v17];
        if (v17 == 1)
        {
          v9 = a2;
          do
          {
            if (v20 >= v9)
              break;
            v30 = *--v9;
          }
          while (!sub_1C62377A8(a3, v30, v18));
        }
        else
        {
          do
            v21 = *--v9;
          while (!sub_1C62377A8(a3, v21, v18));
        }
        if (v20 >= v9)
        {
          v27 = v20 - 1;
        }
        else
        {
          v22 = &v8[v17];
          v23 = v9;
          do
          {
            v24 = *v22;
            *v22 = *v23;
            *v23 = v24;
            do
            {
              v25 = v22[1];
              ++v22;
            }
            while (sub_1C62377A8(a3, v25, v18));
            do
              v26 = *--v23;
            while (!sub_1C62377A8(a3, v26, v18));
          }
          while (v22 < v23);
          v27 = v22 - 1;
        }
        if (v27 != v8)
          *v8 = *v27;
        *v27 = v18;
        v28 = v20 >= v9;
        v9 = a2;
        if (!v28)
        {
LABEL_28:
          result = sub_1C53C39AC(v8, v27, a3, a4, a5 & 1);
          a5 = 0;
          v11 = v27 + 1;
          continue;
        }
        v29 = sub_1C53C40FC(v8, v27, a3);
        v11 = v27 + 1;
        result = sub_1C53C40FC(v27 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_28;
        }
        a2 = v27;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1C53C40FC(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sub_1C62377A8(a3, *(a2 - 1), *a1))
      {
        v16 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v16;
      }
      return 1;
    case 3:
      sub_1C53C0538(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1C53C07C4(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1C53C0878(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C53C0538(a1, a1 + 1, a1 + 2, a3);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    if (sub_1C62377A8(a3, *v9, *v8))
    {
      v12 = *v9;
      v13 = v10;
      while (1)
      {
        v14 = (char *)a1 + v13;
        *(uint64_t *)((char *)a1 + v13 + 24) = *(uint64_t *)((char *)a1 + v13 + 16);
        if (v13 == -16)
          break;
        v13 -= 8;
        if (!sub_1C62377A8(a3, v12, *((_QWORD *)v14 + 1)))
        {
          v15 = (uint64_t *)((char *)a1 + v13 + 24);
          goto LABEL_11;
        }
      }
      v15 = a1;
LABEL_11:
      *v15 = v12;
      if (++v11 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v10 += 8;
    result = 1;
    if (++v9 == a2)
      return result;
  }
}

uint64_t sub_1C53C42A4(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  BOOL v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  BOOL v41;
  char v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  int64_t v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = a2;
  v10 = a2 - 1;
  v11 = v8;
  while (2)
  {
    v8 = v11;
    v12 = (char *)v9 - (char *)v11;
    v13 = v9 - v11;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = sub_1C6237938(a3, *(a2 - 1), *v11);
        if ((_DWORD)result)
        {
          v80 = *v11;
          *v11 = *(a2 - 1);
          *(a2 - 1) = v80;
        }
        return result;
      case 3:
        return sub_1C53C49F4(v11, v11 + 1, v10, a3);
      case 4:
        return sub_1C53C4C80(v11, v11 + 1, v11 + 2, v10, a3);
      case 5:
        return sub_1C53C4D34(v11, v11 + 1, v11 + 2, v11 + 3, v10, a3);
      default:
        if (v12 <= 191)
        {
          v40 = v11 + 1;
          v41 = v11 == v9 || v40 == v9;
          v42 = v41;
          if ((a5 & 1) != 0)
          {
            if ((v42 & 1) == 0)
            {
              v43 = 0;
              v44 = v11;
              do
              {
                v46 = *v44;
                v45 = v44[1];
                v44 = v40;
                result = sub_1C6237938(a3, v45, v46);
                if ((_DWORD)result)
                {
                  v47 = *v44;
                  v48 = v43;
                  while (1)
                  {
                    *(uint64_t *)((char *)v11 + v48 + 8) = *(uint64_t *)((char *)v11 + v48);
                    if (!v48)
                      break;
                    result = sub_1C6237938(a3, v47, *(uint64_t *)((char *)v11 + v48 - 8));
                    v48 -= 8;
                    if ((result & 1) == 0)
                    {
                      v49 = (uint64_t *)((char *)v11 + v48 + 8);
                      goto LABEL_73;
                    }
                  }
                  v49 = v11;
LABEL_73:
                  *v49 = v47;
                }
                v40 = v44 + 1;
                v43 += 8;
              }
              while (v44 + 1 != a2);
            }
          }
          else if ((v42 & 1) == 0)
          {
            do
            {
              v75 = *v8;
              v74 = v8[1];
              v8 = v40;
              result = sub_1C6237938(a3, v74, v75);
              if ((_DWORD)result)
              {
                v76 = *v8;
                v77 = v8;
                do
                {
                  v78 = v77;
                  v79 = *--v77;
                  *v78 = v79;
                  result = sub_1C6237938(a3, v76, *(v78 - 2));
                }
                while ((result & 1) != 0);
                *v77 = v76;
              }
              v40 = v8 + 1;
            }
            while (v8 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v11 != v9)
          {
            v50 = (unint64_t)(v13 - 2) >> 1;
            v51 = v50;
            do
            {
              v52 = v51;
              if (v50 >= v51)
              {
                v53 = (2 * v51) | 1;
                v54 = &v8[v53];
                if (2 * v51 + 2 < v13 && sub_1C6237938(a3, *v54, v54[1]))
                {
                  ++v54;
                  v53 = 2 * v52 + 2;
                }
                v55 = &v8[v52];
                result = sub_1C6237938(a3, *v54, *v55);
                if ((result & 1) == 0)
                {
                  v81 = *v55;
                  do
                  {
                    v56 = v54;
                    *v55 = *v54;
                    if (v50 < v53)
                      break;
                    v57 = (2 * v53) | 1;
                    v54 = &v8[v57];
                    v58 = 2 * v53 + 2;
                    if (v58 < v13 && sub_1C6237938(a3, *v54, v54[1]))
                    {
                      ++v54;
                      v57 = v58;
                    }
                    result = sub_1C6237938(a3, *v54, v81);
                    v55 = v56;
                    v53 = v57;
                  }
                  while (!(_DWORD)result);
                  *v56 = v81;
                }
              }
              v51 = v52 - 1;
            }
            while (v52);
            do
            {
              v59 = 0;
              v60 = *v8;
              v61 = v13 - 2;
              if (v13 < 2)
                v61 = v13 - 1;
              v62 = v61 >> 1;
              v63 = v8;
              do
              {
                v64 = &v63[v59 + 1];
                v65 = (2 * v59) | 1;
                v66 = 2 * v59 + 2;
                if (v66 < v13)
                {
                  result = sub_1C6237938(a3, *v64, v63[v59 + 2]);
                  if ((_DWORD)result)
                  {
                    ++v64;
                    v65 = v66;
                  }
                }
                *v63 = *v64;
                v63 = v64;
                v59 = v65;
              }
              while (v65 <= v62);
              v67 = a2 - 1;
              v41 = v64 == --a2;
              if (v41)
              {
                *v64 = v60;
              }
              else
              {
                *v64 = *v67;
                *v67 = v60;
                v68 = (char *)v64 - (char *)v8 + 8;
                if (v68 >= 9)
                {
                  v69 = (((unint64_t)v68 >> 3) - 2) >> 1;
                  v70 = &v8[v69];
                  result = sub_1C6237938(a3, *v70, *v64);
                  if ((_DWORD)result)
                  {
                    v71 = *v64;
                    do
                    {
                      v72 = v70;
                      *v64 = *v70;
                      if (!v69)
                        break;
                      v69 = (v69 - 1) >> 1;
                      v70 = &v8[v69];
                      result = sub_1C6237938(a3, *v70, v71);
                      v64 = v72;
                    }
                    while ((result & 1) != 0);
                    *v72 = v71;
                  }
                }
              }
            }
            while (v13-- > 2);
          }
          return result;
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = &v11[(unint64_t)v13 >> 1];
        if ((unint64_t)v12 < 0x401)
        {
          sub_1C53C49F4(&v8[(unint64_t)v13 >> 1], v8, v10, a3);
        }
        else
        {
          sub_1C53C49F4(v8, &v8[(unint64_t)v13 >> 1], v10, a3);
          sub_1C53C49F4(v8 + 1, v15 - 1, a2 - 2, a3);
          sub_1C53C49F4(v8 + 2, &v8[v14 + 1], a2 - 3, a3);
          sub_1C53C49F4(v15 - 1, &v8[(unint64_t)v13 >> 1], &v8[v14 + 1], a3);
          v16 = *v8;
          *v8 = *v15;
          *v15 = v16;
        }
        --a4;
        if ((a5 & 1) == 0 && !sub_1C6237938(a3, *(v8 - 1), *v8))
        {
          v31 = *v8;
          result = sub_1C6237938(a3, *v8, *v10);
          if ((result & 1) != 0)
          {
            v11 = v8;
            do
            {
              v32 = v11[1];
              ++v11;
              result = sub_1C6237938(a3, v31, v32);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v39 = v8 + 1;
            do
            {
              v11 = v39;
              if (v39 >= v9)
                break;
              ++v39;
              result = sub_1C6237938(a3, v31, *v11);
            }
            while (!(_DWORD)result);
          }
          v33 = v9;
          if (v11 < v9)
          {
            v33 = v9;
            do
            {
              v34 = *--v33;
              result = sub_1C6237938(a3, v31, v34);
            }
            while ((result & 1) != 0);
          }
          while (v11 < v33)
          {
            v35 = *v11;
            *v11 = *v33;
            *v33 = v35;
            do
            {
              v36 = v11[1];
              ++v11;
            }
            while (!sub_1C6237938(a3, v31, v36));
            do
            {
              v37 = *--v33;
              result = sub_1C6237938(a3, v31, v37);
            }
            while ((result & 1) != 0);
          }
          v38 = v11 - 1;
          if (v11 - 1 != v8)
            *v8 = *v38;
          a5 = 0;
          *v38 = v31;
          continue;
        }
        v17 = 0;
        v18 = *v8;
        while (sub_1C6237938(a3, v8[++v17], v18))
          ;
        v20 = &v8[v17];
        if (v17 == 1)
        {
          v9 = a2;
          do
          {
            if (v20 >= v9)
              break;
            v30 = *--v9;
          }
          while (!sub_1C6237938(a3, v30, v18));
        }
        else
        {
          do
            v21 = *--v9;
          while (!sub_1C6237938(a3, v21, v18));
        }
        if (v20 >= v9)
        {
          v27 = v20 - 1;
        }
        else
        {
          v22 = &v8[v17];
          v23 = v9;
          do
          {
            v24 = *v22;
            *v22 = *v23;
            *v23 = v24;
            do
            {
              v25 = v22[1];
              ++v22;
            }
            while (sub_1C6237938(a3, v25, v18));
            do
              v26 = *--v23;
            while (!sub_1C6237938(a3, v26, v18));
          }
          while (v22 < v23);
          v27 = v22 - 1;
        }
        if (v27 != v8)
          *v8 = *v27;
        *v27 = v18;
        v28 = v20 >= v9;
        v9 = a2;
        if (!v28)
        {
LABEL_28:
          result = sub_1C53C42A4(v8, v27, a3, a4, a5 & 1);
          a5 = 0;
          v11 = v27 + 1;
          continue;
        }
        v29 = sub_1C53C4AD8(v8, v27, a3);
        v11 = v27 + 1;
        result = sub_1C53C4AD8(v27 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_28;
        }
        a2 = v27;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1C53C49F4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL v8;
  _BOOL8 result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = sub_1C6237938(a4, *a2, *a1);
  result = sub_1C6237938(a4, *a3, *a2);
  if (v8)
  {
    v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      result = sub_1C6237938(a4, *a3, v10);
      if (result)
      {
        v11 = *a2;
        *a2 = *a3;
        *a3 = v11;
      }
    }
  }
  else if (result)
  {
    v12 = *a2;
    *a2 = *a3;
    *a3 = v12;
    result = sub_1C6237938(a4, *a2, *a1);
    if (result)
    {
      v13 = *a1;
      *a1 = *a2;
      *a2 = v13;
    }
  }
  return result;
}

BOOL sub_1C53C4AD8(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sub_1C6237938(a3, *(a2 - 1), *a1))
      {
        v16 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v16;
      }
      return 1;
    case 3:
      sub_1C53C49F4(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1C53C4C80(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1C53C4D34(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C53C49F4(a1, a1 + 1, a1 + 2, a3);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    if (sub_1C6237938(a3, *v9, *v8))
    {
      v12 = *v9;
      v13 = v10;
      while (1)
      {
        v14 = (char *)a1 + v13;
        *(uint64_t *)((char *)a1 + v13 + 24) = *(uint64_t *)((char *)a1 + v13 + 16);
        if (v13 == -16)
          break;
        v13 -= 8;
        if (!sub_1C6237938(a3, v12, *((_QWORD *)v14 + 1)))
        {
          v15 = (uint64_t *)((char *)a1 + v13 + 24);
          goto LABEL_11;
        }
      }
      v15 = a1;
LABEL_11:
      *v15 = v12;
      if (++v11 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v10 += 8;
    result = 1;
    if (++v9 == a2)
      return result;
  }
}

BOOL sub_1C53C4C80(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_1C53C49F4(a1, a2, a3, a5);
  result = sub_1C6237938(a5, *a4, *a3);
  if (result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = sub_1C6237938(a5, *a3, *a2);
    if (result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = sub_1C6237938(a5, *a2, *a1);
      if (result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

BOOL sub_1C53C4D34(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  _BOOL8 result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_1C53C4C80(a1, a2, a3, a4, a6);
  result = sub_1C6237938(a6, *a5, *a4);
  if (result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = sub_1C6237938(a6, *a4, *a3);
    if (result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = sub_1C6237938(a6, *a3, *a2);
      if (result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = sub_1C6237938(a6, *a2, *a1);
        if (result)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

void sub_1C53C4E10(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 || *(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 16);
    if (v2 > 4 * v1 && v2 >= 0x41)
    {
      sub_1C5157AA0(a1);
    }
    else
    {
      if ((_DWORD)v2)
      {
        v3 = 72 * v2;
        v4 = *(_QWORD *)a1 + 56;
        do
        {
          v5 = *(_QWORD *)(v4 - 56);
          if (v5 != -4096)
          {
            if (v5 != -8192)
            {
              v6 = *(void **)(v4 - 16);
              if ((void *)v4 != v6)
              {
                v9 = a1;
                v7 = v4;
                v8 = v3;
                free(v6);
                v4 = v7;
                v3 = v8;
                a1 = v9;
              }
            }
            *(_QWORD *)(v4 - 56) = -4096;
          }
          v4 += 72;
          v3 -= 72;
        }
        while (v3);
      }
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
}

char *sub_1C53C4ED0(char **a1, _BYTE *__src, _BYTE *a3)
{
  char *result;
  char *v7;
  char *v8;
  _QWORD *v9;
  int64_t v10;

  result = a1[2];
  v7 = *a1;
  if (result == *a1)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
    }
    result = (char *)operator new(8uLL);
    v7 = result;
    *a1 = result;
    a1[1] = result;
    v9 = a1 + 1;
    a1[2] = result + 8;
    v10 = a3 - __src;
    if (a3 != __src)
      result = (char *)memcpy(result, __src, a3 - __src);
  }
  else
  {
    v8 = a1[1];
    v9 = a1 + 1;
    v10 = a3 - __src;
    if (v8 != v7)
    {
      if (a3 == __src)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (__src != a3)
LABEL_10:
      result = (char *)memmove(v7, __src, a3 - __src);
  }
LABEL_11:
  *v9 = &v7[v10];
  return result;
}

uint64_t sub_1C53C4F9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = a2;
  if (!sub_1C4850EC8((uint64_t *)(a3 + 48), &v13, &v12)
    || v12 == *(_QWORD *)(a3 + 48) + 16 * *(unsigned int *)(a3 + 64)
    || (result = *(_QWORD *)(v12 + 8)) == 0)
  {
    v7 = *(_QWORD *)(a1 + 24);
    v8 = *(_DWORD *)(a1 + 40);
    v9 = sub_1C4F4C0E0(v7, v8, a2);
    if ((uint64_t *)(v7 + 72 * v8) == v9)
      v10 = 0;
    else
      v10 = v9[4];
    v11 = sub_1C53C4F9C(a1, v10, a3);
    return llvm::DominatorTreeBase<llvm::BasicBlock,true>::createChild(a3, a2, v11);
  }
  return result;
}

void sub_1C53C5060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t NearestCommonDominator;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  BOOL v23;
  char v24;
  _QWORD *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  char *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t *v50;
  char *v51;
  int v52;
  _OWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  int v69;
  BOOL v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unsigned int v83;
  char *v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  unsigned int v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  _BYTE v103[64];
  void *v104;
  uint64_t v105;
  _QWORD v106[9];
  uint64_t v107;
  _OWORD v108[4];
  void *v109;
  uint64_t v110;
  _BYTE v111[64];
  void *v112;
  uint64_t v113;
  _QWORD v114[10];

  v114[8] = *MEMORY[0x1E0C80C00];
  v97 = a4;
  if (a3 && *(_QWORD *)a4)
    NearestCommonDominator = llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator(a1, a3, *(_QWORD *)a4);
  else
    NearestCommonDominator = 0;
  v8 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(a1 + 24);
    LODWORD(v10) = ((NearestCommonDominator >> 4) ^ (NearestCommonDominator >> 9)) & (v8 - 1);
    v11 = (uint64_t *)(v9 + 16 * v10);
    v12 = *v11;
    if (NearestCommonDominator == *v11)
    {
LABEL_11:
      if (v11 != (uint64_t *)(v9 + 16 * v8))
      {
        v15 = v11[1];
        goto LABEL_14;
      }
    }
    else
    {
      v13 = 1;
      while (v12 != -4096)
      {
        v14 = v10 + v13++;
        v10 = v14 & (v8 - 1);
        v12 = *(_QWORD *)(v9 + 16 * v10);
        if (NearestCommonDominator == v12)
        {
          v11 = (uint64_t *)(v9 + 16 * v10);
          goto LABEL_11;
        }
      }
    }
  }
  v15 = 0;
LABEL_14:
  v16 = *(_DWORD *)(v15 + 16) + 1;
  if (v16 < *(_DWORD *)(a4 + 16))
  {
    v104 = v106;
    v105 = 0x800000001;
    v107 = 1;
    v108[0] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v108[1] = v108[0];
    v108[2] = v108[0];
    v108[3] = v108[0];
    v109 = v111;
    v110 = 0x800000000;
    v112 = v114;
    v113 = 0x800000000;
    v101 = v103;
    v102 = 0x800000000;
    v106[0] = a4;
    v17 = 1;
    v95 = v15;
    v94 = v97;
    v18 = ((v94 >> 4) ^ (v94 >> 9)) & 7;
    v19 = (_QWORD *)v108 + v18;
    v20 = *v19;
    if (v97 != *v19)
    {
      v21 = 0;
      v22 = 1;
      while (v20 != -4096)
      {
        if (v21)
          v23 = 0;
        else
          v23 = v20 == -8192;
        if (v23)
          v21 = v19;
        v24 = v18 + v22++;
        v18 = v24 & 7;
        v19 = (_QWORD *)v108 + v18;
        v20 = *v19;
        if (v97 == *v19)
          goto LABEL_29;
      }
      if (v21)
        v25 = v21;
      else
        v25 = v19;
      *sub_1C53C58DC((uint64_t)&v107, &v97, v25) = v94;
      v17 = v105;
    }
LABEL_29:
    if (v17)
    {
      do
      {
        v26 = v104;
        v27 = *(_QWORD *)v104;
        v28 = v17;
        if (v17 != 1)
        {
          v29 = 0;
          v30 = (char *)v104 + 8 * v17;
          v31 = ((unint64_t)v17 - 2) >> 1;
          v32 = v104;
          do
          {
            v33 = &v32[v29];
            v36 = v33[1];
            v34 = (char *)(v33 + 1);
            v35 = v36;
            v37 = (2 * v29) | 1;
            v38 = 2 * v29 + 2;
            if (v38 < v28 && *(_DWORD *)(v35 + 16) < *(_DWORD *)(*((_QWORD *)v34 + 1) + 16))
            {
              v35 = *((_QWORD *)v34 + 1);
              v34 += 8;
              v37 = v38;
            }
            *v32 = v35;
            v32 = v34;
            v29 = v37;
          }
          while (v37 <= v31);
          v39 = v30 - 8;
          if (v34 == v39)
          {
            *(_QWORD *)v34 = v27;
          }
          else
          {
            *(_QWORD *)v34 = *(_QWORD *)v39;
            *(_QWORD *)v39 = v27;
            v40 = v34 - v26 + 8;
            if (v40 >= 9)
            {
              v41 = (((unint64_t)v40 >> 3) - 2) >> 1;
              v42 = &v26[8 * v41];
              v43 = *(_QWORD *)v42;
              v44 = *(_QWORD *)v34;
              v45 = *(_DWORD *)(*(_QWORD *)v34 + 16);
              if (*(_DWORD *)(*(_QWORD *)v42 + 16) < v45)
              {
                do
                {
                  v46 = v42;
                  *(_QWORD *)v34 = v43;
                  if (!v41)
                    break;
                  v41 = (v41 - 1) >> 1;
                  v42 = &v26[8 * v41];
                  v43 = *(_QWORD *)v42;
                  v34 = v46;
                }
                while (*(_DWORD *)(*(_QWORD *)v42 + 16) < v45);
                *(_QWORD *)v46 = v44;
              }
            }
          }
        }
        LODWORD(v105) = v28 - 1;
        v47 = v110;
        if (v110 >= (unint64_t)HIDWORD(v110))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, (uint64_t)v111, v110 + 1, 8);
          v47 = v110;
        }
        *((_QWORD *)v109 + v47) = v27;
        LODWORD(v110) = v110 + 1;
        v48 = *(_DWORD *)(v27 + 16);
        while (1)
        {
          v49 = *(_QWORD *)v27;
          if (a2)
            sub_1C4ED7A6C(*(int **)(a2 + 8), v49, (uint64_t)&v98);
          else
            sub_1C53BFC54((char **)&v98, v49);
          v50 = (uint64_t *)v98;
          v51 = (char *)v98 + 8 * v99;
          if (v99)
          {
            while (1)
            {
              v55 = *(_QWORD *)(a1 + 24);
              v56 = *(unsigned int *)(a1 + 40);
              if ((_DWORD)v56)
              {
                LODWORD(v57) = (v56 - 1) & ((*v50 >> 4) ^ (*v50 >> 9));
                v58 = (uint64_t *)(v55 + 16 * v57);
                v59 = *v58;
                if (*v50 == *v58)
                  goto LABEL_60;
                v60 = 1;
                while (v59 != -4096)
                {
                  v61 = v57 + v60++;
                  v57 = v61 & (v56 - 1);
                  v59 = *(_QWORD *)(v55 + 16 * v57);
                  if (*v50 == v59)
                  {
                    v58 = (uint64_t *)(v55 + 16 * v57);
                    goto LABEL_60;
                  }
                }
              }
              v58 = (uint64_t *)(v55 + 16 * v56);
LABEL_60:
              v62 = v58[1];
              v96 = v62;
              v63 = *(_DWORD *)(v62 + 16);
              if (v63 > v16)
              {
                if ((v107 & 1) != 0)
                {
                  v52 = 8;
                  v53 = v108;
                }
                else
                {
                  v52 = DWORD2(v108[0]);
                  if (!DWORD2(v108[0]))
                  {
                    v54 = 0;
LABEL_77:
                    *sub_1C53C58DC((uint64_t)&v107, &v96, v54) = v62;
                    if (v63 <= v48)
                    {
                      v73 = v105;
                      if (v105 >= (unint64_t)HIDWORD(v105))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, (uint64_t)v106, v105 + 1, 8);
                        v73 = v105;
                      }
                      *((_QWORD *)v104 + v73) = v62;
                      v74 = (v105 + 1);
                      LODWORD(v105) = v74;
                      if (v74 >= 2)
                      {
                        v75 = (char *)v104;
                        v76 = (char *)v104 + 8 * v74;
                        v77 = (unint64_t)(v74 - 2) >> 1;
                        v78 = (char *)v104 + 8 * v77;
                        v79 = *(_QWORD *)v78;
                        v82 = *((_QWORD *)v76 - 1);
                        v81 = v76 - 8;
                        v80 = v82;
                        v83 = *(_DWORD *)(v82 + 16);
                        if (*(_DWORD *)(*(_QWORD *)v78 + 16) < v83)
                        {
                          do
                          {
                            v84 = v78;
                            *(_QWORD *)v81 = v79;
                            if (!v77)
                              break;
                            v77 = (v77 - 1) >> 1;
                            v78 = &v75[8 * v77];
                            v79 = *(_QWORD *)v78;
                            v81 = v84;
                          }
                          while (*(_DWORD *)(*(_QWORD *)v78 + 16) < v83);
                          *(_QWORD *)v84 = v80;
                        }
                      }
                    }
                    else
                    {
                      v72 = v102;
                      if (v102 >= (unint64_t)HIDWORD(v102))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v101, (uint64_t)v103, v102 + 1, 8);
                        v72 = v102;
                      }
                      *((_QWORD *)v101 + v72) = v62;
                      LODWORD(v102) = v102 + 1;
                    }
                    goto LABEL_88;
                  }
                  v53 = *(_OWORD **)&v108[0];
                }
                v64 = v52 - 1;
                v65 = v64 & ((v62 >> 4) ^ (v62 >> 9));
                v66 = (_QWORD *)v53 + v65;
                v67 = *v66;
                if (v62 != *v66)
                {
                  v68 = 0;
                  v69 = 1;
                  while (v67 != -4096)
                  {
                    if (v68)
                      v70 = 0;
                    else
                      v70 = v67 == -8192;
                    if (v70)
                      v68 = v66;
                    v71 = v65 + v69++;
                    v65 = v71 & v64;
                    v66 = (_QWORD *)v53 + v65;
                    v67 = *v66;
                    if (v62 == *v66)
                      goto LABEL_88;
                  }
                  if (v68)
                    v54 = v68;
                  else
                    v54 = v66;
                  goto LABEL_77;
                }
              }
LABEL_88:
              if (++v50 == (uint64_t *)v51)
              {
                v50 = (uint64_t *)v98;
                break;
              }
            }
          }
          if (v50 != &v100)
            free(v50);
          if (!(_DWORD)v102)
            break;
          v27 = *((_QWORD *)v101 + v102 - 1);
          LODWORD(v102) = v102 - 1;
        }
        v17 = v105;
      }
      while ((_DWORD)v105);
    }
    if ((_DWORD)v110)
    {
      v85 = (uint64_t *)v109;
      v86 = (uint64_t *)((char *)v109 + 8 * v110);
      do
      {
        v87 = *v85;
        v88 = *(_QWORD *)(*v85 + 8);
        if (v88 != v95)
        {
          v89 = *(_QWORD **)(v88 + 24);
          v90 = *(unsigned int *)(v88 + 32);
          v91 = &v89[v90];
          if ((_DWORD)v90)
          {
            v92 = 8 * v90;
            while (*v89 != v87)
            {
              ++v89;
              v92 -= 8;
              if (!v92)
              {
                v89 = v91;
                break;
              }
            }
          }
          if (v91 != v89 + 1)
          {
            memmove(v89, v89 + 1, (char *)v91 - (char *)(v89 + 1));
            LODWORD(v90) = *(_DWORD *)(v88 + 32);
          }
          *(_DWORD *)(v88 + 32) = v90 - 1;
          *(_QWORD *)(v87 + 8) = v95;
          v93 = *(unsigned int *)(v95 + 32);
          if (v93 >= *(unsigned int *)(v95 + 36))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v95 + 24, v95 + 40, v93 + 1, 8);
            v93 = *(unsigned int *)(v95 + 32);
          }
          *(_QWORD *)(*(_QWORD *)(v95 + 24) + 8 * v93) = v87;
          ++*(_DWORD *)(v95 + 32);
          llvm::DomTreeNodeBase<llvm::BasicBlock>::UpdateLevel(v87);
        }
        ++v85;
      }
      while (v85 != v86);
    }
    if (v101 != v103)
      free(v101);
    if (v112 != v114)
      free(v112);
    if (v109 != v111)
      free(v109);
    if ((v107 & 1) == 0)
      MEMORY[0x1CAA32FB4](*(_QWORD *)&v108[0], 8);
    if (v104 != v106)
      free(v104);
  }
}

uint64_t sub_1C53C5844(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;

  v3 = result + 8;
  if ((*(_BYTE *)result & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      v7 = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(result + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v12 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_16;
    }
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C53C58DC(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  _QWORD *v19;

  v5 = *(_DWORD *)a1;
  v6 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v7 = 8;
  else
    v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1C486D4BC(a1, 2 * v7);
    v10 = a1 + 8;
    v5 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v11 = 8;
    }
    else
    {
      v11 = *(_DWORD *)(a1 + 16);
      if (!v11)
      {
        v8 = 0;
        a3 = 0;
        goto LABEL_7;
      }
      v10 = *(_QWORD *)(a1 + 8);
    }
    v8 = *(_DWORD *)a1 & 1;
    v12 = v11 - 1;
    v13 = ((*a2 >> 4) ^ (*a2 >> 9)) & v12;
    a3 = (_QWORD *)(v10 + 8 * v13);
    v14 = *a3;
    if (*a2 != *a3)
    {
      v15 = 0;
      v16 = 1;
      while (v14 != -4096)
      {
        if (v15)
          v17 = 0;
        else
          v17 = v14 == -8192;
        if (v17)
          v15 = a3;
        v18 = v13 + v16++;
        v13 = v18 & v12;
        a3 = (_QWORD *)(v10 + 8 * v13);
        v14 = *a3;
        if (*a2 == *a3)
          goto LABEL_7;
      }
      if (v15)
        a3 = v15;
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 4) <= v7 >> 3)
    {
      sub_1C486D4BC(a1, v7);
      v19 = 0;
      sub_1C53C5844(a1, *a2, &v19);
      a3 = v19;
      v5 = *(_DWORD *)a1;
    }
    v8 = v5 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v5 & 0xFFFFFFFE | v8) + 2;
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 4);
  return a3;
}

void sub_1C53C5A50(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t NearestCommonDominator;
  uint64_t v12;
  unsigned int v13;
  int v14;
  _OWORD *v15;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  _QWORD *v24;
  unsigned int v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int64_t v31;
  char *v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  char *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  _OWORD *v58;
  int v59;
  unsigned int v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  int v64;
  BOOL v65;
  unsigned int v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  unsigned int v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  _BYTE v88[64];
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _OWORD v93[4];
  uint64_t *v94;
  uint64_t v95;
  _QWORD v96[10];
  _QWORD v97[10];

  v5 = a2;
  v97[8] = *MEMORY[0x1E0C80C00];
  v80 = a4;
  if (!**(_QWORD **)(a4 + 8))
  {
    v7 = *(_QWORD **)a1;
    v8 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v8)
    {
      v9 = 8 * v8;
      v10 = *(_QWORD **)a1;
      while (*v10 != *(_QWORD *)a4)
      {
        ++v10;
        v9 -= 8;
        if (!v9)
        {
          v10 = &v7[v8];
          break;
        }
      }
    }
    else
    {
      v10 = *(_QWORD **)a1;
    }
    if (v8 != v10 - v7)
    {
      sub_1C53BA93C(a1, a2);
      return;
    }
  }
  if (*a3 && *(_QWORD *)a4)
    NearestCommonDominator = llvm::DominatorTreeBase<llvm::BasicBlock,true>::findNearestCommonDominator(a1, *a3, *(_QWORD *)a4);
  else
    NearestCommonDominator = 0;
  v89 = (char *)NearestCommonDominator;
  v86 = 0;
  v12 = 0;
  if (sub_1C4850EC8((uint64_t *)(a1 + 48), &v89, &v86)
    && v86 != (void *)(*(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64)))
  {
    v12 = *((_QWORD *)v86 + 1);
  }
  v13 = *(_DWORD *)(v12 + 16) + 1;
  if (v13 < *(_DWORD *)(a4 + 16))
  {
    v89 = (char *)&v91;
    v90 = 0x800000000;
    v92 = 1;
    v93[0] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v93[1] = v93[0];
    v93[2] = v93[0];
    v93[3] = v93[0];
    v94 = v96;
    v95 = 0x800000000;
    v96[8] = v97;
    v96[9] = 0x800000000;
    v86 = v88;
    v87 = 0x800000000;
    sub_1C6237A78((uint64_t)&v89, a4);
    v78 = v12;
    if ((v92 & 1) != 0)
    {
      v14 = 8;
      v15 = v93;
    }
    else
    {
      v14 = DWORD2(v93[0]);
      if (!DWORD2(v93[0]))
      {
        v24 = 0;
        goto LABEL_35;
      }
      v15 = *(_OWORD **)&v93[0];
    }
    v16 = v14 - 1;
    v17 = v16 & ((a4 >> 4) ^ (a4 >> 9));
    v18 = (_QWORD *)v15 + v17;
    v19 = *v18;
    if (*v18 == a4)
    {
LABEL_36:
      v25 = v90;
      if (!(_DWORD)v90)
      {
LABEL_37:
        if ((_DWORD)v95)
        {
          v69 = v94;
          v70 = &v94[v95];
          do
          {
            v71 = *v69;
            v72 = *(_QWORD *)(*v69 + 8);
            if (v72 != v78)
            {
              v73 = *(_QWORD **)(v72 + 24);
              v74 = *(unsigned int *)(v72 + 32);
              v75 = &v73[v74];
              if ((_DWORD)v74)
              {
                v76 = 8 * v74;
                while (*v73 != v71)
                {
                  ++v73;
                  v76 -= 8;
                  if (!v76)
                  {
                    v73 = v75;
                    break;
                  }
                }
              }
              if (v75 != v73 + 1)
              {
                memmove(v73, v73 + 1, (char *)v75 - (char *)(v73 + 1));
                LODWORD(v74) = *(_DWORD *)(v72 + 32);
              }
              *(_DWORD *)(v72 + 32) = v74 - 1;
              *(_QWORD *)(v71 + 8) = v78;
              v77 = *(unsigned int *)(v78 + 32);
              if (v77 >= *(unsigned int *)(v78 + 36))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v78 + 24, v78 + 40, v77 + 1, 8);
                v77 = *(unsigned int *)(v78 + 32);
              }
              *(_QWORD *)(*(_QWORD *)(v78 + 24) + 8 * v77) = v71;
              ++*(_DWORD *)(v78 + 32);
              llvm::DomTreeNodeBase<llvm::BasicBlock>::UpdateLevel(v71);
            }
            ++v69;
          }
          while (v69 != v70);
        }
        sub_1C53C67A0(a1, v5);
        if (v86 != v88)
          free(v86);
        sub_1C6237ADC((uint64_t)&v89);
        return;
      }
      v79 = v5;
      while (1)
      {
        v26 = v89;
        v27 = *(_QWORD *)v89;
        v28 = v25;
        if (v25 != 1)
        {
          v29 = 0;
          v30 = &v89[8 * v25];
          v31 = ((unint64_t)v25 - 2) >> 1;
          v32 = v89;
          do
          {
            v33 = &v32[8 * v29];
            v36 = *((_QWORD *)v33 + 1);
            v34 = (uint64_t *)(v33 + 8);
            v35 = v36;
            v37 = (2 * v29) | 1;
            v38 = 2 * v29 + 2;
            if (v38 < v28 && *(_DWORD *)(v35 + 16) < *(_DWORD *)(v34[1] + 16))
            {
              v35 = v34[1];
              ++v34;
              v37 = v38;
            }
            *(_QWORD *)v32 = v35;
            v32 = (char *)v34;
            v29 = v37;
          }
          while (v37 <= v31);
          v39 = (uint64_t *)(v30 - 8);
          if (v34 == v39)
          {
            *v34 = v27;
          }
          else
          {
            *v34 = *v39;
            *v39 = v27;
            v40 = (char *)v34 - v26 + 8;
            if (v40 >= 9)
            {
              v41 = (((unint64_t)v40 >> 3) - 2) >> 1;
              v42 = &v26[8 * v41];
              v43 = *(_QWORD *)v42;
              v44 = *v34;
              v45 = *(_DWORD *)(*v34 + 16);
              if (*(_DWORD *)(*(_QWORD *)v42 + 16) < v45)
              {
                do
                {
                  v46 = v42;
                  *v34 = v43;
                  if (!v41)
                    break;
                  v41 = (v41 - 1) >> 1;
                  v42 = &v26[8 * v41];
                  v43 = *(_QWORD *)v42;
                  v34 = (uint64_t *)v46;
                }
                while (*(_DWORD *)(*(_QWORD *)v42 + 16) < v45);
                *(_QWORD *)v46 = v44;
              }
            }
          }
        }
        LODWORD(v90) = v28 - 1;
        v47 = v95;
        if (v95 >= (unint64_t)HIDWORD(v95))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, (uint64_t)v96, v95 + 1, 8);
          v47 = v95;
        }
        v94[v47] = v27;
        LODWORD(v95) = v95 + 1;
        v48 = *(_DWORD *)(v27 + 16);
        while (1)
        {
          v49 = *(_QWORD *)v27;
          if (v5)
            sub_1C53C36D0(*(_QWORD *)(v5 + 8), v49, (unsigned int *)&v83);
          else
            sub_1C53C38C8((unsigned int *)&v83, *(_QWORD *)(v49 + 8));
          v50 = (uint64_t *)v83;
          v51 = (uint64_t *)((char *)v83 + 8 * v84);
          if (v84)
          {
            while (1)
            {
              v52 = *v50;
              v81 = 0;
              v82 = v52;
              v53 = sub_1C4850EC8((uint64_t *)(a1 + 48), &v82, &v81);
              v54 = v81;
              if (!v53)
                v54 = *(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
              v55 = *(_QWORD *)(v54 + 8);
              v82 = v55;
              v56 = *(_DWORD *)(v55 + 16);
              if (v56 <= v13)
                goto LABEL_85;
              if ((v92 & 1) != 0)
              {
                v57 = 8;
                v58 = v93;
              }
              else
              {
                v57 = DWORD2(v93[0]);
                if (!DWORD2(v93[0]))
                {
                  v67 = 0;
LABEL_81:
                  *sub_1C53C58DC((uint64_t)&v92, &v82, v67) = v55;
                  if (v56 <= v48)
                  {
                    sub_1C6237A78((uint64_t)&v89, v55);
                  }
                  else
                  {
                    v68 = v87;
                    if (v87 >= (unint64_t)HIDWORD(v87))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, (uint64_t)v88, v87 + 1, 8);
                      v68 = v87;
                    }
                    *((_QWORD *)v86 + v68) = v55;
                    LODWORD(v87) = v87 + 1;
                  }
                  goto LABEL_85;
                }
                v58 = *(_OWORD **)&v93[0];
              }
              v59 = v57 - 1;
              v60 = v59 & ((v55 >> 4) ^ (v55 >> 9));
              v61 = (_QWORD *)v58 + v60;
              v62 = *v61;
              if (v55 != *v61)
              {
                v63 = 0;
                v64 = 1;
                while (v62 != -4096)
                {
                  if (v63)
                    v65 = 0;
                  else
                    v65 = v62 == -8192;
                  if (v65)
                    v63 = v61;
                  v66 = v60 + v64++;
                  v60 = v66 & v59;
                  v61 = (_QWORD *)v58 + v60;
                  v62 = *v61;
                  if (v55 == *v61)
                    goto LABEL_85;
                }
                if (v63)
                  v67 = v63;
                else
                  v67 = v61;
                goto LABEL_81;
              }
LABEL_85:
              if (++v50 == v51)
              {
                v50 = (uint64_t *)v83;
                break;
              }
            }
          }
          if (v50 != &v85)
            free(v50);
          if (!(_DWORD)v87)
            break;
          v27 = *((_QWORD *)v86 + v87 - 1);
          LODWORD(v87) = v87 - 1;
          v5 = v79;
        }
        v25 = v90;
        v5 = v79;
        if (!(_DWORD)v90)
          goto LABEL_37;
      }
    }
    v20 = 0;
    v21 = 1;
    while (v19 != -4096)
    {
      if (v20)
        v22 = 0;
      else
        v22 = v19 == -8192;
      if (v22)
        v20 = v18;
      v23 = v17 + v21++;
      v17 = v23 & v16;
      v18 = (_QWORD *)v15 + v17;
      v19 = *v18;
      if (*v18 == a4)
        goto LABEL_36;
    }
    if (v20)
      v24 = v20;
    else
      v24 = v18;
LABEL_35:
    *sub_1C53C58DC((uint64_t)&v92, &v80, v24) = a4;
    goto LABEL_36;
  }
}

void sub_1C53C612C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  int v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  _DWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  int v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t *v67;
  int v68;
  BOOL v69;
  unsigned int v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  int v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  unsigned int v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  _QWORD v88[66];

  v88[64] = *MEMORY[0x1E0C80C00];
  v80 = a2;
  v86 = v88;
  v88[0] = a2;
  v87 = 0x4000000001;
  v6 = *(_QWORD *)(a1 + 24);
  v75 = a1 + 24;
  v7 = *(_DWORD *)(a1 + 40);
  if (!v7)
    goto LABEL_15;
  v9 = v7 - 1;
  v10 = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v11 = (uint64_t *)(v6 + 72 * v10);
  v12 = *v11;
  if (*v11 == a2)
  {
LABEL_14:
    *(_DWORD *)(v6 + 72 * v10 + 12) = 0;
LABEL_15:
    v21 = 1;
LABEL_16:
    v76 = 0;
    while (1)
    {
      v22 = *((_QWORD *)v86 + v21 - 1);
      LODWORD(v87) = v21 - 1;
      v79 = v22;
      v23 = *(_DWORD *)(a1 + 40);
      if (v23)
      {
        v24 = *(_QWORD *)(a1 + 24);
        v25 = v23 - 1;
        v26 = v25 & ((v22 >> 4) ^ (v22 >> 9));
        v27 = (uint64_t *)(v24 + 72 * v26);
        v28 = *v27;
        if (v22 == *v27)
          goto LABEL_32;
        v29 = 0;
        v30 = 1;
        while (v28 != -4096)
        {
          if (v29)
            v31 = 0;
          else
            v31 = v28 == -8192;
          if (v31)
            v29 = v27;
          v32 = v26 + v30++;
          v26 = v32 & v25;
          v27 = (uint64_t *)(v24 + 72 * v26);
          v28 = *v27;
          if (v22 == *v27)
            goto LABEL_32;
        }
        if (v29)
          v33 = v29;
        else
          v33 = v27;
      }
      else
      {
        v33 = 0;
      }
      v27 = sub_1C53C2DB0(v75, &v79, v33);
      *v27 = v22;
      *(_OWORD *)(v27 + 5) = 0u;
      *(_OWORD *)(v27 + 1) = 0u;
      *(_OWORD *)(v27 + 3) = 0u;
      *(_OWORD *)(v27 + 7) = 0u;
      v27[5] = (uint64_t)(v27 + 7);
      *((_DWORD *)v27 + 13) = 2;
LABEL_32:
      if (!*((_DWORD *)v27 + 2))
      {
        *((_DWORD *)v27 + 4) = ++v76;
        *((_DWORD *)v27 + 2) = v76;
        v27[3] = v22;
        v35 = *(uint64_t **)(a1 + 8);
        v34 = *(_QWORD *)(a1 + 16);
        if ((unint64_t)v35 >= v34)
        {
          v37 = *(uint64_t **)a1;
          v38 = ((uint64_t)v35 - *(_QWORD *)a1) >> 3;
          v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 61)
            abort();
          v40 = v34 - (_QWORD)v37;
          if (v40 >> 2 > v39)
            v39 = v40 >> 2;
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
            v41 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v41 = v39;
          if (v41)
          {
            if (v41 >> 61)
              sub_1C4764EE4();
            v42 = (char *)operator new(8 * v41);
          }
          else
          {
            v42 = 0;
          }
          v43 = (uint64_t *)&v42[8 * v38];
          *v43 = v22;
          v36 = v43 + 1;
          if (v35 != v37)
          {
            do
            {
              v44 = *--v35;
              *--v43 = v44;
            }
            while (v35 != v37);
            v35 = *(uint64_t **)a1;
          }
          *(_QWORD *)a1 = v43;
          *(_QWORD *)(a1 + 8) = v36;
          *(_QWORD *)(a1 + 16) = &v42[8 * v41];
          if (v35)
            operator delete(v35);
        }
        else
        {
          *v35 = v22;
          v36 = v35 + 1;
        }
        *(_QWORD *)(a1 + 8) = v36;
        v45 = *(_QWORD *)(a1 + 48);
        if (v45)
          sub_1C53C36D0(*(_QWORD *)(v45 + 8), v79, (unsigned int *)&v83);
        else
          sub_1C53C38C8((unsigned int *)&v83, *(_QWORD *)(v79 + 8));
        v46 = (uint64_t *)v83;
        v47 = (uint64_t *)((char *)v83 + 8 * v84);
        if (v84)
        {
          while (1)
          {
            v48 = *v46;
            v78 = v48;
            v49 = *(_QWORD *)(a1 + 24);
            v50 = *(_DWORD *)(a1 + 40);
            v51 = sub_1C4F4C0E0(v49, v50, v48);
            if ((uint64_t *)(v49 + 72 * v50) == v51)
              break;
            v52 = v51;
            v53 = v79;
            if (!*((_DWORD *)v51 + 2))
              goto LABEL_59;
            if (v48 != v79)
            {
              v55 = v51 + 6;
              v54 = *((unsigned int *)v51 + 12);
              goto LABEL_85;
            }
LABEL_89:
            if (++v46 == v47)
            {
              v46 = (uint64_t *)v83;
              goto LABEL_92;
            }
          }
          v53 = v79;
LABEL_59:
          v81 = 0;
          v82 = v48;
          if (sub_1C4850EC8((uint64_t *)(a3 + 48), &v82, &v81))
          {
            v56 = v81;
            v57 = *(_QWORD *)(a3 + 48);
            v58 = *(unsigned int *)(a3 + 64);
          }
          else
          {
            v57 = *(_QWORD *)(a3 + 48);
            v58 = *(unsigned int *)(a3 + 64);
            v56 = v57 + 16 * v58;
          }
          if (v56 != v57 + 16 * v58)
          {
            v59 = *(_QWORD *)(v56 + 8);
            if (v59)
            {
              v60 = *(unsigned int *)(a4 + 8);
              if (v60 >= *(unsigned int *)(a4 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v60 + 1, 16);
                v60 = *(unsigned int *)(a4 + 8);
              }
              v61 = (uint64_t *)(*(_QWORD *)a4 + 16 * v60);
              *v61 = v53;
              v61[1] = v59;
              v55 = (_DWORD *)(a4 + 8);
              goto LABEL_88;
            }
          }
          v62 = *(_DWORD *)(a1 + 40);
          if (v62)
          {
            v63 = *(_QWORD *)(a1 + 24);
            v64 = v62 - 1;
            v65 = v64 & ((v48 >> 4) ^ (v48 >> 9));
            v52 = (uint64_t *)(v63 + 72 * v65);
            v66 = *v52;
            if (v48 != *v52)
            {
              v67 = 0;
              v68 = 1;
              while (v66 != -4096)
              {
                if (v67)
                  v69 = 0;
                else
                  v69 = v66 == -8192;
                if (v69)
                  v67 = v52;
                v70 = v65 + v68++;
                v65 = v70 & v64;
                v52 = (uint64_t *)(v63 + 72 * v65);
                v66 = *v52;
                if (v48 == *v52)
                  goto LABEL_82;
              }
              if (v67)
                v71 = v67;
              else
                v71 = v52;
LABEL_81:
              v52 = sub_1C53C2DB0(v75, &v78, v71);
              *v52 = v48;
              *(_OWORD *)(v52 + 5) = 0u;
              *(_OWORD *)(v52 + 1) = 0u;
              *(_OWORD *)(v52 + 3) = 0u;
              *(_OWORD *)(v52 + 7) = 0u;
              v52[5] = (uint64_t)(v52 + 7);
              *((_DWORD *)v52 + 13) = 2;
            }
LABEL_82:
            v72 = v87;
            if (v87 >= (unint64_t)HIDWORD(v87))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, (uint64_t)v88, v87 + 1, 8);
              v72 = v87;
            }
            *((_QWORD *)v86 + v72) = v48;
            LODWORD(v87) = v87 + 1;
            v55 = v52 + 6;
            v54 = *((unsigned int *)v52 + 12);
            *((_DWORD *)v52 + 3) = v76;
LABEL_85:
            if (v54 >= v55[1])
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v55 - 2), (uint64_t)(v52 + 7), v54 + 1, 8);
              v54 = *((unsigned int *)v52 + 12);
            }
            *(_QWORD *)(*((_QWORD *)v55 - 1) + 8 * v54) = v53;
LABEL_88:
            ++*v55;
            goto LABEL_89;
          }
          v71 = 0;
          goto LABEL_81;
        }
LABEL_92:
        if (v46 != &v85)
          free(v46);
      }
      v21 = v87;
      if (!(_DWORD)v87)
        goto LABEL_101;
    }
  }
  v13 = 1;
  v14 = *v11;
  v15 = v9 & ((a2 >> 4) ^ (a2 >> 9));
  do
  {
    if (v14 == -4096)
      goto LABEL_15;
    v16 = v15 + v13++;
    v15 = v16 & v9;
    v14 = *(_QWORD *)(v6 + 72 * v15);
  }
  while (v14 != a2);
  v17 = 0;
  v18 = 1;
  while (v12 != -4096)
  {
    if (v17)
      v19 = 0;
    else
      v19 = v12 == -8192;
    if (v19)
      v17 = v11;
    v20 = v10 + v18++;
    v10 = v20 & v9;
    v11 = (uint64_t *)(v6 + 72 * v10);
    v12 = *v11;
    if (*v11 == a2)
      goto LABEL_14;
  }
  if (v17)
    v73 = v17;
  else
    v73 = v11;
  v74 = sub_1C53C2DB0(v75, &v80, v73);
  *v74 = a2;
  *(_OWORD *)(v74 + 5) = 0u;
  *(_OWORD *)(v74 + 3) = 0u;
  *(_OWORD *)(v74 + 1) = 0u;
  *(_OWORD *)(v74 + 7) = 0u;
  v74[5] = (uint64_t)(v74 + 7);
  *((_DWORD *)v74 + 13) = 2;
  v21 = v87;
  if ((_DWORD)v87)
    goto LABEL_16;
LABEL_101:
  if (v86 != v88)
    free(v86);
}

uint64_t sub_1C53C6738(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;

  if (a2 - result >= 9)
  {
    v2 = (((unint64_t)(a2 - result) >> 3) - 2) >> 1;
    v3 = (_QWORD *)(result + 8 * v2);
    v4 = *v3;
    v7 = *(_QWORD *)(a2 - 8);
    v5 = (_QWORD *)(a2 - 8);
    v6 = v7;
    v8 = *(_DWORD *)(v7 + 16);
    if (*(_DWORD *)(*v3 + 16) < v8)
    {
      do
      {
        v9 = v3;
        *v5 = v4;
        if (!v2)
          break;
        v2 = (v2 - 1) >> 1;
        v3 = (_QWORD *)(result + 8 * v2);
        v4 = *v3;
        v5 = v9;
      }
      while (*(_DWORD *)(*v3 + 16) < v8);
      *v9 = v6;
    }
  }
  return result;
}

void sub_1C53C67A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  void *v8;
  int v9;
  _QWORD v10[9];

  v10[8] = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v5 = *(uint64_t **)a1;
    v6 = 8 * v2;
    while (1)
    {
      if (a2)
        sub_1C53C3160((uint64_t)&v8, *(_QWORD *)(a2 + 8), *v5);
      else
        sub_1C53C3404((char **)&v8, *v5);
      v7 = v9;
      if (v8 != v10)
        free(v8);
      if (v7)
        break;
      ++v5;
      v6 -= 8;
      if (!v6)
        return;
    }
    sub_1C53C0A54(a1, a2, (uint64_t)&v8);
    if (!sub_1C61ED220(*(uint64_t **)a1, *(_DWORD *)(a1 + 8), (uint64_t)&v8))
      sub_1C53BA93C(a1, a2);
    if (v8 != v10)
      free(v8);
  }
}

void sub_1C53C68B4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  BOOL v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;

  v7 = (uint64_t)(a1 + 3);
  v6 = a1[3];
  v8 = *a1;
  v9 = (uint64_t *)(*a1 + 8);
  v10 = *((_DWORD *)a1 + 10);
  if (v10)
  {
    v11 = v10 - 1;
    v12 = ((*v9 >> 4) ^ (*v9 >> 9)) & v11;
    v13 = (uint64_t *)(v6 + 72 * v12);
    v14 = *v13;
    if (*v9 == *v13)
      goto LABEL_16;
    v15 = 0;
    v16 = 1;
    while (v14 != -4096)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v14 == -8192;
      if (v17)
        v15 = v13;
      v18 = v12 + v16++;
      v12 = v18 & v11;
      v13 = (uint64_t *)(v6 + 72 * v12);
      v14 = *v13;
      if (*v9 == *v13)
        goto LABEL_16;
    }
    if (v15)
      v19 = v15;
    else
      v19 = v13;
  }
  else
  {
    v19 = 0;
  }
  v13 = sub_1C53BF8A4(v7, v9, v19);
  *v13 = *v9;
  *(_OWORD *)(v13 + 5) = 0u;
  *(_OWORD *)(v13 + 3) = 0u;
  *(_OWORD *)(v13 + 1) = 0u;
  *(_OWORD *)(v13 + 7) = 0u;
  v13[5] = (uint64_t)(v13 + 7);
  *((_DWORD *)v13 + 13) = 2;
  v8 = *a1;
LABEL_16:
  v13[4] = a3;
  v20 = a1[1] - v8;
  if (v20 != 8)
  {
    v21 = v20 >> 3;
    for (i = 1; i != v21; ++i)
    {
      v23 = *(_QWORD *)(*a1 + 8 * i);
      v58 = v23;
      v24 = *(_QWORD *)(a2 + 24);
      v25 = *(unsigned int *)(a2 + 40);
      v26 = v23 >> 4;
      if ((_DWORD)v25)
      {
        LODWORD(v27) = (v26 ^ (v23 >> 9)) & (v25 - 1);
        v28 = (uint64_t *)(v24 + 16 * v27);
        v29 = *v28;
        if (v23 == *v28)
        {
LABEL_24:
          if (v28 != (uint64_t *)(v24 + 16 * v25))
          {
            v32 = v28[1];
            goto LABEL_27;
          }
        }
        else
        {
          v30 = 1;
          while (v29 != -4096)
          {
            v31 = v27 + v30++;
            v27 = v31 & (v25 - 1);
            v29 = *(_QWORD *)(v24 + 16 * v27);
            if (v23 == v29)
            {
              v28 = (uint64_t *)(v24 + 16 * v27);
              goto LABEL_24;
            }
          }
        }
      }
      v32 = 0;
LABEL_27:
      v33 = *((_DWORD *)a1 + 10);
      if (v33)
      {
        v34 = a1[3];
        v35 = v26 ^ (v23 >> 9);
        v36 = v33 - 1;
        v37 = (v33 - 1) & v35;
        v38 = (uint64_t *)(v34 + 72 * v37);
        v39 = *v38;
        if (v23 == *v38)
        {
LABEL_37:
          if (!(_DWORD)v25)
            goto LABEL_49;
          goto LABEL_38;
        }
        v40 = 0;
        v41 = 1;
        while (v39 != -4096)
        {
          if (v40)
            v42 = 0;
          else
            v42 = v39 == -8192;
          if (v42)
            v40 = v38;
          v43 = v37 + v41++;
          v37 = v43 & v36;
          v38 = (uint64_t *)(v34 + 72 * v37);
          v39 = *v38;
          if (v23 == *v38)
            goto LABEL_37;
        }
        if (v40)
          v51 = v40;
        else
          v51 = v38;
      }
      else
      {
        v51 = 0;
      }
      v38 = sub_1C53BF8A4(v7, &v58, v51);
      *v38 = v23;
      *(_OWORD *)(v38 + 5) = 0u;
      *(_OWORD *)(v38 + 1) = 0u;
      *(_OWORD *)(v38 + 3) = 0u;
      *(_OWORD *)(v38 + 7) = 0u;
      v38[5] = (uint64_t)(v38 + 7);
      *((_DWORD *)v38 + 13) = 2;
      v24 = *(_QWORD *)(a2 + 24);
      LODWORD(v25) = *(_DWORD *)(a2 + 40);
      if (!(_DWORD)v25)
        goto LABEL_49;
LABEL_38:
      v44 = v38[4];
      LODWORD(v45) = ((v44 >> 4) ^ (v44 >> 9)) & (v25 - 1);
      v46 = (uint64_t *)(v24 + 16 * v45);
      v47 = *v46;
      if (v44 != *v46)
      {
        v48 = 1;
        while (v47 != -4096)
        {
          v49 = v45 + v48++;
          v45 = v49 & (v25 - 1);
          v47 = *(_QWORD *)(v24 + 16 * v45);
          if (v44 == v47)
          {
            v46 = (uint64_t *)(v24 + 16 * v45);
            goto LABEL_43;
          }
        }
LABEL_49:
        v50 = 0;
        goto LABEL_50;
      }
LABEL_43:
      if (v46 == (uint64_t *)(v24 + 16 * v25))
        goto LABEL_49;
      v50 = v46[1];
LABEL_50:
      v52 = *(_QWORD *)(v32 + 8);
      if (v52 != v50)
      {
        v53 = *(_QWORD **)(v52 + 24);
        v54 = *(unsigned int *)(v52 + 32);
        v55 = &v53[v54];
        if ((_DWORD)v54)
        {
          v56 = 8 * v54;
          while (*v53 != v32)
          {
            ++v53;
            v56 -= 8;
            if (!v56)
            {
              v53 = v55;
              break;
            }
          }
        }
        if (v55 != v53 + 1)
        {
          memmove(v53, v53 + 1, (char *)v55 - (char *)(v53 + 1));
          LODWORD(v54) = *(_DWORD *)(v52 + 32);
        }
        *(_DWORD *)(v52 + 32) = v54 - 1;
        *(_QWORD *)(v32 + 8) = v50;
        v57 = *(unsigned int *)(v50 + 32);
        if (v57 >= *(unsigned int *)(v50 + 36))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v50 + 24, v50 + 40, v57 + 1, 8);
          v57 = *(unsigned int *)(v50 + 32);
        }
        *(_QWORD *)(*(_QWORD *)(v50 + 24) + 8 * v57) = v32;
        ++*(_DWORD *)(v50 + 32);
        llvm::DomTreeNodeBase<llvm::BasicBlock>::UpdateLevel(v32);
      }
    }
  }
}

void sub_1C53C6C3C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 || *(_DWORD *)(a1 + 12))
  {
    v3 = *(unsigned int *)(a1 + 16);
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      sub_1C5157AA0(a1);
    }
    else
    {
      if ((_DWORD)v3)
      {
        v4 = 72 * v3;
        v5 = *(_QWORD *)a1 + 56;
        do
        {
          v6 = *(_QWORD *)(v5 - 56);
          if (v6 != -4096)
          {
            if (v6 != -8192)
            {
              v7 = *(void **)(v5 - 16);
              if ((void *)v5 != v7)
                free(v7);
            }
            *(_QWORD *)(v5 - 56) = -4096;
          }
          v5 += 72;
          v4 -= 72;
        }
        while (v4);
      }
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
}

unint64_t sub_1C53C6CF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t i;
  uint64_t *v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t j;
  uint64_t *v42;
  _QWORD *v44;
  int v45;
  BOOL v46;
  unsigned int v47;
  _QWORD *v48;
  int v49;
  BOOL v50;
  unsigned int v51;
  _QWORD *v52;
  unint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  unint64_t v60;

  v2 = *(unsigned int *)(a1 + 608);
  v3 = *(_QWORD *)(a1 + 600) + 16 * v2;
  v4 = *(_QWORD *)(v3 - 16);
  v5 = *(_QWORD *)(v3 - 8);
  *(_DWORD *)(a1 + 608) = v2 - 1;
  v6 = (v5 >> 2) & 1 ^ (*(_BYTE *)(a1 + 592) == 0);
  v60 = v4;
  v7 = a1 + 8;
  v8 = v4 >> 4;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v9 = 4;
    v10 = a1 + 8;
  }
  else
  {
    v9 = *(_DWORD *)(a1 + 16);
    if (!v9)
    {
      v52 = 0;
LABEL_53:
      v13 = sub_1C4E28620(a1, (uint64_t)&v60, &v60, v52);
      v53 = v60;
      *(_OWORD *)(v13 + 7) = 0u;
      *(_OWORD *)(v13 + 5) = 0u;
      *(_OWORD *)(v13 + 3) = 0u;
      *v13 = v53;
      v13[1] = v13 + 3;
      v13[2] = 0x200000000;
      v13[5] = v13 + 7;
      *((_DWORD *)v13 + 13) = 2;
      goto LABEL_5;
    }
    v10 = *(_QWORD *)(a1 + 8);
  }
  v11 = v9 - 1;
  v12 = v11 & (v8 ^ (v4 >> 9));
  v13 = (_QWORD *)(v10 + 72 * v12);
  v14 = *v13;
  if (*v13 != v4)
  {
    v44 = 0;
    v45 = 1;
    while (v14 != -4096)
    {
      if (v44)
        v46 = 0;
      else
        v46 = v14 == -8192;
      if (v46)
        v44 = v13;
      v47 = v12 + v45++;
      v12 = v47 & v11;
      v13 = (_QWORD *)(v10 + 72 * v12);
      v14 = *v13;
      if (*v13 == v4)
        goto LABEL_5;
    }
    if (v44)
      v52 = v44;
    else
      v52 = v13;
    goto LABEL_53;
  }
LABEL_5:
  v15 = (uint64_t)&v13[4 * v6 + 1];
  v16 = *(_DWORD *)(v15 + 8) - 1;
  *(_DWORD *)(v15 + 8) = v16;
  if (!v16 && !LODWORD(v13[4 * (v6 ^ 1) + 2]))
  {
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v17 = 4;
    }
    else
    {
      v17 = *(_DWORD *)(a1 + 16);
      if (!v17)
        goto LABEL_16;
      v7 = *(_QWORD *)(a1 + 8);
    }
    v18 = v17 - 1;
    v19 = v18 & (v8 ^ (v4 >> 9));
    v20 = (uint64_t *)(v7 + 72 * v19);
    v21 = *v20;
    if (*v20 == v4)
    {
LABEL_11:
      for (i = 0; i != -8; i -= 4)
      {
        v23 = (uint64_t *)v20[i + 5];
        if (&v20[i + 7] != v23)
          free(v23);
      }
      *v20 = -8192;
      v24 = *(_DWORD *)(a1 + 4) + 1;
      *(_DWORD *)a1 -= 2;
      *(_DWORD *)(a1 + 4) = v24;
    }
    else
    {
      v58 = 1;
      while (v21 != -4096)
      {
        v59 = v19 + v58++;
        v19 = v59 & v18;
        v20 = (uint64_t *)(v7 + 72 * v19);
        v21 = *v20;
        if (*v20 == v4)
          goto LABEL_11;
      }
    }
  }
LABEL_16:
  v25 = v5 & 0xFFFFFFFFFFFFFFF8;
  v60 = v5 & 0xFFFFFFFFFFFFFFF8;
  v26 = a1 + 304;
  v27 = (v5 & 0xFFFFFFF8) >> 4;
  if ((*(_BYTE *)(a1 + 296) & 1) != 0)
  {
    v28 = 4;
    v29 = a1 + 304;
  }
  else
  {
    v28 = *(_DWORD *)(a1 + 312);
    if (!v28)
    {
      v54 = 0;
LABEL_57:
      v32 = sub_1C4E28620(a1 + 296, (uint64_t)&v60, &v60, v54);
      v55 = v60;
      *(_OWORD *)(v32 + 7) = 0u;
      *(_OWORD *)(v32 + 5) = 0u;
      *(_OWORD *)(v32 + 3) = 0u;
      *v32 = v55;
      v32[1] = v32 + 3;
      v32[2] = 0x200000000;
      v32[5] = v32 + 7;
      *((_DWORD *)v32 + 13) = 2;
      goto LABEL_20;
    }
    v29 = *(_QWORD *)(a1 + 304);
  }
  v30 = v28 - 1;
  v31 = v30 & (v27 ^ (v25 >> 9));
  v32 = (_QWORD *)(v29 + 72 * v31);
  v33 = *v32;
  if (*v32 != v25)
  {
    v48 = 0;
    v49 = 1;
    while (v33 != -4096)
    {
      if (v48)
        v50 = 0;
      else
        v50 = v33 == -8192;
      if (v50)
        v48 = v32;
      v51 = v31 + v49++;
      v31 = v51 & v30;
      v32 = (_QWORD *)(v29 + 72 * v31);
      v33 = *v32;
      if (*v32 == v25)
        goto LABEL_20;
    }
    if (v48)
      v54 = v48;
    else
      v54 = v32;
    goto LABEL_57;
  }
LABEL_20:
  v34 = (uint64_t)&v32[4 * v6 + 1];
  v35 = *(_DWORD *)(v34 + 8) - 1;
  *(_DWORD *)(v34 + 8) = v35;
  if (!v35 && !LODWORD(v32[4 * (v6 ^ 1) + 2]))
  {
    if ((*(_BYTE *)(a1 + 296) & 1) != 0)
    {
      v36 = 4;
    }
    else
    {
      v36 = *(_DWORD *)(a1 + 312);
      if (!v36)
        return v4;
      v26 = *(_QWORD *)(a1 + 304);
    }
    v37 = v36 - 1;
    v38 = v37 & (v27 ^ (v25 >> 9));
    v39 = (uint64_t *)(v26 + 72 * v38);
    v40 = *v39;
    if (*v39 == v25)
    {
LABEL_26:
      for (j = 0; j != -8; j -= 4)
      {
        v42 = (uint64_t *)v39[j + 5];
        if (&v39[j + 7] != v42)
          free(v42);
      }
      *v39 = -8192;
      *(_DWORD *)(a1 + 296) -= 2;
      ++*(_DWORD *)(a1 + 300);
    }
    else
    {
      v56 = 1;
      while (v40 != -4096)
      {
        v57 = v38 + v56++;
        v38 = v57 & v37;
        v39 = (uint64_t *)(v26 + 72 * v38);
        v40 = *v39;
        if (*v39 == v25)
          goto LABEL_26;
      }
    }
  }
  return v4;
}

unint64_t sub_1C53C70F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  _DWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  unint64_t v15;

  v2 = *(unsigned int *)(a1 + 608);
  v3 = *(_QWORD *)(a1 + 600) + 16 * v2;
  v4 = *(_QWORD *)(v3 - 16);
  v5 = *(_QWORD *)(v3 - 8);
  *(_DWORD *)(a1 + 608) = v2 - 1;
  v6 = (v5 >> 2) & 1 ^ (*(_BYTE *)(a1 + 592) == 0);
  v15 = v4;
  v7 = sub_1C4E28F1C((_DWORD *)a1, (uint64_t *)&v15) + 1;
  v8 = &v7[4 * v6];
  v9 = *((_DWORD *)v8 + 2) - 1;
  *((_DWORD *)v8 + 2) = v9;
  if (!v9 && !LODWORD(v7[4 * (v6 ^ 1) + 1]))
  {
    v15 = v4;
    sub_1C53C71EC((_DWORD *)a1, &v15);
  }
  v10 = (_DWORD *)(a1 + 296);
  v15 = v5 & 0xFFFFFFFFFFFFFFF8;
  v11 = sub_1C4E28F1C(v10, (uint64_t *)&v15);
  v12 = (uint64_t)&v11[4 * v6 + 1];
  v13 = *(_DWORD *)(v12 + 8) - 1;
  *(_DWORD *)(v12 + 8) = v13;
  if (!v13 && !LODWORD(v11[4 * (v6 ^ 1) + 2]))
  {
    v15 = v5 & 0xFFFFFFFFFFFFFFF8;
    sub_1C53C71EC(v10, &v15);
  }
  return v4;
}

void sub_1C53C71EC(_DWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  _QWORD *v7;

  v7 = 0;
  if (sub_1C4E28FA8((uint64_t)a1, a2, &v7))
  {
    v3 = 0;
    v4 = v7;
    do
    {
      v5 = (_QWORD *)v4[v3 + 5];
      if (&v4[v3 + 7] != v5)
        free(v5);
      v3 -= 4;
    }
    while (v3 != -8);
    *v4 = -8192;
    v6 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v6;
  }
}

llvm::raw_ostream *sub_1C53C7270(unsigned int *a1)
{
  llvm::raw_ostream *v2;
  _DWORD *v3;
  _WORD *v4;
  _WORD *v5;
  llvm::raw_ostream *result;
  _BYTE *v7;

  v2 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
  if (a1 && *(_QWORD *)a1)
  {
    llvm::Value::printAsOperand(*(llvm::Value **)a1, v2, 0, 0);
  }
  else
  {
    v3 = (_DWORD *)*((_QWORD *)v2 + 4);
    if (*((_QWORD *)v2 + 3) - (_QWORD)v3 > 6uLL)
    {
      *(_DWORD *)((char *)v3 + 3) = 1920233580;
      *v3 = 1819047278;
      *((_QWORD *)v2 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v2, "nullptr", 7uLL);
    }
  }
  v4 = (_WORD *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v4 > 1uLL)
  {
    *v4 = 31520;
    *((_QWORD *)v2 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v2, " {", 2uLL);
  }
  sub_1C5E21910(v2, a1[18], 0, 0, 0);
  v5 = (_WORD *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v5 > 1uLL)
  {
    *v5 = 8236;
    *((_QWORD *)v2 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v2, ", ", 2uLL);
  }
  result = sub_1C5E21910(v2, a1[19], 0, 0, 0);
  v7 = (_BYTE *)*((_QWORD *)v2 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)v2 + 3))
    return llvm::raw_ostream::write(v2, 125);
  *((_QWORD *)v2 + 4) = v7 + 1;
  *v7 = 125;
  return result;
}

llvm::raw_ostream *sub_1C53C73D8(llvm *a1, unsigned int *a2, unsigned int *a3)
{
  llvm::raw_ostream *v6;
  void *v7;
  llvm *v8;
  llvm::raw_ostream *v9;
  _QWORD *v10;
  llvm *v11;
  llvm::raw_ostream *v12;
  void *v13;
  llvm::raw_ostream *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int **v18;
  uint64_t v19;
  llvm *v20;
  _WORD *v21;
  llvm::raw_ostream *v22;
  _BYTE *v23;
  llvm::raw_ostream *result;
  const char *v25;
  const char *v26;

  v6 = (llvm::raw_ostream *)llvm::errs(a1);
  v7 = (void *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 0x22uLL)
  {
    qmemcpy(v7, "Incorrect DFS numbers for:\n\tParent ", 35);
    *((_QWORD *)v6 + 4) += 35;
  }
  else
  {
    llvm::raw_ostream::write(v6, "Incorrect DFS numbers for:\n\tParent ", 0x23uLL);
  }
  v8 = sub_1C53C7270(*(unsigned int **)a1);
  v9 = (llvm::raw_ostream *)llvm::errs(v8);
  v10 = (_QWORD *)*((_QWORD *)v9 + 4);
  if (*((_QWORD *)v9 + 3) - (_QWORD)v10 > 7uLL)
  {
    *v10 = 0x20646C696843090ALL;
    *((_QWORD *)v9 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v9, "\n\tChild ", 8uLL);
  }
  v11 = sub_1C53C7270(a2);
  if (a3)
  {
    v12 = (llvm::raw_ostream *)llvm::errs(v11);
    v13 = (void *)*((_QWORD *)v12 + 4);
    if (*((_QWORD *)v12 + 3) - (_QWORD)v13 > 0xEuLL)
    {
      qmemcpy(v13, "\n\tSecond child ", 15);
      *((_QWORD *)v12 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v12, "\n\tSecond child ", 0xFuLL);
    }
    v11 = sub_1C53C7270(a3);
  }
  v14 = (llvm::raw_ostream *)llvm::errs(v11);
  v15 = (void *)*((_QWORD *)v14 + 4);
  if (*((_QWORD *)v14 + 3) - (_QWORD)v15 > 0xEuLL)
  {
    qmemcpy(v15, "\nAll children: ", 15);
    *((_QWORD *)v14 + 4) += 15;
  }
  else
  {
    v14 = llvm::raw_ostream::write(v14, "\nAll children: ", 0xFuLL);
  }
  v16 = *((_QWORD *)a1 + 1);
  v17 = *(unsigned int *)(v16 + 8);
  if ((_DWORD)v17)
  {
    v18 = *(unsigned int ***)v16;
    v19 = 8 * v17;
    do
    {
      v20 = sub_1C53C7270(*v18);
      v14 = (llvm::raw_ostream *)llvm::errs(v20);
      v21 = (_WORD *)*((_QWORD *)v14 + 4);
      if (*((_QWORD *)v14 + 3) - (_QWORD)v21 > 1uLL)
      {
        *v21 = 8236;
        *((_QWORD *)v14 + 4) += 2;
      }
      else
      {
        v14 = llvm::raw_ostream::write(v14, ", ", 2uLL);
      }
      ++v18;
      v19 -= 8;
    }
    while (v19);
  }
  v22 = (llvm::raw_ostream *)llvm::errs(v14);
  v23 = (_BYTE *)*((_QWORD *)v22 + 4);
  if ((unint64_t)v23 >= *((_QWORD *)v22 + 3))
  {
    v22 = llvm::raw_ostream::write(v22, 10);
  }
  else
  {
    *((_QWORD *)v22 + 4) = v23 + 1;
    *v23 = 10;
  }
  result = (llvm::raw_ostream *)llvm::errs(v22);
  v25 = (const char *)*((_QWORD *)result + 4);
  v26 = (const char *)*((_QWORD *)result + 2);
  if (v25 != v26)
  {
    *((_QWORD *)result + 4) = v26;
    return (llvm::raw_ostream *)llvm::raw_ostream::flush_tied_then_write(result, v26, v25 - v26);
  }
  return result;
}

uint64_t *sub_1C53C7610(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  BOOL v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t *v77;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v38 = *(a2 - 1);
        v39 = *v8;
        if (*(_DWORD *)(v38 + 72) < *(_DWORD *)(*v8 + 72))
        {
          *v8 = v38;
          *(a2 - 1) = v39;
        }
        return result;
      case 3:
        return sub_1C515A754(v8, v8 + 1, a2 - 1);
      case 4:
        return sub_1C515A94C(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        return sub_1C515A9E0(v8, v8 + 1, v8 + 2, v8 + 3, a2 - 1);
      default:
        if (v9 <= 191)
        {
          v40 = v8 + 1;
          v42 = v8 == a2 || v40 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v42)
            {
              v43 = 8;
              v44 = v8;
              do
              {
                v46 = *v44;
                v45 = v44[1];
                v44 = v40;
                v47 = *(_DWORD *)(v45 + 72);
                if (v47 < *(_DWORD *)(v46 + 72))
                {
                  v48 = v43;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v48) = v46;
                    v49 = v48 - 8;
                    if (v48 == 8)
                      break;
                    v46 = *(uint64_t *)((char *)v8 + v48 - 16);
                    v48 -= 8;
                    if (v47 >= *(_DWORD *)(v46 + 72))
                    {
                      v50 = (uint64_t *)((char *)v8 + v49);
                      goto LABEL_76;
                    }
                  }
                  v50 = v8;
LABEL_76:
                  *v50 = v45;
                }
                v40 = v44 + 1;
                v43 += 8;
              }
              while (v44 + 1 != a2);
            }
          }
          else if (!v42)
          {
            do
            {
              v80 = *v7;
              v79 = v7[1];
              v7 = v40;
              v81 = *(_DWORD *)(v79 + 72);
              if (v81 < *(_DWORD *)(v80 + 72))
              {
                do
                {
                  *v40 = v80;
                  v80 = *(v40 - 2);
                  --v40;
                }
                while (v81 < *(_DWORD *)(v80 + 72));
                *v40 = v79;
              }
              v40 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v51 = (unint64_t)(v10 - 2) >> 1;
            v52 = v51;
            do
            {
              v53 = v52;
              if (v51 >= v52)
              {
                v54 = (2 * v52) | 1;
                v55 = &v8[v54];
                v56 = *v55;
                if (2 * v53 + 2 < v10 && *(_DWORD *)(v56 + 72) < *(_DWORD *)(v55[1] + 72))
                {
                  v56 = v55[1];
                  ++v55;
                  v54 = 2 * v53 + 2;
                }
                result = &v8[v53];
                v57 = *result;
                v58 = *(_DWORD *)(*result + 72);
                if (*(_DWORD *)(v56 + 72) >= v58)
                {
                  do
                  {
                    v59 = v55;
                    *result = v56;
                    if (v51 < v54)
                      break;
                    v60 = (2 * v54) | 1;
                    v55 = &v8[v60];
                    v61 = 2 * v54 + 2;
                    v56 = *v55;
                    if (v61 < v10 && *(_DWORD *)(v56 + 72) < *(_DWORD *)(v55[1] + 72))
                    {
                      v56 = v55[1];
                      ++v55;
                      v60 = v61;
                    }
                    result = v59;
                    v54 = v60;
                  }
                  while (*(_DWORD *)(v56 + 72) >= v58);
                  *v59 = v57;
                }
              }
              v52 = v53 - 1;
            }
            while (v53);
            do
            {
              v62 = 0;
              v63 = *v8;
              v64 = v8;
              do
              {
                v65 = &v64[v62];
                v68 = v65[1];
                v66 = v65 + 1;
                v67 = v68;
                v69 = (2 * v62) | 1;
                v70 = 2 * v62 + 2;
                if (v70 < v10)
                {
                  result = (uint64_t *)*(unsigned int *)(v67 + 72);
                  if (result < *(_DWORD *)(v66[1] + 72))
                  {
                    v67 = v66[1];
                    ++v66;
                    v69 = v70;
                  }
                }
                *v64 = v67;
                v64 = v66;
                v62 = v69;
              }
              while (v69 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v66 == --a2)
              {
                *v66 = v63;
              }
              else
              {
                *v66 = *a2;
                *a2 = v63;
                v71 = (char *)v66 - (char *)v8 + 8;
                if (v71 >= 9)
                {
                  v72 = (((unint64_t)v71 >> 3) - 2) >> 1;
                  v73 = &v8[v72];
                  v74 = *v73;
                  v75 = *v66;
                  v76 = *(_DWORD *)(*v66 + 72);
                  if (*(_DWORD *)(*v73 + 72) < v76)
                  {
                    do
                    {
                      v77 = v73;
                      *v66 = v74;
                      if (!v72)
                        break;
                      v72 = (v72 - 1) >> 1;
                      v73 = &v8[v72];
                      v74 = *v73;
                      v66 = v77;
                    }
                    while (*(_DWORD *)(*v73 + 72) < v76);
                    *v77 = v75;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = sub_1C515A754(&v7[(unint64_t)v10 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_1C515A754(v7, &v7[(unint64_t)v10 >> 1], a2 - 1);
          sub_1C515A754(v7 + 1, v12 - 1, a2 - 2);
          sub_1C515A754(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = sub_1C515A754(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(_DWORD *)(v14 + 72);
          if (*(_DWORD *)(*(v7 - 1) + 72) < v15)
            goto LABEL_12;
          if (v15 >= *(_DWORD *)(*(a2 - 1) + 72))
          {
            v30 = v7 + 1;
            do
            {
              v8 = v30;
              if (v30 >= a2)
                break;
              ++v30;
            }
            while (v15 >= *(_DWORD *)(*v8 + 72));
          }
          else
          {
            v8 = v7;
            do
            {
              v29 = v8[1];
              ++v8;
            }
            while (v15 >= *(_DWORD *)(v29 + 72));
          }
          v31 = a2;
          if (v8 < a2)
          {
            v31 = a2;
            do
              v32 = *--v31;
            while (v15 < *(_DWORD *)(v32 + 72));
          }
          if (v8 < v31)
          {
            v33 = *v8;
            v34 = *v31;
            do
            {
              *v8 = v34;
              *v31 = v33;
              do
              {
                v35 = v8[1];
                ++v8;
                v33 = v35;
              }
              while (v15 >= *(_DWORD *)(v35 + 72));
              do
              {
                v36 = *--v31;
                v34 = v36;
              }
              while (v15 < *(_DWORD *)(v36 + 72));
            }
            while (v8 < v31);
          }
          v37 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v37;
          a4 = 0;
          *v37 = v14;
          continue;
        }
        v15 = *(_DWORD *)(v14 + 72);
LABEL_12:
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*(_DWORD *)(v17 + 72) < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*(_DWORD *)(v21 + 72) >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*(_DWORD *)(v20 + 72) >= v15);
        }
        if (v18 >= v19)
        {
          v27 = v18 - 1;
        }
        else
        {
          v22 = *v19;
          v23 = &v7[v16];
          v24 = v19;
          do
          {
            *v23 = v22;
            *v24 = v17;
            do
            {
              v25 = v23[1];
              ++v23;
              v17 = v25;
            }
            while (*(_DWORD *)(v25 + 72) < v15);
            do
            {
              v26 = *--v24;
              v22 = v26;
            }
            while (*(_DWORD *)(v26 + 72) >= v15);
          }
          while (v23 < v24);
          v27 = v23 - 1;
        }
        if (v27 != v7)
          *v7 = *v27;
        *v27 = v14;
        if (v18 < v19)
        {
LABEL_33:
          result = (uint64_t *)sub_1C53C7610(v7, v27, a3, a4 & 1);
          a4 = 0;
          v8 = v27 + 1;
          continue;
        }
        v28 = sub_1C53C7CA8(v7, v27);
        v8 = v27 + 1;
        result = (uint64_t *)sub_1C53C7CA8(v27 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_33;
        }
        a2 = v27;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1C53C7CA8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(_DWORD *)(v6 + 72) < *(_DWORD *)(*a1 + 72))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1C515A754(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C515A94C(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_1C515A9E0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C515A754(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = *(_DWORD *)(*v9 + 72);
    if (v14 < *(_DWORD *)(*v8 + 72))
    {
      v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(_DWORD *)(v13 + 72))
        {
          v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t *sub_1C53C7E18(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  BOOL v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t *v77;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v38 = *(a2 - 1);
        v39 = *v8;
        if (*(_DWORD *)(v38 + 72) < *(_DWORD *)(*v8 + 72))
        {
          *v8 = v38;
          *(a2 - 1) = v39;
        }
        return result;
      case 3:
        return sub_1C515A754(v8, v8 + 1, a2 - 1);
      case 4:
        return sub_1C515A94C(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        return sub_1C515A9E0(v8, v8 + 1, v8 + 2, v8 + 3, a2 - 1);
      default:
        if (v9 <= 191)
        {
          v40 = v8 + 1;
          v42 = v8 == a2 || v40 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v42)
            {
              v43 = 8;
              v44 = v8;
              do
              {
                v46 = *v44;
                v45 = v44[1];
                v44 = v40;
                v47 = *(_DWORD *)(v45 + 72);
                if (v47 < *(_DWORD *)(v46 + 72))
                {
                  v48 = v43;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v48) = v46;
                    v49 = v48 - 8;
                    if (v48 == 8)
                      break;
                    v46 = *(uint64_t *)((char *)v8 + v48 - 16);
                    v48 -= 8;
                    if (v47 >= *(_DWORD *)(v46 + 72))
                    {
                      v50 = (uint64_t *)((char *)v8 + v49);
                      goto LABEL_76;
                    }
                  }
                  v50 = v8;
LABEL_76:
                  *v50 = v45;
                }
                v40 = v44 + 1;
                v43 += 8;
              }
              while (v44 + 1 != a2);
            }
          }
          else if (!v42)
          {
            do
            {
              v80 = *v7;
              v79 = v7[1];
              v7 = v40;
              v81 = *(_DWORD *)(v79 + 72);
              if (v81 < *(_DWORD *)(v80 + 72))
              {
                do
                {
                  *v40 = v80;
                  v80 = *(v40 - 2);
                  --v40;
                }
                while (v81 < *(_DWORD *)(v80 + 72));
                *v40 = v79;
              }
              v40 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v51 = (unint64_t)(v10 - 2) >> 1;
            v52 = v51;
            do
            {
              v53 = v52;
              if (v51 >= v52)
              {
                v54 = (2 * v52) | 1;
                v55 = &v8[v54];
                v56 = *v55;
                if (2 * v53 + 2 < v10 && *(_DWORD *)(v56 + 72) < *(_DWORD *)(v55[1] + 72))
                {
                  v56 = v55[1];
                  ++v55;
                  v54 = 2 * v53 + 2;
                }
                result = &v8[v53];
                v57 = *result;
                v58 = *(_DWORD *)(*result + 72);
                if (*(_DWORD *)(v56 + 72) >= v58)
                {
                  do
                  {
                    v59 = v55;
                    *result = v56;
                    if (v51 < v54)
                      break;
                    v60 = (2 * v54) | 1;
                    v55 = &v8[v60];
                    v61 = 2 * v54 + 2;
                    v56 = *v55;
                    if (v61 < v10 && *(_DWORD *)(v56 + 72) < *(_DWORD *)(v55[1] + 72))
                    {
                      v56 = v55[1];
                      ++v55;
                      v60 = v61;
                    }
                    result = v59;
                    v54 = v60;
                  }
                  while (*(_DWORD *)(v56 + 72) >= v58);
                  *v59 = v57;
                }
              }
              v52 = v53 - 1;
            }
            while (v53);
            do
            {
              v62 = 0;
              v63 = *v8;
              v64 = v8;
              do
              {
                v65 = &v64[v62];
                v68 = v65[1];
                v66 = v65 + 1;
                v67 = v68;
                v69 = (2 * v62) | 1;
                v70 = 2 * v62 + 2;
                if (v70 < v10)
                {
                  result = (uint64_t *)*(unsigned int *)(v67 + 72);
                  if (result < *(_DWORD *)(v66[1] + 72))
                  {
                    v67 = v66[1];
                    ++v66;
                    v69 = v70;
                  }
                }
                *v64 = v67;
                v64 = v66;
                v62 = v69;
              }
              while (v69 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v66 == --a2)
              {
                *v66 = v63;
              }
              else
              {
                *v66 = *a2;
                *a2 = v63;
                v71 = (char *)v66 - (char *)v8 + 8;
                if (v71 >= 9)
                {
                  v72 = (((unint64_t)v71 >> 3) - 2) >> 1;
                  v73 = &v8[v72];
                  v74 = *v73;
                  v75 = *v66;
                  v76 = *(_DWORD *)(*v66 + 72);
                  if (*(_DWORD *)(*v73 + 72) < v76)
                  {
                    do
                    {
                      v77 = v73;
                      *v66 = v74;
                      if (!v72)
                        break;
                      v72 = (v72 - 1) >> 1;
                      v73 = &v8[v72];
                      v74 = *v73;
                      v66 = v77;
                    }
                    while (*(_DWORD *)(*v73 + 72) < v76);
                    *v77 = v75;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = sub_1C515A754(&v7[(unint64_t)v10 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_1C515A754(v7, &v7[(unint64_t)v10 >> 1], a2 - 1);
          sub_1C515A754(v7 + 1, v12 - 1, a2 - 2);
          sub_1C515A754(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = sub_1C515A754(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(_DWORD *)(v14 + 72);
          if (*(_DWORD *)(*(v7 - 1) + 72) < v15)
            goto LABEL_12;
          if (v15 >= *(_DWORD *)(*(a2 - 1) + 72))
          {
            v30 = v7 + 1;
            do
            {
              v8 = v30;
              if (v30 >= a2)
                break;
              ++v30;
            }
            while (v15 >= *(_DWORD *)(*v8 + 72));
          }
          else
          {
            v8 = v7;
            do
            {
              v29 = v8[1];
              ++v8;
            }
            while (v15 >= *(_DWORD *)(v29 + 72));
          }
          v31 = a2;
          if (v8 < a2)
          {
            v31 = a2;
            do
              v32 = *--v31;
            while (v15 < *(_DWORD *)(v32 + 72));
          }
          if (v8 < v31)
          {
            v33 = *v8;
            v34 = *v31;
            do
            {
              *v8 = v34;
              *v31 = v33;
              do
              {
                v35 = v8[1];
                ++v8;
                v33 = v35;
              }
              while (v15 >= *(_DWORD *)(v35 + 72));
              do
              {
                v36 = *--v31;
                v34 = v36;
              }
              while (v15 < *(_DWORD *)(v36 + 72));
            }
            while (v8 < v31);
          }
          v37 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v37;
          a4 = 0;
          *v37 = v14;
          continue;
        }
        v15 = *(_DWORD *)(v14 + 72);
LABEL_12:
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*(_DWORD *)(v17 + 72) < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*(_DWORD *)(v21 + 72) >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*(_DWORD *)(v20 + 72) >= v15);
        }
        if (v18 >= v19)
        {
          v27 = v18 - 1;
        }
        else
        {
          v22 = *v19;
          v23 = &v7[v16];
          v24 = v19;
          do
          {
            *v23 = v22;
            *v24 = v17;
            do
            {
              v25 = v23[1];
              ++v23;
              v17 = v25;
            }
            while (*(_DWORD *)(v25 + 72) < v15);
            do
            {
              v26 = *--v24;
              v22 = v26;
            }
            while (*(_DWORD *)(v26 + 72) >= v15);
          }
          while (v23 < v24);
          v27 = v23 - 1;
        }
        if (v27 != v7)
          *v7 = *v27;
        *v27 = v14;
        if (v18 < v19)
        {
LABEL_33:
          result = (uint64_t *)sub_1C53C7E18(v7, v27, a3, a4 & 1);
          a4 = 0;
          v8 = v27 + 1;
          continue;
        }
        v28 = sub_1C53C84B0(v7, v27);
        v8 = v27 + 1;
        result = (uint64_t *)sub_1C53C84B0(v27 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_33;
        }
        a2 = v27;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1C53C84B0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(_DWORD *)(v6 + 72) < *(_DWORD *)(*a1 + 72))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1C515A754(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C515A94C(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_1C515A9E0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C515A754(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = *(_DWORD *)(*v9 + 72);
    if (v14 < *(_DWORD *)(*v8 + 72))
    {
      v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(_DWORD *)(v13 + 72))
        {
          v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t sub_1C53C8620()
{
  __n128 v1;
  int v2;
  _BYTE *v3;

  v3 = &llvm::VerifyDomInfo;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Verify dominator info (time consuming)";
  v1.n128_u64[1] = 38;
  sub_1C61A1F40((llvm::cl::Option *)&unk_1ED804730, "verify-dom-info", &v3, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4EB22A8, &unk_1ED804730, &dword_1C475E000);
}

uint64_t llvm::convertStrToRoundingMode(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  result = 0;
  switch(a2)
  {
    case 12:
      v4 = *a1;
      v5 = *((_DWORD *)a1 + 2);
      if (v4 != 0x70752E646E756F72 || v5 != 1685217655)
        return 0;
      v7 = 2;
      return v7 | 0x100u;
    case 13:
      v8 = *a1;
      v9 = *(uint64_t *)((char *)a1 + 5);
      if (v8 != 0x79642E646E756F72 || v9 != 0x63696D616E79642ELL)
        return 0;
      v7 = 7;
      return v7 | 0x100u;
    case 14:
      v11 = *a1;
      v12 = *(uint64_t *)((char *)a1 + 6);
      if (v11 != 0x6F642E646E756F72 || v12 != 0x647261776E776F64)
        return 0;
      v7 = 3;
      return v7 | 0x100u;
    case 15:
      v14 = *a1;
      v15 = *(uint64_t *)((char *)a1 + 7);
      if (v14 != 0x6F742E646E756F72 || v15 != 0x7473657261656E6FLL)
        return 0;
      v7 = 1;
      return v7 | 0x100u;
    case 16:
      result = 0;
      v18 = *a1;
      v17 = a1[1];
      if (v18 != 0x6F742E646E756F72 || v17 != 0x6F72657A64726177)
        return result;
      v7 = 0;
      return v7 | 0x100u;
    case 19:
      v20 = *a1;
      v21 = a1[1];
      v22 = *(uint64_t *)((char *)a1 + 11);
      if (v20 != 0x6F742E646E756F72 || v21 != 0x617473657261656ELL || v22 != 0x7961776174736572)
        return 0;
      v7 = 4;
      return v7 | 0x100u;
    default:
      return result;
  }
}

uint64_t llvm::convertStrToExceptionBehavior(_QWORD *a1, uint64_t a2)
{
  int v4;

  if (a2 == 16)
  {
    if (*a1 != 0x7470656378657066 || a1[1] != 0x7061727479616D2ELL)
      return 0;
    v4 = 1;
  }
  else
  {
    if (a2 != 15)
      return 0;
    if (*a1 == 0x7470656378657066 && *(_QWORD *)((char *)a1 + 7) == 0x65726F6E67692E74)
    {
      v4 = 0;
    }
    else
    {
      if (*a1 != 0x7470656378657066 || *(_QWORD *)((char *)a1 + 7) != 0x7463697274732E74)
        return 0;
      v4 = 2;
    }
  }
  return v4 | 0x100u;
}

uint64_t llvm::getConstrainedIntrinsicID(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;

  result = 0;
  switch(*(_BYTE *)(a1 + 16))
  {
    case 'E':
      result = 93;
      break;
    case 'F':
      result = 92;
      break;
    case 'G':
      result = 118;
      break;
    case 'H':
      result = 115;
      break;
    case 'I':
      result = 94;
      break;
    case 'J':
      result = 91;
      break;
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'S':
      return result;
    case 'R':
      result = 84;
      break;
    case 'T':
      v3 = *(_QWORD *)(a1 - 32);
      if (v3
        && !*(_BYTE *)(v3 + 16)
        && *(_QWORD *)(v3 + 24) == *(_QWORD *)(a1 + 72)
        && (*(_BYTE *)(v3 + 33) & 0x20) != 0)
      {
        result = 0;
        v4 = *(_DWORD *)(v3 + 36);
        if (v4 > 191)
        {
          if (v4 <= 238)
          {
            switch(v4)
            {
              case 192:
                result = 104;
                break;
              case 193:
                result = 105;
                break;
              case 194:
              case 195:
              case 196:
              case 197:
              case 198:
              case 199:
              case 200:
                return result;
              case 201:
                result = 106;
                break;
              case 202:
                result = 107;
                break;
              case 203:
                result = 108;
                break;
              default:
                if (v4 == 238)
                  result = 109;
                break;
            }
          }
          else if (v4 <= 259)
          {
            switch(v4)
            {
              case 239:
                result = 110;
                break;
              case 258:
                result = 111;
                break;
              case 259:
                result = 112;
                break;
            }
          }
          else if (v4 > 279)
          {
            if (v4 == 280)
            {
              result = 116;
            }
            else if (v4 == 296)
            {
              result = 117;
            }
          }
          else if (v4 == 260)
          {
            result = 113;
          }
          else if (v4 == 273)
          {
            result = 114;
          }
        }
        else if (v4 > 141)
        {
          switch(v4)
          {
            case 169:
              result = 97;
              break;
            case 170:
              result = 98;
              break;
            case 171:
            case 172:
            case 173:
            case 174:
            case 178:
            case 179:
              return result;
            case 175:
              result = 99;
              break;
            case 176:
              result = 100;
              break;
            case 177:
              result = 101;
              break;
            case 180:
              result = 102;
              break;
            case 181:
              result = 103;
              break;
            default:
              if (v4 == 142)
              {
                result = 88;
              }
              else if (v4 == 143)
              {
                result = 90;
              }
              break;
          }
        }
        else if (v4 <= 74)
        {
          if (v4 == 14)
          {
            result = 79;
          }
          else if (v4 == 51)
          {
            result = 80;
          }
        }
        else
        {
          switch(v4)
          {
            case 75:
              result = 81;
              break;
            case 76:
              result = 82;
              break;
            case 140:
              result = 87;
              break;
          }
        }
      }
      else
      {
        result = 0;
      }
      break;
    default:
      switch(*(_BYTE *)(a1 + 16))
      {
        case '*':
          result = 83;
          break;
        case ',':
          result = 96;
          break;
        case '.':
          result = 89;
          break;
        case '1':
          result = 86;
          break;
        case '4':
          result = 95;
          break;
        default:
          return result;
      }
      break;
  }
  return result;
}

uint64_t llvm::SymbolTableListTraits<llvm::BasicBlock>::getListOwner(uint64_t a1)
{
  return a1 - 72;
}

uint64_t llvm::SymbolTableListTraits<llvm::BasicBlock>::getList(uint64_t a1)
{
  return a1 + 72;
}

uint64_t llvm::SymbolTableListTraits<llvm::BasicBlock>::getSymTab(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 104);
  return result;
}

int32x2_t llvm::SymbolTableListTraits<llvm::BasicBlock>::removeNodeFromList(uint64_t a1, llvm::BasicBlock *this)
{
  int32x2_t result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::BasicBlock *v11;
  int v12;
  int v13;
  uint64_t v14;
  size_t *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  size_t v18;
  int v19;
  size_t v20;
  unsigned __int8 *v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;

  llvm::BasicBlock::setParent(this, 0);
  if ((*((_BYTE *)this + 23) & 0x10) == 0)
    return result;
  v5 = *(uint64_t **)(a1 + 32);
  if (!v5)
    return result;
  v6 = ***(_QWORD ***)this;
  v7 = *(_QWORD *)(v6 + 152);
  v8 = *(unsigned int *)(v6 + 168);
  if ((_DWORD)v8)
  {
    LODWORD(v9) = (v8 - 1) & ((this >> 4) ^ (this >> 9));
    v10 = v7 + 16 * v9;
    v11 = *(llvm::BasicBlock **)v10;
    if (*(llvm::BasicBlock **)v10 == this)
      goto LABEL_9;
    v12 = 1;
    while (v11 != (llvm::BasicBlock *)-4096)
    {
      v13 = v9 + v12++;
      v9 = v13 & (v8 - 1);
      v11 = *(llvm::BasicBlock **)(v7 + 16 * v9);
      if (v11 == this)
      {
        v10 = v7 + 16 * v9;
        goto LABEL_9;
      }
    }
  }
  v10 = v7 + 16 * v8;
LABEL_9:
  v14 = *((unsigned int *)v5 + 2);
  if ((_DWORD)v14)
  {
    v15 = *(size_t **)(v10 + 8);
    v16 = *((unsigned int *)v5 + 5);
    v17 = (unsigned __int8 *)v15 + v16;
    v18 = *v15;
    if (*v15)
    {
      v19 = 0;
      v20 = *v15;
      v21 = v17;
      do
      {
        v22 = *v21++;
        v19 = 33 * v19 + v22;
        --v20;
      }
      while (v20);
    }
    else
    {
      v19 = 0;
    }
    v23 = v14 - 1;
    v24 = *v5;
    v25 = *v5 + 8 * v14 + 8;
    v26 = 1;
    v27 = v19;
    while (1)
    {
      v28 = v27 & v23;
      v29 = *(_QWORD **)(v24 + 8 * v28);
      if (v29 != (_QWORD *)-8)
      {
        if (!v29)
          return result;
        if (*(_DWORD *)(v25 + 4 * v28) == v19 && v18 == *v29 && (!v18 || !memcmp(v17, (char *)v29 + v16, v18)))
          break;
      }
      v27 = v26 + v28;
      ++v26;
    }
    *(_QWORD *)(v24 + 8 * (int)v28) = -8;
    result = vadd_s32(*(int32x2_t *)((char *)v5 + 12), (int32x2_t)0x1FFFFFFFFLL);
    *(uint64_t *)((char *)v5 + 12) = (uint64_t)result;
  }
  return result;
}

{
  return __ZN4llvm21SymbolTableListTraitsINS_10BasicBlockEE18removeNodeFromListEPS1_(a1, this);
}

uint64_t llvm::Argument::Argument(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned int v6;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 20) & 0xC0000000;
  *(_DWORD *)(a1 + 16) = 21;
  *(_DWORD *)(a1 + 20) = v6;
  *(_QWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 32) = a5;
  llvm::Value::setName((uint64_t ***)a1, a3);
  return a1;
}

{
  unsigned int v6;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 20) & 0xC0000000;
  *(_DWORD *)(a1 + 16) = 21;
  *(_DWORD *)(a1 + 20) = v6;
  *(_QWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 32) = a5;
  llvm::Value::setName((uint64_t ***)a1, a3);
  return a1;
}

uint64_t llvm::Argument::setParent(uint64_t this, Function *a2)
{
  *(_QWORD *)(this + 24) = a2;
  return this;
}

uint64_t llvm::Argument::hasNonNullAttr(llvm::Argument *this, char a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;

  v2 = *(_DWORD *)(*(_QWORD *)this + 8);
  if (v2 != 15)
    return 0;
  v3 = *((_QWORD *)this + 3);
  v4 = *(_QWORD *)(v3 + 112);
  if (!v4)
    return 0;
  v5 = (*((_DWORD *)this + 8) + 2);
  if (v5 >= *(_DWORD *)(v4 + 8))
    return 0;
  v7 = *(_QWORD *)(v4 + 40 + 8 * v5);
  if (!v7 || (v8 = *(char *)(v7 + 16), (v8 & 0x80000000) == 0) || (a2 & 1) == 0 && (v8 & 0x10) == 0)
  {
    v9 = *(_QWORD *)(v4 + 40 + 8 * v5);
    if (!v9 || (*(_BYTE *)(v9 + 21) & 0x10) == 0)
      return 0;
    v10 = (_QWORD *)(v9 + 48);
    v11 = 8 * *(unsigned int *)(v9 + 8) - 8 * *(unsigned int *)(v9 + 32);
    if (v11)
    {
      v12 = v11 >> 3;
      do
      {
        v13 = v12 >> 1;
        v14 = &v10[v12 >> 1];
        v15 = *v14;
        if (*v14)
          LODWORD(v15) = *(_DWORD *)(v15 + 12);
        v16 = v14 + 1;
        v12 += ~v13;
        if ((int)v15 < 76)
          v10 = v16;
        else
          v12 = v13;
      }
      while (v12);
    }
    if (!*(_QWORD *)(*v10 + 16))
      return 0;
    if ((v2 & 0xFE) == 0x12)
      v2 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)this + 16) + 8);
    if (v3)
    {
      if ((*(_BYTE *)(v4 + 17) & 1) == 0 && v2 <= 0xFF)
        return 1;
    }
    else if (v2 < 0x100)
    {
      return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t llvm::Function::hasParamAttribute(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 112);
  if (v3
    && (a2 + 2) < *(_DWORD *)(v3 + 8)
    && (v5 = *(_QWORD *)(v3 + 8 * (a2 + 2) + 40)) != 0)
  {
    return (*(unsigned __int8 *)(v5 + a3 / 8 + 12) >> (a3 & 7)) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::Argument::getDereferenceableBytes(llvm::Argument *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 112);
  if (!v1)
    return 0;
  v2 = *((_DWORD *)this + 8) + 2;
  if (v2 >= *(_DWORD *)(v1 + 8))
    return 0;
  v3 = *(_QWORD *)(v1 + 8 * v2 + 40);
  if (!v3 || (*(_BYTE *)(v3 + 21) & 0x10) == 0)
    return 0;
  v5 = (_QWORD *)(v3 + 48);
  v6 = 8 * *(unsigned int *)(v3 + 8) - 8 * *(unsigned int *)(v3 + 32);
  if (v6)
  {
    v7 = v6 >> 3;
    do
    {
      v8 = v7 >> 1;
      v9 = &v5[v7 >> 1];
      v10 = *v9;
      if (*v9)
        LODWORD(v10) = *(_DWORD *)(v10 + 12);
      v11 = v9 + 1;
      v7 += ~v8;
      if ((int)v10 < 76)
        v5 = v11;
      else
        v7 = v8;
    }
    while (v7);
  }
  return *(_QWORD *)(*v5 + 16);
}

BOOL llvm::NullPointerIsDefined(llvm *this, const Function *a2)
{
  uint64_t v2;

  return this && (v2 = *((_QWORD *)this + 14)) != 0 && (*(_BYTE *)(v2 + 17) & 1) != 0 || (_DWORD)a2 != 0;
}

uint64_t llvm::Argument::hasByValAttr(llvm::Argument *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v4;

  if (*(_BYTE *)(*(_QWORD *)this + 8) == 15
    && (v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 112)) != 0
    && (v2 = *((_DWORD *)this + 8) + 2, v2 < *(_DWORD *)(v1 + 8))
    && (v4 = *(_QWORD *)(v1 + 8 * v2 + 40)) != 0)
  {
    return (*(unsigned __int8 *)(v4 + 20) >> 5) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::Argument::hasAttribute(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 112);
  if (v2 && (v3 = *(_DWORD *)(a1 + 32) + 2, v3 < *(_DWORD *)(v2 + 8)) && (v5 = *(_QWORD *)(v2 + 8 * v3 + 40)) != 0)
    return (*(unsigned __int8 *)(v5 + a2 / 8 + 12) >> (a2 & 7)) & 1;
  else
    return 0;
}

uint64_t llvm::Argument::hasByRefAttr(llvm::Argument *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v4;

  if (*(_BYTE *)(*(_QWORD *)this + 8) == 15
    && (v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 112)) != 0
    && (v2 = *((_DWORD *)this + 8) + 2, v2 < *(_DWORD *)(v1 + 8))
    && (v4 = *(_QWORD *)(v1 + 8 * v2 + 40)) != 0)
  {
    return (*(unsigned __int8 *)(v4 + 20) >> 4) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::Argument::hasSwiftSelfAttr(llvm::Argument *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v4;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 112);
  if (v1 && (v2 = *((_DWORD *)this + 8) + 2, v2 < *(_DWORD *)(v1 + 8)) && (v4 = *(_QWORD *)(v1 + 8 * v2 + 40)) != 0)
    return *(_BYTE *)(v4 + 20) & 1;
  else
    return 0;
}

BOOL llvm::Argument::hasSwiftErrorAttr(llvm::Argument *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v4;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 112);
  if (v1 && (v2 = *((_DWORD *)this + 8) + 2, v2 < *(_DWORD *)(v1 + 8)) && (v4 = *(_QWORD *)(v1 + 8 * v2 + 40)) != 0)
    return *(char *)(v4 + 19) < 0;
  else
    return 0;
}

BOOL llvm::Argument::hasInAllocaAttr(llvm::Argument *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v4;

  if (*(_BYTE *)(*(_QWORD *)this + 8) == 15
    && (v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 112)) != 0
    && (v2 = *((_DWORD *)this + 8) + 2, v2 < *(_DWORD *)(v1 + 8))
    && (v4 = *(_QWORD *)(v1 + 8 * v2 + 40)) != 0)
  {
    return *(char *)(v4 + 20) < 0;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::Argument::hasPreallocatedAttr(llvm::Argument *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v4;

  if (*(_BYTE *)(*(_QWORD *)this + 8) == 15
    && (v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 112)) != 0
    && (v2 = *((_DWORD *)this + 8) + 2, v2 < *(_DWORD *)(v1 + 8))
    && (v4 = *(_QWORD *)(v1 + 8 * v2 + 40)) != 0)
  {
    return *(_BYTE *)(v4 + 21) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::Argument::hasPassPointeeByValueCopyAttr(llvm::Argument *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(*(_QWORD *)this + 8) != 15)
    return 0;
  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 112);
  if (!v1)
    return 0;
  v2 = (*((_DWORD *)this + 8) + 2);
  if (v2 >= *(_DWORD *)(v1 + 8))
    return 0;
  v4 = v1 + 40;
  v5 = *(_QWORD *)(v4 + 8 * v2);
  if (v5 && (*(_BYTE *)(v5 + 20) & 0x20) != 0)
    return 1;
  v6 = *(_QWORD *)(v4 + 8 * v2);
  if (v6)
  {
    if (*(char *)(v6 + 20) < 0)
      return 1;
  }
  v7 = *(_QWORD *)(v4 + 8 * v2);
  if (!v7)
    return 0;
  return *(_BYTE *)(v7 + 21) & 1;
}

uint64_t sub_1C53C92C8(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;

  v2 = a1;
  result = llvm::AttributeSet::getByValType((llvm::AttributeSet *)&v2);
  if (!result)
  {
    result = llvm::AttributeSet::getByRefType((llvm::AttributeSet *)&v2);
    if (!result)
    {
      result = llvm::AttributeSet::getPreallocatedType((llvm::AttributeSet *)&v2);
      if (!result)
      {
        result = llvm::AttributeSet::getInAllocaType((llvm::AttributeSet *)&v2);
        if (!result)
          return llvm::AttributeSet::getStructRetType((llvm::AttributeSet *)&v2);
      }
    }
  }
  return result;
}

uint64_t llvm::Argument::getPointeeInMemoryValueType(llvm::Argument *this)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 112);
  if (v1 && (v2 = *((_DWORD *)this + 8) + 2, v2 < *(_DWORD *)(v1 + 8)))
    return sub_1C53C92C8(*(_QWORD *)(v1 + 8 * v2 + 40));
  else
    return sub_1C53C92C8(0);
}

uint64_t llvm::Argument::getParamAlign(llvm::Argument *this)
{
  return llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(*((_QWORD *)this + 3) + 112), *((_DWORD *)this + 8));
}

uint64_t llvm::Argument::getParamByValType(llvm::Argument *this)
{
  return llvm::AttributeList::getParamByValType((llvm::AttributeList *)(*((_QWORD *)this + 3) + 112), *((_DWORD *)this + 8));
}

uint64_t llvm::Argument::getParamStructRetType(llvm::Argument *this)
{
  return llvm::AttributeList::getParamStructRetType((llvm::AttributeList *)(*((_QWORD *)this + 3) + 112), *((_DWORD *)this + 8));
}

uint64_t llvm::Argument::getParamInAllocaType(llvm::Argument *this)
{
  return llvm::AttributeList::getParamInAllocaType((llvm::AttributeList *)(*((_QWORD *)this + 3) + 112), *((_DWORD *)this + 8));
}

uint64_t llvm::Argument::getDereferenceableOrNullBytes(llvm::Argument *this)
{
  return llvm::AttributeList::getParamDereferenceableOrNullBytes((llvm::AttributeList *)(*((_QWORD *)this + 3) + 112), *((_DWORD *)this + 8));
}

uint64_t llvm::Argument::hasNoAliasAttr(llvm::Argument *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v4;

  if (*(_BYTE *)(*(_QWORD *)this + 8) == 15
    && (v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 112)) != 0
    && (v2 = *((_DWORD *)this + 8) + 2, v2 < *(_DWORD *)(v1 + 8))
    && (v4 = *(_QWORD *)(v1 + 8 * v2 + 40)) != 0)
  {
    return (*(unsigned __int8 *)(v4 + 14) >> 3) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::Argument::hasNoCaptureAttr(llvm::Argument *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v4;

  if (*(_BYTE *)(*(_QWORD *)this + 8) == 15
    && (v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 112)) != 0
    && (v2 = *((_DWORD *)this + 8) + 2, v2 < *(_DWORD *)(v1 + 8))
    && (v4 = *(_QWORD *)(v1 + 8 * v2 + 40)) != 0)
  {
    return (*(unsigned __int8 *)(v4 + 14) >> 6) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::Argument::hasNoFreeAttr(llvm::Argument *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v4;

  if (*(_BYTE *)(*(_QWORD *)this + 8) == 15
    && (v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 112)) != 0
    && (v2 = *((_DWORD *)this + 8) + 2, v2 < *(_DWORD *)(v1 + 8))
    && (v4 = *(_QWORD *)(v1 + 8 * v2 + 40)) != 0)
  {
    return (*(unsigned __int8 *)(v4 + 15) >> 1) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::Argument::hasStructRetAttr(llvm::Argument *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v4;

  if (*(_BYTE *)(*(_QWORD *)this + 8) == 15
    && (v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 112)) != 0
    && (v2 = *((_DWORD *)this + 8) + 2, v2 < *(_DWORD *)(v1 + 8))
    && (v4 = *(_QWORD *)(v1 + 8 * v2 + 40)) != 0)
  {
    return (*(unsigned __int8 *)(v4 + 21) >> 1) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::Argument::hasInRegAttr(llvm::Argument *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v4;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 112);
  if (v1 && (v2 = *((_DWORD *)this + 8) + 2, v2 < *(_DWORD *)(v1 + 8)) && (v4 = *(_QWORD *)(v1 + 8 * v2 + 40)) != 0)
    return (*(unsigned __int8 *)(v4 + 13) >> 2) & 1;
  else
    return 0;
}

uint64_t llvm::Argument::hasReturnedAttr(llvm::Argument *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v4;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 112);
  if (v1 && (v2 = *((_DWORD *)this + 8) + 2, v2 < *(_DWORD *)(v1 + 8)) && (v4 = *(_QWORD *)(v1 + 8 * v2 + 40)) != 0)
    return (*(unsigned __int8 *)(v4 + 17) >> 6) & 1;
  else
    return 0;
}

uint64_t llvm::Argument::onlyReadsMemory(llvm::Argument *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 112);
  if (!v1)
    return 0;
  v2 = (*((_DWORD *)this + 8) + 2);
  if (v2 >= *(_DWORD *)(v1 + 8))
    return 0;
  v4 = v1 + 40;
  v5 = *(_QWORD *)(v4 + 8 * v2);
  if (v5 && (*(_BYTE *)(v5 + 17) & 0x20) != 0)
    return 1;
  v6 = *(_QWORD *)(v4 + 8 * v2);
  if (!v6)
    return 0;
  return (*(unsigned __int8 *)(v6 + 17) >> 4) & 1;
}

uint64_t llvm::Function::getContext(llvm::Function *this)
{
  return **(_QWORD **)this;
}

uint64_t llvm::Argument::addAttr(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 24);
  result = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v2 + 112), **(uint64_t ***)v2, *(_DWORD *)(a1 + 32) + 1, a2);
  *(_QWORD *)(v2 + 112) = result;
  return result;
}

uint64_t llvm::Argument::addAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  int v4;

  v2 = *(_QWORD *)(a1 + 24);
  v4 = *(_DWORD *)(a1 + 32);
  result = llvm::AttributeList::addParamAttribute((_QWORD *)(v2 + 112), **(uint64_t ***)v2, &v4, 1, a2);
  *(_QWORD *)(v2 + 112) = result;
  return result;
}

uint64_t llvm::Argument::removeAttr(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 24);
  result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(v2 + 112), **(uint64_t ***)v2, *(_DWORD *)(a1 + 32) + 1, a2);
  *(_QWORD *)(v2 + 112) = result;
  return result;
}

uint64_t llvm::Function::removeParamAttr(uint64_t a1, int a2, int a3)
{
  uint64_t result;

  result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(a1 + 112), **(uint64_t ***)a1, a2 + 1, a3);
  *(_QWORD *)(a1 + 112) = result;
  return result;
}

uint64_t llvm::Argument::removeAttrs(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(v3 + 112);
  v9 = v4;
  v5 = **(uint64_t ***)v3;
  v6 = *(_DWORD *)(a1 + 32);
  if (v4 && (v6 + 2) < *(_DWORD *)(v4 + 8))
    v7 = *(_QWORD *)(v4 + 8 * (v6 + 2) + 40);
  else
    v7 = 0;
  v10 = v7;
  result = llvm::AttributeSet::removeAttributes(&v10, v5, a2);
  if (v7 != result)
  {
    result = llvm::AttributeList::setAttributesAtIndex(&v9, v5, v6 + 1, result);
    v4 = result;
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 112) = v4;
  return result;
}

uint64_t llvm::Function::getParamAttribute(uint64_t a1, int a2, int a3)
{
  return llvm::AttributeList::getAttributeAtIndex((uint64_t *)(a1 + 112), a2 + 1, a3);
}

llvm::LLVMContext **llvm::Function::addFnAttrs(llvm::LLVMContext ***this, const llvm::AttrBuilder *a2)
{
  llvm::LLVMContext **result;

  result = (llvm::LLVMContext **)llvm::AttributeList::addAttributesAtIndex((llvm::AttributeList *)(this + 14), **this, -1, a2);
  this[14] = result;
  return result;
}

void llvm::Function::eraseFromParent(llvm::Function *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Function *v8;
  int v9;
  int v10;
  uint64_t v11;
  size_t *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  size_t v15;
  int v16;
  size_t v17;
  unsigned __int8 *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  char *v31;
  _QWORD **v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;

  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if ((*((_BYTE *)this + 23) & 0x10) == 0)
    goto LABEL_23;
  v42 = *(uint64_t **)(v2 + 112);
  if (!v42)
    goto LABEL_23;
  v3 = ***(_QWORD ***)this;
  v4 = *(_QWORD *)(v3 + 152);
  v5 = *(unsigned int *)(v3 + 168);
  if ((_DWORD)v5)
  {
    LODWORD(v6) = (v5 - 1) & ((this >> 4) ^ (this >> 9));
    v7 = v4 + 16 * v6;
    v8 = *(llvm::Function **)v7;
    if (*(llvm::Function **)v7 == this)
      goto LABEL_9;
    v9 = 1;
    while (v8 != (llvm::Function *)-4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v5 - 1);
      v8 = *(llvm::Function **)(v4 + 16 * v6);
      if (v8 == this)
      {
        v7 = v4 + 16 * v6;
        goto LABEL_9;
      }
    }
  }
  v7 = v4 + 16 * v5;
LABEL_9:
  v11 = *((unsigned int *)v42 + 2);
  if ((_DWORD)v11)
  {
    v12 = *(size_t **)(v7 + 8);
    v13 = *((unsigned int *)v42 + 5);
    v14 = (unsigned __int8 *)v12 + v13;
    v15 = *v12;
    if (*v12)
    {
      v16 = 0;
      v17 = *v12;
      v18 = v14;
      do
      {
        v19 = *v18++;
        v16 = 33 * v16 + v19;
        --v17;
      }
      while (v17);
    }
    else
    {
      v16 = 0;
    }
    v20 = v11 - 1;
    v21 = *v42;
    v22 = *v42 + 8 * v11 + 8;
    v23 = 1;
    v24 = v16;
    while (1)
    {
      v25 = v24 & v20;
      v26 = *(_QWORD **)(v21 + 8 * v25);
      if (v26 != (_QWORD *)-8)
      {
        if (!v26)
          goto LABEL_23;
        if (*(_DWORD *)(v22 + 4 * v25) == v16 && v15 == *v26 && (!v15 || !memcmp(v14, (char *)v26 + v13, v15)))
          break;
      }
      v24 = v23 + v25;
      ++v23;
    }
    *(_QWORD *)(v21 + 8 * (int)v25) = -8;
    *(uint64_t *)((char *)v42 + 12) = (uint64_t)vadd_s32(*(int32x2_t *)((char *)v42 + 12), (int32x2_t)0x1FFFFFFFFLL);
  }
LABEL_23:
  v27 = *((_QWORD *)this + 7);
  v28 = (_QWORD *)*((_QWORD *)this + 8);
  *v28 = v27;
  *(_QWORD *)(v27 + 8) = v28;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  llvm::Function::~Function(this);
  v29 = *((_DWORD *)this + 5);
  if ((v29 & 0x40000000) != 0)
  {
    v37 = (char *)*((_QWORD *)this - 1);
    v36 = (char *)this - 8;
    v35 = v37;
    v38 = v29 & 0x7FFFFFF;
    if ((_DWORD)v38)
    {
      v39 = 32 * v38;
      do
      {
        v40 = &v35[v39];
        if (*(_QWORD *)&v35[v39 - 32])
        {
          **((_QWORD **)v40 - 2) = *((_QWORD *)v40 - 3);
          v41 = *((_QWORD *)v40 - 3);
          if (v41)
            *(_QWORD *)(v41 + 16) = *((_QWORD *)v40 - 2);
        }
        v39 -= 32;
      }
      while (v39);
    }
    operator delete(v35);
    v31 = v36;
  }
  else
  {
    v30 = v29 & 0x7FFFFFF;
    v31 = (char *)this - 32 * v30;
    if ((_DWORD)v30)
    {
      v32 = (_QWORD **)((char *)this - 16);
      v33 = -32 * v30;
      do
      {
        if (*(v32 - 2))
        {
          **v32 = *(v32 - 1);
          v34 = (uint64_t)*(v32 - 1);
          if (v34)
            *(_QWORD *)(v34 + 16) = *v32;
        }
        v32 -= 4;
        v33 += 32;
      }
      while (v33);
    }
    if (v29 < 0)
      v31 = &v31[-*((_QWORD *)v31 - 1) - 8];
  }
  operator delete(v31);
}

uint64_t *llvm::Function::Function(uint64_t *a1, llvm::PointerType *a2, char a3, llvm::Type *a4, uint64_t a5, uint64_t a6)
{
  unsigned int v11;
  int v12;
  int v13;
  _QWORD ***v14;
  int v15;
  llvm::ValueSymbolTable **v16;
  llvm::ValueSymbolTable *v17;
  unsigned int v18;
  llvm::ValueSymbolTable *v19;
  _QWORD *v20;
  llvm::ValueSymbolTable *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t *v28;
  int v29;
  int v30;
  uint64_t *v31;
  int v32;
  int v33;
  int v35;
  int v36;
  llvm::LLVMContext *v37;

  if ((_DWORD)a4 == -1)
  {
    if (a6)
      a4 = (llvm::Type *)*(unsigned int *)(a6 + 284);
    else
      a4 = 0;
  }
  *a1 = llvm::PointerType::get(a2, a4);
  a1[1] = 0;
  v11 = *((_DWORD *)a1 + 5) & 0xC0000000;
  *((_DWORD *)a1 + 4) = 0;
  *((_DWORD *)a1 + 5) = v11;
  a1[3] = (uint64_t)a2;
  v12 = *((unsigned __int16 *)a1 + 17);
  a1[5] = 0;
  v13 = a3 & 0xF | (v12 << 16);
  if ((a3 & 0xFu) - 7 < 2)
    v13 |= 0x4000u;
  *((_DWORD *)a1 + 8) = v13;
  *((_DWORD *)a1 + 9) = 0;
  llvm::Value::setName((uint64_t ***)a1, a5);
  a1[6] = 0;
  a1[7] = 0;
  v14 = (_QWORD ***)(a1 + 7);
  v15 = *((unsigned __int16 *)a1 + 16);
  *((_DWORD *)a1 + 8) = v15;
  a1[8] = 0;
  a1[9] = (uint64_t)(a1 + 9);
  a1[10] = (uint64_t)(a1 + 9);
  a1[11] = 0;
  a1[12] = (*((_DWORD *)a2 + 3) - 1);
  a1[13] = 0;
  v16 = (llvm::ValueSymbolTable **)(a1 + 13);
  a1[14] = 0;
  *((_DWORD *)a1 + 8) = v15;
  if (!*(_BYTE *)(**(_QWORD **)*a1 + 2664))
  {
    v17 = (llvm::ValueSymbolTable *)operator new();
    v18 = dword_1ED830718;
    *((_QWORD *)v17 + 1) = 0;
    *((_QWORD *)v17 + 2) = 0x1000000000;
    *(_QWORD *)v17 = 0;
    *((_QWORD *)v17 + 4) = v18;
    v19 = *v16;
    *v16 = v17;
    if (v19)
    {
      llvm::ValueSymbolTable::~ValueSymbolTable(v19);
      MEMORY[0x1CAA32FC0]();
    }
  }
  if (*((_DWORD *)a2 + 3) != 1)
    *((_WORD *)a1 + 9) = 1;
  if (a6)
  {
    v20 = (_QWORD *)(a6 + 24);
    a1[5] = a6;
    if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
    {
      v21 = *(llvm::ValueSymbolTable **)(a6 + 112);
      if (v21)
        llvm::ValueSymbolTable::reinsertValue(v21, (llvm::Value *)a1);
    }
    v22 = (_QWORD *)*v20;
    a1[7] = *v20;
    a1[8] = (uint64_t)v20;
    v22[1] = v14;
    *v20 = v14;
  }
  if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
    goto LABEL_36;
  v23 = **(_QWORD **)*a1;
  v24 = *(_QWORD *)(v23 + 152);
  v25 = *(unsigned int *)(v23 + 168);
  if ((_DWORD)v25)
  {
    LODWORD(v26) = (v25 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    v27 = (uint64_t **)(v24 + 16 * v26);
    v28 = *v27;
    if (*v27 == a1)
      goto LABEL_21;
    v29 = 1;
    while (v28 != (uint64_t *)-4096)
    {
      v30 = v26 + v29++;
      v26 = v30 & (v25 - 1);
      v28 = *(uint64_t **)(v24 + 16 * v26);
      if (v28 == a1)
      {
        v27 = (uint64_t **)(v24 + 16 * v26);
        goto LABEL_21;
      }
    }
  }
  v27 = (uint64_t **)(v24 + 16 * v25);
LABEL_21:
  v31 = v27[1];
  if ((unint64_t)*v31 >= 5)
  {
    v32 = *((_DWORD *)v31 + 4);
    v33 = *((unsigned __int8 *)v31 + 20);
    v35 = v32 == 1836477548 && v33 == 46;
    v36 = v35 << 13;
    goto LABEL_29;
  }
LABEL_36:
  v36 = 0;
LABEL_29:
  v37 = (llvm::LLVMContext *)*((unsigned int *)a1 + 9);
  *((_DWORD *)a1 + 8) = a1[4] & 0xFFFFDFFF | v36;
  if ((_DWORD)v37)
    a1[14] = llvm::Intrinsic::getAttributes(*(llvm::Intrinsic **)*a1, v37);
  return a1;
}

uint64_t llvm::Intrinsic::getAttributes(llvm::Intrinsic *this, llvm::LLVMContext *a2)
{
  _OWORD v3[4];
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v4 = 0;
  memset(v3, 0, sizeof(v3));
  if ((_DWORD)a2)
    __asm { BR              X10 }
  return llvm::AttributeList::get((uint64_t *)this, (uint64_t *)v3, 0);
}

void sub_1C53CA63C()
{
  JUMPOUT(0x1C53C9D7CLL);
}

void sub_1C53CA648()
{
  JUMPOUT(0x1C53C9D7CLL);
}

void sub_1C53CA654()
{
  JUMPOUT(0x1C53CA038);
}

void sub_1C53CA66C()
{
  JUMPOUT(0x1C53C9D7CLL);
}

void sub_1C53CA678()
{
  JUMPOUT(0x1C53CA038);
}

void sub_1C53CA690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a19 = 9;
  a21 = llvm::AttributeList::get(v21, 2u, &a19, 1);
  JUMPOUT(0x1C53CA6CCLL);
}

void sub_1C53CA6E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a19 = 9;
  a21 = llvm::AttributeList::get(v21, 2u, &a19, 1);
  JUMPOUT(0x1C53CAD94);
}

void sub_1C53CA714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a19 = 9;
  a21 = llvm::AttributeList::get(v21, 3u, &a19, 1);
  JUMPOUT(0x1C53C9F98);
}

void sub_1C53CA750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a19 = 9;
  a21 = llvm::AttributeList::get(v21, 3u, &a19, 1);
  JUMPOUT(0x1C53C9FECLL);
}

void sub_1C53CA77C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, __int128 a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t *v25;

  LODWORD(a19) = 22;
  a21 = llvm::AttributeList::get(v25, 1u, (int *)&a19, 1);
  a17 = 9;
  a22 = llvm::AttributeList::get(v25, 3u, &a17, 1);
  a13 = 9;
  a23 = llvm::AttributeList::get(v25, 4u, &a13, 1);
  a12 = 9;
  a24 = llvm::AttributeList::get(v25, 5u, &a12, 1);
  a14 = xmmword_1C8616488;
  *(__int128 *)((char *)&a14 + 12) = *(__int128 *)((char *)&xmmword_1C8616488 + 12);
  a25 = llvm::AttributeList::get(v25, 0xFFFFFFFF, (int *)&a14, 7);
  JUMPOUT(0x1C53C9D38);
}

void sub_1C53CA8B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, __int128 a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t *v23;

  LODWORD(a19) = 9;
  a21 = llvm::AttributeList::get(v23, 3u, (int *)&a19, 1);
  LODWORD(a17) = 9;
  a22 = llvm::AttributeList::get(v23, 4u, (int *)&a17, 1);
  a13 = 9;
  a23 = llvm::AttributeList::get(v23, 5u, &a13, 1);
  a14 = xmmword_1C8616508;
  *(__int128 *)((char *)&a14 + 12) = *(__int128 *)((char *)&xmmword_1C8616508 + 12);
  llvm::AttributeList::get(v23, 0xFFFFFFFF, (int *)&a14, 7);
  JUMPOUT(0x1C53C9D38);
}

void sub_1C53CAB5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, __int128 a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t *v23;

  a19 = 0x2D00000016;
  a21 = llvm::AttributeList::get(v23, 1u, (int *)&a19, 2);
  a17 = 9;
  a22 = llvm::AttributeList::get(v23, 2u, &a17, 1);
  a13 = 9;
  a23 = llvm::AttributeList::get(v23, 3u, &a13, 1);
  a14 = xmmword_1C86163D8;
  JUMPOUT(0x1C53CABD8);
}

void sub_1C53CABF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t *v22;

  a19 = 9;
  a21 = llvm::AttributeList::get(v22, 2u, &a19, 1);
  a17 = 9;
  a22 = llvm::AttributeList::get(v22, 3u, &a17, 1);
  JUMPOUT(0x1C53C9E70);
}

void sub_1C53CAC24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a19 = 9;
  a21 = llvm::AttributeList::get(v21, 2u, &a19, 1);
  JUMPOUT(0x1C53CD780);
}

void sub_1C53CAC54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t *v22;

  a19 = 9;
  a21 = llvm::AttributeList::get(v22, 2u, &a19, 1);
  a17 = 9;
  a22 = llvm::AttributeList::get(v22, 4u, &a17, 1);
  JUMPOUT(0x1C53C9E84);
}

void sub_1C53CAC6C()
{
  JUMPOUT(0x1C53C9DD8);
}

void sub_1C53CAC74()
{
  JUMPOUT(0x1C53C9FD8);
}

void sub_1C53CAC8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a19 = 9;
  a21 = llvm::AttributeList::get(v21, 1u, &a19, 1);
  JUMPOUT(0x1C53C9FACLL);
}

void sub_1C53CACC0()
{
  JUMPOUT(0x1C53CA038);
}

void sub_1C53CACD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a13 = 0x2D00000016;
  a21 = llvm::AttributeList::get(v21, 1u, (int *)&a13, 2);
  JUMPOUT(0x1C53CCE2CLL);
}

void sub_1C53CAD34()
{
  JUMPOUT(0x1C53CA330);
}

void sub_1C53CAD4C()
{
  JUMPOUT(0x1C53C9DD8);
}

void sub_1C53CAD60()
{
  JUMPOUT(0x1C53CAD84);
}

void sub_1C53CADB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a19 = 22;
  a21 = llvm::AttributeList::get(v21, 3u, &a19, 1);
  JUMPOUT(0x1C53C9F98);
}

void sub_1C53CADC0()
{
  JUMPOUT(0x1C53CAED4);
}

void sub_1C53CADD8()
{
  JUMPOUT(0x1C53CAED4);
}

void sub_1C53CADF0()
{
  JUMPOUT(0x1C53CAED4);
}

void sub_1C53CAE08()
{
  JUMPOUT(0x1C53CA038);
}

void sub_1C53CAE20()
{
  JUMPOUT(0x1C53CA1ECLL);
}

void sub_1C53CAE38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a19 = 9;
  a21 = llvm::AttributeList::get(v21, 4u, &a19, 1);
  JUMPOUT(0x1C53CAE68);
}

void sub_1C53CAE90()
{
  JUMPOUT(0x1C53CA1ECLL);
}

void sub_1C53CAEA8()
{
  JUMPOUT(0x1C53CA038);
}

void sub_1C53CAEFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t *v22;

  a19 = 22;
  a21 = llvm::AttributeList::get(v22, 2u, &a19, 1);
  a17 = 9;
  a22 = llvm::AttributeList::get(v22, 4u, &a17, 1);
  JUMPOUT(0x1C53C9E70);
}

void sub_1C53CAF58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a19 = 9;
  a21 = llvm::AttributeList::get(v21, 4u, &a19, 1);
  JUMPOUT(0x1C53C9F98);
}

void sub_1C53CAF94()
{
  JUMPOUT(0x1C53C9D7CLL);
}

void sub_1C53CAFA0()
{
  JUMPOUT(0x1C53C9D7CLL);
}

void sub_1C53CAFAC()
{
  JUMPOUT(0x1C53C9D18);
}

void sub_1C53CAFB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t *v22;

  a19 = 66;
  a21 = llvm::AttributeList::get(v22, 1u, &a19, 1);
  a17 = 45;
  a22 = llvm::AttributeList::get(v22, 2u, &a17, 1);
  JUMPOUT(0x1C53C9E84);
}

void sub_1C53CAFE0()
{
  JUMPOUT(0x1C53CA0D8);
}

void sub_1C53CAFEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, int a15, uint64_t a16, uint64_t a17, int a18, uint64_t a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t *v26;

  a20 = 22;
  a22 = llvm::AttributeList::get(v26, 1u, &a20, 1);
  a18 = 9;
  a23 = llvm::AttributeList::get(v26, 3u, &a18, 1);
  a13 = 9;
  a24 = llvm::AttributeList::get(v26, 4u, &a13, 1);
  a12 = 9;
  a25 = llvm::AttributeList::get(v26, 5u, &a12, 1);
  a15 = 3;
  a14 = 0x4100000025;
  a26 = llvm::AttributeList::get(v26, 0xFFFFFFFF, (int *)&a14, 3);
  JUMPOUT(0x1C53C9D38);
}

void sub_1C53CB074()
{
  JUMPOUT(0x1C53CA0D8);
}

void sub_1C53CB080()
{
  JUMPOUT(0x1C53CA240);
}

void sub_1C53CB098()
{
  JUMPOUT(0x1C53CA240);
}

void sub_1C53CB0B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t *v22;

  a19 = 9;
  a21 = llvm::AttributeList::get(v22, 4u, &a19, 1);
  a17 = 9;
  a22 = llvm::AttributeList::get(v22, 5u, &a17, 1);
  JUMPOUT(0x1C53CA14CLL);
}

void sub_1C53CB0E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t *v22;

  a19 = 9;
  a21 = llvm::AttributeList::get(v22, 5u, &a19, 1);
  a17 = 9;
  a22 = llvm::AttributeList::get(v22, 6u, &a17, 1);
  JUMPOUT(0x1C53CC57CLL);
}

void sub_1C53CB118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a17 = 74;
  a19 = 4;
  a21 = llvm::AttributeList::get(v21, 0, &a17, 1, &a19);
  JUMPOUT(0x1C53C9FACLL);
}

void sub_1C53CB148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  uint64_t *v19;

  a19 = 9;
  llvm::AttributeList::get(v19, 3u, &a19, 1);
  JUMPOUT(0x1C53CC238);
}

void sub_1C53CB160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t *v22;

  a19 = 22;
  a21 = llvm::AttributeList::get(v22, 1u, &a19, 1);
  a17 = 9;
  a22 = llvm::AttributeList::get(v22, 2u, &a17, 1);
  JUMPOUT(0x1C53C9E84);
}

void sub_1C53CB1AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a19 = 22;
  a21 = llvm::AttributeList::get(v21, 1u, &a19, 1);
  JUMPOUT(0x1C53CC4E0);
}

void sub_1C53CB1D8()
{
  JUMPOUT(0x1C53CA0D8);
}

void sub_1C53CB1E4()
{
  JUMPOUT(0x1C53C9D2CLL);
}

void sub_1C53CB1F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, int a12, int a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,uint64_t a21,int a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t *v31;

  a22 = 22;
  a24 = llvm::AttributeList::get(v31, 1u, &a22, 1);
  a20 = 9;
  a25 = llvm::AttributeList::get(v31, 3u, &a20, 1);
  a15 = 9;
  a26 = llvm::AttributeList::get(v31, 4u, &a15, 1);
  a14 = 9;
  a27 = llvm::AttributeList::get(v31, 5u, &a14, 1);
  a13 = 9;
  a28 = llvm::AttributeList::get(v31, 6u, &a13, 1);
  a12 = 9;
  a29 = llvm::AttributeList::get(v31, 7u, &a12, 1);
  a11 = 9;
  a30 = llvm::AttributeList::get(v31, 8u, &a11, 1);
  a16 = 0x4100000025;
  a31 = llvm::AttributeList::get(v31, 0xFFFFFFFF, (int *)&a16, 2);
  JUMPOUT(0x1C53C9D38);
}

void sub_1C53CB2F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a19 = 9;
  a21 = llvm::AttributeList::get(v21, 2u, &a19, 1);
  JUMPOUT(0x1C53CD790);
}

void sub_1C53CB324()
{
  JUMPOUT(0x1C53C9DD8);
}

void sub_1C53CB32C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, uint64_t a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t *v25;

  a20 = 9;
  a22 = llvm::AttributeList::get(v25, 1u, &a20, 1);
  a18 = 9;
  a23 = llvm::AttributeList::get(v25, 2u, &a18, 1);
  a13 = 9;
  a24 = llvm::AttributeList::get(v25, 7u, &a13, 1);
  a12 = 9;
  a25 = llvm::AttributeList::get(v25, 8u, &a12, 1);
  JUMPOUT(0x1C53CB3A8);
}

void sub_1C53CB3C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, __int128 a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t *v24;

  a19 = 9;
  a21 = llvm::AttributeList::get(v24, 1u, &a19, 1);
  a17 = 9;
  a22 = llvm::AttributeList::get(v24, 2u, &a17, 1);
  a13 = 9;
  a23 = llvm::AttributeList::get(v24, 5u, &a13, 1);
  a12 = 9;
  a24 = llvm::AttributeList::get(v24, 6u, &a12, 1);
  a14 = xmmword_1C8650220;
  JUMPOUT(0x1C53CC784);
}

void sub_1C53CB448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a19 = 9;
  a21 = llvm::AttributeList::get(v21, 3u, &a19, 1);
  JUMPOUT(0x1C53CC244);
}

void sub_1C53CB474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  uint64_t v19;

  a19 = 9;
  llvm::AttributeList::get(v19, 4, &a19, 1);
  JUMPOUT(0x1C53CC238);
}

void sub_1C53CB48C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t *v22;

  a19 = 9;
  a21 = llvm::AttributeList::get(v22, 4u, &a19, 1);
  a17 = 9;
  a22 = llvm::AttributeList::get(v22, 5u, &a17, 1);
  JUMPOUT(0x1C53C9E84);
}

void sub_1C53CB5A4()
{
  JUMPOUT(0x1C53C9DD8);
}

void sub_1C53CB5AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, int a15, uint64_t a16, uint64_t a17, int a18, uint64_t a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t *v25;

  a20 = 9;
  a22 = llvm::AttributeList::get(v25, 1u, &a20, 1);
  a18 = 9;
  a23 = llvm::AttributeList::get(v25, 6u, &a18, 1);
  a13 = 9;
  a24 = llvm::AttributeList::get(v25, 7u, &a13, 1);
  a12 = 9;
  a25 = llvm::AttributeList::get(v25, 8u, &a12, 1);
  a15 = 45;
  a14 = 0x4100000025;
  JUMPOUT(0x1C53CBE6CLL);
}

void sub_1C53CB618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, int a15, uint64_t a16, uint64_t a17, int a18, uint64_t a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t *v25;

  a20 = 9;
  a22 = llvm::AttributeList::get(v25, 1u, &a20, 1);
  a18 = 9;
  a23 = llvm::AttributeList::get(v25, 7u, &a18, 1);
  a13 = 9;
  a24 = llvm::AttributeList::get(v25, 8u, &a13, 1);
  a12 = 9;
  a25 = llvm::AttributeList::get(v25, 9u, &a12, 1);
  a15 = 45;
  a14 = 0x4100000025;
  JUMPOUT(0x1C53CBE6CLL);
}

void sub_1C53CB684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, int a15, uint64_t a16, uint64_t a17, int a18, uint64_t a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t *v25;

  a20 = 9;
  a22 = llvm::AttributeList::get(v25, 1u, &a20, 1);
  a18 = 9;
  a23 = llvm::AttributeList::get(v25, 8u, &a18, 1);
  a13 = 9;
  a24 = llvm::AttributeList::get(v25, 9u, &a13, 1);
  a12 = 9;
  a25 = llvm::AttributeList::get(v25, 0xAu, &a12, 1);
  a15 = 45;
  a14 = 0x4100000025;
  JUMPOUT(0x1C53CBE6CLL);
}

void sub_1C53CB6F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, int a15, uint64_t a16, uint64_t a17, int a18, uint64_t a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t *v25;

  a20 = 9;
  a22 = llvm::AttributeList::get(v25, 1u, &a20, 1);
  a18 = 9;
  a23 = llvm::AttributeList::get(v25, 9u, &a18, 1);
  a13 = 9;
  a24 = llvm::AttributeList::get(v25, 0xAu, &a13, 1);
  a12 = 9;
  a25 = llvm::AttributeList::get(v25, 0xBu, &a12, 1);
  a15 = 45;
  a14 = 0x4100000025;
  JUMPOUT(0x1C53CBE6CLL);
}

void sub_1C53CB75C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, int a15, uint64_t a16, uint64_t a17, int a18, uint64_t a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t *v25;

  a20 = 9;
  a22 = llvm::AttributeList::get(v25, 1u, &a20, 1);
  a18 = 9;
  a23 = llvm::AttributeList::get(v25, 0xAu, &a18, 1);
  a13 = 9;
  a24 = llvm::AttributeList::get(v25, 0xBu, &a13, 1);
  a12 = 9;
  a25 = llvm::AttributeList::get(v25, 0xCu, &a12, 1);
  a15 = 45;
  a14 = 0x4100000025;
  JUMPOUT(0x1C53CBE6CLL);
}

void sub_1C53CB7C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, int a15, uint64_t a16, uint64_t a17, int a18, uint64_t a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t *v25;

  a20 = 9;
  a22 = llvm::AttributeList::get(v25, 1u, &a20, 1);
  a18 = 9;
  a23 = llvm::AttributeList::get(v25, 0xBu, &a18, 1);
  a13 = 9;
  a24 = llvm::AttributeList::get(v25, 0xCu, &a13, 1);
  a12 = 9;
  a25 = llvm::AttributeList::get(v25, 0xDu, &a12, 1);
  a15 = 45;
  a14 = 0x4100000025;
  JUMPOUT(0x1C53CBE6CLL);
}

void sub_1C53CB834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, int a15, uint64_t a16, uint64_t a17, int a18, uint64_t a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t *v25;

  a20 = 9;
  a22 = llvm::AttributeList::get(v25, 1u, &a20, 1);
  a18 = 9;
  a23 = llvm::AttributeList::get(v25, 5u, &a18, 1);
  a13 = 9;
  a24 = llvm::AttributeList::get(v25, 6u, &a13, 1);
  a12 = 9;
  a25 = llvm::AttributeList::get(v25, 7u, &a12, 1);
  a15 = 44;
  JUMPOUT(0x1C53CBC04);
}

void sub_1C53CBC24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, int a15, uint64_t a16, uint64_t a17, int a18, uint64_t a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t *v25;

  a20 = 9;
  a22 = llvm::AttributeList::get(v25, 1u, &a20, 1);
  a18 = 9;
  a23 = llvm::AttributeList::get(v25, 0xCu, &a18, 1);
  a13 = 9;
  a24 = llvm::AttributeList::get(v25, 0xDu, &a13, 1);
  a12 = 9;
  a25 = llvm::AttributeList::get(v25, 0xEu, &a12, 1);
  a15 = 45;
  a14 = 0x4100000025;
  JUMPOUT(0x1C53CBE6CLL);
}

void sub_1C53CBC90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, int a15, uint64_t a16, uint64_t a17, int a18, uint64_t a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t *v25;

  a20 = 9;
  a22 = llvm::AttributeList::get(v25, 1u, &a20, 1);
  a18 = 9;
  a23 = llvm::AttributeList::get(v25, 0xEu, &a18, 1);
  a13 = 9;
  a24 = llvm::AttributeList::get(v25, 0xFu, &a13, 1);
  a12 = 9;
  a25 = llvm::AttributeList::get(v25, 0x10u, &a12, 1);
  a15 = 45;
  a14 = 0x4100000025;
  JUMPOUT(0x1C53CBE6CLL);
}

void sub_1C53CBCFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, int a15, uint64_t a16, uint64_t a17, int a18, uint64_t a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t *v25;

  a20 = 9;
  a22 = llvm::AttributeList::get(v25, 1u, &a20, 1);
  a18 = 9;
  a23 = llvm::AttributeList::get(v25, 0xDu, &a18, 1);
  a13 = 9;
  a24 = llvm::AttributeList::get(v25, 0xEu, &a13, 1);
  a12 = 9;
  a25 = llvm::AttributeList::get(v25, 0xFu, &a12, 1);
  a15 = 45;
  a14 = 0x4100000025;
  JUMPOUT(0x1C53CBE6CLL);
}

void sub_1C53CBD68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, int a15, uint64_t a16, uint64_t a17, int a18, uint64_t a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t *v25;

  a20 = 9;
  a22 = llvm::AttributeList::get(v25, 1u, &a20, 1);
  a18 = 9;
  a23 = llvm::AttributeList::get(v25, 0xFu, &a18, 1);
  a13 = 9;
  a24 = llvm::AttributeList::get(v25, 0x10u, &a13, 1);
  a12 = 9;
  a25 = llvm::AttributeList::get(v25, 0x11u, &a12, 1);
  a15 = 45;
  a14 = 0x4100000025;
  JUMPOUT(0x1C53CBE6CLL);
}

void sub_1C53CBDD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, uint64_t a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t *v24;

  a20 = 9;
  a22 = llvm::AttributeList::get(v24, 1u, &a20, 1);
  a18 = 9;
  a23 = llvm::AttributeList::get(v24, 0x10u, &a18, 1);
  a13 = 9;
  a24 = llvm::AttributeList::get(v24, 0x11u, &a13, 1);
  JUMPOUT(0x1C53CBE3CLL);
}

void sub_1C53CBE7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, uint64_t a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t *v24;

  a20 = 9;
  a22 = llvm::AttributeList::get(v24, 2u, &a20, 1);
  a18 = 9;
  a23 = llvm::AttributeList::get(v24, 5u, &a18, 1);
  a13 = 9;
  a24 = llvm::AttributeList::get(v24, 6u, &a13, 1);
  JUMPOUT(0x1C53CBFC8);
}

void sub_1C53CBFF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;
  _QWORD v22[24];

  a19 = 9;
  a21 = llvm::AttributeList::get(v21, 1u, &a19, 1);
  v22[0] = 0x600000025;
  v22[9] = llvm::AttributeList::get(v21, 0xFFFFFFFF, (int *)v22, 2);
  JUMPOUT(0x1C53C9D38);
}

void sub_1C53CC024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a19 = 9;
  a21 = llvm::AttributeList::get(v21, 2u, &a19, 1);
  JUMPOUT(0x1C53CD780);
}

void sub_1C53CC054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, __int128 a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t *v23;

  a19 = 9;
  a21 = llvm::AttributeList::get(v23, 1u, &a19, 1);
  a17 = 9;
  a22 = llvm::AttributeList::get(v23, 2u, &a17, 1);
  a13 = 9;
  a23 = llvm::AttributeList::get(v23, 3u, &a13, 1);
  a14 = xmmword_1C8650240;
  JUMPOUT(0x1C53C9F44);
}

void sub_1C53CC0C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t *v22;

  a19 = 9;
  a21 = llvm::AttributeList::get(v22, 2u, &a19, 1);
  a17 = 9;
  a22 = llvm::AttributeList::get(v22, 3u, &a17, 1);
  JUMPOUT(0x1C53CA0C4);
}

void sub_1C53CC1B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t *v22;

  a19 = 9;
  a21 = llvm::AttributeList::get(v22, 3u, &a19, 1);
  a17 = 9;
  a22 = llvm::AttributeList::get(v22, 4u, &a17, 1);
  JUMPOUT(0x1C53CC204);
}

void sub_1C53CC21C()
{
  JUMPOUT(0x1C53CC230);
}

void sub_1C53CC260()
{
  JUMPOUT(0x1C53CA0D8);
}

void sub_1C53CC280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, uint64_t a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t *v24;

  a20 = 9;
  a22 = llvm::AttributeList::get(v24, 4u, &a20, 1);
  a18 = 9;
  a23 = llvm::AttributeList::get(v24, 5u, &a18, 1);
  a13 = 9;
  a24 = llvm::AttributeList::get(v24, 6u, &a13, 1);
  JUMPOUT(0x1C53C9F3CLL);
}

void sub_1C53CC2E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, uint64_t a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t *v25;

  a20 = 9;
  a22 = llvm::AttributeList::get(v25, 2u, &a20, 1);
  a18 = 9;
  a23 = llvm::AttributeList::get(v25, 3u, &a18, 1);
  a13 = 9;
  a24 = llvm::AttributeList::get(v25, 4u, &a13, 1);
  a12 = 9;
  a25 = llvm::AttributeList::get(v25, 5u, &a12, 1);
  JUMPOUT(0x1C53CC76CLL);
}

void sub_1C53CC358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t *v22;

  a19 = 9;
  a21 = llvm::AttributeList::get(v22, 5u, &a19, 1);
  a17 = 9;
  a22 = llvm::AttributeList::get(v22, 6u, &a17, 1);
  JUMPOUT(0x1C53CC39CLL);
}

void sub_1C53CC3B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a19 = 9;
  a21 = llvm::AttributeList::get(v21, 4u, &a19, 1);
  JUMPOUT(0x1C53CC4D8);
}

void sub_1C53CC4F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a19 = 9;
  a21 = llvm::AttributeList::get(v21, 5u, &a19, 1);
  JUMPOUT(0x1C53CC528);
}

void sub_1C53CC53C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a19 = 9;
  a21 = llvm::AttributeList::get(v21, 6u, &a19, 1);
  JUMPOUT(0x1C53CC56CLL);
}

void sub_1C53CC58C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, int a13, int a14, uint64_t a15, int a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t *v28;

  a21 = 9;
  a23 = llvm::AttributeList::get(v28, 5u, &a21, 1);
  a19 = 9;
  a24 = llvm::AttributeList::get(v28, 6u, &a19, 1);
  a14 = 9;
  a25 = llvm::AttributeList::get(v28, 7u, &a14, 1);
  a13 = 9;
  a26 = llvm::AttributeList::get(v28, 8u, &a13, 1);
  a12 = 9;
  a27 = llvm::AttributeList::get(v28, 9u, &a12, 1);
  a16 = 45;
  a15 = 0x4100000025;
  a28 = llvm::AttributeList::get(v28, 0xFFFFFFFF, (int *)&a15, 3);
  JUMPOUT(0x1C53C9D38);
}

void sub_1C53CC6EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, uint64_t a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t *v24;

  a20 = 9;
  a22 = llvm::AttributeList::get(v24, 3u, &a20, 1);
  a18 = 9;
  a23 = llvm::AttributeList::get(v24, 4u, &a18, 1);
  a13 = 9;
  a24 = llvm::AttributeList::get(v24, 5u, &a13, 1);
  JUMPOUT(0x1C53CC758);
}

void sub_1C53CC790()
{
  JUMPOUT(0x1C53C9DD8);
}

void sub_1C53CC79C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t *v22;

  a19 = 9;
  a21 = llvm::AttributeList::get(v22, 1u, &a19, 1);
  a17 = 9;
  a22 = llvm::AttributeList::get(v22, 2u, &a17, 1);
  JUMPOUT(0x1C53CD68CLL);
}

void sub_1C53CC7D0()
{
  JUMPOUT(0x1C53CC7E4);
}

void sub_1C53CC830()
{
  JUMPOUT(0x1C53CC844);
}

void sub_1C53CC864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t *v22;

  a19 = 9;
  a21 = llvm::AttributeList::get(v22, 1u, &a19, 1);
  a17 = 9;
  a22 = llvm::AttributeList::get(v22, 5u, &a17, 1);
  JUMPOUT(0x1C53CD68CLL);
}

void sub_1C53CC87C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a19 = 9;
  a21 = llvm::AttributeList::get(v21, 1u, &a19, 1);
  JUMPOUT(0x1C53CDA64);
}

void sub_1C53CC894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, int a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t *v28;
  uint64_t v29;

  a15 = 9;
  a23 = llvm::AttributeList::get(v28, 1u, &a15, 1);
  a21 = 9;
  a24 = llvm::AttributeList::get(v28, 2u, &a21, 1);
  a19 = 9;
  a25 = llvm::AttributeList::get(v28, 3u, &a19, 1);
  a14 = 9;
  a26 = llvm::AttributeList::get(v28, 4u, &a14, 1);
  a13 = 9;
  a27 = llvm::AttributeList::get(v28, 5u, &a13, 1);
  a12 = 9;
  a28 = llvm::AttributeList::get(v28, 6u, &a12, 1);
  a11 = 37;
  *(_QWORD *)(v29 + 48) = llvm::AttributeList::get(v28, 0xFFFFFFFF, &a11, 1);
  JUMPOUT(0x1C53C9D38);
}

void sub_1C53CC968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t *v22;

  a13 = 9;
  a21 = llvm::AttributeList::get(v22, 1u, &a13, 1);
  a19 = 9;
  a22 = llvm::AttributeList::get(v22, 2u, &a19, 1);
  a17 = 37;
  JUMPOUT(0x1C53C9E84);
}

void sub_1C53CC970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, uint64_t a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t *v26;

  a14 = 9;
  a22 = llvm::AttributeList::get(v26, 1u, &a14, 1);
  a20 = 9;
  a23 = llvm::AttributeList::get(v26, 2u, &a20, 1);
  a18 = 9;
  a24 = llvm::AttributeList::get(v26, 4u, &a18, 1);
  a13 = 9;
  a25 = llvm::AttributeList::get(v26, 5u, &a13, 1);
  a12 = 9;
  a26 = llvm::AttributeList::get(v26, 6u, &a12, 1);
  JUMPOUT(0x1C53CC6E0);
}

void sub_1C53CCA20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t *v23;

  a13 = 9;
  a21 = llvm::AttributeList::get(v23, 1u, &a13, 1);
  a19 = 9;
  a22 = llvm::AttributeList::get(v23, 2u, &a19, 1);
  a17 = 9;
  a23 = llvm::AttributeList::get(v23, 5u, &a17, 1);
  JUMPOUT(0x1C53CCB94);
}

void sub_1C53CCB9C()
{
  JUMPOUT(0x1C53CCBA4);
}

void sub_1C53CCBB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;
  _QWORD v22[24];

  a19 = 22;
  a21 = llvm::AttributeList::get(v21, 1u, &a19, 1);
  v22[0] = 0x300000025;
  v22[9] = llvm::AttributeList::get(v21, 0xFFFFFFFF, (int *)v22, 2);
  JUMPOUT(0x1C53C9D38);
}

void sub_1C53CCDB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a19 = 9;
  a21 = llvm::AttributeList::get(v21, 4u, &a19, 1);
  JUMPOUT(0x1C53CD778);
}

void sub_1C53CCDC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t *v22;

  a13 = 0x4200000016;
  a21 = llvm::AttributeList::get(v22, 1u, (int *)&a13, 2);
  a19 = 0x2D00000016;
  a22 = llvm::AttributeList::get(v22, 2u, (int *)&a19, 2);
  a17 = 0x300000025;
  JUMPOUT(0x1C53CD694);
}

void sub_1C53CCE38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;
  _QWORD v22[24];

  a19 = 9;
  a21 = llvm::AttributeList::get(v21, 1u, &a19, 1);
  v22[0] = 0x2D00000025;
  v22[9] = llvm::AttributeList::get(v21, 0xFFFFFFFF, (int *)v22, 2);
  JUMPOUT(0x1C53C9D38);
}

void sub_1C53CCE40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a13 = 0x4200000013;
  a21 = llvm::AttributeList::get(v21, 1u, (int *)&a13, 2);
  JUMPOUT(0x1C53CCE74);
}

void sub_1C53CCEA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a19 = 22;
  a21 = llvm::AttributeList::get(v21, 1u, &a19, 1);
  JUMPOUT(0x1C53C9FACLL);
}

void sub_1C53CCED8()
{
  JUMPOUT(0x1C53C9E00);
}

void sub_1C53CCEE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a19 = 0x4200000016;
  a21 = llvm::AttributeList::get(v21, 1u, (int *)&a19, 2);
  JUMPOUT(0x1C53CD790);
}

void sub_1C53CCF54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a19 = 22;
  a21 = llvm::AttributeList::get(v21, 3u, &a19, 1);
  JUMPOUT(0x1C53C9FACLL);
}

void sub_1C53CCF88()
{
  JUMPOUT(0x1C53C9D18);
}

void sub_1C53CCF94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a19 = 22;
  a21 = llvm::AttributeList::get(v21, 1u, &a19, 1);
  JUMPOUT(0x1C53CCFB8);
}

void sub_1C53CCFE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a19 = 9;
  a21 = llvm::AttributeList::get(v21, 2u, &a19, 1);
  JUMPOUT(0x1C53CD00CLL);
}

void sub_1C53CD028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a19 = 22;
  a21 = llvm::AttributeList::get(v21, 1u, &a19, 1);
  JUMPOUT(0x1C53CCFC8);
}

void sub_1C53CD060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a19 = 22;
  a21 = llvm::AttributeList::get(v21, 1u, &a19, 1);
  JUMPOUT(0x1C53CCFC8);
}

void sub_1C53CD098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a19 = 22;
  a21 = llvm::AttributeList::get(v21, 2u, &a19, 1);
  JUMPOUT(0x1C53CD780);
}

void sub_1C53CD0C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a19 = 22;
  a21 = llvm::AttributeList::get(v21, 2u, &a19, 1);
  JUMPOUT(0x1C53CD0F4);
}

void sub_1C53CD128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  a13 = 9;
  llvm::AttributeList::get(v13, 6, &a13, 1);
  JUMPOUT(0x1C53C9FACLL);
}

void sub_1C53CD140()
{
  JUMPOUT(0x1C53CA330);
}

void sub_1C53CD158()
{
  JUMPOUT(0x1C53CA330);
}

void sub_1C53CD170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t *v22;

  a19 = 22;
  a21 = llvm::AttributeList::get(v22, 2u, &a19, 1);
  a17 = 9;
  a22 = llvm::AttributeList::get(v22, 5u, &a17, 1);
  JUMPOUT(0x1C53CD68CLL);
}

void sub_1C53CD1E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a13 = 22;
  a21 = llvm::AttributeList::get(v21, 2u, &a13, 1);
  a19 = 9;
  JUMPOUT(0x1C53CDAC4);
}

void sub_1C53CD214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t *v22;

  a19 = 22;
  a21 = llvm::AttributeList::get(v22, 2u, &a19, 1);
  a17 = 9;
  a22 = llvm::AttributeList::get(v22, 6u, &a17, 1);
  JUMPOUT(0x1C53CD68CLL);
}

void sub_1C53CD24C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t *v22;

  a19 = 22;
  a21 = llvm::AttributeList::get(v22, 3u, &a19, 1);
  a17 = 9;
  a22 = llvm::AttributeList::get(v22, 7u, &a17, 1);
  JUMPOUT(0x1C53CC818);
}

void sub_1C53CD3D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t *v22;

  a13 = 22;
  a21 = llvm::AttributeList::get(v22, 3u, &a13, 1);
  a19 = 9;
  a22 = llvm::AttributeList::get(v22, 6u, &a19, 1);
  a17 = 37;
  JUMPOUT(0x1C53CA0C4);
}

void sub_1C53CD414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t *v22;

  a19 = 22;
  a21 = llvm::AttributeList::get(v22, 4u, &a19, 1);
  a17 = 9;
  a22 = llvm::AttributeList::get(v22, 7u, &a17, 1);
  JUMPOUT(0x1C53CD68CLL);
}

void sub_1C53CD44C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a13 = 22;
  a21 = llvm::AttributeList::get(v21, 4u, &a13, 1);
  a19 = 9;
  JUMPOUT(0x1C53CDAC4);
}

void sub_1C53CD484()
{
  JUMPOUT(0x1C53CD498);
}

void sub_1C53CD4BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a13 = 22;
  a21 = llvm::AttributeList::get(v21, 5u, &a13, 1);
  a19 = 9;
  JUMPOUT(0x1C53CDAC4);
}

void sub_1C53CD4F4()
{
  JUMPOUT(0x1C53CD508);
}

void sub_1C53CD52C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a13 = 22;
  a21 = llvm::AttributeList::get(v21, 6u, &a13, 1);
  a19 = 9;
  JUMPOUT(0x1C53CDAC4);
}

void sub_1C53CD564()
{
  JUMPOUT(0x1C53CD578);
}

void sub_1C53CD59C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a13 = 22;
  a21 = llvm::AttributeList::get(v21, 7u, &a13, 1);
  a19 = 9;
  JUMPOUT(0x1C53CDAC4);
}

void sub_1C53CD5D4()
{
  JUMPOUT(0x1C53CD5E8);
}

void sub_1C53CD60C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a13 = 22;
  a21 = llvm::AttributeList::get(v21, 8u, &a13, 1);
  a19 = 9;
  JUMPOUT(0x1C53CDAC4);
}

void sub_1C53CD644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a19 = 22;
  a21 = llvm::AttributeList::get(v21, 9u, &a19, 1);
  JUMPOUT(0x1C53CD66CLL);
}

void sub_1C53CD6A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a13 = 22;
  a21 = llvm::AttributeList::get(v21, 9u, &a13, 1);
  a19 = 9;
  JUMPOUT(0x1C53CDAC4);
}

void sub_1C53CD6DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a13 = 9;
  a21 = llvm::AttributeList::get(v21, 2u, &a13, 1);
  a19 = 9;
  JUMPOUT(0x1C53CD710);
}

void sub_1C53CD738()
{
  JUMPOUT(0x1C53CD764);
}

void sub_1C53CD79C()
{
  JUMPOUT(0x1C53CD764);
}

void sub_1C53CD7B4()
{
  JUMPOUT(0x1C53CD764);
}

void sub_1C53CD7CC()
{
  JUMPOUT(0x1C53CD764);
}

void sub_1C53CD7E4()
{
  JUMPOUT(0x1C53CD764);
}

void sub_1C53CD7FC()
{
  JUMPOUT(0x1C53CD764);
}

void sub_1C53CD814()
{
  JUMPOUT(0x1C53C9D18);
}

void sub_1C53CD824()
{
  JUMPOUT(0x1C53C9E98);
}

void sub_1C53CD878()
{
  JUMPOUT(0x1C53C9D18);
}

void sub_1C53CD884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;
  _QWORD v22[24];

  a19 = 22;
  a21 = llvm::AttributeList::get(v21, 1u, &a19, 1);
  v22[0] = 0xB00000025;
  v22[9] = llvm::AttributeList::get(v21, 0xFFFFFFFF, (int *)v22, 2);
  JUMPOUT(0x1C53C9D38);
}

void sub_1C53CD8B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a13 = 0x2D00000016;
  a21 = llvm::AttributeList::get(v21, 1u, (int *)&a13, 2);
  JUMPOUT(0x1C53CCE2CLL);
}

void sub_1C53CD904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a13 = 9;
  a21 = llvm::AttributeList::get(v21, 1u, &a13, 1);
  JUMPOUT(0x1C53CD3C0);
}

void sub_1C53CD92C()
{
  JUMPOUT(0x1C53CD110);
}

void sub_1C53CD944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a13 = 9;
  a21 = llvm::AttributeList::get(v21, 4u, &a13, 1);
  a19 = 9;
  JUMPOUT(0x1C53CD968);
}

void sub_1C53CD978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a19 = 9;
  a21 = llvm::AttributeList::get(v21, 3u, &a19, 1);
  JUMPOUT(0x1C53CC804);
}

void sub_1C53CD9B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;

  a19 = 9;
  a21 = llvm::AttributeList::get(v21, 4, &a19, 1);
  JUMPOUT(0x1C53CDA64);
}

void sub_1C53CD9C8()
{
  JUMPOUT(0x1C53CD9DCLL);
}

void sub_1C53CD9FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21)
{
  uint64_t *v21;

  a19 = 9;
  a21 = llvm::AttributeList::get(v21, 3u, &a19, 1);
  JUMPOUT(0x1C53CC804);
}

void sub_1C53CDA34()
{
  JUMPOUT(0x1C53CDA48);
}

void sub_1C53CDA7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  a13 = 9;
  llvm::AttributeList::get(v13, 5, &a13, 1);
  JUMPOUT(0x1C53C9FACLL);
}

void sub_1C53CDAEC()
{
  JUMPOUT(0x1C53CDAFCLL);
}

void llvm::Function::~Function(llvm::Function *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *i;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD **v12;
  uint64_t v13;
  _QWORD *j;
  uint64_t v15;
  llvm::BasicBlock *v16;
  unsigned int v17;
  uint64_t v18;
  int32x2_t **v19;
  int32x2_t *v20;
  __int32 v21;
  int32x2_t v22;
  __int32 v23;
  unsigned int v24;
  uint64_t v25;
  llvm::Function *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *k;
  uint64_t v31;
  llvm::Value *v32;
  int v33;
  unsigned int v34;
  char *v35;
  uint64_t v36;
  unsigned __int8 *v37;
  char *v38;
  uint64_t v39;
  _QWORD **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  llvm::Function *v48;

  *((_DWORD *)this + 8) &= ~0x800000u;
  v2 = (_QWORD *)((char *)this + 72);
  v3 = (_QWORD *)*((_QWORD *)this + 10);
LABEL_2:
  if (v3 != v2)
  {
    if (v3)
      v4 = v3 - 3;
    else
      v4 = 0;
    v5 = v4 + 5;
    for (i = (_QWORD *)v4[6]; ; i = (_QWORD *)i[1])
    {
      if (i == v5)
      {
        v3 = (_QWORD *)v3[1];
        goto LABEL_2;
      }
      if (i)
        v7 = i - 3;
      else
        v7 = 0;
      v8 = *((_DWORD *)v7 + 5);
      if ((v8 & 0x40000000) != 0)
      {
        v10 = (_QWORD *)*(v7 - 1);
        v9 = v8 & 0x7FFFFFF;
        if (!v9)
          continue;
      }
      else
      {
        v9 = v8 & 0x7FFFFFF;
        v10 = &v7[-4 * v9];
        if (!v9)
          continue;
      }
      v11 = 32 * v9;
      v12 = (_QWORD **)(v10 + 2);
      do
      {
        if (*(v12 - 2))
        {
          **v12 = *(v12 - 1);
          v13 = (uint64_t)*(v12 - 1);
          if (v13)
            *(_QWORD *)(v13 + 16) = *v12;
        }
        *(v12 - 2) = 0;
        v12 += 4;
        v11 -= 32;
      }
      while (v11);
    }
  }
  for (j = (_QWORD *)*v2; j != v2; j = (_QWORD *)*((_QWORD *)this + 9))
  {
    v15 = *((_QWORD *)this + 10);
    if (v15)
      v16 = (llvm::BasicBlock *)(v15 - 24);
    else
      v16 = 0;
    llvm::BasicBlock::eraseFromParent(v16);
  }
  v17 = *((_DWORD *)this + 5);
  v18 = v17 & 0x7FFFFFF;
  if ((v17 & 0x7FFFFFF) != 0)
  {
    if ((v17 & 0x40000000) != 0)
    {
      v38 = (char *)*((_QWORD *)this - 1);
    }
    else
    {
      v18 = v18;
      v38 = (char *)this - 32 * v18;
    }
    v39 = 32 * v18;
    v40 = (_QWORD **)(v38 + 16);
    do
    {
      if (*(v40 - 2))
      {
        **v40 = *(v40 - 1);
        v41 = (uint64_t)*(v40 - 1);
        if (v41)
          *(_QWORD *)(v41 + 16) = *v40;
      }
      *(v40 - 2) = 0;
      v40 += 4;
      v39 -= 32;
    }
    while (v39);
    v17 = *((_DWORD *)this + 5) & 0xF8000000;
    *((_DWORD *)this + 5) = v17;
    *((_WORD *)this + 9) &= 0xFFF1u;
  }
  if ((v17 & 0x20000000) != 0)
  {
    v19 = **(int32x2_t ****)this;
    v20 = *v19;
    v21 = (*v19)[312].i32[0];
    if (v21)
    {
      v22 = v20[310];
      v23 = v21 - 1;
      v24 = v23 & ((this >> 4) ^ (this >> 9));
      v25 = *(_QWORD *)&v22 + 40 * v24;
      v26 = *(llvm::Function **)v25;
      if (*(llvm::Function **)v25 == this)
      {
LABEL_32:
        v27 = *(char **)(v25 + 8);
        v28 = *(unsigned int *)(v25 + 16);
        if ((_DWORD)v28)
        {
          v35 = v27 - 8;
          v36 = 16 * v28;
          do
          {
            v37 = *(unsigned __int8 **)&v35[v36];
            if (v37)
              llvm::MetadataTracking::untrack((uint64_t)&v35[v36], v37);
            v36 -= 16;
          }
          while (v36);
          v27 = *(char **)(v25 + 8);
        }
        if (v27 != (char *)(v25 + 24))
          free(v27);
        *(_QWORD *)v25 = -8192;
        v20[311] = vadd_s32(v20[311], (int32x2_t)0x1FFFFFFFFLL);
        v17 = *((_DWORD *)this + 5);
      }
      else
      {
        v33 = 1;
        while (v26 != (llvm::Function *)-4096)
        {
          v34 = v24 + v33++;
          v24 = v34 & v23;
          v25 = *(_QWORD *)&v22 + 40 * v24;
          v26 = *(llvm::Function **)v25;
          if (*(llvm::Function **)v25 == this)
            goto LABEL_32;
        }
      }
    }
    *((_DWORD *)this + 5) = v17 & 0xDFFFFFFF;
  }
  if (*((_QWORD *)this + 11))
    llvm::Function::clearArguments(this);
  if ((*((_WORD *)this + 9) & 0x4000) != 0)
  {
    v42 = ***(_QWORD ***)this + 2640;
    v48 = this;
    sub_1C53F8CFC(v42, &v48);
    *((_WORD *)this + 9) &= ~0x4000u;
  }
  v29 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v29)
  {
    if (*(_DWORD *)(v29 + 12))
    {
      v43 = *(unsigned int *)(v29 + 8);
      if ((_DWORD)v43)
      {
        v44 = 0;
        v45 = 8 * v43;
        do
        {
          v46 = *(_QWORD *)(*(_QWORD *)v29 + v44);
          if (v46 != -8 && v46 != 0)
            MEMORY[0x1CAA32FB4]();
          v44 += 8;
        }
        while (v45 != v44);
      }
    }
    free(*(void **)v29);
    MEMORY[0x1CAA32FC0](v29, 0x1080C402C9B36C6);
  }
  for (k = (_QWORD *)*((_QWORD *)this + 10); v2 != k; k = (_QWORD *)sub_1C53D2A00((uint64_t)v2, k))
    ;
  v31 = *((_QWORD *)this + 6);
  if (v31)
    llvm::Comdat::removeUser(v31, (uint64_t)this);
  *((_QWORD *)this + 6) = 0;
  llvm::Constant::removeDeadConstantUsers((uint64_t)this);
  llvm::Value::~Value(this, v32);
}

void llvm::Function::dropAllReferences(llvm::Function *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *i;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD **v12;
  uint64_t v13;
  _QWORD *j;
  uint64_t v15;
  llvm::BasicBlock *v16;
  unsigned int v17;
  uint64_t v18;
  int32x2_t **v19;
  int32x2_t *v20;
  __int32 v21;
  int32x2_t v22;
  __int32 v23;
  unsigned int v24;
  uint64_t v25;
  llvm::Function *v26;
  char *v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  char *v31;
  uint64_t v32;
  unsigned __int8 *v33;
  char *v34;
  uint64_t v35;
  _QWORD **v36;
  uint64_t v37;

  *((_DWORD *)this + 8) &= ~0x800000u;
  v2 = (_QWORD *)((char *)this + 72);
  v3 = (_QWORD *)*((_QWORD *)this + 10);
LABEL_2:
  if (v3 != v2)
  {
    if (v3)
      v4 = v3 - 3;
    else
      v4 = 0;
    v5 = v4 + 5;
    for (i = (_QWORD *)v4[6]; ; i = (_QWORD *)i[1])
    {
      if (i == v5)
      {
        v3 = (_QWORD *)v3[1];
        goto LABEL_2;
      }
      if (i)
        v7 = i - 3;
      else
        v7 = 0;
      v8 = *((_DWORD *)v7 + 5);
      if ((v8 & 0x40000000) != 0)
      {
        v10 = (_QWORD *)*(v7 - 1);
        v9 = v8 & 0x7FFFFFF;
        if (!v9)
          continue;
      }
      else
      {
        v9 = v8 & 0x7FFFFFF;
        v10 = &v7[-4 * v9];
        if (!v9)
          continue;
      }
      v11 = 32 * v9;
      v12 = (_QWORD **)(v10 + 2);
      do
      {
        if (*(v12 - 2))
        {
          **v12 = *(v12 - 1);
          v13 = (uint64_t)*(v12 - 1);
          if (v13)
            *(_QWORD *)(v13 + 16) = *v12;
        }
        *(v12 - 2) = 0;
        v12 += 4;
        v11 -= 32;
      }
      while (v11);
    }
  }
  for (j = (_QWORD *)*v2; j != v2; j = (_QWORD *)*((_QWORD *)this + 9))
  {
    v15 = *((_QWORD *)this + 10);
    if (v15)
      v16 = (llvm::BasicBlock *)(v15 - 24);
    else
      v16 = 0;
    llvm::BasicBlock::eraseFromParent(v16);
  }
  v17 = *((_DWORD *)this + 5);
  v18 = v17 & 0x7FFFFFF;
  if ((v17 & 0x7FFFFFF) != 0)
  {
    if ((v17 & 0x40000000) != 0)
    {
      v34 = (char *)*((_QWORD *)this - 1);
    }
    else
    {
      v18 = v18;
      v34 = (char *)this - 32 * v18;
    }
    v35 = 32 * v18;
    v36 = (_QWORD **)(v34 + 16);
    do
    {
      if (*(v36 - 2))
      {
        **v36 = *(v36 - 1);
        v37 = (uint64_t)*(v36 - 1);
        if (v37)
          *(_QWORD *)(v37 + 16) = *v36;
      }
      *(v36 - 2) = 0;
      v36 += 4;
      v35 -= 32;
    }
    while (v35);
    v17 = *((_DWORD *)this + 5) & 0xF8000000;
    *((_DWORD *)this + 5) = v17;
    *((_WORD *)this + 9) &= 0xFFF1u;
  }
  if ((v17 & 0x20000000) != 0)
  {
    v19 = **(int32x2_t ****)this;
    v20 = *v19;
    v21 = (*v19)[312].i32[0];
    if (v21)
    {
      v22 = v20[310];
      v23 = v21 - 1;
      v24 = v23 & ((this >> 4) ^ (this >> 9));
      v25 = *(_QWORD *)&v22 + 40 * v24;
      v26 = *(llvm::Function **)v25;
      if (*(llvm::Function **)v25 == this)
      {
LABEL_32:
        v27 = *(char **)(v25 + 8);
        v28 = *(unsigned int *)(v25 + 16);
        if ((_DWORD)v28)
        {
          v31 = v27 - 8;
          v32 = 16 * v28;
          do
          {
            v33 = *(unsigned __int8 **)&v31[v32];
            if (v33)
              llvm::MetadataTracking::untrack((uint64_t)&v31[v32], v33);
            v32 -= 16;
          }
          while (v32);
          v27 = *(char **)(v25 + 8);
        }
        if (v27 != (char *)(v25 + 24))
          free(v27);
        *(_QWORD *)v25 = -8192;
        v20[311] = vadd_s32(v20[311], (int32x2_t)0x1FFFFFFFFLL);
        v17 = *((_DWORD *)this + 5);
      }
      else
      {
        v29 = 1;
        while (v26 != (llvm::Function *)-4096)
        {
          v30 = v24 + v29++;
          v24 = v30 & v23;
          v25 = *(_QWORD *)&v22 + 40 * v24;
          v26 = *(llvm::Function **)v25;
          if (*(llvm::Function **)v25 == this)
            goto LABEL_32;
        }
      }
    }
    *((_DWORD *)this + 5) = v17 & 0xDFFFFFFF;
  }
}

void llvm::Function::clearArguments(llvm::Function *this)
{
  uint64_t v2;
  uint64_t ***v3;
  uint64_t v4;
  llvm::Value *v5;
  _BYTE v6[32];
  __int16 v7;

  v3 = (uint64_t ***)*((_QWORD *)this + 11);
  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    v4 = 40 * v2;
    do
    {
      v7 = 257;
      llvm::Value::setName(v3, (uint64_t)v6);
      llvm::Value::~Value((llvm::Value *)v3, v5);
      v3 += 5;
      v4 -= 40;
    }
    while (v4);
    v3 = (uint64_t ***)*((_QWORD *)this + 11);
  }
  operator delete(v3);
  *((_QWORD *)this + 11) = 0;
}

uint64_t llvm::Function::clearGC(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if ((*(_WORD *)(this + 18) & 0x4000) != 0)
  {
    v1 = this;
    v2 = ***(_QWORD ***)this + 2640;
    v3 = v1;
    this = sub_1C53F8CFC(v2, &v3);
    *(_WORD *)(v1 + 18) &= ~0x4000u;
  }
  return this;
}

void llvm::Function::BuildLazyArguments(llvm::Function *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[32];
  __int16 v12;

  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    if (v2 >= 0x666666666666667)
      sub_1C4764EE4();
    v3 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 11) = operator new(40 * v2);
    v4 = v2;
    if ((_DWORD)v2)
    {
      v5 = 0;
      v6 = 0;
      v7 = 40 * v4;
      do
      {
        v8 = v6 + 1;
        v9 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v6 + 8);
        v10 = *((_QWORD *)this + 11) + v5;
        v12 = 257;
        *(_QWORD *)v10 = v9;
        *(_QWORD *)(v10 + 8) = 0;
        LODWORD(v9) = *(_DWORD *)(v10 + 20) & 0xC0000000;
        *(_DWORD *)(v10 + 16) = 21;
        *(_DWORD *)(v10 + 20) = v9;
        *(_QWORD *)(v10 + 24) = this;
        *(_DWORD *)(v10 + 32) = v6;
        llvm::Value::setName((uint64_t ***)v10, (uint64_t)v11);
        v5 += 40;
        v6 = v8;
      }
      while (v7 != v5);
    }
  }
  *((_WORD *)this + 9) &= ~1u;
}

uint64_t llvm::Function::addAttributeAtIndex(llvm::LLVMContext ***a1, int a2, uint64_t a3)
{
  uint64_t result;

  result = llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(a1 + 14), **a1, a2, a3);
  a1[14] = (llvm::LLVMContext **)result;
  return result;
}

uint64_t llvm::Function::addFnAttr(uint64_t a1, int a2)
{
  uint64_t result;

  result = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(a1 + 112), **(uint64_t ***)a1, -1, a2);
  *(_QWORD *)(a1 + 112) = result;
  return result;
}

uint64_t llvm::Function::addFnAttr(uint64_t ***a1, unsigned __int8 *a2, size_t a3, unsigned __int8 *a4, size_t a5)
{
  uint64_t result;

  result = llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(a1 + 14), **a1, -1, a2, a3, a4, a5);
  a1[14] = (uint64_t **)result;
  return result;
}

uint64_t llvm::Function::addRetAttr(llvm::LLVMContext ***a1, uint64_t a2)
{
  uint64_t result;

  result = llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(a1 + 14), **a1, 0, a2);
  a1[14] = (llvm::LLVMContext **)result;
  return result;
}

llvm::LLVMContext **llvm::Function::addRetAttrs(llvm::LLVMContext ***this, const llvm::AttrBuilder *a2)
{
  llvm::LLVMContext **result;

  result = (llvm::LLVMContext **)llvm::AttributeList::addAttributesAtIndex((llvm::AttributeList *)(this + 14), **this, 0, a2);
  this[14] = result;
  return result;
}

uint64_t llvm::Function::removeAttributeAtIndex(uint64_t a1, int a2, int a3)
{
  uint64_t result;

  result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(a1 + 112), **(uint64_t ***)a1, a2, a3);
  *(_QWORD *)(a1 + 112) = result;
  return result;
}

uint64_t llvm::Function::removeAttributeAtIndex(uint64_t a1, int a2, _QWORD *a3, size_t a4)
{
  uint64_t result;

  result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(a1 + 112), **(uint64_t ***)a1, a2, a3, a4);
  *(_QWORD *)(a1 + 112) = result;
  return result;
}

uint64_t llvm::Function::removeFnAttr(uint64_t a1, int a2)
{
  uint64_t result;

  result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(a1 + 112), **(uint64_t ***)a1, -1, a2);
  *(_QWORD *)(a1 + 112) = result;
  return result;
}

uint64_t llvm::Function::removeFnAttr(uint64_t a1, _QWORD *a2, size_t a3)
{
  uint64_t result;

  result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(a1 + 112), **(uint64_t ***)a1, -1, a2, a3);
  *(_QWORD *)(a1 + 112) = result;
  return result;
}

uint64_t llvm::Function::removeFnAttrs(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v2 = **(uint64_t ***)a1;
  v4 = (uint64_t *)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 112);
  if (v3 && *(_DWORD *)(v3 + 8))
    v5 = *(_QWORD *)(v3 + 40);
  else
    v5 = 0;
  v8 = v5;
  v6 = llvm::AttributeSet::removeAttributes(&v8, v2, a2);
  if (v5 == v6)
    result = *v4;
  else
    result = llvm::AttributeList::setAttributesAtIndex(v4, v2, -1, v6);
  *v4 = result;
  return result;
}

uint64_t llvm::Function::removeRetAttr(uint64_t a1, int a2)
{
  uint64_t result;

  result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(a1 + 112), **(uint64_t ***)a1, 0, a2);
  *(_QWORD *)(a1 + 112) = result;
  return result;
}

uint64_t llvm::Function::removeRetAttr(uint64_t a1, _QWORD *a2, size_t a3)
{
  uint64_t result;

  result = llvm::AttributeList::removeAttributeAtIndex((uint64_t *)(a1 + 112), **(uint64_t ***)a1, 0, a2, a3);
  *(_QWORD *)(a1 + 112) = result;
  return result;
}

uint64_t llvm::Function::removeRetAttrs(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v2 = **(uint64_t ***)a1;
  v4 = (uint64_t *)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 112);
  if (v3 && *(_DWORD *)(v3 + 8) >= 2u)
    v5 = *(_QWORD *)(v3 + 48);
  else
    v5 = 0;
  v8 = v5;
  v6 = llvm::AttributeSet::removeAttributes(&v8, v2, a2);
  if (v5 == v6)
    result = *v4;
  else
    result = llvm::AttributeList::setAttributesAtIndex(v4, v2, 0, v6);
  *v4 = result;
  return result;
}

uint64_t llvm::Function::removeParamAttrs(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = **(uint64_t ***)a1;
  v6 = (uint64_t *)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 112);
  if (v5 && (a2 + 2) < *(_DWORD *)(v5 + 8))
    v7 = *(_QWORD *)(v5 + 8 * (a2 + 2) + 40);
  else
    v7 = 0;
  v10 = v7;
  v8 = llvm::AttributeSet::removeAttributes(&v10, v4, a3);
  if (v7 == v8)
    result = *v6;
  else
    result = llvm::AttributeList::setAttributesAtIndex(v6, v4, a2 + 1, v8);
  *v6 = result;
  return result;
}

llvm::LLVMContext **llvm::Function::addDereferenceableParamAttr(llvm::LLVMContext ***this, int a2, uint64_t a3)
{
  llvm::LLVMContext **result;

  result = (llvm::LLVMContext **)llvm::AttributeList::addDereferenceableParamAttr((llvm::AttributeList *)(this + 14), **this, a2, a3);
  this[14] = result;
  return result;
}

uint64_t llvm::Function::hasFnAttribute(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 112);
  if (v2)
    return (*(unsigned __int8 *)(v2 + a2 / 8 + 12) >> (a2 & 7)) & 1;
  else
    return 0;
}

uint64_t llvm::Function::hasFnAttribute(uint64_t a1, _QWORD *a2, size_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int i;
  int v12;
  uint64_t v13;
  const void *v14;

  v3 = *(_QWORD *)(a1 + 112);
  if (!v3)
    return 0;
  if (!*(_DWORD *)(v3 + 8))
    return 0;
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
    return 0;
  v5 = *(_DWORD *)(v4 + 40);
  if (!v5)
    return 0;
  v8 = *(_QWORD *)(v4 + 24);
  v9 = sub_1C5E3DF4C(a2, (uint64_t)a2 + a3);
  v10 = v5 - 1;
  for (i = 1; ; ++i)
  {
    v12 = v9 & v10;
    v13 = v8 + 24 * (v9 & v10);
    v14 = *(const void **)v13;
    if (*(_QWORD *)v13 == -1)
    {
      if (a2 == (_QWORD *)-1)
        return 1;
      goto LABEL_8;
    }
    if (v14 != (const void *)-2)
      break;
    if (a2 == (_QWORD *)-2)
      return 1;
LABEL_8:
    if (v14 == (const void *)-1)
      return 0;
    v9 = i + v12;
  }
  if (a3 != *(_QWORD *)(v13 + 8) || a3 && memcmp(a2, v14, a3))
    goto LABEL_8;
  return 1;
}

uint64_t llvm::Function::hasRetAttribute(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 112);
  if (v2 && *(_DWORD *)(v2 + 8) >= 2u && (v4 = *(_QWORD *)(v2 + 48)) != 0)
    return (*(unsigned __int8 *)(v4 + a2 / 8 + 12) >> (a2 & 7)) & 1;
  else
    return 0;
}

uint64_t llvm::Function::getAttributeAtIndex(uint64_t a1, int a2, int a3)
{
  return llvm::AttributeList::getAttributeAtIndex((uint64_t *)(a1 + 112), a2, a3);
}

uint64_t llvm::Function::getAttributeAtIndex(uint64_t a1, int a2, _QWORD *a3, size_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int i;
  int v13;
  uint64_t v14;
  const void *v15;

  v4 = *(_QWORD *)(a1 + 112);
  if (v4)
  {
    if ((a2 + 1) < *(_DWORD *)(v4 + 8))
    {
      v5 = *(_QWORD *)(v4 + 8 * (a2 + 1) + 40);
      if (v5)
      {
        v6 = *(_DWORD *)(v5 + 40);
        if (v6)
        {
          v9 = *(_QWORD *)(v5 + 24);
          v10 = sub_1C5E3DF4C(a3, (uint64_t)a3 + a4);
          v11 = v6 - 1;
          for (i = 1; ; ++i)
          {
            v13 = v10 & v11;
            v14 = v9 + 24 * (v10 & v11);
            v15 = *(const void **)v14;
            if (*(_QWORD *)v14 == -1)
            {
              if (a3 == (_QWORD *)-1)
                return *(_QWORD *)(v14 + 16);
            }
            else if (v15 == (const void *)-2)
            {
              if (a3 == (_QWORD *)-2)
                return *(_QWORD *)(v14 + 16);
            }
            else if (a4 == *(_QWORD *)(v14 + 8) && (!a4 || !memcmp(a3, *(const void **)v14, a4)))
            {
              return *(_QWORD *)(v14 + 16);
            }
            if (v15 == (const void *)-1)
              return 0;
            v10 = i + v13;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t llvm::Function::getFnAttribute(uint64_t a1, int a2)
{
  return llvm::AttributeList::getAttributeAtIndex((uint64_t *)(a1 + 112), -1, a2);
}

uint64_t llvm::Function::getFnAttribute(uint64_t a1, _QWORD *a2, size_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int i;
  int v12;
  uint64_t v13;
  const void *v14;

  v3 = *(_QWORD *)(a1 + 112);
  if (!v3)
    return 0;
  if (!*(_DWORD *)(v3 + 8))
    return 0;
  v4 = *(_QWORD *)(v3 + 40);
  if (!v4)
    return 0;
  v5 = *(_DWORD *)(v4 + 40);
  if (!v5)
    return 0;
  v8 = *(_QWORD *)(v4 + 24);
  v9 = sub_1C5E3DF4C(a2, (uint64_t)a2 + a3);
  v10 = v5 - 1;
  for (i = 1; ; ++i)
  {
    v12 = v9 & v10;
    v13 = v8 + 24 * (v9 & v10);
    v14 = *(const void **)v13;
    if (*(_QWORD *)v13 == -1)
    {
      if (a2 == (_QWORD *)-1)
        return *(_QWORD *)(v13 + 16);
      goto LABEL_8;
    }
    if (v14 != (const void *)-2)
      break;
    if (a2 == (_QWORD *)-2)
      return *(_QWORD *)(v13 + 16);
LABEL_8:
    if (v14 == (const void *)-1)
      return 0;
    v9 = i + v12;
  }
  if (a3 != *(_QWORD *)(v13 + 8) || a3 && memcmp(a2, *(const void **)v13, a3))
    goto LABEL_8;
  return *(_QWORD *)(v13 + 16);
}

llvm::LLVMContext **llvm::Function::addDereferenceableOrNullParamAttr(llvm::LLVMContext ***this, int a2, uint64_t a3)
{
  llvm::LLVMContext **result;

  result = (llvm::LLVMContext **)llvm::AttributeList::addDereferenceableOrNullParamAttr((llvm::AttributeList *)(this + 14), **this, a2, a3);
  this[14] = result;
  return result;
}

uint64_t sub_1C53CEAA4(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  int v11;
  int v13;
  uint64_t v16[2];
  char v17;

  v16[0] = a1;
  v16[1] = a2;
  v17 = 44;
  v4 = llvm::StringRef::find(v16, &v17, 1uLL, 0);
  if (a2 >= v4)
    v5 = v4;
  else
    v5 = a2;
  if (a2 >= v4 + 1)
    v6 = v4 + 1;
  else
    v6 = a2;
  v7 = (_QWORD *)(a1 + v6);
  v8 = a2 - v6;
  if (v4 == -1)
    v9 = 0;
  else
    v9 = v8;
  if (v4 == -1)
    v10 = 0;
  else
    v10 = v7;
  if (v4 == -1)
    v5 = a2;
  if (!v5)
  {
LABEL_20:
    v11 = 0;
    goto LABEL_29;
  }
  if (v5 != 13)
  {
    if (v5 != 4 || *(_DWORD *)a1 != 1701143913)
    {
      v11 = 255;
      goto LABEL_29;
    }
    goto LABEL_20;
  }
  if (*(_QWORD *)a1 == 0x6576726573657270 && *(_QWORD *)(a1 + 5) == 0x6E6769732D657672)
  {
    v11 = 1;
  }
  else if (*(_QWORD *)a1 ^ 0x6576697469736F70 | *(_QWORD *)(a1 + 5) ^ 0x6F72657A2D657669)
  {
    v11 = -1;
  }
  else
  {
    v11 = 2;
  }
LABEL_29:
  v13 = v11;
  if (v9)
  {
    if (v9 == 13)
    {
      if (*v10 == 0x6576726573657270 && *(_QWORD *)((char *)v10 + 5) == 0x6E6769732D657672)
      {
        v13 = 1;
      }
      else if (*v10 ^ 0x6576697469736F70 | *(_QWORD *)((char *)v10 + 5) ^ 0x6F72657A2D657669)
      {
        v13 = -1;
      }
      else
      {
        v13 = 2;
      }
    }
    else if (v9 == 4 && *(_DWORD *)v10 == 1701143913)
    {
      v13 = 0;
    }
    else
    {
      v13 = 255;
    }
  }
  return v11 | (v13 << 8);
}

void llvm::Function::setGC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
    v3 = *(_QWORD *)(a2 + 8);
  else
    v3 = *(unsigned __int8 *)(a2 + 23);
  *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xBFFF | ((v3 != 0) << 14);
  v4 = **(uint64_t ***)a1;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  llvm::LLVMContext::setGC(v4, a1, (__int128 *)__p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

uint64_t llvm::Function::setValueSubclassDataBit(uint64_t this, char a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v3 = *(unsigned __int16 *)(this + 18);
  v4 = v3 & ~(1 << a2);
  v5 = v3 | (1 << a2);
  if (!a3)
    LOWORD(v5) = v4;
  *(_WORD *)(this + 18) = v5;
  return this;
}

uint64_t llvm::Function::hasStackProtectorFnAttr(llvm::Function *this)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *((_QWORD *)this + 14);
  if (!v1)
    return 0;
  v2 = *(unsigned __int8 *)(v1 + 19);
  if ((v2 & 0x14) != 0)
    return 1;
  else
    return (v2 >> 3) & 1;
}

void llvm::Function::copyAttributesFrom(llvm::Function *this, const llvm::Function *a2)
{
  __int16 v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  __int16 v8;
  int v9;
  uint64_t *v10;
  __int16 v11;
  int v12;
  char *v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  char *v17;
  uint64_t v18;
  __int16 v19;
  void *__p[2];
  uint64_t v21;
  llvm::Function *v22;

  llvm::GlobalObject::copyAttributesFrom(this, a2);
  v4 = *((_WORD *)this + 9);
  *((_WORD *)this + 9) = v4 & 0xC00F | *((_WORD *)a2 + 9) & 0x3FF0;
  *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
  if ((*((_BYTE *)a2 + 19) & 0x40) != 0)
  {
    v6 = (uint64_t *)(***(_QWORD ***)a2 + 2640);
    v22 = a2;
    v7 = sub_1C53F9150(v6, (uint64_t *)&v22);
    if (*((char *)v7 + 31) < 0)
    {
      sub_1C47EBC30(__p, (void *)v7[1], v7[2]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v7 + 1);
      v21 = v7[3];
    }
    llvm::Function::setGC((uint64_t)this, (uint64_t)__p);
    if (SHIBYTE(v21) < 0)
      operator delete(__p[0]);
  }
  else if ((v4 & 0x4000) != 0)
  {
    v5 = ***(_QWORD ***)this + 2640;
    v22 = this;
    sub_1C53F8CFC(v5, &v22);
    *((_WORD *)this + 9) &= ~0x4000u;
  }
  v8 = *((_WORD *)a2 + 9);
  if ((v8 & 8) != 0)
  {
    v9 = *((_DWORD *)a2 + 5);
    if ((v9 & 0x40000000) != 0)
      v10 = (uint64_t *)*((_QWORD *)a2 - 1);
    else
      v10 = (uint64_t *)((char *)a2 - 32 * (v9 & 0x7FFFFFF));
    v11 = *v10 != 0;
    sub_1C53D1F60(this, *v10);
    *((_WORD *)this + 9) = *((_WORD *)this + 9) & 0xFFF7 | (8 * v11);
    v8 = *((_WORD *)a2 + 9);
    if ((v8 & 2) == 0)
    {
LABEL_11:
      if ((v8 & 4) == 0)
        return;
      goto LABEL_21;
    }
  }
  else if ((v8 & 2) == 0)
  {
    goto LABEL_11;
  }
  v12 = *((_DWORD *)a2 + 5);
  if ((v12 & 0x40000000) != 0)
    v13 = (char *)*((_QWORD *)a2 - 1);
  else
    v13 = (char *)a2 - 32 * (v12 & 0x7FFFFFF);
  v14 = *((_QWORD *)v13 + 4);
  v15 = v14 != 0;
  sub_1C53D2064(this, v14);
  *((_WORD *)this + 9) = *((_WORD *)this + 9) & 0xFFFD | (2 * v15);
  if ((*((_WORD *)a2 + 9) & 4) != 0)
  {
LABEL_21:
    v16 = *((_DWORD *)a2 + 5);
    if ((v16 & 0x40000000) != 0)
      v17 = (char *)*((_QWORD *)a2 - 1);
    else
      v17 = (char *)a2 - 32 * (v16 & 0x7FFFFFF);
    v18 = *((_QWORD *)v17 + 8);
    v19 = v18 != 0;
    sub_1C53D2170(this, v18);
    *((_WORD *)this + 9) = *((_WORD *)this + 9) & 0xFFFB | (4 * v19);
  }
}

_QWORD *llvm::Function::setPrefixData(llvm::Function *this, llvm::Constant *a2)
{
  _QWORD *result;
  __int16 v5;
  __int16 v6;
  __int16 v7;

  result = sub_1C53D2064(this, (uint64_t)a2);
  v5 = *((_WORD *)this + 9);
  v6 = v5 & 0xFFFD;
  v7 = v5 | 2;
  if (!a2)
    v7 = v6;
  *((_WORD *)this + 9) = v7;
  return result;
}

uint64_t llvm::Function::getPrefixData(llvm::Function *this)
{
  int v1;
  char *v2;

  v1 = *((_DWORD *)this + 5);
  if ((v1 & 0x40000000) != 0)
    v2 = (char *)*((_QWORD *)this - 1);
  else
    v2 = (char *)this - 32 * (v1 & 0x7FFFFFF);
  return *((_QWORD *)v2 + 4);
}

BOOL llvm::Function::isTargetIntrinsic(llvm::Function *this)
{
  return this > 0x181;
}

{
  return *((_DWORD *)this + 9) > 0x181u;
}

unint64_t llvm::Function::lookupIntrinsicID(_BYTE *a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  size_t v6;
  unint64_t v7;
  size_t v8;
  const void **v9;
  unint64_t v10;
  const void **v11;
  size_t v12;
  size_t v13;
  int v14;
  int v15;
  const char **v16;
  int v17;
  unint64_t v18;
  uint64_t v20[2];
  char v21;

  v4 = 5;
  if (a2 < 5)
    v4 = a2;
  v5 = &a1[v4];
  v6 = a2 - v4;
  v20[0] = (uint64_t)&a1[v4];
  v20[1] = a2 - v4;
  v21 = 46;
  v7 = llvm::StringRef::find(v20, &v21, 1uLL, 0);
  if (v6 >= v7)
    v8 = v7;
  else
    v8 = v6;
  if (v7 != -1)
    v6 = v8;
  v9 = (const void **)&off_1E8167290;
  v10 = 20;
  do
  {
    v11 = &v9[4 * (v10 >> 1)];
    v12 = (size_t)v11[1];
    if (v6 >= v12)
      v13 = (size_t)v11[1];
    else
      v13 = v6;
    if (v13 && (v14 = memcmp(*v11, v5, v13)) != 0)
    {
      v15 = (v14 >> 31) | 1;
    }
    else
    {
      if (v12 < v6)
        v15 = -1;
      else
        v15 = 1;
      if (v12 == v6)
        v15 = 0;
    }
    if (v15 == -1)
      v10 += ~(v10 >> 1);
    else
      v10 >>= 1;
    if (v15 == -1)
      v9 = v11 + 4;
  }
  while (v10);
    v9 = (const void **)&off_1E8167290;
  v16 = (const char **)&off_1E814EB28[(_QWORD)v9[2] + 1];
  v17 = llvm::Intrinsic::lookupLLVMIntrinsicByName(v16, (uint64_t)v9[3], a1, a2);
  if (v17 == -1)
    return 0;
  v18 = v17 + ((unint64_t)((char *)v16 - (char *)off_1E814EB28) >> 3);
  if (a2 != strlen(v16[v17]) && ((byte_1C860FB7B[v18 >> 3] >> (v18 & 7)) & 1) == 0)
    return 0;
  return v18;
}

unint64_t llvm::Function::recalculateIntrinsicID(llvm::Function *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::Function *v7;
  int v8;
  int v9;
  _QWORD *v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t result;

  if ((*((_BYTE *)this + 23) & 0x10) == 0)
  {
LABEL_16:
    result = 0;
    *((_DWORD *)this + 8) &= ~0x2000u;
    goto LABEL_15;
  }
  v2 = ***(_QWORD ***)this;
  v3 = *(_QWORD *)(v2 + 152);
  v4 = *(unsigned int *)(v2 + 168);
  if (!(_DWORD)v4)
    goto LABEL_17;
  LODWORD(v5) = (v4 - 1) & ((this >> 4) ^ (this >> 9));
  v6 = v3 + 16 * v5;
  v7 = *(llvm::Function **)v6;
  if (*(llvm::Function **)v6 != this)
  {
    v8 = 1;
    while (v7 != (llvm::Function *)-4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(llvm::Function **)(v3 + 16 * v5);
      if (v7 == this)
      {
        v6 = v3 + 16 * v5;
        goto LABEL_8;
      }
    }
LABEL_17:
    v6 = v3 + 16 * v4;
  }
LABEL_8:
  v10 = *(_QWORD **)(v6 + 8);
  v13 = *v10;
  v11 = v10 + 2;
  v12 = v13;
  if (v13 < 5)
    goto LABEL_16;
  if (*(_DWORD *)v11 != 1836477548 || v11[4] != 46)
    goto LABEL_16;
  *((_DWORD *)this + 8) |= 0x2000u;
  result = llvm::Function::lookupIntrinsicID(v11, v12);
LABEL_15:
  *((_DWORD *)this + 9) = result;
  return result;
}

char *llvm::Intrinsic::getName(llvm::Intrinsic *this)
{
  char *v1;

  v1 = off_1E814EB28[this];
  if (v1)
    strlen(off_1E814EB28[this]);
  return v1;
}

double sub_1C53CF274@<D0>(int a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, std::string *a7@<X6>, uint64_t a8@<X7>, std::string *a9@<X8>)
{
  size_t Type;
  char *v15;
  size_t v16;
  std::string::size_type v17;
  std::string *p_dst;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  std::string *v23;
  std::string::size_type v24;
  void **v25;
  std::string::size_type v26;
  std::string *v27;
  size_t size;
  double result;
  void *v30;
  std::string v31;
  void *__p[2];
  uint64_t v33;
  std::string __dst;
  char v35;

  Type = a5;
  v35 = 0;
  v15 = off_1E814EB28[a1];
  if (!v15)
  {
    v17 = 0;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
    p_dst = &__dst;
    goto LABEL_11;
  }
  v16 = strlen(off_1E814EB28[a1]);
  if (v16 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v17 = v16;
  if (v16 >= 0x17)
  {
    v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v19 = v16 | 7;
    v20 = v19 + 1;
    p_dst = (std::string *)operator new(v19 + 1);
    __dst.__r_.__value_.__l.__size_ = v17;
    __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v16;
  p_dst = &__dst;
  if (v16)
LABEL_10:
    memmove(p_dst, v15, v17);
LABEL_11:
  p_dst->__r_.__value_.__s.__data_[v17] = 0;
  if (a3)
  {
    v21 = 8 * a3;
    v22 = a2;
    do
    {
      sub_1C53D2C1C(a7, *v22, &v35, a3, (uint64_t)a4, a5, a6, a8, &v31, v30, (uint64_t)v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
      v23 = std::string::insert(&v31, 0, ".");
      v24 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v33 = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      if (v33 >= 0)
        v25 = __p;
      else
        v25 = (void **)__p[0];
      if (v33 >= 0)
        v26 = HIBYTE(v33) & 0x7F;
      else
        v26 = (std::string::size_type)__p[1];
      std::string::append(&__dst, (const std::string::value_type *)v25, v26);
      if (SHIBYTE(v33) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      ++v22;
      v21 -= 8;
    }
    while (v21);
  }
  if (v35)
  {
    if (!Type)
      Type = llvm::Intrinsic::getType(*a4, a1);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &__dst;
    else
      v27 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __dst.__r_.__value_.__l.__size_;
    llvm::Module::getUniqueIntrinsicName((uint64_t)a4, (unsigned __int8 *)v27, size, a1, Type, (uint64_t)a9);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  else
  {
    result = *(double *)&__dst.__r_.__value_.__l.__data_;
    *a9 = __dst;
  }
  return result;
}

double llvm::Intrinsic::getNameNoUnnamedTypes@<D0>(int a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, std::string *a5@<X6>, uint64_t a6@<X7>, std::string *a7@<X8>)
{
  return sub_1C53CF274(a1, a2, a3, 0, 0, a4, a5, a6, a7);
}

void llvm::Intrinsic::getIntrinsicInfoTableEntries(int a1)
{
  unsigned int v1;
  uint64_t v2;
  BOOL v3;
  int v4;
  _BYTE *v5;
  unsigned int v6;
  void *v7;
  __int128 v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v1 = dword_1C85FDD04[a1 - 1];
  v7 = v9;
  v8 = xmmword_1C6464ED0;
  if ((v1 & 0x80000000) != 0)
  {
    v4 = v1 & 0x7FFFFFFF;
    v5 = &unk_1C860A0B8;
    v2 = 23235;
  }
  else
  {
    v2 = 0;
    do
    {
      if ((unint64_t)(v2 + 1) > *((_QWORD *)&v8 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v7, v9, v2 + 1, 1);
        v2 = v8;
      }
      *((_BYTE *)v7 + v2) = v1 & 0xF;
      v2 = v8 + 1;
      *(_QWORD *)&v8 = v8 + 1;
      v3 = v1 > 0xF;
      v1 >>= 4;
    }
    while (v3);
    v4 = 0;
    v5 = v7;
  }
  v6 = v4;
  do
    sub_1C53CF5C8(&v6, (uint64_t)v5);
  while (v2 != v6 && v5[v6]);
  if (v7 != v9)
    free(v7);
}

void sub_1C53CF5C8(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = v2 + 1;
  __asm { BR              X12 }
}

void sub_1C53CF63C()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  LODWORD(v7) = 11;
  if ((v0 & 1) != 0)
    v4 = v3;
  else
    v4 = 2;
  HIDWORD(v7) = v4;
  v5 = *(unsigned int *)(v1 + 8);
  if (v5 >= *(unsigned int *)(v1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v1, v2, v5 + 1, 12);
    LODWORD(v5) = *(_DWORD *)(v1 + 8);
  }
  v6 = *(_QWORD *)v1 + 12 * v5;
  *(_QWORD *)v6 = v7;
  *(_DWORD *)(v6 + 8) = HIDWORD(v4);
  ++*(_DWORD *)(v1 + 8);
  JUMPOUT(0x1C53CF614);
}

unint64_t llvm::Intrinsic::getType(uint64_t a1, int a2)
{
  uint64_t **v2;
  uint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  unint64_t v11;
  unsigned int *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[64];
  void *v18;
  uint64_t v19;
  _QWORD v20[13];

  v20[12] = *MEMORY[0x1E0C80C00];
  v18 = v20;
  v19 = 0x800000000;
  llvm::Intrinsic::getIntrinsicInfoTableEntries(a2);
  v13 = (unsigned int *)v20;
  v14 = 0;
  sub_1C53D0340(&v13);
  v3 = v2;
  v15 = v17;
  v16 = 0x800000000;
  if (v14)
  {
    do
    {
      sub_1C53D0340(&v13);
      v5 = v4;
      v6 = v16;
      if (v16 >= (unint64_t)HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, (uint64_t)v17, v16 + 1, 8);
        v6 = v16;
      }
      *((_QWORD *)v15 + v6) = v5;
      v7 = v16;
      v8 = (v16 + 1);
      LODWORD(v16) = v16 + 1;
    }
    while (v14);
    v9 = (uint64_t *)v15;
    if (!(_DWORD)v8)
    {
      v8 = 0;
      goto LABEL_7;
    }
    if (*(_BYTE *)(*((_QWORD *)v15 + v8 - 1) + 8) != 7)
    {
LABEL_7:
      v10 = 0;
      goto LABEL_8;
    }
    LODWORD(v16) = v7;
    v10 = 1;
    v8 = v7;
  }
  else
  {
    v8 = 0;
    v10 = 0;
    v9 = (uint64_t *)v17;
  }
LABEL_8:
  v11 = llvm::FunctionType::get(v3, v9, v8, v10);
  if (v15 != v17)
    free(v15);
  if (v18 != v20)
    free(v18);
  return v11;
}

void sub_1C53D0340(unsigned int **a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **a1;
  v2 = (uint64_t)a1[1] - 1;
  *a1 += 3;
  a1[1] = (unsigned int *)v2;
  __asm { BR              X10 }
}

uint64_t sub_1C53D03AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  _QWORD *v52;

  return *v52 + 1576;
}

uint64_t llvm::Intrinsic::isLeaf(llvm::Intrinsic *this)
{
  return (((_DWORD)this - 124) > 4) | (6u >> ((_BYTE)this - 124)) & 1;
}

uint64_t llvm::Intrinsic::getDeclaration(uint64_t *a1, int a2, uint64_t *a3, uint64_t a4)
{
  unint64_t Type;
  uint64_t v9;
  std::string *v10;
  uint64_t v11;
  std::string *p_p;
  unint64_t size;
  llvm::PointerType *v14;
  uint64_t v15;
  uint64_t v16;
  std::string __p;

  Type = llvm::Intrinsic::getType(*a1, a2);
  if (a4)
  {
    p_p = &__p;
    sub_1C53CF274(a2, a3, a4, a1, Type, v9, v10, v11, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    }
    else
    {
      size = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
  }
  else
  {
    p_p = (std::string *)off_1E814EB28[a2];
    if (p_p)
      size = strlen(off_1E814EB28[a2]);
    else
      size = 0;
  }
  v14 = (llvm::PointerType *)llvm::Intrinsic::getType(*a1, a2);
  llvm::Module::getOrInsertFunction((uint64_t)a1, (unsigned __int8 *)p_p, size, v14, 0);
  v16 = v15;
  if (a4 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v16;
}

uint64_t llvm::Intrinsic::matchIntrinsicSignature(uint64_t a1, unsigned int **a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  if ((sub_1C53D0C94(**(_QWORD **)(a1 + 16), a2) & 1) != 0)
    return 1;
  v4 = 8 * *(unsigned int *)(a1 + 12) - 8;
  if (8 * *(unsigned int *)(a1 + 12) == 8)
    return 0;
  v5 = (uint64_t *)(*(_QWORD *)(a1 + 16) + 8);
  v6 = 8 * (v4 >> 3);
  while ((sub_1C53D0C94(*v5, a2) & 1) == 0)
  {
    ++v5;
    v6 -= 8;
    if (!v6)
      return 0;
  }
  return 2;
}

uint64_t sub_1C53D0C94(uint64_t a1, unsigned int **a2)
{
  unsigned int *v2;
  uint64_t v3;

  v2 = a2[1];
  if (v2)
  {
    v3 = **a2;
    *a2 += 3;
    a2[1] = (unsigned int *)((char *)v2 - 1);
    __asm { BR              X16 }
  }
  return 1;
}

uint64_t llvm::Intrinsic::matchIntrinsicVarArg(uint64_t result, int **a2)
{
  int *v2;
  int v3;

  v2 = a2[1];
  if (v2)
  {
    if (v2 == (int *)1)
    {
      v3 = **a2;
      *a2 += 3;
      a2[1] = 0;
      if (v3 == 1)
        return result ^ 1;
      else
        return 1;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

BOOL llvm::Intrinsic::getIntrinsicSignature(uint64_t a1)
{
  int v2;
  _BOOL8 v3;
  unsigned int v4;
  _BOOL4 v5;
  unsigned int *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[13];

  v12[12] = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 36);
  if (!v2)
    return 0;
  v10 = v12;
  v11 = 0x800000000;
  llvm::Intrinsic::getIntrinsicInfoTableEntries(v2);
  v8 = (unsigned int *)v12;
  v9 = 0;
  if (llvm::Intrinsic::matchIntrinsicSignature(*(_QWORD *)(a1 + 24), &v8))
  {
    v3 = 0;
  }
  else
  {
    v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 8);
    v5 = v4 > 0xFF;
    if (v9)
      v5 = v9 != 1 || *v8 != 1 || v4 < 0x100;
    v3 = !v5;
  }
  if (v10 != v12)
    free(v10);
  return v3;
}

size_t llvm::Intrinsic::remangleIntrinsicFunction(llvm::Intrinsic *this, llvm::Function *a2)
{
  uint64_t v3;
  std::string *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::Intrinsic *v12;
  int v13;
  int v14;
  size_t Declaration;
  _QWORD *v16;
  char *v17;
  size_t v18;
  std::string *v19;
  char v20;
  unint64_t size;
  uint64_t v22;
  size_t v23;
  void **v24;
  std::string *v25;
  std::string v27;
  void *__p[2];
  char v29;
  void **v30;
  __int16 v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[5];

  v34[4] = *MEMORY[0x1E0C80C00];
  v32 = v34;
  v33 = 0x400000000;
  if (!llvm::Intrinsic::getIntrinsicSignature((uint64_t)this))
  {
    Declaration = 0;
    goto LABEL_37;
  }
  v6 = *((_DWORD *)this + 9);
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v7 = ***(_QWORD ***)this;
    v8 = *(_QWORD *)(v7 + 152);
    v9 = *(unsigned int *)(v7 + 168);
    if ((_DWORD)v9)
    {
      LODWORD(v10) = (v9 - 1) & ((this >> 4) ^ (this >> 9));
      v11 = v8 + 16 * v10;
      v12 = *(llvm::Intrinsic **)v11;
      if (*(llvm::Intrinsic **)v11 == this)
      {
LABEL_11:
        v16 = *(_QWORD **)(v11 + 8);
        v18 = *v16;
        v17 = (char *)(v16 + 2);
        Declaration = v18;
        goto LABEL_12;
      }
      v13 = 1;
      while (v12 != (llvm::Intrinsic *)-4096)
      {
        v14 = v10 + v13++;
        v10 = v14 & (v9 - 1);
        v12 = *(llvm::Intrinsic **)(v8 + 16 * v10);
        if (v12 == this)
        {
          v11 = v8 + 16 * v10;
          goto LABEL_11;
        }
      }
    }
    v11 = v8 + 16 * v9;
    goto LABEL_11;
  }
  Declaration = 0;
  v17 = &byte_1C871356D;
LABEL_12:
  v19 = &v27;
  sub_1C53CF274(*((_DWORD *)this + 9), (uint64_t *)v32, v33, *((uint64_t **)this + 5), *((_QWORD *)this + 3), v3, v4, v5, &v27);
  v20 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    size = *((_BYTE *)&v27.__r_.__value_.__s + 23) & 0x7F;
  }
  else
  {
    size = v27.__r_.__value_.__l.__size_;
    v19 = (std::string *)v27.__r_.__value_.__r.__words[0];
  }
  if (Declaration != size)
  {
LABEL_18:
    v22 = sub_1C4FB7E80(*(uint64_t **)(*((_QWORD *)this + 5) + 112), (unsigned __int8 *)v19, size);
    if (v22)
    {
      Declaration = v22;
      if (!*(_BYTE *)(v22 + 16) && *(_QWORD *)(v22 + 24) == *((_QWORD *)this + 3))
      {
LABEL_35:
        *(_WORD *)(Declaration + 18) = *(_WORD *)(Declaration + 18) & 0xC00F | *((_WORD *)this + 9) & 0x3FF0;
        if ((*((_BYTE *)&v27.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_37;
        goto LABEL_36;
      }
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = *((_BYTE *)&v27.__r_.__value_.__s + 23) & 0x7F;
      else
        v23 = v27.__r_.__value_.__l.__size_;
      sub_1C484371C((uint64_t)__p, v23 + 8);
      if (v29 >= 0)
        v24 = __p;
      else
        v24 = (void **)__p[0];
      if (v23)
      {
        if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v25 = &v27;
        else
          v25 = (std::string *)v27.__r_.__value_.__r.__words[0];
        memmove(v24, v25, v23);
      }
      strcpy((char *)v24 + v23, ".renamed");
      v31 = 260;
      v30 = __p;
      llvm::Value::setName((uint64_t ***)Declaration, (uint64_t)&v30);
      if (v29 < 0)
        operator delete(__p[0]);
    }
    Declaration = llvm::Intrinsic::getDeclaration(*((uint64_t **)this + 5), v6, (uint64_t *)v32, v33);
    goto LABEL_35;
  }
  if (Declaration)
  {
    if (memcmp(v17, v19, Declaration))
      goto LABEL_18;
    Declaration = 0;
  }
  if (v20 < 0)
LABEL_36:
    operator delete(v27.__r_.__value_.__l.__data_);
LABEL_37:
  if (v32 != v34)
    free(v32);
  return Declaration;
}

uint64_t llvm::Function::hasAddressTaken(llvm::Function *this, const llvm::User **a2, int a3, int a4, int a5, int a6)
{
  const llvm::Use *v6;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t ***v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t ****v33;
  uint64_t ***v34;
  int v35;
  int v36;
  uint64_t ***v37;
  uint64_t **v38;
  uint64_t **v39;
  int v40;
  BOOL v41;
  uint64_t v43;
  uint64_t ****v44;
  uint64_t ***v45;
  int v46;
  int v47;
  uint64_t ***v48;
  uint64_t **v49;
  int v50;
  uint64_t v54;
  uint64_t *v55;
  int v56;
  uint64_t v57;

  v6 = (const llvm::Use *)*((_QWORD *)this + 1);
  if (!v6)
    return 0;
  while (1)
  {
    v12 = *((_QWORD *)v6 + 3);
    v13 = *(unsigned __int8 *)(v12 + 16);
    if (v13 == 4)
      goto LABEL_48;
    if (a3)
    {
      llvm::AbstractCallSite::AbstractCallSite((llvm::AbstractCallSite *)&v54, v6);
      if (v54)
        v14 = v56 == 0;
      else
        v14 = 1;
      v15 = v14;
      if (v55 != &v57)
        free(v55);
      if (!v15)
        goto LABEL_48;
      v13 = *(unsigned __int8 *)(v12 + 16);
    }
    if (v13 < 0x1C)
      goto LABEL_38;
    if (v13 - 33 > 0x33 || ((1 << (v13 - 33)) & 0x8000000000041) == 0)
      break;
    if ((const llvm::Use *)(v12 - 32) != v6 || *(_QWORD *)(v12 + 72) != *((_QWORD *)this + 3))
    {
      if (!a6)
        goto LABEL_86;
      v17 = *((_QWORD *)v6 + 3);
      v18 = *(_DWORD *)(v17 + 20);
      v19 = (v18 & 0x40000000) != 0 ? *(_QWORD *)(v17 - 8) : v17 - 32 * (v18 & 0x7FFFFFF);
      v20 = ((unint64_t)v6 - v19) >> 5;
      if (!sub_1C62395D4((llvm::User *)v12, v20)
        || *(_DWORD *)(*(_QWORD *)llvm::CallBase::getBundleOpInfoForOperand((char *)v12, v20) + 8) != 6)
      {
        goto LABEL_86;
      }
    }
LABEL_48:
    v6 = (const llvm::Use *)*((_QWORD *)v6 + 1);
    if (!v6)
      return 0;
  }
  if (a4)
  {
    if (v13 - 66 <= 0xC)
    {
      v21 = *(_QWORD *)(v12 + 8);
      if (v21)
      {
        while (1)
        {
          v22 = *(_QWORD *)(v21 + 24);
          if (*(_BYTE *)(v22 + 16) != 84)
            break;
          v23 = *(_QWORD *)(v22 - 32);
          if (!v23
            || *(_BYTE *)(v23 + 16)
            || *(_QWORD *)(v23 + 24) != *(_QWORD *)(v22 + 72)
            || (*(_BYTE *)(v23 + 33) & 0x20) == 0
            || !sub_1C4E36790(v22))
          {
            break;
          }
          v21 = *(_QWORD *)(v21 + 8);
          if (!v21)
            goto LABEL_48;
        }
      }
    }
  }
LABEL_38:
  if (a5)
  {
    v24 = *(_QWORD *)(v12 + 8);
    if (v24)
    {
      v25 = *(unsigned __int8 *)(v12 + 16);
      if ((v25 == 77 || v25 == 5 && *(_WORD *)(v12 + 18) == 49) && !*(_QWORD *)(v24 + 8))
      {
        v24 = *(_QWORD *)(v24 + 24);
        if (!*(_QWORD *)(v24 + 8))
          v24 = v12;
        goto LABEL_84;
      }
      while (1)
      {
        v26 = *(uint64_t ****)(v24 + 24);
        if (v26)
          v27 = *((_BYTE *)v26 + 16) == 3;
        else
          v27 = 0;
        if (!v27 || (*((_BYTE *)v26 + 23) & 0x10) == 0)
          goto LABEL_86;
        v28 = ***v26;
        v29 = *(_QWORD *)(v28 + 152);
        v30 = *(unsigned int *)(v28 + 168);
        v31 = v26 >> 4;
        if (!(_DWORD)v30)
          goto LABEL_62;
        LODWORD(v32) = (v30 - 1) & (v31 ^ (v26 >> 9));
        v33 = (uint64_t ****)(v29 + 16 * v32);
        v34 = *v33;
        if (*v33 != v26)
          break;
LABEL_63:
        v37 = v33[1];
        if (*v37 == (uint64_t **)18)
        {
          v38 = v37[2];
          v39 = v37[3];
          v40 = *((unsigned __int16 *)v37 + 16);
          v41 = v38 == (uint64_t **)0x6D6F632E6D766C6CLL && v39 == (uint64_t **)0x73752E72656C6970;
          if (v41 && v40 == 25701)
            goto LABEL_84;
        }
        if (!(_DWORD)v30)
          goto LABEL_77;
        LODWORD(v43) = (v30 - 1) & (v31 ^ (v26 >> 9));
        v44 = (uint64_t ****)(v29 + 16 * v43);
        v45 = *v44;
        if (*v44 != v26)
        {
          v46 = 1;
          while (v45 != (uint64_t ***)-4096)
          {
            v47 = v43 + v46++;
            v43 = v47 & (v30 - 1);
            v45 = *(uint64_t ****)(v29 + 16 * v43);
            if (v45 == v26)
            {
              v44 = (uint64_t ****)(v29 + 16 * v43);
              goto LABEL_78;
            }
          }
LABEL_77:
          v44 = (uint64_t ****)(v29 + 16 * v30);
        }
LABEL_78:
        v48 = v44[1];
        if (*v48 != (uint64_t **)9)
          goto LABEL_86;
        v49 = v48[2];
        v50 = *((unsigned __int8 *)v48 + 24);
        if (v49 != (uint64_t **)0x6573752E6D766C6CLL || v50 != 100)
          goto LABEL_86;
LABEL_84:
        v24 = *(_QWORD *)(v24 + 8);
        if (!v24)
          goto LABEL_48;
      }
      v35 = 1;
      while (v34 != (uint64_t ***)-4096)
      {
        v36 = v32 + v35++;
        v32 = v36 & (v30 - 1);
        v34 = *(uint64_t ****)(v29 + 16 * v32);
        if (v34 == v26)
        {
          v33 = (uint64_t ****)(v29 + 16 * v32);
          goto LABEL_63;
        }
      }
LABEL_62:
      v33 = (uint64_t ****)(v29 + 16 * v30);
      goto LABEL_63;
    }
  }
LABEL_86:
  if (a2)
    *a2 = (const llvm::User *)v12;
  return 1;
}

BOOL llvm::Function::isDefTriviallyDead(llvm::Function *this)
{
  int v1;
  unsigned int v2;
  BOOL v3;
  int v4;
  _BOOL8 result;
  uint64_t v7;
  int v8;

  v1 = *((_DWORD *)this + 8);
  if ((v1 & 0xE) != 2)
  {
    v2 = v1 & 0xF;
    v3 = v2 > 8;
    v4 = (1 << v2) & 0x182;
    if (v3 || v4 == 0)
      return 0;
  }
  v7 = *((_QWORD *)this + 1);
  if (!v7)
    return 1;
  do
  {
    v8 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 24) + 16);
    result = v8 == 4;
    if (v8 != 4)
      break;
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7);
  return result;
}

uint64_t llvm::Function::callsFunctionThatReturnsTwice(llvm::Function *this)
{
  char *v1;
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = (char *)this + 72;
  for (i = *((_QWORD *)this + 10); (char *)i != v1; i = *(_QWORD *)(i + 8))
  {
    v3 = i - 24;
    if (!i)
      v3 = 0;
    v4 = *(_QWORD *)(v3 + 48);
    if (v4 != v3 + 40)
    {
      while (1)
      {
        if (v4)
          v5 = v4 - 24;
        else
          v5 = 0;
        v6 = *(unsigned __int8 *)(v5 + 16) - 33;
        v7 = v6 > 0x33;
        v8 = (1 << v6) & 0x8000000000041;
        if (!v7 && v8 != 0)
        {
          v10 = *(_QWORD *)(v4 + 40);
          if (v10)
          {
            if (*(char *)(v10 + 17) < 0)
              return 1;
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v4 - 24, 47) & 1) != 0)
            return 1;
        }
        v4 = *(_QWORD *)(v4 + 8);
        v11 = i - 24;
        if (!i)
          v11 = 0;
        if (v4 == v11 + 40)
          break;
LABEL_24:
        if ((char *)i == v1)
          return 0;
      }
      while (1)
      {
        i = *(_QWORD *)(i + 8);
        if ((char *)i == v1)
          return 0;
        v12 = i - 24;
        if (!i)
          v12 = 0;
        v4 = *(_QWORD *)(v12 + 48);
        if (v4 != v12 + 40)
          goto LABEL_24;
      }
    }
  }
  return 0;
}

_QWORD *sub_1C53D1F60(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  int v4;
  _QWORD *v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  llvm::ConstantPointerNull *v12;
  llvm::PointerType *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = result;
  if (a2)
  {
    result = llvm::Function::allocHungoffUselist(result);
    v4 = *((_DWORD *)v2 + 5);
    if ((v4 & 0x40000000) != 0)
      v5 = (_QWORD *)*(v2 - 1);
    else
      v5 = &v2[-4 * (v4 & 0x7FFFFFF)];
    if (*v5)
    {
      *(_QWORD *)v5[2] = v5[1];
      v8 = v5[1];
      if (v8)
        *(_QWORD *)(v8 + 16) = v5[2];
    }
    *v5 = a2;
    v11 = *(_QWORD *)(a2 + 8);
    v10 = (_QWORD *)(a2 + 8);
    v9 = v11;
    v5[1] = v11;
    if (v11)
      *(_QWORD *)(v9 + 16) = v5 + 1;
    v5[2] = v10;
    *v10 = v5;
  }
  else
  {
    v6 = *((_DWORD *)result + 5);
    if ((v6 & 0x7FFFFFF) != 0)
    {
      if ((v6 & 0x40000000) != 0)
        v7 = (_QWORD *)*(result - 1);
      else
        v7 = &result[-4 * (v6 & 0x7FFFFFF)];
      v12 = (llvm::ConstantPointerNull *)llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)*result + 1888), 0);
      result = llvm::ConstantPointerNull::get(v12, v13);
      if (*v7)
      {
        *(_QWORD *)v7[2] = v7[1];
        v14 = v7[1];
        if (v14)
          *(_QWORD *)(v14 + 16) = v7[2];
      }
      *v7 = result;
      if (result)
      {
        v16 = result[1];
        ++result;
        v15 = v16;
        v7[1] = v16;
        if (v16)
          *(_QWORD *)(v15 + 16) = v7 + 1;
        v7[2] = result;
        *result = v7;
      }
    }
  }
  return result;
}

_QWORD *sub_1C53D2064(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  int v4;
  _QWORD *v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  llvm::ConstantPointerNull *v12;
  llvm::PointerType *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = result;
  if (a2)
  {
    result = llvm::Function::allocHungoffUselist(result);
    v4 = *((_DWORD *)v2 + 5);
    if ((v4 & 0x40000000) != 0)
      v5 = (_QWORD *)*(v2 - 1);
    else
      v5 = &v2[-4 * (v4 & 0x7FFFFFF)];
    if (v5[4])
    {
      *(_QWORD *)v5[6] = v5[5];
      v8 = v5[5];
      if (v8)
        *(_QWORD *)(v8 + 16) = v5[6];
    }
    v5[4] = a2;
    v11 = *(_QWORD *)(a2 + 8);
    v10 = (_QWORD *)(a2 + 8);
    v9 = v11;
    v5[5] = v11;
    if (v11)
      *(_QWORD *)(v9 + 16) = v5 + 5;
    v5[6] = v10;
    *v10 = v5 + 4;
  }
  else
  {
    v6 = *((_DWORD *)result + 5);
    if ((v6 & 0x7FFFFFF) != 0)
    {
      if ((v6 & 0x40000000) != 0)
        v7 = (_QWORD *)*(result - 1);
      else
        v7 = &result[-4 * (v6 & 0x7FFFFFF)];
      v12 = (llvm::ConstantPointerNull *)llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)*result + 1888), 0);
      result = llvm::ConstantPointerNull::get(v12, v13);
      v14 = v7 + 4;
      if (v7[4])
      {
        *(_QWORD *)v7[6] = v7[5];
        v15 = v7[5];
        if (v15)
          *(_QWORD *)(v15 + 16) = v7[6];
      }
      *v14 = result;
      if (result)
      {
        v17 = result[1];
        ++result;
        v16 = v17;
        v7[5] = v17;
        if (v17)
          *(_QWORD *)(v16 + 16) = v7 + 5;
        v7[6] = result;
        *result = v14;
      }
    }
  }
  return result;
}

_QWORD *sub_1C53D2170(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  int v4;
  _QWORD *v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  llvm::ConstantPointerNull *v12;
  llvm::PointerType *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = result;
  if (a2)
  {
    result = llvm::Function::allocHungoffUselist(result);
    v4 = *((_DWORD *)v2 + 5);
    if ((v4 & 0x40000000) != 0)
      v5 = (_QWORD *)*(v2 - 1);
    else
      v5 = &v2[-4 * (v4 & 0x7FFFFFF)];
    if (v5[8])
    {
      *(_QWORD *)v5[10] = v5[9];
      v8 = v5[9];
      if (v8)
        *(_QWORD *)(v8 + 16) = v5[10];
    }
    v5[8] = a2;
    v11 = *(_QWORD *)(a2 + 8);
    v10 = (_QWORD *)(a2 + 8);
    v9 = v11;
    v5[9] = v11;
    if (v11)
      *(_QWORD *)(v9 + 16) = v5 + 9;
    v5[10] = v10;
    *v10 = v5 + 8;
  }
  else
  {
    v6 = *((_DWORD *)result + 5);
    if ((v6 & 0x7FFFFFF) != 0)
    {
      if ((v6 & 0x40000000) != 0)
        v7 = (_QWORD *)*(result - 1);
      else
        v7 = &result[-4 * (v6 & 0x7FFFFFF)];
      v12 = (llvm::ConstantPointerNull *)llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)*result + 1888), 0);
      result = llvm::ConstantPointerNull::get(v12, v13);
      v14 = v7 + 8;
      if (v7[8])
      {
        *(_QWORD *)v7[10] = v7[9];
        v15 = v7[9];
        if (v15)
          *(_QWORD *)(v15 + 16) = v7[10];
      }
      *v14 = result;
      if (result)
      {
        v17 = result[1];
        ++result;
        v16 = v17;
        v7[9] = v17;
        if (v17)
          *(_QWORD *)(v16 + 16) = v7 + 9;
        v7[10] = result;
        *result = v14;
      }
    }
  }
  return result;
}

_QWORD *llvm::Function::allocHungoffUselist(_QWORD *this)
{
  _DWORD *v1;
  char *v2;
  uint64_t v3;
  char *v4;
  llvm::ConstantPointerNull *v5;
  llvm::PointerType *v6;
  int v7;
  _DWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  _DWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  _DWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if ((*((_DWORD *)this + 5) & 0x7FFFFFF) == 0)
  {
    v1 = this;
    v2 = (char *)operator new(0x60uLL);
    v3 = 0;
    *((_QWORD *)v1 - 1) = v2;
    do
    {
      v4 = &v2[v3];
      *(_QWORD *)v4 = 0;
      *((_QWORD *)v4 + 1) = 0;
      *((_QWORD *)v4 + 2) = 0;
      *((_QWORD *)v4 + 3) = v1;
      v3 += 32;
    }
    while (v3 != 96);
    v1[5] = v1[5] & 0xF8000000 | 3;
    v5 = (llvm::ConstantPointerNull *)llvm::PointerType::get((llvm::PointerType *)(***(_QWORD ***)v1 + 1888), 0);
    this = llvm::ConstantPointerNull::get(v5, v6);
    v7 = v1[5];
    if ((v7 & 0x40000000) != 0)
      v8 = (_DWORD *)*((_QWORD *)v1 - 1);
    else
      v8 = &v1[-8 * (v7 & 0x7FFFFFF)];
    if (*(_QWORD *)v8)
    {
      **((_QWORD **)v8 + 2) = *((_QWORD *)v8 + 1);
      v21 = *((_QWORD *)v8 + 1);
      if (v21)
        *(_QWORD *)(v21 + 16) = *((_QWORD *)v8 + 2);
    }
    *(_QWORD *)v8 = this;
    if (this)
    {
      v9 = this + 1;
      v10 = this[1];
      *((_QWORD *)v8 + 1) = v10;
      if (v10)
        *(_QWORD *)(v10 + 16) = v8 + 2;
      *((_QWORD *)v8 + 2) = v9;
      *v9 = v8;
    }
    v11 = v1[5];
    if ((v11 & 0x40000000) != 0)
      v12 = (_DWORD *)*((_QWORD *)v1 - 1);
    else
      v12 = &v1[-8 * (v11 & 0x7FFFFFF)];
    v13 = v12 + 8;
    if (*((_QWORD *)v12 + 4))
    {
      **((_QWORD **)v12 + 6) = *((_QWORD *)v12 + 5);
      v22 = *((_QWORD *)v12 + 5);
      if (v22)
        *(_QWORD *)(v22 + 16) = *((_QWORD *)v12 + 6);
    }
    *v13 = this;
    if (this)
    {
      v14 = this + 1;
      v15 = this[1];
      *((_QWORD *)v12 + 5) = v15;
      if (v15)
        *(_QWORD *)(v15 + 16) = v12 + 10;
      *((_QWORD *)v12 + 6) = v14;
      *v14 = v13;
    }
    v16 = v1[5];
    if ((v16 & 0x40000000) != 0)
      v17 = (_DWORD *)*((_QWORD *)v1 - 1);
    else
      v17 = &v1[-8 * (v16 & 0x7FFFFFF)];
    v18 = v17 + 16;
    if (*((_QWORD *)v17 + 8))
    {
      **((_QWORD **)v17 + 10) = *((_QWORD *)v17 + 9);
      v23 = *((_QWORD *)v17 + 9);
      if (v23)
        *(_QWORD *)(v23 + 16) = *((_QWORD *)v17 + 10);
    }
    *v18 = this;
    if (this)
    {
      v20 = this[1];
      ++this;
      v19 = v20;
      *((_QWORD *)v17 + 9) = v20;
      if (v20)
        *(_QWORD *)(v19 + 16) = v17 + 18;
      *((_QWORD *)v17 + 10) = this;
      *this = v18;
    }
  }
  return this;
}

uint64_t ***llvm::Function::getImportGUIDs@<X0>(uint64_t ***this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t ***v8;
  uint64_t ***v9;
  uint64_t ***v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  BOOL v25;
  _BOOL4 v26;
  unint64_t i;
  uint64_t v28;
  _QWORD *v29;
  uint64_t ***v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33[3];

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  if ((*((_BYTE *)this + 23) & 0x20) == 0)
    return this;
  v3 = ***this;
  v33[0] = (uint64_t)this;
  v4 = *(_DWORD *)(v3 + 2496);
  if (v4)
  {
    v5 = *(_QWORD *)(v3 + 2480);
    v6 = v4 - 1;
    v7 = (v4 - 1) & ((this >> 4) ^ (this >> 9));
    v8 = (uint64_t ***)(v5 + 40 * v7);
    v9 = (uint64_t ***)*v8;
    if (*v8 == (uint64_t **)this)
      goto LABEL_12;
    v10 = 0;
    v11 = 1;
    while (v9 != (uint64_t ***)-4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v9 == (uint64_t ***)-8192;
      if (v12)
        v10 = v8;
      v13 = v7 + v11++;
      v7 = v13 & v6;
      v8 = (uint64_t ***)(v5 + 40 * (v13 & v6));
      v9 = (uint64_t ***)*v8;
      if (*v8 == (uint64_t **)this)
        goto LABEL_12;
    }
    if (v10)
      v30 = v10;
    else
      v30 = v8;
  }
  else
  {
    v30 = 0;
  }
  this = (uint64_t ***)sub_1C541AB24(v3 + 2480, (uint64_t)v33, v33, v30);
  v8 = this;
  v31 = v33[0];
  this[3] = 0;
  this[4] = 0;
  *this = (uint64_t **)v31;
  this[1] = (uint64_t **)(this + 3);
  this[2] = (uint64_t **)0x100000000;
LABEL_12:
  v14 = *((unsigned int *)v8 + 4);
  if ((_DWORD)v14)
  {
    v15 = v8[1] + 1;
    v16 = 16 * v14;
    while (*((_DWORD *)v15 - 2) != 2)
    {
      v15 += 2;
      v16 -= 16;
      if (!v16)
        return this;
    }
    v17 = *v15;
    if (*v15)
    {
      v18 = *(unsigned int *)(v17 + 8);
      v19 = *(_QWORD *)(v17 - 8 * v18);
      if (!*(_BYTE *)v19)
      {
        v20 = *(_QWORD *)(v19 + 8);
        if (*(_QWORD *)v20 == 20)
        {
          v21 = *(_QWORD *)(v20 + 24);
          v22 = *(_QWORD *)(v20 + 32);
          v23 = *(_DWORD *)(v20 + 40);
          v24 = v21 == 0x6E6F6974636E7566 && v22 == 0x635F7972746E655FLL;
          v25 = v24 && v23 == 1953396079;
          v26 = !v25;
          if (v18 >= 3 && !v26)
          {
            for (i = 2; i < v18; ++i)
            {
              v28 = *(_QWORD *)(*(_QWORD *)(v17 - 8 * v18 + 8 * i) + 128);
              v29 = (_QWORD *)(v28 + 24);
              if (*(_DWORD *)(v28 + 32) >= 0x41u)
                v29 = (_QWORD *)*v29;
              v32 = (_QWORD *)*v29;
              this = (uint64_t ***)sub_1C61A7854(a2, (uint64_t *)&v32, (uint64_t)v33);
              v18 = *(unsigned int *)(v17 + 8);
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t ***llvm::Function::getEntryCount@<X0>(uint64_t ***this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t ***v10;
  uint64_t ***v11;
  uint64_t ***v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t ***v32;
  uint64_t **v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  BOOL v40;
  BOOL v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t ***v44;

  if ((*((_BYTE *)this + 23) & 0x20) == 0)
    goto LABEL_16;
  v5 = ***this;
  v44 = this;
  v6 = *(_DWORD *)(v5 + 2496);
  if (v6)
  {
    v7 = *(_QWORD *)(v5 + 2480);
    v8 = v6 - 1;
    v9 = (v6 - 1) & ((this >> 4) ^ (this >> 9));
    v10 = (uint64_t ***)(v7 + 40 * v9);
    v11 = (uint64_t ***)*v10;
    if (*v10 == (uint64_t **)this)
      goto LABEL_12;
    v12 = 0;
    v13 = 1;
    while (v11 != (uint64_t ***)-4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == (uint64_t ***)-8192;
      if (v14)
        v12 = v10;
      v15 = v9 + v13++;
      v9 = v15 & v8;
      v10 = (uint64_t ***)(v7 + 40 * (v15 & v8));
      v11 = (uint64_t ***)*v10;
      if (*v10 == (uint64_t **)this)
        goto LABEL_12;
    }
    if (v12)
      v32 = v12;
    else
      v32 = v10;
  }
  else
  {
    v32 = 0;
  }
  this = (uint64_t ***)sub_1C541AB24(v5 + 2480, (uint64_t)&v44, (uint64_t *)&v44, v32);
  v10 = this;
  v33 = (uint64_t **)v44;
  this[3] = 0;
  this[4] = 0;
  *this = v33;
  this[1] = (uint64_t **)(this + 3);
  this[2] = (uint64_t **)0x100000000;
LABEL_12:
  v16 = *((unsigned int *)v10 + 4);
  if (!(_DWORD)v16)
    goto LABEL_16;
  v17 = v10[1] + 1;
  v18 = 16 * v16;
  while (*((_DWORD *)v17 - 2) != 2)
  {
    v17 += 2;
    v18 -= 16;
    if (!v18)
      goto LABEL_16;
  }
  v20 = *v17;
  if (!v20)
    goto LABEL_16;
  v21 = (uint64_t *)(v20 - 8 * *(unsigned int *)(v20 + 8));
  v22 = *v21;
  if (!*v21 || *(_BYTE *)v22)
    goto LABEL_16;
  v23 = *(_QWORD *)(v22 + 8);
  if (*(_QWORD *)v23 == 20)
  {
    v24 = *(_QWORD *)(v23 + 24);
    v25 = *(_QWORD *)(v23 + 32);
    v26 = *(_DWORD *)(v23 + 40);
    if (v24 == 0x6E6F6974636E7566 && v25 == 0x635F7972746E655FLL && v26 == 1953396079)
    {
      v29 = *(_QWORD *)(v21[1] + 128);
      v30 = (_QWORD *)(v29 + 24);
      if (*(_DWORD *)(v29 + 32) >= 0x41u)
        v30 = (_QWORD *)*v30;
      v31 = (_QWORD *)*v30;
      if (v31 != (_QWORD *)-1)
      {
        *(_QWORD *)a3 = v31;
        *(_DWORD *)(a3 + 8) = 0;
        v19 = 1;
        goto LABEL_17;
      }
    }
    goto LABEL_16;
  }
  v34 = *(_QWORD *)v23 != 30 || a2 == 0;
  if (v34
    || ((v35 = *(_QWORD *)(v23 + 24),
         v36 = *(_QWORD *)(v23 + 32),
         v37 = *(_QWORD *)(v23 + 40),
         v38 = *(_QWORD *)(v23 + 46),
         v35 == 0x69746568746E7973)
      ? (v39 = v36 == 0x6974636E75665F63)
      : (v39 = 0),
        v39 ? (v40 = v37 == 0x7972746E655F6E6FLL) : (v40 = 0),
        v40 ? (v41 = v38 == 0x746E756F635F7972) : (v41 = 0),
        !v41))
  {
LABEL_16:
    v19 = 0;
    *(_BYTE *)a3 = 0;
    goto LABEL_17;
  }
  v42 = *(_QWORD *)(v21[1] + 128);
  v43 = (_QWORD *)(v42 + 24);
  if (*(_DWORD *)(v42 + 32) >= 0x41u)
    v43 = (_QWORD *)*v43;
  *(_QWORD *)a3 = *v43;
  v19 = 1;
  *(_DWORD *)(a3 + 8) = 1;
LABEL_17:
  *(_BYTE *)(a3 + 16) = v19;
  return this;
}

uint64_t ***llvm::Function::getSectionPrefix@<X0>(uint64_t ***this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t ***v8;
  uint64_t **v9;
  uint64_t ***v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t ***v21;
  uint64_t **v22;
  uint64_t ***v23;

  if ((*((_BYTE *)this + 23) & 0x20) == 0)
    goto LABEL_16;
  v3 = ***this;
  v23 = this;
  v4 = *(_DWORD *)(v3 + 2496);
  if (!v4)
  {
    v21 = 0;
LABEL_23:
    this = (uint64_t ***)sub_1C541AB24(v3 + 2480, (uint64_t)&v23, (uint64_t *)&v23, v21);
    v8 = this;
    v22 = (uint64_t **)v23;
    this[3] = 0;
    this[4] = 0;
    *this = v22;
    this[1] = (uint64_t **)(this + 3);
    this[2] = (uint64_t **)0x100000000;
    goto LABEL_12;
  }
  v5 = *(_QWORD *)(v3 + 2480);
  v6 = v4 - 1;
  v7 = (v4 - 1) & ((this >> 4) ^ (this >> 9));
  v8 = (uint64_t ***)(v5 + 40 * v7);
  v9 = *v8;
  if (*v8 != (uint64_t **)this)
  {
    v10 = 0;
    v11 = 1;
    while (v9 != (uint64_t **)-4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v9 == (uint64_t **)-8192;
      if (v12)
        v10 = v8;
      v13 = v7 + v11++;
      v7 = v13 & v6;
      v8 = (uint64_t ***)(v5 + 40 * (v13 & v6));
      v9 = *v8;
      if (*v8 == (uint64_t **)this)
        goto LABEL_12;
    }
    if (v10)
      v21 = v10;
    else
      v21 = v8;
    goto LABEL_23;
  }
LABEL_12:
  v14 = *((unsigned int *)v8 + 4);
  if ((_DWORD)v14)
  {
    v15 = v8[1] + 1;
    v16 = 16 * v14;
    while (*((_DWORD *)v15 - 2) != 20)
    {
      v15 += 2;
      v16 -= 16;
      if (!v16)
        goto LABEL_16;
    }
    v18 = *v15;
    if (v18)
    {
      v19 = *(uint64_t **)(*(_QWORD *)(v18 - 8 * *(unsigned int *)(v18 + 8) + 8) + 8);
      v20 = *v19;
      *(_QWORD *)a2 = v19 + 3;
      *(_QWORD *)(a2 + 8) = v20;
      v17 = 1;
      goto LABEL_17;
    }
  }
LABEL_16:
  v17 = 0;
  *(_BYTE *)a2 = 0;
LABEL_17:
  *(_BYTE *)(a2 + 16) = v17;
  return this;
}

uint64_t llvm::Function::nullPointerIsDefined(llvm::Function *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 14);
  if (v1)
    return *(_BYTE *)(v1 + 17) & 1;
  else
    return 0;
}

uint64_t sub_1C53D2A00(uint64_t a1, _QWORD *a2)
{
  llvm::LLVMContext *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::BasicBlock **v9;
  llvm::BasicBlock *v10;
  int v11;
  int v12;
  uint64_t v13;
  size_t *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  size_t v17;
  int v18;
  size_t v19;
  unsigned __int8 *v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  llvm::BasicBlock *v35;
  uint64_t *v36;

  v34 = a2[1];
  v35 = (llvm::BasicBlock *)(a2 - 3);
  if (!a2)
  {
    llvm::BasicBlock::setParent(0, 0);
    v32 = MEMORY[0x18];
    v33 = MEMORY[0x20];
    *MEMORY[0x20] = MEMORY[0x18];
    *(_QWORD *)(v32 + 8) = v33;
    MEMORY[0x20] = 0;
    MEMORY[0x18] = 0;
    return v34;
  }
  llvm::BasicBlock::setParent((llvm::BasicBlock *)(a2 - 3), 0);
  if ((*((_BYTE *)a2 - 1) & 0x10) != 0)
  {
    v36 = *(uint64_t **)(a1 + 32);
    if (v36)
    {
      v5 = ***(_QWORD ***)v35;
      v6 = *(_QWORD *)(v5 + 152);
      v7 = *(unsigned int *)(v5 + 168);
      if ((_DWORD)v7)
      {
        LODWORD(v8) = (v7 - 1) & ((v35 >> 4) ^ (v35 >> 9));
        v9 = (llvm::BasicBlock **)(v6 + 16 * v8);
        v10 = *v9;
        if (*v9 == v35)
          goto LABEL_10;
        v11 = 1;
        while (v10 != (llvm::BasicBlock *)-4096)
        {
          v12 = v8 + v11++;
          v8 = v12 & (v7 - 1);
          v10 = *(llvm::BasicBlock **)(v6 + 16 * v8);
          if (v10 == v35)
          {
            v9 = (llvm::BasicBlock **)(v6 + 16 * v8);
            goto LABEL_10;
          }
        }
      }
      v9 = (llvm::BasicBlock **)(v6 + 16 * v7);
LABEL_10:
      v13 = *((unsigned int *)v36 + 2);
      if ((_DWORD)v13)
      {
        v14 = (size_t *)v9[1];
        v15 = *((unsigned int *)v36 + 5);
        v16 = (unsigned __int8 *)v14 + v15;
        v17 = *v14;
        if (*v14)
        {
          v18 = 0;
          v19 = *v14;
          v20 = v16;
          do
          {
            v21 = *v20++;
            v18 = 33 * v18 + v21;
            --v19;
          }
          while (v19);
        }
        else
        {
          v18 = 0;
        }
        v22 = v13 - 1;
        v23 = *v36;
        v24 = *v36 + 8 * v13 + 8;
        v25 = 1;
        v26 = v18;
        while (1)
        {
          v27 = v26 & v22;
          v28 = *(_QWORD **)(v23 + 8 * v27);
          if (v28 != (_QWORD *)-8)
          {
            if (!v28)
              goto LABEL_24;
            if (*(_DWORD *)(v24 + 4 * v27) == v18 && v17 == *v28 && (!v17 || !memcmp(v16, (char *)v28 + v15, v17)))
              break;
          }
          v26 = v25 + v27;
          ++v25;
        }
        *(_QWORD *)(v23 + 8 * (int)v27) = -8;
        *(uint64_t *)((char *)v36 + 12) = (uint64_t)vadd_s32(*(int32x2_t *)((char *)v36 + 12), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
  }
LABEL_24:
  v29 = *a2;
  v30 = (_QWORD *)a2[1];
  *v30 = *a2;
  *(_QWORD *)(v29 + 8) = v30;
  *a2 = 0;
  a2[1] = 0;
  llvm::BasicBlock::~BasicBlock(v35, v4);
  MEMORY[0x1CAA32FC0]();
  return v34;
}

void sub_1C53D2C1C(std::string *a1@<X6>, uint64_t a2@<X0>, _BYTE *a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X3>, uint64_t a6@<X4>, uint64_t a7@<X5>, uint64_t a8@<X7>, std::string *a9@<X8>, void *a10, uint64_t a11, uint64_t a12)
{
  unint64_t v15;
  int v16;
  char *v17;
  unint64_t v18;
  char *v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type size;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::string *v31;
  uint64_t v32;
  std::string *v33;
  std::string::size_type v34;
  void *v35;
  std::string *v36;
  std::string::size_type v37;
  std::string *v38;
  std::string::size_type v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::string *v44;
  uint64_t v45;
  unint64_t v46;
  std::string *v47;
  std::string::size_type v48;
  const std::string::value_type *v49;
  const std::string::value_type *v50;
  std::string *v51;
  std::string::size_type v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::string *v57;
  uint64_t v58;
  const std::string::value_type *p_p;
  std::string::size_type v60;
  std::string *v61;
  std::string::size_type v62;
  std::string *v63;
  std::string::size_type v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  std::string *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  std::string *v76;
  std::string::size_type v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  std::string *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  std::string *v87;
  std::string::size_type v88;
  std::string *v89;
  std::string::size_type v90;
  unint64_t v91;
  unsigned int *v92;
  unsigned int *v93;
  unint64_t v94;
  char *v95;
  std::string *v96;
  std::string::size_type v97;
  std::string *v98;
  std::string::size_type v99;
  void *__p;
  std::string::size_type v101;
  uint64_t v102;
  std::string v103;
  std::string v104;
  std::string v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  a9->__r_.__value_.__r.__words[0] = 0;
  a9->__r_.__value_.__l.__size_ = 0;
  a9->__r_.__value_.__r.__words[2] = 0;
  v15 = *(unsigned int *)(a2 + 8);
  v16 = *(_DWORD *)(a2 + 8);
  if (a2 && v16 == 15)
  {
    if (v15 >= 0x100)
    {
      v22 = v15 >> 8;
      v17 = &v105.__r_.__value_.__s.__data_[21];
      do
      {
        *--v17 = (v22 % 0xA) | 0x30;
        v20 = v22 > 9;
        v22 /= 0xAuLL;
      }
      while (v20);
    }
    else
    {
      v17 = &v105.__r_.__value_.__s.__data_[20];
      v105.__r_.__value_.__s.__data_[20] = 48;
    }
    sub_1C4E61270(&v104, v17, &v105.__r_.__value_.__s.__data_[21], (char *)&v105.__r_.__value_.__r.__words[2] + 5 - v17);
    v23 = std::string::insert(&v104, 0, "p");
    v24 = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v105.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v105.__r_.__value_.__r.__words[2] = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &v105;
    else
      v25 = (std::string *)v105.__r_.__value_.__r.__words[0];
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v105.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v105.__r_.__value_.__l.__size_;
    std::string::append(a9, (const std::string::value_type *)v25, size);
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v105.__r_.__value_.__l.__data_);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    if (*(_QWORD *)(a2 + 24))
    {
      sub_1C53D2C1C((uint64_t *)&v105, **(_QWORD **)(a2 + 16), (uint64_t)a3, v27, v28, v29, v30, v31, v32, __p, v101, v102);
      v33 = (v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v105
          : (std::string *)v105.__r_.__value_.__r.__words[0];
      v34 = (v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? *((_BYTE *)&v105.__r_.__value_.__s + 23) & 0x7F
          : v105.__r_.__value_.__l.__size_;
      std::string::append(a9, (const std::string::value_type *)v33, v34);
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      {
        v35 = (void *)v105.__r_.__value_.__r.__words[0];
LABEL_85:
        operator delete(v35);
        return;
      }
    }
    return;
  }
  if (a2 && v16 == 17)
  {
    v18 = *(_QWORD *)(a2 + 32);
    if (v18)
    {
      v19 = &v105.__r_.__value_.__s.__data_[21];
      do
      {
        *--v19 = (v18 % 0xA) | 0x30;
        v20 = v18 > 9;
        v18 /= 0xAuLL;
      }
      while (v20);
    }
    else
    {
      v19 = &v105.__r_.__value_.__s.__data_[20];
      v105.__r_.__value_.__s.__data_[20] = 48;
    }
    sub_1C4E61270(&v103, v19, &v105.__r_.__value_.__s.__data_[21], (char *)&v105.__r_.__value_.__r.__words[2] + 5 - v19);
    v50 = "a";
    goto LABEL_65;
  }
  if (a2 && v16 == 16)
  {
    if ((v15 & 0x400) != 0)
    {
      std::string::append(a9, "sl_");
      v73 = *(unsigned int *)(a2 + 12);
      if ((_DWORD)v73)
      {
        v74 = *(uint64_t **)(a2 + 16);
        v75 = 8 * v73;
        do
        {
          sub_1C53D2C1C((uint64_t *)&v105, *v74, (uint64_t)a3, v67, v68, v69, v70, v71, v72, __p, v101, v102);
          if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v76 = &v105;
          else
            v76 = (std::string *)v105.__r_.__value_.__r.__words[0];
          if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v77 = *((_BYTE *)&v105.__r_.__value_.__s + 23) & 0x7F;
          else
            v77 = v105.__r_.__value_.__l.__size_;
          std::string::append(a9, (const std::string::value_type *)v76, v77);
          if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v105.__r_.__value_.__l.__data_);
          ++v74;
          v75 -= 8;
        }
        while (v75);
      }
    }
    else
    {
      std::string::append(a9, "s_");
      v21 = *(_QWORD *)(a2 + 24);
      if (v21)
        std::string::append(a9, (const std::string::value_type *)(v21 + 16), *(_QWORD *)v21);
      else
        *a3 = 1;
    }
    v49 = "s";
LABEL_141:
    std::string::append(a9, v49);
    return;
  }
  if (a2 && v16 == 14)
  {
    sub_1C53D2C1C((uint64_t *)&v104, **(_QWORD **)(a2 + 16), (uint64_t)a3, a4, a5, a6, a7, a1, a8, __p, v101, v102);
    v36 = std::string::insert(&v104, 0, "f_");
    v37 = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v105.__r_.__value_.__l.__data_ = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v105.__r_.__value_.__r.__words[2] = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v38 = &v105;
    else
      v38 = (std::string *)v105.__r_.__value_.__r.__words[0];
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v39 = *((_BYTE *)&v105.__r_.__value_.__s + 23) & 0x7F;
    else
      v39 = v105.__r_.__value_.__l.__size_;
    std::string::append(a9, (const std::string::value_type *)v38, v39);
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v105.__r_.__value_.__l.__data_);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    if (*(_DWORD *)(a2 + 12) != 1)
    {
      v46 = 0;
      do
      {
        sub_1C53D2C1C((uint64_t *)&v105, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v46 + 8), (uint64_t)a3, v40, v41, v42, v43, v44, v45, __p, v101, v102);
        if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v47 = &v105;
        else
          v47 = (std::string *)v105.__r_.__value_.__r.__words[0];
        if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v48 = *((_BYTE *)&v105.__r_.__value_.__s + 23) & 0x7F;
        else
          v48 = v105.__r_.__value_.__l.__size_;
        std::string::append(a9, (const std::string::value_type *)v47, v48);
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v105.__r_.__value_.__l.__data_);
        ++v46;
      }
      while (v46 < (*(_DWORD *)(a2 + 12) - 1));
    }
    if (*(_DWORD *)(a2 + 8) > 0xFFu)
      std::string::append(a9, "vararg");
    v49 = "f";
    goto LABEL_141;
  }
  if (!a2 || (*(_DWORD *)(a2 + 8) & 0xFE) != 0x12)
  {
    if (!a2 || v16 != 21)
      __asm { BR              X11 }
    std::string::append(a9, "t");
    std::string::append(a9, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
    v84 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v84)
    {
      v85 = *(uint64_t **)(a2 + 16);
      v86 = 8 * v84;
      do
      {
        sub_1C53D2C1C((uint64_t *)&v104, *v85, (uint64_t)a3, v78, v79, v80, v81, v82, v83, __p, v101, v102);
        v87 = std::string::insert(&v104, 0, "_");
        v88 = v87->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v105.__r_.__value_.__l.__data_ = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
        v105.__r_.__value_.__r.__words[2] = v88;
        v87->__r_.__value_.__l.__size_ = 0;
        v87->__r_.__value_.__r.__words[2] = 0;
        v87->__r_.__value_.__r.__words[0] = 0;
        if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v89 = &v105;
        else
          v89 = (std::string *)v105.__r_.__value_.__r.__words[0];
        if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v90 = *((_BYTE *)&v105.__r_.__value_.__s + 23) & 0x7F;
        else
          v90 = v105.__r_.__value_.__l.__size_;
        std::string::append(a9, (const std::string::value_type *)v89, v90);
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v105.__r_.__value_.__l.__data_);
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v104.__r_.__value_.__l.__data_);
        ++v85;
        v86 -= 8;
      }
      while (v86);
    }
    v91 = *(unsigned int *)(a2 + 8);
    if (v91 >= 0x100)
    {
      v92 = *(unsigned int **)(a2 + 40);
      v93 = (unsigned int *)((char *)v92 + ((v91 >> 6) & 0x3FFFFFC));
      do
      {
        v94 = *v92;
        v95 = &v105.__r_.__value_.__s.__data_[21];
        if ((_DWORD)v94)
        {
          do
          {
            *--v95 = (v94 % 0xA) | 0x30;
            v20 = v94 > 9;
            v94 /= 0xAuLL;
          }
          while (v20);
        }
        else
        {
          v105.__r_.__value_.__s.__data_[20] = 48;
          v95 = &v105.__r_.__value_.__s.__data_[20];
        }
        sub_1C4E61270(&v104, v95, &v105.__r_.__value_.__s.__data_[21], (char *)&v105.__r_.__value_.__r.__words[2] + 5 - v95);
        v96 = std::string::insert(&v104, 0, "_");
        v97 = v96->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v105.__r_.__value_.__l.__data_ = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
        v105.__r_.__value_.__r.__words[2] = v97;
        v96->__r_.__value_.__l.__size_ = 0;
        v96->__r_.__value_.__r.__words[2] = 0;
        v96->__r_.__value_.__r.__words[0] = 0;
        if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v98 = &v105;
        else
          v98 = (std::string *)v105.__r_.__value_.__r.__words[0];
        if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v99 = *((_BYTE *)&v105.__r_.__value_.__s + 23) & 0x7F;
        else
          v99 = v105.__r_.__value_.__l.__size_;
        std::string::append(a9, (const std::string::value_type *)v98, v99);
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v105.__r_.__value_.__l.__data_);
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v104.__r_.__value_.__l.__data_);
        ++v92;
      }
      while (v92 != v93);
    }
    v49 = "t";
    goto LABEL_141;
  }
  v65 = *(unsigned int *)(a2 + 32);
  if (v16 == 19)
    std::string::append(a9, "nx");
  if ((_DWORD)v65)
  {
    v66 = &v105.__r_.__value_.__s.__data_[21];
    do
    {
      *--v66 = (v65 % 0xA) | 0x30;
      v20 = v65 > 9;
      v65 /= 0xAuLL;
    }
    while (v20);
  }
  else
  {
    v66 = &v105.__r_.__value_.__s.__data_[20];
    v105.__r_.__value_.__s.__data_[20] = 48;
  }
  sub_1C4E61270(&v103, v66, &v105.__r_.__value_.__s.__data_[21], (char *)&v105.__r_.__value_.__r.__words[2] + 5 - v66);
  v50 = "v";
LABEL_65:
  v51 = std::string::insert(&v103, 0, v50);
  v52 = v51->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v104.__r_.__value_.__l.__data_ = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
  v104.__r_.__value_.__r.__words[2] = v52;
  v51->__r_.__value_.__l.__size_ = 0;
  v51->__r_.__value_.__r.__words[2] = 0;
  v51->__r_.__value_.__r.__words[0] = 0;
  sub_1C53D2C1C((uint64_t *)&__p, *(_QWORD *)(a2 + 24), (uint64_t)a3, v53, v54, v55, v56, v57, v58, __p, v101, v102);
  if (v102 >= 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if (v102 >= 0)
    v60 = HIBYTE(v102) & 0x7F;
  else
    v60 = v101;
  v61 = std::string::append(&v104, p_p, v60);
  v62 = v61->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v105.__r_.__value_.__l.__data_ = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
  v105.__r_.__value_.__r.__words[2] = v62;
  v61->__r_.__value_.__l.__size_ = 0;
  v61->__r_.__value_.__r.__words[2] = 0;
  v61->__r_.__value_.__r.__words[0] = 0;
  if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v63 = &v105;
  else
    v63 = (std::string *)v105.__r_.__value_.__r.__words[0];
  if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v64 = *((_BYTE *)&v105.__r_.__value_.__s + 23) & 0x7F;
  else
    v64 = v105.__r_.__value_.__l.__size_;
  std::string::append(a9, (const std::string::value_type *)v63, v64);
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v105.__r_.__value_.__l.__data_);
  if (SHIBYTE(v102) < 0)
    operator delete(__p);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
  {
    v35 = (void *)v103.__r_.__value_.__r.__words[0];
    goto LABEL_85;
  }
}

double sub_1C53D3628(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  int v4;
  unint64_t v5;
  llvm::Type *v6;
  _DWORD *v8;
  int v9;
  int v10;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)v2;
  if ((*(_DWORD *)(v2 + 8) & 0xFE) == 0x12)
    v2 = **(_QWORD **)(v2 + 16);
  v4 = 2 * llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v2);
  v10 = v4;
  if (v4 <= 63)
  {
    switch(v4)
    {
      case 32:
        v5 = *v3 + 1960;
        goto LABEL_6;
      case 16:
        v5 = *v3 + 1936;
        goto LABEL_6;
      case 8:
        v5 = *v3 + 1912;
        goto LABEL_6;
    }
  }
  else
  {
    if (v4 == 64)
    {
      v5 = *v3 + 1984;
      goto LABEL_6;
    }
    if (v4 == 128)
    {
      v5 = *v3 + 2008;
      goto LABEL_6;
    }
  }
  v8 = sub_1C5270984(*v3 + 2168, &v10);
  v5 = *((_QWORD *)v8 + 1);
  if (!v5)
  {
    v5 = sub_1C484358C(*v3 + 2040, 24, 3);
    v9 = v10;
    *(_QWORD *)v5 = v3;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 8) = (v9 << 8) | 0xDu;
    *((_QWORD *)v8 + 1) = v5;
  }
LABEL_6:
  v6 = (llvm::Type *)*(unsigned int *)(a1 + 32);
  if (*(_BYTE *)(a1 + 8) == 19)
    return llvm::ScalableVectorType::get((uint64_t **)v5, v6);
  else
    return llvm::FixedVectorType::get((llvm::FixedVectorType *)v5, v6);
}

unint64_t sub_1C53D3760(llvm::User *a1)
{
  char *v1;
  char *v2;
  char *v5;
  uint64_t v6;
  char *Descriptor;

  if ((*((_DWORD *)a1 + 5) & 0x80000000) != 0)
  {
    Descriptor = llvm::User::getDescriptor(a1);
    if ((*((_DWORD *)a1 + 5) & 0x80000000) != 0)
    {
      v5 = llvm::User::getDescriptor(a1);
      v2 = &v5[v6];
    }
    else
    {
      v2 = 0;
    }
    v1 = Descriptor;
  }
  else
  {
    v1 = 0;
    v2 = 0;
  }
  return (unint64_t)(v2 - v1) >> 4;
}

int32x2_t llvm::SymbolTableListTraits<llvm::Function>::removeNodeFromList(uint64_t a1, uint64_t ***a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ****v7;
  uint64_t ***v8;
  int v9;
  int v10;
  uint64_t v11;
  size_t *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  size_t v15;
  int v16;
  size_t v17;
  unsigned __int8 *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  int32x2_t result;

  a2[5] = 0;
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    return result;
  v2 = *(uint64_t **)(a1 + 88);
  if (!v2)
    return result;
  v3 = ***a2;
  v4 = *(_QWORD *)(v3 + 152);
  v5 = *(unsigned int *)(v3 + 168);
  if ((_DWORD)v5)
  {
    LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v7 = (uint64_t ****)(v4 + 16 * v6);
    v8 = *v7;
    if (*v7 == a2)
      goto LABEL_9;
    v9 = 1;
    while (v8 != (uint64_t ***)-4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v5 - 1);
      v8 = *(uint64_t ****)(v4 + 16 * v6);
      if (v8 == a2)
      {
        v7 = (uint64_t ****)(v4 + 16 * v6);
        goto LABEL_9;
      }
    }
  }
  v7 = (uint64_t ****)(v4 + 16 * v5);
LABEL_9:
  v11 = *((unsigned int *)v2 + 2);
  if ((_DWORD)v11)
  {
    v12 = (size_t *)v7[1];
    v13 = *((unsigned int *)v2 + 5);
    v14 = (unsigned __int8 *)v12 + v13;
    v15 = *v12;
    if (*v12)
    {
      v16 = 0;
      v17 = *v12;
      v18 = v14;
      do
      {
        v19 = *v18++;
        v16 = 33 * v16 + v19;
        --v17;
      }
      while (v17);
    }
    else
    {
      v16 = 0;
    }
    v20 = v11 - 1;
    v21 = *v2;
    v22 = *v2 + 8 * v11 + 8;
    v23 = 1;
    v24 = v16;
    while (1)
    {
      v25 = v24 & v20;
      v26 = *(_QWORD **)(v21 + 8 * v25);
      if (v26 != (_QWORD *)-8)
      {
        if (!v26)
          return result;
        if (*(_DWORD *)(v22 + 4 * v25) == v16 && v15 == *v26 && (!v15 || !memcmp(v14, (char *)v26 + v13, v15)))
          break;
      }
      v24 = v23 + v25;
      ++v23;
    }
    *(_QWORD *)(v21 + 8 * (int)v25) = -8;
    result = vadd_s32(*(int32x2_t *)((char *)v2 + 12), (int32x2_t)0x1FFFFFFFFLL);
    *(uint64_t *)((char *)v2 + 12) = (uint64_t)result;
  }
  return result;
}

uint64_t sub_1C53D3948()
{
  __int128 v1;
  int v2;
  int *v3;
  int v4;

  v4 = 1;
  v2 = 1024;
  v3 = &v2;
  *(_QWORD *)&v1 = "Maximum size for the name of non-global values.";
  *((_QWORD *)&v1 + 1) = 47;
  sub_1C61798D0((uint64_t)&unk_1ED830698, "non-global-value-max-name-size", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED830698, &dword_1C475E000);
}

uint64_t llvm::Registry<llvm::GCStrategy>::add_node(uint64_t result)
{
  uint64_t *v1;

  v1 = (uint64_t *)llvm::Registry<llvm::GCStrategy>::Tail;
  if (!llvm::Registry<llvm::GCStrategy>::Tail)
    v1 = (uint64_t *)&llvm::Registry<llvm::GCStrategy>::Head;
  *v1 = result;
  llvm::Registry<llvm::GCStrategy>::Tail = result;
  return result;
}

void *llvm::Registry<llvm::GCStrategy>::begin()
{
  return llvm::Registry<llvm::GCStrategy>::Head;
}

uint64_t llvm::GCStrategy::GCStrategy(uint64_t this)
{
  *(_QWORD *)this = &unk_1E814E318;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 31) = 0;
  return this;
}

{
  *(_QWORD *)this = &unk_1E814E318;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 31) = 0;
  return this;
}

uint64_t llvm::getGCStrategy(const void *a1, const void *a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[2];
  std::string v11;
  std::string v12;
  std::string v13;
  std::string v14;
  const void *v15[2];

  v15[0] = a1;
  v15[1] = a2;
  v2 = llvm::Registry<llvm::GCStrategy>::Head;
  if (!llvm::Registry<llvm::GCStrategy>::Head)
  {
    sub_1C53D3BC8(&v12, "unsupported GC: ");
    sub_1C53D3C74(v15, (uint64_t)&v11);
    sub_1C53D3B74(&v12, (uint64_t *)&v11, &v13);
    sub_1C5051730(&v13, " (did you remember to link and initialize the library?)", &v14);
    std::string::~string(&v13);
    std::string::~string(&v11);
    std::string::~string(&v12);
    sub_1C6239630(v10, (uint64_t *)&v14);
    v6 = v10[0];
    v7 = v10[1];
LABEL_7:
    llvm::report_fatal_error(v6, v7, 1);
  }
  while (1)
  {
    v5 = v2[1];
    if (*(const void **)(v5 + 8) == a2 && (!a2 || !memcmp(*(const void **)v5, a1, (size_t)a2)))
      return (*(uint64_t (**)(void))(v5 + 32))();
    v2 = (_QWORD *)*v2;
    if (!v2)
    {
      sub_1C53D3BC8(&v13, "unsupported GC: ");
      sub_1C53D3C74(v15, (uint64_t)&v12);
      sub_1C53D3B74(&v13, (uint64_t *)&v12, &v14);
      sub_1C6239630(v9, (uint64_t *)&v14);
      v6 = v9[0];
      v7 = v9[1];
      goto LABEL_7;
    }
  }
}

__n128 sub_1C53D3B74@<Q0>(std::string *a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  char v4;
  BOOL v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string::size_type v8;
  __n128 *v9;
  __n128 result;

  v4 = *((_BYTE *)a2 + 23);
  v5 = v4 < 0;
  v6 = a2[1];
  if (v4 < 0)
    a2 = (uint64_t *)*a2;
  v7 = v4 & 0x7F;
  if (v5)
    v8 = v6;
  else
    v8 = v7;
  v9 = (__n128 *)std::string::append(a1, (const std::string::value_type *)a2, v8);
  result = *v9;
  *a3 = *(std::string *)v9->n128_u8;
  v9->n128_u64[0] = 0;
  v9->n128_u64[1] = 0;
  v9[1].n128_u64[0] = 0;
  return result;
}

_QWORD *sub_1C53D3BC8(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

const void **sub_1C53D3C74@<X0>(const void **result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  const void *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = (_QWORD *)a2;
  v3 = *result;
  if (!*result)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    return result;
  }
  v4 = (size_t)result[1];
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v4 >= 0x17)
  {
    v5 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v5 = v4 | 7;
    v6 = v5 + 1;
    v7 = operator new(v5 + 1);
    v2[1] = v4;
    v2[2] = v6 | 0x8000000000000000;
    *v2 = v7;
    v2 = v7;
  }
  else
  {
    *(_BYTE *)(a2 + 23) = v4;
    if (!v4)
      goto LABEL_11;
  }
  result = (const void **)memmove(v2, v3, v4);
LABEL_11:
  *((_BYTE *)v2 + v4) = 0;
  return result;
}

void llvm::GlobalPtrAuthInfo::tryAnalyze(uint64_t ***this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  llvm::Value *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  const char *v18;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const void **v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  int v38;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42[4];
  __int16 v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = **this;
  v5 = llvm::Value::stripPointerCasts((llvm::Value *)this);
  if (!v5 || (v6 = (uint64_t)v5, *((_BYTE *)v5 + 16) != 3))
  {
    v18 = "value isn't a global";
    goto LABEL_13;
  }
  if ((*((_BYTE *)v5 + 34) & 0x40) == 0)
    goto LABEL_11;
  v7 = ***(_QWORD ***)v5;
  v42[0] = (uint64_t)v5;
  v8 = *(_DWORD *)(v7 + 2520);
  if (!v8)
  {
    v26 = 0;
LABEL_33:
    v12 = sub_1C53D65B8(v7 + 2504, (uint64_t)v42, v42, v26);
    v27 = v42[0];
    v12[1] = 0;
    v12[2] = 0;
    *v12 = v27;
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(v7 + 2504);
  v10 = v8 - 1;
  v11 = v10 & ((v5 >> 4) ^ (v5 >> 9));
  v12 = (_QWORD *)(v9 + 24 * v11);
  v13 = *v12;
  if (*v12 != v6)
  {
    v22 = 0;
    v23 = 1;
    while (v13 != -4096)
    {
      if (v22)
        v24 = 0;
      else
        v24 = v13 == -8192;
      if (v24)
        v22 = v12;
      v25 = v11 + v23++;
      v11 = v25 & v10;
      v12 = (_QWORD *)(v9 + 24 * v11);
      v13 = *v12;
      if (*v12 == v6)
        goto LABEL_6;
    }
    if (v22)
      v26 = v22;
    else
      v26 = v12;
    goto LABEL_33;
  }
LABEL_6:
  if (v12[2] != 12
    || ((v14 = (uint64_t *)v12[1], v15 = *v14, v16 = *((_DWORD *)v14 + 2), v15 == 0x7274702E6D766C6CLL)
      ? (v17 = v16 == 1752462689)
      : (v17 = 0),
        !v17))
  {
LABEL_11:
    v18 = "global isn't in section \"llvm.ptrauth\"";
    goto LABEL_13;
  }
  if (*(_BYTE *)(v6 + 16))
  {
    if (*(_BYTE *)(v6 + 16) == 3 && (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) == 0)
    {
LABEL_36:
      v18 = "global doesn't have an initializer";
      goto LABEL_13;
    }
  }
  else if (*(_QWORD *)(v6 + 72) == v6 + 72 && (*(_BYTE *)(v6 + 34) & 0x80) == 0)
  {
    goto LABEL_36;
  }
  v28 = *(uint64_t **)(v6 - 32);
  v29 = *v28;
  if (!*v28 || *(_BYTE *)(v29 + 8) != 16)
  {
    v18 = "global isn't a struct";
    goto LABEL_13;
  }
  v30 = *v4 + 1984;
  v31 = *v4 + 1960;
  v42[0] = llvm::PointerType::get((llvm::PointerType *)(*v4 + 1912), 0);
  v42[1] = v31;
  v42[2] = v30;
  v42[3] = v30;
  v32 = (const void **)llvm::StructType::get(v4, (uint64_t)v42, 4, 0);
  if (!llvm::StructType::isLayoutIdentical((const void **)v29, v32))
  {
    v18 = "global doesn't have type '{ i8*, i32, i64, i64 }'";
    goto LABEL_13;
  }
  v33 = *((_DWORD *)v28 + 5);
  if ((v33 & 0x40000000) != 0)
  {
    v34 = (uint64_t *)*(v28 - 1);
    v37 = v34[4];
    if (!v37 || *(_BYTE *)(v37 + 16) != 16)
    {
LABEL_57:
      v18 = "key isn't a constant integer";
      goto LABEL_13;
    }
  }
  else
  {
    v34 = &v28[-4 * (v33 & 0x7FFFFFF)];
    v35 = v34[4];
    if (v35)
      v36 = *(_BYTE *)(v35 + 16) == 16;
    else
      v36 = 0;
    if (!v36)
      goto LABEL_57;
  }
  v38 = *(unsigned __int8 *)(v34[8] + 16);
  if (v38 == 5 || v38 == 16)
  {
    if ((v33 & 0x40000000) != 0)
      v40 = (uint64_t *)*(v28 - 1);
    else
      v40 = &v28[-4 * (v33 & 0x7FFFFFF)];
    v41 = v40[12];
    if (v41 && *(_BYTE *)(v41 + 16) == 16)
    {
      v21 = *(_BYTE *)(a2 + 8) & 0xFE;
      goto LABEL_16;
    }
    v18 = "discriminator isn't a constant integer";
  }
  else
  {
    v18 = "address discriminator isn't a constant integer or expr";
  }
LABEL_13:
  v42[0] = (uint64_t)v18;
  v43 = 259;
  if (!atomic_load(qword_1ED836B58))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
  v20 = qword_1ED836B58[0];
  v6 = operator new();
  *(_QWORD *)v6 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v42, (_QWORD *)(v6 + 8));
  *(_QWORD *)(v6 + 32) = 3;
  *(_QWORD *)(v6 + 40) = v20;
  *(_BYTE *)(v6 + 48) = 1;
  v21 = *(_BYTE *)(a2 + 8) | 1;
LABEL_16:
  *(_BYTE *)(a2 + 8) = v21;
  *(_QWORD *)a2 = v6;
}

char *llvm::GlobalPtrAuthInfo::analyze(uint64_t ***this, const llvm::Value *a2)
{
  char *v3;
  char *v4;
  char *v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  llvm::GlobalPtrAuthInfo::tryAnalyze(this, (uint64_t)&v5);
  if ((v6 & 1) == 0)
    return v5;
  v3 = v5;
  sub_1C4D62BD4(&v3, &v4);
  if (v3)
    (*(void (**)(char *))(*(_QWORD *)v3 + 8))(v3);
  return 0;
}

uint64_t llvm::GlobalPtrAuthInfo::isCompatibleWith(llvm::GlobalPtrAuthInfo *this, const llvm::Value *a2, const llvm::Value *a3, const llvm::DataLayout *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  llvm::Constant *v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v7 = *(_QWORD *)(*(_QWORD *)this - 32)
     - 32 * (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)this - 32) + 20) & 0x7FFFFFF);
  if (*(const llvm::Value **)(v7 + 32) != a2)
    return 0;
  v11 = *(llvm::Constant **)(v7 + 96);
  if (v11 != a3)
  {
    if (*((_BYTE *)a3 + 16) == 84)
    {
      v13 = *((_QWORD *)a3 - 4);
      if (v13)
      {
        if (!*(_BYTE *)(v13 + 16)
          && *(_QWORD *)(v13 + 24) == *((_QWORD *)a3 + 9)
          && (*(_BYTE *)(v13 + 33) & 0x20) != 0
          && *(_DWORD *)(v13 + 36) == 247)
        {
          v14 = (uint64_t *)((char *)a3 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF));
          if ((llvm::Constant *)v14[4] == v11)
          {
            if ((sub_1C53D4278(*v14, *(_QWORD *)(v7 + 64), a4, (uint64_t)a4, a5, a6, a7) & 1) != 0)
              return 1;
            v11 = *(llvm::Constant **)(*(_QWORD *)(*(_QWORD *)this - 32)
                                     - 32 * (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)this - 32) + 20) & 0x7FFFFFF)
                                     + 96);
          }
        }
      }
    }
    return llvm::Constant::isNullValue(v11)
        && (sub_1C53D4278(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 32)- 32 * (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)this - 32) + 20) & 0x7FFFFFF)+ 64), (uint64_t)a3, a4, v15, v16, v17, v18) & 1) != 0;
  }
  return llvm::Constant::isNullValue(*(llvm::Constant **)(v7 + 64));
}

uint64_t sub_1C53D4278(uint64_t a1, uint64_t a2, llvm::DataLayout *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v10;
  int v11;
  int v12;
  uint64_t *v13;
  int v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  void *__s2;
  unsigned int v24;
  void *__s1;
  unsigned int v26;

  v10 = *(_DWORD *)(*((_QWORD *)a3 + 29) + 4);
  v26 = v10;
  if (v10 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__s1, 0, 0);
    v24 = *(_DWORD *)(*((_QWORD *)a3 + 29) + 4);
    if (v24 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&__s2, 0, 0);
      goto LABEL_4;
    }
  }
  else
  {
    __s1 = 0;
    v24 = v10;
  }
  __s2 = 0;
LABEL_4:
  v11 = *(unsigned __int8 *)(a1 + 16);
  if (v11 == 75 || v11 == 5 && *(_WORD *)(a1 + 18) == 47)
  {
    v12 = *(_DWORD *)(a1 + 20);
    if ((v12 & 0x40000000) != 0)
      v13 = *(uint64_t **)(a1 - 8);
    else
      v13 = (uint64_t *)(a1 - 32 * (v12 & 0x7FFFFFF));
    a1 = *v13;
  }
  v14 = *(unsigned __int8 *)(a2 + 16);
  if (v14 == 75 || v14 == 5 && *(_WORD *)(a2 + 18) == 47)
  {
    v15 = *(_DWORD *)(a2 + 20);
    if ((v15 & 0x40000000) != 0)
      v16 = *(uint64_t **)(a2 - 8);
    else
      v16 = (uint64_t *)(a2 - 32 * (v15 & 0x7FFFFFF));
    a2 = *v16;
  }
  v17 = llvm::Value::stripAndAccumulateConstantOffsets(a1, a3, (const void **)&__s1, 1, 0, 0, a7);
  v19 = llvm::Value::stripAndAccumulateConstantOffsets(a2, a3, (const void **)&__s2, 1, 0, 0, v18);
  v20 = 0;
  if (v17 == v19)
  {
    if (v26 > 0x40)
      v21 = memcmp(__s1, __s2, (((unint64_t)v26 + 63) >> 3) & 0x3FFFFFF8) == 0;
    else
      v21 = __s1 == __s2;
    v20 = v21;
  }
  if (v24 >= 0x41 && __s2)
    MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
  if (v26 >= 0x41 && __s1)
    MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
  return v20;
}

uint64_t llvm::GlobalValue::isMaterializable(llvm::GlobalValue *this)
{
  uint64_t result;

  result = 0;
  if (this)
  {
    if (!*((_BYTE *)this + 16))
      return *((unsigned __int8 *)this + 34) >> 7;
  }
  return result;
}

_QWORD *llvm::GlobalValue::copyAttributesFrom(llvm::GlobalValue *this, const llvm::GlobalValue *a2)
{
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *result;
  size_t v11;
  _BYTE *v12;
  char hasExternalWeakLinkage;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::GlobalValue *v17;

  v4 = *((_DWORD *)a2 + 8) & 0x30;
  v5 = *((_DWORD *)this + 8);
  v6 = v5 & 0xFFFFFFCF | v4;
  *((_DWORD *)this + 8) = v6;
  if ((v5 & 0xFu) - 7 < 2
    || v4
    && (hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage(this),
        v6 = *((_DWORD *)this + 8),
        (hasExternalWeakLinkage & 1) == 0))
  {
    v6 |= 0x4000u;
    *((_DWORD *)this + 8) = v6;
  }
  v7 = v6 & 0xFFFFFF3F | (((*((_DWORD *)a2 + 8) >> 6) & 3) << 6);
  *((_DWORD *)this + 8) = v7;
  v8 = v7 & 0xFFFFE3FF | (((*((_DWORD *)a2 + 8) >> 10) & 7) << 10);
  *((_DWORD *)this + 8) = v8;
  v9 = v8 & 0xFFFFFCFF | (((*((_DWORD *)a2 + 8) >> 8) & 3) << 8);
  *((_DWORD *)this + 8) = v9;
  *((_DWORD *)this + 8) = v9 & 0xFFFFBFFF | (((*((_DWORD *)a2 + 8) >> 14) & 1) << 14);
  result = llvm::GlobalValue::getPartition(a2);
  v12 = result;
  if ((*((_BYTE *)this + 33) & 0x80) != 0 || v11)
  {
    if (v11)
    {
      v12 = llvm::UniqueStringSaver::save(***(_QWORD ***)this + 2136, result, v11);
      v14 = v15;
    }
    else
    {
      v14 = 0;
    }
    v16 = ***(_QWORD ***)this + 2528;
    v17 = this;
    result = sub_1C617A140(v16, (uint64_t *)&v17);
    result[1] = v12;
    result[2] = v14;
    *((_DWORD *)this + 8) = *((_DWORD *)this + 8) & 0xFFFF7FFF | ((v14 != 0) << 15);
  }
  return result;
}

_QWORD *llvm::GlobalValue::setPartition(_QWORD *result, _QWORD *a2, size_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;

  if ((*((_BYTE *)result + 33) & 0x80) != 0 || a3)
  {
    v6 = (uint64_t)result;
    v7 = a2;
    if (a3)
    {
      v7 = llvm::UniqueStringSaver::save(**(_QWORD **)*result + 2136, a2, a3);
      v3 = v4;
    }
    else
    {
      v3 = 0;
    }
    v5 = ***(_QWORD ***)v6 + 2528;
    v8 = v6;
    result = sub_1C617A140(v5, &v8);
    result[1] = v7;
    result[2] = v3;
    *(_DWORD *)(v6 + 32) = *(_DWORD *)(v6 + 32) & 0xFFFF7FFF | ((v3 != 0) << 15);
  }
  return result;
}

void *llvm::GlobalValue::getPartition(llvm::GlobalValue *this)
{
  uint64_t v2;
  llvm::GlobalValue *v3;

  if ((*((_BYTE *)this + 33) & 0x80) == 0)
    return &unk_1C8711D59;
  v2 = ***(_QWORD ***)this + 2528;
  v3 = this;
  return (void *)sub_1C617A140(v2, (uint64_t *)&v3)[1];
}

void llvm::GlobalValue::removeFromParent(llvm::GlobalValue *this)
{
  __asm { BR              X10 }
}

void sub_1C53D46D0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  llvm::SymbolTableListTraits<llvm::Function>::removeNodeFromList(*(_QWORD *)(v0 + 40) + 24, (uint64_t ***)v0);
  v2 = *(_QWORD *)(v0 + 56);
  v1 = (_QWORD *)(v0 + 56);
  v3 = (_QWORD *)v1[1];
  *v3 = v2;
  *(_QWORD *)(v2 + 8) = v3;
  *v1 = 0;
  v1[1] = 0;
}

void sub_1C53D4714()
{
  llvm::Value *v0;

  llvm::SymbolTableListTraits<llvm::GlobalAlias>::removeNodeFromList(*((_QWORD *)v0 + 5) + 40, v0);
  JUMPOUT(0x1C53D46F8);
}

void sub_1C53D472C()
{
  llvm::Value *v0;

  llvm::SymbolTableListTraits<llvm::GlobalIFunc>::removeNodeFromList(*((_QWORD *)v0 + 5) + 56, v0);
  JUMPOUT(0x1C53D46F4);
}

void llvm::GlobalAlias::removeFromParent(llvm::GlobalAlias *this)
{
  uint64_t v2;
  _QWORD *v3;

  llvm::SymbolTableListTraits<llvm::GlobalAlias>::removeNodeFromList(*((_QWORD *)this + 5) + 40, this);
  v2 = *((_QWORD *)this + 6);
  v3 = (_QWORD *)*((_QWORD *)this + 7);
  *v3 = v2;
  *(_QWORD *)(v2 + 8) = v3;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
}

void llvm::GlobalIFunc::removeFromParent(llvm::GlobalIFunc *this)
{
  uint64_t v2;
  _QWORD *v3;

  llvm::SymbolTableListTraits<llvm::GlobalIFunc>::removeNodeFromList(*((_QWORD *)this + 5) + 56, this);
  v2 = *((_QWORD *)this + 7);
  v3 = (_QWORD *)*((_QWORD *)this + 8);
  *v3 = v2;
  *(_QWORD *)(v2 + 8) = v3;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
}

void llvm::GlobalVariable::removeFromParent(llvm::GlobalVariable *this)
{
  uint64_t v2;
  _QWORD *v3;

  llvm::SymbolTableListTraits<llvm::GlobalVariable>::removeNodeFromList(*((_QWORD *)this + 5) + 8, (uint64_t ***)this);
  v2 = *((_QWORD *)this + 7);
  v3 = (_QWORD *)*((_QWORD *)this + 8);
  *v3 = v2;
  *(_QWORD *)(v2 + 8) = v3;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
}

void llvm::GlobalValue::eraseFromParent(llvm::GlobalValue *this)
{
  int v2;
  uint64_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD **v9;
  uint64_t v10;
  int32x2_t **v11;
  int32x2_t *v12;
  __int32 v13;
  int32x2_t v14;
  __int32 v15;
  unsigned int v16;
  uint64_t v17;
  llvm::GlobalValue *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  llvm::Value *v22;
  int v23;
  unsigned int v24;
  char *v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  char *v29;
  uint64_t v30;
  unsigned __int8 *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;

  v2 = *((unsigned __int8 *)this + 16);
  if (*((_BYTE *)this + 16))
  {
    if (v2 == 3)
    {
      llvm::SymbolTableListTraits<llvm::GlobalVariable>::removeNodeFromList(*((_QWORD *)this + 5) + 8, (uint64_t ***)this);
      v3 = *((_QWORD *)this + 7);
      v4 = (_QWORD *)*((_QWORD *)this + 8);
      *v4 = v3;
      *(_QWORD *)(v3 + 8) = v4;
      *((_QWORD *)this + 7) = 0;
      *((_QWORD *)this + 8) = 0;
      v5 = *((_DWORD *)this + 5);
      if ((v5 & 0x40000000) != 0)
      {
        v7 = (char *)*((_QWORD *)this - 1);
        v6 = v5 & 0x7FFFFFF;
      }
      else
      {
        v6 = v5 & 0x7FFFFFF;
        v7 = (char *)this - 32 * v6;
      }
      if (v6)
      {
        v8 = 32 * v6;
        v9 = (_QWORD **)(v7 + 16);
        do
        {
          if (*(v9 - 2))
          {
            **v9 = *(v9 - 1);
            v10 = (uint64_t)*(v9 - 1);
            if (v10)
              *(_QWORD *)(v10 + 16) = *v9;
          }
          *(v9 - 2) = 0;
          v9 += 4;
          v8 -= 32;
        }
        while (v8);
        v5 = *((_DWORD *)this + 5);
      }
      if ((v5 & 0x20000000) != 0)
      {
        v11 = **(int32x2_t ****)this;
        v12 = *v11;
        v13 = (*v11)[312].i32[0];
        if (v13)
        {
          v14 = v12[310];
          v15 = v13 - 1;
          v16 = v15 & ((this >> 4) ^ (this >> 9));
          v17 = *(_QWORD *)&v14 + 40 * v16;
          v18 = *(llvm::GlobalValue **)v17;
          if (*(llvm::GlobalValue **)v17 == this)
          {
LABEL_16:
            v19 = *(char **)(v17 + 8);
            v20 = *(unsigned int *)(v17 + 16);
            if ((_DWORD)v20)
            {
              v29 = v19 - 8;
              v30 = 16 * v20;
              do
              {
                v31 = *(unsigned __int8 **)&v29[v30];
                if (v31)
                  llvm::MetadataTracking::untrack((uint64_t)&v29[v30], v31);
                v30 -= 16;
              }
              while (v30);
              v19 = *(char **)(v17 + 8);
            }
            if (v19 != (char *)(v17 + 24))
              free(v19);
            *(_QWORD *)v17 = -8192;
            v12[311] = vadd_s32(v12[311], (int32x2_t)0x1FFFFFFFFLL);
            v5 = *((_DWORD *)this + 5);
          }
          else
          {
            v27 = 1;
            while (v18 != (llvm::GlobalValue *)-4096)
            {
              v28 = v16 + v27++;
              v16 = v28 & v15;
              v17 = *(_QWORD *)&v14 + 40 * v16;
              v18 = *(llvm::GlobalValue **)v17;
              if (*(llvm::GlobalValue **)v17 == this)
                goto LABEL_16;
            }
          }
        }
        *((_DWORD *)this + 5) = v5 & 0xDFFFFFFF;
      }
      v21 = *((_QWORD *)this + 6);
      if (v21)
        llvm::Comdat::removeUser(v21, (uint64_t)this);
      *((_QWORD *)this + 6) = 0;
      llvm::Constant::removeDeadConstantUsers((uint64_t)this);
      llvm::Value::~Value(this, v22);
      v23 = *((_DWORD *)this + 5);
      v24 = v23 & 0xF8000000 | 1;
      *((_DWORD *)this + 5) = v24;
      if ((v23 & 0x40000000) != 0)
      {
        v34 = (_QWORD *)*((_QWORD *)this - 1);
        v33 = (char *)this - 8;
        v32 = v34;
        if (*v34)
        {
          *(_QWORD *)v32[2] = v32[1];
          v35 = v32[1];
          if (v35)
            *(_QWORD *)(v35 + 16) = v32[2];
        }
        operator delete(v32);
        v25 = v33;
      }
      else
      {
        v25 = (char *)this - 32;
        if (*((_QWORD *)this - 4))
        {
          **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
          v26 = *((_QWORD *)this - 3);
          if (v26)
            *(_QWORD *)(v26 + 16) = *((_QWORD *)this - 2);
        }
        if ((v24 & 0x80000000) != 0)
          v25 = (char *)this - *((_QWORD *)this - 5) - 40;
      }
      operator delete(v25);
    }
    else if (v2 == 1)
    {
      llvm::SymbolTableListTraits<llvm::GlobalAlias>::removeNodeFromList(*((_QWORD *)this + 5) + 40, this);
      v36 = *((_QWORD *)this + 6);
      v37 = (_QWORD *)*((_QWORD *)this + 7);
      *v37 = v36;
      *(_QWORD *)(v36 + 8) = v37;
      *((_QWORD *)this + 6) = 0;
      *((_QWORD *)this + 7) = 0;
      sub_1C6239D9C(this);
    }
    else
    {
      sub_1C6239CEC(*((_QWORD *)this + 5) + 56, (uint64_t)this + 56);
    }
  }
  else
  {
    llvm::Function::eraseFromParent(this);
  }
}

uint64_t llvm::GlobalIFunc::eraseFromParent(llvm::GlobalIFunc *this)
{
  return sub_1C6239CEC(*((_QWORD *)this + 5) + 56, (uint64_t)this + 56);
}

void llvm::GlobalVariable::eraseFromParent(llvm::GlobalVariable *this)
{
  uint64_t v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD **v8;
  uint64_t v9;
  int32x2_t **v10;
  int32x2_t *v11;
  __int32 v12;
  int32x2_t v13;
  __int32 v14;
  unsigned int v15;
  uint64_t v16;
  llvm::GlobalVariable *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Value *v21;
  int v22;
  unsigned int v23;
  char *v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  char *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  _QWORD *v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;

  llvm::SymbolTableListTraits<llvm::GlobalVariable>::removeNodeFromList(*((_QWORD *)this + 5) + 8, (uint64_t ***)this);
  v2 = *((_QWORD *)this + 7);
  v3 = (_QWORD *)*((_QWORD *)this + 8);
  *v3 = v2;
  *(_QWORD *)(v2 + 8) = v3;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  v4 = *((_DWORD *)this + 5);
  if ((v4 & 0x40000000) != 0)
  {
    v6 = (char *)*((_QWORD *)this - 1);
    v5 = v4 & 0x7FFFFFF;
  }
  else
  {
    v5 = v4 & 0x7FFFFFF;
    v6 = (char *)this - 32 * v5;
  }
  if (v5)
  {
    v7 = 32 * v5;
    v8 = (_QWORD **)(v6 + 16);
    do
    {
      if (*(v8 - 2))
      {
        **v8 = *(v8 - 1);
        v9 = (uint64_t)*(v8 - 1);
        if (v9)
          *(_QWORD *)(v9 + 16) = *v8;
      }
      *(v8 - 2) = 0;
      v8 += 4;
      v7 -= 32;
    }
    while (v7);
    v4 = *((_DWORD *)this + 5);
  }
  if ((v4 & 0x20000000) != 0)
  {
    v10 = **(int32x2_t ****)this;
    v11 = *v10;
    v12 = (*v10)[312].i32[0];
    if (v12)
    {
      v13 = v11[310];
      v14 = v12 - 1;
      v15 = v14 & ((this >> 4) ^ (this >> 9));
      v16 = *(_QWORD *)&v13 + 40 * v15;
      v17 = *(llvm::GlobalVariable **)v16;
      if (*(llvm::GlobalVariable **)v16 == this)
      {
LABEL_13:
        v18 = *(char **)(v16 + 8);
        v19 = *(unsigned int *)(v16 + 16);
        if ((_DWORD)v19)
        {
          v28 = v18 - 8;
          v29 = 16 * v19;
          do
          {
            v30 = *(unsigned __int8 **)&v28[v29];
            if (v30)
              llvm::MetadataTracking::untrack((uint64_t)&v28[v29], v30);
            v29 -= 16;
          }
          while (v29);
          v18 = *(char **)(v16 + 8);
        }
        if (v18 != (char *)(v16 + 24))
          free(v18);
        *(_QWORD *)v16 = -8192;
        v11[311] = vadd_s32(v11[311], (int32x2_t)0x1FFFFFFFFLL);
        v4 = *((_DWORD *)this + 5);
      }
      else
      {
        v26 = 1;
        while (v17 != (llvm::GlobalVariable *)-4096)
        {
          v27 = v15 + v26++;
          v15 = v27 & v14;
          v16 = *(_QWORD *)&v13 + 40 * v15;
          v17 = *(llvm::GlobalVariable **)v16;
          if (*(llvm::GlobalVariable **)v16 == this)
            goto LABEL_13;
        }
      }
    }
    *((_DWORD *)this + 5) = v4 & 0xDFFFFFFF;
  }
  v20 = *((_QWORD *)this + 6);
  if (v20)
    llvm::Comdat::removeUser(v20, (uint64_t)this);
  *((_QWORD *)this + 6) = 0;
  llvm::Constant::removeDeadConstantUsers((uint64_t)this);
  llvm::Value::~Value(this, v21);
  v22 = *((_DWORD *)this + 5);
  v23 = v22 & 0xF8000000 | 1;
  *((_DWORD *)this + 5) = v23;
  if ((v22 & 0x40000000) != 0)
  {
    v33 = (_QWORD *)*((_QWORD *)this - 1);
    v32 = (char *)this - 8;
    v31 = v33;
    if (*v33)
    {
      *(_QWORD *)v31[2] = v31[1];
      v34 = v31[1];
      if (v34)
        *(_QWORD *)(v34 + 16) = v31[2];
    }
    operator delete(v31);
    v24 = v32;
  }
  else
  {
    v24 = (char *)this - 32;
    if (*((_QWORD *)this - 4))
    {
      **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
      v25 = *((_QWORD *)this - 3);
      if (v25)
        *(_QWORD *)(v25 + 16) = *((_QWORD *)this - 2);
    }
    if ((v23 & 0x80000000) != 0)
      v24 = (char *)this - *((_QWORD *)this - 5) - 40;
  }
  operator delete(v24);
}

void llvm::GlobalObject::~GlobalObject(llvm::GlobalObject *this)
{
  uint64_t v2;
  llvm::Value *v3;

  v2 = *((_QWORD *)this + 6);
  if (v2)
    llvm::Comdat::removeUser(v2, (uint64_t)this);
  *((_QWORD *)this + 6) = 0;
  llvm::Constant::removeDeadConstantUsers((uint64_t)this);
  llvm::Value::~Value(this, v3);
}

{
  uint64_t v2;
  llvm::Value *v3;

  v2 = *((_QWORD *)this + 6);
  if (v2)
    llvm::Comdat::removeUser(v2, (uint64_t)this);
  *((_QWORD *)this + 6) = 0;
  llvm::Constant::removeDeadConstantUsers((uint64_t)this);
  llvm::Value::~Value(this, v3);
}

_QWORD *llvm::GlobalObject::setComdat(llvm::GlobalObject *this, llvm::Comdat *a2)
{
  llvm::GlobalObject *v2;
  _QWORD *result;
  llvm::Comdat *v4;
  llvm::GlobalObject *v5;

  v2 = this;
  result = (_QWORD *)*((_QWORD *)this + 6);
  if (result)
  {
    v4 = a2;
    v5 = v2;
    result = llvm::Comdat::removeUser((uint64_t)result, (uint64_t)v2);
    a2 = v4;
    v2 = v5;
  }
  *((_QWORD *)v2 + 6) = a2;
  if (a2)
    return llvm::Comdat::addUser((uint64_t)a2, (uint64_t)v2);
  return result;
}

uint64_t llvm::GlobalValue::isInterposable(llvm::GlobalValue *this)
{
  llvm::GlobalValue *Section;
  uint64_t v3;
  uint64_t result;

  if (*((_BYTE *)this + 16) == 3)
  {
    Section = llvm::GlobalValue::getSection(this);
    if (v3 == 12 && *(_QWORD *)Section == 0x7274702E6D766C6CLL && *((_DWORD *)Section + 2) == 1752462689)
      return 1;
  }
  if ((*((_DWORD *)this + 8) & 0xFu) - 5 < 4 || (result = 1, ((1 << (*((_DWORD *)this + 8) & 0xF)) & 0x614) == 0))
  {
    result = *((_QWORD *)this + 5);
    if (result)
    {
      result = llvm::Module::getSemanticInterposition((llvm::Module *)result);
      if ((_DWORD)result)
        return (*((_BYTE *)this + 33) & 0x40) == 0;
    }
  }
  return result;
}

llvm::GlobalValue *llvm::GlobalValue::getSection(llvm::GlobalValue *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  llvm::GlobalValue **v6;
  llvm::GlobalValue *v7;
  llvm::GlobalValue *result;
  llvm::GlobalValue **v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  llvm::GlobalValue **v13;
  llvm::GlobalValue *v14;
  uint64_t AliaseeObject;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  llvm::GlobalValue *v21;
  llvm::GlobalValue **v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  llvm::GlobalValue **v26;
  _QWORD *v27;
  llvm::GlobalValue *v28;
  llvm::GlobalValue *v29;

  if (this && *((_BYTE *)this + 16) == 1)
  {
    AliaseeObject = llvm::GlobalAlias::getAliaseeObject(this);
    if (!AliaseeObject)
      return (llvm::GlobalValue *)&unk_1C8711D59;
    if ((*(_BYTE *)(AliaseeObject + 34) & 0x40) != 0)
    {
      v16 = ***(_QWORD ***)AliaseeObject;
      v29 = (llvm::GlobalValue *)AliaseeObject;
      v17 = *(_DWORD *)(v16 + 2520);
      if (v17)
      {
        v18 = *(_QWORD *)(v16 + 2504);
        v19 = v17 - 1;
        v20 = (v17 - 1) & ((AliaseeObject >> 4) ^ (AliaseeObject >> 9));
        v6 = (llvm::GlobalValue **)(v18 + 24 * v20);
        v21 = *v6;
        if (*v6 == (llvm::GlobalValue *)AliaseeObject)
          return v6[1];
        v22 = 0;
        v23 = 1;
        while (v21 != (llvm::GlobalValue *)-4096)
        {
          if (v22)
            v24 = 0;
          else
            v24 = v21 == (llvm::GlobalValue *)-8192;
          if (v24)
            v22 = v6;
          v25 = v20 + v23++;
          v20 = v25 & v19;
          v6 = (llvm::GlobalValue **)(v18 + 24 * (v25 & v19));
          v21 = *v6;
          if (*v6 == (llvm::GlobalValue *)AliaseeObject)
            return v6[1];
        }
        if (v22)
          v26 = v22;
        else
          v26 = v6;
      }
      else
      {
        v26 = 0;
      }
      v27 = sub_1C53D65B8(v16 + 2504, (uint64_t)&v29, (uint64_t *)&v29, v26);
      result = 0;
      v28 = v29;
      v27[1] = 0;
      v27[2] = 0;
      *v27 = v28;
      return result;
    }
    return 0;
  }
  if ((*((_BYTE *)this + 34) & 0x40) == 0)
    return 0;
  v1 = ***(_QWORD ***)this;
  v29 = this;
  v2 = *(_DWORD *)(v1 + 2520);
  if (!v2)
  {
    v13 = 0;
LABEL_20:
    v6 = (llvm::GlobalValue **)sub_1C53D65B8(v1 + 2504, (uint64_t)&v29, (uint64_t *)&v29, v13);
    v14 = v29;
    v6[1] = 0;
    v6[2] = 0;
    *v6 = v14;
    return v6[1];
  }
  v3 = *(_QWORD *)(v1 + 2504);
  v4 = v2 - 1;
  v5 = (v2 - 1) & ((this >> 4) ^ (this >> 9));
  v6 = (llvm::GlobalValue **)(v3 + 24 * v5);
  v7 = *v6;
  if (*v6 != this)
  {
    v9 = 0;
    v10 = 1;
    while (v7 != (llvm::GlobalValue *)-4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v7 == (llvm::GlobalValue *)-8192;
      if (v11)
        v9 = v6;
      v12 = v5 + v10++;
      v5 = v12 & v4;
      v6 = (llvm::GlobalValue **)(v3 + 24 * (v12 & v4));
      v7 = *v6;
      if (*v6 == this)
        return v6[1];
    }
    if (v9)
      v13 = v9;
    else
      v13 = v6;
    goto LABEL_20;
  }
  return v6[1];
}

BOOL llvm::GlobalValue::canBenefitFromLocalAlias(llvm::GlobalValue *this)
{
  int v1;
  _BOOL8 v2;
  uint64_t v4;

  v1 = *((_DWORD *)this + 8);
  if ((v1 & 0x3F) != 0)
    return 0;
  v2 = 0;
  switch(*((_BYTE *)this + 16))
  {
    case 0:
      if ((v1 & 0x800000) == 0 && *((llvm::GlobalValue **)this + 9) == (llvm::GlobalValue *)((char *)this + 72))
        return 0;
      goto LABEL_9;
    case 1:
      this = (llvm::GlobalValue *)llvm::GlobalAlias::getAliaseeObject(this);
      if (!this)
        goto LABEL_12;
      goto LABEL_9;
    case 2:
      return v2;
    case 3:
      if ((*((_DWORD *)this + 5) & 0x7FFFFFF) == 0)
        return 0;
      goto LABEL_9;
    default:
LABEL_9:
      v4 = *((_QWORD *)this + 6);
      if (v4)
        v2 = *(_DWORD *)(v4 + 8) == 3;
      else
LABEL_12:
        v2 = 1;
      break;
  }
  return v2;
}

BOOL llvm::GlobalValue::isDeclaration(llvm::GlobalValue *this)
{
  if (this && *((_BYTE *)this + 16) == 3)
  {
    return (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0;
  }
  else
  {
    if (*((_BYTE *)this + 16) || *((llvm::GlobalValue **)this + 9) != (llvm::GlobalValue *)((char *)this + 72))
      return 0;
    return (*((_BYTE *)this + 34) & 0x80) == 0;
  }
}

uint64_t llvm::GlobalValue::getComdat(uint64_t this)
{
  int v1;

  v1 = *(unsigned __int8 *)(this + 16);
  if (this && v1 == 1)
  {
    this = llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)this);
    if (!this)
      return this;
  }
  else if (v1 == 2)
  {
    return 0;
  }
  return *(_QWORD *)(this + 48);
}

uint64_t llvm::GlobalValue::getAddressSpace(llvm::GlobalValue *this)
{
  return *(_DWORD *)(*(_QWORD *)this + 8) >> 8;
}

uint64_t llvm::GlobalObject::setAlignment(uint64_t result, __int16 a2)
{
  int v2;

  v2 = (a2 << 16) + 0x10000;
  if ((a2 & 0xFF00) == 0)
    v2 = 0;
  *(_DWORD *)(result + 32) = *(_DWORD *)(result + 32) & 0xFFC0FFFF | v2;
  return result;
}

_QWORD *llvm::GlobalObject::copyAttributesFrom(llvm::GlobalObject *this, const llvm::GlobalObject *a2)
{
  _QWORD *result;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  size_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  _QWORD *v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  _QWORD *v31;
  llvm::GlobalObject *v32;
  _QWORD *v33;
  llvm::GlobalObject *v34;
  llvm::GlobalObject *v35;

  result = llvm::GlobalValue::copyAttributesFrom(this, a2);
  v5 = ((((*((_WORD *)a2 + 17) & 0x3F) << 16) + 16711680) & 0xFF0000) + 0x10000;
  if ((*((_WORD *)a2 + 17) & 0x3F) == 0)
    v5 = 0;
  v6 = v5 | *((_DWORD *)this + 8) & 0xFFC0FFFF;
  *((_DWORD *)this + 8) = v6;
  if ((*((_BYTE *)a2 + 34) & 0x40) == 0)
  {
    v14 = 0;
    v13 = 0;
    goto LABEL_7;
  }
  v7 = ***(_QWORD ***)a2;
  v35 = a2;
  v8 = *(_DWORD *)(v7 + 2520);
  if (!v8)
  {
    v31 = 0;
LABEL_36:
    result = sub_1C53D65B8(v7 + 2504, (uint64_t)&v35, (uint64_t *)&v35, v31);
    v32 = v35;
    result[1] = 0;
    result[2] = 0;
    *result = v32;
    v6 = *((_DWORD *)this + 8);
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(v7 + 2504);
  v10 = v8 - 1;
  v11 = v10 & ((a2 >> 4) ^ (a2 >> 9));
  result = (_QWORD *)(v9 + 24 * v11);
  v12 = *result;
  if ((const llvm::GlobalObject *)*result != a2)
  {
    v23 = 0;
    v24 = 1;
    while (v12 != -4096)
    {
      if (v23)
        v25 = 0;
      else
        v25 = v12 == -8192;
      if (v25)
        v23 = result;
      v26 = v11 + v24++;
      v11 = v26 & v10;
      result = (_QWORD *)(v9 + 24 * v11);
      v12 = *result;
      if ((const llvm::GlobalObject *)*result == a2)
        goto LABEL_6;
    }
    if (v23)
      v31 = v23;
    else
      v31 = result;
    goto LABEL_36;
  }
LABEL_6:
  v14 = (_BYTE *)result[1];
  v13 = result[2];
LABEL_7:
  if ((v6 & 0x400000) != 0 || v13)
  {
    if (v13)
    {
      v14 = llvm::UniqueStringSaver::save(***(_QWORD ***)this + 2136, v14, v13);
      v16 = v15;
    }
    else
    {
      v16 = 0;
    }
    v17 = ***(_QWORD ***)this;
    v35 = this;
    v18 = *(_DWORD *)(v17 + 2520);
    if (v18)
    {
      v19 = *(_QWORD *)(v17 + 2504);
      v20 = v18 - 1;
      v21 = v20 & ((this >> 4) ^ (this >> 9));
      result = (_QWORD *)(v19 + 24 * v21);
      v22 = *result;
      if ((llvm::GlobalObject *)*result == this)
      {
LABEL_13:
        result[1] = v14;
        result[2] = v16;
        *((_DWORD *)this + 8) = *((_DWORD *)this + 8) & 0xFFBFFFFF | ((v16 != 0) << 22);
        return result;
      }
      v27 = 0;
      v28 = 1;
      while (v22 != -4096)
      {
        if (v27)
          v29 = 0;
        else
          v29 = v22 == -8192;
        if (v29)
          v27 = result;
        v30 = v21 + v28++;
        v21 = v30 & v20;
        result = (_QWORD *)(v19 + 24 * v21);
        v22 = *result;
        if ((llvm::GlobalObject *)*result == this)
          goto LABEL_13;
      }
      if (v27)
        v33 = v27;
      else
        v33 = result;
    }
    else
    {
      v33 = 0;
    }
    result = sub_1C53D65B8(v17 + 2504, (uint64_t)&v35, (uint64_t *)&v35, v33);
    v34 = v35;
    result[1] = 0;
    result[2] = 0;
    *result = v34;
    goto LABEL_13;
  }
  return result;
}

_QWORD *llvm::GlobalObject::setSection(_QWORD *result, _QWORD *a2, size_t a3)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  _QWORD **v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v3 = a2;
  v4 = (uint64_t)result;
  if ((*((_BYTE *)result + 34) & 0x40) != 0 || a3)
  {
    if (a3)
    {
      v3 = llvm::UniqueStringSaver::save(**(_QWORD **)*result + 2136, a2, a3);
      v6 = v5;
    }
    else
    {
      v6 = 0;
    }
    v7 = ***(_QWORD ***)v4;
    v19 = v4;
    v8 = *(_DWORD *)(v7 + 2520);
    if (v8)
    {
      v9 = *(_QWORD *)(v7 + 2504);
      v10 = v8 - 1;
      v11 = v10 & ((v4 >> 4) ^ (v4 >> 9));
      result = (_QWORD *)(v9 + 24 * v11);
      v12 = (_QWORD **)*result;
      if (*result == v4)
      {
LABEL_7:
        result[1] = v3;
        result[2] = v6;
        *(_DWORD *)(v4 + 32) = *(_DWORD *)(v4 + 32) & 0xFFBFFFFF | ((v6 != 0) << 22);
        return result;
      }
      v13 = 0;
      v14 = 1;
      while (v12 != (_QWORD **)-4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v12 == (_QWORD **)-8192;
        if (v15)
          v13 = result;
        v16 = v11 + v14++;
        v11 = v16 & v10;
        result = (_QWORD *)(v9 + 24 * v11);
        v12 = (_QWORD **)*result;
        if (*result == v4)
          goto LABEL_7;
      }
      if (v13)
        v17 = v13;
      else
        v17 = result;
    }
    else
    {
      v17 = 0;
    }
    result = sub_1C53D65B8(v7 + 2504, (uint64_t)&v19, &v19, v17);
    v18 = v19;
    result[1] = 0;
    result[2] = 0;
    *result = v18;
    goto LABEL_7;
  }
  return result;
}

uint64_t llvm::GlobalValue::hasExternalWeakLinkage(llvm::GlobalValue *this)
{
  llvm::GlobalValue *Section;
  uint64_t v3;
  uint64_t v4;
  uint64_t hasExternalWeakLinkage;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  llvm::DataLayout *v12;
  unsigned __int8 *v13;
  BOOL v14;
  const void *v15;
  unsigned int v16;

  if (!this)
    return (*((_DWORD *)this + 8) & 0xF) == 9;
  if (*((_BYTE *)this + 16) != 3)
    return (*((_DWORD *)this + 8) & 0xF) == 9;
  Section = llvm::GlobalValue::getSection(this);
  if (v4 != 12)
    return (*((_DWORD *)this + 8) & 0xF) == 9;
  if (*(_QWORD *)Section != 0x7274702E6D766C6CLL || *((_DWORD *)Section + 2) != 1752462689)
    return (*((_DWORD *)this + 8) & 0xF) == 9;
  if (*((_BYTE *)this + 16) == 3)
  {
    if ((*((_DWORD *)this + 5) & 0x7FFFFFF) == 0)
      return 1;
  }
  else if (!*((_BYTE *)this + 16)
         && *((llvm::GlobalValue **)this + 9) == (llvm::GlobalValue *)((char *)this + 72)
         && (*((_BYTE *)this + 34) & 0x80) == 0)
  {
    return 1;
  }
  v8 = *((_QWORD *)this - 4);
  v9 = *(_DWORD *)(v8 + 20);
  if ((v9 & 0x40000000) != 0)
    v10 = *(uint64_t **)(v8 - 8);
  else
    v10 = (uint64_t *)(v8 - 32 * (v9 & 0x7FFFFFF));
  v11 = *v10;
  v16 = 64;
  v15 = 0;
  v12 = (llvm::DataLayout *)(*((_QWORD *)this + 5) + 272);
  hasExternalWeakLinkage = 1;
  v13 = (unsigned __int8 *)llvm::Value::stripAndAccumulateConstantOffsets(v11, v12, &v15, 1, 0, 0, v3);
  if (v13)
    v14 = v13[16] > 3u;
  else
    v14 = 1;
  if (!v14)
    hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v13);
  if (v16 >= 0x41 && v15)
    MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
  return hasExternalWeakLinkage;
}

void llvm::GlobalValue::getGlobalIdentifier(void *__src@<X3>, size_t __len@<X4>, _BYTE *a3@<X0>, uint64_t a4@<X1>, int a5@<W2>, std::string *a6@<X8>)
{
  BOOL v7;
  uint64_t v8;
  const void *v9;
  size_t v10;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  std::string *p_dst;
  std::string *v18;
  size_t v19;
  size_t v20;
  std::string *v21;
  std::string::size_type v22;
  void **v23;
  std::string::size_type v24;
  std::string *v25;
  std::string __dst;
  void *__p[2];
  uint64_t v28;

  if (a4)
    v7 = *a3 == 1;
  else
    v7 = 0;
  v8 = v7;
  if (v7)
    v9 = a3 + 1;
  else
    v9 = a3;
  v10 = a4 - v8;
  if ((unint64_t)(a4 - v8) > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_41;
  if (v10 >= 0x17)
  {
    v15 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v15 = v10 | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    a6->__r_.__value_.__l.__size_ = v10;
    a6->__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
    a6->__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
    goto LABEL_17;
  }
  *((_BYTE *)&a6->__r_.__value_.__s + 23) = v10;
  v14 = a6;
  if (a4 != v8)
LABEL_17:
    memmove(v14, v9, v10);
  *((_BYTE *)v14 + v10) = 0;
  if ((a5 - 7) > 1)
    return;
  if (!__len)
  {
    v18 = std::string::insert(a6, 0, "<unknown>:");
    std::string::operator=(a6, v18);
    return;
  }
  if (__src)
  {
    if (__len <= 0x7FFFFFFFFFFFFFF7)
    {
      if (__len >= 0x17)
      {
        v19 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((__len | 7) != 0x17)
          v19 = __len | 7;
        v20 = v19 + 1;
        p_dst = (std::string *)operator new(v19 + 1);
        __dst.__r_.__value_.__l.__size_ = __len;
        __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len;
        p_dst = &__dst;
      }
      memmove(p_dst, __src, __len);
      p_dst->__r_.__value_.__s.__data_[__len] = 0;
      goto LABEL_30;
    }
LABEL_41:
    abort();
  }
  memset(&__dst, 0, sizeof(__dst));
LABEL_30:
  v21 = std::string::append(&__dst, ":");
  v22 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v28 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (v28 >= 0)
    v23 = __p;
  else
    v23 = (void **)__p[0];
  if (v28 >= 0)
    v24 = HIBYTE(v28) & 0x7F;
  else
    v24 = (std::string::size_type)__p[1];
  v25 = std::string::insert(a6, 0, (const std::string::value_type *)v23, v24);
  std::string::operator=(a6, v25);
  if (SHIBYTE(v28) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

llvm::GlobalObject *llvm::GlobalObject::getSectionImpl(llvm::GlobalObject *this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  llvm::GlobalObject **v6;
  llvm::GlobalObject *v7;
  llvm::GlobalObject **v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  llvm::GlobalObject **v13;
  llvm::GlobalObject *v14;
  llvm::GlobalObject *v15;

  v1 = ***(_QWORD ***)this;
  v15 = this;
  v2 = *(_DWORD *)(v1 + 2520);
  if (!v2)
  {
    v13 = 0;
LABEL_16:
    v6 = (llvm::GlobalObject **)sub_1C53D65B8(v1 + 2504, (uint64_t)&v15, (uint64_t *)&v15, v13);
    v14 = v15;
    v6[1] = 0;
    v6[2] = 0;
    *v6 = v14;
    return v6[1];
  }
  v3 = *(_QWORD *)(v1 + 2504);
  v4 = v2 - 1;
  v5 = (v2 - 1) & ((this >> 4) ^ (this >> 9));
  v6 = (llvm::GlobalObject **)(v3 + 24 * v5);
  v7 = *v6;
  if (*v6 != this)
  {
    v9 = 0;
    v10 = 1;
    while (v7 != (llvm::GlobalObject *)-4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v7 == (llvm::GlobalObject *)-8192;
      if (v11)
        v9 = v6;
      v12 = v5 + v10++;
      v5 = v12 & v4;
      v6 = (llvm::GlobalObject **)(v3 + 24 * (v12 & v4));
      v7 = *v6;
      if (*v6 == this)
        return v6[1];
    }
    if (v9)
      v13 = v9;
    else
      v13 = v6;
    goto LABEL_16;
  }
  return v6[1];
}

BOOL llvm::GlobalObject::canIncreaseAlignment(llvm::GlobalObject *this)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  _QWORD v7[4];
  __int16 v8;
  void *__p;
  char v10;
  int v11;

  if ((sub_1C53D6560((uint64_t)this) & 1) != 0)
    return 0;
  v2 = *((_DWORD *)this + 8);
  v3 = (v2 & 0xF) - 2;
  if (v3 < 9 && ((0x18Fu >> v3) & 1) != 0)
    return 0;
  if ((v2 & 0x400000) != 0 && (v2 & 0x3F0000) != 0)
    return 0;
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    v8 = 260;
    v7[0] = v4 + 216;
    llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)v7);
    v5 = v11;
    if (v10 < 0)
      operator delete(__p);
    if (v5 != 3)
      return 1;
    v2 = *((_DWORD *)this + 8);
  }
  return (v2 & 0x4000) != 0;
}

uint64_t llvm::GlobalValue::getAliaseeObject(llvm::GlobalValue *this)
{
  uint64_t v1;
  _QWORD v3[2];
  int v4;

  v3[0] = 0;
  v3[1] = 0;
  v4 = 0;
  v1 = sub_1C53D5A28((uint64_t)this, (uint64_t)v3);
  MEMORY[0x1CAA32FB4](v3[0], 8);
  return v1;
}

uint64_t sub_1C53D5A28(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[31];

  v2 = result;
  v3 = *(unsigned __int8 *)(result + 16);
  if (v3 <= 3 && v3 != 1)
    return result;
  if (v3 == 1)
    v6 = result;
  else
    v6 = 0;
  v11 = v6;
  if (v6)
  {
    sub_1C614F72C(a2, &v11, (uint64_t)v12);
    if (v12[16])
    {
      v8 = *(_QWORD *)(v11 - 32);
      return sub_1C53D5A28(v8, a2);
    }
    v3 = *(unsigned __int8 *)(v2 + 16);
  }
  if (v3 != 5)
    return 0;
  result = 0;
  v7 = *(unsigned __int16 *)(v2 + 18);
  if (v7 > 0x2E)
  {
    if (v7 - 47 >= 3)
      return result;
    goto LABEL_17;
  }
  if (v7 != 13)
  {
    if (v7 != 15)
    {
      if (v7 != 34)
        return result;
      goto LABEL_17;
    }
    if (sub_1C53D5A28(*(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 32), a2))
      return 0;
LABEL_17:
    v8 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
    return sub_1C53D5A28(v8, a2);
  }
  v9 = sub_1C53D5A28(*(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF)), a2);
  result = sub_1C53D5A28(*(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 32), a2);
  if (result)
    v10 = 0;
  else
    v10 = v9;
  if (v9)
    return v10;
  return result;
}

BOOL llvm::GlobalValue::isAbsoluteSymbolRef(llvm::GlobalValue *this)
{
  unsigned int v1;
  BOOL v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  llvm::GlobalValue **v8;
  llvm::GlobalValue *v9;
  llvm::GlobalValue **v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _BOOL8 result;
  llvm::GlobalValue **v18;
  llvm::GlobalValue *v19;
  llvm::GlobalValue *v20;

  v1 = *((unsigned __int8 *)this + 16);
  v2 = v1 > 3 || v1 == 1;
  if (v2 || (*((_BYTE *)this + 23) & 0x20) == 0)
    return 0;
  v3 = ***(_QWORD ***)this;
  v20 = this;
  v4 = *(_DWORD *)(v3 + 2496);
  if (v4)
  {
    v5 = *(_QWORD *)(v3 + 2480);
    v6 = v4 - 1;
    v7 = (v4 - 1) & ((this >> 4) ^ (this >> 9));
    v8 = (llvm::GlobalValue **)(v5 + 40 * v7);
    v9 = *v8;
    if (*v8 == this)
      goto LABEL_16;
    v10 = 0;
    v11 = 1;
    while (v9 != (llvm::GlobalValue *)-4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v9 == (llvm::GlobalValue *)-8192;
      if (v12)
        v10 = v8;
      v13 = v7 + v11++;
      v7 = v13 & v6;
      v8 = (llvm::GlobalValue **)(v5 + 40 * (v13 & v6));
      v9 = *v8;
      if (*v8 == this)
        goto LABEL_16;
    }
    if (v10)
      v18 = v10;
    else
      v18 = v8;
  }
  else
  {
    v18 = 0;
  }
  v8 = (llvm::GlobalValue **)sub_1C541AB24(v3 + 2480, (uint64_t)&v20, (uint64_t *)&v20, v18);
  v19 = v20;
  v8[3] = 0;
  v8[4] = 0;
  *v8 = v19;
  v8[1] = (llvm::GlobalValue *)(v8 + 3);
  v8[2] = (llvm::GlobalValue *)0x100000000;
LABEL_16:
  v14 = *((unsigned int *)v8 + 4);
  if (!(_DWORD)v14)
    return 0;
  v15 = (_QWORD *)((char *)v8[1] + 8);
  v16 = 16 * v14;
  while (*((_DWORD *)v15 - 2) != 21)
  {
    result = 0;
    v15 += 2;
    v16 -= 16;
    if (!v16)
      return result;
  }
  return *v15 != 0;
}

uint64_t ***llvm::GlobalValue::getAbsoluteSymbolRange@<X0>(uint64_t ***this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t ***v21;
  int v22;
  uint64_t v23;
  int v24;

  v3 = *((unsigned __int8 *)this + 16);
  v4 = v3 > 3 || v3 == 1;
  if (v4 || (*((_BYTE *)this + 23) & 0x20) == 0)
  {
LABEL_20:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    return this;
  }
  v5 = ***this;
  v21 = this;
  v6 = *(_DWORD *)(v5 + 2496);
  if (!v6)
  {
    v19 = 0;
LABEL_26:
    this = (uint64_t ***)sub_1C541AB24(v5 + 2480, (uint64_t)&v21, (uint64_t *)&v21, v19);
    v10 = (uint64_t)this;
    v20 = (uint64_t)v21;
    this[3] = 0;
    this[4] = 0;
    *this = (uint64_t **)v20;
    this[1] = (uint64_t **)(this + 3);
    this[2] = (uint64_t **)0x100000000;
    goto LABEL_16;
  }
  v7 = *(_QWORD *)(v5 + 2480);
  v8 = v6 - 1;
  v9 = (v6 - 1) & ((this >> 4) ^ (this >> 9));
  v10 = v7 + 40 * v9;
  v11 = *(_QWORD *)v10;
  if (*(uint64_t ****)v10 != this)
  {
    v12 = 0;
    v13 = 1;
    while (v11 != -4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == -8192;
      if (v14)
        v12 = (_QWORD *)v10;
      v15 = v9 + v13++;
      v9 = v15 & v8;
      v10 = v7 + 40 * (v15 & v8);
      v11 = *(_QWORD *)v10;
      if (*(uint64_t ****)v10 == this)
        goto LABEL_16;
    }
    if (v12)
      v19 = v12;
    else
      v19 = (_QWORD *)v10;
    goto LABEL_26;
  }
LABEL_16:
  v16 = *(unsigned int *)(v10 + 16);
  if (!(_DWORD)v16)
    goto LABEL_20;
  v17 = (uint64_t *)(*(_QWORD *)(v10 + 8) + 8);
  v18 = 16 * v16;
  while (*((_DWORD *)v17 - 2) != 21)
  {
    v17 += 2;
    v18 -= 16;
    if (!v18)
      goto LABEL_20;
  }
  this = (uint64_t ***)*v17;
  if (!*v17)
    goto LABEL_20;
  this = (uint64_t ***)llvm::getConstantRangeFromMetadata((uint64_t)this, (uint64_t)&v21);
  *(_DWORD *)(a2 + 8) = v22;
  *(_QWORD *)a2 = v21;
  *(_DWORD *)(a2 + 24) = v24;
  *(_QWORD *)(a2 + 16) = v23;
  *(_BYTE *)(a2 + 32) = 1;
  return this;
}

BOOL llvm::GlobalValue::canBeOmittedFromSymbolTable(llvm::GlobalValue *this)
{
  int v1;
  int v2;

  v1 = *((_DWORD *)this + 8);
  if ((v1 & 0xF) != 3)
    return 0;
  v2 = v1 & 0xC0;
  if (v2 == 128)
    return 1;
  return (*((_BYTE *)this + 16) != 3 || (*((_BYTE *)this + 80) & 1) != 0) && v2 != 0;
}

uint64_t llvm::GlobalVariable::GlobalVariable(uint64_t a1, llvm::PointerType *a2, char a3, char a4, uint64_t a5, uint64_t a6, char a7, llvm::Type *a8, char a9)
{
  _BOOL4 v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;

  v16 = a5 != 0;
  *(_QWORD *)a1 = llvm::PointerType::get(a2, a8);
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(_DWORD *)(a1 + 20) & 0xC0000000 | v16;
  *(_DWORD *)(a1 + 16) = 3;
  *(_DWORD *)(a1 + 20) = v17;
  *(_QWORD *)(a1 + 24) = a2;
  v18 = *(unsigned __int16 *)(a1 + 34);
  *(_QWORD *)(a1 + 40) = 0;
  v19 = a4 & 0xF | (v18 << 16);
  if ((a4 & 0xFu) - 7 < 2)
    v19 |= 0x4000u;
  *(_DWORD *)(a1 + 32) = v19;
  *(_DWORD *)(a1 + 36) = 0;
  llvm::Value::setName((uint64_t ***)a1, a6);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v20 = *(_DWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  if (a9)
    v21 = 2;
  else
    v21 = 0;
  *(_BYTE *)(a1 + 80) = v21 | a3 | *(_BYTE *)(a1 + 80) & 0xFC;
  *(_DWORD *)(a1 + 32) = v20 & 0xE3FF | ((a7 & 7) << 10);
  if (a5)
  {
    if (*(_QWORD *)(a1 - 32))
    {
      **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
      v22 = *(_QWORD *)(a1 - 24);
      if (v22)
        *(_QWORD *)(v22 + 16) = *(_QWORD *)(a1 - 16);
    }
    *(_QWORD *)(a1 - 32) = a5;
    v25 = *(_QWORD *)(a5 + 8);
    v24 = (_QWORD *)(a5 + 8);
    v23 = v25;
    *(_QWORD *)(a1 - 24) = v25;
    if (v25)
      *(_QWORD *)(v23 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v24;
    *v24 = a1 - 32;
  }
  return a1;
}

{
  return llvm::GlobalVariable::GlobalVariable(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t llvm::GlobalVariable::GlobalVariable(uint64_t a1, uint64_t a2, llvm::PointerType *a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, char a11)
{
  _BOOL4 v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  llvm::ValueSymbolTable *v32;
  uint64_t v33;

  v18 = a6 != 0;
  if ((a10 & 0xFF00000000) != 0)
    v19 = a10;
  else
    v19 = *(unsigned int *)(a2 + 288);
  *(_QWORD *)a1 = llvm::PointerType::get(a3, (llvm::Type *)v19);
  *(_QWORD *)(a1 + 8) = 0;
  v20 = *(_DWORD *)(a1 + 20) & 0xC0000000 | v18;
  *(_DWORD *)(a1 + 16) = 3;
  *(_DWORD *)(a1 + 20) = v20;
  *(_QWORD *)(a1 + 24) = a3;
  v21 = *(unsigned __int16 *)(a1 + 34);
  *(_QWORD *)(a1 + 40) = 0;
  v22 = a5 & 0xF | (v21 << 16);
  if ((a5 & 0xFu) - 7 < 2)
    v22 |= 0x4000u;
  *(_DWORD *)(a1 + 32) = v22;
  *(_DWORD *)(a1 + 36) = 0;
  llvm::Value::setName((uint64_t ***)a1, a7);
  *(_QWORD *)(a1 + 56) = 0;
  v23 = a1 + 56;
  *(_QWORD *)(a1 + 48) = 0;
  v24 = *(_DWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  if (a11)
    v25 = 2;
  else
    v25 = 0;
  *(_BYTE *)(a1 + 80) = v25 | a4 | *(_BYTE *)(a1 + 80) & 0xFC;
  *(_DWORD *)(a1 + 32) = v24 & 0xE3FF | ((a9 & 7) << 10);
  if (a6)
  {
    if (*(_QWORD *)(a1 - 32))
    {
      **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
      v26 = *(_QWORD *)(a1 - 24);
      if (v26)
        *(_QWORD *)(v26 + 16) = *(_QWORD *)(a1 - 16);
    }
    *(_QWORD *)(a1 - 32) = a6;
    v29 = *(_QWORD *)(a6 + 8);
    v28 = (_QWORD *)(a6 + 8);
    v27 = v29;
    *(_QWORD *)(a1 - 24) = v29;
    if (v29)
      *(_QWORD *)(v27 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v28;
    *v28 = a1 - 32;
  }
  if (a8)
  {
    v30 = *(_QWORD *)(a8 + 40) + 8;
    v31 = (uint64_t *)(a8 + 56);
  }
  else
  {
    v30 = a2 + 8;
    v31 = (uint64_t *)(a2 + 8);
  }
  *(_QWORD *)(a1 + 40) = v30 - 8;
  if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
  {
    v32 = *(llvm::ValueSymbolTable **)(v30 + 104);
    if (v32)
      llvm::ValueSymbolTable::reinsertValue(v32, (llvm::Value *)a1);
  }
  v33 = *v31;
  *(_QWORD *)(a1 + 56) = *v31;
  *(_QWORD *)(a1 + 64) = v31;
  *(_QWORD *)(v33 + 8) = v23;
  *v31 = v23;
  return a1;
}

{
  return llvm::GlobalVariable::GlobalVariable(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t llvm::GlobalVariable::setInitializer(uint64_t this, llvm::Constant *a2)
{
  BOOL v2;
  char v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (this)
    v2 = *(_BYTE *)(this + 16) == 3;
  else
    v2 = 0;
  v3 = !v2;
  if (a2)
  {
    if ((v3 & 1) != 0)
    {
      if (*(_BYTE *)(this + 16) || *(_QWORD *)(this + 72) != this + 72 || (*(_BYTE *)(this + 34) & 0x80) != 0)
        goto LABEL_20;
      v4 = *(_DWORD *)(this + 20);
    }
    else
    {
      v4 = *(_DWORD *)(this + 20);
      if ((v4 & 0x7FFFFFF) != 0)
        goto LABEL_20;
    }
    *(_DWORD *)(this + 20) = v4 & 0xF8000000 | 1;
LABEL_20:
    if (*(_QWORD *)(this - 32))
    {
      **(_QWORD **)(this - 16) = *(_QWORD *)(this - 24);
      v5 = *(_QWORD *)(this - 24);
      if (v5)
        *(_QWORD *)(v5 + 16) = *(_QWORD *)(this - 16);
    }
    *(_QWORD *)(this - 32) = a2;
    v8 = *((_QWORD *)a2 + 1);
    v6 = (_QWORD *)((char *)a2 + 8);
    v7 = v8;
    *(_QWORD *)(this - 24) = v8;
    if (v8)
      *(_QWORD *)(v7 + 16) = this - 24;
    *(_QWORD *)(this - 16) = v6;
    *v6 = this - 32;
    return this;
  }
  if ((v3 & 1) != 0)
  {
    if (!*(_BYTE *)(this + 16) && *(_QWORD *)(this + 72) == this + 72 && (*(_BYTE *)(this + 34) & 0x80) == 0)
      return this;
  }
  else if ((*(_DWORD *)(this + 20) & 0x7FFFFFF) == 0)
  {
    return this;
  }
  if (*(_QWORD *)(this - 32))
  {
    **(_QWORD **)(this - 16) = *(_QWORD *)(this - 24);
    v9 = *(_QWORD *)(this - 24);
    if (v9)
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(this - 16);
  }
  *(_QWORD *)(this - 32) = 0;
  *(_DWORD *)(this + 20) &= 0xF8000000;
  return this;
}

_QWORD *llvm::GlobalVariable::copyAttributesFrom(llvm::GlobalVariable *this, const llvm::GlobalVariable *a2)
{
  _QWORD *result;

  result = llvm::GlobalObject::copyAttributesFrom(this, a2);
  *((_BYTE *)this + 80) = *((_BYTE *)this + 80) & 0xFD | *((_BYTE *)a2 + 80) & 2;
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  return result;
}

void llvm::GlobalVariable::dropAllReferences(llvm::GlobalVariable *this)
{
  int v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD **v6;
  uint64_t v7;
  int32x2_t **v8;
  int32x2_t *v9;
  __int32 v10;
  int32x2_t v11;
  __int32 v12;
  unsigned int v13;
  uint64_t v14;
  llvm::GlobalVariable *v15;
  char *v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  unsigned __int8 *v22;

  v2 = *((_DWORD *)this + 5);
  if ((v2 & 0x40000000) != 0)
  {
    v4 = (char *)*((_QWORD *)this - 1);
    v3 = v2 & 0x7FFFFFF;
  }
  else
  {
    v3 = v2 & 0x7FFFFFF;
    v4 = (char *)this - 32 * v3;
  }
  if (v3)
  {
    v5 = 32 * v3;
    v6 = (_QWORD **)(v4 + 16);
    do
    {
      if (*(v6 - 2))
      {
        **v6 = *(v6 - 1);
        v7 = (uint64_t)*(v6 - 1);
        if (v7)
          *(_QWORD *)(v7 + 16) = *v6;
      }
      *(v6 - 2) = 0;
      v6 += 4;
      v5 -= 32;
    }
    while (v5);
    v2 = *((_DWORD *)this + 5);
  }
  if ((v2 & 0x20000000) != 0)
  {
    v8 = **(int32x2_t ****)this;
    v9 = *v8;
    v10 = (*v8)[312].i32[0];
    if (v10)
    {
      v11 = v9[310];
      v12 = v10 - 1;
      v13 = v12 & ((this >> 4) ^ (this >> 9));
      v14 = *(_QWORD *)&v11 + 40 * v13;
      v15 = *(llvm::GlobalVariable **)v14;
      if (*(llvm::GlobalVariable **)v14 == this)
      {
LABEL_13:
        v16 = *(char **)(v14 + 8);
        v17 = *(unsigned int *)(v14 + 16);
        if ((_DWORD)v17)
        {
          v20 = v16 - 8;
          v21 = 16 * v17;
          do
          {
            v22 = *(unsigned __int8 **)&v20[v21];
            if (v22)
              llvm::MetadataTracking::untrack((uint64_t)&v20[v21], v22);
            v21 -= 16;
          }
          while (v21);
          v16 = *(char **)(v14 + 8);
        }
        if (v16 != (char *)(v14 + 24))
          free(v16);
        *(_QWORD *)v14 = -8192;
        v9[311] = vadd_s32(v9[311], (int32x2_t)0x1FFFFFFFFLL);
        v2 = *((_DWORD *)this + 5);
      }
      else
      {
        v18 = 1;
        while (v15 != (llvm::GlobalVariable *)-4096)
        {
          v19 = v13 + v18++;
          v13 = v19 & v12;
          v14 = *(_QWORD *)&v11 + 40 * v13;
          v15 = *(llvm::GlobalVariable **)v14;
          if (*(llvm::GlobalVariable **)v14 == this)
            goto LABEL_13;
        }
      }
    }
    *((_DWORD *)this + 5) = v2 & 0xDFFFFFFF;
  }
}

uint64_t sub_1C53D6438(uint64_t a1, llvm::PointerType *a2, char a3, char a4, uint64_t a5, llvm::Type *a6)
{
  int v11;
  int v12;

  *(_QWORD *)a1 = llvm::PointerType::get(a2, a6);
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_QWORD *)(a1 + 24) = a2;
  v11 = *(unsigned __int16 *)(a1 + 34);
  *(_QWORD *)(a1 + 40) = 0;
  v12 = a4 & 0xF | (v11 << 16);
  if ((a4 & 0xFu) - 7 < 2)
    v12 |= 0x4000u;
  *(_DWORD *)(a1 + 32) = v12;
  *(_DWORD *)(a1 + 36) = 0;
  llvm::Value::setName((uint64_t ***)a1, a5);
  return a1;
}

uint64_t llvm::GlobalAlias::create(llvm::PointerType *a1, llvm::Type *a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _DWORD *v11;

  v10 = *(_QWORD *)(a5 + 40);
  v11 = operator new(0x60uLL);
  v11[13] = v11[13] & 0x38000000 | 1;
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = v11 + 8;
  return llvm::GlobalAlias::GlobalAlias((uint64_t)(v11 + 8), a1, a2, a3, a4, a5, v10);
}

{
  _DWORD *v10;

  v10 = operator new(0x60uLL);
  v10[13] = v10[13] & 0x38000000 | 1;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *((_QWORD *)v10 + 3) = v10 + 8;
  return llvm::GlobalAlias::GlobalAlias((uint64_t)(v10 + 8), a1, a2, a3, a4, 0, a5);
}

uint64_t sub_1C53D6560(uint64_t a1)
{
  int v1;
  _BOOL4 v3;

  v1 = *(_DWORD *)(a1 + 32);
  if ((v1 & 0xF) == 1)
    return 1;
  if (*(_BYTE *)(a1 + 16))
  {
    return *(_BYTE *)(a1 + 16) == 3 && (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) == 0;
  }
  else
  {
    v3 = (v1 & 0x800000) == 0;
    return *(_QWORD *)(a1 + 72) == a1 + 72 && v3;
  }
}

_QWORD *sub_1C53D65B8(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C53D66EC(a1, v7);
      v17 = 0;
      sub_1C4E0953C((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    v8 = *a4;
    goto LABEL_5;
  }
  sub_1C53D66EC(a1, 2 * v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (_QWORD *)(*(_QWORD *)a1 + 24 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 24 * v11);
      v12 = *a4;
      if (v8 == *a4)
        goto LABEL_5;
    }
    if (v13)
      a4 = v13;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C53D66EC(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C53D67B0(a1, v4, &v4[3 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    do
    {
      *result = -4096;
      result += 3;
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C53D67B0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  unsigned int v14;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD **)result;
    v5 = 24 * v3;
    do
    {
      *v4 = -4096;
      v4 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 3)
  {
    v6 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v7 = *(_DWORD *)(result + 16) - 1;
      v8 = v7 & ((v6 >> 4) ^ (v6 >> 9));
      v9 = *(_QWORD *)result + 24 * v8;
      v10 = *(_QWORD *)v9;
      if (v6 != *(_QWORD *)v9)
      {
        v11 = 0;
        v12 = 1;
        while (v10 != -4096)
        {
          if (v11)
            v13 = 0;
          else
            v13 = v10 == -8192;
          if (v13)
            v11 = v9;
          v14 = v8 + v12++;
          v8 = v14 & v7;
          v9 = *(_QWORD *)result + 24 * (v14 & v7);
          v10 = *(_QWORD *)v9;
          if (v6 == *(_QWORD *)v9)
            goto LABEL_7;
        }
        if (v11)
          v9 = v11;
      }
LABEL_7:
      *(_QWORD *)v9 = v6;
      *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + 1);
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

uint64_t llvm::IRBuilderBase::getCurrentFunctionReturnType(llvm::IRBuilderBase *this)
{
  return **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 56) + 24) + 16);
}

unsigned __int8 *llvm::IRBuilderBase::getCastedInt8PtrValue(llvm::IRBuilderBase *this, llvm::Value *a2)
{
  unsigned __int8 *v2;
  llvm::PointerType *v4;
  llvm::PointerType *v5;
  BOOL v6;
  uint64_t v7;
  _BYTE v9[32];
  __int16 v10;

  v2 = (unsigned __int8 *)a2;
  v4 = (llvm::PointerType *)(**((_QWORD **)this + 8) + 1912);
  v5 = *(llvm::PointerType **)(*(_QWORD *)a2 + 24);
  if (v5)
    v6 = v5 == v4;
  else
    v6 = 1;
  if (!v6)
  {
    v7 = llvm::PointerType::get(v4, (llvm::Type *)(*(_DWORD *)(*(_QWORD *)a2 + 8) >> 8));
    v10 = 257;
    return sub_1C4773E38((uint64_t *)this, 49, v2, v7, (uint64_t)v9);
  }
  return v2;
}

unsigned int *llvm::IRBuilderBase::getCurrentDebugLocation@<X0>(unsigned int *this@<X0>, unsigned __int8 **a2@<X8>)
{
  uint64_t v2;
  unsigned __int8 **v3;
  uint64_t v4;
  unsigned __int8 *v5;

  v2 = this[2];
  if ((_DWORD)v2)
  {
    v3 = (unsigned __int8 **)(*(_QWORD *)this + 8);
    v4 = 16 * v2;
    while (*((_DWORD *)v3 - 2))
    {
      v3 += 2;
      v4 -= 16;
      if (!v4)
        goto LABEL_5;
    }
    v5 = *v3;
    *a2 = *v3;
    if (v5)
      return (unsigned int *)llvm::MetadataTracking::track((uint64_t)a2, v5, 2);
  }
  else
  {
LABEL_5:
    *a2 = 0;
  }
  return this;
}

unsigned int *llvm::IRBuilderBase::SetInstDebugLocation(unsigned int *this, llvm::Instruction *a2)
{
  uint64_t v2;
  unsigned __int8 **v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;

  v2 = this[2];
  if ((_DWORD)v2)
  {
    v4 = (unsigned __int8 **)(*(_QWORD *)this + 8);
    v5 = 16 * v2;
    while (*((_DWORD *)v4 - 2))
    {
      v4 += 2;
      v5 -= 16;
      if (!v5)
        return this;
    }
    v6 = *v4;
    v9 = v6;
    if (v6)
      this = (unsigned int *)llvm::MetadataTracking::track((uint64_t)&v9, v6, 2);
    v7 = (unsigned __int8 **)((char *)a2 + 48);
    if (&v9 == v7)
    {
      if (v9)
        return (unsigned int *)llvm::MetadataTracking::untrack((uint64_t)&v9, v9);
    }
    else
    {
      if (*v7)
        this = (unsigned int *)llvm::MetadataTracking::untrack((uint64_t)v7, *v7);
      v8 = v9;
      *v7 = v9;
      if (v8)
        return (unsigned int *)llvm::MetadataTracking::retrack((uint64_t)&v9, v8, (uint64_t)v7);
    }
  }
  return this;
}

uint64_t llvm::IRBuilderBase::CreateVScale(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD **v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t Declaration;
  uint64_t **v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15[4];
  __int16 v16;
  uint64_t v17;

  v4 = a2;
  v17 = *MEMORY[0x1E0C80C00];
  v6 = (_QWORD **)(a2 + 24);
  v7 = *(_DWORD *)(a2 + 32);
  if (v7 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(a2 + 24)) == v7)
      return v4;
  }
  else if (!*v6)
  {
    return v4;
  }
  v8 = *(uint64_t **)(*(_QWORD *)(a1[6] + 56) + 40);
  v15[0] = *(_QWORD *)v4;
  Declaration = llvm::Intrinsic::getDeclaration(v8, 382, v15, 1);
  if (Declaration)
    v10 = *(uint64_t ***)(Declaration + 24);
  else
    v10 = 0;
  v11 = sub_1C5062DD8(a1, v10, Declaration, 0, 0, 0, 0, a3, 0);
  v12 = *(_DWORD *)(v4 + 32);
  if (v12 > 0x40)
    v13 = **v6;
  else
    v13 = (uint64_t)((_QWORD)*v6 << -(char)v12) >> -(char)v12;
  if (v13 != 1)
  {
    v16 = 257;
    return sub_1C4EC4040((uint64_t)a1, v11, v4, (uint64_t)v15, 0, 0);
  }
  return v11;
}

unsigned __int8 *llvm::IRBuilderBase::CreateStepVector(uint64_t a1, llvm::ConstantInt ***this, uint64_t a3)
{
  llvm::ConstantInt *v6;
  llvm::ConstantInt *v7;
  unsigned __int8 *Intrinsic;
  uint64_t v9;
  uint64_t i;
  llvm::Value **v11;
  uint64_t v12;
  uint64_t v13;
  llvm::FixedVectorType ***v14;
  _QWORD **v15;
  llvm::ConstantInt *v17;
  void *v18;
  uint64_t v19;
  _WORD v20[32];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = (llvm::ConstantInt *)this;
  if (((_DWORD)this[1] & 0xFE) == 0x12)
    v6 = *this[2];
  if (*((_DWORD *)this + 2) == 19)
  {
    if ((*((_DWORD *)v6 + 2) & 0xFE) == 0x12)
      v6 = (llvm::ConstantInt *)**((_QWORD **)v6 + 2);
    v7 = (llvm::ConstantInt *)this;
    if ((llvm::Type::getPrimitiveSizeInBits(v6) & 0xFFFFFFF8) == 0)
    {
      llvm::ScalableVectorType::get((uint64_t **)(**(_QWORD **)(a1 + 64) + 1912), (llvm::Type *)*((unsigned int *)this + 8));
      v7 = v17;
    }
    v18 = v7;
    Intrinsic = (unsigned __int8 *)llvm::IRBuilderBase::CreateIntrinsic((uint64_t *)a1, 130, (uint64_t *)&v18, 1, 0, 0, 0, a3);
    if (v7 != (llvm::ConstantInt *)this)
    {
      v20[8] = 257;
      return sub_1C4773E38((uint64_t *)a1, 38, Intrinsic, (uint64_t)this, (uint64_t)&v18);
    }
  }
  else
  {
    v9 = *((unsigned int *)this + 8);
    v18 = v20;
    v19 = 0x800000000;
    if ((_DWORD)v9)
    {
      for (i = 0; i != v9; ++i)
      {
        v11 = llvm::ConstantInt::get(v6, i, 0);
        v12 = v19;
        if (v19 >= (unint64_t)HIDWORD(v19))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, (uint64_t)v20, v19 + 1, 8);
          v12 = v19;
        }
        *((_QWORD *)v18 + v12) = v11;
        v13 = (v19 + 1);
        LODWORD(v19) = v19 + 1;
      }
      v14 = (llvm::FixedVectorType ***)v18;
    }
    else
    {
      v13 = 0;
      v14 = (llvm::FixedVectorType ***)v20;
    }
    Intrinsic = (unsigned __int8 *)llvm::ConstantVector::getImpl(v14, (llvm::Type *)v13);
    if (!Intrinsic)
    {
      llvm::FixedVectorType::get(**v14, (llvm::Type *)v13);
      Intrinsic = (unsigned __int8 *)sub_1C537B3A4(**v15 + 1288, (uint64_t)v15, v14, v13);
    }
    if (v18 != v20)
      free(v18);
  }
  return Intrinsic;
}

uint64_t llvm::IRBuilderBase::CreateIntrinsic(uint64_t *a1, int a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t Declaration;
  uint64_t **v14;
  uint64_t result;

  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(a1[6] + 56) + 40), a2, a3, a4);
  if (Declaration)
    v14 = *(uint64_t ***)(Declaration + 24);
  else
    v14 = 0;
  result = sub_1C5062DD8(a1, v14, Declaration, a5, a6, 0, 0, a8, 0);
  if (a7)
    *(_BYTE *)(result + 17) = *(_BYTE *)(a7 + 17) & 0xFE | *(_BYTE *)(result + 17) & 1;
  return result;
}

llvm::Value *llvm::IRBuilderBase::CreateMemSet(uint64_t a1, llvm::Value *a2, uint64_t a3, uint64_t *a4, __int16 a5, unsigned int a6, llvm::MDNode *a7, llvm::MDNode *a8, llvm::MDNode *a9)
{
  const llvm::APInt *v16;
  unsigned __int8 *CastedInt8PtrValue;
  uint64_t v18;
  uint64_t v19;
  llvm::ConstantInt *v20;
  unint64_t v21;
  int v22;
  llvm::ValueHandleBase *v23;
  uint64_t v24;
  uint64_t Declaration;
  uint64_t **v26;
  uint64_t v27;
  llvm::Value *v28;
  unint64_t v29;
  __int16 v30;
  llvm::ConstantInt *v32;
  llvm::ValueHandleBase *v33;
  uint64_t v34;
  unsigned int v35;
  __int16 v36;
  uint64_t v37[2];
  uint64_t v38[5];

  v38[4] = *MEMORY[0x1E0C80C00];
  CastedInt8PtrValue = llvm::IRBuilderBase::getCastedInt8PtrValue((llvm::IRBuilderBase *)a1, a2);
  v38[0] = (uint64_t)CastedInt8PtrValue;
  v38[1] = a3;
  v38[2] = (uint64_t)a4;
  v18 = **(_QWORD **)(a1 + 64);
  v19 = a6;
  v20 = *(llvm::ConstantInt **)(v18 + 1888);
  v21 = *(unsigned int *)(v18 + 1896);
  v35 = v21 >> 8;
  if (v21 >> 8 > 0x40)
  {
    v32 = v20;
    llvm::APInt::initSlowCase((llvm::APInt *)&v34, v19, 0);
    v20 = v32;
  }
  else
  {
    if (v21 <= 0xFF)
      v22 = 0;
    else
      v22 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v21);
    v34 = v22 & a6;
  }
  v23 = llvm::ConstantInt::get(v20, (llvm::LLVMContext *)&v34, v16);
  if (v35 >= 0x41 && v34)
  {
    v33 = v23;
    MEMORY[0x1CAA32F9C](v34, 0x1000C8000313F17);
    v23 = v33;
  }
  v38[3] = (uint64_t)v23;
  v24 = *a4;
  v37[0] = *(_QWORD *)CastedInt8PtrValue;
  v37[1] = v24;
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) + 40), 199, v37, 2);
  v36 = 257;
  if (Declaration)
    v26 = *(uint64_t ***)(Declaration + 24);
  else
    v26 = 0;
  v27 = sub_1C5062DD8((uint64_t *)a1, v26, Declaration, v38, 4, 0, 0, (uint64_t)&v34, 0);
  v28 = (llvm::Value *)v27;
  if ((a5 & 0xFF00) != 0)
  {
    v29 = __clz((1 << a5)) ^ 0x13F;
    if ((a5 & 0xE0) != 0)
      v30 = 0;
    else
      v30 = v29;
    sub_1C5346BA8(v27, v30);
  }
  if (a7)
    llvm::Value::setMetadata(v28, 1, a7);
  if (a8)
    llvm::Value::setMetadata(v28, 7, a8);
  if (a9)
    llvm::Value::setMetadata(v28, 8, a9);
  return v28;
}

llvm::Value *llvm::IRBuilderBase::CreateElementUnorderedAtomicMemSet(uint64_t a1, llvm::Value *a2, uint64_t a3, uint64_t *a4, char a5, unsigned int a6, llvm::MDNode *a7, llvm::MDNode *a8, llvm::MDNode *a9)
{
  const llvm::APInt *v16;
  unsigned __int8 *CastedInt8PtrValue;
  uint64_t v18;
  uint64_t v19;
  llvm::ConstantInt *v20;
  unint64_t v21;
  int v22;
  llvm::ValueHandleBase *v23;
  uint64_t v24;
  uint64_t Declaration;
  uint64_t **v26;
  llvm::Value *v27;
  llvm::ConstantInt *v29;
  llvm::ValueHandleBase *v30;
  uint64_t v31;
  unsigned int v32;
  __int16 v33;
  uint64_t v34[2];
  uint64_t v35[5];

  v35[4] = *MEMORY[0x1E0C80C00];
  CastedInt8PtrValue = llvm::IRBuilderBase::getCastedInt8PtrValue((llvm::IRBuilderBase *)a1, a2);
  v35[0] = (uint64_t)CastedInt8PtrValue;
  v35[1] = a3;
  v35[2] = (uint64_t)a4;
  v18 = **(_QWORD **)(a1 + 64);
  v19 = a6;
  v20 = *(llvm::ConstantInt **)(v18 + 1960);
  v21 = *(unsigned int *)(v18 + 1968);
  v32 = v21 >> 8;
  if (v21 >> 8 > 0x40)
  {
    v29 = v20;
    llvm::APInt::initSlowCase((llvm::APInt *)&v31, v19, 0);
    v20 = v29;
  }
  else
  {
    if (v21 <= 0xFF)
      v22 = 0;
    else
      v22 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v21);
    v31 = v22 & a6;
  }
  v23 = llvm::ConstantInt::get(v20, (llvm::LLVMContext *)&v31, v16);
  if (v32 >= 0x41 && v31)
  {
    v30 = v23;
    MEMORY[0x1CAA32F9C](v31, 0x1000C8000313F17);
    v23 = v30;
  }
  v35[3] = (uint64_t)v23;
  v24 = *a4;
  v34[0] = *(_QWORD *)CastedInt8PtrValue;
  v34[1] = v24;
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) + 40), 200, v34, 2);
  v33 = 257;
  if (Declaration)
    v26 = *(uint64_t ***)(Declaration + 24);
  else
    v26 = 0;
  v27 = (llvm::Value *)sub_1C5062DD8((uint64_t *)a1, v26, Declaration, v35, 4, 0, 0, (uint64_t)&v31, 0);
  sub_1C509D0D0((uint64_t)v27, a5);
  if (a7)
    llvm::Value::setMetadata(v27, 1, a7);
  if (a8)
    llvm::Value::setMetadata(v27, 7, a8);
  if (a9)
    llvm::Value::setMetadata(v27, 8, a9);
  return v27;
}

llvm::Value *llvm::IRBuilderBase::CreateMemTransferInst(uint64_t a1, int a2, llvm::Value *a3, __int16 a4, llvm::Value *a5, __int16 a6, uint64_t *a7, unsigned int a8, llvm::MDNode *a9, llvm::MDNode *a10, llvm::MDNode *a11, llvm::MDNode *a12)
{
  unsigned __int8 *CastedInt8PtrValue;
  const llvm::APInt *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  llvm::ConstantInt *v24;
  unint64_t v25;
  int v26;
  llvm::ValueHandleBase *v27;
  uint64_t v28;
  uint64_t Declaration;
  uint64_t **v30;
  uint64_t v31;
  llvm::Value *v32;
  llvm::ConstantInt *v34;
  llvm::ValueHandleBase *v35;
  uint64_t v36;
  unsigned int v37;
  __int16 v38;
  uint64_t v39[3];
  uint64_t v40[5];

  v40[4] = *MEMORY[0x1E0C80C00];
  CastedInt8PtrValue = llvm::IRBuilderBase::getCastedInt8PtrValue((llvm::IRBuilderBase *)a1, a3);
  v21 = llvm::IRBuilderBase::getCastedInt8PtrValue((llvm::IRBuilderBase *)a1, a5);
  v40[0] = (uint64_t)CastedInt8PtrValue;
  v40[1] = (uint64_t)v21;
  v40[2] = (uint64_t)a7;
  v22 = **(_QWORD **)(a1 + 64);
  v23 = a8;
  v24 = *(llvm::ConstantInt **)(v22 + 1888);
  v25 = *(unsigned int *)(v22 + 1896);
  v37 = v25 >> 8;
  if (v25 >> 8 > 0x40)
  {
    v34 = v24;
    llvm::APInt::initSlowCase((llvm::APInt *)&v36, v23, 0);
    v24 = v34;
  }
  else
  {
    if (v25 <= 0xFF)
      v26 = 0;
    else
      v26 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v25);
    v36 = v26 & a8;
  }
  v27 = llvm::ConstantInt::get(v24, (llvm::LLVMContext *)&v36, v20);
  if (v37 >= 0x41 && v36)
  {
    v35 = v27;
    MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
    v27 = v35;
  }
  v40[3] = (uint64_t)v27;
  v39[0] = *(_QWORD *)CastedInt8PtrValue;
  v28 = *a7;
  v39[1] = *(_QWORD *)v21;
  v39[2] = v28;
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) + 40), a2, v39, 3);
  v38 = 257;
  if (Declaration)
    v30 = *(uint64_t ***)(Declaration + 24);
  else
    v30 = 0;
  v31 = sub_1C5062DD8((uint64_t *)a1, v30, Declaration, v40, 4, 0, 0, (uint64_t)&v36, 0);
  v32 = (llvm::Value *)v31;
  if ((a4 & 0xFF00) != 0)
    sub_1C509D0D0(v31, a4);
  if ((a6 & 0xFF00) != 0)
    sub_1C509D15C((uint64_t)v32, a6);
  if (a9)
    llvm::Value::setMetadata(v32, 1, a9);
  if (a10)
    llvm::Value::setMetadata(v32, 5, a10);
  if (a11)
    llvm::Value::setMetadata(v32, 7, a11);
  if (a12)
    llvm::Value::setMetadata(v32, 8, a12);
  return v32;
}

uint64_t llvm::IRBuilderBase::CreateElementUnorderedAtomicMemMove(uint64_t a1, llvm::Value *a2, char a3, llvm::Value *a4, char a5, uint64_t *a6, unsigned int a7, llvm::MDNode *a8, llvm::MDNode *a9, llvm::MDNode *a10, llvm::MDNode *a11)
{
  unsigned __int8 *CastedInt8PtrValue;
  const llvm::APInt *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  llvm::ConstantInt *v23;
  unint64_t v24;
  int v25;
  llvm::ValueHandleBase *v26;
  uint64_t v27;
  uint64_t Declaration;
  uint64_t **v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  llvm::ConstantInt *v34;
  llvm::ValueHandleBase *v35;
  uint64_t v36;
  unsigned int v37;
  __int16 v38;
  uint64_t v39[3];
  uint64_t v40[5];

  v40[4] = *MEMORY[0x1E0C80C00];
  CastedInt8PtrValue = llvm::IRBuilderBase::getCastedInt8PtrValue((llvm::IRBuilderBase *)a1, a2);
  v20 = llvm::IRBuilderBase::getCastedInt8PtrValue((llvm::IRBuilderBase *)a1, a4);
  v40[0] = (uint64_t)CastedInt8PtrValue;
  v40[1] = (uint64_t)v20;
  v40[2] = (uint64_t)a6;
  v21 = **(_QWORD **)(a1 + 64);
  v22 = a7;
  v23 = *(llvm::ConstantInt **)(v21 + 1960);
  v24 = *(unsigned int *)(v21 + 1968);
  v37 = v24 >> 8;
  if (v24 >> 8 > 0x40)
  {
    v34 = v23;
    llvm::APInt::initSlowCase((llvm::APInt *)&v36, v22, 0);
    v23 = v34;
  }
  else
  {
    if (v24 <= 0xFF)
      v25 = 0;
    else
      v25 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v24);
    v36 = v25 & a7;
  }
  v26 = llvm::ConstantInt::get(v23, (llvm::LLVMContext *)&v36, v19);
  if (v37 >= 0x41 && v36)
  {
    v35 = v26;
    MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
    v26 = v35;
  }
  v40[3] = (uint64_t)v26;
  v39[0] = *(_QWORD *)CastedInt8PtrValue;
  v27 = *a6;
  v39[1] = *(_QWORD *)v20;
  v39[2] = v27;
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) + 40), 198, v39, 3);
  v38 = 257;
  if (Declaration)
    v29 = *(uint64_t ***)(Declaration + 24);
  else
    v29 = 0;
  v30 = sub_1C5062DD8((uint64_t *)a1, v29, Declaration, v40, 4, 0, 0, (uint64_t)&v36, 0);
  v31 = llvm::Attribute::get(**(uint64_t ***)v30, 74, 1 << a3);
  LODWORD(v36) = 0;
  *(_QWORD *)(v30 + 64) = llvm::AttributeList::addParamAttribute((_QWORD *)(v30 + 64), **(uint64_t ***)v30, &v36, 1, v31);
  v32 = llvm::Attribute::get(**(uint64_t ***)v30, 74, 1 << a5);
  LODWORD(v36) = 1;
  *(_QWORD *)(v30 + 64) = llvm::AttributeList::addParamAttribute((_QWORD *)(v30 + 64), **(uint64_t ***)v30, &v36, 1, v32);
  if (a8)
    llvm::Value::setMetadata((llvm::Value *)v30, 1, a8);
  if (a9)
    llvm::Value::setMetadata((llvm::Value *)v30, 5, a9);
  if (a10)
    llvm::Value::setMetadata((llvm::Value *)v30, 7, a10);
  if (a11)
    llvm::Value::setMetadata((llvm::Value *)v30, 8, a11);
  return v30;
}

uint64_t sub_1C53D7700(uint64_t *a1, int a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t Declaration;
  uint64_t **v6;
  _BYTE v8[32];
  __int16 v9;
  uint64_t v10;
  uint64_t v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)(*(_QWORD *)(a1[6] + 56) + 40);
  v10 = *a3;
  v11[0] = (uint64_t)a3;
  Declaration = llvm::Intrinsic::getDeclaration(v4, a2, &v10, 1);
  v9 = 257;
  if (Declaration)
    v6 = *(uint64_t ***)(Declaration + 24);
  else
    v6 = 0;
  return sub_1C5062DD8(a1, v6, Declaration, v11, 1, 0, 0, (uint64_t)v8, 0);
}

uint64_t llvm::IRBuilderBase::CreateLifetimeStart(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::ConstantInt *a3)
{
  unsigned __int8 *CastedInt8PtrValue;
  uint64_t *v6;
  uint64_t Declaration;
  uint64_t **v8;
  unsigned __int8 *v10;
  uint64_t v11[4];
  __int16 v12;
  uint64_t v13[3];

  v13[2] = *MEMORY[0x1E0C80C00];
  CastedInt8PtrValue = llvm::IRBuilderBase::getCastedInt8PtrValue(this, a2);
  if (!a3)
  {
    v10 = CastedInt8PtrValue;
    a3 = llvm::ConstantInt::get((llvm::ConstantInt **)(**((_QWORD **)this + 8) + 1984), -1, 0);
    CastedInt8PtrValue = v10;
  }
  v13[0] = (uint64_t)a3;
  v13[1] = (uint64_t)CastedInt8PtrValue;
  v6 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)this + 6) + 56) + 40);
  v11[0] = *(_QWORD *)CastedInt8PtrValue;
  Declaration = llvm::Intrinsic::getDeclaration(v6, 168, v11, 1);
  v12 = 257;
  if (Declaration)
    v8 = *(uint64_t ***)(Declaration + 24);
  else
    v8 = 0;
  return sub_1C5062DD8((uint64_t *)this, v8, Declaration, v13, 2, 0, 0, (uint64_t)v11, 0);
}

uint64_t llvm::IRBuilderBase::CreateLifetimeEnd(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::ConstantInt *a3)
{
  unsigned __int8 *CastedInt8PtrValue;
  uint64_t *v6;
  uint64_t Declaration;
  uint64_t **v8;
  unsigned __int8 *v10;
  uint64_t v11[4];
  __int16 v12;
  uint64_t v13[3];

  v13[2] = *MEMORY[0x1E0C80C00];
  CastedInt8PtrValue = llvm::IRBuilderBase::getCastedInt8PtrValue(this, a2);
  if (!a3)
  {
    v10 = CastedInt8PtrValue;
    a3 = llvm::ConstantInt::get((llvm::ConstantInt **)(**((_QWORD **)this + 8) + 1984), -1, 0);
    CastedInt8PtrValue = v10;
  }
  v13[0] = (uint64_t)a3;
  v13[1] = (uint64_t)CastedInt8PtrValue;
  v6 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)this + 6) + 56) + 40);
  v11[0] = *(_QWORD *)CastedInt8PtrValue;
  Declaration = llvm::Intrinsic::getDeclaration(v6, 167, v11, 1);
  v12 = 257;
  if (Declaration)
    v8 = *(uint64_t ***)(Declaration + 24);
  else
    v8 = 0;
  return sub_1C5062DD8((uint64_t *)this, v8, Declaration, v13, 2, 0, 0, (uint64_t)v11, 0);
}

uint64_t llvm::IRBuilderBase::CreateInvariantStart(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::ConstantInt *a3)
{
  const llvm::APInt *v5;
  unsigned __int8 *CastedInt8PtrValue;
  uint64_t v7;
  llvm::ConstantInt *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t Declaration;
  uint64_t **v12;
  llvm::ConstantInt *v14;
  unint64_t v15;
  unsigned int v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  CastedInt8PtrValue = llvm::IRBuilderBase::getCastedInt8PtrValue(this, a2);
  if (!a3)
  {
    v7 = **((_QWORD **)this + 8);
    v8 = *(llvm::ConstantInt **)(v7 + 1984);
    v9 = *(unsigned int *)(v7 + 1992);
    v16 = v9 >> 8;
    if (v9 >> 8 > 0x40)
    {
      v14 = v8;
      llvm::APInt::initSlowCase((llvm::APInt *)&v15, -1, 0);
      v8 = v14;
    }
    else
    {
      if (v9 <= 0xFF)
        v10 = 0;
      else
        v10 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v9);
      v15 = v10;
    }
    a3 = llvm::ConstantInt::get(v8, (llvm::LLVMContext *)&v15, v5);
    if (v16 >= 0x41 && v15)
      MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
  }
  v19[0] = (uint64_t)a3;
  v19[1] = (uint64_t)CastedInt8PtrValue;
  v18 = *(_QWORD *)CastedInt8PtrValue;
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*((_QWORD *)this + 6) + 56) + 40), 164, &v18, 1);
  v17 = 257;
  if (Declaration)
    v12 = *(uint64_t ***)(Declaration + 24);
  else
    v12 = 0;
  return sub_1C5062DD8((uint64_t *)this, v12, Declaration, v19, 2, 0, 0, (uint64_t)&v15, 0);
}

uint64_t llvm::IRBuilderBase::CreateNoAliasScopeDeclaration(llvm::IRBuilderBase *this, llvm::Value *a2)
{
  uint64_t Declaration;
  uint64_t **v5;
  _BYTE v7[32];
  __int16 v8;
  uint64_t v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*((_QWORD *)this + 6) + 56) + 40), 126, 0, 0);
  v9[0] = (uint64_t)a2;
  v8 = 257;
  if (Declaration)
    v5 = *(uint64_t ***)(Declaration + 24);
  else
    v5 = 0;
  return sub_1C5062DD8((uint64_t *)this, v5, Declaration, v9, 1, 0, 0, (uint64_t)v7, 0);
}

uint64_t llvm::IRBuilderBase::CreateGCStatepointCall(uint64_t a1, uint64_t a2, const llvm::APInt *a3, uint64_t a4, llvm::ValueHandleBase *a5, char *a6, uint64_t a7, __int128 *a8, uint64_t *a9, uint64_t a10, uint64_t a11)
{
  uint64_t *v17;
  uint64_t Declaration;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _BYTE v30[24];
  uint64_t v31[3];
  void **v32;
  llvm::ValueHandleBase **v33[5];

  v33[3] = *(llvm::ValueHandleBase ***)MEMORY[0x1E0C80C00];
  v26 = *a8;
  v27 = *((_QWORD *)a8 + 2);
  v17 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) + 40);
  v33[0] = *(llvm::ValueHandleBase ***)a5;
  Declaration = llvm::Intrinsic::getDeclaration(v17, 124, (uint64_t *)v33, 1);
  sub_1C53DADF4(a1, a2, a3, a5, 0, a6, a7, v33);
  if (Declaration)
    v19 = *(uint64_t ***)(Declaration + 24);
  else
    v19 = 0;
  v20 = (uint64_t *)v33[0];
  v21 = v33[1] - v33[0];
  v30[0] = 0;
  v30[16] = 0;
  v28 = v26;
  v29 = v27;
  sub_1C53DB56C(v31, (uint64_t)v30, (uint64_t)&v28, a9, a10);
  v22 = sub_1C5062DD8((uint64_t *)a1, v19, Declaration, v20, v21, v31[0], 0xAAAAAAAAAAAAAAABLL * ((v31[1] - v31[0]) >> 4), a11, 0);
  v32 = (void **)v31;
  sub_1C5010E14(&v32);
  v23 = llvm::Attribute::get(*(uint64_t **)(a1 + 64), 70, a4);
  LODWORD(v31[0]) = 2;
  *(_QWORD *)(v22 + 64) = llvm::AttributeList::addParamAttribute((_QWORD *)(v22 + 64), **(uint64_t ***)v22, v31, 1, v23);
  if (v20)
    operator delete(v20);
  return v22;
}

uint64_t llvm::IRBuilderBase::CreateGCStatepointCall(uint64_t a1, uint64_t a2, const llvm::APInt *a3, uint64_t a4, llvm::ValueHandleBase *a5, unsigned int a6, char *a7, uint64_t a8, __int128 *a9, __int128 *a10, uint64_t *a11, uint64_t a12, uint64_t a13)
{
  uint64_t *v20;
  uint64_t Declaration;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37[3];
  void **v38;
  llvm::ValueHandleBase **v39[5];

  v39[3] = *(llvm::ValueHandleBase ***)MEMORY[0x1E0C80C00];
  v31 = *a9;
  v32 = *((_QWORD *)a9 + 2);
  v29 = *a10;
  v30 = *((_QWORD *)a10 + 2);
  v20 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) + 40);
  v39[0] = *(llvm::ValueHandleBase ***)a5;
  Declaration = llvm::Intrinsic::getDeclaration(v20, 124, (uint64_t *)v39, 1);
  sub_1C53DADF4(a1, a2, a3, a5, a6, a7, a8, v39);
  if (Declaration)
    v22 = *(uint64_t ***)(Declaration + 24);
  else
    v22 = 0;
  v23 = (uint64_t *)v39[0];
  v24 = v39[1] - v39[0];
  v35 = v31;
  v36 = v32;
  v33 = v29;
  v34 = v30;
  sub_1C53DBB54((uint64_t)&v35, (uint64_t)&v33, a11, a12, v37);
  v25 = sub_1C5062DD8((uint64_t *)a1, v22, Declaration, v23, v24, v37[0], 0xAAAAAAAAAAAAAAABLL * ((v37[1] - v37[0]) >> 4), a13, 0);
  v38 = (void **)v37;
  sub_1C5010E14(&v38);
  v26 = llvm::Attribute::get(*(uint64_t **)(a1 + 64), 70, a4);
  LODWORD(v37[0]) = 2;
  *(_QWORD *)(v25 + 64) = llvm::AttributeList::addParamAttribute((_QWORD *)(v25 + 64), **(uint64_t ***)v25, v37, 1, v26);
  if (v23)
    operator delete(v23);
  return v25;
}

uint64_t llvm::IRBuilderBase::CreateGCStatepointCall(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, void **a5, uint64_t *a6, uint64_t a7, __int128 *a8, uint64_t *a9, uint64_t a10, uint64_t a11)
{
  uint64_t *v17;
  uint64_t Declaration;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _BYTE v30[24];
  uint64_t v31[3];
  void **v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v26 = *a8;
  v27 = *((_QWORD *)a8 + 2);
  v17 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) + 40);
  v33 = (uint64_t *)*a5;
  Declaration = llvm::Intrinsic::getDeclaration(v17, 124, (uint64_t *)&v33, 1);
  sub_1C53DBE28((uint64_t)&v33, a1, a2, a3, (uint64_t)a5, a6, a7);
  if (Declaration)
    v19 = *(uint64_t ***)(Declaration + 24);
  else
    v19 = 0;
  v20 = v33;
  v21 = v34 - v33;
  v30[0] = 0;
  v30[16] = 0;
  v28 = v26;
  v29 = v27;
  sub_1C53DB56C(v31, (uint64_t)v30, (uint64_t)&v28, a9, a10);
  v22 = sub_1C5062DD8((uint64_t *)a1, v19, Declaration, v20, v21, v31[0], 0xAAAAAAAAAAAAAAABLL * ((v31[1] - v31[0]) >> 4), a11, 0);
  v32 = (void **)v31;
  sub_1C5010E14(&v32);
  v23 = llvm::Attribute::get(*(uint64_t **)(a1 + 64), 70, a4);
  LODWORD(v31[0]) = 2;
  *(_QWORD *)(v22 + 64) = llvm::AttributeList::addParamAttribute((_QWORD *)(v22 + 64), **(uint64_t ***)v22, v31, 1, v23);
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  return v22;
}

unsigned __int8 **llvm::IRBuilderBase::CreateGCStatepointInvoke(uint64_t a1, uint64_t a2, const llvm::APInt *a3, uint64_t a4, llvm::ValueHandleBase *a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, uint64_t a10, __int128 *a11, uint64_t *a12, uint64_t a13, uint64_t a14)
{
  uint64_t *v18;
  uint64_t Declaration;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 **v24;
  unint64_t v25;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _BYTE v34[24];
  uint64_t v35[3];
  void **v36;
  llvm::ValueHandleBase **v37[5];

  v37[3] = *(llvm::ValueHandleBase ***)MEMORY[0x1E0C80C00];
  v30 = *a11;
  v31 = *((_QWORD *)a11 + 2);
  v18 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) + 40);
  v37[0] = *(llvm::ValueHandleBase ***)a5;
  Declaration = llvm::Intrinsic::getDeclaration(v18, 124, (uint64_t *)v37, 1);
  sub_1C53DADF4(a1, a2, a3, a5, 0, a9, a10, v37);
  if (Declaration)
    v20 = *(_QWORD *)(Declaration + 24);
  else
    v20 = 0;
  v21 = (uint64_t *)v37[0];
  v22 = v37[1] - v37[0];
  v34[0] = 0;
  v34[16] = 0;
  v32 = v30;
  v33 = v31;
  sub_1C53DB56C(v35, (uint64_t)v34, (uint64_t)&v32, a12, a13);
  v24 = sub_1C623C480(a1, v20, Declaration, a6, a7, v21, v22, v23, v35[0], 0xAAAAAAAAAAAAAAABLL * ((v35[1] - v35[0]) >> 4), a14);
  v36 = (void **)v35;
  sub_1C5010E14(&v36);
  v25 = llvm::Attribute::get(*(uint64_t **)(a1 + 64), 70, a4);
  LODWORD(v35[0]) = 2;
  v24[8] = (unsigned __int8 *)llvm::AttributeList::addParamAttribute(v24 + 8, *(uint64_t **)*v24, v35, 1, v25);
  if (v21)
    operator delete(v21);
  return v24;
}

unsigned __int8 **llvm::IRBuilderBase::CreateGCStatepointInvoke(uint64_t a1, uint64_t a2, const llvm::APInt *a3, uint64_t a4, llvm::ValueHandleBase *a5, uint64_t a6, uint64_t a7, unsigned int a8, char *a9, uint64_t a10, __int128 *a11, __int128 *a12, uint64_t *a13, uint64_t a14, uint64_t a15)
{
  uint64_t *v20;
  uint64_t Declaration;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 **v26;
  unint64_t v27;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40[3];
  void **v41;
  llvm::ValueHandleBase **v42[5];

  v42[3] = *(llvm::ValueHandleBase ***)MEMORY[0x1E0C80C00];
  v34 = *a11;
  v35 = *((_QWORD *)a11 + 2);
  v32 = *a12;
  v33 = *((_QWORD *)a12 + 2);
  v20 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) + 40);
  v42[0] = *(llvm::ValueHandleBase ***)a5;
  Declaration = llvm::Intrinsic::getDeclaration(v20, 124, (uint64_t *)v42, 1);
  sub_1C53DADF4(a1, a2, a3, a5, a8, a9, a10, v42);
  if (Declaration)
    v22 = *(_QWORD *)(Declaration + 24);
  else
    v22 = 0;
  v23 = (uint64_t *)v42[0];
  v24 = v42[1] - v42[0];
  v38 = v34;
  v39 = v35;
  v36 = v32;
  v37 = v33;
  sub_1C53DBB54((uint64_t)&v38, (uint64_t)&v36, a13, a14, v40);
  v26 = sub_1C623C480(a1, v22, Declaration, a6, a7, v23, v24, v25, v40[0], 0xAAAAAAAAAAAAAAABLL * ((v40[1] - v40[0]) >> 4), a15);
  v41 = (void **)v40;
  sub_1C5010E14(&v41);
  v27 = llvm::Attribute::get(*(uint64_t **)(a1 + 64), 70, a4);
  LODWORD(v40[0]) = 2;
  v26[8] = (unsigned __int8 *)llvm::AttributeList::addParamAttribute(v26 + 8, *(uint64_t **)*v26, v40, 1, v27);
  if (v23)
    operator delete(v23);
  return v26;
}

unsigned __int8 **llvm::IRBuilderBase::CreateGCStatepointInvoke(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, void **a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, __int128 *a11, uint64_t *a12, uint64_t a13, uint64_t a14)
{
  uint64_t *v18;
  uint64_t Declaration;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 **v24;
  unint64_t v25;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _BYTE v34[24];
  uint64_t v35[3];
  void **v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v30 = *a11;
  v31 = *((_QWORD *)a11 + 2);
  v18 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) + 40);
  v37 = (uint64_t *)*a5;
  Declaration = llvm::Intrinsic::getDeclaration(v18, 124, (uint64_t *)&v37, 1);
  sub_1C53DBE28((uint64_t)&v37, a1, a2, a3, (uint64_t)a5, a9, a10);
  if (Declaration)
    v20 = *(_QWORD *)(Declaration + 24);
  else
    v20 = 0;
  v21 = v37;
  v22 = v38 - v37;
  v34[0] = 0;
  v34[16] = 0;
  v32 = v30;
  v33 = v31;
  sub_1C53DB56C(v35, (uint64_t)v34, (uint64_t)&v32, a12, a13);
  v24 = sub_1C623C480(a1, v20, Declaration, a6, a7, v21, v22, v23, v35[0], 0xAAAAAAAAAAAAAAABLL * ((v35[1] - v35[0]) >> 4), a14);
  v36 = (void **)v35;
  sub_1C5010E14(&v36);
  v25 = llvm::Attribute::get(*(uint64_t **)(a1 + 64), 70, a4);
  LODWORD(v35[0]) = 2;
  v24[8] = (unsigned __int8 *)llvm::AttributeList::addParamAttribute(v24 + 8, *(uint64_t **)*v24, v35, 1, v25);
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
  return v24;
}

uint64_t llvm::IRBuilderBase::CreateGCRelocate(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v11;
  const llvm::APInt *v12;
  uint64_t Declaration;
  uint64_t v14;
  uint64_t v15;
  llvm::ConstantInt *v16;
  unint64_t v17;
  int v18;
  llvm::ValueHandleBase *v19;
  const llvm::APInt *v20;
  uint64_t v21;
  uint64_t v22;
  llvm::ConstantInt *v23;
  unsigned int v24;
  unint64_t v25;
  llvm::ValueHandleBase *v26;
  uint64_t **v27;
  llvm::ConstantInt *v29;
  llvm::ValueHandleBase *v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33[3];
  uint64_t v34[2];

  v34[1] = *MEMORY[0x1E0C80C00];
  v11 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) + 40);
  v34[0] = a5;
  Declaration = llvm::Intrinsic::getDeclaration(v11, 122, v34, 1);
  v33[0] = a2;
  v14 = **(_QWORD **)(a1 + 64);
  v15 = a3;
  v16 = *(llvm::ConstantInt **)(v14 + 1960);
  v17 = *(unsigned int *)(v14 + 1968);
  v32 = v17 >> 8;
  if (v17 >> 8 > 0x40)
  {
    v29 = v16;
    llvm::APInt::initSlowCase((llvm::APInt *)&v31, v15, 0);
    v16 = v29;
  }
  else
  {
    if (v17 <= 0xFF)
      v18 = 0;
    else
      v18 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v17);
    v31 = v18 & a3;
  }
  v19 = llvm::ConstantInt::get(v16, (llvm::LLVMContext *)&v31, v12);
  if (v32 >= 0x41 && v31)
  {
    v30 = v19;
    MEMORY[0x1CAA32F9C](v31, 0x1000C8000313F17);
    v19 = v30;
  }
  v33[1] = (uint64_t)v19;
  v21 = **(_QWORD **)(a1 + 64);
  v22 = a4;
  v23 = *(llvm::ConstantInt **)(v21 + 1960);
  v24 = *(_DWORD *)(v21 + 1968);
  v32 = v24 >> 8;
  if (v24 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v31, v22, 0);
  }
  else
  {
    if (v24 <= 0xFF)
      v25 = 0;
    else
      v25 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v24);
    v31 = v25 & v22;
  }
  v26 = llvm::ConstantInt::get(v23, (llvm::LLVMContext *)&v31, v20);
  if (v32 >= 0x41 && v31)
    MEMORY[0x1CAA32F9C](v31, 0x1000C8000313F17);
  v33[2] = (uint64_t)v26;
  if (Declaration)
    v27 = *(uint64_t ***)(Declaration + 24);
  else
    v27 = 0;
  return sub_1C5062DD8((uint64_t *)a1, v27, Declaration, v33, 3, 0, 0, a6, 0);
}

uint64_t llvm::IRBuilderBase::CreateGCGetPointerBase(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t Declaration;
  uint64_t **v8;
  uint64_t v10[3];

  v10[2] = *MEMORY[0x1E0C80C00];
  v6 = *(uint64_t **)(*(_QWORD *)(a1[6] + 56) + 40);
  v10[0] = *a2;
  v10[1] = v10[0];
  Declaration = llvm::Intrinsic::getDeclaration(v6, 120, v10, 2);
  v10[0] = (uint64_t)a2;
  if (Declaration)
    v8 = *(uint64_t ***)(Declaration + 24);
  else
    v8 = 0;
  return sub_1C5062DD8(a1, v8, Declaration, v10, 1, 0, 0, a3, 0);
}

uint64_t llvm::IRBuilderBase::CreateGCGetPointerOffset(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t Declaration;
  uint64_t **v8;
  uint64_t v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v6 = *(uint64_t **)(*(_QWORD *)(a1[6] + 56) + 40);
  v10[0] = *a2;
  Declaration = llvm::Intrinsic::getDeclaration(v6, 121, v10, 1);
  v10[0] = (uint64_t)a2;
  if (Declaration)
    v8 = *(uint64_t ***)(Declaration + 24);
  else
    v8 = 0;
  return sub_1C5062DD8(a1, v8, Declaration, v10, 1, 0, 0, a3, 0);
}

uint64_t llvm::IRBuilderBase::CreateUnaryIntrinsic(uint64_t *a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v9;
  uint64_t Declaration;
  uint64_t **v11;
  uint64_t result;
  uint64_t v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v9 = *(uint64_t **)(*(_QWORD *)(a1[6] + 56) + 40);
  v13[0] = *a3;
  Declaration = llvm::Intrinsic::getDeclaration(v9, a2, v13, 1);
  v13[0] = (uint64_t)a3;
  if (Declaration)
    v11 = *(uint64_t ***)(Declaration + 24);
  else
    v11 = 0;
  result = sub_1C5062DD8(a1, v11, Declaration, v13, 1, 0, 0, a5, 0);
  if (a4)
    *(_BYTE *)(result + 17) = *(_BYTE *)(a4 + 17) & 0xFE | *(_BYTE *)(result + 17) & 1;
  return result;
}

uint64_t llvm::IRBuilderBase::CreateBinaryIntrinsic(uint64_t *a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v11;
  uint64_t Declaration;
  uint64_t **v13;
  uint64_t result;
  uint64_t v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  v11 = *(uint64_t **)(*(_QWORD *)(a1[6] + 56) + 40);
  v15[0] = *a3;
  Declaration = llvm::Intrinsic::getDeclaration(v11, a2, v15, 1);
  v15[0] = (uint64_t)a3;
  v15[1] = a4;
  if (Declaration)
    v13 = *(uint64_t ***)(Declaration + 24);
  else
    v13 = 0;
  result = sub_1C5062DD8(a1, v13, Declaration, v15, 2, 0, 0, a6, 0);
  if (a5)
    *(_BYTE *)(result + 17) = *(_BYTE *)(a5 + 17) & 0xFE | *(_BYTE *)(result + 17) & 1;
  return result;
}

uint64_t llvm::IRBuilderBase::CreateConstrainedFPBinOp(uint64_t a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, llvm::MDNode *a7, __int16 a8, __int16 a9)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t Intrinsic;
  uint64_t v21[4];
  uint64_t v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v16 = sub_1C623AB30(a1, a8);
  v17 = sub_1C623AB84(a1, a9);
  if (a5)
  {
    if (*(unsigned __int8 *)(a5 + 17) >> 1 == 127)
      LOBYTE(a5) = -1;
    else
      LOBYTE(a5) = *(_BYTE *)(a5 + 17) >> 1;
  }
  else
  {
    LODWORD(a5) = *(_DWORD *)(a1 + 96);
  }
  v18 = *a3;
  v21[3] = v17;
  v22[0] = v18;
  v21[0] = (uint64_t)a3;
  v21[1] = a4;
  v21[2] = v16;
  Intrinsic = llvm::IRBuilderBase::CreateIntrinsic((uint64_t *)a1, a2, v22, 1, v21, 4, 0, a6);
  *(_QWORD *)(Intrinsic + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(Intrinsic + 64), **(uint64_t ***)Intrinsic, -1, 61);
  if (a7 || (a7 = *(llvm::MDNode **)(a1 + 88)) != 0)
    llvm::Value::setMetadata((llvm::Value *)Intrinsic, 3, a7);
  *(_BYTE *)(Intrinsic + 17) |= 2 * (_BYTE)a5;
  return Intrinsic;
}

unsigned __int8 *sub_1C53D8D24(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::MDNode *a5)
{
  unsigned __int8 *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 **v13;
  int v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 **v22;
  int v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26[4];
  __int16 v27;

  if (!a3 || *(unsigned __int8 *)(a3 + 16) > 0x14u)
  {
    v27 = 257;
    v8 = (unsigned __int8 *)llvm::UnaryOperator::Create(a2, (uint64_t *)a3, (uint64_t)v26, 0);
    if (sub_1C4774A9C((uint64_t)v8))
    {
      v17 = *((_DWORD *)a1 + 24);
      if (a5 || (a5 = (llvm::MDNode *)a1[11]) != 0)
        llvm::Value::setMetadata((llvm::Value *)v8, 3, a5);
      v8[17] |= 2 * (_BYTE)v17;
    }
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v8, a4, a1[6], a1[7]);
    v18 = *((unsigned int *)a1 + 2);
    if (!(_DWORD)v18)
      return v8;
    v20 = *a1;
    v21 = *a1 + 16 * v18;
    v22 = (unsigned __int8 **)(v8 + 48);
    while (1)
    {
      v23 = *(_DWORD *)v20;
      v24 = *(unsigned __int8 **)(v20 + 8);
      if (v24)
      {
        if (!v23)
        {
          v26[0] = *(unsigned __int8 **)(v20 + 8);
          llvm::MetadataTracking::track((uint64_t)v26, v24, 2);
LABEL_45:
          if (v26 == v22)
          {
            if (v26[0])
              llvm::MetadataTracking::untrack((uint64_t)v26, v26[0]);
          }
          else
          {
            if (*v22)
              llvm::MetadataTracking::untrack((uint64_t)(v8 + 48), *v22);
            v25 = v26[0];
            *v22 = v26[0];
            if (v25)
              llvm::MetadataTracking::retrack((uint64_t)v26, v25, (uint64_t)(v8 + 48));
          }
          goto LABEL_42;
        }
      }
      else
      {
        if (!*v22 && (v8[23] & 0x20) == 0)
          goto LABEL_42;
        if (!v23)
        {
          v26[0] = 0;
          goto LABEL_45;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v8, v23, (llvm::MDNode *)v24);
LABEL_42:
      v20 += 16;
      if (v20 == v21)
        return v8;
    }
  }
  v8 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[9] + 216))(a1[9], a2, a3);
  if (v8)
    v9 = v8[16] >= 0x1Cu;
  else
    v9 = 0;
  if (v9)
  {
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v8, a4, a1[6], a1[7]);
    v10 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v10)
    {
      v11 = *a1;
      v12 = *a1 + 16 * v10;
      v13 = (unsigned __int8 **)(v8 + 48);
      do
      {
        v14 = *(_DWORD *)v11;
        v15 = *(unsigned __int8 **)(v11 + 8);
        if (v15)
        {
          if (!v14)
          {
            v26[0] = *(unsigned __int8 **)(v11 + 8);
            llvm::MetadataTracking::track((uint64_t)v26, v15, 2);
LABEL_20:
            if (v26 == v13)
            {
              if (v26[0])
                llvm::MetadataTracking::untrack((uint64_t)v26, v26[0]);
            }
            else
            {
              if (*v13)
                llvm::MetadataTracking::untrack((uint64_t)(v8 + 48), *v13);
              v16 = v26[0];
              *v13 = v26[0];
              if (v16)
                llvm::MetadataTracking::retrack((uint64_t)v26, v16, (uint64_t)(v8 + 48));
            }
            goto LABEL_17;
          }
        }
        else
        {
          if (!*v13 && (v8[23] & 0x20) == 0)
            goto LABEL_17;
          if (!v14)
          {
            v26[0] = 0;
            goto LABEL_20;
          }
        }
        llvm::Value::setMetadata((llvm::Value *)v8, v14, (llvm::MDNode *)v15);
LABEL_17:
        v11 += 16;
      }
      while (v11 != v12);
    }
  }
  return v8;
}

uint64_t llvm::IRBuilderBase::CreateConstrainedFPCast(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, llvm::MDNode *a7, __int16 a8, __int16 a9)
{
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t Intrinsic;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v17 = sub_1C623AB84(a1, a9);
  v18 = v17;
  if (a5)
  {
    if (*(unsigned __int8 *)(a5 + 17) >> 1 == 127)
      LOBYTE(v19) = -1;
    else
      v19 = *(unsigned __int8 *)(a5 + 17) >> 1;
  }
  else
  {
    v19 = *(_DWORD *)(a1 + 96);
  }
  if ((a2 - 80) <= 0x26 && ((1 << (a2 - 80)) & 0x5CF07BC74FLL) != 0)
  {
    v20 = sub_1C623AB30(a1, a8);
    v21 = *a3;
    v33 = a4;
    v34 = v21;
    v30 = a3;
    v31 = v20;
    v32 = v18;
    v22 = (uint64_t *)&v33;
    v23 = (uint64_t *)&v30;
    v24 = (uint64_t *)a1;
    v25 = a2;
    v26 = 3;
  }
  else
  {
    v27 = *a3;
    v30 = a4;
    v31 = v27;
    v33 = a3;
    v34 = v17;
    v22 = (uint64_t *)&v30;
    v23 = (uint64_t *)&v33;
    v24 = (uint64_t *)a1;
    v25 = a2;
    v26 = 2;
  }
  Intrinsic = llvm::IRBuilderBase::CreateIntrinsic(v24, v25, v22, 2, v23, v26, 0, a6);
  *(_QWORD *)(Intrinsic + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(Intrinsic + 64), **(uint64_t ***)Intrinsic, -1, 61);
  if (sub_1C4774A9C(Intrinsic))
  {
    if (a7 || (a7 = *(llvm::MDNode **)(a1 + 88)) != 0)
      llvm::Value::setMetadata((llvm::Value *)Intrinsic, 3, a7);
    *(_BYTE *)(Intrinsic + 17) |= 2 * (_BYTE)v19;
  }
  return Intrinsic;
}

uint64_t llvm::IRBuilderBase::CreateFCmpHelper(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, llvm::MDNode *a6, int a7)
{
  unsigned int v10;
  int v12;
  unsigned __int8 *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 **v20;
  int v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t **v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 **v38;
  int v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45[4];
  __int16 v46;
  unsigned __int8 *v47;

  v10 = a2;
  if (!*(_BYTE *)(a1 + 100))
  {
    if (a3 && *((unsigned __int8 *)a3 + 16) <= 0x14u && a4 && *(unsigned __int8 *)(a4 + 16) <= 0x14u)
    {
      v15 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 72)
                                                                                              + 312))(*(_QWORD *)(a1 + 72), a2, a3, a4);
      if (v15)
        v16 = v15[16] >= 0x1Cu;
      else
        v16 = 0;
      if (v16)
      {
        (*(void (**)(_QWORD, unsigned __int8 *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v15, a5, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
        v17 = *(unsigned int *)(a1 + 8);
        if ((_DWORD)v17)
        {
          v18 = *(_QWORD *)a1;
          v19 = v18 + 16 * v17;
          v20 = (unsigned __int8 **)(v15 + 48);
          do
          {
            v21 = *(_DWORD *)v18;
            v22 = *(unsigned __int8 **)(v18 + 8);
            if (v22)
            {
              if (!v21)
              {
                v45[0] = *(unsigned __int8 **)(v18 + 8);
                llvm::MetadataTracking::track((uint64_t)v45, v22, 2);
LABEL_27:
                if (v45 == v20)
                {
                  if (v45[0])
                    llvm::MetadataTracking::untrack((uint64_t)v45, v45[0]);
                }
                else
                {
                  if (*v20)
                    llvm::MetadataTracking::untrack((uint64_t)(v15 + 48), *v20);
                  v23 = v45[0];
                  *v20 = v45[0];
                  if (v23)
                    llvm::MetadataTracking::retrack((uint64_t)v45, v23, (uint64_t)(v15 + 48));
                }
                goto LABEL_24;
              }
            }
            else
            {
              if (!*v20 && (v15[23] & 0x20) == 0)
                goto LABEL_24;
              if (!v21)
              {
                v45[0] = 0;
                goto LABEL_27;
              }
            }
            llvm::Value::setMetadata((llvm::Value *)v15, v21, (llvm::MDNode *)v22);
LABEL_24:
            v18 += 16;
          }
          while (v18 != v19);
        }
      }
      return (uint64_t)v15;
    }
    v24 = (char *)operator new(0x80uLL);
    *((_DWORD *)v24 + 21) = *((_DWORD *)v24 + 21) & 0x38000000 | 2;
    v15 = (unsigned __int8 *)(v24 + 64);
    *(_QWORD *)v24 = 0;
    *((_QWORD *)v24 + 1) = 0;
    *((_QWORD *)v24 + 2) = 0;
    *((_QWORD *)v24 + 3) = v24 + 64;
    *((_QWORD *)v24 + 4) = 0;
    v25 = (uint64_t *)(v24 + 32);
    *((_QWORD *)v24 + 5) = 0;
    *((_QWORD *)v24 + 6) = 0;
    *((_QWORD *)v24 + 7) = v24 + 64;
    v46 = 257;
    sub_1C4774CC4((_DWORD *)*a3);
    *((_QWORD *)v24 + 8) = v26;
    *((_QWORD *)v24 + 9) = 0;
    v27 = *((_DWORD *)v24 + 21) & 0xC0000000 | 2;
    *((_DWORD *)v24 + 20) = 82;
    *((_DWORD *)v24 + 21) = v27;
    *(_OWORD *)(v24 + 88) = 0u;
    *(_OWORD *)(v24 + 104) = 0u;
    *((_DWORD *)v24 + 30) = 0;
    if (*(_QWORD *)v24)
    {
      **((_QWORD **)v24 + 2) = *((_QWORD *)v24 + 1);
      v43 = *((_QWORD *)v24 + 1);
      if (v43)
        *(_QWORD *)(v43 + 16) = *((_QWORD *)v24 + 2);
    }
    *(_QWORD *)v24 = a3;
    v30 = a3[1];
    v29 = a3 + 1;
    v28 = v30;
    *((_QWORD *)v24 + 1) = v30;
    if (v30)
      *(_QWORD *)(v28 + 16) = v24 + 8;
    *((_QWORD *)v24 + 2) = v29;
    *v29 = v24;
    if (*((_QWORD *)v24 + 4))
    {
      **((_QWORD **)v24 + 6) = *((_QWORD *)v24 + 5);
      v44 = *((_QWORD *)v24 + 5);
      if (v44)
        *(_QWORD *)(v44 + 16) = *((_QWORD *)v24 + 6);
    }
    *v25 = a4;
    if (a4)
    {
      v33 = *(_QWORD *)(a4 + 8);
      v32 = (uint64_t **)(a4 + 8);
      v31 = v33;
      *((_QWORD *)v24 + 5) = v33;
      if (v33)
        *(_QWORD *)(v31 + 16) = v24 + 40;
      *((_QWORD *)v24 + 6) = v32;
      *v32 = v25;
    }
    *((_WORD *)v24 + 41) = v10;
    llvm::Value::setName((uint64_t ***)v15, (uint64_t)v45);
    v34 = *(_DWORD *)(a1 + 96);
    if (a6 || (a6 = *(llvm::MDNode **)(a1 + 88)) != 0)
      llvm::Value::setMetadata((llvm::Value *)v15, 3, a6);
    v24[81] |= 2 * (_BYTE)v34;
    (*(void (**)(_QWORD, unsigned __int8 *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v15, a5, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
    v35 = *(unsigned int *)(a1 + 8);
    if (!(_DWORD)v35)
      return (uint64_t)v15;
    v36 = *(_QWORD *)a1;
    v37 = *(_QWORD *)a1 + 16 * v35;
    v38 = (unsigned __int8 **)(v24 + 112);
    while (1)
    {
      v39 = *(_DWORD *)v36;
      v40 = *(unsigned __int8 **)(v36 + 8);
      if (v40)
      {
        if (!v39)
        {
          v47 = *(unsigned __int8 **)(v36 + 8);
          llvm::MetadataTracking::track((uint64_t)&v47, v40, 2);
          v41 = *v38;
          goto LABEL_58;
        }
      }
      else
      {
        v41 = *v38;
        if (!*v38 && (v24[87] & 0x20) == 0)
          goto LABEL_55;
        if (!v39)
        {
          v47 = 0;
LABEL_58:
          if (v41)
            llvm::MetadataTracking::untrack((uint64_t)(v24 + 112), v41);
          v42 = v47;
          *v38 = v47;
          if (v42)
            llvm::MetadataTracking::retrack((uint64_t)&v47, v42, (uint64_t)(v24 + 112));
          goto LABEL_55;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v15, *(_DWORD *)v36, (llvm::MDNode *)v40);
LABEL_55:
      v36 += 16;
      if (v36 == v37)
        return (uint64_t)v15;
    }
  }
  if (a7)
    v12 = 85;
  else
    v12 = 84;
  return llvm::IRBuilderBase::CreateConstrainedFPCmp(a1, v12, v10, a3, a4, a5, 0);
}

uint64_t llvm::IRBuilderBase::CreateConstrainedFPCmp(uint64_t a1, int a2, unsigned int a3, uint64_t *a4, uint64_t a5, uint64_t a6, __int16 a7)
{
  unsigned __int8 *PredicateName;
  size_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t Intrinsic;
  uint64_t v21[4];
  uint64_t v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  PredicateName = (unsigned __int8 *)llvm::CmpInst::getPredicateName(a3);
  v15 = (unsigned __int8 *)llvm::MDString::get(*(uint64_t **)(a1 + 64), PredicateName, v14);
  v16 = llvm::MetadataAsValue::get(*(uint64_t **)(a1 + 64), v15);
  v17 = sub_1C623AB84(a1, a7);
  v18 = *a4;
  v21[3] = v17;
  v22[0] = v18;
  v21[0] = (uint64_t)a4;
  v21[1] = a5;
  v21[2] = v16;
  Intrinsic = llvm::IRBuilderBase::CreateIntrinsic((uint64_t *)a1, a2, v22, 1, v21, 4, 0, a6);
  *(_QWORD *)(Intrinsic + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(Intrinsic + 64), **(uint64_t ***)Intrinsic, -1, 61);
  return Intrinsic;
}

llvm::Value *llvm::IRBuilderBase::CreateSelect(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  uint64_t v12;
  llvm::Value *v13;
  int v14;
  llvm::MDNode *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unsigned __int8 **v28;
  unsigned __int8 *v29;
  uint64_t v30;
  llvm::MDNode **v31;
  uint64_t v32;
  llvm::MDNode *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  unsigned __int8 **v39;
  unsigned __int8 *v40;
  uint64_t v41;
  llvm::MDNode **v42;
  uint64_t v43;
  llvm::MDNode *v44;
  unsigned __int8 **v45;
  unsigned __int8 *v46;
  unsigned __int8 **v47;
  int v48;
  BOOL v49;
  unsigned int v50;
  unsigned __int8 **v51;
  int v52;
  BOOL v53;
  unsigned int v54;
  unsigned __int8 **v55;
  unsigned __int8 *v56;
  unsigned __int8 **v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59[4];
  __int16 v60;

  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[9] + 56))(a1[9]);
  if (v12)
    return (llvm::Value *)v12;
  v60 = 257;
  v13 = sub_1C4FC8748(a2, a3, a4, (uint64_t)v59, 0, 0);
  if (a6)
  {
    v22 = *((_DWORD *)a6 + 5);
    if (*((_QWORD *)a6 + 6))
    {
      if ((v22 & 0x20000000) == 0)
        goto LABEL_30;
    }
    else if ((v22 & 0x20000000) == 0)
    {
      goto LABEL_3;
    }
    v23 = ***(_QWORD ***)a6;
    v59[0] = a6;
    v24 = *(_DWORD *)(v23 + 2496);
    if (v24)
    {
      v25 = *(_QWORD *)(v23 + 2480);
      v26 = v24 - 1;
      v27 = v26 & ((a6 >> 4) ^ (a6 >> 9));
      v28 = (unsigned __int8 **)(v25 + 40 * v27);
      v29 = *v28;
      if (*v28 == a6)
        goto LABEL_25;
      v51 = 0;
      v52 = 1;
      while (v29 != (unsigned __int8 *)-4096)
      {
        if (v51)
          v53 = 0;
        else
          v53 = v29 == (unsigned __int8 *)-8192;
        if (v53)
          v51 = v28;
        v54 = v27 + v52++;
        v27 = v54 & v26;
        v28 = (unsigned __int8 **)(v25 + 40 * v27);
        v29 = *v28;
        if (*v28 == a6)
          goto LABEL_25;
      }
      if (v51)
        v57 = v51;
      else
        v57 = v28;
    }
    else
    {
      v57 = 0;
    }
    v28 = (unsigned __int8 **)sub_1C541AB24(v23 + 2480, (uint64_t)v59, (uint64_t *)v59, v57);
    v58 = v59[0];
    v28[3] = 0;
    v28[4] = 0;
    *v28 = v58;
    v28[1] = (unsigned __int8 *)(v28 + 3);
    v28[2] = (unsigned __int8 *)0x100000000;
LABEL_25:
    v30 = *((unsigned int *)v28 + 4);
    if ((_DWORD)v30)
    {
      v31 = (llvm::MDNode **)(v28[1] + 8);
      v32 = 16 * v30;
      while (*((_DWORD *)v31 - 2) != 2)
      {
        v33 = 0;
        v31 += 2;
        v32 -= 16;
        if (!v32)
          goto LABEL_31;
      }
      v33 = *v31;
LABEL_31:
      if ((a6[23] & 0x20) == 0)
        goto LABEL_38;
      v34 = ***(_QWORD ***)a6;
      v59[0] = a6;
      v35 = *(_DWORD *)(v34 + 2496);
      if (v35)
      {
        v36 = *(_QWORD *)(v34 + 2480);
        v37 = v35 - 1;
        v38 = v37 & ((a6 >> 4) ^ (a6 >> 9));
        v39 = (unsigned __int8 **)(v36 + 40 * v38);
        v40 = *v39;
        if (*v39 == a6)
          goto LABEL_34;
        v47 = 0;
        v48 = 1;
        while (v40 != (unsigned __int8 *)-4096)
        {
          if (v47)
            v49 = 0;
          else
            v49 = v40 == (unsigned __int8 *)-8192;
          if (v49)
            v47 = v39;
          v50 = v38 + v48++;
          v38 = v50 & v37;
          v39 = (unsigned __int8 **)(v36 + 40 * v38);
          v40 = *v39;
          if (*v39 == a6)
            goto LABEL_34;
        }
        if (v47)
          v55 = v47;
        else
          v55 = v39;
      }
      else
      {
        v55 = 0;
      }
      v39 = (unsigned __int8 **)sub_1C541AB24(v34 + 2480, (uint64_t)v59, (uint64_t *)v59, v55);
      v56 = v59[0];
      v39[3] = 0;
      v39[4] = 0;
      *v39 = v56;
      v39[1] = (unsigned __int8 *)(v39 + 3);
      v39[2] = (unsigned __int8 *)0x100000000;
LABEL_34:
      v41 = *((unsigned int *)v39 + 4);
      if ((_DWORD)v41)
      {
        v42 = (llvm::MDNode **)(v39[1] + 8);
        v43 = 16 * v41;
        while (*((_DWORD *)v42 - 2) != 15)
        {
          v42 += 2;
          v43 -= 16;
          if (!v43)
            goto LABEL_38;
        }
        v44 = *v42;
        goto LABEL_39;
      }
LABEL_38:
      v44 = 0;
LABEL_39:
      if (v33)
        llvm::Value::setMetadata(v13, 2, v33);
      if (v44)
        llvm::Value::setMetadata(v13, 15, v44);
      goto LABEL_3;
    }
LABEL_30:
    v33 = 0;
    goto LABEL_31;
  }
LABEL_3:
  if (sub_1C4774A9C((uint64_t)v13))
  {
    v14 = *((_DWORD *)a1 + 24);
    v15 = (llvm::MDNode *)a1[11];
    if (v15)
      llvm::Value::setMetadata(v13, 3, v15);
    *((_BYTE *)v13 + 17) |= 2 * (_BYTE)v14;
  }
  (*(void (**)(uint64_t, llvm::Value *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v13, a5, a1[6], a1[7]);
  v16 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v16)
  {
    v18 = *a1;
    v19 = *a1 + 16 * v16;
    do
    {
      v20 = *(_DWORD *)v18;
      v21 = *(unsigned __int8 **)(v18 + 8);
      if (v21)
      {
        if (!v20)
        {
          v59[0] = *(unsigned __int8 **)(v18 + 8);
          llvm::MetadataTracking::track((uint64_t)v59, v21, 2);
LABEL_44:
          v45 = (unsigned __int8 **)((char *)v13 + 48);
          if (v59 == (unsigned __int8 **)((char *)v13 + 48))
          {
            if (v59[0])
              llvm::MetadataTracking::untrack((uint64_t)v59, v59[0]);
          }
          else
          {
            if (*v45)
              llvm::MetadataTracking::untrack((uint64_t)v13 + 48, *v45);
            v46 = v59[0];
            *v45 = v59[0];
            if (v46)
              llvm::MetadataTracking::retrack((uint64_t)v59, v46, (uint64_t)v13 + 48);
          }
          goto LABEL_17;
        }
      }
      else
      {
        if (!*((_QWORD *)v13 + 6) && (*((_BYTE *)v13 + 23) & 0x20) == 0)
          goto LABEL_17;
        if (!v20)
        {
          v59[0] = 0;
          goto LABEL_44;
        }
      }
      llvm::Value::setMetadata(v13, v20, (llvm::MDNode *)v21);
LABEL_17:
      v18 += 16;
    }
    while (v18 != v19);
  }
  return v13;
}

unsigned __int8 *llvm::IRBuilderBase::CreateLaunderInvariantGroup(llvm::IRBuilderBase *this, llvm::Value *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t Declaration;
  uint64_t **v9;
  unsigned __int8 *v10;
  unsigned __int8 *v12;
  uint64_t v13[4];
  __int16 v14;
  uint64_t v15;

  v2 = (unsigned __int8 *)a2;
  v15 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)a2;
  v5 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  if ((v5 & 0xFE) == 0x12)
    v5 = *(_DWORD *)(**(_QWORD **)(v4 + 16) + 8);
  v6 = llvm::PointerType::get((llvm::PointerType *)(**((_QWORD **)this + 8) + 1912), (llvm::Type *)(v5 >> 8));
  if (v4 != v6)
  {
    v14 = 257;
    v2 = sub_1C4773E38((uint64_t *)this, 49, v2, v6, (uint64_t)v13);
  }
  v7 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)this + 6) + 56) + 40);
  v13[0] = v6;
  Declaration = llvm::Intrinsic::getDeclaration(v7, 166, v13, 1);
  if (Declaration)
    v9 = *(uint64_t ***)(Declaration + 24);
  else
    v9 = 0;
  v12 = v2;
  v14 = 257;
  v10 = (unsigned __int8 *)sub_1C4774778((uint64_t *)this, v9, Declaration, (uint64_t *)&v12, 1, (uint64_t)v13, 0);
  if (v4 != v6)
  {
    v14 = 257;
    return sub_1C4773E38((uint64_t *)this, 49, v10, v4, (uint64_t)v13);
  }
  return v10;
}

unsigned __int8 *llvm::IRBuilderBase::CreateStripInvariantGroup(llvm::IRBuilderBase *this, llvm::Value *a2)
{
  unsigned __int8 *v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t Declaration;
  uint64_t **v9;
  unsigned __int8 *v10;
  unsigned __int8 *v12;
  uint64_t v13[4];
  __int16 v14;
  uint64_t v15;

  v2 = (unsigned __int8 *)a2;
  v15 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)a2;
  v5 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  if ((v5 & 0xFE) == 0x12)
    v5 = *(_DWORD *)(**(_QWORD **)(v4 + 16) + 8);
  v6 = llvm::PointerType::get((llvm::PointerType *)(**((_QWORD **)this + 8) + 1912), (llvm::Type *)(v5 >> 8));
  if (v4 != v6)
  {
    v14 = 257;
    v2 = sub_1C4773E38((uint64_t *)this, 49, v2, v6, (uint64_t)v13);
  }
  v7 = *(uint64_t **)(*(_QWORD *)(*((_QWORD *)this + 6) + 56) + 40);
  v13[0] = v6;
  Declaration = llvm::Intrinsic::getDeclaration(v7, 290, v13, 1);
  if (Declaration)
    v9 = *(uint64_t ***)(Declaration + 24);
  else
    v9 = 0;
  v12 = v2;
  v14 = 257;
  v10 = (unsigned __int8 *)sub_1C4774778((uint64_t *)this, v9, Declaration, (uint64_t *)&v12, 1, (uint64_t)v13, 0);
  if (v4 != v6)
  {
    v14 = 257;
    return sub_1C4773E38((uint64_t *)this, 49, v10, v4, (uint64_t)v13);
  }
  return v10;
}

llvm::Value *llvm::IRBuilderBase::CreateVectorSplice(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t *v14;
  const llvm::APInt *v15;
  uint64_t Declaration;
  uint64_t v17;
  llvm::ConstantInt *v18;
  unint64_t v19;
  unint64_t v20;
  llvm::ValueHandleBase *v21;
  uint64_t **v22;
  _WORD *v23;
  llvm::Value *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 **v33;
  int v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t v39[4];
  __int16 v40;
  void *v41;
  uint64_t v42;
  _WORD v43[16];
  uint64_t v44;

  v5 = a4;
  v44 = *MEMORY[0x1E0C80C00];
  if (*a2)
    v9 = *((_BYTE *)*a2 + 8) == 19;
  else
    v9 = 0;
  if (!v9)
  {
    v10 = *((unsigned int *)*a2 + 8);
    v41 = v43;
    v42 = 0x800000000;
    if ((_DWORD)v10)
    {
      LODWORD(v11) = 0;
      v12 = (v10 + a4) % v10;
      do
      {
        if (v11 >= HIDWORD(v42))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, (uint64_t)v43, v11 + 1, 4);
          LODWORD(v11) = v42;
        }
        *((_DWORD *)v41 + v11) = v12;
        v11 = (v42 + 1);
        LODWORD(v42) = v42 + 1;
        ++v12;
        LODWORD(v10) = v10 - 1;
      }
      while ((_DWORD)v10);
      v23 = v41;
    }
    else
    {
      v11 = 0;
      v23 = v43;
    }
    v40 = 257;
    v24 = (llvm::Value *)sub_1C486AD20(a1, (uint64_t)a2, a3, v23, v11, (uint64_t)v39);
    if (v41 != v43)
      free(v41);
    return v24;
  }
  v14 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56) + 40);
  v41 = *a2;
  Declaration = llvm::Intrinsic::getDeclaration(v14, 134, (uint64_t *)&v41, 1);
  v39[0] = (uint64_t)a2;
  v39[1] = a3;
  v17 = **(_QWORD **)(a1 + 64);
  v18 = *(llvm::ConstantInt **)(v17 + 1960);
  v19 = *(unsigned int *)(v17 + 1968);
  LODWORD(v42) = v19 >> 8;
  if (v19 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v41, v5, 0);
  }
  else
  {
    if (v19 <= 0xFF)
      LODWORD(v20) = 0;
    else
      v20 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v19);
    v41 = (void *)(v20 & v5);
  }
  v21 = llvm::ConstantInt::get(v18, (llvm::LLVMContext *)&v41, v15);
  if (v42 >= 0x41 && v41)
    MEMORY[0x1CAA32F9C](v41, 0x1000C8000313F17);
  v39[2] = (uint64_t)v21;
  if (Declaration)
    v22 = *(uint64_t ***)(Declaration + 24);
  else
    v22 = 0;
  v43[8] = 257;
  v25 = (char *)operator new(0xD0uLL);
  v26 = v25;
  v27 = 0;
  v24 = (llvm::Value *)(v25 + 128);
  *((_DWORD *)v25 + 37) = *((_DWORD *)v25 + 37) & 0x38000000 | 4;
  do
  {
    v28 = &v25[v27];
    *(_QWORD *)v28 = 0;
    *((_QWORD *)v28 + 1) = 0;
    *((_QWORD *)v28 + 2) = 0;
    *((_QWORD *)v28 + 3) = v24;
    v27 += 32;
  }
  while (v27 != 128);
  *((_QWORD *)v25 + 16) = *v22[2];
  *((_QWORD *)v25 + 17) = 0;
  v25[144] = 84;
  v25[145] = 0;
  *((_WORD *)v25 + 73) = 0;
  *((_DWORD *)v25 + 37) = *((_DWORD *)v25 + 37) & 0xC0000000 | 4;
  *(_OWORD *)(v25 + 152) = 0u;
  *(_OWORD *)(v25 + 168) = 0u;
  *((_DWORD *)v25 + 46) = 0;
  *((_QWORD *)v25 + 24) = 0;
  llvm::CallInst::init((uint64_t ***)v25 + 16, v22, Declaration, v39, 3, 0, 0, (uint64_t)&v41);
  (*(void (**)(_QWORD, llvm::Value *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), v24, a5, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v29 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v29)
  {
    v31 = *(_QWORD *)a1;
    v32 = *(_QWORD *)a1 + 16 * v29;
    v33 = (unsigned __int8 **)(v26 + 176);
    do
    {
      v34 = *(_DWORD *)v31;
      v35 = *(unsigned __int8 **)(v31 + 8);
      if (v35)
      {
        if (!v34)
        {
          v38 = *(unsigned __int8 **)(v31 + 8);
          llvm::MetadataTracking::track((uint64_t)&v38, v35, 2);
          v36 = *v33;
          goto LABEL_38;
        }
      }
      else
      {
        v36 = *v33;
        if (!*v33 && (v26[151] & 0x20) == 0)
          goto LABEL_35;
        if (!v34)
        {
          v38 = 0;
LABEL_38:
          if (v36)
            llvm::MetadataTracking::untrack((uint64_t)(v26 + 176), v36);
          v37 = v38;
          *v33 = v38;
          if (v37)
            llvm::MetadataTracking::retrack((uint64_t)&v38, v37, (uint64_t)(v26 + 176));
          goto LABEL_35;
        }
      }
      llvm::Value::setMetadata(v24, *(_DWORD *)v31, (llvm::MDNode *)v35);
LABEL_35:
      v31 += 16;
    }
    while (v31 != v32);
  }
  return v24;
}

uint64_t llvm::IRBuilderBase::CreateVectorSplat(uint64_t a1, unsigned int a2, uint64_t ***a3, uint64_t a4)
{
  return llvm::IRBuilderBase::CreateVectorSplat(a1, (llvm::Type *)a2, a3, a4);
}

uint64_t llvm::IRBuilderBase::CreateVectorSplat(uint64_t a1, llvm::Type *a2, uint64_t ***a3, uint64_t a4)
{
  llvm::ConstantInt *v7;
  uint64_t **v8;
  unint64_t v9;
  llvm::PoisonValue *v10;
  llvm::Type *v11;
  _QWORD *v12;
  llvm::Value **v13;
  int v14;
  __int16 v15;
  unsigned __int8 *v16;
  llvm::Type *v17;
  void *v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  _QWORD v29[4];
  __int16 v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[2];
  __int16 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v7 = (llvm::ConstantInt *)(**(_QWORD **)(a1 + 64) + 1960);
  v8 = *a3;
  v9 = a2;
  if ((unint64_t)a2 >> 32 == 1)
    llvm::ScalableVectorType::get(v8, a2);
  else
    llvm::FixedVectorType::get((llvm::FixedVectorType *)v8, a2);
  v12 = llvm::PoisonValue::get(v10, v11);
  v13 = llvm::ConstantInt::get(v7, 0, 0);
  v14 = *(unsigned __int8 *)(a4 + 32);
  if (v14 == 1)
  {
    v31 = ".splatinsert";
    v15 = 259;
    goto LABEL_7;
  }
  if (!*(_BYTE *)(a4 + 32))
  {
    v15 = 256;
LABEL_7:
    v34 = v15;
    goto LABEL_8;
  }
  v25 = *(_QWORD *)(a4 + 8);
  if (*(_BYTE *)(a4 + 33) == 1)
  {
    v26 = *(void **)a4;
  }
  else
  {
    LOBYTE(v14) = 2;
    v26 = (void *)a4;
  }
  v31 = v26;
  v32 = v25;
  v33[0] = ".splatinsert";
  LOBYTE(v34) = v14;
  HIBYTE(v34) = 3;
LABEL_8:
  v16 = sub_1C4773154((uint64_t *)a1, (uint64_t)v12, (uint64_t)a3, (uint64_t)v13, (uint64_t)&v31);
  v31 = v33;
  v32 = 0x1000000000;
  sub_1C49F6D78((uint64_t)&v31, v9);
  v18 = v31;
  v19 = v32;
  v20 = *(unsigned __int8 *)(a4 + 32);
  if (v20 == 1)
  {
    v29[0] = ".splat";
    v21 = 259;
  }
  else
  {
    if (*(_BYTE *)(a4 + 32))
    {
      v27 = *(_QWORD *)(a4 + 8);
      if (*(_BYTE *)(a4 + 33) == 1)
      {
        v28 = *(void **)a4;
      }
      else
      {
        LOBYTE(v20) = 2;
        v28 = (void *)a4;
      }
      v29[0] = v28;
      v29[1] = v27;
      v29[2] = ".splat";
      LOBYTE(v30) = v20;
      HIBYTE(v30) = 3;
      goto LABEL_13;
    }
    v21 = 256;
  }
  v30 = v21;
LABEL_13:
  v22 = llvm::PoisonValue::get(*(llvm::PoisonValue **)v16, v17);
  v23 = sub_1C486AD20(a1, (uint64_t)v16, (uint64_t)v22, v18, v19, (uint64_t)v29);
  if (v31 != v33)
    free(v31);
  return v23;
}

unsigned __int8 *llvm::IRBuilderBase::CreateExtractInteger(uint64_t *a1, _BYTE *a2, uint64_t *a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  llvm::ConstantInt **v9;
  uint64_t v11;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  const char *v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  const char *v23;
  llvm::Value **v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  const char *v28;
  const char *v30;
  uint64_t v31;
  const char *v32;
  __int16 v33;

  v9 = (llvm::ConstantInt **)a3;
  v11 = *a3;
  if (*a2)
  {
    sub_1C4768AD0((uint64_t)a2, *a3);
    v14 = v13;
    v16 = (unint64_t)(v15 + 7) >> 3;
    sub_1C4768AD0((uint64_t)a2, a4);
    v19 = (unint64_t)(v18 + 7) >> 3;
    if (v14 == 1)
    a5 = v16 - (v19 + a5);
  }
  if (8 * a5)
  {
    v20 = *(unsigned __int8 *)(a6 + 32);
    if (v20 == 1)
    {
      v30 = ".shift";
      v21 = 259;
    }
    else
    {
      if (*(_BYTE *)(a6 + 32))
      {
        v22 = *(_QWORD *)(a6 + 8);
        if (*(_BYTE *)(a6 + 33) == 1)
        {
          v23 = *(const char **)a6;
        }
        else
        {
          LOBYTE(v20) = 2;
          v23 = (const char *)a6;
        }
        v30 = v23;
        v31 = v22;
        v32 = ".shift";
        LOBYTE(v33) = v20;
        HIBYTE(v33) = 3;
        goto LABEL_15;
      }
      v21 = 256;
    }
    v33 = v21;
LABEL_15:
    v24 = llvm::ConstantInt::get(*v9, 8 * a5, 0);
    v9 = (llvm::ConstantInt **)sub_1C506ED1C((uint64_t)a1, (uint64_t)v9, (uint64_t)v24, (uint64_t)&v30, 0);
  }
  if (v11 != a4)
  {
    v25 = *(unsigned __int8 *)(a6 + 32);
    if (v25 == 1)
    {
      v30 = ".trunc";
      v26 = 259;
    }
    else
    {
      if (*(_BYTE *)(a6 + 32))
      {
        v27 = *(_QWORD *)(a6 + 8);
        if (*(_BYTE *)(a6 + 33) == 1)
        {
          v28 = *(const char **)a6;
        }
        else
        {
          LOBYTE(v25) = 2;
          v28 = (const char *)a6;
        }
        v30 = v28;
        v31 = v27;
        v32 = ".trunc";
        LOBYTE(v33) = v25;
        HIBYTE(v33) = 3;
        return sub_1C4773E38(a1, 38, (unsigned __int8 *)v9, a4, (uint64_t)&v30);
      }
      v26 = 256;
    }
    v33 = v26;
    return sub_1C4773E38(a1, 38, (unsigned __int8 *)v9, a4, (uint64_t)&v30);
  }
  return (unsigned __int8 *)v9;
}

uint64_t llvm::IRBuilderBase::CreateAlignmentAssumptionHelper(llvm::IRBuilderBase *this, const llvm::DataLayout *a2, llvm::Value *a3, llvm::Value *a4, llvm::Value *a5)
{
  unint64_t v6;
  void *v7;
  const llvm::APInt *v8;
  uint64_t *v9;
  uint64_t v10;
  llvm::ValueHandleBase *v11;
  uint64_t Assumption;
  llvm::ConstantInt *v14;
  unsigned int v15;
  char v16;
  void *v17;
  uint64_t v18;
  char v19;
  void *__p;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[5];

  v25[4] = *MEMORY[0x1E0C80C00];
  v23 = v25;
  v25[0] = a3;
  v25[1] = a4;
  v24 = 0x400000002;
  if (a5)
  {
    v25[2] = a5;
    v6 = 3;
    LODWORD(v24) = 3;
  }
  else
  {
    v6 = 2;
  }
  v7 = operator new(8 * v6);
  memcpy(v7, v25, 8 * v6);
  v9 = (uint64_t *)*((_QWORD *)this + 8);
  v10 = *v9;
  v11 = *(llvm::ValueHandleBase **)(*v9 + 1560);
  if (!v11)
  {
    v14 = *(llvm::ConstantInt **)(v10 + 1888);
    v15 = *(_DWORD *)(v10 + 1896);
    LODWORD(v18) = v15 >> 8;
    if (v15 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v17, 1, 0);
    }
    else
    {
      if (v15 <= 0xFF)
        v16 = 0;
      else
        v16 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v15);
      v17 = (void *)(v16 & 1);
    }
    v11 = llvm::ConstantInt::get(v14, (llvm::LLVMContext *)&v17, v8);
    if (v18 >= 0x41 && v17)
      MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
    *(_QWORD *)(v10 + 1560) = v11;
  }
  v17 = (void *)0x6E67696C61;
  v18 = 0;
  v19 = 5;
  v21 = 0;
  v22 = 0;
  __p = 0;
  sub_1C4DFE394(&__p, v7, (uint64_t)v7 + 8 * v6, v6);
  Assumption = llvm::IRBuilderBase::CreateAssumption((uint64_t *)this, (uint64_t)v11, (uint64_t)&v17, 1);
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  if (v19 < 0)
    operator delete(v17);
  operator delete(v7);
  if (v23 != v25)
    free(v23);
  return Assumption;
}

void llvm::IRBuilderCallbackInserter::~IRBuilderCallbackInserter(llvm::IRBuilderCallbackInserter *this)
{
  char *v1;
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E8167568;
  v1 = (char *)this + 8;
  v2 = (_QWORD *)*((_QWORD *)this + 4);
  if (v2 == (_QWORD *)v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      return;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
}

{
  char *v1;
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E8167568;
  v1 = (char *)this + 8;
  v2 = (_QWORD *)*((_QWORD *)this + 4);
  if (v2 == (_QWORD *)v1)
  {
    v3 = 4;
    v2 = v1;
LABEL_3:
    (*(void (**)(void))(*v2 + 8 * v3))();
    return;
  }
  if (v2)
  {
    v3 = 5;
    goto LABEL_3;
  }
}

{
  char *v1;
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E8167568;
  v1 = (char *)this + 8;
  v2 = (_QWORD *)*((_QWORD *)this + 4);
  if (v2 == (_QWORD *)v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C53DA69C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  llvm::ValueSymbolTable *v10;

  if (a4)
  {
    *(_QWORD *)(a2 + 40) = a4;
    *(_WORD *)(a4 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a2 + 23) & 0x10) != 0)
    {
      v9 = *(_QWORD *)(a4 + 56);
      if (v9)
      {
        v10 = *(llvm::ValueSymbolTable **)(v9 + 104);
        if (v10)
          llvm::ValueSymbolTable::reinsertValue(v10, (llvm::Value *)a2);
      }
    }
    v8 = *a5;
    *(_QWORD *)(a2 + 24) = *a5;
    *(_QWORD *)(a2 + 32) = a5;
    *(_QWORD *)(v8 + 8) = a2 + 24;
    *a5 = a2 + 24;
  }
  llvm::Value::setName((uint64_t ***)a2, a3);
}

uint64_t sub_1C53DA71C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  llvm::ValueSymbolTable *v13;
  int v14;
  int v15;
  int v16;
  llvm::Constant *v17;
  BOOL v18;
  uint64_t v19;

  if (a4)
  {
    *(_QWORD *)(a2 + 40) = a4;
    *(_WORD *)(a4 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a2 + 23) & 0x10) != 0)
    {
      v12 = *(_QWORD *)(a4 + 56);
      if (v12)
      {
        v13 = *(llvm::ValueSymbolTable **)(v12 + 104);
        if (v13)
          llvm::ValueSymbolTable::reinsertValue(v13, (llvm::Value *)a2);
      }
    }
    v9 = *a5;
    *(_QWORD *)(a2 + 24) = *a5;
    *(_QWORD *)(a2 + 32) = a5;
    *(_QWORD *)(v9 + 8) = a2 + 24;
    *a5 = a2 + 24;
  }
  llvm::Value::setName((uint64_t ***)a2, a3);
  v19 = a2;
  v10 = *(_QWORD *)(a1 + 32);
  if (v10)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 48))(v10, &v19);
  sub_1C485C2F0();
  return sub_1C53DA7CC(v14, v15, v16, v17, v18);
}

llvm::ValueHandleBase *sub_1C53DA7CC(int a1, unsigned __int8 *a2, unsigned __int8 *a3, llvm::Constant *a4, llvm::Constant *a5)
{
  llvm::ConstantExpr *v5;
  llvm::Constant *v6;
  BOOL v7;

  if (a2[16] >= 0x15u)
    v5 = 0;
  else
    v5 = (llvm::ConstantExpr *)a2;
  if (a3[16] >= 0x15u)
    v6 = 0;
  else
    v6 = (llvm::Constant *)a3;
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
    return 0;
  else
    return llvm::ConstantExpr::getAdd(v5, v6, a4, a5);
}

uint64_t sub_1C53DA804(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, llvm::Constant *a4)
{
  llvm::ConstantExpr *v4;
  llvm::Constant *v5;
  BOOL v6;

  if (a2[16] >= 0x15u)
    v4 = 0;
  else
    v4 = (llvm::ConstantExpr *)a2;
  if (a3[16] >= 0x15u)
    v5 = 0;
  else
    v5 = (llvm::Constant *)a3;
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
    return 0;
  else
    return llvm::ConstantExpr::getAnd(v4, v5, (llvm::Constant *)a3, a4);
}

llvm::ValueHandleBase *sub_1C53DA834(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, llvm::Constant *a4)
{
  llvm::ConstantExpr *v4;
  llvm::Constant *v5;
  BOOL v6;

  if (a2[16] >= 0x15u)
    v4 = 0;
  else
    v4 = (llvm::ConstantExpr *)a2;
  if (a3[16] >= 0x15u)
    v5 = 0;
  else
    v5 = (llvm::Constant *)a3;
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
    return 0;
  else
    return llvm::ConstantExpr::getOr(v4, v5, (llvm::Constant *)a3, a4);
}

llvm::UndefValue *sub_1C53DA864(uint64_t a1, unsigned __int16 a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t ***v5;
  llvm::Constant *v6;
  BOOL v7;

  if (*(unsigned __int8 *)(a3 + 16) >= 0x15u)
    v5 = 0;
  else
    v5 = (uint64_t ***)a3;
  if (a4[16] >= 0x15u)
    v6 = 0;
  else
    v6 = (llvm::Constant *)a4;
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
    return 0;
  if (a2 <= 0xFu)
    return (llvm::UndefValue *)llvm::ConstantExpr::getFCmp((llvm::ConstantExpr *)a2, v5, v6, 0);
  return llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)a2, (unsigned __int8 *)v5, v6, 0);
}

uint64_t sub_1C53DA8B0(uint64_t a1, llvm::GetElementPtrInst *a2, uint64_t a3, llvm::Value *a4, uint64_t a5, int a6)
{
  uint64_t v6;
  llvm::Value *i;

  if (a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    if (!a5)
      return llvm::ConstantExpr::getGetElementPtr(a2, (uint64_t *)a3, a4, a5, a6 != 0, 0, 0);
    v6 = 8 * a5;
    for (i = a4; *(unsigned __int8 *)(*(_QWORD *)i + 16) <= 0x14u; i = (llvm::Value *)((char *)i + 8))
    {
      v6 -= 8;
      if (!v6)
        return llvm::ConstantExpr::getGetElementPtr(a2, (uint64_t *)a3, a4, a5, a6 != 0, 0, 0);
    }
  }
  return 0;
}

llvm::Constant *sub_1C53DA91C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, llvm::Type *a5)
{
  llvm::ConstantExpr *v5;
  llvm::PoisonValue **v6;
  llvm::PoisonValue **v7;
  BOOL v8;

  if (a2[16] >= 0x15u)
    v5 = 0;
  else
    v5 = (llvm::ConstantExpr *)a2;
  if (*(unsigned __int8 *)(a3 + 16) >= 0x15u)
    v6 = 0;
  else
    v6 = (llvm::PoisonValue **)a3;
  if (*(unsigned __int8 *)(a4 + 16) >= 0x15u)
    v7 = 0;
  else
    v7 = (llvm::PoisonValue **)a4;
  if (v5)
    v8 = v6 == 0;
  else
    v8 = 1;
  if (v8 || v7 == 0)
    return 0;
  else
    return llvm::ConstantExpr::getSelect(v5, v6, v7, 0, a5);
}

llvm::ValueHandleBase *sub_1C53DA960(int a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4, llvm::Constant *a5)
{
  return llvm::ConstantExpr::getSub(this, a3, a4, a5);
}

llvm::ValueHandleBase *sub_1C53DA974(int a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4, llvm::Constant *a5)
{
  return llvm::ConstantExpr::getMul(this, a3, a4, a5);
}

llvm::ValueHandleBase *sub_1C53DA988(int a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  return llvm::ConstantExpr::getUDiv(this, a3, a4, a4);
}

uint64_t sub_1C53DA998(int a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  return llvm::ConstantExpr::getLShr(this, a3, a4, a4);
}

llvm::ValueHandleBase *sub_1C53DA9A8(int a1, llvm *this, llvm::Constant *a3, llvm::Constant *a4)
{
  unsigned __int8 v6;
  llvm::ValueHandleBase *result;
  _QWORD **v8;
  uint64_t v9;
  unsigned __int8 v10[2];
  __int16 v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[3];

  v6 = this;
  v17[2] = *MEMORY[0x1E0C80C00];
  result = llvm::ConstantFoldBinaryInstruction(this, a3, a4, a4);
  if (!result)
  {
    v8 = *(_QWORD ***)a3;
    if (*(_QWORD *)a3)
    {
      v17[0] = a3;
      v17[1] = a4;
      v9 = **v8 + 1512;
      v10[0] = v6;
      v10[1] = 0;
      v11 = 0;
      v12 = v17;
      v13 = 2;
      v14 = 0u;
      v15 = 0u;
      v16 = 0;
      return (llvm::ValueHandleBase *)sub_1C537D4FC(v9, (uint64_t)v8, v10);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C53DAA6C(uint64_t a1, int a2)
{
  return llvm::ConstantExpr::getCast(a2);
}

llvm::ConstantExpr *sub_1C53DAA80(int a1, llvm::ConstantExpr *this, llvm::Constant *a3)
{
  return llvm::ConstantExpr::getPointerCast(this, a3, a3);
}

uint64_t sub_1C53DAA8C(int a1, llvm::ConstantExpr *this, llvm::Type ***a3, llvm::Type *a4)
{
  return llvm::ConstantExpr::getIntegerCast(this, a3, a4);
}

llvm::UndefValue *sub_1C53DAA9C(int a1, llvm *this, llvm::Constant *a3)
{
  llvm::UndefValue *result;
  _QWORD **v6;
  uint64_t v7;
  uint64_t v8;
  _WORD v9[4];
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  result = llvm::ConstantFoldExtractElementInstruction(this, a3, a3);
  if (!result)
  {
    v6 = *(_QWORD ***)this;
    v7 = *(_QWORD *)(*(_QWORD *)this + 24);
    if (v7)
    {
      v15[0] = this;
      v15[1] = a3;
      v8 = **v6 + 1512;
      v9[0] = 61;
      v9[1] = 0;
      v10 = v15;
      v11 = 2;
      v12 = 0u;
      v13 = 0u;
      v14 = 0;
      return (llvm::UndefValue *)sub_1C537D4FC(v8, v7, (unsigned __int8 *)v9);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

llvm *sub_1C53DAB54(int a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4, llvm::Type *a5)
{
  return llvm::ConstantExpr::getInsertElement(this, a3, a4, 0, a5);
}

llvm::UndefValue *sub_1C53DAB68(uint64_t a1, llvm *a2, llvm *a3, int *a4, _BOOL8 a5)
{
  return llvm::ConstantExpr::getShuffleVector(a2, a3, a4, a5, 0);
}

uint64_t sub_1C53DAB80()
{
  return 0;
}

uint64_t sub_1C53DAB88()
{
  return 0;
}

uint64_t sub_1C53DAB90(uint64_t **a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  llvm::ValueSymbolTable *v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;

  if (a6)
  {
    v27 = 0;
    v28 = 48 * a6;
    v29 = (_QWORD *)(a5 + 32);
    do
    {
      v27 += (*v29 - *(v29 - 1)) >> 3;
      v29 += 6;
      v28 -= 48;
    }
    while (v28);
    v39 = a4 + 1;
    v30 = (v27 + a4 + 1);
    v38 = (16 * a6);
    if ((_DWORD)v38)
      v31 = (16 * (_DWORD)a6) | 8u;
    else
      v31 = 0;
    v32 = (char *)operator new(v31 + 32 * v30 + 80);
    v33 = &v32[v31];
    v18 = (uint64_t)&v32[32 * v30 + v31];
    *(_DWORD *)(v18 + 20) = v30 & 0x7FFFFFF | (((_DWORD)v38 != 0) << 31) | *(_DWORD *)(v18 + 20) & 0x38000000;
    if ((_DWORD)v30)
    {
      do
      {
        *(_QWORD *)v33 = 0;
        *((_QWORD *)v33 + 1) = 0;
        *((_QWORD *)v33 + 2) = 0;
        *((_QWORD *)v33 + 3) = v18;
        v33 += 32;
      }
      while (v33 != (char *)v18);
    }
    if ((_DWORD)v38)
      *(_QWORD *)&v32[v38] = v38;
    v34 = 0;
    if (a6)
    {
      v36 = 48 * a6;
      v37 = (_QWORD *)(a5 + 32);
      do
      {
        v34 += (*v37 - *(v37 - 1)) >> 3;
        v37 += 6;
        v36 -= 48;
      }
      while (v36);
    }
    *(_QWORD *)v18 = *a1[2];
    *(_QWORD *)(v18 + 8) = 0;
    v35 = *(_DWORD *)(v18 + 20) & 0xC0000000 | (v34 + v39) & 0x7FFFFFF;
    *(_DWORD *)(v18 + 16) = 84;
    *(_DWORD *)(v18 + 20) = v35;
  }
  else
  {
    v15 = (a4 + 1);
    v16 = (_DWORD)a4 == -1;
    v17 = operator new(32 * v15 + 80);
    v18 = (uint64_t)&v17[4 * v15];
    *(_DWORD *)(v18 + 20) = *(_DWORD *)(v18 + 20) & 0x38000000 | v15 & 0x7FFFFFF;
    if (!v16)
    {
      do
      {
        *v17 = 0;
        v17[1] = 0;
        v17[2] = 0;
        v17[3] = v18;
        v17 += 4;
      }
      while (v17 != (_QWORD *)v18);
    }
    *(_QWORD *)v18 = *a1[2];
    *(_QWORD *)(v18 + 8) = 0;
    v19 = *(_DWORD *)(v18 + 20) & 0xC0000000 | v15 & 0x7FFFFFF;
    *(_DWORD *)(v18 + 16) = 84;
    *(_DWORD *)(v18 + 20) = v19;
  }
  *(_OWORD *)(v18 + 24) = 0u;
  v20 = v18 + 24;
  *(_OWORD *)(v18 + 40) = 0u;
  *(_DWORD *)(v18 + 56) = 0;
  if (a8)
  {
    v22 = *(_QWORD *)(a8 + 40);
    v23 = (uint64_t *)(a8 + 24);
    *(_QWORD *)(v18 + 40) = v22;
    *(_WORD *)(v22 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(v18 + 23) & 0x10) != 0)
    {
      v25 = *(_QWORD *)(v22 + 56);
      if (v25)
      {
        v26 = *(llvm::ValueSymbolTable **)(v25 + 104);
        if (v26)
          llvm::ValueSymbolTable::reinsertValue(v26, (llvm::Value *)v18);
      }
    }
    v24 = *v23;
    *(_QWORD *)(v18 + 24) = *v23;
    *(_QWORD *)(v18 + 32) = v23;
    *(_QWORD *)(v24 + 8) = v20;
    *v23 = v20;
  }
  *(_QWORD *)(v18 + 64) = 0;
  llvm::CallInst::init((uint64_t ***)v18, a1, a2, a3, a4, a5, a6, a7);
  return v18;
}

void sub_1C53DADF4(uint64_t a1@<X0>, uint64_t a2@<X1>, const llvm::APInt *a3@<X2>, llvm::ValueHandleBase *a4@<X3>, unsigned int a5@<W4>, char *a6@<X5>, uint64_t a7@<X6>, llvm::ValueHandleBase ***a8@<X8>)
{
  unsigned int v12;
  uint64_t v13;
  void **v15;
  uint64_t v16;
  llvm::ConstantInt *v17;
  unint64_t v18;
  unint64_t v19;
  llvm::ValueHandleBase *v20;
  const llvm::APInt *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  llvm::ConstantInt *v25;
  unsigned int v26;
  unint64_t v27;
  llvm::ValueHandleBase *v28;
  _QWORD *v29;
  llvm::ValueHandleBase **v30;
  const llvm::APInt *v31;
  uint64_t v32;
  llvm::ConstantInt *v33;
  unsigned int v34;
  unint64_t v35;
  const llvm::APInt *v36;
  llvm::ValueHandleBase *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  llvm::ConstantInt *v41;
  unsigned int v42;
  unint64_t v43;
  llvm::ValueHandleBase *v44;
  const llvm::APInt *v45;
  llvm::ValueHandleBase **v46;
  char *v47;
  __int128 v48;
  llvm::ValueHandleBase **v49;
  char *v50;
  uint64_t v51;
  _BYTE *v52;
  llvm::ValueHandleBase **v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  _QWORD *v65;
  uint64_t v66;
  BOOL v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  llvm::ValueHandleBase **v73;
  uint64_t v74;
  llvm::ConstantInt *v75;
  const llvm::APInt *v76;
  llvm::ValueHandleBase *v77;
  llvm::ValueHandleBase **v78;
  llvm::ValueHandleBase **v79;
  llvm::ValueHandleBase **v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  llvm::ValueHandleBase **v86;
  llvm::ValueHandleBase *v87;
  uint64_t v88;
  llvm::ConstantInt *v89;
  llvm::ValueHandleBase *v90;
  llvm::ValueHandleBase **v91;
  llvm::ValueHandleBase **v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  llvm::ValueHandleBase **v97;
  char *v98;
  llvm::ValueHandleBase *v99;
  char *__src;
  void **v101;
  uint64_t v102;
  unint64_t v103;
  unsigned int v104;

  v12 = a3;
  v13 = a1;
  a8[1] = 0;
  a8[2] = 0;
  v15 = (void **)(a8 + 1);
  v16 = **(_QWORD **)(a1 + 64);
  v17 = *(llvm::ConstantInt **)(v16 + 1984);
  v18 = *(unsigned int *)(v16 + 1992);
  v104 = v18 >> 8;
  if (v18 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v103, a2, 0);
  }
  else
  {
    if (v18 <= 0xFF)
      v19 = 0;
    else
      v19 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v18);
    v103 = v19 & a2;
  }
  v20 = llvm::ConstantInt::get(v17, (llvm::LLVMContext *)&v103, a3);
  if (v104 >= 0x41 && v103)
    MEMORY[0x1CAA32F9C](v103, 0x1000C8000313F17);
  v22 = operator new(8uLL);
  *v22 = v20;
  v23 = **(_QWORD **)(v13 + 64);
  v24 = v12;
  v25 = *(llvm::ConstantInt **)(v23 + 1960);
  v26 = *(_DWORD *)(v23 + 1968);
  v104 = v26 >> 8;
  if (v26 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v103, v24, 0);
  }
  else
  {
    if (v26 <= 0xFF)
      v27 = 0;
    else
      v27 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v26);
    v103 = v27 & v24;
  }
  v28 = llvm::ConstantInt::get(v25, (llvm::LLVMContext *)&v103, v21);
  if (v104 >= 0x41 && v103)
    MEMORY[0x1CAA32F9C](v103, 0x1000C8000313F17);
  v29 = operator new(0x10uLL);
  *v29 = *v22;
  v29[1] = v28;
  operator delete(v22);
  v30 = (llvm::ValueHandleBase **)operator new(0x20uLL);
  v30[2] = a4;
  *(_OWORD *)v30 = *(_OWORD *)v29;
  *a8 = v30;
  a8[2] = v30 + 4;
  operator delete(v29);
  v32 = **(_QWORD **)(v13 + 64);
  v33 = *(llvm::ConstantInt **)(v32 + 1960);
  v34 = *(_DWORD *)(v32 + 1968);
  v104 = v34 >> 8;
  if (v34 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v103, a7, 0);
  }
  else
  {
    if (v34 <= 0xFF)
      LODWORD(v35) = 0;
    else
      v35 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v34);
    v103 = v35 & a7;
  }
  v37 = llvm::ConstantInt::get(v33, (llvm::LLVMContext *)&v103, v31);
  if (v104 >= 0x41 && v103)
    MEMORY[0x1CAA32F9C](v103, 0x1000C8000313F17);
  v30[3] = v37;
  v38 = *(uint64_t **)(v13 + 64);
  *v15 = v30 + 4;
  v39 = *v38;
  v40 = a5;
  v41 = *(llvm::ConstantInt **)(v39 + 1960);
  v42 = *(_DWORD *)(v39 + 1968);
  v104 = v42 >> 8;
  if (v42 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v103, v40, 0);
  }
  else
  {
    if (v42 <= 0xFF)
      v43 = 0;
    else
      v43 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v42);
    v103 = v43 & v40;
  }
  v44 = llvm::ConstantInt::get(v41, (llvm::LLVMContext *)&v103, v36);
  if (v104 >= 0x41 && v103)
    MEMORY[0x1CAA32F9C](v103, 0x1000C8000313F17);
  v46 = (llvm::ValueHandleBase **)operator new(0x40uLL);
  v46[4] = v44;
  v47 = (char *)(v46 + 5);
  v48 = *((_OWORD *)v30 + 1);
  *(_OWORD *)v46 = *(_OWORD *)v30;
  *((_OWORD *)v46 + 1) = v48;
  v49 = *a8;
  *a8 = v46;
  a8[2] = v46 + 8;
  if (v49)
  {
    operator delete(v49);
    v46 = *a8;
  }
  *v15 = v47;
  v102 = v13;
  if (a7 >= 1)
  {
    v50 = a6;
    v51 = v47 - (char *)v46;
    v52 = (char *)v46 + ((v47 - (char *)v46) & 0xFFFFFFFFFFFFFFF8);
    v53 = a8[2];
    if (a7 <= ((char *)v53 - v47) >> 3)
    {
      v59 = &v50[8 * a7];
      v60 = (v47 - v52) >> 3;
      if (v60 >= a7)
      {
        v62 = v47;
      }
      else
      {
        v61 = &v50[8 * v60];
        memmove(v47, v61, v59 - v61);
        v62 = &v47[v59 - v61];
        *v15 = v62;
        v13 = v102;
        if (v47 - v52 < 1)
          goto LABEL_56;
        v59 = v61;
      }
      v63 = &v52[8 * a7];
      v64 = &v62[-8 * a7];
      v65 = v62;
      if (v64 < v47)
      {
        v65 = v62;
        do
        {
          v66 = *(_QWORD *)v64;
          v64 += 8;
          *v65++ = v66;
        }
        while (v64 < v47);
      }
      *v15 = v65;
      if (v62 != v63)
        memmove(&v62[-8 * ((v62 - v63) >> 3)], v52, v62 - v63);
      v45 = (const llvm::APInt *)(v59 - v50);
      v67 = v59 == v50;
      v13 = v102;
      if (!v67)
        memmove(v52, v50, (size_t)v45);
    }
    else
    {
      v101 = v15;
      v54 = v51 >> 3;
      v55 = (v51 >> 3) + a7;
      if (v55 >> 61)
        goto LABEL_116;
      v56 = (char *)v53 - (char *)v46;
      if (v56 >> 2 > v55)
        v55 = v56 >> 2;
      if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
        v57 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v57 = v55;
      __src = (char *)v46 + ((v47 - (char *)v46) & 0xFFFFFFFFFFFFFFF8);
      if (v57)
      {
        if (v57 >> 61)
          goto LABEL_117;
        v58 = (char *)operator new(8 * v57);
      }
      else
      {
        v58 = 0;
      }
      v68 = &v58[8 * v54];
      memcpy(v68, v50, 8 * a7);
      v69 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8 * a7;
      if ((unint64_t)v51 >= 8)
      {
        v70 = v54;
        do
        {
          *(_QWORD *)&v58[v70 * 8 - 8] = v46[v70 - 1];
          --v70;
        }
        while (v70 * 8);
        v15 = v101;
        v47 = (char *)*v101;
        v68 = v58;
      }
      else
      {
        v15 = v101;
      }
      v71 = &v58[v69];
      v72 = &v58[8 * v57];
      if (v47 != __src)
        memmove(&v58[v69], __src, v47 - __src);
      v73 = *a8;
      *a8 = (llvm::ValueHandleBase **)v68;
      a8[1] = (llvm::ValueHandleBase **)&v71[v47 - __src];
      a8[2] = (llvm::ValueHandleBase **)v72;
      v13 = v102;
      if (v73)
        operator delete(v73);
    }
  }
LABEL_56:
  v74 = **(_QWORD **)(v13 + 64);
  v75 = *(llvm::ConstantInt **)(v74 + 1960);
  v104 = *(_DWORD *)(v74 + 1968) >> 8;
  if (v104 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v103, 0, 0);
  else
    v103 = 0;
  v77 = llvm::ConstantInt::get(v75, (llvm::LLVMContext *)&v103, v45);
  if (v104 >= 0x41 && v103)
    MEMORY[0x1CAA32F9C](v103, 0x1000C8000313F17);
  v78 = a8[1];
  v79 = a8[2];
  if (v78 >= v79)
  {
    v81 = (char *)*a8;
    v82 = v78 - *a8;
    v83 = v82 + 1;
    if ((unint64_t)(v82 + 1) >> 61)
      goto LABEL_116;
    if (((char *)v79 - v81) >> 2 > v83)
      v83 = ((char *)v79 - v81) >> 2;
    if ((unint64_t)((char *)v79 - v81) >= 0x7FFFFFFFFFFFFFF8)
      v84 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v84 = v83;
    if (v84)
    {
      if (v84 >> 61)
        goto LABEL_117;
      v85 = (char *)operator new(8 * v84);
    }
    else
    {
      v85 = 0;
    }
    v86 = (llvm::ValueHandleBase **)&v85[8 * v82];
    v79 = (llvm::ValueHandleBase **)&v85[8 * v84];
    *v86 = v77;
    v80 = v86 + 1;
    if (v78 != (llvm::ValueHandleBase **)v81)
    {
      do
      {
        v87 = *--v78;
        *--v86 = v87;
      }
      while (v78 != (llvm::ValueHandleBase **)v81);
      v78 = *a8;
    }
    *a8 = v86;
    a8[2] = v79;
    v13 = v102;
    if (v78)
      operator delete(v78);
  }
  else
  {
    *v78 = v77;
    v80 = v78 + 1;
  }
  *v15 = v80;
  v88 = **(_QWORD **)(v13 + 64);
  v89 = *(llvm::ConstantInt **)(v88 + 1960);
  v104 = *(_DWORD *)(v88 + 1968) >> 8;
  if (v104 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v103, 0, 0);
  else
    v103 = 0;
  v90 = llvm::ConstantInt::get(v89, (llvm::LLVMContext *)&v103, v76);
  if (v104 >= 0x41 && v103)
    MEMORY[0x1CAA32F9C](v103, 0x1000C8000313F17);
  if (v80 < v79)
  {
    *v80 = v90;
    v91 = v80 + 1;
    goto LABEL_97;
  }
  v92 = *a8;
  v93 = v80 - *a8;
  v94 = v93 + 1;
  if ((unint64_t)(v93 + 1) >> 61)
LABEL_116:
    abort();
  if (((char *)v79 - (char *)v92) >> 2 > v94)
    v94 = ((char *)v79 - (char *)v92) >> 2;
  if ((unint64_t)((char *)v79 - (char *)v92) >= 0x7FFFFFFFFFFFFFF8)
    v95 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v95 = v94;
  if (v95)
  {
    if (!(v95 >> 61))
    {
      v96 = (char *)operator new(8 * v95);
      goto LABEL_91;
    }
LABEL_117:
    sub_1C4764EE4();
  }
  v96 = 0;
LABEL_91:
  v97 = (llvm::ValueHandleBase **)&v96[8 * v93];
  v98 = &v96[8 * v95];
  *v97 = v90;
  v91 = v97 + 1;
  if (v80 == v92)
  {
    *a8 = v97;
    a8[1] = v91;
    a8[2] = (llvm::ValueHandleBase **)v98;
LABEL_96:
    operator delete(v80);
    goto LABEL_97;
  }
  do
  {
    v99 = *--v80;
    *--v97 = v99;
  }
  while (v80 != v92);
  v80 = *a8;
  *a8 = v97;
  a8[1] = v91;
  a8[2] = (llvm::ValueHandleBase **)v98;
  if (v80)
    goto LABEL_96;
LABEL_97:
  *v15 = v91;
}

void sub_1C53DB56C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  void *v9;
  uint64_t v10;
  _QWORD v11[17];

  v11[16] = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (*(_BYTE *)(a3 + 16))
  {
    v9 = v11;
    v10 = 0x1000000000;
    sub_1C623C324((unsigned int *)&v9, (uint64_t)v11, *(uint64_t **)a3, (uint64_t *)(*(_QWORD *)a3 + 8 * *(_QWORD *)(a3 + 8)));
    sub_1C623C1C4(a1, v9, v10);
    if (v9 != v11)
      free(v9);
  }
  if (*(_BYTE *)(a2 + 16))
  {
    v9 = v11;
    v10 = 0x1000000000;
    sub_1C623C324((unsigned int *)&v9, (uint64_t)v11, *(uint64_t **)a2, (uint64_t *)(*(_QWORD *)a2 + 8 * *(_QWORD *)(a2 + 8)));
    sub_1C623C230(a1, v9, v10);
    if (v9 != v11)
      free(v9);
  }
  if (a5)
  {
    v9 = v11;
    v10 = 0x1000000000;
    sub_1C623C324((unsigned int *)&v9, (uint64_t)v11, a4, &a4[a5]);
    sub_1C623C2B4(a1, v9, v10);
    if (v9 != v11)
      free(v9);
  }
}

uint64_t sub_1C53DB6E8(uint64_t *a1, const void *a2, unsigned int a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *v14;
  void *__p;
  char *v17;
  char *v18;
  char *v19;
  uint64_t *v20;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    abort();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v8 = 0x555555555555555;
  else
    v8 = v4;
  v20 = a1 + 2;
  if (v8)
  {
    if (v8 > 0x555555555555555)
      sub_1C4764EE4();
    v9 = (char *)operator new(48 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[48 * v3];
  __p = v9;
  v17 = v10;
  v19 = &v9[48 * v8];
  *(_QWORD *)v10 = 0x74706F6564;
  v10[23] = 5;
  *((_QWORD *)v10 + 4) = 0;
  *((_QWORD *)v10 + 5) = 0;
  *((_QWORD *)v10 + 3) = 0;
  sub_1C4DFE394((_QWORD *)v10 + 3, a2, (uint64_t)a2 + 8 * a3, a3);
  v18 = v10 + 48;
  sub_1C5010A18(a1, &__p);
  v11 = a1[1];
  v12 = v17;
  while (1)
  {
    v13 = v18;
    if (v18 == v12)
      break;
    v18 -= 48;
    v14 = (void *)*((_QWORD *)v13 - 3);
    if (v14)
    {
      *((_QWORD *)v13 - 2) = v14;
      operator delete(v14);
    }
    if (*(v13 - 25) < 0)
      operator delete(*((void **)v13 - 6));
  }
  if (__p)
    operator delete(__p);
  return v11;
}

uint64_t sub_1C53DB858(uint64_t *a1, const void *a2, unsigned int a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *v14;
  void *__p;
  char *v17;
  char *v18;
  char *v19;
  uint64_t *v20;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    abort();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v8 = 0x555555555555555;
  else
    v8 = v4;
  v20 = a1 + 2;
  if (v8)
  {
    if (v8 > 0x555555555555555)
      sub_1C4764EE4();
    v9 = (char *)operator new(48 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[48 * v3];
  __p = v9;
  v17 = v10;
  v19 = &v9[48 * v8];
  strcpy(v10, "gc-transition");
  v10[23] = 13;
  *((_QWORD *)v10 + 4) = 0;
  *((_QWORD *)v10 + 5) = 0;
  *((_QWORD *)v10 + 3) = 0;
  sub_1C4DFE394((_QWORD *)v10 + 3, a2, (uint64_t)a2 + 8 * a3, a3);
  v18 = v10 + 48;
  sub_1C5010A18(a1, &__p);
  v11 = a1[1];
  v12 = v17;
  while (1)
  {
    v13 = v18;
    if (v18 == v12)
      break;
    v18 -= 48;
    v14 = (void *)*((_QWORD *)v13 - 3);
    if (v14)
    {
      *((_QWORD *)v13 - 2) = v14;
      operator delete(v14);
    }
    if (*(v13 - 25) < 0)
      operator delete(*((void **)v13 - 6));
  }
  if (__p)
    operator delete(__p);
  return v11;
}

uint64_t sub_1C53DB9E0(uint64_t *a1, const void *a2, unsigned int a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *v14;
  void *__p;
  char *v17;
  char *v18;
  char *v19;
  uint64_t *v20;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    abort();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v8 = 0x555555555555555;
  else
    v8 = v4;
  v20 = a1 + 2;
  if (v8)
  {
    if (v8 > 0x555555555555555)
      sub_1C4764EE4();
    v9 = (char *)operator new(48 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[48 * v3];
  __p = v9;
  v17 = v10;
  v19 = &v9[48 * v8];
  *(_QWORD *)v10 = 0x6576696C2D6367;
  v10[23] = 7;
  *((_QWORD *)v10 + 4) = 0;
  *((_QWORD *)v10 + 5) = 0;
  *((_QWORD *)v10 + 3) = 0;
  sub_1C4DFE394((_QWORD *)v10 + 3, a2, (uint64_t)a2 + 8 * a3, a3);
  v18 = v10 + 48;
  sub_1C5010A18(a1, &__p);
  v11 = a1[1];
  v12 = v17;
  while (1)
  {
    v13 = v18;
    if (v18 == v12)
      break;
    v18 -= 48;
    v14 = (void *)*((_QWORD *)v13 - 3);
    if (v14)
    {
      *((_QWORD *)v13 - 2) = v14;
      operator delete(v14);
    }
    if (*(v13 - 25) < 0)
      operator delete(*((void **)v13 - 6));
  }
  if (__p)
    operator delete(__p);
  return v11;
}

void sub_1C53DBB54(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  void *v9;
  uint64_t v10;
  _QWORD v11[17];

  v11[16] = *MEMORY[0x1E0C80C00];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    v9 = v11;
    v10 = 0x1000000000;
    sub_1C53DBCCC((unsigned int *)&v9, (uint64_t)v11, *(char **)a2, (char *)(*(_QWORD *)a2 + 32 * *(_QWORD *)(a2 + 8)));
    sub_1C623C1C4(a5, v9, v10);
    if (v9 != v11)
      free(v9);
  }
  if (*(_BYTE *)(a1 + 16))
  {
    v9 = v11;
    v10 = 0x1000000000;
    sub_1C53DBCCC((unsigned int *)&v9, (uint64_t)v11, *(char **)a1, (char *)(*(_QWORD *)a1 + 32 * *(_QWORD *)(a1 + 8)));
    sub_1C623C230(a5, v9, v10);
    if (v9 != v11)
      free(v9);
  }
  if (a4)
  {
    v9 = v11;
    v10 = 0x1000000000;
    sub_1C623C324((unsigned int *)&v9, (uint64_t)v11, a3, &a3[a4]);
    sub_1C623C2B4(a5, v9, v10);
    if (v9 != v11)
      free(v9);
  }
}

uint64_t sub_1C53DBCCC(unsigned int *a1, uint64_t a2, char *a3, char *a4)
{
  char *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  char *v12;
  unint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;

  v5 = a3;
  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 3;
  v9 = a1[2];
  if (*(_QWORD *)a1 + 8 * v9 == a2)
  {
    sub_1C509DA3C((uint64_t)a1, a3, a4);
    return *(_QWORD *)a1 + 8 * v8;
  }
  else
  {
    v10 = (a4 - a3) >> 5;
    if (v9 + v10 > a1[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 4), v9 + v10, 8);
      v7 = *(_QWORD *)a1;
      v9 = a1[2];
    }
    v11 = (_BYTE *)(v7 + 8 * v8);
    v12 = (char *)(v7 + 8 * v9);
    v13 = (v12 - v11) >> 3;
    if (v13 >= v10)
    {
      sub_1C6177054(a1, &v12[-8 * v10], (char *)(v7 + 8 * v9));
      if (&v12[-8 * v10] != v11)
        memmove(&v11[8 * v10], v11, &v12[-8 * v10] - v11);
      if (v5 != a4)
      {
        v19 = v11;
        do
        {
          v20 = *(_QWORD *)v5;
          v5 += 32;
          *v19++ = v20;
        }
        while (v5 != a4);
      }
    }
    else
    {
      v14 = v9 + ((unint64_t)(a4 - v5) >> 5);
      a1[2] = v14;
      if (v8 != v9)
      {
        memcpy((void *)(v7 + 8 * v14 - 8 * v13), v11, v12 - v11);
        v15 = v11;
        do
        {
          v16 = *(_QWORD *)v5;
          v5 += 32;
          *v15++ = v16;
          --v13;
        }
        while (v13);
      }
      while (v5 != a4)
      {
        v17 = *(_QWORD *)v5;
        v5 += 32;
        *(_QWORD *)v12 = v17;
        v12 += 8;
      }
    }
  }
  return (uint64_t)v11;
}

void sub_1C53DBE28(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  _QWORD *v12;
  uint64_t v13;
  llvm::ConstantInt *v14;
  unint64_t v15;
  unint64_t v16;
  llvm::ValueHandleBase *v17;
  const llvm::APInt *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  llvm::ConstantInt *v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  llvm::ValueHandleBase *v26;
  _QWORD *v27;
  char *v28;
  void *v29;
  const llvm::APInt *v30;
  char *v31;
  llvm::ValueHandleBase **v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  llvm::ConstantInt *v45;
  unint64_t v46;
  unint64_t v47;
  const llvm::APInt *v48;
  llvm::ValueHandleBase *v49;
  unint64_t v50;
  llvm::ValueHandleBase **v51;
  llvm::ValueHandleBase **v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  llvm::ValueHandleBase **v58;
  char *v59;
  llvm::ValueHandleBase *v60;
  uint64_t v61;
  llvm::ConstantInt *v62;
  llvm::ValueHandleBase *v63;
  unint64_t v64;
  uint64_t v65;
  llvm::ValueHandleBase **v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  llvm::ValueHandleBase **v72;
  char *v73;
  llvm::ValueHandleBase *v74;
  const llvm::APInt *v75;
  uint64_t v76;
  llvm::ConstantInt *v77;
  const llvm::APInt *v78;
  llvm::ValueHandleBase *v79;
  unint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  llvm::ValueHandleBase **v89;
  llvm::ValueHandleBase *v90;
  uint64_t v91;
  llvm::ConstantInt *v92;
  llvm::ValueHandleBase *v93;
  unint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  llvm::ValueHandleBase **v103;
  llvm::ValueHandleBase *v104;
  uint64_t v106;
  unint64_t v107;
  unsigned int v108;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v12 = (_QWORD *)(a1 + 8);
  v13 = **(_QWORD **)(a2 + 64);
  v14 = *(llvm::ConstantInt **)(v13 + 1984);
  v15 = *(unsigned int *)(v13 + 1992);
  v108 = v15 >> 8;
  if (v15 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v107, a3, 0);
  }
  else
  {
    if (v15 <= 0xFF)
      v16 = 0;
    else
      v16 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v15);
    v107 = v16 & a3;
  }
  v17 = llvm::ConstantInt::get(v14, (llvm::LLVMContext *)&v107, (const llvm::APInt *)a3);
  if (v108 >= 0x41 && v107)
    MEMORY[0x1CAA32F9C](v107, 0x1000C8000313F17);
  v19 = operator new(8uLL);
  *v19 = v17;
  *(_QWORD *)a1 = v19;
  v20 = **(_QWORD **)(a2 + 64);
  v21 = a4;
  v22 = *(llvm::ConstantInt **)(v20 + 1960);
  v23 = *(_DWORD *)(v20 + 1968);
  v108 = v23 >> 8;
  v106 = a2;
  if (v23 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v107, v21, 0);
  }
  else
  {
    if (v23 <= 0xFF)
      v24 = 0;
    else
      v24 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v23);
    v107 = v24 & v21;
  }
  v25 = a7;
  v26 = llvm::ConstantInt::get(v22, (llvm::LLVMContext *)&v107, v18);
  if (v108 >= 0x41 && v107)
    MEMORY[0x1CAA32F9C](v107, 0x1000C8000313F17);
  v27 = operator new(0x10uLL);
  *v27 = *v19;
  v27[1] = v26;
  v28 = (char *)(v27 + 2);
  v29 = *(void **)a1;
  *(_QWORD *)a1 = v27;
  *(_QWORD *)(a1 + 16) = v27 + 2;
  if (v29)
  {
    operator delete(v29);
    v31 = *(char **)(a1 + 16);
    if (v28 < v31)
    {
      v27[2] = a5;
      v32 = (llvm::ValueHandleBase **)(v27 + 3);
      v33 = a7;
      goto LABEL_32;
    }
    v34 = *(_BYTE **)a1;
  }
  else
  {
    *v12 = v28;
    v34 = v27;
    v31 = (char *)(v27 + 2);
  }
  v35 = (v28 - v34) >> 3;
  v36 = v35 + 1;
  if ((unint64_t)(v35 + 1) >> 61)
    goto LABEL_136;
  v37 = v31 - v34;
  if (v37 >> 2 > v36)
    v36 = v37 >> 2;
  if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
    v38 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v38 = v36;
  if (v38)
  {
    if (v38 >> 61)
      goto LABEL_137;
    v39 = (char *)operator new(8 * v38);
  }
  else
  {
    v39 = 0;
  }
  v40 = &v39[8 * v35];
  v41 = &v39[8 * v38];
  *(_QWORD *)v40 = a5;
  v32 = (llvm::ValueHandleBase **)(v40 + 8);
  if (v28 == v34)
  {
    *(_QWORD *)a1 = v40;
    *(_QWORD *)(a1 + 16) = v41;
    v34 = v27 + 2;
    v33 = v25;
    goto LABEL_31;
  }
  v42 = ((char *)v27 - v34 + 8) & 0xFFFFFFFFFFFFFFF8;
  v43 = &v39[v28 - v34 - v42 - 8];
  memcpy(v43, (char *)v27 - v42 + 8, v42 + 8);
  *(_QWORD *)a1 = v43;
  *(_QWORD *)(a1 + 16) = v41;
  v33 = v25;
  if (v34)
LABEL_31:
    operator delete(v34);
LABEL_32:
  *v12 = v32;
  v44 = **(_QWORD **)(v106 + 64);
  v45 = *(llvm::ConstantInt **)(v44 + 1960);
  v46 = *(unsigned int *)(v44 + 1968);
  v108 = v46 >> 8;
  if (v46 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v107, v33, 0);
  }
  else
  {
    if (v46 <= 0xFF)
      LODWORD(v47) = 0;
    else
      v47 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v46);
    v107 = v47 & v33;
  }
  v49 = llvm::ConstantInt::get(v45, (llvm::LLVMContext *)&v107, v30);
  if (v108 >= 0x41 && v107)
    MEMORY[0x1CAA32F9C](v107, 0x1000C8000313F17);
  v50 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v32 < v50)
  {
    *v32 = v49;
    v51 = v32 + 1;
    goto LABEL_56;
  }
  v52 = *(llvm::ValueHandleBase ***)a1;
  v53 = ((uint64_t)v32 - *(_QWORD *)a1) >> 3;
  v54 = v53 + 1;
  if ((unint64_t)(v53 + 1) >> 61)
    goto LABEL_136;
  v55 = v50 - (_QWORD)v52;
  if (v55 >> 2 > v54)
    v54 = v55 >> 2;
  if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
    v56 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v56 = v54;
  if (v56)
  {
    if (v56 >> 61)
      goto LABEL_137;
    v57 = (char *)operator new(8 * v56);
  }
  else
  {
    v57 = 0;
  }
  v58 = (llvm::ValueHandleBase **)&v57[8 * v53];
  v59 = &v57[8 * v56];
  *v58 = v49;
  v51 = v58 + 1;
  if (v32 == v52)
  {
    *(_QWORD *)a1 = v58;
    *(_QWORD *)(a1 + 8) = v51;
    *(_QWORD *)(a1 + 16) = v59;
LABEL_55:
    operator delete(v32);
    goto LABEL_56;
  }
  do
  {
    v60 = *--v32;
    *--v58 = v60;
  }
  while (v32 != v52);
  v32 = *(llvm::ValueHandleBase ***)a1;
  *(_QWORD *)a1 = v58;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v59;
  if (v32)
    goto LABEL_55;
LABEL_56:
  *v12 = v51;
  v61 = **(_QWORD **)(v106 + 64);
  v62 = *(llvm::ConstantInt **)(v61 + 1960);
  v108 = *(_DWORD *)(v61 + 1968) >> 8;
  if (v108 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v107, 0, 0);
  else
    v107 = 0;
  v63 = llvm::ConstantInt::get(v62, (llvm::LLVMContext *)&v107, v48);
  if (v108 >= 0x41 && v107)
    MEMORY[0x1CAA32F9C](v107, 0x1000C8000313F17);
  v64 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v51 < v64)
  {
    *v51 = v63;
    v65 = (uint64_t)(v51 + 1);
    goto LABEL_77;
  }
  v66 = *(llvm::ValueHandleBase ***)a1;
  v67 = ((uint64_t)v51 - *(_QWORD *)a1) >> 3;
  v68 = v67 + 1;
  if ((unint64_t)(v67 + 1) >> 61)
    goto LABEL_136;
  v69 = v64 - (_QWORD)v66;
  if (v69 >> 2 > v68)
    v68 = v69 >> 2;
  if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
    v70 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v70 = v68;
  if (v70)
  {
    if (v70 >> 61)
      goto LABEL_137;
    v71 = (char *)operator new(8 * v70);
  }
  else
  {
    v71 = 0;
  }
  v72 = (llvm::ValueHandleBase **)&v71[8 * v67];
  v73 = &v71[8 * v70];
  *v72 = v63;
  v65 = (uint64_t)(v72 + 1);
  if (v51 == v66)
  {
    *(_QWORD *)a1 = v72;
    *(_QWORD *)(a1 + 8) = v65;
    *(_QWORD *)(a1 + 16) = v73;
LABEL_76:
    operator delete(v51);
    goto LABEL_77;
  }
  do
  {
    v74 = *--v51;
    *--v72 = v74;
  }
  while (v51 != v66);
  v51 = *(llvm::ValueHandleBase ***)a1;
  *(_QWORD *)a1 = v72;
  *(_QWORD *)(a1 + 8) = v65;
  *(_QWORD *)(a1 + 16) = v73;
  if (v51)
    goto LABEL_76;
LABEL_77:
  *(_QWORD *)(a1 + 8) = v65;
  sub_1C5063264((char **)a1, v65, a6, &a6[4 * v33], v33);
  v76 = **(_QWORD **)(v106 + 64);
  v77 = *(llvm::ConstantInt **)(v76 + 1960);
  v108 = *(_DWORD *)(v76 + 1968) >> 8;
  if (v108 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v107, 0, 0);
  else
    v107 = 0;
  v79 = llvm::ConstantInt::get(v77, (llvm::LLVMContext *)&v107, v75);
  if (v108 >= 0x41 && v107)
    MEMORY[0x1CAA32F9C](v107, 0x1000C8000313F17);
  v81 = *(char **)(a1 + 8);
  v80 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v81 >= v80)
  {
    v83 = *(char **)a1;
    v84 = (uint64_t)&v81[-*(_QWORD *)a1] >> 3;
    v85 = v84 + 1;
    if ((unint64_t)(v84 + 1) >> 61)
      goto LABEL_136;
    v86 = v80 - (_QWORD)v83;
    if (v86 >> 2 > v85)
      v85 = v86 >> 2;
    if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8)
      v87 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v87 = v85;
    if (v87)
    {
      if (v87 >> 61)
        goto LABEL_137;
      v88 = (char *)operator new(8 * v87);
    }
    else
    {
      v88 = 0;
    }
    v89 = (llvm::ValueHandleBase **)&v88[8 * v84];
    *v89 = v79;
    v82 = (char *)(v89 + 1);
    if (v81 != v83)
    {
      do
      {
        v90 = (llvm::ValueHandleBase *)*((_QWORD *)v81 - 1);
        v81 -= 8;
        *--v89 = v90;
      }
      while (v81 != v83);
      v81 = *(char **)a1;
    }
    *(_QWORD *)a1 = v89;
    *(_QWORD *)(a1 + 8) = v82;
    *(_QWORD *)(a1 + 16) = &v88[8 * v87];
    if (v81)
      operator delete(v81);
  }
  else
  {
    *(_QWORD *)v81 = v79;
    v82 = v81 + 8;
  }
  *v12 = v82;
  v91 = **(_QWORD **)(v106 + 64);
  v92 = *(llvm::ConstantInt **)(v91 + 1960);
  v108 = *(_DWORD *)(v91 + 1968) >> 8;
  if (v108 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v107, 0, 0);
  else
    v107 = 0;
  v93 = llvm::ConstantInt::get(v92, (llvm::LLVMContext *)&v107, v78);
  if (v108 >= 0x41 && v107)
    MEMORY[0x1CAA32F9C](v107, 0x1000C8000313F17);
  v95 = *(char **)(a1 + 8);
  v94 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v95 < v94)
  {
    *(_QWORD *)v95 = v93;
    v96 = v95 + 8;
    goto LABEL_117;
  }
  v97 = *(char **)a1;
  v98 = (uint64_t)&v95[-*(_QWORD *)a1] >> 3;
  v99 = v98 + 1;
  if ((unint64_t)(v98 + 1) >> 61)
LABEL_136:
    abort();
  v100 = v94 - (_QWORD)v97;
  if (v100 >> 2 > v99)
    v99 = v100 >> 2;
  if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF8)
    v101 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v101 = v99;
  if (!v101)
  {
    v102 = 0;
    goto LABEL_112;
  }
  if (v101 >> 61)
LABEL_137:
    sub_1C4764EE4();
  v102 = (char *)operator new(8 * v101);
LABEL_112:
  v103 = (llvm::ValueHandleBase **)&v102[8 * v98];
  *v103 = v93;
  v96 = (char *)(v103 + 1);
  if (v95 != v97)
  {
    do
    {
      v104 = (llvm::ValueHandleBase *)*((_QWORD *)v95 - 1);
      v95 -= 8;
      *--v103 = v104;
    }
    while (v95 != v97);
    v95 = *(char **)a1;
  }
  *(_QWORD *)a1 = v103;
  *(_QWORD *)(a1 + 8) = v96;
  *(_QWORD *)(a1 + 16) = &v102[8 * v101];
  if (v95)
    operator delete(v95);
LABEL_117:
  *v12 = v96;
}

llvm::PrintModulePass *llvm::PrintModulePass::PrintModulePass(llvm::PrintModulePass *this)
{
  *(_QWORD *)this = llvm::dbgs(this);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  return this;
}

{
  *(_QWORD *)this = llvm::dbgs(this);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  return this;
}

uint64_t llvm::PrintModulePass::PrintModulePass(uint64_t a1, uint64_t a2, __int128 *a3, char a4)
{
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)a1 = a2;
  v6 = a1 + 8;
  if (*((char *)a3 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)v6, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    *(_QWORD *)(v6 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v6 = v7;
  }
  *(_BYTE *)(a1 + 32) = a4;
  return a1;
}

{
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)a1 = a2;
  v6 = a1 + 8;
  if (*((char *)a3 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)v6, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    *(_QWORD *)(v6 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v6 = v7;
  }
  *(_BYTE *)(a1 + 32) = a4;
  return a1;
}

_QWORD *llvm::PrintModulePass::run@<X0>(uint64_t a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X8>)
{
  char v6;
  const std::string *size;
  char v8;
  llvm::Function *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Function **v14;
  llvm::Function *v15;
  int v16;
  int v17;
  llvm::Function *v18;
  char *v19;
  size_t v20;
  size_t v21;
  char v22;
  const char *v23;
  size_t v24;
  llvm::raw_ostream *v25;
  _BYTE *v26;
  const char *v27;
  size_t v28;
  llvm::raw_ostream *v29;
  _BYTE *v30;

  if (llvm::isFunctionInPrintList("*", 1uLL))
  {
    v6 = *(_BYTE *)(a1 + 31);
    if (v6 < 0)
    {
      if (!*(_QWORD *)(a1 + 16))
      {
LABEL_48:
        llvm::Module::print(a2, *(llvm::raw_ostream **)a1, 0, *(_BYTE *)(a1 + 32), 0);
        goto LABEL_49;
      }
    }
    else if (!*(_BYTE *)(a1 + 31))
    {
      goto LABEL_48;
    }
    if (v6 >= 0)
      v27 = (const char *)(a1 + 8);
    else
      v27 = *(const char **)(a1 + 8);
    if (v6 >= 0)
      v28 = *(unsigned __int8 *)(a1 + 31);
    else
      v28 = *(_QWORD *)(a1 + 16);
    v29 = llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, v27, v28);
    v30 = (_BYTE *)*((_QWORD *)v29 + 4);
    if (*((_BYTE **)v29 + 3) == v30)
    {
      llvm::raw_ostream::write(v29, "\n", 1uLL);
    }
    else
    {
      *v30 = 10;
      ++*((_QWORD *)v29 + 4);
    }
    goto LABEL_48;
  }
  size = (const std::string *)a2[1].__r_.__value_.__l.__size_;
  if (size != &a2[1])
  {
    v8 = 0;
    while (1)
    {
      v9 = size ? (llvm::Function *)&size[-3].__r_.__value_.__r.__words[2] : 0;
      if ((*((_BYTE *)v9 + 23) & 0x10) != 0)
        break;
      v20 = 0;
      v19 = &byte_1C871356D;
LABEL_19:
      if (llvm::isFunctionInPrintList(v19, v20))
      {
        if ((v8 & 1) != 0)
          goto LABEL_23;
        v22 = *(_BYTE *)(a1 + 31);
        if (v22 < 0)
        {
          if (*(_QWORD *)(a1 + 16))
          {
LABEL_26:
            if (v22 >= 0)
              v23 = (const char *)(a1 + 8);
            else
              v23 = *(const char **)(a1 + 8);
            if (v22 >= 0)
              v24 = *(unsigned __int8 *)(a1 + 31);
            else
              v24 = *(_QWORD *)(a1 + 16);
            v25 = llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, v23, v24);
            v26 = (_BYTE *)*((_QWORD *)v25 + 4);
            if (*((_BYTE **)v25 + 3) == v26)
            {
              v8 = 1;
              llvm::raw_ostream::write(v25, "\n", 1uLL);
            }
            else
            {
              *v26 = 10;
              ++*((_QWORD *)v25 + 4);
LABEL_23:
              v8 = 1;
            }
LABEL_37:
            llvm::Function::print(v9, *(llvm::raw_ostream **)a1, 0, 0, 0);
            goto LABEL_20;
          }
        }
        else if (*(_BYTE *)(a1 + 31))
        {
          goto LABEL_26;
        }
        v8 = 0;
        goto LABEL_37;
      }
LABEL_20:
      size = (const std::string *)size->__r_.__value_.__l.__size_;
      if (size == &a2[1])
        goto LABEL_49;
    }
    v10 = ***(_QWORD ***)v9;
    v11 = *(_QWORD *)(v10 + 152);
    v12 = *(unsigned int *)(v10 + 168);
    if ((_DWORD)v12)
    {
      LODWORD(v13) = (v12 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      v14 = (llvm::Function **)(v11 + 16 * v13);
      v15 = *v14;
      if (*v14 == v9)
      {
LABEL_18:
        v18 = v14[1];
        v21 = *(_QWORD *)v18;
        v19 = (char *)v18 + 16;
        v20 = v21;
        goto LABEL_19;
      }
      v16 = 1;
      while (v15 != (llvm::Function *)-4096)
      {
        v17 = v13 + v16++;
        v13 = v17 & (v12 - 1);
        v15 = *(llvm::Function **)(v11 + 16 * v13);
        if (v15 == v9)
        {
          v14 = (llvm::Function **)(v11 + 16 * v13);
          goto LABEL_18;
        }
      }
    }
    v14 = (llvm::Function **)(v11 + 16 * v12);
    goto LABEL_18;
  }
LABEL_49:
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

llvm::PrintFunctionPass *llvm::PrintFunctionPass::PrintFunctionPass(llvm::PrintFunctionPass *this)
{
  *(_QWORD *)this = llvm::dbgs(this);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  return this;
}

{
  *(_QWORD *)this = llvm::dbgs(this);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  return this;
}

_QWORD *llvm::PrintFunctionPass::PrintFunctionPass(_QWORD *a1, uint64_t a2, __int128 *a3)
{
  _QWORD *v4;
  __int128 v5;

  *a1 = a2;
  v4 = a1 + 1;
  if (*((char *)a3 + 23) < 0)
  {
    sub_1C47EBC30(v4, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    v4[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)v4 = v5;
  }
  return a1;
}

{
  _QWORD *v4;
  __int128 v5;

  *a1 = a2;
  v4 = a1 + 1;
  if (*((char *)a3 + 23) < 0)
  {
    sub_1C47EBC30(v4, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    v4[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)v4 = v5;
  }
  return a1;
}

uint64_t sub_1C53DCA3C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Print module to stderr";
  *(_QWORD *)(v2 + 8) = 22;
  *(_QWORD *)(v2 + 16) = "print-module";
  *(_QWORD *)(v2 + 24) = 12;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F7098;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C53DCC94;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C53DCAD0(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Print function to stderr";
  *(_QWORD *)(v2 + 8) = 24;
  *(_QWORD *)(v2 + 16) = "print-function";
  *(_QWORD *)(v2 + 24) = 14;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F7099;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C53DCE2C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::createPrintModulePass(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  _BYTE *v7;

  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = &unk_1EF8F7098;
  *(_DWORD *)(v6 + 24) = 4;
  *(_QWORD *)v6 = off_1E8167A30;
  *(_QWORD *)(v6 + 32) = a1;
  v7 = (_BYTE *)(v6 + 40);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1C47EBC30(v7, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)a2;
    *(_QWORD *)(v6 + 56) = *(_QWORD *)(a2 + 16);
  }
  *(_BYTE *)(v6 + 64) = a3;
  return v6;
}

uint64_t llvm::createPrintFunctionPass(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;

  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = &unk_1EF8F7099;
  *(_DWORD *)(v4 + 24) = 2;
  *(_QWORD *)v4 = off_1E8167AD0;
  *(_QWORD *)(v4 + 32) = a1;
  v5 = (_BYTE *)(v4 + 40);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1C47EBC30(v5, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)a2;
    *(_QWORD *)(v4 + 56) = *(_QWORD *)(a2 + 16);
  }
  return v4;
}

uint64_t sub_1C53DCC94()
{
  uint64_t v0;

  v0 = operator new();
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = &unk_1EF8F7098;
  *(_DWORD *)(v0 + 24) = 4;
  *(_QWORD *)v0 = off_1E8167A30;
  *(_QWORD *)(v0 + 32) = llvm::dbgs((llvm *)v0);
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0;
  return v0;
}

void sub_1C53DCCF8(void **this)
{
  *this = off_1E8167A30;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1C53DCD34(void **this)
{
  *this = off_1E8167A30;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C53DCD84()
{
  return "Print Module IR";
}

void sub_1C53DCD94(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

uint64_t sub_1C53DCDA0(uint64_t a1, const std::string *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7[2];
  int v8;
  uint64_t v9[2];
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v9[0] = 0;
  v9[1] = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  llvm::PrintModulePass::run(a1 + 32, a2, (uint64_t)&v3);
  if (v6 != v5)
    free(v6);
  if (v4 != v3)
    free(v4);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v9);
  sub_1C4D8B52C(v7);
  return 0;
}

uint64_t sub_1C53DCE2C()
{
  uint64_t v0;

  v0 = operator new();
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = &unk_1EF8F7099;
  *(_DWORD *)(v0 + 24) = 2;
  *(_QWORD *)v0 = off_1E8167AD0;
  *(_QWORD *)(v0 + 32) = llvm::dbgs((llvm *)v0);
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0;
  return v0;
}

void sub_1C53DCE90(void **this)
{
  *this = off_1E8167AD0;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1C53DCECC(void **this)
{
  *this = off_1E8167AD0;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  llvm::Pass::~Pass((llvm::Pass *)this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C53DCF1C()
{
  return "Print Function IR";
}

void sub_1C53DCF2C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

uint64_t sub_1C53DCF38(uint64_t a1, const std::string **a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7[2];
  int v8;
  uint64_t v9[2];
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v9[0] = 0;
  v9[1] = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  llvm::PrintFunctionPass::run(a2, a1 + 32, (uint64_t)&v3);
  if (v6 != v5)
    free(v6);
  if (v4 != v3)
    free(v4);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v9);
  sub_1C4D8B52C(v7);
  return 0;
}

void llvm::GenericSSAContext<llvm::Function>::print(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  a2[3] = a2;
  *a2 = &off_1E8167B70;
  a2[1] = a1;
}

{
  a2[3] = a2;
  *a2 = &off_1E8167B70;
  a2[1] = a1;
}

void llvm::GenericSSAContext<llvm::Function>::print(uint64_t a1@<X1>, uint64_t (***a2)()@<X8>)
{
  int v2;
  uint64_t (**v3)();

  v2 = *(_DWORD *)(a1 + 20);
  a2[3] = (uint64_t (**)())a2;
  if ((v2 & 0x10000000) != 0)
    v3 = &off_1E8167BB8;
  else
    v3 = &off_1E8167C00;
  *a2 = v3;
  a2[1] = (uint64_t (**)())a1;
}

void sub_1C53DD018()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C53DD02C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8167B70;
  result[1] = v3;
  return result;
}

uint64_t sub_1C53DD060(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8167B70;
  a2[1] = v2;
  return result;
}

void sub_1C53DD07C(uint64_t a1, llvm::raw_ostream *a2)
{
  llvm::Value::print(*(llvm::Value **)(a1 + 8), a2, 0);
}

void sub_1C53DD08C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C53DD0A0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8167BB8;
  result[1] = v3;
  return result;
}

uint64_t sub_1C53DD0D4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8167BB8;
  a2[1] = v2;
  return result;
}

llvm::raw_ostream *sub_1C53DD0F0(llvm::raw_ostream *result, llvm::raw_ostream *this)
{
  uint64_t ***v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ****v8;
  uint64_t ***v9;
  int v10;
  int v11;
  unint64_t *v12;
  const void *v13;
  size_t v14;
  unint64_t v15;

  v2 = (uint64_t ***)*((_QWORD *)result + 1);
  if ((*((_BYTE *)v2 + 23) & 0x10) != 0)
  {
    v4 = ***v2;
    v5 = *(_QWORD *)(v4 + 152);
    v6 = *(unsigned int *)(v4 + 168);
    if ((_DWORD)v6)
    {
      LODWORD(v7) = (v6 - 1) & ((v2 >> 4) ^ (v2 >> 9));
      v8 = (uint64_t ****)(v5 + 16 * v7);
      v9 = *v8;
      if (*v8 == v2)
        goto LABEL_9;
      v10 = 1;
      while (v9 != (uint64_t ***)-4096)
      {
        v11 = v7 + v10++;
        v7 = v11 & (v6 - 1);
        v9 = *(uint64_t ****)(v5 + 16 * v7);
        if (v9 == v2)
        {
          v8 = (uint64_t ****)(v5 + 16 * v7);
          goto LABEL_9;
        }
      }
    }
    v8 = (uint64_t ****)(v5 + 16 * v6);
LABEL_9:
    v12 = (unint64_t *)v8[1];
    v15 = *v12;
    v13 = v12 + 2;
    v14 = v15;
    result = (llvm::raw_ostream *)*((_QWORD *)this + 4);
    if (v15 <= *((_QWORD *)this + 3) - (_QWORD)result)
    {
      if (v14)
      {
        result = (llvm::raw_ostream *)memcpy(result, v13, v14);
        *((_QWORD *)this + 4) += v14;
      }
    }
    else
    {
      return llvm::raw_ostream::write(this, (const char *)v13, v14);
    }
  }
  return result;
}

void sub_1C53DD1CC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C53DD1E0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8167C00;
  result[1] = v3;
  return result;
}

uint64_t sub_1C53DD214(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8167C00;
  a2[1] = v2;
  return result;
}

void sub_1C53DD230(uint64_t a1, llvm::raw_ostream *a2)
{
  const llvm::Function *v4;
  uint64_t v5;
  int LocalSlot;
  unint64_t v7;
  llvm::raw_ostream *v8;
  int v9;
  const llvm::Function *v10[2];
  BOOL v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  llvm::SlotTracker *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = *(const llvm::Function **)(*(_QWORD *)(a1 + 8) + 56);
  v5 = *((_QWORD *)v4 + 5);
  v10[0] = (const llvm::Function *)&off_1E814DC18;
  v10[1] = 0;
  v11 = v5 != 0;
  v12 = 0;
  v17 = 0;
  v13 = v5;
  v14 = 0;
  v16 = 0;
  v15 = 0;
  llvm::ModuleSlotTracker::incorporateFunction(v10, v4);
  LocalSlot = llvm::SlotTracker::getLocalSlot(v15, *(const llvm::Value **)(a1 + 8));
  v7 = LocalSlot;
  if (LocalSlot < 0)
  {
    v7 = -(uint64_t)LocalSlot;
    v8 = a2;
    v9 = 1;
  }
  else
  {
    v8 = a2;
    v9 = 0;
  }
  sub_1C5E21910(v8, v7, 0, 0, v9);
  llvm::ModuleSlotTracker::~ModuleSlotTracker((llvm::ModuleSlotTracker *)v10);
}

uint64_t llvm::InlineAsm::InlineAsm(uint64_t a1, llvm::PointerType *a2, __int128 *a3, __int128 *a4, char a5, char a6, int a7, char a8)
{
  unsigned int v16;
  _BYTE *v17;
  __int128 v18;
  _BYTE *v19;
  __int128 v20;

  *(_QWORD *)a1 = llvm::PointerType::get(a2, 0);
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(_DWORD *)(a1 + 20) & 0xC0000000;
  *(_DWORD *)(a1 + 16) = 24;
  *(_DWORD *)(a1 + 20) = v16;
  v17 = (_BYTE *)(a1 + 24);
  if (*((char *)a3 + 23) < 0)
  {
    sub_1C47EBC30(v17, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v18 = *a3;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v17 = v18;
  }
  v19 = (_BYTE *)(a1 + 48);
  if (*((char *)a4 + 23) < 0)
  {
    sub_1C47EBC30(v19, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v20 = *a4;
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a4 + 2);
    *(_OWORD *)v19 = v20;
  }
  *(_QWORD *)(a1 + 72) = a2;
  *(_BYTE *)(a1 + 80) = a5;
  *(_BYTE *)(a1 + 81) = a6;
  *(_DWORD *)(a1 + 84) = a7;
  *(_BYTE *)(a1 + 88) = a8;
  return a1;
}

void llvm::InlineAsm::destroyConstant(void **this, llvm::Value *a2)
{
  int32x2_t **v3;
  int32x2_t *v4;
  int32x2_t v5;
  __int32 v6;
  uint64_t v7;
  llvm::InlineAsm **v8;
  llvm::InlineAsm *v9;
  int v10;
  int v11;

  v3 = *(int32x2_t ***)*this;
  v4 = *v3;
  v5 = (*v3)[192];
  v6 = (*v3)[194].i32[0];
  if (v6)
  {
    LODWORD(v7) = sub_1C623D1FC((uint64_t)this) & (v6 - 1);
    v8 = (llvm::InlineAsm **)(*(_QWORD *)&v5 + 8 * v7);
    v9 = *v8;
    if (*v8 == (llvm::InlineAsm *)this)
    {
LABEL_4:
      *v8 = (llvm::InlineAsm *)-8192;
      v4[193] = vadd_s32(v4[193], (int32x2_t)0x1FFFFFFFFLL);
      if (*((char *)this + 71) < 0)
        operator delete(this[6]);
      if (*((char *)this + 47) < 0)
        operator delete(this[3]);
      llvm::Value::~Value((llvm::Value *)this, a2);
      JUMPOUT(0x1CAA32FC0);
    }
    v10 = 1;
    while (v9 != (llvm::InlineAsm *)-4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v6 - 1);
      v9 = *(llvm::InlineAsm **)(*(_QWORD *)&v5 + 8 * v7);
      if (v9 == (llvm::InlineAsm *)this)
        goto LABEL_3;
    }
    v5 = v4[192];
    v7 = v4[194].u32[0];
  }
  else
  {
    v7 = 0;
  }
LABEL_3:
  v8 = (llvm::InlineAsm **)(*(_QWORD *)&v5 + 8 * v7);
  goto LABEL_4;
}

uint64_t llvm::InlineAsm::ConstraintInfo::Parse(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t *a4)
{
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  _BYTE *v13;
  char **v14;
  int v15;
  int v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t result;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  size_t v30;
  __int128 *p_dst;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  __int128 v59;
  char *v60;
  char *v61;
  size_t v62;
  char *v63;
  __int128 *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  __int128 v76;
  char *v77;
  char *v78;
  char *v79;
  const char *v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  _DWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  __int128 v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  __int128 v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  __int128 v127;
  char *v128;
  char *v129;
  char *v130;
  char *v131;
  unsigned __int8 *v132;
  uint64_t v133;
  __int128 __dst;
  unint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  char *v139;
  _QWORD *v140;

  if (a3)
  {
    v8 = 0;
    v9 = a2;
    v10 = a3;
    do
    {
      v11 = *v9++;
      if (v11 == 124)
        ++v8;
      --v10;
    }
    while (v10);
    v12 = (v8 + 1);
    *(_BYTE *)(a1 + 40) = v12 > 1;
    v13 = (_BYTE *)(a1 + 40);
    if (v12 >= 2)
    {
      sub_1C623C93C((uint64_t *)(a1 + 48), v12);
      v14 = (char **)(*(_QWORD *)(a1 + 48) + 8);
      goto LABEL_10;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 40) = 0;
    v13 = (_BYTE *)(a1 + 40);
  }
  v14 = (char **)(v13 - 24);
LABEL_10:
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_WORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  v15 = *a2;
  if (v15 == 61)
  {
    v17 = a2 + 1;
    v16 = 1;
    *(_DWORD *)a1 = 1;
    goto LABEL_16;
  }
  if (v15 != 126)
  {
    v16 = 0;
    v17 = a2;
LABEL_18:
    if (v15 == 42)
    {
      *(_BYTE *)(a1 + 13) = 1;
      ++v17;
    }
    goto LABEL_20;
  }
  v16 = 2;
  *(_DWORD *)a1 = 2;
  v17 = a2 + 1;
  if (a3 == 1)
  {
LABEL_16:
    v15 = *v17;
    goto LABEL_18;
  }
  if (*v17 != 123)
    return 1;
  v16 = 2;
LABEL_20:
  v18 = &a2[a3];
  if (v17 != &a2[a3])
  {
    v19 = 0;
    v20 = 0;
    v21 = v16;
    while (2)
    {
      result = 1;
      switch(*v17)
      {
        case '#':
        case '*':
          return result;
        case '%':
          if (v21 == 2)
            return result;
          v23 = (_BYTE *)(a1 + 12);
          v24 = v19;
          v25 = 1;
          if ((_DWORD)v20)
            return result;
          goto LABEL_28;
        case '&':
          if (v16 != 1)
            return result;
          v23 = (_BYTE *)(a1 + 4);
          v24 = 1;
          v25 = v20;
          v21 = 1;
          if ((_DWORD)v19)
            return result;
LABEL_28:
          *v23 = 1;
          ++v17;
          v19 = v24;
          v20 = v25;
          if (v17 == v18)
            return result;
          continue;
        default:
          if (v17 == v18)
            return 0;
          v132 = &a2[a3];
          v133 = 0;
          break;
      }
      break;
    }
    while (1)
    {
      v26 = *v17;
      if ((_DWORD)v26 == 123)
      {
        v27 = (unsigned __int8 *)memchr(v17 + 1, 125, v18 - (v17 + 1));
        if (v27)
          v28 = v27;
        else
          v28 = v18;
        if (v28 == v18)
          return 1;
        v29 = v28 + 1;
        v30 = v28 + 1 - v17;
        if (v30 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_192;
        if (v30 >= 0x17)
        {
          v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v30 | 7) != 0x17)
            v33 = v30 | 7;
          v34 = v33 + 1;
          p_dst = (__int128 *)operator new(v33 + 1);
          *((_QWORD *)&__dst + 1) = v30;
          v135 = v34 | 0x8000000000000000;
          *(_QWORD *)&__dst = p_dst;
        }
        else
        {
          HIBYTE(v135) = (_BYTE)v28 + 1 - (_BYTE)v17;
          p_dst = &__dst;
          if (v29 == v17)
            goto LABEL_55;
        }
        memmove(p_dst, v17, v30);
LABEL_55:
        *((_BYTE *)p_dst + v30) = 0;
        v35 = (unint64_t)v14[2];
        v36 = (unint64_t)v14[1];
        if (v36 >= v35)
        {
          v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (_QWORD)*v14) >> 3);
          v39 = v38 + 1;
          if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_192;
          v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (_QWORD)*v14) >> 3);
          if (2 * v40 > v39)
            v39 = 2 * v40;
          if (v40 >= 0x555555555555555)
            v41 = 0xAAAAAAAAAAAAAAALL;
          else
            v41 = v39;
          v140 = v14 + 2;
          if (v41)
          {
            if (v41 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_193;
            v42 = (char *)operator new(24 * v41);
          }
          else
          {
            v42 = 0;
          }
          v55 = &v42[24 * v38];
          *((_QWORD *)v55 + 2) = v135;
          *(_OWORD *)v55 = __dst;
          v135 = 0;
          __dst = 0uLL;
          v57 = *v14;
          v56 = v14[1];
          if (v56 == *v14)
          {
            v60 = v14[1];
            v58 = &v42[24 * v38];
          }
          else
          {
            v58 = &v42[24 * v38];
            do
            {
              v59 = *(_OWORD *)(v56 - 24);
              *((_QWORD *)v58 - 1) = *((_QWORD *)v56 - 1);
              *(_OWORD *)(v58 - 24) = v59;
              v58 -= 24;
              *((_QWORD *)v56 - 2) = 0;
              *((_QWORD *)v56 - 1) = 0;
              *((_QWORD *)v56 - 3) = 0;
              v56 -= 24;
            }
            while (v56 != v57);
            v60 = *v14;
            v56 = v14[1];
          }
          v37 = v55 + 24;
          *v14 = v58;
          v136 = v60;
          v137 = v60;
          v14[1] = v55 + 24;
          v138 = v56;
          v61 = v14[2];
          v14[2] = &v42[24 * v41];
          v139 = v61;
          sub_1C4D868F0((uint64_t)&v136);
        }
        else
        {
          *(_OWORD *)v36 = __dst;
          *(_QWORD *)(v36 + 16) = v135;
          v135 = 0;
          __dst = 0uLL;
          v37 = (char *)(v36 + 24);
        }
        v14[1] = v37;
        if (SHIBYTE(v135) < 0)
          operator delete((void *)__dst);
        goto LABEL_187;
      }
      if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v26 + 60) & 0x400) != 0)
        break;
      if ((_DWORD)v26 == 64)
      {
        v62 = v17[1] - 48;
        if (v62 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_192;
        v63 = (char *)(v17 + 2);
        if (v62 >= 0x17)
        {
          v101 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v62 | 7) != 0x17)
            v101 = v62 | 7;
          v102 = v101 + 1;
          v64 = (__int128 *)operator new(v101 + 1);
          *((_QWORD *)&__dst + 1) = v62;
          v135 = v102 | 0x8000000000000000;
          *(_QWORD *)&__dst = v64;
        }
        else
        {
          HIBYTE(v135) = v62;
          v64 = &__dst;
          if (!v62)
            goto LABEL_149;
        }
        memmove(v64, v63, v62);
LABEL_149:
        *((_BYTE *)v64 + v62) = 0;
        v103 = (unint64_t)v14[2];
        v104 = (unint64_t)v14[1];
        if (v104 >= v103)
        {
          v106 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v104 - (_QWORD)*v14) >> 3);
          v107 = v106 + 1;
          if (v106 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_192;
          v108 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v103 - (_QWORD)*v14) >> 3);
          if (2 * v108 > v107)
            v107 = 2 * v108;
          if (v108 >= 0x555555555555555)
            v109 = 0xAAAAAAAAAAAAAAALL;
          else
            v109 = v107;
          v140 = v14 + 2;
          if (v109)
          {
            if (v109 > 0xAAAAAAAAAAAAAAALL)
LABEL_193:
              sub_1C4764EE4();
            v110 = (char *)operator new(24 * v109);
          }
          else
          {
            v110 = 0;
          }
          v123 = &v110[24 * v106];
          *((_QWORD *)v123 + 2) = v135;
          *(_OWORD *)v123 = __dst;
          v135 = 0;
          __dst = 0uLL;
          v125 = *v14;
          v124 = v14[1];
          if (v124 == *v14)
          {
            v128 = v14[1];
            v126 = &v110[24 * v106];
          }
          else
          {
            v126 = &v110[24 * v106];
            do
            {
              v127 = *(_OWORD *)(v124 - 24);
              *((_QWORD *)v126 - 1) = *((_QWORD *)v124 - 1);
              *(_OWORD *)(v126 - 24) = v127;
              v126 -= 24;
              *((_QWORD *)v124 - 2) = 0;
              *((_QWORD *)v124 - 1) = 0;
              *((_QWORD *)v124 - 3) = 0;
              v124 -= 24;
            }
            while (v124 != v125);
            v128 = *v14;
            v124 = v14[1];
          }
          v105 = v123 + 24;
          *v14 = v126;
          v136 = v128;
          v137 = v128;
          v14[1] = v123 + 24;
          v138 = v124;
          v131 = v14[2];
          v14[2] = &v110[24 * v109];
          v139 = v131;
          sub_1C4D868F0((uint64_t)&v136);
        }
        else
        {
          *(_OWORD *)v104 = __dst;
          *(_QWORD *)(v104 + 16) = v135;
          v135 = 0;
          __dst = 0uLL;
          v105 = (char *)(v104 + 24);
        }
        v14[1] = v105;
        if (SHIBYTE(v135) < 0)
          operator delete((void *)__dst);
        v29 = (unsigned __int8 *)&v63[v62];
        goto LABEL_187;
      }
      if ((_DWORD)v26 == 94)
      {
        v65 = *(unsigned __int16 *)(v17 + 1);
        v66 = (unint64_t)v14[2];
        v67 = (unint64_t)v14[1];
        if (v67 >= v66)
        {
          v91 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v67 - (_QWORD)*v14) >> 3);
          v92 = v91 + 1;
          if (v91 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_192;
          v93 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - (_QWORD)*v14) >> 3);
          if (2 * v93 > v92)
            v92 = 2 * v93;
          if (v93 >= 0x555555555555555)
            v94 = 0xAAAAAAAAAAAAAAALL;
          else
            v94 = v92;
          v140 = v14 + 2;
          if (v94)
          {
            if (v94 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_193;
            v95 = (char *)operator new(24 * v94);
          }
          else
          {
            v95 = 0;
          }
          v111 = &v95[24 * v91];
          *(_QWORD *)v111 = v65;
          v111[23] = 2;
          v113 = *v14;
          v112 = v14[1];
          if (v112 == *v14)
          {
            v116 = v14[1];
            v114 = &v95[24 * v91];
          }
          else
          {
            v114 = &v95[24 * v91];
            do
            {
              v115 = *(_OWORD *)(v112 - 24);
              *((_QWORD *)v114 - 1) = *((_QWORD *)v112 - 1);
              *(_OWORD *)(v114 - 24) = v115;
              v114 -= 24;
              *((_QWORD *)v112 - 2) = 0;
              *((_QWORD *)v112 - 1) = 0;
              *((_QWORD *)v112 - 3) = 0;
              v112 -= 24;
            }
            while (v112 != v113);
            v116 = *v14;
            v112 = v14[1];
          }
          v68 = v111 + 24;
          *v14 = v114;
          v136 = v116;
          v137 = v116;
          v14[1] = v111 + 24;
          v138 = v112;
          v129 = v14[2];
          v14[2] = &v95[24 * v94];
          v139 = v129;
          sub_1C4D868F0((uint64_t)&v136);
        }
        else
        {
          *(_QWORD *)v67 = v65;
          *(_BYTE *)(v67 + 23) = 2;
          v68 = (char *)(v67 + 24);
        }
        v14[1] = v68;
        v29 = v17 + 3;
      }
      else
      {
        if ((_DWORD)v26 == 124)
        {
          v32 = *(_QWORD *)(a1 + 48);
          v133 = (v133 + 1);
          v14 = (char **)(v32 + 32 * v133 + 8);
        }
        else
        {
          v69 = (unint64_t)v14[2];
          v70 = (unint64_t)v14[1];
          if (v70 >= v69)
          {
            v96 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v70 - (_QWORD)*v14) >> 3);
            v97 = v96 + 1;
            if (v96 + 1 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_192;
            v98 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69 - (_QWORD)*v14) >> 3);
            if (2 * v98 > v97)
              v97 = 2 * v98;
            if (v98 >= 0x555555555555555)
              v99 = 0xAAAAAAAAAAAAAAALL;
            else
              v99 = v97;
            v140 = v14 + 2;
            if (v99)
            {
              if (v99 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_193;
              v100 = (char *)operator new(24 * v99);
            }
            else
            {
              v100 = 0;
            }
            v117 = &v100[24 * v96];
            *(_QWORD *)v117 = v26;
            v117[23] = 1;
            v119 = *v14;
            v118 = v14[1];
            if (v118 == *v14)
            {
              v122 = v14[1];
              v120 = &v100[24 * v96];
            }
            else
            {
              v120 = &v100[24 * v96];
              do
              {
                v121 = *(_OWORD *)(v118 - 24);
                *((_QWORD *)v120 - 1) = *((_QWORD *)v118 - 1);
                *(_OWORD *)(v120 - 24) = v121;
                v120 -= 24;
                *((_QWORD *)v118 - 2) = 0;
                *((_QWORD *)v118 - 1) = 0;
                *((_QWORD *)v118 - 3) = 0;
                v118 -= 24;
              }
              while (v118 != v119);
              v122 = *v14;
              v118 = v14[1];
            }
            v71 = v117 + 24;
            *v14 = v120;
            v136 = v122;
            v137 = v122;
            v14[1] = v117 + 24;
            v138 = v118;
            v130 = v14[2];
            v14[2] = &v100[24 * v99];
            v139 = v130;
            sub_1C4D868F0((uint64_t)&v136);
          }
          else
          {
            *(_QWORD *)v70 = v26;
            *(_BYTE *)(v70 + 23) = 1;
            v71 = (char *)(v70 + 24);
          }
          v14[1] = v71;
        }
        v29 = v17 + 1;
      }
LABEL_187:
      result = 0;
      v17 = v29;
      if (v29 == v18)
        return result;
    }
    if (v17 == v18)
    {
      v29 = v18;
    }
    else
    {
      v29 = v17;
      while ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *v29 + 60) & 0x400) != 0)
      {
        if (++v29 == v18)
        {
          v29 = v132;
          break;
        }
      }
    }
    v43 = v29 - v17;
    if ((unint64_t)(v29 - v17) > 0x7FFFFFFFFFFFFFF7)
LABEL_192:
      abort();
    if (v43 >= 0x17)
    {
      v45 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17)
        v45 = v43 | 7;
      v46 = v45 + 1;
      v44 = (__int128 *)operator new(v45 + 1);
      *((_QWORD *)&__dst + 1) = v29 - v17;
      v135 = v46 | 0x8000000000000000;
      *(_QWORD *)&__dst = v44;
    }
    else
    {
      HIBYTE(v135) = (_BYTE)v29 - (_BYTE)v17;
      v44 = &__dst;
      if (v29 == v17)
        goto LABEL_75;
    }
    memmove(v44, v17, v29 - v17);
LABEL_75:
    *((_BYTE *)v44 + v43) = 0;
    v47 = (unint64_t)v14[2];
    v48 = (unint64_t)v14[1];
    if (v48 >= v47)
    {
      v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - (_QWORD)*v14) >> 3);
      v51 = v50 + 1;
      if (v50 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_192;
      v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - (_QWORD)*v14) >> 3);
      if (2 * v52 > v51)
        v51 = 2 * v52;
      if (v52 >= 0x555555555555555)
        v53 = 0xAAAAAAAAAAAAAAALL;
      else
        v53 = v51;
      v140 = v14 + 2;
      if (v53)
      {
        if (v53 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_193;
        v54 = (char *)operator new(24 * v53);
      }
      else
      {
        v54 = 0;
      }
      v72 = &v54[24 * v50];
      *((_QWORD *)v72 + 2) = v135;
      *(_OWORD *)v72 = __dst;
      v135 = 0;
      __dst = 0uLL;
      v74 = *v14;
      v73 = v14[1];
      if (v73 == *v14)
      {
        v77 = v14[1];
        v75 = &v54[24 * v50];
      }
      else
      {
        v75 = &v54[24 * v50];
        do
        {
          v76 = *(_OWORD *)(v73 - 24);
          *((_QWORD *)v75 - 1) = *((_QWORD *)v73 - 1);
          *(_OWORD *)(v75 - 24) = v76;
          v75 -= 24;
          *((_QWORD *)v73 - 2) = 0;
          *((_QWORD *)v73 - 1) = 0;
          *((_QWORD *)v73 - 3) = 0;
          v73 -= 24;
        }
        while (v73 != v74);
        v77 = *v14;
        v73 = v14[1];
      }
      v49 = v72 + 24;
      *v14 = v75;
      v136 = v77;
      v137 = v77;
      v14[1] = v72 + 24;
      v138 = v73;
      v78 = v14[2];
      v14[2] = &v54[24 * v53];
      v139 = v78;
      sub_1C4D868F0((uint64_t)&v136);
    }
    else
    {
      *(_OWORD *)v48 = __dst;
      *(_QWORD *)(v48 + 16) = v135;
      v135 = 0;
      __dst = 0uLL;
      v49 = (char *)(v48 + 24);
    }
    v14[1] = v49;
    if (SHIBYTE(v135) < 0)
      operator delete((void *)__dst);
    v79 = v14[1];
    v80 = v79 - 24;
    if (*(v79 - 1) < 0)
      v80 = *(const char **)v80;
    v81 = atoi(v80);
    v82 = *a4;
    v83 = 0xCCCCCCCCCCCCCCCDLL * ((a4[1] - *a4) >> 4);
    if (v83 <= v81 || *(_DWORD *)(v82 + 80 * v81) != 1 || *(_DWORD *)a1)
      return 1;
    if (*v13)
    {
      v85 = (uint64_t *)(v82 + 80 * v81 + 48);
      v84 = *v85;
      if (v133 >= (unint64_t)((v85[1] - *v85) >> 5))
        return 1;
      v86 = (_DWORD *)(v84 + 32 * v133);
      if (*v86 != -1)
        return 1;
    }
    else
    {
      v87 = v82 + 80 * v81;
      v89 = *(int *)(v87 + 8);
      v86 = (_DWORD *)(v87 + 8);
      v88 = v89;
      if ((_DWORD)v89 != -1 && v83 != v88)
        return 1;
    }
    *v86 = v83;
    goto LABEL_187;
  }
  return 1;
}

void llvm::InlineAsm::ParseConstraints(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  char *v3;
  _QWORD *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t i;
  char v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  _BYTE v29[14];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  void **v38;

  v3 = a1;
  v5 = 0;
  v6 = &a1[a2];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  while (v3 != v6)
  {
    *(_DWORD *)v29 = 0;
    v29[4] = 0;
    *(_DWORD *)&v29[8] = -1;
    *(_WORD *)&v29[12] = 0;
    v31 = 0;
    v32 = 0;
    v30 = 0;
    v33 = 0;
    v35 = 0;
    v36 = 0;
    v34 = 0;
    v37 = 0;
    v7 = (char *)memchr(v3, 44, v6 - v3);
    if (v7)
      v8 = v7;
    else
      v8 = v6;
    if (v8 == v3 || (llvm::InlineAsm::ConstraintInfo::Parse((uint64_t)v29, (unsigned __int8 *)v3, v8 - v3, a3) & 1) != 0)
      goto LABEL_8;
    v11 = a3[2];
    if ((unint64_t)v5 >= v11)
    {
      v15 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v5 - *a3) >> 4);
      v16 = v15 + 1;
      if (v15 + 1 > 0x333333333333333)
        abort();
      v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - *a3) >> 4);
      if (2 * v17 > v16)
        v16 = 2 * v17;
      if (v17 >= 0x199999999999999)
        v18 = 0x333333333333333;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 > 0x333333333333333)
          sub_1C4764EE4();
        v19 = (char *)operator new(80 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = &v19[80 * v15];
      v21 = &v19[80 * v18];
      *(_QWORD *)v20 = *(_QWORD *)v29;
      *(_QWORD *)(v20 + 6) = *(_QWORD *)&v29[6];
      *((_QWORD *)v20 + 2) = 0;
      *((_QWORD *)v20 + 3) = 0;
      *((_QWORD *)v20 + 4) = 0;
      sub_1C484333C((_QWORD *)v20 + 2, v30, v31, 0xAAAAAAAAAAAAAAABLL * ((v31 - v30) >> 3));
      v20[40] = v33;
      *((_QWORD *)v20 + 7) = 0;
      *((_QWORD *)v20 + 8) = 0;
      *((_QWORD *)v20 + 6) = 0;
      sub_1C53DF0E8((_QWORD *)v20 + 6, v34, v35, (v35 - v34) >> 5);
      *((_DWORD *)v20 + 18) = v37;
      v22 = *a3;
      v23 = (char *)a3[1];
      if (v23 == (char *)*a3)
      {
        *a3 = (uint64_t)v20;
        a3[2] = (uint64_t)v21;
      }
      else
      {
        v24 = 0;
        do
        {
          v25 = &v20[v24];
          v26 = &v23[v24];
          v27 = *(_QWORD *)&v23[v24 - 80];
          *(_QWORD *)(v25 - 74) = *(_QWORD *)&v23[v24 - 74];
          *((_QWORD *)v25 - 7) = 0;
          *((_QWORD *)v25 - 6) = 0;
          *((_QWORD *)v25 - 8) = 0;
          *((_QWORD *)v25 - 10) = v27;
          *((_OWORD *)v25 - 4) = *(_OWORD *)&v23[v24 - 64];
          *((_QWORD *)v25 - 6) = *(_QWORD *)&v23[v24 - 48];
          *((_QWORD *)v26 - 7) = 0;
          *((_QWORD *)v26 - 6) = 0;
          *((_QWORD *)v26 - 8) = 0;
          LOBYTE(v27) = v23[v24 - 40];
          *((_QWORD *)v25 - 3) = 0;
          *((_QWORD *)v25 - 2) = 0;
          *((_QWORD *)v25 - 4) = 0;
          *(v25 - 40) = v27;
          *((_OWORD *)v25 - 2) = *(_OWORD *)&v23[v24 - 32];
          *((_QWORD *)v25 - 2) = *(_QWORD *)&v23[v24 - 16];
          *((_QWORD *)v26 - 3) = 0;
          *((_QWORD *)v26 - 2) = 0;
          *((_QWORD *)v26 - 4) = 0;
          *((_DWORD *)v25 - 2) = *(_DWORD *)&v23[v24 - 8];
          v24 -= 80;
        }
        while (&v23[v24] != (char *)v22);
        v23 = (char *)*a3;
        v28 = (char *)a3[1];
        *a3 = (uint64_t)&v20[v24];
        for (a3[2] = (uint64_t)v21; v28 != v23; v28 -= 80)
        {
          v38 = (void **)(v28 - 32);
          sub_1C50107D8(&v38);
          v38 = (void **)(v28 - 64);
          sub_1C4765410(&v38);
        }
      }
      v5 = v20 + 80;
      if (v23)
        operator delete(v23);
    }
    else
    {
      v12 = *(_QWORD *)v29;
      *(_QWORD *)((char *)v5 + 6) = *(_QWORD *)&v29[6];
      *v5 = v12;
      v5[2] = 0;
      v5[3] = 0;
      v5[4] = 0;
      sub_1C484333C(v5 + 2, v30, v31, 0xAAAAAAAAAAAAAAABLL * ((v31 - v30) >> 3));
      v13 = v33;
      v5[6] = 0;
      v14 = v5 + 6;
      *((_BYTE *)v14 - 8) = v13;
      v14[1] = 0;
      v14[2] = 0;
      sub_1C53DF0E8(v14, v34, v35, (v35 - v34) >> 5);
      *((_DWORD *)v14 + 6) = v37;
      v5 = v14 + 4;
    }
    a3[1] = (uint64_t)v5;
    if (v8 == v6)
    {
      v10 = 1;
      v3 = v6;
    }
    else
    {
      v3 = v8 + 1;
      if (v8 + 1 == v6)
      {
        v3 = v6;
LABEL_8:
        for (i = *a3; v5 != (_QWORD *)i; v5 -= 10)
        {
          v38 = (void **)(v5 - 4);
          sub_1C50107D8(&v38);
          v38 = (void **)(v5 - 8);
          sub_1C4765410(&v38);
        }
        v10 = 0;
        a3[1] = i;
        v5 = (_QWORD *)i;
        goto LABEL_11;
      }
      v10 = 1;
    }
LABEL_11:
    v38 = (void **)&v34;
    sub_1C50107D8(&v38);
    v38 = (void **)&v30;
    sub_1C4765410(&v38);
    if ((v10 & 1) == 0)
      return;
  }
}

BOOL llvm::InlineAsm::Verify(uint64_t a1, char *a2, uint64_t a3)
{
  _BOOL8 v3;
  char *v6;
  char *v7;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  char *v18;
  char *v19;
  void **v20;

  if (*(_DWORD *)(a1 + 8) > 0xFFu)
    return 0;
  llvm::InlineAsm::ParseConstraints(a2, a3, (uint64_t *)&v18);
  v6 = v18;
  v7 = v19;
  if (v18 == v19 && a3 != 0)
  {
LABEL_35:
    v3 = 0;
    goto LABEL_36;
  }
  if (v18 == v19)
  {
    v11 = 0;
    goto LABEL_32;
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (uint64_t)v18;
  do
  {
    v14 = *(_DWORD *)v13;
    if (!*(_DWORD *)v13)
    {
      if (v10)
        goto LABEL_35;
      goto LABEL_18;
    }
    if (v14 == 2)
    {
      ++v10;
    }
    else
    {
      if (v14 != 1)
        goto LABEL_21;
      v3 = 0;
      if (v11 != v9 || v10)
        goto LABEL_36;
      v10 = *(unsigned __int8 *)(v13 + 13);
      if (*(_BYTE *)(v13 + 13))
      {
        ++v9;
LABEL_18:
        v10 = 0;
        ++v11;
        goto LABEL_21;
      }
      ++v12;
      v11 = v9;
    }
LABEL_21:
    v13 += 80;
  }
  while ((char *)v13 != v19);
  if (v12 == 1)
  {
    if (*(_BYTE *)(**(_QWORD **)(a1 + 16) + 8) == 16)
      goto LABEL_35;
    goto LABEL_33;
  }
  if (!v12)
  {
LABEL_32:
    if (*(_BYTE *)(**(_QWORD **)(a1 + 16) + 8) != 7)
      goto LABEL_35;
    goto LABEL_33;
  }
  v15 = **(_QWORD **)(a1 + 16);
  if (v15)
    v16 = *(_BYTE *)(v15 + 8) == 16;
  else
    v16 = 0;
  if (!v16 || *(_DWORD *)(v15 + 12) != v12)
    goto LABEL_35;
LABEL_33:
  v3 = *(_DWORD *)(a1 + 12) - 1 == v11;
LABEL_36:
  if (v18)
  {
    if (v19 != v18)
    {
      do
      {
        v20 = (void **)(v7 - 32);
        sub_1C50107D8(&v20);
        v20 = (void **)(v7 - 64);
        sub_1C4765410(&v20);
        v7 -= 80;
      }
      while (v7 != v6);
    }
    operator delete(v6);
  }
  return v3;
}

uint64_t llvm::InlineAsm::containArchDependentInlineAsm(llvm::InlineAsm *this, llvm::Module *a2)
{
  char *v3;
  char v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;

  v3 = (char *)this + 88;
  v4 = *((_BYTE *)this + 111);
  if (v4 >= 0)
    v5 = (char *)this + 88;
  else
    v5 = (char *)*((_QWORD *)this + 11);
  v6 = *((_QWORD *)v3 + 1);
  if (v4 >= 0)
    v7 = v4 & 0x7F;
  else
    v7 = v6;
  if (!sub_1C53DE6F4((uint64_t)v5, v7))
    return 1;
  v8 = (char *)this + 24;
  v9 = *((_QWORD *)this + 4);
  if ((char *)v9 == v8)
    return 0;
  do
  {
    v10 = v9 - 56;
    if (!v9)
      v10 = 0;
    v11 = v10 + 72;
    for (i = *(_QWORD *)(v10 + 80); i != v11; i = *(_QWORD *)(i + 8))
    {
      v13 = i - 24;
      if (!i)
        v13 = 0;
      v14 = v13 + 40;
      for (j = *(_QWORD *)(v13 + 48); j != v14; j = *(_QWORD *)(j + 8))
      {
        if (j && *(_BYTE *)(j - 8) == 84)
        {
          v16 = *(_QWORD *)(j - 24 - 32 * (*(_DWORD *)(j - 4) & 0x7FFFFFF));
          if (v16 && *(_BYTE *)(v16 + 16) == 24)
          {
            v20 = *(_QWORD *)(v16 + 24);
            v18 = v16 + 24;
            v19 = v20;
            v21 = *(_BYTE *)(v18 + 23);
            v22 = v21 >= 0 ? v18 : v19;
            v23 = *(_QWORD *)(v18 + 8);
            v24 = v21 >= 0 ? v21 & 0x7F : v23;
            if (!sub_1C53DE6F4(v22, v24))
              return 1;
          }
        }
      }
    }
    result = 0;
    v9 = *(_QWORD *)(v9 + 8);
  }
  while ((char *)v9 != v8);
  return result;
}

uint64_t sub_1C53DE6F4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t first_not_of;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v16 = a1;
  v17 = a2;
  v2 = 1;
  v14 = 0;
  v15 = 0;
  sub_1C534E9D8(&v16, " \t\n\v\f\r", 6);
  if (v3)
  {
    while (1)
    {
      v18 = 10;
      v4 = llvm::StringRef::find(&v16, &v18, 1uLL, 0);
      if (v4 == -1)
      {
        v8 = 0;
        v9 = 0;
        v5 = v16;
        v6 = v17;
      }
      else
      {
        v5 = v16;
        v6 = v17 >= v4 ? v4 : v17;
        v7 = v17 >= v4 + 1 ? v4 + 1 : v17;
        v8 = v16 + v7;
        v9 = v17 - v7;
      }
      v14 = v5;
      v15 = v6;
      v16 = v8;
      v17 = v9;
      sub_1C534E9D8(&v14, " \t\n\v\f\r", 6);
      if (v10)
      {
        first_not_of = llvm::StringRef::find_first_not_of(&v14, " \t\n\v\f\r", 6, 0);
        if ((v15 <= first_not_of || *(_BYTE *)(v14 + first_not_of) != 46)
          && (v15 < 0x2C
           || memcmp((const void *)(v14 + v15 - 44), "marker for objc_retainAutoreleaseReturnValue", 0x2CuLL)))
        {
          break;
        }
      }
      sub_1C534E9D8(&v16, " \t\n\v\f\r", 6);
      if (!v12)
        return 1;
    }
    return 0;
  }
  return v2;
}

